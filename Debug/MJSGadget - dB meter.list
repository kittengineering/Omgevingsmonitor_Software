
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022fe8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ea0  080230a8  080230a8  000240a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025f48  08025f48  00027424  2**0
                  CONTENTS
  4 .ARM          00000008  08025f48  08025f48  00026f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025f50  08025f50  00027424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025f50  08025f50  00026f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08025f54  08025f54  00026f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000424  20000000  08025f58  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003588  20000424  0802637c  00027424  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200039ac  0802637c  000279ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00027424  2**0
                  CONTENTS, READONLY
 12 .debug_info   000341d9  00000000  00000000  0002744c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000947f  00000000  00000000  0005b625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ad8  00000000  00000000  00064aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fc5  00000000  00000000  00067580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022914  00000000  00000000  00069545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000419f2  00000000  00000000  0008be59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0503  00000000  00000000  000cd84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016dd4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae5c  00000000  00000000  0016de00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00178c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00178cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017b245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000424 	.word	0x20000424
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08023090 	.word	0x08023090

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000428 	.word	0x20000428
 8000104:	08023090 	.word	0x08023090

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	0802515c 	.word	0x0802515c
 8000e0c:	0802519c 	.word	0x0802519c
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	080251d8 	.word	0x080251d8
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00c fb54 	bl	800fd10 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00c fbab 	bl	800fde0 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00c fb5e 	bl	800fd6c <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	20000440 	.word	0x20000440

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00c fada 	bl	800fd10 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00c fb09 	bl	800fd88 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00c faed 	bl	800fd6c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static ESP_States EspState = ESP_STATE_INIT;
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000a20 	.word	0x20000a20

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00b fa74 	bl	800eca4 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
//  ATExpectation = RECEIVE_EXPECTATION_OK;
//  ATCommand = AT_WAKEUP;
//  EspState = ESP_STATE_INIT;
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000a1c 	.word	0x20000a1c

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fd76 	bl	80062c8 <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <setCharges+0x3c>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage() / 1000.0;
 80037e2:	f002 fdd3 	bl	800638c <ReadSolarVoltage>
 80037e6:	0003      	movs	r3, r0
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7ff fde9 	bl	80033c0 <__aeabi_i2d>
 80037ee:	2200      	movs	r2, #0
 80037f0:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <setCharges+0x40>)
 80037f2:	f7fe fadf 	bl	8001db4 <__aeabi_ddiv>
 80037f6:	0002      	movs	r2, r0
 80037f8:	000b      	movs	r3, r1
 80037fa:	0010      	movs	r0, r2
 80037fc:	0019      	movs	r1, r3
 80037fe:	f7ff fe79 	bl	80034f4 <__aeabi_d2f>
 8003802:	1c02      	adds	r2, r0, #0
 8003804:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <setCharges+0x44>)
 8003806:	601a      	str	r2, [r3, #0]
}
 8003808:	46c0      	nop			@ (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	20000570 	.word	0x20000570
 8003814:	408f4000 	.word	0x408f4000
 8003818:	20000574 	.word	0x20000574

0800381c <checkEEprom>:
bool checkEEprom(){
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003822:	4b15      	ldr	r3, [pc, #84]	@ (8003878 <checkEEprom+0x5c>)
 8003824:	4815      	ldr	r0, [pc, #84]	@ (800387c <checkEEprom+0x60>)
 8003826:	220c      	movs	r2, #12
 8003828:	0019      	movs	r1, r3
 800382a:	f7ff ff65 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e00e      	b.n	8003854 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003836:	1dfb      	adds	r3, r7, #7
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	4a0f      	ldr	r2, [pc, #60]	@ (8003878 <checkEEprom+0x5c>)
 800383c:	5cd3      	ldrb	r3, [r2, r3]
 800383e:	001a      	movs	r2, r3
 8003840:	4b0f      	ldr	r3, [pc, #60]	@ (8003880 <checkEEprom+0x64>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	18d2      	adds	r2, r2, r3
 8003846:	4b0e      	ldr	r3, [pc, #56]	@ (8003880 <checkEEprom+0x64>)
 8003848:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800384a:	1dfb      	adds	r3, r7, #7
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	1dfb      	adds	r3, r7, #7
 8003850:	3201      	adds	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b0b      	cmp	r3, #11
 800385a:	d9ec      	bls.n	8003836 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800385c:	4b08      	ldr	r3, [pc, #32]	@ (8003880 <checkEEprom+0x64>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	425a      	negs	r2, r3
 8003862:	4153      	adcs	r3, r2
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b07      	ldr	r3, [pc, #28]	@ (8003884 <checkEEprom+0x68>)
 8003868:	701a      	strb	r2, [r3, #0]
  return test;
 800386a:	4b06      	ldr	r3, [pc, #24]	@ (8003884 <checkEEprom+0x68>)
 800386c:	781b      	ldrb	r3, [r3, #0]
}
 800386e:	0018      	movs	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	b002      	add	sp, #8
 8003874:	bd80      	pop	{r7, pc}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	20000a30 	.word	0x20000a30
 800387c:	0808000c 	.word	0x0808000c
 8003880:	20000a3c 	.word	0x20000a3c
 8003884:	20000a40 	.word	0x20000a40

08003888 <checkName>:
bool checkName(){
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800388e:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <checkName+0x5c>)
 8003890:	4815      	ldr	r0, [pc, #84]	@ (80038e8 <checkName+0x60>)
 8003892:	221e      	movs	r2, #30
 8003894:	0019      	movs	r1, r3
 8003896:	f7ff ff2f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	e00e      	b.n	80038c0 <checkName+0x38>
    configSum += nameConfig[i];
 80038a2:	1dfb      	adds	r3, r7, #7
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	4a0f      	ldr	r2, [pc, #60]	@ (80038e4 <checkName+0x5c>)
 80038a8:	5cd3      	ldrb	r3, [r2, r3]
 80038aa:	001a      	movs	r2, r3
 80038ac:	4b0f      	ldr	r3, [pc, #60]	@ (80038ec <checkName+0x64>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	18d2      	adds	r2, r2, r3
 80038b2:	4b0e      	ldr	r3, [pc, #56]	@ (80038ec <checkName+0x64>)
 80038b4:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 80038b6:	1dfb      	adds	r3, r7, #7
 80038b8:	781a      	ldrb	r2, [r3, #0]
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	3201      	adds	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b0b      	cmp	r3, #11
 80038c6:	d9ec      	bls.n	80038a2 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038c8:	4b08      	ldr	r3, [pc, #32]	@ (80038ec <checkName+0x64>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	1e5a      	subs	r2, r3, #1
 80038ce:	4193      	sbcs	r3, r2
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <checkName+0x68>)
 80038d4:	701a      	strb	r2, [r3, #0]
  return test;
 80038d6:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <checkName+0x68>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
}
 80038da:	0018      	movs	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	b002      	add	sp, #8
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			@ (mov r8, r8)
 80038e4:	20000a44 	.word	0x20000a44
 80038e8:	08080090 	.word	0x08080090
 80038ec:	20000a64 	.word	0x20000a64
 80038f0:	20000a68 	.word	0x20000a68

080038f4 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038fe:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <ESP_GetHT+0x20>)
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 8003904:	4b04      	ldr	r3, [pc, #16]	@ (8003918 <ESP_GetHT+0x24>)
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	601a      	str	r2, [r3, #0]
}
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b002      	add	sp, #8
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	20000568 	.word	0x20000568
 8003918:	2000056c 	.word	0x2000056c

0800391c <setHIDS>:
void setHIDS(float temp, float humid){
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 8003926:	4b05      	ldr	r3, [pc, #20]	@ (800393c <setHIDS+0x20>)
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 800392c:	4b04      	ldr	r3, [pc, #16]	@ (8003940 <setHIDS+0x24>)
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	601a      	str	r2, [r3, #0]
}
 8003932:	46c0      	nop			@ (mov r8, r8)
 8003934:	46bd      	mov	sp, r7
 8003936:	b002      	add	sp, #8
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	20000568 	.word	0x20000568
 8003940:	2000056c 	.word	0x2000056c

08003944 <setVOC>:
void setVOC(uint16_t voc){
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	0002      	movs	r2, r0
 800394c:	1dbb      	adds	r3, r7, #6
 800394e:	801a      	strh	r2, [r3, #0]
  VOCIndex = voc;
 8003950:	4b03      	ldr	r3, [pc, #12]	@ (8003960 <setVOC+0x1c>)
 8003952:	1dba      	adds	r2, r7, #6
 8003954:	8812      	ldrh	r2, [r2, #0]
 8003956:	801a      	strh	r2, [r3, #0]
}
 8003958:	46c0      	nop			@ (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b002      	add	sp, #8
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000578 	.word	0x20000578

08003964 <setMic>:
void setMic(float dB){
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  dBA = dB;
 800396c:	4b03      	ldr	r3, [pc, #12]	@ (800397c <setMic+0x18>)
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	601a      	str	r2, [r3, #0]
}
 8003972:	46c0      	nop			@ (mov r8, r8)
 8003974:	46bd      	mov	sp, r7
 8003976:	b002      	add	sp, #8
 8003978:	bd80      	pop	{r7, pc}
 800397a:	46c0      	nop			@ (mov r8, r8)
 800397c:	2000057c 	.word	0x2000057c

08003980 <setPMsen50>:

void setPMsen50(uint16_t PM2, uint16_t PM10) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	0002      	movs	r2, r0
 8003988:	1dbb      	adds	r3, r7, #6
 800398a:	801a      	strh	r2, [r3, #0]
 800398c:	1d3b      	adds	r3, r7, #4
 800398e:	1c0a      	adds	r2, r1, #0
 8003990:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 8003992:	1dbb      	adds	r3, r7, #6
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	0018      	movs	r0, r3
 8003998:	f7fd fe1a 	bl	80015d0 <__aeabi_i2f>
 800399c:	1c03      	adds	r3, r0, #0
 800399e:	490d      	ldr	r1, [pc, #52]	@ (80039d4 <setPMsen50+0x54>)
 80039a0:	1c18      	adds	r0, r3, #0
 80039a2:	f7fd f917 	bl	8000bd4 <__aeabi_fdiv>
 80039a6:	1c03      	adds	r3, r0, #0
 80039a8:	1c1a      	adds	r2, r3, #0
 80039aa:	4b0b      	ldr	r3, [pc, #44]	@ (80039d8 <setPMsen50+0x58>)
 80039ac:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 80039ae:	1d3b      	adds	r3, r7, #4
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7fd fe0c 	bl	80015d0 <__aeabi_i2f>
 80039b8:	1c03      	adds	r3, r0, #0
 80039ba:	4906      	ldr	r1, [pc, #24]	@ (80039d4 <setPMsen50+0x54>)
 80039bc:	1c18      	adds	r0, r3, #0
 80039be:	f7fd f909 	bl	8000bd4 <__aeabi_fdiv>
 80039c2:	1c03      	adds	r3, r0, #0
 80039c4:	1c1a      	adds	r2, r3, #0
 80039c6:	4b05      	ldr	r3, [pc, #20]	@ (80039dc <setPMsen50+0x5c>)
 80039c8:	601a      	str	r2, [r3, #0]
}
 80039ca:	46c0      	nop			@ (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b002      	add	sp, #8
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	41200000 	.word	0x41200000
 80039d8:	20000580 	.word	0x20000580
 80039dc:	20000584 	.word	0x20000584

080039e0 <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10, uint16_t voc, uint16_t nox) {
 80039e0:	b5b0      	push	{r4, r5, r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	0005      	movs	r5, r0
 80039e8:	000c      	movs	r4, r1
 80039ea:	0010      	movs	r0, r2
 80039ec:	0019      	movs	r1, r3
 80039ee:	1dbb      	adds	r3, r7, #6
 80039f0:	1c2a      	adds	r2, r5, #0
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	1c22      	adds	r2, r4, #0
 80039f8:	801a      	strh	r2, [r3, #0]
 80039fa:	1cbb      	adds	r3, r7, #2
 80039fc:	1c02      	adds	r2, r0, #0
 80039fe:	801a      	strh	r2, [r3, #0]
 8003a00:	003b      	movs	r3, r7
 8003a02:	1c0a      	adds	r2, r1, #0
 8003a04:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 8003a06:	1dbb      	adds	r3, r7, #6
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f7fd fde0 	bl	80015d0 <__aeabi_i2f>
 8003a10:	1c03      	adds	r3, r0, #0
 8003a12:	491d      	ldr	r1, [pc, #116]	@ (8003a88 <setPMs+0xa8>)
 8003a14:	1c18      	adds	r0, r3, #0
 8003a16:	f7fd f8dd 	bl	8000bd4 <__aeabi_fdiv>
 8003a1a:	1c03      	adds	r3, r0, #0
 8003a1c:	1c1a      	adds	r2, r3, #0
 8003a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <setPMs+0xac>)
 8003a20:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 8003a22:	1d3b      	adds	r3, r7, #4
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	0018      	movs	r0, r3
 8003a28:	f7fd fdd2 	bl	80015d0 <__aeabi_i2f>
 8003a2c:	1c03      	adds	r3, r0, #0
 8003a2e:	4916      	ldr	r1, [pc, #88]	@ (8003a88 <setPMs+0xa8>)
 8003a30:	1c18      	adds	r0, r3, #0
 8003a32:	f7fd f8cf 	bl	8000bd4 <__aeabi_fdiv>
 8003a36:	1c03      	adds	r3, r0, #0
 8003a38:	1c1a      	adds	r2, r3, #0
 8003a3a:	4b15      	ldr	r3, [pc, #84]	@ (8003a90 <setPMs+0xb0>)
 8003a3c:	601a      	str	r2, [r3, #0]
  VOCIndex = voc / 10.0f;
 8003a3e:	1cbb      	adds	r3, r7, #2
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	0018      	movs	r0, r3
 8003a44:	f7fd fdc4 	bl	80015d0 <__aeabi_i2f>
 8003a48:	1c03      	adds	r3, r0, #0
 8003a4a:	490f      	ldr	r1, [pc, #60]	@ (8003a88 <setPMs+0xa8>)
 8003a4c:	1c18      	adds	r0, r3, #0
 8003a4e:	f7fd f8c1 	bl	8000bd4 <__aeabi_fdiv>
 8003a52:	1c03      	adds	r3, r0, #0
 8003a54:	1c18      	adds	r0, r3, #0
 8003a56:	f7fc fde1 	bl	800061c <__aeabi_f2uiz>
 8003a5a:	0003      	movs	r3, r0
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a94 <setPMs+0xb4>)
 8003a60:	801a      	strh	r2, [r3, #0]
  airNOx = nox / 10.0f;
 8003a62:	003b      	movs	r3, r7
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7fd fdb2 	bl	80015d0 <__aeabi_i2f>
 8003a6c:	1c03      	adds	r3, r0, #0
 8003a6e:	4906      	ldr	r1, [pc, #24]	@ (8003a88 <setPMs+0xa8>)
 8003a70:	1c18      	adds	r0, r3, #0
 8003a72:	f7fd f8af 	bl	8000bd4 <__aeabi_fdiv>
 8003a76:	1c03      	adds	r3, r0, #0
 8003a78:	1c1a      	adds	r2, r3, #0
 8003a7a:	4b07      	ldr	r3, [pc, #28]	@ (8003a98 <setPMs+0xb8>)
 8003a7c:	601a      	str	r2, [r3, #0]
}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b002      	add	sp, #8
 8003a84:	bdb0      	pop	{r4, r5, r7, pc}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	41200000 	.word	0x41200000
 8003a8c:	20000580 	.word	0x20000580
 8003a90:	20000584 	.word	0x20000584
 8003a94:	20000578 	.word	0x20000578
 8003a98:	20000588 	.word	0x20000588

08003a9c <SetConfigMode>:

void SetConfigMode(){
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003aa0:	4b02      	ldr	r3, [pc, #8]	@ (8003aac <SetConfigMode+0x10>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
}
 8003aa6:	46c0      	nop			@ (mov r8, r8)
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	2000054f 	.word	0x2000054f

08003ab0 <ESP_GetUID>:
//};


//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003ab4:	f00b f940 	bl	800ed38 <HAL_GetUIDw0>
 8003ab8:	0002      	movs	r2, r0
 8003aba:	4b07      	ldr	r3, [pc, #28]	@ (8003ad8 <ESP_GetUID+0x28>)
 8003abc:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8003abe:	f00b f945 	bl	800ed4c <HAL_GetUIDw1>
 8003ac2:	0002      	movs	r2, r0
 8003ac4:	4b04      	ldr	r3, [pc, #16]	@ (8003ad8 <ESP_GetUID+0x28>)
 8003ac6:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003ac8:	f00b f94a 	bl	800ed60 <HAL_GetUIDw2>
 8003acc:	0002      	movs	r2, r0
 8003ace:	4b02      	ldr	r3, [pc, #8]	@ (8003ad8 <ESP_GetUID+0x28>)
 8003ad0:	609a      	str	r2, [r3, #8]
}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20000554 	.word	0x20000554

08003adc <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003ae4:	4b08      	ldr	r3, [pc, #32]	@ (8003b08 <ESP_Init+0x2c>)
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003aea:	4b08      	ldr	r3, [pc, #32]	@ (8003b0c <ESP_Init+0x30>)
 8003aec:	2202      	movs	r2, #2
 8003aee:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003af0:	f7ff ffde 	bl	8003ab0 <ESP_GetUID>
  beurs = checkEEprom();
 8003af4:	f7ff fe92 	bl	800381c <checkEEprom>
 8003af8:	0003      	movs	r3, r0
 8003afa:	001a      	movs	r2, r3
 8003afc:	4b04      	ldr	r3, [pc, #16]	@ (8003b10 <ESP_Init+0x34>)
 8003afe:	701a      	strb	r2, [r3, #0]
}
 8003b00:	46c0      	nop			@ (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b002      	add	sp, #8
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20000444 	.word	0x20000444
 8003b0c:	20000028 	.word	0x20000028
 8003b10:	20000552 	.word	0x20000552

08003b14 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003b14:	b5b0      	push	{r4, r5, r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	000a      	movs	r2, r1
 8003b1e:	1cbb      	adds	r3, r7, #2
 8003b20:	801a      	strh	r2, [r3, #0]
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a10      	ldr	r2, [pc, #64]	@ (8003b68 <ESP_Send+0x54>)
 8003b26:	4911      	ldr	r1, [pc, #68]	@ (8003b6c <ESP_Send+0x58>)
 8003b28:	2003      	movs	r0, #3
 8003b2a:	f00a fc65 	bl	800e3f8 <CreateLine>
#endif
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003b2e:	4b10      	ldr	r3, [pc, #64]	@ (8003b70 <ESP_Send+0x5c>)
 8003b30:	6818      	ldr	r0, [r3, #0]
 8003b32:	250f      	movs	r5, #15
 8003b34:	197c      	adds	r4, r7, r5
 8003b36:	1cbb      	adds	r3, r7, #2
 8003b38:	881a      	ldrh	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	f013 fbdb 	bl	80172f8 <HAL_UART_Transmit_DMA>
 8003b42:	0003      	movs	r3, r0
 8003b44:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003b46:	197b      	adds	r3, r7, r5
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <ESP_Send+0x4a>
    Error("Error in HAL_UART_Transmit_DMA");
 8003b4e:	4a09      	ldr	r2, [pc, #36]	@ (8003b74 <ESP_Send+0x60>)
 8003b50:	4b09      	ldr	r3, [pc, #36]	@ (8003b78 <ESP_Send+0x64>)
 8003b52:	0019      	movs	r1, r3
 8003b54:	2001      	movs	r0, #1
 8003b56:	f00a fc4f 	bl	800e3f8 <CreateLine>
    return false;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e000      	b.n	8003b60 <ESP_Send+0x4c>
  }
  return true;
 8003b5e:	2301      	movs	r3, #1
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b004      	add	sp, #16
 8003b66:	bdb0      	pop	{r4, r5, r7, pc}
 8003b68:	080230a8 	.word	0x080230a8
 8003b6c:	080230b8 	.word	0x080230b8
 8003b70:	20000444 	.word	0x20000444
 8003b74:	080230bc 	.word	0x080230bc
 8003b78:	080230dc 	.word	0x080230dc

08003b7c <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	000a      	movs	r2, r1
 8003b86:	1cbb      	adds	r3, r7, #2
 8003b88:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003b8a:	4b56      	ldr	r3, [pc, #344]	@ (8003ce4 <ESP_Receive+0x168>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
  bool reset = false;
 8003b90:	260f      	movs	r6, #15
 8003b92:	19bb      	adds	r3, r7, r6
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003b98:	4b53      	ldr	r3, [pc, #332]	@ (8003ce8 <ESP_Receive+0x16c>)
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	250e      	movs	r5, #14
 8003b9e:	197c      	adds	r4, r7, r5
 8003ba0:	1cbb      	adds	r3, r7, #2
 8003ba2:	881a      	ldrh	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	f013 fc36 	bl	8017418 <HAL_UART_Receive_DMA>
 8003bac:	0003      	movs	r3, r0
 8003bae:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003bb0:	002c      	movs	r4, r5
 8003bb2:	193b      	adds	r3, r7, r4
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d100      	bne.n	8003bbc <ESP_Receive+0x40>
 8003bba:	e08e      	b.n	8003cda <ESP_Receive+0x15e>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003bbc:	4b4a      	ldr	r3, [pc, #296]	@ (8003ce8 <ESP_Receive+0x16c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2284      	movs	r2, #132	@ 0x84
 8003bc2:	589b      	ldr	r3, [r3, r2]
 8003bc4:	4a49      	ldr	r2, [pc, #292]	@ (8003cec <ESP_Receive+0x170>)
 8003bc6:	494a      	ldr	r1, [pc, #296]	@ (8003cf0 <ESP_Receive+0x174>)
 8003bc8:	2001      	movs	r0, #1
 8003bca:	f00a fc15 	bl	800e3f8 <CreateLine>
    if (status & HAL_UART_ERROR_PE) {
 8003bce:	193b      	adds	r3, r7, r4
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d008      	beq.n	8003bea <ESP_Receive+0x6e>
      Error("Parity error in UART to ESP module");
 8003bd8:	4a46      	ldr	r2, [pc, #280]	@ (8003cf4 <ESP_Receive+0x178>)
 8003bda:	4b45      	ldr	r3, [pc, #276]	@ (8003cf0 <ESP_Receive+0x174>)
 8003bdc:	0019      	movs	r1, r3
 8003bde:	2001      	movs	r0, #1
 8003be0:	f00a fc0a 	bl	800e3f8 <CreateLine>
      reset = true;
 8003be4:	19bb      	adds	r3, r7, r6
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
    }
    if (status & HAL_UART_ERROR_NE) {
 8003bea:	230e      	movs	r3, #14
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d005      	beq.n	8003c02 <ESP_Receive+0x86>
      Error("Noise error in UART to ESP module");
 8003bf6:	4a40      	ldr	r2, [pc, #256]	@ (8003cf8 <ESP_Receive+0x17c>)
 8003bf8:	4b3d      	ldr	r3, [pc, #244]	@ (8003cf0 <ESP_Receive+0x174>)
 8003bfa:	0019      	movs	r1, r3
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	f00a fbfb 	bl	800e3f8 <CreateLine>
    }
    if (status & HAL_UART_ERROR_FE) {
 8003c02:	230e      	movs	r3, #14
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2204      	movs	r2, #4
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d005      	beq.n	8003c1a <ESP_Receive+0x9e>
      Error("Frame error in UART to ESP module");
 8003c0e:	4a3b      	ldr	r2, [pc, #236]	@ (8003cfc <ESP_Receive+0x180>)
 8003c10:	4b37      	ldr	r3, [pc, #220]	@ (8003cf0 <ESP_Receive+0x174>)
 8003c12:	0019      	movs	r1, r3
 8003c14:	2001      	movs	r0, #1
 8003c16:	f00a fbef 	bl	800e3f8 <CreateLine>
    }
    if (status & HAL_UART_ERROR_ORE) {
 8003c1a:	230e      	movs	r3, #14
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	2208      	movs	r2, #8
 8003c22:	4013      	ands	r3, r2
 8003c24:	d005      	beq.n	8003c32 <ESP_Receive+0xb6>
      Error("Overrun error in UART to ESP module");
 8003c26:	4a36      	ldr	r2, [pc, #216]	@ (8003d00 <ESP_Receive+0x184>)
 8003c28:	4b31      	ldr	r3, [pc, #196]	@ (8003cf0 <ESP_Receive+0x174>)
 8003c2a:	0019      	movs	r1, r3
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	f00a fbe3 	bl	800e3f8 <CreateLine>
    }
    if (status & HAL_UART_ERROR_DMA) {
 8003c32:	230e      	movs	r3, #14
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2210      	movs	r2, #16
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d005      	beq.n	8003c4a <ESP_Receive+0xce>
      Error("DMA transfer error in UART to ESP module");
 8003c3e:	4a31      	ldr	r2, [pc, #196]	@ (8003d04 <ESP_Receive+0x188>)
 8003c40:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf0 <ESP_Receive+0x174>)
 8003c42:	0019      	movs	r1, r3
 8003c44:	2001      	movs	r0, #1
 8003c46:	f00a fbd7 	bl	800e3f8 <CreateLine>
    }
    if (status & HAL_UART_ERROR_RTO) {
 8003c4a:	230e      	movs	r3, #14
 8003c4c:	18fb      	adds	r3, r7, r3
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2220      	movs	r2, #32
 8003c52:	4013      	ands	r3, r2
 8003c54:	d005      	beq.n	8003c62 <ESP_Receive+0xe6>
      Error("Receiver Timeout error in UART to ESP module");
 8003c56:	4a2c      	ldr	r2, [pc, #176]	@ (8003d08 <ESP_Receive+0x18c>)
 8003c58:	4b25      	ldr	r3, [pc, #148]	@ (8003cf0 <ESP_Receive+0x174>)
 8003c5a:	0019      	movs	r1, r3
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f00a fbcb 	bl	800e3f8 <CreateLine>
    }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    if (status & HAL_UART_ERROR_INVALID_CALLBACK) {
 8003c62:	230e      	movs	r3, #14
 8003c64:	18fb      	adds	r3, r7, r3
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2240      	movs	r2, #64	@ 0x40
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d005      	beq.n	8003c7a <ESP_Receive+0xfe>
      Error("Invalid Callback error in UART to ESP module");
 8003c6e:	4a27      	ldr	r2, [pc, #156]	@ (8003d0c <ESP_Receive+0x190>)
 8003c70:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf0 <ESP_Receive+0x174>)
 8003c72:	0019      	movs	r1, r3
 8003c74:	2001      	movs	r0, #1
 8003c76:	f00a fbbf 	bl	800e3f8 <CreateLine>
    }
#endif
    if (reset) {
 8003c7a:	230f      	movs	r3, #15
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d025      	beq.n	8003cd0 <ESP_Receive+0x154>
    // Fire all LEDs to red independent of usertoggle or power status and reboot
      TIM2 -> CCR1 = 0;
 8003c84:	2380      	movs	r3, #128	@ 0x80
 8003c86:	05db      	lsls	r3, r3, #23
 8003c88:	2200      	movs	r2, #0
 8003c8a:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 4000;
 8003c8c:	2380      	movs	r3, #128	@ 0x80
 8003c8e:	05db      	lsls	r3, r3, #23
 8003c90:	22fa      	movs	r2, #250	@ 0xfa
 8003c92:	0112      	lsls	r2, r2, #4
 8003c94:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 8003c96:	2380      	movs	r3, #128	@ 0x80
 8003c98:	05db      	lsls	r3, r3, #23
 8003c9a:	22fa      	movs	r2, #250	@ 0xfa
 8003c9c:	0112      	lsls	r2, r2, #4
 8003c9e:	641a      	str	r2, [r3, #64]	@ 0x40
      TIM3 -> CCR1 = 0;
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d10 <ESP_Receive+0x194>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8003ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d10 <ESP_Receive+0x194>)
 8003ca8:	22fa      	movs	r2, #250	@ 0xfa
 8003caa:	0112      	lsls	r2, r2, #4
 8003cac:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8003cae:	4b18      	ldr	r3, [pc, #96]	@ (8003d10 <ESP_Receive+0x194>)
 8003cb0:	22fa      	movs	r2, #250	@ 0xfa
 8003cb2:	0112      	lsls	r2, r2, #4
 8003cb4:	63da      	str	r2, [r3, #60]	@ 0x3c

      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, false);
 8003cb6:	4b17      	ldr	r3, [pc, #92]	@ (8003d14 <ESP_Receive+0x198>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2101      	movs	r1, #1
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f00c fa82 	bl	80101c6 <HAL_GPIO_WritePin>
      HAL_Delay(2000);
 8003cc2:	23fa      	movs	r3, #250	@ 0xfa
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f00a fff6 	bl	800ecb8 <HAL_Delay>
      HAL_NVIC_SystemReset();
 8003ccc:	f00b fcb3 	bl	800f636 <HAL_NVIC_SystemReset>
    }
    RxComplete = true;
 8003cd0:	4b04      	ldr	r3, [pc, #16]	@ (8003ce4 <ESP_Receive+0x168>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
    return false;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e000      	b.n	8003cdc <ESP_Receive+0x160>
  }
  return true;
 8003cda:	2301      	movs	r3, #1
}
 8003cdc:	0018      	movs	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b005      	add	sp, #20
 8003ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ce4:	20000448 	.word	0x20000448
 8003ce8:	20000444 	.word	0x20000444
 8003cec:	080230e0 	.word	0x080230e0
 8003cf0:	080230dc 	.word	0x080230dc
 8003cf4:	08023110 	.word	0x08023110
 8003cf8:	08023134 	.word	0x08023134
 8003cfc:	08023158 	.word	0x08023158
 8003d00:	0802317c 	.word	0x0802317c
 8003d04:	080231a0 	.word	0x080231a0
 8003d08:	080231cc 	.word	0x080231cc
 8003d0c:	080231fc 	.word	0x080231fc
 8003d10:	40000400 	.word	0x40000400
 8003d14:	50000400 	.word	0x50000400

08003d18 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003d20:	4b0a      	ldr	r3, [pc, #40]	@ (8003d4c <HAL_UART_ErrorCallback+0x34>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d10c      	bne.n	8003d44 <HAL_UART_ErrorCallback+0x2c>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    if (huart->ErrorCode != 4) {
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2284      	movs	r2, #132	@ 0x84
 8003d2e:	589b      	ldr	r3, [r3, r2]
 8003d30:	2b04      	cmp	r3, #4
 8003d32:	d007      	beq.n	8003d44 <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2284      	movs	r2, #132	@ 0x84
 8003d38:	589b      	ldr	r3, [r3, r2]
 8003d3a:	4a05      	ldr	r2, [pc, #20]	@ (8003d50 <HAL_UART_ErrorCallback+0x38>)
 8003d3c:	4905      	ldr	r1, [pc, #20]	@ (8003d54 <HAL_UART_ErrorCallback+0x3c>)
 8003d3e:	2003      	movs	r0, #3
 8003d40:	f00a fb5a 	bl	800e3f8 <CreateLine>
    }
  }
}
 8003d44:	46c0      	nop			@ (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b002      	add	sp, #8
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000444 	.word	0x20000444
 8003d50:	0802322c 	.word	0x0802322c
 8003d54:	080230b8 	.word	0x080230b8

08003d58 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	e010      	b.n	8003d8a <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	001a      	movs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	1898      	adds	r0, r3, r2
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	18d3      	adds	r3, r2, r3
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	001a      	movs	r2, r3
 8003d7c:	4b07      	ldr	r3, [pc, #28]	@ (8003d9c <uint8ArrayToString+0x44>)
 8003d7e:	0019      	movs	r1, r3
 8003d80:	f01c f8a4 	bl	801fecc <siprintf>
  for (int i = 0; i < 12; i++)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3301      	adds	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b0b      	cmp	r3, #11
 8003d8e:	ddeb      	ble.n	8003d68 <uint8ArrayToString+0x10>
  }
}
 8003d90:	46c0      	nop			@ (mov r8, r8)
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b004      	add	sp, #16
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	46c0      	nop			@ (mov r8, r8)
 8003d9c:	08023258 	.word	0x08023258

08003da0 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003da2:	b089      	sub	sp, #36	@ 0x24
 8003da4:	af04      	add	r7, sp, #16
 8003da6:	0002      	movs	r2, r0
 8003da8:	1dfb      	adds	r3, r7, #7
 8003daa:	701a      	strb	r2, [r3, #0]
  static uint8_t solarConfig[IdSize];
  static uint8_t noxConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003dac:	4bdb      	ldr	r3, [pc, #876]	@ (800411c <CreateMessage+0x37c>)
 8003dae:	48dc      	ldr	r0, [pc, #880]	@ (8004120 <CreateMessage+0x380>)
 8003db0:	220c      	movs	r2, #12
 8003db2:	0019      	movs	r1, r3
 8003db4:	f7ff fca0 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003db8:	4bda      	ldr	r3, [pc, #872]	@ (8004124 <CreateMessage+0x384>)
 8003dba:	48db      	ldr	r0, [pc, #876]	@ (8004128 <CreateMessage+0x388>)
 8003dbc:	220c      	movs	r2, #12
 8003dbe:	0019      	movs	r1, r3
 8003dc0:	f7ff fc9a 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBAConfigAddr, soundConfig, IdSize);
 8003dc4:	4bd9      	ldr	r3, [pc, #868]	@ (800412c <CreateMessage+0x38c>)
 8003dc6:	48da      	ldr	r0, [pc, #872]	@ (8004130 <CreateMessage+0x390>)
 8003dc8:	220c      	movs	r2, #12
 8003dca:	0019      	movs	r1, r3
 8003dcc:	f7ff fc94 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003dd0:	4bd8      	ldr	r3, [pc, #864]	@ (8004134 <CreateMessage+0x394>)
 8003dd2:	48d9      	ldr	r0, [pc, #868]	@ (8004138 <CreateMessage+0x398>)
 8003dd4:	220c      	movs	r2, #12
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	f7ff fc8e 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003ddc:	4bd7      	ldr	r3, [pc, #860]	@ (800413c <CreateMessage+0x39c>)
 8003dde:	48d8      	ldr	r0, [pc, #864]	@ (8004140 <CreateMessage+0x3a0>)
 8003de0:	220c      	movs	r2, #12
 8003de2:	0019      	movs	r1, r3
 8003de4:	f7ff fc88 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003de8:	4bd6      	ldr	r3, [pc, #856]	@ (8004144 <CreateMessage+0x3a4>)
 8003dea:	48d7      	ldr	r0, [pc, #860]	@ (8004148 <CreateMessage+0x3a8>)
 8003dec:	220c      	movs	r2, #12
 8003dee:	0019      	movs	r1, r3
 8003df0:	f7ff fc82 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(NOxIndexConfigAddr, noxConfig, IdSize);
 8003df4:	4bd5      	ldr	r3, [pc, #852]	@ (800414c <CreateMessage+0x3ac>)
 8003df6:	48d6      	ldr	r0, [pc, #856]	@ (8004150 <CreateMessage+0x3b0>)
 8003df8:	220c      	movs	r2, #12
 8003dfa:	0019      	movs	r1, r3
 8003dfc:	f7ff fc7c 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003e00:	4bd4      	ldr	r3, [pc, #848]	@ (8004154 <CreateMessage+0x3b4>)
 8003e02:	48d5      	ldr	r0, [pc, #852]	@ (8004158 <CreateMessage+0x3b8>)
 8003e04:	220c      	movs	r2, #12
 8003e06:	0019      	movs	r1, r3
 8003e08:	f7ff fc76 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003e0c:	4bd3      	ldr	r3, [pc, #844]	@ (800415c <CreateMessage+0x3bc>)
 8003e0e:	48d4      	ldr	r0, [pc, #848]	@ (8004160 <CreateMessage+0x3c0>)
 8003e10:	220c      	movs	r2, #12
 8003e12:	0019      	movs	r1, r3
 8003e14:	f7ff fc70 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003e18:	f7ff fd36 	bl	8003888 <checkName>
 8003e1c:	1e03      	subs	r3, r0, #0
 8003e1e:	d006      	beq.n	8003e2e <CreateMessage+0x8e>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003e20:	4bd0      	ldr	r3, [pc, #832]	@ (8004164 <CreateMessage+0x3c4>)
 8003e22:	48d1      	ldr	r0, [pc, #836]	@ (8004168 <CreateMessage+0x3c8>)
 8003e24:	221e      	movs	r2, #30
 8003e26:	0019      	movs	r1, r3
 8003e28:	f7ff fc66 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003e2c:	e005      	b.n	8003e3a <CreateMessage+0x9a>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003e2e:	4bcd      	ldr	r3, [pc, #820]	@ (8004164 <CreateMessage+0x3c4>)
 8003e30:	4ace      	ldr	r2, [pc, #824]	@ (800416c <CreateMessage+0x3cc>)
 8003e32:	6811      	ldr	r1, [r2, #0]
 8003e34:	6019      	str	r1, [r3, #0]
 8003e36:	7912      	ldrb	r2, [r2, #4]
 8003e38:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  Debug("sensorid voor opensensmaps nox: %d", noxConfig);
 8003e3a:	4bc4      	ldr	r3, [pc, #784]	@ (800414c <CreateMessage+0x3ac>)
 8003e3c:	4acc      	ldr	r2, [pc, #816]	@ (8004170 <CreateMessage+0x3d0>)
 8003e3e:	49cd      	ldr	r1, [pc, #820]	@ (8004174 <CreateMessage+0x3d4>)
 8003e40:	2003      	movs	r0, #3
 8003e42:	f00a fad9 	bl	800e3f8 <CreateLine>
  setCharges();
 8003e46:	f7ff fcc5 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1152);
 8003e4a:	2390      	movs	r3, #144	@ 0x90
 8003e4c:	00da      	lsls	r2, r3, #3
 8003e4e:	4bca      	ldr	r3, [pc, #808]	@ (8004178 <CreateMessage+0x3d8>)
 8003e50:	2100      	movs	r1, #0
 8003e52:	0018      	movs	r0, r3
 8003e54:	f01c f97e 	bl	8020154 <memset>
  uint16_t index = 0;
 8003e58:	260e      	movs	r6, #14
 8003e5a:	19bb      	adds	r3, r7, r6
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003e60:	19bb      	adds	r3, r7, r6
 8003e62:	881a      	ldrh	r2, [r3, #0]
 8003e64:	4bc4      	ldr	r3, [pc, #784]	@ (8004178 <CreateMessage+0x3d8>)
 8003e66:	18d3      	adds	r3, r2, r3
 8003e68:	4ac4      	ldr	r2, [pc, #784]	@ (800417c <CreateMessage+0x3dc>)
 8003e6a:	0011      	movs	r1, r2
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f01c f82d 	bl	801fecc <siprintf>
  index = strlen(message);
 8003e72:	4bc1      	ldr	r3, [pc, #772]	@ (8004178 <CreateMessage+0x3d8>)
 8003e74:	0018      	movs	r0, r3
 8003e76:	f7fc f979 	bl	800016c <strlen>
 8003e7a:	0002      	movs	r2, r0
 8003e7c:	19bb      	adds	r3, r7, r6
 8003e7e:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003e80:	4aa6      	ldr	r2, [pc, #664]	@ (800411c <CreateMessage+0x37c>)
 8003e82:	4bbf      	ldr	r3, [pc, #764]	@ (8004180 <CreateMessage+0x3e0>)
 8003e84:	0011      	movs	r1, r2
 8003e86:	0018      	movs	r0, r3
 8003e88:	f7ff ff66 	bl	8003d58 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003e8c:	19bb      	adds	r3, r7, r6
 8003e8e:	881a      	ldrh	r2, [r3, #0]
 8003e90:	4bb9      	ldr	r3, [pc, #740]	@ (8004178 <CreateMessage+0x3d8>)
 8003e92:	18d4      	adds	r4, r2, r3
 8003e94:	4bbb      	ldr	r3, [pc, #748]	@ (8004184 <CreateMessage+0x3e4>)
 8003e96:	689d      	ldr	r5, [r3, #8]
 8003e98:	4bbb      	ldr	r3, [pc, #748]	@ (8004188 <CreateMessage+0x3e8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	1c18      	adds	r0, r3, #0
 8003e9e:	f7ff fae1 	bl	8003464 <__aeabi_f2d>
 8003ea2:	0002      	movs	r2, r0
 8003ea4:	000b      	movs	r3, r1
 8003ea6:	48af      	ldr	r0, [pc, #700]	@ (8004164 <CreateMessage+0x3c4>)
 8003ea8:	49b8      	ldr	r1, [pc, #736]	@ (800418c <CreateMessage+0x3ec>)
 8003eaa:	9202      	str	r2, [sp, #8]
 8003eac:	9303      	str	r3, [sp, #12]
 8003eae:	4bb4      	ldr	r3, [pc, #720]	@ (8004180 <CreateMessage+0x3e0>)
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	002a      	movs	r2, r5
 8003eb6:	0020      	movs	r0, r4
 8003eb8:	f01c f808 	bl	801fecc <siprintf>
  index = strlen(message);
 8003ebc:	4bae      	ldr	r3, [pc, #696]	@ (8004178 <CreateMessage+0x3d8>)
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f7fc f954 	bl	800016c <strlen>
 8003ec4:	0002      	movs	r2, r0
 8003ec6:	19bb      	adds	r3, r7, r6
 8003ec8:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003eca:	4a96      	ldr	r2, [pc, #600]	@ (8004124 <CreateMessage+0x384>)
 8003ecc:	4bac      	ldr	r3, [pc, #688]	@ (8004180 <CreateMessage+0x3e0>)
 8003ece:	0011      	movs	r1, r2
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f7ff ff41 	bl	8003d58 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003ed6:	19bb      	adds	r3, r7, r6
 8003ed8:	881a      	ldrh	r2, [r3, #0]
 8003eda:	4ba7      	ldr	r3, [pc, #668]	@ (8004178 <CreateMessage+0x3d8>)
 8003edc:	18d4      	adds	r4, r2, r3
 8003ede:	4ba9      	ldr	r3, [pc, #676]	@ (8004184 <CreateMessage+0x3e4>)
 8003ee0:	689d      	ldr	r5, [r3, #8]
 8003ee2:	4bab      	ldr	r3, [pc, #684]	@ (8004190 <CreateMessage+0x3f0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	1c18      	adds	r0, r3, #0
 8003ee8:	f7ff fabc 	bl	8003464 <__aeabi_f2d>
 8003eec:	0002      	movs	r2, r0
 8003eee:	000b      	movs	r3, r1
 8003ef0:	489c      	ldr	r0, [pc, #624]	@ (8004164 <CreateMessage+0x3c4>)
 8003ef2:	49a8      	ldr	r1, [pc, #672]	@ (8004194 <CreateMessage+0x3f4>)
 8003ef4:	9202      	str	r2, [sp, #8]
 8003ef6:	9303      	str	r3, [sp, #12]
 8003ef8:	4ba1      	ldr	r3, [pc, #644]	@ (8004180 <CreateMessage+0x3e0>)
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	0003      	movs	r3, r0
 8003efe:	002a      	movs	r2, r5
 8003f00:	0020      	movs	r0, r4
 8003f02:	f01b ffe3 	bl	801fecc <siprintf>
  index = strlen(message);
 8003f06:	4b9c      	ldr	r3, [pc, #624]	@ (8004178 <CreateMessage+0x3d8>)
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f7fc f92f 	bl	800016c <strlen>
 8003f0e:	0002      	movs	r2, r0
 8003f10:	19bb      	adds	r3, r7, r6
 8003f12:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003f14:	4a85      	ldr	r2, [pc, #532]	@ (800412c <CreateMessage+0x38c>)
 8003f16:	4b9a      	ldr	r3, [pc, #616]	@ (8004180 <CreateMessage+0x3e0>)
 8003f18:	0011      	movs	r1, r2
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f7ff ff1c 	bl	8003d58 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBA);
 8003f20:	19bb      	adds	r3, r7, r6
 8003f22:	881a      	ldrh	r2, [r3, #0]
 8003f24:	4b94      	ldr	r3, [pc, #592]	@ (8004178 <CreateMessage+0x3d8>)
 8003f26:	18d4      	adds	r4, r2, r3
 8003f28:	4b96      	ldr	r3, [pc, #600]	@ (8004184 <CreateMessage+0x3e4>)
 8003f2a:	689d      	ldr	r5, [r3, #8]
 8003f2c:	4b9a      	ldr	r3, [pc, #616]	@ (8004198 <CreateMessage+0x3f8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	1c18      	adds	r0, r3, #0
 8003f32:	f7ff fa97 	bl	8003464 <__aeabi_f2d>
 8003f36:	0002      	movs	r2, r0
 8003f38:	000b      	movs	r3, r1
 8003f3a:	488a      	ldr	r0, [pc, #552]	@ (8004164 <CreateMessage+0x3c4>)
 8003f3c:	4997      	ldr	r1, [pc, #604]	@ (800419c <CreateMessage+0x3fc>)
 8003f3e:	9202      	str	r2, [sp, #8]
 8003f40:	9303      	str	r3, [sp, #12]
 8003f42:	4b8f      	ldr	r3, [pc, #572]	@ (8004180 <CreateMessage+0x3e0>)
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	0003      	movs	r3, r0
 8003f48:	002a      	movs	r2, r5
 8003f4a:	0020      	movs	r0, r4
 8003f4c:	f01b ffbe 	bl	801fecc <siprintf>
  index = strlen(message);
 8003f50:	4b89      	ldr	r3, [pc, #548]	@ (8004178 <CreateMessage+0x3d8>)
 8003f52:	0018      	movs	r0, r3
 8003f54:	f7fc f90a 	bl	800016c <strlen>
 8003f58:	0002      	movs	r2, r0
 8003f5a:	19bb      	adds	r3, r7, r6
 8003f5c:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003f5e:	4a75      	ldr	r2, [pc, #468]	@ (8004134 <CreateMessage+0x394>)
 8003f60:	4b87      	ldr	r3, [pc, #540]	@ (8004180 <CreateMessage+0x3e0>)
 8003f62:	0011      	movs	r1, r2
 8003f64:	0018      	movs	r0, r3
 8003f66:	f7ff fef7 	bl	8003d58 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003f6a:	19bb      	adds	r3, r7, r6
 8003f6c:	881a      	ldrh	r2, [r3, #0]
 8003f6e:	4b82      	ldr	r3, [pc, #520]	@ (8004178 <CreateMessage+0x3d8>)
 8003f70:	18d0      	adds	r0, r2, r3
 8003f72:	4b84      	ldr	r3, [pc, #528]	@ (8004184 <CreateMessage+0x3e4>)
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	4b8a      	ldr	r3, [pc, #552]	@ (80041a0 <CreateMessage+0x400>)
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	4c7a      	ldr	r4, [pc, #488]	@ (8004164 <CreateMessage+0x3c4>)
 8003f7c:	4989      	ldr	r1, [pc, #548]	@ (80041a4 <CreateMessage+0x404>)
 8003f7e:	9301      	str	r3, [sp, #4]
 8003f80:	4b7f      	ldr	r3, [pc, #508]	@ (8004180 <CreateMessage+0x3e0>)
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	0023      	movs	r3, r4
 8003f86:	f01b ffa1 	bl	801fecc <siprintf>
  index = strlen(message);
 8003f8a:	4b7b      	ldr	r3, [pc, #492]	@ (8004178 <CreateMessage+0x3d8>)
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f7fc f8ed 	bl	800016c <strlen>
 8003f92:	0002      	movs	r2, r0
 8003f94:	19bb      	adds	r3, r7, r6
 8003f96:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003f98:	1dfb      	adds	r3, r7, #7
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	4053      	eors	r3, r2
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d100      	bne.n	8003fa8 <CreateMessage+0x208>
 8003fa6:	e113      	b.n	80041d0 <CreateMessage+0x430>
    uint8ArrayToString(Buffer, batteryConfig);
 8003fa8:	4a64      	ldr	r2, [pc, #400]	@ (800413c <CreateMessage+0x39c>)
 8003faa:	4b75      	ldr	r3, [pc, #468]	@ (8004180 <CreateMessage+0x3e0>)
 8003fac:	0011      	movs	r1, r2
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f7ff fed2 	bl	8003d58 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003fb4:	19bb      	adds	r3, r7, r6
 8003fb6:	881a      	ldrh	r2, [r3, #0]
 8003fb8:	4b6f      	ldr	r3, [pc, #444]	@ (8004178 <CreateMessage+0x3d8>)
 8003fba:	18d4      	adds	r4, r2, r3
 8003fbc:	4b71      	ldr	r3, [pc, #452]	@ (8004184 <CreateMessage+0x3e4>)
 8003fbe:	689d      	ldr	r5, [r3, #8]
 8003fc0:	4b79      	ldr	r3, [pc, #484]	@ (80041a8 <CreateMessage+0x408>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	1c18      	adds	r0, r3, #0
 8003fc6:	f7ff fa4d 	bl	8003464 <__aeabi_f2d>
 8003fca:	0002      	movs	r2, r0
 8003fcc:	000b      	movs	r3, r1
 8003fce:	4865      	ldr	r0, [pc, #404]	@ (8004164 <CreateMessage+0x3c4>)
 8003fd0:	4976      	ldr	r1, [pc, #472]	@ (80041ac <CreateMessage+0x40c>)
 8003fd2:	9202      	str	r2, [sp, #8]
 8003fd4:	9303      	str	r3, [sp, #12]
 8003fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8004180 <CreateMessage+0x3e0>)
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	0003      	movs	r3, r0
 8003fdc:	002a      	movs	r2, r5
 8003fde:	0020      	movs	r0, r4
 8003fe0:	f01b ff74 	bl	801fecc <siprintf>
    index = strlen(message);
 8003fe4:	4b64      	ldr	r3, [pc, #400]	@ (8004178 <CreateMessage+0x3d8>)
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f7fc f8c0 	bl	800016c <strlen>
 8003fec:	0002      	movs	r2, r0
 8003fee:	19bb      	adds	r3, r7, r6
 8003ff0:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003ff2:	4a54      	ldr	r2, [pc, #336]	@ (8004144 <CreateMessage+0x3a4>)
 8003ff4:	4b62      	ldr	r3, [pc, #392]	@ (8004180 <CreateMessage+0x3e0>)
 8003ff6:	0011      	movs	r1, r2
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7ff fead 	bl	8003d58 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003ffe:	19bb      	adds	r3, r7, r6
 8004000:	881a      	ldrh	r2, [r3, #0]
 8004002:	4b5d      	ldr	r3, [pc, #372]	@ (8004178 <CreateMessage+0x3d8>)
 8004004:	18d4      	adds	r4, r2, r3
 8004006:	4b5f      	ldr	r3, [pc, #380]	@ (8004184 <CreateMessage+0x3e4>)
 8004008:	689d      	ldr	r5, [r3, #8]
 800400a:	4b69      	ldr	r3, [pc, #420]	@ (80041b0 <CreateMessage+0x410>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	1c18      	adds	r0, r3, #0
 8004010:	f7ff fa28 	bl	8003464 <__aeabi_f2d>
 8004014:	0002      	movs	r2, r0
 8004016:	000b      	movs	r3, r1
 8004018:	4852      	ldr	r0, [pc, #328]	@ (8004164 <CreateMessage+0x3c4>)
 800401a:	4966      	ldr	r1, [pc, #408]	@ (80041b4 <CreateMessage+0x414>)
 800401c:	9202      	str	r2, [sp, #8]
 800401e:	9303      	str	r3, [sp, #12]
 8004020:	4b57      	ldr	r3, [pc, #348]	@ (8004180 <CreateMessage+0x3e0>)
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	0003      	movs	r3, r0
 8004026:	002a      	movs	r2, r5
 8004028:	0020      	movs	r0, r4
 800402a:	f01b ff4f 	bl	801fecc <siprintf>
    index = strlen(message);
 800402e:	4b52      	ldr	r3, [pc, #328]	@ (8004178 <CreateMessage+0x3d8>)
 8004030:	0018      	movs	r0, r3
 8004032:	f7fc f89b 	bl	800016c <strlen>
 8004036:	0002      	movs	r2, r0
 8004038:	19bb      	adds	r3, r7, r6
 800403a:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, noxConfig);
 800403c:	4a43      	ldr	r2, [pc, #268]	@ (800414c <CreateMessage+0x3ac>)
 800403e:	4b50      	ldr	r3, [pc, #320]	@ (8004180 <CreateMessage+0x3e0>)
 8004040:	0011      	movs	r1, r2
 8004042:	0018      	movs	r0, r3
 8004044:	f7ff fe88 	bl	8003d58 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"NOx\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"NOxr\"},", uid[2], (char*)nameConfig, Buffer, airNOx);
 8004048:	19bb      	adds	r3, r7, r6
 800404a:	881a      	ldrh	r2, [r3, #0]
 800404c:	4b4a      	ldr	r3, [pc, #296]	@ (8004178 <CreateMessage+0x3d8>)
 800404e:	18d4      	adds	r4, r2, r3
 8004050:	4b4c      	ldr	r3, [pc, #304]	@ (8004184 <CreateMessage+0x3e4>)
 8004052:	689d      	ldr	r5, [r3, #8]
 8004054:	4b58      	ldr	r3, [pc, #352]	@ (80041b8 <CreateMessage+0x418>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	1c18      	adds	r0, r3, #0
 800405a:	f7ff fa03 	bl	8003464 <__aeabi_f2d>
 800405e:	0002      	movs	r2, r0
 8004060:	000b      	movs	r3, r1
 8004062:	4840      	ldr	r0, [pc, #256]	@ (8004164 <CreateMessage+0x3c4>)
 8004064:	4955      	ldr	r1, [pc, #340]	@ (80041bc <CreateMessage+0x41c>)
 8004066:	9202      	str	r2, [sp, #8]
 8004068:	9303      	str	r3, [sp, #12]
 800406a:	4b45      	ldr	r3, [pc, #276]	@ (8004180 <CreateMessage+0x3e0>)
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	0003      	movs	r3, r0
 8004070:	002a      	movs	r2, r5
 8004072:	0020      	movs	r0, r4
 8004074:	f01b ff2a 	bl	801fecc <siprintf>
    index = strlen(message);
 8004078:	4b3f      	ldr	r3, [pc, #252]	@ (8004178 <CreateMessage+0x3d8>)
 800407a:	0018      	movs	r0, r3
 800407c:	f7fc f876 	bl	800016c <strlen>
 8004080:	0002      	movs	r2, r0
 8004082:	19bb      	adds	r3, r7, r6
 8004084:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 8004086:	4a33      	ldr	r2, [pc, #204]	@ (8004154 <CreateMessage+0x3b4>)
 8004088:	4b3d      	ldr	r3, [pc, #244]	@ (8004180 <CreateMessage+0x3e0>)
 800408a:	0011      	movs	r1, r2
 800408c:	0018      	movs	r0, r3
 800408e:	f7ff fe63 	bl	8003d58 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, airPM2);
 8004092:	19bb      	adds	r3, r7, r6
 8004094:	881a      	ldrh	r2, [r3, #0]
 8004096:	4b38      	ldr	r3, [pc, #224]	@ (8004178 <CreateMessage+0x3d8>)
 8004098:	18d4      	adds	r4, r2, r3
 800409a:	4b3a      	ldr	r3, [pc, #232]	@ (8004184 <CreateMessage+0x3e4>)
 800409c:	689d      	ldr	r5, [r3, #8]
 800409e:	4b48      	ldr	r3, [pc, #288]	@ (80041c0 <CreateMessage+0x420>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	1c18      	adds	r0, r3, #0
 80040a4:	f7ff f9de 	bl	8003464 <__aeabi_f2d>
 80040a8:	0002      	movs	r2, r0
 80040aa:	000b      	movs	r3, r1
 80040ac:	482d      	ldr	r0, [pc, #180]	@ (8004164 <CreateMessage+0x3c4>)
 80040ae:	4945      	ldr	r1, [pc, #276]	@ (80041c4 <CreateMessage+0x424>)
 80040b0:	9202      	str	r2, [sp, #8]
 80040b2:	9303      	str	r3, [sp, #12]
 80040b4:	4b32      	ldr	r3, [pc, #200]	@ (8004180 <CreateMessage+0x3e0>)
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	0003      	movs	r3, r0
 80040ba:	002a      	movs	r2, r5
 80040bc:	0020      	movs	r0, r4
 80040be:	f01b ff05 	bl	801fecc <siprintf>
    index = strlen(message);
 80040c2:	4b2d      	ldr	r3, [pc, #180]	@ (8004178 <CreateMessage+0x3d8>)
 80040c4:	0018      	movs	r0, r3
 80040c6:	f7fc f851 	bl	800016c <strlen>
 80040ca:	0002      	movs	r2, r0
 80040cc:	19bb      	adds	r3, r7, r6
 80040ce:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 80040d0:	4a22      	ldr	r2, [pc, #136]	@ (800415c <CreateMessage+0x3bc>)
 80040d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004180 <CreateMessage+0x3e0>)
 80040d4:	0011      	movs	r1, r2
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7ff fe3e 	bl	8003d58 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, airPM10);
 80040dc:	19bb      	adds	r3, r7, r6
 80040de:	881a      	ldrh	r2, [r3, #0]
 80040e0:	4b25      	ldr	r3, [pc, #148]	@ (8004178 <CreateMessage+0x3d8>)
 80040e2:	18d4      	adds	r4, r2, r3
 80040e4:	4b27      	ldr	r3, [pc, #156]	@ (8004184 <CreateMessage+0x3e4>)
 80040e6:	689d      	ldr	r5, [r3, #8]
 80040e8:	4b37      	ldr	r3, [pc, #220]	@ (80041c8 <CreateMessage+0x428>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	1c18      	adds	r0, r3, #0
 80040ee:	f7ff f9b9 	bl	8003464 <__aeabi_f2d>
 80040f2:	0002      	movs	r2, r0
 80040f4:	000b      	movs	r3, r1
 80040f6:	481b      	ldr	r0, [pc, #108]	@ (8004164 <CreateMessage+0x3c4>)
 80040f8:	4934      	ldr	r1, [pc, #208]	@ (80041cc <CreateMessage+0x42c>)
 80040fa:	9202      	str	r2, [sp, #8]
 80040fc:	9303      	str	r3, [sp, #12]
 80040fe:	4b20      	ldr	r3, [pc, #128]	@ (8004180 <CreateMessage+0x3e0>)
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	0003      	movs	r3, r0
 8004104:	002a      	movs	r2, r5
 8004106:	0020      	movs	r0, r4
 8004108:	f01b fee0 	bl	801fecc <siprintf>
    index = strlen(message);
 800410c:	4b1a      	ldr	r3, [pc, #104]	@ (8004178 <CreateMessage+0x3d8>)
 800410e:	0018      	movs	r0, r3
 8004110:	f7fc f82c 	bl	800016c <strlen>
 8004114:	0002      	movs	r2, r0
 8004116:	19bb      	adds	r3, r7, r6
 8004118:	801a      	strh	r2, [r3, #0]
 800411a:	e07f      	b.n	800421c <CreateMessage+0x47c>
 800411c:	20000a6c 	.word	0x20000a6c
 8004120:	0808000c 	.word	0x0808000c
 8004124:	20000a78 	.word	0x20000a78
 8004128:	08080018 	.word	0x08080018
 800412c:	20000a84 	.word	0x20000a84
 8004130:	08080048 	.word	0x08080048
 8004134:	20000a90 	.word	0x20000a90
 8004138:	08080030 	.word	0x08080030
 800413c:	20000a9c 	.word	0x20000a9c
 8004140:	0808006c 	.word	0x0808006c
 8004144:	20000aa8 	.word	0x20000aa8
 8004148:	08080078 	.word	0x08080078
 800414c:	20000ab4 	.word	0x20000ab4
 8004150:	08080024 	.word	0x08080024
 8004154:	20000ac0 	.word	0x20000ac0
 8004158:	08080054 	.word	0x08080054
 800415c:	20000acc 	.word	0x20000acc
 8004160:	08080060 	.word	0x08080060
 8004164:	20000ad8 	.word	0x20000ad8
 8004168:	08080090 	.word	0x08080090
 800416c:	08025238 	.word	0x08025238
 8004170:	08023260 	.word	0x08023260
 8004174:	080230b8 	.word	0x080230b8
 8004178:	2000058c 	.word	0x2000058c
 800417c:	08023284 	.word	0x08023284
 8004180:	20000af8 	.word	0x20000af8
 8004184:	20000554 	.word	0x20000554
 8004188:	20000568 	.word	0x20000568
 800418c:	08023288 	.word	0x08023288
 8004190:	2000056c 	.word	0x2000056c
 8004194:	080232dc 	.word	0x080232dc
 8004198:	2000057c 	.word	0x2000057c
 800419c:	08023334 	.word	0x08023334
 80041a0:	20000578 	.word	0x20000578
 80041a4:	08023390 	.word	0x08023390
 80041a8:	20000570 	.word	0x20000570
 80041ac:	080233e4 	.word	0x080233e4
 80041b0:	20000574 	.word	0x20000574
 80041b4:	08023444 	.word	0x08023444
 80041b8:	20000588 	.word	0x20000588
 80041bc:	080234a4 	.word	0x080234a4
 80041c0:	20000580 	.word	0x20000580
 80041c4:	080234fc 	.word	0x080234fc
 80041c8:	20000584 	.word	0x20000584
 80041cc:	08023558 	.word	0x08023558

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 80041d0:	4a21      	ldr	r2, [pc, #132]	@ (8004258 <CreateMessage+0x4b8>)
 80041d2:	4b22      	ldr	r3, [pc, #136]	@ (800425c <CreateMessage+0x4bc>)
 80041d4:	0011      	movs	r1, r2
 80041d6:	0018      	movs	r0, r3
 80041d8:	f7ff fdbe 	bl	8003d58 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 80041dc:	260e      	movs	r6, #14
 80041de:	19bb      	adds	r3, r7, r6
 80041e0:	881a      	ldrh	r2, [r3, #0]
 80041e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004260 <CreateMessage+0x4c0>)
 80041e4:	18d4      	adds	r4, r2, r3
 80041e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004264 <CreateMessage+0x4c4>)
 80041e8:	689d      	ldr	r5, [r3, #8]
 80041ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004268 <CreateMessage+0x4c8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	1c18      	adds	r0, r3, #0
 80041f0:	f7ff f938 	bl	8003464 <__aeabi_f2d>
 80041f4:	0002      	movs	r2, r0
 80041f6:	000b      	movs	r3, r1
 80041f8:	481c      	ldr	r0, [pc, #112]	@ (800426c <CreateMessage+0x4cc>)
 80041fa:	491d      	ldr	r1, [pc, #116]	@ (8004270 <CreateMessage+0x4d0>)
 80041fc:	9202      	str	r2, [sp, #8]
 80041fe:	9303      	str	r3, [sp, #12]
 8004200:	4b16      	ldr	r3, [pc, #88]	@ (800425c <CreateMessage+0x4bc>)
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	0003      	movs	r3, r0
 8004206:	002a      	movs	r2, r5
 8004208:	0020      	movs	r0, r4
 800420a:	f01b fe5f 	bl	801fecc <siprintf>
    index = strlen(message);
 800420e:	4b14      	ldr	r3, [pc, #80]	@ (8004260 <CreateMessage+0x4c0>)
 8004210:	0018      	movs	r0, r3
 8004212:	f7fb ffab 	bl	800016c <strlen>
 8004216:	0002      	movs	r2, r0
 8004218:	19bb      	adds	r3, r7, r6
 800421a:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  Debug("Length of datagram: %d", index);
 800421c:	240e      	movs	r4, #14
 800421e:	193b      	adds	r3, r7, r4
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	4a14      	ldr	r2, [pc, #80]	@ (8004274 <CreateMessage+0x4d4>)
 8004224:	4914      	ldr	r1, [pc, #80]	@ (8004278 <CreateMessage+0x4d8>)
 8004226:	2003      	movs	r0, #3
 8004228:	f00a f8e6 	bl	800e3f8 <CreateLine>
  index = sprintf(&message[index], "]");
 800422c:	193b      	adds	r3, r7, r4
 800422e:	881a      	ldrh	r2, [r3, #0]
 8004230:	4b0b      	ldr	r3, [pc, #44]	@ (8004260 <CreateMessage+0x4c0>)
 8004232:	18d3      	adds	r3, r2, r3
 8004234:	4a11      	ldr	r2, [pc, #68]	@ (800427c <CreateMessage+0x4dc>)
 8004236:	0011      	movs	r1, r2
 8004238:	0018      	movs	r0, r3
 800423a:	f01b fe47 	bl	801fecc <siprintf>
 800423e:	0002      	movs	r2, r0
 8004240:	193b      	adds	r3, r7, r4
 8004242:	801a      	strh	r2, [r3, #0]
  return strlen(message);
 8004244:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <CreateMessage+0x4c0>)
 8004246:	0018      	movs	r0, r3
 8004248:	f7fb ff90 	bl	800016c <strlen>
 800424c:	0003      	movs	r3, r0
 800424e:	b29b      	uxth	r3, r3
}
 8004250:	0018      	movs	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	b005      	add	sp, #20
 8004256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004258:	20000a9c 	.word	0x20000a9c
 800425c:	20000af8 	.word	0x20000af8
 8004260:	2000058c 	.word	0x2000058c
 8004264:	20000554 	.word	0x20000554
 8004268:	20000570 	.word	0x20000570
 800426c:	20000ad8 	.word	0x20000ad8
 8004270:	080235b0 	.word	0x080235b0
 8004274:	08023608 	.word	0x08023608
 8004278:	080230b8 	.word	0x080230b8
 800427c:	08023620 	.word	0x08023620

08004280 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8004284:	2064      	movs	r0, #100	@ 0x64
 8004286:	f00a fd17 	bl	800ecb8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800428a:	4b15      	ldr	r3, [pc, #84]	@ (80042e0 <StartProg+0x60>)
 800428c:	2200      	movs	r2, #0
 800428e:	2101      	movs	r1, #1
 8004290:	0018      	movs	r0, r3
 8004292:	f00b ff98 	bl	80101c6 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8004296:	2064      	movs	r0, #100	@ 0x64
 8004298:	f00a fd0e 	bl	800ecb8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800429c:	4b10      	ldr	r3, [pc, #64]	@ (80042e0 <StartProg+0x60>)
 800429e:	2200      	movs	r2, #0
 80042a0:	2102      	movs	r1, #2
 80042a2:	0018      	movs	r0, r3
 80042a4:	f00b ff8f 	bl	80101c6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80042a8:	23fa      	movs	r3, #250	@ 0xfa
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	0018      	movs	r0, r3
 80042ae:	f00a fd03 	bl	800ecb8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80042b2:	4b0b      	ldr	r3, [pc, #44]	@ (80042e0 <StartProg+0x60>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	2101      	movs	r1, #1
 80042b8:	0018      	movs	r0, r3
 80042ba:	f00b ff84 	bl	80101c6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80042be:	23fa      	movs	r3, #250	@ 0xfa
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	0018      	movs	r0, r3
 80042c4:	f00a fcf8 	bl	800ecb8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 80042c8:	4b05      	ldr	r3, [pc, #20]	@ (80042e0 <StartProg+0x60>)
 80042ca:	2201      	movs	r2, #1
 80042cc:	2102      	movs	r1, #2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f00b ff79 	bl	80101c6 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 80042d4:	2028      	movs	r0, #40	@ 0x28
 80042d6:	f00a fcef 	bl	800ecb8 <HAL_Delay>
}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	50001c00 	.word	0x50001c00

080042e4 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 80042e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042e6:	b0d9      	sub	sp, #356	@ 0x164
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	0008      	movs	r0, r1
 80042ee:	0011      	movs	r1, r2
 80042f0:	4ba4      	ldr	r3, [pc, #656]	@ (8004584 <ParseBuffer+0x2a0>)
 80042f2:	24b0      	movs	r4, #176	@ 0xb0
 80042f4:	0064      	lsls	r4, r4, #1
 80042f6:	191b      	adds	r3, r3, r4
 80042f8:	19db      	adds	r3, r3, r7
 80042fa:	1c02      	adds	r2, r0, #0
 80042fc:	801a      	strh	r2, [r3, #0]
 80042fe:	4ba2      	ldr	r3, [pc, #648]	@ (8004588 <ParseBuffer+0x2a4>)
 8004300:	191b      	adds	r3, r3, r4
 8004302:	19db      	adds	r3, r3, r7
 8004304:	1c0a      	adds	r2, r1, #0
 8004306:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8004308:	2380      	movs	r3, #128	@ 0x80
 800430a:	005a      	lsls	r2, r3, #1
 800430c:	2348      	movs	r3, #72	@ 0x48
 800430e:	18fb      	adds	r3, r7, r3
 8004310:	2100      	movs	r1, #0
 8004312:	0018      	movs	r0, r3
 8004314:	f01b ff1e 	bl	8020154 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8004318:	2360      	movs	r3, #96	@ 0x60
 800431a:	33ff      	adds	r3, #255	@ 0xff
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	2203      	movs	r2, #3
 8004320:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8004322:	23ae      	movs	r3, #174	@ 0xae
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	2200      	movs	r2, #0
 800432a:	801a      	strh	r2, [r3, #0]
 800432c:	e013      	b.n	8004356 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 800432e:	20ae      	movs	r0, #174	@ 0xae
 8004330:	0040      	lsls	r0, r0, #1
 8004332:	183b      	adds	r3, r7, r0
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	18d2      	adds	r2, r2, r3
 800433a:	183b      	adds	r3, r7, r0
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	7811      	ldrb	r1, [r2, #0]
 8004340:	4a92      	ldr	r2, [pc, #584]	@ (800458c <ParseBuffer+0x2a8>)
 8004342:	24b0      	movs	r4, #176	@ 0xb0
 8004344:	0064      	lsls	r4, r4, #1
 8004346:	1912      	adds	r2, r2, r4
 8004348:	19d2      	adds	r2, r2, r7
 800434a:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 800434c:	183b      	adds	r3, r7, r0
 800434e:	881a      	ldrh	r2, [r3, #0]
 8004350:	183b      	adds	r3, r7, r0
 8004352:	3201      	adds	r2, #1
 8004354:	801a      	strh	r2, [r3, #0]
 8004356:	23ae      	movs	r3, #174	@ 0xae
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	18fa      	adds	r2, r7, r3
 800435c:	4b89      	ldr	r3, [pc, #548]	@ (8004584 <ParseBuffer+0x2a0>)
 800435e:	21b0      	movs	r1, #176	@ 0xb0
 8004360:	0049      	lsls	r1, r1, #1
 8004362:	185b      	adds	r3, r3, r1
 8004364:	19db      	adds	r3, r3, r7
 8004366:	8812      	ldrh	r2, [r2, #0]
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d3df      	bcc.n	800432e <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 800436e:	4b85      	ldr	r3, [pc, #532]	@ (8004584 <ParseBuffer+0x2a0>)
 8004370:	185b      	adds	r3, r3, r1
 8004372:	19db      	adds	r3, r3, r7
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	4a85      	ldr	r2, [pc, #532]	@ (800458c <ParseBuffer+0x2a8>)
 8004378:	1852      	adds	r2, r2, r1
 800437a:	19d2      	adds	r2, r2, r7
 800437c:	2100      	movs	r1, #0
 800437e:	54d1      	strb	r1, [r2, r3]
  if (GetVerboseLevel() == VERBOSE_ALL) {
 8004380:	f00a f8b4 	bl	800e4ec <GetVerboseLevel>
 8004384:	0003      	movs	r3, r0
 8004386:	2b03      	cmp	r3, #3
 8004388:	d106      	bne.n	8004398 <ParseBuffer+0xb4>
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 800438a:	2348      	movs	r3, #72	@ 0x48
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	4a80      	ldr	r2, [pc, #512]	@ (8004590 <ParseBuffer+0x2ac>)
 8004390:	4980      	ldr	r1, [pc, #512]	@ (8004594 <ParseBuffer+0x2b0>)
 8004392:	2003      	movs	r0, #3
 8004394:	f00a f830 	bl	800e3f8 <CreateLine>
#endif
  }
  char * ParsePoint = 0;
 8004398:	2300      	movs	r3, #0
 800439a:	26ac      	movs	r6, #172	@ 0xac
 800439c:	0076      	lsls	r6, r6, #1
 800439e:	19ba      	adds	r2, r7, r6
 80043a0:	6013      	str	r3, [r2, #0]
  const char OK[] = AT_RESPONSE_OK;
 80043a2:	4b7d      	ldr	r3, [pc, #500]	@ (8004598 <ParseBuffer+0x2b4>)
 80043a4:	25b0      	movs	r5, #176	@ 0xb0
 80043a6:	006d      	lsls	r5, r5, #1
 80043a8:	195b      	adds	r3, r3, r5
 80043aa:	19db      	adds	r3, r3, r7
 80043ac:	4a7b      	ldr	r2, [pc, #492]	@ (800459c <ParseBuffer+0x2b8>)
 80043ae:	8811      	ldrh	r1, [r2, #0]
 80043b0:	8019      	strh	r1, [r3, #0]
 80043b2:	7892      	ldrb	r2, [r2, #2]
 80043b4:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80043b6:	4b7a      	ldr	r3, [pc, #488]	@ (80045a0 <ParseBuffer+0x2bc>)
 80043b8:	195b      	adds	r3, r3, r5
 80043ba:	19db      	adds	r3, r3, r7
 80043bc:	4a79      	ldr	r2, [pc, #484]	@ (80045a4 <ParseBuffer+0x2c0>)
 80043be:	6811      	ldr	r1, [r2, #0]
 80043c0:	6019      	str	r1, [r3, #0]
 80043c2:	8892      	ldrh	r2, [r2, #4]
 80043c4:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 80043c6:	4b78      	ldr	r3, [pc, #480]	@ (80045a8 <ParseBuffer+0x2c4>)
 80043c8:	195b      	adds	r3, r3, r5
 80043ca:	19db      	adds	r3, r3, r7
 80043cc:	4a77      	ldr	r2, [pc, #476]	@ (80045ac <ParseBuffer+0x2c8>)
 80043ce:	6811      	ldr	r1, [r2, #0]
 80043d0:	6019      	str	r1, [r3, #0]
 80043d2:	7912      	ldrb	r2, [r2, #4]
 80043d4:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 80043d6:	4b76      	ldr	r3, [pc, #472]	@ (80045b0 <ParseBuffer+0x2cc>)
 80043d8:	195b      	adds	r3, r3, r5
 80043da:	19db      	adds	r3, r3, r7
 80043dc:	4a75      	ldr	r2, [pc, #468]	@ (80045b4 <ParseBuffer+0x2d0>)
 80043de:	6811      	ldr	r1, [r2, #0]
 80043e0:	6019      	str	r1, [r3, #0]
 80043e2:	8892      	ldrh	r2, [r2, #4]
 80043e4:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 80043e6:	4b74      	ldr	r3, [pc, #464]	@ (80045b8 <ParseBuffer+0x2d4>)
 80043e8:	195b      	adds	r3, r3, r5
 80043ea:	19db      	adds	r3, r3, r7
 80043ec:	223e      	movs	r2, #62	@ 0x3e
 80043ee:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 80043f0:	4b72      	ldr	r3, [pc, #456]	@ (80045bc <ParseBuffer+0x2d8>)
 80043f2:	195b      	adds	r3, r3, r5
 80043f4:	19db      	adds	r3, r3, r7
 80043f6:	4a72      	ldr	r2, [pc, #456]	@ (80045c0 <ParseBuffer+0x2dc>)
 80043f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043fa:	c313      	stmia	r3!, {r0, r1, r4}
 80043fc:	8811      	ldrh	r1, [r2, #0]
 80043fe:	8019      	strh	r1, [r3, #0]
 8004400:	7892      	ldrb	r2, [r2, #2]
 8004402:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004404:	4b6f      	ldr	r3, [pc, #444]	@ (80045c4 <ParseBuffer+0x2e0>)
 8004406:	195b      	adds	r3, r3, r5
 8004408:	19db      	adds	r3, r3, r7
 800440a:	4a6f      	ldr	r2, [pc, #444]	@ (80045c8 <ParseBuffer+0x2e4>)
 800440c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800440e:	c313      	stmia	r3!, {r0, r1, r4}
 8004410:	8812      	ldrh	r2, [r2, #0]
 8004412:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8004414:	4b5c      	ldr	r3, [pc, #368]	@ (8004588 <ParseBuffer+0x2a4>)
 8004416:	195b      	adds	r3, r3, r5
 8004418:	19db      	adds	r3, r3, r7
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10a      	bne.n	8004436 <ParseBuffer+0x152>
    ParsePoint = strstr(tempBuf, OK);
 8004420:	2344      	movs	r3, #68	@ 0x44
 8004422:	18fa      	adds	r2, r7, r3
 8004424:	2348      	movs	r3, #72	@ 0x48
 8004426:	18fb      	adds	r3, r7, r3
 8004428:	0011      	movs	r1, r2
 800442a:	0018      	movs	r0, r3
 800442c:	f01b fecd 	bl	80201ca <strstr>
 8004430:	0003      	movs	r3, r0
 8004432:	19ba      	adds	r2, r7, r6
 8004434:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8004436:	4b54      	ldr	r3, [pc, #336]	@ (8004588 <ParseBuffer+0x2a4>)
 8004438:	22b0      	movs	r2, #176	@ 0xb0
 800443a:	0052      	lsls	r2, r2, #1
 800443c:	189b      	adds	r3, r3, r2
 800443e:	19db      	adds	r3, r3, r7
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d10c      	bne.n	8004460 <ParseBuffer+0x17c>
    ParsePoint = strstr(tempBuf, ready);
 8004446:	232c      	movs	r3, #44	@ 0x2c
 8004448:	18fa      	adds	r2, r7, r3
 800444a:	2348      	movs	r3, #72	@ 0x48
 800444c:	18fb      	adds	r3, r7, r3
 800444e:	0011      	movs	r1, r2
 8004450:	0018      	movs	r0, r3
 8004452:	f01b feba 	bl	80201ca <strstr>
 8004456:	0003      	movs	r3, r0
 8004458:	22ac      	movs	r2, #172	@ 0xac
 800445a:	0052      	lsls	r2, r2, #1
 800445c:	18ba      	adds	r2, r7, r2
 800445e:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8004460:	4b49      	ldr	r3, [pc, #292]	@ (8004588 <ParseBuffer+0x2a4>)
 8004462:	22b0      	movs	r2, #176	@ 0xb0
 8004464:	0052      	lsls	r2, r2, #1
 8004466:	189b      	adds	r3, r3, r2
 8004468:	19db      	adds	r3, r3, r7
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b02      	cmp	r3, #2
 800446e:	d10c      	bne.n	800448a <ParseBuffer+0x1a6>
    ParsePoint = strstr(tempBuf, start);
 8004470:	2328      	movs	r3, #40	@ 0x28
 8004472:	18fa      	adds	r2, r7, r3
 8004474:	2348      	movs	r3, #72	@ 0x48
 8004476:	18fb      	adds	r3, r7, r3
 8004478:	0011      	movs	r1, r2
 800447a:	0018      	movs	r0, r3
 800447c:	f01b fea5 	bl	80201ca <strstr>
 8004480:	0003      	movs	r3, r0
 8004482:	22ac      	movs	r2, #172	@ 0xac
 8004484:	0052      	lsls	r2, r2, #1
 8004486:	18ba      	adds	r2, r7, r2
 8004488:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 800448a:	4b3f      	ldr	r3, [pc, #252]	@ (8004588 <ParseBuffer+0x2a4>)
 800448c:	22b0      	movs	r2, #176	@ 0xb0
 800448e:	0052      	lsls	r2, r2, #1
 8004490:	189b      	adds	r3, r3, r2
 8004492:	19db      	adds	r3, r3, r7
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b05      	cmp	r3, #5
 8004498:	d10c      	bne.n	80044b4 <ParseBuffer+0x1d0>
    ParsePoint = strstr(tempBuf, TIME);
 800449a:	2308      	movs	r3, #8
 800449c:	18fa      	adds	r2, r7, r3
 800449e:	2348      	movs	r3, #72	@ 0x48
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	0011      	movs	r1, r2
 80044a4:	0018      	movs	r0, r3
 80044a6:	f01b fe90 	bl	80201ca <strstr>
 80044aa:	0003      	movs	r3, r0
 80044ac:	22ac      	movs	r2, #172	@ 0xac
 80044ae:	0052      	lsls	r2, r2, #1
 80044b0:	18ba      	adds	r2, r7, r2
 80044b2:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 80044b4:	233c      	movs	r3, #60	@ 0x3c
 80044b6:	18fa      	adds	r2, r7, r3
 80044b8:	2448      	movs	r4, #72	@ 0x48
 80044ba:	193b      	adds	r3, r7, r4
 80044bc:	0011      	movs	r1, r2
 80044be:	0018      	movs	r0, r3
 80044c0:	f01b fe83 	bl	80201ca <strstr>
 80044c4:	0003      	movs	r3, r0
 80044c6:	22aa      	movs	r2, #170	@ 0xaa
 80044c8:	0052      	lsls	r2, r2, #1
 80044ca:	18ba      	adds	r2, r7, r2
 80044cc:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 80044ce:	2318      	movs	r3, #24
 80044d0:	18fa      	adds	r2, r7, r3
 80044d2:	193b      	adds	r3, r7, r4
 80044d4:	0011      	movs	r1, r2
 80044d6:	0018      	movs	r0, r3
 80044d8:	f01b fe77 	bl	80201ca <strstr>
 80044dc:	0003      	movs	r3, r0
 80044de:	22a8      	movs	r2, #168	@ 0xa8
 80044e0:	0052      	lsls	r2, r2, #1
 80044e2:	18ba      	adds	r2, r7, r2
 80044e4:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 80044e6:	4a39      	ldr	r2, [pc, #228]	@ (80045cc <ParseBuffer+0x2e8>)
 80044e8:	193b      	adds	r3, r7, r4
 80044ea:	0011      	movs	r1, r2
 80044ec:	0018      	movs	r0, r3
 80044ee:	f01b fe6c 	bl	80201ca <strstr>
 80044f2:	0003      	movs	r3, r0
 80044f4:	22a6      	movs	r2, #166	@ 0xa6
 80044f6:	0052      	lsls	r2, r2, #1
 80044f8:	18ba      	adds	r2, r7, r2
 80044fa:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 80044fc:	2334      	movs	r3, #52	@ 0x34
 80044fe:	18fa      	adds	r2, r7, r3
 8004500:	193b      	adds	r3, r7, r4
 8004502:	0011      	movs	r1, r2
 8004504:	0018      	movs	r0, r3
 8004506:	f01b fe60 	bl	80201ca <strstr>
 800450a:	0003      	movs	r3, r0
 800450c:	22a4      	movs	r2, #164	@ 0xa4
 800450e:	0052      	lsls	r2, r2, #1
 8004510:	18ba      	adds	r2, r7, r2
 8004512:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8004514:	4b1b      	ldr	r3, [pc, #108]	@ (8004584 <ParseBuffer+0x2a0>)
 8004516:	21b0      	movs	r1, #176	@ 0xb0
 8004518:	0049      	lsls	r1, r1, #1
 800451a:	185b      	adds	r3, r3, r1
 800451c:	19db      	adds	r3, r3, r7
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d800      	bhi.n	8004526 <ParseBuffer+0x242>
 8004524:	e0c1      	b.n	80046aa <ParseBuffer+0x3c6>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004526:	22ac      	movs	r2, #172	@ 0xac
 8004528:	0052      	lsls	r2, r2, #1
 800452a:	18bb      	adds	r3, r7, r2
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d054      	beq.n	80045dc <ParseBuffer+0x2f8>
 8004532:	18bb      	adds	r3, r7, r2
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b4f      	cmp	r3, #79	@ 0x4f
 800453a:	d14f      	bne.n	80045dc <ParseBuffer+0x2f8>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 800453c:	2360      	movs	r3, #96	@ 0x60
 800453e:	33ff      	adds	r3, #255	@ 0xff
 8004540:	18fb      	adds	r3, r7, r3
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004546:	4b22      	ldr	r3, [pc, #136]	@ (80045d0 <ParseBuffer+0x2ec>)
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b12      	cmp	r3, #18
 800454c:	d146      	bne.n	80045dc <ParseBuffer+0x2f8>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800454e:	4b0d      	ldr	r3, [pc, #52]	@ (8004584 <ParseBuffer+0x2a0>)
 8004550:	185b      	adds	r3, r3, r1
 8004552:	19db      	adds	r3, r3, r7
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	2b2b      	cmp	r3, #43	@ 0x2b
 8004558:	d10b      	bne.n	8004572 <ParseBuffer+0x28e>
 800455a:	4b0c      	ldr	r3, [pc, #48]	@ (800458c <ParseBuffer+0x2a8>)
 800455c:	185b      	adds	r3, r3, r1
 800455e:	19db      	adds	r3, r3, r7
 8004560:	2221      	movs	r2, #33	@ 0x21
 8004562:	5c9b      	ldrb	r3, [r3, r2]
 8004564:	2b32      	cmp	r3, #50	@ 0x32
 8004566:	d104      	bne.n	8004572 <ParseBuffer+0x28e>
          ParseTime(tempBuf);
 8004568:	193b      	adds	r3, r7, r4
 800456a:	0018      	movs	r0, r3
 800456c:	f002 f8ce 	bl	800670c <ParseTime>
 8004570:	e034      	b.n	80045dc <ParseBuffer+0x2f8>
        }
        else {
          Error("Error getting time");
 8004572:	4a18      	ldr	r2, [pc, #96]	@ (80045d4 <ParseBuffer+0x2f0>)
 8004574:	4b18      	ldr	r3, [pc, #96]	@ (80045d8 <ParseBuffer+0x2f4>)
 8004576:	0019      	movs	r1, r3
 8004578:	2001      	movs	r0, #1
 800457a:	f009 ff3d 	bl	800e3f8 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800457e:	2306      	movs	r3, #6
 8004580:	e097      	b.n	80046b2 <ParseBuffer+0x3ce>
 8004582:	46c0      	nop			@ (mov r8, r8)
 8004584:	fffffea2 	.word	0xfffffea2
 8004588:	fffffea1 	.word	0xfffffea1
 800458c:	fffffee8 	.word	0xfffffee8
 8004590:	08023624 	.word	0x08023624
 8004594:	080230b8 	.word	0x080230b8
 8004598:	fffffee4 	.word	0xfffffee4
 800459c:	08023650 	.word	0x08023650
 80045a0:	fffffedc 	.word	0xfffffedc
 80045a4:	08023654 	.word	0x08023654
 80045a8:	fffffed4 	.word	0xfffffed4
 80045ac:	0802365c 	.word	0x0802365c
 80045b0:	fffffecc 	.word	0xfffffecc
 80045b4:	08023664 	.word	0x08023664
 80045b8:	fffffec8 	.word	0xfffffec8
 80045bc:	fffffeb8 	.word	0xfffffeb8
 80045c0:	0802366c 	.word	0x0802366c
 80045c4:	fffffea8 	.word	0xfffffea8
 80045c8:	0802367c 	.word	0x0802367c
 80045cc:	08025218 	.word	0x08025218
 80045d0:	20000a2a 	.word	0x20000a2a
 80045d4:	0802363c 	.word	0x0802363c
 80045d8:	080230dc 	.word	0x080230dc
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80045dc:	22ac      	movs	r2, #172	@ 0xac
 80045de:	0052      	lsls	r2, r2, #1
 80045e0:	18bb      	adds	r3, r7, r2
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d009      	beq.n	80045fc <ParseBuffer+0x318>
 80045e8:	18bb      	adds	r3, r7, r2
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b72      	cmp	r3, #114	@ 0x72
 80045f0:	d104      	bne.n	80045fc <ParseBuffer+0x318>
      status = RECEIVE_STATUS_READY;
 80045f2:	2360      	movs	r3, #96	@ 0x60
 80045f4:	33ff      	adds	r3, #255	@ 0xff
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	2202      	movs	r2, #2
 80045fa:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80045fc:	22ac      	movs	r2, #172	@ 0xac
 80045fe:	0052      	lsls	r2, r2, #1
 8004600:	18bb      	adds	r3, r7, r2
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d009      	beq.n	800461c <ParseBuffer+0x338>
 8004608:	18bb      	adds	r3, r7, r2
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004610:	d104      	bne.n	800461c <ParseBuffer+0x338>
      status = RECEIVE_STATUS_START;
 8004612:	2360      	movs	r3, #96	@ 0x60
 8004614:	33ff      	adds	r3, #255	@ 0xff
 8004616:	18fb      	adds	r3, r7, r3
 8004618:	2205      	movs	r2, #5
 800461a:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 800461c:	22ac      	movs	r2, #172	@ 0xac
 800461e:	0052      	lsls	r2, r2, #1
 8004620:	18bb      	adds	r3, r7, r2
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d009      	beq.n	800463c <ParseBuffer+0x358>
 8004628:	18bb      	adds	r3, r7, r2
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b2b      	cmp	r3, #43	@ 0x2b
 8004630:	d104      	bne.n	800463c <ParseBuffer+0x358>
      status = RECEIVE_STATUS_TIME;
 8004632:	2360      	movs	r3, #96	@ 0x60
 8004634:	33ff      	adds	r3, #255	@ 0xff
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	220b      	movs	r2, #11
 800463a:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 800463c:	22aa      	movs	r2, #170	@ 0xaa
 800463e:	0052      	lsls	r2, r2, #1
 8004640:	18bb      	adds	r3, r7, r2
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d004      	beq.n	8004652 <ParseBuffer+0x36e>
 8004648:	18bb      	adds	r3, r7, r2
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b45      	cmp	r3, #69	@ 0x45
 8004650:	d00a      	beq.n	8004668 <ParseBuffer+0x384>
 8004652:	22a4      	movs	r2, #164	@ 0xa4
 8004654:	0052      	lsls	r2, r2, #1
 8004656:	18bb      	adds	r3, r7, r2
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <ParseBuffer+0x38e>
 800465e:	18bb      	adds	r3, r7, r2
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b46      	cmp	r3, #70	@ 0x46
 8004666:	d104      	bne.n	8004672 <ParseBuffer+0x38e>
      status = RECEIVE_STATUS_ERROR;
 8004668:	2360      	movs	r3, #96	@ 0x60
 800466a:	33ff      	adds	r3, #255	@ 0xff
 800466c:	18fb      	adds	r3, r7, r3
 800466e:	2201      	movs	r2, #1
 8004670:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8004672:	22a8      	movs	r2, #168	@ 0xa8
 8004674:	0052      	lsls	r2, r2, #1
 8004676:	18bb      	adds	r3, r7, r2
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <ParseBuffer+0x3aa>
 800467e:	18bb      	adds	r3, r7, r2
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b57      	cmp	r3, #87	@ 0x57
 8004686:	d102      	bne.n	800468e <ParseBuffer+0x3aa>
      ConnectionMade = true;
 8004688:	4b0c      	ldr	r3, [pc, #48]	@ (80046bc <ParseBuffer+0x3d8>)
 800468a:	2201      	movs	r2, #1
 800468c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800468e:	22a6      	movs	r2, #166	@ 0xa6
 8004690:	0052      	lsls	r2, r2, #1
 8004692:	18bb      	adds	r3, r7, r2
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d007      	beq.n	80046aa <ParseBuffer+0x3c6>
 800469a:	18bb      	adds	r3, r7, r2
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b32      	cmp	r3, #50	@ 0x32
 80046a2:	d102      	bne.n	80046aa <ParseBuffer+0x3c6>
      beurs = true;
 80046a4:	4b06      	ldr	r3, [pc, #24]	@ (80046c0 <ParseBuffer+0x3dc>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80046aa:	2360      	movs	r3, #96	@ 0x60
 80046ac:	33ff      	adds	r3, #255	@ 0xff
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	781b      	ldrb	r3, [r3, #0]

}
 80046b2:	0018      	movs	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b059      	add	sp, #356	@ 0x164
 80046b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ba:	46c0      	nop			@ (mov r8, r8)
 80046bc:	20000550 	.word	0x20000550
 80046c0:	20000552 	.word	0x20000552

080046c4 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80046ca:	4b0b      	ldr	r3, [pc, #44]	@ (80046f8 <PollAwake+0x34>)
 80046cc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7fb fd4b 	bl	800016c <strlen>
 80046d6:	0003      	movs	r3, r0
 80046d8:	b29a      	uxth	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	0011      	movs	r1, r2
 80046de:	0018      	movs	r0, r3
 80046e0:	f7ff fa18 	bl	8003b14 <ESP_Send>
 80046e4:	1e03      	subs	r3, r0, #0
 80046e6:	d001      	beq.n	80046ec <PollAwake+0x28>
    return true;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <PollAwake+0x2a>
  }
  else{
    return false;
 80046ec:	2300      	movs	r3, #0
  }
}
 80046ee:	0018      	movs	r0, r3
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b002      	add	sp, #8
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	46c0      	nop			@ (mov r8, r8)
 80046f8:	0802368c 	.word	0x0802368c

080046fc <RFPower>:
bool RFPower(){
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8004702:	4b0b      	ldr	r3, [pc, #44]	@ (8004730 <RFPower+0x34>)
 8004704:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	0018      	movs	r0, r3
 800470a:	f7fb fd2f 	bl	800016c <strlen>
 800470e:	0003      	movs	r3, r0
 8004710:	b29a      	uxth	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0011      	movs	r1, r2
 8004716:	0018      	movs	r0, r3
 8004718:	f7ff f9fc 	bl	8003b14 <ESP_Send>
 800471c:	1e03      	subs	r3, r0, #0
 800471e:	d001      	beq.n	8004724 <RFPower+0x28>
    return true;
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <RFPower+0x2a>
  }
  else{
    return false;
 8004724:	2300      	movs	r3, #0
  }
}
 8004726:	0018      	movs	r0, r3
 8004728:	46bd      	mov	sp, r7
 800472a:	b002      	add	sp, #8
 800472c:	bd80      	pop	{r7, pc}
 800472e:	46c0      	nop			@ (mov r8, r8)
 8004730:	08023694 	.word	0x08023694

08004734 <CheckRFPower>:
bool CheckRFPower(){
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800473a:	4b0b      	ldr	r3, [pc, #44]	@ (8004768 <CheckRFPower+0x34>)
 800473c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	0018      	movs	r0, r3
 8004742:	f7fb fd13 	bl	800016c <strlen>
 8004746:	0003      	movs	r3, r0
 8004748:	b29a      	uxth	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	0011      	movs	r1, r2
 800474e:	0018      	movs	r0, r3
 8004750:	f7ff f9e0 	bl	8003b14 <ESP_Send>
 8004754:	1e03      	subs	r3, r0, #0
 8004756:	d001      	beq.n	800475c <CheckRFPower+0x28>
    return true;
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <CheckRFPower+0x2a>
  }
  else{
    return false;
 800475c:	2300      	movs	r3, #0
  }
}
 800475e:	0018      	movs	r0, r3
 8004760:	46bd      	mov	sp, r7
 8004762:	b002      	add	sp, #8
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			@ (mov r8, r8)
 8004768:	080236a4 	.word	0x080236a4

0800476c <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8004772:	4b0b      	ldr	r3, [pc, #44]	@ (80047a0 <ATRestore+0x34>)
 8004774:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	0018      	movs	r0, r3
 800477a:	f7fb fcf7 	bl	800016c <strlen>
 800477e:	0003      	movs	r3, r0
 8004780:	b29a      	uxth	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0011      	movs	r1, r2
 8004786:	0018      	movs	r0, r3
 8004788:	f7ff f9c4 	bl	8003b14 <ESP_Send>
 800478c:	1e03      	subs	r3, r0, #0
 800478e:	d001      	beq.n	8004794 <ATRestore+0x28>
    return true;
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <ATRestore+0x2a>
  }
  else{
    return false;
 8004794:	2300      	movs	r3, #0
  }
}
 8004796:	0018      	movs	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	b002      	add	sp, #8
 800479c:	bd80      	pop	{r7, pc}
 800479e:	46c0      	nop			@ (mov r8, r8)
 80047a0:	080236b4 	.word	0x080236b4

080047a4 <CWINIT>:
bool CWINIT(){
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80047aa:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <CWINIT+0x34>)
 80047ac:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f7fb fcdb 	bl	800016c <strlen>
 80047b6:	0003      	movs	r3, r0
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	0011      	movs	r1, r2
 80047be:	0018      	movs	r0, r3
 80047c0:	f7ff f9a8 	bl	8003b14 <ESP_Send>
 80047c4:	1e03      	subs	r3, r0, #0
 80047c6:	d001      	beq.n	80047cc <CWINIT+0x28>
    return true;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <CWINIT+0x2a>
  }
  else{
    return false;
 80047cc:	2300      	movs	r3, #0
  }
}
 80047ce:	0018      	movs	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b002      	add	sp, #8
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	46c0      	nop			@ (mov r8, r8)
 80047d8:	080236c4 	.word	0x080236c4

080047dc <CWMODE1>:
bool CWMODE1(){
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80047e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <CWMODE1+0x34>)
 80047e4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	0018      	movs	r0, r3
 80047ea:	f7fb fcbf 	bl	800016c <strlen>
 80047ee:	0003      	movs	r3, r0
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	0011      	movs	r1, r2
 80047f6:	0018      	movs	r0, r3
 80047f8:	f7ff f98c 	bl	8003b14 <ESP_Send>
 80047fc:	1e03      	subs	r3, r0, #0
 80047fe:	d001      	beq.n	8004804 <CWMODE1+0x28>
    return true;
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004804:	2300      	movs	r3, #0
  }
}
 8004806:	0018      	movs	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	b002      	add	sp, #8
 800480c:	bd80      	pop	{r7, pc}
 800480e:	46c0      	nop			@ (mov r8, r8)
 8004810:	080236d4 	.word	0x080236d4

08004814 <CWMODE2>:
bool CWMODE2(){
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 800481a:	4b0b      	ldr	r3, [pc, #44]	@ (8004848 <CWMODE2+0x34>)
 800481c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	0018      	movs	r0, r3
 8004822:	f7fb fca3 	bl	800016c <strlen>
 8004826:	0003      	movs	r3, r0
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	0011      	movs	r1, r2
 800482e:	0018      	movs	r0, r3
 8004830:	f7ff f970 	bl	8003b14 <ESP_Send>
 8004834:	1e03      	subs	r3, r0, #0
 8004836:	d001      	beq.n	800483c <CWMODE2+0x28>
    return true;
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <CWMODE2+0x2a>
  }
  else{
    return false;
 800483c:	2300      	movs	r3, #0
  }
}
 800483e:	0018      	movs	r0, r3
 8004840:	46bd      	mov	sp, r7
 8004842:	b002      	add	sp, #8
 8004844:	bd80      	pop	{r7, pc}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	080236e4 	.word	0x080236e4

0800484c <CWAUTOCONN>:
bool CWAUTOCONN(){
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8004852:	4b0b      	ldr	r3, [pc, #44]	@ (8004880 <CWAUTOCONN+0x34>)
 8004854:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	0018      	movs	r0, r3
 800485a:	f7fb fc87 	bl	800016c <strlen>
 800485e:	0003      	movs	r3, r0
 8004860:	b29a      	uxth	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	0011      	movs	r1, r2
 8004866:	0018      	movs	r0, r3
 8004868:	f7ff f954 	bl	8003b14 <ESP_Send>
 800486c:	1e03      	subs	r3, r0, #0
 800486e:	d001      	beq.n	8004874 <CWAUTOCONN+0x28>
    return true;
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004874:	2300      	movs	r3, #0
  }
}
 8004876:	0018      	movs	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	b002      	add	sp, #8
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			@ (mov r8, r8)
 8004880:	080236f4 	.word	0x080236f4

08004884 <CWJAP>:
bool CWJAP(){
 8004884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004886:	46c6      	mov	lr, r8
 8004888:	b500      	push	{lr}
 800488a:	b0a2      	sub	sp, #136	@ 0x88
 800488c:	af00      	add	r7, sp, #0
 800488e:	466b      	mov	r3, sp
 8004890:	4698      	mov	r8, r3
  beursTest = true;
 8004892:	4b39      	ldr	r3, [pc, #228]	@ (8004978 <CWJAP+0xf4>)
 8004894:	2201      	movs	r2, #1
 8004896:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004898:	2618      	movs	r6, #24
 800489a:	19bb      	adds	r3, r7, r6
 800489c:	2264      	movs	r2, #100	@ 0x64
 800489e:	2100      	movs	r1, #0
 80048a0:	0018      	movs	r0, r3
 80048a2:	f01b fc57 	bl	8020154 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80048a6:	4b35      	ldr	r3, [pc, #212]	@ (800497c <CWJAP+0xf8>)
 80048a8:	4a35      	ldr	r2, [pc, #212]	@ (8004980 <CWJAP+0xfc>)
 80048aa:	4936      	ldr	r1, [pc, #216]	@ (8004984 <CWJAP+0x100>)
 80048ac:	19b8      	adds	r0, r7, r6
 80048ae:	f01b fb0d 	bl	801fecc <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80048b2:	19bb      	adds	r3, r7, r6
 80048b4:	0018      	movs	r0, r3
 80048b6:	f7fb fc59 	bl	800016c <strlen>
 80048ba:	0002      	movs	r2, r0
 80048bc:	216f      	movs	r1, #111	@ 0x6f
 80048be:	0030      	movs	r0, r6
 80048c0:	180b      	adds	r3, r1, r0
 80048c2:	19db      	adds	r3, r3, r7
 80048c4:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80048c6:	180b      	adds	r3, r1, r0
 80048c8:	19db      	adds	r3, r3, r7
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	3301      	adds	r3, #1
 80048ce:	1e5a      	subs	r2, r3, #1
 80048d0:	2180      	movs	r1, #128	@ 0x80
 80048d2:	1879      	adds	r1, r7, r1
 80048d4:	600a      	str	r2, [r1, #0]
 80048d6:	001a      	movs	r2, r3
 80048d8:	60ba      	str	r2, [r7, #8]
 80048da:	2200      	movs	r2, #0
 80048dc:	60fa      	str	r2, [r7, #12]
 80048de:	68b8      	ldr	r0, [r7, #8]
 80048e0:	68f9      	ldr	r1, [r7, #12]
 80048e2:	0002      	movs	r2, r0
 80048e4:	0f52      	lsrs	r2, r2, #29
 80048e6:	000e      	movs	r6, r1
 80048e8:	00f6      	lsls	r6, r6, #3
 80048ea:	617e      	str	r6, [r7, #20]
 80048ec:	697e      	ldr	r6, [r7, #20]
 80048ee:	4316      	orrs	r6, r2
 80048f0:	617e      	str	r6, [r7, #20]
 80048f2:	0002      	movs	r2, r0
 80048f4:	00d2      	lsls	r2, r2, #3
 80048f6:	613a      	str	r2, [r7, #16]
 80048f8:	001a      	movs	r2, r3
 80048fa:	603a      	str	r2, [r7, #0]
 80048fc:	2200      	movs	r2, #0
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	6838      	ldr	r0, [r7, #0]
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	0002      	movs	r2, r0
 8004906:	0f52      	lsrs	r2, r2, #29
 8004908:	000e      	movs	r6, r1
 800490a:	00f5      	lsls	r5, r6, #3
 800490c:	4315      	orrs	r5, r2
 800490e:	0002      	movs	r2, r0
 8004910:	00d4      	lsls	r4, r2, #3
 8004912:	3307      	adds	r3, #7
 8004914:	08db      	lsrs	r3, r3, #3
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	466a      	mov	r2, sp
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	469d      	mov	sp, r3
 800491e:	466b      	mov	r3, sp
 8004920:	3300      	adds	r3, #0
 8004922:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004924:	246f      	movs	r4, #111	@ 0x6f
 8004926:	2518      	movs	r5, #24
 8004928:	1963      	adds	r3, r4, r5
 800492a:	19db      	adds	r3, r3, r7
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	3301      	adds	r3, #1
 8004930:	001a      	movs	r2, r3
 8004932:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004934:	2100      	movs	r1, #0
 8004936:	0018      	movs	r0, r3
 8004938:	f01b fc0c 	bl	8020154 <memset>
  strncpy(atCommand, atCommandBuff, len);
 800493c:	1963      	adds	r3, r4, r5
 800493e:	19db      	adds	r3, r3, r7
 8004940:	781a      	ldrb	r2, [r3, #0]
 8004942:	1979      	adds	r1, r7, r5
 8004944:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004946:	0018      	movs	r0, r3
 8004948:	f01b fc2b 	bl	80201a2 <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 800494c:	1963      	adds	r3, r4, r5
 800494e:	19db      	adds	r3, r3, r7
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	b29a      	uxth	r2, r3
 8004954:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004956:	0011      	movs	r1, r2
 8004958:	0018      	movs	r0, r3
 800495a:	f7ff f8db 	bl	8003b14 <ESP_Send>
 800495e:	1e03      	subs	r3, r0, #0
 8004960:	d001      	beq.n	8004966 <CWJAP+0xe2>
    return true;
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <CWJAP+0xe4>
  }
  else{
    return false;
 8004966:	2300      	movs	r3, #0
 8004968:	46c5      	mov	sp, r8
  }
}
 800496a:	0018      	movs	r0, r3
 800496c:	46bd      	mov	sp, r7
 800496e:	b022      	add	sp, #136	@ 0x88
 8004970:	bc80      	pop	{r7}
 8004972:	46b8      	mov	r8, r7
 8004974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004976:	46c0      	nop			@ (mov r8, r8)
 8004978:	20000551 	.word	0x20000551
 800497c:	08025224 	.word	0x08025224
 8004980:	08025218 	.word	0x08025218
 8004984:	08023708 	.word	0x08023708

08004988 <CWMODE3>:
bool CWMODE3(){
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800498e:	4b0b      	ldr	r3, [pc, #44]	@ (80049bc <CWMODE3+0x34>)
 8004990:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	0018      	movs	r0, r3
 8004996:	f7fb fbe9 	bl	800016c <strlen>
 800499a:	0003      	movs	r3, r0
 800499c:	b29a      	uxth	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	0011      	movs	r1, r2
 80049a2:	0018      	movs	r0, r3
 80049a4:	f7ff f8b6 	bl	8003b14 <ESP_Send>
 80049a8:	1e03      	subs	r3, r0, #0
 80049aa:	d001      	beq.n	80049b0 <CWMODE3+0x28>
    return true;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e000      	b.n	80049b2 <CWMODE3+0x2a>
  }
  else{
    return false;
 80049b0:	2300      	movs	r3, #0
  }
}
 80049b2:	0018      	movs	r0, r3
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b002      	add	sp, #8
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	46c0      	nop			@ (mov r8, r8)
 80049bc:	08023720 	.word	0x08023720

080049c0 <CWSTATE>:
bool CWSTATE(){
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 80049c6:	4b0b      	ldr	r3, [pc, #44]	@ (80049f4 <CWSTATE+0x34>)
 80049c8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f7fb fbcd 	bl	800016c <strlen>
 80049d2:	0003      	movs	r3, r0
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	0011      	movs	r1, r2
 80049da:	0018      	movs	r0, r3
 80049dc:	f7ff f89a 	bl	8003b14 <ESP_Send>
 80049e0:	1e03      	subs	r3, r0, #0
 80049e2:	d001      	beq.n	80049e8 <CWSTATE+0x28>
    return true;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e000      	b.n	80049ea <CWSTATE+0x2a>
  }
  else{
    return false;
 80049e8:	2300      	movs	r3, #0
  }
}
 80049ea:	0018      	movs	r0, r3
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b002      	add	sp, #8
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	46c0      	nop			@ (mov r8, r8)
 80049f4:	08023730 	.word	0x08023730

080049f8 <CWSAP>:
bool CWSAP(){
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80049fe:	4b0b      	ldr	r3, [pc, #44]	@ (8004a2c <CWSAP+0x34>)
 8004a00:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	0018      	movs	r0, r3
 8004a06:	f7fb fbb1 	bl	800016c <strlen>
 8004a0a:	0003      	movs	r3, r0
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	0011      	movs	r1, r2
 8004a12:	0018      	movs	r0, r3
 8004a14:	f7ff f87e 	bl	8003b14 <ESP_Send>
 8004a18:	1e03      	subs	r3, r0, #0
 8004a1a:	d001      	beq.n	8004a20 <CWSAP+0x28>
    return true;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e000      	b.n	8004a22 <CWSAP+0x2a>
  }
  else{
    return false;
 8004a20:	2300      	movs	r3, #0
  }
}
 8004a22:	0018      	movs	r0, r3
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b002      	add	sp, #8
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	08023740 	.word	0x08023740

08004a30 <CIPMUX>:
bool CIPMUX(){
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004a36:	4b0b      	ldr	r3, [pc, #44]	@ (8004a64 <CIPMUX+0x34>)
 8004a38:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f7fb fb95 	bl	800016c <strlen>
 8004a42:	0003      	movs	r3, r0
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	0011      	movs	r1, r2
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f7ff f862 	bl	8003b14 <ESP_Send>
 8004a50:	1e03      	subs	r3, r0, #0
 8004a52:	d001      	beq.n	8004a58 <CIPMUX+0x28>
    return true;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <CIPMUX+0x2a>
  }
  else{
    return false;
 8004a58:	2300      	movs	r3, #0
  }
}
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b002      	add	sp, #8
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	46c0      	nop			@ (mov r8, r8)
 8004a64:	08023764 	.word	0x08023764

08004a68 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a9c <WEBSERVER+0x34>)
 8004a70:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	0018      	movs	r0, r3
 8004a76:	f7fb fb79 	bl	800016c <strlen>
 8004a7a:	0003      	movs	r3, r0
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	0011      	movs	r1, r2
 8004a82:	0018      	movs	r0, r3
 8004a84:	f7ff f846 	bl	8003b14 <ESP_Send>
 8004a88:	1e03      	subs	r3, r0, #0
 8004a8a:	d001      	beq.n	8004a90 <WEBSERVER+0x28>
    return true;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e000      	b.n	8004a92 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004a90:	2300      	movs	r3, #0
  }
}
 8004a92:	0018      	movs	r0, r3
 8004a94:	46bd      	mov	sp, r7
 8004a96:	b002      	add	sp, #8
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	46c0      	nop			@ (mov r8, r8)
 8004a9c:	08023774 	.word	0x08023774

08004aa0 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004aa0:	b590      	push	{r4, r7, lr}
 8004aa2:	b0c5      	sub	sp, #276	@ 0x114
 8004aa4:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 8004aa6:	2380      	movs	r3, #128	@ 0x80
 8004aa8:	005a      	lsls	r2, r3, #1
 8004aaa:	1d3b      	adds	r3, r7, #4
 8004aac:	2100      	movs	r1, #0
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f01b fb50 	bl	8020154 <memset>
  uint16_t length = CreateMessage(beurs);
 8004ab4:	4b22      	ldr	r3, [pc, #136]	@ (8004b40 <HTTPCPOST+0xa0>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	1dfc      	adds	r4, r7, #7
 8004aba:	34ff      	adds	r4, #255	@ 0xff
 8004abc:	0018      	movs	r0, r3
 8004abe:	f7ff f96f 	bl	8003da0 <CreateMessage>
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b40 <HTTPCPOST+0xa0>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004ace:	1dfb      	adds	r3, r7, #7
 8004ad0:	33ff      	adds	r3, #255	@ 0xff
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b44 <HTTPCPOST+0xa4>)
 8004ad6:	491c      	ldr	r1, [pc, #112]	@ (8004b48 <HTTPCPOST+0xa8>)
 8004ad8:	1d38      	adds	r0, r7, #4
 8004ada:	f01b f9f7 	bl	801fecc <siprintf>
 8004ade:	e016      	b.n	8004b0e <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b4c <HTTPCPOST+0xac>)
 8004ae2:	481b      	ldr	r0, [pc, #108]	@ (8004b50 <HTTPCPOST+0xb0>)
 8004ae4:	220c      	movs	r2, #12
 8004ae6:	0019      	movs	r1, r3
 8004ae8:	f7fe fe06 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004aec:	4a17      	ldr	r2, [pc, #92]	@ (8004b4c <HTTPCPOST+0xac>)
 8004aee:	4b19      	ldr	r3, [pc, #100]	@ (8004b54 <HTTPCPOST+0xb4>)
 8004af0:	0011      	movs	r1, r2
 8004af2:	0018      	movs	r0, r3
 8004af4:	f7ff f930 	bl	8003d58 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004af8:	1dfb      	adds	r3, r7, #7
 8004afa:	33ff      	adds	r3, #255	@ 0xff
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	4c15      	ldr	r4, [pc, #84]	@ (8004b54 <HTTPCPOST+0xb4>)
 8004b00:	4a15      	ldr	r2, [pc, #84]	@ (8004b58 <HTTPCPOST+0xb8>)
 8004b02:	4916      	ldr	r1, [pc, #88]	@ (8004b5c <HTTPCPOST+0xbc>)
 8004b04:	1d38      	adds	r0, r7, #4
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	0023      	movs	r3, r4
 8004b0a:	f01b f9df 	bl	801fecc <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 8004b0e:	1d3b      	adds	r3, r7, #4
 8004b10:	0018      	movs	r0, r3
 8004b12:	f7fb fb2b 	bl	800016c <strlen>
 8004b16:	0002      	movs	r2, r0
 8004b18:	1d7b      	adds	r3, r7, #5
 8004b1a:	33ff      	adds	r3, #255	@ 0xff
 8004b1c:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004b1e:	1d7b      	adds	r3, r7, #5
 8004b20:	33ff      	adds	r3, #255	@ 0xff
 8004b22:	881a      	ldrh	r2, [r3, #0]
 8004b24:	1d3b      	adds	r3, r7, #4
 8004b26:	0011      	movs	r1, r2
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f7fe fff3 	bl	8003b14 <ESP_Send>
 8004b2e:	1e03      	subs	r3, r0, #0
 8004b30:	d001      	beq.n	8004b36 <HTTPCPOST+0x96>
    return true;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <HTTPCPOST+0x98>
  }
  else{
    return false;
 8004b36:	2300      	movs	r3, #0
  }
}
 8004b38:	0018      	movs	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b043      	add	sp, #268	@ 0x10c
 8004b3e:	bd90      	pop	{r4, r7, pc}
 8004b40:	20000552 	.word	0x20000552
 8004b44:	08025240 	.word	0x08025240
 8004b48:	0802378c 	.word	0x0802378c
 8004b4c:	20000b14 	.word	0x20000b14
 8004b50:	08080000 	.word	0x08080000
 8004b54:	20000b20 	.word	0x20000b20
 8004b58:	0802527c 	.word	0x0802527c
 8004b5c:	080237c4 	.word	0x080237c4

08004b60 <SENDDATA>:
bool SENDDATA(){
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004b66:	4b0b      	ldr	r3, [pc, #44]	@ (8004b94 <SENDDATA+0x34>)
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f7fb faff 	bl	800016c <strlen>
 8004b6e:	0002      	movs	r2, r0
 8004b70:	1dbb      	adds	r3, r7, #6
 8004b72:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004b74:	1dbb      	adds	r3, r7, #6
 8004b76:	881a      	ldrh	r2, [r3, #0]
 8004b78:	4b06      	ldr	r3, [pc, #24]	@ (8004b94 <SENDDATA+0x34>)
 8004b7a:	0011      	movs	r1, r2
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f7fe ffc9 	bl	8003b14 <ESP_Send>
 8004b82:	1e03      	subs	r3, r0, #0
 8004b84:	d001      	beq.n	8004b8a <SENDDATA+0x2a>
    return true;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <SENDDATA+0x2c>
  }
  else{
    return false;
 8004b8a:	2300      	movs	r3, #0
  }
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b002      	add	sp, #8
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	2000058c 	.word	0x2000058c

08004b98 <SLEEP>:
bool SLEEP(){
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bcc <SLEEP+0x34>)
 8004ba0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f7fb fae1 	bl	800016c <strlen>
 8004baa:	0003      	movs	r3, r0
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	0011      	movs	r1, r2
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f7fe ffae 	bl	8003b14 <ESP_Send>
 8004bb8:	1e03      	subs	r3, r0, #0
 8004bba:	d001      	beq.n	8004bc0 <SLEEP+0x28>
    return true;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <SLEEP+0x2a>
  }
  else{
    return false;
 8004bc0:	2300      	movs	r3, #0
  }
}
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	b002      	add	sp, #8
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	46c0      	nop			@ (mov r8, r8)
 8004bcc:	08023804 	.word	0x08023804

08004bd0 <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8004c0c <CIPSNTPCFG+0x3c>)
 8004bd8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f7fb fac5 	bl	800016c <strlen>
 8004be2:	0003      	movs	r3, r0
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	0011      	movs	r1, r2
 8004bea:	0018      	movs	r0, r3
 8004bec:	f7fe ff92 	bl	8003b14 <ESP_Send>
 8004bf0:	1e03      	subs	r3, r0, #0
 8004bf2:	d006      	beq.n	8004c02 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004bf4:	23fa      	movs	r3, #250	@ 0xfa
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f00a f85d 	bl	800ecb8 <HAL_Delay>
    return true;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 8004c02:	2300      	movs	r3, #0
  }
}
 8004c04:	0018      	movs	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	b002      	add	sp, #8
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	08023814 	.word	0x08023814

08004c10 <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004c16:	4b0b      	ldr	r3, [pc, #44]	@ (8004c44 <CIPSNTPTIME+0x34>)
 8004c18:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f7fb faa5 	bl	800016c <strlen>
 8004c22:	0003      	movs	r3, r0
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	0011      	movs	r1, r2
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	f7fe ff72 	bl	8003b14 <ESP_Send>
 8004c30:	1e03      	subs	r3, r0, #0
 8004c32:	d001      	beq.n	8004c38 <CIPSNTPTIME+0x28>
    return true;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e000      	b.n	8004c3a <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004c38:	2300      	movs	r3, #0
  }
}
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b002      	add	sp, #8
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	08023864 	.word	0x08023864

08004c48 <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c7c <CIPSNTPINTV+0x34>)
 8004c50:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	0018      	movs	r0, r3
 8004c56:	f7fb fa89 	bl	800016c <strlen>
 8004c5a:	0003      	movs	r3, r0
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	0011      	movs	r1, r2
 8004c62:	0018      	movs	r0, r3
 8004c64:	f7fe ff56 	bl	8003b14 <ESP_Send>
 8004c68:	1e03      	subs	r3, r0, #0
 8004c6a:	d001      	beq.n	8004c70 <CIPSNTPINTV+0x28>
    return true;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004c70:	2300      	movs	r3, #0
  }
}
 8004c72:	0018      	movs	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b002      	add	sp, #8
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	46c0      	nop			@ (mov r8, r8)
 8004c7c:	08023878 	.word	0x08023878

08004c80 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004c80:	b5b0      	push	{r4, r5, r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	0002      	movs	r2, r0
 8004c88:	1dfb      	adds	r3, r7, #7
 8004c8a:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004c8c:	4b6c      	ldr	r3, [pc, #432]	@ (8004e40 <DMA_ProcessBuffer+0x1c0>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	200e      	movs	r0, #14
 8004c96:	183b      	adds	r3, r7, r0
 8004c98:	2180      	movs	r1, #128	@ 0x80
 8004c9a:	0049      	lsls	r1, r1, #1
 8004c9c:	1a8a      	subs	r2, r1, r2
 8004c9e:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004ca0:	230d      	movs	r3, #13
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004ca8:	183b      	adds	r3, r7, r0
 8004caa:	881a      	ldrh	r2, [r3, #0]
 8004cac:	2380      	movs	r3, #128	@ 0x80
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d903      	bls.n	8004cbc <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004cb4:	183b      	adds	r3, r7, r0
 8004cb6:	2280      	movs	r2, #128	@ 0x80
 8004cb8:	0052      	lsls	r2, r2, #1
 8004cba:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004cbc:	4b61      	ldr	r3, [pc, #388]	@ (8004e44 <DMA_ProcessBuffer+0x1c4>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	001a      	movs	r2, r3
 8004cc4:	230e      	movs	r3, #14
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d131      	bne.n	8004d32 <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004cce:	4b5e      	ldr	r3, [pc, #376]	@ (8004e48 <DMA_ProcessBuffer+0x1c8>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b14      	cmp	r3, #20
 8004cd4:	d91b      	bls.n	8004d0e <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004cd6:	4b5c      	ldr	r3, [pc, #368]	@ (8004e48 <DMA_ProcessBuffer+0x1c8>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004cdc:	4b5b      	ldr	r3, [pc, #364]	@ (8004e4c <DMA_ProcessBuffer+0x1cc>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d107      	bne.n	8004cf4 <DMA_ProcessBuffer+0x74>
 8004ce4:	4b5a      	ldr	r3, [pc, #360]	@ (8004e50 <DMA_ProcessBuffer+0x1d0>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004cec:	230d      	movs	r3, #13
 8004cee:	18fb      	adds	r3, r7, r3
 8004cf0:	2207      	movs	r2, #7
 8004cf2:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004cf4:	4b55      	ldr	r3, [pc, #340]	@ (8004e4c <DMA_ProcessBuffer+0x1cc>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d103      	bne.n	8004d04 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004cfc:	4b55      	ldr	r3, [pc, #340]	@ (8004e54 <DMA_ProcessBuffer+0x1d4>)
 8004cfe:	220b      	movs	r2, #11
 8004d00:	701a      	strb	r2, [r3, #0]
 8004d02:	e016      	b.n	8004d32 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004d04:	230d      	movs	r3, #13
 8004d06:	18fb      	adds	r3, r7, r3
 8004d08:	2206      	movs	r2, #6
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	e011      	b.n	8004d32 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004d0e:	4b4e      	ldr	r3, [pc, #312]	@ (8004e48 <DMA_ProcessBuffer+0x1c8>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	3301      	adds	r3, #1
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	4b4c      	ldr	r3, [pc, #304]	@ (8004e48 <DMA_ProcessBuffer+0x1c8>)
 8004d18:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004d1a:	f009 ffc3 	bl	800eca4 <HAL_GetTick>
 8004d1e:	0003      	movs	r3, r0
 8004d20:	33f5      	adds	r3, #245	@ 0xf5
 8004d22:	33ff      	adds	r3, #255	@ 0xff
 8004d24:	001a      	movs	r2, r3
 8004d26:	4b4c      	ldr	r3, [pc, #304]	@ (8004e58 <DMA_ProcessBuffer+0x1d8>)
 8004d28:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004d2a:	230d      	movs	r3, #13
 8004d2c:	18fb      	adds	r3, r7, r3
 8004d2e:	2204      	movs	r2, #4
 8004d30:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004d32:	4b44      	ldr	r3, [pc, #272]	@ (8004e44 <DMA_ProcessBuffer+0x1c4>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	001a      	movs	r2, r3
 8004d3a:	210e      	movs	r1, #14
 8004d3c:	187b      	adds	r3, r7, r1
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d100      	bne.n	8004d46 <DMA_ProcessBuffer+0xc6>
 8004d44:	e075      	b.n	8004e32 <DMA_ProcessBuffer+0x1b2>
      retry = 0;
 8004d46:	4b40      	ldr	r3, [pc, #256]	@ (8004e48 <DMA_ProcessBuffer+0x1c8>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004d4c:	4b43      	ldr	r3, [pc, #268]	@ (8004e5c <DMA_ProcessBuffer+0x1dc>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	4b3c      	ldr	r3, [pc, #240]	@ (8004e44 <DMA_ProcessBuffer+0x1c4>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d109      	bne.n	8004d70 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004d5c:	187b      	adds	r3, r7, r1
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	4b3e      	ldr	r3, [pc, #248]	@ (8004e5c <DMA_ProcessBuffer+0x1dc>)
 8004d64:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004d66:	230d      	movs	r3, #13
 8004d68:	18fb      	adds	r3, r7, r3
 8004d6a:	220a      	movs	r2, #10
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	e060      	b.n	8004e32 <DMA_ProcessBuffer+0x1b2>
      }
      else{
        if(TempPos != pos){
 8004d70:	4b3a      	ldr	r3, [pc, #232]	@ (8004e5c <DMA_ProcessBuffer+0x1dc>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	001a      	movs	r2, r3
 8004d78:	210e      	movs	r1, #14
 8004d7a:	187b      	adds	r3, r7, r1
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d009      	beq.n	8004d96 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004d82:	187b      	adds	r3, r7, r1
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	4b34      	ldr	r3, [pc, #208]	@ (8004e5c <DMA_ProcessBuffer+0x1dc>)
 8004d8a:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004d8c:	230d      	movs	r3, #13
 8004d8e:	18fb      	adds	r3, r7, r3
 8004d90:	220a      	movs	r2, #10
 8004d92:	701a      	strb	r2, [r3, #0]
 8004d94:	e04d      	b.n	8004e32 <DMA_ProcessBuffer+0x1b2>
        }
        else{
          if (pos > OldPos) {
 8004d96:	4b2b      	ldr	r3, [pc, #172]	@ (8004e44 <DMA_ProcessBuffer+0x1c4>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	001a      	movs	r2, r3
 8004d9e:	210e      	movs	r1, #14
 8004da0:	187b      	adds	r3, r7, r1
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d917      	bls.n	8004dd8 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004da8:	4b26      	ldr	r3, [pc, #152]	@ (8004e44 <DMA_ProcessBuffer+0x1c4>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	001a      	movs	r2, r3
 8004db0:	4b2b      	ldr	r3, [pc, #172]	@ (8004e60 <DMA_ProcessBuffer+0x1e0>)
 8004db2:	18d0      	adds	r0, r2, r3
 8004db4:	4b23      	ldr	r3, [pc, #140]	@ (8004e44 <DMA_ProcessBuffer+0x1c4>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	001a      	movs	r2, r3
 8004dbc:	187b      	adds	r3, r7, r1
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	b299      	uxth	r1, r3
 8004dc4:	230d      	movs	r3, #13
 8004dc6:	18fc      	adds	r4, r7, r3
 8004dc8:	1dfb      	adds	r3, r7, #7
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	001a      	movs	r2, r3
 8004dce:	f7ff fa89 	bl	80042e4 <ParseBuffer>
 8004dd2:	0003      	movs	r3, r0
 8004dd4:	7023      	strb	r3, [r4, #0]
 8004dd6:	e026      	b.n	8004e26 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e44 <DMA_ProcessBuffer+0x1c4>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	001a      	movs	r2, r3
 8004de0:	4b1f      	ldr	r3, [pc, #124]	@ (8004e60 <DMA_ProcessBuffer+0x1e0>)
 8004de2:	18d0      	adds	r0, r2, r3
 8004de4:	4b17      	ldr	r3, [pc, #92]	@ (8004e44 <DMA_ProcessBuffer+0x1c4>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	001a      	movs	r2, r3
 8004dec:	2380      	movs	r3, #128	@ 0x80
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	1a9b      	subs	r3, r3, r2
 8004df2:	b299      	uxth	r1, r3
 8004df4:	250d      	movs	r5, #13
 8004df6:	197c      	adds	r4, r7, r5
 8004df8:	1dfb      	adds	r3, r7, #7
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	001a      	movs	r2, r3
 8004dfe:	f7ff fa71 	bl	80042e4 <ParseBuffer>
 8004e02:	0003      	movs	r3, r0
 8004e04:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004e06:	210e      	movs	r1, #14
 8004e08:	187b      	adds	r3, r7, r1
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00a      	beq.n	8004e26 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004e10:	197c      	adds	r4, r7, r5
 8004e12:	1dfb      	adds	r3, r7, #7
 8004e14:	781a      	ldrb	r2, [r3, #0]
 8004e16:	187b      	adds	r3, r7, r1
 8004e18:	8819      	ldrh	r1, [r3, #0]
 8004e1a:	4b11      	ldr	r3, [pc, #68]	@ (8004e60 <DMA_ProcessBuffer+0x1e0>)
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f7ff fa61 	bl	80042e4 <ParseBuffer>
 8004e22:	0003      	movs	r3, r0
 8004e24:	7023      	strb	r3, [r4, #0]
              }
          }
//          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
          OldPos = pos;
 8004e26:	230e      	movs	r3, #14
 8004e28:	18fb      	adds	r3, r7, r3
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	4b05      	ldr	r3, [pc, #20]	@ (8004e44 <DMA_ProcessBuffer+0x1c4>)
 8004e30:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004e32:	230d      	movs	r3, #13
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	781b      	ldrb	r3, [r3, #0]
}
 8004e38:	0018      	movs	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b004      	add	sp, #16
 8004e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e40:	200024f0 	.word	0x200024f0
 8004e44:	20000b39 	.word	0x20000b39
 8004e48:	20000a28 	.word	0x20000a28
 8004e4c:	20000a2a 	.word	0x20000a2a
 8004e50:	20000000 	.word	0x20000000
 8004e54:	20000028 	.word	0x20000028
 8004e58:	20000a1c 	.word	0x20000a1c
 8004e5c:	20000b3a 	.word	0x20000b3a
 8004e60:	2000044c 	.word	0x2000044c

08004e64 <clearDMABuffer>:

void clearDMABuffer(){
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004e68:	2380      	movs	r3, #128	@ 0x80
 8004e6a:	005a      	lsls	r2, r3, #1
 8004e6c:	4b03      	ldr	r3, [pc, #12]	@ (8004e7c <clearDMABuffer+0x18>)
 8004e6e:	2100      	movs	r1, #0
 8004e70:	0018      	movs	r0, r3
 8004e72:	f01b f96f 	bl	8020154 <memset>
}
 8004e76:	46c0      	nop			@ (mov r8, r8)
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	2000044c 	.word	0x2000044c

08004e80 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	0002      	movs	r2, r0
 8004e88:	1dfb      	adds	r3, r7, #7
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	1dbb      	adds	r3, r7, #6
 8004e8e:	1c0a      	adds	r2, r1, #0
 8004e90:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004e92:	210f      	movs	r1, #15
 8004e94:	187b      	adds	r3, r7, r1
 8004e96:	2200      	movs	r2, #0
 8004e98:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004e9a:	1dbb      	adds	r3, r7, #6
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d105      	bne.n	8004eae <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004ea2:	187b      	adds	r3, r7, r1
 8004ea4:	1dfa      	adds	r2, r7, #7
 8004ea6:	7812      	ldrb	r2, [r2, #0]
 8004ea8:	4251      	negs	r1, r2
 8004eaa:	414a      	adcs	r2, r1
 8004eac:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004eae:	1dbb      	adds	r3, r7, #6
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d107      	bne.n	8004ec6 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004eb6:	230f      	movs	r3, #15
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	1dfa      	adds	r2, r7, #7
 8004ebc:	7812      	ldrb	r2, [r2, #0]
 8004ebe:	3a02      	subs	r2, #2
 8004ec0:	4251      	negs	r1, r2
 8004ec2:	414a      	adcs	r2, r1
 8004ec4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004ec6:	1dbb      	adds	r3, r7, #6
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d107      	bne.n	8004ede <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004ece:	230f      	movs	r3, #15
 8004ed0:	18fb      	adds	r3, r7, r3
 8004ed2:	1dfa      	adds	r2, r7, #7
 8004ed4:	7812      	ldrb	r2, [r2, #0]
 8004ed6:	3a05      	subs	r2, #5
 8004ed8:	4251      	negs	r1, r2
 8004eda:	414a      	adcs	r2, r1
 8004edc:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004ede:	1dbb      	adds	r3, r7, #6
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b05      	cmp	r3, #5
 8004ee4:	d107      	bne.n	8004ef6 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004ee6:	230f      	movs	r3, #15
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	1dfa      	adds	r2, r7, #7
 8004eec:	7812      	ldrb	r2, [r2, #0]
 8004eee:	3a0b      	subs	r2, #11
 8004ef0:	4251      	negs	r1, r2
 8004ef2:	414a      	adcs	r2, r1
 8004ef4:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004ef6:	230f      	movs	r3, #15
 8004ef8:	18fb      	adds	r3, r7, r3
 8004efa:	781b      	ldrb	r3, [r3, #0]
}
 8004efc:	0018      	movs	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b004      	add	sp, #16
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004f04:	b590      	push	{r4, r7, lr}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	0002      	movs	r2, r0
 8004f0c:	1dfb      	adds	r3, r7, #7
 8004f0e:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004f10:	230f      	movs	r3, #15
 8004f12:	18fb      	adds	r3, r7, r3
 8004f14:	2200      	movs	r2, #0
 8004f16:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004f18:	1dfb      	adds	r3, r7, #7
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b14      	cmp	r3, #20
 8004f1e:	d900      	bls.n	8004f22 <AT_Send+0x1e>
 8004f20:	e18c      	b.n	800523c <AT_Send+0x338>
 8004f22:	009a      	lsls	r2, r3, #2
 8004f24:	4bc9      	ldr	r3, [pc, #804]	@ (800524c <AT_Send+0x348>)
 8004f26:	18d3      	adds	r3, r2, r3
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004f2c:	4bc8      	ldr	r3, [pc, #800]	@ (8005250 <AT_Send+0x34c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	0018      	movs	r0, r3
 8004f32:	f009 fa0b 	bl	800e34c <TimestampIsReached>
 8004f36:	1e03      	subs	r3, r0, #0
 8004f38:	d100      	bne.n	8004f3c <AT_Send+0x38>
 8004f3a:	e17e      	b.n	800523a <AT_Send+0x336>
    ATCommandSend = PollAwake();
 8004f3c:	230f      	movs	r3, #15
 8004f3e:	18fc      	adds	r4, r7, r3
 8004f40:	f7ff fbc0 	bl	80046c4 <PollAwake>
 8004f44:	0003      	movs	r3, r0
 8004f46:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004f48:	f009 feac 	bl	800eca4 <HAL_GetTick>
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	3332      	adds	r3, #50	@ 0x32
 8004f50:	001a      	movs	r2, r3
 8004f52:	4bbf      	ldr	r3, [pc, #764]	@ (8005250 <AT_Send+0x34c>)
 8004f54:	601a      	str	r2, [r3, #0]
  }
  break;
 8004f56:	e170      	b.n	800523a <AT_Send+0x336>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004f58:	4abe      	ldr	r2, [pc, #760]	@ (8005254 <AT_Send+0x350>)
 8004f5a:	4bbf      	ldr	r3, [pc, #764]	@ (8005258 <AT_Send+0x354>)
 8004f5c:	0019      	movs	r1, r3
 8004f5e:	2003      	movs	r0, #3
 8004f60:	f009 fa4a 	bl	800e3f8 <CreateLine>
    ATCommandSend = RFPower();
 8004f64:	230f      	movs	r3, #15
 8004f66:	18fc      	adds	r4, r7, r3
 8004f68:	f7ff fbc8 	bl	80046fc <RFPower>
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f70:	f009 fe98 	bl	800eca4 <HAL_GetTick>
 8004f74:	0003      	movs	r3, r0
 8004f76:	330a      	adds	r3, #10
 8004f78:	001a      	movs	r2, r3
 8004f7a:	4bb5      	ldr	r3, [pc, #724]	@ (8005250 <AT_Send+0x34c>)
 8004f7c:	601a      	str	r2, [r3, #0]
    break;
 8004f7e:	e15d      	b.n	800523c <AT_Send+0x338>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004f80:	4ab6      	ldr	r2, [pc, #728]	@ (800525c <AT_Send+0x358>)
 8004f82:	4bb5      	ldr	r3, [pc, #724]	@ (8005258 <AT_Send+0x354>)
 8004f84:	0019      	movs	r1, r3
 8004f86:	2003      	movs	r0, #3
 8004f88:	f009 fa36 	bl	800e3f8 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004f8c:	230f      	movs	r3, #15
 8004f8e:	18fc      	adds	r4, r7, r3
 8004f90:	f7ff fbd0 	bl	8004734 <CheckRFPower>
 8004f94:	0003      	movs	r3, r0
 8004f96:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f98:	f009 fe84 	bl	800eca4 <HAL_GetTick>
 8004f9c:	0003      	movs	r3, r0
 8004f9e:	330a      	adds	r3, #10
 8004fa0:	001a      	movs	r2, r3
 8004fa2:	4bab      	ldr	r3, [pc, #684]	@ (8005250 <AT_Send+0x34c>)
 8004fa4:	601a      	str	r2, [r3, #0]
    break;
 8004fa6:	e149      	b.n	800523c <AT_Send+0x338>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004fa8:	4aad      	ldr	r2, [pc, #692]	@ (8005260 <AT_Send+0x35c>)
 8004faa:	4bab      	ldr	r3, [pc, #684]	@ (8005258 <AT_Send+0x354>)
 8004fac:	0019      	movs	r1, r3
 8004fae:	2003      	movs	r0, #3
 8004fb0:	f009 fa22 	bl	800e3f8 <CreateLine>
    ATCommandSend = ATRestore();
 8004fb4:	230f      	movs	r3, #15
 8004fb6:	18fc      	adds	r4, r7, r3
 8004fb8:	f7ff fbd8 	bl	800476c <ATRestore>
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004fc0:	f009 fe70 	bl	800eca4 <HAL_GetTick>
 8004fc4:	0003      	movs	r3, r0
 8004fc6:	3332      	adds	r3, #50	@ 0x32
 8004fc8:	001a      	movs	r2, r3
 8004fca:	4ba1      	ldr	r3, [pc, #644]	@ (8005250 <AT_Send+0x34c>)
 8004fcc:	601a      	str	r2, [r3, #0]
    break;
 8004fce:	e135      	b.n	800523c <AT_Send+0x338>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004fd0:	4aa4      	ldr	r2, [pc, #656]	@ (8005264 <AT_Send+0x360>)
 8004fd2:	4ba1      	ldr	r3, [pc, #644]	@ (8005258 <AT_Send+0x354>)
 8004fd4:	0019      	movs	r1, r3
 8004fd6:	2003      	movs	r0, #3
 8004fd8:	f009 fa0e 	bl	800e3f8 <CreateLine>
    ATCommandSend = CWINIT();
 8004fdc:	230f      	movs	r3, #15
 8004fde:	18fc      	adds	r4, r7, r3
 8004fe0:	f7ff fbe0 	bl	80047a4 <CWINIT>
 8004fe4:	0003      	movs	r3, r0
 8004fe6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004fe8:	f009 fe5c 	bl	800eca4 <HAL_GetTick>
 8004fec:	0003      	movs	r3, r0
 8004fee:	33f5      	adds	r3, #245	@ 0xf5
 8004ff0:	33ff      	adds	r3, #255	@ 0xff
 8004ff2:	001a      	movs	r2, r3
 8004ff4:	4b96      	ldr	r3, [pc, #600]	@ (8005250 <AT_Send+0x34c>)
 8004ff6:	601a      	str	r2, [r3, #0]
    break;
 8004ff8:	e120      	b.n	800523c <AT_Send+0x338>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004ffa:	4a9b      	ldr	r2, [pc, #620]	@ (8005268 <AT_Send+0x364>)
 8004ffc:	4b96      	ldr	r3, [pc, #600]	@ (8005258 <AT_Send+0x354>)
 8004ffe:	0019      	movs	r1, r3
 8005000:	2003      	movs	r0, #3
 8005002:	f009 f9f9 	bl	800e3f8 <CreateLine>
    ATCommandSend = CWSTATE();
 8005006:	230f      	movs	r3, #15
 8005008:	18fc      	adds	r4, r7, r3
 800500a:	f7ff fcd9 	bl	80049c0 <CWSTATE>
 800500e:	0003      	movs	r3, r0
 8005010:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8005012:	f009 fe47 	bl	800eca4 <HAL_GetTick>
 8005016:	0003      	movs	r3, r0
 8005018:	33f5      	adds	r3, #245	@ 0xf5
 800501a:	33ff      	adds	r3, #255	@ 0xff
 800501c:	001a      	movs	r2, r3
 800501e:	4b8c      	ldr	r3, [pc, #560]	@ (8005250 <AT_Send+0x34c>)
 8005020:	601a      	str	r2, [r3, #0]
    break;
 8005022:	e10b      	b.n	800523c <AT_Send+0x338>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8005024:	4a91      	ldr	r2, [pc, #580]	@ (800526c <AT_Send+0x368>)
 8005026:	4b8c      	ldr	r3, [pc, #560]	@ (8005258 <AT_Send+0x354>)
 8005028:	0019      	movs	r1, r3
 800502a:	2003      	movs	r0, #3
 800502c:	f009 f9e4 	bl	800e3f8 <CreateLine>
    ATCommandSend = CWMODE1();
 8005030:	230f      	movs	r3, #15
 8005032:	18fc      	adds	r4, r7, r3
 8005034:	f7ff fbd2 	bl	80047dc <CWMODE1>
 8005038:	0003      	movs	r3, r0
 800503a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800503c:	f009 fe32 	bl	800eca4 <HAL_GetTick>
 8005040:	0003      	movs	r3, r0
 8005042:	330a      	adds	r3, #10
 8005044:	001a      	movs	r2, r3
 8005046:	4b82      	ldr	r3, [pc, #520]	@ (8005250 <AT_Send+0x34c>)
 8005048:	601a      	str	r2, [r3, #0]
    break;
 800504a:	e0f7      	b.n	800523c <AT_Send+0x338>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 800504c:	4a87      	ldr	r2, [pc, #540]	@ (800526c <AT_Send+0x368>)
 800504e:	4b82      	ldr	r3, [pc, #520]	@ (8005258 <AT_Send+0x354>)
 8005050:	0019      	movs	r1, r3
 8005052:	2003      	movs	r0, #3
 8005054:	f009 f9d0 	bl	800e3f8 <CreateLine>
    ATCommandSend = CWMODE2();
 8005058:	230f      	movs	r3, #15
 800505a:	18fc      	adds	r4, r7, r3
 800505c:	f7ff fbda 	bl	8004814 <CWMODE2>
 8005060:	0003      	movs	r3, r0
 8005062:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005064:	f009 fe1e 	bl	800eca4 <HAL_GetTick>
 8005068:	0003      	movs	r3, r0
 800506a:	330a      	adds	r3, #10
 800506c:	001a      	movs	r2, r3
 800506e:	4b78      	ldr	r3, [pc, #480]	@ (8005250 <AT_Send+0x34c>)
 8005070:	601a      	str	r2, [r3, #0]
    break;
 8005072:	e0e3      	b.n	800523c <AT_Send+0x338>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8005074:	4a7e      	ldr	r2, [pc, #504]	@ (8005270 <AT_Send+0x36c>)
 8005076:	4b78      	ldr	r3, [pc, #480]	@ (8005258 <AT_Send+0x354>)
 8005078:	0019      	movs	r1, r3
 800507a:	2003      	movs	r0, #3
 800507c:	f009 f9bc 	bl	800e3f8 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8005080:	230f      	movs	r3, #15
 8005082:	18fc      	adds	r4, r7, r3
 8005084:	f7ff fbe2 	bl	800484c <CWAUTOCONN>
 8005088:	0003      	movs	r3, r0
 800508a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800508c:	f009 fe0a 	bl	800eca4 <HAL_GetTick>
 8005090:	0003      	movs	r3, r0
 8005092:	330a      	adds	r3, #10
 8005094:	001a      	movs	r2, r3
 8005096:	4b6e      	ldr	r3, [pc, #440]	@ (8005250 <AT_Send+0x34c>)
 8005098:	601a      	str	r2, [r3, #0]
    break;
 800509a:	e0cf      	b.n	800523c <AT_Send+0x338>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 800509c:	4a75      	ldr	r2, [pc, #468]	@ (8005274 <AT_Send+0x370>)
 800509e:	4b6e      	ldr	r3, [pc, #440]	@ (8005258 <AT_Send+0x354>)
 80050a0:	0019      	movs	r1, r3
 80050a2:	2003      	movs	r0, #3
 80050a4:	f009 f9a8 	bl	800e3f8 <CreateLine>
    ATCommandSend = CWJAP();
 80050a8:	230f      	movs	r3, #15
 80050aa:	18fc      	adds	r4, r7, r3
 80050ac:	f7ff fbea 	bl	8004884 <CWJAP>
 80050b0:	0003      	movs	r3, r0
 80050b2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80050b4:	f009 fdf6 	bl	800eca4 <HAL_GetTick>
 80050b8:	0003      	movs	r3, r0
 80050ba:	3332      	adds	r3, #50	@ 0x32
 80050bc:	001a      	movs	r2, r3
 80050be:	4b64      	ldr	r3, [pc, #400]	@ (8005250 <AT_Send+0x34c>)
 80050c0:	601a      	str	r2, [r3, #0]
    break;
 80050c2:	e0bb      	b.n	800523c <AT_Send+0x338>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 80050c4:	4a6c      	ldr	r2, [pc, #432]	@ (8005278 <AT_Send+0x374>)
 80050c6:	4b64      	ldr	r3, [pc, #400]	@ (8005258 <AT_Send+0x354>)
 80050c8:	0019      	movs	r1, r3
 80050ca:	2003      	movs	r0, #3
 80050cc:	f009 f994 	bl	800e3f8 <CreateLine>
    ATCommandSend = CWMODE3();
 80050d0:	230f      	movs	r3, #15
 80050d2:	18fc      	adds	r4, r7, r3
 80050d4:	f7ff fc58 	bl	8004988 <CWMODE3>
 80050d8:	0003      	movs	r3, r0
 80050da:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80050dc:	f009 fde2 	bl	800eca4 <HAL_GetTick>
 80050e0:	0003      	movs	r3, r0
 80050e2:	330a      	adds	r3, #10
 80050e4:	001a      	movs	r2, r3
 80050e6:	4b5a      	ldr	r3, [pc, #360]	@ (8005250 <AT_Send+0x34c>)
 80050e8:	601a      	str	r2, [r3, #0]
    break;
 80050ea:	e0a7      	b.n	800523c <AT_Send+0x338>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80050ec:	4a63      	ldr	r2, [pc, #396]	@ (800527c <AT_Send+0x378>)
 80050ee:	4b5a      	ldr	r3, [pc, #360]	@ (8005258 <AT_Send+0x354>)
 80050f0:	0019      	movs	r1, r3
 80050f2:	2003      	movs	r0, #3
 80050f4:	f009 f980 	bl	800e3f8 <CreateLine>
    ATCommandSend = CWSAP();
 80050f8:	230f      	movs	r3, #15
 80050fa:	18fc      	adds	r4, r7, r3
 80050fc:	f7ff fc7c 	bl	80049f8 <CWSAP>
 8005100:	0003      	movs	r3, r0
 8005102:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005104:	f009 fdce 	bl	800eca4 <HAL_GetTick>
 8005108:	0003      	movs	r3, r0
 800510a:	330a      	adds	r3, #10
 800510c:	001a      	movs	r2, r3
 800510e:	4b50      	ldr	r3, [pc, #320]	@ (8005250 <AT_Send+0x34c>)
 8005110:	601a      	str	r2, [r3, #0]
    break;
 8005112:	e093      	b.n	800523c <AT_Send+0x338>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8005114:	230f      	movs	r3, #15
 8005116:	18fc      	adds	r4, r7, r3
 8005118:	f7ff fc8a 	bl	8004a30 <CIPMUX>
 800511c:	0003      	movs	r3, r0
 800511e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005120:	f009 fdc0 	bl	800eca4 <HAL_GetTick>
 8005124:	0003      	movs	r3, r0
 8005126:	330a      	adds	r3, #10
 8005128:	001a      	movs	r2, r3
 800512a:	4b49      	ldr	r3, [pc, #292]	@ (8005250 <AT_Send+0x34c>)
 800512c:	601a      	str	r2, [r3, #0]
    break;
 800512e:	e085      	b.n	800523c <AT_Send+0x338>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8005130:	230f      	movs	r3, #15
 8005132:	18fc      	adds	r4, r7, r3
 8005134:	f7ff fc98 	bl	8004a68 <WEBSERVER>
 8005138:	0003      	movs	r3, r0
 800513a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800513c:	f009 fdb2 	bl	800eca4 <HAL_GetTick>
 8005140:	0003      	movs	r3, r0
 8005142:	330a      	adds	r3, #10
 8005144:	001a      	movs	r2, r3
 8005146:	4b42      	ldr	r3, [pc, #264]	@ (8005250 <AT_Send+0x34c>)
 8005148:	601a      	str	r2, [r3, #0]
    break;
 800514a:	e077      	b.n	800523c <AT_Send+0x338>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 800514c:	230f      	movs	r3, #15
 800514e:	18fc      	adds	r4, r7, r3
 8005150:	f7ff fca6 	bl	8004aa0 <HTTPCPOST>
 8005154:	0003      	movs	r3, r0
 8005156:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8005158:	f009 fda4 	bl	800eca4 <HAL_GetTick>
 800515c:	0003      	movs	r3, r0
 800515e:	33f5      	adds	r3, #245	@ 0xf5
 8005160:	33ff      	adds	r3, #255	@ 0xff
 8005162:	001a      	movs	r2, r3
 8005164:	4b3a      	ldr	r3, [pc, #232]	@ (8005250 <AT_Send+0x34c>)
 8005166:	601a      	str	r2, [r3, #0]
    break;
 8005168:	e068      	b.n	800523c <AT_Send+0x338>

  case AT_SENDDATA:
    Debug("Send the data");
 800516a:	4a45      	ldr	r2, [pc, #276]	@ (8005280 <AT_Send+0x37c>)
 800516c:	4b3a      	ldr	r3, [pc, #232]	@ (8005258 <AT_Send+0x354>)
 800516e:	0019      	movs	r1, r3
 8005170:	2003      	movs	r0, #3
 8005172:	f009 f941 	bl	800e3f8 <CreateLine>
    ATCommandSend = SENDDATA();
 8005176:	230f      	movs	r3, #15
 8005178:	18fc      	adds	r4, r7, r3
 800517a:	f7ff fcf1 	bl	8004b60 <SENDDATA>
 800517e:	0003      	movs	r3, r0
 8005180:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8005182:	f009 fd8f 	bl	800eca4 <HAL_GetTick>
 8005186:	0003      	movs	r3, r0
 8005188:	33f5      	adds	r3, #245	@ 0xf5
 800518a:	33ff      	adds	r3, #255	@ 0xff
 800518c:	001a      	movs	r2, r3
 800518e:	4b30      	ldr	r3, [pc, #192]	@ (8005250 <AT_Send+0x34c>)
 8005190:	601a      	str	r2, [r3, #0]
    break;
 8005192:	e053      	b.n	800523c <AT_Send+0x338>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8005194:	4a3b      	ldr	r2, [pc, #236]	@ (8005284 <AT_Send+0x380>)
 8005196:	4b30      	ldr	r3, [pc, #192]	@ (8005258 <AT_Send+0x354>)
 8005198:	0019      	movs	r1, r3
 800519a:	2003      	movs	r0, #3
 800519c:	f009 f92c 	bl	800e3f8 <CreateLine>
    ATCommandSend = SLEEP();
 80051a0:	230f      	movs	r3, #15
 80051a2:	18fc      	adds	r4, r7, r3
 80051a4:	f7ff fcf8 	bl	8004b98 <SLEEP>
 80051a8:	0003      	movs	r3, r0
 80051aa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051ac:	f009 fd7a 	bl	800eca4 <HAL_GetTick>
 80051b0:	0003      	movs	r3, r0
 80051b2:	330a      	adds	r3, #10
 80051b4:	001a      	movs	r2, r3
 80051b6:	4b26      	ldr	r3, [pc, #152]	@ (8005250 <AT_Send+0x34c>)
 80051b8:	601a      	str	r2, [r3, #0]
    break;
 80051ba:	e03f      	b.n	800523c <AT_Send+0x338>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 80051bc:	4a32      	ldr	r2, [pc, #200]	@ (8005288 <AT_Send+0x384>)
 80051be:	4b26      	ldr	r3, [pc, #152]	@ (8005258 <AT_Send+0x354>)
 80051c0:	0019      	movs	r1, r3
 80051c2:	2003      	movs	r0, #3
 80051c4:	f009 f918 	bl	800e3f8 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 80051c8:	230f      	movs	r3, #15
 80051ca:	18fc      	adds	r4, r7, r3
 80051cc:	f7ff fd00 	bl	8004bd0 <CIPSNTPCFG>
 80051d0:	0003      	movs	r3, r0
 80051d2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80051d4:	f009 fd66 	bl	800eca4 <HAL_GetTick>
 80051d8:	0003      	movs	r3, r0
 80051da:	330a      	adds	r3, #10
 80051dc:	001a      	movs	r2, r3
 80051de:	4b1c      	ldr	r3, [pc, #112]	@ (8005250 <AT_Send+0x34c>)
 80051e0:	601a      	str	r2, [r3, #0]
    break;
 80051e2:	e02b      	b.n	800523c <AT_Send+0x338>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 80051e4:	4a29      	ldr	r2, [pc, #164]	@ (800528c <AT_Send+0x388>)
 80051e6:	4b1c      	ldr	r3, [pc, #112]	@ (8005258 <AT_Send+0x354>)
 80051e8:	0019      	movs	r1, r3
 80051ea:	2003      	movs	r0, #3
 80051ec:	f009 f904 	bl	800e3f8 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 80051f0:	230f      	movs	r3, #15
 80051f2:	18fc      	adds	r4, r7, r3
 80051f4:	f7ff fd0c 	bl	8004c10 <CIPSNTPTIME>
 80051f8:	0003      	movs	r3, r0
 80051fa:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80051fc:	f009 fd52 	bl	800eca4 <HAL_GetTick>
 8005200:	0003      	movs	r3, r0
 8005202:	33f5      	adds	r3, #245	@ 0xf5
 8005204:	33ff      	adds	r3, #255	@ 0xff
 8005206:	001a      	movs	r2, r3
 8005208:	4b11      	ldr	r3, [pc, #68]	@ (8005250 <AT_Send+0x34c>)
 800520a:	601a      	str	r2, [r3, #0]
    break;
 800520c:	e016      	b.n	800523c <AT_Send+0x338>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 800520e:	4a20      	ldr	r2, [pc, #128]	@ (8005290 <AT_Send+0x38c>)
 8005210:	4b11      	ldr	r3, [pc, #68]	@ (8005258 <AT_Send+0x354>)
 8005212:	0019      	movs	r1, r3
 8005214:	2003      	movs	r0, #3
 8005216:	f009 f8ef 	bl	800e3f8 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 800521a:	230f      	movs	r3, #15
 800521c:	18fc      	adds	r4, r7, r3
 800521e:	f7ff fd13 	bl	8004c48 <CIPSNTPINTV>
 8005222:	0003      	movs	r3, r0
 8005224:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8005226:	f009 fd3d 	bl	800eca4 <HAL_GetTick>
 800522a:	0003      	movs	r3, r0
 800522c:	330a      	adds	r3, #10
 800522e:	001a      	movs	r2, r3
 8005230:	4b07      	ldr	r3, [pc, #28]	@ (8005250 <AT_Send+0x34c>)
 8005232:	601a      	str	r2, [r3, #0]
    break;
 8005234:	e002      	b.n	800523c <AT_Send+0x338>
  case AT_END:
    break;
 8005236:	46c0      	nop			@ (mov r8, r8)
 8005238:	e000      	b.n	800523c <AT_Send+0x338>
  break;
 800523a:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 800523c:	230f      	movs	r3, #15
 800523e:	18fb      	adds	r3, r7, r3
 8005240:	781b      	ldrb	r3, [r3, #0]
}
 8005242:	0018      	movs	r0, r3
 8005244:	46bd      	mov	sp, r7
 8005246:	b005      	add	sp, #20
 8005248:	bd90      	pop	{r4, r7, pc}
 800524a:	46c0      	nop			@ (mov r8, r8)
 800524c:	080252a4 	.word	0x080252a4
 8005250:	20000a1c 	.word	0x20000a1c
 8005254:	08023890 	.word	0x08023890
 8005258:	080230b8 	.word	0x080230b8
 800525c:	080238a4 	.word	0x080238a4
 8005260:	080238b8 	.word	0x080238b8
 8005264:	080238c8 	.word	0x080238c8
 8005268:	080238dc 	.word	0x080238dc
 800526c:	080238f4 	.word	0x080238f4
 8005270:	0802390c 	.word	0x0802390c
 8005274:	08023924 	.word	0x08023924
 8005278:	08023938 	.word	0x08023938
 800527c:	08023954 	.word	0x08023954
 8005280:	08023970 	.word	0x08023970
 8005284:	08023980 	.word	0x08023980
 8005288:	080239a4 	.word	0x080239a4
 800528c:	080239b8 	.word	0x080239b8
 8005290:	080239d0 	.word	0x080239d0

08005294 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8005294:	b590      	push	{r4, r7, lr}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800529a:	1dfb      	adds	r3, r7, #7
 800529c:	2200      	movs	r2, #0
 800529e:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 80052a0:	4b7d      	ldr	r3, [pc, #500]	@ (8005498 <ESP_WakeTest+0x204>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b05      	cmp	r3, #5
 80052a6:	d900      	bls.n	80052aa <ESP_WakeTest+0x16>
 80052a8:	e0d9      	b.n	800545e <ESP_WakeTest+0x1ca>
 80052aa:	009a      	lsls	r2, r3, #2
 80052ac:	4b7b      	ldr	r3, [pc, #492]	@ (800549c <ESP_WakeTest+0x208>)
 80052ae:	18d3      	adds	r3, r2, r3
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
//      Debug("TestState: ESP_TEST_INIT");
      if(!EspTurnedOn){
 80052b4:	4b7a      	ldr	r3, [pc, #488]	@ (80054a0 <ESP_WakeTest+0x20c>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2201      	movs	r2, #1
 80052ba:	4053      	eors	r3, r2
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d036      	beq.n	8005330 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80052c2:	2380      	movs	r3, #128	@ 0x80
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	4877      	ldr	r0, [pc, #476]	@ (80054a4 <ESP_WakeTest+0x210>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	0019      	movs	r1, r3
 80052cc:	f00a ff7b 	bl	80101c6 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80052d0:	2032      	movs	r0, #50	@ 0x32
 80052d2:	f009 fcf1 	bl	800ecb8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80052d6:	2380      	movs	r3, #128	@ 0x80
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	4872      	ldr	r0, [pc, #456]	@ (80054a4 <ESP_WakeTest+0x210>)
 80052dc:	2201      	movs	r2, #1
 80052de:	0019      	movs	r1, r3
 80052e0:	f00a ff71 	bl	80101c6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052e4:	200a      	movs	r0, #10
 80052e6:	f009 fce7 	bl	800ecb8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80052ea:	4b6f      	ldr	r3, [pc, #444]	@ (80054a8 <ESP_WakeTest+0x214>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	2101      	movs	r1, #1
 80052f0:	0018      	movs	r0, r3
 80052f2:	f00a ff68 	bl	80101c6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80052f6:	200a      	movs	r0, #10
 80052f8:	f009 fcde 	bl	800ecb8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80052fc:	4b6a      	ldr	r3, [pc, #424]	@ (80054a8 <ESP_WakeTest+0x214>)
 80052fe:	2201      	movs	r2, #1
 8005300:	2102      	movs	r1, #2
 8005302:	0018      	movs	r0, r3
 8005304:	f00a ff5f 	bl	80101c6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005308:	200a      	movs	r0, #10
 800530a:	f009 fcd5 	bl	800ecb8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800530e:	4b66      	ldr	r3, [pc, #408]	@ (80054a8 <ESP_WakeTest+0x214>)
 8005310:	2201      	movs	r2, #1
 8005312:	2101      	movs	r1, #1
 8005314:	0018      	movs	r0, r3
 8005316:	f00a ff56 	bl	80101c6 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 800531a:	f009 fcc3 	bl	800eca4 <HAL_GetTick>
 800531e:	0003      	movs	r3, r0
 8005320:	22af      	movs	r2, #175	@ 0xaf
 8005322:	0092      	lsls	r2, r2, #2
 8005324:	189a      	adds	r2, r3, r2
 8005326:	4b61      	ldr	r3, [pc, #388]	@ (80054ac <ESP_WakeTest+0x218>)
 8005328:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 800532a:	4b5d      	ldr	r3, [pc, #372]	@ (80054a0 <ESP_WakeTest+0x20c>)
 800532c:	2201      	movs	r2, #1
 800532e:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005330:	2380      	movs	r3, #128	@ 0x80
 8005332:	005a      	lsls	r2, r3, #1
 8005334:	4b5e      	ldr	r3, [pc, #376]	@ (80054b0 <ESP_WakeTest+0x21c>)
 8005336:	0011      	movs	r1, r2
 8005338:	0018      	movs	r0, r3
 800533a:	f7fe fc1f 	bl	8003b7c <ESP_Receive>
 800533e:	1e03      	subs	r3, r0, #0
 8005340:	d100      	bne.n	8005344 <ESP_WakeTest+0xb0>
 8005342:	e09f      	b.n	8005484 <ESP_WakeTest+0x1f0>
        TestState = ESP_TEST_SEND;
 8005344:	4b54      	ldr	r3, [pc, #336]	@ (8005498 <ESP_WakeTest+0x204>)
 8005346:	2201      	movs	r2, #1
 8005348:	701a      	strb	r2, [r3, #0]
      }
      break;
 800534a:	e09b      	b.n	8005484 <ESP_WakeTest+0x1f0>

    case ESP_TEST_SEND:
//      Debug("TestState: ESP_TEST_SEND");
      if(TimestampIsReached(ESPTimeStamp)){
 800534c:	4b57      	ldr	r3, [pc, #348]	@ (80054ac <ESP_WakeTest+0x218>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	0018      	movs	r0, r3
 8005352:	f008 fffb 	bl	800e34c <TimestampIsReached>
 8005356:	1e03      	subs	r3, r0, #0
 8005358:	d100      	bne.n	800535c <ESP_WakeTest+0xc8>
 800535a:	e095      	b.n	8005488 <ESP_WakeTest+0x1f4>
        ATSend = AT_Send(ATCommand);
 800535c:	4b55      	ldr	r3, [pc, #340]	@ (80054b4 <ESP_WakeTest+0x220>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	1dfc      	adds	r4, r7, #7
 8005362:	0018      	movs	r0, r3
 8005364:	f7ff fdce 	bl	8004f04 <AT_Send>
 8005368:	0003      	movs	r3, r0
 800536a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800536c:	1dfb      	adds	r3, r7, #7
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d100      	bne.n	8005376 <ESP_WakeTest+0xe2>
 8005374:	e088      	b.n	8005488 <ESP_WakeTest+0x1f4>
          TestState = ESP_TEST_RECEIVE;
 8005376:	4b48      	ldr	r3, [pc, #288]	@ (8005498 <ESP_WakeTest+0x204>)
 8005378:	2202      	movs	r2, #2
 800537a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800537c:	e084      	b.n	8005488 <ESP_WakeTest+0x1f4>

    case ESP_TEST_RECEIVE:
//      Debug("TestState: ESP_TEST_RECEIVE");
      if(TimestampIsReached(ESPTimeStamp)){
 800537e:	4b4b      	ldr	r3, [pc, #300]	@ (80054ac <ESP_WakeTest+0x218>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	0018      	movs	r0, r3
 8005384:	f008 ffe2 	bl	800e34c <TimestampIsReached>
 8005388:	1e03      	subs	r3, r0, #0
 800538a:	d100      	bne.n	800538e <ESP_WakeTest+0xfa>
 800538c:	e07e      	b.n	800548c <ESP_WakeTest+0x1f8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800538e:	4b4a      	ldr	r3, [pc, #296]	@ (80054b8 <ESP_WakeTest+0x224>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	0018      	movs	r0, r3
 8005394:	f7ff fc74 	bl	8004c80 <DMA_ProcessBuffer>
 8005398:	0003      	movs	r3, r0
 800539a:	001a      	movs	r2, r3
 800539c:	4b47      	ldr	r3, [pc, #284]	@ (80054bc <ESP_WakeTest+0x228>)
 800539e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80053a0:	4b46      	ldr	r3, [pc, #280]	@ (80054bc <ESP_WakeTest+0x228>)
 80053a2:	781a      	ldrb	r2, [r3, #0]
 80053a4:	4b44      	ldr	r3, [pc, #272]	@ (80054b8 <ESP_WakeTest+0x224>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	1dbc      	adds	r4, r7, #6
 80053aa:	0019      	movs	r1, r3
 80053ac:	0010      	movs	r0, r2
 80053ae:	f7ff fd67 	bl	8004e80 <ATCompare>
 80053b2:	0003      	movs	r3, r0
 80053b4:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80053b6:	4b41      	ldr	r3, [pc, #260]	@ (80054bc <ESP_WakeTest+0x228>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d102      	bne.n	80053c4 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 80053be:	4b36      	ldr	r3, [pc, #216]	@ (8005498 <ESP_WakeTest+0x204>)
 80053c0:	2201      	movs	r2, #1
 80053c2:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80053c4:	4b3d      	ldr	r3, [pc, #244]	@ (80054bc <ESP_WakeTest+0x228>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2b07      	cmp	r3, #7
 80053ca:	d104      	bne.n	80053d6 <ESP_WakeTest+0x142>
          StartProg();
 80053cc:	f7fe ff58 	bl	8004280 <StartProg>
          TestState = ESP_TEST_BOOT;
 80053d0:	4b31      	ldr	r3, [pc, #196]	@ (8005498 <ESP_WakeTest+0x204>)
 80053d2:	2205      	movs	r2, #5
 80053d4:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80053d6:	4b39      	ldr	r3, [pc, #228]	@ (80054bc <ESP_WakeTest+0x228>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d109      	bne.n	80053f2 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 80053de:	f009 fc61 	bl	800eca4 <HAL_GetTick>
 80053e2:	0003      	movs	r3, r0
 80053e4:	3332      	adds	r3, #50	@ 0x32
 80053e6:	001a      	movs	r2, r3
 80053e8:	4b30      	ldr	r3, [pc, #192]	@ (80054ac <ESP_WakeTest+0x218>)
 80053ea:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 80053ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005498 <ESP_WakeTest+0x204>)
 80053ee:	2201      	movs	r2, #1
 80053f0:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 80053f2:	1dbb      	adds	r3, r7, #6
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d048      	beq.n	800548c <ESP_WakeTest+0x1f8>
          TestState = ESP_TEST_VALIDATE;
 80053fa:	4b27      	ldr	r3, [pc, #156]	@ (8005498 <ESP_WakeTest+0x204>)
 80053fc:	2203      	movs	r2, #3
 80053fe:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005400:	e044      	b.n	800548c <ESP_WakeTest+0x1f8>

    case ESP_TEST_VALIDATE:
//      Debug("TestState: ESP_TEST_VALIDATE");
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8005402:	4b2f      	ldr	r3, [pc, #188]	@ (80054c0 <ESP_WakeTest+0x22c>)
 8005404:	22fa      	movs	r2, #250	@ 0xfa
 8005406:	0112      	lsls	r2, r2, #4
 8005408:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = Calculate_LED_ON();
 800540a:	f007 fe83 	bl	800d114 <Calculate_LED_ON>
 800540e:	0003      	movs	r3, r0
 8005410:	001a      	movs	r2, r3
 8005412:	4b2b      	ldr	r3, [pc, #172]	@ (80054c0 <ESP_WakeTest+0x22c>)
 8005414:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8005416:	4b2a      	ldr	r3, [pc, #168]	@ (80054c0 <ESP_WakeTest+0x22c>)
 8005418:	22fa      	movs	r2, #250	@ 0xfa
 800541a:	0112      	lsls	r2, r2, #4
 800541c:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 800541e:	4b1e      	ldr	r3, [pc, #120]	@ (8005498 <ESP_WakeTest+0x204>)
 8005420:	2204      	movs	r2, #4
 8005422:	701a      	strb	r2, [r3, #0]

      break;
 8005424:	e033      	b.n	800548e <ESP_WakeTest+0x1fa>

    case ESP_TEST_DEINIT:
//      Debug("TestState: ESP_TEST_DEINIT");
      testRound = false;
 8005426:	4b27      	ldr	r3, [pc, #156]	@ (80054c4 <ESP_WakeTest+0x230>)
 8005428:	2200      	movs	r2, #0
 800542a:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800542c:	4b1c      	ldr	r3, [pc, #112]	@ (80054a0 <ESP_WakeTest+0x20c>)
 800542e:	2200      	movs	r2, #0
 8005430:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005432:	4b1d      	ldr	r3, [pc, #116]	@ (80054a8 <ESP_WakeTest+0x214>)
 8005434:	2200      	movs	r2, #0
 8005436:	2101      	movs	r1, #1
 8005438:	0018      	movs	r0, r3
 800543a:	f00a fec4 	bl	80101c6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800543e:	2380      	movs	r3, #128	@ 0x80
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	4818      	ldr	r0, [pc, #96]	@ (80054a4 <ESP_WakeTest+0x210>)
 8005444:	2200      	movs	r2, #0
 8005446:	0019      	movs	r1, r3
 8005448:	f00a febd 	bl	80101c6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800544c:	4b16      	ldr	r3, [pc, #88]	@ (80054a8 <ESP_WakeTest+0x214>)
 800544e:	2200      	movs	r2, #0
 8005450:	2102      	movs	r1, #2
 8005452:	0018      	movs	r0, r3
 8005454:	f00a feb7 	bl	80101c6 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8005458:	f002 ffc2 	bl	80083e0 <SetESPMeasurementDone>
      break;
 800545c:	e017      	b.n	800548e <ESP_WakeTest+0x1fa>

    default:
//      Debug("TestState: ESP_TEST_INIT");
      TestState = ESP_TEST_INIT;
 800545e:	4b0e      	ldr	r3, [pc, #56]	@ (8005498 <ESP_WakeTest+0x204>)
 8005460:	2200      	movs	r2, #0
 8005462:	701a      	strb	r2, [r3, #0]
      break;
 8005464:	e013      	b.n	800548e <ESP_WakeTest+0x1fa>

    case ESP_TEST_BOOT:
//      Debug("TestState: ESP_TEST_BOOT");
      TIM3 -> CCR1 = 4000;
 8005466:	4b16      	ldr	r3, [pc, #88]	@ (80054c0 <ESP_WakeTest+0x22c>)
 8005468:	22fa      	movs	r2, #250	@ 0xfa
 800546a:	0112      	lsls	r2, r2, #4
 800546c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 800546e:	4b14      	ldr	r3, [pc, #80]	@ (80054c0 <ESP_WakeTest+0x22c>)
 8005470:	22fa      	movs	r2, #250	@ 0xfa
 8005472:	0112      	lsls	r2, r2, #4
 8005474:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = Calculate_LED_ON();
 8005476:	f007 fe4d 	bl	800d114 <Calculate_LED_ON>
 800547a:	0003      	movs	r3, r0
 800547c:	001a      	movs	r2, r3
 800547e:	4b10      	ldr	r3, [pc, #64]	@ (80054c0 <ESP_WakeTest+0x22c>)
 8005480:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 8005482:	e004      	b.n	800548e <ESP_WakeTest+0x1fa>
      break;
 8005484:	46c0      	nop			@ (mov r8, r8)
 8005486:	e002      	b.n	800548e <ESP_WakeTest+0x1fa>
      break;
 8005488:	46c0      	nop			@ (mov r8, r8)
 800548a:	e000      	b.n	800548e <ESP_WakeTest+0x1fa>
      break;
 800548c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800548e:	46c0      	nop			@ (mov r8, r8)
 8005490:	46bd      	mov	sp, r7
 8005492:	b003      	add	sp, #12
 8005494:	bd90      	pop	{r4, r7, pc}
 8005496:	46c0      	nop			@ (mov r8, r8)
 8005498:	20000a2c 	.word	0x20000a2c
 800549c:	080252f8 	.word	0x080252f8
 80054a0:	2000054c 	.word	0x2000054c
 80054a4:	50000800 	.word	0x50000800
 80054a8:	50001c00 	.word	0x50001c00
 80054ac:	20000a1c 	.word	0x20000a1c
 80054b0:	2000044c 	.word	0x2000044c
 80054b4:	20000a2a 	.word	0x20000a2a
 80054b8:	20000a29 	.word	0x20000a29
 80054bc:	20000029 	.word	0x20000029
 80054c0:	40000400 	.word	0x40000400
 80054c4:	20000000 	.word	0x20000000

080054c8 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80054c8:	b5b0      	push	{r4, r5, r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80054ce:	1dfb      	adds	r3, r7, #7
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;

  if ((EspState != oldEspState) && (GetVerboseLevel() == VERBOSE_ALL)) {
 80054d4:	4be2      	ldr	r3, [pc, #904]	@ (8005860 <ESP_Upkeep+0x398>)
 80054d6:	781a      	ldrb	r2, [r3, #0]
 80054d8:	4be2      	ldr	r3, [pc, #904]	@ (8005864 <ESP_Upkeep+0x39c>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d024      	beq.n	800552a <ESP_Upkeep+0x62>
 80054e0:	f009 f804 	bl	800e4ec <GetVerboseLevel>
 80054e4:	0003      	movs	r3, r0
 80054e6:	2b03      	cmp	r3, #3
 80054e8:	d11f      	bne.n	800552a <ESP_Upkeep+0x62>
    oldEspState = EspState;
 80054ea:	4bdd      	ldr	r3, [pc, #884]	@ (8005860 <ESP_Upkeep+0x398>)
 80054ec:	781a      	ldrb	r2, [r3, #0]
 80054ee:	4bdd      	ldr	r3, [pc, #884]	@ (8005864 <ESP_Upkeep+0x39c>)
 80054f0:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80054f2:	4bdc      	ldr	r3, [pc, #880]	@ (8005864 <ESP_Upkeep+0x39c>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d103      	bne.n	8005502 <ESP_Upkeep+0x3a>
 80054fa:	4bdb      	ldr	r3, [pc, #876]	@ (8005868 <ESP_Upkeep+0x3a0>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b0e      	cmp	r3, #14
 8005500:	d013      	beq.n	800552a <ESP_Upkeep+0x62>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 8005502:	4bd8      	ldr	r3, [pc, #864]	@ (8005864 <ESP_Upkeep+0x39c>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	001d      	movs	r5, r3
 8005508:	4bd7      	ldr	r3, [pc, #860]	@ (8005868 <ESP_Upkeep+0x3a0>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	0018      	movs	r0, r3
 800550e:	4bd7      	ldr	r3, [pc, #860]	@ (800586c <ESP_Upkeep+0x3a4>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	001c      	movs	r4, r3
 8005514:	4bd6      	ldr	r3, [pc, #856]	@ (8005870 <ESP_Upkeep+0x3a8>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	4ad6      	ldr	r2, [pc, #856]	@ (8005874 <ESP_Upkeep+0x3ac>)
 800551a:	49d7      	ldr	r1, [pc, #860]	@ (8005878 <ESP_Upkeep+0x3b0>)
 800551c:	9302      	str	r3, [sp, #8]
 800551e:	9401      	str	r4, [sp, #4]
 8005520:	9000      	str	r0, [sp, #0]
 8005522:	002b      	movs	r3, r5
 8005524:	2003      	movs	r0, #3
 8005526:	f008 ff67 	bl	800e3f8 <CreateLine>
    }
  }
  switch (EspState) {
 800552a:	4bcd      	ldr	r3, [pc, #820]	@ (8005860 <ESP_Upkeep+0x398>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b0f      	cmp	r3, #15
 8005530:	d901      	bls.n	8005536 <ESP_Upkeep+0x6e>
 8005532:	f000 fc04 	bl	8005d3e <ESP_Upkeep+0x876>
 8005536:	009a      	lsls	r2, r3, #2
 8005538:	4bd0      	ldr	r3, [pc, #832]	@ (800587c <ESP_Upkeep+0x3b4>)
 800553a:	18d3      	adds	r3, r2, r3
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005540:	4bc7      	ldr	r3, [pc, #796]	@ (8005860 <ESP_Upkeep+0x398>)
 8005542:	2201      	movs	r2, #1
 8005544:	701a      	strb	r2, [r3, #0]
      break;
 8005546:	f000 fc13 	bl	8005d70 <ESP_Upkeep+0x8a8>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 800554a:	4bcd      	ldr	r3, [pc, #820]	@ (8005880 <ESP_Upkeep+0x3b8>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2201      	movs	r2, #1
 8005550:	4053      	eors	r3, r2
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d036      	beq.n	80055c6 <ESP_Upkeep+0xfe>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005558:	2380      	movs	r3, #128	@ 0x80
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	48c9      	ldr	r0, [pc, #804]	@ (8005884 <ESP_Upkeep+0x3bc>)
 800555e:	2200      	movs	r2, #0
 8005560:	0019      	movs	r1, r3
 8005562:	f00a fe30 	bl	80101c6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005566:	2001      	movs	r0, #1
 8005568:	f009 fba6 	bl	800ecb8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800556c:	2380      	movs	r3, #128	@ 0x80
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	48c4      	ldr	r0, [pc, #784]	@ (8005884 <ESP_Upkeep+0x3bc>)
 8005572:	2201      	movs	r2, #1
 8005574:	0019      	movs	r1, r3
 8005576:	f00a fe26 	bl	80101c6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800557a:	2001      	movs	r0, #1
 800557c:	f009 fb9c 	bl	800ecb8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005580:	4bc1      	ldr	r3, [pc, #772]	@ (8005888 <ESP_Upkeep+0x3c0>)
 8005582:	2200      	movs	r2, #0
 8005584:	2101      	movs	r1, #1
 8005586:	0018      	movs	r0, r3
 8005588:	f00a fe1d 	bl	80101c6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800558c:	2001      	movs	r0, #1
 800558e:	f009 fb93 	bl	800ecb8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8005592:	4bbd      	ldr	r3, [pc, #756]	@ (8005888 <ESP_Upkeep+0x3c0>)
 8005594:	2201      	movs	r2, #1
 8005596:	2102      	movs	r1, #2
 8005598:	0018      	movs	r0, r3
 800559a:	f00a fe14 	bl	80101c6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800559e:	2001      	movs	r0, #1
 80055a0:	f009 fb8a 	bl	800ecb8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80055a4:	4bb8      	ldr	r3, [pc, #736]	@ (8005888 <ESP_Upkeep+0x3c0>)
 80055a6:	2201      	movs	r2, #1
 80055a8:	2101      	movs	r1, #1
 80055aa:	0018      	movs	r0, r3
 80055ac:	f00a fe0b 	bl	80101c6 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80055b0:	f009 fb78 	bl	800eca4 <HAL_GetTick>
 80055b4:	0003      	movs	r3, r0
 80055b6:	22af      	movs	r2, #175	@ 0xaf
 80055b8:	0092      	lsls	r2, r2, #2
 80055ba:	189a      	adds	r2, r3, r2
 80055bc:	4bb3      	ldr	r3, [pc, #716]	@ (800588c <ESP_Upkeep+0x3c4>)
 80055be:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80055c0:	4baf      	ldr	r3, [pc, #700]	@ (8005880 <ESP_Upkeep+0x3b8>)
 80055c2:	2201      	movs	r2, #1
 80055c4:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80055c6:	2380      	movs	r3, #128	@ 0x80
 80055c8:	005a      	lsls	r2, r3, #1
 80055ca:	4bb1      	ldr	r3, [pc, #708]	@ (8005890 <ESP_Upkeep+0x3c8>)
 80055cc:	0011      	movs	r1, r2
 80055ce:	0018      	movs	r0, r3
 80055d0:	f7fe fad4 	bl	8003b7c <ESP_Receive>
 80055d4:	1e03      	subs	r3, r0, #0
 80055d6:	d101      	bne.n	80055dc <ESP_Upkeep+0x114>
 80055d8:	f000 fbbd 	bl	8005d56 <ESP_Upkeep+0x88e>
        EspState = ESP_STATE_WAIT_AWAKE;
 80055dc:	4ba0      	ldr	r3, [pc, #640]	@ (8005860 <ESP_Upkeep+0x398>)
 80055de:	220f      	movs	r2, #15
 80055e0:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80055e2:	f009 fb5f 	bl	800eca4 <HAL_GetTick>
 80055e6:	0003      	movs	r3, r0
 80055e8:	22fa      	movs	r2, #250	@ 0xfa
 80055ea:	00d2      	lsls	r2, r2, #3
 80055ec:	189a      	adds	r2, r3, r2
 80055ee:	4ba9      	ldr	r3, [pc, #676]	@ (8005894 <ESP_Upkeep+0x3cc>)
 80055f0:	601a      	str	r2, [r3, #0]
      }
      break;
 80055f2:	f000 fbb0 	bl	8005d56 <ESP_Upkeep+0x88e>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80055f6:	2001      	movs	r0, #1
 80055f8:	f7ff fb42 	bl	8004c80 <DMA_ProcessBuffer>
 80055fc:	0003      	movs	r3, r0
 80055fe:	001a      	movs	r2, r3
 8005600:	4ba5      	ldr	r3, [pc, #660]	@ (8005898 <ESP_Upkeep+0x3d0>)
 8005602:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8005604:	4ba4      	ldr	r3, [pc, #656]	@ (8005898 <ESP_Upkeep+0x3d0>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	1dbc      	adds	r4, r7, #6
 800560a:	2101      	movs	r1, #1
 800560c:	0018      	movs	r0, r3
 800560e:	f7ff fc37 	bl	8004e80 <ATCompare>
 8005612:	0003      	movs	r3, r0
 8005614:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8005616:	1dbb      	adds	r3, r7, #6
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d108      	bne.n	8005630 <ESP_Upkeep+0x168>
 800561e:	4b9d      	ldr	r3, [pc, #628]	@ (8005894 <ESP_Upkeep+0x3cc>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	0018      	movs	r0, r3
 8005624:	f008 fe92 	bl	800e34c <TimestampIsReached>
 8005628:	1e03      	subs	r3, r0, #0
 800562a:	d101      	bne.n	8005630 <ESP_Upkeep+0x168>
 800562c:	f000 fb95 	bl	8005d5a <ESP_Upkeep+0x892>
          EspState = ESP_STATE_MODE_SELECT;
 8005630:	4b8b      	ldr	r3, [pc, #556]	@ (8005860 <ESP_Upkeep+0x398>)
 8005632:	220b      	movs	r2, #11
 8005634:	701a      	strb	r2, [r3, #0]
        }
        break;
 8005636:	e390      	b.n	8005d5a <ESP_Upkeep+0x892>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8005638:	4b98      	ldr	r3, [pc, #608]	@ (800589c <ESP_Upkeep+0x3d4>)
 800563a:	2209      	movs	r2, #9
 800563c:	2114      	movs	r1, #20
 800563e:	0018      	movs	r0, r3
 8005640:	f01a fd88 	bl	8020154 <memset>
      if(!InitIsDone || WifiReset){
 8005644:	4b96      	ldr	r3, [pc, #600]	@ (80058a0 <ESP_Upkeep+0x3d8>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2201      	movs	r2, #1
 800564a:	4053      	eors	r3, r2
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d103      	bne.n	800565a <ESP_Upkeep+0x192>
 8005652:	4b94      	ldr	r3, [pc, #592]	@ (80058a4 <ESP_Upkeep+0x3dc>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d01a      	beq.n	8005690 <ESP_Upkeep+0x1c8>
        memcpy(ATCommandArray, AT_INIT, 7);
 800565a:	4b90      	ldr	r3, [pc, #576]	@ (800589c <ESP_Upkeep+0x3d4>)
 800565c:	4a92      	ldr	r2, [pc, #584]	@ (80058a8 <ESP_Upkeep+0x3e0>)
 800565e:	6811      	ldr	r1, [r2, #0]
 8005660:	6019      	str	r1, [r3, #0]
 8005662:	8891      	ldrh	r1, [r2, #4]
 8005664:	8099      	strh	r1, [r3, #4]
 8005666:	7992      	ldrb	r2, [r2, #6]
 8005668:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 800566a:	4b7d      	ldr	r3, [pc, #500]	@ (8005860 <ESP_Upkeep+0x398>)
 800566c:	2204      	movs	r2, #4
 800566e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005670:	4b8e      	ldr	r3, [pc, #568]	@ (80058ac <ESP_Upkeep+0x3e4>)
 8005672:	2200      	movs	r2, #0
 8005674:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005676:	4b7d      	ldr	r3, [pc, #500]	@ (800586c <ESP_Upkeep+0x3a4>)
 8005678:	2200      	movs	r2, #0
 800567a:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800567c:	4b8b      	ldr	r3, [pc, #556]	@ (80058ac <ESP_Upkeep+0x3e4>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	001a      	movs	r2, r3
 8005682:	4b86      	ldr	r3, [pc, #536]	@ (800589c <ESP_Upkeep+0x3d4>)
 8005684:	5c9a      	ldrb	r2, [r3, r2]
 8005686:	4b78      	ldr	r3, [pc, #480]	@ (8005868 <ESP_Upkeep+0x3a0>)
 8005688:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800568a:	4b79      	ldr	r3, [pc, #484]	@ (8005870 <ESP_Upkeep+0x3a8>)
 800568c:	2200      	movs	r2, #0
 800568e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8005690:	4b83      	ldr	r3, [pc, #524]	@ (80058a0 <ESP_Upkeep+0x3d8>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01f      	beq.n	80056d8 <ESP_Upkeep+0x210>
 8005698:	4b85      	ldr	r3, [pc, #532]	@ (80058b0 <ESP_Upkeep+0x3e8>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2201      	movs	r2, #1
 800569e:	4053      	eors	r3, r2
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d018      	beq.n	80056d8 <ESP_Upkeep+0x210>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80056a6:	4b7d      	ldr	r3, [pc, #500]	@ (800589c <ESP_Upkeep+0x3d4>)
 80056a8:	4a82      	ldr	r2, [pc, #520]	@ (80058b4 <ESP_Upkeep+0x3ec>)
 80056aa:	6811      	ldr	r1, [r2, #0]
 80056ac:	6019      	str	r1, [r3, #0]
 80056ae:	8892      	ldrh	r2, [r2, #4]
 80056b0:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80056b2:	4b6b      	ldr	r3, [pc, #428]	@ (8005860 <ESP_Upkeep+0x398>)
 80056b4:	2204      	movs	r2, #4
 80056b6:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80056b8:	4b7c      	ldr	r3, [pc, #496]	@ (80058ac <ESP_Upkeep+0x3e4>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80056be:	4b6b      	ldr	r3, [pc, #428]	@ (800586c <ESP_Upkeep+0x3a4>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80056c4:	4b79      	ldr	r3, [pc, #484]	@ (80058ac <ESP_Upkeep+0x3e4>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	001a      	movs	r2, r3
 80056ca:	4b74      	ldr	r3, [pc, #464]	@ (800589c <ESP_Upkeep+0x3d4>)
 80056cc:	5c9a      	ldrb	r2, [r3, r2]
 80056ce:	4b66      	ldr	r3, [pc, #408]	@ (8005868 <ESP_Upkeep+0x3a0>)
 80056d0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80056d2:	4b67      	ldr	r3, [pc, #412]	@ (8005870 <ESP_Upkeep+0x3a8>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80056d8:	4b71      	ldr	r3, [pc, #452]	@ (80058a0 <ESP_Upkeep+0x3d8>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d021      	beq.n	8005724 <ESP_Upkeep+0x25c>
 80056e0:	4b73      	ldr	r3, [pc, #460]	@ (80058b0 <ESP_Upkeep+0x3e8>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01d      	beq.n	8005724 <ESP_Upkeep+0x25c>
 80056e8:	4b73      	ldr	r3, [pc, #460]	@ (80058b8 <ESP_Upkeep+0x3f0>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2201      	movs	r2, #1
 80056ee:	4053      	eors	r3, r2
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d016      	beq.n	8005724 <ESP_Upkeep+0x25c>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80056f6:	4b71      	ldr	r3, [pc, #452]	@ (80058bc <ESP_Upkeep+0x3f4>)
 80056f8:	881a      	ldrh	r2, [r3, #0]
 80056fa:	4b68      	ldr	r3, [pc, #416]	@ (800589c <ESP_Upkeep+0x3d4>)
 80056fc:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80056fe:	4b58      	ldr	r3, [pc, #352]	@ (8005860 <ESP_Upkeep+0x398>)
 8005700:	2204      	movs	r2, #4
 8005702:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005704:	4b69      	ldr	r3, [pc, #420]	@ (80058ac <ESP_Upkeep+0x3e4>)
 8005706:	2200      	movs	r2, #0
 8005708:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 800570a:	4b58      	ldr	r3, [pc, #352]	@ (800586c <ESP_Upkeep+0x3a4>)
 800570c:	2204      	movs	r2, #4
 800570e:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005710:	4b66      	ldr	r3, [pc, #408]	@ (80058ac <ESP_Upkeep+0x3e4>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	001a      	movs	r2, r3
 8005716:	4b61      	ldr	r3, [pc, #388]	@ (800589c <ESP_Upkeep+0x3d4>)
 8005718:	5c9a      	ldrb	r2, [r3, r2]
 800571a:	4b53      	ldr	r3, [pc, #332]	@ (8005868 <ESP_Upkeep+0x3a0>)
 800571c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800571e:	4b54      	ldr	r3, [pc, #336]	@ (8005870 <ESP_Upkeep+0x3a8>)
 8005720:	2200      	movs	r2, #0
 8005722:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 8005724:	4b5e      	ldr	r3, [pc, #376]	@ (80058a0 <ESP_Upkeep+0x3d8>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d02e      	beq.n	800578a <ESP_Upkeep+0x2c2>
 800572c:	4b60      	ldr	r3, [pc, #384]	@ (80058b0 <ESP_Upkeep+0x3e8>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d02a      	beq.n	800578a <ESP_Upkeep+0x2c2>
 8005734:	4b60      	ldr	r3, [pc, #384]	@ (80058b8 <ESP_Upkeep+0x3f0>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d026      	beq.n	800578a <ESP_Upkeep+0x2c2>
 800573c:	4b60      	ldr	r3, [pc, #384]	@ (80058c0 <ESP_Upkeep+0x3f8>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2201      	movs	r2, #1
 8005742:	4053      	eors	r3, r2
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d01f      	beq.n	800578a <ESP_Upkeep+0x2c2>
        memcpy(ATCommandArray, AT_SEND, 3);
 800574a:	4b54      	ldr	r3, [pc, #336]	@ (800589c <ESP_Upkeep+0x3d4>)
 800574c:	4a5d      	ldr	r2, [pc, #372]	@ (80058c4 <ESP_Upkeep+0x3fc>)
 800574e:	8811      	ldrh	r1, [r2, #0]
 8005750:	8019      	strh	r1, [r3, #0]
 8005752:	7892      	ldrb	r2, [r2, #2]
 8005754:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005756:	4b42      	ldr	r3, [pc, #264]	@ (8005860 <ESP_Upkeep+0x398>)
 8005758:	2204      	movs	r2, #4
 800575a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800575c:	4b53      	ldr	r3, [pc, #332]	@ (80058ac <ESP_Upkeep+0x3e4>)
 800575e:	2200      	movs	r2, #0
 8005760:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8005762:	4b42      	ldr	r3, [pc, #264]	@ (800586c <ESP_Upkeep+0x3a4>)
 8005764:	2202      	movs	r2, #2
 8005766:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005768:	f009 fa9c 	bl	800eca4 <HAL_GetTick>
 800576c:	0002      	movs	r2, r0
 800576e:	4b56      	ldr	r3, [pc, #344]	@ (80058c8 <ESP_Upkeep+0x400>)
 8005770:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 8005772:	f007 fe65 	bl	800d440 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005776:	4b4d      	ldr	r3, [pc, #308]	@ (80058ac <ESP_Upkeep+0x3e4>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	001a      	movs	r2, r3
 800577c:	4b47      	ldr	r3, [pc, #284]	@ (800589c <ESP_Upkeep+0x3d4>)
 800577e:	5c9a      	ldrb	r2, [r3, r2]
 8005780:	4b39      	ldr	r3, [pc, #228]	@ (8005868 <ESP_Upkeep+0x3a0>)
 8005782:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005784:	4b3a      	ldr	r3, [pc, #232]	@ (8005870 <ESP_Upkeep+0x3a8>)
 8005786:	2200      	movs	r2, #0
 8005788:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 800578a:	4b50      	ldr	r3, [pc, #320]	@ (80058cc <ESP_Upkeep+0x404>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d022      	beq.n	80057d8 <ESP_Upkeep+0x310>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8005792:	4b42      	ldr	r3, [pc, #264]	@ (800589c <ESP_Upkeep+0x3d4>)
 8005794:	4a4e      	ldr	r2, [pc, #312]	@ (80058d0 <ESP_Upkeep+0x408>)
 8005796:	6811      	ldr	r1, [r2, #0]
 8005798:	6019      	str	r1, [r3, #0]
 800579a:	7912      	ldrb	r2, [r2, #4]
 800579c:	711a      	strb	r2, [r3, #4]
        Debug("Reconfig mode voor local wifi config selected");
 800579e:	4a4d      	ldr	r2, [pc, #308]	@ (80058d4 <ESP_Upkeep+0x40c>)
 80057a0:	4b35      	ldr	r3, [pc, #212]	@ (8005878 <ESP_Upkeep+0x3b0>)
 80057a2:	0019      	movs	r1, r3
 80057a4:	2003      	movs	r0, #3
 80057a6:	f008 fe27 	bl	800e3f8 <CreateLine>
        DisableConnectedDevices();
 80057aa:	f003 f879 	bl	80088a0 <DisableConnectedDevices>
        EspState = ESP_STATE_SEND;
 80057ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005860 <ESP_Upkeep+0x398>)
 80057b0:	2204      	movs	r2, #4
 80057b2:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80057b4:	4b3d      	ldr	r3, [pc, #244]	@ (80058ac <ESP_Upkeep+0x3e4>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80057ba:	4b2c      	ldr	r3, [pc, #176]	@ (800586c <ESP_Upkeep+0x3a4>)
 80057bc:	2203      	movs	r2, #3
 80057be:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 80057c0:	f007 fe3e 	bl	800d440 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80057c4:	4b39      	ldr	r3, [pc, #228]	@ (80058ac <ESP_Upkeep+0x3e4>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	001a      	movs	r2, r3
 80057ca:	4b34      	ldr	r3, [pc, #208]	@ (800589c <ESP_Upkeep+0x3d4>)
 80057cc:	5c9a      	ldrb	r2, [r3, r2]
 80057ce:	4b26      	ldr	r3, [pc, #152]	@ (8005868 <ESP_Upkeep+0x3a0>)
 80057d0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80057d2:	4b27      	ldr	r3, [pc, #156]	@ (8005870 <ESP_Upkeep+0x3a8>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 80057d8:	4b31      	ldr	r3, [pc, #196]	@ (80058a0 <ESP_Upkeep+0x3d8>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d100      	bne.n	80057e2 <ESP_Upkeep+0x31a>
 80057e0:	e2bd      	b.n	8005d5e <ESP_Upkeep+0x896>
 80057e2:	4b33      	ldr	r3, [pc, #204]	@ (80058b0 <ESP_Upkeep+0x3e8>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d100      	bne.n	80057ec <ESP_Upkeep+0x324>
 80057ea:	e2b8      	b.n	8005d5e <ESP_Upkeep+0x896>
 80057ec:	4b32      	ldr	r3, [pc, #200]	@ (80058b8 <ESP_Upkeep+0x3f0>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d100      	bne.n	80057f6 <ESP_Upkeep+0x32e>
 80057f4:	e2b3      	b.n	8005d5e <ESP_Upkeep+0x896>
 80057f6:	4b32      	ldr	r3, [pc, #200]	@ (80058c0 <ESP_Upkeep+0x3f8>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d100      	bne.n	8005800 <ESP_Upkeep+0x338>
 80057fe:	e2ae      	b.n	8005d5e <ESP_Upkeep+0x896>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005800:	4b35      	ldr	r3, [pc, #212]	@ (80058d8 <ESP_Upkeep+0x410>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	4b25      	ldr	r3, [pc, #148]	@ (800589c <ESP_Upkeep+0x3d4>)
 8005806:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005808:	4b15      	ldr	r3, [pc, #84]	@ (8005860 <ESP_Upkeep+0x398>)
 800580a:	2204      	movs	r2, #4
 800580c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800580e:	4b27      	ldr	r3, [pc, #156]	@ (80058ac <ESP_Upkeep+0x3e4>)
 8005810:	2200      	movs	r2, #0
 8005812:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005814:	4b15      	ldr	r3, [pc, #84]	@ (800586c <ESP_Upkeep+0x3a4>)
 8005816:	2205      	movs	r2, #5
 8005818:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800581a:	f009 fa43 	bl	800eca4 <HAL_GetTick>
 800581e:	0002      	movs	r2, r0
 8005820:	4b29      	ldr	r3, [pc, #164]	@ (80058c8 <ESP_Upkeep+0x400>)
 8005822:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 8005824:	f007 fe0c 	bl	800d440 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005828:	4b20      	ldr	r3, [pc, #128]	@ (80058ac <ESP_Upkeep+0x3e4>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	001a      	movs	r2, r3
 800582e:	4b1b      	ldr	r3, [pc, #108]	@ (800589c <ESP_Upkeep+0x3d4>)
 8005830:	5c9a      	ldrb	r2, [r3, r2]
 8005832:	4b0d      	ldr	r3, [pc, #52]	@ (8005868 <ESP_Upkeep+0x3a0>)
 8005834:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005836:	4b0e      	ldr	r3, [pc, #56]	@ (8005870 <ESP_Upkeep+0x3a8>)
 8005838:	2200      	movs	r2, #0
 800583a:	701a      	strb	r2, [r3, #0]
      }
    break;
 800583c:	e28f      	b.n	8005d5e <ESP_Upkeep+0x896>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 800583e:	4b0a      	ldr	r3, [pc, #40]	@ (8005868 <ESP_Upkeep+0x3a0>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	1dfc      	adds	r4, r7, #7
 8005844:	0018      	movs	r0, r3
 8005846:	f7ff fb5d 	bl	8004f04 <AT_Send>
 800584a:	0003      	movs	r3, r0
 800584c:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800584e:	1dfb      	adds	r3, r7, #7
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d100      	bne.n	8005858 <ESP_Upkeep+0x390>
 8005856:	e284      	b.n	8005d62 <ESP_Upkeep+0x89a>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005858:	4b01      	ldr	r3, [pc, #4]	@ (8005860 <ESP_Upkeep+0x398>)
 800585a:	2203      	movs	r2, #3
 800585c:	701a      	strb	r2, [r3, #0]
        }
    break;
 800585e:	e280      	b.n	8005d62 <ESP_Upkeep+0x89a>
 8005860:	20000028 	.word	0x20000028
 8005864:	20000002 	.word	0x20000002
 8005868:	20000a2a 	.word	0x20000a2a
 800586c:	20000a2b 	.word	0x20000a2b
 8005870:	20000a29 	.word	0x20000a29
 8005874:	080239f0 	.word	0x080239f0
 8005878:	080230b8 	.word	0x080230b8
 800587c:	08025310 	.word	0x08025310
 8005880:	2000054c 	.word	0x2000054c
 8005884:	50000800 	.word	0x50000800
 8005888:	50001c00 	.word	0x50001c00
 800588c:	20000a1c 	.word	0x20000a1c
 8005890:	2000044c 	.word	0x2000044c
 8005894:	20000b3c 	.word	0x20000b3c
 8005898:	2000002a 	.word	0x2000002a
 800589c:	20000a0c 	.word	0x20000a0c
 80058a0:	2000054d 	.word	0x2000054d
 80058a4:	2000054e 	.word	0x2000054e
 80058a8:	20000004 	.word	0x20000004
 80058ac:	20000a16 	.word	0x20000a16
 80058b0:	20000550 	.word	0x20000550
 80058b4:	20000014 	.word	0x20000014
 80058b8:	20000551 	.word	0x20000551
 80058bc:	20000010 	.word	0x20000010
 80058c0:	20000001 	.word	0x20000001
 80058c4:	2000000c 	.word	0x2000000c
 80058c8:	20000560 	.word	0x20000560
 80058cc:	2000054f 	.word	0x2000054f
 80058d0:	2000001c 	.word	0x2000001c
 80058d4:	08023a1c 	.word	0x08023a1c
 80058d8:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 80058dc:	4bc0      	ldr	r3, [pc, #768]	@ (8005be0 <ESP_Upkeep+0x718>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	0018      	movs	r0, r3
 80058e2:	f008 fd33 	bl	800e34c <TimestampIsReached>
 80058e6:	1e03      	subs	r3, r0, #0
 80058e8:	d100      	bne.n	80058ec <ESP_Upkeep+0x424>
 80058ea:	e23c      	b.n	8005d66 <ESP_Upkeep+0x89e>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80058ec:	4bbd      	ldr	r3, [pc, #756]	@ (8005be4 <ESP_Upkeep+0x71c>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	0018      	movs	r0, r3
 80058f2:	f7ff f9c5 	bl	8004c80 <DMA_ProcessBuffer>
 80058f6:	0003      	movs	r3, r0
 80058f8:	001a      	movs	r2, r3
 80058fa:	4bbb      	ldr	r3, [pc, #748]	@ (8005be8 <ESP_Upkeep+0x720>)
 80058fc:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80058fe:	4bba      	ldr	r3, [pc, #744]	@ (8005be8 <ESP_Upkeep+0x720>)
 8005900:	781a      	ldrb	r2, [r3, #0]
 8005902:	4bb8      	ldr	r3, [pc, #736]	@ (8005be4 <ESP_Upkeep+0x71c>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	1d7c      	adds	r4, r7, #5
 8005908:	0019      	movs	r1, r3
 800590a:	0010      	movs	r0, r2
 800590c:	f7ff fab8 	bl	8004e80 <ATCompare>
 8005910:	0003      	movs	r3, r0
 8005912:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005914:	4bb4      	ldr	r3, [pc, #720]	@ (8005be8 <ESP_Upkeep+0x720>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d139      	bne.n	8005990 <ESP_Upkeep+0x4c8>
          if(ATCommand == AT_SENDDATA){
 800591c:	4bb3      	ldr	r3, [pc, #716]	@ (8005bec <ESP_Upkeep+0x724>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b0f      	cmp	r3, #15
 8005922:	d108      	bne.n	8005936 <ESP_Upkeep+0x46e>
            ATCommand = AT_HTTPCPOST;
 8005924:	4bb1      	ldr	r3, [pc, #708]	@ (8005bec <ESP_Upkeep+0x724>)
 8005926:	220e      	movs	r2, #14
 8005928:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800592a:	4bae      	ldr	r3, [pc, #696]	@ (8005be4 <ESP_Upkeep+0x71c>)
 800592c:	2202      	movs	r2, #2
 800592e:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005930:	4baf      	ldr	r3, [pc, #700]	@ (8005bf0 <ESP_Upkeep+0x728>)
 8005932:	2201      	movs	r2, #1
 8005934:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005936:	4baf      	ldr	r3, [pc, #700]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005938:	2204      	movs	r2, #4
 800593a:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 800593c:	4bae      	ldr	r3, [pc, #696]	@ (8005bf8 <ESP_Upkeep+0x730>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	3301      	adds	r3, #1
 8005942:	b2da      	uxtb	r2, r3
 8005944:	4bac      	ldr	r3, [pc, #688]	@ (8005bf8 <ESP_Upkeep+0x730>)
 8005946:	701a      	strb	r2, [r3, #0]
          if (errorcntr >= ESP_MAX_RETRANSMITIONS) {
 8005948:	4bab      	ldr	r3, [pc, #684]	@ (8005bf8 <ESP_Upkeep+0x730>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b02      	cmp	r3, #2
 800594e:	d91f      	bls.n	8005990 <ESP_Upkeep+0x4c8>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005950:	f009 f9a8 	bl	800eca4 <HAL_GetTick>
 8005954:	0003      	movs	r3, r0
 8005956:	4aa9      	ldr	r2, [pc, #676]	@ (8005bfc <ESP_Upkeep+0x734>)
 8005958:	189a      	adds	r2, r3, r2
 800595a:	4ba1      	ldr	r3, [pc, #644]	@ (8005be0 <ESP_Upkeep+0x718>)
 800595c:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 800595e:	4ba8      	ldr	r3, [pc, #672]	@ (8005c00 <ESP_Upkeep+0x738>)
 8005960:	2201      	movs	r2, #1
 8005962:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 8005964:	f007 fd84 	bl	800d470 <ResetESPIndicator>
            clearDMABuffer();
 8005968:	f7ff fa7c 	bl	8004e64 <clearDMABuffer>
            stop = HAL_GetTick();
 800596c:	f009 f99a 	bl	800eca4 <HAL_GetTick>
 8005970:	0002      	movs	r2, r0
 8005972:	4ba4      	ldr	r3, [pc, #656]	@ (8005c04 <ESP_Upkeep+0x73c>)
 8005974:	601a      	str	r2, [r3, #0]
            Error("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8005976:	4ba3      	ldr	r3, [pc, #652]	@ (8005c04 <ESP_Upkeep+0x73c>)
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	4ba3      	ldr	r3, [pc, #652]	@ (8005c08 <ESP_Upkeep+0x740>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	4aa2      	ldr	r2, [pc, #648]	@ (8005c0c <ESP_Upkeep+0x744>)
 8005982:	49a3      	ldr	r1, [pc, #652]	@ (8005c10 <ESP_Upkeep+0x748>)
 8005984:	2001      	movs	r0, #1
 8005986:	f008 fd37 	bl	800e3f8 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 800598a:	4b9a      	ldr	r3, [pc, #616]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 800598c:	220d      	movs	r2, #13
 800598e:	701a      	strb	r2, [r3, #0]
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005990:	4b95      	ldr	r3, [pc, #596]	@ (8005be8 <ESP_Upkeep+0x720>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b03      	cmp	r3, #3
 8005996:	d106      	bne.n	80059a6 <ESP_Upkeep+0x4de>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005998:	f009 f984 	bl	800eca4 <HAL_GetTick>
 800599c:	0003      	movs	r3, r0
 800599e:	330a      	adds	r3, #10
 80059a0:	001a      	movs	r2, r3
 80059a2:	4b8f      	ldr	r3, [pc, #572]	@ (8005be0 <ESP_Upkeep+0x718>)
 80059a4:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80059a6:	4b90      	ldr	r3, [pc, #576]	@ (8005be8 <ESP_Upkeep+0x720>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b0a      	cmp	r3, #10
 80059ac:	d106      	bne.n	80059bc <ESP_Upkeep+0x4f4>
          ESPTimeStamp = HAL_GetTick() + 10;
 80059ae:	f009 f979 	bl	800eca4 <HAL_GetTick>
 80059b2:	0003      	movs	r3, r0
 80059b4:	330a      	adds	r3, #10
 80059b6:	001a      	movs	r2, r3
 80059b8:	4b89      	ldr	r3, [pc, #548]	@ (8005be0 <ESP_Upkeep+0x718>)
 80059ba:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80059bc:	4b8a      	ldr	r3, [pc, #552]	@ (8005be8 <ESP_Upkeep+0x720>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b06      	cmp	r3, #6
 80059c2:	d146      	bne.n	8005a52 <ESP_Upkeep+0x58a>
          timeoutcntr++;
 80059c4:	4b93      	ldr	r3, [pc, #588]	@ (8005c14 <ESP_Upkeep+0x74c>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	3301      	adds	r3, #1
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	4b91      	ldr	r3, [pc, #580]	@ (8005c14 <ESP_Upkeep+0x74c>)
 80059ce:	701a      	strb	r2, [r3, #0]
          Error("In ESP_STATE_WAIT_FOR_REPLY: RECEIVE_STATUS_TIMEOUT reached");
 80059d0:	4a91      	ldr	r2, [pc, #580]	@ (8005c18 <ESP_Upkeep+0x750>)
 80059d2:	4b8f      	ldr	r3, [pc, #572]	@ (8005c10 <ESP_Upkeep+0x748>)
 80059d4:	0019      	movs	r1, r3
 80059d6:	2001      	movs	r0, #1
 80059d8:	f008 fd0e 	bl	800e3f8 <CreateLine>
          if (timeoutcntr >= ESP_MAX_RETRANSMITIONS) {
 80059dc:	4b8d      	ldr	r3, [pc, #564]	@ (8005c14 <ESP_Upkeep+0x74c>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d91f      	bls.n	8005a24 <ESP_Upkeep+0x55c>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80059e4:	f009 f95e 	bl	800eca4 <HAL_GetTick>
 80059e8:	0003      	movs	r3, r0
 80059ea:	4a84      	ldr	r2, [pc, #528]	@ (8005bfc <ESP_Upkeep+0x734>)
 80059ec:	189a      	adds	r2, r3, r2
 80059ee:	4b7c      	ldr	r3, [pc, #496]	@ (8005be0 <ESP_Upkeep+0x718>)
 80059f0:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 80059f2:	4b83      	ldr	r3, [pc, #524]	@ (8005c00 <ESP_Upkeep+0x738>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 80059f8:	f007 fd3a 	bl	800d470 <ResetESPIndicator>
            clearDMABuffer();
 80059fc:	f7ff fa32 	bl	8004e64 <clearDMABuffer>
            stop = HAL_GetTick();
 8005a00:	f009 f950 	bl	800eca4 <HAL_GetTick>
 8005a04:	0002      	movs	r2, r0
 8005a06:	4b7f      	ldr	r3, [pc, #508]	@ (8005c04 <ESP_Upkeep+0x73c>)
 8005a08:	601a      	str	r2, [r3, #0]
            Error("ESP to many timeouts, terminated after %lu ms", (stop-start));
 8005a0a:	4b7e      	ldr	r3, [pc, #504]	@ (8005c04 <ESP_Upkeep+0x73c>)
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	4b7e      	ldr	r3, [pc, #504]	@ (8005c08 <ESP_Upkeep+0x740>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	4a81      	ldr	r2, [pc, #516]	@ (8005c1c <ESP_Upkeep+0x754>)
 8005a16:	497e      	ldr	r1, [pc, #504]	@ (8005c10 <ESP_Upkeep+0x748>)
 8005a18:	2001      	movs	r0, #1
 8005a1a:	f008 fced 	bl	800e3f8 <CreateLine>
            // TODO hier gaat iets fout, de verzending herstart niet meer
            // in log alleen nog D [01039053] EspState: 4 ATcmd: 20 Mode: 2 ATExp: 0
            EspState = ESP_STATE_DEINIT;
 8005a1e:	4b75      	ldr	r3, [pc, #468]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005a20:	220d      	movs	r2, #13
 8005a22:	701a      	strb	r2, [r3, #0]
            // mogelijke oplossing door deze twee regels te verwijderen
            // ATCommand = AT_END;
            // ATExpectation = RECEIVE_EXPECTATION_OK;
          }
          if(ATCommand != AT_SENDDATA){
 8005a24:	4b71      	ldr	r3, [pc, #452]	@ (8005bec <ESP_Upkeep+0x724>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b0f      	cmp	r3, #15
 8005a2a:	d003      	beq.n	8005a34 <ESP_Upkeep+0x56c>
            EspState = ESP_STATE_SEND;
 8005a2c:	4b71      	ldr	r3, [pc, #452]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005a2e:	2204      	movs	r2, #4
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	e00e      	b.n	8005a52 <ESP_Upkeep+0x58a>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005a34:	4b6d      	ldr	r3, [pc, #436]	@ (8005bec <ESP_Upkeep+0x724>)
 8005a36:	220e      	movs	r2, #14
 8005a38:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005a3a:	4b6d      	ldr	r3, [pc, #436]	@ (8005bf0 <ESP_Upkeep+0x728>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	4b6b      	ldr	r3, [pc, #428]	@ (8005bf0 <ESP_Upkeep+0x728>)
 8005a44:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005a46:	4b67      	ldr	r3, [pc, #412]	@ (8005be4 <ESP_Upkeep+0x71c>)
 8005a48:	2202      	movs	r2, #2
 8005a4a:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005a4c:	4b69      	ldr	r3, [pc, #420]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005a4e:	2204      	movs	r2, #4
 8005a50:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005a52:	1d7b      	adds	r3, r7, #5
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d100      	bne.n	8005a5c <ESP_Upkeep+0x594>
 8005a5a:	e184      	b.n	8005d66 <ESP_Upkeep+0x89e>
          EspState = ESP_STATE_NEXT_AT;
 8005a5c:	4b65      	ldr	r3, [pc, #404]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005a5e:	2205      	movs	r2, #5
 8005a60:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005a62:	e180      	b.n	8005d66 <ESP_Upkeep+0x89e>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8005a64:	4b62      	ldr	r3, [pc, #392]	@ (8005bf0 <ESP_Upkeep+0x728>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	4b60      	ldr	r3, [pc, #384]	@ (8005bf0 <ESP_Upkeep+0x728>)
 8005a6e:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005a70:	4b5f      	ldr	r3, [pc, #380]	@ (8005bf0 <ESP_Upkeep+0x728>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	001a      	movs	r2, r3
 8005a76:	4b6a      	ldr	r3, [pc, #424]	@ (8005c20 <ESP_Upkeep+0x758>)
 8005a78:	5c9a      	ldrb	r2, [r3, r2]
 8005a7a:	4b5c      	ldr	r3, [pc, #368]	@ (8005bec <ESP_Upkeep+0x724>)
 8005a7c:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005a7e:	4b5b      	ldr	r3, [pc, #364]	@ (8005bec <ESP_Upkeep+0x724>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d102      	bne.n	8005a8c <ESP_Upkeep+0x5c4>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005a86:	4b57      	ldr	r3, [pc, #348]	@ (8005be4 <ESP_Upkeep+0x71c>)
 8005a88:	2201      	movs	r2, #1
 8005a8a:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005a8c:	4b57      	ldr	r3, [pc, #348]	@ (8005bec <ESP_Upkeep+0x724>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b0e      	cmp	r3, #14
 8005a92:	d102      	bne.n	8005a9a <ESP_Upkeep+0x5d2>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005a94:	4b53      	ldr	r3, [pc, #332]	@ (8005be4 <ESP_Upkeep+0x71c>)
 8005a96:	2202      	movs	r2, #2
 8005a98:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005a9a:	4b54      	ldr	r3, [pc, #336]	@ (8005bec <ESP_Upkeep+0x724>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b0e      	cmp	r3, #14
 8005aa0:	d006      	beq.n	8005ab0 <ESP_Upkeep+0x5e8>
 8005aa2:	4b52      	ldr	r3, [pc, #328]	@ (8005bec <ESP_Upkeep+0x724>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d002      	beq.n	8005ab0 <ESP_Upkeep+0x5e8>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005aaa:	4b4e      	ldr	r3, [pc, #312]	@ (8005be4 <ESP_Upkeep+0x71c>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 8005ab0:	4b4e      	ldr	r3, [pc, #312]	@ (8005bec <ESP_Upkeep+0x724>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b11      	cmp	r3, #17
 8005ab6:	d102      	bne.n	8005abe <ESP_Upkeep+0x5f6>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005ab8:	4b4a      	ldr	r3, [pc, #296]	@ (8005be4 <ESP_Upkeep+0x71c>)
 8005aba:	2205      	movs	r2, #5
 8005abc:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005abe:	4b4d      	ldr	r3, [pc, #308]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8005ac4:	4b49      	ldr	r3, [pc, #292]	@ (8005bec <ESP_Upkeep+0x724>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b14      	cmp	r3, #20
 8005aca:	d000      	beq.n	8005ace <ESP_Upkeep+0x606>
 8005acc:	e14d      	b.n	8005d6a <ESP_Upkeep+0x8a2>
        if(Mode == AT_MODE_SEND){
 8005ace:	4b55      	ldr	r3, [pc, #340]	@ (8005c24 <ESP_Upkeep+0x75c>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d124      	bne.n	8005b20 <ESP_Upkeep+0x658>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005ad6:	f009 f8e5 	bl	800eca4 <HAL_GetTick>
 8005ada:	0003      	movs	r3, r0
 8005adc:	4a47      	ldr	r2, [pc, #284]	@ (8005bfc <ESP_Upkeep+0x734>)
 8005ade:	189a      	adds	r2, r3, r2
 8005ae0:	4b3f      	ldr	r3, [pc, #252]	@ (8005be0 <ESP_Upkeep+0x718>)
 8005ae2:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 8005ae4:	f007 fcc4 	bl	800d470 <ResetESPIndicator>
          clearDMABuffer();
 8005ae8:	f7ff f9bc 	bl	8004e64 <clearDMABuffer>
          stop = HAL_GetTick();
 8005aec:	f009 f8da 	bl	800eca4 <HAL_GetTick>
 8005af0:	0002      	movs	r2, r0
 8005af2:	4b44      	ldr	r3, [pc, #272]	@ (8005c04 <ESP_Upkeep+0x73c>)
 8005af4:	601a      	str	r2, [r3, #0]
          Info("Message send in %lu ms", (stop-start));
 8005af6:	4b43      	ldr	r3, [pc, #268]	@ (8005c04 <ESP_Upkeep+0x73c>)
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	4b43      	ldr	r3, [pc, #268]	@ (8005c08 <ESP_Upkeep+0x740>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	4a49      	ldr	r2, [pc, #292]	@ (8005c28 <ESP_Upkeep+0x760>)
 8005b02:	494a      	ldr	r1, [pc, #296]	@ (8005c2c <ESP_Upkeep+0x764>)
 8005b04:	2002      	movs	r0, #2
 8005b06:	f008 fc77 	bl	800e3f8 <CreateLine>
          ResetdBAmax();
 8005b0a:	f002 fedd 	bl	80088c8 <ResetdBAmax>
          showTime();
 8005b0e:	f000 fcc1 	bl	8006494 <showTime>
          ESPTransmitDone = true;
 8005b12:	4b3b      	ldr	r3, [pc, #236]	@ (8005c00 <ESP_Upkeep+0x738>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 8005b18:	4b36      	ldr	r3, [pc, #216]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005b1a:	220d      	movs	r2, #13
 8005b1c:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005b1e:	e124      	b.n	8005d6a <ESP_Upkeep+0x8a2>
        else if (Mode == AT_MODE_GETTIME) {
 8005b20:	4b40      	ldr	r3, [pc, #256]	@ (8005c24 <ESP_Upkeep+0x75c>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b05      	cmp	r3, #5
 8005b26:	d12e      	bne.n	8005b86 <ESP_Upkeep+0x6be>
            setTime = false;
 8005b28:	4b41      	ldr	r3, [pc, #260]	@ (8005c30 <ESP_Upkeep+0x768>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP;
 8005b2e:	f009 f8b9 	bl	800eca4 <HAL_GetTick>
 8005b32:	0003      	movs	r3, r0
 8005b34:	4a3f      	ldr	r2, [pc, #252]	@ (8005c34 <ESP_Upkeep+0x76c>)
 8005b36:	189a      	adds	r2, r3, r2
 8005b38:	4b3f      	ldr	r3, [pc, #252]	@ (8005c38 <ESP_Upkeep+0x770>)
 8005b3a:	601a      	str	r2, [r3, #0]
            Info("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005b3c:	4b3e      	ldr	r3, [pc, #248]	@ (8005c38 <ESP_Upkeep+0x770>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a3e      	ldr	r2, [pc, #248]	@ (8005c3c <ESP_Upkeep+0x774>)
 8005b42:	493a      	ldr	r1, [pc, #232]	@ (8005c2c <ESP_Upkeep+0x764>)
 8005b44:	2002      	movs	r0, #2
 8005b46:	f008 fc57 	bl	800e3f8 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8005c40 <ESP_Upkeep+0x778>)
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b24      	ldr	r3, [pc, #144]	@ (8005be0 <ESP_Upkeep+0x718>)
 8005b50:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 8005b52:	f007 fc8d 	bl	800d470 <ResetESPIndicator>
            clearDMABuffer();
 8005b56:	f7ff f985 	bl	8004e64 <clearDMABuffer>
            stop = HAL_GetTick();
 8005b5a:	f009 f8a3 	bl	800eca4 <HAL_GetTick>
 8005b5e:	0002      	movs	r2, r0
 8005b60:	4b28      	ldr	r3, [pc, #160]	@ (8005c04 <ESP_Upkeep+0x73c>)
 8005b62:	601a      	str	r2, [r3, #0]
            Info("Message time update in %lu ms", (stop-start));
 8005b64:	4b27      	ldr	r3, [pc, #156]	@ (8005c04 <ESP_Upkeep+0x73c>)
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	4b27      	ldr	r3, [pc, #156]	@ (8005c08 <ESP_Upkeep+0x740>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	4a35      	ldr	r2, [pc, #212]	@ (8005c44 <ESP_Upkeep+0x77c>)
 8005b70:	492e      	ldr	r1, [pc, #184]	@ (8005c2c <ESP_Upkeep+0x764>)
 8005b72:	2002      	movs	r0, #2
 8005b74:	f008 fc40 	bl	800e3f8 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005b78:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005b7a:	220d      	movs	r2, #13
 8005b7c:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005b7e:	4b29      	ldr	r3, [pc, #164]	@ (8005c24 <ESP_Upkeep+0x75c>)
 8005b80:	2202      	movs	r2, #2
 8005b82:	701a      	strb	r2, [r3, #0]
    break;
 8005b84:	e0f1      	b.n	8005d6a <ESP_Upkeep+0x8a2>
          EspState = ESP_STATE_RESET;
 8005b86:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005b88:	2209      	movs	r2, #9
 8005b8a:	701a      	strb	r2, [r3, #0]
    break;
 8005b8c:	e0ed      	b.n	8005d6a <ESP_Upkeep+0x8a2>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8005b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8005c48 <ESP_Upkeep+0x780>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005b94:	4b2d      	ldr	r3, [pc, #180]	@ (8005c4c <ESP_Upkeep+0x784>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	2101      	movs	r1, #1
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	f00a fb13 	bl	80101c6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005ba0:	2001      	movs	r0, #1
 8005ba2:	f009 f889 	bl	800ecb8 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005ba6:	2380      	movs	r3, #128	@ 0x80
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	4829      	ldr	r0, [pc, #164]	@ (8005c50 <ESP_Upkeep+0x788>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	0019      	movs	r1, r3
 8005bb0:	f00a fb09 	bl	80101c6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005bb4:	2001      	movs	r0, #1
 8005bb6:	f009 f87f 	bl	800ecb8 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005bba:	4b24      	ldr	r3, [pc, #144]	@ (8005c4c <ESP_Upkeep+0x784>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2102      	movs	r1, #2
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	f00a fb00 	bl	80101c6 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf4 <ESP_Upkeep+0x72c>)
 8005bc8:	2209      	movs	r2, #9
 8005bca:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8005bcc:	2001      	movs	r0, #1
 8005bce:	f009 f873 	bl	800ecb8 <HAL_Delay>
      errorcntr = 0;
 8005bd2:	4b09      	ldr	r3, [pc, #36]	@ (8005bf8 <ESP_Upkeep+0x730>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	701a      	strb	r2, [r3, #0]
      timeoutcntr = 0;
 8005bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8005c14 <ESP_Upkeep+0x74c>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	701a      	strb	r2, [r3, #0]
      break;
 8005bde:	e0c7      	b.n	8005d70 <ESP_Upkeep+0x8a8>
 8005be0:	20000a1c 	.word	0x20000a1c
 8005be4:	20000a29 	.word	0x20000a29
 8005be8:	2000002a 	.word	0x2000002a
 8005bec:	20000a2a 	.word	0x20000a2a
 8005bf0:	20000a16 	.word	0x20000a16
 8005bf4:	20000028 	.word	0x20000028
 8005bf8:	20000a17 	.word	0x20000a17
 8005bfc:	0003a980 	.word	0x0003a980
 8005c00:	20000553 	.word	0x20000553
 8005c04:	20000564 	.word	0x20000564
 8005c08:	20000560 	.word	0x20000560
 8005c0c:	08023a4c 	.word	0x08023a4c
 8005c10:	080230dc 	.word	0x080230dc
 8005c14:	20000a18 	.word	0x20000a18
 8005c18:	08023a80 	.word	0x08023a80
 8005c1c:	08023abc 	.word	0x08023abc
 8005c20:	20000a0c 	.word	0x20000a0c
 8005c24:	20000a2b 	.word	0x20000a2b
 8005c28:	08023aec 	.word	0x08023aec
 8005c2c:	08023b04 	.word	0x08023b04
 8005c30:	20000001 	.word	0x20000001
 8005c34:	047e7c4f 	.word	0x047e7c4f
 8005c38:	20000a20 	.word	0x20000a20
 8005c3c:	08023b08 	.word	0x08023b08
 8005c40:	20000a24 	.word	0x20000a24
 8005c44:	08023b4c 	.word	0x08023b4c
 8005c48:	2000054c 	.word	0x2000054c
 8005c4c:	50001c00 	.word	0x50001c00
 8005c50:	50000800 	.word	0x50000800

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005c54:	4b49      	ldr	r3, [pc, #292]	@ (8005d7c <ESP_Upkeep+0x8b4>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	0018      	movs	r0, r3
 8005c5a:	f008 fb77 	bl	800e34c <TimestampIsReached>
 8005c5e:	1e03      	subs	r3, r0, #0
 8005c60:	d103      	bne.n	8005c6a <ESP_Upkeep+0x7a2>
 8005c62:	4b47      	ldr	r3, [pc, #284]	@ (8005d80 <ESP_Upkeep+0x8b8>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d038      	beq.n	8005cdc <ESP_Upkeep+0x814>
        ESPTransmitDone = false;
 8005c6a:	4b46      	ldr	r3, [pc, #280]	@ (8005d84 <ESP_Upkeep+0x8bc>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_INIT){
 8005c70:	4b45      	ldr	r3, [pc, #276]	@ (8005d88 <ESP_Upkeep+0x8c0>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d105      	bne.n	8005c84 <ESP_Upkeep+0x7bc>
          InitIsDone = true;
 8005c78:	4b44      	ldr	r3, [pc, #272]	@ (8005d8c <ESP_Upkeep+0x8c4>)
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005c7e:	4b44      	ldr	r3, [pc, #272]	@ (8005d90 <ESP_Upkeep+0x8c8>)
 8005c80:	220b      	movs	r2, #11
 8005c82:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005c84:	4b40      	ldr	r3, [pc, #256]	@ (8005d88 <ESP_Upkeep+0x8c0>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d108      	bne.n	8005c9e <ESP_Upkeep+0x7d6>
          ConnectionMade = true;
 8005c8c:	4b41      	ldr	r3, [pc, #260]	@ (8005d94 <ESP_Upkeep+0x8cc>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005c92:	4b41      	ldr	r3, [pc, #260]	@ (8005d98 <ESP_Upkeep+0x8d0>)
 8005c94:	2201      	movs	r2, #1
 8005c96:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005c98:	4b3d      	ldr	r3, [pc, #244]	@ (8005d90 <ESP_Upkeep+0x8c8>)
 8005c9a:	220b      	movs	r2, #11
 8005c9c:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005c9e:	4b3a      	ldr	r3, [pc, #232]	@ (8005d88 <ESP_Upkeep+0x8c0>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d102      	bne.n	8005cac <ESP_Upkeep+0x7e4>
          EspState = ESP_STATE_INIT;
 8005ca6:	4b3a      	ldr	r3, [pc, #232]	@ (8005d90 <ESP_Upkeep+0x8c8>)
 8005ca8:	2202      	movs	r2, #2
 8005caa:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005cac:	4b36      	ldr	r3, [pc, #216]	@ (8005d88 <ESP_Upkeep+0x8c0>)
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d108      	bne.n	8005cc6 <ESP_Upkeep+0x7fe>
          EspState = ESP_STATE_CONFIG;
 8005cb4:	4b36      	ldr	r3, [pc, #216]	@ (8005d90 <ESP_Upkeep+0x8c8>)
 8005cb6:	220e      	movs	r2, #14
 8005cb8:	701a      	strb	r2, [r3, #0]
          Info("Do nothing until reset");
 8005cba:	4a38      	ldr	r2, [pc, #224]	@ (8005d9c <ESP_Upkeep+0x8d4>)
 8005cbc:	4b38      	ldr	r3, [pc, #224]	@ (8005da0 <ESP_Upkeep+0x8d8>)
 8005cbe:	0019      	movs	r1, r3
 8005cc0:	2002      	movs	r0, #2
 8005cc2:	f008 fb99 	bl	800e3f8 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 8005cc6:	4b30      	ldr	r3, [pc, #192]	@ (8005d88 <ESP_Upkeep+0x8c0>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d11f      	bne.n	8005d0e <ESP_Upkeep+0x846>
          EspState = ESP_STATE_MODE_SELECT;
 8005cce:	4b30      	ldr	r3, [pc, #192]	@ (8005d90 <ESP_Upkeep+0x8c8>)
 8005cd0:	220b      	movs	r2, #11
 8005cd2:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005cd4:	4b33      	ldr	r3, [pc, #204]	@ (8005da4 <ESP_Upkeep+0x8dc>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 8005cda:	e018      	b.n	8005d0e <ESP_Upkeep+0x846>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005cdc:	4b32      	ldr	r3, [pc, #200]	@ (8005da8 <ESP_Upkeep+0x8e0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f008 fb33 	bl	800e34c <TimestampIsReached>
 8005ce6:	1e03      	subs	r3, r0, #0
 8005ce8:	d041      	beq.n	8005d6e <ESP_Upkeep+0x8a6>
        if(Mode == AT_MODE_SEND ) {
 8005cea:	4b27      	ldr	r3, [pc, #156]	@ (8005d88 <ESP_Upkeep+0x8c0>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d13d      	bne.n	8005d6e <ESP_Upkeep+0x8a6>
            Mode = AT_MODE_GETTIME;
 8005cf2:	4b25      	ldr	r3, [pc, #148]	@ (8005d88 <ESP_Upkeep+0x8c0>)
 8005cf4:	2205      	movs	r2, #5
 8005cf6:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005cf8:	4b25      	ldr	r3, [pc, #148]	@ (8005d90 <ESP_Upkeep+0x8c8>)
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 8005cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8005d7c <ESP_Upkeep+0x8b4>)
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4b2a      	ldr	r3, [pc, #168]	@ (8005dac <ESP_Upkeep+0x8e4>)
 8005d04:	601a      	str	r2, [r3, #0]
         setTime = true;
 8005d06:	4b2a      	ldr	r3, [pc, #168]	@ (8005db0 <ESP_Upkeep+0x8e8>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	701a      	strb	r2, [r3, #0]
 //        Debug("setTime to true");
        }
      }
      break;
 8005d0c:	e02f      	b.n	8005d6e <ESP_Upkeep+0x8a6>
 8005d0e:	e02e      	b.n	8005d6e <ESP_Upkeep+0x8a6>

    case ESP_STATE_CONFIG:
      Info("Do nothing until reset");
 8005d10:	4a22      	ldr	r2, [pc, #136]	@ (8005d9c <ESP_Upkeep+0x8d4>)
 8005d12:	4b23      	ldr	r3, [pc, #140]	@ (8005da0 <ESP_Upkeep+0x8d8>)
 8005d14:	0019      	movs	r1, r3
 8005d16:	2002      	movs	r0, #2
 8005d18:	f008 fb6e 	bl	800e3f8 <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 8005d1c:	f017 f802 	bl	801cd24 <GetUsbRxPointer>
 8005d20:	0003      	movs	r3, r0
 8005d22:	0018      	movs	r0, r3
 8005d24:	f000 f8be 	bl	8005ea4 <Process_PC_Config>
      break;
 8005d28:	e022      	b.n	8005d70 <ESP_Upkeep+0x8a8>

    case ESP_STATE_ERROR:
      // Handle error state
      Error("ESP Error occurred");
 8005d2a:	4a22      	ldr	r2, [pc, #136]	@ (8005db4 <ESP_Upkeep+0x8ec>)
 8005d2c:	4b22      	ldr	r3, [pc, #136]	@ (8005db8 <ESP_Upkeep+0x8f0>)
 8005d2e:	0019      	movs	r1, r3
 8005d30:	2001      	movs	r0, #1
 8005d32:	f008 fb61 	bl	800e3f8 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005d36:	4b16      	ldr	r3, [pc, #88]	@ (8005d90 <ESP_Upkeep+0x8c8>)
 8005d38:	2202      	movs	r2, #2
 8005d3a:	701a      	strb	r2, [r3, #0]
      break;
 8005d3c:	e018      	b.n	8005d70 <ESP_Upkeep+0x8a8>

    default:
      // Handle unexpected state
      Error("Something unknown went wrong with the ESP_STATE");
 8005d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8005dbc <ESP_Upkeep+0x8f4>)
 8005d40:	4b1d      	ldr	r3, [pc, #116]	@ (8005db8 <ESP_Upkeep+0x8f0>)
 8005d42:	0019      	movs	r1, r3
 8005d44:	2001      	movs	r0, #1
 8005d46:	f008 fb57 	bl	800e3f8 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005d4a:	4b11      	ldr	r3, [pc, #68]	@ (8005d90 <ESP_Upkeep+0x8c8>)
 8005d4c:	2207      	movs	r2, #7
 8005d4e:	701a      	strb	r2, [r3, #0]
      break;
 8005d50:	e00e      	b.n	8005d70 <ESP_Upkeep+0x8a8>
      break;
 8005d52:	46c0      	nop			@ (mov r8, r8)
 8005d54:	e00c      	b.n	8005d70 <ESP_Upkeep+0x8a8>
      break;
 8005d56:	46c0      	nop			@ (mov r8, r8)
 8005d58:	e00a      	b.n	8005d70 <ESP_Upkeep+0x8a8>
        break;
 8005d5a:	46c0      	nop			@ (mov r8, r8)
 8005d5c:	e008      	b.n	8005d70 <ESP_Upkeep+0x8a8>
    break;
 8005d5e:	46c0      	nop			@ (mov r8, r8)
 8005d60:	e006      	b.n	8005d70 <ESP_Upkeep+0x8a8>
    break;
 8005d62:	46c0      	nop			@ (mov r8, r8)
 8005d64:	e004      	b.n	8005d70 <ESP_Upkeep+0x8a8>
      break;
 8005d66:	46c0      	nop			@ (mov r8, r8)
 8005d68:	e002      	b.n	8005d70 <ESP_Upkeep+0x8a8>
    break;
 8005d6a:	46c0      	nop			@ (mov r8, r8)
 8005d6c:	e000      	b.n	8005d70 <ESP_Upkeep+0x8a8>
      break;
 8005d6e:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005d70:	4b07      	ldr	r3, [pc, #28]	@ (8005d90 <ESP_Upkeep+0x8c8>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
}
 8005d74:	0018      	movs	r0, r3
 8005d76:	46bd      	mov	sp, r7
 8005d78:	b002      	add	sp, #8
 8005d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8005d7c:	20000a1c 	.word	0x20000a1c
 8005d80:	2000054f 	.word	0x2000054f
 8005d84:	20000553 	.word	0x20000553
 8005d88:	20000a2b 	.word	0x20000a2b
 8005d8c:	2000054d 	.word	0x2000054d
 8005d90:	20000028 	.word	0x20000028
 8005d94:	20000550 	.word	0x20000550
 8005d98:	20000552 	.word	0x20000552
 8005d9c:	08023b6c 	.word	0x08023b6c
 8005da0:	08023b04 	.word	0x08023b04
 8005da4:	20000551 	.word	0x20000551
 8005da8:	20000a20 	.word	0x20000a20
 8005dac:	20000a24 	.word	0x20000a24
 8005db0:	20000001 	.word	0x20000001
 8005db4:	08023b84 	.word	0x08023b84
 8005db8:	080230dc 	.word	0x080230dc
 8005dbc:	08023b98 	.word	0x08023b98

08005dc0 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005dc8:	4b09      	ldr	r3, [pc, #36]	@ (8005df0 <I2CSensors_Init+0x30>)
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	601a      	str	r2, [r3, #0]
//    HT_Init(ReadI2C, WriteI2C);
    HIDS_Init(ReadI2C, WriteI2C);
 8005dce:	4a09      	ldr	r2, [pc, #36]	@ (8005df4 <I2CSensors_Init+0x34>)
 8005dd0:	4b09      	ldr	r3, [pc, #36]	@ (8005df8 <I2CSensors_Init+0x38>)
 8005dd2:	0011      	movs	r1, r2
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	f008 fc73 	bl	800e6c0 <HIDS_Init>
//    Gas_Init(ReadI2C, WriteI2C);
    SGP_Init(ReadI2C, WriteI2C);
 8005dda:	4a06      	ldr	r2, [pc, #24]	@ (8005df4 <I2CSensors_Init+0x34>)
 8005ddc:	4b06      	ldr	r3, [pc, #24]	@ (8005df8 <I2CSensors_Init+0x38>)
 8005dde:	0011      	movs	r1, r2
 8005de0:	0018      	movs	r0, r3
 8005de2:	f005 fc5b 	bl	800b69c <SGP_Init>
}
 8005de6:	46c0      	nop			@ (mov r8, r8)
 8005de8:	46bd      	mov	sp, r7
 8005dea:	b002      	add	sp, #8
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	46c0      	nop			@ (mov r8, r8)
 8005df0:	20000b40 	.word	0x20000b40
 8005df4:	08005e51 	.word	0x08005e51
 8005df8:	08005dfd 	.word	0x08005dfd

08005dfc <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005dfc:	b5b0      	push	{r4, r5, r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6039      	str	r1, [r7, #0]
 8005e04:	0011      	movs	r1, r2
 8005e06:	1dfb      	adds	r3, r7, #7
 8005e08:	1c02      	adds	r2, r0, #0
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	1dbb      	adds	r3, r7, #6
 8005e0e:	1c0a      	adds	r2, r1, #0
 8005e10:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005e12:	4b0e      	ldr	r3, [pc, #56]	@ (8005e4c <ReadI2C+0x50>)
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	1dfb      	adds	r3, r7, #7
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	18db      	adds	r3, r3, r3
 8005e1e:	b299      	uxth	r1, r3
 8005e20:	1dbb      	adds	r3, r7, #6
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	250f      	movs	r5, #15
 8005e28:	197c      	adds	r4, r7, r5
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	f00a fdb0 	bl	8010990 <HAL_I2C_Master_Receive_DMA>
 8005e30:	0003      	movs	r3, r0
 8005e32:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005e34:	197b      	adds	r3, r7, r5
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <ReadI2C+0x44>
        return false;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	e000      	b.n	8005e42 <ReadI2C+0x46>
    }
    return true;
 8005e40:	2301      	movs	r3, #1
}
 8005e42:	0018      	movs	r0, r3
 8005e44:	46bd      	mov	sp, r7
 8005e46:	b004      	add	sp, #16
 8005e48:	bdb0      	pop	{r4, r5, r7, pc}
 8005e4a:	46c0      	nop			@ (mov r8, r8)
 8005e4c:	20000b40 	.word	0x20000b40

08005e50 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005e50:	b5b0      	push	{r4, r5, r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6039      	str	r1, [r7, #0]
 8005e58:	0011      	movs	r1, r2
 8005e5a:	1dfb      	adds	r3, r7, #7
 8005e5c:	1c02      	adds	r2, r0, #0
 8005e5e:	701a      	strb	r2, [r3, #0]
 8005e60:	1dbb      	adds	r3, r7, #6
 8005e62:	1c0a      	adds	r2, r1, #0
 8005e64:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005e66:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea0 <WriteI2C+0x50>)
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	1dfb      	adds	r3, r7, #7
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	18db      	adds	r3, r3, r3
 8005e72:	b299      	uxth	r1, r3
 8005e74:	1dbb      	adds	r3, r7, #6
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	250f      	movs	r5, #15
 8005e7c:	197c      	adds	r4, r7, r5
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	f00a fc80 	bl	8010784 <HAL_I2C_Master_Transmit_DMA>
 8005e84:	0003      	movs	r3, r0
 8005e86:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005e88:	197b      	adds	r3, r7, r5
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <WriteI2C+0x44>
        return false;
 8005e90:	2300      	movs	r3, #0
 8005e92:	e000      	b.n	8005e96 <WriteI2C+0x46>
    }
    return true;
 8005e94:	2301      	movs	r3, #1
}
 8005e96:	0018      	movs	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	b004      	add	sp, #16
 8005e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e9e:	46c0      	nop			@ (mov r8, r8)
 8005ea0:	20000b40 	.word	0x20000b40

08005ea4 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005ea4:	b590      	push	{r4, r7, lr}
 8005ea6:	b0c3      	sub	sp, #268	@ 0x10c
 8005ea8:	af3e      	add	r7, sp, #248	@ 0xf8
 8005eaa:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005eac:	f016 ff5a 	bl	801cd64 <GetUsbRxDataSize>
 8005eb0:	0003      	movs	r3, r0
 8005eb2:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b05      	cmp	r3, #5
 8005eb8:	d971      	bls.n	8005f9e <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2123      	movs	r1, #35	@ 0x23
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f01a f950 	bl	8020164 <strchr>
 8005ec4:	0003      	movs	r3, r0
 8005ec6:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d065      	beq.n	8005f9a <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	785a      	ldrb	r2, [r3, #1]
 8005ed2:	4b34      	ldr	r3, [pc, #208]	@ (8005fa4 <Process_PC_Config+0x100>)
 8005ed4:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	789a      	ldrb	r2, [r3, #2]
 8005eda:	4b32      	ldr	r3, [pc, #200]	@ (8005fa4 <Process_PC_Config+0x100>)
 8005edc:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005ede:	4b31      	ldr	r3, [pc, #196]	@ (8005fa4 <Process_PC_Config+0x100>)
 8005ee0:	785b      	ldrb	r3, [r3, #1]
 8005ee2:	3305      	adds	r3, #5
 8005ee4:	001a      	movs	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d351      	bcc.n	8005f90 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	1cd9      	adds	r1, r3, #3
 8005ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8005fa4 <Process_PC_Config+0x100>)
 8005ef2:	785b      	ldrb	r3, [r3, #1]
 8005ef4:	001a      	movs	r2, r3
 8005ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8005fa8 <Process_PC_Config+0x104>)
 8005ef8:	0018      	movs	r0, r3
 8005efa:	f01a fa07 	bl	802030c <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005efe:	4b29      	ldr	r3, [pc, #164]	@ (8005fa4 <Process_PC_Config+0x100>)
 8005f00:	785b      	ldrb	r3, [r3, #1]
 8005f02:	3303      	adds	r3, #3
 8005f04:	001a      	movs	r2, r3
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	189b      	adds	r3, r3, r2
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	b21a      	sxth	r2, r3
 8005f10:	4b24      	ldr	r3, [pc, #144]	@ (8005fa4 <Process_PC_Config+0x100>)
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	3304      	adds	r3, #4
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	18cb      	adds	r3, r1, r3
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	b21b      	sxth	r3, r3
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	b21b      	sxth	r3, r3
 8005f22:	b299      	uxth	r1, r3
 8005f24:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa4 <Process_PC_Config+0x100>)
 8005f26:	2381      	movs	r3, #129	@ 0x81
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa4 <Process_PC_Config+0x100>)
 8005f2e:	2381      	movs	r3, #129	@ 0x81
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	5ad4      	ldrh	r4, [r2, r3]
 8005f34:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa4 <Process_PC_Config+0x100>)
 8005f36:	785b      	ldrb	r3, [r3, #1]
 8005f38:	3303      	adds	r3, #3
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	0011      	movs	r1, r2
 8005f40:	0018      	movs	r0, r3
 8005f42:	f000 f975 	bl	8006230 <CRC16_ARC>
 8005f46:	0003      	movs	r3, r0
 8005f48:	429c      	cmp	r4, r3
 8005f4a:	d007      	beq.n	8005f5c <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005f4c:	4b15      	ldr	r3, [pc, #84]	@ (8005fa4 <Process_PC_Config+0x100>)
 8005f4e:	785a      	ldrb	r2, [r3, #1]
 8005f50:	4b15      	ldr	r3, [pc, #84]	@ (8005fa8 <Process_PC_Config+0x104>)
 8005f52:	0019      	movs	r1, r3
 8005f54:	2001      	movs	r0, #1
 8005f56:	f000 f919 	bl	800618c <Create_Message>
 8005f5a:	e016      	b.n	8005f8a <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005f5c:	4c11      	ldr	r4, [pc, #68]	@ (8005fa4 <Process_PC_Config+0x100>)
 8005f5e:	466b      	mov	r3, sp
 8005f60:	0018      	movs	r0, r3
 8005f62:	0023      	movs	r3, r4
 8005f64:	3310      	adds	r3, #16
 8005f66:	22f4      	movs	r2, #244	@ 0xf4
 8005f68:	0019      	movs	r1, r3
 8005f6a:	f01a f9cf 	bl	802030c <memcpy>
 8005f6e:	6820      	ldr	r0, [r4, #0]
 8005f70:	6861      	ldr	r1, [r4, #4]
 8005f72:	68a2      	ldr	r2, [r4, #8]
 8005f74:	68e3      	ldr	r3, [r4, #12]
 8005f76:	f000 f819 	bl	8005fac <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005fa4 <Process_PC_Config+0x100>)
 8005f7c:	7818      	ldrb	r0, [r3, #0]
 8005f7e:	4b09      	ldr	r3, [pc, #36]	@ (8005fa4 <Process_PC_Config+0x100>)
 8005f80:	785a      	ldrb	r2, [r3, #1]
 8005f82:	4b09      	ldr	r3, [pc, #36]	@ (8005fa8 <Process_PC_Config+0x104>)
 8005f84:	0019      	movs	r1, r3
 8005f86:	f000 f901 	bl	800618c <Create_Message>
                }
                ResetUsbRxDataSize();
 8005f8a:	f016 fed3 	bl	801cd34 <ResetUsbRxDataSize>
                return;
 8005f8e:	e006      	b.n	8005f9e <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	0018      	movs	r0, r3
 8005f94:	f016 fef0 	bl	801cd78 <GetUsbRxNextChunk>
 8005f98:	e001      	b.n	8005f9e <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005f9a:	f016 fecb 	bl	801cd34 <ResetUsbRxDataSize>
        }
    }
}
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	b005      	add	sp, #20
 8005fa2:	bd90      	pop	{r4, r7, pc}
 8005fa4:	20000b44 	.word	0x20000b44
 8005fa8:	20000b46 	.word	0x20000b46

08005fac <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005fac:	b084      	sub	sp, #16
 8005fae:	b5b0      	push	{r4, r5, r7, lr}
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	2518      	movs	r5, #24
 8005fb6:	197c      	adds	r4, r7, r5
 8005fb8:	6020      	str	r0, [r4, #0]
 8005fba:	6061      	str	r1, [r4, #4]
 8005fbc:	60a2      	str	r2, [r4, #8]
 8005fbe:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005fc0:	197b      	adds	r3, r7, r5
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2bfe      	cmp	r3, #254	@ 0xfe
 8005fc6:	d100      	bne.n	8005fca <ProcessCmd+0x1e>
 8005fc8:	e09c      	b.n	8006104 <ProcessCmd+0x158>
 8005fca:	dd00      	ble.n	8005fce <ProcessCmd+0x22>
 8005fcc:	e0bc      	b.n	8006148 <ProcessCmd+0x19c>
 8005fce:	2b0c      	cmp	r3, #12
 8005fd0:	dc0a      	bgt.n	8005fe8 <ProcessCmd+0x3c>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	da00      	bge.n	8005fd8 <ProcessCmd+0x2c>
 8005fd6:	e0b7      	b.n	8006148 <ProcessCmd+0x19c>
 8005fd8:	2b0c      	cmp	r3, #12
 8005fda:	d900      	bls.n	8005fde <ProcessCmd+0x32>
 8005fdc:	e0b4      	b.n	8006148 <ProcessCmd+0x19c>
 8005fde:	009a      	lsls	r2, r3, #2
 8005fe0:	4b5d      	ldr	r3, [pc, #372]	@ (8006158 <ProcessCmd+0x1ac>)
 8005fe2:	18d3      	adds	r3, r2, r3
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	469f      	mov	pc, r3
 8005fe8:	2bfd      	cmp	r3, #253	@ 0xfd
 8005fea:	d100      	bne.n	8005fee <ProcessCmd+0x42>
 8005fec:	e084      	b.n	80060f8 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005fee:	e0ab      	b.n	8006148 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ff0:	2118      	movs	r1, #24
 8005ff2:	187b      	adds	r3, r7, r1
 8005ff4:	785b      	ldrb	r3, [r3, #1]
 8005ff6:	001a      	movs	r2, r3
 8005ff8:	187b      	adds	r3, r7, r1
 8005ffa:	1c99      	adds	r1, r3, #2
 8005ffc:	4857      	ldr	r0, [pc, #348]	@ (800615c <ProcessCmd+0x1b0>)
 8005ffe:	230c      	movs	r3, #12
 8006000:	f7fd fb5e 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006004:	e0a0      	b.n	8006148 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006006:	2118      	movs	r1, #24
 8006008:	187b      	adds	r3, r7, r1
 800600a:	785b      	ldrb	r3, [r3, #1]
 800600c:	001a      	movs	r2, r3
 800600e:	187b      	adds	r3, r7, r1
 8006010:	1c99      	adds	r1, r3, #2
 8006012:	4853      	ldr	r0, [pc, #332]	@ (8006160 <ProcessCmd+0x1b4>)
 8006014:	230c      	movs	r3, #12
 8006016:	f7fd fb53 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800601a:	e095      	b.n	8006148 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800601c:	2118      	movs	r1, #24
 800601e:	187b      	adds	r3, r7, r1
 8006020:	785b      	ldrb	r3, [r3, #1]
 8006022:	001a      	movs	r2, r3
 8006024:	187b      	adds	r3, r7, r1
 8006026:	1c99      	adds	r1, r3, #2
 8006028:	484e      	ldr	r0, [pc, #312]	@ (8006164 <ProcessCmd+0x1b8>)
 800602a:	230c      	movs	r3, #12
 800602c:	f7fd fb48 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006030:	e08a      	b.n	8006148 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(NOxIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006032:	2118      	movs	r1, #24
 8006034:	187b      	adds	r3, r7, r1
 8006036:	785b      	ldrb	r3, [r3, #1]
 8006038:	001a      	movs	r2, r3
 800603a:	187b      	adds	r3, r7, r1
 800603c:	1c99      	adds	r1, r3, #2
 800603e:	484a      	ldr	r0, [pc, #296]	@ (8006168 <ProcessCmd+0x1bc>)
 8006040:	230c      	movs	r3, #12
 8006042:	f7fd fb3d 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006046:	e07f      	b.n	8006148 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006048:	2118      	movs	r1, #24
 800604a:	187b      	adds	r3, r7, r1
 800604c:	785b      	ldrb	r3, [r3, #1]
 800604e:	001a      	movs	r2, r3
 8006050:	187b      	adds	r3, r7, r1
 8006052:	1c99      	adds	r1, r3, #2
 8006054:	4845      	ldr	r0, [pc, #276]	@ (800616c <ProcessCmd+0x1c0>)
 8006056:	230c      	movs	r3, #12
 8006058:	f7fd fb32 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800605c:	e074      	b.n	8006148 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800605e:	2118      	movs	r1, #24
 8006060:	187b      	adds	r3, r7, r1
 8006062:	785b      	ldrb	r3, [r3, #1]
 8006064:	001a      	movs	r2, r3
 8006066:	187b      	adds	r3, r7, r1
 8006068:	1c99      	adds	r1, r3, #2
 800606a:	4841      	ldr	r0, [pc, #260]	@ (8006170 <ProcessCmd+0x1c4>)
 800606c:	230c      	movs	r3, #12
 800606e:	f7fd fb27 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006072:	e069      	b.n	8006148 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBAConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8006074:	2118      	movs	r1, #24
 8006076:	187b      	adds	r3, r7, r1
 8006078:	785b      	ldrb	r3, [r3, #1]
 800607a:	001a      	movs	r2, r3
 800607c:	187b      	adds	r3, r7, r1
 800607e:	1c99      	adds	r1, r3, #2
 8006080:	483c      	ldr	r0, [pc, #240]	@ (8006174 <ProcessCmd+0x1c8>)
 8006082:	230c      	movs	r3, #12
 8006084:	f7fd fb1c 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8006088:	e05e      	b.n	8006148 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 800608a:	2118      	movs	r1, #24
 800608c:	187b      	adds	r3, r7, r1
 800608e:	785b      	ldrb	r3, [r3, #1]
 8006090:	001a      	movs	r2, r3
 8006092:	187b      	adds	r3, r7, r1
 8006094:	1c99      	adds	r1, r3, #2
 8006096:	4838      	ldr	r0, [pc, #224]	@ (8006178 <ProcessCmd+0x1cc>)
 8006098:	231e      	movs	r3, #30
 800609a:	f7fd fb11 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 800609e:	e053      	b.n	8006148 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060a0:	2118      	movs	r1, #24
 80060a2:	187b      	adds	r3, r7, r1
 80060a4:	785b      	ldrb	r3, [r3, #1]
 80060a6:	001a      	movs	r2, r3
 80060a8:	187b      	adds	r3, r7, r1
 80060aa:	1c99      	adds	r1, r3, #2
 80060ac:	4833      	ldr	r0, [pc, #204]	@ (800617c <ProcessCmd+0x1d0>)
 80060ae:	230c      	movs	r3, #12
 80060b0:	f7fd fb06 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060b4:	e048      	b.n	8006148 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060b6:	2118      	movs	r1, #24
 80060b8:	187b      	adds	r3, r7, r1
 80060ba:	785b      	ldrb	r3, [r3, #1]
 80060bc:	001a      	movs	r2, r3
 80060be:	187b      	adds	r3, r7, r1
 80060c0:	1c99      	adds	r1, r3, #2
 80060c2:	482f      	ldr	r0, [pc, #188]	@ (8006180 <ProcessCmd+0x1d4>)
 80060c4:	230c      	movs	r3, #12
 80060c6:	f7fd fafb 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060ca:	e03d      	b.n	8006148 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060cc:	2118      	movs	r1, #24
 80060ce:	187b      	adds	r3, r7, r1
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	001a      	movs	r2, r3
 80060d4:	187b      	adds	r3, r7, r1
 80060d6:	1c99      	adds	r1, r3, #2
 80060d8:	482a      	ldr	r0, [pc, #168]	@ (8006184 <ProcessCmd+0x1d8>)
 80060da:	230c      	movs	r3, #12
 80060dc:	f7fd faf0 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060e0:	e032      	b.n	8006148 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80060e2:	2118      	movs	r1, #24
 80060e4:	187b      	adds	r3, r7, r1
 80060e6:	785b      	ldrb	r3, [r3, #1]
 80060e8:	001a      	movs	r2, r3
 80060ea:	187b      	adds	r3, r7, r1
 80060ec:	1c99      	adds	r1, r3, #2
 80060ee:	4826      	ldr	r0, [pc, #152]	@ (8006188 <ProcessCmd+0x1dc>)
 80060f0:	230c      	movs	r3, #12
 80060f2:	f7fd fae5 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 80060f6:	e027      	b.n	8006148 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 80060f8:	4b18      	ldr	r3, [pc, #96]	@ (800615c <ProcessCmd+0x1b0>)
 80060fa:	21ba      	movs	r1, #186	@ 0xba
 80060fc:	0018      	movs	r0, r3
 80060fe:	f7fd fb24 	bl	800374a <ClearEEprom>
        break;
 8006102:	e021      	b.n	8006148 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8006104:	2118      	movs	r1, #24
 8006106:	187b      	adds	r3, r7, r1
 8006108:	789b      	ldrb	r3, [r3, #2]
 800610a:	021b      	lsls	r3, r3, #8
 800610c:	b21a      	sxth	r2, r3
 800610e:	187b      	adds	r3, r7, r1
 8006110:	78db      	ldrb	r3, [r3, #3]
 8006112:	b21b      	sxth	r3, r3
 8006114:	4313      	orrs	r3, r2
 8006116:	b21a      	sxth	r2, r3
 8006118:	1dbb      	adds	r3, r7, #6
 800611a:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 800611c:	1dbb      	adds	r3, r7, #6
 800611e:	881a      	ldrh	r2, [r3, #0]
 8006120:	23c0      	movs	r3, #192	@ 0xc0
 8006122:	015b      	lsls	r3, r3, #5
 8006124:	429a      	cmp	r2, r3
 8006126:	d207      	bcs.n	8006138 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8006128:	1dbb      	adds	r3, r7, #6
 800612a:	881b      	ldrh	r3, [r3, #0]
 800612c:	4a0b      	ldr	r2, [pc, #44]	@ (800615c <ProcessCmd+0x1b0>)
 800612e:	0019      	movs	r1, r3
 8006130:	0010      	movs	r0, r2
 8006132:	f7fd fb0a 	bl	800374a <ClearEEprom>
            break;
 8006136:	e006      	b.n	8006146 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8006138:	23c0      	movs	r3, #192	@ 0xc0
 800613a:	015b      	lsls	r3, r3, #5
 800613c:	4a07      	ldr	r2, [pc, #28]	@ (800615c <ProcessCmd+0x1b0>)
 800613e:	0019      	movs	r1, r3
 8006140:	0010      	movs	r0, r2
 8006142:	f7fd fb02 	bl	800374a <ClearEEprom>
            break;
 8006146:	46c0      	nop			@ (mov r8, r8)
}
 8006148:	46c0      	nop			@ (mov r8, r8)
 800614a:	46bd      	mov	sp, r7
 800614c:	b002      	add	sp, #8
 800614e:	bcb0      	pop	{r4, r5, r7}
 8006150:	bc08      	pop	{r3}
 8006152:	b004      	add	sp, #16
 8006154:	4718      	bx	r3
 8006156:	46c0      	nop			@ (mov r8, r8)
 8006158:	08025350 	.word	0x08025350
 800615c:	08080000 	.word	0x08080000
 8006160:	0808000c 	.word	0x0808000c
 8006164:	08080018 	.word	0x08080018
 8006168:	08080024 	.word	0x08080024
 800616c:	08080030 	.word	0x08080030
 8006170:	0808003c 	.word	0x0808003c
 8006174:	08080048 	.word	0x08080048
 8006178:	08080090 	.word	0x08080090
 800617c:	08080078 	.word	0x08080078
 8006180:	0808006c 	.word	0x0808006c
 8006184:	08080060 	.word	0x08080060
 8006188:	08080054 	.word	0x08080054

0800618c <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 800618c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6039      	str	r1, [r7, #0]
 8006194:	0011      	movs	r1, r2
 8006196:	1dfb      	adds	r3, r7, #7
 8006198:	1c02      	adds	r2, r0, #0
 800619a:	701a      	strb	r2, [r3, #0]
 800619c:	1dbb      	adds	r3, r7, #6
 800619e:	1c0a      	adds	r2, r1, #0
 80061a0:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 80061a2:	2223      	movs	r2, #35	@ 0x23
 80061a4:	4b20      	ldr	r3, [pc, #128]	@ (8006228 <Create_Message+0x9c>)
 80061a6:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 80061a8:	4b1f      	ldr	r3, [pc, #124]	@ (8006228 <Create_Message+0x9c>)
 80061aa:	1dfa      	adds	r2, r7, #7
 80061ac:	7812      	ldrb	r2, [r2, #0]
 80061ae:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 80061b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006228 <Create_Message+0x9c>)
 80061b2:	1dba      	adds	r2, r7, #6
 80061b4:	7812      	ldrb	r2, [r2, #0]
 80061b6:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 80061b8:	1dbb      	adds	r3, r7, #6
 80061ba:	781a      	ldrb	r2, [r3, #0]
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	4b1b      	ldr	r3, [pc, #108]	@ (800622c <Create_Message+0xa0>)
 80061c0:	0018      	movs	r0, r3
 80061c2:	f01a f8a3 	bl	802030c <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 80061c6:	1dbb      	adds	r3, r7, #6
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	250e      	movs	r5, #14
 80061ce:	197b      	adds	r3, r7, r5
 80061d0:	3203      	adds	r2, #3
 80061d2:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 80061d4:	260c      	movs	r6, #12
 80061d6:	19bc      	adds	r4, r7, r6
 80061d8:	197b      	adds	r3, r7, r5
 80061da:	881a      	ldrh	r2, [r3, #0]
 80061dc:	4b12      	ldr	r3, [pc, #72]	@ (8006228 <Create_Message+0x9c>)
 80061de:	0011      	movs	r1, r2
 80061e0:	0018      	movs	r0, r3
 80061e2:	f000 f825 	bl	8006230 <CRC16_ARC>
 80061e6:	0003      	movs	r3, r0
 80061e8:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 80061ea:	0030      	movs	r0, r6
 80061ec:	183b      	adds	r3, r7, r0
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	0a1b      	lsrs	r3, r3, #8
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	197b      	adds	r3, r7, r5
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	b2d1      	uxtb	r1, r2
 80061fa:	4a0b      	ldr	r2, [pc, #44]	@ (8006228 <Create_Message+0x9c>)
 80061fc:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 80061fe:	197b      	adds	r3, r7, r5
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	3301      	adds	r3, #1
 8006204:	183a      	adds	r2, r7, r0
 8006206:	8812      	ldrh	r2, [r2, #0]
 8006208:	b2d1      	uxtb	r1, r2
 800620a:	4a07      	ldr	r2, [pc, #28]	@ (8006228 <Create_Message+0x9c>)
 800620c:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800620e:	197b      	adds	r3, r7, r5
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	3302      	adds	r3, #2
 8006214:	b29a      	uxth	r2, r3
 8006216:	4b04      	ldr	r3, [pc, #16]	@ (8006228 <Create_Message+0x9c>)
 8006218:	0011      	movs	r1, r2
 800621a:	0018      	movs	r0, r3
 800621c:	f016 fd48 	bl	801ccb0 <CDC_Transmit_FS>
}
 8006220:	46c0      	nop			@ (mov r8, r8)
 8006222:	46bd      	mov	sp, r7
 8006224:	b005      	add	sp, #20
 8006226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006228:	20000c48 	.word	0x20000c48
 800622c:	20000c4b 	.word	0x20000c4b

08006230 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	000a      	movs	r2, r1
 800623a:	1cbb      	adds	r3, r7, #2
 800623c:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 800623e:	2316      	movs	r3, #22
 8006240:	18fb      	adds	r3, r7, r3
 8006242:	2200      	movs	r2, #0
 8006244:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8006246:	2300      	movs	r3, #0
 8006248:	613b      	str	r3, [r7, #16]
 800624a:	e02e      	b.n	80062aa <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	18d3      	adds	r3, r2, r3
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	0019      	movs	r1, r3
 8006256:	2216      	movs	r2, #22
 8006258:	18bb      	adds	r3, r7, r2
 800625a:	18ba      	adds	r2, r7, r2
 800625c:	8812      	ldrh	r2, [r2, #0]
 800625e:	404a      	eors	r2, r1
 8006260:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 8006262:	2300      	movs	r3, #0
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	e01a      	b.n	800629e <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8006268:	2116      	movs	r1, #22
 800626a:	187b      	adds	r3, r7, r1
 800626c:	881b      	ldrh	r3, [r3, #0]
 800626e:	2201      	movs	r2, #1
 8006270:	4013      	ands	r3, r2
 8006272:	d00b      	beq.n	800628c <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8006274:	187b      	adds	r3, r7, r1
 8006276:	187a      	adds	r2, r7, r1
 8006278:	8812      	ldrh	r2, [r2, #0]
 800627a:	0852      	lsrs	r2, r2, #1
 800627c:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 800627e:	187b      	adds	r3, r7, r1
 8006280:	187a      	adds	r2, r7, r1
 8006282:	8812      	ldrh	r2, [r2, #0]
 8006284:	490f      	ldr	r1, [pc, #60]	@ (80062c4 <CRC16_ARC+0x94>)
 8006286:	404a      	eors	r2, r1
 8006288:	801a      	strh	r2, [r3, #0]
 800628a:	e005      	b.n	8006298 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 800628c:	2216      	movs	r2, #22
 800628e:	18bb      	adds	r3, r7, r2
 8006290:	18ba      	adds	r2, r7, r2
 8006292:	8812      	ldrh	r2, [r2, #0]
 8006294:	0852      	lsrs	r2, r2, #1
 8006296:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3301      	adds	r3, #1
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b07      	cmp	r3, #7
 80062a2:	dde1      	ble.n	8006268 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	3301      	adds	r3, #1
 80062a8:	613b      	str	r3, [r7, #16]
 80062aa:	1cbb      	adds	r3, r7, #2
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	dbcb      	blt.n	800624c <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 80062b4:	2316      	movs	r3, #22
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	881b      	ldrh	r3, [r3, #0]
}
 80062ba:	0018      	movs	r0, r3
 80062bc:	46bd      	mov	sp, r7
 80062be:	b006      	add	sp, #24
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	46c0      	nop			@ (mov r8, r8)
 80062c4:	ffffa001 	.word	0xffffa001

080062c8 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_14;
 80062cc:	4b26      	ldr	r3, [pc, #152]	@ (8006368 <ReadBatteryVoltage+0xa0>)
 80062ce:	4a27      	ldr	r2, [pc, #156]	@ (800636c <ReadBatteryVoltage+0xa4>)
 80062d0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80062d2:	4b25      	ldr	r3, [pc, #148]	@ (8006368 <ReadBatteryVoltage+0xa0>)
 80062d4:	2280      	movs	r2, #128	@ 0x80
 80062d6:	0152      	lsls	r2, r2, #5
 80062d8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80062da:	4a23      	ldr	r2, [pc, #140]	@ (8006368 <ReadBatteryVoltage+0xa0>)
 80062dc:	4b24      	ldr	r3, [pc, #144]	@ (8006370 <ReadBatteryVoltage+0xa8>)
 80062de:	0011      	movs	r1, r2
 80062e0:	0018      	movs	r0, r3
 80062e2:	f008 ffb7 	bl	800f254 <HAL_ADC_ConfigChannel>
 80062e6:	1e03      	subs	r3, r0, #0
 80062e8:	d001      	beq.n	80062ee <ReadBatteryVoltage+0x26>
    Error_Handler();
 80062ea:	f001 ffe1 	bl	80082b0 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80062ee:	4b20      	ldr	r3, [pc, #128]	@ (8006370 <ReadBatteryVoltage+0xa8>)
 80062f0:	0018      	movs	r0, r3
 80062f2:	f008 feb3 	bl	800f05c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80062f6:	4b1e      	ldr	r3, [pc, #120]	@ (8006370 <ReadBatteryVoltage+0xa8>)
 80062f8:	2101      	movs	r1, #1
 80062fa:	0018      	movs	r0, r3
 80062fc:	f008 ff02 	bl	800f104 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8006300:	4b1b      	ldr	r3, [pc, #108]	@ (8006370 <ReadBatteryVoltage+0xa8>)
 8006302:	0018      	movs	r0, r3
 8006304:	f008 ff9a 	bl	800f23c <HAL_ADC_GetValue>
 8006308:	0002      	movs	r2, r0
 800630a:	4b1a      	ldr	r3, [pc, #104]	@ (8006374 <ReadBatteryVoltage+0xac>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4353      	muls	r3, r2
 8006310:	005b      	lsls	r3, r3, #1
 8006312:	4919      	ldr	r1, [pc, #100]	@ (8006378 <ReadBatteryVoltage+0xb0>)
 8006314:	0018      	movs	r0, r3
 8006316:	f7f9 ff45 	bl	80001a4 <__udivsi3>
 800631a:	0003      	movs	r3, r0
 800631c:	001a      	movs	r2, r3
 800631e:	4b17      	ldr	r3, [pc, #92]	@ (800637c <ReadBatteryVoltage+0xb4>)
 8006320:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8006322:	4b16      	ldr	r3, [pc, #88]	@ (800637c <ReadBatteryVoltage+0xb4>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	0018      	movs	r0, r3
 8006328:	f7fb f99e 	bl	8001668 <__aeabi_ui2f>
 800632c:	1c03      	adds	r3, r0, #0
 800632e:	4914      	ldr	r1, [pc, #80]	@ (8006380 <ReadBatteryVoltage+0xb8>)
 8006330:	1c18      	adds	r0, r3, #0
 8006332:	f7fa fc4f 	bl	8000bd4 <__aeabi_fdiv>
 8006336:	1c03      	adds	r3, r0, #0
 8006338:	1c1a      	adds	r2, r3, #0
 800633a:	4b12      	ldr	r3, [pc, #72]	@ (8006384 <ReadBatteryVoltage+0xbc>)
 800633c:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 800633e:	4b0a      	ldr	r3, [pc, #40]	@ (8006368 <ReadBatteryVoltage+0xa0>)
 8006340:	4a0a      	ldr	r2, [pc, #40]	@ (800636c <ReadBatteryVoltage+0xa4>)
 8006342:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006344:	4b08      	ldr	r3, [pc, #32]	@ (8006368 <ReadBatteryVoltage+0xa0>)
 8006346:	4a10      	ldr	r2, [pc, #64]	@ (8006388 <ReadBatteryVoltage+0xc0>)
 8006348:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800634a:	4a07      	ldr	r2, [pc, #28]	@ (8006368 <ReadBatteryVoltage+0xa0>)
 800634c:	4b08      	ldr	r3, [pc, #32]	@ (8006370 <ReadBatteryVoltage+0xa8>)
 800634e:	0011      	movs	r1, r2
 8006350:	0018      	movs	r0, r3
 8006352:	f008 ff7f 	bl	800f254 <HAL_ADC_ConfigChannel>
 8006356:	1e03      	subs	r3, r0, #0
 8006358:	d001      	beq.n	800635e <ReadBatteryVoltage+0x96>
    Error_Handler();
 800635a:	f001 ffa9 	bl	80082b0 <Error_Handler>
  }
  return trueValue;
 800635e:	4b09      	ldr	r3, [pc, #36]	@ (8006384 <ReadBatteryVoltage+0xbc>)
 8006360:	681b      	ldr	r3, [r3, #0]
 }
 8006362:	1c18      	adds	r0, r3, #0
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	20000d50 	.word	0x20000d50
 800636c:	38004000 	.word	0x38004000
 8006370:	20000d8c 	.word	0x20000d8c
 8006374:	2000002c 	.word	0x2000002c
 8006378:	00000fff 	.word	0x00000fff
 800637c:	20000d58 	.word	0x20000d58
 8006380:	447a0000 	.word	0x447a0000
 8006384:	20000d5c 	.word	0x20000d5c
 8006388:	00001001 	.word	0x00001001

0800638c <ReadSolarVoltage>:

/* function to read the actual battery voltage */

//float ReadSolarVoltage(void){
uint16_t ReadSolarVoltage(void){
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t solarvalue = 0;
//  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8006390:	4b21      	ldr	r3, [pc, #132]	@ (8006418 <ReadSolarVoltage+0x8c>)
 8006392:	4a22      	ldr	r2, [pc, #136]	@ (800641c <ReadSolarVoltage+0x90>)
 8006394:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006396:	4b20      	ldr	r3, [pc, #128]	@ (8006418 <ReadSolarVoltage+0x8c>)
 8006398:	2280      	movs	r2, #128	@ 0x80
 800639a:	0152      	lsls	r2, r2, #5
 800639c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800639e:	4a1e      	ldr	r2, [pc, #120]	@ (8006418 <ReadSolarVoltage+0x8c>)
 80063a0:	4b1f      	ldr	r3, [pc, #124]	@ (8006420 <ReadSolarVoltage+0x94>)
 80063a2:	0011      	movs	r1, r2
 80063a4:	0018      	movs	r0, r3
 80063a6:	f008 ff55 	bl	800f254 <HAL_ADC_ConfigChannel>
 80063aa:	1e03      	subs	r3, r0, #0
 80063ac:	d001      	beq.n	80063b2 <ReadSolarVoltage+0x26>
    Error_Handler();
 80063ae:	f001 ff7f 	bl	80082b0 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 80063b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006420 <ReadSolarVoltage+0x94>)
 80063b4:	0018      	movs	r0, r3
 80063b6:	f008 fe51 	bl	800f05c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 80063ba:	4b19      	ldr	r3, [pc, #100]	@ (8006420 <ReadSolarVoltage+0x94>)
 80063bc:	2101      	movs	r1, #1
 80063be:	0018      	movs	r0, r3
 80063c0:	f008 fea0 	bl	800f104 <HAL_ADC_PollForConversion>
  solarvalue = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 80063c4:	4b16      	ldr	r3, [pc, #88]	@ (8006420 <ReadSolarVoltage+0x94>)
 80063c6:	0018      	movs	r0, r3
 80063c8:	f008 ff38 	bl	800f23c <HAL_ADC_GetValue>
 80063cc:	0002      	movs	r2, r0
 80063ce:	4b15      	ldr	r3, [pc, #84]	@ (8006424 <ReadSolarVoltage+0x98>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	435a      	muls	r2, r3
 80063d4:	0013      	movs	r3, r2
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	189b      	adds	r3, r3, r2
 80063da:	4913      	ldr	r1, [pc, #76]	@ (8006428 <ReadSolarVoltage+0x9c>)
 80063dc:	0018      	movs	r0, r3
 80063de:	f7f9 fee1 	bl	80001a4 <__udivsi3>
 80063e2:	0003      	movs	r3, r0
 80063e4:	001a      	movs	r2, r3
 80063e6:	4b11      	ldr	r3, [pc, #68]	@ (800642c <ReadSolarVoltage+0xa0>)
 80063e8:	601a      	str	r2, [r3, #0]
//  trueValue = (float)solarvalue / 1000.0;
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 80063ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006418 <ReadSolarVoltage+0x8c>)
 80063ec:	4a0b      	ldr	r2, [pc, #44]	@ (800641c <ReadSolarVoltage+0x90>)
 80063ee:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80063f0:	4b09      	ldr	r3, [pc, #36]	@ (8006418 <ReadSolarVoltage+0x8c>)
 80063f2:	4a0f      	ldr	r2, [pc, #60]	@ (8006430 <ReadSolarVoltage+0xa4>)
 80063f4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80063f6:	4a08      	ldr	r2, [pc, #32]	@ (8006418 <ReadSolarVoltage+0x8c>)
 80063f8:	4b09      	ldr	r3, [pc, #36]	@ (8006420 <ReadSolarVoltage+0x94>)
 80063fa:	0011      	movs	r1, r2
 80063fc:	0018      	movs	r0, r3
 80063fe:	f008 ff29 	bl	800f254 <HAL_ADC_ConfigChannel>
 8006402:	1e03      	subs	r3, r0, #0
 8006404:	d001      	beq.n	800640a <ReadSolarVoltage+0x7e>
    Error_Handler();
 8006406:	f001 ff53 	bl	80082b0 <Error_Handler>
  }
//  return trueValue;
  return solarvalue;
 800640a:	4b08      	ldr	r3, [pc, #32]	@ (800642c <ReadSolarVoltage+0xa0>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	b29b      	uxth	r3, r3
 }
 8006410:	0018      	movs	r0, r3
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	46c0      	nop			@ (mov r8, r8)
 8006418:	20000d50 	.word	0x20000d50
 800641c:	3c008000 	.word	0x3c008000
 8006420:	20000d8c 	.word	0x20000d8c
 8006424:	2000002c 	.word	0x2000002c
 8006428:	00000fff 	.word	0x00000fff
 800642c:	20000d60 	.word	0x20000d60
 8006430:	00001001 	.word	0x00001001

08006434 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006438:	23a0      	movs	r3, #160	@ 0xa0
 800643a:	05db      	lsls	r3, r3, #23
 800643c:	2180      	movs	r1, #128	@ 0x80
 800643e:	0018      	movs	r0, r3
 8006440:	f009 fea4 	bl	801018c <HAL_GPIO_ReadPin>
 8006444:	0003      	movs	r3, r0
 8006446:	1e5a      	subs	r2, r3, #1
 8006448:	4193      	sbcs	r3, r2
 800644a:	b2db      	uxtb	r3, r3
}
 800644c:	0018      	movs	r0, r3
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8006452:	b580      	push	{r7, lr}
 8006454:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8006456:	2380      	movs	r3, #128	@ 0x80
 8006458:	021a      	lsls	r2, r3, #8
 800645a:	23a0      	movs	r3, #160	@ 0xa0
 800645c:	05db      	lsls	r3, r3, #23
 800645e:	0011      	movs	r1, r2
 8006460:	0018      	movs	r0, r3
 8006462:	f009 fe93 	bl	801018c <HAL_GPIO_ReadPin>
 8006466:	0003      	movs	r3, r0
 8006468:	1e5a      	subs	r2, r3, #1
 800646a:	4193      	sbcs	r3, r2
 800646c:	b2db      	uxtb	r3, r3
}
 800646e:	0018      	movs	r0, r3
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8006478:	4b05      	ldr	r3, [pc, #20]	@ (8006490 <UserButton_Pressed+0x1c>)
 800647a:	2104      	movs	r1, #4
 800647c:	0018      	movs	r0, r3
 800647e:	f009 fe85 	bl	801018c <HAL_GPIO_ReadPin>
 8006482:	0003      	movs	r3, r0
 8006484:	425a      	negs	r2, r3
 8006486:	4153      	adcs	r3, r2
 8006488:	b2db      	uxtb	r3, r3
}
 800648a:	0018      	movs	r0, r3
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	50000c00 	.word	0x50000c00

08006494 <showTime>:
char strbuf[24] = {0}; //22-jan-24 23h:12m:23s

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);
void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 8006494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006496:	46d6      	mov	lr, sl
 8006498:	464f      	mov	r7, r9
 800649a:	4646      	mov	r6, r8
 800649c:	b5c0      	push	{r6, r7, lr}
 800649e:	b08e      	sub	sp, #56	@ 0x38
 80064a0:	af08      	add	r7, sp, #32
  if (posixBootTime == 0) {
 80064a2:	4b21      	ldr	r3, [pc, #132]	@ (8006528 <showTime+0x94>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d036      	beq.n	8006518 <showTime+0x84>
    return;
  }
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80064aa:	003a      	movs	r2, r7
 80064ac:	1d3b      	adds	r3, r7, #4
 80064ae:	0011      	movs	r1, r2
 80064b0:	0018      	movs	r0, r3
 80064b2:	f000 fa2b 	bl	800690c <RTC_GetTime>
  UpdateSystemUptime();
 80064b6:	f000 f83f 	bl	8006538 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064ba:	003b      	movs	r3, r7
 80064bc:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064be:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064c0:	003b      	movs	r3, r7
 80064c2:	785b      	ldrb	r3, [r3, #1]
 80064c4:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064c6:	4b19      	ldr	r3, [pc, #100]	@ (800652c <showTime+0x98>)
 80064c8:	0092      	lsls	r2, r2, #2
 80064ca:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064cc:	003b      	movs	r3, r7
 80064ce:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064d0:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064d2:	1d3b      	adds	r3, r7, #4
 80064d4:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064d6:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 80064d8:	1d3b      	adds	r3, r7, #4
 80064da:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064dc:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80064de:	1d3b      	adds	r3, r7, #4
 80064e0:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064e2:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80064e4:	4b12      	ldr	r3, [pc, #72]	@ (8006530 <showTime+0x9c>)
 80064e6:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064e8:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80064ea:	4b11      	ldr	r3, [pc, #68]	@ (8006530 <showTime+0x9c>)
 80064ec:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064ee:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80064f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006530 <showTime+0x9c>)
 80064f2:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064f4:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80064f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006530 <showTime+0x9c>)
 80064f8:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80064fa:	480e      	ldr	r0, [pc, #56]	@ (8006534 <showTime+0xa0>)
 80064fc:	9306      	str	r3, [sp, #24]
 80064fe:	4643      	mov	r3, r8
 8006500:	9305      	str	r3, [sp, #20]
 8006502:	4663      	mov	r3, ip
 8006504:	9304      	str	r3, [sp, #16]
 8006506:	9603      	str	r6, [sp, #12]
 8006508:	9502      	str	r5, [sp, #8]
 800650a:	9401      	str	r4, [sp, #4]
 800650c:	9100      	str	r1, [sp, #0]
 800650e:	4653      	mov	r3, sl
 8006510:	4649      	mov	r1, r9
 8006512:	f019 fc6b 	bl	801fdec <iprintf>
 8006516:	e000      	b.n	800651a <showTime+0x86>
    return;
 8006518:	46c0      	nop			@ (mov r8, r8)
}
 800651a:	46bd      	mov	sp, r7
 800651c:	b006      	add	sp, #24
 800651e:	bce0      	pop	{r5, r6, r7}
 8006520:	46ba      	mov	sl, r7
 8006522:	46b1      	mov	r9, r6
 8006524:	46a8      	mov	r8, r5
 8006526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006528:	20000d70 	.word	0x20000d70
 800652c:	2000004c 	.word	0x2000004c
 8006530:	20000d64 	.word	0x20000d64
 8006534:	08023c14 	.word	0x08023c14

08006538 <UpdateSystemUptime>:
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}
*/

void UpdateSystemUptime() {
 8006538:	b580      	push	{r7, lr}
 800653a:	b088      	sub	sp, #32
 800653c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 800653e:	003a      	movs	r2, r7
 8006540:	1d3b      	adds	r3, r7, #4
 8006542:	0011      	movs	r1, r2
 8006544:	0018      	movs	r0, r3
 8006546:	f000 f9e1 	bl	800690c <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 800654a:	1d3a      	adds	r2, r7, #4
 800654c:	003b      	movs	r3, r7
 800654e:	0011      	movs	r1, r2
 8006550:	0018      	movs	r0, r3
 8006552:	f000 fba1 	bl	8006c98 <makeTime>
 8006556:	0002      	movs	r2, r0
 8006558:	4b1e      	ldr	r3, [pc, #120]	@ (80065d4 <UpdateSystemUptime+0x9c>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	213c      	movs	r1, #60	@ 0x3c
 8006568:	0018      	movs	r0, r3
 800656a:	f7f9 fea1 	bl	80002b0 <__aeabi_uidivmod>
 800656e:	000b      	movs	r3, r1
 8006570:	b2da      	uxtb	r2, r3
 8006572:	4b19      	ldr	r3, [pc, #100]	@ (80065d8 <UpdateSystemUptime+0xa0>)
 8006574:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	213c      	movs	r1, #60	@ 0x3c
 800657a:	0018      	movs	r0, r3
 800657c:	f7f9 fe12 	bl	80001a4 <__udivsi3>
 8006580:	0003      	movs	r3, r0
 8006582:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	213c      	movs	r1, #60	@ 0x3c
 8006588:	0018      	movs	r0, r3
 800658a:	f7f9 fe91 	bl	80002b0 <__aeabi_uidivmod>
 800658e:	000b      	movs	r3, r1
 8006590:	b2da      	uxtb	r2, r3
 8006592:	4b11      	ldr	r3, [pc, #68]	@ (80065d8 <UpdateSystemUptime+0xa0>)
 8006594:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	213c      	movs	r1, #60	@ 0x3c
 800659a:	0018      	movs	r0, r3
 800659c:	f7f9 fe02 	bl	80001a4 <__udivsi3>
 80065a0:	0003      	movs	r3, r0
 80065a2:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	2118      	movs	r1, #24
 80065a8:	0018      	movs	r0, r3
 80065aa:	f7f9 fe81 	bl	80002b0 <__aeabi_uidivmod>
 80065ae:	000b      	movs	r3, r1
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	4b09      	ldr	r3, [pc, #36]	@ (80065d8 <UpdateSystemUptime+0xa0>)
 80065b4:	709a      	strb	r2, [r3, #2]
  time /= 24; // now it is days
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	2118      	movs	r1, #24
 80065ba:	0018      	movs	r0, r3
 80065bc:	f7f9 fdf2 	bl	80001a4 <__udivsi3>
 80065c0:	0003      	movs	r3, r0
 80065c2:	61bb      	str	r3, [r7, #24]
  myUpTime.Day = time; // now it is days
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	4b03      	ldr	r3, [pc, #12]	@ (80065d8 <UpdateSystemUptime+0xa0>)
 80065ca:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 80065cc:	46c0      	nop			@ (mov r8, r8)
 80065ce:	46bd      	mov	sp, r7
 80065d0:	b008      	add	sp, #32
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	20000d70 	.word	0x20000d70
 80065d8:	20000d64 	.word	0x20000d64

080065dc <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 80065dc:	b590      	push	{r4, r7, lr}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	0008      	movs	r0, r1
 80065e6:	0011      	movs	r1, r2
 80065e8:	1cfb      	adds	r3, r7, #3
 80065ea:	1c02      	adds	r2, r0, #0
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	1cbb      	adds	r3, r7, #2
 80065f0:	1c0a      	adds	r2, r1, #0
 80065f2:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 80065f4:	230e      	movs	r3, #14
 80065f6:	18fb      	adds	r3, r7, r3
 80065f8:	2200      	movs	r2, #0
 80065fa:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80065fc:	230f      	movs	r3, #15
 80065fe:	18fb      	adds	r3, r7, r3
 8006600:	1cfa      	adds	r2, r7, #3
 8006602:	7812      	ldrb	r2, [r2, #0]
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	e015      	b.n	8006634 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006608:	200f      	movs	r0, #15
 800660a:	183b      	adds	r3, r7, r0
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	18d2      	adds	r2, r2, r3
 8006612:	240e      	movs	r4, #14
 8006614:	193b      	adds	r3, r7, r4
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	7811      	ldrb	r1, [r2, #0]
 800661a:	2208      	movs	r2, #8
 800661c:	18ba      	adds	r2, r7, r2
 800661e:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006620:	193b      	adds	r3, r7, r4
 8006622:	781a      	ldrb	r2, [r3, #0]
 8006624:	193b      	adds	r3, r7, r4
 8006626:	3201      	adds	r2, #1
 8006628:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800662a:	183b      	adds	r3, r7, r0
 800662c:	781a      	ldrb	r2, [r3, #0]
 800662e:	183b      	adds	r3, r7, r0
 8006630:	3201      	adds	r2, #1
 8006632:	701a      	strb	r2, [r3, #0]
 8006634:	200f      	movs	r0, #15
 8006636:	183a      	adds	r2, r7, r0
 8006638:	1cbb      	adds	r3, r7, #2
 800663a:	7812      	ldrb	r2, [r2, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	429a      	cmp	r2, r3
 8006640:	d9e2      	bls.n	8006608 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8006642:	230e      	movs	r3, #14
 8006644:	18fb      	adds	r3, r7, r3
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	2208      	movs	r2, #8
 800664a:	18ba      	adds	r2, r7, r2
 800664c:	2100      	movs	r1, #0
 800664e:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8006650:	1cfb      	adds	r3, r7, #3
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b13      	cmp	r3, #19
 8006656:	d849      	bhi.n	80066ec <aBuff2int+0x110>
    if (start == 17) { //month
 8006658:	1cfb      	adds	r3, r7, #3
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b11      	cmp	r3, #17
 800665e:	d122      	bne.n	80066a6 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8006660:	183b      	adds	r3, r7, r0
 8006662:	2200      	movs	r2, #0
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	e018      	b.n	800669a <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8006668:	240f      	movs	r4, #15
 800666a:	193b      	adds	r3, r7, r4
 800666c:	781a      	ldrb	r2, [r3, #0]
 800666e:	4b25      	ldr	r3, [pc, #148]	@ (8006704 <aBuff2int+0x128>)
 8006670:	0092      	lsls	r2, r2, #2
 8006672:	58d2      	ldr	r2, [r2, r3]
 8006674:	2308      	movs	r3, #8
 8006676:	18fb      	adds	r3, r7, r3
 8006678:	0011      	movs	r1, r2
 800667a:	0018      	movs	r0, r3
 800667c:	f7f9 fd6c 	bl	8000158 <strcmp>
 8006680:	1e03      	subs	r3, r0, #0
 8006682:	d104      	bne.n	800668e <aBuff2int+0xb2>
          return i+1;
 8006684:	193b      	adds	r3, r7, r4
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	3301      	adds	r3, #1
 800668a:	b2db      	uxtb	r3, r3
 800668c:	e035      	b.n	80066fa <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800668e:	210f      	movs	r1, #15
 8006690:	187b      	adds	r3, r7, r1
 8006692:	781a      	ldrb	r2, [r3, #0]
 8006694:	187b      	adds	r3, r7, r1
 8006696:	3201      	adds	r2, #1
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	230f      	movs	r3, #15
 800669c:	18fb      	adds	r3, r7, r3
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	2b0b      	cmp	r3, #11
 80066a2:	d9e1      	bls.n	8006668 <aBuff2int+0x8c>
 80066a4:	e022      	b.n	80066ec <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80066a6:	230f      	movs	r3, #15
 80066a8:	18fb      	adds	r3, r7, r3
 80066aa:	2200      	movs	r2, #0
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	e018      	b.n	80066e2 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80066b0:	240f      	movs	r4, #15
 80066b2:	193b      	adds	r3, r7, r4
 80066b4:	781a      	ldrb	r2, [r3, #0]
 80066b6:	4b14      	ldr	r3, [pc, #80]	@ (8006708 <aBuff2int+0x12c>)
 80066b8:	0092      	lsls	r2, r2, #2
 80066ba:	58d2      	ldr	r2, [r2, r3]
 80066bc:	2308      	movs	r3, #8
 80066be:	18fb      	adds	r3, r7, r3
 80066c0:	0011      	movs	r1, r2
 80066c2:	0018      	movs	r0, r3
 80066c4:	f7f9 fd48 	bl	8000158 <strcmp>
 80066c8:	1e03      	subs	r3, r0, #0
 80066ca:	d104      	bne.n	80066d6 <aBuff2int+0xfa>
          return i+1;
 80066cc:	193b      	adds	r3, r7, r4
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	3301      	adds	r3, #1
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	e011      	b.n	80066fa <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 80066d6:	210f      	movs	r1, #15
 80066d8:	187b      	adds	r3, r7, r1
 80066da:	781a      	ldrb	r2, [r3, #0]
 80066dc:	187b      	adds	r3, r7, r1
 80066de:	3201      	adds	r2, #1
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	230f      	movs	r3, #15
 80066e4:	18fb      	adds	r3, r7, r3
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b06      	cmp	r3, #6
 80066ea:	d9e1      	bls.n	80066b0 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 80066ec:	2308      	movs	r3, #8
 80066ee:	18fb      	adds	r3, r7, r3
 80066f0:	0018      	movs	r0, r3
 80066f2:	f017 ffa0 	bl	801e636 <atoi>
 80066f6:	0003      	movs	r3, r0
 80066f8:	b2db      	uxtb	r3, r3
}
 80066fa:	0018      	movs	r0, r3
 80066fc:	46bd      	mov	sp, r7
 80066fe:	b005      	add	sp, #20
 8006700:	bd90      	pop	{r4, r7, pc}
 8006702:	46c0      	nop			@ (mov r8, r8)
 8006704:	2000004c 	.word	0x2000004c
 8006708:	20000030 	.word	0x20000030

0800670c <ParseTime>:

void ParseTime(char* buffer) {
 800670c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800670e:	b08b      	sub	sp, #44	@ 0x2c
 8006710:	af02      	add	r7, sp, #8
 8006712:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006714:	2408      	movs	r4, #8
 8006716:	193a      	adds	r2, r7, r4
 8006718:	260c      	movs	r6, #12
 800671a:	19bb      	adds	r3, r7, r6
 800671c:	0011      	movs	r1, r2
 800671e:	0018      	movs	r0, r3
 8006720:	f000 f8f4 	bl	800690c <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2219      	movs	r2, #25
 8006728:	2118      	movs	r1, #24
 800672a:	0018      	movs	r0, r3
 800672c:	f7ff ff56 	bl	80065dc <aBuff2int>
 8006730:	0003      	movs	r3, r0
 8006732:	001a      	movs	r2, r3
 8006734:	19bb      	adds	r3, r7, r6
 8006736:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	221c      	movs	r2, #28
 800673c:	211b      	movs	r1, #27
 800673e:	0018      	movs	r0, r3
 8006740:	f7ff ff4c 	bl	80065dc <aBuff2int>
 8006744:	0003      	movs	r3, r0
 8006746:	001a      	movs	r2, r3
 8006748:	19bb      	adds	r3, r7, r6
 800674a:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	221f      	movs	r2, #31
 8006750:	211e      	movs	r1, #30
 8006752:	0018      	movs	r0, r3
 8006754:	f7ff ff42 	bl	80065dc <aBuff2int>
 8006758:	0003      	movs	r3, r0
 800675a:	001a      	movs	r2, r3
 800675c:	19bb      	adds	r3, r7, r6
 800675e:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2224      	movs	r2, #36	@ 0x24
 8006764:	2123      	movs	r1, #35	@ 0x23
 8006766:	0018      	movs	r0, r3
 8006768:	f7ff ff38 	bl	80065dc <aBuff2int>
 800676c:	0003      	movs	r3, r0
 800676e:	001a      	movs	r2, r3
 8006770:	0025      	movs	r5, r4
 8006772:	197b      	adds	r3, r7, r5
 8006774:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2213      	movs	r2, #19
 800677a:	2111      	movs	r1, #17
 800677c:	0018      	movs	r0, r3
 800677e:	f7ff ff2d 	bl	80065dc <aBuff2int>
 8006782:	0003      	movs	r3, r0
 8006784:	001a      	movs	r2, r3
 8006786:	197b      	adds	r3, r7, r5
 8006788:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2216      	movs	r2, #22
 800678e:	2115      	movs	r1, #21
 8006790:	0018      	movs	r0, r3
 8006792:	f7ff ff23 	bl	80065dc <aBuff2int>
 8006796:	0003      	movs	r3, r0
 8006798:	001a      	movs	r2, r3
 800679a:	197b      	adds	r3, r7, r5
 800679c:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	220f      	movs	r2, #15
 80067a2:	210d      	movs	r1, #13
 80067a4:	0018      	movs	r0, r3
 80067a6:	f7ff ff19 	bl	80065dc <aBuff2int>
 80067aa:	0003      	movs	r3, r0
 80067ac:	001a      	movs	r2, r3
 80067ae:	197b      	adds	r3, r7, r5
 80067b0:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80067b2:	19bb      	adds	r3, r7, r6
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	001c      	movs	r4, r3
 80067b8:	19bb      	adds	r3, r7, r6
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	0018      	movs	r0, r3
 80067be:	19bb      	adds	r3, r7, r6
 80067c0:	789b      	ldrb	r3, [r3, #2]
 80067c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006834 <ParseTime+0x128>)
 80067c4:	491c      	ldr	r1, [pc, #112]	@ (8006838 <ParseTime+0x12c>)
 80067c6:	9301      	str	r3, [sp, #4]
 80067c8:	9000      	str	r0, [sp, #0]
 80067ca:	0023      	movs	r3, r4
 80067cc:	2003      	movs	r0, #3
 80067ce:	f007 fe13 	bl	800e3f8 <CreateLine>
  Debug("Current RTC date before update is: %02d-%02d-%02d", currentDate.Date , currentDate.Month, currentDate.Year  );
 80067d2:	197b      	adds	r3, r7, r5
 80067d4:	789b      	ldrb	r3, [r3, #2]
 80067d6:	001c      	movs	r4, r3
 80067d8:	197b      	adds	r3, r7, r5
 80067da:	785b      	ldrb	r3, [r3, #1]
 80067dc:	0018      	movs	r0, r3
 80067de:	197b      	adds	r3, r7, r5
 80067e0:	78db      	ldrb	r3, [r3, #3]
 80067e2:	4a16      	ldr	r2, [pc, #88]	@ (800683c <ParseTime+0x130>)
 80067e4:	4914      	ldr	r1, [pc, #80]	@ (8006838 <ParseTime+0x12c>)
 80067e6:	9301      	str	r3, [sp, #4]
 80067e8:	9000      	str	r0, [sp, #0]
 80067ea:	0023      	movs	r3, r4
 80067ec:	2003      	movs	r0, #3
 80067ee:	f007 fe03 	bl	800e3f8 <CreateLine>
  RTC_SetTime(&currentTime);
 80067f2:	19bb      	adds	r3, r7, r6
 80067f4:	0018      	movs	r0, r3
 80067f6:	f000 f825 	bl	8006844 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 80067fa:	197b      	adds	r3, r7, r5
 80067fc:	0018      	movs	r0, r3
 80067fe:	f000 f847 	bl	8006890 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 8006802:	197b      	adds	r3, r7, r5
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2b02      	cmp	r3, #2
 8006808:	d101      	bne.n	800680e <ParseTime+0x102>
    reset_fanCleaningDone();
 800680a:	f002 fcad 	bl	8009168 <reset_fanCleaningDone>
  }
//  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
  if (posixBootTime == 0) {
 800680e:	4b0c      	ldr	r3, [pc, #48]	@ (8006840 <ParseTime+0x134>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10a      	bne.n	800682c <ParseTime+0x120>
    posixBootTime = makeTime(&currentDate, &currentTime);
 8006816:	230c      	movs	r3, #12
 8006818:	18fa      	adds	r2, r7, r3
 800681a:	2308      	movs	r3, #8
 800681c:	18fb      	adds	r3, r7, r3
 800681e:	0011      	movs	r1, r2
 8006820:	0018      	movs	r0, r3
 8006822:	f000 fa39 	bl	8006c98 <makeTime>
 8006826:	0002      	movs	r2, r0
 8006828:	4b05      	ldr	r3, [pc, #20]	@ (8006840 <ParseTime+0x134>)
 800682a:	601a      	str	r2, [r3, #0]
//    Debug("posixBootTime: %lu", posixBootTime);
  }
}
 800682c:	46c0      	nop			@ (mov r8, r8)
 800682e:	46bd      	mov	sp, r7
 8006830:	b009      	add	sp, #36	@ 0x24
 8006832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006834:	08023c6c 	.word	0x08023c6c
 8006838:	08023ca4 	.word	0x08023ca4
 800683c:	08023ca8 	.word	0x08023ca8
 8006840:	20000d70 	.word	0x20000d70

08006844 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800685e:	4b09      	ldr	r3, [pc, #36]	@ (8006884 <RTC_SetTime+0x40>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6879      	ldr	r1, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	0018      	movs	r0, r3
 8006868:	f00f fb3c 	bl	8015ee4 <HAL_RTC_SetTime>
 800686c:	1e03      	subs	r3, r0, #0
 800686e:	d005      	beq.n	800687c <RTC_SetTime+0x38>
        // Foutafhandeling
      Error("Error setting time to RTC");
 8006870:	4a05      	ldr	r2, [pc, #20]	@ (8006888 <RTC_SetTime+0x44>)
 8006872:	4b06      	ldr	r3, [pc, #24]	@ (800688c <RTC_SetTime+0x48>)
 8006874:	0019      	movs	r1, r3
 8006876:	2001      	movs	r0, #1
 8006878:	f007 fdbe 	bl	800e3f8 <CreateLine>
    }
}
 800687c:	46c0      	nop			@ (mov r8, r8)
 800687e:	46bd      	mov	sp, r7
 8006880:	b002      	add	sp, #8
 8006882:	bd80      	pop	{r7, pc}
 8006884:	20000d6c 	.word	0x20000d6c
 8006888:	08023cdc 	.word	0x08023cdc
 800688c:	08023cf8 	.word	0x08023cf8

08006890 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006898:	4b16      	ldr	r3, [pc, #88]	@ (80068f4 <RTC_SetDate+0x64>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6879      	ldr	r1, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	0018      	movs	r0, r3
 80068a2:	f00f fc27 	bl	80160f4 <HAL_RTC_SetDate>
 80068a6:	1e03      	subs	r3, r0, #0
 80068a8:	d005      	beq.n	80068b6 <RTC_SetDate+0x26>
        // Foutafhandeling
      Error("Error setting date to RTC");
 80068aa:	4a13      	ldr	r2, [pc, #76]	@ (80068f8 <RTC_SetDate+0x68>)
 80068ac:	4b13      	ldr	r3, [pc, #76]	@ (80068fc <RTC_SetDate+0x6c>)
 80068ae:	0019      	movs	r1, r3
 80068b0:	2001      	movs	r0, #1
 80068b2:	f007 fda1 	bl	800e3f8 <CreateLine>
    }
    //check the backup register
    if (HAL_RTCEx_BKUPRead(RealTime_Handle, RTC_BKP_DR1) != 0xBEBE) {
 80068b6:	4b0f      	ldr	r3, [pc, #60]	@ (80068f4 <RTC_SetDate+0x64>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2101      	movs	r1, #1
 80068bc:	0018      	movs	r0, r3
 80068be:	f00f ff5f 	bl	8016780 <HAL_RTCEx_BKUPRead>
 80068c2:	0003      	movs	r3, r0
 80068c4:	4a0e      	ldr	r2, [pc, #56]	@ (8006900 <RTC_SetDate+0x70>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d010      	beq.n	80068ec <RTC_SetDate+0x5c>
      // Write Back Up Register 1 Data
      Debug("writing backup register");
 80068ca:	4a0e      	ldr	r2, [pc, #56]	@ (8006904 <RTC_SetDate+0x74>)
 80068cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006908 <RTC_SetDate+0x78>)
 80068ce:	0019      	movs	r1, r3
 80068d0:	2003      	movs	r0, #3
 80068d2:	f007 fd91 	bl	800e3f8 <CreateLine>
      HAL_PWR_EnableBkUpAccess();
 80068d6:	f00e fa85 	bl	8014de4 <HAL_PWR_EnableBkUpAccess>
      // Writes a data in a RTC Backup data Register 1
      HAL_RTCEx_BKUPWrite(RealTime_Handle, RTC_BKP_DR1, 0xBEBE);
 80068da:	4b06      	ldr	r3, [pc, #24]	@ (80068f4 <RTC_SetDate+0x64>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a08      	ldr	r2, [pc, #32]	@ (8006900 <RTC_SetDate+0x70>)
 80068e0:	2101      	movs	r1, #1
 80068e2:	0018      	movs	r0, r3
 80068e4:	f00f ff34 	bl	8016750 <HAL_RTCEx_BKUPWrite>
      HAL_PWR_DisableBkUpAccess();
 80068e8:	f00e fa8a 	bl	8014e00 <HAL_PWR_DisableBkUpAccess>
    }
}
 80068ec:	46c0      	nop			@ (mov r8, r8)
 80068ee:	46bd      	mov	sp, r7
 80068f0:	b002      	add	sp, #8
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	20000d6c 	.word	0x20000d6c
 80068f8:	08023cfc 	.word	0x08023cfc
 80068fc:	08023cf8 	.word	0x08023cf8
 8006900:	0000bebe 	.word	0x0000bebe
 8006904:	08023d18 	.word	0x08023d18
 8006908:	08023ca4 	.word	0x08023ca4

0800690c <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800690c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
uint8_t t = 1;
 8006916:	250f      	movs	r5, #15
 8006918:	197b      	adds	r3, r7, r5
 800691a:	2201      	movs	r2, #1
 800691c:	701a      	strb	r2, [r3, #0]
uint8_t prevValue = 0;
 800691e:	230e      	movs	r3, #14
 8006920:	18fb      	adds	r3, r7, r3
 8006922:	2200      	movs	r2, #0
 8006924:	701a      	strb	r2, [r3, #0]
Battery_Status status;
  status = powerCheck();
 8006926:	260c      	movs	r6, #12
 8006928:	19bc      	adds	r4, r7, r6
 800692a:	f006 fe19 	bl	800d560 <powerCheck>
 800692e:	0003      	movs	r3, r0
 8006930:	7023      	strb	r3, [r4, #0]
  if ( status == BATTERY_CRITICAL) {
 8006932:	19bb      	adds	r3, r7, r6
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d104      	bne.n	8006944 <RTC_GetTime+0x38>
//    To be able to read the RTC calendar register when the APB1 clock frequency is less than
//    seven times the RTC clock frequency (7*RTCLCK), the software must read the calendar
//    time and date registers twice.
    t++; //
 800693a:	197b      	adds	r3, r7, r5
 800693c:	781a      	ldrb	r2, [r3, #0]
 800693e:	197b      	adds	r3, r7, r5
 8006940:	3201      	adds	r2, #1
 8006942:	701a      	strb	r2, [r3, #0]
  }
  for (uint8_t i= 0; i < t; i++) {
 8006944:	230d      	movs	r3, #13
 8006946:	18fb      	adds	r3, r7, r3
 8006948:	2200      	movs	r2, #0
 800694a:	701a      	strb	r2, [r3, #0]
 800694c:	e039      	b.n	80069c2 <RTC_GetTime+0xb6>
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800694e:	4b23      	ldr	r3, [pc, #140]	@ (80069dc <RTC_GetTime+0xd0>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	0018      	movs	r0, r3
 8006958:	f00f fb6e 	bl	8016038 <HAL_RTC_GetTime>
 800695c:	1e03      	subs	r3, r0, #0
 800695e:	d005      	beq.n	800696c <RTC_GetTime+0x60>
      Error("Error getting time from RTC");
 8006960:	4a1f      	ldr	r2, [pc, #124]	@ (80069e0 <RTC_GetTime+0xd4>)
 8006962:	4b20      	ldr	r3, [pc, #128]	@ (80069e4 <RTC_GetTime+0xd8>)
 8006964:	0019      	movs	r1, r3
 8006966:	2001      	movs	r0, #1
 8006968:	f007 fd46 	bl	800e3f8 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 800696c:	4b1b      	ldr	r3, [pc, #108]	@ (80069dc <RTC_GetTime+0xd0>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	2200      	movs	r2, #0
 8006974:	0018      	movs	r0, r3
 8006976:	f00f fc51 	bl	801621c <HAL_RTC_GetDate>
 800697a:	1e03      	subs	r3, r0, #0
 800697c:	d005      	beq.n	800698a <RTC_GetTime+0x7e>
      Error("Error getting date from RTC");
 800697e:	4a1a      	ldr	r2, [pc, #104]	@ (80069e8 <RTC_GetTime+0xdc>)
 8006980:	4b18      	ldr	r3, [pc, #96]	@ (80069e4 <RTC_GetTime+0xd8>)
 8006982:	0019      	movs	r1, r3
 8006984:	2001      	movs	r0, #1
 8006986:	f007 fd37 	bl	800e3f8 <CreateLine>
    }
    if ( status == BATTERY_CRITICAL) {
 800698a:	230c      	movs	r3, #12
 800698c:	18fb      	adds	r3, r7, r3
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d110      	bne.n	80069b6 <RTC_GetTime+0xaa>
      if (prevValue != gTime->Hours) {
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	210e      	movs	r1, #14
 800699a:	187a      	adds	r2, r7, r1
 800699c:	7812      	ldrb	r2, [r2, #0]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d018      	beq.n	80069d4 <RTC_GetTime+0xc8>
        prevValue = gTime->Hours;
 80069a2:	187b      	adds	r3, r7, r1
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	7812      	ldrb	r2, [r2, #0]
 80069a8:	701a      	strb	r2, [r3, #0]
        t++;
 80069aa:	210f      	movs	r1, #15
 80069ac:	187b      	adds	r3, r7, r1
 80069ae:	781a      	ldrb	r2, [r3, #0]
 80069b0:	187b      	adds	r3, r7, r1
 80069b2:	3201      	adds	r2, #1
 80069b4:	701a      	strb	r2, [r3, #0]
  for (uint8_t i= 0; i < t; i++) {
 80069b6:	210d      	movs	r1, #13
 80069b8:	187b      	adds	r3, r7, r1
 80069ba:	781a      	ldrb	r2, [r3, #0]
 80069bc:	187b      	adds	r3, r7, r1
 80069be:	3201      	adds	r2, #1
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	230d      	movs	r3, #13
 80069c4:	18fa      	adds	r2, r7, r3
 80069c6:	230f      	movs	r3, #15
 80069c8:	18fb      	adds	r3, r7, r3
 80069ca:	7812      	ldrb	r2, [r2, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d3bd      	bcc.n	800694e <RTC_GetTime+0x42>
 80069d2:	e000      	b.n	80069d6 <RTC_GetTime+0xca>
      }
      else {
        return;
 80069d4:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
}
 80069d6:	46bd      	mov	sp, r7
 80069d8:	b005      	add	sp, #20
 80069da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069dc:	20000d6c 	.word	0x20000d6c
 80069e0:	08023d30 	.word	0x08023d30
 80069e4:	08023cf8 	.word	0x08023cf8
 80069e8:	08023d4c 	.word	0x08023d4c

080069ec <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80069f2:	003a      	movs	r2, r7
 80069f4:	1d3b      	adds	r3, r7, #4
 80069f6:	0011      	movs	r1, r2
 80069f8:	0018      	movs	r0, r3
 80069fa:	f7ff ff87 	bl	800690c <RTC_GetTime>
  return currentDate.WeekDay;
 80069fe:	003b      	movs	r3, r7
 8006a00:	781b      	ldrb	r3, [r3, #0]
}
 8006a02:	0018      	movs	r0, r3
 8006a04:	46bd      	mov	sp, r7
 8006a06:	b006      	add	sp, #24
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <getPosixTime>:

uint32_t getPosixTime(void) {
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b086      	sub	sp, #24
 8006a0e:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006a10:	003a      	movs	r2, r7
 8006a12:	1d3b      	adds	r3, r7, #4
 8006a14:	0011      	movs	r1, r2
 8006a16:	0018      	movs	r0, r3
 8006a18:	f7ff ff78 	bl	800690c <RTC_GetTime>
  return makeTime(&currentDate, &currentTime);
 8006a1c:	1d3a      	adds	r2, r7, #4
 8006a1e:	003b      	movs	r3, r7
 8006a20:	0011      	movs	r1, r2
 8006a22:	0018      	movs	r0, r3
 8006a24:	f000 f938 	bl	8006c98 <makeTime>
 8006a28:	0003      	movs	r3, r0
}
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	b006      	add	sp, #24
 8006a30:	bd80      	pop	{r7, pc}
	...

08006a34 <getUTCfromPosixTime>:

void getUTCfromPosixTime(uint32_t posixTime, char* strbuf1) {
 8006a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a36:	b08d      	sub	sp, #52	@ 0x34
 8006a38:	af04      	add	r7, sp, #16
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
//  RTC_GetTime(&currentTime, &currentDate);
  breakPosixTime(posixTime, &currentDate, &currentTime);
 8006a3e:	240c      	movs	r4, #12
 8006a40:	193a      	adds	r2, r7, r4
 8006a42:	2508      	movs	r5, #8
 8006a44:	1979      	adds	r1, r7, r5
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	0018      	movs	r0, r3
 8006a4a:	f000 f9ef 	bl	8006e2c <breakPosixTime>
//  printf("%s %d-%d-%d %dh:%dm:%ds\r\n", dayNames[currentDate.WeekDay - 1], currentDate.Date, currentDate.Month, currentDate.Year,
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a4e:	002a      	movs	r2, r5
 8006a50:	18bb      	adds	r3, r7, r2
 8006a52:	789b      	ldrb	r3, [r3, #2]
 8006a54:	001e      	movs	r6, r3
 8006a56:	18bb      	adds	r3, r7, r2
 8006a58:	785b      	ldrb	r3, [r3, #1]
 8006a5a:	469c      	mov	ip, r3
 8006a5c:	18bb      	adds	r3, r7, r2
 8006a5e:	78db      	ldrb	r3, [r3, #3]
 8006a60:	001a      	movs	r2, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006a62:	0021      	movs	r1, r4
 8006a64:	187b      	adds	r3, r7, r1
 8006a66:	781b      	ldrb	r3, [r3, #0]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a68:	001c      	movs	r4, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006a6a:	187b      	adds	r3, r7, r1
 8006a6c:	785b      	ldrb	r3, [r3, #1]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a6e:	001d      	movs	r5, r3
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8006a70:	187b      	adds	r3, r7, r1
 8006a72:	789b      	ldrb	r3, [r3, #2]
  sprintf(strbuf1, "%02d-%02d-%02d %02dh:%02dm:%02ds\r\n", currentDate.Date, currentDate.Month, currentDate.Year,
 8006a74:	4906      	ldr	r1, [pc, #24]	@ (8006a90 <getUTCfromPosixTime+0x5c>)
 8006a76:	6838      	ldr	r0, [r7, #0]
 8006a78:	9303      	str	r3, [sp, #12]
 8006a7a:	9502      	str	r5, [sp, #8]
 8006a7c:	9401      	str	r4, [sp, #4]
 8006a7e:	9200      	str	r2, [sp, #0]
 8006a80:	4663      	mov	r3, ip
 8006a82:	0032      	movs	r2, r6
 8006a84:	f019 fa22 	bl	801fecc <siprintf>
}
 8006a88:	46c0      	nop			@ (mov r8, r8)
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	b009      	add	sp, #36	@ 0x24
 8006a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a90:	08023d68 	.word	0x08023d68

08006a94 <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
//    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(RTC_IRQn);

    // ==== sleep insert
//    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006a9c:	4b10      	ldr	r3, [pc, #64]	@ (8006ae0 <RTC_SetWakeUpTimer+0x4c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	0018      	movs	r0, r3
 8006aa2:	f00f fdb9 	bl	8016618 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 8006aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8006ae0 <RTC_SetWakeUpTimer+0x4c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	22ff      	movs	r2, #255	@ 0xff
 8006ab0:	401a      	ands	r2, r3
 8006ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae0 <RTC_SetWakeUpTimer+0x4c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	490a      	ldr	r1, [pc, #40]	@ (8006ae4 <RTC_SetWakeUpTimer+0x50>)
 8006aba:	430a      	orrs	r2, r1
 8006abc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006abe:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae8 <RTC_SetWakeUpTimer+0x54>)
 8006ac0:	2280      	movs	r2, #128	@ 0x80
 8006ac2:	0352      	lsls	r2, r2, #13
 8006ac4:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 8006ac6:	4b06      	ldr	r3, [pc, #24]	@ (8006ae0 <RTC_SetWakeUpTimer+0x4c>)
 8006ac8:	6818      	ldr	r0, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	2204      	movs	r2, #4
 8006ad0:	0019      	movs	r1, r3
 8006ad2:	f00f fcc9 	bl	8016468 <HAL_RTCEx_SetWakeUpTimer_IT>
     // ==== end sleep insert
}
 8006ad6:	46c0      	nop			@ (mov r8, r8)
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	b002      	add	sp, #8
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	46c0      	nop			@ (mov r8, r8)
 8006ae0:	20000d6c 	.word	0x20000d6c
 8006ae4:	fffffb7f 	.word	0xfffffb7f
 8006ae8:	40010400 	.word	0x40010400

08006aec <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8006af0:	4a0c      	ldr	r2, [pc, #48]	@ (8006b24 <Enter_Standby_Mode+0x38>)
 8006af2:	4b0d      	ldr	r3, [pc, #52]	@ (8006b28 <Enter_Standby_Mode+0x3c>)
 8006af4:	0019      	movs	r1, r3
 8006af6:	2003      	movs	r0, #3
 8006af8:	f007 fc7e 	bl	800e3f8 <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8006afc:	2064      	movs	r0, #100	@ 0x64
 8006afe:	f008 f8db 	bl	800ecb8 <HAL_Delay>
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 8006b02:	4b0a      	ldr	r3, [pc, #40]	@ (8006b2c <Enter_Standby_Mode+0x40>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	0018      	movs	r0, r3
 8006b08:	f00f fd86 	bl	8016618 <HAL_RTCEx_DeactivateWakeUpTimer>
    // Schakel Standby Mode in only is battery is drained
    HAL_SuspendTick();
 8006b0c:	f008 f8f8 	bl	800ed00 <HAL_SuspendTick>
    HAL_PWR_EnterSTANDBYMode();
 8006b10:	f00e f9e2 	bl	8014ed8 <HAL_PWR_EnterSTANDBYMode>
    SystemClock_Config();
 8006b14:	f001 fa76 	bl	8008004 <SystemClock_Config>
    HAL_ResumeTick(); // Enable SysTick after wake-up
 8006b18:	f008 f900 	bl	800ed1c <HAL_ResumeTick>
}
 8006b1c:	46c0      	nop			@ (mov r8, r8)
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	46c0      	nop			@ (mov r8, r8)
 8006b24:	08023dbc 	.word	0x08023dbc
 8006b28:	08023ca4 	.word	0x08023ca4
 8006b2c:	20000d6c 	.word	0x20000d6c

08006b30 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	0002      	movs	r2, r0
 8006b38:	1dbb      	adds	r3, r7, #6
 8006b3a:	801a      	strh	r2, [r3, #0]
  if (sen5x_On) {
 8006b3c:	4b43      	ldr	r3, [pc, #268]	@ (8006c4c <Enter_Stop_Mode+0x11c>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <Enter_Stop_Mode+0x18>
    sen5x_Power_Off();
 8006b44:	f002 fae4 	bl	8009110 <sen5x_Power_Off>
  }
  Info("Battery voltage %.02fV", ReadBatteryVoltage());
 8006b48:	f7ff fbbe 	bl	80062c8 <ReadBatteryVoltage>
 8006b4c:	1c03      	adds	r3, r0, #0
 8006b4e:	1c18      	adds	r0, r3, #0
 8006b50:	f7fc fc88 	bl	8003464 <__aeabi_f2d>
 8006b54:	0002      	movs	r2, r0
 8006b56:	000b      	movs	r3, r1
 8006b58:	483d      	ldr	r0, [pc, #244]	@ (8006c50 <Enter_Stop_Mode+0x120>)
 8006b5a:	493e      	ldr	r1, [pc, #248]	@ (8006c54 <Enter_Stop_Mode+0x124>)
 8006b5c:	9200      	str	r2, [sp, #0]
 8006b5e:	9301      	str	r3, [sp, #4]
 8006b60:	0002      	movs	r2, r0
 8006b62:	2002      	movs	r0, #2
 8006b64:	f007 fc48 	bl	800e3f8 <CreateLine>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 8006b68:	1dbb      	adds	r3, r7, #6
 8006b6a:	881b      	ldrh	r3, [r3, #0]
 8006b6c:	4a3a      	ldr	r2, [pc, #232]	@ (8006c58 <Enter_Stop_Mode+0x128>)
 8006b6e:	493b      	ldr	r1, [pc, #236]	@ (8006c5c <Enter_Stop_Mode+0x12c>)
 8006b70:	2003      	movs	r0, #3
 8006b72:	f007 fc41 	bl	800e3f8 <CreateLine>
  getUTCfromPosixTime(getPosixTime() + sleepTime, strbuf);
 8006b76:	f7ff ff48 	bl	8006a0a <getPosixTime>
 8006b7a:	0002      	movs	r2, r0
 8006b7c:	1dbb      	adds	r3, r7, #6
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	18d3      	adds	r3, r2, r3
 8006b82:	4a37      	ldr	r2, [pc, #220]	@ (8006c60 <Enter_Stop_Mode+0x130>)
 8006b84:	0011      	movs	r1, r2
 8006b86:	0018      	movs	r0, r3
 8006b88:	f7ff ff54 	bl	8006a34 <getUTCfromPosixTime>
  Info("The system will wake up at %s.", strbuf);
 8006b8c:	4b34      	ldr	r3, [pc, #208]	@ (8006c60 <Enter_Stop_Mode+0x130>)
 8006b8e:	4a35      	ldr	r2, [pc, #212]	@ (8006c64 <Enter_Stop_Mode+0x134>)
 8006b90:	4930      	ldr	r1, [pc, #192]	@ (8006c54 <Enter_Stop_Mode+0x124>)
 8006b92:	2002      	movs	r0, #2
 8006b94:	f007 fc30 	bl	800e3f8 <CreateLine>
  HAL_Delay(100);
 8006b98:	2064      	movs	r0, #100	@ 0x64
 8006b9a:	f008 f88d 	bl	800ecb8 <HAL_Delay>
  HAL_SuspendTick();
 8006b9e:	f008 f8af 	bl	800ed00 <HAL_SuspendTick>
  RTC_SetWakeUpTimer(sleepTime);
 8006ba2:	1dbb      	adds	r3, r7, #6
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	f7ff ff74 	bl	8006a94 <RTC_SetWakeUpTimer>
//  HAL_PWREx_EnableFlashPowerDown();  // is default stopped in l0xx cpu's
//  SET_BIT(PWR->CR, PWR_CR_ULP); seems of no influence
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006bac:	2101      	movs	r1, #1
 8006bae:	2001      	movs	r0, #1
 8006bb0:	f00e f936 	bl	8014e20 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 8006bb4:	f001 fa26 	bl	8008004 <SystemClock_Config>
  if (sen5x_enable((uint32_t)sleepTime)) {
 8006bb8:	1dbb      	adds	r3, r7, #6
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	f002 fa35 	bl	800902c <sen5x_enable>
 8006bc2:	1e03      	subs	r3, r0, #0
 8006bc4:	d01c      	beq.n	8006c00 <Enter_Stop_Mode+0xd0>
    showTime();
 8006bc6:	f7ff fc65 	bl	8006494 <showTime>
    set_light_on_state();
 8006bca:	f002 ff29 	bl	8009a20 <set_light_on_state>
    if (!userToggle) {
 8006bce:	4b26      	ldr	r3, [pc, #152]	@ (8006c68 <Enter_Stop_Mode+0x138>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	4053      	eors	r3, r2
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d011      	beq.n	8006c00 <Enter_Stop_Mode+0xd0>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 27 + 3s measurement time is approx 30 seconds
 8006bdc:	201c      	movs	r0, #28
 8006bde:	f7ff ff59 	bl	8006a94 <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006be2:	4a1d      	ldr	r2, [pc, #116]	@ (8006c58 <Enter_Stop_Mode+0x128>)
 8006be4:	491d      	ldr	r1, [pc, #116]	@ (8006c5c <Enter_Stop_Mode+0x12c>)
 8006be6:	231c      	movs	r3, #28
 8006be8:	2003      	movs	r0, #3
 8006bea:	f007 fc05 	bl	800e3f8 <CreateLine>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006bee:	2101      	movs	r1, #1
 8006bf0:	2001      	movs	r0, #1
 8006bf2:	f00e f915 	bl	8014e20 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8006bf6:	f001 fa05 	bl	8008004 <SystemClock_Config>
//      setsen5xReadTimer(2000);
      setsen5xReadTimer(0);
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	f002 f9f4 	bl	8008fe8 <setsen5xReadTimer>
    }
  }
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006c00:	f008 f88c 	bl	800ed1c <HAL_ResumeTick>
  showTime();
 8006c04:	f7ff fc46 	bl	8006494 <showTime>
  ResetDBACalculator();  // reset the DBA average calculation
 8006c08:	f001 fe7a 	bl	8008900 <ResetDBACalculator>
  ResetSGP40samplecounter();
 8006c0c:	f004 fd3c 	bl	800b688 <ResetSGP40samplecounter>
  setsen5xSamplecounter(0);
 8006c10:	2000      	movs	r0, #0
 8006c12:	f002 f9fb 	bl	800900c <setsen5xSamplecounter>
//  setESPTimeStamp(3000);
  setESPTimeStamp(2500);
 8006c16:	4b15      	ldr	r3, [pc, #84]	@ (8006c6c <Enter_Stop_Mode+0x13c>)
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f7fc fdc9 	bl	80037b0 <setESPTimeStamp>
  setSGP40TimeStamp(0);
 8006c1e:	2000      	movs	r0, #0
 8006c20:	f004 fd20 	bl	800b664 <setSGP40TimeStamp>
  setHIDSTimeStamp(0);
 8006c24:	2000      	movs	r0, #0
 8006c26:	f007 fdab 	bl	800e780 <setHIDSTimeStamp>
  setMICTimeStamp(0);
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	f001 fe56 	bl	80088dc <setMICTimeStamp>
  ESPTransmitDone = false;
 8006c30:	4b0f      	ldr	r3, [pc, #60]	@ (8006c70 <Enter_Stop_Mode+0x140>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	701a      	strb	r2, [r3, #0]
  deviceTimeOut = HAL_GetTick() + 2300;
 8006c36:	f008 f835 	bl	800eca4 <HAL_GetTick>
 8006c3a:	0003      	movs	r3, r0
 8006c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8006c74 <Enter_Stop_Mode+0x144>)
 8006c3e:	189a      	adds	r2, r3, r2
 8006c40:	4b0d      	ldr	r3, [pc, #52]	@ (8006c78 <Enter_Stop_Mode+0x148>)
 8006c42:	601a      	str	r2, [r3, #0]
}
 8006c44:	46c0      	nop			@ (mov r8, r8)
 8006c46:	46bd      	mov	sp, r7
 8006c48:	b002      	add	sp, #8
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	20001259 	.word	0x20001259
 8006c50:	08023de0 	.word	0x08023de0
 8006c54:	08023df8 	.word	0x08023df8
 8006c58:	08023dfc 	.word	0x08023dfc
 8006c5c:	08023ca4 	.word	0x08023ca4
 8006c60:	20000d74 	.word	0x20000d74
 8006c64:	08023e20 	.word	0x08023e20
 8006c68:	200021f2 	.word	0x200021f2
 8006c6c:	000009c4 	.word	0x000009c4
 8006c70:	20000553 	.word	0x20000553
 8006c74:	000008fc 	.word	0x000008fc
 8006c78:	20000fbc 	.word	0x20000fbc

08006c7c <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006c84:	4b03      	ldr	r3, [pc, #12]	@ (8006c94 <InitClock+0x18>)
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	601a      	str	r2, [r3, #0]
}
 8006c8a:	46c0      	nop			@ (mov r8, r8)
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	b002      	add	sp, #8
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	46c0      	nop			@ (mov r8, r8)
 8006c94:	20000d6c 	.word	0x20000d6c

08006c98 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	78db      	ldrb	r3, [r3, #3]
 8006ca6:	001a      	movs	r2, r3
 8006ca8:	0013      	movs	r3, r2
 8006caa:	025b      	lsls	r3, r3, #9
 8006cac:	189b      	adds	r3, r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	189b      	adds	r3, r3, r2
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	189b      	adds	r3, r3, r2
 8006cb6:	011a      	lsls	r2, r3, #4
 8006cb8:	1ad2      	subs	r2, r2, r3
 8006cba:	01d3      	lsls	r3, r2, #7
 8006cbc:	001a      	movs	r2, r3
 8006cbe:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	e028      	b.n	8006d18 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4a53      	ldr	r2, [pc, #332]	@ (8006e18 <makeTime+0x180>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	db21      	blt.n	8006d12 <makeTime+0x7a>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	4a52      	ldr	r2, [pc, #328]	@ (8006e1c <makeTime+0x184>)
 8006cd2:	4694      	mov	ip, r2
 8006cd4:	4463      	add	r3, ip
 8006cd6:	001a      	movs	r2, r3
 8006cd8:	2303      	movs	r3, #3
 8006cda:	4013      	ands	r3, r2
 8006cdc:	d119      	bne.n	8006d12 <makeTime+0x7a>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4a4e      	ldr	r2, [pc, #312]	@ (8006e1c <makeTime+0x184>)
 8006ce2:	4694      	mov	ip, r2
 8006ce4:	4463      	add	r3, ip
 8006ce6:	2164      	movs	r1, #100	@ 0x64
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f7f9 fbcb 	bl	8000484 <__aeabi_idivmod>
 8006cee:	1e0b      	subs	r3, r1, #0
 8006cf0:	d10a      	bne.n	8006d08 <makeTime+0x70>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	4a49      	ldr	r2, [pc, #292]	@ (8006e1c <makeTime+0x184>)
 8006cf6:	4694      	mov	ip, r2
 8006cf8:	4463      	add	r3, ip
 8006cfa:	22c8      	movs	r2, #200	@ 0xc8
 8006cfc:	0051      	lsls	r1, r2, #1
 8006cfe:	0018      	movs	r0, r3
 8006d00:	f7f9 fbc0 	bl	8000484 <__aeabi_idivmod>
 8006d04:	1e0b      	subs	r3, r1, #0
 8006d06:	d104      	bne.n	8006d12 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4a45      	ldr	r2, [pc, #276]	@ (8006e20 <makeTime+0x188>)
 8006d0c:	4694      	mov	ip, r2
 8006d0e:	4463      	add	r3, ip
 8006d10:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	3301      	adds	r3, #1
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	78db      	ldrb	r3, [r3, #3]
 8006d1c:	001a      	movs	r2, r3
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4293      	cmp	r3, r2
 8006d22:	dbd0      	blt.n	8006cc6 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006d24:	2301      	movs	r3, #1
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	e03c      	b.n	8006da4 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d125      	bne.n	8006d7c <makeTime+0xe4>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	78db      	ldrb	r3, [r3, #3]
 8006d34:	4a39      	ldr	r2, [pc, #228]	@ (8006e1c <makeTime+0x184>)
 8006d36:	4694      	mov	ip, r2
 8006d38:	4463      	add	r3, ip
 8006d3a:	001a      	movs	r2, r3
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	4013      	ands	r3, r2
 8006d40:	d11c      	bne.n	8006d7c <makeTime+0xe4>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	78db      	ldrb	r3, [r3, #3]
 8006d46:	4a35      	ldr	r2, [pc, #212]	@ (8006e1c <makeTime+0x184>)
 8006d48:	4694      	mov	ip, r2
 8006d4a:	4463      	add	r3, ip
 8006d4c:	2164      	movs	r1, #100	@ 0x64
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f7f9 fb98 	bl	8000484 <__aeabi_idivmod>
 8006d54:	1e0b      	subs	r3, r1, #0
 8006d56:	d10b      	bne.n	8006d70 <makeTime+0xd8>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	78db      	ldrb	r3, [r3, #3]
 8006d5c:	4a2f      	ldr	r2, [pc, #188]	@ (8006e1c <makeTime+0x184>)
 8006d5e:	4694      	mov	ip, r2
 8006d60:	4463      	add	r3, ip
 8006d62:	22c8      	movs	r2, #200	@ 0xc8
 8006d64:	0051      	lsls	r1, r2, #1
 8006d66:	0018      	movs	r0, r3
 8006d68:	f7f9 fb8c 	bl	8000484 <__aeabi_idivmod>
 8006d6c:	1e0b      	subs	r3, r1, #0
 8006d6e:	d105      	bne.n	8006d7c <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	4a2c      	ldr	r2, [pc, #176]	@ (8006e24 <makeTime+0x18c>)
 8006d74:	4694      	mov	ip, r2
 8006d76:	4463      	add	r3, ip
 8006d78:	60bb      	str	r3, [r7, #8]
 8006d7a:	e010      	b.n	8006d9e <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	4a29      	ldr	r2, [pc, #164]	@ (8006e28 <makeTime+0x190>)
 8006d82:	5cd3      	ldrb	r3, [r2, r3]
 8006d84:	001a      	movs	r2, r3
 8006d86:	0013      	movs	r3, r2
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	189b      	adds	r3, r3, r2
 8006d8c:	011a      	lsls	r2, r3, #4
 8006d8e:	1ad2      	subs	r2, r2, r3
 8006d90:	0113      	lsls	r3, r2, #4
 8006d92:	1a9b      	subs	r3, r3, r2
 8006d94:	01db      	lsls	r3, r3, #7
 8006d96:	001a      	movs	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	189b      	adds	r3, r3, r2
 8006d9c:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3301      	adds	r3, #1
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	785b      	ldrb	r3, [r3, #1]
 8006da8:	001a      	movs	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4293      	cmp	r3, r2
 8006dae:	dbbc      	blt.n	8006d2a <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	789b      	ldrb	r3, [r3, #2]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	001a      	movs	r2, r3
 8006db8:	0013      	movs	r3, r2
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	189b      	adds	r3, r3, r2
 8006dbe:	011a      	lsls	r2, r3, #4
 8006dc0:	1ad2      	subs	r2, r2, r3
 8006dc2:	0113      	lsls	r3, r2, #4
 8006dc4:	1a9b      	subs	r3, r3, r2
 8006dc6:	01db      	lsls	r3, r3, #7
 8006dc8:	001a      	movs	r2, r3
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	189b      	adds	r3, r3, r2
 8006dce:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	001a      	movs	r2, r3
 8006dd6:	0013      	movs	r3, r2
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	1a9b      	subs	r3, r3, r2
 8006ddc:	011a      	lsls	r2, r3, #4
 8006dde:	1ad2      	subs	r2, r2, r3
 8006de0:	0113      	lsls	r3, r2, #4
 8006de2:	001a      	movs	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	189b      	adds	r3, r3, r2
 8006de8:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	785b      	ldrb	r3, [r3, #1]
 8006dee:	001a      	movs	r2, r3
 8006df0:	0013      	movs	r3, r2
 8006df2:	011b      	lsls	r3, r3, #4
 8006df4:	1a9b      	subs	r3, r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	001a      	movs	r2, r3
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	189b      	adds	r3, r3, r2
 8006dfe:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	789b      	ldrb	r3, [r3, #2]
 8006e04:	001a      	movs	r2, r3
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	189b      	adds	r3, r3, r2
 8006e0a:	60bb      	str	r3, [r7, #8]
  return seconds;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
}
 8006e0e:	0018      	movs	r0, r3
 8006e10:	46bd      	mov	sp, r7
 8006e12:	b004      	add	sp, #16
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	46c0      	nop			@ (mov r8, r8)
 8006e18:	fffff84f 	.word	0xfffff84f
 8006e1c:	000007b2 	.word	0x000007b2
 8006e20:	00015180 	.word	0x00015180
 8006e24:	00263b80 	.word	0x00263b80
 8006e28:	08025384 	.word	0x08025384

08006e2c <breakPosixTime>:

void breakPosixTime(uint32_t timeInput, RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006e2c:	b590      	push	{r4, r7, lr}
 8006e2e:	b089      	sub	sp, #36	@ 0x24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  uint8_t year;
  uint8_t month, monthLength;
  uint32_t time;
  uint32_t days;

  time = timeInput;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	61bb      	str	r3, [r7, #24]
  currentTime->Seconds = time % 60;
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	213c      	movs	r1, #60	@ 0x3c
 8006e40:	0018      	movs	r0, r3
 8006e42:	f7f9 fa35 	bl	80002b0 <__aeabi_uidivmod>
 8006e46:	000b      	movs	r3, r1
 8006e48:	b2da      	uxtb	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	709a      	strb	r2, [r3, #2]
  time /= 60; // now it is minutes
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	213c      	movs	r1, #60	@ 0x3c
 8006e52:	0018      	movs	r0, r3
 8006e54:	f7f9 f9a6 	bl	80001a4 <__udivsi3>
 8006e58:	0003      	movs	r3, r0
 8006e5a:	61bb      	str	r3, [r7, #24]
  currentTime->Minutes = time % 60;
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	213c      	movs	r1, #60	@ 0x3c
 8006e60:	0018      	movs	r0, r3
 8006e62:	f7f9 fa25 	bl	80002b0 <__aeabi_uidivmod>
 8006e66:	000b      	movs	r3, r1
 8006e68:	b2da      	uxtb	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	705a      	strb	r2, [r3, #1]
  time /= 60; // now it is hours
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	213c      	movs	r1, #60	@ 0x3c
 8006e72:	0018      	movs	r0, r3
 8006e74:	f7f9 f996 	bl	80001a4 <__udivsi3>
 8006e78:	0003      	movs	r3, r0
 8006e7a:	61bb      	str	r3, [r7, #24]
  currentTime->Hours = time % 24;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	2118      	movs	r1, #24
 8006e80:	0018      	movs	r0, r3
 8006e82:	f7f9 fa15 	bl	80002b0 <__aeabi_uidivmod>
 8006e86:	000b      	movs	r3, r1
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	701a      	strb	r2, [r3, #0]
  time /= 24; // now it is days
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	2118      	movs	r1, #24
 8006e92:	0018      	movs	r0, r3
 8006e94:	f7f9 f986 	bl	80001a4 <__udivsi3>
 8006e98:	0003      	movs	r3, r0
 8006e9a:	61bb      	str	r3, [r7, #24]
  currentDate->WeekDay = ((time - 1) % 7) + 1;  // Monday is day 1, since sat 1-1-2000
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	2107      	movs	r1, #7
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	f7f9 fa04 	bl	80002b0 <__aeabi_uidivmod>
 8006ea8:	000b      	movs	r3, r1
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	3301      	adds	r3, #1
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	701a      	strb	r2, [r3, #0]
  year = 0;
 8006eb4:	231f      	movs	r3, #31
 8006eb6:	18fb      	adds	r3, r7, r3
 8006eb8:	2200      	movs	r2, #0
 8006eba:	701a      	strb	r2, [r3, #0]
  days = 0;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	617b      	str	r3, [r7, #20]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006ec0:	e005      	b.n	8006ece <breakPosixTime+0xa2>
    year++;
 8006ec2:	211f      	movs	r1, #31
 8006ec4:	187b      	adds	r3, r7, r1
 8006ec6:	781a      	ldrb	r2, [r3, #0]
 8006ec8:	187b      	adds	r3, r7, r1
 8006eca:	3201      	adds	r2, #1
 8006ecc:	701a      	strb	r2, [r3, #0]
  while((days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
 8006ece:	241f      	movs	r4, #31
 8006ed0:	193b      	adds	r3, r7, r4
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	4a64      	ldr	r2, [pc, #400]	@ (8007068 <breakPosixTime+0x23c>)
 8006ed6:	4694      	mov	ip, r2
 8006ed8:	4463      	add	r3, ip
 8006eda:	001a      	movs	r2, r3
 8006edc:	2303      	movs	r3, #3
 8006ede:	4013      	ands	r3, r2
 8006ee0:	d119      	bne.n	8006f16 <breakPosixTime+0xea>
 8006ee2:	193b      	adds	r3, r7, r4
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	4a60      	ldr	r2, [pc, #384]	@ (8007068 <breakPosixTime+0x23c>)
 8006ee8:	4694      	mov	ip, r2
 8006eea:	4463      	add	r3, ip
 8006eec:	2164      	movs	r1, #100	@ 0x64
 8006eee:	0018      	movs	r0, r3
 8006ef0:	f7f9 fac8 	bl	8000484 <__aeabi_idivmod>
 8006ef4:	1e0b      	subs	r3, r1, #0
 8006ef6:	d10b      	bne.n	8006f10 <breakPosixTime+0xe4>
 8006ef8:	193b      	adds	r3, r7, r4
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	4a5a      	ldr	r2, [pc, #360]	@ (8007068 <breakPosixTime+0x23c>)
 8006efe:	4694      	mov	ip, r2
 8006f00:	4463      	add	r3, ip
 8006f02:	22c8      	movs	r2, #200	@ 0xc8
 8006f04:	0051      	lsls	r1, r2, #1
 8006f06:	0018      	movs	r0, r3
 8006f08:	f7f9 fabc 	bl	8000484 <__aeabi_idivmod>
 8006f0c:	1e0b      	subs	r3, r1, #0
 8006f0e:	d102      	bne.n	8006f16 <breakPosixTime+0xea>
 8006f10:	23b7      	movs	r3, #183	@ 0xb7
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	e001      	b.n	8006f1a <breakPosixTime+0xee>
 8006f16:	236e      	movs	r3, #110	@ 0x6e
 8006f18:	33ff      	adds	r3, #255	@ 0xff
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	18d3      	adds	r3, r2, r3
 8006f1e:	617b      	str	r3, [r7, #20]
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d9cc      	bls.n	8006ec2 <breakPosixTime+0x96>
  }
  currentDate->Year = year; // year is offset from 1970
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	241f      	movs	r4, #31
 8006f2c:	193a      	adds	r2, r7, r4
 8006f2e:	7812      	ldrb	r2, [r2, #0]
 8006f30:	70da      	strb	r2, [r3, #3]

  days -= LEAP_YEAR(year) ? 366 : 365;
 8006f32:	193b      	adds	r3, r7, r4
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	4a4c      	ldr	r2, [pc, #304]	@ (8007068 <breakPosixTime+0x23c>)
 8006f38:	4694      	mov	ip, r2
 8006f3a:	4463      	add	r3, ip
 8006f3c:	001a      	movs	r2, r3
 8006f3e:	2303      	movs	r3, #3
 8006f40:	4013      	ands	r3, r2
 8006f42:	d119      	bne.n	8006f78 <breakPosixTime+0x14c>
 8006f44:	193b      	adds	r3, r7, r4
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	4a47      	ldr	r2, [pc, #284]	@ (8007068 <breakPosixTime+0x23c>)
 8006f4a:	4694      	mov	ip, r2
 8006f4c:	4463      	add	r3, ip
 8006f4e:	2164      	movs	r1, #100	@ 0x64
 8006f50:	0018      	movs	r0, r3
 8006f52:	f7f9 fa97 	bl	8000484 <__aeabi_idivmod>
 8006f56:	1e0b      	subs	r3, r1, #0
 8006f58:	d10b      	bne.n	8006f72 <breakPosixTime+0x146>
 8006f5a:	193b      	adds	r3, r7, r4
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	4a42      	ldr	r2, [pc, #264]	@ (8007068 <breakPosixTime+0x23c>)
 8006f60:	4694      	mov	ip, r2
 8006f62:	4463      	add	r3, ip
 8006f64:	22c8      	movs	r2, #200	@ 0xc8
 8006f66:	0051      	lsls	r1, r2, #1
 8006f68:	0018      	movs	r0, r3
 8006f6a:	f7f9 fa8b 	bl	8000484 <__aeabi_idivmod>
 8006f6e:	1e0b      	subs	r3, r1, #0
 8006f70:	d102      	bne.n	8006f78 <breakPosixTime+0x14c>
 8006f72:	23b7      	movs	r3, #183	@ 0xb7
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	e001      	b.n	8006f7c <breakPosixTime+0x150>
 8006f78:	236e      	movs	r3, #110	@ 0x6e
 8006f7a:	33ff      	adds	r3, #255	@ 0xff
 8006f7c:	697a      	ldr	r2, [r7, #20]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	617b      	str	r3, [r7, #20]
  time  -= days; // now it is days in this year, starting at 0
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	61bb      	str	r3, [r7, #24]

  days=0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	617b      	str	r3, [r7, #20]
  month=0;
 8006f8e:	211e      	movs	r1, #30
 8006f90:	187b      	adds	r3, r7, r1
 8006f92:	2200      	movs	r2, #0
 8006f94:	701a      	strb	r2, [r3, #0]
  monthLength=0;
 8006f96:	231d      	movs	r3, #29
 8006f98:	18fb      	adds	r3, r7, r3
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	701a      	strb	r2, [r3, #0]
  for (month=0; month<12; month++) {
 8006f9e:	187b      	adds	r3, r7, r1
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	701a      	strb	r2, [r3, #0]
 8006fa4:	e048      	b.n	8007038 <breakPosixTime+0x20c>
    if (month==1) { // february
 8006fa6:	231e      	movs	r3, #30
 8006fa8:	18fb      	adds	r3, r7, r3
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d12a      	bne.n	8007006 <breakPosixTime+0x1da>
      if (LEAP_YEAR(year)) {
 8006fb0:	241f      	movs	r4, #31
 8006fb2:	193b      	adds	r3, r7, r4
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	4a2c      	ldr	r2, [pc, #176]	@ (8007068 <breakPosixTime+0x23c>)
 8006fb8:	4694      	mov	ip, r2
 8006fba:	4463      	add	r3, ip
 8006fbc:	001a      	movs	r2, r3
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	d11b      	bne.n	8006ffc <breakPosixTime+0x1d0>
 8006fc4:	193b      	adds	r3, r7, r4
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	4a27      	ldr	r2, [pc, #156]	@ (8007068 <breakPosixTime+0x23c>)
 8006fca:	4694      	mov	ip, r2
 8006fcc:	4463      	add	r3, ip
 8006fce:	2164      	movs	r1, #100	@ 0x64
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	f7f9 fa57 	bl	8000484 <__aeabi_idivmod>
 8006fd6:	1e0b      	subs	r3, r1, #0
 8006fd8:	d10b      	bne.n	8006ff2 <breakPosixTime+0x1c6>
 8006fda:	193b      	adds	r3, r7, r4
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	4a22      	ldr	r2, [pc, #136]	@ (8007068 <breakPosixTime+0x23c>)
 8006fe0:	4694      	mov	ip, r2
 8006fe2:	4463      	add	r3, ip
 8006fe4:	22c8      	movs	r2, #200	@ 0xc8
 8006fe6:	0051      	lsls	r1, r2, #1
 8006fe8:	0018      	movs	r0, r3
 8006fea:	f7f9 fa4b 	bl	8000484 <__aeabi_idivmod>
 8006fee:	1e0b      	subs	r3, r1, #0
 8006ff0:	d104      	bne.n	8006ffc <breakPosixTime+0x1d0>
        monthLength=29;
 8006ff2:	231d      	movs	r3, #29
 8006ff4:	18fb      	adds	r3, r7, r3
 8006ff6:	221d      	movs	r2, #29
 8006ff8:	701a      	strb	r2, [r3, #0]
 8006ffa:	e00c      	b.n	8007016 <breakPosixTime+0x1ea>
      } else {
        monthLength=28;
 8006ffc:	231d      	movs	r3, #29
 8006ffe:	18fb      	adds	r3, r7, r3
 8007000:	221c      	movs	r2, #28
 8007002:	701a      	strb	r2, [r3, #0]
 8007004:	e007      	b.n	8007016 <breakPosixTime+0x1ea>
      }
    } else {
      monthLength = monthDays[month];
 8007006:	231e      	movs	r3, #30
 8007008:	18fb      	adds	r3, r7, r3
 800700a:	781a      	ldrb	r2, [r3, #0]
 800700c:	231d      	movs	r3, #29
 800700e:	18fb      	adds	r3, r7, r3
 8007010:	4916      	ldr	r1, [pc, #88]	@ (800706c <breakPosixTime+0x240>)
 8007012:	5c8a      	ldrb	r2, [r1, r2]
 8007014:	701a      	strb	r2, [r3, #0]
    }

    if (time >= monthLength) {
 8007016:	211d      	movs	r1, #29
 8007018:	187b      	adds	r3, r7, r1
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	429a      	cmp	r2, r3
 8007020:	d310      	bcc.n	8007044 <breakPosixTime+0x218>
      time -= monthLength;
 8007022:	187b      	adds	r3, r7, r1
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	61bb      	str	r3, [r7, #24]
  for (month=0; month<12; month++) {
 800702c:	211e      	movs	r1, #30
 800702e:	187b      	adds	r3, r7, r1
 8007030:	781a      	ldrb	r2, [r3, #0]
 8007032:	187b      	adds	r3, r7, r1
 8007034:	3201      	adds	r2, #1
 8007036:	701a      	strb	r2, [r3, #0]
 8007038:	231e      	movs	r3, #30
 800703a:	18fb      	adds	r3, r7, r3
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	2b0b      	cmp	r3, #11
 8007040:	d9b1      	bls.n	8006fa6 <breakPosixTime+0x17a>
 8007042:	e000      	b.n	8007046 <breakPosixTime+0x21a>
    } else {
        break;
 8007044:	46c0      	nop			@ (mov r8, r8)
    }
  }
  currentDate->Month = month + 1;  // jan is month 1
 8007046:	231e      	movs	r3, #30
 8007048:	18fb      	adds	r3, r7, r3
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	3301      	adds	r3, #1
 800704e:	b2da      	uxtb	r2, r3
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	705a      	strb	r2, [r3, #1]
  currentDate->Date = time + 1;     // day of month
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	b2db      	uxtb	r3, r3
 8007058:	3301      	adds	r3, #1
 800705a:	b2da      	uxtb	r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	709a      	strb	r2, [r3, #2]
//  printf("breakPosixTime: daynr: %d, %s %02d-%02d-%d %02d:%02d:%02d\r\n", currentDate->WeekDay, dayNames[currentDate->WeekDay - 1],
//      currentDate->Date, currentDate->Month, currentDate->Year, currentTime->Hours, currentTime->Minutes, currentTime->Seconds);
}
 8007060:	46c0      	nop			@ (mov r8, r8)
 8007062:	46bd      	mov	sp, r7
 8007064:	b009      	add	sp, #36	@ 0x24
 8007066:	bd90      	pop	{r4, r7, pc}
 8007068:	000007b2 	.word	0x000007b2
 800706c:	08025384 	.word	0x08025384

08007070 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007076:	003b      	movs	r3, r7
 8007078:	0018      	movs	r0, r3
 800707a:	2308      	movs	r3, #8
 800707c:	001a      	movs	r2, r3
 800707e:	2100      	movs	r1, #0
 8007080:	f019 f868 	bl	8020154 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8007084:	4b30      	ldr	r3, [pc, #192]	@ (8007148 <MX_ADC_Init+0xd8>)
 8007086:	4a31      	ldr	r2, [pc, #196]	@ (800714c <MX_ADC_Init+0xdc>)
 8007088:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800708a:	4b2f      	ldr	r3, [pc, #188]	@ (8007148 <MX_ADC_Init+0xd8>)
 800708c:	2200      	movs	r2, #0
 800708e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8007090:	4b2d      	ldr	r3, [pc, #180]	@ (8007148 <MX_ADC_Init+0xd8>)
 8007092:	22c0      	movs	r2, #192	@ 0xc0
 8007094:	0612      	lsls	r2, r2, #24
 8007096:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8007098:	4b2b      	ldr	r3, [pc, #172]	@ (8007148 <MX_ADC_Init+0xd8>)
 800709a:	2200      	movs	r2, #0
 800709c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800709e:	4b2a      	ldr	r3, [pc, #168]	@ (8007148 <MX_ADC_Init+0xd8>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80070a4:	4b28      	ldr	r3, [pc, #160]	@ (8007148 <MX_ADC_Init+0xd8>)
 80070a6:	2201      	movs	r2, #1
 80070a8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80070aa:	4b27      	ldr	r3, [pc, #156]	@ (8007148 <MX_ADC_Init+0xd8>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80070b0:	4b25      	ldr	r3, [pc, #148]	@ (8007148 <MX_ADC_Init+0xd8>)
 80070b2:	2220      	movs	r2, #32
 80070b4:	2100      	movs	r1, #0
 80070b6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80070b8:	4b23      	ldr	r3, [pc, #140]	@ (8007148 <MX_ADC_Init+0xd8>)
 80070ba:	2221      	movs	r2, #33	@ 0x21
 80070bc:	2101      	movs	r1, #1
 80070be:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80070c0:	4b21      	ldr	r3, [pc, #132]	@ (8007148 <MX_ADC_Init+0xd8>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80070c6:	4b20      	ldr	r3, [pc, #128]	@ (8007148 <MX_ADC_Init+0xd8>)
 80070c8:	22c2      	movs	r2, #194	@ 0xc2
 80070ca:	32ff      	adds	r2, #255	@ 0xff
 80070cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80070ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007148 <MX_ADC_Init+0xd8>)
 80070d0:	222c      	movs	r2, #44	@ 0x2c
 80070d2:	2100      	movs	r1, #0
 80070d4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80070d6:	4b1c      	ldr	r3, [pc, #112]	@ (8007148 <MX_ADC_Init+0xd8>)
 80070d8:	2204      	movs	r2, #4
 80070da:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80070dc:	4b1a      	ldr	r3, [pc, #104]	@ (8007148 <MX_ADC_Init+0xd8>)
 80070de:	2200      	movs	r2, #0
 80070e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80070e2:	4b19      	ldr	r3, [pc, #100]	@ (8007148 <MX_ADC_Init+0xd8>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80070e8:	4b17      	ldr	r3, [pc, #92]	@ (8007148 <MX_ADC_Init+0xd8>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80070ee:	4b16      	ldr	r3, [pc, #88]	@ (8007148 <MX_ADC_Init+0xd8>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80070f4:	4b14      	ldr	r3, [pc, #80]	@ (8007148 <MX_ADC_Init+0xd8>)
 80070f6:	0018      	movs	r0, r3
 80070f8:	f007 fe3c 	bl	800ed74 <HAL_ADC_Init>
 80070fc:	1e03      	subs	r3, r0, #0
 80070fe:	d001      	beq.n	8007104 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8007100:	f001 f8d6 	bl	80082b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007104:	003b      	movs	r3, r7
 8007106:	4a12      	ldr	r2, [pc, #72]	@ (8007150 <MX_ADC_Init+0xe0>)
 8007108:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800710a:	003b      	movs	r3, r7
 800710c:	2280      	movs	r2, #128	@ 0x80
 800710e:	0152      	lsls	r2, r2, #5
 8007110:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8007112:	003a      	movs	r2, r7
 8007114:	4b0c      	ldr	r3, [pc, #48]	@ (8007148 <MX_ADC_Init+0xd8>)
 8007116:	0011      	movs	r1, r2
 8007118:	0018      	movs	r0, r3
 800711a:	f008 f89b 	bl	800f254 <HAL_ADC_ConfigChannel>
 800711e:	1e03      	subs	r3, r0, #0
 8007120:	d001      	beq.n	8007126 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8007122:	f001 f8c5 	bl	80082b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007126:	003b      	movs	r3, r7
 8007128:	4a0a      	ldr	r2, [pc, #40]	@ (8007154 <MX_ADC_Init+0xe4>)
 800712a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800712c:	003a      	movs	r2, r7
 800712e:	4b06      	ldr	r3, [pc, #24]	@ (8007148 <MX_ADC_Init+0xd8>)
 8007130:	0011      	movs	r1, r2
 8007132:	0018      	movs	r0, r3
 8007134:	f008 f88e 	bl	800f254 <HAL_ADC_ConfigChannel>
 8007138:	1e03      	subs	r3, r0, #0
 800713a:	d001      	beq.n	8007140 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800713c:	f001 f8b8 	bl	80082b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8007140:	46c0      	nop			@ (mov r8, r8)
 8007142:	46bd      	mov	sp, r7
 8007144:	b002      	add	sp, #8
 8007146:	bd80      	pop	{r7, pc}
 8007148:	20000d8c 	.word	0x20000d8c
 800714c:	40012400 	.word	0x40012400
 8007150:	38004000 	.word	0x38004000
 8007154:	3c008000 	.word	0x3c008000

08007158 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007158:	b590      	push	{r4, r7, lr}
 800715a:	b089      	sub	sp, #36	@ 0x24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007160:	240c      	movs	r4, #12
 8007162:	193b      	adds	r3, r7, r4
 8007164:	0018      	movs	r0, r3
 8007166:	2314      	movs	r3, #20
 8007168:	001a      	movs	r2, r3
 800716a:	2100      	movs	r1, #0
 800716c:	f018 fff2 	bl	8020154 <memset>
  if(adcHandle->Instance==ADC1)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a14      	ldr	r2, [pc, #80]	@ (80071c8 <HAL_ADC_MspInit+0x70>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d121      	bne.n	80071be <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800717a:	4b14      	ldr	r3, [pc, #80]	@ (80071cc <HAL_ADC_MspInit+0x74>)
 800717c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800717e:	4b13      	ldr	r3, [pc, #76]	@ (80071cc <HAL_ADC_MspInit+0x74>)
 8007180:	2180      	movs	r1, #128	@ 0x80
 8007182:	0089      	lsls	r1, r1, #2
 8007184:	430a      	orrs	r2, r1
 8007186:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007188:	4b10      	ldr	r3, [pc, #64]	@ (80071cc <HAL_ADC_MspInit+0x74>)
 800718a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800718c:	4b0f      	ldr	r3, [pc, #60]	@ (80071cc <HAL_ADC_MspInit+0x74>)
 800718e:	2104      	movs	r1, #4
 8007190:	430a      	orrs	r2, r1
 8007192:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007194:	4b0d      	ldr	r3, [pc, #52]	@ (80071cc <HAL_ADC_MspInit+0x74>)
 8007196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007198:	2204      	movs	r2, #4
 800719a:	4013      	ands	r3, r2
 800719c:	60bb      	str	r3, [r7, #8]
 800719e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 80071a0:	193b      	adds	r3, r7, r4
 80071a2:	2230      	movs	r2, #48	@ 0x30
 80071a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071a6:	193b      	adds	r3, r7, r4
 80071a8:	2203      	movs	r2, #3
 80071aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ac:	193b      	adds	r3, r7, r4
 80071ae:	2200      	movs	r2, #0
 80071b0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071b2:	193b      	adds	r3, r7, r4
 80071b4:	4a06      	ldr	r2, [pc, #24]	@ (80071d0 <HAL_ADC_MspInit+0x78>)
 80071b6:	0019      	movs	r1, r3
 80071b8:	0010      	movs	r0, r2
 80071ba:	f008 fe69 	bl	800fe90 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80071be:	46c0      	nop			@ (mov r8, r8)
 80071c0:	46bd      	mov	sp, r7
 80071c2:	b009      	add	sp, #36	@ 0x24
 80071c4:	bd90      	pop	{r4, r7, pc}
 80071c6:	46c0      	nop			@ (mov r8, r8)
 80071c8:	40012400 	.word	0x40012400
 80071cc:	40021000 	.word	0x40021000
 80071d0:	50000800 	.word	0x50000800

080071d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80071da:	4b10      	ldr	r3, [pc, #64]	@ (800721c <MX_DMA_Init+0x48>)
 80071dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071de:	4b0f      	ldr	r3, [pc, #60]	@ (800721c <MX_DMA_Init+0x48>)
 80071e0:	2101      	movs	r1, #1
 80071e2:	430a      	orrs	r2, r1
 80071e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80071e6:	4b0d      	ldr	r3, [pc, #52]	@ (800721c <MX_DMA_Init+0x48>)
 80071e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ea:	2201      	movs	r2, #1
 80071ec:	4013      	ands	r3, r2
 80071ee:	607b      	str	r3, [r7, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80071f2:	2200      	movs	r2, #0
 80071f4:	2100      	movs	r1, #0
 80071f6:	200a      	movs	r0, #10
 80071f8:	f008 f9f8 	bl	800f5ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80071fc:	200a      	movs	r0, #10
 80071fe:	f008 fa0a 	bl	800f616 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8007202:	2200      	movs	r2, #0
 8007204:	2103      	movs	r1, #3
 8007206:	200b      	movs	r0, #11
 8007208:	f008 f9f0 	bl	800f5ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800720c:	200b      	movs	r0, #11
 800720e:	f008 fa02 	bl	800f616 <HAL_NVIC_EnableIRQ>

}
 8007212:	46c0      	nop			@ (mov r8, r8)
 8007214:	46bd      	mov	sp, r7
 8007216:	b002      	add	sp, #8
 8007218:	bd80      	pop	{r7, pc}
 800721a:	46c0      	nop			@ (mov r8, r8)
 800721c:	40021000 	.word	0x40021000

08007220 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007230:	d901      	bls.n	8007236 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 8007232:	237f      	movs	r3, #127	@ 0x7f
 8007234:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8007236:	2017      	movs	r0, #23
 8007238:	183b      	adds	r3, r7, r0
 800723a:	490d      	ldr	r1, [pc, #52]	@ (8007270 <accessLUT10log10+0x50>)
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	188a      	adds	r2, r1, r2
 8007240:	7812      	ldrb	r2, [r2, #0]
 8007242:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8007244:	0001      	movs	r1, r0
 8007246:	187b      	adds	r3, r7, r1
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2206      	movs	r2, #6
 800724c:	4113      	asrs	r3, r2
 800724e:	001a      	movs	r2, r3
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8007254:	187b      	adds	r3, r7, r1
 8007256:	781a      	ldrb	r2, [r3, #0]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2106      	movs	r1, #6
 800725e:	408b      	lsls	r3, r1
 8007260:	1ad2      	subs	r2, r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	601a      	str	r2, [r3, #0]
}
 8007266:	46c0      	nop			@ (mov r8, r8)
 8007268:	46bd      	mov	sp, r7
 800726a:	b006      	add	sp, #24
 800726c:	bd80      	pop	{r7, pc}
 800726e:	46c0      	nop			@ (mov r8, r8)
 8007270:	08025390 	.word	0x08025390

08007274 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8007274:	b5b0      	push	{r4, r5, r7, lr}
 8007276:	b090      	sub	sp, #64	@ 0x40
 8007278:	af00      	add	r7, sp, #0
 800727a:	6138      	str	r0, [r7, #16]
 800727c:	6179      	str	r1, [r7, #20]
 800727e:	60fa      	str	r2, [r7, #12]
 8007280:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 8007282:	2308      	movs	r3, #8
 8007284:	001a      	movs	r2, r3
 8007286:	3a20      	subs	r2, #32
 8007288:	2a00      	cmp	r2, #0
 800728a:	db03      	blt.n	8007294 <efficient10log10+0x20>
 800728c:	2101      	movs	r1, #1
 800728e:	4091      	lsls	r1, r2
 8007290:	000d      	movs	r5, r1
 8007292:	e008      	b.n	80072a6 <efficient10log10+0x32>
 8007294:	2220      	movs	r2, #32
 8007296:	1ad2      	subs	r2, r2, r3
 8007298:	2101      	movs	r1, #1
 800729a:	40d1      	lsrs	r1, r2
 800729c:	000a      	movs	r2, r1
 800729e:	2100      	movs	r1, #0
 80072a0:	4099      	lsls	r1, r3
 80072a2:	000d      	movs	r5, r1
 80072a4:	4315      	orrs	r5, r2
 80072a6:	2201      	movs	r2, #1
 80072a8:	409a      	lsls	r2, r3
 80072aa:	0014      	movs	r4, r2
 80072ac:	2201      	movs	r2, #1
 80072ae:	4252      	negs	r2, r2
 80072b0:	17d3      	asrs	r3, r2, #31
 80072b2:	1912      	adds	r2, r2, r4
 80072b4:	416b      	adcs	r3, r5
 80072b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80072b8:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 80072ba:	2336      	movs	r3, #54	@ 0x36
 80072bc:	2208      	movs	r2, #8
 80072be:	189b      	adds	r3, r3, r2
 80072c0:	19db      	adds	r3, r3, r7
 80072c2:	2200      	movs	r2, #0
 80072c4:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80072c6:	e017      	b.n	80072f8 <efficient10log10+0x84>
    {
        P = P >> 1;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	07db      	lsls	r3, r3, #31
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	0852      	lsrs	r2, r2, #1
 80072d0:	603a      	str	r2, [r7, #0]
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	431a      	orrs	r2, r3
 80072d6:	603a      	str	r2, [r7, #0]
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	085b      	lsrs	r3, r3, #1
 80072dc:	607b      	str	r3, [r7, #4]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	687c      	ldr	r4, [r7, #4]
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	617c      	str	r4, [r7, #20]
        bShift++;
 80072e6:	2136      	movs	r1, #54	@ 0x36
 80072e8:	2008      	movs	r0, #8
 80072ea:	180b      	adds	r3, r1, r0
 80072ec:	19db      	adds	r3, r3, r7
 80072ee:	881a      	ldrh	r2, [r3, #0]
 80072f0:	180b      	adds	r3, r1, r0
 80072f2:	19db      	adds	r3, r3, r7
 80072f4:	3201      	adds	r2, #1
 80072f6:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d8e3      	bhi.n	80072c8 <efficient10log10+0x54>
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007304:	429a      	cmp	r2, r3
 8007306:	d103      	bne.n	8007310 <efficient10log10+0x9c>
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730c:	429a      	cmp	r2, r3
 800730e:	d8db      	bhi.n	80072c8 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	2308      	movs	r3, #8
 8007314:	3b01      	subs	r3, #1
 8007316:	2101      	movs	r1, #1
 8007318:	4099      	lsls	r1, r3
 800731a:	000b      	movs	r3, r1
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8007320:	2300      	movs	r3, #0
 8007322:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8007328:	231c      	movs	r3, #28
 800732a:	2408      	movs	r4, #8
 800732c:	191b      	adds	r3, r3, r4
 800732e:	19da      	adds	r2, r3, r7
 8007330:	2320      	movs	r3, #32
 8007332:	191b      	adds	r3, r3, r4
 8007334:	19d9      	adds	r1, r3, r7
 8007336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007338:	0018      	movs	r0, r3
 800733a:	f7ff ff71 	bl	8007220 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800733e:	2215      	movs	r2, #21
 8007340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007342:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8007344:	2036      	movs	r0, #54	@ 0x36
 8007346:	1902      	adds	r2, r0, r4
 8007348:	19d2      	adds	r2, r2, r7
 800734a:	8812      	ldrh	r2, [r2, #0]
 800734c:	2103      	movs	r1, #3
 800734e:	434a      	muls	r2, r1
 8007350:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8007352:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8007354:	0021      	movs	r1, r4
 8007356:	1843      	adds	r3, r0, r1
 8007358:	19db      	adds	r3, r3, r7
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	2201      	movs	r2, #1
 800735e:	4353      	muls	r3, r2
 8007360:	2203      	movs	r2, #3
 8007362:	4113      	asrs	r3, r2
 8007364:	001a      	movs	r2, r3
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800736a:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800736c:	2314      	movs	r3, #20
 800736e:	185b      	adds	r3, r3, r1
 8007370:	19da      	adds	r2, r3, r7
 8007372:	2318      	movs	r3, #24
 8007374:	185b      	adds	r3, r3, r1
 8007376:	19db      	adds	r3, r3, r7
 8007378:	0011      	movs	r1, r2
 800737a:	0018      	movs	r0, r3
 800737c:	f000 f80a 	bl	8007394 <correctIntFracNumber>
    integerPart[0] = intPart;
 8007380:	6a3a      	ldr	r2, [r7, #32]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 8007386:	69fa      	ldr	r2, [r7, #28]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	601a      	str	r2, [r3, #0]
}
 800738c:	46c0      	nop			@ (mov r8, r8)
 800738e:	46bd      	mov	sp, r7
 8007390:	b010      	add	sp, #64	@ 0x40
 8007392:	bdb0      	pop	{r4, r5, r7, pc}

08007394 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800739e:	e00a      	b.n	80073b6 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3b0a      	subs	r3, #10
 80073b0:	001a      	movs	r2, r3
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b09      	cmp	r3, #9
 80073bc:	dcf0      	bgt.n	80073a0 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 80073be:	e00a      	b.n	80073d6 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	1e5a      	subs	r2, r3, #1
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	330a      	adds	r3, #10
 80073d0:	001a      	movs	r2, r3
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3309      	adds	r3, #9
 80073dc:	dbf0      	blt.n	80073c0 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	da0f      	bge.n	8007406 <correctIntFracNumber+0x72>
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	dd0b      	ble.n	8007406 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	1c5a      	adds	r2, r3, #1
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3b0a      	subs	r3, #10
 80073fe:	001a      	movs	r2, r3
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8007404:	e012      	b.n	800742c <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	dd0e      	ble.n	800742c <correctIntFracNumber+0x98>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	da0a      	bge.n	800742c <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	1e5a      	subs	r2, r3, #1
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	330a      	adds	r3, #10
 8007426:	001a      	movs	r2, r3
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	601a      	str	r2, [r3, #0]
}
 800742c:	46c0      	nop			@ (mov r8, r8)
 800742e:	46bd      	mov	sp, r7
 8007430:	b002      	add	sp, #8
 8007432:	bd80      	pop	{r7, pc}

08007434 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8007434:	b590      	push	{r4, r7, lr}
 8007436:	b08b      	sub	sp, #44	@ 0x2c
 8007438:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800743a:	2414      	movs	r4, #20
 800743c:	193b      	adds	r3, r7, r4
 800743e:	0018      	movs	r0, r3
 8007440:	2314      	movs	r3, #20
 8007442:	001a      	movs	r2, r3
 8007444:	2100      	movs	r1, #0
 8007446:	f018 fe85 	bl	8020154 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800744a:	4b8a      	ldr	r3, [pc, #552]	@ (8007674 <MX_GPIO_Init+0x240>)
 800744c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800744e:	4b89      	ldr	r3, [pc, #548]	@ (8007674 <MX_GPIO_Init+0x240>)
 8007450:	2104      	movs	r1, #4
 8007452:	430a      	orrs	r2, r1
 8007454:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007456:	4b87      	ldr	r3, [pc, #540]	@ (8007674 <MX_GPIO_Init+0x240>)
 8007458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745a:	2204      	movs	r2, #4
 800745c:	4013      	ands	r3, r2
 800745e:	613b      	str	r3, [r7, #16]
 8007460:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007462:	4b84      	ldr	r3, [pc, #528]	@ (8007674 <MX_GPIO_Init+0x240>)
 8007464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007466:	4b83      	ldr	r3, [pc, #524]	@ (8007674 <MX_GPIO_Init+0x240>)
 8007468:	2180      	movs	r1, #128	@ 0x80
 800746a:	430a      	orrs	r2, r1
 800746c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800746e:	4b81      	ldr	r3, [pc, #516]	@ (8007674 <MX_GPIO_Init+0x240>)
 8007470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007472:	2280      	movs	r2, #128	@ 0x80
 8007474:	4013      	ands	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800747a:	4b7e      	ldr	r3, [pc, #504]	@ (8007674 <MX_GPIO_Init+0x240>)
 800747c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800747e:	4b7d      	ldr	r3, [pc, #500]	@ (8007674 <MX_GPIO_Init+0x240>)
 8007480:	2101      	movs	r1, #1
 8007482:	430a      	orrs	r2, r1
 8007484:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007486:	4b7b      	ldr	r3, [pc, #492]	@ (8007674 <MX_GPIO_Init+0x240>)
 8007488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748a:	2201      	movs	r2, #1
 800748c:	4013      	ands	r3, r2
 800748e:	60bb      	str	r3, [r7, #8]
 8007490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007492:	4b78      	ldr	r3, [pc, #480]	@ (8007674 <MX_GPIO_Init+0x240>)
 8007494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007496:	4b77      	ldr	r3, [pc, #476]	@ (8007674 <MX_GPIO_Init+0x240>)
 8007498:	2102      	movs	r1, #2
 800749a:	430a      	orrs	r2, r1
 800749c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800749e:	4b75      	ldr	r3, [pc, #468]	@ (8007674 <MX_GPIO_Init+0x240>)
 80074a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a2:	2202      	movs	r2, #2
 80074a4:	4013      	ands	r3, r2
 80074a6:	607b      	str	r3, [r7, #4]
 80074a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80074aa:	4b72      	ldr	r3, [pc, #456]	@ (8007674 <MX_GPIO_Init+0x240>)
 80074ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074ae:	4b71      	ldr	r3, [pc, #452]	@ (8007674 <MX_GPIO_Init+0x240>)
 80074b0:	2108      	movs	r1, #8
 80074b2:	430a      	orrs	r2, r1
 80074b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80074b6:	4b6f      	ldr	r3, [pc, #444]	@ (8007674 <MX_GPIO_Init+0x240>)
 80074b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ba:	2208      	movs	r2, #8
 80074bc:	4013      	ands	r3, r2
 80074be:	603b      	str	r3, [r7, #0]
 80074c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80074c2:	4b6d      	ldr	r3, [pc, #436]	@ (8007678 <MX_GPIO_Init+0x244>)
 80074c4:	2201      	movs	r2, #1
 80074c6:	2101      	movs	r1, #1
 80074c8:	0018      	movs	r0, r3
 80074ca:	f008 fe7c 	bl	80101c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80074ce:	4b6a      	ldr	r3, [pc, #424]	@ (8007678 <MX_GPIO_Init+0x244>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	2102      	movs	r1, #2
 80074d4:	0018      	movs	r0, r3
 80074d6:	f008 fe76 	bl	80101c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 80074da:	4968      	ldr	r1, [pc, #416]	@ (800767c <MX_GPIO_Init+0x248>)
 80074dc:	4b68      	ldr	r3, [pc, #416]	@ (8007680 <MX_GPIO_Init+0x24c>)
 80074de:	2201      	movs	r2, #1
 80074e0:	0018      	movs	r0, r3
 80074e2:	f008 fe70 	bl	80101c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80074e6:	2380      	movs	r3, #128	@ 0x80
 80074e8:	011b      	lsls	r3, r3, #4
 80074ea:	4866      	ldr	r0, [pc, #408]	@ (8007684 <MX_GPIO_Init+0x250>)
 80074ec:	2201      	movs	r2, #1
 80074ee:	0019      	movs	r1, r3
 80074f0:	f008 fe69 	bl	80101c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 80074f4:	2380      	movs	r3, #128	@ 0x80
 80074f6:	015b      	lsls	r3, r3, #5
 80074f8:	4862      	ldr	r0, [pc, #392]	@ (8007684 <MX_GPIO_Init+0x250>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	0019      	movs	r1, r3
 80074fe:	f008 fe62 	bl	80101c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8007502:	193b      	adds	r3, r7, r4
 8007504:	4a60      	ldr	r2, [pc, #384]	@ (8007688 <MX_GPIO_Init+0x254>)
 8007506:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007508:	193b      	adds	r3, r7, r4
 800750a:	2203      	movs	r2, #3
 800750c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800750e:	193b      	adds	r3, r7, r4
 8007510:	2200      	movs	r2, #0
 8007512:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007514:	193b      	adds	r3, r7, r4
 8007516:	4a5b      	ldr	r2, [pc, #364]	@ (8007684 <MX_GPIO_Init+0x250>)
 8007518:	0019      	movs	r1, r3
 800751a:	0010      	movs	r0, r2
 800751c:	f008 fcb8 	bl	800fe90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8007520:	193b      	adds	r3, r7, r4
 8007522:	2203      	movs	r2, #3
 8007524:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007526:	193b      	adds	r3, r7, r4
 8007528:	2201      	movs	r2, #1
 800752a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800752c:	193b      	adds	r3, r7, r4
 800752e:	2200      	movs	r2, #0
 8007530:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007532:	193b      	adds	r3, r7, r4
 8007534:	2200      	movs	r2, #0
 8007536:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007538:	193b      	adds	r3, r7, r4
 800753a:	4a4f      	ldr	r2, [pc, #316]	@ (8007678 <MX_GPIO_Init+0x244>)
 800753c:	0019      	movs	r1, r3
 800753e:	0010      	movs	r0, r2
 8007540:	f008 fca6 	bl	800fe90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007544:	193b      	adds	r3, r7, r4
 8007546:	2270      	movs	r2, #112	@ 0x70
 8007548:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800754a:	193b      	adds	r3, r7, r4
 800754c:	2203      	movs	r2, #3
 800754e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007550:	193b      	adds	r3, r7, r4
 8007552:	2200      	movs	r2, #0
 8007554:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007556:	193a      	adds	r2, r7, r4
 8007558:	23a0      	movs	r3, #160	@ 0xa0
 800755a:	05db      	lsls	r3, r3, #23
 800755c:	0011      	movs	r1, r2
 800755e:	0018      	movs	r0, r3
 8007560:	f008 fc96 	bl	800fe90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 8007564:	193b      	adds	r3, r7, r4
 8007566:	22c0      	movs	r2, #192	@ 0xc0
 8007568:	0052      	lsls	r2, r2, #1
 800756a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800756c:	193b      	adds	r3, r7, r4
 800756e:	2200      	movs	r2, #0
 8007570:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007572:	193b      	adds	r3, r7, r4
 8007574:	2200      	movs	r2, #0
 8007576:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007578:	193a      	adds	r2, r7, r4
 800757a:	23a0      	movs	r3, #160	@ 0xa0
 800757c:	05db      	lsls	r3, r3, #23
 800757e:	0011      	movs	r1, r2
 8007580:	0018      	movs	r0, r3
 8007582:	f008 fc85 	bl	800fe90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8007586:	193b      	adds	r3, r7, r4
 8007588:	4a3c      	ldr	r2, [pc, #240]	@ (800767c <MX_GPIO_Init+0x248>)
 800758a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800758c:	193b      	adds	r3, r7, r4
 800758e:	2201      	movs	r2, #1
 8007590:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007592:	193b      	adds	r3, r7, r4
 8007594:	2200      	movs	r2, #0
 8007596:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007598:	193b      	adds	r3, r7, r4
 800759a:	2200      	movs	r2, #0
 800759c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800759e:	193b      	adds	r3, r7, r4
 80075a0:	4a37      	ldr	r2, [pc, #220]	@ (8007680 <MX_GPIO_Init+0x24c>)
 80075a2:	0019      	movs	r1, r3
 80075a4:	0010      	movs	r0, r2
 80075a6:	f008 fc73 	bl	800fe90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80075aa:	193b      	adds	r3, r7, r4
 80075ac:	4a37      	ldr	r2, [pc, #220]	@ (800768c <MX_GPIO_Init+0x258>)
 80075ae:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075b0:	193b      	adds	r3, r7, r4
 80075b2:	2203      	movs	r2, #3
 80075b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b6:	193b      	adds	r3, r7, r4
 80075b8:	2200      	movs	r2, #0
 80075ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075bc:	193b      	adds	r3, r7, r4
 80075be:	4a30      	ldr	r2, [pc, #192]	@ (8007680 <MX_GPIO_Init+0x24c>)
 80075c0:	0019      	movs	r1, r3
 80075c2:	0010      	movs	r0, r2
 80075c4:	f008 fc64 	bl	800fe90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 80075c8:	0021      	movs	r1, r4
 80075ca:	187b      	adds	r3, r7, r1
 80075cc:	2280      	movs	r2, #128	@ 0x80
 80075ce:	0092      	lsls	r2, r2, #2
 80075d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80075d2:	000c      	movs	r4, r1
 80075d4:	193b      	adds	r3, r7, r4
 80075d6:	2200      	movs	r2, #0
 80075d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075da:	193b      	adds	r3, r7, r4
 80075dc:	2200      	movs	r2, #0
 80075de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 80075e0:	193b      	adds	r3, r7, r4
 80075e2:	4a28      	ldr	r2, [pc, #160]	@ (8007684 <MX_GPIO_Init+0x250>)
 80075e4:	0019      	movs	r1, r3
 80075e6:	0010      	movs	r0, r2
 80075e8:	f008 fc52 	bl	800fe90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 80075ec:	193b      	adds	r3, r7, r4
 80075ee:	2280      	movs	r2, #128	@ 0x80
 80075f0:	0212      	lsls	r2, r2, #8
 80075f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80075f4:	193b      	adds	r3, r7, r4
 80075f6:	2288      	movs	r2, #136	@ 0x88
 80075f8:	0352      	lsls	r2, r2, #13
 80075fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fc:	193b      	adds	r3, r7, r4
 80075fe:	2200      	movs	r2, #0
 8007600:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8007602:	193a      	adds	r2, r7, r4
 8007604:	23a0      	movs	r3, #160	@ 0xa0
 8007606:	05db      	lsls	r3, r3, #23
 8007608:	0011      	movs	r1, r2
 800760a:	0018      	movs	r0, r3
 800760c:	f008 fc40 	bl	800fe90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8007610:	0021      	movs	r1, r4
 8007612:	187b      	adds	r3, r7, r1
 8007614:	22c0      	movs	r2, #192	@ 0xc0
 8007616:	0152      	lsls	r2, r2, #5
 8007618:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800761a:	000c      	movs	r4, r1
 800761c:	193b      	adds	r3, r7, r4
 800761e:	2201      	movs	r2, #1
 8007620:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007622:	193b      	adds	r3, r7, r4
 8007624:	2200      	movs	r2, #0
 8007626:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007628:	193b      	adds	r3, r7, r4
 800762a:	2200      	movs	r2, #0
 800762c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800762e:	193b      	adds	r3, r7, r4
 8007630:	4a14      	ldr	r2, [pc, #80]	@ (8007684 <MX_GPIO_Init+0x250>)
 8007632:	0019      	movs	r1, r3
 8007634:	0010      	movs	r0, r2
 8007636:	f008 fc2b 	bl	800fe90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800763a:	0021      	movs	r1, r4
 800763c:	187b      	adds	r3, r7, r1
 800763e:	2204      	movs	r2, #4
 8007640:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007642:	187b      	adds	r3, r7, r1
 8007644:	2200      	movs	r2, #0
 8007646:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007648:	187b      	adds	r3, r7, r1
 800764a:	2201      	movs	r2, #1
 800764c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 800764e:	187b      	adds	r3, r7, r1
 8007650:	4a0f      	ldr	r2, [pc, #60]	@ (8007690 <MX_GPIO_Init+0x25c>)
 8007652:	0019      	movs	r1, r3
 8007654:	0010      	movs	r0, r2
 8007656:	f008 fc1b 	bl	800fe90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800765a:	2200      	movs	r2, #0
 800765c:	2100      	movs	r1, #0
 800765e:	2007      	movs	r0, #7
 8007660:	f007 ffc4 	bl	800f5ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8007664:	2007      	movs	r0, #7
 8007666:	f007 ffd6 	bl	800f616 <HAL_NVIC_EnableIRQ>

}
 800766a:	46c0      	nop			@ (mov r8, r8)
 800766c:	46bd      	mov	sp, r7
 800766e:	b00b      	add	sp, #44	@ 0x2c
 8007670:	bd90      	pop	{r4, r7, pc}
 8007672:	46c0      	nop			@ (mov r8, r8)
 8007674:	40021000 	.word	0x40021000
 8007678:	50001c00 	.word	0x50001c00
 800767c:	00000301 	.word	0x00000301
 8007680:	50000400 	.word	0x50000400
 8007684:	50000800 	.word	0x50000800
 8007688:	0000200c 	.word	0x0000200c
 800768c:	0000403e 	.word	0x0000403e
 8007690:	50000c00 	.word	0x50000c00

08007694 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2100      	movs	r1, #0
 80076a2:	0018      	movs	r0, r3
 80076a4:	f00f f96a 	bl	801697c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2108      	movs	r1, #8
 80076ac:	0018      	movs	r0, r3
 80076ae:	f00f f965 	bl	801697c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	210c      	movs	r1, #12
 80076b6:	0018      	movs	r0, r3
 80076b8:	f00f f960 	bl	801697c <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80076bc:	2380      	movs	r3, #128	@ 0x80
 80076be:	05db      	lsls	r3, r3, #23
 80076c0:	22fa      	movs	r2, #250	@ 0xfa
 80076c2:	0112      	lsls	r2, r2, #4
 80076c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80076c6:	2380      	movs	r3, #128	@ 0x80
 80076c8:	05db      	lsls	r3, r3, #23
 80076ca:	22fa      	movs	r2, #250	@ 0xfa
 80076cc:	0112      	lsls	r2, r2, #4
 80076ce:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80076d0:	2380      	movs	r3, #128	@ 0x80
 80076d2:	05db      	lsls	r3, r3, #23
 80076d4:	22fa      	movs	r2, #250	@ 0xfa
 80076d6:	0112      	lsls	r2, r2, #4
 80076d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80076da:	2380      	movs	r3, #128	@ 0x80
 80076dc:	05db      	lsls	r3, r3, #23
 80076de:	22fa      	movs	r2, #250	@ 0xfa
 80076e0:	0112      	lsls	r2, r2, #4
 80076e2:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2100      	movs	r1, #0
 80076e8:	0018      	movs	r0, r3
 80076ea:	f00f f947 	bl	801697c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2104      	movs	r1, #4
 80076f2:	0018      	movs	r0, r3
 80076f4:	f00f f942 	bl	801697c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2108      	movs	r1, #8
 80076fc:	0018      	movs	r0, r3
 80076fe:	f00f f93d 	bl	801697c <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8007702:	4b0a      	ldr	r3, [pc, #40]	@ (800772c <GPIO_InitPWMLEDs+0x98>)
 8007704:	22fa      	movs	r2, #250	@ 0xfa
 8007706:	0112      	lsls	r2, r2, #4
 8007708:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 800770a:	4b08      	ldr	r3, [pc, #32]	@ (800772c <GPIO_InitPWMLEDs+0x98>)
 800770c:	22fa      	movs	r2, #250	@ 0xfa
 800770e:	0112      	lsls	r2, r2, #4
 8007710:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8007712:	4b06      	ldr	r3, [pc, #24]	@ (800772c <GPIO_InitPWMLEDs+0x98>)
 8007714:	22fa      	movs	r2, #250	@ 0xfa
 8007716:	0112      	lsls	r2, r2, #4
 8007718:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800771a:	4b04      	ldr	r3, [pc, #16]	@ (800772c <GPIO_InitPWMLEDs+0x98>)
 800771c:	22fa      	movs	r2, #250	@ 0xfa
 800771e:	0112      	lsls	r2, r2, #4
 8007720:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8007722:	46c0      	nop			@ (mov r8, r8)
 8007724:	46bd      	mov	sp, r7
 8007726:	b002      	add	sp, #8
 8007728:	bd80      	pop	{r7, pc}
 800772a:	46c0      	nop			@ (mov r8, r8)
 800772c:	40000400 	.word	0x40000400

08007730 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007734:	4b1b      	ldr	r3, [pc, #108]	@ (80077a4 <MX_I2C1_Init+0x74>)
 8007736:	4a1c      	ldr	r2, [pc, #112]	@ (80077a8 <MX_I2C1_Init+0x78>)
 8007738:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800773a:	4b1a      	ldr	r3, [pc, #104]	@ (80077a4 <MX_I2C1_Init+0x74>)
 800773c:	4a1b      	ldr	r2, [pc, #108]	@ (80077ac <MX_I2C1_Init+0x7c>)
 800773e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007740:	4b18      	ldr	r3, [pc, #96]	@ (80077a4 <MX_I2C1_Init+0x74>)
 8007742:	2200      	movs	r2, #0
 8007744:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007746:	4b17      	ldr	r3, [pc, #92]	@ (80077a4 <MX_I2C1_Init+0x74>)
 8007748:	2201      	movs	r2, #1
 800774a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800774c:	4b15      	ldr	r3, [pc, #84]	@ (80077a4 <MX_I2C1_Init+0x74>)
 800774e:	2200      	movs	r2, #0
 8007750:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007752:	4b14      	ldr	r3, [pc, #80]	@ (80077a4 <MX_I2C1_Init+0x74>)
 8007754:	2200      	movs	r2, #0
 8007756:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007758:	4b12      	ldr	r3, [pc, #72]	@ (80077a4 <MX_I2C1_Init+0x74>)
 800775a:	2200      	movs	r2, #0
 800775c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800775e:	4b11      	ldr	r3, [pc, #68]	@ (80077a4 <MX_I2C1_Init+0x74>)
 8007760:	2200      	movs	r2, #0
 8007762:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007764:	4b0f      	ldr	r3, [pc, #60]	@ (80077a4 <MX_I2C1_Init+0x74>)
 8007766:	2200      	movs	r2, #0
 8007768:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800776a:	4b0e      	ldr	r3, [pc, #56]	@ (80077a4 <MX_I2C1_Init+0x74>)
 800776c:	0018      	movs	r0, r3
 800776e:	f008 fd63 	bl	8010238 <HAL_I2C_Init>
 8007772:	1e03      	subs	r3, r0, #0
 8007774:	d001      	beq.n	800777a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007776:	f000 fd9b 	bl	80082b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800777a:	4b0a      	ldr	r3, [pc, #40]	@ (80077a4 <MX_I2C1_Init+0x74>)
 800777c:	2100      	movs	r1, #0
 800777e:	0018      	movs	r0, r3
 8007780:	f00b f934 	bl	80129ec <HAL_I2CEx_ConfigAnalogFilter>
 8007784:	1e03      	subs	r3, r0, #0
 8007786:	d001      	beq.n	800778c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007788:	f000 fd92 	bl	80082b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800778c:	4b05      	ldr	r3, [pc, #20]	@ (80077a4 <MX_I2C1_Init+0x74>)
 800778e:	2100      	movs	r1, #0
 8007790:	0018      	movs	r0, r3
 8007792:	f00b f977 	bl	8012a84 <HAL_I2CEx_ConfigDigitalFilter>
 8007796:	1e03      	subs	r3, r0, #0
 8007798:	d001      	beq.n	800779e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800779a:	f000 fd89 	bl	80082b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800779e:	46c0      	nop			@ (mov r8, r8)
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	20000de8 	.word	0x20000de8
 80077a8:	40005400 	.word	0x40005400
 80077ac:	00503d58 	.word	0x00503d58

080077b0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80077b4:	4b1b      	ldr	r3, [pc, #108]	@ (8007824 <MX_I2C2_Init+0x74>)
 80077b6:	4a1c      	ldr	r2, [pc, #112]	@ (8007828 <MX_I2C2_Init+0x78>)
 80077b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80077ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007824 <MX_I2C2_Init+0x74>)
 80077bc:	4a1b      	ldr	r2, [pc, #108]	@ (800782c <MX_I2C2_Init+0x7c>)
 80077be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80077c0:	4b18      	ldr	r3, [pc, #96]	@ (8007824 <MX_I2C2_Init+0x74>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077c6:	4b17      	ldr	r3, [pc, #92]	@ (8007824 <MX_I2C2_Init+0x74>)
 80077c8:	2201      	movs	r2, #1
 80077ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80077cc:	4b15      	ldr	r3, [pc, #84]	@ (8007824 <MX_I2C2_Init+0x74>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80077d2:	4b14      	ldr	r3, [pc, #80]	@ (8007824 <MX_I2C2_Init+0x74>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80077d8:	4b12      	ldr	r3, [pc, #72]	@ (8007824 <MX_I2C2_Init+0x74>)
 80077da:	2200      	movs	r2, #0
 80077dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80077de:	4b11      	ldr	r3, [pc, #68]	@ (8007824 <MX_I2C2_Init+0x74>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007824 <MX_I2C2_Init+0x74>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80077ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007824 <MX_I2C2_Init+0x74>)
 80077ec:	0018      	movs	r0, r3
 80077ee:	f008 fd23 	bl	8010238 <HAL_I2C_Init>
 80077f2:	1e03      	subs	r3, r0, #0
 80077f4:	d001      	beq.n	80077fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80077f6:	f000 fd5b 	bl	80082b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80077fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007824 <MX_I2C2_Init+0x74>)
 80077fc:	2100      	movs	r1, #0
 80077fe:	0018      	movs	r0, r3
 8007800:	f00b f8f4 	bl	80129ec <HAL_I2CEx_ConfigAnalogFilter>
 8007804:	1e03      	subs	r3, r0, #0
 8007806:	d001      	beq.n	800780c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007808:	f000 fd52 	bl	80082b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800780c:	4b05      	ldr	r3, [pc, #20]	@ (8007824 <MX_I2C2_Init+0x74>)
 800780e:	2100      	movs	r1, #0
 8007810:	0018      	movs	r0, r3
 8007812:	f00b f937 	bl	8012a84 <HAL_I2CEx_ConfigDigitalFilter>
 8007816:	1e03      	subs	r3, r0, #0
 8007818:	d001      	beq.n	800781e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800781a:	f000 fd49 	bl	80082b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800781e:	46c0      	nop			@ (mov r8, r8)
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20000e3c 	.word	0x20000e3c
 8007828:	40005800 	.word	0x40005800
 800782c:	00503d58 	.word	0x00503d58

08007830 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007830:	b590      	push	{r4, r7, lr}
 8007832:	b08b      	sub	sp, #44	@ 0x2c
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007838:	2414      	movs	r4, #20
 800783a:	193b      	adds	r3, r7, r4
 800783c:	0018      	movs	r0, r3
 800783e:	2314      	movs	r3, #20
 8007840:	001a      	movs	r2, r3
 8007842:	2100      	movs	r1, #0
 8007844:	f018 fc86 	bl	8020154 <memset>
  if(i2cHandle->Instance==I2C1)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a5d      	ldr	r2, [pc, #372]	@ (80079c4 <HAL_I2C_MspInit+0x194>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d000      	beq.n	8007854 <HAL_I2C_MspInit+0x24>
 8007852:	e083      	b.n	800795c <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007854:	4b5c      	ldr	r3, [pc, #368]	@ (80079c8 <HAL_I2C_MspInit+0x198>)
 8007856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007858:	4b5b      	ldr	r3, [pc, #364]	@ (80079c8 <HAL_I2C_MspInit+0x198>)
 800785a:	2102      	movs	r1, #2
 800785c:	430a      	orrs	r2, r1
 800785e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007860:	4b59      	ldr	r3, [pc, #356]	@ (80079c8 <HAL_I2C_MspInit+0x198>)
 8007862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007864:	2202      	movs	r2, #2
 8007866:	4013      	ands	r3, r2
 8007868:	613b      	str	r3, [r7, #16]
 800786a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800786c:	0021      	movs	r1, r4
 800786e:	187b      	adds	r3, r7, r1
 8007870:	22c0      	movs	r2, #192	@ 0xc0
 8007872:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007874:	187b      	adds	r3, r7, r1
 8007876:	2212      	movs	r2, #18
 8007878:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800787a:	187b      	adds	r3, r7, r1
 800787c:	2200      	movs	r2, #0
 800787e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007880:	187b      	adds	r3, r7, r1
 8007882:	2203      	movs	r2, #3
 8007884:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8007886:	187b      	adds	r3, r7, r1
 8007888:	2201      	movs	r2, #1
 800788a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800788c:	187b      	adds	r3, r7, r1
 800788e:	4a4f      	ldr	r2, [pc, #316]	@ (80079cc <HAL_I2C_MspInit+0x19c>)
 8007890:	0019      	movs	r1, r3
 8007892:	0010      	movs	r0, r2
 8007894:	f008 fafc 	bl	800fe90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007898:	4b4b      	ldr	r3, [pc, #300]	@ (80079c8 <HAL_I2C_MspInit+0x198>)
 800789a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800789c:	4b4a      	ldr	r3, [pc, #296]	@ (80079c8 <HAL_I2C_MspInit+0x198>)
 800789e:	2180      	movs	r1, #128	@ 0x80
 80078a0:	0389      	lsls	r1, r1, #14
 80078a2:	430a      	orrs	r2, r1
 80078a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80078a6:	4b4a      	ldr	r3, [pc, #296]	@ (80079d0 <HAL_I2C_MspInit+0x1a0>)
 80078a8:	4a4a      	ldr	r2, [pc, #296]	@ (80079d4 <HAL_I2C_MspInit+0x1a4>)
 80078aa:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 80078ac:	4b48      	ldr	r3, [pc, #288]	@ (80079d0 <HAL_I2C_MspInit+0x1a0>)
 80078ae:	2206      	movs	r2, #6
 80078b0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80078b2:	4b47      	ldr	r3, [pc, #284]	@ (80079d0 <HAL_I2C_MspInit+0x1a0>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80078b8:	4b45      	ldr	r3, [pc, #276]	@ (80079d0 <HAL_I2C_MspInit+0x1a0>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80078be:	4b44      	ldr	r3, [pc, #272]	@ (80079d0 <HAL_I2C_MspInit+0x1a0>)
 80078c0:	2280      	movs	r2, #128	@ 0x80
 80078c2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80078c4:	4b42      	ldr	r3, [pc, #264]	@ (80079d0 <HAL_I2C_MspInit+0x1a0>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80078ca:	4b41      	ldr	r3, [pc, #260]	@ (80079d0 <HAL_I2C_MspInit+0x1a0>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80078d0:	4b3f      	ldr	r3, [pc, #252]	@ (80079d0 <HAL_I2C_MspInit+0x1a0>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80078d6:	4b3e      	ldr	r3, [pc, #248]	@ (80079d0 <HAL_I2C_MspInit+0x1a0>)
 80078d8:	2200      	movs	r2, #0
 80078da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80078dc:	4b3c      	ldr	r3, [pc, #240]	@ (80079d0 <HAL_I2C_MspInit+0x1a0>)
 80078de:	0018      	movs	r0, r3
 80078e0:	f007 feba 	bl	800f658 <HAL_DMA_Init>
 80078e4:	1e03      	subs	r3, r0, #0
 80078e6:	d001      	beq.n	80078ec <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 80078e8:	f000 fce2 	bl	80082b0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a38      	ldr	r2, [pc, #224]	@ (80079d0 <HAL_I2C_MspInit+0x1a0>)
 80078f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80078f2:	4b37      	ldr	r3, [pc, #220]	@ (80079d0 <HAL_I2C_MspInit+0x1a0>)
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80078f8:	4b37      	ldr	r3, [pc, #220]	@ (80079d8 <HAL_I2C_MspInit+0x1a8>)
 80078fa:	4a38      	ldr	r2, [pc, #224]	@ (80079dc <HAL_I2C_MspInit+0x1ac>)
 80078fc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 80078fe:	4b36      	ldr	r3, [pc, #216]	@ (80079d8 <HAL_I2C_MspInit+0x1a8>)
 8007900:	2206      	movs	r2, #6
 8007902:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007904:	4b34      	ldr	r3, [pc, #208]	@ (80079d8 <HAL_I2C_MspInit+0x1a8>)
 8007906:	2210      	movs	r2, #16
 8007908:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800790a:	4b33      	ldr	r3, [pc, #204]	@ (80079d8 <HAL_I2C_MspInit+0x1a8>)
 800790c:	2200      	movs	r2, #0
 800790e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007910:	4b31      	ldr	r3, [pc, #196]	@ (80079d8 <HAL_I2C_MspInit+0x1a8>)
 8007912:	2280      	movs	r2, #128	@ 0x80
 8007914:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007916:	4b30      	ldr	r3, [pc, #192]	@ (80079d8 <HAL_I2C_MspInit+0x1a8>)
 8007918:	2200      	movs	r2, #0
 800791a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800791c:	4b2e      	ldr	r3, [pc, #184]	@ (80079d8 <HAL_I2C_MspInit+0x1a8>)
 800791e:	2200      	movs	r2, #0
 8007920:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8007922:	4b2d      	ldr	r3, [pc, #180]	@ (80079d8 <HAL_I2C_MspInit+0x1a8>)
 8007924:	2200      	movs	r2, #0
 8007926:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007928:	4b2b      	ldr	r3, [pc, #172]	@ (80079d8 <HAL_I2C_MspInit+0x1a8>)
 800792a:	2200      	movs	r2, #0
 800792c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800792e:	4b2a      	ldr	r3, [pc, #168]	@ (80079d8 <HAL_I2C_MspInit+0x1a8>)
 8007930:	0018      	movs	r0, r3
 8007932:	f007 fe91 	bl	800f658 <HAL_DMA_Init>
 8007936:	1e03      	subs	r3, r0, #0
 8007938:	d001      	beq.n	800793e <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800793a:	f000 fcb9 	bl	80082b0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a25      	ldr	r2, [pc, #148]	@ (80079d8 <HAL_I2C_MspInit+0x1a8>)
 8007942:	639a      	str	r2, [r3, #56]	@ 0x38
 8007944:	4b24      	ldr	r3, [pc, #144]	@ (80079d8 <HAL_I2C_MspInit+0x1a8>)
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800794a:	2200      	movs	r2, #0
 800794c:	2100      	movs	r1, #0
 800794e:	2017      	movs	r0, #23
 8007950:	f007 fe4c 	bl	800f5ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8007954:	2017      	movs	r0, #23
 8007956:	f007 fe5e 	bl	800f616 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800795a:	e02e      	b.n	80079ba <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a1f      	ldr	r2, [pc, #124]	@ (80079e0 <HAL_I2C_MspInit+0x1b0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d129      	bne.n	80079ba <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007966:	4b18      	ldr	r3, [pc, #96]	@ (80079c8 <HAL_I2C_MspInit+0x198>)
 8007968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800796a:	4b17      	ldr	r3, [pc, #92]	@ (80079c8 <HAL_I2C_MspInit+0x198>)
 800796c:	2102      	movs	r1, #2
 800796e:	430a      	orrs	r2, r1
 8007970:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007972:	4b15      	ldr	r3, [pc, #84]	@ (80079c8 <HAL_I2C_MspInit+0x198>)
 8007974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007976:	2202      	movs	r2, #2
 8007978:	4013      	ands	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]
 800797c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800797e:	2114      	movs	r1, #20
 8007980:	187b      	adds	r3, r7, r1
 8007982:	22c0      	movs	r2, #192	@ 0xc0
 8007984:	0112      	lsls	r2, r2, #4
 8007986:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007988:	187b      	adds	r3, r7, r1
 800798a:	2212      	movs	r2, #18
 800798c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800798e:	187b      	adds	r3, r7, r1
 8007990:	2200      	movs	r2, #0
 8007992:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007994:	187b      	adds	r3, r7, r1
 8007996:	2203      	movs	r2, #3
 8007998:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800799a:	187b      	adds	r3, r7, r1
 800799c:	2206      	movs	r2, #6
 800799e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079a0:	187b      	adds	r3, r7, r1
 80079a2:	4a0a      	ldr	r2, [pc, #40]	@ (80079cc <HAL_I2C_MspInit+0x19c>)
 80079a4:	0019      	movs	r1, r3
 80079a6:	0010      	movs	r0, r2
 80079a8:	f008 fa72 	bl	800fe90 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80079ac:	4b06      	ldr	r3, [pc, #24]	@ (80079c8 <HAL_I2C_MspInit+0x198>)
 80079ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079b0:	4b05      	ldr	r3, [pc, #20]	@ (80079c8 <HAL_I2C_MspInit+0x198>)
 80079b2:	2180      	movs	r1, #128	@ 0x80
 80079b4:	03c9      	lsls	r1, r1, #15
 80079b6:	430a      	orrs	r2, r1
 80079b8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80079ba:	46c0      	nop			@ (mov r8, r8)
 80079bc:	46bd      	mov	sp, r7
 80079be:	b00b      	add	sp, #44	@ 0x2c
 80079c0:	bd90      	pop	{r4, r7, pc}
 80079c2:	46c0      	nop			@ (mov r8, r8)
 80079c4:	40005400 	.word	0x40005400
 80079c8:	40021000 	.word	0x40021000
 80079cc:	50000400 	.word	0x50000400
 80079d0:	20000e90 	.word	0x20000e90
 80079d4:	40020030 	.word	0x40020030
 80079d8:	20000ed8 	.word	0x20000ed8
 80079dc:	4002001c 	.word	0x4002001c
 80079e0:	40005800 	.word	0x40005800

080079e4 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80079e8:	4b10      	ldr	r3, [pc, #64]	@ (8007a2c <MX_I2S2_Init+0x48>)
 80079ea:	4a11      	ldr	r2, [pc, #68]	@ (8007a30 <MX_I2S2_Init+0x4c>)
 80079ec:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80079ee:	4b0f      	ldr	r3, [pc, #60]	@ (8007a2c <MX_I2S2_Init+0x48>)
 80079f0:	22c0      	movs	r2, #192	@ 0xc0
 80079f2:	0092      	lsls	r2, r2, #2
 80079f4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80079f6:	4b0d      	ldr	r3, [pc, #52]	@ (8007a2c <MX_I2S2_Init+0x48>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80079fc:	4b0b      	ldr	r3, [pc, #44]	@ (8007a2c <MX_I2S2_Init+0x48>)
 80079fe:	2203      	movs	r2, #3
 8007a00:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8007a02:	4b0a      	ldr	r3, [pc, #40]	@ (8007a2c <MX_I2S2_Init+0x48>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007a08:	4b08      	ldr	r3, [pc, #32]	@ (8007a2c <MX_I2S2_Init+0x48>)
 8007a0a:	22fa      	movs	r2, #250	@ 0xfa
 8007a0c:	0192      	lsls	r2, r2, #6
 8007a0e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007a10:	4b06      	ldr	r3, [pc, #24]	@ (8007a2c <MX_I2S2_Init+0x48>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8007a16:	4b05      	ldr	r3, [pc, #20]	@ (8007a2c <MX_I2S2_Init+0x48>)
 8007a18:	0018      	movs	r0, r3
 8007a1a:	f00b f87f 	bl	8012b1c <HAL_I2S_Init>
 8007a1e:	1e03      	subs	r3, r0, #0
 8007a20:	d001      	beq.n	8007a26 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8007a22:	f000 fc45 	bl	80082b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8007a26:	46c0      	nop			@ (mov r8, r8)
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	20000f20 	.word	0x20000f20
 8007a30:	40003800 	.word	0x40003800

08007a34 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8007a34:	b590      	push	{r4, r7, lr}
 8007a36:	b089      	sub	sp, #36	@ 0x24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a3c:	240c      	movs	r4, #12
 8007a3e:	193b      	adds	r3, r7, r4
 8007a40:	0018      	movs	r0, r3
 8007a42:	2314      	movs	r3, #20
 8007a44:	001a      	movs	r2, r3
 8007a46:	2100      	movs	r1, #0
 8007a48:	f018 fb84 	bl	8020154 <memset>
  if(i2sHandle->Instance==SPI2)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a2d      	ldr	r2, [pc, #180]	@ (8007b08 <HAL_I2S_MspInit+0xd4>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d154      	bne.n	8007b00 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007a56:	4b2d      	ldr	r3, [pc, #180]	@ (8007b0c <HAL_I2S_MspInit+0xd8>)
 8007a58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8007b0c <HAL_I2S_MspInit+0xd8>)
 8007a5c:	2180      	movs	r1, #128	@ 0x80
 8007a5e:	01c9      	lsls	r1, r1, #7
 8007a60:	430a      	orrs	r2, r1
 8007a62:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a64:	4b29      	ldr	r3, [pc, #164]	@ (8007b0c <HAL_I2S_MspInit+0xd8>)
 8007a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a68:	4b28      	ldr	r3, [pc, #160]	@ (8007b0c <HAL_I2S_MspInit+0xd8>)
 8007a6a:	2102      	movs	r1, #2
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007a70:	4b26      	ldr	r3, [pc, #152]	@ (8007b0c <HAL_I2S_MspInit+0xd8>)
 8007a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a74:	2202      	movs	r2, #2
 8007a76:	4013      	ands	r3, r2
 8007a78:	60bb      	str	r3, [r7, #8]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007a7c:	193b      	adds	r3, r7, r4
 8007a7e:	22b0      	movs	r2, #176	@ 0xb0
 8007a80:	0212      	lsls	r2, r2, #8
 8007a82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a84:	0021      	movs	r1, r4
 8007a86:	187b      	adds	r3, r7, r1
 8007a88:	2202      	movs	r2, #2
 8007a8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a8c:	187b      	adds	r3, r7, r1
 8007a8e:	2200      	movs	r2, #0
 8007a90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a92:	187b      	adds	r3, r7, r1
 8007a94:	2200      	movs	r2, #0
 8007a96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8007a98:	187b      	adds	r3, r7, r1
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a9e:	187b      	adds	r3, r7, r1
 8007aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8007b10 <HAL_I2S_MspInit+0xdc>)
 8007aa2:	0019      	movs	r1, r3
 8007aa4:	0010      	movs	r0, r2
 8007aa6:	f008 f9f3 	bl	800fe90 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8007aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8007b14 <HAL_I2S_MspInit+0xe0>)
 8007aac:	4a1a      	ldr	r2, [pc, #104]	@ (8007b18 <HAL_I2S_MspInit+0xe4>)
 8007aae:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8007ab0:	4b18      	ldr	r3, [pc, #96]	@ (8007b14 <HAL_I2S_MspInit+0xe0>)
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007ab6:	4b17      	ldr	r3, [pc, #92]	@ (8007b14 <HAL_I2S_MspInit+0xe0>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007abc:	4b15      	ldr	r3, [pc, #84]	@ (8007b14 <HAL_I2S_MspInit+0xe0>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007ac2:	4b14      	ldr	r3, [pc, #80]	@ (8007b14 <HAL_I2S_MspInit+0xe0>)
 8007ac4:	2280      	movs	r2, #128	@ 0x80
 8007ac6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007ac8:	4b12      	ldr	r3, [pc, #72]	@ (8007b14 <HAL_I2S_MspInit+0xe0>)
 8007aca:	2280      	movs	r2, #128	@ 0x80
 8007acc:	0052      	lsls	r2, r2, #1
 8007ace:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007ad0:	4b10      	ldr	r3, [pc, #64]	@ (8007b14 <HAL_I2S_MspInit+0xe0>)
 8007ad2:	2280      	movs	r2, #128	@ 0x80
 8007ad4:	00d2      	lsls	r2, r2, #3
 8007ad6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8007b14 <HAL_I2S_MspInit+0xe0>)
 8007ada:	2220      	movs	r2, #32
 8007adc:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007ade:	4b0d      	ldr	r3, [pc, #52]	@ (8007b14 <HAL_I2S_MspInit+0xe0>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8007b14 <HAL_I2S_MspInit+0xe0>)
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	f007 fdb6 	bl	800f658 <HAL_DMA_Init>
 8007aec:	1e03      	subs	r3, r0, #0
 8007aee:	d001      	beq.n	8007af4 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007af0:	f000 fbde 	bl	80082b0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a07      	ldr	r2, [pc, #28]	@ (8007b14 <HAL_I2S_MspInit+0xe0>)
 8007af8:	631a      	str	r2, [r3, #48]	@ 0x30
 8007afa:	4b06      	ldr	r3, [pc, #24]	@ (8007b14 <HAL_I2S_MspInit+0xe0>)
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007b00:	46c0      	nop			@ (mov r8, r8)
 8007b02:	46bd      	mov	sp, r7
 8007b04:	b009      	add	sp, #36	@ 0x24
 8007b06:	bd90      	pop	{r4, r7, pc}
 8007b08:	40003800 	.word	0x40003800
 8007b0c:	40021000 	.word	0x40021000
 8007b10:	50000400 	.word	0x50000400
 8007b14:	20000f5c 	.word	0x20000f5c
 8007b18:	40020044 	.word	0x40020044

08007b1c <SetTestDone>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SetTestDone(){
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	af00      	add	r7, sp, #0
  testDone = true;
 8007b20:	4b1e      	ldr	r3, [pc, #120]	@ (8007b9c <SetTestDone+0x80>)
 8007b22:	2201      	movs	r2, #1
 8007b24:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 8007b26:	23fa      	movs	r3, #250	@ 0xfa
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	0018      	movs	r0, r3
 8007b2c:	f007 f8c4 	bl	800ecb8 <HAL_Delay>
  SetDBLED(false, false, true);
 8007b30:	2201      	movs	r2, #1
 8007b32:	2100      	movs	r1, #0
 8007b34:	2000      	movs	r0, #0
 8007b36:	f005 fb69 	bl	800d20c <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8007b3a:	4a19      	ldr	r2, [pc, #100]	@ (8007ba0 <SetTestDone+0x84>)
 8007b3c:	23fa      	movs	r3, #250	@ 0xfa
 8007b3e:	0119      	lsls	r1, r3, #4
 8007b40:	23fa      	movs	r3, #250	@ 0xfa
 8007b42:	011b      	lsls	r3, r3, #4
 8007b44:	0018      	movs	r0, r3
 8007b46:	f005 fb2d 	bl	800d1a4 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8007b4a:	4a15      	ldr	r2, [pc, #84]	@ (8007ba0 <SetTestDone+0x84>)
 8007b4c:	23fa      	movs	r3, #250	@ 0xfa
 8007b4e:	0119      	lsls	r1, r3, #4
 8007b50:	23fa      	movs	r3, #250	@ 0xfa
 8007b52:	011b      	lsls	r3, r3, #4
 8007b54:	0018      	movs	r0, r3
 8007b56:	f005 fba3 	bl	800d2a0 <SetVocLED>
  HAL_Delay(1000);
 8007b5a:	23fa      	movs	r3, #250	@ 0xfa
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	0018      	movs	r0, r3
 8007b60:	f007 f8aa 	bl	800ecb8 <HAL_Delay>
  SetDBLED(false, false, false);
 8007b64:	2200      	movs	r2, #0
 8007b66:	2100      	movs	r1, #0
 8007b68:	2000      	movs	r0, #0
 8007b6a:	f005 fb4f 	bl	800d20c <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007b6e:	23fa      	movs	r3, #250	@ 0xfa
 8007b70:	011a      	lsls	r2, r3, #4
 8007b72:	23fa      	movs	r3, #250	@ 0xfa
 8007b74:	0119      	lsls	r1, r3, #4
 8007b76:	23fa      	movs	r3, #250	@ 0xfa
 8007b78:	011b      	lsls	r3, r3, #4
 8007b7a:	0018      	movs	r0, r3
 8007b7c:	f005 fb12 	bl	800d1a4 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007b80:	23fa      	movs	r3, #250	@ 0xfa
 8007b82:	011a      	lsls	r2, r3, #4
 8007b84:	23fa      	movs	r3, #250	@ 0xfa
 8007b86:	0119      	lsls	r1, r3, #4
 8007b88:	23fa      	movs	r3, #250	@ 0xfa
 8007b8a:	011b      	lsls	r3, r3, #4
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	f005 fb87 	bl	800d2a0 <SetVocLED>
  InitDone();
 8007b92:	f005 fa5b 	bl	800d04c <InitDone>
}
 8007b96:	46c0      	nop			@ (mov r8, r8)
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	20000fa4 	.word	0x20000fa4
 8007ba0:	00000bb8 	.word	0x00000bb8

08007ba4 <FlashLEDs>:

void FlashLEDs(){
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 8007baa:	1dfb      	adds	r3, r7, #7
 8007bac:	2200      	movs	r2, #0
 8007bae:	701a      	strb	r2, [r3, #0]
 8007bb0:	e021      	b.n	8007bf6 <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	2001      	movs	r0, #1
 8007bb8:	f005 fb28 	bl	800d20c <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 8007bbc:	4a12      	ldr	r2, [pc, #72]	@ (8007c08 <FlashLEDs+0x64>)
 8007bbe:	23fa      	movs	r3, #250	@ 0xfa
 8007bc0:	0119      	lsls	r1, r3, #4
 8007bc2:	23fa      	movs	r3, #250	@ 0xfa
 8007bc4:	011b      	lsls	r3, r3, #4
 8007bc6:	0018      	movs	r0, r3
 8007bc8:	f005 faec 	bl	800d1a4 <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 8007bcc:	4a0e      	ldr	r2, [pc, #56]	@ (8007c08 <FlashLEDs+0x64>)
 8007bce:	23fa      	movs	r3, #250	@ 0xfa
 8007bd0:	0119      	lsls	r1, r3, #4
 8007bd2:	23fa      	movs	r3, #250	@ 0xfa
 8007bd4:	011b      	lsls	r3, r3, #4
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	f005 fb62 	bl	800d2a0 <SetVocLED>
    HAL_Delay(250);
 8007bdc:	20fa      	movs	r0, #250	@ 0xfa
 8007bde:	f007 f86b 	bl	800ecb8 <HAL_Delay>
    SetLEDsOff();
 8007be2:	f005 fca1 	bl	800d528 <SetLEDsOff>
    HAL_Delay(250);
 8007be6:	20fa      	movs	r0, #250	@ 0xfa
 8007be8:	f007 f866 	bl	800ecb8 <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 8007bec:	1dfb      	adds	r3, r7, #7
 8007bee:	781a      	ldrb	r2, [r3, #0]
 8007bf0:	1dfb      	adds	r3, r7, #7
 8007bf2:	3201      	adds	r2, #1
 8007bf4:	701a      	strb	r2, [r3, #0]
 8007bf6:	1dfb      	adds	r3, r7, #7
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	2b04      	cmp	r3, #4
 8007bfc:	d9d9      	bls.n	8007bb2 <FlashLEDs+0xe>
  }
}
 8007bfe:	46c0      	nop			@ (mov r8, r8)
 8007c00:	46c0      	nop			@ (mov r8, r8)
 8007c02:	46bd      	mov	sp, r7
 8007c04:	b002      	add	sp, #8
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	00000bb8 	.word	0x00000bb8

08007c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c10:	f006 ffe2 	bl	800ebd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007c14:	f000 f9f6 	bl	8008004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007c18:	f7ff fc0c 	bl	8007434 <MX_GPIO_Init>
  MX_DMA_Init();
 8007c1c:	f7ff fada 	bl	80071d4 <MX_DMA_Init>
  MX_I2C1_Init();
 8007c20:	f7ff fd86 	bl	8007730 <MX_I2C1_Init>
  MX_I2S2_Init();
 8007c24:	f7ff fede 	bl	80079e4 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007c28:	f006 f9f4 	bl	800e014 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007c2c:	f7ff fdc0 	bl	80077b0 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007c30:	f005 ffe8 	bl	800dc04 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007c34:	f006 f85a 	bl	800dcec <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007c38:	f006 fa20 	bl	800e07c <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007c3c:	f7ff fa18 	bl	8007070 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007c40:	f014 ff96 	bl	801cb70 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007c44:	f001 f938 	bl	8008eb8 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007c48:	f006 f9ae 	bl	800dfa8 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007c4c:	f006 f8cc 	bl	800dde8 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007c50:	4ac3      	ldr	r2, [pc, #780]	@ (8007f60 <main+0x354>)
 8007c52:	4bc4      	ldr	r3, [pc, #784]	@ (8007f64 <main+0x358>)
 8007c54:	0011      	movs	r1, r2
 8007c56:	0018      	movs	r0, r3
 8007c58:	f7ff fd1c 	bl	8007694 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8007c5c:	f7fe fc0a 	bl	8006474 <UserButton_Pressed>
 8007c60:	1e03      	subs	r3, r0, #0
 8007c62:	d004      	beq.n	8007c6e <main+0x62>
    EnableESPProg();
 8007c64:	f015 f854 	bl	801cd10 <EnableESPProg>
    ESP_Programming = true;
 8007c68:	4bbf      	ldr	r3, [pc, #764]	@ (8007f68 <main+0x35c>)
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	701a      	strb	r2, [r3, #0]
  }
  SetVerboseLevel(VERBOSE_ALL);
 8007c6e:	2003      	movs	r0, #3
 8007c70:	f006 fc2c 	bl	800e4cc <SetVerboseLevel>
  BinaryReleaseInfo();
 8007c74:	f006 fc44 	bl	800e500 <BinaryReleaseInfo>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007c78:	49bc      	ldr	r1, [pc, #752]	@ (8007f6c <main+0x360>)
 8007c7a:	4bbd      	ldr	r3, [pc, #756]	@ (8007f70 <main+0x364>)
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	0018      	movs	r0, r3
 8007c80:	f00f fadc 	bl	801723c <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007c84:	4bbb      	ldr	r3, [pc, #748]	@ (8007f74 <main+0x368>)
 8007c86:	0018      	movs	r0, r3
 8007c88:	f7fe fff8 	bl	8006c7c <InitClock>
  Debug("Clock init done");
 8007c8c:	4aba      	ldr	r2, [pc, #744]	@ (8007f78 <main+0x36c>)
 8007c8e:	4bbb      	ldr	r3, [pc, #748]	@ (8007f7c <main+0x370>)
 8007c90:	0019      	movs	r1, r3
 8007c92:	2003      	movs	r0, #3
 8007c94:	f006 fbb0 	bl	800e3f8 <CreateLine>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn)) {
 8007c98:	4ab9      	ldr	r2, [pc, #740]	@ (8007f80 <main+0x374>)
 8007c9a:	49ba      	ldr	r1, [pc, #744]	@ (8007f84 <main+0x378>)
 8007c9c:	48ba      	ldr	r0, [pc, #744]	@ (8007f88 <main+0x37c>)
 8007c9e:	230b      	movs	r3, #11
 8007ca0:	f004 fb4a 	bl	800c338 <soundInit>
 8007ca4:	0003      	movs	r3, r0
 8007ca6:	001a      	movs	r2, r3
 8007ca8:	2301      	movs	r3, #1
 8007caa:	4053      	eors	r3, r2
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d005      	beq.n	8007cbe <main+0xb2>
    errorHandler(__func__, __LINE__, __FILE__);
 8007cb2:	4ab6      	ldr	r2, [pc, #728]	@ (8007f8c <main+0x380>)
 8007cb4:	4bb6      	ldr	r3, [pc, #728]	@ (8007f90 <main+0x384>)
 8007cb6:	21f0      	movs	r1, #240	@ 0xf0
 8007cb8:	0018      	movs	r0, r3
 8007cba:	f006 fc55 	bl	800e568 <errorHandler>
  }
  Device_Init(&hi2c1, &hi2s2, &hadc, &huart4);
 8007cbe:	4bb5      	ldr	r3, [pc, #724]	@ (8007f94 <main+0x388>)
 8007cc0:	4ab5      	ldr	r2, [pc, #724]	@ (8007f98 <main+0x38c>)
 8007cc2:	49b0      	ldr	r1, [pc, #704]	@ (8007f84 <main+0x378>)
 8007cc4:	48b5      	ldr	r0, [pc, #724]	@ (8007f9c <main+0x390>)
 8007cc6:	f000 fb95 	bl	80083f4 <Device_Init>
  deviceTimeOut = HAL_GetTick() + 5000;
 8007cca:	f006 ffeb 	bl	800eca4 <HAL_GetTick>
 8007cce:	0003      	movs	r3, r0
 8007cd0:	4ab3      	ldr	r2, [pc, #716]	@ (8007fa0 <main+0x394>)
 8007cd2:	189a      	adds	r2, r3, r2
 8007cd4:	4bb3      	ldr	r3, [pc, #716]	@ (8007fa4 <main+0x398>)
 8007cd6:	601a      	str	r2, [r3, #0]
  priorUSBpluggedIn = !Check_USB_PowerOn(); // force the status of the SGP40
 8007cd8:	f7fe fbac 	bl	8006434 <Check_USB_PowerOn>
 8007cdc:	0003      	movs	r3, r0
 8007cde:	1e5a      	subs	r2, r3, #1
 8007ce0:	4193      	sbcs	r3, r2
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	4053      	eors	r3, r2
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	1c1a      	adds	r2, r3, #0
 8007cec:	2301      	movs	r3, #1
 8007cee:	4013      	ands	r3, r2
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	4bad      	ldr	r3, [pc, #692]	@ (8007fa8 <main+0x39c>)
 8007cf4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    if(TimestampIsReached(batteryReadTimer)){
 8007cf6:	4bad      	ldr	r3, [pc, #692]	@ (8007fac <main+0x3a0>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	0018      	movs	r0, r3
 8007cfc:	f006 fb26 	bl	800e34c <TimestampIsReached>
 8007d00:	1e03      	subs	r3, r0, #0
 8007d02:	d00e      	beq.n	8007d22 <main+0x116>
      charge = Battery_Upkeep();
 8007d04:	f005 fe08 	bl	800d918 <Battery_Upkeep>
 8007d08:	0003      	movs	r3, r0
 8007d0a:	001a      	movs	r2, r3
 8007d0c:	4ba8      	ldr	r3, [pc, #672]	@ (8007fb0 <main+0x3a4>)
 8007d0e:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 50000;
 8007d10:	f006 ffc8 	bl	800eca4 <HAL_GetTick>
 8007d14:	0003      	movs	r3, r0
 8007d16:	4aa7      	ldr	r2, [pc, #668]	@ (8007fb4 <main+0x3a8>)
 8007d18:	189a      	adds	r2, r3, r2
 8007d1a:	4ba4      	ldr	r3, [pc, #656]	@ (8007fac <main+0x3a0>)
 8007d1c:	601a      	str	r2, [r3, #0]
        showTime();
 8007d1e:	f7fe fbb9 	bl	8006494 <showTime>
    }
    configCheck();
 8007d22:	f005 fc81 	bl	800d628 <configCheck>
#ifndef STLINK_V3PWR
    //==== disable for power measurements in test condition
        stlinkpwr = false;
 8007d26:	4ba4      	ldr	r3, [pc, #656]	@ (8007fb8 <main+0x3ac>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	701a      	strb	r2, [r3, #0]
        if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 8007d2c:	4ba0      	ldr	r3, [pc, #640]	@ (8007fb0 <main+0x3a4>)
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d003      	beq.n	8007d3c <main+0x130>
 8007d34:	4b9e      	ldr	r3, [pc, #632]	@ (8007fb0 <main+0x3a4>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d104      	bne.n	8007d46 <main+0x13a>
          FlashLEDs();
 8007d3c:	f7ff ff32 	bl	8007ba4 <FlashLEDs>
          Sensor.PM_measurementEnabled = false;
 8007d40:	4b9e      	ldr	r3, [pc, #632]	@ (8007fbc <main+0x3b0>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	709a      	strb	r2, [r3, #2]
        }
        if(charge == BATTERY_CRITICAL && ESPstate == ESP_STATE_RESET){
 8007d46:	4b9a      	ldr	r3, [pc, #616]	@ (8007fb0 <main+0x3a4>)
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d109      	bne.n	8007d62 <main+0x156>
 8007d4e:	4b9c      	ldr	r3, [pc, #624]	@ (8007fc0 <main+0x3b4>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	2b09      	cmp	r3, #9
 8007d54:	d105      	bne.n	8007d62 <main+0x156>
          batteryEmpty = true;
 8007d56:	4b9b      	ldr	r3, [pc, #620]	@ (8007fc4 <main+0x3b8>)
 8007d58:	2201      	movs	r2, #1
 8007d5a:	701a      	strb	r2, [r3, #0]
          Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 8007d5c:	f7fe fec6 	bl	8006aec <Enter_Standby_Mode>
 8007d60:	e002      	b.n	8007d68 <main+0x15c>
        }
        else{
          batteryEmpty = false;
 8007d62:	4b98      	ldr	r3, [pc, #608]	@ (8007fc4 <main+0x3b8>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	701a      	strb	r2, [r3, #0]
        }
    //====
#endif
    if (testDone && !ESP_Programming && !batteryEmpty) {
 8007d68:	4b97      	ldr	r3, [pc, #604]	@ (8007fc8 <main+0x3bc>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d100      	bne.n	8007d72 <main+0x166>
 8007d70:	e0b6      	b.n	8007ee0 <main+0x2d4>
 8007d72:	4b7d      	ldr	r3, [pc, #500]	@ (8007f68 <main+0x35c>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2201      	movs	r2, #1
 8007d78:	4053      	eors	r3, r2
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d100      	bne.n	8007d82 <main+0x176>
 8007d80:	e0ae      	b.n	8007ee0 <main+0x2d4>
 8007d82:	4b90      	ldr	r3, [pc, #576]	@ (8007fc4 <main+0x3b8>)
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	2201      	movs	r2, #1
 8007d88:	4053      	eors	r3, r2
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d100      	bne.n	8007d92 <main+0x186>
 8007d90:	e0a6      	b.n	8007ee0 <main+0x2d4>
      if (priorUSBpluggedIn != usbPluggedIn) {
 8007d92:	4b85      	ldr	r3, [pc, #532]	@ (8007fa8 <main+0x39c>)
 8007d94:	781a      	ldrb	r2, [r3, #0]
 8007d96:	4b8d      	ldr	r3, [pc, #564]	@ (8007fcc <main+0x3c0>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d026      	beq.n	8007dec <main+0x1e0>
        Debug("USB power state change detected");
 8007d9e:	4a8c      	ldr	r2, [pc, #560]	@ (8007fd0 <main+0x3c4>)
 8007da0:	4b76      	ldr	r3, [pc, #472]	@ (8007f7c <main+0x370>)
 8007da2:	0019      	movs	r1, r3
 8007da4:	2003      	movs	r0, #3
 8007da6:	f006 fb27 	bl	800e3f8 <CreateLine>
        if (IsSGPPresent() && !usbPluggedIn) {
 8007daa:	f000 fabb 	bl	8008324 <IsSGPPresent>
 8007dae:	1e03      	subs	r3, r0, #0
 8007db0:	d009      	beq.n	8007dc6 <main+0x1ba>
 8007db2:	4b86      	ldr	r3, [pc, #536]	@ (8007fcc <main+0x3c0>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	2201      	movs	r2, #1
 8007db8:	4053      	eors	r3, r2
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <main+0x1ba>
//        if (IsSGPPresent() && ((product_name[4] == '4') || (product_name[4] == '5')) && !usbPluggedIn) {
          SetVOCSensorDIS_ENA(true);
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	f000 fab9 	bl	8008338 <SetVOCSensorDIS_ENA>
        }
        if (((product_name[4] == '4') || (product_name[4] == '5')) && usbPluggedIn) {
 8007dc6:	4b83      	ldr	r3, [pc, #524]	@ (8007fd4 <main+0x3c8>)
 8007dc8:	791b      	ldrb	r3, [r3, #4]
 8007dca:	2b34      	cmp	r3, #52	@ 0x34
 8007dcc:	d003      	beq.n	8007dd6 <main+0x1ca>
 8007dce:	4b81      	ldr	r3, [pc, #516]	@ (8007fd4 <main+0x3c8>)
 8007dd0:	791b      	ldrb	r3, [r3, #4]
 8007dd2:	2b35      	cmp	r3, #53	@ 0x35
 8007dd4:	d106      	bne.n	8007de4 <main+0x1d8>
 8007dd6:	4b7d      	ldr	r3, [pc, #500]	@ (8007fcc <main+0x3c0>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <main+0x1d8>
          SetVOCSensorDIS_ENA(false);
 8007dde:	2000      	movs	r0, #0
 8007de0:	f000 faaa 	bl	8008338 <SetVOCSensorDIS_ENA>
        }
        priorUSBpluggedIn = usbPluggedIn;
 8007de4:	4b79      	ldr	r3, [pc, #484]	@ (8007fcc <main+0x3c0>)
 8007de6:	781a      	ldrb	r2, [r3, #0]
 8007de8:	4b6f      	ldr	r3, [pc, #444]	@ (8007fa8 <main+0x39c>)
 8007dea:	701a      	strb	r2, [r3, #0]
      }
      if (SGPstate != SGP_STATE_START_MEASUREMENTS && SGPstate != SGP_STATE_WAIT_FOR_COMPLETION && Sensor.HT_measurementEnabled) {
 8007dec:	4b7a      	ldr	r3, [pc, #488]	@ (8007fd8 <main+0x3cc>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d00d      	beq.n	8007e10 <main+0x204>
 8007df4:	4b78      	ldr	r3, [pc, #480]	@ (8007fd8 <main+0x3cc>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d009      	beq.n	8007e10 <main+0x204>
 8007dfc:	4b6f      	ldr	r3, [pc, #444]	@ (8007fbc <main+0x3b0>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d005      	beq.n	8007e10 <main+0x204>
        HIDSstate = HIDS_Upkeep();
 8007e04:	f006 fe32 	bl	800ea6c <HIDS_Upkeep>
 8007e08:	0003      	movs	r3, r0
 8007e0a:	001a      	movs	r2, r3
 8007e0c:	4b73      	ldr	r3, [pc, #460]	@ (8007fdc <main+0x3d0>)
 8007e0e:	701a      	strb	r2, [r3, #0]
      }
      if (HIDSstate != HIDS_STATE_START_MEASUREMENTS && HIDSstate != HIDS_STATE_WAIT_FOR_COMPLETION && Sensor.VOC_measurementEnabled) {
 8007e10:	4b72      	ldr	r3, [pc, #456]	@ (8007fdc <main+0x3d0>)
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d00d      	beq.n	8007e34 <main+0x228>
 8007e18:	4b70      	ldr	r3, [pc, #448]	@ (8007fdc <main+0x3d0>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d009      	beq.n	8007e34 <main+0x228>
 8007e20:	4b66      	ldr	r3, [pc, #408]	@ (8007fbc <main+0x3b0>)
 8007e22:	785b      	ldrb	r3, [r3, #1]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d005      	beq.n	8007e34 <main+0x228>
        SGPstate = SGP_Upkeep();
 8007e28:	f004 f8f4 	bl	800c014 <SGP_Upkeep>
 8007e2c:	0003      	movs	r3, r0
 8007e2e:	001a      	movs	r2, r3
 8007e30:	4b69      	ldr	r3, [pc, #420]	@ (8007fd8 <main+0x3cc>)
 8007e32:	701a      	strb	r2, [r3, #0]
      }
      if (Sensor.MIC_measurementEnabled) {
 8007e34:	4b61      	ldr	r3, [pc, #388]	@ (8007fbc <main+0x3b0>)
 8007e36:	78db      	ldrb	r3, [r3, #3]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d005      	beq.n	8007e48 <main+0x23c>
        MICstate = Mic_Upkeep();
 8007e3c:	f000 ff06 	bl	8008c4c <Mic_Upkeep>
 8007e40:	0003      	movs	r3, r0
 8007e42:	001a      	movs	r2, r3
 8007e44:	4b66      	ldr	r3, [pc, #408]	@ (8007fe0 <main+0x3d4>)
 8007e46:	701a      	strb	r2, [r3, #0]
      }
      if ( ((charge >= BATTERY_GOOD) || stlinkpwr) && Sensor.PM_measurementEnabled) {
 8007e48:	4b59      	ldr	r3, [pc, #356]	@ (8007fb0 <main+0x3a4>)
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d803      	bhi.n	8007e58 <main+0x24c>
 8007e50:	4b59      	ldr	r3, [pc, #356]	@ (8007fb8 <main+0x3ac>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d01c      	beq.n	8007e92 <main+0x286>
 8007e58:	4b58      	ldr	r3, [pc, #352]	@ (8007fbc <main+0x3b0>)
 8007e5a:	789b      	ldrb	r3, [r3, #2]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d018      	beq.n	8007e92 <main+0x286>
        if (!sen5x_Get_sen5x_enable_state()&& usbPluggedIn ) {
 8007e60:	f001 f8b8 	bl	8008fd4 <sen5x_Get_sen5x_enable_state>
 8007e64:	0003      	movs	r3, r0
 8007e66:	001a      	movs	r2, r3
 8007e68:	2301      	movs	r3, #1
 8007e6a:	4053      	eors	r3, r2
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00c      	beq.n	8007e8c <main+0x280>
 8007e72:	4b56      	ldr	r3, [pc, #344]	@ (8007fcc <main+0x3c0>)
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d008      	beq.n	8007e8c <main+0x280>
          Debug("sen5x_enable called from line 287 main.c");
 8007e7a:	4a5a      	ldr	r2, [pc, #360]	@ (8007fe4 <main+0x3d8>)
 8007e7c:	4b3f      	ldr	r3, [pc, #252]	@ (8007f7c <main+0x370>)
 8007e7e:	0019      	movs	r1, r3
 8007e80:	2003      	movs	r0, #3
 8007e82:	f006 fab9 	bl	800e3f8 <CreateLine>
          sen5x_enable(0);
 8007e86:	2000      	movs	r0, #0
 8007e88:	f001 f8d0 	bl	800902c <sen5x_enable>
        }
        sen5x_statemachine();
 8007e8c:	f001 fe06 	bl	8009a9c <sen5x_statemachine>
 8007e90:	e020      	b.n	8007ed4 <main+0x2c8>
      }
      else if ((charge <= BATTERY_LOW) && !stlinkpwr && Sensor.PM_measurementEnabled) {
 8007e92:	4b47      	ldr	r3, [pc, #284]	@ (8007fb0 <main+0x3a4>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d81c      	bhi.n	8007ed4 <main+0x2c8>
 8007e9a:	4b47      	ldr	r3, [pc, #284]	@ (8007fb8 <main+0x3ac>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	4053      	eors	r3, r2
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d015      	beq.n	8007ed4 <main+0x2c8>
 8007ea8:	4b44      	ldr	r3, [pc, #272]	@ (8007fbc <main+0x3b0>)
 8007eaa:	789b      	ldrb	r3, [r3, #2]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d011      	beq.n	8007ed4 <main+0x2c8>
        Info("Battery level insufficient for sen5x operation");
 8007eb0:	4a4d      	ldr	r2, [pc, #308]	@ (8007fe8 <main+0x3dc>)
 8007eb2:	4b4e      	ldr	r3, [pc, #312]	@ (8007fec <main+0x3e0>)
 8007eb4:	0019      	movs	r1, r3
 8007eb6:	2002      	movs	r0, #2
 8007eb8:	f006 fa9e 	bl	800e3f8 <CreateLine>
        Sensor.PM_measurementEnabled = false;
 8007ebc:	4b3f      	ldr	r3, [pc, #252]	@ (8007fbc <main+0x3b0>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	709a      	strb	r2, [r3, #2]
        VOCNOx = false;
 8007ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8007ff0 <main+0x3e4>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	701a      	strb	r2, [r3, #0]
        if (sen5x_On) {
 8007ec8:	4b4a      	ldr	r3, [pc, #296]	@ (8007ff4 <main+0x3e8>)
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <main+0x2c8>
          sen5x_Power_Off();
 8007ed0:	f001 f91e 	bl	8009110 <sen5x_Power_Off>
        }
      }
      ESPstate = ESP_Upkeep();
 8007ed4:	f7fd faf8 	bl	80054c8 <ESP_Upkeep>
 8007ed8:	0003      	movs	r3, r0
 8007eda:	001a      	movs	r2, r3
 8007edc:	4b38      	ldr	r3, [pc, #224]	@ (8007fc0 <main+0x3b4>)
 8007ede:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8007ee0:	4b39      	ldr	r3, [pc, #228]	@ (8007fc8 <main+0x3bc>)
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	4053      	eors	r3, r2
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00f      	beq.n	8007f0e <main+0x302>
 8007eee:	4b1e      	ldr	r3, [pc, #120]	@ (8007f68 <main+0x35c>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	4053      	eors	r3, r2
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d008      	beq.n	8007f0e <main+0x302>
 8007efc:	4b31      	ldr	r3, [pc, #196]	@ (8007fc4 <main+0x3b8>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	2201      	movs	r2, #1
 8007f02:	4053      	eors	r3, r2
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d001      	beq.n	8007f0e <main+0x302>
      Device_Test();  // for device with startup time
 8007f0a:	f000 fbb9 	bl	8008680 <Device_Test>
    }
    if (!usbPluggedIn) {
 8007f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8007fcc <main+0x3c0>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2201      	movs	r2, #1
 8007f14:	4053      	eors	r3, r2
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d100      	bne.n	8007f1e <main+0x312>
 8007f1c:	e6eb      	b.n	8007cf6 <main+0xea>
      if (!userToggle && AllDevicesReady() && ESPTransmitDone) {     // check if all sensors are ready
 8007f1e:	4b36      	ldr	r3, [pc, #216]	@ (8007ff8 <main+0x3ec>)
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	2201      	movs	r2, #1
 8007f24:	4053      	eors	r3, r2
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d100      	bne.n	8007f2e <main+0x322>
 8007f2c:	e6e3      	b.n	8007cf6 <main+0xea>
 8007f2e:	f000 fc25 	bl	800877c <AllDevicesReady>
 8007f32:	1e03      	subs	r3, r0, #0
 8007f34:	d100      	bne.n	8007f38 <main+0x32c>
 8007f36:	e6de      	b.n	8007cf6 <main+0xea>
 8007f38:	4b30      	ldr	r3, [pc, #192]	@ (8007ffc <main+0x3f0>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d100      	bne.n	8007f42 <main+0x336>
 8007f40:	e6d9      	b.n	8007cf6 <main+0xea>
        EnabledConnectedDevices();
 8007f42:	f000 fc83 	bl	800884c <EnabledConnectedDevices>
        Enter_Stop_Mode(SensorProbe.PM_Present?WAIT_WITH_PM:WAIT_WITHOUT_PM);
 8007f46:	4b2e      	ldr	r3, [pc, #184]	@ (8008000 <main+0x3f4>)
 8007f48:	789b      	ldrb	r3, [r3, #2]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d002      	beq.n	8007f54 <main+0x348>
 8007f4e:	23d7      	movs	r3, #215	@ 0xd7
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	e001      	b.n	8007f58 <main+0x34c>
 8007f54:	23dc      	movs	r3, #220	@ 0xdc
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	0018      	movs	r0, r3
 8007f5a:	f7fe fde9 	bl	8006b30 <Enter_Stop_Mode>
    if(TimestampIsReached(batteryReadTimer)){
 8007f5e:	e6ca      	b.n	8007cf6 <main+0xea>
 8007f60:	20002248 	.word	0x20002248
 8007f64:	20002208 	.word	0x20002208
 8007f68:	20000fa5 	.word	0x20000fa5
 8007f6c:	20000fac 	.word	0x20000fac
 8007f70:	20002380 	.word	0x20002380
 8007f74:	20001234 	.word	0x20001234
 8007f78:	08023e40 	.word	0x08023e40
 8007f7c:	08023e50 	.word	0x08023e50
 8007f80:	20002288 	.word	0x20002288
 8007f84:	20000f20 	.word	0x20000f20
 8007f88:	20000f5c 	.word	0x20000f5c
 8007f8c:	08023e54 	.word	0x08023e54
 8007f90:	08025460 	.word	0x08025460
 8007f94:	20002438 	.word	0x20002438
 8007f98:	20000d8c 	.word	0x20000d8c
 8007f9c:	20000de8 	.word	0x20000de8
 8007fa0:	00001388 	.word	0x00001388
 8007fa4:	20000fbc 	.word	0x20000fbc
 8007fa8:	20000fa7 	.word	0x20000fa7
 8007fac:	20000fc0 	.word	0x20000fc0
 8007fb0:	20000fc4 	.word	0x20000fc4
 8007fb4:	0000c350 	.word	0x0000c350
 8007fb8:	2000007c 	.word	0x2000007c
 8007fbc:	20000080 	.word	0x20000080
 8007fc0:	20000fab 	.word	0x20000fab
 8007fc4:	20000fa6 	.word	0x20000fa6
 8007fc8:	20000fa4 	.word	0x20000fa4
 8007fcc:	200021f1 	.word	0x200021f1
 8007fd0:	08023e68 	.word	0x08023e68
 8007fd4:	2000125c 	.word	0x2000125c
 8007fd8:	20000fa8 	.word	0x20000fa8
 8007fdc:	20000fa9 	.word	0x20000fa9
 8007fe0:	20000faa 	.word	0x20000faa
 8007fe4:	08023e88 	.word	0x08023e88
 8007fe8:	08023eb4 	.word	0x08023eb4
 8007fec:	08023ee4 	.word	0x08023ee4
 8007ff0:	2000125a 	.word	0x2000125a
 8007ff4:	20001259 	.word	0x20001259
 8007ff8:	200021f2 	.word	0x200021f2
 8007ffc:	20000553 	.word	0x20000553
 8008000:	20000fc8 	.word	0x20000fc8

08008004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008004:	b590      	push	{r4, r7, lr}
 8008006:	b09d      	sub	sp, #116	@ 0x74
 8008008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800800a:	2438      	movs	r4, #56	@ 0x38
 800800c:	193b      	adds	r3, r7, r4
 800800e:	0018      	movs	r0, r3
 8008010:	2338      	movs	r3, #56	@ 0x38
 8008012:	001a      	movs	r2, r3
 8008014:	2100      	movs	r1, #0
 8008016:	f018 f89d 	bl	8020154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800801a:	2324      	movs	r3, #36	@ 0x24
 800801c:	18fb      	adds	r3, r7, r3
 800801e:	0018      	movs	r0, r3
 8008020:	2314      	movs	r3, #20
 8008022:	001a      	movs	r2, r3
 8008024:	2100      	movs	r1, #0
 8008026:	f018 f895 	bl	8020154 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800802a:	003b      	movs	r3, r7
 800802c:	0018      	movs	r0, r3
 800802e:	2324      	movs	r3, #36	@ 0x24
 8008030:	001a      	movs	r2, r3
 8008032:	2100      	movs	r1, #0
 8008034:	f018 f88e 	bl	8020154 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008038:	4b34      	ldr	r3, [pc, #208]	@ (800810c <SystemClock_Config+0x108>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a34      	ldr	r2, [pc, #208]	@ (8008110 <SystemClock_Config+0x10c>)
 800803e:	401a      	ands	r2, r3
 8008040:	4b32      	ldr	r3, [pc, #200]	@ (800810c <SystemClock_Config+0x108>)
 8008042:	2180      	movs	r1, #128	@ 0x80
 8008044:	0109      	lsls	r1, r1, #4
 8008046:	430a      	orrs	r2, r1
 8008048:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800804a:	f00c fecb 	bl	8014de4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800804e:	4b31      	ldr	r3, [pc, #196]	@ (8008114 <SystemClock_Config+0x110>)
 8008050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008052:	4a2f      	ldr	r2, [pc, #188]	@ (8008110 <SystemClock_Config+0x10c>)
 8008054:	401a      	ands	r2, r3
 8008056:	4b2f      	ldr	r3, [pc, #188]	@ (8008114 <SystemClock_Config+0x110>)
 8008058:	2180      	movs	r1, #128	@ 0x80
 800805a:	0149      	lsls	r1, r1, #5
 800805c:	430a      	orrs	r2, r1
 800805e:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8008060:	193b      	adds	r3, r7, r4
 8008062:	2226      	movs	r2, #38	@ 0x26
 8008064:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8008066:	193b      	adds	r3, r7, r4
 8008068:	2280      	movs	r2, #128	@ 0x80
 800806a:	0052      	lsls	r2, r2, #1
 800806c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800806e:	0021      	movs	r1, r4
 8008070:	187b      	adds	r3, r7, r1
 8008072:	2201      	movs	r2, #1
 8008074:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008076:	187b      	adds	r3, r7, r1
 8008078:	2210      	movs	r2, #16
 800807a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800807c:	187b      	adds	r3, r7, r1
 800807e:	2201      	movs	r2, #1
 8008080:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008082:	187b      	adds	r3, r7, r1
 8008084:	2200      	movs	r2, #0
 8008086:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008088:	187b      	adds	r3, r7, r1
 800808a:	0018      	movs	r0, r3
 800808c:	f00c ff3a 	bl	8014f04 <HAL_RCC_OscConfig>
 8008090:	1e03      	subs	r3, r0, #0
 8008092:	d001      	beq.n	8008098 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008094:	f000 f90c 	bl	80082b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008098:	2124      	movs	r1, #36	@ 0x24
 800809a:	187b      	adds	r3, r7, r1
 800809c:	220f      	movs	r2, #15
 800809e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80080a0:	187b      	adds	r3, r7, r1
 80080a2:	2201      	movs	r2, #1
 80080a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80080a6:	187b      	adds	r3, r7, r1
 80080a8:	2200      	movs	r2, #0
 80080aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80080ac:	187b      	adds	r3, r7, r1
 80080ae:	2200      	movs	r2, #0
 80080b0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80080b2:	187b      	adds	r3, r7, r1
 80080b4:	2200      	movs	r2, #0
 80080b6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80080b8:	187b      	adds	r3, r7, r1
 80080ba:	2100      	movs	r1, #0
 80080bc:	0018      	movs	r0, r3
 80080be:	f00d faf5 	bl	80156ac <HAL_RCC_ClockConfig>
 80080c2:	1e03      	subs	r3, r0, #0
 80080c4:	d001      	beq.n	80080ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80080c6:	f000 f8f3 	bl	80082b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 80080ca:	003b      	movs	r3, r7
 80080cc:	226d      	movs	r2, #109	@ 0x6d
 80080ce:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80080d0:	003b      	movs	r3, r7
 80080d2:	2200      	movs	r2, #0
 80080d4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80080d6:	003b      	movs	r3, r7
 80080d8:	2200      	movs	r2, #0
 80080da:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80080dc:	003b      	movs	r3, r7
 80080de:	2200      	movs	r2, #0
 80080e0:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80080e2:	003b      	movs	r3, r7
 80080e4:	2280      	movs	r2, #128	@ 0x80
 80080e6:	0252      	lsls	r2, r2, #9
 80080e8:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80080ea:	003b      	movs	r3, r7
 80080ec:	2280      	movs	r2, #128	@ 0x80
 80080ee:	04d2      	lsls	r2, r2, #19
 80080f0:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80080f2:	003b      	movs	r3, r7
 80080f4:	0018      	movs	r0, r3
 80080f6:	f00d fcfd 	bl	8015af4 <HAL_RCCEx_PeriphCLKConfig>
 80080fa:	1e03      	subs	r3, r0, #0
 80080fc:	d001      	beq.n	8008102 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80080fe:	f000 f8d7 	bl	80082b0 <Error_Handler>
  }
}
 8008102:	46c0      	nop			@ (mov r8, r8)
 8008104:	46bd      	mov	sp, r7
 8008106:	b01d      	add	sp, #116	@ 0x74
 8008108:	bd90      	pop	{r4, r7, pc}
 800810a:	46c0      	nop			@ (mov r8, r8)
 800810c:	40007000 	.word	0x40007000
 8008110:	ffffe7ff 	.word	0xffffe7ff
 8008114:	40021000 	.word	0x40021000

08008118 <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 8008118:	b590      	push	{r4, r7, lr}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	000a      	movs	r2, r1
 8008122:	1cbb      	adds	r3, r7, #2
 8008124:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 8008126:	4c06      	ldr	r4, [pc, #24]	@ (8008140 <printString+0x28>)
 8008128:	1cbb      	adds	r3, r7, #2
 800812a:	881a      	ldrh	r2, [r3, #0]
 800812c:	6879      	ldr	r1, [r7, #4]
 800812e:	4805      	ldr	r0, [pc, #20]	@ (8008144 <printString+0x2c>)
 8008130:	0023      	movs	r3, r4
 8008132:	f00e ffe3 	bl	80170fc <HAL_UART_Transmit>
}
 8008136:	46c0      	nop			@ (mov r8, r8)
 8008138:	46bd      	mov	sp, r7
 800813a:	b003      	add	sp, #12
 800813c:	bd90      	pop	{r4, r7, pc}
 800813e:	46c0      	nop			@ (mov r8, r8)
 8008140:	0000ffff 	.word	0x0000ffff
 8008144:	20002380 	.word	0x20002380

08008148 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8008150:	4936      	ldr	r1, [pc, #216]	@ (800822c <HAL_UART_RxCpltCallback+0xe4>)
 8008152:	4b37      	ldr	r3, [pc, #220]	@ (8008230 <HAL_UART_RxCpltCallback+0xe8>)
 8008154:	2201      	movs	r2, #1
 8008156:	0018      	movs	r0, r3
 8008158:	f00f f870 	bl	801723c <HAL_UART_Receive_IT>
  switch (u1_rx_buff[0]){
 800815c:	4b33      	ldr	r3, [pc, #204]	@ (800822c <HAL_UART_RxCpltCallback+0xe4>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	3b61      	subs	r3, #97	@ 0x61
 8008162:	2b13      	cmp	r3, #19
 8008164:	d830      	bhi.n	80081c8 <HAL_UART_RxCpltCallback+0x80>
 8008166:	009a      	lsls	r2, r3, #2
 8008168:	4b32      	ldr	r3, [pc, #200]	@ (8008234 <HAL_UART_RxCpltCallback+0xec>)
 800816a:	18d3      	adds	r3, r2, r3
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 8008170:	4b31      	ldr	r3, [pc, #196]	@ (8008238 <HAL_UART_RxCpltCallback+0xf0>)
 8008172:	0018      	movs	r0, r3
 8008174:	f017 fea0 	bl	801feb8 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 8008178:	2003      	movs	r0, #3
 800817a:	f006 f9a7 	bl	800e4cc <SetVerboseLevel>
      break;
 800817e:	e04a      	b.n	8008216 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 8008180:	f7fb fb0c 	bl	800379c <forceNTPupdate>
    break;
 8008184:	e047      	b.n	8008216 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 8008186:	4b2d      	ldr	r3, [pc, #180]	@ (800823c <HAL_UART_RxCpltCallback+0xf4>)
 8008188:	0018      	movs	r0, r3
 800818a:	f017 fe95 	bl	801feb8 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800818e:	2002      	movs	r0, #2
 8008190:	f006 f99c 	bl	800e4cc <SetVerboseLevel>
      break;
 8008194:	e03f      	b.n	8008216 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 8008196:	4b2a      	ldr	r3, [pc, #168]	@ (8008240 <HAL_UART_RxCpltCallback+0xf8>)
 8008198:	0018      	movs	r0, r3
 800819a:	f017 fe8d 	bl	801feb8 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800819e:	2001      	movs	r0, #1
 80081a0:	f006 f994 	bl	800e4cc <SetVerboseLevel>
      break;
 80081a4:	e037      	b.n	8008216 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 80081a6:	4b27      	ldr	r3, [pc, #156]	@ (8008244 <HAL_UART_RxCpltCallback+0xfc>)
 80081a8:	0018      	movs	r0, r3
 80081aa:	f017 fe85 	bl	801feb8 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 80081ae:	2000      	movs	r0, #0
 80081b0:	f006 f98c 	bl	800e4cc <SetVerboseLevel>
      break;
 80081b4:	e02f      	b.n	8008216 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 80081b6:	f006 fd75 	bl	800eca4 <HAL_GetTick>
 80081ba:	0002      	movs	r2, r0
 80081bc:	4b22      	ldr	r3, [pc, #136]	@ (8008248 <HAL_UART_RxCpltCallback+0x100>)
 80081be:	601a      	str	r2, [r3, #0]
      break;
 80081c0:	e029      	b.n	8008216 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'t':
      showTime(); // show me the current time
 80081c2:	f7fe f967 	bl	8006494 <showTime>
      break;
 80081c6:	e026      	b.n	8008216 <HAL_UART_RxCpltCallback+0xce>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 80081c8:	4a20      	ldr	r2, [pc, #128]	@ (800824c <HAL_UART_RxCpltCallback+0x104>)
 80081ca:	4b21      	ldr	r3, [pc, #132]	@ (8008250 <HAL_UART_RxCpltCallback+0x108>)
 80081cc:	0019      	movs	r1, r3
 80081ce:	2001      	movs	r0, #1
 80081d0:	f006 f912 	bl	800e3f8 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 80081d4:	4b1f      	ldr	r3, [pc, #124]	@ (8008254 <HAL_UART_RxCpltCallback+0x10c>)
 80081d6:	0018      	movs	r0, r3
 80081d8:	f017 fe6e 	bl	801feb8 <puts>
      printf("a - VerboseLevel set to all\r\n");
 80081dc:	4b1e      	ldr	r3, [pc, #120]	@ (8008258 <HAL_UART_RxCpltCallback+0x110>)
 80081de:	0018      	movs	r0, r3
 80081e0:	f017 fe6a 	bl	801feb8 <puts>
      printf("f - Force NTP time synchronization\r\n");
 80081e4:	4b1d      	ldr	r3, [pc, #116]	@ (800825c <HAL_UART_RxCpltCallback+0x114>)
 80081e6:	0018      	movs	r0, r3
 80081e8:	f017 fe66 	bl	801feb8 <puts>
      printf("i - VerboseLevel set to info\r\n");
 80081ec:	4b1c      	ldr	r3, [pc, #112]	@ (8008260 <HAL_UART_RxCpltCallback+0x118>)
 80081ee:	0018      	movs	r0, r3
 80081f0:	f017 fe62 	bl	801feb8 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 80081f4:	4b1b      	ldr	r3, [pc, #108]	@ (8008264 <HAL_UART_RxCpltCallback+0x11c>)
 80081f6:	0018      	movs	r0, r3
 80081f8:	f017 fe5e 	bl	801feb8 <puts>
      printf("n - VerboseLevel set to none\r\n");
 80081fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008268 <HAL_UART_RxCpltCallback+0x120>)
 80081fe:	0018      	movs	r0, r3
 8008200:	f017 fe5a 	bl	801feb8 <puts>
      printf("s - Start particle measurement\r\n");
 8008204:	4b19      	ldr	r3, [pc, #100]	@ (800826c <HAL_UART_RxCpltCallback+0x124>)
 8008206:	0018      	movs	r0, r3
 8008208:	f017 fe56 	bl	801feb8 <puts>
      printf("t - Show actual systemtime\r\n");
 800820c:	4b18      	ldr	r3, [pc, #96]	@ (8008270 <HAL_UART_RxCpltCallback+0x128>)
 800820e:	0018      	movs	r0, r3
 8008210:	f017 fe52 	bl	801feb8 <puts>
  break;
 8008214:	46c0      	nop			@ (mov r8, r8)
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 8008216:	4905      	ldr	r1, [pc, #20]	@ (800822c <HAL_UART_RxCpltCallback+0xe4>)
 8008218:	4b05      	ldr	r3, [pc, #20]	@ (8008230 <HAL_UART_RxCpltCallback+0xe8>)
 800821a:	2201      	movs	r2, #1
 800821c:	0018      	movs	r0, r3
 800821e:	f00f f80d 	bl	801723c <HAL_UART_Receive_IT>
}
 8008222:	46c0      	nop			@ (mov r8, r8)
 8008224:	46bd      	mov	sp, r7
 8008226:	b002      	add	sp, #8
 8008228:	bd80      	pop	{r7, pc}
 800822a:	46c0      	nop			@ (mov r8, r8)
 800822c:	20000fac 	.word	0x20000fac
 8008230:	20002380 	.word	0x20002380
 8008234:	08025410 	.word	0x08025410
 8008238:	08023ee8 	.word	0x08023ee8
 800823c:	08023f04 	.word	0x08023f04
 8008240:	08023f20 	.word	0x08023f20
 8008244:	08023f40 	.word	0x08023f40
 8008248:	20001270 	.word	0x20001270
 800824c:	08023f5c 	.word	0x08023f5c
 8008250:	08023f8c 	.word	0x08023f8c
 8008254:	08023f90 	.word	0x08023f90
 8008258:	08023fa8 	.word	0x08023fa8
 800825c:	08023fc8 	.word	0x08023fc8
 8008260:	08023fec 	.word	0x08023fec
 8008264:	0802400c 	.word	0x0802400c
 8008268:	08024030 	.word	0x08024030
 800826c:	08024050 	.word	0x08024050
 8008270:	08024070 	.word	0x08024070

08008274 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	0002      	movs	r2, r0
 800827c:	1dbb      	adds	r3, r7, #6
 800827e:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 8008280:	1dbb      	adds	r3, r7, #6
 8008282:	881a      	ldrh	r2, [r3, #0]
 8008284:	2380      	movs	r3, #128	@ 0x80
 8008286:	021b      	lsls	r3, r3, #8
 8008288:	429a      	cmp	r2, r3
 800828a:	d10b      	bne.n	80082a4 <HAL_GPIO_EXTI_Callback+0x30>
    setuserToggle();
 800828c:	f005 fb58 	bl	800d940 <setuserToggle>
    if (GetPMSensorPresence()) {
 8008290:	f000 f83e 	bl	8008310 <GetPMSensorPresence>
 8008294:	1e03      	subs	r3, r0, #0
 8008296:	d005      	beq.n	80082a4 <HAL_GPIO_EXTI_Callback+0x30>
      Sensor.PM_measurementEnabled = true;
 8008298:	4b04      	ldr	r3, [pc, #16]	@ (80082ac <HAL_GPIO_EXTI_Callback+0x38>)
 800829a:	2201      	movs	r2, #1
 800829c:	709a      	strb	r2, [r3, #2]
      setsen5xReadTimer(100);
 800829e:	2064      	movs	r0, #100	@ 0x64
 80082a0:	f000 fea2 	bl	8008fe8 <setsen5xReadTimer>
    }

  }
}
 80082a4:	46c0      	nop			@ (mov r8, r8)
 80082a6:	46bd      	mov	sp, r7
 80082a8:	b002      	add	sp, #8
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	20000080 	.word	0x20000080

080082b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80082b4:	b672      	cpsid	i
}
 80082b6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    Error("Trapped in Error_Handler, wait for reset");
 80082b8:	4a05      	ldr	r2, [pc, #20]	@ (80082d0 <Error_Handler+0x20>)
 80082ba:	4b06      	ldr	r3, [pc, #24]	@ (80082d4 <Error_Handler+0x24>)
 80082bc:	0019      	movs	r1, r3
 80082be:	2001      	movs	r0, #1
 80082c0:	f006 f89a 	bl	800e3f8 <CreateLine>
    HAL_Delay(2500);
 80082c4:	4b04      	ldr	r3, [pc, #16]	@ (80082d8 <Error_Handler+0x28>)
 80082c6:	0018      	movs	r0, r3
 80082c8:	f006 fcf6 	bl	800ecb8 <HAL_Delay>
    Error("Trapped in Error_Handler, wait for reset");
 80082cc:	46c0      	nop			@ (mov r8, r8)
 80082ce:	e7f3      	b.n	80082b8 <Error_Handler+0x8>
 80082d0:	0802408c 	.word	0x0802408c
 80082d4:	08023f8c 	.word	0x08023f8c
 80082d8:	000009c4 	.word	0x000009c4

080082dc <testInit>:
};

EnabledMeasurements Sensor;
DevicePresent SensorProbe;

void testInit(){
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
  SensorProbe.HT_Present = false;
 80082e0:	4b0a      	ldr	r3, [pc, #40]	@ (800830c <testInit+0x30>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	701a      	strb	r2, [r3, #0]
  SensorProbe.VOC_Present = false;
 80082e6:	4b09      	ldr	r3, [pc, #36]	@ (800830c <testInit+0x30>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	705a      	strb	r2, [r3, #1]
  SensorProbe.PM_Present = false;
 80082ec:	4b07      	ldr	r3, [pc, #28]	@ (800830c <testInit+0x30>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	709a      	strb	r2, [r3, #2]
  SensorProbe.MIC_Present = false;
 80082f2:	4b06      	ldr	r3, [pc, #24]	@ (800830c <testInit+0x30>)
 80082f4:	2200      	movs	r2, #0
 80082f6:	70da      	strb	r2, [r3, #3]
  SensorProbe.ESP_Present = false;
 80082f8:	4b04      	ldr	r3, [pc, #16]	@ (800830c <testInit+0x30>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	711a      	strb	r2, [r3, #4]
  SensorProbe.SGP_Enabled = false;
 80082fe:	4b03      	ldr	r3, [pc, #12]	@ (800830c <testInit+0x30>)
 8008300:	2200      	movs	r2, #0
 8008302:	715a      	strb	r2, [r3, #5]
}
 8008304:	46c0      	nop			@ (mov r8, r8)
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	46c0      	nop			@ (mov r8, r8)
 800830c:	20000fc8 	.word	0x20000fc8

08008310 <GetPMSensorPresence>:

bool GetPMSensorPresence(){
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  return SensorProbe.PM_Present;
 8008314:	4b02      	ldr	r3, [pc, #8]	@ (8008320 <GetPMSensorPresence+0x10>)
 8008316:	789b      	ldrb	r3, [r3, #2]
}
 8008318:	0018      	movs	r0, r3
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	46c0      	nop			@ (mov r8, r8)
 8008320:	20000fc8 	.word	0x20000fc8

08008324 <IsSGPPresent>:

bool IsSGPSensorEnabled() {
  return SensorProbe.SGP_Enabled;
}

bool IsSGPPresent() {
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  return SensorProbe.VOC_Present;
 8008328:	4b02      	ldr	r3, [pc, #8]	@ (8008334 <IsSGPPresent+0x10>)
 800832a:	785b      	ldrb	r3, [r3, #1]
}
 800832c:	0018      	movs	r0, r3
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	46c0      	nop			@ (mov r8, r8)
 8008334:	20000fc8 	.word	0x20000fc8

08008338 <SetVOCSensorDIS_ENA>:

void SetVOCSensorDIS_ENA(bool setting) {
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	0002      	movs	r2, r0
 8008340:	1dfb      	adds	r3, r7, #7
 8008342:	701a      	strb	r2, [r3, #0]
  SensorProbe.SGP_Enabled = setting;
 8008344:	4b0b      	ldr	r3, [pc, #44]	@ (8008374 <SetVOCSensorDIS_ENA+0x3c>)
 8008346:	1dfa      	adds	r2, r7, #7
 8008348:	7812      	ldrb	r2, [r2, #0]
 800834a:	715a      	strb	r2, [r3, #5]
//  SensorProbe.VOC_Present = setting;
  Sensor.VOC_measurementEnabled = setting;
 800834c:	4b0a      	ldr	r3, [pc, #40]	@ (8008378 <SetVOCSensorDIS_ENA+0x40>)
 800834e:	1dfa      	adds	r2, r7, #7
 8008350:	7812      	ldrb	r2, [r2, #0]
 8008352:	705a      	strb	r2, [r3, #1]
  Debug("on-board SGP40 %s", setting?"enabled":"disabled");
 8008354:	1dfb      	adds	r3, r7, #7
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <SetVOCSensorDIS_ENA+0x28>
 800835c:	4b07      	ldr	r3, [pc, #28]	@ (800837c <SetVOCSensorDIS_ENA+0x44>)
 800835e:	e000      	b.n	8008362 <SetVOCSensorDIS_ENA+0x2a>
 8008360:	4b07      	ldr	r3, [pc, #28]	@ (8008380 <SetVOCSensorDIS_ENA+0x48>)
 8008362:	4a08      	ldr	r2, [pc, #32]	@ (8008384 <SetVOCSensorDIS_ENA+0x4c>)
 8008364:	4908      	ldr	r1, [pc, #32]	@ (8008388 <SetVOCSensorDIS_ENA+0x50>)
 8008366:	2003      	movs	r0, #3
 8008368:	f006 f846 	bl	800e3f8 <CreateLine>
}
 800836c:	46c0      	nop			@ (mov r8, r8)
 800836e:	46bd      	mov	sp, r7
 8008370:	b002      	add	sp, #8
 8008372:	bd80      	pop	{r7, pc}
 8008374:	20000fc8 	.word	0x20000fc8
 8008378:	20000080 	.word	0x20000080
 800837c:	080240b8 	.word	0x080240b8
 8008380:	080240c0 	.word	0x080240c0
 8008384:	080240cc 	.word	0x080240cc
 8008388:	080240e0 	.word	0x080240e0

0800838c <IsPMSensorEnabled>:

bool IsVOCSensorEnabled() {
  return Sensor.VOC_measurementEnabled;
}

bool IsPMSensorEnabled() {
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0
  return Sensor.PM_measurementEnabled;
 8008390:	4b02      	ldr	r3, [pc, #8]	@ (800839c <IsPMSensorEnabled+0x10>)
 8008392:	789b      	ldrb	r3, [r3, #2]
}
 8008394:	0018      	movs	r0, r3
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	46c0      	nop			@ (mov r8, r8)
 800839c:	20000080 	.word	0x20000080

080083a0 <SetVOCSensorStatus>:

void SetHTSensorStatus(bool setting) {
  Sensor.HT_measurementEnabled =  setting;
}

void SetVOCSensorStatus(bool setting) {
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	0002      	movs	r2, r0
 80083a8:	1dfb      	adds	r3, r7, #7
 80083aa:	701a      	strb	r2, [r3, #0]
  Sensor.VOC_measurementEnabled = setting;
 80083ac:	4b03      	ldr	r3, [pc, #12]	@ (80083bc <SetVOCSensorStatus+0x1c>)
 80083ae:	1dfa      	adds	r2, r7, #7
 80083b0:	7812      	ldrb	r2, [r2, #0]
 80083b2:	705a      	strb	r2, [r3, #1]
}
 80083b4:	46c0      	nop			@ (mov r8, r8)
 80083b6:	46bd      	mov	sp, r7
 80083b8:	b002      	add	sp, #8
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	20000080 	.word	0x20000080

080083c0 <SetPMSensorStatus>:

void SetPMSensorStatus(bool setting) {
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	0002      	movs	r2, r0
 80083c8:	1dfb      	adds	r3, r7, #7
 80083ca:	701a      	strb	r2, [r3, #0]
  Sensor.PM_measurementEnabled = setting;
 80083cc:	4b03      	ldr	r3, [pc, #12]	@ (80083dc <SetPMSensorStatus+0x1c>)
 80083ce:	1dfa      	adds	r2, r7, #7
 80083d0:	7812      	ldrb	r2, [r2, #0]
 80083d2:	709a      	strb	r2, [r3, #2]
}
 80083d4:	46c0      	nop			@ (mov r8, r8)
 80083d6:	46bd      	mov	sp, r7
 80083d8:	b002      	add	sp, #8
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	20000080 	.word	0x20000080

080083e0 <SetESPMeasurementDone>:

void SetMICSensorStatus(bool setting) {
  Sensor.MIC_measurementEnabled = setting;
}

void SetESPMeasurementDone(){
 80083e0:	b580      	push	{r7, lr}
 80083e2:	af00      	add	r7, sp, #0
  SensorProbe.ESP_Present = true;
 80083e4:	4b02      	ldr	r3, [pc, #8]	@ (80083f0 <SetESPMeasurementDone+0x10>)
 80083e6:	2201      	movs	r2, #1
 80083e8:	711a      	strb	r2, [r3, #4]
}
 80083ea:	46c0      	nop			@ (mov r8, r8)
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20000fc8 	.word	0x20000fc8

080083f4 <Device_Init>:

void Device_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER, UART_HandleTypeDef* espUart) {
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
 8008400:	603b      	str	r3, [r7, #0]
  testInit();
 8008402:	f7ff ff6b 	bl	80082dc <testInit>
  I2CSensors_Init(sensorI2C);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	0018      	movs	r0, r3
 800840a:	f7fd fcd9 	bl	8005dc0 <I2CSensors_Init>
  if(!HIDS_DeviceConnected()) {
 800840e:	f006 fa25 	bl	800e85c <HIDS_DeviceConnected>
 8008412:	0003      	movs	r3, r0
 8008414:	001a      	movs	r2, r3
 8008416:	2301      	movs	r3, #1
 8008418:	4053      	eors	r3, r2
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00c      	beq.n	800843a <Device_Init+0x46>
     Error("Humidity / Temperature sensor NOT connected!");
 8008420:	4a7f      	ldr	r2, [pc, #508]	@ (8008620 <Device_Init+0x22c>)
 8008422:	4b80      	ldr	r3, [pc, #512]	@ (8008624 <Device_Init+0x230>)
 8008424:	0019      	movs	r1, r3
 8008426:	2001      	movs	r0, #1
 8008428:	f005 ffe6 	bl	800e3f8 <CreateLine>
     SensorProbe.HT_Present = false;
 800842c:	4b7e      	ldr	r3, [pc, #504]	@ (8008628 <Device_Init+0x234>)
 800842e:	2200      	movs	r2, #0
 8008430:	701a      	strb	r2, [r3, #0]
     Sensor.HT_measurementEnabled = false;
 8008432:	4b7e      	ldr	r3, [pc, #504]	@ (800862c <Device_Init+0x238>)
 8008434:	2200      	movs	r2, #0
 8008436:	701a      	strb	r2, [r3, #0]
 8008438:	e008      	b.n	800844c <Device_Init+0x58>
     // HT Device NOT connected, turning LED on RED.
  }else {
    // HT Device is connected, turning led on GREEN.
    SensorProbe.HT_Present = true;
 800843a:	4b7b      	ldr	r3, [pc, #492]	@ (8008628 <Device_Init+0x234>)
 800843c:	2201      	movs	r2, #1
 800843e:	701a      	strb	r2, [r3, #0]
    Debug("Humidity / Temperature sensor initialised.");
 8008440:	4a7b      	ldr	r2, [pc, #492]	@ (8008630 <Device_Init+0x23c>)
 8008442:	4b7c      	ldr	r3, [pc, #496]	@ (8008634 <Device_Init+0x240>)
 8008444:	0019      	movs	r1, r3
 8008446:	2003      	movs	r0, #3
 8008448:	f005 ffd6 	bl	800e3f8 <CreateLine>
  }
  if(!SGP_DeviceConnected()) {
 800844c:	f003 fbd8 	bl	800bc00 <SGP_DeviceConnected>
 8008450:	0003      	movs	r3, r0
 8008452:	001a      	movs	r2, r3
 8008454:	2301      	movs	r3, #1
 8008456:	4053      	eors	r3, r2
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00c      	beq.n	8008478 <Device_Init+0x84>
    SensorProbe.VOC_Present = false;
 800845e:	4b72      	ldr	r3, [pc, #456]	@ (8008628 <Device_Init+0x234>)
 8008460:	2200      	movs	r2, #0
 8008462:	705a      	strb	r2, [r3, #1]
     Error("SGP device not connected!");
 8008464:	4a74      	ldr	r2, [pc, #464]	@ (8008638 <Device_Init+0x244>)
 8008466:	4b6f      	ldr	r3, [pc, #444]	@ (8008624 <Device_Init+0x230>)
 8008468:	0019      	movs	r1, r3
 800846a:	2001      	movs	r0, #1
 800846c:	f005 ffc4 	bl	800e3f8 <CreateLine>
     Sensor.VOC_measurementEnabled = false;
 8008470:	4b6e      	ldr	r3, [pc, #440]	@ (800862c <Device_Init+0x238>)
 8008472:	2200      	movs	r2, #0
 8008474:	705a      	strb	r2, [r3, #1]
 8008476:	e00b      	b.n	8008490 <Device_Init+0x9c>
  }
  else{
    SensorProbe.SGP_Enabled = true;
 8008478:	4b6b      	ldr	r3, [pc, #428]	@ (8008628 <Device_Init+0x234>)
 800847a:	2201      	movs	r2, #1
 800847c:	715a      	strb	r2, [r3, #5]
    SensorProbe.VOC_Present = true;
 800847e:	4b6a      	ldr	r3, [pc, #424]	@ (8008628 <Device_Init+0x234>)
 8008480:	2201      	movs	r2, #1
 8008482:	705a      	strb	r2, [r3, #1]
    Debug("SGP sensor initialised.");
 8008484:	4a6d      	ldr	r2, [pc, #436]	@ (800863c <Device_Init+0x248>)
 8008486:	4b6b      	ldr	r3, [pc, #428]	@ (8008634 <Device_Init+0x240>)
 8008488:	0019      	movs	r1, r3
 800848a:	2003      	movs	r0, #3
 800848c:	f005 ffb4 	bl	800e3f8 <CreateLine>
  }
  if(SensorProbe.VOC_Present && SensorProbe.HT_Present){
 8008490:	4b65      	ldr	r3, [pc, #404]	@ (8008628 <Device_Init+0x234>)
 8008492:	785b      	ldrb	r3, [r3, #1]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d009      	beq.n	80084ac <Device_Init+0xb8>
 8008498:	4b63      	ldr	r3, [pc, #396]	@ (8008628 <Device_Init+0x234>)
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d005      	beq.n	80084ac <Device_Init+0xb8>
    SetDBLED(false, true, false);
 80084a0:	2200      	movs	r2, #0
 80084a2:	2101      	movs	r1, #1
 80084a4:	2000      	movs	r0, #0
 80084a6:	f004 feb1 	bl	800d20c <SetDBLED>
 80084aa:	e018      	b.n	80084de <Device_Init+0xea>
  }
  else{
    SetDBLED(true, false, false);
 80084ac:	2200      	movs	r2, #0
 80084ae:	2100      	movs	r1, #0
 80084b0:	2001      	movs	r0, #1
 80084b2:	f004 feab 	bl	800d20c <SetDBLED>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80084b6:	4b62      	ldr	r3, [pc, #392]	@ (8008640 <Device_Init+0x24c>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	2101      	movs	r1, #1
 80084bc:	0018      	movs	r0, r3
 80084be:	f007 fe82 	bl	80101c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80084c2:	2380      	movs	r3, #128	@ 0x80
 80084c4:	005b      	lsls	r3, r3, #1
 80084c6:	485e      	ldr	r0, [pc, #376]	@ (8008640 <Device_Init+0x24c>)
 80084c8:	2201      	movs	r2, #1
 80084ca:	0019      	movs	r1, r3
 80084cc:	f007 fe7b 	bl	80101c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80084d0:	2380      	movs	r3, #128	@ 0x80
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	485a      	ldr	r0, [pc, #360]	@ (8008640 <Device_Init+0x24c>)
 80084d6:	2201      	movs	r2, #1
 80084d8:	0019      	movs	r1, r3
 80084da:	f007 fe74 	bl	80101c6 <HAL_GPIO_WritePin>
  }
  if(Sensor.MIC_measurementEnabled) {
 80084de:	4b53      	ldr	r3, [pc, #332]	@ (800862c <Device_Init+0x238>)
 80084e0:	78db      	ldrb	r3, [r3, #3]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d028      	beq.n	8008538 <Device_Init+0x144>
    Info("Device_Init calls enableMicrophone");
 80084e6:	4a57      	ldr	r2, [pc, #348]	@ (8008644 <Device_Init+0x250>)
 80084e8:	4b57      	ldr	r3, [pc, #348]	@ (8008648 <Device_Init+0x254>)
 80084ea:	0019      	movs	r1, r3
 80084ec:	2002      	movs	r0, #2
 80084ee:	f005 ff83 	bl	800e3f8 <CreateLine>
    if (!enableMicrophone(true)) {
 80084f2:	2001      	movs	r0, #1
 80084f4:	f003 ff88 	bl	800c408 <enableMicrophone>
 80084f8:	0003      	movs	r3, r0
 80084fa:	001a      	movs	r2, r3
 80084fc:	2301      	movs	r3, #1
 80084fe:	4053      	eors	r3, r2
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00c      	beq.n	8008520 <Device_Init+0x12c>
      Error("Microphone device not connected! DMA Error.");
 8008506:	4a51      	ldr	r2, [pc, #324]	@ (800864c <Device_Init+0x258>)
 8008508:	4b46      	ldr	r3, [pc, #280]	@ (8008624 <Device_Init+0x230>)
 800850a:	0019      	movs	r1, r3
 800850c:	2001      	movs	r0, #1
 800850e:	f005 ff73 	bl	800e3f8 <CreateLine>
      SensorProbe.MIC_Present = false;
 8008512:	4b45      	ldr	r3, [pc, #276]	@ (8008628 <Device_Init+0x234>)
 8008514:	2200      	movs	r2, #0
 8008516:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = false;
 8008518:	4b44      	ldr	r3, [pc, #272]	@ (800862c <Device_Init+0x238>)
 800851a:	2200      	movs	r2, #0
 800851c:	70da      	strb	r2, [r3, #3]
 800851e:	e00b      	b.n	8008538 <Device_Init+0x144>
    }
    else{
      SensorProbe.MIC_Present = true;
 8008520:	4b41      	ldr	r3, [pc, #260]	@ (8008628 <Device_Init+0x234>)
 8008522:	2201      	movs	r2, #1
 8008524:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 8008526:	4b41      	ldr	r3, [pc, #260]	@ (800862c <Device_Init+0x238>)
 8008528:	2201      	movs	r2, #1
 800852a:	70da      	strb	r2, [r3, #3]
      Debug("DMA and IRQ armed for Microphone sensor.");
 800852c:	4a48      	ldr	r2, [pc, #288]	@ (8008650 <Device_Init+0x25c>)
 800852e:	4b41      	ldr	r3, [pc, #260]	@ (8008634 <Device_Init+0x240>)
 8008530:	0019      	movs	r1, r3
 8008532:	2003      	movs	r0, #3
 8008534:	f005 ff60 	bl	800e3f8 <CreateLine>
    }
  }
  if (!probe_sen5x()) {
 8008538:	f000 fe20 	bl	800917c <probe_sen5x>
 800853c:	1e03      	subs	r3, r0, #0
 800853e:	d122      	bne.n	8008586 <Device_Init+0x192>
    Debug("PM sensor initialised.");
 8008540:	4a44      	ldr	r2, [pc, #272]	@ (8008654 <Device_Init+0x260>)
 8008542:	4b3c      	ldr	r3, [pc, #240]	@ (8008634 <Device_Init+0x240>)
 8008544:	0019      	movs	r1, r3
 8008546:	2003      	movs	r0, #3
 8008548:	f005 ff56 	bl	800e3f8 <CreateLine>
    SensorProbe.PM_Present = true; // not present
 800854c:	4b36      	ldr	r3, [pc, #216]	@ (8008628 <Device_Init+0x234>)
 800854e:	2201      	movs	r2, #1
 8008550:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = true;
 8008552:	4b36      	ldr	r3, [pc, #216]	@ (800862c <Device_Init+0x238>)
 8008554:	2201      	movs	r2, #1
 8008556:	709a      	strb	r2, [r3, #2]
    if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 8008558:	4b3f      	ldr	r3, [pc, #252]	@ (8008658 <Device_Init+0x264>)
 800855a:	791b      	ldrb	r3, [r3, #4]
 800855c:	2b34      	cmp	r3, #52	@ 0x34
 800855e:	d003      	beq.n	8008568 <Device_Init+0x174>
 8008560:	4b3d      	ldr	r3, [pc, #244]	@ (8008658 <Device_Init+0x264>)
 8008562:	791b      	ldrb	r3, [r3, #4]
 8008564:	2b35      	cmp	r3, #53	@ 0x35
 8008566:	d11c      	bne.n	80085a2 <Device_Init+0x1ae>
      Info("For power saving the SGP40 is disabled, VOCi measurement is done by sen54/sen55");
 8008568:	4a3c      	ldr	r2, [pc, #240]	@ (800865c <Device_Init+0x268>)
 800856a:	4b37      	ldr	r3, [pc, #220]	@ (8008648 <Device_Init+0x254>)
 800856c:	0019      	movs	r1, r3
 800856e:	2002      	movs	r0, #2
 8008570:	f005 ff42 	bl	800e3f8 <CreateLine>
      Sensor.VOC_measurementEnabled = false;
 8008574:	4b2d      	ldr	r3, [pc, #180]	@ (800862c <Device_Init+0x238>)
 8008576:	2200      	movs	r2, #0
 8008578:	705a      	strb	r2, [r3, #1]
      SensorProbe.SGP_Enabled = false;
 800857a:	4b2b      	ldr	r3, [pc, #172]	@ (8008628 <Device_Init+0x234>)
 800857c:	2200      	movs	r2, #0
 800857e:	715a      	strb	r2, [r3, #5]
      SGP_SoftReset();
 8008580:	f003 fd22 	bl	800bfc8 <SGP_SoftReset>
 8008584:	e00d      	b.n	80085a2 <Device_Init+0x1ae>
    }
  }
  else {
    sen5x_Power_Off();      // switch off buck converter
 8008586:	f000 fdc3 	bl	8009110 <sen5x_Power_Off>
    Debug("PM sensor not detected/connected.");
 800858a:	4a35      	ldr	r2, [pc, #212]	@ (8008660 <Device_Init+0x26c>)
 800858c:	4b29      	ldr	r3, [pc, #164]	@ (8008634 <Device_Init+0x240>)
 800858e:	0019      	movs	r1, r3
 8008590:	2003      	movs	r0, #3
 8008592:	f005 ff31 	bl	800e3f8 <CreateLine>
    SensorProbe.PM_Present = false;
 8008596:	4b24      	ldr	r3, [pc, #144]	@ (8008628 <Device_Init+0x234>)
 8008598:	2200      	movs	r2, #0
 800859a:	709a      	strb	r2, [r3, #2]
    Sensor.PM_measurementEnabled = false;
 800859c:	4b23      	ldr	r3, [pc, #140]	@ (800862c <Device_Init+0x238>)
 800859e:	2200      	movs	r2, #0
 80085a0:	709a      	strb	r2, [r3, #2]
  }
  Info("SensorProbe.HT_Present: %s", SensorProbe.HT_Present?"yes":"no");
 80085a2:	4b21      	ldr	r3, [pc, #132]	@ (8008628 <Device_Init+0x234>)
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <Device_Init+0x1ba>
 80085aa:	4b2e      	ldr	r3, [pc, #184]	@ (8008664 <Device_Init+0x270>)
 80085ac:	e000      	b.n	80085b0 <Device_Init+0x1bc>
 80085ae:	4b2e      	ldr	r3, [pc, #184]	@ (8008668 <Device_Init+0x274>)
 80085b0:	4a2e      	ldr	r2, [pc, #184]	@ (800866c <Device_Init+0x278>)
 80085b2:	4925      	ldr	r1, [pc, #148]	@ (8008648 <Device_Init+0x254>)
 80085b4:	2002      	movs	r0, #2
 80085b6:	f005 ff1f 	bl	800e3f8 <CreateLine>
  Info("SensorProbe.VOC_Present: %s", SensorProbe.VOC_Present?"yes":"no");
 80085ba:	4b1b      	ldr	r3, [pc, #108]	@ (8008628 <Device_Init+0x234>)
 80085bc:	785b      	ldrb	r3, [r3, #1]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <Device_Init+0x1d2>
 80085c2:	4b28      	ldr	r3, [pc, #160]	@ (8008664 <Device_Init+0x270>)
 80085c4:	e000      	b.n	80085c8 <Device_Init+0x1d4>
 80085c6:	4b28      	ldr	r3, [pc, #160]	@ (8008668 <Device_Init+0x274>)
 80085c8:	4a29      	ldr	r2, [pc, #164]	@ (8008670 <Device_Init+0x27c>)
 80085ca:	491f      	ldr	r1, [pc, #124]	@ (8008648 <Device_Init+0x254>)
 80085cc:	2002      	movs	r0, #2
 80085ce:	f005 ff13 	bl	800e3f8 <CreateLine>
  Info("SensorProbe.PM_Present: %s", SensorProbe.PM_Present?"yes":"no");
 80085d2:	4b15      	ldr	r3, [pc, #84]	@ (8008628 <Device_Init+0x234>)
 80085d4:	789b      	ldrb	r3, [r3, #2]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <Device_Init+0x1ea>
 80085da:	4b22      	ldr	r3, [pc, #136]	@ (8008664 <Device_Init+0x270>)
 80085dc:	e000      	b.n	80085e0 <Device_Init+0x1ec>
 80085de:	4b22      	ldr	r3, [pc, #136]	@ (8008668 <Device_Init+0x274>)
 80085e0:	4a24      	ldr	r2, [pc, #144]	@ (8008674 <Device_Init+0x280>)
 80085e2:	4919      	ldr	r1, [pc, #100]	@ (8008648 <Device_Init+0x254>)
 80085e4:	2002      	movs	r0, #2
 80085e6:	f005 ff07 	bl	800e3f8 <CreateLine>
  Info("SensorProbe.MIC_Present: %s", SensorProbe.MIC_Present?"yes":"no");
 80085ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008628 <Device_Init+0x234>)
 80085ec:	78db      	ldrb	r3, [r3, #3]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d001      	beq.n	80085f6 <Device_Init+0x202>
 80085f2:	4b1c      	ldr	r3, [pc, #112]	@ (8008664 <Device_Init+0x270>)
 80085f4:	e000      	b.n	80085f8 <Device_Init+0x204>
 80085f6:	4b1c      	ldr	r3, [pc, #112]	@ (8008668 <Device_Init+0x274>)
 80085f8:	4a1f      	ldr	r2, [pc, #124]	@ (8008678 <Device_Init+0x284>)
 80085fa:	4913      	ldr	r1, [pc, #76]	@ (8008648 <Device_Init+0x254>)
 80085fc:	2002      	movs	r0, #2
 80085fe:	f005 fefb 	bl	800e3f8 <CreateLine>
  ESP_Init(espUart);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	0018      	movs	r0, r3
 8008606:	f7fb fa69 	bl	8003adc <ESP_Init>
  Debug("Sensors initialized, probing ESP.");
 800860a:	4a1c      	ldr	r2, [pc, #112]	@ (800867c <Device_Init+0x288>)
 800860c:	4b09      	ldr	r3, [pc, #36]	@ (8008634 <Device_Init+0x240>)
 800860e:	0019      	movs	r1, r3
 8008610:	2003      	movs	r0, #3
 8008612:	f005 fef1 	bl	800e3f8 <CreateLine>
}
 8008616:	46c0      	nop			@ (mov r8, r8)
 8008618:	46bd      	mov	sp, r7
 800861a:	b004      	add	sp, #16
 800861c:	bd80      	pop	{r7, pc}
 800861e:	46c0      	nop			@ (mov r8, r8)
 8008620:	080240e4 	.word	0x080240e4
 8008624:	08024114 	.word	0x08024114
 8008628:	20000fc8 	.word	0x20000fc8
 800862c:	20000080 	.word	0x20000080
 8008630:	08024118 	.word	0x08024118
 8008634:	080240e0 	.word	0x080240e0
 8008638:	08024144 	.word	0x08024144
 800863c:	08024160 	.word	0x08024160
 8008640:	50000400 	.word	0x50000400
 8008644:	08024178 	.word	0x08024178
 8008648:	0802419c 	.word	0x0802419c
 800864c:	080241a0 	.word	0x080241a0
 8008650:	080241cc 	.word	0x080241cc
 8008654:	080241f8 	.word	0x080241f8
 8008658:	2000125c 	.word	0x2000125c
 800865c:	08024210 	.word	0x08024210
 8008660:	08024260 	.word	0x08024260
 8008664:	08024284 	.word	0x08024284
 8008668:	08024288 	.word	0x08024288
 800866c:	0802428c 	.word	0x0802428c
 8008670:	080242a8 	.word	0x080242a8
 8008674:	080242c4 	.word	0x080242c4
 8008678:	080242e0 	.word	0x080242e0
 800867c:	080242fc 	.word	0x080242fc

08008680 <Device_Test>:

void Device_Test(){
 8008680:	b580      	push	{r7, lr}
 8008682:	af00      	add	r7, sp, #0
  if(!SensorProbe.MIC_Present){
 8008684:	4b34      	ldr	r3, [pc, #208]	@ (8008758 <Device_Test+0xd8>)
 8008686:	78db      	ldrb	r3, [r3, #3]
 8008688:	2201      	movs	r2, #1
 800868a:	4053      	eors	r3, r2
 800868c:	b2db      	uxtb	r3, r3
 800868e:	2b00      	cmp	r3, #0
 8008690:	d027      	beq.n	80086e2 <Device_Test+0x62>
    if(MIC_TestMeasurementDone()){
 8008692:	f000 faab 	bl	8008bec <MIC_TestMeasurementDone>
 8008696:	1e03      	subs	r3, r0, #0
 8008698:	d011      	beq.n	80086be <Device_Test+0x3e>
      //when this condition is met, the device is definite operational
//      Debug("MIC_TestMeasurementDone() is true");
      SensorProbe.MIC_Present = true;
 800869a:	4b2f      	ldr	r3, [pc, #188]	@ (8008758 <Device_Test+0xd8>)
 800869c:	2201      	movs	r2, #1
 800869e:	70da      	strb	r2, [r3, #3]
      Sensor.MIC_measurementEnabled = true;
 80086a0:	4b2e      	ldr	r3, [pc, #184]	@ (800875c <Device_Test+0xdc>)
 80086a2:	2201      	movs	r2, #1
 80086a4:	70da      	strb	r2, [r3, #3]
      SetStatusLED(LED_OFF, Calculate_LED_ON(), LED_OFF);
 80086a6:	f004 fd35 	bl	800d114 <Calculate_LED_ON>
 80086aa:	0003      	movs	r3, r0
 80086ac:	0019      	movs	r1, r3
 80086ae:	23fa      	movs	r3, #250	@ 0xfa
 80086b0:	011a      	lsls	r2, r3, #4
 80086b2:	23fa      	movs	r3, #250	@ 0xfa
 80086b4:	011b      	lsls	r3, r3, #4
 80086b6:	0018      	movs	r0, r3
 80086b8:	f004 fd74 	bl	800d1a4 <SetStatusLED>
 80086bc:	e011      	b.n	80086e2 <Device_Test+0x62>
    }
    else{
      if (micSettlingComplete()) {
 80086be:	f003 fe7f 	bl	800c3c0 <micSettlingComplete>
 80086c2:	1e03      	subs	r3, r0, #0
 80086c4:	d00d      	beq.n	80086e2 <Device_Test+0x62>
        // his has to be met first
//        Debug("micSettlingComplete() is true");
        Sensor.MIC_measurementEnabled = true;
 80086c6:	4b25      	ldr	r3, [pc, #148]	@ (800875c <Device_Test+0xdc>)
 80086c8:	2201      	movs	r2, #1
 80086ca:	70da      	strb	r2, [r3, #3]
        SetStatusLED(Calculate_LED_ON(), LED_OFF, LED_OFF);
 80086cc:	f004 fd22 	bl	800d114 <Calculate_LED_ON>
 80086d0:	0003      	movs	r3, r0
 80086d2:	0018      	movs	r0, r3
 80086d4:	23fa      	movs	r3, #250	@ 0xfa
 80086d6:	011a      	lsls	r2, r3, #4
 80086d8:	23fa      	movs	r3, #250	@ 0xfa
 80086da:	011b      	lsls	r3, r3, #4
 80086dc:	0019      	movs	r1, r3
 80086de:	f004 fd61 	bl	800d1a4 <SetStatusLED>
      }
    }
  }
  if(!SensorProbe.ESP_Present){
 80086e2:	4b1d      	ldr	r3, [pc, #116]	@ (8008758 <Device_Test+0xd8>)
 80086e4:	791b      	ldrb	r3, [r3, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	4053      	eors	r3, r2
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d001      	beq.n	80086f4 <Device_Test+0x74>
    ESP_WakeTest();  // calls in ESP.c  back to SetESPMeasurementDone()
 80086f0:	f7fc fdd0 	bl	8005294 <ESP_WakeTest>
  }
  if((SensorProbe.ESP_Present && SensorProbe.MIC_Present) || TimestampIsReached(deviceTimeOut)){
 80086f4:	4b18      	ldr	r3, [pc, #96]	@ (8008758 <Device_Test+0xd8>)
 80086f6:	791b      	ldrb	r3, [r3, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <Device_Test+0x84>
 80086fc:	4b16      	ldr	r3, [pc, #88]	@ (8008758 <Device_Test+0xd8>)
 80086fe:	78db      	ldrb	r3, [r3, #3]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d106      	bne.n	8008712 <Device_Test+0x92>
 8008704:	4b16      	ldr	r3, [pc, #88]	@ (8008760 <Device_Test+0xe0>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	0018      	movs	r0, r3
 800870a:	f005 fe1f 	bl	800e34c <TimestampIsReached>
 800870e:	1e03      	subs	r3, r0, #0
 8008710:	d01f      	beq.n	8008752 <Device_Test+0xd2>
    Info("Test completed");
 8008712:	4a14      	ldr	r2, [pc, #80]	@ (8008764 <Device_Test+0xe4>)
 8008714:	4b14      	ldr	r3, [pc, #80]	@ (8008768 <Device_Test+0xe8>)
 8008716:	0019      	movs	r1, r3
 8008718:	2002      	movs	r0, #2
 800871a:	f005 fe6d 	bl	800e3f8 <CreateLine>
    Info("ESP function: %s", SensorProbe.ESP_Present?"passed": "failed");
 800871e:	4b0e      	ldr	r3, [pc, #56]	@ (8008758 <Device_Test+0xd8>)
 8008720:	791b      	ldrb	r3, [r3, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <Device_Test+0xaa>
 8008726:	4b11      	ldr	r3, [pc, #68]	@ (800876c <Device_Test+0xec>)
 8008728:	e000      	b.n	800872c <Device_Test+0xac>
 800872a:	4b11      	ldr	r3, [pc, #68]	@ (8008770 <Device_Test+0xf0>)
 800872c:	4a11      	ldr	r2, [pc, #68]	@ (8008774 <Device_Test+0xf4>)
 800872e:	490e      	ldr	r1, [pc, #56]	@ (8008768 <Device_Test+0xe8>)
 8008730:	2002      	movs	r0, #2
 8008732:	f005 fe61 	bl	800e3f8 <CreateLine>
    Info("MIC function: %s", SensorProbe.MIC_Present?"passed": "failed");
 8008736:	4b08      	ldr	r3, [pc, #32]	@ (8008758 <Device_Test+0xd8>)
 8008738:	78db      	ldrb	r3, [r3, #3]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d001      	beq.n	8008742 <Device_Test+0xc2>
 800873e:	4b0b      	ldr	r3, [pc, #44]	@ (800876c <Device_Test+0xec>)
 8008740:	e000      	b.n	8008744 <Device_Test+0xc4>
 8008742:	4b0b      	ldr	r3, [pc, #44]	@ (8008770 <Device_Test+0xf0>)
 8008744:	4a0c      	ldr	r2, [pc, #48]	@ (8008778 <Device_Test+0xf8>)
 8008746:	4908      	ldr	r1, [pc, #32]	@ (8008768 <Device_Test+0xe8>)
 8008748:	2002      	movs	r0, #2
 800874a:	f005 fe55 	bl	800e3f8 <CreateLine>
    SetTestDone();
 800874e:	f7ff f9e5 	bl	8007b1c <SetTestDone>
  }
}
 8008752:	46c0      	nop			@ (mov r8, r8)
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	20000fc8 	.word	0x20000fc8
 800875c:	20000080 	.word	0x20000080
 8008760:	20000fbc 	.word	0x20000fbc
 8008764:	08024320 	.word	0x08024320
 8008768:	0802419c 	.word	0x0802419c
 800876c:	08024330 	.word	0x08024330
 8008770:	08024338 	.word	0x08024338
 8008774:	08024340 	.word	0x08024340
 8008778:	08024354 	.word	0x08024354

0800877c <AllDevicesReady>:

bool AllDevicesReady() {
 800877c:	b580      	push	{r7, lr}
 800877e:	af00      	add	r7, sp, #0
  if (TimestampIsReached(deviceTimeOut)) {
 8008780:	4b2a      	ldr	r3, [pc, #168]	@ (800882c <AllDevicesReady+0xb0>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	0018      	movs	r0, r3
 8008786:	f005 fde1 	bl	800e34c <TimestampIsReached>
 800878a:	1e03      	subs	r3, r0, #0
 800878c:	d04a      	beq.n	8008824 <AllDevicesReady+0xa8>
    if (HIDSstate == HIDS_STATE_WAIT) {
 800878e:	4b28      	ldr	r3, [pc, #160]	@ (8008830 <AllDevicesReady+0xb4>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	2b06      	cmp	r3, #6
 8008794:	d102      	bne.n	800879c <AllDevicesReady+0x20>
      Sensor.HT_measurementEnabled = false;
 8008796:	4b27      	ldr	r3, [pc, #156]	@ (8008834 <AllDevicesReady+0xb8>)
 8008798:	2200      	movs	r2, #0
 800879a:	701a      	strb	r2, [r3, #0]
    }
    if ((SGPstate == SGP_STATE_WAIT) || !SensorProbe.SGP_Enabled) {
 800879c:	4b26      	ldr	r3, [pc, #152]	@ (8008838 <AllDevicesReady+0xbc>)
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2b07      	cmp	r3, #7
 80087a2:	d006      	beq.n	80087b2 <AllDevicesReady+0x36>
 80087a4:	4b25      	ldr	r3, [pc, #148]	@ (800883c <AllDevicesReady+0xc0>)
 80087a6:	795b      	ldrb	r3, [r3, #5]
 80087a8:	2201      	movs	r2, #1
 80087aa:	4053      	eors	r3, r2
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d002      	beq.n	80087b8 <AllDevicesReady+0x3c>
      Sensor.VOC_measurementEnabled = false;
 80087b2:	4b20      	ldr	r3, [pc, #128]	@ (8008834 <AllDevicesReady+0xb8>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	705a      	strb	r2, [r3, #1]
    }
    if (PMsamplesState == LIGHT_OUT) {
 80087b8:	4b21      	ldr	r3, [pc, #132]	@ (8008840 <AllDevicesReady+0xc4>)
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d102      	bne.n	80087c6 <AllDevicesReady+0x4a>
      Sensor.PM_measurementEnabled = false;
 80087c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008834 <AllDevicesReady+0xb8>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	709a      	strb	r2, [r3, #2]
    }
    if (MICstate == MIC_STATE_WAIT){
 80087c6:	4b1f      	ldr	r3, [pc, #124]	@ (8008844 <AllDevicesReady+0xc8>)
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	d102      	bne.n	80087d4 <AllDevicesReady+0x58>
      Sensor.MIC_measurementEnabled = false;
 80087ce:	4b19      	ldr	r3, [pc, #100]	@ (8008834 <AllDevicesReady+0xb8>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	70da      	strb	r2, [r3, #3]
    }
    if (ESPstate == ESP_STATE_RESET) {
 80087d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008848 <AllDevicesReady+0xcc>)
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	2b09      	cmp	r3, #9
 80087da:	d123      	bne.n	8008824 <AllDevicesReady+0xa8>
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80087dc:	4b15      	ldr	r3, [pc, #84]	@ (8008834 <AllDevicesReady+0xb8>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	2201      	movs	r2, #1
 80087e2:	4053      	eors	r3, r2
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d016      	beq.n	8008818 <AllDevicesReady+0x9c>
 80087ea:	4b12      	ldr	r3, [pc, #72]	@ (8008834 <AllDevicesReady+0xb8>)
 80087ec:	785b      	ldrb	r3, [r3, #1]
 80087ee:	2201      	movs	r2, #1
 80087f0:	4053      	eors	r3, r2
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00f      	beq.n	8008818 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 80087f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008834 <AllDevicesReady+0xb8>)
 80087fa:	789b      	ldrb	r3, [r3, #2]
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 80087fc:	2201      	movs	r2, #1
 80087fe:	4053      	eors	r3, r2
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d008      	beq.n	8008818 <AllDevicesReady+0x9c>
          Sensor.PM_measurementEnabled || Sensor.MIC_measurementEnabled);
 8008806:	4b0b      	ldr	r3, [pc, #44]	@ (8008834 <AllDevicesReady+0xb8>)
 8008808:	78db      	ldrb	r3, [r3, #3]
 800880a:	2201      	movs	r2, #1
 800880c:	4053      	eors	r3, r2
 800880e:	b2db      	uxtb	r3, r3
      return !(Sensor.HT_measurementEnabled || Sensor.VOC_measurementEnabled ||
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <AllDevicesReady+0x9c>
 8008814:	2301      	movs	r3, #1
 8008816:	e000      	b.n	800881a <AllDevicesReady+0x9e>
 8008818:	2300      	movs	r3, #0
 800881a:	1c1a      	adds	r2, r3, #0
 800881c:	2301      	movs	r3, #1
 800881e:	4013      	ands	r3, r2
 8008820:	b2db      	uxtb	r3, r3
 8008822:	e000      	b.n	8008826 <AllDevicesReady+0xaa>
    }
  }
  return false;
 8008824:	2300      	movs	r3, #0
}
 8008826:	0018      	movs	r0, r3
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	20000fbc 	.word	0x20000fbc
 8008830:	20000fa9 	.word	0x20000fa9
 8008834:	20000080 	.word	0x20000080
 8008838:	20000fa8 	.word	0x20000fa8
 800883c:	20000fc8 	.word	0x20000fc8
 8008840:	20000085 	.word	0x20000085
 8008844:	20000faa 	.word	0x20000faa
 8008848:	20000fab 	.word	0x20000fab

0800884c <EnabledConnectedDevices>:

void EnabledConnectedDevices() {
 800884c:	b580      	push	{r7, lr}
 800884e:	af00      	add	r7, sp, #0
  if (SensorProbe.HT_Present) {
 8008850:	4b11      	ldr	r3, [pc, #68]	@ (8008898 <EnabledConnectedDevices+0x4c>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <EnabledConnectedDevices+0x12>
    Sensor.HT_measurementEnabled = true;
 8008858:	4b10      	ldr	r3, [pc, #64]	@ (800889c <EnabledConnectedDevices+0x50>)
 800885a:	2201      	movs	r2, #1
 800885c:	701a      	strb	r2, [r3, #0]
  }
  if ((SensorProbe.VOC_Present) && (SensorProbe.SGP_Enabled)) {
 800885e:	4b0e      	ldr	r3, [pc, #56]	@ (8008898 <EnabledConnectedDevices+0x4c>)
 8008860:	785b      	ldrb	r3, [r3, #1]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d006      	beq.n	8008874 <EnabledConnectedDevices+0x28>
 8008866:	4b0c      	ldr	r3, [pc, #48]	@ (8008898 <EnabledConnectedDevices+0x4c>)
 8008868:	795b      	ldrb	r3, [r3, #5]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <EnabledConnectedDevices+0x28>
    Sensor.VOC_measurementEnabled = true;
 800886e:	4b0b      	ldr	r3, [pc, #44]	@ (800889c <EnabledConnectedDevices+0x50>)
 8008870:	2201      	movs	r2, #1
 8008872:	705a      	strb	r2, [r3, #1]
  }
  if (SensorProbe.PM_Present) {
 8008874:	4b08      	ldr	r3, [pc, #32]	@ (8008898 <EnabledConnectedDevices+0x4c>)
 8008876:	789b      	ldrb	r3, [r3, #2]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d002      	beq.n	8008882 <EnabledConnectedDevices+0x36>
    Sensor.PM_measurementEnabled = true;
 800887c:	4b07      	ldr	r3, [pc, #28]	@ (800889c <EnabledConnectedDevices+0x50>)
 800887e:	2201      	movs	r2, #1
 8008880:	709a      	strb	r2, [r3, #2]
  }
  if (SensorProbe.MIC_Present) {
 8008882:	4b05      	ldr	r3, [pc, #20]	@ (8008898 <EnabledConnectedDevices+0x4c>)
 8008884:	78db      	ldrb	r3, [r3, #3]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d002      	beq.n	8008890 <EnabledConnectedDevices+0x44>
    Sensor.MIC_measurementEnabled = true;
 800888a:	4b04      	ldr	r3, [pc, #16]	@ (800889c <EnabledConnectedDevices+0x50>)
 800888c:	2201      	movs	r2, #1
 800888e:	70da      	strb	r2, [r3, #3]
  }
}
 8008890:	46c0      	nop			@ (mov r8, r8)
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	46c0      	nop			@ (mov r8, r8)
 8008898:	20000fc8 	.word	0x20000fc8
 800889c:	20000080 	.word	0x20000080

080088a0 <DisableConnectedDevices>:

void DisableConnectedDevices() {
 80088a0:	b580      	push	{r7, lr}
 80088a2:	af00      	add	r7, sp, #0
    Sensor.HT_measurementEnabled = false;
 80088a4:	4b07      	ldr	r3, [pc, #28]	@ (80088c4 <DisableConnectedDevices+0x24>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	701a      	strb	r2, [r3, #0]
    Sensor.VOC_measurementEnabled = false;
 80088aa:	4b06      	ldr	r3, [pc, #24]	@ (80088c4 <DisableConnectedDevices+0x24>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	705a      	strb	r2, [r3, #1]
    Sensor.PM_measurementEnabled = false;
 80088b0:	4b04      	ldr	r3, [pc, #16]	@ (80088c4 <DisableConnectedDevices+0x24>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	709a      	strb	r2, [r3, #2]
    Sensor.MIC_measurementEnabled = false;
 80088b6:	4b03      	ldr	r3, [pc, #12]	@ (80088c4 <DisableConnectedDevices+0x24>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	70da      	strb	r2, [r3, #3]
}
 80088bc:	46c0      	nop			@ (mov r8, r8)
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	46c0      	nop			@ (mov r8, r8)
 80088c4:	20000080 	.word	0x20000080

080088c8 <ResetdBAmax>:
bool samplebufferfilled = false;
static uint32_t MICTimeStamp;

SoundData_t soundData = {0};

void ResetdBAmax() {
 80088c8:	b580      	push	{r7, lr}
 80088ca:	af00      	add	r7, sp, #0
  dBAmax = 0.0;
 80088cc:	4b02      	ldr	r3, [pc, #8]	@ (80088d8 <ResetdBAmax+0x10>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	601a      	str	r2, [r3, #0]
}
 80088d2:	46c0      	nop			@ (mov r8, r8)
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	20001014 	.word	0x20001014

080088dc <setMICTimeStamp>:
void setMICTimeStamp(uint32_t ticks) {
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  MICTimeStamp = HAL_GetTick() + ticks;
 80088e4:	f006 f9de 	bl	800eca4 <HAL_GetTick>
 80088e8:	0002      	movs	r2, r0
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	18d2      	adds	r2, r2, r3
 80088ee:	4b03      	ldr	r3, [pc, #12]	@ (80088fc <setMICTimeStamp+0x20>)
 80088f0:	601a      	str	r2, [r3, #0]
}
 80088f2:	46c0      	nop			@ (mov r8, r8)
 80088f4:	46bd      	mov	sp, r7
 80088f6:	b002      	add	sp, #8
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	46c0      	nop			@ (mov r8, r8)
 80088fc:	2000101c 	.word	0x2000101c

08008900 <ResetDBACalculator>:

void ResetDBACalculator(void) {
 8008900:	b580      	push	{r7, lr}
 8008902:	af00      	add	r7, sp, #0
  counter = 0;
 8008904:	4b05      	ldr	r3, [pc, #20]	@ (800891c <ResetDBACalculator+0x1c>)
 8008906:	2200      	movs	r2, #0
 8008908:	701a      	strb	r2, [r3, #0]
  denominator = 1;
 800890a:	4b05      	ldr	r3, [pc, #20]	@ (8008920 <ResetDBACalculator+0x20>)
 800890c:	2201      	movs	r2, #1
 800890e:	701a      	strb	r2, [r3, #0]
  samplebufferfilled = false;
 8008910:	4b04      	ldr	r3, [pc, #16]	@ (8008924 <ResetDBACalculator+0x24>)
 8008912:	2200      	movs	r2, #0
 8008914:	701a      	strb	r2, [r3, #0]
}
 8008916:	46c0      	nop			@ (mov r8, r8)
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	20001018 	.word	0x20001018
 8008920:	20000084 	.word	0x20000084
 8008924:	20001019 	.word	0x20001019

08008928 <MIC_Print>:

void MIC_Print(void) {
 8008928:	b5b0      	push	{r4, r5, r7, lr}
 800892a:	b08a      	sub	sp, #40	@ 0x28
 800892c:	af06      	add	r7, sp, #24
  dBA = dBValue; // dBValue is the actual sample
 800892e:	4b9d      	ldr	r3, [pc, #628]	@ (8008ba4 <MIC_Print+0x27c>)
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	4b9d      	ldr	r3, [pc, #628]	@ (8008ba8 <MIC_Print+0x280>)
 8008934:	601a      	str	r2, [r3, #0]
  dBASamples[counter] = dBA;
 8008936:	4b9d      	ldr	r3, [pc, #628]	@ (8008bac <MIC_Print+0x284>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	001a      	movs	r2, r3
 800893c:	4b9a      	ldr	r3, [pc, #616]	@ (8008ba8 <MIC_Print+0x280>)
 800893e:	6819      	ldr	r1, [r3, #0]
 8008940:	4b9b      	ldr	r3, [pc, #620]	@ (8008bb0 <MIC_Print+0x288>)
 8008942:	0092      	lsls	r2, r2, #2
 8008944:	50d1      	str	r1, [r2, r3]
  counter++;
 8008946:	4b99      	ldr	r3, [pc, #612]	@ (8008bac <MIC_Print+0x284>)
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	3301      	adds	r3, #1
 800894c:	b2da      	uxtb	r2, r3
 800894e:	4b97      	ldr	r3, [pc, #604]	@ (8008bac <MIC_Print+0x284>)
 8008950:	701a      	strb	r2, [r3, #0]
  if (counter < NUMBER_OF_SAMPLES && !samplebufferfilled) {
 8008952:	4b96      	ldr	r3, [pc, #600]	@ (8008bac <MIC_Print+0x284>)
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	2b09      	cmp	r3, #9
 8008958:	d80b      	bhi.n	8008972 <MIC_Print+0x4a>
 800895a:	4b96      	ldr	r3, [pc, #600]	@ (8008bb4 <MIC_Print+0x28c>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	2201      	movs	r2, #1
 8008960:	4053      	eors	r3, r2
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b00      	cmp	r3, #0
 8008966:	d004      	beq.n	8008972 <MIC_Print+0x4a>
    denominator = counter;
 8008968:	4b90      	ldr	r3, [pc, #576]	@ (8008bac <MIC_Print+0x284>)
 800896a:	781a      	ldrb	r2, [r3, #0]
 800896c:	4b92      	ldr	r3, [pc, #584]	@ (8008bb8 <MIC_Print+0x290>)
 800896e:	701a      	strb	r2, [r3, #0]
 8008970:	e005      	b.n	800897e <MIC_Print+0x56>
  }
  else {
    denominator = NUMBER_OF_SAMPLES;
 8008972:	4b91      	ldr	r3, [pc, #580]	@ (8008bb8 <MIC_Print+0x290>)
 8008974:	220a      	movs	r2, #10
 8008976:	701a      	strb	r2, [r3, #0]
    samplebufferfilled = true;
 8008978:	4b8e      	ldr	r3, [pc, #568]	@ (8008bb4 <MIC_Print+0x28c>)
 800897a:	2201      	movs	r2, #1
 800897c:	701a      	strb	r2, [r3, #0]
  }
//  dBAmax = 0.0;
  dBAsum = 0.0;
 800897e:	4b8f      	ldr	r3, [pc, #572]	@ (8008bbc <MIC_Print+0x294>)
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0; i < denominator; i++){
 8008984:	230f      	movs	r3, #15
 8008986:	18fb      	adds	r3, r7, r3
 8008988:	2200      	movs	r2, #0
 800898a:	701a      	strb	r2, [r3, #0]
 800898c:	e03e      	b.n	8008a0c <MIC_Print+0xe4>
    dBAsum += dBASamples[i];
 800898e:	240f      	movs	r4, #15
 8008990:	193b      	adds	r3, r7, r4
 8008992:	781a      	ldrb	r2, [r3, #0]
 8008994:	4b86      	ldr	r3, [pc, #536]	@ (8008bb0 <MIC_Print+0x288>)
 8008996:	0092      	lsls	r2, r2, #2
 8008998:	58d2      	ldr	r2, [r2, r3]
 800899a:	4b88      	ldr	r3, [pc, #544]	@ (8008bbc <MIC_Print+0x294>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	1c19      	adds	r1, r3, #0
 80089a0:	1c10      	adds	r0, r2, #0
 80089a2:	f7f7 ff8d 	bl	80008c0 <__aeabi_fadd>
 80089a6:	1c03      	adds	r3, r0, #0
 80089a8:	1c1a      	adds	r2, r3, #0
 80089aa:	4b84      	ldr	r3, [pc, #528]	@ (8008bbc <MIC_Print+0x294>)
 80089ac:	601a      	str	r2, [r3, #0]
    if (dBASamples[i] > dBAmax) {
 80089ae:	193b      	adds	r3, r7, r4
 80089b0:	781a      	ldrb	r2, [r3, #0]
 80089b2:	4b7f      	ldr	r3, [pc, #508]	@ (8008bb0 <MIC_Print+0x288>)
 80089b4:	0092      	lsls	r2, r2, #2
 80089b6:	58d2      	ldr	r2, [r2, r3]
 80089b8:	4b81      	ldr	r3, [pc, #516]	@ (8008bc0 <MIC_Print+0x298>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	1c19      	adds	r1, r3, #0
 80089be:	1c10      	adds	r0, r2, #0
 80089c0:	f7f7 fdca 	bl	8000558 <__aeabi_fcmpgt>
 80089c4:	1e03      	subs	r3, r0, #0
 80089c6:	d006      	beq.n	80089d6 <MIC_Print+0xae>
      dBAmax = dBASamples[i];
 80089c8:	193b      	adds	r3, r7, r4
 80089ca:	781a      	ldrb	r2, [r3, #0]
 80089cc:	4b78      	ldr	r3, [pc, #480]	@ (8008bb0 <MIC_Print+0x288>)
 80089ce:	0092      	lsls	r2, r2, #2
 80089d0:	58d2      	ldr	r2, [r2, r3]
 80089d2:	4b7b      	ldr	r3, [pc, #492]	@ (8008bc0 <MIC_Print+0x298>)
 80089d4:	601a      	str	r2, [r3, #0]
  }
  dBAAverage = dBAsum/(float)denominator;
 80089d6:	4b79      	ldr	r3, [pc, #484]	@ (8008bbc <MIC_Print+0x294>)
 80089d8:	681c      	ldr	r4, [r3, #0]
 80089da:	4b77      	ldr	r3, [pc, #476]	@ (8008bb8 <MIC_Print+0x290>)
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	0018      	movs	r0, r3
 80089e0:	f7f8 fe42 	bl	8001668 <__aeabi_ui2f>
 80089e4:	1c03      	adds	r3, r0, #0
 80089e6:	1c19      	adds	r1, r3, #0
 80089e8:	1c20      	adds	r0, r4, #0
 80089ea:	f7f8 f8f3 	bl	8000bd4 <__aeabi_fdiv>
 80089ee:	1c03      	adds	r3, r0, #0
 80089f0:	1c1a      	adds	r2, r3, #0
 80089f2:	4b74      	ldr	r3, [pc, #464]	@ (8008bc4 <MIC_Print+0x29c>)
 80089f4:	601a      	str	r2, [r3, #0]
//  setMic(dBAAverage);
  setMic(dBAmax);
 80089f6:	4b72      	ldr	r3, [pc, #456]	@ (8008bc0 <MIC_Print+0x298>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	1c18      	adds	r0, r3, #0
 80089fc:	f7fa ffb2 	bl	8003964 <setMic>
  for(uint8_t i=0; i < denominator; i++){
 8008a00:	210f      	movs	r1, #15
 8008a02:	187b      	adds	r3, r7, r1
 8008a04:	781a      	ldrb	r2, [r3, #0]
 8008a06:	187b      	adds	r3, r7, r1
 8008a08:	3201      	adds	r2, #1
 8008a0a:	701a      	strb	r2, [r3, #0]
 8008a0c:	4b6a      	ldr	r3, [pc, #424]	@ (8008bb8 <MIC_Print+0x290>)
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	220f      	movs	r2, #15
 8008a12:	18ba      	adds	r2, r7, r2
 8008a14:	7812      	ldrb	r2, [r2, #0]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d3b9      	bcc.n	800898e <MIC_Print+0x66>
  }
  print("SPL_dBA: %.1f, SPL_peak_mPa: %s, dBA peak: %.1f, dBA average: %.1f\r\n", dBA,mPabuffer, dBAmax, dBAAverage);
 8008a1a:	4b63      	ldr	r3, [pc, #396]	@ (8008ba8 <MIC_Print+0x280>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	1c18      	adds	r0, r3, #0
 8008a20:	f7fa fd20 	bl	8003464 <__aeabi_f2d>
 8008a24:	6038      	str	r0, [r7, #0]
 8008a26:	6079      	str	r1, [r7, #4]
 8008a28:	4b65      	ldr	r3, [pc, #404]	@ (8008bc0 <MIC_Print+0x298>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	1c18      	adds	r0, r3, #0
 8008a2e:	f7fa fd19 	bl	8003464 <__aeabi_f2d>
 8008a32:	0004      	movs	r4, r0
 8008a34:	000d      	movs	r5, r1
 8008a36:	4b63      	ldr	r3, [pc, #396]	@ (8008bc4 <MIC_Print+0x29c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	1c18      	adds	r0, r3, #0
 8008a3c:	f7fa fd12 	bl	8003464 <__aeabi_f2d>
 8008a40:	0002      	movs	r2, r0
 8008a42:	000b      	movs	r3, r1
 8008a44:	4960      	ldr	r1, [pc, #384]	@ (8008bc8 <MIC_Print+0x2a0>)
 8008a46:	9204      	str	r2, [sp, #16]
 8008a48:	9305      	str	r3, [sp, #20]
 8008a4a:	9402      	str	r4, [sp, #8]
 8008a4c:	9503      	str	r5, [sp, #12]
 8008a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8008bcc <MIC_Print+0x2a4>)
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	0008      	movs	r0, r1
 8008a58:	f000 fa0c 	bl	8008e74 <print>

  if(counter > NUMBER_OF_SAMPLES){
 8008a5c:	4b53      	ldr	r3, [pc, #332]	@ (8008bac <MIC_Print+0x284>)
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	2b0a      	cmp	r3, #10
 8008a62:	d902      	bls.n	8008a6a <MIC_Print+0x142>
    counter = 0;
 8008a64:	4b51      	ldr	r3, [pc, #324]	@ (8008bac <MIC_Print+0x284>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	701a      	strb	r2, [r3, #0]
  }
  if(dBA >= 90){//white
 8008a6a:	4b4f      	ldr	r3, [pc, #316]	@ (8008ba8 <MIC_Print+0x280>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4958      	ldr	r1, [pc, #352]	@ (8008bd0 <MIC_Print+0x2a8>)
 8008a70:	1c18      	adds	r0, r3, #0
 8008a72:	f7f7 fd7b 	bl	800056c <__aeabi_fcmpge>
 8008a76:	1e03      	subs	r3, r0, #0
 8008a78:	d004      	beq.n	8008a84 <MIC_Print+0x15c>
    SetDBLED(true, true, true);
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	2001      	movs	r0, #1
 8008a80:	f004 fbc4 	bl	800d20c <SetDBLED>
  }
  if(dBA >= 80 && dBA < 90){ //red
 8008a84:	4b48      	ldr	r3, [pc, #288]	@ (8008ba8 <MIC_Print+0x280>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4952      	ldr	r1, [pc, #328]	@ (8008bd4 <MIC_Print+0x2ac>)
 8008a8a:	1c18      	adds	r0, r3, #0
 8008a8c:	f7f7 fd6e 	bl	800056c <__aeabi_fcmpge>
 8008a90:	1e03      	subs	r3, r0, #0
 8008a92:	d00c      	beq.n	8008aae <MIC_Print+0x186>
 8008a94:	4b44      	ldr	r3, [pc, #272]	@ (8008ba8 <MIC_Print+0x280>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	494d      	ldr	r1, [pc, #308]	@ (8008bd0 <MIC_Print+0x2a8>)
 8008a9a:	1c18      	adds	r0, r3, #0
 8008a9c:	f7f7 fd48 	bl	8000530 <__aeabi_fcmplt>
 8008aa0:	1e03      	subs	r3, r0, #0
 8008aa2:	d004      	beq.n	8008aae <MIC_Print+0x186>
    SetDBLED(true, false, false);
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	2001      	movs	r0, #1
 8008aaa:	f004 fbaf 	bl	800d20c <SetDBLED>
  }
  if(dBA >= 70 && dBA < 80){//yellow
 8008aae:	4b3e      	ldr	r3, [pc, #248]	@ (8008ba8 <MIC_Print+0x280>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4949      	ldr	r1, [pc, #292]	@ (8008bd8 <MIC_Print+0x2b0>)
 8008ab4:	1c18      	adds	r0, r3, #0
 8008ab6:	f7f7 fd59 	bl	800056c <__aeabi_fcmpge>
 8008aba:	1e03      	subs	r3, r0, #0
 8008abc:	d00c      	beq.n	8008ad8 <MIC_Print+0x1b0>
 8008abe:	4b3a      	ldr	r3, [pc, #232]	@ (8008ba8 <MIC_Print+0x280>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4944      	ldr	r1, [pc, #272]	@ (8008bd4 <MIC_Print+0x2ac>)
 8008ac4:	1c18      	adds	r0, r3, #0
 8008ac6:	f7f7 fd33 	bl	8000530 <__aeabi_fcmplt>
 8008aca:	1e03      	subs	r3, r0, #0
 8008acc:	d004      	beq.n	8008ad8 <MIC_Print+0x1b0>
    SetDBLED(true, true, false);
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	2001      	movs	r0, #1
 8008ad4:	f004 fb9a 	bl	800d20c <SetDBLED>
  }
  if(dBA >= 60 && dBA < 70){//Green
 8008ad8:	4b33      	ldr	r3, [pc, #204]	@ (8008ba8 <MIC_Print+0x280>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	493f      	ldr	r1, [pc, #252]	@ (8008bdc <MIC_Print+0x2b4>)
 8008ade:	1c18      	adds	r0, r3, #0
 8008ae0:	f7f7 fd44 	bl	800056c <__aeabi_fcmpge>
 8008ae4:	1e03      	subs	r3, r0, #0
 8008ae6:	d00c      	beq.n	8008b02 <MIC_Print+0x1da>
 8008ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8008ba8 <MIC_Print+0x280>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	493a      	ldr	r1, [pc, #232]	@ (8008bd8 <MIC_Print+0x2b0>)
 8008aee:	1c18      	adds	r0, r3, #0
 8008af0:	f7f7 fd1e 	bl	8000530 <__aeabi_fcmplt>
 8008af4:	1e03      	subs	r3, r0, #0
 8008af6:	d004      	beq.n	8008b02 <MIC_Print+0x1da>
    SetDBLED(false, true, false);
 8008af8:	2200      	movs	r2, #0
 8008afa:	2101      	movs	r1, #1
 8008afc:	2000      	movs	r0, #0
 8008afe:	f004 fb85 	bl	800d20c <SetDBLED>
  }
  if(dBA >= 50 && dBA < 60){//light blue
 8008b02:	4b29      	ldr	r3, [pc, #164]	@ (8008ba8 <MIC_Print+0x280>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4936      	ldr	r1, [pc, #216]	@ (8008be0 <MIC_Print+0x2b8>)
 8008b08:	1c18      	adds	r0, r3, #0
 8008b0a:	f7f7 fd2f 	bl	800056c <__aeabi_fcmpge>
 8008b0e:	1e03      	subs	r3, r0, #0
 8008b10:	d00c      	beq.n	8008b2c <MIC_Print+0x204>
 8008b12:	4b25      	ldr	r3, [pc, #148]	@ (8008ba8 <MIC_Print+0x280>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4931      	ldr	r1, [pc, #196]	@ (8008bdc <MIC_Print+0x2b4>)
 8008b18:	1c18      	adds	r0, r3, #0
 8008b1a:	f7f7 fd09 	bl	8000530 <__aeabi_fcmplt>
 8008b1e:	1e03      	subs	r3, r0, #0
 8008b20:	d004      	beq.n	8008b2c <MIC_Print+0x204>
    SetDBLED(false, true, true);
 8008b22:	2201      	movs	r2, #1
 8008b24:	2101      	movs	r1, #1
 8008b26:	2000      	movs	r0, #0
 8008b28:	f004 fb70 	bl	800d20c <SetDBLED>
  }
  if(dBA >= 40 && dBA < 50){//blue
 8008b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8008ba8 <MIC_Print+0x280>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	492c      	ldr	r1, [pc, #176]	@ (8008be4 <MIC_Print+0x2bc>)
 8008b32:	1c18      	adds	r0, r3, #0
 8008b34:	f7f7 fd1a 	bl	800056c <__aeabi_fcmpge>
 8008b38:	1e03      	subs	r3, r0, #0
 8008b3a:	d00c      	beq.n	8008b56 <MIC_Print+0x22e>
 8008b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ba8 <MIC_Print+0x280>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4927      	ldr	r1, [pc, #156]	@ (8008be0 <MIC_Print+0x2b8>)
 8008b42:	1c18      	adds	r0, r3, #0
 8008b44:	f7f7 fcf4 	bl	8000530 <__aeabi_fcmplt>
 8008b48:	1e03      	subs	r3, r0, #0
 8008b4a:	d004      	beq.n	8008b56 <MIC_Print+0x22e>
    SetDBLED(false, false, true);
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	2100      	movs	r1, #0
 8008b50:	2000      	movs	r0, #0
 8008b52:	f004 fb5b 	bl	800d20c <SetDBLED>
  }
  if(dBA >= 35 && dBA < 40){//purple
 8008b56:	4b14      	ldr	r3, [pc, #80]	@ (8008ba8 <MIC_Print+0x280>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4923      	ldr	r1, [pc, #140]	@ (8008be8 <MIC_Print+0x2c0>)
 8008b5c:	1c18      	adds	r0, r3, #0
 8008b5e:	f7f7 fd05 	bl	800056c <__aeabi_fcmpge>
 8008b62:	1e03      	subs	r3, r0, #0
 8008b64:	d00c      	beq.n	8008b80 <MIC_Print+0x258>
 8008b66:	4b10      	ldr	r3, [pc, #64]	@ (8008ba8 <MIC_Print+0x280>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	491e      	ldr	r1, [pc, #120]	@ (8008be4 <MIC_Print+0x2bc>)
 8008b6c:	1c18      	adds	r0, r3, #0
 8008b6e:	f7f7 fcdf 	bl	8000530 <__aeabi_fcmplt>
 8008b72:	1e03      	subs	r3, r0, #0
 8008b74:	d004      	beq.n	8008b80 <MIC_Print+0x258>
    SetDBLED(true, false, true);
 8008b76:	2201      	movs	r2, #1
 8008b78:	2100      	movs	r1, #0
 8008b7a:	2001      	movs	r0, #1
 8008b7c:	f004 fb46 	bl	800d20c <SetDBLED>
  }
  if(dBA < 35){//off
 8008b80:	4b09      	ldr	r3, [pc, #36]	@ (8008ba8 <MIC_Print+0x280>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4918      	ldr	r1, [pc, #96]	@ (8008be8 <MIC_Print+0x2c0>)
 8008b86:	1c18      	adds	r0, r3, #0
 8008b88:	f7f7 fcd2 	bl	8000530 <__aeabi_fcmplt>
 8008b8c:	1e03      	subs	r3, r0, #0
 8008b8e:	d100      	bne.n	8008b92 <MIC_Print+0x26a>
    SetDBLED(false, false, false);
  }
}
 8008b90:	e004      	b.n	8008b9c <MIC_Print+0x274>
    SetDBLED(false, false, false);
 8008b92:	2200      	movs	r2, #0
 8008b94:	2100      	movs	r1, #0
 8008b96:	2000      	movs	r0, #0
 8008b98:	f004 fb38 	bl	800d20c <SetDBLED>
}
 8008b9c:	46c0      	nop			@ (mov r8, r8)
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	b004      	add	sp, #16
 8008ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8008ba4:	20001010 	.word	0x20001010
 8008ba8:	20000fdc 	.word	0x20000fdc
 8008bac:	20001018 	.word	0x20001018
 8008bb0:	20000fe0 	.word	0x20000fe0
 8008bb4:	20001019 	.word	0x20001019
 8008bb8:	20000084 	.word	0x20000084
 8008bbc:	2000100c 	.word	0x2000100c
 8008bc0:	20001014 	.word	0x20001014
 8008bc4:	20001008 	.word	0x20001008
 8008bc8:	08024368 	.word	0x08024368
 8008bcc:	20000fd0 	.word	0x20000fd0
 8008bd0:	42b40000 	.word	0x42b40000
 8008bd4:	42a00000 	.word	0x42a00000
 8008bd8:	428c0000 	.word	0x428c0000
 8008bdc:	42700000 	.word	0x42700000
 8008be0:	42480000 	.word	0x42480000
 8008be4:	42200000 	.word	0x42200000
 8008be8:	420c0000 	.word	0x420c0000

08008bec <MIC_TestMeasurementDone>:
    return true;
  }
  return false;
}

bool MIC_TestMeasurementDone(void) {
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 8008bf2:	4b11      	ldr	r3, [pc, #68]	@ (8008c38 <MIC_TestMeasurementDone+0x4c>)
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	4a10      	ldr	r2, [pc, #64]	@ (8008c3c <MIC_TestMeasurementDone+0x50>)
 8008bfa:	4911      	ldr	r1, [pc, #68]	@ (8008c40 <MIC_TestMeasurementDone+0x54>)
 8008bfc:	2002      	movs	r0, #2
 8008bfe:	f005 fbfb 	bl	800e3f8 <CreateLine>
  if(DataReady) {
 8008c02:	4b0d      	ldr	r3, [pc, #52]	@ (8008c38 <MIC_TestMeasurementDone+0x4c>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d010      	beq.n	8008c2e <MIC_TestMeasurementDone+0x42>
    Check = micEnabled;
 8008c0c:	1dfb      	adds	r3, r7, #7
 8008c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8008c44 <MIC_TestMeasurementDone+0x58>)
 8008c10:	7812      	ldrb	r2, [r2, #0]
 8008c12:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8008c14:	4b0b      	ldr	r3, [pc, #44]	@ (8008c44 <MIC_TestMeasurementDone+0x58>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8008c48 <MIC_TestMeasurementDone+0x5c>)
 8008c1c:	4908      	ldr	r1, [pc, #32]	@ (8008c40 <MIC_TestMeasurementDone+0x54>)
 8008c1e:	2002      	movs	r0, #2
 8008c20:	f005 fbea 	bl	800e3f8 <CreateLine>
    ResetMICIndicator();
 8008c24:	f004 fbd8 	bl	800d3d8 <ResetMICIndicator>
    return Check;
 8008c28:	1dfb      	adds	r3, r7, #7
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	e000      	b.n	8008c30 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	0018      	movs	r0, r3
 8008c32:	46bd      	mov	sp, r7
 8008c34:	b002      	add	sp, #8
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	20001357 	.word	0x20001357
 8008c3c:	080243b0 	.word	0x080243b0
 8008c40:	080243dc 	.word	0x080243dc
 8008c44:	20001358 	.word	0x20001358
 8008c48:	080243e0 	.word	0x080243e0

08008c4c <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8008c52:	4b78      	ldr	r3, [pc, #480]	@ (8008e34 <Mic_Upkeep+0x1e8>)
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	2b03      	cmp	r3, #3
 8008c58:	d100      	bne.n	8008c5c <Mic_Upkeep+0x10>
 8008c5a:	e0b8      	b.n	8008dce <Mic_Upkeep+0x182>
 8008c5c:	dd00      	ble.n	8008c60 <Mic_Upkeep+0x14>
 8008c5e:	e0d3      	b.n	8008e08 <Mic_Upkeep+0x1bc>
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d037      	beq.n	8008cd4 <Mic_Upkeep+0x88>
 8008c64:	dd00      	ble.n	8008c68 <Mic_Upkeep+0x1c>
 8008c66:	e0cf      	b.n	8008e08 <Mic_Upkeep+0x1bc>
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <Mic_Upkeep+0x26>
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d014      	beq.n	8008c9a <Mic_Upkeep+0x4e>
 8008c70:	e0ca      	b.n	8008e08 <Mic_Upkeep+0x1bc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true)) {
 8008c72:	2001      	movs	r0, #1
 8008c74:	f003 fbc8 	bl	800c408 <enableMicrophone>
 8008c78:	0003      	movs	r3, r0
 8008c7a:	001a      	movs	r2, r3
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	4053      	eors	r3, r2
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d005      	beq.n	8008c92 <Mic_Upkeep+0x46>
      errorHandler(__func__, __LINE__, __FILE__);
 8008c86:	4a6c      	ldr	r2, [pc, #432]	@ (8008e38 <Mic_Upkeep+0x1ec>)
 8008c88:	4b6c      	ldr	r3, [pc, #432]	@ (8008e3c <Mic_Upkeep+0x1f0>)
 8008c8a:	2180      	movs	r1, #128	@ 0x80
 8008c8c:	0018      	movs	r0, r3
 8008c8e:	f005 fc6b 	bl	800e568 <errorHandler>
    }
    MicState = MIC_STATE_START_MEASUREMENT;
 8008c92:	4b68      	ldr	r3, [pc, #416]	@ (8008e34 <Mic_Upkeep+0x1e8>)
 8008c94:	2201      	movs	r2, #1
 8008c96:	701a      	strb	r2, [r3, #0]
    break;
 8008c98:	e0c5      	b.n	8008e26 <Mic_Upkeep+0x1da>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8008c9a:	f003 fb91 	bl	800c3c0 <micSettlingComplete>
 8008c9e:	1e03      	subs	r3, r0, #0
 8008ca0:	d105      	bne.n	8008cae <Mic_Upkeep+0x62>
 8008ca2:	4b67      	ldr	r3, [pc, #412]	@ (8008e40 <Mic_Upkeep+0x1f4>)
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d100      	bne.n	8008cae <Mic_Upkeep+0x62>
 8008cac:	e0b6      	b.n	8008e1c <Mic_Upkeep+0x1d0>
      if (!startSPLcalculation())
 8008cae:	f003 fc15 	bl	800c4dc <startSPLcalculation>
 8008cb2:	0003      	movs	r3, r0
 8008cb4:	001a      	movs	r2, r3
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	4053      	eors	r3, r2
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d005      	beq.n	8008ccc <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8008cc0:	4a5d      	ldr	r2, [pc, #372]	@ (8008e38 <Mic_Upkeep+0x1ec>)
 8008cc2:	4b5e      	ldr	r3, [pc, #376]	@ (8008e3c <Mic_Upkeep+0x1f0>)
 8008cc4:	2189      	movs	r1, #137	@ 0x89
 8008cc6:	0018      	movs	r0, r3
 8008cc8:	f005 fc4e 	bl	800e568 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8008ccc:	4b59      	ldr	r3, [pc, #356]	@ (8008e34 <Mic_Upkeep+0x1e8>)
 8008cce:	2202      	movs	r2, #2
 8008cd0:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008cd2:	e0a3      	b.n	8008e1c <Mic_Upkeep+0x1d0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 8008cd4:	4b5b      	ldr	r3, [pc, #364]	@ (8008e44 <Mic_Upkeep+0x1f8>)
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	2101      	movs	r1, #1
 8008cda:	0018      	movs	r0, r3
 8008cdc:	f003 fa52 	bl	800c184 <getSoundData>
 8008ce0:	1e03      	subs	r3, r0, #0
 8008ce2:	d100      	bne.n	8008ce6 <Mic_Upkeep+0x9a>
 8008ce4:	e09c      	b.n	8008e20 <Mic_Upkeep+0x1d4>
      clearMaximumAmplitude();
 8008ce6:	f003 fb4b 	bl	800c380 <clearMaximumAmplitude>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8008cea:	4b56      	ldr	r3, [pc, #344]	@ (8008e44 <Mic_Upkeep+0x1f8>)
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	001a      	movs	r2, r3
 8008cf0:	4b54      	ldr	r3, [pc, #336]	@ (8008e44 <Mic_Upkeep+0x1f8>)
 8008cf2:	785b      	ldrb	r3, [r3, #1]
 8008cf4:	4954      	ldr	r1, [pc, #336]	@ (8008e48 <Mic_Upkeep+0x1fc>)
 8008cf6:	0038      	movs	r0, r7
 8008cf8:	f017 f8e8 	bl	801fecc <siprintf>
      sprintf(mPabuffer, "%u.%02u", soundData.peak_amp_mPa_int, soundData.peak_amp_mPa_fr_2dp);
 8008cfc:	4b51      	ldr	r3, [pc, #324]	@ (8008e44 <Mic_Upkeep+0x1f8>)
 8008cfe:	89db      	ldrh	r3, [r3, #14]
 8008d00:	001a      	movs	r2, r3
 8008d02:	4b50      	ldr	r3, [pc, #320]	@ (8008e44 <Mic_Upkeep+0x1f8>)
 8008d04:	7c1b      	ldrb	r3, [r3, #16]
 8008d06:	4951      	ldr	r1, [pc, #324]	@ (8008e4c <Mic_Upkeep+0x200>)
 8008d08:	4851      	ldr	r0, [pc, #324]	@ (8008e50 <Mic_Upkeep+0x204>)
 8008d0a:	f017 f8df 	bl	801fecc <siprintf>
      dBValue = atof(dBbuffer);
 8008d0e:	003b      	movs	r3, r7
 8008d10:	0018      	movs	r0, r3
 8008d12:	f015 fc8b 	bl	801e62c <atof>
 8008d16:	0002      	movs	r2, r0
 8008d18:	000b      	movs	r3, r1
 8008d1a:	0010      	movs	r0, r2
 8008d1c:	0019      	movs	r1, r3
 8008d1e:	f7fa fbe9 	bl	80034f4 <__aeabi_d2f>
 8008d22:	1c02      	adds	r2, r0, #0
 8008d24:	4b4b      	ldr	r3, [pc, #300]	@ (8008e54 <Mic_Upkeep+0x208>)
 8008d26:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8008d28:	4b4a      	ldr	r3, [pc, #296]	@ (8008e54 <Mic_Upkeep+0x208>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	494a      	ldr	r1, [pc, #296]	@ (8008e58 <Mic_Upkeep+0x20c>)
 8008d2e:	1c18      	adds	r0, r3, #0
 8008d30:	f7f8 f936 	bl	8000fa0 <__aeabi_fmul>
 8008d34:	1c03      	adds	r3, r0, #0
 8008d36:	1c18      	adds	r0, r3, #0
 8008d38:	f7fa fb94 	bl	8003464 <__aeabi_f2d>
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	4b47      	ldr	r3, [pc, #284]	@ (8008e5c <Mic_Upkeep+0x210>)
 8008d40:	f7f8 fcd4 	bl	80016ec <__aeabi_dadd>
 8008d44:	0002      	movs	r2, r0
 8008d46:	000b      	movs	r3, r1
 8008d48:	0010      	movs	r0, r2
 8008d4a:	0019      	movs	r1, r3
 8008d4c:	f7fa fafc 	bl	8003348 <__aeabi_d2iz>
 8008d50:	0003      	movs	r3, r0
 8008d52:	0018      	movs	r0, r3
 8008d54:	f7fa fb34 	bl	80033c0 <__aeabi_i2d>
 8008d58:	2200      	movs	r2, #0
 8008d5a:	4b41      	ldr	r3, [pc, #260]	@ (8008e60 <Mic_Upkeep+0x214>)
 8008d5c:	f7f9 f82a 	bl	8001db4 <__aeabi_ddiv>
 8008d60:	0002      	movs	r2, r0
 8008d62:	000b      	movs	r3, r1
 8008d64:	0010      	movs	r0, r2
 8008d66:	0019      	movs	r1, r3
 8008d68:	f7fa fbc4 	bl	80034f4 <__aeabi_d2f>
 8008d6c:	1c02      	adds	r2, r0, #0
 8008d6e:	4b39      	ldr	r3, [pc, #228]	@ (8008e54 <Mic_Upkeep+0x208>)
 8008d70:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8008d72:	f7ff fdd9 	bl	8008928 <MIC_Print>
      if (!startSPLcalculation()) {
 8008d76:	f003 fbb1 	bl	800c4dc <startSPLcalculation>
 8008d7a:	0003      	movs	r3, r0
 8008d7c:	001a      	movs	r2, r3
 8008d7e:	2301      	movs	r3, #1
 8008d80:	4053      	eors	r3, r2
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d005      	beq.n	8008d94 <Mic_Upkeep+0x148>
        errorHandler(__func__, __LINE__, __FILE__);
 8008d88:	4a2b      	ldr	r2, [pc, #172]	@ (8008e38 <Mic_Upkeep+0x1ec>)
 8008d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8008e3c <Mic_Upkeep+0x1f0>)
 8008d8c:	2199      	movs	r1, #153	@ 0x99
 8008d8e:	0018      	movs	r0, r3
 8008d90:	f005 fbea 	bl	800e568 <errorHandler>
      }
      if (!enableMicrophone(false)) {
 8008d94:	2000      	movs	r0, #0
 8008d96:	f003 fb37 	bl	800c408 <enableMicrophone>
 8008d9a:	0003      	movs	r3, r0
 8008d9c:	001a      	movs	r2, r3
 8008d9e:	2301      	movs	r3, #1
 8008da0:	4053      	eors	r3, r2
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d005      	beq.n	8008db4 <Mic_Upkeep+0x168>
        errorHandler(__func__, __LINE__, __FILE__);
 8008da8:	4a23      	ldr	r2, [pc, #140]	@ (8008e38 <Mic_Upkeep+0x1ec>)
 8008daa:	4b24      	ldr	r3, [pc, #144]	@ (8008e3c <Mic_Upkeep+0x1f0>)
 8008dac:	219c      	movs	r1, #156	@ 0x9c
 8008dae:	0018      	movs	r0, r3
 8008db0:	f005 fbda 	bl	800e568 <errorHandler>
      }
      MICTimeStamp = HAL_GetTick() + 755;  // about every second
 8008db4:	f005 ff76 	bl	800eca4 <HAL_GetTick>
 8008db8:	0003      	movs	r3, r0
 8008dba:	4a2a      	ldr	r2, [pc, #168]	@ (8008e64 <Mic_Upkeep+0x218>)
 8008dbc:	189a      	adds	r2, r3, r2
 8008dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8008e68 <Mic_Upkeep+0x21c>)
 8008dc0:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 8008dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8008e34 <Mic_Upkeep+0x1e8>)
 8008dc4:	2203      	movs	r2, #3
 8008dc6:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8008dc8:	f004 fb06 	bl	800d3d8 <ResetMICIndicator>
    }
    break;
 8008dcc:	e028      	b.n	8008e20 <Mic_Upkeep+0x1d4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MICTimeStamp)){
 8008dce:	4b26      	ldr	r3, [pc, #152]	@ (8008e68 <Mic_Upkeep+0x21c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	0018      	movs	r0, r3
 8008dd4:	f005 faba 	bl	800e34c <TimestampIsReached>
 8008dd8:	1e03      	subs	r3, r0, #0
 8008dda:	d023      	beq.n	8008e24 <Mic_Upkeep+0x1d8>
      if (!enableMicrophone(true)) {
 8008ddc:	2001      	movs	r0, #1
 8008dde:	f003 fb13 	bl	800c408 <enableMicrophone>
 8008de2:	0003      	movs	r3, r0
 8008de4:	001a      	movs	r2, r3
 8008de6:	2301      	movs	r3, #1
 8008de8:	4053      	eors	r3, r2
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d005      	beq.n	8008dfc <Mic_Upkeep+0x1b0>
        errorHandler(__func__, __LINE__, __FILE__);
 8008df0:	4a11      	ldr	r2, [pc, #68]	@ (8008e38 <Mic_Upkeep+0x1ec>)
 8008df2:	4b12      	ldr	r3, [pc, #72]	@ (8008e3c <Mic_Upkeep+0x1f0>)
 8008df4:	21a7      	movs	r1, #167	@ 0xa7
 8008df6:	0018      	movs	r0, r3
 8008df8:	f005 fbb6 	bl	800e568 <errorHandler>
      }
      MicState = MIC_STATE_START_MEASUREMENT;
 8008dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8008e34 <Mic_Upkeep+0x1e8>)
 8008dfe:	2201      	movs	r2, #1
 8008e00:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8008e02:	f004 faaf 	bl	800d364 <SetMICIndicator>
    }
    break;
 8008e06:	e00d      	b.n	8008e24 <Mic_Upkeep+0x1d8>

  default:
    Debug("Unexpected occurrence happened");
 8008e08:	4a18      	ldr	r2, [pc, #96]	@ (8008e6c <Mic_Upkeep+0x220>)
 8008e0a:	4b19      	ldr	r3, [pc, #100]	@ (8008e70 <Mic_Upkeep+0x224>)
 8008e0c:	0019      	movs	r1, r3
 8008e0e:	2003      	movs	r0, #3
 8008e10:	f005 faf2 	bl	800e3f8 <CreateLine>
    MicState = MIC_STATE_INIT;
 8008e14:	4b07      	ldr	r3, [pc, #28]	@ (8008e34 <Mic_Upkeep+0x1e8>)
 8008e16:	2200      	movs	r2, #0
 8008e18:	701a      	strb	r2, [r3, #0]
    break;
 8008e1a:	e004      	b.n	8008e26 <Mic_Upkeep+0x1da>
    break;
 8008e1c:	46c0      	nop			@ (mov r8, r8)
 8008e1e:	e002      	b.n	8008e26 <Mic_Upkeep+0x1da>
    break;
 8008e20:	46c0      	nop			@ (mov r8, r8)
 8008e22:	e000      	b.n	8008e26 <Mic_Upkeep+0x1da>
    break;
 8008e24:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8008e26:	4b03      	ldr	r3, [pc, #12]	@ (8008e34 <Mic_Upkeep+0x1e8>)
 8008e28:	781b      	ldrb	r3, [r3, #0]
}
 8008e2a:	0018      	movs	r0, r3
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	b002      	add	sp, #8
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	46c0      	nop			@ (mov r8, r8)
 8008e34:	20001032 	.word	0x20001032
 8008e38:	080243f8 	.word	0x080243f8
 8008e3c:	08025468 	.word	0x08025468
 8008e40:	20001357 	.word	0x20001357
 8008e44:	20001020 	.word	0x20001020
 8008e48:	08024414 	.word	0x08024414
 8008e4c:	0802441c 	.word	0x0802441c
 8008e50:	20000fd0 	.word	0x20000fd0
 8008e54:	20001010 	.word	0x20001010
 8008e58:	42c80000 	.word	0x42c80000
 8008e5c:	3fe00000 	.word	0x3fe00000
 8008e60:	40590000 	.word	0x40590000
 8008e64:	000002f3 	.word	0x000002f3
 8008e68:	2000101c 	.word	0x2000101c
 8008e6c:	08024424 	.word	0x08024424
 8008e70:	08024444 	.word	0x08024444

08008e74 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8008e74:	b40f      	push	{r0, r1, r2, r3}
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b082      	sub	sp, #8
 8008e7a:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8008e7c:	2314      	movs	r3, #20
 8008e7e:	18fb      	adds	r3, r7, r3
 8008e80:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	2180      	movs	r1, #128	@ 0x80
 8008e88:	0089      	lsls	r1, r1, #2
 8008e8a:	480a      	ldr	r0, [pc, #40]	@ (8008eb4 <print+0x40>)
 8008e8c:	f017 f8b6 	bl	801fffc <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8008e90:	4b08      	ldr	r3, [pc, #32]	@ (8008eb4 <print+0x40>)
 8008e92:	0018      	movs	r0, r3
 8008e94:	f7f7 f96a 	bl	800016c <strlen>
 8008e98:	0003      	movs	r3, r0
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	4b05      	ldr	r3, [pc, #20]	@ (8008eb4 <print+0x40>)
 8008e9e:	0011      	movs	r1, r2
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	f7ff f939 	bl	8008118 <printString>
}
 8008ea6:	46c0      	nop			@ (mov r8, r8)
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	b002      	add	sp, #8
 8008eac:	bc80      	pop	{r7}
 8008eae:	bc08      	pop	{r3}
 8008eb0:	b004      	add	sp, #16
 8008eb2:	4718      	bx	r3
 8008eb4:	20001034 	.word	0x20001034

08008eb8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8008ebe:	1d3b      	adds	r3, r7, #4
 8008ec0:	0018      	movs	r0, r3
 8008ec2:	2314      	movs	r3, #20
 8008ec4:	001a      	movs	r2, r3
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	f017 f944 	bl	8020154 <memset>
  RTC_DateTypeDef sDate = {0};
 8008ecc:	003b      	movs	r3, r7
 8008ece:	2200      	movs	r2, #0
 8008ed0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008ed2:	4b2e      	ldr	r3, [pc, #184]	@ (8008f8c <MX_RTC_Init+0xd4>)
 8008ed4:	4a2e      	ldr	r2, [pc, #184]	@ (8008f90 <MX_RTC_Init+0xd8>)
 8008ed6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008ed8:	4b2c      	ldr	r3, [pc, #176]	@ (8008f8c <MX_RTC_Init+0xd4>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008ede:	4b2b      	ldr	r3, [pc, #172]	@ (8008f8c <MX_RTC_Init+0xd4>)
 8008ee0:	227f      	movs	r2, #127	@ 0x7f
 8008ee2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008ee4:	4b29      	ldr	r3, [pc, #164]	@ (8008f8c <MX_RTC_Init+0xd4>)
 8008ee6:	22ff      	movs	r2, #255	@ 0xff
 8008ee8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8008eea:	4b28      	ldr	r3, [pc, #160]	@ (8008f8c <MX_RTC_Init+0xd4>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008ef0:	4b26      	ldr	r3, [pc, #152]	@ (8008f8c <MX_RTC_Init+0xd4>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008ef6:	4b25      	ldr	r3, [pc, #148]	@ (8008f8c <MX_RTC_Init+0xd4>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008efc:	4b23      	ldr	r3, [pc, #140]	@ (8008f8c <MX_RTC_Init+0xd4>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008f02:	4b22      	ldr	r3, [pc, #136]	@ (8008f8c <MX_RTC_Init+0xd4>)
 8008f04:	0018      	movs	r0, r3
 8008f06:	f00c ff51 	bl	8015dac <HAL_RTC_Init>
 8008f0a:	1e03      	subs	r3, r0, #0
 8008f0c:	d001      	beq.n	8008f12 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8008f0e:	f7ff f9cf 	bl	80082b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8008f12:	1d3b      	adds	r3, r7, #4
 8008f14:	220d      	movs	r2, #13
 8008f16:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8008f18:	1d3b      	adds	r3, r7, #4
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8008f1e:	1d3b      	adds	r3, r7, #4
 8008f20:	2200      	movs	r2, #0
 8008f22:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008f24:	1d3b      	adds	r3, r7, #4
 8008f26:	2200      	movs	r2, #0
 8008f28:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008f2a:	1d3b      	adds	r3, r7, #4
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008f30:	1d39      	adds	r1, r7, #4
 8008f32:	4b16      	ldr	r3, [pc, #88]	@ (8008f8c <MX_RTC_Init+0xd4>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	0018      	movs	r0, r3
 8008f38:	f00c ffd4 	bl	8015ee4 <HAL_RTC_SetTime>
 8008f3c:	1e03      	subs	r3, r0, #0
 8008f3e:	d001      	beq.n	8008f44 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008f40:	f7ff f9b6 	bl	80082b0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008f44:	003b      	movs	r3, r7
 8008f46:	2206      	movs	r2, #6
 8008f48:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8008f4a:	003b      	movs	r3, r7
 8008f4c:	2211      	movs	r2, #17
 8008f4e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008f50:	003b      	movs	r3, r7
 8008f52:	2217      	movs	r2, #23
 8008f54:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008f56:	003b      	movs	r3, r7
 8008f58:	2218      	movs	r2, #24
 8008f5a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008f5c:	0039      	movs	r1, r7
 8008f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8008f8c <MX_RTC_Init+0xd4>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	0018      	movs	r0, r3
 8008f64:	f00d f8c6 	bl	80160f4 <HAL_RTC_SetDate>
 8008f68:	1e03      	subs	r3, r0, #0
 8008f6a:	d001      	beq.n	8008f70 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008f6c:	f7ff f9a0 	bl	80082b0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008f70:	4b06      	ldr	r3, [pc, #24]	@ (8008f8c <MX_RTC_Init+0xd4>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	2100      	movs	r1, #0
 8008f76:	0018      	movs	r0, r3
 8008f78:	f00d fa76 	bl	8016468 <HAL_RTCEx_SetWakeUpTimer_IT>
 8008f7c:	1e03      	subs	r3, r0, #0
 8008f7e:	d001      	beq.n	8008f84 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008f80:	f7ff f996 	bl	80082b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008f84:	46c0      	nop			@ (mov r8, r8)
 8008f86:	46bd      	mov	sp, r7
 8008f88:	b006      	add	sp, #24
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	20001234 	.word	0x20001234
 8008f90:	40002800 	.word	0x40002800

08008f94 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8008fcc <HAL_RTC_MspInit+0x38>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d10e      	bne.n	8008fc4 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd0 <HAL_RTC_MspInit+0x3c>)
 8008fa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008faa:	4b09      	ldr	r3, [pc, #36]	@ (8008fd0 <HAL_RTC_MspInit+0x3c>)
 8008fac:	2180      	movs	r1, #128	@ 0x80
 8008fae:	02c9      	lsls	r1, r1, #11
 8008fb0:	430a      	orrs	r2, r1
 8008fb2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	2002      	movs	r0, #2
 8008fba:	f006 fb17 	bl	800f5ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8008fbe:	2002      	movs	r0, #2
 8008fc0:	f006 fb29 	bl	800f616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008fc4:	46c0      	nop			@ (mov r8, r8)
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	b002      	add	sp, #8
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	40002800 	.word	0x40002800
 8008fd0:	40021000 	.word	0x40021000

08008fd4 <sen5x_Get_sen5x_enable_state>:
static uint16_t s5xnoximax;
uint32_t sen5xReadTimer = 0;
sen5x_states PMsamplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

bool sen5x_Get_sen5x_enable_state() {
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	af00      	add	r7, sp, #0
  return sen5x_Enable;
 8008fd8:	4b02      	ldr	r3, [pc, #8]	@ (8008fe4 <sen5x_Get_sen5x_enable_state+0x10>)
 8008fda:	781b      	ldrb	r3, [r3, #0]
}
 8008fdc:	0018      	movs	r0, r3
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	46c0      	nop			@ (mov r8, r8)
 8008fe4:	2000125b 	.word	0x2000125b

08008fe8 <setsen5xReadTimer>:

void setsen5xReadTimer(uint32_t delayms) {
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 8008ff0:	f005 fe58 	bl	800eca4 <HAL_GetTick>
 8008ff4:	0002      	movs	r2, r0
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	18d2      	adds	r2, r2, r3
 8008ffa:	4b03      	ldr	r3, [pc, #12]	@ (8009008 <setsen5xReadTimer+0x20>)
 8008ffc:	601a      	str	r2, [r3, #0]
}
 8008ffe:	46c0      	nop			@ (mov r8, r8)
 8009000:	46bd      	mov	sp, r7
 8009002:	b002      	add	sp, #8
 8009004:	bd80      	pop	{r7, pc}
 8009006:	46c0      	nop			@ (mov r8, r8)
 8009008:	20001270 	.word	0x20001270

0800900c <setsen5xSamplecounter>:

void setsen5xSamplecounter(uint8_t samples) {
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	0002      	movs	r2, r0
 8009014:	1dfb      	adds	r3, r7, #7
 8009016:	701a      	strb	r2, [r3, #0]
  sen5xSamples = 0;
 8009018:	4b03      	ldr	r3, [pc, #12]	@ (8009028 <setsen5xSamplecounter+0x1c>)
 800901a:	2200      	movs	r2, #0
 800901c:	701a      	strb	r2, [r3, #0]
}
 800901e:	46c0      	nop			@ (mov r8, r8)
 8009020:	46bd      	mov	sp, r7
 8009022:	b002      	add	sp, #8
 8009024:	bd80      	pop	{r7, pc}
 8009026:	46c0      	nop			@ (mov r8, r8)
 8009028:	20001264 	.word	0x20001264

0800902c <sen5x_enable>:

bool sen5x_enable(uint32_t sleepTime) {
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  if (IsPMSensorEnabled()) {
 8009034:	f7ff f9aa 	bl	800838c <IsPMSensorEnabled>
 8009038:	1e03      	subs	r3, r0, #0
 800903a:	d02c      	beq.n	8009096 <sen5x_enable+0x6a>
    Debug("sen5x measurement is enabled");
 800903c:	4a1d      	ldr	r2, [pc, #116]	@ (80090b4 <sen5x_enable+0x88>)
 800903e:	4b1e      	ldr	r3, [pc, #120]	@ (80090b8 <sen5x_enable+0x8c>)
 8009040:	0019      	movs	r1, r3
 8009042:	2003      	movs	r0, #3
 8009044:	f005 f9d8 	bl	800e3f8 <CreateLine>
    sen5x_Enable = !sen5x_Enable;
 8009048:	4b1c      	ldr	r3, [pc, #112]	@ (80090bc <sen5x_enable+0x90>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	1e5a      	subs	r2, r3, #1
 800904e:	4193      	sbcs	r3, r2
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2201      	movs	r2, #1
 8009054:	4053      	eors	r3, r2
 8009056:	b2db      	uxtb	r3, r3
 8009058:	1c1a      	adds	r2, r3, #0
 800905a:	2301      	movs	r3, #1
 800905c:	4013      	ands	r3, r2
 800905e:	b2da      	uxtb	r2, r3
 8009060:	4b16      	ldr	r3, [pc, #88]	@ (80090bc <sen5x_enable+0x90>)
 8009062:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 8009064:	4b15      	ldr	r3, [pc, #84]	@ (80090bc <sen5x_enable+0x90>)
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <sen5x_enable+0x48>
      setsen5xReadTimer(0);
 800906c:	2000      	movs	r0, #0
 800906e:	f7ff ffbb 	bl	8008fe8 <setsen5xReadTimer>
 8009072:	e016      	b.n	80090a2 <sen5x_enable+0x76>
    }
    else {
      Info("This cycle the sen5x is disabled");
 8009074:	4a12      	ldr	r2, [pc, #72]	@ (80090c0 <sen5x_enable+0x94>)
 8009076:	4b13      	ldr	r3, [pc, #76]	@ (80090c4 <sen5x_enable+0x98>)
 8009078:	0019      	movs	r1, r3
 800907a:	2002      	movs	r0, #2
 800907c:	f005 f9bc 	bl	800e3f8 <CreateLine>
      //The ticker starts after 880*100, is about one and a half minute effective this turn the sen5x device will not start
      setsen5xReadTimer(HAL_GetTick() + (sleepTime*100));
 8009080:	f005 fe10 	bl	800eca4 <HAL_GetTick>
 8009084:	0002      	movs	r2, r0
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2164      	movs	r1, #100	@ 0x64
 800908a:	434b      	muls	r3, r1
 800908c:	18d3      	adds	r3, r2, r3
 800908e:	0018      	movs	r0, r3
 8009090:	f7ff ffaa 	bl	8008fe8 <setsen5xReadTimer>
 8009094:	e005      	b.n	80090a2 <sen5x_enable+0x76>
    }
  }
  else {
    Info("sen5x measurement is disabled");
 8009096:	4a0c      	ldr	r2, [pc, #48]	@ (80090c8 <sen5x_enable+0x9c>)
 8009098:	4b0a      	ldr	r3, [pc, #40]	@ (80090c4 <sen5x_enable+0x98>)
 800909a:	0019      	movs	r1, r3
 800909c:	2002      	movs	r0, #2
 800909e:	f005 f9ab 	bl	800e3f8 <CreateLine>
  }
  PMsamplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 80090a2:	4b0a      	ldr	r3, [pc, #40]	@ (80090cc <sen5x_enable+0xa0>)
 80090a4:	2201      	movs	r2, #1
 80090a6:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 80090a8:	4b04      	ldr	r3, [pc, #16]	@ (80090bc <sen5x_enable+0x90>)
 80090aa:	781b      	ldrb	r3, [r3, #0]
}
 80090ac:	0018      	movs	r0, r3
 80090ae:	46bd      	mov	sp, r7
 80090b0:	b002      	add	sp, #8
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	08024448 	.word	0x08024448
 80090b8:	08024468 	.word	0x08024468
 80090bc:	2000125b 	.word	0x2000125b
 80090c0:	0802446c 	.word	0x0802446c
 80090c4:	08024490 	.word	0x08024490
 80090c8:	08024494 	.word	0x08024494
 80090cc:	20000085 	.word	0x20000085

080090d0 <sen5x_Power_On>:

void sen5x_Power_On(void) {
 80090d0:	b580      	push	{r7, lr}
 80090d2:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_On");
 80090d4:	4a0a      	ldr	r2, [pc, #40]	@ (8009100 <sen5x_Power_On+0x30>)
 80090d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009104 <sen5x_Power_On+0x34>)
 80090d8:	0019      	movs	r1, r3
 80090da:	2003      	movs	r0, #3
 80090dc:	f005 f98c 	bl	800e3f8 <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 80090e0:	2380      	movs	r3, #128	@ 0x80
 80090e2:	015b      	lsls	r3, r3, #5
 80090e4:	4808      	ldr	r0, [pc, #32]	@ (8009108 <sen5x_Power_On+0x38>)
 80090e6:	2201      	movs	r2, #1
 80090e8:	0019      	movs	r1, r3
 80090ea:	f007 f86c 	bl	80101c6 <HAL_GPIO_WritePin>
  sen5x_On = true;
 80090ee:	4b07      	ldr	r3, [pc, #28]	@ (800910c <sen5x_Power_On+0x3c>)
 80090f0:	2201      	movs	r2, #1
 80090f2:	701a      	strb	r2, [r3, #0]
  HAL_Delay(55);
 80090f4:	2037      	movs	r0, #55	@ 0x37
 80090f6:	f005 fddf 	bl	800ecb8 <HAL_Delay>
}
 80090fa:	46c0      	nop			@ (mov r8, r8)
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	080244b4 	.word	0x080244b4
 8009104:	08024468 	.word	0x08024468
 8009108:	50000800 	.word	0x50000800
 800910c:	20001259 	.word	0x20001259

08009110 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
  if (VOCNOx) {
 8009114:	4b0e      	ldr	r3, [pc, #56]	@ (8009150 <sen5x_Power_Off+0x40>)
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d006      	beq.n	800912a <sen5x_Power_Off+0x1a>
    Debug("VOC and NOx measurement enabled, no power off");
 800911c:	4a0d      	ldr	r2, [pc, #52]	@ (8009154 <sen5x_Power_Off+0x44>)
 800911e:	4b0e      	ldr	r3, [pc, #56]	@ (8009158 <sen5x_Power_Off+0x48>)
 8009120:	0019      	movs	r1, r3
 8009122:	2003      	movs	r0, #3
 8009124:	f005 f968 	bl	800e3f8 <CreateLine>
  else {
    Debug("executing sen5x_Power_Off");
    HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
    sen5x_On = false;
  }
}
 8009128:	e00f      	b.n	800914a <sen5x_Power_Off+0x3a>
    Debug("executing sen5x_Power_Off");
 800912a:	4a0c      	ldr	r2, [pc, #48]	@ (800915c <sen5x_Power_Off+0x4c>)
 800912c:	4b0a      	ldr	r3, [pc, #40]	@ (8009158 <sen5x_Power_Off+0x48>)
 800912e:	0019      	movs	r1, r3
 8009130:	2003      	movs	r0, #3
 8009132:	f005 f961 	bl	800e3f8 <CreateLine>
    HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8009136:	2380      	movs	r3, #128	@ 0x80
 8009138:	015b      	lsls	r3, r3, #5
 800913a:	4809      	ldr	r0, [pc, #36]	@ (8009160 <sen5x_Power_Off+0x50>)
 800913c:	2200      	movs	r2, #0
 800913e:	0019      	movs	r1, r3
 8009140:	f007 f841 	bl	80101c6 <HAL_GPIO_WritePin>
    sen5x_On = false;
 8009144:	4b07      	ldr	r3, [pc, #28]	@ (8009164 <sen5x_Power_Off+0x54>)
 8009146:	2200      	movs	r2, #0
 8009148:	701a      	strb	r2, [r3, #0]
}
 800914a:	46c0      	nop			@ (mov r8, r8)
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	2000125a 	.word	0x2000125a
 8009154:	080244d0 	.word	0x080244d0
 8009158:	08024468 	.word	0x08024468
 800915c:	08024500 	.word	0x08024500
 8009160:	50000800 	.word	0x50000800
 8009164:	20001259 	.word	0x20001259

08009168 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 8009168:	b580      	push	{r7, lr}
 800916a:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 800916c:	4b02      	ldr	r3, [pc, #8]	@ (8009178 <reset_fanCleaningDone+0x10>)
 800916e:	2200      	movs	r2, #0
 8009170:	701a      	strb	r2, [r3, #0]
}
 8009172:	46c0      	nop			@ (mov r8, r8)
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	20001258 	.word	0x20001258

0800917c <probe_sen5x>:

int16_t probe_sen5x(void) {
 800917c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800917e:	b093      	sub	sp, #76	@ 0x4c
 8009180:	af04      	add	r7, sp, #16
//  Debug("test for sen5x_device");
  int16_t error = 0;
 8009182:	2436      	movs	r4, #54	@ 0x36
 8009184:	193b      	adds	r3, r7, r4
 8009186:	2200      	movs	r2, #0
 8009188:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 800918a:	2335      	movs	r3, #53	@ 0x35
 800918c:	18fb      	adds	r3, r7, r3
 800918e:	2220      	movs	r2, #32
 8009190:	701a      	strb	r2, [r3, #0]
  uint8_t product_name_size = 32;
 8009192:	2334      	movs	r3, #52	@ 0x34
 8009194:	18fb      	adds	r3, r7, r3
 8009196:	2220      	movs	r2, #32
 8009198:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 800919a:	f7ff ff99 	bl	80090d0 <sen5x_Power_On>
  error = sen5x_device_reset();
 800919e:	0025      	movs	r5, r4
 80091a0:	193c      	adds	r4, r7, r4
 80091a2:	f001 f903 	bl	800a3ac <sen5x_device_reset>
 80091a6:	0003      	movs	r3, r0
 80091a8:	8023      	strh	r3, [r4, #0]
  if (error) {
 80091aa:	002c      	movs	r4, r5
 80091ac:	193b      	adds	r3, r7, r4
 80091ae:	2200      	movs	r2, #0
 80091b0:	5e9b      	ldrsh	r3, [r3, r2]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00b      	beq.n	80091ce <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 80091b6:	193b      	adds	r3, r7, r4
 80091b8:	2200      	movs	r2, #0
 80091ba:	5e9b      	ldrsh	r3, [r3, r2]
 80091bc:	4a6c      	ldr	r2, [pc, #432]	@ (8009370 <probe_sen5x+0x1f4>)
 80091be:	496d      	ldr	r1, [pc, #436]	@ (8009374 <probe_sen5x+0x1f8>)
 80091c0:	2001      	movs	r0, #1
 80091c2:	f005 f919 	bl	800e3f8 <CreateLine>
      return error;
 80091c6:	193b      	adds	r3, r7, r4
 80091c8:	2200      	movs	r2, #0
 80091ca:	5e9b      	ldrsh	r3, [r3, r2]
 80091cc:	e0cc      	b.n	8009368 <probe_sen5x+0x1ec>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 80091ce:	2536      	movs	r5, #54	@ 0x36
 80091d0:	197c      	adds	r4, r7, r5
 80091d2:	2335      	movs	r3, #53	@ 0x35
 80091d4:	18fb      	adds	r3, r7, r3
 80091d6:	781a      	ldrb	r2, [r3, #0]
 80091d8:	230c      	movs	r3, #12
 80091da:	18fb      	adds	r3, r7, r3
 80091dc:	0011      	movs	r1, r2
 80091de:	0018      	movs	r0, r3
 80091e0:	f000 ffd0 	bl	800a184 <sen5x_get_serial_number>
 80091e4:	0003      	movs	r3, r0
 80091e6:	8023      	strh	r3, [r4, #0]
  if (error) {
 80091e8:	197b      	adds	r3, r7, r5
 80091ea:	2200      	movs	r2, #0
 80091ec:	5e9b      	ldrsh	r3, [r3, r2]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00b      	beq.n	800920a <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 80091f2:	197b      	adds	r3, r7, r5
 80091f4:	2200      	movs	r2, #0
 80091f6:	5e9a      	ldrsh	r2, [r3, r2]
 80091f8:	4b5f      	ldr	r3, [pc, #380]	@ (8009378 <probe_sen5x+0x1fc>)
 80091fa:	0011      	movs	r1, r2
 80091fc:	0018      	movs	r0, r3
 80091fe:	f016 fdf5 	bl	801fdec <iprintf>
      return error;
 8009202:	197b      	adds	r3, r7, r5
 8009204:	2200      	movs	r2, #0
 8009206:	5e9b      	ldrsh	r3, [r3, r2]
 8009208:	e0ae      	b.n	8009368 <probe_sen5x+0x1ec>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 800920a:	230c      	movs	r3, #12
 800920c:	18fa      	adds	r2, r7, r3
 800920e:	4b5b      	ldr	r3, [pc, #364]	@ (800937c <probe_sen5x+0x200>)
 8009210:	0011      	movs	r1, r2
 8009212:	0018      	movs	r0, r3
 8009214:	f016 fdea 	bl	801fdec <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8009218:	2536      	movs	r5, #54	@ 0x36
 800921a:	197c      	adds	r4, r7, r5
 800921c:	2334      	movs	r3, #52	@ 0x34
 800921e:	18fb      	adds	r3, r7, r3
 8009220:	781a      	ldrb	r2, [r3, #0]
 8009222:	4b57      	ldr	r3, [pc, #348]	@ (8009380 <probe_sen5x+0x204>)
 8009224:	0011      	movs	r1, r2
 8009226:	0018      	movs	r0, r3
 8009228:	f000 ff56 	bl	800a0d8 <sen5x_get_product_name>
 800922c:	0003      	movs	r3, r0
 800922e:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009230:	197b      	adds	r3, r7, r5
 8009232:	2200      	movs	r2, #0
 8009234:	5e9b      	ldrsh	r3, [r3, r2]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00b      	beq.n	8009252 <probe_sen5x+0xd6>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 800923a:	197b      	adds	r3, r7, r5
 800923c:	2200      	movs	r2, #0
 800923e:	5e9a      	ldrsh	r2, [r3, r2]
 8009240:	4b50      	ldr	r3, [pc, #320]	@ (8009384 <probe_sen5x+0x208>)
 8009242:	0011      	movs	r1, r2
 8009244:	0018      	movs	r0, r3
 8009246:	f016 fdd1 	bl	801fdec <iprintf>
      return error;
 800924a:	197b      	adds	r3, r7, r5
 800924c:	2200      	movs	r2, #0
 800924e:	5e9b      	ldrsh	r3, [r3, r2]
 8009250:	e08a      	b.n	8009368 <probe_sen5x+0x1ec>
  } else {
      printf("Product name: %s\r\n", product_name);
 8009252:	4a4b      	ldr	r2, [pc, #300]	@ (8009380 <probe_sen5x+0x204>)
 8009254:	4b4c      	ldr	r3, [pc, #304]	@ (8009388 <probe_sen5x+0x20c>)
 8009256:	0011      	movs	r1, r2
 8009258:	0018      	movs	r0, r3
 800925a:	f016 fdc7 	bl	801fdec <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 800925e:	2636      	movs	r6, #54	@ 0x36
 8009260:	19bc      	adds	r4, r7, r6
 8009262:	2308      	movs	r3, #8
 8009264:	18fd      	adds	r5, r7, r3
 8009266:	2309      	movs	r3, #9
 8009268:	18fa      	adds	r2, r7, r3
 800926a:	230a      	movs	r3, #10
 800926c:	18f9      	adds	r1, r7, r3
 800926e:	230b      	movs	r3, #11
 8009270:	18f8      	adds	r0, r7, r3
 8009272:	1d7b      	adds	r3, r7, #5
 8009274:	9302      	str	r3, [sp, #8]
 8009276:	1dbb      	adds	r3, r7, #6
 8009278:	9301      	str	r3, [sp, #4]
 800927a:	1dfb      	adds	r3, r7, #7
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	002b      	movs	r3, r5
 8009280:	f000 ffd6 	bl	800a230 <sen5x_get_version>
 8009284:	0003      	movs	r3, r0
 8009286:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 8009288:	19bb      	adds	r3, r7, r6
 800928a:	2200      	movs	r2, #0
 800928c:	5e9b      	ldrsh	r3, [r3, r2]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00b      	beq.n	80092aa <probe_sen5x+0x12e>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 8009292:	19bb      	adds	r3, r7, r6
 8009294:	2200      	movs	r2, #0
 8009296:	5e9a      	ldrsh	r2, [r3, r2]
 8009298:	4b3c      	ldr	r3, [pc, #240]	@ (800938c <probe_sen5x+0x210>)
 800929a:	0011      	movs	r1, r2
 800929c:	0018      	movs	r0, r3
 800929e:	f016 fda5 	bl	801fdec <iprintf>
      return error;
 80092a2:	19bb      	adds	r3, r7, r6
 80092a4:	2200      	movs	r2, #0
 80092a6:	5e9b      	ldrsh	r3, [r3, r2]
 80092a8:	e05e      	b.n	8009368 <probe_sen5x+0x1ec>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 80092aa:	230b      	movs	r3, #11
 80092ac:	18fb      	adds	r3, r7, r3
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	0019      	movs	r1, r3
 80092b2:	230a      	movs	r3, #10
 80092b4:	18fb      	adds	r3, r7, r3
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	001a      	movs	r2, r3
 80092ba:	2308      	movs	r3, #8
 80092bc:	18fb      	adds	r3, r7, r3
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	001c      	movs	r4, r3
 80092c2:	1dfb      	adds	r3, r7, #7
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	4832      	ldr	r0, [pc, #200]	@ (8009390 <probe_sen5x+0x214>)
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	0023      	movs	r3, r4
 80092cc:	f016 fd8e 	bl	801fdec <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 80092d0:	2300      	movs	r3, #0
 80092d2:	633b      	str	r3, [r7, #48]	@ 0x30
  int16_t default_slope = 0;
 80092d4:	262e      	movs	r6, #46	@ 0x2e
 80092d6:	19bb      	adds	r3, r7, r6
 80092d8:	2200      	movs	r2, #0
 80092da:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 80092dc:	232c      	movs	r3, #44	@ 0x2c
 80092de:	18fb      	adds	r3, r7, r3
 80092e0:	2200      	movs	r2, #0
 80092e2:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 80092e4:	492b      	ldr	r1, [pc, #172]	@ (8009394 <probe_sen5x+0x218>)
 80092e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80092e8:	f7f7 fe5a 	bl	8000fa0 <__aeabi_fmul>
 80092ec:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 80092ee:	1c18      	adds	r0, r3, #0
 80092f0:	f7f8 f94e 	bl	8001590 <__aeabi_f2iz>
 80092f4:	0003      	movs	r3, r0
 80092f6:	b218      	sxth	r0, r3
 80092f8:	2536      	movs	r5, #54	@ 0x36
 80092fa:	197c      	adds	r4, r7, r5
 80092fc:	232c      	movs	r3, #44	@ 0x2c
 80092fe:	18fb      	adds	r3, r7, r3
 8009300:	881a      	ldrh	r2, [r3, #0]
 8009302:	19bb      	adds	r3, r7, r6
 8009304:	2100      	movs	r1, #0
 8009306:	5e5b      	ldrsh	r3, [r3, r1]
 8009308:	0019      	movs	r1, r3
 800930a:	f000 fe81 	bl	800a010 <sen5x_set_temperature_offset_parameters>
 800930e:	0003      	movs	r3, r0
 8009310:	8023      	strh	r3, [r4, #0]
  if (error) {
 8009312:	197b      	adds	r3, r7, r5
 8009314:	2200      	movs	r2, #0
 8009316:	5e9b      	ldrsh	r3, [r3, r2]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00b      	beq.n	8009334 <probe_sen5x+0x1b8>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800931c:	197b      	adds	r3, r7, r5
 800931e:	2200      	movs	r2, #0
 8009320:	5e9b      	ldrsh	r3, [r3, r2]
 8009322:	4a1d      	ldr	r2, [pc, #116]	@ (8009398 <probe_sen5x+0x21c>)
 8009324:	4913      	ldr	r1, [pc, #76]	@ (8009374 <probe_sen5x+0x1f8>)
 8009326:	2001      	movs	r0, #1
 8009328:	f005 f866 	bl	800e3f8 <CreateLine>
      return error;
 800932c:	197b      	adds	r3, r7, r5
 800932e:	2200      	movs	r2, #0
 8009330:	5e9b      	ldrsh	r3, [r3, r2]
 8009332:	e019      	b.n	8009368 <probe_sen5x+0x1ec>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8009334:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009336:	f7fa f895 	bl	8003464 <__aeabi_f2d>
 800933a:	0002      	movs	r2, r0
 800933c:	000b      	movs	r3, r1
 800933e:	4817      	ldr	r0, [pc, #92]	@ (800939c <probe_sen5x+0x220>)
 8009340:	4917      	ldr	r1, [pc, #92]	@ (80093a0 <probe_sen5x+0x224>)
 8009342:	9200      	str	r2, [sp, #0]
 8009344:	9301      	str	r3, [sp, #4]
 8009346:	0002      	movs	r2, r0
 8009348:	2002      	movs	r0, #2
 800934a:	f005 f855 	bl	800e3f8 <CreateLine>
  }
  sen5x_Power_Off();
 800934e:	f7ff fedf 	bl	8009110 <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 25000; // after 25 second first measurement
 8009352:	f005 fca7 	bl	800eca4 <HAL_GetTick>
 8009356:	0003      	movs	r3, r0
 8009358:	4a12      	ldr	r2, [pc, #72]	@ (80093a4 <probe_sen5x+0x228>)
 800935a:	189a      	adds	r2, r3, r2
 800935c:	4b12      	ldr	r3, [pc, #72]	@ (80093a8 <probe_sen5x+0x22c>)
 800935e:	601a      	str	r2, [r3, #0]
  return error;
 8009360:	2336      	movs	r3, #54	@ 0x36
 8009362:	18fb      	adds	r3, r7, r3
 8009364:	2200      	movs	r2, #0
 8009366:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009368:	0018      	movs	r0, r3
 800936a:	46bd      	mov	sp, r7
 800936c:	b00f      	add	sp, #60	@ 0x3c
 800936e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009370:	0802451c 	.word	0x0802451c
 8009374:	08024548 	.word	0x08024548
 8009378:	0802454c 	.word	0x0802454c
 800937c:	0802457c 	.word	0x0802457c
 8009380:	2000125c 	.word	0x2000125c
 8009384:	08024590 	.word	0x08024590
 8009388:	080245c0 	.word	0x080245c0
 800938c:	080245d4 	.word	0x080245d4
 8009390:	08024600 	.word	0x08024600
 8009394:	43480000 	.word	0x43480000
 8009398:	08024624 	.word	0x08024624
 800939c:	08024664 	.word	0x08024664
 80093a0:	08024490 	.word	0x08024490
 80093a4:	000061a8 	.word	0x000061a8
 80093a8:	20001270 	.word	0x20001270

080093ac <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 80093ac:	b590      	push	{r4, r7, lr}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 80093b2:	1dbb      	adds	r3, r7, #6
 80093b4:	2200      	movs	r2, #0
 80093b6:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  if (VOCNOx) {
 80093b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009428 <sen5x_lightup_measurement+0x7c>)
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00b      	beq.n	80093d8 <sen5x_lightup_measurement+0x2c>
    Info("Continous measurement without PM is active");
 80093c0:	4a1a      	ldr	r2, [pc, #104]	@ (800942c <sen5x_lightup_measurement+0x80>)
 80093c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009430 <sen5x_lightup_measurement+0x84>)
 80093c4:	0019      	movs	r1, r3
 80093c6:	2002      	movs	r0, #2
 80093c8:	f005 f816 	bl	800e3f8 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 80093cc:	1dbc      	adds	r4, r7, #6
 80093ce:	f000 fcab 	bl	8009d28 <sen5x_start_measurement_without_pm>
 80093d2:	0003      	movs	r3, r0
 80093d4:	8023      	strh	r3, [r4, #0]
 80093d6:	e00a      	b.n	80093ee <sen5x_lightup_measurement+0x42>
  }
  else {
    Info("Measurement with PM is active");
 80093d8:	4a16      	ldr	r2, [pc, #88]	@ (8009434 <sen5x_lightup_measurement+0x88>)
 80093da:	4b15      	ldr	r3, [pc, #84]	@ (8009430 <sen5x_lightup_measurement+0x84>)
 80093dc:	0019      	movs	r1, r3
 80093de:	2002      	movs	r0, #2
 80093e0:	f005 f80a 	bl	800e3f8 <CreateLine>
    error = sen5x_start_measurement(); // start full measurement mode
 80093e4:	1dbc      	adds	r4, r7, #6
 80093e6:	f000 fc71 	bl	8009ccc <sen5x_start_measurement>
 80093ea:	0003      	movs	r3, r0
 80093ec:	8023      	strh	r3, [r4, #0]
  }
  if (error) {
 80093ee:	1dbb      	adds	r3, r7, #6
 80093f0:	2200      	movs	r2, #0
 80093f2:	5e9b      	ldrsh	r3, [r3, r2]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d008      	beq.n	800940a <sen5x_lightup_measurement+0x5e>
    Error("Error executing sen5x_lightup_measurement(): %i", error);
 80093f8:	1dbb      	adds	r3, r7, #6
 80093fa:	2200      	movs	r2, #0
 80093fc:	5e9b      	ldrsh	r3, [r3, r2]
 80093fe:	4a0e      	ldr	r2, [pc, #56]	@ (8009438 <sen5x_lightup_measurement+0x8c>)
 8009400:	490e      	ldr	r1, [pc, #56]	@ (800943c <sen5x_lightup_measurement+0x90>)
 8009402:	2001      	movs	r0, #1
 8009404:	f004 fff8 	bl	800e3f8 <CreateLine>
 8009408:	e007      	b.n	800941a <sen5x_lightup_measurement+0x6e>
  }
  else {
    showTime();
 800940a:	f7fd f843 	bl	8006494 <showTime>
    Info("sen5x_start_measurement executed");
 800940e:	4a0c      	ldr	r2, [pc, #48]	@ (8009440 <sen5x_lightup_measurement+0x94>)
 8009410:	4b07      	ldr	r3, [pc, #28]	@ (8009430 <sen5x_lightup_measurement+0x84>)
 8009412:	0019      	movs	r1, r3
 8009414:	2002      	movs	r0, #2
 8009416:	f004 ffef 	bl	800e3f8 <CreateLine>
  }
  return error;
 800941a:	1dbb      	adds	r3, r7, #6
 800941c:	2200      	movs	r2, #0
 800941e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8009420:	0018      	movs	r0, r3
 8009422:	46bd      	mov	sp, r7
 8009424:	b003      	add	sp, #12
 8009426:	bd90      	pop	{r4, r7, pc}
 8009428:	2000125a 	.word	0x2000125a
 800942c:	0802469c 	.word	0x0802469c
 8009430:	08024490 	.word	0x08024490
 8009434:	080246c8 	.word	0x080246c8
 8009438:	080246e8 	.word	0x080246e8
 800943c:	08024548 	.word	0x08024548
 8009440:	08024718 	.word	0x08024718

08009444 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 8009444:	b590      	push	{r4, r7, lr}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
// Stop Measurement
//  Debug("entering sen5x_extinguish_measurement");
  int16_t error = 0;
 800944a:	1dbb      	adds	r3, r7, #6
 800944c:	2200      	movs	r2, #0
 800944e:	801a      	strh	r2, [r3, #0]
  if (VOCNOx) {
 8009450:	4b21      	ldr	r3, [pc, #132]	@ (80094d8 <sen5x_extinguish_measurement+0x94>)
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d01e      	beq.n	8009496 <sen5x_extinguish_measurement+0x52>
    Info("Continious VOC & NOx is active, sensor not powered off");
 8009458:	4a20      	ldr	r2, [pc, #128]	@ (80094dc <sen5x_extinguish_measurement+0x98>)
 800945a:	4b21      	ldr	r3, [pc, #132]	@ (80094e0 <sen5x_extinguish_measurement+0x9c>)
 800945c:	0019      	movs	r1, r3
 800945e:	2002      	movs	r0, #2
 8009460:	f004 ffca 	bl	800e3f8 <CreateLine>
    Info("PM measurement is disabled");
 8009464:	4a1f      	ldr	r2, [pc, #124]	@ (80094e4 <sen5x_extinguish_measurement+0xa0>)
 8009466:	4b1e      	ldr	r3, [pc, #120]	@ (80094e0 <sen5x_extinguish_measurement+0x9c>)
 8009468:	0019      	movs	r1, r3
 800946a:	2002      	movs	r0, #2
 800946c:	f004 ffc4 	bl	800e3f8 <CreateLine>
    error =sen5x_start_measurement_without_pm();
 8009470:	1dbc      	adds	r4, r7, #6
 8009472:	f000 fc59 	bl	8009d28 <sen5x_start_measurement_without_pm>
 8009476:	0003      	movs	r3, r0
 8009478:	8023      	strh	r3, [r4, #0]
    if (error) {
 800947a:	1dbb      	adds	r3, r7, #6
 800947c:	2200      	movs	r2, #0
 800947e:	5e9b      	ldrsh	r3, [r3, r2]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d022      	beq.n	80094ca <sen5x_extinguish_measurement+0x86>
      Error("Error executing switching to measurement without PM code: %i", error);
 8009484:	1dbb      	adds	r3, r7, #6
 8009486:	2200      	movs	r2, #0
 8009488:	5e9b      	ldrsh	r3, [r3, r2]
 800948a:	4a17      	ldr	r2, [pc, #92]	@ (80094e8 <sen5x_extinguish_measurement+0xa4>)
 800948c:	4917      	ldr	r1, [pc, #92]	@ (80094ec <sen5x_extinguish_measurement+0xa8>)
 800948e:	2001      	movs	r0, #1
 8009490:	f004 ffb2 	bl	800e3f8 <CreateLine>
 8009494:	e019      	b.n	80094ca <sen5x_extinguish_measurement+0x86>
    }
  }
  else {
    error = sen5x_stop_measurement();
 8009496:	1dbc      	adds	r4, r7, #6
 8009498:	f000 fc74 	bl	8009d84 <sen5x_stop_measurement>
 800949c:	0003      	movs	r3, r0
 800949e:	8023      	strh	r3, [r4, #0]
    showTime();
 80094a0:	f7fc fff8 	bl	8006494 <showTime>
    Info("sen5x_stop_measurement executed");
 80094a4:	4a12      	ldr	r2, [pc, #72]	@ (80094f0 <sen5x_extinguish_measurement+0xac>)
 80094a6:	4b0e      	ldr	r3, [pc, #56]	@ (80094e0 <sen5x_extinguish_measurement+0x9c>)
 80094a8:	0019      	movs	r1, r3
 80094aa:	2002      	movs	r0, #2
 80094ac:	f004 ffa4 	bl	800e3f8 <CreateLine>
    if (error) {
 80094b0:	1dbb      	adds	r3, r7, #6
 80094b2:	2200      	movs	r2, #0
 80094b4:	5e9b      	ldrsh	r3, [r3, r2]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d007      	beq.n	80094ca <sen5x_extinguish_measurement+0x86>
      Error("Error executing sen5x_stop_measurement(): %i", error);
 80094ba:	1dbb      	adds	r3, r7, #6
 80094bc:	2200      	movs	r2, #0
 80094be:	5e9b      	ldrsh	r3, [r3, r2]
 80094c0:	4a0c      	ldr	r2, [pc, #48]	@ (80094f4 <sen5x_extinguish_measurement+0xb0>)
 80094c2:	490a      	ldr	r1, [pc, #40]	@ (80094ec <sen5x_extinguish_measurement+0xa8>)
 80094c4:	2001      	movs	r0, #1
 80094c6:	f004 ff97 	bl	800e3f8 <CreateLine>
    }
  }
  return error;
 80094ca:	1dbb      	adds	r3, r7, #6
 80094cc:	2200      	movs	r2, #0
 80094ce:	5e9b      	ldrsh	r3, [r3, r2]
}
 80094d0:	0018      	movs	r0, r3
 80094d2:	46bd      	mov	sp, r7
 80094d4:	b003      	add	sp, #12
 80094d6:	bd90      	pop	{r4, r7, pc}
 80094d8:	2000125a 	.word	0x2000125a
 80094dc:	0802473c 	.word	0x0802473c
 80094e0:	08024490 	.word	0x08024490
 80094e4:	08024774 	.word	0x08024774
 80094e8:	08024790 	.word	0x08024790
 80094ec:	08024548 	.word	0x08024548
 80094f0:	080247d0 	.word	0x080247d0
 80094f4:	080247f0 	.word	0x080247f0

080094f8 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 80094f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094fa:	b08d      	sub	sp, #52	@ 0x34
 80094fc:	af04      	add	r7, sp, #16
 80094fe:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 8009500:	261e      	movs	r6, #30
 8009502:	19bb      	adds	r3, r7, r6
 8009504:	2200      	movs	r2, #0
 8009506:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 8009508:	19bc      	adds	r4, r7, r6
 800950a:	2316      	movs	r3, #22
 800950c:	18fd      	adds	r5, r7, r3
 800950e:	2318      	movs	r3, #24
 8009510:	18fa      	adds	r2, r7, r3
 8009512:	231a      	movs	r3, #26
 8009514:	18f9      	adds	r1, r7, r3
 8009516:	231c      	movs	r3, #28
 8009518:	18f8      	adds	r0, r7, r3
 800951a:	230e      	movs	r3, #14
 800951c:	18fb      	adds	r3, r7, r3
 800951e:	9303      	str	r3, [sp, #12]
 8009520:	2310      	movs	r3, #16
 8009522:	18fb      	adds	r3, r7, r3
 8009524:	9302      	str	r3, [sp, #8]
 8009526:	2312      	movs	r3, #18
 8009528:	18fb      	adds	r3, r7, r3
 800952a:	9301      	str	r3, [sp, #4]
 800952c:	2314      	movs	r3, #20
 800952e:	18fb      	adds	r3, r7, r3
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	002b      	movs	r3, r5
 8009534:	f000 fca8 	bl	8009e88 <sen5x_read_measured_values>
 8009538:	0003      	movs	r3, r0
 800953a:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 800953c:	19bb      	adds	r3, r7, r6
 800953e:	2200      	movs	r2, #0
 8009540:	5e9b      	ldrsh	r3, [r3, r2]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d003      	beq.n	800954e <sen5x_read_measurement+0x56>
    return error;
 8009546:	19bb      	adds	r3, r7, r6
 8009548:	2200      	movs	r2, #0
 800954a:	5e9b      	ldrsh	r3, [r3, r2]
 800954c:	e02c      	b.n	80095a8 <sen5x_read_measurement+0xb0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800954e:	231c      	movs	r3, #28
 8009550:	18fb      	adds	r3, r7, r3
 8009552:	881a      	ldrh	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 8009558:	231a      	movs	r3, #26
 800955a:	18fb      	adds	r3, r7, r3
 800955c:	881a      	ldrh	r2, [r3, #0]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 8009562:	2318      	movs	r3, #24
 8009564:	18fb      	adds	r3, r7, r3
 8009566:	881a      	ldrh	r2, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800956c:	2316      	movs	r3, #22
 800956e:	18fb      	adds	r3, r7, r3
 8009570:	881a      	ldrh	r2, [r3, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 8009576:	2314      	movs	r3, #20
 8009578:	18fb      	adds	r3, r7, r3
 800957a:	2200      	movs	r2, #0
 800957c:	5e9a      	ldrsh	r2, [r3, r2]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 8009582:	2312      	movs	r3, #18
 8009584:	18fb      	adds	r3, r7, r3
 8009586:	2200      	movs	r2, #0
 8009588:	5e9a      	ldrsh	r2, [r3, r2]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800958e:	2310      	movs	r3, #16
 8009590:	18fb      	adds	r3, r7, r3
 8009592:	2200      	movs	r2, #0
 8009594:	5e9a      	ldrsh	r2, [r3, r2]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800959a:	230e      	movs	r3, #14
 800959c:	18fb      	adds	r3, r7, r3
 800959e:	2200      	movs	r2, #0
 80095a0:	5e9a      	ldrsh	r2, [r3, r2]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	81da      	strh	r2, [r3, #14]
//  setPMs(mass_concentration_pm2p5, mass_concentration_pm10p0, nox_index);
  return 0;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	0018      	movs	r0, r3
 80095aa:	46bd      	mov	sp, r7
 80095ac:	b009      	add	sp, #36	@ 0x24
 80095ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095b0 <sen5x_printvalues>:

void sen5x_printvalues(void) {
 80095b0:	b580      	push	{r7, lr}
 80095b2:	af00      	add	r7, sp, #0
//  Debug("entering sen5x_printvalues");
//  Info("sen5x_printvalues entered for sample %d", sen5xSamples);
//  if (sen5xSamples != 3) {
//    return; // first two sample reads are not reliable
//  }
  if (sen5x_data.mass_concentration_pm1p0 != 0xFFFF) {
 80095b4:	4b69      	ldr	r3, [pc, #420]	@ (800975c <sen5x_printvalues+0x1ac>)
 80095b6:	881b      	ldrh	r3, [r3, #0]
 80095b8:	4a69      	ldr	r2, [pc, #420]	@ (8009760 <sen5x_printvalues+0x1b0>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d013      	beq.n	80095e6 <sen5x_printvalues+0x36>
      printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 80095be:	4b67      	ldr	r3, [pc, #412]	@ (800975c <sen5x_printvalues+0x1ac>)
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	0018      	movs	r0, r3
 80095c4:	f7f8 f804 	bl	80015d0 <__aeabi_i2f>
 80095c8:	1c03      	adds	r3, r0, #0
 80095ca:	4966      	ldr	r1, [pc, #408]	@ (8009764 <sen5x_printvalues+0x1b4>)
 80095cc:	1c18      	adds	r0, r3, #0
 80095ce:	f7f7 fb01 	bl	8000bd4 <__aeabi_fdiv>
 80095d2:	1c03      	adds	r3, r0, #0
 80095d4:	1c18      	adds	r0, r3, #0
 80095d6:	f7f9 ff45 	bl	8003464 <__aeabi_f2d>
 80095da:	0002      	movs	r2, r0
 80095dc:	000b      	movs	r3, r1
 80095de:	4962      	ldr	r1, [pc, #392]	@ (8009768 <sen5x_printvalues+0x1b8>)
 80095e0:	0008      	movs	r0, r1
 80095e2:	f016 fc03 	bl	801fdec <iprintf>
  }
  if (sen5x_data.mass_concentration_pm2p5 != 0xFFFF) {
 80095e6:	4b5d      	ldr	r3, [pc, #372]	@ (800975c <sen5x_printvalues+0x1ac>)
 80095e8:	885b      	ldrh	r3, [r3, #2]
 80095ea:	4a5d      	ldr	r2, [pc, #372]	@ (8009760 <sen5x_printvalues+0x1b0>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d013      	beq.n	8009618 <sen5x_printvalues+0x68>
        printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 80095f0:	4b5a      	ldr	r3, [pc, #360]	@ (800975c <sen5x_printvalues+0x1ac>)
 80095f2:	885b      	ldrh	r3, [r3, #2]
 80095f4:	0018      	movs	r0, r3
 80095f6:	f7f7 ffeb 	bl	80015d0 <__aeabi_i2f>
 80095fa:	1c03      	adds	r3, r0, #0
 80095fc:	4959      	ldr	r1, [pc, #356]	@ (8009764 <sen5x_printvalues+0x1b4>)
 80095fe:	1c18      	adds	r0, r3, #0
 8009600:	f7f7 fae8 	bl	8000bd4 <__aeabi_fdiv>
 8009604:	1c03      	adds	r3, r0, #0
 8009606:	1c18      	adds	r0, r3, #0
 8009608:	f7f9 ff2c 	bl	8003464 <__aeabi_f2d>
 800960c:	0002      	movs	r2, r0
 800960e:	000b      	movs	r3, r1
 8009610:	4956      	ldr	r1, [pc, #344]	@ (800976c <sen5x_printvalues+0x1bc>)
 8009612:	0008      	movs	r0, r1
 8009614:	f016 fbea 	bl	801fdec <iprintf>
  }
  if (sen5x_data.mass_concentration_pm4p0 != 0xFFFF) {
 8009618:	4b50      	ldr	r3, [pc, #320]	@ (800975c <sen5x_printvalues+0x1ac>)
 800961a:	889b      	ldrh	r3, [r3, #4]
 800961c:	4a50      	ldr	r2, [pc, #320]	@ (8009760 <sen5x_printvalues+0x1b0>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d013      	beq.n	800964a <sen5x_printvalues+0x9a>
        printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 8009622:	4b4e      	ldr	r3, [pc, #312]	@ (800975c <sen5x_printvalues+0x1ac>)
 8009624:	889b      	ldrh	r3, [r3, #4]
 8009626:	0018      	movs	r0, r3
 8009628:	f7f7 ffd2 	bl	80015d0 <__aeabi_i2f>
 800962c:	1c03      	adds	r3, r0, #0
 800962e:	494d      	ldr	r1, [pc, #308]	@ (8009764 <sen5x_printvalues+0x1b4>)
 8009630:	1c18      	adds	r0, r3, #0
 8009632:	f7f7 facf 	bl	8000bd4 <__aeabi_fdiv>
 8009636:	1c03      	adds	r3, r0, #0
 8009638:	1c18      	adds	r0, r3, #0
 800963a:	f7f9 ff13 	bl	8003464 <__aeabi_f2d>
 800963e:	0002      	movs	r2, r0
 8009640:	000b      	movs	r3, r1
 8009642:	494b      	ldr	r1, [pc, #300]	@ (8009770 <sen5x_printvalues+0x1c0>)
 8009644:	0008      	movs	r0, r1
 8009646:	f016 fbd1 	bl	801fdec <iprintf>
  }
  if (sen5x_data.mass_concentration_pm10p0 != 0xFFFF) {
 800964a:	4b44      	ldr	r3, [pc, #272]	@ (800975c <sen5x_printvalues+0x1ac>)
 800964c:	88db      	ldrh	r3, [r3, #6]
 800964e:	4a44      	ldr	r2, [pc, #272]	@ (8009760 <sen5x_printvalues+0x1b0>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d013      	beq.n	800967c <sen5x_printvalues+0xcc>
        printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 8009654:	4b41      	ldr	r3, [pc, #260]	@ (800975c <sen5x_printvalues+0x1ac>)
 8009656:	88db      	ldrh	r3, [r3, #6]
 8009658:	0018      	movs	r0, r3
 800965a:	f7f7 ffb9 	bl	80015d0 <__aeabi_i2f>
 800965e:	1c03      	adds	r3, r0, #0
 8009660:	4940      	ldr	r1, [pc, #256]	@ (8009764 <sen5x_printvalues+0x1b4>)
 8009662:	1c18      	adds	r0, r3, #0
 8009664:	f7f7 fab6 	bl	8000bd4 <__aeabi_fdiv>
 8009668:	1c03      	adds	r3, r0, #0
 800966a:	1c18      	adds	r0, r3, #0
 800966c:	f7f9 fefa 	bl	8003464 <__aeabi_f2d>
 8009670:	0002      	movs	r2, r0
 8009672:	000b      	movs	r3, r1
 8009674:	493f      	ldr	r1, [pc, #252]	@ (8009774 <sen5x_printvalues+0x1c4>)
 8009676:	0008      	movs	r0, r1
 8009678:	f016 fbb8 	bl	801fdec <iprintf>
  }
  if (sen5x_data.ambient_humidity != 0x7fff) {
 800967c:	4b37      	ldr	r3, [pc, #220]	@ (800975c <sen5x_printvalues+0x1ac>)
 800967e:	2208      	movs	r2, #8
 8009680:	5e9b      	ldrsh	r3, [r3, r2]
 8009682:	4a3d      	ldr	r2, [pc, #244]	@ (8009778 <sen5x_printvalues+0x1c8>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d014      	beq.n	80096b2 <sen5x_printvalues+0x102>
        printf("sen5x Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 8009688:	4b34      	ldr	r3, [pc, #208]	@ (800975c <sen5x_printvalues+0x1ac>)
 800968a:	2208      	movs	r2, #8
 800968c:	5e9b      	ldrsh	r3, [r3, r2]
 800968e:	0018      	movs	r0, r3
 8009690:	f7f7 ff9e 	bl	80015d0 <__aeabi_i2f>
 8009694:	1c03      	adds	r3, r0, #0
 8009696:	4939      	ldr	r1, [pc, #228]	@ (800977c <sen5x_printvalues+0x1cc>)
 8009698:	1c18      	adds	r0, r3, #0
 800969a:	f7f7 fa9b 	bl	8000bd4 <__aeabi_fdiv>
 800969e:	1c03      	adds	r3, r0, #0
 80096a0:	1c18      	adds	r0, r3, #0
 80096a2:	f7f9 fedf 	bl	8003464 <__aeabi_f2d>
 80096a6:	0002      	movs	r2, r0
 80096a8:	000b      	movs	r3, r1
 80096aa:	4935      	ldr	r1, [pc, #212]	@ (8009780 <sen5x_printvalues+0x1d0>)
 80096ac:	0008      	movs	r0, r1
 80096ae:	f016 fb9d 	bl	801fdec <iprintf>
  }
  if (sen5x_data.ambient_temperature != 0x7fff) {
 80096b2:	4b2a      	ldr	r3, [pc, #168]	@ (800975c <sen5x_printvalues+0x1ac>)
 80096b4:	220a      	movs	r2, #10
 80096b6:	5e9b      	ldrsh	r3, [r3, r2]
 80096b8:	4a2f      	ldr	r2, [pc, #188]	@ (8009778 <sen5x_printvalues+0x1c8>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d014      	beq.n	80096e8 <sen5x_printvalues+0x138>
        printf("sen5x Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 80096be:	4b27      	ldr	r3, [pc, #156]	@ (800975c <sen5x_printvalues+0x1ac>)
 80096c0:	220a      	movs	r2, #10
 80096c2:	5e9b      	ldrsh	r3, [r3, r2]
 80096c4:	0018      	movs	r0, r3
 80096c6:	f7f7 ff83 	bl	80015d0 <__aeabi_i2f>
 80096ca:	1c03      	adds	r3, r0, #0
 80096cc:	492d      	ldr	r1, [pc, #180]	@ (8009784 <sen5x_printvalues+0x1d4>)
 80096ce:	1c18      	adds	r0, r3, #0
 80096d0:	f7f7 fa80 	bl	8000bd4 <__aeabi_fdiv>
 80096d4:	1c03      	adds	r3, r0, #0
 80096d6:	1c18      	adds	r0, r3, #0
 80096d8:	f7f9 fec4 	bl	8003464 <__aeabi_f2d>
 80096dc:	0002      	movs	r2, r0
 80096de:	000b      	movs	r3, r1
 80096e0:	4929      	ldr	r1, [pc, #164]	@ (8009788 <sen5x_printvalues+0x1d8>)
 80096e2:	0008      	movs	r0, r1
 80096e4:	f016 fb82 	bl	801fdec <iprintf>
  }
  if (sen5x_data.voc_index != 0x7fff) {
 80096e8:	4b1c      	ldr	r3, [pc, #112]	@ (800975c <sen5x_printvalues+0x1ac>)
 80096ea:	220c      	movs	r2, #12
 80096ec:	5e9b      	ldrsh	r3, [r3, r2]
 80096ee:	4a22      	ldr	r2, [pc, #136]	@ (8009778 <sen5x_printvalues+0x1c8>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d014      	beq.n	800971e <sen5x_printvalues+0x16e>
        printf("sen55 VOC index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 80096f4:	4b19      	ldr	r3, [pc, #100]	@ (800975c <sen5x_printvalues+0x1ac>)
 80096f6:	220c      	movs	r2, #12
 80096f8:	5e9b      	ldrsh	r3, [r3, r2]
 80096fa:	0018      	movs	r0, r3
 80096fc:	f7f7 ff68 	bl	80015d0 <__aeabi_i2f>
 8009700:	1c03      	adds	r3, r0, #0
 8009702:	4918      	ldr	r1, [pc, #96]	@ (8009764 <sen5x_printvalues+0x1b4>)
 8009704:	1c18      	adds	r0, r3, #0
 8009706:	f7f7 fa65 	bl	8000bd4 <__aeabi_fdiv>
 800970a:	1c03      	adds	r3, r0, #0
 800970c:	1c18      	adds	r0, r3, #0
 800970e:	f7f9 fea9 	bl	8003464 <__aeabi_f2d>
 8009712:	0002      	movs	r2, r0
 8009714:	000b      	movs	r3, r1
 8009716:	491d      	ldr	r1, [pc, #116]	@ (800978c <sen5x_printvalues+0x1dc>)
 8009718:	0008      	movs	r0, r1
 800971a:	f016 fb67 	bl	801fdec <iprintf>
  }
  if (sen5x_data.nox_index != 0x7fff) {
 800971e:	4b0f      	ldr	r3, [pc, #60]	@ (800975c <sen5x_printvalues+0x1ac>)
 8009720:	220e      	movs	r2, #14
 8009722:	5e9b      	ldrsh	r3, [r3, r2]
 8009724:	4a14      	ldr	r2, [pc, #80]	@ (8009778 <sen5x_printvalues+0x1c8>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d014      	beq.n	8009754 <sen5x_printvalues+0x1a4>
        printf("sen55 NOx index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 800972a:	4b0c      	ldr	r3, [pc, #48]	@ (800975c <sen5x_printvalues+0x1ac>)
 800972c:	220e      	movs	r2, #14
 800972e:	5e9b      	ldrsh	r3, [r3, r2]
 8009730:	0018      	movs	r0, r3
 8009732:	f7f7 ff4d 	bl	80015d0 <__aeabi_i2f>
 8009736:	1c03      	adds	r3, r0, #0
 8009738:	490a      	ldr	r1, [pc, #40]	@ (8009764 <sen5x_printvalues+0x1b4>)
 800973a:	1c18      	adds	r0, r3, #0
 800973c:	f7f7 fa4a 	bl	8000bd4 <__aeabi_fdiv>
 8009740:	1c03      	adds	r3, r0, #0
 8009742:	1c18      	adds	r0, r3, #0
 8009744:	f7f9 fe8e 	bl	8003464 <__aeabi_f2d>
 8009748:	0002      	movs	r2, r0
 800974a:	000b      	movs	r3, r1
 800974c:	4910      	ldr	r1, [pc, #64]	@ (8009790 <sen5x_printvalues+0x1e0>)
 800974e:	0008      	movs	r0, r1
 8009750:	f016 fb4c 	bl	801fdec <iprintf>
  }
}
 8009754:	46c0      	nop			@ (mov r8, r8)
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	46c0      	nop			@ (mov r8, r8)
 800975c:	20001274 	.word	0x20001274
 8009760:	0000ffff 	.word	0x0000ffff
 8009764:	41200000 	.word	0x41200000
 8009768:	08024820 	.word	0x08024820
 800976c:	0802484c 	.word	0x0802484c
 8009770:	08024878 	.word	0x08024878
 8009774:	080248a4 	.word	0x080248a4
 8009778:	00007fff 	.word	0x00007fff
 800977c:	42c80000 	.word	0x42c80000
 8009780:	080248d0 	.word	0x080248d0
 8009784:	43480000 	.word	0x43480000
 8009788:	080248f4 	.word	0x080248f4
 800978c:	0802491c 	.word	0x0802491c
 8009790:	08024934 	.word	0x08024934

08009794 <sen5xStoreMax>:

void sen5xStoreMax() {
 8009794:	b580      	push	{r7, lr}
 8009796:	af00      	add	r7, sp, #0
  if ((sen5x_data.mass_concentration_pm2p5 != 0xFFFF) && (sen5x_data.mass_concentration_pm2p5 > pm2p5max)) {
 8009798:	4b32      	ldr	r3, [pc, #200]	@ (8009864 <sen5xStoreMax+0xd0>)
 800979a:	885b      	ldrh	r3, [r3, #2]
 800979c:	4a32      	ldr	r2, [pc, #200]	@ (8009868 <sen5xStoreMax+0xd4>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d009      	beq.n	80097b6 <sen5xStoreMax+0x22>
 80097a2:	4b30      	ldr	r3, [pc, #192]	@ (8009864 <sen5xStoreMax+0xd0>)
 80097a4:	885a      	ldrh	r2, [r3, #2]
 80097a6:	4b31      	ldr	r3, [pc, #196]	@ (800986c <sen5xStoreMax+0xd8>)
 80097a8:	881b      	ldrh	r3, [r3, #0]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d903      	bls.n	80097b6 <sen5xStoreMax+0x22>
    pm2p5max = sen5x_data.mass_concentration_pm2p5;
 80097ae:	4b2d      	ldr	r3, [pc, #180]	@ (8009864 <sen5xStoreMax+0xd0>)
 80097b0:	885a      	ldrh	r2, [r3, #2]
 80097b2:	4b2e      	ldr	r3, [pc, #184]	@ (800986c <sen5xStoreMax+0xd8>)
 80097b4:	801a      	strh	r2, [r3, #0]
  }
  if ((sen5x_data.mass_concentration_pm10p0 != 0xFFFF) && (sen5x_data.mass_concentration_pm10p0 > pm10p0max)) {
 80097b6:	4b2b      	ldr	r3, [pc, #172]	@ (8009864 <sen5xStoreMax+0xd0>)
 80097b8:	88db      	ldrh	r3, [r3, #6]
 80097ba:	4a2b      	ldr	r2, [pc, #172]	@ (8009868 <sen5xStoreMax+0xd4>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d009      	beq.n	80097d4 <sen5xStoreMax+0x40>
 80097c0:	4b28      	ldr	r3, [pc, #160]	@ (8009864 <sen5xStoreMax+0xd0>)
 80097c2:	88da      	ldrh	r2, [r3, #6]
 80097c4:	4b2a      	ldr	r3, [pc, #168]	@ (8009870 <sen5xStoreMax+0xdc>)
 80097c6:	881b      	ldrh	r3, [r3, #0]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d903      	bls.n	80097d4 <sen5xStoreMax+0x40>
    pm10p0max = sen5x_data.mass_concentration_pm10p0;
 80097cc:	4b25      	ldr	r3, [pc, #148]	@ (8009864 <sen5xStoreMax+0xd0>)
 80097ce:	88da      	ldrh	r2, [r3, #6]
 80097d0:	4b27      	ldr	r3, [pc, #156]	@ (8009870 <sen5xStoreMax+0xdc>)
 80097d2:	801a      	strh	r2, [r3, #0]
  }
  if ((sen5x_data.voc_index != 0x7fff) && (sen5x_data.voc_index > s5xvocimax)) {
 80097d4:	4b23      	ldr	r3, [pc, #140]	@ (8009864 <sen5xStoreMax+0xd0>)
 80097d6:	220c      	movs	r2, #12
 80097d8:	5e9b      	ldrsh	r3, [r3, r2]
 80097da:	4a26      	ldr	r2, [pc, #152]	@ (8009874 <sen5xStoreMax+0xe0>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d00d      	beq.n	80097fc <sen5xStoreMax+0x68>
 80097e0:	4b20      	ldr	r3, [pc, #128]	@ (8009864 <sen5xStoreMax+0xd0>)
 80097e2:	220c      	movs	r2, #12
 80097e4:	5e9b      	ldrsh	r3, [r3, r2]
 80097e6:	001a      	movs	r2, r3
 80097e8:	4b23      	ldr	r3, [pc, #140]	@ (8009878 <sen5xStoreMax+0xe4>)
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	dd05      	ble.n	80097fc <sen5xStoreMax+0x68>
    s5xvocimax = sen5x_data.voc_index;
 80097f0:	4b1c      	ldr	r3, [pc, #112]	@ (8009864 <sen5xStoreMax+0xd0>)
 80097f2:	220c      	movs	r2, #12
 80097f4:	5e9b      	ldrsh	r3, [r3, r2]
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	4b1f      	ldr	r3, [pc, #124]	@ (8009878 <sen5xStoreMax+0xe4>)
 80097fa:	801a      	strh	r2, [r3, #0]
  }
  if ((sen5x_data.nox_index != 0x7fff) && (sen5x_data.nox_index > s5xnoximax)) {
 80097fc:	4b19      	ldr	r3, [pc, #100]	@ (8009864 <sen5xStoreMax+0xd0>)
 80097fe:	220e      	movs	r2, #14
 8009800:	5e9b      	ldrsh	r3, [r3, r2]
 8009802:	4a1c      	ldr	r2, [pc, #112]	@ (8009874 <sen5xStoreMax+0xe0>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d00d      	beq.n	8009824 <sen5xStoreMax+0x90>
 8009808:	4b16      	ldr	r3, [pc, #88]	@ (8009864 <sen5xStoreMax+0xd0>)
 800980a:	220e      	movs	r2, #14
 800980c:	5e9b      	ldrsh	r3, [r3, r2]
 800980e:	001a      	movs	r2, r3
 8009810:	4b1a      	ldr	r3, [pc, #104]	@ (800987c <sen5xStoreMax+0xe8>)
 8009812:	881b      	ldrh	r3, [r3, #0]
 8009814:	429a      	cmp	r2, r3
 8009816:	dd05      	ble.n	8009824 <sen5xStoreMax+0x90>
    s5xnoximax = sen5x_data.nox_index;
 8009818:	4b12      	ldr	r3, [pc, #72]	@ (8009864 <sen5xStoreMax+0xd0>)
 800981a:	220e      	movs	r2, #14
 800981c:	5e9b      	ldrsh	r3, [r3, r2]
 800981e:	b29a      	uxth	r2, r3
 8009820:	4b16      	ldr	r3, [pc, #88]	@ (800987c <sen5xStoreMax+0xe8>)
 8009822:	801a      	strh	r2, [r3, #0]
  }
  if (((product_name[4] == '4') || (product_name[4] == '5'))) {
 8009824:	4b16      	ldr	r3, [pc, #88]	@ (8009880 <sen5xStoreMax+0xec>)
 8009826:	791b      	ldrb	r3, [r3, #4]
 8009828:	2b34      	cmp	r3, #52	@ 0x34
 800982a:	d003      	beq.n	8009834 <sen5xStoreMax+0xa0>
 800982c:	4b14      	ldr	r3, [pc, #80]	@ (8009880 <sen5xStoreMax+0xec>)
 800982e:	791b      	ldrb	r3, [r3, #4]
 8009830:	2b35      	cmp	r3, #53	@ 0x35
 8009832:	d10a      	bne.n	800984a <sen5xStoreMax+0xb6>
    setPMs(pm2p5max, pm10p0max, s5xvocimax, s5xnoximax);
 8009834:	4b0d      	ldr	r3, [pc, #52]	@ (800986c <sen5xStoreMax+0xd8>)
 8009836:	8818      	ldrh	r0, [r3, #0]
 8009838:	4b0d      	ldr	r3, [pc, #52]	@ (8009870 <sen5xStoreMax+0xdc>)
 800983a:	8819      	ldrh	r1, [r3, #0]
 800983c:	4b0e      	ldr	r3, [pc, #56]	@ (8009878 <sen5xStoreMax+0xe4>)
 800983e:	881a      	ldrh	r2, [r3, #0]
 8009840:	4b0e      	ldr	r3, [pc, #56]	@ (800987c <sen5xStoreMax+0xe8>)
 8009842:	881b      	ldrh	r3, [r3, #0]
 8009844:	f7fa f8cc 	bl	80039e0 <setPMs>
 8009848:	e008      	b.n	800985c <sen5xStoreMax+0xc8>
  }
  else {
    setPMsen50(pm2p5max, pm10p0max);
 800984a:	4b08      	ldr	r3, [pc, #32]	@ (800986c <sen5xStoreMax+0xd8>)
 800984c:	881a      	ldrh	r2, [r3, #0]
 800984e:	4b08      	ldr	r3, [pc, #32]	@ (8009870 <sen5xStoreMax+0xdc>)
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	0019      	movs	r1, r3
 8009854:	0010      	movs	r0, r2
 8009856:	f7fa f893 	bl	8003980 <setPMsen50>
  }
}
 800985a:	46c0      	nop			@ (mov r8, r8)
 800985c:	46c0      	nop			@ (mov r8, r8)
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	46c0      	nop			@ (mov r8, r8)
 8009864:	20001274 	.word	0x20001274
 8009868:	0000ffff 	.word	0x0000ffff
 800986c:	20001266 	.word	0x20001266
 8009870:	20001268 	.word	0x20001268
 8009874:	00007fff 	.word	0x00007fff
 8009878:	2000126a 	.word	0x2000126a
 800987c:	2000126c 	.word	0x2000126c
 8009880:	2000125c 	.word	0x2000125c

08009884 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8009884:	b590      	push	{r4, r7, lr}
 8009886:	b085      	sub	sp, #20
 8009888:	af02      	add	r7, sp, #8
 800988a:	6039      	str	r1, [r7, #0]
 800988c:	0011      	movs	r1, r2
 800988e:	1dfb      	adds	r3, r7, #7
 8009890:	1c02      	adds	r2, r0, #0
 8009892:	701a      	strb	r2, [r3, #0]
 8009894:	1d3b      	adds	r3, r7, #4
 8009896:	1c0a      	adds	r2, r1, #0
 8009898:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 800989a:	1dfb      	adds	r3, r7, #7
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	b29b      	uxth	r3, r3
 80098a0:	18db      	adds	r3, r3, r3
 80098a2:	b299      	uxth	r1, r3
 80098a4:	1d3b      	adds	r3, r7, #4
 80098a6:	881b      	ldrh	r3, [r3, #0]
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	4805      	ldr	r0, [pc, #20]	@ (80098c0 <sensirion_i2c_hal_read+0x3c>)
 80098ac:	2464      	movs	r4, #100	@ 0x64
 80098ae:	9400      	str	r4, [sp, #0]
 80098b0:	f006 fe60 	bl	8010574 <HAL_I2C_Master_Receive>
 80098b4:	0003      	movs	r3, r0
 80098b6:	b25b      	sxtb	r3, r3
}
 80098b8:	0018      	movs	r0, r3
 80098ba:	46bd      	mov	sp, r7
 80098bc:	b003      	add	sp, #12
 80098be:	bd90      	pop	{r4, r7, pc}
 80098c0:	20000e3c 	.word	0x20000e3c

080098c4 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 80098c4:	b590      	push	{r4, r7, lr}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af02      	add	r7, sp, #8
 80098ca:	6039      	str	r1, [r7, #0]
 80098cc:	0011      	movs	r1, r2
 80098ce:	1dfb      	adds	r3, r7, #7
 80098d0:	1c02      	adds	r2, r0, #0
 80098d2:	701a      	strb	r2, [r3, #0]
 80098d4:	1d3b      	adds	r3, r7, #4
 80098d6:	1c0a      	adds	r2, r1, #0
 80098d8:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 80098da:	1dfb      	adds	r3, r7, #7
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	b29b      	uxth	r3, r3
 80098e0:	18db      	adds	r3, r3, r3
 80098e2:	b299      	uxth	r1, r3
 80098e4:	1d3b      	adds	r3, r7, #4
 80098e6:	881b      	ldrh	r3, [r3, #0]
 80098e8:	683a      	ldr	r2, [r7, #0]
 80098ea:	4805      	ldr	r0, [pc, #20]	@ (8009900 <sensirion_i2c_hal_write+0x3c>)
 80098ec:	2464      	movs	r4, #100	@ 0x64
 80098ee:	9400      	str	r4, [sp, #0]
 80098f0:	f006 fd38 	bl	8010364 <HAL_I2C_Master_Transmit>
 80098f4:	0003      	movs	r3, r0
 80098f6:	b25b      	sxtb	r3, r3
}
 80098f8:	0018      	movs	r0, r3
 80098fa:	46bd      	mov	sp, r7
 80098fc:	b003      	add	sp, #12
 80098fe:	bd90      	pop	{r4, r7, pc}
 8009900:	20000e3c 	.word	0x20000e3c

08009904 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	22fa      	movs	r2, #250	@ 0xfa
 8009910:	0091      	lsls	r1, r2, #2
 8009912:	0018      	movs	r0, r3
 8009914:	f7f6 fc46 	bl	80001a4 <__udivsi3>
 8009918:	0003      	movs	r3, r0
 800991a:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	22fa      	movs	r2, #250	@ 0xfa
 8009920:	0091      	lsls	r1, r2, #2
 8009922:	0018      	movs	r0, r3
 8009924:	f7f6 fcc4 	bl	80002b0 <__aeabi_uidivmod>
 8009928:	1e0b      	subs	r3, r1, #0
 800992a:	d002      	beq.n	8009932 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3301      	adds	r3, #1
 8009930:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	0018      	movs	r0, r3
 8009936:	f005 f9bf 	bl	800ecb8 <HAL_Delay>
}
 800993a:	46c0      	nop			@ (mov r8, r8)
 800993c:	46bd      	mov	sp, r7
 800993e:	b004      	add	sp, #16
 8009940:	bd80      	pop	{r7, pc}
	...

08009944 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 800994a:	2300      	movs	r3, #0
 800994c:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 800994e:	1d3b      	adds	r3, r7, #4
 8009950:	0018      	movs	r0, r3
 8009952:	f000 fcd9 	bl	800a308 <sen5x_read_device_status>
 8009956:	1e03      	subs	r3, r0, #0
 8009958:	d007      	beq.n	800996a <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 800995a:	4a28      	ldr	r2, [pc, #160]	@ (80099fc <sen5x_check_for_errors+0xb8>)
 800995c:	4b28      	ldr	r3, [pc, #160]	@ (8009a00 <sen5x_check_for_errors+0xbc>)
 800995e:	0019      	movs	r1, r3
 8009960:	2001      	movs	r0, #1
 8009962:	f004 fd49 	bl	800e3f8 <CreateLine>
//    device_status = SEN5X_NO_RESPONSE;
    return 0;
 8009966:	2300      	movs	r3, #0
 8009968:	e043      	b.n	80099f2 <sen5x_check_for_errors+0xae>
  }
  if (device_status == 0) {
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d101      	bne.n	8009974 <sen5x_check_for_errors+0x30>
//    Debug("sen5x operates normal");
    return 0;
 8009970:	2300      	movs	r3, #0
 8009972:	e03e      	b.n	80099f2 <sen5x_check_for_errors+0xae>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	2380      	movs	r3, #128	@ 0x80
 8009978:	039b      	lsls	r3, r3, #14
 800997a:	4013      	ands	r3, r2
 800997c:	d005      	beq.n	800998a <sen5x_check_for_errors+0x46>
    Debug("sen5x Fan speed out of range");
 800997e:	4a21      	ldr	r2, [pc, #132]	@ (8009a04 <sen5x_check_for_errors+0xc0>)
 8009980:	4b21      	ldr	r3, [pc, #132]	@ (8009a08 <sen5x_check_for_errors+0xc4>)
 8009982:	0019      	movs	r1, r3
 8009984:	2003      	movs	r0, #3
 8009986:	f004 fd37 	bl	800e3f8 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	2380      	movs	r3, #128	@ 0x80
 800998e:	031b      	lsls	r3, r3, #12
 8009990:	4013      	ands	r3, r2
 8009992:	d005      	beq.n	80099a0 <sen5x_check_for_errors+0x5c>
    Debug("sen5x Fan cleaning active");
 8009994:	4a1d      	ldr	r2, [pc, #116]	@ (8009a0c <sen5x_check_for_errors+0xc8>)
 8009996:	4b1c      	ldr	r3, [pc, #112]	@ (8009a08 <sen5x_check_for_errors+0xc4>)
 8009998:	0019      	movs	r1, r3
 800999a:	2003      	movs	r0, #3
 800999c:	f004 fd2c 	bl	800e3f8 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2280      	movs	r2, #128	@ 0x80
 80099a4:	4013      	ands	r3, r2
 80099a6:	d005      	beq.n	80099b4 <sen5x_check_for_errors+0x70>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 80099a8:	4a19      	ldr	r2, [pc, #100]	@ (8009a10 <sen5x_check_for_errors+0xcc>)
 80099aa:	4b17      	ldr	r3, [pc, #92]	@ (8009a08 <sen5x_check_for_errors+0xc4>)
 80099ac:	0019      	movs	r1, r3
 80099ae:	2003      	movs	r0, #3
 80099b0:	f004 fd22 	bl	800e3f8 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2240      	movs	r2, #64	@ 0x40
 80099b8:	4013      	ands	r3, r2
 80099ba:	d005      	beq.n	80099c8 <sen5x_check_for_errors+0x84>
    Debug("sen5x RHT communication error");
 80099bc:	4a15      	ldr	r2, [pc, #84]	@ (8009a14 <sen5x_check_for_errors+0xd0>)
 80099be:	4b12      	ldr	r3, [pc, #72]	@ (8009a08 <sen5x_check_for_errors+0xc4>)
 80099c0:	0019      	movs	r1, r3
 80099c2:	2003      	movs	r0, #3
 80099c4:	f004 fd18 	bl	800e3f8 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2220      	movs	r2, #32
 80099cc:	4013      	ands	r3, r2
 80099ce:	d005      	beq.n	80099dc <sen5x_check_for_errors+0x98>
    Debug("sen5x Laser failure");
 80099d0:	4a11      	ldr	r2, [pc, #68]	@ (8009a18 <sen5x_check_for_errors+0xd4>)
 80099d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009a08 <sen5x_check_for_errors+0xc4>)
 80099d4:	0019      	movs	r1, r3
 80099d6:	2003      	movs	r0, #3
 80099d8:	f004 fd0e 	bl	800e3f8 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2210      	movs	r2, #16
 80099e0:	4013      	ands	r3, r2
 80099e2:	d005      	beq.n	80099f0 <sen5x_check_for_errors+0xac>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 80099e4:	4a0d      	ldr	r2, [pc, #52]	@ (8009a1c <sen5x_check_for_errors+0xd8>)
 80099e6:	4b08      	ldr	r3, [pc, #32]	@ (8009a08 <sen5x_check_for_errors+0xc4>)
 80099e8:	0019      	movs	r1, r3
 80099ea:	2003      	movs	r0, #3
 80099ec:	f004 fd04 	bl	800e3f8 <CreateLine>
  }
  return 1;
 80099f0:	2301      	movs	r3, #1
}
 80099f2:	0018      	movs	r0, r3
 80099f4:	46bd      	mov	sp, r7
 80099f6:	b002      	add	sp, #8
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	46c0      	nop			@ (mov r8, r8)
 80099fc:	0802494c 	.word	0x0802494c
 8009a00:	08024548 	.word	0x08024548
 8009a04:	08024978 	.word	0x08024978
 8009a08:	08024468 	.word	0x08024468
 8009a0c:	08024998 	.word	0x08024998
 8009a10:	080249b4 	.word	0x080249b4
 8009a14:	080249d8 	.word	0x080249d8
 8009a18:	080249f8 	.word	0x080249f8
 8009a1c:	08024a0c 	.word	0x08024a0c

08009a20 <set_light_on_state>:

void set_light_on_state(void) {
 8009a20:	b580      	push	{r7, lr}
 8009a22:	af00      	add	r7, sp, #0
  if (!sen5x_On) {
 8009a24:	4b15      	ldr	r3, [pc, #84]	@ (8009a7c <set_light_on_state+0x5c>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	4053      	eors	r3, r2
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d008      	beq.n	8009a44 <set_light_on_state+0x24>
    sen5x_Power_On();
 8009a32:	f7ff fb4d 	bl	80090d0 <sen5x_Power_On>
    Debug("sen5x powered on, warming up for 30 sec.");
 8009a36:	4a12      	ldr	r2, [pc, #72]	@ (8009a80 <set_light_on_state+0x60>)
 8009a38:	4b12      	ldr	r3, [pc, #72]	@ (8009a84 <set_light_on_state+0x64>)
 8009a3a:	0019      	movs	r1, r3
 8009a3c:	2003      	movs	r0, #3
 8009a3e:	f004 fcdb 	bl	800e3f8 <CreateLine>
 8009a42:	e00a      	b.n	8009a5a <set_light_on_state+0x3a>
  }
  else {
    sen5xReadTimer = HAL_GetTick();
 8009a44:	f005 f92e 	bl	800eca4 <HAL_GetTick>
 8009a48:	0002      	movs	r2, r0
 8009a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8009a88 <set_light_on_state+0x68>)
 8009a4c:	601a      	str	r2, [r3, #0]
    Debug("sen5x already powered");
 8009a4e:	4a0f      	ldr	r2, [pc, #60]	@ (8009a8c <set_light_on_state+0x6c>)
 8009a50:	4b0c      	ldr	r3, [pc, #48]	@ (8009a84 <set_light_on_state+0x64>)
 8009a52:	0019      	movs	r1, r3
 8009a54:	2003      	movs	r0, #3
 8009a56:	f004 fccf 	bl	800e3f8 <CreateLine>
  }
  if (sen5x_lightup_measurement()) {  // start selected measurement mode
 8009a5a:	f7ff fca7 	bl	80093ac <sen5x_lightup_measurement>
 8009a5e:	1e03      	subs	r3, r0, #0
 8009a60:	d005      	beq.n	8009a6e <set_light_on_state+0x4e>
    Error("Error executing sen5x_lightup_measurement()");
 8009a62:	4a0b      	ldr	r2, [pc, #44]	@ (8009a90 <set_light_on_state+0x70>)
 8009a64:	4b0b      	ldr	r3, [pc, #44]	@ (8009a94 <set_light_on_state+0x74>)
 8009a66:	0019      	movs	r1, r3
 8009a68:	2001      	movs	r0, #1
 8009a6a:	f004 fcc5 	bl	800e3f8 <CreateLine>
  }
  PMsamplesState = CHECK_SEN5X;
 8009a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8009a98 <set_light_on_state+0x78>)
 8009a70:	2203      	movs	r2, #3
 8009a72:	701a      	strb	r2, [r3, #0]
}
 8009a74:	46c0      	nop			@ (mov r8, r8)
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	46c0      	nop			@ (mov r8, r8)
 8009a7c:	20001259 	.word	0x20001259
 8009a80:	08024a48 	.word	0x08024a48
 8009a84:	08024468 	.word	0x08024468
 8009a88:	20001270 	.word	0x20001270
 8009a8c:	08024a74 	.word	0x08024a74
 8009a90:	08024a8c 	.word	0x08024a8c
 8009a94:	08024548 	.word	0x08024548
 8009a98:	20000085 	.word	0x20000085

08009a9c <sen5x_statemachine>:

void sen5x_statemachine() {
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
  bool data_ready = false;
 8009aa2:	1dfb      	adds	r3, r7, #7
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	701a      	strb	r2, [r3, #0]
//  Debug("sen5xReadTimer has value %d", sen5xReadTimer);
  if (TimestampIsReached(sen5xReadTimer)) {
 8009aa8:	4b75      	ldr	r3, [pc, #468]	@ (8009c80 <sen5x_statemachine+0x1e4>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	0018      	movs	r0, r3
 8009aae:	f004 fc4d 	bl	800e34c <TimestampIsReached>
 8009ab2:	1e03      	subs	r3, r0, #0
 8009ab4:	d100      	bne.n	8009ab8 <sen5x_statemachine+0x1c>
 8009ab6:	e0df      	b.n	8009c78 <sen5x_statemachine+0x1dc>
    switch (PMsamplesState) {
 8009ab8:	4b72      	ldr	r3, [pc, #456]	@ (8009c84 <sen5x_statemachine+0x1e8>)
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	2b05      	cmp	r3, #5
 8009abe:	d900      	bls.n	8009ac2 <sen5x_statemachine+0x26>
 8009ac0:	e0da      	b.n	8009c78 <sen5x_statemachine+0x1dc>
 8009ac2:	009a      	lsls	r2, r3, #2
 8009ac4:	4b70      	ldr	r3, [pc, #448]	@ (8009c88 <sen5x_statemachine+0x1ec>)
 8009ac6:	18d3      	adds	r3, r2, r3
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8009acc:	4a6f      	ldr	r2, [pc, #444]	@ (8009c8c <sen5x_statemachine+0x1f0>)
 8009ace:	4b70      	ldr	r3, [pc, #448]	@ (8009c90 <sen5x_statemachine+0x1f4>)
 8009ad0:	0019      	movs	r1, r3
 8009ad2:	2001      	movs	r0, #1
 8009ad4:	f004 fc90 	bl	800e3f8 <CreateLine>
      sen5xReadTimer = HAL_GetTick() + 3141592; //some more less then an hour a message when continue operated.
 8009ad8:	f005 f8e4 	bl	800eca4 <HAL_GetTick>
 8009adc:	0003      	movs	r3, r0
 8009ade:	4a6d      	ldr	r2, [pc, #436]	@ (8009c94 <sen5x_statemachine+0x1f8>)
 8009ae0:	189a      	adds	r2, r3, r2
 8009ae2:	4b67      	ldr	r3, [pc, #412]	@ (8009c80 <sen5x_statemachine+0x1e4>)
 8009ae4:	601a      	str	r2, [r3, #0]
      break;
 8009ae6:	e0c7      	b.n	8009c78 <sen5x_statemachine+0x1dc>
    case LIGHT_OUT:
//      Debug("state is LIGHT_OUT");
      sen5xReadTimer = HAL_GetTick() + 22800; // about every 30s when started up
 8009ae8:	f005 f8dc 	bl	800eca4 <HAL_GetTick>
 8009aec:	0003      	movs	r3, r0
 8009aee:	4a6a      	ldr	r2, [pc, #424]	@ (8009c98 <sen5x_statemachine+0x1fc>)
 8009af0:	189a      	adds	r2, r3, r2
 8009af2:	4b63      	ldr	r3, [pc, #396]	@ (8009c80 <sen5x_statemachine+0x1e4>)
 8009af4:	601a      	str	r2, [r3, #0]
      set_light_on_state();
 8009af6:	f7ff ff93 	bl	8009a20 <set_light_on_state>
      break;
 8009afa:	e0bd      	b.n	8009c78 <sen5x_statemachine+0x1dc>
    case CHECK_SEN5X:
//      Debug("state is CHECK_SEN5X");
      PMsamplesState = LIGHT_ON;
 8009afc:	4b61      	ldr	r3, [pc, #388]	@ (8009c84 <sen5x_statemachine+0x1e8>)
 8009afe:	2202      	movs	r2, #2
 8009b00:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 8009b02:	4b66      	ldr	r3, [pc, #408]	@ (8009c9c <sen5x_statemachine+0x200>)
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	2b05      	cmp	r3, #5
 8009b08:	d905      	bls.n	8009b16 <sen5x_statemachine+0x7a>
        PMsamplesState = S5X_DISABLED;
 8009b0a:	4b5e      	ldr	r3, [pc, #376]	@ (8009c84 <sen5x_statemachine+0x1e8>)
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009b10:	f7ff fafe 	bl	8009110 <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 8009b14:	e0ad      	b.n	8009c72 <sen5x_statemachine+0x1d6>
        if (sen5x_check_for_errors()) {
 8009b16:	f7ff ff15 	bl	8009944 <sen5x_check_for_errors>
 8009b1a:	1e03      	subs	r3, r0, #0
 8009b1c:	d100      	bne.n	8009b20 <sen5x_statemachine+0x84>
 8009b1e:	e0a8      	b.n	8009c72 <sen5x_statemachine+0x1d6>
          if (sen5x_device_reset()) {
 8009b20:	f000 fc44 	bl	800a3ac <sen5x_device_reset>
 8009b24:	1e03      	subs	r3, r0, #0
 8009b26:	d006      	beq.n	8009b36 <sen5x_statemachine+0x9a>
            Error("Error resetting sen5x");
 8009b28:	4a5d      	ldr	r2, [pc, #372]	@ (8009ca0 <sen5x_statemachine+0x204>)
 8009b2a:	4b59      	ldr	r3, [pc, #356]	@ (8009c90 <sen5x_statemachine+0x1f4>)
 8009b2c:	0019      	movs	r1, r3
 8009b2e:	2001      	movs	r0, #1
 8009b30:	f004 fc62 	bl	800e3f8 <CreateLine>
 8009b34:	e005      	b.n	8009b42 <sen5x_statemachine+0xa6>
            Info("sen5x reset executed");
 8009b36:	4a5b      	ldr	r2, [pc, #364]	@ (8009ca4 <sen5x_statemachine+0x208>)
 8009b38:	4b5b      	ldr	r3, [pc, #364]	@ (8009ca8 <sen5x_statemachine+0x20c>)
 8009b3a:	0019      	movs	r1, r3
 8009b3c:	2002      	movs	r0, #2
 8009b3e:	f004 fc5b 	bl	800e3f8 <CreateLine>
          sen5xErrors++;
 8009b42:	4b56      	ldr	r3, [pc, #344]	@ (8009c9c <sen5x_statemachine+0x200>)
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	3301      	adds	r3, #1
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	4b54      	ldr	r3, [pc, #336]	@ (8009c9c <sen5x_statemachine+0x200>)
 8009b4c:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 8009b4e:	f005 f8a9 	bl	800eca4 <HAL_GetTick>
 8009b52:	0003      	movs	r3, r0
 8009b54:	3396      	adds	r3, #150	@ 0x96
 8009b56:	001a      	movs	r2, r3
 8009b58:	4b49      	ldr	r3, [pc, #292]	@ (8009c80 <sen5x_statemachine+0x1e4>)
 8009b5a:	601a      	str	r2, [r3, #0]
      break;
 8009b5c:	e089      	b.n	8009c72 <sen5x_statemachine+0x1d6>
    case LIGHT_ON:
//      Debug("state is LIGHT_ON");
      sen5x_read_data_ready(&data_ready);  // is new data ready in the sensor module?
 8009b5e:	1dfb      	adds	r3, r7, #7
 8009b60:	0018      	movs	r0, r3
 8009b62:	f000 f93f 	bl	8009de4 <sen5x_read_data_ready>
      if (data_ready) {
 8009b66:	1dfb      	adds	r3, r7, #7
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d028      	beq.n	8009bc0 <sen5x_statemachine+0x124>
        SetPMIndicator();
 8009b6e:	f003 fc95 	bl	800d49c <SetPMIndicator>
        if (sen5x_read_measurement(&sen5x_data)) {
 8009b72:	4b4e      	ldr	r3, [pc, #312]	@ (8009cac <sen5x_statemachine+0x210>)
 8009b74:	0018      	movs	r0, r3
 8009b76:	f7ff fcbf 	bl	80094f8 <sen5x_read_measurement>
 8009b7a:	1e03      	subs	r3, r0, #0
 8009b7c:	d005      	beq.n	8009b8a <sen5x_statemachine+0xee>
          Error("Error executing sen5x_read_measured_values()");
 8009b7e:	4a4c      	ldr	r2, [pc, #304]	@ (8009cb0 <sen5x_statemachine+0x214>)
 8009b80:	4b43      	ldr	r3, [pc, #268]	@ (8009c90 <sen5x_statemachine+0x1f4>)
 8009b82:	0019      	movs	r1, r3
 8009b84:	2001      	movs	r0, #1
 8009b86:	f004 fc37 	bl	800e3f8 <CreateLine>
        }
        sen5xSamples++;
 8009b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8009cb4 <sen5x_statemachine+0x218>)
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	4b48      	ldr	r3, [pc, #288]	@ (8009cb4 <sen5x_statemachine+0x218>)
 8009b94:	701a      	strb	r2, [r3, #0]
        sen5xStoreMax();
 8009b96:	f7ff fdfd 	bl	8009794 <sen5xStoreMax>
        if (sen5xSamples == 31) { // about two times a minute
 8009b9a:	4b46      	ldr	r3, [pc, #280]	@ (8009cb4 <sen5x_statemachine+0x218>)
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	2b1f      	cmp	r3, #31
 8009ba0:	d102      	bne.n	8009ba8 <sen5x_statemachine+0x10c>
          sen5xSamples = 0;  // enable display on serial
 8009ba2:	4b44      	ldr	r3, [pc, #272]	@ (8009cb4 <sen5x_statemachine+0x218>)
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	701a      	strb	r2, [r3, #0]
        }
        if (sen5xSamples > 1) {
 8009ba8:	4b42      	ldr	r3, [pc, #264]	@ (8009cb4 <sen5x_statemachine+0x218>)
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d901      	bls.n	8009bb4 <sen5x_statemachine+0x118>
          sen5xStoreMax();
 8009bb0:	f7ff fdf0 	bl	8009794 <sen5xStoreMax>
        }
        if (sen5xSamples == 2) { // take 2 samples, show 1 sample before we continue in the state machine
 8009bb4:	4b3f      	ldr	r3, [pc, #252]	@ (8009cb4 <sen5x_statemachine+0x218>)
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d101      	bne.n	8009bc0 <sen5x_statemachine+0x124>
#ifndef STLINK_V3PWR
          sen5x_printvalues(); // print the values
 8009bbc:	f7ff fcf8 	bl	80095b0 <sen5x_printvalues>
          sen5x_printvalues(); // print the values
          Info("!!==Values are bogus, voltage for sen5x is out of range when powered by the STLINK_V3PWR==!!");
#endif
        }
      }
      if (usbPluggedIn || (sen5xSamples > 1)) {
 8009bc0:	4b3d      	ldr	r3, [pc, #244]	@ (8009cb8 <sen5x_statemachine+0x21c>)
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d103      	bne.n	8009bd0 <sen5x_statemachine+0x134>
 8009bc8:	4b3a      	ldr	r3, [pc, #232]	@ (8009cb4 <sen5x_statemachine+0x218>)
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d952      	bls.n	8009c76 <sen5x_statemachine+0x1da>
        PMsamplesState = CLEAN_FAN;
 8009bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8009c84 <sen5x_statemachine+0x1e8>)
 8009bd2:	2204      	movs	r2, #4
 8009bd4:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009bd6:	e04e      	b.n	8009c76 <sen5x_statemachine+0x1da>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
//      Debug(" state is CLEAN_FAN");
      if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 8009bd8:	f7fc ff08 	bl	80069ec <RTC_GetWeekday>
 8009bdc:	0003      	movs	r3, r0
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d118      	bne.n	8009c14 <sen5x_statemachine+0x178>
 8009be2:	4b36      	ldr	r3, [pc, #216]	@ (8009cbc <sen5x_statemachine+0x220>)
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	2201      	movs	r2, #1
 8009be8:	4053      	eors	r3, r2
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d011      	beq.n	8009c14 <sen5x_statemachine+0x178>
        sen5x_start_fan_cleaning();
 8009bf0:	f000 f9de 	bl	8009fb0 <sen5x_start_fan_cleaning>
        Info("executing fan cleaning");
 8009bf4:	4a32      	ldr	r2, [pc, #200]	@ (8009cc0 <sen5x_statemachine+0x224>)
 8009bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8009ca8 <sen5x_statemachine+0x20c>)
 8009bf8:	0019      	movs	r1, r3
 8009bfa:	2002      	movs	r0, #2
 8009bfc:	f004 fbfc 	bl	800e3f8 <CreateLine>
        sen5xReadTimer = HAL_GetTick() + 10000;  // fan cleaning takes 10 seconds
 8009c00:	f005 f850 	bl	800eca4 <HAL_GetTick>
 8009c04:	0003      	movs	r3, r0
 8009c06:	4a2f      	ldr	r2, [pc, #188]	@ (8009cc4 <sen5x_statemachine+0x228>)
 8009c08:	189a      	adds	r2, r3, r2
 8009c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8009c80 <sen5x_statemachine+0x1e4>)
 8009c0c:	601a      	str	r2, [r3, #0]
        fanCleaningDone = true;
 8009c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8009cbc <sen5x_statemachine+0x220>)
 8009c10:	2201      	movs	r2, #1
 8009c12:	701a      	strb	r2, [r3, #0]
      }
      PMsamplesState = SAMPLES_TAKEN;
 8009c14:	4b1b      	ldr	r3, [pc, #108]	@ (8009c84 <sen5x_statemachine+0x1e8>)
 8009c16:	2205      	movs	r2, #5
 8009c18:	701a      	strb	r2, [r3, #0]
      break;
 8009c1a:	e02d      	b.n	8009c78 <sen5x_statemachine+0x1dc>
    case SAMPLES_TAKEN:
//      Debug(" state is SAMPLES_TAKEN");
      if (!usbPluggedIn) {
 8009c1c:	4b26      	ldr	r3, [pc, #152]	@ (8009cb8 <sen5x_statemachine+0x21c>)
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	2201      	movs	r2, #1
 8009c22:	4053      	eors	r3, r2
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d015      	beq.n	8009c56 <sen5x_statemachine+0x1ba>
        if (sen5x_extinguish_measurement()) {
 8009c2a:	f7ff fc0b 	bl	8009444 <sen5x_extinguish_measurement>
 8009c2e:	1e03      	subs	r3, r0, #0
 8009c30:	d005      	beq.n	8009c3e <sen5x_statemachine+0x1a2>
          Error("Error executing sen5x_extinguish_measurement()");
 8009c32:	4a25      	ldr	r2, [pc, #148]	@ (8009cc8 <sen5x_statemachine+0x22c>)
 8009c34:	4b16      	ldr	r3, [pc, #88]	@ (8009c90 <sen5x_statemachine+0x1f4>)
 8009c36:	0019      	movs	r1, r3
 8009c38:	2001      	movs	r0, #1
 8009c3a:	f004 fbdd 	bl	800e3f8 <CreateLine>
        }
        sen5xSamples = 0;
 8009c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8009cb4 <sen5x_statemachine+0x218>)
 8009c40:	2200      	movs	r2, #0
 8009c42:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8009c44:	f7ff fa64 	bl	8009110 <sen5x_Power_Off>
        SetPMSensorStatus(false);
 8009c48:	2000      	movs	r0, #0
 8009c4a:	f7fe fbb9 	bl	80083c0 <SetPMSensorStatus>
        PMsamplesState = LIGHT_OUT;
 8009c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c84 <sen5x_statemachine+0x1e8>)
 8009c50:	2201      	movs	r2, #1
 8009c52:	701a      	strb	r2, [r3, #0]
 8009c54:	e002      	b.n	8009c5c <sen5x_statemachine+0x1c0>
      }
      else {
        PMsamplesState = CHECK_SEN5X;
 8009c56:	4b0b      	ldr	r3, [pc, #44]	@ (8009c84 <sen5x_statemachine+0x1e8>)
 8009c58:	2203      	movs	r2, #3
 8009c5a:	701a      	strb	r2, [r3, #0]
      }
      ResetPMIndicator();
 8009c5c:	f003 fc44 	bl	800d4e8 <ResetPMIndicator>
      sen5xReadTimer = HAL_GetTick() + 1000;
 8009c60:	f005 f820 	bl	800eca4 <HAL_GetTick>
 8009c64:	0003      	movs	r3, r0
 8009c66:	22fa      	movs	r2, #250	@ 0xfa
 8009c68:	0092      	lsls	r2, r2, #2
 8009c6a:	189a      	adds	r2, r3, r2
 8009c6c:	4b04      	ldr	r3, [pc, #16]	@ (8009c80 <sen5x_statemachine+0x1e4>)
 8009c6e:	601a      	str	r2, [r3, #0]
    }
  }
}
 8009c70:	e002      	b.n	8009c78 <sen5x_statemachine+0x1dc>
      break;
 8009c72:	46c0      	nop			@ (mov r8, r8)
 8009c74:	e000      	b.n	8009c78 <sen5x_statemachine+0x1dc>
      break;
 8009c76:	46c0      	nop			@ (mov r8, r8)
}
 8009c78:	46c0      	nop			@ (mov r8, r8)
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	b002      	add	sp, #8
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	20001270 	.word	0x20001270
 8009c84:	20000085 	.word	0x20000085
 8009c88:	08025474 	.word	0x08025474
 8009c8c:	08024ab8 	.word	0x08024ab8
 8009c90:	08024548 	.word	0x08024548
 8009c94:	002fefd8 	.word	0x002fefd8
 8009c98:	00005910 	.word	0x00005910
 8009c9c:	20001265 	.word	0x20001265
 8009ca0:	08024ae8 	.word	0x08024ae8
 8009ca4:	08024b00 	.word	0x08024b00
 8009ca8:	08024490 	.word	0x08024490
 8009cac:	20001274 	.word	0x20001274
 8009cb0:	08024b18 	.word	0x08024b18
 8009cb4:	20001264 	.word	0x20001264
 8009cb8:	200021f1 	.word	0x200021f1
 8009cbc:	20001258 	.word	0x20001258
 8009cc0:	08024b48 	.word	0x08024b48
 8009cc4:	00002710 	.word	0x00002710
 8009cc8:	08024b60 	.word	0x08024b60

08009ccc <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 8009ccc:	b590      	push	{r4, r7, lr}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009cd2:	1dbb      	adds	r3, r7, #6
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 8009cd8:	1dbc      	adds	r4, r7, #6
 8009cda:	1dbb      	adds	r3, r7, #6
 8009cdc:	8819      	ldrh	r1, [r3, #0]
 8009cde:	003b      	movs	r3, r7
 8009ce0:	2221      	movs	r2, #33	@ 0x21
 8009ce2:	0018      	movs	r0, r3
 8009ce4:	f001 fb56 	bl	800b394 <sensirion_i2c_add_command_to_buffer>
 8009ce8:	0003      	movs	r3, r0
 8009cea:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009cec:	1d3c      	adds	r4, r7, #4
 8009cee:	1dbb      	adds	r3, r7, #6
 8009cf0:	881a      	ldrh	r2, [r3, #0]
 8009cf2:	003b      	movs	r3, r7
 8009cf4:	0019      	movs	r1, r3
 8009cf6:	2069      	movs	r0, #105	@ 0x69
 8009cf8:	f001 fbd0 	bl	800b49c <sensirion_i2c_write_data>
 8009cfc:	0003      	movs	r3, r0
 8009cfe:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d00:	1d3b      	adds	r3, r7, #4
 8009d02:	2200      	movs	r2, #0
 8009d04:	5e9b      	ldrsh	r3, [r3, r2]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d003      	beq.n	8009d12 <sen5x_start_measurement+0x46>
        return error;
 8009d0a:	1d3b      	adds	r3, r7, #4
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	5e9b      	ldrsh	r3, [r3, r2]
 8009d10:	e004      	b.n	8009d1c <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009d12:	4b04      	ldr	r3, [pc, #16]	@ (8009d24 <sen5x_start_measurement+0x58>)
 8009d14:	0018      	movs	r0, r3
 8009d16:	f7ff fdf5 	bl	8009904 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	0018      	movs	r0, r3
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	b003      	add	sp, #12
 8009d22:	bd90      	pop	{r4, r7, pc}
 8009d24:	0000c350 	.word	0x0000c350

08009d28 <sen5x_start_measurement_without_pm>:

int16_t sen5x_start_measurement_without_pm(void) {
 8009d28:	b590      	push	{r4, r7, lr}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009d2e:	1dbb      	adds	r3, r7, #6
 8009d30:	2200      	movs	r2, #0
 8009d32:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x37);
 8009d34:	1dbc      	adds	r4, r7, #6
 8009d36:	1dbb      	adds	r3, r7, #6
 8009d38:	8819      	ldrh	r1, [r3, #0]
 8009d3a:	003b      	movs	r3, r7
 8009d3c:	2237      	movs	r2, #55	@ 0x37
 8009d3e:	0018      	movs	r0, r3
 8009d40:	f001 fb28 	bl	800b394 <sensirion_i2c_add_command_to_buffer>
 8009d44:	0003      	movs	r3, r0
 8009d46:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009d48:	1d3c      	adds	r4, r7, #4
 8009d4a:	1dbb      	adds	r3, r7, #6
 8009d4c:	881a      	ldrh	r2, [r3, #0]
 8009d4e:	003b      	movs	r3, r7
 8009d50:	0019      	movs	r1, r3
 8009d52:	2069      	movs	r0, #105	@ 0x69
 8009d54:	f001 fba2 	bl	800b49c <sensirion_i2c_write_data>
 8009d58:	0003      	movs	r3, r0
 8009d5a:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009d5c:	1d3b      	adds	r3, r7, #4
 8009d5e:	2200      	movs	r2, #0
 8009d60:	5e9b      	ldrsh	r3, [r3, r2]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d003      	beq.n	8009d6e <sen5x_start_measurement_without_pm+0x46>
        return error;
 8009d66:	1d3b      	adds	r3, r7, #4
 8009d68:	2200      	movs	r2, #0
 8009d6a:	5e9b      	ldrsh	r3, [r3, r2]
 8009d6c:	e004      	b.n	8009d78 <sen5x_start_measurement_without_pm+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8009d6e:	4b04      	ldr	r3, [pc, #16]	@ (8009d80 <sen5x_start_measurement_without_pm+0x58>)
 8009d70:	0018      	movs	r0, r3
 8009d72:	f7ff fdc7 	bl	8009904 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	0018      	movs	r0, r3
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	b003      	add	sp, #12
 8009d7e:	bd90      	pop	{r4, r7, pc}
 8009d80:	0000c350 	.word	0x0000c350

08009d84 <sen5x_stop_measurement>:

int16_t sen5x_stop_measurement(void) {
 8009d84:	b590      	push	{r4, r7, lr}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009d8a:	1dbb      	adds	r3, r7, #6
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 8009d90:	1dbc      	adds	r4, r7, #6
 8009d92:	2382      	movs	r3, #130	@ 0x82
 8009d94:	005a      	lsls	r2, r3, #1
 8009d96:	1dbb      	adds	r3, r7, #6
 8009d98:	8819      	ldrh	r1, [r3, #0]
 8009d9a:	003b      	movs	r3, r7
 8009d9c:	0018      	movs	r0, r3
 8009d9e:	f001 faf9 	bl	800b394 <sensirion_i2c_add_command_to_buffer>
 8009da2:	0003      	movs	r3, r0
 8009da4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009da6:	1d3c      	adds	r4, r7, #4
 8009da8:	1dbb      	adds	r3, r7, #6
 8009daa:	881a      	ldrh	r2, [r3, #0]
 8009dac:	003b      	movs	r3, r7
 8009dae:	0019      	movs	r1, r3
 8009db0:	2069      	movs	r0, #105	@ 0x69
 8009db2:	f001 fb73 	bl	800b49c <sensirion_i2c_write_data>
 8009db6:	0003      	movs	r3, r0
 8009db8:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009dba:	1d3b      	adds	r3, r7, #4
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	5e9b      	ldrsh	r3, [r3, r2]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d003      	beq.n	8009dcc <sen5x_stop_measurement+0x48>
        return error;
 8009dc4:	1d3b      	adds	r3, r7, #4
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	5e9b      	ldrsh	r3, [r3, r2]
 8009dca:	e004      	b.n	8009dd6 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009dcc:	4b04      	ldr	r3, [pc, #16]	@ (8009de0 <sen5x_stop_measurement+0x5c>)
 8009dce:	0018      	movs	r0, r3
 8009dd0:	f7ff fd98 	bl	8009904 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	0018      	movs	r0, r3
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	b003      	add	sp, #12
 8009ddc:	bd90      	pop	{r4, r7, pc}
 8009dde:	46c0      	nop			@ (mov r8, r8)
 8009de0:	00030d40 	.word	0x00030d40

08009de4 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 8009de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8009dec:	250e      	movs	r5, #14
 8009dee:	197b      	adds	r3, r7, r5
 8009df0:	2200      	movs	r2, #0
 8009df2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 8009df4:	197c      	adds	r4, r7, r5
 8009df6:	4a22      	ldr	r2, [pc, #136]	@ (8009e80 <sen5x_read_data_ready+0x9c>)
 8009df8:	197b      	adds	r3, r7, r5
 8009dfa:	8819      	ldrh	r1, [r3, #0]
 8009dfc:	2308      	movs	r3, #8
 8009dfe:	18fb      	adds	r3, r7, r3
 8009e00:	0018      	movs	r0, r3
 8009e02:	f001 fac7 	bl	800b394 <sensirion_i2c_add_command_to_buffer>
 8009e06:	0003      	movs	r3, r0
 8009e08:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009e0a:	260c      	movs	r6, #12
 8009e0c:	19bc      	adds	r4, r7, r6
 8009e0e:	197b      	adds	r3, r7, r5
 8009e10:	881a      	ldrh	r2, [r3, #0]
 8009e12:	2308      	movs	r3, #8
 8009e14:	18fb      	adds	r3, r7, r3
 8009e16:	0019      	movs	r1, r3
 8009e18:	2069      	movs	r0, #105	@ 0x69
 8009e1a:	f001 fb3f 	bl	800b49c <sensirion_i2c_write_data>
 8009e1e:	0003      	movs	r3, r0
 8009e20:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e22:	19bb      	adds	r3, r7, r6
 8009e24:	2200      	movs	r2, #0
 8009e26:	5e9b      	ldrsh	r3, [r3, r2]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d003      	beq.n	8009e34 <sen5x_read_data_ready+0x50>
        return error;
 8009e2c:	19bb      	adds	r3, r7, r6
 8009e2e:	2200      	movs	r2, #0
 8009e30:	5e9b      	ldrsh	r3, [r3, r2]
 8009e32:	e020      	b.n	8009e76 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009e34:	4b13      	ldr	r3, [pc, #76]	@ (8009e84 <sen5x_read_data_ready+0xa0>)
 8009e36:	0018      	movs	r0, r3
 8009e38:	f7ff fd64 	bl	8009904 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8009e3c:	250c      	movs	r5, #12
 8009e3e:	197c      	adds	r4, r7, r5
 8009e40:	2308      	movs	r3, #8
 8009e42:	18fb      	adds	r3, r7, r3
 8009e44:	2202      	movs	r2, #2
 8009e46:	0019      	movs	r1, r3
 8009e48:	2069      	movs	r0, #105	@ 0x69
 8009e4a:	f001 fb3f 	bl	800b4cc <sensirion_i2c_read_data_inplace>
 8009e4e:	0003      	movs	r3, r0
 8009e50:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009e52:	197b      	adds	r3, r7, r5
 8009e54:	2200      	movs	r2, #0
 8009e56:	5e9b      	ldrsh	r3, [r3, r2]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d003      	beq.n	8009e64 <sen5x_read_data_ready+0x80>
        return error;
 8009e5c:	197b      	adds	r3, r7, r5
 8009e5e:	2200      	movs	r2, #0
 8009e60:	5e9b      	ldrsh	r3, [r3, r2]
 8009e62:	e008      	b.n	8009e76 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 8009e64:	2308      	movs	r3, #8
 8009e66:	18fb      	adds	r3, r7, r3
 8009e68:	785b      	ldrb	r3, [r3, #1]
 8009e6a:	1e5a      	subs	r2, r3, #1
 8009e6c:	4193      	sbcs	r3, r2
 8009e6e:	b2da      	uxtb	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	0018      	movs	r0, r3
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	b005      	add	sp, #20
 8009e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e7e:	46c0      	nop			@ (mov r8, r8)
 8009e80:	00000202 	.word	0x00000202
 8009e84:	00004e20 	.word	0x00004e20

08009e88 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 8009e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e8a:	b08d      	sub	sp, #52	@ 0x34
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
 8009e94:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 8009e96:	252e      	movs	r5, #46	@ 0x2e
 8009e98:	197b      	adds	r3, r7, r5
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 8009e9e:	197c      	adds	r4, r7, r5
 8009ea0:	23f1      	movs	r3, #241	@ 0xf1
 8009ea2:	009a      	lsls	r2, r3, #2
 8009ea4:	197b      	adds	r3, r7, r5
 8009ea6:	8819      	ldrh	r1, [r3, #0]
 8009ea8:	2314      	movs	r3, #20
 8009eaa:	18fb      	adds	r3, r7, r3
 8009eac:	0018      	movs	r0, r3
 8009eae:	f001 fa71 	bl	800b394 <sensirion_i2c_add_command_to_buffer>
 8009eb2:	0003      	movs	r3, r0
 8009eb4:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009eb6:	262c      	movs	r6, #44	@ 0x2c
 8009eb8:	19bc      	adds	r4, r7, r6
 8009eba:	197b      	adds	r3, r7, r5
 8009ebc:	881a      	ldrh	r2, [r3, #0]
 8009ebe:	2314      	movs	r3, #20
 8009ec0:	18fb      	adds	r3, r7, r3
 8009ec2:	0019      	movs	r1, r3
 8009ec4:	2069      	movs	r0, #105	@ 0x69
 8009ec6:	f001 fae9 	bl	800b49c <sensirion_i2c_write_data>
 8009eca:	0003      	movs	r3, r0
 8009ecc:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009ece:	19bb      	adds	r3, r7, r6
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	5e9b      	ldrsh	r3, [r3, r2]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d003      	beq.n	8009ee0 <sen5x_read_measured_values+0x58>
        return error;
 8009ed8:	19bb      	adds	r3, r7, r6
 8009eda:	2200      	movs	r2, #0
 8009edc:	5e9b      	ldrsh	r3, [r3, r2]
 8009ede:	e060      	b.n	8009fa2 <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009ee0:	4b32      	ldr	r3, [pc, #200]	@ (8009fac <sen5x_read_measured_values+0x124>)
 8009ee2:	0018      	movs	r0, r3
 8009ee4:	f7ff fd0e 	bl	8009904 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 8009ee8:	252c      	movs	r5, #44	@ 0x2c
 8009eea:	197c      	adds	r4, r7, r5
 8009eec:	2314      	movs	r3, #20
 8009eee:	18fb      	adds	r3, r7, r3
 8009ef0:	2210      	movs	r2, #16
 8009ef2:	0019      	movs	r1, r3
 8009ef4:	2069      	movs	r0, #105	@ 0x69
 8009ef6:	f001 fae9 	bl	800b4cc <sensirion_i2c_read_data_inplace>
 8009efa:	0003      	movs	r3, r0
 8009efc:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009efe:	197b      	adds	r3, r7, r5
 8009f00:	2200      	movs	r2, #0
 8009f02:	5e9b      	ldrsh	r3, [r3, r2]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d003      	beq.n	8009f10 <sen5x_read_measured_values+0x88>
        return error;
 8009f08:	197b      	adds	r3, r7, r5
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	5e9b      	ldrsh	r3, [r3, r2]
 8009f0e:	e048      	b.n	8009fa2 <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8009f10:	2414      	movs	r4, #20
 8009f12:	193b      	adds	r3, r7, r4
 8009f14:	0018      	movs	r0, r3
 8009f16:	f000 fa79 	bl	800a40c <sensirion_common_bytes_to_uint16_t>
 8009f1a:	0003      	movs	r3, r0
 8009f1c:	001a      	movs	r2, r3
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8009f22:	193b      	adds	r3, r7, r4
 8009f24:	3302      	adds	r3, #2
 8009f26:	0018      	movs	r0, r3
 8009f28:	f000 fa70 	bl	800a40c <sensirion_common_bytes_to_uint16_t>
 8009f2c:	0003      	movs	r3, r0
 8009f2e:	001a      	movs	r2, r3
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8009f34:	193b      	adds	r3, r7, r4
 8009f36:	3304      	adds	r3, #4
 8009f38:	0018      	movs	r0, r3
 8009f3a:	f000 fa67 	bl	800a40c <sensirion_common_bytes_to_uint16_t>
 8009f3e:	0003      	movs	r3, r0
 8009f40:	001a      	movs	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 8009f46:	193b      	adds	r3, r7, r4
 8009f48:	3306      	adds	r3, #6
 8009f4a:	0018      	movs	r0, r3
 8009f4c:	f000 fa5e 	bl	800a40c <sensirion_common_bytes_to_uint16_t>
 8009f50:	0003      	movs	r3, r0
 8009f52:	001a      	movs	r2, r3
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 8009f58:	193b      	adds	r3, r7, r4
 8009f5a:	3308      	adds	r3, #8
 8009f5c:	0018      	movs	r0, r3
 8009f5e:	f000 fa81 	bl	800a464 <sensirion_common_bytes_to_int16_t>
 8009f62:	0003      	movs	r3, r0
 8009f64:	001a      	movs	r2, r3
 8009f66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f68:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 8009f6a:	193b      	adds	r3, r7, r4
 8009f6c:	330a      	adds	r3, #10
 8009f6e:	0018      	movs	r0, r3
 8009f70:	f000 fa78 	bl	800a464 <sensirion_common_bytes_to_int16_t>
 8009f74:	0003      	movs	r3, r0
 8009f76:	001a      	movs	r2, r3
 8009f78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f7a:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8009f7c:	193b      	adds	r3, r7, r4
 8009f7e:	330c      	adds	r3, #12
 8009f80:	0018      	movs	r0, r3
 8009f82:	f000 fa6f 	bl	800a464 <sensirion_common_bytes_to_int16_t>
 8009f86:	0003      	movs	r3, r0
 8009f88:	001a      	movs	r2, r3
 8009f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f8c:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 8009f8e:	193b      	adds	r3, r7, r4
 8009f90:	330e      	adds	r3, #14
 8009f92:	0018      	movs	r0, r3
 8009f94:	f000 fa66 	bl	800a464 <sensirion_common_bytes_to_int16_t>
 8009f98:	0003      	movs	r3, r0
 8009f9a:	001a      	movs	r2, r3
 8009f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f9e:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	b00d      	add	sp, #52	@ 0x34
 8009fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009faa:	46c0      	nop			@ (mov r8, r8)
 8009fac:	00004e20 	.word	0x00004e20

08009fb0 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 8009fb0:	b590      	push	{r4, r7, lr}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009fb6:	1dbb      	adds	r3, r7, #6
 8009fb8:	2200      	movs	r2, #0
 8009fba:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 8009fbc:	1dbc      	adds	r4, r7, #6
 8009fbe:	4a12      	ldr	r2, [pc, #72]	@ (800a008 <sen5x_start_fan_cleaning+0x58>)
 8009fc0:	1dbb      	adds	r3, r7, #6
 8009fc2:	8819      	ldrh	r1, [r3, #0]
 8009fc4:	003b      	movs	r3, r7
 8009fc6:	0018      	movs	r0, r3
 8009fc8:	f001 f9e4 	bl	800b394 <sensirion_i2c_add_command_to_buffer>
 8009fcc:	0003      	movs	r3, r0
 8009fce:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009fd0:	1d3c      	adds	r4, r7, #4
 8009fd2:	1dbb      	adds	r3, r7, #6
 8009fd4:	881a      	ldrh	r2, [r3, #0]
 8009fd6:	003b      	movs	r3, r7
 8009fd8:	0019      	movs	r1, r3
 8009fda:	2069      	movs	r0, #105	@ 0x69
 8009fdc:	f001 fa5e 	bl	800b49c <sensirion_i2c_write_data>
 8009fe0:	0003      	movs	r3, r0
 8009fe2:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009fe4:	1d3b      	adds	r3, r7, #4
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	5e9b      	ldrsh	r3, [r3, r2]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d003      	beq.n	8009ff6 <sen5x_start_fan_cleaning+0x46>
        return error;
 8009fee:	1d3b      	adds	r3, r7, #4
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	5e9b      	ldrsh	r3, [r3, r2]
 8009ff4:	e004      	b.n	800a000 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8009ff6:	4b05      	ldr	r3, [pc, #20]	@ (800a00c <sen5x_start_fan_cleaning+0x5c>)
 8009ff8:	0018      	movs	r0, r3
 8009ffa:	f7ff fc83 	bl	8009904 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	0018      	movs	r0, r3
 800a002:	46bd      	mov	sp, r7
 800a004:	b003      	add	sp, #12
 800a006:	bd90      	pop	{r4, r7, pc}
 800a008:	00005607 	.word	0x00005607
 800a00c:	00004e20 	.word	0x00004e20

0800a010 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800a010:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a012:	b087      	sub	sp, #28
 800a014:	af00      	add	r7, sp, #0
 800a016:	0004      	movs	r4, r0
 800a018:	0008      	movs	r0, r1
 800a01a:	0011      	movs	r1, r2
 800a01c:	1dbb      	adds	r3, r7, #6
 800a01e:	1c22      	adds	r2, r4, #0
 800a020:	801a      	strh	r2, [r3, #0]
 800a022:	1d3b      	adds	r3, r7, #4
 800a024:	1c02      	adds	r2, r0, #0
 800a026:	801a      	strh	r2, [r3, #0]
 800a028:	1cbb      	adds	r3, r7, #2
 800a02a:	1c0a      	adds	r2, r1, #0
 800a02c:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 800a02e:	2516      	movs	r5, #22
 800a030:	197b      	adds	r3, r7, r5
 800a032:	2200      	movs	r2, #0
 800a034:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800a036:	197c      	adds	r4, r7, r5
 800a038:	4a25      	ldr	r2, [pc, #148]	@ (800a0d0 <sen5x_set_temperature_offset_parameters+0xc0>)
 800a03a:	197b      	adds	r3, r7, r5
 800a03c:	8819      	ldrh	r1, [r3, #0]
 800a03e:	2608      	movs	r6, #8
 800a040:	19bb      	adds	r3, r7, r6
 800a042:	0018      	movs	r0, r3
 800a044:	f001 f9a6 	bl	800b394 <sensirion_i2c_add_command_to_buffer>
 800a048:	0003      	movs	r3, r0
 800a04a:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 800a04c:	197c      	adds	r4, r7, r5
 800a04e:	1dbb      	adds	r3, r7, #6
 800a050:	2200      	movs	r2, #0
 800a052:	5e9a      	ldrsh	r2, [r3, r2]
 800a054:	197b      	adds	r3, r7, r5
 800a056:	8819      	ldrh	r1, [r3, #0]
 800a058:	19bb      	adds	r3, r7, r6
 800a05a:	0018      	movs	r0, r3
 800a05c:	f001 fa05 	bl	800b46a <sensirion_i2c_add_int16_t_to_buffer>
 800a060:	0003      	movs	r3, r0
 800a062:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800a064:	197c      	adds	r4, r7, r5
 800a066:	1d3b      	adds	r3, r7, #4
 800a068:	2200      	movs	r2, #0
 800a06a:	5e9a      	ldrsh	r2, [r3, r2]
 800a06c:	197b      	adds	r3, r7, r5
 800a06e:	8819      	ldrh	r1, [r3, #0]
 800a070:	19bb      	adds	r3, r7, r6
 800a072:	0018      	movs	r0, r3
 800a074:	f001 f9f9 	bl	800b46a <sensirion_i2c_add_int16_t_to_buffer>
 800a078:	0003      	movs	r3, r0
 800a07a:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 800a07c:	197c      	adds	r4, r7, r5
 800a07e:	1cbb      	adds	r3, r7, #2
 800a080:	881a      	ldrh	r2, [r3, #0]
 800a082:	197b      	adds	r3, r7, r5
 800a084:	8819      	ldrh	r1, [r3, #0]
 800a086:	19bb      	adds	r3, r7, r6
 800a088:	0018      	movs	r0, r3
 800a08a:	f001 f9af 	bl	800b3ec <sensirion_i2c_add_uint16_t_to_buffer>
 800a08e:	0003      	movs	r3, r0
 800a090:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a092:	2214      	movs	r2, #20
 800a094:	18bc      	adds	r4, r7, r2
 800a096:	197b      	adds	r3, r7, r5
 800a098:	881a      	ldrh	r2, [r3, #0]
 800a09a:	19bb      	adds	r3, r7, r6
 800a09c:	0019      	movs	r1, r3
 800a09e:	2069      	movs	r0, #105	@ 0x69
 800a0a0:	f001 f9fc 	bl	800b49c <sensirion_i2c_write_data>
 800a0a4:	0003      	movs	r3, r0
 800a0a6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a0a8:	2214      	movs	r2, #20
 800a0aa:	18bb      	adds	r3, r7, r2
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	5e5b      	ldrsh	r3, [r3, r1]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d003      	beq.n	800a0bc <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 800a0b4:	18bb      	adds	r3, r7, r2
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	5e9b      	ldrsh	r3, [r3, r2]
 800a0ba:	e004      	b.n	800a0c6 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800a0bc:	4b05      	ldr	r3, [pc, #20]	@ (800a0d4 <sen5x_set_temperature_offset_parameters+0xc4>)
 800a0be:	0018      	movs	r0, r3
 800a0c0:	f7ff fc20 	bl	8009904 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	0018      	movs	r0, r3
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	b007      	add	sp, #28
 800a0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ce:	46c0      	nop			@ (mov r8, r8)
 800a0d0:	000060b2 	.word	0x000060b2
 800a0d4:	00004e20 	.word	0x00004e20

0800a0d8 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 800a0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0da:	b091      	sub	sp, #68	@ 0x44
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	000a      	movs	r2, r1
 800a0e2:	1cfb      	adds	r3, r7, #3
 800a0e4:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a0e6:	253e      	movs	r5, #62	@ 0x3e
 800a0e8:	197b      	adds	r3, r7, r5
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800a0ee:	197c      	adds	r4, r7, r5
 800a0f0:	4a22      	ldr	r2, [pc, #136]	@ (800a17c <sen5x_get_product_name+0xa4>)
 800a0f2:	197b      	adds	r3, r7, r5
 800a0f4:	8819      	ldrh	r1, [r3, #0]
 800a0f6:	230c      	movs	r3, #12
 800a0f8:	18fb      	adds	r3, r7, r3
 800a0fa:	0018      	movs	r0, r3
 800a0fc:	f001 f94a 	bl	800b394 <sensirion_i2c_add_command_to_buffer>
 800a100:	0003      	movs	r3, r0
 800a102:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a104:	263c      	movs	r6, #60	@ 0x3c
 800a106:	19bc      	adds	r4, r7, r6
 800a108:	197b      	adds	r3, r7, r5
 800a10a:	881a      	ldrh	r2, [r3, #0]
 800a10c:	230c      	movs	r3, #12
 800a10e:	18fb      	adds	r3, r7, r3
 800a110:	0019      	movs	r1, r3
 800a112:	2069      	movs	r0, #105	@ 0x69
 800a114:	f001 f9c2 	bl	800b49c <sensirion_i2c_write_data>
 800a118:	0003      	movs	r3, r0
 800a11a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a11c:	19bb      	adds	r3, r7, r6
 800a11e:	2200      	movs	r2, #0
 800a120:	5e9b      	ldrsh	r3, [r3, r2]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d003      	beq.n	800a12e <sen5x_get_product_name+0x56>
        return error;
 800a126:	19bb      	adds	r3, r7, r6
 800a128:	2200      	movs	r2, #0
 800a12a:	5e9b      	ldrsh	r3, [r3, r2]
 800a12c:	e021      	b.n	800a172 <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a12e:	4b14      	ldr	r3, [pc, #80]	@ (800a180 <sen5x_get_product_name+0xa8>)
 800a130:	0018      	movs	r0, r3
 800a132:	f7ff fbe7 	bl	8009904 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a136:	253c      	movs	r5, #60	@ 0x3c
 800a138:	197c      	adds	r4, r7, r5
 800a13a:	230c      	movs	r3, #12
 800a13c:	18fb      	adds	r3, r7, r3
 800a13e:	2220      	movs	r2, #32
 800a140:	0019      	movs	r1, r3
 800a142:	2069      	movs	r0, #105	@ 0x69
 800a144:	f001 f9c2 	bl	800b4cc <sensirion_i2c_read_data_inplace>
 800a148:	0003      	movs	r3, r0
 800a14a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a14c:	197b      	adds	r3, r7, r5
 800a14e:	2200      	movs	r2, #0
 800a150:	5e9b      	ldrsh	r3, [r3, r2]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d003      	beq.n	800a15e <sen5x_get_product_name+0x86>
        return error;
 800a156:	197b      	adds	r3, r7, r5
 800a158:	2200      	movs	r2, #0
 800a15a:	5e9b      	ldrsh	r3, [r3, r2]
 800a15c:	e009      	b.n	800a172 <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 800a15e:	1cfb      	adds	r3, r7, #3
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	b29a      	uxth	r2, r3
 800a164:	6879      	ldr	r1, [r7, #4]
 800a166:	230c      	movs	r3, #12
 800a168:	18fb      	adds	r3, r7, r3
 800a16a:	0018      	movs	r0, r3
 800a16c:	f000 f988 	bl	800a480 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a170:	2300      	movs	r3, #0
}
 800a172:	0018      	movs	r0, r3
 800a174:	46bd      	mov	sp, r7
 800a176:	b011      	add	sp, #68	@ 0x44
 800a178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a17a:	46c0      	nop			@ (mov r8, r8)
 800a17c:	0000d014 	.word	0x0000d014
 800a180:	0000c350 	.word	0x0000c350

0800a184 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 800a184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a186:	b091      	sub	sp, #68	@ 0x44
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	000a      	movs	r2, r1
 800a18e:	1cfb      	adds	r3, r7, #3
 800a190:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800a192:	253e      	movs	r5, #62	@ 0x3e
 800a194:	197b      	adds	r3, r7, r5
 800a196:	2200      	movs	r2, #0
 800a198:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 800a19a:	197c      	adds	r4, r7, r5
 800a19c:	4a22      	ldr	r2, [pc, #136]	@ (800a228 <sen5x_get_serial_number+0xa4>)
 800a19e:	197b      	adds	r3, r7, r5
 800a1a0:	8819      	ldrh	r1, [r3, #0]
 800a1a2:	230c      	movs	r3, #12
 800a1a4:	18fb      	adds	r3, r7, r3
 800a1a6:	0018      	movs	r0, r3
 800a1a8:	f001 f8f4 	bl	800b394 <sensirion_i2c_add_command_to_buffer>
 800a1ac:	0003      	movs	r3, r0
 800a1ae:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a1b0:	263c      	movs	r6, #60	@ 0x3c
 800a1b2:	19bc      	adds	r4, r7, r6
 800a1b4:	197b      	adds	r3, r7, r5
 800a1b6:	881a      	ldrh	r2, [r3, #0]
 800a1b8:	230c      	movs	r3, #12
 800a1ba:	18fb      	adds	r3, r7, r3
 800a1bc:	0019      	movs	r1, r3
 800a1be:	2069      	movs	r0, #105	@ 0x69
 800a1c0:	f001 f96c 	bl	800b49c <sensirion_i2c_write_data>
 800a1c4:	0003      	movs	r3, r0
 800a1c6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a1c8:	19bb      	adds	r3, r7, r6
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	5e9b      	ldrsh	r3, [r3, r2]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d003      	beq.n	800a1da <sen5x_get_serial_number+0x56>
        return error;
 800a1d2:	19bb      	adds	r3, r7, r6
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	5e9b      	ldrsh	r3, [r3, r2]
 800a1d8:	e021      	b.n	800a21e <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 800a1da:	4b14      	ldr	r3, [pc, #80]	@ (800a22c <sen5x_get_serial_number+0xa8>)
 800a1dc:	0018      	movs	r0, r3
 800a1de:	f7ff fb91 	bl	8009904 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800a1e2:	253c      	movs	r5, #60	@ 0x3c
 800a1e4:	197c      	adds	r4, r7, r5
 800a1e6:	230c      	movs	r3, #12
 800a1e8:	18fb      	adds	r3, r7, r3
 800a1ea:	2220      	movs	r2, #32
 800a1ec:	0019      	movs	r1, r3
 800a1ee:	2069      	movs	r0, #105	@ 0x69
 800a1f0:	f001 f96c 	bl	800b4cc <sensirion_i2c_read_data_inplace>
 800a1f4:	0003      	movs	r3, r0
 800a1f6:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a1f8:	197b      	adds	r3, r7, r5
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	5e9b      	ldrsh	r3, [r3, r2]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d003      	beq.n	800a20a <sen5x_get_serial_number+0x86>
        return error;
 800a202:	197b      	adds	r3, r7, r5
 800a204:	2200      	movs	r2, #0
 800a206:	5e9b      	ldrsh	r3, [r3, r2]
 800a208:	e009      	b.n	800a21e <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 800a20a:	1cfb      	adds	r3, r7, #3
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	b29a      	uxth	r2, r3
 800a210:	6879      	ldr	r1, [r7, #4]
 800a212:	230c      	movs	r3, #12
 800a214:	18fb      	adds	r3, r7, r3
 800a216:	0018      	movs	r0, r3
 800a218:	f000 f932 	bl	800a480 <sensirion_common_copy_bytes>
    return NO_ERROR;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	0018      	movs	r0, r3
 800a220:	46bd      	mov	sp, r7
 800a222:	b011      	add	sp, #68	@ 0x44
 800a224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a226:	46c0      	nop			@ (mov r8, r8)
 800a228:	0000d033 	.word	0x0000d033
 800a22c:	0000c350 	.word	0x0000c350

0800a230 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 800a230:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a232:	b089      	sub	sp, #36	@ 0x24
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
 800a23c:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 800a23e:	251e      	movs	r5, #30
 800a240:	197b      	adds	r3, r7, r5
 800a242:	2200      	movs	r2, #0
 800a244:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800a246:	197c      	adds	r4, r7, r5
 800a248:	23d1      	movs	r3, #209	@ 0xd1
 800a24a:	021a      	lsls	r2, r3, #8
 800a24c:	197b      	adds	r3, r7, r5
 800a24e:	8819      	ldrh	r1, [r3, #0]
 800a250:	2310      	movs	r3, #16
 800a252:	18fb      	adds	r3, r7, r3
 800a254:	0018      	movs	r0, r3
 800a256:	f001 f89d 	bl	800b394 <sensirion_i2c_add_command_to_buffer>
 800a25a:	0003      	movs	r3, r0
 800a25c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a25e:	261c      	movs	r6, #28
 800a260:	19bc      	adds	r4, r7, r6
 800a262:	197b      	adds	r3, r7, r5
 800a264:	881a      	ldrh	r2, [r3, #0]
 800a266:	2310      	movs	r3, #16
 800a268:	18fb      	adds	r3, r7, r3
 800a26a:	0019      	movs	r1, r3
 800a26c:	2069      	movs	r0, #105	@ 0x69
 800a26e:	f001 f915 	bl	800b49c <sensirion_i2c_write_data>
 800a272:	0003      	movs	r3, r0
 800a274:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a276:	19bb      	adds	r3, r7, r6
 800a278:	2200      	movs	r2, #0
 800a27a:	5e9b      	ldrsh	r3, [r3, r2]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d003      	beq.n	800a288 <sen5x_get_version+0x58>
        return error;
 800a280:	19bb      	adds	r3, r7, r6
 800a282:	2200      	movs	r2, #0
 800a284:	5e9b      	ldrsh	r3, [r3, r2]
 800a286:	e038      	b.n	800a2fa <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a288:	4b1e      	ldr	r3, [pc, #120]	@ (800a304 <sen5x_get_version+0xd4>)
 800a28a:	0018      	movs	r0, r3
 800a28c:	f7ff fb3a 	bl	8009904 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800a290:	251c      	movs	r5, #28
 800a292:	197c      	adds	r4, r7, r5
 800a294:	2310      	movs	r3, #16
 800a296:	18fb      	adds	r3, r7, r3
 800a298:	2208      	movs	r2, #8
 800a29a:	0019      	movs	r1, r3
 800a29c:	2069      	movs	r0, #105	@ 0x69
 800a29e:	f001 f915 	bl	800b4cc <sensirion_i2c_read_data_inplace>
 800a2a2:	0003      	movs	r3, r0
 800a2a4:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a2a6:	197b      	adds	r3, r7, r5
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	5e9b      	ldrsh	r3, [r3, r2]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d003      	beq.n	800a2b8 <sen5x_get_version+0x88>
        return error;
 800a2b0:	197b      	adds	r3, r7, r5
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	5e9b      	ldrsh	r3, [r3, r2]
 800a2b6:	e020      	b.n	800a2fa <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 800a2b8:	2110      	movs	r1, #16
 800a2ba:	187b      	adds	r3, r7, r1
 800a2bc:	781a      	ldrb	r2, [r3, #0]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800a2c2:	187b      	adds	r3, r7, r1
 800a2c4:	785a      	ldrb	r2, [r3, #1]
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 800a2ca:	187b      	adds	r3, r7, r1
 800a2cc:	789b      	ldrb	r3, [r3, #2]
 800a2ce:	1e5a      	subs	r2, r3, #1
 800a2d0:	4193      	sbcs	r3, r2
 800a2d2:	b2da      	uxtb	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 800a2d8:	187b      	adds	r3, r7, r1
 800a2da:	78da      	ldrb	r2, [r3, #3]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800a2e0:	187b      	adds	r3, r7, r1
 800a2e2:	791a      	ldrb	r2, [r3, #4]
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e6:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 800a2e8:	187b      	adds	r3, r7, r1
 800a2ea:	795a      	ldrb	r2, [r3, #5]
 800a2ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ee:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800a2f0:	187b      	adds	r3, r7, r1
 800a2f2:	799a      	ldrb	r2, [r3, #6]
 800a2f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2f6:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	0018      	movs	r0, r3
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	b009      	add	sp, #36	@ 0x24
 800a300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a302:	46c0      	nop			@ (mov r8, r8)
 800a304:	00004e20 	.word	0x00004e20

0800a308 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 800a308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a30a:	b087      	sub	sp, #28
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800a310:	2516      	movs	r5, #22
 800a312:	197b      	adds	r3, r7, r5
 800a314:	2200      	movs	r2, #0
 800a316:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 800a318:	197c      	adds	r4, r7, r5
 800a31a:	4a22      	ldr	r2, [pc, #136]	@ (800a3a4 <sen5x_read_device_status+0x9c>)
 800a31c:	197b      	adds	r3, r7, r5
 800a31e:	8819      	ldrh	r1, [r3, #0]
 800a320:	230c      	movs	r3, #12
 800a322:	18fb      	adds	r3, r7, r3
 800a324:	0018      	movs	r0, r3
 800a326:	f001 f835 	bl	800b394 <sensirion_i2c_add_command_to_buffer>
 800a32a:	0003      	movs	r3, r0
 800a32c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a32e:	2614      	movs	r6, #20
 800a330:	19bc      	adds	r4, r7, r6
 800a332:	197b      	adds	r3, r7, r5
 800a334:	881a      	ldrh	r2, [r3, #0]
 800a336:	230c      	movs	r3, #12
 800a338:	18fb      	adds	r3, r7, r3
 800a33a:	0019      	movs	r1, r3
 800a33c:	2069      	movs	r0, #105	@ 0x69
 800a33e:	f001 f8ad 	bl	800b49c <sensirion_i2c_write_data>
 800a342:	0003      	movs	r3, r0
 800a344:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a346:	19bb      	adds	r3, r7, r6
 800a348:	2200      	movs	r2, #0
 800a34a:	5e9b      	ldrsh	r3, [r3, r2]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d003      	beq.n	800a358 <sen5x_read_device_status+0x50>
        return error;
 800a350:	19bb      	adds	r3, r7, r6
 800a352:	2200      	movs	r2, #0
 800a354:	5e9b      	ldrsh	r3, [r3, r2]
 800a356:	e020      	b.n	800a39a <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800a358:	4b13      	ldr	r3, [pc, #76]	@ (800a3a8 <sen5x_read_device_status+0xa0>)
 800a35a:	0018      	movs	r0, r3
 800a35c:	f7ff fad2 	bl	8009904 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 800a360:	2514      	movs	r5, #20
 800a362:	197c      	adds	r4, r7, r5
 800a364:	230c      	movs	r3, #12
 800a366:	18fb      	adds	r3, r7, r3
 800a368:	2204      	movs	r2, #4
 800a36a:	0019      	movs	r1, r3
 800a36c:	2069      	movs	r0, #105	@ 0x69
 800a36e:	f001 f8ad 	bl	800b4cc <sensirion_i2c_read_data_inplace>
 800a372:	0003      	movs	r3, r0
 800a374:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a376:	197b      	adds	r3, r7, r5
 800a378:	2200      	movs	r2, #0
 800a37a:	5e9b      	ldrsh	r3, [r3, r2]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d003      	beq.n	800a388 <sen5x_read_device_status+0x80>
        return error;
 800a380:	197b      	adds	r3, r7, r5
 800a382:	2200      	movs	r2, #0
 800a384:	5e9b      	ldrsh	r3, [r3, r2]
 800a386:	e008      	b.n	800a39a <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 800a388:	230c      	movs	r3, #12
 800a38a:	18fb      	adds	r3, r7, r3
 800a38c:	0018      	movs	r0, r3
 800a38e:	f000 f850 	bl	800a432 <sensirion_common_bytes_to_uint32_t>
 800a392:	0002      	movs	r2, r0
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	0018      	movs	r0, r3
 800a39c:	46bd      	mov	sp, r7
 800a39e:	b007      	add	sp, #28
 800a3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3a2:	46c0      	nop			@ (mov r8, r8)
 800a3a4:	0000d206 	.word	0x0000d206
 800a3a8:	00004e20 	.word	0x00004e20

0800a3ac <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 800a3ac:	b590      	push	{r4, r7, lr}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800a3b2:	1dbb      	adds	r3, r7, #6
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 800a3b8:	1dbc      	adds	r4, r7, #6
 800a3ba:	4a12      	ldr	r2, [pc, #72]	@ (800a404 <sen5x_device_reset+0x58>)
 800a3bc:	1dbb      	adds	r3, r7, #6
 800a3be:	8819      	ldrh	r1, [r3, #0]
 800a3c0:	003b      	movs	r3, r7
 800a3c2:	0018      	movs	r0, r3
 800a3c4:	f000 ffe6 	bl	800b394 <sensirion_i2c_add_command_to_buffer>
 800a3c8:	0003      	movs	r3, r0
 800a3ca:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800a3cc:	1d3c      	adds	r4, r7, #4
 800a3ce:	1dbb      	adds	r3, r7, #6
 800a3d0:	881a      	ldrh	r2, [r3, #0]
 800a3d2:	003b      	movs	r3, r7
 800a3d4:	0019      	movs	r1, r3
 800a3d6:	2069      	movs	r0, #105	@ 0x69
 800a3d8:	f001 f860 	bl	800b49c <sensirion_i2c_write_data>
 800a3dc:	0003      	movs	r3, r0
 800a3de:	8023      	strh	r3, [r4, #0]
    if (error) {
 800a3e0:	1d3b      	adds	r3, r7, #4
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	5e9b      	ldrsh	r3, [r3, r2]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d003      	beq.n	800a3f2 <sen5x_device_reset+0x46>
        return error;
 800a3ea:	1d3b      	adds	r3, r7, #4
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	5e9b      	ldrsh	r3, [r3, r2]
 800a3f0:	e004      	b.n	800a3fc <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800a3f2:	4b05      	ldr	r3, [pc, #20]	@ (800a408 <sen5x_device_reset+0x5c>)
 800a3f4:	0018      	movs	r0, r3
 800a3f6:	f7ff fa85 	bl	8009904 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	0018      	movs	r0, r3
 800a3fe:	46bd      	mov	sp, r7
 800a400:	b003      	add	sp, #12
 800a402:	bd90      	pop	{r4, r7, pc}
 800a404:	0000d304 	.word	0x0000d304
 800a408:	00030d40 	.word	0x00030d40

0800a40c <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	021b      	lsls	r3, r3, #8
 800a41a:	b21a      	sxth	r2, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	3301      	adds	r3, #1
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	b21b      	sxth	r3, r3
 800a424:	4313      	orrs	r3, r2
 800a426:	b21b      	sxth	r3, r3
 800a428:	b29b      	uxth	r3, r3
}
 800a42a:	0018      	movs	r0, r3
 800a42c:	46bd      	mov	sp, r7
 800a42e:	b002      	add	sp, #8
 800a430:	bd80      	pop	{r7, pc}

0800a432 <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800a432:	b580      	push	{r7, lr}
 800a434:	b082      	sub	sp, #8
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	061a      	lsls	r2, r3, #24
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	3301      	adds	r3, #1
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	041b      	lsls	r3, r3, #16
 800a448:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	3302      	adds	r3, #2
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800a452:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	3203      	adds	r2, #3
 800a458:	7812      	ldrb	r2, [r2, #0]
 800a45a:	4313      	orrs	r3, r2
}
 800a45c:	0018      	movs	r0, r3
 800a45e:	46bd      	mov	sp, r7
 800a460:	b002      	add	sp, #8
 800a462:	bd80      	pop	{r7, pc}

0800a464 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	0018      	movs	r0, r3
 800a470:	f7ff ffcc 	bl	800a40c <sensirion_common_bytes_to_uint16_t>
 800a474:	0003      	movs	r3, r0
 800a476:	b21b      	sxth	r3, r3
}
 800a478:	0018      	movs	r0, r3
 800a47a:	46bd      	mov	sp, r7
 800a47c:	b002      	add	sp, #8
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	1dbb      	adds	r3, r7, #6
 800a48c:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 800a48e:	2316      	movs	r3, #22
 800a490:	18fb      	adds	r3, r7, r3
 800a492:	2200      	movs	r2, #0
 800a494:	801a      	strh	r2, [r3, #0]
 800a496:	e00f      	b.n	800a4b8 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 800a498:	2016      	movs	r0, #22
 800a49a:	183b      	adds	r3, r7, r0
 800a49c:	881b      	ldrh	r3, [r3, #0]
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	18d2      	adds	r2, r2, r3
 800a4a2:	183b      	adds	r3, r7, r0
 800a4a4:	881b      	ldrh	r3, [r3, #0]
 800a4a6:	68b9      	ldr	r1, [r7, #8]
 800a4a8:	18cb      	adds	r3, r1, r3
 800a4aa:	7812      	ldrb	r2, [r2, #0]
 800a4ac:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 800a4ae:	183b      	adds	r3, r7, r0
 800a4b0:	881a      	ldrh	r2, [r3, #0]
 800a4b2:	183b      	adds	r3, r7, r0
 800a4b4:	3201      	adds	r2, #1
 800a4b6:	801a      	strh	r2, [r3, #0]
 800a4b8:	2316      	movs	r3, #22
 800a4ba:	18fa      	adds	r2, r7, r3
 800a4bc:	1dbb      	adds	r3, r7, #6
 800a4be:	8812      	ldrh	r2, [r2, #0]
 800a4c0:	881b      	ldrh	r3, [r3, #0]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d3e8      	bcc.n	800a498 <sensirion_common_copy_bytes+0x18>
    }
}
 800a4c6:	46c0      	nop			@ (mov r8, r8)
 800a4c8:	46c0      	nop			@ (mov r8, r8)
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	b006      	add	sp, #24
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d113      	bne.n	800a516 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	22fe      	movs	r2, #254	@ 0xfe
 800a4f2:	0592      	lsls	r2, r2, #22
 800a4f4:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	4a1a      	ldr	r2, [pc, #104]	@ (800a564 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800a4fa:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	4a1a      	ldr	r2, [pc, #104]	@ (800a568 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800a500:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	4a19      	ldr	r2, [pc, #100]	@ (800a56c <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800a506:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	4a19      	ldr	r2, [pc, #100]	@ (800a570 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 800a50c:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	4a18      	ldr	r2, [pc, #96]	@ (800a574 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800a512:	61da      	str	r2, [r3, #28]
 800a514:	e011      	b.n	800a53a <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	4a17      	ldr	r2, [pc, #92]	@ (800a578 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 800a51a:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4a17      	ldr	r2, [pc, #92]	@ (800a57c <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800a520:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	4a16      	ldr	r2, [pc, #88]	@ (800a580 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800a526:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	4a16      	ldr	r2, [pc, #88]	@ (800a584 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 800a52c:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	4a15      	ldr	r2, [pc, #84]	@ (800a588 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800a532:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	4a15      	ldr	r2, [pc, #84]	@ (800a58c <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 800a538:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	4a14      	ldr	r2, [pc, #80]	@ (800a590 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800a53e:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	4a14      	ldr	r2, [pc, #80]	@ (800a594 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a544:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	4a12      	ldr	r2, [pc, #72]	@ (800a594 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800a54a:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	4a12      	ldr	r2, [pc, #72]	@ (800a598 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800a550:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	0018      	movs	r0, r3
 800a556:	f000 f833 	bl	800a5c0 <GasIndexAlgorithm_reset>
}
 800a55a:	46c0      	nop			@ (mov r8, r8)
 800a55c:	46bd      	mov	sp, r7
 800a55e:	b004      	add	sp, #16
 800a560:	bd80      	pop	{r7, pc}
 800a562:	46c0      	nop			@ (mov r8, r8)
 800a564:	00002710 	.word	0x00002710
 800a568:	44340000 	.word	0x44340000
 800a56c:	46859800 	.word	0x46859800
 800a570:	46a05000 	.word	0x46a05000
 800a574:	41f00000 	.word	0x41f00000
 800a578:	42c80000 	.word	0x42c80000
 800a57c:	00004e20 	.word	0x00004e20
 800a580:	43340000 	.word	0x43340000
 800a584:	4528c000 	.word	0x4528c000
 800a588:	45a32000 	.word	0x45a32000
 800a58c:	43aa0000 	.word	0x43aa0000
 800a590:	43660000 	.word	0x43660000
 800a594:	41400000 	.word	0x41400000
 800a598:	42480000 	.word	0x42480000

0800a59c <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800a5a6:	4a05      	ldr	r2, [pc, #20]	@ (800a5bc <GasIndexAlgorithm_init+0x20>)
 800a5a8:	6839      	ldr	r1, [r7, #0]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	0018      	movs	r0, r3
 800a5ae:	f7ff ff8f 	bl	800a4d0 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800a5b2:	46c0      	nop			@ (mov r8, r8)
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	b002      	add	sp, #8
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	46c0      	nop			@ (mov r8, r8)
 800a5bc:	44610000 	.word	0x44610000

0800a5c0 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	0018      	movs	r0, r3
 800a5de:	f000 f805 	bl	800a5ec <GasIndexAlgorithm__init_instances>
}
 800a5e2:	46c0      	nop			@ (mov r8, r8)
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	b002      	add	sp, #8
 800a5e8:	bd80      	pop	{r7, pc}
	...

0800a5ec <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800a5ec:	b590      	push	{r4, r7, lr}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	0018      	movs	r0, r3
 800a5f8:	f000 f8e8 	bl	800a7cc <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	0018      	movs	r0, r3
 800a600:	f000 f9a6 	bl	800a950 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a604:	1c04      	adds	r4, r0, #0
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	0018      	movs	r0, r3
 800a60a:	f000 f9ab 	bl	800a964 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a60e:	1c02      	adds	r2, r0, #0
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	1c21      	adds	r1, r4, #0
 800a614:	0018      	movs	r0, r3
 800a616:	f000 fc3b 	bl	800ae90 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d107      	bne.n	800a632 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a622:	23fe      	movs	r3, #254	@ 0xfe
 800a624:	059b      	lsls	r3, r3, #22
 800a626:	4a0a      	ldr	r2, [pc, #40]	@ (800a650 <GasIndexAlgorithm__init_instances+0x64>)
 800a628:	490a      	ldr	r1, [pc, #40]	@ (800a654 <GasIndexAlgorithm__init_instances+0x68>)
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 fc86 	bl	800af3c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 800a630:	e005      	b.n	800a63e <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800a632:	4b09      	ldr	r3, [pc, #36]	@ (800a658 <GasIndexAlgorithm__init_instances+0x6c>)
 800a634:	4a09      	ldr	r2, [pc, #36]	@ (800a65c <GasIndexAlgorithm__init_instances+0x70>)
 800a636:	490a      	ldr	r1, [pc, #40]	@ (800a660 <GasIndexAlgorithm__init_instances+0x74>)
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 fc7f 	bl	800af3c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	0018      	movs	r0, r3
 800a642:	f000 fd35 	bl	800b0b0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800a646:	46c0      	nop			@ (mov r8, r8)
 800a648:	46bd      	mov	sp, r7
 800a64a:	b003      	add	sp, #12
 800a64c:	bd90      	pop	{r4, r7, pc}
 800a64e:	46c0      	nop			@ (mov r8, r8)
 800a650:	bc257a78 	.word	0xbc257a78
 800a654:	44198000 	.word	0x44198000
 800a658:	42c80000 	.word	0x42c80000
 800a65c:	bbd4fdf4 	.word	0xbbd4fdf4
 800a660:	43550000 	.word	0x43550000

0800a664 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800a664:	b590      	push	{r4, r7, lr}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a674:	4952      	ldr	r1, [pc, #328]	@ (800a7c0 <GasIndexAlgorithm_process+0x15c>)
 800a676:	1c18      	adds	r0, r3, #0
 800a678:	f7f5 ff64 	bl	8000544 <__aeabi_fcmple>
 800a67c:	1e03      	subs	r3, r0, #0
 800a67e:	d00c      	beq.n	800a69a <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	1c19      	adds	r1, r3, #0
 800a68a:	1c10      	adds	r0, r2, #0
 800a68c:	f7f6 f918 	bl	80008c0 <__aeabi_fadd>
 800a690:	1c03      	adds	r3, r0, #0
 800a692:	1c1a      	adds	r2, r3, #0
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	631a      	str	r2, [r3, #48]	@ 0x30
 800a698:	e080      	b.n	800a79c <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	dd25      	ble.n	800a6ec <GasIndexAlgorithm_process+0x88>
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	4a48      	ldr	r2, [pc, #288]	@ (800a7c4 <GasIndexAlgorithm_process+0x160>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	dc21      	bgt.n	800a6ec <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	68ba      	ldr	r2, [r7, #8]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	dc04      	bgt.n	800a6bc <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	60bb      	str	r3, [r7, #8]
 800a6ba:	e00d      	b.n	800a6d8 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	4a41      	ldr	r2, [pc, #260]	@ (800a7c8 <GasIndexAlgorithm_process+0x164>)
 800a6c2:	4694      	mov	ip, r2
 800a6c4:	4463      	add	r3, ip
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	dd05      	ble.n	800a6d8 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	4a3d      	ldr	r2, [pc, #244]	@ (800a7c8 <GasIndexAlgorithm_process+0x164>)
 800a6d2:	4694      	mov	ip, r2
 800a6d4:	4463      	add	r3, ip
 800a6d6:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	1ad3      	subs	r3, r2, r3
 800a6e0:	0018      	movs	r0, r3
 800a6e2:	f7f6 ff75 	bl	80015d0 <__aeabi_i2f>
 800a6e6:	1c02      	adds	r2, r0, #0
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d005      	beq.n	800a700 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	0018      	movs	r0, r3
 800a6f8:	f000 f945 	bl	800a986 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800a6fc:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800a6fe:	d014      	beq.n	800a72a <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	1c11      	adds	r1, r2, #0
 800a708:	0018      	movs	r0, r3
 800a70a:	f000 fbd1 	bl	800aeb0 <GasIndexAlgorithm__mox_model__process>
 800a70e:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	1c11      	adds	r1, r2, #0
 800a71c:	0018      	movs	r0, r3
 800a71e:	f000 fc25 	bl	800af6c <GasIndexAlgorithm__sigmoid_scaled__process>
 800a722:	1c02      	adds	r2, r0, #0
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	639a      	str	r2, [r3, #56]	@ 0x38
 800a728:	e003      	b.n	800a732 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	689a      	ldr	r2, [r3, #8]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	1c11      	adds	r1, r2, #0
 800a73a:	0018      	movs	r0, r3
 800a73c:	f000 fcec 	bl	800b118 <GasIndexAlgorithm__adaptive_lowpass__process>
 800a740:	1c02      	adds	r2, r0, #0
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a74a:	21fc      	movs	r1, #252	@ 0xfc
 800a74c:	0589      	lsls	r1, r1, #22
 800a74e:	1c18      	adds	r0, r3, #0
 800a750:	f7f5 feee 	bl	8000530 <__aeabi_fcmplt>
 800a754:	1e03      	subs	r3, r0, #0
 800a756:	d003      	beq.n	800a760 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	22fc      	movs	r2, #252	@ 0xfc
 800a75c:	0592      	lsls	r2, r2, #22
 800a75e:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a764:	2100      	movs	r1, #0
 800a766:	1c18      	adds	r0, r3, #0
 800a768:	f7f5 fef6 	bl	8000558 <__aeabi_fcmpgt>
 800a76c:	1e03      	subs	r3, r0, #0
 800a76e:	d015      	beq.n	800a79c <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	1c11      	adds	r1, r2, #0
 800a778:	0018      	movs	r0, r3
 800a77a:	f000 fa4f 	bl	800ac1c <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	0018      	movs	r0, r3
 800a782:	f000 f8e5 	bl	800a950 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800a786:	1c04      	adds	r4, r0, #0
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	0018      	movs	r0, r3
 800a78c:	f000 f8ea 	bl	800a964 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800a790:	1c02      	adds	r2, r0, #0
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	1c21      	adds	r1, r4, #0
 800a796:	0018      	movs	r0, r3
 800a798:	f000 fb7a 	bl	800ae90 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a0:	21fc      	movs	r1, #252	@ 0xfc
 800a7a2:	0589      	lsls	r1, r1, #22
 800a7a4:	1c18      	adds	r0, r3, #0
 800a7a6:	f7f6 f88b 	bl	80008c0 <__aeabi_fadd>
 800a7aa:	1c03      	adds	r3, r0, #0
 800a7ac:	1c18      	adds	r0, r3, #0
 800a7ae:	f7f6 feef 	bl	8001590 <__aeabi_f2iz>
 800a7b2:	0002      	movs	r2, r0
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	601a      	str	r2, [r3, #0]
    return;
 800a7b8:	46c0      	nop			@ (mov r8, r8)
}
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	b005      	add	sp, #20
 800a7be:	bd90      	pop	{r4, r7, pc}
 800a7c0:	42340000 	.word	0x42340000
 800a7c4:	0000fde7 	.word	0x0000fde7
 800a7c8:	00007fff 	.word	0x00007fff

0800a7cc <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a7cc:	b5b0      	push	{r4, r5, r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	223c      	movs	r2, #60	@ 0x3c
 800a7d8:	2100      	movs	r1, #0
 800a7da:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	4952      	ldr	r1, [pc, #328]	@ (800a940 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a7f6:	1c18      	adds	r0, r3, #0
 800a7f8:	f7f6 f9ec 	bl	8000bd4 <__aeabi_fdiv>
 800a7fc:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a7fe:	2188      	movs	r1, #136	@ 0x88
 800a800:	05c9      	lsls	r1, r1, #23
 800a802:	1c18      	adds	r0, r3, #0
 800a804:	f7f6 fbcc 	bl	8000fa0 <__aeabi_fmul>
 800a808:	1c03      	adds	r3, r0, #0
 800a80a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	494a      	ldr	r1, [pc, #296]	@ (800a940 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a816:	1c18      	adds	r0, r3, #0
 800a818:	f7f6 f9dc 	bl	8000bd4 <__aeabi_fdiv>
 800a81c:	1c03      	adds	r3, r0, #0
 800a81e:	1c19      	adds	r1, r3, #0
 800a820:	1c20      	adds	r0, r4, #0
 800a822:	f7f6 f84d 	bl	80008c0 <__aeabi_fadd>
 800a826:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a828:	1c19      	adds	r1, r3, #0
 800a82a:	1c28      	adds	r0, r5, #0
 800a82c:	f7f6 f9d2 	bl	8000bd4 <__aeabi_fdiv>
 800a830:	1c03      	adds	r3, r0, #0
 800a832:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	4940      	ldr	r1, [pc, #256]	@ (800a940 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a83e:	1c18      	adds	r0, r3, #0
 800a840:	f7f6 f9c8 	bl	8000bd4 <__aeabi_fdiv>
 800a844:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a846:	2185      	movs	r1, #133	@ 0x85
 800a848:	05c9      	lsls	r1, r1, #23
 800a84a:	1c18      	adds	r0, r3, #0
 800a84c:	f7f6 fba8 	bl	8000fa0 <__aeabi_fmul>
 800a850:	1c03      	adds	r3, r0, #0
 800a852:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	4938      	ldr	r1, [pc, #224]	@ (800a940 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800a85e:	1c18      	adds	r0, r3, #0
 800a860:	f7f6 f9b8 	bl	8000bd4 <__aeabi_fdiv>
 800a864:	1c03      	adds	r3, r0, #0
 800a866:	1c19      	adds	r1, r3, #0
 800a868:	1c20      	adds	r0, r4, #0
 800a86a:	f7f6 f829 	bl	80008c0 <__aeabi_fadd>
 800a86e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800a870:	1c19      	adds	r1, r3, #0
 800a872:	1c28      	adds	r0, r5, #0
 800a874:	f7f6 f9ae 	bl	8000bd4 <__aeabi_fdiv>
 800a878:	1c03      	adds	r3, r0, #0
 800a87a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d118      	bne.n	800a8ba <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a88c:	2188      	movs	r1, #136	@ 0x88
 800a88e:	05c9      	lsls	r1, r1, #23
 800a890:	1c18      	adds	r0, r3, #0
 800a892:	f7f6 fb85 	bl	8000fa0 <__aeabi_fmul>
 800a896:	1c03      	adds	r3, r0, #0
 800a898:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800a89e:	4929      	ldr	r1, [pc, #164]	@ (800a944 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800a8a0:	1c18      	adds	r0, r3, #0
 800a8a2:	f7f6 f80d 	bl	80008c0 <__aeabi_fadd>
 800a8a6:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a8a8:	1c19      	adds	r1, r3, #0
 800a8aa:	1c20      	adds	r0, r4, #0
 800a8ac:	f7f6 f992 	bl	8000bd4 <__aeabi_fdiv>
 800a8b0:	1c03      	adds	r3, r0, #0
 800a8b2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	655a      	str	r2, [r3, #84]	@ 0x54
 800a8b8:	e017      	b.n	800a8ea <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800a8be:	2188      	movs	r1, #136	@ 0x88
 800a8c0:	05c9      	lsls	r1, r1, #23
 800a8c2:	1c18      	adds	r0, r3, #0
 800a8c4:	f7f6 fb6c 	bl	8000fa0 <__aeabi_fmul>
 800a8c8:	1c03      	adds	r3, r0, #0
 800a8ca:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800a8d0:	491d      	ldr	r1, [pc, #116]	@ (800a948 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800a8d2:	1c18      	adds	r0, r3, #0
 800a8d4:	f7f5 fff4 	bl	80008c0 <__aeabi_fadd>
 800a8d8:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800a8da:	1c19      	adds	r1, r3, #0
 800a8dc:	1c20      	adds	r0, r4, #0
 800a8de:	f7f6 f979 	bl	8000bd4 <__aeabi_fdiv>
 800a8e2:	1c03      	adds	r3, r0, #0
 800a8e4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a8ee:	2185      	movs	r1, #133	@ 0x85
 800a8f0:	05c9      	lsls	r1, r1, #23
 800a8f2:	1c18      	adds	r0, r3, #0
 800a8f4:	f7f6 fb54 	bl	8000fa0 <__aeabi_fmul>
 800a8f8:	1c03      	adds	r3, r0, #0
 800a8fa:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	4912      	ldr	r1, [pc, #72]	@ (800a94c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800a902:	1c18      	adds	r0, r3, #0
 800a904:	f7f5 ffdc 	bl	80008c0 <__aeabi_fadd>
 800a908:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800a90a:	1c19      	adds	r1, r3, #0
 800a90c:	1c20      	adds	r0, r4, #0
 800a90e:	f7f6 f961 	bl	8000bd4 <__aeabi_fdiv>
 800a912:	1c03      	adds	r3, r0, #0
 800a914:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800a938:	46c0      	nop			@ (mov r8, r8)
 800a93a:	46bd      	mov	sp, r7
 800a93c:	b002      	add	sp, #8
 800a93e:	bdb0      	pop	{r4, r5, r7, pc}
 800a940:	45610000 	.word	0x45610000
 800a944:	44960000 	.word	0x44960000
 800a948:	41a00000 	.word	0x41a00000
 800a94c:	451c4000 	.word	0x451c4000

0800a950 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 800a95c:	1c18      	adds	r0, r3, #0
 800a95e:	46bd      	mov	sp, r7
 800a960:	b002      	add	sp, #8
 800a962:	bd80      	pop	{r7, pc}

0800a964 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800a974:	1c19      	adds	r1, r3, #0
 800a976:	1c10      	adds	r0, r2, #0
 800a978:	f7f5 ffa2 	bl	80008c0 <__aeabi_fadd>
 800a97c:	1c03      	adds	r3, r0, #0
}
 800a97e:	1c18      	adds	r0, r3, #0
 800a980:	46bd      	mov	sp, r7
 800a982:	b002      	add	sp, #8
 800a984:	bd80      	pop	{r7, pc}

0800a986 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800a986:	b580      	push	{r7, lr}
 800a988:	b082      	sub	sp, #8
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	223c      	movs	r2, #60	@ 0x3c
 800a992:	5c9b      	ldrb	r3, [r3, r2]
}
 800a994:	0018      	movs	r0, r3
 800a996:	46bd      	mov	sp, r7
 800a998:	b002      	add	sp, #8
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800a99c:	b5b0      	push	{r4, r5, r7, lr}
 800a99e:	b08c      	sub	sp, #48	@ 0x30
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 800a9a8:	1c19      	adds	r1, r3, #0
 800a9aa:	4895      	ldr	r0, [pc, #596]	@ (800ac00 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800a9ac:	f7f6 fc36 	bl	800121c <__aeabi_fsub>
 800a9b0:	1c03      	adds	r3, r0, #0
 800a9b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a9b8:	1c19      	adds	r1, r3, #0
 800a9ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a9bc:	f7f5 fdcc 	bl	8000558 <__aeabi_fcmpgt>
 800a9c0:	1e03      	subs	r3, r0, #0
 800a9c2:	d00b      	beq.n	800a9dc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800a9cc:	1c19      	adds	r1, r3, #0
 800a9ce:	1c10      	adds	r0, r2, #0
 800a9d0:	f7f5 ff76 	bl	80008c0 <__aeabi_fadd>
 800a9d4:	1c03      	adds	r3, r0, #0
 800a9d6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9e0:	1c19      	adds	r1, r3, #0
 800a9e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a9e4:	f7f5 fdb8 	bl	8000558 <__aeabi_fcmpgt>
 800a9e8:	1e03      	subs	r3, r0, #0
 800a9ea:	d00b      	beq.n	800aa04 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800a9f4:	1c19      	adds	r1, r3, #0
 800a9f6:	1c10      	adds	r0, r2, #0
 800a9f8:	f7f5 ff62 	bl	80008c0 <__aeabi_fadd>
 800a9fc:	1c03      	adds	r3, r0, #0
 800a9fe:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6959      	ldr	r1, [r3, #20]
 800aa08:	4a7e      	ldr	r2, [pc, #504]	@ (800ac04 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	0018      	movs	r0, r3
 800aa0e:	f000 f9f1 	bl	800adf4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	1c11      	adds	r1, r2, #0
 800aa1a:	0018      	movs	r0, r3
 800aa1c:	f000 f9fa 	bl	800ae14 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aa20:	1c03      	adds	r3, r0, #0
 800aa22:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 800aa30:	1c19      	adds	r1, r3, #0
 800aa32:	1c10      	adds	r0, r2, #0
 800aa34:	f7f6 fbf2 	bl	800121c <__aeabi_fsub>
 800aa38:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800aa3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa3c:	1c18      	adds	r0, r3, #0
 800aa3e:	f7f6 faaf 	bl	8000fa0 <__aeabi_fmul>
 800aa42:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800aa44:	1c19      	adds	r1, r3, #0
 800aa46:	1c20      	adds	r0, r4, #0
 800aa48:	f7f5 ff3a 	bl	80008c0 <__aeabi_fadd>
 800aa4c:	1c03      	adds	r3, r0, #0
 800aa4e:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800aa58:	1c19      	adds	r1, r3, #0
 800aa5a:	486b      	ldr	r0, [pc, #428]	@ (800ac08 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800aa5c:	f7f6 fbde 	bl	800121c <__aeabi_fsub>
 800aa60:	1c03      	adds	r3, r0, #0
 800aa62:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	1c11      	adds	r1, r2, #0
 800aa6c:	0018      	movs	r0, r3
 800aa6e:	f000 f9d1 	bl	800ae14 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aa72:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800aa74:	1c19      	adds	r1, r3, #0
 800aa76:	1c28      	adds	r0, r5, #0
 800aa78:	f7f6 fa92 	bl	8000fa0 <__aeabi_fmul>
 800aa7c:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800aa7e:	1c19      	adds	r1, r3, #0
 800aa80:	1c20      	adds	r0, r4, #0
 800aa82:	f7f5 ff1d 	bl	80008c0 <__aeabi_fadd>
 800aa86:	1c03      	adds	r3, r0, #0
 800aa88:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800aa8a:	4a60      	ldr	r2, [pc, #384]	@ (800ac0c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800aa8c:	6a39      	ldr	r1, [r7, #32]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	0018      	movs	r0, r3
 800aa92:	f000 f9af 	bl	800adf4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	1c11      	adds	r1, r2, #0
 800aa9e:	0018      	movs	r0, r3
 800aaa0:	f000 f9b8 	bl	800ae14 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aaa4:	1c03      	adds	r3, r0, #0
 800aaa6:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800aaa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aaaa:	69f8      	ldr	r0, [r7, #28]
 800aaac:	f7f6 fa78 	bl	8000fa0 <__aeabi_fmul>
 800aab0:	1c03      	adds	r3, r0, #0
 800aab2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6999      	ldr	r1, [r3, #24]
 800aabc:	4a51      	ldr	r2, [pc, #324]	@ (800ac04 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	0018      	movs	r0, r3
 800aac2:	f000 f997 	bl	800adf4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	1c11      	adds	r1, r2, #0
 800aace:	0018      	movs	r0, r3
 800aad0:	f000 f9a0 	bl	800ae14 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800aad4:	1c03      	adds	r3, r0, #0
 800aad6:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800aae4:	1c19      	adds	r1, r3, #0
 800aae6:	1c10      	adds	r0, r2, #0
 800aae8:	f7f6 fb98 	bl	800121c <__aeabi_fsub>
 800aaec:	1c03      	adds	r3, r0, #0
 800aaee:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800aaf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aaf2:	69b8      	ldr	r0, [r7, #24]
 800aaf4:	f7f6 fb92 	bl	800121c <__aeabi_fsub>
 800aaf8:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800aafa:	1c19      	adds	r1, r3, #0
 800aafc:	1c28      	adds	r0, r5, #0
 800aafe:	f7f6 fa4f 	bl	8000fa0 <__aeabi_fmul>
 800ab02:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800ab04:	1c19      	adds	r1, r3, #0
 800ab06:	1c20      	adds	r0, r4, #0
 800ab08:	f7f5 feda 	bl	80008c0 <__aeabi_fadd>
 800ab0c:	1c03      	adds	r3, r0, #0
 800ab0e:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800ab18:	1c19      	adds	r1, r3, #0
 800ab1a:	483b      	ldr	r0, [pc, #236]	@ (800ac08 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800ab1c:	f7f6 fb7e 	bl	800121c <__aeabi_fsub>
 800ab20:	1c03      	adds	r3, r0, #0
 800ab22:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	1c11      	adds	r1, r2, #0
 800ab2c:	0018      	movs	r0, r3
 800ab2e:	f000 f971 	bl	800ae14 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ab32:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800ab34:	1c19      	adds	r1, r3, #0
 800ab36:	1c28      	adds	r0, r5, #0
 800ab38:	f7f6 fa32 	bl	8000fa0 <__aeabi_fmul>
 800ab3c:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800ab3e:	1c19      	adds	r1, r3, #0
 800ab40:	1c20      	adds	r0, r4, #0
 800ab42:	f7f5 febd 	bl	80008c0 <__aeabi_fadd>
 800ab46:	1c03      	adds	r3, r0, #0
 800ab48:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800ab4a:	4a30      	ldr	r2, [pc, #192]	@ (800ac0c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800ab4c:	6939      	ldr	r1, [r7, #16]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	0018      	movs	r0, r3
 800ab52:	f000 f94f 	bl	800adf4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	1c11      	adds	r1, r2, #0
 800ab5e:	0018      	movs	r0, r3
 800ab60:	f000 f958 	bl	800ae14 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800ab64:	1c03      	adds	r3, r0, #0
 800ab66:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800ab68:	6979      	ldr	r1, [r7, #20]
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f7f6 fa18 	bl	8000fa0 <__aeabi_fmul>
 800ab70:	1c03      	adds	r3, r0, #0
 800ab72:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	4923      	ldr	r1, [pc, #140]	@ (800ac10 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800ab82:	1c18      	adds	r0, r3, #0
 800ab84:	f7f6 f826 	bl	8000bd4 <__aeabi_fdiv>
 800ab88:	1c03      	adds	r3, r0, #0
 800ab8a:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800ab8c:	69f9      	ldr	r1, [r7, #28]
 800ab8e:	20fe      	movs	r0, #254	@ 0xfe
 800ab90:	0580      	lsls	r0, r0, #22
 800ab92:	f7f6 fb43 	bl	800121c <__aeabi_fsub>
 800ab96:	1c03      	adds	r3, r0, #0
 800ab98:	491e      	ldr	r1, [pc, #120]	@ (800ac14 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800ab9a:	1c18      	adds	r0, r3, #0
 800ab9c:	f7f6 fa00 	bl	8000fa0 <__aeabi_fmul>
 800aba0:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800aba2:	491d      	ldr	r1, [pc, #116]	@ (800ac18 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800aba4:	1c18      	adds	r0, r3, #0
 800aba6:	f7f6 fb39 	bl	800121c <__aeabi_fsub>
 800abaa:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800abac:	1c19      	adds	r1, r3, #0
 800abae:	1c28      	adds	r0, r5, #0
 800abb0:	f7f6 f9f6 	bl	8000fa0 <__aeabi_fmul>
 800abb4:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800abb6:	1c19      	adds	r1, r3, #0
 800abb8:	1c20      	adds	r0, r4, #0
 800abba:	f7f5 fe81 	bl	80008c0 <__aeabi_fadd>
 800abbe:	1c03      	adds	r3, r0, #0
 800abc0:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abca:	2100      	movs	r1, #0
 800abcc:	1c18      	adds	r0, r3, #0
 800abce:	f7f5 fcaf 	bl	8000530 <__aeabi_fcmplt>
 800abd2:	1e03      	subs	r3, r0, #0
 800abd4:	d002      	beq.n	800abdc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800abe4:	1c19      	adds	r1, r3, #0
 800abe6:	1c10      	adds	r0, r2, #0
 800abe8:	f7f5 fcb6 	bl	8000558 <__aeabi_fcmpgt>
 800abec:	1e03      	subs	r3, r0, #0
 800abee:	d100      	bne.n	800abf2 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800abf0:	e002      	b.n	800abf8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800abf8:	46c0      	nop			@ (mov r8, r8)
 800abfa:	46bd      	mov	sp, r7
 800abfc:	b00c      	add	sp, #48	@ 0x30
 800abfe:	bdb0      	pop	{r4, r5, r7, pc}
 800ac00:	46fffe00 	.word	0x46fffe00
 800ac04:	3c23d70a 	.word	0x3c23d70a
 800ac08:	43ff0000 	.word	0x43ff0000
 800ac0c:	3db851ec 	.word	0x3db851ec
 800ac10:	42700000 	.word	0x42700000
 800ac14:	3fa66666 	.word	0x3fa66666
 800ac18:	3e99999a 	.word	0x3e99999a

0800ac1c <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800ac1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac1e:	b087      	sub	sp, #28
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	223c      	movs	r2, #60	@ 0x3c
 800ac2a:	5c9b      	ldrb	r3, [r3, r2]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	4053      	eors	r3, r2
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00a      	beq.n	800ac4c <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	223c      	movs	r2, #60	@ 0x3c
 800ac3a:	2101      	movs	r1, #1
 800ac3c:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	683a      	ldr	r2, [r7, #0]
 800ac42:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800ac4a:	e0c8      	b.n	800adde <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac50:	4965      	ldr	r1, [pc, #404]	@ (800ade8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800ac52:	1c18      	adds	r0, r3, #0
 800ac54:	f7f5 fc8a 	bl	800056c <__aeabi_fcmpge>
 800ac58:	1e03      	subs	r3, r0, #0
 800ac5a:	d107      	bne.n	800ac6c <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800ac60:	4962      	ldr	r1, [pc, #392]	@ (800adec <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800ac62:	1c18      	adds	r0, r3, #0
 800ac64:	f7f5 fc6e 	bl	8000544 <__aeabi_fcmple>
 800ac68:	1e03      	subs	r3, r0, #0
 800ac6a:	d00e      	beq.n	800ac8a <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800ac74:	1c19      	adds	r1, r3, #0
 800ac76:	1c10      	adds	r0, r2, #0
 800ac78:	f7f5 fe22 	bl	80008c0 <__aeabi_fadd>
 800ac7c:	1c03      	adds	r3, r0, #0
 800ac7e:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac8e:	1c19      	adds	r1, r3, #0
 800ac90:	6838      	ldr	r0, [r7, #0]
 800ac92:	f7f6 fac3 	bl	800121c <__aeabi_fsub>
 800ac96:	1c03      	adds	r3, r0, #0
 800ac98:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	0018      	movs	r0, r3
 800ac9e:	f7ff fe7d 	bl	800a99c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aca6:	1c19      	adds	r1, r3, #0
 800aca8:	6838      	ldr	r0, [r7, #0]
 800acaa:	f7f6 fab7 	bl	800121c <__aeabi_fsub>
 800acae:	1c03      	adds	r3, r0, #0
 800acb0:	2185      	movs	r1, #133	@ 0x85
 800acb2:	05c9      	lsls	r1, r1, #23
 800acb4:	1c18      	adds	r0, r3, #0
 800acb6:	f7f5 ff8d 	bl	8000bd4 <__aeabi_fdiv>
 800acba:	1c03      	adds	r3, r0, #0
 800acbc:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800acbe:	2100      	movs	r1, #0
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f7f5 fc35 	bl	8000530 <__aeabi_fcmplt>
 800acc6:	1e03      	subs	r3, r0, #0
 800acc8:	d008      	beq.n	800acdc <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acce:	68f9      	ldr	r1, [r7, #12]
 800acd0:	1c18      	adds	r0, r3, #0
 800acd2:	f7f6 faa3 	bl	800121c <__aeabi_fsub>
 800acd6:	1c03      	adds	r3, r0, #0
 800acd8:	617b      	str	r3, [r7, #20]
 800acda:	e007      	b.n	800acec <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ace0:	1c19      	adds	r1, r3, #0
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f7f5 fdec 	bl	80008c0 <__aeabi_fadd>
 800ace8:	1c03      	adds	r3, r0, #0
 800acea:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800acec:	23fe      	movs	r3, #254	@ 0xfe
 800acee:	059b      	lsls	r3, r3, #22
 800acf0:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800acf2:	493f      	ldr	r1, [pc, #252]	@ (800adf0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800acf4:	6978      	ldr	r0, [r7, #20]
 800acf6:	f7f5 fc2f 	bl	8000558 <__aeabi_fcmpgt>
 800acfa:	1e03      	subs	r3, r0, #0
 800acfc:	d010      	beq.n	800ad20 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800acfe:	493c      	ldr	r1, [pc, #240]	@ (800adf0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800ad00:	6978      	ldr	r0, [r7, #20]
 800ad02:	f7f5 ff67 	bl	8000bd4 <__aeabi_fdiv>
 800ad06:	1c03      	adds	r3, r0, #0
 800ad08:	1c1c      	adds	r4, r3, #0
 800ad0a:	4939      	ldr	r1, [pc, #228]	@ (800adf0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800ad0c:	6978      	ldr	r0, [r7, #20]
 800ad0e:	f7f5 ff61 	bl	8000bd4 <__aeabi_fdiv>
 800ad12:	1c03      	adds	r3, r0, #0
 800ad14:	1c19      	adds	r1, r3, #0
 800ad16:	1c20      	adds	r0, r4, #0
 800ad18:	f7f6 f942 	bl	8000fa0 <__aeabi_fmul>
 800ad1c:	1c03      	adds	r3, r0, #0
 800ad1e:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800ad24:	1c19      	adds	r1, r3, #0
 800ad26:	2085      	movs	r0, #133	@ 0x85
 800ad28:	05c0      	lsls	r0, r0, #23
 800ad2a:	f7f6 fa77 	bl	800121c <__aeabi_fsub>
 800ad2e:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800ad30:	6939      	ldr	r1, [r7, #16]
 800ad32:	1c18      	adds	r0, r3, #0
 800ad34:	f7f6 f934 	bl	8000fa0 <__aeabi_fmul>
 800ad38:	1c03      	adds	r3, r0, #0
 800ad3a:	1c18      	adds	r0, r3, #0
 800ad3c:	f017 ffd4 	bl	8022ce8 <sqrtf>
 800ad40:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800ad4a:	2185      	movs	r1, #133	@ 0x85
 800ad4c:	05c9      	lsls	r1, r1, #23
 800ad4e:	6938      	ldr	r0, [r7, #16]
 800ad50:	f7f6 f926 	bl	8000fa0 <__aeabi_fmul>
 800ad54:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800ad56:	1c19      	adds	r1, r3, #0
 800ad58:	1c28      	adds	r0, r5, #0
 800ad5a:	f7f5 ff3b 	bl	8000bd4 <__aeabi_fdiv>
 800ad5e:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800ad60:	1c19      	adds	r1, r3, #0
 800ad62:	1c20      	adds	r0, r4, #0
 800ad64:	f7f6 f91c 	bl	8000fa0 <__aeabi_fmul>
 800ad68:	1c03      	adds	r3, r0, #0
 800ad6a:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad70:	68f9      	ldr	r1, [r7, #12]
 800ad72:	1c18      	adds	r0, r3, #0
 800ad74:	f7f6 f914 	bl	8000fa0 <__aeabi_fmul>
 800ad78:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800ad7a:	6939      	ldr	r1, [r7, #16]
 800ad7c:	1c18      	adds	r0, r3, #0
 800ad7e:	f7f5 ff29 	bl	8000bd4 <__aeabi_fdiv>
 800ad82:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800ad84:	68f9      	ldr	r1, [r7, #12]
 800ad86:	1c18      	adds	r0, r3, #0
 800ad88:	f7f6 f90a 	bl	8000fa0 <__aeabi_fmul>
 800ad8c:	1c03      	adds	r3, r0, #0
             sqrtf(
 800ad8e:	1c19      	adds	r1, r3, #0
 800ad90:	1c20      	adds	r0, r4, #0
 800ad92:	f7f5 fd95 	bl	80008c0 <__aeabi_fadd>
 800ad96:	1c03      	adds	r3, r0, #0
 800ad98:	1c18      	adds	r0, r3, #0
 800ad9a:	f017 ffa5 	bl	8022ce8 <sqrtf>
 800ad9e:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800ada0:	1c19      	adds	r1, r3, #0
 800ada2:	1c30      	adds	r0, r6, #0
 800ada4:	f7f6 f8fc 	bl	8000fa0 <__aeabi_fmul>
 800ada8:	1c03      	adds	r3, r0, #0
 800adaa:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adb8:	68f9      	ldr	r1, [r7, #12]
 800adba:	1c18      	adds	r0, r3, #0
 800adbc:	f7f6 f8f0 	bl	8000fa0 <__aeabi_fmul>
 800adc0:	1c03      	adds	r3, r0, #0
 800adc2:	2182      	movs	r1, #130	@ 0x82
 800adc4:	05c9      	lsls	r1, r1, #23
 800adc6:	1c18      	adds	r0, r3, #0
 800adc8:	f7f5 ff04 	bl	8000bd4 <__aeabi_fdiv>
 800adcc:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800adce:	1c19      	adds	r1, r3, #0
 800add0:	1c20      	adds	r0, r4, #0
 800add2:	f7f5 fd75 	bl	80008c0 <__aeabi_fadd>
 800add6:	1c03      	adds	r3, r0, #0
 800add8:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800adde:	46c0      	nop			@ (mov r8, r8)
 800ade0:	46bd      	mov	sp, r7
 800ade2:	b007      	add	sp, #28
 800ade4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ade6:	46c0      	nop			@ (mov r8, r8)
 800ade8:	42c80000 	.word	0x42c80000
 800adec:	c2c80000 	.word	0xc2c80000
 800adf0:	44b40000 	.word	0x44b40000

0800adf4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	68ba      	ldr	r2, [r7, #8]
 800ae0a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ae0c:	46c0      	nop			@ (mov r8, r8)
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	b004      	add	sp, #16
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800ae14:	b590      	push	{r4, r7, lr}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae26:	1c19      	adds	r1, r3, #0
 800ae28:	6838      	ldr	r0, [r7, #0]
 800ae2a:	f7f6 f9f7 	bl	800121c <__aeabi_fsub>
 800ae2e:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800ae30:	1c19      	adds	r1, r3, #0
 800ae32:	1c20      	adds	r0, r4, #0
 800ae34:	f7f6 f8b4 	bl	8000fa0 <__aeabi_fmul>
 800ae38:	1c03      	adds	r3, r0, #0
 800ae3a:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800ae3c:	4912      	ldr	r1, [pc, #72]	@ (800ae88 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f7f5 fb76 	bl	8000530 <__aeabi_fcmplt>
 800ae44:	1e03      	subs	r3, r0, #0
 800ae46:	d002      	beq.n	800ae4e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800ae48:	23fe      	movs	r3, #254	@ 0xfe
 800ae4a:	059b      	lsls	r3, r3, #22
 800ae4c:	e018      	b.n	800ae80 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800ae4e:	490f      	ldr	r1, [pc, #60]	@ (800ae8c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f7f5 fb81 	bl	8000558 <__aeabi_fcmpgt>
 800ae56:	1e03      	subs	r3, r0, #0
 800ae58:	d001      	beq.n	800ae5e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	e010      	b.n	800ae80 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	1c18      	adds	r0, r3, #0
 800ae62:	f017 ff19 	bl	8022c98 <expf>
 800ae66:	1c03      	adds	r3, r0, #0
 800ae68:	21fe      	movs	r1, #254	@ 0xfe
 800ae6a:	0589      	lsls	r1, r1, #22
 800ae6c:	1c18      	adds	r0, r3, #0
 800ae6e:	f7f5 fd27 	bl	80008c0 <__aeabi_fadd>
 800ae72:	1c03      	adds	r3, r0, #0
 800ae74:	1c19      	adds	r1, r3, #0
 800ae76:	20fe      	movs	r0, #254	@ 0xfe
 800ae78:	0580      	lsls	r0, r0, #22
 800ae7a:	f7f5 feab 	bl	8000bd4 <__aeabi_fdiv>
 800ae7e:	1c03      	adds	r3, r0, #0
    }
}
 800ae80:	1c18      	adds	r0, r3, #0
 800ae82:	46bd      	mov	sp, r7
 800ae84:	b005      	add	sp, #20
 800ae86:	bd90      	pop	{r4, r7, pc}
 800ae88:	c2480000 	.word	0xc2480000
 800ae8c:	42480000 	.word	0x42480000

0800ae90 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	60b9      	str	r1, [r7, #8]
 800ae9a:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	68ba      	ldr	r2, [r7, #8]
 800aea0:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800aea8:	46c0      	nop			@ (mov r8, r8)
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	b004      	add	sp, #16
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800aeb0:	b590      	push	{r4, r7, lr}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d114      	bne.n	800aeec <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aec6:	1c19      	adds	r1, r3, #0
 800aec8:	6838      	ldr	r0, [r7, #0]
 800aeca:	f7f6 f9a7 	bl	800121c <__aeabi_fsub>
 800aece:	1c03      	adds	r3, r0, #0
 800aed0:	4918      	ldr	r1, [pc, #96]	@ (800af34 <GasIndexAlgorithm__mox_model__process+0x84>)
 800aed2:	1c18      	adds	r0, r3, #0
 800aed4:	f7f5 fe7e 	bl	8000bd4 <__aeabi_fdiv>
 800aed8:	1c03      	adds	r3, r0, #0
 800aeda:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800aee0:	1c19      	adds	r1, r3, #0
 800aee2:	1c10      	adds	r0, r2, #0
 800aee4:	f7f6 f85c 	bl	8000fa0 <__aeabi_fmul>
 800aee8:	1c03      	adds	r3, r0, #0
 800aeea:	e01f      	b.n	800af2c <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aef0:	1c19      	adds	r1, r3, #0
 800aef2:	6838      	ldr	r0, [r7, #0]
 800aef4:	f7f6 f992 	bl	800121c <__aeabi_fsub>
 800aef8:	1c03      	adds	r3, r0, #0
 800aefa:	1c1a      	adds	r2, r3, #0
 800aefc:	2380      	movs	r3, #128	@ 0x80
 800aefe:	061b      	lsls	r3, r3, #24
 800af00:	4053      	eors	r3, r2
 800af02:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af08:	490b      	ldr	r1, [pc, #44]	@ (800af38 <GasIndexAlgorithm__mox_model__process+0x88>)
 800af0a:	1c18      	adds	r0, r3, #0
 800af0c:	f7f5 fcd8 	bl	80008c0 <__aeabi_fadd>
 800af10:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800af12:	1c19      	adds	r1, r3, #0
 800af14:	1c20      	adds	r0, r4, #0
 800af16:	f7f5 fe5d 	bl	8000bd4 <__aeabi_fdiv>
 800af1a:	1c03      	adds	r3, r0, #0
 800af1c:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800af22:	1c19      	adds	r1, r3, #0
 800af24:	1c10      	adds	r0, r2, #0
 800af26:	f7f6 f83b 	bl	8000fa0 <__aeabi_fmul>
 800af2a:	1c03      	adds	r3, r0, #0
    }
}
 800af2c:	1c18      	adds	r0, r3, #0
 800af2e:	46bd      	mov	sp, r7
 800af30:	b003      	add	sp, #12
 800af32:	bd90      	pop	{r4, r7, pc}
 800af34:	44fa0000 	.word	0x44fa0000
 800af38:	435c0000 	.word	0x435c0000

0800af3c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
 800af48:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2180      	movs	r1, #128	@ 0x80
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2184      	movs	r1, #132	@ 0x84
 800af56:	68ba      	ldr	r2, [r7, #8]
 800af58:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2188      	movs	r1, #136	@ 0x88
 800af5e:	683a      	ldr	r2, [r7, #0]
 800af60:	505a      	str	r2, [r3, r1]
}
 800af62:	46c0      	nop			@ (mov r8, r8)
 800af64:	46bd      	mov	sp, r7
 800af66:	b004      	add	sp, #16
 800af68:	bd80      	pop	{r7, pc}
	...

0800af6c <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800af6c:	b590      	push	{r4, r7, lr}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2280      	movs	r2, #128	@ 0x80
 800af7a:	589c      	ldr	r4, [r3, r2]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2284      	movs	r2, #132	@ 0x84
 800af80:	589b      	ldr	r3, [r3, r2]
 800af82:	1c19      	adds	r1, r3, #0
 800af84:	6838      	ldr	r0, [r7, #0]
 800af86:	f7f6 f949 	bl	800121c <__aeabi_fsub>
 800af8a:	1c03      	adds	r3, r0, #0
 800af8c:	1c19      	adds	r1, r3, #0
 800af8e:	1c20      	adds	r0, r4, #0
 800af90:	f7f6 f806 	bl	8000fa0 <__aeabi_fmul>
 800af94:	1c03      	adds	r3, r0, #0
 800af96:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800af98:	4940      	ldr	r1, [pc, #256]	@ (800b09c <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800af9a:	68b8      	ldr	r0, [r7, #8]
 800af9c:	f7f5 fac8 	bl	8000530 <__aeabi_fcmplt>
 800afa0:	1e03      	subs	r3, r0, #0
 800afa2:	d001      	beq.n	800afa8 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800afa4:	4b3e      	ldr	r3, [pc, #248]	@ (800b0a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800afa6:	e075      	b.n	800b094 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800afa8:	493e      	ldr	r1, [pc, #248]	@ (800b0a4 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800afaa:	68b8      	ldr	r0, [r7, #8]
 800afac:	f7f5 fad4 	bl	8000558 <__aeabi_fcmpgt>
 800afb0:	1e03      	subs	r3, r0, #0
 800afb2:	d001      	beq.n	800afb8 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800afb4:	2300      	movs	r3, #0
 800afb6:	e06d      	b.n	800b094 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800afb8:	2100      	movs	r1, #0
 800afba:	6838      	ldr	r0, [r7, #0]
 800afbc:	f7f5 fad6 	bl	800056c <__aeabi_fcmpge>
 800afc0:	1e03      	subs	r3, r0, #0
 800afc2:	d047      	beq.n	800b054 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2288      	movs	r2, #136	@ 0x88
 800afc8:	589b      	ldr	r3, [r3, r2]
 800afca:	21fe      	movs	r1, #254	@ 0xfe
 800afcc:	0589      	lsls	r1, r1, #22
 800afce:	1c18      	adds	r0, r3, #0
 800afd0:	f7f5 faa8 	bl	8000524 <__aeabi_fcmpeq>
 800afd4:	1e03      	subs	r3, r0, #0
 800afd6:	d00e      	beq.n	800aff6 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	1c19      	adds	r1, r3, #0
 800afde:	20fe      	movs	r0, #254	@ 0xfe
 800afe0:	0580      	lsls	r0, r0, #22
 800afe2:	f7f6 f91b 	bl	800121c <__aeabi_fsub>
 800afe6:	1c03      	adds	r3, r0, #0
 800afe8:	492f      	ldr	r1, [pc, #188]	@ (800b0a8 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800afea:	1c18      	adds	r0, r3, #0
 800afec:	f7f5 ffd8 	bl	8000fa0 <__aeabi_fmul>
 800aff0:	1c03      	adds	r3, r0, #0
 800aff2:	60fb      	str	r3, [r7, #12]
 800aff4:	e012      	b.n	800b01c <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	492c      	ldr	r1, [pc, #176]	@ (800b0ac <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800affc:	1c18      	adds	r0, r3, #0
 800affe:	f7f5 ffcf 	bl	8000fa0 <__aeabi_fmul>
 800b002:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800b004:	1c19      	adds	r1, r3, #0
 800b006:	4826      	ldr	r0, [pc, #152]	@ (800b0a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b008:	f7f6 f908 	bl	800121c <__aeabi_fsub>
 800b00c:	1c03      	adds	r3, r0, #0
 800b00e:	2181      	movs	r1, #129	@ 0x81
 800b010:	05c9      	lsls	r1, r1, #23
 800b012:	1c18      	adds	r0, r3, #0
 800b014:	f7f5 fdde 	bl	8000bd4 <__aeabi_fdiv>
 800b018:	1c03      	adds	r3, r0, #0
 800b01a:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800b01c:	4920      	ldr	r1, [pc, #128]	@ (800b0a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f7f5 fc4e 	bl	80008c0 <__aeabi_fadd>
 800b024:	1c03      	adds	r3, r0, #0
 800b026:	1c1c      	adds	r4, r3, #0
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	1c18      	adds	r0, r3, #0
 800b02c:	f017 fe34 	bl	8022c98 <expf>
 800b030:	1c03      	adds	r3, r0, #0
 800b032:	21fe      	movs	r1, #254	@ 0xfe
 800b034:	0589      	lsls	r1, r1, #22
 800b036:	1c18      	adds	r0, r3, #0
 800b038:	f7f5 fc42 	bl	80008c0 <__aeabi_fadd>
 800b03c:	1c03      	adds	r3, r0, #0
 800b03e:	1c19      	adds	r1, r3, #0
 800b040:	1c20      	adds	r0, r4, #0
 800b042:	f7f5 fdc7 	bl	8000bd4 <__aeabi_fdiv>
 800b046:	1c03      	adds	r3, r0, #0
 800b048:	68f9      	ldr	r1, [r7, #12]
 800b04a:	1c18      	adds	r0, r3, #0
 800b04c:	f7f6 f8e6 	bl	800121c <__aeabi_fsub>
 800b050:	1c03      	adds	r3, r0, #0
 800b052:	e01f      	b.n	800b094 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2188      	movs	r1, #136	@ 0x88
 800b05c:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800b05e:	1c19      	adds	r1, r3, #0
 800b060:	1c10      	adds	r0, r2, #0
 800b062:	f7f5 fdb7 	bl	8000bd4 <__aeabi_fdiv>
 800b066:	1c03      	adds	r3, r0, #0
 800b068:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	1c18      	adds	r0, r3, #0
 800b06e:	f017 fe13 	bl	8022c98 <expf>
 800b072:	1c03      	adds	r3, r0, #0
 800b074:	21fe      	movs	r1, #254	@ 0xfe
 800b076:	0589      	lsls	r1, r1, #22
 800b078:	1c18      	adds	r0, r3, #0
 800b07a:	f7f5 fc21 	bl	80008c0 <__aeabi_fadd>
 800b07e:	1c03      	adds	r3, r0, #0
 800b080:	1c19      	adds	r1, r3, #0
 800b082:	4807      	ldr	r0, [pc, #28]	@ (800b0a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800b084:	f7f5 fda6 	bl	8000bd4 <__aeabi_fdiv>
 800b088:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800b08a:	1c19      	adds	r1, r3, #0
 800b08c:	1c20      	adds	r0, r4, #0
 800b08e:	f7f5 ff87 	bl	8000fa0 <__aeabi_fmul>
 800b092:	1c03      	adds	r3, r0, #0
        }
    }
}
 800b094:	1c18      	adds	r0, r3, #0
 800b096:	46bd      	mov	sp, r7
 800b098:	b005      	add	sp, #20
 800b09a:	bd90      	pop	{r4, r7, pc}
 800b09c:	c2480000 	.word	0xc2480000
 800b0a0:	43fa0000 	.word	0x43fa0000
 800b0a4:	42480000 	.word	0x42480000
 800b0a8:	3f8041ab 	.word	0x3f8041ab
 800b0ac:	40a00000 	.word	0x40a00000

0800b0b0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800b0b0:	b590      	push	{r4, r7, lr}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	4913      	ldr	r1, [pc, #76]	@ (800b110 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800b0c2:	1c18      	adds	r0, r3, #0
 800b0c4:	f7f5 fbfc 	bl	80008c0 <__aeabi_fadd>
 800b0c8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b0ca:	1c19      	adds	r1, r3, #0
 800b0cc:	1c20      	adds	r0, r4, #0
 800b0ce:	f7f5 fd81 	bl	8000bd4 <__aeabi_fdiv>
 800b0d2:	1c03      	adds	r3, r0, #0
 800b0d4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	228c      	movs	r2, #140	@ 0x8c
 800b0da:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	490b      	ldr	r1, [pc, #44]	@ (800b114 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800b0e6:	1c18      	adds	r0, r3, #0
 800b0e8:	f7f5 fbea 	bl	80008c0 <__aeabi_fadd>
 800b0ec:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800b0ee:	1c19      	adds	r1, r3, #0
 800b0f0:	1c20      	adds	r0, r4, #0
 800b0f2:	f7f5 fd6f 	bl	8000bd4 <__aeabi_fdiv>
 800b0f6:	1c03      	adds	r3, r0, #0
 800b0f8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2290      	movs	r2, #144	@ 0x90
 800b0fe:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2294      	movs	r2, #148	@ 0x94
 800b104:	2100      	movs	r1, #0
 800b106:	5499      	strb	r1, [r3, r2]
}
 800b108:	46c0      	nop			@ (mov r8, r8)
 800b10a:	46bd      	mov	sp, r7
 800b10c:	b003      	add	sp, #12
 800b10e:	bd90      	pop	{r4, r7, pc}
 800b110:	41a00000 	.word	0x41a00000
 800b114:	43fa0000 	.word	0x43fa0000

0800b118 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800b118:	b590      	push	{r4, r7, lr}
 800b11a:	b087      	sub	sp, #28
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2294      	movs	r2, #148	@ 0x94
 800b126:	5c9b      	ldrb	r3, [r3, r2]
 800b128:	2201      	movs	r2, #1
 800b12a:	4053      	eors	r3, r2
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00f      	beq.n	800b152 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2198      	movs	r1, #152	@ 0x98
 800b136:	683a      	ldr	r2, [r7, #0]
 800b138:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	219c      	movs	r1, #156	@ 0x9c
 800b13e:	683a      	ldr	r2, [r7, #0]
 800b140:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	21a0      	movs	r1, #160	@ 0xa0
 800b146:	683a      	ldr	r2, [r7, #0]
 800b148:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2294      	movs	r2, #148	@ 0x94
 800b14e:	2101      	movs	r1, #1
 800b150:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	228c      	movs	r2, #140	@ 0x8c
 800b156:	589b      	ldr	r3, [r3, r2]
 800b158:	1c19      	adds	r1, r3, #0
 800b15a:	20fe      	movs	r0, #254	@ 0xfe
 800b15c:	0580      	lsls	r0, r0, #22
 800b15e:	f7f6 f85d 	bl	800121c <__aeabi_fsub>
 800b162:	1c03      	adds	r3, r0, #0
 800b164:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2298      	movs	r2, #152	@ 0x98
 800b16a:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800b16c:	1c19      	adds	r1, r3, #0
 800b16e:	f7f5 ff17 	bl	8000fa0 <__aeabi_fmul>
 800b172:	1c03      	adds	r3, r0, #0
 800b174:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	228c      	movs	r2, #140	@ 0x8c
 800b17a:	589b      	ldr	r3, [r3, r2]
 800b17c:	6839      	ldr	r1, [r7, #0]
 800b17e:	1c18      	adds	r0, r3, #0
 800b180:	f7f5 ff0e 	bl	8000fa0 <__aeabi_fmul>
 800b184:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800b186:	1c19      	adds	r1, r3, #0
 800b188:	1c20      	adds	r0, r4, #0
 800b18a:	f7f5 fb99 	bl	80008c0 <__aeabi_fadd>
 800b18e:	1c03      	adds	r3, r0, #0
 800b190:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2298      	movs	r2, #152	@ 0x98
 800b196:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2290      	movs	r2, #144	@ 0x90
 800b19c:	589b      	ldr	r3, [r3, r2]
 800b19e:	1c19      	adds	r1, r3, #0
 800b1a0:	20fe      	movs	r0, #254	@ 0xfe
 800b1a2:	0580      	lsls	r0, r0, #22
 800b1a4:	f7f6 f83a 	bl	800121c <__aeabi_fsub>
 800b1a8:	1c03      	adds	r3, r0, #0
 800b1aa:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	229c      	movs	r2, #156	@ 0x9c
 800b1b0:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800b1b2:	1c19      	adds	r1, r3, #0
 800b1b4:	f7f5 fef4 	bl	8000fa0 <__aeabi_fmul>
 800b1b8:	1c03      	adds	r3, r0, #0
 800b1ba:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2290      	movs	r2, #144	@ 0x90
 800b1c0:	589b      	ldr	r3, [r3, r2]
 800b1c2:	6839      	ldr	r1, [r7, #0]
 800b1c4:	1c18      	adds	r0, r3, #0
 800b1c6:	f7f5 feeb 	bl	8000fa0 <__aeabi_fmul>
 800b1ca:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800b1cc:	1c19      	adds	r1, r3, #0
 800b1ce:	1c20      	adds	r0, r4, #0
 800b1d0:	f7f5 fb76 	bl	80008c0 <__aeabi_fadd>
 800b1d4:	1c03      	adds	r3, r0, #0
 800b1d6:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	229c      	movs	r2, #156	@ 0x9c
 800b1dc:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2298      	movs	r2, #152	@ 0x98
 800b1e2:	589a      	ldr	r2, [r3, r2]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	219c      	movs	r1, #156	@ 0x9c
 800b1e8:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800b1ea:	1c19      	adds	r1, r3, #0
 800b1ec:	1c10      	adds	r0, r2, #0
 800b1ee:	f7f6 f815 	bl	800121c <__aeabi_fsub>
 800b1f2:	1c03      	adds	r3, r0, #0
 800b1f4:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800b1f6:	2100      	movs	r1, #0
 800b1f8:	6978      	ldr	r0, [r7, #20]
 800b1fa:	f7f5 f999 	bl	8000530 <__aeabi_fcmplt>
 800b1fe:	1e03      	subs	r3, r0, #0
 800b200:	d004      	beq.n	800b20c <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	2280      	movs	r2, #128	@ 0x80
 800b206:	0612      	lsls	r2, r2, #24
 800b208:	4053      	eors	r3, r2
 800b20a:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800b20c:	4923      	ldr	r1, [pc, #140]	@ (800b29c <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800b20e:	6978      	ldr	r0, [r7, #20]
 800b210:	f7f5 fec6 	bl	8000fa0 <__aeabi_fmul>
 800b214:	1c03      	adds	r3, r0, #0
 800b216:	1c18      	adds	r0, r3, #0
 800b218:	f017 fd3e 	bl	8022c98 <expf>
 800b21c:	1c03      	adds	r3, r0, #0
 800b21e:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800b220:	491f      	ldr	r1, [pc, #124]	@ (800b2a0 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800b222:	6938      	ldr	r0, [r7, #16]
 800b224:	f7f5 febc 	bl	8000fa0 <__aeabi_fmul>
 800b228:	1c03      	adds	r3, r0, #0
 800b22a:	491e      	ldr	r1, [pc, #120]	@ (800b2a4 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800b22c:	1c18      	adds	r0, r3, #0
 800b22e:	f7f5 fb47 	bl	80008c0 <__aeabi_fadd>
 800b232:	1c03      	adds	r3, r0, #0
 800b234:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	685c      	ldr	r4, [r3, #4]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	68f9      	ldr	r1, [r7, #12]
 800b240:	1c18      	adds	r0, r3, #0
 800b242:	f7f5 fb3d 	bl	80008c0 <__aeabi_fadd>
 800b246:	1c03      	adds	r3, r0, #0
 800b248:	1c19      	adds	r1, r3, #0
 800b24a:	1c20      	adds	r0, r4, #0
 800b24c:	f7f5 fcc2 	bl	8000bd4 <__aeabi_fdiv>
 800b250:	1c03      	adds	r3, r0, #0
 800b252:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800b254:	68b9      	ldr	r1, [r7, #8]
 800b256:	20fe      	movs	r0, #254	@ 0xfe
 800b258:	0580      	lsls	r0, r0, #22
 800b25a:	f7f5 ffdf 	bl	800121c <__aeabi_fsub>
 800b25e:	1c03      	adds	r3, r0, #0
 800b260:	1c18      	adds	r0, r3, #0
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	22a0      	movs	r2, #160	@ 0xa0
 800b266:	589b      	ldr	r3, [r3, r2]
 800b268:	1c19      	adds	r1, r3, #0
 800b26a:	f7f5 fe99 	bl	8000fa0 <__aeabi_fmul>
 800b26e:	1c03      	adds	r3, r0, #0
 800b270:	1c1c      	adds	r4, r3, #0
 800b272:	6839      	ldr	r1, [r7, #0]
 800b274:	68b8      	ldr	r0, [r7, #8]
 800b276:	f7f5 fe93 	bl	8000fa0 <__aeabi_fmul>
 800b27a:	1c03      	adds	r3, r0, #0
 800b27c:	1c19      	adds	r1, r3, #0
 800b27e:	1c20      	adds	r0, r4, #0
 800b280:	f7f5 fb1e 	bl	80008c0 <__aeabi_fadd>
 800b284:	1c03      	adds	r3, r0, #0
 800b286:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	22a0      	movs	r2, #160	@ 0xa0
 800b28c:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	22a0      	movs	r2, #160	@ 0xa0
 800b292:	589b      	ldr	r3, [r3, r2]
}
 800b294:	1c18      	adds	r0, r3, #0
 800b296:	46bd      	mov	sp, r7
 800b298:	b007      	add	sp, #28
 800b29a:	bd90      	pop	{r4, r7, pc}
 800b29c:	be4ccccd 	.word	0xbe4ccccd
 800b2a0:	43f00000 	.word	0x43f00000
 800b2a4:	41a00000 	.word	0x41a00000

0800b2a8 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	000a      	movs	r2, r1
 800b2b2:	1cbb      	adds	r3, r7, #2
 800b2b4:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800b2b6:	230d      	movs	r3, #13
 800b2b8:	18fb      	adds	r3, r7, r3
 800b2ba:	22ff      	movs	r2, #255	@ 0xff
 800b2bc:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b2be:	230e      	movs	r3, #14
 800b2c0:	18fb      	adds	r3, r7, r3
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	801a      	strh	r2, [r3, #0]
 800b2c6:	e037      	b.n	800b338 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800b2c8:	230e      	movs	r3, #14
 800b2ca:	18fb      	adds	r3, r7, r3
 800b2cc:	881b      	ldrh	r3, [r3, #0]
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	18d3      	adds	r3, r2, r3
 800b2d2:	7819      	ldrb	r1, [r3, #0]
 800b2d4:	220d      	movs	r2, #13
 800b2d6:	18bb      	adds	r3, r7, r2
 800b2d8:	18ba      	adds	r2, r7, r2
 800b2da:	7812      	ldrb	r2, [r2, #0]
 800b2dc:	404a      	eors	r2, r1
 800b2de:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b2e0:	230c      	movs	r3, #12
 800b2e2:	18fb      	adds	r3, r7, r3
 800b2e4:	2208      	movs	r2, #8
 800b2e6:	701a      	strb	r2, [r3, #0]
 800b2e8:	e01b      	b.n	800b322 <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800b2ea:	210d      	movs	r1, #13
 800b2ec:	187b      	adds	r3, r7, r1
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	b25b      	sxtb	r3, r3
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	da09      	bge.n	800b30a <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800b2f6:	187b      	adds	r3, r7, r1
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	005b      	lsls	r3, r3, #1
 800b2fc:	b25b      	sxtb	r3, r3
 800b2fe:	2231      	movs	r2, #49	@ 0x31
 800b300:	4053      	eors	r3, r2
 800b302:	b25a      	sxtb	r2, r3
 800b304:	187b      	adds	r3, r7, r1
 800b306:	701a      	strb	r2, [r3, #0]
 800b308:	e005      	b.n	800b316 <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800b30a:	230d      	movs	r3, #13
 800b30c:	18fa      	adds	r2, r7, r3
 800b30e:	18fb      	adds	r3, r7, r3
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	18db      	adds	r3, r3, r3
 800b314:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800b316:	220c      	movs	r2, #12
 800b318:	18bb      	adds	r3, r7, r2
 800b31a:	18ba      	adds	r2, r7, r2
 800b31c:	7812      	ldrb	r2, [r2, #0]
 800b31e:	3a01      	subs	r2, #1
 800b320:	701a      	strb	r2, [r3, #0]
 800b322:	230c      	movs	r3, #12
 800b324:	18fb      	adds	r3, r7, r3
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1de      	bne.n	800b2ea <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800b32c:	220e      	movs	r2, #14
 800b32e:	18bb      	adds	r3, r7, r2
 800b330:	18ba      	adds	r2, r7, r2
 800b332:	8812      	ldrh	r2, [r2, #0]
 800b334:	3201      	adds	r2, #1
 800b336:	801a      	strh	r2, [r3, #0]
 800b338:	230e      	movs	r3, #14
 800b33a:	18fa      	adds	r2, r7, r3
 800b33c:	1cbb      	adds	r3, r7, #2
 800b33e:	8812      	ldrh	r2, [r2, #0]
 800b340:	881b      	ldrh	r3, [r3, #0]
 800b342:	429a      	cmp	r2, r3
 800b344:	d3c0      	bcc.n	800b2c8 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800b346:	230d      	movs	r3, #13
 800b348:	18fb      	adds	r3, r7, r3
 800b34a:	781b      	ldrb	r3, [r3, #0]
}
 800b34c:	0018      	movs	r0, r3
 800b34e:	46bd      	mov	sp, r7
 800b350:	b004      	add	sp, #16
 800b352:	bd80      	pop	{r7, pc}

0800b354 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	0008      	movs	r0, r1
 800b35e:	0011      	movs	r1, r2
 800b360:	1cbb      	adds	r3, r7, #2
 800b362:	1c02      	adds	r2, r0, #0
 800b364:	801a      	strh	r2, [r3, #0]
 800b366:	1c7b      	adds	r3, r7, #1
 800b368:	1c0a      	adds	r2, r1, #0
 800b36a:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800b36c:	1cbb      	adds	r3, r7, #2
 800b36e:	881a      	ldrh	r2, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	0011      	movs	r1, r2
 800b374:	0018      	movs	r0, r3
 800b376:	f7ff ff97 	bl	800b2a8 <sensirion_i2c_generate_crc>
 800b37a:	0003      	movs	r3, r0
 800b37c:	001a      	movs	r2, r3
 800b37e:	1c7b      	adds	r3, r7, #1
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	4293      	cmp	r3, r2
 800b384:	d001      	beq.n	800b38a <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800b386:	2301      	movs	r3, #1
 800b388:	e000      	b.n	800b38c <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	0018      	movs	r0, r3
 800b38e:	46bd      	mov	sp, r7
 800b390:	b002      	add	sp, #8
 800b392:	bd80      	pop	{r7, pc}

0800b394 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	0008      	movs	r0, r1
 800b39e:	0011      	movs	r1, r2
 800b3a0:	1cbb      	adds	r3, r7, #2
 800b3a2:	1c02      	adds	r2, r0, #0
 800b3a4:	801a      	strh	r2, [r3, #0]
 800b3a6:	003b      	movs	r3, r7
 800b3a8:	1c0a      	adds	r2, r1, #0
 800b3aa:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800b3ac:	003b      	movs	r3, r7
 800b3ae:	881b      	ldrh	r3, [r3, #0]
 800b3b0:	0a1b      	lsrs	r3, r3, #8
 800b3b2:	b299      	uxth	r1, r3
 800b3b4:	1cbb      	adds	r3, r7, #2
 800b3b6:	881b      	ldrh	r3, [r3, #0]
 800b3b8:	1cba      	adds	r2, r7, #2
 800b3ba:	1c58      	adds	r0, r3, #1
 800b3bc:	8010      	strh	r0, [r2, #0]
 800b3be:	001a      	movs	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	189b      	adds	r3, r3, r2
 800b3c4:	b2ca      	uxtb	r2, r1
 800b3c6:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800b3c8:	1cbb      	adds	r3, r7, #2
 800b3ca:	881b      	ldrh	r3, [r3, #0]
 800b3cc:	1cba      	adds	r2, r7, #2
 800b3ce:	1c59      	adds	r1, r3, #1
 800b3d0:	8011      	strh	r1, [r2, #0]
 800b3d2:	001a      	movs	r2, r3
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	189b      	adds	r3, r3, r2
 800b3d8:	003a      	movs	r2, r7
 800b3da:	8812      	ldrh	r2, [r2, #0]
 800b3dc:	b2d2      	uxtb	r2, r2
 800b3de:	701a      	strb	r2, [r3, #0]
    return offset;
 800b3e0:	1cbb      	adds	r3, r7, #2
 800b3e2:	881b      	ldrh	r3, [r3, #0]
}
 800b3e4:	0018      	movs	r0, r3
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	b002      	add	sp, #8
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800b3ec:	b590      	push	{r4, r7, lr}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	0008      	movs	r0, r1
 800b3f6:	0011      	movs	r1, r2
 800b3f8:	1cbb      	adds	r3, r7, #2
 800b3fa:	1c02      	adds	r2, r0, #0
 800b3fc:	801a      	strh	r2, [r3, #0]
 800b3fe:	003b      	movs	r3, r7
 800b400:	1c0a      	adds	r2, r1, #0
 800b402:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800b404:	003b      	movs	r3, r7
 800b406:	881b      	ldrh	r3, [r3, #0]
 800b408:	0a1b      	lsrs	r3, r3, #8
 800b40a:	b299      	uxth	r1, r3
 800b40c:	1cbb      	adds	r3, r7, #2
 800b40e:	881b      	ldrh	r3, [r3, #0]
 800b410:	1cba      	adds	r2, r7, #2
 800b412:	1c58      	adds	r0, r3, #1
 800b414:	8010      	strh	r0, [r2, #0]
 800b416:	001a      	movs	r2, r3
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	189b      	adds	r3, r3, r2
 800b41c:	b2ca      	uxtb	r2, r1
 800b41e:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800b420:	1cbb      	adds	r3, r7, #2
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	1cba      	adds	r2, r7, #2
 800b426:	1c59      	adds	r1, r3, #1
 800b428:	8011      	strh	r1, [r2, #0]
 800b42a:	001a      	movs	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	189b      	adds	r3, r3, r2
 800b430:	003a      	movs	r2, r7
 800b432:	8812      	ldrh	r2, [r2, #0]
 800b434:	b2d2      	uxtb	r2, r2
 800b436:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800b438:	1cbb      	adds	r3, r7, #2
 800b43a:	881b      	ldrh	r3, [r3, #0]
 800b43c:	3b02      	subs	r3, #2
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800b442:	1cbb      	adds	r3, r7, #2
 800b444:	881b      	ldrh	r3, [r3, #0]
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	18d4      	adds	r4, r2, r3
 800b44a:	2102      	movs	r1, #2
 800b44c:	f7ff ff2c 	bl	800b2a8 <sensirion_i2c_generate_crc>
 800b450:	0003      	movs	r3, r0
 800b452:	7023      	strb	r3, [r4, #0]
    offset++;
 800b454:	1cbb      	adds	r3, r7, #2
 800b456:	881a      	ldrh	r2, [r3, #0]
 800b458:	1cbb      	adds	r3, r7, #2
 800b45a:	3201      	adds	r2, #1
 800b45c:	801a      	strh	r2, [r3, #0]

    return offset;
 800b45e:	1cbb      	adds	r3, r7, #2
 800b460:	881b      	ldrh	r3, [r3, #0]
}
 800b462:	0018      	movs	r0, r3
 800b464:	46bd      	mov	sp, r7
 800b466:	b003      	add	sp, #12
 800b468:	bd90      	pop	{r4, r7, pc}

0800b46a <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800b46a:	b580      	push	{r7, lr}
 800b46c:	b082      	sub	sp, #8
 800b46e:	af00      	add	r7, sp, #0
 800b470:	6078      	str	r0, [r7, #4]
 800b472:	0008      	movs	r0, r1
 800b474:	0011      	movs	r1, r2
 800b476:	1cbb      	adds	r3, r7, #2
 800b478:	1c02      	adds	r2, r0, #0
 800b47a:	801a      	strh	r2, [r3, #0]
 800b47c:	003b      	movs	r3, r7
 800b47e:	1c0a      	adds	r2, r1, #0
 800b480:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800b482:	003b      	movs	r3, r7
 800b484:	881a      	ldrh	r2, [r3, #0]
 800b486:	1cbb      	adds	r3, r7, #2
 800b488:	8819      	ldrh	r1, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	0018      	movs	r0, r3
 800b48e:	f7ff ffad 	bl	800b3ec <sensirion_i2c_add_uint16_t_to_buffer>
 800b492:	0003      	movs	r3, r0
}
 800b494:	0018      	movs	r0, r3
 800b496:	46bd      	mov	sp, r7
 800b498:	b002      	add	sp, #8
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6039      	str	r1, [r7, #0]
 800b4a4:	0011      	movs	r1, r2
 800b4a6:	1dfb      	adds	r3, r7, #7
 800b4a8:	1c02      	adds	r2, r0, #0
 800b4aa:	701a      	strb	r2, [r3, #0]
 800b4ac:	1d3b      	adds	r3, r7, #4
 800b4ae:	1c0a      	adds	r2, r1, #0
 800b4b0:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800b4b2:	1d3b      	adds	r3, r7, #4
 800b4b4:	881a      	ldrh	r2, [r3, #0]
 800b4b6:	6839      	ldr	r1, [r7, #0]
 800b4b8:	1dfb      	adds	r3, r7, #7
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	0018      	movs	r0, r3
 800b4be:	f7fe fa01 	bl	80098c4 <sensirion_i2c_hal_write>
 800b4c2:	0003      	movs	r3, r0
}
 800b4c4:	0018      	movs	r0, r3
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	b002      	add	sp, #8
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800b4cc:	b5b0      	push	{r4, r5, r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6039      	str	r1, [r7, #0]
 800b4d4:	0011      	movs	r1, r2
 800b4d6:	1dfb      	adds	r3, r7, #7
 800b4d8:	1c02      	adds	r2, r0, #0
 800b4da:	701a      	strb	r2, [r3, #0]
 800b4dc:	1d3b      	adds	r3, r7, #4
 800b4de:	1c0a      	adds	r2, r1, #0
 800b4e0:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800b4e2:	1d3b      	adds	r3, r7, #4
 800b4e4:	881b      	ldrh	r3, [r3, #0]
 800b4e6:	085b      	lsrs	r3, r3, #1
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	220a      	movs	r2, #10
 800b4ec:	18ba      	adds	r2, r7, r2
 800b4ee:	1c19      	adds	r1, r3, #0
 800b4f0:	1c0b      	adds	r3, r1, #0
 800b4f2:	18db      	adds	r3, r3, r3
 800b4f4:	185b      	adds	r3, r3, r1
 800b4f6:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800b4f8:	1d3b      	adds	r3, r7, #4
 800b4fa:	881b      	ldrh	r3, [r3, #0]
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	4013      	ands	r3, r2
 800b500:	b29b      	uxth	r3, r3
 800b502:	2b00      	cmp	r3, #0
 800b504:	d001      	beq.n	800b50a <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800b506:	2304      	movs	r3, #4
 800b508:	e06b      	b.n	800b5e2 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800b50a:	230a      	movs	r3, #10
 800b50c:	18fb      	adds	r3, r7, r3
 800b50e:	881a      	ldrh	r2, [r3, #0]
 800b510:	6839      	ldr	r1, [r7, #0]
 800b512:	1dfb      	adds	r3, r7, #7
 800b514:	781b      	ldrb	r3, [r3, #0]
 800b516:	0018      	movs	r0, r3
 800b518:	f7fe f9b4 	bl	8009884 <sensirion_i2c_hal_read>
 800b51c:	0003      	movs	r3, r0
 800b51e:	001a      	movs	r2, r3
 800b520:	2108      	movs	r1, #8
 800b522:	187b      	adds	r3, r7, r1
 800b524:	801a      	strh	r2, [r3, #0]
    if (error) {
 800b526:	000a      	movs	r2, r1
 800b528:	18bb      	adds	r3, r7, r2
 800b52a:	2100      	movs	r1, #0
 800b52c:	5e5b      	ldrsh	r3, [r3, r1]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d003      	beq.n	800b53a <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800b532:	18bb      	adds	r3, r7, r2
 800b534:	2200      	movs	r2, #0
 800b536:	5e9b      	ldrsh	r3, [r3, r2]
 800b538:	e053      	b.n	800b5e2 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b53a:	230e      	movs	r3, #14
 800b53c:	18fb      	adds	r3, r7, r3
 800b53e:	2200      	movs	r2, #0
 800b540:	801a      	strh	r2, [r3, #0]
 800b542:	230c      	movs	r3, #12
 800b544:	18fb      	adds	r3, r7, r3
 800b546:	2200      	movs	r2, #0
 800b548:	801a      	strh	r2, [r3, #0]
 800b54a:	e041      	b.n	800b5d0 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b54c:	210e      	movs	r1, #14
 800b54e:	187b      	adds	r3, r7, r1
 800b550:	881b      	ldrh	r3, [r3, #0]
 800b552:	683a      	ldr	r2, [r7, #0]
 800b554:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800b556:	187b      	adds	r3, r7, r1
 800b558:	881b      	ldrh	r3, [r3, #0]
 800b55a:	3302      	adds	r3, #2
 800b55c:	683a      	ldr	r2, [r7, #0]
 800b55e:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	001a      	movs	r2, r3
 800b564:	2102      	movs	r1, #2
 800b566:	f7ff fef5 	bl	800b354 <sensirion_i2c_check_crc>
 800b56a:	0003      	movs	r3, r0
 800b56c:	001a      	movs	r2, r3
 800b56e:	2108      	movs	r1, #8
 800b570:	187b      	adds	r3, r7, r1
 800b572:	801a      	strh	r2, [r3, #0]
        if (error) {
 800b574:	000a      	movs	r2, r1
 800b576:	18bb      	adds	r3, r7, r2
 800b578:	2100      	movs	r1, #0
 800b57a:	5e5b      	ldrsh	r3, [r3, r1]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d003      	beq.n	800b588 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800b580:	18bb      	adds	r3, r7, r2
 800b582:	2200      	movs	r2, #0
 800b584:	5e9b      	ldrsh	r3, [r3, r2]
 800b586:	e02c      	b.n	800b5e2 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800b588:	240e      	movs	r4, #14
 800b58a:	193b      	adds	r3, r7, r4
 800b58c:	881b      	ldrh	r3, [r3, #0]
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	18d2      	adds	r2, r2, r3
 800b592:	250c      	movs	r5, #12
 800b594:	197b      	adds	r3, r7, r5
 800b596:	881b      	ldrh	r3, [r3, #0]
 800b598:	1979      	adds	r1, r7, r5
 800b59a:	1c58      	adds	r0, r3, #1
 800b59c:	8008      	strh	r0, [r1, #0]
 800b59e:	0019      	movs	r1, r3
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	185b      	adds	r3, r3, r1
 800b5a4:	7812      	ldrb	r2, [r2, #0]
 800b5a6:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800b5a8:	193b      	adds	r3, r7, r4
 800b5aa:	881b      	ldrh	r3, [r3, #0]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	683a      	ldr	r2, [r7, #0]
 800b5b0:	18d2      	adds	r2, r2, r3
 800b5b2:	197b      	adds	r3, r7, r5
 800b5b4:	881b      	ldrh	r3, [r3, #0]
 800b5b6:	1979      	adds	r1, r7, r5
 800b5b8:	1c58      	adds	r0, r3, #1
 800b5ba:	8008      	strh	r0, [r1, #0]
 800b5bc:	0019      	movs	r1, r3
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	185b      	adds	r3, r3, r1
 800b5c2:	7812      	ldrb	r2, [r2, #0]
 800b5c4:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800b5c6:	193b      	adds	r3, r7, r4
 800b5c8:	193a      	adds	r2, r7, r4
 800b5ca:	8812      	ldrh	r2, [r2, #0]
 800b5cc:	3203      	adds	r2, #3
 800b5ce:	801a      	strh	r2, [r3, #0]
 800b5d0:	230e      	movs	r3, #14
 800b5d2:	18fa      	adds	r2, r7, r3
 800b5d4:	230a      	movs	r3, #10
 800b5d6:	18fb      	adds	r3, r7, r3
 800b5d8:	8812      	ldrh	r2, [r2, #0]
 800b5da:	881b      	ldrh	r3, [r3, #0]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d3b5      	bcc.n	800b54c <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	0018      	movs	r0, r3
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	b004      	add	sp, #16
 800b5e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b5ec <ReadRegister>:
static uint16_t Blue;
static uint16_t Green;
static uint16_t TimeValue = 4000;


static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b5ec:	b590      	push	{r4, r7, lr}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6039      	str	r1, [r7, #0]
 800b5f4:	0011      	movs	r1, r2
 800b5f6:	1dfb      	adds	r3, r7, #7
 800b5f8:	1c02      	adds	r2, r0, #0
 800b5fa:	701a      	strb	r2, [r3, #0]
 800b5fc:	1dbb      	adds	r3, r7, #6
 800b5fe:	1c0a      	adds	r2, r1, #0
 800b600:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800b602:	4b08      	ldr	r3, [pc, #32]	@ (800b624 <ReadRegister+0x38>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d008      	beq.n	800b61c <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800b60a:	4b06      	ldr	r3, [pc, #24]	@ (800b624 <ReadRegister+0x38>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	1dba      	adds	r2, r7, #6
 800b610:	7814      	ldrb	r4, [r2, #0]
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	1dfa      	adds	r2, r7, #7
 800b616:	7810      	ldrb	r0, [r2, #0]
 800b618:	0022      	movs	r2, r4
 800b61a:	4798      	blx	r3
  }
}
 800b61c:	46c0      	nop			@ (mov r8, r8)
 800b61e:	46bd      	mov	sp, r7
 800b620:	b003      	add	sp, #12
 800b622:	bd90      	pop	{r4, r7, pc}
 800b624:	20001284 	.word	0x20001284

0800b628 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800b628:	b590      	push	{r4, r7, lr}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6039      	str	r1, [r7, #0]
 800b630:	0011      	movs	r1, r2
 800b632:	1dfb      	adds	r3, r7, #7
 800b634:	1c02      	adds	r2, r0, #0
 800b636:	701a      	strb	r2, [r3, #0]
 800b638:	1dbb      	adds	r3, r7, #6
 800b63a:	1c0a      	adds	r2, r1, #0
 800b63c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b63e:	4b08      	ldr	r3, [pc, #32]	@ (800b660 <WriteRegister+0x38>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d008      	beq.n	800b658 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800b646:	4b06      	ldr	r3, [pc, #24]	@ (800b660 <WriteRegister+0x38>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	1dba      	adds	r2, r7, #6
 800b64c:	7814      	ldrb	r4, [r2, #0]
 800b64e:	6839      	ldr	r1, [r7, #0]
 800b650:	1dfa      	adds	r2, r7, #7
 800b652:	7810      	ldrb	r0, [r2, #0]
 800b654:	0022      	movs	r2, r4
 800b656:	4798      	blx	r3
  }
}
 800b658:	46c0      	nop			@ (mov r8, r8)
 800b65a:	46bd      	mov	sp, r7
 800b65c:	b003      	add	sp, #12
 800b65e:	bd90      	pop	{r4, r7, pc}
 800b660:	20001288 	.word	0x20001288

0800b664 <setSGP40TimeStamp>:

void setSGP40TimeStamp(uint32_t ticks) {
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  SGP40TimeStamp = HAL_GetTick() + ticks;
 800b66c:	f003 fb1a 	bl	800eca4 <HAL_GetTick>
 800b670:	0002      	movs	r2, r0
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	18d2      	adds	r2, r2, r3
 800b676:	4b03      	ldr	r3, [pc, #12]	@ (800b684 <setSGP40TimeStamp+0x20>)
 800b678:	601a      	str	r2, [r3, #0]
}
 800b67a:	46c0      	nop			@ (mov r8, r8)
 800b67c:	46bd      	mov	sp, r7
 800b67e:	b002      	add	sp, #8
 800b680:	bd80      	pop	{r7, pc}
 800b682:	46c0      	nop			@ (mov r8, r8)
 800b684:	20001298 	.word	0x20001298

0800b688 <ResetSGP40samplecounter>:

void ResetSGP40samplecounter() {
 800b688:	b580      	push	{r7, lr}
 800b68a:	af00      	add	r7, sp, #0
  sgp40samplecounter = 0;
 800b68c:	4b02      	ldr	r3, [pc, #8]	@ (800b698 <ResetSGP40samplecounter+0x10>)
 800b68e:	2200      	movs	r2, #0
 800b690:	701a      	strb	r2, [r3, #0]
}
 800b692:	46c0      	nop			@ (mov r8, r8)
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	20001296 	.word	0x20001296

0800b69c <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800b6a6:	4b07      	ldr	r3, [pc, #28]	@ (800b6c4 <SGP_Init+0x28>)
 800b6a8:	687a      	ldr	r2, [r7, #4]
 800b6aa:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800b6ac:	4b06      	ldr	r3, [pc, #24]	@ (800b6c8 <SGP_Init+0x2c>)
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800b6b2:	4b06      	ldr	r3, [pc, #24]	@ (800b6cc <SGP_Init+0x30>)
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	0018      	movs	r0, r3
 800b6b8:	f7fe ff70 	bl	800a59c <GasIndexAlgorithm_init>
}
 800b6bc:	46c0      	nop			@ (mov r8, r8)
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	b002      	add	sp, #8
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	20001284 	.word	0x20001284
 800b6c8:	20001288 	.word	0x20001288
 800b6cc:	200012a0 	.word	0x200012a0

0800b6d0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>:

void SetSGP40_GasIndexAlgorithm_Sampling_Interval() {
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	af00      	add	r7, sp, #0
  if (usbPluggedIn) {
 800b6d4:	4b07      	ldr	r3, [pc, #28]	@ (800b6f4 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x24>)
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d004      	beq.n	800b6e6 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x16>
    params.mSamplingInterval = 1.0f;
 800b6dc:	4b06      	ldr	r3, [pc, #24]	@ (800b6f8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800b6de:	22fe      	movs	r2, #254	@ 0xfe
 800b6e0:	0592      	lsls	r2, r2, #22
 800b6e2:	605a      	str	r2, [r3, #4]
  }
  else {
    params.mSamplingInterval = 900.0f;
  }
//  Debug("SGP40 GasIndexAlgorithm_Sampling_Interval is: %f", params.mSamplingInterval);
}
 800b6e4:	e002      	b.n	800b6ec <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x1c>
    params.mSamplingInterval = 900.0f;
 800b6e6:	4b04      	ldr	r3, [pc, #16]	@ (800b6f8 <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x28>)
 800b6e8:	4a04      	ldr	r2, [pc, #16]	@ (800b6fc <SetSGP40_GasIndexAlgorithm_Sampling_Interval+0x2c>)
 800b6ea:	605a      	str	r2, [r3, #4]
}
 800b6ec:	46c0      	nop			@ (mov r8, r8)
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	46c0      	nop			@ (mov r8, r8)
 800b6f4:	200021f1 	.word	0x200021f1
 800b6f8:	200012a0 	.word	0x200012a0
 800b6fc:	44610000 	.word	0x44610000

0800b700 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800b700:	b580      	push	{r7, lr}
 800b702:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800b704:	4b13      	ldr	r3, [pc, #76]	@ (800b754 <SGP_StartMeasurement+0x54>)
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00d      	beq.n	800b728 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b70c:	4b12      	ldr	r3, [pc, #72]	@ (800b758 <SGP_StartMeasurement+0x58>)
 800b70e:	2208      	movs	r2, #8
 800b710:	0019      	movs	r1, r3
 800b712:	2059      	movs	r0, #89	@ 0x59
 800b714:	f7ff ff88 	bl	800b628 <WriteRegister>
    SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b718:	f003 fac4 	bl	800eca4 <HAL_GetTick>
 800b71c:	0003      	movs	r3, r0
 800b71e:	331e      	adds	r3, #30
 800b720:	001a      	movs	r2, r3
 800b722:	4b0e      	ldr	r3, [pc, #56]	@ (800b75c <SGP_StartMeasurement+0x5c>)
 800b724:	601a      	str	r2, [r3, #0]
 800b726:	e00c      	b.n	800b742 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b728:	4b0d      	ldr	r3, [pc, #52]	@ (800b760 <SGP_StartMeasurement+0x60>)
 800b72a:	2208      	movs	r2, #8
 800b72c:	0019      	movs	r1, r3
 800b72e:	2059      	movs	r0, #89	@ 0x59
 800b730:	f7ff ff7a 	bl	800b628 <WriteRegister>
    SGP_HeatUpTime = HAL_GetTick() + SGP_SENSOR_HEATUP_TIME;
 800b734:	f003 fab6 	bl	800eca4 <HAL_GetTick>
 800b738:	0003      	movs	r3, r0
 800b73a:	33aa      	adds	r3, #170	@ 0xaa
 800b73c:	001a      	movs	r2, r3
 800b73e:	4b09      	ldr	r3, [pc, #36]	@ (800b764 <SGP_StartMeasurement+0x64>)
 800b740:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800b742:	4b09      	ldr	r3, [pc, #36]	@ (800b768 <SGP_StartMeasurement+0x68>)
 800b744:	2200      	movs	r2, #0
 800b746:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800b748:	4b08      	ldr	r3, [pc, #32]	@ (800b76c <SGP_StartMeasurement+0x6c>)
 800b74a:	2200      	movs	r2, #0
 800b74c:	701a      	strb	r2, [r3, #0]
}
 800b74e:	46c0      	nop			@ (mov r8, r8)
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	20001348 	.word	0x20001348
 800b758:	20000098 	.word	0x20000098
 800b75c:	200000ac 	.word	0x200000ac
 800b760:	20000090 	.word	0x20000090
 800b764:	200000a4 	.word	0x200000a4
 800b768:	2000129c 	.word	0x2000129c
 800b76c:	2000129d 	.word	0x2000129d

0800b770 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) {
 800b770:	b580      	push	{r7, lr}
 800b772:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_HeatUpTime);
 800b774:	4b04      	ldr	r3, [pc, #16]	@ (800b788 <SGP_HeatedUp+0x18>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	0018      	movs	r0, r3
 800b77a:	f002 fde7 	bl	800e34c <TimestampIsReached>
 800b77e:	0003      	movs	r3, r0
}
 800b780:	0018      	movs	r0, r3
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	46c0      	nop			@ (mov r8, r8)
 800b788:	200000a4 	.word	0x200000a4

0800b78c <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800b78c:	b580      	push	{r7, lr}
 800b78e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800b790:	4b04      	ldr	r3, [pc, #16]	@ (800b7a4 <SGP_MeasurementReady+0x18>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	0018      	movs	r0, r3
 800b796:	f002 fdd9 	bl	800e34c <TimestampIsReached>
 800b79a:	0003      	movs	r3, r0
}
 800b79c:	0018      	movs	r0, r3
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	46c0      	nop			@ (mov r8, r8)
 800b7a4:	200000ac 	.word	0x200000ac

0800b7a8 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800b7ac:	4b04      	ldr	r3, [pc, #16]	@ (800b7c0 <SGP_MeasurementDone+0x18>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	0018      	movs	r0, r3
 800b7b2:	f002 fdcb 	bl	800e34c <TimestampIsReached>
 800b7b6:	0003      	movs	r3, r0
}
 800b7b8:	0018      	movs	r0, r3
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	46c0      	nop			@ (mov r8, r8)
 800b7c0:	200000a8 	.word	0x200000a8

0800b7c4 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b7c8:	4b04      	ldr	r3, [pc, #16]	@ (800b7dc <SGP_TurnHeaterOff+0x18>)
 800b7ca:	2202      	movs	r2, #2
 800b7cc:	0019      	movs	r1, r3
 800b7ce:	2059      	movs	r0, #89	@ 0x59
 800b7d0:	f7ff ff2a 	bl	800b628 <WriteRegister>
}
 800b7d4:	46c0      	nop			@ (mov r8, r8)
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	46c0      	nop			@ (mov r8, r8)
 800b7dc:	20000088 	.word	0x20000088

0800b7e0 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800b7e0:	b5b0      	push	{r4, r5, r7, lr}
 800b7e2:	b086      	sub	sp, #24
 800b7e4:	af02      	add	r7, sp, #8
 800b7e6:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800b7e8:	f7ff ffc2 	bl	800b770 <SGP_HeatedUp>
 800b7ec:	1e03      	subs	r3, r0, #0
 800b7ee:	d032      	beq.n	800b856 <SGP_GetMeasurementValues+0x76>
 800b7f0:	4bd4      	ldr	r3, [pc, #848]	@ (800bb44 <SGP_GetMeasurementValues+0x364>)
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	4053      	eors	r3, r2
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d02b      	beq.n	800b856 <SGP_GetMeasurementValues+0x76>
 800b7fe:	4bd2      	ldr	r3, [pc, #840]	@ (800bb48 <SGP_GetMeasurementValues+0x368>)
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	2201      	movs	r2, #1
 800b804:	4053      	eors	r3, r2
 800b806:	b2db      	uxtb	r3, r3
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d024      	beq.n	800b856 <SGP_GetMeasurementValues+0x76>
//    Debug("SGP is heated up");
    HeatUpIsDone = true;
 800b80c:	4bcd      	ldr	r3, [pc, #820]	@ (800bb44 <SGP_GetMeasurementValues+0x364>)
 800b80e:	2201      	movs	r2, #1
 800b810:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800b812:	4bce      	ldr	r3, [pc, #824]	@ (800bb4c <SGP_GetMeasurementValues+0x36c>)
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d00d      	beq.n	800b836 <SGP_GetMeasurementValues+0x56>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b81a:	4bcd      	ldr	r3, [pc, #820]	@ (800bb50 <SGP_GetMeasurementValues+0x370>)
 800b81c:	2208      	movs	r2, #8
 800b81e:	0019      	movs	r1, r3
 800b820:	2059      	movs	r0, #89	@ 0x59
 800b822:	f7ff ff01 	bl	800b628 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b826:	f003 fa3d 	bl	800eca4 <HAL_GetTick>
 800b82a:	0003      	movs	r3, r0
 800b82c:	331e      	adds	r3, #30
 800b82e:	001a      	movs	r2, r3
 800b830:	4bc8      	ldr	r3, [pc, #800]	@ (800bb54 <SGP_GetMeasurementValues+0x374>)
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	e00c      	b.n	800b850 <SGP_GetMeasurementValues+0x70>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800b836:	4bc8      	ldr	r3, [pc, #800]	@ (800bb58 <SGP_GetMeasurementValues+0x378>)
 800b838:	2208      	movs	r2, #8
 800b83a:	0019      	movs	r1, r3
 800b83c:	2059      	movs	r0, #89	@ 0x59
 800b83e:	f7ff fef3 	bl	800b628 <WriteRegister>
      SGP_IdleTime = HAL_GetTick() + SGP_SENSOR_IDLE_TIME;
 800b842:	f003 fa2f 	bl	800eca4 <HAL_GetTick>
 800b846:	0003      	movs	r3, r0
 800b848:	331e      	adds	r3, #30
 800b84a:	001a      	movs	r2, r3
 800b84c:	4bc1      	ldr	r3, [pc, #772]	@ (800bb54 <SGP_GetMeasurementValues+0x374>)
 800b84e:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800b850:	4bbd      	ldr	r3, [pc, #756]	@ (800bb48 <SGP_GetMeasurementValues+0x368>)
 800b852:	2201      	movs	r2, #1
 800b854:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800b856:	4bbb      	ldr	r3, [pc, #748]	@ (800bb44 <SGP_GetMeasurementValues+0x364>)
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d100      	bne.n	800b860 <SGP_GetMeasurementValues+0x80>
 800b85e:	e1a9      	b.n	800bbb4 <SGP_GetMeasurementValues+0x3d4>
 800b860:	f7ff ff94 	bl	800b78c <SGP_MeasurementReady>
 800b864:	1e03      	subs	r3, r0, #0
 800b866:	d100      	bne.n	800b86a <SGP_GetMeasurementValues+0x8a>
 800b868:	e1a4      	b.n	800bbb4 <SGP_GetMeasurementValues+0x3d4>
 800b86a:	4bbc      	ldr	r3, [pc, #752]	@ (800bb5c <SGP_GetMeasurementValues+0x37c>)
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	2201      	movs	r2, #1
 800b870:	4053      	eors	r3, r2
 800b872:	b2db      	uxtb	r3, r3
 800b874:	2b00      	cmp	r3, #0
 800b876:	d100      	bne.n	800b87a <SGP_GetMeasurementValues+0x9a>
 800b878:	e19c      	b.n	800bbb4 <SGP_GetMeasurementValues+0x3d4>
//    Debug("SGP40 sample[%i] is ready", SGP_AmountOfSamplesDone + 1);
    MeasurementIsReady = true;
 800b87a:	4bb8      	ldr	r3, [pc, #736]	@ (800bb5c <SGP_GetMeasurementValues+0x37c>)
 800b87c:	2201      	movs	r2, #1
 800b87e:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800b880:	4bb7      	ldr	r3, [pc, #732]	@ (800bb60 <SGP_GetMeasurementValues+0x380>)
 800b882:	2203      	movs	r2, #3
 800b884:	0019      	movs	r1, r3
 800b886:	2059      	movs	r0, #89	@ 0x59
 800b888:	f7ff feb0 	bl	800b5ec <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800b88c:	4bb4      	ldr	r3, [pc, #720]	@ (800bb60 <SGP_GetMeasurementValues+0x380>)
 800b88e:	2203      	movs	r2, #3
 800b890:	2103      	movs	r1, #3
 800b892:	0018      	movs	r0, r3
 800b894:	f000 f9f4 	bl	800bc80 <CheckCRC>
 800b898:	0003      	movs	r3, r0
 800b89a:	001a      	movs	r2, r3
 800b89c:	2301      	movs	r3, #1
 800b89e:	4053      	eors	r3, r2
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d02a      	beq.n	800b8fc <SGP_GetMeasurementValues+0x11c>
      Error("SGP40 measurements CRC check failed.");
 800b8a6:	4aaf      	ldr	r2, [pc, #700]	@ (800bb64 <SGP_GetMeasurementValues+0x384>)
 800b8a8:	4baf      	ldr	r3, [pc, #700]	@ (800bb68 <SGP_GetMeasurementValues+0x388>)
 800b8aa:	0019      	movs	r1, r3
 800b8ac:	2001      	movs	r0, #1
 800b8ae:	f002 fda3 	bl	800e3f8 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800b8b2:	4aae      	ldr	r2, [pc, #696]	@ (800bb6c <SGP_GetMeasurementValues+0x38c>)
 800b8b4:	4bae      	ldr	r3, [pc, #696]	@ (800bb70 <SGP_GetMeasurementValues+0x390>)
 800b8b6:	0019      	movs	r1, r3
 800b8b8:	2002      	movs	r0, #2
 800b8ba:	f002 fd9d 	bl	800e3f8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b8be:	230f      	movs	r3, #15
 800b8c0:	18fb      	adds	r3, r7, r3
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	701a      	strb	r2, [r3, #0]
 800b8c6:	e012      	b.n	800b8ee <SGP_GetMeasurementValues+0x10e>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800b8c8:	240f      	movs	r4, #15
 800b8ca:	193b      	adds	r3, r7, r4
 800b8cc:	7818      	ldrb	r0, [r3, #0]
 800b8ce:	193b      	adds	r3, r7, r4
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	4aa3      	ldr	r2, [pc, #652]	@ (800bb60 <SGP_GetMeasurementValues+0x380>)
 800b8d4:	5cd3      	ldrb	r3, [r2, r3]
 800b8d6:	4aa7      	ldr	r2, [pc, #668]	@ (800bb74 <SGP_GetMeasurementValues+0x394>)
 800b8d8:	49a7      	ldr	r1, [pc, #668]	@ (800bb78 <SGP_GetMeasurementValues+0x398>)
 800b8da:	9300      	str	r3, [sp, #0]
 800b8dc:	0003      	movs	r3, r0
 800b8de:	2003      	movs	r0, #3
 800b8e0:	f002 fd8a 	bl	800e3f8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800b8e4:	193b      	adds	r3, r7, r4
 800b8e6:	781a      	ldrb	r2, [r3, #0]
 800b8e8:	193b      	adds	r3, r7, r4
 800b8ea:	3201      	adds	r2, #1
 800b8ec:	701a      	strb	r2, [r3, #0]
 800b8ee:	230f      	movs	r3, #15
 800b8f0:	18fb      	adds	r3, r7, r3
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	2b02      	cmp	r3, #2
 800b8f6:	d9e7      	bls.n	800b8c8 <SGP_GetMeasurementValues+0xe8>
      }
      return false;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	e173      	b.n	800bbe4 <SGP_GetMeasurementValues+0x404>
    }
    SGP_MeasurementDutyCycle = HAL_GetTick() + SGP_SENSOR_DUTYCYCLE;
 800b8fc:	f003 f9d2 	bl	800eca4 <HAL_GetTick>
 800b900:	0003      	movs	r3, r0
 800b902:	22fa      	movs	r2, #250	@ 0xfa
 800b904:	0092      	lsls	r2, r2, #2
 800b906:	189a      	adds	r2, r3, r2
 800b908:	4b9c      	ldr	r3, [pc, #624]	@ (800bb7c <SGP_GetMeasurementValues+0x39c>)
 800b90a:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800b90c:	f7ff ff5a 	bl	800b7c4 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800b910:	4b9b      	ldr	r3, [pc, #620]	@ (800bb80 <SGP_GetMeasurementValues+0x3a0>)
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	3301      	adds	r3, #1
 800b916:	b2da      	uxtb	r2, r3
 800b918:	4b99      	ldr	r3, [pc, #612]	@ (800bb80 <SGP_GetMeasurementValues+0x3a0>)
 800b91a:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800b91c:	4b98      	ldr	r3, [pc, #608]	@ (800bb80 <SGP_GetMeasurementValues+0x3a0>)
 800b91e:	781a      	ldrb	r2, [r3, #0]
 800b920:	4b98      	ldr	r3, [pc, #608]	@ (800bb84 <SGP_GetMeasurementValues+0x3a4>)
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	429a      	cmp	r2, r3
 800b926:	d200      	bcs.n	800b92a <SGP_GetMeasurementValues+0x14a>
 800b928:	e144      	b.n	800bbb4 <SGP_GetMeasurementValues+0x3d4>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800b92a:	4b8d      	ldr	r3, [pc, #564]	@ (800bb60 <SGP_GetMeasurementValues+0x380>)
 800b92c:	785b      	ldrb	r3, [r3, #1]
 800b92e:	021b      	lsls	r3, r3, #8
 800b930:	b21a      	sxth	r2, r3
 800b932:	4b8b      	ldr	r3, [pc, #556]	@ (800bb60 <SGP_GetMeasurementValues+0x380>)
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	b21b      	sxth	r3, r3
 800b938:	4313      	orrs	r3, r2
 800b93a:	b21a      	sxth	r2, r3
 800b93c:	240c      	movs	r4, #12
 800b93e:	193b      	adds	r3, r7, r4
 800b940:	801a      	strh	r2, [r3, #0]
      int32_t tempVocIndex = 0;
 800b942:	2300      	movs	r3, #0
 800b944:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800b946:	193b      	adds	r3, r7, r4
 800b948:	8819      	ldrh	r1, [r3, #0]
 800b94a:	2308      	movs	r3, #8
 800b94c:	18fa      	adds	r2, r7, r3
 800b94e:	4b8e      	ldr	r3, [pc, #568]	@ (800bb88 <SGP_GetMeasurementValues+0x3a8>)
 800b950:	0018      	movs	r0, r3
 800b952:	f7fe fe87 	bl	800a664 <GasIndexAlgorithm_process>
      sgp40samplecounter++;
 800b956:	4b8d      	ldr	r3, [pc, #564]	@ (800bb8c <SGP_GetMeasurementValues+0x3ac>)
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	3301      	adds	r3, #1
 800b95c:	b2da      	uxtb	r2, r3
 800b95e:	4b8b      	ldr	r3, [pc, #556]	@ (800bb8c <SGP_GetMeasurementValues+0x3ac>)
 800b960:	701a      	strb	r2, [r3, #0]
      if (sgp40samplecounter == 1) {
 800b962:	4b8a      	ldr	r3, [pc, #552]	@ (800bb8c <SGP_GetMeasurementValues+0x3ac>)
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	2b01      	cmp	r3, #1
 800b968:	d10d      	bne.n	800b986 <SGP_GetMeasurementValues+0x1a6>
        Debug("SGP40 rawSignal value: %d", rawSignal);
 800b96a:	193b      	adds	r3, r7, r4
 800b96c:	881b      	ldrh	r3, [r3, #0]
 800b96e:	4a88      	ldr	r2, [pc, #544]	@ (800bb90 <SGP_GetMeasurementValues+0x3b0>)
 800b970:	4981      	ldr	r1, [pc, #516]	@ (800bb78 <SGP_GetMeasurementValues+0x398>)
 800b972:	2003      	movs	r0, #3
 800b974:	f002 fd40 	bl	800e3f8 <CreateLine>
        Debug("SGP40 vocIndex value: %d", tempVocIndex);
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	4a86      	ldr	r2, [pc, #536]	@ (800bb94 <SGP_GetMeasurementValues+0x3b4>)
 800b97c:	497e      	ldr	r1, [pc, #504]	@ (800bb78 <SGP_GetMeasurementValues+0x398>)
 800b97e:	2003      	movs	r0, #3
 800b980:	f002 fd3a 	bl	800e3f8 <CreateLine>
 800b984:	e006      	b.n	800b994 <SGP_GetMeasurementValues+0x1b4>
      }
      else {
        if (sgp40samplecounter == 11) {
 800b986:	4b81      	ldr	r3, [pc, #516]	@ (800bb8c <SGP_GetMeasurementValues+0x3ac>)
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	2b0b      	cmp	r3, #11
 800b98c:	d102      	bne.n	800b994 <SGP_GetMeasurementValues+0x1b4>
          sgp40samplecounter = 0;
 800b98e:	4b7f      	ldr	r3, [pc, #508]	@ (800bb8c <SGP_GetMeasurementValues+0x3ac>)
 800b990:	2200      	movs	r2, #0
 800b992:	701a      	strb	r2, [r3, #0]
        }
      }
      *vocIndex = tempVocIndex;
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0 && *vocIndex <= 100){
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	dd5a      	ble.n	800ba58 <SGP_GetMeasurementValues+0x278>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	2b64      	cmp	r3, #100	@ 0x64
 800b9a8:	dc56      	bgt.n	800ba58 <SGP_GetMeasurementValues+0x278>
        Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	0018      	movs	r0, r3
 800b9b0:	f7f7 fd06 	bl	80033c0 <__aeabi_i2d>
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	4b78      	ldr	r3, [pc, #480]	@ (800bb98 <SGP_GetMeasurementValues+0x3b8>)
 800b9b8:	f7f6 f9fc 	bl	8001db4 <__aeabi_ddiv>
 800b9bc:	0002      	movs	r2, r0
 800b9be:	000b      	movs	r3, r1
 800b9c0:	2000      	movs	r0, #0
 800b9c2:	4976      	ldr	r1, [pc, #472]	@ (800bb9c <SGP_GetMeasurementValues+0x3bc>)
 800b9c4:	f7f7 f902 	bl	8002bcc <__aeabi_dsub>
 800b9c8:	0002      	movs	r2, r0
 800b9ca:	000b      	movs	r3, r1
 800b9cc:	0014      	movs	r4, r2
 800b9ce:	001d      	movs	r5, r3
 800b9d0:	4b73      	ldr	r3, [pc, #460]	@ (800bba0 <SGP_GetMeasurementValues+0x3c0>)
 800b9d2:	881b      	ldrh	r3, [r3, #0]
 800b9d4:	0018      	movs	r0, r3
 800b9d6:	f7f7 fcf3 	bl	80033c0 <__aeabi_i2d>
 800b9da:	0002      	movs	r2, r0
 800b9dc:	000b      	movs	r3, r1
 800b9de:	0020      	movs	r0, r4
 800b9e0:	0029      	movs	r1, r5
 800b9e2:	f7f6 fe2b 	bl	800263c <__aeabi_dmul>
 800b9e6:	0002      	movs	r2, r0
 800b9e8:	000b      	movs	r3, r1
 800b9ea:	0010      	movs	r0, r2
 800b9ec:	0019      	movs	r1, r3
 800b9ee:	f7f4 fe2d 	bl	800064c <__aeabi_d2uiz>
 800b9f2:	0003      	movs	r3, r0
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	4b6b      	ldr	r3, [pc, #428]	@ (800bba4 <SGP_GetMeasurementValues+0x3c4>)
 800b9f8:	801a      	strh	r2, [r3, #0]
        Blue = (*vocIndex/100.0)*TimeValue;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	0018      	movs	r0, r3
 800ba00:	f7f7 fcde 	bl	80033c0 <__aeabi_i2d>
 800ba04:	2200      	movs	r2, #0
 800ba06:	4b64      	ldr	r3, [pc, #400]	@ (800bb98 <SGP_GetMeasurementValues+0x3b8>)
 800ba08:	f7f6 f9d4 	bl	8001db4 <__aeabi_ddiv>
 800ba0c:	0002      	movs	r2, r0
 800ba0e:	000b      	movs	r3, r1
 800ba10:	0014      	movs	r4, r2
 800ba12:	001d      	movs	r5, r3
 800ba14:	4b62      	ldr	r3, [pc, #392]	@ (800bba0 <SGP_GetMeasurementValues+0x3c0>)
 800ba16:	881b      	ldrh	r3, [r3, #0]
 800ba18:	0018      	movs	r0, r3
 800ba1a:	f7f7 fcd1 	bl	80033c0 <__aeabi_i2d>
 800ba1e:	0002      	movs	r2, r0
 800ba20:	000b      	movs	r3, r1
 800ba22:	0020      	movs	r0, r4
 800ba24:	0029      	movs	r1, r5
 800ba26:	f7f6 fe09 	bl	800263c <__aeabi_dmul>
 800ba2a:	0002      	movs	r2, r0
 800ba2c:	000b      	movs	r3, r1
 800ba2e:	0010      	movs	r0, r2
 800ba30:	0019      	movs	r1, r3
 800ba32:	f7f4 fe0b 	bl	800064c <__aeabi_d2uiz>
 800ba36:	0003      	movs	r3, r0
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	4b5b      	ldr	r3, [pc, #364]	@ (800bba8 <SGP_GetMeasurementValues+0x3c8>)
 800ba3c:	801a      	strh	r2, [r3, #0]
        Red = TimeValue;
 800ba3e:	4b58      	ldr	r3, [pc, #352]	@ (800bba0 <SGP_GetMeasurementValues+0x3c0>)
 800ba40:	881a      	ldrh	r2, [r3, #0]
 800ba42:	4b5a      	ldr	r3, [pc, #360]	@ (800bbac <SGP_GetMeasurementValues+0x3cc>)
 800ba44:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800ba46:	4b59      	ldr	r3, [pc, #356]	@ (800bbac <SGP_GetMeasurementValues+0x3cc>)
 800ba48:	8818      	ldrh	r0, [r3, #0]
 800ba4a:	4b56      	ldr	r3, [pc, #344]	@ (800bba4 <SGP_GetMeasurementValues+0x3c4>)
 800ba4c:	8819      	ldrh	r1, [r3, #0]
 800ba4e:	4b56      	ldr	r3, [pc, #344]	@ (800bba8 <SGP_GetMeasurementValues+0x3c8>)
 800ba50:	881b      	ldrh	r3, [r3, #0]
 800ba52:	001a      	movs	r2, r3
 800ba54:	f001 fc24 	bl	800d2a0 <SetVocLED>
      }
      if(*vocIndex > 100){
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	2b64      	cmp	r3, #100	@ 0x64
 800ba5e:	dd66      	ble.n	800bb2e <SGP_GetMeasurementValues+0x34e>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	0018      	movs	r0, r3
 800ba66:	f7f7 fcab 	bl	80033c0 <__aeabi_i2d>
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	4b4a      	ldr	r3, [pc, #296]	@ (800bb98 <SGP_GetMeasurementValues+0x3b8>)
 800ba6e:	f7f7 f8ad 	bl	8002bcc <__aeabi_dsub>
 800ba72:	0002      	movs	r2, r0
 800ba74:	000b      	movs	r3, r1
 800ba76:	0010      	movs	r0, r2
 800ba78:	0019      	movs	r1, r3
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	4b4c      	ldr	r3, [pc, #304]	@ (800bbb0 <SGP_GetMeasurementValues+0x3d0>)
 800ba7e:	f7f6 f999 	bl	8001db4 <__aeabi_ddiv>
 800ba82:	0002      	movs	r2, r0
 800ba84:	000b      	movs	r3, r1
 800ba86:	0014      	movs	r4, r2
 800ba88:	001d      	movs	r5, r3
 800ba8a:	4b45      	ldr	r3, [pc, #276]	@ (800bba0 <SGP_GetMeasurementValues+0x3c0>)
 800ba8c:	881b      	ldrh	r3, [r3, #0]
 800ba8e:	0018      	movs	r0, r3
 800ba90:	f7f7 fc96 	bl	80033c0 <__aeabi_i2d>
 800ba94:	0002      	movs	r2, r0
 800ba96:	000b      	movs	r3, r1
 800ba98:	0020      	movs	r0, r4
 800ba9a:	0029      	movs	r1, r5
 800ba9c:	f7f6 fdce 	bl	800263c <__aeabi_dmul>
 800baa0:	0002      	movs	r2, r0
 800baa2:	000b      	movs	r3, r1
 800baa4:	0010      	movs	r0, r2
 800baa6:	0019      	movs	r1, r3
 800baa8:	f7f4 fdd0 	bl	800064c <__aeabi_d2uiz>
 800baac:	0003      	movs	r3, r0
 800baae:	b29a      	uxth	r2, r3
 800bab0:	4b3c      	ldr	r3, [pc, #240]	@ (800bba4 <SGP_GetMeasurementValues+0x3c4>)
 800bab2:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	0018      	movs	r0, r3
 800baba:	f7f7 fc81 	bl	80033c0 <__aeabi_i2d>
 800babe:	2200      	movs	r2, #0
 800bac0:	4b35      	ldr	r3, [pc, #212]	@ (800bb98 <SGP_GetMeasurementValues+0x3b8>)
 800bac2:	f7f7 f883 	bl	8002bcc <__aeabi_dsub>
 800bac6:	0002      	movs	r2, r0
 800bac8:	000b      	movs	r3, r1
 800baca:	0010      	movs	r0, r2
 800bacc:	0019      	movs	r1, r3
 800bace:	2200      	movs	r2, #0
 800bad0:	4b37      	ldr	r3, [pc, #220]	@ (800bbb0 <SGP_GetMeasurementValues+0x3d0>)
 800bad2:	f7f6 f96f 	bl	8001db4 <__aeabi_ddiv>
 800bad6:	0002      	movs	r2, r0
 800bad8:	000b      	movs	r3, r1
 800bada:	2000      	movs	r0, #0
 800badc:	492f      	ldr	r1, [pc, #188]	@ (800bb9c <SGP_GetMeasurementValues+0x3bc>)
 800bade:	f7f7 f875 	bl	8002bcc <__aeabi_dsub>
 800bae2:	0002      	movs	r2, r0
 800bae4:	000b      	movs	r3, r1
 800bae6:	0014      	movs	r4, r2
 800bae8:	001d      	movs	r5, r3
 800baea:	4b2d      	ldr	r3, [pc, #180]	@ (800bba0 <SGP_GetMeasurementValues+0x3c0>)
 800baec:	881b      	ldrh	r3, [r3, #0]
 800baee:	0018      	movs	r0, r3
 800baf0:	f7f7 fc66 	bl	80033c0 <__aeabi_i2d>
 800baf4:	0002      	movs	r2, r0
 800baf6:	000b      	movs	r3, r1
 800baf8:	0020      	movs	r0, r4
 800bafa:	0029      	movs	r1, r5
 800bafc:	f7f6 fd9e 	bl	800263c <__aeabi_dmul>
 800bb00:	0002      	movs	r2, r0
 800bb02:	000b      	movs	r3, r1
 800bb04:	0010      	movs	r0, r2
 800bb06:	0019      	movs	r1, r3
 800bb08:	f7f4 fda0 	bl	800064c <__aeabi_d2uiz>
 800bb0c:	0003      	movs	r3, r0
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	4b26      	ldr	r3, [pc, #152]	@ (800bbac <SGP_GetMeasurementValues+0x3cc>)
 800bb12:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800bb14:	4b22      	ldr	r3, [pc, #136]	@ (800bba0 <SGP_GetMeasurementValues+0x3c0>)
 800bb16:	881a      	ldrh	r2, [r3, #0]
 800bb18:	4b23      	ldr	r3, [pc, #140]	@ (800bba8 <SGP_GetMeasurementValues+0x3c8>)
 800bb1a:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800bb1c:	4b23      	ldr	r3, [pc, #140]	@ (800bbac <SGP_GetMeasurementValues+0x3cc>)
 800bb1e:	8818      	ldrh	r0, [r3, #0]
 800bb20:	4b20      	ldr	r3, [pc, #128]	@ (800bba4 <SGP_GetMeasurementValues+0x3c4>)
 800bb22:	8819      	ldrh	r1, [r3, #0]
 800bb24:	4b20      	ldr	r3, [pc, #128]	@ (800bba8 <SGP_GetMeasurementValues+0x3c8>)
 800bb26:	881b      	ldrh	r3, [r3, #0]
 800bb28:	001a      	movs	r2, r3
 800bb2a:	f001 fbb9 	bl	800d2a0 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800bb2e:	4b14      	ldr	r3, [pc, #80]	@ (800bb80 <SGP_GetMeasurementValues+0x3a0>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	701a      	strb	r2, [r3, #0]
//      Debug("SGP_Measurement completely done.");
      HT_MeasurementReceived = false;
 800bb34:	4b05      	ldr	r3, [pc, #20]	@ (800bb4c <SGP_GetMeasurementValues+0x36c>)
 800bb36:	2200      	movs	r2, #0
 800bb38:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800bb3a:	4b03      	ldr	r3, [pc, #12]	@ (800bb48 <SGP_GetMeasurementValues+0x368>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800bb40:	2301      	movs	r3, #1
 800bb42:	e04f      	b.n	800bbe4 <SGP_GetMeasurementValues+0x404>
 800bb44:	2000129c 	.word	0x2000129c
 800bb48:	20001349 	.word	0x20001349
 800bb4c:	20001348 	.word	0x20001348
 800bb50:	20000098 	.word	0x20000098
 800bb54:	200000ac 	.word	0x200000ac
 800bb58:	20000090 	.word	0x20000090
 800bb5c:	2000129d 	.word	0x2000129d
 800bb60:	2000128c 	.word	0x2000128c
 800bb64:	08024b90 	.word	0x08024b90
 800bb68:	08024bb8 	.word	0x08024bb8
 800bb6c:	08024bbc 	.word	0x08024bbc
 800bb70:	08024bdc 	.word	0x08024bdc
 800bb74:	08024be0 	.word	0x08024be0
 800bb78:	08024c00 	.word	0x08024c00
 800bb7c:	200000a8 	.word	0x200000a8
 800bb80:	20001295 	.word	0x20001295
 800bb84:	200000a2 	.word	0x200000a2
 800bb88:	200012a0 	.word	0x200012a0
 800bb8c:	20001296 	.word	0x20001296
 800bb90:	08024c04 	.word	0x08024c04
 800bb94:	08024c20 	.word	0x08024c20
 800bb98:	40590000 	.word	0x40590000
 800bb9c:	3ff00000 	.word	0x3ff00000
 800bba0:	200000b0 	.word	0x200000b0
 800bba4:	20001354 	.word	0x20001354
 800bba8:	20001352 	.word	0x20001352
 800bbac:	20001350 	.word	0x20001350
 800bbb0:	40790000 	.word	0x40790000
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800bbb4:	f7ff fdf8 	bl	800b7a8 <SGP_MeasurementDone>
 800bbb8:	1e03      	subs	r3, r0, #0
 800bbba:	d012      	beq.n	800bbe2 <SGP_GetMeasurementValues+0x402>
 800bbbc:	4b0b      	ldr	r3, [pc, #44]	@ (800bbec <SGP_GetMeasurementValues+0x40c>)
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00e      	beq.n	800bbe2 <SGP_GetMeasurementValues+0x402>
 800bbc4:	4b0a      	ldr	r3, [pc, #40]	@ (800bbf0 <SGP_GetMeasurementValues+0x410>)
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d00a      	beq.n	800bbe2 <SGP_GetMeasurementValues+0x402>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800bbcc:	4a09      	ldr	r2, [pc, #36]	@ (800bbf4 <SGP_GetMeasurementValues+0x414>)
 800bbce:	4b0a      	ldr	r3, [pc, #40]	@ (800bbf8 <SGP_GetMeasurementValues+0x418>)
 800bbd0:	0019      	movs	r1, r3
 800bbd2:	2003      	movs	r0, #3
 800bbd4:	f002 fc10 	bl	800e3f8 <CreateLine>
    SGP_StartMeasurement();
 800bbd8:	f7ff fd92 	bl	800b700 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800bbdc:	4b07      	ldr	r3, [pc, #28]	@ (800bbfc <SGP_GetMeasurementValues+0x41c>)
 800bbde:	2200      	movs	r2, #0
 800bbe0:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	0018      	movs	r0, r3
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	b004      	add	sp, #16
 800bbea:	bdb0      	pop	{r4, r5, r7, pc}
 800bbec:	2000129c 	.word	0x2000129c
 800bbf0:	2000129d 	.word	0x2000129d
 800bbf4:	08024c3c 	.word	0x08024c3c
 800bbf8:	08024c00 	.word	0x08024c00
 800bbfc:	20001349 	.word	0x20001349

0800bc00 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bc06:	4b1a      	ldr	r3, [pc, #104]	@ (800bc70 <SGP_DeviceConnected+0x70>)
 800bc08:	2202      	movs	r2, #2
 800bc0a:	0019      	movs	r1, r3
 800bc0c:	2059      	movs	r0, #89	@ 0x59
 800bc0e:	f7ff fd0b 	bl	800b628 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800bc12:	2001      	movs	r0, #1
 800bc14:	f003 f850 	bl	800ecb8 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800bc18:	4b16      	ldr	r3, [pc, #88]	@ (800bc74 <SGP_DeviceConnected+0x74>)
 800bc1a:	2209      	movs	r2, #9
 800bc1c:	0019      	movs	r1, r3
 800bc1e:	2059      	movs	r0, #89	@ 0x59
 800bc20:	f7ff fce4 	bl	800b5ec <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bc24:	1dfb      	adds	r3, r7, #7
 800bc26:	2200      	movs	r2, #0
 800bc28:	701a      	strb	r2, [r3, #0]
 800bc2a:	e011      	b.n	800bc50 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800bc2c:	1dfb      	adds	r3, r7, #7
 800bc2e:	7818      	ldrb	r0, [r3, #0]
 800bc30:	1dfb      	adds	r3, r7, #7
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	4a0f      	ldr	r2, [pc, #60]	@ (800bc74 <SGP_DeviceConnected+0x74>)
 800bc36:	5cd3      	ldrb	r3, [r2, r3]
 800bc38:	4a0f      	ldr	r2, [pc, #60]	@ (800bc78 <SGP_DeviceConnected+0x78>)
 800bc3a:	4910      	ldr	r1, [pc, #64]	@ (800bc7c <SGP_DeviceConnected+0x7c>)
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	0003      	movs	r3, r0
 800bc40:	2002      	movs	r0, #2
 800bc42:	f002 fbd9 	bl	800e3f8 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800bc46:	1dfb      	adds	r3, r7, #7
 800bc48:	781a      	ldrb	r2, [r3, #0]
 800bc4a:	1dfb      	adds	r3, r7, #7
 800bc4c:	3201      	adds	r2, #1
 800bc4e:	701a      	strb	r2, [r3, #0]
 800bc50:	1dfb      	adds	r3, r7, #7
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	2b08      	cmp	r3, #8
 800bc56:	d9e9      	bls.n	800bc2c <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800bc58:	4b06      	ldr	r3, [pc, #24]	@ (800bc74 <SGP_DeviceConnected+0x74>)
 800bc5a:	2203      	movs	r2, #3
 800bc5c:	2109      	movs	r1, #9
 800bc5e:	0018      	movs	r0, r3
 800bc60:	f000 f80e 	bl	800bc80 <CheckCRC>
 800bc64:	0003      	movs	r3, r0
}
 800bc66:	0018      	movs	r0, r3
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	b002      	add	sp, #8
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	46c0      	nop			@ (mov r8, r8)
 800bc70:	2000008c 	.word	0x2000008c
 800bc74:	2000128c 	.word	0x2000128c
 800bc78:	08024c5c 	.word	0x08024c5c
 800bc7c:	08024bdc 	.word	0x08024bdc

0800bc80 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800bc80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc82:	b08f      	sub	sp, #60	@ 0x3c
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6278      	str	r0, [r7, #36]	@ 0x24
 800bc88:	0008      	movs	r0, r1
 800bc8a:	0011      	movs	r1, r2
 800bc8c:	2323      	movs	r3, #35	@ 0x23
 800bc8e:	18fb      	adds	r3, r7, r3
 800bc90:	1c02      	adds	r2, r0, #0
 800bc92:	701a      	strb	r2, [r3, #0]
 800bc94:	2322      	movs	r3, #34	@ 0x22
 800bc96:	18fb      	adds	r3, r7, r3
 800bc98:	1c0a      	adds	r2, r1, #0
 800bc9a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800bc9c:	2317      	movs	r3, #23
 800bc9e:	2220      	movs	r2, #32
 800bca0:	189b      	adds	r3, r3, r2
 800bca2:	19db      	adds	r3, r3, r7
 800bca4:	2200      	movs	r2, #0
 800bca6:	701a      	strb	r2, [r3, #0]
 800bca8:	e09f      	b.n	800bdea <CheckCRC+0x16a>
 800bcaa:	466b      	mov	r3, sp
 800bcac:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800bcae:	2322      	movs	r3, #34	@ 0x22
 800bcb0:	18fb      	adds	r3, r7, r3
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	001a      	movs	r2, r3
 800bcb6:	3a01      	subs	r2, #1
 800bcb8:	633a      	str	r2, [r7, #48]	@ 0x30
 800bcba:	60bb      	str	r3, [r7, #8]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	60fa      	str	r2, [r7, #12]
 800bcc0:	68b8      	ldr	r0, [r7, #8]
 800bcc2:	68f9      	ldr	r1, [r7, #12]
 800bcc4:	0002      	movs	r2, r0
 800bcc6:	0f52      	lsrs	r2, r2, #29
 800bcc8:	000c      	movs	r4, r1
 800bcca:	00e4      	lsls	r4, r4, #3
 800bccc:	61fc      	str	r4, [r7, #28]
 800bcce:	69fc      	ldr	r4, [r7, #28]
 800bcd0:	4314      	orrs	r4, r2
 800bcd2:	61fc      	str	r4, [r7, #28]
 800bcd4:	0002      	movs	r2, r0
 800bcd6:	00d2      	lsls	r2, r2, #3
 800bcd8:	61ba      	str	r2, [r7, #24]
 800bcda:	603b      	str	r3, [r7, #0]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	607a      	str	r2, [r7, #4]
 800bce0:	6838      	ldr	r0, [r7, #0]
 800bce2:	6879      	ldr	r1, [r7, #4]
 800bce4:	0002      	movs	r2, r0
 800bce6:	0f52      	lsrs	r2, r2, #29
 800bce8:	000c      	movs	r4, r1
 800bcea:	00e4      	lsls	r4, r4, #3
 800bcec:	617c      	str	r4, [r7, #20]
 800bcee:	697c      	ldr	r4, [r7, #20]
 800bcf0:	4314      	orrs	r4, r2
 800bcf2:	617c      	str	r4, [r7, #20]
 800bcf4:	0002      	movs	r2, r0
 800bcf6:	00d2      	lsls	r2, r2, #3
 800bcf8:	613a      	str	r2, [r7, #16]
 800bcfa:	3307      	adds	r3, #7
 800bcfc:	08db      	lsrs	r3, r3, #3
 800bcfe:	00db      	lsls	r3, r3, #3
 800bd00:	466a      	mov	r2, sp
 800bd02:	1ad3      	subs	r3, r2, r3
 800bd04:	469d      	mov	sp, r3
 800bd06:	466b      	mov	r3, sp
 800bd08:	3300      	adds	r3, #0
 800bd0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800bd0c:	2316      	movs	r3, #22
 800bd0e:	2220      	movs	r2, #32
 800bd10:	189b      	adds	r3, r3, r2
 800bd12:	19db      	adds	r3, r3, r7
 800bd14:	2200      	movs	r2, #0
 800bd16:	701a      	strb	r2, [r3, #0]
 800bd18:	e01e      	b.n	800bd58 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800bd1a:	2317      	movs	r3, #23
 800bd1c:	2220      	movs	r2, #32
 800bd1e:	189b      	adds	r3, r3, r2
 800bd20:	19db      	adds	r3, r3, r7
 800bd22:	781a      	ldrb	r2, [r3, #0]
 800bd24:	2116      	movs	r1, #22
 800bd26:	2320      	movs	r3, #32
 800bd28:	18cb      	adds	r3, r1, r3
 800bd2a:	19db      	adds	r3, r3, r7
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	18d3      	adds	r3, r2, r3
 800bd30:	001a      	movs	r2, r3
 800bd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd34:	189a      	adds	r2, r3, r2
 800bd36:	0008      	movs	r0, r1
 800bd38:	2320      	movs	r3, #32
 800bd3a:	18cb      	adds	r3, r1, r3
 800bd3c:	19db      	adds	r3, r3, r7
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	7811      	ldrb	r1, [r2, #0]
 800bd42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd44:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800bd46:	2320      	movs	r3, #32
 800bd48:	18c3      	adds	r3, r0, r3
 800bd4a:	19db      	adds	r3, r3, r7
 800bd4c:	781a      	ldrb	r2, [r3, #0]
 800bd4e:	2320      	movs	r3, #32
 800bd50:	18c3      	adds	r3, r0, r3
 800bd52:	19db      	adds	r3, r3, r7
 800bd54:	3201      	adds	r2, #1
 800bd56:	701a      	strb	r2, [r3, #0]
 800bd58:	2316      	movs	r3, #22
 800bd5a:	2220      	movs	r2, #32
 800bd5c:	189b      	adds	r3, r3, r2
 800bd5e:	19da      	adds	r2, r3, r7
 800bd60:	2322      	movs	r3, #34	@ 0x22
 800bd62:	18fb      	adds	r3, r7, r3
 800bd64:	7812      	ldrb	r2, [r2, #0]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d3d6      	bcc.n	800bd1a <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800bd6c:	2417      	movs	r4, #23
 800bd6e:	2320      	movs	r3, #32
 800bd70:	18e3      	adds	r3, r4, r3
 800bd72:	19db      	adds	r3, r3, r7
 800bd74:	781a      	ldrb	r2, [r3, #0]
 800bd76:	2322      	movs	r3, #34	@ 0x22
 800bd78:	18fb      	adds	r3, r7, r3
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	18d3      	adds	r3, r2, r3
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd82:	18d2      	adds	r2, r2, r3
 800bd84:	250b      	movs	r5, #11
 800bd86:	2320      	movs	r3, #32
 800bd88:	18eb      	adds	r3, r5, r3
 800bd8a:	19db      	adds	r3, r3, r7
 800bd8c:	7812      	ldrb	r2, [r2, #0]
 800bd8e:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800bd90:	2322      	movs	r3, #34	@ 0x22
 800bd92:	18fb      	adds	r3, r7, r3
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	3b01      	subs	r3, #1
 800bd98:	b2da      	uxtb	r2, r3
 800bd9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd9c:	0011      	movs	r1, r2
 800bd9e:	0018      	movs	r0, r3
 800bda0:	f000 f838 	bl	800be14 <CalculateCRC>
 800bda4:	0003      	movs	r3, r0
 800bda6:	001a      	movs	r2, r3
 800bda8:	2320      	movs	r3, #32
 800bdaa:	18eb      	adds	r3, r5, r3
 800bdac:	19db      	adds	r3, r3, r7
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d00c      	beq.n	800bdce <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800bdb4:	2320      	movs	r3, #32
 800bdb6:	18e3      	adds	r3, r4, r3
 800bdb8:	19db      	adds	r3, r3, r7
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	4a13      	ldr	r2, [pc, #76]	@ (800be0c <CheckCRC+0x18c>)
 800bdc0:	4913      	ldr	r1, [pc, #76]	@ (800be10 <CheckCRC+0x190>)
 800bdc2:	2001      	movs	r0, #1
 800bdc4:	f002 fb18 	bl	800e3f8 <CreateLine>
      return false;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	46b5      	mov	sp, r6
 800bdcc:	e019      	b.n	800be02 <CheckCRC+0x182>
 800bdce:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800bdd0:	2217      	movs	r2, #23
 800bdd2:	2320      	movs	r3, #32
 800bdd4:	18d3      	adds	r3, r2, r3
 800bdd6:	19db      	adds	r3, r3, r7
 800bdd8:	2120      	movs	r1, #32
 800bdda:	1852      	adds	r2, r2, r1
 800bddc:	19d1      	adds	r1, r2, r7
 800bdde:	2222      	movs	r2, #34	@ 0x22
 800bde0:	18ba      	adds	r2, r7, r2
 800bde2:	7809      	ldrb	r1, [r1, #0]
 800bde4:	7812      	ldrb	r2, [r2, #0]
 800bde6:	188a      	adds	r2, r1, r2
 800bde8:	701a      	strb	r2, [r3, #0]
 800bdea:	2317      	movs	r3, #23
 800bdec:	2220      	movs	r2, #32
 800bdee:	189b      	adds	r3, r3, r2
 800bdf0:	19da      	adds	r2, r3, r7
 800bdf2:	2323      	movs	r3, #35	@ 0x23
 800bdf4:	18fb      	adds	r3, r7, r3
 800bdf6:	7812      	ldrb	r2, [r2, #0]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d200      	bcs.n	800be00 <CheckCRC+0x180>
 800bdfe:	e754      	b.n	800bcaa <CheckCRC+0x2a>
    }
  }
  return true;
 800be00:	2301      	movs	r3, #1
}
 800be02:	0018      	movs	r0, r3
 800be04:	46bd      	mov	sp, r7
 800be06:	b00f      	add	sp, #60	@ 0x3c
 800be08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be0a:	46c0      	nop			@ (mov r8, r8)
 800be0c:	08024c7c 	.word	0x08024c7c
 800be10:	08024bb8 	.word	0x08024bb8

0800be14 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	000a      	movs	r2, r1
 800be1e:	1cfb      	adds	r3, r7, #3
 800be20:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800be22:	230f      	movs	r3, #15
 800be24:	18fb      	adds	r3, r7, r3
 800be26:	22ff      	movs	r2, #255	@ 0xff
 800be28:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800be2a:	230e      	movs	r3, #14
 800be2c:	18fb      	adds	r3, r7, r3
 800be2e:	2200      	movs	r2, #0
 800be30:	701a      	strb	r2, [r3, #0]
 800be32:	e037      	b.n	800bea4 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800be34:	230e      	movs	r3, #14
 800be36:	18fb      	adds	r3, r7, r3
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	18d3      	adds	r3, r2, r3
 800be3e:	7819      	ldrb	r1, [r3, #0]
 800be40:	220f      	movs	r2, #15
 800be42:	18bb      	adds	r3, r7, r2
 800be44:	18ba      	adds	r2, r7, r2
 800be46:	7812      	ldrb	r2, [r2, #0]
 800be48:	404a      	eors	r2, r1
 800be4a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800be4c:	230d      	movs	r3, #13
 800be4e:	18fb      	adds	r3, r7, r3
 800be50:	2200      	movs	r2, #0
 800be52:	701a      	strb	r2, [r3, #0]
 800be54:	e01b      	b.n	800be8e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800be56:	210f      	movs	r1, #15
 800be58:	187b      	adds	r3, r7, r1
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	b25b      	sxtb	r3, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	da09      	bge.n	800be76 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800be62:	187b      	adds	r3, r7, r1
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	005b      	lsls	r3, r3, #1
 800be68:	b25b      	sxtb	r3, r3
 800be6a:	2231      	movs	r2, #49	@ 0x31
 800be6c:	4053      	eors	r3, r2
 800be6e:	b25a      	sxtb	r2, r3
 800be70:	187b      	adds	r3, r7, r1
 800be72:	701a      	strb	r2, [r3, #0]
 800be74:	e005      	b.n	800be82 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800be76:	230f      	movs	r3, #15
 800be78:	18fa      	adds	r2, r7, r3
 800be7a:	18fb      	adds	r3, r7, r3
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	18db      	adds	r3, r3, r3
 800be80:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800be82:	210d      	movs	r1, #13
 800be84:	187b      	adds	r3, r7, r1
 800be86:	781a      	ldrb	r2, [r3, #0]
 800be88:	187b      	adds	r3, r7, r1
 800be8a:	3201      	adds	r2, #1
 800be8c:	701a      	strb	r2, [r3, #0]
 800be8e:	230d      	movs	r3, #13
 800be90:	18fb      	adds	r3, r7, r3
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	2b07      	cmp	r3, #7
 800be96:	d9de      	bls.n	800be56 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800be98:	210e      	movs	r1, #14
 800be9a:	187b      	adds	r3, r7, r1
 800be9c:	781a      	ldrb	r2, [r3, #0]
 800be9e:	187b      	adds	r3, r7, r1
 800bea0:	3201      	adds	r2, #1
 800bea2:	701a      	strb	r2, [r3, #0]
 800bea4:	230e      	movs	r3, #14
 800bea6:	18fa      	adds	r2, r7, r3
 800bea8:	1cfb      	adds	r3, r7, #3
 800beaa:	7812      	ldrb	r2, [r2, #0]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d3c0      	bcc.n	800be34 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800beb2:	230f      	movs	r3, #15
 800beb4:	18fb      	adds	r3, r7, r3
 800beb6:	781b      	ldrb	r3, [r3, #0]
}
 800beb8:	0018      	movs	r0, r3
 800beba:	46bd      	mov	sp, r7
 800bebc:	b004      	add	sp, #16
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4936      	ldr	r1, [pc, #216]	@ (800bfa8 <SGP_GetHT+0xe8>)
 800bed0:	1c18      	adds	r0, r3, #0
 800bed2:	f7f4 fcf5 	bl	80008c0 <__aeabi_fadd>
 800bed6:	1c03      	adds	r3, r0, #0
 800bed8:	4934      	ldr	r1, [pc, #208]	@ (800bfac <SGP_GetHT+0xec>)
 800beda:	1c18      	adds	r0, r3, #0
 800bedc:	f7f4 fe7a 	bl	8000bd4 <__aeabi_fdiv>
 800bee0:	1c03      	adds	r3, r0, #0
 800bee2:	4933      	ldr	r1, [pc, #204]	@ (800bfb0 <SGP_GetHT+0xf0>)
 800bee4:	1c18      	adds	r0, r3, #0
 800bee6:	f7f5 f85b 	bl	8000fa0 <__aeabi_fmul>
 800beea:	1c03      	adds	r3, r0, #0
 800beec:	1c18      	adds	r0, r3, #0
 800beee:	f7f4 fb95 	bl	800061c <__aeabi_f2uiz>
 800bef2:	0003      	movs	r3, r0
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	4b2f      	ldr	r3, [pc, #188]	@ (800bfb4 <SGP_GetHT+0xf4>)
 800bef8:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	492e      	ldr	r1, [pc, #184]	@ (800bfb8 <SGP_GetHT+0xf8>)
 800bf00:	1c18      	adds	r0, r3, #0
 800bf02:	f7f4 fe67 	bl	8000bd4 <__aeabi_fdiv>
 800bf06:	1c03      	adds	r3, r0, #0
 800bf08:	4929      	ldr	r1, [pc, #164]	@ (800bfb0 <SGP_GetHT+0xf0>)
 800bf0a:	1c18      	adds	r0, r3, #0
 800bf0c:	f7f5 f848 	bl	8000fa0 <__aeabi_fmul>
 800bf10:	1c03      	adds	r3, r0, #0
 800bf12:	1c18      	adds	r0, r3, #0
 800bf14:	f7f4 fb82 	bl	800061c <__aeabi_f2uiz>
 800bf18:	0003      	movs	r3, r0
 800bf1a:	b29a      	uxth	r2, r3
 800bf1c:	4b27      	ldr	r3, [pc, #156]	@ (800bfbc <SGP_GetHT+0xfc>)
 800bf1e:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800bf20:	4b26      	ldr	r3, [pc, #152]	@ (800bfbc <SGP_GetHT+0xfc>)
 800bf22:	881b      	ldrh	r3, [r3, #0]
 800bf24:	0a1b      	lsrs	r3, r3, #8
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	b2da      	uxtb	r2, r3
 800bf2a:	4b25      	ldr	r3, [pc, #148]	@ (800bfc0 <SGP_GetHT+0x100>)
 800bf2c:	709a      	strb	r2, [r3, #2]
 800bf2e:	4b24      	ldr	r3, [pc, #144]	@ (800bfc0 <SGP_GetHT+0x100>)
 800bf30:	789a      	ldrb	r2, [r3, #2]
 800bf32:	210c      	movs	r1, #12
 800bf34:	187b      	adds	r3, r7, r1
 800bf36:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800bf38:	4b20      	ldr	r3, [pc, #128]	@ (800bfbc <SGP_GetHT+0xfc>)
 800bf3a:	881b      	ldrh	r3, [r3, #0]
 800bf3c:	b2da      	uxtb	r2, r3
 800bf3e:	4b20      	ldr	r3, [pc, #128]	@ (800bfc0 <SGP_GetHT+0x100>)
 800bf40:	70da      	strb	r2, [r3, #3]
 800bf42:	4b1f      	ldr	r3, [pc, #124]	@ (800bfc0 <SGP_GetHT+0x100>)
 800bf44:	78da      	ldrb	r2, [r3, #3]
 800bf46:	187b      	adds	r3, r7, r1
 800bf48:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800bf4a:	187b      	adds	r3, r7, r1
 800bf4c:	2102      	movs	r1, #2
 800bf4e:	0018      	movs	r0, r3
 800bf50:	f7ff ff60 	bl	800be14 <CalculateCRC>
 800bf54:	0003      	movs	r3, r0
 800bf56:	001a      	movs	r2, r3
 800bf58:	4b19      	ldr	r3, [pc, #100]	@ (800bfc0 <SGP_GetHT+0x100>)
 800bf5a:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800bf5c:	4b15      	ldr	r3, [pc, #84]	@ (800bfb4 <SGP_GetHT+0xf4>)
 800bf5e:	881b      	ldrh	r3, [r3, #0]
 800bf60:	0a1b      	lsrs	r3, r3, #8
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	4b16      	ldr	r3, [pc, #88]	@ (800bfc0 <SGP_GetHT+0x100>)
 800bf68:	715a      	strb	r2, [r3, #5]
 800bf6a:	4b15      	ldr	r3, [pc, #84]	@ (800bfc0 <SGP_GetHT+0x100>)
 800bf6c:	795a      	ldrb	r2, [r3, #5]
 800bf6e:	2108      	movs	r1, #8
 800bf70:	187b      	adds	r3, r7, r1
 800bf72:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800bf74:	4b0f      	ldr	r3, [pc, #60]	@ (800bfb4 <SGP_GetHT+0xf4>)
 800bf76:	881b      	ldrh	r3, [r3, #0]
 800bf78:	b2da      	uxtb	r2, r3
 800bf7a:	4b11      	ldr	r3, [pc, #68]	@ (800bfc0 <SGP_GetHT+0x100>)
 800bf7c:	719a      	strb	r2, [r3, #6]
 800bf7e:	4b10      	ldr	r3, [pc, #64]	@ (800bfc0 <SGP_GetHT+0x100>)
 800bf80:	799a      	ldrb	r2, [r3, #6]
 800bf82:	187b      	adds	r3, r7, r1
 800bf84:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800bf86:	187b      	adds	r3, r7, r1
 800bf88:	2102      	movs	r1, #2
 800bf8a:	0018      	movs	r0, r3
 800bf8c:	f7ff ff42 	bl	800be14 <CalculateCRC>
 800bf90:	0003      	movs	r3, r0
 800bf92:	001a      	movs	r2, r3
 800bf94:	4b0a      	ldr	r3, [pc, #40]	@ (800bfc0 <SGP_GetHT+0x100>)
 800bf96:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800bf98:	4b0a      	ldr	r3, [pc, #40]	@ (800bfc4 <SGP_GetHT+0x104>)
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	701a      	strb	r2, [r3, #0]
}
 800bf9e:	46c0      	nop			@ (mov r8, r8)
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	b004      	add	sp, #16
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	46c0      	nop			@ (mov r8, r8)
 800bfa8:	42340000 	.word	0x42340000
 800bfac:	432f0000 	.word	0x432f0000
 800bfb0:	477fff00 	.word	0x477fff00
 800bfb4:	20001346 	.word	0x20001346
 800bfb8:	42c80000 	.word	0x42c80000
 800bfbc:	20001344 	.word	0x20001344
 800bfc0:	20000098 	.word	0x20000098
 800bfc4:	20001348 	.word	0x20001348

0800bfc8 <SGP_SoftReset>:
    }
  }
  return false;
}

void SGP_SoftReset(void) {
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	af00      	add	r7, sp, #0
  /* Joris: Datasheet mentioned this was a general reset command, which is odd.
  // But if something happens to the i2c bus, this might be the issue.
  Worth mentioning. */
  // Danny: Its not odd, its a general reset command which is a standard syntaxis. So do not use blind.
  // This command could take from 0.1 to 1ms.
  Debug("SGP40 brought to idle");
 800bfcc:	4a09      	ldr	r2, [pc, #36]	@ (800bff4 <SGP_SoftReset+0x2c>)
 800bfce:	4b0a      	ldr	r3, [pc, #40]	@ (800bff8 <SGP_SoftReset+0x30>)
 800bfd0:	0019      	movs	r1, r3
 800bfd2:	2003      	movs	r0, #3
 800bfd4:	f002 fa10 	bl	800e3f8 <CreateLine>
  SGP_TurnHeaterOff();
 800bfd8:	f7ff fbf4 	bl	800b7c4 <SGP_TurnHeaterOff>
  HAL_Delay(10);
 800bfdc:	200a      	movs	r0, #10
 800bfde:	f002 fe6b 	bl	800ecb8 <HAL_Delay>
  WriteRegister(SGP_I2C_ADDRESS, SoftResetBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800bfe2:	4b06      	ldr	r3, [pc, #24]	@ (800bffc <SGP_SoftReset+0x34>)
 800bfe4:	2202      	movs	r2, #2
 800bfe6:	0019      	movs	r1, r3
 800bfe8:	2059      	movs	r0, #89	@ 0x59
 800bfea:	f7ff fb1d 	bl	800b628 <WriteRegister>
}
 800bfee:	46c0      	nop			@ (mov r8, r8)
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	08024d24 	.word	0x08024d24
 800bff8:	08024c00 	.word	0x08024c00
 800bffc:	200000a0 	.word	0x200000a0

0800c000 <ResetVOCresult>:

void ResetVOCresult(void) {
 800c000:	b580      	push	{r7, lr}
 800c002:	af00      	add	r7, sp, #0
  vocIndex = 0;
 800c004:	4b02      	ldr	r3, [pc, #8]	@ (800c010 <ResetVOCresult+0x10>)
 800c006:	2200      	movs	r2, #0
 800c008:	601a      	str	r2, [r3, #0]
}
 800c00a:	46c0      	nop			@ (mov r8, r8)
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	2000134c 	.word	0x2000134c

0800c014 <SGP_Upkeep>:
SGP40State SGP_Upkeep(void) {
 800c014:	b580      	push	{r7, lr}
 800c016:	af00      	add	r7, sp, #0
  static SGP40State SGPState = SGP_STATE_INIT;
  switch(SGPState) {
 800c018:	4b34      	ldr	r3, [pc, #208]	@ (800c0ec <SGP_Upkeep+0xd8>)
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	2b07      	cmp	r3, #7
 800c01e:	d858      	bhi.n	800c0d2 <SGP_Upkeep+0xbe>
 800c020:	009a      	lsls	r2, r3, #2
 800c022:	4b33      	ldr	r3, [pc, #204]	@ (800c0f0 <SGP_Upkeep+0xdc>)
 800c024:	18d3      	adds	r3, r2, r3
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	469f      	mov	pc, r3
  case SGP_STATE_OFF:
    Debug("Measurements are turned off for SGP40.");
 800c02a:	4a32      	ldr	r2, [pc, #200]	@ (800c0f4 <SGP_Upkeep+0xe0>)
 800c02c:	4b32      	ldr	r3, [pc, #200]	@ (800c0f8 <SGP_Upkeep+0xe4>)
 800c02e:	0019      	movs	r1, r3
 800c030:	2003      	movs	r0, #3
 800c032:	f002 f9e1 	bl	800e3f8 <CreateLine>
    break;
 800c036:	e053      	b.n	800c0e0 <SGP_Upkeep+0xcc>

  case SGP_STATE_INIT:
    ResetVOCresult();
 800c038:	f7ff ffe2 	bl	800c000 <ResetVOCresult>
    SGPState = SGP_STATE_START_MEASUREMENTS;
 800c03c:	4b2b      	ldr	r3, [pc, #172]	@ (800c0ec <SGP_Upkeep+0xd8>)
 800c03e:	2201      	movs	r2, #1
 800c040:	701a      	strb	r2, [r3, #0]
    break;
 800c042:	e04d      	b.n	800c0e0 <SGP_Upkeep+0xcc>

  case SGP_STATE_START_MEASUREMENTS:
    SGP_StartMeasurement();
 800c044:	f7ff fb5c 	bl	800b700 <SGP_StartMeasurement>
    SetMeasurementIndicator();
 800c048:	f001 f95e 	bl	800d308 <SetMeasurementIndicator>
    SGPState = SGP_STATE_WAIT_FOR_COMPLETION;
 800c04c:	4b27      	ldr	r3, [pc, #156]	@ (800c0ec <SGP_Upkeep+0xd8>)
 800c04e:	2202      	movs	r2, #2
 800c050:	701a      	strb	r2, [r3, #0]
    break;
 800c052:	e045      	b.n	800c0e0 <SGP_Upkeep+0xcc>

  case SGP_STATE_WAIT_FOR_COMPLETION:
    if(SGP_GetMeasurementValues(&vocIndex)) {
 800c054:	4b29      	ldr	r3, [pc, #164]	@ (800c0fc <SGP_Upkeep+0xe8>)
 800c056:	0018      	movs	r0, r3
 800c058:	f7ff fbc2 	bl	800b7e0 <SGP_GetMeasurementValues>
 800c05c:	1e03      	subs	r3, r0, #0
 800c05e:	d03c      	beq.n	800c0da <SGP_Upkeep+0xc6>
      SGPState = SGP_STATE_PROCESS_RESULTS;
 800c060:	4b22      	ldr	r3, [pc, #136]	@ (800c0ec <SGP_Upkeep+0xd8>)
 800c062:	2203      	movs	r2, #3
 800c064:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c066:	e038      	b.n	800c0da <SGP_Upkeep+0xc6>

  case SGP_STATE_PROCESS_RESULTS:
//    Debug("Processing results in SGP_STATE_PROCESS_RESULTS.");
    setVOC(vocIndex);
 800c068:	4b24      	ldr	r3, [pc, #144]	@ (800c0fc <SGP_Upkeep+0xe8>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	0018      	movs	r0, r3
 800c070:	f7f7 fc68 	bl	8003944 <setVOC>
    SGPState = SGP_WAIT_STATE_MODE;
 800c074:	4b1d      	ldr	r3, [pc, #116]	@ (800c0ec <SGP_Upkeep+0xd8>)
 800c076:	2206      	movs	r2, #6
 800c078:	701a      	strb	r2, [r3, #0]
    break;
 800c07a:	e031      	b.n	800c0e0 <SGP_Upkeep+0xcc>
  case SGP_WAIT_STATE_MODE:
    SGPState = SGP_STATE_WAIT;
 800c07c:	4b1b      	ldr	r3, [pc, #108]	@ (800c0ec <SGP_Upkeep+0xd8>)
 800c07e:	2207      	movs	r2, #7
 800c080:	701a      	strb	r2, [r3, #0]
    if ((sgp40samplecounter == 1) && (!usbPluggedIn)) {
 800c082:	4b1f      	ldr	r3, [pc, #124]	@ (800c100 <SGP_Upkeep+0xec>)
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	2b01      	cmp	r3, #1
 800c088:	d10b      	bne.n	800c0a2 <SGP_Upkeep+0x8e>
 800c08a:	4b1e      	ldr	r3, [pc, #120]	@ (800c104 <SGP_Upkeep+0xf0>)
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	2201      	movs	r2, #1
 800c090:	4053      	eors	r3, r2
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b00      	cmp	r3, #0
 800c096:	d004      	beq.n	800c0a2 <SGP_Upkeep+0x8e>
      // restart the SGP40 with a soft reset to enter idle mode
      SGP_SoftReset();
 800c098:	f7ff ff96 	bl	800bfc8 <SGP_SoftReset>
      SetVOCSensorStatus(false);
 800c09c:	2000      	movs	r0, #0
 800c09e:	f7fc f97f 	bl	80083a0 <SetVOCSensorStatus>
    }
    SGP40TimeStamp = HAL_GetTick() + 800;  // about every 1 seconds
 800c0a2:	f002 fdff 	bl	800eca4 <HAL_GetTick>
 800c0a6:	0003      	movs	r3, r0
 800c0a8:	22c8      	movs	r2, #200	@ 0xc8
 800c0aa:	0092      	lsls	r2, r2, #2
 800c0ac:	189a      	adds	r2, r3, r2
 800c0ae:	4b16      	ldr	r3, [pc, #88]	@ (800c108 <SGP_Upkeep+0xf4>)
 800c0b0:	601a      	str	r2, [r3, #0]
    ResetMeasurementIndicator();
 800c0b2:	f001 f941 	bl	800d338 <ResetMeasurementIndicator>
  break;
 800c0b6:	e013      	b.n	800c0e0 <SGP_Upkeep+0xcc>
  case SGP_STATE_WAIT:
    if(TimestampIsReached(SGP40TimeStamp)){
 800c0b8:	4b13      	ldr	r3, [pc, #76]	@ (800c108 <SGP_Upkeep+0xf4>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	0018      	movs	r0, r3
 800c0be:	f002 f945 	bl	800e34c <TimestampIsReached>
 800c0c2:	1e03      	subs	r3, r0, #0
 800c0c4:	d00b      	beq.n	800c0de <SGP_Upkeep+0xca>
//      Debug("in SGP_STATE_WAIT");
      SetSGP40_GasIndexAlgorithm_Sampling_Interval(); // set the correct sample interval
 800c0c6:	f7ff fb03 	bl	800b6d0 <SetSGP40_GasIndexAlgorithm_Sampling_Interval>
      SGPState = SGP_STATE_INIT;
 800c0ca:	4b08      	ldr	r3, [pc, #32]	@ (800c0ec <SGP_Upkeep+0xd8>)
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c0d0:	e005      	b.n	800c0de <SGP_Upkeep+0xca>

  default:
    // Handle unexpected state
    SGPState = SGP_STATE_INIT;
 800c0d2:	4b06      	ldr	r3, [pc, #24]	@ (800c0ec <SGP_Upkeep+0xd8>)
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	701a      	strb	r2, [r3, #0]
    break;
 800c0d8:	e002      	b.n	800c0e0 <SGP_Upkeep+0xcc>
    break;
 800c0da:	46c0      	nop			@ (mov r8, r8)
 800c0dc:	e000      	b.n	800c0e0 <SGP_Upkeep+0xcc>
    break;
 800c0de:	46c0      	nop			@ (mov r8, r8)
  }
  return SGPState;
 800c0e0:	4b02      	ldr	r3, [pc, #8]	@ (800c0ec <SGP_Upkeep+0xd8>)
 800c0e2:	781b      	ldrb	r3, [r3, #0]
}
 800c0e4:	0018      	movs	r0, r3
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	46c0      	nop			@ (mov r8, r8)
 800c0ec:	20001356 	.word	0x20001356
 800c0f0:	0802548c 	.word	0x0802548c
 800c0f4:	08024d3c 	.word	0x08024d3c
 800c0f8:	08024c00 	.word	0x08024c00
 800c0fc:	2000134c 	.word	0x2000134c
 800c100:	20001296 	.word	0x20001296
 800c104:	200021f1 	.word	0x200021f1
 800c108:	20001298 	.word	0x20001298

0800c10c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	0002      	movs	r2, r0
 800c114:	1dfb      	adds	r3, r7, #7
 800c116:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c118:	1dfb      	adds	r3, r7, #7
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c11e:	d809      	bhi.n	800c134 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c120:	1dfb      	adds	r3, r7, #7
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	001a      	movs	r2, r3
 800c126:	231f      	movs	r3, #31
 800c128:	401a      	ands	r2, r3
 800c12a:	4b04      	ldr	r3, [pc, #16]	@ (800c13c <__NVIC_EnableIRQ+0x30>)
 800c12c:	2101      	movs	r1, #1
 800c12e:	4091      	lsls	r1, r2
 800c130:	000a      	movs	r2, r1
 800c132:	601a      	str	r2, [r3, #0]
  }
}
 800c134:	46c0      	nop			@ (mov r8, r8)
 800c136:	46bd      	mov	sp, r7
 800c138:	b002      	add	sp, #8
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	e000e100 	.word	0xe000e100

0800c140 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	0002      	movs	r2, r0
 800c148:	1dfb      	adds	r3, r7, #7
 800c14a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c14c:	1dfb      	adds	r3, r7, #7
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	2b7f      	cmp	r3, #127	@ 0x7f
 800c152:	d810      	bhi.n	800c176 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c154:	1dfb      	adds	r3, r7, #7
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	001a      	movs	r2, r3
 800c15a:	231f      	movs	r3, #31
 800c15c:	4013      	ands	r3, r2
 800c15e:	4908      	ldr	r1, [pc, #32]	@ (800c180 <__NVIC_DisableIRQ+0x40>)
 800c160:	2201      	movs	r2, #1
 800c162:	409a      	lsls	r2, r3
 800c164:	0013      	movs	r3, r2
 800c166:	2280      	movs	r2, #128	@ 0x80
 800c168:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800c16a:	f3bf 8f4f 	dsb	sy
}
 800c16e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c170:	f3bf 8f6f 	isb	sy
}
 800c174:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800c176:	46c0      	nop			@ (mov r8, r8)
 800c178:	46bd      	mov	sp, r7
 800c17a:	b002      	add	sp, #8
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	46c0      	nop			@ (mov r8, r8)
 800c180:	e000e100 	.word	0xe000e100

0800c184 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800c184:	b5b0      	push	{r4, r5, r7, lr}
 800c186:	b088      	sub	sp, #32
 800c188:	af02      	add	r7, sp, #8
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	0008      	movs	r0, r1
 800c18e:	0011      	movs	r1, r2
 800c190:	1cfb      	adds	r3, r7, #3
 800c192:	1c02      	adds	r2, r0, #0
 800c194:	701a      	strb	r2, [r3, #0]
 800c196:	1cbb      	adds	r3, r7, #2
 800c198:	1c0a      	adds	r2, r1, #0
 800c19a:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800c19c:	4b5b      	ldr	r3, [pc, #364]	@ (800c30c <getSoundData+0x188>)
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	4053      	eors	r3, r2
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d107      	bne.n	800c1bc <getSoundData+0x38>
 800c1ac:	4b58      	ldr	r3, [pc, #352]	@ (800c310 <getSoundData+0x18c>)
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	4053      	eors	r3, r2
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d001      	beq.n	800c1c0 <getSoundData+0x3c>
    {
        return false;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	e0a0      	b.n	800c302 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800c1c0:	4b54      	ldr	r3, [pc, #336]	@ (800c314 <getSoundData+0x190>)
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d005      	beq.n	800c1d6 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c1ca:	4b53      	ldr	r3, [pc, #332]	@ (800c318 <getSoundData+0x194>)
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	b25b      	sxtb	r3, r3
 800c1d0:	0018      	movs	r0, r3
 800c1d2:	f7ff ffb5 	bl	800c140 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800c1d6:	f3bf 8f4f 	dsb	sy
}
 800c1da:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800c1dc:	f3bf 8f6f 	isb	sy
}
 800c1e0:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800c1e2:	1cfb      	adds	r3, r7, #3
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d04c      	beq.n	800c284 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800c1ea:	4b4c      	ldr	r3, [pc, #304]	@ (800c31c <getSoundData+0x198>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d11b      	bne.n	800c22a <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c1fe:	2300      	movs	r3, #0
 800c200:	617b      	str	r3, [r7, #20]
 800c202:	e00e      	b.n	800c222 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	18d3      	adds	r3, r2, r3
 800c20a:	3302      	adds	r3, #2
 800c20c:	2200      	movs	r2, #0
 800c20e:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	18d3      	adds	r3, r2, r3
 800c216:	3308      	adds	r3, #8
 800c218:	2200      	movs	r2, #0
 800c21a:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	3301      	adds	r3, #1
 800c220:	617b      	str	r3, [r7, #20]
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	2b05      	cmp	r3, #5
 800c226:	d9ed      	bls.n	800c204 <getSoundData+0x80>
 800c228:	e02c      	b.n	800c284 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	1c59      	adds	r1, r3, #1
 800c230:	4b3b      	ldr	r3, [pc, #236]	@ (800c320 <getSoundData+0x19c>)
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	4b3b      	ldr	r3, [pc, #236]	@ (800c324 <getSoundData+0x1a0>)
 800c236:	681c      	ldr	r4, [r3, #0]
 800c238:	4b38      	ldr	r3, [pc, #224]	@ (800c31c <getSoundData+0x198>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	0023      	movs	r3, r4
 800c240:	f000 fde8 	bl	800ce14 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c244:	2300      	movs	r3, #0
 800c246:	613b      	str	r3, [r7, #16]
 800c248:	e019      	b.n	800c27e <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	18d3      	adds	r3, r2, r3
 800c250:	1c98      	adds	r0, r3, #2
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	3308      	adds	r3, #8
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800c25a:	4b33      	ldr	r3, [pc, #204]	@ (800c328 <getSoundData+0x1a4>)
 800c25c:	693a      	ldr	r2, [r7, #16]
 800c25e:	0092      	lsls	r2, r2, #2
 800c260:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800c262:	4b32      	ldr	r3, [pc, #200]	@ (800c32c <getSoundData+0x1a8>)
 800c264:	693a      	ldr	r2, [r7, #16]
 800c266:	0092      	lsls	r2, r2, #2
 800c268:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800c26a:	4b2c      	ldr	r3, [pc, #176]	@ (800c31c <getSoundData+0x198>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	0013      	movs	r3, r2
 800c272:	0022      	movs	r2, r4
 800c274:	f000 fdce 	bl	800ce14 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	3301      	adds	r3, #1
 800c27c:	613b      	str	r3, [r7, #16]
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	2b05      	cmp	r3, #5
 800c282:	d9e2      	bls.n	800c24a <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800c284:	1cbb      	adds	r3, r7, #2
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d028      	beq.n	800c2de <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800c28c:	240e      	movs	r4, #14
 800c28e:	193b      	adds	r3, r7, r4
 800c290:	2200      	movs	r2, #0
 800c292:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800c294:	250d      	movs	r5, #13
 800c296:	197b      	adds	r3, r7, r5
 800c298:	2200      	movs	r2, #0
 800c29a:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800c29c:	4b24      	ldr	r3, [pc, #144]	@ (800c330 <getSoundData+0x1ac>)
 800c29e:	6818      	ldr	r0, [r3, #0]
 800c2a0:	4924      	ldr	r1, [pc, #144]	@ (800c334 <getSoundData+0x1b0>)
 800c2a2:	197b      	adds	r3, r7, r5
 800c2a4:	193a      	adds	r2, r7, r4
 800c2a6:	f000 fe59 	bl	800cf5c <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800c2aa:	193b      	adds	r3, r7, r4
 800c2ac:	881a      	ldrh	r2, [r3, #0]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	21ff      	movs	r1, #255	@ 0xff
 800c2b2:	4011      	ands	r1, r2
 800c2b4:	000c      	movs	r4, r1
 800c2b6:	7b99      	ldrb	r1, [r3, #14]
 800c2b8:	2000      	movs	r0, #0
 800c2ba:	4001      	ands	r1, r0
 800c2bc:	1c08      	adds	r0, r1, #0
 800c2be:	1c21      	adds	r1, r4, #0
 800c2c0:	4301      	orrs	r1, r0
 800c2c2:	7399      	strb	r1, [r3, #14]
 800c2c4:	0a12      	lsrs	r2, r2, #8
 800c2c6:	b290      	uxth	r0, r2
 800c2c8:	7bda      	ldrb	r2, [r3, #15]
 800c2ca:	2100      	movs	r1, #0
 800c2cc:	400a      	ands	r2, r1
 800c2ce:	1c11      	adds	r1, r2, #0
 800c2d0:	1c02      	adds	r2, r0, #0
 800c2d2:	430a      	orrs	r2, r1
 800c2d4:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800c2d6:	197b      	adds	r3, r7, r5
 800c2d8:	781a      	ldrb	r2, [r3, #0]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800c2de:	f000 f86f 	bl	800c3c0 <micSettlingComplete>
 800c2e2:	0003      	movs	r3, r0
 800c2e4:	001a      	movs	r2, r3
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800c2ea:	4b0a      	ldr	r3, [pc, #40]	@ (800c314 <getSoundData+0x190>)
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d005      	beq.n	800c300 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c2f4:	4b08      	ldr	r3, [pc, #32]	@ (800c318 <getSoundData+0x194>)
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	b25b      	sxtb	r3, r3
 800c2fa:	0018      	movs	r0, r3
 800c2fc:	f7ff ff06 	bl	800c10c <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800c300:	2301      	movs	r3, #1
}
 800c302:	0018      	movs	r0, r3
 800c304:	46bd      	mov	sp, r7
 800c306:	b006      	add	sp, #24
 800c308:	bdb0      	pop	{r4, r5, r7, pc}
 800c30a:	46c0      	nop			@ (mov r8, r8)
 800c30c:	20001358 	.word	0x20001358
 800c310:	2000135b 	.word	0x2000135b
 800c314:	2000135a 	.word	0x2000135a
 800c318:	20001da8 	.word	0x20001da8
 800c31c:	20001de4 	.word	0x20001de4
 800c320:	20001dac 	.word	0x20001dac
 800c324:	20001db0 	.word	0x20001db0
 800c328:	20001db4 	.word	0x20001db4
 800c32c:	20001dcc 	.word	0x20001dcc
 800c330:	20001360 	.word	0x20001360
 800c334:	3b5c7333 	.word	0x3b5c7333

0800c338 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
 800c344:	001a      	movs	r2, r3
 800c346:	1cfb      	adds	r3, r7, #3
 800c348:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800c34a:	4b09      	ldr	r3, [pc, #36]	@ (800c370 <soundInit+0x38>)
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800c350:	4b08      	ldr	r3, [pc, #32]	@ (800c374 <soundInit+0x3c>)
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800c356:	4b08      	ldr	r3, [pc, #32]	@ (800c378 <soundInit+0x40>)
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800c35c:	4b07      	ldr	r3, [pc, #28]	@ (800c37c <soundInit+0x44>)
 800c35e:	2200      	movs	r2, #0
 800c360:	569a      	ldrsb	r2, [r3, r2]
 800c362:	4b06      	ldr	r3, [pc, #24]	@ (800c37c <soundInit+0x44>)
 800c364:	701a      	strb	r2, [r3, #0]

    return true;
 800c366:	2301      	movs	r3, #1
}
 800c368:	0018      	movs	r0, r3
 800c36a:	46bd      	mov	sp, r7
 800c36c:	b004      	add	sp, #16
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	20001da0 	.word	0x20001da0
 800c374:	20001d9c 	.word	0x20001d9c
 800c378:	20001da4 	.word	0x20001da4
 800c37c:	20001da8 	.word	0x20001da8

0800c380 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800c384:	4b02      	ldr	r3, [pc, #8]	@ (800c390 <clearMaximumAmplitude+0x10>)
 800c386:	2200      	movs	r2, #0
 800c388:	601a      	str	r2, [r3, #0]
}
 800c38a:	46c0      	nop			@ (mov r8, r8)
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	20001360 	.word	0x20001360

0800c394 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800c398:	4b08      	ldr	r3, [pc, #32]	@ (800c3bc <startMicSettlingPeriod+0x28>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800c3a2:	4b06      	ldr	r3, [pc, #24]	@ (800c3bc <startMicSettlingPeriod+0x28>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	0018      	movs	r0, r3
 800c3a8:	f00a fa40 	bl	801682c <HAL_TIM_Base_Start>
 800c3ac:	1e03      	subs	r3, r0, #0
 800c3ae:	d001      	beq.n	800c3b4 <startMicSettlingPeriod+0x20>
    {
        return false;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	e000      	b.n	800c3b6 <startMicSettlingPeriod+0x22>
    }
    return true;
 800c3b4:	2301      	movs	r3, #1
}
 800c3b6:	0018      	movs	r0, r3
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	20001d9c 	.word	0x20001d9c

0800c3c0 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800c3c6:	4b0e      	ldr	r3, [pc, #56]	@ (800c400 <micSettlingComplete+0x40>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	691b      	ldr	r3, [r3, #16]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	401a      	ands	r2, r3
 800c3d2:	1dfb      	adds	r3, r7, #7
 800c3d4:	3a01      	subs	r2, #1
 800c3d6:	4251      	negs	r1, r2
 800c3d8:	414a      	adcs	r2, r1
 800c3da:	701a      	strb	r2, [r3, #0]
    if (complete)
 800c3dc:	1dfb      	adds	r3, r7, #7
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d007      	beq.n	800c3f4 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800c3e4:	4b06      	ldr	r3, [pc, #24]	@ (800c400 <micSettlingComplete+0x40>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	0018      	movs	r0, r3
 800c3ea:	f00a fa69 	bl	80168c0 <HAL_TIM_Base_Stop>
      DataReady = true;
 800c3ee:	4b05      	ldr	r3, [pc, #20]	@ (800c404 <micSettlingComplete+0x44>)
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800c3f4:	1dfb      	adds	r3, r7, #7
 800c3f6:	781b      	ldrb	r3, [r3, #0]
}
 800c3f8:	0018      	movs	r0, r3
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	b002      	add	sp, #8
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	20001d9c 	.word	0x20001d9c
 800c404:	20001357 	.word	0x20001357

0800c408 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	0002      	movs	r2, r0
 800c410:	1dfb      	adds	r3, r7, #7
 800c412:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800c414:	4b29      	ldr	r3, [pc, #164]	@ (800c4bc <enableMicrophone+0xb4>)
 800c416:	781b      	ldrb	r3, [r3, #0]
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	1dfa      	adds	r2, r7, #7
 800c41c:	7812      	ldrb	r2, [r2, #0]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d101      	bne.n	800c426 <enableMicrophone+0x1e>
    {
        return true;
 800c422:	2301      	movs	r3, #1
 800c424:	e045      	b.n	800c4b2 <enableMicrophone+0xaa>
    }
    if (bEnable)
 800c426:	1dfb      	adds	r3, r7, #7
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d025      	beq.n	800c47a <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800c42e:	f7ff ffb1 	bl	800c394 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800c432:	4b23      	ldr	r3, [pc, #140]	@ (800c4c0 <enableMicrophone+0xb8>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2280      	movs	r2, #128	@ 0x80
 800c438:	0092      	lsls	r2, r2, #2
 800c43a:	4922      	ldr	r1, [pc, #136]	@ (800c4c4 <enableMicrophone+0xbc>)
 800c43c:	0018      	movs	r0, r3
 800c43e:	f006 fc5f 	bl	8012d00 <HAL_I2S_Receive_DMA>
 800c442:	1e03      	subs	r3, r0, #0
 800c444:	d001      	beq.n	800c44a <enableMicrophone+0x42>
        {
            return false;
 800c446:	2300      	movs	r3, #0
 800c448:	e033      	b.n	800c4b2 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800c44a:	f7ff ff99 	bl	800c380 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800c44e:	4b1e      	ldr	r3, [pc, #120]	@ (800c4c8 <enableMicrophone+0xc0>)
 800c450:	2200      	movs	r2, #0
 800c452:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800c454:	4b1d      	ldr	r3, [pc, #116]	@ (800c4cc <enableMicrophone+0xc4>)
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	b25b      	sxtb	r3, r3
 800c45a:	0018      	movs	r0, r3
 800c45c:	f7ff fe56 	bl	800c10c <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800c460:	4b1b      	ldr	r3, [pc, #108]	@ (800c4d0 <enableMicrophone+0xc8>)
 800c462:	2201      	movs	r2, #1
 800c464:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800c466:	4b15      	ldr	r3, [pc, #84]	@ (800c4bc <enableMicrophone+0xb4>)
 800c468:	2201      	movs	r2, #1
 800c46a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c46c:	4b19      	ldr	r3, [pc, #100]	@ (800c4d4 <enableMicrophone+0xcc>)
 800c46e:	2200      	movs	r2, #0
 800c470:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c472:	4b19      	ldr	r3, [pc, #100]	@ (800c4d8 <enableMicrophone+0xd0>)
 800c474:	2200      	movs	r2, #0
 800c476:	701a      	strb	r2, [r3, #0]
 800c478:	e01a      	b.n	800c4b0 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800c47a:	4b14      	ldr	r3, [pc, #80]	@ (800c4cc <enableMicrophone+0xc4>)
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	b25b      	sxtb	r3, r3
 800c480:	0018      	movs	r0, r3
 800c482:	f7ff fe5d 	bl	800c140 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800c486:	4b12      	ldr	r3, [pc, #72]	@ (800c4d0 <enableMicrophone+0xc8>)
 800c488:	2200      	movs	r2, #0
 800c48a:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800c48c:	4b11      	ldr	r3, [pc, #68]	@ (800c4d4 <enableMicrophone+0xcc>)
 800c48e:	2200      	movs	r2, #0
 800c490:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800c492:	4b11      	ldr	r3, [pc, #68]	@ (800c4d8 <enableMicrophone+0xd0>)
 800c494:	2200      	movs	r2, #0
 800c496:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800c498:	4b09      	ldr	r3, [pc, #36]	@ (800c4c0 <enableMicrophone+0xb8>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	0018      	movs	r0, r3
 800c49e:	f006 fcf1 	bl	8012e84 <HAL_I2S_DMAStop>
 800c4a2:	1e03      	subs	r3, r0, #0
 800c4a4:	d001      	beq.n	800c4aa <enableMicrophone+0xa2>
        {
            return false;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	e003      	b.n	800c4b2 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800c4aa:	4b04      	ldr	r3, [pc, #16]	@ (800c4bc <enableMicrophone+0xb4>)
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800c4b0:	2301      	movs	r3, #1
}
 800c4b2:	0018      	movs	r0, r3
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	b002      	add	sp, #8
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	46c0      	nop			@ (mov r8, r8)
 800c4bc:	20001358 	.word	0x20001358
 800c4c0:	20001da0 	.word	0x20001da0
 800c4c4:	2000139c 	.word	0x2000139c
 800c4c8:	2000135c 	.word	0x2000135c
 800c4cc:	20001da8 	.word	0x20001da8
 800c4d0:	2000135a 	.word	0x2000135a
 800c4d4:	20001359 	.word	0x20001359
 800c4d8:	2000135b 	.word	0x2000135b

0800c4dc <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800c4e0:	4b0c      	ldr	r3, [pc, #48]	@ (800c514 <startSPLcalculation+0x38>)
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	4053      	eors	r3, r2
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d001      	beq.n	800c4f4 <startSPLcalculation+0x18>
    {
        return false;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	e00c      	b.n	800c50e <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800c4f4:	4b08      	ldr	r3, [pc, #32]	@ (800c518 <startSPLcalculation+0x3c>)
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d001      	beq.n	800c502 <startSPLcalculation+0x26>
    {
        return true;
 800c4fe:	2301      	movs	r3, #1
 800c500:	e005      	b.n	800c50e <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800c502:	f000 fb63 	bl	800cbcc <resetSPLstate>
    SPLcalcEnabled = true;
 800c506:	4b04      	ldr	r3, [pc, #16]	@ (800c518 <startSPLcalculation+0x3c>)
 800c508:	2201      	movs	r2, #1
 800c50a:	701a      	strb	r2, [r3, #0]
    return true;
 800c50c:	2301      	movs	r3, #1
}
 800c50e:	0018      	movs	r0, r3
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	20001358 	.word	0x20001358
 800c518:	20001359 	.word	0x20001359

0800c51c <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c524:	4b05      	ldr	r3, [pc, #20]	@ (800c53c <HAL_I2S_RxHalfCpltCallback+0x20>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d102      	bne.n	800c534 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800c52e:	2000      	movs	r0, #0
 800c530:	f000 f81a 	bl	800c568 <processHalfDMAbuffer>
  }
}
 800c534:	46c0      	nop			@ (mov r8, r8)
 800c536:	46bd      	mov	sp, r7
 800c538:	b002      	add	sp, #8
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	20001da0 	.word	0x20001da0

0800c540 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c548:	4b06      	ldr	r3, [pc, #24]	@ (800c564 <HAL_I2S_RxCpltCallback+0x24>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d104      	bne.n	800c55c <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800c552:	2380      	movs	r3, #128	@ 0x80
 800c554:	009b      	lsls	r3, r3, #2
 800c556:	0018      	movs	r0, r3
 800c558:	f000 f806 	bl	800c568 <processHalfDMAbuffer>
  }
}
 800c55c:	46c0      	nop			@ (mov r8, r8)
 800c55e:	46bd      	mov	sp, r7
 800c560:	b002      	add	sp, #8
 800c562:	bd80      	pop	{r7, pc}
 800c564:	20001da0 	.word	0x20001da0

0800c568 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	005a      	lsls	r2, r3, #1
 800c574:	4b15      	ldr	r3, [pc, #84]	@ (800c5cc <processHalfDMAbuffer+0x64>)
 800c576:	18d3      	adds	r3, r2, r3
 800c578:	4a15      	ldr	r2, [pc, #84]	@ (800c5d0 <processHalfDMAbuffer+0x68>)
 800c57a:	2180      	movs	r1, #128	@ 0x80
 800c57c:	0089      	lsls	r1, r1, #2
 800c57e:	0018      	movs	r0, r3
 800c580:	f000 fd35 	bl	800cfee <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800c584:	4b13      	ldr	r3, [pc, #76]	@ (800c5d4 <processHalfDMAbuffer+0x6c>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	425a      	negs	r2, r3
 800c58a:	4153      	adcs	r3, r2
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	4b11      	ldr	r3, [pc, #68]	@ (800c5d4 <processHalfDMAbuffer+0x6c>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	2109      	movs	r1, #9
 800c594:	4299      	cmp	r1, r3
 800c596:	419b      	sbcs	r3, r3
 800c598:	425b      	negs	r3, r3
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	480c      	ldr	r0, [pc, #48]	@ (800c5d0 <processHalfDMAbuffer+0x68>)
 800c59e:	2180      	movs	r1, #128	@ 0x80
 800c5a0:	f000 fb46 	bl	800cc30 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800c5a4:	4b0b      	ldr	r3, [pc, #44]	@ (800c5d4 <processHalfDMAbuffer+0x6c>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	2b09      	cmp	r3, #9
 800c5aa:	d804      	bhi.n	800c5b6 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800c5ac:	4b09      	ldr	r3, [pc, #36]	@ (800c5d4 <processHalfDMAbuffer+0x6c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	1c5a      	adds	r2, r3, #1
 800c5b2:	4b08      	ldr	r3, [pc, #32]	@ (800c5d4 <processHalfDMAbuffer+0x6c>)
 800c5b4:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800c5b6:	4b08      	ldr	r3, [pc, #32]	@ (800c5d8 <processHalfDMAbuffer+0x70>)
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d001      	beq.n	800c5c4 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800c5c0:	f000 f826 	bl	800c610 <calculateSPLQ31>
    }
}
 800c5c4:	46c0      	nop			@ (mov r8, r8)
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	b002      	add	sp, #8
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	2000139c 	.word	0x2000139c
 800c5d0:	20001b9c 	.word	0x20001b9c
 800c5d4:	2000135c 	.word	0x2000135c
 800c5d8:	20001359 	.word	0x20001359

0800c5dc <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800c5e4:	4b07      	ldr	r3, [pc, #28]	@ (800c604 <HAL_I2S_ErrorCallback+0x28>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d106      	bne.n	800c5fc <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800c5ee:	4a06      	ldr	r2, [pc, #24]	@ (800c608 <HAL_I2S_ErrorCallback+0x2c>)
 800c5f0:	239f      	movs	r3, #159	@ 0x9f
 800c5f2:	0059      	lsls	r1, r3, #1
 800c5f4:	4b05      	ldr	r3, [pc, #20]	@ (800c60c <HAL_I2S_ErrorCallback+0x30>)
 800c5f6:	0018      	movs	r0, r3
 800c5f8:	f001 ffb6 	bl	800e568 <errorHandler>
  }
}
 800c5fc:	46c0      	nop			@ (mov r8, r8)
 800c5fe:	46bd      	mov	sp, r7
 800c600:	b002      	add	sp, #8
 800c602:	bd80      	pop	{r7, pc}
 800c604:	20001da0 	.word	0x20001da0
 800c608:	08024d64 	.word	0x08024d64
 800c60c:	0802557c 	.word	0x0802557c

0800c610 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800c610:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c612:	b0b3      	sub	sp, #204	@ 0xcc
 800c614:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800c616:	4ae2      	ldr	r2, [pc, #904]	@ (800c9a0 <calculateSPLQ31+0x390>)
 800c618:	2338      	movs	r3, #56	@ 0x38
 800c61a:	2030      	movs	r0, #48	@ 0x30
 800c61c:	181b      	adds	r3, r3, r0
 800c61e:	19d9      	adds	r1, r3, r7
 800c620:	2334      	movs	r3, #52	@ 0x34
 800c622:	181b      	adds	r3, r3, r0
 800c624:	19d8      	adds	r0, r3, r7
 800c626:	2380      	movs	r3, #128	@ 0x80
 800c628:	f000 fc36 	bl	800ce98 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800c62c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c62e:	2b00      	cmp	r3, #0
 800c630:	da00      	bge.n	800c634 <calculateSPLQ31+0x24>
 800c632:	3301      	adds	r3, #1
 800c634:	105b      	asrs	r3, r3, #1
 800c636:	001a      	movs	r2, r3
 800c638:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	da00      	bge.n	800c640 <calculateSPLQ31+0x30>
 800c63e:	3301      	adds	r3, #1
 800c640:	105b      	asrs	r3, r3, #1
 800c642:	18d3      	adds	r3, r2, r3
 800c644:	2188      	movs	r1, #136	@ 0x88
 800c646:	187a      	adds	r2, r7, r1
 800c648:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800c64a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c64c:	187b      	adds	r3, r7, r1
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	3304      	adds	r3, #4
 800c654:	2284      	movs	r2, #132	@ 0x84
 800c656:	18b9      	adds	r1, r7, r2
 800c658:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800c65a:	18bb      	adds	r3, r7, r2
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	4ad1      	ldr	r2, [pc, #836]	@ (800c9a4 <calculateSPLQ31+0x394>)
 800c660:	0019      	movs	r1, r3
 800c662:	0010      	movs	r0, r2
 800c664:	f000 fc58 	bl	800cf18 <getPo2factor>
 800c668:	0003      	movs	r3, r0
 800c66a:	2280      	movs	r2, #128	@ 0x80
 800c66c:	18ba      	adds	r2, r7, r2
 800c66e:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800c670:	2300      	movs	r3, #0
 800c672:	2284      	movs	r2, #132	@ 0x84
 800c674:	2130      	movs	r1, #48	@ 0x30
 800c676:	1852      	adds	r2, r2, r1
 800c678:	19d2      	adds	r2, r2, r7
 800c67a:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c67c:	2300      	movs	r3, #0
 800c67e:	2280      	movs	r2, #128	@ 0x80
 800c680:	1852      	adds	r2, r2, r1
 800c682:	19d2      	adds	r2, r2, r7
 800c684:	6013      	str	r3, [r2, #0]
 800c686:	e032      	b.n	800c6ee <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800c688:	4ac5      	ldr	r2, [pc, #788]	@ (800c9a0 <calculateSPLQ31+0x390>)
 800c68a:	2680      	movs	r6, #128	@ 0x80
 800c68c:	2330      	movs	r3, #48	@ 0x30
 800c68e:	18f1      	adds	r1, r6, r3
 800c690:	19cb      	adds	r3, r1, r7
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	589a      	ldr	r2, [r3, r2]
 800c698:	2188      	movs	r1, #136	@ 0x88
 800c69a:	1879      	adds	r1, r7, r1
 800c69c:	680b      	ldr	r3, [r1, #0]
 800c69e:	1ad2      	subs	r2, r2, r3
 800c6a0:	2180      	movs	r1, #128	@ 0x80
 800c6a2:	1879      	adds	r1, r7, r1
 800c6a4:	680b      	ldr	r3, [r1, #0]
 800c6a6:	409a      	lsls	r2, r3
 800c6a8:	0011      	movs	r1, r2
 800c6aa:	4abf      	ldr	r2, [pc, #764]	@ (800c9a8 <calculateSPLQ31+0x398>)
 800c6ac:	2084      	movs	r0, #132	@ 0x84
 800c6ae:	2330      	movs	r3, #48	@ 0x30
 800c6b0:	18c3      	adds	r3, r0, r3
 800c6b2:	19db      	adds	r3, r3, r7
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800c6ba:	2230      	movs	r2, #48	@ 0x30
 800c6bc:	1883      	adds	r3, r0, r2
 800c6be:	19db      	adds	r3, r3, r7
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	49b8      	ldr	r1, [pc, #736]	@ (800c9a8 <calculateSPLQ31+0x398>)
 800c6c6:	009a      	lsls	r2, r3, #2
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	5053      	str	r3, [r2, r1]
        count += 2;
 800c6cc:	2230      	movs	r2, #48	@ 0x30
 800c6ce:	1883      	adds	r3, r0, r2
 800c6d0:	19db      	adds	r3, r3, r7
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	3302      	adds	r3, #2
 800c6d6:	0011      	movs	r1, r2
 800c6d8:	1882      	adds	r2, r0, r2
 800c6da:	19d2      	adds	r2, r2, r7
 800c6dc:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800c6de:	000a      	movs	r2, r1
 800c6e0:	18b3      	adds	r3, r6, r2
 800c6e2:	19db      	adds	r3, r3, r7
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	18b2      	adds	r2, r6, r2
 800c6ea:	19d2      	adds	r2, r2, r7
 800c6ec:	6013      	str	r3, [r2, #0]
 800c6ee:	2380      	movs	r3, #128	@ 0x80
 800c6f0:	2630      	movs	r6, #48	@ 0x30
 800c6f2:	199b      	adds	r3, r3, r6
 800c6f4:	19db      	adds	r3, r3, r7
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6fa:	d9c5      	bls.n	800c688 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800c6fc:	4bab      	ldr	r3, [pc, #684]	@ (800c9ac <calculateSPLQ31+0x39c>)
 800c6fe:	6818      	ldr	r0, [r3, #0]
 800c700:	49a9      	ldr	r1, [pc, #676]	@ (800c9a8 <calculateSPLQ31+0x398>)
 800c702:	2301      	movs	r3, #1
 800c704:	2200      	movs	r2, #0
 800c706:	f011 f957 	bl	801d9b8 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800c70a:	4aa9      	ldr	r2, [pc, #676]	@ (800c9b0 <calculateSPLQ31+0x3a0>)
 800c70c:	2338      	movs	r3, #56	@ 0x38
 800c70e:	199b      	adds	r3, r3, r6
 800c710:	19d9      	adds	r1, r3, r7
 800c712:	2334      	movs	r3, #52	@ 0x34
 800c714:	199b      	adds	r3, r3, r6
 800c716:	19d8      	adds	r0, r3, r7
 800c718:	237e      	movs	r3, #126	@ 0x7e
 800c71a:	f000 fbbd 	bl	800ce98 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800c71e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c720:	2380      	movs	r3, #128	@ 0x80
 800c722:	061b      	lsls	r3, r3, #24
 800c724:	429a      	cmp	r2, r3
 800c726:	d101      	bne.n	800c72c <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800c728:	4b9e      	ldr	r3, [pc, #632]	@ (800c9a4 <calculateSPLQ31+0x394>)
 800c72a:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800c72c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c72e:	2380      	movs	r3, #128	@ 0x80
 800c730:	061b      	lsls	r3, r3, #24
 800c732:	429a      	cmp	r2, r3
 800c734:	d101      	bne.n	800c73a <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800c736:	4b9b      	ldr	r3, [pc, #620]	@ (800c9a4 <calculateSPLQ31+0x394>)
 800c738:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800c73a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c73c:	17da      	asrs	r2, r3, #31
 800c73e:	189b      	adds	r3, r3, r2
 800c740:	4053      	eors	r3, r2
 800c742:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800c744:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c746:	17da      	asrs	r2, r3, #31
 800c748:	189b      	adds	r3, r3, r2
 800c74a:	4053      	eors	r3, r2
 800c74c:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800c74e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c750:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c752:	429a      	cmp	r2, r3
 800c754:	dd01      	ble.n	800c75a <calculateSPLQ31+0x14a>
    {
        max = min;
 800c756:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c758:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800c75a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c75c:	3304      	adds	r3, #4
 800c75e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800c760:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c762:	4a90      	ldr	r2, [pc, #576]	@ (800c9a4 <calculateSPLQ31+0x394>)
 800c764:	0019      	movs	r1, r3
 800c766:	0010      	movs	r0, r2
 800c768:	f000 fbd6 	bl	800cf18 <getPo2factor>
 800c76c:	0003      	movs	r3, r0
 800c76e:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800c770:	2302      	movs	r3, #2
 800c772:	22ac      	movs	r2, #172	@ 0xac
 800c774:	18ba      	adds	r2, r7, r2
 800c776:	6013      	str	r3, [r2, #0]
 800c778:	e012      	b.n	800c7a0 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800c77a:	4a8b      	ldr	r2, [pc, #556]	@ (800c9a8 <calculateSPLQ31+0x398>)
 800c77c:	20ac      	movs	r0, #172	@ 0xac
 800c77e:	183b      	adds	r3, r7, r0
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	589a      	ldr	r2, [r3, r2]
 800c786:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c788:	409a      	lsls	r2, r3
 800c78a:	0011      	movs	r1, r2
 800c78c:	4a86      	ldr	r2, [pc, #536]	@ (800c9a8 <calculateSPLQ31+0x398>)
 800c78e:	183b      	adds	r3, r7, r0
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800c796:	183b      	adds	r3, r7, r0
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	3301      	adds	r3, #1
 800c79c:	183a      	adds	r2, r7, r0
 800c79e:	6013      	str	r3, [r2, #0]
 800c7a0:	23ac      	movs	r3, #172	@ 0xac
 800c7a2:	18fb      	adds	r3, r7, r3
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7a8:	d9e7      	bls.n	800c77a <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800c7aa:	4b7d      	ldr	r3, [pc, #500]	@ (800c9a0 <calculateSPLQ31+0x390>)
 800c7ac:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800c7ae:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800c7b0:	4b7d      	ldr	r3, [pc, #500]	@ (800c9a8 <calculateSPLQ31+0x398>)
 800c7b2:	2240      	movs	r2, #64	@ 0x40
 800c7b4:	0018      	movs	r0, r3
 800c7b6:	f011 fea9 	bl	801e50c <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800c7ba:	2330      	movs	r3, #48	@ 0x30
 800c7bc:	18fb      	adds	r3, r7, r3
 800c7be:	0018      	movs	r0, r3
 800c7c0:	2330      	movs	r3, #48	@ 0x30
 800c7c2:	001a      	movs	r2, r3
 800c7c4:	2100      	movs	r1, #0
 800c7c6:	f013 fcc5 	bl	8020154 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	21a0      	movs	r1, #160	@ 0xa0
 800c7d0:	1879      	adds	r1, r7, r1
 800c7d2:	600a      	str	r2, [r1, #0]
 800c7d4:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	229c      	movs	r2, #156	@ 0x9c
 800c7da:	18ba      	adds	r2, r7, r2
 800c7dc:	6013      	str	r3, [r2, #0]
 800c7de:	e05b      	b.n	800c898 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800c7e0:	269c      	movs	r6, #156	@ 0x9c
 800c7e2:	19bb      	adds	r3, r7, r6
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	009a      	lsls	r2, r3, #2
 800c7e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7ea:	189b      	adds	r3, r3, r2
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	613b      	str	r3, [r7, #16]
 800c7f0:	17db      	asrs	r3, r3, #31
 800c7f2:	617b      	str	r3, [r7, #20]
 800c7f4:	4b6f      	ldr	r3, [pc, #444]	@ (800c9b4 <calculateSPLQ31+0x3a4>)
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	19bb      	adds	r3, r7, r6
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	005b      	lsls	r3, r3, #1
 800c7fe:	18d3      	adds	r3, r2, r3
 800c800:	881b      	ldrh	r3, [r3, #0]
 800c802:	60bb      	str	r3, [r7, #8]
 800c804:	2300      	movs	r3, #0
 800c806:	60fb      	str	r3, [r7, #12]
 800c808:	68ba      	ldr	r2, [r7, #8]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	6938      	ldr	r0, [r7, #16]
 800c80e:	6979      	ldr	r1, [r7, #20]
 800c810:	f7f3 fed6 	bl	80005c0 <__aeabi_lmul>
 800c814:	0002      	movs	r2, r0
 800c816:	000b      	movs	r3, r1
 800c818:	0010      	movs	r0, r2
 800c81a:	0019      	movs	r1, r3
 800c81c:	23a0      	movs	r3, #160	@ 0xa0
 800c81e:	18fa      	adds	r2, r7, r3
 800c820:	6853      	ldr	r3, [r2, #4]
 800c822:	6812      	ldr	r2, [r2, #0]
 800c824:	1812      	adds	r2, r2, r0
 800c826:	414b      	adcs	r3, r1
 800c828:	21a0      	movs	r1, #160	@ 0xa0
 800c82a:	1879      	adds	r1, r7, r1
 800c82c:	600a      	str	r2, [r1, #0]
 800c82e:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800c830:	4b61      	ldr	r3, [pc, #388]	@ (800c9b8 <calculateSPLQ31+0x3a8>)
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	19bb      	adds	r3, r7, r6
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	18d3      	adds	r3, r2, r3
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	2b06      	cmp	r3, #6
 800c83e:	d025      	beq.n	800c88c <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800c840:	4b5d      	ldr	r3, [pc, #372]	@ (800c9b8 <calculateSPLQ31+0x3a8>)
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	19bb      	adds	r3, r7, r6
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	18d3      	adds	r3, r2, r3
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	2230      	movs	r2, #48	@ 0x30
 800c84e:	18ba      	adds	r2, r7, r2
 800c850:	00db      	lsls	r3, r3, #3
 800c852:	18d3      	adds	r3, r2, r3
 800c854:	6818      	ldr	r0, [r3, #0]
 800c856:	6859      	ldr	r1, [r3, #4]
 800c858:	19bb      	adds	r3, r7, r6
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	009a      	lsls	r2, r3, #2
 800c85e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c860:	189b      	adds	r3, r3, r2
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	603b      	str	r3, [r7, #0]
 800c866:	17db      	asrs	r3, r3, #31
 800c868:	607b      	str	r3, [r7, #4]
 800c86a:	4b53      	ldr	r3, [pc, #332]	@ (800c9b8 <calculateSPLQ31+0x3a8>)
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	19be      	adds	r6, r7, r6
 800c870:	6833      	ldr	r3, [r6, #0]
 800c872:	18d3      	adds	r3, r2, r3
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	001e      	movs	r6, r3
 800c878:	683a      	ldr	r2, [r7, #0]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	1880      	adds	r0, r0, r2
 800c87e:	4159      	adcs	r1, r3
 800c880:	2330      	movs	r3, #48	@ 0x30
 800c882:	18fa      	adds	r2, r7, r3
 800c884:	00f3      	lsls	r3, r6, #3
 800c886:	18d3      	adds	r3, r2, r3
 800c888:	6018      	str	r0, [r3, #0]
 800c88a:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800c88c:	229c      	movs	r2, #156	@ 0x9c
 800c88e:	18bb      	adds	r3, r7, r2
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	3301      	adds	r3, #1
 800c894:	18ba      	adds	r2, r7, r2
 800c896:	6013      	str	r3, [r2, #0]
 800c898:	239c      	movs	r3, #156	@ 0x9c
 800c89a:	18fb      	adds	r3, r7, r3
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b3f      	cmp	r3, #63	@ 0x3f
 800c8a0:	d99e      	bls.n	800c7e0 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800c8a2:	2380      	movs	r3, #128	@ 0x80
 800c8a4:	18fb      	adds	r3, r7, r3
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	005b      	lsls	r3, r3, #1
 800c8aa:	001a      	movs	r2, r3
 800c8ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8ae:	005b      	lsls	r3, r3, #1
 800c8b0:	18d3      	adds	r3, r2, r3
 800c8b2:	3b22      	subs	r3, #34	@ 0x22
 800c8b4:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800c8b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8b8:	17da      	asrs	r2, r3, #31
 800c8ba:	189b      	adds	r3, r3, r2
 800c8bc:	4053      	eors	r3, r2
 800c8be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800c8c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	da62      	bge.n	800c98c <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800c8c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8c8:	3b20      	subs	r3, #32
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	db05      	blt.n	800c8da <calculateSPLQ31+0x2ca>
 800c8ce:	22a0      	movs	r2, #160	@ 0xa0
 800c8d0:	18ba      	adds	r2, r7, r2
 800c8d2:	6812      	ldr	r2, [r2, #0]
 800c8d4:	409a      	lsls	r2, r3
 800c8d6:	627a      	str	r2, [r7, #36]	@ 0x24
 800c8d8:	e010      	b.n	800c8fc <calculateSPLQ31+0x2ec>
 800c8da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c8dc:	2220      	movs	r2, #32
 800c8de:	1ad3      	subs	r3, r2, r3
 800c8e0:	22a0      	movs	r2, #160	@ 0xa0
 800c8e2:	18ba      	adds	r2, r7, r2
 800c8e4:	6812      	ldr	r2, [r2, #0]
 800c8e6:	40da      	lsrs	r2, r3
 800c8e8:	0013      	movs	r3, r2
 800c8ea:	22a4      	movs	r2, #164	@ 0xa4
 800c8ec:	18ba      	adds	r2, r7, r2
 800c8ee:	6811      	ldr	r1, [r2, #0]
 800c8f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c8f2:	4091      	lsls	r1, r2
 800c8f4:	6279      	str	r1, [r7, #36]	@ 0x24
 800c8f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8f8:	431a      	orrs	r2, r3
 800c8fa:	627a      	str	r2, [r7, #36]	@ 0x24
 800c8fc:	21a0      	movs	r1, #160	@ 0xa0
 800c8fe:	187b      	adds	r3, r7, r1
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c904:	409a      	lsls	r2, r3
 800c906:	623a      	str	r2, [r7, #32]
 800c908:	6a3b      	ldr	r3, [r7, #32]
 800c90a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800c90c:	187a      	adds	r2, r7, r1
 800c90e:	6013      	str	r3, [r2, #0]
 800c910:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c912:	2300      	movs	r3, #0
 800c914:	2298      	movs	r2, #152	@ 0x98
 800c916:	18ba      	adds	r2, r7, r2
 800c918:	6013      	str	r3, [r2, #0]
 800c91a:	e031      	b.n	800c980 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800c91c:	2330      	movs	r3, #48	@ 0x30
 800c91e:	18fa      	adds	r2, r7, r3
 800c920:	2398      	movs	r3, #152	@ 0x98
 800c922:	18fb      	adds	r3, r7, r3
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	00db      	lsls	r3, r3, #3
 800c928:	18d3      	adds	r3, r2, r3
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c930:	3920      	subs	r1, #32
 800c932:	2900      	cmp	r1, #0
 800c934:	db03      	blt.n	800c93e <calculateSPLQ31+0x32e>
 800c936:	0010      	movs	r0, r2
 800c938:	4088      	lsls	r0, r1
 800c93a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c93c:	e00c      	b.n	800c958 <calculateSPLQ31+0x348>
 800c93e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c940:	2020      	movs	r0, #32
 800c942:	1a41      	subs	r1, r0, r1
 800c944:	0010      	movs	r0, r2
 800c946:	40c8      	lsrs	r0, r1
 800c948:	0001      	movs	r1, r0
 800c94a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c94c:	001c      	movs	r4, r3
 800c94e:	4084      	lsls	r4, r0
 800c950:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800c952:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c954:	4308      	orrs	r0, r1
 800c956:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c958:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c95a:	0013      	movs	r3, r2
 800c95c:	408b      	lsls	r3, r1
 800c95e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c960:	2330      	movs	r3, #48	@ 0x30
 800c962:	18fa      	adds	r2, r7, r3
 800c964:	2098      	movs	r0, #152	@ 0x98
 800c966:	183b      	adds	r3, r7, r0
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	00db      	lsls	r3, r3, #3
 800c96c:	18d3      	adds	r3, r2, r3
 800c96e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c970:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c972:	6019      	str	r1, [r3, #0]
 800c974:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c976:	183b      	adds	r3, r7, r0
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	3301      	adds	r3, #1
 800c97c:	183a      	adds	r2, r7, r0
 800c97e:	6013      	str	r3, [r2, #0]
 800c980:	2398      	movs	r3, #152	@ 0x98
 800c982:	18fb      	adds	r3, r7, r3
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b05      	cmp	r3, #5
 800c988:	d9c8      	bls.n	800c91c <calculateSPLQ31+0x30c>
 800c98a:	e06b      	b.n	800ca64 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800c98c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c98e:	3b20      	subs	r3, #32
 800c990:	2b00      	cmp	r3, #0
 800c992:	db13      	blt.n	800c9bc <calculateSPLQ31+0x3ac>
 800c994:	22a4      	movs	r2, #164	@ 0xa4
 800c996:	18ba      	adds	r2, r7, r2
 800c998:	6812      	ldr	r2, [r2, #0]
 800c99a:	40da      	lsrs	r2, r3
 800c99c:	61ba      	str	r2, [r7, #24]
 800c99e:	e01e      	b.n	800c9de <calculateSPLQ31+0x3ce>
 800c9a0:	20001b9c 	.word	0x20001b9c
 800c9a4:	7fffffff 	.word	0x7fffffff
 800c9a8:	20001de8 	.word	0x20001de8
 800c9ac:	200000b4 	.word	0x200000b4
 800c9b0:	20001df0 	.word	0x20001df0
 800c9b4:	200000b8 	.word	0x200000b8
 800c9b8:	200000c4 	.word	0x200000c4
 800c9bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9be:	2220      	movs	r2, #32
 800c9c0:	1ad3      	subs	r3, r2, r3
 800c9c2:	22a4      	movs	r2, #164	@ 0xa4
 800c9c4:	18ba      	adds	r2, r7, r2
 800c9c6:	6812      	ldr	r2, [r2, #0]
 800c9c8:	409a      	lsls	r2, r3
 800c9ca:	0013      	movs	r3, r2
 800c9cc:	22a0      	movs	r2, #160	@ 0xa0
 800c9ce:	18ba      	adds	r2, r7, r2
 800c9d0:	6811      	ldr	r1, [r2, #0]
 800c9d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c9d4:	40d1      	lsrs	r1, r2
 800c9d6:	61b9      	str	r1, [r7, #24]
 800c9d8:	69ba      	ldr	r2, [r7, #24]
 800c9da:	431a      	orrs	r2, r3
 800c9dc:	61ba      	str	r2, [r7, #24]
 800c9de:	23a4      	movs	r3, #164	@ 0xa4
 800c9e0:	18fb      	adds	r3, r7, r3
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9e6:	40da      	lsrs	r2, r3
 800c9e8:	61fa      	str	r2, [r7, #28]
 800c9ea:	69ba      	ldr	r2, [r7, #24]
 800c9ec:	69fb      	ldr	r3, [r7, #28]
 800c9ee:	21a0      	movs	r1, #160	@ 0xa0
 800c9f0:	1879      	adds	r1, r7, r1
 800c9f2:	600a      	str	r2, [r1, #0]
 800c9f4:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	2294      	movs	r2, #148	@ 0x94
 800c9fa:	18ba      	adds	r2, r7, r2
 800c9fc:	6013      	str	r3, [r2, #0]
 800c9fe:	e02c      	b.n	800ca5a <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800ca00:	2330      	movs	r3, #48	@ 0x30
 800ca02:	18fa      	adds	r2, r7, r3
 800ca04:	2394      	movs	r3, #148	@ 0x94
 800ca06:	18fb      	adds	r3, r7, r3
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	00db      	lsls	r3, r3, #3
 800ca0c:	18d3      	adds	r3, r2, r3
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	685b      	ldr	r3, [r3, #4]
 800ca12:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca14:	3920      	subs	r1, #32
 800ca16:	2900      	cmp	r1, #0
 800ca18:	db03      	blt.n	800ca22 <calculateSPLQ31+0x412>
 800ca1a:	0018      	movs	r0, r3
 800ca1c:	40c8      	lsrs	r0, r1
 800ca1e:	0004      	movs	r4, r0
 800ca20:	e00a      	b.n	800ca38 <calculateSPLQ31+0x428>
 800ca22:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca24:	2020      	movs	r0, #32
 800ca26:	1a41      	subs	r1, r0, r1
 800ca28:	0018      	movs	r0, r3
 800ca2a:	4088      	lsls	r0, r1
 800ca2c:	0001      	movs	r1, r0
 800ca2e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ca30:	0016      	movs	r6, r2
 800ca32:	40c6      	lsrs	r6, r0
 800ca34:	0034      	movs	r4, r6
 800ca36:	430c      	orrs	r4, r1
 800ca38:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800ca3a:	40cb      	lsrs	r3, r1
 800ca3c:	001d      	movs	r5, r3
 800ca3e:	2330      	movs	r3, #48	@ 0x30
 800ca40:	18fa      	adds	r2, r7, r3
 800ca42:	2194      	movs	r1, #148	@ 0x94
 800ca44:	187b      	adds	r3, r7, r1
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	00db      	lsls	r3, r3, #3
 800ca4a:	18d3      	adds	r3, r2, r3
 800ca4c:	601c      	str	r4, [r3, #0]
 800ca4e:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800ca50:	187b      	adds	r3, r7, r1
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	3301      	adds	r3, #1
 800ca56:	187a      	adds	r2, r7, r1
 800ca58:	6013      	str	r3, [r2, #0]
 800ca5a:	2394      	movs	r3, #148	@ 0x94
 800ca5c:	18fb      	adds	r3, r7, r3
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	2b05      	cmp	r3, #5
 800ca62:	d9cd      	bls.n	800ca00 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800ca64:	230f      	movs	r3, #15
 800ca66:	425d      	negs	r5, r3
 800ca68:	2305      	movs	r3, #5
 800ca6a:	425e      	negs	r6, r3
 800ca6c:	4b4a      	ldr	r3, [pc, #296]	@ (800cb98 <calculateSPLQ31+0x588>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	681a      	ldr	r2, [r3, #0]
 800ca72:	4b4a      	ldr	r3, [pc, #296]	@ (800cb9c <calculateSPLQ31+0x58c>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	21a0      	movs	r1, #160	@ 0xa0
 800ca7a:	1879      	adds	r1, r7, r1
 800ca7c:	6808      	ldr	r0, [r1, #0]
 800ca7e:	6849      	ldr	r1, [r1, #4]
 800ca80:	4c47      	ldr	r4, [pc, #284]	@ (800cba0 <calculateSPLQ31+0x590>)
 800ca82:	9403      	str	r4, [sp, #12]
 800ca84:	4c47      	ldr	r4, [pc, #284]	@ (800cba4 <calculateSPLQ31+0x594>)
 800ca86:	9402      	str	r4, [sp, #8]
 800ca88:	9301      	str	r3, [sp, #4]
 800ca8a:	9200      	str	r2, [sp, #0]
 800ca8c:	0033      	movs	r3, r6
 800ca8e:	002a      	movs	r2, r5
 800ca90:	f000 fa86 	bl	800cfa0 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ca94:	2300      	movs	r3, #0
 800ca96:	2290      	movs	r2, #144	@ 0x90
 800ca98:	18ba      	adds	r2, r7, r2
 800ca9a:	6013      	str	r3, [r2, #0]
 800ca9c:	e026      	b.n	800caec <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800ca9e:	2330      	movs	r3, #48	@ 0x30
 800caa0:	18fa      	adds	r2, r7, r3
 800caa2:	2490      	movs	r4, #144	@ 0x90
 800caa4:	193b      	adds	r3, r7, r4
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	00db      	lsls	r3, r3, #3
 800caaa:	18d3      	adds	r3, r2, r3
 800caac:	6818      	ldr	r0, [r3, #0]
 800caae:	6859      	ldr	r1, [r3, #4]
 800cab0:	230f      	movs	r3, #15
 800cab2:	425d      	negs	r5, r3
 800cab4:	2305      	movs	r3, #5
 800cab6:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800cab8:	193b      	adds	r3, r7, r4
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	009a      	lsls	r2, r3, #2
 800cabe:	4b3a      	ldr	r3, [pc, #232]	@ (800cba8 <calculateSPLQ31+0x598>)
 800cac0:	18d3      	adds	r3, r2, r3
 800cac2:	193a      	adds	r2, r7, r4
 800cac4:	6812      	ldr	r2, [r2, #0]
 800cac6:	0094      	lsls	r4, r2, #2
 800cac8:	4a38      	ldr	r2, [pc, #224]	@ (800cbac <calculateSPLQ31+0x59c>)
 800caca:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800cacc:	9203      	str	r2, [sp, #12]
 800cace:	9302      	str	r3, [sp, #8]
 800cad0:	2300      	movs	r3, #0
 800cad2:	9301      	str	r3, [sp, #4]
 800cad4:	2300      	movs	r3, #0
 800cad6:	9300      	str	r3, [sp, #0]
 800cad8:	0033      	movs	r3, r6
 800cada:	002a      	movs	r2, r5
 800cadc:	f000 fa60 	bl	800cfa0 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cae0:	2490      	movs	r4, #144	@ 0x90
 800cae2:	193b      	adds	r3, r7, r4
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	3301      	adds	r3, #1
 800cae8:	193a      	adds	r2, r7, r4
 800caea:	6013      	str	r3, [r2, #0]
 800caec:	2390      	movs	r3, #144	@ 0x90
 800caee:	18fb      	adds	r3, r7, r3
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b05      	cmp	r3, #5
 800caf4:	d9d3      	bls.n	800ca9e <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800caf6:	4b2b      	ldr	r3, [pc, #172]	@ (800cba4 <calculateSPLQ31+0x594>)
 800caf8:	681a      	ldr	r2, [r3, #0]
 800cafa:	4b2d      	ldr	r3, [pc, #180]	@ (800cbb0 <calculateSPLQ31+0x5a0>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	18d2      	adds	r2, r2, r3
 800cb00:	4b2b      	ldr	r3, [pc, #172]	@ (800cbb0 <calculateSPLQ31+0x5a0>)
 800cb02:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800cb04:	4b26      	ldr	r3, [pc, #152]	@ (800cba0 <calculateSPLQ31+0x590>)
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	4b2a      	ldr	r3, [pc, #168]	@ (800cbb4 <calculateSPLQ31+0x5a4>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	18d2      	adds	r2, r2, r3
 800cb0e:	4b29      	ldr	r3, [pc, #164]	@ (800cbb4 <calculateSPLQ31+0x5a4>)
 800cb10:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cb12:	2300      	movs	r3, #0
 800cb14:	228c      	movs	r2, #140	@ 0x8c
 800cb16:	18ba      	adds	r2, r7, r2
 800cb18:	6013      	str	r3, [r2, #0]
 800cb1a:	e025      	b.n	800cb68 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800cb1c:	4b22      	ldr	r3, [pc, #136]	@ (800cba8 <calculateSPLQ31+0x598>)
 800cb1e:	208c      	movs	r0, #140	@ 0x8c
 800cb20:	183a      	adds	r2, r7, r0
 800cb22:	6812      	ldr	r2, [r2, #0]
 800cb24:	0092      	lsls	r2, r2, #2
 800cb26:	58d2      	ldr	r2, [r2, r3]
 800cb28:	4b23      	ldr	r3, [pc, #140]	@ (800cbb8 <calculateSPLQ31+0x5a8>)
 800cb2a:	1839      	adds	r1, r7, r0
 800cb2c:	6809      	ldr	r1, [r1, #0]
 800cb2e:	0089      	lsls	r1, r1, #2
 800cb30:	58cb      	ldr	r3, [r1, r3]
 800cb32:	18d1      	adds	r1, r2, r3
 800cb34:	4b20      	ldr	r3, [pc, #128]	@ (800cbb8 <calculateSPLQ31+0x5a8>)
 800cb36:	183a      	adds	r2, r7, r0
 800cb38:	6812      	ldr	r2, [r2, #0]
 800cb3a:	0092      	lsls	r2, r2, #2
 800cb3c:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800cb3e:	4b1b      	ldr	r3, [pc, #108]	@ (800cbac <calculateSPLQ31+0x59c>)
 800cb40:	183a      	adds	r2, r7, r0
 800cb42:	6812      	ldr	r2, [r2, #0]
 800cb44:	0092      	lsls	r2, r2, #2
 800cb46:	58d2      	ldr	r2, [r2, r3]
 800cb48:	4b1c      	ldr	r3, [pc, #112]	@ (800cbbc <calculateSPLQ31+0x5ac>)
 800cb4a:	1839      	adds	r1, r7, r0
 800cb4c:	6809      	ldr	r1, [r1, #0]
 800cb4e:	0089      	lsls	r1, r1, #2
 800cb50:	58cb      	ldr	r3, [r1, r3]
 800cb52:	18d1      	adds	r1, r2, r3
 800cb54:	4b19      	ldr	r3, [pc, #100]	@ (800cbbc <calculateSPLQ31+0x5ac>)
 800cb56:	183a      	adds	r2, r7, r0
 800cb58:	6812      	ldr	r2, [r2, #0]
 800cb5a:	0092      	lsls	r2, r2, #2
 800cb5c:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800cb5e:	183b      	adds	r3, r7, r0
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	3301      	adds	r3, #1
 800cb64:	183a      	adds	r2, r7, r0
 800cb66:	6013      	str	r3, [r2, #0]
 800cb68:	238c      	movs	r3, #140	@ 0x8c
 800cb6a:	18fb      	adds	r3, r7, r3
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2b05      	cmp	r3, #5
 800cb70:	d9d4      	bls.n	800cb1c <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800cb72:	4b13      	ldr	r3, [pc, #76]	@ (800cbc0 <calculateSPLQ31+0x5b0>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	1c5a      	adds	r2, r3, #1
 800cb78:	4b11      	ldr	r3, [pc, #68]	@ (800cbc0 <calculateSPLQ31+0x5b0>)
 800cb7a:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800cb7c:	4b10      	ldr	r3, [pc, #64]	@ (800cbc0 <calculateSPLQ31+0x5b0>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b0f      	cmp	r3, #15
 800cb82:	d905      	bls.n	800cb90 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800cb84:	4b0f      	ldr	r3, [pc, #60]	@ (800cbc4 <calculateSPLQ31+0x5b4>)
 800cb86:	2201      	movs	r2, #1
 800cb88:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800cb8a:	4b0f      	ldr	r3, [pc, #60]	@ (800cbc8 <calculateSPLQ31+0x5b8>)
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	701a      	strb	r2, [r3, #0]
    }
}
 800cb90:	46c0      	nop			@ (mov r8, r8)
 800cb92:	46bd      	mov	sp, r7
 800cb94:	b02f      	add	sp, #188	@ 0xbc
 800cb96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb98:	200000bc 	.word	0x200000bc
 800cb9c:	200000c0 	.word	0x200000c0
 800cba0:	20001368 	.word	0x20001368
 800cba4:	20001364 	.word	0x20001364
 800cba8:	2000136c 	.word	0x2000136c
 800cbac:	20001384 	.word	0x20001384
 800cbb0:	20001dac 	.word	0x20001dac
 800cbb4:	20001db0 	.word	0x20001db0
 800cbb8:	20001db4 	.word	0x20001db4
 800cbbc:	20001dcc 	.word	0x20001dcc
 800cbc0:	20001de4 	.word	0x20001de4
 800cbc4:	2000135b 	.word	0x2000135b
 800cbc8:	20001359 	.word	0x20001359

0800cbcc <resetSPLstate>:

static void resetSPLstate(void)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800cbd2:	4b11      	ldr	r3, [pc, #68]	@ (800cc18 <resetSPLstate+0x4c>)
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800cbd8:	4b10      	ldr	r3, [pc, #64]	@ (800cc1c <resetSPLstate+0x50>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800cbde:	4b10      	ldr	r3, [pc, #64]	@ (800cc20 <resetSPLstate+0x54>)
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	607b      	str	r3, [r7, #4]
 800cbe8:	e00c      	b.n	800cc04 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800cbea:	4b0e      	ldr	r3, [pc, #56]	@ (800cc24 <resetSPLstate+0x58>)
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	0092      	lsls	r2, r2, #2
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800cbf4:	4b0c      	ldr	r3, [pc, #48]	@ (800cc28 <resetSPLstate+0x5c>)
 800cbf6:	687a      	ldr	r2, [r7, #4]
 800cbf8:	0092      	lsls	r2, r2, #2
 800cbfa:	2100      	movs	r1, #0
 800cbfc:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	3301      	adds	r3, #1
 800cc02:	607b      	str	r3, [r7, #4]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2b05      	cmp	r3, #5
 800cc08:	d9ef      	bls.n	800cbea <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800cc0a:	4b08      	ldr	r3, [pc, #32]	@ (800cc2c <resetSPLstate+0x60>)
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	701a      	strb	r2, [r3, #0]
}
 800cc10:	46c0      	nop			@ (mov r8, r8)
 800cc12:	46bd      	mov	sp, r7
 800cc14:	b002      	add	sp, #8
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	20001dac 	.word	0x20001dac
 800cc1c:	20001db0 	.word	0x20001db0
 800cc20:	20001de4 	.word	0x20001de4
 800cc24:	20001db4 	.word	0x20001db4
 800cc28:	20001dcc 	.word	0x20001dcc
 800cc2c:	2000135b 	.word	0x2000135b

0800cc30 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800cc30:	b5b0      	push	{r4, r5, r7, lr}
 800cc32:	b090      	sub	sp, #64	@ 0x40
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	0019      	movs	r1, r3
 800cc3c:	1dfb      	adds	r3, r7, #7
 800cc3e:	701a      	strb	r2, [r3, #0]
 800cc40:	1dbb      	adds	r3, r7, #6
 800cc42:	1c0a      	adds	r2, r1, #0
 800cc44:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800cc46:	1dfb      	adds	r3, r7, #7
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d005      	beq.n	800cc5a <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800cc4e:	4b3b      	ldr	r3, [pc, #236]	@ (800cd3c <getFilteredMaxAmplitudeQ31+0x10c>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800cc54:	4b3a      	ldr	r3, [pc, #232]	@ (800cd40 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc56:	2200      	movs	r2, #0
 800cc58:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800cc62:	2305      	movs	r3, #5
 800cc64:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800cc66:	2300      	movs	r3, #0
 800cc68:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc6a:	e040      	b.n	800ccee <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800cc6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	18d3      	adds	r3, r2, r3
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc78:	409a      	lsls	r2, r3
 800cc7a:	0013      	movs	r3, r2
 800cc7c:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800cc7e:	4b30      	ldr	r3, [pc, #192]	@ (800cd40 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	425a      	negs	r2, r3
 800cc84:	4b2e      	ldr	r3, [pc, #184]	@ (800cd40 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc86:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800cc88:	2418      	movs	r4, #24
 800cc8a:	193a      	adds	r2, r7, r4
 800cc8c:	492c      	ldr	r1, [pc, #176]	@ (800cd40 <getFilteredMaxAmplitudeQ31+0x110>)
 800cc8e:	231c      	movs	r3, #28
 800cc90:	18f8      	adds	r0, r7, r3
 800cc92:	2301      	movs	r3, #1
 800cc94:	f011 fc92 	bl	801e5bc <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800cc98:	2514      	movs	r5, #20
 800cc9a:	197a      	adds	r2, r7, r5
 800cc9c:	1939      	adds	r1, r7, r4
 800cc9e:	4829      	ldr	r0, [pc, #164]	@ (800cd44 <getFilteredMaxAmplitudeQ31+0x114>)
 800cca0:	2301      	movs	r3, #1
 800cca2:	f011 fc59 	bl	801e558 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800cca6:	2410      	movs	r4, #16
 800cca8:	193a      	adds	r2, r7, r4
 800ccaa:	4924      	ldr	r1, [pc, #144]	@ (800cd3c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccac:	4826      	ldr	r0, [pc, #152]	@ (800cd48 <getFilteredMaxAmplitudeQ31+0x118>)
 800ccae:	2301      	movs	r3, #1
 800ccb0:	f011 fc52 	bl	801e558 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800ccb4:	4a21      	ldr	r2, [pc, #132]	@ (800cd3c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccb6:	1939      	adds	r1, r7, r4
 800ccb8:	1978      	adds	r0, r7, r5
 800ccba:	2301      	movs	r3, #1
 800ccbc:	f011 fc7e 	bl	801e5bc <arm_add_q31>

        lastData = fx;
 800ccc0:	69fa      	ldr	r2, [r7, #28]
 800ccc2:	4b1f      	ldr	r3, [pc, #124]	@ (800cd40 <getFilteredMaxAmplitudeQ31+0x110>)
 800ccc4:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800ccc6:	4b1d      	ldr	r3, [pc, #116]	@ (800cd3c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cccc:	429a      	cmp	r2, r3
 800ccce:	da03      	bge.n	800ccd8 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800ccd0:	4b1a      	ldr	r3, [pc, #104]	@ (800cd3c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccd6:	e007      	b.n	800cce8 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800ccd8:	4b18      	ldr	r3, [pc, #96]	@ (800cd3c <getFilteredMaxAmplitudeQ31+0x10c>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccde:	429a      	cmp	r2, r3
 800cce0:	dd02      	ble.n	800cce8 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800cce2:	4b16      	ldr	r3, [pc, #88]	@ (800cd3c <getFilteredMaxAmplitudeQ31+0x10c>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800cce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccea:	3301      	adds	r3, #1
 800ccec:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d3ba      	bcc.n	800cc6c <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf8:	17da      	asrs	r2, r3, #31
 800ccfa:	189b      	adds	r3, r3, r2
 800ccfc:	4053      	eors	r3, r2
 800ccfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800cd00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd02:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800cd04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d200      	bcs.n	800cd0e <getFilteredMaxAmplitudeQ31+0xde>
 800cd0c:	0013      	movs	r3, r2
 800cd0e:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800cd10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd14:	40da      	lsrs	r2, r3
 800cd16:	0013      	movs	r3, r2
 800cd18:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800cd1a:	1dbb      	adds	r3, r7, #6
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d007      	beq.n	800cd32 <getFilteredMaxAmplitudeQ31+0x102>
 800cd22:	4b0a      	ldr	r3, [pc, #40]	@ (800cd4c <getFilteredMaxAmplitudeQ31+0x11c>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	6a3a      	ldr	r2, [r7, #32]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d902      	bls.n	800cd32 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800cd2c:	4b07      	ldr	r3, [pc, #28]	@ (800cd4c <getFilteredMaxAmplitudeQ31+0x11c>)
 800cd2e:	6a3a      	ldr	r2, [r7, #32]
 800cd30:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800cd32:	6a3b      	ldr	r3, [r7, #32]
}
 800cd34:	0018      	movs	r0, r3
 800cd36:	46bd      	mov	sp, r7
 800cd38:	b010      	add	sp, #64	@ 0x40
 800cd3a:	bdb0      	pop	{r4, r5, r7, pc}
 800cd3c:	200021e8 	.word	0x200021e8
 800cd40:	200021ec 	.word	0x200021ec
 800cd44:	08025574 	.word	0x08025574
 800cd48:	08025578 	.word	0x08025578
 800cd4c:	20001360 	.word	0x20001360

0800cd50 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800cd5c:	4913      	ldr	r1, [pc, #76]	@ (800cdac <floatToIntAndFrac2dp+0x5c>)
 800cd5e:	68f8      	ldr	r0, [r7, #12]
 800cd60:	f7f4 f91e 	bl	8000fa0 <__aeabi_fmul>
 800cd64:	1c03      	adds	r3, r0, #0
 800cd66:	1c18      	adds	r0, r3, #0
 800cd68:	f016 f85c 	bl	8022e24 <roundf>
 800cd6c:	1c03      	adds	r3, r0, #0
 800cd6e:	1c18      	adds	r0, r3, #0
 800cd70:	f7f3 fc54 	bl	800061c <__aeabi_f2uiz>
 800cd74:	0003      	movs	r3, r0
 800cd76:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	2164      	movs	r1, #100	@ 0x64
 800cd7c:	0018      	movs	r0, r3
 800cd7e:	f7f3 fa11 	bl	80001a4 <__udivsi3>
 800cd82:	0003      	movs	r3, r0
 800cd84:	001a      	movs	r2, r3
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	b2db      	uxtb	r3, r3
 800cd94:	2164      	movs	r1, #100	@ 0x64
 800cd96:	434b      	muls	r3, r1
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	1ad3      	subs	r3, r2, r3
 800cd9c:	b2da      	uxtb	r2, r3
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	701a      	strb	r2, [r3, #0]
}
 800cda2:	46c0      	nop			@ (mov r8, r8)
 800cda4:	46bd      	mov	sp, r7
 800cda6:	b006      	add	sp, #24
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	46c0      	nop			@ (mov r8, r8)
 800cdac:	42c80000 	.word	0x42c80000

0800cdb0 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b086      	sub	sp, #24
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	60b9      	str	r1, [r7, #8]
 800cdba:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800cdbc:	4914      	ldr	r1, [pc, #80]	@ (800ce10 <floatToIntAndFrac1dp+0x60>)
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f7f4 f8ee 	bl	8000fa0 <__aeabi_fmul>
 800cdc4:	1c03      	adds	r3, r0, #0
 800cdc6:	1c18      	adds	r0, r3, #0
 800cdc8:	f016 f82c 	bl	8022e24 <roundf>
 800cdcc:	1c03      	adds	r3, r0, #0
 800cdce:	1c18      	adds	r0, r3, #0
 800cdd0:	f7f3 fc24 	bl	800061c <__aeabi_f2uiz>
 800cdd4:	0003      	movs	r3, r0
 800cdd6:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	210a      	movs	r1, #10
 800cddc:	0018      	movs	r0, r3
 800cdde:	f7f3 f9e1 	bl	80001a4 <__udivsi3>
 800cde2:	0003      	movs	r3, r0
 800cde4:	001a      	movs	r2, r3
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	1c19      	adds	r1, r3, #0
 800cdf6:	0089      	lsls	r1, r1, #2
 800cdf8:	18cb      	adds	r3, r1, r3
 800cdfa:	18db      	adds	r3, r3, r3
 800cdfc:	b2db      	uxtb	r3, r3
 800cdfe:	1ad3      	subs	r3, r2, r3
 800ce00:	b2da      	uxtb	r2, r3
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	701a      	strb	r2, [r3, #0]
}
 800ce06:	46c0      	nop			@ (mov r8, r8)
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	b006      	add	sp, #24
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	46c0      	nop			@ (mov r8, r8)
 800ce10:	41200000 	.word	0x41200000

0800ce14 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800ce14:	b590      	push	{r4, r7, lr}
 800ce16:	b087      	sub	sp, #28
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	60f8      	str	r0, [r7, #12]
 800ce1c:	60b9      	str	r1, [r7, #8]
 800ce1e:	607a      	str	r2, [r7, #4]
 800ce20:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f7f4 fbd4 	bl	80015d0 <__aeabi_i2f>
 800ce28:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ce2a:	6838      	ldr	r0, [r7, #0]
 800ce2c:	f7f4 fbd0 	bl	80015d0 <__aeabi_i2f>
 800ce30:	1c03      	adds	r3, r0, #0
 800ce32:	4918      	ldr	r1, [pc, #96]	@ (800ce94 <sumToIntAverage+0x80>)
 800ce34:	1c18      	adds	r0, r3, #0
 800ce36:	f7f3 fecd 	bl	8000bd4 <__aeabi_fdiv>
 800ce3a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ce3c:	1c19      	adds	r1, r3, #0
 800ce3e:	1c20      	adds	r0, r4, #0
 800ce40:	f7f3 fd3e 	bl	80008c0 <__aeabi_fadd>
 800ce44:	1c03      	adds	r3, r0, #0
 800ce46:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800ce48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce4a:	f7f4 fc0d 	bl	8001668 <__aeabi_ui2f>
 800ce4e:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800ce50:	1c19      	adds	r1, r3, #0
 800ce52:	1c20      	adds	r0, r4, #0
 800ce54:	f7f3 febe 	bl	8000bd4 <__aeabi_fdiv>
 800ce58:	1c03      	adds	r3, r0, #0
 800ce5a:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800ce60:	68ba      	ldr	r2, [r7, #8]
 800ce62:	2310      	movs	r3, #16
 800ce64:	18f9      	adds	r1, r7, r3
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	1c18      	adds	r0, r3, #0
 800ce6a:	f7ff ffa1 	bl	800cdb0 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	2bff      	cmp	r3, #255	@ 0xff
 800ce72:	d906      	bls.n	800ce82 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	22ff      	movs	r2, #255	@ 0xff
 800ce78:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	2209      	movs	r2, #9
 800ce7e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800ce80:	e003      	b.n	800ce8a <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	b2da      	uxtb	r2, r3
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	701a      	strb	r2, [r3, #0]
}
 800ce8a:	46c0      	nop			@ (mov r8, r8)
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	b007      	add	sp, #28
 800ce90:	bd90      	pop	{r4, r7, pc}
 800ce92:	46c0      	nop			@ (mov r8, r8)
 800ce94:	41200000 	.word	0x41200000

0800ce98 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	60b9      	str	r1, [r7, #8]
 800cea2:	607a      	str	r2, [r7, #4]
 800cea4:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	2280      	movs	r2, #128	@ 0x80
 800ceaa:	0612      	lsls	r2, r2, #24
 800ceac:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	4a18      	ldr	r2, [pc, #96]	@ (800cf14 <findMinMax+0x7c>)
 800ceb2:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	617b      	str	r3, [r7, #20]
 800ceb8:	e022      	b.n	800cf00 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	009b      	lsls	r3, r3, #2
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	18d3      	adds	r3, r2, r3
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	da06      	bge.n	800ceda <findMinMax+0x42>
        {
            min[0] = array[i];
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	18d3      	adds	r3, r2, r3
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	18d3      	adds	r3, r2, r3
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	dd06      	ble.n	800cefa <findMinMax+0x62>
        {
            max[0] = array[i];
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	009b      	lsls	r3, r3, #2
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	18d3      	adds	r3, r2, r3
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	3301      	adds	r3, #1
 800cefe:	617b      	str	r3, [r7, #20]
 800cf00:	697a      	ldr	r2, [r7, #20]
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d3d8      	bcc.n	800ceba <findMinMax+0x22>
        }
    }
}
 800cf08:	46c0      	nop			@ (mov r8, r8)
 800cf0a:	46c0      	nop			@ (mov r8, r8)
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	b006      	add	sp, #24
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	46c0      	nop			@ (mov r8, r8)
 800cf14:	7fffffff 	.word	0x7fffffff

0800cf18 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800cf22:	2300      	movs	r3, #0
 800cf24:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d302      	bcc.n	800cf34 <getPo2factor+0x1c>
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d107      	bne.n	800cf44 <getPo2factor+0x2c>
    {
        return 0;
 800cf34:	2300      	movs	r3, #0
 800cf36:	e00d      	b.n	800cf54 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	085b      	lsrs	r3, r3, #1
 800cf3c:	607b      	str	r3, [r7, #4]
        bitShift++;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	3301      	adds	r3, #1
 800cf42:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d2f5      	bcs.n	800cf38 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	3b01      	subs	r3, #1
 800cf50:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800cf52:	68fb      	ldr	r3, [r7, #12]
}
 800cf54:	0018      	movs	r0, r3
 800cf56:	46bd      	mov	sp, r7
 800cf58:	b004      	add	sp, #16
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b086      	sub	sp, #24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	607a      	str	r2, [r7, #4]
 800cf68:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	f7f4 fb7c 	bl	8001668 <__aeabi_ui2f>
 800cf70:	1c03      	adds	r3, r0, #0
 800cf72:	1c19      	adds	r1, r3, #0
 800cf74:	68b8      	ldr	r0, [r7, #8]
 800cf76:	f7f4 f813 	bl	8000fa0 <__aeabi_fmul>
 800cf7a:	1c03      	adds	r3, r0, #0
 800cf7c:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800cf82:	683a      	ldr	r2, [r7, #0]
 800cf84:	2310      	movs	r3, #16
 800cf86:	18f9      	adds	r1, r7, r3
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	1c18      	adds	r0, r3, #0
 800cf8c:	f7ff fee0 	bl	800cd50 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	b29a      	uxth	r2, r3
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	801a      	strh	r2, [r3, #0]
}
 800cf98:	46c0      	nop			@ (mov r8, r8)
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	b006      	add	sp, #24
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60b8      	str	r0, [r7, #8]
 800cfa8:	60f9      	str	r1, [r7, #12]
 800cfaa:	607a      	str	r2, [r7, #4]
 800cfac:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800cfae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb0:	6a3a      	ldr	r2, [r7, #32]
 800cfb2:	68b8      	ldr	r0, [r7, #8]
 800cfb4:	68f9      	ldr	r1, [r7, #12]
 800cfb6:	f7fa f95d 	bl	8007274 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800cfba:	6a3b      	ldr	r3, [r7, #32]
 800cfbc:	681a      	ldr	r2, [r3, #0]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	18d2      	adds	r2, r2, r3
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	18d2      	adds	r2, r2, r3
 800cfc6:	6a3b      	ldr	r3, [r7, #32]
 800cfc8:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800cfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	18d2      	adds	r2, r2, r3
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	18d2      	adds	r2, r2, r3
 800cfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd8:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800cfda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	0011      	movs	r1, r2
 800cfe0:	0018      	movs	r0, r3
 800cfe2:	f7fa f9d7 	bl	8007394 <correctIntFracNumber>
}
 800cfe6:	46c0      	nop			@ (mov r8, r8)
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	b004      	add	sp, #16
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b086      	sub	sp, #24
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	60f8      	str	r0, [r7, #12]
 800cff6:	60b9      	str	r1, [r7, #8]
 800cff8:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800cffa:	2300      	movs	r3, #0
 800cffc:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800cffe:	2300      	movs	r3, #0
 800d000:	613b      	str	r3, [r7, #16]
 800d002:	e019      	b.n	800d038 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	005b      	lsls	r3, r3, #1
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	18d3      	adds	r3, r2, r3
 800d00c:	881b      	ldrh	r3, [r3, #0]
 800d00e:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d010:	693a      	ldr	r2, [r7, #16]
 800d012:	3201      	adds	r2, #1
 800d014:	0052      	lsls	r2, r2, #1
 800d016:	68f9      	ldr	r1, [r7, #12]
 800d018:	188a      	adds	r2, r1, r2
 800d01a:	8812      	ldrh	r2, [r2, #0]
 800d01c:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d01e:	0019      	movs	r1, r3
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800d028:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800d02a:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	3301      	adds	r3, #1
 800d030:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	3304      	adds	r3, #4
 800d036:	613b      	str	r3, [r7, #16]
 800d038:	693a      	ldr	r2, [r7, #16]
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d3e1      	bcc.n	800d004 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800d040:	46c0      	nop			@ (mov r8, r8)
 800d042:	46c0      	nop			@ (mov r8, r8)
 800d044:	46bd      	mov	sp, r7
 800d046:	b006      	add	sp, #24
 800d048:	bd80      	pop	{r7, pc}
	...

0800d04c <InitDone>:
uint32_t ConfigStamp;
uint32_t UserbuttonStamp;
uint32_t PowerStamp = 0;
static float batteryCharge = 0.0;

void InitDone(){
 800d04c:	b580      	push	{r7, lr}
 800d04e:	af00      	add	r7, sp, #0
  init = false;
 800d050:	4b02      	ldr	r3, [pc, #8]	@ (800d05c <InitDone+0x10>)
 800d052:	2200      	movs	r2, #0
 800d054:	701a      	strb	r2, [r3, #0]
}
 800d056:	46c0      	nop			@ (mov r8, r8)
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}
 800d05c:	200000c8 	.word	0x200000c8

0800d060 <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800d060:	b580      	push	{r7, lr}
 800d062:	b082      	sub	sp, #8
 800d064:	af00      	add	r7, sp, #0
  Battery_Status status;
  batteryCharge = ReadBatteryVoltage();
 800d066:	f7f9 f92f 	bl	80062c8 <ReadBatteryVoltage>
 800d06a:	1c02      	adds	r2, r0, #0
 800d06c:	4b25      	ldr	r3, [pc, #148]	@ (800d104 <batteryChargeCheck+0xa4>)
 800d06e:	601a      	str	r2, [r3, #0]
  if(batteryCharge < 3.5){
 800d070:	4b24      	ldr	r3, [pc, #144]	@ (800d104 <batteryChargeCheck+0xa4>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4924      	ldr	r1, [pc, #144]	@ (800d108 <batteryChargeCheck+0xa8>)
 800d076:	1c18      	adds	r0, r3, #0
 800d078:	f7f3 fa5a 	bl	8000530 <__aeabi_fcmplt>
 800d07c:	1e03      	subs	r3, r0, #0
 800d07e:	d002      	beq.n	800d086 <batteryChargeCheck+0x26>
    status = BATTERY_CRITICAL;
 800d080:	1dfb      	adds	r3, r7, #7
 800d082:	2200      	movs	r2, #0
 800d084:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800d086:	4b1f      	ldr	r3, [pc, #124]	@ (800d104 <batteryChargeCheck+0xa4>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	1c18      	adds	r0, r3, #0
 800d08c:	f7f6 f9ea 	bl	8003464 <__aeabi_f2d>
 800d090:	4a1e      	ldr	r2, [pc, #120]	@ (800d10c <batteryChargeCheck+0xac>)
 800d092:	4b1f      	ldr	r3, [pc, #124]	@ (800d110 <batteryChargeCheck+0xb0>)
 800d094:	f7f3 fa12 	bl	80004bc <__aeabi_dcmplt>
 800d098:	1e03      	subs	r3, r0, #0
 800d09a:	d00a      	beq.n	800d0b2 <batteryChargeCheck+0x52>
 800d09c:	4b19      	ldr	r3, [pc, #100]	@ (800d104 <batteryChargeCheck+0xa4>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4919      	ldr	r1, [pc, #100]	@ (800d108 <batteryChargeCheck+0xa8>)
 800d0a2:	1c18      	adds	r0, r3, #0
 800d0a4:	f7f3 fa62 	bl	800056c <__aeabi_fcmpge>
 800d0a8:	1e03      	subs	r3, r0, #0
 800d0aa:	d002      	beq.n	800d0b2 <batteryChargeCheck+0x52>
    status = BATTERY_LOW;
 800d0ac:	1dfb      	adds	r3, r7, #7
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800d0b2:	4b14      	ldr	r3, [pc, #80]	@ (800d104 <batteryChargeCheck+0xa4>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2181      	movs	r1, #129	@ 0x81
 800d0b8:	05c9      	lsls	r1, r1, #23
 800d0ba:	1c18      	adds	r0, r3, #0
 800d0bc:	f7f3 fa38 	bl	8000530 <__aeabi_fcmplt>
 800d0c0:	1e03      	subs	r3, r0, #0
 800d0c2:	d00d      	beq.n	800d0e0 <batteryChargeCheck+0x80>
 800d0c4:	4b0f      	ldr	r3, [pc, #60]	@ (800d104 <batteryChargeCheck+0xa4>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	1c18      	adds	r0, r3, #0
 800d0ca:	f7f6 f9cb 	bl	8003464 <__aeabi_f2d>
 800d0ce:	4a0f      	ldr	r2, [pc, #60]	@ (800d10c <batteryChargeCheck+0xac>)
 800d0d0:	4b0f      	ldr	r3, [pc, #60]	@ (800d110 <batteryChargeCheck+0xb0>)
 800d0d2:	f7f3 fa11 	bl	80004f8 <__aeabi_dcmpge>
 800d0d6:	1e03      	subs	r3, r0, #0
 800d0d8:	d002      	beq.n	800d0e0 <batteryChargeCheck+0x80>
    status = BATTERY_GOOD;
 800d0da:	1dfb      	adds	r3, r7, #7
 800d0dc:	2202      	movs	r2, #2
 800d0de:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800d0e0:	4b08      	ldr	r3, [pc, #32]	@ (800d104 <batteryChargeCheck+0xa4>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	2181      	movs	r1, #129	@ 0x81
 800d0e6:	05c9      	lsls	r1, r1, #23
 800d0e8:	1c18      	adds	r0, r3, #0
 800d0ea:	f7f3 fa3f 	bl	800056c <__aeabi_fcmpge>
 800d0ee:	1e03      	subs	r3, r0, #0
 800d0f0:	d002      	beq.n	800d0f8 <batteryChargeCheck+0x98>
    status = BATTERY_FULL;
 800d0f2:	1dfb      	adds	r3, r7, #7
 800d0f4:	2203      	movs	r2, #3
 800d0f6:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800d0f8:	1dfb      	adds	r3, r7, #7
 800d0fa:	781b      	ldrb	r3, [r3, #0]
}
 800d0fc:	0018      	movs	r0, r3
 800d0fe:	46bd      	mov	sp, r7
 800d100:	b002      	add	sp, #8
 800d102:	bd80      	pop	{r7, pc}
 800d104:	200021fc 	.word	0x200021fc
 800d108:	40600000 	.word	0x40600000
 800d10c:	9999999a 	.word	0x9999999a
 800d110:	400d9999 	.word	0x400d9999

0800d114 <Calculate_LED_ON>:
  HAL_Delay(1000);
}
//====================
*/

uint16_t Calculate_LED_ON() {
 800d114:	b5b0      	push	{r4, r5, r7, lr}
 800d116:	af00      	add	r7, sp, #0
  static uint16_t solmV;
  solmV = ReadSolarVoltage();
 800d118:	f7f9 f938 	bl	800638c <ReadSolarVoltage>
 800d11c:	0003      	movs	r3, r0
 800d11e:	001a      	movs	r2, r3
 800d120:	4b1a      	ldr	r3, [pc, #104]	@ (800d18c <Calculate_LED_ON+0x78>)
 800d122:	801a      	strh	r2, [r3, #0]
  if (solmV < 2900) {
 800d124:	4b19      	ldr	r3, [pc, #100]	@ (800d18c <Calculate_LED_ON+0x78>)
 800d126:	881b      	ldrh	r3, [r3, #0]
 800d128:	4a19      	ldr	r2, [pc, #100]	@ (800d190 <Calculate_LED_ON+0x7c>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d802      	bhi.n	800d134 <Calculate_LED_ON+0x20>
    solmV = 2900;
 800d12e:	4b17      	ldr	r3, [pc, #92]	@ (800d18c <Calculate_LED_ON+0x78>)
 800d130:	4a18      	ldr	r2, [pc, #96]	@ (800d194 <Calculate_LED_ON+0x80>)
 800d132:	801a      	strh	r2, [r3, #0]
  }
  if (solmV > 4700) {
 800d134:	4b15      	ldr	r3, [pc, #84]	@ (800d18c <Calculate_LED_ON+0x78>)
 800d136:	881b      	ldrh	r3, [r3, #0]
 800d138:	4a17      	ldr	r2, [pc, #92]	@ (800d198 <Calculate_LED_ON+0x84>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d902      	bls.n	800d144 <Calculate_LED_ON+0x30>
    solmV = 4700;
 800d13e:	4b13      	ldr	r3, [pc, #76]	@ (800d18c <Calculate_LED_ON+0x78>)
 800d140:	4a15      	ldr	r2, [pc, #84]	@ (800d198 <Calculate_LED_ON+0x84>)
 800d142:	801a      	strh	r2, [r3, #0]
  }
  return (solmV+(3566-solmV)*1.5);
 800d144:	4b11      	ldr	r3, [pc, #68]	@ (800d18c <Calculate_LED_ON+0x78>)
 800d146:	881b      	ldrh	r3, [r3, #0]
 800d148:	0018      	movs	r0, r3
 800d14a:	f7f6 f939 	bl	80033c0 <__aeabi_i2d>
 800d14e:	0004      	movs	r4, r0
 800d150:	000d      	movs	r5, r1
 800d152:	4b0e      	ldr	r3, [pc, #56]	@ (800d18c <Calculate_LED_ON+0x78>)
 800d154:	881b      	ldrh	r3, [r3, #0]
 800d156:	001a      	movs	r2, r3
 800d158:	4b10      	ldr	r3, [pc, #64]	@ (800d19c <Calculate_LED_ON+0x88>)
 800d15a:	1a9b      	subs	r3, r3, r2
 800d15c:	0018      	movs	r0, r3
 800d15e:	f7f6 f92f 	bl	80033c0 <__aeabi_i2d>
 800d162:	2200      	movs	r2, #0
 800d164:	4b0e      	ldr	r3, [pc, #56]	@ (800d1a0 <Calculate_LED_ON+0x8c>)
 800d166:	f7f5 fa69 	bl	800263c <__aeabi_dmul>
 800d16a:	0002      	movs	r2, r0
 800d16c:	000b      	movs	r3, r1
 800d16e:	0020      	movs	r0, r4
 800d170:	0029      	movs	r1, r5
 800d172:	f7f4 fabb 	bl	80016ec <__aeabi_dadd>
 800d176:	0002      	movs	r2, r0
 800d178:	000b      	movs	r3, r1
 800d17a:	0010      	movs	r0, r2
 800d17c:	0019      	movs	r1, r3
 800d17e:	f7f3 fa65 	bl	800064c <__aeabi_d2uiz>
 800d182:	0003      	movs	r3, r0
 800d184:	b29b      	uxth	r3, r3
}
 800d186:	0018      	movs	r0, r3
 800d188:	46bd      	mov	sp, r7
 800d18a:	bdb0      	pop	{r4, r5, r7, pc}
 800d18c:	20002200 	.word	0x20002200
 800d190:	00000b53 	.word	0x00000b53
 800d194:	00000b54 	.word	0x00000b54
 800d198:	0000125c 	.word	0x0000125c
 800d19c:	00000dee 	.word	0x00000dee
 800d1a0:	3ff80000 	.word	0x3ff80000

0800d1a4 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800d1a4:	b590      	push	{r4, r7, lr}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	0004      	movs	r4, r0
 800d1ac:	0008      	movs	r0, r1
 800d1ae:	0011      	movs	r1, r2
 800d1b0:	1dbb      	adds	r3, r7, #6
 800d1b2:	1c22      	adds	r2, r4, #0
 800d1b4:	801a      	strh	r2, [r3, #0]
 800d1b6:	1d3b      	adds	r3, r7, #4
 800d1b8:	1c02      	adds	r2, r0, #0
 800d1ba:	801a      	strh	r2, [r3, #0]
 800d1bc:	1cbb      	adds	r3, r7, #2
 800d1be:	1c0a      	adds	r2, r1, #0
 800d1c0:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d1c2:	4b0f      	ldr	r3, [pc, #60]	@ (800d200 <SetStatusLED+0x5c>)
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d107      	bne.n	800d1da <SetStatusLED+0x36>
 800d1ca:	4b0e      	ldr	r3, [pc, #56]	@ (800d204 <SetStatusLED+0x60>)
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d103      	bne.n	800d1da <SetStatusLED+0x36>
 800d1d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d208 <SetStatusLED+0x64>)
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00e      	beq.n	800d1f8 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800d1da:	2380      	movs	r3, #128	@ 0x80
 800d1dc:	05db      	lsls	r3, r3, #23
 800d1de:	1dba      	adds	r2, r7, #6
 800d1e0:	8812      	ldrh	r2, [r2, #0]
 800d1e2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800d1e4:	2380      	movs	r3, #128	@ 0x80
 800d1e6:	05db      	lsls	r3, r3, #23
 800d1e8:	1d3a      	adds	r2, r7, #4
 800d1ea:	8812      	ldrh	r2, [r2, #0]
 800d1ec:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800d1ee:	2380      	movs	r3, #128	@ 0x80
 800d1f0:	05db      	lsls	r3, r3, #23
 800d1f2:	1cba      	adds	r2, r7, #2
 800d1f4:	8812      	ldrh	r2, [r2, #0]
 800d1f6:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d1f8:	46c0      	nop			@ (mov r8, r8)
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	b003      	add	sp, #12
 800d1fe:	bd90      	pop	{r4, r7, pc}
 800d200:	200021f1 	.word	0x200021f1
 800d204:	200000c8 	.word	0x200000c8
 800d208:	200021f2 	.word	0x200021f2

0800d20c <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800d20c:	b590      	push	{r4, r7, lr}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	0004      	movs	r4, r0
 800d214:	0008      	movs	r0, r1
 800d216:	0011      	movs	r1, r2
 800d218:	1dfb      	adds	r3, r7, #7
 800d21a:	1c22      	adds	r2, r4, #0
 800d21c:	701a      	strb	r2, [r3, #0]
 800d21e:	1dbb      	adds	r3, r7, #6
 800d220:	1c02      	adds	r2, r0, #0
 800d222:	701a      	strb	r2, [r3, #0]
 800d224:	1d7b      	adds	r3, r7, #5
 800d226:	1c0a      	adds	r2, r1, #0
 800d228:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800d22a:	4b19      	ldr	r3, [pc, #100]	@ (800d290 <SetDBLED+0x84>)
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d107      	bne.n	800d242 <SetDBLED+0x36>
 800d232:	4b18      	ldr	r3, [pc, #96]	@ (800d294 <SetDBLED+0x88>)
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d103      	bne.n	800d242 <SetDBLED+0x36>
 800d23a:	4b17      	ldr	r3, [pc, #92]	@ (800d298 <SetDBLED+0x8c>)
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d022      	beq.n	800d288 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800d242:	1dfb      	adds	r3, r7, #7
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	2201      	movs	r2, #1
 800d248:	4053      	eors	r3, r2
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	001a      	movs	r2, r3
 800d24e:	4b13      	ldr	r3, [pc, #76]	@ (800d29c <SetDBLED+0x90>)
 800d250:	2101      	movs	r1, #1
 800d252:	0018      	movs	r0, r3
 800d254:	f002 ffb7 	bl	80101c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800d258:	1dbb      	adds	r3, r7, #6
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	2201      	movs	r2, #1
 800d25e:	4053      	eors	r3, r2
 800d260:	b2db      	uxtb	r3, r3
 800d262:	001a      	movs	r2, r3
 800d264:	2380      	movs	r3, #128	@ 0x80
 800d266:	005b      	lsls	r3, r3, #1
 800d268:	480c      	ldr	r0, [pc, #48]	@ (800d29c <SetDBLED+0x90>)
 800d26a:	0019      	movs	r1, r3
 800d26c:	f002 ffab 	bl	80101c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800d270:	1d7b      	adds	r3, r7, #5
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	2201      	movs	r2, #1
 800d276:	4053      	eors	r3, r2
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	001a      	movs	r2, r3
 800d27c:	2380      	movs	r3, #128	@ 0x80
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	4806      	ldr	r0, [pc, #24]	@ (800d29c <SetDBLED+0x90>)
 800d282:	0019      	movs	r1, r3
 800d284:	f002 ff9f 	bl	80101c6 <HAL_GPIO_WritePin>
  }
}
 800d288:	46c0      	nop			@ (mov r8, r8)
 800d28a:	46bd      	mov	sp, r7
 800d28c:	b003      	add	sp, #12
 800d28e:	bd90      	pop	{r4, r7, pc}
 800d290:	200021f1 	.word	0x200021f1
 800d294:	200000c8 	.word	0x200000c8
 800d298:	200021f2 	.word	0x200021f2
 800d29c:	50000400 	.word	0x50000400

0800d2a0 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800d2a0:	b590      	push	{r4, r7, lr}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	0004      	movs	r4, r0
 800d2a8:	0008      	movs	r0, r1
 800d2aa:	0011      	movs	r1, r2
 800d2ac:	1dbb      	adds	r3, r7, #6
 800d2ae:	1c22      	adds	r2, r4, #0
 800d2b0:	801a      	strh	r2, [r3, #0]
 800d2b2:	1d3b      	adds	r3, r7, #4
 800d2b4:	1c02      	adds	r2, r0, #0
 800d2b6:	801a      	strh	r2, [r3, #0]
 800d2b8:	1cbb      	adds	r3, r7, #2
 800d2ba:	1c0a      	adds	r2, r1, #0
 800d2bc:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800d2be:	4b0e      	ldr	r3, [pc, #56]	@ (800d2f8 <SetVocLED+0x58>)
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d107      	bne.n	800d2d6 <SetVocLED+0x36>
 800d2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d2fc <SetVocLED+0x5c>)
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d103      	bne.n	800d2d6 <SetVocLED+0x36>
 800d2ce:	4b0c      	ldr	r3, [pc, #48]	@ (800d300 <SetVocLED+0x60>)
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00b      	beq.n	800d2ee <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800d2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800d304 <SetVocLED+0x64>)
 800d2d8:	1dba      	adds	r2, r7, #6
 800d2da:	8812      	ldrh	r2, [r2, #0]
 800d2dc:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800d2de:	4b09      	ldr	r3, [pc, #36]	@ (800d304 <SetVocLED+0x64>)
 800d2e0:	1d3a      	adds	r2, r7, #4
 800d2e2:	8812      	ldrh	r2, [r2, #0]
 800d2e4:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800d2e6:	4b07      	ldr	r3, [pc, #28]	@ (800d304 <SetVocLED+0x64>)
 800d2e8:	1cba      	adds	r2, r7, #2
 800d2ea:	8812      	ldrh	r2, [r2, #0]
 800d2ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d2ee:	46c0      	nop			@ (mov r8, r8)
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	b003      	add	sp, #12
 800d2f4:	bd90      	pop	{r4, r7, pc}
 800d2f6:	46c0      	nop			@ (mov r8, r8)
 800d2f8:	200021f1 	.word	0x200021f1
 800d2fc:	200000c8 	.word	0x200000c8
 800d300:	200021f2 	.word	0x200021f2
 800d304:	40000400 	.word	0x40000400

0800d308 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800d308:	b580      	push	{r7, lr}
 800d30a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d30c:	4b08      	ldr	r3, [pc, #32]	@ (800d330 <SetMeasurementIndicator+0x28>)
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d103      	bne.n	800d31c <SetMeasurementIndicator+0x14>
 800d314:	4b07      	ldr	r3, [pc, #28]	@ (800d334 <SetMeasurementIndicator+0x2c>)
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d006      	beq.n	800d32a <SetMeasurementIndicator+0x22>
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d31c:	f7ff fefa 	bl	800d114 <Calculate_LED_ON>
 800d320:	0003      	movs	r3, r0
 800d322:	001a      	movs	r2, r3
 800d324:	2380      	movs	r3, #128	@ 0x80
 800d326:	05db      	lsls	r3, r3, #23
 800d328:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d32a:	46c0      	nop			@ (mov r8, r8)
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	200021f1 	.word	0x200021f1
 800d334:	200021f2 	.word	0x200021f2

0800d338 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800d338:	b580      	push	{r7, lr}
 800d33a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d33c:	4b07      	ldr	r3, [pc, #28]	@ (800d35c <ResetMeasurementIndicator+0x24>)
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d103      	bne.n	800d34c <ResetMeasurementIndicator+0x14>
 800d344:	4b06      	ldr	r3, [pc, #24]	@ (800d360 <ResetMeasurementIndicator+0x28>)
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d004      	beq.n	800d356 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800d34c:	2380      	movs	r3, #128	@ 0x80
 800d34e:	05db      	lsls	r3, r3, #23
 800d350:	22fa      	movs	r2, #250	@ 0xfa
 800d352:	0112      	lsls	r2, r2, #4
 800d354:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d356:	46c0      	nop			@ (mov r8, r8)
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	200021f1 	.word	0x200021f1
 800d360:	200021f2 	.word	0x200021f2

0800d364 <SetMICIndicator>:
void SetMICIndicator(){
 800d364:	b580      	push	{r7, lr}
 800d366:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d368:	4b16      	ldr	r3, [pc, #88]	@ (800d3c4 <SetMICIndicator+0x60>)
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d103      	bne.n	800d378 <SetMICIndicator+0x14>
 800d370:	4b15      	ldr	r3, [pc, #84]	@ (800d3c8 <SetMICIndicator+0x64>)
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d007      	beq.n	800d388 <SetMICIndicator+0x24>
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d378:	f7ff fecc 	bl	800d114 <Calculate_LED_ON>
 800d37c:	0003      	movs	r3, r0
 800d37e:	001a      	movs	r2, r3
 800d380:	2380      	movs	r3, #128	@ 0x80
 800d382:	05db      	lsls	r3, r3, #23
 800d384:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = Calculate_LED_ON();
    }
  }
}
 800d386:	e019      	b.n	800d3bc <SetMICIndicator+0x58>
    if (batteryCharge > 3.7) {
 800d388:	4b10      	ldr	r3, [pc, #64]	@ (800d3cc <SetMICIndicator+0x68>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	1c18      	adds	r0, r3, #0
 800d38e:	f7f6 f869 	bl	8003464 <__aeabi_f2d>
 800d392:	4a0f      	ldr	r2, [pc, #60]	@ (800d3d0 <SetMICIndicator+0x6c>)
 800d394:	4b0f      	ldr	r3, [pc, #60]	@ (800d3d4 <SetMICIndicator+0x70>)
 800d396:	f7f3 f8a5 	bl	80004e4 <__aeabi_dcmpgt>
 800d39a:	1e03      	subs	r3, r0, #0
 800d39c:	d007      	beq.n	800d3ae <SetMICIndicator+0x4a>
      TIM2 -> CCR3 = Calculate_LED_ON();
 800d39e:	f7ff feb9 	bl	800d114 <Calculate_LED_ON>
 800d3a2:	0003      	movs	r3, r0
 800d3a4:	001a      	movs	r2, r3
 800d3a6:	2380      	movs	r3, #128	@ 0x80
 800d3a8:	05db      	lsls	r3, r3, #23
 800d3aa:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d3ac:	e006      	b.n	800d3bc <SetMICIndicator+0x58>
      TIM2 -> CCR1 = Calculate_LED_ON();
 800d3ae:	f7ff feb1 	bl	800d114 <Calculate_LED_ON>
 800d3b2:	0003      	movs	r3, r0
 800d3b4:	001a      	movs	r2, r3
 800d3b6:	2380      	movs	r3, #128	@ 0x80
 800d3b8:	05db      	lsls	r3, r3, #23
 800d3ba:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800d3bc:	46c0      	nop			@ (mov r8, r8)
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	46c0      	nop			@ (mov r8, r8)
 800d3c4:	200021f1 	.word	0x200021f1
 800d3c8:	200021f2 	.word	0x200021f2
 800d3cc:	200021fc 	.word	0x200021fc
 800d3d0:	9999999a 	.word	0x9999999a
 800d3d4:	400d9999 	.word	0x400d9999

0800d3d8 <ResetMICIndicator>:
void ResetMICIndicator(){
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d3dc:	4b13      	ldr	r3, [pc, #76]	@ (800d42c <ResetMICIndicator+0x54>)
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d103      	bne.n	800d3ec <ResetMICIndicator+0x14>
 800d3e4:	4b12      	ldr	r3, [pc, #72]	@ (800d430 <ResetMICIndicator+0x58>)
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d005      	beq.n	800d3f8 <ResetMICIndicator+0x20>
    TIM2 -> CCR1 = LED_OFF;
 800d3ec:	2380      	movs	r3, #128	@ 0x80
 800d3ee:	05db      	lsls	r3, r3, #23
 800d3f0:	22fa      	movs	r2, #250	@ 0xfa
 800d3f2:	0112      	lsls	r2, r2, #4
 800d3f4:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    else {
      TIM2 -> CCR1 = LED_OFF;
    }
  }
}
 800d3f6:	e015      	b.n	800d424 <ResetMICIndicator+0x4c>
    if (batteryCharge > 3.74) {
 800d3f8:	4b0e      	ldr	r3, [pc, #56]	@ (800d434 <ResetMICIndicator+0x5c>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	1c18      	adds	r0, r3, #0
 800d3fe:	f7f6 f831 	bl	8003464 <__aeabi_f2d>
 800d402:	4a0d      	ldr	r2, [pc, #52]	@ (800d438 <ResetMICIndicator+0x60>)
 800d404:	4b0d      	ldr	r3, [pc, #52]	@ (800d43c <ResetMICIndicator+0x64>)
 800d406:	f7f3 f86d 	bl	80004e4 <__aeabi_dcmpgt>
 800d40a:	1e03      	subs	r3, r0, #0
 800d40c:	d005      	beq.n	800d41a <ResetMICIndicator+0x42>
      TIM2 -> CCR3 = LED_OFF;
 800d40e:	2380      	movs	r3, #128	@ 0x80
 800d410:	05db      	lsls	r3, r3, #23
 800d412:	22fa      	movs	r2, #250	@ 0xfa
 800d414:	0112      	lsls	r2, r2, #4
 800d416:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800d418:	e004      	b.n	800d424 <ResetMICIndicator+0x4c>
      TIM2 -> CCR1 = LED_OFF;
 800d41a:	2380      	movs	r3, #128	@ 0x80
 800d41c:	05db      	lsls	r3, r3, #23
 800d41e:	22fa      	movs	r2, #250	@ 0xfa
 800d420:	0112      	lsls	r2, r2, #4
 800d422:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800d424:	46c0      	nop			@ (mov r8, r8)
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	46c0      	nop			@ (mov r8, r8)
 800d42c:	200021f1 	.word	0x200021f1
 800d430:	200021f2 	.word	0x200021f2
 800d434:	200021fc 	.word	0x200021fc
 800d438:	1eb851ec 	.word	0x1eb851ec
 800d43c:	400deb85 	.word	0x400deb85

0800d440 <SetESPIndicator>:
void SetESPIndicator(){
 800d440:	b580      	push	{r7, lr}
 800d442:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d444:	4b08      	ldr	r3, [pc, #32]	@ (800d468 <SetESPIndicator+0x28>)
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d103      	bne.n	800d454 <SetESPIndicator+0x14>
 800d44c:	4b07      	ldr	r3, [pc, #28]	@ (800d46c <SetESPIndicator+0x2c>)
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d006      	beq.n	800d462 <SetESPIndicator+0x22>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d454:	f7ff fe5e 	bl	800d114 <Calculate_LED_ON>
 800d458:	0003      	movs	r3, r0
 800d45a:	001a      	movs	r2, r3
 800d45c:	2380      	movs	r3, #128	@ 0x80
 800d45e:	05db      	lsls	r3, r3, #23
 800d460:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d462:	46c0      	nop			@ (mov r8, r8)
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	200021f1 	.word	0x200021f1
 800d46c:	200021f2 	.word	0x200021f2

0800d470 <ResetESPIndicator>:
void ResetESPIndicator(){
 800d470:	b580      	push	{r7, lr}
 800d472:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d474:	4b07      	ldr	r3, [pc, #28]	@ (800d494 <ResetESPIndicator+0x24>)
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d103      	bne.n	800d484 <ResetESPIndicator+0x14>
 800d47c:	4b06      	ldr	r3, [pc, #24]	@ (800d498 <ResetESPIndicator+0x28>)
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d004      	beq.n	800d48e <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800d484:	2380      	movs	r3, #128	@ 0x80
 800d486:	05db      	lsls	r3, r3, #23
 800d488:	22fa      	movs	r2, #250	@ 0xfa
 800d48a:	0112      	lsls	r2, r2, #4
 800d48c:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800d48e:	46c0      	nop			@ (mov r8, r8)
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	200021f1 	.word	0x200021f1
 800d498:	200021f2 	.word	0x200021f2

0800d49c <SetPMIndicator>:

void SetPMIndicator() {
 800d49c:	b580      	push	{r7, lr}
 800d49e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d4a0:	4b0f      	ldr	r3, [pc, #60]	@ (800d4e0 <SetPMIndicator+0x44>)
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d103      	bne.n	800d4b0 <SetPMIndicator+0x14>
 800d4a8:	4b0e      	ldr	r3, [pc, #56]	@ (800d4e4 <SetPMIndicator+0x48>)
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d014      	beq.n	800d4da <SetPMIndicator+0x3e>
    TIM2 -> CCR4 = Calculate_LED_ON();
 800d4b0:	f7ff fe30 	bl	800d114 <Calculate_LED_ON>
 800d4b4:	0003      	movs	r3, r0
 800d4b6:	001a      	movs	r2, r3
 800d4b8:	2380      	movs	r3, #128	@ 0x80
 800d4ba:	05db      	lsls	r3, r3, #23
 800d4bc:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = Calculate_LED_ON();
 800d4be:	f7ff fe29 	bl	800d114 <Calculate_LED_ON>
 800d4c2:	0003      	movs	r3, r0
 800d4c4:	001a      	movs	r2, r3
 800d4c6:	2380      	movs	r3, #128	@ 0x80
 800d4c8:	05db      	lsls	r3, r3, #23
 800d4ca:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = Calculate_LED_ON();
 800d4cc:	f7ff fe22 	bl	800d114 <Calculate_LED_ON>
 800d4d0:	0003      	movs	r3, r0
 800d4d2:	001a      	movs	r2, r3
 800d4d4:	2380      	movs	r3, #128	@ 0x80
 800d4d6:	05db      	lsls	r3, r3, #23
 800d4d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d4da:	46c0      	nop			@ (mov r8, r8)
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	200021f1 	.word	0x200021f1
 800d4e4:	200021f2 	.word	0x200021f2

0800d4e8 <ResetPMIndicator>:

void ResetPMIndicator() {
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800d4ec:	4b0c      	ldr	r3, [pc, #48]	@ (800d520 <ResetPMIndicator+0x38>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d103      	bne.n	800d4fc <ResetPMIndicator+0x14>
 800d4f4:	4b0b      	ldr	r3, [pc, #44]	@ (800d524 <ResetPMIndicator+0x3c>)
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d00e      	beq.n	800d51a <ResetPMIndicator+0x32>
    TIM2 -> CCR4 = LED_OFF;
 800d4fc:	2380      	movs	r3, #128	@ 0x80
 800d4fe:	05db      	lsls	r3, r3, #23
 800d500:	22fa      	movs	r2, #250	@ 0xfa
 800d502:	0112      	lsls	r2, r2, #4
 800d504:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM2 -> CCR1 = LED_OFF;
 800d506:	2380      	movs	r3, #128	@ 0x80
 800d508:	05db      	lsls	r3, r3, #23
 800d50a:	22fa      	movs	r2, #250	@ 0xfa
 800d50c:	0112      	lsls	r2, r2, #4
 800d50e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = LED_OFF;
 800d510:	2380      	movs	r3, #128	@ 0x80
 800d512:	05db      	lsls	r3, r3, #23
 800d514:	22fa      	movs	r2, #250	@ 0xfa
 800d516:	0112      	lsls	r2, r2, #4
 800d518:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800d51a:	46c0      	nop			@ (mov r8, r8)
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}
 800d520:	200021f1 	.word	0x200021f1
 800d524:	200021f2 	.word	0x200021f2

0800d528 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800d528:	b580      	push	{r7, lr}
 800d52a:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800d52c:	23fa      	movs	r3, #250	@ 0xfa
 800d52e:	011a      	lsls	r2, r3, #4
 800d530:	23fa      	movs	r3, #250	@ 0xfa
 800d532:	0119      	lsls	r1, r3, #4
 800d534:	23fa      	movs	r3, #250	@ 0xfa
 800d536:	011b      	lsls	r3, r3, #4
 800d538:	0018      	movs	r0, r3
 800d53a:	f7ff fe33 	bl	800d1a4 <SetStatusLED>
  SetDBLED(false,false,false);
 800d53e:	2200      	movs	r2, #0
 800d540:	2100      	movs	r1, #0
 800d542:	2000      	movs	r0, #0
 800d544:	f7ff fe62 	bl	800d20c <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800d548:	23fa      	movs	r3, #250	@ 0xfa
 800d54a:	011a      	lsls	r2, r3, #4
 800d54c:	23fa      	movs	r3, #250	@ 0xfa
 800d54e:	0119      	lsls	r1, r3, #4
 800d550:	23fa      	movs	r3, #250	@ 0xfa
 800d552:	011b      	lsls	r3, r3, #4
 800d554:	0018      	movs	r0, r3
 800d556:	f7ff fea3 	bl	800d2a0 <SetVocLED>
return;
 800d55a:	46c0      	nop			@ (mov r8, r8)
}
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <powerCheck>:

Battery_Status powerCheck(){
 800d560:	b590      	push	{r4, r7, lr}
 800d562:	b083      	sub	sp, #12
 800d564:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800d566:	f7f8 ff65 	bl	8006434 <Check_USB_PowerOn>
 800d56a:	0003      	movs	r3, r0
 800d56c:	001a      	movs	r2, r3
 800d56e:	2301      	movs	r3, #1
 800d570:	4053      	eors	r3, r2
 800d572:	b2db      	uxtb	r3, r3
 800d574:	2b00      	cmp	r3, #0
 800d576:	d005      	beq.n	800d584 <powerCheck+0x24>
    status = batteryChargeCheck();
 800d578:	1dfc      	adds	r4, r7, #7
 800d57a:	f7ff fd71 	bl	800d060 <batteryChargeCheck>
 800d57e:	0003      	movs	r3, r0
 800d580:	7023      	strb	r3, [r4, #0]
 800d582:	e002      	b.n	800d58a <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800d584:	1dfb      	adds	r3, r7, #7
 800d586:	2204      	movs	r2, #4
 800d588:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800d58a:	1dfb      	adds	r3, r7, #7
 800d58c:	781b      	ldrb	r3, [r3, #0]
}
 800d58e:	0018      	movs	r0, r3
 800d590:	46bd      	mov	sp, r7
 800d592:	b003      	add	sp, #12
 800d594:	bd90      	pop	{r4, r7, pc}
	...

0800d598 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	0002      	movs	r2, r0
 800d5a0:	1dfb      	adds	r3, r7, #7
 800d5a2:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800d5a4:	1dfb      	adds	r3, r7, #7
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	2b04      	cmp	r3, #4
 800d5aa:	d105      	bne.n	800d5b8 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800d5ac:	4a18      	ldr	r2, [pc, #96]	@ (800d610 <powerDisplay+0x78>)
 800d5ae:	4b19      	ldr	r3, [pc, #100]	@ (800d614 <powerDisplay+0x7c>)
 800d5b0:	0019      	movs	r1, r3
 800d5b2:	2003      	movs	r0, #3
 800d5b4:	f000 ff20 	bl	800e3f8 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800d5b8:	1dfb      	adds	r3, r7, #7
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	2b03      	cmp	r3, #3
 800d5be:	d105      	bne.n	800d5cc <powerDisplay+0x34>
    Debug("Battery fully charged");
 800d5c0:	4a15      	ldr	r2, [pc, #84]	@ (800d618 <powerDisplay+0x80>)
 800d5c2:	4b14      	ldr	r3, [pc, #80]	@ (800d614 <powerDisplay+0x7c>)
 800d5c4:	0019      	movs	r1, r3
 800d5c6:	2003      	movs	r0, #3
 800d5c8:	f000 ff16 	bl	800e3f8 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800d5cc:	1dfb      	adds	r3, r7, #7
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	2b02      	cmp	r3, #2
 800d5d2:	d105      	bne.n	800d5e0 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800d5d4:	4a11      	ldr	r2, [pc, #68]	@ (800d61c <powerDisplay+0x84>)
 800d5d6:	4b0f      	ldr	r3, [pc, #60]	@ (800d614 <powerDisplay+0x7c>)
 800d5d8:	0019      	movs	r1, r3
 800d5da:	2003      	movs	r0, #3
 800d5dc:	f000 ff0c 	bl	800e3f8 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800d5e0:	1dfb      	adds	r3, r7, #7
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d105      	bne.n	800d5f4 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800d5e8:	4a0d      	ldr	r2, [pc, #52]	@ (800d620 <powerDisplay+0x88>)
 800d5ea:	4b0a      	ldr	r3, [pc, #40]	@ (800d614 <powerDisplay+0x7c>)
 800d5ec:	0019      	movs	r1, r3
 800d5ee:	2003      	movs	r0, #3
 800d5f0:	f000 ff02 	bl	800e3f8 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800d5f4:	1dfb      	adds	r3, r7, #7
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d105      	bne.n	800d608 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800d5fc:	4a09      	ldr	r2, [pc, #36]	@ (800d624 <powerDisplay+0x8c>)
 800d5fe:	4b05      	ldr	r3, [pc, #20]	@ (800d614 <powerDisplay+0x7c>)
 800d600:	0019      	movs	r1, r3
 800d602:	2003      	movs	r0, #3
 800d604:	f000 fef8 	bl	800e3f8 <CreateLine>
  }
}
 800d608:	46c0      	nop			@ (mov r8, r8)
 800d60a:	46bd      	mov	sp, r7
 800d60c:	b002      	add	sp, #8
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	08024d84 	.word	0x08024d84
 800d614:	08024d94 	.word	0x08024d94
 800d618:	08024d98 	.word	0x08024d98
 800d61c:	08024db0 	.word	0x08024db0
 800d620:	08024dd0 	.word	0x08024dd0
 800d624:	08024de8 	.word	0x08024de8

0800d628 <configCheck>:

void configCheck(){
 800d628:	b590      	push	{r4, r7, lr}
 800d62a:	b083      	sub	sp, #12
 800d62c:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800d62e:	f7f8 ff10 	bl	8006452 <BootButton_Pressed>
 800d632:	1e03      	subs	r3, r0, #0
 800d634:	d007      	beq.n	800d646 <configCheck+0x1e>
 800d636:	f7f8 ff1d 	bl	8006474 <UserButton_Pressed>
 800d63a:	1e03      	subs	r3, r0, #0
 800d63c:	d003      	beq.n	800d646 <configCheck+0x1e>
    configSet = true;
 800d63e:	4ba3      	ldr	r3, [pc, #652]	@ (800d8cc <configCheck+0x2a4>)
 800d640:	2201      	movs	r2, #1
 800d642:	701a      	strb	r2, [r3, #0]
 800d644:	e00a      	b.n	800d65c <configCheck+0x34>
  }
  else{
    configSet = false;
 800d646:	4ba1      	ldr	r3, [pc, #644]	@ (800d8cc <configCheck+0x2a4>)
 800d648:	2200      	movs	r2, #0
 800d64a:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800d64c:	f001 fb2a 	bl	800eca4 <HAL_GetTick>
 800d650:	0003      	movs	r3, r0
 800d652:	22fa      	movs	r2, #250	@ 0xfa
 800d654:	00d2      	lsls	r2, r2, #3
 800d656:	189a      	adds	r2, r3, r2
 800d658:	4b9d      	ldr	r3, [pc, #628]	@ (800d8d0 <configCheck+0x2a8>)
 800d65a:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800d65c:	4b9b      	ldr	r3, [pc, #620]	@ (800d8cc <configCheck+0x2a4>)
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00d      	beq.n	800d680 <configCheck+0x58>
 800d664:	4b9a      	ldr	r3, [pc, #616]	@ (800d8d0 <configCheck+0x2a8>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	0018      	movs	r0, r3
 800d66a:	f000 fe6f 	bl	800e34c <TimestampIsReached>
 800d66e:	1e03      	subs	r3, r0, #0
 800d670:	d006      	beq.n	800d680 <configCheck+0x58>
    SetConfigMode(); //Make config mode wifi
 800d672:	f7f6 fa13 	bl	8003a9c <SetConfigMode>
    SetDBLED(true, true, true);
 800d676:	2201      	movs	r2, #1
 800d678:	2101      	movs	r1, #1
 800d67a:	2001      	movs	r0, #1
 800d67c:	f7ff fdc6 	bl	800d20c <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800d680:	f7f8 fee7 	bl	8006452 <BootButton_Pressed>
 800d684:	0003      	movs	r3, r0
 800d686:	001a      	movs	r2, r3
 800d688:	2301      	movs	r3, #1
 800d68a:	4053      	eors	r3, r2
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d031      	beq.n	800d6f6 <configCheck+0xce>
 800d692:	f7f8 feef 	bl	8006474 <UserButton_Pressed>
 800d696:	1e03      	subs	r3, r0, #0
 800d698:	d02d      	beq.n	800d6f6 <configCheck+0xce>
 800d69a:	4b8e      	ldr	r3, [pc, #568]	@ (800d8d4 <configCheck+0x2ac>)
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	2201      	movs	r2, #1
 800d6a0:	4053      	eors	r3, r2
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d026      	beq.n	800d6f6 <configCheck+0xce>
    SetLEDsOff();
 800d6a8:	f7ff ff3e 	bl	800d528 <SetLEDsOff>
    Debug("userToggle flipped");
 800d6ac:	4a8a      	ldr	r2, [pc, #552]	@ (800d8d8 <configCheck+0x2b0>)
 800d6ae:	4b8b      	ldr	r3, [pc, #556]	@ (800d8dc <configCheck+0x2b4>)
 800d6b0:	0019      	movs	r1, r3
 800d6b2:	2003      	movs	r0, #3
 800d6b4:	f000 fea0 	bl	800e3f8 <CreateLine>
    userToggle = !userToggle;
 800d6b8:	4b89      	ldr	r3, [pc, #548]	@ (800d8e0 <configCheck+0x2b8>)
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	1e5a      	subs	r2, r3, #1
 800d6be:	4193      	sbcs	r3, r2
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	4053      	eors	r3, r2
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	1c1a      	adds	r2, r3, #0
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	4013      	ands	r3, r2
 800d6ce:	b2da      	uxtb	r2, r3
 800d6d0:	4b83      	ldr	r3, [pc, #524]	@ (800d8e0 <configCheck+0x2b8>)
 800d6d2:	701a      	strb	r2, [r3, #0]
    if (userToggle) {
 800d6d4:	4b82      	ldr	r3, [pc, #520]	@ (800d8e0 <configCheck+0x2b8>)
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d001      	beq.n	800d6e0 <configCheck+0xb8>
      EnabledConnectedDevices();
 800d6dc:	f7fb f8b6 	bl	800884c <EnabledConnectedDevices>
    }
    buttonHeld = true;
 800d6e0:	4b7c      	ldr	r3, [pc, #496]	@ (800d8d4 <configCheck+0x2ac>)
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	701a      	strb	r2, [r3, #0]
    UserbuttonStamp = HAL_GetTick() + 2000;
 800d6e6:	f001 fadd 	bl	800eca4 <HAL_GetTick>
 800d6ea:	0003      	movs	r3, r0
 800d6ec:	22fa      	movs	r2, #250	@ 0xfa
 800d6ee:	00d2      	lsls	r2, r2, #3
 800d6f0:	189a      	adds	r2, r3, r2
 800d6f2:	4b7c      	ldr	r3, [pc, #496]	@ (800d8e4 <configCheck+0x2bc>)
 800d6f4:	601a      	str	r2, [r3, #0]
  }
  if (!BootButton_Pressed() && buttonHeld&& TimestampIsReached(UserbuttonStamp)) {
 800d6f6:	f7f8 feac 	bl	8006452 <BootButton_Pressed>
 800d6fa:	0003      	movs	r3, r0
 800d6fc:	001a      	movs	r2, r3
 800d6fe:	2301      	movs	r3, #1
 800d700:	4053      	eors	r3, r2
 800d702:	b2db      	uxtb	r3, r3
 800d704:	2b00      	cmp	r3, #0
 800d706:	d100      	bne.n	800d70a <configCheck+0xe2>
 800d708:	e0aa      	b.n	800d860 <configCheck+0x238>
 800d70a:	4b72      	ldr	r3, [pc, #456]	@ (800d8d4 <configCheck+0x2ac>)
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d100      	bne.n	800d714 <configCheck+0xec>
 800d712:	e0a5      	b.n	800d860 <configCheck+0x238>
 800d714:	4b73      	ldr	r3, [pc, #460]	@ (800d8e4 <configCheck+0x2bc>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	0018      	movs	r0, r3
 800d71a:	f000 fe17 	bl	800e34c <TimestampIsReached>
 800d71e:	1e03      	subs	r3, r0, #0
 800d720:	d100      	bne.n	800d724 <configCheck+0xfc>
 800d722:	e09d      	b.n	800d860 <configCheck+0x238>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d724:	f7fa fdf4 	bl	8008310 <GetPMSensorPresence>
 800d728:	1e03      	subs	r3, r0, #0
 800d72a:	d100      	bne.n	800d72e <configCheck+0x106>
 800d72c:	e088      	b.n	800d840 <configCheck+0x218>
 800d72e:	4b6e      	ldr	r3, [pc, #440]	@ (800d8e8 <configCheck+0x2c0>)
 800d730:	791b      	ldrb	r3, [r3, #4]
 800d732:	2b34      	cmp	r3, #52	@ 0x34
 800d734:	d004      	beq.n	800d740 <configCheck+0x118>
 800d736:	4b6c      	ldr	r3, [pc, #432]	@ (800d8e8 <configCheck+0x2c0>)
 800d738:	791b      	ldrb	r3, [r3, #4]
 800d73a:	2b35      	cmp	r3, #53	@ 0x35
 800d73c:	d000      	beq.n	800d740 <configCheck+0x118>
 800d73e:	e07f      	b.n	800d840 <configCheck+0x218>
      uint16_t color;
      VOCNOx = !VOCNOx;
 800d740:	4b6a      	ldr	r3, [pc, #424]	@ (800d8ec <configCheck+0x2c4>)
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	1e5a      	subs	r2, r3, #1
 800d746:	4193      	sbcs	r3, r2
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	2201      	movs	r2, #1
 800d74c:	4053      	eors	r3, r2
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	1c1a      	adds	r2, r3, #0
 800d752:	2301      	movs	r3, #1
 800d754:	4013      	ands	r3, r2
 800d756:	b2da      	uxtb	r2, r3
 800d758:	4b64      	ldr	r3, [pc, #400]	@ (800d8ec <configCheck+0x2c4>)
 800d75a:	701a      	strb	r2, [r3, #0]
      if (VOCNOx)  color = Calculate_LED_ON();
 800d75c:	4b63      	ldr	r3, [pc, #396]	@ (800d8ec <configCheck+0x2c4>)
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d005      	beq.n	800d770 <configCheck+0x148>
 800d764:	1dbc      	adds	r4, r7, #6
 800d766:	f7ff fcd5 	bl	800d114 <Calculate_LED_ON>
 800d76a:	0003      	movs	r3, r0
 800d76c:	8023      	strh	r3, [r4, #0]
 800d76e:	e003      	b.n	800d778 <configCheck+0x150>
        else color = 4000;
 800d770:	1dbb      	adds	r3, r7, #6
 800d772:	22fa      	movs	r2, #250	@ 0xfa
 800d774:	0112      	lsls	r2, r2, #4
 800d776:	801a      	strh	r2, [r3, #0]
      Info("VOC and NOx only measurement %s", VOCNOx?"enabled":"disabled");
 800d778:	4b5c      	ldr	r3, [pc, #368]	@ (800d8ec <configCheck+0x2c4>)
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d001      	beq.n	800d784 <configCheck+0x15c>
 800d780:	4b5b      	ldr	r3, [pc, #364]	@ (800d8f0 <configCheck+0x2c8>)
 800d782:	e000      	b.n	800d786 <configCheck+0x15e>
 800d784:	4b5b      	ldr	r3, [pc, #364]	@ (800d8f4 <configCheck+0x2cc>)
 800d786:	4a5c      	ldr	r2, [pc, #368]	@ (800d8f8 <configCheck+0x2d0>)
 800d788:	495c      	ldr	r1, [pc, #368]	@ (800d8fc <configCheck+0x2d4>)
 800d78a:	2002      	movs	r0, #2
 800d78c:	f000 fe34 	bl	800e3f8 <CreateLine>
      for (uint8_t i=0; i<2; i++) {
 800d790:	1d7b      	adds	r3, r7, #5
 800d792:	2200      	movs	r2, #0
 800d794:	701a      	strb	r2, [r3, #0]
 800d796:	e028      	b.n	800d7ea <configCheck+0x1c2>
        TIM3 -> CCR1 = Calculate_LED_ON();
 800d798:	f7ff fcbc 	bl	800d114 <Calculate_LED_ON>
 800d79c:	0003      	movs	r3, r0
 800d79e:	001a      	movs	r2, r3
 800d7a0:	4b57      	ldr	r3, [pc, #348]	@ (800d900 <configCheck+0x2d8>)
 800d7a2:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = color;
 800d7a4:	4b56      	ldr	r3, [pc, #344]	@ (800d900 <configCheck+0x2d8>)
 800d7a6:	1dba      	adds	r2, r7, #6
 800d7a8:	8812      	ldrh	r2, [r2, #0]
 800d7aa:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = color;
 800d7ac:	4b54      	ldr	r3, [pc, #336]	@ (800d900 <configCheck+0x2d8>)
 800d7ae:	1dba      	adds	r2, r7, #6
 800d7b0:	8812      	ldrh	r2, [r2, #0]
 800d7b2:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800d7b4:	23c8      	movs	r3, #200	@ 0xc8
 800d7b6:	005b      	lsls	r3, r3, #1
 800d7b8:	0018      	movs	r0, r3
 800d7ba:	f001 fa7d 	bl	800ecb8 <HAL_Delay>
        TIM3 -> CCR1 = 4000;
 800d7be:	4b50      	ldr	r3, [pc, #320]	@ (800d900 <configCheck+0x2d8>)
 800d7c0:	22fa      	movs	r2, #250	@ 0xfa
 800d7c2:	0112      	lsls	r2, r2, #4
 800d7c4:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3 -> CCR2 = 4000;
 800d7c6:	4b4e      	ldr	r3, [pc, #312]	@ (800d900 <configCheck+0x2d8>)
 800d7c8:	22fa      	movs	r2, #250	@ 0xfa
 800d7ca:	0112      	lsls	r2, r2, #4
 800d7cc:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3 -> CCR3 = 4000;
 800d7ce:	4b4c      	ldr	r3, [pc, #304]	@ (800d900 <configCheck+0x2d8>)
 800d7d0:	22fa      	movs	r2, #250	@ 0xfa
 800d7d2:	0112      	lsls	r2, r2, #4
 800d7d4:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(400);
 800d7d6:	23c8      	movs	r3, #200	@ 0xc8
 800d7d8:	005b      	lsls	r3, r3, #1
 800d7da:	0018      	movs	r0, r3
 800d7dc:	f001 fa6c 	bl	800ecb8 <HAL_Delay>
      for (uint8_t i=0; i<2; i++) {
 800d7e0:	1d7b      	adds	r3, r7, #5
 800d7e2:	781a      	ldrb	r2, [r3, #0]
 800d7e4:	1d7b      	adds	r3, r7, #5
 800d7e6:	3201      	adds	r2, #1
 800d7e8:	701a      	strb	r2, [r3, #0]
 800d7ea:	1d7b      	adds	r3, r7, #5
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d9d2      	bls.n	800d798 <configCheck+0x170>
      }
      Debug("userToggle flipped back to prior status");
 800d7f2:	4a44      	ldr	r2, [pc, #272]	@ (800d904 <configCheck+0x2dc>)
 800d7f4:	4b39      	ldr	r3, [pc, #228]	@ (800d8dc <configCheck+0x2b4>)
 800d7f6:	0019      	movs	r1, r3
 800d7f8:	2003      	movs	r0, #3
 800d7fa:	f000 fdfd 	bl	800e3f8 <CreateLine>
      userToggle = !userToggle;
 800d7fe:	4b38      	ldr	r3, [pc, #224]	@ (800d8e0 <configCheck+0x2b8>)
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	1e5a      	subs	r2, r3, #1
 800d804:	4193      	sbcs	r3, r2
 800d806:	b2db      	uxtb	r3, r3
 800d808:	2201      	movs	r2, #1
 800d80a:	4053      	eors	r3, r2
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	1c1a      	adds	r2, r3, #0
 800d810:	2301      	movs	r3, #1
 800d812:	4013      	ands	r3, r2
 800d814:	b2da      	uxtb	r2, r3
 800d816:	4b32      	ldr	r3, [pc, #200]	@ (800d8e0 <configCheck+0x2b8>)
 800d818:	701a      	strb	r2, [r3, #0]
      Info("userToggle status is %s", userToggle?"enabled":"disabled");
 800d81a:	4b31      	ldr	r3, [pc, #196]	@ (800d8e0 <configCheck+0x2b8>)
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d001      	beq.n	800d826 <configCheck+0x1fe>
 800d822:	4b33      	ldr	r3, [pc, #204]	@ (800d8f0 <configCheck+0x2c8>)
 800d824:	e000      	b.n	800d828 <configCheck+0x200>
 800d826:	4b33      	ldr	r3, [pc, #204]	@ (800d8f4 <configCheck+0x2cc>)
 800d828:	4a37      	ldr	r2, [pc, #220]	@ (800d908 <configCheck+0x2e0>)
 800d82a:	4934      	ldr	r1, [pc, #208]	@ (800d8fc <configCheck+0x2d4>)
 800d82c:	2002      	movs	r0, #2
 800d82e:	f000 fde3 	bl	800e3f8 <CreateLine>
      if (usbPluggedIn) {
 800d832:	4b36      	ldr	r3, [pc, #216]	@ (800d90c <configCheck+0x2e4>)
 800d834:	781b      	ldrb	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d009      	beq.n	800d84e <configCheck+0x226>
        set_light_on_state();  // in case of battery operation the mode is picked up by the state machine
 800d83a:	f7fc f8f1 	bl	8009a20 <set_light_on_state>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d83e:	e006      	b.n	800d84e <configCheck+0x226>
      }
    }
    else {
      Info("sen54 or sen55 not present or disabled in system");
 800d840:	4a33      	ldr	r2, [pc, #204]	@ (800d910 <configCheck+0x2e8>)
 800d842:	4b2e      	ldr	r3, [pc, #184]	@ (800d8fc <configCheck+0x2d4>)
 800d844:	0019      	movs	r1, r3
 800d846:	2002      	movs	r0, #2
 800d848:	f000 fdd6 	bl	800e3f8 <CreateLine>
 800d84c:	e000      	b.n	800d850 <configCheck+0x228>
    if (GetPMSensorPresence() && ((product_name[4] == '4') || (product_name[4] == '5'))) {
 800d84e:	46c0      	nop			@ (mov r8, r8)
    }
    while (UserButton_Pressed()){
 800d850:	46c0      	nop			@ (mov r8, r8)
 800d852:	f7f8 fe0f 	bl	8006474 <UserButton_Pressed>
 800d856:	1e03      	subs	r3, r0, #0
 800d858:	d1fb      	bne.n	800d852 <configCheck+0x22a>
    }
    buttonHeld = false;
 800d85a:	4b1e      	ldr	r3, [pc, #120]	@ (800d8d4 <configCheck+0x2ac>)
 800d85c:	2200      	movs	r2, #0
 800d85e:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800d860:	f7f8 fdf7 	bl	8006452 <BootButton_Pressed>
 800d864:	0003      	movs	r3, r0
 800d866:	001a      	movs	r2, r3
 800d868:	2301      	movs	r3, #1
 800d86a:	4053      	eors	r3, r2
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d00b      	beq.n	800d88a <configCheck+0x262>
 800d872:	f7f8 fdff 	bl	8006474 <UserButton_Pressed>
 800d876:	0003      	movs	r3, r0
 800d878:	001a      	movs	r2, r3
 800d87a:	2301      	movs	r3, #1
 800d87c:	4053      	eors	r3, r2
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	2b00      	cmp	r3, #0
 800d882:	d002      	beq.n	800d88a <configCheck+0x262>
    buttonHeld = false;
 800d884:	4b13      	ldr	r3, [pc, #76]	@ (800d8d4 <configCheck+0x2ac>)
 800d886:	2200      	movs	r2, #0
 800d888:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800d88a:	f7f8 fdd3 	bl	8006434 <Check_USB_PowerOn>
 800d88e:	1e03      	subs	r3, r0, #0
 800d890:	d005      	beq.n	800d89e <configCheck+0x276>
    usbPluggedIn = true;
 800d892:	4b1e      	ldr	r3, [pc, #120]	@ (800d90c <configCheck+0x2e4>)
 800d894:	2201      	movs	r2, #1
 800d896:	701a      	strb	r2, [r3, #0]
    EnabledConnectedDevices();
 800d898:	f7fa ffd8 	bl	800884c <EnabledConnectedDevices>
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800d89c:	e012      	b.n	800d8c4 <configCheck+0x29c>
    if(!userToggle && !init){
 800d89e:	4b10      	ldr	r3, [pc, #64]	@ (800d8e0 <configCheck+0x2b8>)
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	4053      	eors	r3, r2
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d008      	beq.n	800d8be <configCheck+0x296>
 800d8ac:	4b19      	ldr	r3, [pc, #100]	@ (800d914 <configCheck+0x2ec>)
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	4053      	eors	r3, r2
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d001      	beq.n	800d8be <configCheck+0x296>
      SetLEDsOff();
 800d8ba:	f7ff fe35 	bl	800d528 <SetLEDsOff>
    usbPluggedIn = false;
 800d8be:	4b13      	ldr	r3, [pc, #76]	@ (800d90c <configCheck+0x2e4>)
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	701a      	strb	r2, [r3, #0]
}
 800d8c4:	46c0      	nop			@ (mov r8, r8)
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	b003      	add	sp, #12
 800d8ca:	bd90      	pop	{r4, r7, pc}
 800d8cc:	200021f0 	.word	0x200021f0
 800d8d0:	200021f4 	.word	0x200021f4
 800d8d4:	200021f3 	.word	0x200021f3
 800d8d8:	08024e0c 	.word	0x08024e0c
 800d8dc:	08024d94 	.word	0x08024d94
 800d8e0:	200021f2 	.word	0x200021f2
 800d8e4:	200021f8 	.word	0x200021f8
 800d8e8:	2000125c 	.word	0x2000125c
 800d8ec:	2000125a 	.word	0x2000125a
 800d8f0:	08024e20 	.word	0x08024e20
 800d8f4:	08024e28 	.word	0x08024e28
 800d8f8:	08024e34 	.word	0x08024e34
 800d8fc:	08024e54 	.word	0x08024e54
 800d900:	40000400 	.word	0x40000400
 800d904:	08024e58 	.word	0x08024e58
 800d908:	08024e80 	.word	0x08024e80
 800d90c:	200021f1 	.word	0x200021f1
 800d910:	08024e98 	.word	0x08024e98
 800d914:	200000c8 	.word	0x200000c8

0800d918 <Battery_Upkeep>:
/*
void Status_Upkeep(){
  configCheck();
}
*/
Battery_Status Battery_Upkeep(){
 800d918:	b590      	push	{r4, r7, lr}
 800d91a:	b083      	sub	sp, #12
 800d91c:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800d91e:	1dfc      	adds	r4, r7, #7
 800d920:	f7ff fe1e 	bl	800d560 <powerCheck>
 800d924:	0003      	movs	r3, r0
 800d926:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800d928:	1dfb      	adds	r3, r7, #7
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	0018      	movs	r0, r3
 800d92e:	f7ff fe33 	bl	800d598 <powerDisplay>
  return status;
 800d932:	1dfb      	adds	r3, r7, #7
 800d934:	781b      	ldrb	r3, [r3, #0]
}
 800d936:	0018      	movs	r0, r3
 800d938:	46bd      	mov	sp, r7
 800d93a:	b003      	add	sp, #12
 800d93c:	bd90      	pop	{r4, r7, pc}
	...

0800d940 <setuserToggle>:

void setuserToggle(void) {
 800d940:	b580      	push	{r7, lr}
 800d942:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800d944:	f7ff fe0c 	bl	800d560 <powerCheck>
 800d948:	0003      	movs	r3, r0
 800d94a:	2b04      	cmp	r3, #4
 800d94c:	d002      	beq.n	800d954 <setuserToggle+0x14>
    userToggle = true;
 800d94e:	4b03      	ldr	r3, [pc, #12]	@ (800d95c <setuserToggle+0x1c>)
 800d950:	2201      	movs	r2, #1
 800d952:	701a      	strb	r2, [r3, #0]
  }
}
 800d954:	46c0      	nop			@ (mov r8, r8)
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}
 800d95a:	46c0      	nop			@ (mov r8, r8)
 800d95c:	200021f2 	.word	0x200021f2

0800d960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d964:	4b07      	ldr	r3, [pc, #28]	@ (800d984 <HAL_MspInit+0x24>)
 800d966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d968:	4b06      	ldr	r3, [pc, #24]	@ (800d984 <HAL_MspInit+0x24>)
 800d96a:	2101      	movs	r1, #1
 800d96c:	430a      	orrs	r2, r1
 800d96e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800d970:	4b04      	ldr	r3, [pc, #16]	@ (800d984 <HAL_MspInit+0x24>)
 800d972:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d974:	4b03      	ldr	r3, [pc, #12]	@ (800d984 <HAL_MspInit+0x24>)
 800d976:	2180      	movs	r1, #128	@ 0x80
 800d978:	0549      	lsls	r1, r1, #21
 800d97a:	430a      	orrs	r2, r1
 800d97c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d97e:	46c0      	nop			@ (mov r8, r8)
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	40021000 	.word	0x40021000

0800d988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800d98c:	46c0      	nop			@ (mov r8, r8)
 800d98e:	e7fd      	b.n	800d98c <NMI_Handler+0x4>

0800d990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d994:	46c0      	nop			@ (mov r8, r8)
 800d996:	e7fd      	b.n	800d994 <HardFault_Handler+0x4>

0800d998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800d99c:	46c0      	nop			@ (mov r8, r8)
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d9a6:	46c0      	nop			@ (mov r8, r8)
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}

0800d9ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d9b0:	f001 f966 	bl	800ec80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d9b4:	46c0      	nop			@ (mov r8, r8)
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
	...

0800d9bc <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800d9c0:	4b03      	ldr	r3, [pc, #12]	@ (800d9d0 <RTC_IRQHandler+0x14>)
 800d9c2:	0018      	movs	r0, r3
 800d9c4:	f008 fe8c 	bl	80166e0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800d9c8:	46c0      	nop			@ (mov r8, r8)
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	46c0      	nop			@ (mov r8, r8)
 800d9d0:	20001234 	.word	0x20001234

0800d9d4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800d9d8:	2380      	movs	r3, #128	@ 0x80
 800d9da:	021b      	lsls	r3, r3, #8
 800d9dc:	0018      	movs	r0, r3
 800d9de:	f002 fc0f 	bl	8010200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800d9e2:	46c0      	nop			@ (mov r8, r8)
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}

0800d9e8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800d9ec:	4b05      	ldr	r3, [pc, #20]	@ (800da04 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800d9ee:	0018      	movs	r0, r3
 800d9f0:	f001 ff97 	bl	800f922 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800d9f4:	4b04      	ldr	r3, [pc, #16]	@ (800da08 <DMA1_Channel2_3_IRQHandler+0x20>)
 800d9f6:	0018      	movs	r0, r3
 800d9f8:	f001 ff93 	bl	800f922 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800d9fc:	46c0      	nop			@ (mov r8, r8)
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
 800da02:	46c0      	nop			@ (mov r8, r8)
 800da04:	20000ed8 	.word	0x20000ed8
 800da08:	20000e90 	.word	0x20000e90

0800da0c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800da10:	4b07      	ldr	r3, [pc, #28]	@ (800da30 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800da12:	0018      	movs	r0, r3
 800da14:	f001 ff85 	bl	800f922 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800da18:	4b06      	ldr	r3, [pc, #24]	@ (800da34 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800da1a:	0018      	movs	r0, r3
 800da1c:	f001 ff81 	bl	800f922 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800da20:	4b05      	ldr	r3, [pc, #20]	@ (800da38 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800da22:	0018      	movs	r0, r3
 800da24:	f001 ff7d 	bl	800f922 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800da28:	46c0      	nop			@ (mov r8, r8)
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	46c0      	nop			@ (mov r8, r8)
 800da30:	20000f5c 	.word	0x20000f5c
 800da34:	200024f0 	.word	0x200024f0
 800da38:	20002538 	.word	0x20002538

0800da3c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800da40:	4b03      	ldr	r3, [pc, #12]	@ (800da50 <USART4_5_IRQHandler+0x14>)
 800da42:	0018      	movs	r0, r3
 800da44:	f009 fd46 	bl	80174d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800da48:	46c0      	nop			@ (mov r8, r8)
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	46c0      	nop			@ (mov r8, r8)
 800da50:	20002438 	.word	0x20002438

0800da54 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800da58:	4b09      	ldr	r3, [pc, #36]	@ (800da80 <I2C1_IRQHandler+0x2c>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	699a      	ldr	r2, [r3, #24]
 800da5e:	23e0      	movs	r3, #224	@ 0xe0
 800da60:	00db      	lsls	r3, r3, #3
 800da62:	4013      	ands	r3, r2
 800da64:	d004      	beq.n	800da70 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800da66:	4b06      	ldr	r3, [pc, #24]	@ (800da80 <I2C1_IRQHandler+0x2c>)
 800da68:	0018      	movs	r0, r3
 800da6a:	f003 f8b1 	bl	8010bd0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800da6e:	e003      	b.n	800da78 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800da70:	4b03      	ldr	r3, [pc, #12]	@ (800da80 <I2C1_IRQHandler+0x2c>)
 800da72:	0018      	movs	r0, r3
 800da74:	f003 f892 	bl	8010b9c <HAL_I2C_EV_IRQHandler>
}
 800da78:	46c0      	nop			@ (mov r8, r8)
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
 800da7e:	46c0      	nop			@ (mov r8, r8)
 800da80:	20000de8 	.word	0x20000de8

0800da84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800da88:	4b03      	ldr	r3, [pc, #12]	@ (800da98 <USART1_IRQHandler+0x14>)
 800da8a:	0018      	movs	r0, r3
 800da8c:	f009 fd22 	bl	80174d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800da90:	46c0      	nop			@ (mov r8, r8)
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	46c0      	nop			@ (mov r8, r8)
 800da98:	20002380 	.word	0x20002380

0800da9c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800daa0:	4b03      	ldr	r3, [pc, #12]	@ (800dab0 <USB_IRQHandler+0x14>)
 800daa2:	0018      	movs	r0, r3
 800daa4:	f005 fc72 	bl	801338c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800daa8:	46c0      	nop			@ (mov r8, r8)
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
 800daae:	46c0      	nop			@ (mov r8, r8)
 800dab0:	2000334c 	.word	0x2000334c

0800dab4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	af00      	add	r7, sp, #0
  return 1;
 800dab8:	2301      	movs	r3, #1
}
 800daba:	0018      	movs	r0, r3
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <_kill>:

int _kill(int pid, int sig)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800daca:	f012 fbe7 	bl	802029c <__errno>
 800dace:	0003      	movs	r3, r0
 800dad0:	2216      	movs	r2, #22
 800dad2:	601a      	str	r2, [r3, #0]
  return -1;
 800dad4:	2301      	movs	r3, #1
 800dad6:	425b      	negs	r3, r3
}
 800dad8:	0018      	movs	r0, r3
 800dada:	46bd      	mov	sp, r7
 800dadc:	b002      	add	sp, #8
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <_exit>:

void _exit (int status)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800dae8:	2301      	movs	r3, #1
 800daea:	425a      	negs	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	0011      	movs	r1, r2
 800daf0:	0018      	movs	r0, r3
 800daf2:	f7ff ffe5 	bl	800dac0 <_kill>
  while (1) {}    /* Make sure we hang here */
 800daf6:	46c0      	nop			@ (mov r8, r8)
 800daf8:	e7fd      	b.n	800daf6 <_exit+0x16>

0800dafa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800dafa:	b580      	push	{r7, lr}
 800dafc:	b086      	sub	sp, #24
 800dafe:	af00      	add	r7, sp, #0
 800db00:	60f8      	str	r0, [r7, #12]
 800db02:	60b9      	str	r1, [r7, #8]
 800db04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800db06:	2300      	movs	r3, #0
 800db08:	617b      	str	r3, [r7, #20]
 800db0a:	e00a      	b.n	800db22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800db0c:	e000      	b.n	800db10 <_read+0x16>
 800db0e:	bf00      	nop
 800db10:	0001      	movs	r1, r0
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	1c5a      	adds	r2, r3, #1
 800db16:	60ba      	str	r2, [r7, #8]
 800db18:	b2ca      	uxtb	r2, r1
 800db1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	3301      	adds	r3, #1
 800db20:	617b      	str	r3, [r7, #20]
 800db22:	697a      	ldr	r2, [r7, #20]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	429a      	cmp	r2, r3
 800db28:	dbf0      	blt.n	800db0c <_read+0x12>
  }

  return len;
 800db2a:	687b      	ldr	r3, [r7, #4]
}
 800db2c:	0018      	movs	r0, r3
 800db2e:	46bd      	mov	sp, r7
 800db30:	b006      	add	sp, #24
 800db32:	bd80      	pop	{r7, pc}

0800db34 <_close>:
  }
  return len;
}

int _close(int file)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800db3c:	2301      	movs	r3, #1
 800db3e:	425b      	negs	r3, r3
}
 800db40:	0018      	movs	r0, r3
 800db42:	46bd      	mov	sp, r7
 800db44:	b002      	add	sp, #8
 800db46:	bd80      	pop	{r7, pc}

0800db48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	2280      	movs	r2, #128	@ 0x80
 800db56:	0192      	lsls	r2, r2, #6
 800db58:	605a      	str	r2, [r3, #4]
  return 0;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	0018      	movs	r0, r3
 800db5e:	46bd      	mov	sp, r7
 800db60:	b002      	add	sp, #8
 800db62:	bd80      	pop	{r7, pc}

0800db64 <_isatty>:

int _isatty(int file)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800db6c:	2301      	movs	r3, #1
}
 800db6e:	0018      	movs	r0, r3
 800db70:	46bd      	mov	sp, r7
 800db72:	b002      	add	sp, #8
 800db74:	bd80      	pop	{r7, pc}

0800db76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b084      	sub	sp, #16
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	60f8      	str	r0, [r7, #12]
 800db7e:	60b9      	str	r1, [r7, #8]
 800db80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800db82:	2300      	movs	r3, #0
}
 800db84:	0018      	movs	r0, r3
 800db86:	46bd      	mov	sp, r7
 800db88:	b004      	add	sp, #16
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b086      	sub	sp, #24
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800db94:	4a14      	ldr	r2, [pc, #80]	@ (800dbe8 <_sbrk+0x5c>)
 800db96:	4b15      	ldr	r3, [pc, #84]	@ (800dbec <_sbrk+0x60>)
 800db98:	1ad3      	subs	r3, r2, r3
 800db9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800dba0:	4b13      	ldr	r3, [pc, #76]	@ (800dbf0 <_sbrk+0x64>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d102      	bne.n	800dbae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800dba8:	4b11      	ldr	r3, [pc, #68]	@ (800dbf0 <_sbrk+0x64>)
 800dbaa:	4a12      	ldr	r2, [pc, #72]	@ (800dbf4 <_sbrk+0x68>)
 800dbac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800dbae:	4b10      	ldr	r3, [pc, #64]	@ (800dbf0 <_sbrk+0x64>)
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	18d3      	adds	r3, r2, r3
 800dbb6:	693a      	ldr	r2, [r7, #16]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d207      	bcs.n	800dbcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 800dbbc:	f012 fb6e 	bl	802029c <__errno>
 800dbc0:	0003      	movs	r3, r0
 800dbc2:	220c      	movs	r2, #12
 800dbc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	425b      	negs	r3, r3
 800dbca:	e009      	b.n	800dbe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800dbcc:	4b08      	ldr	r3, [pc, #32]	@ (800dbf0 <_sbrk+0x64>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800dbd2:	4b07      	ldr	r3, [pc, #28]	@ (800dbf0 <_sbrk+0x64>)
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	18d2      	adds	r2, r2, r3
 800dbda:	4b05      	ldr	r3, [pc, #20]	@ (800dbf0 <_sbrk+0x64>)
 800dbdc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800dbde:	68fb      	ldr	r3, [r7, #12]
}
 800dbe0:	0018      	movs	r0, r3
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	b006      	add	sp, #24
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	20005000 	.word	0x20005000
 800dbec:	00000400 	.word	0x00000400
 800dbf0:	20002204 	.word	0x20002204
 800dbf4:	200039b0 	.word	0x200039b0

0800dbf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800dbfc:	46c0      	nop			@ (mov r8, r8)
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
	...

0800dc04 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b086      	sub	sp, #24
 800dc08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dc0a:	2310      	movs	r3, #16
 800dc0c:	18fb      	adds	r3, r7, r3
 800dc0e:	0018      	movs	r0, r3
 800dc10:	2308      	movs	r3, #8
 800dc12:	001a      	movs	r2, r3
 800dc14:	2100      	movs	r1, #0
 800dc16:	f012 fa9d 	bl	8020154 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dc1a:	003b      	movs	r3, r7
 800dc1c:	0018      	movs	r0, r3
 800dc1e:	2310      	movs	r3, #16
 800dc20:	001a      	movs	r2, r3
 800dc22:	2100      	movs	r1, #0
 800dc24:	f012 fa96 	bl	8020154 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800dc28:	4b2e      	ldr	r3, [pc, #184]	@ (800dce4 <MX_TIM2_Init+0xe0>)
 800dc2a:	2280      	movs	r2, #128	@ 0x80
 800dc2c:	05d2      	lsls	r2, r2, #23
 800dc2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800dc30:	4b2c      	ldr	r3, [pc, #176]	@ (800dce4 <MX_TIM2_Init+0xe0>)
 800dc32:	2200      	movs	r2, #0
 800dc34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc36:	4b2b      	ldr	r3, [pc, #172]	@ (800dce4 <MX_TIM2_Init+0xe0>)
 800dc38:	2200      	movs	r2, #0
 800dc3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800dc3c:	4b29      	ldr	r3, [pc, #164]	@ (800dce4 <MX_TIM2_Init+0xe0>)
 800dc3e:	4a2a      	ldr	r2, [pc, #168]	@ (800dce8 <MX_TIM2_Init+0xe4>)
 800dc40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc42:	4b28      	ldr	r3, [pc, #160]	@ (800dce4 <MX_TIM2_Init+0xe0>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dc48:	4b26      	ldr	r3, [pc, #152]	@ (800dce4 <MX_TIM2_Init+0xe0>)
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800dc4e:	4b25      	ldr	r3, [pc, #148]	@ (800dce4 <MX_TIM2_Init+0xe0>)
 800dc50:	0018      	movs	r0, r3
 800dc52:	f008 fe53 	bl	80168fc <HAL_TIM_PWM_Init>
 800dc56:	1e03      	subs	r3, r0, #0
 800dc58:	d001      	beq.n	800dc5e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800dc5a:	f7fa fb29 	bl	80082b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dc5e:	2110      	movs	r1, #16
 800dc60:	187b      	adds	r3, r7, r1
 800dc62:	2200      	movs	r2, #0
 800dc64:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dc66:	187b      	adds	r3, r7, r1
 800dc68:	2200      	movs	r2, #0
 800dc6a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800dc6c:	187a      	adds	r2, r7, r1
 800dc6e:	4b1d      	ldr	r3, [pc, #116]	@ (800dce4 <MX_TIM2_Init+0xe0>)
 800dc70:	0011      	movs	r1, r2
 800dc72:	0018      	movs	r0, r3
 800dc74:	f009 f960 	bl	8016f38 <HAL_TIMEx_MasterConfigSynchronization>
 800dc78:	1e03      	subs	r3, r0, #0
 800dc7a:	d001      	beq.n	800dc80 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800dc7c:	f7fa fb18 	bl	80082b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dc80:	003b      	movs	r3, r7
 800dc82:	2260      	movs	r2, #96	@ 0x60
 800dc84:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800dc86:	003b      	movs	r3, r7
 800dc88:	2200      	movs	r2, #0
 800dc8a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dc8c:	003b      	movs	r3, r7
 800dc8e:	2200      	movs	r2, #0
 800dc90:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dc92:	003b      	movs	r3, r7
 800dc94:	2200      	movs	r2, #0
 800dc96:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dc98:	0039      	movs	r1, r7
 800dc9a:	4b12      	ldr	r3, [pc, #72]	@ (800dce4 <MX_TIM2_Init+0xe0>)
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	0018      	movs	r0, r3
 800dca0:	f008 fefe 	bl	8016aa0 <HAL_TIM_PWM_ConfigChannel>
 800dca4:	1e03      	subs	r3, r0, #0
 800dca6:	d001      	beq.n	800dcac <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800dca8:	f7fa fb02 	bl	80082b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800dcac:	0039      	movs	r1, r7
 800dcae:	4b0d      	ldr	r3, [pc, #52]	@ (800dce4 <MX_TIM2_Init+0xe0>)
 800dcb0:	2208      	movs	r2, #8
 800dcb2:	0018      	movs	r0, r3
 800dcb4:	f008 fef4 	bl	8016aa0 <HAL_TIM_PWM_ConfigChannel>
 800dcb8:	1e03      	subs	r3, r0, #0
 800dcba:	d001      	beq.n	800dcc0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800dcbc:	f7fa faf8 	bl	80082b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800dcc0:	0039      	movs	r1, r7
 800dcc2:	4b08      	ldr	r3, [pc, #32]	@ (800dce4 <MX_TIM2_Init+0xe0>)
 800dcc4:	220c      	movs	r2, #12
 800dcc6:	0018      	movs	r0, r3
 800dcc8:	f008 feea 	bl	8016aa0 <HAL_TIM_PWM_ConfigChannel>
 800dccc:	1e03      	subs	r3, r0, #0
 800dcce:	d001      	beq.n	800dcd4 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800dcd0:	f7fa faee 	bl	80082b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800dcd4:	4b03      	ldr	r3, [pc, #12]	@ (800dce4 <MX_TIM2_Init+0xe0>)
 800dcd6:	0018      	movs	r0, r3
 800dcd8:	f000 f8fe 	bl	800ded8 <HAL_TIM_MspPostInit>

}
 800dcdc:	46c0      	nop			@ (mov r8, r8)
 800dcde:	46bd      	mov	sp, r7
 800dce0:	b006      	add	sp, #24
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	20002208 	.word	0x20002208
 800dce8:	0000ffff 	.word	0x0000ffff

0800dcec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b086      	sub	sp, #24
 800dcf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dcf2:	2310      	movs	r3, #16
 800dcf4:	18fb      	adds	r3, r7, r3
 800dcf6:	0018      	movs	r0, r3
 800dcf8:	2308      	movs	r3, #8
 800dcfa:	001a      	movs	r2, r3
 800dcfc:	2100      	movs	r1, #0
 800dcfe:	f012 fa29 	bl	8020154 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dd02:	003b      	movs	r3, r7
 800dd04:	0018      	movs	r0, r3
 800dd06:	2310      	movs	r3, #16
 800dd08:	001a      	movs	r2, r3
 800dd0a:	2100      	movs	r1, #0
 800dd0c:	f012 fa22 	bl	8020154 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800dd10:	4b32      	ldr	r3, [pc, #200]	@ (800dddc <MX_TIM3_Init+0xf0>)
 800dd12:	4a33      	ldr	r2, [pc, #204]	@ (800dde0 <MX_TIM3_Init+0xf4>)
 800dd14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800dd16:	4b31      	ldr	r3, [pc, #196]	@ (800dddc <MX_TIM3_Init+0xf0>)
 800dd18:	2200      	movs	r2, #0
 800dd1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dd1c:	4b2f      	ldr	r3, [pc, #188]	@ (800dddc <MX_TIM3_Init+0xf0>)
 800dd1e:	2200      	movs	r2, #0
 800dd20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800dd22:	4b2e      	ldr	r3, [pc, #184]	@ (800dddc <MX_TIM3_Init+0xf0>)
 800dd24:	4a2f      	ldr	r2, [pc, #188]	@ (800dde4 <MX_TIM3_Init+0xf8>)
 800dd26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dd28:	4b2c      	ldr	r3, [pc, #176]	@ (800dddc <MX_TIM3_Init+0xf0>)
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dd2e:	4b2b      	ldr	r3, [pc, #172]	@ (800dddc <MX_TIM3_Init+0xf0>)
 800dd30:	2200      	movs	r2, #0
 800dd32:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800dd34:	4b29      	ldr	r3, [pc, #164]	@ (800dddc <MX_TIM3_Init+0xf0>)
 800dd36:	0018      	movs	r0, r3
 800dd38:	f008 fde0 	bl	80168fc <HAL_TIM_PWM_Init>
 800dd3c:	1e03      	subs	r3, r0, #0
 800dd3e:	d001      	beq.n	800dd44 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800dd40:	f7fa fab6 	bl	80082b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dd44:	2110      	movs	r1, #16
 800dd46:	187b      	adds	r3, r7, r1
 800dd48:	2200      	movs	r2, #0
 800dd4a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dd4c:	187b      	adds	r3, r7, r1
 800dd4e:	2200      	movs	r2, #0
 800dd50:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800dd52:	187a      	adds	r2, r7, r1
 800dd54:	4b21      	ldr	r3, [pc, #132]	@ (800dddc <MX_TIM3_Init+0xf0>)
 800dd56:	0011      	movs	r1, r2
 800dd58:	0018      	movs	r0, r3
 800dd5a:	f009 f8ed 	bl	8016f38 <HAL_TIMEx_MasterConfigSynchronization>
 800dd5e:	1e03      	subs	r3, r0, #0
 800dd60:	d001      	beq.n	800dd66 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800dd62:	f7fa faa5 	bl	80082b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dd66:	003b      	movs	r3, r7
 800dd68:	2260      	movs	r2, #96	@ 0x60
 800dd6a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800dd6c:	003b      	movs	r3, r7
 800dd6e:	2200      	movs	r2, #0
 800dd70:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800dd72:	003b      	movs	r3, r7
 800dd74:	2200      	movs	r2, #0
 800dd76:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800dd78:	003b      	movs	r3, r7
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800dd7e:	0039      	movs	r1, r7
 800dd80:	4b16      	ldr	r3, [pc, #88]	@ (800dddc <MX_TIM3_Init+0xf0>)
 800dd82:	2200      	movs	r2, #0
 800dd84:	0018      	movs	r0, r3
 800dd86:	f008 fe8b 	bl	8016aa0 <HAL_TIM_PWM_ConfigChannel>
 800dd8a:	1e03      	subs	r3, r0, #0
 800dd8c:	d001      	beq.n	800dd92 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800dd8e:	f7fa fa8f 	bl	80082b0 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800dd92:	4b12      	ldr	r3, [pc, #72]	@ (800dddc <MX_TIM3_Init+0xf0>)
 800dd94:	2104      	movs	r1, #4
 800dd96:	0018      	movs	r0, r3
 800dd98:	f009 f92c 	bl	8016ff4 <HAL_TIMEx_RemapConfig>
 800dd9c:	1e03      	subs	r3, r0, #0
 800dd9e:	d001      	beq.n	800dda4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800dda0:	f7fa fa86 	bl	80082b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800dda4:	0039      	movs	r1, r7
 800dda6:	4b0d      	ldr	r3, [pc, #52]	@ (800dddc <MX_TIM3_Init+0xf0>)
 800dda8:	2204      	movs	r2, #4
 800ddaa:	0018      	movs	r0, r3
 800ddac:	f008 fe78 	bl	8016aa0 <HAL_TIM_PWM_ConfigChannel>
 800ddb0:	1e03      	subs	r3, r0, #0
 800ddb2:	d001      	beq.n	800ddb8 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800ddb4:	f7fa fa7c 	bl	80082b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800ddb8:	0039      	movs	r1, r7
 800ddba:	4b08      	ldr	r3, [pc, #32]	@ (800dddc <MX_TIM3_Init+0xf0>)
 800ddbc:	2208      	movs	r2, #8
 800ddbe:	0018      	movs	r0, r3
 800ddc0:	f008 fe6e 	bl	8016aa0 <HAL_TIM_PWM_ConfigChannel>
 800ddc4:	1e03      	subs	r3, r0, #0
 800ddc6:	d001      	beq.n	800ddcc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800ddc8:	f7fa fa72 	bl	80082b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800ddcc:	4b03      	ldr	r3, [pc, #12]	@ (800dddc <MX_TIM3_Init+0xf0>)
 800ddce:	0018      	movs	r0, r3
 800ddd0:	f000 f882 	bl	800ded8 <HAL_TIM_MspPostInit>

}
 800ddd4:	46c0      	nop			@ (mov r8, r8)
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	b006      	add	sp, #24
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	20002248 	.word	0x20002248
 800dde0:	40000400 	.word	0x40000400
 800dde4:	0000ffff 	.word	0x0000ffff

0800dde8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ddee:	003b      	movs	r3, r7
 800ddf0:	0018      	movs	r0, r3
 800ddf2:	2308      	movs	r3, #8
 800ddf4:	001a      	movs	r2, r3
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	f012 f9ac 	bl	8020154 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800ddfc:	4b15      	ldr	r3, [pc, #84]	@ (800de54 <MX_TIM6_Init+0x6c>)
 800ddfe:	4a16      	ldr	r2, [pc, #88]	@ (800de58 <MX_TIM6_Init+0x70>)
 800de00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800de02:	4b14      	ldr	r3, [pc, #80]	@ (800de54 <MX_TIM6_Init+0x6c>)
 800de04:	220a      	movs	r2, #10
 800de06:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800de08:	4b12      	ldr	r3, [pc, #72]	@ (800de54 <MX_TIM6_Init+0x6c>)
 800de0a:	2200      	movs	r2, #0
 800de0c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800de0e:	4b11      	ldr	r3, [pc, #68]	@ (800de54 <MX_TIM6_Init+0x6c>)
 800de10:	4a12      	ldr	r2, [pc, #72]	@ (800de5c <MX_TIM6_Init+0x74>)
 800de12:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800de14:	4b0f      	ldr	r3, [pc, #60]	@ (800de54 <MX_TIM6_Init+0x6c>)
 800de16:	2200      	movs	r2, #0
 800de18:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800de1a:	4b0e      	ldr	r3, [pc, #56]	@ (800de54 <MX_TIM6_Init+0x6c>)
 800de1c:	0018      	movs	r0, r3
 800de1e:	f008 fcc5 	bl	80167ac <HAL_TIM_Base_Init>
 800de22:	1e03      	subs	r3, r0, #0
 800de24:	d001      	beq.n	800de2a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800de26:	f7fa fa43 	bl	80082b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800de2a:	003b      	movs	r3, r7
 800de2c:	2200      	movs	r2, #0
 800de2e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de30:	003b      	movs	r3, r7
 800de32:	2200      	movs	r2, #0
 800de34:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800de36:	003a      	movs	r2, r7
 800de38:	4b06      	ldr	r3, [pc, #24]	@ (800de54 <MX_TIM6_Init+0x6c>)
 800de3a:	0011      	movs	r1, r2
 800de3c:	0018      	movs	r0, r3
 800de3e:	f009 f87b 	bl	8016f38 <HAL_TIMEx_MasterConfigSynchronization>
 800de42:	1e03      	subs	r3, r0, #0
 800de44:	d001      	beq.n	800de4a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800de46:	f7fa fa33 	bl	80082b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800de4a:	46c0      	nop			@ (mov r8, r8)
 800de4c:	46bd      	mov	sp, r7
 800de4e:	b002      	add	sp, #8
 800de50:	bd80      	pop	{r7, pc}
 800de52:	46c0      	nop			@ (mov r8, r8)
 800de54:	20002288 	.word	0x20002288
 800de58:	40001000 	.word	0x40001000
 800de5c:	0000ffff 	.word	0x0000ffff

0800de60 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681a      	ldr	r2, [r3, #0]
 800de6c:	2380      	movs	r3, #128	@ 0x80
 800de6e:	05db      	lsls	r3, r3, #23
 800de70:	429a      	cmp	r2, r3
 800de72:	d106      	bne.n	800de82 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800de74:	4b0a      	ldr	r3, [pc, #40]	@ (800dea0 <HAL_TIM_PWM_MspInit+0x40>)
 800de76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de78:	4b09      	ldr	r3, [pc, #36]	@ (800dea0 <HAL_TIM_PWM_MspInit+0x40>)
 800de7a:	2101      	movs	r1, #1
 800de7c:	430a      	orrs	r2, r1
 800de7e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800de80:	e00a      	b.n	800de98 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	4a07      	ldr	r2, [pc, #28]	@ (800dea4 <HAL_TIM_PWM_MspInit+0x44>)
 800de88:	4293      	cmp	r3, r2
 800de8a:	d105      	bne.n	800de98 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800de8c:	4b04      	ldr	r3, [pc, #16]	@ (800dea0 <HAL_TIM_PWM_MspInit+0x40>)
 800de8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de90:	4b03      	ldr	r3, [pc, #12]	@ (800dea0 <HAL_TIM_PWM_MspInit+0x40>)
 800de92:	2102      	movs	r1, #2
 800de94:	430a      	orrs	r2, r1
 800de96:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800de98:	46c0      	nop			@ (mov r8, r8)
 800de9a:	46bd      	mov	sp, r7
 800de9c:	b002      	add	sp, #8
 800de9e:	bd80      	pop	{r7, pc}
 800dea0:	40021000 	.word	0x40021000
 800dea4:	40000400 	.word	0x40000400

0800dea8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b082      	sub	sp, #8
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4a06      	ldr	r2, [pc, #24]	@ (800ded0 <HAL_TIM_Base_MspInit+0x28>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d105      	bne.n	800dec6 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800deba:	4b06      	ldr	r3, [pc, #24]	@ (800ded4 <HAL_TIM_Base_MspInit+0x2c>)
 800debc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800debe:	4b05      	ldr	r3, [pc, #20]	@ (800ded4 <HAL_TIM_Base_MspInit+0x2c>)
 800dec0:	2110      	movs	r1, #16
 800dec2:	430a      	orrs	r2, r1
 800dec4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800dec6:	46c0      	nop			@ (mov r8, r8)
 800dec8:	46bd      	mov	sp, r7
 800deca:	b002      	add	sp, #8
 800decc:	bd80      	pop	{r7, pc}
 800dece:	46c0      	nop			@ (mov r8, r8)
 800ded0:	40001000 	.word	0x40001000
 800ded4:	40021000 	.word	0x40021000

0800ded8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800ded8:	b590      	push	{r4, r7, lr}
 800deda:	b08b      	sub	sp, #44	@ 0x2c
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dee0:	2414      	movs	r4, #20
 800dee2:	193b      	adds	r3, r7, r4
 800dee4:	0018      	movs	r0, r3
 800dee6:	2314      	movs	r3, #20
 800dee8:	001a      	movs	r2, r3
 800deea:	2100      	movs	r1, #0
 800deec:	f012 f932 	bl	8020154 <memset>
  if(timHandle->Instance==TIM2)
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681a      	ldr	r2, [r3, #0]
 800def4:	2380      	movs	r3, #128	@ 0x80
 800def6:	05db      	lsls	r3, r3, #23
 800def8:	429a      	cmp	r2, r3
 800defa:	d123      	bne.n	800df44 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800defc:	4b27      	ldr	r3, [pc, #156]	@ (800df9c <HAL_TIM_MspPostInit+0xc4>)
 800defe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df00:	4b26      	ldr	r3, [pc, #152]	@ (800df9c <HAL_TIM_MspPostInit+0xc4>)
 800df02:	2101      	movs	r1, #1
 800df04:	430a      	orrs	r2, r1
 800df06:	62da      	str	r2, [r3, #44]	@ 0x2c
 800df08:	4b24      	ldr	r3, [pc, #144]	@ (800df9c <HAL_TIM_MspPostInit+0xc4>)
 800df0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df0c:	2201      	movs	r2, #1
 800df0e:	4013      	ands	r3, r2
 800df10:	613b      	str	r3, [r7, #16]
 800df12:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800df14:	0021      	movs	r1, r4
 800df16:	187b      	adds	r3, r7, r1
 800df18:	220d      	movs	r2, #13
 800df1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df1c:	187b      	adds	r3, r7, r1
 800df1e:	2202      	movs	r2, #2
 800df20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df22:	187b      	adds	r3, r7, r1
 800df24:	2200      	movs	r2, #0
 800df26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df28:	187b      	adds	r3, r7, r1
 800df2a:	2200      	movs	r2, #0
 800df2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800df2e:	187b      	adds	r3, r7, r1
 800df30:	2202      	movs	r2, #2
 800df32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df34:	187a      	adds	r2, r7, r1
 800df36:	23a0      	movs	r3, #160	@ 0xa0
 800df38:	05db      	lsls	r3, r3, #23
 800df3a:	0011      	movs	r1, r2
 800df3c:	0018      	movs	r0, r3
 800df3e:	f001 ffa7 	bl	800fe90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800df42:	e027      	b.n	800df94 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a15      	ldr	r2, [pc, #84]	@ (800dfa0 <HAL_TIM_MspPostInit+0xc8>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d122      	bne.n	800df94 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800df4e:	4b13      	ldr	r3, [pc, #76]	@ (800df9c <HAL_TIM_MspPostInit+0xc4>)
 800df50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df52:	4b12      	ldr	r3, [pc, #72]	@ (800df9c <HAL_TIM_MspPostInit+0xc4>)
 800df54:	2104      	movs	r1, #4
 800df56:	430a      	orrs	r2, r1
 800df58:	62da      	str	r2, [r3, #44]	@ 0x2c
 800df5a:	4b10      	ldr	r3, [pc, #64]	@ (800df9c <HAL_TIM_MspPostInit+0xc4>)
 800df5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df5e:	2204      	movs	r2, #4
 800df60:	4013      	ands	r3, r2
 800df62:	60fb      	str	r3, [r7, #12]
 800df64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800df66:	2114      	movs	r1, #20
 800df68:	187b      	adds	r3, r7, r1
 800df6a:	22e0      	movs	r2, #224	@ 0xe0
 800df6c:	0052      	lsls	r2, r2, #1
 800df6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df70:	187b      	adds	r3, r7, r1
 800df72:	2202      	movs	r2, #2
 800df74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df76:	187b      	adds	r3, r7, r1
 800df78:	2200      	movs	r2, #0
 800df7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df7c:	187b      	adds	r3, r7, r1
 800df7e:	2200      	movs	r2, #0
 800df80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800df82:	187b      	adds	r3, r7, r1
 800df84:	2202      	movs	r2, #2
 800df86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800df88:	187b      	adds	r3, r7, r1
 800df8a:	4a06      	ldr	r2, [pc, #24]	@ (800dfa4 <HAL_TIM_MspPostInit+0xcc>)
 800df8c:	0019      	movs	r1, r3
 800df8e:	0010      	movs	r0, r2
 800df90:	f001 ff7e 	bl	800fe90 <HAL_GPIO_Init>
}
 800df94:	46c0      	nop			@ (mov r8, r8)
 800df96:	46bd      	mov	sp, r7
 800df98:	b00b      	add	sp, #44	@ 0x2c
 800df9a:	bd90      	pop	{r4, r7, pc}
 800df9c:	40021000 	.word	0x40021000
 800dfa0:	40000400 	.word	0x40000400
 800dfa4:	50000800 	.word	0x50000800

0800dfa8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800dfac:	4b17      	ldr	r3, [pc, #92]	@ (800e00c <MX_LPUART1_UART_Init+0x64>)
 800dfae:	4a18      	ldr	r2, [pc, #96]	@ (800e010 <MX_LPUART1_UART_Init+0x68>)
 800dfb0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800dfb2:	4b16      	ldr	r3, [pc, #88]	@ (800e00c <MX_LPUART1_UART_Init+0x64>)
 800dfb4:	22e1      	movs	r2, #225	@ 0xe1
 800dfb6:	0252      	lsls	r2, r2, #9
 800dfb8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800dfba:	4b14      	ldr	r3, [pc, #80]	@ (800e00c <MX_LPUART1_UART_Init+0x64>)
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800dfc0:	4b12      	ldr	r3, [pc, #72]	@ (800e00c <MX_LPUART1_UART_Init+0x64>)
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800dfc6:	4b11      	ldr	r3, [pc, #68]	@ (800e00c <MX_LPUART1_UART_Init+0x64>)
 800dfc8:	2200      	movs	r2, #0
 800dfca:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800dfcc:	4b0f      	ldr	r3, [pc, #60]	@ (800e00c <MX_LPUART1_UART_Init+0x64>)
 800dfce:	220c      	movs	r2, #12
 800dfd0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dfd2:	4b0e      	ldr	r3, [pc, #56]	@ (800e00c <MX_LPUART1_UART_Init+0x64>)
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800dfd8:	4b0c      	ldr	r3, [pc, #48]	@ (800e00c <MX_LPUART1_UART_Init+0x64>)
 800dfda:	2200      	movs	r2, #0
 800dfdc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800dfde:	4b0b      	ldr	r3, [pc, #44]	@ (800e00c <MX_LPUART1_UART_Init+0x64>)
 800dfe0:	2218      	movs	r2, #24
 800dfe2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800dfe4:	4b09      	ldr	r3, [pc, #36]	@ (800e00c <MX_LPUART1_UART_Init+0x64>)
 800dfe6:	2280      	movs	r2, #128	@ 0x80
 800dfe8:	0212      	lsls	r2, r2, #8
 800dfea:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800dfec:	4b07      	ldr	r3, [pc, #28]	@ (800e00c <MX_LPUART1_UART_Init+0x64>)
 800dfee:	2280      	movs	r2, #128	@ 0x80
 800dff0:	0152      	lsls	r2, r2, #5
 800dff2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800dff4:	4b05      	ldr	r3, [pc, #20]	@ (800e00c <MX_LPUART1_UART_Init+0x64>)
 800dff6:	0018      	movs	r0, r3
 800dff8:	f009 f81a 	bl	8017030 <HAL_UART_Init>
 800dffc:	1e03      	subs	r3, r0, #0
 800dffe:	d001      	beq.n	800e004 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800e000:	f7fa f956 	bl	80082b0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800e004:	46c0      	nop			@ (mov r8, r8)
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
 800e00a:	46c0      	nop			@ (mov r8, r8)
 800e00c:	200022c8 	.word	0x200022c8
 800e010:	40004800 	.word	0x40004800

0800e014 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e018:	4b16      	ldr	r3, [pc, #88]	@ (800e074 <MX_USART1_UART_Init+0x60>)
 800e01a:	4a17      	ldr	r2, [pc, #92]	@ (800e078 <MX_USART1_UART_Init+0x64>)
 800e01c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800e01e:	4b15      	ldr	r3, [pc, #84]	@ (800e074 <MX_USART1_UART_Init+0x60>)
 800e020:	22e1      	movs	r2, #225	@ 0xe1
 800e022:	0252      	lsls	r2, r2, #9
 800e024:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e026:	4b13      	ldr	r3, [pc, #76]	@ (800e074 <MX_USART1_UART_Init+0x60>)
 800e028:	2200      	movs	r2, #0
 800e02a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e02c:	4b11      	ldr	r3, [pc, #68]	@ (800e074 <MX_USART1_UART_Init+0x60>)
 800e02e:	2200      	movs	r2, #0
 800e030:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e032:	4b10      	ldr	r3, [pc, #64]	@ (800e074 <MX_USART1_UART_Init+0x60>)
 800e034:	2200      	movs	r2, #0
 800e036:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e038:	4b0e      	ldr	r3, [pc, #56]	@ (800e074 <MX_USART1_UART_Init+0x60>)
 800e03a:	220c      	movs	r2, #12
 800e03c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e03e:	4b0d      	ldr	r3, [pc, #52]	@ (800e074 <MX_USART1_UART_Init+0x60>)
 800e040:	2200      	movs	r2, #0
 800e042:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e044:	4b0b      	ldr	r3, [pc, #44]	@ (800e074 <MX_USART1_UART_Init+0x60>)
 800e046:	2200      	movs	r2, #0
 800e048:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e04a:	4b0a      	ldr	r3, [pc, #40]	@ (800e074 <MX_USART1_UART_Init+0x60>)
 800e04c:	2200      	movs	r2, #0
 800e04e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e050:	4b08      	ldr	r3, [pc, #32]	@ (800e074 <MX_USART1_UART_Init+0x60>)
 800e052:	2208      	movs	r2, #8
 800e054:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e056:	4b07      	ldr	r3, [pc, #28]	@ (800e074 <MX_USART1_UART_Init+0x60>)
 800e058:	2280      	movs	r2, #128	@ 0x80
 800e05a:	0212      	lsls	r2, r2, #8
 800e05c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e05e:	4b05      	ldr	r3, [pc, #20]	@ (800e074 <MX_USART1_UART_Init+0x60>)
 800e060:	0018      	movs	r0, r3
 800e062:	f008 ffe5 	bl	8017030 <HAL_UART_Init>
 800e066:	1e03      	subs	r3, r0, #0
 800e068:	d001      	beq.n	800e06e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800e06a:	f7fa f921 	bl	80082b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e06e:	46c0      	nop			@ (mov r8, r8)
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}
 800e074:	20002380 	.word	0x20002380
 800e078:	40013800 	.word	0x40013800

0800e07c <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800e080:	4b14      	ldr	r3, [pc, #80]	@ (800e0d4 <MX_USART4_UART_Init+0x58>)
 800e082:	4a15      	ldr	r2, [pc, #84]	@ (800e0d8 <MX_USART4_UART_Init+0x5c>)
 800e084:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800e086:	4b13      	ldr	r3, [pc, #76]	@ (800e0d4 <MX_USART4_UART_Init+0x58>)
 800e088:	22e1      	movs	r2, #225	@ 0xe1
 800e08a:	0252      	lsls	r2, r2, #9
 800e08c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e08e:	4b11      	ldr	r3, [pc, #68]	@ (800e0d4 <MX_USART4_UART_Init+0x58>)
 800e090:	2200      	movs	r2, #0
 800e092:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e094:	4b0f      	ldr	r3, [pc, #60]	@ (800e0d4 <MX_USART4_UART_Init+0x58>)
 800e096:	2200      	movs	r2, #0
 800e098:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e09a:	4b0e      	ldr	r3, [pc, #56]	@ (800e0d4 <MX_USART4_UART_Init+0x58>)
 800e09c:	2200      	movs	r2, #0
 800e09e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e0a0:	4b0c      	ldr	r3, [pc, #48]	@ (800e0d4 <MX_USART4_UART_Init+0x58>)
 800e0a2:	220c      	movs	r2, #12
 800e0a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e0a6:	4b0b      	ldr	r3, [pc, #44]	@ (800e0d4 <MX_USART4_UART_Init+0x58>)
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e0ac:	4b09      	ldr	r3, [pc, #36]	@ (800e0d4 <MX_USART4_UART_Init+0x58>)
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800e0b2:	4b08      	ldr	r3, [pc, #32]	@ (800e0d4 <MX_USART4_UART_Init+0x58>)
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e0b8:	4b06      	ldr	r3, [pc, #24]	@ (800e0d4 <MX_USART4_UART_Init+0x58>)
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800e0be:	4b05      	ldr	r3, [pc, #20]	@ (800e0d4 <MX_USART4_UART_Init+0x58>)
 800e0c0:	0018      	movs	r0, r3
 800e0c2:	f008 ffb5 	bl	8017030 <HAL_UART_Init>
 800e0c6:	1e03      	subs	r3, r0, #0
 800e0c8:	d001      	beq.n	800e0ce <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800e0ca:	f7fa f8f1 	bl	80082b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800e0ce:	46c0      	nop			@ (mov r8, r8)
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	20002438 	.word	0x20002438
 800e0d8:	40004c00 	.word	0x40004c00

0800e0dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e0dc:	b590      	push	{r4, r7, lr}
 800e0de:	b08d      	sub	sp, #52	@ 0x34
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e0e4:	241c      	movs	r4, #28
 800e0e6:	193b      	adds	r3, r7, r4
 800e0e8:	0018      	movs	r0, r3
 800e0ea:	2314      	movs	r3, #20
 800e0ec:	001a      	movs	r2, r3
 800e0ee:	2100      	movs	r1, #0
 800e0f0:	f012 f830 	bl	8020154 <memset>
  if(uartHandle->Instance==LPUART1)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	4a8b      	ldr	r2, [pc, #556]	@ (800e328 <HAL_UART_MspInit+0x24c>)
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	d129      	bne.n	800e152 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800e0fe:	4b8b      	ldr	r3, [pc, #556]	@ (800e32c <HAL_UART_MspInit+0x250>)
 800e100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e102:	4b8a      	ldr	r3, [pc, #552]	@ (800e32c <HAL_UART_MspInit+0x250>)
 800e104:	2180      	movs	r1, #128	@ 0x80
 800e106:	02c9      	lsls	r1, r1, #11
 800e108:	430a      	orrs	r2, r1
 800e10a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e10c:	4b87      	ldr	r3, [pc, #540]	@ (800e32c <HAL_UART_MspInit+0x250>)
 800e10e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e110:	4b86      	ldr	r3, [pc, #536]	@ (800e32c <HAL_UART_MspInit+0x250>)
 800e112:	2104      	movs	r1, #4
 800e114:	430a      	orrs	r2, r1
 800e116:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e118:	4b84      	ldr	r3, [pc, #528]	@ (800e32c <HAL_UART_MspInit+0x250>)
 800e11a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e11c:	2204      	movs	r2, #4
 800e11e:	4013      	ands	r3, r2
 800e120:	61bb      	str	r3, [r7, #24]
 800e122:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800e124:	0021      	movs	r1, r4
 800e126:	187b      	adds	r3, r7, r1
 800e128:	2203      	movs	r2, #3
 800e12a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e12c:	187b      	adds	r3, r7, r1
 800e12e:	2202      	movs	r2, #2
 800e130:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e132:	187b      	adds	r3, r7, r1
 800e134:	2200      	movs	r2, #0
 800e136:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e138:	187b      	adds	r3, r7, r1
 800e13a:	2203      	movs	r2, #3
 800e13c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800e13e:	187b      	adds	r3, r7, r1
 800e140:	2206      	movs	r2, #6
 800e142:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e144:	187b      	adds	r3, r7, r1
 800e146:	4a7a      	ldr	r2, [pc, #488]	@ (800e330 <HAL_UART_MspInit+0x254>)
 800e148:	0019      	movs	r1, r3
 800e14a:	0010      	movs	r0, r2
 800e14c:	f001 fea0 	bl	800fe90 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800e150:	e0e5      	b.n	800e31e <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4a77      	ldr	r2, [pc, #476]	@ (800e334 <HAL_UART_MspInit+0x258>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d133      	bne.n	800e1c4 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800e15c:	4b73      	ldr	r3, [pc, #460]	@ (800e32c <HAL_UART_MspInit+0x250>)
 800e15e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e160:	4b72      	ldr	r3, [pc, #456]	@ (800e32c <HAL_UART_MspInit+0x250>)
 800e162:	2180      	movs	r1, #128	@ 0x80
 800e164:	01c9      	lsls	r1, r1, #7
 800e166:	430a      	orrs	r2, r1
 800e168:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e16a:	4b70      	ldr	r3, [pc, #448]	@ (800e32c <HAL_UART_MspInit+0x250>)
 800e16c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e16e:	4b6f      	ldr	r3, [pc, #444]	@ (800e32c <HAL_UART_MspInit+0x250>)
 800e170:	2101      	movs	r1, #1
 800e172:	430a      	orrs	r2, r1
 800e174:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e176:	4b6d      	ldr	r3, [pc, #436]	@ (800e32c <HAL_UART_MspInit+0x250>)
 800e178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e17a:	2201      	movs	r2, #1
 800e17c:	4013      	ands	r3, r2
 800e17e:	617b      	str	r3, [r7, #20]
 800e180:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e182:	211c      	movs	r1, #28
 800e184:	187b      	adds	r3, r7, r1
 800e186:	22c0      	movs	r2, #192	@ 0xc0
 800e188:	00d2      	lsls	r2, r2, #3
 800e18a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e18c:	187b      	adds	r3, r7, r1
 800e18e:	2202      	movs	r2, #2
 800e190:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e192:	187b      	adds	r3, r7, r1
 800e194:	2200      	movs	r2, #0
 800e196:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e198:	187b      	adds	r3, r7, r1
 800e19a:	2203      	movs	r2, #3
 800e19c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800e19e:	187b      	adds	r3, r7, r1
 800e1a0:	2204      	movs	r2, #4
 800e1a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e1a4:	187a      	adds	r2, r7, r1
 800e1a6:	23a0      	movs	r3, #160	@ 0xa0
 800e1a8:	05db      	lsls	r3, r3, #23
 800e1aa:	0011      	movs	r1, r2
 800e1ac:	0018      	movs	r0, r3
 800e1ae:	f001 fe6f 	bl	800fe90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	2100      	movs	r1, #0
 800e1b6:	201b      	movs	r0, #27
 800e1b8:	f001 fa18 	bl	800f5ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e1bc:	201b      	movs	r0, #27
 800e1be:	f001 fa2a 	bl	800f616 <HAL_NVIC_EnableIRQ>
}
 800e1c2:	e0ac      	b.n	800e31e <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	4a5b      	ldr	r2, [pc, #364]	@ (800e338 <HAL_UART_MspInit+0x25c>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d000      	beq.n	800e1d0 <HAL_UART_MspInit+0xf4>
 800e1ce:	e0a6      	b.n	800e31e <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800e1d0:	4b56      	ldr	r3, [pc, #344]	@ (800e32c <HAL_UART_MspInit+0x250>)
 800e1d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e1d4:	4b55      	ldr	r3, [pc, #340]	@ (800e32c <HAL_UART_MspInit+0x250>)
 800e1d6:	2180      	movs	r1, #128	@ 0x80
 800e1d8:	0309      	lsls	r1, r1, #12
 800e1da:	430a      	orrs	r2, r1
 800e1dc:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e1de:	4b53      	ldr	r3, [pc, #332]	@ (800e32c <HAL_UART_MspInit+0x250>)
 800e1e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1e2:	4b52      	ldr	r3, [pc, #328]	@ (800e32c <HAL_UART_MspInit+0x250>)
 800e1e4:	2101      	movs	r1, #1
 800e1e6:	430a      	orrs	r2, r1
 800e1e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e1ea:	4b50      	ldr	r3, [pc, #320]	@ (800e32c <HAL_UART_MspInit+0x250>)
 800e1ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	4013      	ands	r3, r2
 800e1f2:	613b      	str	r3, [r7, #16]
 800e1f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e1f6:	4b4d      	ldr	r3, [pc, #308]	@ (800e32c <HAL_UART_MspInit+0x250>)
 800e1f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1fa:	4b4c      	ldr	r3, [pc, #304]	@ (800e32c <HAL_UART_MspInit+0x250>)
 800e1fc:	2104      	movs	r1, #4
 800e1fe:	430a      	orrs	r2, r1
 800e200:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e202:	4b4a      	ldr	r3, [pc, #296]	@ (800e32c <HAL_UART_MspInit+0x250>)
 800e204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e206:	2204      	movs	r2, #4
 800e208:	4013      	ands	r3, r2
 800e20a:	60fb      	str	r3, [r7, #12]
 800e20c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e20e:	241c      	movs	r4, #28
 800e210:	193b      	adds	r3, r7, r4
 800e212:	2202      	movs	r2, #2
 800e214:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e216:	193b      	adds	r3, r7, r4
 800e218:	2202      	movs	r2, #2
 800e21a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e21c:	193b      	adds	r3, r7, r4
 800e21e:	2200      	movs	r2, #0
 800e220:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e222:	193b      	adds	r3, r7, r4
 800e224:	2203      	movs	r2, #3
 800e226:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e228:	193b      	adds	r3, r7, r4
 800e22a:	2206      	movs	r2, #6
 800e22c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e22e:	193a      	adds	r2, r7, r4
 800e230:	23a0      	movs	r3, #160	@ 0xa0
 800e232:	05db      	lsls	r3, r3, #23
 800e234:	0011      	movs	r1, r2
 800e236:	0018      	movs	r0, r3
 800e238:	f001 fe2a 	bl	800fe90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e23c:	0021      	movs	r1, r4
 800e23e:	187b      	adds	r3, r7, r1
 800e240:	2280      	movs	r2, #128	@ 0x80
 800e242:	00d2      	lsls	r2, r2, #3
 800e244:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e246:	187b      	adds	r3, r7, r1
 800e248:	2202      	movs	r2, #2
 800e24a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e24c:	187b      	adds	r3, r7, r1
 800e24e:	2200      	movs	r2, #0
 800e250:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e252:	187b      	adds	r3, r7, r1
 800e254:	2203      	movs	r2, #3
 800e256:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800e258:	187b      	adds	r3, r7, r1
 800e25a:	2206      	movs	r2, #6
 800e25c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e25e:	187b      	adds	r3, r7, r1
 800e260:	4a33      	ldr	r2, [pc, #204]	@ (800e330 <HAL_UART_MspInit+0x254>)
 800e262:	0019      	movs	r1, r3
 800e264:	0010      	movs	r0, r2
 800e266:	f001 fe13 	bl	800fe90 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800e26a:	4b34      	ldr	r3, [pc, #208]	@ (800e33c <HAL_UART_MspInit+0x260>)
 800e26c:	4a34      	ldr	r2, [pc, #208]	@ (800e340 <HAL_UART_MspInit+0x264>)
 800e26e:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800e270:	4b32      	ldr	r3, [pc, #200]	@ (800e33c <HAL_UART_MspInit+0x260>)
 800e272:	220c      	movs	r2, #12
 800e274:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e276:	4b31      	ldr	r3, [pc, #196]	@ (800e33c <HAL_UART_MspInit+0x260>)
 800e278:	2200      	movs	r2, #0
 800e27a:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e27c:	4b2f      	ldr	r3, [pc, #188]	@ (800e33c <HAL_UART_MspInit+0x260>)
 800e27e:	2200      	movs	r2, #0
 800e280:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e282:	4b2e      	ldr	r3, [pc, #184]	@ (800e33c <HAL_UART_MspInit+0x260>)
 800e284:	2280      	movs	r2, #128	@ 0x80
 800e286:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e288:	4b2c      	ldr	r3, [pc, #176]	@ (800e33c <HAL_UART_MspInit+0x260>)
 800e28a:	2200      	movs	r2, #0
 800e28c:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e28e:	4b2b      	ldr	r3, [pc, #172]	@ (800e33c <HAL_UART_MspInit+0x260>)
 800e290:	2200      	movs	r2, #0
 800e292:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800e294:	4b29      	ldr	r3, [pc, #164]	@ (800e33c <HAL_UART_MspInit+0x260>)
 800e296:	2220      	movs	r2, #32
 800e298:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e29a:	4b28      	ldr	r3, [pc, #160]	@ (800e33c <HAL_UART_MspInit+0x260>)
 800e29c:	2200      	movs	r2, #0
 800e29e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800e2a0:	4b26      	ldr	r3, [pc, #152]	@ (800e33c <HAL_UART_MspInit+0x260>)
 800e2a2:	0018      	movs	r0, r3
 800e2a4:	f001 f9d8 	bl	800f658 <HAL_DMA_Init>
 800e2a8:	1e03      	subs	r3, r0, #0
 800e2aa:	d001      	beq.n	800e2b0 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800e2ac:	f7fa f800 	bl	80082b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	4a22      	ldr	r2, [pc, #136]	@ (800e33c <HAL_UART_MspInit+0x260>)
 800e2b4:	675a      	str	r2, [r3, #116]	@ 0x74
 800e2b6:	4b21      	ldr	r3, [pc, #132]	@ (800e33c <HAL_UART_MspInit+0x260>)
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800e2bc:	4b21      	ldr	r3, [pc, #132]	@ (800e344 <HAL_UART_MspInit+0x268>)
 800e2be:	4a22      	ldr	r2, [pc, #136]	@ (800e348 <HAL_UART_MspInit+0x26c>)
 800e2c0:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800e2c2:	4b20      	ldr	r3, [pc, #128]	@ (800e344 <HAL_UART_MspInit+0x268>)
 800e2c4:	220c      	movs	r2, #12
 800e2c6:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800e2c8:	4b1e      	ldr	r3, [pc, #120]	@ (800e344 <HAL_UART_MspInit+0x268>)
 800e2ca:	2210      	movs	r2, #16
 800e2cc:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e2ce:	4b1d      	ldr	r3, [pc, #116]	@ (800e344 <HAL_UART_MspInit+0x268>)
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e2d4:	4b1b      	ldr	r3, [pc, #108]	@ (800e344 <HAL_UART_MspInit+0x268>)
 800e2d6:	2280      	movs	r2, #128	@ 0x80
 800e2d8:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e2da:	4b1a      	ldr	r3, [pc, #104]	@ (800e344 <HAL_UART_MspInit+0x268>)
 800e2dc:	2200      	movs	r2, #0
 800e2de:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e2e0:	4b18      	ldr	r3, [pc, #96]	@ (800e344 <HAL_UART_MspInit+0x268>)
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800e2e6:	4b17      	ldr	r3, [pc, #92]	@ (800e344 <HAL_UART_MspInit+0x268>)
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e2ec:	4b15      	ldr	r3, [pc, #84]	@ (800e344 <HAL_UART_MspInit+0x268>)
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800e2f2:	4b14      	ldr	r3, [pc, #80]	@ (800e344 <HAL_UART_MspInit+0x268>)
 800e2f4:	0018      	movs	r0, r3
 800e2f6:	f001 f9af 	bl	800f658 <HAL_DMA_Init>
 800e2fa:	1e03      	subs	r3, r0, #0
 800e2fc:	d001      	beq.n	800e302 <HAL_UART_MspInit+0x226>
      Error_Handler();
 800e2fe:	f7f9 ffd7 	bl	80082b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	4a0f      	ldr	r2, [pc, #60]	@ (800e344 <HAL_UART_MspInit+0x268>)
 800e306:	671a      	str	r2, [r3, #112]	@ 0x70
 800e308:	4b0e      	ldr	r3, [pc, #56]	@ (800e344 <HAL_UART_MspInit+0x268>)
 800e30a:	687a      	ldr	r2, [r7, #4]
 800e30c:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800e30e:	2200      	movs	r2, #0
 800e310:	2100      	movs	r1, #0
 800e312:	200e      	movs	r0, #14
 800e314:	f001 f96a 	bl	800f5ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800e318:	200e      	movs	r0, #14
 800e31a:	f001 f97c 	bl	800f616 <HAL_NVIC_EnableIRQ>
}
 800e31e:	46c0      	nop			@ (mov r8, r8)
 800e320:	46bd      	mov	sp, r7
 800e322:	b00d      	add	sp, #52	@ 0x34
 800e324:	bd90      	pop	{r4, r7, pc}
 800e326:	46c0      	nop			@ (mov r8, r8)
 800e328:	40004800 	.word	0x40004800
 800e32c:	40021000 	.word	0x40021000
 800e330:	50000800 	.word	0x50000800
 800e334:	40013800 	.word	0x40013800
 800e338:	40004c00 	.word	0x40004c00
 800e33c:	200024f0 	.word	0x200024f0
 800e340:	4002006c 	.word	0x4002006c
 800e344:	20002538 	.word	0x20002538
 800e348:	40020080 	.word	0x40020080

0800e34c <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b086      	sub	sp, #24
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800e354:	f000 fca6 	bl	800eca4 <HAL_GetTick>
 800e358:	0003      	movs	r3, r0
 800e35a:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800e35c:	4b1c      	ldr	r3, [pc, #112]	@ (800e3d0 <TimestampIsReached+0x84>)
 800e35e:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800e360:	697a      	ldr	r2, [r7, #20]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	429a      	cmp	r2, r3
 800e366:	d307      	bcc.n	800e378 <TimestampIsReached+0x2c>
 800e368:	697a      	ldr	r2, [r7, #20]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	1ad3      	subs	r3, r2, r3
 800e36e:	693a      	ldr	r2, [r7, #16]
 800e370:	429a      	cmp	r2, r3
 800e372:	d901      	bls.n	800e378 <TimestampIsReached+0x2c>
 800e374:	2201      	movs	r2, #1
 800e376:	e000      	b.n	800e37a <TimestampIsReached+0x2e>
 800e378:	2200      	movs	r2, #0
 800e37a:	230f      	movs	r3, #15
 800e37c:	18fb      	adds	r3, r7, r3
 800e37e:	701a      	strb	r2, [r3, #0]
 800e380:	781a      	ldrb	r2, [r3, #0]
 800e382:	2101      	movs	r1, #1
 800e384:	400a      	ands	r2, r1
 800e386:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800e388:	697a      	ldr	r2, [r7, #20]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d207      	bcs.n	800e3a0 <TimestampIsReached+0x54>
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	1ad3      	subs	r3, r2, r3
 800e396:	693a      	ldr	r2, [r7, #16]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d201      	bcs.n	800e3a0 <TimestampIsReached+0x54>
 800e39c:	2201      	movs	r2, #1
 800e39e:	e000      	b.n	800e3a2 <TimestampIsReached+0x56>
 800e3a0:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800e3a2:	200e      	movs	r0, #14
 800e3a4:	183b      	adds	r3, r7, r0
 800e3a6:	701a      	strb	r2, [r3, #0]
 800e3a8:	781a      	ldrb	r2, [r3, #0]
 800e3aa:	2101      	movs	r1, #1
 800e3ac:	400a      	ands	r2, r1
 800e3ae:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800e3b0:	230f      	movs	r3, #15
 800e3b2:	18fb      	adds	r3, r7, r3
 800e3b4:	781b      	ldrb	r3, [r3, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d103      	bne.n	800e3c2 <TimestampIsReached+0x76>
 800e3ba:	183b      	adds	r3, r7, r0
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d001      	beq.n	800e3c6 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	e000      	b.n	800e3c8 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800e3c6:	2300      	movs	r3, #0
}
 800e3c8:	0018      	movs	r0, r3
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	b006      	add	sp, #24
 800e3ce:	bd80      	pop	{r7, pc}
 800e3d0:	7fffffff 	.word	0x7fffffff

0800e3d4 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800e3dc:	f000 fc62 	bl	800eca4 <HAL_GetTick>
 800e3e0:	0002      	movs	r2, r0
 800e3e2:	4904      	ldr	r1, [pc, #16]	@ (800e3f4 <AddTimestamp+0x20>)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	0018      	movs	r0, r3
 800e3e8:	f011 fd70 	bl	801fecc <siprintf>
}
 800e3ec:	46c0      	nop			@ (mov r8, r8)
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	b002      	add	sp, #8
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	08024ef0 	.word	0x08024ef0

0800e3f8 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800e3f8:	b40c      	push	{r2, r3}
 800e3fa:	b5b0      	push	{r4, r5, r7, lr}
 800e3fc:	b0a4      	sub	sp, #144	@ 0x90
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	0002      	movs	r2, r0
 800e402:	6039      	str	r1, [r7, #0]
 800e404:	1dfb      	adds	r3, r7, #7
 800e406:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800e408:	4b23      	ldr	r3, [pc, #140]	@ (800e498 <CreateLine+0xa0>)
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	1dfa      	adds	r2, r7, #7
 800e40e:	7812      	ldrb	r2, [r2, #0]
 800e410:	429a      	cmp	r2, r3
 800e412:	d839      	bhi.n	800e488 <CreateLine+0x90>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800e414:	683a      	ldr	r2, [r7, #0]
 800e416:	4921      	ldr	r1, [pc, #132]	@ (800e49c <CreateLine+0xa4>)
 800e418:	240c      	movs	r4, #12
 800e41a:	193b      	adds	r3, r7, r4
 800e41c:	0018      	movs	r0, r3
 800e41e:	f011 fd55 	bl	801fecc <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800e422:	4b1d      	ldr	r3, [pc, #116]	@ (800e498 <CreateLine+0xa0>)
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	2b01      	cmp	r3, #1
 800e428:	d909      	bls.n	800e43e <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800e42a:	193b      	adds	r3, r7, r4
 800e42c:	0018      	movs	r0, r3
 800e42e:	f7f1 fe9d 	bl	800016c <strlen>
 800e432:	0002      	movs	r2, r0
 800e434:	193b      	adds	r3, r7, r4
 800e436:	189b      	adds	r3, r3, r2
 800e438:	0018      	movs	r0, r3
 800e43a:	f7ff ffcb 	bl	800e3d4 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800e43e:	240c      	movs	r4, #12
 800e440:	193b      	adds	r3, r7, r4
 800e442:	0018      	movs	r0, r3
 800e444:	f7f1 fe92 	bl	800016c <strlen>
 800e448:	0003      	movs	r3, r0
 800e44a:	218c      	movs	r1, #140	@ 0x8c
 800e44c:	187a      	adds	r2, r7, r1
 800e44e:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800e450:	239c      	movs	r3, #156	@ 0x9c
 800e452:	2508      	movs	r5, #8
 800e454:	195b      	adds	r3, r3, r5
 800e456:	19db      	adds	r3, r3, r7
 800e458:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800e45a:	193a      	adds	r2, r7, r4
 800e45c:	187b      	adds	r3, r7, r1
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	18d0      	adds	r0, r2, r3
 800e462:	187b      	adds	r3, r7, r1
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	2280      	movs	r2, #128	@ 0x80
 800e468:	1ad3      	subs	r3, r2, r3
 800e46a:	0019      	movs	r1, r3
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	2298      	movs	r2, #152	@ 0x98
 800e470:	1952      	adds	r2, r2, r5
 800e472:	19d2      	adds	r2, r2, r7
 800e474:	6812      	ldr	r2, [r2, #0]
 800e476:	f011 fdc1 	bl	801fffc <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800e47a:	193a      	adds	r2, r7, r4
 800e47c:	4b08      	ldr	r3, [pc, #32]	@ (800e4a0 <CreateLine+0xa8>)
 800e47e:	0011      	movs	r1, r2
 800e480:	0018      	movs	r0, r3
 800e482:	f011 fcb3 	bl	801fdec <iprintf>
 800e486:	e000      	b.n	800e48a <CreateLine+0x92>
    return;
 800e488:	46c0      	nop			@ (mov r8, r8)
}
 800e48a:	46bd      	mov	sp, r7
 800e48c:	b024      	add	sp, #144	@ 0x90
 800e48e:	bcb0      	pop	{r4, r5, r7}
 800e490:	bc08      	pop	{r3}
 800e492:	b002      	add	sp, #8
 800e494:	4718      	bx	r3
 800e496:	46c0      	nop			@ (mov r8, r8)
 800e498:	200000d0 	.word	0x200000d0
 800e49c:	08024efc 	.word	0x08024efc
 800e4a0:	08024f00 	.word	0x08024f00

0800e4a4 <_write>:

int _write(int fd, const void *buf, size_t count) {
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b084      	sub	sp, #16
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	b29a      	uxth	r2, r3
 800e4b4:	68b9      	ldr	r1, [r7, #8]
 800e4b6:	4804      	ldr	r0, [pc, #16]	@ (800e4c8 <_write+0x24>)
 800e4b8:	2364      	movs	r3, #100	@ 0x64
 800e4ba:	f008 fe1f 	bl	80170fc <HAL_UART_Transmit>
  return count;
 800e4be:	687b      	ldr	r3, [r7, #4]
}
 800e4c0:	0018      	movs	r0, r3
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	b004      	add	sp, #16
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	20002380 	.word	0x20002380

0800e4cc <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) {
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	0002      	movs	r2, r0
 800e4d4:	1dfb      	adds	r3, r7, #7
 800e4d6:	701a      	strb	r2, [r3, #0]
  CurrentVerboseLevel = level;
 800e4d8:	4b03      	ldr	r3, [pc, #12]	@ (800e4e8 <SetVerboseLevel+0x1c>)
 800e4da:	1dfa      	adds	r2, r7, #7
 800e4dc:	7812      	ldrb	r2, [r2, #0]
 800e4de:	701a      	strb	r2, [r3, #0]
}
 800e4e0:	46c0      	nop			@ (mov r8, r8)
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	b002      	add	sp, #8
 800e4e6:	bd80      	pop	{r7, pc}
 800e4e8:	200000d0 	.word	0x200000d0

0800e4ec <GetVerboseLevel>:

uint8_t GetVerboseLevel() {
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	af00      	add	r7, sp, #0
  return CurrentVerboseLevel; }
 800e4f0:	4b02      	ldr	r3, [pc, #8]	@ (800e4fc <GetVerboseLevel+0x10>)
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	0018      	movs	r0, r3
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}
 800e4fa:	46c0      	nop			@ (mov r8, r8)
 800e4fc:	200000d0 	.word	0x200000d0

0800e500 <BinaryReleaseInfo>:


void BinaryReleaseInfo() {
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800e506:	4a0f      	ldr	r2, [pc, #60]	@ (800e544 <BinaryReleaseInfo+0x44>)
 800e508:	4b0f      	ldr	r3, [pc, #60]	@ (800e548 <BinaryReleaseInfo+0x48>)
 800e50a:	0019      	movs	r1, r3
 800e50c:	2002      	movs	r0, #2
 800e50e:	f7ff ff73 	bl	800e3f8 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800e512:	480e      	ldr	r0, [pc, #56]	@ (800e54c <BinaryReleaseInfo+0x4c>)
 800e514:	4a0e      	ldr	r2, [pc, #56]	@ (800e550 <BinaryReleaseInfo+0x50>)
 800e516:	490c      	ldr	r1, [pc, #48]	@ (800e548 <BinaryReleaseInfo+0x48>)
 800e518:	4b0e      	ldr	r3, [pc, #56]	@ (800e554 <BinaryReleaseInfo+0x54>)
 800e51a:	9300      	str	r3, [sp, #0]
 800e51c:	0003      	movs	r3, r0
 800e51e:	2002      	movs	r0, #2
 800e520:	f7ff ff6a 	bl	800e3f8 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800e524:	4b0c      	ldr	r3, [pc, #48]	@ (800e558 <BinaryReleaseInfo+0x58>)
 800e526:	4a0d      	ldr	r2, [pc, #52]	@ (800e55c <BinaryReleaseInfo+0x5c>)
 800e528:	4907      	ldr	r1, [pc, #28]	@ (800e548 <BinaryReleaseInfo+0x48>)
 800e52a:	2002      	movs	r0, #2
 800e52c:	f7ff ff64 	bl	800e3f8 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800e530:	4b0b      	ldr	r3, [pc, #44]	@ (800e560 <BinaryReleaseInfo+0x60>)
 800e532:	4a0c      	ldr	r2, [pc, #48]	@ (800e564 <BinaryReleaseInfo+0x64>)
 800e534:	4904      	ldr	r1, [pc, #16]	@ (800e548 <BinaryReleaseInfo+0x48>)
 800e536:	2002      	movs	r0, #2
 800e538:	f7ff ff5e 	bl	800e3f8 <CreateLine>
}
 800e53c:	46c0      	nop			@ (mov r8, r8)
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	46c0      	nop			@ (mov r8, r8)
 800e544:	08024f08 	.word	0x08024f08
 800e548:	08024f34 	.word	0x08024f34
 800e54c:	08024f38 	.word	0x08024f38
 800e550:	08024f44 	.word	0x08024f44
 800e554:	08024f58 	.word	0x08024f58
 800e558:	08024f64 	.word	0x08024f64
 800e55c:	08024f70 	.word	0x08024f70
 800e560:	08024f78 	.word	0x08024f78
 800e564:	08024f80 	.word	0x08024f80

0800e568 <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	60f8      	str	r0, [r7, #12]
 800e570:	60b9      	str	r1, [r7, #8]
 800e572:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	68ba      	ldr	r2, [r7, #8]
 800e578:	68f9      	ldr	r1, [r7, #12]
 800e57a:	4803      	ldr	r0, [pc, #12]	@ (800e588 <errorHandler+0x20>)
 800e57c:	f011 fc36 	bl	801fdec <iprintf>
//    while (true)
//    {
//    }
}
 800e580:	46c0      	nop			@ (mov r8, r8)
 800e582:	46bd      	mov	sp, r7
 800e584:	b004      	add	sp, #16
 800e586:	bd80      	pop	{r7, pc}
 800e588:	08024f98 	.word	0x08024f98

0800e58c <ReadRegister>:

static uint32_t HIDSTimeStamp;
//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800e58c:	b590      	push	{r4, r7, lr}
 800e58e:	b083      	sub	sp, #12
 800e590:	af00      	add	r7, sp, #0
 800e592:	6039      	str	r1, [r7, #0]
 800e594:	0011      	movs	r1, r2
 800e596:	1dfb      	adds	r3, r7, #7
 800e598:	1c02      	adds	r2, r0, #0
 800e59a:	701a      	strb	r2, [r3, #0]
 800e59c:	1dbb      	adds	r3, r7, #6
 800e59e:	1c0a      	adds	r2, r1, #0
 800e5a0:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800e5a2:	4b0a      	ldr	r3, [pc, #40]	@ (800e5cc <ReadRegister+0x40>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d00a      	beq.n	800e5c0 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800e5aa:	4b08      	ldr	r3, [pc, #32]	@ (800e5cc <ReadRegister+0x40>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	1dba      	adds	r2, r7, #6
 800e5b0:	7814      	ldrb	r4, [r2, #0]
 800e5b2:	6839      	ldr	r1, [r7, #0]
 800e5b4:	1dfa      	adds	r2, r7, #7
 800e5b6:	7810      	ldrb	r0, [r2, #0]
 800e5b8:	0022      	movs	r2, r4
 800e5ba:	4798      	blx	r3
 800e5bc:	0003      	movs	r3, r0
 800e5be:	e000      	b.n	800e5c2 <ReadRegister+0x36>
	}
	return false;
 800e5c0:	2300      	movs	r3, #0
}
 800e5c2:	0018      	movs	r0, r3
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	b003      	add	sp, #12
 800e5c8:	bd90      	pop	{r4, r7, pc}
 800e5ca:	46c0      	nop			@ (mov r8, r8)
 800e5cc:	20002588 	.word	0x20002588

0800e5d0 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800e5d0:	b590      	push	{r4, r7, lr}
 800e5d2:	b083      	sub	sp, #12
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6039      	str	r1, [r7, #0]
 800e5d8:	0011      	movs	r1, r2
 800e5da:	1dfb      	adds	r3, r7, #7
 800e5dc:	1c02      	adds	r2, r0, #0
 800e5de:	701a      	strb	r2, [r3, #0]
 800e5e0:	1dbb      	adds	r3, r7, #6
 800e5e2:	1c0a      	adds	r2, r1, #0
 800e5e4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800e5e6:	4b0a      	ldr	r3, [pc, #40]	@ (800e610 <WriteRegister+0x40>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d00a      	beq.n	800e604 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800e5ee:	4b08      	ldr	r3, [pc, #32]	@ (800e610 <WriteRegister+0x40>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	1dba      	adds	r2, r7, #6
 800e5f4:	7814      	ldrb	r4, [r2, #0]
 800e5f6:	6839      	ldr	r1, [r7, #0]
 800e5f8:	1dfa      	adds	r2, r7, #7
 800e5fa:	7810      	ldrb	r0, [r2, #0]
 800e5fc:	0022      	movs	r2, r4
 800e5fe:	4798      	blx	r3
 800e600:	0003      	movs	r3, r0
 800e602:	e000      	b.n	800e606 <WriteRegister+0x36>
  }
  return false;
 800e604:	2300      	movs	r3, #0
}
 800e606:	0018      	movs	r0, r3
 800e608:	46bd      	mov	sp, r7
 800e60a:	b003      	add	sp, #12
 800e60c:	bd90      	pop	{r4, r7, pc}
 800e60e:	46c0      	nop			@ (mov r8, r8)
 800e610:	2000258c 	.word	0x2000258c

0800e614 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	000a      	movs	r2, r1
 800e61e:	1cfb      	adds	r3, r7, #3
 800e620:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800e622:	230f      	movs	r3, #15
 800e624:	18fb      	adds	r3, r7, r3
 800e626:	22ff      	movs	r2, #255	@ 0xff
 800e628:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800e62a:	230e      	movs	r3, #14
 800e62c:	18fb      	adds	r3, r7, r3
 800e62e:	2200      	movs	r2, #0
 800e630:	701a      	strb	r2, [r3, #0]
 800e632:	e037      	b.n	800e6a4 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800e634:	230e      	movs	r3, #14
 800e636:	18fb      	adds	r3, r7, r3
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	687a      	ldr	r2, [r7, #4]
 800e63c:	18d3      	adds	r3, r2, r3
 800e63e:	7819      	ldrb	r1, [r3, #0]
 800e640:	220f      	movs	r2, #15
 800e642:	18bb      	adds	r3, r7, r2
 800e644:	18ba      	adds	r2, r7, r2
 800e646:	7812      	ldrb	r2, [r2, #0]
 800e648:	404a      	eors	r2, r1
 800e64a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800e64c:	230d      	movs	r3, #13
 800e64e:	18fb      	adds	r3, r7, r3
 800e650:	2200      	movs	r2, #0
 800e652:	701a      	strb	r2, [r3, #0]
 800e654:	e01b      	b.n	800e68e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800e656:	210f      	movs	r1, #15
 800e658:	187b      	adds	r3, r7, r1
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	b25b      	sxtb	r3, r3
 800e65e:	2b00      	cmp	r3, #0
 800e660:	da09      	bge.n	800e676 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800e662:	187b      	adds	r3, r7, r1
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	005b      	lsls	r3, r3, #1
 800e668:	b25b      	sxtb	r3, r3
 800e66a:	2231      	movs	r2, #49	@ 0x31
 800e66c:	4053      	eors	r3, r2
 800e66e:	b25a      	sxtb	r2, r3
 800e670:	187b      	adds	r3, r7, r1
 800e672:	701a      	strb	r2, [r3, #0]
 800e674:	e005      	b.n	800e682 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800e676:	230f      	movs	r3, #15
 800e678:	18fa      	adds	r2, r7, r3
 800e67a:	18fb      	adds	r3, r7, r3
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	18db      	adds	r3, r3, r3
 800e680:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800e682:	210d      	movs	r1, #13
 800e684:	187b      	adds	r3, r7, r1
 800e686:	781a      	ldrb	r2, [r3, #0]
 800e688:	187b      	adds	r3, r7, r1
 800e68a:	3201      	adds	r2, #1
 800e68c:	701a      	strb	r2, [r3, #0]
 800e68e:	230d      	movs	r3, #13
 800e690:	18fb      	adds	r3, r7, r3
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	2b07      	cmp	r3, #7
 800e696:	d9de      	bls.n	800e656 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800e698:	210e      	movs	r1, #14
 800e69a:	187b      	adds	r3, r7, r1
 800e69c:	781a      	ldrb	r2, [r3, #0]
 800e69e:	187b      	adds	r3, r7, r1
 800e6a0:	3201      	adds	r2, #1
 800e6a2:	701a      	strb	r2, [r3, #0]
 800e6a4:	230e      	movs	r3, #14
 800e6a6:	18fa      	adds	r2, r7, r3
 800e6a8:	1cfb      	adds	r3, r7, #3
 800e6aa:	7812      	ldrb	r2, [r2, #0]
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d3c0      	bcc.n	800e634 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800e6b2:	230f      	movs	r3, #15
 800e6b4:	18fb      	adds	r3, r7, r3
 800e6b6:	781b      	ldrb	r3, [r3, #0]
}
 800e6b8:	0018      	movs	r0, r3
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	b004      	add	sp, #16
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800e6ca:	4b0a      	ldr	r3, [pc, #40]	@ (800e6f4 <HIDS_Init+0x34>)
 800e6cc:	687a      	ldr	r2, [r7, #4]
 800e6ce:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800e6d0:	4b09      	ldr	r3, [pc, #36]	@ (800e6f8 <HIDS_Init+0x38>)
 800e6d2:	683a      	ldr	r2, [r7, #0]
 800e6d4:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800e6d6:	4b09      	ldr	r3, [pc, #36]	@ (800e6fc <HIDS_Init+0x3c>)
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	0018      	movs	r0, r3
 800e6dc:	f000 f840 	bl	800e760 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800e6e0:	4b07      	ldr	r3, [pc, #28]	@ (800e700 <HIDS_Init+0x40>)
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	0018      	movs	r0, r3
 800e6e6:	f000 f82b 	bl	800e740 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800e6ea:	46c0      	nop			@ (mov r8, r8)
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	b002      	add	sp, #8
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	46c0      	nop			@ (mov r8, r8)
 800e6f4:	20002588 	.word	0x20002588
 800e6f8:	2000258c 	.word	0x2000258c
 800e6fc:	200000d2 	.word	0x200000d2
 800e700:	200000d1 	.word	0x200000d1

0800e704 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800e704:	b580      	push	{r7, lr}
 800e706:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = HAL_GetTick() + HIDS_Interval_ms;
 800e708:	f000 facc 	bl	800eca4 <HAL_GetTick>
 800e70c:	0002      	movs	r2, r0
 800e70e:	4b08      	ldr	r3, [pc, #32]	@ (800e730 <HIDS_StartMeasurement+0x2c>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	18d2      	adds	r2, r2, r3
 800e714:	4b07      	ldr	r3, [pc, #28]	@ (800e734 <HIDS_StartMeasurement+0x30>)
 800e716:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800e718:	4b07      	ldr	r3, [pc, #28]	@ (800e738 <HIDS_StartMeasurement+0x34>)
 800e71a:	2201      	movs	r2, #1
 800e71c:	0019      	movs	r1, r3
 800e71e:	2044      	movs	r0, #68	@ 0x44
 800e720:	f7ff ff56 	bl	800e5d0 <WriteRegister>
  MeasurementDone = false;
 800e724:	4b05      	ldr	r3, [pc, #20]	@ (800e73c <HIDS_StartMeasurement+0x38>)
 800e726:	2200      	movs	r2, #0
 800e728:	701a      	strb	r2, [r3, #0]
}
 800e72a:	46c0      	nop			@ (mov r8, r8)
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	200000d8 	.word	0x200000d8
 800e734:	200000d4 	.word	0x200000d4
 800e738:	200000d2 	.word	0x200000d2
 800e73c:	2000259e 	.word	0x2000259e

0800e740 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800e740:	b580      	push	{r7, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	af00      	add	r7, sp, #0
 800e746:	0002      	movs	r2, r0
 800e748:	1dfb      	adds	r3, r7, #7
 800e74a:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800e74c:	4b03      	ldr	r3, [pc, #12]	@ (800e75c <HIDS_SetHeaterMode+0x1c>)
 800e74e:	1dfa      	adds	r2, r7, #7
 800e750:	7812      	ldrb	r2, [r2, #0]
 800e752:	701a      	strb	r2, [r3, #0]
}
 800e754:	46c0      	nop			@ (mov r8, r8)
 800e756:	46bd      	mov	sp, r7
 800e758:	b002      	add	sp, #8
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	200000d1 	.word	0x200000d1

0800e760 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	0002      	movs	r2, r0
 800e768:	1dfb      	adds	r3, r7, #7
 800e76a:	701a      	strb	r2, [r3, #0]
  MeasureMode = modeMeasure;
 800e76c:	4b03      	ldr	r3, [pc, #12]	@ (800e77c <HIDS_SetMeasurementMode+0x1c>)
 800e76e:	1dfa      	adds	r2, r7, #7
 800e770:	7812      	ldrb	r2, [r2, #0]
 800e772:	701a      	strb	r2, [r3, #0]
}
 800e774:	46c0      	nop			@ (mov r8, r8)
 800e776:	46bd      	mov	sp, r7
 800e778:	b002      	add	sp, #8
 800e77a:	bd80      	pop	{r7, pc}
 800e77c:	200000d2 	.word	0x200000d2

0800e780 <setHIDSTimeStamp>:

void setHIDSTimeStamp(uint32_t ticks) {
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  HIDSTimeStamp = HAL_GetTick() + ticks;
 800e788:	f000 fa8c 	bl	800eca4 <HAL_GetTick>
 800e78c:	0002      	movs	r2, r0
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	18d2      	adds	r2, r2, r3
 800e792:	4b03      	ldr	r3, [pc, #12]	@ (800e7a0 <setHIDSTimeStamp+0x20>)
 800e794:	601a      	str	r2, [r3, #0]
}
 800e796:	46c0      	nop			@ (mov r8, r8)
 800e798:	46bd      	mov	sp, r7
 800e79a:	b002      	add	sp, #8
 800e79c:	bd80      	pop	{r7, pc}
 800e79e:	46c0      	nop			@ (mov r8, r8)
 800e7a0:	200025a0 	.word	0x200025a0

0800e7a4 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800e7a4:	b590      	push	{r4, r7, lr}
 800e7a6:	b085      	sub	sp, #20
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	781a      	ldrb	r2, [r3, #0]
 800e7b0:	210c      	movs	r1, #12
 800e7b2:	187b      	adds	r3, r7, r1
 800e7b4:	701a      	strb	r2, [r3, #0]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	785a      	ldrb	r2, [r3, #1]
 800e7ba:	187b      	adds	r3, r7, r1
 800e7bc:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800e7be:	240f      	movs	r4, #15
 800e7c0:	193b      	adds	r3, r7, r4
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	7892      	ldrb	r2, [r2, #2]
 800e7c6:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800e7c8:	187b      	adds	r3, r7, r1
 800e7ca:	2102      	movs	r1, #2
 800e7cc:	0018      	movs	r0, r3
 800e7ce:	f7ff ff21 	bl	800e614 <CalculateCRC>
 800e7d2:	0003      	movs	r3, r0
 800e7d4:	001a      	movs	r2, r3
 800e7d6:	193b      	adds	r3, r7, r4
 800e7d8:	781b      	ldrb	r3, [r3, #0]
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d007      	beq.n	800e7ee <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800e7de:	4a1a      	ldr	r2, [pc, #104]	@ (800e848 <CheckCRC+0xa4>)
 800e7e0:	4b1a      	ldr	r3, [pc, #104]	@ (800e84c <CheckCRC+0xa8>)
 800e7e2:	0019      	movs	r1, r3
 800e7e4:	2001      	movs	r0, #1
 800e7e6:	f7ff fe07 	bl	800e3f8 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	e027      	b.n	800e83e <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	78da      	ldrb	r2, [r3, #3]
 800e7f2:	2108      	movs	r1, #8
 800e7f4:	187b      	adds	r3, r7, r1
 800e7f6:	701a      	strb	r2, [r3, #0]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	791a      	ldrb	r2, [r3, #4]
 800e7fc:	187b      	adds	r3, r7, r1
 800e7fe:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800e800:	240e      	movs	r4, #14
 800e802:	193b      	adds	r3, r7, r4
 800e804:	687a      	ldr	r2, [r7, #4]
 800e806:	7952      	ldrb	r2, [r2, #5]
 800e808:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800e80a:	187b      	adds	r3, r7, r1
 800e80c:	2102      	movs	r1, #2
 800e80e:	0018      	movs	r0, r3
 800e810:	f7ff ff00 	bl	800e614 <CalculateCRC>
 800e814:	0003      	movs	r3, r0
 800e816:	001a      	movs	r2, r3
 800e818:	193b      	adds	r3, r7, r4
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d00d      	beq.n	800e83c <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800e820:	4a0b      	ldr	r2, [pc, #44]	@ (800e850 <CheckCRC+0xac>)
 800e822:	4b0a      	ldr	r3, [pc, #40]	@ (800e84c <CheckCRC+0xa8>)
 800e824:	0019      	movs	r1, r3
 800e826:	2001      	movs	r0, #1
 800e828:	f7ff fde6 	bl	800e3f8 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800e82c:	4a09      	ldr	r2, [pc, #36]	@ (800e854 <CheckCRC+0xb0>)
 800e82e:	4b0a      	ldr	r3, [pc, #40]	@ (800e858 <CheckCRC+0xb4>)
 800e830:	217c      	movs	r1, #124	@ 0x7c
 800e832:	0018      	movs	r0, r3
 800e834:	f7ff fe98 	bl	800e568 <errorHandler>
		return false;
 800e838:	2300      	movs	r3, #0
 800e83a:	e000      	b.n	800e83e <CheckCRC+0x9a>
	}
	return true;
 800e83c:	2301      	movs	r3, #1
}
 800e83e:	0018      	movs	r0, r3
 800e840:	46bd      	mov	sp, r7
 800e842:	b005      	add	sp, #20
 800e844:	bd90      	pop	{r4, r7, pc}
 800e846:	46c0      	nop			@ (mov r8, r8)
 800e848:	08024fe4 	.word	0x08024fe4
 800e84c:	0802500c 	.word	0x0802500c
 800e850:	08025010 	.word	0x08025010
 800e854:	0802503c 	.word	0x0802503c
 800e858:	080255d4 	.word	0x080255d4

0800e85c <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800e862:	1dbb      	adds	r3, r7, #6
 800e864:	2289      	movs	r2, #137	@ 0x89
 800e866:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800e868:	1dbb      	adds	r3, r7, #6
 800e86a:	2201      	movs	r2, #1
 800e86c:	0019      	movs	r1, r3
 800e86e:	2044      	movs	r0, #68	@ 0x44
 800e870:	f7ff feae 	bl	800e5d0 <WriteRegister>
	HAL_Delay(30);
 800e874:	201e      	movs	r0, #30
 800e876:	f000 fa1f 	bl	800ecb8 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800e87a:	4b14      	ldr	r3, [pc, #80]	@ (800e8cc <HIDS_DeviceConnected+0x70>)
 800e87c:	2206      	movs	r2, #6
 800e87e:	0019      	movs	r1, r3
 800e880:	2044      	movs	r0, #68	@ 0x44
 800e882:	f7ff fe83 	bl	800e58c <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800e886:	1dfb      	adds	r3, r7, #7
 800e888:	2200      	movs	r2, #0
 800e88a:	701a      	strb	r2, [r3, #0]
 800e88c:	e011      	b.n	800e8b2 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800e88e:	1dfb      	adds	r3, r7, #7
 800e890:	7818      	ldrb	r0, [r3, #0]
 800e892:	1dfb      	adds	r3, r7, #7
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	4a0d      	ldr	r2, [pc, #52]	@ (800e8cc <HIDS_DeviceConnected+0x70>)
 800e898:	5cd3      	ldrb	r3, [r2, r3]
 800e89a:	4a0d      	ldr	r2, [pc, #52]	@ (800e8d0 <HIDS_DeviceConnected+0x74>)
 800e89c:	490d      	ldr	r1, [pc, #52]	@ (800e8d4 <HIDS_DeviceConnected+0x78>)
 800e89e:	9300      	str	r3, [sp, #0]
 800e8a0:	0003      	movs	r3, r0
 800e8a2:	2002      	movs	r0, #2
 800e8a4:	f7ff fda8 	bl	800e3f8 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800e8a8:	1dfb      	adds	r3, r7, #7
 800e8aa:	781a      	ldrb	r2, [r3, #0]
 800e8ac:	1dfb      	adds	r3, r7, #7
 800e8ae:	3201      	adds	r2, #1
 800e8b0:	701a      	strb	r2, [r3, #0]
 800e8b2:	1dfb      	adds	r3, r7, #7
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	2b05      	cmp	r3, #5
 800e8b8:	d9e9      	bls.n	800e88e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800e8ba:	4b04      	ldr	r3, [pc, #16]	@ (800e8cc <HIDS_DeviceConnected+0x70>)
 800e8bc:	0018      	movs	r0, r3
 800e8be:	f7ff ff71 	bl	800e7a4 <CheckCRC>
 800e8c2:	0003      	movs	r3, r0
}
 800e8c4:	0018      	movs	r0, r3
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	b002      	add	sp, #8
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	20002590 	.word	0x20002590
 800e8d0:	08025054 	.word	0x08025054
 800e8d4:	08024fe0 	.word	0x08024fe0

0800e8d8 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800e8dc:	4b04      	ldr	r3, [pc, #16]	@ (800e8f0 <HIDS_MeasurementReady+0x18>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	0018      	movs	r0, r3
 800e8e2:	f7ff fd33 	bl	800e34c <TimestampIsReached>
 800e8e6:	0003      	movs	r3, r0
}
 800e8e8:	0018      	movs	r0, r3
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	46c0      	nop			@ (mov r8, r8)
 800e8f0:	200000d4 	.word	0x200000d4

0800e8f4 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b086      	sub	sp, #24
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800e8fe:	4b4c      	ldr	r3, [pc, #304]	@ (800ea30 <HIDS_GetMeasurementValues+0x13c>)
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d001      	beq.n	800e90a <HIDS_GetMeasurementValues+0x16>
 800e906:	2301      	movs	r3, #1
 800e908:	e08d      	b.n	800ea26 <HIDS_GetMeasurementValues+0x132>
  if(!HIDS_MeasurementReady()) return false;
 800e90a:	f7ff ffe5 	bl	800e8d8 <HIDS_MeasurementReady>
 800e90e:	0003      	movs	r3, r0
 800e910:	001a      	movs	r2, r3
 800e912:	2301      	movs	r3, #1
 800e914:	4053      	eors	r3, r2
 800e916:	b2db      	uxtb	r3, r3
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d001      	beq.n	800e920 <HIDS_GetMeasurementValues+0x2c>
 800e91c:	2300      	movs	r3, #0
 800e91e:	e082      	b.n	800ea26 <HIDS_GetMeasurementValues+0x132>
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  if (!ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH)) {
 800e920:	4b44      	ldr	r3, [pc, #272]	@ (800ea34 <HIDS_GetMeasurementValues+0x140>)
 800e922:	2206      	movs	r2, #6
 800e924:	0019      	movs	r1, r3
 800e926:	2044      	movs	r0, #68	@ 0x44
 800e928:	f7ff fe30 	bl	800e58c <ReadRegister>
 800e92c:	0003      	movs	r3, r0
 800e92e:	001a      	movs	r2, r3
 800e930:	2301      	movs	r3, #1
 800e932:	4053      	eors	r3, r2
 800e934:	b2db      	uxtb	r3, r3
 800e936:	2b00      	cmp	r3, #0
 800e938:	d005      	beq.n	800e946 <HIDS_GetMeasurementValues+0x52>
    Error("Error during reading the wsenHIDS result register");
 800e93a:	4a3f      	ldr	r2, [pc, #252]	@ (800ea38 <HIDS_GetMeasurementValues+0x144>)
 800e93c:	4b3f      	ldr	r3, [pc, #252]	@ (800ea3c <HIDS_GetMeasurementValues+0x148>)
 800e93e:	0019      	movs	r1, r3
 800e940:	2001      	movs	r0, #1
 800e942:	f7ff fd59 	bl	800e3f8 <CreateLine>
  }
	if(!CheckCRC(MeasureBuffer)) {
 800e946:	4b3b      	ldr	r3, [pc, #236]	@ (800ea34 <HIDS_GetMeasurementValues+0x140>)
 800e948:	0018      	movs	r0, r3
 800e94a:	f7ff ff2b 	bl	800e7a4 <CheckCRC>
 800e94e:	0003      	movs	r3, r0
 800e950:	001a      	movs	r2, r3
 800e952:	2301      	movs	r3, #1
 800e954:	4053      	eors	r3, r2
 800e956:	b2db      	uxtb	r3, r3
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d011      	beq.n	800e980 <HIDS_GetMeasurementValues+0x8c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800e95c:	2317      	movs	r3, #23
 800e95e:	18fb      	adds	r3, r7, r3
 800e960:	2200      	movs	r2, #0
 800e962:	701a      	strb	r2, [r3, #0]
 800e964:	e005      	b.n	800e972 <HIDS_GetMeasurementValues+0x7e>
 800e966:	2117      	movs	r1, #23
 800e968:	187b      	adds	r3, r7, r1
 800e96a:	781a      	ldrb	r2, [r3, #0]
 800e96c:	187b      	adds	r3, r7, r1
 800e96e:	3201      	adds	r2, #1
 800e970:	701a      	strb	r2, [r3, #0]
 800e972:	2317      	movs	r3, #23
 800e974:	18fb      	adds	r3, r7, r3
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	2b05      	cmp	r3, #5
 800e97a:	d9f4      	bls.n	800e966 <HIDS_GetMeasurementValues+0x72>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800e97c:	2300      	movs	r3, #0
 800e97e:	e052      	b.n	800ea26 <HIDS_GetMeasurementValues+0x132>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800e980:	4b2c      	ldr	r3, [pc, #176]	@ (800ea34 <HIDS_GetMeasurementValues+0x140>)
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	021b      	lsls	r3, r3, #8
 800e986:	4a2b      	ldr	r2, [pc, #172]	@ (800ea34 <HIDS_GetMeasurementValues+0x140>)
 800e988:	7852      	ldrb	r2, [r2, #1]
 800e98a:	4313      	orrs	r3, r2
 800e98c:	22af      	movs	r2, #175	@ 0xaf
 800e98e:	4353      	muls	r3, r2
 800e990:	0018      	movs	r0, r3
 800e992:	f7f4 fd15 	bl	80033c0 <__aeabi_i2d>
 800e996:	2200      	movs	r2, #0
 800e998:	4b29      	ldr	r3, [pc, #164]	@ (800ea40 <HIDS_GetMeasurementValues+0x14c>)
 800e99a:	f7f3 fa0b 	bl	8001db4 <__aeabi_ddiv>
 800e99e:	0002      	movs	r2, r0
 800e9a0:	000b      	movs	r3, r1
 800e9a2:	0010      	movs	r0, r2
 800e9a4:	0019      	movs	r1, r3
 800e9a6:	f7f4 fda5 	bl	80034f4 <__aeabi_d2f>
 800e9aa:	1c03      	adds	r3, r0, #0
 800e9ac:	613b      	str	r3, [r7, #16]
	currentTemperature -= 45;
 800e9ae:	4925      	ldr	r1, [pc, #148]	@ (800ea44 <HIDS_GetMeasurementValues+0x150>)
 800e9b0:	6938      	ldr	r0, [r7, #16]
 800e9b2:	f7f2 fc33 	bl	800121c <__aeabi_fsub>
 800e9b6:	1c03      	adds	r3, r0, #0
 800e9b8:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800e9ba:	4b1e      	ldr	r3, [pc, #120]	@ (800ea34 <HIDS_GetMeasurementValues+0x140>)
 800e9bc:	78db      	ldrb	r3, [r3, #3]
 800e9be:	021b      	lsls	r3, r3, #8
 800e9c0:	4a1c      	ldr	r2, [pc, #112]	@ (800ea34 <HIDS_GetMeasurementValues+0x140>)
 800e9c2:	7912      	ldrb	r2, [r2, #4]
 800e9c4:	431a      	orrs	r2, r3
 800e9c6:	0013      	movs	r3, r2
 800e9c8:	015b      	lsls	r3, r3, #5
 800e9ca:	1a9b      	subs	r3, r3, r2
 800e9cc:	009b      	lsls	r3, r3, #2
 800e9ce:	189b      	adds	r3, r3, r2
 800e9d0:	0018      	movs	r0, r3
 800e9d2:	f7f4 fcf5 	bl	80033c0 <__aeabi_i2d>
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	4b19      	ldr	r3, [pc, #100]	@ (800ea40 <HIDS_GetMeasurementValues+0x14c>)
 800e9da:	f7f3 f9eb 	bl	8001db4 <__aeabi_ddiv>
 800e9de:	0002      	movs	r2, r0
 800e9e0:	000b      	movs	r3, r1
 800e9e2:	0010      	movs	r0, r2
 800e9e4:	0019      	movs	r1, r3
 800e9e6:	f7f4 fd85 	bl	80034f4 <__aeabi_d2f>
 800e9ea:	1c03      	adds	r3, r0, #0
 800e9ec:	60fb      	str	r3, [r7, #12]
	currentHumidity -= 6;
 800e9ee:	4916      	ldr	r1, [pc, #88]	@ (800ea48 <HIDS_GetMeasurementValues+0x154>)
 800e9f0:	68f8      	ldr	r0, [r7, #12]
 800e9f2:	f7f2 fc13 	bl	800121c <__aeabi_fsub>
 800e9f6:	1c03      	adds	r3, r0, #0
 800e9f8:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	693a      	ldr	r2, [r7, #16]
 800e9fe:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800ea06:	687a      	ldr	r2, [r7, #4]
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	0011      	movs	r1, r2
 800ea0c:	0018      	movs	r0, r3
 800ea0e:	f7fd fa57 	bl	800bec0 <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800ea12:	68fa      	ldr	r2, [r7, #12]
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	1c11      	adds	r1, r2, #0
 800ea18:	1c18      	adds	r0, r3, #0
 800ea1a:	f7f4 ff6b 	bl	80038f4 <ESP_GetHT>

//   measurements = 0;
   MeasurementDone = true;
 800ea1e:	4b04      	ldr	r3, [pc, #16]	@ (800ea30 <HIDS_GetMeasurementValues+0x13c>)
 800ea20:	2201      	movs	r2, #1
 800ea22:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800ea24:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800ea26:	0018      	movs	r0, r3
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	b006      	add	sp, #24
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	46c0      	nop			@ (mov r8, r8)
 800ea30:	2000259e 	.word	0x2000259e
 800ea34:	20002598 	.word	0x20002598
 800ea38:	08025074 	.word	0x08025074
 800ea3c:	0802500c 	.word	0x0802500c
 800ea40:	40efffe0 	.word	0x40efffe0
 800ea44:	42340000 	.word	0x42340000
 800ea48:	40c00000 	.word	0x40c00000

0800ea4c <ResetHIDSresults>:
void ResetHIDSresults() {
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	af00      	add	r7, sp, #0
  humid = 0.0;
 800ea50:	4b04      	ldr	r3, [pc, #16]	@ (800ea64 <ResetHIDSresults+0x18>)
 800ea52:	2200      	movs	r2, #0
 800ea54:	601a      	str	r2, [r3, #0]
  temp = 0.0;
 800ea56:	4b04      	ldr	r3, [pc, #16]	@ (800ea68 <ResetHIDSresults+0x1c>)
 800ea58:	2200      	movs	r2, #0
 800ea5a:	601a      	str	r2, [r3, #0]
}
 800ea5c:	46c0      	nop			@ (mov r8, r8)
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
 800ea62:	46c0      	nop			@ (mov r8, r8)
 800ea64:	20002580 	.word	0x20002580
 800ea68:	20002584 	.word	0x20002584

0800ea6c <HIDS_Upkeep>:

wsenHIDSState HIDS_Upkeep(void) {
 800ea6c:	b5b0      	push	{r4, r5, r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af04      	add	r7, sp, #16
  static wsenHIDSState HIDSState = HIDS_STATE_INIT;
  switch(HIDSState) {
 800ea72:	4b3b      	ldr	r3, [pc, #236]	@ (800eb60 <HIDS_Upkeep+0xf4>)
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	2b06      	cmp	r3, #6
 800ea78:	d865      	bhi.n	800eb46 <HIDS_Upkeep+0xda>
 800ea7a:	009a      	lsls	r2, r3, #2
 800ea7c:	4b39      	ldr	r3, [pc, #228]	@ (800eb64 <HIDS_Upkeep+0xf8>)
 800ea7e:	18d3      	adds	r3, r2, r3
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	469f      	mov	pc, r3
    case HIDS_STATE_OFF:
      Debug("Measurements are turned off for wsenHIDS sensor.");
 800ea84:	4a38      	ldr	r2, [pc, #224]	@ (800eb68 <HIDS_Upkeep+0xfc>)
 800ea86:	4b39      	ldr	r3, [pc, #228]	@ (800eb6c <HIDS_Upkeep+0x100>)
 800ea88:	0019      	movs	r1, r3
 800ea8a:	2003      	movs	r0, #3
 800ea8c:	f7ff fcb4 	bl	800e3f8 <CreateLine>
      break;
 800ea90:	e060      	b.n	800eb54 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_INIT:
//      Debug("entered HIDS_STATE_INIT");
      ResetHIDSresults();
 800ea92:	f7ff ffdb 	bl	800ea4c <ResetHIDSresults>
      HIDSState = HIDS_STATE_START_MEASUREMENTS;
 800ea96:	4b32      	ldr	r3, [pc, #200]	@ (800eb60 <HIDS_Upkeep+0xf4>)
 800ea98:	2201      	movs	r2, #1
 800ea9a:	701a      	strb	r2, [r3, #0]
      break;
 800ea9c:	e05a      	b.n	800eb54 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_START_MEASUREMENTS:
//      Debug("entered HIDS_STATE_START_MEASUREMENTS");
      SetMeasurementIndicator();
 800ea9e:	f7fe fc33 	bl	800d308 <SetMeasurementIndicator>
      HIDS_StartMeasurement();
 800eaa2:	f7ff fe2f 	bl	800e704 <HIDS_StartMeasurement>
      HIDSState = HIDS_STATE_WAIT_FOR_COMPLETION;
 800eaa6:	4b2e      	ldr	r3, [pc, #184]	@ (800eb60 <HIDS_Upkeep+0xf4>)
 800eaa8:	2202      	movs	r2, #2
 800eaaa:	701a      	strb	r2, [r3, #0]
      break;
 800eaac:	e052      	b.n	800eb54 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT_FOR_COMPLETION:
//      Debug("entered HIDS_STATE_WAIT_FOR_COMPLETION");
      if(HIDS_GetMeasurementValues(&humid, &temp)) {
 800eaae:	4a30      	ldr	r2, [pc, #192]	@ (800eb70 <HIDS_Upkeep+0x104>)
 800eab0:	4b30      	ldr	r3, [pc, #192]	@ (800eb74 <HIDS_Upkeep+0x108>)
 800eab2:	0011      	movs	r1, r2
 800eab4:	0018      	movs	r0, r3
 800eab6:	f7ff ff1d 	bl	800e8f4 <HIDS_GetMeasurementValues>
 800eaba:	1e03      	subs	r3, r0, #0
 800eabc:	d047      	beq.n	800eb4e <HIDS_Upkeep+0xe2>
        HIDSState = HIDS_STATE_PROCESS_RESULTS;
 800eabe:	4b28      	ldr	r3, [pc, #160]	@ (800eb60 <HIDS_Upkeep+0xf4>)
 800eac0:	2203      	movs	r2, #3
 800eac2:	701a      	strb	r2, [r3, #0]
      }
      break;
 800eac4:	e043      	b.n	800eb4e <HIDS_Upkeep+0xe2>

    case HIDS_STATE_PROCESS_RESULTS:
//      Debug("entered HIDS_STATE_PROCESS_RESULTS");
//      Debug("Processing results.");
      Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", humid, temp);
 800eac6:	4b2b      	ldr	r3, [pc, #172]	@ (800eb74 <HIDS_Upkeep+0x108>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	1c18      	adds	r0, r3, #0
 800eacc:	f7f4 fcca 	bl	8003464 <__aeabi_f2d>
 800ead0:	0004      	movs	r4, r0
 800ead2:	000d      	movs	r5, r1
 800ead4:	4b26      	ldr	r3, [pc, #152]	@ (800eb70 <HIDS_Upkeep+0x104>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	1c18      	adds	r0, r3, #0
 800eada:	f7f4 fcc3 	bl	8003464 <__aeabi_f2d>
 800eade:	0002      	movs	r2, r0
 800eae0:	000b      	movs	r3, r1
 800eae2:	4825      	ldr	r0, [pc, #148]	@ (800eb78 <HIDS_Upkeep+0x10c>)
 800eae4:	4921      	ldr	r1, [pc, #132]	@ (800eb6c <HIDS_Upkeep+0x100>)
 800eae6:	9202      	str	r2, [sp, #8]
 800eae8:	9303      	str	r3, [sp, #12]
 800eaea:	9400      	str	r4, [sp, #0]
 800eaec:	9501      	str	r5, [sp, #4]
 800eaee:	0002      	movs	r2, r0
 800eaf0:	2003      	movs	r0, #3
 800eaf2:	f7ff fc81 	bl	800e3f8 <CreateLine>
      setHIDS(temp, humid);
 800eaf6:	4b1e      	ldr	r3, [pc, #120]	@ (800eb70 <HIDS_Upkeep+0x104>)
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	4b1e      	ldr	r3, [pc, #120]	@ (800eb74 <HIDS_Upkeep+0x108>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	1c19      	adds	r1, r3, #0
 800eb00:	1c10      	adds	r0, r2, #0
 800eb02:	f7f4 ff0b 	bl	800391c <setHIDS>
      ResetMeasurementIndicator();
 800eb06:	f7fe fc17 	bl	800d338 <ResetMeasurementIndicator>
      HIDSTimeStamp = HAL_GetTick() + (powerCheck() == USB_PLUGGED_IN?10000:1000);  // about every ten seconds when power is plugged
 800eb0a:	f000 f8cb 	bl	800eca4 <HAL_GetTick>
 800eb0e:	0004      	movs	r4, r0
 800eb10:	f7fe fd26 	bl	800d560 <powerCheck>
 800eb14:	0003      	movs	r3, r0
 800eb16:	2b04      	cmp	r3, #4
 800eb18:	d101      	bne.n	800eb1e <HIDS_Upkeep+0xb2>
 800eb1a:	4b18      	ldr	r3, [pc, #96]	@ (800eb7c <HIDS_Upkeep+0x110>)
 800eb1c:	e001      	b.n	800eb22 <HIDS_Upkeep+0xb6>
 800eb1e:	23fa      	movs	r3, #250	@ 0xfa
 800eb20:	009b      	lsls	r3, r3, #2
 800eb22:	191a      	adds	r2, r3, r4
 800eb24:	4b16      	ldr	r3, [pc, #88]	@ (800eb80 <HIDS_Upkeep+0x114>)
 800eb26:	601a      	str	r2, [r3, #0]
      HIDSState = HIDS_STATE_WAIT;
 800eb28:	4b0d      	ldr	r3, [pc, #52]	@ (800eb60 <HIDS_Upkeep+0xf4>)
 800eb2a:	2206      	movs	r2, #6
 800eb2c:	701a      	strb	r2, [r3, #0]
      break;
 800eb2e:	e011      	b.n	800eb54 <HIDS_Upkeep+0xe8>

    case HIDS_STATE_WAIT:
//      Debug("entered HIDS_STATE_WAIT");
      if(TimestampIsReached(HIDSTimeStamp)) {
 800eb30:	4b13      	ldr	r3, [pc, #76]	@ (800eb80 <HIDS_Upkeep+0x114>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	0018      	movs	r0, r3
 800eb36:	f7ff fc09 	bl	800e34c <TimestampIsReached>
 800eb3a:	1e03      	subs	r3, r0, #0
 800eb3c:	d009      	beq.n	800eb52 <HIDS_Upkeep+0xe6>
        HIDSState = HIDS_STATE_INIT;
 800eb3e:	4b08      	ldr	r3, [pc, #32]	@ (800eb60 <HIDS_Upkeep+0xf4>)
 800eb40:	2200      	movs	r2, #0
 800eb42:	701a      	strb	r2, [r3, #0]
      }
      break;
 800eb44:	e005      	b.n	800eb52 <HIDS_Upkeep+0xe6>

    default:
    // Handle unexpected state
      HIDSState = HIDS_STATE_INIT;
 800eb46:	4b06      	ldr	r3, [pc, #24]	@ (800eb60 <HIDS_Upkeep+0xf4>)
 800eb48:	2200      	movs	r2, #0
 800eb4a:	701a      	strb	r2, [r3, #0]
      break;
 800eb4c:	e002      	b.n	800eb54 <HIDS_Upkeep+0xe8>
      break;
 800eb4e:	46c0      	nop			@ (mov r8, r8)
 800eb50:	e000      	b.n	800eb54 <HIDS_Upkeep+0xe8>
      break;
 800eb52:	46c0      	nop			@ (mov r8, r8)
  }

  return HIDSState;
 800eb54:	4b02      	ldr	r3, [pc, #8]	@ (800eb60 <HIDS_Upkeep+0xf4>)
 800eb56:	781b      	ldrb	r3, [r3, #0]
}
 800eb58:	0018      	movs	r0, r3
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bdb0      	pop	{r4, r5, r7, pc}
 800eb5e:	46c0      	nop			@ (mov r8, r8)
 800eb60:	200025a4 	.word	0x200025a4
 800eb64:	080255b8 	.word	0x080255b8
 800eb68:	080250a8 	.word	0x080250a8
 800eb6c:	080250dc 	.word	0x080250dc
 800eb70:	20002584 	.word	0x20002584
 800eb74:	20002580 	.word	0x20002580
 800eb78:	080250e0 	.word	0x080250e0
 800eb7c:	00002710 	.word	0x00002710
 800eb80:	200025a0 	.word	0x200025a0

0800eb84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800eb84:	480d      	ldr	r0, [pc, #52]	@ (800ebbc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800eb86:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800eb88:	f7ff f836 	bl	800dbf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800eb8c:	480c      	ldr	r0, [pc, #48]	@ (800ebc0 <LoopForever+0x6>)
  ldr r1, =_edata
 800eb8e:	490d      	ldr	r1, [pc, #52]	@ (800ebc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800eb90:	4a0d      	ldr	r2, [pc, #52]	@ (800ebc8 <LoopForever+0xe>)
  movs r3, #0
 800eb92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800eb94:	e002      	b.n	800eb9c <LoopCopyDataInit>

0800eb96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800eb96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800eb98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800eb9a:	3304      	adds	r3, #4

0800eb9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800eb9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800eb9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800eba0:	d3f9      	bcc.n	800eb96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800eba2:	4a0a      	ldr	r2, [pc, #40]	@ (800ebcc <LoopForever+0x12>)
  ldr r4, =_ebss
 800eba4:	4c0a      	ldr	r4, [pc, #40]	@ (800ebd0 <LoopForever+0x16>)
  movs r3, #0
 800eba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800eba8:	e001      	b.n	800ebae <LoopFillZerobss>

0800ebaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ebaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ebac:	3204      	adds	r2, #4

0800ebae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ebae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ebb0:	d3fb      	bcc.n	800ebaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ebb2:	f011 fb79 	bl	80202a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ebb6:	f7f9 f829 	bl	8007c0c <main>

0800ebba <LoopForever>:

LoopForever:
    b LoopForever
 800ebba:	e7fe      	b.n	800ebba <LoopForever>
   ldr   r0, =_estack
 800ebbc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800ebc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ebc4:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 800ebc8:	08025f58 	.word	0x08025f58
  ldr r2, =_sbss
 800ebcc:	20000424 	.word	0x20000424
  ldr r4, =_ebss
 800ebd0:	200039ac 	.word	0x200039ac

0800ebd4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ebd4:	e7fe      	b.n	800ebd4 <ADC1_COMP_IRQHandler>
	...

0800ebd8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ebde:	1dfb      	adds	r3, r7, #7
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800ebe4:	4b0b      	ldr	r3, [pc, #44]	@ (800ec14 <HAL_Init+0x3c>)
 800ebe6:	681a      	ldr	r2, [r3, #0]
 800ebe8:	4b0a      	ldr	r3, [pc, #40]	@ (800ec14 <HAL_Init+0x3c>)
 800ebea:	2140      	movs	r1, #64	@ 0x40
 800ebec:	430a      	orrs	r2, r1
 800ebee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ebf0:	2003      	movs	r0, #3
 800ebf2:	f000 f811 	bl	800ec18 <HAL_InitTick>
 800ebf6:	1e03      	subs	r3, r0, #0
 800ebf8:	d003      	beq.n	800ec02 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800ebfa:	1dfb      	adds	r3, r7, #7
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	701a      	strb	r2, [r3, #0]
 800ec00:	e001      	b.n	800ec06 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ec02:	f7fe fead 	bl	800d960 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ec06:	1dfb      	adds	r3, r7, #7
 800ec08:	781b      	ldrb	r3, [r3, #0]
}
 800ec0a:	0018      	movs	r0, r3
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	b002      	add	sp, #8
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	46c0      	nop			@ (mov r8, r8)
 800ec14:	40022000 	.word	0x40022000

0800ec18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ec18:	b590      	push	{r4, r7, lr}
 800ec1a:	b083      	sub	sp, #12
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ec20:	4b14      	ldr	r3, [pc, #80]	@ (800ec74 <HAL_InitTick+0x5c>)
 800ec22:	681c      	ldr	r4, [r3, #0]
 800ec24:	4b14      	ldr	r3, [pc, #80]	@ (800ec78 <HAL_InitTick+0x60>)
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	0019      	movs	r1, r3
 800ec2a:	23fa      	movs	r3, #250	@ 0xfa
 800ec2c:	0098      	lsls	r0, r3, #2
 800ec2e:	f7f1 fab9 	bl	80001a4 <__udivsi3>
 800ec32:	0003      	movs	r3, r0
 800ec34:	0019      	movs	r1, r3
 800ec36:	0020      	movs	r0, r4
 800ec38:	f7f1 fab4 	bl	80001a4 <__udivsi3>
 800ec3c:	0003      	movs	r3, r0
 800ec3e:	0018      	movs	r0, r3
 800ec40:	f000 fcfd 	bl	800f63e <HAL_SYSTICK_Config>
 800ec44:	1e03      	subs	r3, r0, #0
 800ec46:	d001      	beq.n	800ec4c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	e00f      	b.n	800ec6c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2b03      	cmp	r3, #3
 800ec50:	d80b      	bhi.n	800ec6a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ec52:	6879      	ldr	r1, [r7, #4]
 800ec54:	2301      	movs	r3, #1
 800ec56:	425b      	negs	r3, r3
 800ec58:	2200      	movs	r2, #0
 800ec5a:	0018      	movs	r0, r3
 800ec5c:	f000 fcc6 	bl	800f5ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ec60:	4b06      	ldr	r3, [pc, #24]	@ (800ec7c <HAL_InitTick+0x64>)
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ec66:	2300      	movs	r3, #0
 800ec68:	e000      	b.n	800ec6c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800ec6a:	2301      	movs	r3, #1
}
 800ec6c:	0018      	movs	r0, r3
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	b003      	add	sp, #12
 800ec72:	bd90      	pop	{r4, r7, pc}
 800ec74:	200000cc 	.word	0x200000cc
 800ec78:	200000e0 	.word	0x200000e0
 800ec7c:	200000dc 	.word	0x200000dc

0800ec80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ec84:	4b05      	ldr	r3, [pc, #20]	@ (800ec9c <HAL_IncTick+0x1c>)
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	001a      	movs	r2, r3
 800ec8a:	4b05      	ldr	r3, [pc, #20]	@ (800eca0 <HAL_IncTick+0x20>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	18d2      	adds	r2, r2, r3
 800ec90:	4b03      	ldr	r3, [pc, #12]	@ (800eca0 <HAL_IncTick+0x20>)
 800ec92:	601a      	str	r2, [r3, #0]
}
 800ec94:	46c0      	nop			@ (mov r8, r8)
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}
 800ec9a:	46c0      	nop			@ (mov r8, r8)
 800ec9c:	200000e0 	.word	0x200000e0
 800eca0:	200025a8 	.word	0x200025a8

0800eca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	af00      	add	r7, sp, #0
  return uwTick;
 800eca8:	4b02      	ldr	r3, [pc, #8]	@ (800ecb4 <HAL_GetTick+0x10>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
}
 800ecac:	0018      	movs	r0, r3
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
 800ecb2:	46c0      	nop			@ (mov r8, r8)
 800ecb4:	200025a8 	.word	0x200025a8

0800ecb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b084      	sub	sp, #16
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ecc0:	f7ff fff0 	bl	800eca4 <HAL_GetTick>
 800ecc4:	0003      	movs	r3, r0
 800ecc6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	3301      	adds	r3, #1
 800ecd0:	d005      	beq.n	800ecde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800ecd2:	4b0a      	ldr	r3, [pc, #40]	@ (800ecfc <HAL_Delay+0x44>)
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	001a      	movs	r2, r3
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	189b      	adds	r3, r3, r2
 800ecdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800ecde:	46c0      	nop			@ (mov r8, r8)
 800ece0:	f7ff ffe0 	bl	800eca4 <HAL_GetTick>
 800ece4:	0002      	movs	r2, r0
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	1ad3      	subs	r3, r2, r3
 800ecea:	68fa      	ldr	r2, [r7, #12]
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d8f7      	bhi.n	800ece0 <HAL_Delay+0x28>
  {
  }
}
 800ecf0:	46c0      	nop			@ (mov r8, r8)
 800ecf2:	46c0      	nop			@ (mov r8, r8)
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	b004      	add	sp, #16
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	46c0      	nop			@ (mov r8, r8)
 800ecfc:	200000e0 	.word	0x200000e0

0800ed00 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800ed04:	4b04      	ldr	r3, [pc, #16]	@ (800ed18 <HAL_SuspendTick+0x18>)
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	4b03      	ldr	r3, [pc, #12]	@ (800ed18 <HAL_SuspendTick+0x18>)
 800ed0a:	2102      	movs	r1, #2
 800ed0c:	438a      	bics	r2, r1
 800ed0e:	601a      	str	r2, [r3, #0]
}
 800ed10:	46c0      	nop			@ (mov r8, r8)
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	46c0      	nop			@ (mov r8, r8)
 800ed18:	e000e010 	.word	0xe000e010

0800ed1c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800ed20:	4b04      	ldr	r3, [pc, #16]	@ (800ed34 <HAL_ResumeTick+0x18>)
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	4b03      	ldr	r3, [pc, #12]	@ (800ed34 <HAL_ResumeTick+0x18>)
 800ed26:	2102      	movs	r1, #2
 800ed28:	430a      	orrs	r2, r1
 800ed2a:	601a      	str	r2, [r3, #0]
}
 800ed2c:	46c0      	nop			@ (mov r8, r8)
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	46c0      	nop			@ (mov r8, r8)
 800ed34:	e000e010 	.word	0xe000e010

0800ed38 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800ed3c:	4b02      	ldr	r3, [pc, #8]	@ (800ed48 <HAL_GetUIDw0+0x10>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
}
 800ed40:	0018      	movs	r0, r3
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	46c0      	nop			@ (mov r8, r8)
 800ed48:	1ff80050 	.word	0x1ff80050

0800ed4c <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800ed50:	4b02      	ldr	r3, [pc, #8]	@ (800ed5c <HAL_GetUIDw1+0x10>)
 800ed52:	681b      	ldr	r3, [r3, #0]
}
 800ed54:	0018      	movs	r0, r3
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	46c0      	nop			@ (mov r8, r8)
 800ed5c:	1ff80054 	.word	0x1ff80054

0800ed60 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800ed64:	4b02      	ldr	r3, [pc, #8]	@ (800ed70 <HAL_GetUIDw2+0x10>)
 800ed66:	681b      	ldr	r3, [r3, #0]
}
 800ed68:	0018      	movs	r0, r3
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}
 800ed6e:	46c0      	nop			@ (mov r8, r8)
 800ed70:	1ff80064 	.word	0x1ff80064

0800ed74 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d101      	bne.n	800ed86 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800ed82:	2301      	movs	r3, #1
 800ed84:	e159      	b.n	800f03a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d10a      	bne.n	800eda4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2200      	movs	r2, #0
 800ed92:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2250      	movs	r2, #80	@ 0x50
 800ed98:	2100      	movs	r1, #0
 800ed9a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	0018      	movs	r0, r3
 800eda0:	f7f8 f9da 	bl	8007158 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eda8:	2210      	movs	r2, #16
 800edaa:	4013      	ands	r3, r2
 800edac:	2b10      	cmp	r3, #16
 800edae:	d005      	beq.n	800edbc <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	689b      	ldr	r3, [r3, #8]
 800edb6:	2204      	movs	r2, #4
 800edb8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800edba:	d00b      	beq.n	800edd4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edc0:	2210      	movs	r2, #16
 800edc2:	431a      	orrs	r2, r3
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2250      	movs	r2, #80	@ 0x50
 800edcc:	2100      	movs	r1, #0
 800edce:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800edd0:	2301      	movs	r3, #1
 800edd2:	e132      	b.n	800f03a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edd8:	4a9a      	ldr	r2, [pc, #616]	@ (800f044 <HAL_ADC_Init+0x2d0>)
 800edda:	4013      	ands	r3, r2
 800eddc:	2202      	movs	r2, #2
 800edde:	431a      	orrs	r2, r3
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	689b      	ldr	r3, [r3, #8]
 800edea:	2203      	movs	r2, #3
 800edec:	4013      	ands	r3, r2
 800edee:	2b01      	cmp	r3, #1
 800edf0:	d108      	bne.n	800ee04 <HAL_ADC_Init+0x90>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	2201      	movs	r2, #1
 800edfa:	4013      	ands	r3, r2
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d101      	bne.n	800ee04 <HAL_ADC_Init+0x90>
 800ee00:	2301      	movs	r3, #1
 800ee02:	e000      	b.n	800ee06 <HAL_ADC_Init+0x92>
 800ee04:	2300      	movs	r3, #0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d149      	bne.n	800ee9e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	685a      	ldr	r2, [r3, #4]
 800ee0e:	23c0      	movs	r3, #192	@ 0xc0
 800ee10:	061b      	lsls	r3, r3, #24
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d00b      	beq.n	800ee2e <HAL_ADC_Init+0xba>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	685a      	ldr	r2, [r3, #4]
 800ee1a:	2380      	movs	r3, #128	@ 0x80
 800ee1c:	05db      	lsls	r3, r3, #23
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d005      	beq.n	800ee2e <HAL_ADC_Init+0xba>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	685a      	ldr	r2, [r3, #4]
 800ee26:	2380      	movs	r3, #128	@ 0x80
 800ee28:	061b      	lsls	r3, r3, #24
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d111      	bne.n	800ee52 <HAL_ADC_Init+0xde>
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	691a      	ldr	r2, [r3, #16]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	0092      	lsls	r2, r2, #2
 800ee3a:	0892      	lsrs	r2, r2, #2
 800ee3c:	611a      	str	r2, [r3, #16]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	6919      	ldr	r1, [r3, #16]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	685a      	ldr	r2, [r3, #4]
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	430a      	orrs	r2, r1
 800ee4e:	611a      	str	r2, [r3, #16]
 800ee50:	e014      	b.n	800ee7c <HAL_ADC_Init+0x108>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	691a      	ldr	r2, [r3, #16]
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	0092      	lsls	r2, r2, #2
 800ee5e:	0892      	lsrs	r2, r2, #2
 800ee60:	611a      	str	r2, [r3, #16]
 800ee62:	4b79      	ldr	r3, [pc, #484]	@ (800f048 <HAL_ADC_Init+0x2d4>)
 800ee64:	681a      	ldr	r2, [r3, #0]
 800ee66:	4b78      	ldr	r3, [pc, #480]	@ (800f048 <HAL_ADC_Init+0x2d4>)
 800ee68:	4978      	ldr	r1, [pc, #480]	@ (800f04c <HAL_ADC_Init+0x2d8>)
 800ee6a:	400a      	ands	r2, r1
 800ee6c:	601a      	str	r2, [r3, #0]
 800ee6e:	4b76      	ldr	r3, [pc, #472]	@ (800f048 <HAL_ADC_Init+0x2d4>)
 800ee70:	6819      	ldr	r1, [r3, #0]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	685a      	ldr	r2, [r3, #4]
 800ee76:	4b74      	ldr	r3, [pc, #464]	@ (800f048 <HAL_ADC_Init+0x2d4>)
 800ee78:	430a      	orrs	r2, r1
 800ee7a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	68da      	ldr	r2, [r3, #12]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	2118      	movs	r1, #24
 800ee88:	438a      	bics	r2, r1
 800ee8a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	68d9      	ldr	r1, [r3, #12]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	689a      	ldr	r2, [r3, #8]
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	430a      	orrs	r2, r1
 800ee9c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800ee9e:	4b6a      	ldr	r3, [pc, #424]	@ (800f048 <HAL_ADC_Init+0x2d4>)
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	4b69      	ldr	r3, [pc, #420]	@ (800f048 <HAL_ADC_Init+0x2d4>)
 800eea4:	496a      	ldr	r1, [pc, #424]	@ (800f050 <HAL_ADC_Init+0x2dc>)
 800eea6:	400a      	ands	r2, r1
 800eea8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800eeaa:	4b67      	ldr	r3, [pc, #412]	@ (800f048 <HAL_ADC_Init+0x2d4>)
 800eeac:	6819      	ldr	r1, [r3, #0]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eeb2:	065a      	lsls	r2, r3, #25
 800eeb4:	4b64      	ldr	r3, [pc, #400]	@ (800f048 <HAL_ADC_Init+0x2d4>)
 800eeb6:	430a      	orrs	r2, r1
 800eeb8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	689a      	ldr	r2, [r3, #8]
 800eec0:	2380      	movs	r3, #128	@ 0x80
 800eec2:	055b      	lsls	r3, r3, #21
 800eec4:	4013      	ands	r3, r2
 800eec6:	d108      	bne.n	800eeda <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	689a      	ldr	r2, [r3, #8]
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	2180      	movs	r1, #128	@ 0x80
 800eed4:	0549      	lsls	r1, r1, #21
 800eed6:	430a      	orrs	r2, r1
 800eed8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	68da      	ldr	r2, [r3, #12]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	495b      	ldr	r1, [pc, #364]	@ (800f054 <HAL_ADC_Init+0x2e0>)
 800eee6:	400a      	ands	r2, r1
 800eee8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	68d9      	ldr	r1, [r3, #12]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	691b      	ldr	r3, [r3, #16]
 800eef8:	2b02      	cmp	r3, #2
 800eefa:	d101      	bne.n	800ef00 <HAL_ADC_Init+0x18c>
 800eefc:	2304      	movs	r3, #4
 800eefe:	e000      	b.n	800ef02 <HAL_ADC_Init+0x18e>
 800ef00:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800ef02:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2020      	movs	r0, #32
 800ef08:	5c1b      	ldrb	r3, [r3, r0]
 800ef0a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800ef0c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	202c      	movs	r0, #44	@ 0x2c
 800ef12:	5c1b      	ldrb	r3, [r3, r0]
 800ef14:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800ef16:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800ef1c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	699b      	ldr	r3, [r3, #24]
 800ef22:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800ef24:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	69db      	ldr	r3, [r3, #28]
 800ef2a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800ef2c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	430a      	orrs	r2, r1
 800ef34:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ef3a:	23c2      	movs	r3, #194	@ 0xc2
 800ef3c:	33ff      	adds	r3, #255	@ 0xff
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d00b      	beq.n	800ef5a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	68d9      	ldr	r1, [r3, #12]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800ef50:	431a      	orrs	r2, r3
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	430a      	orrs	r2, r1
 800ef58:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2221      	movs	r2, #33	@ 0x21
 800ef5e:	5c9b      	ldrb	r3, [r3, r2]
 800ef60:	2b01      	cmp	r3, #1
 800ef62:	d11a      	bne.n	800ef9a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2220      	movs	r2, #32
 800ef68:	5c9b      	ldrb	r3, [r3, r2]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d109      	bne.n	800ef82 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	68da      	ldr	r2, [r3, #12]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	2180      	movs	r1, #128	@ 0x80
 800ef7a:	0249      	lsls	r1, r1, #9
 800ef7c:	430a      	orrs	r2, r1
 800ef7e:	60da      	str	r2, [r3, #12]
 800ef80:	e00b      	b.n	800ef9a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ef86:	2220      	movs	r2, #32
 800ef88:	431a      	orrs	r2, r3
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef92:	2201      	movs	r2, #1
 800ef94:	431a      	orrs	r2, r3
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef9e:	2b01      	cmp	r3, #1
 800efa0:	d11f      	bne.n	800efe2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	691a      	ldr	r2, [r3, #16]
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	492a      	ldr	r1, [pc, #168]	@ (800f058 <HAL_ADC_Init+0x2e4>)
 800efae:	400a      	ands	r2, r1
 800efb0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	6919      	ldr	r1, [r3, #16]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800efc0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800efc6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	430a      	orrs	r2, r1
 800efce:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	691a      	ldr	r2, [r3, #16]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2101      	movs	r1, #1
 800efdc:	430a      	orrs	r2, r1
 800efde:	611a      	str	r2, [r3, #16]
 800efe0:	e00e      	b.n	800f000 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	691b      	ldr	r3, [r3, #16]
 800efe8:	2201      	movs	r2, #1
 800efea:	4013      	ands	r3, r2
 800efec:	2b01      	cmp	r3, #1
 800efee:	d107      	bne.n	800f000 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	691a      	ldr	r2, [r3, #16]
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2101      	movs	r1, #1
 800effc:	438a      	bics	r2, r1
 800effe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	695a      	ldr	r2, [r3, #20]
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	2107      	movs	r1, #7
 800f00c:	438a      	bics	r2, r1
 800f00e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	6959      	ldr	r1, [r3, #20]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	430a      	orrs	r2, r1
 800f020:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2200      	movs	r2, #0
 800f026:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f02c:	2203      	movs	r2, #3
 800f02e:	4393      	bics	r3, r2
 800f030:	2201      	movs	r2, #1
 800f032:	431a      	orrs	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800f038:	2300      	movs	r3, #0
}
 800f03a:	0018      	movs	r0, r3
 800f03c:	46bd      	mov	sp, r7
 800f03e:	b002      	add	sp, #8
 800f040:	bd80      	pop	{r7, pc}
 800f042:	46c0      	nop			@ (mov r8, r8)
 800f044:	fffffefd 	.word	0xfffffefd
 800f048:	40012708 	.word	0x40012708
 800f04c:	ffc3ffff 	.word	0xffc3ffff
 800f050:	fdffffff 	.word	0xfdffffff
 800f054:	fffe0219 	.word	0xfffe0219
 800f058:	fffffc03 	.word	0xfffffc03

0800f05c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800f05c:	b590      	push	{r4, r7, lr}
 800f05e:	b085      	sub	sp, #20
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f064:	230f      	movs	r3, #15
 800f066:	18fb      	adds	r3, r7, r3
 800f068:	2200      	movs	r2, #0
 800f06a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	689b      	ldr	r3, [r3, #8]
 800f072:	2204      	movs	r2, #4
 800f074:	4013      	ands	r3, r2
 800f076:	d138      	bne.n	800f0ea <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2250      	movs	r2, #80	@ 0x50
 800f07c:	5c9b      	ldrb	r3, [r3, r2]
 800f07e:	2b01      	cmp	r3, #1
 800f080:	d101      	bne.n	800f086 <HAL_ADC_Start+0x2a>
 800f082:	2302      	movs	r3, #2
 800f084:	e038      	b.n	800f0f8 <HAL_ADC_Start+0x9c>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2250      	movs	r2, #80	@ 0x50
 800f08a:	2101      	movs	r1, #1
 800f08c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	69db      	ldr	r3, [r3, #28]
 800f092:	2b01      	cmp	r3, #1
 800f094:	d007      	beq.n	800f0a6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800f096:	230f      	movs	r3, #15
 800f098:	18fc      	adds	r4, r7, r3
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	0018      	movs	r0, r3
 800f09e:	f000 f95f 	bl	800f360 <ADC_Enable>
 800f0a2:	0003      	movs	r3, r0
 800f0a4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800f0a6:	230f      	movs	r3, #15
 800f0a8:	18fb      	adds	r3, r7, r3
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d120      	bne.n	800f0f2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0b4:	4a12      	ldr	r2, [pc, #72]	@ (800f100 <HAL_ADC_Start+0xa4>)
 800f0b6:	4013      	ands	r3, r2
 800f0b8:	2280      	movs	r2, #128	@ 0x80
 800f0ba:	0052      	lsls	r2, r2, #1
 800f0bc:	431a      	orrs	r2, r3
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2250      	movs	r2, #80	@ 0x50
 800f0cc:	2100      	movs	r1, #0
 800f0ce:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	221c      	movs	r2, #28
 800f0d6:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	689a      	ldr	r2, [r3, #8]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	2104      	movs	r1, #4
 800f0e4:	430a      	orrs	r2, r1
 800f0e6:	609a      	str	r2, [r3, #8]
 800f0e8:	e003      	b.n	800f0f2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800f0ea:	230f      	movs	r3, #15
 800f0ec:	18fb      	adds	r3, r7, r3
 800f0ee:	2202      	movs	r2, #2
 800f0f0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800f0f2:	230f      	movs	r3, #15
 800f0f4:	18fb      	adds	r3, r7, r3
 800f0f6:	781b      	ldrb	r3, [r3, #0]
}
 800f0f8:	0018      	movs	r0, r3
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	b005      	add	sp, #20
 800f0fe:	bd90      	pop	{r4, r7, pc}
 800f100:	fffff0fe 	.word	0xfffff0fe

0800f104 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b084      	sub	sp, #16
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800f10e:	2300      	movs	r3, #0
 800f110:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800f112:	2300      	movs	r3, #0
 800f114:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	695b      	ldr	r3, [r3, #20]
 800f11a:	2b08      	cmp	r3, #8
 800f11c:	d102      	bne.n	800f124 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800f11e:	2308      	movs	r3, #8
 800f120:	60fb      	str	r3, [r7, #12]
 800f122:	e014      	b.n	800f14e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	68db      	ldr	r3, [r3, #12]
 800f12a:	2201      	movs	r2, #1
 800f12c:	4013      	ands	r3, r2
 800f12e:	2b01      	cmp	r3, #1
 800f130:	d10b      	bne.n	800f14a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f136:	2220      	movs	r2, #32
 800f138:	431a      	orrs	r2, r3
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2250      	movs	r2, #80	@ 0x50
 800f142:	2100      	movs	r1, #0
 800f144:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800f146:	2301      	movs	r3, #1
 800f148:	e072      	b.n	800f230 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800f14a:	230c      	movs	r3, #12
 800f14c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800f14e:	f7ff fda9 	bl	800eca4 <HAL_GetTick>
 800f152:	0003      	movs	r3, r0
 800f154:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f156:	e01f      	b.n	800f198 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	3301      	adds	r3, #1
 800f15c:	d01c      	beq.n	800f198 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d007      	beq.n	800f174 <HAL_ADC_PollForConversion+0x70>
 800f164:	f7ff fd9e 	bl	800eca4 <HAL_GetTick>
 800f168:	0002      	movs	r2, r0
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	1ad3      	subs	r3, r2, r3
 800f16e:	683a      	ldr	r2, [r7, #0]
 800f170:	429a      	cmp	r2, r3
 800f172:	d211      	bcs.n	800f198 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	68fa      	ldr	r2, [r7, #12]
 800f17c:	4013      	ands	r3, r2
 800f17e:	d10b      	bne.n	800f198 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f184:	2204      	movs	r2, #4
 800f186:	431a      	orrs	r2, r3
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2250      	movs	r2, #80	@ 0x50
 800f190:	2100      	movs	r1, #0
 800f192:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800f194:	2303      	movs	r3, #3
 800f196:	e04b      	b.n	800f230 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	68fa      	ldr	r2, [r7, #12]
 800f1a0:	4013      	ands	r3, r2
 800f1a2:	d0d9      	beq.n	800f158 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1a8:	2280      	movs	r2, #128	@ 0x80
 800f1aa:	0092      	lsls	r2, r2, #2
 800f1ac:	431a      	orrs	r2, r3
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	68da      	ldr	r2, [r3, #12]
 800f1b8:	23c0      	movs	r3, #192	@ 0xc0
 800f1ba:	011b      	lsls	r3, r3, #4
 800f1bc:	4013      	ands	r3, r2
 800f1be:	d12e      	bne.n	800f21e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2220      	movs	r2, #32
 800f1c4:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d129      	bne.n	800f21e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	2208      	movs	r2, #8
 800f1d2:	4013      	ands	r3, r2
 800f1d4:	2b08      	cmp	r3, #8
 800f1d6:	d122      	bne.n	800f21e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	689b      	ldr	r3, [r3, #8]
 800f1de:	2204      	movs	r2, #4
 800f1e0:	4013      	ands	r3, r2
 800f1e2:	d110      	bne.n	800f206 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	685a      	ldr	r2, [r3, #4]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	210c      	movs	r1, #12
 800f1f0:	438a      	bics	r2, r1
 800f1f2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1f8:	4a0f      	ldr	r2, [pc, #60]	@ (800f238 <HAL_ADC_PollForConversion+0x134>)
 800f1fa:	4013      	ands	r3, r2
 800f1fc:	2201      	movs	r2, #1
 800f1fe:	431a      	orrs	r2, r3
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	655a      	str	r2, [r3, #84]	@ 0x54
 800f204:	e00b      	b.n	800f21e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f20a:	2220      	movs	r2, #32
 800f20c:	431a      	orrs	r2, r3
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f216:	2201      	movs	r2, #1
 800f218:	431a      	orrs	r2, r3
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	699b      	ldr	r3, [r3, #24]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d103      	bne.n	800f22e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	220c      	movs	r2, #12
 800f22c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f22e:	2300      	movs	r3, #0
}
 800f230:	0018      	movs	r0, r3
 800f232:	46bd      	mov	sp, r7
 800f234:	b004      	add	sp, #16
 800f236:	bd80      	pop	{r7, pc}
 800f238:	fffffefe 	.word	0xfffffefe

0800f23c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800f24a:	0018      	movs	r0, r3
 800f24c:	46bd      	mov	sp, r7
 800f24e:	b002      	add	sp, #8
 800f250:	bd80      	pop	{r7, pc}
	...

0800f254 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b082      	sub	sp, #8
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2250      	movs	r2, #80	@ 0x50
 800f262:	5c9b      	ldrb	r3, [r3, r2]
 800f264:	2b01      	cmp	r3, #1
 800f266:	d101      	bne.n	800f26c <HAL_ADC_ConfigChannel+0x18>
 800f268:	2302      	movs	r3, #2
 800f26a:	e06c      	b.n	800f346 <HAL_ADC_ConfigChannel+0xf2>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2250      	movs	r2, #80	@ 0x50
 800f270:	2101      	movs	r1, #1
 800f272:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	689b      	ldr	r3, [r3, #8]
 800f27a:	2204      	movs	r2, #4
 800f27c:	4013      	ands	r3, r2
 800f27e:	d00b      	beq.n	800f298 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f284:	2220      	movs	r2, #32
 800f286:	431a      	orrs	r2, r3
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2250      	movs	r2, #80	@ 0x50
 800f290:	2100      	movs	r1, #0
 800f292:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f294:	2301      	movs	r3, #1
 800f296:	e056      	b.n	800f346 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	4a2c      	ldr	r2, [pc, #176]	@ (800f350 <HAL_ADC_ConfigChannel+0xfc>)
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	d028      	beq.n	800f2f4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	035b      	lsls	r3, r3, #13
 800f2ae:	0b5a      	lsrs	r2, r3, #13
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	430a      	orrs	r2, r1
 800f2b6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	2380      	movs	r3, #128	@ 0x80
 800f2be:	02db      	lsls	r3, r3, #11
 800f2c0:	4013      	ands	r3, r2
 800f2c2:	d009      	beq.n	800f2d8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800f2c4:	4b23      	ldr	r3, [pc, #140]	@ (800f354 <HAL_ADC_ConfigChannel+0x100>)
 800f2c6:	681a      	ldr	r2, [r3, #0]
 800f2c8:	4b22      	ldr	r3, [pc, #136]	@ (800f354 <HAL_ADC_ConfigChannel+0x100>)
 800f2ca:	2180      	movs	r1, #128	@ 0x80
 800f2cc:	0409      	lsls	r1, r1, #16
 800f2ce:	430a      	orrs	r2, r1
 800f2d0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800f2d2:	200a      	movs	r0, #10
 800f2d4:	f000 f8ac 	bl	800f430 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	681a      	ldr	r2, [r3, #0]
 800f2dc:	2380      	movs	r3, #128	@ 0x80
 800f2de:	029b      	lsls	r3, r3, #10
 800f2e0:	4013      	ands	r3, r2
 800f2e2:	d02b      	beq.n	800f33c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800f2e4:	4b1b      	ldr	r3, [pc, #108]	@ (800f354 <HAL_ADC_ConfigChannel+0x100>)
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	4b1a      	ldr	r3, [pc, #104]	@ (800f354 <HAL_ADC_ConfigChannel+0x100>)
 800f2ea:	2180      	movs	r1, #128	@ 0x80
 800f2ec:	03c9      	lsls	r1, r1, #15
 800f2ee:	430a      	orrs	r2, r1
 800f2f0:	601a      	str	r2, [r3, #0]
 800f2f2:	e023      	b.n	800f33c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	035b      	lsls	r3, r3, #13
 800f300:	0b5b      	lsrs	r3, r3, #13
 800f302:	43d9      	mvns	r1, r3
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	400a      	ands	r2, r1
 800f30a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	681a      	ldr	r2, [r3, #0]
 800f310:	2380      	movs	r3, #128	@ 0x80
 800f312:	02db      	lsls	r3, r3, #11
 800f314:	4013      	ands	r3, r2
 800f316:	d005      	beq.n	800f324 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800f318:	4b0e      	ldr	r3, [pc, #56]	@ (800f354 <HAL_ADC_ConfigChannel+0x100>)
 800f31a:	681a      	ldr	r2, [r3, #0]
 800f31c:	4b0d      	ldr	r3, [pc, #52]	@ (800f354 <HAL_ADC_ConfigChannel+0x100>)
 800f31e:	490e      	ldr	r1, [pc, #56]	@ (800f358 <HAL_ADC_ConfigChannel+0x104>)
 800f320:	400a      	ands	r2, r1
 800f322:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	2380      	movs	r3, #128	@ 0x80
 800f32a:	029b      	lsls	r3, r3, #10
 800f32c:	4013      	ands	r3, r2
 800f32e:	d005      	beq.n	800f33c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800f330:	4b08      	ldr	r3, [pc, #32]	@ (800f354 <HAL_ADC_ConfigChannel+0x100>)
 800f332:	681a      	ldr	r2, [r3, #0]
 800f334:	4b07      	ldr	r3, [pc, #28]	@ (800f354 <HAL_ADC_ConfigChannel+0x100>)
 800f336:	4909      	ldr	r1, [pc, #36]	@ (800f35c <HAL_ADC_ConfigChannel+0x108>)
 800f338:	400a      	ands	r2, r1
 800f33a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2250      	movs	r2, #80	@ 0x50
 800f340:	2100      	movs	r1, #0
 800f342:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800f344:	2300      	movs	r3, #0
}
 800f346:	0018      	movs	r0, r3
 800f348:	46bd      	mov	sp, r7
 800f34a:	b002      	add	sp, #8
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	46c0      	nop			@ (mov r8, r8)
 800f350:	00001001 	.word	0x00001001
 800f354:	40012708 	.word	0x40012708
 800f358:	ff7fffff 	.word	0xff7fffff
 800f35c:	ffbfffff 	.word	0xffbfffff

0800f360 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b084      	sub	sp, #16
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f368:	2300      	movs	r3, #0
 800f36a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	689b      	ldr	r3, [r3, #8]
 800f372:	2203      	movs	r2, #3
 800f374:	4013      	ands	r3, r2
 800f376:	2b01      	cmp	r3, #1
 800f378:	d108      	bne.n	800f38c <ADC_Enable+0x2c>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	2201      	movs	r2, #1
 800f382:	4013      	ands	r3, r2
 800f384:	2b01      	cmp	r3, #1
 800f386:	d101      	bne.n	800f38c <ADC_Enable+0x2c>
 800f388:	2301      	movs	r3, #1
 800f38a:	e000      	b.n	800f38e <ADC_Enable+0x2e>
 800f38c:	2300      	movs	r3, #0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d146      	bne.n	800f420 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	689b      	ldr	r3, [r3, #8]
 800f398:	4a24      	ldr	r2, [pc, #144]	@ (800f42c <ADC_Enable+0xcc>)
 800f39a:	4013      	ands	r3, r2
 800f39c:	d00d      	beq.n	800f3ba <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3a2:	2210      	movs	r2, #16
 800f3a4:	431a      	orrs	r2, r3
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	431a      	orrs	r2, r3
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	e033      	b.n	800f422 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	689a      	ldr	r2, [r3, #8]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	2101      	movs	r1, #1
 800f3c6:	430a      	orrs	r2, r1
 800f3c8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800f3ca:	2001      	movs	r0, #1
 800f3cc:	f000 f830 	bl	800f430 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800f3d0:	f7ff fc68 	bl	800eca4 <HAL_GetTick>
 800f3d4:	0003      	movs	r3, r0
 800f3d6:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f3d8:	e01b      	b.n	800f412 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f3da:	f7ff fc63 	bl	800eca4 <HAL_GetTick>
 800f3de:	0002      	movs	r2, r0
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	1ad3      	subs	r3, r2, r3
 800f3e4:	2b0a      	cmp	r3, #10
 800f3e6:	d914      	bls.n	800f412 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	4013      	ands	r3, r2
 800f3f2:	2b01      	cmp	r3, #1
 800f3f4:	d00d      	beq.n	800f412 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3fa:	2210      	movs	r2, #16
 800f3fc:	431a      	orrs	r2, r3
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f406:	2201      	movs	r2, #1
 800f408:	431a      	orrs	r2, r3
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800f40e:	2301      	movs	r3, #1
 800f410:	e007      	b.n	800f422 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	2201      	movs	r2, #1
 800f41a:	4013      	ands	r3, r2
 800f41c:	2b01      	cmp	r3, #1
 800f41e:	d1dc      	bne.n	800f3da <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800f420:	2300      	movs	r3, #0
}
 800f422:	0018      	movs	r0, r3
 800f424:	46bd      	mov	sp, r7
 800f426:	b004      	add	sp, #16
 800f428:	bd80      	pop	{r7, pc}
 800f42a:	46c0      	nop			@ (mov r8, r8)
 800f42c:	80000017 	.word	0x80000017

0800f430 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b084      	sub	sp, #16
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800f438:	4b0b      	ldr	r3, [pc, #44]	@ (800f468 <ADC_DelayMicroSecond+0x38>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	490b      	ldr	r1, [pc, #44]	@ (800f46c <ADC_DelayMicroSecond+0x3c>)
 800f43e:	0018      	movs	r0, r3
 800f440:	f7f0 feb0 	bl	80001a4 <__udivsi3>
 800f444:	0003      	movs	r3, r0
 800f446:	001a      	movs	r2, r3
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	4353      	muls	r3, r2
 800f44c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800f44e:	e002      	b.n	800f456 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	3b01      	subs	r3, #1
 800f454:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d1f9      	bne.n	800f450 <ADC_DelayMicroSecond+0x20>
  }
}
 800f45c:	46c0      	nop			@ (mov r8, r8)
 800f45e:	46c0      	nop			@ (mov r8, r8)
 800f460:	46bd      	mov	sp, r7
 800f462:	b004      	add	sp, #16
 800f464:	bd80      	pop	{r7, pc}
 800f466:	46c0      	nop			@ (mov r8, r8)
 800f468:	200000cc 	.word	0x200000cc
 800f46c:	000f4240 	.word	0x000f4240

0800f470 <__NVIC_EnableIRQ>:
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
 800f476:	0002      	movs	r2, r0
 800f478:	1dfb      	adds	r3, r7, #7
 800f47a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f47c:	1dfb      	adds	r3, r7, #7
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	2b7f      	cmp	r3, #127	@ 0x7f
 800f482:	d809      	bhi.n	800f498 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f484:	1dfb      	adds	r3, r7, #7
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	001a      	movs	r2, r3
 800f48a:	231f      	movs	r3, #31
 800f48c:	401a      	ands	r2, r3
 800f48e:	4b04      	ldr	r3, [pc, #16]	@ (800f4a0 <__NVIC_EnableIRQ+0x30>)
 800f490:	2101      	movs	r1, #1
 800f492:	4091      	lsls	r1, r2
 800f494:	000a      	movs	r2, r1
 800f496:	601a      	str	r2, [r3, #0]
}
 800f498:	46c0      	nop			@ (mov r8, r8)
 800f49a:	46bd      	mov	sp, r7
 800f49c:	b002      	add	sp, #8
 800f49e:	bd80      	pop	{r7, pc}
 800f4a0:	e000e100 	.word	0xe000e100

0800f4a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f4a4:	b590      	push	{r4, r7, lr}
 800f4a6:	b083      	sub	sp, #12
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	0002      	movs	r2, r0
 800f4ac:	6039      	str	r1, [r7, #0]
 800f4ae:	1dfb      	adds	r3, r7, #7
 800f4b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800f4b2:	1dfb      	adds	r3, r7, #7
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	2b7f      	cmp	r3, #127	@ 0x7f
 800f4b8:	d828      	bhi.n	800f50c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f4ba:	4a2f      	ldr	r2, [pc, #188]	@ (800f578 <__NVIC_SetPriority+0xd4>)
 800f4bc:	1dfb      	adds	r3, r7, #7
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	b25b      	sxtb	r3, r3
 800f4c2:	089b      	lsrs	r3, r3, #2
 800f4c4:	33c0      	adds	r3, #192	@ 0xc0
 800f4c6:	009b      	lsls	r3, r3, #2
 800f4c8:	589b      	ldr	r3, [r3, r2]
 800f4ca:	1dfa      	adds	r2, r7, #7
 800f4cc:	7812      	ldrb	r2, [r2, #0]
 800f4ce:	0011      	movs	r1, r2
 800f4d0:	2203      	movs	r2, #3
 800f4d2:	400a      	ands	r2, r1
 800f4d4:	00d2      	lsls	r2, r2, #3
 800f4d6:	21ff      	movs	r1, #255	@ 0xff
 800f4d8:	4091      	lsls	r1, r2
 800f4da:	000a      	movs	r2, r1
 800f4dc:	43d2      	mvns	r2, r2
 800f4de:	401a      	ands	r2, r3
 800f4e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	019b      	lsls	r3, r3, #6
 800f4e6:	22ff      	movs	r2, #255	@ 0xff
 800f4e8:	401a      	ands	r2, r3
 800f4ea:	1dfb      	adds	r3, r7, #7
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	0018      	movs	r0, r3
 800f4f0:	2303      	movs	r3, #3
 800f4f2:	4003      	ands	r3, r0
 800f4f4:	00db      	lsls	r3, r3, #3
 800f4f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f4f8:	481f      	ldr	r0, [pc, #124]	@ (800f578 <__NVIC_SetPriority+0xd4>)
 800f4fa:	1dfb      	adds	r3, r7, #7
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	b25b      	sxtb	r3, r3
 800f500:	089b      	lsrs	r3, r3, #2
 800f502:	430a      	orrs	r2, r1
 800f504:	33c0      	adds	r3, #192	@ 0xc0
 800f506:	009b      	lsls	r3, r3, #2
 800f508:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800f50a:	e031      	b.n	800f570 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f50c:	4a1b      	ldr	r2, [pc, #108]	@ (800f57c <__NVIC_SetPriority+0xd8>)
 800f50e:	1dfb      	adds	r3, r7, #7
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	0019      	movs	r1, r3
 800f514:	230f      	movs	r3, #15
 800f516:	400b      	ands	r3, r1
 800f518:	3b08      	subs	r3, #8
 800f51a:	089b      	lsrs	r3, r3, #2
 800f51c:	3306      	adds	r3, #6
 800f51e:	009b      	lsls	r3, r3, #2
 800f520:	18d3      	adds	r3, r2, r3
 800f522:	3304      	adds	r3, #4
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	1dfa      	adds	r2, r7, #7
 800f528:	7812      	ldrb	r2, [r2, #0]
 800f52a:	0011      	movs	r1, r2
 800f52c:	2203      	movs	r2, #3
 800f52e:	400a      	ands	r2, r1
 800f530:	00d2      	lsls	r2, r2, #3
 800f532:	21ff      	movs	r1, #255	@ 0xff
 800f534:	4091      	lsls	r1, r2
 800f536:	000a      	movs	r2, r1
 800f538:	43d2      	mvns	r2, r2
 800f53a:	401a      	ands	r2, r3
 800f53c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	019b      	lsls	r3, r3, #6
 800f542:	22ff      	movs	r2, #255	@ 0xff
 800f544:	401a      	ands	r2, r3
 800f546:	1dfb      	adds	r3, r7, #7
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	0018      	movs	r0, r3
 800f54c:	2303      	movs	r3, #3
 800f54e:	4003      	ands	r3, r0
 800f550:	00db      	lsls	r3, r3, #3
 800f552:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800f554:	4809      	ldr	r0, [pc, #36]	@ (800f57c <__NVIC_SetPriority+0xd8>)
 800f556:	1dfb      	adds	r3, r7, #7
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	001c      	movs	r4, r3
 800f55c:	230f      	movs	r3, #15
 800f55e:	4023      	ands	r3, r4
 800f560:	3b08      	subs	r3, #8
 800f562:	089b      	lsrs	r3, r3, #2
 800f564:	430a      	orrs	r2, r1
 800f566:	3306      	adds	r3, #6
 800f568:	009b      	lsls	r3, r3, #2
 800f56a:	18c3      	adds	r3, r0, r3
 800f56c:	3304      	adds	r3, #4
 800f56e:	601a      	str	r2, [r3, #0]
}
 800f570:	46c0      	nop			@ (mov r8, r8)
 800f572:	46bd      	mov	sp, r7
 800f574:	b003      	add	sp, #12
 800f576:	bd90      	pop	{r4, r7, pc}
 800f578:	e000e100 	.word	0xe000e100
 800f57c:	e000ed00 	.word	0xe000ed00

0800f580 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800f584:	f3bf 8f4f 	dsb	sy
}
 800f588:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f58a:	4b04      	ldr	r3, [pc, #16]	@ (800f59c <__NVIC_SystemReset+0x1c>)
 800f58c:	4a04      	ldr	r2, [pc, #16]	@ (800f5a0 <__NVIC_SystemReset+0x20>)
 800f58e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f590:	f3bf 8f4f 	dsb	sy
}
 800f594:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800f596:	46c0      	nop			@ (mov r8, r8)
 800f598:	e7fd      	b.n	800f596 <__NVIC_SystemReset+0x16>
 800f59a:	46c0      	nop			@ (mov r8, r8)
 800f59c:	e000ed00 	.word	0xe000ed00
 800f5a0:	05fa0004 	.word	0x05fa0004

0800f5a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b082      	sub	sp, #8
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	1e5a      	subs	r2, r3, #1
 800f5b0:	2380      	movs	r3, #128	@ 0x80
 800f5b2:	045b      	lsls	r3, r3, #17
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d301      	bcc.n	800f5bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	e010      	b.n	800f5de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f5bc:	4b0a      	ldr	r3, [pc, #40]	@ (800f5e8 <SysTick_Config+0x44>)
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	3a01      	subs	r2, #1
 800f5c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	425b      	negs	r3, r3
 800f5c8:	2103      	movs	r1, #3
 800f5ca:	0018      	movs	r0, r3
 800f5cc:	f7ff ff6a 	bl	800f4a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f5d0:	4b05      	ldr	r3, [pc, #20]	@ (800f5e8 <SysTick_Config+0x44>)
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f5d6:	4b04      	ldr	r3, [pc, #16]	@ (800f5e8 <SysTick_Config+0x44>)
 800f5d8:	2207      	movs	r2, #7
 800f5da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f5dc:	2300      	movs	r3, #0
}
 800f5de:	0018      	movs	r0, r3
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	b002      	add	sp, #8
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	46c0      	nop			@ (mov r8, r8)
 800f5e8:	e000e010 	.word	0xe000e010

0800f5ec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	60b9      	str	r1, [r7, #8]
 800f5f4:	607a      	str	r2, [r7, #4]
 800f5f6:	210f      	movs	r1, #15
 800f5f8:	187b      	adds	r3, r7, r1
 800f5fa:	1c02      	adds	r2, r0, #0
 800f5fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800f5fe:	68ba      	ldr	r2, [r7, #8]
 800f600:	187b      	adds	r3, r7, r1
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	b25b      	sxtb	r3, r3
 800f606:	0011      	movs	r1, r2
 800f608:	0018      	movs	r0, r3
 800f60a:	f7ff ff4b 	bl	800f4a4 <__NVIC_SetPriority>
}
 800f60e:	46c0      	nop			@ (mov r8, r8)
 800f610:	46bd      	mov	sp, r7
 800f612:	b004      	add	sp, #16
 800f614:	bd80      	pop	{r7, pc}

0800f616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f616:	b580      	push	{r7, lr}
 800f618:	b082      	sub	sp, #8
 800f61a:	af00      	add	r7, sp, #0
 800f61c:	0002      	movs	r2, r0
 800f61e:	1dfb      	adds	r3, r7, #7
 800f620:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f622:	1dfb      	adds	r3, r7, #7
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	b25b      	sxtb	r3, r3
 800f628:	0018      	movs	r0, r3
 800f62a:	f7ff ff21 	bl	800f470 <__NVIC_EnableIRQ>
}
 800f62e:	46c0      	nop			@ (mov r8, r8)
 800f630:	46bd      	mov	sp, r7
 800f632:	b002      	add	sp, #8
 800f634:	bd80      	pop	{r7, pc}

0800f636 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800f636:	b580      	push	{r7, lr}
 800f638:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800f63a:	f7ff ffa1 	bl	800f580 <__NVIC_SystemReset>

0800f63e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f63e:	b580      	push	{r7, lr}
 800f640:	b082      	sub	sp, #8
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	0018      	movs	r0, r3
 800f64a:	f7ff ffab 	bl	800f5a4 <SysTick_Config>
 800f64e:	0003      	movs	r3, r0
}
 800f650:	0018      	movs	r0, r3
 800f652:	46bd      	mov	sp, r7
 800f654:	b002      	add	sp, #8
 800f656:	bd80      	pop	{r7, pc}

0800f658 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b084      	sub	sp, #16
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d101      	bne.n	800f66a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800f666:	2301      	movs	r3, #1
 800f668:	e061      	b.n	800f72e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	4a32      	ldr	r2, [pc, #200]	@ (800f738 <HAL_DMA_Init+0xe0>)
 800f670:	4694      	mov	ip, r2
 800f672:	4463      	add	r3, ip
 800f674:	2114      	movs	r1, #20
 800f676:	0018      	movs	r0, r3
 800f678:	f7f0 fd94 	bl	80001a4 <__udivsi3>
 800f67c:	0003      	movs	r3, r0
 800f67e:	009a      	lsls	r2, r3, #2
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	4a2d      	ldr	r2, [pc, #180]	@ (800f73c <HAL_DMA_Init+0xe4>)
 800f688:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2225      	movs	r2, #37	@ 0x25
 800f68e:	2102      	movs	r1, #2
 800f690:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	4a28      	ldr	r2, [pc, #160]	@ (800f740 <HAL_DMA_Init+0xe8>)
 800f69e:	4013      	ands	r3, r2
 800f6a0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800f6aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	691b      	ldr	r3, [r3, #16]
 800f6b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f6b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	699b      	ldr	r3, [r3, #24]
 800f6bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f6c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6a1b      	ldr	r3, [r3, #32]
 800f6c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800f6ca:	68fa      	ldr	r2, [r7, #12]
 800f6cc:	4313      	orrs	r3, r2
 800f6ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	68fa      	ldr	r2, [r7, #12]
 800f6d6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	689a      	ldr	r2, [r3, #8]
 800f6dc:	2380      	movs	r3, #128	@ 0x80
 800f6de:	01db      	lsls	r3, r3, #7
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d018      	beq.n	800f716 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800f6e4:	4b17      	ldr	r3, [pc, #92]	@ (800f744 <HAL_DMA_Init+0xec>)
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f6ec:	211c      	movs	r1, #28
 800f6ee:	400b      	ands	r3, r1
 800f6f0:	210f      	movs	r1, #15
 800f6f2:	4099      	lsls	r1, r3
 800f6f4:	000b      	movs	r3, r1
 800f6f6:	43d9      	mvns	r1, r3
 800f6f8:	4b12      	ldr	r3, [pc, #72]	@ (800f744 <HAL_DMA_Init+0xec>)
 800f6fa:	400a      	ands	r2, r1
 800f6fc:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800f6fe:	4b11      	ldr	r3, [pc, #68]	@ (800f744 <HAL_DMA_Init+0xec>)
 800f700:	6819      	ldr	r1, [r3, #0]
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	685a      	ldr	r2, [r3, #4]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f70a:	201c      	movs	r0, #28
 800f70c:	4003      	ands	r3, r0
 800f70e:	409a      	lsls	r2, r3
 800f710:	4b0c      	ldr	r3, [pc, #48]	@ (800f744 <HAL_DMA_Init+0xec>)
 800f712:	430a      	orrs	r2, r1
 800f714:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2200      	movs	r2, #0
 800f71a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2225      	movs	r2, #37	@ 0x25
 800f720:	2101      	movs	r1, #1
 800f722:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2224      	movs	r2, #36	@ 0x24
 800f728:	2100      	movs	r1, #0
 800f72a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f72c:	2300      	movs	r3, #0
}
 800f72e:	0018      	movs	r0, r3
 800f730:	46bd      	mov	sp, r7
 800f732:	b004      	add	sp, #16
 800f734:	bd80      	pop	{r7, pc}
 800f736:	46c0      	nop			@ (mov r8, r8)
 800f738:	bffdfff8 	.word	0xbffdfff8
 800f73c:	40020000 	.word	0x40020000
 800f740:	ffff800f 	.word	0xffff800f
 800f744:	400200a8 	.word	0x400200a8

0800f748 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b086      	sub	sp, #24
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	60b9      	str	r1, [r7, #8]
 800f752:	607a      	str	r2, [r7, #4]
 800f754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f756:	2317      	movs	r3, #23
 800f758:	18fb      	adds	r3, r7, r3
 800f75a:	2200      	movs	r2, #0
 800f75c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	2224      	movs	r2, #36	@ 0x24
 800f762:	5c9b      	ldrb	r3, [r3, r2]
 800f764:	2b01      	cmp	r3, #1
 800f766:	d101      	bne.n	800f76c <HAL_DMA_Start_IT+0x24>
 800f768:	2302      	movs	r3, #2
 800f76a:	e04f      	b.n	800f80c <HAL_DMA_Start_IT+0xc4>
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2224      	movs	r2, #36	@ 0x24
 800f770:	2101      	movs	r1, #1
 800f772:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2225      	movs	r2, #37	@ 0x25
 800f778:	5c9b      	ldrb	r3, [r3, r2]
 800f77a:	b2db      	uxtb	r3, r3
 800f77c:	2b01      	cmp	r3, #1
 800f77e:	d13a      	bne.n	800f7f6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	2225      	movs	r2, #37	@ 0x25
 800f784:	2102      	movs	r1, #2
 800f786:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2200      	movs	r2, #0
 800f78c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	681a      	ldr	r2, [r3, #0]
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	2101      	movs	r1, #1
 800f79a:	438a      	bics	r2, r1
 800f79c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	68b9      	ldr	r1, [r7, #8]
 800f7a4:	68f8      	ldr	r0, [r7, #12]
 800f7a6:	f000 f976 	bl	800fa96 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d008      	beq.n	800f7c4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	210e      	movs	r1, #14
 800f7be:	430a      	orrs	r2, r1
 800f7c0:	601a      	str	r2, [r3, #0]
 800f7c2:	e00f      	b.n	800f7e4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	681a      	ldr	r2, [r3, #0]
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	2104      	movs	r1, #4
 800f7d0:	438a      	bics	r2, r1
 800f7d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	210a      	movs	r1, #10
 800f7e0:	430a      	orrs	r2, r1
 800f7e2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	681a      	ldr	r2, [r3, #0]
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2101      	movs	r1, #1
 800f7f0:	430a      	orrs	r2, r1
 800f7f2:	601a      	str	r2, [r3, #0]
 800f7f4:	e007      	b.n	800f806 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2224      	movs	r2, #36	@ 0x24
 800f7fa:	2100      	movs	r1, #0
 800f7fc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800f7fe:	2317      	movs	r3, #23
 800f800:	18fb      	adds	r3, r7, r3
 800f802:	2202      	movs	r2, #2
 800f804:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800f806:	2317      	movs	r3, #23
 800f808:	18fb      	adds	r3, r7, r3
 800f80a:	781b      	ldrb	r3, [r3, #0]
}
 800f80c:	0018      	movs	r0, r3
 800f80e:	46bd      	mov	sp, r7
 800f810:	b006      	add	sp, #24
 800f812:	bd80      	pop	{r7, pc}

0800f814 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b084      	sub	sp, #16
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f81c:	230f      	movs	r3, #15
 800f81e:	18fb      	adds	r3, r7, r3
 800f820:	2200      	movs	r2, #0
 800f822:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2225      	movs	r2, #37	@ 0x25
 800f828:	5c9b      	ldrb	r3, [r3, r2]
 800f82a:	b2db      	uxtb	r3, r3
 800f82c:	2b02      	cmp	r3, #2
 800f82e:	d008      	beq.n	800f842 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2204      	movs	r2, #4
 800f834:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2224      	movs	r2, #36	@ 0x24
 800f83a:	2100      	movs	r1, #0
 800f83c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800f83e:	2301      	movs	r3, #1
 800f840:	e024      	b.n	800f88c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	681a      	ldr	r2, [r3, #0]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	210e      	movs	r1, #14
 800f84e:	438a      	bics	r2, r1
 800f850:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	2101      	movs	r1, #1
 800f85e:	438a      	bics	r2, r1
 800f860:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f866:	221c      	movs	r2, #28
 800f868:	401a      	ands	r2, r3
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f86e:	2101      	movs	r1, #1
 800f870:	4091      	lsls	r1, r2
 800f872:	000a      	movs	r2, r1
 800f874:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2225      	movs	r2, #37	@ 0x25
 800f87a:	2101      	movs	r1, #1
 800f87c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2224      	movs	r2, #36	@ 0x24
 800f882:	2100      	movs	r1, #0
 800f884:	5499      	strb	r1, [r3, r2]

    return status;
 800f886:	230f      	movs	r3, #15
 800f888:	18fb      	adds	r3, r7, r3
 800f88a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f88c:	0018      	movs	r0, r3
 800f88e:	46bd      	mov	sp, r7
 800f890:	b004      	add	sp, #16
 800f892:	bd80      	pop	{r7, pc}

0800f894 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f89c:	210f      	movs	r1, #15
 800f89e:	187b      	adds	r3, r7, r1
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2225      	movs	r2, #37	@ 0x25
 800f8a8:	5c9b      	ldrb	r3, [r3, r2]
 800f8aa:	b2db      	uxtb	r3, r3
 800f8ac:	2b02      	cmp	r3, #2
 800f8ae:	d006      	beq.n	800f8be <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2204      	movs	r2, #4
 800f8b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800f8b6:	187b      	adds	r3, r7, r1
 800f8b8:	2201      	movs	r2, #1
 800f8ba:	701a      	strb	r2, [r3, #0]
 800f8bc:	e02a      	b.n	800f914 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	681a      	ldr	r2, [r3, #0]
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	210e      	movs	r1, #14
 800f8ca:	438a      	bics	r2, r1
 800f8cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	2101      	movs	r1, #1
 800f8da:	438a      	bics	r2, r1
 800f8dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f8e2:	221c      	movs	r2, #28
 800f8e4:	401a      	ands	r2, r3
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f8ea:	2101      	movs	r1, #1
 800f8ec:	4091      	lsls	r1, r2
 800f8ee:	000a      	movs	r2, r1
 800f8f0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2225      	movs	r2, #37	@ 0x25
 800f8f6:	2101      	movs	r1, #1
 800f8f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2224      	movs	r2, #36	@ 0x24
 800f8fe:	2100      	movs	r1, #0
 800f900:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f906:	2b00      	cmp	r3, #0
 800f908:	d004      	beq.n	800f914 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f90e:	687a      	ldr	r2, [r7, #4]
 800f910:	0010      	movs	r0, r2
 800f912:	4798      	blx	r3
    }
  }
  return status;
 800f914:	230f      	movs	r3, #15
 800f916:	18fb      	adds	r3, r7, r3
 800f918:	781b      	ldrb	r3, [r3, #0]
}
 800f91a:	0018      	movs	r0, r3
 800f91c:	46bd      	mov	sp, r7
 800f91e:	b004      	add	sp, #16
 800f920:	bd80      	pop	{r7, pc}

0800f922 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800f922:	b580      	push	{r7, lr}
 800f924:	b084      	sub	sp, #16
 800f926:	af00      	add	r7, sp, #0
 800f928:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f93e:	221c      	movs	r2, #28
 800f940:	4013      	ands	r3, r2
 800f942:	2204      	movs	r2, #4
 800f944:	409a      	lsls	r2, r3
 800f946:	0013      	movs	r3, r2
 800f948:	68fa      	ldr	r2, [r7, #12]
 800f94a:	4013      	ands	r3, r2
 800f94c:	d026      	beq.n	800f99c <HAL_DMA_IRQHandler+0x7a>
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	2204      	movs	r2, #4
 800f952:	4013      	ands	r3, r2
 800f954:	d022      	beq.n	800f99c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	2220      	movs	r2, #32
 800f95e:	4013      	ands	r3, r2
 800f960:	d107      	bne.n	800f972 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	681a      	ldr	r2, [r3, #0]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	2104      	movs	r1, #4
 800f96e:	438a      	bics	r2, r1
 800f970:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f976:	221c      	movs	r2, #28
 800f978:	401a      	ands	r2, r3
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f97e:	2104      	movs	r1, #4
 800f980:	4091      	lsls	r1, r2
 800f982:	000a      	movs	r2, r1
 800f984:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d100      	bne.n	800f990 <HAL_DMA_IRQHandler+0x6e>
 800f98e:	e071      	b.n	800fa74 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	0010      	movs	r0, r2
 800f998:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800f99a:	e06b      	b.n	800fa74 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9a0:	221c      	movs	r2, #28
 800f9a2:	4013      	ands	r3, r2
 800f9a4:	2202      	movs	r2, #2
 800f9a6:	409a      	lsls	r2, r3
 800f9a8:	0013      	movs	r3, r2
 800f9aa:	68fa      	ldr	r2, [r7, #12]
 800f9ac:	4013      	ands	r3, r2
 800f9ae:	d02d      	beq.n	800fa0c <HAL_DMA_IRQHandler+0xea>
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	2202      	movs	r2, #2
 800f9b4:	4013      	ands	r3, r2
 800f9b6:	d029      	beq.n	800fa0c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	2220      	movs	r2, #32
 800f9c0:	4013      	ands	r3, r2
 800f9c2:	d10b      	bne.n	800f9dc <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	681a      	ldr	r2, [r3, #0]
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	210a      	movs	r1, #10
 800f9d0:	438a      	bics	r2, r1
 800f9d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2225      	movs	r2, #37	@ 0x25
 800f9d8:	2101      	movs	r1, #1
 800f9da:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9e0:	221c      	movs	r2, #28
 800f9e2:	401a      	ands	r2, r3
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9e8:	2102      	movs	r1, #2
 800f9ea:	4091      	lsls	r1, r2
 800f9ec:	000a      	movs	r2, r1
 800f9ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2224      	movs	r2, #36	@ 0x24
 800f9f4:	2100      	movs	r1, #0
 800f9f6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d039      	beq.n	800fa74 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa04:	687a      	ldr	r2, [r7, #4]
 800fa06:	0010      	movs	r0, r2
 800fa08:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800fa0a:	e033      	b.n	800fa74 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa10:	221c      	movs	r2, #28
 800fa12:	4013      	ands	r3, r2
 800fa14:	2208      	movs	r2, #8
 800fa16:	409a      	lsls	r2, r3
 800fa18:	0013      	movs	r3, r2
 800fa1a:	68fa      	ldr	r2, [r7, #12]
 800fa1c:	4013      	ands	r3, r2
 800fa1e:	d02a      	beq.n	800fa76 <HAL_DMA_IRQHandler+0x154>
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	2208      	movs	r2, #8
 800fa24:	4013      	ands	r3, r2
 800fa26:	d026      	beq.n	800fa76 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	681a      	ldr	r2, [r3, #0]
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	210e      	movs	r1, #14
 800fa34:	438a      	bics	r2, r1
 800fa36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa3c:	221c      	movs	r2, #28
 800fa3e:	401a      	ands	r2, r3
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa44:	2101      	movs	r1, #1
 800fa46:	4091      	lsls	r1, r2
 800fa48:	000a      	movs	r2, r1
 800fa4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2201      	movs	r2, #1
 800fa50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2225      	movs	r2, #37	@ 0x25
 800fa56:	2101      	movs	r1, #1
 800fa58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2224      	movs	r2, #36	@ 0x24
 800fa5e:	2100      	movs	r1, #0
 800fa60:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d005      	beq.n	800fa76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa6e:	687a      	ldr	r2, [r7, #4]
 800fa70:	0010      	movs	r0, r2
 800fa72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800fa74:	46c0      	nop			@ (mov r8, r8)
 800fa76:	46c0      	nop			@ (mov r8, r8)
}
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	b004      	add	sp, #16
 800fa7c:	bd80      	pop	{r7, pc}

0800fa7e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800fa7e:	b580      	push	{r7, lr}
 800fa80:	b082      	sub	sp, #8
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2225      	movs	r2, #37	@ 0x25
 800fa8a:	5c9b      	ldrb	r3, [r3, r2]
 800fa8c:	b2db      	uxtb	r3, r3
}
 800fa8e:	0018      	movs	r0, r3
 800fa90:	46bd      	mov	sp, r7
 800fa92:	b002      	add	sp, #8
 800fa94:	bd80      	pop	{r7, pc}

0800fa96 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fa96:	b580      	push	{r7, lr}
 800fa98:	b084      	sub	sp, #16
 800fa9a:	af00      	add	r7, sp, #0
 800fa9c:	60f8      	str	r0, [r7, #12]
 800fa9e:	60b9      	str	r1, [r7, #8]
 800faa0:	607a      	str	r2, [r7, #4]
 800faa2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800faa8:	221c      	movs	r2, #28
 800faaa:	401a      	ands	r2, r3
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fab0:	2101      	movs	r1, #1
 800fab2:	4091      	lsls	r1, r2
 800fab4:	000a      	movs	r2, r1
 800fab6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	683a      	ldr	r2, [r7, #0]
 800fabe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	689b      	ldr	r3, [r3, #8]
 800fac4:	2b10      	cmp	r3, #16
 800fac6:	d108      	bne.n	800fada <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	687a      	ldr	r2, [r7, #4]
 800face:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	68ba      	ldr	r2, [r7, #8]
 800fad6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800fad8:	e007      	b.n	800faea <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	68ba      	ldr	r2, [r7, #8]
 800fae0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	687a      	ldr	r2, [r7, #4]
 800fae8:	60da      	str	r2, [r3, #12]
}
 800faea:	46c0      	nop			@ (mov r8, r8)
 800faec:	46bd      	mov	sp, r7
 800faee:	b004      	add	sp, #16
 800faf0:	bd80      	pop	{r7, pc}
	...

0800faf4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800fafc:	f7ff f8d2 	bl	800eca4 <HAL_GetTick>
 800fb00:	0003      	movs	r3, r0
 800fb02:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fb04:	e00f      	b.n	800fb26 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	d00c      	beq.n	800fb26 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d007      	beq.n	800fb22 <FLASH_WaitForLastOperation+0x2e>
 800fb12:	f7ff f8c7 	bl	800eca4 <HAL_GetTick>
 800fb16:	0002      	movs	r2, r0
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	1ad3      	subs	r3, r2, r3
 800fb1c:	687a      	ldr	r2, [r7, #4]
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d201      	bcs.n	800fb26 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800fb22:	2303      	movs	r3, #3
 800fb24:	e052      	b.n	800fbcc <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800fb26:	4b2b      	ldr	r3, [pc, #172]	@ (800fbd4 <FLASH_WaitForLastOperation+0xe0>)
 800fb28:	699b      	ldr	r3, [r3, #24]
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	4013      	ands	r3, r2
 800fb2e:	2b01      	cmp	r3, #1
 800fb30:	d0e9      	beq.n	800fb06 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800fb32:	4b28      	ldr	r3, [pc, #160]	@ (800fbd4 <FLASH_WaitForLastOperation+0xe0>)
 800fb34:	699b      	ldr	r3, [r3, #24]
 800fb36:	2202      	movs	r2, #2
 800fb38:	4013      	ands	r3, r2
 800fb3a:	2b02      	cmp	r3, #2
 800fb3c:	d102      	bne.n	800fb44 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800fb3e:	4b25      	ldr	r3, [pc, #148]	@ (800fbd4 <FLASH_WaitForLastOperation+0xe0>)
 800fb40:	2202      	movs	r2, #2
 800fb42:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800fb44:	4b23      	ldr	r3, [pc, #140]	@ (800fbd4 <FLASH_WaitForLastOperation+0xe0>)
 800fb46:	699a      	ldr	r2, [r3, #24]
 800fb48:	2380      	movs	r3, #128	@ 0x80
 800fb4a:	005b      	lsls	r3, r3, #1
 800fb4c:	401a      	ands	r2, r3
 800fb4e:	2380      	movs	r3, #128	@ 0x80
 800fb50:	005b      	lsls	r3, r3, #1
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d035      	beq.n	800fbc2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800fb56:	4b1f      	ldr	r3, [pc, #124]	@ (800fbd4 <FLASH_WaitForLastOperation+0xe0>)
 800fb58:	699a      	ldr	r2, [r3, #24]
 800fb5a:	2380      	movs	r3, #128	@ 0x80
 800fb5c:	009b      	lsls	r3, r3, #2
 800fb5e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800fb60:	2380      	movs	r3, #128	@ 0x80
 800fb62:	009b      	lsls	r3, r3, #2
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d02c      	beq.n	800fbc2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800fb68:	4b1a      	ldr	r3, [pc, #104]	@ (800fbd4 <FLASH_WaitForLastOperation+0xe0>)
 800fb6a:	699a      	ldr	r2, [r3, #24]
 800fb6c:	2380      	movs	r3, #128	@ 0x80
 800fb6e:	00db      	lsls	r3, r3, #3
 800fb70:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800fb72:	2380      	movs	r3, #128	@ 0x80
 800fb74:	00db      	lsls	r3, r3, #3
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d023      	beq.n	800fbc2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800fb7a:	4b16      	ldr	r3, [pc, #88]	@ (800fbd4 <FLASH_WaitForLastOperation+0xe0>)
 800fb7c:	699a      	ldr	r2, [r3, #24]
 800fb7e:	2380      	movs	r3, #128	@ 0x80
 800fb80:	011b      	lsls	r3, r3, #4
 800fb82:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800fb84:	2380      	movs	r3, #128	@ 0x80
 800fb86:	011b      	lsls	r3, r3, #4
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	d01a      	beq.n	800fbc2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800fb8c:	4b11      	ldr	r3, [pc, #68]	@ (800fbd4 <FLASH_WaitForLastOperation+0xe0>)
 800fb8e:	699a      	ldr	r2, [r3, #24]
 800fb90:	2380      	movs	r3, #128	@ 0x80
 800fb92:	019b      	lsls	r3, r3, #6
 800fb94:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800fb96:	2380      	movs	r3, #128	@ 0x80
 800fb98:	019b      	lsls	r3, r3, #6
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d011      	beq.n	800fbc2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800fb9e:	4b0d      	ldr	r3, [pc, #52]	@ (800fbd4 <FLASH_WaitForLastOperation+0xe0>)
 800fba0:	699a      	ldr	r2, [r3, #24]
 800fba2:	2380      	movs	r3, #128	@ 0x80
 800fba4:	029b      	lsls	r3, r3, #10
 800fba6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800fba8:	2380      	movs	r3, #128	@ 0x80
 800fbaa:	029b      	lsls	r3, r3, #10
 800fbac:	429a      	cmp	r2, r3
 800fbae:	d008      	beq.n	800fbc2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800fbb0:	4b08      	ldr	r3, [pc, #32]	@ (800fbd4 <FLASH_WaitForLastOperation+0xe0>)
 800fbb2:	699a      	ldr	r2, [r3, #24]
 800fbb4:	2380      	movs	r3, #128	@ 0x80
 800fbb6:	025b      	lsls	r3, r3, #9
 800fbb8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800fbba:	2380      	movs	r3, #128	@ 0x80
 800fbbc:	025b      	lsls	r3, r3, #9
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d103      	bne.n	800fbca <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800fbc2:	f000 f809 	bl	800fbd8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	e000      	b.n	800fbcc <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800fbca:	2300      	movs	r3, #0
}
 800fbcc:	0018      	movs	r0, r3
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	b004      	add	sp, #16
 800fbd2:	bd80      	pop	{r7, pc}
 800fbd4:	40022000 	.word	0x40022000

0800fbd8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800fbe2:	4b49      	ldr	r3, [pc, #292]	@ (800fd08 <FLASH_SetErrorCode+0x130>)
 800fbe4:	699a      	ldr	r2, [r3, #24]
 800fbe6:	2380      	movs	r3, #128	@ 0x80
 800fbe8:	005b      	lsls	r3, r3, #1
 800fbea:	401a      	ands	r2, r3
 800fbec:	2380      	movs	r3, #128	@ 0x80
 800fbee:	005b      	lsls	r3, r3, #1
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d10a      	bne.n	800fc0a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800fbf4:	4b45      	ldr	r3, [pc, #276]	@ (800fd0c <FLASH_SetErrorCode+0x134>)
 800fbf6:	695b      	ldr	r3, [r3, #20]
 800fbf8:	2202      	movs	r2, #2
 800fbfa:	431a      	orrs	r2, r3
 800fbfc:	4b43      	ldr	r3, [pc, #268]	@ (800fd0c <FLASH_SetErrorCode+0x134>)
 800fbfe:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2280      	movs	r2, #128	@ 0x80
 800fc04:	0052      	lsls	r2, r2, #1
 800fc06:	4313      	orrs	r3, r2
 800fc08:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800fc0a:	4b3f      	ldr	r3, [pc, #252]	@ (800fd08 <FLASH_SetErrorCode+0x130>)
 800fc0c:	699a      	ldr	r2, [r3, #24]
 800fc0e:	2380      	movs	r3, #128	@ 0x80
 800fc10:	009b      	lsls	r3, r3, #2
 800fc12:	401a      	ands	r2, r3
 800fc14:	2380      	movs	r3, #128	@ 0x80
 800fc16:	009b      	lsls	r3, r3, #2
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d10a      	bne.n	800fc32 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800fc1c:	4b3b      	ldr	r3, [pc, #236]	@ (800fd0c <FLASH_SetErrorCode+0x134>)
 800fc1e:	695b      	ldr	r3, [r3, #20]
 800fc20:	2201      	movs	r2, #1
 800fc22:	431a      	orrs	r2, r3
 800fc24:	4b39      	ldr	r3, [pc, #228]	@ (800fd0c <FLASH_SetErrorCode+0x134>)
 800fc26:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2280      	movs	r2, #128	@ 0x80
 800fc2c:	0092      	lsls	r2, r2, #2
 800fc2e:	4313      	orrs	r3, r2
 800fc30:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800fc32:	4b35      	ldr	r3, [pc, #212]	@ (800fd08 <FLASH_SetErrorCode+0x130>)
 800fc34:	699a      	ldr	r2, [r3, #24]
 800fc36:	2380      	movs	r3, #128	@ 0x80
 800fc38:	00db      	lsls	r3, r3, #3
 800fc3a:	401a      	ands	r2, r3
 800fc3c:	2380      	movs	r3, #128	@ 0x80
 800fc3e:	00db      	lsls	r3, r3, #3
 800fc40:	429a      	cmp	r2, r3
 800fc42:	d10a      	bne.n	800fc5a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800fc44:	4b31      	ldr	r3, [pc, #196]	@ (800fd0c <FLASH_SetErrorCode+0x134>)
 800fc46:	695b      	ldr	r3, [r3, #20]
 800fc48:	2208      	movs	r2, #8
 800fc4a:	431a      	orrs	r2, r3
 800fc4c:	4b2f      	ldr	r3, [pc, #188]	@ (800fd0c <FLASH_SetErrorCode+0x134>)
 800fc4e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2280      	movs	r2, #128	@ 0x80
 800fc54:	00d2      	lsls	r2, r2, #3
 800fc56:	4313      	orrs	r3, r2
 800fc58:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800fc5a:	4b2b      	ldr	r3, [pc, #172]	@ (800fd08 <FLASH_SetErrorCode+0x130>)
 800fc5c:	699a      	ldr	r2, [r3, #24]
 800fc5e:	2380      	movs	r3, #128	@ 0x80
 800fc60:	011b      	lsls	r3, r3, #4
 800fc62:	401a      	ands	r2, r3
 800fc64:	2380      	movs	r3, #128	@ 0x80
 800fc66:	011b      	lsls	r3, r3, #4
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d10a      	bne.n	800fc82 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800fc6c:	4b27      	ldr	r3, [pc, #156]	@ (800fd0c <FLASH_SetErrorCode+0x134>)
 800fc6e:	695b      	ldr	r3, [r3, #20]
 800fc70:	2204      	movs	r2, #4
 800fc72:	431a      	orrs	r2, r3
 800fc74:	4b25      	ldr	r3, [pc, #148]	@ (800fd0c <FLASH_SetErrorCode+0x134>)
 800fc76:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2280      	movs	r2, #128	@ 0x80
 800fc7c:	0112      	lsls	r2, r2, #4
 800fc7e:	4313      	orrs	r3, r2
 800fc80:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800fc82:	4b21      	ldr	r3, [pc, #132]	@ (800fd08 <FLASH_SetErrorCode+0x130>)
 800fc84:	699a      	ldr	r2, [r3, #24]
 800fc86:	2380      	movs	r3, #128	@ 0x80
 800fc88:	019b      	lsls	r3, r3, #6
 800fc8a:	401a      	ands	r2, r3
 800fc8c:	2380      	movs	r3, #128	@ 0x80
 800fc8e:	019b      	lsls	r3, r3, #6
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d10a      	bne.n	800fcaa <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800fc94:	4b1d      	ldr	r3, [pc, #116]	@ (800fd0c <FLASH_SetErrorCode+0x134>)
 800fc96:	695b      	ldr	r3, [r3, #20]
 800fc98:	2210      	movs	r2, #16
 800fc9a:	431a      	orrs	r2, r3
 800fc9c:	4b1b      	ldr	r3, [pc, #108]	@ (800fd0c <FLASH_SetErrorCode+0x134>)
 800fc9e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2280      	movs	r2, #128	@ 0x80
 800fca4:	0192      	lsls	r2, r2, #6
 800fca6:	4313      	orrs	r3, r2
 800fca8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800fcaa:	4b17      	ldr	r3, [pc, #92]	@ (800fd08 <FLASH_SetErrorCode+0x130>)
 800fcac:	699a      	ldr	r2, [r3, #24]
 800fcae:	2380      	movs	r3, #128	@ 0x80
 800fcb0:	029b      	lsls	r3, r3, #10
 800fcb2:	401a      	ands	r2, r3
 800fcb4:	2380      	movs	r3, #128	@ 0x80
 800fcb6:	029b      	lsls	r3, r3, #10
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	d109      	bne.n	800fcd0 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800fcbc:	4b13      	ldr	r3, [pc, #76]	@ (800fd0c <FLASH_SetErrorCode+0x134>)
 800fcbe:	695b      	ldr	r3, [r3, #20]
 800fcc0:	2220      	movs	r2, #32
 800fcc2:	431a      	orrs	r2, r3
 800fcc4:	4b11      	ldr	r3, [pc, #68]	@ (800fd0c <FLASH_SetErrorCode+0x134>)
 800fcc6:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2220      	movs	r2, #32
 800fccc:	4313      	orrs	r3, r2
 800fcce:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800fcd0:	4b0d      	ldr	r3, [pc, #52]	@ (800fd08 <FLASH_SetErrorCode+0x130>)
 800fcd2:	699a      	ldr	r2, [r3, #24]
 800fcd4:	2380      	movs	r3, #128	@ 0x80
 800fcd6:	025b      	lsls	r3, r3, #9
 800fcd8:	401a      	ands	r2, r3
 800fcda:	2380      	movs	r3, #128	@ 0x80
 800fcdc:	025b      	lsls	r3, r3, #9
 800fcde:	429a      	cmp	r2, r3
 800fce0:	d10a      	bne.n	800fcf8 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800fce2:	4b0a      	ldr	r3, [pc, #40]	@ (800fd0c <FLASH_SetErrorCode+0x134>)
 800fce4:	695b      	ldr	r3, [r3, #20]
 800fce6:	2240      	movs	r2, #64	@ 0x40
 800fce8:	431a      	orrs	r2, r3
 800fcea:	4b08      	ldr	r3, [pc, #32]	@ (800fd0c <FLASH_SetErrorCode+0x134>)
 800fcec:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	2280      	movs	r2, #128	@ 0x80
 800fcf2:	0252      	lsls	r2, r2, #9
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800fcf8:	4b03      	ldr	r3, [pc, #12]	@ (800fd08 <FLASH_SetErrorCode+0x130>)
 800fcfa:	687a      	ldr	r2, [r7, #4]
 800fcfc:	619a      	str	r2, [r3, #24]
}  
 800fcfe:	46c0      	nop			@ (mov r8, r8)
 800fd00:	46bd      	mov	sp, r7
 800fd02:	b002      	add	sp, #8
 800fd04:	bd80      	pop	{r7, pc}
 800fd06:	46c0      	nop			@ (mov r8, r8)
 800fd08:	40022000 	.word	0x40022000
 800fd0c:	200025ac 	.word	0x200025ac

0800fd10 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800fd16:	4b12      	ldr	r3, [pc, #72]	@ (800fd60 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	2201      	movs	r2, #1
 800fd1c:	4013      	ands	r3, r2
 800fd1e:	d019      	beq.n	800fd54 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd20:	f3ef 8310 	mrs	r3, PRIMASK
 800fd24:	607b      	str	r3, [r7, #4]
  return(result);
 800fd26:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800fd28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd2a:	b672      	cpsid	i
}
 800fd2c:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800fd2e:	4b0c      	ldr	r3, [pc, #48]	@ (800fd60 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fd30:	4a0c      	ldr	r2, [pc, #48]	@ (800fd64 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800fd32:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800fd34:	4b0a      	ldr	r3, [pc, #40]	@ (800fd60 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fd36:	4a0c      	ldr	r2, [pc, #48]	@ (800fd68 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800fd38:	60da      	str	r2, [r3, #12]
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	f383 8810 	msr	PRIMASK, r3
}
 800fd44:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800fd46:	4b06      	ldr	r3, [pc, #24]	@ (800fd60 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	4013      	ands	r3, r2
 800fd4e:	d001      	beq.n	800fd54 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800fd50:	2301      	movs	r3, #1
 800fd52:	e000      	b.n	800fd56 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800fd54:	2300      	movs	r3, #0
}
 800fd56:	0018      	movs	r0, r3
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	b004      	add	sp, #16
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	46c0      	nop			@ (mov r8, r8)
 800fd60:	40022000 	.word	0x40022000
 800fd64:	89abcdef 	.word	0x89abcdef
 800fd68:	02030405 	.word	0x02030405

0800fd6c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800fd70:	4b04      	ldr	r3, [pc, #16]	@ (800fd84 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800fd72:	685a      	ldr	r2, [r3, #4]
 800fd74:	4b03      	ldr	r3, [pc, #12]	@ (800fd84 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800fd76:	2101      	movs	r1, #1
 800fd78:	430a      	orrs	r2, r1
 800fd7a:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800fd7c:	2300      	movs	r3, #0
}
 800fd7e:	0018      	movs	r0, r3
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}
 800fd84:	40022000 	.word	0x40022000

0800fd88 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800fd88:	b5b0      	push	{r4, r5, r7, lr}
 800fd8a:	b084      	sub	sp, #16
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fd90:	250f      	movs	r5, #15
 800fd92:	197b      	adds	r3, r7, r5
 800fd94:	2200      	movs	r2, #0
 800fd96:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fd98:	197c      	adds	r4, r7, r5
 800fd9a:	4b0f      	ldr	r3, [pc, #60]	@ (800fdd8 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800fd9c:	0018      	movs	r0, r3
 800fd9e:	f7ff fea9 	bl	800faf4 <FLASH_WaitForLastOperation>
 800fda2:	0003      	movs	r3, r0
 800fda4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800fda6:	0029      	movs	r1, r5
 800fda8:	187b      	adds	r3, r7, r1
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d10c      	bne.n	800fdca <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fdb0:	4b0a      	ldr	r3, [pc, #40]	@ (800fddc <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fdbc:	187c      	adds	r4, r7, r1
 800fdbe:	4b06      	ldr	r3, [pc, #24]	@ (800fdd8 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800fdc0:	0018      	movs	r0, r3
 800fdc2:	f7ff fe97 	bl	800faf4 <FLASH_WaitForLastOperation>
 800fdc6:	0003      	movs	r3, r0
 800fdc8:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800fdca:	230f      	movs	r3, #15
 800fdcc:	18fb      	adds	r3, r7, r3
 800fdce:	781b      	ldrb	r3, [r3, #0]
}  
 800fdd0:	0018      	movs	r0, r3
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	b004      	add	sp, #16
 800fdd6:	bdb0      	pop	{r4, r5, r7, pc}
 800fdd8:	0000c350 	.word	0x0000c350
 800fddc:	200025ac 	.word	0x200025ac

0800fde0 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800fde0:	b5b0      	push	{r4, r5, r7, lr}
 800fde2:	b086      	sub	sp, #24
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	60f8      	str	r0, [r7, #12]
 800fde8:	60b9      	str	r1, [r7, #8]
 800fdea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800fdec:	2317      	movs	r3, #23
 800fdee:	18fb      	adds	r3, r7, r3
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800fdf4:	4b24      	ldr	r3, [pc, #144]	@ (800fe88 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fdf6:	7c1b      	ldrb	r3, [r3, #16]
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	d101      	bne.n	800fe00 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800fdfc:	2302      	movs	r3, #2
 800fdfe:	e03e      	b.n	800fe7e <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800fe00:	4b21      	ldr	r3, [pc, #132]	@ (800fe88 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fe02:	2201      	movs	r2, #1
 800fe04:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fe06:	2517      	movs	r5, #23
 800fe08:	197c      	adds	r4, r7, r5
 800fe0a:	4b20      	ldr	r3, [pc, #128]	@ (800fe8c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800fe0c:	0018      	movs	r0, r3
 800fe0e:	f7ff fe71 	bl	800faf4 <FLASH_WaitForLastOperation>
 800fe12:	0003      	movs	r3, r0
 800fe14:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800fe16:	197b      	adds	r3, r7, r5
 800fe18:	781b      	ldrb	r3, [r3, #0]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d129      	bne.n	800fe72 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800fe1e:	4b1a      	ldr	r3, [pc, #104]	@ (800fe88 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fe20:	2200      	movs	r2, #0
 800fe22:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2b02      	cmp	r3, #2
 800fe28:	d103      	bne.n	800fe32 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	687a      	ldr	r2, [r7, #4]
 800fe2e:	601a      	str	r2, [r3, #0]
 800fe30:	e013      	b.n	800fe5a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	2b01      	cmp	r3, #1
 800fe36:	d104      	bne.n	800fe42 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	687a      	ldr	r2, [r7, #4]
 800fe3c:	b292      	uxth	r2, r2
 800fe3e:	801a      	strh	r2, [r3, #0]
 800fe40:	e00b      	b.n	800fe5a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d104      	bne.n	800fe52 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	687a      	ldr	r2, [r7, #4]
 800fe4c:	b2d2      	uxtb	r2, r2
 800fe4e:	701a      	strb	r2, [r3, #0]
 800fe50:	e003      	b.n	800fe5a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800fe52:	2317      	movs	r3, #23
 800fe54:	18fb      	adds	r3, r7, r3
 800fe56:	2201      	movs	r2, #1
 800fe58:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800fe5a:	2217      	movs	r2, #23
 800fe5c:	18bb      	adds	r3, r7, r2
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d106      	bne.n	800fe72 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800fe64:	18bc      	adds	r4, r7, r2
 800fe66:	4b09      	ldr	r3, [pc, #36]	@ (800fe8c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800fe68:	0018      	movs	r0, r3
 800fe6a:	f7ff fe43 	bl	800faf4 <FLASH_WaitForLastOperation>
 800fe6e:	0003      	movs	r3, r0
 800fe70:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800fe72:	4b05      	ldr	r3, [pc, #20]	@ (800fe88 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800fe74:	2200      	movs	r2, #0
 800fe76:	741a      	strb	r2, [r3, #16]

  return status;
 800fe78:	2317      	movs	r3, #23
 800fe7a:	18fb      	adds	r3, r7, r3
 800fe7c:	781b      	ldrb	r3, [r3, #0]
}
 800fe7e:	0018      	movs	r0, r3
 800fe80:	46bd      	mov	sp, r7
 800fe82:	b006      	add	sp, #24
 800fe84:	bdb0      	pop	{r4, r5, r7, pc}
 800fe86:	46c0      	nop			@ (mov r8, r8)
 800fe88:	200025ac 	.word	0x200025ac
 800fe8c:	0000c350 	.word	0x0000c350

0800fe90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b086      	sub	sp, #24
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800fea2:	2300      	movs	r3, #0
 800fea4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800fea6:	e155      	b.n	8010154 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	2101      	movs	r1, #1
 800feae:	697a      	ldr	r2, [r7, #20]
 800feb0:	4091      	lsls	r1, r2
 800feb2:	000a      	movs	r2, r1
 800feb4:	4013      	ands	r3, r2
 800feb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d100      	bne.n	800fec0 <HAL_GPIO_Init+0x30>
 800febe:	e146      	b.n	801014e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	2203      	movs	r2, #3
 800fec6:	4013      	ands	r3, r2
 800fec8:	2b01      	cmp	r3, #1
 800feca:	d005      	beq.n	800fed8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	2203      	movs	r2, #3
 800fed2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800fed4:	2b02      	cmp	r3, #2
 800fed6:	d130      	bne.n	800ff3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	689b      	ldr	r3, [r3, #8]
 800fedc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	005b      	lsls	r3, r3, #1
 800fee2:	2203      	movs	r2, #3
 800fee4:	409a      	lsls	r2, r3
 800fee6:	0013      	movs	r3, r2
 800fee8:	43da      	mvns	r2, r3
 800feea:	693b      	ldr	r3, [r7, #16]
 800feec:	4013      	ands	r3, r2
 800feee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	68da      	ldr	r2, [r3, #12]
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	005b      	lsls	r3, r3, #1
 800fef8:	409a      	lsls	r2, r3
 800fefa:	0013      	movs	r3, r2
 800fefc:	693a      	ldr	r2, [r7, #16]
 800fefe:	4313      	orrs	r3, r2
 800ff00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	693a      	ldr	r2, [r7, #16]
 800ff06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	685b      	ldr	r3, [r3, #4]
 800ff0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ff0e:	2201      	movs	r2, #1
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	409a      	lsls	r2, r3
 800ff14:	0013      	movs	r3, r2
 800ff16:	43da      	mvns	r2, r3
 800ff18:	693b      	ldr	r3, [r7, #16]
 800ff1a:	4013      	ands	r3, r2
 800ff1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	091b      	lsrs	r3, r3, #4
 800ff24:	2201      	movs	r2, #1
 800ff26:	401a      	ands	r2, r3
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	409a      	lsls	r2, r3
 800ff2c:	0013      	movs	r3, r2
 800ff2e:	693a      	ldr	r2, [r7, #16]
 800ff30:	4313      	orrs	r3, r2
 800ff32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	693a      	ldr	r2, [r7, #16]
 800ff38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	2203      	movs	r2, #3
 800ff40:	4013      	ands	r3, r2
 800ff42:	2b03      	cmp	r3, #3
 800ff44:	d017      	beq.n	800ff76 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	68db      	ldr	r3, [r3, #12]
 800ff4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	005b      	lsls	r3, r3, #1
 800ff50:	2203      	movs	r2, #3
 800ff52:	409a      	lsls	r2, r3
 800ff54:	0013      	movs	r3, r2
 800ff56:	43da      	mvns	r2, r3
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	4013      	ands	r3, r2
 800ff5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	689a      	ldr	r2, [r3, #8]
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	005b      	lsls	r3, r3, #1
 800ff66:	409a      	lsls	r2, r3
 800ff68:	0013      	movs	r3, r2
 800ff6a:	693a      	ldr	r2, [r7, #16]
 800ff6c:	4313      	orrs	r3, r2
 800ff6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	693a      	ldr	r2, [r7, #16]
 800ff74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ff76:	683b      	ldr	r3, [r7, #0]
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	2203      	movs	r2, #3
 800ff7c:	4013      	ands	r3, r2
 800ff7e:	2b02      	cmp	r3, #2
 800ff80:	d123      	bne.n	800ffca <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	08da      	lsrs	r2, r3, #3
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	3208      	adds	r2, #8
 800ff8a:	0092      	lsls	r2, r2, #2
 800ff8c:	58d3      	ldr	r3, [r2, r3]
 800ff8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800ff90:	697b      	ldr	r3, [r7, #20]
 800ff92:	2207      	movs	r2, #7
 800ff94:	4013      	ands	r3, r2
 800ff96:	009b      	lsls	r3, r3, #2
 800ff98:	220f      	movs	r2, #15
 800ff9a:	409a      	lsls	r2, r3
 800ff9c:	0013      	movs	r3, r2
 800ff9e:	43da      	mvns	r2, r3
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	4013      	ands	r3, r2
 800ffa4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	691a      	ldr	r2, [r3, #16]
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	2107      	movs	r1, #7
 800ffae:	400b      	ands	r3, r1
 800ffb0:	009b      	lsls	r3, r3, #2
 800ffb2:	409a      	lsls	r2, r3
 800ffb4:	0013      	movs	r3, r2
 800ffb6:	693a      	ldr	r2, [r7, #16]
 800ffb8:	4313      	orrs	r3, r2
 800ffba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	08da      	lsrs	r2, r3, #3
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	3208      	adds	r2, #8
 800ffc4:	0092      	lsls	r2, r2, #2
 800ffc6:	6939      	ldr	r1, [r7, #16]
 800ffc8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	005b      	lsls	r3, r3, #1
 800ffd4:	2203      	movs	r2, #3
 800ffd6:	409a      	lsls	r2, r3
 800ffd8:	0013      	movs	r3, r2
 800ffda:	43da      	mvns	r2, r3
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	4013      	ands	r3, r2
 800ffe0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	685b      	ldr	r3, [r3, #4]
 800ffe6:	2203      	movs	r2, #3
 800ffe8:	401a      	ands	r2, r3
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	005b      	lsls	r3, r3, #1
 800ffee:	409a      	lsls	r2, r3
 800fff0:	0013      	movs	r3, r2
 800fff2:	693a      	ldr	r2, [r7, #16]
 800fff4:	4313      	orrs	r3, r2
 800fff6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	693a      	ldr	r2, [r7, #16]
 800fffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	685a      	ldr	r2, [r3, #4]
 8010002:	23c0      	movs	r3, #192	@ 0xc0
 8010004:	029b      	lsls	r3, r3, #10
 8010006:	4013      	ands	r3, r2
 8010008:	d100      	bne.n	801000c <HAL_GPIO_Init+0x17c>
 801000a:	e0a0      	b.n	801014e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801000c:	4b57      	ldr	r3, [pc, #348]	@ (801016c <HAL_GPIO_Init+0x2dc>)
 801000e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010010:	4b56      	ldr	r3, [pc, #344]	@ (801016c <HAL_GPIO_Init+0x2dc>)
 8010012:	2101      	movs	r1, #1
 8010014:	430a      	orrs	r2, r1
 8010016:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8010018:	4a55      	ldr	r2, [pc, #340]	@ (8010170 <HAL_GPIO_Init+0x2e0>)
 801001a:	697b      	ldr	r3, [r7, #20]
 801001c:	089b      	lsrs	r3, r3, #2
 801001e:	3302      	adds	r3, #2
 8010020:	009b      	lsls	r3, r3, #2
 8010022:	589b      	ldr	r3, [r3, r2]
 8010024:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	2203      	movs	r2, #3
 801002a:	4013      	ands	r3, r2
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	220f      	movs	r2, #15
 8010030:	409a      	lsls	r2, r3
 8010032:	0013      	movs	r3, r2
 8010034:	43da      	mvns	r2, r3
 8010036:	693b      	ldr	r3, [r7, #16]
 8010038:	4013      	ands	r3, r2
 801003a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 801003c:	687a      	ldr	r2, [r7, #4]
 801003e:	23a0      	movs	r3, #160	@ 0xa0
 8010040:	05db      	lsls	r3, r3, #23
 8010042:	429a      	cmp	r2, r3
 8010044:	d01f      	beq.n	8010086 <HAL_GPIO_Init+0x1f6>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4a4a      	ldr	r2, [pc, #296]	@ (8010174 <HAL_GPIO_Init+0x2e4>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d019      	beq.n	8010082 <HAL_GPIO_Init+0x1f2>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	4a49      	ldr	r2, [pc, #292]	@ (8010178 <HAL_GPIO_Init+0x2e8>)
 8010052:	4293      	cmp	r3, r2
 8010054:	d013      	beq.n	801007e <HAL_GPIO_Init+0x1ee>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	4a48      	ldr	r2, [pc, #288]	@ (801017c <HAL_GPIO_Init+0x2ec>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d00d      	beq.n	801007a <HAL_GPIO_Init+0x1ea>
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	4a47      	ldr	r2, [pc, #284]	@ (8010180 <HAL_GPIO_Init+0x2f0>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d007      	beq.n	8010076 <HAL_GPIO_Init+0x1e6>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	4a46      	ldr	r2, [pc, #280]	@ (8010184 <HAL_GPIO_Init+0x2f4>)
 801006a:	4293      	cmp	r3, r2
 801006c:	d101      	bne.n	8010072 <HAL_GPIO_Init+0x1e2>
 801006e:	2305      	movs	r3, #5
 8010070:	e00a      	b.n	8010088 <HAL_GPIO_Init+0x1f8>
 8010072:	2306      	movs	r3, #6
 8010074:	e008      	b.n	8010088 <HAL_GPIO_Init+0x1f8>
 8010076:	2304      	movs	r3, #4
 8010078:	e006      	b.n	8010088 <HAL_GPIO_Init+0x1f8>
 801007a:	2303      	movs	r3, #3
 801007c:	e004      	b.n	8010088 <HAL_GPIO_Init+0x1f8>
 801007e:	2302      	movs	r3, #2
 8010080:	e002      	b.n	8010088 <HAL_GPIO_Init+0x1f8>
 8010082:	2301      	movs	r3, #1
 8010084:	e000      	b.n	8010088 <HAL_GPIO_Init+0x1f8>
 8010086:	2300      	movs	r3, #0
 8010088:	697a      	ldr	r2, [r7, #20]
 801008a:	2103      	movs	r1, #3
 801008c:	400a      	ands	r2, r1
 801008e:	0092      	lsls	r2, r2, #2
 8010090:	4093      	lsls	r3, r2
 8010092:	693a      	ldr	r2, [r7, #16]
 8010094:	4313      	orrs	r3, r2
 8010096:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010098:	4935      	ldr	r1, [pc, #212]	@ (8010170 <HAL_GPIO_Init+0x2e0>)
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	089b      	lsrs	r3, r3, #2
 801009e:	3302      	adds	r3, #2
 80100a0:	009b      	lsls	r3, r3, #2
 80100a2:	693a      	ldr	r2, [r7, #16]
 80100a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80100a6:	4b38      	ldr	r3, [pc, #224]	@ (8010188 <HAL_GPIO_Init+0x2f8>)
 80100a8:	689b      	ldr	r3, [r3, #8]
 80100aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	43da      	mvns	r2, r3
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	4013      	ands	r3, r2
 80100b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	685a      	ldr	r2, [r3, #4]
 80100ba:	2380      	movs	r3, #128	@ 0x80
 80100bc:	035b      	lsls	r3, r3, #13
 80100be:	4013      	ands	r3, r2
 80100c0:	d003      	beq.n	80100ca <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80100c2:	693a      	ldr	r2, [r7, #16]
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	4313      	orrs	r3, r2
 80100c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80100ca:	4b2f      	ldr	r3, [pc, #188]	@ (8010188 <HAL_GPIO_Init+0x2f8>)
 80100cc:	693a      	ldr	r2, [r7, #16]
 80100ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80100d0:	4b2d      	ldr	r3, [pc, #180]	@ (8010188 <HAL_GPIO_Init+0x2f8>)
 80100d2:	68db      	ldr	r3, [r3, #12]
 80100d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	43da      	mvns	r2, r3
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	4013      	ands	r3, r2
 80100de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	685a      	ldr	r2, [r3, #4]
 80100e4:	2380      	movs	r3, #128	@ 0x80
 80100e6:	039b      	lsls	r3, r3, #14
 80100e8:	4013      	ands	r3, r2
 80100ea:	d003      	beq.n	80100f4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80100ec:	693a      	ldr	r2, [r7, #16]
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	4313      	orrs	r3, r2
 80100f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80100f4:	4b24      	ldr	r3, [pc, #144]	@ (8010188 <HAL_GPIO_Init+0x2f8>)
 80100f6:	693a      	ldr	r2, [r7, #16]
 80100f8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80100fa:	4b23      	ldr	r3, [pc, #140]	@ (8010188 <HAL_GPIO_Init+0x2f8>)
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	43da      	mvns	r2, r3
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	4013      	ands	r3, r2
 8010108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	685a      	ldr	r2, [r3, #4]
 801010e:	2380      	movs	r3, #128	@ 0x80
 8010110:	029b      	lsls	r3, r3, #10
 8010112:	4013      	ands	r3, r2
 8010114:	d003      	beq.n	801011e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8010116:	693a      	ldr	r2, [r7, #16]
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	4313      	orrs	r3, r2
 801011c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 801011e:	4b1a      	ldr	r3, [pc, #104]	@ (8010188 <HAL_GPIO_Init+0x2f8>)
 8010120:	693a      	ldr	r2, [r7, #16]
 8010122:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010124:	4b18      	ldr	r3, [pc, #96]	@ (8010188 <HAL_GPIO_Init+0x2f8>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	43da      	mvns	r2, r3
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	4013      	ands	r3, r2
 8010132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	685a      	ldr	r2, [r3, #4]
 8010138:	2380      	movs	r3, #128	@ 0x80
 801013a:	025b      	lsls	r3, r3, #9
 801013c:	4013      	ands	r3, r2
 801013e:	d003      	beq.n	8010148 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8010140:	693a      	ldr	r2, [r7, #16]
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	4313      	orrs	r3, r2
 8010146:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8010148:	4b0f      	ldr	r3, [pc, #60]	@ (8010188 <HAL_GPIO_Init+0x2f8>)
 801014a:	693a      	ldr	r2, [r7, #16]
 801014c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	3301      	adds	r3, #1
 8010152:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	681a      	ldr	r2, [r3, #0]
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	40da      	lsrs	r2, r3
 801015c:	1e13      	subs	r3, r2, #0
 801015e:	d000      	beq.n	8010162 <HAL_GPIO_Init+0x2d2>
 8010160:	e6a2      	b.n	800fea8 <HAL_GPIO_Init+0x18>
  }
}
 8010162:	46c0      	nop			@ (mov r8, r8)
 8010164:	46c0      	nop			@ (mov r8, r8)
 8010166:	46bd      	mov	sp, r7
 8010168:	b006      	add	sp, #24
 801016a:	bd80      	pop	{r7, pc}
 801016c:	40021000 	.word	0x40021000
 8010170:	40010000 	.word	0x40010000
 8010174:	50000400 	.word	0x50000400
 8010178:	50000800 	.word	0x50000800
 801017c:	50000c00 	.word	0x50000c00
 8010180:	50001000 	.word	0x50001000
 8010184:	50001c00 	.word	0x50001c00
 8010188:	40010400 	.word	0x40010400

0801018c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b084      	sub	sp, #16
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	000a      	movs	r2, r1
 8010196:	1cbb      	adds	r3, r7, #2
 8010198:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	691b      	ldr	r3, [r3, #16]
 801019e:	1cba      	adds	r2, r7, #2
 80101a0:	8812      	ldrh	r2, [r2, #0]
 80101a2:	4013      	ands	r3, r2
 80101a4:	d004      	beq.n	80101b0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80101a6:	230f      	movs	r3, #15
 80101a8:	18fb      	adds	r3, r7, r3
 80101aa:	2201      	movs	r2, #1
 80101ac:	701a      	strb	r2, [r3, #0]
 80101ae:	e003      	b.n	80101b8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80101b0:	230f      	movs	r3, #15
 80101b2:	18fb      	adds	r3, r7, r3
 80101b4:	2200      	movs	r2, #0
 80101b6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80101b8:	230f      	movs	r3, #15
 80101ba:	18fb      	adds	r3, r7, r3
 80101bc:	781b      	ldrb	r3, [r3, #0]
}
 80101be:	0018      	movs	r0, r3
 80101c0:	46bd      	mov	sp, r7
 80101c2:	b004      	add	sp, #16
 80101c4:	bd80      	pop	{r7, pc}

080101c6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80101c6:	b580      	push	{r7, lr}
 80101c8:	b082      	sub	sp, #8
 80101ca:	af00      	add	r7, sp, #0
 80101cc:	6078      	str	r0, [r7, #4]
 80101ce:	0008      	movs	r0, r1
 80101d0:	0011      	movs	r1, r2
 80101d2:	1cbb      	adds	r3, r7, #2
 80101d4:	1c02      	adds	r2, r0, #0
 80101d6:	801a      	strh	r2, [r3, #0]
 80101d8:	1c7b      	adds	r3, r7, #1
 80101da:	1c0a      	adds	r2, r1, #0
 80101dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80101de:	1c7b      	adds	r3, r7, #1
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d004      	beq.n	80101f0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80101e6:	1cbb      	adds	r3, r7, #2
 80101e8:	881a      	ldrh	r2, [r3, #0]
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80101ee:	e003      	b.n	80101f8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80101f0:	1cbb      	adds	r3, r7, #2
 80101f2:	881a      	ldrh	r2, [r3, #0]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80101f8:	46c0      	nop			@ (mov r8, r8)
 80101fa:	46bd      	mov	sp, r7
 80101fc:	b002      	add	sp, #8
 80101fe:	bd80      	pop	{r7, pc}

08010200 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	0002      	movs	r2, r0
 8010208:	1dbb      	adds	r3, r7, #6
 801020a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801020c:	4b09      	ldr	r3, [pc, #36]	@ (8010234 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801020e:	695b      	ldr	r3, [r3, #20]
 8010210:	1dba      	adds	r2, r7, #6
 8010212:	8812      	ldrh	r2, [r2, #0]
 8010214:	4013      	ands	r3, r2
 8010216:	d008      	beq.n	801022a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8010218:	4b06      	ldr	r3, [pc, #24]	@ (8010234 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 801021a:	1dba      	adds	r2, r7, #6
 801021c:	8812      	ldrh	r2, [r2, #0]
 801021e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8010220:	1dbb      	adds	r3, r7, #6
 8010222:	881b      	ldrh	r3, [r3, #0]
 8010224:	0018      	movs	r0, r3
 8010226:	f7f8 f825 	bl	8008274 <HAL_GPIO_EXTI_Callback>
  }
}
 801022a:	46c0      	nop			@ (mov r8, r8)
 801022c:	46bd      	mov	sp, r7
 801022e:	b002      	add	sp, #8
 8010230:	bd80      	pop	{r7, pc}
 8010232:	46c0      	nop			@ (mov r8, r8)
 8010234:	40010400 	.word	0x40010400

08010238 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d101      	bne.n	801024a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010246:	2301      	movs	r3, #1
 8010248:	e082      	b.n	8010350 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2241      	movs	r2, #65	@ 0x41
 801024e:	5c9b      	ldrb	r3, [r3, r2]
 8010250:	b2db      	uxtb	r3, r3
 8010252:	2b00      	cmp	r3, #0
 8010254:	d107      	bne.n	8010266 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2240      	movs	r2, #64	@ 0x40
 801025a:	2100      	movs	r1, #0
 801025c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	0018      	movs	r0, r3
 8010262:	f7f7 fae5 	bl	8007830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2241      	movs	r2, #65	@ 0x41
 801026a:	2124      	movs	r1, #36	@ 0x24
 801026c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	681a      	ldr	r2, [r3, #0]
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	2101      	movs	r1, #1
 801027a:	438a      	bics	r2, r1
 801027c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	685a      	ldr	r2, [r3, #4]
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	4934      	ldr	r1, [pc, #208]	@ (8010358 <HAL_I2C_Init+0x120>)
 8010288:	400a      	ands	r2, r1
 801028a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	689a      	ldr	r2, [r3, #8]
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	4931      	ldr	r1, [pc, #196]	@ (801035c <HAL_I2C_Init+0x124>)
 8010298:	400a      	ands	r2, r1
 801029a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	68db      	ldr	r3, [r3, #12]
 80102a0:	2b01      	cmp	r3, #1
 80102a2:	d108      	bne.n	80102b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	689a      	ldr	r2, [r3, #8]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	2180      	movs	r1, #128	@ 0x80
 80102ae:	0209      	lsls	r1, r1, #8
 80102b0:	430a      	orrs	r2, r1
 80102b2:	609a      	str	r2, [r3, #8]
 80102b4:	e007      	b.n	80102c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	689a      	ldr	r2, [r3, #8]
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	2184      	movs	r1, #132	@ 0x84
 80102c0:	0209      	lsls	r1, r1, #8
 80102c2:	430a      	orrs	r2, r1
 80102c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	68db      	ldr	r3, [r3, #12]
 80102ca:	2b02      	cmp	r3, #2
 80102cc:	d104      	bne.n	80102d8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	2280      	movs	r2, #128	@ 0x80
 80102d4:	0112      	lsls	r2, r2, #4
 80102d6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	685a      	ldr	r2, [r3, #4]
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	491f      	ldr	r1, [pc, #124]	@ (8010360 <HAL_I2C_Init+0x128>)
 80102e4:	430a      	orrs	r2, r1
 80102e6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	68da      	ldr	r2, [r3, #12]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	491a      	ldr	r1, [pc, #104]	@ (801035c <HAL_I2C_Init+0x124>)
 80102f4:	400a      	ands	r2, r1
 80102f6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	691a      	ldr	r2, [r3, #16]
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	695b      	ldr	r3, [r3, #20]
 8010300:	431a      	orrs	r2, r3
 8010302:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	699b      	ldr	r3, [r3, #24]
 8010308:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	430a      	orrs	r2, r1
 8010310:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	69d9      	ldr	r1, [r3, #28]
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6a1a      	ldr	r2, [r3, #32]
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	430a      	orrs	r2, r1
 8010320:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	681a      	ldr	r2, [r3, #0]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	2101      	movs	r1, #1
 801032e:	430a      	orrs	r2, r1
 8010330:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2200      	movs	r2, #0
 8010336:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2241      	movs	r2, #65	@ 0x41
 801033c:	2120      	movs	r1, #32
 801033e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2200      	movs	r2, #0
 8010344:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2242      	movs	r2, #66	@ 0x42
 801034a:	2100      	movs	r1, #0
 801034c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801034e:	2300      	movs	r3, #0
}
 8010350:	0018      	movs	r0, r3
 8010352:	46bd      	mov	sp, r7
 8010354:	b002      	add	sp, #8
 8010356:	bd80      	pop	{r7, pc}
 8010358:	f0ffffff 	.word	0xf0ffffff
 801035c:	ffff7fff 	.word	0xffff7fff
 8010360:	02008000 	.word	0x02008000

08010364 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8010364:	b590      	push	{r4, r7, lr}
 8010366:	b089      	sub	sp, #36	@ 0x24
 8010368:	af02      	add	r7, sp, #8
 801036a:	60f8      	str	r0, [r7, #12]
 801036c:	0008      	movs	r0, r1
 801036e:	607a      	str	r2, [r7, #4]
 8010370:	0019      	movs	r1, r3
 8010372:	230a      	movs	r3, #10
 8010374:	18fb      	adds	r3, r7, r3
 8010376:	1c02      	adds	r2, r0, #0
 8010378:	801a      	strh	r2, [r3, #0]
 801037a:	2308      	movs	r3, #8
 801037c:	18fb      	adds	r3, r7, r3
 801037e:	1c0a      	adds	r2, r1, #0
 8010380:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	2241      	movs	r2, #65	@ 0x41
 8010386:	5c9b      	ldrb	r3, [r3, r2]
 8010388:	b2db      	uxtb	r3, r3
 801038a:	2b20      	cmp	r3, #32
 801038c:	d000      	beq.n	8010390 <HAL_I2C_Master_Transmit+0x2c>
 801038e:	e0e7      	b.n	8010560 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	2240      	movs	r2, #64	@ 0x40
 8010394:	5c9b      	ldrb	r3, [r3, r2]
 8010396:	2b01      	cmp	r3, #1
 8010398:	d101      	bne.n	801039e <HAL_I2C_Master_Transmit+0x3a>
 801039a:	2302      	movs	r3, #2
 801039c:	e0e1      	b.n	8010562 <HAL_I2C_Master_Transmit+0x1fe>
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	2240      	movs	r2, #64	@ 0x40
 80103a2:	2101      	movs	r1, #1
 80103a4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80103a6:	f7fe fc7d 	bl	800eca4 <HAL_GetTick>
 80103aa:	0003      	movs	r3, r0
 80103ac:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80103ae:	2380      	movs	r3, #128	@ 0x80
 80103b0:	0219      	lsls	r1, r3, #8
 80103b2:	68f8      	ldr	r0, [r7, #12]
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	9300      	str	r3, [sp, #0]
 80103b8:	2319      	movs	r3, #25
 80103ba:	2201      	movs	r2, #1
 80103bc:	f001 ff98 	bl	80122f0 <I2C_WaitOnFlagUntilTimeout>
 80103c0:	1e03      	subs	r3, r0, #0
 80103c2:	d001      	beq.n	80103c8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80103c4:	2301      	movs	r3, #1
 80103c6:	e0cc      	b.n	8010562 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	2241      	movs	r2, #65	@ 0x41
 80103cc:	2121      	movs	r1, #33	@ 0x21
 80103ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	2242      	movs	r2, #66	@ 0x42
 80103d4:	2110      	movs	r1, #16
 80103d6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	2200      	movs	r2, #0
 80103dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	687a      	ldr	r2, [r7, #4]
 80103e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	2208      	movs	r2, #8
 80103e8:	18ba      	adds	r2, r7, r2
 80103ea:	8812      	ldrh	r2, [r2, #0]
 80103ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2200      	movs	r2, #0
 80103f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80103f8:	b29b      	uxth	r3, r3
 80103fa:	2bff      	cmp	r3, #255	@ 0xff
 80103fc:	d911      	bls.n	8010422 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	22ff      	movs	r2, #255	@ 0xff
 8010402:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010408:	b2da      	uxtb	r2, r3
 801040a:	2380      	movs	r3, #128	@ 0x80
 801040c:	045c      	lsls	r4, r3, #17
 801040e:	230a      	movs	r3, #10
 8010410:	18fb      	adds	r3, r7, r3
 8010412:	8819      	ldrh	r1, [r3, #0]
 8010414:	68f8      	ldr	r0, [r7, #12]
 8010416:	4b55      	ldr	r3, [pc, #340]	@ (801056c <HAL_I2C_Master_Transmit+0x208>)
 8010418:	9300      	str	r3, [sp, #0]
 801041a:	0023      	movs	r3, r4
 801041c:	f002 f9ba 	bl	8012794 <I2C_TransferConfig>
 8010420:	e075      	b.n	801050e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010426:	b29a      	uxth	r2, r3
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010430:	b2da      	uxtb	r2, r3
 8010432:	2380      	movs	r3, #128	@ 0x80
 8010434:	049c      	lsls	r4, r3, #18
 8010436:	230a      	movs	r3, #10
 8010438:	18fb      	adds	r3, r7, r3
 801043a:	8819      	ldrh	r1, [r3, #0]
 801043c:	68f8      	ldr	r0, [r7, #12]
 801043e:	4b4b      	ldr	r3, [pc, #300]	@ (801056c <HAL_I2C_Master_Transmit+0x208>)
 8010440:	9300      	str	r3, [sp, #0]
 8010442:	0023      	movs	r3, r4
 8010444:	f002 f9a6 	bl	8012794 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8010448:	e061      	b.n	801050e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801044a:	697a      	ldr	r2, [r7, #20]
 801044c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	0018      	movs	r0, r3
 8010452:	f001 ff9b 	bl	801238c <I2C_WaitOnTXISFlagUntilTimeout>
 8010456:	1e03      	subs	r3, r0, #0
 8010458:	d001      	beq.n	801045e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 801045a:	2301      	movs	r3, #1
 801045c:	e081      	b.n	8010562 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010462:	781a      	ldrb	r2, [r3, #0]
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801046e:	1c5a      	adds	r2, r3, #1
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010478:	b29b      	uxth	r3, r3
 801047a:	3b01      	subs	r3, #1
 801047c:	b29a      	uxth	r2, r3
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010486:	3b01      	subs	r3, #1
 8010488:	b29a      	uxth	r2, r3
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010492:	b29b      	uxth	r3, r3
 8010494:	2b00      	cmp	r3, #0
 8010496:	d03a      	beq.n	801050e <HAL_I2C_Master_Transmit+0x1aa>
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801049c:	2b00      	cmp	r3, #0
 801049e:	d136      	bne.n	801050e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80104a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80104a2:	68f8      	ldr	r0, [r7, #12]
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	9300      	str	r3, [sp, #0]
 80104a8:	0013      	movs	r3, r2
 80104aa:	2200      	movs	r2, #0
 80104ac:	2180      	movs	r1, #128	@ 0x80
 80104ae:	f001 ff1f 	bl	80122f0 <I2C_WaitOnFlagUntilTimeout>
 80104b2:	1e03      	subs	r3, r0, #0
 80104b4:	d001      	beq.n	80104ba <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80104b6:	2301      	movs	r3, #1
 80104b8:	e053      	b.n	8010562 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104be:	b29b      	uxth	r3, r3
 80104c0:	2bff      	cmp	r3, #255	@ 0xff
 80104c2:	d911      	bls.n	80104e8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	22ff      	movs	r2, #255	@ 0xff
 80104c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104ce:	b2da      	uxtb	r2, r3
 80104d0:	2380      	movs	r3, #128	@ 0x80
 80104d2:	045c      	lsls	r4, r3, #17
 80104d4:	230a      	movs	r3, #10
 80104d6:	18fb      	adds	r3, r7, r3
 80104d8:	8819      	ldrh	r1, [r3, #0]
 80104da:	68f8      	ldr	r0, [r7, #12]
 80104dc:	2300      	movs	r3, #0
 80104de:	9300      	str	r3, [sp, #0]
 80104e0:	0023      	movs	r3, r4
 80104e2:	f002 f957 	bl	8012794 <I2C_TransferConfig>
 80104e6:	e012      	b.n	801050e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80104ec:	b29a      	uxth	r2, r3
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80104f6:	b2da      	uxtb	r2, r3
 80104f8:	2380      	movs	r3, #128	@ 0x80
 80104fa:	049c      	lsls	r4, r3, #18
 80104fc:	230a      	movs	r3, #10
 80104fe:	18fb      	adds	r3, r7, r3
 8010500:	8819      	ldrh	r1, [r3, #0]
 8010502:	68f8      	ldr	r0, [r7, #12]
 8010504:	2300      	movs	r3, #0
 8010506:	9300      	str	r3, [sp, #0]
 8010508:	0023      	movs	r3, r4
 801050a:	f002 f943 	bl	8012794 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010512:	b29b      	uxth	r3, r3
 8010514:	2b00      	cmp	r3, #0
 8010516:	d198      	bne.n	801044a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010518:	697a      	ldr	r2, [r7, #20]
 801051a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	0018      	movs	r0, r3
 8010520:	f001 ff7a 	bl	8012418 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010524:	1e03      	subs	r3, r0, #0
 8010526:	d001      	beq.n	801052c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8010528:	2301      	movs	r3, #1
 801052a:	e01a      	b.n	8010562 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	2220      	movs	r2, #32
 8010532:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	685a      	ldr	r2, [r3, #4]
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	490c      	ldr	r1, [pc, #48]	@ (8010570 <HAL_I2C_Master_Transmit+0x20c>)
 8010540:	400a      	ands	r2, r1
 8010542:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	2241      	movs	r2, #65	@ 0x41
 8010548:	2120      	movs	r1, #32
 801054a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	2242      	movs	r2, #66	@ 0x42
 8010550:	2100      	movs	r1, #0
 8010552:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	2240      	movs	r2, #64	@ 0x40
 8010558:	2100      	movs	r1, #0
 801055a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801055c:	2300      	movs	r3, #0
 801055e:	e000      	b.n	8010562 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8010560:	2302      	movs	r3, #2
  }
}
 8010562:	0018      	movs	r0, r3
 8010564:	46bd      	mov	sp, r7
 8010566:	b007      	add	sp, #28
 8010568:	bd90      	pop	{r4, r7, pc}
 801056a:	46c0      	nop			@ (mov r8, r8)
 801056c:	80002000 	.word	0x80002000
 8010570:	fe00e800 	.word	0xfe00e800

08010574 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8010574:	b590      	push	{r4, r7, lr}
 8010576:	b089      	sub	sp, #36	@ 0x24
 8010578:	af02      	add	r7, sp, #8
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	0008      	movs	r0, r1
 801057e:	607a      	str	r2, [r7, #4]
 8010580:	0019      	movs	r1, r3
 8010582:	230a      	movs	r3, #10
 8010584:	18fb      	adds	r3, r7, r3
 8010586:	1c02      	adds	r2, r0, #0
 8010588:	801a      	strh	r2, [r3, #0]
 801058a:	2308      	movs	r3, #8
 801058c:	18fb      	adds	r3, r7, r3
 801058e:	1c0a      	adds	r2, r1, #0
 8010590:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	2241      	movs	r2, #65	@ 0x41
 8010596:	5c9b      	ldrb	r3, [r3, r2]
 8010598:	b2db      	uxtb	r3, r3
 801059a:	2b20      	cmp	r3, #32
 801059c:	d000      	beq.n	80105a0 <HAL_I2C_Master_Receive+0x2c>
 801059e:	e0e8      	b.n	8010772 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	2240      	movs	r2, #64	@ 0x40
 80105a4:	5c9b      	ldrb	r3, [r3, r2]
 80105a6:	2b01      	cmp	r3, #1
 80105a8:	d101      	bne.n	80105ae <HAL_I2C_Master_Receive+0x3a>
 80105aa:	2302      	movs	r3, #2
 80105ac:	e0e2      	b.n	8010774 <HAL_I2C_Master_Receive+0x200>
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2240      	movs	r2, #64	@ 0x40
 80105b2:	2101      	movs	r1, #1
 80105b4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80105b6:	f7fe fb75 	bl	800eca4 <HAL_GetTick>
 80105ba:	0003      	movs	r3, r0
 80105bc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80105be:	2380      	movs	r3, #128	@ 0x80
 80105c0:	0219      	lsls	r1, r3, #8
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	9300      	str	r3, [sp, #0]
 80105c8:	2319      	movs	r3, #25
 80105ca:	2201      	movs	r2, #1
 80105cc:	f001 fe90 	bl	80122f0 <I2C_WaitOnFlagUntilTimeout>
 80105d0:	1e03      	subs	r3, r0, #0
 80105d2:	d001      	beq.n	80105d8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80105d4:	2301      	movs	r3, #1
 80105d6:	e0cd      	b.n	8010774 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	2241      	movs	r2, #65	@ 0x41
 80105dc:	2122      	movs	r1, #34	@ 0x22
 80105de:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	2242      	movs	r2, #66	@ 0x42
 80105e4:	2110      	movs	r1, #16
 80105e6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	2200      	movs	r2, #0
 80105ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	687a      	ldr	r2, [r7, #4]
 80105f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	2208      	movs	r2, #8
 80105f8:	18ba      	adds	r2, r7, r2
 80105fa:	8812      	ldrh	r2, [r2, #0]
 80105fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	2200      	movs	r2, #0
 8010602:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010608:	b29b      	uxth	r3, r3
 801060a:	2bff      	cmp	r3, #255	@ 0xff
 801060c:	d911      	bls.n	8010632 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	22ff      	movs	r2, #255	@ 0xff
 8010612:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010618:	b2da      	uxtb	r2, r3
 801061a:	2380      	movs	r3, #128	@ 0x80
 801061c:	045c      	lsls	r4, r3, #17
 801061e:	230a      	movs	r3, #10
 8010620:	18fb      	adds	r3, r7, r3
 8010622:	8819      	ldrh	r1, [r3, #0]
 8010624:	68f8      	ldr	r0, [r7, #12]
 8010626:	4b55      	ldr	r3, [pc, #340]	@ (801077c <HAL_I2C_Master_Receive+0x208>)
 8010628:	9300      	str	r3, [sp, #0]
 801062a:	0023      	movs	r3, r4
 801062c:	f002 f8b2 	bl	8012794 <I2C_TransferConfig>
 8010630:	e076      	b.n	8010720 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010636:	b29a      	uxth	r2, r3
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010640:	b2da      	uxtb	r2, r3
 8010642:	2380      	movs	r3, #128	@ 0x80
 8010644:	049c      	lsls	r4, r3, #18
 8010646:	230a      	movs	r3, #10
 8010648:	18fb      	adds	r3, r7, r3
 801064a:	8819      	ldrh	r1, [r3, #0]
 801064c:	68f8      	ldr	r0, [r7, #12]
 801064e:	4b4b      	ldr	r3, [pc, #300]	@ (801077c <HAL_I2C_Master_Receive+0x208>)
 8010650:	9300      	str	r3, [sp, #0]
 8010652:	0023      	movs	r3, r4
 8010654:	f002 f89e 	bl	8012794 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8010658:	e062      	b.n	8010720 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801065a:	697a      	ldr	r2, [r7, #20]
 801065c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	0018      	movs	r0, r3
 8010662:	f001 ff1d 	bl	80124a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8010666:	1e03      	subs	r3, r0, #0
 8010668:	d001      	beq.n	801066e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 801066a:	2301      	movs	r3, #1
 801066c:	e082      	b.n	8010774 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010678:	b2d2      	uxtb	r2, r2
 801067a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010680:	1c5a      	adds	r2, r3, #1
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801068a:	3b01      	subs	r3, #1
 801068c:	b29a      	uxth	r2, r3
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010696:	b29b      	uxth	r3, r3
 8010698:	3b01      	subs	r3, #1
 801069a:	b29a      	uxth	r2, r3
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d03a      	beq.n	8010720 <HAL_I2C_Master_Receive+0x1ac>
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d136      	bne.n	8010720 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80106b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80106b4:	68f8      	ldr	r0, [r7, #12]
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	9300      	str	r3, [sp, #0]
 80106ba:	0013      	movs	r3, r2
 80106bc:	2200      	movs	r2, #0
 80106be:	2180      	movs	r1, #128	@ 0x80
 80106c0:	f001 fe16 	bl	80122f0 <I2C_WaitOnFlagUntilTimeout>
 80106c4:	1e03      	subs	r3, r0, #0
 80106c6:	d001      	beq.n	80106cc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80106c8:	2301      	movs	r3, #1
 80106ca:	e053      	b.n	8010774 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106d0:	b29b      	uxth	r3, r3
 80106d2:	2bff      	cmp	r3, #255	@ 0xff
 80106d4:	d911      	bls.n	80106fa <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	22ff      	movs	r2, #255	@ 0xff
 80106da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106e0:	b2da      	uxtb	r2, r3
 80106e2:	2380      	movs	r3, #128	@ 0x80
 80106e4:	045c      	lsls	r4, r3, #17
 80106e6:	230a      	movs	r3, #10
 80106e8:	18fb      	adds	r3, r7, r3
 80106ea:	8819      	ldrh	r1, [r3, #0]
 80106ec:	68f8      	ldr	r0, [r7, #12]
 80106ee:	2300      	movs	r3, #0
 80106f0:	9300      	str	r3, [sp, #0]
 80106f2:	0023      	movs	r3, r4
 80106f4:	f002 f84e 	bl	8012794 <I2C_TransferConfig>
 80106f8:	e012      	b.n	8010720 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80106fe:	b29a      	uxth	r2, r3
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010708:	b2da      	uxtb	r2, r3
 801070a:	2380      	movs	r3, #128	@ 0x80
 801070c:	049c      	lsls	r4, r3, #18
 801070e:	230a      	movs	r3, #10
 8010710:	18fb      	adds	r3, r7, r3
 8010712:	8819      	ldrh	r1, [r3, #0]
 8010714:	68f8      	ldr	r0, [r7, #12]
 8010716:	2300      	movs	r3, #0
 8010718:	9300      	str	r3, [sp, #0]
 801071a:	0023      	movs	r3, r4
 801071c:	f002 f83a 	bl	8012794 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010724:	b29b      	uxth	r3, r3
 8010726:	2b00      	cmp	r3, #0
 8010728:	d197      	bne.n	801065a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801072a:	697a      	ldr	r2, [r7, #20]
 801072c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	0018      	movs	r0, r3
 8010732:	f001 fe71 	bl	8012418 <I2C_WaitOnSTOPFlagUntilTimeout>
 8010736:	1e03      	subs	r3, r0, #0
 8010738:	d001      	beq.n	801073e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 801073a:	2301      	movs	r3, #1
 801073c:	e01a      	b.n	8010774 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	2220      	movs	r2, #32
 8010744:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	685a      	ldr	r2, [r3, #4]
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	490b      	ldr	r1, [pc, #44]	@ (8010780 <HAL_I2C_Master_Receive+0x20c>)
 8010752:	400a      	ands	r2, r1
 8010754:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	2241      	movs	r2, #65	@ 0x41
 801075a:	2120      	movs	r1, #32
 801075c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	2242      	movs	r2, #66	@ 0x42
 8010762:	2100      	movs	r1, #0
 8010764:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	2240      	movs	r2, #64	@ 0x40
 801076a:	2100      	movs	r1, #0
 801076c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 801076e:	2300      	movs	r3, #0
 8010770:	e000      	b.n	8010774 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8010772:	2302      	movs	r3, #2
  }
}
 8010774:	0018      	movs	r0, r3
 8010776:	46bd      	mov	sp, r7
 8010778:	b007      	add	sp, #28
 801077a:	bd90      	pop	{r4, r7, pc}
 801077c:	80002400 	.word	0x80002400
 8010780:	fe00e800 	.word	0xfe00e800

08010784 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8010784:	b5b0      	push	{r4, r5, r7, lr}
 8010786:	b088      	sub	sp, #32
 8010788:	af02      	add	r7, sp, #8
 801078a:	60f8      	str	r0, [r7, #12]
 801078c:	0008      	movs	r0, r1
 801078e:	607a      	str	r2, [r7, #4]
 8010790:	0019      	movs	r1, r3
 8010792:	230a      	movs	r3, #10
 8010794:	18fb      	adds	r3, r7, r3
 8010796:	1c02      	adds	r2, r0, #0
 8010798:	801a      	strh	r2, [r3, #0]
 801079a:	2308      	movs	r3, #8
 801079c:	18fb      	adds	r3, r7, r3
 801079e:	1c0a      	adds	r2, r1, #0
 80107a0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2241      	movs	r2, #65	@ 0x41
 80107a6:	5c9b      	ldrb	r3, [r3, r2]
 80107a8:	b2db      	uxtb	r3, r3
 80107aa:	2b20      	cmp	r3, #32
 80107ac:	d000      	beq.n	80107b0 <HAL_I2C_Master_Transmit_DMA+0x2c>
 80107ae:	e0dd      	b.n	801096c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	699a      	ldr	r2, [r3, #24]
 80107b6:	2380      	movs	r3, #128	@ 0x80
 80107b8:	021b      	lsls	r3, r3, #8
 80107ba:	401a      	ands	r2, r3
 80107bc:	2380      	movs	r3, #128	@ 0x80
 80107be:	021b      	lsls	r3, r3, #8
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d101      	bne.n	80107c8 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 80107c4:	2302      	movs	r3, #2
 80107c6:	e0d2      	b.n	801096e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	2240      	movs	r2, #64	@ 0x40
 80107cc:	5c9b      	ldrb	r3, [r3, r2]
 80107ce:	2b01      	cmp	r3, #1
 80107d0:	d101      	bne.n	80107d6 <HAL_I2C_Master_Transmit_DMA+0x52>
 80107d2:	2302      	movs	r3, #2
 80107d4:	e0cb      	b.n	801096e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	2240      	movs	r2, #64	@ 0x40
 80107da:	2101      	movs	r1, #1
 80107dc:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	2241      	movs	r2, #65	@ 0x41
 80107e2:	2121      	movs	r1, #33	@ 0x21
 80107e4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	2242      	movs	r2, #66	@ 0x42
 80107ea:	2110      	movs	r1, #16
 80107ec:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	2200      	movs	r2, #0
 80107f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	687a      	ldr	r2, [r7, #4]
 80107f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2208      	movs	r2, #8
 80107fe:	18ba      	adds	r2, r7, r2
 8010800:	8812      	ldrh	r2, [r2, #0]
 8010802:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	4a5c      	ldr	r2, [pc, #368]	@ (8010978 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8010808:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	4a5b      	ldr	r2, [pc, #364]	@ (801097c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 801080e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010814:	b29b      	uxth	r3, r3
 8010816:	2bff      	cmp	r3, #255	@ 0xff
 8010818:	d906      	bls.n	8010828 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	22ff      	movs	r2, #255	@ 0xff
 801081e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010820:	2380      	movs	r3, #128	@ 0x80
 8010822:	045b      	lsls	r3, r3, #17
 8010824:	617b      	str	r3, [r7, #20]
 8010826:	e007      	b.n	8010838 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801082c:	b29a      	uxth	r2, r3
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010832:	2380      	movs	r3, #128	@ 0x80
 8010834:	049b      	lsls	r3, r3, #18
 8010836:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801083c:	2b00      	cmp	r3, #0
 801083e:	d100      	bne.n	8010842 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8010840:	e078      	b.n	8010934 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010846:	2b00      	cmp	r3, #0
 8010848:	d023      	beq.n	8010892 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801084e:	4a4c      	ldr	r2, [pc, #304]	@ (8010980 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8010850:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010856:	4a4b      	ldr	r2, [pc, #300]	@ (8010984 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8010858:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801085e:	2200      	movs	r2, #0
 8010860:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010866:	2200      	movs	r2, #0
 8010868:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801086e:	6879      	ldr	r1, [r7, #4]
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	3328      	adds	r3, #40	@ 0x28
 8010876:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 801087c:	2513      	movs	r5, #19
 801087e:	197c      	adds	r4, r7, r5
 8010880:	f7fe ff62 	bl	800f748 <HAL_DMA_Start_IT>
 8010884:	0003      	movs	r3, r0
 8010886:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010888:	197b      	adds	r3, r7, r5
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d13d      	bne.n	801090c <HAL_I2C_Master_Transmit_DMA+0x188>
 8010890:	e013      	b.n	80108ba <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2241      	movs	r2, #65	@ 0x41
 8010896:	2120      	movs	r1, #32
 8010898:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	2242      	movs	r2, #66	@ 0x42
 801089e:	2100      	movs	r1, #0
 80108a0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108a6:	2280      	movs	r2, #128	@ 0x80
 80108a8:	431a      	orrs	r2, r3
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	2240      	movs	r2, #64	@ 0x40
 80108b2:	2100      	movs	r1, #0
 80108b4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80108b6:	2301      	movs	r3, #1
 80108b8:	e059      	b.n	801096e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108be:	b2da      	uxtb	r2, r3
 80108c0:	697c      	ldr	r4, [r7, #20]
 80108c2:	230a      	movs	r3, #10
 80108c4:	18fb      	adds	r3, r7, r3
 80108c6:	8819      	ldrh	r1, [r3, #0]
 80108c8:	68f8      	ldr	r0, [r7, #12]
 80108ca:	4b2f      	ldr	r3, [pc, #188]	@ (8010988 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80108cc:	9300      	str	r3, [sp, #0]
 80108ce:	0023      	movs	r3, r4
 80108d0:	f001 ff60 	bl	8012794 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80108d8:	b29a      	uxth	r2, r3
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108de:	1ad3      	subs	r3, r2, r3
 80108e0:	b29a      	uxth	r2, r3
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	2240      	movs	r2, #64	@ 0x40
 80108ea:	2100      	movs	r1, #0
 80108ec:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	2110      	movs	r1, #16
 80108f2:	0018      	movs	r0, r3
 80108f4:	f001 ff88 	bl	8012808 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	681a      	ldr	r2, [r3, #0]
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	2180      	movs	r1, #128	@ 0x80
 8010904:	01c9      	lsls	r1, r1, #7
 8010906:	430a      	orrs	r2, r1
 8010908:	601a      	str	r2, [r3, #0]
 801090a:	e02d      	b.n	8010968 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	2241      	movs	r2, #65	@ 0x41
 8010910:	2120      	movs	r1, #32
 8010912:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	2242      	movs	r2, #66	@ 0x42
 8010918:	2100      	movs	r1, #0
 801091a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010920:	2210      	movs	r2, #16
 8010922:	431a      	orrs	r2, r3
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	2240      	movs	r2, #64	@ 0x40
 801092c:	2100      	movs	r1, #0
 801092e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010930:	2301      	movs	r3, #1
 8010932:	e01c      	b.n	801096e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	4a15      	ldr	r2, [pc, #84]	@ (801098c <HAL_I2C_Master_Transmit_DMA+0x208>)
 8010938:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801093e:	b2da      	uxtb	r2, r3
 8010940:	2380      	movs	r3, #128	@ 0x80
 8010942:	049c      	lsls	r4, r3, #18
 8010944:	230a      	movs	r3, #10
 8010946:	18fb      	adds	r3, r7, r3
 8010948:	8819      	ldrh	r1, [r3, #0]
 801094a:	68f8      	ldr	r0, [r7, #12]
 801094c:	4b0e      	ldr	r3, [pc, #56]	@ (8010988 <HAL_I2C_Master_Transmit_DMA+0x204>)
 801094e:	9300      	str	r3, [sp, #0]
 8010950:	0023      	movs	r3, r4
 8010952:	f001 ff1f 	bl	8012794 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	2240      	movs	r2, #64	@ 0x40
 801095a:	2100      	movs	r1, #0
 801095c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	2101      	movs	r1, #1
 8010962:	0018      	movs	r0, r3
 8010964:	f001 ff50 	bl	8012808 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010968:	2300      	movs	r3, #0
 801096a:	e000      	b.n	801096e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801096c:	2302      	movs	r3, #2
  }
}
 801096e:	0018      	movs	r0, r3
 8010970:	46bd      	mov	sp, r7
 8010972:	b006      	add	sp, #24
 8010974:	bdb0      	pop	{r4, r5, r7, pc}
 8010976:	46c0      	nop			@ (mov r8, r8)
 8010978:	ffff0000 	.word	0xffff0000
 801097c:	08011189 	.word	0x08011189
 8010980:	08012141 	.word	0x08012141
 8010984:	08012281 	.word	0x08012281
 8010988:	80002000 	.word	0x80002000
 801098c:	08010d35 	.word	0x08010d35

08010990 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8010990:	b5b0      	push	{r4, r5, r7, lr}
 8010992:	b088      	sub	sp, #32
 8010994:	af02      	add	r7, sp, #8
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	0008      	movs	r0, r1
 801099a:	607a      	str	r2, [r7, #4]
 801099c:	0019      	movs	r1, r3
 801099e:	230a      	movs	r3, #10
 80109a0:	18fb      	adds	r3, r7, r3
 80109a2:	1c02      	adds	r2, r0, #0
 80109a4:	801a      	strh	r2, [r3, #0]
 80109a6:	2308      	movs	r3, #8
 80109a8:	18fb      	adds	r3, r7, r3
 80109aa:	1c0a      	adds	r2, r1, #0
 80109ac:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	2241      	movs	r2, #65	@ 0x41
 80109b2:	5c9b      	ldrb	r3, [r3, r2]
 80109b4:	b2db      	uxtb	r3, r3
 80109b6:	2b20      	cmp	r3, #32
 80109b8:	d000      	beq.n	80109bc <HAL_I2C_Master_Receive_DMA+0x2c>
 80109ba:	e0dd      	b.n	8010b78 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	699a      	ldr	r2, [r3, #24]
 80109c2:	2380      	movs	r3, #128	@ 0x80
 80109c4:	021b      	lsls	r3, r3, #8
 80109c6:	401a      	ands	r2, r3
 80109c8:	2380      	movs	r3, #128	@ 0x80
 80109ca:	021b      	lsls	r3, r3, #8
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d101      	bne.n	80109d4 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 80109d0:	2302      	movs	r3, #2
 80109d2:	e0d2      	b.n	8010b7a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	2240      	movs	r2, #64	@ 0x40
 80109d8:	5c9b      	ldrb	r3, [r3, r2]
 80109da:	2b01      	cmp	r3, #1
 80109dc:	d101      	bne.n	80109e2 <HAL_I2C_Master_Receive_DMA+0x52>
 80109de:	2302      	movs	r3, #2
 80109e0:	e0cb      	b.n	8010b7a <HAL_I2C_Master_Receive_DMA+0x1ea>
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	2240      	movs	r2, #64	@ 0x40
 80109e6:	2101      	movs	r1, #1
 80109e8:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2241      	movs	r2, #65	@ 0x41
 80109ee:	2122      	movs	r1, #34	@ 0x22
 80109f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	2242      	movs	r2, #66	@ 0x42
 80109f6:	2110      	movs	r1, #16
 80109f8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	2200      	movs	r2, #0
 80109fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	687a      	ldr	r2, [r7, #4]
 8010a04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	2208      	movs	r2, #8
 8010a0a:	18ba      	adds	r2, r7, r2
 8010a0c:	8812      	ldrh	r2, [r2, #0]
 8010a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	4a5c      	ldr	r2, [pc, #368]	@ (8010b84 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8010a14:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	4a5b      	ldr	r2, [pc, #364]	@ (8010b88 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8010a1a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a20:	b29b      	uxth	r3, r3
 8010a22:	2bff      	cmp	r3, #255	@ 0xff
 8010a24:	d906      	bls.n	8010a34 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	22ff      	movs	r2, #255	@ 0xff
 8010a2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8010a2c:	2380      	movs	r3, #128	@ 0x80
 8010a2e:	045b      	lsls	r3, r3, #17
 8010a30:	617b      	str	r3, [r7, #20]
 8010a32:	e007      	b.n	8010a44 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a38:	b29a      	uxth	r2, r3
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8010a3e:	2380      	movs	r3, #128	@ 0x80
 8010a40:	049b      	lsls	r3, r3, #18
 8010a42:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d100      	bne.n	8010a4e <HAL_I2C_Master_Receive_DMA+0xbe>
 8010a4c:	e078      	b.n	8010b40 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d023      	beq.n	8010a9e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a5a:	4a4c      	ldr	r2, [pc, #304]	@ (8010b8c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8010a5c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a62:	4a4b      	ldr	r2, [pc, #300]	@ (8010b90 <HAL_I2C_Master_Receive_DMA+0x200>)
 8010a64:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a72:	2200      	movs	r2, #0
 8010a74:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	3324      	adds	r3, #36	@ 0x24
 8010a80:	0019      	movs	r1, r3
 8010a82:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8010a88:	2513      	movs	r5, #19
 8010a8a:	197c      	adds	r4, r7, r5
 8010a8c:	f7fe fe5c 	bl	800f748 <HAL_DMA_Start_IT>
 8010a90:	0003      	movs	r3, r0
 8010a92:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8010a94:	197b      	adds	r3, r7, r5
 8010a96:	781b      	ldrb	r3, [r3, #0]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d13d      	bne.n	8010b18 <HAL_I2C_Master_Receive_DMA+0x188>
 8010a9c:	e013      	b.n	8010ac6 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	2241      	movs	r2, #65	@ 0x41
 8010aa2:	2120      	movs	r1, #32
 8010aa4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	2242      	movs	r2, #66	@ 0x42
 8010aaa:	2100      	movs	r1, #0
 8010aac:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ab2:	2280      	movs	r2, #128	@ 0x80
 8010ab4:	431a      	orrs	r2, r3
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2240      	movs	r2, #64	@ 0x40
 8010abe:	2100      	movs	r1, #0
 8010ac0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	e059      	b.n	8010b7a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010aca:	b2da      	uxtb	r2, r3
 8010acc:	697c      	ldr	r4, [r7, #20]
 8010ace:	230a      	movs	r3, #10
 8010ad0:	18fb      	adds	r3, r7, r3
 8010ad2:	8819      	ldrh	r1, [r3, #0]
 8010ad4:	68f8      	ldr	r0, [r7, #12]
 8010ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8010b94 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010ad8:	9300      	str	r3, [sp, #0]
 8010ada:	0023      	movs	r3, r4
 8010adc:	f001 fe5a 	bl	8012794 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ae4:	b29a      	uxth	r2, r3
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010aea:	1ad3      	subs	r3, r2, r3
 8010aec:	b29a      	uxth	r2, r3
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	2240      	movs	r2, #64	@ 0x40
 8010af6:	2100      	movs	r1, #0
 8010af8:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	2110      	movs	r1, #16
 8010afe:	0018      	movs	r0, r3
 8010b00:	f001 fe82 	bl	8012808 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	2180      	movs	r1, #128	@ 0x80
 8010b10:	0209      	lsls	r1, r1, #8
 8010b12:	430a      	orrs	r2, r1
 8010b14:	601a      	str	r2, [r3, #0]
 8010b16:	e02d      	b.n	8010b74 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	2241      	movs	r2, #65	@ 0x41
 8010b1c:	2120      	movs	r1, #32
 8010b1e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	2242      	movs	r2, #66	@ 0x42
 8010b24:	2100      	movs	r1, #0
 8010b26:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b2c:	2210      	movs	r2, #16
 8010b2e:	431a      	orrs	r2, r3
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	2240      	movs	r2, #64	@ 0x40
 8010b38:	2100      	movs	r1, #0
 8010b3a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	e01c      	b.n	8010b7a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	4a15      	ldr	r2, [pc, #84]	@ (8010b98 <HAL_I2C_Master_Receive_DMA+0x208>)
 8010b44:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010b4a:	b2da      	uxtb	r2, r3
 8010b4c:	2380      	movs	r3, #128	@ 0x80
 8010b4e:	049c      	lsls	r4, r3, #18
 8010b50:	230a      	movs	r3, #10
 8010b52:	18fb      	adds	r3, r7, r3
 8010b54:	8819      	ldrh	r1, [r3, #0]
 8010b56:	68f8      	ldr	r0, [r7, #12]
 8010b58:	4b0e      	ldr	r3, [pc, #56]	@ (8010b94 <HAL_I2C_Master_Receive_DMA+0x204>)
 8010b5a:	9300      	str	r3, [sp, #0]
 8010b5c:	0023      	movs	r3, r4
 8010b5e:	f001 fe19 	bl	8012794 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	2240      	movs	r2, #64	@ 0x40
 8010b66:	2100      	movs	r1, #0
 8010b68:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	2101      	movs	r1, #1
 8010b6e:	0018      	movs	r0, r3
 8010b70:	f001 fe4a 	bl	8012808 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8010b74:	2300      	movs	r3, #0
 8010b76:	e000      	b.n	8010b7a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8010b78:	2302      	movs	r3, #2
  }
}
 8010b7a:	0018      	movs	r0, r3
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	b006      	add	sp, #24
 8010b80:	bdb0      	pop	{r4, r5, r7, pc}
 8010b82:	46c0      	nop			@ (mov r8, r8)
 8010b84:	ffff0000 	.word	0xffff0000
 8010b88:	08011189 	.word	0x08011189
 8010b8c:	080121e1 	.word	0x080121e1
 8010b90:	08012281 	.word	0x08012281
 8010b94:	80002400 	.word	0x80002400
 8010b98:	08010d35 	.word	0x08010d35

08010b9c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b084      	sub	sp, #16
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	699b      	ldr	r3, [r3, #24]
 8010baa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d005      	beq.n	8010bc8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bc0:	68ba      	ldr	r2, [r7, #8]
 8010bc2:	68f9      	ldr	r1, [r7, #12]
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	4798      	blx	r3
  }
}
 8010bc8:	46c0      	nop			@ (mov r8, r8)
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	b004      	add	sp, #16
 8010bce:	bd80      	pop	{r7, pc}

08010bd0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b086      	sub	sp, #24
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	699b      	ldr	r3, [r3, #24]
 8010bde:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010be8:	697a      	ldr	r2, [r7, #20]
 8010bea:	2380      	movs	r3, #128	@ 0x80
 8010bec:	005b      	lsls	r3, r3, #1
 8010bee:	4013      	ands	r3, r2
 8010bf0:	d00e      	beq.n	8010c10 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010bf2:	693b      	ldr	r3, [r7, #16]
 8010bf4:	2280      	movs	r2, #128	@ 0x80
 8010bf6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8010bf8:	d00a      	beq.n	8010c10 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010bfe:	2201      	movs	r2, #1
 8010c00:	431a      	orrs	r2, r3
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	2280      	movs	r2, #128	@ 0x80
 8010c0c:	0052      	lsls	r2, r2, #1
 8010c0e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010c10:	697a      	ldr	r2, [r7, #20]
 8010c12:	2380      	movs	r3, #128	@ 0x80
 8010c14:	00db      	lsls	r3, r3, #3
 8010c16:	4013      	ands	r3, r2
 8010c18:	d00e      	beq.n	8010c38 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010c1a:	693b      	ldr	r3, [r7, #16]
 8010c1c:	2280      	movs	r2, #128	@ 0x80
 8010c1e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8010c20:	d00a      	beq.n	8010c38 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c26:	2208      	movs	r2, #8
 8010c28:	431a      	orrs	r2, r3
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	2280      	movs	r2, #128	@ 0x80
 8010c34:	00d2      	lsls	r2, r2, #3
 8010c36:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010c38:	697a      	ldr	r2, [r7, #20]
 8010c3a:	2380      	movs	r3, #128	@ 0x80
 8010c3c:	009b      	lsls	r3, r3, #2
 8010c3e:	4013      	ands	r3, r2
 8010c40:	d00e      	beq.n	8010c60 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8010c42:	693b      	ldr	r3, [r7, #16]
 8010c44:	2280      	movs	r2, #128	@ 0x80
 8010c46:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8010c48:	d00a      	beq.n	8010c60 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c4e:	2202      	movs	r2, #2
 8010c50:	431a      	orrs	r2, r3
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	2280      	movs	r2, #128	@ 0x80
 8010c5c:	0092      	lsls	r2, r2, #2
 8010c5e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c64:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	220b      	movs	r2, #11
 8010c6a:	4013      	ands	r3, r2
 8010c6c:	d005      	beq.n	8010c7a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8010c6e:	68fa      	ldr	r2, [r7, #12]
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	0011      	movs	r1, r2
 8010c74:	0018      	movs	r0, r3
 8010c76:	f001 f915 	bl	8011ea4 <I2C_ITError>
  }
}
 8010c7a:	46c0      	nop			@ (mov r8, r8)
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	b006      	add	sp, #24
 8010c80:	bd80      	pop	{r7, pc}

08010c82 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010c82:	b580      	push	{r7, lr}
 8010c84:	b082      	sub	sp, #8
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8010c8a:	46c0      	nop			@ (mov r8, r8)
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	b002      	add	sp, #8
 8010c90:	bd80      	pop	{r7, pc}

08010c92 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010c92:	b580      	push	{r7, lr}
 8010c94:	b082      	sub	sp, #8
 8010c96:	af00      	add	r7, sp, #0
 8010c98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8010c9a:	46c0      	nop			@ (mov r8, r8)
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	b002      	add	sp, #8
 8010ca0:	bd80      	pop	{r7, pc}

08010ca2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010ca2:	b580      	push	{r7, lr}
 8010ca4:	b082      	sub	sp, #8
 8010ca6:	af00      	add	r7, sp, #0
 8010ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8010caa:	46c0      	nop			@ (mov r8, r8)
 8010cac:	46bd      	mov	sp, r7
 8010cae:	b002      	add	sp, #8
 8010cb0:	bd80      	pop	{r7, pc}

08010cb2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010cb2:	b580      	push	{r7, lr}
 8010cb4:	b082      	sub	sp, #8
 8010cb6:	af00      	add	r7, sp, #0
 8010cb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8010cba:	46c0      	nop			@ (mov r8, r8)
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	b002      	add	sp, #8
 8010cc0:	bd80      	pop	{r7, pc}

08010cc2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8010cc2:	b580      	push	{r7, lr}
 8010cc4:	b082      	sub	sp, #8
 8010cc6:	af00      	add	r7, sp, #0
 8010cc8:	6078      	str	r0, [r7, #4]
 8010cca:	0008      	movs	r0, r1
 8010ccc:	0011      	movs	r1, r2
 8010cce:	1cfb      	adds	r3, r7, #3
 8010cd0:	1c02      	adds	r2, r0, #0
 8010cd2:	701a      	strb	r2, [r3, #0]
 8010cd4:	003b      	movs	r3, r7
 8010cd6:	1c0a      	adds	r2, r1, #0
 8010cd8:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8010cda:	46c0      	nop			@ (mov r8, r8)
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	b002      	add	sp, #8
 8010ce0:	bd80      	pop	{r7, pc}

08010ce2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010ce2:	b580      	push	{r7, lr}
 8010ce4:	b082      	sub	sp, #8
 8010ce6:	af00      	add	r7, sp, #0
 8010ce8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8010cea:	46c0      	nop			@ (mov r8, r8)
 8010cec:	46bd      	mov	sp, r7
 8010cee:	b002      	add	sp, #8
 8010cf0:	bd80      	pop	{r7, pc}

08010cf2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010cf2:	b580      	push	{r7, lr}
 8010cf4:	b082      	sub	sp, #8
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8010cfa:	46c0      	nop			@ (mov r8, r8)
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	b002      	add	sp, #8
 8010d00:	bd80      	pop	{r7, pc}

08010d02 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d02:	b580      	push	{r7, lr}
 8010d04:	b082      	sub	sp, #8
 8010d06:	af00      	add	r7, sp, #0
 8010d08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8010d0a:	46c0      	nop			@ (mov r8, r8)
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	b002      	add	sp, #8
 8010d10:	bd80      	pop	{r7, pc}

08010d12 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010d12:	b580      	push	{r7, lr}
 8010d14:	b082      	sub	sp, #8
 8010d16:	af00      	add	r7, sp, #0
 8010d18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8010d1a:	46c0      	nop			@ (mov r8, r8)
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	b002      	add	sp, #8
 8010d20:	bd80      	pop	{r7, pc}

08010d22 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010d22:	b580      	push	{r7, lr}
 8010d24:	b082      	sub	sp, #8
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8010d2a:	46c0      	nop			@ (mov r8, r8)
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	b002      	add	sp, #8
 8010d30:	bd80      	pop	{r7, pc}
	...

08010d34 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010d34:	b590      	push	{r4, r7, lr}
 8010d36:	b089      	sub	sp, #36	@ 0x24
 8010d38:	af02      	add	r7, sp, #8
 8010d3a:	60f8      	str	r0, [r7, #12]
 8010d3c:	60b9      	str	r1, [r7, #8]
 8010d3e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8010d40:	68bb      	ldr	r3, [r7, #8]
 8010d42:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	2240      	movs	r2, #64	@ 0x40
 8010d48:	5c9b      	ldrb	r3, [r3, r2]
 8010d4a:	2b01      	cmp	r3, #1
 8010d4c:	d101      	bne.n	8010d52 <I2C_Master_ISR_IT+0x1e>
 8010d4e:	2302      	movs	r3, #2
 8010d50:	e113      	b.n	8010f7a <I2C_Master_ISR_IT+0x246>
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	2240      	movs	r2, #64	@ 0x40
 8010d56:	2101      	movs	r1, #1
 8010d58:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	2210      	movs	r2, #16
 8010d5e:	4013      	ands	r3, r2
 8010d60:	d012      	beq.n	8010d88 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	2210      	movs	r2, #16
 8010d66:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010d68:	d00e      	beq.n	8010d88 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	2210      	movs	r2, #16
 8010d70:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d76:	2204      	movs	r2, #4
 8010d78:	431a      	orrs	r2, r3
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	0018      	movs	r0, r3
 8010d82:	f001 f9ba 	bl	80120fa <I2C_Flush_TXDR>
 8010d86:	e0e5      	b.n	8010f54 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	2204      	movs	r2, #4
 8010d8c:	4013      	ands	r3, r2
 8010d8e:	d021      	beq.n	8010dd4 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2204      	movs	r2, #4
 8010d94:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8010d96:	d01d      	beq.n	8010dd4 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	2204      	movs	r2, #4
 8010d9c:	4393      	bics	r3, r2
 8010d9e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010daa:	b2d2      	uxtb	r2, r2
 8010dac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010db2:	1c5a      	adds	r2, r3, #1
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010dbc:	3b01      	subs	r3, #1
 8010dbe:	b29a      	uxth	r2, r3
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010dc8:	b29b      	uxth	r3, r3
 8010dca:	3b01      	subs	r3, #1
 8010dcc:	b29a      	uxth	r2, r3
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010dd2:	e0bf      	b.n	8010f54 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	2202      	movs	r2, #2
 8010dd8:	4013      	ands	r3, r2
 8010dda:	d01c      	beq.n	8010e16 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2202      	movs	r2, #2
 8010de0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8010de2:	d018      	beq.n	8010e16 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010de8:	781a      	ldrb	r2, [r3, #0]
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010df4:	1c5a      	adds	r2, r3, #1
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010dfe:	3b01      	subs	r3, #1
 8010e00:	b29a      	uxth	r2, r3
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010e0a:	b29b      	uxth	r3, r3
 8010e0c:	3b01      	subs	r3, #1
 8010e0e:	b29a      	uxth	r2, r3
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010e14:	e09e      	b.n	8010f54 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	2280      	movs	r2, #128	@ 0x80
 8010e1a:	4013      	ands	r3, r2
 8010e1c:	d100      	bne.n	8010e20 <I2C_Master_ISR_IT+0xec>
 8010e1e:	e069      	b.n	8010ef4 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2240      	movs	r2, #64	@ 0x40
 8010e24:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8010e26:	d065      	beq.n	8010ef4 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010e2c:	b29b      	uxth	r3, r3
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d04a      	beq.n	8010ec8 <I2C_Master_ISR_IT+0x194>
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d146      	bne.n	8010ec8 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	685b      	ldr	r3, [r3, #4]
 8010e40:	b29a      	uxth	r2, r3
 8010e42:	2112      	movs	r1, #18
 8010e44:	187b      	adds	r3, r7, r1
 8010e46:	0592      	lsls	r2, r2, #22
 8010e48:	0d92      	lsrs	r2, r2, #22
 8010e4a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	2bff      	cmp	r3, #255	@ 0xff
 8010e54:	d910      	bls.n	8010e78 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	22ff      	movs	r2, #255	@ 0xff
 8010e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e60:	b2da      	uxtb	r2, r3
 8010e62:	2380      	movs	r3, #128	@ 0x80
 8010e64:	045c      	lsls	r4, r3, #17
 8010e66:	187b      	adds	r3, r7, r1
 8010e68:	8819      	ldrh	r1, [r3, #0]
 8010e6a:	68f8      	ldr	r0, [r7, #12]
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	9300      	str	r3, [sp, #0]
 8010e70:	0023      	movs	r3, r4
 8010e72:	f001 fc8f 	bl	8012794 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010e76:	e03c      	b.n	8010ef2 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010e7c:	b29a      	uxth	r2, r3
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e86:	4a3f      	ldr	r2, [pc, #252]	@ (8010f84 <I2C_Master_ISR_IT+0x250>)
 8010e88:	4293      	cmp	r3, r2
 8010e8a:	d00e      	beq.n	8010eaa <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e90:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010e96:	2312      	movs	r3, #18
 8010e98:	18fb      	adds	r3, r7, r3
 8010e9a:	8819      	ldrh	r1, [r3, #0]
 8010e9c:	68f8      	ldr	r0, [r7, #12]
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	9300      	str	r3, [sp, #0]
 8010ea2:	0023      	movs	r3, r4
 8010ea4:	f001 fc76 	bl	8012794 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010ea8:	e023      	b.n	8010ef2 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010eae:	b2da      	uxtb	r2, r3
 8010eb0:	2380      	movs	r3, #128	@ 0x80
 8010eb2:	049c      	lsls	r4, r3, #18
 8010eb4:	2312      	movs	r3, #18
 8010eb6:	18fb      	adds	r3, r7, r3
 8010eb8:	8819      	ldrh	r1, [r3, #0]
 8010eba:	68f8      	ldr	r0, [r7, #12]
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	9300      	str	r3, [sp, #0]
 8010ec0:	0023      	movs	r3, r4
 8010ec2:	f001 fc67 	bl	8012794 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010ec6:	e014      	b.n	8010ef2 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	685a      	ldr	r2, [r3, #4]
 8010ece:	2380      	movs	r3, #128	@ 0x80
 8010ed0:	049b      	lsls	r3, r3, #18
 8010ed2:	401a      	ands	r2, r3
 8010ed4:	2380      	movs	r3, #128	@ 0x80
 8010ed6:	049b      	lsls	r3, r3, #18
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	d004      	beq.n	8010ee6 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	0018      	movs	r0, r3
 8010ee0:	f000 fcf4 	bl	80118cc <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010ee4:	e036      	b.n	8010f54 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	2140      	movs	r1, #64	@ 0x40
 8010eea:	0018      	movs	r0, r3
 8010eec:	f000 ffda 	bl	8011ea4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8010ef0:	e030      	b.n	8010f54 <I2C_Master_ISR_IT+0x220>
 8010ef2:	e02f      	b.n	8010f54 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	2240      	movs	r2, #64	@ 0x40
 8010ef8:	4013      	ands	r3, r2
 8010efa:	d02b      	beq.n	8010f54 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2240      	movs	r2, #64	@ 0x40
 8010f00:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8010f02:	d027      	beq.n	8010f54 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f08:	b29b      	uxth	r3, r3
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d11d      	bne.n	8010f4a <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	685a      	ldr	r2, [r3, #4]
 8010f14:	2380      	movs	r3, #128	@ 0x80
 8010f16:	049b      	lsls	r3, r3, #18
 8010f18:	401a      	ands	r2, r3
 8010f1a:	2380      	movs	r3, #128	@ 0x80
 8010f1c:	049b      	lsls	r3, r3, #18
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	d018      	beq.n	8010f54 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f26:	4a17      	ldr	r2, [pc, #92]	@ (8010f84 <I2C_Master_ISR_IT+0x250>)
 8010f28:	4293      	cmp	r3, r2
 8010f2a:	d109      	bne.n	8010f40 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	685a      	ldr	r2, [r3, #4]
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	2180      	movs	r1, #128	@ 0x80
 8010f38:	01c9      	lsls	r1, r1, #7
 8010f3a:	430a      	orrs	r2, r1
 8010f3c:	605a      	str	r2, [r3, #4]
 8010f3e:	e009      	b.n	8010f54 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	0018      	movs	r0, r3
 8010f44:	f000 fcc2 	bl	80118cc <I2C_ITMasterSeqCplt>
 8010f48:	e004      	b.n	8010f54 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	2140      	movs	r1, #64	@ 0x40
 8010f4e:	0018      	movs	r0, r3
 8010f50:	f000 ffa8 	bl	8011ea4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010f54:	697b      	ldr	r3, [r7, #20]
 8010f56:	2220      	movs	r2, #32
 8010f58:	4013      	ands	r3, r2
 8010f5a:	d009      	beq.n	8010f70 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2220      	movs	r2, #32
 8010f60:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010f62:	d005      	beq.n	8010f70 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8010f64:	697a      	ldr	r2, [r7, #20]
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	0011      	movs	r1, r2
 8010f6a:	0018      	movs	r0, r3
 8010f6c:	f000 fd54 	bl	8011a18 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	2240      	movs	r2, #64	@ 0x40
 8010f74:	2100      	movs	r1, #0
 8010f76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010f78:	2300      	movs	r3, #0
}
 8010f7a:	0018      	movs	r0, r3
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	b007      	add	sp, #28
 8010f80:	bd90      	pop	{r4, r7, pc}
 8010f82:	46c0      	nop			@ (mov r8, r8)
 8010f84:	ffff0000 	.word	0xffff0000

08010f88 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b086      	sub	sp, #24
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	60f8      	str	r0, [r7, #12]
 8010f90:	60b9      	str	r1, [r7, #8]
 8010f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f98:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	2240      	movs	r2, #64	@ 0x40
 8010fa2:	5c9b      	ldrb	r3, [r3, r2]
 8010fa4:	2b01      	cmp	r3, #1
 8010fa6:	d101      	bne.n	8010fac <I2C_Slave_ISR_IT+0x24>
 8010fa8:	2302      	movs	r3, #2
 8010faa:	e0e6      	b.n	801117a <I2C_Slave_ISR_IT+0x1f2>
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	2240      	movs	r2, #64	@ 0x40
 8010fb0:	2101      	movs	r1, #1
 8010fb2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	2220      	movs	r2, #32
 8010fb8:	4013      	ands	r3, r2
 8010fba:	d009      	beq.n	8010fd0 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2220      	movs	r2, #32
 8010fc0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010fc2:	d005      	beq.n	8010fd0 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8010fc4:	693a      	ldr	r2, [r7, #16]
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	0011      	movs	r1, r2
 8010fca:	0018      	movs	r0, r3
 8010fcc:	f000 fdf2 	bl	8011bb4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	2210      	movs	r2, #16
 8010fd4:	4013      	ands	r3, r2
 8010fd6:	d052      	beq.n	801107e <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2210      	movs	r2, #16
 8010fdc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8010fde:	d04e      	beq.n	801107e <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010fe4:	b29b      	uxth	r3, r3
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d12d      	bne.n	8011046 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	2241      	movs	r2, #65	@ 0x41
 8010fee:	5c9b      	ldrb	r3, [r3, r2]
 8010ff0:	b2db      	uxtb	r3, r3
 8010ff2:	2b28      	cmp	r3, #40	@ 0x28
 8010ff4:	d10b      	bne.n	801100e <I2C_Slave_ISR_IT+0x86>
 8010ff6:	697a      	ldr	r2, [r7, #20]
 8010ff8:	2380      	movs	r3, #128	@ 0x80
 8010ffa:	049b      	lsls	r3, r3, #18
 8010ffc:	429a      	cmp	r2, r3
 8010ffe:	d106      	bne.n	801100e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8011000:	693a      	ldr	r2, [r7, #16]
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	0011      	movs	r1, r2
 8011006:	0018      	movs	r0, r3
 8011008:	f000 fef4 	bl	8011df4 <I2C_ITListenCplt>
 801100c:	e036      	b.n	801107c <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	2241      	movs	r2, #65	@ 0x41
 8011012:	5c9b      	ldrb	r3, [r3, r2]
 8011014:	b2db      	uxtb	r3, r3
 8011016:	2b29      	cmp	r3, #41	@ 0x29
 8011018:	d110      	bne.n	801103c <I2C_Slave_ISR_IT+0xb4>
 801101a:	697b      	ldr	r3, [r7, #20]
 801101c:	4a59      	ldr	r2, [pc, #356]	@ (8011184 <I2C_Slave_ISR_IT+0x1fc>)
 801101e:	4293      	cmp	r3, r2
 8011020:	d00c      	beq.n	801103c <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	2210      	movs	r2, #16
 8011028:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	0018      	movs	r0, r3
 801102e:	f001 f864 	bl	80120fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	0018      	movs	r0, r3
 8011036:	f000 fc8b 	bl	8011950 <I2C_ITSlaveSeqCplt>
 801103a:	e01f      	b.n	801107c <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	2210      	movs	r2, #16
 8011042:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8011044:	e091      	b.n	801116a <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	2210      	movs	r2, #16
 801104c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011052:	2204      	movs	r2, #4
 8011054:	431a      	orrs	r2, r3
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 801105a:	697b      	ldr	r3, [r7, #20]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d005      	beq.n	801106c <I2C_Slave_ISR_IT+0xe4>
 8011060:	697a      	ldr	r2, [r7, #20]
 8011062:	2380      	movs	r3, #128	@ 0x80
 8011064:	045b      	lsls	r3, r3, #17
 8011066:	429a      	cmp	r2, r3
 8011068:	d000      	beq.n	801106c <I2C_Slave_ISR_IT+0xe4>
 801106a:	e07e      	b.n	801116a <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	0011      	movs	r1, r2
 8011074:	0018      	movs	r0, r3
 8011076:	f000 ff15 	bl	8011ea4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801107a:	e076      	b.n	801116a <I2C_Slave_ISR_IT+0x1e2>
 801107c:	e075      	b.n	801116a <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	2204      	movs	r2, #4
 8011082:	4013      	ands	r3, r2
 8011084:	d02f      	beq.n	80110e6 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2204      	movs	r2, #4
 801108a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 801108c:	d02b      	beq.n	80110e6 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011092:	b29b      	uxth	r3, r3
 8011094:	2b00      	cmp	r3, #0
 8011096:	d018      	beq.n	80110ca <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110a2:	b2d2      	uxtb	r2, r2
 80110a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110aa:	1c5a      	adds	r2, r3, #1
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80110b4:	3b01      	subs	r3, #1
 80110b6:	b29a      	uxth	r2, r3
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80110c0:	b29b      	uxth	r3, r3
 80110c2:	3b01      	subs	r3, #1
 80110c4:	b29a      	uxth	r2, r3
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80110ce:	b29b      	uxth	r3, r3
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d14c      	bne.n	801116e <I2C_Slave_ISR_IT+0x1e6>
 80110d4:	697b      	ldr	r3, [r7, #20]
 80110d6:	4a2b      	ldr	r2, [pc, #172]	@ (8011184 <I2C_Slave_ISR_IT+0x1fc>)
 80110d8:	4293      	cmp	r3, r2
 80110da:	d048      	beq.n	801116e <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	0018      	movs	r0, r3
 80110e0:	f000 fc36 	bl	8011950 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80110e4:	e043      	b.n	801116e <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	2208      	movs	r2, #8
 80110ea:	4013      	ands	r3, r2
 80110ec:	d00a      	beq.n	8011104 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2208      	movs	r2, #8
 80110f2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80110f4:	d006      	beq.n	8011104 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80110f6:	693a      	ldr	r2, [r7, #16]
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	0011      	movs	r1, r2
 80110fc:	0018      	movs	r0, r3
 80110fe:	f000 fb41 	bl	8011784 <I2C_ITAddrCplt>
 8011102:	e035      	b.n	8011170 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	2202      	movs	r2, #2
 8011108:	4013      	ands	r3, r2
 801110a:	d031      	beq.n	8011170 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	2202      	movs	r2, #2
 8011110:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8011112:	d02d      	beq.n	8011170 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011118:	b29b      	uxth	r3, r3
 801111a:	2b00      	cmp	r3, #0
 801111c:	d018      	beq.n	8011150 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011122:	781a      	ldrb	r2, [r3, #0]
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801112e:	1c5a      	adds	r2, r3, #1
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011138:	b29b      	uxth	r3, r3
 801113a:	3b01      	subs	r3, #1
 801113c:	b29a      	uxth	r2, r3
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011146:	3b01      	subs	r3, #1
 8011148:	b29a      	uxth	r2, r3
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	851a      	strh	r2, [r3, #40]	@ 0x28
 801114e:	e00f      	b.n	8011170 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8011150:	697a      	ldr	r2, [r7, #20]
 8011152:	2380      	movs	r3, #128	@ 0x80
 8011154:	045b      	lsls	r3, r3, #17
 8011156:	429a      	cmp	r2, r3
 8011158:	d002      	beq.n	8011160 <I2C_Slave_ISR_IT+0x1d8>
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d107      	bne.n	8011170 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	0018      	movs	r0, r3
 8011164:	f000 fbf4 	bl	8011950 <I2C_ITSlaveSeqCplt>
 8011168:	e002      	b.n	8011170 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 801116a:	46c0      	nop			@ (mov r8, r8)
 801116c:	e000      	b.n	8011170 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 801116e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	2240      	movs	r2, #64	@ 0x40
 8011174:	2100      	movs	r1, #0
 8011176:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011178:	2300      	movs	r3, #0
}
 801117a:	0018      	movs	r0, r3
 801117c:	46bd      	mov	sp, r7
 801117e:	b006      	add	sp, #24
 8011180:	bd80      	pop	{r7, pc}
 8011182:	46c0      	nop			@ (mov r8, r8)
 8011184:	ffff0000 	.word	0xffff0000

08011188 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8011188:	b590      	push	{r4, r7, lr}
 801118a:	b089      	sub	sp, #36	@ 0x24
 801118c:	af02      	add	r7, sp, #8
 801118e:	60f8      	str	r0, [r7, #12]
 8011190:	60b9      	str	r1, [r7, #8]
 8011192:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	2240      	movs	r2, #64	@ 0x40
 8011198:	5c9b      	ldrb	r3, [r3, r2]
 801119a:	2b01      	cmp	r3, #1
 801119c:	d101      	bne.n	80111a2 <I2C_Master_ISR_DMA+0x1a>
 801119e:	2302      	movs	r3, #2
 80111a0:	e0e7      	b.n	8011372 <I2C_Master_ISR_DMA+0x1ea>
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	2240      	movs	r2, #64	@ 0x40
 80111a6:	2101      	movs	r1, #1
 80111a8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	2210      	movs	r2, #16
 80111ae:	4013      	ands	r3, r2
 80111b0:	d017      	beq.n	80111e2 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2210      	movs	r2, #16
 80111b6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80111b8:	d013      	beq.n	80111e2 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	2210      	movs	r2, #16
 80111c0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80111c6:	2204      	movs	r2, #4
 80111c8:	431a      	orrs	r2, r3
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	2120      	movs	r1, #32
 80111d2:	0018      	movs	r0, r3
 80111d4:	f001 fb18 	bl	8012808 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	0018      	movs	r0, r3
 80111dc:	f000 ff8d 	bl	80120fa <I2C_Flush_TXDR>
 80111e0:	e0c2      	b.n	8011368 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80111e2:	68bb      	ldr	r3, [r7, #8]
 80111e4:	2280      	movs	r2, #128	@ 0x80
 80111e6:	4013      	ands	r3, r2
 80111e8:	d100      	bne.n	80111ec <I2C_Master_ISR_DMA+0x64>
 80111ea:	e07c      	b.n	80112e6 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2240      	movs	r2, #64	@ 0x40
 80111f0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80111f2:	d100      	bne.n	80111f6 <I2C_Master_ISR_DMA+0x6e>
 80111f4:	e077      	b.n	80112e6 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	681a      	ldr	r2, [r3, #0]
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	2140      	movs	r1, #64	@ 0x40
 8011202:	438a      	bics	r2, r1
 8011204:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801120a:	b29b      	uxth	r3, r3
 801120c:	2b00      	cmp	r3, #0
 801120e:	d055      	beq.n	80112bc <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	685b      	ldr	r3, [r3, #4]
 8011216:	b29a      	uxth	r2, r3
 8011218:	2312      	movs	r3, #18
 801121a:	18fb      	adds	r3, r7, r3
 801121c:	0592      	lsls	r2, r2, #22
 801121e:	0d92      	lsrs	r2, r2, #22
 8011220:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011226:	b29b      	uxth	r3, r3
 8011228:	2bff      	cmp	r3, #255	@ 0xff
 801122a:	d906      	bls.n	801123a <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	22ff      	movs	r2, #255	@ 0xff
 8011230:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8011232:	2380      	movs	r3, #128	@ 0x80
 8011234:	045b      	lsls	r3, r3, #17
 8011236:	617b      	str	r3, [r7, #20]
 8011238:	e010      	b.n	801125c <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801123e:	b29a      	uxth	r2, r3
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011248:	4a4c      	ldr	r2, [pc, #304]	@ (801137c <I2C_Master_ISR_DMA+0x1f4>)
 801124a:	4293      	cmp	r3, r2
 801124c:	d003      	beq.n	8011256 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011252:	617b      	str	r3, [r7, #20]
 8011254:	e002      	b.n	801125c <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8011256:	2380      	movs	r3, #128	@ 0x80
 8011258:	049b      	lsls	r3, r3, #18
 801125a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011260:	b2da      	uxtb	r2, r3
 8011262:	697c      	ldr	r4, [r7, #20]
 8011264:	2312      	movs	r3, #18
 8011266:	18fb      	adds	r3, r7, r3
 8011268:	8819      	ldrh	r1, [r3, #0]
 801126a:	68f8      	ldr	r0, [r7, #12]
 801126c:	2300      	movs	r3, #0
 801126e:	9300      	str	r3, [sp, #0]
 8011270:	0023      	movs	r3, r4
 8011272:	f001 fa8f 	bl	8012794 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801127a:	b29a      	uxth	r2, r3
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011280:	1ad3      	subs	r3, r2, r3
 8011282:	b29a      	uxth	r2, r3
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	2241      	movs	r2, #65	@ 0x41
 801128c:	5c9b      	ldrb	r3, [r3, r2]
 801128e:	b2db      	uxtb	r3, r3
 8011290:	2b22      	cmp	r3, #34	@ 0x22
 8011292:	d109      	bne.n	80112a8 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	681a      	ldr	r2, [r3, #0]
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	2180      	movs	r1, #128	@ 0x80
 80112a0:	0209      	lsls	r1, r1, #8
 80112a2:	430a      	orrs	r2, r1
 80112a4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80112a6:	e05f      	b.n	8011368 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	681a      	ldr	r2, [r3, #0]
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	2180      	movs	r1, #128	@ 0x80
 80112b4:	01c9      	lsls	r1, r1, #7
 80112b6:	430a      	orrs	r2, r1
 80112b8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80112ba:	e055      	b.n	8011368 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	685a      	ldr	r2, [r3, #4]
 80112c2:	2380      	movs	r3, #128	@ 0x80
 80112c4:	049b      	lsls	r3, r3, #18
 80112c6:	401a      	ands	r2, r3
 80112c8:	2380      	movs	r3, #128	@ 0x80
 80112ca:	049b      	lsls	r3, r3, #18
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d004      	beq.n	80112da <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	0018      	movs	r0, r3
 80112d4:	f000 fafa 	bl	80118cc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80112d8:	e046      	b.n	8011368 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2140      	movs	r1, #64	@ 0x40
 80112de:	0018      	movs	r0, r3
 80112e0:	f000 fde0 	bl	8011ea4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80112e4:	e040      	b.n	8011368 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	2240      	movs	r2, #64	@ 0x40
 80112ea:	4013      	ands	r3, r2
 80112ec:	d02c      	beq.n	8011348 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2240      	movs	r2, #64	@ 0x40
 80112f2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80112f4:	d028      	beq.n	8011348 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d11d      	bne.n	801133c <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	685a      	ldr	r2, [r3, #4]
 8011306:	2380      	movs	r3, #128	@ 0x80
 8011308:	049b      	lsls	r3, r3, #18
 801130a:	401a      	ands	r2, r3
 801130c:	2380      	movs	r3, #128	@ 0x80
 801130e:	049b      	lsls	r3, r3, #18
 8011310:	429a      	cmp	r2, r3
 8011312:	d028      	beq.n	8011366 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011318:	4a18      	ldr	r2, [pc, #96]	@ (801137c <I2C_Master_ISR_DMA+0x1f4>)
 801131a:	4293      	cmp	r3, r2
 801131c:	d109      	bne.n	8011332 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	685a      	ldr	r2, [r3, #4]
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	2180      	movs	r1, #128	@ 0x80
 801132a:	01c9      	lsls	r1, r1, #7
 801132c:	430a      	orrs	r2, r1
 801132e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8011330:	e019      	b.n	8011366 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	0018      	movs	r0, r3
 8011336:	f000 fac9 	bl	80118cc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 801133a:	e014      	b.n	8011366 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	2140      	movs	r1, #64	@ 0x40
 8011340:	0018      	movs	r0, r3
 8011342:	f000 fdaf 	bl	8011ea4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8011346:	e00e      	b.n	8011366 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	2220      	movs	r2, #32
 801134c:	4013      	ands	r3, r2
 801134e:	d00b      	beq.n	8011368 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2220      	movs	r2, #32
 8011354:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011356:	d007      	beq.n	8011368 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011358:	68ba      	ldr	r2, [r7, #8]
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	0011      	movs	r1, r2
 801135e:	0018      	movs	r0, r3
 8011360:	f000 fb5a 	bl	8011a18 <I2C_ITMasterCplt>
 8011364:	e000      	b.n	8011368 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8011366:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2240      	movs	r2, #64	@ 0x40
 801136c:	2100      	movs	r1, #0
 801136e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011370:	2300      	movs	r3, #0
}
 8011372:	0018      	movs	r0, r3
 8011374:	46bd      	mov	sp, r7
 8011376:	b007      	add	sp, #28
 8011378:	bd90      	pop	{r4, r7, pc}
 801137a:	46c0      	nop			@ (mov r8, r8)
 801137c:	ffff0000 	.word	0xffff0000

08011380 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8011380:	b590      	push	{r4, r7, lr}
 8011382:	b089      	sub	sp, #36	@ 0x24
 8011384:	af02      	add	r7, sp, #8
 8011386:	60f8      	str	r0, [r7, #12]
 8011388:	60b9      	str	r1, [r7, #8]
 801138a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 801138c:	4b88      	ldr	r3, [pc, #544]	@ (80115b0 <I2C_Mem_ISR_DMA+0x230>)
 801138e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	2240      	movs	r2, #64	@ 0x40
 8011394:	5c9b      	ldrb	r3, [r3, r2]
 8011396:	2b01      	cmp	r3, #1
 8011398:	d101      	bne.n	801139e <I2C_Mem_ISR_DMA+0x1e>
 801139a:	2302      	movs	r3, #2
 801139c:	e104      	b.n	80115a8 <I2C_Mem_ISR_DMA+0x228>
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	2240      	movs	r2, #64	@ 0x40
 80113a2:	2101      	movs	r1, #1
 80113a4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	2210      	movs	r2, #16
 80113aa:	4013      	ands	r3, r2
 80113ac:	d017      	beq.n	80113de <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2210      	movs	r2, #16
 80113b2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80113b4:	d013      	beq.n	80113de <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	2210      	movs	r2, #16
 80113bc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113c2:	2204      	movs	r2, #4
 80113c4:	431a      	orrs	r2, r3
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	2120      	movs	r1, #32
 80113ce:	0018      	movs	r0, r3
 80113d0:	f001 fa1a 	bl	8012808 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	0018      	movs	r0, r3
 80113d8:	f000 fe8f 	bl	80120fa <I2C_Flush_TXDR>
 80113dc:	e0df      	b.n	801159e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	2202      	movs	r2, #2
 80113e2:	4013      	ands	r3, r2
 80113e4:	d00d      	beq.n	8011402 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2202      	movs	r2, #2
 80113ea:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80113ec:	d009      	beq.n	8011402 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	68fa      	ldr	r2, [r7, #12]
 80113f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80113f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	2201      	movs	r2, #1
 80113fc:	4252      	negs	r2, r2
 80113fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8011400:	e0cd      	b.n	801159e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	2280      	movs	r2, #128	@ 0x80
 8011406:	4013      	ands	r3, r2
 8011408:	d05e      	beq.n	80114c8 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	2240      	movs	r2, #64	@ 0x40
 801140e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8011410:	d05a      	beq.n	80114c8 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	2110      	movs	r1, #16
 8011416:	0018      	movs	r0, r3
 8011418:	f001 f9f6 	bl	8012808 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011420:	b29b      	uxth	r3, r3
 8011422:	2b00      	cmp	r3, #0
 8011424:	d04a      	beq.n	80114bc <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801142a:	b29b      	uxth	r3, r3
 801142c:	2bff      	cmp	r3, #255	@ 0xff
 801142e:	d910      	bls.n	8011452 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	22ff      	movs	r2, #255	@ 0xff
 8011434:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801143a:	b299      	uxth	r1, r3
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011440:	b2da      	uxtb	r2, r3
 8011442:	2380      	movs	r3, #128	@ 0x80
 8011444:	045b      	lsls	r3, r3, #17
 8011446:	68f8      	ldr	r0, [r7, #12]
 8011448:	2400      	movs	r4, #0
 801144a:	9400      	str	r4, [sp, #0]
 801144c:	f001 f9a2 	bl	8012794 <I2C_TransferConfig>
 8011450:	e011      	b.n	8011476 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011456:	b29a      	uxth	r2, r3
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011460:	b299      	uxth	r1, r3
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011466:	b2da      	uxtb	r2, r3
 8011468:	2380      	movs	r3, #128	@ 0x80
 801146a:	049b      	lsls	r3, r3, #18
 801146c:	68f8      	ldr	r0, [r7, #12]
 801146e:	2400      	movs	r4, #0
 8011470:	9400      	str	r4, [sp, #0]
 8011472:	f001 f98f 	bl	8012794 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801147a:	b29a      	uxth	r2, r3
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011480:	1ad3      	subs	r3, r2, r3
 8011482:	b29a      	uxth	r2, r3
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	2241      	movs	r2, #65	@ 0x41
 801148c:	5c9b      	ldrb	r3, [r3, r2]
 801148e:	b2db      	uxtb	r3, r3
 8011490:	2b22      	cmp	r3, #34	@ 0x22
 8011492:	d109      	bne.n	80114a8 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	681a      	ldr	r2, [r3, #0]
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	2180      	movs	r1, #128	@ 0x80
 80114a0:	0209      	lsls	r1, r1, #8
 80114a2:	430a      	orrs	r2, r1
 80114a4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80114a6:	e07a      	b.n	801159e <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	681a      	ldr	r2, [r3, #0]
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	2180      	movs	r1, #128	@ 0x80
 80114b4:	01c9      	lsls	r1, r1, #7
 80114b6:	430a      	orrs	r2, r1
 80114b8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80114ba:	e070      	b.n	801159e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	2140      	movs	r1, #64	@ 0x40
 80114c0:	0018      	movs	r0, r3
 80114c2:	f000 fcef 	bl	8011ea4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80114c6:	e06a      	b.n	801159e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	2240      	movs	r2, #64	@ 0x40
 80114cc:	4013      	ands	r3, r2
 80114ce:	d058      	beq.n	8011582 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	2240      	movs	r2, #64	@ 0x40
 80114d4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80114d6:	d054      	beq.n	8011582 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	2241      	movs	r2, #65	@ 0x41
 80114dc:	5c9b      	ldrb	r3, [r3, r2]
 80114de:	b2db      	uxtb	r3, r3
 80114e0:	2b22      	cmp	r3, #34	@ 0x22
 80114e2:	d101      	bne.n	80114e8 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 80114e4:	4b33      	ldr	r3, [pc, #204]	@ (80115b4 <I2C_Mem_ISR_DMA+0x234>)
 80114e6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80114ec:	b29b      	uxth	r3, r3
 80114ee:	2bff      	cmp	r3, #255	@ 0xff
 80114f0:	d911      	bls.n	8011516 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	22ff      	movs	r2, #255	@ 0xff
 80114f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80114fc:	b299      	uxth	r1, r3
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011502:	b2da      	uxtb	r2, r3
 8011504:	2380      	movs	r3, #128	@ 0x80
 8011506:	045c      	lsls	r4, r3, #17
 8011508:	68f8      	ldr	r0, [r7, #12]
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	9300      	str	r3, [sp, #0]
 801150e:	0023      	movs	r3, r4
 8011510:	f001 f940 	bl	8012794 <I2C_TransferConfig>
 8011514:	e012      	b.n	801153c <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801151a:	b29a      	uxth	r2, r3
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011524:	b299      	uxth	r1, r3
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801152a:	b2da      	uxtb	r2, r3
 801152c:	2380      	movs	r3, #128	@ 0x80
 801152e:	049c      	lsls	r4, r3, #18
 8011530:	68f8      	ldr	r0, [r7, #12]
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	9300      	str	r3, [sp, #0]
 8011536:	0023      	movs	r3, r4
 8011538:	f001 f92c 	bl	8012794 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011540:	b29a      	uxth	r2, r3
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011546:	1ad3      	subs	r3, r2, r3
 8011548:	b29a      	uxth	r2, r3
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	2241      	movs	r2, #65	@ 0x41
 8011552:	5c9b      	ldrb	r3, [r3, r2]
 8011554:	b2db      	uxtb	r3, r3
 8011556:	2b22      	cmp	r3, #34	@ 0x22
 8011558:	d109      	bne.n	801156e <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	681a      	ldr	r2, [r3, #0]
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	2180      	movs	r1, #128	@ 0x80
 8011566:	0209      	lsls	r1, r1, #8
 8011568:	430a      	orrs	r2, r1
 801156a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801156c:	e017      	b.n	801159e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	681a      	ldr	r2, [r3, #0]
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	2180      	movs	r1, #128	@ 0x80
 801157a:	01c9      	lsls	r1, r1, #7
 801157c:	430a      	orrs	r2, r1
 801157e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011580:	e00d      	b.n	801159e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	2220      	movs	r2, #32
 8011586:	4013      	ands	r3, r2
 8011588:	d009      	beq.n	801159e <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2220      	movs	r2, #32
 801158e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8011590:	d005      	beq.n	801159e <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8011592:	68ba      	ldr	r2, [r7, #8]
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	0011      	movs	r1, r2
 8011598:	0018      	movs	r0, r3
 801159a:	f000 fa3d 	bl	8011a18 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	2240      	movs	r2, #64	@ 0x40
 80115a2:	2100      	movs	r1, #0
 80115a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80115a6:	2300      	movs	r3, #0
}
 80115a8:	0018      	movs	r0, r3
 80115aa:	46bd      	mov	sp, r7
 80115ac:	b007      	add	sp, #28
 80115ae:	bd90      	pop	{r4, r7, pc}
 80115b0:	80002000 	.word	0x80002000
 80115b4:	80002400 	.word	0x80002400

080115b8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b088      	sub	sp, #32
 80115bc:	af00      	add	r7, sp, #0
 80115be:	60f8      	str	r0, [r7, #12]
 80115c0:	60b9      	str	r1, [r7, #8]
 80115c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115c8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80115ca:	2300      	movs	r3, #0
 80115cc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	2240      	movs	r2, #64	@ 0x40
 80115d2:	5c9b      	ldrb	r3, [r3, r2]
 80115d4:	2b01      	cmp	r3, #1
 80115d6:	d101      	bne.n	80115dc <I2C_Slave_ISR_DMA+0x24>
 80115d8:	2302      	movs	r3, #2
 80115da:	e0cd      	b.n	8011778 <I2C_Slave_ISR_DMA+0x1c0>
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	2240      	movs	r2, #64	@ 0x40
 80115e0:	2101      	movs	r1, #1
 80115e2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	2220      	movs	r2, #32
 80115e8:	4013      	ands	r3, r2
 80115ea:	d009      	beq.n	8011600 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2220      	movs	r2, #32
 80115f0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80115f2:	d005      	beq.n	8011600 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80115f4:	68ba      	ldr	r2, [r7, #8]
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	0011      	movs	r1, r2
 80115fa:	0018      	movs	r0, r3
 80115fc:	f000 fada 	bl	8011bb4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	2210      	movs	r2, #16
 8011604:	4013      	ands	r3, r2
 8011606:	d100      	bne.n	801160a <I2C_Slave_ISR_DMA+0x52>
 8011608:	e0a3      	b.n	8011752 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2210      	movs	r2, #16
 801160e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8011610:	d100      	bne.n	8011614 <I2C_Slave_ISR_DMA+0x5c>
 8011612:	e09e      	b.n	8011752 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	2380      	movs	r3, #128	@ 0x80
 8011618:	01db      	lsls	r3, r3, #7
 801161a:	4013      	ands	r3, r2
 801161c:	d105      	bne.n	801162a <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 801161e:	687a      	ldr	r2, [r7, #4]
 8011620:	2380      	movs	r3, #128	@ 0x80
 8011622:	021b      	lsls	r3, r3, #8
 8011624:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011626:	d100      	bne.n	801162a <I2C_Slave_ISR_DMA+0x72>
 8011628:	e08c      	b.n	8011744 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801162e:	2b00      	cmp	r3, #0
 8011630:	d00c      	beq.n	801164c <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8011632:	687a      	ldr	r2, [r7, #4]
 8011634:	2380      	movs	r3, #128	@ 0x80
 8011636:	021b      	lsls	r3, r3, #8
 8011638:	4013      	ands	r3, r2
 801163a:	d007      	beq.n	801164c <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	685b      	ldr	r3, [r3, #4]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d101      	bne.n	801164c <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8011648:	2301      	movs	r3, #1
 801164a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011650:	2b00      	cmp	r3, #0
 8011652:	d00c      	beq.n	801166e <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8011654:	687a      	ldr	r2, [r7, #4]
 8011656:	2380      	movs	r3, #128	@ 0x80
 8011658:	01db      	lsls	r3, r3, #7
 801165a:	4013      	ands	r3, r2
 801165c:	d007      	beq.n	801166e <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	685b      	ldr	r3, [r3, #4]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d101      	bne.n	801166e <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 801166a:	2301      	movs	r3, #1
 801166c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 801166e:	69fb      	ldr	r3, [r7, #28]
 8011670:	2b01      	cmp	r3, #1
 8011672:	d12d      	bne.n	80116d0 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	2241      	movs	r2, #65	@ 0x41
 8011678:	5c9b      	ldrb	r3, [r3, r2]
 801167a:	b2db      	uxtb	r3, r3
 801167c:	2b28      	cmp	r3, #40	@ 0x28
 801167e:	d10b      	bne.n	8011698 <I2C_Slave_ISR_DMA+0xe0>
 8011680:	69ba      	ldr	r2, [r7, #24]
 8011682:	2380      	movs	r3, #128	@ 0x80
 8011684:	049b      	lsls	r3, r3, #18
 8011686:	429a      	cmp	r2, r3
 8011688:	d106      	bne.n	8011698 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 801168a:	68ba      	ldr	r2, [r7, #8]
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	0011      	movs	r1, r2
 8011690:	0018      	movs	r0, r3
 8011692:	f000 fbaf 	bl	8011df4 <I2C_ITListenCplt>
 8011696:	e054      	b.n	8011742 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	2241      	movs	r2, #65	@ 0x41
 801169c:	5c9b      	ldrb	r3, [r3, r2]
 801169e:	b2db      	uxtb	r3, r3
 80116a0:	2b29      	cmp	r3, #41	@ 0x29
 80116a2:	d110      	bne.n	80116c6 <I2C_Slave_ISR_DMA+0x10e>
 80116a4:	69bb      	ldr	r3, [r7, #24]
 80116a6:	4a36      	ldr	r2, [pc, #216]	@ (8011780 <I2C_Slave_ISR_DMA+0x1c8>)
 80116a8:	4293      	cmp	r3, r2
 80116aa:	d00c      	beq.n	80116c6 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	2210      	movs	r2, #16
 80116b2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	0018      	movs	r0, r3
 80116b8:	f000 fd1f 	bl	80120fa <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	0018      	movs	r0, r3
 80116c0:	f000 f946 	bl	8011950 <I2C_ITSlaveSeqCplt>
 80116c4:	e03d      	b.n	8011742 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	2210      	movs	r2, #16
 80116cc:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80116ce:	e03e      	b.n	801174e <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	2210      	movs	r2, #16
 80116d6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80116dc:	2204      	movs	r2, #4
 80116de:	431a      	orrs	r2, r3
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80116e4:	2317      	movs	r3, #23
 80116e6:	18fb      	adds	r3, r7, r3
 80116e8:	68fa      	ldr	r2, [r7, #12]
 80116ea:	2141      	movs	r1, #65	@ 0x41
 80116ec:	5c52      	ldrb	r2, [r2, r1]
 80116ee:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80116f0:	69bb      	ldr	r3, [r7, #24]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d004      	beq.n	8011700 <I2C_Slave_ISR_DMA+0x148>
 80116f6:	69ba      	ldr	r2, [r7, #24]
 80116f8:	2380      	movs	r3, #128	@ 0x80
 80116fa:	045b      	lsls	r3, r3, #17
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d126      	bne.n	801174e <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011700:	2217      	movs	r2, #23
 8011702:	18bb      	adds	r3, r7, r2
 8011704:	781b      	ldrb	r3, [r3, #0]
 8011706:	2b21      	cmp	r3, #33	@ 0x21
 8011708:	d003      	beq.n	8011712 <I2C_Slave_ISR_DMA+0x15a>
 801170a:	18bb      	adds	r3, r7, r2
 801170c:	781b      	ldrb	r3, [r3, #0]
 801170e:	2b29      	cmp	r3, #41	@ 0x29
 8011710:	d103      	bne.n	801171a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	2221      	movs	r2, #33	@ 0x21
 8011716:	631a      	str	r2, [r3, #48]	@ 0x30
 8011718:	e00b      	b.n	8011732 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801171a:	2217      	movs	r2, #23
 801171c:	18bb      	adds	r3, r7, r2
 801171e:	781b      	ldrb	r3, [r3, #0]
 8011720:	2b22      	cmp	r3, #34	@ 0x22
 8011722:	d003      	beq.n	801172c <I2C_Slave_ISR_DMA+0x174>
 8011724:	18bb      	adds	r3, r7, r2
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	2b2a      	cmp	r3, #42	@ 0x2a
 801172a:	d102      	bne.n	8011732 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	2222      	movs	r2, #34	@ 0x22
 8011730:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	0011      	movs	r1, r2
 801173a:	0018      	movs	r0, r3
 801173c:	f000 fbb2 	bl	8011ea4 <I2C_ITError>
      if (treatdmanack == 1U)
 8011740:	e005      	b.n	801174e <I2C_Slave_ISR_DMA+0x196>
 8011742:	e004      	b.n	801174e <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	2210      	movs	r2, #16
 801174a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 801174c:	e00f      	b.n	801176e <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 801174e:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8011750:	e00d      	b.n	801176e <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	2208      	movs	r2, #8
 8011756:	4013      	ands	r3, r2
 8011758:	d009      	beq.n	801176e <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	2208      	movs	r2, #8
 801175e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8011760:	d005      	beq.n	801176e <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8011762:	68ba      	ldr	r2, [r7, #8]
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	0011      	movs	r1, r2
 8011768:	0018      	movs	r0, r3
 801176a:	f000 f80b 	bl	8011784 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	2240      	movs	r2, #64	@ 0x40
 8011772:	2100      	movs	r1, #0
 8011774:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011776:	2300      	movs	r3, #0
}
 8011778:	0018      	movs	r0, r3
 801177a:	46bd      	mov	sp, r7
 801177c:	b008      	add	sp, #32
 801177e:	bd80      	pop	{r7, pc}
 8011780:	ffff0000 	.word	0xffff0000

08011784 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011784:	b5b0      	push	{r4, r5, r7, lr}
 8011786:	b084      	sub	sp, #16
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2241      	movs	r2, #65	@ 0x41
 8011792:	5c9b      	ldrb	r3, [r3, r2]
 8011794:	b2db      	uxtb	r3, r3
 8011796:	001a      	movs	r2, r3
 8011798:	2328      	movs	r3, #40	@ 0x28
 801179a:	4013      	ands	r3, r2
 801179c:	2b28      	cmp	r3, #40	@ 0x28
 801179e:	d000      	beq.n	80117a2 <I2C_ITAddrCplt+0x1e>
 80117a0:	e088      	b.n	80118b4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	699b      	ldr	r3, [r3, #24]
 80117a8:	0c1b      	lsrs	r3, r3, #16
 80117aa:	b2da      	uxtb	r2, r3
 80117ac:	250f      	movs	r5, #15
 80117ae:	197b      	adds	r3, r7, r5
 80117b0:	2101      	movs	r1, #1
 80117b2:	400a      	ands	r2, r1
 80117b4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	699b      	ldr	r3, [r3, #24]
 80117bc:	0c1b      	lsrs	r3, r3, #16
 80117be:	b29a      	uxth	r2, r3
 80117c0:	200c      	movs	r0, #12
 80117c2:	183b      	adds	r3, r7, r0
 80117c4:	21fe      	movs	r1, #254	@ 0xfe
 80117c6:	400a      	ands	r2, r1
 80117c8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	689b      	ldr	r3, [r3, #8]
 80117d0:	b29a      	uxth	r2, r3
 80117d2:	240a      	movs	r4, #10
 80117d4:	193b      	adds	r3, r7, r4
 80117d6:	0592      	lsls	r2, r2, #22
 80117d8:	0d92      	lsrs	r2, r2, #22
 80117da:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	68db      	ldr	r3, [r3, #12]
 80117e2:	b29a      	uxth	r2, r3
 80117e4:	2308      	movs	r3, #8
 80117e6:	18fb      	adds	r3, r7, r3
 80117e8:	21fe      	movs	r1, #254	@ 0xfe
 80117ea:	400a      	ands	r2, r1
 80117ec:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	68db      	ldr	r3, [r3, #12]
 80117f2:	2b02      	cmp	r3, #2
 80117f4:	d148      	bne.n	8011888 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80117f6:	0021      	movs	r1, r4
 80117f8:	187b      	adds	r3, r7, r1
 80117fa:	881b      	ldrh	r3, [r3, #0]
 80117fc:	09db      	lsrs	r3, r3, #7
 80117fe:	b29a      	uxth	r2, r3
 8011800:	183b      	adds	r3, r7, r0
 8011802:	881b      	ldrh	r3, [r3, #0]
 8011804:	4053      	eors	r3, r2
 8011806:	b29b      	uxth	r3, r3
 8011808:	001a      	movs	r2, r3
 801180a:	2306      	movs	r3, #6
 801180c:	4013      	ands	r3, r2
 801180e:	d120      	bne.n	8011852 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8011810:	183b      	adds	r3, r7, r0
 8011812:	187a      	adds	r2, r7, r1
 8011814:	8812      	ldrh	r2, [r2, #0]
 8011816:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801181c:	1c5a      	adds	r2, r3, #1
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011826:	2b02      	cmp	r3, #2
 8011828:	d14c      	bne.n	80118c4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	2200      	movs	r2, #0
 801182e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	2208      	movs	r2, #8
 8011836:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2240      	movs	r2, #64	@ 0x40
 801183c:	2100      	movs	r1, #0
 801183e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011840:	183b      	adds	r3, r7, r0
 8011842:	881a      	ldrh	r2, [r3, #0]
 8011844:	197b      	adds	r3, r7, r5
 8011846:	7819      	ldrb	r1, [r3, #0]
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	0018      	movs	r0, r3
 801184c:	f7ff fa39 	bl	8010cc2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8011850:	e038      	b.n	80118c4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8011852:	240c      	movs	r4, #12
 8011854:	193b      	adds	r3, r7, r4
 8011856:	2208      	movs	r2, #8
 8011858:	18ba      	adds	r2, r7, r2
 801185a:	8812      	ldrh	r2, [r2, #0]
 801185c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 801185e:	2380      	movs	r3, #128	@ 0x80
 8011860:	021a      	lsls	r2, r3, #8
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	0011      	movs	r1, r2
 8011866:	0018      	movs	r0, r3
 8011868:	f001 f85c 	bl	8012924 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	2240      	movs	r2, #64	@ 0x40
 8011870:	2100      	movs	r1, #0
 8011872:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8011874:	193b      	adds	r3, r7, r4
 8011876:	881a      	ldrh	r2, [r3, #0]
 8011878:	230f      	movs	r3, #15
 801187a:	18fb      	adds	r3, r7, r3
 801187c:	7819      	ldrb	r1, [r3, #0]
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	0018      	movs	r0, r3
 8011882:	f7ff fa1e 	bl	8010cc2 <HAL_I2C_AddrCallback>
}
 8011886:	e01d      	b.n	80118c4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8011888:	2380      	movs	r3, #128	@ 0x80
 801188a:	021a      	lsls	r2, r3, #8
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	0011      	movs	r1, r2
 8011890:	0018      	movs	r0, r3
 8011892:	f001 f847 	bl	8012924 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	2240      	movs	r2, #64	@ 0x40
 801189a:	2100      	movs	r1, #0
 801189c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801189e:	230c      	movs	r3, #12
 80118a0:	18fb      	adds	r3, r7, r3
 80118a2:	881a      	ldrh	r2, [r3, #0]
 80118a4:	230f      	movs	r3, #15
 80118a6:	18fb      	adds	r3, r7, r3
 80118a8:	7819      	ldrb	r1, [r3, #0]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	0018      	movs	r0, r3
 80118ae:	f7ff fa08 	bl	8010cc2 <HAL_I2C_AddrCallback>
}
 80118b2:	e007      	b.n	80118c4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	2208      	movs	r2, #8
 80118ba:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2240      	movs	r2, #64	@ 0x40
 80118c0:	2100      	movs	r1, #0
 80118c2:	5499      	strb	r1, [r3, r2]
}
 80118c4:	46c0      	nop			@ (mov r8, r8)
 80118c6:	46bd      	mov	sp, r7
 80118c8:	b004      	add	sp, #16
 80118ca:	bdb0      	pop	{r4, r5, r7, pc}

080118cc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2242      	movs	r2, #66	@ 0x42
 80118d8:	2100      	movs	r1, #0
 80118da:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2241      	movs	r2, #65	@ 0x41
 80118e0:	5c9b      	ldrb	r3, [r3, r2]
 80118e2:	b2db      	uxtb	r3, r3
 80118e4:	2b21      	cmp	r3, #33	@ 0x21
 80118e6:	d117      	bne.n	8011918 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2241      	movs	r2, #65	@ 0x41
 80118ec:	2120      	movs	r1, #32
 80118ee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2211      	movs	r2, #17
 80118f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2200      	movs	r2, #0
 80118fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2101      	movs	r1, #1
 8011900:	0018      	movs	r0, r3
 8011902:	f001 f80f 	bl	8012924 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2240      	movs	r2, #64	@ 0x40
 801190a:	2100      	movs	r1, #0
 801190c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	0018      	movs	r0, r3
 8011912:	f7ff f9b6 	bl	8010c82 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011916:	e016      	b.n	8011946 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2241      	movs	r2, #65	@ 0x41
 801191c:	2120      	movs	r1, #32
 801191e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2212      	movs	r2, #18
 8011924:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2200      	movs	r2, #0
 801192a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2102      	movs	r1, #2
 8011930:	0018      	movs	r0, r3
 8011932:	f000 fff7 	bl	8012924 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	2240      	movs	r2, #64	@ 0x40
 801193a:	2100      	movs	r1, #0
 801193c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	0018      	movs	r0, r3
 8011942:	f7ff f9a6 	bl	8010c92 <HAL_I2C_MasterRxCpltCallback>
}
 8011946:	46c0      	nop			@ (mov r8, r8)
 8011948:	46bd      	mov	sp, r7
 801194a:	b002      	add	sp, #8
 801194c:	bd80      	pop	{r7, pc}
	...

08011950 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b084      	sub	sp, #16
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2242      	movs	r2, #66	@ 0x42
 8011964:	2100      	movs	r1, #0
 8011966:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011968:	68fa      	ldr	r2, [r7, #12]
 801196a:	2380      	movs	r3, #128	@ 0x80
 801196c:	01db      	lsls	r3, r3, #7
 801196e:	4013      	ands	r3, r2
 8011970:	d008      	beq.n	8011984 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	681a      	ldr	r2, [r3, #0]
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	4924      	ldr	r1, [pc, #144]	@ (8011a10 <I2C_ITSlaveSeqCplt+0xc0>)
 801197e:	400a      	ands	r2, r1
 8011980:	601a      	str	r2, [r3, #0]
 8011982:	e00c      	b.n	801199e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011984:	68fa      	ldr	r2, [r7, #12]
 8011986:	2380      	movs	r3, #128	@ 0x80
 8011988:	021b      	lsls	r3, r3, #8
 801198a:	4013      	ands	r3, r2
 801198c:	d007      	beq.n	801199e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	681a      	ldr	r2, [r3, #0]
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	491e      	ldr	r1, [pc, #120]	@ (8011a14 <I2C_ITSlaveSeqCplt+0xc4>)
 801199a:	400a      	ands	r2, r1
 801199c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	2241      	movs	r2, #65	@ 0x41
 80119a2:	5c9b      	ldrb	r3, [r3, r2]
 80119a4:	b2db      	uxtb	r3, r3
 80119a6:	2b29      	cmp	r3, #41	@ 0x29
 80119a8:	d114      	bne.n	80119d4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2241      	movs	r2, #65	@ 0x41
 80119ae:	2128      	movs	r1, #40	@ 0x28
 80119b0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2221      	movs	r2, #33	@ 0x21
 80119b6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2101      	movs	r1, #1
 80119bc:	0018      	movs	r0, r3
 80119be:	f000 ffb1 	bl	8012924 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	2240      	movs	r2, #64	@ 0x40
 80119c6:	2100      	movs	r1, #0
 80119c8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	0018      	movs	r0, r3
 80119ce:	f7ff f968 	bl	8010ca2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80119d2:	e019      	b.n	8011a08 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2241      	movs	r2, #65	@ 0x41
 80119d8:	5c9b      	ldrb	r3, [r3, r2]
 80119da:	b2db      	uxtb	r3, r3
 80119dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80119de:	d113      	bne.n	8011a08 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2241      	movs	r2, #65	@ 0x41
 80119e4:	2128      	movs	r1, #40	@ 0x28
 80119e6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2222      	movs	r2, #34	@ 0x22
 80119ec:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	2102      	movs	r1, #2
 80119f2:	0018      	movs	r0, r3
 80119f4:	f000 ff96 	bl	8012924 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	2240      	movs	r2, #64	@ 0x40
 80119fc:	2100      	movs	r1, #0
 80119fe:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	0018      	movs	r0, r3
 8011a04:	f7ff f955 	bl	8010cb2 <HAL_I2C_SlaveRxCpltCallback>
}
 8011a08:	46c0      	nop			@ (mov r8, r8)
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	b004      	add	sp, #16
 8011a0e:	bd80      	pop	{r7, pc}
 8011a10:	ffffbfff 	.word	0xffffbfff
 8011a14:	ffff7fff 	.word	0xffff7fff

08011a18 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b086      	sub	sp, #24
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8011a22:	683b      	ldr	r3, [r7, #0]
 8011a24:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	2220      	movs	r2, #32
 8011a2c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2241      	movs	r2, #65	@ 0x41
 8011a32:	5c9b      	ldrb	r3, [r3, r2]
 8011a34:	b2db      	uxtb	r3, r3
 8011a36:	2b21      	cmp	r3, #33	@ 0x21
 8011a38:	d108      	bne.n	8011a4c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	2101      	movs	r1, #1
 8011a3e:	0018      	movs	r0, r3
 8011a40:	f000 ff70 	bl	8012924 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2211      	movs	r2, #17
 8011a48:	631a      	str	r2, [r3, #48]	@ 0x30
 8011a4a:	e00d      	b.n	8011a68 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2241      	movs	r2, #65	@ 0x41
 8011a50:	5c9b      	ldrb	r3, [r3, r2]
 8011a52:	b2db      	uxtb	r3, r3
 8011a54:	2b22      	cmp	r3, #34	@ 0x22
 8011a56:	d107      	bne.n	8011a68 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2102      	movs	r1, #2
 8011a5c:	0018      	movs	r0, r3
 8011a5e:	f000 ff61 	bl	8012924 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	2212      	movs	r2, #18
 8011a66:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	685a      	ldr	r2, [r3, #4]
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	494e      	ldr	r1, [pc, #312]	@ (8011bac <I2C_ITMasterCplt+0x194>)
 8011a74:	400a      	ands	r2, r1
 8011a76:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	4a4b      	ldr	r2, [pc, #300]	@ (8011bb0 <I2C_ITMasterCplt+0x198>)
 8011a82:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8011a84:	697b      	ldr	r3, [r7, #20]
 8011a86:	2210      	movs	r2, #16
 8011a88:	4013      	ands	r3, r2
 8011a8a:	d009      	beq.n	8011aa0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	2210      	movs	r2, #16
 8011a92:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a98:	2204      	movs	r2, #4
 8011a9a:	431a      	orrs	r2, r3
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2241      	movs	r2, #65	@ 0x41
 8011aa4:	5c9b      	ldrb	r3, [r3, r2]
 8011aa6:	b2db      	uxtb	r3, r3
 8011aa8:	2b60      	cmp	r3, #96	@ 0x60
 8011aaa:	d109      	bne.n	8011ac0 <I2C_ITMasterCplt+0xa8>
 8011aac:	697b      	ldr	r3, [r7, #20]
 8011aae:	2204      	movs	r2, #4
 8011ab0:	4013      	ands	r3, r2
 8011ab2:	d005      	beq.n	8011ac0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011aba:	b2db      	uxtb	r3, r3
 8011abc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8011abe:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	0018      	movs	r0, r3
 8011ac4:	f000 fb19 	bl	80120fa <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011acc:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2241      	movs	r2, #65	@ 0x41
 8011ad2:	5c9b      	ldrb	r3, [r3, r2]
 8011ad4:	b2db      	uxtb	r3, r3
 8011ad6:	2b60      	cmp	r3, #96	@ 0x60
 8011ad8:	d002      	beq.n	8011ae0 <I2C_ITMasterCplt+0xc8>
 8011ada:	693b      	ldr	r3, [r7, #16]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d007      	beq.n	8011af0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	0011      	movs	r1, r2
 8011ae8:	0018      	movs	r0, r3
 8011aea:	f000 f9db 	bl	8011ea4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011aee:	e058      	b.n	8011ba2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2241      	movs	r2, #65	@ 0x41
 8011af4:	5c9b      	ldrb	r3, [r3, r2]
 8011af6:	b2db      	uxtb	r3, r3
 8011af8:	2b21      	cmp	r3, #33	@ 0x21
 8011afa:	d126      	bne.n	8011b4a <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2241      	movs	r2, #65	@ 0x41
 8011b00:	2120      	movs	r1, #32
 8011b02:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2200      	movs	r2, #0
 8011b08:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	2242      	movs	r2, #66	@ 0x42
 8011b0e:	5c9b      	ldrb	r3, [r3, r2]
 8011b10:	b2db      	uxtb	r3, r3
 8011b12:	2b40      	cmp	r3, #64	@ 0x40
 8011b14:	d10c      	bne.n	8011b30 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2242      	movs	r2, #66	@ 0x42
 8011b1a:	2100      	movs	r1, #0
 8011b1c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2240      	movs	r2, #64	@ 0x40
 8011b22:	2100      	movs	r1, #0
 8011b24:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	0018      	movs	r0, r3
 8011b2a:	f7ff f8e2 	bl	8010cf2 <HAL_I2C_MemTxCpltCallback>
}
 8011b2e:	e038      	b.n	8011ba2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2242      	movs	r2, #66	@ 0x42
 8011b34:	2100      	movs	r1, #0
 8011b36:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2240      	movs	r2, #64	@ 0x40
 8011b3c:	2100      	movs	r1, #0
 8011b3e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	0018      	movs	r0, r3
 8011b44:	f7ff f89d 	bl	8010c82 <HAL_I2C_MasterTxCpltCallback>
}
 8011b48:	e02b      	b.n	8011ba2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	2241      	movs	r2, #65	@ 0x41
 8011b4e:	5c9b      	ldrb	r3, [r3, r2]
 8011b50:	b2db      	uxtb	r3, r3
 8011b52:	2b22      	cmp	r3, #34	@ 0x22
 8011b54:	d125      	bne.n	8011ba2 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2241      	movs	r2, #65	@ 0x41
 8011b5a:	2120      	movs	r1, #32
 8011b5c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2200      	movs	r2, #0
 8011b62:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2242      	movs	r2, #66	@ 0x42
 8011b68:	5c9b      	ldrb	r3, [r3, r2]
 8011b6a:	b2db      	uxtb	r3, r3
 8011b6c:	2b40      	cmp	r3, #64	@ 0x40
 8011b6e:	d10c      	bne.n	8011b8a <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2242      	movs	r2, #66	@ 0x42
 8011b74:	2100      	movs	r1, #0
 8011b76:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2240      	movs	r2, #64	@ 0x40
 8011b7c:	2100      	movs	r1, #0
 8011b7e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	0018      	movs	r0, r3
 8011b84:	f7ff f8bd 	bl	8010d02 <HAL_I2C_MemRxCpltCallback>
}
 8011b88:	e00b      	b.n	8011ba2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2242      	movs	r2, #66	@ 0x42
 8011b8e:	2100      	movs	r1, #0
 8011b90:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2240      	movs	r2, #64	@ 0x40
 8011b96:	2100      	movs	r1, #0
 8011b98:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	0018      	movs	r0, r3
 8011b9e:	f7ff f878 	bl	8010c92 <HAL_I2C_MasterRxCpltCallback>
}
 8011ba2:	46c0      	nop			@ (mov r8, r8)
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	b006      	add	sp, #24
 8011ba8:	bd80      	pop	{r7, pc}
 8011baa:	46c0      	nop			@ (mov r8, r8)
 8011bac:	fe00e800 	.word	0xfe00e800
 8011bb0:	ffff0000 	.word	0xffff0000

08011bb4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b086      	sub	sp, #24
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011bca:	200f      	movs	r0, #15
 8011bcc:	183b      	adds	r3, r7, r0
 8011bce:	687a      	ldr	r2, [r7, #4]
 8011bd0:	2141      	movs	r1, #65	@ 0x41
 8011bd2:	5c52      	ldrb	r2, [r2, r1]
 8011bd4:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	2220      	movs	r2, #32
 8011bdc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011bde:	183b      	adds	r3, r7, r0
 8011be0:	781b      	ldrb	r3, [r3, #0]
 8011be2:	2b21      	cmp	r3, #33	@ 0x21
 8011be4:	d003      	beq.n	8011bee <I2C_ITSlaveCplt+0x3a>
 8011be6:	183b      	adds	r3, r7, r0
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	2b29      	cmp	r3, #41	@ 0x29
 8011bec:	d109      	bne.n	8011c02 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8011bee:	4a7b      	ldr	r2, [pc, #492]	@ (8011ddc <I2C_ITSlaveCplt+0x228>)
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	0011      	movs	r1, r2
 8011bf4:	0018      	movs	r0, r3
 8011bf6:	f000 fe95 	bl	8012924 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	2221      	movs	r2, #33	@ 0x21
 8011bfe:	631a      	str	r2, [r3, #48]	@ 0x30
 8011c00:	e011      	b.n	8011c26 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8011c02:	220f      	movs	r2, #15
 8011c04:	18bb      	adds	r3, r7, r2
 8011c06:	781b      	ldrb	r3, [r3, #0]
 8011c08:	2b22      	cmp	r3, #34	@ 0x22
 8011c0a:	d003      	beq.n	8011c14 <I2C_ITSlaveCplt+0x60>
 8011c0c:	18bb      	adds	r3, r7, r2
 8011c0e:	781b      	ldrb	r3, [r3, #0]
 8011c10:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c12:	d108      	bne.n	8011c26 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8011c14:	4a72      	ldr	r2, [pc, #456]	@ (8011de0 <I2C_ITSlaveCplt+0x22c>)
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	0011      	movs	r1, r2
 8011c1a:	0018      	movs	r0, r3
 8011c1c:	f000 fe82 	bl	8012924 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	2222      	movs	r2, #34	@ 0x22
 8011c24:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	685a      	ldr	r2, [r3, #4]
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	2180      	movs	r1, #128	@ 0x80
 8011c32:	0209      	lsls	r1, r1, #8
 8011c34:	430a      	orrs	r2, r1
 8011c36:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	685a      	ldr	r2, [r3, #4]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	4968      	ldr	r1, [pc, #416]	@ (8011de4 <I2C_ITSlaveCplt+0x230>)
 8011c44:	400a      	ands	r2, r1
 8011c46:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	0018      	movs	r0, r3
 8011c4c:	f000 fa55 	bl	80120fa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8011c50:	693a      	ldr	r2, [r7, #16]
 8011c52:	2380      	movs	r3, #128	@ 0x80
 8011c54:	01db      	lsls	r3, r3, #7
 8011c56:	4013      	ands	r3, r2
 8011c58:	d013      	beq.n	8011c82 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	681a      	ldr	r2, [r3, #0]
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	4960      	ldr	r1, [pc, #384]	@ (8011de8 <I2C_ITSlaveCplt+0x234>)
 8011c66:	400a      	ands	r2, r1
 8011c68:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d01f      	beq.n	8011cb2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	685b      	ldr	r3, [r3, #4]
 8011c7a:	b29a      	uxth	r2, r3
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011c80:	e017      	b.n	8011cb2 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8011c82:	693a      	ldr	r2, [r7, #16]
 8011c84:	2380      	movs	r3, #128	@ 0x80
 8011c86:	021b      	lsls	r3, r3, #8
 8011c88:	4013      	ands	r3, r2
 8011c8a:	d012      	beq.n	8011cb2 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	681a      	ldr	r2, [r3, #0]
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	4955      	ldr	r1, [pc, #340]	@ (8011dec <I2C_ITSlaveCplt+0x238>)
 8011c98:	400a      	ands	r2, r1
 8011c9a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d006      	beq.n	8011cb2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	685b      	ldr	r3, [r3, #4]
 8011cac:	b29a      	uxth	r2, r3
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	2204      	movs	r2, #4
 8011cb6:	4013      	ands	r3, r2
 8011cb8:	d020      	beq.n	8011cfc <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8011cba:	697b      	ldr	r3, [r7, #20]
 8011cbc:	2204      	movs	r2, #4
 8011cbe:	4393      	bics	r3, r2
 8011cc0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ccc:	b2d2      	uxtb	r2, r2
 8011cce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cd4:	1c5a      	adds	r2, r3, #1
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d00c      	beq.n	8011cfc <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011ce6:	3b01      	subs	r3, #1
 8011ce8:	b29a      	uxth	r2, r3
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011cf2:	b29b      	uxth	r3, r3
 8011cf4:	3b01      	subs	r3, #1
 8011cf6:	b29a      	uxth	r2, r3
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011d00:	b29b      	uxth	r3, r3
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d005      	beq.n	8011d12 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d0a:	2204      	movs	r2, #4
 8011d0c:	431a      	orrs	r2, r3
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	2242      	movs	r2, #66	@ 0x42
 8011d16:	2100      	movs	r1, #0
 8011d18:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d013      	beq.n	8011d50 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	0011      	movs	r1, r2
 8011d30:	0018      	movs	r0, r3
 8011d32:	f000 f8b7 	bl	8011ea4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2241      	movs	r2, #65	@ 0x41
 8011d3a:	5c9b      	ldrb	r3, [r3, r2]
 8011d3c:	b2db      	uxtb	r3, r3
 8011d3e:	2b28      	cmp	r3, #40	@ 0x28
 8011d40:	d147      	bne.n	8011dd2 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8011d42:	697a      	ldr	r2, [r7, #20]
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	0011      	movs	r1, r2
 8011d48:	0018      	movs	r0, r3
 8011d4a:	f000 f853 	bl	8011df4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8011d4e:	e040      	b.n	8011dd2 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d54:	4a26      	ldr	r2, [pc, #152]	@ (8011df0 <I2C_ITSlaveCplt+0x23c>)
 8011d56:	4293      	cmp	r3, r2
 8011d58:	d016      	beq.n	8011d88 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	0018      	movs	r0, r3
 8011d5e:	f7ff fdf7 	bl	8011950 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	4a22      	ldr	r2, [pc, #136]	@ (8011df0 <I2C_ITSlaveCplt+0x23c>)
 8011d66:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	2241      	movs	r2, #65	@ 0x41
 8011d6c:	2120      	movs	r1, #32
 8011d6e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2200      	movs	r2, #0
 8011d74:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2240      	movs	r2, #64	@ 0x40
 8011d7a:	2100      	movs	r1, #0
 8011d7c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	0018      	movs	r0, r3
 8011d82:	f7fe ffae 	bl	8010ce2 <HAL_I2C_ListenCpltCallback>
}
 8011d86:	e024      	b.n	8011dd2 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	2241      	movs	r2, #65	@ 0x41
 8011d8c:	5c9b      	ldrb	r3, [r3, r2]
 8011d8e:	b2db      	uxtb	r3, r3
 8011d90:	2b22      	cmp	r3, #34	@ 0x22
 8011d92:	d10f      	bne.n	8011db4 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2241      	movs	r2, #65	@ 0x41
 8011d98:	2120      	movs	r1, #32
 8011d9a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2240      	movs	r2, #64	@ 0x40
 8011da6:	2100      	movs	r1, #0
 8011da8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	0018      	movs	r0, r3
 8011dae:	f7fe ff80 	bl	8010cb2 <HAL_I2C_SlaveRxCpltCallback>
}
 8011db2:	e00e      	b.n	8011dd2 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	2241      	movs	r2, #65	@ 0x41
 8011db8:	2120      	movs	r1, #32
 8011dba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2240      	movs	r2, #64	@ 0x40
 8011dc6:	2100      	movs	r1, #0
 8011dc8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	0018      	movs	r0, r3
 8011dce:	f7fe ff68 	bl	8010ca2 <HAL_I2C_SlaveTxCpltCallback>
}
 8011dd2:	46c0      	nop			@ (mov r8, r8)
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	b006      	add	sp, #24
 8011dd8:	bd80      	pop	{r7, pc}
 8011dda:	46c0      	nop			@ (mov r8, r8)
 8011ddc:	00008001 	.word	0x00008001
 8011de0:	00008002 	.word	0x00008002
 8011de4:	fe00e800 	.word	0xfe00e800
 8011de8:	ffffbfff 	.word	0xffffbfff
 8011dec:	ffff7fff 	.word	0xffff7fff
 8011df0:	ffff0000 	.word	0xffff0000

08011df4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b082      	sub	sp, #8
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
 8011dfc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	4a26      	ldr	r2, [pc, #152]	@ (8011e9c <I2C_ITListenCplt+0xa8>)
 8011e02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2200      	movs	r2, #0
 8011e08:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	2241      	movs	r2, #65	@ 0x41
 8011e0e:	2120      	movs	r1, #32
 8011e10:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2242      	movs	r2, #66	@ 0x42
 8011e16:	2100      	movs	r1, #0
 8011e18:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	2204      	movs	r2, #4
 8011e24:	4013      	ands	r3, r2
 8011e26:	d022      	beq.n	8011e6e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e32:	b2d2      	uxtb	r2, r2
 8011e34:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e3a:	1c5a      	adds	r2, r3, #1
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d012      	beq.n	8011e6e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e4c:	3b01      	subs	r3, #1
 8011e4e:	b29a      	uxth	r2, r3
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011e58:	b29b      	uxth	r3, r3
 8011e5a:	3b01      	subs	r3, #1
 8011e5c:	b29a      	uxth	r2, r3
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011e66:	2204      	movs	r2, #4
 8011e68:	431a      	orrs	r2, r3
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8011ea0 <I2C_ITListenCplt+0xac>)
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	0011      	movs	r1, r2
 8011e74:	0018      	movs	r0, r3
 8011e76:	f000 fd55 	bl	8012924 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	2210      	movs	r2, #16
 8011e80:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2240      	movs	r2, #64	@ 0x40
 8011e86:	2100      	movs	r1, #0
 8011e88:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	0018      	movs	r0, r3
 8011e8e:	f7fe ff28 	bl	8010ce2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8011e92:	46c0      	nop			@ (mov r8, r8)
 8011e94:	46bd      	mov	sp, r7
 8011e96:	b002      	add	sp, #8
 8011e98:	bd80      	pop	{r7, pc}
 8011e9a:	46c0      	nop			@ (mov r8, r8)
 8011e9c:	ffff0000 	.word	0xffff0000
 8011ea0:	00008003 	.word	0x00008003

08011ea4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b084      	sub	sp, #16
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
 8011eac:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8011eae:	200f      	movs	r0, #15
 8011eb0:	183b      	adds	r3, r7, r0
 8011eb2:	687a      	ldr	r2, [r7, #4]
 8011eb4:	2141      	movs	r1, #65	@ 0x41
 8011eb6:	5c52      	ldrb	r2, [r2, r1]
 8011eb8:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2242      	movs	r2, #66	@ 0x42
 8011ebe:	2100      	movs	r1, #0
 8011ec0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	4a72      	ldr	r2, [pc, #456]	@ (8012090 <I2C_ITError+0x1ec>)
 8011ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	2200      	movs	r2, #0
 8011ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	431a      	orrs	r2, r3
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8011eda:	183b      	adds	r3, r7, r0
 8011edc:	781b      	ldrb	r3, [r3, #0]
 8011ede:	2b28      	cmp	r3, #40	@ 0x28
 8011ee0:	d007      	beq.n	8011ef2 <I2C_ITError+0x4e>
 8011ee2:	183b      	adds	r3, r7, r0
 8011ee4:	781b      	ldrb	r3, [r3, #0]
 8011ee6:	2b29      	cmp	r3, #41	@ 0x29
 8011ee8:	d003      	beq.n	8011ef2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8011eea:	183b      	adds	r3, r7, r0
 8011eec:	781b      	ldrb	r3, [r3, #0]
 8011eee:	2b2a      	cmp	r3, #42	@ 0x2a
 8011ef0:	d10c      	bne.n	8011f0c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	2103      	movs	r1, #3
 8011ef6:	0018      	movs	r0, r3
 8011ef8:	f000 fd14 	bl	8012924 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2241      	movs	r2, #65	@ 0x41
 8011f00:	2128      	movs	r1, #40	@ 0x28
 8011f02:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	4a63      	ldr	r2, [pc, #396]	@ (8012094 <I2C_ITError+0x1f0>)
 8011f08:	635a      	str	r2, [r3, #52]	@ 0x34
 8011f0a:	e032      	b.n	8011f72 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8011f0c:	4a62      	ldr	r2, [pc, #392]	@ (8012098 <I2C_ITError+0x1f4>)
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	0011      	movs	r1, r2
 8011f12:	0018      	movs	r0, r3
 8011f14:	f000 fd06 	bl	8012924 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	0018      	movs	r0, r3
 8011f1c:	f000 f8ed 	bl	80120fa <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	2241      	movs	r2, #65	@ 0x41
 8011f24:	5c9b      	ldrb	r3, [r3, r2]
 8011f26:	b2db      	uxtb	r3, r3
 8011f28:	2b60      	cmp	r3, #96	@ 0x60
 8011f2a:	d01f      	beq.n	8011f6c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2241      	movs	r2, #65	@ 0x41
 8011f30:	2120      	movs	r1, #32
 8011f32:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	699b      	ldr	r3, [r3, #24]
 8011f3a:	2220      	movs	r2, #32
 8011f3c:	4013      	ands	r3, r2
 8011f3e:	2b20      	cmp	r3, #32
 8011f40:	d114      	bne.n	8011f6c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	699b      	ldr	r3, [r3, #24]
 8011f48:	2210      	movs	r2, #16
 8011f4a:	4013      	ands	r3, r2
 8011f4c:	2b10      	cmp	r3, #16
 8011f4e:	d109      	bne.n	8011f64 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	2210      	movs	r2, #16
 8011f56:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011f5c:	2204      	movs	r2, #4
 8011f5e:	431a      	orrs	r2, r3
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	2220      	movs	r2, #32
 8011f6a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2200      	movs	r2, #0
 8011f70:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f76:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d03b      	beq.n	8011ff8 <I2C_ITError+0x154>
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	2b11      	cmp	r3, #17
 8011f84:	d002      	beq.n	8011f8c <I2C_ITError+0xe8>
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	2b21      	cmp	r3, #33	@ 0x21
 8011f8a:	d135      	bne.n	8011ff8 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	681a      	ldr	r2, [r3, #0]
 8011f92:	2380      	movs	r3, #128	@ 0x80
 8011f94:	01db      	lsls	r3, r3, #7
 8011f96:	401a      	ands	r2, r3
 8011f98:	2380      	movs	r3, #128	@ 0x80
 8011f9a:	01db      	lsls	r3, r3, #7
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d107      	bne.n	8011fb0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	681a      	ldr	r2, [r3, #0]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	493c      	ldr	r1, [pc, #240]	@ (801209c <I2C_ITError+0x1f8>)
 8011fac:	400a      	ands	r2, r1
 8011fae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fb4:	0018      	movs	r0, r3
 8011fb6:	f7fd fd62 	bl	800fa7e <HAL_DMA_GetState>
 8011fba:	0003      	movs	r3, r0
 8011fbc:	2b01      	cmp	r3, #1
 8011fbe:	d016      	beq.n	8011fee <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fc4:	4a36      	ldr	r2, [pc, #216]	@ (80120a0 <I2C_ITError+0x1fc>)
 8011fc6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2240      	movs	r2, #64	@ 0x40
 8011fcc:	2100      	movs	r1, #0
 8011fce:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fd4:	0018      	movs	r0, r3
 8011fd6:	f7fd fc5d 	bl	800f894 <HAL_DMA_Abort_IT>
 8011fda:	1e03      	subs	r3, r0, #0
 8011fdc:	d051      	beq.n	8012082 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fe2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fe8:	0018      	movs	r0, r3
 8011fea:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011fec:	e049      	b.n	8012082 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	0018      	movs	r0, r3
 8011ff2:	f000 f859 	bl	80120a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8011ff6:	e044      	b.n	8012082 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d03b      	beq.n	8012078 <I2C_ITError+0x1d4>
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	2b12      	cmp	r3, #18
 8012004:	d002      	beq.n	801200c <I2C_ITError+0x168>
 8012006:	68bb      	ldr	r3, [r7, #8]
 8012008:	2b22      	cmp	r3, #34	@ 0x22
 801200a:	d135      	bne.n	8012078 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	681a      	ldr	r2, [r3, #0]
 8012012:	2380      	movs	r3, #128	@ 0x80
 8012014:	021b      	lsls	r3, r3, #8
 8012016:	401a      	ands	r2, r3
 8012018:	2380      	movs	r3, #128	@ 0x80
 801201a:	021b      	lsls	r3, r3, #8
 801201c:	429a      	cmp	r2, r3
 801201e:	d107      	bne.n	8012030 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	681a      	ldr	r2, [r3, #0]
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	491e      	ldr	r1, [pc, #120]	@ (80120a4 <I2C_ITError+0x200>)
 801202c:	400a      	ands	r2, r1
 801202e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012034:	0018      	movs	r0, r3
 8012036:	f7fd fd22 	bl	800fa7e <HAL_DMA_GetState>
 801203a:	0003      	movs	r3, r0
 801203c:	2b01      	cmp	r3, #1
 801203e:	d016      	beq.n	801206e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012044:	4a16      	ldr	r2, [pc, #88]	@ (80120a0 <I2C_ITError+0x1fc>)
 8012046:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2240      	movs	r2, #64	@ 0x40
 801204c:	2100      	movs	r1, #0
 801204e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012054:	0018      	movs	r0, r3
 8012056:	f7fd fc1d 	bl	800f894 <HAL_DMA_Abort_IT>
 801205a:	1e03      	subs	r3, r0, #0
 801205c:	d013      	beq.n	8012086 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012062:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012068:	0018      	movs	r0, r3
 801206a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801206c:	e00b      	b.n	8012086 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	0018      	movs	r0, r3
 8012072:	f000 f819 	bl	80120a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012076:	e006      	b.n	8012086 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	0018      	movs	r0, r3
 801207c:	f000 f814 	bl	80120a8 <I2C_TreatErrorCallback>
  }
}
 8012080:	e002      	b.n	8012088 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8012082:	46c0      	nop			@ (mov r8, r8)
 8012084:	e000      	b.n	8012088 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012086:	46c0      	nop			@ (mov r8, r8)
}
 8012088:	46c0      	nop			@ (mov r8, r8)
 801208a:	46bd      	mov	sp, r7
 801208c:	b004      	add	sp, #16
 801208e:	bd80      	pop	{r7, pc}
 8012090:	ffff0000 	.word	0xffff0000
 8012094:	08010f89 	.word	0x08010f89
 8012098:	00008003 	.word	0x00008003
 801209c:	ffffbfff 	.word	0xffffbfff
 80120a0:	080122b3 	.word	0x080122b3
 80120a4:	ffff7fff 	.word	0xffff7fff

080120a8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b082      	sub	sp, #8
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2241      	movs	r2, #65	@ 0x41
 80120b4:	5c9b      	ldrb	r3, [r3, r2]
 80120b6:	b2db      	uxtb	r3, r3
 80120b8:	2b60      	cmp	r3, #96	@ 0x60
 80120ba:	d10f      	bne.n	80120dc <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2241      	movs	r2, #65	@ 0x41
 80120c0:	2120      	movs	r1, #32
 80120c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2200      	movs	r2, #0
 80120c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	2240      	movs	r2, #64	@ 0x40
 80120ce:	2100      	movs	r1, #0
 80120d0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	0018      	movs	r0, r3
 80120d6:	f7fe fe24 	bl	8010d22 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80120da:	e00a      	b.n	80120f2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	2200      	movs	r2, #0
 80120e0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2240      	movs	r2, #64	@ 0x40
 80120e6:	2100      	movs	r1, #0
 80120e8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	0018      	movs	r0, r3
 80120ee:	f7fe fe10 	bl	8010d12 <HAL_I2C_ErrorCallback>
}
 80120f2:	46c0      	nop			@ (mov r8, r8)
 80120f4:	46bd      	mov	sp, r7
 80120f6:	b002      	add	sp, #8
 80120f8:	bd80      	pop	{r7, pc}

080120fa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80120fa:	b580      	push	{r7, lr}
 80120fc:	b082      	sub	sp, #8
 80120fe:	af00      	add	r7, sp, #0
 8012100:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	699b      	ldr	r3, [r3, #24]
 8012108:	2202      	movs	r2, #2
 801210a:	4013      	ands	r3, r2
 801210c:	2b02      	cmp	r3, #2
 801210e:	d103      	bne.n	8012118 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	2200      	movs	r2, #0
 8012116:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	699b      	ldr	r3, [r3, #24]
 801211e:	2201      	movs	r2, #1
 8012120:	4013      	ands	r3, r2
 8012122:	2b01      	cmp	r3, #1
 8012124:	d007      	beq.n	8012136 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	699a      	ldr	r2, [r3, #24]
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	2101      	movs	r1, #1
 8012132:	430a      	orrs	r2, r1
 8012134:	619a      	str	r2, [r3, #24]
  }
}
 8012136:	46c0      	nop			@ (mov r8, r8)
 8012138:	46bd      	mov	sp, r7
 801213a:	b002      	add	sp, #8
 801213c:	bd80      	pop	{r7, pc}
	...

08012140 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b084      	sub	sp, #16
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801214c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	681a      	ldr	r2, [r3, #0]
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	4920      	ldr	r1, [pc, #128]	@ (80121dc <I2C_DMAMasterTransmitCplt+0x9c>)
 801215a:	400a      	ands	r2, r1
 801215c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012162:	b29b      	uxth	r3, r3
 8012164:	2b00      	cmp	r3, #0
 8012166:	d105      	bne.n	8012174 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	2120      	movs	r1, #32
 801216c:	0018      	movs	r0, r3
 801216e:	f000 fb4b 	bl	8012808 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8012172:	e02e      	b.n	80121d2 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012178:	68fa      	ldr	r2, [r7, #12]
 801217a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801217c:	189a      	adds	r2, r3, r2
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012186:	b29b      	uxth	r3, r3
 8012188:	2bff      	cmp	r3, #255	@ 0xff
 801218a:	d903      	bls.n	8012194 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	22ff      	movs	r2, #255	@ 0xff
 8012190:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012192:	e004      	b.n	801219e <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012198:	b29a      	uxth	r2, r3
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121a6:	0019      	movs	r1, r3
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	3328      	adds	r3, #40	@ 0x28
 80121ae:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80121b4:	f7fd fac8 	bl	800f748 <HAL_DMA_Start_IT>
 80121b8:	1e03      	subs	r3, r0, #0
 80121ba:	d005      	beq.n	80121c8 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	2110      	movs	r1, #16
 80121c0:	0018      	movs	r0, r3
 80121c2:	f7ff fe6f 	bl	8011ea4 <I2C_ITError>
}
 80121c6:	e004      	b.n	80121d2 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	2140      	movs	r1, #64	@ 0x40
 80121cc:	0018      	movs	r0, r3
 80121ce:	f000 fb1b 	bl	8012808 <I2C_Enable_IRQ>
}
 80121d2:	46c0      	nop			@ (mov r8, r8)
 80121d4:	46bd      	mov	sp, r7
 80121d6:	b004      	add	sp, #16
 80121d8:	bd80      	pop	{r7, pc}
 80121da:	46c0      	nop			@ (mov r8, r8)
 80121dc:	ffffbfff 	.word	0xffffbfff

080121e0 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b084      	sub	sp, #16
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121ec:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	681a      	ldr	r2, [r3, #0]
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	4920      	ldr	r1, [pc, #128]	@ (801227c <I2C_DMAMasterReceiveCplt+0x9c>)
 80121fa:	400a      	ands	r2, r1
 80121fc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012202:	b29b      	uxth	r3, r3
 8012204:	2b00      	cmp	r3, #0
 8012206:	d105      	bne.n	8012214 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	2120      	movs	r1, #32
 801220c:	0018      	movs	r0, r3
 801220e:	f000 fafb 	bl	8012808 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8012212:	e02e      	b.n	8012272 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012218:	68fa      	ldr	r2, [r7, #12]
 801221a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801221c:	189a      	adds	r2, r3, r2
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012226:	b29b      	uxth	r3, r3
 8012228:	2bff      	cmp	r3, #255	@ 0xff
 801222a:	d903      	bls.n	8012234 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	22ff      	movs	r2, #255	@ 0xff
 8012230:	851a      	strh	r2, [r3, #40]	@ 0x28
 8012232:	e004      	b.n	801223e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012238:	b29a      	uxth	r2, r3
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	3324      	adds	r3, #36	@ 0x24
 8012248:	0019      	movs	r1, r3
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801224e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8012254:	f7fd fa78 	bl	800f748 <HAL_DMA_Start_IT>
 8012258:	1e03      	subs	r3, r0, #0
 801225a:	d005      	beq.n	8012268 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	2110      	movs	r1, #16
 8012260:	0018      	movs	r0, r3
 8012262:	f7ff fe1f 	bl	8011ea4 <I2C_ITError>
}
 8012266:	e004      	b.n	8012272 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2140      	movs	r1, #64	@ 0x40
 801226c:	0018      	movs	r0, r3
 801226e:	f000 facb 	bl	8012808 <I2C_Enable_IRQ>
}
 8012272:	46c0      	nop			@ (mov r8, r8)
 8012274:	46bd      	mov	sp, r7
 8012276:	b004      	add	sp, #16
 8012278:	bd80      	pop	{r7, pc}
 801227a:	46c0      	nop			@ (mov r8, r8)
 801227c:	ffff7fff 	.word	0xffff7fff

08012280 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b084      	sub	sp, #16
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801228c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	685a      	ldr	r2, [r3, #4]
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	2180      	movs	r1, #128	@ 0x80
 801229a:	0209      	lsls	r1, r1, #8
 801229c:	430a      	orrs	r2, r1
 801229e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	2110      	movs	r1, #16
 80122a4:	0018      	movs	r0, r3
 80122a6:	f7ff fdfd 	bl	8011ea4 <I2C_ITError>
}
 80122aa:	46c0      	nop			@ (mov r8, r8)
 80122ac:	46bd      	mov	sp, r7
 80122ae:	b004      	add	sp, #16
 80122b0:	bd80      	pop	{r7, pc}

080122b2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80122b2:	b580      	push	{r7, lr}
 80122b4:	b084      	sub	sp, #16
 80122b6:	af00      	add	r7, sp, #0
 80122b8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122be:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d003      	beq.n	80122d0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122cc:	2200      	movs	r2, #0
 80122ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d003      	beq.n	80122e0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80122dc:	2200      	movs	r2, #0
 80122de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	0018      	movs	r0, r3
 80122e4:	f7ff fee0 	bl	80120a8 <I2C_TreatErrorCallback>
}
 80122e8:	46c0      	nop			@ (mov r8, r8)
 80122ea:	46bd      	mov	sp, r7
 80122ec:	b004      	add	sp, #16
 80122ee:	bd80      	pop	{r7, pc}

080122f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b084      	sub	sp, #16
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	60f8      	str	r0, [r7, #12]
 80122f8:	60b9      	str	r1, [r7, #8]
 80122fa:	603b      	str	r3, [r7, #0]
 80122fc:	1dfb      	adds	r3, r7, #7
 80122fe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012300:	e030      	b.n	8012364 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012302:	683b      	ldr	r3, [r7, #0]
 8012304:	3301      	adds	r3, #1
 8012306:	d02d      	beq.n	8012364 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012308:	f7fc fccc 	bl	800eca4 <HAL_GetTick>
 801230c:	0002      	movs	r2, r0
 801230e:	69bb      	ldr	r3, [r7, #24]
 8012310:	1ad3      	subs	r3, r2, r3
 8012312:	683a      	ldr	r2, [r7, #0]
 8012314:	429a      	cmp	r2, r3
 8012316:	d302      	bcc.n	801231e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d122      	bne.n	8012364 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	699b      	ldr	r3, [r3, #24]
 8012324:	68ba      	ldr	r2, [r7, #8]
 8012326:	4013      	ands	r3, r2
 8012328:	68ba      	ldr	r2, [r7, #8]
 801232a:	1ad3      	subs	r3, r2, r3
 801232c:	425a      	negs	r2, r3
 801232e:	4153      	adcs	r3, r2
 8012330:	b2db      	uxtb	r3, r3
 8012332:	001a      	movs	r2, r3
 8012334:	1dfb      	adds	r3, r7, #7
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	429a      	cmp	r2, r3
 801233a:	d113      	bne.n	8012364 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012340:	2220      	movs	r2, #32
 8012342:	431a      	orrs	r2, r3
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	2241      	movs	r2, #65	@ 0x41
 801234c:	2120      	movs	r1, #32
 801234e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	2242      	movs	r2, #66	@ 0x42
 8012354:	2100      	movs	r1, #0
 8012356:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	2240      	movs	r2, #64	@ 0x40
 801235c:	2100      	movs	r1, #0
 801235e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8012360:	2301      	movs	r3, #1
 8012362:	e00f      	b.n	8012384 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	699b      	ldr	r3, [r3, #24]
 801236a:	68ba      	ldr	r2, [r7, #8]
 801236c:	4013      	ands	r3, r2
 801236e:	68ba      	ldr	r2, [r7, #8]
 8012370:	1ad3      	subs	r3, r2, r3
 8012372:	425a      	negs	r2, r3
 8012374:	4153      	adcs	r3, r2
 8012376:	b2db      	uxtb	r3, r3
 8012378:	001a      	movs	r2, r3
 801237a:	1dfb      	adds	r3, r7, #7
 801237c:	781b      	ldrb	r3, [r3, #0]
 801237e:	429a      	cmp	r2, r3
 8012380:	d0bf      	beq.n	8012302 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012382:	2300      	movs	r3, #0
}
 8012384:	0018      	movs	r0, r3
 8012386:	46bd      	mov	sp, r7
 8012388:	b004      	add	sp, #16
 801238a:	bd80      	pop	{r7, pc}

0801238c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b084      	sub	sp, #16
 8012390:	af00      	add	r7, sp, #0
 8012392:	60f8      	str	r0, [r7, #12]
 8012394:	60b9      	str	r1, [r7, #8]
 8012396:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012398:	e032      	b.n	8012400 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801239a:	687a      	ldr	r2, [r7, #4]
 801239c:	68b9      	ldr	r1, [r7, #8]
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	0018      	movs	r0, r3
 80123a2:	f000 f8ff 	bl	80125a4 <I2C_IsErrorOccurred>
 80123a6:	1e03      	subs	r3, r0, #0
 80123a8:	d001      	beq.n	80123ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80123aa:	2301      	movs	r3, #1
 80123ac:	e030      	b.n	8012410 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80123ae:	68bb      	ldr	r3, [r7, #8]
 80123b0:	3301      	adds	r3, #1
 80123b2:	d025      	beq.n	8012400 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80123b4:	f7fc fc76 	bl	800eca4 <HAL_GetTick>
 80123b8:	0002      	movs	r2, r0
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	1ad3      	subs	r3, r2, r3
 80123be:	68ba      	ldr	r2, [r7, #8]
 80123c0:	429a      	cmp	r2, r3
 80123c2:	d302      	bcc.n	80123ca <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d11a      	bne.n	8012400 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	699b      	ldr	r3, [r3, #24]
 80123d0:	2202      	movs	r2, #2
 80123d2:	4013      	ands	r3, r2
 80123d4:	2b02      	cmp	r3, #2
 80123d6:	d013      	beq.n	8012400 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80123dc:	2220      	movs	r2, #32
 80123de:	431a      	orrs	r2, r3
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	2241      	movs	r2, #65	@ 0x41
 80123e8:	2120      	movs	r1, #32
 80123ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	2242      	movs	r2, #66	@ 0x42
 80123f0:	2100      	movs	r1, #0
 80123f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	2240      	movs	r2, #64	@ 0x40
 80123f8:	2100      	movs	r1, #0
 80123fa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80123fc:	2301      	movs	r3, #1
 80123fe:	e007      	b.n	8012410 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	699b      	ldr	r3, [r3, #24]
 8012406:	2202      	movs	r2, #2
 8012408:	4013      	ands	r3, r2
 801240a:	2b02      	cmp	r3, #2
 801240c:	d1c5      	bne.n	801239a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801240e:	2300      	movs	r3, #0
}
 8012410:	0018      	movs	r0, r3
 8012412:	46bd      	mov	sp, r7
 8012414:	b004      	add	sp, #16
 8012416:	bd80      	pop	{r7, pc}

08012418 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b084      	sub	sp, #16
 801241c:	af00      	add	r7, sp, #0
 801241e:	60f8      	str	r0, [r7, #12]
 8012420:	60b9      	str	r1, [r7, #8]
 8012422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012424:	e02f      	b.n	8012486 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8012426:	687a      	ldr	r2, [r7, #4]
 8012428:	68b9      	ldr	r1, [r7, #8]
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	0018      	movs	r0, r3
 801242e:	f000 f8b9 	bl	80125a4 <I2C_IsErrorOccurred>
 8012432:	1e03      	subs	r3, r0, #0
 8012434:	d001      	beq.n	801243a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8012436:	2301      	movs	r3, #1
 8012438:	e02d      	b.n	8012496 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801243a:	f7fc fc33 	bl	800eca4 <HAL_GetTick>
 801243e:	0002      	movs	r2, r0
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	1ad3      	subs	r3, r2, r3
 8012444:	68ba      	ldr	r2, [r7, #8]
 8012446:	429a      	cmp	r2, r3
 8012448:	d302      	bcc.n	8012450 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d11a      	bne.n	8012486 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	699b      	ldr	r3, [r3, #24]
 8012456:	2220      	movs	r2, #32
 8012458:	4013      	ands	r3, r2
 801245a:	2b20      	cmp	r3, #32
 801245c:	d013      	beq.n	8012486 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012462:	2220      	movs	r2, #32
 8012464:	431a      	orrs	r2, r3
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	2241      	movs	r2, #65	@ 0x41
 801246e:	2120      	movs	r1, #32
 8012470:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	2242      	movs	r2, #66	@ 0x42
 8012476:	2100      	movs	r1, #0
 8012478:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	2240      	movs	r2, #64	@ 0x40
 801247e:	2100      	movs	r1, #0
 8012480:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012482:	2301      	movs	r3, #1
 8012484:	e007      	b.n	8012496 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	699b      	ldr	r3, [r3, #24]
 801248c:	2220      	movs	r2, #32
 801248e:	4013      	ands	r3, r2
 8012490:	2b20      	cmp	r3, #32
 8012492:	d1c8      	bne.n	8012426 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012494:	2300      	movs	r3, #0
}
 8012496:	0018      	movs	r0, r3
 8012498:	46bd      	mov	sp, r7
 801249a:	b004      	add	sp, #16
 801249c:	bd80      	pop	{r7, pc}
	...

080124a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b084      	sub	sp, #16
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	60f8      	str	r0, [r7, #12]
 80124a8:	60b9      	str	r1, [r7, #8]
 80124aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80124ac:	e06b      	b.n	8012586 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80124ae:	687a      	ldr	r2, [r7, #4]
 80124b0:	68b9      	ldr	r1, [r7, #8]
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	0018      	movs	r0, r3
 80124b6:	f000 f875 	bl	80125a4 <I2C_IsErrorOccurred>
 80124ba:	1e03      	subs	r3, r0, #0
 80124bc:	d001      	beq.n	80124c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80124be:	2301      	movs	r3, #1
 80124c0:	e069      	b.n	8012596 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	699b      	ldr	r3, [r3, #24]
 80124c8:	2220      	movs	r2, #32
 80124ca:	4013      	ands	r3, r2
 80124cc:	2b20      	cmp	r3, #32
 80124ce:	d138      	bne.n	8012542 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	699b      	ldr	r3, [r3, #24]
 80124d6:	2204      	movs	r2, #4
 80124d8:	4013      	ands	r3, r2
 80124da:	2b04      	cmp	r3, #4
 80124dc:	d105      	bne.n	80124ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d001      	beq.n	80124ea <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80124e6:	2300      	movs	r3, #0
 80124e8:	e055      	b.n	8012596 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	699b      	ldr	r3, [r3, #24]
 80124f0:	2210      	movs	r2, #16
 80124f2:	4013      	ands	r3, r2
 80124f4:	2b10      	cmp	r3, #16
 80124f6:	d107      	bne.n	8012508 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	2210      	movs	r2, #16
 80124fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	2204      	movs	r2, #4
 8012504:	645a      	str	r2, [r3, #68]	@ 0x44
 8012506:	e002      	b.n	801250e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	2200      	movs	r2, #0
 801250c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	2220      	movs	r2, #32
 8012514:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	685a      	ldr	r2, [r3, #4]
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	491f      	ldr	r1, [pc, #124]	@ (80125a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8012522:	400a      	ands	r2, r1
 8012524:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	2241      	movs	r2, #65	@ 0x41
 801252a:	2120      	movs	r1, #32
 801252c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	2242      	movs	r2, #66	@ 0x42
 8012532:	2100      	movs	r1, #0
 8012534:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	2240      	movs	r2, #64	@ 0x40
 801253a:	2100      	movs	r1, #0
 801253c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801253e:	2301      	movs	r3, #1
 8012540:	e029      	b.n	8012596 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012542:	f7fc fbaf 	bl	800eca4 <HAL_GetTick>
 8012546:	0002      	movs	r2, r0
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	1ad3      	subs	r3, r2, r3
 801254c:	68ba      	ldr	r2, [r7, #8]
 801254e:	429a      	cmp	r2, r3
 8012550:	d302      	bcc.n	8012558 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8012552:	68bb      	ldr	r3, [r7, #8]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d116      	bne.n	8012586 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	699b      	ldr	r3, [r3, #24]
 801255e:	2204      	movs	r2, #4
 8012560:	4013      	ands	r3, r2
 8012562:	2b04      	cmp	r3, #4
 8012564:	d00f      	beq.n	8012586 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801256a:	2220      	movs	r2, #32
 801256c:	431a      	orrs	r2, r3
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	2241      	movs	r2, #65	@ 0x41
 8012576:	2120      	movs	r1, #32
 8012578:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	2240      	movs	r2, #64	@ 0x40
 801257e:	2100      	movs	r1, #0
 8012580:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8012582:	2301      	movs	r3, #1
 8012584:	e007      	b.n	8012596 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	699b      	ldr	r3, [r3, #24]
 801258c:	2204      	movs	r2, #4
 801258e:	4013      	ands	r3, r2
 8012590:	2b04      	cmp	r3, #4
 8012592:	d18c      	bne.n	80124ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8012594:	2300      	movs	r3, #0
}
 8012596:	0018      	movs	r0, r3
 8012598:	46bd      	mov	sp, r7
 801259a:	b004      	add	sp, #16
 801259c:	bd80      	pop	{r7, pc}
 801259e:	46c0      	nop			@ (mov r8, r8)
 80125a0:	fe00e800 	.word	0xfe00e800

080125a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b08a      	sub	sp, #40	@ 0x28
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	60f8      	str	r0, [r7, #12]
 80125ac:	60b9      	str	r1, [r7, #8]
 80125ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80125b0:	2327      	movs	r3, #39	@ 0x27
 80125b2:	18fb      	adds	r3, r7, r3
 80125b4:	2200      	movs	r2, #0
 80125b6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	699b      	ldr	r3, [r3, #24]
 80125be:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80125c0:	2300      	movs	r3, #0
 80125c2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80125c8:	69bb      	ldr	r3, [r7, #24]
 80125ca:	2210      	movs	r2, #16
 80125cc:	4013      	ands	r3, r2
 80125ce:	d100      	bne.n	80125d2 <I2C_IsErrorOccurred+0x2e>
 80125d0:	e079      	b.n	80126c6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	2210      	movs	r2, #16
 80125d8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80125da:	e057      	b.n	801268c <I2C_IsErrorOccurred+0xe8>
 80125dc:	2227      	movs	r2, #39	@ 0x27
 80125de:	18bb      	adds	r3, r7, r2
 80125e0:	18ba      	adds	r2, r7, r2
 80125e2:	7812      	ldrb	r2, [r2, #0]
 80125e4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	3301      	adds	r3, #1
 80125ea:	d04f      	beq.n	801268c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80125ec:	f7fc fb5a 	bl	800eca4 <HAL_GetTick>
 80125f0:	0002      	movs	r2, r0
 80125f2:	69fb      	ldr	r3, [r7, #28]
 80125f4:	1ad3      	subs	r3, r2, r3
 80125f6:	68ba      	ldr	r2, [r7, #8]
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d302      	bcc.n	8012602 <I2C_IsErrorOccurred+0x5e>
 80125fc:	68bb      	ldr	r3, [r7, #8]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d144      	bne.n	801268c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	685a      	ldr	r2, [r3, #4]
 8012608:	2380      	movs	r3, #128	@ 0x80
 801260a:	01db      	lsls	r3, r3, #7
 801260c:	4013      	ands	r3, r2
 801260e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8012610:	2013      	movs	r0, #19
 8012612:	183b      	adds	r3, r7, r0
 8012614:	68fa      	ldr	r2, [r7, #12]
 8012616:	2142      	movs	r1, #66	@ 0x42
 8012618:	5c52      	ldrb	r2, [r2, r1]
 801261a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	699a      	ldr	r2, [r3, #24]
 8012622:	2380      	movs	r3, #128	@ 0x80
 8012624:	021b      	lsls	r3, r3, #8
 8012626:	401a      	ands	r2, r3
 8012628:	2380      	movs	r3, #128	@ 0x80
 801262a:	021b      	lsls	r3, r3, #8
 801262c:	429a      	cmp	r2, r3
 801262e:	d126      	bne.n	801267e <I2C_IsErrorOccurred+0xda>
 8012630:	697a      	ldr	r2, [r7, #20]
 8012632:	2380      	movs	r3, #128	@ 0x80
 8012634:	01db      	lsls	r3, r3, #7
 8012636:	429a      	cmp	r2, r3
 8012638:	d021      	beq.n	801267e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 801263a:	183b      	adds	r3, r7, r0
 801263c:	781b      	ldrb	r3, [r3, #0]
 801263e:	2b20      	cmp	r3, #32
 8012640:	d01d      	beq.n	801267e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	685a      	ldr	r2, [r3, #4]
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	2180      	movs	r1, #128	@ 0x80
 801264e:	01c9      	lsls	r1, r1, #7
 8012650:	430a      	orrs	r2, r1
 8012652:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8012654:	f7fc fb26 	bl	800eca4 <HAL_GetTick>
 8012658:	0003      	movs	r3, r0
 801265a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801265c:	e00f      	b.n	801267e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801265e:	f7fc fb21 	bl	800eca4 <HAL_GetTick>
 8012662:	0002      	movs	r2, r0
 8012664:	69fb      	ldr	r3, [r7, #28]
 8012666:	1ad3      	subs	r3, r2, r3
 8012668:	2b19      	cmp	r3, #25
 801266a:	d908      	bls.n	801267e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801266c:	6a3b      	ldr	r3, [r7, #32]
 801266e:	2220      	movs	r2, #32
 8012670:	4313      	orrs	r3, r2
 8012672:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8012674:	2327      	movs	r3, #39	@ 0x27
 8012676:	18fb      	adds	r3, r7, r3
 8012678:	2201      	movs	r2, #1
 801267a:	701a      	strb	r2, [r3, #0]

              break;
 801267c:	e006      	b.n	801268c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	699b      	ldr	r3, [r3, #24]
 8012684:	2220      	movs	r2, #32
 8012686:	4013      	ands	r3, r2
 8012688:	2b20      	cmp	r3, #32
 801268a:	d1e8      	bne.n	801265e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	699b      	ldr	r3, [r3, #24]
 8012692:	2220      	movs	r2, #32
 8012694:	4013      	ands	r3, r2
 8012696:	2b20      	cmp	r3, #32
 8012698:	d004      	beq.n	80126a4 <I2C_IsErrorOccurred+0x100>
 801269a:	2327      	movs	r3, #39	@ 0x27
 801269c:	18fb      	adds	r3, r7, r3
 801269e:	781b      	ldrb	r3, [r3, #0]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d09b      	beq.n	80125dc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80126a4:	2327      	movs	r3, #39	@ 0x27
 80126a6:	18fb      	adds	r3, r7, r3
 80126a8:	781b      	ldrb	r3, [r3, #0]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d103      	bne.n	80126b6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	2220      	movs	r2, #32
 80126b4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80126b6:	6a3b      	ldr	r3, [r7, #32]
 80126b8:	2204      	movs	r2, #4
 80126ba:	4313      	orrs	r3, r2
 80126bc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80126be:	2327      	movs	r3, #39	@ 0x27
 80126c0:	18fb      	adds	r3, r7, r3
 80126c2:	2201      	movs	r2, #1
 80126c4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	699b      	ldr	r3, [r3, #24]
 80126cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80126ce:	69ba      	ldr	r2, [r7, #24]
 80126d0:	2380      	movs	r3, #128	@ 0x80
 80126d2:	005b      	lsls	r3, r3, #1
 80126d4:	4013      	ands	r3, r2
 80126d6:	d00c      	beq.n	80126f2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80126d8:	6a3b      	ldr	r3, [r7, #32]
 80126da:	2201      	movs	r2, #1
 80126dc:	4313      	orrs	r3, r2
 80126de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	2280      	movs	r2, #128	@ 0x80
 80126e6:	0052      	lsls	r2, r2, #1
 80126e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80126ea:	2327      	movs	r3, #39	@ 0x27
 80126ec:	18fb      	adds	r3, r7, r3
 80126ee:	2201      	movs	r2, #1
 80126f0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80126f2:	69ba      	ldr	r2, [r7, #24]
 80126f4:	2380      	movs	r3, #128	@ 0x80
 80126f6:	00db      	lsls	r3, r3, #3
 80126f8:	4013      	ands	r3, r2
 80126fa:	d00c      	beq.n	8012716 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80126fc:	6a3b      	ldr	r3, [r7, #32]
 80126fe:	2208      	movs	r2, #8
 8012700:	4313      	orrs	r3, r2
 8012702:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	2280      	movs	r2, #128	@ 0x80
 801270a:	00d2      	lsls	r2, r2, #3
 801270c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801270e:	2327      	movs	r3, #39	@ 0x27
 8012710:	18fb      	adds	r3, r7, r3
 8012712:	2201      	movs	r2, #1
 8012714:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8012716:	69ba      	ldr	r2, [r7, #24]
 8012718:	2380      	movs	r3, #128	@ 0x80
 801271a:	009b      	lsls	r3, r3, #2
 801271c:	4013      	ands	r3, r2
 801271e:	d00c      	beq.n	801273a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8012720:	6a3b      	ldr	r3, [r7, #32]
 8012722:	2202      	movs	r2, #2
 8012724:	4313      	orrs	r3, r2
 8012726:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	2280      	movs	r2, #128	@ 0x80
 801272e:	0092      	lsls	r2, r2, #2
 8012730:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8012732:	2327      	movs	r3, #39	@ 0x27
 8012734:	18fb      	adds	r3, r7, r3
 8012736:	2201      	movs	r2, #1
 8012738:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 801273a:	2327      	movs	r3, #39	@ 0x27
 801273c:	18fb      	adds	r3, r7, r3
 801273e:	781b      	ldrb	r3, [r3, #0]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d01d      	beq.n	8012780 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	0018      	movs	r0, r3
 8012748:	f7ff fcd7 	bl	80120fa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	685a      	ldr	r2, [r3, #4]
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	490e      	ldr	r1, [pc, #56]	@ (8012790 <I2C_IsErrorOccurred+0x1ec>)
 8012758:	400a      	ands	r2, r1
 801275a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012760:	6a3b      	ldr	r3, [r7, #32]
 8012762:	431a      	orrs	r2, r3
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	2241      	movs	r2, #65	@ 0x41
 801276c:	2120      	movs	r1, #32
 801276e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	2242      	movs	r2, #66	@ 0x42
 8012774:	2100      	movs	r1, #0
 8012776:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	2240      	movs	r2, #64	@ 0x40
 801277c:	2100      	movs	r1, #0
 801277e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8012780:	2327      	movs	r3, #39	@ 0x27
 8012782:	18fb      	adds	r3, r7, r3
 8012784:	781b      	ldrb	r3, [r3, #0]
}
 8012786:	0018      	movs	r0, r3
 8012788:	46bd      	mov	sp, r7
 801278a:	b00a      	add	sp, #40	@ 0x28
 801278c:	bd80      	pop	{r7, pc}
 801278e:	46c0      	nop			@ (mov r8, r8)
 8012790:	fe00e800 	.word	0xfe00e800

08012794 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8012794:	b590      	push	{r4, r7, lr}
 8012796:	b087      	sub	sp, #28
 8012798:	af00      	add	r7, sp, #0
 801279a:	60f8      	str	r0, [r7, #12]
 801279c:	0008      	movs	r0, r1
 801279e:	0011      	movs	r1, r2
 80127a0:	607b      	str	r3, [r7, #4]
 80127a2:	240a      	movs	r4, #10
 80127a4:	193b      	adds	r3, r7, r4
 80127a6:	1c02      	adds	r2, r0, #0
 80127a8:	801a      	strh	r2, [r3, #0]
 80127aa:	2009      	movs	r0, #9
 80127ac:	183b      	adds	r3, r7, r0
 80127ae:	1c0a      	adds	r2, r1, #0
 80127b0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80127b2:	193b      	adds	r3, r7, r4
 80127b4:	881b      	ldrh	r3, [r3, #0]
 80127b6:	059b      	lsls	r3, r3, #22
 80127b8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80127ba:	183b      	adds	r3, r7, r0
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	0419      	lsls	r1, r3, #16
 80127c0:	23ff      	movs	r3, #255	@ 0xff
 80127c2:	041b      	lsls	r3, r3, #16
 80127c4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80127c6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80127cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127ce:	4313      	orrs	r3, r2
 80127d0:	005b      	lsls	r3, r3, #1
 80127d2:	085b      	lsrs	r3, r3, #1
 80127d4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	685b      	ldr	r3, [r3, #4]
 80127dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80127de:	0d51      	lsrs	r1, r2, #21
 80127e0:	2280      	movs	r2, #128	@ 0x80
 80127e2:	00d2      	lsls	r2, r2, #3
 80127e4:	400a      	ands	r2, r1
 80127e6:	4907      	ldr	r1, [pc, #28]	@ (8012804 <I2C_TransferConfig+0x70>)
 80127e8:	430a      	orrs	r2, r1
 80127ea:	43d2      	mvns	r2, r2
 80127ec:	401a      	ands	r2, r3
 80127ee:	0011      	movs	r1, r2
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	697a      	ldr	r2, [r7, #20]
 80127f6:	430a      	orrs	r2, r1
 80127f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80127fa:	46c0      	nop			@ (mov r8, r8)
 80127fc:	46bd      	mov	sp, r7
 80127fe:	b007      	add	sp, #28
 8012800:	bd90      	pop	{r4, r7, pc}
 8012802:	46c0      	nop			@ (mov r8, r8)
 8012804:	03ff63ff 	.word	0x03ff63ff

08012808 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b084      	sub	sp, #16
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
 8012810:	000a      	movs	r2, r1
 8012812:	1cbb      	adds	r3, r7, #2
 8012814:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8012816:	2300      	movs	r3, #0
 8012818:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801281e:	4b3e      	ldr	r3, [pc, #248]	@ (8012918 <I2C_Enable_IRQ+0x110>)
 8012820:	429a      	cmp	r2, r3
 8012822:	d035      	beq.n	8012890 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8012828:	4b3c      	ldr	r3, [pc, #240]	@ (801291c <I2C_Enable_IRQ+0x114>)
 801282a:	429a      	cmp	r2, r3
 801282c:	d030      	beq.n	8012890 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8012832:	4b3b      	ldr	r3, [pc, #236]	@ (8012920 <I2C_Enable_IRQ+0x118>)
 8012834:	429a      	cmp	r2, r3
 8012836:	d02b      	beq.n	8012890 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012838:	1cbb      	adds	r3, r7, #2
 801283a:	2200      	movs	r2, #0
 801283c:	5e9b      	ldrsh	r3, [r3, r2]
 801283e:	2b00      	cmp	r3, #0
 8012840:	da03      	bge.n	801284a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	22b8      	movs	r2, #184	@ 0xb8
 8012846:	4313      	orrs	r3, r2
 8012848:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801284a:	1cbb      	adds	r3, r7, #2
 801284c:	881b      	ldrh	r3, [r3, #0]
 801284e:	2201      	movs	r2, #1
 8012850:	4013      	ands	r3, r2
 8012852:	d003      	beq.n	801285c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	22f2      	movs	r2, #242	@ 0xf2
 8012858:	4313      	orrs	r3, r2
 801285a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801285c:	1cbb      	adds	r3, r7, #2
 801285e:	881b      	ldrh	r3, [r3, #0]
 8012860:	2202      	movs	r2, #2
 8012862:	4013      	ands	r3, r2
 8012864:	d003      	beq.n	801286e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	22f4      	movs	r2, #244	@ 0xf4
 801286a:	4313      	orrs	r3, r2
 801286c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801286e:	1cbb      	adds	r3, r7, #2
 8012870:	881b      	ldrh	r3, [r3, #0]
 8012872:	2b10      	cmp	r3, #16
 8012874:	d103      	bne.n	801287e <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	2290      	movs	r2, #144	@ 0x90
 801287a:	4313      	orrs	r3, r2
 801287c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801287e:	1cbb      	adds	r3, r7, #2
 8012880:	881b      	ldrh	r3, [r3, #0]
 8012882:	2b20      	cmp	r3, #32
 8012884:	d13c      	bne.n	8012900 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2220      	movs	r2, #32
 801288a:	4313      	orrs	r3, r2
 801288c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801288e:	e037      	b.n	8012900 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8012890:	1cbb      	adds	r3, r7, #2
 8012892:	2200      	movs	r2, #0
 8012894:	5e9b      	ldrsh	r3, [r3, r2]
 8012896:	2b00      	cmp	r3, #0
 8012898:	da03      	bge.n	80128a2 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	22b8      	movs	r2, #184	@ 0xb8
 801289e:	4313      	orrs	r3, r2
 80128a0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80128a2:	1cbb      	adds	r3, r7, #2
 80128a4:	881b      	ldrh	r3, [r3, #0]
 80128a6:	2201      	movs	r2, #1
 80128a8:	4013      	ands	r3, r2
 80128aa:	d003      	beq.n	80128b4 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	22f2      	movs	r2, #242	@ 0xf2
 80128b0:	4313      	orrs	r3, r2
 80128b2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80128b4:	1cbb      	adds	r3, r7, #2
 80128b6:	881b      	ldrh	r3, [r3, #0]
 80128b8:	2202      	movs	r2, #2
 80128ba:	4013      	ands	r3, r2
 80128bc:	d003      	beq.n	80128c6 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	22f4      	movs	r2, #244	@ 0xf4
 80128c2:	4313      	orrs	r3, r2
 80128c4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80128c6:	1cbb      	adds	r3, r7, #2
 80128c8:	881b      	ldrh	r3, [r3, #0]
 80128ca:	2b10      	cmp	r3, #16
 80128cc:	d103      	bne.n	80128d6 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	2290      	movs	r2, #144	@ 0x90
 80128d2:	4313      	orrs	r3, r2
 80128d4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80128d6:	1cbb      	adds	r3, r7, #2
 80128d8:	881b      	ldrh	r3, [r3, #0]
 80128da:	2b20      	cmp	r3, #32
 80128dc:	d103      	bne.n	80128e6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	2260      	movs	r2, #96	@ 0x60
 80128e2:	4313      	orrs	r3, r2
 80128e4:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80128ea:	4b0d      	ldr	r3, [pc, #52]	@ (8012920 <I2C_Enable_IRQ+0x118>)
 80128ec:	429a      	cmp	r2, r3
 80128ee:	d007      	beq.n	8012900 <I2C_Enable_IRQ+0xf8>
 80128f0:	1cbb      	adds	r3, r7, #2
 80128f2:	881b      	ldrh	r3, [r3, #0]
 80128f4:	2b40      	cmp	r3, #64	@ 0x40
 80128f6:	d103      	bne.n	8012900 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	2240      	movs	r2, #64	@ 0x40
 80128fc:	4313      	orrs	r3, r2
 80128fe:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	6819      	ldr	r1, [r3, #0]
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	68fa      	ldr	r2, [r7, #12]
 801290c:	430a      	orrs	r2, r1
 801290e:	601a      	str	r2, [r3, #0]
}
 8012910:	46c0      	nop			@ (mov r8, r8)
 8012912:	46bd      	mov	sp, r7
 8012914:	b004      	add	sp, #16
 8012916:	bd80      	pop	{r7, pc}
 8012918:	08011189 	.word	0x08011189
 801291c:	080115b9 	.word	0x080115b9
 8012920:	08011381 	.word	0x08011381

08012924 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b084      	sub	sp, #16
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
 801292c:	000a      	movs	r2, r1
 801292e:	1cbb      	adds	r3, r7, #2
 8012930:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8012932:	2300      	movs	r3, #0
 8012934:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8012936:	1cbb      	adds	r3, r7, #2
 8012938:	881b      	ldrh	r3, [r3, #0]
 801293a:	2201      	movs	r2, #1
 801293c:	4013      	ands	r3, r2
 801293e:	d010      	beq.n	8012962 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	2242      	movs	r2, #66	@ 0x42
 8012944:	4313      	orrs	r3, r2
 8012946:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2241      	movs	r2, #65	@ 0x41
 801294c:	5c9b      	ldrb	r3, [r3, r2]
 801294e:	b2db      	uxtb	r3, r3
 8012950:	001a      	movs	r2, r3
 8012952:	2328      	movs	r3, #40	@ 0x28
 8012954:	4013      	ands	r3, r2
 8012956:	2b28      	cmp	r3, #40	@ 0x28
 8012958:	d003      	beq.n	8012962 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	22b0      	movs	r2, #176	@ 0xb0
 801295e:	4313      	orrs	r3, r2
 8012960:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8012962:	1cbb      	adds	r3, r7, #2
 8012964:	881b      	ldrh	r3, [r3, #0]
 8012966:	2202      	movs	r2, #2
 8012968:	4013      	ands	r3, r2
 801296a:	d010      	beq.n	801298e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	2244      	movs	r2, #68	@ 0x44
 8012970:	4313      	orrs	r3, r2
 8012972:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	2241      	movs	r2, #65	@ 0x41
 8012978:	5c9b      	ldrb	r3, [r3, r2]
 801297a:	b2db      	uxtb	r3, r3
 801297c:	001a      	movs	r2, r3
 801297e:	2328      	movs	r3, #40	@ 0x28
 8012980:	4013      	ands	r3, r2
 8012982:	2b28      	cmp	r3, #40	@ 0x28
 8012984:	d003      	beq.n	801298e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	22b0      	movs	r2, #176	@ 0xb0
 801298a:	4313      	orrs	r3, r2
 801298c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 801298e:	1cbb      	adds	r3, r7, #2
 8012990:	2200      	movs	r2, #0
 8012992:	5e9b      	ldrsh	r3, [r3, r2]
 8012994:	2b00      	cmp	r3, #0
 8012996:	da03      	bge.n	80129a0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	22b8      	movs	r2, #184	@ 0xb8
 801299c:	4313      	orrs	r3, r2
 801299e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80129a0:	1cbb      	adds	r3, r7, #2
 80129a2:	881b      	ldrh	r3, [r3, #0]
 80129a4:	2b10      	cmp	r3, #16
 80129a6:	d103      	bne.n	80129b0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	2290      	movs	r2, #144	@ 0x90
 80129ac:	4313      	orrs	r3, r2
 80129ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80129b0:	1cbb      	adds	r3, r7, #2
 80129b2:	881b      	ldrh	r3, [r3, #0]
 80129b4:	2b20      	cmp	r3, #32
 80129b6:	d103      	bne.n	80129c0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	2220      	movs	r2, #32
 80129bc:	4313      	orrs	r3, r2
 80129be:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80129c0:	1cbb      	adds	r3, r7, #2
 80129c2:	881b      	ldrh	r3, [r3, #0]
 80129c4:	2b40      	cmp	r3, #64	@ 0x40
 80129c6:	d103      	bne.n	80129d0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	2240      	movs	r2, #64	@ 0x40
 80129cc:	4313      	orrs	r3, r2
 80129ce:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	681a      	ldr	r2, [r3, #0]
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	43d9      	mvns	r1, r3
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	400a      	ands	r2, r1
 80129e0:	601a      	str	r2, [r3, #0]
}
 80129e2:	46c0      	nop			@ (mov r8, r8)
 80129e4:	46bd      	mov	sp, r7
 80129e6:	b004      	add	sp, #16
 80129e8:	bd80      	pop	{r7, pc}
	...

080129ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b082      	sub	sp, #8
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
 80129f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	2241      	movs	r2, #65	@ 0x41
 80129fa:	5c9b      	ldrb	r3, [r3, r2]
 80129fc:	b2db      	uxtb	r3, r3
 80129fe:	2b20      	cmp	r3, #32
 8012a00:	d138      	bne.n	8012a74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	2240      	movs	r2, #64	@ 0x40
 8012a06:	5c9b      	ldrb	r3, [r3, r2]
 8012a08:	2b01      	cmp	r3, #1
 8012a0a:	d101      	bne.n	8012a10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8012a0c:	2302      	movs	r3, #2
 8012a0e:	e032      	b.n	8012a76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	2240      	movs	r2, #64	@ 0x40
 8012a14:	2101      	movs	r1, #1
 8012a16:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	2241      	movs	r2, #65	@ 0x41
 8012a1c:	2124      	movs	r1, #36	@ 0x24
 8012a1e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	681a      	ldr	r2, [r3, #0]
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	2101      	movs	r1, #1
 8012a2c:	438a      	bics	r2, r1
 8012a2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	681a      	ldr	r2, [r3, #0]
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	4911      	ldr	r1, [pc, #68]	@ (8012a80 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8012a3c:	400a      	ands	r2, r1
 8012a3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	6819      	ldr	r1, [r3, #0]
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	683a      	ldr	r2, [r7, #0]
 8012a4c:	430a      	orrs	r2, r1
 8012a4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	681a      	ldr	r2, [r3, #0]
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	2101      	movs	r1, #1
 8012a5c:	430a      	orrs	r2, r1
 8012a5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2241      	movs	r2, #65	@ 0x41
 8012a64:	2120      	movs	r1, #32
 8012a66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2240      	movs	r2, #64	@ 0x40
 8012a6c:	2100      	movs	r1, #0
 8012a6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012a70:	2300      	movs	r3, #0
 8012a72:	e000      	b.n	8012a76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012a74:	2302      	movs	r3, #2
  }
}
 8012a76:	0018      	movs	r0, r3
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	b002      	add	sp, #8
 8012a7c:	bd80      	pop	{r7, pc}
 8012a7e:	46c0      	nop			@ (mov r8, r8)
 8012a80:	ffffefff 	.word	0xffffefff

08012a84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b084      	sub	sp, #16
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
 8012a8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	2241      	movs	r2, #65	@ 0x41
 8012a92:	5c9b      	ldrb	r3, [r3, r2]
 8012a94:	b2db      	uxtb	r3, r3
 8012a96:	2b20      	cmp	r3, #32
 8012a98:	d139      	bne.n	8012b0e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	2240      	movs	r2, #64	@ 0x40
 8012a9e:	5c9b      	ldrb	r3, [r3, r2]
 8012aa0:	2b01      	cmp	r3, #1
 8012aa2:	d101      	bne.n	8012aa8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8012aa4:	2302      	movs	r3, #2
 8012aa6:	e033      	b.n	8012b10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2240      	movs	r2, #64	@ 0x40
 8012aac:	2101      	movs	r1, #1
 8012aae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2241      	movs	r2, #65	@ 0x41
 8012ab4:	2124      	movs	r1, #36	@ 0x24
 8012ab6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	681a      	ldr	r2, [r3, #0]
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	2101      	movs	r1, #1
 8012ac4:	438a      	bics	r2, r1
 8012ac6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	4a11      	ldr	r2, [pc, #68]	@ (8012b18 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8012ad4:	4013      	ands	r3, r2
 8012ad6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	021b      	lsls	r3, r3, #8
 8012adc:	68fa      	ldr	r2, [r7, #12]
 8012ade:	4313      	orrs	r3, r2
 8012ae0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	68fa      	ldr	r2, [r7, #12]
 8012ae8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	681a      	ldr	r2, [r3, #0]
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	2101      	movs	r1, #1
 8012af6:	430a      	orrs	r2, r1
 8012af8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2241      	movs	r2, #65	@ 0x41
 8012afe:	2120      	movs	r1, #32
 8012b00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	2240      	movs	r2, #64	@ 0x40
 8012b06:	2100      	movs	r1, #0
 8012b08:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	e000      	b.n	8012b10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8012b0e:	2302      	movs	r3, #2
  }
}
 8012b10:	0018      	movs	r0, r3
 8012b12:	46bd      	mov	sp, r7
 8012b14:	b004      	add	sp, #16
 8012b16:	bd80      	pop	{r7, pc}
 8012b18:	fffff0ff 	.word	0xfffff0ff

08012b1c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b088      	sub	sp, #32
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d101      	bne.n	8012b2e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	e0e1      	b.n	8012cf2 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2235      	movs	r2, #53	@ 0x35
 8012b32:	5c9b      	ldrb	r3, [r3, r2]
 8012b34:	b2db      	uxtb	r3, r3
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d107      	bne.n	8012b4a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	2234      	movs	r2, #52	@ 0x34
 8012b3e:	2100      	movs	r1, #0
 8012b40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	0018      	movs	r0, r3
 8012b46:	f7f4 ff75 	bl	8007a34 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2235      	movs	r2, #53	@ 0x35
 8012b4e:	2102      	movs	r1, #2
 8012b50:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	69da      	ldr	r2, [r3, #28]
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	4967      	ldr	r1, [pc, #412]	@ (8012cfc <HAL_I2S_Init+0x1e0>)
 8012b5e:	400a      	ands	r2, r1
 8012b60:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	2202      	movs	r2, #2
 8012b68:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	695b      	ldr	r3, [r3, #20]
 8012b6e:	2b02      	cmp	r3, #2
 8012b70:	d073      	beq.n	8012c5a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	68db      	ldr	r3, [r3, #12]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d102      	bne.n	8012b80 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8012b7a:	2310      	movs	r3, #16
 8012b7c:	617b      	str	r3, [r7, #20]
 8012b7e:	e001      	b.n	8012b84 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8012b80:	2320      	movs	r3, #32
 8012b82:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	689b      	ldr	r3, [r3, #8]
 8012b88:	2b20      	cmp	r3, #32
 8012b8a:	d802      	bhi.n	8012b92 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8012b8c:	697b      	ldr	r3, [r7, #20]
 8012b8e:	005b      	lsls	r3, r3, #1
 8012b90:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8012b92:	f002 fed3 	bl	801593c <HAL_RCC_GetSysClockFreq>
 8012b96:	0003      	movs	r3, r0
 8012b98:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	691a      	ldr	r2, [r3, #16]
 8012b9e:	2380      	movs	r3, #128	@ 0x80
 8012ba0:	009b      	lsls	r3, r3, #2
 8012ba2:	429a      	cmp	r2, r3
 8012ba4:	d131      	bne.n	8012c0a <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	68db      	ldr	r3, [r3, #12]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d016      	beq.n	8012bdc <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012bae:	697b      	ldr	r3, [r7, #20]
 8012bb0:	009b      	lsls	r3, r3, #2
 8012bb2:	0019      	movs	r1, r3
 8012bb4:	68f8      	ldr	r0, [r7, #12]
 8012bb6:	f7ed faf5 	bl	80001a4 <__udivsi3>
 8012bba:	0003      	movs	r3, r0
 8012bbc:	001a      	movs	r2, r3
 8012bbe:	0013      	movs	r3, r2
 8012bc0:	009b      	lsls	r3, r3, #2
 8012bc2:	189b      	adds	r3, r3, r2
 8012bc4:	005b      	lsls	r3, r3, #1
 8012bc6:	001a      	movs	r2, r3
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	695b      	ldr	r3, [r3, #20]
 8012bcc:	0019      	movs	r1, r3
 8012bce:	0010      	movs	r0, r2
 8012bd0:	f7ed fae8 	bl	80001a4 <__udivsi3>
 8012bd4:	0003      	movs	r3, r0
 8012bd6:	3305      	adds	r3, #5
 8012bd8:	613b      	str	r3, [r7, #16]
 8012bda:	e02a      	b.n	8012c32 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012bdc:	697b      	ldr	r3, [r7, #20]
 8012bde:	00db      	lsls	r3, r3, #3
 8012be0:	0019      	movs	r1, r3
 8012be2:	68f8      	ldr	r0, [r7, #12]
 8012be4:	f7ed fade 	bl	80001a4 <__udivsi3>
 8012be8:	0003      	movs	r3, r0
 8012bea:	001a      	movs	r2, r3
 8012bec:	0013      	movs	r3, r2
 8012bee:	009b      	lsls	r3, r3, #2
 8012bf0:	189b      	adds	r3, r3, r2
 8012bf2:	005b      	lsls	r3, r3, #1
 8012bf4:	001a      	movs	r2, r3
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	695b      	ldr	r3, [r3, #20]
 8012bfa:	0019      	movs	r1, r3
 8012bfc:	0010      	movs	r0, r2
 8012bfe:	f7ed fad1 	bl	80001a4 <__udivsi3>
 8012c02:	0003      	movs	r3, r0
 8012c04:	3305      	adds	r3, #5
 8012c06:	613b      	str	r3, [r7, #16]
 8012c08:	e013      	b.n	8012c32 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8012c0a:	6979      	ldr	r1, [r7, #20]
 8012c0c:	68f8      	ldr	r0, [r7, #12]
 8012c0e:	f7ed fac9 	bl	80001a4 <__udivsi3>
 8012c12:	0003      	movs	r3, r0
 8012c14:	001a      	movs	r2, r3
 8012c16:	0013      	movs	r3, r2
 8012c18:	009b      	lsls	r3, r3, #2
 8012c1a:	189b      	adds	r3, r3, r2
 8012c1c:	005b      	lsls	r3, r3, #1
 8012c1e:	001a      	movs	r2, r3
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	695b      	ldr	r3, [r3, #20]
 8012c24:	0019      	movs	r1, r3
 8012c26:	0010      	movs	r0, r2
 8012c28:	f7ed fabc 	bl	80001a4 <__udivsi3>
 8012c2c:	0003      	movs	r3, r0
 8012c2e:	3305      	adds	r3, #5
 8012c30:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8012c32:	693b      	ldr	r3, [r7, #16]
 8012c34:	210a      	movs	r1, #10
 8012c36:	0018      	movs	r0, r3
 8012c38:	f7ed fab4 	bl	80001a4 <__udivsi3>
 8012c3c:	0003      	movs	r3, r0
 8012c3e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8012c40:	693b      	ldr	r3, [r7, #16]
 8012c42:	2201      	movs	r2, #1
 8012c44:	4013      	ands	r3, r2
 8012c46:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8012c48:	693a      	ldr	r2, [r7, #16]
 8012c4a:	69bb      	ldr	r3, [r7, #24]
 8012c4c:	1ad3      	subs	r3, r2, r3
 8012c4e:	085b      	lsrs	r3, r3, #1
 8012c50:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8012c52:	69bb      	ldr	r3, [r7, #24]
 8012c54:	021b      	lsls	r3, r3, #8
 8012c56:	61bb      	str	r3, [r7, #24]
 8012c58:	e003      	b.n	8012c62 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8012c5a:	2302      	movs	r3, #2
 8012c5c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8012c62:	69fb      	ldr	r3, [r7, #28]
 8012c64:	2b01      	cmp	r3, #1
 8012c66:	d902      	bls.n	8012c6e <HAL_I2S_Init+0x152>
 8012c68:	69fb      	ldr	r3, [r7, #28]
 8012c6a:	2bff      	cmp	r3, #255	@ 0xff
 8012c6c:	d907      	bls.n	8012c7e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c72:	2210      	movs	r2, #16
 8012c74:	431a      	orrs	r2, r3
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8012c7a:	2301      	movs	r3, #1
 8012c7c:	e039      	b.n	8012cf2 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	691a      	ldr	r2, [r3, #16]
 8012c82:	69bb      	ldr	r3, [r7, #24]
 8012c84:	431a      	orrs	r2, r3
 8012c86:	0011      	movs	r1, r2
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	69fa      	ldr	r2, [r7, #28]
 8012c8e:	430a      	orrs	r2, r1
 8012c90:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	69db      	ldr	r3, [r3, #28]
 8012c98:	4a18      	ldr	r2, [pc, #96]	@ (8012cfc <HAL_I2S_Init+0x1e0>)
 8012c9a:	401a      	ands	r2, r3
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6859      	ldr	r1, [r3, #4]
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	689b      	ldr	r3, [r3, #8]
 8012ca4:	4319      	orrs	r1, r3
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	68db      	ldr	r3, [r3, #12]
 8012caa:	4319      	orrs	r1, r3
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	699b      	ldr	r3, [r3, #24]
 8012cb0:	430b      	orrs	r3, r1
 8012cb2:	431a      	orrs	r2, r3
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	2180      	movs	r1, #128	@ 0x80
 8012cba:	0109      	lsls	r1, r1, #4
 8012cbc:	430a      	orrs	r2, r1
 8012cbe:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	689b      	ldr	r3, [r3, #8]
 8012cc4:	2b30      	cmp	r3, #48	@ 0x30
 8012cc6:	d003      	beq.n	8012cd0 <HAL_I2S_Init+0x1b4>
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	689b      	ldr	r3, [r3, #8]
 8012ccc:	2bb0      	cmp	r3, #176	@ 0xb0
 8012cce:	d108      	bne.n	8012ce2 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	69da      	ldr	r2, [r3, #28]
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	2180      	movs	r1, #128	@ 0x80
 8012cdc:	0149      	lsls	r1, r1, #5
 8012cde:	430a      	orrs	r2, r1
 8012ce0:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2235      	movs	r2, #53	@ 0x35
 8012cec:	2101      	movs	r1, #1
 8012cee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012cf0:	2300      	movs	r3, #0
}
 8012cf2:	0018      	movs	r0, r3
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	b008      	add	sp, #32
 8012cf8:	bd80      	pop	{r7, pc}
 8012cfa:	46c0      	nop			@ (mov r8, r8)
 8012cfc:	fffff040 	.word	0xfffff040

08012d00 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b086      	sub	sp, #24
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	60f8      	str	r0, [r7, #12]
 8012d08:	60b9      	str	r1, [r7, #8]
 8012d0a:	1dbb      	adds	r3, r7, #6
 8012d0c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d003      	beq.n	8012d1c <HAL_I2S_Receive_DMA+0x1c>
 8012d14:	1dbb      	adds	r3, r7, #6
 8012d16:	881b      	ldrh	r3, [r3, #0]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d101      	bne.n	8012d20 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8012d1c:	2301      	movs	r3, #1
 8012d1e:	e0a6      	b.n	8012e6e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	2234      	movs	r2, #52	@ 0x34
 8012d24:	5c9b      	ldrb	r3, [r3, r2]
 8012d26:	b2db      	uxtb	r3, r3
 8012d28:	2b01      	cmp	r3, #1
 8012d2a:	d101      	bne.n	8012d30 <HAL_I2S_Receive_DMA+0x30>
 8012d2c:	2302      	movs	r3, #2
 8012d2e:	e09e      	b.n	8012e6e <HAL_I2S_Receive_DMA+0x16e>
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	2234      	movs	r2, #52	@ 0x34
 8012d34:	2101      	movs	r1, #1
 8012d36:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	2235      	movs	r2, #53	@ 0x35
 8012d3c:	5c9b      	ldrb	r3, [r3, r2]
 8012d3e:	b2db      	uxtb	r3, r3
 8012d40:	2b01      	cmp	r3, #1
 8012d42:	d005      	beq.n	8012d50 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	2234      	movs	r2, #52	@ 0x34
 8012d48:	2100      	movs	r1, #0
 8012d4a:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8012d4c:	2302      	movs	r3, #2
 8012d4e:	e08e      	b.n	8012e6e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	2235      	movs	r2, #53	@ 0x35
 8012d54:	2104      	movs	r1, #4
 8012d56:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	68ba      	ldr	r2, [r7, #8]
 8012d62:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	69db      	ldr	r3, [r3, #28]
 8012d6a:	2207      	movs	r2, #7
 8012d6c:	4013      	ands	r3, r2
 8012d6e:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8012d70:	697b      	ldr	r3, [r7, #20]
 8012d72:	2b03      	cmp	r3, #3
 8012d74:	d002      	beq.n	8012d7c <HAL_I2S_Receive_DMA+0x7c>
 8012d76:	697b      	ldr	r3, [r7, #20]
 8012d78:	2b05      	cmp	r3, #5
 8012d7a:	d10c      	bne.n	8012d96 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8012d7c:	1dbb      	adds	r3, r7, #6
 8012d7e:	881b      	ldrh	r3, [r3, #0]
 8012d80:	18db      	adds	r3, r3, r3
 8012d82:	b29a      	uxth	r2, r3
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8012d88:	1dbb      	adds	r3, r7, #6
 8012d8a:	881b      	ldrh	r3, [r3, #0]
 8012d8c:	18db      	adds	r3, r3, r3
 8012d8e:	b29a      	uxth	r2, r3
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012d94:	e007      	b.n	8012da6 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	1dba      	adds	r2, r7, #6
 8012d9a:	8812      	ldrh	r2, [r2, #0]
 8012d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	1dba      	adds	r2, r7, #6
 8012da2:	8812      	ldrh	r2, [r2, #0]
 8012da4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012daa:	4a33      	ldr	r2, [pc, #204]	@ (8012e78 <HAL_I2S_Receive_DMA+0x178>)
 8012dac:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012db2:	4a32      	ldr	r2, [pc, #200]	@ (8012e7c <HAL_I2S_Receive_DMA+0x17c>)
 8012db4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012dba:	4a31      	ldr	r2, [pc, #196]	@ (8012e80 <HAL_I2S_Receive_DMA+0x180>)
 8012dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	69da      	ldr	r2, [r3, #28]
 8012dc4:	23c0      	movs	r3, #192	@ 0xc0
 8012dc6:	009b      	lsls	r3, r3, #2
 8012dc8:	401a      	ands	r2, r3
 8012dca:	23c0      	movs	r3, #192	@ 0xc0
 8012dcc:	009b      	lsls	r3, r3, #2
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	d10a      	bne.n	8012de8 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	613b      	str	r3, [r7, #16]
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	68db      	ldr	r3, [r3, #12]
 8012ddc:	613b      	str	r3, [r7, #16]
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	689b      	ldr	r3, [r3, #8]
 8012de4:	613b      	str	r3, [r7, #16]
 8012de6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	330c      	adds	r3, #12
 8012df2:	0019      	movs	r1, r3
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012df8:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012dfe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8012e00:	f7fc fca2 	bl	800f748 <HAL_DMA_Start_IT>
 8012e04:	1e03      	subs	r3, r0, #0
 8012e06:	d00f      	beq.n	8012e28 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012e0c:	2208      	movs	r2, #8
 8012e0e:	431a      	orrs	r2, r3
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	2235      	movs	r2, #53	@ 0x35
 8012e18:	2101      	movs	r1, #1
 8012e1a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	2234      	movs	r2, #52	@ 0x34
 8012e20:	2100      	movs	r1, #0
 8012e22:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8012e24:	2301      	movs	r3, #1
 8012e26:	e022      	b.n	8012e6e <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	69da      	ldr	r2, [r3, #28]
 8012e2e:	2380      	movs	r3, #128	@ 0x80
 8012e30:	00db      	lsls	r3, r3, #3
 8012e32:	4013      	ands	r3, r2
 8012e34:	d108      	bne.n	8012e48 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	69da      	ldr	r2, [r3, #28]
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	2180      	movs	r1, #128	@ 0x80
 8012e42:	00c9      	lsls	r1, r1, #3
 8012e44:	430a      	orrs	r2, r1
 8012e46:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	685b      	ldr	r3, [r3, #4]
 8012e4e:	2201      	movs	r2, #1
 8012e50:	4013      	ands	r3, r2
 8012e52:	d107      	bne.n	8012e64 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	685a      	ldr	r2, [r3, #4]
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	2101      	movs	r1, #1
 8012e60:	430a      	orrs	r2, r1
 8012e62:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	2234      	movs	r2, #52	@ 0x34
 8012e68:	2100      	movs	r1, #0
 8012e6a:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8012e6c:	2300      	movs	r3, #0
}
 8012e6e:	0018      	movs	r0, r3
 8012e70:	46bd      	mov	sp, r7
 8012e72:	b006      	add	sp, #24
 8012e74:	bd80      	pop	{r7, pc}
 8012e76:	46c0      	nop			@ (mov r8, r8)
 8012e78:	08013061 	.word	0x08013061
 8012e7c:	0801301d 	.word	0x0801301d
 8012e80:	0801307f 	.word	0x0801307f

08012e84 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b086      	sub	sp, #24
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012e8c:	2317      	movs	r3, #23
 8012e8e:	18fb      	adds	r3, r7, r3
 8012e90:	2200      	movs	r2, #0
 8012e92:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	685a      	ldr	r2, [r3, #4]
 8012e98:	2380      	movs	r3, #128	@ 0x80
 8012e9a:	009b      	lsls	r3, r3, #2
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d003      	beq.n	8012ea8 <HAL_I2S_DMAStop+0x24>
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	685b      	ldr	r3, [r3, #4]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d158      	bne.n	8012f5a <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d010      	beq.n	8012ed2 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012eb4:	0018      	movs	r0, r3
 8012eb6:	f7fc fcad 	bl	800f814 <HAL_DMA_Abort>
 8012eba:	1e03      	subs	r3, r0, #0
 8012ebc:	d009      	beq.n	8012ed2 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ec2:	2208      	movs	r2, #8
 8012ec4:	431a      	orrs	r2, r3
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8012eca:	2317      	movs	r3, #23
 8012ecc:	18fb      	adds	r3, r7, r3
 8012ece:	2201      	movs	r2, #1
 8012ed0:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8012ed2:	6878      	ldr	r0, [r7, #4]
 8012ed4:	2364      	movs	r3, #100	@ 0x64
 8012ed6:	2201      	movs	r2, #1
 8012ed8:	2102      	movs	r1, #2
 8012eda:	f000 f8f7 	bl	80130cc <I2S_WaitFlagStateUntilTimeout>
 8012ede:	1e03      	subs	r3, r0, #0
 8012ee0:	d00d      	beq.n	8012efe <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ee6:	2201      	movs	r2, #1
 8012ee8:	431a      	orrs	r2, r3
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2235      	movs	r2, #53	@ 0x35
 8012ef2:	2101      	movs	r1, #1
 8012ef4:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8012ef6:	2317      	movs	r3, #23
 8012ef8:	18fb      	adds	r3, r7, r3
 8012efa:	2201      	movs	r2, #1
 8012efc:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8012efe:	6878      	ldr	r0, [r7, #4]
 8012f00:	2364      	movs	r3, #100	@ 0x64
 8012f02:	2200      	movs	r2, #0
 8012f04:	2180      	movs	r1, #128	@ 0x80
 8012f06:	f000 f8e1 	bl	80130cc <I2S_WaitFlagStateUntilTimeout>
 8012f0a:	1e03      	subs	r3, r0, #0
 8012f0c:	d00d      	beq.n	8012f2a <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f12:	2201      	movs	r2, #1
 8012f14:	431a      	orrs	r2, r3
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	2235      	movs	r2, #53	@ 0x35
 8012f1e:	2101      	movs	r1, #1
 8012f20:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8012f22:	2317      	movs	r3, #23
 8012f24:	18fb      	adds	r3, r7, r3
 8012f26:	2201      	movs	r2, #1
 8012f28:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	69da      	ldr	r2, [r3, #28]
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	4938      	ldr	r1, [pc, #224]	@ (8013018 <HAL_I2S_DMAStop+0x194>)
 8012f36:	400a      	ands	r2, r1
 8012f38:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	613b      	str	r3, [r7, #16]
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	689b      	ldr	r3, [r3, #8]
 8012f44:	613b      	str	r3, [r7, #16]
 8012f46:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	685a      	ldr	r2, [r3, #4]
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	2102      	movs	r1, #2
 8012f54:	438a      	bics	r2, r1
 8012f56:	605a      	str	r2, [r3, #4]
 8012f58:	e053      	b.n	8013002 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	685a      	ldr	r2, [r3, #4]
 8012f5e:	23c0      	movs	r3, #192	@ 0xc0
 8012f60:	009b      	lsls	r3, r3, #2
 8012f62:	429a      	cmp	r2, r3
 8012f64:	d005      	beq.n	8012f72 <HAL_I2S_DMAStop+0xee>
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	685a      	ldr	r2, [r3, #4]
 8012f6a:	2380      	movs	r3, #128	@ 0x80
 8012f6c:	005b      	lsls	r3, r3, #1
 8012f6e:	429a      	cmp	r2, r3
 8012f70:	d147      	bne.n	8013002 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d010      	beq.n	8012f9c <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f7e:	0018      	movs	r0, r3
 8012f80:	f7fc fc48 	bl	800f814 <HAL_DMA_Abort>
 8012f84:	1e03      	subs	r3, r0, #0
 8012f86:	d009      	beq.n	8012f9c <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012f8c:	2208      	movs	r2, #8
 8012f8e:	431a      	orrs	r2, r3
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8012f94:	2317      	movs	r3, #23
 8012f96:	18fb      	adds	r3, r7, r3
 8012f98:	2201      	movs	r2, #1
 8012f9a:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	69da      	ldr	r2, [r3, #28]
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	491c      	ldr	r1, [pc, #112]	@ (8013018 <HAL_I2S_DMAStop+0x194>)
 8012fa8:	400a      	ands	r2, r1
 8012faa:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8012fac:	2300      	movs	r3, #0
 8012fae:	60fb      	str	r3, [r7, #12]
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	68db      	ldr	r3, [r3, #12]
 8012fb6:	60fb      	str	r3, [r7, #12]
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	689b      	ldr	r3, [r3, #8]
 8012fbe:	60fb      	str	r3, [r7, #12]
 8012fc0:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	685a      	ldr	r2, [r3, #4]
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	2101      	movs	r1, #1
 8012fce:	438a      	bics	r2, r1
 8012fd0:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	685a      	ldr	r2, [r3, #4]
 8012fd6:	2380      	movs	r3, #128	@ 0x80
 8012fd8:	005b      	lsls	r3, r3, #1
 8012fda:	429a      	cmp	r2, r3
 8012fdc:	d10e      	bne.n	8012ffc <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012fe2:	2240      	movs	r2, #64	@ 0x40
 8012fe4:	431a      	orrs	r2, r3
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	2235      	movs	r2, #53	@ 0x35
 8012fee:	2101      	movs	r1, #1
 8012ff0:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8012ff2:	2317      	movs	r3, #23
 8012ff4:	18fb      	adds	r3, r7, r3
 8012ff6:	2201      	movs	r2, #1
 8012ff8:	701a      	strb	r2, [r3, #0]
 8012ffa:	e002      	b.n	8013002 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	2235      	movs	r2, #53	@ 0x35
 8013006:	2101      	movs	r1, #1
 8013008:	5499      	strb	r1, [r3, r2]

  return errorcode;
 801300a:	2317      	movs	r3, #23
 801300c:	18fb      	adds	r3, r7, r3
 801300e:	781b      	ldrb	r3, [r3, #0]
}
 8013010:	0018      	movs	r0, r3
 8013012:	46bd      	mov	sp, r7
 8013014:	b006      	add	sp, #24
 8013016:	bd80      	pop	{r7, pc}
 8013018:	fffffbff 	.word	0xfffffbff

0801301c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b084      	sub	sp, #16
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013028:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	69db      	ldr	r3, [r3, #28]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d10e      	bne.n	8013050 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	685a      	ldr	r2, [r3, #4]
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	2101      	movs	r1, #1
 801303e:	438a      	bics	r2, r1
 8013040:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	2200      	movs	r2, #0
 8013046:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	2235      	movs	r2, #53	@ 0x35
 801304c:	2101      	movs	r1, #1
 801304e:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	0018      	movs	r0, r3
 8013054:	f7f9 fa74 	bl	800c540 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013058:	46c0      	nop			@ (mov r8, r8)
 801305a:	46bd      	mov	sp, r7
 801305c:	b004      	add	sp, #16
 801305e:	bd80      	pop	{r7, pc}

08013060 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b084      	sub	sp, #16
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801306c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	0018      	movs	r0, r3
 8013072:	f7f9 fa53 	bl	800c51c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8013076:	46c0      	nop			@ (mov r8, r8)
 8013078:	46bd      	mov	sp, r7
 801307a:	b004      	add	sp, #16
 801307c:	bd80      	pop	{r7, pc}

0801307e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 801307e:	b580      	push	{r7, lr}
 8013080:	b084      	sub	sp, #16
 8013082:	af00      	add	r7, sp, #0
 8013084:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801308a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	685a      	ldr	r2, [r3, #4]
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	2103      	movs	r1, #3
 8013098:	438a      	bics	r2, r1
 801309a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	2200      	movs	r2, #0
 80130a0:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	2200      	movs	r2, #0
 80130a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	2235      	movs	r2, #53	@ 0x35
 80130ac:	2101      	movs	r1, #1
 80130ae:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130b4:	2208      	movs	r2, #8
 80130b6:	431a      	orrs	r2, r3
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	0018      	movs	r0, r3
 80130c0:	f7f9 fa8c 	bl	800c5dc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80130c4:	46c0      	nop			@ (mov r8, r8)
 80130c6:	46bd      	mov	sp, r7
 80130c8:	b004      	add	sp, #16
 80130ca:	bd80      	pop	{r7, pc}

080130cc <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b086      	sub	sp, #24
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	60f8      	str	r0, [r7, #12]
 80130d4:	60b9      	str	r1, [r7, #8]
 80130d6:	603b      	str	r3, [r7, #0]
 80130d8:	1dfb      	adds	r3, r7, #7
 80130da:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80130dc:	f7fb fde2 	bl	800eca4 <HAL_GetTick>
 80130e0:	0003      	movs	r3, r0
 80130e2:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80130e4:	e017      	b.n	8013116 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80130e6:	683b      	ldr	r3, [r7, #0]
 80130e8:	3301      	adds	r3, #1
 80130ea:	d014      	beq.n	8013116 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80130ec:	f7fb fdda 	bl	800eca4 <HAL_GetTick>
 80130f0:	0002      	movs	r2, r0
 80130f2:	697b      	ldr	r3, [r7, #20]
 80130f4:	1ad3      	subs	r3, r2, r3
 80130f6:	683a      	ldr	r2, [r7, #0]
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d902      	bls.n	8013102 <I2S_WaitFlagStateUntilTimeout+0x36>
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d109      	bne.n	8013116 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	2235      	movs	r2, #53	@ 0x35
 8013106:	2101      	movs	r1, #1
 8013108:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	2234      	movs	r2, #52	@ 0x34
 801310e:	2100      	movs	r1, #0
 8013110:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8013112:	2303      	movs	r3, #3
 8013114:	e00f      	b.n	8013136 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	689b      	ldr	r3, [r3, #8]
 801311c:	68ba      	ldr	r2, [r7, #8]
 801311e:	4013      	ands	r3, r2
 8013120:	68ba      	ldr	r2, [r7, #8]
 8013122:	1ad3      	subs	r3, r2, r3
 8013124:	425a      	negs	r2, r3
 8013126:	4153      	adcs	r3, r2
 8013128:	b2db      	uxtb	r3, r3
 801312a:	001a      	movs	r2, r3
 801312c:	1dfb      	adds	r3, r7, #7
 801312e:	781b      	ldrb	r3, [r3, #0]
 8013130:	429a      	cmp	r2, r3
 8013132:	d1d8      	bne.n	80130e6 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8013134:	2300      	movs	r3, #0
}
 8013136:	0018      	movs	r0, r3
 8013138:	46bd      	mov	sp, r7
 801313a:	b006      	add	sp, #24
 801313c:	bd80      	pop	{r7, pc}
	...

08013140 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8013140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013142:	b08b      	sub	sp, #44	@ 0x2c
 8013144:	af06      	add	r7, sp, #24
 8013146:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d101      	bne.n	8013152 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 801314e:	2301      	movs	r3, #1
 8013150:	e0f0      	b.n	8013334 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	4a79      	ldr	r2, [pc, #484]	@ (801333c <HAL_PCD_Init+0x1fc>)
 8013156:	5c9b      	ldrb	r3, [r3, r2]
 8013158:	b2db      	uxtb	r3, r3
 801315a:	2b00      	cmp	r3, #0
 801315c:	d108      	bne.n	8013170 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801315e:	687a      	ldr	r2, [r7, #4]
 8013160:	23aa      	movs	r3, #170	@ 0xaa
 8013162:	009b      	lsls	r3, r3, #2
 8013164:	2100      	movs	r1, #0
 8013166:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	0018      	movs	r0, r3
 801316c:	f009 ff4a 	bl	801d004 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	4a72      	ldr	r2, [pc, #456]	@ (801333c <HAL_PCD_Init+0x1fc>)
 8013174:	2103      	movs	r1, #3
 8013176:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	0018      	movs	r0, r3
 801317e:	f005 fefd 	bl	8018f7c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013182:	230f      	movs	r3, #15
 8013184:	18fb      	adds	r3, r7, r3
 8013186:	2200      	movs	r2, #0
 8013188:	701a      	strb	r2, [r3, #0]
 801318a:	e049      	b.n	8013220 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 801318c:	200f      	movs	r0, #15
 801318e:	183b      	adds	r3, r7, r0
 8013190:	781b      	ldrb	r3, [r3, #0]
 8013192:	6879      	ldr	r1, [r7, #4]
 8013194:	1c5a      	adds	r2, r3, #1
 8013196:	0013      	movs	r3, r2
 8013198:	009b      	lsls	r3, r3, #2
 801319a:	189b      	adds	r3, r3, r2
 801319c:	00db      	lsls	r3, r3, #3
 801319e:	18cb      	adds	r3, r1, r3
 80131a0:	3301      	adds	r3, #1
 80131a2:	2201      	movs	r2, #1
 80131a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80131a6:	183b      	adds	r3, r7, r0
 80131a8:	781b      	ldrb	r3, [r3, #0]
 80131aa:	6879      	ldr	r1, [r7, #4]
 80131ac:	1c5a      	adds	r2, r3, #1
 80131ae:	0013      	movs	r3, r2
 80131b0:	009b      	lsls	r3, r3, #2
 80131b2:	189b      	adds	r3, r3, r2
 80131b4:	00db      	lsls	r3, r3, #3
 80131b6:	183a      	adds	r2, r7, r0
 80131b8:	7812      	ldrb	r2, [r2, #0]
 80131ba:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80131bc:	183b      	adds	r3, r7, r0
 80131be:	781b      	ldrb	r3, [r3, #0]
 80131c0:	6879      	ldr	r1, [r7, #4]
 80131c2:	1c5a      	adds	r2, r3, #1
 80131c4:	0013      	movs	r3, r2
 80131c6:	009b      	lsls	r3, r3, #2
 80131c8:	189b      	adds	r3, r3, r2
 80131ca:	00db      	lsls	r3, r3, #3
 80131cc:	18cb      	adds	r3, r1, r3
 80131ce:	3303      	adds	r3, #3
 80131d0:	2200      	movs	r2, #0
 80131d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80131d4:	183b      	adds	r3, r7, r0
 80131d6:	781a      	ldrb	r2, [r3, #0]
 80131d8:	6879      	ldr	r1, [r7, #4]
 80131da:	0013      	movs	r3, r2
 80131dc:	009b      	lsls	r3, r3, #2
 80131de:	189b      	adds	r3, r3, r2
 80131e0:	00db      	lsls	r3, r3, #3
 80131e2:	18cb      	adds	r3, r1, r3
 80131e4:	3338      	adds	r3, #56	@ 0x38
 80131e6:	2200      	movs	r2, #0
 80131e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80131ea:	183b      	adds	r3, r7, r0
 80131ec:	781a      	ldrb	r2, [r3, #0]
 80131ee:	6879      	ldr	r1, [r7, #4]
 80131f0:	0013      	movs	r3, r2
 80131f2:	009b      	lsls	r3, r3, #2
 80131f4:	189b      	adds	r3, r3, r2
 80131f6:	00db      	lsls	r3, r3, #3
 80131f8:	18cb      	adds	r3, r1, r3
 80131fa:	333c      	adds	r3, #60	@ 0x3c
 80131fc:	2200      	movs	r2, #0
 80131fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8013200:	183b      	adds	r3, r7, r0
 8013202:	781a      	ldrb	r2, [r3, #0]
 8013204:	6879      	ldr	r1, [r7, #4]
 8013206:	0013      	movs	r3, r2
 8013208:	009b      	lsls	r3, r3, #2
 801320a:	189b      	adds	r3, r3, r2
 801320c:	00db      	lsls	r3, r3, #3
 801320e:	18cb      	adds	r3, r1, r3
 8013210:	3340      	adds	r3, #64	@ 0x40
 8013212:	2200      	movs	r2, #0
 8013214:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013216:	183b      	adds	r3, r7, r0
 8013218:	781a      	ldrb	r2, [r3, #0]
 801321a:	183b      	adds	r3, r7, r0
 801321c:	3201      	adds	r2, #1
 801321e:	701a      	strb	r2, [r3, #0]
 8013220:	210f      	movs	r1, #15
 8013222:	187b      	adds	r3, r7, r1
 8013224:	781a      	ldrb	r2, [r3, #0]
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	685b      	ldr	r3, [r3, #4]
 801322a:	429a      	cmp	r2, r3
 801322c:	d3ae      	bcc.n	801318c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801322e:	187b      	adds	r3, r7, r1
 8013230:	2200      	movs	r2, #0
 8013232:	701a      	strb	r2, [r3, #0]
 8013234:	e056      	b.n	80132e4 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8013236:	240f      	movs	r4, #15
 8013238:	193b      	adds	r3, r7, r4
 801323a:	781a      	ldrb	r2, [r3, #0]
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	236a      	movs	r3, #106	@ 0x6a
 8013240:	33ff      	adds	r3, #255	@ 0xff
 8013242:	0019      	movs	r1, r3
 8013244:	0013      	movs	r3, r2
 8013246:	009b      	lsls	r3, r3, #2
 8013248:	189b      	adds	r3, r3, r2
 801324a:	00db      	lsls	r3, r3, #3
 801324c:	18c3      	adds	r3, r0, r3
 801324e:	185b      	adds	r3, r3, r1
 8013250:	2200      	movs	r2, #0
 8013252:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8013254:	193b      	adds	r3, r7, r4
 8013256:	781a      	ldrb	r2, [r3, #0]
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	23b4      	movs	r3, #180	@ 0xb4
 801325c:	0059      	lsls	r1, r3, #1
 801325e:	0013      	movs	r3, r2
 8013260:	009b      	lsls	r3, r3, #2
 8013262:	189b      	adds	r3, r3, r2
 8013264:	00db      	lsls	r3, r3, #3
 8013266:	18c3      	adds	r3, r0, r3
 8013268:	185b      	adds	r3, r3, r1
 801326a:	193a      	adds	r2, r7, r4
 801326c:	7812      	ldrb	r2, [r2, #0]
 801326e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8013270:	193b      	adds	r3, r7, r4
 8013272:	781a      	ldrb	r2, [r3, #0]
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	236c      	movs	r3, #108	@ 0x6c
 8013278:	33ff      	adds	r3, #255	@ 0xff
 801327a:	0019      	movs	r1, r3
 801327c:	0013      	movs	r3, r2
 801327e:	009b      	lsls	r3, r3, #2
 8013280:	189b      	adds	r3, r3, r2
 8013282:	00db      	lsls	r3, r3, #3
 8013284:	18c3      	adds	r3, r0, r3
 8013286:	185b      	adds	r3, r3, r1
 8013288:	2200      	movs	r2, #0
 801328a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801328c:	193b      	adds	r3, r7, r4
 801328e:	781a      	ldrb	r2, [r3, #0]
 8013290:	6878      	ldr	r0, [r7, #4]
 8013292:	23bc      	movs	r3, #188	@ 0xbc
 8013294:	0059      	lsls	r1, r3, #1
 8013296:	0013      	movs	r3, r2
 8013298:	009b      	lsls	r3, r3, #2
 801329a:	189b      	adds	r3, r3, r2
 801329c:	00db      	lsls	r3, r3, #3
 801329e:	18c3      	adds	r3, r0, r3
 80132a0:	185b      	adds	r3, r3, r1
 80132a2:	2200      	movs	r2, #0
 80132a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80132a6:	193b      	adds	r3, r7, r4
 80132a8:	781a      	ldrb	r2, [r3, #0]
 80132aa:	6878      	ldr	r0, [r7, #4]
 80132ac:	23be      	movs	r3, #190	@ 0xbe
 80132ae:	0059      	lsls	r1, r3, #1
 80132b0:	0013      	movs	r3, r2
 80132b2:	009b      	lsls	r3, r3, #2
 80132b4:	189b      	adds	r3, r3, r2
 80132b6:	00db      	lsls	r3, r3, #3
 80132b8:	18c3      	adds	r3, r0, r3
 80132ba:	185b      	adds	r3, r3, r1
 80132bc:	2200      	movs	r2, #0
 80132be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80132c0:	193b      	adds	r3, r7, r4
 80132c2:	781a      	ldrb	r2, [r3, #0]
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	23c0      	movs	r3, #192	@ 0xc0
 80132c8:	0059      	lsls	r1, r3, #1
 80132ca:	0013      	movs	r3, r2
 80132cc:	009b      	lsls	r3, r3, #2
 80132ce:	189b      	adds	r3, r3, r2
 80132d0:	00db      	lsls	r3, r3, #3
 80132d2:	18c3      	adds	r3, r0, r3
 80132d4:	185b      	adds	r3, r3, r1
 80132d6:	2200      	movs	r2, #0
 80132d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80132da:	193b      	adds	r3, r7, r4
 80132dc:	781a      	ldrb	r2, [r3, #0]
 80132de:	193b      	adds	r3, r7, r4
 80132e0:	3201      	adds	r2, #1
 80132e2:	701a      	strb	r2, [r3, #0]
 80132e4:	230f      	movs	r3, #15
 80132e6:	18fb      	adds	r3, r7, r3
 80132e8:	781a      	ldrb	r2, [r3, #0]
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	685b      	ldr	r3, [r3, #4]
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d3a1      	bcc.n	8013236 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	6818      	ldr	r0, [r3, #0]
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	466a      	mov	r2, sp
 80132fa:	0011      	movs	r1, r2
 80132fc:	001a      	movs	r2, r3
 80132fe:	3210      	adds	r2, #16
 8013300:	ca70      	ldmia	r2!, {r4, r5, r6}
 8013302:	c170      	stmia	r1!, {r4, r5, r6}
 8013304:	ca30      	ldmia	r2!, {r4, r5}
 8013306:	c130      	stmia	r1!, {r4, r5}
 8013308:	6859      	ldr	r1, [r3, #4]
 801330a:	689a      	ldr	r2, [r3, #8]
 801330c:	68db      	ldr	r3, [r3, #12]
 801330e:	f005 fe4f 	bl	8018fb0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	2224      	movs	r2, #36	@ 0x24
 8013316:	2100      	movs	r1, #0
 8013318:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	4a07      	ldr	r2, [pc, #28]	@ (801333c <HAL_PCD_Init+0x1fc>)
 801331e:	2101      	movs	r1, #1
 8013320:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	69db      	ldr	r3, [r3, #28]
 8013326:	2b01      	cmp	r3, #1
 8013328:	d103      	bne.n	8013332 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	0018      	movs	r0, r3
 801332e:	f001 fd23 	bl	8014d78 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8013332:	2300      	movs	r3, #0
}
 8013334:	0018      	movs	r0, r3
 8013336:	46bd      	mov	sp, r7
 8013338:	b005      	add	sp, #20
 801333a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801333c:	000002a9 	.word	0x000002a9

08013340 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b082      	sub	sp, #8
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8013348:	687a      	ldr	r2, [r7, #4]
 801334a:	23aa      	movs	r3, #170	@ 0xaa
 801334c:	009b      	lsls	r3, r3, #2
 801334e:	5cd3      	ldrb	r3, [r2, r3]
 8013350:	2b01      	cmp	r3, #1
 8013352:	d101      	bne.n	8013358 <HAL_PCD_Start+0x18>
 8013354:	2302      	movs	r3, #2
 8013356:	e014      	b.n	8013382 <HAL_PCD_Start+0x42>
 8013358:	687a      	ldr	r2, [r7, #4]
 801335a:	23aa      	movs	r3, #170	@ 0xaa
 801335c:	009b      	lsls	r3, r3, #2
 801335e:	2101      	movs	r1, #1
 8013360:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	0018      	movs	r0, r3
 8013368:	f005 fdf2 	bl	8018f50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	0018      	movs	r0, r3
 8013372:	f007 fdf5 	bl	801af60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8013376:	687a      	ldr	r2, [r7, #4]
 8013378:	23aa      	movs	r3, #170	@ 0xaa
 801337a:	009b      	lsls	r3, r3, #2
 801337c:	2100      	movs	r1, #0
 801337e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013380:	2300      	movs	r3, #0
}
 8013382:	0018      	movs	r0, r3
 8013384:	46bd      	mov	sp, r7
 8013386:	b002      	add	sp, #8
 8013388:	bd80      	pop	{r7, pc}
	...

0801338c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b084      	sub	sp, #16
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	0018      	movs	r0, r3
 801339a:	f007 fdf7 	bl	801af8c <USB_ReadInterrupts>
 801339e:	0003      	movs	r3, r0
 80133a0:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80133a2:	68fa      	ldr	r2, [r7, #12]
 80133a4:	2380      	movs	r3, #128	@ 0x80
 80133a6:	021b      	lsls	r3, r3, #8
 80133a8:	4013      	ands	r3, r2
 80133aa:	d004      	beq.n	80133b6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	0018      	movs	r0, r3
 80133b0:	f000 fb62 	bl	8013a78 <PCD_EP_ISR_Handler>

    return;
 80133b4:	e11d      	b.n	80135f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80133b6:	68fa      	ldr	r2, [r7, #12]
 80133b8:	2380      	movs	r3, #128	@ 0x80
 80133ba:	00db      	lsls	r3, r3, #3
 80133bc:	4013      	ands	r3, r2
 80133be:	d015      	beq.n	80133ec <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	2244      	movs	r2, #68	@ 0x44
 80133c6:	5a9b      	ldrh	r3, [r3, r2]
 80133c8:	b29a      	uxth	r2, r3
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	498a      	ldr	r1, [pc, #552]	@ (80135f8 <HAL_PCD_IRQHandler+0x26c>)
 80133d0:	400a      	ands	r2, r1
 80133d2:	b291      	uxth	r1, r2
 80133d4:	2244      	movs	r2, #68	@ 0x44
 80133d6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	0018      	movs	r0, r3
 80133dc:	f009 fe95 	bl	801d10a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2100      	movs	r1, #0
 80133e4:	0018      	movs	r0, r3
 80133e6:	f000 f915 	bl	8013614 <HAL_PCD_SetAddress>

    return;
 80133ea:	e102      	b.n	80135f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80133ec:	68fa      	ldr	r2, [r7, #12]
 80133ee:	2380      	movs	r3, #128	@ 0x80
 80133f0:	01db      	lsls	r3, r3, #7
 80133f2:	4013      	ands	r3, r2
 80133f4:	d00c      	beq.n	8013410 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	2244      	movs	r2, #68	@ 0x44
 80133fc:	5a9b      	ldrh	r3, [r3, r2]
 80133fe:	b29a      	uxth	r2, r3
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	497d      	ldr	r1, [pc, #500]	@ (80135fc <HAL_PCD_IRQHandler+0x270>)
 8013406:	400a      	ands	r2, r1
 8013408:	b291      	uxth	r1, r2
 801340a:	2244      	movs	r2, #68	@ 0x44
 801340c:	5299      	strh	r1, [r3, r2]

    return;
 801340e:	e0f0      	b.n	80135f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8013410:	68fa      	ldr	r2, [r7, #12]
 8013412:	2380      	movs	r3, #128	@ 0x80
 8013414:	019b      	lsls	r3, r3, #6
 8013416:	4013      	ands	r3, r2
 8013418:	d00c      	beq.n	8013434 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	2244      	movs	r2, #68	@ 0x44
 8013420:	5a9b      	ldrh	r3, [r3, r2]
 8013422:	b29a      	uxth	r2, r3
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	4975      	ldr	r1, [pc, #468]	@ (8013600 <HAL_PCD_IRQHandler+0x274>)
 801342a:	400a      	ands	r2, r1
 801342c:	b291      	uxth	r1, r2
 801342e:	2244      	movs	r2, #68	@ 0x44
 8013430:	5299      	strh	r1, [r3, r2]

    return;
 8013432:	e0de      	b.n	80135f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8013434:	68fa      	ldr	r2, [r7, #12]
 8013436:	2380      	movs	r3, #128	@ 0x80
 8013438:	015b      	lsls	r3, r3, #5
 801343a:	4013      	ands	r3, r2
 801343c:	d038      	beq.n	80134b0 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	2240      	movs	r2, #64	@ 0x40
 8013444:	5a9b      	ldrh	r3, [r3, r2]
 8013446:	b29a      	uxth	r2, r3
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	2104      	movs	r1, #4
 801344e:	438a      	bics	r2, r1
 8013450:	b291      	uxth	r1, r2
 8013452:	2240      	movs	r2, #64	@ 0x40
 8013454:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	2240      	movs	r2, #64	@ 0x40
 801345c:	5a9b      	ldrh	r3, [r3, r2]
 801345e:	b29a      	uxth	r2, r3
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	2108      	movs	r1, #8
 8013466:	438a      	bics	r2, r1
 8013468:	b291      	uxth	r1, r2
 801346a:	2240      	movs	r2, #64	@ 0x40
 801346c:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 801346e:	687a      	ldr	r2, [r7, #4]
 8013470:	23b8      	movs	r3, #184	@ 0xb8
 8013472:	009b      	lsls	r3, r3, #2
 8013474:	5cd3      	ldrb	r3, [r2, r3]
 8013476:	2b01      	cmp	r3, #1
 8013478:	d109      	bne.n	801348e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 801347a:	687a      	ldr	r2, [r7, #4]
 801347c:	23b8      	movs	r3, #184	@ 0xb8
 801347e:	009b      	lsls	r3, r3, #2
 8013480:	2100      	movs	r1, #0
 8013482:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	2100      	movs	r1, #0
 8013488:	0018      	movs	r0, r3
 801348a:	f001 fc9f 	bl	8014dcc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	0018      	movs	r0, r3
 8013492:	f009 fe7b 	bl	801d18c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	2244      	movs	r2, #68	@ 0x44
 801349c:	5a9b      	ldrh	r3, [r3, r2]
 801349e:	b29a      	uxth	r2, r3
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	4957      	ldr	r1, [pc, #348]	@ (8013604 <HAL_PCD_IRQHandler+0x278>)
 80134a6:	400a      	ands	r2, r1
 80134a8:	b291      	uxth	r1, r2
 80134aa:	2244      	movs	r2, #68	@ 0x44
 80134ac:	5299      	strh	r1, [r3, r2]

    return;
 80134ae:	e0a0      	b.n	80135f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80134b0:	68fa      	ldr	r2, [r7, #12]
 80134b2:	2380      	movs	r3, #128	@ 0x80
 80134b4:	011b      	lsls	r3, r3, #4
 80134b6:	4013      	ands	r3, r2
 80134b8:	d028      	beq.n	801350c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	2240      	movs	r2, #64	@ 0x40
 80134c0:	5a9b      	ldrh	r3, [r3, r2]
 80134c2:	b29a      	uxth	r2, r3
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	2108      	movs	r1, #8
 80134ca:	430a      	orrs	r2, r1
 80134cc:	b291      	uxth	r1, r2
 80134ce:	2240      	movs	r2, #64	@ 0x40
 80134d0:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	2244      	movs	r2, #68	@ 0x44
 80134d8:	5a9b      	ldrh	r3, [r3, r2]
 80134da:	b29a      	uxth	r2, r3
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	4949      	ldr	r1, [pc, #292]	@ (8013608 <HAL_PCD_IRQHandler+0x27c>)
 80134e2:	400a      	ands	r2, r1
 80134e4:	b291      	uxth	r1, r2
 80134e6:	2244      	movs	r2, #68	@ 0x44
 80134e8:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	2240      	movs	r2, #64	@ 0x40
 80134f0:	5a9b      	ldrh	r3, [r3, r2]
 80134f2:	b29a      	uxth	r2, r3
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	2104      	movs	r1, #4
 80134fa:	430a      	orrs	r2, r1
 80134fc:	b291      	uxth	r1, r2
 80134fe:	2240      	movs	r2, #64	@ 0x40
 8013500:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	0018      	movs	r0, r3
 8013506:	f009 fe25 	bl	801d154 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 801350a:	e072      	b.n	80135f2 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	2280      	movs	r2, #128	@ 0x80
 8013510:	4013      	ands	r3, r2
 8013512:	d046      	beq.n	80135a2 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	2244      	movs	r2, #68	@ 0x44
 801351a:	5a9b      	ldrh	r3, [r3, r2]
 801351c:	b29a      	uxth	r2, r3
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	2180      	movs	r1, #128	@ 0x80
 8013524:	438a      	bics	r2, r1
 8013526:	b291      	uxth	r1, r2
 8013528:	2244      	movs	r2, #68	@ 0x44
 801352a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 801352c:	687a      	ldr	r2, [r7, #4]
 801352e:	23b8      	movs	r3, #184	@ 0xb8
 8013530:	009b      	lsls	r3, r3, #2
 8013532:	5cd3      	ldrb	r3, [r2, r3]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d12f      	bne.n	8013598 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	2240      	movs	r2, #64	@ 0x40
 801353e:	5a9b      	ldrh	r3, [r3, r2]
 8013540:	b29a      	uxth	r2, r3
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	2104      	movs	r1, #4
 8013548:	430a      	orrs	r2, r1
 801354a:	b291      	uxth	r1, r2
 801354c:	2240      	movs	r2, #64	@ 0x40
 801354e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	2240      	movs	r2, #64	@ 0x40
 8013556:	5a9b      	ldrh	r3, [r3, r2]
 8013558:	b29a      	uxth	r2, r3
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	2108      	movs	r1, #8
 8013560:	430a      	orrs	r2, r1
 8013562:	b291      	uxth	r1, r2
 8013564:	2240      	movs	r2, #64	@ 0x40
 8013566:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8013568:	687a      	ldr	r2, [r7, #4]
 801356a:	23b8      	movs	r3, #184	@ 0xb8
 801356c:	009b      	lsls	r3, r3, #2
 801356e:	2101      	movs	r1, #1
 8013570:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	2254      	movs	r2, #84	@ 0x54
 8013578:	5a9b      	ldrh	r3, [r3, r2]
 801357a:	b29b      	uxth	r3, r3
 801357c:	089b      	lsrs	r3, r3, #2
 801357e:	223c      	movs	r2, #60	@ 0x3c
 8013580:	4013      	ands	r3, r2
 8013582:	0019      	movs	r1, r3
 8013584:	687a      	ldr	r2, [r7, #4]
 8013586:	23b9      	movs	r3, #185	@ 0xb9
 8013588:	009b      	lsls	r3, r3, #2
 801358a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	2101      	movs	r1, #1
 8013590:	0018      	movs	r0, r3
 8013592:	f001 fc1b 	bl	8014dcc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8013596:	e02c      	b.n	80135f2 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	0018      	movs	r0, r3
 801359c:	f009 fdda 	bl	801d154 <HAL_PCD_SuspendCallback>
    return;
 80135a0:	e027      	b.n	80135f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80135a2:	68fa      	ldr	r2, [r7, #12]
 80135a4:	2380      	movs	r3, #128	@ 0x80
 80135a6:	009b      	lsls	r3, r3, #2
 80135a8:	4013      	ands	r3, r2
 80135aa:	d010      	beq.n	80135ce <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	2244      	movs	r2, #68	@ 0x44
 80135b2:	5a9b      	ldrh	r3, [r3, r2]
 80135b4:	b29a      	uxth	r2, r3
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	4914      	ldr	r1, [pc, #80]	@ (801360c <HAL_PCD_IRQHandler+0x280>)
 80135bc:	400a      	ands	r2, r1
 80135be:	b291      	uxth	r1, r2
 80135c0:	2244      	movs	r2, #68	@ 0x44
 80135c2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	0018      	movs	r0, r3
 80135c8:	f009 fd90 	bl	801d0ec <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80135cc:	e011      	b.n	80135f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80135ce:	68fa      	ldr	r2, [r7, #12]
 80135d0:	2380      	movs	r3, #128	@ 0x80
 80135d2:	005b      	lsls	r3, r3, #1
 80135d4:	4013      	ands	r3, r2
 80135d6:	d00c      	beq.n	80135f2 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	2244      	movs	r2, #68	@ 0x44
 80135de:	5a9b      	ldrh	r3, [r3, r2]
 80135e0:	b29a      	uxth	r2, r3
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	490a      	ldr	r1, [pc, #40]	@ (8013610 <HAL_PCD_IRQHandler+0x284>)
 80135e8:	400a      	ands	r2, r1
 80135ea:	b291      	uxth	r1, r2
 80135ec:	2244      	movs	r2, #68	@ 0x44
 80135ee:	5299      	strh	r1, [r3, r2]

    return;
 80135f0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80135f2:	46bd      	mov	sp, r7
 80135f4:	b004      	add	sp, #16
 80135f6:	bd80      	pop	{r7, pc}
 80135f8:	fffffbff 	.word	0xfffffbff
 80135fc:	ffffbfff 	.word	0xffffbfff
 8013600:	ffffdfff 	.word	0xffffdfff
 8013604:	ffffefff 	.word	0xffffefff
 8013608:	fffff7ff 	.word	0xfffff7ff
 801360c:	fffffdff 	.word	0xfffffdff
 8013610:	fffffeff 	.word	0xfffffeff

08013614 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b082      	sub	sp, #8
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]
 801361c:	000a      	movs	r2, r1
 801361e:	1cfb      	adds	r3, r7, #3
 8013620:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8013622:	687a      	ldr	r2, [r7, #4]
 8013624:	23aa      	movs	r3, #170	@ 0xaa
 8013626:	009b      	lsls	r3, r3, #2
 8013628:	5cd3      	ldrb	r3, [r2, r3]
 801362a:	2b01      	cmp	r3, #1
 801362c:	d101      	bne.n	8013632 <HAL_PCD_SetAddress+0x1e>
 801362e:	2302      	movs	r3, #2
 8013630:	e017      	b.n	8013662 <HAL_PCD_SetAddress+0x4e>
 8013632:	687a      	ldr	r2, [r7, #4]
 8013634:	23aa      	movs	r3, #170	@ 0xaa
 8013636:	009b      	lsls	r3, r3, #2
 8013638:	2101      	movs	r1, #1
 801363a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	1cfa      	adds	r2, r7, #3
 8013640:	2124      	movs	r1, #36	@ 0x24
 8013642:	7812      	ldrb	r2, [r2, #0]
 8013644:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	681a      	ldr	r2, [r3, #0]
 801364a:	1cfb      	adds	r3, r7, #3
 801364c:	781b      	ldrb	r3, [r3, #0]
 801364e:	0019      	movs	r1, r3
 8013650:	0010      	movs	r0, r2
 8013652:	f007 fc71 	bl	801af38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8013656:	687a      	ldr	r2, [r7, #4]
 8013658:	23aa      	movs	r3, #170	@ 0xaa
 801365a:	009b      	lsls	r3, r3, #2
 801365c:	2100      	movs	r1, #0
 801365e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013660:	2300      	movs	r3, #0
}
 8013662:	0018      	movs	r0, r3
 8013664:	46bd      	mov	sp, r7
 8013666:	b002      	add	sp, #8
 8013668:	bd80      	pop	{r7, pc}

0801366a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 801366a:	b590      	push	{r4, r7, lr}
 801366c:	b085      	sub	sp, #20
 801366e:	af00      	add	r7, sp, #0
 8013670:	6078      	str	r0, [r7, #4]
 8013672:	000c      	movs	r4, r1
 8013674:	0010      	movs	r0, r2
 8013676:	0019      	movs	r1, r3
 8013678:	1cfb      	adds	r3, r7, #3
 801367a:	1c22      	adds	r2, r4, #0
 801367c:	701a      	strb	r2, [r3, #0]
 801367e:	003b      	movs	r3, r7
 8013680:	1c02      	adds	r2, r0, #0
 8013682:	801a      	strh	r2, [r3, #0]
 8013684:	1cbb      	adds	r3, r7, #2
 8013686:	1c0a      	adds	r2, r1, #0
 8013688:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 801368a:	230b      	movs	r3, #11
 801368c:	18fb      	adds	r3, r7, r3
 801368e:	2200      	movs	r2, #0
 8013690:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013692:	1cfb      	adds	r3, r7, #3
 8013694:	781b      	ldrb	r3, [r3, #0]
 8013696:	b25b      	sxtb	r3, r3
 8013698:	2b00      	cmp	r3, #0
 801369a:	da0f      	bge.n	80136bc <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801369c:	1cfb      	adds	r3, r7, #3
 801369e:	781b      	ldrb	r3, [r3, #0]
 80136a0:	2207      	movs	r2, #7
 80136a2:	4013      	ands	r3, r2
 80136a4:	1c5a      	adds	r2, r3, #1
 80136a6:	0013      	movs	r3, r2
 80136a8:	009b      	lsls	r3, r3, #2
 80136aa:	189b      	adds	r3, r3, r2
 80136ac:	00db      	lsls	r3, r3, #3
 80136ae:	687a      	ldr	r2, [r7, #4]
 80136b0:	18d3      	adds	r3, r2, r3
 80136b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	2201      	movs	r2, #1
 80136b8:	705a      	strb	r2, [r3, #1]
 80136ba:	e00f      	b.n	80136dc <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80136bc:	1cfb      	adds	r3, r7, #3
 80136be:	781b      	ldrb	r3, [r3, #0]
 80136c0:	2207      	movs	r2, #7
 80136c2:	401a      	ands	r2, r3
 80136c4:	0013      	movs	r3, r2
 80136c6:	009b      	lsls	r3, r3, #2
 80136c8:	189b      	adds	r3, r3, r2
 80136ca:	00db      	lsls	r3, r3, #3
 80136cc:	3369      	adds	r3, #105	@ 0x69
 80136ce:	33ff      	adds	r3, #255	@ 0xff
 80136d0:	687a      	ldr	r2, [r7, #4]
 80136d2:	18d3      	adds	r3, r2, r3
 80136d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	2200      	movs	r2, #0
 80136da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80136dc:	1cfb      	adds	r3, r7, #3
 80136de:	781b      	ldrb	r3, [r3, #0]
 80136e0:	2207      	movs	r2, #7
 80136e2:	4013      	ands	r3, r2
 80136e4:	b2da      	uxtb	r2, r3
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80136ea:	003b      	movs	r3, r7
 80136ec:	881a      	ldrh	r2, [r3, #0]
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	1cba      	adds	r2, r7, #2
 80136f6:	7812      	ldrb	r2, [r2, #0]
 80136f8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80136fa:	1cbb      	adds	r3, r7, #2
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	2b02      	cmp	r3, #2
 8013700:	d102      	bne.n	8013708 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	2200      	movs	r2, #0
 8013706:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8013708:	687a      	ldr	r2, [r7, #4]
 801370a:	23aa      	movs	r3, #170	@ 0xaa
 801370c:	009b      	lsls	r3, r3, #2
 801370e:	5cd3      	ldrb	r3, [r2, r3]
 8013710:	2b01      	cmp	r3, #1
 8013712:	d101      	bne.n	8013718 <HAL_PCD_EP_Open+0xae>
 8013714:	2302      	movs	r3, #2
 8013716:	e013      	b.n	8013740 <HAL_PCD_EP_Open+0xd6>
 8013718:	687a      	ldr	r2, [r7, #4]
 801371a:	23aa      	movs	r3, #170	@ 0xaa
 801371c:	009b      	lsls	r3, r3, #2
 801371e:	2101      	movs	r1, #1
 8013720:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	68fa      	ldr	r2, [r7, #12]
 8013728:	0011      	movs	r1, r2
 801372a:	0018      	movs	r0, r3
 801372c:	f005 fc68 	bl	8019000 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013730:	687a      	ldr	r2, [r7, #4]
 8013732:	23aa      	movs	r3, #170	@ 0xaa
 8013734:	009b      	lsls	r3, r3, #2
 8013736:	2100      	movs	r1, #0
 8013738:	54d1      	strb	r1, [r2, r3]

  return ret;
 801373a:	230b      	movs	r3, #11
 801373c:	18fb      	adds	r3, r7, r3
 801373e:	781b      	ldrb	r3, [r3, #0]
}
 8013740:	0018      	movs	r0, r3
 8013742:	46bd      	mov	sp, r7
 8013744:	b005      	add	sp, #20
 8013746:	bd90      	pop	{r4, r7, pc}

08013748 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013748:	b580      	push	{r7, lr}
 801374a:	b084      	sub	sp, #16
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
 8013750:	000a      	movs	r2, r1
 8013752:	1cfb      	adds	r3, r7, #3
 8013754:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013756:	1cfb      	adds	r3, r7, #3
 8013758:	781b      	ldrb	r3, [r3, #0]
 801375a:	b25b      	sxtb	r3, r3
 801375c:	2b00      	cmp	r3, #0
 801375e:	da0f      	bge.n	8013780 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013760:	1cfb      	adds	r3, r7, #3
 8013762:	781b      	ldrb	r3, [r3, #0]
 8013764:	2207      	movs	r2, #7
 8013766:	4013      	ands	r3, r2
 8013768:	1c5a      	adds	r2, r3, #1
 801376a:	0013      	movs	r3, r2
 801376c:	009b      	lsls	r3, r3, #2
 801376e:	189b      	adds	r3, r3, r2
 8013770:	00db      	lsls	r3, r3, #3
 8013772:	687a      	ldr	r2, [r7, #4]
 8013774:	18d3      	adds	r3, r2, r3
 8013776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	2201      	movs	r2, #1
 801377c:	705a      	strb	r2, [r3, #1]
 801377e:	e00f      	b.n	80137a0 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013780:	1cfb      	adds	r3, r7, #3
 8013782:	781b      	ldrb	r3, [r3, #0]
 8013784:	2207      	movs	r2, #7
 8013786:	401a      	ands	r2, r3
 8013788:	0013      	movs	r3, r2
 801378a:	009b      	lsls	r3, r3, #2
 801378c:	189b      	adds	r3, r3, r2
 801378e:	00db      	lsls	r3, r3, #3
 8013790:	3369      	adds	r3, #105	@ 0x69
 8013792:	33ff      	adds	r3, #255	@ 0xff
 8013794:	687a      	ldr	r2, [r7, #4]
 8013796:	18d3      	adds	r3, r2, r3
 8013798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	2200      	movs	r2, #0
 801379e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80137a0:	1cfb      	adds	r3, r7, #3
 80137a2:	781b      	ldrb	r3, [r3, #0]
 80137a4:	2207      	movs	r2, #7
 80137a6:	4013      	ands	r3, r2
 80137a8:	b2da      	uxtb	r2, r3
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80137ae:	687a      	ldr	r2, [r7, #4]
 80137b0:	23aa      	movs	r3, #170	@ 0xaa
 80137b2:	009b      	lsls	r3, r3, #2
 80137b4:	5cd3      	ldrb	r3, [r2, r3]
 80137b6:	2b01      	cmp	r3, #1
 80137b8:	d101      	bne.n	80137be <HAL_PCD_EP_Close+0x76>
 80137ba:	2302      	movs	r3, #2
 80137bc:	e011      	b.n	80137e2 <HAL_PCD_EP_Close+0x9a>
 80137be:	687a      	ldr	r2, [r7, #4]
 80137c0:	23aa      	movs	r3, #170	@ 0xaa
 80137c2:	009b      	lsls	r3, r3, #2
 80137c4:	2101      	movs	r1, #1
 80137c6:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	68fa      	ldr	r2, [r7, #12]
 80137ce:	0011      	movs	r1, r2
 80137d0:	0018      	movs	r0, r3
 80137d2:	f005 ffb7 	bl	8019744 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80137d6:	687a      	ldr	r2, [r7, #4]
 80137d8:	23aa      	movs	r3, #170	@ 0xaa
 80137da:	009b      	lsls	r3, r3, #2
 80137dc:	2100      	movs	r1, #0
 80137de:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80137e0:	2300      	movs	r3, #0
}
 80137e2:	0018      	movs	r0, r3
 80137e4:	46bd      	mov	sp, r7
 80137e6:	b004      	add	sp, #16
 80137e8:	bd80      	pop	{r7, pc}

080137ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80137ea:	b580      	push	{r7, lr}
 80137ec:	b086      	sub	sp, #24
 80137ee:	af00      	add	r7, sp, #0
 80137f0:	60f8      	str	r0, [r7, #12]
 80137f2:	607a      	str	r2, [r7, #4]
 80137f4:	603b      	str	r3, [r7, #0]
 80137f6:	200b      	movs	r0, #11
 80137f8:	183b      	adds	r3, r7, r0
 80137fa:	1c0a      	adds	r2, r1, #0
 80137fc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80137fe:	0001      	movs	r1, r0
 8013800:	187b      	adds	r3, r7, r1
 8013802:	781b      	ldrb	r3, [r3, #0]
 8013804:	2207      	movs	r2, #7
 8013806:	401a      	ands	r2, r3
 8013808:	0013      	movs	r3, r2
 801380a:	009b      	lsls	r3, r3, #2
 801380c:	189b      	adds	r3, r3, r2
 801380e:	00db      	lsls	r3, r3, #3
 8013810:	3369      	adds	r3, #105	@ 0x69
 8013812:	33ff      	adds	r3, #255	@ 0xff
 8013814:	68fa      	ldr	r2, [r7, #12]
 8013816:	18d3      	adds	r3, r2, r3
 8013818:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801381a:	697b      	ldr	r3, [r7, #20]
 801381c:	687a      	ldr	r2, [r7, #4]
 801381e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8013820:	697b      	ldr	r3, [r7, #20]
 8013822:	683a      	ldr	r2, [r7, #0]
 8013824:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8013826:	697b      	ldr	r3, [r7, #20]
 8013828:	2200      	movs	r2, #0
 801382a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	2200      	movs	r2, #0
 8013830:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013832:	187b      	adds	r3, r7, r1
 8013834:	781b      	ldrb	r3, [r3, #0]
 8013836:	2207      	movs	r2, #7
 8013838:	4013      	ands	r3, r2
 801383a:	b2da      	uxtb	r2, r3
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	697a      	ldr	r2, [r7, #20]
 8013846:	0011      	movs	r1, r2
 8013848:	0018      	movs	r0, r3
 801384a:	f006 f93b 	bl	8019ac4 <USB_EPStartXfer>

  return HAL_OK;
 801384e:	2300      	movs	r3, #0
}
 8013850:	0018      	movs	r0, r3
 8013852:	46bd      	mov	sp, r7
 8013854:	b006      	add	sp, #24
 8013856:	bd80      	pop	{r7, pc}

08013858 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	000a      	movs	r2, r1
 8013862:	1cfb      	adds	r3, r7, #3
 8013864:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8013866:	1cfb      	adds	r3, r7, #3
 8013868:	781b      	ldrb	r3, [r3, #0]
 801386a:	2207      	movs	r2, #7
 801386c:	401a      	ands	r2, r3
 801386e:	6878      	ldr	r0, [r7, #4]
 8013870:	23c2      	movs	r3, #194	@ 0xc2
 8013872:	0059      	lsls	r1, r3, #1
 8013874:	0013      	movs	r3, r2
 8013876:	009b      	lsls	r3, r3, #2
 8013878:	189b      	adds	r3, r3, r2
 801387a:	00db      	lsls	r3, r3, #3
 801387c:	18c3      	adds	r3, r0, r3
 801387e:	185b      	adds	r3, r3, r1
 8013880:	681b      	ldr	r3, [r3, #0]
}
 8013882:	0018      	movs	r0, r3
 8013884:	46bd      	mov	sp, r7
 8013886:	b002      	add	sp, #8
 8013888:	bd80      	pop	{r7, pc}

0801388a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801388a:	b580      	push	{r7, lr}
 801388c:	b086      	sub	sp, #24
 801388e:	af00      	add	r7, sp, #0
 8013890:	60f8      	str	r0, [r7, #12]
 8013892:	607a      	str	r2, [r7, #4]
 8013894:	603b      	str	r3, [r7, #0]
 8013896:	200b      	movs	r0, #11
 8013898:	183b      	adds	r3, r7, r0
 801389a:	1c0a      	adds	r2, r1, #0
 801389c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801389e:	183b      	adds	r3, r7, r0
 80138a0:	781b      	ldrb	r3, [r3, #0]
 80138a2:	2207      	movs	r2, #7
 80138a4:	4013      	ands	r3, r2
 80138a6:	1c5a      	adds	r2, r3, #1
 80138a8:	0013      	movs	r3, r2
 80138aa:	009b      	lsls	r3, r3, #2
 80138ac:	189b      	adds	r3, r3, r2
 80138ae:	00db      	lsls	r3, r3, #3
 80138b0:	68fa      	ldr	r2, [r7, #12]
 80138b2:	18d3      	adds	r3, r2, r3
 80138b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80138b6:	697b      	ldr	r3, [r7, #20]
 80138b8:	687a      	ldr	r2, [r7, #4]
 80138ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80138bc:	697b      	ldr	r3, [r7, #20]
 80138be:	683a      	ldr	r2, [r7, #0]
 80138c0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80138c2:	697b      	ldr	r3, [r7, #20]
 80138c4:	2224      	movs	r2, #36	@ 0x24
 80138c6:	2101      	movs	r1, #1
 80138c8:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	683a      	ldr	r2, [r7, #0]
 80138ce:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80138d0:	697b      	ldr	r3, [r7, #20]
 80138d2:	2200      	movs	r2, #0
 80138d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80138d6:	697b      	ldr	r3, [r7, #20]
 80138d8:	2201      	movs	r2, #1
 80138da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80138dc:	183b      	adds	r3, r7, r0
 80138de:	781b      	ldrb	r3, [r3, #0]
 80138e0:	2207      	movs	r2, #7
 80138e2:	4013      	ands	r3, r2
 80138e4:	b2da      	uxtb	r2, r3
 80138e6:	697b      	ldr	r3, [r7, #20]
 80138e8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	697a      	ldr	r2, [r7, #20]
 80138f0:	0011      	movs	r1, r2
 80138f2:	0018      	movs	r0, r3
 80138f4:	f006 f8e6 	bl	8019ac4 <USB_EPStartXfer>

  return HAL_OK;
 80138f8:	2300      	movs	r3, #0
}
 80138fa:	0018      	movs	r0, r3
 80138fc:	46bd      	mov	sp, r7
 80138fe:	b006      	add	sp, #24
 8013900:	bd80      	pop	{r7, pc}

08013902 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013902:	b580      	push	{r7, lr}
 8013904:	b084      	sub	sp, #16
 8013906:	af00      	add	r7, sp, #0
 8013908:	6078      	str	r0, [r7, #4]
 801390a:	000a      	movs	r2, r1
 801390c:	1cfb      	adds	r3, r7, #3
 801390e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8013910:	1cfb      	adds	r3, r7, #3
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	2207      	movs	r2, #7
 8013916:	401a      	ands	r2, r3
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	685b      	ldr	r3, [r3, #4]
 801391c:	429a      	cmp	r2, r3
 801391e:	d901      	bls.n	8013924 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8013920:	2301      	movs	r3, #1
 8013922:	e046      	b.n	80139b2 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8013924:	1cfb      	adds	r3, r7, #3
 8013926:	781b      	ldrb	r3, [r3, #0]
 8013928:	b25b      	sxtb	r3, r3
 801392a:	2b00      	cmp	r3, #0
 801392c:	da0f      	bge.n	801394e <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801392e:	1cfb      	adds	r3, r7, #3
 8013930:	781b      	ldrb	r3, [r3, #0]
 8013932:	2207      	movs	r2, #7
 8013934:	4013      	ands	r3, r2
 8013936:	1c5a      	adds	r2, r3, #1
 8013938:	0013      	movs	r3, r2
 801393a:	009b      	lsls	r3, r3, #2
 801393c:	189b      	adds	r3, r3, r2
 801393e:	00db      	lsls	r3, r3, #3
 8013940:	687a      	ldr	r2, [r7, #4]
 8013942:	18d3      	adds	r3, r2, r3
 8013944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	2201      	movs	r2, #1
 801394a:	705a      	strb	r2, [r3, #1]
 801394c:	e00d      	b.n	801396a <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801394e:	1cfb      	adds	r3, r7, #3
 8013950:	781a      	ldrb	r2, [r3, #0]
 8013952:	0013      	movs	r3, r2
 8013954:	009b      	lsls	r3, r3, #2
 8013956:	189b      	adds	r3, r3, r2
 8013958:	00db      	lsls	r3, r3, #3
 801395a:	3369      	adds	r3, #105	@ 0x69
 801395c:	33ff      	adds	r3, #255	@ 0xff
 801395e:	687a      	ldr	r2, [r7, #4]
 8013960:	18d3      	adds	r3, r2, r3
 8013962:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	2200      	movs	r2, #0
 8013968:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	2201      	movs	r2, #1
 801396e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013970:	1cfb      	adds	r3, r7, #3
 8013972:	781b      	ldrb	r3, [r3, #0]
 8013974:	2207      	movs	r2, #7
 8013976:	4013      	ands	r3, r2
 8013978:	b2da      	uxtb	r2, r3
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801397e:	687a      	ldr	r2, [r7, #4]
 8013980:	23aa      	movs	r3, #170	@ 0xaa
 8013982:	009b      	lsls	r3, r3, #2
 8013984:	5cd3      	ldrb	r3, [r2, r3]
 8013986:	2b01      	cmp	r3, #1
 8013988:	d101      	bne.n	801398e <HAL_PCD_EP_SetStall+0x8c>
 801398a:	2302      	movs	r3, #2
 801398c:	e011      	b.n	80139b2 <HAL_PCD_EP_SetStall+0xb0>
 801398e:	687a      	ldr	r2, [r7, #4]
 8013990:	23aa      	movs	r3, #170	@ 0xaa
 8013992:	009b      	lsls	r3, r3, #2
 8013994:	2101      	movs	r1, #1
 8013996:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	68fa      	ldr	r2, [r7, #12]
 801399e:	0011      	movs	r1, r2
 80139a0:	0018      	movs	r0, r3
 80139a2:	f007 f9c7 	bl	801ad34 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80139a6:	687a      	ldr	r2, [r7, #4]
 80139a8:	23aa      	movs	r3, #170	@ 0xaa
 80139aa:	009b      	lsls	r3, r3, #2
 80139ac:	2100      	movs	r1, #0
 80139ae:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80139b0:	2300      	movs	r3, #0
}
 80139b2:	0018      	movs	r0, r3
 80139b4:	46bd      	mov	sp, r7
 80139b6:	b004      	add	sp, #16
 80139b8:	bd80      	pop	{r7, pc}

080139ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80139ba:	b580      	push	{r7, lr}
 80139bc:	b084      	sub	sp, #16
 80139be:	af00      	add	r7, sp, #0
 80139c0:	6078      	str	r0, [r7, #4]
 80139c2:	000a      	movs	r2, r1
 80139c4:	1cfb      	adds	r3, r7, #3
 80139c6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80139c8:	1cfb      	adds	r3, r7, #3
 80139ca:	781b      	ldrb	r3, [r3, #0]
 80139cc:	220f      	movs	r2, #15
 80139ce:	401a      	ands	r2, r3
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	685b      	ldr	r3, [r3, #4]
 80139d4:	429a      	cmp	r2, r3
 80139d6:	d901      	bls.n	80139dc <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80139d8:	2301      	movs	r3, #1
 80139da:	e048      	b.n	8013a6e <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80139dc:	1cfb      	adds	r3, r7, #3
 80139de:	781b      	ldrb	r3, [r3, #0]
 80139e0:	b25b      	sxtb	r3, r3
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	da0f      	bge.n	8013a06 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80139e6:	1cfb      	adds	r3, r7, #3
 80139e8:	781b      	ldrb	r3, [r3, #0]
 80139ea:	2207      	movs	r2, #7
 80139ec:	4013      	ands	r3, r2
 80139ee:	1c5a      	adds	r2, r3, #1
 80139f0:	0013      	movs	r3, r2
 80139f2:	009b      	lsls	r3, r3, #2
 80139f4:	189b      	adds	r3, r3, r2
 80139f6:	00db      	lsls	r3, r3, #3
 80139f8:	687a      	ldr	r2, [r7, #4]
 80139fa:	18d3      	adds	r3, r2, r3
 80139fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	2201      	movs	r2, #1
 8013a02:	705a      	strb	r2, [r3, #1]
 8013a04:	e00f      	b.n	8013a26 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013a06:	1cfb      	adds	r3, r7, #3
 8013a08:	781b      	ldrb	r3, [r3, #0]
 8013a0a:	2207      	movs	r2, #7
 8013a0c:	401a      	ands	r2, r3
 8013a0e:	0013      	movs	r3, r2
 8013a10:	009b      	lsls	r3, r3, #2
 8013a12:	189b      	adds	r3, r3, r2
 8013a14:	00db      	lsls	r3, r3, #3
 8013a16:	3369      	adds	r3, #105	@ 0x69
 8013a18:	33ff      	adds	r3, #255	@ 0xff
 8013a1a:	687a      	ldr	r2, [r7, #4]
 8013a1c:	18d3      	adds	r3, r2, r3
 8013a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	2200      	movs	r2, #0
 8013a24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	2200      	movs	r2, #0
 8013a2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013a2c:	1cfb      	adds	r3, r7, #3
 8013a2e:	781b      	ldrb	r3, [r3, #0]
 8013a30:	2207      	movs	r2, #7
 8013a32:	4013      	ands	r3, r2
 8013a34:	b2da      	uxtb	r2, r3
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013a3a:	687a      	ldr	r2, [r7, #4]
 8013a3c:	23aa      	movs	r3, #170	@ 0xaa
 8013a3e:	009b      	lsls	r3, r3, #2
 8013a40:	5cd3      	ldrb	r3, [r2, r3]
 8013a42:	2b01      	cmp	r3, #1
 8013a44:	d101      	bne.n	8013a4a <HAL_PCD_EP_ClrStall+0x90>
 8013a46:	2302      	movs	r3, #2
 8013a48:	e011      	b.n	8013a6e <HAL_PCD_EP_ClrStall+0xb4>
 8013a4a:	687a      	ldr	r2, [r7, #4]
 8013a4c:	23aa      	movs	r3, #170	@ 0xaa
 8013a4e:	009b      	lsls	r3, r3, #2
 8013a50:	2101      	movs	r1, #1
 8013a52:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	68fa      	ldr	r2, [r7, #12]
 8013a5a:	0011      	movs	r1, r2
 8013a5c:	0018      	movs	r0, r3
 8013a5e:	f007 f9b9 	bl	801add4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8013a62:	687a      	ldr	r2, [r7, #4]
 8013a64:	23aa      	movs	r3, #170	@ 0xaa
 8013a66:	009b      	lsls	r3, r3, #2
 8013a68:	2100      	movs	r1, #0
 8013a6a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8013a6c:	2300      	movs	r3, #0
}
 8013a6e:	0018      	movs	r0, r3
 8013a70:	46bd      	mov	sp, r7
 8013a72:	b004      	add	sp, #16
 8013a74:	bd80      	pop	{r7, pc}
	...

08013a78 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8013a78:	b5b0      	push	{r4, r5, r7, lr}
 8013a7a:	b096      	sub	sp, #88	@ 0x58
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8013a80:	f000 fbec 	bl	801425c <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	681a      	ldr	r2, [r3, #0]
 8013a88:	204e      	movs	r0, #78	@ 0x4e
 8013a8a:	183b      	adds	r3, r7, r0
 8013a8c:	2144      	movs	r1, #68	@ 0x44
 8013a8e:	5a52      	ldrh	r2, [r2, r1]
 8013a90:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8013a92:	183b      	adds	r3, r7, r0
 8013a94:	881b      	ldrh	r3, [r3, #0]
 8013a96:	b2da      	uxtb	r2, r3
 8013a98:	244d      	movs	r4, #77	@ 0x4d
 8013a9a:	193b      	adds	r3, r7, r4
 8013a9c:	210f      	movs	r1, #15
 8013a9e:	400a      	ands	r2, r1
 8013aa0:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8013aa2:	193b      	adds	r3, r7, r4
 8013aa4:	781b      	ldrb	r3, [r3, #0]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d000      	beq.n	8013aac <PCD_EP_ISR_Handler+0x34>
 8013aaa:	e18f      	b.n	8013dcc <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8013aac:	183b      	adds	r3, r7, r0
 8013aae:	881b      	ldrh	r3, [r3, #0]
 8013ab0:	2210      	movs	r2, #16
 8013ab2:	4013      	ands	r3, r2
 8013ab4:	d155      	bne.n	8013b62 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	881b      	ldrh	r3, [r3, #0]
 8013abc:	b29a      	uxth	r2, r3
 8013abe:	200e      	movs	r0, #14
 8013ac0:	183b      	adds	r3, r7, r0
 8013ac2:	49bb      	ldr	r1, [pc, #748]	@ (8013db0 <PCD_EP_ISR_Handler+0x338>)
 8013ac4:	400a      	ands	r2, r1
 8013ac6:	801a      	strh	r2, [r3, #0]
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	183a      	adds	r2, r7, r0
 8013ace:	8812      	ldrh	r2, [r2, #0]
 8013ad0:	49b8      	ldr	r1, [pc, #736]	@ (8013db4 <PCD_EP_ISR_Handler+0x33c>)
 8013ad2:	430a      	orrs	r2, r1
 8013ad4:	b292      	uxth	r2, r2
 8013ad6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	3328      	adds	r3, #40	@ 0x28
 8013adc:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	2250      	movs	r2, #80	@ 0x50
 8013ae4:	5a9b      	ldrh	r3, [r3, r2]
 8013ae6:	b29b      	uxth	r3, r3
 8013ae8:	001a      	movs	r2, r3
 8013aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013aec:	781b      	ldrb	r3, [r3, #0]
 8013aee:	00db      	lsls	r3, r3, #3
 8013af0:	18d2      	adds	r2, r2, r3
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	18d3      	adds	r3, r2, r3
 8013af8:	4aaf      	ldr	r2, [pc, #700]	@ (8013db8 <PCD_EP_ISR_Handler+0x340>)
 8013afa:	4694      	mov	ip, r2
 8013afc:	4463      	add	r3, ip
 8013afe:	881b      	ldrh	r3, [r3, #0]
 8013b00:	059b      	lsls	r3, r3, #22
 8013b02:	0d9a      	lsrs	r2, r3, #22
 8013b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b06:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8013b08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b0a:	695a      	ldr	r2, [r3, #20]
 8013b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b0e:	69db      	ldr	r3, [r3, #28]
 8013b10:	18d2      	adds	r2, r2, r3
 8013b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b14:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	2100      	movs	r1, #0
 8013b1a:	0018      	movs	r0, r3
 8013b1c:	f009 fac8 	bl	801d0b0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2224      	movs	r2, #36	@ 0x24
 8013b24:	5c9b      	ldrb	r3, [r3, r2]
 8013b26:	b2db      	uxtb	r3, r3
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d101      	bne.n	8013b30 <PCD_EP_ISR_Handler+0xb8>
 8013b2c:	f000 fb96 	bl	801425c <PCD_EP_ISR_Handler+0x7e4>
 8013b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b32:	699b      	ldr	r3, [r3, #24]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d001      	beq.n	8013b3c <PCD_EP_ISR_Handler+0xc4>
 8013b38:	f000 fb90 	bl	801425c <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	2224      	movs	r2, #36	@ 0x24
 8013b40:	5c9b      	ldrb	r3, [r3, r2]
 8013b42:	b2db      	uxtb	r3, r3
 8013b44:	2280      	movs	r2, #128	@ 0x80
 8013b46:	4252      	negs	r2, r2
 8013b48:	4313      	orrs	r3, r2
 8013b4a:	b2da      	uxtb	r2, r3
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	0011      	movs	r1, r2
 8013b52:	224c      	movs	r2, #76	@ 0x4c
 8013b54:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	2224      	movs	r2, #36	@ 0x24
 8013b5a:	2100      	movs	r1, #0
 8013b5c:	5499      	strb	r1, [r3, r2]
 8013b5e:	f000 fb7d 	bl	801425c <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	3369      	adds	r3, #105	@ 0x69
 8013b66:	33ff      	adds	r3, #255	@ 0xff
 8013b68:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	681a      	ldr	r2, [r3, #0]
 8013b6e:	214a      	movs	r1, #74	@ 0x4a
 8013b70:	187b      	adds	r3, r7, r1
 8013b72:	8812      	ldrh	r2, [r2, #0]
 8013b74:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8013b76:	187b      	adds	r3, r7, r1
 8013b78:	881a      	ldrh	r2, [r3, #0]
 8013b7a:	2380      	movs	r3, #128	@ 0x80
 8013b7c:	011b      	lsls	r3, r3, #4
 8013b7e:	4013      	ands	r3, r2
 8013b80:	d037      	beq.n	8013bf2 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	2250      	movs	r2, #80	@ 0x50
 8013b88:	5a9b      	ldrh	r3, [r3, r2]
 8013b8a:	b29b      	uxth	r3, r3
 8013b8c:	001a      	movs	r2, r3
 8013b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b90:	781b      	ldrb	r3, [r3, #0]
 8013b92:	00db      	lsls	r3, r3, #3
 8013b94:	18d2      	adds	r2, r2, r3
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	18d3      	adds	r3, r2, r3
 8013b9c:	4a87      	ldr	r2, [pc, #540]	@ (8013dbc <PCD_EP_ISR_Handler+0x344>)
 8013b9e:	4694      	mov	ip, r2
 8013ba0:	4463      	add	r3, ip
 8013ba2:	881b      	ldrh	r3, [r3, #0]
 8013ba4:	059b      	lsls	r3, r3, #22
 8013ba6:	0d9a      	lsrs	r2, r3, #22
 8013ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013baa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	6818      	ldr	r0, [r3, #0]
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	22ac      	movs	r2, #172	@ 0xac
 8013bb4:	0092      	lsls	r2, r2, #2
 8013bb6:	1899      	adds	r1, r3, r2
 8013bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bba:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8013bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bbe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8013bc0:	b29b      	uxth	r3, r3
 8013bc2:	f007 fa3a 	bl	801b03a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	881b      	ldrh	r3, [r3, #0]
 8013bcc:	b29a      	uxth	r2, r3
 8013bce:	2010      	movs	r0, #16
 8013bd0:	183b      	adds	r3, r7, r0
 8013bd2:	497b      	ldr	r1, [pc, #492]	@ (8013dc0 <PCD_EP_ISR_Handler+0x348>)
 8013bd4:	400a      	ands	r2, r1
 8013bd6:	801a      	strh	r2, [r3, #0]
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	183a      	adds	r2, r7, r0
 8013bde:	8812      	ldrh	r2, [r2, #0]
 8013be0:	2180      	movs	r1, #128	@ 0x80
 8013be2:	430a      	orrs	r2, r1
 8013be4:	b292      	uxth	r2, r2
 8013be6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	0018      	movs	r0, r3
 8013bec:	f009 fa2a 	bl	801d044 <HAL_PCD_SetupStageCallback>
 8013bf0:	e334      	b.n	801425c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013bf2:	234a      	movs	r3, #74	@ 0x4a
 8013bf4:	18fb      	adds	r3, r7, r3
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	5e9b      	ldrsh	r3, [r3, r2]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	db00      	blt.n	8013c00 <PCD_EP_ISR_Handler+0x188>
 8013bfe:	e32d      	b.n	801425c <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	881b      	ldrh	r3, [r3, #0]
 8013c06:	b29a      	uxth	r2, r3
 8013c08:	201e      	movs	r0, #30
 8013c0a:	183b      	adds	r3, r7, r0
 8013c0c:	496c      	ldr	r1, [pc, #432]	@ (8013dc0 <PCD_EP_ISR_Handler+0x348>)
 8013c0e:	400a      	ands	r2, r1
 8013c10:	801a      	strh	r2, [r3, #0]
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	183a      	adds	r2, r7, r0
 8013c18:	8812      	ldrh	r2, [r2, #0]
 8013c1a:	2180      	movs	r1, #128	@ 0x80
 8013c1c:	430a      	orrs	r2, r1
 8013c1e:	b292      	uxth	r2, r2
 8013c20:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	2250      	movs	r2, #80	@ 0x50
 8013c28:	5a9b      	ldrh	r3, [r3, r2]
 8013c2a:	b29b      	uxth	r3, r3
 8013c2c:	001a      	movs	r2, r3
 8013c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c30:	781b      	ldrb	r3, [r3, #0]
 8013c32:	00db      	lsls	r3, r3, #3
 8013c34:	18d2      	adds	r2, r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	18d3      	adds	r3, r2, r3
 8013c3c:	4a5f      	ldr	r2, [pc, #380]	@ (8013dbc <PCD_EP_ISR_Handler+0x344>)
 8013c3e:	4694      	mov	ip, r2
 8013c40:	4463      	add	r3, ip
 8013c42:	881b      	ldrh	r3, [r3, #0]
 8013c44:	059b      	lsls	r3, r3, #22
 8013c46:	0d9a      	lsrs	r2, r3, #22
 8013c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c4a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8013c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c4e:	69db      	ldr	r3, [r3, #28]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d01a      	beq.n	8013c8a <PCD_EP_ISR_Handler+0x212>
 8013c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c56:	695b      	ldr	r3, [r3, #20]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d016      	beq.n	8013c8a <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6818      	ldr	r0, [r3, #0]
 8013c60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c62:	6959      	ldr	r1, [r3, #20]
 8013c64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c66:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8013c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c6a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8013c6c:	b29b      	uxth	r3, r3
 8013c6e:	f007 f9e4 	bl	801b03a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8013c72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c74:	695a      	ldr	r2, [r3, #20]
 8013c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c78:	69db      	ldr	r3, [r3, #28]
 8013c7a:	18d2      	adds	r2, r2, r3
 8013c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c7e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2100      	movs	r1, #0
 8013c84:	0018      	movs	r0, r3
 8013c86:	f009 f9f2 	bl	801d06e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681a      	ldr	r2, [r3, #0]
 8013c8e:	214a      	movs	r1, #74	@ 0x4a
 8013c90:	187b      	adds	r3, r7, r1
 8013c92:	8812      	ldrh	r2, [r2, #0]
 8013c94:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8013c96:	187b      	adds	r3, r7, r1
 8013c98:	881a      	ldrh	r2, [r3, #0]
 8013c9a:	2380      	movs	r3, #128	@ 0x80
 8013c9c:	011b      	lsls	r3, r3, #4
 8013c9e:	4013      	ands	r3, r2
 8013ca0:	d000      	beq.n	8013ca4 <PCD_EP_ISR_Handler+0x22c>
 8013ca2:	e2db      	b.n	801425c <PCD_EP_ISR_Handler+0x7e4>
 8013ca4:	187b      	adds	r3, r7, r1
 8013ca6:	881a      	ldrh	r2, [r3, #0]
 8013ca8:	23c0      	movs	r3, #192	@ 0xc0
 8013caa:	019b      	lsls	r3, r3, #6
 8013cac:	401a      	ands	r2, r3
 8013cae:	23c0      	movs	r3, #192	@ 0xc0
 8013cb0:	019b      	lsls	r3, r3, #6
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	d100      	bne.n	8013cb8 <PCD_EP_ISR_Handler+0x240>
 8013cb6:	e2d1      	b.n	801425c <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	61bb      	str	r3, [r7, #24]
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	2250      	movs	r2, #80	@ 0x50
 8013cc4:	5a9b      	ldrh	r3, [r3, r2]
 8013cc6:	b29b      	uxth	r3, r3
 8013cc8:	001a      	movs	r2, r3
 8013cca:	69bb      	ldr	r3, [r7, #24]
 8013ccc:	189b      	adds	r3, r3, r2
 8013cce:	61bb      	str	r3, [r7, #24]
 8013cd0:	69bb      	ldr	r3, [r7, #24]
 8013cd2:	4a3a      	ldr	r2, [pc, #232]	@ (8013dbc <PCD_EP_ISR_Handler+0x344>)
 8013cd4:	4694      	mov	ip, r2
 8013cd6:	4463      	add	r3, ip
 8013cd8:	617b      	str	r3, [r7, #20]
 8013cda:	697b      	ldr	r3, [r7, #20]
 8013cdc:	881b      	ldrh	r3, [r3, #0]
 8013cde:	b29b      	uxth	r3, r3
 8013ce0:	059b      	lsls	r3, r3, #22
 8013ce2:	0d9b      	lsrs	r3, r3, #22
 8013ce4:	b29a      	uxth	r2, r3
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	801a      	strh	r2, [r3, #0]
 8013cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cec:	691b      	ldr	r3, [r3, #16]
 8013cee:	2b3e      	cmp	r3, #62	@ 0x3e
 8013cf0:	d91a      	bls.n	8013d28 <PCD_EP_ISR_Handler+0x2b0>
 8013cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cf4:	691b      	ldr	r3, [r3, #16]
 8013cf6:	095b      	lsrs	r3, r3, #5
 8013cf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8013cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cfc:	691b      	ldr	r3, [r3, #16]
 8013cfe:	221f      	movs	r2, #31
 8013d00:	4013      	ands	r3, r2
 8013d02:	d102      	bne.n	8013d0a <PCD_EP_ISR_Handler+0x292>
 8013d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d06:	3b01      	subs	r3, #1
 8013d08:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d0a:	697b      	ldr	r3, [r7, #20]
 8013d0c:	881b      	ldrh	r3, [r3, #0]
 8013d0e:	b29a      	uxth	r2, r3
 8013d10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d12:	b29b      	uxth	r3, r3
 8013d14:	029b      	lsls	r3, r3, #10
 8013d16:	b29b      	uxth	r3, r3
 8013d18:	4313      	orrs	r3, r2
 8013d1a:	b29b      	uxth	r3, r3
 8013d1c:	4a25      	ldr	r2, [pc, #148]	@ (8013db4 <PCD_EP_ISR_Handler+0x33c>)
 8013d1e:	4313      	orrs	r3, r2
 8013d20:	b29a      	uxth	r2, r3
 8013d22:	697b      	ldr	r3, [r7, #20]
 8013d24:	801a      	strh	r2, [r3, #0]
 8013d26:	e023      	b.n	8013d70 <PCD_EP_ISR_Handler+0x2f8>
 8013d28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d2a:	691b      	ldr	r3, [r3, #16]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d108      	bne.n	8013d42 <PCD_EP_ISR_Handler+0x2ca>
 8013d30:	697b      	ldr	r3, [r7, #20]
 8013d32:	881b      	ldrh	r3, [r3, #0]
 8013d34:	b29b      	uxth	r3, r3
 8013d36:	4a1f      	ldr	r2, [pc, #124]	@ (8013db4 <PCD_EP_ISR_Handler+0x33c>)
 8013d38:	4313      	orrs	r3, r2
 8013d3a:	b29a      	uxth	r2, r3
 8013d3c:	697b      	ldr	r3, [r7, #20]
 8013d3e:	801a      	strh	r2, [r3, #0]
 8013d40:	e016      	b.n	8013d70 <PCD_EP_ISR_Handler+0x2f8>
 8013d42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d44:	691b      	ldr	r3, [r3, #16]
 8013d46:	085b      	lsrs	r3, r3, #1
 8013d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d4c:	691b      	ldr	r3, [r3, #16]
 8013d4e:	2201      	movs	r2, #1
 8013d50:	4013      	ands	r3, r2
 8013d52:	d002      	beq.n	8013d5a <PCD_EP_ISR_Handler+0x2e2>
 8013d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d56:	3301      	adds	r3, #1
 8013d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d5a:	697b      	ldr	r3, [r7, #20]
 8013d5c:	881b      	ldrh	r3, [r3, #0]
 8013d5e:	b29a      	uxth	r2, r3
 8013d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d62:	b29b      	uxth	r3, r3
 8013d64:	029b      	lsls	r3, r3, #10
 8013d66:	b29b      	uxth	r3, r3
 8013d68:	4313      	orrs	r3, r2
 8013d6a:	b29a      	uxth	r2, r3
 8013d6c:	697b      	ldr	r3, [r7, #20]
 8013d6e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	881b      	ldrh	r3, [r3, #0]
 8013d76:	b29a      	uxth	r2, r3
 8013d78:	2012      	movs	r0, #18
 8013d7a:	183b      	adds	r3, r7, r0
 8013d7c:	4911      	ldr	r1, [pc, #68]	@ (8013dc4 <PCD_EP_ISR_Handler+0x34c>)
 8013d7e:	400a      	ands	r2, r1
 8013d80:	801a      	strh	r2, [r3, #0]
 8013d82:	183b      	adds	r3, r7, r0
 8013d84:	183a      	adds	r2, r7, r0
 8013d86:	8812      	ldrh	r2, [r2, #0]
 8013d88:	2180      	movs	r1, #128	@ 0x80
 8013d8a:	0149      	lsls	r1, r1, #5
 8013d8c:	404a      	eors	r2, r1
 8013d8e:	801a      	strh	r2, [r3, #0]
 8013d90:	183b      	adds	r3, r7, r0
 8013d92:	183a      	adds	r2, r7, r0
 8013d94:	8812      	ldrh	r2, [r2, #0]
 8013d96:	2180      	movs	r1, #128	@ 0x80
 8013d98:	0189      	lsls	r1, r1, #6
 8013d9a:	404a      	eors	r2, r1
 8013d9c:	801a      	strh	r2, [r3, #0]
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	183a      	adds	r2, r7, r0
 8013da4:	8812      	ldrh	r2, [r2, #0]
 8013da6:	4908      	ldr	r1, [pc, #32]	@ (8013dc8 <PCD_EP_ISR_Handler+0x350>)
 8013da8:	430a      	orrs	r2, r1
 8013daa:	b292      	uxth	r2, r2
 8013dac:	801a      	strh	r2, [r3, #0]
 8013dae:	e255      	b.n	801425c <PCD_EP_ISR_Handler+0x7e4>
 8013db0:	ffff8f0f 	.word	0xffff8f0f
 8013db4:	ffff8000 	.word	0xffff8000
 8013db8:	00000402 	.word	0x00000402
 8013dbc:	00000406 	.word	0x00000406
 8013dc0:	00000f8f 	.word	0x00000f8f
 8013dc4:	ffffbf8f 	.word	0xffffbf8f
 8013dc8:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	001a      	movs	r2, r3
 8013dd2:	204d      	movs	r0, #77	@ 0x4d
 8013dd4:	183b      	adds	r3, r7, r0
 8013dd6:	781b      	ldrb	r3, [r3, #0]
 8013dd8:	009b      	lsls	r3, r3, #2
 8013dda:	18d2      	adds	r2, r2, r3
 8013ddc:	214a      	movs	r1, #74	@ 0x4a
 8013dde:	187b      	adds	r3, r7, r1
 8013de0:	8812      	ldrh	r2, [r2, #0]
 8013de2:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8013de4:	187b      	adds	r3, r7, r1
 8013de6:	2200      	movs	r2, #0
 8013de8:	5e9b      	ldrsh	r3, [r3, r2]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	db00      	blt.n	8013df0 <PCD_EP_ISR_Handler+0x378>
 8013dee:	e0fa      	b.n	8013fe6 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	001a      	movs	r2, r3
 8013df6:	183b      	adds	r3, r7, r0
 8013df8:	781b      	ldrb	r3, [r3, #0]
 8013dfa:	009b      	lsls	r3, r3, #2
 8013dfc:	18d3      	adds	r3, r2, r3
 8013dfe:	881b      	ldrh	r3, [r3, #0]
 8013e00:	b29a      	uxth	r2, r3
 8013e02:	2448      	movs	r4, #72	@ 0x48
 8013e04:	193b      	adds	r3, r7, r4
 8013e06:	49d1      	ldr	r1, [pc, #836]	@ (801414c <PCD_EP_ISR_Handler+0x6d4>)
 8013e08:	400a      	ands	r2, r1
 8013e0a:	801a      	strh	r2, [r3, #0]
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	001a      	movs	r2, r3
 8013e12:	183b      	adds	r3, r7, r0
 8013e14:	781b      	ldrb	r3, [r3, #0]
 8013e16:	009b      	lsls	r3, r3, #2
 8013e18:	18d3      	adds	r3, r2, r3
 8013e1a:	193a      	adds	r2, r7, r4
 8013e1c:	8812      	ldrh	r2, [r2, #0]
 8013e1e:	2180      	movs	r1, #128	@ 0x80
 8013e20:	430a      	orrs	r2, r1
 8013e22:	b292      	uxth	r2, r2
 8013e24:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8013e26:	183b      	adds	r3, r7, r0
 8013e28:	781a      	ldrb	r2, [r3, #0]
 8013e2a:	0013      	movs	r3, r2
 8013e2c:	009b      	lsls	r3, r3, #2
 8013e2e:	189b      	adds	r3, r3, r2
 8013e30:	00db      	lsls	r3, r3, #3
 8013e32:	3369      	adds	r3, #105	@ 0x69
 8013e34:	33ff      	adds	r3, #255	@ 0xff
 8013e36:	687a      	ldr	r2, [r7, #4]
 8013e38:	18d3      	adds	r3, r2, r3
 8013e3a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8013e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e3e:	7b1b      	ldrb	r3, [r3, #12]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d125      	bne.n	8013e90 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	2250      	movs	r2, #80	@ 0x50
 8013e4a:	5a9b      	ldrh	r3, [r3, r2]
 8013e4c:	b29b      	uxth	r3, r3
 8013e4e:	001a      	movs	r2, r3
 8013e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e52:	781b      	ldrb	r3, [r3, #0]
 8013e54:	00db      	lsls	r3, r3, #3
 8013e56:	18d2      	adds	r2, r2, r3
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	18d3      	adds	r3, r2, r3
 8013e5e:	4abc      	ldr	r2, [pc, #752]	@ (8014150 <PCD_EP_ISR_Handler+0x6d8>)
 8013e60:	4694      	mov	ip, r2
 8013e62:	4463      	add	r3, ip
 8013e64:	881a      	ldrh	r2, [r3, #0]
 8013e66:	2450      	movs	r4, #80	@ 0x50
 8013e68:	193b      	adds	r3, r7, r4
 8013e6a:	0592      	lsls	r2, r2, #22
 8013e6c:	0d92      	lsrs	r2, r2, #22
 8013e6e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8013e70:	193b      	adds	r3, r7, r4
 8013e72:	881b      	ldrh	r3, [r3, #0]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d100      	bne.n	8013e7a <PCD_EP_ISR_Handler+0x402>
 8013e78:	e08d      	b.n	8013f96 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	6818      	ldr	r0, [r3, #0]
 8013e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e80:	6959      	ldr	r1, [r3, #20]
 8013e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e84:	88da      	ldrh	r2, [r3, #6]
 8013e86:	193b      	adds	r3, r7, r4
 8013e88:	881b      	ldrh	r3, [r3, #0]
 8013e8a:	f007 f8d6 	bl	801b03a <USB_ReadPMA>
 8013e8e:	e082      	b.n	8013f96 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8013e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e92:	78db      	ldrb	r3, [r3, #3]
 8013e94:	2b02      	cmp	r3, #2
 8013e96:	d10c      	bne.n	8013eb2 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8013e98:	2350      	movs	r3, #80	@ 0x50
 8013e9a:	18fc      	adds	r4, r7, r3
 8013e9c:	234a      	movs	r3, #74	@ 0x4a
 8013e9e:	18fb      	adds	r3, r7, r3
 8013ea0:	881a      	ldrh	r2, [r3, #0]
 8013ea2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	0018      	movs	r0, r3
 8013ea8:	f000 f9ec 	bl	8014284 <HAL_PCD_EP_DB_Receive>
 8013eac:	0003      	movs	r3, r0
 8013eae:	8023      	strh	r3, [r4, #0]
 8013eb0:	e071      	b.n	8013f96 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	001a      	movs	r2, r3
 8013eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013eba:	781b      	ldrb	r3, [r3, #0]
 8013ebc:	009b      	lsls	r3, r3, #2
 8013ebe:	18d3      	adds	r3, r2, r3
 8013ec0:	881b      	ldrh	r3, [r3, #0]
 8013ec2:	b29a      	uxth	r2, r3
 8013ec4:	2052      	movs	r0, #82	@ 0x52
 8013ec6:	183b      	adds	r3, r7, r0
 8013ec8:	49a2      	ldr	r1, [pc, #648]	@ (8014154 <PCD_EP_ISR_Handler+0x6dc>)
 8013eca:	400a      	ands	r2, r1
 8013ecc:	801a      	strh	r2, [r3, #0]
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	001a      	movs	r2, r3
 8013ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ed6:	781b      	ldrb	r3, [r3, #0]
 8013ed8:	009b      	lsls	r3, r3, #2
 8013eda:	18d3      	adds	r3, r2, r3
 8013edc:	183a      	adds	r2, r7, r0
 8013ede:	8812      	ldrh	r2, [r2, #0]
 8013ee0:	499d      	ldr	r1, [pc, #628]	@ (8014158 <PCD_EP_ISR_Handler+0x6e0>)
 8013ee2:	430a      	orrs	r2, r1
 8013ee4:	b292      	uxth	r2, r2
 8013ee6:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	001a      	movs	r2, r3
 8013eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ef0:	781b      	ldrb	r3, [r3, #0]
 8013ef2:	009b      	lsls	r3, r3, #2
 8013ef4:	18d3      	adds	r3, r2, r3
 8013ef6:	881b      	ldrh	r3, [r3, #0]
 8013ef8:	b29b      	uxth	r3, r3
 8013efa:	001a      	movs	r2, r3
 8013efc:	2380      	movs	r3, #128	@ 0x80
 8013efe:	01db      	lsls	r3, r3, #7
 8013f00:	4013      	ands	r3, r2
 8013f02:	d024      	beq.n	8013f4e <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	2250      	movs	r2, #80	@ 0x50
 8013f0a:	5a9b      	ldrh	r3, [r3, r2]
 8013f0c:	b29b      	uxth	r3, r3
 8013f0e:	001a      	movs	r2, r3
 8013f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f12:	781b      	ldrb	r3, [r3, #0]
 8013f14:	00db      	lsls	r3, r3, #3
 8013f16:	18d2      	adds	r2, r2, r3
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	18d3      	adds	r3, r2, r3
 8013f1e:	4a8f      	ldr	r2, [pc, #572]	@ (801415c <PCD_EP_ISR_Handler+0x6e4>)
 8013f20:	4694      	mov	ip, r2
 8013f22:	4463      	add	r3, ip
 8013f24:	881a      	ldrh	r2, [r3, #0]
 8013f26:	2450      	movs	r4, #80	@ 0x50
 8013f28:	193b      	adds	r3, r7, r4
 8013f2a:	0592      	lsls	r2, r2, #22
 8013f2c:	0d92      	lsrs	r2, r2, #22
 8013f2e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8013f30:	193b      	adds	r3, r7, r4
 8013f32:	881b      	ldrh	r3, [r3, #0]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d02e      	beq.n	8013f96 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	6818      	ldr	r0, [r3, #0]
 8013f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f3e:	6959      	ldr	r1, [r3, #20]
 8013f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f42:	891a      	ldrh	r2, [r3, #8]
 8013f44:	193b      	adds	r3, r7, r4
 8013f46:	881b      	ldrh	r3, [r3, #0]
 8013f48:	f007 f877 	bl	801b03a <USB_ReadPMA>
 8013f4c:	e023      	b.n	8013f96 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	2250      	movs	r2, #80	@ 0x50
 8013f54:	5a9b      	ldrh	r3, [r3, r2]
 8013f56:	b29b      	uxth	r3, r3
 8013f58:	001a      	movs	r2, r3
 8013f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f5c:	781b      	ldrb	r3, [r3, #0]
 8013f5e:	00db      	lsls	r3, r3, #3
 8013f60:	18d2      	adds	r2, r2, r3
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	18d3      	adds	r3, r2, r3
 8013f68:	4a79      	ldr	r2, [pc, #484]	@ (8014150 <PCD_EP_ISR_Handler+0x6d8>)
 8013f6a:	4694      	mov	ip, r2
 8013f6c:	4463      	add	r3, ip
 8013f6e:	881a      	ldrh	r2, [r3, #0]
 8013f70:	2450      	movs	r4, #80	@ 0x50
 8013f72:	193b      	adds	r3, r7, r4
 8013f74:	0592      	lsls	r2, r2, #22
 8013f76:	0d92      	lsrs	r2, r2, #22
 8013f78:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8013f7a:	193b      	adds	r3, r7, r4
 8013f7c:	881b      	ldrh	r3, [r3, #0]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d009      	beq.n	8013f96 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	6818      	ldr	r0, [r3, #0]
 8013f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f88:	6959      	ldr	r1, [r3, #20]
 8013f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f8c:	895a      	ldrh	r2, [r3, #10]
 8013f8e:	193b      	adds	r3, r7, r4
 8013f90:	881b      	ldrh	r3, [r3, #0]
 8013f92:	f007 f852 	bl	801b03a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8013f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f98:	69da      	ldr	r2, [r3, #28]
 8013f9a:	2150      	movs	r1, #80	@ 0x50
 8013f9c:	187b      	adds	r3, r7, r1
 8013f9e:	881b      	ldrh	r3, [r3, #0]
 8013fa0:	18d2      	adds	r2, r2, r3
 8013fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fa4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8013fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fa8:	695a      	ldr	r2, [r3, #20]
 8013faa:	187b      	adds	r3, r7, r1
 8013fac:	881b      	ldrh	r3, [r3, #0]
 8013fae:	18d2      	adds	r2, r2, r3
 8013fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fb2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8013fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fb6:	699b      	ldr	r3, [r3, #24]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d005      	beq.n	8013fc8 <PCD_EP_ISR_Handler+0x550>
 8013fbc:	187b      	adds	r3, r7, r1
 8013fbe:	881a      	ldrh	r2, [r3, #0]
 8013fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fc2:	691b      	ldr	r3, [r3, #16]
 8013fc4:	429a      	cmp	r2, r3
 8013fc6:	d207      	bcs.n	8013fd8 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8013fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fca:	781a      	ldrb	r2, [r3, #0]
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	0011      	movs	r1, r2
 8013fd0:	0018      	movs	r0, r3
 8013fd2:	f009 f84c 	bl	801d06e <HAL_PCD_DataOutStageCallback>
 8013fd6:	e006      	b.n	8013fe6 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013fde:	0011      	movs	r1, r2
 8013fe0:	0018      	movs	r0, r3
 8013fe2:	f005 fd6f 	bl	8019ac4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8013fe6:	244a      	movs	r4, #74	@ 0x4a
 8013fe8:	193b      	adds	r3, r7, r4
 8013fea:	881b      	ldrh	r3, [r3, #0]
 8013fec:	2280      	movs	r2, #128	@ 0x80
 8013fee:	4013      	ands	r3, r2
 8013ff0:	d100      	bne.n	8013ff4 <PCD_EP_ISR_Handler+0x57c>
 8013ff2:	e133      	b.n	801425c <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8013ff4:	204d      	movs	r0, #77	@ 0x4d
 8013ff6:	183b      	adds	r3, r7, r0
 8013ff8:	781b      	ldrb	r3, [r3, #0]
 8013ffa:	1c5a      	adds	r2, r3, #1
 8013ffc:	0013      	movs	r3, r2
 8013ffe:	009b      	lsls	r3, r3, #2
 8014000:	189b      	adds	r3, r3, r2
 8014002:	00db      	lsls	r3, r3, #3
 8014004:	687a      	ldr	r2, [r7, #4]
 8014006:	18d3      	adds	r3, r2, r3
 8014008:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	001a      	movs	r2, r3
 8014010:	183b      	adds	r3, r7, r0
 8014012:	781b      	ldrb	r3, [r3, #0]
 8014014:	009b      	lsls	r3, r3, #2
 8014016:	18d3      	adds	r3, r2, r3
 8014018:	881b      	ldrh	r3, [r3, #0]
 801401a:	b29a      	uxth	r2, r3
 801401c:	2542      	movs	r5, #66	@ 0x42
 801401e:	197b      	adds	r3, r7, r5
 8014020:	494f      	ldr	r1, [pc, #316]	@ (8014160 <PCD_EP_ISR_Handler+0x6e8>)
 8014022:	400a      	ands	r2, r1
 8014024:	801a      	strh	r2, [r3, #0]
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	001a      	movs	r2, r3
 801402c:	183b      	adds	r3, r7, r0
 801402e:	781b      	ldrb	r3, [r3, #0]
 8014030:	009b      	lsls	r3, r3, #2
 8014032:	18d3      	adds	r3, r2, r3
 8014034:	197a      	adds	r2, r7, r5
 8014036:	8812      	ldrh	r2, [r2, #0]
 8014038:	494a      	ldr	r1, [pc, #296]	@ (8014164 <PCD_EP_ISR_Handler+0x6ec>)
 801403a:	430a      	orrs	r2, r1
 801403c:	b292      	uxth	r2, r2
 801403e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8014040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014042:	78db      	ldrb	r3, [r3, #3]
 8014044:	2b01      	cmp	r3, #1
 8014046:	d000      	beq.n	801404a <PCD_EP_ISR_Handler+0x5d2>
 8014048:	e0af      	b.n	80141aa <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801404a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801404c:	2200      	movs	r2, #0
 801404e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8014050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014052:	7b1b      	ldrb	r3, [r3, #12]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d100      	bne.n	801405a <PCD_EP_ISR_Handler+0x5e2>
 8014058:	e09f      	b.n	801419a <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801405a:	193b      	adds	r3, r7, r4
 801405c:	881b      	ldrh	r3, [r3, #0]
 801405e:	2240      	movs	r2, #64	@ 0x40
 8014060:	4013      	ands	r3, r2
 8014062:	d046      	beq.n	80140f2 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014066:	785b      	ldrb	r3, [r3, #1]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d125      	bne.n	80140b8 <PCD_EP_ISR_Handler+0x640>
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	627b      	str	r3, [r7, #36]	@ 0x24
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	2250      	movs	r2, #80	@ 0x50
 8014078:	5a9b      	ldrh	r3, [r3, r2]
 801407a:	b29b      	uxth	r3, r3
 801407c:	001a      	movs	r2, r3
 801407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014080:	189b      	adds	r3, r3, r2
 8014082:	627b      	str	r3, [r7, #36]	@ 0x24
 8014084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014086:	781b      	ldrb	r3, [r3, #0]
 8014088:	00da      	lsls	r2, r3, #3
 801408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801408c:	18d3      	adds	r3, r2, r3
 801408e:	4a33      	ldr	r2, [pc, #204]	@ (801415c <PCD_EP_ISR_Handler+0x6e4>)
 8014090:	4694      	mov	ip, r2
 8014092:	4463      	add	r3, ip
 8014094:	623b      	str	r3, [r7, #32]
 8014096:	6a3b      	ldr	r3, [r7, #32]
 8014098:	881b      	ldrh	r3, [r3, #0]
 801409a:	b29b      	uxth	r3, r3
 801409c:	059b      	lsls	r3, r3, #22
 801409e:	0d9b      	lsrs	r3, r3, #22
 80140a0:	b29a      	uxth	r2, r3
 80140a2:	6a3b      	ldr	r3, [r7, #32]
 80140a4:	801a      	strh	r2, [r3, #0]
 80140a6:	6a3b      	ldr	r3, [r7, #32]
 80140a8:	881b      	ldrh	r3, [r3, #0]
 80140aa:	b29b      	uxth	r3, r3
 80140ac:	4a2d      	ldr	r2, [pc, #180]	@ (8014164 <PCD_EP_ISR_Handler+0x6ec>)
 80140ae:	4313      	orrs	r3, r2
 80140b0:	b29a      	uxth	r2, r3
 80140b2:	6a3b      	ldr	r3, [r7, #32]
 80140b4:	801a      	strh	r2, [r3, #0]
 80140b6:	e070      	b.n	801419a <PCD_EP_ISR_Handler+0x722>
 80140b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140ba:	785b      	ldrb	r3, [r3, #1]
 80140bc:	2b01      	cmp	r3, #1
 80140be:	d16c      	bne.n	801419a <PCD_EP_ISR_Handler+0x722>
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	2250      	movs	r2, #80	@ 0x50
 80140cc:	5a9b      	ldrh	r3, [r3, r2]
 80140ce:	b29b      	uxth	r3, r3
 80140d0:	001a      	movs	r2, r3
 80140d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140d4:	189b      	adds	r3, r3, r2
 80140d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80140d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140da:	781b      	ldrb	r3, [r3, #0]
 80140dc:	00da      	lsls	r2, r3, #3
 80140de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140e0:	18d3      	adds	r3, r2, r3
 80140e2:	4a1e      	ldr	r2, [pc, #120]	@ (801415c <PCD_EP_ISR_Handler+0x6e4>)
 80140e4:	4694      	mov	ip, r2
 80140e6:	4463      	add	r3, ip
 80140e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80140ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140ec:	2200      	movs	r2, #0
 80140ee:	801a      	strh	r2, [r3, #0]
 80140f0:	e053      	b.n	801419a <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80140f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140fa:	785b      	ldrb	r3, [r3, #1]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d133      	bne.n	8014168 <PCD_EP_ISR_Handler+0x6f0>
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	637b      	str	r3, [r7, #52]	@ 0x34
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	2250      	movs	r2, #80	@ 0x50
 801410c:	5a9b      	ldrh	r3, [r3, r2]
 801410e:	b29b      	uxth	r3, r3
 8014110:	001a      	movs	r2, r3
 8014112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014114:	189b      	adds	r3, r3, r2
 8014116:	637b      	str	r3, [r7, #52]	@ 0x34
 8014118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801411a:	781b      	ldrb	r3, [r3, #0]
 801411c:	00da      	lsls	r2, r3, #3
 801411e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014120:	18d3      	adds	r3, r2, r3
 8014122:	4a0b      	ldr	r2, [pc, #44]	@ (8014150 <PCD_EP_ISR_Handler+0x6d8>)
 8014124:	4694      	mov	ip, r2
 8014126:	4463      	add	r3, ip
 8014128:	633b      	str	r3, [r7, #48]	@ 0x30
 801412a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801412c:	881b      	ldrh	r3, [r3, #0]
 801412e:	b29b      	uxth	r3, r3
 8014130:	059b      	lsls	r3, r3, #22
 8014132:	0d9b      	lsrs	r3, r3, #22
 8014134:	b29a      	uxth	r2, r3
 8014136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014138:	801a      	strh	r2, [r3, #0]
 801413a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801413c:	881b      	ldrh	r3, [r3, #0]
 801413e:	b29b      	uxth	r3, r3
 8014140:	4a08      	ldr	r2, [pc, #32]	@ (8014164 <PCD_EP_ISR_Handler+0x6ec>)
 8014142:	4313      	orrs	r3, r2
 8014144:	b29a      	uxth	r2, r3
 8014146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014148:	801a      	strh	r2, [r3, #0]
 801414a:	e026      	b.n	801419a <PCD_EP_ISR_Handler+0x722>
 801414c:	00000f8f 	.word	0x00000f8f
 8014150:	00000406 	.word	0x00000406
 8014154:	ffff8f8f 	.word	0xffff8f8f
 8014158:	ffff80c0 	.word	0xffff80c0
 801415c:	00000402 	.word	0x00000402
 8014160:	ffff8f0f 	.word	0xffff8f0f
 8014164:	ffff8000 	.word	0xffff8000
 8014168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801416a:	785b      	ldrb	r3, [r3, #1]
 801416c:	2b01      	cmp	r3, #1
 801416e:	d114      	bne.n	801419a <PCD_EP_ISR_Handler+0x722>
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	2250      	movs	r2, #80	@ 0x50
 8014176:	5a9b      	ldrh	r3, [r3, r2]
 8014178:	b29b      	uxth	r3, r3
 801417a:	001a      	movs	r2, r3
 801417c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801417e:	189b      	adds	r3, r3, r2
 8014180:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014184:	781b      	ldrb	r3, [r3, #0]
 8014186:	00da      	lsls	r2, r3, #3
 8014188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801418a:	18d3      	adds	r3, r2, r3
 801418c:	4a3b      	ldr	r2, [pc, #236]	@ (801427c <PCD_EP_ISR_Handler+0x804>)
 801418e:	4694      	mov	ip, r2
 8014190:	4463      	add	r3, ip
 8014192:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014196:	2200      	movs	r2, #0
 8014198:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801419a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801419c:	781a      	ldrb	r2, [r3, #0]
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	0011      	movs	r1, r2
 80141a2:	0018      	movs	r0, r3
 80141a4:	f008 ff84 	bl	801d0b0 <HAL_PCD_DataInStageCallback>
 80141a8:	e058      	b.n	801425c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80141aa:	234a      	movs	r3, #74	@ 0x4a
 80141ac:	18fb      	adds	r3, r7, r3
 80141ae:	881a      	ldrh	r2, [r3, #0]
 80141b0:	2380      	movs	r3, #128	@ 0x80
 80141b2:	005b      	lsls	r3, r3, #1
 80141b4:	4013      	ands	r3, r2
 80141b6:	d149      	bne.n	801424c <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	2250      	movs	r2, #80	@ 0x50
 80141be:	5a9b      	ldrh	r3, [r3, r2]
 80141c0:	b29b      	uxth	r3, r3
 80141c2:	001a      	movs	r2, r3
 80141c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141c6:	781b      	ldrb	r3, [r3, #0]
 80141c8:	00db      	lsls	r3, r3, #3
 80141ca:	18d2      	adds	r2, r2, r3
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	18d3      	adds	r3, r2, r3
 80141d2:	4a2b      	ldr	r2, [pc, #172]	@ (8014280 <PCD_EP_ISR_Handler+0x808>)
 80141d4:	4694      	mov	ip, r2
 80141d6:	4463      	add	r3, ip
 80141d8:	881a      	ldrh	r2, [r3, #0]
 80141da:	2140      	movs	r1, #64	@ 0x40
 80141dc:	187b      	adds	r3, r7, r1
 80141de:	0592      	lsls	r2, r2, #22
 80141e0:	0d92      	lsrs	r2, r2, #22
 80141e2:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80141e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141e6:	699a      	ldr	r2, [r3, #24]
 80141e8:	187b      	adds	r3, r7, r1
 80141ea:	881b      	ldrh	r3, [r3, #0]
 80141ec:	429a      	cmp	r2, r3
 80141ee:	d907      	bls.n	8014200 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 80141f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141f2:	699a      	ldr	r2, [r3, #24]
 80141f4:	187b      	adds	r3, r7, r1
 80141f6:	881b      	ldrh	r3, [r3, #0]
 80141f8:	1ad2      	subs	r2, r2, r3
 80141fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80141fc:	619a      	str	r2, [r3, #24]
 80141fe:	e002      	b.n	8014206 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8014200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014202:	2200      	movs	r2, #0
 8014204:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8014206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014208:	699b      	ldr	r3, [r3, #24]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d107      	bne.n	801421e <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801420e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014210:	781a      	ldrb	r2, [r3, #0]
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	0011      	movs	r1, r2
 8014216:	0018      	movs	r0, r3
 8014218:	f008 ff4a 	bl	801d0b0 <HAL_PCD_DataInStageCallback>
 801421c:	e01e      	b.n	801425c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801421e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014220:	695a      	ldr	r2, [r3, #20]
 8014222:	2140      	movs	r1, #64	@ 0x40
 8014224:	187b      	adds	r3, r7, r1
 8014226:	881b      	ldrh	r3, [r3, #0]
 8014228:	18d2      	adds	r2, r2, r3
 801422a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801422c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801422e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014230:	69da      	ldr	r2, [r3, #28]
 8014232:	187b      	adds	r3, r7, r1
 8014234:	881b      	ldrh	r3, [r3, #0]
 8014236:	18d2      	adds	r2, r2, r3
 8014238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801423a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014242:	0011      	movs	r1, r2
 8014244:	0018      	movs	r0, r3
 8014246:	f005 fc3d 	bl	8019ac4 <USB_EPStartXfer>
 801424a:	e007      	b.n	801425c <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 801424c:	234a      	movs	r3, #74	@ 0x4a
 801424e:	18fb      	adds	r3, r7, r3
 8014250:	881a      	ldrh	r2, [r3, #0]
 8014252:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	0018      	movs	r0, r3
 8014258:	f000 f930 	bl	80144bc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	2244      	movs	r2, #68	@ 0x44
 8014262:	5a9b      	ldrh	r3, [r3, r2]
 8014264:	b29b      	uxth	r3, r3
 8014266:	b21b      	sxth	r3, r3
 8014268:	2b00      	cmp	r3, #0
 801426a:	da01      	bge.n	8014270 <PCD_EP_ISR_Handler+0x7f8>
 801426c:	f7ff fc0a 	bl	8013a84 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8014270:	2300      	movs	r3, #0
}
 8014272:	0018      	movs	r0, r3
 8014274:	46bd      	mov	sp, r7
 8014276:	b016      	add	sp, #88	@ 0x58
 8014278:	bdb0      	pop	{r4, r5, r7, pc}
 801427a:	46c0      	nop			@ (mov r8, r8)
 801427c:	00000406 	.word	0x00000406
 8014280:	00000402 	.word	0x00000402

08014284 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8014284:	b590      	push	{r4, r7, lr}
 8014286:	b089      	sub	sp, #36	@ 0x24
 8014288:	af00      	add	r7, sp, #0
 801428a:	60f8      	str	r0, [r7, #12]
 801428c:	60b9      	str	r1, [r7, #8]
 801428e:	1dbb      	adds	r3, r7, #6
 8014290:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014292:	1dbb      	adds	r3, r7, #6
 8014294:	881a      	ldrh	r2, [r3, #0]
 8014296:	2380      	movs	r3, #128	@ 0x80
 8014298:	01db      	lsls	r3, r3, #7
 801429a:	4013      	ands	r3, r2
 801429c:	d100      	bne.n	80142a0 <HAL_PCD_EP_DB_Receive+0x1c>
 801429e:	e07d      	b.n	801439c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	2250      	movs	r2, #80	@ 0x50
 80142a6:	5a9b      	ldrh	r3, [r3, r2]
 80142a8:	b29b      	uxth	r3, r3
 80142aa:	001a      	movs	r2, r3
 80142ac:	68bb      	ldr	r3, [r7, #8]
 80142ae:	781b      	ldrb	r3, [r3, #0]
 80142b0:	00db      	lsls	r3, r3, #3
 80142b2:	18d2      	adds	r2, r2, r3
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	18d3      	adds	r3, r2, r3
 80142ba:	4a7a      	ldr	r2, [pc, #488]	@ (80144a4 <HAL_PCD_EP_DB_Receive+0x220>)
 80142bc:	4694      	mov	ip, r2
 80142be:	4463      	add	r3, ip
 80142c0:	881a      	ldrh	r2, [r3, #0]
 80142c2:	211a      	movs	r1, #26
 80142c4:	187b      	adds	r3, r7, r1
 80142c6:	0592      	lsls	r2, r2, #22
 80142c8:	0d92      	lsrs	r2, r2, #22
 80142ca:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80142cc:	68bb      	ldr	r3, [r7, #8]
 80142ce:	699a      	ldr	r2, [r3, #24]
 80142d0:	187b      	adds	r3, r7, r1
 80142d2:	881b      	ldrh	r3, [r3, #0]
 80142d4:	429a      	cmp	r2, r3
 80142d6:	d307      	bcc.n	80142e8 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	699a      	ldr	r2, [r3, #24]
 80142dc:	187b      	adds	r3, r7, r1
 80142de:	881b      	ldrh	r3, [r3, #0]
 80142e0:	1ad2      	subs	r2, r2, r3
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	619a      	str	r2, [r3, #24]
 80142e6:	e002      	b.n	80142ee <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	2200      	movs	r2, #0
 80142ec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80142ee:	68bb      	ldr	r3, [r7, #8]
 80142f0:	699b      	ldr	r3, [r3, #24]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d121      	bne.n	801433a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	001a      	movs	r2, r3
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	781b      	ldrb	r3, [r3, #0]
 8014300:	009b      	lsls	r3, r3, #2
 8014302:	18d3      	adds	r3, r2, r3
 8014304:	881b      	ldrh	r3, [r3, #0]
 8014306:	b29a      	uxth	r2, r3
 8014308:	2018      	movs	r0, #24
 801430a:	183b      	adds	r3, r7, r0
 801430c:	4966      	ldr	r1, [pc, #408]	@ (80144a8 <HAL_PCD_EP_DB_Receive+0x224>)
 801430e:	400a      	ands	r2, r1
 8014310:	801a      	strh	r2, [r3, #0]
 8014312:	183b      	adds	r3, r7, r0
 8014314:	183a      	adds	r2, r7, r0
 8014316:	8812      	ldrh	r2, [r2, #0]
 8014318:	2180      	movs	r1, #128	@ 0x80
 801431a:	0189      	lsls	r1, r1, #6
 801431c:	404a      	eors	r2, r1
 801431e:	801a      	strh	r2, [r3, #0]
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	001a      	movs	r2, r3
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	781b      	ldrb	r3, [r3, #0]
 801432a:	009b      	lsls	r3, r3, #2
 801432c:	18d3      	adds	r3, r2, r3
 801432e:	183a      	adds	r2, r7, r0
 8014330:	8812      	ldrh	r2, [r2, #0]
 8014332:	495e      	ldr	r1, [pc, #376]	@ (80144ac <HAL_PCD_EP_DB_Receive+0x228>)
 8014334:	430a      	orrs	r2, r1
 8014336:	b292      	uxth	r2, r2
 8014338:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801433a:	1dbb      	adds	r3, r7, #6
 801433c:	881b      	ldrh	r3, [r3, #0]
 801433e:	2240      	movs	r2, #64	@ 0x40
 8014340:	4013      	ands	r3, r2
 8014342:	d01a      	beq.n	801437a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	001a      	movs	r2, r3
 801434a:	68bb      	ldr	r3, [r7, #8]
 801434c:	781b      	ldrb	r3, [r3, #0]
 801434e:	009b      	lsls	r3, r3, #2
 8014350:	18d3      	adds	r3, r2, r3
 8014352:	881b      	ldrh	r3, [r3, #0]
 8014354:	b29a      	uxth	r2, r3
 8014356:	2016      	movs	r0, #22
 8014358:	183b      	adds	r3, r7, r0
 801435a:	4955      	ldr	r1, [pc, #340]	@ (80144b0 <HAL_PCD_EP_DB_Receive+0x22c>)
 801435c:	400a      	ands	r2, r1
 801435e:	801a      	strh	r2, [r3, #0]
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	001a      	movs	r2, r3
 8014366:	68bb      	ldr	r3, [r7, #8]
 8014368:	781b      	ldrb	r3, [r3, #0]
 801436a:	009b      	lsls	r3, r3, #2
 801436c:	18d3      	adds	r3, r2, r3
 801436e:	183a      	adds	r2, r7, r0
 8014370:	8812      	ldrh	r2, [r2, #0]
 8014372:	4950      	ldr	r1, [pc, #320]	@ (80144b4 <HAL_PCD_EP_DB_Receive+0x230>)
 8014374:	430a      	orrs	r2, r1
 8014376:	b292      	uxth	r2, r2
 8014378:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801437a:	241a      	movs	r4, #26
 801437c:	193b      	adds	r3, r7, r4
 801437e:	881b      	ldrh	r3, [r3, #0]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d100      	bne.n	8014386 <HAL_PCD_EP_DB_Receive+0x102>
 8014384:	e086      	b.n	8014494 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	6818      	ldr	r0, [r3, #0]
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	6959      	ldr	r1, [r3, #20]
 801438e:	68bb      	ldr	r3, [r7, #8]
 8014390:	891a      	ldrh	r2, [r3, #8]
 8014392:	193b      	adds	r3, r7, r4
 8014394:	881b      	ldrh	r3, [r3, #0]
 8014396:	f006 fe50 	bl	801b03a <USB_ReadPMA>
 801439a:	e07b      	b.n	8014494 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	2250      	movs	r2, #80	@ 0x50
 80143a2:	5a9b      	ldrh	r3, [r3, r2]
 80143a4:	b29b      	uxth	r3, r3
 80143a6:	001a      	movs	r2, r3
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	781b      	ldrb	r3, [r3, #0]
 80143ac:	00db      	lsls	r3, r3, #3
 80143ae:	18d2      	adds	r2, r2, r3
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	18d3      	adds	r3, r2, r3
 80143b6:	4a40      	ldr	r2, [pc, #256]	@ (80144b8 <HAL_PCD_EP_DB_Receive+0x234>)
 80143b8:	4694      	mov	ip, r2
 80143ba:	4463      	add	r3, ip
 80143bc:	881a      	ldrh	r2, [r3, #0]
 80143be:	211a      	movs	r1, #26
 80143c0:	187b      	adds	r3, r7, r1
 80143c2:	0592      	lsls	r2, r2, #22
 80143c4:	0d92      	lsrs	r2, r2, #22
 80143c6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	699a      	ldr	r2, [r3, #24]
 80143cc:	187b      	adds	r3, r7, r1
 80143ce:	881b      	ldrh	r3, [r3, #0]
 80143d0:	429a      	cmp	r2, r3
 80143d2:	d307      	bcc.n	80143e4 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	699a      	ldr	r2, [r3, #24]
 80143d8:	187b      	adds	r3, r7, r1
 80143da:	881b      	ldrh	r3, [r3, #0]
 80143dc:	1ad2      	subs	r2, r2, r3
 80143de:	68bb      	ldr	r3, [r7, #8]
 80143e0:	619a      	str	r2, [r3, #24]
 80143e2:	e002      	b.n	80143ea <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80143e4:	68bb      	ldr	r3, [r7, #8]
 80143e6:	2200      	movs	r2, #0
 80143e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	699b      	ldr	r3, [r3, #24]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d121      	bne.n	8014436 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	001a      	movs	r2, r3
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	781b      	ldrb	r3, [r3, #0]
 80143fc:	009b      	lsls	r3, r3, #2
 80143fe:	18d3      	adds	r3, r2, r3
 8014400:	881b      	ldrh	r3, [r3, #0]
 8014402:	b29a      	uxth	r2, r3
 8014404:	201e      	movs	r0, #30
 8014406:	183b      	adds	r3, r7, r0
 8014408:	4927      	ldr	r1, [pc, #156]	@ (80144a8 <HAL_PCD_EP_DB_Receive+0x224>)
 801440a:	400a      	ands	r2, r1
 801440c:	801a      	strh	r2, [r3, #0]
 801440e:	183b      	adds	r3, r7, r0
 8014410:	183a      	adds	r2, r7, r0
 8014412:	8812      	ldrh	r2, [r2, #0]
 8014414:	2180      	movs	r1, #128	@ 0x80
 8014416:	0189      	lsls	r1, r1, #6
 8014418:	404a      	eors	r2, r1
 801441a:	801a      	strh	r2, [r3, #0]
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	001a      	movs	r2, r3
 8014422:	68bb      	ldr	r3, [r7, #8]
 8014424:	781b      	ldrb	r3, [r3, #0]
 8014426:	009b      	lsls	r3, r3, #2
 8014428:	18d3      	adds	r3, r2, r3
 801442a:	183a      	adds	r2, r7, r0
 801442c:	8812      	ldrh	r2, [r2, #0]
 801442e:	491f      	ldr	r1, [pc, #124]	@ (80144ac <HAL_PCD_EP_DB_Receive+0x228>)
 8014430:	430a      	orrs	r2, r1
 8014432:	b292      	uxth	r2, r2
 8014434:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8014436:	1dbb      	adds	r3, r7, #6
 8014438:	881b      	ldrh	r3, [r3, #0]
 801443a:	2240      	movs	r2, #64	@ 0x40
 801443c:	4013      	ands	r3, r2
 801443e:	d11a      	bne.n	8014476 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	001a      	movs	r2, r3
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	781b      	ldrb	r3, [r3, #0]
 801444a:	009b      	lsls	r3, r3, #2
 801444c:	18d3      	adds	r3, r2, r3
 801444e:	881b      	ldrh	r3, [r3, #0]
 8014450:	b29a      	uxth	r2, r3
 8014452:	201c      	movs	r0, #28
 8014454:	183b      	adds	r3, r7, r0
 8014456:	4916      	ldr	r1, [pc, #88]	@ (80144b0 <HAL_PCD_EP_DB_Receive+0x22c>)
 8014458:	400a      	ands	r2, r1
 801445a:	801a      	strh	r2, [r3, #0]
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	001a      	movs	r2, r3
 8014462:	68bb      	ldr	r3, [r7, #8]
 8014464:	781b      	ldrb	r3, [r3, #0]
 8014466:	009b      	lsls	r3, r3, #2
 8014468:	18d3      	adds	r3, r2, r3
 801446a:	183a      	adds	r2, r7, r0
 801446c:	8812      	ldrh	r2, [r2, #0]
 801446e:	4911      	ldr	r1, [pc, #68]	@ (80144b4 <HAL_PCD_EP_DB_Receive+0x230>)
 8014470:	430a      	orrs	r2, r1
 8014472:	b292      	uxth	r2, r2
 8014474:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8014476:	241a      	movs	r4, #26
 8014478:	193b      	adds	r3, r7, r4
 801447a:	881b      	ldrh	r3, [r3, #0]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d009      	beq.n	8014494 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	6818      	ldr	r0, [r3, #0]
 8014484:	68bb      	ldr	r3, [r7, #8]
 8014486:	6959      	ldr	r1, [r3, #20]
 8014488:	68bb      	ldr	r3, [r7, #8]
 801448a:	895a      	ldrh	r2, [r3, #10]
 801448c:	193b      	adds	r3, r7, r4
 801448e:	881b      	ldrh	r3, [r3, #0]
 8014490:	f006 fdd3 	bl	801b03a <USB_ReadPMA>
    }
  }

  return count;
 8014494:	231a      	movs	r3, #26
 8014496:	18fb      	adds	r3, r7, r3
 8014498:	881b      	ldrh	r3, [r3, #0]
}
 801449a:	0018      	movs	r0, r3
 801449c:	46bd      	mov	sp, r7
 801449e:	b009      	add	sp, #36	@ 0x24
 80144a0:	bd90      	pop	{r4, r7, pc}
 80144a2:	46c0      	nop			@ (mov r8, r8)
 80144a4:	00000402 	.word	0x00000402
 80144a8:	ffffbf8f 	.word	0xffffbf8f
 80144ac:	ffff8080 	.word	0xffff8080
 80144b0:	ffff8f8f 	.word	0xffff8f8f
 80144b4:	ffff80c0 	.word	0xffff80c0
 80144b8:	00000406 	.word	0x00000406

080144bc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80144bc:	b580      	push	{r7, lr}
 80144be:	b0a4      	sub	sp, #144	@ 0x90
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	60f8      	str	r0, [r7, #12]
 80144c4:	60b9      	str	r1, [r7, #8]
 80144c6:	1dbb      	adds	r3, r7, #6
 80144c8:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80144ca:	1dbb      	adds	r3, r7, #6
 80144cc:	881b      	ldrh	r3, [r3, #0]
 80144ce:	2240      	movs	r2, #64	@ 0x40
 80144d0:	4013      	ands	r3, r2
 80144d2:	d100      	bne.n	80144d6 <HAL_PCD_EP_DB_Transmit+0x1a>
 80144d4:	e1e4      	b.n	80148a0 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	2250      	movs	r2, #80	@ 0x50
 80144dc:	5a9b      	ldrh	r3, [r3, r2]
 80144de:	b29b      	uxth	r3, r3
 80144e0:	001a      	movs	r2, r3
 80144e2:	68bb      	ldr	r3, [r7, #8]
 80144e4:	781b      	ldrb	r3, [r3, #0]
 80144e6:	00db      	lsls	r3, r3, #3
 80144e8:	18d2      	adds	r2, r2, r3
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	18d3      	adds	r3, r2, r3
 80144f0:	4ad0      	ldr	r2, [pc, #832]	@ (8014834 <HAL_PCD_EP_DB_Transmit+0x378>)
 80144f2:	4694      	mov	ip, r2
 80144f4:	4463      	add	r3, ip
 80144f6:	881a      	ldrh	r2, [r3, #0]
 80144f8:	2186      	movs	r1, #134	@ 0x86
 80144fa:	187b      	adds	r3, r7, r1
 80144fc:	0592      	lsls	r2, r2, #22
 80144fe:	0d92      	lsrs	r2, r2, #22
 8014500:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	699a      	ldr	r2, [r3, #24]
 8014506:	187b      	adds	r3, r7, r1
 8014508:	881b      	ldrh	r3, [r3, #0]
 801450a:	429a      	cmp	r2, r3
 801450c:	d907      	bls.n	801451e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	699a      	ldr	r2, [r3, #24]
 8014512:	187b      	adds	r3, r7, r1
 8014514:	881b      	ldrh	r3, [r3, #0]
 8014516:	1ad2      	subs	r2, r2, r3
 8014518:	68bb      	ldr	r3, [r7, #8]
 801451a:	619a      	str	r2, [r3, #24]
 801451c:	e002      	b.n	8014524 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	2200      	movs	r2, #0
 8014522:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8014524:	68bb      	ldr	r3, [r7, #8]
 8014526:	699b      	ldr	r3, [r3, #24]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d000      	beq.n	801452e <HAL_PCD_EP_DB_Transmit+0x72>
 801452c:	e0b5      	b.n	801469a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	785b      	ldrb	r3, [r3, #1]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d125      	bne.n	8014582 <HAL_PCD_EP_DB_Transmit+0xc6>
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	2250      	movs	r2, #80	@ 0x50
 8014542:	5a9b      	ldrh	r3, [r3, r2]
 8014544:	b29b      	uxth	r3, r3
 8014546:	001a      	movs	r2, r3
 8014548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801454a:	189b      	adds	r3, r3, r2
 801454c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801454e:	68bb      	ldr	r3, [r7, #8]
 8014550:	781b      	ldrb	r3, [r3, #0]
 8014552:	00da      	lsls	r2, r3, #3
 8014554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014556:	18d3      	adds	r3, r2, r3
 8014558:	4ab6      	ldr	r2, [pc, #728]	@ (8014834 <HAL_PCD_EP_DB_Transmit+0x378>)
 801455a:	4694      	mov	ip, r2
 801455c:	4463      	add	r3, ip
 801455e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014562:	881b      	ldrh	r3, [r3, #0]
 8014564:	b29b      	uxth	r3, r3
 8014566:	059b      	lsls	r3, r3, #22
 8014568:	0d9b      	lsrs	r3, r3, #22
 801456a:	b29a      	uxth	r2, r3
 801456c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801456e:	801a      	strh	r2, [r3, #0]
 8014570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014572:	881b      	ldrh	r3, [r3, #0]
 8014574:	b29b      	uxth	r3, r3
 8014576:	4ab0      	ldr	r2, [pc, #704]	@ (8014838 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8014578:	4313      	orrs	r3, r2
 801457a:	b29a      	uxth	r2, r3
 801457c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801457e:	801a      	strh	r2, [r3, #0]
 8014580:	e01b      	b.n	80145ba <HAL_PCD_EP_DB_Transmit+0xfe>
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	785b      	ldrb	r3, [r3, #1]
 8014586:	2b01      	cmp	r3, #1
 8014588:	d117      	bne.n	80145ba <HAL_PCD_EP_DB_Transmit+0xfe>
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	637b      	str	r3, [r7, #52]	@ 0x34
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	2250      	movs	r2, #80	@ 0x50
 8014596:	5a9b      	ldrh	r3, [r3, r2]
 8014598:	b29b      	uxth	r3, r3
 801459a:	001a      	movs	r2, r3
 801459c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801459e:	189b      	adds	r3, r3, r2
 80145a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	781b      	ldrb	r3, [r3, #0]
 80145a6:	00da      	lsls	r2, r3, #3
 80145a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145aa:	18d3      	adds	r3, r2, r3
 80145ac:	4aa1      	ldr	r2, [pc, #644]	@ (8014834 <HAL_PCD_EP_DB_Transmit+0x378>)
 80145ae:	4694      	mov	ip, r2
 80145b0:	4463      	add	r3, ip
 80145b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80145b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145b6:	2200      	movs	r2, #0
 80145b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	627b      	str	r3, [r7, #36]	@ 0x24
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	785b      	ldrb	r3, [r3, #1]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d125      	bne.n	8014614 <HAL_PCD_EP_DB_Transmit+0x158>
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	61fb      	str	r3, [r7, #28]
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	2250      	movs	r2, #80	@ 0x50
 80145d4:	5a9b      	ldrh	r3, [r3, r2]
 80145d6:	b29b      	uxth	r3, r3
 80145d8:	001a      	movs	r2, r3
 80145da:	69fb      	ldr	r3, [r7, #28]
 80145dc:	189b      	adds	r3, r3, r2
 80145de:	61fb      	str	r3, [r7, #28]
 80145e0:	68bb      	ldr	r3, [r7, #8]
 80145e2:	781b      	ldrb	r3, [r3, #0]
 80145e4:	00da      	lsls	r2, r3, #3
 80145e6:	69fb      	ldr	r3, [r7, #28]
 80145e8:	18d3      	adds	r3, r2, r3
 80145ea:	4a94      	ldr	r2, [pc, #592]	@ (801483c <HAL_PCD_EP_DB_Transmit+0x380>)
 80145ec:	4694      	mov	ip, r2
 80145ee:	4463      	add	r3, ip
 80145f0:	61bb      	str	r3, [r7, #24]
 80145f2:	69bb      	ldr	r3, [r7, #24]
 80145f4:	881b      	ldrh	r3, [r3, #0]
 80145f6:	b29b      	uxth	r3, r3
 80145f8:	059b      	lsls	r3, r3, #22
 80145fa:	0d9b      	lsrs	r3, r3, #22
 80145fc:	b29a      	uxth	r2, r3
 80145fe:	69bb      	ldr	r3, [r7, #24]
 8014600:	801a      	strh	r2, [r3, #0]
 8014602:	69bb      	ldr	r3, [r7, #24]
 8014604:	881b      	ldrh	r3, [r3, #0]
 8014606:	b29b      	uxth	r3, r3
 8014608:	4a8b      	ldr	r2, [pc, #556]	@ (8014838 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801460a:	4313      	orrs	r3, r2
 801460c:	b29a      	uxth	r2, r3
 801460e:	69bb      	ldr	r3, [r7, #24]
 8014610:	801a      	strh	r2, [r3, #0]
 8014612:	e018      	b.n	8014646 <HAL_PCD_EP_DB_Transmit+0x18a>
 8014614:	68bb      	ldr	r3, [r7, #8]
 8014616:	785b      	ldrb	r3, [r3, #1]
 8014618:	2b01      	cmp	r3, #1
 801461a:	d114      	bne.n	8014646 <HAL_PCD_EP_DB_Transmit+0x18a>
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	2250      	movs	r2, #80	@ 0x50
 8014622:	5a9b      	ldrh	r3, [r3, r2]
 8014624:	b29b      	uxth	r3, r3
 8014626:	001a      	movs	r2, r3
 8014628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801462a:	189b      	adds	r3, r3, r2
 801462c:	627b      	str	r3, [r7, #36]	@ 0x24
 801462e:	68bb      	ldr	r3, [r7, #8]
 8014630:	781b      	ldrb	r3, [r3, #0]
 8014632:	00da      	lsls	r2, r3, #3
 8014634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014636:	18d3      	adds	r3, r2, r3
 8014638:	4a80      	ldr	r2, [pc, #512]	@ (801483c <HAL_PCD_EP_DB_Transmit+0x380>)
 801463a:	4694      	mov	ip, r2
 801463c:	4463      	add	r3, ip
 801463e:	623b      	str	r3, [r7, #32]
 8014640:	6a3b      	ldr	r3, [r7, #32]
 8014642:	2200      	movs	r2, #0
 8014644:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014646:	68bb      	ldr	r3, [r7, #8]
 8014648:	781a      	ldrb	r2, [r3, #0]
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	0011      	movs	r1, r2
 801464e:	0018      	movs	r0, r3
 8014650:	f008 fd2e 	bl	801d0b0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014654:	1dbb      	adds	r3, r7, #6
 8014656:	881a      	ldrh	r2, [r3, #0]
 8014658:	2380      	movs	r3, #128	@ 0x80
 801465a:	01db      	lsls	r3, r3, #7
 801465c:	4013      	ands	r3, r2
 801465e:	d100      	bne.n	8014662 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8014660:	e309      	b.n	8014c76 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	001a      	movs	r2, r3
 8014668:	68bb      	ldr	r3, [r7, #8]
 801466a:	781b      	ldrb	r3, [r3, #0]
 801466c:	009b      	lsls	r3, r3, #2
 801466e:	18d3      	adds	r3, r2, r3
 8014670:	881b      	ldrh	r3, [r3, #0]
 8014672:	b29a      	uxth	r2, r3
 8014674:	2016      	movs	r0, #22
 8014676:	183b      	adds	r3, r7, r0
 8014678:	4971      	ldr	r1, [pc, #452]	@ (8014840 <HAL_PCD_EP_DB_Transmit+0x384>)
 801467a:	400a      	ands	r2, r1
 801467c:	801a      	strh	r2, [r3, #0]
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	001a      	movs	r2, r3
 8014684:	68bb      	ldr	r3, [r7, #8]
 8014686:	781b      	ldrb	r3, [r3, #0]
 8014688:	009b      	lsls	r3, r3, #2
 801468a:	18d3      	adds	r3, r2, r3
 801468c:	183a      	adds	r2, r7, r0
 801468e:	8812      	ldrh	r2, [r2, #0]
 8014690:	496c      	ldr	r1, [pc, #432]	@ (8014844 <HAL_PCD_EP_DB_Transmit+0x388>)
 8014692:	430a      	orrs	r2, r1
 8014694:	b292      	uxth	r2, r2
 8014696:	801a      	strh	r2, [r3, #0]
 8014698:	e2ed      	b.n	8014c76 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801469a:	1dbb      	adds	r3, r7, #6
 801469c:	881a      	ldrh	r2, [r3, #0]
 801469e:	2380      	movs	r3, #128	@ 0x80
 80146a0:	01db      	lsls	r3, r3, #7
 80146a2:	4013      	ands	r3, r2
 80146a4:	d01a      	beq.n	80146dc <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	001a      	movs	r2, r3
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	781b      	ldrb	r3, [r3, #0]
 80146b0:	009b      	lsls	r3, r3, #2
 80146b2:	18d3      	adds	r3, r2, r3
 80146b4:	881b      	ldrh	r3, [r3, #0]
 80146b6:	b29a      	uxth	r2, r3
 80146b8:	208a      	movs	r0, #138	@ 0x8a
 80146ba:	183b      	adds	r3, r7, r0
 80146bc:	4960      	ldr	r1, [pc, #384]	@ (8014840 <HAL_PCD_EP_DB_Transmit+0x384>)
 80146be:	400a      	ands	r2, r1
 80146c0:	801a      	strh	r2, [r3, #0]
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	001a      	movs	r2, r3
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	781b      	ldrb	r3, [r3, #0]
 80146cc:	009b      	lsls	r3, r3, #2
 80146ce:	18d3      	adds	r3, r2, r3
 80146d0:	183a      	adds	r2, r7, r0
 80146d2:	8812      	ldrh	r2, [r2, #0]
 80146d4:	495b      	ldr	r1, [pc, #364]	@ (8014844 <HAL_PCD_EP_DB_Transmit+0x388>)
 80146d6:	430a      	orrs	r2, r1
 80146d8:	b292      	uxth	r2, r2
 80146da:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80146dc:	68bb      	ldr	r3, [r7, #8]
 80146de:	2224      	movs	r2, #36	@ 0x24
 80146e0:	5c9b      	ldrb	r3, [r3, r2]
 80146e2:	2b01      	cmp	r3, #1
 80146e4:	d000      	beq.n	80146e8 <HAL_PCD_EP_DB_Transmit+0x22c>
 80146e6:	e2c6      	b.n	8014c76 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80146e8:	68bb      	ldr	r3, [r7, #8]
 80146ea:	695a      	ldr	r2, [r3, #20]
 80146ec:	2186      	movs	r1, #134	@ 0x86
 80146ee:	187b      	adds	r3, r7, r1
 80146f0:	881b      	ldrh	r3, [r3, #0]
 80146f2:	18d2      	adds	r2, r2, r3
 80146f4:	68bb      	ldr	r3, [r7, #8]
 80146f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	69da      	ldr	r2, [r3, #28]
 80146fc:	187b      	adds	r3, r7, r1
 80146fe:	881b      	ldrh	r3, [r3, #0]
 8014700:	18d2      	adds	r2, r2, r3
 8014702:	68bb      	ldr	r3, [r7, #8]
 8014704:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014706:	68bb      	ldr	r3, [r7, #8]
 8014708:	6a1a      	ldr	r2, [r3, #32]
 801470a:	68bb      	ldr	r3, [r7, #8]
 801470c:	691b      	ldr	r3, [r3, #16]
 801470e:	429a      	cmp	r2, r3
 8014710:	d30c      	bcc.n	801472c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	691b      	ldr	r3, [r3, #16]
 8014716:	218c      	movs	r1, #140	@ 0x8c
 8014718:	187a      	adds	r2, r7, r1
 801471a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 801471c:	68bb      	ldr	r3, [r7, #8]
 801471e:	6a1a      	ldr	r2, [r3, #32]
 8014720:	187b      	adds	r3, r7, r1
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	1ad2      	subs	r2, r2, r3
 8014726:	68bb      	ldr	r3, [r7, #8]
 8014728:	621a      	str	r2, [r3, #32]
 801472a:	e01a      	b.n	8014762 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 801472c:	68bb      	ldr	r3, [r7, #8]
 801472e:	6a1b      	ldr	r3, [r3, #32]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d10a      	bne.n	801474a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8014734:	2386      	movs	r3, #134	@ 0x86
 8014736:	18fb      	adds	r3, r7, r3
 8014738:	881b      	ldrh	r3, [r3, #0]
 801473a:	228c      	movs	r2, #140	@ 0x8c
 801473c:	18ba      	adds	r2, r7, r2
 801473e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8014740:	68bb      	ldr	r3, [r7, #8]
 8014742:	2224      	movs	r2, #36	@ 0x24
 8014744:	2100      	movs	r1, #0
 8014746:	5499      	strb	r1, [r3, r2]
 8014748:	e00b      	b.n	8014762 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	2224      	movs	r2, #36	@ 0x24
 801474e:	2100      	movs	r1, #0
 8014750:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8014752:	68bb      	ldr	r3, [r7, #8]
 8014754:	6a1b      	ldr	r3, [r3, #32]
 8014756:	228c      	movs	r2, #140	@ 0x8c
 8014758:	18ba      	adds	r2, r7, r2
 801475a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801475c:	68bb      	ldr	r3, [r7, #8]
 801475e:	2200      	movs	r2, #0
 8014760:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014762:	68bb      	ldr	r3, [r7, #8]
 8014764:	785b      	ldrb	r3, [r3, #1]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d000      	beq.n	801476c <HAL_PCD_EP_DB_Transmit+0x2b0>
 801476a:	e06d      	b.n	8014848 <HAL_PCD_EP_DB_Transmit+0x38c>
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	2250      	movs	r2, #80	@ 0x50
 8014778:	5a9b      	ldrh	r3, [r3, r2]
 801477a:	b29b      	uxth	r3, r3
 801477c:	001a      	movs	r2, r3
 801477e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014780:	189b      	adds	r3, r3, r2
 8014782:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014784:	68bb      	ldr	r3, [r7, #8]
 8014786:	781b      	ldrb	r3, [r3, #0]
 8014788:	00da      	lsls	r2, r3, #3
 801478a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801478c:	18d3      	adds	r3, r2, r3
 801478e:	4a29      	ldr	r2, [pc, #164]	@ (8014834 <HAL_PCD_EP_DB_Transmit+0x378>)
 8014790:	4694      	mov	ip, r2
 8014792:	4463      	add	r3, ip
 8014794:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014798:	881b      	ldrh	r3, [r3, #0]
 801479a:	b29b      	uxth	r3, r3
 801479c:	059b      	lsls	r3, r3, #22
 801479e:	0d9b      	lsrs	r3, r3, #22
 80147a0:	b29a      	uxth	r2, r3
 80147a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147a4:	801a      	strh	r2, [r3, #0]
 80147a6:	228c      	movs	r2, #140	@ 0x8c
 80147a8:	18bb      	adds	r3, r7, r2
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80147ae:	d91a      	bls.n	80147e6 <HAL_PCD_EP_DB_Transmit+0x32a>
 80147b0:	18bb      	adds	r3, r7, r2
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	095b      	lsrs	r3, r3, #5
 80147b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80147b8:	18bb      	adds	r3, r7, r2
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	221f      	movs	r2, #31
 80147be:	4013      	ands	r3, r2
 80147c0:	d102      	bne.n	80147c8 <HAL_PCD_EP_DB_Transmit+0x30c>
 80147c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80147c4:	3b01      	subs	r3, #1
 80147c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80147c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147ca:	881b      	ldrh	r3, [r3, #0]
 80147cc:	b29a      	uxth	r2, r3
 80147ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80147d0:	b29b      	uxth	r3, r3
 80147d2:	029b      	lsls	r3, r3, #10
 80147d4:	b29b      	uxth	r3, r3
 80147d6:	4313      	orrs	r3, r2
 80147d8:	b29b      	uxth	r3, r3
 80147da:	4a17      	ldr	r2, [pc, #92]	@ (8014838 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80147dc:	4313      	orrs	r3, r2
 80147de:	b29a      	uxth	r2, r3
 80147e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147e2:	801a      	strh	r2, [r3, #0]
 80147e4:	e04f      	b.n	8014886 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80147e6:	238c      	movs	r3, #140	@ 0x8c
 80147e8:	18fb      	adds	r3, r7, r3
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d108      	bne.n	8014802 <HAL_PCD_EP_DB_Transmit+0x346>
 80147f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147f2:	881b      	ldrh	r3, [r3, #0]
 80147f4:	b29b      	uxth	r3, r3
 80147f6:	4a10      	ldr	r2, [pc, #64]	@ (8014838 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80147f8:	4313      	orrs	r3, r2
 80147fa:	b29a      	uxth	r2, r3
 80147fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147fe:	801a      	strh	r2, [r3, #0]
 8014800:	e041      	b.n	8014886 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014802:	228c      	movs	r2, #140	@ 0x8c
 8014804:	18bb      	adds	r3, r7, r2
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	085b      	lsrs	r3, r3, #1
 801480a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801480c:	18bb      	adds	r3, r7, r2
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	2201      	movs	r2, #1
 8014812:	4013      	ands	r3, r2
 8014814:	d002      	beq.n	801481c <HAL_PCD_EP_DB_Transmit+0x360>
 8014816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014818:	3301      	adds	r3, #1
 801481a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801481c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801481e:	881b      	ldrh	r3, [r3, #0]
 8014820:	b29a      	uxth	r2, r3
 8014822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014824:	b29b      	uxth	r3, r3
 8014826:	029b      	lsls	r3, r3, #10
 8014828:	b29b      	uxth	r3, r3
 801482a:	4313      	orrs	r3, r2
 801482c:	b29a      	uxth	r2, r3
 801482e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014830:	801a      	strh	r2, [r3, #0]
 8014832:	e028      	b.n	8014886 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014834:	00000402 	.word	0x00000402
 8014838:	ffff8000 	.word	0xffff8000
 801483c:	00000406 	.word	0x00000406
 8014840:	ffff8f8f 	.word	0xffff8f8f
 8014844:	ffffc080 	.word	0xffffc080
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	785b      	ldrb	r3, [r3, #1]
 801484c:	2b01      	cmp	r3, #1
 801484e:	d11a      	bne.n	8014886 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	647b      	str	r3, [r7, #68]	@ 0x44
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	2250      	movs	r2, #80	@ 0x50
 801485c:	5a9b      	ldrh	r3, [r3, r2]
 801485e:	b29b      	uxth	r3, r3
 8014860:	001a      	movs	r2, r3
 8014862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014864:	189b      	adds	r3, r3, r2
 8014866:	647b      	str	r3, [r7, #68]	@ 0x44
 8014868:	68bb      	ldr	r3, [r7, #8]
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	00da      	lsls	r2, r3, #3
 801486e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014870:	18d3      	adds	r3, r2, r3
 8014872:	4adb      	ldr	r2, [pc, #876]	@ (8014be0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014874:	4694      	mov	ip, r2
 8014876:	4463      	add	r3, ip
 8014878:	643b      	str	r3, [r7, #64]	@ 0x40
 801487a:	238c      	movs	r3, #140	@ 0x8c
 801487c:	18fb      	adds	r3, r7, r3
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	b29a      	uxth	r2, r3
 8014882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014884:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	6818      	ldr	r0, [r3, #0]
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	6959      	ldr	r1, [r3, #20]
 801488e:	68bb      	ldr	r3, [r7, #8]
 8014890:	891a      	ldrh	r2, [r3, #8]
 8014892:	238c      	movs	r3, #140	@ 0x8c
 8014894:	18fb      	adds	r3, r7, r3
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	b29b      	uxth	r3, r3
 801489a:	f006 fb85 	bl	801afa8 <USB_WritePMA>
 801489e:	e1ea      	b.n	8014c76 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	2250      	movs	r2, #80	@ 0x50
 80148a6:	5a9b      	ldrh	r3, [r3, r2]
 80148a8:	b29b      	uxth	r3, r3
 80148aa:	001a      	movs	r2, r3
 80148ac:	68bb      	ldr	r3, [r7, #8]
 80148ae:	781b      	ldrb	r3, [r3, #0]
 80148b0:	00db      	lsls	r3, r3, #3
 80148b2:	18d2      	adds	r2, r2, r3
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	18d3      	adds	r3, r2, r3
 80148ba:	4aca      	ldr	r2, [pc, #808]	@ (8014be4 <HAL_PCD_EP_DB_Transmit+0x728>)
 80148bc:	4694      	mov	ip, r2
 80148be:	4463      	add	r3, ip
 80148c0:	881a      	ldrh	r2, [r3, #0]
 80148c2:	2186      	movs	r1, #134	@ 0x86
 80148c4:	187b      	adds	r3, r7, r1
 80148c6:	0592      	lsls	r2, r2, #22
 80148c8:	0d92      	lsrs	r2, r2, #22
 80148ca:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80148cc:	68bb      	ldr	r3, [r7, #8]
 80148ce:	699a      	ldr	r2, [r3, #24]
 80148d0:	187b      	adds	r3, r7, r1
 80148d2:	881b      	ldrh	r3, [r3, #0]
 80148d4:	429a      	cmp	r2, r3
 80148d6:	d307      	bcc.n	80148e8 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	699a      	ldr	r2, [r3, #24]
 80148dc:	187b      	adds	r3, r7, r1
 80148de:	881b      	ldrh	r3, [r3, #0]
 80148e0:	1ad2      	subs	r2, r2, r3
 80148e2:	68bb      	ldr	r3, [r7, #8]
 80148e4:	619a      	str	r2, [r3, #24]
 80148e6:	e002      	b.n	80148ee <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80148e8:	68bb      	ldr	r3, [r7, #8]
 80148ea:	2200      	movs	r2, #0
 80148ec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80148ee:	68bb      	ldr	r3, [r7, #8]
 80148f0:	699b      	ldr	r3, [r3, #24]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d000      	beq.n	80148f8 <HAL_PCD_EP_DB_Transmit+0x43c>
 80148f6:	e0bb      	b.n	8014a70 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80148f8:	68bb      	ldr	r3, [r7, #8]
 80148fa:	785b      	ldrb	r3, [r3, #1]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d125      	bne.n	801494c <HAL_PCD_EP_DB_Transmit+0x490>
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	2250      	movs	r2, #80	@ 0x50
 801490c:	5a9b      	ldrh	r3, [r3, r2]
 801490e:	b29b      	uxth	r3, r3
 8014910:	001a      	movs	r2, r3
 8014912:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014914:	189b      	adds	r3, r3, r2
 8014916:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014918:	68bb      	ldr	r3, [r7, #8]
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	00da      	lsls	r2, r3, #3
 801491e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014920:	18d3      	adds	r3, r2, r3
 8014922:	4aaf      	ldr	r2, [pc, #700]	@ (8014be0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014924:	4694      	mov	ip, r2
 8014926:	4463      	add	r3, ip
 8014928:	67bb      	str	r3, [r7, #120]	@ 0x78
 801492a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801492c:	881b      	ldrh	r3, [r3, #0]
 801492e:	b29b      	uxth	r3, r3
 8014930:	059b      	lsls	r3, r3, #22
 8014932:	0d9b      	lsrs	r3, r3, #22
 8014934:	b29a      	uxth	r2, r3
 8014936:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014938:	801a      	strh	r2, [r3, #0]
 801493a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801493c:	881b      	ldrh	r3, [r3, #0]
 801493e:	b29b      	uxth	r3, r3
 8014940:	4aa9      	ldr	r2, [pc, #676]	@ (8014be8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014942:	4313      	orrs	r3, r2
 8014944:	b29a      	uxth	r2, r3
 8014946:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014948:	801a      	strh	r2, [r3, #0]
 801494a:	e01b      	b.n	8014984 <HAL_PCD_EP_DB_Transmit+0x4c8>
 801494c:	68bb      	ldr	r3, [r7, #8]
 801494e:	785b      	ldrb	r3, [r3, #1]
 8014950:	2b01      	cmp	r3, #1
 8014952:	d117      	bne.n	8014984 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	667b      	str	r3, [r7, #100]	@ 0x64
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	2250      	movs	r2, #80	@ 0x50
 8014960:	5a9b      	ldrh	r3, [r3, r2]
 8014962:	b29b      	uxth	r3, r3
 8014964:	001a      	movs	r2, r3
 8014966:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014968:	189b      	adds	r3, r3, r2
 801496a:	667b      	str	r3, [r7, #100]	@ 0x64
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	781b      	ldrb	r3, [r3, #0]
 8014970:	00da      	lsls	r2, r3, #3
 8014972:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014974:	18d3      	adds	r3, r2, r3
 8014976:	4a9a      	ldr	r2, [pc, #616]	@ (8014be0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8014978:	4694      	mov	ip, r2
 801497a:	4463      	add	r3, ip
 801497c:	663b      	str	r3, [r7, #96]	@ 0x60
 801497e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014980:	2200      	movs	r2, #0
 8014982:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	677b      	str	r3, [r7, #116]	@ 0x74
 801498a:	68bb      	ldr	r3, [r7, #8]
 801498c:	785b      	ldrb	r3, [r3, #1]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d12b      	bne.n	80149ea <HAL_PCD_EP_DB_Transmit+0x52e>
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	2250      	movs	r2, #80	@ 0x50
 801499e:	5a9b      	ldrh	r3, [r3, r2]
 80149a0:	b29b      	uxth	r3, r3
 80149a2:	001a      	movs	r2, r3
 80149a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80149a6:	189b      	adds	r3, r3, r2
 80149a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80149aa:	68bb      	ldr	r3, [r7, #8]
 80149ac:	781b      	ldrb	r3, [r3, #0]
 80149ae:	00da      	lsls	r2, r3, #3
 80149b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80149b2:	18d3      	adds	r3, r2, r3
 80149b4:	4a8b      	ldr	r2, [pc, #556]	@ (8014be4 <HAL_PCD_EP_DB_Transmit+0x728>)
 80149b6:	4694      	mov	ip, r2
 80149b8:	4463      	add	r3, ip
 80149ba:	2180      	movs	r1, #128	@ 0x80
 80149bc:	187a      	adds	r2, r7, r1
 80149be:	6013      	str	r3, [r2, #0]
 80149c0:	187b      	adds	r3, r7, r1
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	881b      	ldrh	r3, [r3, #0]
 80149c6:	b29b      	uxth	r3, r3
 80149c8:	059b      	lsls	r3, r3, #22
 80149ca:	0d9b      	lsrs	r3, r3, #22
 80149cc:	b29a      	uxth	r2, r3
 80149ce:	187b      	adds	r3, r7, r1
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	801a      	strh	r2, [r3, #0]
 80149d4:	187b      	adds	r3, r7, r1
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	881b      	ldrh	r3, [r3, #0]
 80149da:	b29b      	uxth	r3, r3
 80149dc:	4a82      	ldr	r2, [pc, #520]	@ (8014be8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80149de:	4313      	orrs	r3, r2
 80149e0:	b29a      	uxth	r2, r3
 80149e2:	187b      	adds	r3, r7, r1
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	801a      	strh	r2, [r3, #0]
 80149e8:	e018      	b.n	8014a1c <HAL_PCD_EP_DB_Transmit+0x560>
 80149ea:	68bb      	ldr	r3, [r7, #8]
 80149ec:	785b      	ldrb	r3, [r3, #1]
 80149ee:	2b01      	cmp	r3, #1
 80149f0:	d114      	bne.n	8014a1c <HAL_PCD_EP_DB_Transmit+0x560>
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	2250      	movs	r2, #80	@ 0x50
 80149f8:	5a9b      	ldrh	r3, [r3, r2]
 80149fa:	b29b      	uxth	r3, r3
 80149fc:	001a      	movs	r2, r3
 80149fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014a00:	189b      	adds	r3, r3, r2
 8014a02:	677b      	str	r3, [r7, #116]	@ 0x74
 8014a04:	68bb      	ldr	r3, [r7, #8]
 8014a06:	781b      	ldrb	r3, [r3, #0]
 8014a08:	00da      	lsls	r2, r3, #3
 8014a0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014a0c:	18d3      	adds	r3, r2, r3
 8014a0e:	4a75      	ldr	r2, [pc, #468]	@ (8014be4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014a10:	4694      	mov	ip, r2
 8014a12:	4463      	add	r3, ip
 8014a14:	673b      	str	r3, [r7, #112]	@ 0x70
 8014a16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014a18:	2200      	movs	r2, #0
 8014a1a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	781a      	ldrb	r2, [r3, #0]
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	0011      	movs	r1, r2
 8014a24:	0018      	movs	r0, r3
 8014a26:	f008 fb43 	bl	801d0b0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014a2a:	1dbb      	adds	r3, r7, #6
 8014a2c:	881a      	ldrh	r2, [r3, #0]
 8014a2e:	2380      	movs	r3, #128	@ 0x80
 8014a30:	01db      	lsls	r3, r3, #7
 8014a32:	4013      	ands	r3, r2
 8014a34:	d000      	beq.n	8014a38 <HAL_PCD_EP_DB_Transmit+0x57c>
 8014a36:	e11e      	b.n	8014c76 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	001a      	movs	r2, r3
 8014a3e:	68bb      	ldr	r3, [r7, #8]
 8014a40:	781b      	ldrb	r3, [r3, #0]
 8014a42:	009b      	lsls	r3, r3, #2
 8014a44:	18d3      	adds	r3, r2, r3
 8014a46:	881b      	ldrh	r3, [r3, #0]
 8014a48:	b29a      	uxth	r2, r3
 8014a4a:	2088      	movs	r0, #136	@ 0x88
 8014a4c:	183b      	adds	r3, r7, r0
 8014a4e:	4967      	ldr	r1, [pc, #412]	@ (8014bec <HAL_PCD_EP_DB_Transmit+0x730>)
 8014a50:	400a      	ands	r2, r1
 8014a52:	801a      	strh	r2, [r3, #0]
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	001a      	movs	r2, r3
 8014a5a:	68bb      	ldr	r3, [r7, #8]
 8014a5c:	781b      	ldrb	r3, [r3, #0]
 8014a5e:	009b      	lsls	r3, r3, #2
 8014a60:	18d3      	adds	r3, r2, r3
 8014a62:	183a      	adds	r2, r7, r0
 8014a64:	8812      	ldrh	r2, [r2, #0]
 8014a66:	4962      	ldr	r1, [pc, #392]	@ (8014bf0 <HAL_PCD_EP_DB_Transmit+0x734>)
 8014a68:	430a      	orrs	r2, r1
 8014a6a:	b292      	uxth	r2, r2
 8014a6c:	801a      	strh	r2, [r3, #0]
 8014a6e:	e102      	b.n	8014c76 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8014a70:	1dbb      	adds	r3, r7, #6
 8014a72:	881a      	ldrh	r2, [r3, #0]
 8014a74:	2380      	movs	r3, #128	@ 0x80
 8014a76:	01db      	lsls	r3, r3, #7
 8014a78:	4013      	ands	r3, r2
 8014a7a:	d11a      	bne.n	8014ab2 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	001a      	movs	r2, r3
 8014a82:	68bb      	ldr	r3, [r7, #8]
 8014a84:	781b      	ldrb	r3, [r3, #0]
 8014a86:	009b      	lsls	r3, r3, #2
 8014a88:	18d3      	adds	r3, r2, r3
 8014a8a:	881b      	ldrh	r3, [r3, #0]
 8014a8c:	b29a      	uxth	r2, r3
 8014a8e:	204e      	movs	r0, #78	@ 0x4e
 8014a90:	183b      	adds	r3, r7, r0
 8014a92:	4956      	ldr	r1, [pc, #344]	@ (8014bec <HAL_PCD_EP_DB_Transmit+0x730>)
 8014a94:	400a      	ands	r2, r1
 8014a96:	801a      	strh	r2, [r3, #0]
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	001a      	movs	r2, r3
 8014a9e:	68bb      	ldr	r3, [r7, #8]
 8014aa0:	781b      	ldrb	r3, [r3, #0]
 8014aa2:	009b      	lsls	r3, r3, #2
 8014aa4:	18d3      	adds	r3, r2, r3
 8014aa6:	183a      	adds	r2, r7, r0
 8014aa8:	8812      	ldrh	r2, [r2, #0]
 8014aaa:	4951      	ldr	r1, [pc, #324]	@ (8014bf0 <HAL_PCD_EP_DB_Transmit+0x734>)
 8014aac:	430a      	orrs	r2, r1
 8014aae:	b292      	uxth	r2, r2
 8014ab0:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8014ab2:	68bb      	ldr	r3, [r7, #8]
 8014ab4:	2224      	movs	r2, #36	@ 0x24
 8014ab6:	5c9b      	ldrb	r3, [r3, r2]
 8014ab8:	2b01      	cmp	r3, #1
 8014aba:	d000      	beq.n	8014abe <HAL_PCD_EP_DB_Transmit+0x602>
 8014abc:	e0db      	b.n	8014c76 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8014abe:	68bb      	ldr	r3, [r7, #8]
 8014ac0:	695a      	ldr	r2, [r3, #20]
 8014ac2:	2186      	movs	r1, #134	@ 0x86
 8014ac4:	187b      	adds	r3, r7, r1
 8014ac6:	881b      	ldrh	r3, [r3, #0]
 8014ac8:	18d2      	adds	r2, r2, r3
 8014aca:	68bb      	ldr	r3, [r7, #8]
 8014acc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014ace:	68bb      	ldr	r3, [r7, #8]
 8014ad0:	69da      	ldr	r2, [r3, #28]
 8014ad2:	187b      	adds	r3, r7, r1
 8014ad4:	881b      	ldrh	r3, [r3, #0]
 8014ad6:	18d2      	adds	r2, r2, r3
 8014ad8:	68bb      	ldr	r3, [r7, #8]
 8014ada:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014adc:	68bb      	ldr	r3, [r7, #8]
 8014ade:	6a1a      	ldr	r2, [r3, #32]
 8014ae0:	68bb      	ldr	r3, [r7, #8]
 8014ae2:	691b      	ldr	r3, [r3, #16]
 8014ae4:	429a      	cmp	r2, r3
 8014ae6:	d30c      	bcc.n	8014b02 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8014ae8:	68bb      	ldr	r3, [r7, #8]
 8014aea:	691b      	ldr	r3, [r3, #16]
 8014aec:	218c      	movs	r1, #140	@ 0x8c
 8014aee:	187a      	adds	r2, r7, r1
 8014af0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	6a1a      	ldr	r2, [r3, #32]
 8014af6:	187b      	adds	r3, r7, r1
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	1ad2      	subs	r2, r2, r3
 8014afc:	68bb      	ldr	r3, [r7, #8]
 8014afe:	621a      	str	r2, [r3, #32]
 8014b00:	e01a      	b.n	8014b38 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8014b02:	68bb      	ldr	r3, [r7, #8]
 8014b04:	6a1b      	ldr	r3, [r3, #32]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d10a      	bne.n	8014b20 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8014b0a:	2386      	movs	r3, #134	@ 0x86
 8014b0c:	18fb      	adds	r3, r7, r3
 8014b0e:	881b      	ldrh	r3, [r3, #0]
 8014b10:	228c      	movs	r2, #140	@ 0x8c
 8014b12:	18ba      	adds	r2, r7, r2
 8014b14:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8014b16:	68bb      	ldr	r3, [r7, #8]
 8014b18:	2224      	movs	r2, #36	@ 0x24
 8014b1a:	2100      	movs	r1, #0
 8014b1c:	5499      	strb	r1, [r3, r2]
 8014b1e:	e00b      	b.n	8014b38 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8014b20:	68bb      	ldr	r3, [r7, #8]
 8014b22:	6a1b      	ldr	r3, [r3, #32]
 8014b24:	228c      	movs	r2, #140	@ 0x8c
 8014b26:	18ba      	adds	r2, r7, r2
 8014b28:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8014b2a:	68bb      	ldr	r3, [r7, #8]
 8014b2c:	2200      	movs	r2, #0
 8014b2e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8014b30:	68bb      	ldr	r3, [r7, #8]
 8014b32:	2224      	movs	r2, #36	@ 0x24
 8014b34:	2100      	movs	r1, #0
 8014b36:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8014b3e:	68bb      	ldr	r3, [r7, #8]
 8014b40:	785b      	ldrb	r3, [r3, #1]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d000      	beq.n	8014b48 <HAL_PCD_EP_DB_Transmit+0x68c>
 8014b46:	e06e      	b.n	8014c26 <HAL_PCD_EP_DB_Transmit+0x76a>
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	2250      	movs	r2, #80	@ 0x50
 8014b54:	5a9b      	ldrh	r3, [r3, r2]
 8014b56:	b29b      	uxth	r3, r3
 8014b58:	001a      	movs	r2, r3
 8014b5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b5c:	189b      	adds	r3, r3, r2
 8014b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014b60:	68bb      	ldr	r3, [r7, #8]
 8014b62:	781b      	ldrb	r3, [r3, #0]
 8014b64:	00da      	lsls	r2, r3, #3
 8014b66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014b68:	18d3      	adds	r3, r2, r3
 8014b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8014be4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8014b6c:	4694      	mov	ip, r2
 8014b6e:	4463      	add	r3, ip
 8014b70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014b72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b74:	881b      	ldrh	r3, [r3, #0]
 8014b76:	b29b      	uxth	r3, r3
 8014b78:	059b      	lsls	r3, r3, #22
 8014b7a:	0d9b      	lsrs	r3, r3, #22
 8014b7c:	b29a      	uxth	r2, r3
 8014b7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014b80:	801a      	strh	r2, [r3, #0]
 8014b82:	228c      	movs	r2, #140	@ 0x8c
 8014b84:	18bb      	adds	r3, r7, r2
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	2b3e      	cmp	r3, #62	@ 0x3e
 8014b8a:	d91a      	bls.n	8014bc2 <HAL_PCD_EP_DB_Transmit+0x706>
 8014b8c:	18bb      	adds	r3, r7, r2
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	095b      	lsrs	r3, r3, #5
 8014b92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014b94:	18bb      	adds	r3, r7, r2
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	221f      	movs	r2, #31
 8014b9a:	4013      	ands	r3, r2
 8014b9c:	d102      	bne.n	8014ba4 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8014b9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014ba0:	3b01      	subs	r3, #1
 8014ba2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014ba4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014ba6:	881b      	ldrh	r3, [r3, #0]
 8014ba8:	b29a      	uxth	r2, r3
 8014baa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014bac:	b29b      	uxth	r3, r3
 8014bae:	029b      	lsls	r3, r3, #10
 8014bb0:	b29b      	uxth	r3, r3
 8014bb2:	4313      	orrs	r3, r2
 8014bb4:	b29b      	uxth	r3, r3
 8014bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8014be8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014bb8:	4313      	orrs	r3, r2
 8014bba:	b29a      	uxth	r2, r3
 8014bbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014bbe:	801a      	strh	r2, [r3, #0]
 8014bc0:	e04d      	b.n	8014c5e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014bc2:	238c      	movs	r3, #140	@ 0x8c
 8014bc4:	18fb      	adds	r3, r7, r3
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d113      	bne.n	8014bf4 <HAL_PCD_EP_DB_Transmit+0x738>
 8014bcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014bce:	881b      	ldrh	r3, [r3, #0]
 8014bd0:	b29b      	uxth	r3, r3
 8014bd2:	4a05      	ldr	r2, [pc, #20]	@ (8014be8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8014bd4:	4313      	orrs	r3, r2
 8014bd6:	b29a      	uxth	r2, r3
 8014bd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014bda:	801a      	strh	r2, [r3, #0]
 8014bdc:	e03f      	b.n	8014c5e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014bde:	46c0      	nop			@ (mov r8, r8)
 8014be0:	00000402 	.word	0x00000402
 8014be4:	00000406 	.word	0x00000406
 8014be8:	ffff8000 	.word	0xffff8000
 8014bec:	ffff8f8f 	.word	0xffff8f8f
 8014bf0:	ffffc080 	.word	0xffffc080
 8014bf4:	228c      	movs	r2, #140	@ 0x8c
 8014bf6:	18bb      	adds	r3, r7, r2
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	085b      	lsrs	r3, r3, #1
 8014bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014bfe:	18bb      	adds	r3, r7, r2
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	2201      	movs	r2, #1
 8014c04:	4013      	ands	r3, r2
 8014c06:	d002      	beq.n	8014c0e <HAL_PCD_EP_DB_Transmit+0x752>
 8014c08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014c0a:	3301      	adds	r3, #1
 8014c0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014c0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c10:	881b      	ldrh	r3, [r3, #0]
 8014c12:	b29a      	uxth	r2, r3
 8014c14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014c16:	b29b      	uxth	r3, r3
 8014c18:	029b      	lsls	r3, r3, #10
 8014c1a:	b29b      	uxth	r3, r3
 8014c1c:	4313      	orrs	r3, r2
 8014c1e:	b29a      	uxth	r2, r3
 8014c20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c22:	801a      	strh	r2, [r3, #0]
 8014c24:	e01b      	b.n	8014c5e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014c26:	68bb      	ldr	r3, [r7, #8]
 8014c28:	785b      	ldrb	r3, [r3, #1]
 8014c2a:	2b01      	cmp	r3, #1
 8014c2c:	d117      	bne.n	8014c5e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	2250      	movs	r2, #80	@ 0x50
 8014c34:	5a9b      	ldrh	r3, [r3, r2]
 8014c36:	b29b      	uxth	r3, r3
 8014c38:	001a      	movs	r2, r3
 8014c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c3c:	189b      	adds	r3, r3, r2
 8014c3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8014c40:	68bb      	ldr	r3, [r7, #8]
 8014c42:	781b      	ldrb	r3, [r3, #0]
 8014c44:	00da      	lsls	r2, r3, #3
 8014c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014c48:	18d3      	adds	r3, r2, r3
 8014c4a:	4a21      	ldr	r2, [pc, #132]	@ (8014cd0 <HAL_PCD_EP_DB_Transmit+0x814>)
 8014c4c:	4694      	mov	ip, r2
 8014c4e:	4463      	add	r3, ip
 8014c50:	653b      	str	r3, [r7, #80]	@ 0x50
 8014c52:	238c      	movs	r3, #140	@ 0x8c
 8014c54:	18fb      	adds	r3, r7, r3
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	b29a      	uxth	r2, r3
 8014c5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014c5c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	6818      	ldr	r0, [r3, #0]
 8014c62:	68bb      	ldr	r3, [r7, #8]
 8014c64:	6959      	ldr	r1, [r3, #20]
 8014c66:	68bb      	ldr	r3, [r7, #8]
 8014c68:	895a      	ldrh	r2, [r3, #10]
 8014c6a:	238c      	movs	r3, #140	@ 0x8c
 8014c6c:	18fb      	adds	r3, r7, r3
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	b29b      	uxth	r3, r3
 8014c72:	f006 f999 	bl	801afa8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	001a      	movs	r2, r3
 8014c7c:	68bb      	ldr	r3, [r7, #8]
 8014c7e:	781b      	ldrb	r3, [r3, #0]
 8014c80:	009b      	lsls	r3, r3, #2
 8014c82:	18d3      	adds	r3, r2, r3
 8014c84:	881b      	ldrh	r3, [r3, #0]
 8014c86:	b29a      	uxth	r2, r3
 8014c88:	2014      	movs	r0, #20
 8014c8a:	183b      	adds	r3, r7, r0
 8014c8c:	4911      	ldr	r1, [pc, #68]	@ (8014cd4 <HAL_PCD_EP_DB_Transmit+0x818>)
 8014c8e:	400a      	ands	r2, r1
 8014c90:	801a      	strh	r2, [r3, #0]
 8014c92:	183b      	adds	r3, r7, r0
 8014c94:	183a      	adds	r2, r7, r0
 8014c96:	8812      	ldrh	r2, [r2, #0]
 8014c98:	2110      	movs	r1, #16
 8014c9a:	404a      	eors	r2, r1
 8014c9c:	801a      	strh	r2, [r3, #0]
 8014c9e:	183b      	adds	r3, r7, r0
 8014ca0:	183a      	adds	r2, r7, r0
 8014ca2:	8812      	ldrh	r2, [r2, #0]
 8014ca4:	2120      	movs	r1, #32
 8014ca6:	404a      	eors	r2, r1
 8014ca8:	801a      	strh	r2, [r3, #0]
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	001a      	movs	r2, r3
 8014cb0:	68bb      	ldr	r3, [r7, #8]
 8014cb2:	781b      	ldrb	r3, [r3, #0]
 8014cb4:	009b      	lsls	r3, r3, #2
 8014cb6:	18d3      	adds	r3, r2, r3
 8014cb8:	183a      	adds	r2, r7, r0
 8014cba:	8812      	ldrh	r2, [r2, #0]
 8014cbc:	4906      	ldr	r1, [pc, #24]	@ (8014cd8 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8014cbe:	430a      	orrs	r2, r1
 8014cc0:	b292      	uxth	r2, r2
 8014cc2:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8014cc4:	2300      	movs	r3, #0
}
 8014cc6:	0018      	movs	r0, r3
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	b024      	add	sp, #144	@ 0x90
 8014ccc:	bd80      	pop	{r7, pc}
 8014cce:	46c0      	nop			@ (mov r8, r8)
 8014cd0:	00000406 	.word	0x00000406
 8014cd4:	ffff8fbf 	.word	0xffff8fbf
 8014cd8:	ffff8080 	.word	0xffff8080

08014cdc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8014cdc:	b590      	push	{r4, r7, lr}
 8014cde:	b087      	sub	sp, #28
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	60f8      	str	r0, [r7, #12]
 8014ce4:	0008      	movs	r0, r1
 8014ce6:	0011      	movs	r1, r2
 8014ce8:	607b      	str	r3, [r7, #4]
 8014cea:	240a      	movs	r4, #10
 8014cec:	193b      	adds	r3, r7, r4
 8014cee:	1c02      	adds	r2, r0, #0
 8014cf0:	801a      	strh	r2, [r3, #0]
 8014cf2:	2308      	movs	r3, #8
 8014cf4:	18fb      	adds	r3, r7, r3
 8014cf6:	1c0a      	adds	r2, r1, #0
 8014cf8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8014cfa:	0021      	movs	r1, r4
 8014cfc:	187b      	adds	r3, r7, r1
 8014cfe:	881b      	ldrh	r3, [r3, #0]
 8014d00:	2280      	movs	r2, #128	@ 0x80
 8014d02:	4013      	ands	r3, r2
 8014d04:	b29b      	uxth	r3, r3
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d00c      	beq.n	8014d24 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014d0a:	187b      	adds	r3, r7, r1
 8014d0c:	881b      	ldrh	r3, [r3, #0]
 8014d0e:	2207      	movs	r2, #7
 8014d10:	4013      	ands	r3, r2
 8014d12:	1c5a      	adds	r2, r3, #1
 8014d14:	0013      	movs	r3, r2
 8014d16:	009b      	lsls	r3, r3, #2
 8014d18:	189b      	adds	r3, r3, r2
 8014d1a:	00db      	lsls	r3, r3, #3
 8014d1c:	68fa      	ldr	r2, [r7, #12]
 8014d1e:	18d3      	adds	r3, r2, r3
 8014d20:	617b      	str	r3, [r7, #20]
 8014d22:	e00b      	b.n	8014d3c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8014d24:	230a      	movs	r3, #10
 8014d26:	18fb      	adds	r3, r7, r3
 8014d28:	881a      	ldrh	r2, [r3, #0]
 8014d2a:	0013      	movs	r3, r2
 8014d2c:	009b      	lsls	r3, r3, #2
 8014d2e:	189b      	adds	r3, r3, r2
 8014d30:	00db      	lsls	r3, r3, #3
 8014d32:	3369      	adds	r3, #105	@ 0x69
 8014d34:	33ff      	adds	r3, #255	@ 0xff
 8014d36:	68fa      	ldr	r2, [r7, #12]
 8014d38:	18d3      	adds	r3, r2, r3
 8014d3a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8014d3c:	2308      	movs	r3, #8
 8014d3e:	18fb      	adds	r3, r7, r3
 8014d40:	881b      	ldrh	r3, [r3, #0]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d107      	bne.n	8014d56 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8014d46:	697b      	ldr	r3, [r7, #20]
 8014d48:	2200      	movs	r2, #0
 8014d4a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	b29a      	uxth	r2, r3
 8014d50:	697b      	ldr	r3, [r7, #20]
 8014d52:	80da      	strh	r2, [r3, #6]
 8014d54:	e00b      	b.n	8014d6e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8014d56:	697b      	ldr	r3, [r7, #20]
 8014d58:	2201      	movs	r2, #1
 8014d5a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	b29a      	uxth	r2, r3
 8014d60:	697b      	ldr	r3, [r7, #20]
 8014d62:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	0c1b      	lsrs	r3, r3, #16
 8014d68:	b29a      	uxth	r2, r3
 8014d6a:	697b      	ldr	r3, [r7, #20]
 8014d6c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8014d6e:	2300      	movs	r3, #0
}
 8014d70:	0018      	movs	r0, r3
 8014d72:	46bd      	mov	sp, r7
 8014d74:	b007      	add	sp, #28
 8014d76:	bd90      	pop	{r4, r7, pc}

08014d78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b084      	sub	sp, #16
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8014d86:	687a      	ldr	r2, [r7, #4]
 8014d88:	23ba      	movs	r3, #186	@ 0xba
 8014d8a:	009b      	lsls	r3, r3, #2
 8014d8c:	2101      	movs	r1, #1
 8014d8e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8014d90:	687a      	ldr	r2, [r7, #4]
 8014d92:	23b8      	movs	r3, #184	@ 0xb8
 8014d94:	009b      	lsls	r3, r3, #2
 8014d96:	2100      	movs	r1, #0
 8014d98:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	2254      	movs	r2, #84	@ 0x54
 8014d9e:	5a9b      	ldrh	r3, [r3, r2]
 8014da0:	b29b      	uxth	r3, r3
 8014da2:	2201      	movs	r2, #1
 8014da4:	4313      	orrs	r3, r2
 8014da6:	b299      	uxth	r1, r3
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	2254      	movs	r2, #84	@ 0x54
 8014dac:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	2254      	movs	r2, #84	@ 0x54
 8014db2:	5a9b      	ldrh	r3, [r3, r2]
 8014db4:	b29b      	uxth	r3, r3
 8014db6:	2202      	movs	r2, #2
 8014db8:	4313      	orrs	r3, r2
 8014dba:	b299      	uxth	r1, r3
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	2254      	movs	r2, #84	@ 0x54
 8014dc0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8014dc2:	2300      	movs	r3, #0
}
 8014dc4:	0018      	movs	r0, r3
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	b004      	add	sp, #16
 8014dca:	bd80      	pop	{r7, pc}

08014dcc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b082      	sub	sp, #8
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
 8014dd4:	000a      	movs	r2, r1
 8014dd6:	1cfb      	adds	r3, r7, #3
 8014dd8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8014dda:	46c0      	nop			@ (mov r8, r8)
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	b002      	add	sp, #8
 8014de0:	bd80      	pop	{r7, pc}
	...

08014de4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8014de8:	4b04      	ldr	r3, [pc, #16]	@ (8014dfc <HAL_PWR_EnableBkUpAccess+0x18>)
 8014dea:	681a      	ldr	r2, [r3, #0]
 8014dec:	4b03      	ldr	r3, [pc, #12]	@ (8014dfc <HAL_PWR_EnableBkUpAccess+0x18>)
 8014dee:	2180      	movs	r1, #128	@ 0x80
 8014df0:	0049      	lsls	r1, r1, #1
 8014df2:	430a      	orrs	r2, r1
 8014df4:	601a      	str	r2, [r3, #0]
}
 8014df6:	46c0      	nop			@ (mov r8, r8)
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	bd80      	pop	{r7, pc}
 8014dfc:	40007000 	.word	0x40007000

08014e00 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT(PWR->CR, PWR_CR_DBP);
 8014e04:	4b04      	ldr	r3, [pc, #16]	@ (8014e18 <HAL_PWR_DisableBkUpAccess+0x18>)
 8014e06:	681a      	ldr	r2, [r3, #0]
 8014e08:	4b03      	ldr	r3, [pc, #12]	@ (8014e18 <HAL_PWR_DisableBkUpAccess+0x18>)
 8014e0a:	4904      	ldr	r1, [pc, #16]	@ (8014e1c <HAL_PWR_DisableBkUpAccess+0x1c>)
 8014e0c:	400a      	ands	r2, r1
 8014e0e:	601a      	str	r2, [r3, #0]
}
 8014e10:	46c0      	nop			@ (mov r8, r8)
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bd80      	pop	{r7, pc}
 8014e16:	46c0      	nop			@ (mov r8, r8)
 8014e18:	40007000 	.word	0x40007000
 8014e1c:	fffffeff 	.word	0xfffffeff

08014e20 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b086      	sub	sp, #24
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
 8014e28:	000a      	movs	r2, r1
 8014e2a:	1cfb      	adds	r3, r7, #3
 8014e2c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8014e2e:	2300      	movs	r3, #0
 8014e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8014e32:	4b25      	ldr	r3, [pc, #148]	@ (8014ec8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014e34:	681a      	ldr	r2, [r3, #0]
 8014e36:	2380      	movs	r3, #128	@ 0x80
 8014e38:	009b      	lsls	r3, r3, #2
 8014e3a:	4013      	ands	r3, r2
 8014e3c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8014e3e:	4b23      	ldr	r3, [pc, #140]	@ (8014ecc <HAL_PWR_EnterSTOPMode+0xac>)
 8014e40:	6a1b      	ldr	r3, [r3, #32]
 8014e42:	2201      	movs	r2, #1
 8014e44:	4013      	ands	r3, r2
 8014e46:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8014e48:	693b      	ldr	r3, [r7, #16]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d008      	beq.n	8014e60 <HAL_PWR_EnterSTOPMode+0x40>
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d005      	beq.n	8014e60 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8014e54:	4b1c      	ldr	r3, [pc, #112]	@ (8014ec8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014e56:	681a      	ldr	r2, [r3, #0]
 8014e58:	4b1b      	ldr	r3, [pc, #108]	@ (8014ec8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014e5a:	491d      	ldr	r1, [pc, #116]	@ (8014ed0 <HAL_PWR_EnterSTOPMode+0xb0>)
 8014e5c:	400a      	ands	r2, r1
 8014e5e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8014e60:	4b19      	ldr	r3, [pc, #100]	@ (8014ec8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8014e66:	697b      	ldr	r3, [r7, #20]
 8014e68:	2203      	movs	r2, #3
 8014e6a:	4393      	bics	r3, r2
 8014e6c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8014e6e:	697a      	ldr	r2, [r7, #20]
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	4313      	orrs	r3, r2
 8014e74:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8014e76:	4b14      	ldr	r3, [pc, #80]	@ (8014ec8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014e78:	697a      	ldr	r2, [r7, #20]
 8014e7a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014e7c:	4b15      	ldr	r3, [pc, #84]	@ (8014ed4 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014e7e:	691a      	ldr	r2, [r3, #16]
 8014e80:	4b14      	ldr	r3, [pc, #80]	@ (8014ed4 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014e82:	2104      	movs	r1, #4
 8014e84:	430a      	orrs	r2, r1
 8014e86:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8014e88:	1cfb      	adds	r3, r7, #3
 8014e8a:	781b      	ldrb	r3, [r3, #0]
 8014e8c:	2b01      	cmp	r3, #1
 8014e8e:	d101      	bne.n	8014e94 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8014e90:	bf30      	wfi
 8014e92:	e002      	b.n	8014e9a <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8014e94:	bf40      	sev
    __WFE();
 8014e96:	bf20      	wfe
    __WFE();
 8014e98:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8014ed4 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014e9c:	691a      	ldr	r2, [r3, #16]
 8014e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8014ed4 <HAL_PWR_EnterSTOPMode+0xb4>)
 8014ea0:	2104      	movs	r1, #4
 8014ea2:	438a      	bics	r2, r1
 8014ea4:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8014ea6:	693b      	ldr	r3, [r7, #16]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d009      	beq.n	8014ec0 <HAL_PWR_EnterSTOPMode+0xa0>
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d006      	beq.n	8014ec0 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8014eb2:	4b05      	ldr	r3, [pc, #20]	@ (8014ec8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014eb4:	681a      	ldr	r2, [r3, #0]
 8014eb6:	4b04      	ldr	r3, [pc, #16]	@ (8014ec8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8014eb8:	2180      	movs	r1, #128	@ 0x80
 8014eba:	0089      	lsls	r1, r1, #2
 8014ebc:	430a      	orrs	r2, r1
 8014ebe:	601a      	str	r2, [r3, #0]
  }
}
 8014ec0:	46c0      	nop			@ (mov r8, r8)
 8014ec2:	46bd      	mov	sp, r7
 8014ec4:	b006      	add	sp, #24
 8014ec6:	bd80      	pop	{r7, pc}
 8014ec8:	40007000 	.word	0x40007000
 8014ecc:	40010000 	.word	0x40010000
 8014ed0:	fffffdff 	.word	0xfffffdff
 8014ed4:	e000ed00 	.word	0xe000ed00

08014ed8 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8014edc:	4b07      	ldr	r3, [pc, #28]	@ (8014efc <HAL_PWR_EnterSTANDBYMode+0x24>)
 8014ede:	681a      	ldr	r2, [r3, #0]
 8014ee0:	4b06      	ldr	r3, [pc, #24]	@ (8014efc <HAL_PWR_EnterSTANDBYMode+0x24>)
 8014ee2:	2102      	movs	r1, #2
 8014ee4:	430a      	orrs	r2, r1
 8014ee6:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8014ee8:	4b05      	ldr	r3, [pc, #20]	@ (8014f00 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8014eea:	691a      	ldr	r2, [r3, #16]
 8014eec:	4b04      	ldr	r3, [pc, #16]	@ (8014f00 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8014eee:	2104      	movs	r1, #4
 8014ef0:	430a      	orrs	r2, r1
 8014ef2:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8014ef4:	bf30      	wfi
}
 8014ef6:	46c0      	nop			@ (mov r8, r8)
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	bd80      	pop	{r7, pc}
 8014efc:	40007000 	.word	0x40007000
 8014f00:	e000ed00 	.word	0xe000ed00

08014f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014f04:	b5b0      	push	{r4, r5, r7, lr}
 8014f06:	b08a      	sub	sp, #40	@ 0x28
 8014f08:	af00      	add	r7, sp, #0
 8014f0a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d102      	bne.n	8014f18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8014f12:	2301      	movs	r3, #1
 8014f14:	f000 fbbf 	bl	8015696 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014f18:	4bc9      	ldr	r3, [pc, #804]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8014f1a:	68db      	ldr	r3, [r3, #12]
 8014f1c:	220c      	movs	r2, #12
 8014f1e:	4013      	ands	r3, r2
 8014f20:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8014f22:	4bc7      	ldr	r3, [pc, #796]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8014f24:	68da      	ldr	r2, [r3, #12]
 8014f26:	2380      	movs	r3, #128	@ 0x80
 8014f28:	025b      	lsls	r3, r3, #9
 8014f2a:	4013      	ands	r3, r2
 8014f2c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	2201      	movs	r2, #1
 8014f34:	4013      	ands	r3, r2
 8014f36:	d100      	bne.n	8014f3a <HAL_RCC_OscConfig+0x36>
 8014f38:	e07e      	b.n	8015038 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8014f3a:	69fb      	ldr	r3, [r7, #28]
 8014f3c:	2b08      	cmp	r3, #8
 8014f3e:	d007      	beq.n	8014f50 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8014f40:	69fb      	ldr	r3, [r7, #28]
 8014f42:	2b0c      	cmp	r3, #12
 8014f44:	d112      	bne.n	8014f6c <HAL_RCC_OscConfig+0x68>
 8014f46:	69ba      	ldr	r2, [r7, #24]
 8014f48:	2380      	movs	r3, #128	@ 0x80
 8014f4a:	025b      	lsls	r3, r3, #9
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	d10d      	bne.n	8014f6c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014f50:	4bbb      	ldr	r3, [pc, #748]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8014f52:	681a      	ldr	r2, [r3, #0]
 8014f54:	2380      	movs	r3, #128	@ 0x80
 8014f56:	029b      	lsls	r3, r3, #10
 8014f58:	4013      	ands	r3, r2
 8014f5a:	d100      	bne.n	8014f5e <HAL_RCC_OscConfig+0x5a>
 8014f5c:	e06b      	b.n	8015036 <HAL_RCC_OscConfig+0x132>
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	685b      	ldr	r3, [r3, #4]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d167      	bne.n	8015036 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8014f66:	2301      	movs	r3, #1
 8014f68:	f000 fb95 	bl	8015696 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	685a      	ldr	r2, [r3, #4]
 8014f70:	2380      	movs	r3, #128	@ 0x80
 8014f72:	025b      	lsls	r3, r3, #9
 8014f74:	429a      	cmp	r2, r3
 8014f76:	d107      	bne.n	8014f88 <HAL_RCC_OscConfig+0x84>
 8014f78:	4bb1      	ldr	r3, [pc, #708]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8014f7a:	681a      	ldr	r2, [r3, #0]
 8014f7c:	4bb0      	ldr	r3, [pc, #704]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8014f7e:	2180      	movs	r1, #128	@ 0x80
 8014f80:	0249      	lsls	r1, r1, #9
 8014f82:	430a      	orrs	r2, r1
 8014f84:	601a      	str	r2, [r3, #0]
 8014f86:	e027      	b.n	8014fd8 <HAL_RCC_OscConfig+0xd4>
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	685a      	ldr	r2, [r3, #4]
 8014f8c:	23a0      	movs	r3, #160	@ 0xa0
 8014f8e:	02db      	lsls	r3, r3, #11
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d10e      	bne.n	8014fb2 <HAL_RCC_OscConfig+0xae>
 8014f94:	4baa      	ldr	r3, [pc, #680]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8014f96:	681a      	ldr	r2, [r3, #0]
 8014f98:	4ba9      	ldr	r3, [pc, #676]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8014f9a:	2180      	movs	r1, #128	@ 0x80
 8014f9c:	02c9      	lsls	r1, r1, #11
 8014f9e:	430a      	orrs	r2, r1
 8014fa0:	601a      	str	r2, [r3, #0]
 8014fa2:	4ba7      	ldr	r3, [pc, #668]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8014fa4:	681a      	ldr	r2, [r3, #0]
 8014fa6:	4ba6      	ldr	r3, [pc, #664]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8014fa8:	2180      	movs	r1, #128	@ 0x80
 8014faa:	0249      	lsls	r1, r1, #9
 8014fac:	430a      	orrs	r2, r1
 8014fae:	601a      	str	r2, [r3, #0]
 8014fb0:	e012      	b.n	8014fd8 <HAL_RCC_OscConfig+0xd4>
 8014fb2:	4ba3      	ldr	r3, [pc, #652]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8014fb4:	681a      	ldr	r2, [r3, #0]
 8014fb6:	4ba2      	ldr	r3, [pc, #648]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8014fb8:	49a2      	ldr	r1, [pc, #648]	@ (8015244 <HAL_RCC_OscConfig+0x340>)
 8014fba:	400a      	ands	r2, r1
 8014fbc:	601a      	str	r2, [r3, #0]
 8014fbe:	4ba0      	ldr	r3, [pc, #640]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8014fc0:	681a      	ldr	r2, [r3, #0]
 8014fc2:	2380      	movs	r3, #128	@ 0x80
 8014fc4:	025b      	lsls	r3, r3, #9
 8014fc6:	4013      	ands	r3, r2
 8014fc8:	60fb      	str	r3, [r7, #12]
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	4b9c      	ldr	r3, [pc, #624]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8014fce:	681a      	ldr	r2, [r3, #0]
 8014fd0:	4b9b      	ldr	r3, [pc, #620]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8014fd2:	499d      	ldr	r1, [pc, #628]	@ (8015248 <HAL_RCC_OscConfig+0x344>)
 8014fd4:	400a      	ands	r2, r1
 8014fd6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	685b      	ldr	r3, [r3, #4]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d015      	beq.n	801500c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014fe0:	f7f9 fe60 	bl	800eca4 <HAL_GetTick>
 8014fe4:	0003      	movs	r3, r0
 8014fe6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014fe8:	e009      	b.n	8014ffe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014fea:	f7f9 fe5b 	bl	800eca4 <HAL_GetTick>
 8014fee:	0002      	movs	r2, r0
 8014ff0:	697b      	ldr	r3, [r7, #20]
 8014ff2:	1ad3      	subs	r3, r2, r3
 8014ff4:	2b64      	cmp	r3, #100	@ 0x64
 8014ff6:	d902      	bls.n	8014ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8014ff8:	2303      	movs	r3, #3
 8014ffa:	f000 fb4c 	bl	8015696 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014ffe:	4b90      	ldr	r3, [pc, #576]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8015000:	681a      	ldr	r2, [r3, #0]
 8015002:	2380      	movs	r3, #128	@ 0x80
 8015004:	029b      	lsls	r3, r3, #10
 8015006:	4013      	ands	r3, r2
 8015008:	d0ef      	beq.n	8014fea <HAL_RCC_OscConfig+0xe6>
 801500a:	e015      	b.n	8015038 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801500c:	f7f9 fe4a 	bl	800eca4 <HAL_GetTick>
 8015010:	0003      	movs	r3, r0
 8015012:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8015014:	e008      	b.n	8015028 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015016:	f7f9 fe45 	bl	800eca4 <HAL_GetTick>
 801501a:	0002      	movs	r2, r0
 801501c:	697b      	ldr	r3, [r7, #20]
 801501e:	1ad3      	subs	r3, r2, r3
 8015020:	2b64      	cmp	r3, #100	@ 0x64
 8015022:	d901      	bls.n	8015028 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8015024:	2303      	movs	r3, #3
 8015026:	e336      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8015028:	4b85      	ldr	r3, [pc, #532]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 801502a:	681a      	ldr	r2, [r3, #0]
 801502c:	2380      	movs	r3, #128	@ 0x80
 801502e:	029b      	lsls	r3, r3, #10
 8015030:	4013      	ands	r3, r2
 8015032:	d1f0      	bne.n	8015016 <HAL_RCC_OscConfig+0x112>
 8015034:	e000      	b.n	8015038 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015036:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	2202      	movs	r2, #2
 801503e:	4013      	ands	r3, r2
 8015040:	d100      	bne.n	8015044 <HAL_RCC_OscConfig+0x140>
 8015042:	e099      	b.n	8015178 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	68db      	ldr	r3, [r3, #12]
 8015048:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801504c:	2220      	movs	r2, #32
 801504e:	4013      	ands	r3, r2
 8015050:	d009      	beq.n	8015066 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8015052:	4b7b      	ldr	r3, [pc, #492]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8015054:	681a      	ldr	r2, [r3, #0]
 8015056:	4b7a      	ldr	r3, [pc, #488]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8015058:	2120      	movs	r1, #32
 801505a:	430a      	orrs	r2, r1
 801505c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015060:	2220      	movs	r2, #32
 8015062:	4393      	bics	r3, r2
 8015064:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8015066:	69fb      	ldr	r3, [r7, #28]
 8015068:	2b04      	cmp	r3, #4
 801506a:	d005      	beq.n	8015078 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801506c:	69fb      	ldr	r3, [r7, #28]
 801506e:	2b0c      	cmp	r3, #12
 8015070:	d13e      	bne.n	80150f0 <HAL_RCC_OscConfig+0x1ec>
 8015072:	69bb      	ldr	r3, [r7, #24]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d13b      	bne.n	80150f0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8015078:	4b71      	ldr	r3, [pc, #452]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	2204      	movs	r2, #4
 801507e:	4013      	ands	r3, r2
 8015080:	d004      	beq.n	801508c <HAL_RCC_OscConfig+0x188>
 8015082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015084:	2b00      	cmp	r3, #0
 8015086:	d101      	bne.n	801508c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8015088:	2301      	movs	r3, #1
 801508a:	e304      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801508c:	4b6c      	ldr	r3, [pc, #432]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 801508e:	685b      	ldr	r3, [r3, #4]
 8015090:	4a6e      	ldr	r2, [pc, #440]	@ (801524c <HAL_RCC_OscConfig+0x348>)
 8015092:	4013      	ands	r3, r2
 8015094:	0019      	movs	r1, r3
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	691b      	ldr	r3, [r3, #16]
 801509a:	021a      	lsls	r2, r3, #8
 801509c:	4b68      	ldr	r3, [pc, #416]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 801509e:	430a      	orrs	r2, r1
 80150a0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80150a2:	4b67      	ldr	r3, [pc, #412]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	2209      	movs	r2, #9
 80150a8:	4393      	bics	r3, r2
 80150aa:	0019      	movs	r1, r3
 80150ac:	4b64      	ldr	r3, [pc, #400]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 80150ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80150b0:	430a      	orrs	r2, r1
 80150b2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80150b4:	f000 fc42 	bl	801593c <HAL_RCC_GetSysClockFreq>
 80150b8:	0001      	movs	r1, r0
 80150ba:	4b61      	ldr	r3, [pc, #388]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 80150bc:	68db      	ldr	r3, [r3, #12]
 80150be:	091b      	lsrs	r3, r3, #4
 80150c0:	220f      	movs	r2, #15
 80150c2:	4013      	ands	r3, r2
 80150c4:	4a62      	ldr	r2, [pc, #392]	@ (8015250 <HAL_RCC_OscConfig+0x34c>)
 80150c6:	5cd3      	ldrb	r3, [r2, r3]
 80150c8:	000a      	movs	r2, r1
 80150ca:	40da      	lsrs	r2, r3
 80150cc:	4b61      	ldr	r3, [pc, #388]	@ (8015254 <HAL_RCC_OscConfig+0x350>)
 80150ce:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80150d0:	4b61      	ldr	r3, [pc, #388]	@ (8015258 <HAL_RCC_OscConfig+0x354>)
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	2513      	movs	r5, #19
 80150d6:	197c      	adds	r4, r7, r5
 80150d8:	0018      	movs	r0, r3
 80150da:	f7f9 fd9d 	bl	800ec18 <HAL_InitTick>
 80150de:	0003      	movs	r3, r0
 80150e0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80150e2:	197b      	adds	r3, r7, r5
 80150e4:	781b      	ldrb	r3, [r3, #0]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d046      	beq.n	8015178 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80150ea:	197b      	adds	r3, r7, r5
 80150ec:	781b      	ldrb	r3, [r3, #0]
 80150ee:	e2d2      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80150f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d027      	beq.n	8015146 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80150f6:	4b52      	ldr	r3, [pc, #328]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	2209      	movs	r2, #9
 80150fc:	4393      	bics	r3, r2
 80150fe:	0019      	movs	r1, r3
 8015100:	4b4f      	ldr	r3, [pc, #316]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8015102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015104:	430a      	orrs	r2, r1
 8015106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015108:	f7f9 fdcc 	bl	800eca4 <HAL_GetTick>
 801510c:	0003      	movs	r3, r0
 801510e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015110:	e008      	b.n	8015124 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015112:	f7f9 fdc7 	bl	800eca4 <HAL_GetTick>
 8015116:	0002      	movs	r2, r0
 8015118:	697b      	ldr	r3, [r7, #20]
 801511a:	1ad3      	subs	r3, r2, r3
 801511c:	2b02      	cmp	r3, #2
 801511e:	d901      	bls.n	8015124 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8015120:	2303      	movs	r3, #3
 8015122:	e2b8      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015124:	4b46      	ldr	r3, [pc, #280]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	2204      	movs	r2, #4
 801512a:	4013      	ands	r3, r2
 801512c:	d0f1      	beq.n	8015112 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801512e:	4b44      	ldr	r3, [pc, #272]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8015130:	685b      	ldr	r3, [r3, #4]
 8015132:	4a46      	ldr	r2, [pc, #280]	@ (801524c <HAL_RCC_OscConfig+0x348>)
 8015134:	4013      	ands	r3, r2
 8015136:	0019      	movs	r1, r3
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	691b      	ldr	r3, [r3, #16]
 801513c:	021a      	lsls	r2, r3, #8
 801513e:	4b40      	ldr	r3, [pc, #256]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8015140:	430a      	orrs	r2, r1
 8015142:	605a      	str	r2, [r3, #4]
 8015144:	e018      	b.n	8015178 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015146:	4b3e      	ldr	r3, [pc, #248]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8015148:	681a      	ldr	r2, [r3, #0]
 801514a:	4b3d      	ldr	r3, [pc, #244]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 801514c:	2101      	movs	r1, #1
 801514e:	438a      	bics	r2, r1
 8015150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015152:	f7f9 fda7 	bl	800eca4 <HAL_GetTick>
 8015156:	0003      	movs	r3, r0
 8015158:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801515a:	e008      	b.n	801516e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801515c:	f7f9 fda2 	bl	800eca4 <HAL_GetTick>
 8015160:	0002      	movs	r2, r0
 8015162:	697b      	ldr	r3, [r7, #20]
 8015164:	1ad3      	subs	r3, r2, r3
 8015166:	2b02      	cmp	r3, #2
 8015168:	d901      	bls.n	801516e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801516a:	2303      	movs	r3, #3
 801516c:	e293      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801516e:	4b34      	ldr	r3, [pc, #208]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	2204      	movs	r2, #4
 8015174:	4013      	ands	r3, r2
 8015176:	d1f1      	bne.n	801515c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	2210      	movs	r2, #16
 801517e:	4013      	ands	r3, r2
 8015180:	d100      	bne.n	8015184 <HAL_RCC_OscConfig+0x280>
 8015182:	e0a2      	b.n	80152ca <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8015184:	69fb      	ldr	r3, [r7, #28]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d140      	bne.n	801520c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801518a:	4b2d      	ldr	r3, [pc, #180]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 801518c:	681a      	ldr	r2, [r3, #0]
 801518e:	2380      	movs	r3, #128	@ 0x80
 8015190:	009b      	lsls	r3, r3, #2
 8015192:	4013      	ands	r3, r2
 8015194:	d005      	beq.n	80151a2 <HAL_RCC_OscConfig+0x29e>
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	69db      	ldr	r3, [r3, #28]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d101      	bne.n	80151a2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801519e:	2301      	movs	r3, #1
 80151a0:	e279      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80151a2:	4b27      	ldr	r3, [pc, #156]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 80151a4:	685b      	ldr	r3, [r3, #4]
 80151a6:	4a2d      	ldr	r2, [pc, #180]	@ (801525c <HAL_RCC_OscConfig+0x358>)
 80151a8:	4013      	ands	r3, r2
 80151aa:	0019      	movs	r1, r3
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80151b0:	4b23      	ldr	r3, [pc, #140]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 80151b2:	430a      	orrs	r2, r1
 80151b4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80151b6:	4b22      	ldr	r3, [pc, #136]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 80151b8:	685b      	ldr	r3, [r3, #4]
 80151ba:	021b      	lsls	r3, r3, #8
 80151bc:	0a19      	lsrs	r1, r3, #8
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	6a1b      	ldr	r3, [r3, #32]
 80151c2:	061a      	lsls	r2, r3, #24
 80151c4:	4b1e      	ldr	r3, [pc, #120]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 80151c6:	430a      	orrs	r2, r1
 80151c8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151ce:	0b5b      	lsrs	r3, r3, #13
 80151d0:	3301      	adds	r3, #1
 80151d2:	2280      	movs	r2, #128	@ 0x80
 80151d4:	0212      	lsls	r2, r2, #8
 80151d6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80151d8:	4b19      	ldr	r3, [pc, #100]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 80151da:	68db      	ldr	r3, [r3, #12]
 80151dc:	091b      	lsrs	r3, r3, #4
 80151de:	210f      	movs	r1, #15
 80151e0:	400b      	ands	r3, r1
 80151e2:	491b      	ldr	r1, [pc, #108]	@ (8015250 <HAL_RCC_OscConfig+0x34c>)
 80151e4:	5ccb      	ldrb	r3, [r1, r3]
 80151e6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80151e8:	4b1a      	ldr	r3, [pc, #104]	@ (8015254 <HAL_RCC_OscConfig+0x350>)
 80151ea:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80151ec:	4b1a      	ldr	r3, [pc, #104]	@ (8015258 <HAL_RCC_OscConfig+0x354>)
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	2513      	movs	r5, #19
 80151f2:	197c      	adds	r4, r7, r5
 80151f4:	0018      	movs	r0, r3
 80151f6:	f7f9 fd0f 	bl	800ec18 <HAL_InitTick>
 80151fa:	0003      	movs	r3, r0
 80151fc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80151fe:	197b      	adds	r3, r7, r5
 8015200:	781b      	ldrb	r3, [r3, #0]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d061      	beq.n	80152ca <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8015206:	197b      	adds	r3, r7, r5
 8015208:	781b      	ldrb	r3, [r3, #0]
 801520a:	e244      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	69db      	ldr	r3, [r3, #28]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d040      	beq.n	8015296 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8015214:	4b0a      	ldr	r3, [pc, #40]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 8015216:	681a      	ldr	r2, [r3, #0]
 8015218:	4b09      	ldr	r3, [pc, #36]	@ (8015240 <HAL_RCC_OscConfig+0x33c>)
 801521a:	2180      	movs	r1, #128	@ 0x80
 801521c:	0049      	lsls	r1, r1, #1
 801521e:	430a      	orrs	r2, r1
 8015220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015222:	f7f9 fd3f 	bl	800eca4 <HAL_GetTick>
 8015226:	0003      	movs	r3, r0
 8015228:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801522a:	e019      	b.n	8015260 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801522c:	f7f9 fd3a 	bl	800eca4 <HAL_GetTick>
 8015230:	0002      	movs	r2, r0
 8015232:	697b      	ldr	r3, [r7, #20]
 8015234:	1ad3      	subs	r3, r2, r3
 8015236:	2b02      	cmp	r3, #2
 8015238:	d912      	bls.n	8015260 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 801523a:	2303      	movs	r3, #3
 801523c:	e22b      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
 801523e:	46c0      	nop			@ (mov r8, r8)
 8015240:	40021000 	.word	0x40021000
 8015244:	fffeffff 	.word	0xfffeffff
 8015248:	fffbffff 	.word	0xfffbffff
 801524c:	ffffe0ff 	.word	0xffffe0ff
 8015250:	08025594 	.word	0x08025594
 8015254:	200000cc 	.word	0x200000cc
 8015258:	200000dc 	.word	0x200000dc
 801525c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8015260:	4bca      	ldr	r3, [pc, #808]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015262:	681a      	ldr	r2, [r3, #0]
 8015264:	2380      	movs	r3, #128	@ 0x80
 8015266:	009b      	lsls	r3, r3, #2
 8015268:	4013      	ands	r3, r2
 801526a:	d0df      	beq.n	801522c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801526c:	4bc7      	ldr	r3, [pc, #796]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 801526e:	685b      	ldr	r3, [r3, #4]
 8015270:	4ac7      	ldr	r2, [pc, #796]	@ (8015590 <HAL_RCC_OscConfig+0x68c>)
 8015272:	4013      	ands	r3, r2
 8015274:	0019      	movs	r1, r3
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801527a:	4bc4      	ldr	r3, [pc, #784]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 801527c:	430a      	orrs	r2, r1
 801527e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8015280:	4bc2      	ldr	r3, [pc, #776]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015282:	685b      	ldr	r3, [r3, #4]
 8015284:	021b      	lsls	r3, r3, #8
 8015286:	0a19      	lsrs	r1, r3, #8
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	6a1b      	ldr	r3, [r3, #32]
 801528c:	061a      	lsls	r2, r3, #24
 801528e:	4bbf      	ldr	r3, [pc, #764]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015290:	430a      	orrs	r2, r1
 8015292:	605a      	str	r2, [r3, #4]
 8015294:	e019      	b.n	80152ca <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8015296:	4bbd      	ldr	r3, [pc, #756]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015298:	681a      	ldr	r2, [r3, #0]
 801529a:	4bbc      	ldr	r3, [pc, #752]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 801529c:	49bd      	ldr	r1, [pc, #756]	@ (8015594 <HAL_RCC_OscConfig+0x690>)
 801529e:	400a      	ands	r2, r1
 80152a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80152a2:	f7f9 fcff 	bl	800eca4 <HAL_GetTick>
 80152a6:	0003      	movs	r3, r0
 80152a8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80152aa:	e008      	b.n	80152be <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80152ac:	f7f9 fcfa 	bl	800eca4 <HAL_GetTick>
 80152b0:	0002      	movs	r2, r0
 80152b2:	697b      	ldr	r3, [r7, #20]
 80152b4:	1ad3      	subs	r3, r2, r3
 80152b6:	2b02      	cmp	r3, #2
 80152b8:	d901      	bls.n	80152be <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80152ba:	2303      	movs	r3, #3
 80152bc:	e1eb      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80152be:	4bb3      	ldr	r3, [pc, #716]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 80152c0:	681a      	ldr	r2, [r3, #0]
 80152c2:	2380      	movs	r3, #128	@ 0x80
 80152c4:	009b      	lsls	r3, r3, #2
 80152c6:	4013      	ands	r3, r2
 80152c8:	d1f0      	bne.n	80152ac <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	2208      	movs	r2, #8
 80152d0:	4013      	ands	r3, r2
 80152d2:	d036      	beq.n	8015342 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	695b      	ldr	r3, [r3, #20]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d019      	beq.n	8015310 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80152dc:	4bab      	ldr	r3, [pc, #684]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 80152de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80152e0:	4baa      	ldr	r3, [pc, #680]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 80152e2:	2101      	movs	r1, #1
 80152e4:	430a      	orrs	r2, r1
 80152e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80152e8:	f7f9 fcdc 	bl	800eca4 <HAL_GetTick>
 80152ec:	0003      	movs	r3, r0
 80152ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80152f0:	e008      	b.n	8015304 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80152f2:	f7f9 fcd7 	bl	800eca4 <HAL_GetTick>
 80152f6:	0002      	movs	r2, r0
 80152f8:	697b      	ldr	r3, [r7, #20]
 80152fa:	1ad3      	subs	r3, r2, r3
 80152fc:	2b02      	cmp	r3, #2
 80152fe:	d901      	bls.n	8015304 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8015300:	2303      	movs	r3, #3
 8015302:	e1c8      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8015304:	4ba1      	ldr	r3, [pc, #644]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015308:	2202      	movs	r2, #2
 801530a:	4013      	ands	r3, r2
 801530c:	d0f1      	beq.n	80152f2 <HAL_RCC_OscConfig+0x3ee>
 801530e:	e018      	b.n	8015342 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8015310:	4b9e      	ldr	r3, [pc, #632]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015312:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015314:	4b9d      	ldr	r3, [pc, #628]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015316:	2101      	movs	r1, #1
 8015318:	438a      	bics	r2, r1
 801531a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801531c:	f7f9 fcc2 	bl	800eca4 <HAL_GetTick>
 8015320:	0003      	movs	r3, r0
 8015322:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015324:	e008      	b.n	8015338 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015326:	f7f9 fcbd 	bl	800eca4 <HAL_GetTick>
 801532a:	0002      	movs	r2, r0
 801532c:	697b      	ldr	r3, [r7, #20]
 801532e:	1ad3      	subs	r3, r2, r3
 8015330:	2b02      	cmp	r3, #2
 8015332:	d901      	bls.n	8015338 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8015334:	2303      	movs	r3, #3
 8015336:	e1ae      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8015338:	4b94      	ldr	r3, [pc, #592]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 801533a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801533c:	2202      	movs	r2, #2
 801533e:	4013      	ands	r3, r2
 8015340:	d1f1      	bne.n	8015326 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	2204      	movs	r2, #4
 8015348:	4013      	ands	r3, r2
 801534a:	d100      	bne.n	801534e <HAL_RCC_OscConfig+0x44a>
 801534c:	e0ae      	b.n	80154ac <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 801534e:	2023      	movs	r0, #35	@ 0x23
 8015350:	183b      	adds	r3, r7, r0
 8015352:	2200      	movs	r2, #0
 8015354:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015356:	4b8d      	ldr	r3, [pc, #564]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801535a:	2380      	movs	r3, #128	@ 0x80
 801535c:	055b      	lsls	r3, r3, #21
 801535e:	4013      	ands	r3, r2
 8015360:	d109      	bne.n	8015376 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015362:	4b8a      	ldr	r3, [pc, #552]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015364:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015366:	4b89      	ldr	r3, [pc, #548]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015368:	2180      	movs	r1, #128	@ 0x80
 801536a:	0549      	lsls	r1, r1, #21
 801536c:	430a      	orrs	r2, r1
 801536e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015370:	183b      	adds	r3, r7, r0
 8015372:	2201      	movs	r2, #1
 8015374:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015376:	4b88      	ldr	r3, [pc, #544]	@ (8015598 <HAL_RCC_OscConfig+0x694>)
 8015378:	681a      	ldr	r2, [r3, #0]
 801537a:	2380      	movs	r3, #128	@ 0x80
 801537c:	005b      	lsls	r3, r3, #1
 801537e:	4013      	ands	r3, r2
 8015380:	d11a      	bne.n	80153b8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015382:	4b85      	ldr	r3, [pc, #532]	@ (8015598 <HAL_RCC_OscConfig+0x694>)
 8015384:	681a      	ldr	r2, [r3, #0]
 8015386:	4b84      	ldr	r3, [pc, #528]	@ (8015598 <HAL_RCC_OscConfig+0x694>)
 8015388:	2180      	movs	r1, #128	@ 0x80
 801538a:	0049      	lsls	r1, r1, #1
 801538c:	430a      	orrs	r2, r1
 801538e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015390:	f7f9 fc88 	bl	800eca4 <HAL_GetTick>
 8015394:	0003      	movs	r3, r0
 8015396:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015398:	e008      	b.n	80153ac <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801539a:	f7f9 fc83 	bl	800eca4 <HAL_GetTick>
 801539e:	0002      	movs	r2, r0
 80153a0:	697b      	ldr	r3, [r7, #20]
 80153a2:	1ad3      	subs	r3, r2, r3
 80153a4:	2b64      	cmp	r3, #100	@ 0x64
 80153a6:	d901      	bls.n	80153ac <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80153a8:	2303      	movs	r3, #3
 80153aa:	e174      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80153ac:	4b7a      	ldr	r3, [pc, #488]	@ (8015598 <HAL_RCC_OscConfig+0x694>)
 80153ae:	681a      	ldr	r2, [r3, #0]
 80153b0:	2380      	movs	r3, #128	@ 0x80
 80153b2:	005b      	lsls	r3, r3, #1
 80153b4:	4013      	ands	r3, r2
 80153b6:	d0f0      	beq.n	801539a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	689a      	ldr	r2, [r3, #8]
 80153bc:	2380      	movs	r3, #128	@ 0x80
 80153be:	005b      	lsls	r3, r3, #1
 80153c0:	429a      	cmp	r2, r3
 80153c2:	d107      	bne.n	80153d4 <HAL_RCC_OscConfig+0x4d0>
 80153c4:	4b71      	ldr	r3, [pc, #452]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 80153c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80153c8:	4b70      	ldr	r3, [pc, #448]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 80153ca:	2180      	movs	r1, #128	@ 0x80
 80153cc:	0049      	lsls	r1, r1, #1
 80153ce:	430a      	orrs	r2, r1
 80153d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80153d2:	e031      	b.n	8015438 <HAL_RCC_OscConfig+0x534>
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	689b      	ldr	r3, [r3, #8]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d10c      	bne.n	80153f6 <HAL_RCC_OscConfig+0x4f2>
 80153dc:	4b6b      	ldr	r3, [pc, #428]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 80153de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80153e0:	4b6a      	ldr	r3, [pc, #424]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 80153e2:	496c      	ldr	r1, [pc, #432]	@ (8015594 <HAL_RCC_OscConfig+0x690>)
 80153e4:	400a      	ands	r2, r1
 80153e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80153e8:	4b68      	ldr	r3, [pc, #416]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 80153ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80153ec:	4b67      	ldr	r3, [pc, #412]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 80153ee:	496b      	ldr	r1, [pc, #428]	@ (801559c <HAL_RCC_OscConfig+0x698>)
 80153f0:	400a      	ands	r2, r1
 80153f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80153f4:	e020      	b.n	8015438 <HAL_RCC_OscConfig+0x534>
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	689a      	ldr	r2, [r3, #8]
 80153fa:	23a0      	movs	r3, #160	@ 0xa0
 80153fc:	00db      	lsls	r3, r3, #3
 80153fe:	429a      	cmp	r2, r3
 8015400:	d10e      	bne.n	8015420 <HAL_RCC_OscConfig+0x51c>
 8015402:	4b62      	ldr	r3, [pc, #392]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015404:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015406:	4b61      	ldr	r3, [pc, #388]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015408:	2180      	movs	r1, #128	@ 0x80
 801540a:	00c9      	lsls	r1, r1, #3
 801540c:	430a      	orrs	r2, r1
 801540e:	651a      	str	r2, [r3, #80]	@ 0x50
 8015410:	4b5e      	ldr	r3, [pc, #376]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015412:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015414:	4b5d      	ldr	r3, [pc, #372]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015416:	2180      	movs	r1, #128	@ 0x80
 8015418:	0049      	lsls	r1, r1, #1
 801541a:	430a      	orrs	r2, r1
 801541c:	651a      	str	r2, [r3, #80]	@ 0x50
 801541e:	e00b      	b.n	8015438 <HAL_RCC_OscConfig+0x534>
 8015420:	4b5a      	ldr	r3, [pc, #360]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015422:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015424:	4b59      	ldr	r3, [pc, #356]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015426:	495b      	ldr	r1, [pc, #364]	@ (8015594 <HAL_RCC_OscConfig+0x690>)
 8015428:	400a      	ands	r2, r1
 801542a:	651a      	str	r2, [r3, #80]	@ 0x50
 801542c:	4b57      	ldr	r3, [pc, #348]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 801542e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015430:	4b56      	ldr	r3, [pc, #344]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015432:	495a      	ldr	r1, [pc, #360]	@ (801559c <HAL_RCC_OscConfig+0x698>)
 8015434:	400a      	ands	r2, r1
 8015436:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	689b      	ldr	r3, [r3, #8]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d015      	beq.n	801546c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015440:	f7f9 fc30 	bl	800eca4 <HAL_GetTick>
 8015444:	0003      	movs	r3, r0
 8015446:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015448:	e009      	b.n	801545e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801544a:	f7f9 fc2b 	bl	800eca4 <HAL_GetTick>
 801544e:	0002      	movs	r2, r0
 8015450:	697b      	ldr	r3, [r7, #20]
 8015452:	1ad3      	subs	r3, r2, r3
 8015454:	4a52      	ldr	r2, [pc, #328]	@ (80155a0 <HAL_RCC_OscConfig+0x69c>)
 8015456:	4293      	cmp	r3, r2
 8015458:	d901      	bls.n	801545e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 801545a:	2303      	movs	r3, #3
 801545c:	e11b      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801545e:	4b4b      	ldr	r3, [pc, #300]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015460:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015462:	2380      	movs	r3, #128	@ 0x80
 8015464:	009b      	lsls	r3, r3, #2
 8015466:	4013      	ands	r3, r2
 8015468:	d0ef      	beq.n	801544a <HAL_RCC_OscConfig+0x546>
 801546a:	e014      	b.n	8015496 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801546c:	f7f9 fc1a 	bl	800eca4 <HAL_GetTick>
 8015470:	0003      	movs	r3, r0
 8015472:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015474:	e009      	b.n	801548a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015476:	f7f9 fc15 	bl	800eca4 <HAL_GetTick>
 801547a:	0002      	movs	r2, r0
 801547c:	697b      	ldr	r3, [r7, #20]
 801547e:	1ad3      	subs	r3, r2, r3
 8015480:	4a47      	ldr	r2, [pc, #284]	@ (80155a0 <HAL_RCC_OscConfig+0x69c>)
 8015482:	4293      	cmp	r3, r2
 8015484:	d901      	bls.n	801548a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8015486:	2303      	movs	r3, #3
 8015488:	e105      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801548a:	4b40      	ldr	r3, [pc, #256]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 801548c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801548e:	2380      	movs	r3, #128	@ 0x80
 8015490:	009b      	lsls	r3, r3, #2
 8015492:	4013      	ands	r3, r2
 8015494:	d1ef      	bne.n	8015476 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015496:	2323      	movs	r3, #35	@ 0x23
 8015498:	18fb      	adds	r3, r7, r3
 801549a:	781b      	ldrb	r3, [r3, #0]
 801549c:	2b01      	cmp	r3, #1
 801549e:	d105      	bne.n	80154ac <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80154a0:	4b3a      	ldr	r3, [pc, #232]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 80154a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80154a4:	4b39      	ldr	r3, [pc, #228]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 80154a6:	493f      	ldr	r1, [pc, #252]	@ (80155a4 <HAL_RCC_OscConfig+0x6a0>)
 80154a8:	400a      	ands	r2, r1
 80154aa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	2220      	movs	r2, #32
 80154b2:	4013      	ands	r3, r2
 80154b4:	d049      	beq.n	801554a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	699b      	ldr	r3, [r3, #24]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d026      	beq.n	801550c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80154be:	4b33      	ldr	r3, [pc, #204]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 80154c0:	689a      	ldr	r2, [r3, #8]
 80154c2:	4b32      	ldr	r3, [pc, #200]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 80154c4:	2101      	movs	r1, #1
 80154c6:	430a      	orrs	r2, r1
 80154c8:	609a      	str	r2, [r3, #8]
 80154ca:	4b30      	ldr	r3, [pc, #192]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 80154cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80154ce:	4b2f      	ldr	r3, [pc, #188]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 80154d0:	2101      	movs	r1, #1
 80154d2:	430a      	orrs	r2, r1
 80154d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80154d6:	4b34      	ldr	r3, [pc, #208]	@ (80155a8 <HAL_RCC_OscConfig+0x6a4>)
 80154d8:	6a1a      	ldr	r2, [r3, #32]
 80154da:	4b33      	ldr	r3, [pc, #204]	@ (80155a8 <HAL_RCC_OscConfig+0x6a4>)
 80154dc:	2180      	movs	r1, #128	@ 0x80
 80154de:	0189      	lsls	r1, r1, #6
 80154e0:	430a      	orrs	r2, r1
 80154e2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80154e4:	f7f9 fbde 	bl	800eca4 <HAL_GetTick>
 80154e8:	0003      	movs	r3, r0
 80154ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80154ec:	e008      	b.n	8015500 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80154ee:	f7f9 fbd9 	bl	800eca4 <HAL_GetTick>
 80154f2:	0002      	movs	r2, r0
 80154f4:	697b      	ldr	r3, [r7, #20]
 80154f6:	1ad3      	subs	r3, r2, r3
 80154f8:	2b02      	cmp	r3, #2
 80154fa:	d901      	bls.n	8015500 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80154fc:	2303      	movs	r3, #3
 80154fe:	e0ca      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8015500:	4b22      	ldr	r3, [pc, #136]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015502:	689b      	ldr	r3, [r3, #8]
 8015504:	2202      	movs	r2, #2
 8015506:	4013      	ands	r3, r2
 8015508:	d0f1      	beq.n	80154ee <HAL_RCC_OscConfig+0x5ea>
 801550a:	e01e      	b.n	801554a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 801550c:	4b1f      	ldr	r3, [pc, #124]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 801550e:	689a      	ldr	r2, [r3, #8]
 8015510:	4b1e      	ldr	r3, [pc, #120]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015512:	2101      	movs	r1, #1
 8015514:	438a      	bics	r2, r1
 8015516:	609a      	str	r2, [r3, #8]
 8015518:	4b23      	ldr	r3, [pc, #140]	@ (80155a8 <HAL_RCC_OscConfig+0x6a4>)
 801551a:	6a1a      	ldr	r2, [r3, #32]
 801551c:	4b22      	ldr	r3, [pc, #136]	@ (80155a8 <HAL_RCC_OscConfig+0x6a4>)
 801551e:	4923      	ldr	r1, [pc, #140]	@ (80155ac <HAL_RCC_OscConfig+0x6a8>)
 8015520:	400a      	ands	r2, r1
 8015522:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015524:	f7f9 fbbe 	bl	800eca4 <HAL_GetTick>
 8015528:	0003      	movs	r3, r0
 801552a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801552c:	e008      	b.n	8015540 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801552e:	f7f9 fbb9 	bl	800eca4 <HAL_GetTick>
 8015532:	0002      	movs	r2, r0
 8015534:	697b      	ldr	r3, [r7, #20]
 8015536:	1ad3      	subs	r3, r2, r3
 8015538:	2b02      	cmp	r3, #2
 801553a:	d901      	bls.n	8015540 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 801553c:	2303      	movs	r3, #3
 801553e:	e0aa      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015540:	4b12      	ldr	r3, [pc, #72]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015542:	689b      	ldr	r3, [r3, #8]
 8015544:	2202      	movs	r2, #2
 8015546:	4013      	ands	r3, r2
 8015548:	d1f1      	bne.n	801552e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801554e:	2b00      	cmp	r3, #0
 8015550:	d100      	bne.n	8015554 <HAL_RCC_OscConfig+0x650>
 8015552:	e09f      	b.n	8015694 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8015554:	69fb      	ldr	r3, [r7, #28]
 8015556:	2b0c      	cmp	r3, #12
 8015558:	d100      	bne.n	801555c <HAL_RCC_OscConfig+0x658>
 801555a:	e078      	b.n	801564e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015560:	2b02      	cmp	r3, #2
 8015562:	d159      	bne.n	8015618 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015564:	4b09      	ldr	r3, [pc, #36]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 8015566:	681a      	ldr	r2, [r3, #0]
 8015568:	4b08      	ldr	r3, [pc, #32]	@ (801558c <HAL_RCC_OscConfig+0x688>)
 801556a:	4911      	ldr	r1, [pc, #68]	@ (80155b0 <HAL_RCC_OscConfig+0x6ac>)
 801556c:	400a      	ands	r2, r1
 801556e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015570:	f7f9 fb98 	bl	800eca4 <HAL_GetTick>
 8015574:	0003      	movs	r3, r0
 8015576:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015578:	e01c      	b.n	80155b4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801557a:	f7f9 fb93 	bl	800eca4 <HAL_GetTick>
 801557e:	0002      	movs	r2, r0
 8015580:	697b      	ldr	r3, [r7, #20]
 8015582:	1ad3      	subs	r3, r2, r3
 8015584:	2b02      	cmp	r3, #2
 8015586:	d915      	bls.n	80155b4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8015588:	2303      	movs	r3, #3
 801558a:	e084      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
 801558c:	40021000 	.word	0x40021000
 8015590:	ffff1fff 	.word	0xffff1fff
 8015594:	fffffeff 	.word	0xfffffeff
 8015598:	40007000 	.word	0x40007000
 801559c:	fffffbff 	.word	0xfffffbff
 80155a0:	00001388 	.word	0x00001388
 80155a4:	efffffff 	.word	0xefffffff
 80155a8:	40010000 	.word	0x40010000
 80155ac:	ffffdfff 	.word	0xffffdfff
 80155b0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80155b4:	4b3a      	ldr	r3, [pc, #232]	@ (80156a0 <HAL_RCC_OscConfig+0x79c>)
 80155b6:	681a      	ldr	r2, [r3, #0]
 80155b8:	2380      	movs	r3, #128	@ 0x80
 80155ba:	049b      	lsls	r3, r3, #18
 80155bc:	4013      	ands	r3, r2
 80155be:	d1dc      	bne.n	801557a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80155c0:	4b37      	ldr	r3, [pc, #220]	@ (80156a0 <HAL_RCC_OscConfig+0x79c>)
 80155c2:	68db      	ldr	r3, [r3, #12]
 80155c4:	4a37      	ldr	r2, [pc, #220]	@ (80156a4 <HAL_RCC_OscConfig+0x7a0>)
 80155c6:	4013      	ands	r3, r2
 80155c8:	0019      	movs	r1, r3
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80155d2:	431a      	orrs	r2, r3
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80155d8:	431a      	orrs	r2, r3
 80155da:	4b31      	ldr	r3, [pc, #196]	@ (80156a0 <HAL_RCC_OscConfig+0x79c>)
 80155dc:	430a      	orrs	r2, r1
 80155de:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80155e0:	4b2f      	ldr	r3, [pc, #188]	@ (80156a0 <HAL_RCC_OscConfig+0x79c>)
 80155e2:	681a      	ldr	r2, [r3, #0]
 80155e4:	4b2e      	ldr	r3, [pc, #184]	@ (80156a0 <HAL_RCC_OscConfig+0x79c>)
 80155e6:	2180      	movs	r1, #128	@ 0x80
 80155e8:	0449      	lsls	r1, r1, #17
 80155ea:	430a      	orrs	r2, r1
 80155ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80155ee:	f7f9 fb59 	bl	800eca4 <HAL_GetTick>
 80155f2:	0003      	movs	r3, r0
 80155f4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80155f6:	e008      	b.n	801560a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80155f8:	f7f9 fb54 	bl	800eca4 <HAL_GetTick>
 80155fc:	0002      	movs	r2, r0
 80155fe:	697b      	ldr	r3, [r7, #20]
 8015600:	1ad3      	subs	r3, r2, r3
 8015602:	2b02      	cmp	r3, #2
 8015604:	d901      	bls.n	801560a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8015606:	2303      	movs	r3, #3
 8015608:	e045      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801560a:	4b25      	ldr	r3, [pc, #148]	@ (80156a0 <HAL_RCC_OscConfig+0x79c>)
 801560c:	681a      	ldr	r2, [r3, #0]
 801560e:	2380      	movs	r3, #128	@ 0x80
 8015610:	049b      	lsls	r3, r3, #18
 8015612:	4013      	ands	r3, r2
 8015614:	d0f0      	beq.n	80155f8 <HAL_RCC_OscConfig+0x6f4>
 8015616:	e03d      	b.n	8015694 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015618:	4b21      	ldr	r3, [pc, #132]	@ (80156a0 <HAL_RCC_OscConfig+0x79c>)
 801561a:	681a      	ldr	r2, [r3, #0]
 801561c:	4b20      	ldr	r3, [pc, #128]	@ (80156a0 <HAL_RCC_OscConfig+0x79c>)
 801561e:	4922      	ldr	r1, [pc, #136]	@ (80156a8 <HAL_RCC_OscConfig+0x7a4>)
 8015620:	400a      	ands	r2, r1
 8015622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015624:	f7f9 fb3e 	bl	800eca4 <HAL_GetTick>
 8015628:	0003      	movs	r3, r0
 801562a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801562c:	e008      	b.n	8015640 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801562e:	f7f9 fb39 	bl	800eca4 <HAL_GetTick>
 8015632:	0002      	movs	r2, r0
 8015634:	697b      	ldr	r3, [r7, #20]
 8015636:	1ad3      	subs	r3, r2, r3
 8015638:	2b02      	cmp	r3, #2
 801563a:	d901      	bls.n	8015640 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 801563c:	2303      	movs	r3, #3
 801563e:	e02a      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8015640:	4b17      	ldr	r3, [pc, #92]	@ (80156a0 <HAL_RCC_OscConfig+0x79c>)
 8015642:	681a      	ldr	r2, [r3, #0]
 8015644:	2380      	movs	r3, #128	@ 0x80
 8015646:	049b      	lsls	r3, r3, #18
 8015648:	4013      	ands	r3, r2
 801564a:	d1f0      	bne.n	801562e <HAL_RCC_OscConfig+0x72a>
 801564c:	e022      	b.n	8015694 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015652:	2b01      	cmp	r3, #1
 8015654:	d101      	bne.n	801565a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8015656:	2301      	movs	r3, #1
 8015658:	e01d      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801565a:	4b11      	ldr	r3, [pc, #68]	@ (80156a0 <HAL_RCC_OscConfig+0x79c>)
 801565c:	68db      	ldr	r3, [r3, #12]
 801565e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015660:	69ba      	ldr	r2, [r7, #24]
 8015662:	2380      	movs	r3, #128	@ 0x80
 8015664:	025b      	lsls	r3, r3, #9
 8015666:	401a      	ands	r2, r3
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801566c:	429a      	cmp	r2, r3
 801566e:	d10f      	bne.n	8015690 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8015670:	69ba      	ldr	r2, [r7, #24]
 8015672:	23f0      	movs	r3, #240	@ 0xf0
 8015674:	039b      	lsls	r3, r3, #14
 8015676:	401a      	ands	r2, r3
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801567c:	429a      	cmp	r2, r3
 801567e:	d107      	bne.n	8015690 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8015680:	69ba      	ldr	r2, [r7, #24]
 8015682:	23c0      	movs	r3, #192	@ 0xc0
 8015684:	041b      	lsls	r3, r3, #16
 8015686:	401a      	ands	r2, r3
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 801568c:	429a      	cmp	r2, r3
 801568e:	d001      	beq.n	8015694 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8015690:	2301      	movs	r3, #1
 8015692:	e000      	b.n	8015696 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8015694:	2300      	movs	r3, #0
}
 8015696:	0018      	movs	r0, r3
 8015698:	46bd      	mov	sp, r7
 801569a:	b00a      	add	sp, #40	@ 0x28
 801569c:	bdb0      	pop	{r4, r5, r7, pc}
 801569e:	46c0      	nop			@ (mov r8, r8)
 80156a0:	40021000 	.word	0x40021000
 80156a4:	ff02ffff 	.word	0xff02ffff
 80156a8:	feffffff 	.word	0xfeffffff

080156ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80156ac:	b5b0      	push	{r4, r5, r7, lr}
 80156ae:	b084      	sub	sp, #16
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	6078      	str	r0, [r7, #4]
 80156b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d101      	bne.n	80156c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80156bc:	2301      	movs	r3, #1
 80156be:	e128      	b.n	8015912 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80156c0:	4b96      	ldr	r3, [pc, #600]	@ (801591c <HAL_RCC_ClockConfig+0x270>)
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	2201      	movs	r2, #1
 80156c6:	4013      	ands	r3, r2
 80156c8:	683a      	ldr	r2, [r7, #0]
 80156ca:	429a      	cmp	r2, r3
 80156cc:	d91e      	bls.n	801570c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80156ce:	4b93      	ldr	r3, [pc, #588]	@ (801591c <HAL_RCC_ClockConfig+0x270>)
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	2201      	movs	r2, #1
 80156d4:	4393      	bics	r3, r2
 80156d6:	0019      	movs	r1, r3
 80156d8:	4b90      	ldr	r3, [pc, #576]	@ (801591c <HAL_RCC_ClockConfig+0x270>)
 80156da:	683a      	ldr	r2, [r7, #0]
 80156dc:	430a      	orrs	r2, r1
 80156de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80156e0:	f7f9 fae0 	bl	800eca4 <HAL_GetTick>
 80156e4:	0003      	movs	r3, r0
 80156e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80156e8:	e009      	b.n	80156fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80156ea:	f7f9 fadb 	bl	800eca4 <HAL_GetTick>
 80156ee:	0002      	movs	r2, r0
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	1ad3      	subs	r3, r2, r3
 80156f4:	4a8a      	ldr	r2, [pc, #552]	@ (8015920 <HAL_RCC_ClockConfig+0x274>)
 80156f6:	4293      	cmp	r3, r2
 80156f8:	d901      	bls.n	80156fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80156fa:	2303      	movs	r3, #3
 80156fc:	e109      	b.n	8015912 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80156fe:	4b87      	ldr	r3, [pc, #540]	@ (801591c <HAL_RCC_ClockConfig+0x270>)
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	2201      	movs	r2, #1
 8015704:	4013      	ands	r3, r2
 8015706:	683a      	ldr	r2, [r7, #0]
 8015708:	429a      	cmp	r2, r3
 801570a:	d1ee      	bne.n	80156ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	2202      	movs	r2, #2
 8015712:	4013      	ands	r3, r2
 8015714:	d009      	beq.n	801572a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015716:	4b83      	ldr	r3, [pc, #524]	@ (8015924 <HAL_RCC_ClockConfig+0x278>)
 8015718:	68db      	ldr	r3, [r3, #12]
 801571a:	22f0      	movs	r2, #240	@ 0xf0
 801571c:	4393      	bics	r3, r2
 801571e:	0019      	movs	r1, r3
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	689a      	ldr	r2, [r3, #8]
 8015724:	4b7f      	ldr	r3, [pc, #508]	@ (8015924 <HAL_RCC_ClockConfig+0x278>)
 8015726:	430a      	orrs	r2, r1
 8015728:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	2201      	movs	r2, #1
 8015730:	4013      	ands	r3, r2
 8015732:	d100      	bne.n	8015736 <HAL_RCC_ClockConfig+0x8a>
 8015734:	e089      	b.n	801584a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	685b      	ldr	r3, [r3, #4]
 801573a:	2b02      	cmp	r3, #2
 801573c:	d107      	bne.n	801574e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801573e:	4b79      	ldr	r3, [pc, #484]	@ (8015924 <HAL_RCC_ClockConfig+0x278>)
 8015740:	681a      	ldr	r2, [r3, #0]
 8015742:	2380      	movs	r3, #128	@ 0x80
 8015744:	029b      	lsls	r3, r3, #10
 8015746:	4013      	ands	r3, r2
 8015748:	d120      	bne.n	801578c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801574a:	2301      	movs	r3, #1
 801574c:	e0e1      	b.n	8015912 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	685b      	ldr	r3, [r3, #4]
 8015752:	2b03      	cmp	r3, #3
 8015754:	d107      	bne.n	8015766 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015756:	4b73      	ldr	r3, [pc, #460]	@ (8015924 <HAL_RCC_ClockConfig+0x278>)
 8015758:	681a      	ldr	r2, [r3, #0]
 801575a:	2380      	movs	r3, #128	@ 0x80
 801575c:	049b      	lsls	r3, r3, #18
 801575e:	4013      	ands	r3, r2
 8015760:	d114      	bne.n	801578c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015762:	2301      	movs	r3, #1
 8015764:	e0d5      	b.n	8015912 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	685b      	ldr	r3, [r3, #4]
 801576a:	2b01      	cmp	r3, #1
 801576c:	d106      	bne.n	801577c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801576e:	4b6d      	ldr	r3, [pc, #436]	@ (8015924 <HAL_RCC_ClockConfig+0x278>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	2204      	movs	r2, #4
 8015774:	4013      	ands	r3, r2
 8015776:	d109      	bne.n	801578c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015778:	2301      	movs	r3, #1
 801577a:	e0ca      	b.n	8015912 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801577c:	4b69      	ldr	r3, [pc, #420]	@ (8015924 <HAL_RCC_ClockConfig+0x278>)
 801577e:	681a      	ldr	r2, [r3, #0]
 8015780:	2380      	movs	r3, #128	@ 0x80
 8015782:	009b      	lsls	r3, r3, #2
 8015784:	4013      	ands	r3, r2
 8015786:	d101      	bne.n	801578c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8015788:	2301      	movs	r3, #1
 801578a:	e0c2      	b.n	8015912 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801578c:	4b65      	ldr	r3, [pc, #404]	@ (8015924 <HAL_RCC_ClockConfig+0x278>)
 801578e:	68db      	ldr	r3, [r3, #12]
 8015790:	2203      	movs	r2, #3
 8015792:	4393      	bics	r3, r2
 8015794:	0019      	movs	r1, r3
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	685a      	ldr	r2, [r3, #4]
 801579a:	4b62      	ldr	r3, [pc, #392]	@ (8015924 <HAL_RCC_ClockConfig+0x278>)
 801579c:	430a      	orrs	r2, r1
 801579e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80157a0:	f7f9 fa80 	bl	800eca4 <HAL_GetTick>
 80157a4:	0003      	movs	r3, r0
 80157a6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	685b      	ldr	r3, [r3, #4]
 80157ac:	2b02      	cmp	r3, #2
 80157ae:	d111      	bne.n	80157d4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80157b0:	e009      	b.n	80157c6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80157b2:	f7f9 fa77 	bl	800eca4 <HAL_GetTick>
 80157b6:	0002      	movs	r2, r0
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	1ad3      	subs	r3, r2, r3
 80157bc:	4a58      	ldr	r2, [pc, #352]	@ (8015920 <HAL_RCC_ClockConfig+0x274>)
 80157be:	4293      	cmp	r3, r2
 80157c0:	d901      	bls.n	80157c6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80157c2:	2303      	movs	r3, #3
 80157c4:	e0a5      	b.n	8015912 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80157c6:	4b57      	ldr	r3, [pc, #348]	@ (8015924 <HAL_RCC_ClockConfig+0x278>)
 80157c8:	68db      	ldr	r3, [r3, #12]
 80157ca:	220c      	movs	r2, #12
 80157cc:	4013      	ands	r3, r2
 80157ce:	2b08      	cmp	r3, #8
 80157d0:	d1ef      	bne.n	80157b2 <HAL_RCC_ClockConfig+0x106>
 80157d2:	e03a      	b.n	801584a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	685b      	ldr	r3, [r3, #4]
 80157d8:	2b03      	cmp	r3, #3
 80157da:	d111      	bne.n	8015800 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80157dc:	e009      	b.n	80157f2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80157de:	f7f9 fa61 	bl	800eca4 <HAL_GetTick>
 80157e2:	0002      	movs	r2, r0
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	1ad3      	subs	r3, r2, r3
 80157e8:	4a4d      	ldr	r2, [pc, #308]	@ (8015920 <HAL_RCC_ClockConfig+0x274>)
 80157ea:	4293      	cmp	r3, r2
 80157ec:	d901      	bls.n	80157f2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80157ee:	2303      	movs	r3, #3
 80157f0:	e08f      	b.n	8015912 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80157f2:	4b4c      	ldr	r3, [pc, #304]	@ (8015924 <HAL_RCC_ClockConfig+0x278>)
 80157f4:	68db      	ldr	r3, [r3, #12]
 80157f6:	220c      	movs	r2, #12
 80157f8:	4013      	ands	r3, r2
 80157fa:	2b0c      	cmp	r3, #12
 80157fc:	d1ef      	bne.n	80157de <HAL_RCC_ClockConfig+0x132>
 80157fe:	e024      	b.n	801584a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	685b      	ldr	r3, [r3, #4]
 8015804:	2b01      	cmp	r3, #1
 8015806:	d11b      	bne.n	8015840 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8015808:	e009      	b.n	801581e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801580a:	f7f9 fa4b 	bl	800eca4 <HAL_GetTick>
 801580e:	0002      	movs	r2, r0
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	1ad3      	subs	r3, r2, r3
 8015814:	4a42      	ldr	r2, [pc, #264]	@ (8015920 <HAL_RCC_ClockConfig+0x274>)
 8015816:	4293      	cmp	r3, r2
 8015818:	d901      	bls.n	801581e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801581a:	2303      	movs	r3, #3
 801581c:	e079      	b.n	8015912 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801581e:	4b41      	ldr	r3, [pc, #260]	@ (8015924 <HAL_RCC_ClockConfig+0x278>)
 8015820:	68db      	ldr	r3, [r3, #12]
 8015822:	220c      	movs	r2, #12
 8015824:	4013      	ands	r3, r2
 8015826:	2b04      	cmp	r3, #4
 8015828:	d1ef      	bne.n	801580a <HAL_RCC_ClockConfig+0x15e>
 801582a:	e00e      	b.n	801584a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801582c:	f7f9 fa3a 	bl	800eca4 <HAL_GetTick>
 8015830:	0002      	movs	r2, r0
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	1ad3      	subs	r3, r2, r3
 8015836:	4a3a      	ldr	r2, [pc, #232]	@ (8015920 <HAL_RCC_ClockConfig+0x274>)
 8015838:	4293      	cmp	r3, r2
 801583a:	d901      	bls.n	8015840 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801583c:	2303      	movs	r3, #3
 801583e:	e068      	b.n	8015912 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8015840:	4b38      	ldr	r3, [pc, #224]	@ (8015924 <HAL_RCC_ClockConfig+0x278>)
 8015842:	68db      	ldr	r3, [r3, #12]
 8015844:	220c      	movs	r2, #12
 8015846:	4013      	ands	r3, r2
 8015848:	d1f0      	bne.n	801582c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801584a:	4b34      	ldr	r3, [pc, #208]	@ (801591c <HAL_RCC_ClockConfig+0x270>)
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	2201      	movs	r2, #1
 8015850:	4013      	ands	r3, r2
 8015852:	683a      	ldr	r2, [r7, #0]
 8015854:	429a      	cmp	r2, r3
 8015856:	d21e      	bcs.n	8015896 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015858:	4b30      	ldr	r3, [pc, #192]	@ (801591c <HAL_RCC_ClockConfig+0x270>)
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	2201      	movs	r2, #1
 801585e:	4393      	bics	r3, r2
 8015860:	0019      	movs	r1, r3
 8015862:	4b2e      	ldr	r3, [pc, #184]	@ (801591c <HAL_RCC_ClockConfig+0x270>)
 8015864:	683a      	ldr	r2, [r7, #0]
 8015866:	430a      	orrs	r2, r1
 8015868:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801586a:	f7f9 fa1b 	bl	800eca4 <HAL_GetTick>
 801586e:	0003      	movs	r3, r0
 8015870:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015872:	e009      	b.n	8015888 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015874:	f7f9 fa16 	bl	800eca4 <HAL_GetTick>
 8015878:	0002      	movs	r2, r0
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	1ad3      	subs	r3, r2, r3
 801587e:	4a28      	ldr	r2, [pc, #160]	@ (8015920 <HAL_RCC_ClockConfig+0x274>)
 8015880:	4293      	cmp	r3, r2
 8015882:	d901      	bls.n	8015888 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8015884:	2303      	movs	r3, #3
 8015886:	e044      	b.n	8015912 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015888:	4b24      	ldr	r3, [pc, #144]	@ (801591c <HAL_RCC_ClockConfig+0x270>)
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	2201      	movs	r2, #1
 801588e:	4013      	ands	r3, r2
 8015890:	683a      	ldr	r2, [r7, #0]
 8015892:	429a      	cmp	r2, r3
 8015894:	d1ee      	bne.n	8015874 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	2204      	movs	r2, #4
 801589c:	4013      	ands	r3, r2
 801589e:	d009      	beq.n	80158b4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80158a0:	4b20      	ldr	r3, [pc, #128]	@ (8015924 <HAL_RCC_ClockConfig+0x278>)
 80158a2:	68db      	ldr	r3, [r3, #12]
 80158a4:	4a20      	ldr	r2, [pc, #128]	@ (8015928 <HAL_RCC_ClockConfig+0x27c>)
 80158a6:	4013      	ands	r3, r2
 80158a8:	0019      	movs	r1, r3
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	68da      	ldr	r2, [r3, #12]
 80158ae:	4b1d      	ldr	r3, [pc, #116]	@ (8015924 <HAL_RCC_ClockConfig+0x278>)
 80158b0:	430a      	orrs	r2, r1
 80158b2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	2208      	movs	r2, #8
 80158ba:	4013      	ands	r3, r2
 80158bc:	d00a      	beq.n	80158d4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80158be:	4b19      	ldr	r3, [pc, #100]	@ (8015924 <HAL_RCC_ClockConfig+0x278>)
 80158c0:	68db      	ldr	r3, [r3, #12]
 80158c2:	4a1a      	ldr	r2, [pc, #104]	@ (801592c <HAL_RCC_ClockConfig+0x280>)
 80158c4:	4013      	ands	r3, r2
 80158c6:	0019      	movs	r1, r3
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	691b      	ldr	r3, [r3, #16]
 80158cc:	00da      	lsls	r2, r3, #3
 80158ce:	4b15      	ldr	r3, [pc, #84]	@ (8015924 <HAL_RCC_ClockConfig+0x278>)
 80158d0:	430a      	orrs	r2, r1
 80158d2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80158d4:	f000 f832 	bl	801593c <HAL_RCC_GetSysClockFreq>
 80158d8:	0001      	movs	r1, r0
 80158da:	4b12      	ldr	r3, [pc, #72]	@ (8015924 <HAL_RCC_ClockConfig+0x278>)
 80158dc:	68db      	ldr	r3, [r3, #12]
 80158de:	091b      	lsrs	r3, r3, #4
 80158e0:	220f      	movs	r2, #15
 80158e2:	4013      	ands	r3, r2
 80158e4:	4a12      	ldr	r2, [pc, #72]	@ (8015930 <HAL_RCC_ClockConfig+0x284>)
 80158e6:	5cd3      	ldrb	r3, [r2, r3]
 80158e8:	000a      	movs	r2, r1
 80158ea:	40da      	lsrs	r2, r3
 80158ec:	4b11      	ldr	r3, [pc, #68]	@ (8015934 <HAL_RCC_ClockConfig+0x288>)
 80158ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80158f0:	4b11      	ldr	r3, [pc, #68]	@ (8015938 <HAL_RCC_ClockConfig+0x28c>)
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	250b      	movs	r5, #11
 80158f6:	197c      	adds	r4, r7, r5
 80158f8:	0018      	movs	r0, r3
 80158fa:	f7f9 f98d 	bl	800ec18 <HAL_InitTick>
 80158fe:	0003      	movs	r3, r0
 8015900:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8015902:	197b      	adds	r3, r7, r5
 8015904:	781b      	ldrb	r3, [r3, #0]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d002      	beq.n	8015910 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801590a:	197b      	adds	r3, r7, r5
 801590c:	781b      	ldrb	r3, [r3, #0]
 801590e:	e000      	b.n	8015912 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8015910:	2300      	movs	r3, #0
}
 8015912:	0018      	movs	r0, r3
 8015914:	46bd      	mov	sp, r7
 8015916:	b004      	add	sp, #16
 8015918:	bdb0      	pop	{r4, r5, r7, pc}
 801591a:	46c0      	nop			@ (mov r8, r8)
 801591c:	40022000 	.word	0x40022000
 8015920:	00001388 	.word	0x00001388
 8015924:	40021000 	.word	0x40021000
 8015928:	fffff8ff 	.word	0xfffff8ff
 801592c:	ffffc7ff 	.word	0xffffc7ff
 8015930:	08025594 	.word	0x08025594
 8015934:	200000cc 	.word	0x200000cc
 8015938:	200000dc 	.word	0x200000dc

0801593c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801593c:	b5b0      	push	{r4, r5, r7, lr}
 801593e:	b08e      	sub	sp, #56	@ 0x38
 8015940:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8015942:	4b4c      	ldr	r3, [pc, #304]	@ (8015a74 <HAL_RCC_GetSysClockFreq+0x138>)
 8015944:	68db      	ldr	r3, [r3, #12]
 8015946:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8015948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801594a:	230c      	movs	r3, #12
 801594c:	4013      	ands	r3, r2
 801594e:	2b0c      	cmp	r3, #12
 8015950:	d014      	beq.n	801597c <HAL_RCC_GetSysClockFreq+0x40>
 8015952:	d900      	bls.n	8015956 <HAL_RCC_GetSysClockFreq+0x1a>
 8015954:	e07b      	b.n	8015a4e <HAL_RCC_GetSysClockFreq+0x112>
 8015956:	2b04      	cmp	r3, #4
 8015958:	d002      	beq.n	8015960 <HAL_RCC_GetSysClockFreq+0x24>
 801595a:	2b08      	cmp	r3, #8
 801595c:	d00b      	beq.n	8015976 <HAL_RCC_GetSysClockFreq+0x3a>
 801595e:	e076      	b.n	8015a4e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8015960:	4b44      	ldr	r3, [pc, #272]	@ (8015a74 <HAL_RCC_GetSysClockFreq+0x138>)
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	2210      	movs	r2, #16
 8015966:	4013      	ands	r3, r2
 8015968:	d002      	beq.n	8015970 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801596a:	4b43      	ldr	r3, [pc, #268]	@ (8015a78 <HAL_RCC_GetSysClockFreq+0x13c>)
 801596c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801596e:	e07c      	b.n	8015a6a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8015970:	4b42      	ldr	r3, [pc, #264]	@ (8015a7c <HAL_RCC_GetSysClockFreq+0x140>)
 8015972:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015974:	e079      	b.n	8015a6a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8015976:	4b42      	ldr	r3, [pc, #264]	@ (8015a80 <HAL_RCC_GetSysClockFreq+0x144>)
 8015978:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801597a:	e076      	b.n	8015a6a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801597c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801597e:	0c9a      	lsrs	r2, r3, #18
 8015980:	230f      	movs	r3, #15
 8015982:	401a      	ands	r2, r3
 8015984:	4b3f      	ldr	r3, [pc, #252]	@ (8015a84 <HAL_RCC_GetSysClockFreq+0x148>)
 8015986:	5c9b      	ldrb	r3, [r3, r2]
 8015988:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801598a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801598c:	0d9a      	lsrs	r2, r3, #22
 801598e:	2303      	movs	r3, #3
 8015990:	4013      	ands	r3, r2
 8015992:	3301      	adds	r3, #1
 8015994:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015996:	4b37      	ldr	r3, [pc, #220]	@ (8015a74 <HAL_RCC_GetSysClockFreq+0x138>)
 8015998:	68da      	ldr	r2, [r3, #12]
 801599a:	2380      	movs	r3, #128	@ 0x80
 801599c:	025b      	lsls	r3, r3, #9
 801599e:	4013      	ands	r3, r2
 80159a0:	d01a      	beq.n	80159d8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80159a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159a4:	61bb      	str	r3, [r7, #24]
 80159a6:	2300      	movs	r3, #0
 80159a8:	61fb      	str	r3, [r7, #28]
 80159aa:	4a35      	ldr	r2, [pc, #212]	@ (8015a80 <HAL_RCC_GetSysClockFreq+0x144>)
 80159ac:	2300      	movs	r3, #0
 80159ae:	69b8      	ldr	r0, [r7, #24]
 80159b0:	69f9      	ldr	r1, [r7, #28]
 80159b2:	f7ea fe05 	bl	80005c0 <__aeabi_lmul>
 80159b6:	0002      	movs	r2, r0
 80159b8:	000b      	movs	r3, r1
 80159ba:	0010      	movs	r0, r2
 80159bc:	0019      	movs	r1, r3
 80159be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159c0:	613b      	str	r3, [r7, #16]
 80159c2:	2300      	movs	r3, #0
 80159c4:	617b      	str	r3, [r7, #20]
 80159c6:	693a      	ldr	r2, [r7, #16]
 80159c8:	697b      	ldr	r3, [r7, #20]
 80159ca:	f7ea fdd9 	bl	8000580 <__aeabi_uldivmod>
 80159ce:	0002      	movs	r2, r0
 80159d0:	000b      	movs	r3, r1
 80159d2:	0013      	movs	r3, r2
 80159d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80159d6:	e037      	b.n	8015a48 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80159d8:	4b26      	ldr	r3, [pc, #152]	@ (8015a74 <HAL_RCC_GetSysClockFreq+0x138>)
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	2210      	movs	r2, #16
 80159de:	4013      	ands	r3, r2
 80159e0:	d01a      	beq.n	8015a18 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80159e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159e4:	60bb      	str	r3, [r7, #8]
 80159e6:	2300      	movs	r3, #0
 80159e8:	60fb      	str	r3, [r7, #12]
 80159ea:	4a23      	ldr	r2, [pc, #140]	@ (8015a78 <HAL_RCC_GetSysClockFreq+0x13c>)
 80159ec:	2300      	movs	r3, #0
 80159ee:	68b8      	ldr	r0, [r7, #8]
 80159f0:	68f9      	ldr	r1, [r7, #12]
 80159f2:	f7ea fde5 	bl	80005c0 <__aeabi_lmul>
 80159f6:	0002      	movs	r2, r0
 80159f8:	000b      	movs	r3, r1
 80159fa:	0010      	movs	r0, r2
 80159fc:	0019      	movs	r1, r3
 80159fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a00:	603b      	str	r3, [r7, #0]
 8015a02:	2300      	movs	r3, #0
 8015a04:	607b      	str	r3, [r7, #4]
 8015a06:	683a      	ldr	r2, [r7, #0]
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	f7ea fdb9 	bl	8000580 <__aeabi_uldivmod>
 8015a0e:	0002      	movs	r2, r0
 8015a10:	000b      	movs	r3, r1
 8015a12:	0013      	movs	r3, r2
 8015a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8015a16:	e017      	b.n	8015a48 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8015a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a1a:	0018      	movs	r0, r3
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	0019      	movs	r1, r3
 8015a20:	4a16      	ldr	r2, [pc, #88]	@ (8015a7c <HAL_RCC_GetSysClockFreq+0x140>)
 8015a22:	2300      	movs	r3, #0
 8015a24:	f7ea fdcc 	bl	80005c0 <__aeabi_lmul>
 8015a28:	0002      	movs	r2, r0
 8015a2a:	000b      	movs	r3, r1
 8015a2c:	0010      	movs	r0, r2
 8015a2e:	0019      	movs	r1, r3
 8015a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a32:	001c      	movs	r4, r3
 8015a34:	2300      	movs	r3, #0
 8015a36:	001d      	movs	r5, r3
 8015a38:	0022      	movs	r2, r4
 8015a3a:	002b      	movs	r3, r5
 8015a3c:	f7ea fda0 	bl	8000580 <__aeabi_uldivmod>
 8015a40:	0002      	movs	r2, r0
 8015a42:	000b      	movs	r3, r1
 8015a44:	0013      	movs	r3, r2
 8015a46:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8015a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015a4a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015a4c:	e00d      	b.n	8015a6a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8015a4e:	4b09      	ldr	r3, [pc, #36]	@ (8015a74 <HAL_RCC_GetSysClockFreq+0x138>)
 8015a50:	685b      	ldr	r3, [r3, #4]
 8015a52:	0b5b      	lsrs	r3, r3, #13
 8015a54:	2207      	movs	r2, #7
 8015a56:	4013      	ands	r3, r2
 8015a58:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8015a5a:	6a3b      	ldr	r3, [r7, #32]
 8015a5c:	3301      	adds	r3, #1
 8015a5e:	2280      	movs	r2, #128	@ 0x80
 8015a60:	0212      	lsls	r2, r2, #8
 8015a62:	409a      	lsls	r2, r3
 8015a64:	0013      	movs	r3, r2
 8015a66:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8015a68:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8015a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8015a6c:	0018      	movs	r0, r3
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	b00e      	add	sp, #56	@ 0x38
 8015a72:	bdb0      	pop	{r4, r5, r7, pc}
 8015a74:	40021000 	.word	0x40021000
 8015a78:	003d0900 	.word	0x003d0900
 8015a7c:	00f42400 	.word	0x00f42400
 8015a80:	007a1200 	.word	0x007a1200
 8015a84:	080255ac 	.word	0x080255ac

08015a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015a8c:	4b02      	ldr	r3, [pc, #8]	@ (8015a98 <HAL_RCC_GetHCLKFreq+0x10>)
 8015a8e:	681b      	ldr	r3, [r3, #0]
}
 8015a90:	0018      	movs	r0, r3
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}
 8015a96:	46c0      	nop			@ (mov r8, r8)
 8015a98:	200000cc 	.word	0x200000cc

08015a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8015aa0:	f7ff fff2 	bl	8015a88 <HAL_RCC_GetHCLKFreq>
 8015aa4:	0001      	movs	r1, r0
 8015aa6:	4b06      	ldr	r3, [pc, #24]	@ (8015ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8015aa8:	68db      	ldr	r3, [r3, #12]
 8015aaa:	0a1b      	lsrs	r3, r3, #8
 8015aac:	2207      	movs	r2, #7
 8015aae:	4013      	ands	r3, r2
 8015ab0:	4a04      	ldr	r2, [pc, #16]	@ (8015ac4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8015ab2:	5cd3      	ldrb	r3, [r2, r3]
 8015ab4:	40d9      	lsrs	r1, r3
 8015ab6:	000b      	movs	r3, r1
}
 8015ab8:	0018      	movs	r0, r3
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bd80      	pop	{r7, pc}
 8015abe:	46c0      	nop			@ (mov r8, r8)
 8015ac0:	40021000 	.word	0x40021000
 8015ac4:	080255a4 	.word	0x080255a4

08015ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8015acc:	f7ff ffdc 	bl	8015a88 <HAL_RCC_GetHCLKFreq>
 8015ad0:	0001      	movs	r1, r0
 8015ad2:	4b06      	ldr	r3, [pc, #24]	@ (8015aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8015ad4:	68db      	ldr	r3, [r3, #12]
 8015ad6:	0adb      	lsrs	r3, r3, #11
 8015ad8:	2207      	movs	r2, #7
 8015ada:	4013      	ands	r3, r2
 8015adc:	4a04      	ldr	r2, [pc, #16]	@ (8015af0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8015ade:	5cd3      	ldrb	r3, [r2, r3]
 8015ae0:	40d9      	lsrs	r1, r3
 8015ae2:	000b      	movs	r3, r1
}
 8015ae4:	0018      	movs	r0, r3
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	bd80      	pop	{r7, pc}
 8015aea:	46c0      	nop			@ (mov r8, r8)
 8015aec:	40021000 	.word	0x40021000
 8015af0:	080255a4 	.word	0x080255a4

08015af4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b086      	sub	sp, #24
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8015afc:	2017      	movs	r0, #23
 8015afe:	183b      	adds	r3, r7, r0
 8015b00:	2200      	movs	r2, #0
 8015b02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	2220      	movs	r2, #32
 8015b0a:	4013      	ands	r3, r2
 8015b0c:	d100      	bne.n	8015b10 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8015b0e:	e0c7      	b.n	8015ca0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015b10:	4b9b      	ldr	r3, [pc, #620]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015b12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015b14:	2380      	movs	r3, #128	@ 0x80
 8015b16:	055b      	lsls	r3, r3, #21
 8015b18:	4013      	ands	r3, r2
 8015b1a:	d109      	bne.n	8015b30 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015b1c:	4b98      	ldr	r3, [pc, #608]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015b1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015b20:	4b97      	ldr	r3, [pc, #604]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015b22:	2180      	movs	r1, #128	@ 0x80
 8015b24:	0549      	lsls	r1, r1, #21
 8015b26:	430a      	orrs	r2, r1
 8015b28:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8015b2a:	183b      	adds	r3, r7, r0
 8015b2c:	2201      	movs	r2, #1
 8015b2e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015b30:	4b94      	ldr	r3, [pc, #592]	@ (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015b32:	681a      	ldr	r2, [r3, #0]
 8015b34:	2380      	movs	r3, #128	@ 0x80
 8015b36:	005b      	lsls	r3, r3, #1
 8015b38:	4013      	ands	r3, r2
 8015b3a:	d11a      	bne.n	8015b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015b3c:	4b91      	ldr	r3, [pc, #580]	@ (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015b3e:	681a      	ldr	r2, [r3, #0]
 8015b40:	4b90      	ldr	r3, [pc, #576]	@ (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015b42:	2180      	movs	r1, #128	@ 0x80
 8015b44:	0049      	lsls	r1, r1, #1
 8015b46:	430a      	orrs	r2, r1
 8015b48:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015b4a:	f7f9 f8ab 	bl	800eca4 <HAL_GetTick>
 8015b4e:	0003      	movs	r3, r0
 8015b50:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015b52:	e008      	b.n	8015b66 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015b54:	f7f9 f8a6 	bl	800eca4 <HAL_GetTick>
 8015b58:	0002      	movs	r2, r0
 8015b5a:	693b      	ldr	r3, [r7, #16]
 8015b5c:	1ad3      	subs	r3, r2, r3
 8015b5e:	2b64      	cmp	r3, #100	@ 0x64
 8015b60:	d901      	bls.n	8015b66 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8015b62:	2303      	movs	r3, #3
 8015b64:	e107      	b.n	8015d76 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015b66:	4b87      	ldr	r3, [pc, #540]	@ (8015d84 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8015b68:	681a      	ldr	r2, [r3, #0]
 8015b6a:	2380      	movs	r3, #128	@ 0x80
 8015b6c:	005b      	lsls	r3, r3, #1
 8015b6e:	4013      	ands	r3, r2
 8015b70:	d0f0      	beq.n	8015b54 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8015b72:	4b83      	ldr	r3, [pc, #524]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015b74:	681a      	ldr	r2, [r3, #0]
 8015b76:	23c0      	movs	r3, #192	@ 0xc0
 8015b78:	039b      	lsls	r3, r3, #14
 8015b7a:	4013      	ands	r3, r2
 8015b7c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	685a      	ldr	r2, [r3, #4]
 8015b82:	23c0      	movs	r3, #192	@ 0xc0
 8015b84:	039b      	lsls	r3, r3, #14
 8015b86:	4013      	ands	r3, r2
 8015b88:	68fa      	ldr	r2, [r7, #12]
 8015b8a:	429a      	cmp	r2, r3
 8015b8c:	d013      	beq.n	8015bb6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	685a      	ldr	r2, [r3, #4]
 8015b92:	23c0      	movs	r3, #192	@ 0xc0
 8015b94:	029b      	lsls	r3, r3, #10
 8015b96:	401a      	ands	r2, r3
 8015b98:	23c0      	movs	r3, #192	@ 0xc0
 8015b9a:	029b      	lsls	r3, r3, #10
 8015b9c:	429a      	cmp	r2, r3
 8015b9e:	d10a      	bne.n	8015bb6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8015ba0:	4b77      	ldr	r3, [pc, #476]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ba2:	681a      	ldr	r2, [r3, #0]
 8015ba4:	2380      	movs	r3, #128	@ 0x80
 8015ba6:	029b      	lsls	r3, r3, #10
 8015ba8:	401a      	ands	r2, r3
 8015baa:	2380      	movs	r3, #128	@ 0x80
 8015bac:	029b      	lsls	r3, r3, #10
 8015bae:	429a      	cmp	r2, r3
 8015bb0:	d101      	bne.n	8015bb6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8015bb2:	2301      	movs	r3, #1
 8015bb4:	e0df      	b.n	8015d76 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8015bb6:	4b72      	ldr	r3, [pc, #456]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015bba:	23c0      	movs	r3, #192	@ 0xc0
 8015bbc:	029b      	lsls	r3, r3, #10
 8015bbe:	4013      	ands	r3, r2
 8015bc0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d03b      	beq.n	8015c40 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	685a      	ldr	r2, [r3, #4]
 8015bcc:	23c0      	movs	r3, #192	@ 0xc0
 8015bce:	029b      	lsls	r3, r3, #10
 8015bd0:	4013      	ands	r3, r2
 8015bd2:	68fa      	ldr	r2, [r7, #12]
 8015bd4:	429a      	cmp	r2, r3
 8015bd6:	d033      	beq.n	8015c40 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	2220      	movs	r2, #32
 8015bde:	4013      	ands	r3, r2
 8015be0:	d02e      	beq.n	8015c40 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8015be2:	4b67      	ldr	r3, [pc, #412]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015be6:	4a68      	ldr	r2, [pc, #416]	@ (8015d88 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015be8:	4013      	ands	r3, r2
 8015bea:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8015bec:	4b64      	ldr	r3, [pc, #400]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015bf0:	4b63      	ldr	r3, [pc, #396]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bf2:	2180      	movs	r1, #128	@ 0x80
 8015bf4:	0309      	lsls	r1, r1, #12
 8015bf6:	430a      	orrs	r2, r1
 8015bf8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8015bfa:	4b61      	ldr	r3, [pc, #388]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015bfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015bfe:	4b60      	ldr	r3, [pc, #384]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c00:	4962      	ldr	r1, [pc, #392]	@ (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8015c02:	400a      	ands	r2, r1
 8015c04:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8015c06:	4b5e      	ldr	r3, [pc, #376]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c08:	68fa      	ldr	r2, [r7, #12]
 8015c0a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8015c0c:	68fa      	ldr	r2, [r7, #12]
 8015c0e:	2380      	movs	r3, #128	@ 0x80
 8015c10:	005b      	lsls	r3, r3, #1
 8015c12:	4013      	ands	r3, r2
 8015c14:	d014      	beq.n	8015c40 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015c16:	f7f9 f845 	bl	800eca4 <HAL_GetTick>
 8015c1a:	0003      	movs	r3, r0
 8015c1c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015c1e:	e009      	b.n	8015c34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015c20:	f7f9 f840 	bl	800eca4 <HAL_GetTick>
 8015c24:	0002      	movs	r2, r0
 8015c26:	693b      	ldr	r3, [r7, #16]
 8015c28:	1ad3      	subs	r3, r2, r3
 8015c2a:	4a59      	ldr	r2, [pc, #356]	@ (8015d90 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8015c2c:	4293      	cmp	r3, r2
 8015c2e:	d901      	bls.n	8015c34 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8015c30:	2303      	movs	r3, #3
 8015c32:	e0a0      	b.n	8015d76 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015c34:	4b52      	ldr	r3, [pc, #328]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015c38:	2380      	movs	r3, #128	@ 0x80
 8015c3a:	009b      	lsls	r3, r3, #2
 8015c3c:	4013      	ands	r3, r2
 8015c3e:	d0ef      	beq.n	8015c20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	2220      	movs	r2, #32
 8015c46:	4013      	ands	r3, r2
 8015c48:	d01f      	beq.n	8015c8a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	685a      	ldr	r2, [r3, #4]
 8015c4e:	23c0      	movs	r3, #192	@ 0xc0
 8015c50:	029b      	lsls	r3, r3, #10
 8015c52:	401a      	ands	r2, r3
 8015c54:	23c0      	movs	r3, #192	@ 0xc0
 8015c56:	029b      	lsls	r3, r3, #10
 8015c58:	429a      	cmp	r2, r3
 8015c5a:	d10c      	bne.n	8015c76 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8015c5c:	4b48      	ldr	r3, [pc, #288]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	4a4c      	ldr	r2, [pc, #304]	@ (8015d94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8015c62:	4013      	ands	r3, r2
 8015c64:	0019      	movs	r1, r3
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	685a      	ldr	r2, [r3, #4]
 8015c6a:	23c0      	movs	r3, #192	@ 0xc0
 8015c6c:	039b      	lsls	r3, r3, #14
 8015c6e:	401a      	ands	r2, r3
 8015c70:	4b43      	ldr	r3, [pc, #268]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c72:	430a      	orrs	r2, r1
 8015c74:	601a      	str	r2, [r3, #0]
 8015c76:	4b42      	ldr	r3, [pc, #264]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c78:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	685a      	ldr	r2, [r3, #4]
 8015c7e:	23c0      	movs	r3, #192	@ 0xc0
 8015c80:	029b      	lsls	r3, r3, #10
 8015c82:	401a      	ands	r2, r3
 8015c84:	4b3e      	ldr	r3, [pc, #248]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c86:	430a      	orrs	r2, r1
 8015c88:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8015c8a:	2317      	movs	r3, #23
 8015c8c:	18fb      	adds	r3, r7, r3
 8015c8e:	781b      	ldrb	r3, [r3, #0]
 8015c90:	2b01      	cmp	r3, #1
 8015c92:	d105      	bne.n	8015ca0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015c94:	4b3a      	ldr	r3, [pc, #232]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015c98:	4b39      	ldr	r3, [pc, #228]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015c9a:	493f      	ldr	r1, [pc, #252]	@ (8015d98 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8015c9c:	400a      	ands	r2, r1
 8015c9e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	2201      	movs	r2, #1
 8015ca6:	4013      	ands	r3, r2
 8015ca8:	d009      	beq.n	8015cbe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8015caa:	4b35      	ldr	r3, [pc, #212]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015cae:	2203      	movs	r2, #3
 8015cb0:	4393      	bics	r3, r2
 8015cb2:	0019      	movs	r1, r3
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	689a      	ldr	r2, [r3, #8]
 8015cb8:	4b31      	ldr	r3, [pc, #196]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cba:	430a      	orrs	r2, r1
 8015cbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	2202      	movs	r2, #2
 8015cc4:	4013      	ands	r3, r2
 8015cc6:	d009      	beq.n	8015cdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8015cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015ccc:	220c      	movs	r2, #12
 8015cce:	4393      	bics	r3, r2
 8015cd0:	0019      	movs	r1, r3
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	68da      	ldr	r2, [r3, #12]
 8015cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cd8:	430a      	orrs	r2, r1
 8015cda:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	2204      	movs	r2, #4
 8015ce2:	4013      	ands	r3, r2
 8015ce4:	d009      	beq.n	8015cfa <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015ce6:	4b26      	ldr	r3, [pc, #152]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015cea:	4a2c      	ldr	r2, [pc, #176]	@ (8015d9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8015cec:	4013      	ands	r3, r2
 8015cee:	0019      	movs	r1, r3
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	691a      	ldr	r2, [r3, #16]
 8015cf4:	4b22      	ldr	r3, [pc, #136]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015cf6:	430a      	orrs	r2, r1
 8015cf8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	2208      	movs	r2, #8
 8015d00:	4013      	ands	r3, r2
 8015d02:	d009      	beq.n	8015d18 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8015d04:	4b1e      	ldr	r3, [pc, #120]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d08:	4a25      	ldr	r2, [pc, #148]	@ (8015da0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8015d0a:	4013      	ands	r3, r2
 8015d0c:	0019      	movs	r1, r3
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	695a      	ldr	r2, [r3, #20]
 8015d12:	4b1b      	ldr	r3, [pc, #108]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d14:	430a      	orrs	r2, r1
 8015d16:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	681a      	ldr	r2, [r3, #0]
 8015d1c:	2380      	movs	r3, #128	@ 0x80
 8015d1e:	005b      	lsls	r3, r3, #1
 8015d20:	4013      	ands	r3, r2
 8015d22:	d009      	beq.n	8015d38 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8015d24:	4b16      	ldr	r3, [pc, #88]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d28:	4a17      	ldr	r2, [pc, #92]	@ (8015d88 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8015d2a:	4013      	ands	r3, r2
 8015d2c:	0019      	movs	r1, r3
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	699a      	ldr	r2, [r3, #24]
 8015d32:	4b13      	ldr	r3, [pc, #76]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d34:	430a      	orrs	r2, r1
 8015d36:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	2240      	movs	r2, #64	@ 0x40
 8015d3e:	4013      	ands	r3, r2
 8015d40:	d009      	beq.n	8015d56 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015d42:	4b0f      	ldr	r3, [pc, #60]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d46:	4a17      	ldr	r2, [pc, #92]	@ (8015da4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8015d48:	4013      	ands	r3, r2
 8015d4a:	0019      	movs	r1, r3
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	6a1a      	ldr	r2, [r3, #32]
 8015d50:	4b0b      	ldr	r3, [pc, #44]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d52:	430a      	orrs	r2, r1
 8015d54:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	2280      	movs	r2, #128	@ 0x80
 8015d5c:	4013      	ands	r3, r2
 8015d5e:	d009      	beq.n	8015d74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8015d60:	4b07      	ldr	r3, [pc, #28]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d64:	4a10      	ldr	r2, [pc, #64]	@ (8015da8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8015d66:	4013      	ands	r3, r2
 8015d68:	0019      	movs	r1, r3
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	69da      	ldr	r2, [r3, #28]
 8015d6e:	4b04      	ldr	r3, [pc, #16]	@ (8015d80 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8015d70:	430a      	orrs	r2, r1
 8015d72:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8015d74:	2300      	movs	r3, #0
}
 8015d76:	0018      	movs	r0, r3
 8015d78:	46bd      	mov	sp, r7
 8015d7a:	b006      	add	sp, #24
 8015d7c:	bd80      	pop	{r7, pc}
 8015d7e:	46c0      	nop			@ (mov r8, r8)
 8015d80:	40021000 	.word	0x40021000
 8015d84:	40007000 	.word	0x40007000
 8015d88:	fffcffff 	.word	0xfffcffff
 8015d8c:	fff7ffff 	.word	0xfff7ffff
 8015d90:	00001388 	.word	0x00001388
 8015d94:	ffcfffff 	.word	0xffcfffff
 8015d98:	efffffff 	.word	0xefffffff
 8015d9c:	fffff3ff 	.word	0xfffff3ff
 8015da0:	ffffcfff 	.word	0xffffcfff
 8015da4:	fbffffff 	.word	0xfbffffff
 8015da8:	fff3ffff 	.word	0xfff3ffff

08015dac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8015dac:	b5b0      	push	{r4, r5, r7, lr}
 8015dae:	b084      	sub	sp, #16
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8015db4:	230f      	movs	r3, #15
 8015db6:	18fb      	adds	r3, r7, r3
 8015db8:	2201      	movs	r2, #1
 8015dba:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d101      	bne.n	8015dc6 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8015dc2:	2301      	movs	r3, #1
 8015dc4:	e088      	b.n	8015ed8 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	2221      	movs	r2, #33	@ 0x21
 8015dca:	5c9b      	ldrb	r3, [r3, r2]
 8015dcc:	b2db      	uxtb	r3, r3
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d107      	bne.n	8015de2 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	2220      	movs	r2, #32
 8015dd6:	2100      	movs	r1, #0
 8015dd8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	0018      	movs	r0, r3
 8015dde:	f7f3 f8d9 	bl	8008f94 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	2221      	movs	r2, #33	@ 0x21
 8015de6:	2102      	movs	r1, #2
 8015de8:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	68db      	ldr	r3, [r3, #12]
 8015df0:	2210      	movs	r2, #16
 8015df2:	4013      	ands	r3, r2
 8015df4:	2b10      	cmp	r3, #16
 8015df6:	d05f      	beq.n	8015eb8 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	22ca      	movs	r2, #202	@ 0xca
 8015dfe:	625a      	str	r2, [r3, #36]	@ 0x24
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	2253      	movs	r2, #83	@ 0x53
 8015e06:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8015e08:	250f      	movs	r5, #15
 8015e0a:	197c      	adds	r4, r7, r5
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	0018      	movs	r0, r3
 8015e10:	f000 fa7c 	bl	801630c <RTC_EnterInitMode>
 8015e14:	0003      	movs	r3, r0
 8015e16:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8015e18:	0028      	movs	r0, r5
 8015e1a:	183b      	adds	r3, r7, r0
 8015e1c:	781b      	ldrb	r3, [r3, #0]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d12c      	bne.n	8015e7c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	689a      	ldr	r2, [r3, #8]
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	492c      	ldr	r1, [pc, #176]	@ (8015ee0 <HAL_RTC_Init+0x134>)
 8015e2e:	400a      	ands	r2, r1
 8015e30:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	6899      	ldr	r1, [r3, #8]
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	685a      	ldr	r2, [r3, #4]
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	691b      	ldr	r3, [r3, #16]
 8015e40:	431a      	orrs	r2, r3
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	699b      	ldr	r3, [r3, #24]
 8015e46:	431a      	orrs	r2, r3
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	430a      	orrs	r2, r1
 8015e4e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	687a      	ldr	r2, [r7, #4]
 8015e56:	68d2      	ldr	r2, [r2, #12]
 8015e58:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	681b      	ldr	r3, [r3, #0]
 8015e5e:	6919      	ldr	r1, [r3, #16]
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	689b      	ldr	r3, [r3, #8]
 8015e64:	041a      	lsls	r2, r3, #16
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	430a      	orrs	r2, r1
 8015e6c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8015e6e:	183c      	adds	r4, r7, r0
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	0018      	movs	r0, r3
 8015e74:	f000 fa8e 	bl	8016394 <RTC_ExitInitMode>
 8015e78:	0003      	movs	r3, r0
 8015e7a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8015e7c:	230f      	movs	r3, #15
 8015e7e:	18fb      	adds	r3, r7, r3
 8015e80:	781b      	ldrb	r3, [r3, #0]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d113      	bne.n	8015eae <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	2103      	movs	r1, #3
 8015e92:	438a      	bics	r2, r1
 8015e94:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	69da      	ldr	r2, [r3, #28]
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	695b      	ldr	r3, [r3, #20]
 8015ea4:	431a      	orrs	r2, r3
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	430a      	orrs	r2, r1
 8015eac:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	22ff      	movs	r2, #255	@ 0xff
 8015eb4:	625a      	str	r2, [r3, #36]	@ 0x24
 8015eb6:	e003      	b.n	8015ec0 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8015eb8:	230f      	movs	r3, #15
 8015eba:	18fb      	adds	r3, r7, r3
 8015ebc:	2200      	movs	r2, #0
 8015ebe:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8015ec0:	230f      	movs	r3, #15
 8015ec2:	18fb      	adds	r3, r7, r3
 8015ec4:	781b      	ldrb	r3, [r3, #0]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d103      	bne.n	8015ed2 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	2221      	movs	r2, #33	@ 0x21
 8015ece:	2101      	movs	r1, #1
 8015ed0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8015ed2:	230f      	movs	r3, #15
 8015ed4:	18fb      	adds	r3, r7, r3
 8015ed6:	781b      	ldrb	r3, [r3, #0]
}
 8015ed8:	0018      	movs	r0, r3
 8015eda:	46bd      	mov	sp, r7
 8015edc:	b004      	add	sp, #16
 8015ede:	bdb0      	pop	{r4, r5, r7, pc}
 8015ee0:	ff8fffbf 	.word	0xff8fffbf

08015ee4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8015ee4:	b5b0      	push	{r4, r5, r7, lr}
 8015ee6:	b086      	sub	sp, #24
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	60f8      	str	r0, [r7, #12]
 8015eec:	60b9      	str	r1, [r7, #8]
 8015eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	2220      	movs	r2, #32
 8015ef8:	5c9b      	ldrb	r3, [r3, r2]
 8015efa:	2b01      	cmp	r3, #1
 8015efc:	d101      	bne.n	8015f02 <HAL_RTC_SetTime+0x1e>
 8015efe:	2302      	movs	r3, #2
 8015f00:	e092      	b.n	8016028 <HAL_RTC_SetTime+0x144>
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	2220      	movs	r2, #32
 8015f06:	2101      	movs	r1, #1
 8015f08:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	2221      	movs	r2, #33	@ 0x21
 8015f0e:	2102      	movs	r1, #2
 8015f10:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d125      	bne.n	8015f64 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	689b      	ldr	r3, [r3, #8]
 8015f1e:	2240      	movs	r2, #64	@ 0x40
 8015f20:	4013      	ands	r3, r2
 8015f22:	d102      	bne.n	8015f2a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015f24:	68bb      	ldr	r3, [r7, #8]
 8015f26:	2200      	movs	r2, #0
 8015f28:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015f2a:	68bb      	ldr	r3, [r7, #8]
 8015f2c:	781b      	ldrb	r3, [r3, #0]
 8015f2e:	0018      	movs	r0, r3
 8015f30:	f000 fa5a 	bl	80163e8 <RTC_ByteToBcd2>
 8015f34:	0003      	movs	r3, r0
 8015f36:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015f38:	68bb      	ldr	r3, [r7, #8]
 8015f3a:	785b      	ldrb	r3, [r3, #1]
 8015f3c:	0018      	movs	r0, r3
 8015f3e:	f000 fa53 	bl	80163e8 <RTC_ByteToBcd2>
 8015f42:	0003      	movs	r3, r0
 8015f44:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015f46:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8015f48:	68bb      	ldr	r3, [r7, #8]
 8015f4a:	789b      	ldrb	r3, [r3, #2]
 8015f4c:	0018      	movs	r0, r3
 8015f4e:	f000 fa4b 	bl	80163e8 <RTC_ByteToBcd2>
 8015f52:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8015f54:	0022      	movs	r2, r4
 8015f56:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8015f58:	68bb      	ldr	r3, [r7, #8]
 8015f5a:	78db      	ldrb	r3, [r3, #3]
 8015f5c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8015f5e:	4313      	orrs	r3, r2
 8015f60:	617b      	str	r3, [r7, #20]
 8015f62:	e017      	b.n	8015f94 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	689b      	ldr	r3, [r3, #8]
 8015f6a:	2240      	movs	r2, #64	@ 0x40
 8015f6c:	4013      	ands	r3, r2
 8015f6e:	d102      	bne.n	8015f76 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8015f70:	68bb      	ldr	r3, [r7, #8]
 8015f72:	2200      	movs	r2, #0
 8015f74:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015f76:	68bb      	ldr	r3, [r7, #8]
 8015f78:	781b      	ldrb	r3, [r3, #0]
 8015f7a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8015f7c:	68bb      	ldr	r3, [r7, #8]
 8015f7e:	785b      	ldrb	r3, [r3, #1]
 8015f80:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015f82:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8015f84:	68ba      	ldr	r2, [r7, #8]
 8015f86:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8015f88:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8015f8a:	68bb      	ldr	r3, [r7, #8]
 8015f8c:	78db      	ldrb	r3, [r3, #3]
 8015f8e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8015f90:	4313      	orrs	r3, r2
 8015f92:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	22ca      	movs	r2, #202	@ 0xca
 8015f9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	2253      	movs	r2, #83	@ 0x53
 8015fa2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8015fa4:	2513      	movs	r5, #19
 8015fa6:	197c      	adds	r4, r7, r5
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	0018      	movs	r0, r3
 8015fac:	f000 f9ae 	bl	801630c <RTC_EnterInitMode>
 8015fb0:	0003      	movs	r3, r0
 8015fb2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8015fb4:	0028      	movs	r0, r5
 8015fb6:	183b      	adds	r3, r7, r0
 8015fb8:	781b      	ldrb	r3, [r3, #0]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d120      	bne.n	8016000 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	697a      	ldr	r2, [r7, #20]
 8015fc4:	491a      	ldr	r1, [pc, #104]	@ (8016030 <HAL_RTC_SetTime+0x14c>)
 8015fc6:	400a      	ands	r2, r1
 8015fc8:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	689a      	ldr	r2, [r3, #8]
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	4917      	ldr	r1, [pc, #92]	@ (8016034 <HAL_RTC_SetTime+0x150>)
 8015fd6:	400a      	ands	r2, r1
 8015fd8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	6899      	ldr	r1, [r3, #8]
 8015fe0:	68bb      	ldr	r3, [r7, #8]
 8015fe2:	68da      	ldr	r2, [r3, #12]
 8015fe4:	68bb      	ldr	r3, [r7, #8]
 8015fe6:	691b      	ldr	r3, [r3, #16]
 8015fe8:	431a      	orrs	r2, r3
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	430a      	orrs	r2, r1
 8015ff0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8015ff2:	183c      	adds	r4, r7, r0
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	0018      	movs	r0, r3
 8015ff8:	f000 f9cc 	bl	8016394 <RTC_ExitInitMode>
 8015ffc:	0003      	movs	r3, r0
 8015ffe:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8016000:	2313      	movs	r3, #19
 8016002:	18fb      	adds	r3, r7, r3
 8016004:	781b      	ldrb	r3, [r3, #0]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d103      	bne.n	8016012 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	2221      	movs	r2, #33	@ 0x21
 801600e:	2101      	movs	r1, #1
 8016010:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	22ff      	movs	r2, #255	@ 0xff
 8016018:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	2220      	movs	r2, #32
 801601e:	2100      	movs	r1, #0
 8016020:	5499      	strb	r1, [r3, r2]

  return status;
 8016022:	2313      	movs	r3, #19
 8016024:	18fb      	adds	r3, r7, r3
 8016026:	781b      	ldrb	r3, [r3, #0]
}
 8016028:	0018      	movs	r0, r3
 801602a:	46bd      	mov	sp, r7
 801602c:	b006      	add	sp, #24
 801602e:	bdb0      	pop	{r4, r5, r7, pc}
 8016030:	007f7f7f 	.word	0x007f7f7f
 8016034:	fffbffff 	.word	0xfffbffff

08016038 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8016038:	b580      	push	{r7, lr}
 801603a:	b086      	sub	sp, #24
 801603c:	af00      	add	r7, sp, #0
 801603e:	60f8      	str	r0, [r7, #12]
 8016040:	60b9      	str	r1, [r7, #8]
 8016042:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8016044:	2300      	movs	r3, #0
 8016046:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801604e:	68bb      	ldr	r3, [r7, #8]
 8016050:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	691b      	ldr	r3, [r3, #16]
 8016058:	045b      	lsls	r3, r3, #17
 801605a:	0c5a      	lsrs	r2, r3, #17
 801605c:	68bb      	ldr	r3, [r7, #8]
 801605e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	4a22      	ldr	r2, [pc, #136]	@ (80160f0 <HAL_RTC_GetTime+0xb8>)
 8016068:	4013      	ands	r3, r2
 801606a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801606c:	697b      	ldr	r3, [r7, #20]
 801606e:	0c1b      	lsrs	r3, r3, #16
 8016070:	b2db      	uxtb	r3, r3
 8016072:	223f      	movs	r2, #63	@ 0x3f
 8016074:	4013      	ands	r3, r2
 8016076:	b2da      	uxtb	r2, r3
 8016078:	68bb      	ldr	r3, [r7, #8]
 801607a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801607c:	697b      	ldr	r3, [r7, #20]
 801607e:	0a1b      	lsrs	r3, r3, #8
 8016080:	b2db      	uxtb	r3, r3
 8016082:	227f      	movs	r2, #127	@ 0x7f
 8016084:	4013      	ands	r3, r2
 8016086:	b2da      	uxtb	r2, r3
 8016088:	68bb      	ldr	r3, [r7, #8]
 801608a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801608c:	697b      	ldr	r3, [r7, #20]
 801608e:	b2db      	uxtb	r3, r3
 8016090:	227f      	movs	r2, #127	@ 0x7f
 8016092:	4013      	ands	r3, r2
 8016094:	b2da      	uxtb	r2, r3
 8016096:	68bb      	ldr	r3, [r7, #8]
 8016098:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801609a:	697b      	ldr	r3, [r7, #20]
 801609c:	0d9b      	lsrs	r3, r3, #22
 801609e:	b2db      	uxtb	r3, r3
 80160a0:	2201      	movs	r2, #1
 80160a2:	4013      	ands	r3, r2
 80160a4:	b2da      	uxtb	r2, r3
 80160a6:	68bb      	ldr	r3, [r7, #8]
 80160a8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d11a      	bne.n	80160e6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80160b0:	68bb      	ldr	r3, [r7, #8]
 80160b2:	781b      	ldrb	r3, [r3, #0]
 80160b4:	0018      	movs	r0, r3
 80160b6:	f000 f9b8 	bl	801642a <RTC_Bcd2ToByte>
 80160ba:	0003      	movs	r3, r0
 80160bc:	001a      	movs	r2, r3
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80160c2:	68bb      	ldr	r3, [r7, #8]
 80160c4:	785b      	ldrb	r3, [r3, #1]
 80160c6:	0018      	movs	r0, r3
 80160c8:	f000 f9af 	bl	801642a <RTC_Bcd2ToByte>
 80160cc:	0003      	movs	r3, r0
 80160ce:	001a      	movs	r2, r3
 80160d0:	68bb      	ldr	r3, [r7, #8]
 80160d2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80160d4:	68bb      	ldr	r3, [r7, #8]
 80160d6:	789b      	ldrb	r3, [r3, #2]
 80160d8:	0018      	movs	r0, r3
 80160da:	f000 f9a6 	bl	801642a <RTC_Bcd2ToByte>
 80160de:	0003      	movs	r3, r0
 80160e0:	001a      	movs	r2, r3
 80160e2:	68bb      	ldr	r3, [r7, #8]
 80160e4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80160e6:	2300      	movs	r3, #0
}
 80160e8:	0018      	movs	r0, r3
 80160ea:	46bd      	mov	sp, r7
 80160ec:	b006      	add	sp, #24
 80160ee:	bd80      	pop	{r7, pc}
 80160f0:	007f7f7f 	.word	0x007f7f7f

080160f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80160f4:	b5b0      	push	{r4, r5, r7, lr}
 80160f6:	b086      	sub	sp, #24
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	60f8      	str	r0, [r7, #12]
 80160fc:	60b9      	str	r1, [r7, #8]
 80160fe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8016100:	2300      	movs	r3, #0
 8016102:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	2220      	movs	r2, #32
 8016108:	5c9b      	ldrb	r3, [r3, r2]
 801610a:	2b01      	cmp	r3, #1
 801610c:	d101      	bne.n	8016112 <HAL_RTC_SetDate+0x1e>
 801610e:	2302      	movs	r3, #2
 8016110:	e07e      	b.n	8016210 <HAL_RTC_SetDate+0x11c>
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	2220      	movs	r2, #32
 8016116:	2101      	movs	r1, #1
 8016118:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	2221      	movs	r2, #33	@ 0x21
 801611e:	2102      	movs	r1, #2
 8016120:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d10e      	bne.n	8016146 <HAL_RTC_SetDate+0x52>
 8016128:	68bb      	ldr	r3, [r7, #8]
 801612a:	785b      	ldrb	r3, [r3, #1]
 801612c:	001a      	movs	r2, r3
 801612e:	2310      	movs	r3, #16
 8016130:	4013      	ands	r3, r2
 8016132:	d008      	beq.n	8016146 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8016134:	68bb      	ldr	r3, [r7, #8]
 8016136:	785b      	ldrb	r3, [r3, #1]
 8016138:	2210      	movs	r2, #16
 801613a:	4393      	bics	r3, r2
 801613c:	b2db      	uxtb	r3, r3
 801613e:	330a      	adds	r3, #10
 8016140:	b2da      	uxtb	r2, r3
 8016142:	68bb      	ldr	r3, [r7, #8]
 8016144:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d11c      	bne.n	8016186 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801614c:	68bb      	ldr	r3, [r7, #8]
 801614e:	78db      	ldrb	r3, [r3, #3]
 8016150:	0018      	movs	r0, r3
 8016152:	f000 f949 	bl	80163e8 <RTC_ByteToBcd2>
 8016156:	0003      	movs	r3, r0
 8016158:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801615a:	68bb      	ldr	r3, [r7, #8]
 801615c:	785b      	ldrb	r3, [r3, #1]
 801615e:	0018      	movs	r0, r3
 8016160:	f000 f942 	bl	80163e8 <RTC_ByteToBcd2>
 8016164:	0003      	movs	r3, r0
 8016166:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016168:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801616a:	68bb      	ldr	r3, [r7, #8]
 801616c:	789b      	ldrb	r3, [r3, #2]
 801616e:	0018      	movs	r0, r3
 8016170:	f000 f93a 	bl	80163e8 <RTC_ByteToBcd2>
 8016174:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8016176:	0022      	movs	r2, r4
 8016178:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801617a:	68bb      	ldr	r3, [r7, #8]
 801617c:	781b      	ldrb	r3, [r3, #0]
 801617e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8016180:	4313      	orrs	r3, r2
 8016182:	617b      	str	r3, [r7, #20]
 8016184:	e00e      	b.n	80161a4 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016186:	68bb      	ldr	r3, [r7, #8]
 8016188:	78db      	ldrb	r3, [r3, #3]
 801618a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801618c:	68bb      	ldr	r3, [r7, #8]
 801618e:	785b      	ldrb	r3, [r3, #1]
 8016190:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8016192:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8016194:	68ba      	ldr	r2, [r7, #8]
 8016196:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8016198:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801619a:	68bb      	ldr	r3, [r7, #8]
 801619c:	781b      	ldrb	r3, [r3, #0]
 801619e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80161a0:	4313      	orrs	r3, r2
 80161a2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	22ca      	movs	r2, #202	@ 0xca
 80161aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	2253      	movs	r2, #83	@ 0x53
 80161b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80161b4:	2513      	movs	r5, #19
 80161b6:	197c      	adds	r4, r7, r5
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	0018      	movs	r0, r3
 80161bc:	f000 f8a6 	bl	801630c <RTC_EnterInitMode>
 80161c0:	0003      	movs	r3, r0
 80161c2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80161c4:	0028      	movs	r0, r5
 80161c6:	183b      	adds	r3, r7, r0
 80161c8:	781b      	ldrb	r3, [r3, #0]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d10c      	bne.n	80161e8 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	697a      	ldr	r2, [r7, #20]
 80161d4:	4910      	ldr	r1, [pc, #64]	@ (8016218 <HAL_RTC_SetDate+0x124>)
 80161d6:	400a      	ands	r2, r1
 80161d8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80161da:	183c      	adds	r4, r7, r0
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	0018      	movs	r0, r3
 80161e0:	f000 f8d8 	bl	8016394 <RTC_ExitInitMode>
 80161e4:	0003      	movs	r3, r0
 80161e6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80161e8:	2313      	movs	r3, #19
 80161ea:	18fb      	adds	r3, r7, r3
 80161ec:	781b      	ldrb	r3, [r3, #0]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d103      	bne.n	80161fa <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	2221      	movs	r2, #33	@ 0x21
 80161f6:	2101      	movs	r1, #1
 80161f8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	22ff      	movs	r2, #255	@ 0xff
 8016200:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	2220      	movs	r2, #32
 8016206:	2100      	movs	r1, #0
 8016208:	5499      	strb	r1, [r3, r2]

  return status;
 801620a:	2313      	movs	r3, #19
 801620c:	18fb      	adds	r3, r7, r3
 801620e:	781b      	ldrb	r3, [r3, #0]
}
 8016210:	0018      	movs	r0, r3
 8016212:	46bd      	mov	sp, r7
 8016214:	b006      	add	sp, #24
 8016216:	bdb0      	pop	{r4, r5, r7, pc}
 8016218:	00ffff3f 	.word	0x00ffff3f

0801621c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b086      	sub	sp, #24
 8016220:	af00      	add	r7, sp, #0
 8016222:	60f8      	str	r0, [r7, #12]
 8016224:	60b9      	str	r1, [r7, #8]
 8016226:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8016228:	2300      	movs	r3, #0
 801622a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	685b      	ldr	r3, [r3, #4]
 8016232:	4a21      	ldr	r2, [pc, #132]	@ (80162b8 <HAL_RTC_GetDate+0x9c>)
 8016234:	4013      	ands	r3, r2
 8016236:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8016238:	697b      	ldr	r3, [r7, #20]
 801623a:	0c1b      	lsrs	r3, r3, #16
 801623c:	b2da      	uxtb	r2, r3
 801623e:	68bb      	ldr	r3, [r7, #8]
 8016240:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8016242:	697b      	ldr	r3, [r7, #20]
 8016244:	0a1b      	lsrs	r3, r3, #8
 8016246:	b2db      	uxtb	r3, r3
 8016248:	221f      	movs	r2, #31
 801624a:	4013      	ands	r3, r2
 801624c:	b2da      	uxtb	r2, r3
 801624e:	68bb      	ldr	r3, [r7, #8]
 8016250:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8016252:	697b      	ldr	r3, [r7, #20]
 8016254:	b2db      	uxtb	r3, r3
 8016256:	223f      	movs	r2, #63	@ 0x3f
 8016258:	4013      	ands	r3, r2
 801625a:	b2da      	uxtb	r2, r3
 801625c:	68bb      	ldr	r3, [r7, #8]
 801625e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8016260:	697b      	ldr	r3, [r7, #20]
 8016262:	0b5b      	lsrs	r3, r3, #13
 8016264:	b2db      	uxtb	r3, r3
 8016266:	2207      	movs	r2, #7
 8016268:	4013      	ands	r3, r2
 801626a:	b2da      	uxtb	r2, r3
 801626c:	68bb      	ldr	r3, [r7, #8]
 801626e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d11a      	bne.n	80162ac <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8016276:	68bb      	ldr	r3, [r7, #8]
 8016278:	78db      	ldrb	r3, [r3, #3]
 801627a:	0018      	movs	r0, r3
 801627c:	f000 f8d5 	bl	801642a <RTC_Bcd2ToByte>
 8016280:	0003      	movs	r3, r0
 8016282:	001a      	movs	r2, r3
 8016284:	68bb      	ldr	r3, [r7, #8]
 8016286:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8016288:	68bb      	ldr	r3, [r7, #8]
 801628a:	785b      	ldrb	r3, [r3, #1]
 801628c:	0018      	movs	r0, r3
 801628e:	f000 f8cc 	bl	801642a <RTC_Bcd2ToByte>
 8016292:	0003      	movs	r3, r0
 8016294:	001a      	movs	r2, r3
 8016296:	68bb      	ldr	r3, [r7, #8]
 8016298:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 801629a:	68bb      	ldr	r3, [r7, #8]
 801629c:	789b      	ldrb	r3, [r3, #2]
 801629e:	0018      	movs	r0, r3
 80162a0:	f000 f8c3 	bl	801642a <RTC_Bcd2ToByte>
 80162a4:	0003      	movs	r3, r0
 80162a6:	001a      	movs	r2, r3
 80162a8:	68bb      	ldr	r3, [r7, #8]
 80162aa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80162ac:	2300      	movs	r3, #0
}
 80162ae:	0018      	movs	r0, r3
 80162b0:	46bd      	mov	sp, r7
 80162b2:	b006      	add	sp, #24
 80162b4:	bd80      	pop	{r7, pc}
 80162b6:	46c0      	nop			@ (mov r8, r8)
 80162b8:	00ffff3f 	.word	0x00ffff3f

080162bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b084      	sub	sp, #16
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80162c4:	2300      	movs	r3, #0
 80162c6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	4a0e      	ldr	r2, [pc, #56]	@ (8016308 <HAL_RTC_WaitForSynchro+0x4c>)
 80162ce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80162d0:	f7f8 fce8 	bl	800eca4 <HAL_GetTick>
 80162d4:	0003      	movs	r3, r0
 80162d6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80162d8:	e00a      	b.n	80162f0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80162da:	f7f8 fce3 	bl	800eca4 <HAL_GetTick>
 80162de:	0002      	movs	r2, r0
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	1ad2      	subs	r2, r2, r3
 80162e4:	23fa      	movs	r3, #250	@ 0xfa
 80162e6:	009b      	lsls	r3, r3, #2
 80162e8:	429a      	cmp	r2, r3
 80162ea:	d901      	bls.n	80162f0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80162ec:	2303      	movs	r3, #3
 80162ee:	e006      	b.n	80162fe <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	68db      	ldr	r3, [r3, #12]
 80162f6:	2220      	movs	r2, #32
 80162f8:	4013      	ands	r3, r2
 80162fa:	d0ee      	beq.n	80162da <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80162fc:	2300      	movs	r3, #0
}
 80162fe:	0018      	movs	r0, r3
 8016300:	46bd      	mov	sp, r7
 8016302:	b004      	add	sp, #16
 8016304:	bd80      	pop	{r7, pc}
 8016306:	46c0      	nop			@ (mov r8, r8)
 8016308:	0001ff5f 	.word	0x0001ff5f

0801630c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801630c:	b580      	push	{r7, lr}
 801630e:	b084      	sub	sp, #16
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016314:	2300      	movs	r3, #0
 8016316:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8016318:	230f      	movs	r3, #15
 801631a:	18fb      	adds	r3, r7, r3
 801631c:	2200      	movs	r2, #0
 801631e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	68db      	ldr	r3, [r3, #12]
 8016326:	2240      	movs	r2, #64	@ 0x40
 8016328:	4013      	ands	r3, r2
 801632a:	d12c      	bne.n	8016386 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	68da      	ldr	r2, [r3, #12]
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	2180      	movs	r1, #128	@ 0x80
 8016338:	430a      	orrs	r2, r1
 801633a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 801633c:	f7f8 fcb2 	bl	800eca4 <HAL_GetTick>
 8016340:	0003      	movs	r3, r0
 8016342:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016344:	e014      	b.n	8016370 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8016346:	f7f8 fcad 	bl	800eca4 <HAL_GetTick>
 801634a:	0002      	movs	r2, r0
 801634c:	68bb      	ldr	r3, [r7, #8]
 801634e:	1ad2      	subs	r2, r2, r3
 8016350:	200f      	movs	r0, #15
 8016352:	183b      	adds	r3, r7, r0
 8016354:	1839      	adds	r1, r7, r0
 8016356:	7809      	ldrb	r1, [r1, #0]
 8016358:	7019      	strb	r1, [r3, #0]
 801635a:	23fa      	movs	r3, #250	@ 0xfa
 801635c:	009b      	lsls	r3, r3, #2
 801635e:	429a      	cmp	r2, r3
 8016360:	d906      	bls.n	8016370 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	2221      	movs	r2, #33	@ 0x21
 8016366:	2104      	movs	r1, #4
 8016368:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 801636a:	183b      	adds	r3, r7, r0
 801636c:	2201      	movs	r2, #1
 801636e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	68db      	ldr	r3, [r3, #12]
 8016376:	2240      	movs	r2, #64	@ 0x40
 8016378:	4013      	ands	r3, r2
 801637a:	d104      	bne.n	8016386 <RTC_EnterInitMode+0x7a>
 801637c:	230f      	movs	r3, #15
 801637e:	18fb      	adds	r3, r7, r3
 8016380:	781b      	ldrb	r3, [r3, #0]
 8016382:	2b01      	cmp	r3, #1
 8016384:	d1df      	bne.n	8016346 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8016386:	230f      	movs	r3, #15
 8016388:	18fb      	adds	r3, r7, r3
 801638a:	781b      	ldrb	r3, [r3, #0]
}
 801638c:	0018      	movs	r0, r3
 801638e:	46bd      	mov	sp, r7
 8016390:	b004      	add	sp, #16
 8016392:	bd80      	pop	{r7, pc}

08016394 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8016394:	b590      	push	{r4, r7, lr}
 8016396:	b085      	sub	sp, #20
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801639c:	240f      	movs	r4, #15
 801639e:	193b      	adds	r3, r7, r4
 80163a0:	2200      	movs	r2, #0
 80163a2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	68da      	ldr	r2, [r3, #12]
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	2180      	movs	r1, #128	@ 0x80
 80163b0:	438a      	bics	r2, r1
 80163b2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	689b      	ldr	r3, [r3, #8]
 80163ba:	2220      	movs	r2, #32
 80163bc:	4013      	ands	r3, r2
 80163be:	d10c      	bne.n	80163da <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	0018      	movs	r0, r3
 80163c4:	f7ff ff7a 	bl	80162bc <HAL_RTC_WaitForSynchro>
 80163c8:	1e03      	subs	r3, r0, #0
 80163ca:	d006      	beq.n	80163da <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2221      	movs	r2, #33	@ 0x21
 80163d0:	2104      	movs	r1, #4
 80163d2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 80163d4:	193b      	adds	r3, r7, r4
 80163d6:	2201      	movs	r2, #1
 80163d8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80163da:	230f      	movs	r3, #15
 80163dc:	18fb      	adds	r3, r7, r3
 80163de:	781b      	ldrb	r3, [r3, #0]
}
 80163e0:	0018      	movs	r0, r3
 80163e2:	46bd      	mov	sp, r7
 80163e4:	b005      	add	sp, #20
 80163e6:	bd90      	pop	{r4, r7, pc}

080163e8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80163e8:	b580      	push	{r7, lr}
 80163ea:	b084      	sub	sp, #16
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	0002      	movs	r2, r0
 80163f0:	1dfb      	adds	r3, r7, #7
 80163f2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80163f4:	2300      	movs	r3, #0
 80163f6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80163f8:	e007      	b.n	801640a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	3301      	adds	r3, #1
 80163fe:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8016400:	1dfb      	adds	r3, r7, #7
 8016402:	1dfa      	adds	r2, r7, #7
 8016404:	7812      	ldrb	r2, [r2, #0]
 8016406:	3a0a      	subs	r2, #10
 8016408:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 801640a:	1dfb      	adds	r3, r7, #7
 801640c:	781b      	ldrb	r3, [r3, #0]
 801640e:	2b09      	cmp	r3, #9
 8016410:	d8f3      	bhi.n	80163fa <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	b2db      	uxtb	r3, r3
 8016416:	011b      	lsls	r3, r3, #4
 8016418:	b2da      	uxtb	r2, r3
 801641a:	1dfb      	adds	r3, r7, #7
 801641c:	781b      	ldrb	r3, [r3, #0]
 801641e:	4313      	orrs	r3, r2
 8016420:	b2db      	uxtb	r3, r3
}
 8016422:	0018      	movs	r0, r3
 8016424:	46bd      	mov	sp, r7
 8016426:	b004      	add	sp, #16
 8016428:	bd80      	pop	{r7, pc}

0801642a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 801642a:	b580      	push	{r7, lr}
 801642c:	b084      	sub	sp, #16
 801642e:	af00      	add	r7, sp, #0
 8016430:	0002      	movs	r2, r0
 8016432:	1dfb      	adds	r3, r7, #7
 8016434:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8016436:	2300      	movs	r3, #0
 8016438:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 801643a:	1dfb      	adds	r3, r7, #7
 801643c:	781b      	ldrb	r3, [r3, #0]
 801643e:	091b      	lsrs	r3, r3, #4
 8016440:	b2db      	uxtb	r3, r3
 8016442:	001a      	movs	r2, r3
 8016444:	0013      	movs	r3, r2
 8016446:	009b      	lsls	r3, r3, #2
 8016448:	189b      	adds	r3, r3, r2
 801644a:	005b      	lsls	r3, r3, #1
 801644c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	b2da      	uxtb	r2, r3
 8016452:	1dfb      	adds	r3, r7, #7
 8016454:	781b      	ldrb	r3, [r3, #0]
 8016456:	210f      	movs	r1, #15
 8016458:	400b      	ands	r3, r1
 801645a:	b2db      	uxtb	r3, r3
 801645c:	18d3      	adds	r3, r2, r3
 801645e:	b2db      	uxtb	r3, r3
}
 8016460:	0018      	movs	r0, r3
 8016462:	46bd      	mov	sp, r7
 8016464:	b004      	add	sp, #16
 8016466:	bd80      	pop	{r7, pc}

08016468 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b086      	sub	sp, #24
 801646c:	af00      	add	r7, sp, #0
 801646e:	60f8      	str	r0, [r7, #12]
 8016470:	60b9      	str	r1, [r7, #8]
 8016472:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8016474:	4b64      	ldr	r3, [pc, #400]	@ (8016608 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	22fa      	movs	r2, #250	@ 0xfa
 801647a:	01d1      	lsls	r1, r2, #7
 801647c:	0018      	movs	r0, r3
 801647e:	f7e9 fe91 	bl	80001a4 <__udivsi3>
 8016482:	0003      	movs	r3, r0
 8016484:	001a      	movs	r2, r3
 8016486:	0013      	movs	r3, r2
 8016488:	015b      	lsls	r3, r3, #5
 801648a:	1a9b      	subs	r3, r3, r2
 801648c:	009b      	lsls	r3, r3, #2
 801648e:	189b      	adds	r3, r3, r2
 8016490:	00db      	lsls	r3, r3, #3
 8016492:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	2220      	movs	r2, #32
 8016498:	5c9b      	ldrb	r3, [r3, r2]
 801649a:	2b01      	cmp	r3, #1
 801649c:	d101      	bne.n	80164a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 801649e:	2302      	movs	r3, #2
 80164a0:	e0ad      	b.n	80165fe <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	2220      	movs	r2, #32
 80164a6:	2101      	movs	r1, #1
 80164a8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	2221      	movs	r2, #33	@ 0x21
 80164ae:	2102      	movs	r1, #2
 80164b0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	22ca      	movs	r2, #202	@ 0xca
 80164b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	2253      	movs	r2, #83	@ 0x53
 80164c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	689a      	ldr	r2, [r3, #8]
 80164c8:	2380      	movs	r3, #128	@ 0x80
 80164ca:	00db      	lsls	r3, r3, #3
 80164cc:	4013      	ands	r3, r2
 80164ce:	d019      	beq.n	8016504 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80164d0:	697b      	ldr	r3, [r7, #20]
 80164d2:	3b01      	subs	r3, #1
 80164d4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80164d6:	697b      	ldr	r3, [r7, #20]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d10d      	bne.n	80164f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	22ff      	movs	r2, #255	@ 0xff
 80164e2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	2221      	movs	r2, #33	@ 0x21
 80164e8:	2103      	movs	r1, #3
 80164ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	2220      	movs	r2, #32
 80164f0:	2100      	movs	r1, #0
 80164f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80164f4:	2303      	movs	r3, #3
 80164f6:	e082      	b.n	80165fe <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	68db      	ldr	r3, [r3, #12]
 80164fe:	2204      	movs	r2, #4
 8016500:	4013      	ands	r3, r2
 8016502:	d1e5      	bne.n	80164d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	689a      	ldr	r2, [r3, #8]
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	493f      	ldr	r1, [pc, #252]	@ (801660c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8016510:	400a      	ands	r2, r1
 8016512:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	68db      	ldr	r3, [r3, #12]
 801651a:	22ff      	movs	r2, #255	@ 0xff
 801651c:	401a      	ands	r2, r3
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	493b      	ldr	r1, [pc, #236]	@ (8016610 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8016524:	430a      	orrs	r2, r1
 8016526:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8016528:	4b37      	ldr	r3, [pc, #220]	@ (8016608 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	22fa      	movs	r2, #250	@ 0xfa
 801652e:	01d1      	lsls	r1, r2, #7
 8016530:	0018      	movs	r0, r3
 8016532:	f7e9 fe37 	bl	80001a4 <__udivsi3>
 8016536:	0003      	movs	r3, r0
 8016538:	001a      	movs	r2, r3
 801653a:	0013      	movs	r3, r2
 801653c:	015b      	lsls	r3, r3, #5
 801653e:	1a9b      	subs	r3, r3, r2
 8016540:	009b      	lsls	r3, r3, #2
 8016542:	189b      	adds	r3, r3, r2
 8016544:	00db      	lsls	r3, r3, #3
 8016546:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8016548:	697b      	ldr	r3, [r7, #20]
 801654a:	3b01      	subs	r3, #1
 801654c:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 801654e:	697b      	ldr	r3, [r7, #20]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d10d      	bne.n	8016570 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	22ff      	movs	r2, #255	@ 0xff
 801655a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	2221      	movs	r2, #33	@ 0x21
 8016560:	2103      	movs	r1, #3
 8016562:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	2220      	movs	r2, #32
 8016568:	2100      	movs	r1, #0
 801656a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801656c:	2303      	movs	r3, #3
 801656e:	e046      	b.n	80165fe <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	68db      	ldr	r3, [r3, #12]
 8016576:	2204      	movs	r2, #4
 8016578:	4013      	ands	r3, r2
 801657a:	d0e5      	beq.n	8016548 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	689a      	ldr	r2, [r3, #8]
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	2107      	movs	r1, #7
 8016588:	438a      	bics	r2, r1
 801658a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	6899      	ldr	r1, [r3, #8]
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	687a      	ldr	r2, [r7, #4]
 8016598:	430a      	orrs	r2, r1
 801659a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	68ba      	ldr	r2, [r7, #8]
 80165a2:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80165a4:	4b1b      	ldr	r3, [pc, #108]	@ (8016614 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80165a6:	681a      	ldr	r2, [r3, #0]
 80165a8:	4b1a      	ldr	r3, [pc, #104]	@ (8016614 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80165aa:	2180      	movs	r1, #128	@ 0x80
 80165ac:	0349      	lsls	r1, r1, #13
 80165ae:	430a      	orrs	r2, r1
 80165b0:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80165b2:	4b18      	ldr	r3, [pc, #96]	@ (8016614 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80165b4:	689a      	ldr	r2, [r3, #8]
 80165b6:	4b17      	ldr	r3, [pc, #92]	@ (8016614 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80165b8:	2180      	movs	r1, #128	@ 0x80
 80165ba:	0349      	lsls	r1, r1, #13
 80165bc:	430a      	orrs	r2, r1
 80165be:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	689a      	ldr	r2, [r3, #8]
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	2180      	movs	r1, #128	@ 0x80
 80165cc:	01c9      	lsls	r1, r1, #7
 80165ce:	430a      	orrs	r2, r1
 80165d0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	689a      	ldr	r2, [r3, #8]
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	2180      	movs	r1, #128	@ 0x80
 80165de:	00c9      	lsls	r1, r1, #3
 80165e0:	430a      	orrs	r2, r1
 80165e2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	22ff      	movs	r2, #255	@ 0xff
 80165ea:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	2221      	movs	r2, #33	@ 0x21
 80165f0:	2101      	movs	r1, #1
 80165f2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	2220      	movs	r2, #32
 80165f8:	2100      	movs	r1, #0
 80165fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80165fc:	2300      	movs	r3, #0
}
 80165fe:	0018      	movs	r0, r3
 8016600:	46bd      	mov	sp, r7
 8016602:	b006      	add	sp, #24
 8016604:	bd80      	pop	{r7, pc}
 8016606:	46c0      	nop			@ (mov r8, r8)
 8016608:	200000cc 	.word	0x200000cc
 801660c:	fffffbff 	.word	0xfffffbff
 8016610:	fffffb7f 	.word	0xfffffb7f
 8016614:	40010400 	.word	0x40010400

08016618 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b084      	sub	sp, #16
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8016620:	2300      	movs	r3, #0
 8016622:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	2220      	movs	r2, #32
 8016628:	5c9b      	ldrb	r3, [r3, r2]
 801662a:	2b01      	cmp	r3, #1
 801662c:	d101      	bne.n	8016632 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 801662e:	2302      	movs	r3, #2
 8016630:	e04e      	b.n	80166d0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	2220      	movs	r2, #32
 8016636:	2101      	movs	r1, #1
 8016638:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	2221      	movs	r2, #33	@ 0x21
 801663e:	2102      	movs	r1, #2
 8016640:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	22ca      	movs	r2, #202	@ 0xca
 8016648:	625a      	str	r2, [r3, #36]	@ 0x24
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	2253      	movs	r2, #83	@ 0x53
 8016650:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	689a      	ldr	r2, [r3, #8]
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	491e      	ldr	r1, [pc, #120]	@ (80166d8 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 801665e:	400a      	ands	r2, r1
 8016660:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	689a      	ldr	r2, [r3, #8]
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	491b      	ldr	r1, [pc, #108]	@ (80166dc <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 801666e:	400a      	ands	r2, r1
 8016670:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016672:	f7f8 fb17 	bl	800eca4 <HAL_GetTick>
 8016676:	0003      	movs	r3, r0
 8016678:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801667a:	e016      	b.n	80166aa <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801667c:	f7f8 fb12 	bl	800eca4 <HAL_GetTick>
 8016680:	0002      	movs	r2, r0
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	1ad2      	subs	r2, r2, r3
 8016686:	23fa      	movs	r3, #250	@ 0xfa
 8016688:	009b      	lsls	r3, r3, #2
 801668a:	429a      	cmp	r2, r3
 801668c:	d90d      	bls.n	80166aa <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	22ff      	movs	r2, #255	@ 0xff
 8016694:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	2221      	movs	r2, #33	@ 0x21
 801669a:	2103      	movs	r1, #3
 801669c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	2220      	movs	r2, #32
 80166a2:	2100      	movs	r1, #0
 80166a4:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80166a6:	2303      	movs	r3, #3
 80166a8:	e012      	b.n	80166d0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	68db      	ldr	r3, [r3, #12]
 80166b0:	2204      	movs	r2, #4
 80166b2:	4013      	ands	r3, r2
 80166b4:	d0e2      	beq.n	801667c <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	22ff      	movs	r2, #255	@ 0xff
 80166bc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	2221      	movs	r2, #33	@ 0x21
 80166c2:	2101      	movs	r1, #1
 80166c4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	2220      	movs	r2, #32
 80166ca:	2100      	movs	r1, #0
 80166cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80166ce:	2300      	movs	r3, #0
}
 80166d0:	0018      	movs	r0, r3
 80166d2:	46bd      	mov	sp, r7
 80166d4:	b004      	add	sp, #16
 80166d6:	bd80      	pop	{r7, pc}
 80166d8:	fffffbff 	.word	0xfffffbff
 80166dc:	ffffbfff 	.word	0xffffbfff

080166e0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80166e0:	b580      	push	{r7, lr}
 80166e2:	b082      	sub	sp, #8
 80166e4:	af00      	add	r7, sp, #0
 80166e6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80166e8:	4b13      	ldr	r3, [pc, #76]	@ (8016738 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80166ea:	2280      	movs	r2, #128	@ 0x80
 80166ec:	0352      	lsls	r2, r2, #13
 80166ee:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	689a      	ldr	r2, [r3, #8]
 80166f6:	2380      	movs	r3, #128	@ 0x80
 80166f8:	01db      	lsls	r3, r3, #7
 80166fa:	4013      	ands	r3, r2
 80166fc:	d014      	beq.n	8016728 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	68da      	ldr	r2, [r3, #12]
 8016704:	2380      	movs	r3, #128	@ 0x80
 8016706:	00db      	lsls	r3, r3, #3
 8016708:	4013      	ands	r3, r2
 801670a:	d00d      	beq.n	8016728 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	68db      	ldr	r3, [r3, #12]
 8016712:	22ff      	movs	r2, #255	@ 0xff
 8016714:	401a      	ands	r2, r3
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	4908      	ldr	r1, [pc, #32]	@ (801673c <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 801671c:	430a      	orrs	r2, r1
 801671e:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	0018      	movs	r0, r3
 8016724:	f000 f80c 	bl	8016740 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2221      	movs	r2, #33	@ 0x21
 801672c:	2101      	movs	r1, #1
 801672e:	5499      	strb	r1, [r3, r2]
}
 8016730:	46c0      	nop			@ (mov r8, r8)
 8016732:	46bd      	mov	sp, r7
 8016734:	b002      	add	sp, #8
 8016736:	bd80      	pop	{r7, pc}
 8016738:	40010400 	.word	0x40010400
 801673c:	fffffb7f 	.word	0xfffffb7f

08016740 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b082      	sub	sp, #8
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8016748:	46c0      	nop			@ (mov r8, r8)
 801674a:	46bd      	mov	sp, r7
 801674c:	b002      	add	sp, #8
 801674e:	bd80      	pop	{r7, pc}

08016750 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b086      	sub	sp, #24
 8016754:	af00      	add	r7, sp, #0
 8016756:	60f8      	str	r0, [r7, #12]
 8016758:	60b9      	str	r1, [r7, #8]
 801675a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 801675c:	2300      	movs	r3, #0
 801675e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	3350      	adds	r3, #80	@ 0x50
 8016766:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8016768:	68bb      	ldr	r3, [r7, #8]
 801676a:	009b      	lsls	r3, r3, #2
 801676c:	697a      	ldr	r2, [r7, #20]
 801676e:	18d3      	adds	r3, r2, r3
 8016770:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8016772:	697b      	ldr	r3, [r7, #20]
 8016774:	687a      	ldr	r2, [r7, #4]
 8016776:	601a      	str	r2, [r3, #0]
}
 8016778:	46c0      	nop			@ (mov r8, r8)
 801677a:	46bd      	mov	sp, r7
 801677c:	b006      	add	sp, #24
 801677e:	bd80      	pop	{r7, pc}

08016780 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 4)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b084      	sub	sp, #16
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
 8016788:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 801678a:	2300      	movs	r3, #0
 801678c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	3350      	adds	r3, #80	@ 0x50
 8016794:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8016796:	683b      	ldr	r3, [r7, #0]
 8016798:	009b      	lsls	r3, r3, #2
 801679a:	68fa      	ldr	r2, [r7, #12]
 801679c:	18d3      	adds	r3, r2, r3
 801679e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	681b      	ldr	r3, [r3, #0]
}
 80167a4:	0018      	movs	r0, r3
 80167a6:	46bd      	mov	sp, r7
 80167a8:	b004      	add	sp, #16
 80167aa:	bd80      	pop	{r7, pc}

080167ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b082      	sub	sp, #8
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d101      	bne.n	80167be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80167ba:	2301      	movs	r3, #1
 80167bc:	e032      	b.n	8016824 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	2239      	movs	r2, #57	@ 0x39
 80167c2:	5c9b      	ldrb	r3, [r3, r2]
 80167c4:	b2db      	uxtb	r3, r3
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d107      	bne.n	80167da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	2238      	movs	r2, #56	@ 0x38
 80167ce:	2100      	movs	r1, #0
 80167d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	0018      	movs	r0, r3
 80167d6:	f7f7 fb67 	bl	800dea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	2239      	movs	r2, #57	@ 0x39
 80167de:	2102      	movs	r1, #2
 80167e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	681a      	ldr	r2, [r3, #0]
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	3304      	adds	r3, #4
 80167ea:	0019      	movs	r1, r3
 80167ec:	0010      	movs	r0, r2
 80167ee:	f000 fa1d 	bl	8016c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	223e      	movs	r2, #62	@ 0x3e
 80167f6:	2101      	movs	r1, #1
 80167f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	223a      	movs	r2, #58	@ 0x3a
 80167fe:	2101      	movs	r1, #1
 8016800:	5499      	strb	r1, [r3, r2]
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	223b      	movs	r2, #59	@ 0x3b
 8016806:	2101      	movs	r1, #1
 8016808:	5499      	strb	r1, [r3, r2]
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	223c      	movs	r2, #60	@ 0x3c
 801680e:	2101      	movs	r1, #1
 8016810:	5499      	strb	r1, [r3, r2]
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	223d      	movs	r2, #61	@ 0x3d
 8016816:	2101      	movs	r1, #1
 8016818:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	2239      	movs	r2, #57	@ 0x39
 801681e:	2101      	movs	r1, #1
 8016820:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016822:	2300      	movs	r3, #0
}
 8016824:	0018      	movs	r0, r3
 8016826:	46bd      	mov	sp, r7
 8016828:	b002      	add	sp, #8
 801682a:	bd80      	pop	{r7, pc}

0801682c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b084      	sub	sp, #16
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	2239      	movs	r2, #57	@ 0x39
 8016838:	5c9b      	ldrb	r3, [r3, r2]
 801683a:	b2db      	uxtb	r3, r3
 801683c:	2b01      	cmp	r3, #1
 801683e:	d001      	beq.n	8016844 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8016840:	2301      	movs	r3, #1
 8016842:	e033      	b.n	80168ac <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	2239      	movs	r2, #57	@ 0x39
 8016848:	2102      	movs	r1, #2
 801684a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	681a      	ldr	r2, [r3, #0]
 8016850:	2380      	movs	r3, #128	@ 0x80
 8016852:	05db      	lsls	r3, r3, #23
 8016854:	429a      	cmp	r2, r3
 8016856:	d00e      	beq.n	8016876 <HAL_TIM_Base_Start+0x4a>
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	4a15      	ldr	r2, [pc, #84]	@ (80168b4 <HAL_TIM_Base_Start+0x88>)
 801685e:	4293      	cmp	r3, r2
 8016860:	d009      	beq.n	8016876 <HAL_TIM_Base_Start+0x4a>
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	4a14      	ldr	r2, [pc, #80]	@ (80168b8 <HAL_TIM_Base_Start+0x8c>)
 8016868:	4293      	cmp	r3, r2
 801686a:	d004      	beq.n	8016876 <HAL_TIM_Base_Start+0x4a>
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	4a12      	ldr	r2, [pc, #72]	@ (80168bc <HAL_TIM_Base_Start+0x90>)
 8016872:	4293      	cmp	r3, r2
 8016874:	d111      	bne.n	801689a <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	689b      	ldr	r3, [r3, #8]
 801687c:	2207      	movs	r2, #7
 801687e:	4013      	ands	r3, r2
 8016880:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	2b06      	cmp	r3, #6
 8016886:	d010      	beq.n	80168aa <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	681a      	ldr	r2, [r3, #0]
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	2101      	movs	r1, #1
 8016894:	430a      	orrs	r2, r1
 8016896:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016898:	e007      	b.n	80168aa <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	681a      	ldr	r2, [r3, #0]
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	2101      	movs	r1, #1
 80168a6:	430a      	orrs	r2, r1
 80168a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80168aa:	2300      	movs	r3, #0
}
 80168ac:	0018      	movs	r0, r3
 80168ae:	46bd      	mov	sp, r7
 80168b0:	b004      	add	sp, #16
 80168b2:	bd80      	pop	{r7, pc}
 80168b4:	40000400 	.word	0x40000400
 80168b8:	40010800 	.word	0x40010800
 80168bc:	40011400 	.word	0x40011400

080168c0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b082      	sub	sp, #8
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	6a1b      	ldr	r3, [r3, #32]
 80168ce:	4a0a      	ldr	r2, [pc, #40]	@ (80168f8 <HAL_TIM_Base_Stop+0x38>)
 80168d0:	4013      	ands	r3, r2
 80168d2:	d107      	bne.n	80168e4 <HAL_TIM_Base_Stop+0x24>
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	681a      	ldr	r2, [r3, #0]
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	2101      	movs	r1, #1
 80168e0:	438a      	bics	r2, r1
 80168e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	2239      	movs	r2, #57	@ 0x39
 80168e8:	2101      	movs	r1, #1
 80168ea:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80168ec:	2300      	movs	r3, #0
}
 80168ee:	0018      	movs	r0, r3
 80168f0:	46bd      	mov	sp, r7
 80168f2:	b002      	add	sp, #8
 80168f4:	bd80      	pop	{r7, pc}
 80168f6:	46c0      	nop			@ (mov r8, r8)
 80168f8:	00001111 	.word	0x00001111

080168fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b082      	sub	sp, #8
 8016900:	af00      	add	r7, sp, #0
 8016902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d101      	bne.n	801690e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801690a:	2301      	movs	r3, #1
 801690c:	e032      	b.n	8016974 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	2239      	movs	r2, #57	@ 0x39
 8016912:	5c9b      	ldrb	r3, [r3, r2]
 8016914:	b2db      	uxtb	r3, r3
 8016916:	2b00      	cmp	r3, #0
 8016918:	d107      	bne.n	801692a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	2238      	movs	r2, #56	@ 0x38
 801691e:	2100      	movs	r1, #0
 8016920:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	0018      	movs	r0, r3
 8016926:	f7f7 fa9b 	bl	800de60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	2239      	movs	r2, #57	@ 0x39
 801692e:	2102      	movs	r1, #2
 8016930:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	681a      	ldr	r2, [r3, #0]
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	3304      	adds	r3, #4
 801693a:	0019      	movs	r1, r3
 801693c:	0010      	movs	r0, r2
 801693e:	f000 f975 	bl	8016c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	223e      	movs	r2, #62	@ 0x3e
 8016946:	2101      	movs	r1, #1
 8016948:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	223a      	movs	r2, #58	@ 0x3a
 801694e:	2101      	movs	r1, #1
 8016950:	5499      	strb	r1, [r3, r2]
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	223b      	movs	r2, #59	@ 0x3b
 8016956:	2101      	movs	r1, #1
 8016958:	5499      	strb	r1, [r3, r2]
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	223c      	movs	r2, #60	@ 0x3c
 801695e:	2101      	movs	r1, #1
 8016960:	5499      	strb	r1, [r3, r2]
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	223d      	movs	r2, #61	@ 0x3d
 8016966:	2101      	movs	r1, #1
 8016968:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	2239      	movs	r2, #57	@ 0x39
 801696e:	2101      	movs	r1, #1
 8016970:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016972:	2300      	movs	r3, #0
}
 8016974:	0018      	movs	r0, r3
 8016976:	46bd      	mov	sp, r7
 8016978:	b002      	add	sp, #8
 801697a:	bd80      	pop	{r7, pc}

0801697c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b084      	sub	sp, #16
 8016980:	af00      	add	r7, sp, #0
 8016982:	6078      	str	r0, [r7, #4]
 8016984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d108      	bne.n	801699e <HAL_TIM_PWM_Start+0x22>
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	223a      	movs	r2, #58	@ 0x3a
 8016990:	5c9b      	ldrb	r3, [r3, r2]
 8016992:	b2db      	uxtb	r3, r3
 8016994:	3b01      	subs	r3, #1
 8016996:	1e5a      	subs	r2, r3, #1
 8016998:	4193      	sbcs	r3, r2
 801699a:	b2db      	uxtb	r3, r3
 801699c:	e01f      	b.n	80169de <HAL_TIM_PWM_Start+0x62>
 801699e:	683b      	ldr	r3, [r7, #0]
 80169a0:	2b04      	cmp	r3, #4
 80169a2:	d108      	bne.n	80169b6 <HAL_TIM_PWM_Start+0x3a>
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	223b      	movs	r2, #59	@ 0x3b
 80169a8:	5c9b      	ldrb	r3, [r3, r2]
 80169aa:	b2db      	uxtb	r3, r3
 80169ac:	3b01      	subs	r3, #1
 80169ae:	1e5a      	subs	r2, r3, #1
 80169b0:	4193      	sbcs	r3, r2
 80169b2:	b2db      	uxtb	r3, r3
 80169b4:	e013      	b.n	80169de <HAL_TIM_PWM_Start+0x62>
 80169b6:	683b      	ldr	r3, [r7, #0]
 80169b8:	2b08      	cmp	r3, #8
 80169ba:	d108      	bne.n	80169ce <HAL_TIM_PWM_Start+0x52>
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	223c      	movs	r2, #60	@ 0x3c
 80169c0:	5c9b      	ldrb	r3, [r3, r2]
 80169c2:	b2db      	uxtb	r3, r3
 80169c4:	3b01      	subs	r3, #1
 80169c6:	1e5a      	subs	r2, r3, #1
 80169c8:	4193      	sbcs	r3, r2
 80169ca:	b2db      	uxtb	r3, r3
 80169cc:	e007      	b.n	80169de <HAL_TIM_PWM_Start+0x62>
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	223d      	movs	r2, #61	@ 0x3d
 80169d2:	5c9b      	ldrb	r3, [r3, r2]
 80169d4:	b2db      	uxtb	r3, r3
 80169d6:	3b01      	subs	r3, #1
 80169d8:	1e5a      	subs	r2, r3, #1
 80169da:	4193      	sbcs	r3, r2
 80169dc:	b2db      	uxtb	r3, r3
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d001      	beq.n	80169e6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80169e2:	2301      	movs	r3, #1
 80169e4:	e052      	b.n	8016a8c <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80169e6:	683b      	ldr	r3, [r7, #0]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d104      	bne.n	80169f6 <HAL_TIM_PWM_Start+0x7a>
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	223a      	movs	r2, #58	@ 0x3a
 80169f0:	2102      	movs	r1, #2
 80169f2:	5499      	strb	r1, [r3, r2]
 80169f4:	e013      	b.n	8016a1e <HAL_TIM_PWM_Start+0xa2>
 80169f6:	683b      	ldr	r3, [r7, #0]
 80169f8:	2b04      	cmp	r3, #4
 80169fa:	d104      	bne.n	8016a06 <HAL_TIM_PWM_Start+0x8a>
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	223b      	movs	r2, #59	@ 0x3b
 8016a00:	2102      	movs	r1, #2
 8016a02:	5499      	strb	r1, [r3, r2]
 8016a04:	e00b      	b.n	8016a1e <HAL_TIM_PWM_Start+0xa2>
 8016a06:	683b      	ldr	r3, [r7, #0]
 8016a08:	2b08      	cmp	r3, #8
 8016a0a:	d104      	bne.n	8016a16 <HAL_TIM_PWM_Start+0x9a>
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	223c      	movs	r2, #60	@ 0x3c
 8016a10:	2102      	movs	r1, #2
 8016a12:	5499      	strb	r1, [r3, r2]
 8016a14:	e003      	b.n	8016a1e <HAL_TIM_PWM_Start+0xa2>
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	223d      	movs	r2, #61	@ 0x3d
 8016a1a:	2102      	movs	r1, #2
 8016a1c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	6839      	ldr	r1, [r7, #0]
 8016a24:	2201      	movs	r2, #1
 8016a26:	0018      	movs	r0, r3
 8016a28:	f000 fa62 	bl	8016ef0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	681a      	ldr	r2, [r3, #0]
 8016a30:	2380      	movs	r3, #128	@ 0x80
 8016a32:	05db      	lsls	r3, r3, #23
 8016a34:	429a      	cmp	r2, r3
 8016a36:	d00e      	beq.n	8016a56 <HAL_TIM_PWM_Start+0xda>
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	4a15      	ldr	r2, [pc, #84]	@ (8016a94 <HAL_TIM_PWM_Start+0x118>)
 8016a3e:	4293      	cmp	r3, r2
 8016a40:	d009      	beq.n	8016a56 <HAL_TIM_PWM_Start+0xda>
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	4a14      	ldr	r2, [pc, #80]	@ (8016a98 <HAL_TIM_PWM_Start+0x11c>)
 8016a48:	4293      	cmp	r3, r2
 8016a4a:	d004      	beq.n	8016a56 <HAL_TIM_PWM_Start+0xda>
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	4a12      	ldr	r2, [pc, #72]	@ (8016a9c <HAL_TIM_PWM_Start+0x120>)
 8016a52:	4293      	cmp	r3, r2
 8016a54:	d111      	bne.n	8016a7a <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	689b      	ldr	r3, [r3, #8]
 8016a5c:	2207      	movs	r2, #7
 8016a5e:	4013      	ands	r3, r2
 8016a60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	2b06      	cmp	r3, #6
 8016a66:	d010      	beq.n	8016a8a <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	681a      	ldr	r2, [r3, #0]
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	2101      	movs	r1, #1
 8016a74:	430a      	orrs	r2, r1
 8016a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016a78:	e007      	b.n	8016a8a <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	681a      	ldr	r2, [r3, #0]
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	2101      	movs	r1, #1
 8016a86:	430a      	orrs	r2, r1
 8016a88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016a8a:	2300      	movs	r3, #0
}
 8016a8c:	0018      	movs	r0, r3
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	b004      	add	sp, #16
 8016a92:	bd80      	pop	{r7, pc}
 8016a94:	40000400 	.word	0x40000400
 8016a98:	40010800 	.word	0x40010800
 8016a9c:	40011400 	.word	0x40011400

08016aa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b086      	sub	sp, #24
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	60f8      	str	r0, [r7, #12]
 8016aa8:	60b9      	str	r1, [r7, #8]
 8016aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016aac:	2317      	movs	r3, #23
 8016aae:	18fb      	adds	r3, r7, r3
 8016ab0:	2200      	movs	r2, #0
 8016ab2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	2238      	movs	r2, #56	@ 0x38
 8016ab8:	5c9b      	ldrb	r3, [r3, r2]
 8016aba:	2b01      	cmp	r3, #1
 8016abc:	d101      	bne.n	8016ac2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8016abe:	2302      	movs	r3, #2
 8016ac0:	e0ad      	b.n	8016c1e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	2238      	movs	r2, #56	@ 0x38
 8016ac6:	2101      	movs	r1, #1
 8016ac8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	2b0c      	cmp	r3, #12
 8016ace:	d100      	bne.n	8016ad2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8016ad0:	e076      	b.n	8016bc0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	2b0c      	cmp	r3, #12
 8016ad6:	d900      	bls.n	8016ada <HAL_TIM_PWM_ConfigChannel+0x3a>
 8016ad8:	e095      	b.n	8016c06 <HAL_TIM_PWM_ConfigChannel+0x166>
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	2b08      	cmp	r3, #8
 8016ade:	d04e      	beq.n	8016b7e <HAL_TIM_PWM_ConfigChannel+0xde>
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	2b08      	cmp	r3, #8
 8016ae4:	d900      	bls.n	8016ae8 <HAL_TIM_PWM_ConfigChannel+0x48>
 8016ae6:	e08e      	b.n	8016c06 <HAL_TIM_PWM_ConfigChannel+0x166>
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d003      	beq.n	8016af6 <HAL_TIM_PWM_ConfigChannel+0x56>
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	2b04      	cmp	r3, #4
 8016af2:	d021      	beq.n	8016b38 <HAL_TIM_PWM_ConfigChannel+0x98>
 8016af4:	e087      	b.n	8016c06 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	68ba      	ldr	r2, [r7, #8]
 8016afc:	0011      	movs	r1, r2
 8016afe:	0018      	movs	r0, r3
 8016b00:	f000 f8f2 	bl	8016ce8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	699a      	ldr	r2, [r3, #24]
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	2108      	movs	r1, #8
 8016b10:	430a      	orrs	r2, r1
 8016b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	699a      	ldr	r2, [r3, #24]
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	2104      	movs	r1, #4
 8016b20:	438a      	bics	r2, r1
 8016b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	6999      	ldr	r1, [r3, #24]
 8016b2a:	68bb      	ldr	r3, [r7, #8]
 8016b2c:	68da      	ldr	r2, [r3, #12]
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	430a      	orrs	r2, r1
 8016b34:	619a      	str	r2, [r3, #24]
      break;
 8016b36:	e06b      	b.n	8016c10 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	68ba      	ldr	r2, [r7, #8]
 8016b3e:	0011      	movs	r1, r2
 8016b40:	0018      	movs	r0, r3
 8016b42:	f000 f90d 	bl	8016d60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	699a      	ldr	r2, [r3, #24]
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	2180      	movs	r1, #128	@ 0x80
 8016b52:	0109      	lsls	r1, r1, #4
 8016b54:	430a      	orrs	r2, r1
 8016b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	699a      	ldr	r2, [r3, #24]
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	4931      	ldr	r1, [pc, #196]	@ (8016c28 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016b64:	400a      	ands	r2, r1
 8016b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	6999      	ldr	r1, [r3, #24]
 8016b6e:	68bb      	ldr	r3, [r7, #8]
 8016b70:	68db      	ldr	r3, [r3, #12]
 8016b72:	021a      	lsls	r2, r3, #8
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	430a      	orrs	r2, r1
 8016b7a:	619a      	str	r2, [r3, #24]
      break;
 8016b7c:	e048      	b.n	8016c10 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	68ba      	ldr	r2, [r7, #8]
 8016b84:	0011      	movs	r1, r2
 8016b86:	0018      	movs	r0, r3
 8016b88:	f000 f92c 	bl	8016de4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	69da      	ldr	r2, [r3, #28]
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	2108      	movs	r1, #8
 8016b98:	430a      	orrs	r2, r1
 8016b9a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	69da      	ldr	r2, [r3, #28]
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	2104      	movs	r1, #4
 8016ba8:	438a      	bics	r2, r1
 8016baa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	69d9      	ldr	r1, [r3, #28]
 8016bb2:	68bb      	ldr	r3, [r7, #8]
 8016bb4:	68da      	ldr	r2, [r3, #12]
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	430a      	orrs	r2, r1
 8016bbc:	61da      	str	r2, [r3, #28]
      break;
 8016bbe:	e027      	b.n	8016c10 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	68ba      	ldr	r2, [r7, #8]
 8016bc6:	0011      	movs	r1, r2
 8016bc8:	0018      	movs	r0, r3
 8016bca:	f000 f94b 	bl	8016e64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	69da      	ldr	r2, [r3, #28]
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	2180      	movs	r1, #128	@ 0x80
 8016bda:	0109      	lsls	r1, r1, #4
 8016bdc:	430a      	orrs	r2, r1
 8016bde:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	69da      	ldr	r2, [r3, #28]
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	490f      	ldr	r1, [pc, #60]	@ (8016c28 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8016bec:	400a      	ands	r2, r1
 8016bee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	69d9      	ldr	r1, [r3, #28]
 8016bf6:	68bb      	ldr	r3, [r7, #8]
 8016bf8:	68db      	ldr	r3, [r3, #12]
 8016bfa:	021a      	lsls	r2, r3, #8
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	430a      	orrs	r2, r1
 8016c02:	61da      	str	r2, [r3, #28]
      break;
 8016c04:	e004      	b.n	8016c10 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8016c06:	2317      	movs	r3, #23
 8016c08:	18fb      	adds	r3, r7, r3
 8016c0a:	2201      	movs	r2, #1
 8016c0c:	701a      	strb	r2, [r3, #0]
      break;
 8016c0e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	2238      	movs	r2, #56	@ 0x38
 8016c14:	2100      	movs	r1, #0
 8016c16:	5499      	strb	r1, [r3, r2]

  return status;
 8016c18:	2317      	movs	r3, #23
 8016c1a:	18fb      	adds	r3, r7, r3
 8016c1c:	781b      	ldrb	r3, [r3, #0]
}
 8016c1e:	0018      	movs	r0, r3
 8016c20:	46bd      	mov	sp, r7
 8016c22:	b006      	add	sp, #24
 8016c24:	bd80      	pop	{r7, pc}
 8016c26:	46c0      	nop			@ (mov r8, r8)
 8016c28:	fffffbff 	.word	0xfffffbff

08016c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8016c2c:	b580      	push	{r7, lr}
 8016c2e:	b084      	sub	sp, #16
 8016c30:	af00      	add	r7, sp, #0
 8016c32:	6078      	str	r0, [r7, #4]
 8016c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016c3c:	687a      	ldr	r2, [r7, #4]
 8016c3e:	2380      	movs	r3, #128	@ 0x80
 8016c40:	05db      	lsls	r3, r3, #23
 8016c42:	429a      	cmp	r2, r3
 8016c44:	d00b      	beq.n	8016c5e <TIM_Base_SetConfig+0x32>
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	4a23      	ldr	r2, [pc, #140]	@ (8016cd8 <TIM_Base_SetConfig+0xac>)
 8016c4a:	4293      	cmp	r3, r2
 8016c4c:	d007      	beq.n	8016c5e <TIM_Base_SetConfig+0x32>
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	4a22      	ldr	r2, [pc, #136]	@ (8016cdc <TIM_Base_SetConfig+0xb0>)
 8016c52:	4293      	cmp	r3, r2
 8016c54:	d003      	beq.n	8016c5e <TIM_Base_SetConfig+0x32>
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	4a21      	ldr	r2, [pc, #132]	@ (8016ce0 <TIM_Base_SetConfig+0xb4>)
 8016c5a:	4293      	cmp	r3, r2
 8016c5c:	d108      	bne.n	8016c70 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	2270      	movs	r2, #112	@ 0x70
 8016c62:	4393      	bics	r3, r2
 8016c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	685b      	ldr	r3, [r3, #4]
 8016c6a:	68fa      	ldr	r2, [r7, #12]
 8016c6c:	4313      	orrs	r3, r2
 8016c6e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016c70:	687a      	ldr	r2, [r7, #4]
 8016c72:	2380      	movs	r3, #128	@ 0x80
 8016c74:	05db      	lsls	r3, r3, #23
 8016c76:	429a      	cmp	r2, r3
 8016c78:	d00b      	beq.n	8016c92 <TIM_Base_SetConfig+0x66>
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	4a16      	ldr	r2, [pc, #88]	@ (8016cd8 <TIM_Base_SetConfig+0xac>)
 8016c7e:	4293      	cmp	r3, r2
 8016c80:	d007      	beq.n	8016c92 <TIM_Base_SetConfig+0x66>
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	4a15      	ldr	r2, [pc, #84]	@ (8016cdc <TIM_Base_SetConfig+0xb0>)
 8016c86:	4293      	cmp	r3, r2
 8016c88:	d003      	beq.n	8016c92 <TIM_Base_SetConfig+0x66>
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	4a14      	ldr	r2, [pc, #80]	@ (8016ce0 <TIM_Base_SetConfig+0xb4>)
 8016c8e:	4293      	cmp	r3, r2
 8016c90:	d108      	bne.n	8016ca4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	4a13      	ldr	r2, [pc, #76]	@ (8016ce4 <TIM_Base_SetConfig+0xb8>)
 8016c96:	4013      	ands	r3, r2
 8016c98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016c9a:	683b      	ldr	r3, [r7, #0]
 8016c9c:	68db      	ldr	r3, [r3, #12]
 8016c9e:	68fa      	ldr	r2, [r7, #12]
 8016ca0:	4313      	orrs	r3, r2
 8016ca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	2280      	movs	r2, #128	@ 0x80
 8016ca8:	4393      	bics	r3, r2
 8016caa:	001a      	movs	r2, r3
 8016cac:	683b      	ldr	r3, [r7, #0]
 8016cae:	691b      	ldr	r3, [r3, #16]
 8016cb0:	4313      	orrs	r3, r2
 8016cb2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	68fa      	ldr	r2, [r7, #12]
 8016cb8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016cba:	683b      	ldr	r3, [r7, #0]
 8016cbc:	689a      	ldr	r2, [r3, #8]
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8016cc2:	683b      	ldr	r3, [r7, #0]
 8016cc4:	681a      	ldr	r2, [r3, #0]
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	2201      	movs	r2, #1
 8016cce:	615a      	str	r2, [r3, #20]
}
 8016cd0:	46c0      	nop			@ (mov r8, r8)
 8016cd2:	46bd      	mov	sp, r7
 8016cd4:	b004      	add	sp, #16
 8016cd6:	bd80      	pop	{r7, pc}
 8016cd8:	40000400 	.word	0x40000400
 8016cdc:	40010800 	.word	0x40010800
 8016ce0:	40011400 	.word	0x40011400
 8016ce4:	fffffcff 	.word	0xfffffcff

08016ce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b086      	sub	sp, #24
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	6078      	str	r0, [r7, #4]
 8016cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	6a1b      	ldr	r3, [r3, #32]
 8016cf6:	2201      	movs	r2, #1
 8016cf8:	4393      	bics	r3, r2
 8016cfa:	001a      	movs	r2, r3
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	6a1b      	ldr	r3, [r3, #32]
 8016d04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	685b      	ldr	r3, [r3, #4]
 8016d0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	699b      	ldr	r3, [r3, #24]
 8016d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	2270      	movs	r2, #112	@ 0x70
 8016d16:	4393      	bics	r3, r2
 8016d18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	2203      	movs	r2, #3
 8016d1e:	4393      	bics	r3, r2
 8016d20:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016d22:	683b      	ldr	r3, [r7, #0]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	68fa      	ldr	r2, [r7, #12]
 8016d28:	4313      	orrs	r3, r2
 8016d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8016d2c:	697b      	ldr	r3, [r7, #20]
 8016d2e:	2202      	movs	r2, #2
 8016d30:	4393      	bics	r3, r2
 8016d32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8016d34:	683b      	ldr	r3, [r7, #0]
 8016d36:	689b      	ldr	r3, [r3, #8]
 8016d38:	697a      	ldr	r2, [r7, #20]
 8016d3a:	4313      	orrs	r3, r2
 8016d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	693a      	ldr	r2, [r7, #16]
 8016d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	68fa      	ldr	r2, [r7, #12]
 8016d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8016d4a:	683b      	ldr	r3, [r7, #0]
 8016d4c:	685a      	ldr	r2, [r3, #4]
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	697a      	ldr	r2, [r7, #20]
 8016d56:	621a      	str	r2, [r3, #32]
}
 8016d58:	46c0      	nop			@ (mov r8, r8)
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	b006      	add	sp, #24
 8016d5e:	bd80      	pop	{r7, pc}

08016d60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b086      	sub	sp, #24
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	6078      	str	r0, [r7, #4]
 8016d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	6a1b      	ldr	r3, [r3, #32]
 8016d6e:	2210      	movs	r2, #16
 8016d70:	4393      	bics	r3, r2
 8016d72:	001a      	movs	r2, r3
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	6a1b      	ldr	r3, [r3, #32]
 8016d7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	685b      	ldr	r3, [r3, #4]
 8016d82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	699b      	ldr	r3, [r3, #24]
 8016d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	4a13      	ldr	r2, [pc, #76]	@ (8016ddc <TIM_OC2_SetConfig+0x7c>)
 8016d8e:	4013      	ands	r3, r2
 8016d90:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	4a12      	ldr	r2, [pc, #72]	@ (8016de0 <TIM_OC2_SetConfig+0x80>)
 8016d96:	4013      	ands	r3, r2
 8016d98:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016d9a:	683b      	ldr	r3, [r7, #0]
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	021b      	lsls	r3, r3, #8
 8016da0:	68fa      	ldr	r2, [r7, #12]
 8016da2:	4313      	orrs	r3, r2
 8016da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016da6:	697b      	ldr	r3, [r7, #20]
 8016da8:	2220      	movs	r2, #32
 8016daa:	4393      	bics	r3, r2
 8016dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8016dae:	683b      	ldr	r3, [r7, #0]
 8016db0:	689b      	ldr	r3, [r3, #8]
 8016db2:	011b      	lsls	r3, r3, #4
 8016db4:	697a      	ldr	r2, [r7, #20]
 8016db6:	4313      	orrs	r3, r2
 8016db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	693a      	ldr	r2, [r7, #16]
 8016dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	68fa      	ldr	r2, [r7, #12]
 8016dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016dc6:	683b      	ldr	r3, [r7, #0]
 8016dc8:	685a      	ldr	r2, [r3, #4]
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	697a      	ldr	r2, [r7, #20]
 8016dd2:	621a      	str	r2, [r3, #32]
}
 8016dd4:	46c0      	nop			@ (mov r8, r8)
 8016dd6:	46bd      	mov	sp, r7
 8016dd8:	b006      	add	sp, #24
 8016dda:	bd80      	pop	{r7, pc}
 8016ddc:	ffff8fff 	.word	0xffff8fff
 8016de0:	fffffcff 	.word	0xfffffcff

08016de4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016de4:	b580      	push	{r7, lr}
 8016de6:	b086      	sub	sp, #24
 8016de8:	af00      	add	r7, sp, #0
 8016dea:	6078      	str	r0, [r7, #4]
 8016dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	6a1b      	ldr	r3, [r3, #32]
 8016df2:	4a1a      	ldr	r2, [pc, #104]	@ (8016e5c <TIM_OC3_SetConfig+0x78>)
 8016df4:	401a      	ands	r2, r3
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	6a1b      	ldr	r3, [r3, #32]
 8016dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	685b      	ldr	r3, [r3, #4]
 8016e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	69db      	ldr	r3, [r3, #28]
 8016e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	2270      	movs	r2, #112	@ 0x70
 8016e10:	4393      	bics	r3, r2
 8016e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	2203      	movs	r2, #3
 8016e18:	4393      	bics	r3, r2
 8016e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016e1c:	683b      	ldr	r3, [r7, #0]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	68fa      	ldr	r2, [r7, #12]
 8016e22:	4313      	orrs	r3, r2
 8016e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8016e26:	697b      	ldr	r3, [r7, #20]
 8016e28:	4a0d      	ldr	r2, [pc, #52]	@ (8016e60 <TIM_OC3_SetConfig+0x7c>)
 8016e2a:	4013      	ands	r3, r2
 8016e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016e2e:	683b      	ldr	r3, [r7, #0]
 8016e30:	689b      	ldr	r3, [r3, #8]
 8016e32:	021b      	lsls	r3, r3, #8
 8016e34:	697a      	ldr	r2, [r7, #20]
 8016e36:	4313      	orrs	r3, r2
 8016e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	693a      	ldr	r2, [r7, #16]
 8016e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	68fa      	ldr	r2, [r7, #12]
 8016e44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8016e46:	683b      	ldr	r3, [r7, #0]
 8016e48:	685a      	ldr	r2, [r3, #4]
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	697a      	ldr	r2, [r7, #20]
 8016e52:	621a      	str	r2, [r3, #32]
}
 8016e54:	46c0      	nop			@ (mov r8, r8)
 8016e56:	46bd      	mov	sp, r7
 8016e58:	b006      	add	sp, #24
 8016e5a:	bd80      	pop	{r7, pc}
 8016e5c:	fffffeff 	.word	0xfffffeff
 8016e60:	fffffdff 	.word	0xfffffdff

08016e64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016e64:	b580      	push	{r7, lr}
 8016e66:	b086      	sub	sp, #24
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	6078      	str	r0, [r7, #4]
 8016e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	6a1b      	ldr	r3, [r3, #32]
 8016e72:	4a1b      	ldr	r2, [pc, #108]	@ (8016ee0 <TIM_OC4_SetConfig+0x7c>)
 8016e74:	401a      	ands	r2, r3
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	6a1b      	ldr	r3, [r3, #32]
 8016e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	685b      	ldr	r3, [r3, #4]
 8016e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	69db      	ldr	r3, [r3, #28]
 8016e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	4a15      	ldr	r2, [pc, #84]	@ (8016ee4 <TIM_OC4_SetConfig+0x80>)
 8016e90:	4013      	ands	r3, r2
 8016e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	4a14      	ldr	r2, [pc, #80]	@ (8016ee8 <TIM_OC4_SetConfig+0x84>)
 8016e98:	4013      	ands	r3, r2
 8016e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016e9c:	683b      	ldr	r3, [r7, #0]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	021b      	lsls	r3, r3, #8
 8016ea2:	68fa      	ldr	r2, [r7, #12]
 8016ea4:	4313      	orrs	r3, r2
 8016ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016ea8:	697b      	ldr	r3, [r7, #20]
 8016eaa:	4a10      	ldr	r2, [pc, #64]	@ (8016eec <TIM_OC4_SetConfig+0x88>)
 8016eac:	4013      	ands	r3, r2
 8016eae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8016eb0:	683b      	ldr	r3, [r7, #0]
 8016eb2:	689b      	ldr	r3, [r3, #8]
 8016eb4:	031b      	lsls	r3, r3, #12
 8016eb6:	697a      	ldr	r2, [r7, #20]
 8016eb8:	4313      	orrs	r3, r2
 8016eba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	693a      	ldr	r2, [r7, #16]
 8016ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	68fa      	ldr	r2, [r7, #12]
 8016ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016ec8:	683b      	ldr	r3, [r7, #0]
 8016eca:	685a      	ldr	r2, [r3, #4]
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	697a      	ldr	r2, [r7, #20]
 8016ed4:	621a      	str	r2, [r3, #32]
}
 8016ed6:	46c0      	nop			@ (mov r8, r8)
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	b006      	add	sp, #24
 8016edc:	bd80      	pop	{r7, pc}
 8016ede:	46c0      	nop			@ (mov r8, r8)
 8016ee0:	ffffefff 	.word	0xffffefff
 8016ee4:	ffff8fff 	.word	0xffff8fff
 8016ee8:	fffffcff 	.word	0xfffffcff
 8016eec:	ffffdfff 	.word	0xffffdfff

08016ef0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b086      	sub	sp, #24
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	60f8      	str	r0, [r7, #12]
 8016ef8:	60b9      	str	r1, [r7, #8]
 8016efa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8016efc:	68bb      	ldr	r3, [r7, #8]
 8016efe:	221f      	movs	r2, #31
 8016f00:	4013      	ands	r3, r2
 8016f02:	2201      	movs	r2, #1
 8016f04:	409a      	lsls	r2, r3
 8016f06:	0013      	movs	r3, r2
 8016f08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	6a1b      	ldr	r3, [r3, #32]
 8016f0e:	697a      	ldr	r2, [r7, #20]
 8016f10:	43d2      	mvns	r2, r2
 8016f12:	401a      	ands	r2, r3
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	6a1a      	ldr	r2, [r3, #32]
 8016f1c:	68bb      	ldr	r3, [r7, #8]
 8016f1e:	211f      	movs	r1, #31
 8016f20:	400b      	ands	r3, r1
 8016f22:	6879      	ldr	r1, [r7, #4]
 8016f24:	4099      	lsls	r1, r3
 8016f26:	000b      	movs	r3, r1
 8016f28:	431a      	orrs	r2, r3
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	621a      	str	r2, [r3, #32]
}
 8016f2e:	46c0      	nop			@ (mov r8, r8)
 8016f30:	46bd      	mov	sp, r7
 8016f32:	b006      	add	sp, #24
 8016f34:	bd80      	pop	{r7, pc}
	...

08016f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b084      	sub	sp, #16
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
 8016f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	2238      	movs	r2, #56	@ 0x38
 8016f46:	5c9b      	ldrb	r3, [r3, r2]
 8016f48:	2b01      	cmp	r3, #1
 8016f4a:	d101      	bne.n	8016f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016f4c:	2302      	movs	r3, #2
 8016f4e:	e047      	b.n	8016fe0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	2238      	movs	r2, #56	@ 0x38
 8016f54:	2101      	movs	r1, #1
 8016f56:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	2239      	movs	r2, #57	@ 0x39
 8016f5c:	2102      	movs	r1, #2
 8016f5e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	685b      	ldr	r3, [r3, #4]
 8016f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	689b      	ldr	r3, [r3, #8]
 8016f6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	2270      	movs	r2, #112	@ 0x70
 8016f74:	4393      	bics	r3, r2
 8016f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8016f78:	683b      	ldr	r3, [r7, #0]
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	68fa      	ldr	r2, [r7, #12]
 8016f7e:	4313      	orrs	r3, r2
 8016f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	68fa      	ldr	r2, [r7, #12]
 8016f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	681a      	ldr	r2, [r3, #0]
 8016f8e:	2380      	movs	r3, #128	@ 0x80
 8016f90:	05db      	lsls	r3, r3, #23
 8016f92:	429a      	cmp	r2, r3
 8016f94:	d00e      	beq.n	8016fb4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	4a13      	ldr	r2, [pc, #76]	@ (8016fe8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8016f9c:	4293      	cmp	r3, r2
 8016f9e:	d009      	beq.n	8016fb4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	4a11      	ldr	r2, [pc, #68]	@ (8016fec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8016fa6:	4293      	cmp	r3, r2
 8016fa8:	d004      	beq.n	8016fb4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	4a10      	ldr	r2, [pc, #64]	@ (8016ff0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8016fb0:	4293      	cmp	r3, r2
 8016fb2:	d10c      	bne.n	8016fce <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8016fb4:	68bb      	ldr	r3, [r7, #8]
 8016fb6:	2280      	movs	r2, #128	@ 0x80
 8016fb8:	4393      	bics	r3, r2
 8016fba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8016fbc:	683b      	ldr	r3, [r7, #0]
 8016fbe:	685b      	ldr	r3, [r3, #4]
 8016fc0:	68ba      	ldr	r2, [r7, #8]
 8016fc2:	4313      	orrs	r3, r2
 8016fc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	68ba      	ldr	r2, [r7, #8]
 8016fcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	2239      	movs	r2, #57	@ 0x39
 8016fd2:	2101      	movs	r1, #1
 8016fd4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	2238      	movs	r2, #56	@ 0x38
 8016fda:	2100      	movs	r1, #0
 8016fdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016fde:	2300      	movs	r3, #0
}
 8016fe0:	0018      	movs	r0, r3
 8016fe2:	46bd      	mov	sp, r7
 8016fe4:	b004      	add	sp, #16
 8016fe6:	bd80      	pop	{r7, pc}
 8016fe8:	40000400 	.word	0x40000400
 8016fec:	40010800 	.word	0x40010800
 8016ff0:	40011400 	.word	0x40011400

08016ff4 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b082      	sub	sp, #8
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
 8016ffc:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	2238      	movs	r2, #56	@ 0x38
 8017002:	5c9b      	ldrb	r3, [r3, r2]
 8017004:	2b01      	cmp	r3, #1
 8017006:	d101      	bne.n	801700c <HAL_TIMEx_RemapConfig+0x18>
 8017008:	2302      	movs	r3, #2
 801700a:	e00c      	b.n	8017026 <HAL_TIMEx_RemapConfig+0x32>
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	2238      	movs	r2, #56	@ 0x38
 8017010:	2101      	movs	r1, #1
 8017012:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	683a      	ldr	r2, [r7, #0]
 801701a:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	2238      	movs	r2, #56	@ 0x38
 8017020:	2100      	movs	r1, #0
 8017022:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8017024:	2300      	movs	r3, #0
}
 8017026:	0018      	movs	r0, r3
 8017028:	46bd      	mov	sp, r7
 801702a:	b002      	add	sp, #8
 801702c:	bd80      	pop	{r7, pc}
	...

08017030 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017030:	b580      	push	{r7, lr}
 8017032:	b082      	sub	sp, #8
 8017034:	af00      	add	r7, sp, #0
 8017036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d101      	bne.n	8017042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801703e:	2301      	movs	r3, #1
 8017040:	e053      	b.n	80170ea <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017046:	2b00      	cmp	r3, #0
 8017048:	d116      	bne.n	8017078 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	2278      	movs	r2, #120	@ 0x78
 801704e:	2100      	movs	r1, #0
 8017050:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	0018      	movs	r0, r3
 8017056:	f000 fd65 	bl	8017b24 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	22b0      	movs	r2, #176	@ 0xb0
 801705e:	589b      	ldr	r3, [r3, r2]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d103      	bne.n	801706c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	21b0      	movs	r1, #176	@ 0xb0
 8017068:	4a22      	ldr	r2, [pc, #136]	@ (80170f4 <HAL_UART_Init+0xc4>)
 801706a:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	22b0      	movs	r2, #176	@ 0xb0
 8017070:	589b      	ldr	r3, [r3, r2]
 8017072:	687a      	ldr	r2, [r7, #4]
 8017074:	0010      	movs	r0, r2
 8017076:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	2224      	movs	r2, #36	@ 0x24
 801707c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	681a      	ldr	r2, [r3, #0]
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	2101      	movs	r1, #1
 801708a:	438a      	bics	r2, r1
 801708c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	0018      	movs	r0, r3
 8017092:	f000 fd8b 	bl	8017bac <UART_SetConfig>
 8017096:	0003      	movs	r3, r0
 8017098:	2b01      	cmp	r3, #1
 801709a:	d101      	bne.n	80170a0 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 801709c:	2301      	movs	r3, #1
 801709e:	e024      	b.n	80170ea <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d003      	beq.n	80170b0 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	0018      	movs	r0, r3
 80170ac:	f001 f81c 	bl	80180e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	685a      	ldr	r2, [r3, #4]
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	490f      	ldr	r1, [pc, #60]	@ (80170f8 <HAL_UART_Init+0xc8>)
 80170bc:	400a      	ands	r2, r1
 80170be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	689a      	ldr	r2, [r3, #8]
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	212a      	movs	r1, #42	@ 0x2a
 80170cc:	438a      	bics	r2, r1
 80170ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	681a      	ldr	r2, [r3, #0]
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	2101      	movs	r1, #1
 80170dc:	430a      	orrs	r2, r1
 80170de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	0018      	movs	r0, r3
 80170e4:	f001 f8b4 	bl	8018250 <UART_CheckIdleState>
 80170e8:	0003      	movs	r3, r0
}
 80170ea:	0018      	movs	r0, r3
 80170ec:	46bd      	mov	sp, r7
 80170ee:	b002      	add	sp, #8
 80170f0:	bd80      	pop	{r7, pc}
 80170f2:	46c0      	nop			@ (mov r8, r8)
 80170f4:	0800e0dd 	.word	0x0800e0dd
 80170f8:	ffffb7ff 	.word	0xffffb7ff

080170fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b08a      	sub	sp, #40	@ 0x28
 8017100:	af02      	add	r7, sp, #8
 8017102:	60f8      	str	r0, [r7, #12]
 8017104:	60b9      	str	r1, [r7, #8]
 8017106:	603b      	str	r3, [r7, #0]
 8017108:	1dbb      	adds	r3, r7, #6
 801710a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017110:	2b20      	cmp	r3, #32
 8017112:	d000      	beq.n	8017116 <HAL_UART_Transmit+0x1a>
 8017114:	e08c      	b.n	8017230 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8017116:	68bb      	ldr	r3, [r7, #8]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d003      	beq.n	8017124 <HAL_UART_Transmit+0x28>
 801711c:	1dbb      	adds	r3, r7, #6
 801711e:	881b      	ldrh	r3, [r3, #0]
 8017120:	2b00      	cmp	r3, #0
 8017122:	d101      	bne.n	8017128 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8017124:	2301      	movs	r3, #1
 8017126:	e084      	b.n	8017232 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	689a      	ldr	r2, [r3, #8]
 801712c:	2380      	movs	r3, #128	@ 0x80
 801712e:	015b      	lsls	r3, r3, #5
 8017130:	429a      	cmp	r2, r3
 8017132:	d109      	bne.n	8017148 <HAL_UART_Transmit+0x4c>
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	691b      	ldr	r3, [r3, #16]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d105      	bne.n	8017148 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801713c:	68bb      	ldr	r3, [r7, #8]
 801713e:	2201      	movs	r2, #1
 8017140:	4013      	ands	r3, r2
 8017142:	d001      	beq.n	8017148 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8017144:	2301      	movs	r3, #1
 8017146:	e074      	b.n	8017232 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	2284      	movs	r2, #132	@ 0x84
 801714c:	2100      	movs	r1, #0
 801714e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	2221      	movs	r2, #33	@ 0x21
 8017154:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8017156:	f7f7 fda5 	bl	800eca4 <HAL_GetTick>
 801715a:	0003      	movs	r3, r0
 801715c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	1dba      	adds	r2, r7, #6
 8017162:	2150      	movs	r1, #80	@ 0x50
 8017164:	8812      	ldrh	r2, [r2, #0]
 8017166:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	1dba      	adds	r2, r7, #6
 801716c:	2152      	movs	r1, #82	@ 0x52
 801716e:	8812      	ldrh	r2, [r2, #0]
 8017170:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	689a      	ldr	r2, [r3, #8]
 8017176:	2380      	movs	r3, #128	@ 0x80
 8017178:	015b      	lsls	r3, r3, #5
 801717a:	429a      	cmp	r2, r3
 801717c:	d108      	bne.n	8017190 <HAL_UART_Transmit+0x94>
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	691b      	ldr	r3, [r3, #16]
 8017182:	2b00      	cmp	r3, #0
 8017184:	d104      	bne.n	8017190 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8017186:	2300      	movs	r3, #0
 8017188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801718a:	68bb      	ldr	r3, [r7, #8]
 801718c:	61bb      	str	r3, [r7, #24]
 801718e:	e003      	b.n	8017198 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8017190:	68bb      	ldr	r3, [r7, #8]
 8017192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8017194:	2300      	movs	r3, #0
 8017196:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8017198:	e02f      	b.n	80171fa <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801719a:	697a      	ldr	r2, [r7, #20]
 801719c:	68f8      	ldr	r0, [r7, #12]
 801719e:	683b      	ldr	r3, [r7, #0]
 80171a0:	9300      	str	r3, [sp, #0]
 80171a2:	0013      	movs	r3, r2
 80171a4:	2200      	movs	r2, #0
 80171a6:	2180      	movs	r1, #128	@ 0x80
 80171a8:	f001 f8fa 	bl	80183a0 <UART_WaitOnFlagUntilTimeout>
 80171ac:	1e03      	subs	r3, r0, #0
 80171ae:	d004      	beq.n	80171ba <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	2220      	movs	r2, #32
 80171b4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80171b6:	2303      	movs	r3, #3
 80171b8:	e03b      	b.n	8017232 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80171ba:	69fb      	ldr	r3, [r7, #28]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d10b      	bne.n	80171d8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80171c0:	69bb      	ldr	r3, [r7, #24]
 80171c2:	881b      	ldrh	r3, [r3, #0]
 80171c4:	001a      	movs	r2, r3
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	05d2      	lsls	r2, r2, #23
 80171cc:	0dd2      	lsrs	r2, r2, #23
 80171ce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80171d0:	69bb      	ldr	r3, [r7, #24]
 80171d2:	3302      	adds	r3, #2
 80171d4:	61bb      	str	r3, [r7, #24]
 80171d6:	e007      	b.n	80171e8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80171d8:	69fb      	ldr	r3, [r7, #28]
 80171da:	781a      	ldrb	r2, [r3, #0]
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80171e2:	69fb      	ldr	r3, [r7, #28]
 80171e4:	3301      	adds	r3, #1
 80171e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	2252      	movs	r2, #82	@ 0x52
 80171ec:	5a9b      	ldrh	r3, [r3, r2]
 80171ee:	b29b      	uxth	r3, r3
 80171f0:	3b01      	subs	r3, #1
 80171f2:	b299      	uxth	r1, r3
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	2252      	movs	r2, #82	@ 0x52
 80171f8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	2252      	movs	r2, #82	@ 0x52
 80171fe:	5a9b      	ldrh	r3, [r3, r2]
 8017200:	b29b      	uxth	r3, r3
 8017202:	2b00      	cmp	r3, #0
 8017204:	d1c9      	bne.n	801719a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8017206:	697a      	ldr	r2, [r7, #20]
 8017208:	68f8      	ldr	r0, [r7, #12]
 801720a:	683b      	ldr	r3, [r7, #0]
 801720c:	9300      	str	r3, [sp, #0]
 801720e:	0013      	movs	r3, r2
 8017210:	2200      	movs	r2, #0
 8017212:	2140      	movs	r1, #64	@ 0x40
 8017214:	f001 f8c4 	bl	80183a0 <UART_WaitOnFlagUntilTimeout>
 8017218:	1e03      	subs	r3, r0, #0
 801721a:	d004      	beq.n	8017226 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	2220      	movs	r2, #32
 8017220:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8017222:	2303      	movs	r3, #3
 8017224:	e005      	b.n	8017232 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	2220      	movs	r2, #32
 801722a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 801722c:	2300      	movs	r3, #0
 801722e:	e000      	b.n	8017232 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8017230:	2302      	movs	r3, #2
  }
}
 8017232:	0018      	movs	r0, r3
 8017234:	46bd      	mov	sp, r7
 8017236:	b008      	add	sp, #32
 8017238:	bd80      	pop	{r7, pc}
	...

0801723c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801723c:	b580      	push	{r7, lr}
 801723e:	b088      	sub	sp, #32
 8017240:	af00      	add	r7, sp, #0
 8017242:	60f8      	str	r0, [r7, #12]
 8017244:	60b9      	str	r1, [r7, #8]
 8017246:	1dbb      	adds	r3, r7, #6
 8017248:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	2280      	movs	r2, #128	@ 0x80
 801724e:	589b      	ldr	r3, [r3, r2]
 8017250:	2b20      	cmp	r3, #32
 8017252:	d14a      	bne.n	80172ea <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8017254:	68bb      	ldr	r3, [r7, #8]
 8017256:	2b00      	cmp	r3, #0
 8017258:	d003      	beq.n	8017262 <HAL_UART_Receive_IT+0x26>
 801725a:	1dbb      	adds	r3, r7, #6
 801725c:	881b      	ldrh	r3, [r3, #0]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d101      	bne.n	8017266 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8017262:	2301      	movs	r3, #1
 8017264:	e042      	b.n	80172ec <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	689a      	ldr	r2, [r3, #8]
 801726a:	2380      	movs	r3, #128	@ 0x80
 801726c:	015b      	lsls	r3, r3, #5
 801726e:	429a      	cmp	r2, r3
 8017270:	d109      	bne.n	8017286 <HAL_UART_Receive_IT+0x4a>
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	691b      	ldr	r3, [r3, #16]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d105      	bne.n	8017286 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801727a:	68bb      	ldr	r3, [r7, #8]
 801727c:	2201      	movs	r2, #1
 801727e:	4013      	ands	r3, r2
 8017280:	d001      	beq.n	8017286 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8017282:	2301      	movs	r3, #1
 8017284:	e032      	b.n	80172ec <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	2200      	movs	r2, #0
 801728a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	4a18      	ldr	r2, [pc, #96]	@ (80172f4 <HAL_UART_Receive_IT+0xb8>)
 8017292:	4293      	cmp	r3, r2
 8017294:	d020      	beq.n	80172d8 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	685a      	ldr	r2, [r3, #4]
 801729c:	2380      	movs	r3, #128	@ 0x80
 801729e:	041b      	lsls	r3, r3, #16
 80172a0:	4013      	ands	r3, r2
 80172a2:	d019      	beq.n	80172d8 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80172a4:	f3ef 8310 	mrs	r3, PRIMASK
 80172a8:	613b      	str	r3, [r7, #16]
  return(result);
 80172aa:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80172ac:	61fb      	str	r3, [r7, #28]
 80172ae:	2301      	movs	r3, #1
 80172b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80172b2:	697b      	ldr	r3, [r7, #20]
 80172b4:	f383 8810 	msr	PRIMASK, r3
}
 80172b8:	46c0      	nop			@ (mov r8, r8)
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	681a      	ldr	r2, [r3, #0]
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	2180      	movs	r1, #128	@ 0x80
 80172c6:	04c9      	lsls	r1, r1, #19
 80172c8:	430a      	orrs	r2, r1
 80172ca:	601a      	str	r2, [r3, #0]
 80172cc:	69fb      	ldr	r3, [r7, #28]
 80172ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80172d0:	69bb      	ldr	r3, [r7, #24]
 80172d2:	f383 8810 	msr	PRIMASK, r3
}
 80172d6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80172d8:	1dbb      	adds	r3, r7, #6
 80172da:	881a      	ldrh	r2, [r3, #0]
 80172dc:	68b9      	ldr	r1, [r7, #8]
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	0018      	movs	r0, r3
 80172e2:	f001 f8c7 	bl	8018474 <UART_Start_Receive_IT>
 80172e6:	0003      	movs	r3, r0
 80172e8:	e000      	b.n	80172ec <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80172ea:	2302      	movs	r3, #2
  }
}
 80172ec:	0018      	movs	r0, r3
 80172ee:	46bd      	mov	sp, r7
 80172f0:	b008      	add	sp, #32
 80172f2:	bd80      	pop	{r7, pc}
 80172f4:	40004800 	.word	0x40004800

080172f8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80172f8:	b580      	push	{r7, lr}
 80172fa:	b088      	sub	sp, #32
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	60f8      	str	r0, [r7, #12]
 8017300:	60b9      	str	r1, [r7, #8]
 8017302:	1dbb      	adds	r3, r7, #6
 8017304:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801730a:	2b20      	cmp	r3, #32
 801730c:	d000      	beq.n	8017310 <HAL_UART_Transmit_DMA+0x18>
 801730e:	e077      	b.n	8017400 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8017310:	68bb      	ldr	r3, [r7, #8]
 8017312:	2b00      	cmp	r3, #0
 8017314:	d003      	beq.n	801731e <HAL_UART_Transmit_DMA+0x26>
 8017316:	1dbb      	adds	r3, r7, #6
 8017318:	881b      	ldrh	r3, [r3, #0]
 801731a:	2b00      	cmp	r3, #0
 801731c:	d101      	bne.n	8017322 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801731e:	2301      	movs	r3, #1
 8017320:	e06f      	b.n	8017402 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	689a      	ldr	r2, [r3, #8]
 8017326:	2380      	movs	r3, #128	@ 0x80
 8017328:	015b      	lsls	r3, r3, #5
 801732a:	429a      	cmp	r2, r3
 801732c:	d109      	bne.n	8017342 <HAL_UART_Transmit_DMA+0x4a>
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	691b      	ldr	r3, [r3, #16]
 8017332:	2b00      	cmp	r3, #0
 8017334:	d105      	bne.n	8017342 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017336:	68bb      	ldr	r3, [r7, #8]
 8017338:	2201      	movs	r2, #1
 801733a:	4013      	ands	r3, r2
 801733c:	d001      	beq.n	8017342 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801733e:	2301      	movs	r3, #1
 8017340:	e05f      	b.n	8017402 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	68ba      	ldr	r2, [r7, #8]
 8017346:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	1dba      	adds	r2, r7, #6
 801734c:	2150      	movs	r1, #80	@ 0x50
 801734e:	8812      	ldrh	r2, [r2, #0]
 8017350:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	1dba      	adds	r2, r7, #6
 8017356:	2152      	movs	r1, #82	@ 0x52
 8017358:	8812      	ldrh	r2, [r2, #0]
 801735a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	2284      	movs	r2, #132	@ 0x84
 8017360:	2100      	movs	r1, #0
 8017362:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	2221      	movs	r2, #33	@ 0x21
 8017368:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801736e:	2b00      	cmp	r3, #0
 8017370:	d027      	beq.n	80173c2 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017376:	4a25      	ldr	r2, [pc, #148]	@ (801740c <HAL_UART_Transmit_DMA+0x114>)
 8017378:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801737e:	4a24      	ldr	r2, [pc, #144]	@ (8017410 <HAL_UART_Transmit_DMA+0x118>)
 8017380:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017386:	4a23      	ldr	r2, [pc, #140]	@ (8017414 <HAL_UART_Transmit_DMA+0x11c>)
 8017388:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801738e:	2200      	movs	r2, #0
 8017390:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801739a:	0019      	movs	r1, r3
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	3328      	adds	r3, #40	@ 0x28
 80173a2:	001a      	movs	r2, r3
 80173a4:	1dbb      	adds	r3, r7, #6
 80173a6:	881b      	ldrh	r3, [r3, #0]
 80173a8:	f7f8 f9ce 	bl	800f748 <HAL_DMA_Start_IT>
 80173ac:	1e03      	subs	r3, r0, #0
 80173ae:	d008      	beq.n	80173c2 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	2284      	movs	r2, #132	@ 0x84
 80173b4:	2110      	movs	r1, #16
 80173b6:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	2220      	movs	r2, #32
 80173bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80173be:	2301      	movs	r3, #1
 80173c0:	e01f      	b.n	8017402 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	2240      	movs	r2, #64	@ 0x40
 80173c8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80173ca:	f3ef 8310 	mrs	r3, PRIMASK
 80173ce:	613b      	str	r3, [r7, #16]
  return(result);
 80173d0:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80173d2:	61fb      	str	r3, [r7, #28]
 80173d4:	2301      	movs	r3, #1
 80173d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80173d8:	697b      	ldr	r3, [r7, #20]
 80173da:	f383 8810 	msr	PRIMASK, r3
}
 80173de:	46c0      	nop			@ (mov r8, r8)
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	689a      	ldr	r2, [r3, #8]
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	2180      	movs	r1, #128	@ 0x80
 80173ec:	430a      	orrs	r2, r1
 80173ee:	609a      	str	r2, [r3, #8]
 80173f0:	69fb      	ldr	r3, [r7, #28]
 80173f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80173f4:	69bb      	ldr	r3, [r7, #24]
 80173f6:	f383 8810 	msr	PRIMASK, r3
}
 80173fa:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80173fc:	2300      	movs	r3, #0
 80173fe:	e000      	b.n	8017402 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8017400:	2302      	movs	r3, #2
  }
}
 8017402:	0018      	movs	r0, r3
 8017404:	46bd      	mov	sp, r7
 8017406:	b008      	add	sp, #32
 8017408:	bd80      	pop	{r7, pc}
 801740a:	46c0      	nop			@ (mov r8, r8)
 801740c:	08018859 	.word	0x08018859
 8017410:	080188f5 	.word	0x080188f5
 8017414:	08018a95 	.word	0x08018a95

08017418 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017418:	b580      	push	{r7, lr}
 801741a:	b088      	sub	sp, #32
 801741c:	af00      	add	r7, sp, #0
 801741e:	60f8      	str	r0, [r7, #12]
 8017420:	60b9      	str	r1, [r7, #8]
 8017422:	1dbb      	adds	r3, r7, #6
 8017424:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	2280      	movs	r2, #128	@ 0x80
 801742a:	589b      	ldr	r3, [r3, r2]
 801742c:	2b20      	cmp	r3, #32
 801742e:	d14a      	bne.n	80174c6 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8017430:	68bb      	ldr	r3, [r7, #8]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d003      	beq.n	801743e <HAL_UART_Receive_DMA+0x26>
 8017436:	1dbb      	adds	r3, r7, #6
 8017438:	881b      	ldrh	r3, [r3, #0]
 801743a:	2b00      	cmp	r3, #0
 801743c:	d101      	bne.n	8017442 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801743e:	2301      	movs	r3, #1
 8017440:	e042      	b.n	80174c8 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	689a      	ldr	r2, [r3, #8]
 8017446:	2380      	movs	r3, #128	@ 0x80
 8017448:	015b      	lsls	r3, r3, #5
 801744a:	429a      	cmp	r2, r3
 801744c:	d109      	bne.n	8017462 <HAL_UART_Receive_DMA+0x4a>
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	691b      	ldr	r3, [r3, #16]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d105      	bne.n	8017462 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8017456:	68bb      	ldr	r3, [r7, #8]
 8017458:	2201      	movs	r2, #1
 801745a:	4013      	ands	r3, r2
 801745c:	d001      	beq.n	8017462 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801745e:	2301      	movs	r3, #1
 8017460:	e032      	b.n	80174c8 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	2200      	movs	r2, #0
 8017466:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	4a18      	ldr	r2, [pc, #96]	@ (80174d0 <HAL_UART_Receive_DMA+0xb8>)
 801746e:	4293      	cmp	r3, r2
 8017470:	d020      	beq.n	80174b4 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	685a      	ldr	r2, [r3, #4]
 8017478:	2380      	movs	r3, #128	@ 0x80
 801747a:	041b      	lsls	r3, r3, #16
 801747c:	4013      	ands	r3, r2
 801747e:	d019      	beq.n	80174b4 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017480:	f3ef 8310 	mrs	r3, PRIMASK
 8017484:	613b      	str	r3, [r7, #16]
  return(result);
 8017486:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017488:	61fb      	str	r3, [r7, #28]
 801748a:	2301      	movs	r3, #1
 801748c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801748e:	697b      	ldr	r3, [r7, #20]
 8017490:	f383 8810 	msr	PRIMASK, r3
}
 8017494:	46c0      	nop			@ (mov r8, r8)
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	681a      	ldr	r2, [r3, #0]
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	2180      	movs	r1, #128	@ 0x80
 80174a2:	04c9      	lsls	r1, r1, #19
 80174a4:	430a      	orrs	r2, r1
 80174a6:	601a      	str	r2, [r3, #0]
 80174a8:	69fb      	ldr	r3, [r7, #28]
 80174aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174ac:	69bb      	ldr	r3, [r7, #24]
 80174ae:	f383 8810 	msr	PRIMASK, r3
}
 80174b2:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80174b4:	1dbb      	adds	r3, r7, #6
 80174b6:	881a      	ldrh	r2, [r3, #0]
 80174b8:	68b9      	ldr	r1, [r7, #8]
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	0018      	movs	r0, r3
 80174be:	f001 f8a3 	bl	8018608 <UART_Start_Receive_DMA>
 80174c2:	0003      	movs	r3, r0
 80174c4:	e000      	b.n	80174c8 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80174c6:	2302      	movs	r3, #2
  }
}
 80174c8:	0018      	movs	r0, r3
 80174ca:	46bd      	mov	sp, r7
 80174cc:	b008      	add	sp, #32
 80174ce:	bd80      	pop	{r7, pc}
 80174d0:	40004800 	.word	0x40004800

080174d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80174d4:	b590      	push	{r4, r7, lr}
 80174d6:	b0ab      	sub	sp, #172	@ 0xac
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	69db      	ldr	r3, [r3, #28]
 80174e2:	22a4      	movs	r2, #164	@ 0xa4
 80174e4:	18b9      	adds	r1, r7, r2
 80174e6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	20a0      	movs	r0, #160	@ 0xa0
 80174f0:	1839      	adds	r1, r7, r0
 80174f2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	689b      	ldr	r3, [r3, #8]
 80174fa:	219c      	movs	r1, #156	@ 0x9c
 80174fc:	1879      	adds	r1, r7, r1
 80174fe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8017500:	0011      	movs	r1, r2
 8017502:	18bb      	adds	r3, r7, r2
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	4a9c      	ldr	r2, [pc, #624]	@ (8017778 <HAL_UART_IRQHandler+0x2a4>)
 8017508:	4013      	ands	r3, r2
 801750a:	2298      	movs	r2, #152	@ 0x98
 801750c:	18bc      	adds	r4, r7, r2
 801750e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8017510:	18bb      	adds	r3, r7, r2
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	2b00      	cmp	r3, #0
 8017516:	d114      	bne.n	8017542 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8017518:	187b      	adds	r3, r7, r1
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	2220      	movs	r2, #32
 801751e:	4013      	ands	r3, r2
 8017520:	d00f      	beq.n	8017542 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8017522:	183b      	adds	r3, r7, r0
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	2220      	movs	r2, #32
 8017528:	4013      	ands	r3, r2
 801752a:	d00a      	beq.n	8017542 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017530:	2b00      	cmp	r3, #0
 8017532:	d100      	bne.n	8017536 <HAL_UART_IRQHandler+0x62>
 8017534:	e2aa      	b.n	8017a8c <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801753a:	687a      	ldr	r2, [r7, #4]
 801753c:	0010      	movs	r0, r2
 801753e:	4798      	blx	r3
      }
      return;
 8017540:	e2a4      	b.n	8017a8c <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017542:	2398      	movs	r3, #152	@ 0x98
 8017544:	18fb      	adds	r3, r7, r3
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d100      	bne.n	801754e <HAL_UART_IRQHandler+0x7a>
 801754c:	e11a      	b.n	8017784 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801754e:	239c      	movs	r3, #156	@ 0x9c
 8017550:	18fb      	adds	r3, r7, r3
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	2201      	movs	r2, #1
 8017556:	4013      	ands	r3, r2
 8017558:	d106      	bne.n	8017568 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801755a:	23a0      	movs	r3, #160	@ 0xa0
 801755c:	18fb      	adds	r3, r7, r3
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	4a86      	ldr	r2, [pc, #536]	@ (801777c <HAL_UART_IRQHandler+0x2a8>)
 8017562:	4013      	ands	r3, r2
 8017564:	d100      	bne.n	8017568 <HAL_UART_IRQHandler+0x94>
 8017566:	e10d      	b.n	8017784 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017568:	23a4      	movs	r3, #164	@ 0xa4
 801756a:	18fb      	adds	r3, r7, r3
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	2201      	movs	r2, #1
 8017570:	4013      	ands	r3, r2
 8017572:	d012      	beq.n	801759a <HAL_UART_IRQHandler+0xc6>
 8017574:	23a0      	movs	r3, #160	@ 0xa0
 8017576:	18fb      	adds	r3, r7, r3
 8017578:	681a      	ldr	r2, [r3, #0]
 801757a:	2380      	movs	r3, #128	@ 0x80
 801757c:	005b      	lsls	r3, r3, #1
 801757e:	4013      	ands	r3, r2
 8017580:	d00b      	beq.n	801759a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	2201      	movs	r2, #1
 8017588:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	2284      	movs	r2, #132	@ 0x84
 801758e:	589b      	ldr	r3, [r3, r2]
 8017590:	2201      	movs	r2, #1
 8017592:	431a      	orrs	r2, r3
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	2184      	movs	r1, #132	@ 0x84
 8017598:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801759a:	23a4      	movs	r3, #164	@ 0xa4
 801759c:	18fb      	adds	r3, r7, r3
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	2202      	movs	r2, #2
 80175a2:	4013      	ands	r3, r2
 80175a4:	d011      	beq.n	80175ca <HAL_UART_IRQHandler+0xf6>
 80175a6:	239c      	movs	r3, #156	@ 0x9c
 80175a8:	18fb      	adds	r3, r7, r3
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	2201      	movs	r2, #1
 80175ae:	4013      	ands	r3, r2
 80175b0:	d00b      	beq.n	80175ca <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	2202      	movs	r2, #2
 80175b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	2284      	movs	r2, #132	@ 0x84
 80175be:	589b      	ldr	r3, [r3, r2]
 80175c0:	2204      	movs	r2, #4
 80175c2:	431a      	orrs	r2, r3
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	2184      	movs	r1, #132	@ 0x84
 80175c8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80175ca:	23a4      	movs	r3, #164	@ 0xa4
 80175cc:	18fb      	adds	r3, r7, r3
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	2204      	movs	r2, #4
 80175d2:	4013      	ands	r3, r2
 80175d4:	d011      	beq.n	80175fa <HAL_UART_IRQHandler+0x126>
 80175d6:	239c      	movs	r3, #156	@ 0x9c
 80175d8:	18fb      	adds	r3, r7, r3
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	2201      	movs	r2, #1
 80175de:	4013      	ands	r3, r2
 80175e0:	d00b      	beq.n	80175fa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	2204      	movs	r2, #4
 80175e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	2284      	movs	r2, #132	@ 0x84
 80175ee:	589b      	ldr	r3, [r3, r2]
 80175f0:	2202      	movs	r2, #2
 80175f2:	431a      	orrs	r2, r3
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	2184      	movs	r1, #132	@ 0x84
 80175f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80175fa:	23a4      	movs	r3, #164	@ 0xa4
 80175fc:	18fb      	adds	r3, r7, r3
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	2208      	movs	r2, #8
 8017602:	4013      	ands	r3, r2
 8017604:	d017      	beq.n	8017636 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8017606:	23a0      	movs	r3, #160	@ 0xa0
 8017608:	18fb      	adds	r3, r7, r3
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	2220      	movs	r2, #32
 801760e:	4013      	ands	r3, r2
 8017610:	d105      	bne.n	801761e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8017612:	239c      	movs	r3, #156	@ 0x9c
 8017614:	18fb      	adds	r3, r7, r3
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	2201      	movs	r2, #1
 801761a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801761c:	d00b      	beq.n	8017636 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	2208      	movs	r2, #8
 8017624:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	2284      	movs	r2, #132	@ 0x84
 801762a:	589b      	ldr	r3, [r3, r2]
 801762c:	2208      	movs	r2, #8
 801762e:	431a      	orrs	r2, r3
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	2184      	movs	r1, #132	@ 0x84
 8017634:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017636:	23a4      	movs	r3, #164	@ 0xa4
 8017638:	18fb      	adds	r3, r7, r3
 801763a:	681a      	ldr	r2, [r3, #0]
 801763c:	2380      	movs	r3, #128	@ 0x80
 801763e:	011b      	lsls	r3, r3, #4
 8017640:	4013      	ands	r3, r2
 8017642:	d013      	beq.n	801766c <HAL_UART_IRQHandler+0x198>
 8017644:	23a0      	movs	r3, #160	@ 0xa0
 8017646:	18fb      	adds	r3, r7, r3
 8017648:	681a      	ldr	r2, [r3, #0]
 801764a:	2380      	movs	r3, #128	@ 0x80
 801764c:	04db      	lsls	r3, r3, #19
 801764e:	4013      	ands	r3, r2
 8017650:	d00c      	beq.n	801766c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	2280      	movs	r2, #128	@ 0x80
 8017658:	0112      	lsls	r2, r2, #4
 801765a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	2284      	movs	r2, #132	@ 0x84
 8017660:	589b      	ldr	r3, [r3, r2]
 8017662:	2220      	movs	r2, #32
 8017664:	431a      	orrs	r2, r3
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	2184      	movs	r1, #132	@ 0x84
 801766a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	2284      	movs	r2, #132	@ 0x84
 8017670:	589b      	ldr	r3, [r3, r2]
 8017672:	2b00      	cmp	r3, #0
 8017674:	d100      	bne.n	8017678 <HAL_UART_IRQHandler+0x1a4>
 8017676:	e20b      	b.n	8017a90 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8017678:	23a4      	movs	r3, #164	@ 0xa4
 801767a:	18fb      	adds	r3, r7, r3
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	2220      	movs	r2, #32
 8017680:	4013      	ands	r3, r2
 8017682:	d00e      	beq.n	80176a2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8017684:	23a0      	movs	r3, #160	@ 0xa0
 8017686:	18fb      	adds	r3, r7, r3
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	2220      	movs	r2, #32
 801768c:	4013      	ands	r3, r2
 801768e:	d008      	beq.n	80176a2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017694:	2b00      	cmp	r3, #0
 8017696:	d004      	beq.n	80176a2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801769c:	687a      	ldr	r2, [r7, #4]
 801769e:	0010      	movs	r0, r2
 80176a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	2284      	movs	r2, #132	@ 0x84
 80176a6:	589b      	ldr	r3, [r3, r2]
 80176a8:	2194      	movs	r1, #148	@ 0x94
 80176aa:	187a      	adds	r2, r7, r1
 80176ac:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	689b      	ldr	r3, [r3, #8]
 80176b4:	2240      	movs	r2, #64	@ 0x40
 80176b6:	4013      	ands	r3, r2
 80176b8:	2b40      	cmp	r3, #64	@ 0x40
 80176ba:	d004      	beq.n	80176c6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80176bc:	187b      	adds	r3, r7, r1
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	2228      	movs	r2, #40	@ 0x28
 80176c2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80176c4:	d04b      	beq.n	801775e <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	0018      	movs	r0, r3
 80176ca:	f001 f861 	bl	8018790 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	689b      	ldr	r3, [r3, #8]
 80176d4:	2240      	movs	r2, #64	@ 0x40
 80176d6:	4013      	ands	r3, r2
 80176d8:	2b40      	cmp	r3, #64	@ 0x40
 80176da:	d139      	bne.n	8017750 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80176dc:	f3ef 8310 	mrs	r3, PRIMASK
 80176e0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80176e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80176e4:	2090      	movs	r0, #144	@ 0x90
 80176e6:	183a      	adds	r2, r7, r0
 80176e8:	6013      	str	r3, [r2, #0]
 80176ea:	2301      	movs	r3, #1
 80176ec:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80176ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80176f0:	f383 8810 	msr	PRIMASK, r3
}
 80176f4:	46c0      	nop			@ (mov r8, r8)
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	689a      	ldr	r2, [r3, #8]
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	2140      	movs	r1, #64	@ 0x40
 8017702:	438a      	bics	r2, r1
 8017704:	609a      	str	r2, [r3, #8]
 8017706:	183b      	adds	r3, r7, r0
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801770c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801770e:	f383 8810 	msr	PRIMASK, r3
}
 8017712:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017718:	2b00      	cmp	r3, #0
 801771a:	d012      	beq.n	8017742 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017720:	4a17      	ldr	r2, [pc, #92]	@ (8017780 <HAL_UART_IRQHandler+0x2ac>)
 8017722:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017728:	0018      	movs	r0, r3
 801772a:	f7f8 f8b3 	bl	800f894 <HAL_DMA_Abort_IT>
 801772e:	1e03      	subs	r3, r0, #0
 8017730:	d020      	beq.n	8017774 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017736:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801773c:	0018      	movs	r0, r3
 801773e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017740:	e018      	b.n	8017774 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	2298      	movs	r2, #152	@ 0x98
 8017746:	589b      	ldr	r3, [r3, r2]
 8017748:	687a      	ldr	r2, [r7, #4]
 801774a:	0010      	movs	r0, r2
 801774c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801774e:	e011      	b.n	8017774 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	2298      	movs	r2, #152	@ 0x98
 8017754:	589b      	ldr	r3, [r3, r2]
 8017756:	687a      	ldr	r2, [r7, #4]
 8017758:	0010      	movs	r0, r2
 801775a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801775c:	e00a      	b.n	8017774 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	2298      	movs	r2, #152	@ 0x98
 8017762:	589b      	ldr	r3, [r3, r2]
 8017764:	687a      	ldr	r2, [r7, #4]
 8017766:	0010      	movs	r0, r2
 8017768:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	2284      	movs	r2, #132	@ 0x84
 801776e:	2100      	movs	r1, #0
 8017770:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8017772:	e18d      	b.n	8017a90 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017774:	46c0      	nop			@ (mov r8, r8)
    return;
 8017776:	e18b      	b.n	8017a90 <HAL_UART_IRQHandler+0x5bc>
 8017778:	0000080f 	.word	0x0000080f
 801777c:	04000120 	.word	0x04000120
 8017780:	08018b1d 	.word	0x08018b1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017788:	2b01      	cmp	r3, #1
 801778a:	d000      	beq.n	801778e <HAL_UART_IRQHandler+0x2ba>
 801778c:	e13d      	b.n	8017a0a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801778e:	23a4      	movs	r3, #164	@ 0xa4
 8017790:	18fb      	adds	r3, r7, r3
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	2210      	movs	r2, #16
 8017796:	4013      	ands	r3, r2
 8017798:	d100      	bne.n	801779c <HAL_UART_IRQHandler+0x2c8>
 801779a:	e136      	b.n	8017a0a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801779c:	23a0      	movs	r3, #160	@ 0xa0
 801779e:	18fb      	adds	r3, r7, r3
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	2210      	movs	r2, #16
 80177a4:	4013      	ands	r3, r2
 80177a6:	d100      	bne.n	80177aa <HAL_UART_IRQHandler+0x2d6>
 80177a8:	e12f      	b.n	8017a0a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	2210      	movs	r2, #16
 80177b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	689b      	ldr	r3, [r3, #8]
 80177b8:	2240      	movs	r2, #64	@ 0x40
 80177ba:	4013      	ands	r3, r2
 80177bc:	2b40      	cmp	r3, #64	@ 0x40
 80177be:	d000      	beq.n	80177c2 <HAL_UART_IRQHandler+0x2ee>
 80177c0:	e0a2      	b.n	8017908 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	685a      	ldr	r2, [r3, #4]
 80177ca:	217e      	movs	r1, #126	@ 0x7e
 80177cc:	187b      	adds	r3, r7, r1
 80177ce:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80177d0:	187b      	adds	r3, r7, r1
 80177d2:	881b      	ldrh	r3, [r3, #0]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d100      	bne.n	80177da <HAL_UART_IRQHandler+0x306>
 80177d8:	e15c      	b.n	8017a94 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	2258      	movs	r2, #88	@ 0x58
 80177de:	5a9b      	ldrh	r3, [r3, r2]
 80177e0:	187a      	adds	r2, r7, r1
 80177e2:	8812      	ldrh	r2, [r2, #0]
 80177e4:	429a      	cmp	r2, r3
 80177e6:	d300      	bcc.n	80177ea <HAL_UART_IRQHandler+0x316>
 80177e8:	e154      	b.n	8017a94 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	187a      	adds	r2, r7, r1
 80177ee:	215a      	movs	r1, #90	@ 0x5a
 80177f0:	8812      	ldrh	r2, [r2, #0]
 80177f2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	2220      	movs	r2, #32
 80177fe:	4013      	ands	r3, r2
 8017800:	d16f      	bne.n	80178e2 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017802:	f3ef 8310 	mrs	r3, PRIMASK
 8017806:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801780a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801780c:	2301      	movs	r3, #1
 801780e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017812:	f383 8810 	msr	PRIMASK, r3
}
 8017816:	46c0      	nop			@ (mov r8, r8)
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	681a      	ldr	r2, [r3, #0]
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	49a0      	ldr	r1, [pc, #640]	@ (8017aa4 <HAL_UART_IRQHandler+0x5d0>)
 8017824:	400a      	ands	r2, r1
 8017826:	601a      	str	r2, [r3, #0]
 8017828:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801782a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801782c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801782e:	f383 8810 	msr	PRIMASK, r3
}
 8017832:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017834:	f3ef 8310 	mrs	r3, PRIMASK
 8017838:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801783a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801783c:	677b      	str	r3, [r7, #116]	@ 0x74
 801783e:	2301      	movs	r3, #1
 8017840:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017844:	f383 8810 	msr	PRIMASK, r3
}
 8017848:	46c0      	nop			@ (mov r8, r8)
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	689a      	ldr	r2, [r3, #8]
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	2101      	movs	r1, #1
 8017856:	438a      	bics	r2, r1
 8017858:	609a      	str	r2, [r3, #8]
 801785a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801785c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801785e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017860:	f383 8810 	msr	PRIMASK, r3
}
 8017864:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017866:	f3ef 8310 	mrs	r3, PRIMASK
 801786a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801786c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801786e:	673b      	str	r3, [r7, #112]	@ 0x70
 8017870:	2301      	movs	r3, #1
 8017872:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017876:	f383 8810 	msr	PRIMASK, r3
}
 801787a:	46c0      	nop			@ (mov r8, r8)
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	689a      	ldr	r2, [r3, #8]
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	2140      	movs	r1, #64	@ 0x40
 8017888:	438a      	bics	r2, r1
 801788a:	609a      	str	r2, [r3, #8]
 801788c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801788e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017892:	f383 8810 	msr	PRIMASK, r3
}
 8017896:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	2280      	movs	r2, #128	@ 0x80
 801789c:	2120      	movs	r1, #32
 801789e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	2200      	movs	r2, #0
 80178a4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80178a6:	f3ef 8310 	mrs	r3, PRIMASK
 80178aa:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80178ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80178ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80178b0:	2301      	movs	r3, #1
 80178b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80178b6:	f383 8810 	msr	PRIMASK, r3
}
 80178ba:	46c0      	nop			@ (mov r8, r8)
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	681a      	ldr	r2, [r3, #0]
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	2110      	movs	r1, #16
 80178c8:	438a      	bics	r2, r1
 80178ca:	601a      	str	r2, [r3, #0]
 80178cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80178ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80178d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80178d2:	f383 8810 	msr	PRIMASK, r3
}
 80178d6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80178dc:	0018      	movs	r0, r3
 80178de:	f7f7 ff99 	bl	800f814 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	2202      	movs	r2, #2
 80178e6:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	22ac      	movs	r2, #172	@ 0xac
 80178ec:	589b      	ldr	r3, [r3, r2]
 80178ee:	687a      	ldr	r2, [r7, #4]
 80178f0:	2158      	movs	r1, #88	@ 0x58
 80178f2:	5a51      	ldrh	r1, [r2, r1]
 80178f4:	687a      	ldr	r2, [r7, #4]
 80178f6:	205a      	movs	r0, #90	@ 0x5a
 80178f8:	5a12      	ldrh	r2, [r2, r0]
 80178fa:	b292      	uxth	r2, r2
 80178fc:	1a8a      	subs	r2, r1, r2
 80178fe:	b291      	uxth	r1, r2
 8017900:	687a      	ldr	r2, [r7, #4]
 8017902:	0010      	movs	r0, r2
 8017904:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017906:	e0c5      	b.n	8017a94 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	2258      	movs	r2, #88	@ 0x58
 801790c:	5a99      	ldrh	r1, [r3, r2]
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	225a      	movs	r2, #90	@ 0x5a
 8017912:	5a9b      	ldrh	r3, [r3, r2]
 8017914:	b29a      	uxth	r2, r3
 8017916:	208e      	movs	r0, #142	@ 0x8e
 8017918:	183b      	adds	r3, r7, r0
 801791a:	1a8a      	subs	r2, r1, r2
 801791c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	225a      	movs	r2, #90	@ 0x5a
 8017922:	5a9b      	ldrh	r3, [r3, r2]
 8017924:	b29b      	uxth	r3, r3
 8017926:	2b00      	cmp	r3, #0
 8017928:	d100      	bne.n	801792c <HAL_UART_IRQHandler+0x458>
 801792a:	e0b5      	b.n	8017a98 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801792c:	183b      	adds	r3, r7, r0
 801792e:	881b      	ldrh	r3, [r3, #0]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d100      	bne.n	8017936 <HAL_UART_IRQHandler+0x462>
 8017934:	e0b0      	b.n	8017a98 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017936:	f3ef 8310 	mrs	r3, PRIMASK
 801793a:	60fb      	str	r3, [r7, #12]
  return(result);
 801793c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801793e:	2488      	movs	r4, #136	@ 0x88
 8017940:	193a      	adds	r2, r7, r4
 8017942:	6013      	str	r3, [r2, #0]
 8017944:	2301      	movs	r3, #1
 8017946:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017948:	693b      	ldr	r3, [r7, #16]
 801794a:	f383 8810 	msr	PRIMASK, r3
}
 801794e:	46c0      	nop			@ (mov r8, r8)
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	681a      	ldr	r2, [r3, #0]
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	4953      	ldr	r1, [pc, #332]	@ (8017aa8 <HAL_UART_IRQHandler+0x5d4>)
 801795c:	400a      	ands	r2, r1
 801795e:	601a      	str	r2, [r3, #0]
 8017960:	193b      	adds	r3, r7, r4
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017966:	697b      	ldr	r3, [r7, #20]
 8017968:	f383 8810 	msr	PRIMASK, r3
}
 801796c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801796e:	f3ef 8310 	mrs	r3, PRIMASK
 8017972:	61bb      	str	r3, [r7, #24]
  return(result);
 8017974:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017976:	2484      	movs	r4, #132	@ 0x84
 8017978:	193a      	adds	r2, r7, r4
 801797a:	6013      	str	r3, [r2, #0]
 801797c:	2301      	movs	r3, #1
 801797e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017980:	69fb      	ldr	r3, [r7, #28]
 8017982:	f383 8810 	msr	PRIMASK, r3
}
 8017986:	46c0      	nop			@ (mov r8, r8)
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	689a      	ldr	r2, [r3, #8]
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	2101      	movs	r1, #1
 8017994:	438a      	bics	r2, r1
 8017996:	609a      	str	r2, [r3, #8]
 8017998:	193b      	adds	r3, r7, r4
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801799e:	6a3b      	ldr	r3, [r7, #32]
 80179a0:	f383 8810 	msr	PRIMASK, r3
}
 80179a4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	2280      	movs	r2, #128	@ 0x80
 80179aa:	2120      	movs	r1, #32
 80179ac:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	2200      	movs	r2, #0
 80179b2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	2200      	movs	r2, #0
 80179b8:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80179ba:	f3ef 8310 	mrs	r3, PRIMASK
 80179be:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80179c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80179c2:	2480      	movs	r4, #128	@ 0x80
 80179c4:	193a      	adds	r2, r7, r4
 80179c6:	6013      	str	r3, [r2, #0]
 80179c8:	2301      	movs	r3, #1
 80179ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179ce:	f383 8810 	msr	PRIMASK, r3
}
 80179d2:	46c0      	nop			@ (mov r8, r8)
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	681a      	ldr	r2, [r3, #0]
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	2110      	movs	r1, #16
 80179e0:	438a      	bics	r2, r1
 80179e2:	601a      	str	r2, [r3, #0]
 80179e4:	193b      	adds	r3, r7, r4
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80179ec:	f383 8810 	msr	PRIMASK, r3
}
 80179f0:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	2202      	movs	r2, #2
 80179f6:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	22ac      	movs	r2, #172	@ 0xac
 80179fc:	589b      	ldr	r3, [r3, r2]
 80179fe:	183a      	adds	r2, r7, r0
 8017a00:	8811      	ldrh	r1, [r2, #0]
 8017a02:	687a      	ldr	r2, [r7, #4]
 8017a04:	0010      	movs	r0, r2
 8017a06:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8017a08:	e046      	b.n	8017a98 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017a0a:	23a4      	movs	r3, #164	@ 0xa4
 8017a0c:	18fb      	adds	r3, r7, r3
 8017a0e:	681a      	ldr	r2, [r3, #0]
 8017a10:	2380      	movs	r3, #128	@ 0x80
 8017a12:	035b      	lsls	r3, r3, #13
 8017a14:	4013      	ands	r3, r2
 8017a16:	d012      	beq.n	8017a3e <HAL_UART_IRQHandler+0x56a>
 8017a18:	239c      	movs	r3, #156	@ 0x9c
 8017a1a:	18fb      	adds	r3, r7, r3
 8017a1c:	681a      	ldr	r2, [r3, #0]
 8017a1e:	2380      	movs	r3, #128	@ 0x80
 8017a20:	03db      	lsls	r3, r3, #15
 8017a22:	4013      	ands	r3, r2
 8017a24:	d00b      	beq.n	8017a3e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	2280      	movs	r2, #128	@ 0x80
 8017a2c:	0352      	lsls	r2, r2, #13
 8017a2e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	22a8      	movs	r2, #168	@ 0xa8
 8017a34:	589b      	ldr	r3, [r3, r2]
 8017a36:	687a      	ldr	r2, [r7, #4]
 8017a38:	0010      	movs	r0, r2
 8017a3a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017a3c:	e02f      	b.n	8017a9e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8017a3e:	23a4      	movs	r3, #164	@ 0xa4
 8017a40:	18fb      	adds	r3, r7, r3
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	2280      	movs	r2, #128	@ 0x80
 8017a46:	4013      	ands	r3, r2
 8017a48:	d00f      	beq.n	8017a6a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8017a4a:	23a0      	movs	r3, #160	@ 0xa0
 8017a4c:	18fb      	adds	r3, r7, r3
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	2280      	movs	r2, #128	@ 0x80
 8017a52:	4013      	ands	r3, r2
 8017a54:	d009      	beq.n	8017a6a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d01e      	beq.n	8017a9c <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a62:	687a      	ldr	r2, [r7, #4]
 8017a64:	0010      	movs	r0, r2
 8017a66:	4798      	blx	r3
    }
    return;
 8017a68:	e018      	b.n	8017a9c <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017a6a:	23a4      	movs	r3, #164	@ 0xa4
 8017a6c:	18fb      	adds	r3, r7, r3
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	2240      	movs	r2, #64	@ 0x40
 8017a72:	4013      	ands	r3, r2
 8017a74:	d013      	beq.n	8017a9e <HAL_UART_IRQHandler+0x5ca>
 8017a76:	23a0      	movs	r3, #160	@ 0xa0
 8017a78:	18fb      	adds	r3, r7, r3
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	2240      	movs	r2, #64	@ 0x40
 8017a7e:	4013      	ands	r3, r2
 8017a80:	d00d      	beq.n	8017a9e <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	0018      	movs	r0, r3
 8017a86:	f001 f862 	bl	8018b4e <UART_EndTransmit_IT>
    return;
 8017a8a:	e008      	b.n	8017a9e <HAL_UART_IRQHandler+0x5ca>
      return;
 8017a8c:	46c0      	nop			@ (mov r8, r8)
 8017a8e:	e006      	b.n	8017a9e <HAL_UART_IRQHandler+0x5ca>
    return;
 8017a90:	46c0      	nop			@ (mov r8, r8)
 8017a92:	e004      	b.n	8017a9e <HAL_UART_IRQHandler+0x5ca>
      return;
 8017a94:	46c0      	nop			@ (mov r8, r8)
 8017a96:	e002      	b.n	8017a9e <HAL_UART_IRQHandler+0x5ca>
      return;
 8017a98:	46c0      	nop			@ (mov r8, r8)
 8017a9a:	e000      	b.n	8017a9e <HAL_UART_IRQHandler+0x5ca>
    return;
 8017a9c:	46c0      	nop			@ (mov r8, r8)
  }

}
 8017a9e:	46bd      	mov	sp, r7
 8017aa0:	b02b      	add	sp, #172	@ 0xac
 8017aa2:	bd90      	pop	{r4, r7, pc}
 8017aa4:	fffffeff 	.word	0xfffffeff
 8017aa8:	fffffedf 	.word	0xfffffedf

08017aac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b082      	sub	sp, #8
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8017ab4:	46c0      	nop			@ (mov r8, r8)
 8017ab6:	46bd      	mov	sp, r7
 8017ab8:	b002      	add	sp, #8
 8017aba:	bd80      	pop	{r7, pc}

08017abc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b082      	sub	sp, #8
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8017ac4:	46c0      	nop			@ (mov r8, r8)
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	b002      	add	sp, #8
 8017aca:	bd80      	pop	{r7, pc}

08017acc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8017acc:	b580      	push	{r7, lr}
 8017ace:	b082      	sub	sp, #8
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8017ad4:	46c0      	nop			@ (mov r8, r8)
 8017ad6:	46bd      	mov	sp, r7
 8017ad8:	b002      	add	sp, #8
 8017ada:	bd80      	pop	{r7, pc}

08017adc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8017adc:	b580      	push	{r7, lr}
 8017ade:	b082      	sub	sp, #8
 8017ae0:	af00      	add	r7, sp, #0
 8017ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8017ae4:	46c0      	nop			@ (mov r8, r8)
 8017ae6:	46bd      	mov	sp, r7
 8017ae8:	b002      	add	sp, #8
 8017aea:	bd80      	pop	{r7, pc}

08017aec <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b082      	sub	sp, #8
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8017af4:	46c0      	nop			@ (mov r8, r8)
 8017af6:	46bd      	mov	sp, r7
 8017af8:	b002      	add	sp, #8
 8017afa:	bd80      	pop	{r7, pc}

08017afc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b082      	sub	sp, #8
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8017b04:	46c0      	nop			@ (mov r8, r8)
 8017b06:	46bd      	mov	sp, r7
 8017b08:	b002      	add	sp, #8
 8017b0a:	bd80      	pop	{r7, pc}

08017b0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8017b0c:	b580      	push	{r7, lr}
 8017b0e:	b082      	sub	sp, #8
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	6078      	str	r0, [r7, #4]
 8017b14:	000a      	movs	r2, r1
 8017b16:	1cbb      	adds	r3, r7, #2
 8017b18:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017b1a:	46c0      	nop			@ (mov r8, r8)
 8017b1c:	46bd      	mov	sp, r7
 8017b1e:	b002      	add	sp, #8
 8017b20:	bd80      	pop	{r7, pc}
	...

08017b24 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b082      	sub	sp, #8
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	2188      	movs	r1, #136	@ 0x88
 8017b30:	4a14      	ldr	r2, [pc, #80]	@ (8017b84 <UART_InitCallbacksToDefault+0x60>)
 8017b32:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	218c      	movs	r1, #140	@ 0x8c
 8017b38:	4a13      	ldr	r2, [pc, #76]	@ (8017b88 <UART_InitCallbacksToDefault+0x64>)
 8017b3a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	2190      	movs	r1, #144	@ 0x90
 8017b40:	4a12      	ldr	r2, [pc, #72]	@ (8017b8c <UART_InitCallbacksToDefault+0x68>)
 8017b42:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	2194      	movs	r1, #148	@ 0x94
 8017b48:	4a11      	ldr	r2, [pc, #68]	@ (8017b90 <UART_InitCallbacksToDefault+0x6c>)
 8017b4a:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	2198      	movs	r1, #152	@ 0x98
 8017b50:	4a10      	ldr	r2, [pc, #64]	@ (8017b94 <UART_InitCallbacksToDefault+0x70>)
 8017b52:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	219c      	movs	r1, #156	@ 0x9c
 8017b58:	4a0f      	ldr	r2, [pc, #60]	@ (8017b98 <UART_InitCallbacksToDefault+0x74>)
 8017b5a:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	21a0      	movs	r1, #160	@ 0xa0
 8017b60:	4a0e      	ldr	r2, [pc, #56]	@ (8017b9c <UART_InitCallbacksToDefault+0x78>)
 8017b62:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	21a4      	movs	r1, #164	@ 0xa4
 8017b68:	4a0d      	ldr	r2, [pc, #52]	@ (8017ba0 <UART_InitCallbacksToDefault+0x7c>)
 8017b6a:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	21a8      	movs	r1, #168	@ 0xa8
 8017b70:	4a0c      	ldr	r2, [pc, #48]	@ (8017ba4 <UART_InitCallbacksToDefault+0x80>)
 8017b72:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	21ac      	movs	r1, #172	@ 0xac
 8017b78:	4a0b      	ldr	r2, [pc, #44]	@ (8017ba8 <UART_InitCallbacksToDefault+0x84>)
 8017b7a:	505a      	str	r2, [r3, r1]

}
 8017b7c:	46c0      	nop			@ (mov r8, r8)
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	b002      	add	sp, #8
 8017b82:	bd80      	pop	{r7, pc}
 8017b84:	08017abd 	.word	0x08017abd
 8017b88:	08017aad 	.word	0x08017aad
 8017b8c:	08017acd 	.word	0x08017acd
 8017b90:	08008149 	.word	0x08008149
 8017b94:	08003d19 	.word	0x08003d19
 8017b98:	08017add 	.word	0x08017add
 8017b9c:	08017aed 	.word	0x08017aed
 8017ba0:	08017afd 	.word	0x08017afd
 8017ba4:	08018f41 	.word	0x08018f41
 8017ba8:	08017b0d 	.word	0x08017b0d

08017bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017bac:	b5b0      	push	{r4, r5, r7, lr}
 8017bae:	b08e      	sub	sp, #56	@ 0x38
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8017bb4:	231a      	movs	r3, #26
 8017bb6:	2218      	movs	r2, #24
 8017bb8:	189b      	adds	r3, r3, r2
 8017bba:	19db      	adds	r3, r3, r7
 8017bbc:	2200      	movs	r2, #0
 8017bbe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017bc0:	69fb      	ldr	r3, [r7, #28]
 8017bc2:	689a      	ldr	r2, [r3, #8]
 8017bc4:	69fb      	ldr	r3, [r7, #28]
 8017bc6:	691b      	ldr	r3, [r3, #16]
 8017bc8:	431a      	orrs	r2, r3
 8017bca:	69fb      	ldr	r3, [r7, #28]
 8017bcc:	695b      	ldr	r3, [r3, #20]
 8017bce:	431a      	orrs	r2, r3
 8017bd0:	69fb      	ldr	r3, [r7, #28]
 8017bd2:	69db      	ldr	r3, [r3, #28]
 8017bd4:	4313      	orrs	r3, r2
 8017bd6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017bd8:	69fb      	ldr	r3, [r7, #28]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	4ac3      	ldr	r2, [pc, #780]	@ (8017eec <UART_SetConfig+0x340>)
 8017be0:	4013      	ands	r3, r2
 8017be2:	0019      	movs	r1, r3
 8017be4:	69fb      	ldr	r3, [r7, #28]
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017bea:	430a      	orrs	r2, r1
 8017bec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017bee:	69fb      	ldr	r3, [r7, #28]
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	685b      	ldr	r3, [r3, #4]
 8017bf4:	4abe      	ldr	r2, [pc, #760]	@ (8017ef0 <UART_SetConfig+0x344>)
 8017bf6:	4013      	ands	r3, r2
 8017bf8:	0019      	movs	r1, r3
 8017bfa:	69fb      	ldr	r3, [r7, #28]
 8017bfc:	68da      	ldr	r2, [r3, #12]
 8017bfe:	69fb      	ldr	r3, [r7, #28]
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	430a      	orrs	r2, r1
 8017c04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8017c06:	69fb      	ldr	r3, [r7, #28]
 8017c08:	699b      	ldr	r3, [r3, #24]
 8017c0a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8017c0c:	69fb      	ldr	r3, [r7, #28]
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	4ab8      	ldr	r2, [pc, #736]	@ (8017ef4 <UART_SetConfig+0x348>)
 8017c12:	4293      	cmp	r3, r2
 8017c14:	d004      	beq.n	8017c20 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8017c16:	69fb      	ldr	r3, [r7, #28]
 8017c18:	6a1b      	ldr	r3, [r3, #32]
 8017c1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017c1c:	4313      	orrs	r3, r2
 8017c1e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8017c20:	69fb      	ldr	r3, [r7, #28]
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	689b      	ldr	r3, [r3, #8]
 8017c26:	4ab4      	ldr	r2, [pc, #720]	@ (8017ef8 <UART_SetConfig+0x34c>)
 8017c28:	4013      	ands	r3, r2
 8017c2a:	0019      	movs	r1, r3
 8017c2c:	69fb      	ldr	r3, [r7, #28]
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017c32:	430a      	orrs	r2, r1
 8017c34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8017c36:	69fb      	ldr	r3, [r7, #28]
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	4ab0      	ldr	r2, [pc, #704]	@ (8017efc <UART_SetConfig+0x350>)
 8017c3c:	4293      	cmp	r3, r2
 8017c3e:	d131      	bne.n	8017ca4 <UART_SetConfig+0xf8>
 8017c40:	4baf      	ldr	r3, [pc, #700]	@ (8017f00 <UART_SetConfig+0x354>)
 8017c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017c44:	2203      	movs	r2, #3
 8017c46:	4013      	ands	r3, r2
 8017c48:	2b03      	cmp	r3, #3
 8017c4a:	d01d      	beq.n	8017c88 <UART_SetConfig+0xdc>
 8017c4c:	d823      	bhi.n	8017c96 <UART_SetConfig+0xea>
 8017c4e:	2b02      	cmp	r3, #2
 8017c50:	d00c      	beq.n	8017c6c <UART_SetConfig+0xc0>
 8017c52:	d820      	bhi.n	8017c96 <UART_SetConfig+0xea>
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d002      	beq.n	8017c5e <UART_SetConfig+0xb2>
 8017c58:	2b01      	cmp	r3, #1
 8017c5a:	d00e      	beq.n	8017c7a <UART_SetConfig+0xce>
 8017c5c:	e01b      	b.n	8017c96 <UART_SetConfig+0xea>
 8017c5e:	231b      	movs	r3, #27
 8017c60:	2218      	movs	r2, #24
 8017c62:	189b      	adds	r3, r3, r2
 8017c64:	19db      	adds	r3, r3, r7
 8017c66:	2201      	movs	r2, #1
 8017c68:	701a      	strb	r2, [r3, #0]
 8017c6a:	e0b4      	b.n	8017dd6 <UART_SetConfig+0x22a>
 8017c6c:	231b      	movs	r3, #27
 8017c6e:	2218      	movs	r2, #24
 8017c70:	189b      	adds	r3, r3, r2
 8017c72:	19db      	adds	r3, r3, r7
 8017c74:	2202      	movs	r2, #2
 8017c76:	701a      	strb	r2, [r3, #0]
 8017c78:	e0ad      	b.n	8017dd6 <UART_SetConfig+0x22a>
 8017c7a:	231b      	movs	r3, #27
 8017c7c:	2218      	movs	r2, #24
 8017c7e:	189b      	adds	r3, r3, r2
 8017c80:	19db      	adds	r3, r3, r7
 8017c82:	2204      	movs	r2, #4
 8017c84:	701a      	strb	r2, [r3, #0]
 8017c86:	e0a6      	b.n	8017dd6 <UART_SetConfig+0x22a>
 8017c88:	231b      	movs	r3, #27
 8017c8a:	2218      	movs	r2, #24
 8017c8c:	189b      	adds	r3, r3, r2
 8017c8e:	19db      	adds	r3, r3, r7
 8017c90:	2208      	movs	r2, #8
 8017c92:	701a      	strb	r2, [r3, #0]
 8017c94:	e09f      	b.n	8017dd6 <UART_SetConfig+0x22a>
 8017c96:	231b      	movs	r3, #27
 8017c98:	2218      	movs	r2, #24
 8017c9a:	189b      	adds	r3, r3, r2
 8017c9c:	19db      	adds	r3, r3, r7
 8017c9e:	2210      	movs	r2, #16
 8017ca0:	701a      	strb	r2, [r3, #0]
 8017ca2:	e098      	b.n	8017dd6 <UART_SetConfig+0x22a>
 8017ca4:	69fb      	ldr	r3, [r7, #28]
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	4a96      	ldr	r2, [pc, #600]	@ (8017f04 <UART_SetConfig+0x358>)
 8017caa:	4293      	cmp	r3, r2
 8017cac:	d131      	bne.n	8017d12 <UART_SetConfig+0x166>
 8017cae:	4b94      	ldr	r3, [pc, #592]	@ (8017f00 <UART_SetConfig+0x354>)
 8017cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017cb2:	220c      	movs	r2, #12
 8017cb4:	4013      	ands	r3, r2
 8017cb6:	2b0c      	cmp	r3, #12
 8017cb8:	d01d      	beq.n	8017cf6 <UART_SetConfig+0x14a>
 8017cba:	d823      	bhi.n	8017d04 <UART_SetConfig+0x158>
 8017cbc:	2b08      	cmp	r3, #8
 8017cbe:	d00c      	beq.n	8017cda <UART_SetConfig+0x12e>
 8017cc0:	d820      	bhi.n	8017d04 <UART_SetConfig+0x158>
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d002      	beq.n	8017ccc <UART_SetConfig+0x120>
 8017cc6:	2b04      	cmp	r3, #4
 8017cc8:	d00e      	beq.n	8017ce8 <UART_SetConfig+0x13c>
 8017cca:	e01b      	b.n	8017d04 <UART_SetConfig+0x158>
 8017ccc:	231b      	movs	r3, #27
 8017cce:	2218      	movs	r2, #24
 8017cd0:	189b      	adds	r3, r3, r2
 8017cd2:	19db      	adds	r3, r3, r7
 8017cd4:	2200      	movs	r2, #0
 8017cd6:	701a      	strb	r2, [r3, #0]
 8017cd8:	e07d      	b.n	8017dd6 <UART_SetConfig+0x22a>
 8017cda:	231b      	movs	r3, #27
 8017cdc:	2218      	movs	r2, #24
 8017cde:	189b      	adds	r3, r3, r2
 8017ce0:	19db      	adds	r3, r3, r7
 8017ce2:	2202      	movs	r2, #2
 8017ce4:	701a      	strb	r2, [r3, #0]
 8017ce6:	e076      	b.n	8017dd6 <UART_SetConfig+0x22a>
 8017ce8:	231b      	movs	r3, #27
 8017cea:	2218      	movs	r2, #24
 8017cec:	189b      	adds	r3, r3, r2
 8017cee:	19db      	adds	r3, r3, r7
 8017cf0:	2204      	movs	r2, #4
 8017cf2:	701a      	strb	r2, [r3, #0]
 8017cf4:	e06f      	b.n	8017dd6 <UART_SetConfig+0x22a>
 8017cf6:	231b      	movs	r3, #27
 8017cf8:	2218      	movs	r2, #24
 8017cfa:	189b      	adds	r3, r3, r2
 8017cfc:	19db      	adds	r3, r3, r7
 8017cfe:	2208      	movs	r2, #8
 8017d00:	701a      	strb	r2, [r3, #0]
 8017d02:	e068      	b.n	8017dd6 <UART_SetConfig+0x22a>
 8017d04:	231b      	movs	r3, #27
 8017d06:	2218      	movs	r2, #24
 8017d08:	189b      	adds	r3, r3, r2
 8017d0a:	19db      	adds	r3, r3, r7
 8017d0c:	2210      	movs	r2, #16
 8017d0e:	701a      	strb	r2, [r3, #0]
 8017d10:	e061      	b.n	8017dd6 <UART_SetConfig+0x22a>
 8017d12:	69fb      	ldr	r3, [r7, #28]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	4a7c      	ldr	r2, [pc, #496]	@ (8017f08 <UART_SetConfig+0x35c>)
 8017d18:	4293      	cmp	r3, r2
 8017d1a:	d106      	bne.n	8017d2a <UART_SetConfig+0x17e>
 8017d1c:	231b      	movs	r3, #27
 8017d1e:	2218      	movs	r2, #24
 8017d20:	189b      	adds	r3, r3, r2
 8017d22:	19db      	adds	r3, r3, r7
 8017d24:	2200      	movs	r2, #0
 8017d26:	701a      	strb	r2, [r3, #0]
 8017d28:	e055      	b.n	8017dd6 <UART_SetConfig+0x22a>
 8017d2a:	69fb      	ldr	r3, [r7, #28]
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	4a77      	ldr	r2, [pc, #476]	@ (8017f0c <UART_SetConfig+0x360>)
 8017d30:	4293      	cmp	r3, r2
 8017d32:	d106      	bne.n	8017d42 <UART_SetConfig+0x196>
 8017d34:	231b      	movs	r3, #27
 8017d36:	2218      	movs	r2, #24
 8017d38:	189b      	adds	r3, r3, r2
 8017d3a:	19db      	adds	r3, r3, r7
 8017d3c:	2200      	movs	r2, #0
 8017d3e:	701a      	strb	r2, [r3, #0]
 8017d40:	e049      	b.n	8017dd6 <UART_SetConfig+0x22a>
 8017d42:	69fb      	ldr	r3, [r7, #28]
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	4a6b      	ldr	r2, [pc, #428]	@ (8017ef4 <UART_SetConfig+0x348>)
 8017d48:	4293      	cmp	r3, r2
 8017d4a:	d13e      	bne.n	8017dca <UART_SetConfig+0x21e>
 8017d4c:	4b6c      	ldr	r3, [pc, #432]	@ (8017f00 <UART_SetConfig+0x354>)
 8017d4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017d50:	23c0      	movs	r3, #192	@ 0xc0
 8017d52:	011b      	lsls	r3, r3, #4
 8017d54:	4013      	ands	r3, r2
 8017d56:	22c0      	movs	r2, #192	@ 0xc0
 8017d58:	0112      	lsls	r2, r2, #4
 8017d5a:	4293      	cmp	r3, r2
 8017d5c:	d027      	beq.n	8017dae <UART_SetConfig+0x202>
 8017d5e:	22c0      	movs	r2, #192	@ 0xc0
 8017d60:	0112      	lsls	r2, r2, #4
 8017d62:	4293      	cmp	r3, r2
 8017d64:	d82a      	bhi.n	8017dbc <UART_SetConfig+0x210>
 8017d66:	2280      	movs	r2, #128	@ 0x80
 8017d68:	0112      	lsls	r2, r2, #4
 8017d6a:	4293      	cmp	r3, r2
 8017d6c:	d011      	beq.n	8017d92 <UART_SetConfig+0x1e6>
 8017d6e:	2280      	movs	r2, #128	@ 0x80
 8017d70:	0112      	lsls	r2, r2, #4
 8017d72:	4293      	cmp	r3, r2
 8017d74:	d822      	bhi.n	8017dbc <UART_SetConfig+0x210>
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d004      	beq.n	8017d84 <UART_SetConfig+0x1d8>
 8017d7a:	2280      	movs	r2, #128	@ 0x80
 8017d7c:	00d2      	lsls	r2, r2, #3
 8017d7e:	4293      	cmp	r3, r2
 8017d80:	d00e      	beq.n	8017da0 <UART_SetConfig+0x1f4>
 8017d82:	e01b      	b.n	8017dbc <UART_SetConfig+0x210>
 8017d84:	231b      	movs	r3, #27
 8017d86:	2218      	movs	r2, #24
 8017d88:	189b      	adds	r3, r3, r2
 8017d8a:	19db      	adds	r3, r3, r7
 8017d8c:	2200      	movs	r2, #0
 8017d8e:	701a      	strb	r2, [r3, #0]
 8017d90:	e021      	b.n	8017dd6 <UART_SetConfig+0x22a>
 8017d92:	231b      	movs	r3, #27
 8017d94:	2218      	movs	r2, #24
 8017d96:	189b      	adds	r3, r3, r2
 8017d98:	19db      	adds	r3, r3, r7
 8017d9a:	2202      	movs	r2, #2
 8017d9c:	701a      	strb	r2, [r3, #0]
 8017d9e:	e01a      	b.n	8017dd6 <UART_SetConfig+0x22a>
 8017da0:	231b      	movs	r3, #27
 8017da2:	2218      	movs	r2, #24
 8017da4:	189b      	adds	r3, r3, r2
 8017da6:	19db      	adds	r3, r3, r7
 8017da8:	2204      	movs	r2, #4
 8017daa:	701a      	strb	r2, [r3, #0]
 8017dac:	e013      	b.n	8017dd6 <UART_SetConfig+0x22a>
 8017dae:	231b      	movs	r3, #27
 8017db0:	2218      	movs	r2, #24
 8017db2:	189b      	adds	r3, r3, r2
 8017db4:	19db      	adds	r3, r3, r7
 8017db6:	2208      	movs	r2, #8
 8017db8:	701a      	strb	r2, [r3, #0]
 8017dba:	e00c      	b.n	8017dd6 <UART_SetConfig+0x22a>
 8017dbc:	231b      	movs	r3, #27
 8017dbe:	2218      	movs	r2, #24
 8017dc0:	189b      	adds	r3, r3, r2
 8017dc2:	19db      	adds	r3, r3, r7
 8017dc4:	2210      	movs	r2, #16
 8017dc6:	701a      	strb	r2, [r3, #0]
 8017dc8:	e005      	b.n	8017dd6 <UART_SetConfig+0x22a>
 8017dca:	231b      	movs	r3, #27
 8017dcc:	2218      	movs	r2, #24
 8017dce:	189b      	adds	r3, r3, r2
 8017dd0:	19db      	adds	r3, r3, r7
 8017dd2:	2210      	movs	r2, #16
 8017dd4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8017dd6:	69fb      	ldr	r3, [r7, #28]
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	4a46      	ldr	r2, [pc, #280]	@ (8017ef4 <UART_SetConfig+0x348>)
 8017ddc:	4293      	cmp	r3, r2
 8017dde:	d000      	beq.n	8017de2 <UART_SetConfig+0x236>
 8017de0:	e09a      	b.n	8017f18 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8017de2:	231b      	movs	r3, #27
 8017de4:	2218      	movs	r2, #24
 8017de6:	189b      	adds	r3, r3, r2
 8017de8:	19db      	adds	r3, r3, r7
 8017dea:	781b      	ldrb	r3, [r3, #0]
 8017dec:	2b08      	cmp	r3, #8
 8017dee:	d01d      	beq.n	8017e2c <UART_SetConfig+0x280>
 8017df0:	dc20      	bgt.n	8017e34 <UART_SetConfig+0x288>
 8017df2:	2b04      	cmp	r3, #4
 8017df4:	d015      	beq.n	8017e22 <UART_SetConfig+0x276>
 8017df6:	dc1d      	bgt.n	8017e34 <UART_SetConfig+0x288>
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d002      	beq.n	8017e02 <UART_SetConfig+0x256>
 8017dfc:	2b02      	cmp	r3, #2
 8017dfe:	d005      	beq.n	8017e0c <UART_SetConfig+0x260>
 8017e00:	e018      	b.n	8017e34 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017e02:	f7fd fe4b 	bl	8015a9c <HAL_RCC_GetPCLK1Freq>
 8017e06:	0003      	movs	r3, r0
 8017e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017e0a:	e01c      	b.n	8017e46 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017e0c:	4b3c      	ldr	r3, [pc, #240]	@ (8017f00 <UART_SetConfig+0x354>)
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	2210      	movs	r2, #16
 8017e12:	4013      	ands	r3, r2
 8017e14:	d002      	beq.n	8017e1c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017e16:	4b3e      	ldr	r3, [pc, #248]	@ (8017f10 <UART_SetConfig+0x364>)
 8017e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017e1a:	e014      	b.n	8017e46 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8017e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8017f14 <UART_SetConfig+0x368>)
 8017e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017e20:	e011      	b.n	8017e46 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017e22:	f7fd fd8b 	bl	801593c <HAL_RCC_GetSysClockFreq>
 8017e26:	0003      	movs	r3, r0
 8017e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017e2a:	e00c      	b.n	8017e46 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017e2c:	2380      	movs	r3, #128	@ 0x80
 8017e2e:	021b      	lsls	r3, r3, #8
 8017e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017e32:	e008      	b.n	8017e46 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8017e34:	2300      	movs	r3, #0
 8017e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017e38:	231a      	movs	r3, #26
 8017e3a:	2218      	movs	r2, #24
 8017e3c:	189b      	adds	r3, r3, r2
 8017e3e:	19db      	adds	r3, r3, r7
 8017e40:	2201      	movs	r2, #1
 8017e42:	701a      	strb	r2, [r3, #0]
        break;
 8017e44:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8017e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d100      	bne.n	8017e4e <UART_SetConfig+0x2a2>
 8017e4c:	e133      	b.n	80180b6 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017e4e:	69fb      	ldr	r3, [r7, #28]
 8017e50:	685a      	ldr	r2, [r3, #4]
 8017e52:	0013      	movs	r3, r2
 8017e54:	005b      	lsls	r3, r3, #1
 8017e56:	189b      	adds	r3, r3, r2
 8017e58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017e5a:	429a      	cmp	r2, r3
 8017e5c:	d305      	bcc.n	8017e6a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8017e5e:	69fb      	ldr	r3, [r7, #28]
 8017e60:	685b      	ldr	r3, [r3, #4]
 8017e62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8017e64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017e66:	429a      	cmp	r2, r3
 8017e68:	d906      	bls.n	8017e78 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8017e6a:	231a      	movs	r3, #26
 8017e6c:	2218      	movs	r2, #24
 8017e6e:	189b      	adds	r3, r3, r2
 8017e70:	19db      	adds	r3, r3, r7
 8017e72:	2201      	movs	r2, #1
 8017e74:	701a      	strb	r2, [r3, #0]
 8017e76:	e11e      	b.n	80180b6 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8017e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e7a:	613b      	str	r3, [r7, #16]
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	617b      	str	r3, [r7, #20]
 8017e80:	6939      	ldr	r1, [r7, #16]
 8017e82:	697a      	ldr	r2, [r7, #20]
 8017e84:	000b      	movs	r3, r1
 8017e86:	0e1b      	lsrs	r3, r3, #24
 8017e88:	0010      	movs	r0, r2
 8017e8a:	0205      	lsls	r5, r0, #8
 8017e8c:	431d      	orrs	r5, r3
 8017e8e:	000b      	movs	r3, r1
 8017e90:	021c      	lsls	r4, r3, #8
 8017e92:	69fb      	ldr	r3, [r7, #28]
 8017e94:	685b      	ldr	r3, [r3, #4]
 8017e96:	085b      	lsrs	r3, r3, #1
 8017e98:	60bb      	str	r3, [r7, #8]
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	60fb      	str	r3, [r7, #12]
 8017e9e:	68b8      	ldr	r0, [r7, #8]
 8017ea0:	68f9      	ldr	r1, [r7, #12]
 8017ea2:	1900      	adds	r0, r0, r4
 8017ea4:	4169      	adcs	r1, r5
 8017ea6:	69fb      	ldr	r3, [r7, #28]
 8017ea8:	685b      	ldr	r3, [r3, #4]
 8017eaa:	603b      	str	r3, [r7, #0]
 8017eac:	2300      	movs	r3, #0
 8017eae:	607b      	str	r3, [r7, #4]
 8017eb0:	683a      	ldr	r2, [r7, #0]
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	f7e8 fb64 	bl	8000580 <__aeabi_uldivmod>
 8017eb8:	0002      	movs	r2, r0
 8017eba:	000b      	movs	r3, r1
 8017ebc:	0013      	movs	r3, r2
 8017ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8017ec0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017ec2:	23c0      	movs	r3, #192	@ 0xc0
 8017ec4:	009b      	lsls	r3, r3, #2
 8017ec6:	429a      	cmp	r2, r3
 8017ec8:	d309      	bcc.n	8017ede <UART_SetConfig+0x332>
 8017eca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017ecc:	2380      	movs	r3, #128	@ 0x80
 8017ece:	035b      	lsls	r3, r3, #13
 8017ed0:	429a      	cmp	r2, r3
 8017ed2:	d204      	bcs.n	8017ede <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8017ed4:	69fb      	ldr	r3, [r7, #28]
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017eda:	60da      	str	r2, [r3, #12]
 8017edc:	e0eb      	b.n	80180b6 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8017ede:	231a      	movs	r3, #26
 8017ee0:	2218      	movs	r2, #24
 8017ee2:	189b      	adds	r3, r3, r2
 8017ee4:	19db      	adds	r3, r3, r7
 8017ee6:	2201      	movs	r2, #1
 8017ee8:	701a      	strb	r2, [r3, #0]
 8017eea:	e0e4      	b.n	80180b6 <UART_SetConfig+0x50a>
 8017eec:	efff69f3 	.word	0xefff69f3
 8017ef0:	ffffcfff 	.word	0xffffcfff
 8017ef4:	40004800 	.word	0x40004800
 8017ef8:	fffff4ff 	.word	0xfffff4ff
 8017efc:	40013800 	.word	0x40013800
 8017f00:	40021000 	.word	0x40021000
 8017f04:	40004400 	.word	0x40004400
 8017f08:	40004c00 	.word	0x40004c00
 8017f0c:	40005000 	.word	0x40005000
 8017f10:	003d0900 	.word	0x003d0900
 8017f14:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017f18:	69fb      	ldr	r3, [r7, #28]
 8017f1a:	69da      	ldr	r2, [r3, #28]
 8017f1c:	2380      	movs	r3, #128	@ 0x80
 8017f1e:	021b      	lsls	r3, r3, #8
 8017f20:	429a      	cmp	r2, r3
 8017f22:	d000      	beq.n	8017f26 <UART_SetConfig+0x37a>
 8017f24:	e070      	b.n	8018008 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8017f26:	231b      	movs	r3, #27
 8017f28:	2218      	movs	r2, #24
 8017f2a:	189b      	adds	r3, r3, r2
 8017f2c:	19db      	adds	r3, r3, r7
 8017f2e:	781b      	ldrb	r3, [r3, #0]
 8017f30:	2b08      	cmp	r3, #8
 8017f32:	d822      	bhi.n	8017f7a <UART_SetConfig+0x3ce>
 8017f34:	009a      	lsls	r2, r3, #2
 8017f36:	4b67      	ldr	r3, [pc, #412]	@ (80180d4 <UART_SetConfig+0x528>)
 8017f38:	18d3      	adds	r3, r2, r3
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8017f3e:	f7fd fdad 	bl	8015a9c <HAL_RCC_GetPCLK1Freq>
 8017f42:	0003      	movs	r3, r0
 8017f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017f46:	e021      	b.n	8017f8c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017f48:	f7fd fdbe 	bl	8015ac8 <HAL_RCC_GetPCLK2Freq>
 8017f4c:	0003      	movs	r3, r0
 8017f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017f50:	e01c      	b.n	8017f8c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8017f52:	4b61      	ldr	r3, [pc, #388]	@ (80180d8 <UART_SetConfig+0x52c>)
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	2210      	movs	r2, #16
 8017f58:	4013      	ands	r3, r2
 8017f5a:	d002      	beq.n	8017f62 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8017f5c:	4b5f      	ldr	r3, [pc, #380]	@ (80180dc <UART_SetConfig+0x530>)
 8017f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017f60:	e014      	b.n	8017f8c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8017f62:	4b5f      	ldr	r3, [pc, #380]	@ (80180e0 <UART_SetConfig+0x534>)
 8017f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017f66:	e011      	b.n	8017f8c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8017f68:	f7fd fce8 	bl	801593c <HAL_RCC_GetSysClockFreq>
 8017f6c:	0003      	movs	r3, r0
 8017f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017f70:	e00c      	b.n	8017f8c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017f72:	2380      	movs	r3, #128	@ 0x80
 8017f74:	021b      	lsls	r3, r3, #8
 8017f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8017f78:	e008      	b.n	8017f8c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8017f7e:	231a      	movs	r3, #26
 8017f80:	2218      	movs	r2, #24
 8017f82:	189b      	adds	r3, r3, r2
 8017f84:	19db      	adds	r3, r3, r7
 8017f86:	2201      	movs	r2, #1
 8017f88:	701a      	strb	r2, [r3, #0]
        break;
 8017f8a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8017f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d100      	bne.n	8017f94 <UART_SetConfig+0x3e8>
 8017f92:	e090      	b.n	80180b6 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8017f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f96:	005a      	lsls	r2, r3, #1
 8017f98:	69fb      	ldr	r3, [r7, #28]
 8017f9a:	685b      	ldr	r3, [r3, #4]
 8017f9c:	085b      	lsrs	r3, r3, #1
 8017f9e:	18d2      	adds	r2, r2, r3
 8017fa0:	69fb      	ldr	r3, [r7, #28]
 8017fa2:	685b      	ldr	r3, [r3, #4]
 8017fa4:	0019      	movs	r1, r3
 8017fa6:	0010      	movs	r0, r2
 8017fa8:	f7e8 f8fc 	bl	80001a4 <__udivsi3>
 8017fac:	0003      	movs	r3, r0
 8017fae:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8017fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fb2:	2b0f      	cmp	r3, #15
 8017fb4:	d921      	bls.n	8017ffa <UART_SetConfig+0x44e>
 8017fb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017fb8:	2380      	movs	r3, #128	@ 0x80
 8017fba:	025b      	lsls	r3, r3, #9
 8017fbc:	429a      	cmp	r2, r3
 8017fbe:	d21c      	bcs.n	8017ffa <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8017fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fc2:	b29a      	uxth	r2, r3
 8017fc4:	200e      	movs	r0, #14
 8017fc6:	2418      	movs	r4, #24
 8017fc8:	1903      	adds	r3, r0, r4
 8017fca:	19db      	adds	r3, r3, r7
 8017fcc:	210f      	movs	r1, #15
 8017fce:	438a      	bics	r2, r1
 8017fd0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8017fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017fd4:	085b      	lsrs	r3, r3, #1
 8017fd6:	b29b      	uxth	r3, r3
 8017fd8:	2207      	movs	r2, #7
 8017fda:	4013      	ands	r3, r2
 8017fdc:	b299      	uxth	r1, r3
 8017fde:	1903      	adds	r3, r0, r4
 8017fe0:	19db      	adds	r3, r3, r7
 8017fe2:	1902      	adds	r2, r0, r4
 8017fe4:	19d2      	adds	r2, r2, r7
 8017fe6:	8812      	ldrh	r2, [r2, #0]
 8017fe8:	430a      	orrs	r2, r1
 8017fea:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8017fec:	69fb      	ldr	r3, [r7, #28]
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	1902      	adds	r2, r0, r4
 8017ff2:	19d2      	adds	r2, r2, r7
 8017ff4:	8812      	ldrh	r2, [r2, #0]
 8017ff6:	60da      	str	r2, [r3, #12]
 8017ff8:	e05d      	b.n	80180b6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8017ffa:	231a      	movs	r3, #26
 8017ffc:	2218      	movs	r2, #24
 8017ffe:	189b      	adds	r3, r3, r2
 8018000:	19db      	adds	r3, r3, r7
 8018002:	2201      	movs	r2, #1
 8018004:	701a      	strb	r2, [r3, #0]
 8018006:	e056      	b.n	80180b6 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8018008:	231b      	movs	r3, #27
 801800a:	2218      	movs	r2, #24
 801800c:	189b      	adds	r3, r3, r2
 801800e:	19db      	adds	r3, r3, r7
 8018010:	781b      	ldrb	r3, [r3, #0]
 8018012:	2b08      	cmp	r3, #8
 8018014:	d822      	bhi.n	801805c <UART_SetConfig+0x4b0>
 8018016:	009a      	lsls	r2, r3, #2
 8018018:	4b32      	ldr	r3, [pc, #200]	@ (80180e4 <UART_SetConfig+0x538>)
 801801a:	18d3      	adds	r3, r2, r3
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018020:	f7fd fd3c 	bl	8015a9c <HAL_RCC_GetPCLK1Freq>
 8018024:	0003      	movs	r3, r0
 8018026:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018028:	e021      	b.n	801806e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801802a:	f7fd fd4d 	bl	8015ac8 <HAL_RCC_GetPCLK2Freq>
 801802e:	0003      	movs	r3, r0
 8018030:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018032:	e01c      	b.n	801806e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018034:	4b28      	ldr	r3, [pc, #160]	@ (80180d8 <UART_SetConfig+0x52c>)
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	2210      	movs	r2, #16
 801803a:	4013      	ands	r3, r2
 801803c:	d002      	beq.n	8018044 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801803e:	4b27      	ldr	r3, [pc, #156]	@ (80180dc <UART_SetConfig+0x530>)
 8018040:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8018042:	e014      	b.n	801806e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8018044:	4b26      	ldr	r3, [pc, #152]	@ (80180e0 <UART_SetConfig+0x534>)
 8018046:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018048:	e011      	b.n	801806e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801804a:	f7fd fc77 	bl	801593c <HAL_RCC_GetSysClockFreq>
 801804e:	0003      	movs	r3, r0
 8018050:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8018052:	e00c      	b.n	801806e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018054:	2380      	movs	r3, #128	@ 0x80
 8018056:	021b      	lsls	r3, r3, #8
 8018058:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801805a:	e008      	b.n	801806e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 801805c:	2300      	movs	r3, #0
 801805e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8018060:	231a      	movs	r3, #26
 8018062:	2218      	movs	r2, #24
 8018064:	189b      	adds	r3, r3, r2
 8018066:	19db      	adds	r3, r3, r7
 8018068:	2201      	movs	r2, #1
 801806a:	701a      	strb	r2, [r3, #0]
        break;
 801806c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 801806e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018070:	2b00      	cmp	r3, #0
 8018072:	d020      	beq.n	80180b6 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8018074:	69fb      	ldr	r3, [r7, #28]
 8018076:	685b      	ldr	r3, [r3, #4]
 8018078:	085a      	lsrs	r2, r3, #1
 801807a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801807c:	18d2      	adds	r2, r2, r3
 801807e:	69fb      	ldr	r3, [r7, #28]
 8018080:	685b      	ldr	r3, [r3, #4]
 8018082:	0019      	movs	r1, r3
 8018084:	0010      	movs	r0, r2
 8018086:	f7e8 f88d 	bl	80001a4 <__udivsi3>
 801808a:	0003      	movs	r3, r0
 801808c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801808e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018090:	2b0f      	cmp	r3, #15
 8018092:	d90a      	bls.n	80180aa <UART_SetConfig+0x4fe>
 8018094:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018096:	2380      	movs	r3, #128	@ 0x80
 8018098:	025b      	lsls	r3, r3, #9
 801809a:	429a      	cmp	r2, r3
 801809c:	d205      	bcs.n	80180aa <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801809e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80180a0:	b29a      	uxth	r2, r3
 80180a2:	69fb      	ldr	r3, [r7, #28]
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	60da      	str	r2, [r3, #12]
 80180a8:	e005      	b.n	80180b6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80180aa:	231a      	movs	r3, #26
 80180ac:	2218      	movs	r2, #24
 80180ae:	189b      	adds	r3, r3, r2
 80180b0:	19db      	adds	r3, r3, r7
 80180b2:	2201      	movs	r2, #1
 80180b4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80180b6:	69fb      	ldr	r3, [r7, #28]
 80180b8:	2200      	movs	r2, #0
 80180ba:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80180bc:	69fb      	ldr	r3, [r7, #28]
 80180be:	2200      	movs	r2, #0
 80180c0:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80180c2:	231a      	movs	r3, #26
 80180c4:	2218      	movs	r2, #24
 80180c6:	189b      	adds	r3, r3, r2
 80180c8:	19db      	adds	r3, r3, r7
 80180ca:	781b      	ldrb	r3, [r3, #0]
}
 80180cc:	0018      	movs	r0, r3
 80180ce:	46bd      	mov	sp, r7
 80180d0:	b00e      	add	sp, #56	@ 0x38
 80180d2:	bdb0      	pop	{r4, r5, r7, pc}
 80180d4:	080255e0 	.word	0x080255e0
 80180d8:	40021000 	.word	0x40021000
 80180dc:	003d0900 	.word	0x003d0900
 80180e0:	00f42400 	.word	0x00f42400
 80180e4:	08025604 	.word	0x08025604

080180e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80180e8:	b580      	push	{r7, lr}
 80180ea:	b082      	sub	sp, #8
 80180ec:	af00      	add	r7, sp, #0
 80180ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180f4:	2201      	movs	r2, #1
 80180f6:	4013      	ands	r3, r2
 80180f8:	d00b      	beq.n	8018112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	685b      	ldr	r3, [r3, #4]
 8018100:	4a4a      	ldr	r2, [pc, #296]	@ (801822c <UART_AdvFeatureConfig+0x144>)
 8018102:	4013      	ands	r3, r2
 8018104:	0019      	movs	r1, r3
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	430a      	orrs	r2, r1
 8018110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018116:	2202      	movs	r2, #2
 8018118:	4013      	ands	r3, r2
 801811a:	d00b      	beq.n	8018134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	685b      	ldr	r3, [r3, #4]
 8018122:	4a43      	ldr	r2, [pc, #268]	@ (8018230 <UART_AdvFeatureConfig+0x148>)
 8018124:	4013      	ands	r3, r2
 8018126:	0019      	movs	r1, r3
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	430a      	orrs	r2, r1
 8018132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018138:	2204      	movs	r2, #4
 801813a:	4013      	ands	r3, r2
 801813c:	d00b      	beq.n	8018156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	685b      	ldr	r3, [r3, #4]
 8018144:	4a3b      	ldr	r2, [pc, #236]	@ (8018234 <UART_AdvFeatureConfig+0x14c>)
 8018146:	4013      	ands	r3, r2
 8018148:	0019      	movs	r1, r3
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	430a      	orrs	r2, r1
 8018154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801815a:	2208      	movs	r2, #8
 801815c:	4013      	ands	r3, r2
 801815e:	d00b      	beq.n	8018178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	685b      	ldr	r3, [r3, #4]
 8018166:	4a34      	ldr	r2, [pc, #208]	@ (8018238 <UART_AdvFeatureConfig+0x150>)
 8018168:	4013      	ands	r3, r2
 801816a:	0019      	movs	r1, r3
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	430a      	orrs	r2, r1
 8018176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801817c:	2210      	movs	r2, #16
 801817e:	4013      	ands	r3, r2
 8018180:	d00b      	beq.n	801819a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	689b      	ldr	r3, [r3, #8]
 8018188:	4a2c      	ldr	r2, [pc, #176]	@ (801823c <UART_AdvFeatureConfig+0x154>)
 801818a:	4013      	ands	r3, r2
 801818c:	0019      	movs	r1, r3
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	430a      	orrs	r2, r1
 8018198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801819e:	2220      	movs	r2, #32
 80181a0:	4013      	ands	r3, r2
 80181a2:	d00b      	beq.n	80181bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	689b      	ldr	r3, [r3, #8]
 80181aa:	4a25      	ldr	r2, [pc, #148]	@ (8018240 <UART_AdvFeatureConfig+0x158>)
 80181ac:	4013      	ands	r3, r2
 80181ae:	0019      	movs	r1, r3
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	430a      	orrs	r2, r1
 80181ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181c0:	2240      	movs	r2, #64	@ 0x40
 80181c2:	4013      	ands	r3, r2
 80181c4:	d01d      	beq.n	8018202 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	685b      	ldr	r3, [r3, #4]
 80181cc:	4a1d      	ldr	r2, [pc, #116]	@ (8018244 <UART_AdvFeatureConfig+0x15c>)
 80181ce:	4013      	ands	r3, r2
 80181d0:	0019      	movs	r1, r3
 80181d2:	687b      	ldr	r3, [r7, #4]
 80181d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	430a      	orrs	r2, r1
 80181dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80181e2:	2380      	movs	r3, #128	@ 0x80
 80181e4:	035b      	lsls	r3, r3, #13
 80181e6:	429a      	cmp	r2, r3
 80181e8:	d10b      	bne.n	8018202 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	685b      	ldr	r3, [r3, #4]
 80181f0:	4a15      	ldr	r2, [pc, #84]	@ (8018248 <UART_AdvFeatureConfig+0x160>)
 80181f2:	4013      	ands	r3, r2
 80181f4:	0019      	movs	r1, r3
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	430a      	orrs	r2, r1
 8018200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018206:	2280      	movs	r2, #128	@ 0x80
 8018208:	4013      	ands	r3, r2
 801820a:	d00b      	beq.n	8018224 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	685b      	ldr	r3, [r3, #4]
 8018212:	4a0e      	ldr	r2, [pc, #56]	@ (801824c <UART_AdvFeatureConfig+0x164>)
 8018214:	4013      	ands	r3, r2
 8018216:	0019      	movs	r1, r3
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	430a      	orrs	r2, r1
 8018222:	605a      	str	r2, [r3, #4]
  }
}
 8018224:	46c0      	nop			@ (mov r8, r8)
 8018226:	46bd      	mov	sp, r7
 8018228:	b002      	add	sp, #8
 801822a:	bd80      	pop	{r7, pc}
 801822c:	fffdffff 	.word	0xfffdffff
 8018230:	fffeffff 	.word	0xfffeffff
 8018234:	fffbffff 	.word	0xfffbffff
 8018238:	ffff7fff 	.word	0xffff7fff
 801823c:	ffffefff 	.word	0xffffefff
 8018240:	ffffdfff 	.word	0xffffdfff
 8018244:	ffefffff 	.word	0xffefffff
 8018248:	ff9fffff 	.word	0xff9fffff
 801824c:	fff7ffff 	.word	0xfff7ffff

08018250 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018250:	b580      	push	{r7, lr}
 8018252:	b092      	sub	sp, #72	@ 0x48
 8018254:	af02      	add	r7, sp, #8
 8018256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	2284      	movs	r2, #132	@ 0x84
 801825c:	2100      	movs	r1, #0
 801825e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018260:	f7f6 fd20 	bl	800eca4 <HAL_GetTick>
 8018264:	0003      	movs	r3, r0
 8018266:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	2208      	movs	r2, #8
 8018270:	4013      	ands	r3, r2
 8018272:	2b08      	cmp	r3, #8
 8018274:	d12c      	bne.n	80182d0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018278:	2280      	movs	r2, #128	@ 0x80
 801827a:	0391      	lsls	r1, r2, #14
 801827c:	6878      	ldr	r0, [r7, #4]
 801827e:	4a46      	ldr	r2, [pc, #280]	@ (8018398 <UART_CheckIdleState+0x148>)
 8018280:	9200      	str	r2, [sp, #0]
 8018282:	2200      	movs	r2, #0
 8018284:	f000 f88c 	bl	80183a0 <UART_WaitOnFlagUntilTimeout>
 8018288:	1e03      	subs	r3, r0, #0
 801828a:	d021      	beq.n	80182d0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801828c:	f3ef 8310 	mrs	r3, PRIMASK
 8018290:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8018294:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018296:	2301      	movs	r3, #1
 8018298:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801829a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801829c:	f383 8810 	msr	PRIMASK, r3
}
 80182a0:	46c0      	nop			@ (mov r8, r8)
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	681a      	ldr	r2, [r3, #0]
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	2180      	movs	r1, #128	@ 0x80
 80182ae:	438a      	bics	r2, r1
 80182b0:	601a      	str	r2, [r3, #0]
 80182b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80182b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182b8:	f383 8810 	msr	PRIMASK, r3
}
 80182bc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	2220      	movs	r2, #32
 80182c2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	2278      	movs	r2, #120	@ 0x78
 80182c8:	2100      	movs	r1, #0
 80182ca:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80182cc:	2303      	movs	r3, #3
 80182ce:	e05f      	b.n	8018390 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	2204      	movs	r2, #4
 80182d8:	4013      	ands	r3, r2
 80182da:	2b04      	cmp	r3, #4
 80182dc:	d146      	bne.n	801836c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80182de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182e0:	2280      	movs	r2, #128	@ 0x80
 80182e2:	03d1      	lsls	r1, r2, #15
 80182e4:	6878      	ldr	r0, [r7, #4]
 80182e6:	4a2c      	ldr	r2, [pc, #176]	@ (8018398 <UART_CheckIdleState+0x148>)
 80182e8:	9200      	str	r2, [sp, #0]
 80182ea:	2200      	movs	r2, #0
 80182ec:	f000 f858 	bl	80183a0 <UART_WaitOnFlagUntilTimeout>
 80182f0:	1e03      	subs	r3, r0, #0
 80182f2:	d03b      	beq.n	801836c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80182f4:	f3ef 8310 	mrs	r3, PRIMASK
 80182f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80182fa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80182fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80182fe:	2301      	movs	r3, #1
 8018300:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018302:	693b      	ldr	r3, [r7, #16]
 8018304:	f383 8810 	msr	PRIMASK, r3
}
 8018308:	46c0      	nop			@ (mov r8, r8)
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	681a      	ldr	r2, [r3, #0]
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	4921      	ldr	r1, [pc, #132]	@ (801839c <UART_CheckIdleState+0x14c>)
 8018316:	400a      	ands	r2, r1
 8018318:	601a      	str	r2, [r3, #0]
 801831a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801831c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801831e:	697b      	ldr	r3, [r7, #20]
 8018320:	f383 8810 	msr	PRIMASK, r3
}
 8018324:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018326:	f3ef 8310 	mrs	r3, PRIMASK
 801832a:	61bb      	str	r3, [r7, #24]
  return(result);
 801832c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801832e:	633b      	str	r3, [r7, #48]	@ 0x30
 8018330:	2301      	movs	r3, #1
 8018332:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018334:	69fb      	ldr	r3, [r7, #28]
 8018336:	f383 8810 	msr	PRIMASK, r3
}
 801833a:	46c0      	nop			@ (mov r8, r8)
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	689a      	ldr	r2, [r3, #8]
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	2101      	movs	r1, #1
 8018348:	438a      	bics	r2, r1
 801834a:	609a      	str	r2, [r3, #8]
 801834c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801834e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018350:	6a3b      	ldr	r3, [r7, #32]
 8018352:	f383 8810 	msr	PRIMASK, r3
}
 8018356:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	2280      	movs	r2, #128	@ 0x80
 801835c:	2120      	movs	r1, #32
 801835e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	2278      	movs	r2, #120	@ 0x78
 8018364:	2100      	movs	r1, #0
 8018366:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018368:	2303      	movs	r3, #3
 801836a:	e011      	b.n	8018390 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	2220      	movs	r2, #32
 8018370:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	2280      	movs	r2, #128	@ 0x80
 8018376:	2120      	movs	r1, #32
 8018378:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	2200      	movs	r2, #0
 801837e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	2200      	movs	r2, #0
 8018384:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	2278      	movs	r2, #120	@ 0x78
 801838a:	2100      	movs	r1, #0
 801838c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801838e:	2300      	movs	r3, #0
}
 8018390:	0018      	movs	r0, r3
 8018392:	46bd      	mov	sp, r7
 8018394:	b010      	add	sp, #64	@ 0x40
 8018396:	bd80      	pop	{r7, pc}
 8018398:	01ffffff 	.word	0x01ffffff
 801839c:	fffffedf 	.word	0xfffffedf

080183a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80183a0:	b580      	push	{r7, lr}
 80183a2:	b084      	sub	sp, #16
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	60f8      	str	r0, [r7, #12]
 80183a8:	60b9      	str	r1, [r7, #8]
 80183aa:	603b      	str	r3, [r7, #0]
 80183ac:	1dfb      	adds	r3, r7, #7
 80183ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80183b0:	e04b      	b.n	801844a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80183b2:	69bb      	ldr	r3, [r7, #24]
 80183b4:	3301      	adds	r3, #1
 80183b6:	d048      	beq.n	801844a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80183b8:	f7f6 fc74 	bl	800eca4 <HAL_GetTick>
 80183bc:	0002      	movs	r2, r0
 80183be:	683b      	ldr	r3, [r7, #0]
 80183c0:	1ad3      	subs	r3, r2, r3
 80183c2:	69ba      	ldr	r2, [r7, #24]
 80183c4:	429a      	cmp	r2, r3
 80183c6:	d302      	bcc.n	80183ce <UART_WaitOnFlagUntilTimeout+0x2e>
 80183c8:	69bb      	ldr	r3, [r7, #24]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d101      	bne.n	80183d2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80183ce:	2303      	movs	r3, #3
 80183d0:	e04b      	b.n	801846a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80183d2:	68fb      	ldr	r3, [r7, #12]
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	2204      	movs	r2, #4
 80183da:	4013      	ands	r3, r2
 80183dc:	d035      	beq.n	801844a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	69db      	ldr	r3, [r3, #28]
 80183e4:	2208      	movs	r2, #8
 80183e6:	4013      	ands	r3, r2
 80183e8:	2b08      	cmp	r3, #8
 80183ea:	d111      	bne.n	8018410 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	2208      	movs	r2, #8
 80183f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	0018      	movs	r0, r3
 80183f8:	f000 f9ca 	bl	8018790 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	2284      	movs	r2, #132	@ 0x84
 8018400:	2108      	movs	r1, #8
 8018402:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	2278      	movs	r2, #120	@ 0x78
 8018408:	2100      	movs	r1, #0
 801840a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801840c:	2301      	movs	r3, #1
 801840e:	e02c      	b.n	801846a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	69da      	ldr	r2, [r3, #28]
 8018416:	2380      	movs	r3, #128	@ 0x80
 8018418:	011b      	lsls	r3, r3, #4
 801841a:	401a      	ands	r2, r3
 801841c:	2380      	movs	r3, #128	@ 0x80
 801841e:	011b      	lsls	r3, r3, #4
 8018420:	429a      	cmp	r2, r3
 8018422:	d112      	bne.n	801844a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018424:	68fb      	ldr	r3, [r7, #12]
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	2280      	movs	r2, #128	@ 0x80
 801842a:	0112      	lsls	r2, r2, #4
 801842c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801842e:	68fb      	ldr	r3, [r7, #12]
 8018430:	0018      	movs	r0, r3
 8018432:	f000 f9ad 	bl	8018790 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8018436:	68fb      	ldr	r3, [r7, #12]
 8018438:	2284      	movs	r2, #132	@ 0x84
 801843a:	2120      	movs	r1, #32
 801843c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	2278      	movs	r2, #120	@ 0x78
 8018442:	2100      	movs	r1, #0
 8018444:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8018446:	2303      	movs	r3, #3
 8018448:	e00f      	b.n	801846a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	69db      	ldr	r3, [r3, #28]
 8018450:	68ba      	ldr	r2, [r7, #8]
 8018452:	4013      	ands	r3, r2
 8018454:	68ba      	ldr	r2, [r7, #8]
 8018456:	1ad3      	subs	r3, r2, r3
 8018458:	425a      	negs	r2, r3
 801845a:	4153      	adcs	r3, r2
 801845c:	b2db      	uxtb	r3, r3
 801845e:	001a      	movs	r2, r3
 8018460:	1dfb      	adds	r3, r7, #7
 8018462:	781b      	ldrb	r3, [r3, #0]
 8018464:	429a      	cmp	r2, r3
 8018466:	d0a4      	beq.n	80183b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018468:	2300      	movs	r3, #0
}
 801846a:	0018      	movs	r0, r3
 801846c:	46bd      	mov	sp, r7
 801846e:	b004      	add	sp, #16
 8018470:	bd80      	pop	{r7, pc}
	...

08018474 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018474:	b580      	push	{r7, lr}
 8018476:	b090      	sub	sp, #64	@ 0x40
 8018478:	af00      	add	r7, sp, #0
 801847a:	60f8      	str	r0, [r7, #12]
 801847c:	60b9      	str	r1, [r7, #8]
 801847e:	1dbb      	adds	r3, r7, #6
 8018480:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	68ba      	ldr	r2, [r7, #8]
 8018486:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8018488:	68fb      	ldr	r3, [r7, #12]
 801848a:	1dba      	adds	r2, r7, #6
 801848c:	2158      	movs	r1, #88	@ 0x58
 801848e:	8812      	ldrh	r2, [r2, #0]
 8018490:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8018492:	68fb      	ldr	r3, [r7, #12]
 8018494:	1dba      	adds	r2, r7, #6
 8018496:	215a      	movs	r1, #90	@ 0x5a
 8018498:	8812      	ldrh	r2, [r2, #0]
 801849a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	2200      	movs	r2, #0
 80184a0:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	689a      	ldr	r2, [r3, #8]
 80184a6:	2380      	movs	r3, #128	@ 0x80
 80184a8:	015b      	lsls	r3, r3, #5
 80184aa:	429a      	cmp	r2, r3
 80184ac:	d10d      	bne.n	80184ca <UART_Start_Receive_IT+0x56>
 80184ae:	68fb      	ldr	r3, [r7, #12]
 80184b0:	691b      	ldr	r3, [r3, #16]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d104      	bne.n	80184c0 <UART_Start_Receive_IT+0x4c>
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	225c      	movs	r2, #92	@ 0x5c
 80184ba:	4950      	ldr	r1, [pc, #320]	@ (80185fc <UART_Start_Receive_IT+0x188>)
 80184bc:	5299      	strh	r1, [r3, r2]
 80184be:	e02e      	b.n	801851e <UART_Start_Receive_IT+0xaa>
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	225c      	movs	r2, #92	@ 0x5c
 80184c4:	21ff      	movs	r1, #255	@ 0xff
 80184c6:	5299      	strh	r1, [r3, r2]
 80184c8:	e029      	b.n	801851e <UART_Start_Receive_IT+0xaa>
 80184ca:	68fb      	ldr	r3, [r7, #12]
 80184cc:	689b      	ldr	r3, [r3, #8]
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d10d      	bne.n	80184ee <UART_Start_Receive_IT+0x7a>
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	691b      	ldr	r3, [r3, #16]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d104      	bne.n	80184e4 <UART_Start_Receive_IT+0x70>
 80184da:	68fb      	ldr	r3, [r7, #12]
 80184dc:	225c      	movs	r2, #92	@ 0x5c
 80184de:	21ff      	movs	r1, #255	@ 0xff
 80184e0:	5299      	strh	r1, [r3, r2]
 80184e2:	e01c      	b.n	801851e <UART_Start_Receive_IT+0xaa>
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	225c      	movs	r2, #92	@ 0x5c
 80184e8:	217f      	movs	r1, #127	@ 0x7f
 80184ea:	5299      	strh	r1, [r3, r2]
 80184ec:	e017      	b.n	801851e <UART_Start_Receive_IT+0xaa>
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	689a      	ldr	r2, [r3, #8]
 80184f2:	2380      	movs	r3, #128	@ 0x80
 80184f4:	055b      	lsls	r3, r3, #21
 80184f6:	429a      	cmp	r2, r3
 80184f8:	d10d      	bne.n	8018516 <UART_Start_Receive_IT+0xa2>
 80184fa:	68fb      	ldr	r3, [r7, #12]
 80184fc:	691b      	ldr	r3, [r3, #16]
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d104      	bne.n	801850c <UART_Start_Receive_IT+0x98>
 8018502:	68fb      	ldr	r3, [r7, #12]
 8018504:	225c      	movs	r2, #92	@ 0x5c
 8018506:	217f      	movs	r1, #127	@ 0x7f
 8018508:	5299      	strh	r1, [r3, r2]
 801850a:	e008      	b.n	801851e <UART_Start_Receive_IT+0xaa>
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	225c      	movs	r2, #92	@ 0x5c
 8018510:	213f      	movs	r1, #63	@ 0x3f
 8018512:	5299      	strh	r1, [r3, r2]
 8018514:	e003      	b.n	801851e <UART_Start_Receive_IT+0xaa>
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	225c      	movs	r2, #92	@ 0x5c
 801851a:	2100      	movs	r1, #0
 801851c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	2284      	movs	r2, #132	@ 0x84
 8018522:	2100      	movs	r1, #0
 8018524:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	2280      	movs	r2, #128	@ 0x80
 801852a:	2122      	movs	r1, #34	@ 0x22
 801852c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801852e:	f3ef 8310 	mrs	r3, PRIMASK
 8018532:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8018534:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018538:	2301      	movs	r3, #1
 801853a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801853c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801853e:	f383 8810 	msr	PRIMASK, r3
}
 8018542:	46c0      	nop			@ (mov r8, r8)
 8018544:	68fb      	ldr	r3, [r7, #12]
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	689a      	ldr	r2, [r3, #8]
 801854a:	68fb      	ldr	r3, [r7, #12]
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	2101      	movs	r1, #1
 8018550:	430a      	orrs	r2, r1
 8018552:	609a      	str	r2, [r3, #8]
 8018554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018556:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801855a:	f383 8810 	msr	PRIMASK, r3
}
 801855e:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	689a      	ldr	r2, [r3, #8]
 8018564:	2380      	movs	r3, #128	@ 0x80
 8018566:	015b      	lsls	r3, r3, #5
 8018568:	429a      	cmp	r2, r3
 801856a:	d107      	bne.n	801857c <UART_Start_Receive_IT+0x108>
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	691b      	ldr	r3, [r3, #16]
 8018570:	2b00      	cmp	r3, #0
 8018572:	d103      	bne.n	801857c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8018574:	68fb      	ldr	r3, [r7, #12]
 8018576:	4a22      	ldr	r2, [pc, #136]	@ (8018600 <UART_Start_Receive_IT+0x18c>)
 8018578:	669a      	str	r2, [r3, #104]	@ 0x68
 801857a:	e002      	b.n	8018582 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801857c:	68fb      	ldr	r3, [r7, #12]
 801857e:	4a21      	ldr	r2, [pc, #132]	@ (8018604 <UART_Start_Receive_IT+0x190>)
 8018580:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	691b      	ldr	r3, [r3, #16]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d019      	beq.n	80185be <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801858a:	f3ef 8310 	mrs	r3, PRIMASK
 801858e:	61fb      	str	r3, [r7, #28]
  return(result);
 8018590:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8018592:	637b      	str	r3, [r7, #52]	@ 0x34
 8018594:	2301      	movs	r3, #1
 8018596:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018598:	6a3b      	ldr	r3, [r7, #32]
 801859a:	f383 8810 	msr	PRIMASK, r3
}
 801859e:	46c0      	nop			@ (mov r8, r8)
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	681a      	ldr	r2, [r3, #0]
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	2190      	movs	r1, #144	@ 0x90
 80185ac:	0049      	lsls	r1, r1, #1
 80185ae:	430a      	orrs	r2, r1
 80185b0:	601a      	str	r2, [r3, #0]
 80185b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80185b4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80185b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185b8:	f383 8810 	msr	PRIMASK, r3
}
 80185bc:	e018      	b.n	80185f0 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80185be:	f3ef 8310 	mrs	r3, PRIMASK
 80185c2:	613b      	str	r3, [r7, #16]
  return(result);
 80185c4:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80185c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80185c8:	2301      	movs	r3, #1
 80185ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80185cc:	697b      	ldr	r3, [r7, #20]
 80185ce:	f383 8810 	msr	PRIMASK, r3
}
 80185d2:	46c0      	nop			@ (mov r8, r8)
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	681b      	ldr	r3, [r3, #0]
 80185d8:	681a      	ldr	r2, [r3, #0]
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	2120      	movs	r1, #32
 80185e0:	430a      	orrs	r2, r1
 80185e2:	601a      	str	r2, [r3, #0]
 80185e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80185e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80185e8:	69bb      	ldr	r3, [r7, #24]
 80185ea:	f383 8810 	msr	PRIMASK, r3
}
 80185ee:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 80185f0:	2300      	movs	r3, #0
}
 80185f2:	0018      	movs	r0, r3
 80185f4:	46bd      	mov	sp, r7
 80185f6:	b010      	add	sp, #64	@ 0x40
 80185f8:	bd80      	pop	{r7, pc}
 80185fa:	46c0      	nop			@ (mov r8, r8)
 80185fc:	000001ff 	.word	0x000001ff
 8018600:	08018d75 	.word	0x08018d75
 8018604:	08018ba9 	.word	0x08018ba9

08018608 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018608:	b580      	push	{r7, lr}
 801860a:	b090      	sub	sp, #64	@ 0x40
 801860c:	af00      	add	r7, sp, #0
 801860e:	60f8      	str	r0, [r7, #12]
 8018610:	60b9      	str	r1, [r7, #8]
 8018612:	1dbb      	adds	r3, r7, #6
 8018614:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	68ba      	ldr	r2, [r7, #8]
 801861a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	1dba      	adds	r2, r7, #6
 8018620:	2158      	movs	r1, #88	@ 0x58
 8018622:	8812      	ldrh	r2, [r2, #0]
 8018624:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018626:	68fb      	ldr	r3, [r7, #12]
 8018628:	2284      	movs	r2, #132	@ 0x84
 801862a:	2100      	movs	r1, #0
 801862c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	2280      	movs	r2, #128	@ 0x80
 8018632:	2122      	movs	r1, #34	@ 0x22
 8018634:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8018636:	68fb      	ldr	r3, [r7, #12]
 8018638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801863a:	2b00      	cmp	r3, #0
 801863c:	d028      	beq.n	8018690 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801863e:	68fb      	ldr	r3, [r7, #12]
 8018640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018642:	4a3e      	ldr	r2, [pc, #248]	@ (801873c <UART_Start_Receive_DMA+0x134>)
 8018644:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8018646:	68fb      	ldr	r3, [r7, #12]
 8018648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801864a:	4a3d      	ldr	r2, [pc, #244]	@ (8018740 <UART_Start_Receive_DMA+0x138>)
 801864c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018652:	4a3c      	ldr	r2, [pc, #240]	@ (8018744 <UART_Start_Receive_DMA+0x13c>)
 8018654:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801865a:	2200      	movs	r2, #0
 801865c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	3324      	adds	r3, #36	@ 0x24
 8018668:	0019      	movs	r1, r3
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801866e:	001a      	movs	r2, r3
 8018670:	1dbb      	adds	r3, r7, #6
 8018672:	881b      	ldrh	r3, [r3, #0]
 8018674:	f7f7 f868 	bl	800f748 <HAL_DMA_Start_IT>
 8018678:	1e03      	subs	r3, r0, #0
 801867a:	d009      	beq.n	8018690 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	2284      	movs	r2, #132	@ 0x84
 8018680:	2110      	movs	r1, #16
 8018682:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	2280      	movs	r2, #128	@ 0x80
 8018688:	2120      	movs	r1, #32
 801868a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 801868c:	2301      	movs	r3, #1
 801868e:	e050      	b.n	8018732 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8018690:	68fb      	ldr	r3, [r7, #12]
 8018692:	691b      	ldr	r3, [r3, #16]
 8018694:	2b00      	cmp	r3, #0
 8018696:	d019      	beq.n	80186cc <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018698:	f3ef 8310 	mrs	r3, PRIMASK
 801869c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801869e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80186a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80186a2:	2301      	movs	r3, #1
 80186a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80186a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186a8:	f383 8810 	msr	PRIMASK, r3
}
 80186ac:	46c0      	nop			@ (mov r8, r8)
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	681a      	ldr	r2, [r3, #0]
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	2180      	movs	r1, #128	@ 0x80
 80186ba:	0049      	lsls	r1, r1, #1
 80186bc:	430a      	orrs	r2, r1
 80186be:	601a      	str	r2, [r3, #0]
 80186c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80186c2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80186c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80186c6:	f383 8810 	msr	PRIMASK, r3
}
 80186ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80186cc:	f3ef 8310 	mrs	r3, PRIMASK
 80186d0:	613b      	str	r3, [r7, #16]
  return(result);
 80186d2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80186d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80186d6:	2301      	movs	r3, #1
 80186d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80186da:	697b      	ldr	r3, [r7, #20]
 80186dc:	f383 8810 	msr	PRIMASK, r3
}
 80186e0:	46c0      	nop			@ (mov r8, r8)
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	689a      	ldr	r2, [r3, #8]
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	2101      	movs	r1, #1
 80186ee:	430a      	orrs	r2, r1
 80186f0:	609a      	str	r2, [r3, #8]
 80186f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80186f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80186f6:	69bb      	ldr	r3, [r7, #24]
 80186f8:	f383 8810 	msr	PRIMASK, r3
}
 80186fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80186fe:	f3ef 8310 	mrs	r3, PRIMASK
 8018702:	61fb      	str	r3, [r7, #28]
  return(result);
 8018704:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8018706:	637b      	str	r3, [r7, #52]	@ 0x34
 8018708:	2301      	movs	r3, #1
 801870a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801870c:	6a3b      	ldr	r3, [r7, #32]
 801870e:	f383 8810 	msr	PRIMASK, r3
}
 8018712:	46c0      	nop			@ (mov r8, r8)
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	689a      	ldr	r2, [r3, #8]
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	2140      	movs	r1, #64	@ 0x40
 8018720:	430a      	orrs	r2, r1
 8018722:	609a      	str	r2, [r3, #8]
 8018724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018726:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801872a:	f383 8810 	msr	PRIMASK, r3
}
 801872e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8018730:	2300      	movs	r3, #0
}
 8018732:	0018      	movs	r0, r3
 8018734:	46bd      	mov	sp, r7
 8018736:	b010      	add	sp, #64	@ 0x40
 8018738:	bd80      	pop	{r7, pc}
 801873a:	46c0      	nop			@ (mov r8, r8)
 801873c:	08018919 	.word	0x08018919
 8018740:	08018a4d 	.word	0x08018a4d
 8018744:	08018a95 	.word	0x08018a95

08018748 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8018748:	b580      	push	{r7, lr}
 801874a:	b086      	sub	sp, #24
 801874c:	af00      	add	r7, sp, #0
 801874e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018750:	f3ef 8310 	mrs	r3, PRIMASK
 8018754:	60bb      	str	r3, [r7, #8]
  return(result);
 8018756:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8018758:	617b      	str	r3, [r7, #20]
 801875a:	2301      	movs	r3, #1
 801875c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	f383 8810 	msr	PRIMASK, r3
}
 8018764:	46c0      	nop			@ (mov r8, r8)
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	681b      	ldr	r3, [r3, #0]
 801876a:	681a      	ldr	r2, [r3, #0]
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	21c0      	movs	r1, #192	@ 0xc0
 8018772:	438a      	bics	r2, r1
 8018774:	601a      	str	r2, [r3, #0]
 8018776:	697b      	ldr	r3, [r7, #20]
 8018778:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801877a:	693b      	ldr	r3, [r7, #16]
 801877c:	f383 8810 	msr	PRIMASK, r3
}
 8018780:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	2220      	movs	r2, #32
 8018786:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8018788:	46c0      	nop			@ (mov r8, r8)
 801878a:	46bd      	mov	sp, r7
 801878c:	b006      	add	sp, #24
 801878e:	bd80      	pop	{r7, pc}

08018790 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018790:	b580      	push	{r7, lr}
 8018792:	b08e      	sub	sp, #56	@ 0x38
 8018794:	af00      	add	r7, sp, #0
 8018796:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018798:	f3ef 8310 	mrs	r3, PRIMASK
 801879c:	617b      	str	r3, [r7, #20]
  return(result);
 801879e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80187a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80187a2:	2301      	movs	r3, #1
 80187a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187a6:	69bb      	ldr	r3, [r7, #24]
 80187a8:	f383 8810 	msr	PRIMASK, r3
}
 80187ac:	46c0      	nop			@ (mov r8, r8)
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	681a      	ldr	r2, [r3, #0]
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	4926      	ldr	r1, [pc, #152]	@ (8018854 <UART_EndRxTransfer+0xc4>)
 80187ba:	400a      	ands	r2, r1
 80187bc:	601a      	str	r2, [r3, #0]
 80187be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187c2:	69fb      	ldr	r3, [r7, #28]
 80187c4:	f383 8810 	msr	PRIMASK, r3
}
 80187c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80187ca:	f3ef 8310 	mrs	r3, PRIMASK
 80187ce:	623b      	str	r3, [r7, #32]
  return(result);
 80187d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80187d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80187d4:	2301      	movs	r3, #1
 80187d6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187da:	f383 8810 	msr	PRIMASK, r3
}
 80187de:	46c0      	nop			@ (mov r8, r8)
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	689a      	ldr	r2, [r3, #8]
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	2101      	movs	r1, #1
 80187ec:	438a      	bics	r2, r1
 80187ee:	609a      	str	r2, [r3, #8]
 80187f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80187f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80187f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187f6:	f383 8810 	msr	PRIMASK, r3
}
 80187fa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018800:	2b01      	cmp	r3, #1
 8018802:	d118      	bne.n	8018836 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018804:	f3ef 8310 	mrs	r3, PRIMASK
 8018808:	60bb      	str	r3, [r7, #8]
  return(result);
 801880a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801880c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801880e:	2301      	movs	r3, #1
 8018810:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018812:	68fb      	ldr	r3, [r7, #12]
 8018814:	f383 8810 	msr	PRIMASK, r3
}
 8018818:	46c0      	nop			@ (mov r8, r8)
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	681a      	ldr	r2, [r3, #0]
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	2110      	movs	r1, #16
 8018826:	438a      	bics	r2, r1
 8018828:	601a      	str	r2, [r3, #0]
 801882a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801882c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801882e:	693b      	ldr	r3, [r7, #16]
 8018830:	f383 8810 	msr	PRIMASK, r3
}
 8018834:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	2280      	movs	r2, #128	@ 0x80
 801883a:	2120      	movs	r1, #32
 801883c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	2200      	movs	r2, #0
 8018842:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	2200      	movs	r2, #0
 8018848:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801884a:	46c0      	nop			@ (mov r8, r8)
 801884c:	46bd      	mov	sp, r7
 801884e:	b00e      	add	sp, #56	@ 0x38
 8018850:	bd80      	pop	{r7, pc}
 8018852:	46c0      	nop			@ (mov r8, r8)
 8018854:	fffffedf 	.word	0xfffffedf

08018858 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b08c      	sub	sp, #48	@ 0x30
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018864:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	2220      	movs	r2, #32
 801886e:	4013      	ands	r3, r2
 8018870:	d135      	bne.n	80188de <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8018872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018874:	2252      	movs	r2, #82	@ 0x52
 8018876:	2100      	movs	r1, #0
 8018878:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801887a:	f3ef 8310 	mrs	r3, PRIMASK
 801887e:	60fb      	str	r3, [r7, #12]
  return(result);
 8018880:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8018882:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018884:	2301      	movs	r3, #1
 8018886:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018888:	693b      	ldr	r3, [r7, #16]
 801888a:	f383 8810 	msr	PRIMASK, r3
}
 801888e:	46c0      	nop			@ (mov r8, r8)
 8018890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	689a      	ldr	r2, [r3, #8]
 8018896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	2180      	movs	r1, #128	@ 0x80
 801889c:	438a      	bics	r2, r1
 801889e:	609a      	str	r2, [r3, #8]
 80188a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188a4:	697b      	ldr	r3, [r7, #20]
 80188a6:	f383 8810 	msr	PRIMASK, r3
}
 80188aa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80188ac:	f3ef 8310 	mrs	r3, PRIMASK
 80188b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80188b2:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80188b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80188b6:	2301      	movs	r3, #1
 80188b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188ba:	69fb      	ldr	r3, [r7, #28]
 80188bc:	f383 8810 	msr	PRIMASK, r3
}
 80188c0:	46c0      	nop			@ (mov r8, r8)
 80188c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	681a      	ldr	r2, [r3, #0]
 80188c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	2140      	movs	r1, #64	@ 0x40
 80188ce:	430a      	orrs	r2, r1
 80188d0:	601a      	str	r2, [r3, #0]
 80188d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80188d6:	6a3b      	ldr	r3, [r7, #32]
 80188d8:	f383 8810 	msr	PRIMASK, r3
}
 80188dc:	e006      	b.n	80188ec <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 80188de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188e0:	228c      	movs	r2, #140	@ 0x8c
 80188e2:	589b      	ldr	r3, [r3, r2]
 80188e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80188e6:	0010      	movs	r0, r2
 80188e8:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80188ea:	46c0      	nop			@ (mov r8, r8)
 80188ec:	46c0      	nop			@ (mov r8, r8)
 80188ee:	46bd      	mov	sp, r7
 80188f0:	b00c      	add	sp, #48	@ 0x30
 80188f2:	bd80      	pop	{r7, pc}

080188f4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80188f4:	b580      	push	{r7, lr}
 80188f6:	b084      	sub	sp, #16
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018900:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	2288      	movs	r2, #136	@ 0x88
 8018906:	589b      	ldr	r3, [r3, r2]
 8018908:	68fa      	ldr	r2, [r7, #12]
 801890a:	0010      	movs	r0, r2
 801890c:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801890e:	46c0      	nop			@ (mov r8, r8)
 8018910:	46bd      	mov	sp, r7
 8018912:	b004      	add	sp, #16
 8018914:	bd80      	pop	{r7, pc}
	...

08018918 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8018918:	b580      	push	{r7, lr}
 801891a:	b094      	sub	sp, #80	@ 0x50
 801891c:	af00      	add	r7, sp, #0
 801891e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018924:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	2220      	movs	r2, #32
 801892e:	4013      	ands	r3, r2
 8018930:	d16f      	bne.n	8018a12 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8018932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018934:	225a      	movs	r2, #90	@ 0x5a
 8018936:	2100      	movs	r1, #0
 8018938:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801893a:	f3ef 8310 	mrs	r3, PRIMASK
 801893e:	61bb      	str	r3, [r7, #24]
  return(result);
 8018940:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018942:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018944:	2301      	movs	r3, #1
 8018946:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018948:	69fb      	ldr	r3, [r7, #28]
 801894a:	f383 8810 	msr	PRIMASK, r3
}
 801894e:	46c0      	nop			@ (mov r8, r8)
 8018950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	681a      	ldr	r2, [r3, #0]
 8018956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	493b      	ldr	r1, [pc, #236]	@ (8018a48 <UART_DMAReceiveCplt+0x130>)
 801895c:	400a      	ands	r2, r1
 801895e:	601a      	str	r2, [r3, #0]
 8018960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018962:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018964:	6a3b      	ldr	r3, [r7, #32]
 8018966:	f383 8810 	msr	PRIMASK, r3
}
 801896a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801896c:	f3ef 8310 	mrs	r3, PRIMASK
 8018970:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018974:	647b      	str	r3, [r7, #68]	@ 0x44
 8018976:	2301      	movs	r3, #1
 8018978:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801897a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801897c:	f383 8810 	msr	PRIMASK, r3
}
 8018980:	46c0      	nop			@ (mov r8, r8)
 8018982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	689a      	ldr	r2, [r3, #8]
 8018988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	2101      	movs	r1, #1
 801898e:	438a      	bics	r2, r1
 8018990:	609a      	str	r2, [r3, #8]
 8018992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018998:	f383 8810 	msr	PRIMASK, r3
}
 801899c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801899e:	f3ef 8310 	mrs	r3, PRIMASK
 80189a2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80189a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80189a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80189a8:	2301      	movs	r3, #1
 80189aa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80189ae:	f383 8810 	msr	PRIMASK, r3
}
 80189b2:	46c0      	nop			@ (mov r8, r8)
 80189b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	689a      	ldr	r2, [r3, #8]
 80189ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189bc:	681b      	ldr	r3, [r3, #0]
 80189be:	2140      	movs	r1, #64	@ 0x40
 80189c0:	438a      	bics	r2, r1
 80189c2:	609a      	str	r2, [r3, #8]
 80189c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80189c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80189ca:	f383 8810 	msr	PRIMASK, r3
}
 80189ce:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80189d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189d2:	2280      	movs	r2, #128	@ 0x80
 80189d4:	2120      	movs	r1, #32
 80189d6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80189d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80189dc:	2b01      	cmp	r3, #1
 80189de:	d118      	bne.n	8018a12 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80189e0:	f3ef 8310 	mrs	r3, PRIMASK
 80189e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80189e6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80189e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80189ea:	2301      	movs	r3, #1
 80189ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189ee:	693b      	ldr	r3, [r7, #16]
 80189f0:	f383 8810 	msr	PRIMASK, r3
}
 80189f4:	46c0      	nop			@ (mov r8, r8)
 80189f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	681a      	ldr	r2, [r3, #0]
 80189fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	2110      	movs	r1, #16
 8018a02:	438a      	bics	r2, r1
 8018a04:	601a      	str	r2, [r3, #0]
 8018a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a0a:	697b      	ldr	r3, [r7, #20]
 8018a0c:	f383 8810 	msr	PRIMASK, r3
}
 8018a10:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018a12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a14:	2200      	movs	r2, #0
 8018a16:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018a18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018a1c:	2b01      	cmp	r3, #1
 8018a1e:	d109      	bne.n	8018a34 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8018a20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a22:	22ac      	movs	r2, #172	@ 0xac
 8018a24:	589b      	ldr	r3, [r3, r2]
 8018a26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018a28:	2158      	movs	r1, #88	@ 0x58
 8018a2a:	5a51      	ldrh	r1, [r2, r1]
 8018a2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018a2e:	0010      	movs	r0, r2
 8018a30:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018a32:	e005      	b.n	8018a40 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8018a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a36:	2294      	movs	r2, #148	@ 0x94
 8018a38:	589b      	ldr	r3, [r3, r2]
 8018a3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8018a3c:	0010      	movs	r0, r2
 8018a3e:	4798      	blx	r3
}
 8018a40:	46c0      	nop			@ (mov r8, r8)
 8018a42:	46bd      	mov	sp, r7
 8018a44:	b014      	add	sp, #80	@ 0x50
 8018a46:	bd80      	pop	{r7, pc}
 8018a48:	fffffeff 	.word	0xfffffeff

08018a4c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	b084      	sub	sp, #16
 8018a50:	af00      	add	r7, sp, #0
 8018a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a58:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	2201      	movs	r2, #1
 8018a5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018a64:	2b01      	cmp	r3, #1
 8018a66:	d10b      	bne.n	8018a80 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	22ac      	movs	r2, #172	@ 0xac
 8018a6c:	589b      	ldr	r3, [r3, r2]
 8018a6e:	68fa      	ldr	r2, [r7, #12]
 8018a70:	2158      	movs	r1, #88	@ 0x58
 8018a72:	5a52      	ldrh	r2, [r2, r1]
 8018a74:	0852      	lsrs	r2, r2, #1
 8018a76:	b291      	uxth	r1, r2
 8018a78:	68fa      	ldr	r2, [r7, #12]
 8018a7a:	0010      	movs	r0, r2
 8018a7c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8018a7e:	e005      	b.n	8018a8c <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	2290      	movs	r2, #144	@ 0x90
 8018a84:	589b      	ldr	r3, [r3, r2]
 8018a86:	68fa      	ldr	r2, [r7, #12]
 8018a88:	0010      	movs	r0, r2
 8018a8a:	4798      	blx	r3
}
 8018a8c:	46c0      	nop			@ (mov r8, r8)
 8018a8e:	46bd      	mov	sp, r7
 8018a90:	b004      	add	sp, #16
 8018a92:	bd80      	pop	{r7, pc}

08018a94 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b086      	sub	sp, #24
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018aa0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8018aa2:	697b      	ldr	r3, [r7, #20]
 8018aa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018aa6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8018aa8:	697b      	ldr	r3, [r7, #20]
 8018aaa:	2280      	movs	r2, #128	@ 0x80
 8018aac:	589b      	ldr	r3, [r3, r2]
 8018aae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8018ab0:	697b      	ldr	r3, [r7, #20]
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	689b      	ldr	r3, [r3, #8]
 8018ab6:	2280      	movs	r2, #128	@ 0x80
 8018ab8:	4013      	ands	r3, r2
 8018aba:	2b80      	cmp	r3, #128	@ 0x80
 8018abc:	d10a      	bne.n	8018ad4 <UART_DMAError+0x40>
 8018abe:	693b      	ldr	r3, [r7, #16]
 8018ac0:	2b21      	cmp	r3, #33	@ 0x21
 8018ac2:	d107      	bne.n	8018ad4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8018ac4:	697b      	ldr	r3, [r7, #20]
 8018ac6:	2252      	movs	r2, #82	@ 0x52
 8018ac8:	2100      	movs	r1, #0
 8018aca:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8018acc:	697b      	ldr	r3, [r7, #20]
 8018ace:	0018      	movs	r0, r3
 8018ad0:	f7ff fe3a 	bl	8018748 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8018ad4:	697b      	ldr	r3, [r7, #20]
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	689b      	ldr	r3, [r3, #8]
 8018ada:	2240      	movs	r2, #64	@ 0x40
 8018adc:	4013      	ands	r3, r2
 8018ade:	2b40      	cmp	r3, #64	@ 0x40
 8018ae0:	d10a      	bne.n	8018af8 <UART_DMAError+0x64>
 8018ae2:	68fb      	ldr	r3, [r7, #12]
 8018ae4:	2b22      	cmp	r3, #34	@ 0x22
 8018ae6:	d107      	bne.n	8018af8 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8018ae8:	697b      	ldr	r3, [r7, #20]
 8018aea:	225a      	movs	r2, #90	@ 0x5a
 8018aec:	2100      	movs	r1, #0
 8018aee:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8018af0:	697b      	ldr	r3, [r7, #20]
 8018af2:	0018      	movs	r0, r3
 8018af4:	f7ff fe4c 	bl	8018790 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8018af8:	697b      	ldr	r3, [r7, #20]
 8018afa:	2284      	movs	r2, #132	@ 0x84
 8018afc:	589b      	ldr	r3, [r3, r2]
 8018afe:	2210      	movs	r2, #16
 8018b00:	431a      	orrs	r2, r3
 8018b02:	697b      	ldr	r3, [r7, #20]
 8018b04:	2184      	movs	r1, #132	@ 0x84
 8018b06:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018b08:	697b      	ldr	r3, [r7, #20]
 8018b0a:	2298      	movs	r2, #152	@ 0x98
 8018b0c:	589b      	ldr	r3, [r3, r2]
 8018b0e:	697a      	ldr	r2, [r7, #20]
 8018b10:	0010      	movs	r0, r2
 8018b12:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018b14:	46c0      	nop			@ (mov r8, r8)
 8018b16:	46bd      	mov	sp, r7
 8018b18:	b006      	add	sp, #24
 8018b1a:	bd80      	pop	{r7, pc}

08018b1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018b1c:	b580      	push	{r7, lr}
 8018b1e:	b084      	sub	sp, #16
 8018b20:	af00      	add	r7, sp, #0
 8018b22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	225a      	movs	r2, #90	@ 0x5a
 8018b2e:	2100      	movs	r1, #0
 8018b30:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	2252      	movs	r2, #82	@ 0x52
 8018b36:	2100      	movs	r1, #0
 8018b38:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	2298      	movs	r2, #152	@ 0x98
 8018b3e:	589b      	ldr	r3, [r3, r2]
 8018b40:	68fa      	ldr	r2, [r7, #12]
 8018b42:	0010      	movs	r0, r2
 8018b44:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018b46:	46c0      	nop			@ (mov r8, r8)
 8018b48:	46bd      	mov	sp, r7
 8018b4a:	b004      	add	sp, #16
 8018b4c:	bd80      	pop	{r7, pc}

08018b4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8018b4e:	b580      	push	{r7, lr}
 8018b50:	b086      	sub	sp, #24
 8018b52:	af00      	add	r7, sp, #0
 8018b54:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018b56:	f3ef 8310 	mrs	r3, PRIMASK
 8018b5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8018b5c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8018b5e:	617b      	str	r3, [r7, #20]
 8018b60:	2301      	movs	r3, #1
 8018b62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	f383 8810 	msr	PRIMASK, r3
}
 8018b6a:	46c0      	nop			@ (mov r8, r8)
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	681a      	ldr	r2, [r3, #0]
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	2140      	movs	r1, #64	@ 0x40
 8018b78:	438a      	bics	r2, r1
 8018b7a:	601a      	str	r2, [r3, #0]
 8018b7c:	697b      	ldr	r3, [r7, #20]
 8018b7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018b80:	693b      	ldr	r3, [r7, #16]
 8018b82:	f383 8810 	msr	PRIMASK, r3
}
 8018b86:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	2220      	movs	r2, #32
 8018b8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	2200      	movs	r2, #0
 8018b92:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	228c      	movs	r2, #140	@ 0x8c
 8018b98:	589b      	ldr	r3, [r3, r2]
 8018b9a:	687a      	ldr	r2, [r7, #4]
 8018b9c:	0010      	movs	r0, r2
 8018b9e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018ba0:	46c0      	nop			@ (mov r8, r8)
 8018ba2:	46bd      	mov	sp, r7
 8018ba4:	b006      	add	sp, #24
 8018ba6:	bd80      	pop	{r7, pc}

08018ba8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8018ba8:	b580      	push	{r7, lr}
 8018baa:	b094      	sub	sp, #80	@ 0x50
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8018bb0:	204e      	movs	r0, #78	@ 0x4e
 8018bb2:	183b      	adds	r3, r7, r0
 8018bb4:	687a      	ldr	r2, [r7, #4]
 8018bb6:	215c      	movs	r1, #92	@ 0x5c
 8018bb8:	5a52      	ldrh	r2, [r2, r1]
 8018bba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	2280      	movs	r2, #128	@ 0x80
 8018bc0:	589b      	ldr	r3, [r3, r2]
 8018bc2:	2b22      	cmp	r3, #34	@ 0x22
 8018bc4:	d000      	beq.n	8018bc8 <UART_RxISR_8BIT+0x20>
 8018bc6:	e0c2      	b.n	8018d4e <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	681b      	ldr	r3, [r3, #0]
 8018bcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018bce:	214c      	movs	r1, #76	@ 0x4c
 8018bd0:	187b      	adds	r3, r7, r1
 8018bd2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8018bd4:	187b      	adds	r3, r7, r1
 8018bd6:	881b      	ldrh	r3, [r3, #0]
 8018bd8:	b2da      	uxtb	r2, r3
 8018bda:	183b      	adds	r3, r7, r0
 8018bdc:	881b      	ldrh	r3, [r3, #0]
 8018bde:	b2d9      	uxtb	r1, r3
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018be4:	400a      	ands	r2, r1
 8018be6:	b2d2      	uxtb	r2, r2
 8018be8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018bee:	1c5a      	adds	r2, r3, #1
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	225a      	movs	r2, #90	@ 0x5a
 8018bf8:	5a9b      	ldrh	r3, [r3, r2]
 8018bfa:	b29b      	uxth	r3, r3
 8018bfc:	3b01      	subs	r3, #1
 8018bfe:	b299      	uxth	r1, r3
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	225a      	movs	r2, #90	@ 0x5a
 8018c04:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	225a      	movs	r2, #90	@ 0x5a
 8018c0a:	5a9b      	ldrh	r3, [r3, r2]
 8018c0c:	b29b      	uxth	r3, r3
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d000      	beq.n	8018c14 <UART_RxISR_8BIT+0x6c>
 8018c12:	e0a4      	b.n	8018d5e <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018c14:	f3ef 8310 	mrs	r3, PRIMASK
 8018c18:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8018c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018c1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018c1e:	2301      	movs	r3, #1
 8018c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018c24:	f383 8810 	msr	PRIMASK, r3
}
 8018c28:	46c0      	nop			@ (mov r8, r8)
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	681a      	ldr	r2, [r3, #0]
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	494c      	ldr	r1, [pc, #304]	@ (8018d68 <UART_RxISR_8BIT+0x1c0>)
 8018c36:	400a      	ands	r2, r1
 8018c38:	601a      	str	r2, [r3, #0]
 8018c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c40:	f383 8810 	msr	PRIMASK, r3
}
 8018c44:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018c46:	f3ef 8310 	mrs	r3, PRIMASK
 8018c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8018c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018c4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8018c50:	2301      	movs	r3, #1
 8018c52:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018c56:	f383 8810 	msr	PRIMASK, r3
}
 8018c5a:	46c0      	nop			@ (mov r8, r8)
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	689a      	ldr	r2, [r3, #8]
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	2101      	movs	r1, #1
 8018c68:	438a      	bics	r2, r1
 8018c6a:	609a      	str	r2, [r3, #8]
 8018c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018c72:	f383 8810 	msr	PRIMASK, r3
}
 8018c76:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	2280      	movs	r2, #128	@ 0x80
 8018c7c:	2120      	movs	r1, #32
 8018c7e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	2200      	movs	r2, #0
 8018c84:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	2200      	movs	r2, #0
 8018c8a:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	681b      	ldr	r3, [r3, #0]
 8018c90:	4a36      	ldr	r2, [pc, #216]	@ (8018d6c <UART_RxISR_8BIT+0x1c4>)
 8018c92:	4293      	cmp	r3, r2
 8018c94:	d01f      	beq.n	8018cd6 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	685a      	ldr	r2, [r3, #4]
 8018c9c:	2380      	movs	r3, #128	@ 0x80
 8018c9e:	041b      	lsls	r3, r3, #16
 8018ca0:	4013      	ands	r3, r2
 8018ca2:	d018      	beq.n	8018cd6 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8018ca8:	61bb      	str	r3, [r7, #24]
  return(result);
 8018caa:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018cac:	643b      	str	r3, [r7, #64]	@ 0x40
 8018cae:	2301      	movs	r3, #1
 8018cb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cb2:	69fb      	ldr	r3, [r7, #28]
 8018cb4:	f383 8810 	msr	PRIMASK, r3
}
 8018cb8:	46c0      	nop			@ (mov r8, r8)
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	681a      	ldr	r2, [r3, #0]
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	492a      	ldr	r1, [pc, #168]	@ (8018d70 <UART_RxISR_8BIT+0x1c8>)
 8018cc6:	400a      	ands	r2, r1
 8018cc8:	601a      	str	r2, [r3, #0]
 8018cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018ccc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cce:	6a3b      	ldr	r3, [r7, #32]
 8018cd0:	f383 8810 	msr	PRIMASK, r3
}
 8018cd4:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018cda:	2b01      	cmp	r3, #1
 8018cdc:	d130      	bne.n	8018d40 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	2200      	movs	r2, #0
 8018ce2:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8018ce8:	60fb      	str	r3, [r7, #12]
  return(result);
 8018cea:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018cee:	2301      	movs	r3, #1
 8018cf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018cf2:	693b      	ldr	r3, [r7, #16]
 8018cf4:	f383 8810 	msr	PRIMASK, r3
}
 8018cf8:	46c0      	nop			@ (mov r8, r8)
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	681a      	ldr	r2, [r3, #0]
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	2110      	movs	r1, #16
 8018d06:	438a      	bics	r2, r1
 8018d08:	601a      	str	r2, [r3, #0]
 8018d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d0e:	697b      	ldr	r3, [r7, #20]
 8018d10:	f383 8810 	msr	PRIMASK, r3
}
 8018d14:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	69db      	ldr	r3, [r3, #28]
 8018d1c:	2210      	movs	r2, #16
 8018d1e:	4013      	ands	r3, r2
 8018d20:	2b10      	cmp	r3, #16
 8018d22:	d103      	bne.n	8018d2c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	2210      	movs	r2, #16
 8018d2a:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	22ac      	movs	r2, #172	@ 0xac
 8018d30:	589b      	ldr	r3, [r3, r2]
 8018d32:	687a      	ldr	r2, [r7, #4]
 8018d34:	2158      	movs	r1, #88	@ 0x58
 8018d36:	5a51      	ldrh	r1, [r2, r1]
 8018d38:	687a      	ldr	r2, [r7, #4]
 8018d3a:	0010      	movs	r0, r2
 8018d3c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018d3e:	e00e      	b.n	8018d5e <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	2294      	movs	r2, #148	@ 0x94
 8018d44:	589b      	ldr	r3, [r3, r2]
 8018d46:	687a      	ldr	r2, [r7, #4]
 8018d48:	0010      	movs	r0, r2
 8018d4a:	4798      	blx	r3
}
 8018d4c:	e007      	b.n	8018d5e <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	681b      	ldr	r3, [r3, #0]
 8018d52:	699a      	ldr	r2, [r3, #24]
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	2108      	movs	r1, #8
 8018d5a:	430a      	orrs	r2, r1
 8018d5c:	619a      	str	r2, [r3, #24]
}
 8018d5e:	46c0      	nop			@ (mov r8, r8)
 8018d60:	46bd      	mov	sp, r7
 8018d62:	b014      	add	sp, #80	@ 0x50
 8018d64:	bd80      	pop	{r7, pc}
 8018d66:	46c0      	nop			@ (mov r8, r8)
 8018d68:	fffffedf 	.word	0xfffffedf
 8018d6c:	40004800 	.word	0x40004800
 8018d70:	fbffffff 	.word	0xfbffffff

08018d74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8018d74:	b580      	push	{r7, lr}
 8018d76:	b094      	sub	sp, #80	@ 0x50
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8018d7c:	204e      	movs	r0, #78	@ 0x4e
 8018d7e:	183b      	adds	r3, r7, r0
 8018d80:	687a      	ldr	r2, [r7, #4]
 8018d82:	215c      	movs	r1, #92	@ 0x5c
 8018d84:	5a52      	ldrh	r2, [r2, r1]
 8018d86:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	2280      	movs	r2, #128	@ 0x80
 8018d8c:	589b      	ldr	r3, [r3, r2]
 8018d8e:	2b22      	cmp	r3, #34	@ 0x22
 8018d90:	d000      	beq.n	8018d94 <UART_RxISR_16BIT+0x20>
 8018d92:	e0c2      	b.n	8018f1a <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018d9a:	214c      	movs	r1, #76	@ 0x4c
 8018d9c:	187b      	adds	r3, r7, r1
 8018d9e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018da4:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8018da6:	187b      	adds	r3, r7, r1
 8018da8:	183a      	adds	r2, r7, r0
 8018daa:	881b      	ldrh	r3, [r3, #0]
 8018dac:	8812      	ldrh	r2, [r2, #0]
 8018dae:	4013      	ands	r3, r2
 8018db0:	b29a      	uxth	r2, r3
 8018db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018db4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8018dba:	1c9a      	adds	r2, r3, #2
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	225a      	movs	r2, #90	@ 0x5a
 8018dc4:	5a9b      	ldrh	r3, [r3, r2]
 8018dc6:	b29b      	uxth	r3, r3
 8018dc8:	3b01      	subs	r3, #1
 8018dca:	b299      	uxth	r1, r3
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	225a      	movs	r2, #90	@ 0x5a
 8018dd0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	225a      	movs	r2, #90	@ 0x5a
 8018dd6:	5a9b      	ldrh	r3, [r3, r2]
 8018dd8:	b29b      	uxth	r3, r3
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d000      	beq.n	8018de0 <UART_RxISR_16BIT+0x6c>
 8018dde:	e0a4      	b.n	8018f2a <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018de0:	f3ef 8310 	mrs	r3, PRIMASK
 8018de4:	623b      	str	r3, [r7, #32]
  return(result);
 8018de6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8018dea:	2301      	movs	r3, #1
 8018dec:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018df0:	f383 8810 	msr	PRIMASK, r3
}
 8018df4:	46c0      	nop			@ (mov r8, r8)
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	681a      	ldr	r2, [r3, #0]
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	494c      	ldr	r1, [pc, #304]	@ (8018f34 <UART_RxISR_16BIT+0x1c0>)
 8018e02:	400a      	ands	r2, r1
 8018e04:	601a      	str	r2, [r3, #0]
 8018e06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e0c:	f383 8810 	msr	PRIMASK, r3
}
 8018e10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e12:	f3ef 8310 	mrs	r3, PRIMASK
 8018e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8018e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018e1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8018e1c:	2301      	movs	r3, #1
 8018e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e22:	f383 8810 	msr	PRIMASK, r3
}
 8018e26:	46c0      	nop			@ (mov r8, r8)
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	689a      	ldr	r2, [r3, #8]
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	2101      	movs	r1, #1
 8018e34:	438a      	bics	r2, r1
 8018e36:	609a      	str	r2, [r3, #8]
 8018e38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018e3a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e3e:	f383 8810 	msr	PRIMASK, r3
}
 8018e42:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	2280      	movs	r2, #128	@ 0x80
 8018e48:	2120      	movs	r1, #32
 8018e4a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	2200      	movs	r2, #0
 8018e50:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	2200      	movs	r2, #0
 8018e56:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	4a36      	ldr	r2, [pc, #216]	@ (8018f38 <UART_RxISR_16BIT+0x1c4>)
 8018e5e:	4293      	cmp	r3, r2
 8018e60:	d01f      	beq.n	8018ea2 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	685a      	ldr	r2, [r3, #4]
 8018e68:	2380      	movs	r3, #128	@ 0x80
 8018e6a:	041b      	lsls	r3, r3, #16
 8018e6c:	4013      	ands	r3, r2
 8018e6e:	d018      	beq.n	8018ea2 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e70:	f3ef 8310 	mrs	r3, PRIMASK
 8018e74:	617b      	str	r3, [r7, #20]
  return(result);
 8018e76:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018e7a:	2301      	movs	r3, #1
 8018e7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e7e:	69bb      	ldr	r3, [r7, #24]
 8018e80:	f383 8810 	msr	PRIMASK, r3
}
 8018e84:	46c0      	nop			@ (mov r8, r8)
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	681a      	ldr	r2, [r3, #0]
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	492a      	ldr	r1, [pc, #168]	@ (8018f3c <UART_RxISR_16BIT+0x1c8>)
 8018e92:	400a      	ands	r2, r1
 8018e94:	601a      	str	r2, [r3, #0]
 8018e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018e9a:	69fb      	ldr	r3, [r7, #28]
 8018e9c:	f383 8810 	msr	PRIMASK, r3
}
 8018ea0:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018ea6:	2b01      	cmp	r3, #1
 8018ea8:	d130      	bne.n	8018f0c <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	2200      	movs	r2, #0
 8018eae:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8018eb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8018eb6:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018eba:	2301      	movs	r3, #1
 8018ebc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ebe:	68fb      	ldr	r3, [r7, #12]
 8018ec0:	f383 8810 	msr	PRIMASK, r3
}
 8018ec4:	46c0      	nop			@ (mov r8, r8)
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	681a      	ldr	r2, [r3, #0]
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	2110      	movs	r1, #16
 8018ed2:	438a      	bics	r2, r1
 8018ed4:	601a      	str	r2, [r3, #0]
 8018ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ed8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018eda:	693b      	ldr	r3, [r7, #16]
 8018edc:	f383 8810 	msr	PRIMASK, r3
}
 8018ee0:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	69db      	ldr	r3, [r3, #28]
 8018ee8:	2210      	movs	r2, #16
 8018eea:	4013      	ands	r3, r2
 8018eec:	2b10      	cmp	r3, #16
 8018eee:	d103      	bne.n	8018ef8 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	2210      	movs	r2, #16
 8018ef6:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	22ac      	movs	r2, #172	@ 0xac
 8018efc:	589b      	ldr	r3, [r3, r2]
 8018efe:	687a      	ldr	r2, [r7, #4]
 8018f00:	2158      	movs	r1, #88	@ 0x58
 8018f02:	5a51      	ldrh	r1, [r2, r1]
 8018f04:	687a      	ldr	r2, [r7, #4]
 8018f06:	0010      	movs	r0, r2
 8018f08:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8018f0a:	e00e      	b.n	8018f2a <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	2294      	movs	r2, #148	@ 0x94
 8018f10:	589b      	ldr	r3, [r3, r2]
 8018f12:	687a      	ldr	r2, [r7, #4]
 8018f14:	0010      	movs	r0, r2
 8018f16:	4798      	blx	r3
}
 8018f18:	e007      	b.n	8018f2a <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	699a      	ldr	r2, [r3, #24]
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	2108      	movs	r1, #8
 8018f26:	430a      	orrs	r2, r1
 8018f28:	619a      	str	r2, [r3, #24]
}
 8018f2a:	46c0      	nop			@ (mov r8, r8)
 8018f2c:	46bd      	mov	sp, r7
 8018f2e:	b014      	add	sp, #80	@ 0x50
 8018f30:	bd80      	pop	{r7, pc}
 8018f32:	46c0      	nop			@ (mov r8, r8)
 8018f34:	fffffedf 	.word	0xfffffedf
 8018f38:	40004800 	.word	0x40004800
 8018f3c:	fbffffff 	.word	0xfbffffff

08018f40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b082      	sub	sp, #8
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8018f48:	46c0      	nop			@ (mov r8, r8)
 8018f4a:	46bd      	mov	sp, r7
 8018f4c:	b002      	add	sp, #8
 8018f4e:	bd80      	pop	{r7, pc}

08018f50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8018f50:	b580      	push	{r7, lr}
 8018f52:	b084      	sub	sp, #16
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	2244      	movs	r2, #68	@ 0x44
 8018f5c:	2100      	movs	r1, #0
 8018f5e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018f60:	4b05      	ldr	r3, [pc, #20]	@ (8018f78 <USB_EnableGlobalInt+0x28>)
 8018f62:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	b299      	uxth	r1, r3
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	2240      	movs	r2, #64	@ 0x40
 8018f6c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018f6e:	2300      	movs	r3, #0
}
 8018f70:	0018      	movs	r0, r3
 8018f72:	46bd      	mov	sp, r7
 8018f74:	b004      	add	sp, #16
 8018f76:	bd80      	pop	{r7, pc}
 8018f78:	0000bf80 	.word	0x0000bf80

08018f7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8018f7c:	b580      	push	{r7, lr}
 8018f7e:	b084      	sub	sp, #16
 8018f80:	af00      	add	r7, sp, #0
 8018f82:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018f84:	4b09      	ldr	r3, [pc, #36]	@ (8018fac <USB_DisableGlobalInt+0x30>)
 8018f86:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	2240      	movs	r2, #64	@ 0x40
 8018f8c:	5a9b      	ldrh	r3, [r3, r2]
 8018f8e:	b29b      	uxth	r3, r3
 8018f90:	68fa      	ldr	r2, [r7, #12]
 8018f92:	b292      	uxth	r2, r2
 8018f94:	43d2      	mvns	r2, r2
 8018f96:	b292      	uxth	r2, r2
 8018f98:	4013      	ands	r3, r2
 8018f9a:	b299      	uxth	r1, r3
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	2240      	movs	r2, #64	@ 0x40
 8018fa0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018fa2:	2300      	movs	r3, #0
}
 8018fa4:	0018      	movs	r0, r3
 8018fa6:	46bd      	mov	sp, r7
 8018fa8:	b004      	add	sp, #16
 8018faa:	bd80      	pop	{r7, pc}
 8018fac:	0000bf80 	.word	0x0000bf80

08018fb0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8018fb0:	b084      	sub	sp, #16
 8018fb2:	b590      	push	{r4, r7, lr}
 8018fb4:	b083      	sub	sp, #12
 8018fb6:	af00      	add	r7, sp, #0
 8018fb8:	6078      	str	r0, [r7, #4]
 8018fba:	2004      	movs	r0, #4
 8018fbc:	2410      	movs	r4, #16
 8018fbe:	1900      	adds	r0, r0, r4
 8018fc0:	2408      	movs	r4, #8
 8018fc2:	46a4      	mov	ip, r4
 8018fc4:	44bc      	add	ip, r7
 8018fc6:	4460      	add	r0, ip
 8018fc8:	6001      	str	r1, [r0, #0]
 8018fca:	6042      	str	r2, [r0, #4]
 8018fcc:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	2240      	movs	r2, #64	@ 0x40
 8018fd2:	2101      	movs	r1, #1
 8018fd4:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	2240      	movs	r2, #64	@ 0x40
 8018fda:	2100      	movs	r1, #0
 8018fdc:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	2244      	movs	r2, #68	@ 0x44
 8018fe2:	2100      	movs	r1, #0
 8018fe4:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	2250      	movs	r2, #80	@ 0x50
 8018fea:	2100      	movs	r1, #0
 8018fec:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8018fee:	2300      	movs	r3, #0
}
 8018ff0:	0018      	movs	r0, r3
 8018ff2:	46bd      	mov	sp, r7
 8018ff4:	b003      	add	sp, #12
 8018ff6:	bc90      	pop	{r4, r7}
 8018ff8:	bc08      	pop	{r3}
 8018ffa:	b004      	add	sp, #16
 8018ffc:	4718      	bx	r3
	...

08019000 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019000:	b580      	push	{r7, lr}
 8019002:	b09c      	sub	sp, #112	@ 0x70
 8019004:	af00      	add	r7, sp, #0
 8019006:	6078      	str	r0, [r7, #4]
 8019008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801900a:	236f      	movs	r3, #111	@ 0x6f
 801900c:	18fb      	adds	r3, r7, r3
 801900e:	2200      	movs	r2, #0
 8019010:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8019012:	687a      	ldr	r2, [r7, #4]
 8019014:	683b      	ldr	r3, [r7, #0]
 8019016:	781b      	ldrb	r3, [r3, #0]
 8019018:	009b      	lsls	r3, r3, #2
 801901a:	18d3      	adds	r3, r2, r3
 801901c:	881b      	ldrh	r3, [r3, #0]
 801901e:	b29a      	uxth	r2, r3
 8019020:	236c      	movs	r3, #108	@ 0x6c
 8019022:	18fb      	adds	r3, r7, r3
 8019024:	49a3      	ldr	r1, [pc, #652]	@ (80192b4 <USB_ActivateEndpoint+0x2b4>)
 8019026:	400a      	ands	r2, r1
 8019028:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801902a:	683b      	ldr	r3, [r7, #0]
 801902c:	78db      	ldrb	r3, [r3, #3]
 801902e:	2b03      	cmp	r3, #3
 8019030:	d017      	beq.n	8019062 <USB_ActivateEndpoint+0x62>
 8019032:	dc28      	bgt.n	8019086 <USB_ActivateEndpoint+0x86>
 8019034:	2b02      	cmp	r3, #2
 8019036:	d00e      	beq.n	8019056 <USB_ActivateEndpoint+0x56>
 8019038:	dc25      	bgt.n	8019086 <USB_ActivateEndpoint+0x86>
 801903a:	2b00      	cmp	r3, #0
 801903c:	d002      	beq.n	8019044 <USB_ActivateEndpoint+0x44>
 801903e:	2b01      	cmp	r3, #1
 8019040:	d018      	beq.n	8019074 <USB_ActivateEndpoint+0x74>
 8019042:	e020      	b.n	8019086 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8019044:	226c      	movs	r2, #108	@ 0x6c
 8019046:	18bb      	adds	r3, r7, r2
 8019048:	18ba      	adds	r2, r7, r2
 801904a:	8812      	ldrh	r2, [r2, #0]
 801904c:	2180      	movs	r1, #128	@ 0x80
 801904e:	0089      	lsls	r1, r1, #2
 8019050:	430a      	orrs	r2, r1
 8019052:	801a      	strh	r2, [r3, #0]
      break;
 8019054:	e01c      	b.n	8019090 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8019056:	226c      	movs	r2, #108	@ 0x6c
 8019058:	18bb      	adds	r3, r7, r2
 801905a:	18ba      	adds	r2, r7, r2
 801905c:	8812      	ldrh	r2, [r2, #0]
 801905e:	801a      	strh	r2, [r3, #0]
      break;
 8019060:	e016      	b.n	8019090 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8019062:	226c      	movs	r2, #108	@ 0x6c
 8019064:	18bb      	adds	r3, r7, r2
 8019066:	18ba      	adds	r2, r7, r2
 8019068:	8812      	ldrh	r2, [r2, #0]
 801906a:	21c0      	movs	r1, #192	@ 0xc0
 801906c:	00c9      	lsls	r1, r1, #3
 801906e:	430a      	orrs	r2, r1
 8019070:	801a      	strh	r2, [r3, #0]
      break;
 8019072:	e00d      	b.n	8019090 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8019074:	226c      	movs	r2, #108	@ 0x6c
 8019076:	18bb      	adds	r3, r7, r2
 8019078:	18ba      	adds	r2, r7, r2
 801907a:	8812      	ldrh	r2, [r2, #0]
 801907c:	2180      	movs	r1, #128	@ 0x80
 801907e:	00c9      	lsls	r1, r1, #3
 8019080:	430a      	orrs	r2, r1
 8019082:	801a      	strh	r2, [r3, #0]
      break;
 8019084:	e004      	b.n	8019090 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8019086:	236f      	movs	r3, #111	@ 0x6f
 8019088:	18fb      	adds	r3, r7, r3
 801908a:	2201      	movs	r2, #1
 801908c:	701a      	strb	r2, [r3, #0]
      break;
 801908e:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8019090:	687a      	ldr	r2, [r7, #4]
 8019092:	683b      	ldr	r3, [r7, #0]
 8019094:	781b      	ldrb	r3, [r3, #0]
 8019096:	009b      	lsls	r3, r3, #2
 8019098:	18d3      	adds	r3, r2, r3
 801909a:	226c      	movs	r2, #108	@ 0x6c
 801909c:	18ba      	adds	r2, r7, r2
 801909e:	8812      	ldrh	r2, [r2, #0]
 80190a0:	4985      	ldr	r1, [pc, #532]	@ (80192b8 <USB_ActivateEndpoint+0x2b8>)
 80190a2:	430a      	orrs	r2, r1
 80190a4:	b292      	uxth	r2, r2
 80190a6:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80190a8:	687a      	ldr	r2, [r7, #4]
 80190aa:	683b      	ldr	r3, [r7, #0]
 80190ac:	781b      	ldrb	r3, [r3, #0]
 80190ae:	009b      	lsls	r3, r3, #2
 80190b0:	18d3      	adds	r3, r2, r3
 80190b2:	881b      	ldrh	r3, [r3, #0]
 80190b4:	b29b      	uxth	r3, r3
 80190b6:	b21b      	sxth	r3, r3
 80190b8:	4a80      	ldr	r2, [pc, #512]	@ (80192bc <USB_ActivateEndpoint+0x2bc>)
 80190ba:	4013      	ands	r3, r2
 80190bc:	b21a      	sxth	r2, r3
 80190be:	683b      	ldr	r3, [r7, #0]
 80190c0:	781b      	ldrb	r3, [r3, #0]
 80190c2:	b21b      	sxth	r3, r3
 80190c4:	4313      	orrs	r3, r2
 80190c6:	b21a      	sxth	r2, r3
 80190c8:	2166      	movs	r1, #102	@ 0x66
 80190ca:	187b      	adds	r3, r7, r1
 80190cc:	801a      	strh	r2, [r3, #0]
 80190ce:	687a      	ldr	r2, [r7, #4]
 80190d0:	683b      	ldr	r3, [r7, #0]
 80190d2:	781b      	ldrb	r3, [r3, #0]
 80190d4:	009b      	lsls	r3, r3, #2
 80190d6:	18d3      	adds	r3, r2, r3
 80190d8:	187a      	adds	r2, r7, r1
 80190da:	8812      	ldrh	r2, [r2, #0]
 80190dc:	4976      	ldr	r1, [pc, #472]	@ (80192b8 <USB_ActivateEndpoint+0x2b8>)
 80190de:	430a      	orrs	r2, r1
 80190e0:	b292      	uxth	r2, r2
 80190e2:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80190e4:	683b      	ldr	r3, [r7, #0]
 80190e6:	7b1b      	ldrb	r3, [r3, #12]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d000      	beq.n	80190ee <USB_ActivateEndpoint+0xee>
 80190ec:	e178      	b.n	80193e0 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80190ee:	683b      	ldr	r3, [r7, #0]
 80190f0:	785b      	ldrb	r3, [r3, #1]
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	d100      	bne.n	80190f8 <USB_ActivateEndpoint+0xf8>
 80190f6:	e07a      	b.n	80191ee <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	61bb      	str	r3, [r7, #24]
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	2250      	movs	r2, #80	@ 0x50
 8019100:	5a9b      	ldrh	r3, [r3, r2]
 8019102:	b29b      	uxth	r3, r3
 8019104:	001a      	movs	r2, r3
 8019106:	69bb      	ldr	r3, [r7, #24]
 8019108:	189b      	adds	r3, r3, r2
 801910a:	61bb      	str	r3, [r7, #24]
 801910c:	683b      	ldr	r3, [r7, #0]
 801910e:	781b      	ldrb	r3, [r3, #0]
 8019110:	00da      	lsls	r2, r3, #3
 8019112:	69bb      	ldr	r3, [r7, #24]
 8019114:	18d3      	adds	r3, r2, r3
 8019116:	2280      	movs	r2, #128	@ 0x80
 8019118:	00d2      	lsls	r2, r2, #3
 801911a:	4694      	mov	ip, r2
 801911c:	4463      	add	r3, ip
 801911e:	617b      	str	r3, [r7, #20]
 8019120:	683b      	ldr	r3, [r7, #0]
 8019122:	88db      	ldrh	r3, [r3, #6]
 8019124:	085b      	lsrs	r3, r3, #1
 8019126:	b29b      	uxth	r3, r3
 8019128:	18db      	adds	r3, r3, r3
 801912a:	b29a      	uxth	r2, r3
 801912c:	697b      	ldr	r3, [r7, #20]
 801912e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019130:	687a      	ldr	r2, [r7, #4]
 8019132:	683b      	ldr	r3, [r7, #0]
 8019134:	781b      	ldrb	r3, [r3, #0]
 8019136:	009b      	lsls	r3, r3, #2
 8019138:	18d2      	adds	r2, r2, r3
 801913a:	2112      	movs	r1, #18
 801913c:	187b      	adds	r3, r7, r1
 801913e:	8812      	ldrh	r2, [r2, #0]
 8019140:	801a      	strh	r2, [r3, #0]
 8019142:	187b      	adds	r3, r7, r1
 8019144:	881b      	ldrh	r3, [r3, #0]
 8019146:	2240      	movs	r2, #64	@ 0x40
 8019148:	4013      	ands	r3, r2
 801914a:	d016      	beq.n	801917a <USB_ActivateEndpoint+0x17a>
 801914c:	687a      	ldr	r2, [r7, #4]
 801914e:	683b      	ldr	r3, [r7, #0]
 8019150:	781b      	ldrb	r3, [r3, #0]
 8019152:	009b      	lsls	r3, r3, #2
 8019154:	18d3      	adds	r3, r2, r3
 8019156:	881b      	ldrh	r3, [r3, #0]
 8019158:	b29a      	uxth	r2, r3
 801915a:	2010      	movs	r0, #16
 801915c:	183b      	adds	r3, r7, r0
 801915e:	4957      	ldr	r1, [pc, #348]	@ (80192bc <USB_ActivateEndpoint+0x2bc>)
 8019160:	400a      	ands	r2, r1
 8019162:	801a      	strh	r2, [r3, #0]
 8019164:	687a      	ldr	r2, [r7, #4]
 8019166:	683b      	ldr	r3, [r7, #0]
 8019168:	781b      	ldrb	r3, [r3, #0]
 801916a:	009b      	lsls	r3, r3, #2
 801916c:	18d3      	adds	r3, r2, r3
 801916e:	183a      	adds	r2, r7, r0
 8019170:	8812      	ldrh	r2, [r2, #0]
 8019172:	4953      	ldr	r1, [pc, #332]	@ (80192c0 <USB_ActivateEndpoint+0x2c0>)
 8019174:	430a      	orrs	r2, r1
 8019176:	b292      	uxth	r2, r2
 8019178:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801917a:	683b      	ldr	r3, [r7, #0]
 801917c:	78db      	ldrb	r3, [r3, #3]
 801917e:	2b01      	cmp	r3, #1
 8019180:	d01d      	beq.n	80191be <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8019182:	687a      	ldr	r2, [r7, #4]
 8019184:	683b      	ldr	r3, [r7, #0]
 8019186:	781b      	ldrb	r3, [r3, #0]
 8019188:	009b      	lsls	r3, r3, #2
 801918a:	18d3      	adds	r3, r2, r3
 801918c:	881b      	ldrh	r3, [r3, #0]
 801918e:	b29a      	uxth	r2, r3
 8019190:	200c      	movs	r0, #12
 8019192:	183b      	adds	r3, r7, r0
 8019194:	494b      	ldr	r1, [pc, #300]	@ (80192c4 <USB_ActivateEndpoint+0x2c4>)
 8019196:	400a      	ands	r2, r1
 8019198:	801a      	strh	r2, [r3, #0]
 801919a:	183b      	adds	r3, r7, r0
 801919c:	183a      	adds	r2, r7, r0
 801919e:	8812      	ldrh	r2, [r2, #0]
 80191a0:	2120      	movs	r1, #32
 80191a2:	404a      	eors	r2, r1
 80191a4:	801a      	strh	r2, [r3, #0]
 80191a6:	687a      	ldr	r2, [r7, #4]
 80191a8:	683b      	ldr	r3, [r7, #0]
 80191aa:	781b      	ldrb	r3, [r3, #0]
 80191ac:	009b      	lsls	r3, r3, #2
 80191ae:	18d3      	adds	r3, r2, r3
 80191b0:	183a      	adds	r2, r7, r0
 80191b2:	8812      	ldrh	r2, [r2, #0]
 80191b4:	4940      	ldr	r1, [pc, #256]	@ (80192b8 <USB_ActivateEndpoint+0x2b8>)
 80191b6:	430a      	orrs	r2, r1
 80191b8:	b292      	uxth	r2, r2
 80191ba:	801a      	strh	r2, [r3, #0]
 80191bc:	e2b4      	b.n	8019728 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80191be:	687a      	ldr	r2, [r7, #4]
 80191c0:	683b      	ldr	r3, [r7, #0]
 80191c2:	781b      	ldrb	r3, [r3, #0]
 80191c4:	009b      	lsls	r3, r3, #2
 80191c6:	18d3      	adds	r3, r2, r3
 80191c8:	881b      	ldrh	r3, [r3, #0]
 80191ca:	b29a      	uxth	r2, r3
 80191cc:	200e      	movs	r0, #14
 80191ce:	183b      	adds	r3, r7, r0
 80191d0:	493c      	ldr	r1, [pc, #240]	@ (80192c4 <USB_ActivateEndpoint+0x2c4>)
 80191d2:	400a      	ands	r2, r1
 80191d4:	801a      	strh	r2, [r3, #0]
 80191d6:	687a      	ldr	r2, [r7, #4]
 80191d8:	683b      	ldr	r3, [r7, #0]
 80191da:	781b      	ldrb	r3, [r3, #0]
 80191dc:	009b      	lsls	r3, r3, #2
 80191de:	18d3      	adds	r3, r2, r3
 80191e0:	183a      	adds	r2, r7, r0
 80191e2:	8812      	ldrh	r2, [r2, #0]
 80191e4:	4934      	ldr	r1, [pc, #208]	@ (80192b8 <USB_ActivateEndpoint+0x2b8>)
 80191e6:	430a      	orrs	r2, r1
 80191e8:	b292      	uxth	r2, r2
 80191ea:	801a      	strh	r2, [r3, #0]
 80191ec:	e29c      	b.n	8019728 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	2250      	movs	r2, #80	@ 0x50
 80191f6:	5a9b      	ldrh	r3, [r3, r2]
 80191f8:	b29b      	uxth	r3, r3
 80191fa:	001a      	movs	r2, r3
 80191fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191fe:	189b      	adds	r3, r3, r2
 8019200:	633b      	str	r3, [r7, #48]	@ 0x30
 8019202:	683b      	ldr	r3, [r7, #0]
 8019204:	781b      	ldrb	r3, [r3, #0]
 8019206:	00da      	lsls	r2, r3, #3
 8019208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801920a:	18d3      	adds	r3, r2, r3
 801920c:	4a2e      	ldr	r2, [pc, #184]	@ (80192c8 <USB_ActivateEndpoint+0x2c8>)
 801920e:	4694      	mov	ip, r2
 8019210:	4463      	add	r3, ip
 8019212:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019214:	683b      	ldr	r3, [r7, #0]
 8019216:	88db      	ldrh	r3, [r3, #6]
 8019218:	085b      	lsrs	r3, r3, #1
 801921a:	b29b      	uxth	r3, r3
 801921c:	18db      	adds	r3, r3, r3
 801921e:	b29a      	uxth	r2, r3
 8019220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019222:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	2250      	movs	r2, #80	@ 0x50
 801922c:	5a9b      	ldrh	r3, [r3, r2]
 801922e:	b29b      	uxth	r3, r3
 8019230:	001a      	movs	r2, r3
 8019232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019234:	189b      	adds	r3, r3, r2
 8019236:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019238:	683b      	ldr	r3, [r7, #0]
 801923a:	781b      	ldrb	r3, [r3, #0]
 801923c:	00da      	lsls	r2, r3, #3
 801923e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019240:	18d3      	adds	r3, r2, r3
 8019242:	4a22      	ldr	r2, [pc, #136]	@ (80192cc <USB_ActivateEndpoint+0x2cc>)
 8019244:	4694      	mov	ip, r2
 8019246:	4463      	add	r3, ip
 8019248:	627b      	str	r3, [r7, #36]	@ 0x24
 801924a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801924c:	881b      	ldrh	r3, [r3, #0]
 801924e:	b29b      	uxth	r3, r3
 8019250:	059b      	lsls	r3, r3, #22
 8019252:	0d9b      	lsrs	r3, r3, #22
 8019254:	b29a      	uxth	r2, r3
 8019256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019258:	801a      	strh	r2, [r3, #0]
 801925a:	683b      	ldr	r3, [r7, #0]
 801925c:	691b      	ldr	r3, [r3, #16]
 801925e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019260:	d91a      	bls.n	8019298 <USB_ActivateEndpoint+0x298>
 8019262:	683b      	ldr	r3, [r7, #0]
 8019264:	691b      	ldr	r3, [r3, #16]
 8019266:	095b      	lsrs	r3, r3, #5
 8019268:	66bb      	str	r3, [r7, #104]	@ 0x68
 801926a:	683b      	ldr	r3, [r7, #0]
 801926c:	691b      	ldr	r3, [r3, #16]
 801926e:	221f      	movs	r2, #31
 8019270:	4013      	ands	r3, r2
 8019272:	d102      	bne.n	801927a <USB_ActivateEndpoint+0x27a>
 8019274:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019276:	3b01      	subs	r3, #1
 8019278:	66bb      	str	r3, [r7, #104]	@ 0x68
 801927a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801927c:	881b      	ldrh	r3, [r3, #0]
 801927e:	b29a      	uxth	r2, r3
 8019280:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019282:	b29b      	uxth	r3, r3
 8019284:	029b      	lsls	r3, r3, #10
 8019286:	b29b      	uxth	r3, r3
 8019288:	4313      	orrs	r3, r2
 801928a:	b29b      	uxth	r3, r3
 801928c:	4a10      	ldr	r2, [pc, #64]	@ (80192d0 <USB_ActivateEndpoint+0x2d0>)
 801928e:	4313      	orrs	r3, r2
 8019290:	b29a      	uxth	r2, r3
 8019292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019294:	801a      	strh	r2, [r3, #0]
 8019296:	e034      	b.n	8019302 <USB_ActivateEndpoint+0x302>
 8019298:	683b      	ldr	r3, [r7, #0]
 801929a:	691b      	ldr	r3, [r3, #16]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d119      	bne.n	80192d4 <USB_ActivateEndpoint+0x2d4>
 80192a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192a2:	881b      	ldrh	r3, [r3, #0]
 80192a4:	b29b      	uxth	r3, r3
 80192a6:	4a0a      	ldr	r2, [pc, #40]	@ (80192d0 <USB_ActivateEndpoint+0x2d0>)
 80192a8:	4313      	orrs	r3, r2
 80192aa:	b29a      	uxth	r2, r3
 80192ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192ae:	801a      	strh	r2, [r3, #0]
 80192b0:	e027      	b.n	8019302 <USB_ActivateEndpoint+0x302>
 80192b2:	46c0      	nop			@ (mov r8, r8)
 80192b4:	ffff898f 	.word	0xffff898f
 80192b8:	ffff8080 	.word	0xffff8080
 80192bc:	ffff8f8f 	.word	0xffff8f8f
 80192c0:	ffff80c0 	.word	0xffff80c0
 80192c4:	ffff8fbf 	.word	0xffff8fbf
 80192c8:	00000404 	.word	0x00000404
 80192cc:	00000406 	.word	0x00000406
 80192d0:	ffff8000 	.word	0xffff8000
 80192d4:	683b      	ldr	r3, [r7, #0]
 80192d6:	691b      	ldr	r3, [r3, #16]
 80192d8:	085b      	lsrs	r3, r3, #1
 80192da:	66bb      	str	r3, [r7, #104]	@ 0x68
 80192dc:	683b      	ldr	r3, [r7, #0]
 80192de:	691b      	ldr	r3, [r3, #16]
 80192e0:	2201      	movs	r2, #1
 80192e2:	4013      	ands	r3, r2
 80192e4:	d002      	beq.n	80192ec <USB_ActivateEndpoint+0x2ec>
 80192e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80192e8:	3301      	adds	r3, #1
 80192ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80192ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192ee:	881b      	ldrh	r3, [r3, #0]
 80192f0:	b29a      	uxth	r2, r3
 80192f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80192f4:	b29b      	uxth	r3, r3
 80192f6:	029b      	lsls	r3, r3, #10
 80192f8:	b29b      	uxth	r3, r3
 80192fa:	4313      	orrs	r3, r2
 80192fc:	b29a      	uxth	r2, r3
 80192fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019300:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019302:	687a      	ldr	r2, [r7, #4]
 8019304:	683b      	ldr	r3, [r7, #0]
 8019306:	781b      	ldrb	r3, [r3, #0]
 8019308:	009b      	lsls	r3, r3, #2
 801930a:	18d2      	adds	r2, r2, r3
 801930c:	2122      	movs	r1, #34	@ 0x22
 801930e:	187b      	adds	r3, r7, r1
 8019310:	8812      	ldrh	r2, [r2, #0]
 8019312:	801a      	strh	r2, [r3, #0]
 8019314:	187b      	adds	r3, r7, r1
 8019316:	881a      	ldrh	r2, [r3, #0]
 8019318:	2380      	movs	r3, #128	@ 0x80
 801931a:	01db      	lsls	r3, r3, #7
 801931c:	4013      	ands	r3, r2
 801931e:	d016      	beq.n	801934e <USB_ActivateEndpoint+0x34e>
 8019320:	687a      	ldr	r2, [r7, #4]
 8019322:	683b      	ldr	r3, [r7, #0]
 8019324:	781b      	ldrb	r3, [r3, #0]
 8019326:	009b      	lsls	r3, r3, #2
 8019328:	18d3      	adds	r3, r2, r3
 801932a:	881b      	ldrh	r3, [r3, #0]
 801932c:	b29a      	uxth	r2, r3
 801932e:	2020      	movs	r0, #32
 8019330:	183b      	adds	r3, r7, r0
 8019332:	49dd      	ldr	r1, [pc, #884]	@ (80196a8 <USB_ActivateEndpoint+0x6a8>)
 8019334:	400a      	ands	r2, r1
 8019336:	801a      	strh	r2, [r3, #0]
 8019338:	687a      	ldr	r2, [r7, #4]
 801933a:	683b      	ldr	r3, [r7, #0]
 801933c:	781b      	ldrb	r3, [r3, #0]
 801933e:	009b      	lsls	r3, r3, #2
 8019340:	18d3      	adds	r3, r2, r3
 8019342:	183a      	adds	r2, r7, r0
 8019344:	8812      	ldrh	r2, [r2, #0]
 8019346:	49d9      	ldr	r1, [pc, #868]	@ (80196ac <USB_ActivateEndpoint+0x6ac>)
 8019348:	430a      	orrs	r2, r1
 801934a:	b292      	uxth	r2, r2
 801934c:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801934e:	683b      	ldr	r3, [r7, #0]
 8019350:	781b      	ldrb	r3, [r3, #0]
 8019352:	2b00      	cmp	r3, #0
 8019354:	d125      	bne.n	80193a2 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019356:	687a      	ldr	r2, [r7, #4]
 8019358:	683b      	ldr	r3, [r7, #0]
 801935a:	781b      	ldrb	r3, [r3, #0]
 801935c:	009b      	lsls	r3, r3, #2
 801935e:	18d3      	adds	r3, r2, r3
 8019360:	881b      	ldrh	r3, [r3, #0]
 8019362:	b29a      	uxth	r2, r3
 8019364:	201c      	movs	r0, #28
 8019366:	183b      	adds	r3, r7, r0
 8019368:	49d1      	ldr	r1, [pc, #836]	@ (80196b0 <USB_ActivateEndpoint+0x6b0>)
 801936a:	400a      	ands	r2, r1
 801936c:	801a      	strh	r2, [r3, #0]
 801936e:	183b      	adds	r3, r7, r0
 8019370:	183a      	adds	r2, r7, r0
 8019372:	8812      	ldrh	r2, [r2, #0]
 8019374:	2180      	movs	r1, #128	@ 0x80
 8019376:	0149      	lsls	r1, r1, #5
 8019378:	404a      	eors	r2, r1
 801937a:	801a      	strh	r2, [r3, #0]
 801937c:	183b      	adds	r3, r7, r0
 801937e:	183a      	adds	r2, r7, r0
 8019380:	8812      	ldrh	r2, [r2, #0]
 8019382:	2180      	movs	r1, #128	@ 0x80
 8019384:	0189      	lsls	r1, r1, #6
 8019386:	404a      	eors	r2, r1
 8019388:	801a      	strh	r2, [r3, #0]
 801938a:	687a      	ldr	r2, [r7, #4]
 801938c:	683b      	ldr	r3, [r7, #0]
 801938e:	781b      	ldrb	r3, [r3, #0]
 8019390:	009b      	lsls	r3, r3, #2
 8019392:	18d3      	adds	r3, r2, r3
 8019394:	183a      	adds	r2, r7, r0
 8019396:	8812      	ldrh	r2, [r2, #0]
 8019398:	49c6      	ldr	r1, [pc, #792]	@ (80196b4 <USB_ActivateEndpoint+0x6b4>)
 801939a:	430a      	orrs	r2, r1
 801939c:	b292      	uxth	r2, r2
 801939e:	801a      	strh	r2, [r3, #0]
 80193a0:	e1c2      	b.n	8019728 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80193a2:	687a      	ldr	r2, [r7, #4]
 80193a4:	683b      	ldr	r3, [r7, #0]
 80193a6:	781b      	ldrb	r3, [r3, #0]
 80193a8:	009b      	lsls	r3, r3, #2
 80193aa:	18d3      	adds	r3, r2, r3
 80193ac:	881b      	ldrh	r3, [r3, #0]
 80193ae:	b29a      	uxth	r2, r3
 80193b0:	201e      	movs	r0, #30
 80193b2:	183b      	adds	r3, r7, r0
 80193b4:	49be      	ldr	r1, [pc, #760]	@ (80196b0 <USB_ActivateEndpoint+0x6b0>)
 80193b6:	400a      	ands	r2, r1
 80193b8:	801a      	strh	r2, [r3, #0]
 80193ba:	183b      	adds	r3, r7, r0
 80193bc:	183a      	adds	r2, r7, r0
 80193be:	8812      	ldrh	r2, [r2, #0]
 80193c0:	2180      	movs	r1, #128	@ 0x80
 80193c2:	0189      	lsls	r1, r1, #6
 80193c4:	404a      	eors	r2, r1
 80193c6:	801a      	strh	r2, [r3, #0]
 80193c8:	687a      	ldr	r2, [r7, #4]
 80193ca:	683b      	ldr	r3, [r7, #0]
 80193cc:	781b      	ldrb	r3, [r3, #0]
 80193ce:	009b      	lsls	r3, r3, #2
 80193d0:	18d3      	adds	r3, r2, r3
 80193d2:	183a      	adds	r2, r7, r0
 80193d4:	8812      	ldrh	r2, [r2, #0]
 80193d6:	49b7      	ldr	r1, [pc, #732]	@ (80196b4 <USB_ActivateEndpoint+0x6b4>)
 80193d8:	430a      	orrs	r2, r1
 80193da:	b292      	uxth	r2, r2
 80193dc:	801a      	strh	r2, [r3, #0]
 80193de:	e1a3      	b.n	8019728 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80193e0:	683b      	ldr	r3, [r7, #0]
 80193e2:	78db      	ldrb	r3, [r3, #3]
 80193e4:	2b02      	cmp	r3, #2
 80193e6:	d117      	bne.n	8019418 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80193e8:	687a      	ldr	r2, [r7, #4]
 80193ea:	683b      	ldr	r3, [r7, #0]
 80193ec:	781b      	ldrb	r3, [r3, #0]
 80193ee:	009b      	lsls	r3, r3, #2
 80193f0:	18d3      	adds	r3, r2, r3
 80193f2:	881b      	ldrh	r3, [r3, #0]
 80193f4:	b29a      	uxth	r2, r3
 80193f6:	2062      	movs	r0, #98	@ 0x62
 80193f8:	183b      	adds	r3, r7, r0
 80193fa:	49ab      	ldr	r1, [pc, #684]	@ (80196a8 <USB_ActivateEndpoint+0x6a8>)
 80193fc:	400a      	ands	r2, r1
 80193fe:	801a      	strh	r2, [r3, #0]
 8019400:	687a      	ldr	r2, [r7, #4]
 8019402:	683b      	ldr	r3, [r7, #0]
 8019404:	781b      	ldrb	r3, [r3, #0]
 8019406:	009b      	lsls	r3, r3, #2
 8019408:	18d3      	adds	r3, r2, r3
 801940a:	183a      	adds	r2, r7, r0
 801940c:	8812      	ldrh	r2, [r2, #0]
 801940e:	49aa      	ldr	r1, [pc, #680]	@ (80196b8 <USB_ActivateEndpoint+0x6b8>)
 8019410:	430a      	orrs	r2, r1
 8019412:	b292      	uxth	r2, r2
 8019414:	801a      	strh	r2, [r3, #0]
 8019416:	e016      	b.n	8019446 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8019418:	687a      	ldr	r2, [r7, #4]
 801941a:	683b      	ldr	r3, [r7, #0]
 801941c:	781b      	ldrb	r3, [r3, #0]
 801941e:	009b      	lsls	r3, r3, #2
 8019420:	18d3      	adds	r3, r2, r3
 8019422:	881b      	ldrh	r3, [r3, #0]
 8019424:	b29a      	uxth	r2, r3
 8019426:	2064      	movs	r0, #100	@ 0x64
 8019428:	183b      	adds	r3, r7, r0
 801942a:	49a4      	ldr	r1, [pc, #656]	@ (80196bc <USB_ActivateEndpoint+0x6bc>)
 801942c:	400a      	ands	r2, r1
 801942e:	801a      	strh	r2, [r3, #0]
 8019430:	687a      	ldr	r2, [r7, #4]
 8019432:	683b      	ldr	r3, [r7, #0]
 8019434:	781b      	ldrb	r3, [r3, #0]
 8019436:	009b      	lsls	r3, r3, #2
 8019438:	18d3      	adds	r3, r2, r3
 801943a:	183a      	adds	r2, r7, r0
 801943c:	8812      	ldrh	r2, [r2, #0]
 801943e:	499d      	ldr	r1, [pc, #628]	@ (80196b4 <USB_ActivateEndpoint+0x6b4>)
 8019440:	430a      	orrs	r2, r1
 8019442:	b292      	uxth	r2, r2
 8019444:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	2250      	movs	r2, #80	@ 0x50
 801944e:	5a9b      	ldrh	r3, [r3, r2]
 8019450:	b29b      	uxth	r3, r3
 8019452:	001a      	movs	r2, r3
 8019454:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019456:	189b      	adds	r3, r3, r2
 8019458:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801945a:	683b      	ldr	r3, [r7, #0]
 801945c:	781b      	ldrb	r3, [r3, #0]
 801945e:	00da      	lsls	r2, r3, #3
 8019460:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019462:	18d3      	adds	r3, r2, r3
 8019464:	2280      	movs	r2, #128	@ 0x80
 8019466:	00d2      	lsls	r2, r2, #3
 8019468:	4694      	mov	ip, r2
 801946a:	4463      	add	r3, ip
 801946c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801946e:	683b      	ldr	r3, [r7, #0]
 8019470:	891b      	ldrh	r3, [r3, #8]
 8019472:	085b      	lsrs	r3, r3, #1
 8019474:	b29b      	uxth	r3, r3
 8019476:	18db      	adds	r3, r3, r3
 8019478:	b29a      	uxth	r2, r3
 801947a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801947c:	801a      	strh	r2, [r3, #0]
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	657b      	str	r3, [r7, #84]	@ 0x54
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	2250      	movs	r2, #80	@ 0x50
 8019486:	5a9b      	ldrh	r3, [r3, r2]
 8019488:	b29b      	uxth	r3, r3
 801948a:	001a      	movs	r2, r3
 801948c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801948e:	189b      	adds	r3, r3, r2
 8019490:	657b      	str	r3, [r7, #84]	@ 0x54
 8019492:	683b      	ldr	r3, [r7, #0]
 8019494:	781b      	ldrb	r3, [r3, #0]
 8019496:	00da      	lsls	r2, r3, #3
 8019498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801949a:	18d3      	adds	r3, r2, r3
 801949c:	4a88      	ldr	r2, [pc, #544]	@ (80196c0 <USB_ActivateEndpoint+0x6c0>)
 801949e:	4694      	mov	ip, r2
 80194a0:	4463      	add	r3, ip
 80194a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80194a4:	683b      	ldr	r3, [r7, #0]
 80194a6:	895b      	ldrh	r3, [r3, #10]
 80194a8:	085b      	lsrs	r3, r3, #1
 80194aa:	b29b      	uxth	r3, r3
 80194ac:	18db      	adds	r3, r3, r3
 80194ae:	b29a      	uxth	r2, r3
 80194b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80194b2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80194b4:	683b      	ldr	r3, [r7, #0]
 80194b6:	785b      	ldrb	r3, [r3, #1]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d000      	beq.n	80194be <USB_ActivateEndpoint+0x4be>
 80194bc:	e087      	b.n	80195ce <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80194be:	687a      	ldr	r2, [r7, #4]
 80194c0:	683b      	ldr	r3, [r7, #0]
 80194c2:	781b      	ldrb	r3, [r3, #0]
 80194c4:	009b      	lsls	r3, r3, #2
 80194c6:	18d2      	adds	r2, r2, r3
 80194c8:	2140      	movs	r1, #64	@ 0x40
 80194ca:	187b      	adds	r3, r7, r1
 80194cc:	8812      	ldrh	r2, [r2, #0]
 80194ce:	801a      	strh	r2, [r3, #0]
 80194d0:	187b      	adds	r3, r7, r1
 80194d2:	881a      	ldrh	r2, [r3, #0]
 80194d4:	2380      	movs	r3, #128	@ 0x80
 80194d6:	01db      	lsls	r3, r3, #7
 80194d8:	4013      	ands	r3, r2
 80194da:	d016      	beq.n	801950a <USB_ActivateEndpoint+0x50a>
 80194dc:	687a      	ldr	r2, [r7, #4]
 80194de:	683b      	ldr	r3, [r7, #0]
 80194e0:	781b      	ldrb	r3, [r3, #0]
 80194e2:	009b      	lsls	r3, r3, #2
 80194e4:	18d3      	adds	r3, r2, r3
 80194e6:	881b      	ldrh	r3, [r3, #0]
 80194e8:	b29a      	uxth	r2, r3
 80194ea:	203e      	movs	r0, #62	@ 0x3e
 80194ec:	183b      	adds	r3, r7, r0
 80194ee:	496e      	ldr	r1, [pc, #440]	@ (80196a8 <USB_ActivateEndpoint+0x6a8>)
 80194f0:	400a      	ands	r2, r1
 80194f2:	801a      	strh	r2, [r3, #0]
 80194f4:	687a      	ldr	r2, [r7, #4]
 80194f6:	683b      	ldr	r3, [r7, #0]
 80194f8:	781b      	ldrb	r3, [r3, #0]
 80194fa:	009b      	lsls	r3, r3, #2
 80194fc:	18d3      	adds	r3, r2, r3
 80194fe:	183a      	adds	r2, r7, r0
 8019500:	8812      	ldrh	r2, [r2, #0]
 8019502:	496a      	ldr	r1, [pc, #424]	@ (80196ac <USB_ActivateEndpoint+0x6ac>)
 8019504:	430a      	orrs	r2, r1
 8019506:	b292      	uxth	r2, r2
 8019508:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801950a:	687a      	ldr	r2, [r7, #4]
 801950c:	683b      	ldr	r3, [r7, #0]
 801950e:	781b      	ldrb	r3, [r3, #0]
 8019510:	009b      	lsls	r3, r3, #2
 8019512:	18d2      	adds	r2, r2, r3
 8019514:	213c      	movs	r1, #60	@ 0x3c
 8019516:	187b      	adds	r3, r7, r1
 8019518:	8812      	ldrh	r2, [r2, #0]
 801951a:	801a      	strh	r2, [r3, #0]
 801951c:	187b      	adds	r3, r7, r1
 801951e:	881b      	ldrh	r3, [r3, #0]
 8019520:	2240      	movs	r2, #64	@ 0x40
 8019522:	4013      	ands	r3, r2
 8019524:	d016      	beq.n	8019554 <USB_ActivateEndpoint+0x554>
 8019526:	687a      	ldr	r2, [r7, #4]
 8019528:	683b      	ldr	r3, [r7, #0]
 801952a:	781b      	ldrb	r3, [r3, #0]
 801952c:	009b      	lsls	r3, r3, #2
 801952e:	18d3      	adds	r3, r2, r3
 8019530:	881b      	ldrh	r3, [r3, #0]
 8019532:	b29a      	uxth	r2, r3
 8019534:	203a      	movs	r0, #58	@ 0x3a
 8019536:	183b      	adds	r3, r7, r0
 8019538:	495b      	ldr	r1, [pc, #364]	@ (80196a8 <USB_ActivateEndpoint+0x6a8>)
 801953a:	400a      	ands	r2, r1
 801953c:	801a      	strh	r2, [r3, #0]
 801953e:	687a      	ldr	r2, [r7, #4]
 8019540:	683b      	ldr	r3, [r7, #0]
 8019542:	781b      	ldrb	r3, [r3, #0]
 8019544:	009b      	lsls	r3, r3, #2
 8019546:	18d3      	adds	r3, r2, r3
 8019548:	183a      	adds	r2, r7, r0
 801954a:	8812      	ldrh	r2, [r2, #0]
 801954c:	495d      	ldr	r1, [pc, #372]	@ (80196c4 <USB_ActivateEndpoint+0x6c4>)
 801954e:	430a      	orrs	r2, r1
 8019550:	b292      	uxth	r2, r2
 8019552:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019554:	687a      	ldr	r2, [r7, #4]
 8019556:	683b      	ldr	r3, [r7, #0]
 8019558:	781b      	ldrb	r3, [r3, #0]
 801955a:	009b      	lsls	r3, r3, #2
 801955c:	18d3      	adds	r3, r2, r3
 801955e:	881b      	ldrh	r3, [r3, #0]
 8019560:	b29a      	uxth	r2, r3
 8019562:	2038      	movs	r0, #56	@ 0x38
 8019564:	183b      	adds	r3, r7, r0
 8019566:	4952      	ldr	r1, [pc, #328]	@ (80196b0 <USB_ActivateEndpoint+0x6b0>)
 8019568:	400a      	ands	r2, r1
 801956a:	801a      	strh	r2, [r3, #0]
 801956c:	183b      	adds	r3, r7, r0
 801956e:	183a      	adds	r2, r7, r0
 8019570:	8812      	ldrh	r2, [r2, #0]
 8019572:	2180      	movs	r1, #128	@ 0x80
 8019574:	0149      	lsls	r1, r1, #5
 8019576:	404a      	eors	r2, r1
 8019578:	801a      	strh	r2, [r3, #0]
 801957a:	183b      	adds	r3, r7, r0
 801957c:	183a      	adds	r2, r7, r0
 801957e:	8812      	ldrh	r2, [r2, #0]
 8019580:	2180      	movs	r1, #128	@ 0x80
 8019582:	0189      	lsls	r1, r1, #6
 8019584:	404a      	eors	r2, r1
 8019586:	801a      	strh	r2, [r3, #0]
 8019588:	687a      	ldr	r2, [r7, #4]
 801958a:	683b      	ldr	r3, [r7, #0]
 801958c:	781b      	ldrb	r3, [r3, #0]
 801958e:	009b      	lsls	r3, r3, #2
 8019590:	18d3      	adds	r3, r2, r3
 8019592:	183a      	adds	r2, r7, r0
 8019594:	8812      	ldrh	r2, [r2, #0]
 8019596:	4947      	ldr	r1, [pc, #284]	@ (80196b4 <USB_ActivateEndpoint+0x6b4>)
 8019598:	430a      	orrs	r2, r1
 801959a:	b292      	uxth	r2, r2
 801959c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801959e:	687a      	ldr	r2, [r7, #4]
 80195a0:	683b      	ldr	r3, [r7, #0]
 80195a2:	781b      	ldrb	r3, [r3, #0]
 80195a4:	009b      	lsls	r3, r3, #2
 80195a6:	18d3      	adds	r3, r2, r3
 80195a8:	881b      	ldrh	r3, [r3, #0]
 80195aa:	b29a      	uxth	r2, r3
 80195ac:	2036      	movs	r0, #54	@ 0x36
 80195ae:	183b      	adds	r3, r7, r0
 80195b0:	4945      	ldr	r1, [pc, #276]	@ (80196c8 <USB_ActivateEndpoint+0x6c8>)
 80195b2:	400a      	ands	r2, r1
 80195b4:	801a      	strh	r2, [r3, #0]
 80195b6:	687a      	ldr	r2, [r7, #4]
 80195b8:	683b      	ldr	r3, [r7, #0]
 80195ba:	781b      	ldrb	r3, [r3, #0]
 80195bc:	009b      	lsls	r3, r3, #2
 80195be:	18d3      	adds	r3, r2, r3
 80195c0:	183a      	adds	r2, r7, r0
 80195c2:	8812      	ldrh	r2, [r2, #0]
 80195c4:	493b      	ldr	r1, [pc, #236]	@ (80196b4 <USB_ActivateEndpoint+0x6b4>)
 80195c6:	430a      	orrs	r2, r1
 80195c8:	b292      	uxth	r2, r2
 80195ca:	801a      	strh	r2, [r3, #0]
 80195cc:	e0ac      	b.n	8019728 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80195ce:	687a      	ldr	r2, [r7, #4]
 80195d0:	683b      	ldr	r3, [r7, #0]
 80195d2:	781b      	ldrb	r3, [r3, #0]
 80195d4:	009b      	lsls	r3, r3, #2
 80195d6:	18d2      	adds	r2, r2, r3
 80195d8:	214e      	movs	r1, #78	@ 0x4e
 80195da:	187b      	adds	r3, r7, r1
 80195dc:	8812      	ldrh	r2, [r2, #0]
 80195de:	801a      	strh	r2, [r3, #0]
 80195e0:	187b      	adds	r3, r7, r1
 80195e2:	881a      	ldrh	r2, [r3, #0]
 80195e4:	2380      	movs	r3, #128	@ 0x80
 80195e6:	01db      	lsls	r3, r3, #7
 80195e8:	4013      	ands	r3, r2
 80195ea:	d016      	beq.n	801961a <USB_ActivateEndpoint+0x61a>
 80195ec:	687a      	ldr	r2, [r7, #4]
 80195ee:	683b      	ldr	r3, [r7, #0]
 80195f0:	781b      	ldrb	r3, [r3, #0]
 80195f2:	009b      	lsls	r3, r3, #2
 80195f4:	18d3      	adds	r3, r2, r3
 80195f6:	881b      	ldrh	r3, [r3, #0]
 80195f8:	b29a      	uxth	r2, r3
 80195fa:	204c      	movs	r0, #76	@ 0x4c
 80195fc:	183b      	adds	r3, r7, r0
 80195fe:	492a      	ldr	r1, [pc, #168]	@ (80196a8 <USB_ActivateEndpoint+0x6a8>)
 8019600:	400a      	ands	r2, r1
 8019602:	801a      	strh	r2, [r3, #0]
 8019604:	687a      	ldr	r2, [r7, #4]
 8019606:	683b      	ldr	r3, [r7, #0]
 8019608:	781b      	ldrb	r3, [r3, #0]
 801960a:	009b      	lsls	r3, r3, #2
 801960c:	18d3      	adds	r3, r2, r3
 801960e:	183a      	adds	r2, r7, r0
 8019610:	8812      	ldrh	r2, [r2, #0]
 8019612:	4926      	ldr	r1, [pc, #152]	@ (80196ac <USB_ActivateEndpoint+0x6ac>)
 8019614:	430a      	orrs	r2, r1
 8019616:	b292      	uxth	r2, r2
 8019618:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801961a:	687a      	ldr	r2, [r7, #4]
 801961c:	683b      	ldr	r3, [r7, #0]
 801961e:	781b      	ldrb	r3, [r3, #0]
 8019620:	009b      	lsls	r3, r3, #2
 8019622:	18d2      	adds	r2, r2, r3
 8019624:	214a      	movs	r1, #74	@ 0x4a
 8019626:	187b      	adds	r3, r7, r1
 8019628:	8812      	ldrh	r2, [r2, #0]
 801962a:	801a      	strh	r2, [r3, #0]
 801962c:	187b      	adds	r3, r7, r1
 801962e:	881b      	ldrh	r3, [r3, #0]
 8019630:	2240      	movs	r2, #64	@ 0x40
 8019632:	4013      	ands	r3, r2
 8019634:	d016      	beq.n	8019664 <USB_ActivateEndpoint+0x664>
 8019636:	687a      	ldr	r2, [r7, #4]
 8019638:	683b      	ldr	r3, [r7, #0]
 801963a:	781b      	ldrb	r3, [r3, #0]
 801963c:	009b      	lsls	r3, r3, #2
 801963e:	18d3      	adds	r3, r2, r3
 8019640:	881b      	ldrh	r3, [r3, #0]
 8019642:	b29a      	uxth	r2, r3
 8019644:	2048      	movs	r0, #72	@ 0x48
 8019646:	183b      	adds	r3, r7, r0
 8019648:	4917      	ldr	r1, [pc, #92]	@ (80196a8 <USB_ActivateEndpoint+0x6a8>)
 801964a:	400a      	ands	r2, r1
 801964c:	801a      	strh	r2, [r3, #0]
 801964e:	687a      	ldr	r2, [r7, #4]
 8019650:	683b      	ldr	r3, [r7, #0]
 8019652:	781b      	ldrb	r3, [r3, #0]
 8019654:	009b      	lsls	r3, r3, #2
 8019656:	18d3      	adds	r3, r2, r3
 8019658:	183a      	adds	r2, r7, r0
 801965a:	8812      	ldrh	r2, [r2, #0]
 801965c:	4919      	ldr	r1, [pc, #100]	@ (80196c4 <USB_ActivateEndpoint+0x6c4>)
 801965e:	430a      	orrs	r2, r1
 8019660:	b292      	uxth	r2, r2
 8019662:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019664:	683b      	ldr	r3, [r7, #0]
 8019666:	78db      	ldrb	r3, [r3, #3]
 8019668:	2b01      	cmp	r3, #1
 801966a:	d02f      	beq.n	80196cc <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801966c:	687a      	ldr	r2, [r7, #4]
 801966e:	683b      	ldr	r3, [r7, #0]
 8019670:	781b      	ldrb	r3, [r3, #0]
 8019672:	009b      	lsls	r3, r3, #2
 8019674:	18d3      	adds	r3, r2, r3
 8019676:	881b      	ldrh	r3, [r3, #0]
 8019678:	b29a      	uxth	r2, r3
 801967a:	2044      	movs	r0, #68	@ 0x44
 801967c:	183b      	adds	r3, r7, r0
 801967e:	4912      	ldr	r1, [pc, #72]	@ (80196c8 <USB_ActivateEndpoint+0x6c8>)
 8019680:	400a      	ands	r2, r1
 8019682:	801a      	strh	r2, [r3, #0]
 8019684:	183b      	adds	r3, r7, r0
 8019686:	183a      	adds	r2, r7, r0
 8019688:	8812      	ldrh	r2, [r2, #0]
 801968a:	2120      	movs	r1, #32
 801968c:	404a      	eors	r2, r1
 801968e:	801a      	strh	r2, [r3, #0]
 8019690:	687a      	ldr	r2, [r7, #4]
 8019692:	683b      	ldr	r3, [r7, #0]
 8019694:	781b      	ldrb	r3, [r3, #0]
 8019696:	009b      	lsls	r3, r3, #2
 8019698:	18d3      	adds	r3, r2, r3
 801969a:	183a      	adds	r2, r7, r0
 801969c:	8812      	ldrh	r2, [r2, #0]
 801969e:	4905      	ldr	r1, [pc, #20]	@ (80196b4 <USB_ActivateEndpoint+0x6b4>)
 80196a0:	430a      	orrs	r2, r1
 80196a2:	b292      	uxth	r2, r2
 80196a4:	801a      	strh	r2, [r3, #0]
 80196a6:	e028      	b.n	80196fa <USB_ActivateEndpoint+0x6fa>
 80196a8:	ffff8f8f 	.word	0xffff8f8f
 80196ac:	ffffc080 	.word	0xffffc080
 80196b0:	ffffbf8f 	.word	0xffffbf8f
 80196b4:	ffff8080 	.word	0xffff8080
 80196b8:	ffff8180 	.word	0xffff8180
 80196bc:	ffff8e8f 	.word	0xffff8e8f
 80196c0:	00000404 	.word	0x00000404
 80196c4:	ffff80c0 	.word	0xffff80c0
 80196c8:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80196cc:	687a      	ldr	r2, [r7, #4]
 80196ce:	683b      	ldr	r3, [r7, #0]
 80196d0:	781b      	ldrb	r3, [r3, #0]
 80196d2:	009b      	lsls	r3, r3, #2
 80196d4:	18d3      	adds	r3, r2, r3
 80196d6:	881b      	ldrh	r3, [r3, #0]
 80196d8:	b29a      	uxth	r2, r3
 80196da:	2046      	movs	r0, #70	@ 0x46
 80196dc:	183b      	adds	r3, r7, r0
 80196de:	4916      	ldr	r1, [pc, #88]	@ (8019738 <USB_ActivateEndpoint+0x738>)
 80196e0:	400a      	ands	r2, r1
 80196e2:	801a      	strh	r2, [r3, #0]
 80196e4:	687a      	ldr	r2, [r7, #4]
 80196e6:	683b      	ldr	r3, [r7, #0]
 80196e8:	781b      	ldrb	r3, [r3, #0]
 80196ea:	009b      	lsls	r3, r3, #2
 80196ec:	18d3      	adds	r3, r2, r3
 80196ee:	183a      	adds	r2, r7, r0
 80196f0:	8812      	ldrh	r2, [r2, #0]
 80196f2:	4912      	ldr	r1, [pc, #72]	@ (801973c <USB_ActivateEndpoint+0x73c>)
 80196f4:	430a      	orrs	r2, r1
 80196f6:	b292      	uxth	r2, r2
 80196f8:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80196fa:	687a      	ldr	r2, [r7, #4]
 80196fc:	683b      	ldr	r3, [r7, #0]
 80196fe:	781b      	ldrb	r3, [r3, #0]
 8019700:	009b      	lsls	r3, r3, #2
 8019702:	18d3      	adds	r3, r2, r3
 8019704:	881b      	ldrh	r3, [r3, #0]
 8019706:	b29a      	uxth	r2, r3
 8019708:	2042      	movs	r0, #66	@ 0x42
 801970a:	183b      	adds	r3, r7, r0
 801970c:	490c      	ldr	r1, [pc, #48]	@ (8019740 <USB_ActivateEndpoint+0x740>)
 801970e:	400a      	ands	r2, r1
 8019710:	801a      	strh	r2, [r3, #0]
 8019712:	687a      	ldr	r2, [r7, #4]
 8019714:	683b      	ldr	r3, [r7, #0]
 8019716:	781b      	ldrb	r3, [r3, #0]
 8019718:	009b      	lsls	r3, r3, #2
 801971a:	18d3      	adds	r3, r2, r3
 801971c:	183a      	adds	r2, r7, r0
 801971e:	8812      	ldrh	r2, [r2, #0]
 8019720:	4906      	ldr	r1, [pc, #24]	@ (801973c <USB_ActivateEndpoint+0x73c>)
 8019722:	430a      	orrs	r2, r1
 8019724:	b292      	uxth	r2, r2
 8019726:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8019728:	236f      	movs	r3, #111	@ 0x6f
 801972a:	18fb      	adds	r3, r7, r3
 801972c:	781b      	ldrb	r3, [r3, #0]
}
 801972e:	0018      	movs	r0, r3
 8019730:	46bd      	mov	sp, r7
 8019732:	b01c      	add	sp, #112	@ 0x70
 8019734:	bd80      	pop	{r7, pc}
 8019736:	46c0      	nop			@ (mov r8, r8)
 8019738:	ffff8fbf 	.word	0xffff8fbf
 801973c:	ffff8080 	.word	0xffff8080
 8019740:	ffffbf8f 	.word	0xffffbf8f

08019744 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019744:	b580      	push	{r7, lr}
 8019746:	b08c      	sub	sp, #48	@ 0x30
 8019748:	af00      	add	r7, sp, #0
 801974a:	6078      	str	r0, [r7, #4]
 801974c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801974e:	683b      	ldr	r3, [r7, #0]
 8019750:	7b1b      	ldrb	r3, [r3, #12]
 8019752:	2b00      	cmp	r3, #0
 8019754:	d000      	beq.n	8019758 <USB_DeactivateEndpoint+0x14>
 8019756:	e07e      	b.n	8019856 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8019758:	683b      	ldr	r3, [r7, #0]
 801975a:	785b      	ldrb	r3, [r3, #1]
 801975c:	2b00      	cmp	r3, #0
 801975e:	d03c      	beq.n	80197da <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019760:	687a      	ldr	r2, [r7, #4]
 8019762:	683b      	ldr	r3, [r7, #0]
 8019764:	781b      	ldrb	r3, [r3, #0]
 8019766:	009b      	lsls	r3, r3, #2
 8019768:	18d2      	adds	r2, r2, r3
 801976a:	210c      	movs	r1, #12
 801976c:	187b      	adds	r3, r7, r1
 801976e:	8812      	ldrh	r2, [r2, #0]
 8019770:	801a      	strh	r2, [r3, #0]
 8019772:	187b      	adds	r3, r7, r1
 8019774:	881b      	ldrh	r3, [r3, #0]
 8019776:	2240      	movs	r2, #64	@ 0x40
 8019778:	4013      	ands	r3, r2
 801977a:	d016      	beq.n	80197aa <USB_DeactivateEndpoint+0x66>
 801977c:	687a      	ldr	r2, [r7, #4]
 801977e:	683b      	ldr	r3, [r7, #0]
 8019780:	781b      	ldrb	r3, [r3, #0]
 8019782:	009b      	lsls	r3, r3, #2
 8019784:	18d3      	adds	r3, r2, r3
 8019786:	881b      	ldrh	r3, [r3, #0]
 8019788:	b29a      	uxth	r2, r3
 801978a:	200a      	movs	r0, #10
 801978c:	183b      	adds	r3, r7, r0
 801978e:	49c7      	ldr	r1, [pc, #796]	@ (8019aac <USB_DeactivateEndpoint+0x368>)
 8019790:	400a      	ands	r2, r1
 8019792:	801a      	strh	r2, [r3, #0]
 8019794:	687a      	ldr	r2, [r7, #4]
 8019796:	683b      	ldr	r3, [r7, #0]
 8019798:	781b      	ldrb	r3, [r3, #0]
 801979a:	009b      	lsls	r3, r3, #2
 801979c:	18d3      	adds	r3, r2, r3
 801979e:	183a      	adds	r2, r7, r0
 80197a0:	8812      	ldrh	r2, [r2, #0]
 80197a2:	49c3      	ldr	r1, [pc, #780]	@ (8019ab0 <USB_DeactivateEndpoint+0x36c>)
 80197a4:	430a      	orrs	r2, r1
 80197a6:	b292      	uxth	r2, r2
 80197a8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80197aa:	687a      	ldr	r2, [r7, #4]
 80197ac:	683b      	ldr	r3, [r7, #0]
 80197ae:	781b      	ldrb	r3, [r3, #0]
 80197b0:	009b      	lsls	r3, r3, #2
 80197b2:	18d3      	adds	r3, r2, r3
 80197b4:	881b      	ldrh	r3, [r3, #0]
 80197b6:	b29a      	uxth	r2, r3
 80197b8:	2008      	movs	r0, #8
 80197ba:	183b      	adds	r3, r7, r0
 80197bc:	49bd      	ldr	r1, [pc, #756]	@ (8019ab4 <USB_DeactivateEndpoint+0x370>)
 80197be:	400a      	ands	r2, r1
 80197c0:	801a      	strh	r2, [r3, #0]
 80197c2:	687a      	ldr	r2, [r7, #4]
 80197c4:	683b      	ldr	r3, [r7, #0]
 80197c6:	781b      	ldrb	r3, [r3, #0]
 80197c8:	009b      	lsls	r3, r3, #2
 80197ca:	18d3      	adds	r3, r2, r3
 80197cc:	183a      	adds	r2, r7, r0
 80197ce:	8812      	ldrh	r2, [r2, #0]
 80197d0:	49b9      	ldr	r1, [pc, #740]	@ (8019ab8 <USB_DeactivateEndpoint+0x374>)
 80197d2:	430a      	orrs	r2, r1
 80197d4:	b292      	uxth	r2, r2
 80197d6:	801a      	strh	r2, [r3, #0]
 80197d8:	e163      	b.n	8019aa2 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80197da:	687a      	ldr	r2, [r7, #4]
 80197dc:	683b      	ldr	r3, [r7, #0]
 80197de:	781b      	ldrb	r3, [r3, #0]
 80197e0:	009b      	lsls	r3, r3, #2
 80197e2:	18d2      	adds	r2, r2, r3
 80197e4:	2112      	movs	r1, #18
 80197e6:	187b      	adds	r3, r7, r1
 80197e8:	8812      	ldrh	r2, [r2, #0]
 80197ea:	801a      	strh	r2, [r3, #0]
 80197ec:	187b      	adds	r3, r7, r1
 80197ee:	881a      	ldrh	r2, [r3, #0]
 80197f0:	2380      	movs	r3, #128	@ 0x80
 80197f2:	01db      	lsls	r3, r3, #7
 80197f4:	4013      	ands	r3, r2
 80197f6:	d016      	beq.n	8019826 <USB_DeactivateEndpoint+0xe2>
 80197f8:	687a      	ldr	r2, [r7, #4]
 80197fa:	683b      	ldr	r3, [r7, #0]
 80197fc:	781b      	ldrb	r3, [r3, #0]
 80197fe:	009b      	lsls	r3, r3, #2
 8019800:	18d3      	adds	r3, r2, r3
 8019802:	881b      	ldrh	r3, [r3, #0]
 8019804:	b29a      	uxth	r2, r3
 8019806:	2010      	movs	r0, #16
 8019808:	183b      	adds	r3, r7, r0
 801980a:	49a8      	ldr	r1, [pc, #672]	@ (8019aac <USB_DeactivateEndpoint+0x368>)
 801980c:	400a      	ands	r2, r1
 801980e:	801a      	strh	r2, [r3, #0]
 8019810:	687a      	ldr	r2, [r7, #4]
 8019812:	683b      	ldr	r3, [r7, #0]
 8019814:	781b      	ldrb	r3, [r3, #0]
 8019816:	009b      	lsls	r3, r3, #2
 8019818:	18d3      	adds	r3, r2, r3
 801981a:	183a      	adds	r2, r7, r0
 801981c:	8812      	ldrh	r2, [r2, #0]
 801981e:	49a7      	ldr	r1, [pc, #668]	@ (8019abc <USB_DeactivateEndpoint+0x378>)
 8019820:	430a      	orrs	r2, r1
 8019822:	b292      	uxth	r2, r2
 8019824:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019826:	687a      	ldr	r2, [r7, #4]
 8019828:	683b      	ldr	r3, [r7, #0]
 801982a:	781b      	ldrb	r3, [r3, #0]
 801982c:	009b      	lsls	r3, r3, #2
 801982e:	18d3      	adds	r3, r2, r3
 8019830:	881b      	ldrh	r3, [r3, #0]
 8019832:	b29a      	uxth	r2, r3
 8019834:	200e      	movs	r0, #14
 8019836:	183b      	adds	r3, r7, r0
 8019838:	49a1      	ldr	r1, [pc, #644]	@ (8019ac0 <USB_DeactivateEndpoint+0x37c>)
 801983a:	400a      	ands	r2, r1
 801983c:	801a      	strh	r2, [r3, #0]
 801983e:	687a      	ldr	r2, [r7, #4]
 8019840:	683b      	ldr	r3, [r7, #0]
 8019842:	781b      	ldrb	r3, [r3, #0]
 8019844:	009b      	lsls	r3, r3, #2
 8019846:	18d3      	adds	r3, r2, r3
 8019848:	183a      	adds	r2, r7, r0
 801984a:	8812      	ldrh	r2, [r2, #0]
 801984c:	499a      	ldr	r1, [pc, #616]	@ (8019ab8 <USB_DeactivateEndpoint+0x374>)
 801984e:	430a      	orrs	r2, r1
 8019850:	b292      	uxth	r2, r2
 8019852:	801a      	strh	r2, [r3, #0]
 8019854:	e125      	b.n	8019aa2 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8019856:	683b      	ldr	r3, [r7, #0]
 8019858:	785b      	ldrb	r3, [r3, #1]
 801985a:	2b00      	cmp	r3, #0
 801985c:	d000      	beq.n	8019860 <USB_DeactivateEndpoint+0x11c>
 801985e:	e090      	b.n	8019982 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019860:	687a      	ldr	r2, [r7, #4]
 8019862:	683b      	ldr	r3, [r7, #0]
 8019864:	781b      	ldrb	r3, [r3, #0]
 8019866:	009b      	lsls	r3, r3, #2
 8019868:	18d2      	adds	r2, r2, r3
 801986a:	2120      	movs	r1, #32
 801986c:	187b      	adds	r3, r7, r1
 801986e:	8812      	ldrh	r2, [r2, #0]
 8019870:	801a      	strh	r2, [r3, #0]
 8019872:	187b      	adds	r3, r7, r1
 8019874:	881a      	ldrh	r2, [r3, #0]
 8019876:	2380      	movs	r3, #128	@ 0x80
 8019878:	01db      	lsls	r3, r3, #7
 801987a:	4013      	ands	r3, r2
 801987c:	d016      	beq.n	80198ac <USB_DeactivateEndpoint+0x168>
 801987e:	687a      	ldr	r2, [r7, #4]
 8019880:	683b      	ldr	r3, [r7, #0]
 8019882:	781b      	ldrb	r3, [r3, #0]
 8019884:	009b      	lsls	r3, r3, #2
 8019886:	18d3      	adds	r3, r2, r3
 8019888:	881b      	ldrh	r3, [r3, #0]
 801988a:	b29a      	uxth	r2, r3
 801988c:	201e      	movs	r0, #30
 801988e:	183b      	adds	r3, r7, r0
 8019890:	4986      	ldr	r1, [pc, #536]	@ (8019aac <USB_DeactivateEndpoint+0x368>)
 8019892:	400a      	ands	r2, r1
 8019894:	801a      	strh	r2, [r3, #0]
 8019896:	687a      	ldr	r2, [r7, #4]
 8019898:	683b      	ldr	r3, [r7, #0]
 801989a:	781b      	ldrb	r3, [r3, #0]
 801989c:	009b      	lsls	r3, r3, #2
 801989e:	18d3      	adds	r3, r2, r3
 80198a0:	183a      	adds	r2, r7, r0
 80198a2:	8812      	ldrh	r2, [r2, #0]
 80198a4:	4985      	ldr	r1, [pc, #532]	@ (8019abc <USB_DeactivateEndpoint+0x378>)
 80198a6:	430a      	orrs	r2, r1
 80198a8:	b292      	uxth	r2, r2
 80198aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80198ac:	687a      	ldr	r2, [r7, #4]
 80198ae:	683b      	ldr	r3, [r7, #0]
 80198b0:	781b      	ldrb	r3, [r3, #0]
 80198b2:	009b      	lsls	r3, r3, #2
 80198b4:	18d2      	adds	r2, r2, r3
 80198b6:	211c      	movs	r1, #28
 80198b8:	187b      	adds	r3, r7, r1
 80198ba:	8812      	ldrh	r2, [r2, #0]
 80198bc:	801a      	strh	r2, [r3, #0]
 80198be:	187b      	adds	r3, r7, r1
 80198c0:	881b      	ldrh	r3, [r3, #0]
 80198c2:	2240      	movs	r2, #64	@ 0x40
 80198c4:	4013      	ands	r3, r2
 80198c6:	d016      	beq.n	80198f6 <USB_DeactivateEndpoint+0x1b2>
 80198c8:	687a      	ldr	r2, [r7, #4]
 80198ca:	683b      	ldr	r3, [r7, #0]
 80198cc:	781b      	ldrb	r3, [r3, #0]
 80198ce:	009b      	lsls	r3, r3, #2
 80198d0:	18d3      	adds	r3, r2, r3
 80198d2:	881b      	ldrh	r3, [r3, #0]
 80198d4:	b29a      	uxth	r2, r3
 80198d6:	201a      	movs	r0, #26
 80198d8:	183b      	adds	r3, r7, r0
 80198da:	4974      	ldr	r1, [pc, #464]	@ (8019aac <USB_DeactivateEndpoint+0x368>)
 80198dc:	400a      	ands	r2, r1
 80198de:	801a      	strh	r2, [r3, #0]
 80198e0:	687a      	ldr	r2, [r7, #4]
 80198e2:	683b      	ldr	r3, [r7, #0]
 80198e4:	781b      	ldrb	r3, [r3, #0]
 80198e6:	009b      	lsls	r3, r3, #2
 80198e8:	18d3      	adds	r3, r2, r3
 80198ea:	183a      	adds	r2, r7, r0
 80198ec:	8812      	ldrh	r2, [r2, #0]
 80198ee:	4970      	ldr	r1, [pc, #448]	@ (8019ab0 <USB_DeactivateEndpoint+0x36c>)
 80198f0:	430a      	orrs	r2, r1
 80198f2:	b292      	uxth	r2, r2
 80198f4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80198f6:	687a      	ldr	r2, [r7, #4]
 80198f8:	683b      	ldr	r3, [r7, #0]
 80198fa:	781b      	ldrb	r3, [r3, #0]
 80198fc:	009b      	lsls	r3, r3, #2
 80198fe:	18d3      	adds	r3, r2, r3
 8019900:	881b      	ldrh	r3, [r3, #0]
 8019902:	b29a      	uxth	r2, r3
 8019904:	2018      	movs	r0, #24
 8019906:	183b      	adds	r3, r7, r0
 8019908:	4968      	ldr	r1, [pc, #416]	@ (8019aac <USB_DeactivateEndpoint+0x368>)
 801990a:	400a      	ands	r2, r1
 801990c:	801a      	strh	r2, [r3, #0]
 801990e:	687a      	ldr	r2, [r7, #4]
 8019910:	683b      	ldr	r3, [r7, #0]
 8019912:	781b      	ldrb	r3, [r3, #0]
 8019914:	009b      	lsls	r3, r3, #2
 8019916:	18d3      	adds	r3, r2, r3
 8019918:	183a      	adds	r2, r7, r0
 801991a:	8812      	ldrh	r2, [r2, #0]
 801991c:	4964      	ldr	r1, [pc, #400]	@ (8019ab0 <USB_DeactivateEndpoint+0x36c>)
 801991e:	430a      	orrs	r2, r1
 8019920:	b292      	uxth	r2, r2
 8019922:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019924:	687a      	ldr	r2, [r7, #4]
 8019926:	683b      	ldr	r3, [r7, #0]
 8019928:	781b      	ldrb	r3, [r3, #0]
 801992a:	009b      	lsls	r3, r3, #2
 801992c:	18d3      	adds	r3, r2, r3
 801992e:	881b      	ldrh	r3, [r3, #0]
 8019930:	b29a      	uxth	r2, r3
 8019932:	2016      	movs	r0, #22
 8019934:	183b      	adds	r3, r7, r0
 8019936:	4962      	ldr	r1, [pc, #392]	@ (8019ac0 <USB_DeactivateEndpoint+0x37c>)
 8019938:	400a      	ands	r2, r1
 801993a:	801a      	strh	r2, [r3, #0]
 801993c:	687a      	ldr	r2, [r7, #4]
 801993e:	683b      	ldr	r3, [r7, #0]
 8019940:	781b      	ldrb	r3, [r3, #0]
 8019942:	009b      	lsls	r3, r3, #2
 8019944:	18d3      	adds	r3, r2, r3
 8019946:	183a      	adds	r2, r7, r0
 8019948:	8812      	ldrh	r2, [r2, #0]
 801994a:	495b      	ldr	r1, [pc, #364]	@ (8019ab8 <USB_DeactivateEndpoint+0x374>)
 801994c:	430a      	orrs	r2, r1
 801994e:	b292      	uxth	r2, r2
 8019950:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019952:	687a      	ldr	r2, [r7, #4]
 8019954:	683b      	ldr	r3, [r7, #0]
 8019956:	781b      	ldrb	r3, [r3, #0]
 8019958:	009b      	lsls	r3, r3, #2
 801995a:	18d3      	adds	r3, r2, r3
 801995c:	881b      	ldrh	r3, [r3, #0]
 801995e:	b29a      	uxth	r2, r3
 8019960:	2014      	movs	r0, #20
 8019962:	183b      	adds	r3, r7, r0
 8019964:	4953      	ldr	r1, [pc, #332]	@ (8019ab4 <USB_DeactivateEndpoint+0x370>)
 8019966:	400a      	ands	r2, r1
 8019968:	801a      	strh	r2, [r3, #0]
 801996a:	687a      	ldr	r2, [r7, #4]
 801996c:	683b      	ldr	r3, [r7, #0]
 801996e:	781b      	ldrb	r3, [r3, #0]
 8019970:	009b      	lsls	r3, r3, #2
 8019972:	18d3      	adds	r3, r2, r3
 8019974:	183a      	adds	r2, r7, r0
 8019976:	8812      	ldrh	r2, [r2, #0]
 8019978:	494f      	ldr	r1, [pc, #316]	@ (8019ab8 <USB_DeactivateEndpoint+0x374>)
 801997a:	430a      	orrs	r2, r1
 801997c:	b292      	uxth	r2, r2
 801997e:	801a      	strh	r2, [r3, #0]
 8019980:	e08f      	b.n	8019aa2 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019982:	687a      	ldr	r2, [r7, #4]
 8019984:	683b      	ldr	r3, [r7, #0]
 8019986:	781b      	ldrb	r3, [r3, #0]
 8019988:	009b      	lsls	r3, r3, #2
 801998a:	18d2      	adds	r2, r2, r3
 801998c:	212e      	movs	r1, #46	@ 0x2e
 801998e:	187b      	adds	r3, r7, r1
 8019990:	8812      	ldrh	r2, [r2, #0]
 8019992:	801a      	strh	r2, [r3, #0]
 8019994:	187b      	adds	r3, r7, r1
 8019996:	881a      	ldrh	r2, [r3, #0]
 8019998:	2380      	movs	r3, #128	@ 0x80
 801999a:	01db      	lsls	r3, r3, #7
 801999c:	4013      	ands	r3, r2
 801999e:	d016      	beq.n	80199ce <USB_DeactivateEndpoint+0x28a>
 80199a0:	687a      	ldr	r2, [r7, #4]
 80199a2:	683b      	ldr	r3, [r7, #0]
 80199a4:	781b      	ldrb	r3, [r3, #0]
 80199a6:	009b      	lsls	r3, r3, #2
 80199a8:	18d3      	adds	r3, r2, r3
 80199aa:	881b      	ldrh	r3, [r3, #0]
 80199ac:	b29a      	uxth	r2, r3
 80199ae:	202c      	movs	r0, #44	@ 0x2c
 80199b0:	183b      	adds	r3, r7, r0
 80199b2:	493e      	ldr	r1, [pc, #248]	@ (8019aac <USB_DeactivateEndpoint+0x368>)
 80199b4:	400a      	ands	r2, r1
 80199b6:	801a      	strh	r2, [r3, #0]
 80199b8:	687a      	ldr	r2, [r7, #4]
 80199ba:	683b      	ldr	r3, [r7, #0]
 80199bc:	781b      	ldrb	r3, [r3, #0]
 80199be:	009b      	lsls	r3, r3, #2
 80199c0:	18d3      	adds	r3, r2, r3
 80199c2:	183a      	adds	r2, r7, r0
 80199c4:	8812      	ldrh	r2, [r2, #0]
 80199c6:	493d      	ldr	r1, [pc, #244]	@ (8019abc <USB_DeactivateEndpoint+0x378>)
 80199c8:	430a      	orrs	r2, r1
 80199ca:	b292      	uxth	r2, r2
 80199cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80199ce:	687a      	ldr	r2, [r7, #4]
 80199d0:	683b      	ldr	r3, [r7, #0]
 80199d2:	781b      	ldrb	r3, [r3, #0]
 80199d4:	009b      	lsls	r3, r3, #2
 80199d6:	18d2      	adds	r2, r2, r3
 80199d8:	212a      	movs	r1, #42	@ 0x2a
 80199da:	187b      	adds	r3, r7, r1
 80199dc:	8812      	ldrh	r2, [r2, #0]
 80199de:	801a      	strh	r2, [r3, #0]
 80199e0:	187b      	adds	r3, r7, r1
 80199e2:	881b      	ldrh	r3, [r3, #0]
 80199e4:	2240      	movs	r2, #64	@ 0x40
 80199e6:	4013      	ands	r3, r2
 80199e8:	d016      	beq.n	8019a18 <USB_DeactivateEndpoint+0x2d4>
 80199ea:	687a      	ldr	r2, [r7, #4]
 80199ec:	683b      	ldr	r3, [r7, #0]
 80199ee:	781b      	ldrb	r3, [r3, #0]
 80199f0:	009b      	lsls	r3, r3, #2
 80199f2:	18d3      	adds	r3, r2, r3
 80199f4:	881b      	ldrh	r3, [r3, #0]
 80199f6:	b29a      	uxth	r2, r3
 80199f8:	2028      	movs	r0, #40	@ 0x28
 80199fa:	183b      	adds	r3, r7, r0
 80199fc:	492b      	ldr	r1, [pc, #172]	@ (8019aac <USB_DeactivateEndpoint+0x368>)
 80199fe:	400a      	ands	r2, r1
 8019a00:	801a      	strh	r2, [r3, #0]
 8019a02:	687a      	ldr	r2, [r7, #4]
 8019a04:	683b      	ldr	r3, [r7, #0]
 8019a06:	781b      	ldrb	r3, [r3, #0]
 8019a08:	009b      	lsls	r3, r3, #2
 8019a0a:	18d3      	adds	r3, r2, r3
 8019a0c:	183a      	adds	r2, r7, r0
 8019a0e:	8812      	ldrh	r2, [r2, #0]
 8019a10:	4927      	ldr	r1, [pc, #156]	@ (8019ab0 <USB_DeactivateEndpoint+0x36c>)
 8019a12:	430a      	orrs	r2, r1
 8019a14:	b292      	uxth	r2, r2
 8019a16:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8019a18:	687a      	ldr	r2, [r7, #4]
 8019a1a:	683b      	ldr	r3, [r7, #0]
 8019a1c:	781b      	ldrb	r3, [r3, #0]
 8019a1e:	009b      	lsls	r3, r3, #2
 8019a20:	18d3      	adds	r3, r2, r3
 8019a22:	881b      	ldrh	r3, [r3, #0]
 8019a24:	b29a      	uxth	r2, r3
 8019a26:	2026      	movs	r0, #38	@ 0x26
 8019a28:	183b      	adds	r3, r7, r0
 8019a2a:	4920      	ldr	r1, [pc, #128]	@ (8019aac <USB_DeactivateEndpoint+0x368>)
 8019a2c:	400a      	ands	r2, r1
 8019a2e:	801a      	strh	r2, [r3, #0]
 8019a30:	687a      	ldr	r2, [r7, #4]
 8019a32:	683b      	ldr	r3, [r7, #0]
 8019a34:	781b      	ldrb	r3, [r3, #0]
 8019a36:	009b      	lsls	r3, r3, #2
 8019a38:	18d3      	adds	r3, r2, r3
 8019a3a:	183a      	adds	r2, r7, r0
 8019a3c:	8812      	ldrh	r2, [r2, #0]
 8019a3e:	491f      	ldr	r1, [pc, #124]	@ (8019abc <USB_DeactivateEndpoint+0x378>)
 8019a40:	430a      	orrs	r2, r1
 8019a42:	b292      	uxth	r2, r2
 8019a44:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8019a46:	687a      	ldr	r2, [r7, #4]
 8019a48:	683b      	ldr	r3, [r7, #0]
 8019a4a:	781b      	ldrb	r3, [r3, #0]
 8019a4c:	009b      	lsls	r3, r3, #2
 8019a4e:	18d3      	adds	r3, r2, r3
 8019a50:	881b      	ldrh	r3, [r3, #0]
 8019a52:	b29a      	uxth	r2, r3
 8019a54:	2024      	movs	r0, #36	@ 0x24
 8019a56:	183b      	adds	r3, r7, r0
 8019a58:	4916      	ldr	r1, [pc, #88]	@ (8019ab4 <USB_DeactivateEndpoint+0x370>)
 8019a5a:	400a      	ands	r2, r1
 8019a5c:	801a      	strh	r2, [r3, #0]
 8019a5e:	687a      	ldr	r2, [r7, #4]
 8019a60:	683b      	ldr	r3, [r7, #0]
 8019a62:	781b      	ldrb	r3, [r3, #0]
 8019a64:	009b      	lsls	r3, r3, #2
 8019a66:	18d3      	adds	r3, r2, r3
 8019a68:	183a      	adds	r2, r7, r0
 8019a6a:	8812      	ldrh	r2, [r2, #0]
 8019a6c:	4912      	ldr	r1, [pc, #72]	@ (8019ab8 <USB_DeactivateEndpoint+0x374>)
 8019a6e:	430a      	orrs	r2, r1
 8019a70:	b292      	uxth	r2, r2
 8019a72:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8019a74:	687a      	ldr	r2, [r7, #4]
 8019a76:	683b      	ldr	r3, [r7, #0]
 8019a78:	781b      	ldrb	r3, [r3, #0]
 8019a7a:	009b      	lsls	r3, r3, #2
 8019a7c:	18d3      	adds	r3, r2, r3
 8019a7e:	881b      	ldrh	r3, [r3, #0]
 8019a80:	b29a      	uxth	r2, r3
 8019a82:	2022      	movs	r0, #34	@ 0x22
 8019a84:	183b      	adds	r3, r7, r0
 8019a86:	490e      	ldr	r1, [pc, #56]	@ (8019ac0 <USB_DeactivateEndpoint+0x37c>)
 8019a88:	400a      	ands	r2, r1
 8019a8a:	801a      	strh	r2, [r3, #0]
 8019a8c:	687a      	ldr	r2, [r7, #4]
 8019a8e:	683b      	ldr	r3, [r7, #0]
 8019a90:	781b      	ldrb	r3, [r3, #0]
 8019a92:	009b      	lsls	r3, r3, #2
 8019a94:	18d3      	adds	r3, r2, r3
 8019a96:	183a      	adds	r2, r7, r0
 8019a98:	8812      	ldrh	r2, [r2, #0]
 8019a9a:	4907      	ldr	r1, [pc, #28]	@ (8019ab8 <USB_DeactivateEndpoint+0x374>)
 8019a9c:	430a      	orrs	r2, r1
 8019a9e:	b292      	uxth	r2, r2
 8019aa0:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8019aa2:	2300      	movs	r3, #0
}
 8019aa4:	0018      	movs	r0, r3
 8019aa6:	46bd      	mov	sp, r7
 8019aa8:	b00c      	add	sp, #48	@ 0x30
 8019aaa:	bd80      	pop	{r7, pc}
 8019aac:	ffff8f8f 	.word	0xffff8f8f
 8019ab0:	ffff80c0 	.word	0xffff80c0
 8019ab4:	ffff8fbf 	.word	0xffff8fbf
 8019ab8:	ffff8080 	.word	0xffff8080
 8019abc:	ffffc080 	.word	0xffffc080
 8019ac0:	ffffbf8f 	.word	0xffffbf8f

08019ac4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019ac4:	b590      	push	{r4, r7, lr}
 8019ac6:	b0c3      	sub	sp, #268	@ 0x10c
 8019ac8:	af00      	add	r7, sp, #0
 8019aca:	6078      	str	r0, [r7, #4]
 8019acc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8019ace:	683b      	ldr	r3, [r7, #0]
 8019ad0:	785b      	ldrb	r3, [r3, #1]
 8019ad2:	2b01      	cmp	r3, #1
 8019ad4:	d001      	beq.n	8019ada <USB_EPStartXfer+0x16>
 8019ad6:	f000 fd2d 	bl	801a534 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8019ada:	683b      	ldr	r3, [r7, #0]
 8019adc:	699a      	ldr	r2, [r3, #24]
 8019ade:	683b      	ldr	r3, [r7, #0]
 8019ae0:	691b      	ldr	r3, [r3, #16]
 8019ae2:	429a      	cmp	r2, r3
 8019ae4:	d905      	bls.n	8019af2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8019ae6:	683b      	ldr	r3, [r7, #0]
 8019ae8:	691b      	ldr	r3, [r3, #16]
 8019aea:	1d7a      	adds	r2, r7, #5
 8019aec:	32ff      	adds	r2, #255	@ 0xff
 8019aee:	6013      	str	r3, [r2, #0]
 8019af0:	e004      	b.n	8019afc <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8019af2:	683b      	ldr	r3, [r7, #0]
 8019af4:	699b      	ldr	r3, [r3, #24]
 8019af6:	1d7a      	adds	r2, r7, #5
 8019af8:	32ff      	adds	r2, #255	@ 0xff
 8019afa:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8019afc:	683b      	ldr	r3, [r7, #0]
 8019afe:	7b1b      	ldrb	r3, [r3, #12]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d125      	bne.n	8019b50 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8019b04:	683b      	ldr	r3, [r7, #0]
 8019b06:	6959      	ldr	r1, [r3, #20]
 8019b08:	683b      	ldr	r3, [r7, #0]
 8019b0a:	88da      	ldrh	r2, [r3, #6]
 8019b0c:	1d7b      	adds	r3, r7, #5
 8019b0e:	33ff      	adds	r3, #255	@ 0xff
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	b29b      	uxth	r3, r3
 8019b14:	6878      	ldr	r0, [r7, #4]
 8019b16:	f001 fa47 	bl	801afa8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	613b      	str	r3, [r7, #16]
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	2250      	movs	r2, #80	@ 0x50
 8019b22:	5a9b      	ldrh	r3, [r3, r2]
 8019b24:	b29b      	uxth	r3, r3
 8019b26:	001a      	movs	r2, r3
 8019b28:	693b      	ldr	r3, [r7, #16]
 8019b2a:	189b      	adds	r3, r3, r2
 8019b2c:	613b      	str	r3, [r7, #16]
 8019b2e:	683b      	ldr	r3, [r7, #0]
 8019b30:	781b      	ldrb	r3, [r3, #0]
 8019b32:	00da      	lsls	r2, r3, #3
 8019b34:	693b      	ldr	r3, [r7, #16]
 8019b36:	18d3      	adds	r3, r2, r3
 8019b38:	4ad7      	ldr	r2, [pc, #860]	@ (8019e98 <USB_EPStartXfer+0x3d4>)
 8019b3a:	4694      	mov	ip, r2
 8019b3c:	4463      	add	r3, ip
 8019b3e:	60fb      	str	r3, [r7, #12]
 8019b40:	1d7b      	adds	r3, r7, #5
 8019b42:	33ff      	adds	r3, #255	@ 0xff
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	b29a      	uxth	r2, r3
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	801a      	strh	r2, [r3, #0]
 8019b4c:	f000 fccd 	bl	801a4ea <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8019b50:	683b      	ldr	r3, [r7, #0]
 8019b52:	78db      	ldrb	r3, [r3, #3]
 8019b54:	2b02      	cmp	r3, #2
 8019b56:	d000      	beq.n	8019b5a <USB_EPStartXfer+0x96>
 8019b58:	e362      	b.n	801a220 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8019b5a:	683b      	ldr	r3, [r7, #0]
 8019b5c:	6a1a      	ldr	r2, [r3, #32]
 8019b5e:	683b      	ldr	r3, [r7, #0]
 8019b60:	691b      	ldr	r3, [r3, #16]
 8019b62:	429a      	cmp	r2, r3
 8019b64:	d800      	bhi.n	8019b68 <USB_EPStartXfer+0xa4>
 8019b66:	e309      	b.n	801a17c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8019b68:	687a      	ldr	r2, [r7, #4]
 8019b6a:	683b      	ldr	r3, [r7, #0]
 8019b6c:	781b      	ldrb	r3, [r3, #0]
 8019b6e:	009b      	lsls	r3, r3, #2
 8019b70:	18d3      	adds	r3, r2, r3
 8019b72:	881b      	ldrh	r3, [r3, #0]
 8019b74:	b29a      	uxth	r2, r3
 8019b76:	2056      	movs	r0, #86	@ 0x56
 8019b78:	183b      	adds	r3, r7, r0
 8019b7a:	49c8      	ldr	r1, [pc, #800]	@ (8019e9c <USB_EPStartXfer+0x3d8>)
 8019b7c:	400a      	ands	r2, r1
 8019b7e:	801a      	strh	r2, [r3, #0]
 8019b80:	687a      	ldr	r2, [r7, #4]
 8019b82:	683b      	ldr	r3, [r7, #0]
 8019b84:	781b      	ldrb	r3, [r3, #0]
 8019b86:	009b      	lsls	r3, r3, #2
 8019b88:	18d3      	adds	r3, r2, r3
 8019b8a:	183a      	adds	r2, r7, r0
 8019b8c:	8812      	ldrh	r2, [r2, #0]
 8019b8e:	49c4      	ldr	r1, [pc, #784]	@ (8019ea0 <USB_EPStartXfer+0x3dc>)
 8019b90:	430a      	orrs	r2, r1
 8019b92:	b292      	uxth	r2, r2
 8019b94:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8019b96:	683b      	ldr	r3, [r7, #0]
 8019b98:	6a1a      	ldr	r2, [r3, #32]
 8019b9a:	1d7b      	adds	r3, r7, #5
 8019b9c:	33ff      	adds	r3, #255	@ 0xff
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	1ad2      	subs	r2, r2, r3
 8019ba2:	683b      	ldr	r3, [r7, #0]
 8019ba4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8019ba6:	687a      	ldr	r2, [r7, #4]
 8019ba8:	683b      	ldr	r3, [r7, #0]
 8019baa:	781b      	ldrb	r3, [r3, #0]
 8019bac:	009b      	lsls	r3, r3, #2
 8019bae:	18d3      	adds	r3, r2, r3
 8019bb0:	881b      	ldrh	r3, [r3, #0]
 8019bb2:	b29b      	uxth	r3, r3
 8019bb4:	001a      	movs	r2, r3
 8019bb6:	2340      	movs	r3, #64	@ 0x40
 8019bb8:	4013      	ands	r3, r2
 8019bba:	d100      	bne.n	8019bbe <USB_EPStartXfer+0xfa>
 8019bbc:	e176      	b.n	8019eac <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8019bc2:	683b      	ldr	r3, [r7, #0]
 8019bc4:	785b      	ldrb	r3, [r3, #1]
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d000      	beq.n	8019bcc <USB_EPStartXfer+0x108>
 8019bca:	e074      	b.n	8019cb6 <USB_EPStartXfer+0x1f2>
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	2250      	movs	r2, #80	@ 0x50
 8019bd4:	5a9b      	ldrh	r3, [r3, r2]
 8019bd6:	b29b      	uxth	r3, r3
 8019bd8:	001a      	movs	r2, r3
 8019bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019bdc:	189b      	adds	r3, r3, r2
 8019bde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019be0:	683b      	ldr	r3, [r7, #0]
 8019be2:	781b      	ldrb	r3, [r3, #0]
 8019be4:	00da      	lsls	r2, r3, #3
 8019be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019be8:	18d3      	adds	r3, r2, r3
 8019bea:	4aae      	ldr	r2, [pc, #696]	@ (8019ea4 <USB_EPStartXfer+0x3e0>)
 8019bec:	4694      	mov	ip, r2
 8019bee:	4463      	add	r3, ip
 8019bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8019bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bf4:	881b      	ldrh	r3, [r3, #0]
 8019bf6:	b29b      	uxth	r3, r3
 8019bf8:	059b      	lsls	r3, r3, #22
 8019bfa:	0d9b      	lsrs	r3, r3, #22
 8019bfc:	b29a      	uxth	r2, r3
 8019bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c00:	801a      	strh	r2, [r3, #0]
 8019c02:	1d7b      	adds	r3, r7, #5
 8019c04:	33ff      	adds	r3, #255	@ 0xff
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	2b3e      	cmp	r3, #62	@ 0x3e
 8019c0a:	d924      	bls.n	8019c56 <USB_EPStartXfer+0x192>
 8019c0c:	1d7b      	adds	r3, r7, #5
 8019c0e:	33ff      	adds	r3, #255	@ 0xff
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	095b      	lsrs	r3, r3, #5
 8019c14:	1c7a      	adds	r2, r7, #1
 8019c16:	32ff      	adds	r2, #255	@ 0xff
 8019c18:	6013      	str	r3, [r2, #0]
 8019c1a:	1d7b      	adds	r3, r7, #5
 8019c1c:	33ff      	adds	r3, #255	@ 0xff
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	221f      	movs	r2, #31
 8019c22:	4013      	ands	r3, r2
 8019c24:	d106      	bne.n	8019c34 <USB_EPStartXfer+0x170>
 8019c26:	1c7b      	adds	r3, r7, #1
 8019c28:	33ff      	adds	r3, #255	@ 0xff
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	3b01      	subs	r3, #1
 8019c2e:	1c7a      	adds	r2, r7, #1
 8019c30:	32ff      	adds	r2, #255	@ 0xff
 8019c32:	6013      	str	r3, [r2, #0]
 8019c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c36:	881b      	ldrh	r3, [r3, #0]
 8019c38:	b29a      	uxth	r2, r3
 8019c3a:	1c7b      	adds	r3, r7, #1
 8019c3c:	33ff      	adds	r3, #255	@ 0xff
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	b29b      	uxth	r3, r3
 8019c42:	029b      	lsls	r3, r3, #10
 8019c44:	b29b      	uxth	r3, r3
 8019c46:	4313      	orrs	r3, r2
 8019c48:	b29b      	uxth	r3, r3
 8019c4a:	4a97      	ldr	r2, [pc, #604]	@ (8019ea8 <USB_EPStartXfer+0x3e4>)
 8019c4c:	4313      	orrs	r3, r2
 8019c4e:	b29a      	uxth	r2, r3
 8019c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c52:	801a      	strh	r2, [r3, #0]
 8019c54:	e04a      	b.n	8019cec <USB_EPStartXfer+0x228>
 8019c56:	1d7b      	adds	r3, r7, #5
 8019c58:	33ff      	adds	r3, #255	@ 0xff
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d108      	bne.n	8019c72 <USB_EPStartXfer+0x1ae>
 8019c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c62:	881b      	ldrh	r3, [r3, #0]
 8019c64:	b29b      	uxth	r3, r3
 8019c66:	4a90      	ldr	r2, [pc, #576]	@ (8019ea8 <USB_EPStartXfer+0x3e4>)
 8019c68:	4313      	orrs	r3, r2
 8019c6a:	b29a      	uxth	r2, r3
 8019c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c6e:	801a      	strh	r2, [r3, #0]
 8019c70:	e03c      	b.n	8019cec <USB_EPStartXfer+0x228>
 8019c72:	1d7b      	adds	r3, r7, #5
 8019c74:	33ff      	adds	r3, #255	@ 0xff
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	085b      	lsrs	r3, r3, #1
 8019c7a:	1c7a      	adds	r2, r7, #1
 8019c7c:	32ff      	adds	r2, #255	@ 0xff
 8019c7e:	6013      	str	r3, [r2, #0]
 8019c80:	1d7b      	adds	r3, r7, #5
 8019c82:	33ff      	adds	r3, #255	@ 0xff
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	2201      	movs	r2, #1
 8019c88:	4013      	ands	r3, r2
 8019c8a:	d006      	beq.n	8019c9a <USB_EPStartXfer+0x1d6>
 8019c8c:	1c7b      	adds	r3, r7, #1
 8019c8e:	33ff      	adds	r3, #255	@ 0xff
 8019c90:	681b      	ldr	r3, [r3, #0]
 8019c92:	3301      	adds	r3, #1
 8019c94:	1c7a      	adds	r2, r7, #1
 8019c96:	32ff      	adds	r2, #255	@ 0xff
 8019c98:	6013      	str	r3, [r2, #0]
 8019c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c9c:	881b      	ldrh	r3, [r3, #0]
 8019c9e:	b29a      	uxth	r2, r3
 8019ca0:	1c7b      	adds	r3, r7, #1
 8019ca2:	33ff      	adds	r3, #255	@ 0xff
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	b29b      	uxth	r3, r3
 8019ca8:	029b      	lsls	r3, r3, #10
 8019caa:	b29b      	uxth	r3, r3
 8019cac:	4313      	orrs	r3, r2
 8019cae:	b29a      	uxth	r2, r3
 8019cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cb2:	801a      	strh	r2, [r3, #0]
 8019cb4:	e01a      	b.n	8019cec <USB_EPStartXfer+0x228>
 8019cb6:	683b      	ldr	r3, [r7, #0]
 8019cb8:	785b      	ldrb	r3, [r3, #1]
 8019cba:	2b01      	cmp	r3, #1
 8019cbc:	d116      	bne.n	8019cec <USB_EPStartXfer+0x228>
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	2250      	movs	r2, #80	@ 0x50
 8019cc2:	5a9b      	ldrh	r3, [r3, r2]
 8019cc4:	b29b      	uxth	r3, r3
 8019cc6:	001a      	movs	r2, r3
 8019cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cca:	189b      	adds	r3, r3, r2
 8019ccc:	633b      	str	r3, [r7, #48]	@ 0x30
 8019cce:	683b      	ldr	r3, [r7, #0]
 8019cd0:	781b      	ldrb	r3, [r3, #0]
 8019cd2:	00da      	lsls	r2, r3, #3
 8019cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cd6:	18d3      	adds	r3, r2, r3
 8019cd8:	4a72      	ldr	r2, [pc, #456]	@ (8019ea4 <USB_EPStartXfer+0x3e0>)
 8019cda:	4694      	mov	ip, r2
 8019cdc:	4463      	add	r3, ip
 8019cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019ce0:	1d7b      	adds	r3, r7, #5
 8019ce2:	33ff      	adds	r3, #255	@ 0xff
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	b29a      	uxth	r2, r3
 8019ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019cea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8019cec:	2076      	movs	r0, #118	@ 0x76
 8019cee:	183b      	adds	r3, r7, r0
 8019cf0:	683a      	ldr	r2, [r7, #0]
 8019cf2:	8952      	ldrh	r2, [r2, #10]
 8019cf4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019cf6:	683b      	ldr	r3, [r7, #0]
 8019cf8:	6959      	ldr	r1, [r3, #20]
 8019cfa:	1d7b      	adds	r3, r7, #5
 8019cfc:	33ff      	adds	r3, #255	@ 0xff
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	b29c      	uxth	r4, r3
 8019d02:	183b      	adds	r3, r7, r0
 8019d04:	881a      	ldrh	r2, [r3, #0]
 8019d06:	6878      	ldr	r0, [r7, #4]
 8019d08:	0023      	movs	r3, r4
 8019d0a:	f001 f94d 	bl	801afa8 <USB_WritePMA>
            ep->xfer_buff += len;
 8019d0e:	683b      	ldr	r3, [r7, #0]
 8019d10:	695a      	ldr	r2, [r3, #20]
 8019d12:	1d7b      	adds	r3, r7, #5
 8019d14:	33ff      	adds	r3, #255	@ 0xff
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	18d2      	adds	r2, r2, r3
 8019d1a:	683b      	ldr	r3, [r7, #0]
 8019d1c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8019d1e:	683b      	ldr	r3, [r7, #0]
 8019d20:	6a1a      	ldr	r2, [r3, #32]
 8019d22:	683b      	ldr	r3, [r7, #0]
 8019d24:	691b      	ldr	r3, [r3, #16]
 8019d26:	429a      	cmp	r2, r3
 8019d28:	d908      	bls.n	8019d3c <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8019d2a:	683b      	ldr	r3, [r7, #0]
 8019d2c:	6a1a      	ldr	r2, [r3, #32]
 8019d2e:	1d7b      	adds	r3, r7, #5
 8019d30:	33ff      	adds	r3, #255	@ 0xff
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	1ad2      	subs	r2, r2, r3
 8019d36:	683b      	ldr	r3, [r7, #0]
 8019d38:	621a      	str	r2, [r3, #32]
 8019d3a:	e007      	b.n	8019d4c <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8019d3c:	683b      	ldr	r3, [r7, #0]
 8019d3e:	6a1b      	ldr	r3, [r3, #32]
 8019d40:	1d7a      	adds	r2, r7, #5
 8019d42:	32ff      	adds	r2, #255	@ 0xff
 8019d44:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8019d46:	683b      	ldr	r3, [r7, #0]
 8019d48:	2200      	movs	r2, #0
 8019d4a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019d4c:	683b      	ldr	r3, [r7, #0]
 8019d4e:	785b      	ldrb	r3, [r3, #1]
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d000      	beq.n	8019d56 <USB_EPStartXfer+0x292>
 8019d54:	e070      	b.n	8019e38 <USB_EPStartXfer+0x374>
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	61bb      	str	r3, [r7, #24]
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	2250      	movs	r2, #80	@ 0x50
 8019d5e:	5a9b      	ldrh	r3, [r3, r2]
 8019d60:	b29b      	uxth	r3, r3
 8019d62:	001a      	movs	r2, r3
 8019d64:	69bb      	ldr	r3, [r7, #24]
 8019d66:	189b      	adds	r3, r3, r2
 8019d68:	61bb      	str	r3, [r7, #24]
 8019d6a:	683b      	ldr	r3, [r7, #0]
 8019d6c:	781b      	ldrb	r3, [r3, #0]
 8019d6e:	00da      	lsls	r2, r3, #3
 8019d70:	69bb      	ldr	r3, [r7, #24]
 8019d72:	18d3      	adds	r3, r2, r3
 8019d74:	4a48      	ldr	r2, [pc, #288]	@ (8019e98 <USB_EPStartXfer+0x3d4>)
 8019d76:	4694      	mov	ip, r2
 8019d78:	4463      	add	r3, ip
 8019d7a:	617b      	str	r3, [r7, #20]
 8019d7c:	697b      	ldr	r3, [r7, #20]
 8019d7e:	881b      	ldrh	r3, [r3, #0]
 8019d80:	b29b      	uxth	r3, r3
 8019d82:	059b      	lsls	r3, r3, #22
 8019d84:	0d9b      	lsrs	r3, r3, #22
 8019d86:	b29a      	uxth	r2, r3
 8019d88:	697b      	ldr	r3, [r7, #20]
 8019d8a:	801a      	strh	r2, [r3, #0]
 8019d8c:	1d7b      	adds	r3, r7, #5
 8019d8e:	33ff      	adds	r3, #255	@ 0xff
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	2b3e      	cmp	r3, #62	@ 0x3e
 8019d94:	d922      	bls.n	8019ddc <USB_EPStartXfer+0x318>
 8019d96:	1d7b      	adds	r3, r7, #5
 8019d98:	33ff      	adds	r3, #255	@ 0xff
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	095b      	lsrs	r3, r3, #5
 8019d9e:	21fc      	movs	r1, #252	@ 0xfc
 8019da0:	187a      	adds	r2, r7, r1
 8019da2:	6013      	str	r3, [r2, #0]
 8019da4:	1d7b      	adds	r3, r7, #5
 8019da6:	33ff      	adds	r3, #255	@ 0xff
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	221f      	movs	r2, #31
 8019dac:	4013      	ands	r3, r2
 8019dae:	d104      	bne.n	8019dba <USB_EPStartXfer+0x2f6>
 8019db0:	187b      	adds	r3, r7, r1
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	3b01      	subs	r3, #1
 8019db6:	187a      	adds	r2, r7, r1
 8019db8:	6013      	str	r3, [r2, #0]
 8019dba:	697b      	ldr	r3, [r7, #20]
 8019dbc:	881b      	ldrh	r3, [r3, #0]
 8019dbe:	b29a      	uxth	r2, r3
 8019dc0:	23fc      	movs	r3, #252	@ 0xfc
 8019dc2:	18fb      	adds	r3, r7, r3
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	b29b      	uxth	r3, r3
 8019dc8:	029b      	lsls	r3, r3, #10
 8019dca:	b29b      	uxth	r3, r3
 8019dcc:	4313      	orrs	r3, r2
 8019dce:	b29b      	uxth	r3, r3
 8019dd0:	4a35      	ldr	r2, [pc, #212]	@ (8019ea8 <USB_EPStartXfer+0x3e4>)
 8019dd2:	4313      	orrs	r3, r2
 8019dd4:	b29a      	uxth	r2, r3
 8019dd6:	697b      	ldr	r3, [r7, #20]
 8019dd8:	801a      	strh	r2, [r3, #0]
 8019dda:	e04a      	b.n	8019e72 <USB_EPStartXfer+0x3ae>
 8019ddc:	1d7b      	adds	r3, r7, #5
 8019dde:	33ff      	adds	r3, #255	@ 0xff
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d108      	bne.n	8019df8 <USB_EPStartXfer+0x334>
 8019de6:	697b      	ldr	r3, [r7, #20]
 8019de8:	881b      	ldrh	r3, [r3, #0]
 8019dea:	b29b      	uxth	r3, r3
 8019dec:	4a2e      	ldr	r2, [pc, #184]	@ (8019ea8 <USB_EPStartXfer+0x3e4>)
 8019dee:	4313      	orrs	r3, r2
 8019df0:	b29a      	uxth	r2, r3
 8019df2:	697b      	ldr	r3, [r7, #20]
 8019df4:	801a      	strh	r2, [r3, #0]
 8019df6:	e03c      	b.n	8019e72 <USB_EPStartXfer+0x3ae>
 8019df8:	1d7b      	adds	r3, r7, #5
 8019dfa:	33ff      	adds	r3, #255	@ 0xff
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	085b      	lsrs	r3, r3, #1
 8019e00:	21fc      	movs	r1, #252	@ 0xfc
 8019e02:	187a      	adds	r2, r7, r1
 8019e04:	6013      	str	r3, [r2, #0]
 8019e06:	1d7b      	adds	r3, r7, #5
 8019e08:	33ff      	adds	r3, #255	@ 0xff
 8019e0a:	681b      	ldr	r3, [r3, #0]
 8019e0c:	2201      	movs	r2, #1
 8019e0e:	4013      	ands	r3, r2
 8019e10:	d004      	beq.n	8019e1c <USB_EPStartXfer+0x358>
 8019e12:	187b      	adds	r3, r7, r1
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	3301      	adds	r3, #1
 8019e18:	187a      	adds	r2, r7, r1
 8019e1a:	6013      	str	r3, [r2, #0]
 8019e1c:	697b      	ldr	r3, [r7, #20]
 8019e1e:	881b      	ldrh	r3, [r3, #0]
 8019e20:	b29a      	uxth	r2, r3
 8019e22:	23fc      	movs	r3, #252	@ 0xfc
 8019e24:	18fb      	adds	r3, r7, r3
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	b29b      	uxth	r3, r3
 8019e2a:	029b      	lsls	r3, r3, #10
 8019e2c:	b29b      	uxth	r3, r3
 8019e2e:	4313      	orrs	r3, r2
 8019e30:	b29a      	uxth	r2, r3
 8019e32:	697b      	ldr	r3, [r7, #20]
 8019e34:	801a      	strh	r2, [r3, #0]
 8019e36:	e01c      	b.n	8019e72 <USB_EPStartXfer+0x3ae>
 8019e38:	683b      	ldr	r3, [r7, #0]
 8019e3a:	785b      	ldrb	r3, [r3, #1]
 8019e3c:	2b01      	cmp	r3, #1
 8019e3e:	d118      	bne.n	8019e72 <USB_EPStartXfer+0x3ae>
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	623b      	str	r3, [r7, #32]
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	2250      	movs	r2, #80	@ 0x50
 8019e48:	5a9b      	ldrh	r3, [r3, r2]
 8019e4a:	b29b      	uxth	r3, r3
 8019e4c:	001a      	movs	r2, r3
 8019e4e:	6a3b      	ldr	r3, [r7, #32]
 8019e50:	189b      	adds	r3, r3, r2
 8019e52:	623b      	str	r3, [r7, #32]
 8019e54:	683b      	ldr	r3, [r7, #0]
 8019e56:	781b      	ldrb	r3, [r3, #0]
 8019e58:	00da      	lsls	r2, r3, #3
 8019e5a:	6a3b      	ldr	r3, [r7, #32]
 8019e5c:	18d3      	adds	r3, r2, r3
 8019e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8019e98 <USB_EPStartXfer+0x3d4>)
 8019e60:	4694      	mov	ip, r2
 8019e62:	4463      	add	r3, ip
 8019e64:	61fb      	str	r3, [r7, #28]
 8019e66:	1d7b      	adds	r3, r7, #5
 8019e68:	33ff      	adds	r3, #255	@ 0xff
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	b29a      	uxth	r2, r3
 8019e6e:	69fb      	ldr	r3, [r7, #28]
 8019e70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8019e72:	2076      	movs	r0, #118	@ 0x76
 8019e74:	183b      	adds	r3, r7, r0
 8019e76:	683a      	ldr	r2, [r7, #0]
 8019e78:	8912      	ldrh	r2, [r2, #8]
 8019e7a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019e7c:	683b      	ldr	r3, [r7, #0]
 8019e7e:	6959      	ldr	r1, [r3, #20]
 8019e80:	1d7b      	adds	r3, r7, #5
 8019e82:	33ff      	adds	r3, #255	@ 0xff
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	b29c      	uxth	r4, r3
 8019e88:	183b      	adds	r3, r7, r0
 8019e8a:	881a      	ldrh	r2, [r3, #0]
 8019e8c:	6878      	ldr	r0, [r7, #4]
 8019e8e:	0023      	movs	r3, r4
 8019e90:	f001 f88a 	bl	801afa8 <USB_WritePMA>
 8019e94:	e329      	b.n	801a4ea <USB_EPStartXfer+0xa26>
 8019e96:	46c0      	nop			@ (mov r8, r8)
 8019e98:	00000402 	.word	0x00000402
 8019e9c:	ffff8f8f 	.word	0xffff8f8f
 8019ea0:	ffff8180 	.word	0xffff8180
 8019ea4:	00000406 	.word	0x00000406
 8019ea8:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8019eac:	683b      	ldr	r3, [r7, #0]
 8019eae:	785b      	ldrb	r3, [r3, #1]
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d000      	beq.n	8019eb6 <USB_EPStartXfer+0x3f2>
 8019eb4:	e070      	b.n	8019f98 <USB_EPStartXfer+0x4d4>
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	2250      	movs	r2, #80	@ 0x50
 8019ebe:	5a9b      	ldrh	r3, [r3, r2]
 8019ec0:	b29b      	uxth	r3, r3
 8019ec2:	001a      	movs	r2, r3
 8019ec4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019ec6:	189b      	adds	r3, r3, r2
 8019ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8019eca:	683b      	ldr	r3, [r7, #0]
 8019ecc:	781b      	ldrb	r3, [r3, #0]
 8019ece:	00da      	lsls	r2, r3, #3
 8019ed0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019ed2:	18d3      	adds	r3, r2, r3
 8019ed4:	4acd      	ldr	r2, [pc, #820]	@ (801a20c <USB_EPStartXfer+0x748>)
 8019ed6:	4694      	mov	ip, r2
 8019ed8:	4463      	add	r3, ip
 8019eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8019edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019ede:	881b      	ldrh	r3, [r3, #0]
 8019ee0:	b29b      	uxth	r3, r3
 8019ee2:	059b      	lsls	r3, r3, #22
 8019ee4:	0d9b      	lsrs	r3, r3, #22
 8019ee6:	b29a      	uxth	r2, r3
 8019ee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019eea:	801a      	strh	r2, [r3, #0]
 8019eec:	1d7b      	adds	r3, r7, #5
 8019eee:	33ff      	adds	r3, #255	@ 0xff
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	2b3e      	cmp	r3, #62	@ 0x3e
 8019ef4:	d922      	bls.n	8019f3c <USB_EPStartXfer+0x478>
 8019ef6:	1d7b      	adds	r3, r7, #5
 8019ef8:	33ff      	adds	r3, #255	@ 0xff
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	095b      	lsrs	r3, r3, #5
 8019efe:	21f8      	movs	r1, #248	@ 0xf8
 8019f00:	187a      	adds	r2, r7, r1
 8019f02:	6013      	str	r3, [r2, #0]
 8019f04:	1d7b      	adds	r3, r7, #5
 8019f06:	33ff      	adds	r3, #255	@ 0xff
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	221f      	movs	r2, #31
 8019f0c:	4013      	ands	r3, r2
 8019f0e:	d104      	bne.n	8019f1a <USB_EPStartXfer+0x456>
 8019f10:	187b      	adds	r3, r7, r1
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	3b01      	subs	r3, #1
 8019f16:	187a      	adds	r2, r7, r1
 8019f18:	6013      	str	r3, [r2, #0]
 8019f1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f1c:	881b      	ldrh	r3, [r3, #0]
 8019f1e:	b29a      	uxth	r2, r3
 8019f20:	23f8      	movs	r3, #248	@ 0xf8
 8019f22:	18fb      	adds	r3, r7, r3
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	b29b      	uxth	r3, r3
 8019f28:	029b      	lsls	r3, r3, #10
 8019f2a:	b29b      	uxth	r3, r3
 8019f2c:	4313      	orrs	r3, r2
 8019f2e:	b29b      	uxth	r3, r3
 8019f30:	4ab7      	ldr	r2, [pc, #732]	@ (801a210 <USB_EPStartXfer+0x74c>)
 8019f32:	4313      	orrs	r3, r2
 8019f34:	b29a      	uxth	r2, r3
 8019f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f38:	801a      	strh	r2, [r3, #0]
 8019f3a:	e04a      	b.n	8019fd2 <USB_EPStartXfer+0x50e>
 8019f3c:	1d7b      	adds	r3, r7, #5
 8019f3e:	33ff      	adds	r3, #255	@ 0xff
 8019f40:	681b      	ldr	r3, [r3, #0]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d108      	bne.n	8019f58 <USB_EPStartXfer+0x494>
 8019f46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f48:	881b      	ldrh	r3, [r3, #0]
 8019f4a:	b29b      	uxth	r3, r3
 8019f4c:	4ab0      	ldr	r2, [pc, #704]	@ (801a210 <USB_EPStartXfer+0x74c>)
 8019f4e:	4313      	orrs	r3, r2
 8019f50:	b29a      	uxth	r2, r3
 8019f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f54:	801a      	strh	r2, [r3, #0]
 8019f56:	e03c      	b.n	8019fd2 <USB_EPStartXfer+0x50e>
 8019f58:	1d7b      	adds	r3, r7, #5
 8019f5a:	33ff      	adds	r3, #255	@ 0xff
 8019f5c:	681b      	ldr	r3, [r3, #0]
 8019f5e:	085b      	lsrs	r3, r3, #1
 8019f60:	21f8      	movs	r1, #248	@ 0xf8
 8019f62:	187a      	adds	r2, r7, r1
 8019f64:	6013      	str	r3, [r2, #0]
 8019f66:	1d7b      	adds	r3, r7, #5
 8019f68:	33ff      	adds	r3, #255	@ 0xff
 8019f6a:	681b      	ldr	r3, [r3, #0]
 8019f6c:	2201      	movs	r2, #1
 8019f6e:	4013      	ands	r3, r2
 8019f70:	d004      	beq.n	8019f7c <USB_EPStartXfer+0x4b8>
 8019f72:	187b      	adds	r3, r7, r1
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	3301      	adds	r3, #1
 8019f78:	187a      	adds	r2, r7, r1
 8019f7a:	6013      	str	r3, [r2, #0]
 8019f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f7e:	881b      	ldrh	r3, [r3, #0]
 8019f80:	b29a      	uxth	r2, r3
 8019f82:	23f8      	movs	r3, #248	@ 0xf8
 8019f84:	18fb      	adds	r3, r7, r3
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	b29b      	uxth	r3, r3
 8019f8a:	029b      	lsls	r3, r3, #10
 8019f8c:	b29b      	uxth	r3, r3
 8019f8e:	4313      	orrs	r3, r2
 8019f90:	b29a      	uxth	r2, r3
 8019f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f94:	801a      	strh	r2, [r3, #0]
 8019f96:	e01c      	b.n	8019fd2 <USB_EPStartXfer+0x50e>
 8019f98:	683b      	ldr	r3, [r7, #0]
 8019f9a:	785b      	ldrb	r3, [r3, #1]
 8019f9c:	2b01      	cmp	r3, #1
 8019f9e:	d118      	bne.n	8019fd2 <USB_EPStartXfer+0x50e>
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	653b      	str	r3, [r7, #80]	@ 0x50
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	2250      	movs	r2, #80	@ 0x50
 8019fa8:	5a9b      	ldrh	r3, [r3, r2]
 8019faa:	b29b      	uxth	r3, r3
 8019fac:	001a      	movs	r2, r3
 8019fae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019fb0:	189b      	adds	r3, r3, r2
 8019fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8019fb4:	683b      	ldr	r3, [r7, #0]
 8019fb6:	781b      	ldrb	r3, [r3, #0]
 8019fb8:	00da      	lsls	r2, r3, #3
 8019fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019fbc:	18d3      	adds	r3, r2, r3
 8019fbe:	4a93      	ldr	r2, [pc, #588]	@ (801a20c <USB_EPStartXfer+0x748>)
 8019fc0:	4694      	mov	ip, r2
 8019fc2:	4463      	add	r3, ip
 8019fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019fc6:	1d7b      	adds	r3, r7, #5
 8019fc8:	33ff      	adds	r3, #255	@ 0xff
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	b29a      	uxth	r2, r3
 8019fce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019fd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8019fd2:	2076      	movs	r0, #118	@ 0x76
 8019fd4:	183b      	adds	r3, r7, r0
 8019fd6:	683a      	ldr	r2, [r7, #0]
 8019fd8:	8912      	ldrh	r2, [r2, #8]
 8019fda:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8019fdc:	683b      	ldr	r3, [r7, #0]
 8019fde:	6959      	ldr	r1, [r3, #20]
 8019fe0:	1d7b      	adds	r3, r7, #5
 8019fe2:	33ff      	adds	r3, #255	@ 0xff
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	b29c      	uxth	r4, r3
 8019fe8:	183b      	adds	r3, r7, r0
 8019fea:	881a      	ldrh	r2, [r3, #0]
 8019fec:	6878      	ldr	r0, [r7, #4]
 8019fee:	0023      	movs	r3, r4
 8019ff0:	f000 ffda 	bl	801afa8 <USB_WritePMA>
            ep->xfer_buff += len;
 8019ff4:	683b      	ldr	r3, [r7, #0]
 8019ff6:	695a      	ldr	r2, [r3, #20]
 8019ff8:	1d7b      	adds	r3, r7, #5
 8019ffa:	33ff      	adds	r3, #255	@ 0xff
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	18d2      	adds	r2, r2, r3
 801a000:	683b      	ldr	r3, [r7, #0]
 801a002:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801a004:	683b      	ldr	r3, [r7, #0]
 801a006:	6a1a      	ldr	r2, [r3, #32]
 801a008:	683b      	ldr	r3, [r7, #0]
 801a00a:	691b      	ldr	r3, [r3, #16]
 801a00c:	429a      	cmp	r2, r3
 801a00e:	d908      	bls.n	801a022 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 801a010:	683b      	ldr	r3, [r7, #0]
 801a012:	6a1a      	ldr	r2, [r3, #32]
 801a014:	1d7b      	adds	r3, r7, #5
 801a016:	33ff      	adds	r3, #255	@ 0xff
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	1ad2      	subs	r2, r2, r3
 801a01c:	683b      	ldr	r3, [r7, #0]
 801a01e:	621a      	str	r2, [r3, #32]
 801a020:	e007      	b.n	801a032 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801a022:	683b      	ldr	r3, [r7, #0]
 801a024:	6a1b      	ldr	r3, [r3, #32]
 801a026:	1d7a      	adds	r2, r7, #5
 801a028:	32ff      	adds	r2, #255	@ 0xff
 801a02a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801a02c:	683b      	ldr	r3, [r7, #0]
 801a02e:	2200      	movs	r2, #0
 801a030:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	643b      	str	r3, [r7, #64]	@ 0x40
 801a036:	683b      	ldr	r3, [r7, #0]
 801a038:	785b      	ldrb	r3, [r3, #1]
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d000      	beq.n	801a040 <USB_EPStartXfer+0x57c>
 801a03e:	e070      	b.n	801a122 <USB_EPStartXfer+0x65e>
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	2250      	movs	r2, #80	@ 0x50
 801a048:	5a9b      	ldrh	r3, [r3, r2]
 801a04a:	b29b      	uxth	r3, r3
 801a04c:	001a      	movs	r2, r3
 801a04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a050:	189b      	adds	r3, r3, r2
 801a052:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a054:	683b      	ldr	r3, [r7, #0]
 801a056:	781b      	ldrb	r3, [r3, #0]
 801a058:	00da      	lsls	r2, r3, #3
 801a05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a05c:	18d3      	adds	r3, r2, r3
 801a05e:	4a6d      	ldr	r2, [pc, #436]	@ (801a214 <USB_EPStartXfer+0x750>)
 801a060:	4694      	mov	ip, r2
 801a062:	4463      	add	r3, ip
 801a064:	637b      	str	r3, [r7, #52]	@ 0x34
 801a066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a068:	881b      	ldrh	r3, [r3, #0]
 801a06a:	b29b      	uxth	r3, r3
 801a06c:	059b      	lsls	r3, r3, #22
 801a06e:	0d9b      	lsrs	r3, r3, #22
 801a070:	b29a      	uxth	r2, r3
 801a072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a074:	801a      	strh	r2, [r3, #0]
 801a076:	1d7b      	adds	r3, r7, #5
 801a078:	33ff      	adds	r3, #255	@ 0xff
 801a07a:	681b      	ldr	r3, [r3, #0]
 801a07c:	2b3e      	cmp	r3, #62	@ 0x3e
 801a07e:	d922      	bls.n	801a0c6 <USB_EPStartXfer+0x602>
 801a080:	1d7b      	adds	r3, r7, #5
 801a082:	33ff      	adds	r3, #255	@ 0xff
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	095b      	lsrs	r3, r3, #5
 801a088:	21f4      	movs	r1, #244	@ 0xf4
 801a08a:	187a      	adds	r2, r7, r1
 801a08c:	6013      	str	r3, [r2, #0]
 801a08e:	1d7b      	adds	r3, r7, #5
 801a090:	33ff      	adds	r3, #255	@ 0xff
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	221f      	movs	r2, #31
 801a096:	4013      	ands	r3, r2
 801a098:	d104      	bne.n	801a0a4 <USB_EPStartXfer+0x5e0>
 801a09a:	187b      	adds	r3, r7, r1
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	3b01      	subs	r3, #1
 801a0a0:	187a      	adds	r2, r7, r1
 801a0a2:	6013      	str	r3, [r2, #0]
 801a0a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a0a6:	881b      	ldrh	r3, [r3, #0]
 801a0a8:	b29a      	uxth	r2, r3
 801a0aa:	23f4      	movs	r3, #244	@ 0xf4
 801a0ac:	18fb      	adds	r3, r7, r3
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	b29b      	uxth	r3, r3
 801a0b2:	029b      	lsls	r3, r3, #10
 801a0b4:	b29b      	uxth	r3, r3
 801a0b6:	4313      	orrs	r3, r2
 801a0b8:	b29b      	uxth	r3, r3
 801a0ba:	4a55      	ldr	r2, [pc, #340]	@ (801a210 <USB_EPStartXfer+0x74c>)
 801a0bc:	4313      	orrs	r3, r2
 801a0be:	b29a      	uxth	r2, r3
 801a0c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a0c2:	801a      	strh	r2, [r3, #0]
 801a0c4:	e048      	b.n	801a158 <USB_EPStartXfer+0x694>
 801a0c6:	1d7b      	adds	r3, r7, #5
 801a0c8:	33ff      	adds	r3, #255	@ 0xff
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d108      	bne.n	801a0e2 <USB_EPStartXfer+0x61e>
 801a0d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a0d2:	881b      	ldrh	r3, [r3, #0]
 801a0d4:	b29b      	uxth	r3, r3
 801a0d6:	4a4e      	ldr	r2, [pc, #312]	@ (801a210 <USB_EPStartXfer+0x74c>)
 801a0d8:	4313      	orrs	r3, r2
 801a0da:	b29a      	uxth	r2, r3
 801a0dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a0de:	801a      	strh	r2, [r3, #0]
 801a0e0:	e03a      	b.n	801a158 <USB_EPStartXfer+0x694>
 801a0e2:	1d7b      	adds	r3, r7, #5
 801a0e4:	33ff      	adds	r3, #255	@ 0xff
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	085b      	lsrs	r3, r3, #1
 801a0ea:	21f4      	movs	r1, #244	@ 0xf4
 801a0ec:	187a      	adds	r2, r7, r1
 801a0ee:	6013      	str	r3, [r2, #0]
 801a0f0:	1d7b      	adds	r3, r7, #5
 801a0f2:	33ff      	adds	r3, #255	@ 0xff
 801a0f4:	681b      	ldr	r3, [r3, #0]
 801a0f6:	2201      	movs	r2, #1
 801a0f8:	4013      	ands	r3, r2
 801a0fa:	d004      	beq.n	801a106 <USB_EPStartXfer+0x642>
 801a0fc:	187b      	adds	r3, r7, r1
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	3301      	adds	r3, #1
 801a102:	187a      	adds	r2, r7, r1
 801a104:	6013      	str	r3, [r2, #0]
 801a106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a108:	881b      	ldrh	r3, [r3, #0]
 801a10a:	b29a      	uxth	r2, r3
 801a10c:	23f4      	movs	r3, #244	@ 0xf4
 801a10e:	18fb      	adds	r3, r7, r3
 801a110:	681b      	ldr	r3, [r3, #0]
 801a112:	b29b      	uxth	r3, r3
 801a114:	029b      	lsls	r3, r3, #10
 801a116:	b29b      	uxth	r3, r3
 801a118:	4313      	orrs	r3, r2
 801a11a:	b29a      	uxth	r2, r3
 801a11c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a11e:	801a      	strh	r2, [r3, #0]
 801a120:	e01a      	b.n	801a158 <USB_EPStartXfer+0x694>
 801a122:	683b      	ldr	r3, [r7, #0]
 801a124:	785b      	ldrb	r3, [r3, #1]
 801a126:	2b01      	cmp	r3, #1
 801a128:	d116      	bne.n	801a158 <USB_EPStartXfer+0x694>
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	2250      	movs	r2, #80	@ 0x50
 801a12e:	5a9b      	ldrh	r3, [r3, r2]
 801a130:	b29b      	uxth	r3, r3
 801a132:	001a      	movs	r2, r3
 801a134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a136:	189b      	adds	r3, r3, r2
 801a138:	643b      	str	r3, [r7, #64]	@ 0x40
 801a13a:	683b      	ldr	r3, [r7, #0]
 801a13c:	781b      	ldrb	r3, [r3, #0]
 801a13e:	00da      	lsls	r2, r3, #3
 801a140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a142:	18d3      	adds	r3, r2, r3
 801a144:	4a33      	ldr	r2, [pc, #204]	@ (801a214 <USB_EPStartXfer+0x750>)
 801a146:	4694      	mov	ip, r2
 801a148:	4463      	add	r3, ip
 801a14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a14c:	1d7b      	adds	r3, r7, #5
 801a14e:	33ff      	adds	r3, #255	@ 0xff
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	b29a      	uxth	r2, r3
 801a154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a156:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801a158:	2076      	movs	r0, #118	@ 0x76
 801a15a:	183b      	adds	r3, r7, r0
 801a15c:	683a      	ldr	r2, [r7, #0]
 801a15e:	8952      	ldrh	r2, [r2, #10]
 801a160:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a162:	683b      	ldr	r3, [r7, #0]
 801a164:	6959      	ldr	r1, [r3, #20]
 801a166:	1d7b      	adds	r3, r7, #5
 801a168:	33ff      	adds	r3, #255	@ 0xff
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	b29c      	uxth	r4, r3
 801a16e:	183b      	adds	r3, r7, r0
 801a170:	881a      	ldrh	r2, [r3, #0]
 801a172:	6878      	ldr	r0, [r7, #4]
 801a174:	0023      	movs	r3, r4
 801a176:	f000 ff17 	bl	801afa8 <USB_WritePMA>
 801a17a:	e1b6      	b.n	801a4ea <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 801a17c:	683b      	ldr	r3, [r7, #0]
 801a17e:	6a1b      	ldr	r3, [r3, #32]
 801a180:	1d7a      	adds	r2, r7, #5
 801a182:	32ff      	adds	r2, #255	@ 0xff
 801a184:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801a186:	687a      	ldr	r2, [r7, #4]
 801a188:	683b      	ldr	r3, [r7, #0]
 801a18a:	781b      	ldrb	r3, [r3, #0]
 801a18c:	009b      	lsls	r3, r3, #2
 801a18e:	18d3      	adds	r3, r2, r3
 801a190:	881b      	ldrh	r3, [r3, #0]
 801a192:	b29a      	uxth	r2, r3
 801a194:	2062      	movs	r0, #98	@ 0x62
 801a196:	183b      	adds	r3, r7, r0
 801a198:	491f      	ldr	r1, [pc, #124]	@ (801a218 <USB_EPStartXfer+0x754>)
 801a19a:	400a      	ands	r2, r1
 801a19c:	801a      	strh	r2, [r3, #0]
 801a19e:	687a      	ldr	r2, [r7, #4]
 801a1a0:	683b      	ldr	r3, [r7, #0]
 801a1a2:	781b      	ldrb	r3, [r3, #0]
 801a1a4:	009b      	lsls	r3, r3, #2
 801a1a6:	18d3      	adds	r3, r2, r3
 801a1a8:	183a      	adds	r2, r7, r0
 801a1aa:	8812      	ldrh	r2, [r2, #0]
 801a1ac:	491b      	ldr	r1, [pc, #108]	@ (801a21c <USB_EPStartXfer+0x758>)
 801a1ae:	430a      	orrs	r2, r1
 801a1b0:	b292      	uxth	r2, r2
 801a1b2:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	2250      	movs	r2, #80	@ 0x50
 801a1bc:	5a9b      	ldrh	r3, [r3, r2]
 801a1be:	b29b      	uxth	r3, r3
 801a1c0:	001a      	movs	r2, r3
 801a1c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a1c4:	189b      	adds	r3, r3, r2
 801a1c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a1c8:	683b      	ldr	r3, [r7, #0]
 801a1ca:	781b      	ldrb	r3, [r3, #0]
 801a1cc:	00da      	lsls	r2, r3, #3
 801a1ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a1d0:	18d3      	adds	r3, r2, r3
 801a1d2:	4a0e      	ldr	r2, [pc, #56]	@ (801a20c <USB_EPStartXfer+0x748>)
 801a1d4:	4694      	mov	ip, r2
 801a1d6:	4463      	add	r3, ip
 801a1d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a1da:	1d7b      	adds	r3, r7, #5
 801a1dc:	33ff      	adds	r3, #255	@ 0xff
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	b29a      	uxth	r2, r3
 801a1e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a1e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a1e6:	2076      	movs	r0, #118	@ 0x76
 801a1e8:	183b      	adds	r3, r7, r0
 801a1ea:	683a      	ldr	r2, [r7, #0]
 801a1ec:	8912      	ldrh	r2, [r2, #8]
 801a1ee:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a1f0:	683b      	ldr	r3, [r7, #0]
 801a1f2:	6959      	ldr	r1, [r3, #20]
 801a1f4:	1d7b      	adds	r3, r7, #5
 801a1f6:	33ff      	adds	r3, #255	@ 0xff
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	b29c      	uxth	r4, r3
 801a1fc:	183b      	adds	r3, r7, r0
 801a1fe:	881a      	ldrh	r2, [r3, #0]
 801a200:	6878      	ldr	r0, [r7, #4]
 801a202:	0023      	movs	r3, r4
 801a204:	f000 fed0 	bl	801afa8 <USB_WritePMA>
 801a208:	e16f      	b.n	801a4ea <USB_EPStartXfer+0xa26>
 801a20a:	46c0      	nop			@ (mov r8, r8)
 801a20c:	00000402 	.word	0x00000402
 801a210:	ffff8000 	.word	0xffff8000
 801a214:	00000406 	.word	0x00000406
 801a218:	ffff8e8f 	.word	0xffff8e8f
 801a21c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801a220:	683b      	ldr	r3, [r7, #0]
 801a222:	6a1a      	ldr	r2, [r3, #32]
 801a224:	1d7b      	adds	r3, r7, #5
 801a226:	33ff      	adds	r3, #255	@ 0xff
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	1ad2      	subs	r2, r2, r3
 801a22c:	683b      	ldr	r3, [r7, #0]
 801a22e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801a230:	687a      	ldr	r2, [r7, #4]
 801a232:	683b      	ldr	r3, [r7, #0]
 801a234:	781b      	ldrb	r3, [r3, #0]
 801a236:	009b      	lsls	r3, r3, #2
 801a238:	18d3      	adds	r3, r2, r3
 801a23a:	881b      	ldrh	r3, [r3, #0]
 801a23c:	b29b      	uxth	r3, r3
 801a23e:	001a      	movs	r2, r3
 801a240:	2340      	movs	r3, #64	@ 0x40
 801a242:	4013      	ands	r3, r2
 801a244:	d100      	bne.n	801a248 <USB_EPStartXfer+0x784>
 801a246:	e0a4      	b.n	801a392 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	673b      	str	r3, [r7, #112]	@ 0x70
 801a24c:	683b      	ldr	r3, [r7, #0]
 801a24e:	785b      	ldrb	r3, [r3, #1]
 801a250:	2b00      	cmp	r3, #0
 801a252:	d000      	beq.n	801a256 <USB_EPStartXfer+0x792>
 801a254:	e070      	b.n	801a338 <USB_EPStartXfer+0x874>
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	2250      	movs	r2, #80	@ 0x50
 801a25e:	5a9b      	ldrh	r3, [r3, r2]
 801a260:	b29b      	uxth	r3, r3
 801a262:	001a      	movs	r2, r3
 801a264:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a266:	189b      	adds	r3, r3, r2
 801a268:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a26a:	683b      	ldr	r3, [r7, #0]
 801a26c:	781b      	ldrb	r3, [r3, #0]
 801a26e:	00da      	lsls	r2, r3, #3
 801a270:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a272:	18d3      	adds	r3, r2, r3
 801a274:	4abc      	ldr	r2, [pc, #752]	@ (801a568 <USB_EPStartXfer+0xaa4>)
 801a276:	4694      	mov	ip, r2
 801a278:	4463      	add	r3, ip
 801a27a:	667b      	str	r3, [r7, #100]	@ 0x64
 801a27c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a27e:	881b      	ldrh	r3, [r3, #0]
 801a280:	b29b      	uxth	r3, r3
 801a282:	059b      	lsls	r3, r3, #22
 801a284:	0d9b      	lsrs	r3, r3, #22
 801a286:	b29a      	uxth	r2, r3
 801a288:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a28a:	801a      	strh	r2, [r3, #0]
 801a28c:	1d7b      	adds	r3, r7, #5
 801a28e:	33ff      	adds	r3, #255	@ 0xff
 801a290:	681b      	ldr	r3, [r3, #0]
 801a292:	2b3e      	cmp	r3, #62	@ 0x3e
 801a294:	d922      	bls.n	801a2dc <USB_EPStartXfer+0x818>
 801a296:	1d7b      	adds	r3, r7, #5
 801a298:	33ff      	adds	r3, #255	@ 0xff
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	095b      	lsrs	r3, r3, #5
 801a29e:	21f0      	movs	r1, #240	@ 0xf0
 801a2a0:	187a      	adds	r2, r7, r1
 801a2a2:	6013      	str	r3, [r2, #0]
 801a2a4:	1d7b      	adds	r3, r7, #5
 801a2a6:	33ff      	adds	r3, #255	@ 0xff
 801a2a8:	681b      	ldr	r3, [r3, #0]
 801a2aa:	221f      	movs	r2, #31
 801a2ac:	4013      	ands	r3, r2
 801a2ae:	d104      	bne.n	801a2ba <USB_EPStartXfer+0x7f6>
 801a2b0:	187b      	adds	r3, r7, r1
 801a2b2:	681b      	ldr	r3, [r3, #0]
 801a2b4:	3b01      	subs	r3, #1
 801a2b6:	187a      	adds	r2, r7, r1
 801a2b8:	6013      	str	r3, [r2, #0]
 801a2ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a2bc:	881b      	ldrh	r3, [r3, #0]
 801a2be:	b29a      	uxth	r2, r3
 801a2c0:	23f0      	movs	r3, #240	@ 0xf0
 801a2c2:	18fb      	adds	r3, r7, r3
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	b29b      	uxth	r3, r3
 801a2c8:	029b      	lsls	r3, r3, #10
 801a2ca:	b29b      	uxth	r3, r3
 801a2cc:	4313      	orrs	r3, r2
 801a2ce:	b29b      	uxth	r3, r3
 801a2d0:	4aa6      	ldr	r2, [pc, #664]	@ (801a56c <USB_EPStartXfer+0xaa8>)
 801a2d2:	4313      	orrs	r3, r2
 801a2d4:	b29a      	uxth	r2, r3
 801a2d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a2d8:	801a      	strh	r2, [r3, #0]
 801a2da:	e048      	b.n	801a36e <USB_EPStartXfer+0x8aa>
 801a2dc:	1d7b      	adds	r3, r7, #5
 801a2de:	33ff      	adds	r3, #255	@ 0xff
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d108      	bne.n	801a2f8 <USB_EPStartXfer+0x834>
 801a2e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a2e8:	881b      	ldrh	r3, [r3, #0]
 801a2ea:	b29b      	uxth	r3, r3
 801a2ec:	4a9f      	ldr	r2, [pc, #636]	@ (801a56c <USB_EPStartXfer+0xaa8>)
 801a2ee:	4313      	orrs	r3, r2
 801a2f0:	b29a      	uxth	r2, r3
 801a2f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a2f4:	801a      	strh	r2, [r3, #0]
 801a2f6:	e03a      	b.n	801a36e <USB_EPStartXfer+0x8aa>
 801a2f8:	1d7b      	adds	r3, r7, #5
 801a2fa:	33ff      	adds	r3, #255	@ 0xff
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	085b      	lsrs	r3, r3, #1
 801a300:	21f0      	movs	r1, #240	@ 0xf0
 801a302:	187a      	adds	r2, r7, r1
 801a304:	6013      	str	r3, [r2, #0]
 801a306:	1d7b      	adds	r3, r7, #5
 801a308:	33ff      	adds	r3, #255	@ 0xff
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	2201      	movs	r2, #1
 801a30e:	4013      	ands	r3, r2
 801a310:	d004      	beq.n	801a31c <USB_EPStartXfer+0x858>
 801a312:	187b      	adds	r3, r7, r1
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	3301      	adds	r3, #1
 801a318:	187a      	adds	r2, r7, r1
 801a31a:	6013      	str	r3, [r2, #0]
 801a31c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a31e:	881b      	ldrh	r3, [r3, #0]
 801a320:	b29a      	uxth	r2, r3
 801a322:	23f0      	movs	r3, #240	@ 0xf0
 801a324:	18fb      	adds	r3, r7, r3
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	b29b      	uxth	r3, r3
 801a32a:	029b      	lsls	r3, r3, #10
 801a32c:	b29b      	uxth	r3, r3
 801a32e:	4313      	orrs	r3, r2
 801a330:	b29a      	uxth	r2, r3
 801a332:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a334:	801a      	strh	r2, [r3, #0]
 801a336:	e01a      	b.n	801a36e <USB_EPStartXfer+0x8aa>
 801a338:	683b      	ldr	r3, [r7, #0]
 801a33a:	785b      	ldrb	r3, [r3, #1]
 801a33c:	2b01      	cmp	r3, #1
 801a33e:	d116      	bne.n	801a36e <USB_EPStartXfer+0x8aa>
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	2250      	movs	r2, #80	@ 0x50
 801a344:	5a9b      	ldrh	r3, [r3, r2]
 801a346:	b29b      	uxth	r3, r3
 801a348:	001a      	movs	r2, r3
 801a34a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a34c:	189b      	adds	r3, r3, r2
 801a34e:	673b      	str	r3, [r7, #112]	@ 0x70
 801a350:	683b      	ldr	r3, [r7, #0]
 801a352:	781b      	ldrb	r3, [r3, #0]
 801a354:	00da      	lsls	r2, r3, #3
 801a356:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a358:	18d3      	adds	r3, r2, r3
 801a35a:	4a83      	ldr	r2, [pc, #524]	@ (801a568 <USB_EPStartXfer+0xaa4>)
 801a35c:	4694      	mov	ip, r2
 801a35e:	4463      	add	r3, ip
 801a360:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801a362:	1d7b      	adds	r3, r7, #5
 801a364:	33ff      	adds	r3, #255	@ 0xff
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	b29a      	uxth	r2, r3
 801a36a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a36c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801a36e:	2076      	movs	r0, #118	@ 0x76
 801a370:	183b      	adds	r3, r7, r0
 801a372:	683a      	ldr	r2, [r7, #0]
 801a374:	8952      	ldrh	r2, [r2, #10]
 801a376:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a378:	683b      	ldr	r3, [r7, #0]
 801a37a:	6959      	ldr	r1, [r3, #20]
 801a37c:	1d7b      	adds	r3, r7, #5
 801a37e:	33ff      	adds	r3, #255	@ 0xff
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	b29c      	uxth	r4, r3
 801a384:	183b      	adds	r3, r7, r0
 801a386:	881a      	ldrh	r2, [r3, #0]
 801a388:	6878      	ldr	r0, [r7, #4]
 801a38a:	0023      	movs	r3, r4
 801a38c:	f000 fe0c 	bl	801afa8 <USB_WritePMA>
 801a390:	e0ab      	b.n	801a4ea <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801a392:	683b      	ldr	r3, [r7, #0]
 801a394:	785b      	ldrb	r3, [r3, #1]
 801a396:	2b00      	cmp	r3, #0
 801a398:	d000      	beq.n	801a39c <USB_EPStartXfer+0x8d8>
 801a39a:	e070      	b.n	801a47e <USB_EPStartXfer+0x9ba>
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	2250      	movs	r2, #80	@ 0x50
 801a3a4:	5a9b      	ldrh	r3, [r3, r2]
 801a3a6:	b29b      	uxth	r3, r3
 801a3a8:	001a      	movs	r2, r3
 801a3aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a3ac:	189b      	adds	r3, r3, r2
 801a3ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a3b0:	683b      	ldr	r3, [r7, #0]
 801a3b2:	781b      	ldrb	r3, [r3, #0]
 801a3b4:	00da      	lsls	r2, r3, #3
 801a3b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a3b8:	18d3      	adds	r3, r2, r3
 801a3ba:	4a6d      	ldr	r2, [pc, #436]	@ (801a570 <USB_EPStartXfer+0xaac>)
 801a3bc:	4694      	mov	ip, r2
 801a3be:	4463      	add	r3, ip
 801a3c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a3c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a3c4:	881b      	ldrh	r3, [r3, #0]
 801a3c6:	b29b      	uxth	r3, r3
 801a3c8:	059b      	lsls	r3, r3, #22
 801a3ca:	0d9b      	lsrs	r3, r3, #22
 801a3cc:	b29a      	uxth	r2, r3
 801a3ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a3d0:	801a      	strh	r2, [r3, #0]
 801a3d2:	1d7b      	adds	r3, r7, #5
 801a3d4:	33ff      	adds	r3, #255	@ 0xff
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	2b3e      	cmp	r3, #62	@ 0x3e
 801a3da:	d922      	bls.n	801a422 <USB_EPStartXfer+0x95e>
 801a3dc:	1d7b      	adds	r3, r7, #5
 801a3de:	33ff      	adds	r3, #255	@ 0xff
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	095b      	lsrs	r3, r3, #5
 801a3e4:	21ec      	movs	r1, #236	@ 0xec
 801a3e6:	187a      	adds	r2, r7, r1
 801a3e8:	6013      	str	r3, [r2, #0]
 801a3ea:	1d7b      	adds	r3, r7, #5
 801a3ec:	33ff      	adds	r3, #255	@ 0xff
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	221f      	movs	r2, #31
 801a3f2:	4013      	ands	r3, r2
 801a3f4:	d104      	bne.n	801a400 <USB_EPStartXfer+0x93c>
 801a3f6:	187b      	adds	r3, r7, r1
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	3b01      	subs	r3, #1
 801a3fc:	187a      	adds	r2, r7, r1
 801a3fe:	6013      	str	r3, [r2, #0]
 801a400:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a402:	881b      	ldrh	r3, [r3, #0]
 801a404:	b29a      	uxth	r2, r3
 801a406:	23ec      	movs	r3, #236	@ 0xec
 801a408:	18fb      	adds	r3, r7, r3
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	b29b      	uxth	r3, r3
 801a40e:	029b      	lsls	r3, r3, #10
 801a410:	b29b      	uxth	r3, r3
 801a412:	4313      	orrs	r3, r2
 801a414:	b29b      	uxth	r3, r3
 801a416:	4a55      	ldr	r2, [pc, #340]	@ (801a56c <USB_EPStartXfer+0xaa8>)
 801a418:	4313      	orrs	r3, r2
 801a41a:	b29a      	uxth	r2, r3
 801a41c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a41e:	801a      	strh	r2, [r3, #0]
 801a420:	e052      	b.n	801a4c8 <USB_EPStartXfer+0xa04>
 801a422:	1d7b      	adds	r3, r7, #5
 801a424:	33ff      	adds	r3, #255	@ 0xff
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d108      	bne.n	801a43e <USB_EPStartXfer+0x97a>
 801a42c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a42e:	881b      	ldrh	r3, [r3, #0]
 801a430:	b29b      	uxth	r3, r3
 801a432:	4a4e      	ldr	r2, [pc, #312]	@ (801a56c <USB_EPStartXfer+0xaa8>)
 801a434:	4313      	orrs	r3, r2
 801a436:	b29a      	uxth	r2, r3
 801a438:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a43a:	801a      	strh	r2, [r3, #0]
 801a43c:	e044      	b.n	801a4c8 <USB_EPStartXfer+0xa04>
 801a43e:	1d7b      	adds	r3, r7, #5
 801a440:	33ff      	adds	r3, #255	@ 0xff
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	085b      	lsrs	r3, r3, #1
 801a446:	21ec      	movs	r1, #236	@ 0xec
 801a448:	187a      	adds	r2, r7, r1
 801a44a:	6013      	str	r3, [r2, #0]
 801a44c:	1d7b      	adds	r3, r7, #5
 801a44e:	33ff      	adds	r3, #255	@ 0xff
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	2201      	movs	r2, #1
 801a454:	4013      	ands	r3, r2
 801a456:	d004      	beq.n	801a462 <USB_EPStartXfer+0x99e>
 801a458:	187b      	adds	r3, r7, r1
 801a45a:	681b      	ldr	r3, [r3, #0]
 801a45c:	3301      	adds	r3, #1
 801a45e:	187a      	adds	r2, r7, r1
 801a460:	6013      	str	r3, [r2, #0]
 801a462:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a464:	881b      	ldrh	r3, [r3, #0]
 801a466:	b29a      	uxth	r2, r3
 801a468:	23ec      	movs	r3, #236	@ 0xec
 801a46a:	18fb      	adds	r3, r7, r3
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	b29b      	uxth	r3, r3
 801a470:	029b      	lsls	r3, r3, #10
 801a472:	b29b      	uxth	r3, r3
 801a474:	4313      	orrs	r3, r2
 801a476:	b29a      	uxth	r2, r3
 801a478:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a47a:	801a      	strh	r2, [r3, #0]
 801a47c:	e024      	b.n	801a4c8 <USB_EPStartXfer+0xa04>
 801a47e:	683b      	ldr	r3, [r7, #0]
 801a480:	785b      	ldrb	r3, [r3, #1]
 801a482:	2b01      	cmp	r3, #1
 801a484:	d120      	bne.n	801a4c8 <USB_EPStartXfer+0xa04>
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	2184      	movs	r1, #132	@ 0x84
 801a48a:	187a      	adds	r2, r7, r1
 801a48c:	6013      	str	r3, [r2, #0]
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	2250      	movs	r2, #80	@ 0x50
 801a492:	5a9b      	ldrh	r3, [r3, r2]
 801a494:	b29b      	uxth	r3, r3
 801a496:	001a      	movs	r2, r3
 801a498:	187b      	adds	r3, r7, r1
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	189b      	adds	r3, r3, r2
 801a49e:	187a      	adds	r2, r7, r1
 801a4a0:	6013      	str	r3, [r2, #0]
 801a4a2:	683b      	ldr	r3, [r7, #0]
 801a4a4:	781b      	ldrb	r3, [r3, #0]
 801a4a6:	00da      	lsls	r2, r3, #3
 801a4a8:	187b      	adds	r3, r7, r1
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	18d3      	adds	r3, r2, r3
 801a4ae:	4a30      	ldr	r2, [pc, #192]	@ (801a570 <USB_EPStartXfer+0xaac>)
 801a4b0:	4694      	mov	ip, r2
 801a4b2:	4463      	add	r3, ip
 801a4b4:	2180      	movs	r1, #128	@ 0x80
 801a4b6:	187a      	adds	r2, r7, r1
 801a4b8:	6013      	str	r3, [r2, #0]
 801a4ba:	1d7b      	adds	r3, r7, #5
 801a4bc:	33ff      	adds	r3, #255	@ 0xff
 801a4be:	681b      	ldr	r3, [r3, #0]
 801a4c0:	b29a      	uxth	r2, r3
 801a4c2:	187b      	adds	r3, r7, r1
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801a4c8:	2076      	movs	r0, #118	@ 0x76
 801a4ca:	183b      	adds	r3, r7, r0
 801a4cc:	683a      	ldr	r2, [r7, #0]
 801a4ce:	8912      	ldrh	r2, [r2, #8]
 801a4d0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801a4d2:	683b      	ldr	r3, [r7, #0]
 801a4d4:	6959      	ldr	r1, [r3, #20]
 801a4d6:	1d7b      	adds	r3, r7, #5
 801a4d8:	33ff      	adds	r3, #255	@ 0xff
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	b29c      	uxth	r4, r3
 801a4de:	183b      	adds	r3, r7, r0
 801a4e0:	881a      	ldrh	r2, [r3, #0]
 801a4e2:	6878      	ldr	r0, [r7, #4]
 801a4e4:	0023      	movs	r3, r4
 801a4e6:	f000 fd5f 	bl	801afa8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801a4ea:	687a      	ldr	r2, [r7, #4]
 801a4ec:	683b      	ldr	r3, [r7, #0]
 801a4ee:	781b      	ldrb	r3, [r3, #0]
 801a4f0:	009b      	lsls	r3, r3, #2
 801a4f2:	18d3      	adds	r3, r2, r3
 801a4f4:	881b      	ldrh	r3, [r3, #0]
 801a4f6:	b29a      	uxth	r2, r3
 801a4f8:	200a      	movs	r0, #10
 801a4fa:	183b      	adds	r3, r7, r0
 801a4fc:	491d      	ldr	r1, [pc, #116]	@ (801a574 <USB_EPStartXfer+0xab0>)
 801a4fe:	400a      	ands	r2, r1
 801a500:	801a      	strh	r2, [r3, #0]
 801a502:	183b      	adds	r3, r7, r0
 801a504:	183a      	adds	r2, r7, r0
 801a506:	8812      	ldrh	r2, [r2, #0]
 801a508:	2110      	movs	r1, #16
 801a50a:	404a      	eors	r2, r1
 801a50c:	801a      	strh	r2, [r3, #0]
 801a50e:	183b      	adds	r3, r7, r0
 801a510:	183a      	adds	r2, r7, r0
 801a512:	8812      	ldrh	r2, [r2, #0]
 801a514:	2120      	movs	r1, #32
 801a516:	404a      	eors	r2, r1
 801a518:	801a      	strh	r2, [r3, #0]
 801a51a:	687a      	ldr	r2, [r7, #4]
 801a51c:	683b      	ldr	r3, [r7, #0]
 801a51e:	781b      	ldrb	r3, [r3, #0]
 801a520:	009b      	lsls	r3, r3, #2
 801a522:	18d3      	adds	r3, r2, r3
 801a524:	183a      	adds	r2, r7, r0
 801a526:	8812      	ldrh	r2, [r2, #0]
 801a528:	4913      	ldr	r1, [pc, #76]	@ (801a578 <USB_EPStartXfer+0xab4>)
 801a52a:	430a      	orrs	r2, r1
 801a52c:	b292      	uxth	r2, r2
 801a52e:	801a      	strh	r2, [r3, #0]
 801a530:	f000 fbf4 	bl	801ad1c <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801a534:	683b      	ldr	r3, [r7, #0]
 801a536:	7b1b      	ldrb	r3, [r3, #12]
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d000      	beq.n	801a53e <USB_EPStartXfer+0xa7a>
 801a53c:	e0a9      	b.n	801a692 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801a53e:	683b      	ldr	r3, [r7, #0]
 801a540:	699a      	ldr	r2, [r3, #24]
 801a542:	683b      	ldr	r3, [r7, #0]
 801a544:	691b      	ldr	r3, [r3, #16]
 801a546:	429a      	cmp	r2, r3
 801a548:	d918      	bls.n	801a57c <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 801a54a:	683b      	ldr	r3, [r7, #0]
 801a54c:	691b      	ldr	r3, [r3, #16]
 801a54e:	1d7a      	adds	r2, r7, #5
 801a550:	32ff      	adds	r2, #255	@ 0xff
 801a552:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801a554:	683b      	ldr	r3, [r7, #0]
 801a556:	699a      	ldr	r2, [r3, #24]
 801a558:	1d7b      	adds	r3, r7, #5
 801a55a:	33ff      	adds	r3, #255	@ 0xff
 801a55c:	681b      	ldr	r3, [r3, #0]
 801a55e:	1ad2      	subs	r2, r2, r3
 801a560:	683b      	ldr	r3, [r7, #0]
 801a562:	619a      	str	r2, [r3, #24]
 801a564:	e012      	b.n	801a58c <USB_EPStartXfer+0xac8>
 801a566:	46c0      	nop			@ (mov r8, r8)
 801a568:	00000406 	.word	0x00000406
 801a56c:	ffff8000 	.word	0xffff8000
 801a570:	00000402 	.word	0x00000402
 801a574:	ffff8fbf 	.word	0xffff8fbf
 801a578:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 801a57c:	683b      	ldr	r3, [r7, #0]
 801a57e:	699b      	ldr	r3, [r3, #24]
 801a580:	1d7a      	adds	r2, r7, #5
 801a582:	32ff      	adds	r2, #255	@ 0xff
 801a584:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 801a586:	683b      	ldr	r3, [r7, #0]
 801a588:	2200      	movs	r2, #0
 801a58a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	2190      	movs	r1, #144	@ 0x90
 801a590:	187a      	adds	r2, r7, r1
 801a592:	6013      	str	r3, [r2, #0]
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	2250      	movs	r2, #80	@ 0x50
 801a598:	5a9b      	ldrh	r3, [r3, r2]
 801a59a:	b29b      	uxth	r3, r3
 801a59c:	001a      	movs	r2, r3
 801a59e:	187b      	adds	r3, r7, r1
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	189b      	adds	r3, r3, r2
 801a5a4:	187a      	adds	r2, r7, r1
 801a5a6:	6013      	str	r3, [r2, #0]
 801a5a8:	683b      	ldr	r3, [r7, #0]
 801a5aa:	781b      	ldrb	r3, [r3, #0]
 801a5ac:	00da      	lsls	r2, r3, #3
 801a5ae:	187b      	adds	r3, r7, r1
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	18d3      	adds	r3, r2, r3
 801a5b4:	4acf      	ldr	r2, [pc, #828]	@ (801a8f4 <USB_EPStartXfer+0xe30>)
 801a5b6:	4694      	mov	ip, r2
 801a5b8:	4463      	add	r3, ip
 801a5ba:	218c      	movs	r1, #140	@ 0x8c
 801a5bc:	187a      	adds	r2, r7, r1
 801a5be:	6013      	str	r3, [r2, #0]
 801a5c0:	187b      	adds	r3, r7, r1
 801a5c2:	681b      	ldr	r3, [r3, #0]
 801a5c4:	881b      	ldrh	r3, [r3, #0]
 801a5c6:	b29b      	uxth	r3, r3
 801a5c8:	059b      	lsls	r3, r3, #22
 801a5ca:	0d9b      	lsrs	r3, r3, #22
 801a5cc:	b29a      	uxth	r2, r3
 801a5ce:	187b      	adds	r3, r7, r1
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	801a      	strh	r2, [r3, #0]
 801a5d4:	1d7b      	adds	r3, r7, #5
 801a5d6:	33ff      	adds	r3, #255	@ 0xff
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	2b3e      	cmp	r3, #62	@ 0x3e
 801a5dc:	d925      	bls.n	801a62a <USB_EPStartXfer+0xb66>
 801a5de:	1d7b      	adds	r3, r7, #5
 801a5e0:	33ff      	adds	r3, #255	@ 0xff
 801a5e2:	681b      	ldr	r3, [r3, #0]
 801a5e4:	095b      	lsrs	r3, r3, #5
 801a5e6:	21e8      	movs	r1, #232	@ 0xe8
 801a5e8:	187a      	adds	r2, r7, r1
 801a5ea:	6013      	str	r3, [r2, #0]
 801a5ec:	1d7b      	adds	r3, r7, #5
 801a5ee:	33ff      	adds	r3, #255	@ 0xff
 801a5f0:	681b      	ldr	r3, [r3, #0]
 801a5f2:	221f      	movs	r2, #31
 801a5f4:	4013      	ands	r3, r2
 801a5f6:	d104      	bne.n	801a602 <USB_EPStartXfer+0xb3e>
 801a5f8:	187b      	adds	r3, r7, r1
 801a5fa:	681b      	ldr	r3, [r3, #0]
 801a5fc:	3b01      	subs	r3, #1
 801a5fe:	187a      	adds	r2, r7, r1
 801a600:	6013      	str	r3, [r2, #0]
 801a602:	218c      	movs	r1, #140	@ 0x8c
 801a604:	187b      	adds	r3, r7, r1
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	881b      	ldrh	r3, [r3, #0]
 801a60a:	b29a      	uxth	r2, r3
 801a60c:	23e8      	movs	r3, #232	@ 0xe8
 801a60e:	18fb      	adds	r3, r7, r3
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	b29b      	uxth	r3, r3
 801a614:	029b      	lsls	r3, r3, #10
 801a616:	b29b      	uxth	r3, r3
 801a618:	4313      	orrs	r3, r2
 801a61a:	b29b      	uxth	r3, r3
 801a61c:	4ab6      	ldr	r2, [pc, #728]	@ (801a8f8 <USB_EPStartXfer+0xe34>)
 801a61e:	4313      	orrs	r3, r2
 801a620:	b29a      	uxth	r2, r3
 801a622:	187b      	adds	r3, r7, r1
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	801a      	strh	r2, [r3, #0]
 801a628:	e353      	b.n	801acd2 <USB_EPStartXfer+0x120e>
 801a62a:	1d7b      	adds	r3, r7, #5
 801a62c:	33ff      	adds	r3, #255	@ 0xff
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	2b00      	cmp	r3, #0
 801a632:	d10b      	bne.n	801a64c <USB_EPStartXfer+0xb88>
 801a634:	218c      	movs	r1, #140	@ 0x8c
 801a636:	187b      	adds	r3, r7, r1
 801a638:	681b      	ldr	r3, [r3, #0]
 801a63a:	881b      	ldrh	r3, [r3, #0]
 801a63c:	b29b      	uxth	r3, r3
 801a63e:	4aae      	ldr	r2, [pc, #696]	@ (801a8f8 <USB_EPStartXfer+0xe34>)
 801a640:	4313      	orrs	r3, r2
 801a642:	b29a      	uxth	r2, r3
 801a644:	187b      	adds	r3, r7, r1
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	801a      	strh	r2, [r3, #0]
 801a64a:	e342      	b.n	801acd2 <USB_EPStartXfer+0x120e>
 801a64c:	1d7b      	adds	r3, r7, #5
 801a64e:	33ff      	adds	r3, #255	@ 0xff
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	085b      	lsrs	r3, r3, #1
 801a654:	21e8      	movs	r1, #232	@ 0xe8
 801a656:	187a      	adds	r2, r7, r1
 801a658:	6013      	str	r3, [r2, #0]
 801a65a:	1d7b      	adds	r3, r7, #5
 801a65c:	33ff      	adds	r3, #255	@ 0xff
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	2201      	movs	r2, #1
 801a662:	4013      	ands	r3, r2
 801a664:	d004      	beq.n	801a670 <USB_EPStartXfer+0xbac>
 801a666:	187b      	adds	r3, r7, r1
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	3301      	adds	r3, #1
 801a66c:	187a      	adds	r2, r7, r1
 801a66e:	6013      	str	r3, [r2, #0]
 801a670:	218c      	movs	r1, #140	@ 0x8c
 801a672:	187b      	adds	r3, r7, r1
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	881b      	ldrh	r3, [r3, #0]
 801a678:	b29a      	uxth	r2, r3
 801a67a:	23e8      	movs	r3, #232	@ 0xe8
 801a67c:	18fb      	adds	r3, r7, r3
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	b29b      	uxth	r3, r3
 801a682:	029b      	lsls	r3, r3, #10
 801a684:	b29b      	uxth	r3, r3
 801a686:	4313      	orrs	r3, r2
 801a688:	b29a      	uxth	r2, r3
 801a68a:	187b      	adds	r3, r7, r1
 801a68c:	681b      	ldr	r3, [r3, #0]
 801a68e:	801a      	strh	r2, [r3, #0]
 801a690:	e31f      	b.n	801acd2 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801a692:	683b      	ldr	r3, [r7, #0]
 801a694:	78db      	ldrb	r3, [r3, #3]
 801a696:	2b02      	cmp	r3, #2
 801a698:	d000      	beq.n	801a69c <USB_EPStartXfer+0xbd8>
 801a69a:	e191      	b.n	801a9c0 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801a69c:	683b      	ldr	r3, [r7, #0]
 801a69e:	785b      	ldrb	r3, [r3, #1]
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	d000      	beq.n	801a6a6 <USB_EPStartXfer+0xbe2>
 801a6a4:	e07c      	b.n	801a7a0 <USB_EPStartXfer+0xcdc>
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	21ac      	movs	r1, #172	@ 0xac
 801a6aa:	187a      	adds	r2, r7, r1
 801a6ac:	6013      	str	r3, [r2, #0]
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	2250      	movs	r2, #80	@ 0x50
 801a6b2:	5a9b      	ldrh	r3, [r3, r2]
 801a6b4:	b29b      	uxth	r3, r3
 801a6b6:	001a      	movs	r2, r3
 801a6b8:	187b      	adds	r3, r7, r1
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	189b      	adds	r3, r3, r2
 801a6be:	187a      	adds	r2, r7, r1
 801a6c0:	6013      	str	r3, [r2, #0]
 801a6c2:	683b      	ldr	r3, [r7, #0]
 801a6c4:	781b      	ldrb	r3, [r3, #0]
 801a6c6:	00da      	lsls	r2, r3, #3
 801a6c8:	187b      	adds	r3, r7, r1
 801a6ca:	681b      	ldr	r3, [r3, #0]
 801a6cc:	18d3      	adds	r3, r2, r3
 801a6ce:	4a8b      	ldr	r2, [pc, #556]	@ (801a8fc <USB_EPStartXfer+0xe38>)
 801a6d0:	4694      	mov	ip, r2
 801a6d2:	4463      	add	r3, ip
 801a6d4:	21a8      	movs	r1, #168	@ 0xa8
 801a6d6:	187a      	adds	r2, r7, r1
 801a6d8:	6013      	str	r3, [r2, #0]
 801a6da:	187b      	adds	r3, r7, r1
 801a6dc:	681b      	ldr	r3, [r3, #0]
 801a6de:	881b      	ldrh	r3, [r3, #0]
 801a6e0:	b29b      	uxth	r3, r3
 801a6e2:	059b      	lsls	r3, r3, #22
 801a6e4:	0d9b      	lsrs	r3, r3, #22
 801a6e6:	b29a      	uxth	r2, r3
 801a6e8:	187b      	adds	r3, r7, r1
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	801a      	strh	r2, [r3, #0]
 801a6ee:	683b      	ldr	r3, [r7, #0]
 801a6f0:	691b      	ldr	r3, [r3, #16]
 801a6f2:	2b3e      	cmp	r3, #62	@ 0x3e
 801a6f4:	d923      	bls.n	801a73e <USB_EPStartXfer+0xc7a>
 801a6f6:	683b      	ldr	r3, [r7, #0]
 801a6f8:	691b      	ldr	r3, [r3, #16]
 801a6fa:	095b      	lsrs	r3, r3, #5
 801a6fc:	21e4      	movs	r1, #228	@ 0xe4
 801a6fe:	187a      	adds	r2, r7, r1
 801a700:	6013      	str	r3, [r2, #0]
 801a702:	683b      	ldr	r3, [r7, #0]
 801a704:	691b      	ldr	r3, [r3, #16]
 801a706:	221f      	movs	r2, #31
 801a708:	4013      	ands	r3, r2
 801a70a:	d104      	bne.n	801a716 <USB_EPStartXfer+0xc52>
 801a70c:	187b      	adds	r3, r7, r1
 801a70e:	681b      	ldr	r3, [r3, #0]
 801a710:	3b01      	subs	r3, #1
 801a712:	187a      	adds	r2, r7, r1
 801a714:	6013      	str	r3, [r2, #0]
 801a716:	21a8      	movs	r1, #168	@ 0xa8
 801a718:	187b      	adds	r3, r7, r1
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	881b      	ldrh	r3, [r3, #0]
 801a71e:	b29a      	uxth	r2, r3
 801a720:	23e4      	movs	r3, #228	@ 0xe4
 801a722:	18fb      	adds	r3, r7, r3
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	b29b      	uxth	r3, r3
 801a728:	029b      	lsls	r3, r3, #10
 801a72a:	b29b      	uxth	r3, r3
 801a72c:	4313      	orrs	r3, r2
 801a72e:	b29b      	uxth	r3, r3
 801a730:	4a71      	ldr	r2, [pc, #452]	@ (801a8f8 <USB_EPStartXfer+0xe34>)
 801a732:	4313      	orrs	r3, r2
 801a734:	b29a      	uxth	r2, r3
 801a736:	187b      	adds	r3, r7, r1
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	801a      	strh	r2, [r3, #0]
 801a73c:	e054      	b.n	801a7e8 <USB_EPStartXfer+0xd24>
 801a73e:	683b      	ldr	r3, [r7, #0]
 801a740:	691b      	ldr	r3, [r3, #16]
 801a742:	2b00      	cmp	r3, #0
 801a744:	d10b      	bne.n	801a75e <USB_EPStartXfer+0xc9a>
 801a746:	21a8      	movs	r1, #168	@ 0xa8
 801a748:	187b      	adds	r3, r7, r1
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	881b      	ldrh	r3, [r3, #0]
 801a74e:	b29b      	uxth	r3, r3
 801a750:	4a69      	ldr	r2, [pc, #420]	@ (801a8f8 <USB_EPStartXfer+0xe34>)
 801a752:	4313      	orrs	r3, r2
 801a754:	b29a      	uxth	r2, r3
 801a756:	187b      	adds	r3, r7, r1
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	801a      	strh	r2, [r3, #0]
 801a75c:	e044      	b.n	801a7e8 <USB_EPStartXfer+0xd24>
 801a75e:	683b      	ldr	r3, [r7, #0]
 801a760:	691b      	ldr	r3, [r3, #16]
 801a762:	085b      	lsrs	r3, r3, #1
 801a764:	21e4      	movs	r1, #228	@ 0xe4
 801a766:	187a      	adds	r2, r7, r1
 801a768:	6013      	str	r3, [r2, #0]
 801a76a:	683b      	ldr	r3, [r7, #0]
 801a76c:	691b      	ldr	r3, [r3, #16]
 801a76e:	2201      	movs	r2, #1
 801a770:	4013      	ands	r3, r2
 801a772:	d004      	beq.n	801a77e <USB_EPStartXfer+0xcba>
 801a774:	187b      	adds	r3, r7, r1
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	3301      	adds	r3, #1
 801a77a:	187a      	adds	r2, r7, r1
 801a77c:	6013      	str	r3, [r2, #0]
 801a77e:	21a8      	movs	r1, #168	@ 0xa8
 801a780:	187b      	adds	r3, r7, r1
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	881b      	ldrh	r3, [r3, #0]
 801a786:	b29a      	uxth	r2, r3
 801a788:	23e4      	movs	r3, #228	@ 0xe4
 801a78a:	18fb      	adds	r3, r7, r3
 801a78c:	681b      	ldr	r3, [r3, #0]
 801a78e:	b29b      	uxth	r3, r3
 801a790:	029b      	lsls	r3, r3, #10
 801a792:	b29b      	uxth	r3, r3
 801a794:	4313      	orrs	r3, r2
 801a796:	b29a      	uxth	r2, r3
 801a798:	187b      	adds	r3, r7, r1
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	801a      	strh	r2, [r3, #0]
 801a79e:	e023      	b.n	801a7e8 <USB_EPStartXfer+0xd24>
 801a7a0:	683b      	ldr	r3, [r7, #0]
 801a7a2:	785b      	ldrb	r3, [r3, #1]
 801a7a4:	2b01      	cmp	r3, #1
 801a7a6:	d11f      	bne.n	801a7e8 <USB_EPStartXfer+0xd24>
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	21b4      	movs	r1, #180	@ 0xb4
 801a7ac:	187a      	adds	r2, r7, r1
 801a7ae:	6013      	str	r3, [r2, #0]
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	2250      	movs	r2, #80	@ 0x50
 801a7b4:	5a9b      	ldrh	r3, [r3, r2]
 801a7b6:	b29b      	uxth	r3, r3
 801a7b8:	001a      	movs	r2, r3
 801a7ba:	187b      	adds	r3, r7, r1
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	189b      	adds	r3, r3, r2
 801a7c0:	187a      	adds	r2, r7, r1
 801a7c2:	6013      	str	r3, [r2, #0]
 801a7c4:	683b      	ldr	r3, [r7, #0]
 801a7c6:	781b      	ldrb	r3, [r3, #0]
 801a7c8:	00da      	lsls	r2, r3, #3
 801a7ca:	187b      	adds	r3, r7, r1
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	18d3      	adds	r3, r2, r3
 801a7d0:	4a4a      	ldr	r2, [pc, #296]	@ (801a8fc <USB_EPStartXfer+0xe38>)
 801a7d2:	4694      	mov	ip, r2
 801a7d4:	4463      	add	r3, ip
 801a7d6:	21b0      	movs	r1, #176	@ 0xb0
 801a7d8:	187a      	adds	r2, r7, r1
 801a7da:	6013      	str	r3, [r2, #0]
 801a7dc:	683b      	ldr	r3, [r7, #0]
 801a7de:	691b      	ldr	r3, [r3, #16]
 801a7e0:	b29a      	uxth	r2, r3
 801a7e2:	187b      	adds	r3, r7, r1
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	801a      	strh	r2, [r3, #0]
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	22a4      	movs	r2, #164	@ 0xa4
 801a7ec:	18ba      	adds	r2, r7, r2
 801a7ee:	6013      	str	r3, [r2, #0]
 801a7f0:	683b      	ldr	r3, [r7, #0]
 801a7f2:	785b      	ldrb	r3, [r3, #1]
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d000      	beq.n	801a7fa <USB_EPStartXfer+0xd36>
 801a7f8:	e082      	b.n	801a900 <USB_EPStartXfer+0xe3c>
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	219c      	movs	r1, #156	@ 0x9c
 801a7fe:	187a      	adds	r2, r7, r1
 801a800:	6013      	str	r3, [r2, #0]
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	2250      	movs	r2, #80	@ 0x50
 801a806:	5a9b      	ldrh	r3, [r3, r2]
 801a808:	b29b      	uxth	r3, r3
 801a80a:	001a      	movs	r2, r3
 801a80c:	187b      	adds	r3, r7, r1
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	189b      	adds	r3, r3, r2
 801a812:	187a      	adds	r2, r7, r1
 801a814:	6013      	str	r3, [r2, #0]
 801a816:	683b      	ldr	r3, [r7, #0]
 801a818:	781b      	ldrb	r3, [r3, #0]
 801a81a:	00da      	lsls	r2, r3, #3
 801a81c:	187b      	adds	r3, r7, r1
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	18d3      	adds	r3, r2, r3
 801a822:	4a34      	ldr	r2, [pc, #208]	@ (801a8f4 <USB_EPStartXfer+0xe30>)
 801a824:	4694      	mov	ip, r2
 801a826:	4463      	add	r3, ip
 801a828:	2198      	movs	r1, #152	@ 0x98
 801a82a:	187a      	adds	r2, r7, r1
 801a82c:	6013      	str	r3, [r2, #0]
 801a82e:	187b      	adds	r3, r7, r1
 801a830:	681b      	ldr	r3, [r3, #0]
 801a832:	881b      	ldrh	r3, [r3, #0]
 801a834:	b29b      	uxth	r3, r3
 801a836:	059b      	lsls	r3, r3, #22
 801a838:	0d9b      	lsrs	r3, r3, #22
 801a83a:	b29a      	uxth	r2, r3
 801a83c:	187b      	adds	r3, r7, r1
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	801a      	strh	r2, [r3, #0]
 801a842:	683b      	ldr	r3, [r7, #0]
 801a844:	691b      	ldr	r3, [r3, #16]
 801a846:	2b3e      	cmp	r3, #62	@ 0x3e
 801a848:	d923      	bls.n	801a892 <USB_EPStartXfer+0xdce>
 801a84a:	683b      	ldr	r3, [r7, #0]
 801a84c:	691b      	ldr	r3, [r3, #16]
 801a84e:	095b      	lsrs	r3, r3, #5
 801a850:	21e0      	movs	r1, #224	@ 0xe0
 801a852:	187a      	adds	r2, r7, r1
 801a854:	6013      	str	r3, [r2, #0]
 801a856:	683b      	ldr	r3, [r7, #0]
 801a858:	691b      	ldr	r3, [r3, #16]
 801a85a:	221f      	movs	r2, #31
 801a85c:	4013      	ands	r3, r2
 801a85e:	d104      	bne.n	801a86a <USB_EPStartXfer+0xda6>
 801a860:	187b      	adds	r3, r7, r1
 801a862:	681b      	ldr	r3, [r3, #0]
 801a864:	3b01      	subs	r3, #1
 801a866:	187a      	adds	r2, r7, r1
 801a868:	6013      	str	r3, [r2, #0]
 801a86a:	2198      	movs	r1, #152	@ 0x98
 801a86c:	187b      	adds	r3, r7, r1
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	881b      	ldrh	r3, [r3, #0]
 801a872:	b29a      	uxth	r2, r3
 801a874:	23e0      	movs	r3, #224	@ 0xe0
 801a876:	18fb      	adds	r3, r7, r3
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	b29b      	uxth	r3, r3
 801a87c:	029b      	lsls	r3, r3, #10
 801a87e:	b29b      	uxth	r3, r3
 801a880:	4313      	orrs	r3, r2
 801a882:	b29b      	uxth	r3, r3
 801a884:	4a1c      	ldr	r2, [pc, #112]	@ (801a8f8 <USB_EPStartXfer+0xe34>)
 801a886:	4313      	orrs	r3, r2
 801a888:	b29a      	uxth	r2, r3
 801a88a:	187b      	adds	r3, r7, r1
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	801a      	strh	r2, [r3, #0]
 801a890:	e057      	b.n	801a942 <USB_EPStartXfer+0xe7e>
 801a892:	683b      	ldr	r3, [r7, #0]
 801a894:	691b      	ldr	r3, [r3, #16]
 801a896:	2b00      	cmp	r3, #0
 801a898:	d10b      	bne.n	801a8b2 <USB_EPStartXfer+0xdee>
 801a89a:	2198      	movs	r1, #152	@ 0x98
 801a89c:	187b      	adds	r3, r7, r1
 801a89e:	681b      	ldr	r3, [r3, #0]
 801a8a0:	881b      	ldrh	r3, [r3, #0]
 801a8a2:	b29b      	uxth	r3, r3
 801a8a4:	4a14      	ldr	r2, [pc, #80]	@ (801a8f8 <USB_EPStartXfer+0xe34>)
 801a8a6:	4313      	orrs	r3, r2
 801a8a8:	b29a      	uxth	r2, r3
 801a8aa:	187b      	adds	r3, r7, r1
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	801a      	strh	r2, [r3, #0]
 801a8b0:	e047      	b.n	801a942 <USB_EPStartXfer+0xe7e>
 801a8b2:	683b      	ldr	r3, [r7, #0]
 801a8b4:	691b      	ldr	r3, [r3, #16]
 801a8b6:	085b      	lsrs	r3, r3, #1
 801a8b8:	21e0      	movs	r1, #224	@ 0xe0
 801a8ba:	187a      	adds	r2, r7, r1
 801a8bc:	6013      	str	r3, [r2, #0]
 801a8be:	683b      	ldr	r3, [r7, #0]
 801a8c0:	691b      	ldr	r3, [r3, #16]
 801a8c2:	2201      	movs	r2, #1
 801a8c4:	4013      	ands	r3, r2
 801a8c6:	d004      	beq.n	801a8d2 <USB_EPStartXfer+0xe0e>
 801a8c8:	187b      	adds	r3, r7, r1
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	3301      	adds	r3, #1
 801a8ce:	187a      	adds	r2, r7, r1
 801a8d0:	6013      	str	r3, [r2, #0]
 801a8d2:	2198      	movs	r1, #152	@ 0x98
 801a8d4:	187b      	adds	r3, r7, r1
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	881b      	ldrh	r3, [r3, #0]
 801a8da:	b29a      	uxth	r2, r3
 801a8dc:	23e0      	movs	r3, #224	@ 0xe0
 801a8de:	18fb      	adds	r3, r7, r3
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	b29b      	uxth	r3, r3
 801a8e4:	029b      	lsls	r3, r3, #10
 801a8e6:	b29b      	uxth	r3, r3
 801a8e8:	4313      	orrs	r3, r2
 801a8ea:	b29a      	uxth	r2, r3
 801a8ec:	187b      	adds	r3, r7, r1
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	801a      	strh	r2, [r3, #0]
 801a8f2:	e026      	b.n	801a942 <USB_EPStartXfer+0xe7e>
 801a8f4:	00000406 	.word	0x00000406
 801a8f8:	ffff8000 	.word	0xffff8000
 801a8fc:	00000402 	.word	0x00000402
 801a900:	683b      	ldr	r3, [r7, #0]
 801a902:	785b      	ldrb	r3, [r3, #1]
 801a904:	2b01      	cmp	r3, #1
 801a906:	d11c      	bne.n	801a942 <USB_EPStartXfer+0xe7e>
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	2250      	movs	r2, #80	@ 0x50
 801a90c:	5a9b      	ldrh	r3, [r3, r2]
 801a90e:	b29b      	uxth	r3, r3
 801a910:	001a      	movs	r2, r3
 801a912:	21a4      	movs	r1, #164	@ 0xa4
 801a914:	187b      	adds	r3, r7, r1
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	189b      	adds	r3, r3, r2
 801a91a:	187a      	adds	r2, r7, r1
 801a91c:	6013      	str	r3, [r2, #0]
 801a91e:	683b      	ldr	r3, [r7, #0]
 801a920:	781b      	ldrb	r3, [r3, #0]
 801a922:	00da      	lsls	r2, r3, #3
 801a924:	187b      	adds	r3, r7, r1
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	18d3      	adds	r3, r2, r3
 801a92a:	4ad2      	ldr	r2, [pc, #840]	@ (801ac74 <USB_EPStartXfer+0x11b0>)
 801a92c:	4694      	mov	ip, r2
 801a92e:	4463      	add	r3, ip
 801a930:	21a0      	movs	r1, #160	@ 0xa0
 801a932:	187a      	adds	r2, r7, r1
 801a934:	6013      	str	r3, [r2, #0]
 801a936:	683b      	ldr	r3, [r7, #0]
 801a938:	691b      	ldr	r3, [r3, #16]
 801a93a:	b29a      	uxth	r2, r3
 801a93c:	187b      	adds	r3, r7, r1
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801a942:	683b      	ldr	r3, [r7, #0]
 801a944:	69db      	ldr	r3, [r3, #28]
 801a946:	2b00      	cmp	r3, #0
 801a948:	d100      	bne.n	801a94c <USB_EPStartXfer+0xe88>
 801a94a:	e1c2      	b.n	801acd2 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801a94c:	687a      	ldr	r2, [r7, #4]
 801a94e:	683b      	ldr	r3, [r7, #0]
 801a950:	781b      	ldrb	r3, [r3, #0]
 801a952:	009b      	lsls	r3, r3, #2
 801a954:	18d2      	adds	r2, r2, r3
 801a956:	2196      	movs	r1, #150	@ 0x96
 801a958:	187b      	adds	r3, r7, r1
 801a95a:	8812      	ldrh	r2, [r2, #0]
 801a95c:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801a95e:	187b      	adds	r3, r7, r1
 801a960:	881a      	ldrh	r2, [r3, #0]
 801a962:	2380      	movs	r3, #128	@ 0x80
 801a964:	01db      	lsls	r3, r3, #7
 801a966:	4013      	ands	r3, r2
 801a968:	d004      	beq.n	801a974 <USB_EPStartXfer+0xeb0>
 801a96a:	187b      	adds	r3, r7, r1
 801a96c:	881b      	ldrh	r3, [r3, #0]
 801a96e:	2240      	movs	r2, #64	@ 0x40
 801a970:	4013      	ands	r3, r2
 801a972:	d10d      	bne.n	801a990 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801a974:	2196      	movs	r1, #150	@ 0x96
 801a976:	187b      	adds	r3, r7, r1
 801a978:	881a      	ldrh	r2, [r3, #0]
 801a97a:	2380      	movs	r3, #128	@ 0x80
 801a97c:	01db      	lsls	r3, r3, #7
 801a97e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801a980:	d000      	beq.n	801a984 <USB_EPStartXfer+0xec0>
 801a982:	e1a6      	b.n	801acd2 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801a984:	187b      	adds	r3, r7, r1
 801a986:	881b      	ldrh	r3, [r3, #0]
 801a988:	2240      	movs	r2, #64	@ 0x40
 801a98a:	4013      	ands	r3, r2
 801a98c:	d000      	beq.n	801a990 <USB_EPStartXfer+0xecc>
 801a98e:	e1a0      	b.n	801acd2 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801a990:	687a      	ldr	r2, [r7, #4]
 801a992:	683b      	ldr	r3, [r7, #0]
 801a994:	781b      	ldrb	r3, [r3, #0]
 801a996:	009b      	lsls	r3, r3, #2
 801a998:	18d3      	adds	r3, r2, r3
 801a99a:	881b      	ldrh	r3, [r3, #0]
 801a99c:	b29a      	uxth	r2, r3
 801a99e:	2094      	movs	r0, #148	@ 0x94
 801a9a0:	183b      	adds	r3, r7, r0
 801a9a2:	49b5      	ldr	r1, [pc, #724]	@ (801ac78 <USB_EPStartXfer+0x11b4>)
 801a9a4:	400a      	ands	r2, r1
 801a9a6:	801a      	strh	r2, [r3, #0]
 801a9a8:	687a      	ldr	r2, [r7, #4]
 801a9aa:	683b      	ldr	r3, [r7, #0]
 801a9ac:	781b      	ldrb	r3, [r3, #0]
 801a9ae:	009b      	lsls	r3, r3, #2
 801a9b0:	18d3      	adds	r3, r2, r3
 801a9b2:	183a      	adds	r2, r7, r0
 801a9b4:	8812      	ldrh	r2, [r2, #0]
 801a9b6:	49b1      	ldr	r1, [pc, #708]	@ (801ac7c <USB_EPStartXfer+0x11b8>)
 801a9b8:	430a      	orrs	r2, r1
 801a9ba:	b292      	uxth	r2, r2
 801a9bc:	801a      	strh	r2, [r3, #0]
 801a9be:	e188      	b.n	801acd2 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801a9c0:	683b      	ldr	r3, [r7, #0]
 801a9c2:	78db      	ldrb	r3, [r3, #3]
 801a9c4:	2b01      	cmp	r3, #1
 801a9c6:	d000      	beq.n	801a9ca <USB_EPStartXfer+0xf06>
 801a9c8:	e181      	b.n	801acce <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801a9ca:	683b      	ldr	r3, [r7, #0]
 801a9cc:	699a      	ldr	r2, [r3, #24]
 801a9ce:	683b      	ldr	r3, [r7, #0]
 801a9d0:	691b      	ldr	r3, [r3, #16]
 801a9d2:	429a      	cmp	r2, r3
 801a9d4:	d90d      	bls.n	801a9f2 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 801a9d6:	683b      	ldr	r3, [r7, #0]
 801a9d8:	691b      	ldr	r3, [r3, #16]
 801a9da:	1d7a      	adds	r2, r7, #5
 801a9dc:	32ff      	adds	r2, #255	@ 0xff
 801a9de:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801a9e0:	683b      	ldr	r3, [r7, #0]
 801a9e2:	699a      	ldr	r2, [r3, #24]
 801a9e4:	1d7b      	adds	r3, r7, #5
 801a9e6:	33ff      	adds	r3, #255	@ 0xff
 801a9e8:	681b      	ldr	r3, [r3, #0]
 801a9ea:	1ad2      	subs	r2, r2, r3
 801a9ec:	683b      	ldr	r3, [r7, #0]
 801a9ee:	619a      	str	r2, [r3, #24]
 801a9f0:	e007      	b.n	801aa02 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801a9f2:	683b      	ldr	r3, [r7, #0]
 801a9f4:	699b      	ldr	r3, [r3, #24]
 801a9f6:	1d7a      	adds	r2, r7, #5
 801a9f8:	32ff      	adds	r2, #255	@ 0xff
 801a9fa:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 801a9fc:	683b      	ldr	r3, [r7, #0]
 801a9fe:	2200      	movs	r2, #0
 801aa00:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801aa02:	683b      	ldr	r3, [r7, #0]
 801aa04:	785b      	ldrb	r3, [r3, #1]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d000      	beq.n	801aa0c <USB_EPStartXfer+0xf48>
 801aa0a:	e082      	b.n	801ab12 <USB_EPStartXfer+0x104e>
 801aa0c:	687b      	ldr	r3, [r7, #4]
 801aa0e:	21cc      	movs	r1, #204	@ 0xcc
 801aa10:	187a      	adds	r2, r7, r1
 801aa12:	6013      	str	r3, [r2, #0]
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	2250      	movs	r2, #80	@ 0x50
 801aa18:	5a9b      	ldrh	r3, [r3, r2]
 801aa1a:	b29b      	uxth	r3, r3
 801aa1c:	001a      	movs	r2, r3
 801aa1e:	187b      	adds	r3, r7, r1
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	189b      	adds	r3, r3, r2
 801aa24:	187a      	adds	r2, r7, r1
 801aa26:	6013      	str	r3, [r2, #0]
 801aa28:	683b      	ldr	r3, [r7, #0]
 801aa2a:	781b      	ldrb	r3, [r3, #0]
 801aa2c:	00da      	lsls	r2, r3, #3
 801aa2e:	187b      	adds	r3, r7, r1
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	18d3      	adds	r3, r2, r3
 801aa34:	4a92      	ldr	r2, [pc, #584]	@ (801ac80 <USB_EPStartXfer+0x11bc>)
 801aa36:	4694      	mov	ip, r2
 801aa38:	4463      	add	r3, ip
 801aa3a:	21c8      	movs	r1, #200	@ 0xc8
 801aa3c:	187a      	adds	r2, r7, r1
 801aa3e:	6013      	str	r3, [r2, #0]
 801aa40:	187b      	adds	r3, r7, r1
 801aa42:	681b      	ldr	r3, [r3, #0]
 801aa44:	881b      	ldrh	r3, [r3, #0]
 801aa46:	b29b      	uxth	r3, r3
 801aa48:	059b      	lsls	r3, r3, #22
 801aa4a:	0d9b      	lsrs	r3, r3, #22
 801aa4c:	b29a      	uxth	r2, r3
 801aa4e:	187b      	adds	r3, r7, r1
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	801a      	strh	r2, [r3, #0]
 801aa54:	1d7b      	adds	r3, r7, #5
 801aa56:	33ff      	adds	r3, #255	@ 0xff
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	2b3e      	cmp	r3, #62	@ 0x3e
 801aa5c:	d925      	bls.n	801aaaa <USB_EPStartXfer+0xfe6>
 801aa5e:	1d7b      	adds	r3, r7, #5
 801aa60:	33ff      	adds	r3, #255	@ 0xff
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	095b      	lsrs	r3, r3, #5
 801aa66:	21dc      	movs	r1, #220	@ 0xdc
 801aa68:	187a      	adds	r2, r7, r1
 801aa6a:	6013      	str	r3, [r2, #0]
 801aa6c:	1d7b      	adds	r3, r7, #5
 801aa6e:	33ff      	adds	r3, #255	@ 0xff
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	221f      	movs	r2, #31
 801aa74:	4013      	ands	r3, r2
 801aa76:	d104      	bne.n	801aa82 <USB_EPStartXfer+0xfbe>
 801aa78:	187b      	adds	r3, r7, r1
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	3b01      	subs	r3, #1
 801aa7e:	187a      	adds	r2, r7, r1
 801aa80:	6013      	str	r3, [r2, #0]
 801aa82:	21c8      	movs	r1, #200	@ 0xc8
 801aa84:	187b      	adds	r3, r7, r1
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	881b      	ldrh	r3, [r3, #0]
 801aa8a:	b29a      	uxth	r2, r3
 801aa8c:	23dc      	movs	r3, #220	@ 0xdc
 801aa8e:	18fb      	adds	r3, r7, r3
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	b29b      	uxth	r3, r3
 801aa94:	029b      	lsls	r3, r3, #10
 801aa96:	b29b      	uxth	r3, r3
 801aa98:	4313      	orrs	r3, r2
 801aa9a:	b29b      	uxth	r3, r3
 801aa9c:	4a79      	ldr	r2, [pc, #484]	@ (801ac84 <USB_EPStartXfer+0x11c0>)
 801aa9e:	4313      	orrs	r3, r2
 801aaa0:	b29a      	uxth	r2, r3
 801aaa2:	187b      	adds	r3, r7, r1
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	801a      	strh	r2, [r3, #0]
 801aaa8:	e058      	b.n	801ab5c <USB_EPStartXfer+0x1098>
 801aaaa:	1d7b      	adds	r3, r7, #5
 801aaac:	33ff      	adds	r3, #255	@ 0xff
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d10b      	bne.n	801aacc <USB_EPStartXfer+0x1008>
 801aab4:	21c8      	movs	r1, #200	@ 0xc8
 801aab6:	187b      	adds	r3, r7, r1
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	881b      	ldrh	r3, [r3, #0]
 801aabc:	b29b      	uxth	r3, r3
 801aabe:	4a71      	ldr	r2, [pc, #452]	@ (801ac84 <USB_EPStartXfer+0x11c0>)
 801aac0:	4313      	orrs	r3, r2
 801aac2:	b29a      	uxth	r2, r3
 801aac4:	187b      	adds	r3, r7, r1
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	801a      	strh	r2, [r3, #0]
 801aaca:	e047      	b.n	801ab5c <USB_EPStartXfer+0x1098>
 801aacc:	1d7b      	adds	r3, r7, #5
 801aace:	33ff      	adds	r3, #255	@ 0xff
 801aad0:	681b      	ldr	r3, [r3, #0]
 801aad2:	085b      	lsrs	r3, r3, #1
 801aad4:	21dc      	movs	r1, #220	@ 0xdc
 801aad6:	187a      	adds	r2, r7, r1
 801aad8:	6013      	str	r3, [r2, #0]
 801aada:	1d7b      	adds	r3, r7, #5
 801aadc:	33ff      	adds	r3, #255	@ 0xff
 801aade:	681b      	ldr	r3, [r3, #0]
 801aae0:	2201      	movs	r2, #1
 801aae2:	4013      	ands	r3, r2
 801aae4:	d004      	beq.n	801aaf0 <USB_EPStartXfer+0x102c>
 801aae6:	187b      	adds	r3, r7, r1
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	3301      	adds	r3, #1
 801aaec:	187a      	adds	r2, r7, r1
 801aaee:	6013      	str	r3, [r2, #0]
 801aaf0:	21c8      	movs	r1, #200	@ 0xc8
 801aaf2:	187b      	adds	r3, r7, r1
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	881b      	ldrh	r3, [r3, #0]
 801aaf8:	b29a      	uxth	r2, r3
 801aafa:	23dc      	movs	r3, #220	@ 0xdc
 801aafc:	18fb      	adds	r3, r7, r3
 801aafe:	681b      	ldr	r3, [r3, #0]
 801ab00:	b29b      	uxth	r3, r3
 801ab02:	029b      	lsls	r3, r3, #10
 801ab04:	b29b      	uxth	r3, r3
 801ab06:	4313      	orrs	r3, r2
 801ab08:	b29a      	uxth	r2, r3
 801ab0a:	187b      	adds	r3, r7, r1
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	801a      	strh	r2, [r3, #0]
 801ab10:	e024      	b.n	801ab5c <USB_EPStartXfer+0x1098>
 801ab12:	683b      	ldr	r3, [r7, #0]
 801ab14:	785b      	ldrb	r3, [r3, #1]
 801ab16:	2b01      	cmp	r3, #1
 801ab18:	d120      	bne.n	801ab5c <USB_EPStartXfer+0x1098>
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	21d4      	movs	r1, #212	@ 0xd4
 801ab1e:	187a      	adds	r2, r7, r1
 801ab20:	6013      	str	r3, [r2, #0]
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	2250      	movs	r2, #80	@ 0x50
 801ab26:	5a9b      	ldrh	r3, [r3, r2]
 801ab28:	b29b      	uxth	r3, r3
 801ab2a:	001a      	movs	r2, r3
 801ab2c:	187b      	adds	r3, r7, r1
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	189b      	adds	r3, r3, r2
 801ab32:	187a      	adds	r2, r7, r1
 801ab34:	6013      	str	r3, [r2, #0]
 801ab36:	683b      	ldr	r3, [r7, #0]
 801ab38:	781b      	ldrb	r3, [r3, #0]
 801ab3a:	00da      	lsls	r2, r3, #3
 801ab3c:	187b      	adds	r3, r7, r1
 801ab3e:	681b      	ldr	r3, [r3, #0]
 801ab40:	18d3      	adds	r3, r2, r3
 801ab42:	4a4f      	ldr	r2, [pc, #316]	@ (801ac80 <USB_EPStartXfer+0x11bc>)
 801ab44:	4694      	mov	ip, r2
 801ab46:	4463      	add	r3, ip
 801ab48:	21d0      	movs	r1, #208	@ 0xd0
 801ab4a:	187a      	adds	r2, r7, r1
 801ab4c:	6013      	str	r3, [r2, #0]
 801ab4e:	1d7b      	adds	r3, r7, #5
 801ab50:	33ff      	adds	r3, #255	@ 0xff
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	b29a      	uxth	r2, r3
 801ab56:	187b      	adds	r3, r7, r1
 801ab58:	681b      	ldr	r3, [r3, #0]
 801ab5a:	801a      	strh	r2, [r3, #0]
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	22c4      	movs	r2, #196	@ 0xc4
 801ab60:	18ba      	adds	r2, r7, r2
 801ab62:	6013      	str	r3, [r2, #0]
 801ab64:	683b      	ldr	r3, [r7, #0]
 801ab66:	785b      	ldrb	r3, [r3, #1]
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d000      	beq.n	801ab6e <USB_EPStartXfer+0x10aa>
 801ab6c:	e08c      	b.n	801ac88 <USB_EPStartXfer+0x11c4>
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	21bc      	movs	r1, #188	@ 0xbc
 801ab72:	187a      	adds	r2, r7, r1
 801ab74:	6013      	str	r3, [r2, #0]
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	2250      	movs	r2, #80	@ 0x50
 801ab7a:	5a9b      	ldrh	r3, [r3, r2]
 801ab7c:	b29b      	uxth	r3, r3
 801ab7e:	001a      	movs	r2, r3
 801ab80:	187b      	adds	r3, r7, r1
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	189b      	adds	r3, r3, r2
 801ab86:	187a      	adds	r2, r7, r1
 801ab88:	6013      	str	r3, [r2, #0]
 801ab8a:	683b      	ldr	r3, [r7, #0]
 801ab8c:	781b      	ldrb	r3, [r3, #0]
 801ab8e:	00da      	lsls	r2, r3, #3
 801ab90:	187b      	adds	r3, r7, r1
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	18d3      	adds	r3, r2, r3
 801ab96:	4a37      	ldr	r2, [pc, #220]	@ (801ac74 <USB_EPStartXfer+0x11b0>)
 801ab98:	4694      	mov	ip, r2
 801ab9a:	4463      	add	r3, ip
 801ab9c:	21b8      	movs	r1, #184	@ 0xb8
 801ab9e:	187a      	adds	r2, r7, r1
 801aba0:	6013      	str	r3, [r2, #0]
 801aba2:	187b      	adds	r3, r7, r1
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	881b      	ldrh	r3, [r3, #0]
 801aba8:	b29b      	uxth	r3, r3
 801abaa:	059b      	lsls	r3, r3, #22
 801abac:	0d9b      	lsrs	r3, r3, #22
 801abae:	b29a      	uxth	r2, r3
 801abb0:	187b      	adds	r3, r7, r1
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	801a      	strh	r2, [r3, #0]
 801abb6:	1d7b      	adds	r3, r7, #5
 801abb8:	33ff      	adds	r3, #255	@ 0xff
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	2b3e      	cmp	r3, #62	@ 0x3e
 801abbe:	d925      	bls.n	801ac0c <USB_EPStartXfer+0x1148>
 801abc0:	1d7b      	adds	r3, r7, #5
 801abc2:	33ff      	adds	r3, #255	@ 0xff
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	095b      	lsrs	r3, r3, #5
 801abc8:	21d8      	movs	r1, #216	@ 0xd8
 801abca:	187a      	adds	r2, r7, r1
 801abcc:	6013      	str	r3, [r2, #0]
 801abce:	1d7b      	adds	r3, r7, #5
 801abd0:	33ff      	adds	r3, #255	@ 0xff
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	221f      	movs	r2, #31
 801abd6:	4013      	ands	r3, r2
 801abd8:	d104      	bne.n	801abe4 <USB_EPStartXfer+0x1120>
 801abda:	187b      	adds	r3, r7, r1
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	3b01      	subs	r3, #1
 801abe0:	187a      	adds	r2, r7, r1
 801abe2:	6013      	str	r3, [r2, #0]
 801abe4:	21b8      	movs	r1, #184	@ 0xb8
 801abe6:	187b      	adds	r3, r7, r1
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	881b      	ldrh	r3, [r3, #0]
 801abec:	b29a      	uxth	r2, r3
 801abee:	23d8      	movs	r3, #216	@ 0xd8
 801abf0:	18fb      	adds	r3, r7, r3
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	b29b      	uxth	r3, r3
 801abf6:	029b      	lsls	r3, r3, #10
 801abf8:	b29b      	uxth	r3, r3
 801abfa:	4313      	orrs	r3, r2
 801abfc:	b29b      	uxth	r3, r3
 801abfe:	4a21      	ldr	r2, [pc, #132]	@ (801ac84 <USB_EPStartXfer+0x11c0>)
 801ac00:	4313      	orrs	r3, r2
 801ac02:	b29a      	uxth	r2, r3
 801ac04:	187b      	adds	r3, r7, r1
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	801a      	strh	r2, [r3, #0]
 801ac0a:	e062      	b.n	801acd2 <USB_EPStartXfer+0x120e>
 801ac0c:	1d7b      	adds	r3, r7, #5
 801ac0e:	33ff      	adds	r3, #255	@ 0xff
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	2b00      	cmp	r3, #0
 801ac14:	d10b      	bne.n	801ac2e <USB_EPStartXfer+0x116a>
 801ac16:	21b8      	movs	r1, #184	@ 0xb8
 801ac18:	187b      	adds	r3, r7, r1
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	881b      	ldrh	r3, [r3, #0]
 801ac1e:	b29b      	uxth	r3, r3
 801ac20:	4a18      	ldr	r2, [pc, #96]	@ (801ac84 <USB_EPStartXfer+0x11c0>)
 801ac22:	4313      	orrs	r3, r2
 801ac24:	b29a      	uxth	r2, r3
 801ac26:	187b      	adds	r3, r7, r1
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	801a      	strh	r2, [r3, #0]
 801ac2c:	e051      	b.n	801acd2 <USB_EPStartXfer+0x120e>
 801ac2e:	1d7b      	adds	r3, r7, #5
 801ac30:	33ff      	adds	r3, #255	@ 0xff
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	085b      	lsrs	r3, r3, #1
 801ac36:	21d8      	movs	r1, #216	@ 0xd8
 801ac38:	187a      	adds	r2, r7, r1
 801ac3a:	6013      	str	r3, [r2, #0]
 801ac3c:	1d7b      	adds	r3, r7, #5
 801ac3e:	33ff      	adds	r3, #255	@ 0xff
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	2201      	movs	r2, #1
 801ac44:	4013      	ands	r3, r2
 801ac46:	d004      	beq.n	801ac52 <USB_EPStartXfer+0x118e>
 801ac48:	187b      	adds	r3, r7, r1
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	3301      	adds	r3, #1
 801ac4e:	187a      	adds	r2, r7, r1
 801ac50:	6013      	str	r3, [r2, #0]
 801ac52:	21b8      	movs	r1, #184	@ 0xb8
 801ac54:	187b      	adds	r3, r7, r1
 801ac56:	681b      	ldr	r3, [r3, #0]
 801ac58:	881b      	ldrh	r3, [r3, #0]
 801ac5a:	b29a      	uxth	r2, r3
 801ac5c:	23d8      	movs	r3, #216	@ 0xd8
 801ac5e:	18fb      	adds	r3, r7, r3
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	b29b      	uxth	r3, r3
 801ac64:	029b      	lsls	r3, r3, #10
 801ac66:	b29b      	uxth	r3, r3
 801ac68:	4313      	orrs	r3, r2
 801ac6a:	b29a      	uxth	r2, r3
 801ac6c:	187b      	adds	r3, r7, r1
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	801a      	strh	r2, [r3, #0]
 801ac72:	e02e      	b.n	801acd2 <USB_EPStartXfer+0x120e>
 801ac74:	00000406 	.word	0x00000406
 801ac78:	ffff8f8f 	.word	0xffff8f8f
 801ac7c:	ffff80c0 	.word	0xffff80c0
 801ac80:	00000402 	.word	0x00000402
 801ac84:	ffff8000 	.word	0xffff8000
 801ac88:	683b      	ldr	r3, [r7, #0]
 801ac8a:	785b      	ldrb	r3, [r3, #1]
 801ac8c:	2b01      	cmp	r3, #1
 801ac8e:	d120      	bne.n	801acd2 <USB_EPStartXfer+0x120e>
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	2250      	movs	r2, #80	@ 0x50
 801ac94:	5a9b      	ldrh	r3, [r3, r2]
 801ac96:	b29b      	uxth	r3, r3
 801ac98:	001a      	movs	r2, r3
 801ac9a:	21c4      	movs	r1, #196	@ 0xc4
 801ac9c:	187b      	adds	r3, r7, r1
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	189b      	adds	r3, r3, r2
 801aca2:	187a      	adds	r2, r7, r1
 801aca4:	6013      	str	r3, [r2, #0]
 801aca6:	683b      	ldr	r3, [r7, #0]
 801aca8:	781b      	ldrb	r3, [r3, #0]
 801acaa:	00da      	lsls	r2, r3, #3
 801acac:	187b      	adds	r3, r7, r1
 801acae:	681b      	ldr	r3, [r3, #0]
 801acb0:	18d3      	adds	r3, r2, r3
 801acb2:	4a1d      	ldr	r2, [pc, #116]	@ (801ad28 <USB_EPStartXfer+0x1264>)
 801acb4:	4694      	mov	ip, r2
 801acb6:	4463      	add	r3, ip
 801acb8:	21c0      	movs	r1, #192	@ 0xc0
 801acba:	187a      	adds	r2, r7, r1
 801acbc:	6013      	str	r3, [r2, #0]
 801acbe:	1d7b      	adds	r3, r7, #5
 801acc0:	33ff      	adds	r3, #255	@ 0xff
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	b29a      	uxth	r2, r3
 801acc6:	187b      	adds	r3, r7, r1
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	801a      	strh	r2, [r3, #0]
 801accc:	e001      	b.n	801acd2 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801acce:	2301      	movs	r3, #1
 801acd0:	e025      	b.n	801ad1e <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801acd2:	687a      	ldr	r2, [r7, #4]
 801acd4:	683b      	ldr	r3, [r7, #0]
 801acd6:	781b      	ldrb	r3, [r3, #0]
 801acd8:	009b      	lsls	r3, r3, #2
 801acda:	18d3      	adds	r3, r2, r3
 801acdc:	881b      	ldrh	r3, [r3, #0]
 801acde:	b29a      	uxth	r2, r3
 801ace0:	208a      	movs	r0, #138	@ 0x8a
 801ace2:	183b      	adds	r3, r7, r0
 801ace4:	4911      	ldr	r1, [pc, #68]	@ (801ad2c <USB_EPStartXfer+0x1268>)
 801ace6:	400a      	ands	r2, r1
 801ace8:	801a      	strh	r2, [r3, #0]
 801acea:	183b      	adds	r3, r7, r0
 801acec:	183a      	adds	r2, r7, r0
 801acee:	8812      	ldrh	r2, [r2, #0]
 801acf0:	2180      	movs	r1, #128	@ 0x80
 801acf2:	0149      	lsls	r1, r1, #5
 801acf4:	404a      	eors	r2, r1
 801acf6:	801a      	strh	r2, [r3, #0]
 801acf8:	183b      	adds	r3, r7, r0
 801acfa:	183a      	adds	r2, r7, r0
 801acfc:	8812      	ldrh	r2, [r2, #0]
 801acfe:	2180      	movs	r1, #128	@ 0x80
 801ad00:	0189      	lsls	r1, r1, #6
 801ad02:	404a      	eors	r2, r1
 801ad04:	801a      	strh	r2, [r3, #0]
 801ad06:	687a      	ldr	r2, [r7, #4]
 801ad08:	683b      	ldr	r3, [r7, #0]
 801ad0a:	781b      	ldrb	r3, [r3, #0]
 801ad0c:	009b      	lsls	r3, r3, #2
 801ad0e:	18d3      	adds	r3, r2, r3
 801ad10:	183a      	adds	r2, r7, r0
 801ad12:	8812      	ldrh	r2, [r2, #0]
 801ad14:	4906      	ldr	r1, [pc, #24]	@ (801ad30 <USB_EPStartXfer+0x126c>)
 801ad16:	430a      	orrs	r2, r1
 801ad18:	b292      	uxth	r2, r2
 801ad1a:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801ad1c:	2300      	movs	r3, #0
}
 801ad1e:	0018      	movs	r0, r3
 801ad20:	46bd      	mov	sp, r7
 801ad22:	b043      	add	sp, #268	@ 0x10c
 801ad24:	bd90      	pop	{r4, r7, pc}
 801ad26:	46c0      	nop			@ (mov r8, r8)
 801ad28:	00000406 	.word	0x00000406
 801ad2c:	ffffbf8f 	.word	0xffffbf8f
 801ad30:	ffff8080 	.word	0xffff8080

0801ad34 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801ad34:	b580      	push	{r7, lr}
 801ad36:	b084      	sub	sp, #16
 801ad38:	af00      	add	r7, sp, #0
 801ad3a:	6078      	str	r0, [r7, #4]
 801ad3c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801ad3e:	683b      	ldr	r3, [r7, #0]
 801ad40:	785b      	ldrb	r3, [r3, #1]
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d01d      	beq.n	801ad82 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801ad46:	687a      	ldr	r2, [r7, #4]
 801ad48:	683b      	ldr	r3, [r7, #0]
 801ad4a:	781b      	ldrb	r3, [r3, #0]
 801ad4c:	009b      	lsls	r3, r3, #2
 801ad4e:	18d3      	adds	r3, r2, r3
 801ad50:	881b      	ldrh	r3, [r3, #0]
 801ad52:	b29a      	uxth	r2, r3
 801ad54:	200c      	movs	r0, #12
 801ad56:	183b      	adds	r3, r7, r0
 801ad58:	491b      	ldr	r1, [pc, #108]	@ (801adc8 <USB_EPSetStall+0x94>)
 801ad5a:	400a      	ands	r2, r1
 801ad5c:	801a      	strh	r2, [r3, #0]
 801ad5e:	183b      	adds	r3, r7, r0
 801ad60:	183a      	adds	r2, r7, r0
 801ad62:	8812      	ldrh	r2, [r2, #0]
 801ad64:	2110      	movs	r1, #16
 801ad66:	404a      	eors	r2, r1
 801ad68:	801a      	strh	r2, [r3, #0]
 801ad6a:	687a      	ldr	r2, [r7, #4]
 801ad6c:	683b      	ldr	r3, [r7, #0]
 801ad6e:	781b      	ldrb	r3, [r3, #0]
 801ad70:	009b      	lsls	r3, r3, #2
 801ad72:	18d3      	adds	r3, r2, r3
 801ad74:	183a      	adds	r2, r7, r0
 801ad76:	8812      	ldrh	r2, [r2, #0]
 801ad78:	4914      	ldr	r1, [pc, #80]	@ (801adcc <USB_EPSetStall+0x98>)
 801ad7a:	430a      	orrs	r2, r1
 801ad7c:	b292      	uxth	r2, r2
 801ad7e:	801a      	strh	r2, [r3, #0]
 801ad80:	e01d      	b.n	801adbe <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801ad82:	687a      	ldr	r2, [r7, #4]
 801ad84:	683b      	ldr	r3, [r7, #0]
 801ad86:	781b      	ldrb	r3, [r3, #0]
 801ad88:	009b      	lsls	r3, r3, #2
 801ad8a:	18d3      	adds	r3, r2, r3
 801ad8c:	881b      	ldrh	r3, [r3, #0]
 801ad8e:	b29a      	uxth	r2, r3
 801ad90:	200e      	movs	r0, #14
 801ad92:	183b      	adds	r3, r7, r0
 801ad94:	490e      	ldr	r1, [pc, #56]	@ (801add0 <USB_EPSetStall+0x9c>)
 801ad96:	400a      	ands	r2, r1
 801ad98:	801a      	strh	r2, [r3, #0]
 801ad9a:	183b      	adds	r3, r7, r0
 801ad9c:	183a      	adds	r2, r7, r0
 801ad9e:	8812      	ldrh	r2, [r2, #0]
 801ada0:	2180      	movs	r1, #128	@ 0x80
 801ada2:	0149      	lsls	r1, r1, #5
 801ada4:	404a      	eors	r2, r1
 801ada6:	801a      	strh	r2, [r3, #0]
 801ada8:	687a      	ldr	r2, [r7, #4]
 801adaa:	683b      	ldr	r3, [r7, #0]
 801adac:	781b      	ldrb	r3, [r3, #0]
 801adae:	009b      	lsls	r3, r3, #2
 801adb0:	18d3      	adds	r3, r2, r3
 801adb2:	183a      	adds	r2, r7, r0
 801adb4:	8812      	ldrh	r2, [r2, #0]
 801adb6:	4905      	ldr	r1, [pc, #20]	@ (801adcc <USB_EPSetStall+0x98>)
 801adb8:	430a      	orrs	r2, r1
 801adba:	b292      	uxth	r2, r2
 801adbc:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801adbe:	2300      	movs	r3, #0
}
 801adc0:	0018      	movs	r0, r3
 801adc2:	46bd      	mov	sp, r7
 801adc4:	b004      	add	sp, #16
 801adc6:	bd80      	pop	{r7, pc}
 801adc8:	ffff8fbf 	.word	0xffff8fbf
 801adcc:	ffff8080 	.word	0xffff8080
 801add0:	ffffbf8f 	.word	0xffffbf8f

0801add4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801add4:	b580      	push	{r7, lr}
 801add6:	b086      	sub	sp, #24
 801add8:	af00      	add	r7, sp, #0
 801adda:	6078      	str	r0, [r7, #4]
 801addc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801adde:	683b      	ldr	r3, [r7, #0]
 801ade0:	7b1b      	ldrb	r3, [r3, #12]
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d000      	beq.n	801ade8 <USB_EPClearStall+0x14>
 801ade6:	e095      	b.n	801af14 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801ade8:	683b      	ldr	r3, [r7, #0]
 801adea:	785b      	ldrb	r3, [r3, #1]
 801adec:	2b00      	cmp	r3, #0
 801adee:	d046      	beq.n	801ae7e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801adf0:	687a      	ldr	r2, [r7, #4]
 801adf2:	683b      	ldr	r3, [r7, #0]
 801adf4:	781b      	ldrb	r3, [r3, #0]
 801adf6:	009b      	lsls	r3, r3, #2
 801adf8:	18d2      	adds	r2, r2, r3
 801adfa:	2110      	movs	r1, #16
 801adfc:	187b      	adds	r3, r7, r1
 801adfe:	8812      	ldrh	r2, [r2, #0]
 801ae00:	801a      	strh	r2, [r3, #0]
 801ae02:	187b      	adds	r3, r7, r1
 801ae04:	881b      	ldrh	r3, [r3, #0]
 801ae06:	2240      	movs	r2, #64	@ 0x40
 801ae08:	4013      	ands	r3, r2
 801ae0a:	d016      	beq.n	801ae3a <USB_EPClearStall+0x66>
 801ae0c:	687a      	ldr	r2, [r7, #4]
 801ae0e:	683b      	ldr	r3, [r7, #0]
 801ae10:	781b      	ldrb	r3, [r3, #0]
 801ae12:	009b      	lsls	r3, r3, #2
 801ae14:	18d3      	adds	r3, r2, r3
 801ae16:	881b      	ldrh	r3, [r3, #0]
 801ae18:	b29a      	uxth	r2, r3
 801ae1a:	200e      	movs	r0, #14
 801ae1c:	183b      	adds	r3, r7, r0
 801ae1e:	4940      	ldr	r1, [pc, #256]	@ (801af20 <USB_EPClearStall+0x14c>)
 801ae20:	400a      	ands	r2, r1
 801ae22:	801a      	strh	r2, [r3, #0]
 801ae24:	687a      	ldr	r2, [r7, #4]
 801ae26:	683b      	ldr	r3, [r7, #0]
 801ae28:	781b      	ldrb	r3, [r3, #0]
 801ae2a:	009b      	lsls	r3, r3, #2
 801ae2c:	18d3      	adds	r3, r2, r3
 801ae2e:	183a      	adds	r2, r7, r0
 801ae30:	8812      	ldrh	r2, [r2, #0]
 801ae32:	493c      	ldr	r1, [pc, #240]	@ (801af24 <USB_EPClearStall+0x150>)
 801ae34:	430a      	orrs	r2, r1
 801ae36:	b292      	uxth	r2, r2
 801ae38:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801ae3a:	683b      	ldr	r3, [r7, #0]
 801ae3c:	78db      	ldrb	r3, [r3, #3]
 801ae3e:	2b01      	cmp	r3, #1
 801ae40:	d068      	beq.n	801af14 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801ae42:	687a      	ldr	r2, [r7, #4]
 801ae44:	683b      	ldr	r3, [r7, #0]
 801ae46:	781b      	ldrb	r3, [r3, #0]
 801ae48:	009b      	lsls	r3, r3, #2
 801ae4a:	18d3      	adds	r3, r2, r3
 801ae4c:	881b      	ldrh	r3, [r3, #0]
 801ae4e:	b29a      	uxth	r2, r3
 801ae50:	200c      	movs	r0, #12
 801ae52:	183b      	adds	r3, r7, r0
 801ae54:	4934      	ldr	r1, [pc, #208]	@ (801af28 <USB_EPClearStall+0x154>)
 801ae56:	400a      	ands	r2, r1
 801ae58:	801a      	strh	r2, [r3, #0]
 801ae5a:	183b      	adds	r3, r7, r0
 801ae5c:	183a      	adds	r2, r7, r0
 801ae5e:	8812      	ldrh	r2, [r2, #0]
 801ae60:	2120      	movs	r1, #32
 801ae62:	404a      	eors	r2, r1
 801ae64:	801a      	strh	r2, [r3, #0]
 801ae66:	687a      	ldr	r2, [r7, #4]
 801ae68:	683b      	ldr	r3, [r7, #0]
 801ae6a:	781b      	ldrb	r3, [r3, #0]
 801ae6c:	009b      	lsls	r3, r3, #2
 801ae6e:	18d3      	adds	r3, r2, r3
 801ae70:	183a      	adds	r2, r7, r0
 801ae72:	8812      	ldrh	r2, [r2, #0]
 801ae74:	492d      	ldr	r1, [pc, #180]	@ (801af2c <USB_EPClearStall+0x158>)
 801ae76:	430a      	orrs	r2, r1
 801ae78:	b292      	uxth	r2, r2
 801ae7a:	801a      	strh	r2, [r3, #0]
 801ae7c:	e04a      	b.n	801af14 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801ae7e:	687a      	ldr	r2, [r7, #4]
 801ae80:	683b      	ldr	r3, [r7, #0]
 801ae82:	781b      	ldrb	r3, [r3, #0]
 801ae84:	009b      	lsls	r3, r3, #2
 801ae86:	18d2      	adds	r2, r2, r3
 801ae88:	2116      	movs	r1, #22
 801ae8a:	187b      	adds	r3, r7, r1
 801ae8c:	8812      	ldrh	r2, [r2, #0]
 801ae8e:	801a      	strh	r2, [r3, #0]
 801ae90:	187b      	adds	r3, r7, r1
 801ae92:	881a      	ldrh	r2, [r3, #0]
 801ae94:	2380      	movs	r3, #128	@ 0x80
 801ae96:	01db      	lsls	r3, r3, #7
 801ae98:	4013      	ands	r3, r2
 801ae9a:	d016      	beq.n	801aeca <USB_EPClearStall+0xf6>
 801ae9c:	687a      	ldr	r2, [r7, #4]
 801ae9e:	683b      	ldr	r3, [r7, #0]
 801aea0:	781b      	ldrb	r3, [r3, #0]
 801aea2:	009b      	lsls	r3, r3, #2
 801aea4:	18d3      	adds	r3, r2, r3
 801aea6:	881b      	ldrh	r3, [r3, #0]
 801aea8:	b29a      	uxth	r2, r3
 801aeaa:	2014      	movs	r0, #20
 801aeac:	183b      	adds	r3, r7, r0
 801aeae:	491c      	ldr	r1, [pc, #112]	@ (801af20 <USB_EPClearStall+0x14c>)
 801aeb0:	400a      	ands	r2, r1
 801aeb2:	801a      	strh	r2, [r3, #0]
 801aeb4:	687a      	ldr	r2, [r7, #4]
 801aeb6:	683b      	ldr	r3, [r7, #0]
 801aeb8:	781b      	ldrb	r3, [r3, #0]
 801aeba:	009b      	lsls	r3, r3, #2
 801aebc:	18d3      	adds	r3, r2, r3
 801aebe:	183a      	adds	r2, r7, r0
 801aec0:	8812      	ldrh	r2, [r2, #0]
 801aec2:	491b      	ldr	r1, [pc, #108]	@ (801af30 <USB_EPClearStall+0x15c>)
 801aec4:	430a      	orrs	r2, r1
 801aec6:	b292      	uxth	r2, r2
 801aec8:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801aeca:	687a      	ldr	r2, [r7, #4]
 801aecc:	683b      	ldr	r3, [r7, #0]
 801aece:	781b      	ldrb	r3, [r3, #0]
 801aed0:	009b      	lsls	r3, r3, #2
 801aed2:	18d3      	adds	r3, r2, r3
 801aed4:	881b      	ldrh	r3, [r3, #0]
 801aed6:	b29a      	uxth	r2, r3
 801aed8:	2012      	movs	r0, #18
 801aeda:	183b      	adds	r3, r7, r0
 801aedc:	4915      	ldr	r1, [pc, #84]	@ (801af34 <USB_EPClearStall+0x160>)
 801aede:	400a      	ands	r2, r1
 801aee0:	801a      	strh	r2, [r3, #0]
 801aee2:	183b      	adds	r3, r7, r0
 801aee4:	183a      	adds	r2, r7, r0
 801aee6:	8812      	ldrh	r2, [r2, #0]
 801aee8:	2180      	movs	r1, #128	@ 0x80
 801aeea:	0149      	lsls	r1, r1, #5
 801aeec:	404a      	eors	r2, r1
 801aeee:	801a      	strh	r2, [r3, #0]
 801aef0:	183b      	adds	r3, r7, r0
 801aef2:	183a      	adds	r2, r7, r0
 801aef4:	8812      	ldrh	r2, [r2, #0]
 801aef6:	2180      	movs	r1, #128	@ 0x80
 801aef8:	0189      	lsls	r1, r1, #6
 801aefa:	404a      	eors	r2, r1
 801aefc:	801a      	strh	r2, [r3, #0]
 801aefe:	687a      	ldr	r2, [r7, #4]
 801af00:	683b      	ldr	r3, [r7, #0]
 801af02:	781b      	ldrb	r3, [r3, #0]
 801af04:	009b      	lsls	r3, r3, #2
 801af06:	18d3      	adds	r3, r2, r3
 801af08:	183a      	adds	r2, r7, r0
 801af0a:	8812      	ldrh	r2, [r2, #0]
 801af0c:	4907      	ldr	r1, [pc, #28]	@ (801af2c <USB_EPClearStall+0x158>)
 801af0e:	430a      	orrs	r2, r1
 801af10:	b292      	uxth	r2, r2
 801af12:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801af14:	2300      	movs	r3, #0
}
 801af16:	0018      	movs	r0, r3
 801af18:	46bd      	mov	sp, r7
 801af1a:	b006      	add	sp, #24
 801af1c:	bd80      	pop	{r7, pc}
 801af1e:	46c0      	nop			@ (mov r8, r8)
 801af20:	ffff8f8f 	.word	0xffff8f8f
 801af24:	ffff80c0 	.word	0xffff80c0
 801af28:	ffff8fbf 	.word	0xffff8fbf
 801af2c:	ffff8080 	.word	0xffff8080
 801af30:	ffffc080 	.word	0xffffc080
 801af34:	ffffbf8f 	.word	0xffffbf8f

0801af38 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801af38:	b580      	push	{r7, lr}
 801af3a:	b082      	sub	sp, #8
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	6078      	str	r0, [r7, #4]
 801af40:	000a      	movs	r2, r1
 801af42:	1cfb      	adds	r3, r7, #3
 801af44:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801af46:	1cfb      	adds	r3, r7, #3
 801af48:	781b      	ldrb	r3, [r3, #0]
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	d103      	bne.n	801af56 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	224c      	movs	r2, #76	@ 0x4c
 801af52:	2180      	movs	r1, #128	@ 0x80
 801af54:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801af56:	2300      	movs	r3, #0
}
 801af58:	0018      	movs	r0, r3
 801af5a:	46bd      	mov	sp, r7
 801af5c:	b002      	add	sp, #8
 801af5e:	bd80      	pop	{r7, pc}

0801af60 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801af60:	b580      	push	{r7, lr}
 801af62:	b082      	sub	sp, #8
 801af64:	af00      	add	r7, sp, #0
 801af66:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	2258      	movs	r2, #88	@ 0x58
 801af6c:	5a9b      	ldrh	r3, [r3, r2]
 801af6e:	b29b      	uxth	r3, r3
 801af70:	4a05      	ldr	r2, [pc, #20]	@ (801af88 <USB_DevConnect+0x28>)
 801af72:	4313      	orrs	r3, r2
 801af74:	b299      	uxth	r1, r3
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	2258      	movs	r2, #88	@ 0x58
 801af7a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801af7c:	2300      	movs	r3, #0
}
 801af7e:	0018      	movs	r0, r3
 801af80:	46bd      	mov	sp, r7
 801af82:	b002      	add	sp, #8
 801af84:	bd80      	pop	{r7, pc}
 801af86:	46c0      	nop			@ (mov r8, r8)
 801af88:	ffff8000 	.word	0xffff8000

0801af8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 801af8c:	b580      	push	{r7, lr}
 801af8e:	b084      	sub	sp, #16
 801af90:	af00      	add	r7, sp, #0
 801af92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	2244      	movs	r2, #68	@ 0x44
 801af98:	5a9b      	ldrh	r3, [r3, r2]
 801af9a:	b29b      	uxth	r3, r3
 801af9c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801af9e:	68fb      	ldr	r3, [r7, #12]
}
 801afa0:	0018      	movs	r0, r3
 801afa2:	46bd      	mov	sp, r7
 801afa4:	b004      	add	sp, #16
 801afa6:	bd80      	pop	{r7, pc}

0801afa8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801afa8:	b580      	push	{r7, lr}
 801afaa:	b08a      	sub	sp, #40	@ 0x28
 801afac:	af00      	add	r7, sp, #0
 801afae:	60f8      	str	r0, [r7, #12]
 801afb0:	60b9      	str	r1, [r7, #8]
 801afb2:	0019      	movs	r1, r3
 801afb4:	1dbb      	adds	r3, r7, #6
 801afb6:	801a      	strh	r2, [r3, #0]
 801afb8:	1d3b      	adds	r3, r7, #4
 801afba:	1c0a      	adds	r2, r1, #0
 801afbc:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801afbe:	1d3b      	adds	r3, r7, #4
 801afc0:	881b      	ldrh	r3, [r3, #0]
 801afc2:	3301      	adds	r3, #1
 801afc4:	085b      	lsrs	r3, r3, #1
 801afc6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801afc8:	68fb      	ldr	r3, [r7, #12]
 801afca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801afcc:	68bb      	ldr	r3, [r7, #8]
 801afce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801afd0:	1dbb      	adds	r3, r7, #6
 801afd2:	881a      	ldrh	r2, [r3, #0]
 801afd4:	697b      	ldr	r3, [r7, #20]
 801afd6:	18d3      	adds	r3, r2, r3
 801afd8:	2280      	movs	r2, #128	@ 0x80
 801afda:	00d2      	lsls	r2, r2, #3
 801afdc:	4694      	mov	ip, r2
 801afde:	4463      	add	r3, ip
 801afe0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801afe2:	69bb      	ldr	r3, [r7, #24]
 801afe4:	627b      	str	r3, [r7, #36]	@ 0x24
 801afe6:	e020      	b.n	801b02a <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801afe8:	69fb      	ldr	r3, [r7, #28]
 801afea:	781a      	ldrb	r2, [r3, #0]
 801afec:	2112      	movs	r1, #18
 801afee:	187b      	adds	r3, r7, r1
 801aff0:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801aff2:	69fb      	ldr	r3, [r7, #28]
 801aff4:	3301      	adds	r3, #1
 801aff6:	781b      	ldrb	r3, [r3, #0]
 801aff8:	021b      	lsls	r3, r3, #8
 801affa:	b21a      	sxth	r2, r3
 801affc:	187b      	adds	r3, r7, r1
 801affe:	2000      	movs	r0, #0
 801b000:	5e1b      	ldrsh	r3, [r3, r0]
 801b002:	4313      	orrs	r3, r2
 801b004:	b21a      	sxth	r2, r3
 801b006:	187b      	adds	r3, r7, r1
 801b008:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801b00a:	6a3b      	ldr	r3, [r7, #32]
 801b00c:	187a      	adds	r2, r7, r1
 801b00e:	8812      	ldrh	r2, [r2, #0]
 801b010:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801b012:	6a3b      	ldr	r3, [r7, #32]
 801b014:	3302      	adds	r3, #2
 801b016:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801b018:	69fb      	ldr	r3, [r7, #28]
 801b01a:	3301      	adds	r3, #1
 801b01c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801b01e:	69fb      	ldr	r3, [r7, #28]
 801b020:	3301      	adds	r3, #1
 801b022:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b026:	3b01      	subs	r3, #1
 801b028:	627b      	str	r3, [r7, #36]	@ 0x24
 801b02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d1db      	bne.n	801afe8 <USB_WritePMA+0x40>
  }
}
 801b030:	46c0      	nop			@ (mov r8, r8)
 801b032:	46c0      	nop			@ (mov r8, r8)
 801b034:	46bd      	mov	sp, r7
 801b036:	b00a      	add	sp, #40	@ 0x28
 801b038:	bd80      	pop	{r7, pc}

0801b03a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801b03a:	b580      	push	{r7, lr}
 801b03c:	b08a      	sub	sp, #40	@ 0x28
 801b03e:	af00      	add	r7, sp, #0
 801b040:	60f8      	str	r0, [r7, #12]
 801b042:	60b9      	str	r1, [r7, #8]
 801b044:	0019      	movs	r1, r3
 801b046:	1dbb      	adds	r3, r7, #6
 801b048:	801a      	strh	r2, [r3, #0]
 801b04a:	1d3b      	adds	r3, r7, #4
 801b04c:	1c0a      	adds	r2, r1, #0
 801b04e:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801b050:	1d3b      	adds	r3, r7, #4
 801b052:	881b      	ldrh	r3, [r3, #0]
 801b054:	085b      	lsrs	r3, r3, #1
 801b056:	b29b      	uxth	r3, r3
 801b058:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801b05a:	68fb      	ldr	r3, [r7, #12]
 801b05c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801b05e:	68bb      	ldr	r3, [r7, #8]
 801b060:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801b062:	1dbb      	adds	r3, r7, #6
 801b064:	881a      	ldrh	r2, [r3, #0]
 801b066:	697b      	ldr	r3, [r7, #20]
 801b068:	18d3      	adds	r3, r2, r3
 801b06a:	2280      	movs	r2, #128	@ 0x80
 801b06c:	00d2      	lsls	r2, r2, #3
 801b06e:	4694      	mov	ip, r2
 801b070:	4463      	add	r3, ip
 801b072:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801b074:	69bb      	ldr	r3, [r7, #24]
 801b076:	627b      	str	r3, [r7, #36]	@ 0x24
 801b078:	e018      	b.n	801b0ac <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801b07a:	6a3b      	ldr	r3, [r7, #32]
 801b07c:	881b      	ldrh	r3, [r3, #0]
 801b07e:	b29b      	uxth	r3, r3
 801b080:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801b082:	6a3b      	ldr	r3, [r7, #32]
 801b084:	3302      	adds	r3, #2
 801b086:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b088:	693b      	ldr	r3, [r7, #16]
 801b08a:	b2da      	uxtb	r2, r3
 801b08c:	69fb      	ldr	r3, [r7, #28]
 801b08e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b090:	69fb      	ldr	r3, [r7, #28]
 801b092:	3301      	adds	r3, #1
 801b094:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801b096:	693b      	ldr	r3, [r7, #16]
 801b098:	0a1b      	lsrs	r3, r3, #8
 801b09a:	b2da      	uxtb	r2, r3
 801b09c:	69fb      	ldr	r3, [r7, #28]
 801b09e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801b0a0:	69fb      	ldr	r3, [r7, #28]
 801b0a2:	3301      	adds	r3, #1
 801b0a4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801b0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0a8:	3b01      	subs	r3, #1
 801b0aa:	627b      	str	r3, [r7, #36]	@ 0x24
 801b0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d1e3      	bne.n	801b07a <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801b0b2:	1d3b      	adds	r3, r7, #4
 801b0b4:	881b      	ldrh	r3, [r3, #0]
 801b0b6:	2201      	movs	r2, #1
 801b0b8:	4013      	ands	r3, r2
 801b0ba:	b29b      	uxth	r3, r3
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d007      	beq.n	801b0d0 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 801b0c0:	6a3b      	ldr	r3, [r7, #32]
 801b0c2:	881b      	ldrh	r3, [r3, #0]
 801b0c4:	b29b      	uxth	r3, r3
 801b0c6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801b0c8:	693b      	ldr	r3, [r7, #16]
 801b0ca:	b2da      	uxtb	r2, r3
 801b0cc:	69fb      	ldr	r3, [r7, #28]
 801b0ce:	701a      	strb	r2, [r3, #0]
  }
}
 801b0d0:	46c0      	nop			@ (mov r8, r8)
 801b0d2:	46bd      	mov	sp, r7
 801b0d4:	b00a      	add	sp, #40	@ 0x28
 801b0d6:	bd80      	pop	{r7, pc}

0801b0d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b0d8:	b580      	push	{r7, lr}
 801b0da:	b084      	sub	sp, #16
 801b0dc:	af00      	add	r7, sp, #0
 801b0de:	6078      	str	r0, [r7, #4]
 801b0e0:	000a      	movs	r2, r1
 801b0e2:	1cfb      	adds	r3, r7, #3
 801b0e4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b0e6:	230f      	movs	r3, #15
 801b0e8:	18fb      	adds	r3, r7, r3
 801b0ea:	2200      	movs	r2, #0
 801b0ec:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	7c1b      	ldrb	r3, [r3, #16]
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	d116      	bne.n	801b124 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b0f6:	2380      	movs	r3, #128	@ 0x80
 801b0f8:	009b      	lsls	r3, r3, #2
 801b0fa:	6878      	ldr	r0, [r7, #4]
 801b0fc:	2202      	movs	r2, #2
 801b0fe:	2181      	movs	r1, #129	@ 0x81
 801b100:	f002 f8eb 	bl	801d2da <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	2201      	movs	r2, #1
 801b108:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b10a:	2380      	movs	r3, #128	@ 0x80
 801b10c:	009b      	lsls	r3, r3, #2
 801b10e:	6878      	ldr	r0, [r7, #4]
 801b110:	2202      	movs	r2, #2
 801b112:	2101      	movs	r1, #1
 801b114:	f002 f8e1 	bl	801d2da <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b118:	687a      	ldr	r2, [r7, #4]
 801b11a:	23b6      	movs	r3, #182	@ 0xb6
 801b11c:	005b      	lsls	r3, r3, #1
 801b11e:	2101      	movs	r1, #1
 801b120:	50d1      	str	r1, [r2, r3]
 801b122:	e013      	b.n	801b14c <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801b124:	6878      	ldr	r0, [r7, #4]
 801b126:	2340      	movs	r3, #64	@ 0x40
 801b128:	2202      	movs	r2, #2
 801b12a:	2181      	movs	r1, #129	@ 0x81
 801b12c:	f002 f8d5 	bl	801d2da <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	2201      	movs	r2, #1
 801b134:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801b136:	6878      	ldr	r0, [r7, #4]
 801b138:	2340      	movs	r3, #64	@ 0x40
 801b13a:	2202      	movs	r2, #2
 801b13c:	2101      	movs	r1, #1
 801b13e:	f002 f8cc 	bl	801d2da <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801b142:	687a      	ldr	r2, [r7, #4]
 801b144:	23b6      	movs	r3, #182	@ 0xb6
 801b146:	005b      	lsls	r3, r3, #1
 801b148:	2101      	movs	r1, #1
 801b14a:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801b14c:	6878      	ldr	r0, [r7, #4]
 801b14e:	2308      	movs	r3, #8
 801b150:	2203      	movs	r2, #3
 801b152:	2182      	movs	r1, #130	@ 0x82
 801b154:	f002 f8c1 	bl	801d2da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	2201      	movs	r2, #1
 801b15c:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801b15e:	2387      	movs	r3, #135	@ 0x87
 801b160:	009b      	lsls	r3, r3, #2
 801b162:	0018      	movs	r0, r3
 801b164:	f002 fa52 	bl	801d60c <USBD_static_malloc>
 801b168:	0001      	movs	r1, r0
 801b16a:	687a      	ldr	r2, [r7, #4]
 801b16c:	23ae      	movs	r3, #174	@ 0xae
 801b16e:	009b      	lsls	r3, r3, #2
 801b170:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801b172:	687a      	ldr	r2, [r7, #4]
 801b174:	23ae      	movs	r3, #174	@ 0xae
 801b176:	009b      	lsls	r3, r3, #2
 801b178:	58d3      	ldr	r3, [r2, r3]
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d104      	bne.n	801b188 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 801b17e:	230f      	movs	r3, #15
 801b180:	18fb      	adds	r3, r7, r3
 801b182:	2201      	movs	r2, #1
 801b184:	701a      	strb	r2, [r3, #0]
 801b186:	e02c      	b.n	801b1e2 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b188:	687a      	ldr	r2, [r7, #4]
 801b18a:	23ae      	movs	r3, #174	@ 0xae
 801b18c:	009b      	lsls	r3, r3, #2
 801b18e:	58d3      	ldr	r3, [r2, r3]
 801b190:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801b192:	687a      	ldr	r2, [r7, #4]
 801b194:	23af      	movs	r3, #175	@ 0xaf
 801b196:	009b      	lsls	r3, r3, #2
 801b198:	58d3      	ldr	r3, [r2, r3]
 801b19a:	681b      	ldr	r3, [r3, #0]
 801b19c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801b19e:	68ba      	ldr	r2, [r7, #8]
 801b1a0:	2385      	movs	r3, #133	@ 0x85
 801b1a2:	009b      	lsls	r3, r3, #2
 801b1a4:	2100      	movs	r1, #0
 801b1a6:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801b1a8:	68ba      	ldr	r2, [r7, #8]
 801b1aa:	2386      	movs	r3, #134	@ 0x86
 801b1ac:	009b      	lsls	r3, r3, #2
 801b1ae:	2100      	movs	r1, #0
 801b1b0:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	7c1b      	ldrb	r3, [r3, #16]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d10a      	bne.n	801b1d0 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b1ba:	68ba      	ldr	r2, [r7, #8]
 801b1bc:	2381      	movs	r3, #129	@ 0x81
 801b1be:	009b      	lsls	r3, r3, #2
 801b1c0:	58d2      	ldr	r2, [r2, r3]
 801b1c2:	2380      	movs	r3, #128	@ 0x80
 801b1c4:	009b      	lsls	r3, r3, #2
 801b1c6:	6878      	ldr	r0, [r7, #4]
 801b1c8:	2101      	movs	r1, #1
 801b1ca:	f002 f9d1 	bl	801d570 <USBD_LL_PrepareReceive>
 801b1ce:	e008      	b.n	801b1e2 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801b1d0:	68ba      	ldr	r2, [r7, #8]
 801b1d2:	2381      	movs	r3, #129	@ 0x81
 801b1d4:	009b      	lsls	r3, r3, #2
 801b1d6:	58d2      	ldr	r2, [r2, r3]
 801b1d8:	6878      	ldr	r0, [r7, #4]
 801b1da:	2340      	movs	r3, #64	@ 0x40
 801b1dc:	2101      	movs	r1, #1
 801b1de:	f002 f9c7 	bl	801d570 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801b1e2:	230f      	movs	r3, #15
 801b1e4:	18fb      	adds	r3, r7, r3
 801b1e6:	781b      	ldrb	r3, [r3, #0]
}
 801b1e8:	0018      	movs	r0, r3
 801b1ea:	46bd      	mov	sp, r7
 801b1ec:	b004      	add	sp, #16
 801b1ee:	bd80      	pop	{r7, pc}

0801b1f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801b1f0:	b580      	push	{r7, lr}
 801b1f2:	b084      	sub	sp, #16
 801b1f4:	af00      	add	r7, sp, #0
 801b1f6:	6078      	str	r0, [r7, #4]
 801b1f8:	000a      	movs	r2, r1
 801b1fa:	1cfb      	adds	r3, r7, #3
 801b1fc:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801b1fe:	230f      	movs	r3, #15
 801b200:	18fb      	adds	r3, r7, r3
 801b202:	2200      	movs	r2, #0
 801b204:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	2181      	movs	r1, #129	@ 0x81
 801b20a:	0018      	movs	r0, r3
 801b20c:	f002 f89c 	bl	801d348 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	2200      	movs	r2, #0
 801b214:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	2101      	movs	r1, #1
 801b21a:	0018      	movs	r0, r3
 801b21c:	f002 f894 	bl	801d348 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801b220:	687a      	ldr	r2, [r7, #4]
 801b222:	23b6      	movs	r3, #182	@ 0xb6
 801b224:	005b      	lsls	r3, r3, #1
 801b226:	2100      	movs	r1, #0
 801b228:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	2182      	movs	r1, #130	@ 0x82
 801b22e:	0018      	movs	r0, r3
 801b230:	f002 f88a 	bl	801d348 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	2200      	movs	r2, #0
 801b238:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801b23a:	687a      	ldr	r2, [r7, #4]
 801b23c:	23ae      	movs	r3, #174	@ 0xae
 801b23e:	009b      	lsls	r3, r3, #2
 801b240:	58d3      	ldr	r3, [r2, r3]
 801b242:	2b00      	cmp	r3, #0
 801b244:	d011      	beq.n	801b26a <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801b246:	687a      	ldr	r2, [r7, #4]
 801b248:	23af      	movs	r3, #175	@ 0xaf
 801b24a:	009b      	lsls	r3, r3, #2
 801b24c:	58d3      	ldr	r3, [r2, r3]
 801b24e:	685b      	ldr	r3, [r3, #4]
 801b250:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801b252:	687a      	ldr	r2, [r7, #4]
 801b254:	23ae      	movs	r3, #174	@ 0xae
 801b256:	009b      	lsls	r3, r3, #2
 801b258:	58d3      	ldr	r3, [r2, r3]
 801b25a:	0018      	movs	r0, r3
 801b25c:	f002 f9e2 	bl	801d624 <USBD_static_free>
    pdev->pClassData = NULL;
 801b260:	687a      	ldr	r2, [r7, #4]
 801b262:	23ae      	movs	r3, #174	@ 0xae
 801b264:	009b      	lsls	r3, r3, #2
 801b266:	2100      	movs	r1, #0
 801b268:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801b26a:	230f      	movs	r3, #15
 801b26c:	18fb      	adds	r3, r7, r3
 801b26e:	781b      	ldrb	r3, [r3, #0]
}
 801b270:	0018      	movs	r0, r3
 801b272:	46bd      	mov	sp, r7
 801b274:	b004      	add	sp, #16
 801b276:	bd80      	pop	{r7, pc}

0801b278 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b278:	b580      	push	{r7, lr}
 801b27a:	b086      	sub	sp, #24
 801b27c:	af00      	add	r7, sp, #0
 801b27e:	6078      	str	r0, [r7, #4]
 801b280:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b282:	687a      	ldr	r2, [r7, #4]
 801b284:	23ae      	movs	r3, #174	@ 0xae
 801b286:	009b      	lsls	r3, r3, #2
 801b288:	58d3      	ldr	r3, [r2, r3]
 801b28a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801b28c:	230f      	movs	r3, #15
 801b28e:	18fb      	adds	r3, r7, r3
 801b290:	2200      	movs	r2, #0
 801b292:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801b294:	230c      	movs	r3, #12
 801b296:	18fb      	adds	r3, r7, r3
 801b298:	2200      	movs	r2, #0
 801b29a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801b29c:	2317      	movs	r3, #23
 801b29e:	18fb      	adds	r3, r7, r3
 801b2a0:	2200      	movs	r2, #0
 801b2a2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801b2a4:	683b      	ldr	r3, [r7, #0]
 801b2a6:	781b      	ldrb	r3, [r3, #0]
 801b2a8:	001a      	movs	r2, r3
 801b2aa:	2360      	movs	r3, #96	@ 0x60
 801b2ac:	4013      	ands	r3, r2
 801b2ae:	d03d      	beq.n	801b32c <USBD_CDC_Setup+0xb4>
 801b2b0:	2b20      	cmp	r3, #32
 801b2b2:	d000      	beq.n	801b2b6 <USBD_CDC_Setup+0x3e>
 801b2b4:	e094      	b.n	801b3e0 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801b2b6:	683b      	ldr	r3, [r7, #0]
 801b2b8:	88db      	ldrh	r3, [r3, #6]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d02b      	beq.n	801b316 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801b2be:	683b      	ldr	r3, [r7, #0]
 801b2c0:	781b      	ldrb	r3, [r3, #0]
 801b2c2:	b25b      	sxtb	r3, r3
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	da12      	bge.n	801b2ee <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b2c8:	687a      	ldr	r2, [r7, #4]
 801b2ca:	23af      	movs	r3, #175	@ 0xaf
 801b2cc:	009b      	lsls	r3, r3, #2
 801b2ce:	58d3      	ldr	r3, [r2, r3]
 801b2d0:	689b      	ldr	r3, [r3, #8]
 801b2d2:	683a      	ldr	r2, [r7, #0]
 801b2d4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801b2d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b2d8:	683a      	ldr	r2, [r7, #0]
 801b2da:	88d2      	ldrh	r2, [r2, #6]
 801b2dc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b2de:	6939      	ldr	r1, [r7, #16]
 801b2e0:	683b      	ldr	r3, [r7, #0]
 801b2e2:	88da      	ldrh	r2, [r3, #6]
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	0018      	movs	r0, r3
 801b2e8:	f001 fbaf 	bl	801ca4a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801b2ec:	e083      	b.n	801b3f6 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801b2ee:	683b      	ldr	r3, [r7, #0]
 801b2f0:	7859      	ldrb	r1, [r3, #1]
 801b2f2:	693a      	ldr	r2, [r7, #16]
 801b2f4:	2380      	movs	r3, #128	@ 0x80
 801b2f6:	009b      	lsls	r3, r3, #2
 801b2f8:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801b2fa:	683b      	ldr	r3, [r7, #0]
 801b2fc:	88db      	ldrh	r3, [r3, #6]
 801b2fe:	b2d9      	uxtb	r1, r3
 801b300:	693b      	ldr	r3, [r7, #16]
 801b302:	4a40      	ldr	r2, [pc, #256]	@ (801b404 <USBD_CDC_Setup+0x18c>)
 801b304:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801b306:	6939      	ldr	r1, [r7, #16]
 801b308:	683b      	ldr	r3, [r7, #0]
 801b30a:	88da      	ldrh	r2, [r3, #6]
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	0018      	movs	r0, r3
 801b310:	f001 fbce 	bl	801cab0 <USBD_CtlPrepareRx>
      break;
 801b314:	e06f      	b.n	801b3f6 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801b316:	687a      	ldr	r2, [r7, #4]
 801b318:	23af      	movs	r3, #175	@ 0xaf
 801b31a:	009b      	lsls	r3, r3, #2
 801b31c:	58d3      	ldr	r3, [r2, r3]
 801b31e:	689b      	ldr	r3, [r3, #8]
 801b320:	683a      	ldr	r2, [r7, #0]
 801b322:	7850      	ldrb	r0, [r2, #1]
 801b324:	6839      	ldr	r1, [r7, #0]
 801b326:	2200      	movs	r2, #0
 801b328:	4798      	blx	r3
      break;
 801b32a:	e064      	b.n	801b3f6 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801b32c:	683b      	ldr	r3, [r7, #0]
 801b32e:	785b      	ldrb	r3, [r3, #1]
 801b330:	2b0b      	cmp	r3, #11
 801b332:	d037      	beq.n	801b3a4 <USBD_CDC_Setup+0x12c>
 801b334:	dc47      	bgt.n	801b3c6 <USBD_CDC_Setup+0x14e>
 801b336:	2b00      	cmp	r3, #0
 801b338:	d002      	beq.n	801b340 <USBD_CDC_Setup+0xc8>
 801b33a:	2b0a      	cmp	r3, #10
 801b33c:	d019      	beq.n	801b372 <USBD_CDC_Setup+0xfa>
 801b33e:	e042      	b.n	801b3c6 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b340:	687a      	ldr	r2, [r7, #4]
 801b342:	23a7      	movs	r3, #167	@ 0xa7
 801b344:	009b      	lsls	r3, r3, #2
 801b346:	5cd3      	ldrb	r3, [r2, r3]
 801b348:	2b03      	cmp	r3, #3
 801b34a:	d107      	bne.n	801b35c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801b34c:	230c      	movs	r3, #12
 801b34e:	18f9      	adds	r1, r7, r3
 801b350:	687b      	ldr	r3, [r7, #4]
 801b352:	2202      	movs	r2, #2
 801b354:	0018      	movs	r0, r3
 801b356:	f001 fb78 	bl	801ca4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b35a:	e040      	b.n	801b3de <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b35c:	683a      	ldr	r2, [r7, #0]
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	0011      	movs	r1, r2
 801b362:	0018      	movs	r0, r3
 801b364:	f001 faf3 	bl	801c94e <USBD_CtlError>
            ret = USBD_FAIL;
 801b368:	2317      	movs	r3, #23
 801b36a:	18fb      	adds	r3, r7, r3
 801b36c:	2202      	movs	r2, #2
 801b36e:	701a      	strb	r2, [r3, #0]
          break;
 801b370:	e035      	b.n	801b3de <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b372:	687a      	ldr	r2, [r7, #4]
 801b374:	23a7      	movs	r3, #167	@ 0xa7
 801b376:	009b      	lsls	r3, r3, #2
 801b378:	5cd3      	ldrb	r3, [r2, r3]
 801b37a:	2b03      	cmp	r3, #3
 801b37c:	d107      	bne.n	801b38e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801b37e:	230f      	movs	r3, #15
 801b380:	18f9      	adds	r1, r7, r3
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	2201      	movs	r2, #1
 801b386:	0018      	movs	r0, r3
 801b388:	f001 fb5f 	bl	801ca4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801b38c:	e027      	b.n	801b3de <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801b38e:	683a      	ldr	r2, [r7, #0]
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	0011      	movs	r1, r2
 801b394:	0018      	movs	r0, r3
 801b396:	f001 fada 	bl	801c94e <USBD_CtlError>
            ret = USBD_FAIL;
 801b39a:	2317      	movs	r3, #23
 801b39c:	18fb      	adds	r3, r7, r3
 801b39e:	2202      	movs	r2, #2
 801b3a0:	701a      	strb	r2, [r3, #0]
          break;
 801b3a2:	e01c      	b.n	801b3de <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801b3a4:	687a      	ldr	r2, [r7, #4]
 801b3a6:	23a7      	movs	r3, #167	@ 0xa7
 801b3a8:	009b      	lsls	r3, r3, #2
 801b3aa:	5cd3      	ldrb	r3, [r2, r3]
 801b3ac:	2b03      	cmp	r3, #3
 801b3ae:	d015      	beq.n	801b3dc <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801b3b0:	683a      	ldr	r2, [r7, #0]
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	0011      	movs	r1, r2
 801b3b6:	0018      	movs	r0, r3
 801b3b8:	f001 fac9 	bl	801c94e <USBD_CtlError>
            ret = USBD_FAIL;
 801b3bc:	2317      	movs	r3, #23
 801b3be:	18fb      	adds	r3, r7, r3
 801b3c0:	2202      	movs	r2, #2
 801b3c2:	701a      	strb	r2, [r3, #0]
          }
          break;
 801b3c4:	e00a      	b.n	801b3dc <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801b3c6:	683a      	ldr	r2, [r7, #0]
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	0011      	movs	r1, r2
 801b3cc:	0018      	movs	r0, r3
 801b3ce:	f001 fabe 	bl	801c94e <USBD_CtlError>
          ret = USBD_FAIL;
 801b3d2:	2317      	movs	r3, #23
 801b3d4:	18fb      	adds	r3, r7, r3
 801b3d6:	2202      	movs	r2, #2
 801b3d8:	701a      	strb	r2, [r3, #0]
          break;
 801b3da:	e000      	b.n	801b3de <USBD_CDC_Setup+0x166>
          break;
 801b3dc:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b3de:	e00a      	b.n	801b3f6 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801b3e0:	683a      	ldr	r2, [r7, #0]
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	0011      	movs	r1, r2
 801b3e6:	0018      	movs	r0, r3
 801b3e8:	f001 fab1 	bl	801c94e <USBD_CtlError>
      ret = USBD_FAIL;
 801b3ec:	2317      	movs	r3, #23
 801b3ee:	18fb      	adds	r3, r7, r3
 801b3f0:	2202      	movs	r2, #2
 801b3f2:	701a      	strb	r2, [r3, #0]
      break;
 801b3f4:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b3f6:	2317      	movs	r3, #23
 801b3f8:	18fb      	adds	r3, r7, r3
 801b3fa:	781b      	ldrb	r3, [r3, #0]
}
 801b3fc:	0018      	movs	r0, r3
 801b3fe:	46bd      	mov	sp, r7
 801b400:	b006      	add	sp, #24
 801b402:	bd80      	pop	{r7, pc}
 801b404:	00000201 	.word	0x00000201

0801b408 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b408:	b580      	push	{r7, lr}
 801b40a:	b084      	sub	sp, #16
 801b40c:	af00      	add	r7, sp, #0
 801b40e:	6078      	str	r0, [r7, #4]
 801b410:	000a      	movs	r2, r1
 801b412:	1cfb      	adds	r3, r7, #3
 801b414:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801b416:	687a      	ldr	r2, [r7, #4]
 801b418:	23ae      	movs	r3, #174	@ 0xae
 801b41a:	009b      	lsls	r3, r3, #2
 801b41c:	58d3      	ldr	r3, [r2, r3]
 801b41e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801b420:	687a      	ldr	r2, [r7, #4]
 801b422:	23b0      	movs	r3, #176	@ 0xb0
 801b424:	009b      	lsls	r3, r3, #2
 801b426:	58d3      	ldr	r3, [r2, r3]
 801b428:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801b42a:	687a      	ldr	r2, [r7, #4]
 801b42c:	23ae      	movs	r3, #174	@ 0xae
 801b42e:	009b      	lsls	r3, r3, #2
 801b430:	58d3      	ldr	r3, [r2, r3]
 801b432:	2b00      	cmp	r3, #0
 801b434:	d03e      	beq.n	801b4b4 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801b436:	1cfb      	adds	r3, r7, #3
 801b438:	781a      	ldrb	r2, [r3, #0]
 801b43a:	6879      	ldr	r1, [r7, #4]
 801b43c:	0013      	movs	r3, r2
 801b43e:	009b      	lsls	r3, r3, #2
 801b440:	189b      	adds	r3, r3, r2
 801b442:	009b      	lsls	r3, r3, #2
 801b444:	18cb      	adds	r3, r1, r3
 801b446:	331c      	adds	r3, #28
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d02b      	beq.n	801b4a6 <USBD_CDC_DataIn+0x9e>
 801b44e:	1cfb      	adds	r3, r7, #3
 801b450:	781a      	ldrb	r2, [r3, #0]
 801b452:	6879      	ldr	r1, [r7, #4]
 801b454:	0013      	movs	r3, r2
 801b456:	009b      	lsls	r3, r3, #2
 801b458:	189b      	adds	r3, r3, r2
 801b45a:	009b      	lsls	r3, r3, #2
 801b45c:	18cb      	adds	r3, r1, r3
 801b45e:	331c      	adds	r3, #28
 801b460:	6818      	ldr	r0, [r3, #0]
 801b462:	1cfb      	adds	r3, r7, #3
 801b464:	781a      	ldrb	r2, [r3, #0]
 801b466:	68b9      	ldr	r1, [r7, #8]
 801b468:	0013      	movs	r3, r2
 801b46a:	009b      	lsls	r3, r3, #2
 801b46c:	189b      	adds	r3, r3, r2
 801b46e:	00db      	lsls	r3, r3, #3
 801b470:	18cb      	adds	r3, r1, r3
 801b472:	3338      	adds	r3, #56	@ 0x38
 801b474:	681b      	ldr	r3, [r3, #0]
 801b476:	0019      	movs	r1, r3
 801b478:	f7e4 ff1a 	bl	80002b0 <__aeabi_uidivmod>
 801b47c:	1e0b      	subs	r3, r1, #0
 801b47e:	d112      	bne.n	801b4a6 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801b480:	1cfb      	adds	r3, r7, #3
 801b482:	781a      	ldrb	r2, [r3, #0]
 801b484:	6879      	ldr	r1, [r7, #4]
 801b486:	0013      	movs	r3, r2
 801b488:	009b      	lsls	r3, r3, #2
 801b48a:	189b      	adds	r3, r3, r2
 801b48c:	009b      	lsls	r3, r3, #2
 801b48e:	18cb      	adds	r3, r1, r3
 801b490:	331c      	adds	r3, #28
 801b492:	2200      	movs	r2, #0
 801b494:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801b496:	1cfb      	adds	r3, r7, #3
 801b498:	7819      	ldrb	r1, [r3, #0]
 801b49a:	6878      	ldr	r0, [r7, #4]
 801b49c:	2300      	movs	r3, #0
 801b49e:	2200      	movs	r2, #0
 801b4a0:	f002 f82f 	bl	801d502 <USBD_LL_Transmit>
 801b4a4:	e004      	b.n	801b4b0 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801b4a6:	68fa      	ldr	r2, [r7, #12]
 801b4a8:	2385      	movs	r3, #133	@ 0x85
 801b4aa:	009b      	lsls	r3, r3, #2
 801b4ac:	2100      	movs	r1, #0
 801b4ae:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801b4b0:	2300      	movs	r3, #0
 801b4b2:	e000      	b.n	801b4b6 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801b4b4:	2302      	movs	r3, #2
  }
}
 801b4b6:	0018      	movs	r0, r3
 801b4b8:	46bd      	mov	sp, r7
 801b4ba:	b004      	add	sp, #16
 801b4bc:	bd80      	pop	{r7, pc}

0801b4be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801b4be:	b580      	push	{r7, lr}
 801b4c0:	b084      	sub	sp, #16
 801b4c2:	af00      	add	r7, sp, #0
 801b4c4:	6078      	str	r0, [r7, #4]
 801b4c6:	000a      	movs	r2, r1
 801b4c8:	1cfb      	adds	r3, r7, #3
 801b4ca:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b4cc:	687a      	ldr	r2, [r7, #4]
 801b4ce:	23ae      	movs	r3, #174	@ 0xae
 801b4d0:	009b      	lsls	r3, r3, #2
 801b4d2:	58d3      	ldr	r3, [r2, r3]
 801b4d4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801b4d6:	1cfb      	adds	r3, r7, #3
 801b4d8:	781a      	ldrb	r2, [r3, #0]
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	0011      	movs	r1, r2
 801b4de:	0018      	movs	r0, r3
 801b4e0:	f002 f87d 	bl	801d5de <USBD_LL_GetRxDataSize>
 801b4e4:	0001      	movs	r1, r0
 801b4e6:	68fa      	ldr	r2, [r7, #12]
 801b4e8:	2383      	movs	r3, #131	@ 0x83
 801b4ea:	009b      	lsls	r3, r3, #2
 801b4ec:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801b4ee:	687a      	ldr	r2, [r7, #4]
 801b4f0:	23ae      	movs	r3, #174	@ 0xae
 801b4f2:	009b      	lsls	r3, r3, #2
 801b4f4:	58d3      	ldr	r3, [r2, r3]
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d011      	beq.n	801b51e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801b4fa:	687a      	ldr	r2, [r7, #4]
 801b4fc:	23af      	movs	r3, #175	@ 0xaf
 801b4fe:	009b      	lsls	r3, r3, #2
 801b500:	58d3      	ldr	r3, [r2, r3]
 801b502:	68da      	ldr	r2, [r3, #12]
 801b504:	68f9      	ldr	r1, [r7, #12]
 801b506:	2381      	movs	r3, #129	@ 0x81
 801b508:	009b      	lsls	r3, r3, #2
 801b50a:	58c8      	ldr	r0, [r1, r3]
 801b50c:	68fb      	ldr	r3, [r7, #12]
 801b50e:	2183      	movs	r1, #131	@ 0x83
 801b510:	0089      	lsls	r1, r1, #2
 801b512:	468c      	mov	ip, r1
 801b514:	4463      	add	r3, ip
 801b516:	0019      	movs	r1, r3
 801b518:	4790      	blx	r2

    return USBD_OK;
 801b51a:	2300      	movs	r3, #0
 801b51c:	e000      	b.n	801b520 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801b51e:	2302      	movs	r3, #2
  }
}
 801b520:	0018      	movs	r0, r3
 801b522:	46bd      	mov	sp, r7
 801b524:	b004      	add	sp, #16
 801b526:	bd80      	pop	{r7, pc}

0801b528 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801b528:	b590      	push	{r4, r7, lr}
 801b52a:	b085      	sub	sp, #20
 801b52c:	af00      	add	r7, sp, #0
 801b52e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b530:	687a      	ldr	r2, [r7, #4]
 801b532:	23ae      	movs	r3, #174	@ 0xae
 801b534:	009b      	lsls	r3, r3, #2
 801b536:	58d3      	ldr	r3, [r2, r3]
 801b538:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801b53a:	687a      	ldr	r2, [r7, #4]
 801b53c:	23af      	movs	r3, #175	@ 0xaf
 801b53e:	009b      	lsls	r3, r3, #2
 801b540:	58d3      	ldr	r3, [r2, r3]
 801b542:	2b00      	cmp	r3, #0
 801b544:	d018      	beq.n	801b578 <USBD_CDC_EP0_RxReady+0x50>
 801b546:	68fa      	ldr	r2, [r7, #12]
 801b548:	2380      	movs	r3, #128	@ 0x80
 801b54a:	009b      	lsls	r3, r3, #2
 801b54c:	5cd3      	ldrb	r3, [r2, r3]
 801b54e:	2bff      	cmp	r3, #255	@ 0xff
 801b550:	d012      	beq.n	801b578 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801b552:	687a      	ldr	r2, [r7, #4]
 801b554:	23af      	movs	r3, #175	@ 0xaf
 801b556:	009b      	lsls	r3, r3, #2
 801b558:	58d3      	ldr	r3, [r2, r3]
 801b55a:	689b      	ldr	r3, [r3, #8]
 801b55c:	68f9      	ldr	r1, [r7, #12]
 801b55e:	2280      	movs	r2, #128	@ 0x80
 801b560:	0092      	lsls	r2, r2, #2
 801b562:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801b564:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801b566:	68fa      	ldr	r2, [r7, #12]
 801b568:	4c06      	ldr	r4, [pc, #24]	@ (801b584 <USBD_CDC_EP0_RxReady+0x5c>)
 801b56a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801b56c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801b56e:	68fa      	ldr	r2, [r7, #12]
 801b570:	2380      	movs	r3, #128	@ 0x80
 801b572:	009b      	lsls	r3, r3, #2
 801b574:	21ff      	movs	r1, #255	@ 0xff
 801b576:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801b578:	2300      	movs	r3, #0
}
 801b57a:	0018      	movs	r0, r3
 801b57c:	46bd      	mov	sp, r7
 801b57e:	b005      	add	sp, #20
 801b580:	bd90      	pop	{r4, r7, pc}
 801b582:	46c0      	nop			@ (mov r8, r8)
 801b584:	00000201 	.word	0x00000201

0801b588 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801b588:	b580      	push	{r7, lr}
 801b58a:	b082      	sub	sp, #8
 801b58c:	af00      	add	r7, sp, #0
 801b58e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	2243      	movs	r2, #67	@ 0x43
 801b594:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801b596:	4b02      	ldr	r3, [pc, #8]	@ (801b5a0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801b598:	0018      	movs	r0, r3
 801b59a:	46bd      	mov	sp, r7
 801b59c:	b002      	add	sp, #8
 801b59e:	bd80      	pop	{r7, pc}
 801b5a0:	2000016c 	.word	0x2000016c

0801b5a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801b5a4:	b580      	push	{r7, lr}
 801b5a6:	b082      	sub	sp, #8
 801b5a8:	af00      	add	r7, sp, #0
 801b5aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	2243      	movs	r2, #67	@ 0x43
 801b5b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801b5b2:	4b02      	ldr	r3, [pc, #8]	@ (801b5bc <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801b5b4:	0018      	movs	r0, r3
 801b5b6:	46bd      	mov	sp, r7
 801b5b8:	b002      	add	sp, #8
 801b5ba:	bd80      	pop	{r7, pc}
 801b5bc:	20000128 	.word	0x20000128

0801b5c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801b5c0:	b580      	push	{r7, lr}
 801b5c2:	b082      	sub	sp, #8
 801b5c4:	af00      	add	r7, sp, #0
 801b5c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	2243      	movs	r2, #67	@ 0x43
 801b5cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801b5ce:	4b02      	ldr	r3, [pc, #8]	@ (801b5d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801b5d0:	0018      	movs	r0, r3
 801b5d2:	46bd      	mov	sp, r7
 801b5d4:	b002      	add	sp, #8
 801b5d6:	bd80      	pop	{r7, pc}
 801b5d8:	200001b0 	.word	0x200001b0

0801b5dc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801b5dc:	b580      	push	{r7, lr}
 801b5de:	b082      	sub	sp, #8
 801b5e0:	af00      	add	r7, sp, #0
 801b5e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	220a      	movs	r2, #10
 801b5e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801b5ea:	4b02      	ldr	r3, [pc, #8]	@ (801b5f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801b5ec:	0018      	movs	r0, r3
 801b5ee:	46bd      	mov	sp, r7
 801b5f0:	b002      	add	sp, #8
 801b5f2:	bd80      	pop	{r7, pc}
 801b5f4:	200000e4 	.word	0x200000e4

0801b5f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801b5f8:	b580      	push	{r7, lr}
 801b5fa:	b084      	sub	sp, #16
 801b5fc:	af00      	add	r7, sp, #0
 801b5fe:	6078      	str	r0, [r7, #4]
 801b600:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801b602:	200f      	movs	r0, #15
 801b604:	183b      	adds	r3, r7, r0
 801b606:	2202      	movs	r2, #2
 801b608:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801b60a:	683b      	ldr	r3, [r7, #0]
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	d007      	beq.n	801b620 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801b610:	687a      	ldr	r2, [r7, #4]
 801b612:	23af      	movs	r3, #175	@ 0xaf
 801b614:	009b      	lsls	r3, r3, #2
 801b616:	6839      	ldr	r1, [r7, #0]
 801b618:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801b61a:	183b      	adds	r3, r7, r0
 801b61c:	2200      	movs	r2, #0
 801b61e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801b620:	230f      	movs	r3, #15
 801b622:	18fb      	adds	r3, r7, r3
 801b624:	781b      	ldrb	r3, [r3, #0]
}
 801b626:	0018      	movs	r0, r3
 801b628:	46bd      	mov	sp, r7
 801b62a:	b004      	add	sp, #16
 801b62c:	bd80      	pop	{r7, pc}

0801b62e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801b62e:	b580      	push	{r7, lr}
 801b630:	b086      	sub	sp, #24
 801b632:	af00      	add	r7, sp, #0
 801b634:	60f8      	str	r0, [r7, #12]
 801b636:	60b9      	str	r1, [r7, #8]
 801b638:	1dbb      	adds	r3, r7, #6
 801b63a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b63c:	68fa      	ldr	r2, [r7, #12]
 801b63e:	23ae      	movs	r3, #174	@ 0xae
 801b640:	009b      	lsls	r3, r3, #2
 801b642:	58d3      	ldr	r3, [r2, r3]
 801b644:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801b646:	697a      	ldr	r2, [r7, #20]
 801b648:	2382      	movs	r3, #130	@ 0x82
 801b64a:	009b      	lsls	r3, r3, #2
 801b64c:	68b9      	ldr	r1, [r7, #8]
 801b64e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801b650:	1dbb      	adds	r3, r7, #6
 801b652:	8819      	ldrh	r1, [r3, #0]
 801b654:	697a      	ldr	r2, [r7, #20]
 801b656:	2384      	movs	r3, #132	@ 0x84
 801b658:	009b      	lsls	r3, r3, #2
 801b65a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b65c:	2300      	movs	r3, #0
}
 801b65e:	0018      	movs	r0, r3
 801b660:	46bd      	mov	sp, r7
 801b662:	b006      	add	sp, #24
 801b664:	bd80      	pop	{r7, pc}

0801b666 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801b666:	b580      	push	{r7, lr}
 801b668:	b084      	sub	sp, #16
 801b66a:	af00      	add	r7, sp, #0
 801b66c:	6078      	str	r0, [r7, #4]
 801b66e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b670:	687a      	ldr	r2, [r7, #4]
 801b672:	23ae      	movs	r3, #174	@ 0xae
 801b674:	009b      	lsls	r3, r3, #2
 801b676:	58d3      	ldr	r3, [r2, r3]
 801b678:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801b67a:	68fa      	ldr	r2, [r7, #12]
 801b67c:	2381      	movs	r3, #129	@ 0x81
 801b67e:	009b      	lsls	r3, r3, #2
 801b680:	6839      	ldr	r1, [r7, #0]
 801b682:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801b684:	2300      	movs	r3, #0
}
 801b686:	0018      	movs	r0, r3
 801b688:	46bd      	mov	sp, r7
 801b68a:	b004      	add	sp, #16
 801b68c:	bd80      	pop	{r7, pc}

0801b68e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801b68e:	b580      	push	{r7, lr}
 801b690:	b084      	sub	sp, #16
 801b692:	af00      	add	r7, sp, #0
 801b694:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b696:	687a      	ldr	r2, [r7, #4]
 801b698:	23ae      	movs	r3, #174	@ 0xae
 801b69a:	009b      	lsls	r3, r3, #2
 801b69c:	58d3      	ldr	r3, [r2, r3]
 801b69e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801b6a0:	687a      	ldr	r2, [r7, #4]
 801b6a2:	23ae      	movs	r3, #174	@ 0xae
 801b6a4:	009b      	lsls	r3, r3, #2
 801b6a6:	58d3      	ldr	r3, [r2, r3]
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	d022      	beq.n	801b6f2 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801b6ac:	68fa      	ldr	r2, [r7, #12]
 801b6ae:	2385      	movs	r3, #133	@ 0x85
 801b6b0:	009b      	lsls	r3, r3, #2
 801b6b2:	58d3      	ldr	r3, [r2, r3]
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d11a      	bne.n	801b6ee <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801b6b8:	68fa      	ldr	r2, [r7, #12]
 801b6ba:	2385      	movs	r3, #133	@ 0x85
 801b6bc:	009b      	lsls	r3, r3, #2
 801b6be:	2101      	movs	r1, #1
 801b6c0:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801b6c2:	68fa      	ldr	r2, [r7, #12]
 801b6c4:	2384      	movs	r3, #132	@ 0x84
 801b6c6:	009b      	lsls	r3, r3, #2
 801b6c8:	58d2      	ldr	r2, [r2, r3]
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b6ce:	68fa      	ldr	r2, [r7, #12]
 801b6d0:	2382      	movs	r3, #130	@ 0x82
 801b6d2:	009b      	lsls	r3, r3, #2
 801b6d4:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801b6d6:	68fa      	ldr	r2, [r7, #12]
 801b6d8:	2384      	movs	r3, #132	@ 0x84
 801b6da:	009b      	lsls	r3, r3, #2
 801b6dc:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801b6de:	b29b      	uxth	r3, r3
 801b6e0:	6878      	ldr	r0, [r7, #4]
 801b6e2:	000a      	movs	r2, r1
 801b6e4:	2181      	movs	r1, #129	@ 0x81
 801b6e6:	f001 ff0c 	bl	801d502 <USBD_LL_Transmit>

      return USBD_OK;
 801b6ea:	2300      	movs	r3, #0
 801b6ec:	e002      	b.n	801b6f4 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801b6ee:	2301      	movs	r3, #1
 801b6f0:	e000      	b.n	801b6f4 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801b6f2:	2302      	movs	r3, #2
  }
}
 801b6f4:	0018      	movs	r0, r3
 801b6f6:	46bd      	mov	sp, r7
 801b6f8:	b004      	add	sp, #16
 801b6fa:	bd80      	pop	{r7, pc}

0801b6fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801b6fc:	b580      	push	{r7, lr}
 801b6fe:	b084      	sub	sp, #16
 801b700:	af00      	add	r7, sp, #0
 801b702:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801b704:	687a      	ldr	r2, [r7, #4]
 801b706:	23ae      	movs	r3, #174	@ 0xae
 801b708:	009b      	lsls	r3, r3, #2
 801b70a:	58d3      	ldr	r3, [r2, r3]
 801b70c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801b70e:	687a      	ldr	r2, [r7, #4]
 801b710:	23ae      	movs	r3, #174	@ 0xae
 801b712:	009b      	lsls	r3, r3, #2
 801b714:	58d3      	ldr	r3, [r2, r3]
 801b716:	2b00      	cmp	r3, #0
 801b718:	d019      	beq.n	801b74e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	7c1b      	ldrb	r3, [r3, #16]
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d10a      	bne.n	801b738 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b722:	68fa      	ldr	r2, [r7, #12]
 801b724:	2381      	movs	r3, #129	@ 0x81
 801b726:	009b      	lsls	r3, r3, #2
 801b728:	58d2      	ldr	r2, [r2, r3]
 801b72a:	2380      	movs	r3, #128	@ 0x80
 801b72c:	009b      	lsls	r3, r3, #2
 801b72e:	6878      	ldr	r0, [r7, #4]
 801b730:	2101      	movs	r1, #1
 801b732:	f001 ff1d 	bl	801d570 <USBD_LL_PrepareReceive>
 801b736:	e008      	b.n	801b74a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801b738:	68fa      	ldr	r2, [r7, #12]
 801b73a:	2381      	movs	r3, #129	@ 0x81
 801b73c:	009b      	lsls	r3, r3, #2
 801b73e:	58d2      	ldr	r2, [r2, r3]
 801b740:	6878      	ldr	r0, [r7, #4]
 801b742:	2340      	movs	r3, #64	@ 0x40
 801b744:	2101      	movs	r1, #1
 801b746:	f001 ff13 	bl	801d570 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801b74a:	2300      	movs	r3, #0
 801b74c:	e000      	b.n	801b750 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801b74e:	2302      	movs	r3, #2
  }
}
 801b750:	0018      	movs	r0, r3
 801b752:	46bd      	mov	sp, r7
 801b754:	b004      	add	sp, #16
 801b756:	bd80      	pop	{r7, pc}

0801b758 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801b758:	b580      	push	{r7, lr}
 801b75a:	b084      	sub	sp, #16
 801b75c:	af00      	add	r7, sp, #0
 801b75e:	60f8      	str	r0, [r7, #12]
 801b760:	60b9      	str	r1, [r7, #8]
 801b762:	1dfb      	adds	r3, r7, #7
 801b764:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801b766:	68fb      	ldr	r3, [r7, #12]
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d101      	bne.n	801b770 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801b76c:	2302      	movs	r3, #2
 801b76e:	e020      	b.n	801b7b2 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801b770:	68fa      	ldr	r2, [r7, #12]
 801b772:	23ad      	movs	r3, #173	@ 0xad
 801b774:	009b      	lsls	r3, r3, #2
 801b776:	58d3      	ldr	r3, [r2, r3]
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d004      	beq.n	801b786 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801b77c:	68fa      	ldr	r2, [r7, #12]
 801b77e:	23ad      	movs	r3, #173	@ 0xad
 801b780:	009b      	lsls	r3, r3, #2
 801b782:	2100      	movs	r1, #0
 801b784:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801b786:	68bb      	ldr	r3, [r7, #8]
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d004      	beq.n	801b796 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801b78c:	68fa      	ldr	r2, [r7, #12]
 801b78e:	23ac      	movs	r3, #172	@ 0xac
 801b790:	009b      	lsls	r3, r3, #2
 801b792:	68b9      	ldr	r1, [r7, #8]
 801b794:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801b796:	68fa      	ldr	r2, [r7, #12]
 801b798:	23a7      	movs	r3, #167	@ 0xa7
 801b79a:	009b      	lsls	r3, r3, #2
 801b79c:	2101      	movs	r1, #1
 801b79e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801b7a0:	68fb      	ldr	r3, [r7, #12]
 801b7a2:	1dfa      	adds	r2, r7, #7
 801b7a4:	7812      	ldrb	r2, [r2, #0]
 801b7a6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801b7a8:	68fb      	ldr	r3, [r7, #12]
 801b7aa:	0018      	movs	r0, r3
 801b7ac:	f001 fd0c 	bl	801d1c8 <USBD_LL_Init>

  return USBD_OK;
 801b7b0:	2300      	movs	r3, #0
}
 801b7b2:	0018      	movs	r0, r3
 801b7b4:	46bd      	mov	sp, r7
 801b7b6:	b004      	add	sp, #16
 801b7b8:	bd80      	pop	{r7, pc}

0801b7ba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801b7ba:	b580      	push	{r7, lr}
 801b7bc:	b084      	sub	sp, #16
 801b7be:	af00      	add	r7, sp, #0
 801b7c0:	6078      	str	r0, [r7, #4]
 801b7c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801b7c4:	200f      	movs	r0, #15
 801b7c6:	183b      	adds	r3, r7, r0
 801b7c8:	2200      	movs	r2, #0
 801b7ca:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801b7cc:	683b      	ldr	r3, [r7, #0]
 801b7ce:	2b00      	cmp	r3, #0
 801b7d0:	d008      	beq.n	801b7e4 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801b7d2:	687a      	ldr	r2, [r7, #4]
 801b7d4:	23ad      	movs	r3, #173	@ 0xad
 801b7d6:	009b      	lsls	r3, r3, #2
 801b7d8:	6839      	ldr	r1, [r7, #0]
 801b7da:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801b7dc:	183b      	adds	r3, r7, r0
 801b7de:	2200      	movs	r2, #0
 801b7e0:	701a      	strb	r2, [r3, #0]
 801b7e2:	e003      	b.n	801b7ec <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801b7e4:	230f      	movs	r3, #15
 801b7e6:	18fb      	adds	r3, r7, r3
 801b7e8:	2202      	movs	r2, #2
 801b7ea:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801b7ec:	230f      	movs	r3, #15
 801b7ee:	18fb      	adds	r3, r7, r3
 801b7f0:	781b      	ldrb	r3, [r3, #0]
}
 801b7f2:	0018      	movs	r0, r3
 801b7f4:	46bd      	mov	sp, r7
 801b7f6:	b004      	add	sp, #16
 801b7f8:	bd80      	pop	{r7, pc}

0801b7fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801b7fa:	b580      	push	{r7, lr}
 801b7fc:	b082      	sub	sp, #8
 801b7fe:	af00      	add	r7, sp, #0
 801b800:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801b802:	687b      	ldr	r3, [r7, #4]
 801b804:	0018      	movs	r0, r3
 801b806:	f001 fd43 	bl	801d290 <USBD_LL_Start>

  return USBD_OK;
 801b80a:	2300      	movs	r3, #0
}
 801b80c:	0018      	movs	r0, r3
 801b80e:	46bd      	mov	sp, r7
 801b810:	b002      	add	sp, #8
 801b812:	bd80      	pop	{r7, pc}

0801b814 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801b814:	b580      	push	{r7, lr}
 801b816:	b082      	sub	sp, #8
 801b818:	af00      	add	r7, sp, #0
 801b81a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801b81c:	2300      	movs	r3, #0
}
 801b81e:	0018      	movs	r0, r3
 801b820:	46bd      	mov	sp, r7
 801b822:	b002      	add	sp, #8
 801b824:	bd80      	pop	{r7, pc}

0801b826 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801b826:	b590      	push	{r4, r7, lr}
 801b828:	b085      	sub	sp, #20
 801b82a:	af00      	add	r7, sp, #0
 801b82c:	6078      	str	r0, [r7, #4]
 801b82e:	000a      	movs	r2, r1
 801b830:	1cfb      	adds	r3, r7, #3
 801b832:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801b834:	240f      	movs	r4, #15
 801b836:	193b      	adds	r3, r7, r4
 801b838:	2202      	movs	r2, #2
 801b83a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801b83c:	687a      	ldr	r2, [r7, #4]
 801b83e:	23ad      	movs	r3, #173	@ 0xad
 801b840:	009b      	lsls	r3, r3, #2
 801b842:	58d3      	ldr	r3, [r2, r3]
 801b844:	2b00      	cmp	r3, #0
 801b846:	d00e      	beq.n	801b866 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801b848:	687a      	ldr	r2, [r7, #4]
 801b84a:	23ad      	movs	r3, #173	@ 0xad
 801b84c:	009b      	lsls	r3, r3, #2
 801b84e:	58d3      	ldr	r3, [r2, r3]
 801b850:	681b      	ldr	r3, [r3, #0]
 801b852:	1cfa      	adds	r2, r7, #3
 801b854:	7811      	ldrb	r1, [r2, #0]
 801b856:	687a      	ldr	r2, [r7, #4]
 801b858:	0010      	movs	r0, r2
 801b85a:	4798      	blx	r3
 801b85c:	1e03      	subs	r3, r0, #0
 801b85e:	d102      	bne.n	801b866 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801b860:	193b      	adds	r3, r7, r4
 801b862:	2200      	movs	r2, #0
 801b864:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801b866:	230f      	movs	r3, #15
 801b868:	18fb      	adds	r3, r7, r3
 801b86a:	781b      	ldrb	r3, [r3, #0]
}
 801b86c:	0018      	movs	r0, r3
 801b86e:	46bd      	mov	sp, r7
 801b870:	b005      	add	sp, #20
 801b872:	bd90      	pop	{r4, r7, pc}

0801b874 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801b874:	b580      	push	{r7, lr}
 801b876:	b082      	sub	sp, #8
 801b878:	af00      	add	r7, sp, #0
 801b87a:	6078      	str	r0, [r7, #4]
 801b87c:	000a      	movs	r2, r1
 801b87e:	1cfb      	adds	r3, r7, #3
 801b880:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801b882:	687a      	ldr	r2, [r7, #4]
 801b884:	23ad      	movs	r3, #173	@ 0xad
 801b886:	009b      	lsls	r3, r3, #2
 801b888:	58d3      	ldr	r3, [r2, r3]
 801b88a:	685b      	ldr	r3, [r3, #4]
 801b88c:	1cfa      	adds	r2, r7, #3
 801b88e:	7811      	ldrb	r1, [r2, #0]
 801b890:	687a      	ldr	r2, [r7, #4]
 801b892:	0010      	movs	r0, r2
 801b894:	4798      	blx	r3

  return USBD_OK;
 801b896:	2300      	movs	r3, #0
}
 801b898:	0018      	movs	r0, r3
 801b89a:	46bd      	mov	sp, r7
 801b89c:	b002      	add	sp, #8
 801b89e:	bd80      	pop	{r7, pc}

0801b8a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801b8a0:	b580      	push	{r7, lr}
 801b8a2:	b082      	sub	sp, #8
 801b8a4:	af00      	add	r7, sp, #0
 801b8a6:	6078      	str	r0, [r7, #4]
 801b8a8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	22aa      	movs	r2, #170	@ 0xaa
 801b8ae:	0092      	lsls	r2, r2, #2
 801b8b0:	4694      	mov	ip, r2
 801b8b2:	4463      	add	r3, ip
 801b8b4:	683a      	ldr	r2, [r7, #0]
 801b8b6:	0011      	movs	r1, r2
 801b8b8:	0018      	movs	r0, r3
 801b8ba:	f001 f810 	bl	801c8de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801b8be:	687a      	ldr	r2, [r7, #4]
 801b8c0:	23a5      	movs	r3, #165	@ 0xa5
 801b8c2:	009b      	lsls	r3, r3, #2
 801b8c4:	2101      	movs	r1, #1
 801b8c6:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	4a23      	ldr	r2, [pc, #140]	@ (801b958 <USBD_LL_SetupStage+0xb8>)
 801b8cc:	5a9b      	ldrh	r3, [r3, r2]
 801b8ce:	0019      	movs	r1, r3
 801b8d0:	687a      	ldr	r2, [r7, #4]
 801b8d2:	23a6      	movs	r3, #166	@ 0xa6
 801b8d4:	009b      	lsls	r3, r3, #2
 801b8d6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801b8d8:	687a      	ldr	r2, [r7, #4]
 801b8da:	23aa      	movs	r3, #170	@ 0xaa
 801b8dc:	009b      	lsls	r3, r3, #2
 801b8de:	5cd3      	ldrb	r3, [r2, r3]
 801b8e0:	001a      	movs	r2, r3
 801b8e2:	231f      	movs	r3, #31
 801b8e4:	4013      	ands	r3, r2
 801b8e6:	2b02      	cmp	r3, #2
 801b8e8:	d019      	beq.n	801b91e <USBD_LL_SetupStage+0x7e>
 801b8ea:	d822      	bhi.n	801b932 <USBD_LL_SetupStage+0x92>
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	d002      	beq.n	801b8f6 <USBD_LL_SetupStage+0x56>
 801b8f0:	2b01      	cmp	r3, #1
 801b8f2:	d00a      	beq.n	801b90a <USBD_LL_SetupStage+0x6a>
 801b8f4:	e01d      	b.n	801b932 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	22aa      	movs	r2, #170	@ 0xaa
 801b8fa:	0092      	lsls	r2, r2, #2
 801b8fc:	189a      	adds	r2, r3, r2
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	0011      	movs	r1, r2
 801b902:	0018      	movs	r0, r3
 801b904:	f000 fa10 	bl	801bd28 <USBD_StdDevReq>
      break;
 801b908:	e020      	b.n	801b94c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	22aa      	movs	r2, #170	@ 0xaa
 801b90e:	0092      	lsls	r2, r2, #2
 801b910:	189a      	adds	r2, r3, r2
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	0011      	movs	r1, r2
 801b916:	0018      	movs	r0, r3
 801b918:	f000 fa78 	bl	801be0c <USBD_StdItfReq>
      break;
 801b91c:	e016      	b.n	801b94c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	22aa      	movs	r2, #170	@ 0xaa
 801b922:	0092      	lsls	r2, r2, #2
 801b924:	189a      	adds	r2, r3, r2
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	0011      	movs	r1, r2
 801b92a:	0018      	movs	r0, r3
 801b92c:	f000 fac5 	bl	801beba <USBD_StdEPReq>
      break;
 801b930:	e00c      	b.n	801b94c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801b932:	687a      	ldr	r2, [r7, #4]
 801b934:	23aa      	movs	r3, #170	@ 0xaa
 801b936:	009b      	lsls	r3, r3, #2
 801b938:	5cd3      	ldrb	r3, [r2, r3]
 801b93a:	227f      	movs	r2, #127	@ 0x7f
 801b93c:	4393      	bics	r3, r2
 801b93e:	b2da      	uxtb	r2, r3
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	0011      	movs	r1, r2
 801b944:	0018      	movs	r0, r3
 801b946:	f001 fd2a 	bl	801d39e <USBD_LL_StallEP>
      break;
 801b94a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801b94c:	2300      	movs	r3, #0
}
 801b94e:	0018      	movs	r0, r3
 801b950:	46bd      	mov	sp, r7
 801b952:	b002      	add	sp, #8
 801b954:	bd80      	pop	{r7, pc}
 801b956:	46c0      	nop			@ (mov r8, r8)
 801b958:	000002ae 	.word	0x000002ae

0801b95c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801b95c:	b580      	push	{r7, lr}
 801b95e:	b086      	sub	sp, #24
 801b960:	af00      	add	r7, sp, #0
 801b962:	60f8      	str	r0, [r7, #12]
 801b964:	607a      	str	r2, [r7, #4]
 801b966:	200b      	movs	r0, #11
 801b968:	183b      	adds	r3, r7, r0
 801b96a:	1c0a      	adds	r2, r1, #0
 801b96c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801b96e:	183b      	adds	r3, r7, r0
 801b970:	781b      	ldrb	r3, [r3, #0]
 801b972:	2b00      	cmp	r3, #0
 801b974:	d154      	bne.n	801ba20 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801b976:	68fb      	ldr	r3, [r7, #12]
 801b978:	3355      	adds	r3, #85	@ 0x55
 801b97a:	33ff      	adds	r3, #255	@ 0xff
 801b97c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801b97e:	68fa      	ldr	r2, [r7, #12]
 801b980:	23a5      	movs	r3, #165	@ 0xa5
 801b982:	009b      	lsls	r3, r3, #2
 801b984:	58d3      	ldr	r3, [r2, r3]
 801b986:	2b03      	cmp	r3, #3
 801b988:	d139      	bne.n	801b9fe <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801b98a:	697b      	ldr	r3, [r7, #20]
 801b98c:	68da      	ldr	r2, [r3, #12]
 801b98e:	697b      	ldr	r3, [r7, #20]
 801b990:	691b      	ldr	r3, [r3, #16]
 801b992:	429a      	cmp	r2, r3
 801b994:	d919      	bls.n	801b9ca <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801b996:	697b      	ldr	r3, [r7, #20]
 801b998:	68da      	ldr	r2, [r3, #12]
 801b99a:	697b      	ldr	r3, [r7, #20]
 801b99c:	691b      	ldr	r3, [r3, #16]
 801b99e:	1ad2      	subs	r2, r2, r3
 801b9a0:	697b      	ldr	r3, [r7, #20]
 801b9a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b9a4:	697b      	ldr	r3, [r7, #20]
 801b9a6:	68da      	ldr	r2, [r3, #12]
 801b9a8:	697b      	ldr	r3, [r7, #20]
 801b9aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801b9ac:	429a      	cmp	r2, r3
 801b9ae:	d203      	bcs.n	801b9b8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b9b0:	697b      	ldr	r3, [r7, #20]
 801b9b2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801b9b4:	b29b      	uxth	r3, r3
 801b9b6:	e002      	b.n	801b9be <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801b9b8:	697b      	ldr	r3, [r7, #20]
 801b9ba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801b9bc:	b29b      	uxth	r3, r3
 801b9be:	6879      	ldr	r1, [r7, #4]
 801b9c0:	68f8      	ldr	r0, [r7, #12]
 801b9c2:	001a      	movs	r2, r3
 801b9c4:	f001 f898 	bl	801caf8 <USBD_CtlContinueRx>
 801b9c8:	e045      	b.n	801ba56 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801b9ca:	68fa      	ldr	r2, [r7, #12]
 801b9cc:	23ad      	movs	r3, #173	@ 0xad
 801b9ce:	009b      	lsls	r3, r3, #2
 801b9d0:	58d3      	ldr	r3, [r2, r3]
 801b9d2:	691b      	ldr	r3, [r3, #16]
 801b9d4:	2b00      	cmp	r3, #0
 801b9d6:	d00d      	beq.n	801b9f4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801b9d8:	68fa      	ldr	r2, [r7, #12]
 801b9da:	23a7      	movs	r3, #167	@ 0xa7
 801b9dc:	009b      	lsls	r3, r3, #2
 801b9de:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801b9e0:	2b03      	cmp	r3, #3
 801b9e2:	d107      	bne.n	801b9f4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801b9e4:	68fa      	ldr	r2, [r7, #12]
 801b9e6:	23ad      	movs	r3, #173	@ 0xad
 801b9e8:	009b      	lsls	r3, r3, #2
 801b9ea:	58d3      	ldr	r3, [r2, r3]
 801b9ec:	691b      	ldr	r3, [r3, #16]
 801b9ee:	68fa      	ldr	r2, [r7, #12]
 801b9f0:	0010      	movs	r0, r2
 801b9f2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801b9f4:	68fb      	ldr	r3, [r7, #12]
 801b9f6:	0018      	movs	r0, r3
 801b9f8:	f001 f891 	bl	801cb1e <USBD_CtlSendStatus>
 801b9fc:	e02b      	b.n	801ba56 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801b9fe:	68fa      	ldr	r2, [r7, #12]
 801ba00:	23a5      	movs	r3, #165	@ 0xa5
 801ba02:	009b      	lsls	r3, r3, #2
 801ba04:	58d3      	ldr	r3, [r2, r3]
 801ba06:	2b05      	cmp	r3, #5
 801ba08:	d125      	bne.n	801ba56 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801ba0a:	68fa      	ldr	r2, [r7, #12]
 801ba0c:	23a5      	movs	r3, #165	@ 0xa5
 801ba0e:	009b      	lsls	r3, r3, #2
 801ba10:	2100      	movs	r1, #0
 801ba12:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	2100      	movs	r1, #0
 801ba18:	0018      	movs	r0, r3
 801ba1a:	f001 fcc0 	bl	801d39e <USBD_LL_StallEP>
 801ba1e:	e01a      	b.n	801ba56 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801ba20:	68fa      	ldr	r2, [r7, #12]
 801ba22:	23ad      	movs	r3, #173	@ 0xad
 801ba24:	009b      	lsls	r3, r3, #2
 801ba26:	58d3      	ldr	r3, [r2, r3]
 801ba28:	699b      	ldr	r3, [r3, #24]
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d011      	beq.n	801ba52 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801ba2e:	68fa      	ldr	r2, [r7, #12]
 801ba30:	23a7      	movs	r3, #167	@ 0xa7
 801ba32:	009b      	lsls	r3, r3, #2
 801ba34:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801ba36:	2b03      	cmp	r3, #3
 801ba38:	d10b      	bne.n	801ba52 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801ba3a:	68fa      	ldr	r2, [r7, #12]
 801ba3c:	23ad      	movs	r3, #173	@ 0xad
 801ba3e:	009b      	lsls	r3, r3, #2
 801ba40:	58d3      	ldr	r3, [r2, r3]
 801ba42:	699b      	ldr	r3, [r3, #24]
 801ba44:	220b      	movs	r2, #11
 801ba46:	18ba      	adds	r2, r7, r2
 801ba48:	7811      	ldrb	r1, [r2, #0]
 801ba4a:	68fa      	ldr	r2, [r7, #12]
 801ba4c:	0010      	movs	r0, r2
 801ba4e:	4798      	blx	r3
 801ba50:	e001      	b.n	801ba56 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801ba52:	2302      	movs	r3, #2
 801ba54:	e000      	b.n	801ba58 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801ba56:	2300      	movs	r3, #0
}
 801ba58:	0018      	movs	r0, r3
 801ba5a:	46bd      	mov	sp, r7
 801ba5c:	b006      	add	sp, #24
 801ba5e:	bd80      	pop	{r7, pc}

0801ba60 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801ba60:	b580      	push	{r7, lr}
 801ba62:	b086      	sub	sp, #24
 801ba64:	af00      	add	r7, sp, #0
 801ba66:	60f8      	str	r0, [r7, #12]
 801ba68:	607a      	str	r2, [r7, #4]
 801ba6a:	200b      	movs	r0, #11
 801ba6c:	183b      	adds	r3, r7, r0
 801ba6e:	1c0a      	adds	r2, r1, #0
 801ba70:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801ba72:	183b      	adds	r3, r7, r0
 801ba74:	781b      	ldrb	r3, [r3, #0]
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	d000      	beq.n	801ba7c <USBD_LL_DataInStage+0x1c>
 801ba7a:	e08e      	b.n	801bb9a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801ba7c:	68fb      	ldr	r3, [r7, #12]
 801ba7e:	3314      	adds	r3, #20
 801ba80:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801ba82:	68fa      	ldr	r2, [r7, #12]
 801ba84:	23a5      	movs	r3, #165	@ 0xa5
 801ba86:	009b      	lsls	r3, r3, #2
 801ba88:	58d3      	ldr	r3, [r2, r3]
 801ba8a:	2b02      	cmp	r3, #2
 801ba8c:	d164      	bne.n	801bb58 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801ba8e:	697b      	ldr	r3, [r7, #20]
 801ba90:	68da      	ldr	r2, [r3, #12]
 801ba92:	697b      	ldr	r3, [r7, #20]
 801ba94:	691b      	ldr	r3, [r3, #16]
 801ba96:	429a      	cmp	r2, r3
 801ba98:	d915      	bls.n	801bac6 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801ba9a:	697b      	ldr	r3, [r7, #20]
 801ba9c:	68da      	ldr	r2, [r3, #12]
 801ba9e:	697b      	ldr	r3, [r7, #20]
 801baa0:	691b      	ldr	r3, [r3, #16]
 801baa2:	1ad2      	subs	r2, r2, r3
 801baa4:	697b      	ldr	r3, [r7, #20]
 801baa6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801baa8:	697b      	ldr	r3, [r7, #20]
 801baaa:	68db      	ldr	r3, [r3, #12]
 801baac:	b29a      	uxth	r2, r3
 801baae:	6879      	ldr	r1, [r7, #4]
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	0018      	movs	r0, r3
 801bab4:	f000 ffe9 	bl	801ca8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bab8:	68f8      	ldr	r0, [r7, #12]
 801baba:	2300      	movs	r3, #0
 801babc:	2200      	movs	r2, #0
 801babe:	2100      	movs	r1, #0
 801bac0:	f001 fd56 	bl	801d570 <USBD_LL_PrepareReceive>
 801bac4:	e059      	b.n	801bb7a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801bac6:	697b      	ldr	r3, [r7, #20]
 801bac8:	689a      	ldr	r2, [r3, #8]
 801baca:	697b      	ldr	r3, [r7, #20]
 801bacc:	691b      	ldr	r3, [r3, #16]
 801bace:	0019      	movs	r1, r3
 801bad0:	0010      	movs	r0, r2
 801bad2:	f7e4 fbed 	bl	80002b0 <__aeabi_uidivmod>
 801bad6:	1e0b      	subs	r3, r1, #0
 801bad8:	d11f      	bne.n	801bb1a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801bada:	697b      	ldr	r3, [r7, #20]
 801badc:	689a      	ldr	r2, [r3, #8]
 801bade:	697b      	ldr	r3, [r7, #20]
 801bae0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801bae2:	429a      	cmp	r2, r3
 801bae4:	d319      	bcc.n	801bb1a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801bae6:	697b      	ldr	r3, [r7, #20]
 801bae8:	689a      	ldr	r2, [r3, #8]
 801baea:	68f9      	ldr	r1, [r7, #12]
 801baec:	23a6      	movs	r3, #166	@ 0xa6
 801baee:	009b      	lsls	r3, r3, #2
 801baf0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801baf2:	429a      	cmp	r2, r3
 801baf4:	d211      	bcs.n	801bb1a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	2200      	movs	r2, #0
 801bafa:	2100      	movs	r1, #0
 801bafc:	0018      	movs	r0, r3
 801bafe:	f000 ffc4 	bl	801ca8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801bb02:	68fa      	ldr	r2, [r7, #12]
 801bb04:	23a6      	movs	r3, #166	@ 0xa6
 801bb06:	009b      	lsls	r3, r3, #2
 801bb08:	2100      	movs	r1, #0
 801bb0a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801bb0c:	68f8      	ldr	r0, [r7, #12]
 801bb0e:	2300      	movs	r3, #0
 801bb10:	2200      	movs	r2, #0
 801bb12:	2100      	movs	r1, #0
 801bb14:	f001 fd2c 	bl	801d570 <USBD_LL_PrepareReceive>
 801bb18:	e02f      	b.n	801bb7a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801bb1a:	68fa      	ldr	r2, [r7, #12]
 801bb1c:	23ad      	movs	r3, #173	@ 0xad
 801bb1e:	009b      	lsls	r3, r3, #2
 801bb20:	58d3      	ldr	r3, [r2, r3]
 801bb22:	68db      	ldr	r3, [r3, #12]
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	d00d      	beq.n	801bb44 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bb28:	68fa      	ldr	r2, [r7, #12]
 801bb2a:	23a7      	movs	r3, #167	@ 0xa7
 801bb2c:	009b      	lsls	r3, r3, #2
 801bb2e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801bb30:	2b03      	cmp	r3, #3
 801bb32:	d107      	bne.n	801bb44 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801bb34:	68fa      	ldr	r2, [r7, #12]
 801bb36:	23ad      	movs	r3, #173	@ 0xad
 801bb38:	009b      	lsls	r3, r3, #2
 801bb3a:	58d3      	ldr	r3, [r2, r3]
 801bb3c:	68db      	ldr	r3, [r3, #12]
 801bb3e:	68fa      	ldr	r2, [r7, #12]
 801bb40:	0010      	movs	r0, r2
 801bb42:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801bb44:	68fb      	ldr	r3, [r7, #12]
 801bb46:	2180      	movs	r1, #128	@ 0x80
 801bb48:	0018      	movs	r0, r3
 801bb4a:	f001 fc28 	bl	801d39e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801bb4e:	68fb      	ldr	r3, [r7, #12]
 801bb50:	0018      	movs	r0, r3
 801bb52:	f000 fff8 	bl	801cb46 <USBD_CtlReceiveStatus>
 801bb56:	e010      	b.n	801bb7a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801bb58:	68fa      	ldr	r2, [r7, #12]
 801bb5a:	23a5      	movs	r3, #165	@ 0xa5
 801bb5c:	009b      	lsls	r3, r3, #2
 801bb5e:	58d3      	ldr	r3, [r2, r3]
 801bb60:	2b04      	cmp	r3, #4
 801bb62:	d005      	beq.n	801bb70 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801bb64:	68fa      	ldr	r2, [r7, #12]
 801bb66:	23a5      	movs	r3, #165	@ 0xa5
 801bb68:	009b      	lsls	r3, r3, #2
 801bb6a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801bb6c:	2b00      	cmp	r3, #0
 801bb6e:	d104      	bne.n	801bb7a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801bb70:	68fb      	ldr	r3, [r7, #12]
 801bb72:	2180      	movs	r1, #128	@ 0x80
 801bb74:	0018      	movs	r0, r3
 801bb76:	f001 fc12 	bl	801d39e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801bb7a:	68fa      	ldr	r2, [r7, #12]
 801bb7c:	23a8      	movs	r3, #168	@ 0xa8
 801bb7e:	009b      	lsls	r3, r3, #2
 801bb80:	5cd3      	ldrb	r3, [r2, r3]
 801bb82:	2b01      	cmp	r3, #1
 801bb84:	d124      	bne.n	801bbd0 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801bb86:	68fb      	ldr	r3, [r7, #12]
 801bb88:	0018      	movs	r0, r3
 801bb8a:	f7ff fe43 	bl	801b814 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801bb8e:	68fa      	ldr	r2, [r7, #12]
 801bb90:	23a8      	movs	r3, #168	@ 0xa8
 801bb92:	009b      	lsls	r3, r3, #2
 801bb94:	2100      	movs	r1, #0
 801bb96:	54d1      	strb	r1, [r2, r3]
 801bb98:	e01a      	b.n	801bbd0 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801bb9a:	68fa      	ldr	r2, [r7, #12]
 801bb9c:	23ad      	movs	r3, #173	@ 0xad
 801bb9e:	009b      	lsls	r3, r3, #2
 801bba0:	58d3      	ldr	r3, [r2, r3]
 801bba2:	695b      	ldr	r3, [r3, #20]
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	d011      	beq.n	801bbcc <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801bba8:	68fa      	ldr	r2, [r7, #12]
 801bbaa:	23a7      	movs	r3, #167	@ 0xa7
 801bbac:	009b      	lsls	r3, r3, #2
 801bbae:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801bbb0:	2b03      	cmp	r3, #3
 801bbb2:	d10b      	bne.n	801bbcc <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801bbb4:	68fa      	ldr	r2, [r7, #12]
 801bbb6:	23ad      	movs	r3, #173	@ 0xad
 801bbb8:	009b      	lsls	r3, r3, #2
 801bbba:	58d3      	ldr	r3, [r2, r3]
 801bbbc:	695b      	ldr	r3, [r3, #20]
 801bbbe:	220b      	movs	r2, #11
 801bbc0:	18ba      	adds	r2, r7, r2
 801bbc2:	7811      	ldrb	r1, [r2, #0]
 801bbc4:	68fa      	ldr	r2, [r7, #12]
 801bbc6:	0010      	movs	r0, r2
 801bbc8:	4798      	blx	r3
 801bbca:	e001      	b.n	801bbd0 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801bbcc:	2302      	movs	r3, #2
 801bbce:	e000      	b.n	801bbd2 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801bbd0:	2300      	movs	r3, #0
}
 801bbd2:	0018      	movs	r0, r3
 801bbd4:	46bd      	mov	sp, r7
 801bbd6:	b006      	add	sp, #24
 801bbd8:	bd80      	pop	{r7, pc}

0801bbda <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801bbda:	b580      	push	{r7, lr}
 801bbdc:	b082      	sub	sp, #8
 801bbde:	af00      	add	r7, sp, #0
 801bbe0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801bbe2:	6878      	ldr	r0, [r7, #4]
 801bbe4:	2340      	movs	r3, #64	@ 0x40
 801bbe6:	2200      	movs	r2, #0
 801bbe8:	2100      	movs	r1, #0
 801bbea:	f001 fb76 	bl	801d2da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801bbee:	687a      	ldr	r2, [r7, #4]
 801bbf0:	23ac      	movs	r3, #172	@ 0xac
 801bbf2:	005b      	lsls	r3, r3, #1
 801bbf4:	2101      	movs	r1, #1
 801bbf6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801bbf8:	687a      	ldr	r2, [r7, #4]
 801bbfa:	23b2      	movs	r3, #178	@ 0xb2
 801bbfc:	005b      	lsls	r3, r3, #1
 801bbfe:	2140      	movs	r1, #64	@ 0x40
 801bc00:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801bc02:	6878      	ldr	r0, [r7, #4]
 801bc04:	2340      	movs	r3, #64	@ 0x40
 801bc06:	2200      	movs	r2, #0
 801bc08:	2180      	movs	r1, #128	@ 0x80
 801bc0a:	f001 fb66 	bl	801d2da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	2201      	movs	r2, #1
 801bc12:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	2240      	movs	r2, #64	@ 0x40
 801bc18:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801bc1a:	687a      	ldr	r2, [r7, #4]
 801bc1c:	23a7      	movs	r3, #167	@ 0xa7
 801bc1e:	009b      	lsls	r3, r3, #2
 801bc20:	2101      	movs	r1, #1
 801bc22:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801bc24:	687a      	ldr	r2, [r7, #4]
 801bc26:	23a5      	movs	r3, #165	@ 0xa5
 801bc28:	009b      	lsls	r3, r3, #2
 801bc2a:	2100      	movs	r1, #0
 801bc2c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	2200      	movs	r2, #0
 801bc32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801bc34:	687a      	ldr	r2, [r7, #4]
 801bc36:	23a9      	movs	r3, #169	@ 0xa9
 801bc38:	009b      	lsls	r3, r3, #2
 801bc3a:	2100      	movs	r1, #0
 801bc3c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801bc3e:	687a      	ldr	r2, [r7, #4]
 801bc40:	23ae      	movs	r3, #174	@ 0xae
 801bc42:	009b      	lsls	r3, r3, #2
 801bc44:	58d3      	ldr	r3, [r2, r3]
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d00a      	beq.n	801bc60 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801bc4a:	687a      	ldr	r2, [r7, #4]
 801bc4c:	23ad      	movs	r3, #173	@ 0xad
 801bc4e:	009b      	lsls	r3, r3, #2
 801bc50:	58d3      	ldr	r3, [r2, r3]
 801bc52:	685a      	ldr	r2, [r3, #4]
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	685b      	ldr	r3, [r3, #4]
 801bc58:	b2d9      	uxtb	r1, r3
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	0018      	movs	r0, r3
 801bc5e:	4790      	blx	r2
  }

  return USBD_OK;
 801bc60:	2300      	movs	r3, #0
}
 801bc62:	0018      	movs	r0, r3
 801bc64:	46bd      	mov	sp, r7
 801bc66:	b002      	add	sp, #8
 801bc68:	bd80      	pop	{r7, pc}

0801bc6a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801bc6a:	b580      	push	{r7, lr}
 801bc6c:	b082      	sub	sp, #8
 801bc6e:	af00      	add	r7, sp, #0
 801bc70:	6078      	str	r0, [r7, #4]
 801bc72:	000a      	movs	r2, r1
 801bc74:	1cfb      	adds	r3, r7, #3
 801bc76:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	1cfa      	adds	r2, r7, #3
 801bc7c:	7812      	ldrb	r2, [r2, #0]
 801bc7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801bc80:	2300      	movs	r3, #0
}
 801bc82:	0018      	movs	r0, r3
 801bc84:	46bd      	mov	sp, r7
 801bc86:	b002      	add	sp, #8
 801bc88:	bd80      	pop	{r7, pc}
	...

0801bc8c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801bc8c:	b580      	push	{r7, lr}
 801bc8e:	b082      	sub	sp, #8
 801bc90:	af00      	add	r7, sp, #0
 801bc92:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801bc94:	687a      	ldr	r2, [r7, #4]
 801bc96:	23a7      	movs	r3, #167	@ 0xa7
 801bc98:	009b      	lsls	r3, r3, #2
 801bc9a:	5cd1      	ldrb	r1, [r2, r3]
 801bc9c:	687b      	ldr	r3, [r7, #4]
 801bc9e:	4a06      	ldr	r2, [pc, #24]	@ (801bcb8 <USBD_LL_Suspend+0x2c>)
 801bca0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801bca2:	687a      	ldr	r2, [r7, #4]
 801bca4:	23a7      	movs	r3, #167	@ 0xa7
 801bca6:	009b      	lsls	r3, r3, #2
 801bca8:	2104      	movs	r1, #4
 801bcaa:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801bcac:	2300      	movs	r3, #0
}
 801bcae:	0018      	movs	r0, r3
 801bcb0:	46bd      	mov	sp, r7
 801bcb2:	b002      	add	sp, #8
 801bcb4:	bd80      	pop	{r7, pc}
 801bcb6:	46c0      	nop			@ (mov r8, r8)
 801bcb8:	0000029d 	.word	0x0000029d

0801bcbc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801bcbc:	b580      	push	{r7, lr}
 801bcbe:	b082      	sub	sp, #8
 801bcc0:	af00      	add	r7, sp, #0
 801bcc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801bcc4:	687a      	ldr	r2, [r7, #4]
 801bcc6:	23a7      	movs	r3, #167	@ 0xa7
 801bcc8:	009b      	lsls	r3, r3, #2
 801bcca:	5cd3      	ldrb	r3, [r2, r3]
 801bccc:	2b04      	cmp	r3, #4
 801bcce:	d106      	bne.n	801bcde <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	4a05      	ldr	r2, [pc, #20]	@ (801bce8 <USBD_LL_Resume+0x2c>)
 801bcd4:	5c99      	ldrb	r1, [r3, r2]
 801bcd6:	687a      	ldr	r2, [r7, #4]
 801bcd8:	23a7      	movs	r3, #167	@ 0xa7
 801bcda:	009b      	lsls	r3, r3, #2
 801bcdc:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801bcde:	2300      	movs	r3, #0
}
 801bce0:	0018      	movs	r0, r3
 801bce2:	46bd      	mov	sp, r7
 801bce4:	b002      	add	sp, #8
 801bce6:	bd80      	pop	{r7, pc}
 801bce8:	0000029d 	.word	0x0000029d

0801bcec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801bcec:	b580      	push	{r7, lr}
 801bcee:	b082      	sub	sp, #8
 801bcf0:	af00      	add	r7, sp, #0
 801bcf2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801bcf4:	687a      	ldr	r2, [r7, #4]
 801bcf6:	23a7      	movs	r3, #167	@ 0xa7
 801bcf8:	009b      	lsls	r3, r3, #2
 801bcfa:	5cd3      	ldrb	r3, [r2, r3]
 801bcfc:	2b03      	cmp	r3, #3
 801bcfe:	d10e      	bne.n	801bd1e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801bd00:	687a      	ldr	r2, [r7, #4]
 801bd02:	23ad      	movs	r3, #173	@ 0xad
 801bd04:	009b      	lsls	r3, r3, #2
 801bd06:	58d3      	ldr	r3, [r2, r3]
 801bd08:	69db      	ldr	r3, [r3, #28]
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	d007      	beq.n	801bd1e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801bd0e:	687a      	ldr	r2, [r7, #4]
 801bd10:	23ad      	movs	r3, #173	@ 0xad
 801bd12:	009b      	lsls	r3, r3, #2
 801bd14:	58d3      	ldr	r3, [r2, r3]
 801bd16:	69db      	ldr	r3, [r3, #28]
 801bd18:	687a      	ldr	r2, [r7, #4]
 801bd1a:	0010      	movs	r0, r2
 801bd1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801bd1e:	2300      	movs	r3, #0
}
 801bd20:	0018      	movs	r0, r3
 801bd22:	46bd      	mov	sp, r7
 801bd24:	b002      	add	sp, #8
 801bd26:	bd80      	pop	{r7, pc}

0801bd28 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801bd28:	b580      	push	{r7, lr}
 801bd2a:	b084      	sub	sp, #16
 801bd2c:	af00      	add	r7, sp, #0
 801bd2e:	6078      	str	r0, [r7, #4]
 801bd30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801bd32:	230f      	movs	r3, #15
 801bd34:	18fb      	adds	r3, r7, r3
 801bd36:	2200      	movs	r2, #0
 801bd38:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bd3a:	683b      	ldr	r3, [r7, #0]
 801bd3c:	781b      	ldrb	r3, [r3, #0]
 801bd3e:	001a      	movs	r2, r3
 801bd40:	2360      	movs	r3, #96	@ 0x60
 801bd42:	4013      	ands	r3, r2
 801bd44:	2b40      	cmp	r3, #64	@ 0x40
 801bd46:	d004      	beq.n	801bd52 <USBD_StdDevReq+0x2a>
 801bd48:	d84f      	bhi.n	801bdea <USBD_StdDevReq+0xc2>
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d00b      	beq.n	801bd66 <USBD_StdDevReq+0x3e>
 801bd4e:	2b20      	cmp	r3, #32
 801bd50:	d14b      	bne.n	801bdea <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801bd52:	687a      	ldr	r2, [r7, #4]
 801bd54:	23ad      	movs	r3, #173	@ 0xad
 801bd56:	009b      	lsls	r3, r3, #2
 801bd58:	58d3      	ldr	r3, [r2, r3]
 801bd5a:	689b      	ldr	r3, [r3, #8]
 801bd5c:	6839      	ldr	r1, [r7, #0]
 801bd5e:	687a      	ldr	r2, [r7, #4]
 801bd60:	0010      	movs	r0, r2
 801bd62:	4798      	blx	r3
      break;
 801bd64:	e048      	b.n	801bdf8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801bd66:	683b      	ldr	r3, [r7, #0]
 801bd68:	785b      	ldrb	r3, [r3, #1]
 801bd6a:	2b09      	cmp	r3, #9
 801bd6c:	d835      	bhi.n	801bdda <USBD_StdDevReq+0xb2>
 801bd6e:	009a      	lsls	r2, r3, #2
 801bd70:	4b25      	ldr	r3, [pc, #148]	@ (801be08 <USBD_StdDevReq+0xe0>)
 801bd72:	18d3      	adds	r3, r2, r3
 801bd74:	681b      	ldr	r3, [r3, #0]
 801bd76:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801bd78:	683a      	ldr	r2, [r7, #0]
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	0011      	movs	r1, r2
 801bd7e:	0018      	movs	r0, r3
 801bd80:	f000 fa52 	bl	801c228 <USBD_GetDescriptor>
          break;
 801bd84:	e030      	b.n	801bde8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801bd86:	683a      	ldr	r2, [r7, #0]
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	0011      	movs	r1, r2
 801bd8c:	0018      	movs	r0, r3
 801bd8e:	f000 fbfd 	bl	801c58c <USBD_SetAddress>
          break;
 801bd92:	e029      	b.n	801bde8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801bd94:	683a      	ldr	r2, [r7, #0]
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	0011      	movs	r1, r2
 801bd9a:	0018      	movs	r0, r3
 801bd9c:	f000 fc4a 	bl	801c634 <USBD_SetConfig>
          break;
 801bda0:	e022      	b.n	801bde8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801bda2:	683a      	ldr	r2, [r7, #0]
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	0011      	movs	r1, r2
 801bda8:	0018      	movs	r0, r3
 801bdaa:	f000 fce7 	bl	801c77c <USBD_GetConfig>
          break;
 801bdae:	e01b      	b.n	801bde8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801bdb0:	683a      	ldr	r2, [r7, #0]
 801bdb2:	687b      	ldr	r3, [r7, #4]
 801bdb4:	0011      	movs	r1, r2
 801bdb6:	0018      	movs	r0, r3
 801bdb8:	f000 fd1b 	bl	801c7f2 <USBD_GetStatus>
          break;
 801bdbc:	e014      	b.n	801bde8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801bdbe:	683a      	ldr	r2, [r7, #0]
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	0011      	movs	r1, r2
 801bdc4:	0018      	movs	r0, r3
 801bdc6:	f000 fd4e 	bl	801c866 <USBD_SetFeature>
          break;
 801bdca:	e00d      	b.n	801bde8 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801bdcc:	683a      	ldr	r2, [r7, #0]
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	0011      	movs	r1, r2
 801bdd2:	0018      	movs	r0, r3
 801bdd4:	f000 fd5d 	bl	801c892 <USBD_ClrFeature>
          break;
 801bdd8:	e006      	b.n	801bde8 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801bdda:	683a      	ldr	r2, [r7, #0]
 801bddc:	687b      	ldr	r3, [r7, #4]
 801bdde:	0011      	movs	r1, r2
 801bde0:	0018      	movs	r0, r3
 801bde2:	f000 fdb4 	bl	801c94e <USBD_CtlError>
          break;
 801bde6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801bde8:	e006      	b.n	801bdf8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801bdea:	683a      	ldr	r2, [r7, #0]
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	0011      	movs	r1, r2
 801bdf0:	0018      	movs	r0, r3
 801bdf2:	f000 fdac 	bl	801c94e <USBD_CtlError>
      break;
 801bdf6:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801bdf8:	230f      	movs	r3, #15
 801bdfa:	18fb      	adds	r3, r7, r3
 801bdfc:	781b      	ldrb	r3, [r3, #0]
}
 801bdfe:	0018      	movs	r0, r3
 801be00:	46bd      	mov	sp, r7
 801be02:	b004      	add	sp, #16
 801be04:	bd80      	pop	{r7, pc}
 801be06:	46c0      	nop			@ (mov r8, r8)
 801be08:	08025628 	.word	0x08025628

0801be0c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801be0c:	b5b0      	push	{r4, r5, r7, lr}
 801be0e:	b084      	sub	sp, #16
 801be10:	af00      	add	r7, sp, #0
 801be12:	6078      	str	r0, [r7, #4]
 801be14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801be16:	230f      	movs	r3, #15
 801be18:	18fb      	adds	r3, r7, r3
 801be1a:	2200      	movs	r2, #0
 801be1c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801be1e:	683b      	ldr	r3, [r7, #0]
 801be20:	781b      	ldrb	r3, [r3, #0]
 801be22:	001a      	movs	r2, r3
 801be24:	2360      	movs	r3, #96	@ 0x60
 801be26:	4013      	ands	r3, r2
 801be28:	2b40      	cmp	r3, #64	@ 0x40
 801be2a:	d004      	beq.n	801be36 <USBD_StdItfReq+0x2a>
 801be2c:	d839      	bhi.n	801bea2 <USBD_StdItfReq+0x96>
 801be2e:	2b00      	cmp	r3, #0
 801be30:	d001      	beq.n	801be36 <USBD_StdItfReq+0x2a>
 801be32:	2b20      	cmp	r3, #32
 801be34:	d135      	bne.n	801bea2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801be36:	687a      	ldr	r2, [r7, #4]
 801be38:	23a7      	movs	r3, #167	@ 0xa7
 801be3a:	009b      	lsls	r3, r3, #2
 801be3c:	5cd3      	ldrb	r3, [r2, r3]
 801be3e:	3b01      	subs	r3, #1
 801be40:	2b02      	cmp	r3, #2
 801be42:	d825      	bhi.n	801be90 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801be44:	683b      	ldr	r3, [r7, #0]
 801be46:	889b      	ldrh	r3, [r3, #4]
 801be48:	b2db      	uxtb	r3, r3
 801be4a:	2b01      	cmp	r3, #1
 801be4c:	d819      	bhi.n	801be82 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801be4e:	687a      	ldr	r2, [r7, #4]
 801be50:	23ad      	movs	r3, #173	@ 0xad
 801be52:	009b      	lsls	r3, r3, #2
 801be54:	58d3      	ldr	r3, [r2, r3]
 801be56:	689b      	ldr	r3, [r3, #8]
 801be58:	250f      	movs	r5, #15
 801be5a:	197c      	adds	r4, r7, r5
 801be5c:	6839      	ldr	r1, [r7, #0]
 801be5e:	687a      	ldr	r2, [r7, #4]
 801be60:	0010      	movs	r0, r2
 801be62:	4798      	blx	r3
 801be64:	0003      	movs	r3, r0
 801be66:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801be68:	683b      	ldr	r3, [r7, #0]
 801be6a:	88db      	ldrh	r3, [r3, #6]
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d116      	bne.n	801be9e <USBD_StdItfReq+0x92>
 801be70:	197b      	adds	r3, r7, r5
 801be72:	781b      	ldrb	r3, [r3, #0]
 801be74:	2b00      	cmp	r3, #0
 801be76:	d112      	bne.n	801be9e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	0018      	movs	r0, r3
 801be7c:	f000 fe4f 	bl	801cb1e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801be80:	e00d      	b.n	801be9e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801be82:	683a      	ldr	r2, [r7, #0]
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	0011      	movs	r1, r2
 801be88:	0018      	movs	r0, r3
 801be8a:	f000 fd60 	bl	801c94e <USBD_CtlError>
          break;
 801be8e:	e006      	b.n	801be9e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801be90:	683a      	ldr	r2, [r7, #0]
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	0011      	movs	r1, r2
 801be96:	0018      	movs	r0, r3
 801be98:	f000 fd59 	bl	801c94e <USBD_CtlError>
          break;
 801be9c:	e000      	b.n	801bea0 <USBD_StdItfReq+0x94>
          break;
 801be9e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801bea0:	e006      	b.n	801beb0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801bea2:	683a      	ldr	r2, [r7, #0]
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	0011      	movs	r1, r2
 801bea8:	0018      	movs	r0, r3
 801beaa:	f000 fd50 	bl	801c94e <USBD_CtlError>
      break;
 801beae:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801beb0:	2300      	movs	r3, #0
}
 801beb2:	0018      	movs	r0, r3
 801beb4:	46bd      	mov	sp, r7
 801beb6:	b004      	add	sp, #16
 801beb8:	bdb0      	pop	{r4, r5, r7, pc}

0801beba <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801beba:	b5b0      	push	{r4, r5, r7, lr}
 801bebc:	b084      	sub	sp, #16
 801bebe:	af00      	add	r7, sp, #0
 801bec0:	6078      	str	r0, [r7, #4]
 801bec2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801bec4:	230f      	movs	r3, #15
 801bec6:	18fb      	adds	r3, r7, r3
 801bec8:	2200      	movs	r2, #0
 801beca:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801becc:	683b      	ldr	r3, [r7, #0]
 801bece:	889a      	ldrh	r2, [r3, #4]
 801bed0:	230e      	movs	r3, #14
 801bed2:	18fb      	adds	r3, r7, r3
 801bed4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bed6:	683b      	ldr	r3, [r7, #0]
 801bed8:	781b      	ldrb	r3, [r3, #0]
 801beda:	001a      	movs	r2, r3
 801bedc:	2360      	movs	r3, #96	@ 0x60
 801bede:	4013      	ands	r3, r2
 801bee0:	2b40      	cmp	r3, #64	@ 0x40
 801bee2:	d006      	beq.n	801bef2 <USBD_StdEPReq+0x38>
 801bee4:	d900      	bls.n	801bee8 <USBD_StdEPReq+0x2e>
 801bee6:	e190      	b.n	801c20a <USBD_StdEPReq+0x350>
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d00c      	beq.n	801bf06 <USBD_StdEPReq+0x4c>
 801beec:	2b20      	cmp	r3, #32
 801beee:	d000      	beq.n	801bef2 <USBD_StdEPReq+0x38>
 801bef0:	e18b      	b.n	801c20a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801bef2:	687a      	ldr	r2, [r7, #4]
 801bef4:	23ad      	movs	r3, #173	@ 0xad
 801bef6:	009b      	lsls	r3, r3, #2
 801bef8:	58d3      	ldr	r3, [r2, r3]
 801befa:	689b      	ldr	r3, [r3, #8]
 801befc:	6839      	ldr	r1, [r7, #0]
 801befe:	687a      	ldr	r2, [r7, #4]
 801bf00:	0010      	movs	r0, r2
 801bf02:	4798      	blx	r3
      break;
 801bf04:	e188      	b.n	801c218 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801bf06:	683b      	ldr	r3, [r7, #0]
 801bf08:	781b      	ldrb	r3, [r3, #0]
 801bf0a:	001a      	movs	r2, r3
 801bf0c:	2360      	movs	r3, #96	@ 0x60
 801bf0e:	4013      	ands	r3, r2
 801bf10:	2b20      	cmp	r3, #32
 801bf12:	d10f      	bne.n	801bf34 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801bf14:	687a      	ldr	r2, [r7, #4]
 801bf16:	23ad      	movs	r3, #173	@ 0xad
 801bf18:	009b      	lsls	r3, r3, #2
 801bf1a:	58d3      	ldr	r3, [r2, r3]
 801bf1c:	689b      	ldr	r3, [r3, #8]
 801bf1e:	250f      	movs	r5, #15
 801bf20:	197c      	adds	r4, r7, r5
 801bf22:	6839      	ldr	r1, [r7, #0]
 801bf24:	687a      	ldr	r2, [r7, #4]
 801bf26:	0010      	movs	r0, r2
 801bf28:	4798      	blx	r3
 801bf2a:	0003      	movs	r3, r0
 801bf2c:	7023      	strb	r3, [r4, #0]

        return ret;
 801bf2e:	197b      	adds	r3, r7, r5
 801bf30:	781b      	ldrb	r3, [r3, #0]
 801bf32:	e174      	b.n	801c21e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801bf34:	683b      	ldr	r3, [r7, #0]
 801bf36:	785b      	ldrb	r3, [r3, #1]
 801bf38:	2b03      	cmp	r3, #3
 801bf3a:	d007      	beq.n	801bf4c <USBD_StdEPReq+0x92>
 801bf3c:	dd00      	ble.n	801bf40 <USBD_StdEPReq+0x86>
 801bf3e:	e15c      	b.n	801c1fa <USBD_StdEPReq+0x340>
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	d100      	bne.n	801bf46 <USBD_StdEPReq+0x8c>
 801bf44:	e092      	b.n	801c06c <USBD_StdEPReq+0x1b2>
 801bf46:	2b01      	cmp	r3, #1
 801bf48:	d04b      	beq.n	801bfe2 <USBD_StdEPReq+0x128>
 801bf4a:	e156      	b.n	801c1fa <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801bf4c:	687a      	ldr	r2, [r7, #4]
 801bf4e:	23a7      	movs	r3, #167	@ 0xa7
 801bf50:	009b      	lsls	r3, r3, #2
 801bf52:	5cd3      	ldrb	r3, [r2, r3]
 801bf54:	2b02      	cmp	r3, #2
 801bf56:	d002      	beq.n	801bf5e <USBD_StdEPReq+0xa4>
 801bf58:	2b03      	cmp	r3, #3
 801bf5a:	d01d      	beq.n	801bf98 <USBD_StdEPReq+0xde>
 801bf5c:	e039      	b.n	801bfd2 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801bf5e:	220e      	movs	r2, #14
 801bf60:	18bb      	adds	r3, r7, r2
 801bf62:	781b      	ldrb	r3, [r3, #0]
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	d010      	beq.n	801bf8a <USBD_StdEPReq+0xd0>
 801bf68:	18bb      	adds	r3, r7, r2
 801bf6a:	781b      	ldrb	r3, [r3, #0]
 801bf6c:	2b80      	cmp	r3, #128	@ 0x80
 801bf6e:	d00c      	beq.n	801bf8a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801bf70:	18bb      	adds	r3, r7, r2
 801bf72:	781a      	ldrb	r2, [r3, #0]
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	0011      	movs	r1, r2
 801bf78:	0018      	movs	r0, r3
 801bf7a:	f001 fa10 	bl	801d39e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	2180      	movs	r1, #128	@ 0x80
 801bf82:	0018      	movs	r0, r3
 801bf84:	f001 fa0b 	bl	801d39e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801bf88:	e02a      	b.n	801bfe0 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801bf8a:	683a      	ldr	r2, [r7, #0]
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	0011      	movs	r1, r2
 801bf90:	0018      	movs	r0, r3
 801bf92:	f000 fcdc 	bl	801c94e <USBD_CtlError>
              break;
 801bf96:	e023      	b.n	801bfe0 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801bf98:	683b      	ldr	r3, [r7, #0]
 801bf9a:	885b      	ldrh	r3, [r3, #2]
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d113      	bne.n	801bfc8 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801bfa0:	220e      	movs	r2, #14
 801bfa2:	18bb      	adds	r3, r7, r2
 801bfa4:	781b      	ldrb	r3, [r3, #0]
 801bfa6:	2b00      	cmp	r3, #0
 801bfa8:	d00e      	beq.n	801bfc8 <USBD_StdEPReq+0x10e>
 801bfaa:	18bb      	adds	r3, r7, r2
 801bfac:	781b      	ldrb	r3, [r3, #0]
 801bfae:	2b80      	cmp	r3, #128	@ 0x80
 801bfb0:	d00a      	beq.n	801bfc8 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801bfb2:	683b      	ldr	r3, [r7, #0]
 801bfb4:	88db      	ldrh	r3, [r3, #6]
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	d106      	bne.n	801bfc8 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801bfba:	18bb      	adds	r3, r7, r2
 801bfbc:	781a      	ldrb	r2, [r3, #0]
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	0011      	movs	r1, r2
 801bfc2:	0018      	movs	r0, r3
 801bfc4:	f001 f9eb 	bl	801d39e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	0018      	movs	r0, r3
 801bfcc:	f000 fda7 	bl	801cb1e <USBD_CtlSendStatus>

              break;
 801bfd0:	e006      	b.n	801bfe0 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801bfd2:	683a      	ldr	r2, [r7, #0]
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	0011      	movs	r1, r2
 801bfd8:	0018      	movs	r0, r3
 801bfda:	f000 fcb8 	bl	801c94e <USBD_CtlError>
              break;
 801bfde:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801bfe0:	e112      	b.n	801c208 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801bfe2:	687a      	ldr	r2, [r7, #4]
 801bfe4:	23a7      	movs	r3, #167	@ 0xa7
 801bfe6:	009b      	lsls	r3, r3, #2
 801bfe8:	5cd3      	ldrb	r3, [r2, r3]
 801bfea:	2b02      	cmp	r3, #2
 801bfec:	d002      	beq.n	801bff4 <USBD_StdEPReq+0x13a>
 801bfee:	2b03      	cmp	r3, #3
 801bff0:	d01d      	beq.n	801c02e <USBD_StdEPReq+0x174>
 801bff2:	e032      	b.n	801c05a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801bff4:	220e      	movs	r2, #14
 801bff6:	18bb      	adds	r3, r7, r2
 801bff8:	781b      	ldrb	r3, [r3, #0]
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d010      	beq.n	801c020 <USBD_StdEPReq+0x166>
 801bffe:	18bb      	adds	r3, r7, r2
 801c000:	781b      	ldrb	r3, [r3, #0]
 801c002:	2b80      	cmp	r3, #128	@ 0x80
 801c004:	d00c      	beq.n	801c020 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801c006:	18bb      	adds	r3, r7, r2
 801c008:	781a      	ldrb	r2, [r3, #0]
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	0011      	movs	r1, r2
 801c00e:	0018      	movs	r0, r3
 801c010:	f001 f9c5 	bl	801d39e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	2180      	movs	r1, #128	@ 0x80
 801c018:	0018      	movs	r0, r3
 801c01a:	f001 f9c0 	bl	801d39e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801c01e:	e024      	b.n	801c06a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801c020:	683a      	ldr	r2, [r7, #0]
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	0011      	movs	r1, r2
 801c026:	0018      	movs	r0, r3
 801c028:	f000 fc91 	bl	801c94e <USBD_CtlError>
              break;
 801c02c:	e01d      	b.n	801c06a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801c02e:	683b      	ldr	r3, [r7, #0]
 801c030:	885b      	ldrh	r3, [r3, #2]
 801c032:	2b00      	cmp	r3, #0
 801c034:	d118      	bne.n	801c068 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801c036:	210e      	movs	r1, #14
 801c038:	187b      	adds	r3, r7, r1
 801c03a:	781b      	ldrb	r3, [r3, #0]
 801c03c:	227f      	movs	r2, #127	@ 0x7f
 801c03e:	4013      	ands	r3, r2
 801c040:	d006      	beq.n	801c050 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801c042:	187b      	adds	r3, r7, r1
 801c044:	781a      	ldrb	r2, [r3, #0]
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	0011      	movs	r1, r2
 801c04a:	0018      	movs	r0, r3
 801c04c:	f001 f9d2 	bl	801d3f4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	0018      	movs	r0, r3
 801c054:	f000 fd63 	bl	801cb1e <USBD_CtlSendStatus>
              }
              break;
 801c058:	e006      	b.n	801c068 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801c05a:	683a      	ldr	r2, [r7, #0]
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	0011      	movs	r1, r2
 801c060:	0018      	movs	r0, r3
 801c062:	f000 fc74 	bl	801c94e <USBD_CtlError>
              break;
 801c066:	e000      	b.n	801c06a <USBD_StdEPReq+0x1b0>
              break;
 801c068:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c06a:	e0cd      	b.n	801c208 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801c06c:	687a      	ldr	r2, [r7, #4]
 801c06e:	23a7      	movs	r3, #167	@ 0xa7
 801c070:	009b      	lsls	r3, r3, #2
 801c072:	5cd3      	ldrb	r3, [r2, r3]
 801c074:	2b02      	cmp	r3, #2
 801c076:	d002      	beq.n	801c07e <USBD_StdEPReq+0x1c4>
 801c078:	2b03      	cmp	r3, #3
 801c07a:	d03c      	beq.n	801c0f6 <USBD_StdEPReq+0x23c>
 801c07c:	e0b5      	b.n	801c1ea <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801c07e:	220e      	movs	r2, #14
 801c080:	18bb      	adds	r3, r7, r2
 801c082:	781b      	ldrb	r3, [r3, #0]
 801c084:	2b00      	cmp	r3, #0
 801c086:	d00a      	beq.n	801c09e <USBD_StdEPReq+0x1e4>
 801c088:	18bb      	adds	r3, r7, r2
 801c08a:	781b      	ldrb	r3, [r3, #0]
 801c08c:	2b80      	cmp	r3, #128	@ 0x80
 801c08e:	d006      	beq.n	801c09e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801c090:	683a      	ldr	r2, [r7, #0]
 801c092:	687b      	ldr	r3, [r7, #4]
 801c094:	0011      	movs	r1, r2
 801c096:	0018      	movs	r0, r3
 801c098:	f000 fc59 	bl	801c94e <USBD_CtlError>
                break;
 801c09c:	e0ac      	b.n	801c1f8 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c09e:	220e      	movs	r2, #14
 801c0a0:	18bb      	adds	r3, r7, r2
 801c0a2:	781b      	ldrb	r3, [r3, #0]
 801c0a4:	b25b      	sxtb	r3, r3
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	da0c      	bge.n	801c0c4 <USBD_StdEPReq+0x20a>
 801c0aa:	18bb      	adds	r3, r7, r2
 801c0ac:	781b      	ldrb	r3, [r3, #0]
 801c0ae:	227f      	movs	r2, #127	@ 0x7f
 801c0b0:	401a      	ands	r2, r3
 801c0b2:	0013      	movs	r3, r2
 801c0b4:	009b      	lsls	r3, r3, #2
 801c0b6:	189b      	adds	r3, r3, r2
 801c0b8:	009b      	lsls	r3, r3, #2
 801c0ba:	3310      	adds	r3, #16
 801c0bc:	687a      	ldr	r2, [r7, #4]
 801c0be:	18d3      	adds	r3, r2, r3
 801c0c0:	3304      	adds	r3, #4
 801c0c2:	e00d      	b.n	801c0e0 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c0c4:	230e      	movs	r3, #14
 801c0c6:	18fb      	adds	r3, r7, r3
 801c0c8:	781b      	ldrb	r3, [r3, #0]
 801c0ca:	227f      	movs	r2, #127	@ 0x7f
 801c0cc:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c0ce:	0013      	movs	r3, r2
 801c0d0:	009b      	lsls	r3, r3, #2
 801c0d2:	189b      	adds	r3, r3, r2
 801c0d4:	009b      	lsls	r3, r3, #2
 801c0d6:	3351      	adds	r3, #81	@ 0x51
 801c0d8:	33ff      	adds	r3, #255	@ 0xff
 801c0da:	687a      	ldr	r2, [r7, #4]
 801c0dc:	18d3      	adds	r3, r2, r3
 801c0de:	3304      	adds	r3, #4
 801c0e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801c0e2:	68bb      	ldr	r3, [r7, #8]
 801c0e4:	2200      	movs	r2, #0
 801c0e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c0e8:	68b9      	ldr	r1, [r7, #8]
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	2202      	movs	r2, #2
 801c0ee:	0018      	movs	r0, r3
 801c0f0:	f000 fcab 	bl	801ca4a <USBD_CtlSendData>
              break;
 801c0f4:	e080      	b.n	801c1f8 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801c0f6:	220e      	movs	r2, #14
 801c0f8:	18bb      	adds	r3, r7, r2
 801c0fa:	781b      	ldrb	r3, [r3, #0]
 801c0fc:	b25b      	sxtb	r3, r3
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	da14      	bge.n	801c12c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801c102:	18bb      	adds	r3, r7, r2
 801c104:	781b      	ldrb	r3, [r3, #0]
 801c106:	220f      	movs	r2, #15
 801c108:	401a      	ands	r2, r3
 801c10a:	6879      	ldr	r1, [r7, #4]
 801c10c:	0013      	movs	r3, r2
 801c10e:	009b      	lsls	r3, r3, #2
 801c110:	189b      	adds	r3, r3, r2
 801c112:	009b      	lsls	r3, r3, #2
 801c114:	18cb      	adds	r3, r1, r3
 801c116:	3318      	adds	r3, #24
 801c118:	681b      	ldr	r3, [r3, #0]
 801c11a:	2b00      	cmp	r3, #0
 801c11c:	d11e      	bne.n	801c15c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c11e:	683a      	ldr	r2, [r7, #0]
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	0011      	movs	r1, r2
 801c124:	0018      	movs	r0, r3
 801c126:	f000 fc12 	bl	801c94e <USBD_CtlError>
                  break;
 801c12a:	e065      	b.n	801c1f8 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801c12c:	230e      	movs	r3, #14
 801c12e:	18fb      	adds	r3, r7, r3
 801c130:	781b      	ldrb	r3, [r3, #0]
 801c132:	220f      	movs	r2, #15
 801c134:	401a      	ands	r2, r3
 801c136:	6878      	ldr	r0, [r7, #4]
 801c138:	23ac      	movs	r3, #172	@ 0xac
 801c13a:	0059      	lsls	r1, r3, #1
 801c13c:	0013      	movs	r3, r2
 801c13e:	009b      	lsls	r3, r3, #2
 801c140:	189b      	adds	r3, r3, r2
 801c142:	009b      	lsls	r3, r3, #2
 801c144:	18c3      	adds	r3, r0, r3
 801c146:	185b      	adds	r3, r3, r1
 801c148:	681b      	ldr	r3, [r3, #0]
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	d106      	bne.n	801c15c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801c14e:	683a      	ldr	r2, [r7, #0]
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	0011      	movs	r1, r2
 801c154:	0018      	movs	r0, r3
 801c156:	f000 fbfa 	bl	801c94e <USBD_CtlError>
                  break;
 801c15a:	e04d      	b.n	801c1f8 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c15c:	220e      	movs	r2, #14
 801c15e:	18bb      	adds	r3, r7, r2
 801c160:	781b      	ldrb	r3, [r3, #0]
 801c162:	b25b      	sxtb	r3, r3
 801c164:	2b00      	cmp	r3, #0
 801c166:	da0c      	bge.n	801c182 <USBD_StdEPReq+0x2c8>
 801c168:	18bb      	adds	r3, r7, r2
 801c16a:	781b      	ldrb	r3, [r3, #0]
 801c16c:	227f      	movs	r2, #127	@ 0x7f
 801c16e:	401a      	ands	r2, r3
 801c170:	0013      	movs	r3, r2
 801c172:	009b      	lsls	r3, r3, #2
 801c174:	189b      	adds	r3, r3, r2
 801c176:	009b      	lsls	r3, r3, #2
 801c178:	3310      	adds	r3, #16
 801c17a:	687a      	ldr	r2, [r7, #4]
 801c17c:	18d3      	adds	r3, r2, r3
 801c17e:	3304      	adds	r3, #4
 801c180:	e00d      	b.n	801c19e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801c182:	230e      	movs	r3, #14
 801c184:	18fb      	adds	r3, r7, r3
 801c186:	781b      	ldrb	r3, [r3, #0]
 801c188:	227f      	movs	r2, #127	@ 0x7f
 801c18a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801c18c:	0013      	movs	r3, r2
 801c18e:	009b      	lsls	r3, r3, #2
 801c190:	189b      	adds	r3, r3, r2
 801c192:	009b      	lsls	r3, r3, #2
 801c194:	3351      	adds	r3, #81	@ 0x51
 801c196:	33ff      	adds	r3, #255	@ 0xff
 801c198:	687a      	ldr	r2, [r7, #4]
 801c19a:	18d3      	adds	r3, r2, r3
 801c19c:	3304      	adds	r3, #4
 801c19e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801c1a0:	220e      	movs	r2, #14
 801c1a2:	18bb      	adds	r3, r7, r2
 801c1a4:	781b      	ldrb	r3, [r3, #0]
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	d003      	beq.n	801c1b2 <USBD_StdEPReq+0x2f8>
 801c1aa:	18bb      	adds	r3, r7, r2
 801c1ac:	781b      	ldrb	r3, [r3, #0]
 801c1ae:	2b80      	cmp	r3, #128	@ 0x80
 801c1b0:	d103      	bne.n	801c1ba <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801c1b2:	68bb      	ldr	r3, [r7, #8]
 801c1b4:	2200      	movs	r2, #0
 801c1b6:	601a      	str	r2, [r3, #0]
 801c1b8:	e010      	b.n	801c1dc <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801c1ba:	230e      	movs	r3, #14
 801c1bc:	18fb      	adds	r3, r7, r3
 801c1be:	781a      	ldrb	r2, [r3, #0]
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	0011      	movs	r1, r2
 801c1c4:	0018      	movs	r0, r3
 801c1c6:	f001 f940 	bl	801d44a <USBD_LL_IsStallEP>
 801c1ca:	1e03      	subs	r3, r0, #0
 801c1cc:	d003      	beq.n	801c1d6 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801c1ce:	68bb      	ldr	r3, [r7, #8]
 801c1d0:	2201      	movs	r2, #1
 801c1d2:	601a      	str	r2, [r3, #0]
 801c1d4:	e002      	b.n	801c1dc <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801c1d6:	68bb      	ldr	r3, [r7, #8]
 801c1d8:	2200      	movs	r2, #0
 801c1da:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801c1dc:	68b9      	ldr	r1, [r7, #8]
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	2202      	movs	r2, #2
 801c1e2:	0018      	movs	r0, r3
 801c1e4:	f000 fc31 	bl	801ca4a <USBD_CtlSendData>
              break;
 801c1e8:	e006      	b.n	801c1f8 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801c1ea:	683a      	ldr	r2, [r7, #0]
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	0011      	movs	r1, r2
 801c1f0:	0018      	movs	r0, r3
 801c1f2:	f000 fbac 	bl	801c94e <USBD_CtlError>
              break;
 801c1f6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801c1f8:	e006      	b.n	801c208 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801c1fa:	683a      	ldr	r2, [r7, #0]
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	0011      	movs	r1, r2
 801c200:	0018      	movs	r0, r3
 801c202:	f000 fba4 	bl	801c94e <USBD_CtlError>
          break;
 801c206:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801c208:	e006      	b.n	801c218 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801c20a:	683a      	ldr	r2, [r7, #0]
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	0011      	movs	r1, r2
 801c210:	0018      	movs	r0, r3
 801c212:	f000 fb9c 	bl	801c94e <USBD_CtlError>
      break;
 801c216:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801c218:	230f      	movs	r3, #15
 801c21a:	18fb      	adds	r3, r7, r3
 801c21c:	781b      	ldrb	r3, [r3, #0]
}
 801c21e:	0018      	movs	r0, r3
 801c220:	46bd      	mov	sp, r7
 801c222:	b004      	add	sp, #16
 801c224:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801c228 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801c228:	b580      	push	{r7, lr}
 801c22a:	b084      	sub	sp, #16
 801c22c:	af00      	add	r7, sp, #0
 801c22e:	6078      	str	r0, [r7, #4]
 801c230:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801c232:	2308      	movs	r3, #8
 801c234:	18fb      	adds	r3, r7, r3
 801c236:	2200      	movs	r2, #0
 801c238:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801c23a:	2300      	movs	r3, #0
 801c23c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801c23e:	230b      	movs	r3, #11
 801c240:	18fb      	adds	r3, r7, r3
 801c242:	2200      	movs	r2, #0
 801c244:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801c246:	683b      	ldr	r3, [r7, #0]
 801c248:	885b      	ldrh	r3, [r3, #2]
 801c24a:	0a1b      	lsrs	r3, r3, #8
 801c24c:	b29b      	uxth	r3, r3
 801c24e:	2b07      	cmp	r3, #7
 801c250:	d900      	bls.n	801c254 <USBD_GetDescriptor+0x2c>
 801c252:	e159      	b.n	801c508 <USBD_GetDescriptor+0x2e0>
 801c254:	009a      	lsls	r2, r3, #2
 801c256:	4bcb      	ldr	r3, [pc, #812]	@ (801c584 <USBD_GetDescriptor+0x35c>)
 801c258:	18d3      	adds	r3, r2, r3
 801c25a:	681b      	ldr	r3, [r3, #0]
 801c25c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801c25e:	687a      	ldr	r2, [r7, #4]
 801c260:	23ac      	movs	r3, #172	@ 0xac
 801c262:	009b      	lsls	r3, r3, #2
 801c264:	58d3      	ldr	r3, [r2, r3]
 801c266:	681b      	ldr	r3, [r3, #0]
 801c268:	687a      	ldr	r2, [r7, #4]
 801c26a:	7c12      	ldrb	r2, [r2, #16]
 801c26c:	2108      	movs	r1, #8
 801c26e:	1879      	adds	r1, r7, r1
 801c270:	0010      	movs	r0, r2
 801c272:	4798      	blx	r3
 801c274:	0003      	movs	r3, r0
 801c276:	60fb      	str	r3, [r7, #12]
      break;
 801c278:	e153      	b.n	801c522 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	7c1b      	ldrb	r3, [r3, #16]
 801c27e:	2b00      	cmp	r3, #0
 801c280:	d10f      	bne.n	801c2a2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801c282:	687a      	ldr	r2, [r7, #4]
 801c284:	23ad      	movs	r3, #173	@ 0xad
 801c286:	009b      	lsls	r3, r3, #2
 801c288:	58d3      	ldr	r3, [r2, r3]
 801c28a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c28c:	2208      	movs	r2, #8
 801c28e:	18ba      	adds	r2, r7, r2
 801c290:	0010      	movs	r0, r2
 801c292:	4798      	blx	r3
 801c294:	0003      	movs	r3, r0
 801c296:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c298:	68fb      	ldr	r3, [r7, #12]
 801c29a:	3301      	adds	r3, #1
 801c29c:	2202      	movs	r2, #2
 801c29e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801c2a0:	e13f      	b.n	801c522 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801c2a2:	687a      	ldr	r2, [r7, #4]
 801c2a4:	23ad      	movs	r3, #173	@ 0xad
 801c2a6:	009b      	lsls	r3, r3, #2
 801c2a8:	58d3      	ldr	r3, [r2, r3]
 801c2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c2ac:	2208      	movs	r2, #8
 801c2ae:	18ba      	adds	r2, r7, r2
 801c2b0:	0010      	movs	r0, r2
 801c2b2:	4798      	blx	r3
 801c2b4:	0003      	movs	r3, r0
 801c2b6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801c2b8:	68fb      	ldr	r3, [r7, #12]
 801c2ba:	3301      	adds	r3, #1
 801c2bc:	2202      	movs	r2, #2
 801c2be:	701a      	strb	r2, [r3, #0]
      break;
 801c2c0:	e12f      	b.n	801c522 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801c2c2:	683b      	ldr	r3, [r7, #0]
 801c2c4:	885b      	ldrh	r3, [r3, #2]
 801c2c6:	b2db      	uxtb	r3, r3
 801c2c8:	2b05      	cmp	r3, #5
 801c2ca:	d900      	bls.n	801c2ce <USBD_GetDescriptor+0xa6>
 801c2cc:	e0d0      	b.n	801c470 <USBD_GetDescriptor+0x248>
 801c2ce:	009a      	lsls	r2, r3, #2
 801c2d0:	4bad      	ldr	r3, [pc, #692]	@ (801c588 <USBD_GetDescriptor+0x360>)
 801c2d2:	18d3      	adds	r3, r2, r3
 801c2d4:	681b      	ldr	r3, [r3, #0]
 801c2d6:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801c2d8:	687a      	ldr	r2, [r7, #4]
 801c2da:	23ac      	movs	r3, #172	@ 0xac
 801c2dc:	009b      	lsls	r3, r3, #2
 801c2de:	58d3      	ldr	r3, [r2, r3]
 801c2e0:	685b      	ldr	r3, [r3, #4]
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d00d      	beq.n	801c302 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801c2e6:	687a      	ldr	r2, [r7, #4]
 801c2e8:	23ac      	movs	r3, #172	@ 0xac
 801c2ea:	009b      	lsls	r3, r3, #2
 801c2ec:	58d3      	ldr	r3, [r2, r3]
 801c2ee:	685b      	ldr	r3, [r3, #4]
 801c2f0:	687a      	ldr	r2, [r7, #4]
 801c2f2:	7c12      	ldrb	r2, [r2, #16]
 801c2f4:	2108      	movs	r1, #8
 801c2f6:	1879      	adds	r1, r7, r1
 801c2f8:	0010      	movs	r0, r2
 801c2fa:	4798      	blx	r3
 801c2fc:	0003      	movs	r3, r0
 801c2fe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c300:	e0c3      	b.n	801c48a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c302:	683a      	ldr	r2, [r7, #0]
 801c304:	687b      	ldr	r3, [r7, #4]
 801c306:	0011      	movs	r1, r2
 801c308:	0018      	movs	r0, r3
 801c30a:	f000 fb20 	bl	801c94e <USBD_CtlError>
            err++;
 801c30e:	210b      	movs	r1, #11
 801c310:	187b      	adds	r3, r7, r1
 801c312:	781a      	ldrb	r2, [r3, #0]
 801c314:	187b      	adds	r3, r7, r1
 801c316:	3201      	adds	r2, #1
 801c318:	701a      	strb	r2, [r3, #0]
          break;
 801c31a:	e0b6      	b.n	801c48a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801c31c:	687a      	ldr	r2, [r7, #4]
 801c31e:	23ac      	movs	r3, #172	@ 0xac
 801c320:	009b      	lsls	r3, r3, #2
 801c322:	58d3      	ldr	r3, [r2, r3]
 801c324:	689b      	ldr	r3, [r3, #8]
 801c326:	2b00      	cmp	r3, #0
 801c328:	d00d      	beq.n	801c346 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801c32a:	687a      	ldr	r2, [r7, #4]
 801c32c:	23ac      	movs	r3, #172	@ 0xac
 801c32e:	009b      	lsls	r3, r3, #2
 801c330:	58d3      	ldr	r3, [r2, r3]
 801c332:	689b      	ldr	r3, [r3, #8]
 801c334:	687a      	ldr	r2, [r7, #4]
 801c336:	7c12      	ldrb	r2, [r2, #16]
 801c338:	2108      	movs	r1, #8
 801c33a:	1879      	adds	r1, r7, r1
 801c33c:	0010      	movs	r0, r2
 801c33e:	4798      	blx	r3
 801c340:	0003      	movs	r3, r0
 801c342:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c344:	e0a1      	b.n	801c48a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c346:	683a      	ldr	r2, [r7, #0]
 801c348:	687b      	ldr	r3, [r7, #4]
 801c34a:	0011      	movs	r1, r2
 801c34c:	0018      	movs	r0, r3
 801c34e:	f000 fafe 	bl	801c94e <USBD_CtlError>
            err++;
 801c352:	210b      	movs	r1, #11
 801c354:	187b      	adds	r3, r7, r1
 801c356:	781a      	ldrb	r2, [r3, #0]
 801c358:	187b      	adds	r3, r7, r1
 801c35a:	3201      	adds	r2, #1
 801c35c:	701a      	strb	r2, [r3, #0]
          break;
 801c35e:	e094      	b.n	801c48a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801c360:	687a      	ldr	r2, [r7, #4]
 801c362:	23ac      	movs	r3, #172	@ 0xac
 801c364:	009b      	lsls	r3, r3, #2
 801c366:	58d3      	ldr	r3, [r2, r3]
 801c368:	68db      	ldr	r3, [r3, #12]
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	d00d      	beq.n	801c38a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801c36e:	687a      	ldr	r2, [r7, #4]
 801c370:	23ac      	movs	r3, #172	@ 0xac
 801c372:	009b      	lsls	r3, r3, #2
 801c374:	58d3      	ldr	r3, [r2, r3]
 801c376:	68db      	ldr	r3, [r3, #12]
 801c378:	687a      	ldr	r2, [r7, #4]
 801c37a:	7c12      	ldrb	r2, [r2, #16]
 801c37c:	2108      	movs	r1, #8
 801c37e:	1879      	adds	r1, r7, r1
 801c380:	0010      	movs	r0, r2
 801c382:	4798      	blx	r3
 801c384:	0003      	movs	r3, r0
 801c386:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c388:	e07f      	b.n	801c48a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c38a:	683a      	ldr	r2, [r7, #0]
 801c38c:	687b      	ldr	r3, [r7, #4]
 801c38e:	0011      	movs	r1, r2
 801c390:	0018      	movs	r0, r3
 801c392:	f000 fadc 	bl	801c94e <USBD_CtlError>
            err++;
 801c396:	210b      	movs	r1, #11
 801c398:	187b      	adds	r3, r7, r1
 801c39a:	781a      	ldrb	r2, [r3, #0]
 801c39c:	187b      	adds	r3, r7, r1
 801c39e:	3201      	adds	r2, #1
 801c3a0:	701a      	strb	r2, [r3, #0]
          break;
 801c3a2:	e072      	b.n	801c48a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801c3a4:	687a      	ldr	r2, [r7, #4]
 801c3a6:	23ac      	movs	r3, #172	@ 0xac
 801c3a8:	009b      	lsls	r3, r3, #2
 801c3aa:	58d3      	ldr	r3, [r2, r3]
 801c3ac:	691b      	ldr	r3, [r3, #16]
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	d00d      	beq.n	801c3ce <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801c3b2:	687a      	ldr	r2, [r7, #4]
 801c3b4:	23ac      	movs	r3, #172	@ 0xac
 801c3b6:	009b      	lsls	r3, r3, #2
 801c3b8:	58d3      	ldr	r3, [r2, r3]
 801c3ba:	691b      	ldr	r3, [r3, #16]
 801c3bc:	687a      	ldr	r2, [r7, #4]
 801c3be:	7c12      	ldrb	r2, [r2, #16]
 801c3c0:	2108      	movs	r1, #8
 801c3c2:	1879      	adds	r1, r7, r1
 801c3c4:	0010      	movs	r0, r2
 801c3c6:	4798      	blx	r3
 801c3c8:	0003      	movs	r3, r0
 801c3ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c3cc:	e05d      	b.n	801c48a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c3ce:	683a      	ldr	r2, [r7, #0]
 801c3d0:	687b      	ldr	r3, [r7, #4]
 801c3d2:	0011      	movs	r1, r2
 801c3d4:	0018      	movs	r0, r3
 801c3d6:	f000 faba 	bl	801c94e <USBD_CtlError>
            err++;
 801c3da:	210b      	movs	r1, #11
 801c3dc:	187b      	adds	r3, r7, r1
 801c3de:	781a      	ldrb	r2, [r3, #0]
 801c3e0:	187b      	adds	r3, r7, r1
 801c3e2:	3201      	adds	r2, #1
 801c3e4:	701a      	strb	r2, [r3, #0]
          break;
 801c3e6:	e050      	b.n	801c48a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801c3e8:	687a      	ldr	r2, [r7, #4]
 801c3ea:	23ac      	movs	r3, #172	@ 0xac
 801c3ec:	009b      	lsls	r3, r3, #2
 801c3ee:	58d3      	ldr	r3, [r2, r3]
 801c3f0:	695b      	ldr	r3, [r3, #20]
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	d00d      	beq.n	801c412 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801c3f6:	687a      	ldr	r2, [r7, #4]
 801c3f8:	23ac      	movs	r3, #172	@ 0xac
 801c3fa:	009b      	lsls	r3, r3, #2
 801c3fc:	58d3      	ldr	r3, [r2, r3]
 801c3fe:	695b      	ldr	r3, [r3, #20]
 801c400:	687a      	ldr	r2, [r7, #4]
 801c402:	7c12      	ldrb	r2, [r2, #16]
 801c404:	2108      	movs	r1, #8
 801c406:	1879      	adds	r1, r7, r1
 801c408:	0010      	movs	r0, r2
 801c40a:	4798      	blx	r3
 801c40c:	0003      	movs	r3, r0
 801c40e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c410:	e03b      	b.n	801c48a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c412:	683a      	ldr	r2, [r7, #0]
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	0011      	movs	r1, r2
 801c418:	0018      	movs	r0, r3
 801c41a:	f000 fa98 	bl	801c94e <USBD_CtlError>
            err++;
 801c41e:	210b      	movs	r1, #11
 801c420:	187b      	adds	r3, r7, r1
 801c422:	781a      	ldrb	r2, [r3, #0]
 801c424:	187b      	adds	r3, r7, r1
 801c426:	3201      	adds	r2, #1
 801c428:	701a      	strb	r2, [r3, #0]
          break;
 801c42a:	e02e      	b.n	801c48a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801c42c:	687a      	ldr	r2, [r7, #4]
 801c42e:	23ac      	movs	r3, #172	@ 0xac
 801c430:	009b      	lsls	r3, r3, #2
 801c432:	58d3      	ldr	r3, [r2, r3]
 801c434:	699b      	ldr	r3, [r3, #24]
 801c436:	2b00      	cmp	r3, #0
 801c438:	d00d      	beq.n	801c456 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801c43a:	687a      	ldr	r2, [r7, #4]
 801c43c:	23ac      	movs	r3, #172	@ 0xac
 801c43e:	009b      	lsls	r3, r3, #2
 801c440:	58d3      	ldr	r3, [r2, r3]
 801c442:	699b      	ldr	r3, [r3, #24]
 801c444:	687a      	ldr	r2, [r7, #4]
 801c446:	7c12      	ldrb	r2, [r2, #16]
 801c448:	2108      	movs	r1, #8
 801c44a:	1879      	adds	r1, r7, r1
 801c44c:	0010      	movs	r0, r2
 801c44e:	4798      	blx	r3
 801c450:	0003      	movs	r3, r0
 801c452:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801c454:	e019      	b.n	801c48a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801c456:	683a      	ldr	r2, [r7, #0]
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	0011      	movs	r1, r2
 801c45c:	0018      	movs	r0, r3
 801c45e:	f000 fa76 	bl	801c94e <USBD_CtlError>
            err++;
 801c462:	210b      	movs	r1, #11
 801c464:	187b      	adds	r3, r7, r1
 801c466:	781a      	ldrb	r2, [r3, #0]
 801c468:	187b      	adds	r3, r7, r1
 801c46a:	3201      	adds	r2, #1
 801c46c:	701a      	strb	r2, [r3, #0]
          break;
 801c46e:	e00c      	b.n	801c48a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801c470:	683a      	ldr	r2, [r7, #0]
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	0011      	movs	r1, r2
 801c476:	0018      	movs	r0, r3
 801c478:	f000 fa69 	bl	801c94e <USBD_CtlError>
          err++;
 801c47c:	210b      	movs	r1, #11
 801c47e:	187b      	adds	r3, r7, r1
 801c480:	781a      	ldrb	r2, [r3, #0]
 801c482:	187b      	adds	r3, r7, r1
 801c484:	3201      	adds	r2, #1
 801c486:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801c488:	e04b      	b.n	801c522 <USBD_GetDescriptor+0x2fa>
 801c48a:	e04a      	b.n	801c522 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	7c1b      	ldrb	r3, [r3, #16]
 801c490:	2b00      	cmp	r3, #0
 801c492:	d10b      	bne.n	801c4ac <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801c494:	687a      	ldr	r2, [r7, #4]
 801c496:	23ad      	movs	r3, #173	@ 0xad
 801c498:	009b      	lsls	r3, r3, #2
 801c49a:	58d3      	ldr	r3, [r2, r3]
 801c49c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c49e:	2208      	movs	r2, #8
 801c4a0:	18ba      	adds	r2, r7, r2
 801c4a2:	0010      	movs	r0, r2
 801c4a4:	4798      	blx	r3
 801c4a6:	0003      	movs	r3, r0
 801c4a8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c4aa:	e03a      	b.n	801c522 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c4ac:	683a      	ldr	r2, [r7, #0]
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	0011      	movs	r1, r2
 801c4b2:	0018      	movs	r0, r3
 801c4b4:	f000 fa4b 	bl	801c94e <USBD_CtlError>
        err++;
 801c4b8:	210b      	movs	r1, #11
 801c4ba:	187b      	adds	r3, r7, r1
 801c4bc:	781a      	ldrb	r2, [r3, #0]
 801c4be:	187b      	adds	r3, r7, r1
 801c4c0:	3201      	adds	r2, #1
 801c4c2:	701a      	strb	r2, [r3, #0]
      break;
 801c4c4:	e02d      	b.n	801c522 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c4c6:	687b      	ldr	r3, [r7, #4]
 801c4c8:	7c1b      	ldrb	r3, [r3, #16]
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	d10f      	bne.n	801c4ee <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801c4ce:	687a      	ldr	r2, [r7, #4]
 801c4d0:	23ad      	movs	r3, #173	@ 0xad
 801c4d2:	009b      	lsls	r3, r3, #2
 801c4d4:	58d3      	ldr	r3, [r2, r3]
 801c4d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c4d8:	2208      	movs	r2, #8
 801c4da:	18ba      	adds	r2, r7, r2
 801c4dc:	0010      	movs	r0, r2
 801c4de:	4798      	blx	r3
 801c4e0:	0003      	movs	r3, r0
 801c4e2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	3301      	adds	r3, #1
 801c4e8:	2207      	movs	r2, #7
 801c4ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801c4ec:	e019      	b.n	801c522 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801c4ee:	683a      	ldr	r2, [r7, #0]
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	0011      	movs	r1, r2
 801c4f4:	0018      	movs	r0, r3
 801c4f6:	f000 fa2a 	bl	801c94e <USBD_CtlError>
        err++;
 801c4fa:	210b      	movs	r1, #11
 801c4fc:	187b      	adds	r3, r7, r1
 801c4fe:	781a      	ldrb	r2, [r3, #0]
 801c500:	187b      	adds	r3, r7, r1
 801c502:	3201      	adds	r2, #1
 801c504:	701a      	strb	r2, [r3, #0]
      break;
 801c506:	e00c      	b.n	801c522 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801c508:	683a      	ldr	r2, [r7, #0]
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	0011      	movs	r1, r2
 801c50e:	0018      	movs	r0, r3
 801c510:	f000 fa1d 	bl	801c94e <USBD_CtlError>
      err++;
 801c514:	210b      	movs	r1, #11
 801c516:	187b      	adds	r3, r7, r1
 801c518:	781a      	ldrb	r2, [r3, #0]
 801c51a:	187b      	adds	r3, r7, r1
 801c51c:	3201      	adds	r2, #1
 801c51e:	701a      	strb	r2, [r3, #0]
      break;
 801c520:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801c522:	230b      	movs	r3, #11
 801c524:	18fb      	adds	r3, r7, r3
 801c526:	781b      	ldrb	r3, [r3, #0]
 801c528:	2b00      	cmp	r3, #0
 801c52a:	d127      	bne.n	801c57c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801c52c:	2108      	movs	r1, #8
 801c52e:	187b      	adds	r3, r7, r1
 801c530:	881b      	ldrh	r3, [r3, #0]
 801c532:	2b00      	cmp	r3, #0
 801c534:	d019      	beq.n	801c56a <USBD_GetDescriptor+0x342>
 801c536:	683b      	ldr	r3, [r7, #0]
 801c538:	88db      	ldrh	r3, [r3, #6]
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d015      	beq.n	801c56a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801c53e:	683b      	ldr	r3, [r7, #0]
 801c540:	88da      	ldrh	r2, [r3, #6]
 801c542:	187b      	adds	r3, r7, r1
 801c544:	881b      	ldrh	r3, [r3, #0]
 801c546:	1c18      	adds	r0, r3, #0
 801c548:	1c11      	adds	r1, r2, #0
 801c54a:	b28a      	uxth	r2, r1
 801c54c:	b283      	uxth	r3, r0
 801c54e:	429a      	cmp	r2, r3
 801c550:	d900      	bls.n	801c554 <USBD_GetDescriptor+0x32c>
 801c552:	1c01      	adds	r1, r0, #0
 801c554:	b28a      	uxth	r2, r1
 801c556:	2108      	movs	r1, #8
 801c558:	187b      	adds	r3, r7, r1
 801c55a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801c55c:	187b      	adds	r3, r7, r1
 801c55e:	881a      	ldrh	r2, [r3, #0]
 801c560:	68f9      	ldr	r1, [r7, #12]
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	0018      	movs	r0, r3
 801c566:	f000 fa70 	bl	801ca4a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801c56a:	683b      	ldr	r3, [r7, #0]
 801c56c:	88db      	ldrh	r3, [r3, #6]
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d105      	bne.n	801c57e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	0018      	movs	r0, r3
 801c576:	f000 fad2 	bl	801cb1e <USBD_CtlSendStatus>
 801c57a:	e000      	b.n	801c57e <USBD_GetDescriptor+0x356>
    return;
 801c57c:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c57e:	46bd      	mov	sp, r7
 801c580:	b004      	add	sp, #16
 801c582:	bd80      	pop	{r7, pc}
 801c584:	08025650 	.word	0x08025650
 801c588:	08025670 	.word	0x08025670

0801c58c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c58c:	b590      	push	{r4, r7, lr}
 801c58e:	b085      	sub	sp, #20
 801c590:	af00      	add	r7, sp, #0
 801c592:	6078      	str	r0, [r7, #4]
 801c594:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801c596:	683b      	ldr	r3, [r7, #0]
 801c598:	889b      	ldrh	r3, [r3, #4]
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d13d      	bne.n	801c61a <USBD_SetAddress+0x8e>
 801c59e:	683b      	ldr	r3, [r7, #0]
 801c5a0:	88db      	ldrh	r3, [r3, #6]
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	d139      	bne.n	801c61a <USBD_SetAddress+0x8e>
 801c5a6:	683b      	ldr	r3, [r7, #0]
 801c5a8:	885b      	ldrh	r3, [r3, #2]
 801c5aa:	2b7f      	cmp	r3, #127	@ 0x7f
 801c5ac:	d835      	bhi.n	801c61a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801c5ae:	683b      	ldr	r3, [r7, #0]
 801c5b0:	885b      	ldrh	r3, [r3, #2]
 801c5b2:	b2da      	uxtb	r2, r3
 801c5b4:	230f      	movs	r3, #15
 801c5b6:	18fb      	adds	r3, r7, r3
 801c5b8:	217f      	movs	r1, #127	@ 0x7f
 801c5ba:	400a      	ands	r2, r1
 801c5bc:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c5be:	687a      	ldr	r2, [r7, #4]
 801c5c0:	23a7      	movs	r3, #167	@ 0xa7
 801c5c2:	009b      	lsls	r3, r3, #2
 801c5c4:	5cd3      	ldrb	r3, [r2, r3]
 801c5c6:	2b03      	cmp	r3, #3
 801c5c8:	d106      	bne.n	801c5d8 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801c5ca:	683a      	ldr	r2, [r7, #0]
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	0011      	movs	r1, r2
 801c5d0:	0018      	movs	r0, r3
 801c5d2:	f000 f9bc 	bl	801c94e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c5d6:	e027      	b.n	801c628 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	240f      	movs	r4, #15
 801c5dc:	193a      	adds	r2, r7, r4
 801c5de:	4914      	ldr	r1, [pc, #80]	@ (801c630 <USBD_SetAddress+0xa4>)
 801c5e0:	7812      	ldrb	r2, [r2, #0]
 801c5e2:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801c5e4:	193b      	adds	r3, r7, r4
 801c5e6:	781a      	ldrb	r2, [r3, #0]
 801c5e8:	687b      	ldr	r3, [r7, #4]
 801c5ea:	0011      	movs	r1, r2
 801c5ec:	0018      	movs	r0, r3
 801c5ee:	f000 ff5d 	bl	801d4ac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	0018      	movs	r0, r3
 801c5f6:	f000 fa92 	bl	801cb1e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801c5fa:	193b      	adds	r3, r7, r4
 801c5fc:	781b      	ldrb	r3, [r3, #0]
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d005      	beq.n	801c60e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801c602:	687a      	ldr	r2, [r7, #4]
 801c604:	23a7      	movs	r3, #167	@ 0xa7
 801c606:	009b      	lsls	r3, r3, #2
 801c608:	2102      	movs	r1, #2
 801c60a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c60c:	e00c      	b.n	801c628 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801c60e:	687a      	ldr	r2, [r7, #4]
 801c610:	23a7      	movs	r3, #167	@ 0xa7
 801c612:	009b      	lsls	r3, r3, #2
 801c614:	2101      	movs	r1, #1
 801c616:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c618:	e006      	b.n	801c628 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801c61a:	683a      	ldr	r2, [r7, #0]
 801c61c:	687b      	ldr	r3, [r7, #4]
 801c61e:	0011      	movs	r1, r2
 801c620:	0018      	movs	r0, r3
 801c622:	f000 f994 	bl	801c94e <USBD_CtlError>
  }
}
 801c626:	46c0      	nop			@ (mov r8, r8)
 801c628:	46c0      	nop			@ (mov r8, r8)
 801c62a:	46bd      	mov	sp, r7
 801c62c:	b005      	add	sp, #20
 801c62e:	bd90      	pop	{r4, r7, pc}
 801c630:	0000029e 	.word	0x0000029e

0801c634 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c634:	b580      	push	{r7, lr}
 801c636:	b082      	sub	sp, #8
 801c638:	af00      	add	r7, sp, #0
 801c63a:	6078      	str	r0, [r7, #4]
 801c63c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801c63e:	683b      	ldr	r3, [r7, #0]
 801c640:	885b      	ldrh	r3, [r3, #2]
 801c642:	b2da      	uxtb	r2, r3
 801c644:	4b4c      	ldr	r3, [pc, #304]	@ (801c778 <USBD_SetConfig+0x144>)
 801c646:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801c648:	4b4b      	ldr	r3, [pc, #300]	@ (801c778 <USBD_SetConfig+0x144>)
 801c64a:	781b      	ldrb	r3, [r3, #0]
 801c64c:	2b01      	cmp	r3, #1
 801c64e:	d906      	bls.n	801c65e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801c650:	683a      	ldr	r2, [r7, #0]
 801c652:	687b      	ldr	r3, [r7, #4]
 801c654:	0011      	movs	r1, r2
 801c656:	0018      	movs	r0, r3
 801c658:	f000 f979 	bl	801c94e <USBD_CtlError>
 801c65c:	e088      	b.n	801c770 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801c65e:	687a      	ldr	r2, [r7, #4]
 801c660:	23a7      	movs	r3, #167	@ 0xa7
 801c662:	009b      	lsls	r3, r3, #2
 801c664:	5cd3      	ldrb	r3, [r2, r3]
 801c666:	2b02      	cmp	r3, #2
 801c668:	d002      	beq.n	801c670 <USBD_SetConfig+0x3c>
 801c66a:	2b03      	cmp	r3, #3
 801c66c:	d029      	beq.n	801c6c2 <USBD_SetConfig+0x8e>
 801c66e:	e071      	b.n	801c754 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801c670:	4b41      	ldr	r3, [pc, #260]	@ (801c778 <USBD_SetConfig+0x144>)
 801c672:	781b      	ldrb	r3, [r3, #0]
 801c674:	2b00      	cmp	r3, #0
 801c676:	d01f      	beq.n	801c6b8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801c678:	4b3f      	ldr	r3, [pc, #252]	@ (801c778 <USBD_SetConfig+0x144>)
 801c67a:	781b      	ldrb	r3, [r3, #0]
 801c67c:	001a      	movs	r2, r3
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801c682:	687a      	ldr	r2, [r7, #4]
 801c684:	23a7      	movs	r3, #167	@ 0xa7
 801c686:	009b      	lsls	r3, r3, #2
 801c688:	2103      	movs	r1, #3
 801c68a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c68c:	4b3a      	ldr	r3, [pc, #232]	@ (801c778 <USBD_SetConfig+0x144>)
 801c68e:	781a      	ldrb	r2, [r3, #0]
 801c690:	687b      	ldr	r3, [r7, #4]
 801c692:	0011      	movs	r1, r2
 801c694:	0018      	movs	r0, r3
 801c696:	f7ff f8c6 	bl	801b826 <USBD_SetClassConfig>
 801c69a:	0003      	movs	r3, r0
 801c69c:	2b02      	cmp	r3, #2
 801c69e:	d106      	bne.n	801c6ae <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801c6a0:	683a      	ldr	r2, [r7, #0]
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	0011      	movs	r1, r2
 801c6a6:	0018      	movs	r0, r3
 801c6a8:	f000 f951 	bl	801c94e <USBD_CtlError>
            return;
 801c6ac:	e060      	b.n	801c770 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	0018      	movs	r0, r3
 801c6b2:	f000 fa34 	bl	801cb1e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c6b6:	e05b      	b.n	801c770 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c6b8:	687b      	ldr	r3, [r7, #4]
 801c6ba:	0018      	movs	r0, r3
 801c6bc:	f000 fa2f 	bl	801cb1e <USBD_CtlSendStatus>
        break;
 801c6c0:	e056      	b.n	801c770 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801c6c2:	4b2d      	ldr	r3, [pc, #180]	@ (801c778 <USBD_SetConfig+0x144>)
 801c6c4:	781b      	ldrb	r3, [r3, #0]
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	d115      	bne.n	801c6f6 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801c6ca:	687a      	ldr	r2, [r7, #4]
 801c6cc:	23a7      	movs	r3, #167	@ 0xa7
 801c6ce:	009b      	lsls	r3, r3, #2
 801c6d0:	2102      	movs	r1, #2
 801c6d2:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801c6d4:	4b28      	ldr	r3, [pc, #160]	@ (801c778 <USBD_SetConfig+0x144>)
 801c6d6:	781b      	ldrb	r3, [r3, #0]
 801c6d8:	001a      	movs	r2, r3
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801c6de:	4b26      	ldr	r3, [pc, #152]	@ (801c778 <USBD_SetConfig+0x144>)
 801c6e0:	781a      	ldrb	r2, [r3, #0]
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	0011      	movs	r1, r2
 801c6e6:	0018      	movs	r0, r3
 801c6e8:	f7ff f8c4 	bl	801b874 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	0018      	movs	r0, r3
 801c6f0:	f000 fa15 	bl	801cb1e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801c6f4:	e03c      	b.n	801c770 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801c6f6:	4b20      	ldr	r3, [pc, #128]	@ (801c778 <USBD_SetConfig+0x144>)
 801c6f8:	781b      	ldrb	r3, [r3, #0]
 801c6fa:	001a      	movs	r2, r3
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	685b      	ldr	r3, [r3, #4]
 801c700:	429a      	cmp	r2, r3
 801c702:	d022      	beq.n	801c74a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	685b      	ldr	r3, [r3, #4]
 801c708:	b2da      	uxtb	r2, r3
 801c70a:	687b      	ldr	r3, [r7, #4]
 801c70c:	0011      	movs	r1, r2
 801c70e:	0018      	movs	r0, r3
 801c710:	f7ff f8b0 	bl	801b874 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801c714:	4b18      	ldr	r3, [pc, #96]	@ (801c778 <USBD_SetConfig+0x144>)
 801c716:	781b      	ldrb	r3, [r3, #0]
 801c718:	001a      	movs	r2, r3
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801c71e:	4b16      	ldr	r3, [pc, #88]	@ (801c778 <USBD_SetConfig+0x144>)
 801c720:	781a      	ldrb	r2, [r3, #0]
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	0011      	movs	r1, r2
 801c726:	0018      	movs	r0, r3
 801c728:	f7ff f87d 	bl	801b826 <USBD_SetClassConfig>
 801c72c:	0003      	movs	r3, r0
 801c72e:	2b02      	cmp	r3, #2
 801c730:	d106      	bne.n	801c740 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801c732:	683a      	ldr	r2, [r7, #0]
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	0011      	movs	r1, r2
 801c738:	0018      	movs	r0, r3
 801c73a:	f000 f908 	bl	801c94e <USBD_CtlError>
            return;
 801c73e:	e017      	b.n	801c770 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c740:	687b      	ldr	r3, [r7, #4]
 801c742:	0018      	movs	r0, r3
 801c744:	f000 f9eb 	bl	801cb1e <USBD_CtlSendStatus>
        break;
 801c748:	e012      	b.n	801c770 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	0018      	movs	r0, r3
 801c74e:	f000 f9e6 	bl	801cb1e <USBD_CtlSendStatus>
        break;
 801c752:	e00d      	b.n	801c770 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801c754:	683a      	ldr	r2, [r7, #0]
 801c756:	687b      	ldr	r3, [r7, #4]
 801c758:	0011      	movs	r1, r2
 801c75a:	0018      	movs	r0, r3
 801c75c:	f000 f8f7 	bl	801c94e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801c760:	4b05      	ldr	r3, [pc, #20]	@ (801c778 <USBD_SetConfig+0x144>)
 801c762:	781a      	ldrb	r2, [r3, #0]
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	0011      	movs	r1, r2
 801c768:	0018      	movs	r0, r3
 801c76a:	f7ff f883 	bl	801b874 <USBD_ClrClassConfig>
        break;
 801c76e:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801c770:	46bd      	mov	sp, r7
 801c772:	b002      	add	sp, #8
 801c774:	bd80      	pop	{r7, pc}
 801c776:	46c0      	nop			@ (mov r8, r8)
 801c778:	200025c4 	.word	0x200025c4

0801c77c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c77c:	b580      	push	{r7, lr}
 801c77e:	b082      	sub	sp, #8
 801c780:	af00      	add	r7, sp, #0
 801c782:	6078      	str	r0, [r7, #4]
 801c784:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801c786:	683b      	ldr	r3, [r7, #0]
 801c788:	88db      	ldrh	r3, [r3, #6]
 801c78a:	2b01      	cmp	r3, #1
 801c78c:	d006      	beq.n	801c79c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801c78e:	683a      	ldr	r2, [r7, #0]
 801c790:	687b      	ldr	r3, [r7, #4]
 801c792:	0011      	movs	r1, r2
 801c794:	0018      	movs	r0, r3
 801c796:	f000 f8da 	bl	801c94e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801c79a:	e026      	b.n	801c7ea <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801c79c:	687a      	ldr	r2, [r7, #4]
 801c79e:	23a7      	movs	r3, #167	@ 0xa7
 801c7a0:	009b      	lsls	r3, r3, #2
 801c7a2:	5cd3      	ldrb	r3, [r2, r3]
 801c7a4:	2b02      	cmp	r3, #2
 801c7a6:	dc02      	bgt.n	801c7ae <USBD_GetConfig+0x32>
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	dc03      	bgt.n	801c7b4 <USBD_GetConfig+0x38>
 801c7ac:	e016      	b.n	801c7dc <USBD_GetConfig+0x60>
 801c7ae:	2b03      	cmp	r3, #3
 801c7b0:	d00c      	beq.n	801c7cc <USBD_GetConfig+0x50>
 801c7b2:	e013      	b.n	801c7dc <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	2200      	movs	r2, #0
 801c7b8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801c7ba:	687b      	ldr	r3, [r7, #4]
 801c7bc:	3308      	adds	r3, #8
 801c7be:	0019      	movs	r1, r3
 801c7c0:	687b      	ldr	r3, [r7, #4]
 801c7c2:	2201      	movs	r2, #1
 801c7c4:	0018      	movs	r0, r3
 801c7c6:	f000 f940 	bl	801ca4a <USBD_CtlSendData>
        break;
 801c7ca:	e00e      	b.n	801c7ea <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	1d19      	adds	r1, r3, #4
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	2201      	movs	r2, #1
 801c7d4:	0018      	movs	r0, r3
 801c7d6:	f000 f938 	bl	801ca4a <USBD_CtlSendData>
        break;
 801c7da:	e006      	b.n	801c7ea <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801c7dc:	683a      	ldr	r2, [r7, #0]
 801c7de:	687b      	ldr	r3, [r7, #4]
 801c7e0:	0011      	movs	r1, r2
 801c7e2:	0018      	movs	r0, r3
 801c7e4:	f000 f8b3 	bl	801c94e <USBD_CtlError>
        break;
 801c7e8:	46c0      	nop			@ (mov r8, r8)
}
 801c7ea:	46c0      	nop			@ (mov r8, r8)
 801c7ec:	46bd      	mov	sp, r7
 801c7ee:	b002      	add	sp, #8
 801c7f0:	bd80      	pop	{r7, pc}

0801c7f2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801c7f2:	b580      	push	{r7, lr}
 801c7f4:	b082      	sub	sp, #8
 801c7f6:	af00      	add	r7, sp, #0
 801c7f8:	6078      	str	r0, [r7, #4]
 801c7fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c7fc:	687a      	ldr	r2, [r7, #4]
 801c7fe:	23a7      	movs	r3, #167	@ 0xa7
 801c800:	009b      	lsls	r3, r3, #2
 801c802:	5cd3      	ldrb	r3, [r2, r3]
 801c804:	3b01      	subs	r3, #1
 801c806:	2b02      	cmp	r3, #2
 801c808:	d822      	bhi.n	801c850 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801c80a:	683b      	ldr	r3, [r7, #0]
 801c80c:	88db      	ldrh	r3, [r3, #6]
 801c80e:	2b02      	cmp	r3, #2
 801c810:	d006      	beq.n	801c820 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801c812:	683a      	ldr	r2, [r7, #0]
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	0011      	movs	r1, r2
 801c818:	0018      	movs	r0, r3
 801c81a:	f000 f898 	bl	801c94e <USBD_CtlError>
        break;
 801c81e:	e01e      	b.n	801c85e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	2201      	movs	r2, #1
 801c824:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801c826:	687a      	ldr	r2, [r7, #4]
 801c828:	23a9      	movs	r3, #169	@ 0xa9
 801c82a:	009b      	lsls	r3, r3, #2
 801c82c:	58d3      	ldr	r3, [r2, r3]
 801c82e:	2b00      	cmp	r3, #0
 801c830:	d005      	beq.n	801c83e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801c832:	687b      	ldr	r3, [r7, #4]
 801c834:	68db      	ldr	r3, [r3, #12]
 801c836:	2202      	movs	r2, #2
 801c838:	431a      	orrs	r2, r3
 801c83a:	687b      	ldr	r3, [r7, #4]
 801c83c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	330c      	adds	r3, #12
 801c842:	0019      	movs	r1, r3
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	2202      	movs	r2, #2
 801c848:	0018      	movs	r0, r3
 801c84a:	f000 f8fe 	bl	801ca4a <USBD_CtlSendData>
      break;
 801c84e:	e006      	b.n	801c85e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801c850:	683a      	ldr	r2, [r7, #0]
 801c852:	687b      	ldr	r3, [r7, #4]
 801c854:	0011      	movs	r1, r2
 801c856:	0018      	movs	r0, r3
 801c858:	f000 f879 	bl	801c94e <USBD_CtlError>
      break;
 801c85c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801c85e:	46c0      	nop			@ (mov r8, r8)
 801c860:	46bd      	mov	sp, r7
 801c862:	b002      	add	sp, #8
 801c864:	bd80      	pop	{r7, pc}

0801c866 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c866:	b580      	push	{r7, lr}
 801c868:	b082      	sub	sp, #8
 801c86a:	af00      	add	r7, sp, #0
 801c86c:	6078      	str	r0, [r7, #4]
 801c86e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c870:	683b      	ldr	r3, [r7, #0]
 801c872:	885b      	ldrh	r3, [r3, #2]
 801c874:	2b01      	cmp	r3, #1
 801c876:	d108      	bne.n	801c88a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801c878:	687a      	ldr	r2, [r7, #4]
 801c87a:	23a9      	movs	r3, #169	@ 0xa9
 801c87c:	009b      	lsls	r3, r3, #2
 801c87e:	2101      	movs	r1, #1
 801c880:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801c882:	687b      	ldr	r3, [r7, #4]
 801c884:	0018      	movs	r0, r3
 801c886:	f000 f94a 	bl	801cb1e <USBD_CtlSendStatus>
  }
}
 801c88a:	46c0      	nop			@ (mov r8, r8)
 801c88c:	46bd      	mov	sp, r7
 801c88e:	b002      	add	sp, #8
 801c890:	bd80      	pop	{r7, pc}

0801c892 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801c892:	b580      	push	{r7, lr}
 801c894:	b082      	sub	sp, #8
 801c896:	af00      	add	r7, sp, #0
 801c898:	6078      	str	r0, [r7, #4]
 801c89a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801c89c:	687a      	ldr	r2, [r7, #4]
 801c89e:	23a7      	movs	r3, #167	@ 0xa7
 801c8a0:	009b      	lsls	r3, r3, #2
 801c8a2:	5cd3      	ldrb	r3, [r2, r3]
 801c8a4:	3b01      	subs	r3, #1
 801c8a6:	2b02      	cmp	r3, #2
 801c8a8:	d80d      	bhi.n	801c8c6 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801c8aa:	683b      	ldr	r3, [r7, #0]
 801c8ac:	885b      	ldrh	r3, [r3, #2]
 801c8ae:	2b01      	cmp	r3, #1
 801c8b0:	d110      	bne.n	801c8d4 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801c8b2:	687a      	ldr	r2, [r7, #4]
 801c8b4:	23a9      	movs	r3, #169	@ 0xa9
 801c8b6:	009b      	lsls	r3, r3, #2
 801c8b8:	2100      	movs	r1, #0
 801c8ba:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801c8bc:	687b      	ldr	r3, [r7, #4]
 801c8be:	0018      	movs	r0, r3
 801c8c0:	f000 f92d 	bl	801cb1e <USBD_CtlSendStatus>
      }
      break;
 801c8c4:	e006      	b.n	801c8d4 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801c8c6:	683a      	ldr	r2, [r7, #0]
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	0011      	movs	r1, r2
 801c8cc:	0018      	movs	r0, r3
 801c8ce:	f000 f83e 	bl	801c94e <USBD_CtlError>
      break;
 801c8d2:	e000      	b.n	801c8d6 <USBD_ClrFeature+0x44>
      break;
 801c8d4:	46c0      	nop			@ (mov r8, r8)
  }
}
 801c8d6:	46c0      	nop			@ (mov r8, r8)
 801c8d8:	46bd      	mov	sp, r7
 801c8da:	b002      	add	sp, #8
 801c8dc:	bd80      	pop	{r7, pc}

0801c8de <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801c8de:	b580      	push	{r7, lr}
 801c8e0:	b082      	sub	sp, #8
 801c8e2:	af00      	add	r7, sp, #0
 801c8e4:	6078      	str	r0, [r7, #4]
 801c8e6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801c8e8:	683b      	ldr	r3, [r7, #0]
 801c8ea:	781a      	ldrb	r2, [r3, #0]
 801c8ec:	687b      	ldr	r3, [r7, #4]
 801c8ee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801c8f0:	683b      	ldr	r3, [r7, #0]
 801c8f2:	785a      	ldrb	r2, [r3, #1]
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801c8f8:	683b      	ldr	r3, [r7, #0]
 801c8fa:	3302      	adds	r3, #2
 801c8fc:	781b      	ldrb	r3, [r3, #0]
 801c8fe:	001a      	movs	r2, r3
 801c900:	683b      	ldr	r3, [r7, #0]
 801c902:	3303      	adds	r3, #3
 801c904:	781b      	ldrb	r3, [r3, #0]
 801c906:	021b      	lsls	r3, r3, #8
 801c908:	b29b      	uxth	r3, r3
 801c90a:	18d3      	adds	r3, r2, r3
 801c90c:	b29a      	uxth	r2, r3
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801c912:	683b      	ldr	r3, [r7, #0]
 801c914:	3304      	adds	r3, #4
 801c916:	781b      	ldrb	r3, [r3, #0]
 801c918:	001a      	movs	r2, r3
 801c91a:	683b      	ldr	r3, [r7, #0]
 801c91c:	3305      	adds	r3, #5
 801c91e:	781b      	ldrb	r3, [r3, #0]
 801c920:	021b      	lsls	r3, r3, #8
 801c922:	b29b      	uxth	r3, r3
 801c924:	18d3      	adds	r3, r2, r3
 801c926:	b29a      	uxth	r2, r3
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801c92c:	683b      	ldr	r3, [r7, #0]
 801c92e:	3306      	adds	r3, #6
 801c930:	781b      	ldrb	r3, [r3, #0]
 801c932:	001a      	movs	r2, r3
 801c934:	683b      	ldr	r3, [r7, #0]
 801c936:	3307      	adds	r3, #7
 801c938:	781b      	ldrb	r3, [r3, #0]
 801c93a:	021b      	lsls	r3, r3, #8
 801c93c:	b29b      	uxth	r3, r3
 801c93e:	18d3      	adds	r3, r2, r3
 801c940:	b29a      	uxth	r2, r3
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	80da      	strh	r2, [r3, #6]

}
 801c946:	46c0      	nop			@ (mov r8, r8)
 801c948:	46bd      	mov	sp, r7
 801c94a:	b002      	add	sp, #8
 801c94c:	bd80      	pop	{r7, pc}

0801c94e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801c94e:	b580      	push	{r7, lr}
 801c950:	b082      	sub	sp, #8
 801c952:	af00      	add	r7, sp, #0
 801c954:	6078      	str	r0, [r7, #4]
 801c956:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	2180      	movs	r1, #128	@ 0x80
 801c95c:	0018      	movs	r0, r3
 801c95e:	f000 fd1e 	bl	801d39e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	2100      	movs	r1, #0
 801c966:	0018      	movs	r0, r3
 801c968:	f000 fd19 	bl	801d39e <USBD_LL_StallEP>
}
 801c96c:	46c0      	nop			@ (mov r8, r8)
 801c96e:	46bd      	mov	sp, r7
 801c970:	b002      	add	sp, #8
 801c972:	bd80      	pop	{r7, pc}

0801c974 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801c974:	b590      	push	{r4, r7, lr}
 801c976:	b087      	sub	sp, #28
 801c978:	af00      	add	r7, sp, #0
 801c97a:	60f8      	str	r0, [r7, #12]
 801c97c:	60b9      	str	r1, [r7, #8]
 801c97e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801c980:	2417      	movs	r4, #23
 801c982:	193b      	adds	r3, r7, r4
 801c984:	2200      	movs	r2, #0
 801c986:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801c988:	68fb      	ldr	r3, [r7, #12]
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d03c      	beq.n	801ca08 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801c98e:	68fb      	ldr	r3, [r7, #12]
 801c990:	0018      	movs	r0, r3
 801c992:	f000 f83d 	bl	801ca10 <USBD_GetLen>
 801c996:	0003      	movs	r3, r0
 801c998:	3301      	adds	r3, #1
 801c99a:	b29b      	uxth	r3, r3
 801c99c:	18db      	adds	r3, r3, r3
 801c99e:	b29a      	uxth	r2, r3
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801c9a4:	193b      	adds	r3, r7, r4
 801c9a6:	781b      	ldrb	r3, [r3, #0]
 801c9a8:	193a      	adds	r2, r7, r4
 801c9aa:	1c59      	adds	r1, r3, #1
 801c9ac:	7011      	strb	r1, [r2, #0]
 801c9ae:	001a      	movs	r2, r3
 801c9b0:	68bb      	ldr	r3, [r7, #8]
 801c9b2:	189b      	adds	r3, r3, r2
 801c9b4:	687a      	ldr	r2, [r7, #4]
 801c9b6:	7812      	ldrb	r2, [r2, #0]
 801c9b8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801c9ba:	193b      	adds	r3, r7, r4
 801c9bc:	781b      	ldrb	r3, [r3, #0]
 801c9be:	193a      	adds	r2, r7, r4
 801c9c0:	1c59      	adds	r1, r3, #1
 801c9c2:	7011      	strb	r1, [r2, #0]
 801c9c4:	001a      	movs	r2, r3
 801c9c6:	68bb      	ldr	r3, [r7, #8]
 801c9c8:	189b      	adds	r3, r3, r2
 801c9ca:	2203      	movs	r2, #3
 801c9cc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801c9ce:	e017      	b.n	801ca00 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801c9d0:	68fb      	ldr	r3, [r7, #12]
 801c9d2:	1c5a      	adds	r2, r3, #1
 801c9d4:	60fa      	str	r2, [r7, #12]
 801c9d6:	2417      	movs	r4, #23
 801c9d8:	193a      	adds	r2, r7, r4
 801c9da:	7812      	ldrb	r2, [r2, #0]
 801c9dc:	1939      	adds	r1, r7, r4
 801c9de:	1c50      	adds	r0, r2, #1
 801c9e0:	7008      	strb	r0, [r1, #0]
 801c9e2:	0011      	movs	r1, r2
 801c9e4:	68ba      	ldr	r2, [r7, #8]
 801c9e6:	1852      	adds	r2, r2, r1
 801c9e8:	781b      	ldrb	r3, [r3, #0]
 801c9ea:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801c9ec:	193b      	adds	r3, r7, r4
 801c9ee:	781b      	ldrb	r3, [r3, #0]
 801c9f0:	193a      	adds	r2, r7, r4
 801c9f2:	1c59      	adds	r1, r3, #1
 801c9f4:	7011      	strb	r1, [r2, #0]
 801c9f6:	001a      	movs	r2, r3
 801c9f8:	68bb      	ldr	r3, [r7, #8]
 801c9fa:	189b      	adds	r3, r3, r2
 801c9fc:	2200      	movs	r2, #0
 801c9fe:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801ca00:	68fb      	ldr	r3, [r7, #12]
 801ca02:	781b      	ldrb	r3, [r3, #0]
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	d1e3      	bne.n	801c9d0 <USBD_GetString+0x5c>
    }
  }
}
 801ca08:	46c0      	nop			@ (mov r8, r8)
 801ca0a:	46bd      	mov	sp, r7
 801ca0c:	b007      	add	sp, #28
 801ca0e:	bd90      	pop	{r4, r7, pc}

0801ca10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801ca10:	b580      	push	{r7, lr}
 801ca12:	b084      	sub	sp, #16
 801ca14:	af00      	add	r7, sp, #0
 801ca16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801ca18:	230f      	movs	r3, #15
 801ca1a:	18fb      	adds	r3, r7, r3
 801ca1c:	2200      	movs	r2, #0
 801ca1e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801ca20:	e008      	b.n	801ca34 <USBD_GetLen+0x24>
  {
    len++;
 801ca22:	210f      	movs	r1, #15
 801ca24:	187b      	adds	r3, r7, r1
 801ca26:	781a      	ldrb	r2, [r3, #0]
 801ca28:	187b      	adds	r3, r7, r1
 801ca2a:	3201      	adds	r2, #1
 801ca2c:	701a      	strb	r2, [r3, #0]
    buf++;
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	3301      	adds	r3, #1
 801ca32:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801ca34:	687b      	ldr	r3, [r7, #4]
 801ca36:	781b      	ldrb	r3, [r3, #0]
 801ca38:	2b00      	cmp	r3, #0
 801ca3a:	d1f2      	bne.n	801ca22 <USBD_GetLen+0x12>
  }

  return len;
 801ca3c:	230f      	movs	r3, #15
 801ca3e:	18fb      	adds	r3, r7, r3
 801ca40:	781b      	ldrb	r3, [r3, #0]
}
 801ca42:	0018      	movs	r0, r3
 801ca44:	46bd      	mov	sp, r7
 801ca46:	b004      	add	sp, #16
 801ca48:	bd80      	pop	{r7, pc}

0801ca4a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801ca4a:	b580      	push	{r7, lr}
 801ca4c:	b084      	sub	sp, #16
 801ca4e:	af00      	add	r7, sp, #0
 801ca50:	60f8      	str	r0, [r7, #12]
 801ca52:	60b9      	str	r1, [r7, #8]
 801ca54:	1dbb      	adds	r3, r7, #6
 801ca56:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801ca58:	68fa      	ldr	r2, [r7, #12]
 801ca5a:	23a5      	movs	r3, #165	@ 0xa5
 801ca5c:	009b      	lsls	r3, r3, #2
 801ca5e:	2102      	movs	r1, #2
 801ca60:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801ca62:	1dbb      	adds	r3, r7, #6
 801ca64:	881a      	ldrh	r2, [r3, #0]
 801ca66:	68fb      	ldr	r3, [r7, #12]
 801ca68:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801ca6a:	1dbb      	adds	r3, r7, #6
 801ca6c:	881a      	ldrh	r2, [r3, #0]
 801ca6e:	68fb      	ldr	r3, [r7, #12]
 801ca70:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801ca72:	1dbb      	adds	r3, r7, #6
 801ca74:	881b      	ldrh	r3, [r3, #0]
 801ca76:	68ba      	ldr	r2, [r7, #8]
 801ca78:	68f8      	ldr	r0, [r7, #12]
 801ca7a:	2100      	movs	r1, #0
 801ca7c:	f000 fd41 	bl	801d502 <USBD_LL_Transmit>

  return USBD_OK;
 801ca80:	2300      	movs	r3, #0
}
 801ca82:	0018      	movs	r0, r3
 801ca84:	46bd      	mov	sp, r7
 801ca86:	b004      	add	sp, #16
 801ca88:	bd80      	pop	{r7, pc}

0801ca8a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801ca8a:	b580      	push	{r7, lr}
 801ca8c:	b084      	sub	sp, #16
 801ca8e:	af00      	add	r7, sp, #0
 801ca90:	60f8      	str	r0, [r7, #12]
 801ca92:	60b9      	str	r1, [r7, #8]
 801ca94:	1dbb      	adds	r3, r7, #6
 801ca96:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801ca98:	1dbb      	adds	r3, r7, #6
 801ca9a:	881b      	ldrh	r3, [r3, #0]
 801ca9c:	68ba      	ldr	r2, [r7, #8]
 801ca9e:	68f8      	ldr	r0, [r7, #12]
 801caa0:	2100      	movs	r1, #0
 801caa2:	f000 fd2e 	bl	801d502 <USBD_LL_Transmit>

  return USBD_OK;
 801caa6:	2300      	movs	r3, #0
}
 801caa8:	0018      	movs	r0, r3
 801caaa:	46bd      	mov	sp, r7
 801caac:	b004      	add	sp, #16
 801caae:	bd80      	pop	{r7, pc}

0801cab0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801cab0:	b580      	push	{r7, lr}
 801cab2:	b084      	sub	sp, #16
 801cab4:	af00      	add	r7, sp, #0
 801cab6:	60f8      	str	r0, [r7, #12]
 801cab8:	60b9      	str	r1, [r7, #8]
 801caba:	1dbb      	adds	r3, r7, #6
 801cabc:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801cabe:	68fa      	ldr	r2, [r7, #12]
 801cac0:	23a5      	movs	r3, #165	@ 0xa5
 801cac2:	009b      	lsls	r3, r3, #2
 801cac4:	2103      	movs	r1, #3
 801cac6:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801cac8:	1dbb      	adds	r3, r7, #6
 801caca:	8819      	ldrh	r1, [r3, #0]
 801cacc:	68fa      	ldr	r2, [r7, #12]
 801cace:	23ae      	movs	r3, #174	@ 0xae
 801cad0:	005b      	lsls	r3, r3, #1
 801cad2:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801cad4:	1dbb      	adds	r3, r7, #6
 801cad6:	8819      	ldrh	r1, [r3, #0]
 801cad8:	68fa      	ldr	r2, [r7, #12]
 801cada:	23b0      	movs	r3, #176	@ 0xb0
 801cadc:	005b      	lsls	r3, r3, #1
 801cade:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801cae0:	1dbb      	adds	r3, r7, #6
 801cae2:	881b      	ldrh	r3, [r3, #0]
 801cae4:	68ba      	ldr	r2, [r7, #8]
 801cae6:	68f8      	ldr	r0, [r7, #12]
 801cae8:	2100      	movs	r1, #0
 801caea:	f000 fd41 	bl	801d570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801caee:	2300      	movs	r3, #0
}
 801caf0:	0018      	movs	r0, r3
 801caf2:	46bd      	mov	sp, r7
 801caf4:	b004      	add	sp, #16
 801caf6:	bd80      	pop	{r7, pc}

0801caf8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801caf8:	b580      	push	{r7, lr}
 801cafa:	b084      	sub	sp, #16
 801cafc:	af00      	add	r7, sp, #0
 801cafe:	60f8      	str	r0, [r7, #12]
 801cb00:	60b9      	str	r1, [r7, #8]
 801cb02:	1dbb      	adds	r3, r7, #6
 801cb04:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801cb06:	1dbb      	adds	r3, r7, #6
 801cb08:	881b      	ldrh	r3, [r3, #0]
 801cb0a:	68ba      	ldr	r2, [r7, #8]
 801cb0c:	68f8      	ldr	r0, [r7, #12]
 801cb0e:	2100      	movs	r1, #0
 801cb10:	f000 fd2e 	bl	801d570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cb14:	2300      	movs	r3, #0
}
 801cb16:	0018      	movs	r0, r3
 801cb18:	46bd      	mov	sp, r7
 801cb1a:	b004      	add	sp, #16
 801cb1c:	bd80      	pop	{r7, pc}

0801cb1e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801cb1e:	b580      	push	{r7, lr}
 801cb20:	b082      	sub	sp, #8
 801cb22:	af00      	add	r7, sp, #0
 801cb24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801cb26:	687a      	ldr	r2, [r7, #4]
 801cb28:	23a5      	movs	r3, #165	@ 0xa5
 801cb2a:	009b      	lsls	r3, r3, #2
 801cb2c:	2104      	movs	r1, #4
 801cb2e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801cb30:	6878      	ldr	r0, [r7, #4]
 801cb32:	2300      	movs	r3, #0
 801cb34:	2200      	movs	r2, #0
 801cb36:	2100      	movs	r1, #0
 801cb38:	f000 fce3 	bl	801d502 <USBD_LL_Transmit>

  return USBD_OK;
 801cb3c:	2300      	movs	r3, #0
}
 801cb3e:	0018      	movs	r0, r3
 801cb40:	46bd      	mov	sp, r7
 801cb42:	b002      	add	sp, #8
 801cb44:	bd80      	pop	{r7, pc}

0801cb46 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801cb46:	b580      	push	{r7, lr}
 801cb48:	b082      	sub	sp, #8
 801cb4a:	af00      	add	r7, sp, #0
 801cb4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801cb4e:	687a      	ldr	r2, [r7, #4]
 801cb50:	23a5      	movs	r3, #165	@ 0xa5
 801cb52:	009b      	lsls	r3, r3, #2
 801cb54:	2105      	movs	r1, #5
 801cb56:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801cb58:	6878      	ldr	r0, [r7, #4]
 801cb5a:	2300      	movs	r3, #0
 801cb5c:	2200      	movs	r2, #0
 801cb5e:	2100      	movs	r1, #0
 801cb60:	f000 fd06 	bl	801d570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801cb64:	2300      	movs	r3, #0
}
 801cb66:	0018      	movs	r0, r3
 801cb68:	46bd      	mov	sp, r7
 801cb6a:	b002      	add	sp, #8
 801cb6c:	bd80      	pop	{r7, pc}
	...

0801cb70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801cb70:	b580      	push	{r7, lr}
 801cb72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801cb74:	4914      	ldr	r1, [pc, #80]	@ (801cbc8 <MX_USB_DEVICE_Init+0x58>)
 801cb76:	4b15      	ldr	r3, [pc, #84]	@ (801cbcc <MX_USB_DEVICE_Init+0x5c>)
 801cb78:	2200      	movs	r2, #0
 801cb7a:	0018      	movs	r0, r3
 801cb7c:	f7fe fdec 	bl	801b758 <USBD_Init>
 801cb80:	1e03      	subs	r3, r0, #0
 801cb82:	d001      	beq.n	801cb88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801cb84:	f7eb fb94 	bl	80082b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801cb88:	4a11      	ldr	r2, [pc, #68]	@ (801cbd0 <MX_USB_DEVICE_Init+0x60>)
 801cb8a:	4b10      	ldr	r3, [pc, #64]	@ (801cbcc <MX_USB_DEVICE_Init+0x5c>)
 801cb8c:	0011      	movs	r1, r2
 801cb8e:	0018      	movs	r0, r3
 801cb90:	f7fe fe13 	bl	801b7ba <USBD_RegisterClass>
 801cb94:	1e03      	subs	r3, r0, #0
 801cb96:	d001      	beq.n	801cb9c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801cb98:	f7eb fb8a 	bl	80082b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801cb9c:	4a0d      	ldr	r2, [pc, #52]	@ (801cbd4 <MX_USB_DEVICE_Init+0x64>)
 801cb9e:	4b0b      	ldr	r3, [pc, #44]	@ (801cbcc <MX_USB_DEVICE_Init+0x5c>)
 801cba0:	0011      	movs	r1, r2
 801cba2:	0018      	movs	r0, r3
 801cba4:	f7fe fd28 	bl	801b5f8 <USBD_CDC_RegisterInterface>
 801cba8:	1e03      	subs	r3, r0, #0
 801cbaa:	d001      	beq.n	801cbb0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801cbac:	f7eb fb80 	bl	80082b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801cbb0:	4b06      	ldr	r3, [pc, #24]	@ (801cbcc <MX_USB_DEVICE_Init+0x5c>)
 801cbb2:	0018      	movs	r0, r3
 801cbb4:	f7fe fe21 	bl	801b7fa <USBD_Start>
 801cbb8:	1e03      	subs	r3, r0, #0
 801cbba:	d001      	beq.n	801cbc0 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801cbbc:	f7eb fb78 	bl	80082b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801cbc0:	46c0      	nop			@ (mov r8, r8)
 801cbc2:	46bd      	mov	sp, r7
 801cbc4:	bd80      	pop	{r7, pc}
 801cbc6:	46c0      	nop			@ (mov r8, r8)
 801cbc8:	20000204 	.word	0x20000204
 801cbcc:	200025c8 	.word	0x200025c8
 801cbd0:	200000f0 	.word	0x200000f0
 801cbd4:	200001f4 	.word	0x200001f4

0801cbd8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801cbd8:	b580      	push	{r7, lr}
 801cbda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801cbdc:	4907      	ldr	r1, [pc, #28]	@ (801cbfc <CDC_Init_FS+0x24>)
 801cbde:	4b08      	ldr	r3, [pc, #32]	@ (801cc00 <CDC_Init_FS+0x28>)
 801cbe0:	2200      	movs	r2, #0
 801cbe2:	0018      	movs	r0, r3
 801cbe4:	f7fe fd23 	bl	801b62e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801cbe8:	4a06      	ldr	r2, [pc, #24]	@ (801cc04 <CDC_Init_FS+0x2c>)
 801cbea:	4b05      	ldr	r3, [pc, #20]	@ (801cc00 <CDC_Init_FS+0x28>)
 801cbec:	0011      	movs	r1, r2
 801cbee:	0018      	movs	r0, r3
 801cbf0:	f7fe fd39 	bl	801b666 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801cbf4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801cbf6:	0018      	movs	r0, r3
 801cbf8:	46bd      	mov	sp, r7
 801cbfa:	bd80      	pop	{r7, pc}
 801cbfc:	20002d4c 	.word	0x20002d4c
 801cc00:	200025c8 	.word	0x200025c8
 801cc04:	2000294c 	.word	0x2000294c

0801cc08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801cc08:	b580      	push	{r7, lr}
 801cc0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801cc0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801cc0e:	0018      	movs	r0, r3
 801cc10:	46bd      	mov	sp, r7
 801cc12:	bd80      	pop	{r7, pc}

0801cc14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801cc14:	b580      	push	{r7, lr}
 801cc16:	b082      	sub	sp, #8
 801cc18:	af00      	add	r7, sp, #0
 801cc1a:	6039      	str	r1, [r7, #0]
 801cc1c:	0011      	movs	r1, r2
 801cc1e:	1dfb      	adds	r3, r7, #7
 801cc20:	1c02      	adds	r2, r0, #0
 801cc22:	701a      	strb	r2, [r3, #0]
 801cc24:	1d3b      	adds	r3, r7, #4
 801cc26:	1c0a      	adds	r2, r1, #0
 801cc28:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801cc2a:	1dfb      	adds	r3, r7, #7
 801cc2c:	781b      	ldrb	r3, [r3, #0]
 801cc2e:	2b23      	cmp	r3, #35	@ 0x23
 801cc30:	d804      	bhi.n	801cc3c <CDC_Control_FS+0x28>
 801cc32:	009a      	lsls	r2, r3, #2
 801cc34:	4b04      	ldr	r3, [pc, #16]	@ (801cc48 <CDC_Control_FS+0x34>)
 801cc36:	18d3      	adds	r3, r2, r3
 801cc38:	681b      	ldr	r3, [r3, #0]
 801cc3a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801cc3c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801cc3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801cc40:	0018      	movs	r0, r3
 801cc42:	46bd      	mov	sp, r7
 801cc44:	b002      	add	sp, #8
 801cc46:	bd80      	pop	{r7, pc}
 801cc48:	08025688 	.word	0x08025688

0801cc4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801cc4c:	b580      	push	{r7, lr}
 801cc4e:	b082      	sub	sp, #8
 801cc50:	af00      	add	r7, sp, #0
 801cc52:	6078      	str	r0, [r7, #4]
 801cc54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801cc56:	4b12      	ldr	r3, [pc, #72]	@ (801cca0 <CDC_Receive_FS+0x54>)
 801cc58:	781b      	ldrb	r3, [r3, #0]
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	d013      	beq.n	801cc86 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801cc5e:	683b      	ldr	r3, [r7, #0]
 801cc60:	681b      	ldr	r3, [r3, #0]
 801cc62:	b29a      	uxth	r2, r3
 801cc64:	2301      	movs	r3, #1
 801cc66:	425b      	negs	r3, r3
 801cc68:	6879      	ldr	r1, [r7, #4]
 801cc6a:	480e      	ldr	r0, [pc, #56]	@ (801cca4 <CDC_Receive_FS+0x58>)
 801cc6c:	f7fa fa46 	bl	80170fc <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801cc70:	687a      	ldr	r2, [r7, #4]
 801cc72:	4b0d      	ldr	r3, [pc, #52]	@ (801cca8 <CDC_Receive_FS+0x5c>)
 801cc74:	0011      	movs	r1, r2
 801cc76:	0018      	movs	r0, r3
 801cc78:	f7fe fcf5 	bl	801b666 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cc7c:	4b0a      	ldr	r3, [pc, #40]	@ (801cca8 <CDC_Receive_FS+0x5c>)
 801cc7e:	0018      	movs	r0, r3
 801cc80:	f7fe fd3c 	bl	801b6fc <USBD_CDC_ReceivePacket>
 801cc84:	e006      	b.n	801cc94 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801cc86:	683b      	ldr	r3, [r7, #0]
 801cc88:	681a      	ldr	r2, [r3, #0]
 801cc8a:	4b08      	ldr	r3, [pc, #32]	@ (801ccac <CDC_Receive_FS+0x60>)
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	18d2      	adds	r2, r2, r3
 801cc90:	4b06      	ldr	r3, [pc, #24]	@ (801ccac <CDC_Receive_FS+0x60>)
 801cc92:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801cc94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801cc96:	0018      	movs	r0, r3
 801cc98:	46bd      	mov	sp, r7
 801cc9a:	b002      	add	sp, #8
 801cc9c:	bd80      	pop	{r7, pc}
 801cc9e:	46c0      	nop			@ (mov r8, r8)
 801cca0:	2000288c 	.word	0x2000288c
 801cca4:	20002890 	.word	0x20002890
 801cca8:	200025c8 	.word	0x200025c8
 801ccac:	20002948 	.word	0x20002948

0801ccb0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801ccb0:	b5b0      	push	{r4, r5, r7, lr}
 801ccb2:	b084      	sub	sp, #16
 801ccb4:	af00      	add	r7, sp, #0
 801ccb6:	6078      	str	r0, [r7, #4]
 801ccb8:	000a      	movs	r2, r1
 801ccba:	1cbb      	adds	r3, r7, #2
 801ccbc:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801ccbe:	230f      	movs	r3, #15
 801ccc0:	18fb      	adds	r3, r7, r3
 801ccc2:	2200      	movs	r2, #0
 801ccc4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801ccc6:	4a11      	ldr	r2, [pc, #68]	@ (801cd0c <CDC_Transmit_FS+0x5c>)
 801ccc8:	23ae      	movs	r3, #174	@ 0xae
 801ccca:	009b      	lsls	r3, r3, #2
 801cccc:	58d3      	ldr	r3, [r2, r3]
 801ccce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801ccd0:	68ba      	ldr	r2, [r7, #8]
 801ccd2:	2385      	movs	r3, #133	@ 0x85
 801ccd4:	009b      	lsls	r3, r3, #2
 801ccd6:	58d3      	ldr	r3, [r2, r3]
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	d001      	beq.n	801cce0 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801ccdc:	2301      	movs	r3, #1
 801ccde:	e010      	b.n	801cd02 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801cce0:	1cbb      	adds	r3, r7, #2
 801cce2:	881a      	ldrh	r2, [r3, #0]
 801cce4:	6879      	ldr	r1, [r7, #4]
 801cce6:	4b09      	ldr	r3, [pc, #36]	@ (801cd0c <CDC_Transmit_FS+0x5c>)
 801cce8:	0018      	movs	r0, r3
 801ccea:	f7fe fca0 	bl	801b62e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801ccee:	250f      	movs	r5, #15
 801ccf0:	197c      	adds	r4, r7, r5
 801ccf2:	4b06      	ldr	r3, [pc, #24]	@ (801cd0c <CDC_Transmit_FS+0x5c>)
 801ccf4:	0018      	movs	r0, r3
 801ccf6:	f7fe fcca 	bl	801b68e <USBD_CDC_TransmitPacket>
 801ccfa:	0003      	movs	r3, r0
 801ccfc:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801ccfe:	197b      	adds	r3, r7, r5
 801cd00:	781b      	ldrb	r3, [r3, #0]
}
 801cd02:	0018      	movs	r0, r3
 801cd04:	46bd      	mov	sp, r7
 801cd06:	b004      	add	sp, #16
 801cd08:	bdb0      	pop	{r4, r5, r7, pc}
 801cd0a:	46c0      	nop			@ (mov r8, r8)
 801cd0c:	200025c8 	.word	0x200025c8

0801cd10 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801cd10:	b580      	push	{r7, lr}
 801cd12:	af00      	add	r7, sp, #0
  ESPProg = true;
 801cd14:	4b02      	ldr	r3, [pc, #8]	@ (801cd20 <EnableESPProg+0x10>)
 801cd16:	2201      	movs	r2, #1
 801cd18:	701a      	strb	r2, [r3, #0]
}
 801cd1a:	46c0      	nop			@ (mov r8, r8)
 801cd1c:	46bd      	mov	sp, r7
 801cd1e:	bd80      	pop	{r7, pc}
 801cd20:	2000288c 	.word	0x2000288c

0801cd24 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801cd24:	b580      	push	{r7, lr}
 801cd26:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801cd28:	4b01      	ldr	r3, [pc, #4]	@ (801cd30 <GetUsbRxPointer+0xc>)
}
 801cd2a:	0018      	movs	r0, r3
 801cd2c:	46bd      	mov	sp, r7
 801cd2e:	bd80      	pop	{r7, pc}
 801cd30:	2000294c 	.word	0x2000294c

0801cd34 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801cd34:	b580      	push	{r7, lr}
 801cd36:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801cd38:	4b07      	ldr	r3, [pc, #28]	@ (801cd58 <ResetUsbRxDataSize+0x24>)
 801cd3a:	2200      	movs	r2, #0
 801cd3c:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801cd3e:	4a07      	ldr	r2, [pc, #28]	@ (801cd5c <ResetUsbRxDataSize+0x28>)
 801cd40:	4b07      	ldr	r3, [pc, #28]	@ (801cd60 <ResetUsbRxDataSize+0x2c>)
 801cd42:	0011      	movs	r1, r2
 801cd44:	0018      	movs	r0, r3
 801cd46:	f7fe fc8e 	bl	801b666 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cd4a:	4b05      	ldr	r3, [pc, #20]	@ (801cd60 <ResetUsbRxDataSize+0x2c>)
 801cd4c:	0018      	movs	r0, r3
 801cd4e:	f7fe fcd5 	bl	801b6fc <USBD_CDC_ReceivePacket>
}
 801cd52:	46c0      	nop			@ (mov r8, r8)
 801cd54:	46bd      	mov	sp, r7
 801cd56:	bd80      	pop	{r7, pc}
 801cd58:	20002948 	.word	0x20002948
 801cd5c:	2000294c 	.word	0x2000294c
 801cd60:	200025c8 	.word	0x200025c8

0801cd64 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801cd64:	b580      	push	{r7, lr}
 801cd66:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801cd68:	4b02      	ldr	r3, [pc, #8]	@ (801cd74 <GetUsbRxDataSize+0x10>)
 801cd6a:	681b      	ldr	r3, [r3, #0]
}
 801cd6c:	0018      	movs	r0, r3
 801cd6e:	46bd      	mov	sp, r7
 801cd70:	bd80      	pop	{r7, pc}
 801cd72:	46c0      	nop			@ (mov r8, r8)
 801cd74:	20002948 	.word	0x20002948

0801cd78 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801cd78:	b580      	push	{r7, lr}
 801cd7a:	b082      	sub	sp, #8
 801cd7c:	af00      	add	r7, sp, #0
 801cd7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801cd80:	687a      	ldr	r2, [r7, #4]
 801cd82:	4b07      	ldr	r3, [pc, #28]	@ (801cda0 <GetUsbRxNextChunk+0x28>)
 801cd84:	18d2      	adds	r2, r2, r3
 801cd86:	4b07      	ldr	r3, [pc, #28]	@ (801cda4 <GetUsbRxNextChunk+0x2c>)
 801cd88:	0011      	movs	r1, r2
 801cd8a:	0018      	movs	r0, r3
 801cd8c:	f7fe fc6b 	bl	801b666 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801cd90:	4b04      	ldr	r3, [pc, #16]	@ (801cda4 <GetUsbRxNextChunk+0x2c>)
 801cd92:	0018      	movs	r0, r3
 801cd94:	f7fe fcb2 	bl	801b6fc <USBD_CDC_ReceivePacket>
}
 801cd98:	46c0      	nop			@ (mov r8, r8)
 801cd9a:	46bd      	mov	sp, r7
 801cd9c:	b002      	add	sp, #8
 801cd9e:	bd80      	pop	{r7, pc}
 801cda0:	2000294c 	.word	0x2000294c
 801cda4:	200025c8 	.word	0x200025c8

0801cda8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cda8:	b580      	push	{r7, lr}
 801cdaa:	b082      	sub	sp, #8
 801cdac:	af00      	add	r7, sp, #0
 801cdae:	0002      	movs	r2, r0
 801cdb0:	6039      	str	r1, [r7, #0]
 801cdb2:	1dfb      	adds	r3, r7, #7
 801cdb4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801cdb6:	683b      	ldr	r3, [r7, #0]
 801cdb8:	2212      	movs	r2, #18
 801cdba:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801cdbc:	4b02      	ldr	r3, [pc, #8]	@ (801cdc8 <USBD_FS_DeviceDescriptor+0x20>)
}
 801cdbe:	0018      	movs	r0, r3
 801cdc0:	46bd      	mov	sp, r7
 801cdc2:	b002      	add	sp, #8
 801cdc4:	bd80      	pop	{r7, pc}
 801cdc6:	46c0      	nop			@ (mov r8, r8)
 801cdc8:	20000220 	.word	0x20000220

0801cdcc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cdcc:	b580      	push	{r7, lr}
 801cdce:	b082      	sub	sp, #8
 801cdd0:	af00      	add	r7, sp, #0
 801cdd2:	0002      	movs	r2, r0
 801cdd4:	6039      	str	r1, [r7, #0]
 801cdd6:	1dfb      	adds	r3, r7, #7
 801cdd8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801cdda:	683b      	ldr	r3, [r7, #0]
 801cddc:	2204      	movs	r2, #4
 801cdde:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801cde0:	4b02      	ldr	r3, [pc, #8]	@ (801cdec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801cde2:	0018      	movs	r0, r3
 801cde4:	46bd      	mov	sp, r7
 801cde6:	b002      	add	sp, #8
 801cde8:	bd80      	pop	{r7, pc}
 801cdea:	46c0      	nop			@ (mov r8, r8)
 801cdec:	20000234 	.word	0x20000234

0801cdf0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cdf0:	b580      	push	{r7, lr}
 801cdf2:	b082      	sub	sp, #8
 801cdf4:	af00      	add	r7, sp, #0
 801cdf6:	0002      	movs	r2, r0
 801cdf8:	6039      	str	r1, [r7, #0]
 801cdfa:	1dfb      	adds	r3, r7, #7
 801cdfc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801cdfe:	1dfb      	adds	r3, r7, #7
 801ce00:	781b      	ldrb	r3, [r3, #0]
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d106      	bne.n	801ce14 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ce06:	683a      	ldr	r2, [r7, #0]
 801ce08:	4908      	ldr	r1, [pc, #32]	@ (801ce2c <USBD_FS_ProductStrDescriptor+0x3c>)
 801ce0a:	4b09      	ldr	r3, [pc, #36]	@ (801ce30 <USBD_FS_ProductStrDescriptor+0x40>)
 801ce0c:	0018      	movs	r0, r3
 801ce0e:	f7ff fdb1 	bl	801c974 <USBD_GetString>
 801ce12:	e005      	b.n	801ce20 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801ce14:	683a      	ldr	r2, [r7, #0]
 801ce16:	4905      	ldr	r1, [pc, #20]	@ (801ce2c <USBD_FS_ProductStrDescriptor+0x3c>)
 801ce18:	4b05      	ldr	r3, [pc, #20]	@ (801ce30 <USBD_FS_ProductStrDescriptor+0x40>)
 801ce1a:	0018      	movs	r0, r3
 801ce1c:	f7ff fdaa 	bl	801c974 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ce20:	4b02      	ldr	r3, [pc, #8]	@ (801ce2c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801ce22:	0018      	movs	r0, r3
 801ce24:	46bd      	mov	sp, r7
 801ce26:	b002      	add	sp, #8
 801ce28:	bd80      	pop	{r7, pc}
 801ce2a:	46c0      	nop			@ (mov r8, r8)
 801ce2c:	2000314c 	.word	0x2000314c
 801ce30:	08025114 	.word	0x08025114

0801ce34 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce34:	b580      	push	{r7, lr}
 801ce36:	b082      	sub	sp, #8
 801ce38:	af00      	add	r7, sp, #0
 801ce3a:	0002      	movs	r2, r0
 801ce3c:	6039      	str	r1, [r7, #0]
 801ce3e:	1dfb      	adds	r3, r7, #7
 801ce40:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801ce42:	683a      	ldr	r2, [r7, #0]
 801ce44:	4904      	ldr	r1, [pc, #16]	@ (801ce58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801ce46:	4b05      	ldr	r3, [pc, #20]	@ (801ce5c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801ce48:	0018      	movs	r0, r3
 801ce4a:	f7ff fd93 	bl	801c974 <USBD_GetString>
  return USBD_StrDesc;
 801ce4e:	4b02      	ldr	r3, [pc, #8]	@ (801ce58 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801ce50:	0018      	movs	r0, r3
 801ce52:	46bd      	mov	sp, r7
 801ce54:	b002      	add	sp, #8
 801ce56:	bd80      	pop	{r7, pc}
 801ce58:	2000314c 	.word	0x2000314c
 801ce5c:	0802512c 	.word	0x0802512c

0801ce60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce60:	b580      	push	{r7, lr}
 801ce62:	b082      	sub	sp, #8
 801ce64:	af00      	add	r7, sp, #0
 801ce66:	0002      	movs	r2, r0
 801ce68:	6039      	str	r1, [r7, #0]
 801ce6a:	1dfb      	adds	r3, r7, #7
 801ce6c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801ce6e:	683b      	ldr	r3, [r7, #0]
 801ce70:	221a      	movs	r2, #26
 801ce72:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801ce74:	f000 f84c 	bl	801cf10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801ce78:	4b02      	ldr	r3, [pc, #8]	@ (801ce84 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801ce7a:	0018      	movs	r0, r3
 801ce7c:	46bd      	mov	sp, r7
 801ce7e:	b002      	add	sp, #8
 801ce80:	bd80      	pop	{r7, pc}
 801ce82:	46c0      	nop			@ (mov r8, r8)
 801ce84:	20000238 	.word	0x20000238

0801ce88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ce88:	b580      	push	{r7, lr}
 801ce8a:	b082      	sub	sp, #8
 801ce8c:	af00      	add	r7, sp, #0
 801ce8e:	0002      	movs	r2, r0
 801ce90:	6039      	str	r1, [r7, #0]
 801ce92:	1dfb      	adds	r3, r7, #7
 801ce94:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801ce96:	1dfb      	adds	r3, r7, #7
 801ce98:	781b      	ldrb	r3, [r3, #0]
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d106      	bne.n	801ceac <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ce9e:	683a      	ldr	r2, [r7, #0]
 801cea0:	4908      	ldr	r1, [pc, #32]	@ (801cec4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801cea2:	4b09      	ldr	r3, [pc, #36]	@ (801cec8 <USBD_FS_ConfigStrDescriptor+0x40>)
 801cea4:	0018      	movs	r0, r3
 801cea6:	f7ff fd65 	bl	801c974 <USBD_GetString>
 801ceaa:	e005      	b.n	801ceb8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801ceac:	683a      	ldr	r2, [r7, #0]
 801ceae:	4905      	ldr	r1, [pc, #20]	@ (801cec4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801ceb0:	4b05      	ldr	r3, [pc, #20]	@ (801cec8 <USBD_FS_ConfigStrDescriptor+0x40>)
 801ceb2:	0018      	movs	r0, r3
 801ceb4:	f7ff fd5e 	bl	801c974 <USBD_GetString>
  }
  return USBD_StrDesc;
 801ceb8:	4b02      	ldr	r3, [pc, #8]	@ (801cec4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801ceba:	0018      	movs	r0, r3
 801cebc:	46bd      	mov	sp, r7
 801cebe:	b002      	add	sp, #8
 801cec0:	bd80      	pop	{r7, pc}
 801cec2:	46c0      	nop			@ (mov r8, r8)
 801cec4:	2000314c 	.word	0x2000314c
 801cec8:	08025140 	.word	0x08025140

0801cecc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801cecc:	b580      	push	{r7, lr}
 801cece:	b082      	sub	sp, #8
 801ced0:	af00      	add	r7, sp, #0
 801ced2:	0002      	movs	r2, r0
 801ced4:	6039      	str	r1, [r7, #0]
 801ced6:	1dfb      	adds	r3, r7, #7
 801ced8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801ceda:	1dfb      	adds	r3, r7, #7
 801cedc:	781b      	ldrb	r3, [r3, #0]
 801cede:	2b00      	cmp	r3, #0
 801cee0:	d106      	bne.n	801cef0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cee2:	683a      	ldr	r2, [r7, #0]
 801cee4:	4908      	ldr	r1, [pc, #32]	@ (801cf08 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801cee6:	4b09      	ldr	r3, [pc, #36]	@ (801cf0c <USBD_FS_InterfaceStrDescriptor+0x40>)
 801cee8:	0018      	movs	r0, r3
 801ceea:	f7ff fd43 	bl	801c974 <USBD_GetString>
 801ceee:	e005      	b.n	801cefc <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801cef0:	683a      	ldr	r2, [r7, #0]
 801cef2:	4905      	ldr	r1, [pc, #20]	@ (801cf08 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801cef4:	4b05      	ldr	r3, [pc, #20]	@ (801cf0c <USBD_FS_InterfaceStrDescriptor+0x40>)
 801cef6:	0018      	movs	r0, r3
 801cef8:	f7ff fd3c 	bl	801c974 <USBD_GetString>
  }
  return USBD_StrDesc;
 801cefc:	4b02      	ldr	r3, [pc, #8]	@ (801cf08 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801cefe:	0018      	movs	r0, r3
 801cf00:	46bd      	mov	sp, r7
 801cf02:	b002      	add	sp, #8
 801cf04:	bd80      	pop	{r7, pc}
 801cf06:	46c0      	nop			@ (mov r8, r8)
 801cf08:	2000314c 	.word	0x2000314c
 801cf0c:	0802514c 	.word	0x0802514c

0801cf10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801cf10:	b580      	push	{r7, lr}
 801cf12:	b084      	sub	sp, #16
 801cf14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801cf16:	4b10      	ldr	r3, [pc, #64]	@ (801cf58 <Get_SerialNum+0x48>)
 801cf18:	681b      	ldr	r3, [r3, #0]
 801cf1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801cf1c:	4b0f      	ldr	r3, [pc, #60]	@ (801cf5c <Get_SerialNum+0x4c>)
 801cf1e:	681b      	ldr	r3, [r3, #0]
 801cf20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801cf22:	4b0f      	ldr	r3, [pc, #60]	@ (801cf60 <Get_SerialNum+0x50>)
 801cf24:	681b      	ldr	r3, [r3, #0]
 801cf26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801cf28:	68fa      	ldr	r2, [r7, #12]
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	18d3      	adds	r3, r2, r3
 801cf2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801cf30:	68fb      	ldr	r3, [r7, #12]
 801cf32:	2b00      	cmp	r3, #0
 801cf34:	d00b      	beq.n	801cf4e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801cf36:	490b      	ldr	r1, [pc, #44]	@ (801cf64 <Get_SerialNum+0x54>)
 801cf38:	68fb      	ldr	r3, [r7, #12]
 801cf3a:	2208      	movs	r2, #8
 801cf3c:	0018      	movs	r0, r3
 801cf3e:	f000 f815 	bl	801cf6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801cf42:	4909      	ldr	r1, [pc, #36]	@ (801cf68 <Get_SerialNum+0x58>)
 801cf44:	68bb      	ldr	r3, [r7, #8]
 801cf46:	2204      	movs	r2, #4
 801cf48:	0018      	movs	r0, r3
 801cf4a:	f000 f80f 	bl	801cf6c <IntToUnicode>
  }
}
 801cf4e:	46c0      	nop			@ (mov r8, r8)
 801cf50:	46bd      	mov	sp, r7
 801cf52:	b004      	add	sp, #16
 801cf54:	bd80      	pop	{r7, pc}
 801cf56:	46c0      	nop			@ (mov r8, r8)
 801cf58:	1ff80050 	.word	0x1ff80050
 801cf5c:	1ff80054 	.word	0x1ff80054
 801cf60:	1ff80058 	.word	0x1ff80058
 801cf64:	2000023a 	.word	0x2000023a
 801cf68:	2000024a 	.word	0x2000024a

0801cf6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801cf6c:	b580      	push	{r7, lr}
 801cf6e:	b086      	sub	sp, #24
 801cf70:	af00      	add	r7, sp, #0
 801cf72:	60f8      	str	r0, [r7, #12]
 801cf74:	60b9      	str	r1, [r7, #8]
 801cf76:	1dfb      	adds	r3, r7, #7
 801cf78:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801cf7a:	2117      	movs	r1, #23
 801cf7c:	187b      	adds	r3, r7, r1
 801cf7e:	2200      	movs	r2, #0
 801cf80:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801cf82:	187b      	adds	r3, r7, r1
 801cf84:	2200      	movs	r2, #0
 801cf86:	701a      	strb	r2, [r3, #0]
 801cf88:	e02f      	b.n	801cfea <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801cf8a:	68fb      	ldr	r3, [r7, #12]
 801cf8c:	0f1b      	lsrs	r3, r3, #28
 801cf8e:	2b09      	cmp	r3, #9
 801cf90:	d80d      	bhi.n	801cfae <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801cf92:	68fb      	ldr	r3, [r7, #12]
 801cf94:	0f1b      	lsrs	r3, r3, #28
 801cf96:	b2da      	uxtb	r2, r3
 801cf98:	2317      	movs	r3, #23
 801cf9a:	18fb      	adds	r3, r7, r3
 801cf9c:	781b      	ldrb	r3, [r3, #0]
 801cf9e:	005b      	lsls	r3, r3, #1
 801cfa0:	0019      	movs	r1, r3
 801cfa2:	68bb      	ldr	r3, [r7, #8]
 801cfa4:	185b      	adds	r3, r3, r1
 801cfa6:	3230      	adds	r2, #48	@ 0x30
 801cfa8:	b2d2      	uxtb	r2, r2
 801cfaa:	701a      	strb	r2, [r3, #0]
 801cfac:	e00c      	b.n	801cfc8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801cfae:	68fb      	ldr	r3, [r7, #12]
 801cfb0:	0f1b      	lsrs	r3, r3, #28
 801cfb2:	b2da      	uxtb	r2, r3
 801cfb4:	2317      	movs	r3, #23
 801cfb6:	18fb      	adds	r3, r7, r3
 801cfb8:	781b      	ldrb	r3, [r3, #0]
 801cfba:	005b      	lsls	r3, r3, #1
 801cfbc:	0019      	movs	r1, r3
 801cfbe:	68bb      	ldr	r3, [r7, #8]
 801cfc0:	185b      	adds	r3, r3, r1
 801cfc2:	3237      	adds	r2, #55	@ 0x37
 801cfc4:	b2d2      	uxtb	r2, r2
 801cfc6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801cfc8:	68fb      	ldr	r3, [r7, #12]
 801cfca:	011b      	lsls	r3, r3, #4
 801cfcc:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801cfce:	2117      	movs	r1, #23
 801cfd0:	187b      	adds	r3, r7, r1
 801cfd2:	781b      	ldrb	r3, [r3, #0]
 801cfd4:	005b      	lsls	r3, r3, #1
 801cfd6:	3301      	adds	r3, #1
 801cfd8:	68ba      	ldr	r2, [r7, #8]
 801cfda:	18d3      	adds	r3, r2, r3
 801cfdc:	2200      	movs	r2, #0
 801cfde:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801cfe0:	187b      	adds	r3, r7, r1
 801cfe2:	781a      	ldrb	r2, [r3, #0]
 801cfe4:	187b      	adds	r3, r7, r1
 801cfe6:	3201      	adds	r2, #1
 801cfe8:	701a      	strb	r2, [r3, #0]
 801cfea:	2317      	movs	r3, #23
 801cfec:	18fa      	adds	r2, r7, r3
 801cfee:	1dfb      	adds	r3, r7, #7
 801cff0:	7812      	ldrb	r2, [r2, #0]
 801cff2:	781b      	ldrb	r3, [r3, #0]
 801cff4:	429a      	cmp	r2, r3
 801cff6:	d3c8      	bcc.n	801cf8a <IntToUnicode+0x1e>
  }
}
 801cff8:	46c0      	nop			@ (mov r8, r8)
 801cffa:	46c0      	nop			@ (mov r8, r8)
 801cffc:	46bd      	mov	sp, r7
 801cffe:	b006      	add	sp, #24
 801d000:	bd80      	pop	{r7, pc}
	...

0801d004 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d004:	b580      	push	{r7, lr}
 801d006:	b082      	sub	sp, #8
 801d008:	af00      	add	r7, sp, #0
 801d00a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	681b      	ldr	r3, [r3, #0]
 801d010:	4a0a      	ldr	r2, [pc, #40]	@ (801d03c <HAL_PCD_MspInit+0x38>)
 801d012:	4293      	cmp	r3, r2
 801d014:	d10e      	bne.n	801d034 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801d016:	4b0a      	ldr	r3, [pc, #40]	@ (801d040 <HAL_PCD_MspInit+0x3c>)
 801d018:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d01a:	4b09      	ldr	r3, [pc, #36]	@ (801d040 <HAL_PCD_MspInit+0x3c>)
 801d01c:	2180      	movs	r1, #128	@ 0x80
 801d01e:	0409      	lsls	r1, r1, #16
 801d020:	430a      	orrs	r2, r1
 801d022:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801d024:	2200      	movs	r2, #0
 801d026:	2100      	movs	r1, #0
 801d028:	201f      	movs	r0, #31
 801d02a:	f7f2 fadf 	bl	800f5ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801d02e:	201f      	movs	r0, #31
 801d030:	f7f2 faf1 	bl	800f616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801d034:	46c0      	nop			@ (mov r8, r8)
 801d036:	46bd      	mov	sp, r7
 801d038:	b002      	add	sp, #8
 801d03a:	bd80      	pop	{r7, pc}
 801d03c:	40005c00 	.word	0x40005c00
 801d040:	40021000 	.word	0x40021000

0801d044 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d044:	b580      	push	{r7, lr}
 801d046:	b082      	sub	sp, #8
 801d048:	af00      	add	r7, sp, #0
 801d04a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801d04c:	687a      	ldr	r2, [r7, #4]
 801d04e:	23bc      	movs	r3, #188	@ 0xbc
 801d050:	009b      	lsls	r3, r3, #2
 801d052:	58d2      	ldr	r2, [r2, r3]
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	21ac      	movs	r1, #172	@ 0xac
 801d058:	0089      	lsls	r1, r1, #2
 801d05a:	468c      	mov	ip, r1
 801d05c:	4463      	add	r3, ip
 801d05e:	0019      	movs	r1, r3
 801d060:	0010      	movs	r0, r2
 801d062:	f7fe fc1d 	bl	801b8a0 <USBD_LL_SetupStage>
}
 801d066:	46c0      	nop			@ (mov r8, r8)
 801d068:	46bd      	mov	sp, r7
 801d06a:	b002      	add	sp, #8
 801d06c:	bd80      	pop	{r7, pc}

0801d06e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d06e:	b590      	push	{r4, r7, lr}
 801d070:	b083      	sub	sp, #12
 801d072:	af00      	add	r7, sp, #0
 801d074:	6078      	str	r0, [r7, #4]
 801d076:	000a      	movs	r2, r1
 801d078:	1cfb      	adds	r3, r7, #3
 801d07a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801d07c:	687a      	ldr	r2, [r7, #4]
 801d07e:	23bc      	movs	r3, #188	@ 0xbc
 801d080:	009b      	lsls	r3, r3, #2
 801d082:	58d4      	ldr	r4, [r2, r3]
 801d084:	1cfb      	adds	r3, r7, #3
 801d086:	781a      	ldrb	r2, [r3, #0]
 801d088:	6878      	ldr	r0, [r7, #4]
 801d08a:	23be      	movs	r3, #190	@ 0xbe
 801d08c:	0059      	lsls	r1, r3, #1
 801d08e:	0013      	movs	r3, r2
 801d090:	009b      	lsls	r3, r3, #2
 801d092:	189b      	adds	r3, r3, r2
 801d094:	00db      	lsls	r3, r3, #3
 801d096:	18c3      	adds	r3, r0, r3
 801d098:	185b      	adds	r3, r3, r1
 801d09a:	681a      	ldr	r2, [r3, #0]
 801d09c:	1cfb      	adds	r3, r7, #3
 801d09e:	781b      	ldrb	r3, [r3, #0]
 801d0a0:	0019      	movs	r1, r3
 801d0a2:	0020      	movs	r0, r4
 801d0a4:	f7fe fc5a 	bl	801b95c <USBD_LL_DataOutStage>
}
 801d0a8:	46c0      	nop			@ (mov r8, r8)
 801d0aa:	46bd      	mov	sp, r7
 801d0ac:	b003      	add	sp, #12
 801d0ae:	bd90      	pop	{r4, r7, pc}

0801d0b0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d0b0:	b580      	push	{r7, lr}
 801d0b2:	b082      	sub	sp, #8
 801d0b4:	af00      	add	r7, sp, #0
 801d0b6:	6078      	str	r0, [r7, #4]
 801d0b8:	000a      	movs	r2, r1
 801d0ba:	1cfb      	adds	r3, r7, #3
 801d0bc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801d0be:	687a      	ldr	r2, [r7, #4]
 801d0c0:	23bc      	movs	r3, #188	@ 0xbc
 801d0c2:	009b      	lsls	r3, r3, #2
 801d0c4:	58d0      	ldr	r0, [r2, r3]
 801d0c6:	1cfb      	adds	r3, r7, #3
 801d0c8:	781a      	ldrb	r2, [r3, #0]
 801d0ca:	6879      	ldr	r1, [r7, #4]
 801d0cc:	0013      	movs	r3, r2
 801d0ce:	009b      	lsls	r3, r3, #2
 801d0d0:	189b      	adds	r3, r3, r2
 801d0d2:	00db      	lsls	r3, r3, #3
 801d0d4:	18cb      	adds	r3, r1, r3
 801d0d6:	333c      	adds	r3, #60	@ 0x3c
 801d0d8:	681a      	ldr	r2, [r3, #0]
 801d0da:	1cfb      	adds	r3, r7, #3
 801d0dc:	781b      	ldrb	r3, [r3, #0]
 801d0de:	0019      	movs	r1, r3
 801d0e0:	f7fe fcbe 	bl	801ba60 <USBD_LL_DataInStage>
}
 801d0e4:	46c0      	nop			@ (mov r8, r8)
 801d0e6:	46bd      	mov	sp, r7
 801d0e8:	b002      	add	sp, #8
 801d0ea:	bd80      	pop	{r7, pc}

0801d0ec <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d0ec:	b580      	push	{r7, lr}
 801d0ee:	b082      	sub	sp, #8
 801d0f0:	af00      	add	r7, sp, #0
 801d0f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801d0f4:	687a      	ldr	r2, [r7, #4]
 801d0f6:	23bc      	movs	r3, #188	@ 0xbc
 801d0f8:	009b      	lsls	r3, r3, #2
 801d0fa:	58d3      	ldr	r3, [r2, r3]
 801d0fc:	0018      	movs	r0, r3
 801d0fe:	f7fe fdf5 	bl	801bcec <USBD_LL_SOF>
}
 801d102:	46c0      	nop			@ (mov r8, r8)
 801d104:	46bd      	mov	sp, r7
 801d106:	b002      	add	sp, #8
 801d108:	bd80      	pop	{r7, pc}

0801d10a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d10a:	b580      	push	{r7, lr}
 801d10c:	b084      	sub	sp, #16
 801d10e:	af00      	add	r7, sp, #0
 801d110:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801d112:	230f      	movs	r3, #15
 801d114:	18fb      	adds	r3, r7, r3
 801d116:	2201      	movs	r2, #1
 801d118:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	689b      	ldr	r3, [r3, #8]
 801d11e:	2b02      	cmp	r3, #2
 801d120:	d001      	beq.n	801d126 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801d122:	f7eb f8c5 	bl	80082b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801d126:	687a      	ldr	r2, [r7, #4]
 801d128:	23bc      	movs	r3, #188	@ 0xbc
 801d12a:	009b      	lsls	r3, r3, #2
 801d12c:	58d2      	ldr	r2, [r2, r3]
 801d12e:	230f      	movs	r3, #15
 801d130:	18fb      	adds	r3, r7, r3
 801d132:	781b      	ldrb	r3, [r3, #0]
 801d134:	0019      	movs	r1, r3
 801d136:	0010      	movs	r0, r2
 801d138:	f7fe fd97 	bl	801bc6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801d13c:	687a      	ldr	r2, [r7, #4]
 801d13e:	23bc      	movs	r3, #188	@ 0xbc
 801d140:	009b      	lsls	r3, r3, #2
 801d142:	58d3      	ldr	r3, [r2, r3]
 801d144:	0018      	movs	r0, r3
 801d146:	f7fe fd48 	bl	801bbda <USBD_LL_Reset>
}
 801d14a:	46c0      	nop			@ (mov r8, r8)
 801d14c:	46bd      	mov	sp, r7
 801d14e:	b004      	add	sp, #16
 801d150:	bd80      	pop	{r7, pc}
	...

0801d154 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d154:	b580      	push	{r7, lr}
 801d156:	b082      	sub	sp, #8
 801d158:	af00      	add	r7, sp, #0
 801d15a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801d15c:	687a      	ldr	r2, [r7, #4]
 801d15e:	23bc      	movs	r3, #188	@ 0xbc
 801d160:	009b      	lsls	r3, r3, #2
 801d162:	58d3      	ldr	r3, [r2, r3]
 801d164:	0018      	movs	r0, r3
 801d166:	f7fe fd91 	bl	801bc8c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801d16a:	687b      	ldr	r3, [r7, #4]
 801d16c:	699b      	ldr	r3, [r3, #24]
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d005      	beq.n	801d17e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d172:	4b05      	ldr	r3, [pc, #20]	@ (801d188 <HAL_PCD_SuspendCallback+0x34>)
 801d174:	691a      	ldr	r2, [r3, #16]
 801d176:	4b04      	ldr	r3, [pc, #16]	@ (801d188 <HAL_PCD_SuspendCallback+0x34>)
 801d178:	2106      	movs	r1, #6
 801d17a:	430a      	orrs	r2, r1
 801d17c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801d17e:	46c0      	nop			@ (mov r8, r8)
 801d180:	46bd      	mov	sp, r7
 801d182:	b002      	add	sp, #8
 801d184:	bd80      	pop	{r7, pc}
 801d186:	46c0      	nop			@ (mov r8, r8)
 801d188:	e000ed00 	.word	0xe000ed00

0801d18c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801d18c:	b580      	push	{r7, lr}
 801d18e:	b082      	sub	sp, #8
 801d190:	af00      	add	r7, sp, #0
 801d192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801d194:	687b      	ldr	r3, [r7, #4]
 801d196:	699b      	ldr	r3, [r3, #24]
 801d198:	2b00      	cmp	r3, #0
 801d19a:	d007      	beq.n	801d1ac <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801d19c:	4b09      	ldr	r3, [pc, #36]	@ (801d1c4 <HAL_PCD_ResumeCallback+0x38>)
 801d19e:	691a      	ldr	r2, [r3, #16]
 801d1a0:	4b08      	ldr	r3, [pc, #32]	@ (801d1c4 <HAL_PCD_ResumeCallback+0x38>)
 801d1a2:	2106      	movs	r1, #6
 801d1a4:	438a      	bics	r2, r1
 801d1a6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801d1a8:	f000 fa44 	bl	801d634 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801d1ac:	687a      	ldr	r2, [r7, #4]
 801d1ae:	23bc      	movs	r3, #188	@ 0xbc
 801d1b0:	009b      	lsls	r3, r3, #2
 801d1b2:	58d3      	ldr	r3, [r2, r3]
 801d1b4:	0018      	movs	r0, r3
 801d1b6:	f7fe fd81 	bl	801bcbc <USBD_LL_Resume>
}
 801d1ba:	46c0      	nop			@ (mov r8, r8)
 801d1bc:	46bd      	mov	sp, r7
 801d1be:	b002      	add	sp, #8
 801d1c0:	bd80      	pop	{r7, pc}
 801d1c2:	46c0      	nop			@ (mov r8, r8)
 801d1c4:	e000ed00 	.word	0xe000ed00

0801d1c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801d1c8:	b580      	push	{r7, lr}
 801d1ca:	b082      	sub	sp, #8
 801d1cc:	af00      	add	r7, sp, #0
 801d1ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801d1d0:	4a2d      	ldr	r2, [pc, #180]	@ (801d288 <USBD_LL_Init+0xc0>)
 801d1d2:	23bc      	movs	r3, #188	@ 0xbc
 801d1d4:	009b      	lsls	r3, r3, #2
 801d1d6:	6879      	ldr	r1, [r7, #4]
 801d1d8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801d1da:	687a      	ldr	r2, [r7, #4]
 801d1dc:	23b0      	movs	r3, #176	@ 0xb0
 801d1de:	009b      	lsls	r3, r3, #2
 801d1e0:	4929      	ldr	r1, [pc, #164]	@ (801d288 <USBD_LL_Init+0xc0>)
 801d1e2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801d1e4:	4b28      	ldr	r3, [pc, #160]	@ (801d288 <USBD_LL_Init+0xc0>)
 801d1e6:	4a29      	ldr	r2, [pc, #164]	@ (801d28c <USBD_LL_Init+0xc4>)
 801d1e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801d1ea:	4b27      	ldr	r3, [pc, #156]	@ (801d288 <USBD_LL_Init+0xc0>)
 801d1ec:	2208      	movs	r2, #8
 801d1ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801d1f0:	4b25      	ldr	r3, [pc, #148]	@ (801d288 <USBD_LL_Init+0xc0>)
 801d1f2:	2202      	movs	r2, #2
 801d1f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801d1f6:	4b24      	ldr	r3, [pc, #144]	@ (801d288 <USBD_LL_Init+0xc0>)
 801d1f8:	2202      	movs	r2, #2
 801d1fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801d1fc:	4b22      	ldr	r3, [pc, #136]	@ (801d288 <USBD_LL_Init+0xc0>)
 801d1fe:	2200      	movs	r2, #0
 801d200:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801d202:	4b21      	ldr	r3, [pc, #132]	@ (801d288 <USBD_LL_Init+0xc0>)
 801d204:	2200      	movs	r2, #0
 801d206:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801d208:	4b1f      	ldr	r3, [pc, #124]	@ (801d288 <USBD_LL_Init+0xc0>)
 801d20a:	2200      	movs	r2, #0
 801d20c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801d20e:	4b1e      	ldr	r3, [pc, #120]	@ (801d288 <USBD_LL_Init+0xc0>)
 801d210:	0018      	movs	r0, r3
 801d212:	f7f5 ff95 	bl	8013140 <HAL_PCD_Init>
 801d216:	1e03      	subs	r3, r0, #0
 801d218:	d001      	beq.n	801d21e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801d21a:	f7eb f849 	bl	80082b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801d21e:	687a      	ldr	r2, [r7, #4]
 801d220:	23b0      	movs	r3, #176	@ 0xb0
 801d222:	009b      	lsls	r3, r3, #2
 801d224:	58d0      	ldr	r0, [r2, r3]
 801d226:	2318      	movs	r3, #24
 801d228:	2200      	movs	r2, #0
 801d22a:	2100      	movs	r1, #0
 801d22c:	f7f7 fd56 	bl	8014cdc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801d230:	687a      	ldr	r2, [r7, #4]
 801d232:	23b0      	movs	r3, #176	@ 0xb0
 801d234:	009b      	lsls	r3, r3, #2
 801d236:	58d0      	ldr	r0, [r2, r3]
 801d238:	2358      	movs	r3, #88	@ 0x58
 801d23a:	2200      	movs	r2, #0
 801d23c:	2180      	movs	r1, #128	@ 0x80
 801d23e:	f7f7 fd4d 	bl	8014cdc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801d242:	687a      	ldr	r2, [r7, #4]
 801d244:	23b0      	movs	r3, #176	@ 0xb0
 801d246:	009b      	lsls	r3, r3, #2
 801d248:	58d0      	ldr	r0, [r2, r3]
 801d24a:	23c0      	movs	r3, #192	@ 0xc0
 801d24c:	2200      	movs	r2, #0
 801d24e:	2181      	movs	r1, #129	@ 0x81
 801d250:	f7f7 fd44 	bl	8014cdc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801d254:	687a      	ldr	r2, [r7, #4]
 801d256:	23b0      	movs	r3, #176	@ 0xb0
 801d258:	009b      	lsls	r3, r3, #2
 801d25a:	58d0      	ldr	r0, [r2, r3]
 801d25c:	2388      	movs	r3, #136	@ 0x88
 801d25e:	005b      	lsls	r3, r3, #1
 801d260:	2200      	movs	r2, #0
 801d262:	2101      	movs	r1, #1
 801d264:	f7f7 fd3a 	bl	8014cdc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801d268:	687a      	ldr	r2, [r7, #4]
 801d26a:	23b0      	movs	r3, #176	@ 0xb0
 801d26c:	009b      	lsls	r3, r3, #2
 801d26e:	58d0      	ldr	r0, [r2, r3]
 801d270:	2380      	movs	r3, #128	@ 0x80
 801d272:	005b      	lsls	r3, r3, #1
 801d274:	2200      	movs	r2, #0
 801d276:	2182      	movs	r1, #130	@ 0x82
 801d278:	f7f7 fd30 	bl	8014cdc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801d27c:	2300      	movs	r3, #0
}
 801d27e:	0018      	movs	r0, r3
 801d280:	46bd      	mov	sp, r7
 801d282:	b002      	add	sp, #8
 801d284:	bd80      	pop	{r7, pc}
 801d286:	46c0      	nop			@ (mov r8, r8)
 801d288:	2000334c 	.word	0x2000334c
 801d28c:	40005c00 	.word	0x40005c00

0801d290 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801d290:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d292:	b085      	sub	sp, #20
 801d294:	af00      	add	r7, sp, #0
 801d296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d298:	210f      	movs	r1, #15
 801d29a:	187b      	adds	r3, r7, r1
 801d29c:	2200      	movs	r2, #0
 801d29e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d2a0:	260e      	movs	r6, #14
 801d2a2:	19bb      	adds	r3, r7, r6
 801d2a4:	2200      	movs	r2, #0
 801d2a6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801d2a8:	687a      	ldr	r2, [r7, #4]
 801d2aa:	23b0      	movs	r3, #176	@ 0xb0
 801d2ac:	009b      	lsls	r3, r3, #2
 801d2ae:	58d3      	ldr	r3, [r2, r3]
 801d2b0:	000d      	movs	r5, r1
 801d2b2:	187c      	adds	r4, r7, r1
 801d2b4:	0018      	movs	r0, r3
 801d2b6:	f7f6 f843 	bl	8013340 <HAL_PCD_Start>
 801d2ba:	0003      	movs	r3, r0
 801d2bc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d2be:	19bc      	adds	r4, r7, r6
 801d2c0:	197b      	adds	r3, r7, r5
 801d2c2:	781b      	ldrb	r3, [r3, #0]
 801d2c4:	0018      	movs	r0, r3
 801d2c6:	f000 f9bc 	bl	801d642 <USBD_Get_USB_Status>
 801d2ca:	0003      	movs	r3, r0
 801d2cc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d2ce:	19bb      	adds	r3, r7, r6
 801d2d0:	781b      	ldrb	r3, [r3, #0]
}
 801d2d2:	0018      	movs	r0, r3
 801d2d4:	46bd      	mov	sp, r7
 801d2d6:	b005      	add	sp, #20
 801d2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d2da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801d2da:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d2dc:	b085      	sub	sp, #20
 801d2de:	af00      	add	r7, sp, #0
 801d2e0:	6078      	str	r0, [r7, #4]
 801d2e2:	000c      	movs	r4, r1
 801d2e4:	0010      	movs	r0, r2
 801d2e6:	0019      	movs	r1, r3
 801d2e8:	1cfb      	adds	r3, r7, #3
 801d2ea:	1c22      	adds	r2, r4, #0
 801d2ec:	701a      	strb	r2, [r3, #0]
 801d2ee:	1cbb      	adds	r3, r7, #2
 801d2f0:	1c02      	adds	r2, r0, #0
 801d2f2:	701a      	strb	r2, [r3, #0]
 801d2f4:	003b      	movs	r3, r7
 801d2f6:	1c0a      	adds	r2, r1, #0
 801d2f8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d2fa:	260f      	movs	r6, #15
 801d2fc:	19bb      	adds	r3, r7, r6
 801d2fe:	2200      	movs	r2, #0
 801d300:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d302:	250e      	movs	r5, #14
 801d304:	197b      	adds	r3, r7, r5
 801d306:	2200      	movs	r2, #0
 801d308:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801d30a:	687a      	ldr	r2, [r7, #4]
 801d30c:	23b0      	movs	r3, #176	@ 0xb0
 801d30e:	009b      	lsls	r3, r3, #2
 801d310:	58d0      	ldr	r0, [r2, r3]
 801d312:	19bc      	adds	r4, r7, r6
 801d314:	1cbb      	adds	r3, r7, #2
 801d316:	781d      	ldrb	r5, [r3, #0]
 801d318:	003b      	movs	r3, r7
 801d31a:	881a      	ldrh	r2, [r3, #0]
 801d31c:	1cfb      	adds	r3, r7, #3
 801d31e:	7819      	ldrb	r1, [r3, #0]
 801d320:	002b      	movs	r3, r5
 801d322:	f7f6 f9a2 	bl	801366a <HAL_PCD_EP_Open>
 801d326:	0003      	movs	r3, r0
 801d328:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d32a:	250e      	movs	r5, #14
 801d32c:	197c      	adds	r4, r7, r5
 801d32e:	19bb      	adds	r3, r7, r6
 801d330:	781b      	ldrb	r3, [r3, #0]
 801d332:	0018      	movs	r0, r3
 801d334:	f000 f985 	bl	801d642 <USBD_Get_USB_Status>
 801d338:	0003      	movs	r3, r0
 801d33a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d33c:	197b      	adds	r3, r7, r5
 801d33e:	781b      	ldrb	r3, [r3, #0]
}
 801d340:	0018      	movs	r0, r3
 801d342:	46bd      	mov	sp, r7
 801d344:	b005      	add	sp, #20
 801d346:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d348 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d34a:	b085      	sub	sp, #20
 801d34c:	af00      	add	r7, sp, #0
 801d34e:	6078      	str	r0, [r7, #4]
 801d350:	000a      	movs	r2, r1
 801d352:	1cfb      	adds	r3, r7, #3
 801d354:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d356:	210f      	movs	r1, #15
 801d358:	187b      	adds	r3, r7, r1
 801d35a:	2200      	movs	r2, #0
 801d35c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d35e:	260e      	movs	r6, #14
 801d360:	19bb      	adds	r3, r7, r6
 801d362:	2200      	movs	r2, #0
 801d364:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801d366:	687a      	ldr	r2, [r7, #4]
 801d368:	23b0      	movs	r3, #176	@ 0xb0
 801d36a:	009b      	lsls	r3, r3, #2
 801d36c:	58d2      	ldr	r2, [r2, r3]
 801d36e:	000d      	movs	r5, r1
 801d370:	187c      	adds	r4, r7, r1
 801d372:	1cfb      	adds	r3, r7, #3
 801d374:	781b      	ldrb	r3, [r3, #0]
 801d376:	0019      	movs	r1, r3
 801d378:	0010      	movs	r0, r2
 801d37a:	f7f6 f9e5 	bl	8013748 <HAL_PCD_EP_Close>
 801d37e:	0003      	movs	r3, r0
 801d380:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d382:	19bc      	adds	r4, r7, r6
 801d384:	197b      	adds	r3, r7, r5
 801d386:	781b      	ldrb	r3, [r3, #0]
 801d388:	0018      	movs	r0, r3
 801d38a:	f000 f95a 	bl	801d642 <USBD_Get_USB_Status>
 801d38e:	0003      	movs	r3, r0
 801d390:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d392:	19bb      	adds	r3, r7, r6
 801d394:	781b      	ldrb	r3, [r3, #0]
}
 801d396:	0018      	movs	r0, r3
 801d398:	46bd      	mov	sp, r7
 801d39a:	b005      	add	sp, #20
 801d39c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d39e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d39e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d3a0:	b085      	sub	sp, #20
 801d3a2:	af00      	add	r7, sp, #0
 801d3a4:	6078      	str	r0, [r7, #4]
 801d3a6:	000a      	movs	r2, r1
 801d3a8:	1cfb      	adds	r3, r7, #3
 801d3aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d3ac:	210f      	movs	r1, #15
 801d3ae:	187b      	adds	r3, r7, r1
 801d3b0:	2200      	movs	r2, #0
 801d3b2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d3b4:	260e      	movs	r6, #14
 801d3b6:	19bb      	adds	r3, r7, r6
 801d3b8:	2200      	movs	r2, #0
 801d3ba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801d3bc:	687a      	ldr	r2, [r7, #4]
 801d3be:	23b0      	movs	r3, #176	@ 0xb0
 801d3c0:	009b      	lsls	r3, r3, #2
 801d3c2:	58d2      	ldr	r2, [r2, r3]
 801d3c4:	000d      	movs	r5, r1
 801d3c6:	187c      	adds	r4, r7, r1
 801d3c8:	1cfb      	adds	r3, r7, #3
 801d3ca:	781b      	ldrb	r3, [r3, #0]
 801d3cc:	0019      	movs	r1, r3
 801d3ce:	0010      	movs	r0, r2
 801d3d0:	f7f6 fa97 	bl	8013902 <HAL_PCD_EP_SetStall>
 801d3d4:	0003      	movs	r3, r0
 801d3d6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d3d8:	19bc      	adds	r4, r7, r6
 801d3da:	197b      	adds	r3, r7, r5
 801d3dc:	781b      	ldrb	r3, [r3, #0]
 801d3de:	0018      	movs	r0, r3
 801d3e0:	f000 f92f 	bl	801d642 <USBD_Get_USB_Status>
 801d3e4:	0003      	movs	r3, r0
 801d3e6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d3e8:	19bb      	adds	r3, r7, r6
 801d3ea:	781b      	ldrb	r3, [r3, #0]
}
 801d3ec:	0018      	movs	r0, r3
 801d3ee:	46bd      	mov	sp, r7
 801d3f0:	b005      	add	sp, #20
 801d3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d3f4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d3f6:	b085      	sub	sp, #20
 801d3f8:	af00      	add	r7, sp, #0
 801d3fa:	6078      	str	r0, [r7, #4]
 801d3fc:	000a      	movs	r2, r1
 801d3fe:	1cfb      	adds	r3, r7, #3
 801d400:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d402:	210f      	movs	r1, #15
 801d404:	187b      	adds	r3, r7, r1
 801d406:	2200      	movs	r2, #0
 801d408:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d40a:	260e      	movs	r6, #14
 801d40c:	19bb      	adds	r3, r7, r6
 801d40e:	2200      	movs	r2, #0
 801d410:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801d412:	687a      	ldr	r2, [r7, #4]
 801d414:	23b0      	movs	r3, #176	@ 0xb0
 801d416:	009b      	lsls	r3, r3, #2
 801d418:	58d2      	ldr	r2, [r2, r3]
 801d41a:	000d      	movs	r5, r1
 801d41c:	187c      	adds	r4, r7, r1
 801d41e:	1cfb      	adds	r3, r7, #3
 801d420:	781b      	ldrb	r3, [r3, #0]
 801d422:	0019      	movs	r1, r3
 801d424:	0010      	movs	r0, r2
 801d426:	f7f6 fac8 	bl	80139ba <HAL_PCD_EP_ClrStall>
 801d42a:	0003      	movs	r3, r0
 801d42c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d42e:	19bc      	adds	r4, r7, r6
 801d430:	197b      	adds	r3, r7, r5
 801d432:	781b      	ldrb	r3, [r3, #0]
 801d434:	0018      	movs	r0, r3
 801d436:	f000 f904 	bl	801d642 <USBD_Get_USB_Status>
 801d43a:	0003      	movs	r3, r0
 801d43c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d43e:	19bb      	adds	r3, r7, r6
 801d440:	781b      	ldrb	r3, [r3, #0]
}
 801d442:	0018      	movs	r0, r3
 801d444:	46bd      	mov	sp, r7
 801d446:	b005      	add	sp, #20
 801d448:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d44a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d44a:	b580      	push	{r7, lr}
 801d44c:	b084      	sub	sp, #16
 801d44e:	af00      	add	r7, sp, #0
 801d450:	6078      	str	r0, [r7, #4]
 801d452:	000a      	movs	r2, r1
 801d454:	1cfb      	adds	r3, r7, #3
 801d456:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801d458:	687a      	ldr	r2, [r7, #4]
 801d45a:	23b0      	movs	r3, #176	@ 0xb0
 801d45c:	009b      	lsls	r3, r3, #2
 801d45e:	58d3      	ldr	r3, [r2, r3]
 801d460:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801d462:	1cfb      	adds	r3, r7, #3
 801d464:	781b      	ldrb	r3, [r3, #0]
 801d466:	b25b      	sxtb	r3, r3
 801d468:	2b00      	cmp	r3, #0
 801d46a:	da0d      	bge.n	801d488 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801d46c:	1cfb      	adds	r3, r7, #3
 801d46e:	781b      	ldrb	r3, [r3, #0]
 801d470:	227f      	movs	r2, #127	@ 0x7f
 801d472:	4013      	ands	r3, r2
 801d474:	68f9      	ldr	r1, [r7, #12]
 801d476:	1c5a      	adds	r2, r3, #1
 801d478:	0013      	movs	r3, r2
 801d47a:	009b      	lsls	r3, r3, #2
 801d47c:	189b      	adds	r3, r3, r2
 801d47e:	00db      	lsls	r3, r3, #3
 801d480:	18cb      	adds	r3, r1, r3
 801d482:	3302      	adds	r3, #2
 801d484:	781b      	ldrb	r3, [r3, #0]
 801d486:	e00d      	b.n	801d4a4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801d488:	1cfb      	adds	r3, r7, #3
 801d48a:	781b      	ldrb	r3, [r3, #0]
 801d48c:	227f      	movs	r2, #127	@ 0x7f
 801d48e:	401a      	ands	r2, r3
 801d490:	68f8      	ldr	r0, [r7, #12]
 801d492:	23b5      	movs	r3, #181	@ 0xb5
 801d494:	0059      	lsls	r1, r3, #1
 801d496:	0013      	movs	r3, r2
 801d498:	009b      	lsls	r3, r3, #2
 801d49a:	189b      	adds	r3, r3, r2
 801d49c:	00db      	lsls	r3, r3, #3
 801d49e:	18c3      	adds	r3, r0, r3
 801d4a0:	185b      	adds	r3, r3, r1
 801d4a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d4a4:	0018      	movs	r0, r3
 801d4a6:	46bd      	mov	sp, r7
 801d4a8:	b004      	add	sp, #16
 801d4aa:	bd80      	pop	{r7, pc}

0801d4ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801d4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4ae:	b085      	sub	sp, #20
 801d4b0:	af00      	add	r7, sp, #0
 801d4b2:	6078      	str	r0, [r7, #4]
 801d4b4:	000a      	movs	r2, r1
 801d4b6:	1cfb      	adds	r3, r7, #3
 801d4b8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d4ba:	210f      	movs	r1, #15
 801d4bc:	187b      	adds	r3, r7, r1
 801d4be:	2200      	movs	r2, #0
 801d4c0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d4c2:	260e      	movs	r6, #14
 801d4c4:	19bb      	adds	r3, r7, r6
 801d4c6:	2200      	movs	r2, #0
 801d4c8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801d4ca:	687a      	ldr	r2, [r7, #4]
 801d4cc:	23b0      	movs	r3, #176	@ 0xb0
 801d4ce:	009b      	lsls	r3, r3, #2
 801d4d0:	58d2      	ldr	r2, [r2, r3]
 801d4d2:	000d      	movs	r5, r1
 801d4d4:	187c      	adds	r4, r7, r1
 801d4d6:	1cfb      	adds	r3, r7, #3
 801d4d8:	781b      	ldrb	r3, [r3, #0]
 801d4da:	0019      	movs	r1, r3
 801d4dc:	0010      	movs	r0, r2
 801d4de:	f7f6 f899 	bl	8013614 <HAL_PCD_SetAddress>
 801d4e2:	0003      	movs	r3, r0
 801d4e4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d4e6:	19bc      	adds	r4, r7, r6
 801d4e8:	197b      	adds	r3, r7, r5
 801d4ea:	781b      	ldrb	r3, [r3, #0]
 801d4ec:	0018      	movs	r0, r3
 801d4ee:	f000 f8a8 	bl	801d642 <USBD_Get_USB_Status>
 801d4f2:	0003      	movs	r3, r0
 801d4f4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d4f6:	19bb      	adds	r3, r7, r6
 801d4f8:	781b      	ldrb	r3, [r3, #0]
}
 801d4fa:	0018      	movs	r0, r3
 801d4fc:	46bd      	mov	sp, r7
 801d4fe:	b005      	add	sp, #20
 801d500:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d502 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d502:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d504:	b087      	sub	sp, #28
 801d506:	af00      	add	r7, sp, #0
 801d508:	60f8      	str	r0, [r7, #12]
 801d50a:	0008      	movs	r0, r1
 801d50c:	607a      	str	r2, [r7, #4]
 801d50e:	0019      	movs	r1, r3
 801d510:	230b      	movs	r3, #11
 801d512:	18fb      	adds	r3, r7, r3
 801d514:	1c02      	adds	r2, r0, #0
 801d516:	701a      	strb	r2, [r3, #0]
 801d518:	2408      	movs	r4, #8
 801d51a:	193b      	adds	r3, r7, r4
 801d51c:	1c0a      	adds	r2, r1, #0
 801d51e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d520:	2117      	movs	r1, #23
 801d522:	187b      	adds	r3, r7, r1
 801d524:	2200      	movs	r2, #0
 801d526:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d528:	2516      	movs	r5, #22
 801d52a:	197b      	adds	r3, r7, r5
 801d52c:	2200      	movs	r2, #0
 801d52e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801d530:	68fa      	ldr	r2, [r7, #12]
 801d532:	23b0      	movs	r3, #176	@ 0xb0
 801d534:	009b      	lsls	r3, r3, #2
 801d536:	58d0      	ldr	r0, [r2, r3]
 801d538:	193b      	adds	r3, r7, r4
 801d53a:	881d      	ldrh	r5, [r3, #0]
 801d53c:	000e      	movs	r6, r1
 801d53e:	187c      	adds	r4, r7, r1
 801d540:	687a      	ldr	r2, [r7, #4]
 801d542:	230b      	movs	r3, #11
 801d544:	18fb      	adds	r3, r7, r3
 801d546:	7819      	ldrb	r1, [r3, #0]
 801d548:	002b      	movs	r3, r5
 801d54a:	f7f6 f99e 	bl	801388a <HAL_PCD_EP_Transmit>
 801d54e:	0003      	movs	r3, r0
 801d550:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d552:	2516      	movs	r5, #22
 801d554:	197c      	adds	r4, r7, r5
 801d556:	19bb      	adds	r3, r7, r6
 801d558:	781b      	ldrb	r3, [r3, #0]
 801d55a:	0018      	movs	r0, r3
 801d55c:	f000 f871 	bl	801d642 <USBD_Get_USB_Status>
 801d560:	0003      	movs	r3, r0
 801d562:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d564:	197b      	adds	r3, r7, r5
 801d566:	781b      	ldrb	r3, [r3, #0]
}
 801d568:	0018      	movs	r0, r3
 801d56a:	46bd      	mov	sp, r7
 801d56c:	b007      	add	sp, #28
 801d56e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d570 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801d570:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d572:	b087      	sub	sp, #28
 801d574:	af00      	add	r7, sp, #0
 801d576:	60f8      	str	r0, [r7, #12]
 801d578:	0008      	movs	r0, r1
 801d57a:	607a      	str	r2, [r7, #4]
 801d57c:	0019      	movs	r1, r3
 801d57e:	230b      	movs	r3, #11
 801d580:	18fb      	adds	r3, r7, r3
 801d582:	1c02      	adds	r2, r0, #0
 801d584:	701a      	strb	r2, [r3, #0]
 801d586:	2408      	movs	r4, #8
 801d588:	193b      	adds	r3, r7, r4
 801d58a:	1c0a      	adds	r2, r1, #0
 801d58c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801d58e:	2117      	movs	r1, #23
 801d590:	187b      	adds	r3, r7, r1
 801d592:	2200      	movs	r2, #0
 801d594:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d596:	2516      	movs	r5, #22
 801d598:	197b      	adds	r3, r7, r5
 801d59a:	2200      	movs	r2, #0
 801d59c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801d59e:	68fa      	ldr	r2, [r7, #12]
 801d5a0:	23b0      	movs	r3, #176	@ 0xb0
 801d5a2:	009b      	lsls	r3, r3, #2
 801d5a4:	58d0      	ldr	r0, [r2, r3]
 801d5a6:	193b      	adds	r3, r7, r4
 801d5a8:	881d      	ldrh	r5, [r3, #0]
 801d5aa:	000e      	movs	r6, r1
 801d5ac:	187c      	adds	r4, r7, r1
 801d5ae:	687a      	ldr	r2, [r7, #4]
 801d5b0:	230b      	movs	r3, #11
 801d5b2:	18fb      	adds	r3, r7, r3
 801d5b4:	7819      	ldrb	r1, [r3, #0]
 801d5b6:	002b      	movs	r3, r5
 801d5b8:	f7f6 f917 	bl	80137ea <HAL_PCD_EP_Receive>
 801d5bc:	0003      	movs	r3, r0
 801d5be:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801d5c0:	2516      	movs	r5, #22
 801d5c2:	197c      	adds	r4, r7, r5
 801d5c4:	19bb      	adds	r3, r7, r6
 801d5c6:	781b      	ldrb	r3, [r3, #0]
 801d5c8:	0018      	movs	r0, r3
 801d5ca:	f000 f83a 	bl	801d642 <USBD_Get_USB_Status>
 801d5ce:	0003      	movs	r3, r0
 801d5d0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801d5d2:	197b      	adds	r3, r7, r5
 801d5d4:	781b      	ldrb	r3, [r3, #0]
}
 801d5d6:	0018      	movs	r0, r3
 801d5d8:	46bd      	mov	sp, r7
 801d5da:	b007      	add	sp, #28
 801d5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d5de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801d5de:	b580      	push	{r7, lr}
 801d5e0:	b082      	sub	sp, #8
 801d5e2:	af00      	add	r7, sp, #0
 801d5e4:	6078      	str	r0, [r7, #4]
 801d5e6:	000a      	movs	r2, r1
 801d5e8:	1cfb      	adds	r3, r7, #3
 801d5ea:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801d5ec:	687a      	ldr	r2, [r7, #4]
 801d5ee:	23b0      	movs	r3, #176	@ 0xb0
 801d5f0:	009b      	lsls	r3, r3, #2
 801d5f2:	58d2      	ldr	r2, [r2, r3]
 801d5f4:	1cfb      	adds	r3, r7, #3
 801d5f6:	781b      	ldrb	r3, [r3, #0]
 801d5f8:	0019      	movs	r1, r3
 801d5fa:	0010      	movs	r0, r2
 801d5fc:	f7f6 f92c 	bl	8013858 <HAL_PCD_EP_GetRxCount>
 801d600:	0003      	movs	r3, r0
}
 801d602:	0018      	movs	r0, r3
 801d604:	46bd      	mov	sp, r7
 801d606:	b002      	add	sp, #8
 801d608:	bd80      	pop	{r7, pc}
	...

0801d60c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801d60c:	b580      	push	{r7, lr}
 801d60e:	b082      	sub	sp, #8
 801d610:	af00      	add	r7, sp, #0
 801d612:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801d614:	4b02      	ldr	r3, [pc, #8]	@ (801d620 <USBD_static_malloc+0x14>)
}
 801d616:	0018      	movs	r0, r3
 801d618:	46bd      	mov	sp, r7
 801d61a:	b002      	add	sp, #8
 801d61c:	bd80      	pop	{r7, pc}
 801d61e:	46c0      	nop			@ (mov r8, r8)
 801d620:	20003640 	.word	0x20003640

0801d624 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801d624:	b580      	push	{r7, lr}
 801d626:	b082      	sub	sp, #8
 801d628:	af00      	add	r7, sp, #0
 801d62a:	6078      	str	r0, [r7, #4]

}
 801d62c:	46c0      	nop			@ (mov r8, r8)
 801d62e:	46bd      	mov	sp, r7
 801d630:	b002      	add	sp, #8
 801d632:	bd80      	pop	{r7, pc}

0801d634 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801d634:	b580      	push	{r7, lr}
 801d636:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801d638:	f7ea fce4 	bl	8008004 <SystemClock_Config>
}
 801d63c:	46c0      	nop			@ (mov r8, r8)
 801d63e:	46bd      	mov	sp, r7
 801d640:	bd80      	pop	{r7, pc}

0801d642 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801d642:	b580      	push	{r7, lr}
 801d644:	b084      	sub	sp, #16
 801d646:	af00      	add	r7, sp, #0
 801d648:	0002      	movs	r2, r0
 801d64a:	1dfb      	adds	r3, r7, #7
 801d64c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801d64e:	230f      	movs	r3, #15
 801d650:	18fb      	adds	r3, r7, r3
 801d652:	2200      	movs	r2, #0
 801d654:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801d656:	1dfb      	adds	r3, r7, #7
 801d658:	781b      	ldrb	r3, [r3, #0]
 801d65a:	2b03      	cmp	r3, #3
 801d65c:	d017      	beq.n	801d68e <USBD_Get_USB_Status+0x4c>
 801d65e:	dc1b      	bgt.n	801d698 <USBD_Get_USB_Status+0x56>
 801d660:	2b02      	cmp	r3, #2
 801d662:	d00f      	beq.n	801d684 <USBD_Get_USB_Status+0x42>
 801d664:	dc18      	bgt.n	801d698 <USBD_Get_USB_Status+0x56>
 801d666:	2b00      	cmp	r3, #0
 801d668:	d002      	beq.n	801d670 <USBD_Get_USB_Status+0x2e>
 801d66a:	2b01      	cmp	r3, #1
 801d66c:	d005      	beq.n	801d67a <USBD_Get_USB_Status+0x38>
 801d66e:	e013      	b.n	801d698 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801d670:	230f      	movs	r3, #15
 801d672:	18fb      	adds	r3, r7, r3
 801d674:	2200      	movs	r2, #0
 801d676:	701a      	strb	r2, [r3, #0]
    break;
 801d678:	e013      	b.n	801d6a2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801d67a:	230f      	movs	r3, #15
 801d67c:	18fb      	adds	r3, r7, r3
 801d67e:	2202      	movs	r2, #2
 801d680:	701a      	strb	r2, [r3, #0]
    break;
 801d682:	e00e      	b.n	801d6a2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801d684:	230f      	movs	r3, #15
 801d686:	18fb      	adds	r3, r7, r3
 801d688:	2201      	movs	r2, #1
 801d68a:	701a      	strb	r2, [r3, #0]
    break;
 801d68c:	e009      	b.n	801d6a2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801d68e:	230f      	movs	r3, #15
 801d690:	18fb      	adds	r3, r7, r3
 801d692:	2202      	movs	r2, #2
 801d694:	701a      	strb	r2, [r3, #0]
    break;
 801d696:	e004      	b.n	801d6a2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801d698:	230f      	movs	r3, #15
 801d69a:	18fb      	adds	r3, r7, r3
 801d69c:	2202      	movs	r2, #2
 801d69e:	701a      	strb	r2, [r3, #0]
    break;
 801d6a0:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801d6a2:	230f      	movs	r3, #15
 801d6a4:	18fb      	adds	r3, r7, r3
 801d6a6:	781b      	ldrb	r3, [r3, #0]
}
 801d6a8:	0018      	movs	r0, r3
 801d6aa:	46bd      	mov	sp, r7
 801d6ac:	b004      	add	sp, #16
 801d6ae:	bd80      	pop	{r7, pc}

0801d6b0 <arm_cfft_radix4by2_q31>:
 801d6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6b2:	465f      	mov	r7, fp
 801d6b4:	4656      	mov	r6, sl
 801d6b6:	464d      	mov	r5, r9
 801d6b8:	4644      	mov	r4, r8
 801d6ba:	000b      	movs	r3, r1
 801d6bc:	b4f0      	push	{r4, r5, r6, r7}
 801d6be:	085b      	lsrs	r3, r3, #1
 801d6c0:	b08f      	sub	sp, #60	@ 0x3c
 801d6c2:	910a      	str	r1, [sp, #40]	@ 0x28
 801d6c4:	0007      	movs	r7, r0
 801d6c6:	9009      	str	r0, [sp, #36]	@ 0x24
 801d6c8:	0011      	movs	r1, r2
 801d6ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d6cc:	930c      	str	r3, [sp, #48]	@ 0x30
 801d6ce:	2b00      	cmp	r3, #0
 801d6d0:	d100      	bne.n	801d6d4 <arm_cfft_radix4by2_q31+0x24>
 801d6d2:	e0a0      	b.n	801d816 <arm_cfft_radix4by2_q31+0x166>
 801d6d4:	0002      	movs	r2, r0
 801d6d6:	00db      	lsls	r3, r3, #3
 801d6d8:	3204      	adds	r2, #4
 801d6da:	4691      	mov	r9, r2
 801d6dc:	4698      	mov	r8, r3
 801d6de:	000a      	movs	r2, r1
 801d6e0:	464e      	mov	r6, r9
 801d6e2:	4442      	add	r2, r8
 801d6e4:	4699      	mov	r9, r3
 801d6e6:	4688      	mov	r8, r1
 801d6e8:	9208      	str	r2, [sp, #32]
 801d6ea:	900d      	str	r0, [sp, #52]	@ 0x34
 801d6ec:	4643      	mov	r3, r8
 801d6ee:	681b      	ldr	r3, [r3, #0]
 801d6f0:	469b      	mov	fp, r3
 801d6f2:	4643      	mov	r3, r8
 801d6f4:	685b      	ldr	r3, [r3, #4]
 801d6f6:	469a      	mov	sl, r3
 801d6f8:	683b      	ldr	r3, [r7, #0]
 801d6fa:	109c      	asrs	r4, r3, #2
 801d6fc:	464b      	mov	r3, r9
 801d6fe:	58fb      	ldr	r3, [r7, r3]
 801d700:	109a      	asrs	r2, r3, #2
 801d702:	18a3      	adds	r3, r4, r2
 801d704:	603b      	str	r3, [r7, #0]
 801d706:	6833      	ldr	r3, [r6, #0]
 801d708:	1aa4      	subs	r4, r4, r2
 801d70a:	109d      	asrs	r5, r3, #2
 801d70c:	464b      	mov	r3, r9
 801d70e:	58f3      	ldr	r3, [r6, r3]
 801d710:	17e2      	asrs	r2, r4, #31
 801d712:	109b      	asrs	r3, r3, #2
 801d714:	18e9      	adds	r1, r5, r3
 801d716:	6031      	str	r1, [r6, #0]
 801d718:	0011      	movs	r1, r2
 801d71a:	465a      	mov	r2, fp
 801d71c:	17d2      	asrs	r2, r2, #31
 801d71e:	0010      	movs	r0, r2
 801d720:	4652      	mov	r2, sl
 801d722:	1aed      	subs	r5, r5, r3
 801d724:	17eb      	asrs	r3, r5, #31
 801d726:	17d2      	asrs	r2, r2, #31
 801d728:	9307      	str	r3, [sp, #28]
 801d72a:	9204      	str	r2, [sp, #16]
 801d72c:	0003      	movs	r3, r0
 801d72e:	465a      	mov	r2, fp
 801d730:	9006      	str	r0, [sp, #24]
 801d732:	0020      	movs	r0, r4
 801d734:	9105      	str	r1, [sp, #20]
 801d736:	f7e2 ff43 	bl	80005c0 <__aeabi_lmul>
 801d73a:	2280      	movs	r2, #128	@ 0x80
 801d73c:	2300      	movs	r3, #0
 801d73e:	0612      	lsls	r2, r2, #24
 801d740:	1880      	adds	r0, r0, r2
 801d742:	4159      	adcs	r1, r3
 801d744:	2300      	movs	r3, #0
 801d746:	9101      	str	r1, [sp, #4]
 801d748:	9300      	str	r3, [sp, #0]
 801d74a:	4652      	mov	r2, sl
 801d74c:	9b04      	ldr	r3, [sp, #16]
 801d74e:	0028      	movs	r0, r5
 801d750:	17e9      	asrs	r1, r5, #31
 801d752:	f7e2 ff35 	bl	80005c0 <__aeabi_lmul>
 801d756:	9a00      	ldr	r2, [sp, #0]
 801d758:	9b01      	ldr	r3, [sp, #4]
 801d75a:	1880      	adds	r0, r0, r2
 801d75c:	4159      	adcs	r1, r3
 801d75e:	2280      	movs	r2, #128	@ 0x80
 801d760:	2300      	movs	r3, #0
 801d762:	0612      	lsls	r2, r2, #24
 801d764:	1880      	adds	r0, r0, r2
 801d766:	4159      	adcs	r1, r3
 801d768:	464a      	mov	r2, r9
 801d76a:	004b      	lsls	r3, r1, #1
 801d76c:	50bb      	str	r3, [r7, r2]
 801d76e:	4658      	mov	r0, fp
 801d770:	002a      	movs	r2, r5
 801d772:	9b07      	ldr	r3, [sp, #28]
 801d774:	9906      	ldr	r1, [sp, #24]
 801d776:	f7e2 ff23 	bl	80005c0 <__aeabi_lmul>
 801d77a:	2280      	movs	r2, #128	@ 0x80
 801d77c:	2300      	movs	r3, #0
 801d77e:	0612      	lsls	r2, r2, #24
 801d780:	1880      	adds	r0, r0, r2
 801d782:	4159      	adcs	r1, r3
 801d784:	2000      	movs	r0, #0
 801d786:	9103      	str	r1, [sp, #12]
 801d788:	9002      	str	r0, [sp, #8]
 801d78a:	4652      	mov	r2, sl
 801d78c:	9b04      	ldr	r3, [sp, #16]
 801d78e:	0020      	movs	r0, r4
 801d790:	9905      	ldr	r1, [sp, #20]
 801d792:	f7e2 ff15 	bl	80005c0 <__aeabi_lmul>
 801d796:	9a02      	ldr	r2, [sp, #8]
 801d798:	9b03      	ldr	r3, [sp, #12]
 801d79a:	1a12      	subs	r2, r2, r0
 801d79c:	418b      	sbcs	r3, r1
 801d79e:	2080      	movs	r0, #128	@ 0x80
 801d7a0:	2100      	movs	r1, #0
 801d7a2:	0600      	lsls	r0, r0, #24
 801d7a4:	1812      	adds	r2, r2, r0
 801d7a6:	414b      	adcs	r3, r1
 801d7a8:	464a      	mov	r2, r9
 801d7aa:	005b      	lsls	r3, r3, #1
 801d7ac:	50b3      	str	r3, [r6, r2]
 801d7ae:	2308      	movs	r3, #8
 801d7b0:	469c      	mov	ip, r3
 801d7b2:	9b08      	ldr	r3, [sp, #32]
 801d7b4:	44e0      	add	r8, ip
 801d7b6:	3708      	adds	r7, #8
 801d7b8:	3608      	adds	r6, #8
 801d7ba:	4598      	cmp	r8, r3
 801d7bc:	d196      	bne.n	801d6ec <arm_cfft_radix4by2_q31+0x3c>
 801d7be:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d7c0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d7c2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d7c4:	2302      	movs	r3, #2
 801d7c6:	003a      	movs	r2, r7
 801d7c8:	0029      	movs	r1, r5
 801d7ca:	0020      	movs	r0, r4
 801d7cc:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801d7ce:	f000 f957 	bl	801da80 <arm_radix4_butterfly_q31>
 801d7d2:	46a4      	mov	ip, r4
 801d7d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d7d6:	2302      	movs	r3, #2
 801d7d8:	0088      	lsls	r0, r1, #2
 801d7da:	4460      	add	r0, ip
 801d7dc:	003a      	movs	r2, r7
 801d7de:	0029      	movs	r1, r5
 801d7e0:	f000 f94e 	bl	801da80 <arm_radix4_butterfly_q31>
 801d7e4:	46a4      	mov	ip, r4
 801d7e6:	0128      	lsls	r0, r5, #4
 801d7e8:	4460      	add	r0, ip
 801d7ea:	6833      	ldr	r3, [r6, #0]
 801d7ec:	005b      	lsls	r3, r3, #1
 801d7ee:	6033      	str	r3, [r6, #0]
 801d7f0:	6873      	ldr	r3, [r6, #4]
 801d7f2:	005b      	lsls	r3, r3, #1
 801d7f4:	6073      	str	r3, [r6, #4]
 801d7f6:	68b3      	ldr	r3, [r6, #8]
 801d7f8:	005b      	lsls	r3, r3, #1
 801d7fa:	60b3      	str	r3, [r6, #8]
 801d7fc:	68f3      	ldr	r3, [r6, #12]
 801d7fe:	005b      	lsls	r3, r3, #1
 801d800:	60f3      	str	r3, [r6, #12]
 801d802:	3610      	adds	r6, #16
 801d804:	42b0      	cmp	r0, r6
 801d806:	d1f0      	bne.n	801d7ea <arm_cfft_radix4by2_q31+0x13a>
 801d808:	b00f      	add	sp, #60	@ 0x3c
 801d80a:	bc3c      	pop	{r2, r3, r4, r5}
 801d80c:	4690      	mov	r8, r2
 801d80e:	4699      	mov	r9, r3
 801d810:	46a2      	mov	sl, r4
 801d812:	46ab      	mov	fp, r5
 801d814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d816:	2302      	movs	r3, #2
 801d818:	2100      	movs	r1, #0
 801d81a:	0015      	movs	r5, r2
 801d81c:	f000 f930 	bl	801da80 <arm_radix4_butterfly_q31>
 801d820:	46bc      	mov	ip, r7
 801d822:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d824:	002a      	movs	r2, r5
 801d826:	0098      	lsls	r0, r3, #2
 801d828:	4460      	add	r0, ip
 801d82a:	2302      	movs	r3, #2
 801d82c:	2100      	movs	r1, #0
 801d82e:	f000 f927 	bl	801da80 <arm_radix4_butterfly_q31>
 801d832:	e7e9      	b.n	801d808 <arm_cfft_radix4by2_q31+0x158>

0801d834 <arm_cfft_radix4by2_inverse_q31>:
 801d834:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d836:	465f      	mov	r7, fp
 801d838:	4656      	mov	r6, sl
 801d83a:	464d      	mov	r5, r9
 801d83c:	4644      	mov	r4, r8
 801d83e:	000b      	movs	r3, r1
 801d840:	b4f0      	push	{r4, r5, r6, r7}
 801d842:	085b      	lsrs	r3, r3, #1
 801d844:	b08f      	sub	sp, #60	@ 0x3c
 801d846:	910a      	str	r1, [sp, #40]	@ 0x28
 801d848:	0007      	movs	r7, r0
 801d84a:	9009      	str	r0, [sp, #36]	@ 0x24
 801d84c:	0011      	movs	r1, r2
 801d84e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d850:	930c      	str	r3, [sp, #48]	@ 0x30
 801d852:	2b00      	cmp	r3, #0
 801d854:	d100      	bne.n	801d858 <arm_cfft_radix4by2_inverse_q31+0x24>
 801d856:	e0a0      	b.n	801d99a <arm_cfft_radix4by2_inverse_q31+0x166>
 801d858:	0002      	movs	r2, r0
 801d85a:	00db      	lsls	r3, r3, #3
 801d85c:	3204      	adds	r2, #4
 801d85e:	4691      	mov	r9, r2
 801d860:	4698      	mov	r8, r3
 801d862:	000a      	movs	r2, r1
 801d864:	464e      	mov	r6, r9
 801d866:	4442      	add	r2, r8
 801d868:	4699      	mov	r9, r3
 801d86a:	4688      	mov	r8, r1
 801d86c:	9208      	str	r2, [sp, #32]
 801d86e:	900d      	str	r0, [sp, #52]	@ 0x34
 801d870:	4643      	mov	r3, r8
 801d872:	681b      	ldr	r3, [r3, #0]
 801d874:	469b      	mov	fp, r3
 801d876:	4643      	mov	r3, r8
 801d878:	685b      	ldr	r3, [r3, #4]
 801d87a:	469a      	mov	sl, r3
 801d87c:	683b      	ldr	r3, [r7, #0]
 801d87e:	109c      	asrs	r4, r3, #2
 801d880:	464b      	mov	r3, r9
 801d882:	58fb      	ldr	r3, [r7, r3]
 801d884:	109a      	asrs	r2, r3, #2
 801d886:	18a3      	adds	r3, r4, r2
 801d888:	603b      	str	r3, [r7, #0]
 801d88a:	6833      	ldr	r3, [r6, #0]
 801d88c:	1aa4      	subs	r4, r4, r2
 801d88e:	109d      	asrs	r5, r3, #2
 801d890:	464b      	mov	r3, r9
 801d892:	58f3      	ldr	r3, [r6, r3]
 801d894:	17e2      	asrs	r2, r4, #31
 801d896:	109b      	asrs	r3, r3, #2
 801d898:	18e9      	adds	r1, r5, r3
 801d89a:	6031      	str	r1, [r6, #0]
 801d89c:	0011      	movs	r1, r2
 801d89e:	465a      	mov	r2, fp
 801d8a0:	17d2      	asrs	r2, r2, #31
 801d8a2:	0010      	movs	r0, r2
 801d8a4:	4652      	mov	r2, sl
 801d8a6:	1aed      	subs	r5, r5, r3
 801d8a8:	17eb      	asrs	r3, r5, #31
 801d8aa:	17d2      	asrs	r2, r2, #31
 801d8ac:	9307      	str	r3, [sp, #28]
 801d8ae:	9204      	str	r2, [sp, #16]
 801d8b0:	0003      	movs	r3, r0
 801d8b2:	465a      	mov	r2, fp
 801d8b4:	9006      	str	r0, [sp, #24]
 801d8b6:	0020      	movs	r0, r4
 801d8b8:	9105      	str	r1, [sp, #20]
 801d8ba:	f7e2 fe81 	bl	80005c0 <__aeabi_lmul>
 801d8be:	2280      	movs	r2, #128	@ 0x80
 801d8c0:	2300      	movs	r3, #0
 801d8c2:	0612      	lsls	r2, r2, #24
 801d8c4:	1880      	adds	r0, r0, r2
 801d8c6:	4159      	adcs	r1, r3
 801d8c8:	2300      	movs	r3, #0
 801d8ca:	9101      	str	r1, [sp, #4]
 801d8cc:	9300      	str	r3, [sp, #0]
 801d8ce:	4652      	mov	r2, sl
 801d8d0:	9b04      	ldr	r3, [sp, #16]
 801d8d2:	0028      	movs	r0, r5
 801d8d4:	17e9      	asrs	r1, r5, #31
 801d8d6:	f7e2 fe73 	bl	80005c0 <__aeabi_lmul>
 801d8da:	9a00      	ldr	r2, [sp, #0]
 801d8dc:	9b01      	ldr	r3, [sp, #4]
 801d8de:	1a12      	subs	r2, r2, r0
 801d8e0:	418b      	sbcs	r3, r1
 801d8e2:	2080      	movs	r0, #128	@ 0x80
 801d8e4:	2100      	movs	r1, #0
 801d8e6:	0600      	lsls	r0, r0, #24
 801d8e8:	1812      	adds	r2, r2, r0
 801d8ea:	414b      	adcs	r3, r1
 801d8ec:	464a      	mov	r2, r9
 801d8ee:	005b      	lsls	r3, r3, #1
 801d8f0:	50bb      	str	r3, [r7, r2]
 801d8f2:	4658      	mov	r0, fp
 801d8f4:	002a      	movs	r2, r5
 801d8f6:	9b07      	ldr	r3, [sp, #28]
 801d8f8:	9906      	ldr	r1, [sp, #24]
 801d8fa:	f7e2 fe61 	bl	80005c0 <__aeabi_lmul>
 801d8fe:	2280      	movs	r2, #128	@ 0x80
 801d900:	2300      	movs	r3, #0
 801d902:	0612      	lsls	r2, r2, #24
 801d904:	1880      	adds	r0, r0, r2
 801d906:	4159      	adcs	r1, r3
 801d908:	2000      	movs	r0, #0
 801d90a:	9103      	str	r1, [sp, #12]
 801d90c:	9002      	str	r0, [sp, #8]
 801d90e:	4652      	mov	r2, sl
 801d910:	9b04      	ldr	r3, [sp, #16]
 801d912:	0020      	movs	r0, r4
 801d914:	9905      	ldr	r1, [sp, #20]
 801d916:	f7e2 fe53 	bl	80005c0 <__aeabi_lmul>
 801d91a:	9b02      	ldr	r3, [sp, #8]
 801d91c:	9c03      	ldr	r4, [sp, #12]
 801d91e:	18c0      	adds	r0, r0, r3
 801d920:	4161      	adcs	r1, r4
 801d922:	2380      	movs	r3, #128	@ 0x80
 801d924:	2400      	movs	r4, #0
 801d926:	061b      	lsls	r3, r3, #24
 801d928:	18c0      	adds	r0, r0, r3
 801d92a:	4161      	adcs	r1, r4
 801d92c:	464a      	mov	r2, r9
 801d92e:	004b      	lsls	r3, r1, #1
 801d930:	50b3      	str	r3, [r6, r2]
 801d932:	2308      	movs	r3, #8
 801d934:	469c      	mov	ip, r3
 801d936:	9b08      	ldr	r3, [sp, #32]
 801d938:	44e0      	add	r8, ip
 801d93a:	3708      	adds	r7, #8
 801d93c:	3608      	adds	r6, #8
 801d93e:	4598      	cmp	r8, r3
 801d940:	d196      	bne.n	801d870 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801d942:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801d944:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d946:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d948:	2302      	movs	r3, #2
 801d94a:	003a      	movs	r2, r7
 801d94c:	0029      	movs	r1, r5
 801d94e:	0020      	movs	r0, r4
 801d950:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801d952:	f000 fb3b 	bl	801dfcc <arm_radix4_butterfly_inverse_q31>
 801d956:	46a4      	mov	ip, r4
 801d958:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d95a:	2302      	movs	r3, #2
 801d95c:	0088      	lsls	r0, r1, #2
 801d95e:	4460      	add	r0, ip
 801d960:	003a      	movs	r2, r7
 801d962:	0029      	movs	r1, r5
 801d964:	f000 fb32 	bl	801dfcc <arm_radix4_butterfly_inverse_q31>
 801d968:	46a4      	mov	ip, r4
 801d96a:	0128      	lsls	r0, r5, #4
 801d96c:	4460      	add	r0, ip
 801d96e:	6833      	ldr	r3, [r6, #0]
 801d970:	005b      	lsls	r3, r3, #1
 801d972:	6033      	str	r3, [r6, #0]
 801d974:	6873      	ldr	r3, [r6, #4]
 801d976:	005b      	lsls	r3, r3, #1
 801d978:	6073      	str	r3, [r6, #4]
 801d97a:	68b3      	ldr	r3, [r6, #8]
 801d97c:	005b      	lsls	r3, r3, #1
 801d97e:	60b3      	str	r3, [r6, #8]
 801d980:	68f3      	ldr	r3, [r6, #12]
 801d982:	005b      	lsls	r3, r3, #1
 801d984:	60f3      	str	r3, [r6, #12]
 801d986:	3610      	adds	r6, #16
 801d988:	42b0      	cmp	r0, r6
 801d98a:	d1f0      	bne.n	801d96e <arm_cfft_radix4by2_inverse_q31+0x13a>
 801d98c:	b00f      	add	sp, #60	@ 0x3c
 801d98e:	bc3c      	pop	{r2, r3, r4, r5}
 801d990:	4690      	mov	r8, r2
 801d992:	4699      	mov	r9, r3
 801d994:	46a2      	mov	sl, r4
 801d996:	46ab      	mov	fp, r5
 801d998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d99a:	2302      	movs	r3, #2
 801d99c:	2100      	movs	r1, #0
 801d99e:	0015      	movs	r5, r2
 801d9a0:	f000 fb14 	bl	801dfcc <arm_radix4_butterfly_inverse_q31>
 801d9a4:	46bc      	mov	ip, r7
 801d9a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d9a8:	002a      	movs	r2, r5
 801d9aa:	0098      	lsls	r0, r3, #2
 801d9ac:	4460      	add	r0, ip
 801d9ae:	2302      	movs	r3, #2
 801d9b0:	2100      	movs	r1, #0
 801d9b2:	f000 fb0b 	bl	801dfcc <arm_radix4_butterfly_inverse_q31>
 801d9b6:	e7e9      	b.n	801d98c <arm_cfft_radix4by2_inverse_q31+0x158>

0801d9b8 <arm_cfft_q31>:
 801d9b8:	b570      	push	{r4, r5, r6, lr}
 801d9ba:	001e      	movs	r6, r3
 801d9bc:	2380      	movs	r3, #128	@ 0x80
 801d9be:	000d      	movs	r5, r1
 801d9c0:	0004      	movs	r4, r0
 801d9c2:	8801      	ldrh	r1, [r0, #0]
 801d9c4:	005b      	lsls	r3, r3, #1
 801d9c6:	2a01      	cmp	r2, #1
 801d9c8:	d028      	beq.n	801da1c <arm_cfft_q31+0x64>
 801d9ca:	4299      	cmp	r1, r3
 801d9cc:	d020      	beq.n	801da10 <arm_cfft_q31+0x58>
 801d9ce:	d812      	bhi.n	801d9f6 <arm_cfft_q31+0x3e>
 801d9d0:	2920      	cmp	r1, #32
 801d9d2:	d004      	beq.n	801d9de <arm_cfft_q31+0x26>
 801d9d4:	d949      	bls.n	801da6a <arm_cfft_q31+0xb2>
 801d9d6:	2940      	cmp	r1, #64	@ 0x40
 801d9d8:	d01a      	beq.n	801da10 <arm_cfft_q31+0x58>
 801d9da:	2980      	cmp	r1, #128	@ 0x80
 801d9dc:	d103      	bne.n	801d9e6 <arm_cfft_q31+0x2e>
 801d9de:	6862      	ldr	r2, [r4, #4]
 801d9e0:	0028      	movs	r0, r5
 801d9e2:	f7ff fe65 	bl	801d6b0 <arm_cfft_radix4by2_q31>
 801d9e6:	2e00      	cmp	r6, #0
 801d9e8:	d004      	beq.n	801d9f4 <arm_cfft_q31+0x3c>
 801d9ea:	68a2      	ldr	r2, [r4, #8]
 801d9ec:	89a1      	ldrh	r1, [r4, #12]
 801d9ee:	0028      	movs	r0, r5
 801d9f0:	f7e2 fb8a 	bl	8000108 <arm_bitreversal_32>
 801d9f4:	bd70      	pop	{r4, r5, r6, pc}
 801d9f6:	2380      	movs	r3, #128	@ 0x80
 801d9f8:	00db      	lsls	r3, r3, #3
 801d9fa:	4299      	cmp	r1, r3
 801d9fc:	d008      	beq.n	801da10 <arm_cfft_q31+0x58>
 801d9fe:	d92f      	bls.n	801da60 <arm_cfft_q31+0xa8>
 801da00:	2380      	movs	r3, #128	@ 0x80
 801da02:	011b      	lsls	r3, r3, #4
 801da04:	4299      	cmp	r1, r3
 801da06:	d0ea      	beq.n	801d9de <arm_cfft_q31+0x26>
 801da08:	2380      	movs	r3, #128	@ 0x80
 801da0a:	015b      	lsls	r3, r3, #5
 801da0c:	4299      	cmp	r1, r3
 801da0e:	d1ea      	bne.n	801d9e6 <arm_cfft_q31+0x2e>
 801da10:	2301      	movs	r3, #1
 801da12:	6862      	ldr	r2, [r4, #4]
 801da14:	0028      	movs	r0, r5
 801da16:	f000 f833 	bl	801da80 <arm_radix4_butterfly_q31>
 801da1a:	e7e4      	b.n	801d9e6 <arm_cfft_q31+0x2e>
 801da1c:	4299      	cmp	r1, r3
 801da1e:	d019      	beq.n	801da54 <arm_cfft_q31+0x9c>
 801da20:	d80b      	bhi.n	801da3a <arm_cfft_q31+0x82>
 801da22:	2920      	cmp	r1, #32
 801da24:	d004      	beq.n	801da30 <arm_cfft_q31+0x78>
 801da26:	d928      	bls.n	801da7a <arm_cfft_q31+0xc2>
 801da28:	2940      	cmp	r1, #64	@ 0x40
 801da2a:	d013      	beq.n	801da54 <arm_cfft_q31+0x9c>
 801da2c:	2980      	cmp	r1, #128	@ 0x80
 801da2e:	d1da      	bne.n	801d9e6 <arm_cfft_q31+0x2e>
 801da30:	6862      	ldr	r2, [r4, #4]
 801da32:	0028      	movs	r0, r5
 801da34:	f7ff fefe 	bl	801d834 <arm_cfft_radix4by2_inverse_q31>
 801da38:	e7d5      	b.n	801d9e6 <arm_cfft_q31+0x2e>
 801da3a:	2380      	movs	r3, #128	@ 0x80
 801da3c:	00db      	lsls	r3, r3, #3
 801da3e:	4299      	cmp	r1, r3
 801da40:	d008      	beq.n	801da54 <arm_cfft_q31+0x9c>
 801da42:	d915      	bls.n	801da70 <arm_cfft_q31+0xb8>
 801da44:	2380      	movs	r3, #128	@ 0x80
 801da46:	011b      	lsls	r3, r3, #4
 801da48:	4299      	cmp	r1, r3
 801da4a:	d0f1      	beq.n	801da30 <arm_cfft_q31+0x78>
 801da4c:	2380      	movs	r3, #128	@ 0x80
 801da4e:	015b      	lsls	r3, r3, #5
 801da50:	4299      	cmp	r1, r3
 801da52:	d1c8      	bne.n	801d9e6 <arm_cfft_q31+0x2e>
 801da54:	2301      	movs	r3, #1
 801da56:	6862      	ldr	r2, [r4, #4]
 801da58:	0028      	movs	r0, r5
 801da5a:	f000 fab7 	bl	801dfcc <arm_radix4_butterfly_inverse_q31>
 801da5e:	e7c2      	b.n	801d9e6 <arm_cfft_q31+0x2e>
 801da60:	2380      	movs	r3, #128	@ 0x80
 801da62:	009b      	lsls	r3, r3, #2
 801da64:	4299      	cmp	r1, r3
 801da66:	d0ba      	beq.n	801d9de <arm_cfft_q31+0x26>
 801da68:	e7bd      	b.n	801d9e6 <arm_cfft_q31+0x2e>
 801da6a:	2910      	cmp	r1, #16
 801da6c:	d1bb      	bne.n	801d9e6 <arm_cfft_q31+0x2e>
 801da6e:	e7cf      	b.n	801da10 <arm_cfft_q31+0x58>
 801da70:	2380      	movs	r3, #128	@ 0x80
 801da72:	009b      	lsls	r3, r3, #2
 801da74:	4299      	cmp	r1, r3
 801da76:	d0db      	beq.n	801da30 <arm_cfft_q31+0x78>
 801da78:	e7b5      	b.n	801d9e6 <arm_cfft_q31+0x2e>
 801da7a:	2910      	cmp	r1, #16
 801da7c:	d1b3      	bne.n	801d9e6 <arm_cfft_q31+0x2e>
 801da7e:	e7e9      	b.n	801da54 <arm_cfft_q31+0x9c>

0801da80 <arm_radix4_butterfly_q31>:
 801da80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da82:	464d      	mov	r5, r9
 801da84:	4644      	mov	r4, r8
 801da86:	465f      	mov	r7, fp
 801da88:	4656      	mov	r6, sl
 801da8a:	469c      	mov	ip, r3
 801da8c:	b4f0      	push	{r4, r5, r6, r7}
 801da8e:	b0a7      	sub	sp, #156	@ 0x9c
 801da90:	9114      	str	r1, [sp, #80]	@ 0x50
 801da92:	0889      	lsrs	r1, r1, #2
 801da94:	9310      	str	r3, [sp, #64]	@ 0x40
 801da96:	00cb      	lsls	r3, r1, #3
 801da98:	0015      	movs	r5, r2
 801da9a:	9223      	str	r2, [sp, #140]	@ 0x8c
 801da9c:	18c2      	adds	r2, r0, r3
 801da9e:	000c      	movs	r4, r1
 801daa0:	469a      	mov	sl, r3
 801daa2:	9124      	str	r1, [sp, #144]	@ 0x90
 801daa4:	18d1      	adds	r1, r2, r3
 801daa6:	4663      	mov	r3, ip
 801daa8:	468b      	mov	fp, r1
 801daaa:	0119      	lsls	r1, r3, #4
 801daac:	910d      	str	r1, [sp, #52]	@ 0x34
 801daae:	00d9      	lsls	r1, r3, #3
 801dab0:	005b      	lsls	r3, r3, #1
 801dab2:	4463      	add	r3, ip
 801dab4:	910e      	str	r1, [sp, #56]	@ 0x38
 801dab6:	00d9      	lsls	r1, r3, #3
 801dab8:	465b      	mov	r3, fp
 801daba:	44da      	add	sl, fp
 801dabc:	4690      	mov	r8, r2
 801dabe:	4683      	mov	fp, r0
 801dac0:	4699      	mov	r9, r3
 801dac2:	9022      	str	r0, [sp, #136]	@ 0x88
 801dac4:	9025      	str	r0, [sp, #148]	@ 0x94
 801dac6:	910f      	str	r1, [sp, #60]	@ 0x3c
 801dac8:	9502      	str	r5, [sp, #8]
 801daca:	9500      	str	r5, [sp, #0]
 801dacc:	9501      	str	r5, [sp, #4]
 801dace:	9407      	str	r4, [sp, #28]
 801dad0:	465b      	mov	r3, fp
 801dad2:	681b      	ldr	r3, [r3, #0]
 801dad4:	4642      	mov	r2, r8
 801dad6:	111c      	asrs	r4, r3, #4
 801dad8:	464b      	mov	r3, r9
 801dada:	4658      	mov	r0, fp
 801dadc:	681b      	ldr	r3, [r3, #0]
 801dade:	6812      	ldr	r2, [r2, #0]
 801dae0:	111b      	asrs	r3, r3, #4
 801dae2:	18e7      	adds	r7, r4, r3
 801dae4:	1ae3      	subs	r3, r4, r3
 801dae6:	1114      	asrs	r4, r2, #4
 801dae8:	4652      	mov	r2, sl
 801daea:	6840      	ldr	r0, [r0, #4]
 801daec:	6812      	ldr	r2, [r2, #0]
 801daee:	1105      	asrs	r5, r0, #4
 801daf0:	4648      	mov	r0, r9
 801daf2:	9303      	str	r3, [sp, #12]
 801daf4:	1113      	asrs	r3, r2, #4
 801daf6:	18e2      	adds	r2, r4, r3
 801daf8:	465c      	mov	r4, fp
 801dafa:	6840      	ldr	r0, [r0, #4]
 801dafc:	1103      	asrs	r3, r0, #4
 801dafe:	18ee      	adds	r6, r5, r3
 801db00:	1ae8      	subs	r0, r5, r3
 801db02:	18bb      	adds	r3, r7, r2
 801db04:	6023      	str	r3, [r4, #0]
 801db06:	4644      	mov	r4, r8
 801db08:	6864      	ldr	r4, [r4, #4]
 801db0a:	9004      	str	r0, [sp, #16]
 801db0c:	1125      	asrs	r5, r4, #4
 801db0e:	4654      	mov	r4, sl
 801db10:	6864      	ldr	r4, [r4, #4]
 801db12:	1123      	asrs	r3, r4, #4
 801db14:	465c      	mov	r4, fp
 801db16:	18eb      	adds	r3, r5, r3
 801db18:	18f1      	adds	r1, r6, r3
 801db1a:	6061      	str	r1, [r4, #4]
 801db1c:	4655      	mov	r5, sl
 801db1e:	4644      	mov	r4, r8
 801db20:	686d      	ldr	r5, [r5, #4]
 801db22:	6864      	ldr	r4, [r4, #4]
 801db24:	1129      	asrs	r1, r5, #4
 801db26:	1124      	asrs	r4, r4, #4
 801db28:	1a64      	subs	r4, r4, r1
 801db2a:	4641      	mov	r1, r8
 801db2c:	6809      	ldr	r1, [r1, #0]
 801db2e:	9405      	str	r4, [sp, #20]
 801db30:	1108      	asrs	r0, r1, #4
 801db32:	4651      	mov	r1, sl
 801db34:	6809      	ldr	r1, [r1, #0]
 801db36:	1abc      	subs	r4, r7, r2
 801db38:	1109      	asrs	r1, r1, #4
 801db3a:	1a41      	subs	r1, r0, r1
 801db3c:	17e2      	asrs	r2, r4, #31
 801db3e:	9106      	str	r1, [sp, #24]
 801db40:	0011      	movs	r1, r2
 801db42:	9a01      	ldr	r2, [sp, #4]
 801db44:	9108      	str	r1, [sp, #32]
 801db46:	6817      	ldr	r7, [r2, #0]
 801db48:	17fd      	asrs	r5, r7, #31
 801db4a:	0028      	movs	r0, r5
 801db4c:	1af5      	subs	r5, r6, r3
 801db4e:	17ee      	asrs	r6, r5, #31
 801db50:	960a      	str	r6, [sp, #40]	@ 0x28
 801db52:	6856      	ldr	r6, [r2, #4]
 801db54:	9009      	str	r0, [sp, #36]	@ 0x24
 801db56:	17f3      	asrs	r3, r6, #31
 801db58:	003a      	movs	r2, r7
 801db5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801db5c:	0003      	movs	r3, r0
 801db5e:	0020      	movs	r0, r4
 801db60:	f7e2 fd2e 	bl	80005c0 <__aeabi_lmul>
 801db64:	0032      	movs	r2, r6
 801db66:	17f3      	asrs	r3, r6, #31
 801db68:	910c      	str	r1, [sp, #48]	@ 0x30
 801db6a:	0028      	movs	r0, r5
 801db6c:	17e9      	asrs	r1, r5, #31
 801db6e:	f7e2 fd27 	bl	80005c0 <__aeabi_lmul>
 801db72:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801db74:	002a      	movs	r2, r5
 801db76:	4684      	mov	ip, r0
 801db78:	4640      	mov	r0, r8
 801db7a:	4461      	add	r1, ip
 801db7c:	0049      	lsls	r1, r1, #1
 801db7e:	6001      	str	r1, [r0, #0]
 801db80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801db82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801db84:	0038      	movs	r0, r7
 801db86:	f7e2 fd1b 	bl	80005c0 <__aeabi_lmul>
 801db8a:	0032      	movs	r2, r6
 801db8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801db8e:	000d      	movs	r5, r1
 801db90:	0020      	movs	r0, r4
 801db92:	9908      	ldr	r1, [sp, #32]
 801db94:	f7e2 fd14 	bl	80005c0 <__aeabi_lmul>
 801db98:	4646      	mov	r6, r8
 801db9a:	1a6d      	subs	r5, r5, r1
 801db9c:	006d      	lsls	r5, r5, #1
 801db9e:	6075      	str	r5, [r6, #4]
 801dba0:	9903      	ldr	r1, [sp, #12]
 801dba2:	9d05      	ldr	r5, [sp, #20]
 801dba4:	000c      	movs	r4, r1
 801dba6:	46ac      	mov	ip, r5
 801dba8:	4464      	add	r4, ip
 801dbaa:	17e6      	asrs	r6, r4, #31
 801dbac:	0031      	movs	r1, r6
 801dbae:	9b00      	ldr	r3, [sp, #0]
 801dbb0:	9804      	ldr	r0, [sp, #16]
 801dbb2:	681e      	ldr	r6, [r3, #0]
 801dbb4:	17f7      	asrs	r7, r6, #31
 801dbb6:	9709      	str	r7, [sp, #36]	@ 0x24
 801dbb8:	9f06      	ldr	r7, [sp, #24]
 801dbba:	0032      	movs	r2, r6
 801dbbc:	1bc7      	subs	r7, r0, r7
 801dbbe:	17fd      	asrs	r5, r7, #31
 801dbc0:	950a      	str	r5, [sp, #40]	@ 0x28
 801dbc2:	685d      	ldr	r5, [r3, #4]
 801dbc4:	17f3      	asrs	r3, r6, #31
 801dbc6:	17e8      	asrs	r0, r5, #31
 801dbc8:	900b      	str	r0, [sp, #44]	@ 0x2c
 801dbca:	0020      	movs	r0, r4
 801dbcc:	9108      	str	r1, [sp, #32]
 801dbce:	f7e2 fcf7 	bl	80005c0 <__aeabi_lmul>
 801dbd2:	002a      	movs	r2, r5
 801dbd4:	17eb      	asrs	r3, r5, #31
 801dbd6:	910c      	str	r1, [sp, #48]	@ 0x30
 801dbd8:	0038      	movs	r0, r7
 801dbda:	17f9      	asrs	r1, r7, #31
 801dbdc:	f7e2 fcf0 	bl	80005c0 <__aeabi_lmul>
 801dbe0:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801dbe2:	003a      	movs	r2, r7
 801dbe4:	4684      	mov	ip, r0
 801dbe6:	4648      	mov	r0, r9
 801dbe8:	4461      	add	r1, ip
 801dbea:	0049      	lsls	r1, r1, #1
 801dbec:	6001      	str	r1, [r0, #0]
 801dbee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dbf0:	0030      	movs	r0, r6
 801dbf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dbf4:	f7e2 fce4 	bl	80005c0 <__aeabi_lmul>
 801dbf8:	002a      	movs	r2, r5
 801dbfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801dbfc:	000e      	movs	r6, r1
 801dbfe:	0020      	movs	r0, r4
 801dc00:	9908      	ldr	r1, [sp, #32]
 801dc02:	f7e2 fcdd 	bl	80005c0 <__aeabi_lmul>
 801dc06:	464c      	mov	r4, r9
 801dc08:	9d05      	ldr	r5, [sp, #20]
 801dc0a:	1a76      	subs	r6, r6, r1
 801dc0c:	9903      	ldr	r1, [sp, #12]
 801dc0e:	0076      	lsls	r6, r6, #1
 801dc10:	6066      	str	r6, [r4, #4]
 801dc12:	1b4c      	subs	r4, r1, r5
 801dc14:	9e06      	ldr	r6, [sp, #24]
 801dc16:	17e1      	asrs	r1, r4, #31
 801dc18:	9103      	str	r1, [sp, #12]
 801dc1a:	9902      	ldr	r1, [sp, #8]
 801dc1c:	46b4      	mov	ip, r6
 801dc1e:	680f      	ldr	r7, [r1, #0]
 801dc20:	9804      	ldr	r0, [sp, #16]
 801dc22:	17fd      	asrs	r5, r7, #31
 801dc24:	002b      	movs	r3, r5
 801dc26:	684e      	ldr	r6, [r1, #4]
 801dc28:	4460      	add	r0, ip
 801dc2a:	0005      	movs	r5, r0
 801dc2c:	17c0      	asrs	r0, r0, #31
 801dc2e:	9005      	str	r0, [sp, #20]
 801dc30:	17f0      	asrs	r0, r6, #31
 801dc32:	9006      	str	r0, [sp, #24]
 801dc34:	003a      	movs	r2, r7
 801dc36:	0020      	movs	r0, r4
 801dc38:	17e1      	asrs	r1, r4, #31
 801dc3a:	9304      	str	r3, [sp, #16]
 801dc3c:	f7e2 fcc0 	bl	80005c0 <__aeabi_lmul>
 801dc40:	0032      	movs	r2, r6
 801dc42:	9108      	str	r1, [sp, #32]
 801dc44:	17f3      	asrs	r3, r6, #31
 801dc46:	0028      	movs	r0, r5
 801dc48:	17e9      	asrs	r1, r5, #31
 801dc4a:	f7e2 fcb9 	bl	80005c0 <__aeabi_lmul>
 801dc4e:	9808      	ldr	r0, [sp, #32]
 801dc50:	002a      	movs	r2, r5
 801dc52:	4684      	mov	ip, r0
 801dc54:	4650      	mov	r0, sl
 801dc56:	4461      	add	r1, ip
 801dc58:	0049      	lsls	r1, r1, #1
 801dc5a:	6001      	str	r1, [r0, #0]
 801dc5c:	9b05      	ldr	r3, [sp, #20]
 801dc5e:	9904      	ldr	r1, [sp, #16]
 801dc60:	0038      	movs	r0, r7
 801dc62:	f7e2 fcad 	bl	80005c0 <__aeabi_lmul>
 801dc66:	0020      	movs	r0, r4
 801dc68:	2408      	movs	r4, #8
 801dc6a:	000d      	movs	r5, r1
 801dc6c:	0032      	movs	r2, r6
 801dc6e:	9b06      	ldr	r3, [sp, #24]
 801dc70:	9903      	ldr	r1, [sp, #12]
 801dc72:	f7e2 fca5 	bl	80005c0 <__aeabi_lmul>
 801dc76:	46a4      	mov	ip, r4
 801dc78:	4650      	mov	r0, sl
 801dc7a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801dc7c:	44e3      	add	fp, ip
 801dc7e:	44e0      	add	r8, ip
 801dc80:	44e1      	add	r9, ip
 801dc82:	44e2      	add	sl, ip
 801dc84:	46a4      	mov	ip, r4
 801dc86:	1a6d      	subs	r5, r5, r1
 801dc88:	006d      	lsls	r5, r5, #1
 801dc8a:	9a01      	ldr	r2, [sp, #4]
 801dc8c:	6045      	str	r5, [r0, #4]
 801dc8e:	9807      	ldr	r0, [sp, #28]
 801dc90:	4462      	add	r2, ip
 801dc92:	3801      	subs	r0, #1
 801dc94:	9201      	str	r2, [sp, #4]
 801dc96:	9007      	str	r0, [sp, #28]
 801dc98:	9b00      	ldr	r3, [sp, #0]
 801dc9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dc9c:	9902      	ldr	r1, [sp, #8]
 801dc9e:	4694      	mov	ip, r2
 801dca0:	4463      	add	r3, ip
 801dca2:	9300      	str	r3, [sp, #0]
 801dca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dca6:	469c      	mov	ip, r3
 801dca8:	4461      	add	r1, ip
 801dcaa:	9102      	str	r1, [sp, #8]
 801dcac:	2800      	cmp	r0, #0
 801dcae:	d000      	beq.n	801dcb2 <arm_radix4_butterfly_q31+0x232>
 801dcb0:	e70e      	b.n	801dad0 <arm_radix4_butterfly_q31+0x50>
 801dcb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dcb4:	009b      	lsls	r3, r3, #2
 801dcb6:	931f      	str	r3, [sp, #124]	@ 0x7c
 801dcb8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dcba:	9320      	str	r3, [sp, #128]	@ 0x80
 801dcbc:	9313      	str	r3, [sp, #76]	@ 0x4c
 801dcbe:	2b04      	cmp	r3, #4
 801dcc0:	d800      	bhi.n	801dcc4 <arm_radix4_butterfly_q31+0x244>
 801dcc2:	e180      	b.n	801dfc6 <arm_radix4_butterfly_q31+0x546>
 801dcc4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dcc6:	0893      	lsrs	r3, r2, #2
 801dcc8:	1e59      	subs	r1, r3, #1
 801dcca:	9321      	str	r3, [sp, #132]	@ 0x84
 801dccc:	00db      	lsls	r3, r3, #3
 801dcce:	931b      	str	r3, [sp, #108]	@ 0x6c
 801dcd0:	00d3      	lsls	r3, r2, #3
 801dcd2:	9300      	str	r3, [sp, #0]
 801dcd4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801dcd6:	911a      	str	r1, [sp, #104]	@ 0x68
 801dcd8:	00da      	lsls	r2, r3, #3
 801dcda:	921e      	str	r2, [sp, #120]	@ 0x78
 801dcdc:	011a      	lsls	r2, r3, #4
 801dcde:	921d      	str	r2, [sp, #116]	@ 0x74
 801dce0:	001a      	movs	r2, r3
 801dce2:	4694      	mov	ip, r2
 801dce4:	005b      	lsls	r3, r3, #1
 801dce6:	4463      	add	r3, ip
 801dce8:	00db      	lsls	r3, r3, #3
 801dcea:	931c      	str	r3, [sp, #112]	@ 0x70
 801dcec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801dcee:	9317      	str	r3, [sp, #92]	@ 0x5c
 801dcf0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801dcf2:	9318      	str	r3, [sp, #96]	@ 0x60
 801dcf4:	9319      	str	r3, [sp, #100]	@ 0x64
 801dcf6:	9316      	str	r3, [sp, #88]	@ 0x58
 801dcf8:	2300      	movs	r3, #0
 801dcfa:	9315      	str	r3, [sp, #84]	@ 0x54
 801dcfc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dcfe:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801dd00:	681a      	ldr	r2, [r3, #0]
 801dd02:	685b      	ldr	r3, [r3, #4]
 801dd04:	9205      	str	r2, [sp, #20]
 801dd06:	9306      	str	r3, [sp, #24]
 801dd08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801dd0a:	468c      	mov	ip, r1
 801dd0c:	681a      	ldr	r2, [r3, #0]
 801dd0e:	685b      	ldr	r3, [r3, #4]
 801dd10:	9207      	str	r2, [sp, #28]
 801dd12:	9308      	str	r3, [sp, #32]
 801dd14:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801dd16:	681a      	ldr	r2, [r3, #0]
 801dd18:	685b      	ldr	r3, [r3, #4]
 801dd1a:	9209      	str	r2, [sp, #36]	@ 0x24
 801dd1c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801dd1e:	930a      	str	r3, [sp, #40]	@ 0x28
 801dd20:	0013      	movs	r3, r2
 801dd22:	4463      	add	r3, ip
 801dd24:	4698      	mov	r8, r3
 801dd26:	0013      	movs	r3, r2
 801dd28:	4442      	add	r2, r8
 801dd2a:	4691      	mov	r9, r2
 801dd2c:	001a      	movs	r2, r3
 801dd2e:	444a      	add	r2, r9
 801dd30:	4692      	mov	sl, r2
 801dd32:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801dd34:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801dd36:	4293      	cmp	r3, r2
 801dd38:	d800      	bhi.n	801dd3c <arm_radix4_butterfly_q31+0x2bc>
 801dd3a:	e0dd      	b.n	801def8 <arm_radix4_butterfly_q31+0x478>
 801dd3c:	4694      	mov	ip, r2
 801dd3e:	468b      	mov	fp, r1
 801dd40:	4644      	mov	r4, r8
 801dd42:	4655      	mov	r5, sl
 801dd44:	9b07      	ldr	r3, [sp, #28]
 801dd46:	17db      	asrs	r3, r3, #31
 801dd48:	930c      	str	r3, [sp, #48]	@ 0x30
 801dd4a:	9b08      	ldr	r3, [sp, #32]
 801dd4c:	17db      	asrs	r3, r3, #31
 801dd4e:	930d      	str	r3, [sp, #52]	@ 0x34
 801dd50:	9b05      	ldr	r3, [sp, #20]
 801dd52:	17db      	asrs	r3, r3, #31
 801dd54:	930e      	str	r3, [sp, #56]	@ 0x38
 801dd56:	9b06      	ldr	r3, [sp, #24]
 801dd58:	17db      	asrs	r3, r3, #31
 801dd5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dd5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd5e:	17db      	asrs	r3, r3, #31
 801dd60:	9310      	str	r3, [sp, #64]	@ 0x40
 801dd62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dd64:	17db      	asrs	r3, r3, #31
 801dd66:	9311      	str	r3, [sp, #68]	@ 0x44
 801dd68:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dd6a:	4463      	add	r3, ip
 801dd6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dd6e:	465b      	mov	r3, fp
 801dd70:	4659      	mov	r1, fp
 801dd72:	681a      	ldr	r2, [r3, #0]
 801dd74:	464b      	mov	r3, r9
 801dd76:	684f      	ldr	r7, [r1, #4]
 801dd78:	4649      	mov	r1, r9
 801dd7a:	681b      	ldr	r3, [r3, #0]
 801dd7c:	18d6      	adds	r6, r2, r3
 801dd7e:	1ad3      	subs	r3, r2, r3
 801dd80:	9301      	str	r3, [sp, #4]
 801dd82:	684b      	ldr	r3, [r1, #4]
 801dd84:	18f8      	adds	r0, r7, r3
 801dd86:	1af9      	subs	r1, r7, r3
 801dd88:	6827      	ldr	r7, [r4, #0]
 801dd8a:	9102      	str	r1, [sp, #8]
 801dd8c:	003a      	movs	r2, r7
 801dd8e:	682f      	ldr	r7, [r5, #0]
 801dd90:	46bc      	mov	ip, r7
 801dd92:	465f      	mov	r7, fp
 801dd94:	4462      	add	r2, ip
 801dd96:	18b3      	adds	r3, r6, r2
 801dd98:	109b      	asrs	r3, r3, #2
 801dd9a:	603b      	str	r3, [r7, #0]
 801dd9c:	6867      	ldr	r7, [r4, #4]
 801dd9e:	1ab6      	subs	r6, r6, r2
 801dda0:	46b8      	mov	r8, r7
 801dda2:	686f      	ldr	r7, [r5, #4]
 801dda4:	17f2      	asrs	r2, r6, #31
 801dda6:	46bc      	mov	ip, r7
 801dda8:	44e0      	add	r8, ip
 801ddaa:	4643      	mov	r3, r8
 801ddac:	465f      	mov	r7, fp
 801ddae:	18c1      	adds	r1, r0, r3
 801ddb0:	1089      	asrs	r1, r1, #2
 801ddb2:	6079      	str	r1, [r7, #4]
 801ddb4:	9900      	ldr	r1, [sp, #0]
 801ddb6:	4690      	mov	r8, r2
 801ddb8:	468c      	mov	ip, r1
 801ddba:	6867      	ldr	r7, [r4, #4]
 801ddbc:	6869      	ldr	r1, [r5, #4]
 801ddbe:	44e3      	add	fp, ip
 801ddc0:	1a7f      	subs	r7, r7, r1
 801ddc2:	9703      	str	r7, [sp, #12]
 801ddc4:	6829      	ldr	r1, [r5, #0]
 801ddc6:	6827      	ldr	r7, [r4, #0]
 801ddc8:	1a7f      	subs	r7, r7, r1
 801ddca:	9704      	str	r7, [sp, #16]
 801ddcc:	1ac7      	subs	r7, r0, r3
 801ddce:	17fa      	asrs	r2, r7, #31
 801ddd0:	4692      	mov	sl, r2
 801ddd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ddd4:	9a07      	ldr	r2, [sp, #28]
 801ddd6:	0030      	movs	r0, r6
 801ddd8:	4641      	mov	r1, r8
 801ddda:	f7e2 fbf1 	bl	80005c0 <__aeabi_lmul>
 801ddde:	9a08      	ldr	r2, [sp, #32]
 801dde0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dde2:	9112      	str	r1, [sp, #72]	@ 0x48
 801dde4:	0038      	movs	r0, r7
 801dde6:	4651      	mov	r1, sl
 801dde8:	f7e2 fbea 	bl	80005c0 <__aeabi_lmul>
 801ddec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ddee:	9a07      	ldr	r2, [sp, #28]
 801ddf0:	4684      	mov	ip, r0
 801ddf2:	4461      	add	r1, ip
 801ddf4:	1049      	asrs	r1, r1, #1
 801ddf6:	6021      	str	r1, [r4, #0]
 801ddf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ddfa:	0038      	movs	r0, r7
 801ddfc:	4651      	mov	r1, sl
 801ddfe:	f7e2 fbdf 	bl	80005c0 <__aeabi_lmul>
 801de02:	9a08      	ldr	r2, [sp, #32]
 801de04:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801de06:	000f      	movs	r7, r1
 801de08:	0030      	movs	r0, r6
 801de0a:	4641      	mov	r1, r8
 801de0c:	f7e2 fbd8 	bl	80005c0 <__aeabi_lmul>
 801de10:	9b00      	ldr	r3, [sp, #0]
 801de12:	9a01      	ldr	r2, [sp, #4]
 801de14:	469c      	mov	ip, r3
 801de16:	9803      	ldr	r0, [sp, #12]
 801de18:	1a7f      	subs	r7, r7, r1
 801de1a:	107f      	asrs	r7, r7, #1
 801de1c:	6067      	str	r7, [r4, #4]
 801de1e:	0016      	movs	r6, r2
 801de20:	4464      	add	r4, ip
 801de22:	4684      	mov	ip, r0
 801de24:	4466      	add	r6, ip
 801de26:	17f2      	asrs	r2, r6, #31
 801de28:	4690      	mov	r8, r2
 801de2a:	9902      	ldr	r1, [sp, #8]
 801de2c:	9f04      	ldr	r7, [sp, #16]
 801de2e:	0030      	movs	r0, r6
 801de30:	1bcf      	subs	r7, r1, r7
 801de32:	17fa      	asrs	r2, r7, #31
 801de34:	4692      	mov	sl, r2
 801de36:	4641      	mov	r1, r8
 801de38:	9a05      	ldr	r2, [sp, #20]
 801de3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801de3c:	f7e2 fbc0 	bl	80005c0 <__aeabi_lmul>
 801de40:	9a06      	ldr	r2, [sp, #24]
 801de42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801de44:	9112      	str	r1, [sp, #72]	@ 0x48
 801de46:	0038      	movs	r0, r7
 801de48:	4651      	mov	r1, sl
 801de4a:	f7e2 fbb9 	bl	80005c0 <__aeabi_lmul>
 801de4e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801de50:	9a05      	ldr	r2, [sp, #20]
 801de52:	4684      	mov	ip, r0
 801de54:	4648      	mov	r0, r9
 801de56:	4461      	add	r1, ip
 801de58:	1049      	asrs	r1, r1, #1
 801de5a:	6001      	str	r1, [r0, #0]
 801de5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801de5e:	0038      	movs	r0, r7
 801de60:	4651      	mov	r1, sl
 801de62:	f7e2 fbad 	bl	80005c0 <__aeabi_lmul>
 801de66:	9a06      	ldr	r2, [sp, #24]
 801de68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801de6a:	000f      	movs	r7, r1
 801de6c:	0030      	movs	r0, r6
 801de6e:	4641      	mov	r1, r8
 801de70:	f7e2 fba6 	bl	80005c0 <__aeabi_lmul>
 801de74:	464e      	mov	r6, r9
 801de76:	9a00      	ldr	r2, [sp, #0]
 801de78:	9b01      	ldr	r3, [sp, #4]
 801de7a:	4694      	mov	ip, r2
 801de7c:	9803      	ldr	r0, [sp, #12]
 801de7e:	1a7f      	subs	r7, r7, r1
 801de80:	107f      	asrs	r7, r7, #1
 801de82:	6077      	str	r7, [r6, #4]
 801de84:	1a1e      	subs	r6, r3, r0
 801de86:	9b04      	ldr	r3, [sp, #16]
 801de88:	44e1      	add	r9, ip
 801de8a:	469c      	mov	ip, r3
 801de8c:	17f0      	asrs	r0, r6, #31
 801de8e:	4680      	mov	r8, r0
 801de90:	9902      	ldr	r1, [sp, #8]
 801de92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801de94:	4461      	add	r1, ip
 801de96:	17cb      	asrs	r3, r1, #31
 801de98:	000f      	movs	r7, r1
 801de9a:	469a      	mov	sl, r3
 801de9c:	0030      	movs	r0, r6
 801de9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dea0:	4641      	mov	r1, r8
 801dea2:	f7e2 fb8d 	bl	80005c0 <__aeabi_lmul>
 801dea6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dea8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801deaa:	9101      	str	r1, [sp, #4]
 801deac:	0038      	movs	r0, r7
 801deae:	4651      	mov	r1, sl
 801deb0:	f7e2 fb86 	bl	80005c0 <__aeabi_lmul>
 801deb4:	9801      	ldr	r0, [sp, #4]
 801deb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801deb8:	4684      	mov	ip, r0
 801deba:	4461      	add	r1, ip
 801debc:	1049      	asrs	r1, r1, #1
 801debe:	6029      	str	r1, [r5, #0]
 801dec0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801dec2:	0038      	movs	r0, r7
 801dec4:	4651      	mov	r1, sl
 801dec6:	f7e2 fb7b 	bl	80005c0 <__aeabi_lmul>
 801deca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801decc:	000f      	movs	r7, r1
 801dece:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ded0:	0030      	movs	r0, r6
 801ded2:	4641      	mov	r1, r8
 801ded4:	f7e2 fb74 	bl	80005c0 <__aeabi_lmul>
 801ded8:	1a7f      	subs	r7, r7, r1
 801deda:	107f      	asrs	r7, r7, #1
 801dedc:	606f      	str	r7, [r5, #4]
 801dede:	9a00      	ldr	r2, [sp, #0]
 801dee0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801dee2:	4694      	mov	ip, r2
 801dee4:	4465      	add	r5, ip
 801dee6:	468c      	mov	ip, r1
 801dee8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801deea:	0013      	movs	r3, r2
 801deec:	4462      	add	r2, ip
 801deee:	920b      	str	r2, [sp, #44]	@ 0x2c
 801def0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801def2:	429a      	cmp	r2, r3
 801def4:	d900      	bls.n	801def8 <arm_radix4_butterfly_q31+0x478>
 801def6:	e73a      	b.n	801dd6e <arm_radix4_butterfly_q31+0x2ee>
 801def8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801defa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801defc:	468c      	mov	ip, r1
 801defe:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801df00:	4462      	add	r2, ip
 801df02:	468c      	mov	ip, r1
 801df04:	9216      	str	r2, [sp, #88]	@ 0x58
 801df06:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801df08:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801df0a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801df0c:	4462      	add	r2, ip
 801df0e:	468c      	mov	ip, r1
 801df10:	9219      	str	r2, [sp, #100]	@ 0x64
 801df12:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801df14:	3301      	adds	r3, #1
 801df16:	4462      	add	r2, ip
 801df18:	9218      	str	r2, [sp, #96]	@ 0x60
 801df1a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801df1c:	9315      	str	r3, [sp, #84]	@ 0x54
 801df1e:	3208      	adds	r2, #8
 801df20:	9217      	str	r2, [sp, #92]	@ 0x5c
 801df22:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801df24:	4293      	cmp	r3, r2
 801df26:	d800      	bhi.n	801df2a <arm_radix4_butterfly_q31+0x4aa>
 801df28:	e6e8      	b.n	801dcfc <arm_radix4_butterfly_q31+0x27c>
 801df2a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801df2c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801df2e:	009b      	lsls	r3, r3, #2
 801df30:	931f      	str	r3, [sp, #124]	@ 0x7c
 801df32:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801df34:	9213      	str	r2, [sp, #76]	@ 0x4c
 801df36:	089b      	lsrs	r3, r3, #2
 801df38:	9320      	str	r3, [sp, #128]	@ 0x80
 801df3a:	2b04      	cmp	r3, #4
 801df3c:	d900      	bls.n	801df40 <arm_radix4_butterfly_q31+0x4c0>
 801df3e:	e6c1      	b.n	801dcc4 <arm_radix4_butterfly_q31+0x244>
 801df40:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801df42:	469a      	mov	sl, r3
 801df44:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801df46:	691c      	ldr	r4, [r3, #16]
 801df48:	685a      	ldr	r2, [r3, #4]
 801df4a:	46a1      	mov	r9, r4
 801df4c:	4690      	mov	r8, r2
 801df4e:	6819      	ldr	r1, [r3, #0]
 801df50:	689a      	ldr	r2, [r3, #8]
 801df52:	699f      	ldr	r7, [r3, #24]
 801df54:	188d      	adds	r5, r1, r2
 801df56:	444d      	add	r5, r9
 801df58:	19ed      	adds	r5, r5, r7
 801df5a:	69de      	ldr	r6, [r3, #28]
 801df5c:	601d      	str	r5, [r3, #0]
 801df5e:	4645      	mov	r5, r8
 801df60:	46b4      	mov	ip, r6
 801df62:	68d8      	ldr	r0, [r3, #12]
 801df64:	695c      	ldr	r4, [r3, #20]
 801df66:	182d      	adds	r5, r5, r0
 801df68:	192d      	adds	r5, r5, r4
 801df6a:	4465      	add	r5, ip
 801df6c:	605d      	str	r5, [r3, #4]
 801df6e:	1a8d      	subs	r5, r1, r2
 801df70:	444d      	add	r5, r9
 801df72:	1bed      	subs	r5, r5, r7
 801df74:	609d      	str	r5, [r3, #8]
 801df76:	4645      	mov	r5, r8
 801df78:	1a2d      	subs	r5, r5, r0
 801df7a:	192d      	adds	r5, r5, r4
 801df7c:	1bad      	subs	r5, r5, r6
 801df7e:	464e      	mov	r6, r9
 801df80:	60dd      	str	r5, [r3, #12]
 801df82:	180d      	adds	r5, r1, r0
 801df84:	1bad      	subs	r5, r5, r6
 801df86:	4666      	mov	r6, ip
 801df88:	1bad      	subs	r5, r5, r6
 801df8a:	611d      	str	r5, [r3, #16]
 801df8c:	4645      	mov	r5, r8
 801df8e:	1aad      	subs	r5, r5, r2
 801df90:	4442      	add	r2, r8
 801df92:	1b12      	subs	r2, r2, r4
 801df94:	1bd2      	subs	r2, r2, r7
 801df96:	1a08      	subs	r0, r1, r0
 801df98:	61da      	str	r2, [r3, #28]
 801df9a:	4649      	mov	r1, r9
 801df9c:	2201      	movs	r2, #1
 801df9e:	1a41      	subs	r1, r0, r1
 801dfa0:	4252      	negs	r2, r2
 801dfa2:	4461      	add	r1, ip
 801dfa4:	4694      	mov	ip, r2
 801dfa6:	44e2      	add	sl, ip
 801dfa8:	4652      	mov	r2, sl
 801dfaa:	1b2d      	subs	r5, r5, r4
 801dfac:	19ed      	adds	r5, r5, r7
 801dfae:	615d      	str	r5, [r3, #20]
 801dfb0:	6199      	str	r1, [r3, #24]
 801dfb2:	3320      	adds	r3, #32
 801dfb4:	2a00      	cmp	r2, #0
 801dfb6:	d1c6      	bne.n	801df46 <arm_radix4_butterfly_q31+0x4c6>
 801dfb8:	b027      	add	sp, #156	@ 0x9c
 801dfba:	bc3c      	pop	{r2, r3, r4, r5}
 801dfbc:	4690      	mov	r8, r2
 801dfbe:	4699      	mov	r9, r3
 801dfc0:	46a2      	mov	sl, r4
 801dfc2:	46ab      	mov	fp, r5
 801dfc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dfc6:	469a      	mov	sl, r3
 801dfc8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801dfca:	e7bc      	b.n	801df46 <arm_radix4_butterfly_q31+0x4c6>

0801dfcc <arm_radix4_butterfly_inverse_q31>:
 801dfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfce:	464d      	mov	r5, r9
 801dfd0:	4644      	mov	r4, r8
 801dfd2:	465f      	mov	r7, fp
 801dfd4:	4656      	mov	r6, sl
 801dfd6:	b4f0      	push	{r4, r5, r6, r7}
 801dfd8:	b0a7      	sub	sp, #156	@ 0x9c
 801dfda:	469c      	mov	ip, r3
 801dfdc:	9114      	str	r1, [sp, #80]	@ 0x50
 801dfde:	0889      	lsrs	r1, r1, #2
 801dfe0:	9310      	str	r3, [sp, #64]	@ 0x40
 801dfe2:	00cb      	lsls	r3, r1, #3
 801dfe4:	0015      	movs	r5, r2
 801dfe6:	9223      	str	r2, [sp, #140]	@ 0x8c
 801dfe8:	18c2      	adds	r2, r0, r3
 801dfea:	000c      	movs	r4, r1
 801dfec:	9124      	str	r1, [sp, #144]	@ 0x90
 801dfee:	18d1      	adds	r1, r2, r3
 801dff0:	468b      	mov	fp, r1
 801dff2:	469a      	mov	sl, r3
 801dff4:	4663      	mov	r3, ip
 801dff6:	44da      	add	sl, fp
 801dff8:	46d0      	mov	r8, sl
 801dffa:	4681      	mov	r9, r0
 801dffc:	4692      	mov	sl, r2
 801dffe:	0119      	lsls	r1, r3, #4
 801e000:	910d      	str	r1, [sp, #52]	@ 0x34
 801e002:	00d9      	lsls	r1, r3, #3
 801e004:	005b      	lsls	r3, r3, #1
 801e006:	4463      	add	r3, ip
 801e008:	910e      	str	r1, [sp, #56]	@ 0x38
 801e00a:	00d9      	lsls	r1, r3, #3
 801e00c:	9022      	str	r0, [sp, #136]	@ 0x88
 801e00e:	9025      	str	r0, [sp, #148]	@ 0x94
 801e010:	910f      	str	r1, [sp, #60]	@ 0x3c
 801e012:	9502      	str	r5, [sp, #8]
 801e014:	9500      	str	r5, [sp, #0]
 801e016:	9501      	str	r5, [sp, #4]
 801e018:	9409      	str	r4, [sp, #36]	@ 0x24
 801e01a:	464b      	mov	r3, r9
 801e01c:	681b      	ldr	r3, [r3, #0]
 801e01e:	4652      	mov	r2, sl
 801e020:	111c      	asrs	r4, r3, #4
 801e022:	465b      	mov	r3, fp
 801e024:	4648      	mov	r0, r9
 801e026:	681b      	ldr	r3, [r3, #0]
 801e028:	6812      	ldr	r2, [r2, #0]
 801e02a:	6840      	ldr	r0, [r0, #4]
 801e02c:	111b      	asrs	r3, r3, #4
 801e02e:	18e7      	adds	r7, r4, r3
 801e030:	1ae3      	subs	r3, r4, r3
 801e032:	1114      	asrs	r4, r2, #4
 801e034:	4642      	mov	r2, r8
 801e036:	1105      	asrs	r5, r0, #4
 801e038:	4658      	mov	r0, fp
 801e03a:	6812      	ldr	r2, [r2, #0]
 801e03c:	6840      	ldr	r0, [r0, #4]
 801e03e:	9303      	str	r3, [sp, #12]
 801e040:	1113      	asrs	r3, r2, #4
 801e042:	18e2      	adds	r2, r4, r3
 801e044:	1103      	asrs	r3, r0, #4
 801e046:	18ee      	adds	r6, r5, r3
 801e048:	1ae8      	subs	r0, r5, r3
 801e04a:	464d      	mov	r5, r9
 801e04c:	18bb      	adds	r3, r7, r2
 801e04e:	602b      	str	r3, [r5, #0]
 801e050:	4641      	mov	r1, r8
 801e052:	4655      	mov	r5, sl
 801e054:	6849      	ldr	r1, [r1, #4]
 801e056:	686d      	ldr	r5, [r5, #4]
 801e058:	110b      	asrs	r3, r1, #4
 801e05a:	112d      	asrs	r5, r5, #4
 801e05c:	18eb      	adds	r3, r5, r3
 801e05e:	464d      	mov	r5, r9
 801e060:	18f1      	adds	r1, r6, r3
 801e062:	6069      	str	r1, [r5, #4]
 801e064:	4655      	mov	r5, sl
 801e066:	686d      	ldr	r5, [r5, #4]
 801e068:	9004      	str	r0, [sp, #16]
 801e06a:	112c      	asrs	r4, r5, #4
 801e06c:	4645      	mov	r5, r8
 801e06e:	686d      	ldr	r5, [r5, #4]
 801e070:	1129      	asrs	r1, r5, #4
 801e072:	1a65      	subs	r5, r4, r1
 801e074:	4651      	mov	r1, sl
 801e076:	6809      	ldr	r1, [r1, #0]
 801e078:	1abc      	subs	r4, r7, r2
 801e07a:	1108      	asrs	r0, r1, #4
 801e07c:	4641      	mov	r1, r8
 801e07e:	17e2      	asrs	r2, r4, #31
 801e080:	6809      	ldr	r1, [r1, #0]
 801e082:	9207      	str	r2, [sp, #28]
 801e084:	9a01      	ldr	r2, [sp, #4]
 801e086:	1109      	asrs	r1, r1, #4
 801e088:	6817      	ldr	r7, [r2, #0]
 801e08a:	1a41      	subs	r1, r0, r1
 801e08c:	9106      	str	r1, [sp, #24]
 801e08e:	0039      	movs	r1, r7
 801e090:	17ff      	asrs	r7, r7, #31
 801e092:	0038      	movs	r0, r7
 801e094:	9505      	str	r5, [sp, #20]
 801e096:	1af5      	subs	r5, r6, r3
 801e098:	17ef      	asrs	r7, r5, #31
 801e09a:	970b      	str	r7, [sp, #44]	@ 0x2c
 801e09c:	6857      	ldr	r7, [r2, #4]
 801e09e:	0003      	movs	r3, r0
 801e0a0:	17fe      	asrs	r6, r7, #31
 801e0a2:	000a      	movs	r2, r1
 801e0a4:	9108      	str	r1, [sp, #32]
 801e0a6:	900a      	str	r0, [sp, #40]	@ 0x28
 801e0a8:	17e1      	asrs	r1, r4, #31
 801e0aa:	0020      	movs	r0, r4
 801e0ac:	960c      	str	r6, [sp, #48]	@ 0x30
 801e0ae:	f7e2 fa87 	bl	80005c0 <__aeabi_lmul>
 801e0b2:	003a      	movs	r2, r7
 801e0b4:	17fb      	asrs	r3, r7, #31
 801e0b6:	000e      	movs	r6, r1
 801e0b8:	0028      	movs	r0, r5
 801e0ba:	17e9      	asrs	r1, r5, #31
 801e0bc:	f7e2 fa80 	bl	80005c0 <__aeabi_lmul>
 801e0c0:	4653      	mov	r3, sl
 801e0c2:	1a76      	subs	r6, r6, r1
 801e0c4:	0076      	lsls	r6, r6, #1
 801e0c6:	601e      	str	r6, [r3, #0]
 801e0c8:	002a      	movs	r2, r5
 801e0ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e0cc:	9808      	ldr	r0, [sp, #32]
 801e0ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e0d0:	f7e2 fa76 	bl	80005c0 <__aeabi_lmul>
 801e0d4:	003a      	movs	r2, r7
 801e0d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e0d8:	000d      	movs	r5, r1
 801e0da:	0020      	movs	r0, r4
 801e0dc:	9907      	ldr	r1, [sp, #28]
 801e0de:	f7e2 fa6f 	bl	80005c0 <__aeabi_lmul>
 801e0e2:	4657      	mov	r7, sl
 801e0e4:	186d      	adds	r5, r5, r1
 801e0e6:	006d      	lsls	r5, r5, #1
 801e0e8:	607d      	str	r5, [r7, #4]
 801e0ea:	9b03      	ldr	r3, [sp, #12]
 801e0ec:	9e06      	ldr	r6, [sp, #24]
 801e0ee:	9d05      	ldr	r5, [sp, #20]
 801e0f0:	46b4      	mov	ip, r6
 801e0f2:	1b5d      	subs	r5, r3, r5
 801e0f4:	9b00      	ldr	r3, [sp, #0]
 801e0f6:	17ef      	asrs	r7, r5, #31
 801e0f8:	0039      	movs	r1, r7
 801e0fa:	681f      	ldr	r7, [r3, #0]
 801e0fc:	17fc      	asrs	r4, r7, #31
 801e0fe:	0020      	movs	r0, r4
 801e100:	9c04      	ldr	r4, [sp, #16]
 801e102:	4464      	add	r4, ip
 801e104:	17e6      	asrs	r6, r4, #31
 801e106:	9407      	str	r4, [sp, #28]
 801e108:	9608      	str	r6, [sp, #32]
 801e10a:	685e      	ldr	r6, [r3, #4]
 801e10c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801e10e:	17f2      	asrs	r2, r6, #31
 801e110:	0003      	movs	r3, r0
 801e112:	920c      	str	r2, [sp, #48]	@ 0x30
 801e114:	0028      	movs	r0, r5
 801e116:	003a      	movs	r2, r7
 801e118:	910a      	str	r1, [sp, #40]	@ 0x28
 801e11a:	f7e2 fa51 	bl	80005c0 <__aeabi_lmul>
 801e11e:	0032      	movs	r2, r6
 801e120:	17f3      	asrs	r3, r6, #31
 801e122:	9807      	ldr	r0, [sp, #28]
 801e124:	000c      	movs	r4, r1
 801e126:	9908      	ldr	r1, [sp, #32]
 801e128:	f7e2 fa4a 	bl	80005c0 <__aeabi_lmul>
 801e12c:	4658      	mov	r0, fp
 801e12e:	1a64      	subs	r4, r4, r1
 801e130:	0064      	lsls	r4, r4, #1
 801e132:	9a07      	ldr	r2, [sp, #28]
 801e134:	6004      	str	r4, [r0, #0]
 801e136:	9b08      	ldr	r3, [sp, #32]
 801e138:	0038      	movs	r0, r7
 801e13a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e13c:	f7e2 fa40 	bl	80005c0 <__aeabi_lmul>
 801e140:	0032      	movs	r2, r6
 801e142:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e144:	000c      	movs	r4, r1
 801e146:	0028      	movs	r0, r5
 801e148:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e14a:	f7e2 fa39 	bl	80005c0 <__aeabi_lmul>
 801e14e:	9d05      	ldr	r5, [sp, #20]
 801e150:	465f      	mov	r7, fp
 801e152:	46ac      	mov	ip, r5
 801e154:	1864      	adds	r4, r4, r1
 801e156:	9903      	ldr	r1, [sp, #12]
 801e158:	0064      	lsls	r4, r4, #1
 801e15a:	4461      	add	r1, ip
 801e15c:	607c      	str	r4, [r7, #4]
 801e15e:	000c      	movs	r4, r1
 801e160:	17c9      	asrs	r1, r1, #31
 801e162:	9105      	str	r1, [sp, #20]
 801e164:	9902      	ldr	r1, [sp, #8]
 801e166:	9804      	ldr	r0, [sp, #16]
 801e168:	680d      	ldr	r5, [r1, #0]
 801e16a:	9e06      	ldr	r6, [sp, #24]
 801e16c:	002b      	movs	r3, r5
 801e16e:	17ed      	asrs	r5, r5, #31
 801e170:	684f      	ldr	r7, [r1, #4]
 801e172:	9503      	str	r5, [sp, #12]
 801e174:	1b85      	subs	r5, r0, r6
 801e176:	17e8      	asrs	r0, r5, #31
 801e178:	001a      	movs	r2, r3
 801e17a:	9006      	str	r0, [sp, #24]
 801e17c:	17fe      	asrs	r6, r7, #31
 801e17e:	9304      	str	r3, [sp, #16]
 801e180:	0020      	movs	r0, r4
 801e182:	9b03      	ldr	r3, [sp, #12]
 801e184:	17e1      	asrs	r1, r4, #31
 801e186:	9607      	str	r6, [sp, #28]
 801e188:	f7e2 fa1a 	bl	80005c0 <__aeabi_lmul>
 801e18c:	003a      	movs	r2, r7
 801e18e:	000e      	movs	r6, r1
 801e190:	17fb      	asrs	r3, r7, #31
 801e192:	0028      	movs	r0, r5
 801e194:	17e9      	asrs	r1, r5, #31
 801e196:	f7e2 fa13 	bl	80005c0 <__aeabi_lmul>
 801e19a:	4640      	mov	r0, r8
 801e19c:	1a76      	subs	r6, r6, r1
 801e19e:	0076      	lsls	r6, r6, #1
 801e1a0:	002a      	movs	r2, r5
 801e1a2:	9b06      	ldr	r3, [sp, #24]
 801e1a4:	6006      	str	r6, [r0, #0]
 801e1a6:	9903      	ldr	r1, [sp, #12]
 801e1a8:	9804      	ldr	r0, [sp, #16]
 801e1aa:	f7e2 fa09 	bl	80005c0 <__aeabi_lmul>
 801e1ae:	0020      	movs	r0, r4
 801e1b0:	2408      	movs	r4, #8
 801e1b2:	9b07      	ldr	r3, [sp, #28]
 801e1b4:	000d      	movs	r5, r1
 801e1b6:	003a      	movs	r2, r7
 801e1b8:	9905      	ldr	r1, [sp, #20]
 801e1ba:	f7e2 fa01 	bl	80005c0 <__aeabi_lmul>
 801e1be:	4640      	mov	r0, r8
 801e1c0:	46a4      	mov	ip, r4
 801e1c2:	186d      	adds	r5, r5, r1
 801e1c4:	006d      	lsls	r5, r5, #1
 801e1c6:	6045      	str	r5, [r0, #4]
 801e1c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e1ca:	44e1      	add	r9, ip
 801e1cc:	3801      	subs	r0, #1
 801e1ce:	9009      	str	r0, [sp, #36]	@ 0x24
 801e1d0:	9a01      	ldr	r2, [sp, #4]
 801e1d2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e1d4:	44e2      	add	sl, ip
 801e1d6:	44e3      	add	fp, ip
 801e1d8:	44e0      	add	r8, ip
 801e1da:	46a4      	mov	ip, r4
 801e1dc:	4462      	add	r2, ip
 801e1de:	9201      	str	r2, [sp, #4]
 801e1e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e1e2:	9b00      	ldr	r3, [sp, #0]
 801e1e4:	4694      	mov	ip, r2
 801e1e6:	4463      	add	r3, ip
 801e1e8:	9300      	str	r3, [sp, #0]
 801e1ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e1ec:	9902      	ldr	r1, [sp, #8]
 801e1ee:	469c      	mov	ip, r3
 801e1f0:	4461      	add	r1, ip
 801e1f2:	9102      	str	r1, [sp, #8]
 801e1f4:	2800      	cmp	r0, #0
 801e1f6:	d000      	beq.n	801e1fa <arm_radix4_butterfly_inverse_q31+0x22e>
 801e1f8:	e70f      	b.n	801e01a <arm_radix4_butterfly_inverse_q31+0x4e>
 801e1fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e1fc:	009b      	lsls	r3, r3, #2
 801e1fe:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e200:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e202:	9320      	str	r3, [sp, #128]	@ 0x80
 801e204:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e206:	2b04      	cmp	r3, #4
 801e208:	d800      	bhi.n	801e20c <arm_radix4_butterfly_inverse_q31+0x240>
 801e20a:	e17c      	b.n	801e506 <arm_radix4_butterfly_inverse_q31+0x53a>
 801e20c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e20e:	0893      	lsrs	r3, r2, #2
 801e210:	1e59      	subs	r1, r3, #1
 801e212:	9321      	str	r3, [sp, #132]	@ 0x84
 801e214:	00db      	lsls	r3, r3, #3
 801e216:	931b      	str	r3, [sp, #108]	@ 0x6c
 801e218:	00d3      	lsls	r3, r2, #3
 801e21a:	9300      	str	r3, [sp, #0]
 801e21c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e21e:	911a      	str	r1, [sp, #104]	@ 0x68
 801e220:	00da      	lsls	r2, r3, #3
 801e222:	921e      	str	r2, [sp, #120]	@ 0x78
 801e224:	011a      	lsls	r2, r3, #4
 801e226:	921d      	str	r2, [sp, #116]	@ 0x74
 801e228:	001a      	movs	r2, r3
 801e22a:	4694      	mov	ip, r2
 801e22c:	005b      	lsls	r3, r3, #1
 801e22e:	4463      	add	r3, ip
 801e230:	00db      	lsls	r3, r3, #3
 801e232:	931c      	str	r3, [sp, #112]	@ 0x70
 801e234:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e236:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e238:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e23a:	9318      	str	r3, [sp, #96]	@ 0x60
 801e23c:	9319      	str	r3, [sp, #100]	@ 0x64
 801e23e:	9316      	str	r3, [sp, #88]	@ 0x58
 801e240:	2300      	movs	r3, #0
 801e242:	9315      	str	r3, [sp, #84]	@ 0x54
 801e244:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e246:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801e248:	681a      	ldr	r2, [r3, #0]
 801e24a:	685b      	ldr	r3, [r3, #4]
 801e24c:	9205      	str	r2, [sp, #20]
 801e24e:	9306      	str	r3, [sp, #24]
 801e250:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e252:	468c      	mov	ip, r1
 801e254:	681a      	ldr	r2, [r3, #0]
 801e256:	685b      	ldr	r3, [r3, #4]
 801e258:	9207      	str	r2, [sp, #28]
 801e25a:	9308      	str	r3, [sp, #32]
 801e25c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e25e:	681a      	ldr	r2, [r3, #0]
 801e260:	685b      	ldr	r3, [r3, #4]
 801e262:	9209      	str	r2, [sp, #36]	@ 0x24
 801e264:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e266:	930a      	str	r3, [sp, #40]	@ 0x28
 801e268:	0013      	movs	r3, r2
 801e26a:	4463      	add	r3, ip
 801e26c:	4698      	mov	r8, r3
 801e26e:	0013      	movs	r3, r2
 801e270:	4442      	add	r2, r8
 801e272:	4691      	mov	r9, r2
 801e274:	001a      	movs	r2, r3
 801e276:	444a      	add	r2, r9
 801e278:	4692      	mov	sl, r2
 801e27a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e27c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e27e:	4293      	cmp	r3, r2
 801e280:	d800      	bhi.n	801e284 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801e282:	e0d9      	b.n	801e438 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e284:	4694      	mov	ip, r2
 801e286:	4644      	mov	r4, r8
 801e288:	4655      	mov	r5, sl
 801e28a:	4688      	mov	r8, r1
 801e28c:	9b07      	ldr	r3, [sp, #28]
 801e28e:	17db      	asrs	r3, r3, #31
 801e290:	930c      	str	r3, [sp, #48]	@ 0x30
 801e292:	9b08      	ldr	r3, [sp, #32]
 801e294:	17db      	asrs	r3, r3, #31
 801e296:	930d      	str	r3, [sp, #52]	@ 0x34
 801e298:	9b05      	ldr	r3, [sp, #20]
 801e29a:	17db      	asrs	r3, r3, #31
 801e29c:	930e      	str	r3, [sp, #56]	@ 0x38
 801e29e:	9b06      	ldr	r3, [sp, #24]
 801e2a0:	17db      	asrs	r3, r3, #31
 801e2a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e2a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e2a6:	17db      	asrs	r3, r3, #31
 801e2a8:	9310      	str	r3, [sp, #64]	@ 0x40
 801e2aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e2ac:	17db      	asrs	r3, r3, #31
 801e2ae:	9311      	str	r3, [sp, #68]	@ 0x44
 801e2b0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e2b2:	4463      	add	r3, ip
 801e2b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e2b6:	4643      	mov	r3, r8
 801e2b8:	4641      	mov	r1, r8
 801e2ba:	681a      	ldr	r2, [r3, #0]
 801e2bc:	464b      	mov	r3, r9
 801e2be:	684f      	ldr	r7, [r1, #4]
 801e2c0:	4649      	mov	r1, r9
 801e2c2:	681b      	ldr	r3, [r3, #0]
 801e2c4:	18d6      	adds	r6, r2, r3
 801e2c6:	1ad3      	subs	r3, r2, r3
 801e2c8:	9301      	str	r3, [sp, #4]
 801e2ca:	684b      	ldr	r3, [r1, #4]
 801e2cc:	1af9      	subs	r1, r7, r3
 801e2ce:	9102      	str	r1, [sp, #8]
 801e2d0:	6829      	ldr	r1, [r5, #0]
 801e2d2:	18f8      	adds	r0, r7, r3
 801e2d4:	468c      	mov	ip, r1
 801e2d6:	6827      	ldr	r7, [r4, #0]
 801e2d8:	4467      	add	r7, ip
 801e2da:	003a      	movs	r2, r7
 801e2dc:	19f3      	adds	r3, r6, r7
 801e2de:	4647      	mov	r7, r8
 801e2e0:	109b      	asrs	r3, r3, #2
 801e2e2:	603b      	str	r3, [r7, #0]
 801e2e4:	6869      	ldr	r1, [r5, #4]
 801e2e6:	6867      	ldr	r7, [r4, #4]
 801e2e8:	468c      	mov	ip, r1
 801e2ea:	4467      	add	r7, ip
 801e2ec:	003b      	movs	r3, r7
 801e2ee:	19c1      	adds	r1, r0, r7
 801e2f0:	4647      	mov	r7, r8
 801e2f2:	1ab6      	subs	r6, r6, r2
 801e2f4:	1089      	asrs	r1, r1, #2
 801e2f6:	6079      	str	r1, [r7, #4]
 801e2f8:	17f2      	asrs	r2, r6, #31
 801e2fa:	9900      	ldr	r1, [sp, #0]
 801e2fc:	4692      	mov	sl, r2
 801e2fe:	468c      	mov	ip, r1
 801e300:	6867      	ldr	r7, [r4, #4]
 801e302:	6869      	ldr	r1, [r5, #4]
 801e304:	44e0      	add	r8, ip
 801e306:	1a7f      	subs	r7, r7, r1
 801e308:	9703      	str	r7, [sp, #12]
 801e30a:	6821      	ldr	r1, [r4, #0]
 801e30c:	682f      	ldr	r7, [r5, #0]
 801e30e:	1bc9      	subs	r1, r1, r7
 801e310:	1ac7      	subs	r7, r0, r3
 801e312:	17fa      	asrs	r2, r7, #31
 801e314:	4693      	mov	fp, r2
 801e316:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e318:	9a07      	ldr	r2, [sp, #28]
 801e31a:	9104      	str	r1, [sp, #16]
 801e31c:	0030      	movs	r0, r6
 801e31e:	4651      	mov	r1, sl
 801e320:	f7e2 f94e 	bl	80005c0 <__aeabi_lmul>
 801e324:	9a08      	ldr	r2, [sp, #32]
 801e326:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e328:	9112      	str	r1, [sp, #72]	@ 0x48
 801e32a:	0038      	movs	r0, r7
 801e32c:	4659      	mov	r1, fp
 801e32e:	f7e2 f947 	bl	80005c0 <__aeabi_lmul>
 801e332:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801e334:	9a07      	ldr	r2, [sp, #28]
 801e336:	1a41      	subs	r1, r0, r1
 801e338:	1049      	asrs	r1, r1, #1
 801e33a:	6021      	str	r1, [r4, #0]
 801e33c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e33e:	0038      	movs	r0, r7
 801e340:	4659      	mov	r1, fp
 801e342:	f7e2 f93d 	bl	80005c0 <__aeabi_lmul>
 801e346:	9a08      	ldr	r2, [sp, #32]
 801e348:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e34a:	000f      	movs	r7, r1
 801e34c:	0030      	movs	r0, r6
 801e34e:	4651      	mov	r1, sl
 801e350:	f7e2 f936 	bl	80005c0 <__aeabi_lmul>
 801e354:	9b00      	ldr	r3, [sp, #0]
 801e356:	187f      	adds	r7, r7, r1
 801e358:	469c      	mov	ip, r3
 801e35a:	107f      	asrs	r7, r7, #1
 801e35c:	6067      	str	r7, [r4, #4]
 801e35e:	9a01      	ldr	r2, [sp, #4]
 801e360:	9f03      	ldr	r7, [sp, #12]
 801e362:	9802      	ldr	r0, [sp, #8]
 801e364:	1bd7      	subs	r7, r2, r7
 801e366:	17fe      	asrs	r6, r7, #31
 801e368:	0031      	movs	r1, r6
 801e36a:	9e04      	ldr	r6, [sp, #16]
 801e36c:	4682      	mov	sl, r0
 801e36e:	4464      	add	r4, ip
 801e370:	46b4      	mov	ip, r6
 801e372:	44e2      	add	sl, ip
 801e374:	4652      	mov	r2, sl
 801e376:	17d2      	asrs	r2, r2, #31
 801e378:	4693      	mov	fp, r2
 801e37a:	0038      	movs	r0, r7
 801e37c:	9a05      	ldr	r2, [sp, #20]
 801e37e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e380:	9112      	str	r1, [sp, #72]	@ 0x48
 801e382:	f7e2 f91d 	bl	80005c0 <__aeabi_lmul>
 801e386:	9a06      	ldr	r2, [sp, #24]
 801e388:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e38a:	000e      	movs	r6, r1
 801e38c:	4650      	mov	r0, sl
 801e38e:	4659      	mov	r1, fp
 801e390:	f7e2 f916 	bl	80005c0 <__aeabi_lmul>
 801e394:	4648      	mov	r0, r9
 801e396:	1a76      	subs	r6, r6, r1
 801e398:	1076      	asrs	r6, r6, #1
 801e39a:	6006      	str	r6, [r0, #0]
 801e39c:	9a05      	ldr	r2, [sp, #20]
 801e39e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e3a0:	4650      	mov	r0, sl
 801e3a2:	4659      	mov	r1, fp
 801e3a4:	f7e2 f90c 	bl	80005c0 <__aeabi_lmul>
 801e3a8:	9a06      	ldr	r2, [sp, #24]
 801e3aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e3ac:	000e      	movs	r6, r1
 801e3ae:	0038      	movs	r0, r7
 801e3b0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e3b2:	f7e2 f905 	bl	80005c0 <__aeabi_lmul>
 801e3b6:	9a00      	ldr	r2, [sp, #0]
 801e3b8:	9f03      	ldr	r7, [sp, #12]
 801e3ba:	4694      	mov	ip, r2
 801e3bc:	1876      	adds	r6, r6, r1
 801e3be:	4649      	mov	r1, r9
 801e3c0:	44e1      	add	r9, ip
 801e3c2:	46bc      	mov	ip, r7
 801e3c4:	9b01      	ldr	r3, [sp, #4]
 801e3c6:	1076      	asrs	r6, r6, #1
 801e3c8:	4463      	add	r3, ip
 801e3ca:	17df      	asrs	r7, r3, #31
 801e3cc:	604e      	str	r6, [r1, #4]
 801e3ce:	46ba      	mov	sl, r7
 801e3d0:	001e      	movs	r6, r3
 801e3d2:	9802      	ldr	r0, [sp, #8]
 801e3d4:	9b04      	ldr	r3, [sp, #16]
 801e3d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e3d8:	1ac7      	subs	r7, r0, r3
 801e3da:	17fb      	asrs	r3, r7, #31
 801e3dc:	469b      	mov	fp, r3
 801e3de:	0030      	movs	r0, r6
 801e3e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e3e2:	4651      	mov	r1, sl
 801e3e4:	f7e2 f8ec 	bl	80005c0 <__aeabi_lmul>
 801e3e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e3ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e3ec:	9101      	str	r1, [sp, #4]
 801e3ee:	0038      	movs	r0, r7
 801e3f0:	4659      	mov	r1, fp
 801e3f2:	f7e2 f8e5 	bl	80005c0 <__aeabi_lmul>
 801e3f6:	9801      	ldr	r0, [sp, #4]
 801e3f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e3fa:	1a41      	subs	r1, r0, r1
 801e3fc:	1049      	asrs	r1, r1, #1
 801e3fe:	6029      	str	r1, [r5, #0]
 801e400:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e402:	0038      	movs	r0, r7
 801e404:	4659      	mov	r1, fp
 801e406:	f7e2 f8db 	bl	80005c0 <__aeabi_lmul>
 801e40a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e40c:	000f      	movs	r7, r1
 801e40e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801e410:	0030      	movs	r0, r6
 801e412:	4651      	mov	r1, sl
 801e414:	f7e2 f8d4 	bl	80005c0 <__aeabi_lmul>
 801e418:	187f      	adds	r7, r7, r1
 801e41a:	107f      	asrs	r7, r7, #1
 801e41c:	606f      	str	r7, [r5, #4]
 801e41e:	9a00      	ldr	r2, [sp, #0]
 801e420:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e422:	4694      	mov	ip, r2
 801e424:	4465      	add	r5, ip
 801e426:	468c      	mov	ip, r1
 801e428:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e42a:	0013      	movs	r3, r2
 801e42c:	4462      	add	r2, ip
 801e42e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e430:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e432:	429a      	cmp	r2, r3
 801e434:	d900      	bls.n	801e438 <arm_radix4_butterfly_inverse_q31+0x46c>
 801e436:	e73e      	b.n	801e2b6 <arm_radix4_butterfly_inverse_q31+0x2ea>
 801e438:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e43a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e43c:	468c      	mov	ip, r1
 801e43e:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801e440:	4462      	add	r2, ip
 801e442:	468c      	mov	ip, r1
 801e444:	9216      	str	r2, [sp, #88]	@ 0x58
 801e446:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801e448:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e44a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e44c:	4462      	add	r2, ip
 801e44e:	468c      	mov	ip, r1
 801e450:	9219      	str	r2, [sp, #100]	@ 0x64
 801e452:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e454:	3301      	adds	r3, #1
 801e456:	4462      	add	r2, ip
 801e458:	9218      	str	r2, [sp, #96]	@ 0x60
 801e45a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801e45c:	9315      	str	r3, [sp, #84]	@ 0x54
 801e45e:	3208      	adds	r2, #8
 801e460:	9217      	str	r2, [sp, #92]	@ 0x5c
 801e462:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801e464:	4293      	cmp	r3, r2
 801e466:	d800      	bhi.n	801e46a <arm_radix4_butterfly_inverse_q31+0x49e>
 801e468:	e6ec      	b.n	801e244 <arm_radix4_butterfly_inverse_q31+0x278>
 801e46a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e46c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e46e:	009b      	lsls	r3, r3, #2
 801e470:	931f      	str	r3, [sp, #124]	@ 0x7c
 801e472:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e474:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e476:	089b      	lsrs	r3, r3, #2
 801e478:	9320      	str	r3, [sp, #128]	@ 0x80
 801e47a:	2b04      	cmp	r3, #4
 801e47c:	d900      	bls.n	801e480 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801e47e:	e6c5      	b.n	801e20c <arm_radix4_butterfly_inverse_q31+0x240>
 801e480:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e482:	469a      	mov	sl, r3
 801e484:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e486:	681a      	ldr	r2, [r3, #0]
 801e488:	6918      	ldr	r0, [r3, #16]
 801e48a:	4691      	mov	r9, r2
 801e48c:	464c      	mov	r4, r9
 801e48e:	4680      	mov	r8, r0
 801e490:	69de      	ldr	r6, [r3, #28]
 801e492:	689d      	ldr	r5, [r3, #8]
 801e494:	46b4      	mov	ip, r6
 801e496:	6998      	ldr	r0, [r3, #24]
 801e498:	1964      	adds	r4, r4, r5
 801e49a:	6859      	ldr	r1, [r3, #4]
 801e49c:	68da      	ldr	r2, [r3, #12]
 801e49e:	4444      	add	r4, r8
 801e4a0:	695f      	ldr	r7, [r3, #20]
 801e4a2:	1824      	adds	r4, r4, r0
 801e4a4:	601c      	str	r4, [r3, #0]
 801e4a6:	188c      	adds	r4, r1, r2
 801e4a8:	19e4      	adds	r4, r4, r7
 801e4aa:	4464      	add	r4, ip
 801e4ac:	605c      	str	r4, [r3, #4]
 801e4ae:	464c      	mov	r4, r9
 801e4b0:	1b64      	subs	r4, r4, r5
 801e4b2:	4444      	add	r4, r8
 801e4b4:	1a24      	subs	r4, r4, r0
 801e4b6:	609c      	str	r4, [r3, #8]
 801e4b8:	1a8c      	subs	r4, r1, r2
 801e4ba:	19e4      	adds	r4, r4, r7
 801e4bc:	1ba4      	subs	r4, r4, r6
 801e4be:	60dc      	str	r4, [r3, #12]
 801e4c0:	464c      	mov	r4, r9
 801e4c2:	4646      	mov	r6, r8
 801e4c4:	1aa4      	subs	r4, r4, r2
 801e4c6:	1ba4      	subs	r4, r4, r6
 801e4c8:	4464      	add	r4, ip
 801e4ca:	611c      	str	r4, [r3, #16]
 801e4cc:	194c      	adds	r4, r1, r5
 801e4ce:	1be4      	subs	r4, r4, r7
 801e4d0:	1a24      	subs	r4, r4, r0
 801e4d2:	615c      	str	r4, [r3, #20]
 801e4d4:	4644      	mov	r4, r8
 801e4d6:	4666      	mov	r6, ip
 801e4d8:	444a      	add	r2, r9
 801e4da:	1b12      	subs	r2, r2, r4
 801e4dc:	1b92      	subs	r2, r2, r6
 801e4de:	619a      	str	r2, [r3, #24]
 801e4e0:	1b4a      	subs	r2, r1, r5
 801e4e2:	1bd1      	subs	r1, r2, r7
 801e4e4:	2201      	movs	r2, #1
 801e4e6:	4252      	negs	r2, r2
 801e4e8:	4694      	mov	ip, r2
 801e4ea:	44e2      	add	sl, ip
 801e4ec:	4652      	mov	r2, sl
 801e4ee:	1809      	adds	r1, r1, r0
 801e4f0:	61d9      	str	r1, [r3, #28]
 801e4f2:	3320      	adds	r3, #32
 801e4f4:	2a00      	cmp	r2, #0
 801e4f6:	d1c6      	bne.n	801e486 <arm_radix4_butterfly_inverse_q31+0x4ba>
 801e4f8:	b027      	add	sp, #156	@ 0x9c
 801e4fa:	bc3c      	pop	{r2, r3, r4, r5}
 801e4fc:	4690      	mov	r8, r2
 801e4fe:	4699      	mov	r9, r3
 801e500:	46a2      	mov	sl, r4
 801e502:	46ab      	mov	fp, r5
 801e504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e506:	469a      	mov	sl, r3
 801e508:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e50a:	e7bc      	b.n	801e486 <arm_radix4_butterfly_inverse_q31+0x4ba>

0801e50c <arm_cmplx_mag_squared_q31>:
 801e50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e50e:	464f      	mov	r7, r9
 801e510:	4646      	mov	r6, r8
 801e512:	0004      	movs	r4, r0
 801e514:	b4c0      	push	{r6, r7}
 801e516:	0016      	movs	r6, r2
 801e518:	000f      	movs	r7, r1
 801e51a:	2a00      	cmp	r2, #0
 801e51c:	d018      	beq.n	801e550 <arm_cmplx_mag_squared_q31+0x44>
 801e51e:	6823      	ldr	r3, [r4, #0]
 801e520:	6822      	ldr	r2, [r4, #0]
 801e522:	17d9      	asrs	r1, r3, #31
 801e524:	6863      	ldr	r3, [r4, #4]
 801e526:	0010      	movs	r0, r2
 801e528:	4698      	mov	r8, r3
 801e52a:	17db      	asrs	r3, r3, #31
 801e52c:	4699      	mov	r9, r3
 801e52e:	000b      	movs	r3, r1
 801e530:	f7e2 f846 	bl	80005c0 <__aeabi_lmul>
 801e534:	4642      	mov	r2, r8
 801e536:	104d      	asrs	r5, r1, #1
 801e538:	464b      	mov	r3, r9
 801e53a:	4640      	mov	r0, r8
 801e53c:	4649      	mov	r1, r9
 801e53e:	f7e2 f83f 	bl	80005c0 <__aeabi_lmul>
 801e542:	1049      	asrs	r1, r1, #1
 801e544:	1869      	adds	r1, r5, r1
 801e546:	3e01      	subs	r6, #1
 801e548:	c702      	stmia	r7!, {r1}
 801e54a:	3408      	adds	r4, #8
 801e54c:	2e00      	cmp	r6, #0
 801e54e:	d1e6      	bne.n	801e51e <arm_cmplx_mag_squared_q31+0x12>
 801e550:	bc0c      	pop	{r2, r3}
 801e552:	4690      	mov	r8, r2
 801e554:	4699      	mov	r9, r3
 801e556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e558 <arm_mult_q31>:
 801e558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e55a:	4646      	mov	r6, r8
 801e55c:	464f      	mov	r7, r9
 801e55e:	4690      	mov	r8, r2
 801e560:	b4c0      	push	{r6, r7}
 801e562:	001d      	movs	r5, r3
 801e564:	0006      	movs	r6, r0
 801e566:	000f      	movs	r7, r1
 801e568:	2400      	movs	r4, #0
 801e56a:	2b00      	cmp	r3, #0
 801e56c:	d020      	beq.n	801e5b0 <arm_mult_q31+0x58>
 801e56e:	4b12      	ldr	r3, [pc, #72]	@ (801e5b8 <arm_mult_q31+0x60>)
 801e570:	4699      	mov	r9, r3
 801e572:	e007      	b.n	801e584 <arm_mult_q31+0x2c>
 801e574:	464b      	mov	r3, r9
 801e576:	4059      	eors	r1, r3
 801e578:	4643      	mov	r3, r8
 801e57a:	3d01      	subs	r5, #1
 801e57c:	5119      	str	r1, [r3, r4]
 801e57e:	3404      	adds	r4, #4
 801e580:	2d00      	cmp	r5, #0
 801e582:	d015      	beq.n	801e5b0 <arm_mult_q31+0x58>
 801e584:	5933      	ldr	r3, [r6, r4]
 801e586:	593a      	ldr	r2, [r7, r4]
 801e588:	17d9      	asrs	r1, r3, #31
 801e58a:	593b      	ldr	r3, [r7, r4]
 801e58c:	5930      	ldr	r0, [r6, r4]
 801e58e:	17db      	asrs	r3, r3, #31
 801e590:	f7e2 f816 	bl	80005c0 <__aeabi_lmul>
 801e594:	004b      	lsls	r3, r1, #1
 801e596:	0fc0      	lsrs	r0, r0, #31
 801e598:	4318      	orrs	r0, r3
 801e59a:	17c9      	asrs	r1, r1, #31
 801e59c:	17c3      	asrs	r3, r0, #31
 801e59e:	428b      	cmp	r3, r1
 801e5a0:	d1e8      	bne.n	801e574 <arm_mult_q31+0x1c>
 801e5a2:	0001      	movs	r1, r0
 801e5a4:	4643      	mov	r3, r8
 801e5a6:	3d01      	subs	r5, #1
 801e5a8:	5119      	str	r1, [r3, r4]
 801e5aa:	3404      	adds	r4, #4
 801e5ac:	2d00      	cmp	r5, #0
 801e5ae:	d1e9      	bne.n	801e584 <arm_mult_q31+0x2c>
 801e5b0:	bc0c      	pop	{r2, r3}
 801e5b2:	4690      	mov	r8, r2
 801e5b4:	4699      	mov	r9, r3
 801e5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e5b8:	7fffffff 	.word	0x7fffffff

0801e5bc <arm_add_q31>:
 801e5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5be:	465f      	mov	r7, fp
 801e5c0:	4656      	mov	r6, sl
 801e5c2:	464d      	mov	r5, r9
 801e5c4:	4644      	mov	r4, r8
 801e5c6:	b4f0      	push	{r4, r5, r6, r7}
 801e5c8:	4693      	mov	fp, r2
 801e5ca:	b083      	sub	sp, #12
 801e5cc:	4681      	mov	r9, r0
 801e5ce:	468a      	mov	sl, r1
 801e5d0:	4698      	mov	r8, r3
 801e5d2:	2200      	movs	r2, #0
 801e5d4:	2b00      	cmp	r3, #0
 801e5d6:	d020      	beq.n	801e61a <arm_add_q31+0x5e>
 801e5d8:	4649      	mov	r1, r9
 801e5da:	4653      	mov	r3, sl
 801e5dc:	588e      	ldr	r6, [r1, r2]
 801e5de:	589b      	ldr	r3, [r3, r2]
 801e5e0:	17f7      	asrs	r7, r6, #31
 801e5e2:	001c      	movs	r4, r3
 801e5e4:	0030      	movs	r0, r6
 801e5e6:	0039      	movs	r1, r7
 801e5e8:	17dd      	asrs	r5, r3, #31
 801e5ea:	46b4      	mov	ip, r6
 801e5ec:	1900      	adds	r0, r0, r4
 801e5ee:	4169      	adcs	r1, r5
 801e5f0:	4463      	add	r3, ip
 801e5f2:	9000      	str	r0, [sp, #0]
 801e5f4:	9101      	str	r1, [sp, #4]
 801e5f6:	17d9      	asrs	r1, r3, #31
 801e5f8:	468c      	mov	ip, r1
 801e5fa:	9901      	ldr	r1, [sp, #4]
 801e5fc:	458c      	cmp	ip, r1
 801e5fe:	d002      	beq.n	801e606 <arm_add_q31+0x4a>
 801e600:	17cb      	asrs	r3, r1, #31
 801e602:	4909      	ldr	r1, [pc, #36]	@ (801e628 <arm_add_q31+0x6c>)
 801e604:	404b      	eors	r3, r1
 801e606:	4659      	mov	r1, fp
 801e608:	508b      	str	r3, [r1, r2]
 801e60a:	2301      	movs	r3, #1
 801e60c:	425b      	negs	r3, r3
 801e60e:	469c      	mov	ip, r3
 801e610:	44e0      	add	r8, ip
 801e612:	4643      	mov	r3, r8
 801e614:	3204      	adds	r2, #4
 801e616:	2b00      	cmp	r3, #0
 801e618:	d1de      	bne.n	801e5d8 <arm_add_q31+0x1c>
 801e61a:	b003      	add	sp, #12
 801e61c:	bc3c      	pop	{r2, r3, r4, r5}
 801e61e:	4690      	mov	r8, r2
 801e620:	4699      	mov	r9, r3
 801e622:	46a2      	mov	sl, r4
 801e624:	46ab      	mov	fp, r5
 801e626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e628:	7fffffff 	.word	0x7fffffff

0801e62c <atof>:
 801e62c:	b510      	push	{r4, lr}
 801e62e:	2100      	movs	r1, #0
 801e630:	f000 fe12 	bl	801f258 <strtod>
 801e634:	bd10      	pop	{r4, pc}

0801e636 <atoi>:
 801e636:	b510      	push	{r4, lr}
 801e638:	220a      	movs	r2, #10
 801e63a:	2100      	movs	r1, #0
 801e63c:	f000 fea4 	bl	801f388 <strtol>
 801e640:	bd10      	pop	{r4, pc}
	...

0801e644 <sulp>:
 801e644:	b570      	push	{r4, r5, r6, lr}
 801e646:	0016      	movs	r6, r2
 801e648:	000d      	movs	r5, r1
 801e64a:	f003 fcf3 	bl	8022034 <__ulp>
 801e64e:	2e00      	cmp	r6, #0
 801e650:	d00d      	beq.n	801e66e <sulp+0x2a>
 801e652:	236b      	movs	r3, #107	@ 0x6b
 801e654:	006a      	lsls	r2, r5, #1
 801e656:	0d52      	lsrs	r2, r2, #21
 801e658:	1a9b      	subs	r3, r3, r2
 801e65a:	2b00      	cmp	r3, #0
 801e65c:	dd07      	ble.n	801e66e <sulp+0x2a>
 801e65e:	2400      	movs	r4, #0
 801e660:	4a03      	ldr	r2, [pc, #12]	@ (801e670 <sulp+0x2c>)
 801e662:	051b      	lsls	r3, r3, #20
 801e664:	189d      	adds	r5, r3, r2
 801e666:	002b      	movs	r3, r5
 801e668:	0022      	movs	r2, r4
 801e66a:	f7e3 ffe7 	bl	800263c <__aeabi_dmul>
 801e66e:	bd70      	pop	{r4, r5, r6, pc}
 801e670:	3ff00000 	.word	0x3ff00000

0801e674 <_strtod_l>:
 801e674:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e676:	b0a3      	sub	sp, #140	@ 0x8c
 801e678:	921b      	str	r2, [sp, #108]	@ 0x6c
 801e67a:	2200      	movs	r2, #0
 801e67c:	2600      	movs	r6, #0
 801e67e:	2700      	movs	r7, #0
 801e680:	9005      	str	r0, [sp, #20]
 801e682:	9109      	str	r1, [sp, #36]	@ 0x24
 801e684:	921e      	str	r2, [sp, #120]	@ 0x78
 801e686:	911d      	str	r1, [sp, #116]	@ 0x74
 801e688:	780a      	ldrb	r2, [r1, #0]
 801e68a:	2a2b      	cmp	r2, #43	@ 0x2b
 801e68c:	d053      	beq.n	801e736 <_strtod_l+0xc2>
 801e68e:	d83f      	bhi.n	801e710 <_strtod_l+0x9c>
 801e690:	2a0d      	cmp	r2, #13
 801e692:	d839      	bhi.n	801e708 <_strtod_l+0x94>
 801e694:	2a08      	cmp	r2, #8
 801e696:	d839      	bhi.n	801e70c <_strtod_l+0x98>
 801e698:	2a00      	cmp	r2, #0
 801e69a:	d042      	beq.n	801e722 <_strtod_l+0xae>
 801e69c:	2200      	movs	r2, #0
 801e69e:	9212      	str	r2, [sp, #72]	@ 0x48
 801e6a0:	2100      	movs	r1, #0
 801e6a2:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801e6a4:	910c      	str	r1, [sp, #48]	@ 0x30
 801e6a6:	782a      	ldrb	r2, [r5, #0]
 801e6a8:	2a30      	cmp	r2, #48	@ 0x30
 801e6aa:	d000      	beq.n	801e6ae <_strtod_l+0x3a>
 801e6ac:	e083      	b.n	801e7b6 <_strtod_l+0x142>
 801e6ae:	786a      	ldrb	r2, [r5, #1]
 801e6b0:	3120      	adds	r1, #32
 801e6b2:	438a      	bics	r2, r1
 801e6b4:	2a58      	cmp	r2, #88	@ 0x58
 801e6b6:	d000      	beq.n	801e6ba <_strtod_l+0x46>
 801e6b8:	e073      	b.n	801e7a2 <_strtod_l+0x12e>
 801e6ba:	9302      	str	r3, [sp, #8]
 801e6bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e6be:	4a95      	ldr	r2, [pc, #596]	@ (801e914 <_strtod_l+0x2a0>)
 801e6c0:	9301      	str	r3, [sp, #4]
 801e6c2:	ab1e      	add	r3, sp, #120	@ 0x78
 801e6c4:	9300      	str	r3, [sp, #0]
 801e6c6:	9805      	ldr	r0, [sp, #20]
 801e6c8:	ab1f      	add	r3, sp, #124	@ 0x7c
 801e6ca:	a91d      	add	r1, sp, #116	@ 0x74
 801e6cc:	f002 fd62 	bl	8021194 <__gethex>
 801e6d0:	230f      	movs	r3, #15
 801e6d2:	0002      	movs	r2, r0
 801e6d4:	401a      	ands	r2, r3
 801e6d6:	0004      	movs	r4, r0
 801e6d8:	9206      	str	r2, [sp, #24]
 801e6da:	4218      	tst	r0, r3
 801e6dc:	d005      	beq.n	801e6ea <_strtod_l+0x76>
 801e6de:	2a06      	cmp	r2, #6
 801e6e0:	d12b      	bne.n	801e73a <_strtod_l+0xc6>
 801e6e2:	2300      	movs	r3, #0
 801e6e4:	3501      	adds	r5, #1
 801e6e6:	951d      	str	r5, [sp, #116]	@ 0x74
 801e6e8:	9312      	str	r3, [sp, #72]	@ 0x48
 801e6ea:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e6ec:	2b00      	cmp	r3, #0
 801e6ee:	d002      	beq.n	801e6f6 <_strtod_l+0x82>
 801e6f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e6f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801e6f4:	6013      	str	r3, [r2, #0]
 801e6f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e6f8:	2b00      	cmp	r3, #0
 801e6fa:	d019      	beq.n	801e730 <_strtod_l+0xbc>
 801e6fc:	2380      	movs	r3, #128	@ 0x80
 801e6fe:	0030      	movs	r0, r6
 801e700:	061b      	lsls	r3, r3, #24
 801e702:	18f9      	adds	r1, r7, r3
 801e704:	b023      	add	sp, #140	@ 0x8c
 801e706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e708:	2a20      	cmp	r2, #32
 801e70a:	d1c7      	bne.n	801e69c <_strtod_l+0x28>
 801e70c:	3101      	adds	r1, #1
 801e70e:	e7ba      	b.n	801e686 <_strtod_l+0x12>
 801e710:	2a2d      	cmp	r2, #45	@ 0x2d
 801e712:	d1c3      	bne.n	801e69c <_strtod_l+0x28>
 801e714:	3a2c      	subs	r2, #44	@ 0x2c
 801e716:	9212      	str	r2, [sp, #72]	@ 0x48
 801e718:	1c4a      	adds	r2, r1, #1
 801e71a:	921d      	str	r2, [sp, #116]	@ 0x74
 801e71c:	784a      	ldrb	r2, [r1, #1]
 801e71e:	2a00      	cmp	r2, #0
 801e720:	d1be      	bne.n	801e6a0 <_strtod_l+0x2c>
 801e722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e724:	931d      	str	r3, [sp, #116]	@ 0x74
 801e726:	2300      	movs	r3, #0
 801e728:	9312      	str	r3, [sp, #72]	@ 0x48
 801e72a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801e72c:	2b00      	cmp	r3, #0
 801e72e:	d1df      	bne.n	801e6f0 <_strtod_l+0x7c>
 801e730:	0030      	movs	r0, r6
 801e732:	0039      	movs	r1, r7
 801e734:	e7e6      	b.n	801e704 <_strtod_l+0x90>
 801e736:	2200      	movs	r2, #0
 801e738:	e7ed      	b.n	801e716 <_strtod_l+0xa2>
 801e73a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801e73c:	2a00      	cmp	r2, #0
 801e73e:	d007      	beq.n	801e750 <_strtod_l+0xdc>
 801e740:	2135      	movs	r1, #53	@ 0x35
 801e742:	a820      	add	r0, sp, #128	@ 0x80
 801e744:	f003 fd6c 	bl	8022220 <__copybits>
 801e748:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801e74a:	9805      	ldr	r0, [sp, #20]
 801e74c:	f003 f926 	bl	802199c <_Bfree>
 801e750:	9806      	ldr	r0, [sp, #24]
 801e752:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801e754:	3801      	subs	r0, #1
 801e756:	2804      	cmp	r0, #4
 801e758:	d806      	bhi.n	801e768 <_strtod_l+0xf4>
 801e75a:	f7e1 fd0f 	bl	800017c <__gnu_thumb1_case_uqi>
 801e75e:	0312      	.short	0x0312
 801e760:	1e1c      	.short	0x1e1c
 801e762:	12          	.byte	0x12
 801e763:	00          	.byte	0x00
 801e764:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e766:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801e768:	05e4      	lsls	r4, r4, #23
 801e76a:	d502      	bpl.n	801e772 <_strtod_l+0xfe>
 801e76c:	2380      	movs	r3, #128	@ 0x80
 801e76e:	061b      	lsls	r3, r3, #24
 801e770:	431f      	orrs	r7, r3
 801e772:	4b69      	ldr	r3, [pc, #420]	@ (801e918 <_strtod_l+0x2a4>)
 801e774:	423b      	tst	r3, r7
 801e776:	d1b8      	bne.n	801e6ea <_strtod_l+0x76>
 801e778:	f001 fd90 	bl	802029c <__errno>
 801e77c:	2322      	movs	r3, #34	@ 0x22
 801e77e:	6003      	str	r3, [r0, #0]
 801e780:	e7b3      	b.n	801e6ea <_strtod_l+0x76>
 801e782:	4966      	ldr	r1, [pc, #408]	@ (801e91c <_strtod_l+0x2a8>)
 801e784:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801e786:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e788:	400a      	ands	r2, r1
 801e78a:	4965      	ldr	r1, [pc, #404]	@ (801e920 <_strtod_l+0x2ac>)
 801e78c:	185b      	adds	r3, r3, r1
 801e78e:	051b      	lsls	r3, r3, #20
 801e790:	431a      	orrs	r2, r3
 801e792:	0017      	movs	r7, r2
 801e794:	e7e8      	b.n	801e768 <_strtod_l+0xf4>
 801e796:	4f60      	ldr	r7, [pc, #384]	@ (801e918 <_strtod_l+0x2a4>)
 801e798:	e7e6      	b.n	801e768 <_strtod_l+0xf4>
 801e79a:	2601      	movs	r6, #1
 801e79c:	4f61      	ldr	r7, [pc, #388]	@ (801e924 <_strtod_l+0x2b0>)
 801e79e:	4276      	negs	r6, r6
 801e7a0:	e7e2      	b.n	801e768 <_strtod_l+0xf4>
 801e7a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e7a4:	1c5a      	adds	r2, r3, #1
 801e7a6:	921d      	str	r2, [sp, #116]	@ 0x74
 801e7a8:	785b      	ldrb	r3, [r3, #1]
 801e7aa:	2b30      	cmp	r3, #48	@ 0x30
 801e7ac:	d0f9      	beq.n	801e7a2 <_strtod_l+0x12e>
 801e7ae:	2b00      	cmp	r3, #0
 801e7b0:	d09b      	beq.n	801e6ea <_strtod_l+0x76>
 801e7b2:	2301      	movs	r3, #1
 801e7b4:	930c      	str	r3, [sp, #48]	@ 0x30
 801e7b6:	2500      	movs	r5, #0
 801e7b8:	220a      	movs	r2, #10
 801e7ba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e7bc:	950d      	str	r5, [sp, #52]	@ 0x34
 801e7be:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e7c0:	9508      	str	r5, [sp, #32]
 801e7c2:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801e7c4:	7804      	ldrb	r4, [r0, #0]
 801e7c6:	0023      	movs	r3, r4
 801e7c8:	3b30      	subs	r3, #48	@ 0x30
 801e7ca:	b2d9      	uxtb	r1, r3
 801e7cc:	2909      	cmp	r1, #9
 801e7ce:	d927      	bls.n	801e820 <_strtod_l+0x1ac>
 801e7d0:	2201      	movs	r2, #1
 801e7d2:	4955      	ldr	r1, [pc, #340]	@ (801e928 <_strtod_l+0x2b4>)
 801e7d4:	f001 fcd4 	bl	8020180 <strncmp>
 801e7d8:	2800      	cmp	r0, #0
 801e7da:	d031      	beq.n	801e840 <_strtod_l+0x1cc>
 801e7dc:	2000      	movs	r0, #0
 801e7de:	0023      	movs	r3, r4
 801e7e0:	4684      	mov	ip, r0
 801e7e2:	9a08      	ldr	r2, [sp, #32]
 801e7e4:	900e      	str	r0, [sp, #56]	@ 0x38
 801e7e6:	9206      	str	r2, [sp, #24]
 801e7e8:	2220      	movs	r2, #32
 801e7ea:	0019      	movs	r1, r3
 801e7ec:	4391      	bics	r1, r2
 801e7ee:	000a      	movs	r2, r1
 801e7f0:	2100      	movs	r1, #0
 801e7f2:	9107      	str	r1, [sp, #28]
 801e7f4:	2a45      	cmp	r2, #69	@ 0x45
 801e7f6:	d000      	beq.n	801e7fa <_strtod_l+0x186>
 801e7f8:	e0c0      	b.n	801e97c <_strtod_l+0x308>
 801e7fa:	9b06      	ldr	r3, [sp, #24]
 801e7fc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e7fe:	4303      	orrs	r3, r0
 801e800:	4313      	orrs	r3, r2
 801e802:	428b      	cmp	r3, r1
 801e804:	d08d      	beq.n	801e722 <_strtod_l+0xae>
 801e806:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e808:	9309      	str	r3, [sp, #36]	@ 0x24
 801e80a:	3301      	adds	r3, #1
 801e80c:	931d      	str	r3, [sp, #116]	@ 0x74
 801e80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e810:	785b      	ldrb	r3, [r3, #1]
 801e812:	2b2b      	cmp	r3, #43	@ 0x2b
 801e814:	d070      	beq.n	801e8f8 <_strtod_l+0x284>
 801e816:	000c      	movs	r4, r1
 801e818:	2b2d      	cmp	r3, #45	@ 0x2d
 801e81a:	d173      	bne.n	801e904 <_strtod_l+0x290>
 801e81c:	2401      	movs	r4, #1
 801e81e:	e06c      	b.n	801e8fa <_strtod_l+0x286>
 801e820:	9908      	ldr	r1, [sp, #32]
 801e822:	2908      	cmp	r1, #8
 801e824:	dc09      	bgt.n	801e83a <_strtod_l+0x1c6>
 801e826:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e828:	4351      	muls	r1, r2
 801e82a:	185b      	adds	r3, r3, r1
 801e82c:	930d      	str	r3, [sp, #52]	@ 0x34
 801e82e:	9b08      	ldr	r3, [sp, #32]
 801e830:	3001      	adds	r0, #1
 801e832:	3301      	adds	r3, #1
 801e834:	9308      	str	r3, [sp, #32]
 801e836:	901d      	str	r0, [sp, #116]	@ 0x74
 801e838:	e7c3      	b.n	801e7c2 <_strtod_l+0x14e>
 801e83a:	4355      	muls	r5, r2
 801e83c:	195d      	adds	r5, r3, r5
 801e83e:	e7f6      	b.n	801e82e <_strtod_l+0x1ba>
 801e840:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e842:	1c5a      	adds	r2, r3, #1
 801e844:	921d      	str	r2, [sp, #116]	@ 0x74
 801e846:	9a08      	ldr	r2, [sp, #32]
 801e848:	785b      	ldrb	r3, [r3, #1]
 801e84a:	2a00      	cmp	r2, #0
 801e84c:	d03a      	beq.n	801e8c4 <_strtod_l+0x250>
 801e84e:	900e      	str	r0, [sp, #56]	@ 0x38
 801e850:	9206      	str	r2, [sp, #24]
 801e852:	001a      	movs	r2, r3
 801e854:	3a30      	subs	r2, #48	@ 0x30
 801e856:	2a09      	cmp	r2, #9
 801e858:	d912      	bls.n	801e880 <_strtod_l+0x20c>
 801e85a:	2201      	movs	r2, #1
 801e85c:	4694      	mov	ip, r2
 801e85e:	e7c3      	b.n	801e7e8 <_strtod_l+0x174>
 801e860:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e862:	3001      	adds	r0, #1
 801e864:	1c5a      	adds	r2, r3, #1
 801e866:	921d      	str	r2, [sp, #116]	@ 0x74
 801e868:	785b      	ldrb	r3, [r3, #1]
 801e86a:	2b30      	cmp	r3, #48	@ 0x30
 801e86c:	d0f8      	beq.n	801e860 <_strtod_l+0x1ec>
 801e86e:	001a      	movs	r2, r3
 801e870:	3a31      	subs	r2, #49	@ 0x31
 801e872:	2a08      	cmp	r2, #8
 801e874:	d83b      	bhi.n	801e8ee <_strtod_l+0x27a>
 801e876:	900e      	str	r0, [sp, #56]	@ 0x38
 801e878:	2000      	movs	r0, #0
 801e87a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801e87c:	9006      	str	r0, [sp, #24]
 801e87e:	9213      	str	r2, [sp, #76]	@ 0x4c
 801e880:	001a      	movs	r2, r3
 801e882:	1c41      	adds	r1, r0, #1
 801e884:	3a30      	subs	r2, #48	@ 0x30
 801e886:	2b30      	cmp	r3, #48	@ 0x30
 801e888:	d016      	beq.n	801e8b8 <_strtod_l+0x244>
 801e88a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e88c:	185b      	adds	r3, r3, r1
 801e88e:	930e      	str	r3, [sp, #56]	@ 0x38
 801e890:	9b06      	ldr	r3, [sp, #24]
 801e892:	210a      	movs	r1, #10
 801e894:	469c      	mov	ip, r3
 801e896:	4484      	add	ip, r0
 801e898:	459c      	cmp	ip, r3
 801e89a:	d115      	bne.n	801e8c8 <_strtod_l+0x254>
 801e89c:	9906      	ldr	r1, [sp, #24]
 801e89e:	9b06      	ldr	r3, [sp, #24]
 801e8a0:	3101      	adds	r1, #1
 801e8a2:	1809      	adds	r1, r1, r0
 801e8a4:	181b      	adds	r3, r3, r0
 801e8a6:	9106      	str	r1, [sp, #24]
 801e8a8:	2b08      	cmp	r3, #8
 801e8aa:	dc19      	bgt.n	801e8e0 <_strtod_l+0x26c>
 801e8ac:	230a      	movs	r3, #10
 801e8ae:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e8b0:	434b      	muls	r3, r1
 801e8b2:	2100      	movs	r1, #0
 801e8b4:	18d3      	adds	r3, r2, r3
 801e8b6:	930d      	str	r3, [sp, #52]	@ 0x34
 801e8b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e8ba:	0008      	movs	r0, r1
 801e8bc:	1c5a      	adds	r2, r3, #1
 801e8be:	921d      	str	r2, [sp, #116]	@ 0x74
 801e8c0:	785b      	ldrb	r3, [r3, #1]
 801e8c2:	e7c6      	b.n	801e852 <_strtod_l+0x1de>
 801e8c4:	9808      	ldr	r0, [sp, #32]
 801e8c6:	e7d0      	b.n	801e86a <_strtod_l+0x1f6>
 801e8c8:	1c5c      	adds	r4, r3, #1
 801e8ca:	2b08      	cmp	r3, #8
 801e8cc:	dc04      	bgt.n	801e8d8 <_strtod_l+0x264>
 801e8ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e8d0:	434b      	muls	r3, r1
 801e8d2:	930d      	str	r3, [sp, #52]	@ 0x34
 801e8d4:	0023      	movs	r3, r4
 801e8d6:	e7df      	b.n	801e898 <_strtod_l+0x224>
 801e8d8:	2c10      	cmp	r4, #16
 801e8da:	dcfb      	bgt.n	801e8d4 <_strtod_l+0x260>
 801e8dc:	434d      	muls	r5, r1
 801e8de:	e7f9      	b.n	801e8d4 <_strtod_l+0x260>
 801e8e0:	2100      	movs	r1, #0
 801e8e2:	2b0f      	cmp	r3, #15
 801e8e4:	dce8      	bgt.n	801e8b8 <_strtod_l+0x244>
 801e8e6:	230a      	movs	r3, #10
 801e8e8:	435d      	muls	r5, r3
 801e8ea:	1955      	adds	r5, r2, r5
 801e8ec:	e7e4      	b.n	801e8b8 <_strtod_l+0x244>
 801e8ee:	2200      	movs	r2, #0
 801e8f0:	920e      	str	r2, [sp, #56]	@ 0x38
 801e8f2:	9206      	str	r2, [sp, #24]
 801e8f4:	3201      	adds	r2, #1
 801e8f6:	e7b1      	b.n	801e85c <_strtod_l+0x1e8>
 801e8f8:	2400      	movs	r4, #0
 801e8fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e8fc:	3302      	adds	r3, #2
 801e8fe:	931d      	str	r3, [sp, #116]	@ 0x74
 801e900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e902:	789b      	ldrb	r3, [r3, #2]
 801e904:	001a      	movs	r2, r3
 801e906:	3a30      	subs	r2, #48	@ 0x30
 801e908:	2a09      	cmp	r2, #9
 801e90a:	d913      	bls.n	801e934 <_strtod_l+0x2c0>
 801e90c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e90e:	921d      	str	r2, [sp, #116]	@ 0x74
 801e910:	2200      	movs	r2, #0
 801e912:	e032      	b.n	801e97a <_strtod_l+0x306>
 801e914:	08025b20 	.word	0x08025b20
 801e918:	7ff00000 	.word	0x7ff00000
 801e91c:	ffefffff 	.word	0xffefffff
 801e920:	00000433 	.word	0x00000433
 801e924:	7fffffff 	.word	0x7fffffff
 801e928:	08025b08 	.word	0x08025b08
 801e92c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e92e:	1c5a      	adds	r2, r3, #1
 801e930:	921d      	str	r2, [sp, #116]	@ 0x74
 801e932:	785b      	ldrb	r3, [r3, #1]
 801e934:	2b30      	cmp	r3, #48	@ 0x30
 801e936:	d0f9      	beq.n	801e92c <_strtod_l+0x2b8>
 801e938:	2200      	movs	r2, #0
 801e93a:	9207      	str	r2, [sp, #28]
 801e93c:	001a      	movs	r2, r3
 801e93e:	3a31      	subs	r2, #49	@ 0x31
 801e940:	2a08      	cmp	r2, #8
 801e942:	d81b      	bhi.n	801e97c <_strtod_l+0x308>
 801e944:	3b30      	subs	r3, #48	@ 0x30
 801e946:	9310      	str	r3, [sp, #64]	@ 0x40
 801e948:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e94a:	9307      	str	r3, [sp, #28]
 801e94c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e94e:	1c59      	adds	r1, r3, #1
 801e950:	911d      	str	r1, [sp, #116]	@ 0x74
 801e952:	785b      	ldrb	r3, [r3, #1]
 801e954:	001a      	movs	r2, r3
 801e956:	3a30      	subs	r2, #48	@ 0x30
 801e958:	2a09      	cmp	r2, #9
 801e95a:	d93a      	bls.n	801e9d2 <_strtod_l+0x35e>
 801e95c:	9a07      	ldr	r2, [sp, #28]
 801e95e:	1a8a      	subs	r2, r1, r2
 801e960:	49b4      	ldr	r1, [pc, #720]	@ (801ec34 <_strtod_l+0x5c0>)
 801e962:	9107      	str	r1, [sp, #28]
 801e964:	2a08      	cmp	r2, #8
 801e966:	dc04      	bgt.n	801e972 <_strtod_l+0x2fe>
 801e968:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e96a:	9207      	str	r2, [sp, #28]
 801e96c:	428a      	cmp	r2, r1
 801e96e:	dd00      	ble.n	801e972 <_strtod_l+0x2fe>
 801e970:	9107      	str	r1, [sp, #28]
 801e972:	2c00      	cmp	r4, #0
 801e974:	d002      	beq.n	801e97c <_strtod_l+0x308>
 801e976:	9a07      	ldr	r2, [sp, #28]
 801e978:	4252      	negs	r2, r2
 801e97a:	9207      	str	r2, [sp, #28]
 801e97c:	9a06      	ldr	r2, [sp, #24]
 801e97e:	2a00      	cmp	r2, #0
 801e980:	d14d      	bne.n	801ea1e <_strtod_l+0x3aa>
 801e982:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e984:	4310      	orrs	r0, r2
 801e986:	d000      	beq.n	801e98a <_strtod_l+0x316>
 801e988:	e6af      	b.n	801e6ea <_strtod_l+0x76>
 801e98a:	4662      	mov	r2, ip
 801e98c:	2a00      	cmp	r2, #0
 801e98e:	d000      	beq.n	801e992 <_strtod_l+0x31e>
 801e990:	e6c7      	b.n	801e722 <_strtod_l+0xae>
 801e992:	2b69      	cmp	r3, #105	@ 0x69
 801e994:	d027      	beq.n	801e9e6 <_strtod_l+0x372>
 801e996:	dc23      	bgt.n	801e9e0 <_strtod_l+0x36c>
 801e998:	2b49      	cmp	r3, #73	@ 0x49
 801e99a:	d024      	beq.n	801e9e6 <_strtod_l+0x372>
 801e99c:	2b4e      	cmp	r3, #78	@ 0x4e
 801e99e:	d000      	beq.n	801e9a2 <_strtod_l+0x32e>
 801e9a0:	e6bf      	b.n	801e722 <_strtod_l+0xae>
 801e9a2:	49a5      	ldr	r1, [pc, #660]	@ (801ec38 <_strtod_l+0x5c4>)
 801e9a4:	a81d      	add	r0, sp, #116	@ 0x74
 801e9a6:	f002 fe2b 	bl	8021600 <__match>
 801e9aa:	2800      	cmp	r0, #0
 801e9ac:	d100      	bne.n	801e9b0 <_strtod_l+0x33c>
 801e9ae:	e6b8      	b.n	801e722 <_strtod_l+0xae>
 801e9b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e9b2:	781b      	ldrb	r3, [r3, #0]
 801e9b4:	2b28      	cmp	r3, #40	@ 0x28
 801e9b6:	d12c      	bne.n	801ea12 <_strtod_l+0x39e>
 801e9b8:	49a0      	ldr	r1, [pc, #640]	@ (801ec3c <_strtod_l+0x5c8>)
 801e9ba:	aa20      	add	r2, sp, #128	@ 0x80
 801e9bc:	a81d      	add	r0, sp, #116	@ 0x74
 801e9be:	f002 fe33 	bl	8021628 <__hexnan>
 801e9c2:	2805      	cmp	r0, #5
 801e9c4:	d125      	bne.n	801ea12 <_strtod_l+0x39e>
 801e9c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801e9c8:	4a9d      	ldr	r2, [pc, #628]	@ (801ec40 <_strtod_l+0x5cc>)
 801e9ca:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801e9cc:	431a      	orrs	r2, r3
 801e9ce:	0017      	movs	r7, r2
 801e9d0:	e68b      	b.n	801e6ea <_strtod_l+0x76>
 801e9d2:	220a      	movs	r2, #10
 801e9d4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e9d6:	434a      	muls	r2, r1
 801e9d8:	18d2      	adds	r2, r2, r3
 801e9da:	3a30      	subs	r2, #48	@ 0x30
 801e9dc:	9210      	str	r2, [sp, #64]	@ 0x40
 801e9de:	e7b5      	b.n	801e94c <_strtod_l+0x2d8>
 801e9e0:	2b6e      	cmp	r3, #110	@ 0x6e
 801e9e2:	d0de      	beq.n	801e9a2 <_strtod_l+0x32e>
 801e9e4:	e69d      	b.n	801e722 <_strtod_l+0xae>
 801e9e6:	4997      	ldr	r1, [pc, #604]	@ (801ec44 <_strtod_l+0x5d0>)
 801e9e8:	a81d      	add	r0, sp, #116	@ 0x74
 801e9ea:	f002 fe09 	bl	8021600 <__match>
 801e9ee:	2800      	cmp	r0, #0
 801e9f0:	d100      	bne.n	801e9f4 <_strtod_l+0x380>
 801e9f2:	e696      	b.n	801e722 <_strtod_l+0xae>
 801e9f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801e9f6:	4994      	ldr	r1, [pc, #592]	@ (801ec48 <_strtod_l+0x5d4>)
 801e9f8:	3b01      	subs	r3, #1
 801e9fa:	a81d      	add	r0, sp, #116	@ 0x74
 801e9fc:	931d      	str	r3, [sp, #116]	@ 0x74
 801e9fe:	f002 fdff 	bl	8021600 <__match>
 801ea02:	2800      	cmp	r0, #0
 801ea04:	d102      	bne.n	801ea0c <_strtod_l+0x398>
 801ea06:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ea08:	3301      	adds	r3, #1
 801ea0a:	931d      	str	r3, [sp, #116]	@ 0x74
 801ea0c:	2600      	movs	r6, #0
 801ea0e:	4f8c      	ldr	r7, [pc, #560]	@ (801ec40 <_strtod_l+0x5cc>)
 801ea10:	e66b      	b.n	801e6ea <_strtod_l+0x76>
 801ea12:	488e      	ldr	r0, [pc, #568]	@ (801ec4c <_strtod_l+0x5d8>)
 801ea14:	f001 fc84 	bl	8020320 <nan>
 801ea18:	0006      	movs	r6, r0
 801ea1a:	000f      	movs	r7, r1
 801ea1c:	e665      	b.n	801e6ea <_strtod_l+0x76>
 801ea1e:	9b07      	ldr	r3, [sp, #28]
 801ea20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ea22:	1a9b      	subs	r3, r3, r2
 801ea24:	930c      	str	r3, [sp, #48]	@ 0x30
 801ea26:	9b08      	ldr	r3, [sp, #32]
 801ea28:	2b00      	cmp	r3, #0
 801ea2a:	d101      	bne.n	801ea30 <_strtod_l+0x3bc>
 801ea2c:	9b06      	ldr	r3, [sp, #24]
 801ea2e:	9308      	str	r3, [sp, #32]
 801ea30:	9c06      	ldr	r4, [sp, #24]
 801ea32:	2c10      	cmp	r4, #16
 801ea34:	dd00      	ble.n	801ea38 <_strtod_l+0x3c4>
 801ea36:	2410      	movs	r4, #16
 801ea38:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ea3a:	f7e4 fcef 	bl	800341c <__aeabi_ui2d>
 801ea3e:	9b06      	ldr	r3, [sp, #24]
 801ea40:	0006      	movs	r6, r0
 801ea42:	000f      	movs	r7, r1
 801ea44:	2b09      	cmp	r3, #9
 801ea46:	dc13      	bgt.n	801ea70 <_strtod_l+0x3fc>
 801ea48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ea4a:	2b00      	cmp	r3, #0
 801ea4c:	d100      	bne.n	801ea50 <_strtod_l+0x3dc>
 801ea4e:	e64c      	b.n	801e6ea <_strtod_l+0x76>
 801ea50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ea52:	2b00      	cmp	r3, #0
 801ea54:	dc00      	bgt.n	801ea58 <_strtod_l+0x3e4>
 801ea56:	e07e      	b.n	801eb56 <_strtod_l+0x4e2>
 801ea58:	2b16      	cmp	r3, #22
 801ea5a:	dc63      	bgt.n	801eb24 <_strtod_l+0x4b0>
 801ea5c:	497c      	ldr	r1, [pc, #496]	@ (801ec50 <_strtod_l+0x5dc>)
 801ea5e:	00db      	lsls	r3, r3, #3
 801ea60:	18c9      	adds	r1, r1, r3
 801ea62:	0032      	movs	r2, r6
 801ea64:	6808      	ldr	r0, [r1, #0]
 801ea66:	6849      	ldr	r1, [r1, #4]
 801ea68:	003b      	movs	r3, r7
 801ea6a:	f7e3 fde7 	bl	800263c <__aeabi_dmul>
 801ea6e:	e7d3      	b.n	801ea18 <_strtod_l+0x3a4>
 801ea70:	0022      	movs	r2, r4
 801ea72:	4b77      	ldr	r3, [pc, #476]	@ (801ec50 <_strtod_l+0x5dc>)
 801ea74:	3a09      	subs	r2, #9
 801ea76:	00d2      	lsls	r2, r2, #3
 801ea78:	189b      	adds	r3, r3, r2
 801ea7a:	681a      	ldr	r2, [r3, #0]
 801ea7c:	685b      	ldr	r3, [r3, #4]
 801ea7e:	f7e3 fddd 	bl	800263c <__aeabi_dmul>
 801ea82:	0006      	movs	r6, r0
 801ea84:	0028      	movs	r0, r5
 801ea86:	000f      	movs	r7, r1
 801ea88:	f7e4 fcc8 	bl	800341c <__aeabi_ui2d>
 801ea8c:	000b      	movs	r3, r1
 801ea8e:	0002      	movs	r2, r0
 801ea90:	0039      	movs	r1, r7
 801ea92:	0030      	movs	r0, r6
 801ea94:	f7e2 fe2a 	bl	80016ec <__aeabi_dadd>
 801ea98:	9b06      	ldr	r3, [sp, #24]
 801ea9a:	0006      	movs	r6, r0
 801ea9c:	000f      	movs	r7, r1
 801ea9e:	2b0f      	cmp	r3, #15
 801eaa0:	ddd2      	ble.n	801ea48 <_strtod_l+0x3d4>
 801eaa2:	9b06      	ldr	r3, [sp, #24]
 801eaa4:	1b1c      	subs	r4, r3, r4
 801eaa6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eaa8:	18e4      	adds	r4, r4, r3
 801eaaa:	2c00      	cmp	r4, #0
 801eaac:	dc00      	bgt.n	801eab0 <_strtod_l+0x43c>
 801eaae:	e09b      	b.n	801ebe8 <_strtod_l+0x574>
 801eab0:	220f      	movs	r2, #15
 801eab2:	0023      	movs	r3, r4
 801eab4:	4013      	ands	r3, r2
 801eab6:	4214      	tst	r4, r2
 801eab8:	d00a      	beq.n	801ead0 <_strtod_l+0x45c>
 801eaba:	4965      	ldr	r1, [pc, #404]	@ (801ec50 <_strtod_l+0x5dc>)
 801eabc:	00db      	lsls	r3, r3, #3
 801eabe:	18c9      	adds	r1, r1, r3
 801eac0:	0032      	movs	r2, r6
 801eac2:	6808      	ldr	r0, [r1, #0]
 801eac4:	6849      	ldr	r1, [r1, #4]
 801eac6:	003b      	movs	r3, r7
 801eac8:	f7e3 fdb8 	bl	800263c <__aeabi_dmul>
 801eacc:	0006      	movs	r6, r0
 801eace:	000f      	movs	r7, r1
 801ead0:	230f      	movs	r3, #15
 801ead2:	439c      	bics	r4, r3
 801ead4:	d073      	beq.n	801ebbe <_strtod_l+0x54a>
 801ead6:	3326      	adds	r3, #38	@ 0x26
 801ead8:	33ff      	adds	r3, #255	@ 0xff
 801eada:	429c      	cmp	r4, r3
 801eadc:	dd4b      	ble.n	801eb76 <_strtod_l+0x502>
 801eade:	2300      	movs	r3, #0
 801eae0:	9306      	str	r3, [sp, #24]
 801eae2:	9307      	str	r3, [sp, #28]
 801eae4:	930d      	str	r3, [sp, #52]	@ 0x34
 801eae6:	9308      	str	r3, [sp, #32]
 801eae8:	2322      	movs	r3, #34	@ 0x22
 801eaea:	2600      	movs	r6, #0
 801eaec:	9a05      	ldr	r2, [sp, #20]
 801eaee:	4f54      	ldr	r7, [pc, #336]	@ (801ec40 <_strtod_l+0x5cc>)
 801eaf0:	6013      	str	r3, [r2, #0]
 801eaf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eaf4:	42b3      	cmp	r3, r6
 801eaf6:	d100      	bne.n	801eafa <_strtod_l+0x486>
 801eaf8:	e5f7      	b.n	801e6ea <_strtod_l+0x76>
 801eafa:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801eafc:	9805      	ldr	r0, [sp, #20]
 801eafe:	f002 ff4d 	bl	802199c <_Bfree>
 801eb02:	9908      	ldr	r1, [sp, #32]
 801eb04:	9805      	ldr	r0, [sp, #20]
 801eb06:	f002 ff49 	bl	802199c <_Bfree>
 801eb0a:	9907      	ldr	r1, [sp, #28]
 801eb0c:	9805      	ldr	r0, [sp, #20]
 801eb0e:	f002 ff45 	bl	802199c <_Bfree>
 801eb12:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801eb14:	9805      	ldr	r0, [sp, #20]
 801eb16:	f002 ff41 	bl	802199c <_Bfree>
 801eb1a:	9906      	ldr	r1, [sp, #24]
 801eb1c:	9805      	ldr	r0, [sp, #20]
 801eb1e:	f002 ff3d 	bl	802199c <_Bfree>
 801eb22:	e5e2      	b.n	801e6ea <_strtod_l+0x76>
 801eb24:	2325      	movs	r3, #37	@ 0x25
 801eb26:	9a06      	ldr	r2, [sp, #24]
 801eb28:	1a9b      	subs	r3, r3, r2
 801eb2a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eb2c:	4293      	cmp	r3, r2
 801eb2e:	dbb8      	blt.n	801eaa2 <_strtod_l+0x42e>
 801eb30:	240f      	movs	r4, #15
 801eb32:	9b06      	ldr	r3, [sp, #24]
 801eb34:	4d46      	ldr	r5, [pc, #280]	@ (801ec50 <_strtod_l+0x5dc>)
 801eb36:	1ae4      	subs	r4, r4, r3
 801eb38:	00e1      	lsls	r1, r4, #3
 801eb3a:	1869      	adds	r1, r5, r1
 801eb3c:	0032      	movs	r2, r6
 801eb3e:	6808      	ldr	r0, [r1, #0]
 801eb40:	6849      	ldr	r1, [r1, #4]
 801eb42:	003b      	movs	r3, r7
 801eb44:	f7e3 fd7a 	bl	800263c <__aeabi_dmul>
 801eb48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb4a:	1b1c      	subs	r4, r3, r4
 801eb4c:	00e4      	lsls	r4, r4, #3
 801eb4e:	192d      	adds	r5, r5, r4
 801eb50:	682a      	ldr	r2, [r5, #0]
 801eb52:	686b      	ldr	r3, [r5, #4]
 801eb54:	e789      	b.n	801ea6a <_strtod_l+0x3f6>
 801eb56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb58:	3316      	adds	r3, #22
 801eb5a:	dba2      	blt.n	801eaa2 <_strtod_l+0x42e>
 801eb5c:	9907      	ldr	r1, [sp, #28]
 801eb5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801eb60:	4b3b      	ldr	r3, [pc, #236]	@ (801ec50 <_strtod_l+0x5dc>)
 801eb62:	1a52      	subs	r2, r2, r1
 801eb64:	00d2      	lsls	r2, r2, #3
 801eb66:	189b      	adds	r3, r3, r2
 801eb68:	0030      	movs	r0, r6
 801eb6a:	681a      	ldr	r2, [r3, #0]
 801eb6c:	685b      	ldr	r3, [r3, #4]
 801eb6e:	0039      	movs	r1, r7
 801eb70:	f7e3 f920 	bl	8001db4 <__aeabi_ddiv>
 801eb74:	e750      	b.n	801ea18 <_strtod_l+0x3a4>
 801eb76:	2300      	movs	r3, #0
 801eb78:	0030      	movs	r0, r6
 801eb7a:	0039      	movs	r1, r7
 801eb7c:	4d35      	ldr	r5, [pc, #212]	@ (801ec54 <_strtod_l+0x5e0>)
 801eb7e:	1124      	asrs	r4, r4, #4
 801eb80:	9309      	str	r3, [sp, #36]	@ 0x24
 801eb82:	2c01      	cmp	r4, #1
 801eb84:	dc1e      	bgt.n	801ebc4 <_strtod_l+0x550>
 801eb86:	2b00      	cmp	r3, #0
 801eb88:	d001      	beq.n	801eb8e <_strtod_l+0x51a>
 801eb8a:	0006      	movs	r6, r0
 801eb8c:	000f      	movs	r7, r1
 801eb8e:	4b32      	ldr	r3, [pc, #200]	@ (801ec58 <_strtod_l+0x5e4>)
 801eb90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eb92:	18ff      	adds	r7, r7, r3
 801eb94:	4b2f      	ldr	r3, [pc, #188]	@ (801ec54 <_strtod_l+0x5e0>)
 801eb96:	00d5      	lsls	r5, r2, #3
 801eb98:	195d      	adds	r5, r3, r5
 801eb9a:	0032      	movs	r2, r6
 801eb9c:	6828      	ldr	r0, [r5, #0]
 801eb9e:	6869      	ldr	r1, [r5, #4]
 801eba0:	003b      	movs	r3, r7
 801eba2:	f7e3 fd4b 	bl	800263c <__aeabi_dmul>
 801eba6:	4b26      	ldr	r3, [pc, #152]	@ (801ec40 <_strtod_l+0x5cc>)
 801eba8:	4a2c      	ldr	r2, [pc, #176]	@ (801ec5c <_strtod_l+0x5e8>)
 801ebaa:	0006      	movs	r6, r0
 801ebac:	400b      	ands	r3, r1
 801ebae:	4293      	cmp	r3, r2
 801ebb0:	d895      	bhi.n	801eade <_strtod_l+0x46a>
 801ebb2:	4a2b      	ldr	r2, [pc, #172]	@ (801ec60 <_strtod_l+0x5ec>)
 801ebb4:	4293      	cmp	r3, r2
 801ebb6:	d913      	bls.n	801ebe0 <_strtod_l+0x56c>
 801ebb8:	2601      	movs	r6, #1
 801ebba:	4f2a      	ldr	r7, [pc, #168]	@ (801ec64 <_strtod_l+0x5f0>)
 801ebbc:	4276      	negs	r6, r6
 801ebbe:	2300      	movs	r3, #0
 801ebc0:	9309      	str	r3, [sp, #36]	@ 0x24
 801ebc2:	e086      	b.n	801ecd2 <_strtod_l+0x65e>
 801ebc4:	2201      	movs	r2, #1
 801ebc6:	4214      	tst	r4, r2
 801ebc8:	d004      	beq.n	801ebd4 <_strtod_l+0x560>
 801ebca:	682a      	ldr	r2, [r5, #0]
 801ebcc:	686b      	ldr	r3, [r5, #4]
 801ebce:	f7e3 fd35 	bl	800263c <__aeabi_dmul>
 801ebd2:	2301      	movs	r3, #1
 801ebd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ebd6:	1064      	asrs	r4, r4, #1
 801ebd8:	3201      	adds	r2, #1
 801ebda:	9209      	str	r2, [sp, #36]	@ 0x24
 801ebdc:	3508      	adds	r5, #8
 801ebde:	e7d0      	b.n	801eb82 <_strtod_l+0x50e>
 801ebe0:	23d4      	movs	r3, #212	@ 0xd4
 801ebe2:	049b      	lsls	r3, r3, #18
 801ebe4:	18cf      	adds	r7, r1, r3
 801ebe6:	e7ea      	b.n	801ebbe <_strtod_l+0x54a>
 801ebe8:	2c00      	cmp	r4, #0
 801ebea:	d0e8      	beq.n	801ebbe <_strtod_l+0x54a>
 801ebec:	4264      	negs	r4, r4
 801ebee:	230f      	movs	r3, #15
 801ebf0:	0022      	movs	r2, r4
 801ebf2:	401a      	ands	r2, r3
 801ebf4:	421c      	tst	r4, r3
 801ebf6:	d00a      	beq.n	801ec0e <_strtod_l+0x59a>
 801ebf8:	4b15      	ldr	r3, [pc, #84]	@ (801ec50 <_strtod_l+0x5dc>)
 801ebfa:	00d2      	lsls	r2, r2, #3
 801ebfc:	189b      	adds	r3, r3, r2
 801ebfe:	0030      	movs	r0, r6
 801ec00:	681a      	ldr	r2, [r3, #0]
 801ec02:	685b      	ldr	r3, [r3, #4]
 801ec04:	0039      	movs	r1, r7
 801ec06:	f7e3 f8d5 	bl	8001db4 <__aeabi_ddiv>
 801ec0a:	0006      	movs	r6, r0
 801ec0c:	000f      	movs	r7, r1
 801ec0e:	1124      	asrs	r4, r4, #4
 801ec10:	d0d5      	beq.n	801ebbe <_strtod_l+0x54a>
 801ec12:	2c1f      	cmp	r4, #31
 801ec14:	dd28      	ble.n	801ec68 <_strtod_l+0x5f4>
 801ec16:	2300      	movs	r3, #0
 801ec18:	9306      	str	r3, [sp, #24]
 801ec1a:	9307      	str	r3, [sp, #28]
 801ec1c:	930d      	str	r3, [sp, #52]	@ 0x34
 801ec1e:	9308      	str	r3, [sp, #32]
 801ec20:	2322      	movs	r3, #34	@ 0x22
 801ec22:	9a05      	ldr	r2, [sp, #20]
 801ec24:	2600      	movs	r6, #0
 801ec26:	6013      	str	r3, [r2, #0]
 801ec28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ec2a:	2700      	movs	r7, #0
 801ec2c:	2b00      	cmp	r3, #0
 801ec2e:	d000      	beq.n	801ec32 <_strtod_l+0x5be>
 801ec30:	e763      	b.n	801eafa <_strtod_l+0x486>
 801ec32:	e55a      	b.n	801e6ea <_strtod_l+0x76>
 801ec34:	00004e1f 	.word	0x00004e1f
 801ec38:	08025c6e 	.word	0x08025c6e
 801ec3c:	08025b0c 	.word	0x08025b0c
 801ec40:	7ff00000 	.word	0x7ff00000
 801ec44:	08025c66 	.word	0x08025c66
 801ec48:	08025ca0 	.word	0x08025ca0
 801ec4c:	08025f2c 	.word	0x08025f2c
 801ec50:	08025e18 	.word	0x08025e18
 801ec54:	08025df0 	.word	0x08025df0
 801ec58:	fcb00000 	.word	0xfcb00000
 801ec5c:	7ca00000 	.word	0x7ca00000
 801ec60:	7c900000 	.word	0x7c900000
 801ec64:	7fefffff 	.word	0x7fefffff
 801ec68:	2310      	movs	r3, #16
 801ec6a:	0022      	movs	r2, r4
 801ec6c:	401a      	ands	r2, r3
 801ec6e:	9209      	str	r2, [sp, #36]	@ 0x24
 801ec70:	421c      	tst	r4, r3
 801ec72:	d001      	beq.n	801ec78 <_strtod_l+0x604>
 801ec74:	335a      	adds	r3, #90	@ 0x5a
 801ec76:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec78:	0030      	movs	r0, r6
 801ec7a:	0039      	movs	r1, r7
 801ec7c:	2300      	movs	r3, #0
 801ec7e:	4dbf      	ldr	r5, [pc, #764]	@ (801ef7c <_strtod_l+0x908>)
 801ec80:	2201      	movs	r2, #1
 801ec82:	4214      	tst	r4, r2
 801ec84:	d004      	beq.n	801ec90 <_strtod_l+0x61c>
 801ec86:	682a      	ldr	r2, [r5, #0]
 801ec88:	686b      	ldr	r3, [r5, #4]
 801ec8a:	f7e3 fcd7 	bl	800263c <__aeabi_dmul>
 801ec8e:	2301      	movs	r3, #1
 801ec90:	1064      	asrs	r4, r4, #1
 801ec92:	3508      	adds	r5, #8
 801ec94:	2c00      	cmp	r4, #0
 801ec96:	d1f3      	bne.n	801ec80 <_strtod_l+0x60c>
 801ec98:	2b00      	cmp	r3, #0
 801ec9a:	d001      	beq.n	801eca0 <_strtod_l+0x62c>
 801ec9c:	0006      	movs	r6, r0
 801ec9e:	000f      	movs	r7, r1
 801eca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eca2:	2b00      	cmp	r3, #0
 801eca4:	d00d      	beq.n	801ecc2 <_strtod_l+0x64e>
 801eca6:	236b      	movs	r3, #107	@ 0x6b
 801eca8:	007a      	lsls	r2, r7, #1
 801ecaa:	0d52      	lsrs	r2, r2, #21
 801ecac:	0039      	movs	r1, r7
 801ecae:	1a9b      	subs	r3, r3, r2
 801ecb0:	2b00      	cmp	r3, #0
 801ecb2:	dd06      	ble.n	801ecc2 <_strtod_l+0x64e>
 801ecb4:	2b1f      	cmp	r3, #31
 801ecb6:	dd5a      	ble.n	801ed6e <_strtod_l+0x6fa>
 801ecb8:	2600      	movs	r6, #0
 801ecba:	2b34      	cmp	r3, #52	@ 0x34
 801ecbc:	dd50      	ble.n	801ed60 <_strtod_l+0x6ec>
 801ecbe:	27dc      	movs	r7, #220	@ 0xdc
 801ecc0:	04bf      	lsls	r7, r7, #18
 801ecc2:	2200      	movs	r2, #0
 801ecc4:	2300      	movs	r3, #0
 801ecc6:	0030      	movs	r0, r6
 801ecc8:	0039      	movs	r1, r7
 801ecca:	f7e1 fbf1 	bl	80004b0 <__aeabi_dcmpeq>
 801ecce:	2800      	cmp	r0, #0
 801ecd0:	d1a1      	bne.n	801ec16 <_strtod_l+0x5a2>
 801ecd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ecd4:	9a08      	ldr	r2, [sp, #32]
 801ecd6:	9300      	str	r3, [sp, #0]
 801ecd8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ecda:	9b06      	ldr	r3, [sp, #24]
 801ecdc:	9805      	ldr	r0, [sp, #20]
 801ecde:	f002 fec5 	bl	8021a6c <__s2b>
 801ece2:	900d      	str	r0, [sp, #52]	@ 0x34
 801ece4:	2800      	cmp	r0, #0
 801ece6:	d100      	bne.n	801ecea <_strtod_l+0x676>
 801ece8:	e6f9      	b.n	801eade <_strtod_l+0x46a>
 801ecea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ecec:	9907      	ldr	r1, [sp, #28]
 801ecee:	17da      	asrs	r2, r3, #31
 801ecf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ecf2:	1a5b      	subs	r3, r3, r1
 801ecf4:	401a      	ands	r2, r3
 801ecf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ecf8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801ecfa:	43db      	mvns	r3, r3
 801ecfc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ecfe:	17db      	asrs	r3, r3, #31
 801ed00:	401a      	ands	r2, r3
 801ed02:	2300      	movs	r3, #0
 801ed04:	921a      	str	r2, [sp, #104]	@ 0x68
 801ed06:	9306      	str	r3, [sp, #24]
 801ed08:	9307      	str	r3, [sp, #28]
 801ed0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ed0c:	9805      	ldr	r0, [sp, #20]
 801ed0e:	6859      	ldr	r1, [r3, #4]
 801ed10:	f002 fe00 	bl	8021914 <_Balloc>
 801ed14:	9008      	str	r0, [sp, #32]
 801ed16:	2800      	cmp	r0, #0
 801ed18:	d100      	bne.n	801ed1c <_strtod_l+0x6a8>
 801ed1a:	e6e5      	b.n	801eae8 <_strtod_l+0x474>
 801ed1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ed1e:	300c      	adds	r0, #12
 801ed20:	0019      	movs	r1, r3
 801ed22:	691a      	ldr	r2, [r3, #16]
 801ed24:	310c      	adds	r1, #12
 801ed26:	3202      	adds	r2, #2
 801ed28:	0092      	lsls	r2, r2, #2
 801ed2a:	f001 faef 	bl	802030c <memcpy>
 801ed2e:	ab20      	add	r3, sp, #128	@ 0x80
 801ed30:	9301      	str	r3, [sp, #4]
 801ed32:	ab1f      	add	r3, sp, #124	@ 0x7c
 801ed34:	9300      	str	r3, [sp, #0]
 801ed36:	0032      	movs	r2, r6
 801ed38:	003b      	movs	r3, r7
 801ed3a:	9805      	ldr	r0, [sp, #20]
 801ed3c:	9610      	str	r6, [sp, #64]	@ 0x40
 801ed3e:	9711      	str	r7, [sp, #68]	@ 0x44
 801ed40:	f003 f9e4 	bl	802210c <__d2b>
 801ed44:	901e      	str	r0, [sp, #120]	@ 0x78
 801ed46:	2800      	cmp	r0, #0
 801ed48:	d100      	bne.n	801ed4c <_strtod_l+0x6d8>
 801ed4a:	e6cd      	b.n	801eae8 <_strtod_l+0x474>
 801ed4c:	2101      	movs	r1, #1
 801ed4e:	9805      	ldr	r0, [sp, #20]
 801ed50:	f002 ff28 	bl	8021ba4 <__i2b>
 801ed54:	9007      	str	r0, [sp, #28]
 801ed56:	2800      	cmp	r0, #0
 801ed58:	d10e      	bne.n	801ed78 <_strtod_l+0x704>
 801ed5a:	2300      	movs	r3, #0
 801ed5c:	9307      	str	r3, [sp, #28]
 801ed5e:	e6c3      	b.n	801eae8 <_strtod_l+0x474>
 801ed60:	234b      	movs	r3, #75	@ 0x4b
 801ed62:	1a9a      	subs	r2, r3, r2
 801ed64:	3b4c      	subs	r3, #76	@ 0x4c
 801ed66:	4093      	lsls	r3, r2
 801ed68:	4019      	ands	r1, r3
 801ed6a:	000f      	movs	r7, r1
 801ed6c:	e7a9      	b.n	801ecc2 <_strtod_l+0x64e>
 801ed6e:	2201      	movs	r2, #1
 801ed70:	4252      	negs	r2, r2
 801ed72:	409a      	lsls	r2, r3
 801ed74:	4016      	ands	r6, r2
 801ed76:	e7a4      	b.n	801ecc2 <_strtod_l+0x64e>
 801ed78:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ed7a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ed7c:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801ed7e:	1ad4      	subs	r4, r2, r3
 801ed80:	2b00      	cmp	r3, #0
 801ed82:	db01      	blt.n	801ed88 <_strtod_l+0x714>
 801ed84:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801ed86:	195d      	adds	r5, r3, r5
 801ed88:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ed8a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801ed8c:	1a5b      	subs	r3, r3, r1
 801ed8e:	2136      	movs	r1, #54	@ 0x36
 801ed90:	189b      	adds	r3, r3, r2
 801ed92:	1a8a      	subs	r2, r1, r2
 801ed94:	497a      	ldr	r1, [pc, #488]	@ (801ef80 <_strtod_l+0x90c>)
 801ed96:	2001      	movs	r0, #1
 801ed98:	468c      	mov	ip, r1
 801ed9a:	2100      	movs	r1, #0
 801ed9c:	3b01      	subs	r3, #1
 801ed9e:	9116      	str	r1, [sp, #88]	@ 0x58
 801eda0:	9014      	str	r0, [sp, #80]	@ 0x50
 801eda2:	4563      	cmp	r3, ip
 801eda4:	da06      	bge.n	801edb4 <_strtod_l+0x740>
 801eda6:	4661      	mov	r1, ip
 801eda8:	1ac9      	subs	r1, r1, r3
 801edaa:	1a52      	subs	r2, r2, r1
 801edac:	291f      	cmp	r1, #31
 801edae:	dc3f      	bgt.n	801ee30 <_strtod_l+0x7bc>
 801edb0:	4088      	lsls	r0, r1
 801edb2:	9014      	str	r0, [sp, #80]	@ 0x50
 801edb4:	18ab      	adds	r3, r5, r2
 801edb6:	930e      	str	r3, [sp, #56]	@ 0x38
 801edb8:	18a4      	adds	r4, r4, r2
 801edba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801edbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801edbe:	191c      	adds	r4, r3, r4
 801edc0:	002b      	movs	r3, r5
 801edc2:	4295      	cmp	r5, r2
 801edc4:	dd00      	ble.n	801edc8 <_strtod_l+0x754>
 801edc6:	0013      	movs	r3, r2
 801edc8:	42a3      	cmp	r3, r4
 801edca:	dd00      	ble.n	801edce <_strtod_l+0x75a>
 801edcc:	0023      	movs	r3, r4
 801edce:	2b00      	cmp	r3, #0
 801edd0:	dd04      	ble.n	801eddc <_strtod_l+0x768>
 801edd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801edd4:	1ae4      	subs	r4, r4, r3
 801edd6:	1ad2      	subs	r2, r2, r3
 801edd8:	920e      	str	r2, [sp, #56]	@ 0x38
 801edda:	1aed      	subs	r5, r5, r3
 801eddc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801edde:	2b00      	cmp	r3, #0
 801ede0:	dd16      	ble.n	801ee10 <_strtod_l+0x79c>
 801ede2:	001a      	movs	r2, r3
 801ede4:	9907      	ldr	r1, [sp, #28]
 801ede6:	9805      	ldr	r0, [sp, #20]
 801ede8:	f002 ffa6 	bl	8021d38 <__pow5mult>
 801edec:	9007      	str	r0, [sp, #28]
 801edee:	2800      	cmp	r0, #0
 801edf0:	d0b3      	beq.n	801ed5a <_strtod_l+0x6e6>
 801edf2:	0001      	movs	r1, r0
 801edf4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801edf6:	9805      	ldr	r0, [sp, #20]
 801edf8:	f002 feec 	bl	8021bd4 <__multiply>
 801edfc:	9013      	str	r0, [sp, #76]	@ 0x4c
 801edfe:	2800      	cmp	r0, #0
 801ee00:	d100      	bne.n	801ee04 <_strtod_l+0x790>
 801ee02:	e671      	b.n	801eae8 <_strtod_l+0x474>
 801ee04:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ee06:	9805      	ldr	r0, [sp, #20]
 801ee08:	f002 fdc8 	bl	802199c <_Bfree>
 801ee0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ee0e:	931e      	str	r3, [sp, #120]	@ 0x78
 801ee10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee12:	2b00      	cmp	r3, #0
 801ee14:	dc12      	bgt.n	801ee3c <_strtod_l+0x7c8>
 801ee16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ee18:	2b00      	cmp	r3, #0
 801ee1a:	dd18      	ble.n	801ee4e <_strtod_l+0x7da>
 801ee1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ee1e:	9908      	ldr	r1, [sp, #32]
 801ee20:	9805      	ldr	r0, [sp, #20]
 801ee22:	f002 ff89 	bl	8021d38 <__pow5mult>
 801ee26:	9008      	str	r0, [sp, #32]
 801ee28:	2800      	cmp	r0, #0
 801ee2a:	d110      	bne.n	801ee4e <_strtod_l+0x7da>
 801ee2c:	2300      	movs	r3, #0
 801ee2e:	e65a      	b.n	801eae6 <_strtod_l+0x472>
 801ee30:	4954      	ldr	r1, [pc, #336]	@ (801ef84 <_strtod_l+0x910>)
 801ee32:	1acb      	subs	r3, r1, r3
 801ee34:	0001      	movs	r1, r0
 801ee36:	4099      	lsls	r1, r3
 801ee38:	9116      	str	r1, [sp, #88]	@ 0x58
 801ee3a:	e7ba      	b.n	801edb2 <_strtod_l+0x73e>
 801ee3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ee3e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ee40:	9805      	ldr	r0, [sp, #20]
 801ee42:	f002 ffd5 	bl	8021df0 <__lshift>
 801ee46:	901e      	str	r0, [sp, #120]	@ 0x78
 801ee48:	2800      	cmp	r0, #0
 801ee4a:	d1e4      	bne.n	801ee16 <_strtod_l+0x7a2>
 801ee4c:	e64c      	b.n	801eae8 <_strtod_l+0x474>
 801ee4e:	2c00      	cmp	r4, #0
 801ee50:	dd07      	ble.n	801ee62 <_strtod_l+0x7ee>
 801ee52:	0022      	movs	r2, r4
 801ee54:	9908      	ldr	r1, [sp, #32]
 801ee56:	9805      	ldr	r0, [sp, #20]
 801ee58:	f002 ffca 	bl	8021df0 <__lshift>
 801ee5c:	9008      	str	r0, [sp, #32]
 801ee5e:	2800      	cmp	r0, #0
 801ee60:	d0e4      	beq.n	801ee2c <_strtod_l+0x7b8>
 801ee62:	2d00      	cmp	r5, #0
 801ee64:	dd08      	ble.n	801ee78 <_strtod_l+0x804>
 801ee66:	002a      	movs	r2, r5
 801ee68:	9907      	ldr	r1, [sp, #28]
 801ee6a:	9805      	ldr	r0, [sp, #20]
 801ee6c:	f002 ffc0 	bl	8021df0 <__lshift>
 801ee70:	9007      	str	r0, [sp, #28]
 801ee72:	2800      	cmp	r0, #0
 801ee74:	d100      	bne.n	801ee78 <_strtod_l+0x804>
 801ee76:	e637      	b.n	801eae8 <_strtod_l+0x474>
 801ee78:	9a08      	ldr	r2, [sp, #32]
 801ee7a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ee7c:	9805      	ldr	r0, [sp, #20]
 801ee7e:	f003 f83f 	bl	8021f00 <__mdiff>
 801ee82:	9006      	str	r0, [sp, #24]
 801ee84:	2800      	cmp	r0, #0
 801ee86:	d100      	bne.n	801ee8a <_strtod_l+0x816>
 801ee88:	e62e      	b.n	801eae8 <_strtod_l+0x474>
 801ee8a:	68c3      	ldr	r3, [r0, #12]
 801ee8c:	9907      	ldr	r1, [sp, #28]
 801ee8e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ee90:	2300      	movs	r3, #0
 801ee92:	60c3      	str	r3, [r0, #12]
 801ee94:	f003 f818 	bl	8021ec8 <__mcmp>
 801ee98:	2800      	cmp	r0, #0
 801ee9a:	da3b      	bge.n	801ef14 <_strtod_l+0x8a0>
 801ee9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ee9e:	4333      	orrs	r3, r6
 801eea0:	d167      	bne.n	801ef72 <_strtod_l+0x8fe>
 801eea2:	033b      	lsls	r3, r7, #12
 801eea4:	d165      	bne.n	801ef72 <_strtod_l+0x8fe>
 801eea6:	22d6      	movs	r2, #214	@ 0xd6
 801eea8:	4b37      	ldr	r3, [pc, #220]	@ (801ef88 <_strtod_l+0x914>)
 801eeaa:	04d2      	lsls	r2, r2, #19
 801eeac:	403b      	ands	r3, r7
 801eeae:	4293      	cmp	r3, r2
 801eeb0:	d95f      	bls.n	801ef72 <_strtod_l+0x8fe>
 801eeb2:	9b06      	ldr	r3, [sp, #24]
 801eeb4:	695b      	ldr	r3, [r3, #20]
 801eeb6:	2b00      	cmp	r3, #0
 801eeb8:	d103      	bne.n	801eec2 <_strtod_l+0x84e>
 801eeba:	9b06      	ldr	r3, [sp, #24]
 801eebc:	691b      	ldr	r3, [r3, #16]
 801eebe:	2b01      	cmp	r3, #1
 801eec0:	dd57      	ble.n	801ef72 <_strtod_l+0x8fe>
 801eec2:	9906      	ldr	r1, [sp, #24]
 801eec4:	2201      	movs	r2, #1
 801eec6:	9805      	ldr	r0, [sp, #20]
 801eec8:	f002 ff92 	bl	8021df0 <__lshift>
 801eecc:	9907      	ldr	r1, [sp, #28]
 801eece:	9006      	str	r0, [sp, #24]
 801eed0:	f002 fffa 	bl	8021ec8 <__mcmp>
 801eed4:	2800      	cmp	r0, #0
 801eed6:	dd4c      	ble.n	801ef72 <_strtod_l+0x8fe>
 801eed8:	4b2b      	ldr	r3, [pc, #172]	@ (801ef88 <_strtod_l+0x914>)
 801eeda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eedc:	403b      	ands	r3, r7
 801eede:	2a00      	cmp	r2, #0
 801eee0:	d074      	beq.n	801efcc <_strtod_l+0x958>
 801eee2:	22d6      	movs	r2, #214	@ 0xd6
 801eee4:	04d2      	lsls	r2, r2, #19
 801eee6:	4293      	cmp	r3, r2
 801eee8:	d870      	bhi.n	801efcc <_strtod_l+0x958>
 801eeea:	22dc      	movs	r2, #220	@ 0xdc
 801eeec:	0492      	lsls	r2, r2, #18
 801eeee:	4293      	cmp	r3, r2
 801eef0:	d800      	bhi.n	801eef4 <_strtod_l+0x880>
 801eef2:	e695      	b.n	801ec20 <_strtod_l+0x5ac>
 801eef4:	0030      	movs	r0, r6
 801eef6:	0039      	movs	r1, r7
 801eef8:	4b24      	ldr	r3, [pc, #144]	@ (801ef8c <_strtod_l+0x918>)
 801eefa:	2200      	movs	r2, #0
 801eefc:	f7e3 fb9e 	bl	800263c <__aeabi_dmul>
 801ef00:	4b21      	ldr	r3, [pc, #132]	@ (801ef88 <_strtod_l+0x914>)
 801ef02:	0006      	movs	r6, r0
 801ef04:	000f      	movs	r7, r1
 801ef06:	420b      	tst	r3, r1
 801ef08:	d000      	beq.n	801ef0c <_strtod_l+0x898>
 801ef0a:	e5f6      	b.n	801eafa <_strtod_l+0x486>
 801ef0c:	2322      	movs	r3, #34	@ 0x22
 801ef0e:	9a05      	ldr	r2, [sp, #20]
 801ef10:	6013      	str	r3, [r2, #0]
 801ef12:	e5f2      	b.n	801eafa <_strtod_l+0x486>
 801ef14:	970e      	str	r7, [sp, #56]	@ 0x38
 801ef16:	2800      	cmp	r0, #0
 801ef18:	d175      	bne.n	801f006 <_strtod_l+0x992>
 801ef1a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ef1c:	033b      	lsls	r3, r7, #12
 801ef1e:	0b1b      	lsrs	r3, r3, #12
 801ef20:	2a00      	cmp	r2, #0
 801ef22:	d039      	beq.n	801ef98 <_strtod_l+0x924>
 801ef24:	4a1a      	ldr	r2, [pc, #104]	@ (801ef90 <_strtod_l+0x91c>)
 801ef26:	4293      	cmp	r3, r2
 801ef28:	d138      	bne.n	801ef9c <_strtod_l+0x928>
 801ef2a:	2101      	movs	r1, #1
 801ef2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef2e:	4249      	negs	r1, r1
 801ef30:	0032      	movs	r2, r6
 801ef32:	0008      	movs	r0, r1
 801ef34:	2b00      	cmp	r3, #0
 801ef36:	d00b      	beq.n	801ef50 <_strtod_l+0x8dc>
 801ef38:	24d4      	movs	r4, #212	@ 0xd4
 801ef3a:	4b13      	ldr	r3, [pc, #76]	@ (801ef88 <_strtod_l+0x914>)
 801ef3c:	0008      	movs	r0, r1
 801ef3e:	403b      	ands	r3, r7
 801ef40:	04e4      	lsls	r4, r4, #19
 801ef42:	42a3      	cmp	r3, r4
 801ef44:	d804      	bhi.n	801ef50 <_strtod_l+0x8dc>
 801ef46:	306c      	adds	r0, #108	@ 0x6c
 801ef48:	0d1b      	lsrs	r3, r3, #20
 801ef4a:	1ac3      	subs	r3, r0, r3
 801ef4c:	4099      	lsls	r1, r3
 801ef4e:	0008      	movs	r0, r1
 801ef50:	4282      	cmp	r2, r0
 801ef52:	d123      	bne.n	801ef9c <_strtod_l+0x928>
 801ef54:	4b0f      	ldr	r3, [pc, #60]	@ (801ef94 <_strtod_l+0x920>)
 801ef56:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ef58:	4299      	cmp	r1, r3
 801ef5a:	d102      	bne.n	801ef62 <_strtod_l+0x8ee>
 801ef5c:	3201      	adds	r2, #1
 801ef5e:	d100      	bne.n	801ef62 <_strtod_l+0x8ee>
 801ef60:	e5c2      	b.n	801eae8 <_strtod_l+0x474>
 801ef62:	4b09      	ldr	r3, [pc, #36]	@ (801ef88 <_strtod_l+0x914>)
 801ef64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ef66:	2600      	movs	r6, #0
 801ef68:	401a      	ands	r2, r3
 801ef6a:	0013      	movs	r3, r2
 801ef6c:	2280      	movs	r2, #128	@ 0x80
 801ef6e:	0352      	lsls	r2, r2, #13
 801ef70:	189f      	adds	r7, r3, r2
 801ef72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef74:	2b00      	cmp	r3, #0
 801ef76:	d1bd      	bne.n	801eef4 <_strtod_l+0x880>
 801ef78:	e5bf      	b.n	801eafa <_strtod_l+0x486>
 801ef7a:	46c0      	nop			@ (mov r8, r8)
 801ef7c:	08025b38 	.word	0x08025b38
 801ef80:	fffffc02 	.word	0xfffffc02
 801ef84:	fffffbe2 	.word	0xfffffbe2
 801ef88:	7ff00000 	.word	0x7ff00000
 801ef8c:	39500000 	.word	0x39500000
 801ef90:	000fffff 	.word	0x000fffff
 801ef94:	7fefffff 	.word	0x7fefffff
 801ef98:	4333      	orrs	r3, r6
 801ef9a:	d09d      	beq.n	801eed8 <_strtod_l+0x864>
 801ef9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ef9e:	2b00      	cmp	r3, #0
 801efa0:	d01c      	beq.n	801efdc <_strtod_l+0x968>
 801efa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801efa4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801efa6:	4213      	tst	r3, r2
 801efa8:	d0e3      	beq.n	801ef72 <_strtod_l+0x8fe>
 801efaa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801efac:	0030      	movs	r0, r6
 801efae:	0039      	movs	r1, r7
 801efb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801efb2:	2b00      	cmp	r3, #0
 801efb4:	d016      	beq.n	801efe4 <_strtod_l+0x970>
 801efb6:	f7ff fb45 	bl	801e644 <sulp>
 801efba:	0002      	movs	r2, r0
 801efbc:	000b      	movs	r3, r1
 801efbe:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801efc0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801efc2:	f7e2 fb93 	bl	80016ec <__aeabi_dadd>
 801efc6:	0006      	movs	r6, r0
 801efc8:	000f      	movs	r7, r1
 801efca:	e7d2      	b.n	801ef72 <_strtod_l+0x8fe>
 801efcc:	2601      	movs	r6, #1
 801efce:	4a92      	ldr	r2, [pc, #584]	@ (801f218 <_strtod_l+0xba4>)
 801efd0:	4276      	negs	r6, r6
 801efd2:	189b      	adds	r3, r3, r2
 801efd4:	4a91      	ldr	r2, [pc, #580]	@ (801f21c <_strtod_l+0xba8>)
 801efd6:	431a      	orrs	r2, r3
 801efd8:	0017      	movs	r7, r2
 801efda:	e7ca      	b.n	801ef72 <_strtod_l+0x8fe>
 801efdc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801efde:	4233      	tst	r3, r6
 801efe0:	d0c7      	beq.n	801ef72 <_strtod_l+0x8fe>
 801efe2:	e7e2      	b.n	801efaa <_strtod_l+0x936>
 801efe4:	f7ff fb2e 	bl	801e644 <sulp>
 801efe8:	0002      	movs	r2, r0
 801efea:	000b      	movs	r3, r1
 801efec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801efee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801eff0:	f7e3 fdec 	bl	8002bcc <__aeabi_dsub>
 801eff4:	2200      	movs	r2, #0
 801eff6:	2300      	movs	r3, #0
 801eff8:	0006      	movs	r6, r0
 801effa:	000f      	movs	r7, r1
 801effc:	f7e1 fa58 	bl	80004b0 <__aeabi_dcmpeq>
 801f000:	2800      	cmp	r0, #0
 801f002:	d0b6      	beq.n	801ef72 <_strtod_l+0x8fe>
 801f004:	e60c      	b.n	801ec20 <_strtod_l+0x5ac>
 801f006:	9907      	ldr	r1, [sp, #28]
 801f008:	9806      	ldr	r0, [sp, #24]
 801f00a:	f003 f8df 	bl	80221cc <__ratio>
 801f00e:	2380      	movs	r3, #128	@ 0x80
 801f010:	2200      	movs	r2, #0
 801f012:	05db      	lsls	r3, r3, #23
 801f014:	0004      	movs	r4, r0
 801f016:	000d      	movs	r5, r1
 801f018:	f7e1 fa5a 	bl	80004d0 <__aeabi_dcmple>
 801f01c:	2800      	cmp	r0, #0
 801f01e:	d06c      	beq.n	801f0fa <_strtod_l+0xa86>
 801f020:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f022:	2b00      	cmp	r3, #0
 801f024:	d177      	bne.n	801f116 <_strtod_l+0xaa2>
 801f026:	2e00      	cmp	r6, #0
 801f028:	d157      	bne.n	801f0da <_strtod_l+0xa66>
 801f02a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f02c:	031b      	lsls	r3, r3, #12
 801f02e:	d15a      	bne.n	801f0e6 <_strtod_l+0xa72>
 801f030:	2200      	movs	r2, #0
 801f032:	0020      	movs	r0, r4
 801f034:	0029      	movs	r1, r5
 801f036:	4b7a      	ldr	r3, [pc, #488]	@ (801f220 <_strtod_l+0xbac>)
 801f038:	f7e1 fa40 	bl	80004bc <__aeabi_dcmplt>
 801f03c:	2800      	cmp	r0, #0
 801f03e:	d159      	bne.n	801f0f4 <_strtod_l+0xa80>
 801f040:	0020      	movs	r0, r4
 801f042:	0029      	movs	r1, r5
 801f044:	2200      	movs	r2, #0
 801f046:	4b77      	ldr	r3, [pc, #476]	@ (801f224 <_strtod_l+0xbb0>)
 801f048:	f7e3 faf8 	bl	800263c <__aeabi_dmul>
 801f04c:	0004      	movs	r4, r0
 801f04e:	000d      	movs	r5, r1
 801f050:	2380      	movs	r3, #128	@ 0x80
 801f052:	061b      	lsls	r3, r3, #24
 801f054:	18eb      	adds	r3, r5, r3
 801f056:	940a      	str	r4, [sp, #40]	@ 0x28
 801f058:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f05a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f05c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f05e:	9214      	str	r2, [sp, #80]	@ 0x50
 801f060:	9315      	str	r3, [sp, #84]	@ 0x54
 801f062:	4a71      	ldr	r2, [pc, #452]	@ (801f228 <_strtod_l+0xbb4>)
 801f064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f066:	4013      	ands	r3, r2
 801f068:	9316      	str	r3, [sp, #88]	@ 0x58
 801f06a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f06c:	4b6f      	ldr	r3, [pc, #444]	@ (801f22c <_strtod_l+0xbb8>)
 801f06e:	429a      	cmp	r2, r3
 801f070:	d000      	beq.n	801f074 <_strtod_l+0xa00>
 801f072:	e087      	b.n	801f184 <_strtod_l+0xb10>
 801f074:	4a6e      	ldr	r2, [pc, #440]	@ (801f230 <_strtod_l+0xbbc>)
 801f076:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f078:	4694      	mov	ip, r2
 801f07a:	4463      	add	r3, ip
 801f07c:	001f      	movs	r7, r3
 801f07e:	0030      	movs	r0, r6
 801f080:	0019      	movs	r1, r3
 801f082:	f002 ffd7 	bl	8022034 <__ulp>
 801f086:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f088:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f08a:	f7e3 fad7 	bl	800263c <__aeabi_dmul>
 801f08e:	0032      	movs	r2, r6
 801f090:	003b      	movs	r3, r7
 801f092:	f7e2 fb2b 	bl	80016ec <__aeabi_dadd>
 801f096:	4a64      	ldr	r2, [pc, #400]	@ (801f228 <_strtod_l+0xbb4>)
 801f098:	4b66      	ldr	r3, [pc, #408]	@ (801f234 <_strtod_l+0xbc0>)
 801f09a:	0006      	movs	r6, r0
 801f09c:	400a      	ands	r2, r1
 801f09e:	429a      	cmp	r2, r3
 801f0a0:	d940      	bls.n	801f124 <_strtod_l+0xab0>
 801f0a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f0a4:	4a64      	ldr	r2, [pc, #400]	@ (801f238 <_strtod_l+0xbc4>)
 801f0a6:	4293      	cmp	r3, r2
 801f0a8:	d103      	bne.n	801f0b2 <_strtod_l+0xa3e>
 801f0aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f0ac:	3301      	adds	r3, #1
 801f0ae:	d100      	bne.n	801f0b2 <_strtod_l+0xa3e>
 801f0b0:	e51a      	b.n	801eae8 <_strtod_l+0x474>
 801f0b2:	2601      	movs	r6, #1
 801f0b4:	4f60      	ldr	r7, [pc, #384]	@ (801f238 <_strtod_l+0xbc4>)
 801f0b6:	4276      	negs	r6, r6
 801f0b8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801f0ba:	9805      	ldr	r0, [sp, #20]
 801f0bc:	f002 fc6e 	bl	802199c <_Bfree>
 801f0c0:	9908      	ldr	r1, [sp, #32]
 801f0c2:	9805      	ldr	r0, [sp, #20]
 801f0c4:	f002 fc6a 	bl	802199c <_Bfree>
 801f0c8:	9907      	ldr	r1, [sp, #28]
 801f0ca:	9805      	ldr	r0, [sp, #20]
 801f0cc:	f002 fc66 	bl	802199c <_Bfree>
 801f0d0:	9906      	ldr	r1, [sp, #24]
 801f0d2:	9805      	ldr	r0, [sp, #20]
 801f0d4:	f002 fc62 	bl	802199c <_Bfree>
 801f0d8:	e617      	b.n	801ed0a <_strtod_l+0x696>
 801f0da:	2e01      	cmp	r6, #1
 801f0dc:	d103      	bne.n	801f0e6 <_strtod_l+0xa72>
 801f0de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f0e0:	2b00      	cmp	r3, #0
 801f0e2:	d100      	bne.n	801f0e6 <_strtod_l+0xa72>
 801f0e4:	e59c      	b.n	801ec20 <_strtod_l+0x5ac>
 801f0e6:	2300      	movs	r3, #0
 801f0e8:	4c54      	ldr	r4, [pc, #336]	@ (801f23c <_strtod_l+0xbc8>)
 801f0ea:	4d4d      	ldr	r5, [pc, #308]	@ (801f220 <_strtod_l+0xbac>)
 801f0ec:	930a      	str	r3, [sp, #40]	@ 0x28
 801f0ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f0f0:	2400      	movs	r4, #0
 801f0f2:	e7b2      	b.n	801f05a <_strtod_l+0x9e6>
 801f0f4:	2400      	movs	r4, #0
 801f0f6:	4d4b      	ldr	r5, [pc, #300]	@ (801f224 <_strtod_l+0xbb0>)
 801f0f8:	e7aa      	b.n	801f050 <_strtod_l+0x9dc>
 801f0fa:	0020      	movs	r0, r4
 801f0fc:	0029      	movs	r1, r5
 801f0fe:	4b49      	ldr	r3, [pc, #292]	@ (801f224 <_strtod_l+0xbb0>)
 801f100:	2200      	movs	r2, #0
 801f102:	f7e3 fa9b 	bl	800263c <__aeabi_dmul>
 801f106:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f108:	0004      	movs	r4, r0
 801f10a:	000d      	movs	r5, r1
 801f10c:	2b00      	cmp	r3, #0
 801f10e:	d09f      	beq.n	801f050 <_strtod_l+0x9dc>
 801f110:	940a      	str	r4, [sp, #40]	@ 0x28
 801f112:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f114:	e7a1      	b.n	801f05a <_strtod_l+0x9e6>
 801f116:	2300      	movs	r3, #0
 801f118:	4c41      	ldr	r4, [pc, #260]	@ (801f220 <_strtod_l+0xbac>)
 801f11a:	0025      	movs	r5, r4
 801f11c:	930a      	str	r3, [sp, #40]	@ 0x28
 801f11e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f120:	001c      	movs	r4, r3
 801f122:	e79a      	b.n	801f05a <_strtod_l+0x9e6>
 801f124:	23d4      	movs	r3, #212	@ 0xd4
 801f126:	049b      	lsls	r3, r3, #18
 801f128:	18cf      	adds	r7, r1, r3
 801f12a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f12c:	9710      	str	r7, [sp, #64]	@ 0x40
 801f12e:	2b00      	cmp	r3, #0
 801f130:	d1c2      	bne.n	801f0b8 <_strtod_l+0xa44>
 801f132:	4b3d      	ldr	r3, [pc, #244]	@ (801f228 <_strtod_l+0xbb4>)
 801f134:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f136:	403b      	ands	r3, r7
 801f138:	429a      	cmp	r2, r3
 801f13a:	d1bd      	bne.n	801f0b8 <_strtod_l+0xa44>
 801f13c:	0020      	movs	r0, r4
 801f13e:	0029      	movs	r1, r5
 801f140:	f7e1 faa2 	bl	8000688 <__aeabi_d2lz>
 801f144:	f7e1 fada 	bl	80006fc <__aeabi_l2d>
 801f148:	0002      	movs	r2, r0
 801f14a:	000b      	movs	r3, r1
 801f14c:	0020      	movs	r0, r4
 801f14e:	0029      	movs	r1, r5
 801f150:	f7e3 fd3c 	bl	8002bcc <__aeabi_dsub>
 801f154:	033c      	lsls	r4, r7, #12
 801f156:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f158:	0b24      	lsrs	r4, r4, #12
 801f15a:	4334      	orrs	r4, r6
 801f15c:	900e      	str	r0, [sp, #56]	@ 0x38
 801f15e:	910f      	str	r1, [sp, #60]	@ 0x3c
 801f160:	4a37      	ldr	r2, [pc, #220]	@ (801f240 <_strtod_l+0xbcc>)
 801f162:	431c      	orrs	r4, r3
 801f164:	d052      	beq.n	801f20c <_strtod_l+0xb98>
 801f166:	4b37      	ldr	r3, [pc, #220]	@ (801f244 <_strtod_l+0xbd0>)
 801f168:	f7e1 f9a8 	bl	80004bc <__aeabi_dcmplt>
 801f16c:	2800      	cmp	r0, #0
 801f16e:	d000      	beq.n	801f172 <_strtod_l+0xafe>
 801f170:	e4c3      	b.n	801eafa <_strtod_l+0x486>
 801f172:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f174:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f176:	4a34      	ldr	r2, [pc, #208]	@ (801f248 <_strtod_l+0xbd4>)
 801f178:	4b2a      	ldr	r3, [pc, #168]	@ (801f224 <_strtod_l+0xbb0>)
 801f17a:	f7e1 f9b3 	bl	80004e4 <__aeabi_dcmpgt>
 801f17e:	2800      	cmp	r0, #0
 801f180:	d09a      	beq.n	801f0b8 <_strtod_l+0xa44>
 801f182:	e4ba      	b.n	801eafa <_strtod_l+0x486>
 801f184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f186:	2b00      	cmp	r3, #0
 801f188:	d02a      	beq.n	801f1e0 <_strtod_l+0xb6c>
 801f18a:	23d4      	movs	r3, #212	@ 0xd4
 801f18c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f18e:	04db      	lsls	r3, r3, #19
 801f190:	429a      	cmp	r2, r3
 801f192:	d825      	bhi.n	801f1e0 <_strtod_l+0xb6c>
 801f194:	0020      	movs	r0, r4
 801f196:	0029      	movs	r1, r5
 801f198:	4a2c      	ldr	r2, [pc, #176]	@ (801f24c <_strtod_l+0xbd8>)
 801f19a:	4b2d      	ldr	r3, [pc, #180]	@ (801f250 <_strtod_l+0xbdc>)
 801f19c:	f7e1 f998 	bl	80004d0 <__aeabi_dcmple>
 801f1a0:	2800      	cmp	r0, #0
 801f1a2:	d016      	beq.n	801f1d2 <_strtod_l+0xb5e>
 801f1a4:	0020      	movs	r0, r4
 801f1a6:	0029      	movs	r1, r5
 801f1a8:	f7e1 fa50 	bl	800064c <__aeabi_d2uiz>
 801f1ac:	2800      	cmp	r0, #0
 801f1ae:	d100      	bne.n	801f1b2 <_strtod_l+0xb3e>
 801f1b0:	3001      	adds	r0, #1
 801f1b2:	f7e4 f933 	bl	800341c <__aeabi_ui2d>
 801f1b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f1b8:	0004      	movs	r4, r0
 801f1ba:	000d      	movs	r5, r1
 801f1bc:	2b00      	cmp	r3, #0
 801f1be:	d122      	bne.n	801f206 <_strtod_l+0xb92>
 801f1c0:	2380      	movs	r3, #128	@ 0x80
 801f1c2:	061b      	lsls	r3, r3, #24
 801f1c4:	18cb      	adds	r3, r1, r3
 801f1c6:	9018      	str	r0, [sp, #96]	@ 0x60
 801f1c8:	9319      	str	r3, [sp, #100]	@ 0x64
 801f1ca:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f1cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f1ce:	9214      	str	r2, [sp, #80]	@ 0x50
 801f1d0:	9315      	str	r3, [sp, #84]	@ 0x54
 801f1d2:	22d6      	movs	r2, #214	@ 0xd6
 801f1d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f1d6:	04d2      	lsls	r2, r2, #19
 801f1d8:	189b      	adds	r3, r3, r2
 801f1da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f1dc:	1a9b      	subs	r3, r3, r2
 801f1de:	9315      	str	r3, [sp, #84]	@ 0x54
 801f1e0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f1e2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f1e4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f1e6:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801f1e8:	f002 ff24 	bl	8022034 <__ulp>
 801f1ec:	0002      	movs	r2, r0
 801f1ee:	000b      	movs	r3, r1
 801f1f0:	0030      	movs	r0, r6
 801f1f2:	0039      	movs	r1, r7
 801f1f4:	f7e3 fa22 	bl	800263c <__aeabi_dmul>
 801f1f8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f1fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f1fc:	f7e2 fa76 	bl	80016ec <__aeabi_dadd>
 801f200:	0006      	movs	r6, r0
 801f202:	000f      	movs	r7, r1
 801f204:	e791      	b.n	801f12a <_strtod_l+0xab6>
 801f206:	9418      	str	r4, [sp, #96]	@ 0x60
 801f208:	9519      	str	r5, [sp, #100]	@ 0x64
 801f20a:	e7de      	b.n	801f1ca <_strtod_l+0xb56>
 801f20c:	4b11      	ldr	r3, [pc, #68]	@ (801f254 <_strtod_l+0xbe0>)
 801f20e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801f210:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801f212:	f7e1 f953 	bl	80004bc <__aeabi_dcmplt>
 801f216:	e7b2      	b.n	801f17e <_strtod_l+0xb0a>
 801f218:	fff00000 	.word	0xfff00000
 801f21c:	000fffff 	.word	0x000fffff
 801f220:	3ff00000 	.word	0x3ff00000
 801f224:	3fe00000 	.word	0x3fe00000
 801f228:	7ff00000 	.word	0x7ff00000
 801f22c:	7fe00000 	.word	0x7fe00000
 801f230:	fcb00000 	.word	0xfcb00000
 801f234:	7c9fffff 	.word	0x7c9fffff
 801f238:	7fefffff 	.word	0x7fefffff
 801f23c:	bff00000 	.word	0xbff00000
 801f240:	94a03595 	.word	0x94a03595
 801f244:	3fdfffff 	.word	0x3fdfffff
 801f248:	35afe535 	.word	0x35afe535
 801f24c:	ffc00000 	.word	0xffc00000
 801f250:	41dfffff 	.word	0x41dfffff
 801f254:	3fcfffff 	.word	0x3fcfffff

0801f258 <strtod>:
 801f258:	b510      	push	{r4, lr}
 801f25a:	4c04      	ldr	r4, [pc, #16]	@ (801f26c <strtod+0x14>)
 801f25c:	000a      	movs	r2, r1
 801f25e:	0001      	movs	r1, r0
 801f260:	4b03      	ldr	r3, [pc, #12]	@ (801f270 <strtod+0x18>)
 801f262:	6820      	ldr	r0, [r4, #0]
 801f264:	f7ff fa06 	bl	801e674 <_strtod_l>
 801f268:	bd10      	pop	{r4, pc}
 801f26a:	46c0      	nop			@ (mov r8, r8)
 801f26c:	200003cc 	.word	0x200003cc
 801f270:	20000260 	.word	0x20000260

0801f274 <_strtol_l.constprop.0>:
 801f274:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f276:	b085      	sub	sp, #20
 801f278:	0017      	movs	r7, r2
 801f27a:	001e      	movs	r6, r3
 801f27c:	9003      	str	r0, [sp, #12]
 801f27e:	9101      	str	r1, [sp, #4]
 801f280:	2b24      	cmp	r3, #36	@ 0x24
 801f282:	d844      	bhi.n	801f30e <_strtol_l.constprop.0+0x9a>
 801f284:	000c      	movs	r4, r1
 801f286:	2b01      	cmp	r3, #1
 801f288:	d041      	beq.n	801f30e <_strtol_l.constprop.0+0x9a>
 801f28a:	4b3d      	ldr	r3, [pc, #244]	@ (801f380 <_strtol_l.constprop.0+0x10c>)
 801f28c:	2208      	movs	r2, #8
 801f28e:	469c      	mov	ip, r3
 801f290:	0023      	movs	r3, r4
 801f292:	4661      	mov	r1, ip
 801f294:	781d      	ldrb	r5, [r3, #0]
 801f296:	3401      	adds	r4, #1
 801f298:	5d48      	ldrb	r0, [r1, r5]
 801f29a:	0001      	movs	r1, r0
 801f29c:	4011      	ands	r1, r2
 801f29e:	4210      	tst	r0, r2
 801f2a0:	d1f6      	bne.n	801f290 <_strtol_l.constprop.0+0x1c>
 801f2a2:	2d2d      	cmp	r5, #45	@ 0x2d
 801f2a4:	d13a      	bne.n	801f31c <_strtol_l.constprop.0+0xa8>
 801f2a6:	7825      	ldrb	r5, [r4, #0]
 801f2a8:	1c9c      	adds	r4, r3, #2
 801f2aa:	2301      	movs	r3, #1
 801f2ac:	9300      	str	r3, [sp, #0]
 801f2ae:	2210      	movs	r2, #16
 801f2b0:	0033      	movs	r3, r6
 801f2b2:	4393      	bics	r3, r2
 801f2b4:	d109      	bne.n	801f2ca <_strtol_l.constprop.0+0x56>
 801f2b6:	2d30      	cmp	r5, #48	@ 0x30
 801f2b8:	d136      	bne.n	801f328 <_strtol_l.constprop.0+0xb4>
 801f2ba:	2120      	movs	r1, #32
 801f2bc:	7823      	ldrb	r3, [r4, #0]
 801f2be:	438b      	bics	r3, r1
 801f2c0:	2b58      	cmp	r3, #88	@ 0x58
 801f2c2:	d131      	bne.n	801f328 <_strtol_l.constprop.0+0xb4>
 801f2c4:	0016      	movs	r6, r2
 801f2c6:	7865      	ldrb	r5, [r4, #1]
 801f2c8:	3402      	adds	r4, #2
 801f2ca:	4a2e      	ldr	r2, [pc, #184]	@ (801f384 <_strtol_l.constprop.0+0x110>)
 801f2cc:	9b00      	ldr	r3, [sp, #0]
 801f2ce:	4694      	mov	ip, r2
 801f2d0:	4463      	add	r3, ip
 801f2d2:	0031      	movs	r1, r6
 801f2d4:	0018      	movs	r0, r3
 801f2d6:	9302      	str	r3, [sp, #8]
 801f2d8:	f7e0 ffea 	bl	80002b0 <__aeabi_uidivmod>
 801f2dc:	2200      	movs	r2, #0
 801f2de:	4684      	mov	ip, r0
 801f2e0:	0010      	movs	r0, r2
 801f2e2:	002b      	movs	r3, r5
 801f2e4:	3b30      	subs	r3, #48	@ 0x30
 801f2e6:	2b09      	cmp	r3, #9
 801f2e8:	d825      	bhi.n	801f336 <_strtol_l.constprop.0+0xc2>
 801f2ea:	001d      	movs	r5, r3
 801f2ec:	42ae      	cmp	r6, r5
 801f2ee:	dd31      	ble.n	801f354 <_strtol_l.constprop.0+0xe0>
 801f2f0:	1c53      	adds	r3, r2, #1
 801f2f2:	d009      	beq.n	801f308 <_strtol_l.constprop.0+0x94>
 801f2f4:	2201      	movs	r2, #1
 801f2f6:	4252      	negs	r2, r2
 801f2f8:	4584      	cmp	ip, r0
 801f2fa:	d305      	bcc.n	801f308 <_strtol_l.constprop.0+0x94>
 801f2fc:	d101      	bne.n	801f302 <_strtol_l.constprop.0+0x8e>
 801f2fe:	42a9      	cmp	r1, r5
 801f300:	db25      	blt.n	801f34e <_strtol_l.constprop.0+0xda>
 801f302:	2201      	movs	r2, #1
 801f304:	4370      	muls	r0, r6
 801f306:	1828      	adds	r0, r5, r0
 801f308:	7825      	ldrb	r5, [r4, #0]
 801f30a:	3401      	adds	r4, #1
 801f30c:	e7e9      	b.n	801f2e2 <_strtol_l.constprop.0+0x6e>
 801f30e:	f000 ffc5 	bl	802029c <__errno>
 801f312:	2316      	movs	r3, #22
 801f314:	6003      	str	r3, [r0, #0]
 801f316:	2000      	movs	r0, #0
 801f318:	b005      	add	sp, #20
 801f31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f31c:	9100      	str	r1, [sp, #0]
 801f31e:	2d2b      	cmp	r5, #43	@ 0x2b
 801f320:	d1c5      	bne.n	801f2ae <_strtol_l.constprop.0+0x3a>
 801f322:	7825      	ldrb	r5, [r4, #0]
 801f324:	1c9c      	adds	r4, r3, #2
 801f326:	e7c2      	b.n	801f2ae <_strtol_l.constprop.0+0x3a>
 801f328:	2e00      	cmp	r6, #0
 801f32a:	d1ce      	bne.n	801f2ca <_strtol_l.constprop.0+0x56>
 801f32c:	3608      	adds	r6, #8
 801f32e:	2d30      	cmp	r5, #48	@ 0x30
 801f330:	d0cb      	beq.n	801f2ca <_strtol_l.constprop.0+0x56>
 801f332:	3602      	adds	r6, #2
 801f334:	e7c9      	b.n	801f2ca <_strtol_l.constprop.0+0x56>
 801f336:	002b      	movs	r3, r5
 801f338:	3b41      	subs	r3, #65	@ 0x41
 801f33a:	2b19      	cmp	r3, #25
 801f33c:	d801      	bhi.n	801f342 <_strtol_l.constprop.0+0xce>
 801f33e:	3d37      	subs	r5, #55	@ 0x37
 801f340:	e7d4      	b.n	801f2ec <_strtol_l.constprop.0+0x78>
 801f342:	002b      	movs	r3, r5
 801f344:	3b61      	subs	r3, #97	@ 0x61
 801f346:	2b19      	cmp	r3, #25
 801f348:	d804      	bhi.n	801f354 <_strtol_l.constprop.0+0xe0>
 801f34a:	3d57      	subs	r5, #87	@ 0x57
 801f34c:	e7ce      	b.n	801f2ec <_strtol_l.constprop.0+0x78>
 801f34e:	2201      	movs	r2, #1
 801f350:	4252      	negs	r2, r2
 801f352:	e7d9      	b.n	801f308 <_strtol_l.constprop.0+0x94>
 801f354:	1c53      	adds	r3, r2, #1
 801f356:	d108      	bne.n	801f36a <_strtol_l.constprop.0+0xf6>
 801f358:	2322      	movs	r3, #34	@ 0x22
 801f35a:	9a03      	ldr	r2, [sp, #12]
 801f35c:	9802      	ldr	r0, [sp, #8]
 801f35e:	6013      	str	r3, [r2, #0]
 801f360:	2f00      	cmp	r7, #0
 801f362:	d0d9      	beq.n	801f318 <_strtol_l.constprop.0+0xa4>
 801f364:	1e63      	subs	r3, r4, #1
 801f366:	9301      	str	r3, [sp, #4]
 801f368:	e007      	b.n	801f37a <_strtol_l.constprop.0+0x106>
 801f36a:	9b00      	ldr	r3, [sp, #0]
 801f36c:	2b00      	cmp	r3, #0
 801f36e:	d000      	beq.n	801f372 <_strtol_l.constprop.0+0xfe>
 801f370:	4240      	negs	r0, r0
 801f372:	2f00      	cmp	r7, #0
 801f374:	d0d0      	beq.n	801f318 <_strtol_l.constprop.0+0xa4>
 801f376:	2a00      	cmp	r2, #0
 801f378:	d1f4      	bne.n	801f364 <_strtol_l.constprop.0+0xf0>
 801f37a:	9b01      	ldr	r3, [sp, #4]
 801f37c:	603b      	str	r3, [r7, #0]
 801f37e:	e7cb      	b.n	801f318 <_strtol_l.constprop.0+0xa4>
 801f380:	08025b61 	.word	0x08025b61
 801f384:	7fffffff 	.word	0x7fffffff

0801f388 <strtol>:
 801f388:	b510      	push	{r4, lr}
 801f38a:	4c04      	ldr	r4, [pc, #16]	@ (801f39c <strtol+0x14>)
 801f38c:	0013      	movs	r3, r2
 801f38e:	000a      	movs	r2, r1
 801f390:	0001      	movs	r1, r0
 801f392:	6820      	ldr	r0, [r4, #0]
 801f394:	f7ff ff6e 	bl	801f274 <_strtol_l.constprop.0>
 801f398:	bd10      	pop	{r4, pc}
 801f39a:	46c0      	nop			@ (mov r8, r8)
 801f39c:	200003cc 	.word	0x200003cc

0801f3a0 <__cvt>:
 801f3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f3a2:	001f      	movs	r7, r3
 801f3a4:	2300      	movs	r3, #0
 801f3a6:	0016      	movs	r6, r2
 801f3a8:	b08b      	sub	sp, #44	@ 0x2c
 801f3aa:	429f      	cmp	r7, r3
 801f3ac:	da04      	bge.n	801f3b8 <__cvt+0x18>
 801f3ae:	2180      	movs	r1, #128	@ 0x80
 801f3b0:	0609      	lsls	r1, r1, #24
 801f3b2:	187b      	adds	r3, r7, r1
 801f3b4:	001f      	movs	r7, r3
 801f3b6:	232d      	movs	r3, #45	@ 0x2d
 801f3b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f3ba:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f3bc:	7013      	strb	r3, [r2, #0]
 801f3be:	2320      	movs	r3, #32
 801f3c0:	2203      	movs	r2, #3
 801f3c2:	439d      	bics	r5, r3
 801f3c4:	2d46      	cmp	r5, #70	@ 0x46
 801f3c6:	d007      	beq.n	801f3d8 <__cvt+0x38>
 801f3c8:	002b      	movs	r3, r5
 801f3ca:	3b45      	subs	r3, #69	@ 0x45
 801f3cc:	4259      	negs	r1, r3
 801f3ce:	414b      	adcs	r3, r1
 801f3d0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f3d2:	3a01      	subs	r2, #1
 801f3d4:	18cb      	adds	r3, r1, r3
 801f3d6:	9310      	str	r3, [sp, #64]	@ 0x40
 801f3d8:	ab09      	add	r3, sp, #36	@ 0x24
 801f3da:	9304      	str	r3, [sp, #16]
 801f3dc:	ab08      	add	r3, sp, #32
 801f3de:	9303      	str	r3, [sp, #12]
 801f3e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f3e2:	9200      	str	r2, [sp, #0]
 801f3e4:	9302      	str	r3, [sp, #8]
 801f3e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f3e8:	0032      	movs	r2, r6
 801f3ea:	9301      	str	r3, [sp, #4]
 801f3ec:	003b      	movs	r3, r7
 801f3ee:	f001 f82b 	bl	8020448 <_dtoa_r>
 801f3f2:	0004      	movs	r4, r0
 801f3f4:	2d47      	cmp	r5, #71	@ 0x47
 801f3f6:	d11b      	bne.n	801f430 <__cvt+0x90>
 801f3f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f3fa:	07db      	lsls	r3, r3, #31
 801f3fc:	d511      	bpl.n	801f422 <__cvt+0x82>
 801f3fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f400:	18c3      	adds	r3, r0, r3
 801f402:	9307      	str	r3, [sp, #28]
 801f404:	2200      	movs	r2, #0
 801f406:	2300      	movs	r3, #0
 801f408:	0030      	movs	r0, r6
 801f40a:	0039      	movs	r1, r7
 801f40c:	f7e1 f850 	bl	80004b0 <__aeabi_dcmpeq>
 801f410:	2800      	cmp	r0, #0
 801f412:	d001      	beq.n	801f418 <__cvt+0x78>
 801f414:	9b07      	ldr	r3, [sp, #28]
 801f416:	9309      	str	r3, [sp, #36]	@ 0x24
 801f418:	2230      	movs	r2, #48	@ 0x30
 801f41a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f41c:	9907      	ldr	r1, [sp, #28]
 801f41e:	428b      	cmp	r3, r1
 801f420:	d320      	bcc.n	801f464 <__cvt+0xc4>
 801f422:	0020      	movs	r0, r4
 801f424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f426:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f428:	1b1b      	subs	r3, r3, r4
 801f42a:	6013      	str	r3, [r2, #0]
 801f42c:	b00b      	add	sp, #44	@ 0x2c
 801f42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f430:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f432:	18c3      	adds	r3, r0, r3
 801f434:	9307      	str	r3, [sp, #28]
 801f436:	2d46      	cmp	r5, #70	@ 0x46
 801f438:	d1e4      	bne.n	801f404 <__cvt+0x64>
 801f43a:	7803      	ldrb	r3, [r0, #0]
 801f43c:	2b30      	cmp	r3, #48	@ 0x30
 801f43e:	d10c      	bne.n	801f45a <__cvt+0xba>
 801f440:	2200      	movs	r2, #0
 801f442:	2300      	movs	r3, #0
 801f444:	0030      	movs	r0, r6
 801f446:	0039      	movs	r1, r7
 801f448:	f7e1 f832 	bl	80004b0 <__aeabi_dcmpeq>
 801f44c:	2800      	cmp	r0, #0
 801f44e:	d104      	bne.n	801f45a <__cvt+0xba>
 801f450:	2301      	movs	r3, #1
 801f452:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f454:	1a9b      	subs	r3, r3, r2
 801f456:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f458:	6013      	str	r3, [r2, #0]
 801f45a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f45c:	9a07      	ldr	r2, [sp, #28]
 801f45e:	681b      	ldr	r3, [r3, #0]
 801f460:	18d3      	adds	r3, r2, r3
 801f462:	e7ce      	b.n	801f402 <__cvt+0x62>
 801f464:	1c59      	adds	r1, r3, #1
 801f466:	9109      	str	r1, [sp, #36]	@ 0x24
 801f468:	701a      	strb	r2, [r3, #0]
 801f46a:	e7d6      	b.n	801f41a <__cvt+0x7a>

0801f46c <__exponent>:
 801f46c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f46e:	232b      	movs	r3, #43	@ 0x2b
 801f470:	0005      	movs	r5, r0
 801f472:	000c      	movs	r4, r1
 801f474:	b085      	sub	sp, #20
 801f476:	7002      	strb	r2, [r0, #0]
 801f478:	2900      	cmp	r1, #0
 801f47a:	da01      	bge.n	801f480 <__exponent+0x14>
 801f47c:	424c      	negs	r4, r1
 801f47e:	3302      	adds	r3, #2
 801f480:	706b      	strb	r3, [r5, #1]
 801f482:	2c09      	cmp	r4, #9
 801f484:	dd2c      	ble.n	801f4e0 <__exponent+0x74>
 801f486:	ab02      	add	r3, sp, #8
 801f488:	1dde      	adds	r6, r3, #7
 801f48a:	0020      	movs	r0, r4
 801f48c:	210a      	movs	r1, #10
 801f48e:	f7e0 fff9 	bl	8000484 <__aeabi_idivmod>
 801f492:	0037      	movs	r7, r6
 801f494:	3130      	adds	r1, #48	@ 0x30
 801f496:	3e01      	subs	r6, #1
 801f498:	0020      	movs	r0, r4
 801f49a:	7031      	strb	r1, [r6, #0]
 801f49c:	210a      	movs	r1, #10
 801f49e:	9401      	str	r4, [sp, #4]
 801f4a0:	f7e0 ff0a 	bl	80002b8 <__divsi3>
 801f4a4:	9b01      	ldr	r3, [sp, #4]
 801f4a6:	0004      	movs	r4, r0
 801f4a8:	2b63      	cmp	r3, #99	@ 0x63
 801f4aa:	dcee      	bgt.n	801f48a <__exponent+0x1e>
 801f4ac:	1eba      	subs	r2, r7, #2
 801f4ae:	1ca8      	adds	r0, r5, #2
 801f4b0:	0001      	movs	r1, r0
 801f4b2:	0013      	movs	r3, r2
 801f4b4:	3430      	adds	r4, #48	@ 0x30
 801f4b6:	7014      	strb	r4, [r2, #0]
 801f4b8:	ac02      	add	r4, sp, #8
 801f4ba:	3407      	adds	r4, #7
 801f4bc:	429c      	cmp	r4, r3
 801f4be:	d80a      	bhi.n	801f4d6 <__exponent+0x6a>
 801f4c0:	2300      	movs	r3, #0
 801f4c2:	42a2      	cmp	r2, r4
 801f4c4:	d803      	bhi.n	801f4ce <__exponent+0x62>
 801f4c6:	3309      	adds	r3, #9
 801f4c8:	aa02      	add	r2, sp, #8
 801f4ca:	189b      	adds	r3, r3, r2
 801f4cc:	1bdb      	subs	r3, r3, r7
 801f4ce:	18c0      	adds	r0, r0, r3
 801f4d0:	1b40      	subs	r0, r0, r5
 801f4d2:	b005      	add	sp, #20
 801f4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f4d6:	781c      	ldrb	r4, [r3, #0]
 801f4d8:	3301      	adds	r3, #1
 801f4da:	700c      	strb	r4, [r1, #0]
 801f4dc:	3101      	adds	r1, #1
 801f4de:	e7eb      	b.n	801f4b8 <__exponent+0x4c>
 801f4e0:	2330      	movs	r3, #48	@ 0x30
 801f4e2:	18e4      	adds	r4, r4, r3
 801f4e4:	70ab      	strb	r3, [r5, #2]
 801f4e6:	1d28      	adds	r0, r5, #4
 801f4e8:	70ec      	strb	r4, [r5, #3]
 801f4ea:	e7f1      	b.n	801f4d0 <__exponent+0x64>

0801f4ec <_printf_float>:
 801f4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f4ee:	b097      	sub	sp, #92	@ 0x5c
 801f4f0:	000d      	movs	r5, r1
 801f4f2:	920a      	str	r2, [sp, #40]	@ 0x28
 801f4f4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801f4f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f4f8:	9009      	str	r0, [sp, #36]	@ 0x24
 801f4fa:	f000 fe7d 	bl	80201f8 <_localeconv_r>
 801f4fe:	6803      	ldr	r3, [r0, #0]
 801f500:	0018      	movs	r0, r3
 801f502:	930d      	str	r3, [sp, #52]	@ 0x34
 801f504:	f7e0 fe32 	bl	800016c <strlen>
 801f508:	2300      	movs	r3, #0
 801f50a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801f50c:	9314      	str	r3, [sp, #80]	@ 0x50
 801f50e:	7e2b      	ldrb	r3, [r5, #24]
 801f510:	2207      	movs	r2, #7
 801f512:	930c      	str	r3, [sp, #48]	@ 0x30
 801f514:	682b      	ldr	r3, [r5, #0]
 801f516:	930e      	str	r3, [sp, #56]	@ 0x38
 801f518:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801f51a:	6823      	ldr	r3, [r4, #0]
 801f51c:	05c9      	lsls	r1, r1, #23
 801f51e:	d545      	bpl.n	801f5ac <_printf_float+0xc0>
 801f520:	189b      	adds	r3, r3, r2
 801f522:	4393      	bics	r3, r2
 801f524:	001a      	movs	r2, r3
 801f526:	3208      	adds	r2, #8
 801f528:	6022      	str	r2, [r4, #0]
 801f52a:	2201      	movs	r2, #1
 801f52c:	681e      	ldr	r6, [r3, #0]
 801f52e:	685f      	ldr	r7, [r3, #4]
 801f530:	007b      	lsls	r3, r7, #1
 801f532:	085b      	lsrs	r3, r3, #1
 801f534:	9311      	str	r3, [sp, #68]	@ 0x44
 801f536:	9610      	str	r6, [sp, #64]	@ 0x40
 801f538:	64ae      	str	r6, [r5, #72]	@ 0x48
 801f53a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801f53c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f53e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f540:	4ba7      	ldr	r3, [pc, #668]	@ (801f7e0 <_printf_float+0x2f4>)
 801f542:	4252      	negs	r2, r2
 801f544:	f7e3 fede 	bl	8003304 <__aeabi_dcmpun>
 801f548:	2800      	cmp	r0, #0
 801f54a:	d131      	bne.n	801f5b0 <_printf_float+0xc4>
 801f54c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801f54e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801f550:	2201      	movs	r2, #1
 801f552:	4ba3      	ldr	r3, [pc, #652]	@ (801f7e0 <_printf_float+0x2f4>)
 801f554:	4252      	negs	r2, r2
 801f556:	f7e0 ffbb 	bl	80004d0 <__aeabi_dcmple>
 801f55a:	2800      	cmp	r0, #0
 801f55c:	d128      	bne.n	801f5b0 <_printf_float+0xc4>
 801f55e:	2200      	movs	r2, #0
 801f560:	2300      	movs	r3, #0
 801f562:	0030      	movs	r0, r6
 801f564:	0039      	movs	r1, r7
 801f566:	f7e0 ffa9 	bl	80004bc <__aeabi_dcmplt>
 801f56a:	2800      	cmp	r0, #0
 801f56c:	d003      	beq.n	801f576 <_printf_float+0x8a>
 801f56e:	002b      	movs	r3, r5
 801f570:	222d      	movs	r2, #45	@ 0x2d
 801f572:	3343      	adds	r3, #67	@ 0x43
 801f574:	701a      	strb	r2, [r3, #0]
 801f576:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f578:	4f9a      	ldr	r7, [pc, #616]	@ (801f7e4 <_printf_float+0x2f8>)
 801f57a:	2b47      	cmp	r3, #71	@ 0x47
 801f57c:	d900      	bls.n	801f580 <_printf_float+0x94>
 801f57e:	4f9a      	ldr	r7, [pc, #616]	@ (801f7e8 <_printf_float+0x2fc>)
 801f580:	2303      	movs	r3, #3
 801f582:	2400      	movs	r4, #0
 801f584:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f586:	612b      	str	r3, [r5, #16]
 801f588:	3301      	adds	r3, #1
 801f58a:	439a      	bics	r2, r3
 801f58c:	602a      	str	r2, [r5, #0]
 801f58e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f590:	0029      	movs	r1, r5
 801f592:	9300      	str	r3, [sp, #0]
 801f594:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f596:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f598:	aa15      	add	r2, sp, #84	@ 0x54
 801f59a:	f000 f9e5 	bl	801f968 <_printf_common>
 801f59e:	3001      	adds	r0, #1
 801f5a0:	d000      	beq.n	801f5a4 <_printf_float+0xb8>
 801f5a2:	e09f      	b.n	801f6e4 <_printf_float+0x1f8>
 801f5a4:	2001      	movs	r0, #1
 801f5a6:	4240      	negs	r0, r0
 801f5a8:	b017      	add	sp, #92	@ 0x5c
 801f5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f5ac:	3307      	adds	r3, #7
 801f5ae:	e7b8      	b.n	801f522 <_printf_float+0x36>
 801f5b0:	0032      	movs	r2, r6
 801f5b2:	003b      	movs	r3, r7
 801f5b4:	0030      	movs	r0, r6
 801f5b6:	0039      	movs	r1, r7
 801f5b8:	f7e3 fea4 	bl	8003304 <__aeabi_dcmpun>
 801f5bc:	2800      	cmp	r0, #0
 801f5be:	d00b      	beq.n	801f5d8 <_printf_float+0xec>
 801f5c0:	2f00      	cmp	r7, #0
 801f5c2:	da03      	bge.n	801f5cc <_printf_float+0xe0>
 801f5c4:	002b      	movs	r3, r5
 801f5c6:	222d      	movs	r2, #45	@ 0x2d
 801f5c8:	3343      	adds	r3, #67	@ 0x43
 801f5ca:	701a      	strb	r2, [r3, #0]
 801f5cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f5ce:	4f87      	ldr	r7, [pc, #540]	@ (801f7ec <_printf_float+0x300>)
 801f5d0:	2b47      	cmp	r3, #71	@ 0x47
 801f5d2:	d9d5      	bls.n	801f580 <_printf_float+0x94>
 801f5d4:	4f86      	ldr	r7, [pc, #536]	@ (801f7f0 <_printf_float+0x304>)
 801f5d6:	e7d3      	b.n	801f580 <_printf_float+0x94>
 801f5d8:	2220      	movs	r2, #32
 801f5da:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f5dc:	686b      	ldr	r3, [r5, #4]
 801f5de:	4394      	bics	r4, r2
 801f5e0:	1c5a      	adds	r2, r3, #1
 801f5e2:	d146      	bne.n	801f672 <_printf_float+0x186>
 801f5e4:	3307      	adds	r3, #7
 801f5e6:	606b      	str	r3, [r5, #4]
 801f5e8:	2380      	movs	r3, #128	@ 0x80
 801f5ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f5ec:	00db      	lsls	r3, r3, #3
 801f5ee:	4313      	orrs	r3, r2
 801f5f0:	2200      	movs	r2, #0
 801f5f2:	602b      	str	r3, [r5, #0]
 801f5f4:	9206      	str	r2, [sp, #24]
 801f5f6:	aa14      	add	r2, sp, #80	@ 0x50
 801f5f8:	9205      	str	r2, [sp, #20]
 801f5fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f5fc:	a90a      	add	r1, sp, #40	@ 0x28
 801f5fe:	9204      	str	r2, [sp, #16]
 801f600:	aa13      	add	r2, sp, #76	@ 0x4c
 801f602:	9203      	str	r2, [sp, #12]
 801f604:	2223      	movs	r2, #35	@ 0x23
 801f606:	1852      	adds	r2, r2, r1
 801f608:	9202      	str	r2, [sp, #8]
 801f60a:	9301      	str	r3, [sp, #4]
 801f60c:	686b      	ldr	r3, [r5, #4]
 801f60e:	0032      	movs	r2, r6
 801f610:	9300      	str	r3, [sp, #0]
 801f612:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f614:	003b      	movs	r3, r7
 801f616:	f7ff fec3 	bl	801f3a0 <__cvt>
 801f61a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f61c:	0007      	movs	r7, r0
 801f61e:	2c47      	cmp	r4, #71	@ 0x47
 801f620:	d12d      	bne.n	801f67e <_printf_float+0x192>
 801f622:	1cd3      	adds	r3, r2, #3
 801f624:	db02      	blt.n	801f62c <_printf_float+0x140>
 801f626:	686b      	ldr	r3, [r5, #4]
 801f628:	429a      	cmp	r2, r3
 801f62a:	dd48      	ble.n	801f6be <_printf_float+0x1d2>
 801f62c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f62e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f630:	3b02      	subs	r3, #2
 801f632:	b2db      	uxtb	r3, r3
 801f634:	930c      	str	r3, [sp, #48]	@ 0x30
 801f636:	0028      	movs	r0, r5
 801f638:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f63a:	3901      	subs	r1, #1
 801f63c:	3050      	adds	r0, #80	@ 0x50
 801f63e:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f640:	f7ff ff14 	bl	801f46c <__exponent>
 801f644:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f646:	0004      	movs	r4, r0
 801f648:	1813      	adds	r3, r2, r0
 801f64a:	612b      	str	r3, [r5, #16]
 801f64c:	2a01      	cmp	r2, #1
 801f64e:	dc02      	bgt.n	801f656 <_printf_float+0x16a>
 801f650:	682a      	ldr	r2, [r5, #0]
 801f652:	07d2      	lsls	r2, r2, #31
 801f654:	d501      	bpl.n	801f65a <_printf_float+0x16e>
 801f656:	3301      	adds	r3, #1
 801f658:	612b      	str	r3, [r5, #16]
 801f65a:	2323      	movs	r3, #35	@ 0x23
 801f65c:	aa0a      	add	r2, sp, #40	@ 0x28
 801f65e:	189b      	adds	r3, r3, r2
 801f660:	781b      	ldrb	r3, [r3, #0]
 801f662:	2b00      	cmp	r3, #0
 801f664:	d100      	bne.n	801f668 <_printf_float+0x17c>
 801f666:	e792      	b.n	801f58e <_printf_float+0xa2>
 801f668:	002b      	movs	r3, r5
 801f66a:	222d      	movs	r2, #45	@ 0x2d
 801f66c:	3343      	adds	r3, #67	@ 0x43
 801f66e:	701a      	strb	r2, [r3, #0]
 801f670:	e78d      	b.n	801f58e <_printf_float+0xa2>
 801f672:	2c47      	cmp	r4, #71	@ 0x47
 801f674:	d1b8      	bne.n	801f5e8 <_printf_float+0xfc>
 801f676:	2b00      	cmp	r3, #0
 801f678:	d1b6      	bne.n	801f5e8 <_printf_float+0xfc>
 801f67a:	3301      	adds	r3, #1
 801f67c:	e7b3      	b.n	801f5e6 <_printf_float+0xfa>
 801f67e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f680:	0011      	movs	r1, r2
 801f682:	2b65      	cmp	r3, #101	@ 0x65
 801f684:	d9d7      	bls.n	801f636 <_printf_float+0x14a>
 801f686:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f688:	2b66      	cmp	r3, #102	@ 0x66
 801f68a:	d11a      	bne.n	801f6c2 <_printf_float+0x1d6>
 801f68c:	686b      	ldr	r3, [r5, #4]
 801f68e:	2a00      	cmp	r2, #0
 801f690:	dd09      	ble.n	801f6a6 <_printf_float+0x1ba>
 801f692:	612a      	str	r2, [r5, #16]
 801f694:	2b00      	cmp	r3, #0
 801f696:	d102      	bne.n	801f69e <_printf_float+0x1b2>
 801f698:	6829      	ldr	r1, [r5, #0]
 801f69a:	07c9      	lsls	r1, r1, #31
 801f69c:	d50b      	bpl.n	801f6b6 <_printf_float+0x1ca>
 801f69e:	3301      	adds	r3, #1
 801f6a0:	189b      	adds	r3, r3, r2
 801f6a2:	612b      	str	r3, [r5, #16]
 801f6a4:	e007      	b.n	801f6b6 <_printf_float+0x1ca>
 801f6a6:	2b00      	cmp	r3, #0
 801f6a8:	d103      	bne.n	801f6b2 <_printf_float+0x1c6>
 801f6aa:	2201      	movs	r2, #1
 801f6ac:	6829      	ldr	r1, [r5, #0]
 801f6ae:	4211      	tst	r1, r2
 801f6b0:	d000      	beq.n	801f6b4 <_printf_float+0x1c8>
 801f6b2:	1c9a      	adds	r2, r3, #2
 801f6b4:	612a      	str	r2, [r5, #16]
 801f6b6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f6b8:	2400      	movs	r4, #0
 801f6ba:	65ab      	str	r3, [r5, #88]	@ 0x58
 801f6bc:	e7cd      	b.n	801f65a <_printf_float+0x16e>
 801f6be:	2367      	movs	r3, #103	@ 0x67
 801f6c0:	930c      	str	r3, [sp, #48]	@ 0x30
 801f6c2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f6c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f6c6:	4299      	cmp	r1, r3
 801f6c8:	db06      	blt.n	801f6d8 <_printf_float+0x1ec>
 801f6ca:	682b      	ldr	r3, [r5, #0]
 801f6cc:	6129      	str	r1, [r5, #16]
 801f6ce:	07db      	lsls	r3, r3, #31
 801f6d0:	d5f1      	bpl.n	801f6b6 <_printf_float+0x1ca>
 801f6d2:	3101      	adds	r1, #1
 801f6d4:	6129      	str	r1, [r5, #16]
 801f6d6:	e7ee      	b.n	801f6b6 <_printf_float+0x1ca>
 801f6d8:	2201      	movs	r2, #1
 801f6da:	2900      	cmp	r1, #0
 801f6dc:	dce0      	bgt.n	801f6a0 <_printf_float+0x1b4>
 801f6de:	1892      	adds	r2, r2, r2
 801f6e0:	1a52      	subs	r2, r2, r1
 801f6e2:	e7dd      	b.n	801f6a0 <_printf_float+0x1b4>
 801f6e4:	682a      	ldr	r2, [r5, #0]
 801f6e6:	0553      	lsls	r3, r2, #21
 801f6e8:	d408      	bmi.n	801f6fc <_printf_float+0x210>
 801f6ea:	692b      	ldr	r3, [r5, #16]
 801f6ec:	003a      	movs	r2, r7
 801f6ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f6f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f6f2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f6f4:	47a0      	blx	r4
 801f6f6:	3001      	adds	r0, #1
 801f6f8:	d129      	bne.n	801f74e <_printf_float+0x262>
 801f6fa:	e753      	b.n	801f5a4 <_printf_float+0xb8>
 801f6fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f6fe:	2b65      	cmp	r3, #101	@ 0x65
 801f700:	d800      	bhi.n	801f704 <_printf_float+0x218>
 801f702:	e0da      	b.n	801f8ba <_printf_float+0x3ce>
 801f704:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801f706:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801f708:	2200      	movs	r2, #0
 801f70a:	2300      	movs	r3, #0
 801f70c:	f7e0 fed0 	bl	80004b0 <__aeabi_dcmpeq>
 801f710:	2800      	cmp	r0, #0
 801f712:	d033      	beq.n	801f77c <_printf_float+0x290>
 801f714:	2301      	movs	r3, #1
 801f716:	4a37      	ldr	r2, [pc, #220]	@ (801f7f4 <_printf_float+0x308>)
 801f718:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f71a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f71c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f71e:	47a0      	blx	r4
 801f720:	3001      	adds	r0, #1
 801f722:	d100      	bne.n	801f726 <_printf_float+0x23a>
 801f724:	e73e      	b.n	801f5a4 <_printf_float+0xb8>
 801f726:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f728:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f72a:	42b3      	cmp	r3, r6
 801f72c:	db02      	blt.n	801f734 <_printf_float+0x248>
 801f72e:	682b      	ldr	r3, [r5, #0]
 801f730:	07db      	lsls	r3, r3, #31
 801f732:	d50c      	bpl.n	801f74e <_printf_float+0x262>
 801f734:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f736:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f738:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f73a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f73c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f73e:	47a0      	blx	r4
 801f740:	2400      	movs	r4, #0
 801f742:	3001      	adds	r0, #1
 801f744:	d100      	bne.n	801f748 <_printf_float+0x25c>
 801f746:	e72d      	b.n	801f5a4 <_printf_float+0xb8>
 801f748:	1e73      	subs	r3, r6, #1
 801f74a:	42a3      	cmp	r3, r4
 801f74c:	dc0a      	bgt.n	801f764 <_printf_float+0x278>
 801f74e:	682b      	ldr	r3, [r5, #0]
 801f750:	079b      	lsls	r3, r3, #30
 801f752:	d500      	bpl.n	801f756 <_printf_float+0x26a>
 801f754:	e105      	b.n	801f962 <_printf_float+0x476>
 801f756:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f758:	68e8      	ldr	r0, [r5, #12]
 801f75a:	4298      	cmp	r0, r3
 801f75c:	db00      	blt.n	801f760 <_printf_float+0x274>
 801f75e:	e723      	b.n	801f5a8 <_printf_float+0xbc>
 801f760:	0018      	movs	r0, r3
 801f762:	e721      	b.n	801f5a8 <_printf_float+0xbc>
 801f764:	002a      	movs	r2, r5
 801f766:	2301      	movs	r3, #1
 801f768:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f76a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f76c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f76e:	321a      	adds	r2, #26
 801f770:	47b8      	blx	r7
 801f772:	3001      	adds	r0, #1
 801f774:	d100      	bne.n	801f778 <_printf_float+0x28c>
 801f776:	e715      	b.n	801f5a4 <_printf_float+0xb8>
 801f778:	3401      	adds	r4, #1
 801f77a:	e7e5      	b.n	801f748 <_printf_float+0x25c>
 801f77c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f77e:	2b00      	cmp	r3, #0
 801f780:	dc3a      	bgt.n	801f7f8 <_printf_float+0x30c>
 801f782:	2301      	movs	r3, #1
 801f784:	4a1b      	ldr	r2, [pc, #108]	@ (801f7f4 <_printf_float+0x308>)
 801f786:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f788:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f78a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f78c:	47a0      	blx	r4
 801f78e:	3001      	adds	r0, #1
 801f790:	d100      	bne.n	801f794 <_printf_float+0x2a8>
 801f792:	e707      	b.n	801f5a4 <_printf_float+0xb8>
 801f794:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801f796:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f798:	4333      	orrs	r3, r6
 801f79a:	d102      	bne.n	801f7a2 <_printf_float+0x2b6>
 801f79c:	682b      	ldr	r3, [r5, #0]
 801f79e:	07db      	lsls	r3, r3, #31
 801f7a0:	d5d5      	bpl.n	801f74e <_printf_float+0x262>
 801f7a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f7a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f7a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f7a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f7aa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f7ac:	47a0      	blx	r4
 801f7ae:	2300      	movs	r3, #0
 801f7b0:	3001      	adds	r0, #1
 801f7b2:	d100      	bne.n	801f7b6 <_printf_float+0x2ca>
 801f7b4:	e6f6      	b.n	801f5a4 <_printf_float+0xb8>
 801f7b6:	930c      	str	r3, [sp, #48]	@ 0x30
 801f7b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f7ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f7bc:	425b      	negs	r3, r3
 801f7be:	4293      	cmp	r3, r2
 801f7c0:	dc01      	bgt.n	801f7c6 <_printf_float+0x2da>
 801f7c2:	0033      	movs	r3, r6
 801f7c4:	e792      	b.n	801f6ec <_printf_float+0x200>
 801f7c6:	002a      	movs	r2, r5
 801f7c8:	2301      	movs	r3, #1
 801f7ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f7cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f7ce:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f7d0:	321a      	adds	r2, #26
 801f7d2:	47a0      	blx	r4
 801f7d4:	3001      	adds	r0, #1
 801f7d6:	d100      	bne.n	801f7da <_printf_float+0x2ee>
 801f7d8:	e6e4      	b.n	801f5a4 <_printf_float+0xb8>
 801f7da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f7dc:	3301      	adds	r3, #1
 801f7de:	e7ea      	b.n	801f7b6 <_printf_float+0x2ca>
 801f7e0:	7fefffff 	.word	0x7fefffff
 801f7e4:	08025c61 	.word	0x08025c61
 801f7e8:	08025c65 	.word	0x08025c65
 801f7ec:	08025c69 	.word	0x08025c69
 801f7f0:	08025c6d 	.word	0x08025c6d
 801f7f4:	08025c71 	.word	0x08025c71
 801f7f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f7fa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801f7fc:	930c      	str	r3, [sp, #48]	@ 0x30
 801f7fe:	429e      	cmp	r6, r3
 801f800:	dd00      	ble.n	801f804 <_printf_float+0x318>
 801f802:	001e      	movs	r6, r3
 801f804:	2e00      	cmp	r6, #0
 801f806:	dc31      	bgt.n	801f86c <_printf_float+0x380>
 801f808:	43f3      	mvns	r3, r6
 801f80a:	2400      	movs	r4, #0
 801f80c:	17db      	asrs	r3, r3, #31
 801f80e:	4033      	ands	r3, r6
 801f810:	930e      	str	r3, [sp, #56]	@ 0x38
 801f812:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801f814:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f816:	1af3      	subs	r3, r6, r3
 801f818:	42a3      	cmp	r3, r4
 801f81a:	dc30      	bgt.n	801f87e <_printf_float+0x392>
 801f81c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f81e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f820:	429a      	cmp	r2, r3
 801f822:	dc38      	bgt.n	801f896 <_printf_float+0x3aa>
 801f824:	682b      	ldr	r3, [r5, #0]
 801f826:	07db      	lsls	r3, r3, #31
 801f828:	d435      	bmi.n	801f896 <_printf_float+0x3aa>
 801f82a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f82c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f82e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f830:	1b9b      	subs	r3, r3, r6
 801f832:	1b14      	subs	r4, r2, r4
 801f834:	429c      	cmp	r4, r3
 801f836:	dd00      	ble.n	801f83a <_printf_float+0x34e>
 801f838:	001c      	movs	r4, r3
 801f83a:	2c00      	cmp	r4, #0
 801f83c:	dc34      	bgt.n	801f8a8 <_printf_float+0x3bc>
 801f83e:	43e3      	mvns	r3, r4
 801f840:	2600      	movs	r6, #0
 801f842:	17db      	asrs	r3, r3, #31
 801f844:	401c      	ands	r4, r3
 801f846:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f848:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f84a:	1ad3      	subs	r3, r2, r3
 801f84c:	1b1b      	subs	r3, r3, r4
 801f84e:	42b3      	cmp	r3, r6
 801f850:	dc00      	bgt.n	801f854 <_printf_float+0x368>
 801f852:	e77c      	b.n	801f74e <_printf_float+0x262>
 801f854:	002a      	movs	r2, r5
 801f856:	2301      	movs	r3, #1
 801f858:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f85a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f85c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f85e:	321a      	adds	r2, #26
 801f860:	47b8      	blx	r7
 801f862:	3001      	adds	r0, #1
 801f864:	d100      	bne.n	801f868 <_printf_float+0x37c>
 801f866:	e69d      	b.n	801f5a4 <_printf_float+0xb8>
 801f868:	3601      	adds	r6, #1
 801f86a:	e7ec      	b.n	801f846 <_printf_float+0x35a>
 801f86c:	0033      	movs	r3, r6
 801f86e:	003a      	movs	r2, r7
 801f870:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f872:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f874:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f876:	47a0      	blx	r4
 801f878:	3001      	adds	r0, #1
 801f87a:	d1c5      	bne.n	801f808 <_printf_float+0x31c>
 801f87c:	e692      	b.n	801f5a4 <_printf_float+0xb8>
 801f87e:	002a      	movs	r2, r5
 801f880:	2301      	movs	r3, #1
 801f882:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f884:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f886:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f888:	321a      	adds	r2, #26
 801f88a:	47b0      	blx	r6
 801f88c:	3001      	adds	r0, #1
 801f88e:	d100      	bne.n	801f892 <_printf_float+0x3a6>
 801f890:	e688      	b.n	801f5a4 <_printf_float+0xb8>
 801f892:	3401      	adds	r4, #1
 801f894:	e7bd      	b.n	801f812 <_printf_float+0x326>
 801f896:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f898:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f89a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f89c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f89e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f8a0:	47a0      	blx	r4
 801f8a2:	3001      	adds	r0, #1
 801f8a4:	d1c1      	bne.n	801f82a <_printf_float+0x33e>
 801f8a6:	e67d      	b.n	801f5a4 <_printf_float+0xb8>
 801f8a8:	19ba      	adds	r2, r7, r6
 801f8aa:	0023      	movs	r3, r4
 801f8ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f8ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f8b0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f8b2:	47b0      	blx	r6
 801f8b4:	3001      	adds	r0, #1
 801f8b6:	d1c2      	bne.n	801f83e <_printf_float+0x352>
 801f8b8:	e674      	b.n	801f5a4 <_printf_float+0xb8>
 801f8ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f8bc:	930c      	str	r3, [sp, #48]	@ 0x30
 801f8be:	2b01      	cmp	r3, #1
 801f8c0:	dc02      	bgt.n	801f8c8 <_printf_float+0x3dc>
 801f8c2:	2301      	movs	r3, #1
 801f8c4:	421a      	tst	r2, r3
 801f8c6:	d039      	beq.n	801f93c <_printf_float+0x450>
 801f8c8:	2301      	movs	r3, #1
 801f8ca:	003a      	movs	r2, r7
 801f8cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f8ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f8d0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f8d2:	47b0      	blx	r6
 801f8d4:	3001      	adds	r0, #1
 801f8d6:	d100      	bne.n	801f8da <_printf_float+0x3ee>
 801f8d8:	e664      	b.n	801f5a4 <_printf_float+0xb8>
 801f8da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f8dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f8de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f8e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f8e2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f8e4:	47b0      	blx	r6
 801f8e6:	3001      	adds	r0, #1
 801f8e8:	d100      	bne.n	801f8ec <_printf_float+0x400>
 801f8ea:	e65b      	b.n	801f5a4 <_printf_float+0xb8>
 801f8ec:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801f8ee:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801f8f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f8f2:	2200      	movs	r2, #0
 801f8f4:	3b01      	subs	r3, #1
 801f8f6:	930c      	str	r3, [sp, #48]	@ 0x30
 801f8f8:	2300      	movs	r3, #0
 801f8fa:	f7e0 fdd9 	bl	80004b0 <__aeabi_dcmpeq>
 801f8fe:	2800      	cmp	r0, #0
 801f900:	d11a      	bne.n	801f938 <_printf_float+0x44c>
 801f902:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f904:	1c7a      	adds	r2, r7, #1
 801f906:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f908:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f90a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f90c:	47b0      	blx	r6
 801f90e:	3001      	adds	r0, #1
 801f910:	d10e      	bne.n	801f930 <_printf_float+0x444>
 801f912:	e647      	b.n	801f5a4 <_printf_float+0xb8>
 801f914:	002a      	movs	r2, r5
 801f916:	2301      	movs	r3, #1
 801f918:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f91a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f91c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f91e:	321a      	adds	r2, #26
 801f920:	47b8      	blx	r7
 801f922:	3001      	adds	r0, #1
 801f924:	d100      	bne.n	801f928 <_printf_float+0x43c>
 801f926:	e63d      	b.n	801f5a4 <_printf_float+0xb8>
 801f928:	3601      	adds	r6, #1
 801f92a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f92c:	429e      	cmp	r6, r3
 801f92e:	dbf1      	blt.n	801f914 <_printf_float+0x428>
 801f930:	002a      	movs	r2, r5
 801f932:	0023      	movs	r3, r4
 801f934:	3250      	adds	r2, #80	@ 0x50
 801f936:	e6da      	b.n	801f6ee <_printf_float+0x202>
 801f938:	2600      	movs	r6, #0
 801f93a:	e7f6      	b.n	801f92a <_printf_float+0x43e>
 801f93c:	003a      	movs	r2, r7
 801f93e:	e7e2      	b.n	801f906 <_printf_float+0x41a>
 801f940:	002a      	movs	r2, r5
 801f942:	2301      	movs	r3, #1
 801f944:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f946:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f948:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801f94a:	3219      	adds	r2, #25
 801f94c:	47b0      	blx	r6
 801f94e:	3001      	adds	r0, #1
 801f950:	d100      	bne.n	801f954 <_printf_float+0x468>
 801f952:	e627      	b.n	801f5a4 <_printf_float+0xb8>
 801f954:	3401      	adds	r4, #1
 801f956:	68eb      	ldr	r3, [r5, #12]
 801f958:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801f95a:	1a9b      	subs	r3, r3, r2
 801f95c:	42a3      	cmp	r3, r4
 801f95e:	dcef      	bgt.n	801f940 <_printf_float+0x454>
 801f960:	e6f9      	b.n	801f756 <_printf_float+0x26a>
 801f962:	2400      	movs	r4, #0
 801f964:	e7f7      	b.n	801f956 <_printf_float+0x46a>
 801f966:	46c0      	nop			@ (mov r8, r8)

0801f968 <_printf_common>:
 801f968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f96a:	0016      	movs	r6, r2
 801f96c:	9301      	str	r3, [sp, #4]
 801f96e:	688a      	ldr	r2, [r1, #8]
 801f970:	690b      	ldr	r3, [r1, #16]
 801f972:	000c      	movs	r4, r1
 801f974:	9000      	str	r0, [sp, #0]
 801f976:	4293      	cmp	r3, r2
 801f978:	da00      	bge.n	801f97c <_printf_common+0x14>
 801f97a:	0013      	movs	r3, r2
 801f97c:	0022      	movs	r2, r4
 801f97e:	6033      	str	r3, [r6, #0]
 801f980:	3243      	adds	r2, #67	@ 0x43
 801f982:	7812      	ldrb	r2, [r2, #0]
 801f984:	2a00      	cmp	r2, #0
 801f986:	d001      	beq.n	801f98c <_printf_common+0x24>
 801f988:	3301      	adds	r3, #1
 801f98a:	6033      	str	r3, [r6, #0]
 801f98c:	6823      	ldr	r3, [r4, #0]
 801f98e:	069b      	lsls	r3, r3, #26
 801f990:	d502      	bpl.n	801f998 <_printf_common+0x30>
 801f992:	6833      	ldr	r3, [r6, #0]
 801f994:	3302      	adds	r3, #2
 801f996:	6033      	str	r3, [r6, #0]
 801f998:	6822      	ldr	r2, [r4, #0]
 801f99a:	2306      	movs	r3, #6
 801f99c:	0015      	movs	r5, r2
 801f99e:	401d      	ands	r5, r3
 801f9a0:	421a      	tst	r2, r3
 801f9a2:	d027      	beq.n	801f9f4 <_printf_common+0x8c>
 801f9a4:	0023      	movs	r3, r4
 801f9a6:	3343      	adds	r3, #67	@ 0x43
 801f9a8:	781b      	ldrb	r3, [r3, #0]
 801f9aa:	1e5a      	subs	r2, r3, #1
 801f9ac:	4193      	sbcs	r3, r2
 801f9ae:	6822      	ldr	r2, [r4, #0]
 801f9b0:	0692      	lsls	r2, r2, #26
 801f9b2:	d430      	bmi.n	801fa16 <_printf_common+0xae>
 801f9b4:	0022      	movs	r2, r4
 801f9b6:	9901      	ldr	r1, [sp, #4]
 801f9b8:	9800      	ldr	r0, [sp, #0]
 801f9ba:	9d08      	ldr	r5, [sp, #32]
 801f9bc:	3243      	adds	r2, #67	@ 0x43
 801f9be:	47a8      	blx	r5
 801f9c0:	3001      	adds	r0, #1
 801f9c2:	d025      	beq.n	801fa10 <_printf_common+0xa8>
 801f9c4:	2206      	movs	r2, #6
 801f9c6:	6823      	ldr	r3, [r4, #0]
 801f9c8:	2500      	movs	r5, #0
 801f9ca:	4013      	ands	r3, r2
 801f9cc:	2b04      	cmp	r3, #4
 801f9ce:	d105      	bne.n	801f9dc <_printf_common+0x74>
 801f9d0:	6833      	ldr	r3, [r6, #0]
 801f9d2:	68e5      	ldr	r5, [r4, #12]
 801f9d4:	1aed      	subs	r5, r5, r3
 801f9d6:	43eb      	mvns	r3, r5
 801f9d8:	17db      	asrs	r3, r3, #31
 801f9da:	401d      	ands	r5, r3
 801f9dc:	68a3      	ldr	r3, [r4, #8]
 801f9de:	6922      	ldr	r2, [r4, #16]
 801f9e0:	4293      	cmp	r3, r2
 801f9e2:	dd01      	ble.n	801f9e8 <_printf_common+0x80>
 801f9e4:	1a9b      	subs	r3, r3, r2
 801f9e6:	18ed      	adds	r5, r5, r3
 801f9e8:	2600      	movs	r6, #0
 801f9ea:	42b5      	cmp	r5, r6
 801f9ec:	d120      	bne.n	801fa30 <_printf_common+0xc8>
 801f9ee:	2000      	movs	r0, #0
 801f9f0:	e010      	b.n	801fa14 <_printf_common+0xac>
 801f9f2:	3501      	adds	r5, #1
 801f9f4:	68e3      	ldr	r3, [r4, #12]
 801f9f6:	6832      	ldr	r2, [r6, #0]
 801f9f8:	1a9b      	subs	r3, r3, r2
 801f9fa:	42ab      	cmp	r3, r5
 801f9fc:	ddd2      	ble.n	801f9a4 <_printf_common+0x3c>
 801f9fe:	0022      	movs	r2, r4
 801fa00:	2301      	movs	r3, #1
 801fa02:	9901      	ldr	r1, [sp, #4]
 801fa04:	9800      	ldr	r0, [sp, #0]
 801fa06:	9f08      	ldr	r7, [sp, #32]
 801fa08:	3219      	adds	r2, #25
 801fa0a:	47b8      	blx	r7
 801fa0c:	3001      	adds	r0, #1
 801fa0e:	d1f0      	bne.n	801f9f2 <_printf_common+0x8a>
 801fa10:	2001      	movs	r0, #1
 801fa12:	4240      	negs	r0, r0
 801fa14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fa16:	2030      	movs	r0, #48	@ 0x30
 801fa18:	18e1      	adds	r1, r4, r3
 801fa1a:	3143      	adds	r1, #67	@ 0x43
 801fa1c:	7008      	strb	r0, [r1, #0]
 801fa1e:	0021      	movs	r1, r4
 801fa20:	1c5a      	adds	r2, r3, #1
 801fa22:	3145      	adds	r1, #69	@ 0x45
 801fa24:	7809      	ldrb	r1, [r1, #0]
 801fa26:	18a2      	adds	r2, r4, r2
 801fa28:	3243      	adds	r2, #67	@ 0x43
 801fa2a:	3302      	adds	r3, #2
 801fa2c:	7011      	strb	r1, [r2, #0]
 801fa2e:	e7c1      	b.n	801f9b4 <_printf_common+0x4c>
 801fa30:	0022      	movs	r2, r4
 801fa32:	2301      	movs	r3, #1
 801fa34:	9901      	ldr	r1, [sp, #4]
 801fa36:	9800      	ldr	r0, [sp, #0]
 801fa38:	9f08      	ldr	r7, [sp, #32]
 801fa3a:	321a      	adds	r2, #26
 801fa3c:	47b8      	blx	r7
 801fa3e:	3001      	adds	r0, #1
 801fa40:	d0e6      	beq.n	801fa10 <_printf_common+0xa8>
 801fa42:	3601      	adds	r6, #1
 801fa44:	e7d1      	b.n	801f9ea <_printf_common+0x82>
	...

0801fa48 <_printf_i>:
 801fa48:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa4a:	b08b      	sub	sp, #44	@ 0x2c
 801fa4c:	9206      	str	r2, [sp, #24]
 801fa4e:	000a      	movs	r2, r1
 801fa50:	3243      	adds	r2, #67	@ 0x43
 801fa52:	9307      	str	r3, [sp, #28]
 801fa54:	9005      	str	r0, [sp, #20]
 801fa56:	9203      	str	r2, [sp, #12]
 801fa58:	7e0a      	ldrb	r2, [r1, #24]
 801fa5a:	000c      	movs	r4, r1
 801fa5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fa5e:	2a78      	cmp	r2, #120	@ 0x78
 801fa60:	d809      	bhi.n	801fa76 <_printf_i+0x2e>
 801fa62:	2a62      	cmp	r2, #98	@ 0x62
 801fa64:	d80b      	bhi.n	801fa7e <_printf_i+0x36>
 801fa66:	2a00      	cmp	r2, #0
 801fa68:	d100      	bne.n	801fa6c <_printf_i+0x24>
 801fa6a:	e0bc      	b.n	801fbe6 <_printf_i+0x19e>
 801fa6c:	497b      	ldr	r1, [pc, #492]	@ (801fc5c <_printf_i+0x214>)
 801fa6e:	9104      	str	r1, [sp, #16]
 801fa70:	2a58      	cmp	r2, #88	@ 0x58
 801fa72:	d100      	bne.n	801fa76 <_printf_i+0x2e>
 801fa74:	e090      	b.n	801fb98 <_printf_i+0x150>
 801fa76:	0025      	movs	r5, r4
 801fa78:	3542      	adds	r5, #66	@ 0x42
 801fa7a:	702a      	strb	r2, [r5, #0]
 801fa7c:	e022      	b.n	801fac4 <_printf_i+0x7c>
 801fa7e:	0010      	movs	r0, r2
 801fa80:	3863      	subs	r0, #99	@ 0x63
 801fa82:	2815      	cmp	r0, #21
 801fa84:	d8f7      	bhi.n	801fa76 <_printf_i+0x2e>
 801fa86:	f7e0 fb83 	bl	8000190 <__gnu_thumb1_case_shi>
 801fa8a:	0016      	.short	0x0016
 801fa8c:	fff6001f 	.word	0xfff6001f
 801fa90:	fff6fff6 	.word	0xfff6fff6
 801fa94:	001ffff6 	.word	0x001ffff6
 801fa98:	fff6fff6 	.word	0xfff6fff6
 801fa9c:	fff6fff6 	.word	0xfff6fff6
 801faa0:	003600a1 	.word	0x003600a1
 801faa4:	fff60080 	.word	0xfff60080
 801faa8:	00b2fff6 	.word	0x00b2fff6
 801faac:	0036fff6 	.word	0x0036fff6
 801fab0:	fff6fff6 	.word	0xfff6fff6
 801fab4:	0084      	.short	0x0084
 801fab6:	0025      	movs	r5, r4
 801fab8:	681a      	ldr	r2, [r3, #0]
 801faba:	3542      	adds	r5, #66	@ 0x42
 801fabc:	1d11      	adds	r1, r2, #4
 801fabe:	6019      	str	r1, [r3, #0]
 801fac0:	6813      	ldr	r3, [r2, #0]
 801fac2:	702b      	strb	r3, [r5, #0]
 801fac4:	2301      	movs	r3, #1
 801fac6:	e0a0      	b.n	801fc0a <_printf_i+0x1c2>
 801fac8:	6818      	ldr	r0, [r3, #0]
 801faca:	6809      	ldr	r1, [r1, #0]
 801facc:	1d02      	adds	r2, r0, #4
 801face:	060d      	lsls	r5, r1, #24
 801fad0:	d50b      	bpl.n	801faea <_printf_i+0xa2>
 801fad2:	6806      	ldr	r6, [r0, #0]
 801fad4:	601a      	str	r2, [r3, #0]
 801fad6:	2e00      	cmp	r6, #0
 801fad8:	da03      	bge.n	801fae2 <_printf_i+0x9a>
 801fada:	232d      	movs	r3, #45	@ 0x2d
 801fadc:	9a03      	ldr	r2, [sp, #12]
 801fade:	4276      	negs	r6, r6
 801fae0:	7013      	strb	r3, [r2, #0]
 801fae2:	4b5e      	ldr	r3, [pc, #376]	@ (801fc5c <_printf_i+0x214>)
 801fae4:	270a      	movs	r7, #10
 801fae6:	9304      	str	r3, [sp, #16]
 801fae8:	e018      	b.n	801fb1c <_printf_i+0xd4>
 801faea:	6806      	ldr	r6, [r0, #0]
 801faec:	601a      	str	r2, [r3, #0]
 801faee:	0649      	lsls	r1, r1, #25
 801faf0:	d5f1      	bpl.n	801fad6 <_printf_i+0x8e>
 801faf2:	b236      	sxth	r6, r6
 801faf4:	e7ef      	b.n	801fad6 <_printf_i+0x8e>
 801faf6:	6808      	ldr	r0, [r1, #0]
 801faf8:	6819      	ldr	r1, [r3, #0]
 801fafa:	c940      	ldmia	r1!, {r6}
 801fafc:	0605      	lsls	r5, r0, #24
 801fafe:	d402      	bmi.n	801fb06 <_printf_i+0xbe>
 801fb00:	0640      	lsls	r0, r0, #25
 801fb02:	d500      	bpl.n	801fb06 <_printf_i+0xbe>
 801fb04:	b2b6      	uxth	r6, r6
 801fb06:	6019      	str	r1, [r3, #0]
 801fb08:	4b54      	ldr	r3, [pc, #336]	@ (801fc5c <_printf_i+0x214>)
 801fb0a:	270a      	movs	r7, #10
 801fb0c:	9304      	str	r3, [sp, #16]
 801fb0e:	2a6f      	cmp	r2, #111	@ 0x6f
 801fb10:	d100      	bne.n	801fb14 <_printf_i+0xcc>
 801fb12:	3f02      	subs	r7, #2
 801fb14:	0023      	movs	r3, r4
 801fb16:	2200      	movs	r2, #0
 801fb18:	3343      	adds	r3, #67	@ 0x43
 801fb1a:	701a      	strb	r2, [r3, #0]
 801fb1c:	6863      	ldr	r3, [r4, #4]
 801fb1e:	60a3      	str	r3, [r4, #8]
 801fb20:	2b00      	cmp	r3, #0
 801fb22:	db03      	blt.n	801fb2c <_printf_i+0xe4>
 801fb24:	2104      	movs	r1, #4
 801fb26:	6822      	ldr	r2, [r4, #0]
 801fb28:	438a      	bics	r2, r1
 801fb2a:	6022      	str	r2, [r4, #0]
 801fb2c:	2e00      	cmp	r6, #0
 801fb2e:	d102      	bne.n	801fb36 <_printf_i+0xee>
 801fb30:	9d03      	ldr	r5, [sp, #12]
 801fb32:	2b00      	cmp	r3, #0
 801fb34:	d00c      	beq.n	801fb50 <_printf_i+0x108>
 801fb36:	9d03      	ldr	r5, [sp, #12]
 801fb38:	0030      	movs	r0, r6
 801fb3a:	0039      	movs	r1, r7
 801fb3c:	f7e0 fbb8 	bl	80002b0 <__aeabi_uidivmod>
 801fb40:	9b04      	ldr	r3, [sp, #16]
 801fb42:	3d01      	subs	r5, #1
 801fb44:	5c5b      	ldrb	r3, [r3, r1]
 801fb46:	702b      	strb	r3, [r5, #0]
 801fb48:	0033      	movs	r3, r6
 801fb4a:	0006      	movs	r6, r0
 801fb4c:	429f      	cmp	r7, r3
 801fb4e:	d9f3      	bls.n	801fb38 <_printf_i+0xf0>
 801fb50:	2f08      	cmp	r7, #8
 801fb52:	d109      	bne.n	801fb68 <_printf_i+0x120>
 801fb54:	6823      	ldr	r3, [r4, #0]
 801fb56:	07db      	lsls	r3, r3, #31
 801fb58:	d506      	bpl.n	801fb68 <_printf_i+0x120>
 801fb5a:	6862      	ldr	r2, [r4, #4]
 801fb5c:	6923      	ldr	r3, [r4, #16]
 801fb5e:	429a      	cmp	r2, r3
 801fb60:	dc02      	bgt.n	801fb68 <_printf_i+0x120>
 801fb62:	2330      	movs	r3, #48	@ 0x30
 801fb64:	3d01      	subs	r5, #1
 801fb66:	702b      	strb	r3, [r5, #0]
 801fb68:	9b03      	ldr	r3, [sp, #12]
 801fb6a:	1b5b      	subs	r3, r3, r5
 801fb6c:	6123      	str	r3, [r4, #16]
 801fb6e:	9b07      	ldr	r3, [sp, #28]
 801fb70:	0021      	movs	r1, r4
 801fb72:	9300      	str	r3, [sp, #0]
 801fb74:	9805      	ldr	r0, [sp, #20]
 801fb76:	9b06      	ldr	r3, [sp, #24]
 801fb78:	aa09      	add	r2, sp, #36	@ 0x24
 801fb7a:	f7ff fef5 	bl	801f968 <_printf_common>
 801fb7e:	3001      	adds	r0, #1
 801fb80:	d148      	bne.n	801fc14 <_printf_i+0x1cc>
 801fb82:	2001      	movs	r0, #1
 801fb84:	4240      	negs	r0, r0
 801fb86:	b00b      	add	sp, #44	@ 0x2c
 801fb88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb8a:	2220      	movs	r2, #32
 801fb8c:	6809      	ldr	r1, [r1, #0]
 801fb8e:	430a      	orrs	r2, r1
 801fb90:	6022      	str	r2, [r4, #0]
 801fb92:	2278      	movs	r2, #120	@ 0x78
 801fb94:	4932      	ldr	r1, [pc, #200]	@ (801fc60 <_printf_i+0x218>)
 801fb96:	9104      	str	r1, [sp, #16]
 801fb98:	0021      	movs	r1, r4
 801fb9a:	3145      	adds	r1, #69	@ 0x45
 801fb9c:	700a      	strb	r2, [r1, #0]
 801fb9e:	6819      	ldr	r1, [r3, #0]
 801fba0:	6822      	ldr	r2, [r4, #0]
 801fba2:	c940      	ldmia	r1!, {r6}
 801fba4:	0610      	lsls	r0, r2, #24
 801fba6:	d402      	bmi.n	801fbae <_printf_i+0x166>
 801fba8:	0650      	lsls	r0, r2, #25
 801fbaa:	d500      	bpl.n	801fbae <_printf_i+0x166>
 801fbac:	b2b6      	uxth	r6, r6
 801fbae:	6019      	str	r1, [r3, #0]
 801fbb0:	07d3      	lsls	r3, r2, #31
 801fbb2:	d502      	bpl.n	801fbba <_printf_i+0x172>
 801fbb4:	2320      	movs	r3, #32
 801fbb6:	4313      	orrs	r3, r2
 801fbb8:	6023      	str	r3, [r4, #0]
 801fbba:	2e00      	cmp	r6, #0
 801fbbc:	d001      	beq.n	801fbc2 <_printf_i+0x17a>
 801fbbe:	2710      	movs	r7, #16
 801fbc0:	e7a8      	b.n	801fb14 <_printf_i+0xcc>
 801fbc2:	2220      	movs	r2, #32
 801fbc4:	6823      	ldr	r3, [r4, #0]
 801fbc6:	4393      	bics	r3, r2
 801fbc8:	6023      	str	r3, [r4, #0]
 801fbca:	e7f8      	b.n	801fbbe <_printf_i+0x176>
 801fbcc:	681a      	ldr	r2, [r3, #0]
 801fbce:	680d      	ldr	r5, [r1, #0]
 801fbd0:	1d10      	adds	r0, r2, #4
 801fbd2:	6949      	ldr	r1, [r1, #20]
 801fbd4:	6018      	str	r0, [r3, #0]
 801fbd6:	6813      	ldr	r3, [r2, #0]
 801fbd8:	062e      	lsls	r6, r5, #24
 801fbda:	d501      	bpl.n	801fbe0 <_printf_i+0x198>
 801fbdc:	6019      	str	r1, [r3, #0]
 801fbde:	e002      	b.n	801fbe6 <_printf_i+0x19e>
 801fbe0:	066d      	lsls	r5, r5, #25
 801fbe2:	d5fb      	bpl.n	801fbdc <_printf_i+0x194>
 801fbe4:	8019      	strh	r1, [r3, #0]
 801fbe6:	2300      	movs	r3, #0
 801fbe8:	9d03      	ldr	r5, [sp, #12]
 801fbea:	6123      	str	r3, [r4, #16]
 801fbec:	e7bf      	b.n	801fb6e <_printf_i+0x126>
 801fbee:	681a      	ldr	r2, [r3, #0]
 801fbf0:	1d11      	adds	r1, r2, #4
 801fbf2:	6019      	str	r1, [r3, #0]
 801fbf4:	6815      	ldr	r5, [r2, #0]
 801fbf6:	2100      	movs	r1, #0
 801fbf8:	0028      	movs	r0, r5
 801fbfa:	6862      	ldr	r2, [r4, #4]
 801fbfc:	f000 fb7b 	bl	80202f6 <memchr>
 801fc00:	2800      	cmp	r0, #0
 801fc02:	d001      	beq.n	801fc08 <_printf_i+0x1c0>
 801fc04:	1b40      	subs	r0, r0, r5
 801fc06:	6060      	str	r0, [r4, #4]
 801fc08:	6863      	ldr	r3, [r4, #4]
 801fc0a:	6123      	str	r3, [r4, #16]
 801fc0c:	2300      	movs	r3, #0
 801fc0e:	9a03      	ldr	r2, [sp, #12]
 801fc10:	7013      	strb	r3, [r2, #0]
 801fc12:	e7ac      	b.n	801fb6e <_printf_i+0x126>
 801fc14:	002a      	movs	r2, r5
 801fc16:	6923      	ldr	r3, [r4, #16]
 801fc18:	9906      	ldr	r1, [sp, #24]
 801fc1a:	9805      	ldr	r0, [sp, #20]
 801fc1c:	9d07      	ldr	r5, [sp, #28]
 801fc1e:	47a8      	blx	r5
 801fc20:	3001      	adds	r0, #1
 801fc22:	d0ae      	beq.n	801fb82 <_printf_i+0x13a>
 801fc24:	6823      	ldr	r3, [r4, #0]
 801fc26:	079b      	lsls	r3, r3, #30
 801fc28:	d415      	bmi.n	801fc56 <_printf_i+0x20e>
 801fc2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc2c:	68e0      	ldr	r0, [r4, #12]
 801fc2e:	4298      	cmp	r0, r3
 801fc30:	daa9      	bge.n	801fb86 <_printf_i+0x13e>
 801fc32:	0018      	movs	r0, r3
 801fc34:	e7a7      	b.n	801fb86 <_printf_i+0x13e>
 801fc36:	0022      	movs	r2, r4
 801fc38:	2301      	movs	r3, #1
 801fc3a:	9906      	ldr	r1, [sp, #24]
 801fc3c:	9805      	ldr	r0, [sp, #20]
 801fc3e:	9e07      	ldr	r6, [sp, #28]
 801fc40:	3219      	adds	r2, #25
 801fc42:	47b0      	blx	r6
 801fc44:	3001      	adds	r0, #1
 801fc46:	d09c      	beq.n	801fb82 <_printf_i+0x13a>
 801fc48:	3501      	adds	r5, #1
 801fc4a:	68e3      	ldr	r3, [r4, #12]
 801fc4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fc4e:	1a9b      	subs	r3, r3, r2
 801fc50:	42ab      	cmp	r3, r5
 801fc52:	dcf0      	bgt.n	801fc36 <_printf_i+0x1ee>
 801fc54:	e7e9      	b.n	801fc2a <_printf_i+0x1e2>
 801fc56:	2500      	movs	r5, #0
 801fc58:	e7f7      	b.n	801fc4a <_printf_i+0x202>
 801fc5a:	46c0      	nop			@ (mov r8, r8)
 801fc5c:	08025c73 	.word	0x08025c73
 801fc60:	08025c84 	.word	0x08025c84

0801fc64 <std>:
 801fc64:	2300      	movs	r3, #0
 801fc66:	b510      	push	{r4, lr}
 801fc68:	0004      	movs	r4, r0
 801fc6a:	6003      	str	r3, [r0, #0]
 801fc6c:	6043      	str	r3, [r0, #4]
 801fc6e:	6083      	str	r3, [r0, #8]
 801fc70:	8181      	strh	r1, [r0, #12]
 801fc72:	6643      	str	r3, [r0, #100]	@ 0x64
 801fc74:	81c2      	strh	r2, [r0, #14]
 801fc76:	6103      	str	r3, [r0, #16]
 801fc78:	6143      	str	r3, [r0, #20]
 801fc7a:	6183      	str	r3, [r0, #24]
 801fc7c:	0019      	movs	r1, r3
 801fc7e:	2208      	movs	r2, #8
 801fc80:	305c      	adds	r0, #92	@ 0x5c
 801fc82:	f000 fa67 	bl	8020154 <memset>
 801fc86:	4b0b      	ldr	r3, [pc, #44]	@ (801fcb4 <std+0x50>)
 801fc88:	6224      	str	r4, [r4, #32]
 801fc8a:	6263      	str	r3, [r4, #36]	@ 0x24
 801fc8c:	4b0a      	ldr	r3, [pc, #40]	@ (801fcb8 <std+0x54>)
 801fc8e:	62a3      	str	r3, [r4, #40]	@ 0x28
 801fc90:	4b0a      	ldr	r3, [pc, #40]	@ (801fcbc <std+0x58>)
 801fc92:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801fc94:	4b0a      	ldr	r3, [pc, #40]	@ (801fcc0 <std+0x5c>)
 801fc96:	6323      	str	r3, [r4, #48]	@ 0x30
 801fc98:	4b0a      	ldr	r3, [pc, #40]	@ (801fcc4 <std+0x60>)
 801fc9a:	429c      	cmp	r4, r3
 801fc9c:	d005      	beq.n	801fcaa <std+0x46>
 801fc9e:	4b0a      	ldr	r3, [pc, #40]	@ (801fcc8 <std+0x64>)
 801fca0:	429c      	cmp	r4, r3
 801fca2:	d002      	beq.n	801fcaa <std+0x46>
 801fca4:	4b09      	ldr	r3, [pc, #36]	@ (801fccc <std+0x68>)
 801fca6:	429c      	cmp	r4, r3
 801fca8:	d103      	bne.n	801fcb2 <std+0x4e>
 801fcaa:	0020      	movs	r0, r4
 801fcac:	3058      	adds	r0, #88	@ 0x58
 801fcae:	f000 fb1f 	bl	80202f0 <__retarget_lock_init_recursive>
 801fcb2:	bd10      	pop	{r4, pc}
 801fcb4:	0801ff0d 	.word	0x0801ff0d
 801fcb8:	0801ff35 	.word	0x0801ff35
 801fcbc:	0801ff6d 	.word	0x0801ff6d
 801fcc0:	0801ff99 	.word	0x0801ff99
 801fcc4:	20003860 	.word	0x20003860
 801fcc8:	200038c8 	.word	0x200038c8
 801fccc:	20003930 	.word	0x20003930

0801fcd0 <stdio_exit_handler>:
 801fcd0:	b510      	push	{r4, lr}
 801fcd2:	4a03      	ldr	r2, [pc, #12]	@ (801fce0 <stdio_exit_handler+0x10>)
 801fcd4:	4903      	ldr	r1, [pc, #12]	@ (801fce4 <stdio_exit_handler+0x14>)
 801fcd6:	4804      	ldr	r0, [pc, #16]	@ (801fce8 <stdio_exit_handler+0x18>)
 801fcd8:	f000 f86c 	bl	801fdb4 <_fwalk_sglue>
 801fcdc:	bd10      	pop	{r4, pc}
 801fcde:	46c0      	nop			@ (mov r8, r8)
 801fce0:	20000254 	.word	0x20000254
 801fce4:	08022915 	.word	0x08022915
 801fce8:	200003d0 	.word	0x200003d0

0801fcec <cleanup_stdio>:
 801fcec:	6841      	ldr	r1, [r0, #4]
 801fcee:	4b0b      	ldr	r3, [pc, #44]	@ (801fd1c <cleanup_stdio+0x30>)
 801fcf0:	b510      	push	{r4, lr}
 801fcf2:	0004      	movs	r4, r0
 801fcf4:	4299      	cmp	r1, r3
 801fcf6:	d001      	beq.n	801fcfc <cleanup_stdio+0x10>
 801fcf8:	f002 fe0c 	bl	8022914 <_fflush_r>
 801fcfc:	68a1      	ldr	r1, [r4, #8]
 801fcfe:	4b08      	ldr	r3, [pc, #32]	@ (801fd20 <cleanup_stdio+0x34>)
 801fd00:	4299      	cmp	r1, r3
 801fd02:	d002      	beq.n	801fd0a <cleanup_stdio+0x1e>
 801fd04:	0020      	movs	r0, r4
 801fd06:	f002 fe05 	bl	8022914 <_fflush_r>
 801fd0a:	68e1      	ldr	r1, [r4, #12]
 801fd0c:	4b05      	ldr	r3, [pc, #20]	@ (801fd24 <cleanup_stdio+0x38>)
 801fd0e:	4299      	cmp	r1, r3
 801fd10:	d002      	beq.n	801fd18 <cleanup_stdio+0x2c>
 801fd12:	0020      	movs	r0, r4
 801fd14:	f002 fdfe 	bl	8022914 <_fflush_r>
 801fd18:	bd10      	pop	{r4, pc}
 801fd1a:	46c0      	nop			@ (mov r8, r8)
 801fd1c:	20003860 	.word	0x20003860
 801fd20:	200038c8 	.word	0x200038c8
 801fd24:	20003930 	.word	0x20003930

0801fd28 <global_stdio_init.part.0>:
 801fd28:	b510      	push	{r4, lr}
 801fd2a:	4b09      	ldr	r3, [pc, #36]	@ (801fd50 <global_stdio_init.part.0+0x28>)
 801fd2c:	4a09      	ldr	r2, [pc, #36]	@ (801fd54 <global_stdio_init.part.0+0x2c>)
 801fd2e:	2104      	movs	r1, #4
 801fd30:	601a      	str	r2, [r3, #0]
 801fd32:	4809      	ldr	r0, [pc, #36]	@ (801fd58 <global_stdio_init.part.0+0x30>)
 801fd34:	2200      	movs	r2, #0
 801fd36:	f7ff ff95 	bl	801fc64 <std>
 801fd3a:	2201      	movs	r2, #1
 801fd3c:	2109      	movs	r1, #9
 801fd3e:	4807      	ldr	r0, [pc, #28]	@ (801fd5c <global_stdio_init.part.0+0x34>)
 801fd40:	f7ff ff90 	bl	801fc64 <std>
 801fd44:	2202      	movs	r2, #2
 801fd46:	2112      	movs	r1, #18
 801fd48:	4805      	ldr	r0, [pc, #20]	@ (801fd60 <global_stdio_init.part.0+0x38>)
 801fd4a:	f7ff ff8b 	bl	801fc64 <std>
 801fd4e:	bd10      	pop	{r4, pc}
 801fd50:	20003998 	.word	0x20003998
 801fd54:	0801fcd1 	.word	0x0801fcd1
 801fd58:	20003860 	.word	0x20003860
 801fd5c:	200038c8 	.word	0x200038c8
 801fd60:	20003930 	.word	0x20003930

0801fd64 <__sfp_lock_acquire>:
 801fd64:	b510      	push	{r4, lr}
 801fd66:	4802      	ldr	r0, [pc, #8]	@ (801fd70 <__sfp_lock_acquire+0xc>)
 801fd68:	f000 fac3 	bl	80202f2 <__retarget_lock_acquire_recursive>
 801fd6c:	bd10      	pop	{r4, pc}
 801fd6e:	46c0      	nop			@ (mov r8, r8)
 801fd70:	200039a1 	.word	0x200039a1

0801fd74 <__sfp_lock_release>:
 801fd74:	b510      	push	{r4, lr}
 801fd76:	4802      	ldr	r0, [pc, #8]	@ (801fd80 <__sfp_lock_release+0xc>)
 801fd78:	f000 fabc 	bl	80202f4 <__retarget_lock_release_recursive>
 801fd7c:	bd10      	pop	{r4, pc}
 801fd7e:	46c0      	nop			@ (mov r8, r8)
 801fd80:	200039a1 	.word	0x200039a1

0801fd84 <__sinit>:
 801fd84:	b510      	push	{r4, lr}
 801fd86:	0004      	movs	r4, r0
 801fd88:	f7ff ffec 	bl	801fd64 <__sfp_lock_acquire>
 801fd8c:	6a23      	ldr	r3, [r4, #32]
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	d002      	beq.n	801fd98 <__sinit+0x14>
 801fd92:	f7ff ffef 	bl	801fd74 <__sfp_lock_release>
 801fd96:	bd10      	pop	{r4, pc}
 801fd98:	4b04      	ldr	r3, [pc, #16]	@ (801fdac <__sinit+0x28>)
 801fd9a:	6223      	str	r3, [r4, #32]
 801fd9c:	4b04      	ldr	r3, [pc, #16]	@ (801fdb0 <__sinit+0x2c>)
 801fd9e:	681b      	ldr	r3, [r3, #0]
 801fda0:	2b00      	cmp	r3, #0
 801fda2:	d1f6      	bne.n	801fd92 <__sinit+0xe>
 801fda4:	f7ff ffc0 	bl	801fd28 <global_stdio_init.part.0>
 801fda8:	e7f3      	b.n	801fd92 <__sinit+0xe>
 801fdaa:	46c0      	nop			@ (mov r8, r8)
 801fdac:	0801fced 	.word	0x0801fced
 801fdb0:	20003998 	.word	0x20003998

0801fdb4 <_fwalk_sglue>:
 801fdb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fdb6:	0014      	movs	r4, r2
 801fdb8:	2600      	movs	r6, #0
 801fdba:	9000      	str	r0, [sp, #0]
 801fdbc:	9101      	str	r1, [sp, #4]
 801fdbe:	68a5      	ldr	r5, [r4, #8]
 801fdc0:	6867      	ldr	r7, [r4, #4]
 801fdc2:	3f01      	subs	r7, #1
 801fdc4:	d504      	bpl.n	801fdd0 <_fwalk_sglue+0x1c>
 801fdc6:	6824      	ldr	r4, [r4, #0]
 801fdc8:	2c00      	cmp	r4, #0
 801fdca:	d1f8      	bne.n	801fdbe <_fwalk_sglue+0xa>
 801fdcc:	0030      	movs	r0, r6
 801fdce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fdd0:	89ab      	ldrh	r3, [r5, #12]
 801fdd2:	2b01      	cmp	r3, #1
 801fdd4:	d908      	bls.n	801fde8 <_fwalk_sglue+0x34>
 801fdd6:	220e      	movs	r2, #14
 801fdd8:	5eab      	ldrsh	r3, [r5, r2]
 801fdda:	3301      	adds	r3, #1
 801fddc:	d004      	beq.n	801fde8 <_fwalk_sglue+0x34>
 801fdde:	0029      	movs	r1, r5
 801fde0:	9800      	ldr	r0, [sp, #0]
 801fde2:	9b01      	ldr	r3, [sp, #4]
 801fde4:	4798      	blx	r3
 801fde6:	4306      	orrs	r6, r0
 801fde8:	3568      	adds	r5, #104	@ 0x68
 801fdea:	e7ea      	b.n	801fdc2 <_fwalk_sglue+0xe>

0801fdec <iprintf>:
 801fdec:	b40f      	push	{r0, r1, r2, r3}
 801fdee:	b507      	push	{r0, r1, r2, lr}
 801fdf0:	4905      	ldr	r1, [pc, #20]	@ (801fe08 <iprintf+0x1c>)
 801fdf2:	ab04      	add	r3, sp, #16
 801fdf4:	6808      	ldr	r0, [r1, #0]
 801fdf6:	cb04      	ldmia	r3!, {r2}
 801fdf8:	6881      	ldr	r1, [r0, #8]
 801fdfa:	9301      	str	r3, [sp, #4]
 801fdfc:	f002 fbe8 	bl	80225d0 <_vfiprintf_r>
 801fe00:	b003      	add	sp, #12
 801fe02:	bc08      	pop	{r3}
 801fe04:	b004      	add	sp, #16
 801fe06:	4718      	bx	r3
 801fe08:	200003cc 	.word	0x200003cc

0801fe0c <_puts_r>:
 801fe0c:	6a03      	ldr	r3, [r0, #32]
 801fe0e:	b570      	push	{r4, r5, r6, lr}
 801fe10:	0005      	movs	r5, r0
 801fe12:	000e      	movs	r6, r1
 801fe14:	6884      	ldr	r4, [r0, #8]
 801fe16:	2b00      	cmp	r3, #0
 801fe18:	d101      	bne.n	801fe1e <_puts_r+0x12>
 801fe1a:	f7ff ffb3 	bl	801fd84 <__sinit>
 801fe1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fe20:	07db      	lsls	r3, r3, #31
 801fe22:	d405      	bmi.n	801fe30 <_puts_r+0x24>
 801fe24:	89a3      	ldrh	r3, [r4, #12]
 801fe26:	059b      	lsls	r3, r3, #22
 801fe28:	d402      	bmi.n	801fe30 <_puts_r+0x24>
 801fe2a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fe2c:	f000 fa61 	bl	80202f2 <__retarget_lock_acquire_recursive>
 801fe30:	89a3      	ldrh	r3, [r4, #12]
 801fe32:	071b      	lsls	r3, r3, #28
 801fe34:	d502      	bpl.n	801fe3c <_puts_r+0x30>
 801fe36:	6923      	ldr	r3, [r4, #16]
 801fe38:	2b00      	cmp	r3, #0
 801fe3a:	d11f      	bne.n	801fe7c <_puts_r+0x70>
 801fe3c:	0021      	movs	r1, r4
 801fe3e:	0028      	movs	r0, r5
 801fe40:	f000 f92a 	bl	8020098 <__swsetup_r>
 801fe44:	2800      	cmp	r0, #0
 801fe46:	d019      	beq.n	801fe7c <_puts_r+0x70>
 801fe48:	2501      	movs	r5, #1
 801fe4a:	426d      	negs	r5, r5
 801fe4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fe4e:	07db      	lsls	r3, r3, #31
 801fe50:	d405      	bmi.n	801fe5e <_puts_r+0x52>
 801fe52:	89a3      	ldrh	r3, [r4, #12]
 801fe54:	059b      	lsls	r3, r3, #22
 801fe56:	d402      	bmi.n	801fe5e <_puts_r+0x52>
 801fe58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fe5a:	f000 fa4b 	bl	80202f4 <__retarget_lock_release_recursive>
 801fe5e:	0028      	movs	r0, r5
 801fe60:	bd70      	pop	{r4, r5, r6, pc}
 801fe62:	3601      	adds	r6, #1
 801fe64:	60a3      	str	r3, [r4, #8]
 801fe66:	2b00      	cmp	r3, #0
 801fe68:	da04      	bge.n	801fe74 <_puts_r+0x68>
 801fe6a:	69a2      	ldr	r2, [r4, #24]
 801fe6c:	429a      	cmp	r2, r3
 801fe6e:	dc16      	bgt.n	801fe9e <_puts_r+0x92>
 801fe70:	290a      	cmp	r1, #10
 801fe72:	d014      	beq.n	801fe9e <_puts_r+0x92>
 801fe74:	6823      	ldr	r3, [r4, #0]
 801fe76:	1c5a      	adds	r2, r3, #1
 801fe78:	6022      	str	r2, [r4, #0]
 801fe7a:	7019      	strb	r1, [r3, #0]
 801fe7c:	68a3      	ldr	r3, [r4, #8]
 801fe7e:	7831      	ldrb	r1, [r6, #0]
 801fe80:	3b01      	subs	r3, #1
 801fe82:	2900      	cmp	r1, #0
 801fe84:	d1ed      	bne.n	801fe62 <_puts_r+0x56>
 801fe86:	60a3      	str	r3, [r4, #8]
 801fe88:	2b00      	cmp	r3, #0
 801fe8a:	da0f      	bge.n	801feac <_puts_r+0xa0>
 801fe8c:	0022      	movs	r2, r4
 801fe8e:	0028      	movs	r0, r5
 801fe90:	310a      	adds	r1, #10
 801fe92:	f000 f8bf 	bl	8020014 <__swbuf_r>
 801fe96:	3001      	adds	r0, #1
 801fe98:	d0d6      	beq.n	801fe48 <_puts_r+0x3c>
 801fe9a:	250a      	movs	r5, #10
 801fe9c:	e7d6      	b.n	801fe4c <_puts_r+0x40>
 801fe9e:	0022      	movs	r2, r4
 801fea0:	0028      	movs	r0, r5
 801fea2:	f000 f8b7 	bl	8020014 <__swbuf_r>
 801fea6:	3001      	adds	r0, #1
 801fea8:	d1e8      	bne.n	801fe7c <_puts_r+0x70>
 801feaa:	e7cd      	b.n	801fe48 <_puts_r+0x3c>
 801feac:	6823      	ldr	r3, [r4, #0]
 801feae:	1c5a      	adds	r2, r3, #1
 801feb0:	6022      	str	r2, [r4, #0]
 801feb2:	220a      	movs	r2, #10
 801feb4:	701a      	strb	r2, [r3, #0]
 801feb6:	e7f0      	b.n	801fe9a <_puts_r+0x8e>

0801feb8 <puts>:
 801feb8:	b510      	push	{r4, lr}
 801feba:	4b03      	ldr	r3, [pc, #12]	@ (801fec8 <puts+0x10>)
 801febc:	0001      	movs	r1, r0
 801febe:	6818      	ldr	r0, [r3, #0]
 801fec0:	f7ff ffa4 	bl	801fe0c <_puts_r>
 801fec4:	bd10      	pop	{r4, pc}
 801fec6:	46c0      	nop			@ (mov r8, r8)
 801fec8:	200003cc 	.word	0x200003cc

0801fecc <siprintf>:
 801fecc:	b40e      	push	{r1, r2, r3}
 801fece:	b500      	push	{lr}
 801fed0:	490b      	ldr	r1, [pc, #44]	@ (801ff00 <siprintf+0x34>)
 801fed2:	b09c      	sub	sp, #112	@ 0x70
 801fed4:	ab1d      	add	r3, sp, #116	@ 0x74
 801fed6:	9002      	str	r0, [sp, #8]
 801fed8:	9006      	str	r0, [sp, #24]
 801feda:	9107      	str	r1, [sp, #28]
 801fedc:	9104      	str	r1, [sp, #16]
 801fede:	4809      	ldr	r0, [pc, #36]	@ (801ff04 <siprintf+0x38>)
 801fee0:	4909      	ldr	r1, [pc, #36]	@ (801ff08 <siprintf+0x3c>)
 801fee2:	cb04      	ldmia	r3!, {r2}
 801fee4:	9105      	str	r1, [sp, #20]
 801fee6:	6800      	ldr	r0, [r0, #0]
 801fee8:	a902      	add	r1, sp, #8
 801feea:	9301      	str	r3, [sp, #4]
 801feec:	f002 fa4a 	bl	8022384 <_svfiprintf_r>
 801fef0:	2200      	movs	r2, #0
 801fef2:	9b02      	ldr	r3, [sp, #8]
 801fef4:	701a      	strb	r2, [r3, #0]
 801fef6:	b01c      	add	sp, #112	@ 0x70
 801fef8:	bc08      	pop	{r3}
 801fefa:	b003      	add	sp, #12
 801fefc:	4718      	bx	r3
 801fefe:	46c0      	nop			@ (mov r8, r8)
 801ff00:	7fffffff 	.word	0x7fffffff
 801ff04:	200003cc 	.word	0x200003cc
 801ff08:	ffff0208 	.word	0xffff0208

0801ff0c <__sread>:
 801ff0c:	b570      	push	{r4, r5, r6, lr}
 801ff0e:	000c      	movs	r4, r1
 801ff10:	250e      	movs	r5, #14
 801ff12:	5f49      	ldrsh	r1, [r1, r5]
 801ff14:	f000 f99a 	bl	802024c <_read_r>
 801ff18:	2800      	cmp	r0, #0
 801ff1a:	db03      	blt.n	801ff24 <__sread+0x18>
 801ff1c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801ff1e:	181b      	adds	r3, r3, r0
 801ff20:	6563      	str	r3, [r4, #84]	@ 0x54
 801ff22:	bd70      	pop	{r4, r5, r6, pc}
 801ff24:	89a3      	ldrh	r3, [r4, #12]
 801ff26:	4a02      	ldr	r2, [pc, #8]	@ (801ff30 <__sread+0x24>)
 801ff28:	4013      	ands	r3, r2
 801ff2a:	81a3      	strh	r3, [r4, #12]
 801ff2c:	e7f9      	b.n	801ff22 <__sread+0x16>
 801ff2e:	46c0      	nop			@ (mov r8, r8)
 801ff30:	ffffefff 	.word	0xffffefff

0801ff34 <__swrite>:
 801ff34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff36:	001f      	movs	r7, r3
 801ff38:	898b      	ldrh	r3, [r1, #12]
 801ff3a:	0005      	movs	r5, r0
 801ff3c:	000c      	movs	r4, r1
 801ff3e:	0016      	movs	r6, r2
 801ff40:	05db      	lsls	r3, r3, #23
 801ff42:	d505      	bpl.n	801ff50 <__swrite+0x1c>
 801ff44:	230e      	movs	r3, #14
 801ff46:	5ec9      	ldrsh	r1, [r1, r3]
 801ff48:	2200      	movs	r2, #0
 801ff4a:	2302      	movs	r3, #2
 801ff4c:	f000 f96a 	bl	8020224 <_lseek_r>
 801ff50:	89a3      	ldrh	r3, [r4, #12]
 801ff52:	4a05      	ldr	r2, [pc, #20]	@ (801ff68 <__swrite+0x34>)
 801ff54:	0028      	movs	r0, r5
 801ff56:	4013      	ands	r3, r2
 801ff58:	81a3      	strh	r3, [r4, #12]
 801ff5a:	0032      	movs	r2, r6
 801ff5c:	230e      	movs	r3, #14
 801ff5e:	5ee1      	ldrsh	r1, [r4, r3]
 801ff60:	003b      	movs	r3, r7
 801ff62:	f000 f987 	bl	8020274 <_write_r>
 801ff66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ff68:	ffffefff 	.word	0xffffefff

0801ff6c <__sseek>:
 801ff6c:	b570      	push	{r4, r5, r6, lr}
 801ff6e:	000c      	movs	r4, r1
 801ff70:	250e      	movs	r5, #14
 801ff72:	5f49      	ldrsh	r1, [r1, r5]
 801ff74:	f000 f956 	bl	8020224 <_lseek_r>
 801ff78:	89a3      	ldrh	r3, [r4, #12]
 801ff7a:	1c42      	adds	r2, r0, #1
 801ff7c:	d103      	bne.n	801ff86 <__sseek+0x1a>
 801ff7e:	4a05      	ldr	r2, [pc, #20]	@ (801ff94 <__sseek+0x28>)
 801ff80:	4013      	ands	r3, r2
 801ff82:	81a3      	strh	r3, [r4, #12]
 801ff84:	bd70      	pop	{r4, r5, r6, pc}
 801ff86:	2280      	movs	r2, #128	@ 0x80
 801ff88:	0152      	lsls	r2, r2, #5
 801ff8a:	4313      	orrs	r3, r2
 801ff8c:	81a3      	strh	r3, [r4, #12]
 801ff8e:	6560      	str	r0, [r4, #84]	@ 0x54
 801ff90:	e7f8      	b.n	801ff84 <__sseek+0x18>
 801ff92:	46c0      	nop			@ (mov r8, r8)
 801ff94:	ffffefff 	.word	0xffffefff

0801ff98 <__sclose>:
 801ff98:	b510      	push	{r4, lr}
 801ff9a:	230e      	movs	r3, #14
 801ff9c:	5ec9      	ldrsh	r1, [r1, r3]
 801ff9e:	f000 f92f 	bl	8020200 <_close_r>
 801ffa2:	bd10      	pop	{r4, pc}

0801ffa4 <_vsniprintf_r>:
 801ffa4:	b530      	push	{r4, r5, lr}
 801ffa6:	0014      	movs	r4, r2
 801ffa8:	0005      	movs	r5, r0
 801ffaa:	001a      	movs	r2, r3
 801ffac:	b09b      	sub	sp, #108	@ 0x6c
 801ffae:	2c00      	cmp	r4, #0
 801ffb0:	da05      	bge.n	801ffbe <_vsniprintf_r+0x1a>
 801ffb2:	238b      	movs	r3, #139	@ 0x8b
 801ffb4:	6003      	str	r3, [r0, #0]
 801ffb6:	2001      	movs	r0, #1
 801ffb8:	4240      	negs	r0, r0
 801ffba:	b01b      	add	sp, #108	@ 0x6c
 801ffbc:	bd30      	pop	{r4, r5, pc}
 801ffbe:	2382      	movs	r3, #130	@ 0x82
 801ffc0:	4668      	mov	r0, sp
 801ffc2:	009b      	lsls	r3, r3, #2
 801ffc4:	8183      	strh	r3, [r0, #12]
 801ffc6:	2300      	movs	r3, #0
 801ffc8:	9100      	str	r1, [sp, #0]
 801ffca:	9104      	str	r1, [sp, #16]
 801ffcc:	429c      	cmp	r4, r3
 801ffce:	d000      	beq.n	801ffd2 <_vsniprintf_r+0x2e>
 801ffd0:	1e63      	subs	r3, r4, #1
 801ffd2:	9302      	str	r3, [sp, #8]
 801ffd4:	9305      	str	r3, [sp, #20]
 801ffd6:	2301      	movs	r3, #1
 801ffd8:	4669      	mov	r1, sp
 801ffda:	425b      	negs	r3, r3
 801ffdc:	81cb      	strh	r3, [r1, #14]
 801ffde:	0028      	movs	r0, r5
 801ffe0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ffe2:	f002 f9cf 	bl	8022384 <_svfiprintf_r>
 801ffe6:	1c43      	adds	r3, r0, #1
 801ffe8:	da01      	bge.n	801ffee <_vsniprintf_r+0x4a>
 801ffea:	238b      	movs	r3, #139	@ 0x8b
 801ffec:	602b      	str	r3, [r5, #0]
 801ffee:	2c00      	cmp	r4, #0
 801fff0:	d0e3      	beq.n	801ffba <_vsniprintf_r+0x16>
 801fff2:	2200      	movs	r2, #0
 801fff4:	9b00      	ldr	r3, [sp, #0]
 801fff6:	701a      	strb	r2, [r3, #0]
 801fff8:	e7df      	b.n	801ffba <_vsniprintf_r+0x16>
	...

0801fffc <vsniprintf>:
 801fffc:	b513      	push	{r0, r1, r4, lr}
 801fffe:	4c04      	ldr	r4, [pc, #16]	@ (8020010 <vsniprintf+0x14>)
 8020000:	9300      	str	r3, [sp, #0]
 8020002:	0013      	movs	r3, r2
 8020004:	000a      	movs	r2, r1
 8020006:	0001      	movs	r1, r0
 8020008:	6820      	ldr	r0, [r4, #0]
 802000a:	f7ff ffcb 	bl	801ffa4 <_vsniprintf_r>
 802000e:	bd16      	pop	{r1, r2, r4, pc}
 8020010:	200003cc 	.word	0x200003cc

08020014 <__swbuf_r>:
 8020014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020016:	0006      	movs	r6, r0
 8020018:	000d      	movs	r5, r1
 802001a:	0014      	movs	r4, r2
 802001c:	2800      	cmp	r0, #0
 802001e:	d004      	beq.n	802002a <__swbuf_r+0x16>
 8020020:	6a03      	ldr	r3, [r0, #32]
 8020022:	2b00      	cmp	r3, #0
 8020024:	d101      	bne.n	802002a <__swbuf_r+0x16>
 8020026:	f7ff fead 	bl	801fd84 <__sinit>
 802002a:	69a3      	ldr	r3, [r4, #24]
 802002c:	60a3      	str	r3, [r4, #8]
 802002e:	89a3      	ldrh	r3, [r4, #12]
 8020030:	071b      	lsls	r3, r3, #28
 8020032:	d502      	bpl.n	802003a <__swbuf_r+0x26>
 8020034:	6923      	ldr	r3, [r4, #16]
 8020036:	2b00      	cmp	r3, #0
 8020038:	d109      	bne.n	802004e <__swbuf_r+0x3a>
 802003a:	0021      	movs	r1, r4
 802003c:	0030      	movs	r0, r6
 802003e:	f000 f82b 	bl	8020098 <__swsetup_r>
 8020042:	2800      	cmp	r0, #0
 8020044:	d003      	beq.n	802004e <__swbuf_r+0x3a>
 8020046:	2501      	movs	r5, #1
 8020048:	426d      	negs	r5, r5
 802004a:	0028      	movs	r0, r5
 802004c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802004e:	6923      	ldr	r3, [r4, #16]
 8020050:	6820      	ldr	r0, [r4, #0]
 8020052:	b2ef      	uxtb	r7, r5
 8020054:	1ac0      	subs	r0, r0, r3
 8020056:	6963      	ldr	r3, [r4, #20]
 8020058:	b2ed      	uxtb	r5, r5
 802005a:	4283      	cmp	r3, r0
 802005c:	dc05      	bgt.n	802006a <__swbuf_r+0x56>
 802005e:	0021      	movs	r1, r4
 8020060:	0030      	movs	r0, r6
 8020062:	f002 fc57 	bl	8022914 <_fflush_r>
 8020066:	2800      	cmp	r0, #0
 8020068:	d1ed      	bne.n	8020046 <__swbuf_r+0x32>
 802006a:	68a3      	ldr	r3, [r4, #8]
 802006c:	3001      	adds	r0, #1
 802006e:	3b01      	subs	r3, #1
 8020070:	60a3      	str	r3, [r4, #8]
 8020072:	6823      	ldr	r3, [r4, #0]
 8020074:	1c5a      	adds	r2, r3, #1
 8020076:	6022      	str	r2, [r4, #0]
 8020078:	701f      	strb	r7, [r3, #0]
 802007a:	6963      	ldr	r3, [r4, #20]
 802007c:	4283      	cmp	r3, r0
 802007e:	d004      	beq.n	802008a <__swbuf_r+0x76>
 8020080:	89a3      	ldrh	r3, [r4, #12]
 8020082:	07db      	lsls	r3, r3, #31
 8020084:	d5e1      	bpl.n	802004a <__swbuf_r+0x36>
 8020086:	2d0a      	cmp	r5, #10
 8020088:	d1df      	bne.n	802004a <__swbuf_r+0x36>
 802008a:	0021      	movs	r1, r4
 802008c:	0030      	movs	r0, r6
 802008e:	f002 fc41 	bl	8022914 <_fflush_r>
 8020092:	2800      	cmp	r0, #0
 8020094:	d0d9      	beq.n	802004a <__swbuf_r+0x36>
 8020096:	e7d6      	b.n	8020046 <__swbuf_r+0x32>

08020098 <__swsetup_r>:
 8020098:	4b2d      	ldr	r3, [pc, #180]	@ (8020150 <__swsetup_r+0xb8>)
 802009a:	b570      	push	{r4, r5, r6, lr}
 802009c:	0005      	movs	r5, r0
 802009e:	6818      	ldr	r0, [r3, #0]
 80200a0:	000c      	movs	r4, r1
 80200a2:	2800      	cmp	r0, #0
 80200a4:	d004      	beq.n	80200b0 <__swsetup_r+0x18>
 80200a6:	6a03      	ldr	r3, [r0, #32]
 80200a8:	2b00      	cmp	r3, #0
 80200aa:	d101      	bne.n	80200b0 <__swsetup_r+0x18>
 80200ac:	f7ff fe6a 	bl	801fd84 <__sinit>
 80200b0:	230c      	movs	r3, #12
 80200b2:	5ee2      	ldrsh	r2, [r4, r3]
 80200b4:	0713      	lsls	r3, r2, #28
 80200b6:	d423      	bmi.n	8020100 <__swsetup_r+0x68>
 80200b8:	06d3      	lsls	r3, r2, #27
 80200ba:	d407      	bmi.n	80200cc <__swsetup_r+0x34>
 80200bc:	2309      	movs	r3, #9
 80200be:	602b      	str	r3, [r5, #0]
 80200c0:	2340      	movs	r3, #64	@ 0x40
 80200c2:	2001      	movs	r0, #1
 80200c4:	4313      	orrs	r3, r2
 80200c6:	81a3      	strh	r3, [r4, #12]
 80200c8:	4240      	negs	r0, r0
 80200ca:	e03a      	b.n	8020142 <__swsetup_r+0xaa>
 80200cc:	0752      	lsls	r2, r2, #29
 80200ce:	d513      	bpl.n	80200f8 <__swsetup_r+0x60>
 80200d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80200d2:	2900      	cmp	r1, #0
 80200d4:	d008      	beq.n	80200e8 <__swsetup_r+0x50>
 80200d6:	0023      	movs	r3, r4
 80200d8:	3344      	adds	r3, #68	@ 0x44
 80200da:	4299      	cmp	r1, r3
 80200dc:	d002      	beq.n	80200e4 <__swsetup_r+0x4c>
 80200de:	0028      	movs	r0, r5
 80200e0:	f000 ffa6 	bl	8021030 <_free_r>
 80200e4:	2300      	movs	r3, #0
 80200e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80200e8:	2224      	movs	r2, #36	@ 0x24
 80200ea:	89a3      	ldrh	r3, [r4, #12]
 80200ec:	4393      	bics	r3, r2
 80200ee:	81a3      	strh	r3, [r4, #12]
 80200f0:	2300      	movs	r3, #0
 80200f2:	6063      	str	r3, [r4, #4]
 80200f4:	6923      	ldr	r3, [r4, #16]
 80200f6:	6023      	str	r3, [r4, #0]
 80200f8:	2308      	movs	r3, #8
 80200fa:	89a2      	ldrh	r2, [r4, #12]
 80200fc:	4313      	orrs	r3, r2
 80200fe:	81a3      	strh	r3, [r4, #12]
 8020100:	6923      	ldr	r3, [r4, #16]
 8020102:	2b00      	cmp	r3, #0
 8020104:	d10b      	bne.n	802011e <__swsetup_r+0x86>
 8020106:	21a0      	movs	r1, #160	@ 0xa0
 8020108:	2280      	movs	r2, #128	@ 0x80
 802010a:	89a3      	ldrh	r3, [r4, #12]
 802010c:	0089      	lsls	r1, r1, #2
 802010e:	0092      	lsls	r2, r2, #2
 8020110:	400b      	ands	r3, r1
 8020112:	4293      	cmp	r3, r2
 8020114:	d003      	beq.n	802011e <__swsetup_r+0x86>
 8020116:	0021      	movs	r1, r4
 8020118:	0028      	movs	r0, r5
 802011a:	f002 fc51 	bl	80229c0 <__smakebuf_r>
 802011e:	230c      	movs	r3, #12
 8020120:	5ee2      	ldrsh	r2, [r4, r3]
 8020122:	2101      	movs	r1, #1
 8020124:	0013      	movs	r3, r2
 8020126:	400b      	ands	r3, r1
 8020128:	420a      	tst	r2, r1
 802012a:	d00b      	beq.n	8020144 <__swsetup_r+0xac>
 802012c:	2300      	movs	r3, #0
 802012e:	60a3      	str	r3, [r4, #8]
 8020130:	6963      	ldr	r3, [r4, #20]
 8020132:	425b      	negs	r3, r3
 8020134:	61a3      	str	r3, [r4, #24]
 8020136:	2000      	movs	r0, #0
 8020138:	6923      	ldr	r3, [r4, #16]
 802013a:	4283      	cmp	r3, r0
 802013c:	d101      	bne.n	8020142 <__swsetup_r+0xaa>
 802013e:	0613      	lsls	r3, r2, #24
 8020140:	d4be      	bmi.n	80200c0 <__swsetup_r+0x28>
 8020142:	bd70      	pop	{r4, r5, r6, pc}
 8020144:	0791      	lsls	r1, r2, #30
 8020146:	d400      	bmi.n	802014a <__swsetup_r+0xb2>
 8020148:	6963      	ldr	r3, [r4, #20]
 802014a:	60a3      	str	r3, [r4, #8]
 802014c:	e7f3      	b.n	8020136 <__swsetup_r+0x9e>
 802014e:	46c0      	nop			@ (mov r8, r8)
 8020150:	200003cc 	.word	0x200003cc

08020154 <memset>:
 8020154:	0003      	movs	r3, r0
 8020156:	1882      	adds	r2, r0, r2
 8020158:	4293      	cmp	r3, r2
 802015a:	d100      	bne.n	802015e <memset+0xa>
 802015c:	4770      	bx	lr
 802015e:	7019      	strb	r1, [r3, #0]
 8020160:	3301      	adds	r3, #1
 8020162:	e7f9      	b.n	8020158 <memset+0x4>

08020164 <strchr>:
 8020164:	b2c9      	uxtb	r1, r1
 8020166:	7803      	ldrb	r3, [r0, #0]
 8020168:	2b00      	cmp	r3, #0
 802016a:	d004      	beq.n	8020176 <strchr+0x12>
 802016c:	428b      	cmp	r3, r1
 802016e:	d100      	bne.n	8020172 <strchr+0xe>
 8020170:	4770      	bx	lr
 8020172:	3001      	adds	r0, #1
 8020174:	e7f7      	b.n	8020166 <strchr+0x2>
 8020176:	424b      	negs	r3, r1
 8020178:	4159      	adcs	r1, r3
 802017a:	4249      	negs	r1, r1
 802017c:	4008      	ands	r0, r1
 802017e:	e7f7      	b.n	8020170 <strchr+0xc>

08020180 <strncmp>:
 8020180:	b530      	push	{r4, r5, lr}
 8020182:	0005      	movs	r5, r0
 8020184:	1e10      	subs	r0, r2, #0
 8020186:	d00b      	beq.n	80201a0 <strncmp+0x20>
 8020188:	2400      	movs	r4, #0
 802018a:	3a01      	subs	r2, #1
 802018c:	5d2b      	ldrb	r3, [r5, r4]
 802018e:	5d08      	ldrb	r0, [r1, r4]
 8020190:	4283      	cmp	r3, r0
 8020192:	d104      	bne.n	802019e <strncmp+0x1e>
 8020194:	42a2      	cmp	r2, r4
 8020196:	d002      	beq.n	802019e <strncmp+0x1e>
 8020198:	3401      	adds	r4, #1
 802019a:	2b00      	cmp	r3, #0
 802019c:	d1f6      	bne.n	802018c <strncmp+0xc>
 802019e:	1a18      	subs	r0, r3, r0
 80201a0:	bd30      	pop	{r4, r5, pc}

080201a2 <strncpy>:
 80201a2:	0003      	movs	r3, r0
 80201a4:	b530      	push	{r4, r5, lr}
 80201a6:	001d      	movs	r5, r3
 80201a8:	2a00      	cmp	r2, #0
 80201aa:	d006      	beq.n	80201ba <strncpy+0x18>
 80201ac:	780c      	ldrb	r4, [r1, #0]
 80201ae:	3a01      	subs	r2, #1
 80201b0:	3301      	adds	r3, #1
 80201b2:	702c      	strb	r4, [r5, #0]
 80201b4:	3101      	adds	r1, #1
 80201b6:	2c00      	cmp	r4, #0
 80201b8:	d1f5      	bne.n	80201a6 <strncpy+0x4>
 80201ba:	2100      	movs	r1, #0
 80201bc:	189a      	adds	r2, r3, r2
 80201be:	4293      	cmp	r3, r2
 80201c0:	d100      	bne.n	80201c4 <strncpy+0x22>
 80201c2:	bd30      	pop	{r4, r5, pc}
 80201c4:	7019      	strb	r1, [r3, #0]
 80201c6:	3301      	adds	r3, #1
 80201c8:	e7f9      	b.n	80201be <strncpy+0x1c>

080201ca <strstr>:
 80201ca:	780a      	ldrb	r2, [r1, #0]
 80201cc:	b530      	push	{r4, r5, lr}
 80201ce:	2a00      	cmp	r2, #0
 80201d0:	d10c      	bne.n	80201ec <strstr+0x22>
 80201d2:	bd30      	pop	{r4, r5, pc}
 80201d4:	429a      	cmp	r2, r3
 80201d6:	d108      	bne.n	80201ea <strstr+0x20>
 80201d8:	2301      	movs	r3, #1
 80201da:	5ccc      	ldrb	r4, [r1, r3]
 80201dc:	2c00      	cmp	r4, #0
 80201de:	d0f8      	beq.n	80201d2 <strstr+0x8>
 80201e0:	5cc5      	ldrb	r5, [r0, r3]
 80201e2:	42a5      	cmp	r5, r4
 80201e4:	d101      	bne.n	80201ea <strstr+0x20>
 80201e6:	3301      	adds	r3, #1
 80201e8:	e7f7      	b.n	80201da <strstr+0x10>
 80201ea:	3001      	adds	r0, #1
 80201ec:	7803      	ldrb	r3, [r0, #0]
 80201ee:	2b00      	cmp	r3, #0
 80201f0:	d1f0      	bne.n	80201d4 <strstr+0xa>
 80201f2:	0018      	movs	r0, r3
 80201f4:	e7ed      	b.n	80201d2 <strstr+0x8>
	...

080201f8 <_localeconv_r>:
 80201f8:	4800      	ldr	r0, [pc, #0]	@ (80201fc <_localeconv_r+0x4>)
 80201fa:	4770      	bx	lr
 80201fc:	20000350 	.word	0x20000350

08020200 <_close_r>:
 8020200:	2300      	movs	r3, #0
 8020202:	b570      	push	{r4, r5, r6, lr}
 8020204:	4d06      	ldr	r5, [pc, #24]	@ (8020220 <_close_r+0x20>)
 8020206:	0004      	movs	r4, r0
 8020208:	0008      	movs	r0, r1
 802020a:	602b      	str	r3, [r5, #0]
 802020c:	f7ed fc92 	bl	800db34 <_close>
 8020210:	1c43      	adds	r3, r0, #1
 8020212:	d103      	bne.n	802021c <_close_r+0x1c>
 8020214:	682b      	ldr	r3, [r5, #0]
 8020216:	2b00      	cmp	r3, #0
 8020218:	d000      	beq.n	802021c <_close_r+0x1c>
 802021a:	6023      	str	r3, [r4, #0]
 802021c:	bd70      	pop	{r4, r5, r6, pc}
 802021e:	46c0      	nop			@ (mov r8, r8)
 8020220:	2000399c 	.word	0x2000399c

08020224 <_lseek_r>:
 8020224:	b570      	push	{r4, r5, r6, lr}
 8020226:	0004      	movs	r4, r0
 8020228:	0008      	movs	r0, r1
 802022a:	0011      	movs	r1, r2
 802022c:	001a      	movs	r2, r3
 802022e:	2300      	movs	r3, #0
 8020230:	4d05      	ldr	r5, [pc, #20]	@ (8020248 <_lseek_r+0x24>)
 8020232:	602b      	str	r3, [r5, #0]
 8020234:	f7ed fc9f 	bl	800db76 <_lseek>
 8020238:	1c43      	adds	r3, r0, #1
 802023a:	d103      	bne.n	8020244 <_lseek_r+0x20>
 802023c:	682b      	ldr	r3, [r5, #0]
 802023e:	2b00      	cmp	r3, #0
 8020240:	d000      	beq.n	8020244 <_lseek_r+0x20>
 8020242:	6023      	str	r3, [r4, #0]
 8020244:	bd70      	pop	{r4, r5, r6, pc}
 8020246:	46c0      	nop			@ (mov r8, r8)
 8020248:	2000399c 	.word	0x2000399c

0802024c <_read_r>:
 802024c:	b570      	push	{r4, r5, r6, lr}
 802024e:	0004      	movs	r4, r0
 8020250:	0008      	movs	r0, r1
 8020252:	0011      	movs	r1, r2
 8020254:	001a      	movs	r2, r3
 8020256:	2300      	movs	r3, #0
 8020258:	4d05      	ldr	r5, [pc, #20]	@ (8020270 <_read_r+0x24>)
 802025a:	602b      	str	r3, [r5, #0]
 802025c:	f7ed fc4d 	bl	800dafa <_read>
 8020260:	1c43      	adds	r3, r0, #1
 8020262:	d103      	bne.n	802026c <_read_r+0x20>
 8020264:	682b      	ldr	r3, [r5, #0]
 8020266:	2b00      	cmp	r3, #0
 8020268:	d000      	beq.n	802026c <_read_r+0x20>
 802026a:	6023      	str	r3, [r4, #0]
 802026c:	bd70      	pop	{r4, r5, r6, pc}
 802026e:	46c0      	nop			@ (mov r8, r8)
 8020270:	2000399c 	.word	0x2000399c

08020274 <_write_r>:
 8020274:	b570      	push	{r4, r5, r6, lr}
 8020276:	0004      	movs	r4, r0
 8020278:	0008      	movs	r0, r1
 802027a:	0011      	movs	r1, r2
 802027c:	001a      	movs	r2, r3
 802027e:	2300      	movs	r3, #0
 8020280:	4d05      	ldr	r5, [pc, #20]	@ (8020298 <_write_r+0x24>)
 8020282:	602b      	str	r3, [r5, #0]
 8020284:	f7ee f90e 	bl	800e4a4 <_write>
 8020288:	1c43      	adds	r3, r0, #1
 802028a:	d103      	bne.n	8020294 <_write_r+0x20>
 802028c:	682b      	ldr	r3, [r5, #0]
 802028e:	2b00      	cmp	r3, #0
 8020290:	d000      	beq.n	8020294 <_write_r+0x20>
 8020292:	6023      	str	r3, [r4, #0]
 8020294:	bd70      	pop	{r4, r5, r6, pc}
 8020296:	46c0      	nop			@ (mov r8, r8)
 8020298:	2000399c 	.word	0x2000399c

0802029c <__errno>:
 802029c:	4b01      	ldr	r3, [pc, #4]	@ (80202a4 <__errno+0x8>)
 802029e:	6818      	ldr	r0, [r3, #0]
 80202a0:	4770      	bx	lr
 80202a2:	46c0      	nop			@ (mov r8, r8)
 80202a4:	200003cc 	.word	0x200003cc

080202a8 <__libc_init_array>:
 80202a8:	b570      	push	{r4, r5, r6, lr}
 80202aa:	2600      	movs	r6, #0
 80202ac:	4c0c      	ldr	r4, [pc, #48]	@ (80202e0 <__libc_init_array+0x38>)
 80202ae:	4d0d      	ldr	r5, [pc, #52]	@ (80202e4 <__libc_init_array+0x3c>)
 80202b0:	1b64      	subs	r4, r4, r5
 80202b2:	10a4      	asrs	r4, r4, #2
 80202b4:	42a6      	cmp	r6, r4
 80202b6:	d109      	bne.n	80202cc <__libc_init_array+0x24>
 80202b8:	2600      	movs	r6, #0
 80202ba:	f002 fee9 	bl	8023090 <_init>
 80202be:	4c0a      	ldr	r4, [pc, #40]	@ (80202e8 <__libc_init_array+0x40>)
 80202c0:	4d0a      	ldr	r5, [pc, #40]	@ (80202ec <__libc_init_array+0x44>)
 80202c2:	1b64      	subs	r4, r4, r5
 80202c4:	10a4      	asrs	r4, r4, #2
 80202c6:	42a6      	cmp	r6, r4
 80202c8:	d105      	bne.n	80202d6 <__libc_init_array+0x2e>
 80202ca:	bd70      	pop	{r4, r5, r6, pc}
 80202cc:	00b3      	lsls	r3, r6, #2
 80202ce:	58eb      	ldr	r3, [r5, r3]
 80202d0:	4798      	blx	r3
 80202d2:	3601      	adds	r6, #1
 80202d4:	e7ee      	b.n	80202b4 <__libc_init_array+0xc>
 80202d6:	00b3      	lsls	r3, r6, #2
 80202d8:	58eb      	ldr	r3, [r5, r3]
 80202da:	4798      	blx	r3
 80202dc:	3601      	adds	r6, #1
 80202de:	e7f2      	b.n	80202c6 <__libc_init_array+0x1e>
 80202e0:	08025f50 	.word	0x08025f50
 80202e4:	08025f50 	.word	0x08025f50
 80202e8:	08025f54 	.word	0x08025f54
 80202ec:	08025f50 	.word	0x08025f50

080202f0 <__retarget_lock_init_recursive>:
 80202f0:	4770      	bx	lr

080202f2 <__retarget_lock_acquire_recursive>:
 80202f2:	4770      	bx	lr

080202f4 <__retarget_lock_release_recursive>:
 80202f4:	4770      	bx	lr

080202f6 <memchr>:
 80202f6:	b2c9      	uxtb	r1, r1
 80202f8:	1882      	adds	r2, r0, r2
 80202fa:	4290      	cmp	r0, r2
 80202fc:	d101      	bne.n	8020302 <memchr+0xc>
 80202fe:	2000      	movs	r0, #0
 8020300:	4770      	bx	lr
 8020302:	7803      	ldrb	r3, [r0, #0]
 8020304:	428b      	cmp	r3, r1
 8020306:	d0fb      	beq.n	8020300 <memchr+0xa>
 8020308:	3001      	adds	r0, #1
 802030a:	e7f6      	b.n	80202fa <memchr+0x4>

0802030c <memcpy>:
 802030c:	2300      	movs	r3, #0
 802030e:	b510      	push	{r4, lr}
 8020310:	429a      	cmp	r2, r3
 8020312:	d100      	bne.n	8020316 <memcpy+0xa>
 8020314:	bd10      	pop	{r4, pc}
 8020316:	5ccc      	ldrb	r4, [r1, r3]
 8020318:	54c4      	strb	r4, [r0, r3]
 802031a:	3301      	adds	r3, #1
 802031c:	e7f8      	b.n	8020310 <memcpy+0x4>
	...

08020320 <nan>:
 8020320:	2000      	movs	r0, #0
 8020322:	4901      	ldr	r1, [pc, #4]	@ (8020328 <nan+0x8>)
 8020324:	4770      	bx	lr
 8020326:	46c0      	nop			@ (mov r8, r8)
 8020328:	7ff80000 	.word	0x7ff80000

0802032c <quorem>:
 802032c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802032e:	6902      	ldr	r2, [r0, #16]
 8020330:	690f      	ldr	r7, [r1, #16]
 8020332:	b087      	sub	sp, #28
 8020334:	0006      	movs	r6, r0
 8020336:	000b      	movs	r3, r1
 8020338:	2000      	movs	r0, #0
 802033a:	9102      	str	r1, [sp, #8]
 802033c:	42ba      	cmp	r2, r7
 802033e:	db6d      	blt.n	802041c <quorem+0xf0>
 8020340:	3f01      	subs	r7, #1
 8020342:	00bc      	lsls	r4, r7, #2
 8020344:	3314      	adds	r3, #20
 8020346:	9305      	str	r3, [sp, #20]
 8020348:	191b      	adds	r3, r3, r4
 802034a:	9303      	str	r3, [sp, #12]
 802034c:	0033      	movs	r3, r6
 802034e:	3314      	adds	r3, #20
 8020350:	191c      	adds	r4, r3, r4
 8020352:	9301      	str	r3, [sp, #4]
 8020354:	6823      	ldr	r3, [r4, #0]
 8020356:	9304      	str	r3, [sp, #16]
 8020358:	9b03      	ldr	r3, [sp, #12]
 802035a:	9804      	ldr	r0, [sp, #16]
 802035c:	681d      	ldr	r5, [r3, #0]
 802035e:	3501      	adds	r5, #1
 8020360:	0029      	movs	r1, r5
 8020362:	f7df ff1f 	bl	80001a4 <__udivsi3>
 8020366:	9b04      	ldr	r3, [sp, #16]
 8020368:	9000      	str	r0, [sp, #0]
 802036a:	42ab      	cmp	r3, r5
 802036c:	d32b      	bcc.n	80203c6 <quorem+0x9a>
 802036e:	9b05      	ldr	r3, [sp, #20]
 8020370:	9d01      	ldr	r5, [sp, #4]
 8020372:	469c      	mov	ip, r3
 8020374:	2300      	movs	r3, #0
 8020376:	9305      	str	r3, [sp, #20]
 8020378:	9304      	str	r3, [sp, #16]
 802037a:	4662      	mov	r2, ip
 802037c:	ca08      	ldmia	r2!, {r3}
 802037e:	6828      	ldr	r0, [r5, #0]
 8020380:	4694      	mov	ip, r2
 8020382:	9a00      	ldr	r2, [sp, #0]
 8020384:	b299      	uxth	r1, r3
 8020386:	4351      	muls	r1, r2
 8020388:	9a05      	ldr	r2, [sp, #20]
 802038a:	0c1b      	lsrs	r3, r3, #16
 802038c:	1889      	adds	r1, r1, r2
 802038e:	9a00      	ldr	r2, [sp, #0]
 8020390:	4353      	muls	r3, r2
 8020392:	0c0a      	lsrs	r2, r1, #16
 8020394:	189b      	adds	r3, r3, r2
 8020396:	0c1a      	lsrs	r2, r3, #16
 8020398:	b289      	uxth	r1, r1
 802039a:	9205      	str	r2, [sp, #20]
 802039c:	b282      	uxth	r2, r0
 802039e:	1a52      	subs	r2, r2, r1
 80203a0:	9904      	ldr	r1, [sp, #16]
 80203a2:	0c00      	lsrs	r0, r0, #16
 80203a4:	1852      	adds	r2, r2, r1
 80203a6:	b29b      	uxth	r3, r3
 80203a8:	1411      	asrs	r1, r2, #16
 80203aa:	1ac3      	subs	r3, r0, r3
 80203ac:	185b      	adds	r3, r3, r1
 80203ae:	1419      	asrs	r1, r3, #16
 80203b0:	b292      	uxth	r2, r2
 80203b2:	041b      	lsls	r3, r3, #16
 80203b4:	431a      	orrs	r2, r3
 80203b6:	9b03      	ldr	r3, [sp, #12]
 80203b8:	9104      	str	r1, [sp, #16]
 80203ba:	c504      	stmia	r5!, {r2}
 80203bc:	4563      	cmp	r3, ip
 80203be:	d2dc      	bcs.n	802037a <quorem+0x4e>
 80203c0:	6823      	ldr	r3, [r4, #0]
 80203c2:	2b00      	cmp	r3, #0
 80203c4:	d030      	beq.n	8020428 <quorem+0xfc>
 80203c6:	0030      	movs	r0, r6
 80203c8:	9902      	ldr	r1, [sp, #8]
 80203ca:	f001 fd7d 	bl	8021ec8 <__mcmp>
 80203ce:	2800      	cmp	r0, #0
 80203d0:	db23      	blt.n	802041a <quorem+0xee>
 80203d2:	0034      	movs	r4, r6
 80203d4:	2500      	movs	r5, #0
 80203d6:	9902      	ldr	r1, [sp, #8]
 80203d8:	3414      	adds	r4, #20
 80203da:	3114      	adds	r1, #20
 80203dc:	6823      	ldr	r3, [r4, #0]
 80203de:	c901      	ldmia	r1!, {r0}
 80203e0:	9302      	str	r3, [sp, #8]
 80203e2:	466b      	mov	r3, sp
 80203e4:	891b      	ldrh	r3, [r3, #8]
 80203e6:	b282      	uxth	r2, r0
 80203e8:	1a9a      	subs	r2, r3, r2
 80203ea:	9b02      	ldr	r3, [sp, #8]
 80203ec:	1952      	adds	r2, r2, r5
 80203ee:	0c00      	lsrs	r0, r0, #16
 80203f0:	0c1b      	lsrs	r3, r3, #16
 80203f2:	1a1b      	subs	r3, r3, r0
 80203f4:	1410      	asrs	r0, r2, #16
 80203f6:	181b      	adds	r3, r3, r0
 80203f8:	141d      	asrs	r5, r3, #16
 80203fa:	b292      	uxth	r2, r2
 80203fc:	041b      	lsls	r3, r3, #16
 80203fe:	431a      	orrs	r2, r3
 8020400:	9b03      	ldr	r3, [sp, #12]
 8020402:	c404      	stmia	r4!, {r2}
 8020404:	428b      	cmp	r3, r1
 8020406:	d2e9      	bcs.n	80203dc <quorem+0xb0>
 8020408:	9a01      	ldr	r2, [sp, #4]
 802040a:	00bb      	lsls	r3, r7, #2
 802040c:	18d3      	adds	r3, r2, r3
 802040e:	681a      	ldr	r2, [r3, #0]
 8020410:	2a00      	cmp	r2, #0
 8020412:	d013      	beq.n	802043c <quorem+0x110>
 8020414:	9b00      	ldr	r3, [sp, #0]
 8020416:	3301      	adds	r3, #1
 8020418:	9300      	str	r3, [sp, #0]
 802041a:	9800      	ldr	r0, [sp, #0]
 802041c:	b007      	add	sp, #28
 802041e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020420:	6823      	ldr	r3, [r4, #0]
 8020422:	2b00      	cmp	r3, #0
 8020424:	d104      	bne.n	8020430 <quorem+0x104>
 8020426:	3f01      	subs	r7, #1
 8020428:	9b01      	ldr	r3, [sp, #4]
 802042a:	3c04      	subs	r4, #4
 802042c:	42a3      	cmp	r3, r4
 802042e:	d3f7      	bcc.n	8020420 <quorem+0xf4>
 8020430:	6137      	str	r7, [r6, #16]
 8020432:	e7c8      	b.n	80203c6 <quorem+0x9a>
 8020434:	681a      	ldr	r2, [r3, #0]
 8020436:	2a00      	cmp	r2, #0
 8020438:	d104      	bne.n	8020444 <quorem+0x118>
 802043a:	3f01      	subs	r7, #1
 802043c:	9a01      	ldr	r2, [sp, #4]
 802043e:	3b04      	subs	r3, #4
 8020440:	429a      	cmp	r2, r3
 8020442:	d3f7      	bcc.n	8020434 <quorem+0x108>
 8020444:	6137      	str	r7, [r6, #16]
 8020446:	e7e5      	b.n	8020414 <quorem+0xe8>

08020448 <_dtoa_r>:
 8020448:	b5f0      	push	{r4, r5, r6, r7, lr}
 802044a:	0014      	movs	r4, r2
 802044c:	001d      	movs	r5, r3
 802044e:	69c6      	ldr	r6, [r0, #28]
 8020450:	b09d      	sub	sp, #116	@ 0x74
 8020452:	940a      	str	r4, [sp, #40]	@ 0x28
 8020454:	950b      	str	r5, [sp, #44]	@ 0x2c
 8020456:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8020458:	9003      	str	r0, [sp, #12]
 802045a:	2e00      	cmp	r6, #0
 802045c:	d10f      	bne.n	802047e <_dtoa_r+0x36>
 802045e:	2010      	movs	r0, #16
 8020460:	f001 f98a 	bl	8021778 <malloc>
 8020464:	9b03      	ldr	r3, [sp, #12]
 8020466:	1e02      	subs	r2, r0, #0
 8020468:	61d8      	str	r0, [r3, #28]
 802046a:	d104      	bne.n	8020476 <_dtoa_r+0x2e>
 802046c:	21ef      	movs	r1, #239	@ 0xef
 802046e:	4bc7      	ldr	r3, [pc, #796]	@ (802078c <_dtoa_r+0x344>)
 8020470:	48c7      	ldr	r0, [pc, #796]	@ (8020790 <_dtoa_r+0x348>)
 8020472:	f002 fb2f 	bl	8022ad4 <__assert_func>
 8020476:	6046      	str	r6, [r0, #4]
 8020478:	6086      	str	r6, [r0, #8]
 802047a:	6006      	str	r6, [r0, #0]
 802047c:	60c6      	str	r6, [r0, #12]
 802047e:	9b03      	ldr	r3, [sp, #12]
 8020480:	69db      	ldr	r3, [r3, #28]
 8020482:	6819      	ldr	r1, [r3, #0]
 8020484:	2900      	cmp	r1, #0
 8020486:	d00b      	beq.n	80204a0 <_dtoa_r+0x58>
 8020488:	685a      	ldr	r2, [r3, #4]
 802048a:	2301      	movs	r3, #1
 802048c:	4093      	lsls	r3, r2
 802048e:	604a      	str	r2, [r1, #4]
 8020490:	608b      	str	r3, [r1, #8]
 8020492:	9803      	ldr	r0, [sp, #12]
 8020494:	f001 fa82 	bl	802199c <_Bfree>
 8020498:	2200      	movs	r2, #0
 802049a:	9b03      	ldr	r3, [sp, #12]
 802049c:	69db      	ldr	r3, [r3, #28]
 802049e:	601a      	str	r2, [r3, #0]
 80204a0:	2d00      	cmp	r5, #0
 80204a2:	da1e      	bge.n	80204e2 <_dtoa_r+0x9a>
 80204a4:	2301      	movs	r3, #1
 80204a6:	603b      	str	r3, [r7, #0]
 80204a8:	006b      	lsls	r3, r5, #1
 80204aa:	085b      	lsrs	r3, r3, #1
 80204ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80204ae:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80204b0:	4bb8      	ldr	r3, [pc, #736]	@ (8020794 <_dtoa_r+0x34c>)
 80204b2:	4ab8      	ldr	r2, [pc, #736]	@ (8020794 <_dtoa_r+0x34c>)
 80204b4:	403b      	ands	r3, r7
 80204b6:	4293      	cmp	r3, r2
 80204b8:	d116      	bne.n	80204e8 <_dtoa_r+0xa0>
 80204ba:	4bb7      	ldr	r3, [pc, #732]	@ (8020798 <_dtoa_r+0x350>)
 80204bc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80204be:	6013      	str	r3, [r2, #0]
 80204c0:	033b      	lsls	r3, r7, #12
 80204c2:	0b1b      	lsrs	r3, r3, #12
 80204c4:	4323      	orrs	r3, r4
 80204c6:	d101      	bne.n	80204cc <_dtoa_r+0x84>
 80204c8:	f000 fd83 	bl	8020fd2 <_dtoa_r+0xb8a>
 80204cc:	4bb3      	ldr	r3, [pc, #716]	@ (802079c <_dtoa_r+0x354>)
 80204ce:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80204d0:	9308      	str	r3, [sp, #32]
 80204d2:	2a00      	cmp	r2, #0
 80204d4:	d002      	beq.n	80204dc <_dtoa_r+0x94>
 80204d6:	4bb2      	ldr	r3, [pc, #712]	@ (80207a0 <_dtoa_r+0x358>)
 80204d8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80204da:	6013      	str	r3, [r2, #0]
 80204dc:	9808      	ldr	r0, [sp, #32]
 80204de:	b01d      	add	sp, #116	@ 0x74
 80204e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80204e2:	2300      	movs	r3, #0
 80204e4:	603b      	str	r3, [r7, #0]
 80204e6:	e7e2      	b.n	80204ae <_dtoa_r+0x66>
 80204e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80204ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80204ec:	9212      	str	r2, [sp, #72]	@ 0x48
 80204ee:	9313      	str	r3, [sp, #76]	@ 0x4c
 80204f0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80204f2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80204f4:	2200      	movs	r2, #0
 80204f6:	2300      	movs	r3, #0
 80204f8:	f7df ffda 	bl	80004b0 <__aeabi_dcmpeq>
 80204fc:	1e06      	subs	r6, r0, #0
 80204fe:	d00b      	beq.n	8020518 <_dtoa_r+0xd0>
 8020500:	2301      	movs	r3, #1
 8020502:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020504:	6013      	str	r3, [r2, #0]
 8020506:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020508:	2b00      	cmp	r3, #0
 802050a:	d002      	beq.n	8020512 <_dtoa_r+0xca>
 802050c:	4ba5      	ldr	r3, [pc, #660]	@ (80207a4 <_dtoa_r+0x35c>)
 802050e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8020510:	6013      	str	r3, [r2, #0]
 8020512:	4ba5      	ldr	r3, [pc, #660]	@ (80207a8 <_dtoa_r+0x360>)
 8020514:	9308      	str	r3, [sp, #32]
 8020516:	e7e1      	b.n	80204dc <_dtoa_r+0x94>
 8020518:	ab1a      	add	r3, sp, #104	@ 0x68
 802051a:	9301      	str	r3, [sp, #4]
 802051c:	ab1b      	add	r3, sp, #108	@ 0x6c
 802051e:	9300      	str	r3, [sp, #0]
 8020520:	9803      	ldr	r0, [sp, #12]
 8020522:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020524:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020526:	f001 fdf1 	bl	802210c <__d2b>
 802052a:	007a      	lsls	r2, r7, #1
 802052c:	9005      	str	r0, [sp, #20]
 802052e:	0d52      	lsrs	r2, r2, #21
 8020530:	d100      	bne.n	8020534 <_dtoa_r+0xec>
 8020532:	e07b      	b.n	802062c <_dtoa_r+0x1e4>
 8020534:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020536:	9618      	str	r6, [sp, #96]	@ 0x60
 8020538:	0319      	lsls	r1, r3, #12
 802053a:	4b9c      	ldr	r3, [pc, #624]	@ (80207ac <_dtoa_r+0x364>)
 802053c:	0b09      	lsrs	r1, r1, #12
 802053e:	430b      	orrs	r3, r1
 8020540:	499b      	ldr	r1, [pc, #620]	@ (80207b0 <_dtoa_r+0x368>)
 8020542:	1857      	adds	r7, r2, r1
 8020544:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020546:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020548:	0019      	movs	r1, r3
 802054a:	2200      	movs	r2, #0
 802054c:	4b99      	ldr	r3, [pc, #612]	@ (80207b4 <_dtoa_r+0x36c>)
 802054e:	f7e2 fb3d 	bl	8002bcc <__aeabi_dsub>
 8020552:	4a99      	ldr	r2, [pc, #612]	@ (80207b8 <_dtoa_r+0x370>)
 8020554:	4b99      	ldr	r3, [pc, #612]	@ (80207bc <_dtoa_r+0x374>)
 8020556:	f7e2 f871 	bl	800263c <__aeabi_dmul>
 802055a:	4a99      	ldr	r2, [pc, #612]	@ (80207c0 <_dtoa_r+0x378>)
 802055c:	4b99      	ldr	r3, [pc, #612]	@ (80207c4 <_dtoa_r+0x37c>)
 802055e:	f7e1 f8c5 	bl	80016ec <__aeabi_dadd>
 8020562:	0004      	movs	r4, r0
 8020564:	0038      	movs	r0, r7
 8020566:	000d      	movs	r5, r1
 8020568:	f7e2 ff2a 	bl	80033c0 <__aeabi_i2d>
 802056c:	4a96      	ldr	r2, [pc, #600]	@ (80207c8 <_dtoa_r+0x380>)
 802056e:	4b97      	ldr	r3, [pc, #604]	@ (80207cc <_dtoa_r+0x384>)
 8020570:	f7e2 f864 	bl	800263c <__aeabi_dmul>
 8020574:	0002      	movs	r2, r0
 8020576:	000b      	movs	r3, r1
 8020578:	0020      	movs	r0, r4
 802057a:	0029      	movs	r1, r5
 802057c:	f7e1 f8b6 	bl	80016ec <__aeabi_dadd>
 8020580:	0004      	movs	r4, r0
 8020582:	000d      	movs	r5, r1
 8020584:	f7e2 fee0 	bl	8003348 <__aeabi_d2iz>
 8020588:	2200      	movs	r2, #0
 802058a:	9004      	str	r0, [sp, #16]
 802058c:	2300      	movs	r3, #0
 802058e:	0020      	movs	r0, r4
 8020590:	0029      	movs	r1, r5
 8020592:	f7df ff93 	bl	80004bc <__aeabi_dcmplt>
 8020596:	2800      	cmp	r0, #0
 8020598:	d00b      	beq.n	80205b2 <_dtoa_r+0x16a>
 802059a:	9804      	ldr	r0, [sp, #16]
 802059c:	f7e2 ff10 	bl	80033c0 <__aeabi_i2d>
 80205a0:	002b      	movs	r3, r5
 80205a2:	0022      	movs	r2, r4
 80205a4:	f7df ff84 	bl	80004b0 <__aeabi_dcmpeq>
 80205a8:	4243      	negs	r3, r0
 80205aa:	4158      	adcs	r0, r3
 80205ac:	9b04      	ldr	r3, [sp, #16]
 80205ae:	1a1b      	subs	r3, r3, r0
 80205b0:	9304      	str	r3, [sp, #16]
 80205b2:	2301      	movs	r3, #1
 80205b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80205b6:	9b04      	ldr	r3, [sp, #16]
 80205b8:	2b16      	cmp	r3, #22
 80205ba:	d810      	bhi.n	80205de <_dtoa_r+0x196>
 80205bc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80205be:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80205c0:	9a04      	ldr	r2, [sp, #16]
 80205c2:	4b83      	ldr	r3, [pc, #524]	@ (80207d0 <_dtoa_r+0x388>)
 80205c4:	00d2      	lsls	r2, r2, #3
 80205c6:	189b      	adds	r3, r3, r2
 80205c8:	681a      	ldr	r2, [r3, #0]
 80205ca:	685b      	ldr	r3, [r3, #4]
 80205cc:	f7df ff76 	bl	80004bc <__aeabi_dcmplt>
 80205d0:	2800      	cmp	r0, #0
 80205d2:	d047      	beq.n	8020664 <_dtoa_r+0x21c>
 80205d4:	9b04      	ldr	r3, [sp, #16]
 80205d6:	3b01      	subs	r3, #1
 80205d8:	9304      	str	r3, [sp, #16]
 80205da:	2300      	movs	r3, #0
 80205dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80205de:	2200      	movs	r2, #0
 80205e0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80205e2:	9206      	str	r2, [sp, #24]
 80205e4:	1bdb      	subs	r3, r3, r7
 80205e6:	1e5a      	subs	r2, r3, #1
 80205e8:	d53e      	bpl.n	8020668 <_dtoa_r+0x220>
 80205ea:	2201      	movs	r2, #1
 80205ec:	1ad3      	subs	r3, r2, r3
 80205ee:	9306      	str	r3, [sp, #24]
 80205f0:	2300      	movs	r3, #0
 80205f2:	930d      	str	r3, [sp, #52]	@ 0x34
 80205f4:	9b04      	ldr	r3, [sp, #16]
 80205f6:	2b00      	cmp	r3, #0
 80205f8:	db38      	blt.n	802066c <_dtoa_r+0x224>
 80205fa:	9a04      	ldr	r2, [sp, #16]
 80205fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80205fe:	4694      	mov	ip, r2
 8020600:	4463      	add	r3, ip
 8020602:	930d      	str	r3, [sp, #52]	@ 0x34
 8020604:	2300      	movs	r3, #0
 8020606:	9214      	str	r2, [sp, #80]	@ 0x50
 8020608:	930f      	str	r3, [sp, #60]	@ 0x3c
 802060a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802060c:	2401      	movs	r4, #1
 802060e:	2b09      	cmp	r3, #9
 8020610:	d867      	bhi.n	80206e2 <_dtoa_r+0x29a>
 8020612:	2b05      	cmp	r3, #5
 8020614:	dd02      	ble.n	802061c <_dtoa_r+0x1d4>
 8020616:	2400      	movs	r4, #0
 8020618:	3b04      	subs	r3, #4
 802061a:	9322      	str	r3, [sp, #136]	@ 0x88
 802061c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 802061e:	1e98      	subs	r0, r3, #2
 8020620:	2803      	cmp	r0, #3
 8020622:	d867      	bhi.n	80206f4 <_dtoa_r+0x2ac>
 8020624:	f7df fdaa 	bl	800017c <__gnu_thumb1_case_uqi>
 8020628:	5b383a2b 	.word	0x5b383a2b
 802062c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 802062e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8020630:	18f6      	adds	r6, r6, r3
 8020632:	4b68      	ldr	r3, [pc, #416]	@ (80207d4 <_dtoa_r+0x38c>)
 8020634:	18f2      	adds	r2, r6, r3
 8020636:	2a20      	cmp	r2, #32
 8020638:	dd0f      	ble.n	802065a <_dtoa_r+0x212>
 802063a:	2340      	movs	r3, #64	@ 0x40
 802063c:	1a9b      	subs	r3, r3, r2
 802063e:	409f      	lsls	r7, r3
 8020640:	4b65      	ldr	r3, [pc, #404]	@ (80207d8 <_dtoa_r+0x390>)
 8020642:	0038      	movs	r0, r7
 8020644:	18f3      	adds	r3, r6, r3
 8020646:	40dc      	lsrs	r4, r3
 8020648:	4320      	orrs	r0, r4
 802064a:	f7e2 fee7 	bl	800341c <__aeabi_ui2d>
 802064e:	2201      	movs	r2, #1
 8020650:	4b62      	ldr	r3, [pc, #392]	@ (80207dc <_dtoa_r+0x394>)
 8020652:	1e77      	subs	r7, r6, #1
 8020654:	18cb      	adds	r3, r1, r3
 8020656:	9218      	str	r2, [sp, #96]	@ 0x60
 8020658:	e776      	b.n	8020548 <_dtoa_r+0x100>
 802065a:	2320      	movs	r3, #32
 802065c:	0020      	movs	r0, r4
 802065e:	1a9b      	subs	r3, r3, r2
 8020660:	4098      	lsls	r0, r3
 8020662:	e7f2      	b.n	802064a <_dtoa_r+0x202>
 8020664:	9015      	str	r0, [sp, #84]	@ 0x54
 8020666:	e7ba      	b.n	80205de <_dtoa_r+0x196>
 8020668:	920d      	str	r2, [sp, #52]	@ 0x34
 802066a:	e7c3      	b.n	80205f4 <_dtoa_r+0x1ac>
 802066c:	9b06      	ldr	r3, [sp, #24]
 802066e:	9a04      	ldr	r2, [sp, #16]
 8020670:	1a9b      	subs	r3, r3, r2
 8020672:	9306      	str	r3, [sp, #24]
 8020674:	4253      	negs	r3, r2
 8020676:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020678:	2300      	movs	r3, #0
 802067a:	9314      	str	r3, [sp, #80]	@ 0x50
 802067c:	e7c5      	b.n	802060a <_dtoa_r+0x1c2>
 802067e:	2300      	movs	r3, #0
 8020680:	9310      	str	r3, [sp, #64]	@ 0x40
 8020682:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020684:	930e      	str	r3, [sp, #56]	@ 0x38
 8020686:	9309      	str	r3, [sp, #36]	@ 0x24
 8020688:	2b00      	cmp	r3, #0
 802068a:	dc13      	bgt.n	80206b4 <_dtoa_r+0x26c>
 802068c:	2301      	movs	r3, #1
 802068e:	001a      	movs	r2, r3
 8020690:	930e      	str	r3, [sp, #56]	@ 0x38
 8020692:	9309      	str	r3, [sp, #36]	@ 0x24
 8020694:	9223      	str	r2, [sp, #140]	@ 0x8c
 8020696:	e00d      	b.n	80206b4 <_dtoa_r+0x26c>
 8020698:	2301      	movs	r3, #1
 802069a:	e7f1      	b.n	8020680 <_dtoa_r+0x238>
 802069c:	2300      	movs	r3, #0
 802069e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80206a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80206a2:	4694      	mov	ip, r2
 80206a4:	9b04      	ldr	r3, [sp, #16]
 80206a6:	4463      	add	r3, ip
 80206a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80206aa:	3301      	adds	r3, #1
 80206ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80206ae:	2b00      	cmp	r3, #0
 80206b0:	dc00      	bgt.n	80206b4 <_dtoa_r+0x26c>
 80206b2:	2301      	movs	r3, #1
 80206b4:	9a03      	ldr	r2, [sp, #12]
 80206b6:	2100      	movs	r1, #0
 80206b8:	69d0      	ldr	r0, [r2, #28]
 80206ba:	2204      	movs	r2, #4
 80206bc:	0015      	movs	r5, r2
 80206be:	3514      	adds	r5, #20
 80206c0:	429d      	cmp	r5, r3
 80206c2:	d91b      	bls.n	80206fc <_dtoa_r+0x2b4>
 80206c4:	6041      	str	r1, [r0, #4]
 80206c6:	9803      	ldr	r0, [sp, #12]
 80206c8:	f001 f924 	bl	8021914 <_Balloc>
 80206cc:	9008      	str	r0, [sp, #32]
 80206ce:	2800      	cmp	r0, #0
 80206d0:	d117      	bne.n	8020702 <_dtoa_r+0x2ba>
 80206d2:	21b0      	movs	r1, #176	@ 0xb0
 80206d4:	4b42      	ldr	r3, [pc, #264]	@ (80207e0 <_dtoa_r+0x398>)
 80206d6:	482e      	ldr	r0, [pc, #184]	@ (8020790 <_dtoa_r+0x348>)
 80206d8:	9a08      	ldr	r2, [sp, #32]
 80206da:	31ff      	adds	r1, #255	@ 0xff
 80206dc:	e6c9      	b.n	8020472 <_dtoa_r+0x2a>
 80206de:	2301      	movs	r3, #1
 80206e0:	e7dd      	b.n	802069e <_dtoa_r+0x256>
 80206e2:	2300      	movs	r3, #0
 80206e4:	9410      	str	r4, [sp, #64]	@ 0x40
 80206e6:	9322      	str	r3, [sp, #136]	@ 0x88
 80206e8:	3b01      	subs	r3, #1
 80206ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80206ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80206ee:	2200      	movs	r2, #0
 80206f0:	3313      	adds	r3, #19
 80206f2:	e7cf      	b.n	8020694 <_dtoa_r+0x24c>
 80206f4:	2301      	movs	r3, #1
 80206f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80206f8:	3b02      	subs	r3, #2
 80206fa:	e7f6      	b.n	80206ea <_dtoa_r+0x2a2>
 80206fc:	3101      	adds	r1, #1
 80206fe:	0052      	lsls	r2, r2, #1
 8020700:	e7dc      	b.n	80206bc <_dtoa_r+0x274>
 8020702:	9b03      	ldr	r3, [sp, #12]
 8020704:	9a08      	ldr	r2, [sp, #32]
 8020706:	69db      	ldr	r3, [r3, #28]
 8020708:	601a      	str	r2, [r3, #0]
 802070a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802070c:	2b0e      	cmp	r3, #14
 802070e:	d900      	bls.n	8020712 <_dtoa_r+0x2ca>
 8020710:	e0d9      	b.n	80208c6 <_dtoa_r+0x47e>
 8020712:	2c00      	cmp	r4, #0
 8020714:	d100      	bne.n	8020718 <_dtoa_r+0x2d0>
 8020716:	e0d6      	b.n	80208c6 <_dtoa_r+0x47e>
 8020718:	9b04      	ldr	r3, [sp, #16]
 802071a:	2b00      	cmp	r3, #0
 802071c:	dd64      	ble.n	80207e8 <_dtoa_r+0x3a0>
 802071e:	210f      	movs	r1, #15
 8020720:	9a04      	ldr	r2, [sp, #16]
 8020722:	4b2b      	ldr	r3, [pc, #172]	@ (80207d0 <_dtoa_r+0x388>)
 8020724:	400a      	ands	r2, r1
 8020726:	00d2      	lsls	r2, r2, #3
 8020728:	189b      	adds	r3, r3, r2
 802072a:	681e      	ldr	r6, [r3, #0]
 802072c:	685f      	ldr	r7, [r3, #4]
 802072e:	9b04      	ldr	r3, [sp, #16]
 8020730:	2402      	movs	r4, #2
 8020732:	111d      	asrs	r5, r3, #4
 8020734:	05db      	lsls	r3, r3, #23
 8020736:	d50a      	bpl.n	802074e <_dtoa_r+0x306>
 8020738:	4b2a      	ldr	r3, [pc, #168]	@ (80207e4 <_dtoa_r+0x39c>)
 802073a:	400d      	ands	r5, r1
 802073c:	6a1a      	ldr	r2, [r3, #32]
 802073e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020740:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8020742:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8020744:	f7e1 fb36 	bl	8001db4 <__aeabi_ddiv>
 8020748:	900a      	str	r0, [sp, #40]	@ 0x28
 802074a:	910b      	str	r1, [sp, #44]	@ 0x2c
 802074c:	3401      	adds	r4, #1
 802074e:	4b25      	ldr	r3, [pc, #148]	@ (80207e4 <_dtoa_r+0x39c>)
 8020750:	930c      	str	r3, [sp, #48]	@ 0x30
 8020752:	2d00      	cmp	r5, #0
 8020754:	d108      	bne.n	8020768 <_dtoa_r+0x320>
 8020756:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020758:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802075a:	0032      	movs	r2, r6
 802075c:	003b      	movs	r3, r7
 802075e:	f7e1 fb29 	bl	8001db4 <__aeabi_ddiv>
 8020762:	900a      	str	r0, [sp, #40]	@ 0x28
 8020764:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020766:	e05a      	b.n	802081e <_dtoa_r+0x3d6>
 8020768:	2301      	movs	r3, #1
 802076a:	421d      	tst	r5, r3
 802076c:	d009      	beq.n	8020782 <_dtoa_r+0x33a>
 802076e:	18e4      	adds	r4, r4, r3
 8020770:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020772:	0030      	movs	r0, r6
 8020774:	681a      	ldr	r2, [r3, #0]
 8020776:	685b      	ldr	r3, [r3, #4]
 8020778:	0039      	movs	r1, r7
 802077a:	f7e1 ff5f 	bl	800263c <__aeabi_dmul>
 802077e:	0006      	movs	r6, r0
 8020780:	000f      	movs	r7, r1
 8020782:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020784:	106d      	asrs	r5, r5, #1
 8020786:	3308      	adds	r3, #8
 8020788:	e7e2      	b.n	8020750 <_dtoa_r+0x308>
 802078a:	46c0      	nop			@ (mov r8, r8)
 802078c:	08025caa 	.word	0x08025caa
 8020790:	08025cc1 	.word	0x08025cc1
 8020794:	7ff00000 	.word	0x7ff00000
 8020798:	0000270f 	.word	0x0000270f
 802079c:	08025ca6 	.word	0x08025ca6
 80207a0:	08025ca9 	.word	0x08025ca9
 80207a4:	08025c72 	.word	0x08025c72
 80207a8:	08025c71 	.word	0x08025c71
 80207ac:	3ff00000 	.word	0x3ff00000
 80207b0:	fffffc01 	.word	0xfffffc01
 80207b4:	3ff80000 	.word	0x3ff80000
 80207b8:	636f4361 	.word	0x636f4361
 80207bc:	3fd287a7 	.word	0x3fd287a7
 80207c0:	8b60c8b3 	.word	0x8b60c8b3
 80207c4:	3fc68a28 	.word	0x3fc68a28
 80207c8:	509f79fb 	.word	0x509f79fb
 80207cc:	3fd34413 	.word	0x3fd34413
 80207d0:	08025e18 	.word	0x08025e18
 80207d4:	00000432 	.word	0x00000432
 80207d8:	00000412 	.word	0x00000412
 80207dc:	fe100000 	.word	0xfe100000
 80207e0:	08025d19 	.word	0x08025d19
 80207e4:	08025df0 	.word	0x08025df0
 80207e8:	9b04      	ldr	r3, [sp, #16]
 80207ea:	2402      	movs	r4, #2
 80207ec:	2b00      	cmp	r3, #0
 80207ee:	d016      	beq.n	802081e <_dtoa_r+0x3d6>
 80207f0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80207f2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80207f4:	220f      	movs	r2, #15
 80207f6:	425d      	negs	r5, r3
 80207f8:	402a      	ands	r2, r5
 80207fa:	4bd7      	ldr	r3, [pc, #860]	@ (8020b58 <_dtoa_r+0x710>)
 80207fc:	00d2      	lsls	r2, r2, #3
 80207fe:	189b      	adds	r3, r3, r2
 8020800:	681a      	ldr	r2, [r3, #0]
 8020802:	685b      	ldr	r3, [r3, #4]
 8020804:	f7e1 ff1a 	bl	800263c <__aeabi_dmul>
 8020808:	2701      	movs	r7, #1
 802080a:	2300      	movs	r3, #0
 802080c:	900a      	str	r0, [sp, #40]	@ 0x28
 802080e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020810:	4ed2      	ldr	r6, [pc, #840]	@ (8020b5c <_dtoa_r+0x714>)
 8020812:	112d      	asrs	r5, r5, #4
 8020814:	2d00      	cmp	r5, #0
 8020816:	d000      	beq.n	802081a <_dtoa_r+0x3d2>
 8020818:	e0ba      	b.n	8020990 <_dtoa_r+0x548>
 802081a:	2b00      	cmp	r3, #0
 802081c:	d1a1      	bne.n	8020762 <_dtoa_r+0x31a>
 802081e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020820:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8020822:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020824:	2b00      	cmp	r3, #0
 8020826:	d100      	bne.n	802082a <_dtoa_r+0x3e2>
 8020828:	e0bd      	b.n	80209a6 <_dtoa_r+0x55e>
 802082a:	2200      	movs	r2, #0
 802082c:	0030      	movs	r0, r6
 802082e:	0039      	movs	r1, r7
 8020830:	4bcb      	ldr	r3, [pc, #812]	@ (8020b60 <_dtoa_r+0x718>)
 8020832:	f7df fe43 	bl	80004bc <__aeabi_dcmplt>
 8020836:	2800      	cmp	r0, #0
 8020838:	d100      	bne.n	802083c <_dtoa_r+0x3f4>
 802083a:	e0b4      	b.n	80209a6 <_dtoa_r+0x55e>
 802083c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802083e:	2b00      	cmp	r3, #0
 8020840:	d100      	bne.n	8020844 <_dtoa_r+0x3fc>
 8020842:	e0b0      	b.n	80209a6 <_dtoa_r+0x55e>
 8020844:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020846:	2b00      	cmp	r3, #0
 8020848:	dd39      	ble.n	80208be <_dtoa_r+0x476>
 802084a:	9b04      	ldr	r3, [sp, #16]
 802084c:	2200      	movs	r2, #0
 802084e:	3b01      	subs	r3, #1
 8020850:	930c      	str	r3, [sp, #48]	@ 0x30
 8020852:	0030      	movs	r0, r6
 8020854:	4bc3      	ldr	r3, [pc, #780]	@ (8020b64 <_dtoa_r+0x71c>)
 8020856:	0039      	movs	r1, r7
 8020858:	f7e1 fef0 	bl	800263c <__aeabi_dmul>
 802085c:	900a      	str	r0, [sp, #40]	@ 0x28
 802085e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020860:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020862:	3401      	adds	r4, #1
 8020864:	0020      	movs	r0, r4
 8020866:	9311      	str	r3, [sp, #68]	@ 0x44
 8020868:	f7e2 fdaa 	bl	80033c0 <__aeabi_i2d>
 802086c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802086e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020870:	f7e1 fee4 	bl	800263c <__aeabi_dmul>
 8020874:	4bbc      	ldr	r3, [pc, #752]	@ (8020b68 <_dtoa_r+0x720>)
 8020876:	2200      	movs	r2, #0
 8020878:	f7e0 ff38 	bl	80016ec <__aeabi_dadd>
 802087c:	4bbb      	ldr	r3, [pc, #748]	@ (8020b6c <_dtoa_r+0x724>)
 802087e:	0006      	movs	r6, r0
 8020880:	18cf      	adds	r7, r1, r3
 8020882:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020884:	2b00      	cmp	r3, #0
 8020886:	d000      	beq.n	802088a <_dtoa_r+0x442>
 8020888:	e091      	b.n	80209ae <_dtoa_r+0x566>
 802088a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802088c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802088e:	2200      	movs	r2, #0
 8020890:	4bb7      	ldr	r3, [pc, #732]	@ (8020b70 <_dtoa_r+0x728>)
 8020892:	f7e2 f99b 	bl	8002bcc <__aeabi_dsub>
 8020896:	0032      	movs	r2, r6
 8020898:	003b      	movs	r3, r7
 802089a:	0004      	movs	r4, r0
 802089c:	000d      	movs	r5, r1
 802089e:	f7df fe21 	bl	80004e4 <__aeabi_dcmpgt>
 80208a2:	2800      	cmp	r0, #0
 80208a4:	d000      	beq.n	80208a8 <_dtoa_r+0x460>
 80208a6:	e29d      	b.n	8020de4 <_dtoa_r+0x99c>
 80208a8:	2180      	movs	r1, #128	@ 0x80
 80208aa:	0609      	lsls	r1, r1, #24
 80208ac:	187b      	adds	r3, r7, r1
 80208ae:	0032      	movs	r2, r6
 80208b0:	0020      	movs	r0, r4
 80208b2:	0029      	movs	r1, r5
 80208b4:	f7df fe02 	bl	80004bc <__aeabi_dcmplt>
 80208b8:	2800      	cmp	r0, #0
 80208ba:	d000      	beq.n	80208be <_dtoa_r+0x476>
 80208bc:	e130      	b.n	8020b20 <_dtoa_r+0x6d8>
 80208be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80208c0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80208c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80208c4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80208c6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80208c8:	2b00      	cmp	r3, #0
 80208ca:	da00      	bge.n	80208ce <_dtoa_r+0x486>
 80208cc:	e177      	b.n	8020bbe <_dtoa_r+0x776>
 80208ce:	9a04      	ldr	r2, [sp, #16]
 80208d0:	2a0e      	cmp	r2, #14
 80208d2:	dd00      	ble.n	80208d6 <_dtoa_r+0x48e>
 80208d4:	e173      	b.n	8020bbe <_dtoa_r+0x776>
 80208d6:	4ba0      	ldr	r3, [pc, #640]	@ (8020b58 <_dtoa_r+0x710>)
 80208d8:	00d2      	lsls	r2, r2, #3
 80208da:	189b      	adds	r3, r3, r2
 80208dc:	685c      	ldr	r4, [r3, #4]
 80208de:	681b      	ldr	r3, [r3, #0]
 80208e0:	9306      	str	r3, [sp, #24]
 80208e2:	9407      	str	r4, [sp, #28]
 80208e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80208e6:	2b00      	cmp	r3, #0
 80208e8:	da03      	bge.n	80208f2 <_dtoa_r+0x4aa>
 80208ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80208ec:	2b00      	cmp	r3, #0
 80208ee:	dc00      	bgt.n	80208f2 <_dtoa_r+0x4aa>
 80208f0:	e106      	b.n	8020b00 <_dtoa_r+0x6b8>
 80208f2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80208f4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80208f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80208f8:	9d08      	ldr	r5, [sp, #32]
 80208fa:	3b01      	subs	r3, #1
 80208fc:	195b      	adds	r3, r3, r5
 80208fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8020900:	9a06      	ldr	r2, [sp, #24]
 8020902:	9b07      	ldr	r3, [sp, #28]
 8020904:	0030      	movs	r0, r6
 8020906:	0039      	movs	r1, r7
 8020908:	f7e1 fa54 	bl	8001db4 <__aeabi_ddiv>
 802090c:	f7e2 fd1c 	bl	8003348 <__aeabi_d2iz>
 8020910:	9009      	str	r0, [sp, #36]	@ 0x24
 8020912:	f7e2 fd55 	bl	80033c0 <__aeabi_i2d>
 8020916:	9a06      	ldr	r2, [sp, #24]
 8020918:	9b07      	ldr	r3, [sp, #28]
 802091a:	f7e1 fe8f 	bl	800263c <__aeabi_dmul>
 802091e:	0002      	movs	r2, r0
 8020920:	000b      	movs	r3, r1
 8020922:	0030      	movs	r0, r6
 8020924:	0039      	movs	r1, r7
 8020926:	f7e2 f951 	bl	8002bcc <__aeabi_dsub>
 802092a:	002b      	movs	r3, r5
 802092c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802092e:	3501      	adds	r5, #1
 8020930:	3230      	adds	r2, #48	@ 0x30
 8020932:	701a      	strb	r2, [r3, #0]
 8020934:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020936:	002c      	movs	r4, r5
 8020938:	429a      	cmp	r2, r3
 802093a:	d000      	beq.n	802093e <_dtoa_r+0x4f6>
 802093c:	e131      	b.n	8020ba2 <_dtoa_r+0x75a>
 802093e:	0002      	movs	r2, r0
 8020940:	000b      	movs	r3, r1
 8020942:	f7e0 fed3 	bl	80016ec <__aeabi_dadd>
 8020946:	9a06      	ldr	r2, [sp, #24]
 8020948:	9b07      	ldr	r3, [sp, #28]
 802094a:	0006      	movs	r6, r0
 802094c:	000f      	movs	r7, r1
 802094e:	f7df fdc9 	bl	80004e4 <__aeabi_dcmpgt>
 8020952:	2800      	cmp	r0, #0
 8020954:	d000      	beq.n	8020958 <_dtoa_r+0x510>
 8020956:	e10f      	b.n	8020b78 <_dtoa_r+0x730>
 8020958:	9a06      	ldr	r2, [sp, #24]
 802095a:	9b07      	ldr	r3, [sp, #28]
 802095c:	0030      	movs	r0, r6
 802095e:	0039      	movs	r1, r7
 8020960:	f7df fda6 	bl	80004b0 <__aeabi_dcmpeq>
 8020964:	2800      	cmp	r0, #0
 8020966:	d003      	beq.n	8020970 <_dtoa_r+0x528>
 8020968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802096a:	07dd      	lsls	r5, r3, #31
 802096c:	d500      	bpl.n	8020970 <_dtoa_r+0x528>
 802096e:	e103      	b.n	8020b78 <_dtoa_r+0x730>
 8020970:	9905      	ldr	r1, [sp, #20]
 8020972:	9803      	ldr	r0, [sp, #12]
 8020974:	f001 f812 	bl	802199c <_Bfree>
 8020978:	2300      	movs	r3, #0
 802097a:	7023      	strb	r3, [r4, #0]
 802097c:	9b04      	ldr	r3, [sp, #16]
 802097e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8020980:	3301      	adds	r3, #1
 8020982:	6013      	str	r3, [r2, #0]
 8020984:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8020986:	2b00      	cmp	r3, #0
 8020988:	d100      	bne.n	802098c <_dtoa_r+0x544>
 802098a:	e5a7      	b.n	80204dc <_dtoa_r+0x94>
 802098c:	601c      	str	r4, [r3, #0]
 802098e:	e5a5      	b.n	80204dc <_dtoa_r+0x94>
 8020990:	423d      	tst	r5, r7
 8020992:	d005      	beq.n	80209a0 <_dtoa_r+0x558>
 8020994:	6832      	ldr	r2, [r6, #0]
 8020996:	6873      	ldr	r3, [r6, #4]
 8020998:	f7e1 fe50 	bl	800263c <__aeabi_dmul>
 802099c:	003b      	movs	r3, r7
 802099e:	3401      	adds	r4, #1
 80209a0:	106d      	asrs	r5, r5, #1
 80209a2:	3608      	adds	r6, #8
 80209a4:	e736      	b.n	8020814 <_dtoa_r+0x3cc>
 80209a6:	9b04      	ldr	r3, [sp, #16]
 80209a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80209aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80209ac:	e75a      	b.n	8020864 <_dtoa_r+0x41c>
 80209ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80209b0:	4b69      	ldr	r3, [pc, #420]	@ (8020b58 <_dtoa_r+0x710>)
 80209b2:	3a01      	subs	r2, #1
 80209b4:	00d2      	lsls	r2, r2, #3
 80209b6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80209b8:	189b      	adds	r3, r3, r2
 80209ba:	681a      	ldr	r2, [r3, #0]
 80209bc:	685b      	ldr	r3, [r3, #4]
 80209be:	2900      	cmp	r1, #0
 80209c0:	d04c      	beq.n	8020a5c <_dtoa_r+0x614>
 80209c2:	2000      	movs	r0, #0
 80209c4:	496b      	ldr	r1, [pc, #428]	@ (8020b74 <_dtoa_r+0x72c>)
 80209c6:	f7e1 f9f5 	bl	8001db4 <__aeabi_ddiv>
 80209ca:	0032      	movs	r2, r6
 80209cc:	003b      	movs	r3, r7
 80209ce:	f7e2 f8fd 	bl	8002bcc <__aeabi_dsub>
 80209d2:	9a08      	ldr	r2, [sp, #32]
 80209d4:	0006      	movs	r6, r0
 80209d6:	4694      	mov	ip, r2
 80209d8:	000f      	movs	r7, r1
 80209da:	9b08      	ldr	r3, [sp, #32]
 80209dc:	9316      	str	r3, [sp, #88]	@ 0x58
 80209de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80209e0:	4463      	add	r3, ip
 80209e2:	9311      	str	r3, [sp, #68]	@ 0x44
 80209e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80209e6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80209e8:	f7e2 fcae 	bl	8003348 <__aeabi_d2iz>
 80209ec:	0005      	movs	r5, r0
 80209ee:	f7e2 fce7 	bl	80033c0 <__aeabi_i2d>
 80209f2:	0002      	movs	r2, r0
 80209f4:	000b      	movs	r3, r1
 80209f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80209f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80209fa:	f7e2 f8e7 	bl	8002bcc <__aeabi_dsub>
 80209fe:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020a00:	3530      	adds	r5, #48	@ 0x30
 8020a02:	1c5c      	adds	r4, r3, #1
 8020a04:	701d      	strb	r5, [r3, #0]
 8020a06:	0032      	movs	r2, r6
 8020a08:	003b      	movs	r3, r7
 8020a0a:	900a      	str	r0, [sp, #40]	@ 0x28
 8020a0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020a0e:	f7df fd55 	bl	80004bc <__aeabi_dcmplt>
 8020a12:	2800      	cmp	r0, #0
 8020a14:	d16a      	bne.n	8020aec <_dtoa_r+0x6a4>
 8020a16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020a18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020a1a:	2000      	movs	r0, #0
 8020a1c:	4950      	ldr	r1, [pc, #320]	@ (8020b60 <_dtoa_r+0x718>)
 8020a1e:	f7e2 f8d5 	bl	8002bcc <__aeabi_dsub>
 8020a22:	0032      	movs	r2, r6
 8020a24:	003b      	movs	r3, r7
 8020a26:	f7df fd49 	bl	80004bc <__aeabi_dcmplt>
 8020a2a:	2800      	cmp	r0, #0
 8020a2c:	d000      	beq.n	8020a30 <_dtoa_r+0x5e8>
 8020a2e:	e0a5      	b.n	8020b7c <_dtoa_r+0x734>
 8020a30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020a32:	42a3      	cmp	r3, r4
 8020a34:	d100      	bne.n	8020a38 <_dtoa_r+0x5f0>
 8020a36:	e742      	b.n	80208be <_dtoa_r+0x476>
 8020a38:	2200      	movs	r2, #0
 8020a3a:	0030      	movs	r0, r6
 8020a3c:	0039      	movs	r1, r7
 8020a3e:	4b49      	ldr	r3, [pc, #292]	@ (8020b64 <_dtoa_r+0x71c>)
 8020a40:	f7e1 fdfc 	bl	800263c <__aeabi_dmul>
 8020a44:	2200      	movs	r2, #0
 8020a46:	0006      	movs	r6, r0
 8020a48:	000f      	movs	r7, r1
 8020a4a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020a4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020a4e:	4b45      	ldr	r3, [pc, #276]	@ (8020b64 <_dtoa_r+0x71c>)
 8020a50:	f7e1 fdf4 	bl	800263c <__aeabi_dmul>
 8020a54:	9416      	str	r4, [sp, #88]	@ 0x58
 8020a56:	900a      	str	r0, [sp, #40]	@ 0x28
 8020a58:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020a5a:	e7c3      	b.n	80209e4 <_dtoa_r+0x59c>
 8020a5c:	0030      	movs	r0, r6
 8020a5e:	0039      	movs	r1, r7
 8020a60:	f7e1 fdec 	bl	800263c <__aeabi_dmul>
 8020a64:	9d08      	ldr	r5, [sp, #32]
 8020a66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020a68:	002b      	movs	r3, r5
 8020a6a:	4694      	mov	ip, r2
 8020a6c:	9016      	str	r0, [sp, #88]	@ 0x58
 8020a6e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8020a70:	4463      	add	r3, ip
 8020a72:	9319      	str	r3, [sp, #100]	@ 0x64
 8020a74:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020a76:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020a78:	f7e2 fc66 	bl	8003348 <__aeabi_d2iz>
 8020a7c:	0004      	movs	r4, r0
 8020a7e:	f7e2 fc9f 	bl	80033c0 <__aeabi_i2d>
 8020a82:	000b      	movs	r3, r1
 8020a84:	0002      	movs	r2, r0
 8020a86:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020a88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020a8a:	f7e2 f89f 	bl	8002bcc <__aeabi_dsub>
 8020a8e:	3430      	adds	r4, #48	@ 0x30
 8020a90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020a92:	702c      	strb	r4, [r5, #0]
 8020a94:	3501      	adds	r5, #1
 8020a96:	0006      	movs	r6, r0
 8020a98:	000f      	movs	r7, r1
 8020a9a:	42ab      	cmp	r3, r5
 8020a9c:	d129      	bne.n	8020af2 <_dtoa_r+0x6aa>
 8020a9e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8020aa0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020aa2:	9b08      	ldr	r3, [sp, #32]
 8020aa4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020aa6:	469c      	mov	ip, r3
 8020aa8:	2200      	movs	r2, #0
 8020aaa:	4b32      	ldr	r3, [pc, #200]	@ (8020b74 <_dtoa_r+0x72c>)
 8020aac:	4464      	add	r4, ip
 8020aae:	f7e0 fe1d 	bl	80016ec <__aeabi_dadd>
 8020ab2:	0002      	movs	r2, r0
 8020ab4:	000b      	movs	r3, r1
 8020ab6:	0030      	movs	r0, r6
 8020ab8:	0039      	movs	r1, r7
 8020aba:	f7df fd13 	bl	80004e4 <__aeabi_dcmpgt>
 8020abe:	2800      	cmp	r0, #0
 8020ac0:	d15c      	bne.n	8020b7c <_dtoa_r+0x734>
 8020ac2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020ac4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020ac6:	2000      	movs	r0, #0
 8020ac8:	492a      	ldr	r1, [pc, #168]	@ (8020b74 <_dtoa_r+0x72c>)
 8020aca:	f7e2 f87f 	bl	8002bcc <__aeabi_dsub>
 8020ace:	0002      	movs	r2, r0
 8020ad0:	000b      	movs	r3, r1
 8020ad2:	0030      	movs	r0, r6
 8020ad4:	0039      	movs	r1, r7
 8020ad6:	f7df fcf1 	bl	80004bc <__aeabi_dcmplt>
 8020ada:	2800      	cmp	r0, #0
 8020adc:	d100      	bne.n	8020ae0 <_dtoa_r+0x698>
 8020ade:	e6ee      	b.n	80208be <_dtoa_r+0x476>
 8020ae0:	0023      	movs	r3, r4
 8020ae2:	3c01      	subs	r4, #1
 8020ae4:	7822      	ldrb	r2, [r4, #0]
 8020ae6:	2a30      	cmp	r2, #48	@ 0x30
 8020ae8:	d0fa      	beq.n	8020ae0 <_dtoa_r+0x698>
 8020aea:	001c      	movs	r4, r3
 8020aec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020aee:	9304      	str	r3, [sp, #16]
 8020af0:	e73e      	b.n	8020970 <_dtoa_r+0x528>
 8020af2:	2200      	movs	r2, #0
 8020af4:	4b1b      	ldr	r3, [pc, #108]	@ (8020b64 <_dtoa_r+0x71c>)
 8020af6:	f7e1 fda1 	bl	800263c <__aeabi_dmul>
 8020afa:	900a      	str	r0, [sp, #40]	@ 0x28
 8020afc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020afe:	e7b9      	b.n	8020a74 <_dtoa_r+0x62c>
 8020b00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b02:	2b00      	cmp	r3, #0
 8020b04:	d10c      	bne.n	8020b20 <_dtoa_r+0x6d8>
 8020b06:	9806      	ldr	r0, [sp, #24]
 8020b08:	9907      	ldr	r1, [sp, #28]
 8020b0a:	2200      	movs	r2, #0
 8020b0c:	4b18      	ldr	r3, [pc, #96]	@ (8020b70 <_dtoa_r+0x728>)
 8020b0e:	f7e1 fd95 	bl	800263c <__aeabi_dmul>
 8020b12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020b14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020b16:	f7df fcef 	bl	80004f8 <__aeabi_dcmpge>
 8020b1a:	2800      	cmp	r0, #0
 8020b1c:	d100      	bne.n	8020b20 <_dtoa_r+0x6d8>
 8020b1e:	e164      	b.n	8020dea <_dtoa_r+0x9a2>
 8020b20:	2600      	movs	r6, #0
 8020b22:	0037      	movs	r7, r6
 8020b24:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8020b26:	9c08      	ldr	r4, [sp, #32]
 8020b28:	43db      	mvns	r3, r3
 8020b2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8020b2c:	2300      	movs	r3, #0
 8020b2e:	9304      	str	r3, [sp, #16]
 8020b30:	0031      	movs	r1, r6
 8020b32:	9803      	ldr	r0, [sp, #12]
 8020b34:	f000 ff32 	bl	802199c <_Bfree>
 8020b38:	2f00      	cmp	r7, #0
 8020b3a:	d0d7      	beq.n	8020aec <_dtoa_r+0x6a4>
 8020b3c:	9b04      	ldr	r3, [sp, #16]
 8020b3e:	2b00      	cmp	r3, #0
 8020b40:	d005      	beq.n	8020b4e <_dtoa_r+0x706>
 8020b42:	42bb      	cmp	r3, r7
 8020b44:	d003      	beq.n	8020b4e <_dtoa_r+0x706>
 8020b46:	0019      	movs	r1, r3
 8020b48:	9803      	ldr	r0, [sp, #12]
 8020b4a:	f000 ff27 	bl	802199c <_Bfree>
 8020b4e:	0039      	movs	r1, r7
 8020b50:	9803      	ldr	r0, [sp, #12]
 8020b52:	f000 ff23 	bl	802199c <_Bfree>
 8020b56:	e7c9      	b.n	8020aec <_dtoa_r+0x6a4>
 8020b58:	08025e18 	.word	0x08025e18
 8020b5c:	08025df0 	.word	0x08025df0
 8020b60:	3ff00000 	.word	0x3ff00000
 8020b64:	40240000 	.word	0x40240000
 8020b68:	401c0000 	.word	0x401c0000
 8020b6c:	fcc00000 	.word	0xfcc00000
 8020b70:	40140000 	.word	0x40140000
 8020b74:	3fe00000 	.word	0x3fe00000
 8020b78:	9b04      	ldr	r3, [sp, #16]
 8020b7a:	930c      	str	r3, [sp, #48]	@ 0x30
 8020b7c:	0023      	movs	r3, r4
 8020b7e:	001c      	movs	r4, r3
 8020b80:	3b01      	subs	r3, #1
 8020b82:	781a      	ldrb	r2, [r3, #0]
 8020b84:	2a39      	cmp	r2, #57	@ 0x39
 8020b86:	d108      	bne.n	8020b9a <_dtoa_r+0x752>
 8020b88:	9a08      	ldr	r2, [sp, #32]
 8020b8a:	429a      	cmp	r2, r3
 8020b8c:	d1f7      	bne.n	8020b7e <_dtoa_r+0x736>
 8020b8e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020b90:	9908      	ldr	r1, [sp, #32]
 8020b92:	3201      	adds	r2, #1
 8020b94:	920c      	str	r2, [sp, #48]	@ 0x30
 8020b96:	2230      	movs	r2, #48	@ 0x30
 8020b98:	700a      	strb	r2, [r1, #0]
 8020b9a:	781a      	ldrb	r2, [r3, #0]
 8020b9c:	3201      	adds	r2, #1
 8020b9e:	701a      	strb	r2, [r3, #0]
 8020ba0:	e7a4      	b.n	8020aec <_dtoa_r+0x6a4>
 8020ba2:	2200      	movs	r2, #0
 8020ba4:	4bc6      	ldr	r3, [pc, #792]	@ (8020ec0 <_dtoa_r+0xa78>)
 8020ba6:	f7e1 fd49 	bl	800263c <__aeabi_dmul>
 8020baa:	2200      	movs	r2, #0
 8020bac:	2300      	movs	r3, #0
 8020bae:	0006      	movs	r6, r0
 8020bb0:	000f      	movs	r7, r1
 8020bb2:	f7df fc7d 	bl	80004b0 <__aeabi_dcmpeq>
 8020bb6:	2800      	cmp	r0, #0
 8020bb8:	d100      	bne.n	8020bbc <_dtoa_r+0x774>
 8020bba:	e6a1      	b.n	8020900 <_dtoa_r+0x4b8>
 8020bbc:	e6d8      	b.n	8020970 <_dtoa_r+0x528>
 8020bbe:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8020bc0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020bc2:	9c06      	ldr	r4, [sp, #24]
 8020bc4:	2f00      	cmp	r7, #0
 8020bc6:	d014      	beq.n	8020bf2 <_dtoa_r+0x7aa>
 8020bc8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020bca:	2a01      	cmp	r2, #1
 8020bcc:	dd00      	ble.n	8020bd0 <_dtoa_r+0x788>
 8020bce:	e0c8      	b.n	8020d62 <_dtoa_r+0x91a>
 8020bd0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8020bd2:	2a00      	cmp	r2, #0
 8020bd4:	d100      	bne.n	8020bd8 <_dtoa_r+0x790>
 8020bd6:	e0be      	b.n	8020d56 <_dtoa_r+0x90e>
 8020bd8:	4aba      	ldr	r2, [pc, #744]	@ (8020ec4 <_dtoa_r+0xa7c>)
 8020bda:	189b      	adds	r3, r3, r2
 8020bdc:	9a06      	ldr	r2, [sp, #24]
 8020bde:	2101      	movs	r1, #1
 8020be0:	18d2      	adds	r2, r2, r3
 8020be2:	9206      	str	r2, [sp, #24]
 8020be4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020be6:	9803      	ldr	r0, [sp, #12]
 8020be8:	18d3      	adds	r3, r2, r3
 8020bea:	930d      	str	r3, [sp, #52]	@ 0x34
 8020bec:	f000 ffda 	bl	8021ba4 <__i2b>
 8020bf0:	0007      	movs	r7, r0
 8020bf2:	2c00      	cmp	r4, #0
 8020bf4:	d00e      	beq.n	8020c14 <_dtoa_r+0x7cc>
 8020bf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020bf8:	2b00      	cmp	r3, #0
 8020bfa:	dd0b      	ble.n	8020c14 <_dtoa_r+0x7cc>
 8020bfc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020bfe:	0023      	movs	r3, r4
 8020c00:	4294      	cmp	r4, r2
 8020c02:	dd00      	ble.n	8020c06 <_dtoa_r+0x7be>
 8020c04:	0013      	movs	r3, r2
 8020c06:	9a06      	ldr	r2, [sp, #24]
 8020c08:	1ae4      	subs	r4, r4, r3
 8020c0a:	1ad2      	subs	r2, r2, r3
 8020c0c:	9206      	str	r2, [sp, #24]
 8020c0e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020c10:	1ad3      	subs	r3, r2, r3
 8020c12:	930d      	str	r3, [sp, #52]	@ 0x34
 8020c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	d01f      	beq.n	8020c5a <_dtoa_r+0x812>
 8020c1a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020c1c:	2b00      	cmp	r3, #0
 8020c1e:	d100      	bne.n	8020c22 <_dtoa_r+0x7da>
 8020c20:	e0b5      	b.n	8020d8e <_dtoa_r+0x946>
 8020c22:	2d00      	cmp	r5, #0
 8020c24:	d010      	beq.n	8020c48 <_dtoa_r+0x800>
 8020c26:	0039      	movs	r1, r7
 8020c28:	002a      	movs	r2, r5
 8020c2a:	9803      	ldr	r0, [sp, #12]
 8020c2c:	f001 f884 	bl	8021d38 <__pow5mult>
 8020c30:	9a05      	ldr	r2, [sp, #20]
 8020c32:	0001      	movs	r1, r0
 8020c34:	0007      	movs	r7, r0
 8020c36:	9803      	ldr	r0, [sp, #12]
 8020c38:	f000 ffcc 	bl	8021bd4 <__multiply>
 8020c3c:	0006      	movs	r6, r0
 8020c3e:	9905      	ldr	r1, [sp, #20]
 8020c40:	9803      	ldr	r0, [sp, #12]
 8020c42:	f000 feab 	bl	802199c <_Bfree>
 8020c46:	9605      	str	r6, [sp, #20]
 8020c48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020c4a:	1b5a      	subs	r2, r3, r5
 8020c4c:	42ab      	cmp	r3, r5
 8020c4e:	d004      	beq.n	8020c5a <_dtoa_r+0x812>
 8020c50:	9905      	ldr	r1, [sp, #20]
 8020c52:	9803      	ldr	r0, [sp, #12]
 8020c54:	f001 f870 	bl	8021d38 <__pow5mult>
 8020c58:	9005      	str	r0, [sp, #20]
 8020c5a:	2101      	movs	r1, #1
 8020c5c:	9803      	ldr	r0, [sp, #12]
 8020c5e:	f000 ffa1 	bl	8021ba4 <__i2b>
 8020c62:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020c64:	0006      	movs	r6, r0
 8020c66:	2b00      	cmp	r3, #0
 8020c68:	d100      	bne.n	8020c6c <_dtoa_r+0x824>
 8020c6a:	e1bc      	b.n	8020fe6 <_dtoa_r+0xb9e>
 8020c6c:	001a      	movs	r2, r3
 8020c6e:	0001      	movs	r1, r0
 8020c70:	9803      	ldr	r0, [sp, #12]
 8020c72:	f001 f861 	bl	8021d38 <__pow5mult>
 8020c76:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020c78:	0006      	movs	r6, r0
 8020c7a:	2500      	movs	r5, #0
 8020c7c:	2b01      	cmp	r3, #1
 8020c7e:	dc16      	bgt.n	8020cae <_dtoa_r+0x866>
 8020c80:	2500      	movs	r5, #0
 8020c82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020c84:	42ab      	cmp	r3, r5
 8020c86:	d10e      	bne.n	8020ca6 <_dtoa_r+0x85e>
 8020c88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020c8a:	031b      	lsls	r3, r3, #12
 8020c8c:	42ab      	cmp	r3, r5
 8020c8e:	d10a      	bne.n	8020ca6 <_dtoa_r+0x85e>
 8020c90:	4b8d      	ldr	r3, [pc, #564]	@ (8020ec8 <_dtoa_r+0xa80>)
 8020c92:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020c94:	4213      	tst	r3, r2
 8020c96:	d006      	beq.n	8020ca6 <_dtoa_r+0x85e>
 8020c98:	9b06      	ldr	r3, [sp, #24]
 8020c9a:	3501      	adds	r5, #1
 8020c9c:	3301      	adds	r3, #1
 8020c9e:	9306      	str	r3, [sp, #24]
 8020ca0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020ca2:	3301      	adds	r3, #1
 8020ca4:	930d      	str	r3, [sp, #52]	@ 0x34
 8020ca6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8020ca8:	2001      	movs	r0, #1
 8020caa:	2b00      	cmp	r3, #0
 8020cac:	d008      	beq.n	8020cc0 <_dtoa_r+0x878>
 8020cae:	6933      	ldr	r3, [r6, #16]
 8020cb0:	3303      	adds	r3, #3
 8020cb2:	009b      	lsls	r3, r3, #2
 8020cb4:	18f3      	adds	r3, r6, r3
 8020cb6:	6858      	ldr	r0, [r3, #4]
 8020cb8:	f000 ff24 	bl	8021b04 <__hi0bits>
 8020cbc:	2320      	movs	r3, #32
 8020cbe:	1a18      	subs	r0, r3, r0
 8020cc0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020cc2:	1818      	adds	r0, r3, r0
 8020cc4:	0002      	movs	r2, r0
 8020cc6:	231f      	movs	r3, #31
 8020cc8:	401a      	ands	r2, r3
 8020cca:	4218      	tst	r0, r3
 8020ccc:	d065      	beq.n	8020d9a <_dtoa_r+0x952>
 8020cce:	3301      	adds	r3, #1
 8020cd0:	1a9b      	subs	r3, r3, r2
 8020cd2:	2b04      	cmp	r3, #4
 8020cd4:	dd5d      	ble.n	8020d92 <_dtoa_r+0x94a>
 8020cd6:	231c      	movs	r3, #28
 8020cd8:	1a9b      	subs	r3, r3, r2
 8020cda:	9a06      	ldr	r2, [sp, #24]
 8020cdc:	18e4      	adds	r4, r4, r3
 8020cde:	18d2      	adds	r2, r2, r3
 8020ce0:	9206      	str	r2, [sp, #24]
 8020ce2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020ce4:	18d3      	adds	r3, r2, r3
 8020ce6:	930d      	str	r3, [sp, #52]	@ 0x34
 8020ce8:	9b06      	ldr	r3, [sp, #24]
 8020cea:	2b00      	cmp	r3, #0
 8020cec:	dd05      	ble.n	8020cfa <_dtoa_r+0x8b2>
 8020cee:	001a      	movs	r2, r3
 8020cf0:	9905      	ldr	r1, [sp, #20]
 8020cf2:	9803      	ldr	r0, [sp, #12]
 8020cf4:	f001 f87c 	bl	8021df0 <__lshift>
 8020cf8:	9005      	str	r0, [sp, #20]
 8020cfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020cfc:	2b00      	cmp	r3, #0
 8020cfe:	dd05      	ble.n	8020d0c <_dtoa_r+0x8c4>
 8020d00:	0031      	movs	r1, r6
 8020d02:	001a      	movs	r2, r3
 8020d04:	9803      	ldr	r0, [sp, #12]
 8020d06:	f001 f873 	bl	8021df0 <__lshift>
 8020d0a:	0006      	movs	r6, r0
 8020d0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8020d0e:	2b00      	cmp	r3, #0
 8020d10:	d045      	beq.n	8020d9e <_dtoa_r+0x956>
 8020d12:	0031      	movs	r1, r6
 8020d14:	9805      	ldr	r0, [sp, #20]
 8020d16:	f001 f8d7 	bl	8021ec8 <__mcmp>
 8020d1a:	2800      	cmp	r0, #0
 8020d1c:	da3f      	bge.n	8020d9e <_dtoa_r+0x956>
 8020d1e:	9b04      	ldr	r3, [sp, #16]
 8020d20:	220a      	movs	r2, #10
 8020d22:	3b01      	subs	r3, #1
 8020d24:	930c      	str	r3, [sp, #48]	@ 0x30
 8020d26:	9905      	ldr	r1, [sp, #20]
 8020d28:	2300      	movs	r3, #0
 8020d2a:	9803      	ldr	r0, [sp, #12]
 8020d2c:	f000 fe5a 	bl	80219e4 <__multadd>
 8020d30:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020d32:	9005      	str	r0, [sp, #20]
 8020d34:	2b00      	cmp	r3, #0
 8020d36:	d100      	bne.n	8020d3a <_dtoa_r+0x8f2>
 8020d38:	e15c      	b.n	8020ff4 <_dtoa_r+0xbac>
 8020d3a:	2300      	movs	r3, #0
 8020d3c:	0039      	movs	r1, r7
 8020d3e:	220a      	movs	r2, #10
 8020d40:	9803      	ldr	r0, [sp, #12]
 8020d42:	f000 fe4f 	bl	80219e4 <__multadd>
 8020d46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020d48:	0007      	movs	r7, r0
 8020d4a:	2b00      	cmp	r3, #0
 8020d4c:	dc55      	bgt.n	8020dfa <_dtoa_r+0x9b2>
 8020d4e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020d50:	2b02      	cmp	r3, #2
 8020d52:	dc2d      	bgt.n	8020db0 <_dtoa_r+0x968>
 8020d54:	e051      	b.n	8020dfa <_dtoa_r+0x9b2>
 8020d56:	2336      	movs	r3, #54	@ 0x36
 8020d58:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020d5a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8020d5c:	9c06      	ldr	r4, [sp, #24]
 8020d5e:	1a9b      	subs	r3, r3, r2
 8020d60:	e73c      	b.n	8020bdc <_dtoa_r+0x794>
 8020d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d64:	1e5d      	subs	r5, r3, #1
 8020d66:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020d68:	42ab      	cmp	r3, r5
 8020d6a:	db08      	blt.n	8020d7e <_dtoa_r+0x936>
 8020d6c:	1b5d      	subs	r5, r3, r5
 8020d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d70:	9c06      	ldr	r4, [sp, #24]
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	db00      	blt.n	8020d78 <_dtoa_r+0x930>
 8020d76:	e731      	b.n	8020bdc <_dtoa_r+0x794>
 8020d78:	1ae4      	subs	r4, r4, r3
 8020d7a:	2300      	movs	r3, #0
 8020d7c:	e72e      	b.n	8020bdc <_dtoa_r+0x794>
 8020d7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020d80:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8020d82:	1aeb      	subs	r3, r5, r3
 8020d84:	18d3      	adds	r3, r2, r3
 8020d86:	950f      	str	r5, [sp, #60]	@ 0x3c
 8020d88:	9314      	str	r3, [sp, #80]	@ 0x50
 8020d8a:	2500      	movs	r5, #0
 8020d8c:	e7ef      	b.n	8020d6e <_dtoa_r+0x926>
 8020d8e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020d90:	e75e      	b.n	8020c50 <_dtoa_r+0x808>
 8020d92:	2b04      	cmp	r3, #4
 8020d94:	d0a8      	beq.n	8020ce8 <_dtoa_r+0x8a0>
 8020d96:	331c      	adds	r3, #28
 8020d98:	e79f      	b.n	8020cda <_dtoa_r+0x892>
 8020d9a:	0013      	movs	r3, r2
 8020d9c:	e7fb      	b.n	8020d96 <_dtoa_r+0x94e>
 8020d9e:	9b04      	ldr	r3, [sp, #16]
 8020da0:	930c      	str	r3, [sp, #48]	@ 0x30
 8020da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020da4:	930e      	str	r3, [sp, #56]	@ 0x38
 8020da6:	2b00      	cmp	r3, #0
 8020da8:	dc23      	bgt.n	8020df2 <_dtoa_r+0x9aa>
 8020daa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020dac:	2b02      	cmp	r3, #2
 8020dae:	dd20      	ble.n	8020df2 <_dtoa_r+0x9aa>
 8020db0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020db2:	2b00      	cmp	r3, #0
 8020db4:	d000      	beq.n	8020db8 <_dtoa_r+0x970>
 8020db6:	e6b5      	b.n	8020b24 <_dtoa_r+0x6dc>
 8020db8:	0031      	movs	r1, r6
 8020dba:	2205      	movs	r2, #5
 8020dbc:	9803      	ldr	r0, [sp, #12]
 8020dbe:	f000 fe11 	bl	80219e4 <__multadd>
 8020dc2:	0006      	movs	r6, r0
 8020dc4:	0001      	movs	r1, r0
 8020dc6:	9805      	ldr	r0, [sp, #20]
 8020dc8:	f001 f87e 	bl	8021ec8 <__mcmp>
 8020dcc:	2800      	cmp	r0, #0
 8020dce:	dc00      	bgt.n	8020dd2 <_dtoa_r+0x98a>
 8020dd0:	e6a8      	b.n	8020b24 <_dtoa_r+0x6dc>
 8020dd2:	9b08      	ldr	r3, [sp, #32]
 8020dd4:	9a08      	ldr	r2, [sp, #32]
 8020dd6:	1c5c      	adds	r4, r3, #1
 8020dd8:	2331      	movs	r3, #49	@ 0x31
 8020dda:	7013      	strb	r3, [r2, #0]
 8020ddc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020dde:	3301      	adds	r3, #1
 8020de0:	930c      	str	r3, [sp, #48]	@ 0x30
 8020de2:	e6a3      	b.n	8020b2c <_dtoa_r+0x6e4>
 8020de4:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8020de6:	0037      	movs	r7, r6
 8020de8:	e7f3      	b.n	8020dd2 <_dtoa_r+0x98a>
 8020dea:	9b04      	ldr	r3, [sp, #16]
 8020dec:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8020dee:	930c      	str	r3, [sp, #48]	@ 0x30
 8020df0:	e7f9      	b.n	8020de6 <_dtoa_r+0x99e>
 8020df2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020df4:	2b00      	cmp	r3, #0
 8020df6:	d100      	bne.n	8020dfa <_dtoa_r+0x9b2>
 8020df8:	e100      	b.n	8020ffc <_dtoa_r+0xbb4>
 8020dfa:	2c00      	cmp	r4, #0
 8020dfc:	dd05      	ble.n	8020e0a <_dtoa_r+0x9c2>
 8020dfe:	0039      	movs	r1, r7
 8020e00:	0022      	movs	r2, r4
 8020e02:	9803      	ldr	r0, [sp, #12]
 8020e04:	f000 fff4 	bl	8021df0 <__lshift>
 8020e08:	0007      	movs	r7, r0
 8020e0a:	0038      	movs	r0, r7
 8020e0c:	2d00      	cmp	r5, #0
 8020e0e:	d018      	beq.n	8020e42 <_dtoa_r+0x9fa>
 8020e10:	6879      	ldr	r1, [r7, #4]
 8020e12:	9803      	ldr	r0, [sp, #12]
 8020e14:	f000 fd7e 	bl	8021914 <_Balloc>
 8020e18:	1e04      	subs	r4, r0, #0
 8020e1a:	d105      	bne.n	8020e28 <_dtoa_r+0x9e0>
 8020e1c:	0022      	movs	r2, r4
 8020e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8020ecc <_dtoa_r+0xa84>)
 8020e20:	482b      	ldr	r0, [pc, #172]	@ (8020ed0 <_dtoa_r+0xa88>)
 8020e22:	492c      	ldr	r1, [pc, #176]	@ (8020ed4 <_dtoa_r+0xa8c>)
 8020e24:	f7ff fb25 	bl	8020472 <_dtoa_r+0x2a>
 8020e28:	0039      	movs	r1, r7
 8020e2a:	693a      	ldr	r2, [r7, #16]
 8020e2c:	310c      	adds	r1, #12
 8020e2e:	3202      	adds	r2, #2
 8020e30:	0092      	lsls	r2, r2, #2
 8020e32:	300c      	adds	r0, #12
 8020e34:	f7ff fa6a 	bl	802030c <memcpy>
 8020e38:	2201      	movs	r2, #1
 8020e3a:	0021      	movs	r1, r4
 8020e3c:	9803      	ldr	r0, [sp, #12]
 8020e3e:	f000 ffd7 	bl	8021df0 <__lshift>
 8020e42:	9b08      	ldr	r3, [sp, #32]
 8020e44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020e46:	9306      	str	r3, [sp, #24]
 8020e48:	3b01      	subs	r3, #1
 8020e4a:	189b      	adds	r3, r3, r2
 8020e4c:	2201      	movs	r2, #1
 8020e4e:	9704      	str	r7, [sp, #16]
 8020e50:	0007      	movs	r7, r0
 8020e52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020e56:	4013      	ands	r3, r2
 8020e58:	930e      	str	r3, [sp, #56]	@ 0x38
 8020e5a:	0031      	movs	r1, r6
 8020e5c:	9805      	ldr	r0, [sp, #20]
 8020e5e:	f7ff fa65 	bl	802032c <quorem>
 8020e62:	9904      	ldr	r1, [sp, #16]
 8020e64:	0005      	movs	r5, r0
 8020e66:	900a      	str	r0, [sp, #40]	@ 0x28
 8020e68:	9805      	ldr	r0, [sp, #20]
 8020e6a:	f001 f82d 	bl	8021ec8 <__mcmp>
 8020e6e:	003a      	movs	r2, r7
 8020e70:	900d      	str	r0, [sp, #52]	@ 0x34
 8020e72:	0031      	movs	r1, r6
 8020e74:	9803      	ldr	r0, [sp, #12]
 8020e76:	f001 f843 	bl	8021f00 <__mdiff>
 8020e7a:	2201      	movs	r2, #1
 8020e7c:	68c3      	ldr	r3, [r0, #12]
 8020e7e:	0004      	movs	r4, r0
 8020e80:	3530      	adds	r5, #48	@ 0x30
 8020e82:	9209      	str	r2, [sp, #36]	@ 0x24
 8020e84:	2b00      	cmp	r3, #0
 8020e86:	d104      	bne.n	8020e92 <_dtoa_r+0xa4a>
 8020e88:	0001      	movs	r1, r0
 8020e8a:	9805      	ldr	r0, [sp, #20]
 8020e8c:	f001 f81c 	bl	8021ec8 <__mcmp>
 8020e90:	9009      	str	r0, [sp, #36]	@ 0x24
 8020e92:	0021      	movs	r1, r4
 8020e94:	9803      	ldr	r0, [sp, #12]
 8020e96:	f000 fd81 	bl	802199c <_Bfree>
 8020e9a:	9b06      	ldr	r3, [sp, #24]
 8020e9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020e9e:	1c5c      	adds	r4, r3, #1
 8020ea0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020ea2:	4313      	orrs	r3, r2
 8020ea4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020ea6:	4313      	orrs	r3, r2
 8020ea8:	d116      	bne.n	8020ed8 <_dtoa_r+0xa90>
 8020eaa:	2d39      	cmp	r5, #57	@ 0x39
 8020eac:	d02f      	beq.n	8020f0e <_dtoa_r+0xac6>
 8020eae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020eb0:	2b00      	cmp	r3, #0
 8020eb2:	dd01      	ble.n	8020eb8 <_dtoa_r+0xa70>
 8020eb4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8020eb6:	3531      	adds	r5, #49	@ 0x31
 8020eb8:	9b06      	ldr	r3, [sp, #24]
 8020eba:	701d      	strb	r5, [r3, #0]
 8020ebc:	e638      	b.n	8020b30 <_dtoa_r+0x6e8>
 8020ebe:	46c0      	nop			@ (mov r8, r8)
 8020ec0:	40240000 	.word	0x40240000
 8020ec4:	00000433 	.word	0x00000433
 8020ec8:	7ff00000 	.word	0x7ff00000
 8020ecc:	08025d19 	.word	0x08025d19
 8020ed0:	08025cc1 	.word	0x08025cc1
 8020ed4:	000002ef 	.word	0x000002ef
 8020ed8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020eda:	2b00      	cmp	r3, #0
 8020edc:	db04      	blt.n	8020ee8 <_dtoa_r+0xaa0>
 8020ede:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8020ee0:	4313      	orrs	r3, r2
 8020ee2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020ee4:	4313      	orrs	r3, r2
 8020ee6:	d11e      	bne.n	8020f26 <_dtoa_r+0xade>
 8020ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020eea:	2b00      	cmp	r3, #0
 8020eec:	dde4      	ble.n	8020eb8 <_dtoa_r+0xa70>
 8020eee:	9905      	ldr	r1, [sp, #20]
 8020ef0:	2201      	movs	r2, #1
 8020ef2:	9803      	ldr	r0, [sp, #12]
 8020ef4:	f000 ff7c 	bl	8021df0 <__lshift>
 8020ef8:	0031      	movs	r1, r6
 8020efa:	9005      	str	r0, [sp, #20]
 8020efc:	f000 ffe4 	bl	8021ec8 <__mcmp>
 8020f00:	2800      	cmp	r0, #0
 8020f02:	dc02      	bgt.n	8020f0a <_dtoa_r+0xac2>
 8020f04:	d1d8      	bne.n	8020eb8 <_dtoa_r+0xa70>
 8020f06:	07eb      	lsls	r3, r5, #31
 8020f08:	d5d6      	bpl.n	8020eb8 <_dtoa_r+0xa70>
 8020f0a:	2d39      	cmp	r5, #57	@ 0x39
 8020f0c:	d1d2      	bne.n	8020eb4 <_dtoa_r+0xa6c>
 8020f0e:	2339      	movs	r3, #57	@ 0x39
 8020f10:	9a06      	ldr	r2, [sp, #24]
 8020f12:	7013      	strb	r3, [r2, #0]
 8020f14:	0023      	movs	r3, r4
 8020f16:	001c      	movs	r4, r3
 8020f18:	3b01      	subs	r3, #1
 8020f1a:	781a      	ldrb	r2, [r3, #0]
 8020f1c:	2a39      	cmp	r2, #57	@ 0x39
 8020f1e:	d04f      	beq.n	8020fc0 <_dtoa_r+0xb78>
 8020f20:	3201      	adds	r2, #1
 8020f22:	701a      	strb	r2, [r3, #0]
 8020f24:	e604      	b.n	8020b30 <_dtoa_r+0x6e8>
 8020f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f28:	2b00      	cmp	r3, #0
 8020f2a:	dd03      	ble.n	8020f34 <_dtoa_r+0xaec>
 8020f2c:	2d39      	cmp	r5, #57	@ 0x39
 8020f2e:	d0ee      	beq.n	8020f0e <_dtoa_r+0xac6>
 8020f30:	3501      	adds	r5, #1
 8020f32:	e7c1      	b.n	8020eb8 <_dtoa_r+0xa70>
 8020f34:	9b06      	ldr	r3, [sp, #24]
 8020f36:	9a06      	ldr	r2, [sp, #24]
 8020f38:	701d      	strb	r5, [r3, #0]
 8020f3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020f3c:	4293      	cmp	r3, r2
 8020f3e:	d02a      	beq.n	8020f96 <_dtoa_r+0xb4e>
 8020f40:	2300      	movs	r3, #0
 8020f42:	220a      	movs	r2, #10
 8020f44:	9905      	ldr	r1, [sp, #20]
 8020f46:	9803      	ldr	r0, [sp, #12]
 8020f48:	f000 fd4c 	bl	80219e4 <__multadd>
 8020f4c:	9b04      	ldr	r3, [sp, #16]
 8020f4e:	9005      	str	r0, [sp, #20]
 8020f50:	42bb      	cmp	r3, r7
 8020f52:	d109      	bne.n	8020f68 <_dtoa_r+0xb20>
 8020f54:	2300      	movs	r3, #0
 8020f56:	220a      	movs	r2, #10
 8020f58:	9904      	ldr	r1, [sp, #16]
 8020f5a:	9803      	ldr	r0, [sp, #12]
 8020f5c:	f000 fd42 	bl	80219e4 <__multadd>
 8020f60:	9004      	str	r0, [sp, #16]
 8020f62:	0007      	movs	r7, r0
 8020f64:	9406      	str	r4, [sp, #24]
 8020f66:	e778      	b.n	8020e5a <_dtoa_r+0xa12>
 8020f68:	9904      	ldr	r1, [sp, #16]
 8020f6a:	2300      	movs	r3, #0
 8020f6c:	220a      	movs	r2, #10
 8020f6e:	9803      	ldr	r0, [sp, #12]
 8020f70:	f000 fd38 	bl	80219e4 <__multadd>
 8020f74:	2300      	movs	r3, #0
 8020f76:	9004      	str	r0, [sp, #16]
 8020f78:	220a      	movs	r2, #10
 8020f7a:	0039      	movs	r1, r7
 8020f7c:	9803      	ldr	r0, [sp, #12]
 8020f7e:	f000 fd31 	bl	80219e4 <__multadd>
 8020f82:	e7ee      	b.n	8020f62 <_dtoa_r+0xb1a>
 8020f84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020f86:	2401      	movs	r4, #1
 8020f88:	2b00      	cmp	r3, #0
 8020f8a:	dd00      	ble.n	8020f8e <_dtoa_r+0xb46>
 8020f8c:	001c      	movs	r4, r3
 8020f8e:	9b08      	ldr	r3, [sp, #32]
 8020f90:	191c      	adds	r4, r3, r4
 8020f92:	2300      	movs	r3, #0
 8020f94:	9304      	str	r3, [sp, #16]
 8020f96:	9905      	ldr	r1, [sp, #20]
 8020f98:	2201      	movs	r2, #1
 8020f9a:	9803      	ldr	r0, [sp, #12]
 8020f9c:	f000 ff28 	bl	8021df0 <__lshift>
 8020fa0:	0031      	movs	r1, r6
 8020fa2:	9005      	str	r0, [sp, #20]
 8020fa4:	f000 ff90 	bl	8021ec8 <__mcmp>
 8020fa8:	2800      	cmp	r0, #0
 8020faa:	dcb3      	bgt.n	8020f14 <_dtoa_r+0xacc>
 8020fac:	d101      	bne.n	8020fb2 <_dtoa_r+0xb6a>
 8020fae:	07ed      	lsls	r5, r5, #31
 8020fb0:	d4b0      	bmi.n	8020f14 <_dtoa_r+0xacc>
 8020fb2:	0023      	movs	r3, r4
 8020fb4:	001c      	movs	r4, r3
 8020fb6:	3b01      	subs	r3, #1
 8020fb8:	781a      	ldrb	r2, [r3, #0]
 8020fba:	2a30      	cmp	r2, #48	@ 0x30
 8020fbc:	d0fa      	beq.n	8020fb4 <_dtoa_r+0xb6c>
 8020fbe:	e5b7      	b.n	8020b30 <_dtoa_r+0x6e8>
 8020fc0:	9a08      	ldr	r2, [sp, #32]
 8020fc2:	429a      	cmp	r2, r3
 8020fc4:	d1a7      	bne.n	8020f16 <_dtoa_r+0xace>
 8020fc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020fc8:	3301      	adds	r3, #1
 8020fca:	930c      	str	r3, [sp, #48]	@ 0x30
 8020fcc:	2331      	movs	r3, #49	@ 0x31
 8020fce:	7013      	strb	r3, [r2, #0]
 8020fd0:	e5ae      	b.n	8020b30 <_dtoa_r+0x6e8>
 8020fd2:	4b15      	ldr	r3, [pc, #84]	@ (8021028 <_dtoa_r+0xbe0>)
 8020fd4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8020fd6:	9308      	str	r3, [sp, #32]
 8020fd8:	4b14      	ldr	r3, [pc, #80]	@ (802102c <_dtoa_r+0xbe4>)
 8020fda:	2a00      	cmp	r2, #0
 8020fdc:	d001      	beq.n	8020fe2 <_dtoa_r+0xb9a>
 8020fde:	f7ff fa7b 	bl	80204d8 <_dtoa_r+0x90>
 8020fe2:	f7ff fa7b 	bl	80204dc <_dtoa_r+0x94>
 8020fe6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8020fe8:	2b01      	cmp	r3, #1
 8020fea:	dc00      	bgt.n	8020fee <_dtoa_r+0xba6>
 8020fec:	e648      	b.n	8020c80 <_dtoa_r+0x838>
 8020fee:	2001      	movs	r0, #1
 8020ff0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8020ff2:	e665      	b.n	8020cc0 <_dtoa_r+0x878>
 8020ff4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020ff6:	2b00      	cmp	r3, #0
 8020ff8:	dc00      	bgt.n	8020ffc <_dtoa_r+0xbb4>
 8020ffa:	e6d6      	b.n	8020daa <_dtoa_r+0x962>
 8020ffc:	2400      	movs	r4, #0
 8020ffe:	0031      	movs	r1, r6
 8021000:	9805      	ldr	r0, [sp, #20]
 8021002:	f7ff f993 	bl	802032c <quorem>
 8021006:	9b08      	ldr	r3, [sp, #32]
 8021008:	3030      	adds	r0, #48	@ 0x30
 802100a:	5518      	strb	r0, [r3, r4]
 802100c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802100e:	3401      	adds	r4, #1
 8021010:	0005      	movs	r5, r0
 8021012:	429c      	cmp	r4, r3
 8021014:	dab6      	bge.n	8020f84 <_dtoa_r+0xb3c>
 8021016:	2300      	movs	r3, #0
 8021018:	220a      	movs	r2, #10
 802101a:	9905      	ldr	r1, [sp, #20]
 802101c:	9803      	ldr	r0, [sp, #12]
 802101e:	f000 fce1 	bl	80219e4 <__multadd>
 8021022:	9005      	str	r0, [sp, #20]
 8021024:	e7eb      	b.n	8020ffe <_dtoa_r+0xbb6>
 8021026:	46c0      	nop			@ (mov r8, r8)
 8021028:	08025c9d 	.word	0x08025c9d
 802102c:	08025ca5 	.word	0x08025ca5

08021030 <_free_r>:
 8021030:	b570      	push	{r4, r5, r6, lr}
 8021032:	0005      	movs	r5, r0
 8021034:	1e0c      	subs	r4, r1, #0
 8021036:	d010      	beq.n	802105a <_free_r+0x2a>
 8021038:	3c04      	subs	r4, #4
 802103a:	6823      	ldr	r3, [r4, #0]
 802103c:	2b00      	cmp	r3, #0
 802103e:	da00      	bge.n	8021042 <_free_r+0x12>
 8021040:	18e4      	adds	r4, r4, r3
 8021042:	0028      	movs	r0, r5
 8021044:	f000 fc56 	bl	80218f4 <__malloc_lock>
 8021048:	4a1d      	ldr	r2, [pc, #116]	@ (80210c0 <_free_r+0x90>)
 802104a:	6813      	ldr	r3, [r2, #0]
 802104c:	2b00      	cmp	r3, #0
 802104e:	d105      	bne.n	802105c <_free_r+0x2c>
 8021050:	6063      	str	r3, [r4, #4]
 8021052:	6014      	str	r4, [r2, #0]
 8021054:	0028      	movs	r0, r5
 8021056:	f000 fc55 	bl	8021904 <__malloc_unlock>
 802105a:	bd70      	pop	{r4, r5, r6, pc}
 802105c:	42a3      	cmp	r3, r4
 802105e:	d908      	bls.n	8021072 <_free_r+0x42>
 8021060:	6820      	ldr	r0, [r4, #0]
 8021062:	1821      	adds	r1, r4, r0
 8021064:	428b      	cmp	r3, r1
 8021066:	d1f3      	bne.n	8021050 <_free_r+0x20>
 8021068:	6819      	ldr	r1, [r3, #0]
 802106a:	685b      	ldr	r3, [r3, #4]
 802106c:	1809      	adds	r1, r1, r0
 802106e:	6021      	str	r1, [r4, #0]
 8021070:	e7ee      	b.n	8021050 <_free_r+0x20>
 8021072:	001a      	movs	r2, r3
 8021074:	685b      	ldr	r3, [r3, #4]
 8021076:	2b00      	cmp	r3, #0
 8021078:	d001      	beq.n	802107e <_free_r+0x4e>
 802107a:	42a3      	cmp	r3, r4
 802107c:	d9f9      	bls.n	8021072 <_free_r+0x42>
 802107e:	6811      	ldr	r1, [r2, #0]
 8021080:	1850      	adds	r0, r2, r1
 8021082:	42a0      	cmp	r0, r4
 8021084:	d10b      	bne.n	802109e <_free_r+0x6e>
 8021086:	6820      	ldr	r0, [r4, #0]
 8021088:	1809      	adds	r1, r1, r0
 802108a:	1850      	adds	r0, r2, r1
 802108c:	6011      	str	r1, [r2, #0]
 802108e:	4283      	cmp	r3, r0
 8021090:	d1e0      	bne.n	8021054 <_free_r+0x24>
 8021092:	6818      	ldr	r0, [r3, #0]
 8021094:	685b      	ldr	r3, [r3, #4]
 8021096:	1841      	adds	r1, r0, r1
 8021098:	6011      	str	r1, [r2, #0]
 802109a:	6053      	str	r3, [r2, #4]
 802109c:	e7da      	b.n	8021054 <_free_r+0x24>
 802109e:	42a0      	cmp	r0, r4
 80210a0:	d902      	bls.n	80210a8 <_free_r+0x78>
 80210a2:	230c      	movs	r3, #12
 80210a4:	602b      	str	r3, [r5, #0]
 80210a6:	e7d5      	b.n	8021054 <_free_r+0x24>
 80210a8:	6820      	ldr	r0, [r4, #0]
 80210aa:	1821      	adds	r1, r4, r0
 80210ac:	428b      	cmp	r3, r1
 80210ae:	d103      	bne.n	80210b8 <_free_r+0x88>
 80210b0:	6819      	ldr	r1, [r3, #0]
 80210b2:	685b      	ldr	r3, [r3, #4]
 80210b4:	1809      	adds	r1, r1, r0
 80210b6:	6021      	str	r1, [r4, #0]
 80210b8:	6063      	str	r3, [r4, #4]
 80210ba:	6054      	str	r4, [r2, #4]
 80210bc:	e7ca      	b.n	8021054 <_free_r+0x24>
 80210be:	46c0      	nop			@ (mov r8, r8)
 80210c0:	200039a8 	.word	0x200039a8

080210c4 <rshift>:
 80210c4:	0002      	movs	r2, r0
 80210c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80210c8:	6904      	ldr	r4, [r0, #16]
 80210ca:	b085      	sub	sp, #20
 80210cc:	3214      	adds	r2, #20
 80210ce:	114b      	asrs	r3, r1, #5
 80210d0:	0016      	movs	r6, r2
 80210d2:	9302      	str	r3, [sp, #8]
 80210d4:	429c      	cmp	r4, r3
 80210d6:	dd31      	ble.n	802113c <rshift+0x78>
 80210d8:	261f      	movs	r6, #31
 80210da:	000f      	movs	r7, r1
 80210dc:	009b      	lsls	r3, r3, #2
 80210de:	00a5      	lsls	r5, r4, #2
 80210e0:	18d3      	adds	r3, r2, r3
 80210e2:	4037      	ands	r7, r6
 80210e4:	1955      	adds	r5, r2, r5
 80210e6:	9300      	str	r3, [sp, #0]
 80210e8:	9701      	str	r7, [sp, #4]
 80210ea:	4231      	tst	r1, r6
 80210ec:	d10d      	bne.n	802110a <rshift+0x46>
 80210ee:	0016      	movs	r6, r2
 80210f0:	0019      	movs	r1, r3
 80210f2:	428d      	cmp	r5, r1
 80210f4:	d836      	bhi.n	8021164 <rshift+0xa0>
 80210f6:	9b00      	ldr	r3, [sp, #0]
 80210f8:	2600      	movs	r6, #0
 80210fa:	3b03      	subs	r3, #3
 80210fc:	429d      	cmp	r5, r3
 80210fe:	d302      	bcc.n	8021106 <rshift+0x42>
 8021100:	9b02      	ldr	r3, [sp, #8]
 8021102:	1ae4      	subs	r4, r4, r3
 8021104:	00a6      	lsls	r6, r4, #2
 8021106:	1996      	adds	r6, r2, r6
 8021108:	e018      	b.n	802113c <rshift+0x78>
 802110a:	2120      	movs	r1, #32
 802110c:	9e01      	ldr	r6, [sp, #4]
 802110e:	9f01      	ldr	r7, [sp, #4]
 8021110:	1b89      	subs	r1, r1, r6
 8021112:	9e00      	ldr	r6, [sp, #0]
 8021114:	9103      	str	r1, [sp, #12]
 8021116:	ce02      	ldmia	r6!, {r1}
 8021118:	4694      	mov	ip, r2
 802111a:	40f9      	lsrs	r1, r7
 802111c:	42b5      	cmp	r5, r6
 802111e:	d816      	bhi.n	802114e <rshift+0x8a>
 8021120:	9b00      	ldr	r3, [sp, #0]
 8021122:	2600      	movs	r6, #0
 8021124:	3301      	adds	r3, #1
 8021126:	429d      	cmp	r5, r3
 8021128:	d303      	bcc.n	8021132 <rshift+0x6e>
 802112a:	9b02      	ldr	r3, [sp, #8]
 802112c:	1ae4      	subs	r4, r4, r3
 802112e:	00a6      	lsls	r6, r4, #2
 8021130:	3e04      	subs	r6, #4
 8021132:	1996      	adds	r6, r2, r6
 8021134:	6031      	str	r1, [r6, #0]
 8021136:	2900      	cmp	r1, #0
 8021138:	d000      	beq.n	802113c <rshift+0x78>
 802113a:	3604      	adds	r6, #4
 802113c:	1ab1      	subs	r1, r6, r2
 802113e:	1089      	asrs	r1, r1, #2
 8021140:	6101      	str	r1, [r0, #16]
 8021142:	4296      	cmp	r6, r2
 8021144:	d101      	bne.n	802114a <rshift+0x86>
 8021146:	2300      	movs	r3, #0
 8021148:	6143      	str	r3, [r0, #20]
 802114a:	b005      	add	sp, #20
 802114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802114e:	6837      	ldr	r7, [r6, #0]
 8021150:	9b03      	ldr	r3, [sp, #12]
 8021152:	409f      	lsls	r7, r3
 8021154:	430f      	orrs	r7, r1
 8021156:	4661      	mov	r1, ip
 8021158:	c180      	stmia	r1!, {r7}
 802115a:	468c      	mov	ip, r1
 802115c:	9b01      	ldr	r3, [sp, #4]
 802115e:	ce02      	ldmia	r6!, {r1}
 8021160:	40d9      	lsrs	r1, r3
 8021162:	e7db      	b.n	802111c <rshift+0x58>
 8021164:	c980      	ldmia	r1!, {r7}
 8021166:	c680      	stmia	r6!, {r7}
 8021168:	e7c3      	b.n	80210f2 <rshift+0x2e>

0802116a <__hexdig_fun>:
 802116a:	0002      	movs	r2, r0
 802116c:	3a30      	subs	r2, #48	@ 0x30
 802116e:	0003      	movs	r3, r0
 8021170:	2a09      	cmp	r2, #9
 8021172:	d802      	bhi.n	802117a <__hexdig_fun+0x10>
 8021174:	3b20      	subs	r3, #32
 8021176:	b2d8      	uxtb	r0, r3
 8021178:	4770      	bx	lr
 802117a:	0002      	movs	r2, r0
 802117c:	3a61      	subs	r2, #97	@ 0x61
 802117e:	2a05      	cmp	r2, #5
 8021180:	d801      	bhi.n	8021186 <__hexdig_fun+0x1c>
 8021182:	3b47      	subs	r3, #71	@ 0x47
 8021184:	e7f7      	b.n	8021176 <__hexdig_fun+0xc>
 8021186:	001a      	movs	r2, r3
 8021188:	3a41      	subs	r2, #65	@ 0x41
 802118a:	2000      	movs	r0, #0
 802118c:	2a05      	cmp	r2, #5
 802118e:	d8f3      	bhi.n	8021178 <__hexdig_fun+0xe>
 8021190:	3b27      	subs	r3, #39	@ 0x27
 8021192:	e7f0      	b.n	8021176 <__hexdig_fun+0xc>

08021194 <__gethex>:
 8021194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021196:	b089      	sub	sp, #36	@ 0x24
 8021198:	9307      	str	r3, [sp, #28]
 802119a:	680b      	ldr	r3, [r1, #0]
 802119c:	9201      	str	r2, [sp, #4]
 802119e:	9003      	str	r0, [sp, #12]
 80211a0:	9106      	str	r1, [sp, #24]
 80211a2:	1c9a      	adds	r2, r3, #2
 80211a4:	0011      	movs	r1, r2
 80211a6:	3201      	adds	r2, #1
 80211a8:	1e50      	subs	r0, r2, #1
 80211aa:	7800      	ldrb	r0, [r0, #0]
 80211ac:	2830      	cmp	r0, #48	@ 0x30
 80211ae:	d0f9      	beq.n	80211a4 <__gethex+0x10>
 80211b0:	1acb      	subs	r3, r1, r3
 80211b2:	3b02      	subs	r3, #2
 80211b4:	9305      	str	r3, [sp, #20]
 80211b6:	9100      	str	r1, [sp, #0]
 80211b8:	f7ff ffd7 	bl	802116a <__hexdig_fun>
 80211bc:	2300      	movs	r3, #0
 80211be:	001d      	movs	r5, r3
 80211c0:	9302      	str	r3, [sp, #8]
 80211c2:	4298      	cmp	r0, r3
 80211c4:	d11e      	bne.n	8021204 <__gethex+0x70>
 80211c6:	2201      	movs	r2, #1
 80211c8:	49a6      	ldr	r1, [pc, #664]	@ (8021464 <__gethex+0x2d0>)
 80211ca:	9800      	ldr	r0, [sp, #0]
 80211cc:	f7fe ffd8 	bl	8020180 <strncmp>
 80211d0:	0007      	movs	r7, r0
 80211d2:	42a8      	cmp	r0, r5
 80211d4:	d000      	beq.n	80211d8 <__gethex+0x44>
 80211d6:	e06a      	b.n	80212ae <__gethex+0x11a>
 80211d8:	9b00      	ldr	r3, [sp, #0]
 80211da:	7858      	ldrb	r0, [r3, #1]
 80211dc:	1c5c      	adds	r4, r3, #1
 80211de:	f7ff ffc4 	bl	802116a <__hexdig_fun>
 80211e2:	2301      	movs	r3, #1
 80211e4:	9302      	str	r3, [sp, #8]
 80211e6:	42a8      	cmp	r0, r5
 80211e8:	d02f      	beq.n	802124a <__gethex+0xb6>
 80211ea:	9400      	str	r4, [sp, #0]
 80211ec:	9b00      	ldr	r3, [sp, #0]
 80211ee:	7818      	ldrb	r0, [r3, #0]
 80211f0:	2830      	cmp	r0, #48	@ 0x30
 80211f2:	d009      	beq.n	8021208 <__gethex+0x74>
 80211f4:	f7ff ffb9 	bl	802116a <__hexdig_fun>
 80211f8:	4242      	negs	r2, r0
 80211fa:	4142      	adcs	r2, r0
 80211fc:	2301      	movs	r3, #1
 80211fe:	0025      	movs	r5, r4
 8021200:	9202      	str	r2, [sp, #8]
 8021202:	9305      	str	r3, [sp, #20]
 8021204:	9c00      	ldr	r4, [sp, #0]
 8021206:	e004      	b.n	8021212 <__gethex+0x7e>
 8021208:	9b00      	ldr	r3, [sp, #0]
 802120a:	3301      	adds	r3, #1
 802120c:	9300      	str	r3, [sp, #0]
 802120e:	e7ed      	b.n	80211ec <__gethex+0x58>
 8021210:	3401      	adds	r4, #1
 8021212:	7820      	ldrb	r0, [r4, #0]
 8021214:	f7ff ffa9 	bl	802116a <__hexdig_fun>
 8021218:	1e07      	subs	r7, r0, #0
 802121a:	d1f9      	bne.n	8021210 <__gethex+0x7c>
 802121c:	2201      	movs	r2, #1
 802121e:	0020      	movs	r0, r4
 8021220:	4990      	ldr	r1, [pc, #576]	@ (8021464 <__gethex+0x2d0>)
 8021222:	f7fe ffad 	bl	8020180 <strncmp>
 8021226:	2800      	cmp	r0, #0
 8021228:	d10d      	bne.n	8021246 <__gethex+0xb2>
 802122a:	2d00      	cmp	r5, #0
 802122c:	d106      	bne.n	802123c <__gethex+0xa8>
 802122e:	3401      	adds	r4, #1
 8021230:	0025      	movs	r5, r4
 8021232:	7820      	ldrb	r0, [r4, #0]
 8021234:	f7ff ff99 	bl	802116a <__hexdig_fun>
 8021238:	2800      	cmp	r0, #0
 802123a:	d102      	bne.n	8021242 <__gethex+0xae>
 802123c:	1b2d      	subs	r5, r5, r4
 802123e:	00af      	lsls	r7, r5, #2
 8021240:	e003      	b.n	802124a <__gethex+0xb6>
 8021242:	3401      	adds	r4, #1
 8021244:	e7f5      	b.n	8021232 <__gethex+0x9e>
 8021246:	2d00      	cmp	r5, #0
 8021248:	d1f8      	bne.n	802123c <__gethex+0xa8>
 802124a:	2220      	movs	r2, #32
 802124c:	7823      	ldrb	r3, [r4, #0]
 802124e:	0026      	movs	r6, r4
 8021250:	4393      	bics	r3, r2
 8021252:	2b50      	cmp	r3, #80	@ 0x50
 8021254:	d11d      	bne.n	8021292 <__gethex+0xfe>
 8021256:	7863      	ldrb	r3, [r4, #1]
 8021258:	2b2b      	cmp	r3, #43	@ 0x2b
 802125a:	d02d      	beq.n	80212b8 <__gethex+0x124>
 802125c:	2b2d      	cmp	r3, #45	@ 0x2d
 802125e:	d02f      	beq.n	80212c0 <__gethex+0x12c>
 8021260:	2300      	movs	r3, #0
 8021262:	1c66      	adds	r6, r4, #1
 8021264:	9304      	str	r3, [sp, #16]
 8021266:	7830      	ldrb	r0, [r6, #0]
 8021268:	f7ff ff7f 	bl	802116a <__hexdig_fun>
 802126c:	1e43      	subs	r3, r0, #1
 802126e:	b2db      	uxtb	r3, r3
 8021270:	0005      	movs	r5, r0
 8021272:	2b18      	cmp	r3, #24
 8021274:	d82a      	bhi.n	80212cc <__gethex+0x138>
 8021276:	7870      	ldrb	r0, [r6, #1]
 8021278:	f7ff ff77 	bl	802116a <__hexdig_fun>
 802127c:	1e43      	subs	r3, r0, #1
 802127e:	b2db      	uxtb	r3, r3
 8021280:	3601      	adds	r6, #1
 8021282:	3d10      	subs	r5, #16
 8021284:	2b18      	cmp	r3, #24
 8021286:	d91d      	bls.n	80212c4 <__gethex+0x130>
 8021288:	9b04      	ldr	r3, [sp, #16]
 802128a:	2b00      	cmp	r3, #0
 802128c:	d000      	beq.n	8021290 <__gethex+0xfc>
 802128e:	426d      	negs	r5, r5
 8021290:	197f      	adds	r7, r7, r5
 8021292:	9b06      	ldr	r3, [sp, #24]
 8021294:	601e      	str	r6, [r3, #0]
 8021296:	9b02      	ldr	r3, [sp, #8]
 8021298:	2b00      	cmp	r3, #0
 802129a:	d019      	beq.n	80212d0 <__gethex+0x13c>
 802129c:	9b05      	ldr	r3, [sp, #20]
 802129e:	2606      	movs	r6, #6
 80212a0:	425a      	negs	r2, r3
 80212a2:	4153      	adcs	r3, r2
 80212a4:	425b      	negs	r3, r3
 80212a6:	401e      	ands	r6, r3
 80212a8:	0030      	movs	r0, r6
 80212aa:	b009      	add	sp, #36	@ 0x24
 80212ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80212ae:	2301      	movs	r3, #1
 80212b0:	2700      	movs	r7, #0
 80212b2:	9c00      	ldr	r4, [sp, #0]
 80212b4:	9302      	str	r3, [sp, #8]
 80212b6:	e7c8      	b.n	802124a <__gethex+0xb6>
 80212b8:	2300      	movs	r3, #0
 80212ba:	9304      	str	r3, [sp, #16]
 80212bc:	1ca6      	adds	r6, r4, #2
 80212be:	e7d2      	b.n	8021266 <__gethex+0xd2>
 80212c0:	2301      	movs	r3, #1
 80212c2:	e7fa      	b.n	80212ba <__gethex+0x126>
 80212c4:	230a      	movs	r3, #10
 80212c6:	435d      	muls	r5, r3
 80212c8:	182d      	adds	r5, r5, r0
 80212ca:	e7d4      	b.n	8021276 <__gethex+0xe2>
 80212cc:	0026      	movs	r6, r4
 80212ce:	e7e0      	b.n	8021292 <__gethex+0xfe>
 80212d0:	9b00      	ldr	r3, [sp, #0]
 80212d2:	9902      	ldr	r1, [sp, #8]
 80212d4:	1ae3      	subs	r3, r4, r3
 80212d6:	3b01      	subs	r3, #1
 80212d8:	2b07      	cmp	r3, #7
 80212da:	dc0a      	bgt.n	80212f2 <__gethex+0x15e>
 80212dc:	9803      	ldr	r0, [sp, #12]
 80212de:	f000 fb19 	bl	8021914 <_Balloc>
 80212e2:	1e05      	subs	r5, r0, #0
 80212e4:	d108      	bne.n	80212f8 <__gethex+0x164>
 80212e6:	002a      	movs	r2, r5
 80212e8:	21e4      	movs	r1, #228	@ 0xe4
 80212ea:	4b5f      	ldr	r3, [pc, #380]	@ (8021468 <__gethex+0x2d4>)
 80212ec:	485f      	ldr	r0, [pc, #380]	@ (802146c <__gethex+0x2d8>)
 80212ee:	f001 fbf1 	bl	8022ad4 <__assert_func>
 80212f2:	3101      	adds	r1, #1
 80212f4:	105b      	asrs	r3, r3, #1
 80212f6:	e7ef      	b.n	80212d8 <__gethex+0x144>
 80212f8:	0003      	movs	r3, r0
 80212fa:	3314      	adds	r3, #20
 80212fc:	9302      	str	r3, [sp, #8]
 80212fe:	9305      	str	r3, [sp, #20]
 8021300:	2300      	movs	r3, #0
 8021302:	001e      	movs	r6, r3
 8021304:	9304      	str	r3, [sp, #16]
 8021306:	9b00      	ldr	r3, [sp, #0]
 8021308:	42a3      	cmp	r3, r4
 802130a:	d338      	bcc.n	802137e <__gethex+0x1ea>
 802130c:	9c05      	ldr	r4, [sp, #20]
 802130e:	9b02      	ldr	r3, [sp, #8]
 8021310:	c440      	stmia	r4!, {r6}
 8021312:	1ae4      	subs	r4, r4, r3
 8021314:	10a4      	asrs	r4, r4, #2
 8021316:	0030      	movs	r0, r6
 8021318:	612c      	str	r4, [r5, #16]
 802131a:	f000 fbf3 	bl	8021b04 <__hi0bits>
 802131e:	9b01      	ldr	r3, [sp, #4]
 8021320:	0164      	lsls	r4, r4, #5
 8021322:	681b      	ldr	r3, [r3, #0]
 8021324:	1a26      	subs	r6, r4, r0
 8021326:	9300      	str	r3, [sp, #0]
 8021328:	429e      	cmp	r6, r3
 802132a:	dd52      	ble.n	80213d2 <__gethex+0x23e>
 802132c:	1af6      	subs	r6, r6, r3
 802132e:	0031      	movs	r1, r6
 8021330:	0028      	movs	r0, r5
 8021332:	f000 ff96 	bl	8022262 <__any_on>
 8021336:	1e04      	subs	r4, r0, #0
 8021338:	d00f      	beq.n	802135a <__gethex+0x1c6>
 802133a:	2401      	movs	r4, #1
 802133c:	231f      	movs	r3, #31
 802133e:	0020      	movs	r0, r4
 8021340:	1e72      	subs	r2, r6, #1
 8021342:	4013      	ands	r3, r2
 8021344:	4098      	lsls	r0, r3
 8021346:	0003      	movs	r3, r0
 8021348:	1151      	asrs	r1, r2, #5
 802134a:	9802      	ldr	r0, [sp, #8]
 802134c:	0089      	lsls	r1, r1, #2
 802134e:	5809      	ldr	r1, [r1, r0]
 8021350:	4219      	tst	r1, r3
 8021352:	d002      	beq.n	802135a <__gethex+0x1c6>
 8021354:	42a2      	cmp	r2, r4
 8021356:	dc34      	bgt.n	80213c2 <__gethex+0x22e>
 8021358:	2402      	movs	r4, #2
 802135a:	0031      	movs	r1, r6
 802135c:	0028      	movs	r0, r5
 802135e:	f7ff feb1 	bl	80210c4 <rshift>
 8021362:	19bf      	adds	r7, r7, r6
 8021364:	9b01      	ldr	r3, [sp, #4]
 8021366:	689b      	ldr	r3, [r3, #8]
 8021368:	42bb      	cmp	r3, r7
 802136a:	da42      	bge.n	80213f2 <__gethex+0x25e>
 802136c:	0029      	movs	r1, r5
 802136e:	9803      	ldr	r0, [sp, #12]
 8021370:	f000 fb14 	bl	802199c <_Bfree>
 8021374:	2300      	movs	r3, #0
 8021376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021378:	26a3      	movs	r6, #163	@ 0xa3
 802137a:	6013      	str	r3, [r2, #0]
 802137c:	e794      	b.n	80212a8 <__gethex+0x114>
 802137e:	3c01      	subs	r4, #1
 8021380:	7823      	ldrb	r3, [r4, #0]
 8021382:	2b2e      	cmp	r3, #46	@ 0x2e
 8021384:	d012      	beq.n	80213ac <__gethex+0x218>
 8021386:	9b04      	ldr	r3, [sp, #16]
 8021388:	2b20      	cmp	r3, #32
 802138a:	d104      	bne.n	8021396 <__gethex+0x202>
 802138c:	9b05      	ldr	r3, [sp, #20]
 802138e:	c340      	stmia	r3!, {r6}
 8021390:	2600      	movs	r6, #0
 8021392:	9305      	str	r3, [sp, #20]
 8021394:	9604      	str	r6, [sp, #16]
 8021396:	7820      	ldrb	r0, [r4, #0]
 8021398:	f7ff fee7 	bl	802116a <__hexdig_fun>
 802139c:	230f      	movs	r3, #15
 802139e:	4018      	ands	r0, r3
 80213a0:	9b04      	ldr	r3, [sp, #16]
 80213a2:	4098      	lsls	r0, r3
 80213a4:	3304      	adds	r3, #4
 80213a6:	4306      	orrs	r6, r0
 80213a8:	9304      	str	r3, [sp, #16]
 80213aa:	e7ac      	b.n	8021306 <__gethex+0x172>
 80213ac:	9b00      	ldr	r3, [sp, #0]
 80213ae:	42a3      	cmp	r3, r4
 80213b0:	d8e9      	bhi.n	8021386 <__gethex+0x1f2>
 80213b2:	2201      	movs	r2, #1
 80213b4:	0020      	movs	r0, r4
 80213b6:	492b      	ldr	r1, [pc, #172]	@ (8021464 <__gethex+0x2d0>)
 80213b8:	f7fe fee2 	bl	8020180 <strncmp>
 80213bc:	2800      	cmp	r0, #0
 80213be:	d1e2      	bne.n	8021386 <__gethex+0x1f2>
 80213c0:	e7a1      	b.n	8021306 <__gethex+0x172>
 80213c2:	0028      	movs	r0, r5
 80213c4:	1eb1      	subs	r1, r6, #2
 80213c6:	f000 ff4c 	bl	8022262 <__any_on>
 80213ca:	2800      	cmp	r0, #0
 80213cc:	d0c4      	beq.n	8021358 <__gethex+0x1c4>
 80213ce:	2403      	movs	r4, #3
 80213d0:	e7c3      	b.n	802135a <__gethex+0x1c6>
 80213d2:	9b00      	ldr	r3, [sp, #0]
 80213d4:	2400      	movs	r4, #0
 80213d6:	429e      	cmp	r6, r3
 80213d8:	dac4      	bge.n	8021364 <__gethex+0x1d0>
 80213da:	1b9e      	subs	r6, r3, r6
 80213dc:	0029      	movs	r1, r5
 80213de:	0032      	movs	r2, r6
 80213e0:	9803      	ldr	r0, [sp, #12]
 80213e2:	f000 fd05 	bl	8021df0 <__lshift>
 80213e6:	0003      	movs	r3, r0
 80213e8:	3314      	adds	r3, #20
 80213ea:	0005      	movs	r5, r0
 80213ec:	1bbf      	subs	r7, r7, r6
 80213ee:	9302      	str	r3, [sp, #8]
 80213f0:	e7b8      	b.n	8021364 <__gethex+0x1d0>
 80213f2:	9b01      	ldr	r3, [sp, #4]
 80213f4:	685e      	ldr	r6, [r3, #4]
 80213f6:	42be      	cmp	r6, r7
 80213f8:	dd6f      	ble.n	80214da <__gethex+0x346>
 80213fa:	9b00      	ldr	r3, [sp, #0]
 80213fc:	1bf6      	subs	r6, r6, r7
 80213fe:	42b3      	cmp	r3, r6
 8021400:	dc36      	bgt.n	8021470 <__gethex+0x2dc>
 8021402:	9b01      	ldr	r3, [sp, #4]
 8021404:	68db      	ldr	r3, [r3, #12]
 8021406:	2b02      	cmp	r3, #2
 8021408:	d024      	beq.n	8021454 <__gethex+0x2c0>
 802140a:	2b03      	cmp	r3, #3
 802140c:	d026      	beq.n	802145c <__gethex+0x2c8>
 802140e:	2b01      	cmp	r3, #1
 8021410:	d117      	bne.n	8021442 <__gethex+0x2ae>
 8021412:	9b00      	ldr	r3, [sp, #0]
 8021414:	42b3      	cmp	r3, r6
 8021416:	d114      	bne.n	8021442 <__gethex+0x2ae>
 8021418:	2b01      	cmp	r3, #1
 802141a:	d10b      	bne.n	8021434 <__gethex+0x2a0>
 802141c:	9b01      	ldr	r3, [sp, #4]
 802141e:	9a07      	ldr	r2, [sp, #28]
 8021420:	685b      	ldr	r3, [r3, #4]
 8021422:	2662      	movs	r6, #98	@ 0x62
 8021424:	6013      	str	r3, [r2, #0]
 8021426:	2301      	movs	r3, #1
 8021428:	9a02      	ldr	r2, [sp, #8]
 802142a:	612b      	str	r3, [r5, #16]
 802142c:	6013      	str	r3, [r2, #0]
 802142e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021430:	601d      	str	r5, [r3, #0]
 8021432:	e739      	b.n	80212a8 <__gethex+0x114>
 8021434:	9900      	ldr	r1, [sp, #0]
 8021436:	0028      	movs	r0, r5
 8021438:	3901      	subs	r1, #1
 802143a:	f000 ff12 	bl	8022262 <__any_on>
 802143e:	2800      	cmp	r0, #0
 8021440:	d1ec      	bne.n	802141c <__gethex+0x288>
 8021442:	0029      	movs	r1, r5
 8021444:	9803      	ldr	r0, [sp, #12]
 8021446:	f000 faa9 	bl	802199c <_Bfree>
 802144a:	2300      	movs	r3, #0
 802144c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802144e:	2650      	movs	r6, #80	@ 0x50
 8021450:	6013      	str	r3, [r2, #0]
 8021452:	e729      	b.n	80212a8 <__gethex+0x114>
 8021454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021456:	2b00      	cmp	r3, #0
 8021458:	d1f3      	bne.n	8021442 <__gethex+0x2ae>
 802145a:	e7df      	b.n	802141c <__gethex+0x288>
 802145c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802145e:	2b00      	cmp	r3, #0
 8021460:	d1dc      	bne.n	802141c <__gethex+0x288>
 8021462:	e7ee      	b.n	8021442 <__gethex+0x2ae>
 8021464:	08025b08 	.word	0x08025b08
 8021468:	08025d19 	.word	0x08025d19
 802146c:	08025d2a 	.word	0x08025d2a
 8021470:	1e77      	subs	r7, r6, #1
 8021472:	2c00      	cmp	r4, #0
 8021474:	d12f      	bne.n	80214d6 <__gethex+0x342>
 8021476:	2f00      	cmp	r7, #0
 8021478:	d004      	beq.n	8021484 <__gethex+0x2f0>
 802147a:	0039      	movs	r1, r7
 802147c:	0028      	movs	r0, r5
 802147e:	f000 fef0 	bl	8022262 <__any_on>
 8021482:	0004      	movs	r4, r0
 8021484:	231f      	movs	r3, #31
 8021486:	117a      	asrs	r2, r7, #5
 8021488:	401f      	ands	r7, r3
 802148a:	3b1e      	subs	r3, #30
 802148c:	40bb      	lsls	r3, r7
 802148e:	9902      	ldr	r1, [sp, #8]
 8021490:	0092      	lsls	r2, r2, #2
 8021492:	5852      	ldr	r2, [r2, r1]
 8021494:	421a      	tst	r2, r3
 8021496:	d001      	beq.n	802149c <__gethex+0x308>
 8021498:	2302      	movs	r3, #2
 802149a:	431c      	orrs	r4, r3
 802149c:	9b00      	ldr	r3, [sp, #0]
 802149e:	0031      	movs	r1, r6
 80214a0:	1b9b      	subs	r3, r3, r6
 80214a2:	2602      	movs	r6, #2
 80214a4:	0028      	movs	r0, r5
 80214a6:	9300      	str	r3, [sp, #0]
 80214a8:	f7ff fe0c 	bl	80210c4 <rshift>
 80214ac:	9b01      	ldr	r3, [sp, #4]
 80214ae:	685f      	ldr	r7, [r3, #4]
 80214b0:	2c00      	cmp	r4, #0
 80214b2:	d03f      	beq.n	8021534 <__gethex+0x3a0>
 80214b4:	9b01      	ldr	r3, [sp, #4]
 80214b6:	68db      	ldr	r3, [r3, #12]
 80214b8:	2b02      	cmp	r3, #2
 80214ba:	d010      	beq.n	80214de <__gethex+0x34a>
 80214bc:	2b03      	cmp	r3, #3
 80214be:	d012      	beq.n	80214e6 <__gethex+0x352>
 80214c0:	2b01      	cmp	r3, #1
 80214c2:	d106      	bne.n	80214d2 <__gethex+0x33e>
 80214c4:	07a2      	lsls	r2, r4, #30
 80214c6:	d504      	bpl.n	80214d2 <__gethex+0x33e>
 80214c8:	9a02      	ldr	r2, [sp, #8]
 80214ca:	6812      	ldr	r2, [r2, #0]
 80214cc:	4314      	orrs	r4, r2
 80214ce:	421c      	tst	r4, r3
 80214d0:	d10c      	bne.n	80214ec <__gethex+0x358>
 80214d2:	2310      	movs	r3, #16
 80214d4:	e02d      	b.n	8021532 <__gethex+0x39e>
 80214d6:	2401      	movs	r4, #1
 80214d8:	e7d4      	b.n	8021484 <__gethex+0x2f0>
 80214da:	2601      	movs	r6, #1
 80214dc:	e7e8      	b.n	80214b0 <__gethex+0x31c>
 80214de:	2301      	movs	r3, #1
 80214e0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80214e2:	1a9b      	subs	r3, r3, r2
 80214e4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80214e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80214e8:	2b00      	cmp	r3, #0
 80214ea:	d0f2      	beq.n	80214d2 <__gethex+0x33e>
 80214ec:	692b      	ldr	r3, [r5, #16]
 80214ee:	2000      	movs	r0, #0
 80214f0:	9302      	str	r3, [sp, #8]
 80214f2:	009b      	lsls	r3, r3, #2
 80214f4:	9304      	str	r3, [sp, #16]
 80214f6:	002b      	movs	r3, r5
 80214f8:	9a04      	ldr	r2, [sp, #16]
 80214fa:	3314      	adds	r3, #20
 80214fc:	1899      	adds	r1, r3, r2
 80214fe:	681a      	ldr	r2, [r3, #0]
 8021500:	1c54      	adds	r4, r2, #1
 8021502:	d01c      	beq.n	802153e <__gethex+0x3aa>
 8021504:	3201      	adds	r2, #1
 8021506:	601a      	str	r2, [r3, #0]
 8021508:	002b      	movs	r3, r5
 802150a:	3314      	adds	r3, #20
 802150c:	2e02      	cmp	r6, #2
 802150e:	d13f      	bne.n	8021590 <__gethex+0x3fc>
 8021510:	9a01      	ldr	r2, [sp, #4]
 8021512:	9900      	ldr	r1, [sp, #0]
 8021514:	6812      	ldr	r2, [r2, #0]
 8021516:	3a01      	subs	r2, #1
 8021518:	428a      	cmp	r2, r1
 802151a:	d109      	bne.n	8021530 <__gethex+0x39c>
 802151c:	000a      	movs	r2, r1
 802151e:	201f      	movs	r0, #31
 8021520:	4010      	ands	r0, r2
 8021522:	2201      	movs	r2, #1
 8021524:	4082      	lsls	r2, r0
 8021526:	1149      	asrs	r1, r1, #5
 8021528:	0089      	lsls	r1, r1, #2
 802152a:	58cb      	ldr	r3, [r1, r3]
 802152c:	4213      	tst	r3, r2
 802152e:	d13d      	bne.n	80215ac <__gethex+0x418>
 8021530:	2320      	movs	r3, #32
 8021532:	431e      	orrs	r6, r3
 8021534:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021536:	601d      	str	r5, [r3, #0]
 8021538:	9b07      	ldr	r3, [sp, #28]
 802153a:	601f      	str	r7, [r3, #0]
 802153c:	e6b4      	b.n	80212a8 <__gethex+0x114>
 802153e:	c301      	stmia	r3!, {r0}
 8021540:	4299      	cmp	r1, r3
 8021542:	d8dc      	bhi.n	80214fe <__gethex+0x36a>
 8021544:	68ab      	ldr	r3, [r5, #8]
 8021546:	9a02      	ldr	r2, [sp, #8]
 8021548:	429a      	cmp	r2, r3
 802154a:	db18      	blt.n	802157e <__gethex+0x3ea>
 802154c:	6869      	ldr	r1, [r5, #4]
 802154e:	9803      	ldr	r0, [sp, #12]
 8021550:	3101      	adds	r1, #1
 8021552:	f000 f9df 	bl	8021914 <_Balloc>
 8021556:	1e04      	subs	r4, r0, #0
 8021558:	d104      	bne.n	8021564 <__gethex+0x3d0>
 802155a:	0022      	movs	r2, r4
 802155c:	2184      	movs	r1, #132	@ 0x84
 802155e:	4b1d      	ldr	r3, [pc, #116]	@ (80215d4 <__gethex+0x440>)
 8021560:	481d      	ldr	r0, [pc, #116]	@ (80215d8 <__gethex+0x444>)
 8021562:	e6c4      	b.n	80212ee <__gethex+0x15a>
 8021564:	0029      	movs	r1, r5
 8021566:	692a      	ldr	r2, [r5, #16]
 8021568:	310c      	adds	r1, #12
 802156a:	3202      	adds	r2, #2
 802156c:	0092      	lsls	r2, r2, #2
 802156e:	300c      	adds	r0, #12
 8021570:	f7fe fecc 	bl	802030c <memcpy>
 8021574:	0029      	movs	r1, r5
 8021576:	9803      	ldr	r0, [sp, #12]
 8021578:	f000 fa10 	bl	802199c <_Bfree>
 802157c:	0025      	movs	r5, r4
 802157e:	692b      	ldr	r3, [r5, #16]
 8021580:	1c5a      	adds	r2, r3, #1
 8021582:	612a      	str	r2, [r5, #16]
 8021584:	2201      	movs	r2, #1
 8021586:	3304      	adds	r3, #4
 8021588:	009b      	lsls	r3, r3, #2
 802158a:	18eb      	adds	r3, r5, r3
 802158c:	605a      	str	r2, [r3, #4]
 802158e:	e7bb      	b.n	8021508 <__gethex+0x374>
 8021590:	692a      	ldr	r2, [r5, #16]
 8021592:	9902      	ldr	r1, [sp, #8]
 8021594:	428a      	cmp	r2, r1
 8021596:	dd0b      	ble.n	80215b0 <__gethex+0x41c>
 8021598:	2101      	movs	r1, #1
 802159a:	0028      	movs	r0, r5
 802159c:	f7ff fd92 	bl	80210c4 <rshift>
 80215a0:	9b01      	ldr	r3, [sp, #4]
 80215a2:	3701      	adds	r7, #1
 80215a4:	689b      	ldr	r3, [r3, #8]
 80215a6:	42bb      	cmp	r3, r7
 80215a8:	da00      	bge.n	80215ac <__gethex+0x418>
 80215aa:	e6df      	b.n	802136c <__gethex+0x1d8>
 80215ac:	2601      	movs	r6, #1
 80215ae:	e7bf      	b.n	8021530 <__gethex+0x39c>
 80215b0:	221f      	movs	r2, #31
 80215b2:	9c00      	ldr	r4, [sp, #0]
 80215b4:	9900      	ldr	r1, [sp, #0]
 80215b6:	4014      	ands	r4, r2
 80215b8:	4211      	tst	r1, r2
 80215ba:	d0f7      	beq.n	80215ac <__gethex+0x418>
 80215bc:	9a04      	ldr	r2, [sp, #16]
 80215be:	189b      	adds	r3, r3, r2
 80215c0:	3b04      	subs	r3, #4
 80215c2:	6818      	ldr	r0, [r3, #0]
 80215c4:	f000 fa9e 	bl	8021b04 <__hi0bits>
 80215c8:	2320      	movs	r3, #32
 80215ca:	1b1b      	subs	r3, r3, r4
 80215cc:	4298      	cmp	r0, r3
 80215ce:	dbe3      	blt.n	8021598 <__gethex+0x404>
 80215d0:	e7ec      	b.n	80215ac <__gethex+0x418>
 80215d2:	46c0      	nop			@ (mov r8, r8)
 80215d4:	08025d19 	.word	0x08025d19
 80215d8:	08025d2a 	.word	0x08025d2a

080215dc <L_shift>:
 80215dc:	2308      	movs	r3, #8
 80215de:	b570      	push	{r4, r5, r6, lr}
 80215e0:	2520      	movs	r5, #32
 80215e2:	1a9a      	subs	r2, r3, r2
 80215e4:	0092      	lsls	r2, r2, #2
 80215e6:	1aad      	subs	r5, r5, r2
 80215e8:	6843      	ldr	r3, [r0, #4]
 80215ea:	6804      	ldr	r4, [r0, #0]
 80215ec:	001e      	movs	r6, r3
 80215ee:	40ae      	lsls	r6, r5
 80215f0:	40d3      	lsrs	r3, r2
 80215f2:	4334      	orrs	r4, r6
 80215f4:	6004      	str	r4, [r0, #0]
 80215f6:	6043      	str	r3, [r0, #4]
 80215f8:	3004      	adds	r0, #4
 80215fa:	4288      	cmp	r0, r1
 80215fc:	d3f4      	bcc.n	80215e8 <L_shift+0xc>
 80215fe:	bd70      	pop	{r4, r5, r6, pc}

08021600 <__match>:
 8021600:	b530      	push	{r4, r5, lr}
 8021602:	6803      	ldr	r3, [r0, #0]
 8021604:	780c      	ldrb	r4, [r1, #0]
 8021606:	3301      	adds	r3, #1
 8021608:	2c00      	cmp	r4, #0
 802160a:	d102      	bne.n	8021612 <__match+0x12>
 802160c:	6003      	str	r3, [r0, #0]
 802160e:	2001      	movs	r0, #1
 8021610:	bd30      	pop	{r4, r5, pc}
 8021612:	781a      	ldrb	r2, [r3, #0]
 8021614:	0015      	movs	r5, r2
 8021616:	3d41      	subs	r5, #65	@ 0x41
 8021618:	2d19      	cmp	r5, #25
 802161a:	d800      	bhi.n	802161e <__match+0x1e>
 802161c:	3220      	adds	r2, #32
 802161e:	3101      	adds	r1, #1
 8021620:	42a2      	cmp	r2, r4
 8021622:	d0ef      	beq.n	8021604 <__match+0x4>
 8021624:	2000      	movs	r0, #0
 8021626:	e7f3      	b.n	8021610 <__match+0x10>

08021628 <__hexnan>:
 8021628:	b5f0      	push	{r4, r5, r6, r7, lr}
 802162a:	680b      	ldr	r3, [r1, #0]
 802162c:	b08b      	sub	sp, #44	@ 0x2c
 802162e:	9201      	str	r2, [sp, #4]
 8021630:	9901      	ldr	r1, [sp, #4]
 8021632:	115a      	asrs	r2, r3, #5
 8021634:	0092      	lsls	r2, r2, #2
 8021636:	188a      	adds	r2, r1, r2
 8021638:	9202      	str	r2, [sp, #8]
 802163a:	0019      	movs	r1, r3
 802163c:	221f      	movs	r2, #31
 802163e:	4011      	ands	r1, r2
 8021640:	9008      	str	r0, [sp, #32]
 8021642:	9106      	str	r1, [sp, #24]
 8021644:	4213      	tst	r3, r2
 8021646:	d002      	beq.n	802164e <__hexnan+0x26>
 8021648:	9b02      	ldr	r3, [sp, #8]
 802164a:	3304      	adds	r3, #4
 802164c:	9302      	str	r3, [sp, #8]
 802164e:	9b02      	ldr	r3, [sp, #8]
 8021650:	2500      	movs	r5, #0
 8021652:	1f1f      	subs	r7, r3, #4
 8021654:	003e      	movs	r6, r7
 8021656:	003c      	movs	r4, r7
 8021658:	9b08      	ldr	r3, [sp, #32]
 802165a:	603d      	str	r5, [r7, #0]
 802165c:	681b      	ldr	r3, [r3, #0]
 802165e:	9507      	str	r5, [sp, #28]
 8021660:	9305      	str	r3, [sp, #20]
 8021662:	9503      	str	r5, [sp, #12]
 8021664:	9b05      	ldr	r3, [sp, #20]
 8021666:	3301      	adds	r3, #1
 8021668:	9309      	str	r3, [sp, #36]	@ 0x24
 802166a:	9b05      	ldr	r3, [sp, #20]
 802166c:	785b      	ldrb	r3, [r3, #1]
 802166e:	9304      	str	r3, [sp, #16]
 8021670:	2b00      	cmp	r3, #0
 8021672:	d028      	beq.n	80216c6 <__hexnan+0x9e>
 8021674:	9804      	ldr	r0, [sp, #16]
 8021676:	f7ff fd78 	bl	802116a <__hexdig_fun>
 802167a:	2800      	cmp	r0, #0
 802167c:	d155      	bne.n	802172a <__hexnan+0x102>
 802167e:	9b04      	ldr	r3, [sp, #16]
 8021680:	2b20      	cmp	r3, #32
 8021682:	d819      	bhi.n	80216b8 <__hexnan+0x90>
 8021684:	9b03      	ldr	r3, [sp, #12]
 8021686:	9a07      	ldr	r2, [sp, #28]
 8021688:	4293      	cmp	r3, r2
 802168a:	dd12      	ble.n	80216b2 <__hexnan+0x8a>
 802168c:	42b4      	cmp	r4, r6
 802168e:	d206      	bcs.n	802169e <__hexnan+0x76>
 8021690:	2d07      	cmp	r5, #7
 8021692:	dc04      	bgt.n	802169e <__hexnan+0x76>
 8021694:	002a      	movs	r2, r5
 8021696:	0031      	movs	r1, r6
 8021698:	0020      	movs	r0, r4
 802169a:	f7ff ff9f 	bl	80215dc <L_shift>
 802169e:	9b01      	ldr	r3, [sp, #4]
 80216a0:	2508      	movs	r5, #8
 80216a2:	429c      	cmp	r4, r3
 80216a4:	d905      	bls.n	80216b2 <__hexnan+0x8a>
 80216a6:	1f26      	subs	r6, r4, #4
 80216a8:	2500      	movs	r5, #0
 80216aa:	0034      	movs	r4, r6
 80216ac:	9b03      	ldr	r3, [sp, #12]
 80216ae:	6035      	str	r5, [r6, #0]
 80216b0:	9307      	str	r3, [sp, #28]
 80216b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80216b4:	9305      	str	r3, [sp, #20]
 80216b6:	e7d5      	b.n	8021664 <__hexnan+0x3c>
 80216b8:	9b04      	ldr	r3, [sp, #16]
 80216ba:	2b29      	cmp	r3, #41	@ 0x29
 80216bc:	d15a      	bne.n	8021774 <__hexnan+0x14c>
 80216be:	9b05      	ldr	r3, [sp, #20]
 80216c0:	9a08      	ldr	r2, [sp, #32]
 80216c2:	3302      	adds	r3, #2
 80216c4:	6013      	str	r3, [r2, #0]
 80216c6:	9b03      	ldr	r3, [sp, #12]
 80216c8:	2b00      	cmp	r3, #0
 80216ca:	d053      	beq.n	8021774 <__hexnan+0x14c>
 80216cc:	42b4      	cmp	r4, r6
 80216ce:	d206      	bcs.n	80216de <__hexnan+0xb6>
 80216d0:	2d07      	cmp	r5, #7
 80216d2:	dc04      	bgt.n	80216de <__hexnan+0xb6>
 80216d4:	002a      	movs	r2, r5
 80216d6:	0031      	movs	r1, r6
 80216d8:	0020      	movs	r0, r4
 80216da:	f7ff ff7f 	bl	80215dc <L_shift>
 80216de:	9b01      	ldr	r3, [sp, #4]
 80216e0:	429c      	cmp	r4, r3
 80216e2:	d936      	bls.n	8021752 <__hexnan+0x12a>
 80216e4:	001a      	movs	r2, r3
 80216e6:	0023      	movs	r3, r4
 80216e8:	cb02      	ldmia	r3!, {r1}
 80216ea:	c202      	stmia	r2!, {r1}
 80216ec:	429f      	cmp	r7, r3
 80216ee:	d2fb      	bcs.n	80216e8 <__hexnan+0xc0>
 80216f0:	9b02      	ldr	r3, [sp, #8]
 80216f2:	1c61      	adds	r1, r4, #1
 80216f4:	1eda      	subs	r2, r3, #3
 80216f6:	2304      	movs	r3, #4
 80216f8:	4291      	cmp	r1, r2
 80216fa:	d805      	bhi.n	8021708 <__hexnan+0xe0>
 80216fc:	9b02      	ldr	r3, [sp, #8]
 80216fe:	3b04      	subs	r3, #4
 8021700:	1b1b      	subs	r3, r3, r4
 8021702:	089b      	lsrs	r3, r3, #2
 8021704:	3301      	adds	r3, #1
 8021706:	009b      	lsls	r3, r3, #2
 8021708:	9a01      	ldr	r2, [sp, #4]
 802170a:	18d3      	adds	r3, r2, r3
 802170c:	2200      	movs	r2, #0
 802170e:	c304      	stmia	r3!, {r2}
 8021710:	429f      	cmp	r7, r3
 8021712:	d2fc      	bcs.n	802170e <__hexnan+0xe6>
 8021714:	683b      	ldr	r3, [r7, #0]
 8021716:	2b00      	cmp	r3, #0
 8021718:	d104      	bne.n	8021724 <__hexnan+0xfc>
 802171a:	9b01      	ldr	r3, [sp, #4]
 802171c:	429f      	cmp	r7, r3
 802171e:	d127      	bne.n	8021770 <__hexnan+0x148>
 8021720:	2301      	movs	r3, #1
 8021722:	603b      	str	r3, [r7, #0]
 8021724:	2005      	movs	r0, #5
 8021726:	b00b      	add	sp, #44	@ 0x2c
 8021728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802172a:	9b03      	ldr	r3, [sp, #12]
 802172c:	3501      	adds	r5, #1
 802172e:	3301      	adds	r3, #1
 8021730:	9303      	str	r3, [sp, #12]
 8021732:	2d08      	cmp	r5, #8
 8021734:	dd06      	ble.n	8021744 <__hexnan+0x11c>
 8021736:	9b01      	ldr	r3, [sp, #4]
 8021738:	429c      	cmp	r4, r3
 802173a:	d9ba      	bls.n	80216b2 <__hexnan+0x8a>
 802173c:	2300      	movs	r3, #0
 802173e:	2501      	movs	r5, #1
 8021740:	3c04      	subs	r4, #4
 8021742:	6023      	str	r3, [r4, #0]
 8021744:	220f      	movs	r2, #15
 8021746:	6823      	ldr	r3, [r4, #0]
 8021748:	4010      	ands	r0, r2
 802174a:	011b      	lsls	r3, r3, #4
 802174c:	4303      	orrs	r3, r0
 802174e:	6023      	str	r3, [r4, #0]
 8021750:	e7af      	b.n	80216b2 <__hexnan+0x8a>
 8021752:	9b06      	ldr	r3, [sp, #24]
 8021754:	2b00      	cmp	r3, #0
 8021756:	d0dd      	beq.n	8021714 <__hexnan+0xec>
 8021758:	2320      	movs	r3, #32
 802175a:	9a06      	ldr	r2, [sp, #24]
 802175c:	9902      	ldr	r1, [sp, #8]
 802175e:	1a9b      	subs	r3, r3, r2
 8021760:	2201      	movs	r2, #1
 8021762:	4252      	negs	r2, r2
 8021764:	40da      	lsrs	r2, r3
 8021766:	3904      	subs	r1, #4
 8021768:	680b      	ldr	r3, [r1, #0]
 802176a:	4013      	ands	r3, r2
 802176c:	600b      	str	r3, [r1, #0]
 802176e:	e7d1      	b.n	8021714 <__hexnan+0xec>
 8021770:	3f04      	subs	r7, #4
 8021772:	e7cf      	b.n	8021714 <__hexnan+0xec>
 8021774:	2004      	movs	r0, #4
 8021776:	e7d6      	b.n	8021726 <__hexnan+0xfe>

08021778 <malloc>:
 8021778:	b510      	push	{r4, lr}
 802177a:	4b03      	ldr	r3, [pc, #12]	@ (8021788 <malloc+0x10>)
 802177c:	0001      	movs	r1, r0
 802177e:	6818      	ldr	r0, [r3, #0]
 8021780:	f000 f826 	bl	80217d0 <_malloc_r>
 8021784:	bd10      	pop	{r4, pc}
 8021786:	46c0      	nop			@ (mov r8, r8)
 8021788:	200003cc 	.word	0x200003cc

0802178c <sbrk_aligned>:
 802178c:	b570      	push	{r4, r5, r6, lr}
 802178e:	4e0f      	ldr	r6, [pc, #60]	@ (80217cc <sbrk_aligned+0x40>)
 8021790:	000d      	movs	r5, r1
 8021792:	6831      	ldr	r1, [r6, #0]
 8021794:	0004      	movs	r4, r0
 8021796:	2900      	cmp	r1, #0
 8021798:	d102      	bne.n	80217a0 <sbrk_aligned+0x14>
 802179a:	f001 f989 	bl	8022ab0 <_sbrk_r>
 802179e:	6030      	str	r0, [r6, #0]
 80217a0:	0029      	movs	r1, r5
 80217a2:	0020      	movs	r0, r4
 80217a4:	f001 f984 	bl	8022ab0 <_sbrk_r>
 80217a8:	1c43      	adds	r3, r0, #1
 80217aa:	d103      	bne.n	80217b4 <sbrk_aligned+0x28>
 80217ac:	2501      	movs	r5, #1
 80217ae:	426d      	negs	r5, r5
 80217b0:	0028      	movs	r0, r5
 80217b2:	bd70      	pop	{r4, r5, r6, pc}
 80217b4:	2303      	movs	r3, #3
 80217b6:	1cc5      	adds	r5, r0, #3
 80217b8:	439d      	bics	r5, r3
 80217ba:	42a8      	cmp	r0, r5
 80217bc:	d0f8      	beq.n	80217b0 <sbrk_aligned+0x24>
 80217be:	1a29      	subs	r1, r5, r0
 80217c0:	0020      	movs	r0, r4
 80217c2:	f001 f975 	bl	8022ab0 <_sbrk_r>
 80217c6:	3001      	adds	r0, #1
 80217c8:	d1f2      	bne.n	80217b0 <sbrk_aligned+0x24>
 80217ca:	e7ef      	b.n	80217ac <sbrk_aligned+0x20>
 80217cc:	200039a4 	.word	0x200039a4

080217d0 <_malloc_r>:
 80217d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80217d2:	2203      	movs	r2, #3
 80217d4:	1ccb      	adds	r3, r1, #3
 80217d6:	4393      	bics	r3, r2
 80217d8:	3308      	adds	r3, #8
 80217da:	0005      	movs	r5, r0
 80217dc:	001f      	movs	r7, r3
 80217de:	2b0c      	cmp	r3, #12
 80217e0:	d234      	bcs.n	802184c <_malloc_r+0x7c>
 80217e2:	270c      	movs	r7, #12
 80217e4:	42b9      	cmp	r1, r7
 80217e6:	d833      	bhi.n	8021850 <_malloc_r+0x80>
 80217e8:	0028      	movs	r0, r5
 80217ea:	f000 f883 	bl	80218f4 <__malloc_lock>
 80217ee:	4e37      	ldr	r6, [pc, #220]	@ (80218cc <_malloc_r+0xfc>)
 80217f0:	6833      	ldr	r3, [r6, #0]
 80217f2:	001c      	movs	r4, r3
 80217f4:	2c00      	cmp	r4, #0
 80217f6:	d12f      	bne.n	8021858 <_malloc_r+0x88>
 80217f8:	0039      	movs	r1, r7
 80217fa:	0028      	movs	r0, r5
 80217fc:	f7ff ffc6 	bl	802178c <sbrk_aligned>
 8021800:	0004      	movs	r4, r0
 8021802:	1c43      	adds	r3, r0, #1
 8021804:	d15f      	bne.n	80218c6 <_malloc_r+0xf6>
 8021806:	6834      	ldr	r4, [r6, #0]
 8021808:	9400      	str	r4, [sp, #0]
 802180a:	9b00      	ldr	r3, [sp, #0]
 802180c:	2b00      	cmp	r3, #0
 802180e:	d14a      	bne.n	80218a6 <_malloc_r+0xd6>
 8021810:	2c00      	cmp	r4, #0
 8021812:	d052      	beq.n	80218ba <_malloc_r+0xea>
 8021814:	6823      	ldr	r3, [r4, #0]
 8021816:	0028      	movs	r0, r5
 8021818:	18e3      	adds	r3, r4, r3
 802181a:	9900      	ldr	r1, [sp, #0]
 802181c:	9301      	str	r3, [sp, #4]
 802181e:	f001 f947 	bl	8022ab0 <_sbrk_r>
 8021822:	9b01      	ldr	r3, [sp, #4]
 8021824:	4283      	cmp	r3, r0
 8021826:	d148      	bne.n	80218ba <_malloc_r+0xea>
 8021828:	6823      	ldr	r3, [r4, #0]
 802182a:	0028      	movs	r0, r5
 802182c:	1aff      	subs	r7, r7, r3
 802182e:	0039      	movs	r1, r7
 8021830:	f7ff ffac 	bl	802178c <sbrk_aligned>
 8021834:	3001      	adds	r0, #1
 8021836:	d040      	beq.n	80218ba <_malloc_r+0xea>
 8021838:	6823      	ldr	r3, [r4, #0]
 802183a:	19db      	adds	r3, r3, r7
 802183c:	6023      	str	r3, [r4, #0]
 802183e:	6833      	ldr	r3, [r6, #0]
 8021840:	685a      	ldr	r2, [r3, #4]
 8021842:	2a00      	cmp	r2, #0
 8021844:	d133      	bne.n	80218ae <_malloc_r+0xde>
 8021846:	9b00      	ldr	r3, [sp, #0]
 8021848:	6033      	str	r3, [r6, #0]
 802184a:	e019      	b.n	8021880 <_malloc_r+0xb0>
 802184c:	2b00      	cmp	r3, #0
 802184e:	dac9      	bge.n	80217e4 <_malloc_r+0x14>
 8021850:	230c      	movs	r3, #12
 8021852:	602b      	str	r3, [r5, #0]
 8021854:	2000      	movs	r0, #0
 8021856:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021858:	6821      	ldr	r1, [r4, #0]
 802185a:	1bc9      	subs	r1, r1, r7
 802185c:	d420      	bmi.n	80218a0 <_malloc_r+0xd0>
 802185e:	290b      	cmp	r1, #11
 8021860:	d90a      	bls.n	8021878 <_malloc_r+0xa8>
 8021862:	19e2      	adds	r2, r4, r7
 8021864:	6027      	str	r7, [r4, #0]
 8021866:	42a3      	cmp	r3, r4
 8021868:	d104      	bne.n	8021874 <_malloc_r+0xa4>
 802186a:	6032      	str	r2, [r6, #0]
 802186c:	6863      	ldr	r3, [r4, #4]
 802186e:	6011      	str	r1, [r2, #0]
 8021870:	6053      	str	r3, [r2, #4]
 8021872:	e005      	b.n	8021880 <_malloc_r+0xb0>
 8021874:	605a      	str	r2, [r3, #4]
 8021876:	e7f9      	b.n	802186c <_malloc_r+0x9c>
 8021878:	6862      	ldr	r2, [r4, #4]
 802187a:	42a3      	cmp	r3, r4
 802187c:	d10e      	bne.n	802189c <_malloc_r+0xcc>
 802187e:	6032      	str	r2, [r6, #0]
 8021880:	0028      	movs	r0, r5
 8021882:	f000 f83f 	bl	8021904 <__malloc_unlock>
 8021886:	0020      	movs	r0, r4
 8021888:	2207      	movs	r2, #7
 802188a:	300b      	adds	r0, #11
 802188c:	1d23      	adds	r3, r4, #4
 802188e:	4390      	bics	r0, r2
 8021890:	1ac2      	subs	r2, r0, r3
 8021892:	4298      	cmp	r0, r3
 8021894:	d0df      	beq.n	8021856 <_malloc_r+0x86>
 8021896:	1a1b      	subs	r3, r3, r0
 8021898:	50a3      	str	r3, [r4, r2]
 802189a:	e7dc      	b.n	8021856 <_malloc_r+0x86>
 802189c:	605a      	str	r2, [r3, #4]
 802189e:	e7ef      	b.n	8021880 <_malloc_r+0xb0>
 80218a0:	0023      	movs	r3, r4
 80218a2:	6864      	ldr	r4, [r4, #4]
 80218a4:	e7a6      	b.n	80217f4 <_malloc_r+0x24>
 80218a6:	9c00      	ldr	r4, [sp, #0]
 80218a8:	6863      	ldr	r3, [r4, #4]
 80218aa:	9300      	str	r3, [sp, #0]
 80218ac:	e7ad      	b.n	802180a <_malloc_r+0x3a>
 80218ae:	001a      	movs	r2, r3
 80218b0:	685b      	ldr	r3, [r3, #4]
 80218b2:	42a3      	cmp	r3, r4
 80218b4:	d1fb      	bne.n	80218ae <_malloc_r+0xde>
 80218b6:	2300      	movs	r3, #0
 80218b8:	e7da      	b.n	8021870 <_malloc_r+0xa0>
 80218ba:	230c      	movs	r3, #12
 80218bc:	0028      	movs	r0, r5
 80218be:	602b      	str	r3, [r5, #0]
 80218c0:	f000 f820 	bl	8021904 <__malloc_unlock>
 80218c4:	e7c6      	b.n	8021854 <_malloc_r+0x84>
 80218c6:	6007      	str	r7, [r0, #0]
 80218c8:	e7da      	b.n	8021880 <_malloc_r+0xb0>
 80218ca:	46c0      	nop			@ (mov r8, r8)
 80218cc:	200039a8 	.word	0x200039a8

080218d0 <__ascii_mbtowc>:
 80218d0:	b082      	sub	sp, #8
 80218d2:	2900      	cmp	r1, #0
 80218d4:	d100      	bne.n	80218d8 <__ascii_mbtowc+0x8>
 80218d6:	a901      	add	r1, sp, #4
 80218d8:	1e10      	subs	r0, r2, #0
 80218da:	d006      	beq.n	80218ea <__ascii_mbtowc+0x1a>
 80218dc:	2b00      	cmp	r3, #0
 80218de:	d006      	beq.n	80218ee <__ascii_mbtowc+0x1e>
 80218e0:	7813      	ldrb	r3, [r2, #0]
 80218e2:	600b      	str	r3, [r1, #0]
 80218e4:	7810      	ldrb	r0, [r2, #0]
 80218e6:	1e43      	subs	r3, r0, #1
 80218e8:	4198      	sbcs	r0, r3
 80218ea:	b002      	add	sp, #8
 80218ec:	4770      	bx	lr
 80218ee:	2002      	movs	r0, #2
 80218f0:	4240      	negs	r0, r0
 80218f2:	e7fa      	b.n	80218ea <__ascii_mbtowc+0x1a>

080218f4 <__malloc_lock>:
 80218f4:	b510      	push	{r4, lr}
 80218f6:	4802      	ldr	r0, [pc, #8]	@ (8021900 <__malloc_lock+0xc>)
 80218f8:	f7fe fcfb 	bl	80202f2 <__retarget_lock_acquire_recursive>
 80218fc:	bd10      	pop	{r4, pc}
 80218fe:	46c0      	nop			@ (mov r8, r8)
 8021900:	200039a0 	.word	0x200039a0

08021904 <__malloc_unlock>:
 8021904:	b510      	push	{r4, lr}
 8021906:	4802      	ldr	r0, [pc, #8]	@ (8021910 <__malloc_unlock+0xc>)
 8021908:	f7fe fcf4 	bl	80202f4 <__retarget_lock_release_recursive>
 802190c:	bd10      	pop	{r4, pc}
 802190e:	46c0      	nop			@ (mov r8, r8)
 8021910:	200039a0 	.word	0x200039a0

08021914 <_Balloc>:
 8021914:	b570      	push	{r4, r5, r6, lr}
 8021916:	69c5      	ldr	r5, [r0, #28]
 8021918:	0006      	movs	r6, r0
 802191a:	000c      	movs	r4, r1
 802191c:	2d00      	cmp	r5, #0
 802191e:	d10e      	bne.n	802193e <_Balloc+0x2a>
 8021920:	2010      	movs	r0, #16
 8021922:	f7ff ff29 	bl	8021778 <malloc>
 8021926:	1e02      	subs	r2, r0, #0
 8021928:	61f0      	str	r0, [r6, #28]
 802192a:	d104      	bne.n	8021936 <_Balloc+0x22>
 802192c:	216b      	movs	r1, #107	@ 0x6b
 802192e:	4b19      	ldr	r3, [pc, #100]	@ (8021994 <_Balloc+0x80>)
 8021930:	4819      	ldr	r0, [pc, #100]	@ (8021998 <_Balloc+0x84>)
 8021932:	f001 f8cf 	bl	8022ad4 <__assert_func>
 8021936:	6045      	str	r5, [r0, #4]
 8021938:	6085      	str	r5, [r0, #8]
 802193a:	6005      	str	r5, [r0, #0]
 802193c:	60c5      	str	r5, [r0, #12]
 802193e:	69f5      	ldr	r5, [r6, #28]
 8021940:	68eb      	ldr	r3, [r5, #12]
 8021942:	2b00      	cmp	r3, #0
 8021944:	d013      	beq.n	802196e <_Balloc+0x5a>
 8021946:	69f3      	ldr	r3, [r6, #28]
 8021948:	00a2      	lsls	r2, r4, #2
 802194a:	68db      	ldr	r3, [r3, #12]
 802194c:	189b      	adds	r3, r3, r2
 802194e:	6818      	ldr	r0, [r3, #0]
 8021950:	2800      	cmp	r0, #0
 8021952:	d118      	bne.n	8021986 <_Balloc+0x72>
 8021954:	2101      	movs	r1, #1
 8021956:	000d      	movs	r5, r1
 8021958:	40a5      	lsls	r5, r4
 802195a:	1d6a      	adds	r2, r5, #5
 802195c:	0030      	movs	r0, r6
 802195e:	0092      	lsls	r2, r2, #2
 8021960:	f001 f8d6 	bl	8022b10 <_calloc_r>
 8021964:	2800      	cmp	r0, #0
 8021966:	d00c      	beq.n	8021982 <_Balloc+0x6e>
 8021968:	6044      	str	r4, [r0, #4]
 802196a:	6085      	str	r5, [r0, #8]
 802196c:	e00d      	b.n	802198a <_Balloc+0x76>
 802196e:	2221      	movs	r2, #33	@ 0x21
 8021970:	2104      	movs	r1, #4
 8021972:	0030      	movs	r0, r6
 8021974:	f001 f8cc 	bl	8022b10 <_calloc_r>
 8021978:	69f3      	ldr	r3, [r6, #28]
 802197a:	60e8      	str	r0, [r5, #12]
 802197c:	68db      	ldr	r3, [r3, #12]
 802197e:	2b00      	cmp	r3, #0
 8021980:	d1e1      	bne.n	8021946 <_Balloc+0x32>
 8021982:	2000      	movs	r0, #0
 8021984:	bd70      	pop	{r4, r5, r6, pc}
 8021986:	6802      	ldr	r2, [r0, #0]
 8021988:	601a      	str	r2, [r3, #0]
 802198a:	2300      	movs	r3, #0
 802198c:	6103      	str	r3, [r0, #16]
 802198e:	60c3      	str	r3, [r0, #12]
 8021990:	e7f8      	b.n	8021984 <_Balloc+0x70>
 8021992:	46c0      	nop			@ (mov r8, r8)
 8021994:	08025caa 	.word	0x08025caa
 8021998:	08025d8a 	.word	0x08025d8a

0802199c <_Bfree>:
 802199c:	b570      	push	{r4, r5, r6, lr}
 802199e:	69c6      	ldr	r6, [r0, #28]
 80219a0:	0005      	movs	r5, r0
 80219a2:	000c      	movs	r4, r1
 80219a4:	2e00      	cmp	r6, #0
 80219a6:	d10e      	bne.n	80219c6 <_Bfree+0x2a>
 80219a8:	2010      	movs	r0, #16
 80219aa:	f7ff fee5 	bl	8021778 <malloc>
 80219ae:	1e02      	subs	r2, r0, #0
 80219b0:	61e8      	str	r0, [r5, #28]
 80219b2:	d104      	bne.n	80219be <_Bfree+0x22>
 80219b4:	218f      	movs	r1, #143	@ 0x8f
 80219b6:	4b09      	ldr	r3, [pc, #36]	@ (80219dc <_Bfree+0x40>)
 80219b8:	4809      	ldr	r0, [pc, #36]	@ (80219e0 <_Bfree+0x44>)
 80219ba:	f001 f88b 	bl	8022ad4 <__assert_func>
 80219be:	6046      	str	r6, [r0, #4]
 80219c0:	6086      	str	r6, [r0, #8]
 80219c2:	6006      	str	r6, [r0, #0]
 80219c4:	60c6      	str	r6, [r0, #12]
 80219c6:	2c00      	cmp	r4, #0
 80219c8:	d007      	beq.n	80219da <_Bfree+0x3e>
 80219ca:	69eb      	ldr	r3, [r5, #28]
 80219cc:	6862      	ldr	r2, [r4, #4]
 80219ce:	68db      	ldr	r3, [r3, #12]
 80219d0:	0092      	lsls	r2, r2, #2
 80219d2:	189b      	adds	r3, r3, r2
 80219d4:	681a      	ldr	r2, [r3, #0]
 80219d6:	6022      	str	r2, [r4, #0]
 80219d8:	601c      	str	r4, [r3, #0]
 80219da:	bd70      	pop	{r4, r5, r6, pc}
 80219dc:	08025caa 	.word	0x08025caa
 80219e0:	08025d8a 	.word	0x08025d8a

080219e4 <__multadd>:
 80219e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80219e6:	000f      	movs	r7, r1
 80219e8:	9001      	str	r0, [sp, #4]
 80219ea:	000c      	movs	r4, r1
 80219ec:	001e      	movs	r6, r3
 80219ee:	2000      	movs	r0, #0
 80219f0:	690d      	ldr	r5, [r1, #16]
 80219f2:	3714      	adds	r7, #20
 80219f4:	683b      	ldr	r3, [r7, #0]
 80219f6:	3001      	adds	r0, #1
 80219f8:	b299      	uxth	r1, r3
 80219fa:	4351      	muls	r1, r2
 80219fc:	0c1b      	lsrs	r3, r3, #16
 80219fe:	4353      	muls	r3, r2
 8021a00:	1989      	adds	r1, r1, r6
 8021a02:	0c0e      	lsrs	r6, r1, #16
 8021a04:	199b      	adds	r3, r3, r6
 8021a06:	0c1e      	lsrs	r6, r3, #16
 8021a08:	b289      	uxth	r1, r1
 8021a0a:	041b      	lsls	r3, r3, #16
 8021a0c:	185b      	adds	r3, r3, r1
 8021a0e:	c708      	stmia	r7!, {r3}
 8021a10:	4285      	cmp	r5, r0
 8021a12:	dcef      	bgt.n	80219f4 <__multadd+0x10>
 8021a14:	2e00      	cmp	r6, #0
 8021a16:	d022      	beq.n	8021a5e <__multadd+0x7a>
 8021a18:	68a3      	ldr	r3, [r4, #8]
 8021a1a:	42ab      	cmp	r3, r5
 8021a1c:	dc19      	bgt.n	8021a52 <__multadd+0x6e>
 8021a1e:	6861      	ldr	r1, [r4, #4]
 8021a20:	9801      	ldr	r0, [sp, #4]
 8021a22:	3101      	adds	r1, #1
 8021a24:	f7ff ff76 	bl	8021914 <_Balloc>
 8021a28:	1e07      	subs	r7, r0, #0
 8021a2a:	d105      	bne.n	8021a38 <__multadd+0x54>
 8021a2c:	003a      	movs	r2, r7
 8021a2e:	21ba      	movs	r1, #186	@ 0xba
 8021a30:	4b0c      	ldr	r3, [pc, #48]	@ (8021a64 <__multadd+0x80>)
 8021a32:	480d      	ldr	r0, [pc, #52]	@ (8021a68 <__multadd+0x84>)
 8021a34:	f001 f84e 	bl	8022ad4 <__assert_func>
 8021a38:	0021      	movs	r1, r4
 8021a3a:	6922      	ldr	r2, [r4, #16]
 8021a3c:	310c      	adds	r1, #12
 8021a3e:	3202      	adds	r2, #2
 8021a40:	0092      	lsls	r2, r2, #2
 8021a42:	300c      	adds	r0, #12
 8021a44:	f7fe fc62 	bl	802030c <memcpy>
 8021a48:	0021      	movs	r1, r4
 8021a4a:	9801      	ldr	r0, [sp, #4]
 8021a4c:	f7ff ffa6 	bl	802199c <_Bfree>
 8021a50:	003c      	movs	r4, r7
 8021a52:	1d2b      	adds	r3, r5, #4
 8021a54:	009b      	lsls	r3, r3, #2
 8021a56:	18e3      	adds	r3, r4, r3
 8021a58:	3501      	adds	r5, #1
 8021a5a:	605e      	str	r6, [r3, #4]
 8021a5c:	6125      	str	r5, [r4, #16]
 8021a5e:	0020      	movs	r0, r4
 8021a60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021a62:	46c0      	nop			@ (mov r8, r8)
 8021a64:	08025d19 	.word	0x08025d19
 8021a68:	08025d8a 	.word	0x08025d8a

08021a6c <__s2b>:
 8021a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021a6e:	0007      	movs	r7, r0
 8021a70:	0018      	movs	r0, r3
 8021a72:	000c      	movs	r4, r1
 8021a74:	3008      	adds	r0, #8
 8021a76:	2109      	movs	r1, #9
 8021a78:	9301      	str	r3, [sp, #4]
 8021a7a:	0015      	movs	r5, r2
 8021a7c:	f7de fc1c 	bl	80002b8 <__divsi3>
 8021a80:	2301      	movs	r3, #1
 8021a82:	2100      	movs	r1, #0
 8021a84:	4283      	cmp	r3, r0
 8021a86:	db0a      	blt.n	8021a9e <__s2b+0x32>
 8021a88:	0038      	movs	r0, r7
 8021a8a:	f7ff ff43 	bl	8021914 <_Balloc>
 8021a8e:	1e01      	subs	r1, r0, #0
 8021a90:	d108      	bne.n	8021aa4 <__s2b+0x38>
 8021a92:	000a      	movs	r2, r1
 8021a94:	4b19      	ldr	r3, [pc, #100]	@ (8021afc <__s2b+0x90>)
 8021a96:	481a      	ldr	r0, [pc, #104]	@ (8021b00 <__s2b+0x94>)
 8021a98:	31d3      	adds	r1, #211	@ 0xd3
 8021a9a:	f001 f81b 	bl	8022ad4 <__assert_func>
 8021a9e:	005b      	lsls	r3, r3, #1
 8021aa0:	3101      	adds	r1, #1
 8021aa2:	e7ef      	b.n	8021a84 <__s2b+0x18>
 8021aa4:	9b08      	ldr	r3, [sp, #32]
 8021aa6:	6143      	str	r3, [r0, #20]
 8021aa8:	2301      	movs	r3, #1
 8021aaa:	6103      	str	r3, [r0, #16]
 8021aac:	2d09      	cmp	r5, #9
 8021aae:	dd18      	ble.n	8021ae2 <__s2b+0x76>
 8021ab0:	0023      	movs	r3, r4
 8021ab2:	3309      	adds	r3, #9
 8021ab4:	001e      	movs	r6, r3
 8021ab6:	9300      	str	r3, [sp, #0]
 8021ab8:	1964      	adds	r4, r4, r5
 8021aba:	7833      	ldrb	r3, [r6, #0]
 8021abc:	220a      	movs	r2, #10
 8021abe:	0038      	movs	r0, r7
 8021ac0:	3b30      	subs	r3, #48	@ 0x30
 8021ac2:	f7ff ff8f 	bl	80219e4 <__multadd>
 8021ac6:	3601      	adds	r6, #1
 8021ac8:	0001      	movs	r1, r0
 8021aca:	42a6      	cmp	r6, r4
 8021acc:	d1f5      	bne.n	8021aba <__s2b+0x4e>
 8021ace:	002c      	movs	r4, r5
 8021ad0:	9b00      	ldr	r3, [sp, #0]
 8021ad2:	3c08      	subs	r4, #8
 8021ad4:	191c      	adds	r4, r3, r4
 8021ad6:	002e      	movs	r6, r5
 8021ad8:	9b01      	ldr	r3, [sp, #4]
 8021ada:	429e      	cmp	r6, r3
 8021adc:	db04      	blt.n	8021ae8 <__s2b+0x7c>
 8021ade:	0008      	movs	r0, r1
 8021ae0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021ae2:	2509      	movs	r5, #9
 8021ae4:	340a      	adds	r4, #10
 8021ae6:	e7f6      	b.n	8021ad6 <__s2b+0x6a>
 8021ae8:	1b63      	subs	r3, r4, r5
 8021aea:	5d9b      	ldrb	r3, [r3, r6]
 8021aec:	220a      	movs	r2, #10
 8021aee:	0038      	movs	r0, r7
 8021af0:	3b30      	subs	r3, #48	@ 0x30
 8021af2:	f7ff ff77 	bl	80219e4 <__multadd>
 8021af6:	3601      	adds	r6, #1
 8021af8:	0001      	movs	r1, r0
 8021afa:	e7ed      	b.n	8021ad8 <__s2b+0x6c>
 8021afc:	08025d19 	.word	0x08025d19
 8021b00:	08025d8a 	.word	0x08025d8a

08021b04 <__hi0bits>:
 8021b04:	2280      	movs	r2, #128	@ 0x80
 8021b06:	0003      	movs	r3, r0
 8021b08:	0252      	lsls	r2, r2, #9
 8021b0a:	2000      	movs	r0, #0
 8021b0c:	4293      	cmp	r3, r2
 8021b0e:	d201      	bcs.n	8021b14 <__hi0bits+0x10>
 8021b10:	041b      	lsls	r3, r3, #16
 8021b12:	3010      	adds	r0, #16
 8021b14:	2280      	movs	r2, #128	@ 0x80
 8021b16:	0452      	lsls	r2, r2, #17
 8021b18:	4293      	cmp	r3, r2
 8021b1a:	d201      	bcs.n	8021b20 <__hi0bits+0x1c>
 8021b1c:	3008      	adds	r0, #8
 8021b1e:	021b      	lsls	r3, r3, #8
 8021b20:	2280      	movs	r2, #128	@ 0x80
 8021b22:	0552      	lsls	r2, r2, #21
 8021b24:	4293      	cmp	r3, r2
 8021b26:	d201      	bcs.n	8021b2c <__hi0bits+0x28>
 8021b28:	3004      	adds	r0, #4
 8021b2a:	011b      	lsls	r3, r3, #4
 8021b2c:	2280      	movs	r2, #128	@ 0x80
 8021b2e:	05d2      	lsls	r2, r2, #23
 8021b30:	4293      	cmp	r3, r2
 8021b32:	d201      	bcs.n	8021b38 <__hi0bits+0x34>
 8021b34:	3002      	adds	r0, #2
 8021b36:	009b      	lsls	r3, r3, #2
 8021b38:	2b00      	cmp	r3, #0
 8021b3a:	db03      	blt.n	8021b44 <__hi0bits+0x40>
 8021b3c:	3001      	adds	r0, #1
 8021b3e:	4213      	tst	r3, r2
 8021b40:	d100      	bne.n	8021b44 <__hi0bits+0x40>
 8021b42:	2020      	movs	r0, #32
 8021b44:	4770      	bx	lr

08021b46 <__lo0bits>:
 8021b46:	6803      	ldr	r3, [r0, #0]
 8021b48:	0001      	movs	r1, r0
 8021b4a:	2207      	movs	r2, #7
 8021b4c:	0018      	movs	r0, r3
 8021b4e:	4010      	ands	r0, r2
 8021b50:	4213      	tst	r3, r2
 8021b52:	d00d      	beq.n	8021b70 <__lo0bits+0x2a>
 8021b54:	3a06      	subs	r2, #6
 8021b56:	2000      	movs	r0, #0
 8021b58:	4213      	tst	r3, r2
 8021b5a:	d105      	bne.n	8021b68 <__lo0bits+0x22>
 8021b5c:	3002      	adds	r0, #2
 8021b5e:	4203      	tst	r3, r0
 8021b60:	d003      	beq.n	8021b6a <__lo0bits+0x24>
 8021b62:	40d3      	lsrs	r3, r2
 8021b64:	0010      	movs	r0, r2
 8021b66:	600b      	str	r3, [r1, #0]
 8021b68:	4770      	bx	lr
 8021b6a:	089b      	lsrs	r3, r3, #2
 8021b6c:	600b      	str	r3, [r1, #0]
 8021b6e:	e7fb      	b.n	8021b68 <__lo0bits+0x22>
 8021b70:	b29a      	uxth	r2, r3
 8021b72:	2a00      	cmp	r2, #0
 8021b74:	d101      	bne.n	8021b7a <__lo0bits+0x34>
 8021b76:	2010      	movs	r0, #16
 8021b78:	0c1b      	lsrs	r3, r3, #16
 8021b7a:	b2da      	uxtb	r2, r3
 8021b7c:	2a00      	cmp	r2, #0
 8021b7e:	d101      	bne.n	8021b84 <__lo0bits+0x3e>
 8021b80:	3008      	adds	r0, #8
 8021b82:	0a1b      	lsrs	r3, r3, #8
 8021b84:	071a      	lsls	r2, r3, #28
 8021b86:	d101      	bne.n	8021b8c <__lo0bits+0x46>
 8021b88:	3004      	adds	r0, #4
 8021b8a:	091b      	lsrs	r3, r3, #4
 8021b8c:	079a      	lsls	r2, r3, #30
 8021b8e:	d101      	bne.n	8021b94 <__lo0bits+0x4e>
 8021b90:	3002      	adds	r0, #2
 8021b92:	089b      	lsrs	r3, r3, #2
 8021b94:	07da      	lsls	r2, r3, #31
 8021b96:	d4e9      	bmi.n	8021b6c <__lo0bits+0x26>
 8021b98:	3001      	adds	r0, #1
 8021b9a:	085b      	lsrs	r3, r3, #1
 8021b9c:	d1e6      	bne.n	8021b6c <__lo0bits+0x26>
 8021b9e:	2020      	movs	r0, #32
 8021ba0:	e7e2      	b.n	8021b68 <__lo0bits+0x22>
	...

08021ba4 <__i2b>:
 8021ba4:	b510      	push	{r4, lr}
 8021ba6:	000c      	movs	r4, r1
 8021ba8:	2101      	movs	r1, #1
 8021baa:	f7ff feb3 	bl	8021914 <_Balloc>
 8021bae:	2800      	cmp	r0, #0
 8021bb0:	d107      	bne.n	8021bc2 <__i2b+0x1e>
 8021bb2:	2146      	movs	r1, #70	@ 0x46
 8021bb4:	4c05      	ldr	r4, [pc, #20]	@ (8021bcc <__i2b+0x28>)
 8021bb6:	0002      	movs	r2, r0
 8021bb8:	4b05      	ldr	r3, [pc, #20]	@ (8021bd0 <__i2b+0x2c>)
 8021bba:	0020      	movs	r0, r4
 8021bbc:	31ff      	adds	r1, #255	@ 0xff
 8021bbe:	f000 ff89 	bl	8022ad4 <__assert_func>
 8021bc2:	2301      	movs	r3, #1
 8021bc4:	6144      	str	r4, [r0, #20]
 8021bc6:	6103      	str	r3, [r0, #16]
 8021bc8:	bd10      	pop	{r4, pc}
 8021bca:	46c0      	nop			@ (mov r8, r8)
 8021bcc:	08025d8a 	.word	0x08025d8a
 8021bd0:	08025d19 	.word	0x08025d19

08021bd4 <__multiply>:
 8021bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021bd6:	0014      	movs	r4, r2
 8021bd8:	690a      	ldr	r2, [r1, #16]
 8021bda:	6923      	ldr	r3, [r4, #16]
 8021bdc:	000d      	movs	r5, r1
 8021bde:	b08b      	sub	sp, #44	@ 0x2c
 8021be0:	429a      	cmp	r2, r3
 8021be2:	db02      	blt.n	8021bea <__multiply+0x16>
 8021be4:	0023      	movs	r3, r4
 8021be6:	000c      	movs	r4, r1
 8021be8:	001d      	movs	r5, r3
 8021bea:	6927      	ldr	r7, [r4, #16]
 8021bec:	692e      	ldr	r6, [r5, #16]
 8021bee:	6861      	ldr	r1, [r4, #4]
 8021bf0:	19bb      	adds	r3, r7, r6
 8021bf2:	9303      	str	r3, [sp, #12]
 8021bf4:	68a3      	ldr	r3, [r4, #8]
 8021bf6:	19ba      	adds	r2, r7, r6
 8021bf8:	4293      	cmp	r3, r2
 8021bfa:	da00      	bge.n	8021bfe <__multiply+0x2a>
 8021bfc:	3101      	adds	r1, #1
 8021bfe:	f7ff fe89 	bl	8021914 <_Balloc>
 8021c02:	9002      	str	r0, [sp, #8]
 8021c04:	2800      	cmp	r0, #0
 8021c06:	d106      	bne.n	8021c16 <__multiply+0x42>
 8021c08:	21b1      	movs	r1, #177	@ 0xb1
 8021c0a:	4b49      	ldr	r3, [pc, #292]	@ (8021d30 <__multiply+0x15c>)
 8021c0c:	4849      	ldr	r0, [pc, #292]	@ (8021d34 <__multiply+0x160>)
 8021c0e:	9a02      	ldr	r2, [sp, #8]
 8021c10:	0049      	lsls	r1, r1, #1
 8021c12:	f000 ff5f 	bl	8022ad4 <__assert_func>
 8021c16:	9b02      	ldr	r3, [sp, #8]
 8021c18:	2200      	movs	r2, #0
 8021c1a:	3314      	adds	r3, #20
 8021c1c:	469c      	mov	ip, r3
 8021c1e:	19bb      	adds	r3, r7, r6
 8021c20:	009b      	lsls	r3, r3, #2
 8021c22:	4463      	add	r3, ip
 8021c24:	9304      	str	r3, [sp, #16]
 8021c26:	4663      	mov	r3, ip
 8021c28:	9904      	ldr	r1, [sp, #16]
 8021c2a:	428b      	cmp	r3, r1
 8021c2c:	d32a      	bcc.n	8021c84 <__multiply+0xb0>
 8021c2e:	0023      	movs	r3, r4
 8021c30:	00bf      	lsls	r7, r7, #2
 8021c32:	3314      	adds	r3, #20
 8021c34:	3514      	adds	r5, #20
 8021c36:	9308      	str	r3, [sp, #32]
 8021c38:	00b6      	lsls	r6, r6, #2
 8021c3a:	19db      	adds	r3, r3, r7
 8021c3c:	9305      	str	r3, [sp, #20]
 8021c3e:	19ab      	adds	r3, r5, r6
 8021c40:	9309      	str	r3, [sp, #36]	@ 0x24
 8021c42:	2304      	movs	r3, #4
 8021c44:	9306      	str	r3, [sp, #24]
 8021c46:	0023      	movs	r3, r4
 8021c48:	9a05      	ldr	r2, [sp, #20]
 8021c4a:	3315      	adds	r3, #21
 8021c4c:	9501      	str	r5, [sp, #4]
 8021c4e:	429a      	cmp	r2, r3
 8021c50:	d305      	bcc.n	8021c5e <__multiply+0x8a>
 8021c52:	1b13      	subs	r3, r2, r4
 8021c54:	3b15      	subs	r3, #21
 8021c56:	089b      	lsrs	r3, r3, #2
 8021c58:	3301      	adds	r3, #1
 8021c5a:	009b      	lsls	r3, r3, #2
 8021c5c:	9306      	str	r3, [sp, #24]
 8021c5e:	9b01      	ldr	r3, [sp, #4]
 8021c60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021c62:	4293      	cmp	r3, r2
 8021c64:	d310      	bcc.n	8021c88 <__multiply+0xb4>
 8021c66:	9b03      	ldr	r3, [sp, #12]
 8021c68:	2b00      	cmp	r3, #0
 8021c6a:	dd05      	ble.n	8021c78 <__multiply+0xa4>
 8021c6c:	9b04      	ldr	r3, [sp, #16]
 8021c6e:	3b04      	subs	r3, #4
 8021c70:	9304      	str	r3, [sp, #16]
 8021c72:	681b      	ldr	r3, [r3, #0]
 8021c74:	2b00      	cmp	r3, #0
 8021c76:	d056      	beq.n	8021d26 <__multiply+0x152>
 8021c78:	9b02      	ldr	r3, [sp, #8]
 8021c7a:	9a03      	ldr	r2, [sp, #12]
 8021c7c:	0018      	movs	r0, r3
 8021c7e:	611a      	str	r2, [r3, #16]
 8021c80:	b00b      	add	sp, #44	@ 0x2c
 8021c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021c84:	c304      	stmia	r3!, {r2}
 8021c86:	e7cf      	b.n	8021c28 <__multiply+0x54>
 8021c88:	9b01      	ldr	r3, [sp, #4]
 8021c8a:	6818      	ldr	r0, [r3, #0]
 8021c8c:	b280      	uxth	r0, r0
 8021c8e:	2800      	cmp	r0, #0
 8021c90:	d01e      	beq.n	8021cd0 <__multiply+0xfc>
 8021c92:	4667      	mov	r7, ip
 8021c94:	2500      	movs	r5, #0
 8021c96:	9e08      	ldr	r6, [sp, #32]
 8021c98:	ce02      	ldmia	r6!, {r1}
 8021c9a:	683b      	ldr	r3, [r7, #0]
 8021c9c:	9307      	str	r3, [sp, #28]
 8021c9e:	b28b      	uxth	r3, r1
 8021ca0:	4343      	muls	r3, r0
 8021ca2:	001a      	movs	r2, r3
 8021ca4:	466b      	mov	r3, sp
 8021ca6:	0c09      	lsrs	r1, r1, #16
 8021ca8:	8b9b      	ldrh	r3, [r3, #28]
 8021caa:	4341      	muls	r1, r0
 8021cac:	18d3      	adds	r3, r2, r3
 8021cae:	9a07      	ldr	r2, [sp, #28]
 8021cb0:	195b      	adds	r3, r3, r5
 8021cb2:	0c12      	lsrs	r2, r2, #16
 8021cb4:	1889      	adds	r1, r1, r2
 8021cb6:	0c1a      	lsrs	r2, r3, #16
 8021cb8:	188a      	adds	r2, r1, r2
 8021cba:	b29b      	uxth	r3, r3
 8021cbc:	0c15      	lsrs	r5, r2, #16
 8021cbe:	0412      	lsls	r2, r2, #16
 8021cc0:	431a      	orrs	r2, r3
 8021cc2:	9b05      	ldr	r3, [sp, #20]
 8021cc4:	c704      	stmia	r7!, {r2}
 8021cc6:	42b3      	cmp	r3, r6
 8021cc8:	d8e6      	bhi.n	8021c98 <__multiply+0xc4>
 8021cca:	4663      	mov	r3, ip
 8021ccc:	9a06      	ldr	r2, [sp, #24]
 8021cce:	509d      	str	r5, [r3, r2]
 8021cd0:	9b01      	ldr	r3, [sp, #4]
 8021cd2:	6818      	ldr	r0, [r3, #0]
 8021cd4:	0c00      	lsrs	r0, r0, #16
 8021cd6:	d020      	beq.n	8021d1a <__multiply+0x146>
 8021cd8:	4663      	mov	r3, ip
 8021cda:	0025      	movs	r5, r4
 8021cdc:	4661      	mov	r1, ip
 8021cde:	2700      	movs	r7, #0
 8021ce0:	681b      	ldr	r3, [r3, #0]
 8021ce2:	3514      	adds	r5, #20
 8021ce4:	682a      	ldr	r2, [r5, #0]
 8021ce6:	680e      	ldr	r6, [r1, #0]
 8021ce8:	b292      	uxth	r2, r2
 8021cea:	4342      	muls	r2, r0
 8021cec:	0c36      	lsrs	r6, r6, #16
 8021cee:	1992      	adds	r2, r2, r6
 8021cf0:	19d2      	adds	r2, r2, r7
 8021cf2:	0416      	lsls	r6, r2, #16
 8021cf4:	b29b      	uxth	r3, r3
 8021cf6:	431e      	orrs	r6, r3
 8021cf8:	600e      	str	r6, [r1, #0]
 8021cfa:	cd40      	ldmia	r5!, {r6}
 8021cfc:	684b      	ldr	r3, [r1, #4]
 8021cfe:	0c36      	lsrs	r6, r6, #16
 8021d00:	4346      	muls	r6, r0
 8021d02:	b29b      	uxth	r3, r3
 8021d04:	0c12      	lsrs	r2, r2, #16
 8021d06:	18f3      	adds	r3, r6, r3
 8021d08:	189b      	adds	r3, r3, r2
 8021d0a:	9a05      	ldr	r2, [sp, #20]
 8021d0c:	0c1f      	lsrs	r7, r3, #16
 8021d0e:	3104      	adds	r1, #4
 8021d10:	42aa      	cmp	r2, r5
 8021d12:	d8e7      	bhi.n	8021ce4 <__multiply+0x110>
 8021d14:	4662      	mov	r2, ip
 8021d16:	9906      	ldr	r1, [sp, #24]
 8021d18:	5053      	str	r3, [r2, r1]
 8021d1a:	9b01      	ldr	r3, [sp, #4]
 8021d1c:	3304      	adds	r3, #4
 8021d1e:	9301      	str	r3, [sp, #4]
 8021d20:	2304      	movs	r3, #4
 8021d22:	449c      	add	ip, r3
 8021d24:	e79b      	b.n	8021c5e <__multiply+0x8a>
 8021d26:	9b03      	ldr	r3, [sp, #12]
 8021d28:	3b01      	subs	r3, #1
 8021d2a:	9303      	str	r3, [sp, #12]
 8021d2c:	e79b      	b.n	8021c66 <__multiply+0x92>
 8021d2e:	46c0      	nop			@ (mov r8, r8)
 8021d30:	08025d19 	.word	0x08025d19
 8021d34:	08025d8a 	.word	0x08025d8a

08021d38 <__pow5mult>:
 8021d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021d3a:	2303      	movs	r3, #3
 8021d3c:	0015      	movs	r5, r2
 8021d3e:	0007      	movs	r7, r0
 8021d40:	000e      	movs	r6, r1
 8021d42:	401a      	ands	r2, r3
 8021d44:	421d      	tst	r5, r3
 8021d46:	d008      	beq.n	8021d5a <__pow5mult+0x22>
 8021d48:	4925      	ldr	r1, [pc, #148]	@ (8021de0 <__pow5mult+0xa8>)
 8021d4a:	3a01      	subs	r2, #1
 8021d4c:	0092      	lsls	r2, r2, #2
 8021d4e:	5852      	ldr	r2, [r2, r1]
 8021d50:	2300      	movs	r3, #0
 8021d52:	0031      	movs	r1, r6
 8021d54:	f7ff fe46 	bl	80219e4 <__multadd>
 8021d58:	0006      	movs	r6, r0
 8021d5a:	10ad      	asrs	r5, r5, #2
 8021d5c:	d03d      	beq.n	8021dda <__pow5mult+0xa2>
 8021d5e:	69fc      	ldr	r4, [r7, #28]
 8021d60:	2c00      	cmp	r4, #0
 8021d62:	d10f      	bne.n	8021d84 <__pow5mult+0x4c>
 8021d64:	2010      	movs	r0, #16
 8021d66:	f7ff fd07 	bl	8021778 <malloc>
 8021d6a:	1e02      	subs	r2, r0, #0
 8021d6c:	61f8      	str	r0, [r7, #28]
 8021d6e:	d105      	bne.n	8021d7c <__pow5mult+0x44>
 8021d70:	21b4      	movs	r1, #180	@ 0xb4
 8021d72:	4b1c      	ldr	r3, [pc, #112]	@ (8021de4 <__pow5mult+0xac>)
 8021d74:	481c      	ldr	r0, [pc, #112]	@ (8021de8 <__pow5mult+0xb0>)
 8021d76:	31ff      	adds	r1, #255	@ 0xff
 8021d78:	f000 feac 	bl	8022ad4 <__assert_func>
 8021d7c:	6044      	str	r4, [r0, #4]
 8021d7e:	6084      	str	r4, [r0, #8]
 8021d80:	6004      	str	r4, [r0, #0]
 8021d82:	60c4      	str	r4, [r0, #12]
 8021d84:	69fb      	ldr	r3, [r7, #28]
 8021d86:	689c      	ldr	r4, [r3, #8]
 8021d88:	9301      	str	r3, [sp, #4]
 8021d8a:	2c00      	cmp	r4, #0
 8021d8c:	d108      	bne.n	8021da0 <__pow5mult+0x68>
 8021d8e:	0038      	movs	r0, r7
 8021d90:	4916      	ldr	r1, [pc, #88]	@ (8021dec <__pow5mult+0xb4>)
 8021d92:	f7ff ff07 	bl	8021ba4 <__i2b>
 8021d96:	9b01      	ldr	r3, [sp, #4]
 8021d98:	0004      	movs	r4, r0
 8021d9a:	6098      	str	r0, [r3, #8]
 8021d9c:	2300      	movs	r3, #0
 8021d9e:	6003      	str	r3, [r0, #0]
 8021da0:	2301      	movs	r3, #1
 8021da2:	421d      	tst	r5, r3
 8021da4:	d00a      	beq.n	8021dbc <__pow5mult+0x84>
 8021da6:	0031      	movs	r1, r6
 8021da8:	0022      	movs	r2, r4
 8021daa:	0038      	movs	r0, r7
 8021dac:	f7ff ff12 	bl	8021bd4 <__multiply>
 8021db0:	0031      	movs	r1, r6
 8021db2:	9001      	str	r0, [sp, #4]
 8021db4:	0038      	movs	r0, r7
 8021db6:	f7ff fdf1 	bl	802199c <_Bfree>
 8021dba:	9e01      	ldr	r6, [sp, #4]
 8021dbc:	106d      	asrs	r5, r5, #1
 8021dbe:	d00c      	beq.n	8021dda <__pow5mult+0xa2>
 8021dc0:	6820      	ldr	r0, [r4, #0]
 8021dc2:	2800      	cmp	r0, #0
 8021dc4:	d107      	bne.n	8021dd6 <__pow5mult+0x9e>
 8021dc6:	0022      	movs	r2, r4
 8021dc8:	0021      	movs	r1, r4
 8021dca:	0038      	movs	r0, r7
 8021dcc:	f7ff ff02 	bl	8021bd4 <__multiply>
 8021dd0:	2300      	movs	r3, #0
 8021dd2:	6020      	str	r0, [r4, #0]
 8021dd4:	6003      	str	r3, [r0, #0]
 8021dd6:	0004      	movs	r4, r0
 8021dd8:	e7e2      	b.n	8021da0 <__pow5mult+0x68>
 8021dda:	0030      	movs	r0, r6
 8021ddc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021dde:	46c0      	nop			@ (mov r8, r8)
 8021de0:	08025de4 	.word	0x08025de4
 8021de4:	08025caa 	.word	0x08025caa
 8021de8:	08025d8a 	.word	0x08025d8a
 8021dec:	00000271 	.word	0x00000271

08021df0 <__lshift>:
 8021df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021df2:	000c      	movs	r4, r1
 8021df4:	0016      	movs	r6, r2
 8021df6:	6923      	ldr	r3, [r4, #16]
 8021df8:	1157      	asrs	r7, r2, #5
 8021dfa:	b085      	sub	sp, #20
 8021dfc:	18fb      	adds	r3, r7, r3
 8021dfe:	9301      	str	r3, [sp, #4]
 8021e00:	3301      	adds	r3, #1
 8021e02:	9300      	str	r3, [sp, #0]
 8021e04:	6849      	ldr	r1, [r1, #4]
 8021e06:	68a3      	ldr	r3, [r4, #8]
 8021e08:	9002      	str	r0, [sp, #8]
 8021e0a:	9a00      	ldr	r2, [sp, #0]
 8021e0c:	4293      	cmp	r3, r2
 8021e0e:	db10      	blt.n	8021e32 <__lshift+0x42>
 8021e10:	9802      	ldr	r0, [sp, #8]
 8021e12:	f7ff fd7f 	bl	8021914 <_Balloc>
 8021e16:	2300      	movs	r3, #0
 8021e18:	0001      	movs	r1, r0
 8021e1a:	0005      	movs	r5, r0
 8021e1c:	001a      	movs	r2, r3
 8021e1e:	3114      	adds	r1, #20
 8021e20:	4298      	cmp	r0, r3
 8021e22:	d10c      	bne.n	8021e3e <__lshift+0x4e>
 8021e24:	21ef      	movs	r1, #239	@ 0xef
 8021e26:	002a      	movs	r2, r5
 8021e28:	4b25      	ldr	r3, [pc, #148]	@ (8021ec0 <__lshift+0xd0>)
 8021e2a:	4826      	ldr	r0, [pc, #152]	@ (8021ec4 <__lshift+0xd4>)
 8021e2c:	0049      	lsls	r1, r1, #1
 8021e2e:	f000 fe51 	bl	8022ad4 <__assert_func>
 8021e32:	3101      	adds	r1, #1
 8021e34:	005b      	lsls	r3, r3, #1
 8021e36:	e7e8      	b.n	8021e0a <__lshift+0x1a>
 8021e38:	0098      	lsls	r0, r3, #2
 8021e3a:	500a      	str	r2, [r1, r0]
 8021e3c:	3301      	adds	r3, #1
 8021e3e:	42bb      	cmp	r3, r7
 8021e40:	dbfa      	blt.n	8021e38 <__lshift+0x48>
 8021e42:	43fb      	mvns	r3, r7
 8021e44:	17db      	asrs	r3, r3, #31
 8021e46:	401f      	ands	r7, r3
 8021e48:	00bf      	lsls	r7, r7, #2
 8021e4a:	0023      	movs	r3, r4
 8021e4c:	201f      	movs	r0, #31
 8021e4e:	19c9      	adds	r1, r1, r7
 8021e50:	0037      	movs	r7, r6
 8021e52:	6922      	ldr	r2, [r4, #16]
 8021e54:	3314      	adds	r3, #20
 8021e56:	0092      	lsls	r2, r2, #2
 8021e58:	189a      	adds	r2, r3, r2
 8021e5a:	4007      	ands	r7, r0
 8021e5c:	4206      	tst	r6, r0
 8021e5e:	d029      	beq.n	8021eb4 <__lshift+0xc4>
 8021e60:	3001      	adds	r0, #1
 8021e62:	1bc0      	subs	r0, r0, r7
 8021e64:	9003      	str	r0, [sp, #12]
 8021e66:	468c      	mov	ip, r1
 8021e68:	2000      	movs	r0, #0
 8021e6a:	681e      	ldr	r6, [r3, #0]
 8021e6c:	40be      	lsls	r6, r7
 8021e6e:	4306      	orrs	r6, r0
 8021e70:	4660      	mov	r0, ip
 8021e72:	c040      	stmia	r0!, {r6}
 8021e74:	4684      	mov	ip, r0
 8021e76:	9e03      	ldr	r6, [sp, #12]
 8021e78:	cb01      	ldmia	r3!, {r0}
 8021e7a:	40f0      	lsrs	r0, r6
 8021e7c:	429a      	cmp	r2, r3
 8021e7e:	d8f4      	bhi.n	8021e6a <__lshift+0x7a>
 8021e80:	0026      	movs	r6, r4
 8021e82:	3615      	adds	r6, #21
 8021e84:	2304      	movs	r3, #4
 8021e86:	42b2      	cmp	r2, r6
 8021e88:	d304      	bcc.n	8021e94 <__lshift+0xa4>
 8021e8a:	1b13      	subs	r3, r2, r4
 8021e8c:	3b15      	subs	r3, #21
 8021e8e:	089b      	lsrs	r3, r3, #2
 8021e90:	3301      	adds	r3, #1
 8021e92:	009b      	lsls	r3, r3, #2
 8021e94:	50c8      	str	r0, [r1, r3]
 8021e96:	2800      	cmp	r0, #0
 8021e98:	d002      	beq.n	8021ea0 <__lshift+0xb0>
 8021e9a:	9b01      	ldr	r3, [sp, #4]
 8021e9c:	3302      	adds	r3, #2
 8021e9e:	9300      	str	r3, [sp, #0]
 8021ea0:	9b00      	ldr	r3, [sp, #0]
 8021ea2:	9802      	ldr	r0, [sp, #8]
 8021ea4:	3b01      	subs	r3, #1
 8021ea6:	0021      	movs	r1, r4
 8021ea8:	612b      	str	r3, [r5, #16]
 8021eaa:	f7ff fd77 	bl	802199c <_Bfree>
 8021eae:	0028      	movs	r0, r5
 8021eb0:	b005      	add	sp, #20
 8021eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021eb4:	cb01      	ldmia	r3!, {r0}
 8021eb6:	c101      	stmia	r1!, {r0}
 8021eb8:	429a      	cmp	r2, r3
 8021eba:	d8fb      	bhi.n	8021eb4 <__lshift+0xc4>
 8021ebc:	e7f0      	b.n	8021ea0 <__lshift+0xb0>
 8021ebe:	46c0      	nop			@ (mov r8, r8)
 8021ec0:	08025d19 	.word	0x08025d19
 8021ec4:	08025d8a 	.word	0x08025d8a

08021ec8 <__mcmp>:
 8021ec8:	b530      	push	{r4, r5, lr}
 8021eca:	690b      	ldr	r3, [r1, #16]
 8021ecc:	6904      	ldr	r4, [r0, #16]
 8021ece:	0002      	movs	r2, r0
 8021ed0:	1ae0      	subs	r0, r4, r3
 8021ed2:	429c      	cmp	r4, r3
 8021ed4:	d10f      	bne.n	8021ef6 <__mcmp+0x2e>
 8021ed6:	3214      	adds	r2, #20
 8021ed8:	009b      	lsls	r3, r3, #2
 8021eda:	3114      	adds	r1, #20
 8021edc:	0014      	movs	r4, r2
 8021ede:	18c9      	adds	r1, r1, r3
 8021ee0:	18d2      	adds	r2, r2, r3
 8021ee2:	3a04      	subs	r2, #4
 8021ee4:	3904      	subs	r1, #4
 8021ee6:	6815      	ldr	r5, [r2, #0]
 8021ee8:	680b      	ldr	r3, [r1, #0]
 8021eea:	429d      	cmp	r5, r3
 8021eec:	d004      	beq.n	8021ef8 <__mcmp+0x30>
 8021eee:	2001      	movs	r0, #1
 8021ef0:	429d      	cmp	r5, r3
 8021ef2:	d200      	bcs.n	8021ef6 <__mcmp+0x2e>
 8021ef4:	3802      	subs	r0, #2
 8021ef6:	bd30      	pop	{r4, r5, pc}
 8021ef8:	4294      	cmp	r4, r2
 8021efa:	d3f2      	bcc.n	8021ee2 <__mcmp+0x1a>
 8021efc:	e7fb      	b.n	8021ef6 <__mcmp+0x2e>
	...

08021f00 <__mdiff>:
 8021f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021f02:	000c      	movs	r4, r1
 8021f04:	b087      	sub	sp, #28
 8021f06:	9000      	str	r0, [sp, #0]
 8021f08:	0011      	movs	r1, r2
 8021f0a:	0020      	movs	r0, r4
 8021f0c:	0017      	movs	r7, r2
 8021f0e:	f7ff ffdb 	bl	8021ec8 <__mcmp>
 8021f12:	1e05      	subs	r5, r0, #0
 8021f14:	d110      	bne.n	8021f38 <__mdiff+0x38>
 8021f16:	0001      	movs	r1, r0
 8021f18:	9800      	ldr	r0, [sp, #0]
 8021f1a:	f7ff fcfb 	bl	8021914 <_Balloc>
 8021f1e:	1e02      	subs	r2, r0, #0
 8021f20:	d104      	bne.n	8021f2c <__mdiff+0x2c>
 8021f22:	4b40      	ldr	r3, [pc, #256]	@ (8022024 <__mdiff+0x124>)
 8021f24:	4840      	ldr	r0, [pc, #256]	@ (8022028 <__mdiff+0x128>)
 8021f26:	4941      	ldr	r1, [pc, #260]	@ (802202c <__mdiff+0x12c>)
 8021f28:	f000 fdd4 	bl	8022ad4 <__assert_func>
 8021f2c:	2301      	movs	r3, #1
 8021f2e:	6145      	str	r5, [r0, #20]
 8021f30:	6103      	str	r3, [r0, #16]
 8021f32:	0010      	movs	r0, r2
 8021f34:	b007      	add	sp, #28
 8021f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021f38:	2600      	movs	r6, #0
 8021f3a:	42b0      	cmp	r0, r6
 8021f3c:	da03      	bge.n	8021f46 <__mdiff+0x46>
 8021f3e:	0023      	movs	r3, r4
 8021f40:	003c      	movs	r4, r7
 8021f42:	001f      	movs	r7, r3
 8021f44:	3601      	adds	r6, #1
 8021f46:	6861      	ldr	r1, [r4, #4]
 8021f48:	9800      	ldr	r0, [sp, #0]
 8021f4a:	f7ff fce3 	bl	8021914 <_Balloc>
 8021f4e:	1e02      	subs	r2, r0, #0
 8021f50:	d103      	bne.n	8021f5a <__mdiff+0x5a>
 8021f52:	4b34      	ldr	r3, [pc, #208]	@ (8022024 <__mdiff+0x124>)
 8021f54:	4834      	ldr	r0, [pc, #208]	@ (8022028 <__mdiff+0x128>)
 8021f56:	4936      	ldr	r1, [pc, #216]	@ (8022030 <__mdiff+0x130>)
 8021f58:	e7e6      	b.n	8021f28 <__mdiff+0x28>
 8021f5a:	6923      	ldr	r3, [r4, #16]
 8021f5c:	3414      	adds	r4, #20
 8021f5e:	9300      	str	r3, [sp, #0]
 8021f60:	009b      	lsls	r3, r3, #2
 8021f62:	18e3      	adds	r3, r4, r3
 8021f64:	0021      	movs	r1, r4
 8021f66:	9401      	str	r4, [sp, #4]
 8021f68:	003c      	movs	r4, r7
 8021f6a:	9302      	str	r3, [sp, #8]
 8021f6c:	693b      	ldr	r3, [r7, #16]
 8021f6e:	3414      	adds	r4, #20
 8021f70:	009b      	lsls	r3, r3, #2
 8021f72:	18e3      	adds	r3, r4, r3
 8021f74:	9303      	str	r3, [sp, #12]
 8021f76:	0003      	movs	r3, r0
 8021f78:	60c6      	str	r6, [r0, #12]
 8021f7a:	468c      	mov	ip, r1
 8021f7c:	2000      	movs	r0, #0
 8021f7e:	3314      	adds	r3, #20
 8021f80:	9304      	str	r3, [sp, #16]
 8021f82:	9305      	str	r3, [sp, #20]
 8021f84:	4663      	mov	r3, ip
 8021f86:	cb20      	ldmia	r3!, {r5}
 8021f88:	b2a9      	uxth	r1, r5
 8021f8a:	000e      	movs	r6, r1
 8021f8c:	469c      	mov	ip, r3
 8021f8e:	cc08      	ldmia	r4!, {r3}
 8021f90:	0c2d      	lsrs	r5, r5, #16
 8021f92:	b299      	uxth	r1, r3
 8021f94:	1a71      	subs	r1, r6, r1
 8021f96:	1809      	adds	r1, r1, r0
 8021f98:	0c1b      	lsrs	r3, r3, #16
 8021f9a:	1408      	asrs	r0, r1, #16
 8021f9c:	1aeb      	subs	r3, r5, r3
 8021f9e:	181b      	adds	r3, r3, r0
 8021fa0:	1418      	asrs	r0, r3, #16
 8021fa2:	b289      	uxth	r1, r1
 8021fa4:	041b      	lsls	r3, r3, #16
 8021fa6:	4319      	orrs	r1, r3
 8021fa8:	9b05      	ldr	r3, [sp, #20]
 8021faa:	c302      	stmia	r3!, {r1}
 8021fac:	9305      	str	r3, [sp, #20]
 8021fae:	9b03      	ldr	r3, [sp, #12]
 8021fb0:	42a3      	cmp	r3, r4
 8021fb2:	d8e7      	bhi.n	8021f84 <__mdiff+0x84>
 8021fb4:	0039      	movs	r1, r7
 8021fb6:	9c03      	ldr	r4, [sp, #12]
 8021fb8:	3115      	adds	r1, #21
 8021fba:	2304      	movs	r3, #4
 8021fbc:	428c      	cmp	r4, r1
 8021fbe:	d304      	bcc.n	8021fca <__mdiff+0xca>
 8021fc0:	1be3      	subs	r3, r4, r7
 8021fc2:	3b15      	subs	r3, #21
 8021fc4:	089b      	lsrs	r3, r3, #2
 8021fc6:	3301      	adds	r3, #1
 8021fc8:	009b      	lsls	r3, r3, #2
 8021fca:	9901      	ldr	r1, [sp, #4]
 8021fcc:	18cd      	adds	r5, r1, r3
 8021fce:	9904      	ldr	r1, [sp, #16]
 8021fd0:	002e      	movs	r6, r5
 8021fd2:	18cb      	adds	r3, r1, r3
 8021fd4:	001f      	movs	r7, r3
 8021fd6:	9902      	ldr	r1, [sp, #8]
 8021fd8:	428e      	cmp	r6, r1
 8021fda:	d311      	bcc.n	8022000 <__mdiff+0x100>
 8021fdc:	9c02      	ldr	r4, [sp, #8]
 8021fde:	1ee9      	subs	r1, r5, #3
 8021fe0:	2000      	movs	r0, #0
 8021fe2:	428c      	cmp	r4, r1
 8021fe4:	d304      	bcc.n	8021ff0 <__mdiff+0xf0>
 8021fe6:	0021      	movs	r1, r4
 8021fe8:	3103      	adds	r1, #3
 8021fea:	1b49      	subs	r1, r1, r5
 8021fec:	0889      	lsrs	r1, r1, #2
 8021fee:	0088      	lsls	r0, r1, #2
 8021ff0:	181b      	adds	r3, r3, r0
 8021ff2:	3b04      	subs	r3, #4
 8021ff4:	6819      	ldr	r1, [r3, #0]
 8021ff6:	2900      	cmp	r1, #0
 8021ff8:	d010      	beq.n	802201c <__mdiff+0x11c>
 8021ffa:	9b00      	ldr	r3, [sp, #0]
 8021ffc:	6113      	str	r3, [r2, #16]
 8021ffe:	e798      	b.n	8021f32 <__mdiff+0x32>
 8022000:	4684      	mov	ip, r0
 8022002:	ce02      	ldmia	r6!, {r1}
 8022004:	b288      	uxth	r0, r1
 8022006:	4460      	add	r0, ip
 8022008:	1400      	asrs	r0, r0, #16
 802200a:	0c0c      	lsrs	r4, r1, #16
 802200c:	1904      	adds	r4, r0, r4
 802200e:	4461      	add	r1, ip
 8022010:	1420      	asrs	r0, r4, #16
 8022012:	b289      	uxth	r1, r1
 8022014:	0424      	lsls	r4, r4, #16
 8022016:	4321      	orrs	r1, r4
 8022018:	c702      	stmia	r7!, {r1}
 802201a:	e7dc      	b.n	8021fd6 <__mdiff+0xd6>
 802201c:	9900      	ldr	r1, [sp, #0]
 802201e:	3901      	subs	r1, #1
 8022020:	9100      	str	r1, [sp, #0]
 8022022:	e7e6      	b.n	8021ff2 <__mdiff+0xf2>
 8022024:	08025d19 	.word	0x08025d19
 8022028:	08025d8a 	.word	0x08025d8a
 802202c:	00000237 	.word	0x00000237
 8022030:	00000245 	.word	0x00000245

08022034 <__ulp>:
 8022034:	b510      	push	{r4, lr}
 8022036:	2400      	movs	r4, #0
 8022038:	4b0c      	ldr	r3, [pc, #48]	@ (802206c <__ulp+0x38>)
 802203a:	4a0d      	ldr	r2, [pc, #52]	@ (8022070 <__ulp+0x3c>)
 802203c:	400b      	ands	r3, r1
 802203e:	189b      	adds	r3, r3, r2
 8022040:	42a3      	cmp	r3, r4
 8022042:	dc06      	bgt.n	8022052 <__ulp+0x1e>
 8022044:	425b      	negs	r3, r3
 8022046:	151a      	asrs	r2, r3, #20
 8022048:	2a13      	cmp	r2, #19
 802204a:	dc05      	bgt.n	8022058 <__ulp+0x24>
 802204c:	2380      	movs	r3, #128	@ 0x80
 802204e:	031b      	lsls	r3, r3, #12
 8022050:	4113      	asrs	r3, r2
 8022052:	0019      	movs	r1, r3
 8022054:	0020      	movs	r0, r4
 8022056:	bd10      	pop	{r4, pc}
 8022058:	3a14      	subs	r2, #20
 802205a:	2401      	movs	r4, #1
 802205c:	2a1e      	cmp	r2, #30
 802205e:	dc02      	bgt.n	8022066 <__ulp+0x32>
 8022060:	2480      	movs	r4, #128	@ 0x80
 8022062:	0624      	lsls	r4, r4, #24
 8022064:	40d4      	lsrs	r4, r2
 8022066:	2300      	movs	r3, #0
 8022068:	e7f3      	b.n	8022052 <__ulp+0x1e>
 802206a:	46c0      	nop			@ (mov r8, r8)
 802206c:	7ff00000 	.word	0x7ff00000
 8022070:	fcc00000 	.word	0xfcc00000

08022074 <__b2d>:
 8022074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022076:	0006      	movs	r6, r0
 8022078:	6903      	ldr	r3, [r0, #16]
 802207a:	3614      	adds	r6, #20
 802207c:	009b      	lsls	r3, r3, #2
 802207e:	18f3      	adds	r3, r6, r3
 8022080:	1f1d      	subs	r5, r3, #4
 8022082:	682c      	ldr	r4, [r5, #0]
 8022084:	000f      	movs	r7, r1
 8022086:	0020      	movs	r0, r4
 8022088:	9301      	str	r3, [sp, #4]
 802208a:	f7ff fd3b 	bl	8021b04 <__hi0bits>
 802208e:	2220      	movs	r2, #32
 8022090:	1a12      	subs	r2, r2, r0
 8022092:	603a      	str	r2, [r7, #0]
 8022094:	0003      	movs	r3, r0
 8022096:	4a1c      	ldr	r2, [pc, #112]	@ (8022108 <__b2d+0x94>)
 8022098:	280a      	cmp	r0, #10
 802209a:	dc15      	bgt.n	80220c8 <__b2d+0x54>
 802209c:	210b      	movs	r1, #11
 802209e:	0027      	movs	r7, r4
 80220a0:	1a09      	subs	r1, r1, r0
 80220a2:	40cf      	lsrs	r7, r1
 80220a4:	433a      	orrs	r2, r7
 80220a6:	468c      	mov	ip, r1
 80220a8:	0011      	movs	r1, r2
 80220aa:	2200      	movs	r2, #0
 80220ac:	42ae      	cmp	r6, r5
 80220ae:	d202      	bcs.n	80220b6 <__b2d+0x42>
 80220b0:	9a01      	ldr	r2, [sp, #4]
 80220b2:	3a08      	subs	r2, #8
 80220b4:	6812      	ldr	r2, [r2, #0]
 80220b6:	3315      	adds	r3, #21
 80220b8:	409c      	lsls	r4, r3
 80220ba:	4663      	mov	r3, ip
 80220bc:	0027      	movs	r7, r4
 80220be:	40da      	lsrs	r2, r3
 80220c0:	4317      	orrs	r7, r2
 80220c2:	0038      	movs	r0, r7
 80220c4:	b003      	add	sp, #12
 80220c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80220c8:	2700      	movs	r7, #0
 80220ca:	42ae      	cmp	r6, r5
 80220cc:	d202      	bcs.n	80220d4 <__b2d+0x60>
 80220ce:	9d01      	ldr	r5, [sp, #4]
 80220d0:	3d08      	subs	r5, #8
 80220d2:	682f      	ldr	r7, [r5, #0]
 80220d4:	210b      	movs	r1, #11
 80220d6:	4249      	negs	r1, r1
 80220d8:	468c      	mov	ip, r1
 80220da:	449c      	add	ip, r3
 80220dc:	2b0b      	cmp	r3, #11
 80220de:	d010      	beq.n	8022102 <__b2d+0x8e>
 80220e0:	4661      	mov	r1, ip
 80220e2:	2320      	movs	r3, #32
 80220e4:	408c      	lsls	r4, r1
 80220e6:	1a5b      	subs	r3, r3, r1
 80220e8:	0039      	movs	r1, r7
 80220ea:	40d9      	lsrs	r1, r3
 80220ec:	430c      	orrs	r4, r1
 80220ee:	4322      	orrs	r2, r4
 80220f0:	0011      	movs	r1, r2
 80220f2:	2200      	movs	r2, #0
 80220f4:	42b5      	cmp	r5, r6
 80220f6:	d901      	bls.n	80220fc <__b2d+0x88>
 80220f8:	3d04      	subs	r5, #4
 80220fa:	682a      	ldr	r2, [r5, #0]
 80220fc:	4664      	mov	r4, ip
 80220fe:	40a7      	lsls	r7, r4
 8022100:	e7dd      	b.n	80220be <__b2d+0x4a>
 8022102:	4322      	orrs	r2, r4
 8022104:	0011      	movs	r1, r2
 8022106:	e7dc      	b.n	80220c2 <__b2d+0x4e>
 8022108:	3ff00000 	.word	0x3ff00000

0802210c <__d2b>:
 802210c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802210e:	2101      	movs	r1, #1
 8022110:	0016      	movs	r6, r2
 8022112:	001f      	movs	r7, r3
 8022114:	f7ff fbfe 	bl	8021914 <_Balloc>
 8022118:	1e04      	subs	r4, r0, #0
 802211a:	d105      	bne.n	8022128 <__d2b+0x1c>
 802211c:	0022      	movs	r2, r4
 802211e:	4b25      	ldr	r3, [pc, #148]	@ (80221b4 <__d2b+0xa8>)
 8022120:	4825      	ldr	r0, [pc, #148]	@ (80221b8 <__d2b+0xac>)
 8022122:	4926      	ldr	r1, [pc, #152]	@ (80221bc <__d2b+0xb0>)
 8022124:	f000 fcd6 	bl	8022ad4 <__assert_func>
 8022128:	033b      	lsls	r3, r7, #12
 802212a:	007d      	lsls	r5, r7, #1
 802212c:	0b1b      	lsrs	r3, r3, #12
 802212e:	0d6d      	lsrs	r5, r5, #21
 8022130:	d002      	beq.n	8022138 <__d2b+0x2c>
 8022132:	2280      	movs	r2, #128	@ 0x80
 8022134:	0352      	lsls	r2, r2, #13
 8022136:	4313      	orrs	r3, r2
 8022138:	9301      	str	r3, [sp, #4]
 802213a:	2e00      	cmp	r6, #0
 802213c:	d025      	beq.n	802218a <__d2b+0x7e>
 802213e:	4668      	mov	r0, sp
 8022140:	9600      	str	r6, [sp, #0]
 8022142:	f7ff fd00 	bl	8021b46 <__lo0bits>
 8022146:	9b01      	ldr	r3, [sp, #4]
 8022148:	9900      	ldr	r1, [sp, #0]
 802214a:	2800      	cmp	r0, #0
 802214c:	d01b      	beq.n	8022186 <__d2b+0x7a>
 802214e:	2220      	movs	r2, #32
 8022150:	001e      	movs	r6, r3
 8022152:	1a12      	subs	r2, r2, r0
 8022154:	4096      	lsls	r6, r2
 8022156:	0032      	movs	r2, r6
 8022158:	40c3      	lsrs	r3, r0
 802215a:	430a      	orrs	r2, r1
 802215c:	6162      	str	r2, [r4, #20]
 802215e:	9301      	str	r3, [sp, #4]
 8022160:	9e01      	ldr	r6, [sp, #4]
 8022162:	61a6      	str	r6, [r4, #24]
 8022164:	1e73      	subs	r3, r6, #1
 8022166:	419e      	sbcs	r6, r3
 8022168:	3601      	adds	r6, #1
 802216a:	6126      	str	r6, [r4, #16]
 802216c:	2d00      	cmp	r5, #0
 802216e:	d014      	beq.n	802219a <__d2b+0x8e>
 8022170:	2635      	movs	r6, #53	@ 0x35
 8022172:	4b13      	ldr	r3, [pc, #76]	@ (80221c0 <__d2b+0xb4>)
 8022174:	18ed      	adds	r5, r5, r3
 8022176:	9b08      	ldr	r3, [sp, #32]
 8022178:	182d      	adds	r5, r5, r0
 802217a:	601d      	str	r5, [r3, #0]
 802217c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802217e:	1a36      	subs	r6, r6, r0
 8022180:	601e      	str	r6, [r3, #0]
 8022182:	0020      	movs	r0, r4
 8022184:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022186:	6161      	str	r1, [r4, #20]
 8022188:	e7ea      	b.n	8022160 <__d2b+0x54>
 802218a:	a801      	add	r0, sp, #4
 802218c:	f7ff fcdb 	bl	8021b46 <__lo0bits>
 8022190:	9b01      	ldr	r3, [sp, #4]
 8022192:	2601      	movs	r6, #1
 8022194:	6163      	str	r3, [r4, #20]
 8022196:	3020      	adds	r0, #32
 8022198:	e7e7      	b.n	802216a <__d2b+0x5e>
 802219a:	4b0a      	ldr	r3, [pc, #40]	@ (80221c4 <__d2b+0xb8>)
 802219c:	18c0      	adds	r0, r0, r3
 802219e:	9b08      	ldr	r3, [sp, #32]
 80221a0:	6018      	str	r0, [r3, #0]
 80221a2:	4b09      	ldr	r3, [pc, #36]	@ (80221c8 <__d2b+0xbc>)
 80221a4:	18f3      	adds	r3, r6, r3
 80221a6:	009b      	lsls	r3, r3, #2
 80221a8:	18e3      	adds	r3, r4, r3
 80221aa:	6958      	ldr	r0, [r3, #20]
 80221ac:	f7ff fcaa 	bl	8021b04 <__hi0bits>
 80221b0:	0176      	lsls	r6, r6, #5
 80221b2:	e7e3      	b.n	802217c <__d2b+0x70>
 80221b4:	08025d19 	.word	0x08025d19
 80221b8:	08025d8a 	.word	0x08025d8a
 80221bc:	0000030f 	.word	0x0000030f
 80221c0:	fffffbcd 	.word	0xfffffbcd
 80221c4:	fffffbce 	.word	0xfffffbce
 80221c8:	3fffffff 	.word	0x3fffffff

080221cc <__ratio>:
 80221cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80221ce:	b087      	sub	sp, #28
 80221d0:	000f      	movs	r7, r1
 80221d2:	a904      	add	r1, sp, #16
 80221d4:	0006      	movs	r6, r0
 80221d6:	f7ff ff4d 	bl	8022074 <__b2d>
 80221da:	9000      	str	r0, [sp, #0]
 80221dc:	9101      	str	r1, [sp, #4]
 80221de:	9b00      	ldr	r3, [sp, #0]
 80221e0:	9c01      	ldr	r4, [sp, #4]
 80221e2:	0038      	movs	r0, r7
 80221e4:	a905      	add	r1, sp, #20
 80221e6:	9302      	str	r3, [sp, #8]
 80221e8:	9403      	str	r4, [sp, #12]
 80221ea:	f7ff ff43 	bl	8022074 <__b2d>
 80221ee:	000d      	movs	r5, r1
 80221f0:	0002      	movs	r2, r0
 80221f2:	000b      	movs	r3, r1
 80221f4:	6930      	ldr	r0, [r6, #16]
 80221f6:	6939      	ldr	r1, [r7, #16]
 80221f8:	9e04      	ldr	r6, [sp, #16]
 80221fa:	1a40      	subs	r0, r0, r1
 80221fc:	9905      	ldr	r1, [sp, #20]
 80221fe:	0140      	lsls	r0, r0, #5
 8022200:	1a71      	subs	r1, r6, r1
 8022202:	1841      	adds	r1, r0, r1
 8022204:	0508      	lsls	r0, r1, #20
 8022206:	2900      	cmp	r1, #0
 8022208:	dd08      	ble.n	802221c <__ratio+0x50>
 802220a:	9901      	ldr	r1, [sp, #4]
 802220c:	1841      	adds	r1, r0, r1
 802220e:	9103      	str	r1, [sp, #12]
 8022210:	9802      	ldr	r0, [sp, #8]
 8022212:	9903      	ldr	r1, [sp, #12]
 8022214:	f7df fdce 	bl	8001db4 <__aeabi_ddiv>
 8022218:	b007      	add	sp, #28
 802221a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802221c:	1a2b      	subs	r3, r5, r0
 802221e:	e7f7      	b.n	8022210 <__ratio+0x44>

08022220 <__copybits>:
 8022220:	b570      	push	{r4, r5, r6, lr}
 8022222:	0014      	movs	r4, r2
 8022224:	0005      	movs	r5, r0
 8022226:	3901      	subs	r1, #1
 8022228:	6913      	ldr	r3, [r2, #16]
 802222a:	1149      	asrs	r1, r1, #5
 802222c:	3101      	adds	r1, #1
 802222e:	0089      	lsls	r1, r1, #2
 8022230:	3414      	adds	r4, #20
 8022232:	009b      	lsls	r3, r3, #2
 8022234:	1841      	adds	r1, r0, r1
 8022236:	18e3      	adds	r3, r4, r3
 8022238:	42a3      	cmp	r3, r4
 802223a:	d80d      	bhi.n	8022258 <__copybits+0x38>
 802223c:	0014      	movs	r4, r2
 802223e:	3411      	adds	r4, #17
 8022240:	2500      	movs	r5, #0
 8022242:	429c      	cmp	r4, r3
 8022244:	d803      	bhi.n	802224e <__copybits+0x2e>
 8022246:	1a9b      	subs	r3, r3, r2
 8022248:	3b11      	subs	r3, #17
 802224a:	089b      	lsrs	r3, r3, #2
 802224c:	009d      	lsls	r5, r3, #2
 802224e:	2300      	movs	r3, #0
 8022250:	1940      	adds	r0, r0, r5
 8022252:	4281      	cmp	r1, r0
 8022254:	d803      	bhi.n	802225e <__copybits+0x3e>
 8022256:	bd70      	pop	{r4, r5, r6, pc}
 8022258:	cc40      	ldmia	r4!, {r6}
 802225a:	c540      	stmia	r5!, {r6}
 802225c:	e7ec      	b.n	8022238 <__copybits+0x18>
 802225e:	c008      	stmia	r0!, {r3}
 8022260:	e7f7      	b.n	8022252 <__copybits+0x32>

08022262 <__any_on>:
 8022262:	0002      	movs	r2, r0
 8022264:	6900      	ldr	r0, [r0, #16]
 8022266:	b510      	push	{r4, lr}
 8022268:	3214      	adds	r2, #20
 802226a:	114b      	asrs	r3, r1, #5
 802226c:	4298      	cmp	r0, r3
 802226e:	db13      	blt.n	8022298 <__any_on+0x36>
 8022270:	dd0c      	ble.n	802228c <__any_on+0x2a>
 8022272:	241f      	movs	r4, #31
 8022274:	0008      	movs	r0, r1
 8022276:	4020      	ands	r0, r4
 8022278:	4221      	tst	r1, r4
 802227a:	d007      	beq.n	802228c <__any_on+0x2a>
 802227c:	0099      	lsls	r1, r3, #2
 802227e:	588c      	ldr	r4, [r1, r2]
 8022280:	0021      	movs	r1, r4
 8022282:	40c1      	lsrs	r1, r0
 8022284:	4081      	lsls	r1, r0
 8022286:	2001      	movs	r0, #1
 8022288:	428c      	cmp	r4, r1
 802228a:	d104      	bne.n	8022296 <__any_on+0x34>
 802228c:	009b      	lsls	r3, r3, #2
 802228e:	18d3      	adds	r3, r2, r3
 8022290:	4293      	cmp	r3, r2
 8022292:	d803      	bhi.n	802229c <__any_on+0x3a>
 8022294:	2000      	movs	r0, #0
 8022296:	bd10      	pop	{r4, pc}
 8022298:	0003      	movs	r3, r0
 802229a:	e7f7      	b.n	802228c <__any_on+0x2a>
 802229c:	3b04      	subs	r3, #4
 802229e:	6819      	ldr	r1, [r3, #0]
 80222a0:	2900      	cmp	r1, #0
 80222a2:	d0f5      	beq.n	8022290 <__any_on+0x2e>
 80222a4:	2001      	movs	r0, #1
 80222a6:	e7f6      	b.n	8022296 <__any_on+0x34>

080222a8 <__ascii_wctomb>:
 80222a8:	0003      	movs	r3, r0
 80222aa:	1e08      	subs	r0, r1, #0
 80222ac:	d005      	beq.n	80222ba <__ascii_wctomb+0x12>
 80222ae:	2aff      	cmp	r2, #255	@ 0xff
 80222b0:	d904      	bls.n	80222bc <__ascii_wctomb+0x14>
 80222b2:	228a      	movs	r2, #138	@ 0x8a
 80222b4:	2001      	movs	r0, #1
 80222b6:	601a      	str	r2, [r3, #0]
 80222b8:	4240      	negs	r0, r0
 80222ba:	4770      	bx	lr
 80222bc:	2001      	movs	r0, #1
 80222be:	700a      	strb	r2, [r1, #0]
 80222c0:	e7fb      	b.n	80222ba <__ascii_wctomb+0x12>
	...

080222c4 <__ssputs_r>:
 80222c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80222c6:	688e      	ldr	r6, [r1, #8]
 80222c8:	b085      	sub	sp, #20
 80222ca:	001f      	movs	r7, r3
 80222cc:	000c      	movs	r4, r1
 80222ce:	680b      	ldr	r3, [r1, #0]
 80222d0:	9002      	str	r0, [sp, #8]
 80222d2:	9203      	str	r2, [sp, #12]
 80222d4:	42be      	cmp	r6, r7
 80222d6:	d830      	bhi.n	802233a <__ssputs_r+0x76>
 80222d8:	210c      	movs	r1, #12
 80222da:	5e62      	ldrsh	r2, [r4, r1]
 80222dc:	2190      	movs	r1, #144	@ 0x90
 80222de:	00c9      	lsls	r1, r1, #3
 80222e0:	420a      	tst	r2, r1
 80222e2:	d028      	beq.n	8022336 <__ssputs_r+0x72>
 80222e4:	2003      	movs	r0, #3
 80222e6:	6921      	ldr	r1, [r4, #16]
 80222e8:	1a5b      	subs	r3, r3, r1
 80222ea:	9301      	str	r3, [sp, #4]
 80222ec:	6963      	ldr	r3, [r4, #20]
 80222ee:	4343      	muls	r3, r0
 80222f0:	9801      	ldr	r0, [sp, #4]
 80222f2:	0fdd      	lsrs	r5, r3, #31
 80222f4:	18ed      	adds	r5, r5, r3
 80222f6:	1c7b      	adds	r3, r7, #1
 80222f8:	181b      	adds	r3, r3, r0
 80222fa:	106d      	asrs	r5, r5, #1
 80222fc:	42ab      	cmp	r3, r5
 80222fe:	d900      	bls.n	8022302 <__ssputs_r+0x3e>
 8022300:	001d      	movs	r5, r3
 8022302:	0552      	lsls	r2, r2, #21
 8022304:	d528      	bpl.n	8022358 <__ssputs_r+0x94>
 8022306:	0029      	movs	r1, r5
 8022308:	9802      	ldr	r0, [sp, #8]
 802230a:	f7ff fa61 	bl	80217d0 <_malloc_r>
 802230e:	1e06      	subs	r6, r0, #0
 8022310:	d02c      	beq.n	802236c <__ssputs_r+0xa8>
 8022312:	9a01      	ldr	r2, [sp, #4]
 8022314:	6921      	ldr	r1, [r4, #16]
 8022316:	f7fd fff9 	bl	802030c <memcpy>
 802231a:	89a2      	ldrh	r2, [r4, #12]
 802231c:	4b18      	ldr	r3, [pc, #96]	@ (8022380 <__ssputs_r+0xbc>)
 802231e:	401a      	ands	r2, r3
 8022320:	2380      	movs	r3, #128	@ 0x80
 8022322:	4313      	orrs	r3, r2
 8022324:	81a3      	strh	r3, [r4, #12]
 8022326:	9b01      	ldr	r3, [sp, #4]
 8022328:	6126      	str	r6, [r4, #16]
 802232a:	18f6      	adds	r6, r6, r3
 802232c:	6026      	str	r6, [r4, #0]
 802232e:	003e      	movs	r6, r7
 8022330:	6165      	str	r5, [r4, #20]
 8022332:	1aed      	subs	r5, r5, r3
 8022334:	60a5      	str	r5, [r4, #8]
 8022336:	42be      	cmp	r6, r7
 8022338:	d900      	bls.n	802233c <__ssputs_r+0x78>
 802233a:	003e      	movs	r6, r7
 802233c:	0032      	movs	r2, r6
 802233e:	9903      	ldr	r1, [sp, #12]
 8022340:	6820      	ldr	r0, [r4, #0]
 8022342:	f000 fb7e 	bl	8022a42 <memmove>
 8022346:	2000      	movs	r0, #0
 8022348:	68a3      	ldr	r3, [r4, #8]
 802234a:	1b9b      	subs	r3, r3, r6
 802234c:	60a3      	str	r3, [r4, #8]
 802234e:	6823      	ldr	r3, [r4, #0]
 8022350:	199b      	adds	r3, r3, r6
 8022352:	6023      	str	r3, [r4, #0]
 8022354:	b005      	add	sp, #20
 8022356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022358:	002a      	movs	r2, r5
 802235a:	9802      	ldr	r0, [sp, #8]
 802235c:	f000 fc05 	bl	8022b6a <_realloc_r>
 8022360:	1e06      	subs	r6, r0, #0
 8022362:	d1e0      	bne.n	8022326 <__ssputs_r+0x62>
 8022364:	6921      	ldr	r1, [r4, #16]
 8022366:	9802      	ldr	r0, [sp, #8]
 8022368:	f7fe fe62 	bl	8021030 <_free_r>
 802236c:	230c      	movs	r3, #12
 802236e:	2001      	movs	r0, #1
 8022370:	9a02      	ldr	r2, [sp, #8]
 8022372:	4240      	negs	r0, r0
 8022374:	6013      	str	r3, [r2, #0]
 8022376:	89a2      	ldrh	r2, [r4, #12]
 8022378:	3334      	adds	r3, #52	@ 0x34
 802237a:	4313      	orrs	r3, r2
 802237c:	81a3      	strh	r3, [r4, #12]
 802237e:	e7e9      	b.n	8022354 <__ssputs_r+0x90>
 8022380:	fffffb7f 	.word	0xfffffb7f

08022384 <_svfiprintf_r>:
 8022384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022386:	b0a1      	sub	sp, #132	@ 0x84
 8022388:	9003      	str	r0, [sp, #12]
 802238a:	001d      	movs	r5, r3
 802238c:	898b      	ldrh	r3, [r1, #12]
 802238e:	000f      	movs	r7, r1
 8022390:	0016      	movs	r6, r2
 8022392:	061b      	lsls	r3, r3, #24
 8022394:	d511      	bpl.n	80223ba <_svfiprintf_r+0x36>
 8022396:	690b      	ldr	r3, [r1, #16]
 8022398:	2b00      	cmp	r3, #0
 802239a:	d10e      	bne.n	80223ba <_svfiprintf_r+0x36>
 802239c:	2140      	movs	r1, #64	@ 0x40
 802239e:	f7ff fa17 	bl	80217d0 <_malloc_r>
 80223a2:	6038      	str	r0, [r7, #0]
 80223a4:	6138      	str	r0, [r7, #16]
 80223a6:	2800      	cmp	r0, #0
 80223a8:	d105      	bne.n	80223b6 <_svfiprintf_r+0x32>
 80223aa:	230c      	movs	r3, #12
 80223ac:	9a03      	ldr	r2, [sp, #12]
 80223ae:	6013      	str	r3, [r2, #0]
 80223b0:	2001      	movs	r0, #1
 80223b2:	4240      	negs	r0, r0
 80223b4:	e0cf      	b.n	8022556 <_svfiprintf_r+0x1d2>
 80223b6:	2340      	movs	r3, #64	@ 0x40
 80223b8:	617b      	str	r3, [r7, #20]
 80223ba:	2300      	movs	r3, #0
 80223bc:	ac08      	add	r4, sp, #32
 80223be:	6163      	str	r3, [r4, #20]
 80223c0:	3320      	adds	r3, #32
 80223c2:	7663      	strb	r3, [r4, #25]
 80223c4:	3310      	adds	r3, #16
 80223c6:	76a3      	strb	r3, [r4, #26]
 80223c8:	9507      	str	r5, [sp, #28]
 80223ca:	0035      	movs	r5, r6
 80223cc:	782b      	ldrb	r3, [r5, #0]
 80223ce:	2b00      	cmp	r3, #0
 80223d0:	d001      	beq.n	80223d6 <_svfiprintf_r+0x52>
 80223d2:	2b25      	cmp	r3, #37	@ 0x25
 80223d4:	d148      	bne.n	8022468 <_svfiprintf_r+0xe4>
 80223d6:	1bab      	subs	r3, r5, r6
 80223d8:	9305      	str	r3, [sp, #20]
 80223da:	42b5      	cmp	r5, r6
 80223dc:	d00b      	beq.n	80223f6 <_svfiprintf_r+0x72>
 80223de:	0032      	movs	r2, r6
 80223e0:	0039      	movs	r1, r7
 80223e2:	9803      	ldr	r0, [sp, #12]
 80223e4:	f7ff ff6e 	bl	80222c4 <__ssputs_r>
 80223e8:	3001      	adds	r0, #1
 80223ea:	d100      	bne.n	80223ee <_svfiprintf_r+0x6a>
 80223ec:	e0ae      	b.n	802254c <_svfiprintf_r+0x1c8>
 80223ee:	6963      	ldr	r3, [r4, #20]
 80223f0:	9a05      	ldr	r2, [sp, #20]
 80223f2:	189b      	adds	r3, r3, r2
 80223f4:	6163      	str	r3, [r4, #20]
 80223f6:	782b      	ldrb	r3, [r5, #0]
 80223f8:	2b00      	cmp	r3, #0
 80223fa:	d100      	bne.n	80223fe <_svfiprintf_r+0x7a>
 80223fc:	e0a6      	b.n	802254c <_svfiprintf_r+0x1c8>
 80223fe:	2201      	movs	r2, #1
 8022400:	2300      	movs	r3, #0
 8022402:	4252      	negs	r2, r2
 8022404:	6062      	str	r2, [r4, #4]
 8022406:	a904      	add	r1, sp, #16
 8022408:	3254      	adds	r2, #84	@ 0x54
 802240a:	1852      	adds	r2, r2, r1
 802240c:	1c6e      	adds	r6, r5, #1
 802240e:	6023      	str	r3, [r4, #0]
 8022410:	60e3      	str	r3, [r4, #12]
 8022412:	60a3      	str	r3, [r4, #8]
 8022414:	7013      	strb	r3, [r2, #0]
 8022416:	65a3      	str	r3, [r4, #88]	@ 0x58
 8022418:	4b54      	ldr	r3, [pc, #336]	@ (802256c <_svfiprintf_r+0x1e8>)
 802241a:	2205      	movs	r2, #5
 802241c:	0018      	movs	r0, r3
 802241e:	7831      	ldrb	r1, [r6, #0]
 8022420:	9305      	str	r3, [sp, #20]
 8022422:	f7fd ff68 	bl	80202f6 <memchr>
 8022426:	1c75      	adds	r5, r6, #1
 8022428:	2800      	cmp	r0, #0
 802242a:	d11f      	bne.n	802246c <_svfiprintf_r+0xe8>
 802242c:	6822      	ldr	r2, [r4, #0]
 802242e:	06d3      	lsls	r3, r2, #27
 8022430:	d504      	bpl.n	802243c <_svfiprintf_r+0xb8>
 8022432:	2353      	movs	r3, #83	@ 0x53
 8022434:	a904      	add	r1, sp, #16
 8022436:	185b      	adds	r3, r3, r1
 8022438:	2120      	movs	r1, #32
 802243a:	7019      	strb	r1, [r3, #0]
 802243c:	0713      	lsls	r3, r2, #28
 802243e:	d504      	bpl.n	802244a <_svfiprintf_r+0xc6>
 8022440:	2353      	movs	r3, #83	@ 0x53
 8022442:	a904      	add	r1, sp, #16
 8022444:	185b      	adds	r3, r3, r1
 8022446:	212b      	movs	r1, #43	@ 0x2b
 8022448:	7019      	strb	r1, [r3, #0]
 802244a:	7833      	ldrb	r3, [r6, #0]
 802244c:	2b2a      	cmp	r3, #42	@ 0x2a
 802244e:	d016      	beq.n	802247e <_svfiprintf_r+0xfa>
 8022450:	0035      	movs	r5, r6
 8022452:	2100      	movs	r1, #0
 8022454:	200a      	movs	r0, #10
 8022456:	68e3      	ldr	r3, [r4, #12]
 8022458:	782a      	ldrb	r2, [r5, #0]
 802245a:	1c6e      	adds	r6, r5, #1
 802245c:	3a30      	subs	r2, #48	@ 0x30
 802245e:	2a09      	cmp	r2, #9
 8022460:	d950      	bls.n	8022504 <_svfiprintf_r+0x180>
 8022462:	2900      	cmp	r1, #0
 8022464:	d111      	bne.n	802248a <_svfiprintf_r+0x106>
 8022466:	e017      	b.n	8022498 <_svfiprintf_r+0x114>
 8022468:	3501      	adds	r5, #1
 802246a:	e7af      	b.n	80223cc <_svfiprintf_r+0x48>
 802246c:	9b05      	ldr	r3, [sp, #20]
 802246e:	6822      	ldr	r2, [r4, #0]
 8022470:	1ac0      	subs	r0, r0, r3
 8022472:	2301      	movs	r3, #1
 8022474:	4083      	lsls	r3, r0
 8022476:	4313      	orrs	r3, r2
 8022478:	002e      	movs	r6, r5
 802247a:	6023      	str	r3, [r4, #0]
 802247c:	e7cc      	b.n	8022418 <_svfiprintf_r+0x94>
 802247e:	9b07      	ldr	r3, [sp, #28]
 8022480:	1d19      	adds	r1, r3, #4
 8022482:	681b      	ldr	r3, [r3, #0]
 8022484:	9107      	str	r1, [sp, #28]
 8022486:	2b00      	cmp	r3, #0
 8022488:	db01      	blt.n	802248e <_svfiprintf_r+0x10a>
 802248a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802248c:	e004      	b.n	8022498 <_svfiprintf_r+0x114>
 802248e:	425b      	negs	r3, r3
 8022490:	60e3      	str	r3, [r4, #12]
 8022492:	2302      	movs	r3, #2
 8022494:	4313      	orrs	r3, r2
 8022496:	6023      	str	r3, [r4, #0]
 8022498:	782b      	ldrb	r3, [r5, #0]
 802249a:	2b2e      	cmp	r3, #46	@ 0x2e
 802249c:	d10c      	bne.n	80224b8 <_svfiprintf_r+0x134>
 802249e:	786b      	ldrb	r3, [r5, #1]
 80224a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80224a2:	d134      	bne.n	802250e <_svfiprintf_r+0x18a>
 80224a4:	9b07      	ldr	r3, [sp, #28]
 80224a6:	3502      	adds	r5, #2
 80224a8:	1d1a      	adds	r2, r3, #4
 80224aa:	681b      	ldr	r3, [r3, #0]
 80224ac:	9207      	str	r2, [sp, #28]
 80224ae:	2b00      	cmp	r3, #0
 80224b0:	da01      	bge.n	80224b6 <_svfiprintf_r+0x132>
 80224b2:	2301      	movs	r3, #1
 80224b4:	425b      	negs	r3, r3
 80224b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80224b8:	4e2d      	ldr	r6, [pc, #180]	@ (8022570 <_svfiprintf_r+0x1ec>)
 80224ba:	2203      	movs	r2, #3
 80224bc:	0030      	movs	r0, r6
 80224be:	7829      	ldrb	r1, [r5, #0]
 80224c0:	f7fd ff19 	bl	80202f6 <memchr>
 80224c4:	2800      	cmp	r0, #0
 80224c6:	d006      	beq.n	80224d6 <_svfiprintf_r+0x152>
 80224c8:	2340      	movs	r3, #64	@ 0x40
 80224ca:	1b80      	subs	r0, r0, r6
 80224cc:	4083      	lsls	r3, r0
 80224ce:	6822      	ldr	r2, [r4, #0]
 80224d0:	3501      	adds	r5, #1
 80224d2:	4313      	orrs	r3, r2
 80224d4:	6023      	str	r3, [r4, #0]
 80224d6:	7829      	ldrb	r1, [r5, #0]
 80224d8:	2206      	movs	r2, #6
 80224da:	4826      	ldr	r0, [pc, #152]	@ (8022574 <_svfiprintf_r+0x1f0>)
 80224dc:	1c6e      	adds	r6, r5, #1
 80224de:	7621      	strb	r1, [r4, #24]
 80224e0:	f7fd ff09 	bl	80202f6 <memchr>
 80224e4:	2800      	cmp	r0, #0
 80224e6:	d038      	beq.n	802255a <_svfiprintf_r+0x1d6>
 80224e8:	4b23      	ldr	r3, [pc, #140]	@ (8022578 <_svfiprintf_r+0x1f4>)
 80224ea:	2b00      	cmp	r3, #0
 80224ec:	d122      	bne.n	8022534 <_svfiprintf_r+0x1b0>
 80224ee:	2207      	movs	r2, #7
 80224f0:	9b07      	ldr	r3, [sp, #28]
 80224f2:	3307      	adds	r3, #7
 80224f4:	4393      	bics	r3, r2
 80224f6:	3308      	adds	r3, #8
 80224f8:	9307      	str	r3, [sp, #28]
 80224fa:	6963      	ldr	r3, [r4, #20]
 80224fc:	9a04      	ldr	r2, [sp, #16]
 80224fe:	189b      	adds	r3, r3, r2
 8022500:	6163      	str	r3, [r4, #20]
 8022502:	e762      	b.n	80223ca <_svfiprintf_r+0x46>
 8022504:	4343      	muls	r3, r0
 8022506:	0035      	movs	r5, r6
 8022508:	2101      	movs	r1, #1
 802250a:	189b      	adds	r3, r3, r2
 802250c:	e7a4      	b.n	8022458 <_svfiprintf_r+0xd4>
 802250e:	2300      	movs	r3, #0
 8022510:	200a      	movs	r0, #10
 8022512:	0019      	movs	r1, r3
 8022514:	3501      	adds	r5, #1
 8022516:	6063      	str	r3, [r4, #4]
 8022518:	782a      	ldrb	r2, [r5, #0]
 802251a:	1c6e      	adds	r6, r5, #1
 802251c:	3a30      	subs	r2, #48	@ 0x30
 802251e:	2a09      	cmp	r2, #9
 8022520:	d903      	bls.n	802252a <_svfiprintf_r+0x1a6>
 8022522:	2b00      	cmp	r3, #0
 8022524:	d0c8      	beq.n	80224b8 <_svfiprintf_r+0x134>
 8022526:	9109      	str	r1, [sp, #36]	@ 0x24
 8022528:	e7c6      	b.n	80224b8 <_svfiprintf_r+0x134>
 802252a:	4341      	muls	r1, r0
 802252c:	0035      	movs	r5, r6
 802252e:	2301      	movs	r3, #1
 8022530:	1889      	adds	r1, r1, r2
 8022532:	e7f1      	b.n	8022518 <_svfiprintf_r+0x194>
 8022534:	aa07      	add	r2, sp, #28
 8022536:	9200      	str	r2, [sp, #0]
 8022538:	0021      	movs	r1, r4
 802253a:	003a      	movs	r2, r7
 802253c:	4b0f      	ldr	r3, [pc, #60]	@ (802257c <_svfiprintf_r+0x1f8>)
 802253e:	9803      	ldr	r0, [sp, #12]
 8022540:	f7fc ffd4 	bl	801f4ec <_printf_float>
 8022544:	9004      	str	r0, [sp, #16]
 8022546:	9b04      	ldr	r3, [sp, #16]
 8022548:	3301      	adds	r3, #1
 802254a:	d1d6      	bne.n	80224fa <_svfiprintf_r+0x176>
 802254c:	89bb      	ldrh	r3, [r7, #12]
 802254e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8022550:	065b      	lsls	r3, r3, #25
 8022552:	d500      	bpl.n	8022556 <_svfiprintf_r+0x1d2>
 8022554:	e72c      	b.n	80223b0 <_svfiprintf_r+0x2c>
 8022556:	b021      	add	sp, #132	@ 0x84
 8022558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802255a:	aa07      	add	r2, sp, #28
 802255c:	9200      	str	r2, [sp, #0]
 802255e:	0021      	movs	r1, r4
 8022560:	003a      	movs	r2, r7
 8022562:	4b06      	ldr	r3, [pc, #24]	@ (802257c <_svfiprintf_r+0x1f8>)
 8022564:	9803      	ldr	r0, [sp, #12]
 8022566:	f7fd fa6f 	bl	801fa48 <_printf_i>
 802256a:	e7eb      	b.n	8022544 <_svfiprintf_r+0x1c0>
 802256c:	08025ee0 	.word	0x08025ee0
 8022570:	08025ee6 	.word	0x08025ee6
 8022574:	08025eea 	.word	0x08025eea
 8022578:	0801f4ed 	.word	0x0801f4ed
 802257c:	080222c5 	.word	0x080222c5

08022580 <__sfputc_r>:
 8022580:	6893      	ldr	r3, [r2, #8]
 8022582:	b510      	push	{r4, lr}
 8022584:	3b01      	subs	r3, #1
 8022586:	6093      	str	r3, [r2, #8]
 8022588:	2b00      	cmp	r3, #0
 802258a:	da04      	bge.n	8022596 <__sfputc_r+0x16>
 802258c:	6994      	ldr	r4, [r2, #24]
 802258e:	42a3      	cmp	r3, r4
 8022590:	db07      	blt.n	80225a2 <__sfputc_r+0x22>
 8022592:	290a      	cmp	r1, #10
 8022594:	d005      	beq.n	80225a2 <__sfputc_r+0x22>
 8022596:	6813      	ldr	r3, [r2, #0]
 8022598:	1c58      	adds	r0, r3, #1
 802259a:	6010      	str	r0, [r2, #0]
 802259c:	7019      	strb	r1, [r3, #0]
 802259e:	0008      	movs	r0, r1
 80225a0:	bd10      	pop	{r4, pc}
 80225a2:	f7fd fd37 	bl	8020014 <__swbuf_r>
 80225a6:	0001      	movs	r1, r0
 80225a8:	e7f9      	b.n	802259e <__sfputc_r+0x1e>

080225aa <__sfputs_r>:
 80225aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80225ac:	0006      	movs	r6, r0
 80225ae:	000f      	movs	r7, r1
 80225b0:	0014      	movs	r4, r2
 80225b2:	18d5      	adds	r5, r2, r3
 80225b4:	42ac      	cmp	r4, r5
 80225b6:	d101      	bne.n	80225bc <__sfputs_r+0x12>
 80225b8:	2000      	movs	r0, #0
 80225ba:	e007      	b.n	80225cc <__sfputs_r+0x22>
 80225bc:	7821      	ldrb	r1, [r4, #0]
 80225be:	003a      	movs	r2, r7
 80225c0:	0030      	movs	r0, r6
 80225c2:	f7ff ffdd 	bl	8022580 <__sfputc_r>
 80225c6:	3401      	adds	r4, #1
 80225c8:	1c43      	adds	r3, r0, #1
 80225ca:	d1f3      	bne.n	80225b4 <__sfputs_r+0xa>
 80225cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080225d0 <_vfiprintf_r>:
 80225d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80225d2:	b0a1      	sub	sp, #132	@ 0x84
 80225d4:	000f      	movs	r7, r1
 80225d6:	0015      	movs	r5, r2
 80225d8:	001e      	movs	r6, r3
 80225da:	9003      	str	r0, [sp, #12]
 80225dc:	2800      	cmp	r0, #0
 80225de:	d004      	beq.n	80225ea <_vfiprintf_r+0x1a>
 80225e0:	6a03      	ldr	r3, [r0, #32]
 80225e2:	2b00      	cmp	r3, #0
 80225e4:	d101      	bne.n	80225ea <_vfiprintf_r+0x1a>
 80225e6:	f7fd fbcd 	bl	801fd84 <__sinit>
 80225ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80225ec:	07db      	lsls	r3, r3, #31
 80225ee:	d405      	bmi.n	80225fc <_vfiprintf_r+0x2c>
 80225f0:	89bb      	ldrh	r3, [r7, #12]
 80225f2:	059b      	lsls	r3, r3, #22
 80225f4:	d402      	bmi.n	80225fc <_vfiprintf_r+0x2c>
 80225f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80225f8:	f7fd fe7b 	bl	80202f2 <__retarget_lock_acquire_recursive>
 80225fc:	89bb      	ldrh	r3, [r7, #12]
 80225fe:	071b      	lsls	r3, r3, #28
 8022600:	d502      	bpl.n	8022608 <_vfiprintf_r+0x38>
 8022602:	693b      	ldr	r3, [r7, #16]
 8022604:	2b00      	cmp	r3, #0
 8022606:	d113      	bne.n	8022630 <_vfiprintf_r+0x60>
 8022608:	0039      	movs	r1, r7
 802260a:	9803      	ldr	r0, [sp, #12]
 802260c:	f7fd fd44 	bl	8020098 <__swsetup_r>
 8022610:	2800      	cmp	r0, #0
 8022612:	d00d      	beq.n	8022630 <_vfiprintf_r+0x60>
 8022614:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8022616:	07db      	lsls	r3, r3, #31
 8022618:	d503      	bpl.n	8022622 <_vfiprintf_r+0x52>
 802261a:	2001      	movs	r0, #1
 802261c:	4240      	negs	r0, r0
 802261e:	b021      	add	sp, #132	@ 0x84
 8022620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022622:	89bb      	ldrh	r3, [r7, #12]
 8022624:	059b      	lsls	r3, r3, #22
 8022626:	d4f8      	bmi.n	802261a <_vfiprintf_r+0x4a>
 8022628:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802262a:	f7fd fe63 	bl	80202f4 <__retarget_lock_release_recursive>
 802262e:	e7f4      	b.n	802261a <_vfiprintf_r+0x4a>
 8022630:	2300      	movs	r3, #0
 8022632:	ac08      	add	r4, sp, #32
 8022634:	6163      	str	r3, [r4, #20]
 8022636:	3320      	adds	r3, #32
 8022638:	7663      	strb	r3, [r4, #25]
 802263a:	3310      	adds	r3, #16
 802263c:	76a3      	strb	r3, [r4, #26]
 802263e:	9607      	str	r6, [sp, #28]
 8022640:	002e      	movs	r6, r5
 8022642:	7833      	ldrb	r3, [r6, #0]
 8022644:	2b00      	cmp	r3, #0
 8022646:	d001      	beq.n	802264c <_vfiprintf_r+0x7c>
 8022648:	2b25      	cmp	r3, #37	@ 0x25
 802264a:	d148      	bne.n	80226de <_vfiprintf_r+0x10e>
 802264c:	1b73      	subs	r3, r6, r5
 802264e:	9305      	str	r3, [sp, #20]
 8022650:	42ae      	cmp	r6, r5
 8022652:	d00b      	beq.n	802266c <_vfiprintf_r+0x9c>
 8022654:	002a      	movs	r2, r5
 8022656:	0039      	movs	r1, r7
 8022658:	9803      	ldr	r0, [sp, #12]
 802265a:	f7ff ffa6 	bl	80225aa <__sfputs_r>
 802265e:	3001      	adds	r0, #1
 8022660:	d100      	bne.n	8022664 <_vfiprintf_r+0x94>
 8022662:	e0ae      	b.n	80227c2 <_vfiprintf_r+0x1f2>
 8022664:	6963      	ldr	r3, [r4, #20]
 8022666:	9a05      	ldr	r2, [sp, #20]
 8022668:	189b      	adds	r3, r3, r2
 802266a:	6163      	str	r3, [r4, #20]
 802266c:	7833      	ldrb	r3, [r6, #0]
 802266e:	2b00      	cmp	r3, #0
 8022670:	d100      	bne.n	8022674 <_vfiprintf_r+0xa4>
 8022672:	e0a6      	b.n	80227c2 <_vfiprintf_r+0x1f2>
 8022674:	2201      	movs	r2, #1
 8022676:	2300      	movs	r3, #0
 8022678:	4252      	negs	r2, r2
 802267a:	6062      	str	r2, [r4, #4]
 802267c:	a904      	add	r1, sp, #16
 802267e:	3254      	adds	r2, #84	@ 0x54
 8022680:	1852      	adds	r2, r2, r1
 8022682:	1c75      	adds	r5, r6, #1
 8022684:	6023      	str	r3, [r4, #0]
 8022686:	60e3      	str	r3, [r4, #12]
 8022688:	60a3      	str	r3, [r4, #8]
 802268a:	7013      	strb	r3, [r2, #0]
 802268c:	65a3      	str	r3, [r4, #88]	@ 0x58
 802268e:	4b59      	ldr	r3, [pc, #356]	@ (80227f4 <_vfiprintf_r+0x224>)
 8022690:	2205      	movs	r2, #5
 8022692:	0018      	movs	r0, r3
 8022694:	7829      	ldrb	r1, [r5, #0]
 8022696:	9305      	str	r3, [sp, #20]
 8022698:	f7fd fe2d 	bl	80202f6 <memchr>
 802269c:	1c6e      	adds	r6, r5, #1
 802269e:	2800      	cmp	r0, #0
 80226a0:	d11f      	bne.n	80226e2 <_vfiprintf_r+0x112>
 80226a2:	6822      	ldr	r2, [r4, #0]
 80226a4:	06d3      	lsls	r3, r2, #27
 80226a6:	d504      	bpl.n	80226b2 <_vfiprintf_r+0xe2>
 80226a8:	2353      	movs	r3, #83	@ 0x53
 80226aa:	a904      	add	r1, sp, #16
 80226ac:	185b      	adds	r3, r3, r1
 80226ae:	2120      	movs	r1, #32
 80226b0:	7019      	strb	r1, [r3, #0]
 80226b2:	0713      	lsls	r3, r2, #28
 80226b4:	d504      	bpl.n	80226c0 <_vfiprintf_r+0xf0>
 80226b6:	2353      	movs	r3, #83	@ 0x53
 80226b8:	a904      	add	r1, sp, #16
 80226ba:	185b      	adds	r3, r3, r1
 80226bc:	212b      	movs	r1, #43	@ 0x2b
 80226be:	7019      	strb	r1, [r3, #0]
 80226c0:	782b      	ldrb	r3, [r5, #0]
 80226c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80226c4:	d016      	beq.n	80226f4 <_vfiprintf_r+0x124>
 80226c6:	002e      	movs	r6, r5
 80226c8:	2100      	movs	r1, #0
 80226ca:	200a      	movs	r0, #10
 80226cc:	68e3      	ldr	r3, [r4, #12]
 80226ce:	7832      	ldrb	r2, [r6, #0]
 80226d0:	1c75      	adds	r5, r6, #1
 80226d2:	3a30      	subs	r2, #48	@ 0x30
 80226d4:	2a09      	cmp	r2, #9
 80226d6:	d950      	bls.n	802277a <_vfiprintf_r+0x1aa>
 80226d8:	2900      	cmp	r1, #0
 80226da:	d111      	bne.n	8022700 <_vfiprintf_r+0x130>
 80226dc:	e017      	b.n	802270e <_vfiprintf_r+0x13e>
 80226de:	3601      	adds	r6, #1
 80226e0:	e7af      	b.n	8022642 <_vfiprintf_r+0x72>
 80226e2:	9b05      	ldr	r3, [sp, #20]
 80226e4:	6822      	ldr	r2, [r4, #0]
 80226e6:	1ac0      	subs	r0, r0, r3
 80226e8:	2301      	movs	r3, #1
 80226ea:	4083      	lsls	r3, r0
 80226ec:	4313      	orrs	r3, r2
 80226ee:	0035      	movs	r5, r6
 80226f0:	6023      	str	r3, [r4, #0]
 80226f2:	e7cc      	b.n	802268e <_vfiprintf_r+0xbe>
 80226f4:	9b07      	ldr	r3, [sp, #28]
 80226f6:	1d19      	adds	r1, r3, #4
 80226f8:	681b      	ldr	r3, [r3, #0]
 80226fa:	9107      	str	r1, [sp, #28]
 80226fc:	2b00      	cmp	r3, #0
 80226fe:	db01      	blt.n	8022704 <_vfiprintf_r+0x134>
 8022700:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022702:	e004      	b.n	802270e <_vfiprintf_r+0x13e>
 8022704:	425b      	negs	r3, r3
 8022706:	60e3      	str	r3, [r4, #12]
 8022708:	2302      	movs	r3, #2
 802270a:	4313      	orrs	r3, r2
 802270c:	6023      	str	r3, [r4, #0]
 802270e:	7833      	ldrb	r3, [r6, #0]
 8022710:	2b2e      	cmp	r3, #46	@ 0x2e
 8022712:	d10c      	bne.n	802272e <_vfiprintf_r+0x15e>
 8022714:	7873      	ldrb	r3, [r6, #1]
 8022716:	2b2a      	cmp	r3, #42	@ 0x2a
 8022718:	d134      	bne.n	8022784 <_vfiprintf_r+0x1b4>
 802271a:	9b07      	ldr	r3, [sp, #28]
 802271c:	3602      	adds	r6, #2
 802271e:	1d1a      	adds	r2, r3, #4
 8022720:	681b      	ldr	r3, [r3, #0]
 8022722:	9207      	str	r2, [sp, #28]
 8022724:	2b00      	cmp	r3, #0
 8022726:	da01      	bge.n	802272c <_vfiprintf_r+0x15c>
 8022728:	2301      	movs	r3, #1
 802272a:	425b      	negs	r3, r3
 802272c:	9309      	str	r3, [sp, #36]	@ 0x24
 802272e:	4d32      	ldr	r5, [pc, #200]	@ (80227f8 <_vfiprintf_r+0x228>)
 8022730:	2203      	movs	r2, #3
 8022732:	0028      	movs	r0, r5
 8022734:	7831      	ldrb	r1, [r6, #0]
 8022736:	f7fd fdde 	bl	80202f6 <memchr>
 802273a:	2800      	cmp	r0, #0
 802273c:	d006      	beq.n	802274c <_vfiprintf_r+0x17c>
 802273e:	2340      	movs	r3, #64	@ 0x40
 8022740:	1b40      	subs	r0, r0, r5
 8022742:	4083      	lsls	r3, r0
 8022744:	6822      	ldr	r2, [r4, #0]
 8022746:	3601      	adds	r6, #1
 8022748:	4313      	orrs	r3, r2
 802274a:	6023      	str	r3, [r4, #0]
 802274c:	7831      	ldrb	r1, [r6, #0]
 802274e:	2206      	movs	r2, #6
 8022750:	482a      	ldr	r0, [pc, #168]	@ (80227fc <_vfiprintf_r+0x22c>)
 8022752:	1c75      	adds	r5, r6, #1
 8022754:	7621      	strb	r1, [r4, #24]
 8022756:	f7fd fdce 	bl	80202f6 <memchr>
 802275a:	2800      	cmp	r0, #0
 802275c:	d040      	beq.n	80227e0 <_vfiprintf_r+0x210>
 802275e:	4b28      	ldr	r3, [pc, #160]	@ (8022800 <_vfiprintf_r+0x230>)
 8022760:	2b00      	cmp	r3, #0
 8022762:	d122      	bne.n	80227aa <_vfiprintf_r+0x1da>
 8022764:	2207      	movs	r2, #7
 8022766:	9b07      	ldr	r3, [sp, #28]
 8022768:	3307      	adds	r3, #7
 802276a:	4393      	bics	r3, r2
 802276c:	3308      	adds	r3, #8
 802276e:	9307      	str	r3, [sp, #28]
 8022770:	6963      	ldr	r3, [r4, #20]
 8022772:	9a04      	ldr	r2, [sp, #16]
 8022774:	189b      	adds	r3, r3, r2
 8022776:	6163      	str	r3, [r4, #20]
 8022778:	e762      	b.n	8022640 <_vfiprintf_r+0x70>
 802277a:	4343      	muls	r3, r0
 802277c:	002e      	movs	r6, r5
 802277e:	2101      	movs	r1, #1
 8022780:	189b      	adds	r3, r3, r2
 8022782:	e7a4      	b.n	80226ce <_vfiprintf_r+0xfe>
 8022784:	2300      	movs	r3, #0
 8022786:	200a      	movs	r0, #10
 8022788:	0019      	movs	r1, r3
 802278a:	3601      	adds	r6, #1
 802278c:	6063      	str	r3, [r4, #4]
 802278e:	7832      	ldrb	r2, [r6, #0]
 8022790:	1c75      	adds	r5, r6, #1
 8022792:	3a30      	subs	r2, #48	@ 0x30
 8022794:	2a09      	cmp	r2, #9
 8022796:	d903      	bls.n	80227a0 <_vfiprintf_r+0x1d0>
 8022798:	2b00      	cmp	r3, #0
 802279a:	d0c8      	beq.n	802272e <_vfiprintf_r+0x15e>
 802279c:	9109      	str	r1, [sp, #36]	@ 0x24
 802279e:	e7c6      	b.n	802272e <_vfiprintf_r+0x15e>
 80227a0:	4341      	muls	r1, r0
 80227a2:	002e      	movs	r6, r5
 80227a4:	2301      	movs	r3, #1
 80227a6:	1889      	adds	r1, r1, r2
 80227a8:	e7f1      	b.n	802278e <_vfiprintf_r+0x1be>
 80227aa:	aa07      	add	r2, sp, #28
 80227ac:	9200      	str	r2, [sp, #0]
 80227ae:	0021      	movs	r1, r4
 80227b0:	003a      	movs	r2, r7
 80227b2:	4b14      	ldr	r3, [pc, #80]	@ (8022804 <_vfiprintf_r+0x234>)
 80227b4:	9803      	ldr	r0, [sp, #12]
 80227b6:	f7fc fe99 	bl	801f4ec <_printf_float>
 80227ba:	9004      	str	r0, [sp, #16]
 80227bc:	9b04      	ldr	r3, [sp, #16]
 80227be:	3301      	adds	r3, #1
 80227c0:	d1d6      	bne.n	8022770 <_vfiprintf_r+0x1a0>
 80227c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80227c4:	07db      	lsls	r3, r3, #31
 80227c6:	d405      	bmi.n	80227d4 <_vfiprintf_r+0x204>
 80227c8:	89bb      	ldrh	r3, [r7, #12]
 80227ca:	059b      	lsls	r3, r3, #22
 80227cc:	d402      	bmi.n	80227d4 <_vfiprintf_r+0x204>
 80227ce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80227d0:	f7fd fd90 	bl	80202f4 <__retarget_lock_release_recursive>
 80227d4:	89bb      	ldrh	r3, [r7, #12]
 80227d6:	065b      	lsls	r3, r3, #25
 80227d8:	d500      	bpl.n	80227dc <_vfiprintf_r+0x20c>
 80227da:	e71e      	b.n	802261a <_vfiprintf_r+0x4a>
 80227dc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80227de:	e71e      	b.n	802261e <_vfiprintf_r+0x4e>
 80227e0:	aa07      	add	r2, sp, #28
 80227e2:	9200      	str	r2, [sp, #0]
 80227e4:	0021      	movs	r1, r4
 80227e6:	003a      	movs	r2, r7
 80227e8:	4b06      	ldr	r3, [pc, #24]	@ (8022804 <_vfiprintf_r+0x234>)
 80227ea:	9803      	ldr	r0, [sp, #12]
 80227ec:	f7fd f92c 	bl	801fa48 <_printf_i>
 80227f0:	e7e3      	b.n	80227ba <_vfiprintf_r+0x1ea>
 80227f2:	46c0      	nop			@ (mov r8, r8)
 80227f4:	08025ee0 	.word	0x08025ee0
 80227f8:	08025ee6 	.word	0x08025ee6
 80227fc:	08025eea 	.word	0x08025eea
 8022800:	0801f4ed 	.word	0x0801f4ed
 8022804:	080225ab 	.word	0x080225ab

08022808 <__sflush_r>:
 8022808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802280a:	220c      	movs	r2, #12
 802280c:	5e8b      	ldrsh	r3, [r1, r2]
 802280e:	0005      	movs	r5, r0
 8022810:	000c      	movs	r4, r1
 8022812:	071a      	lsls	r2, r3, #28
 8022814:	d456      	bmi.n	80228c4 <__sflush_r+0xbc>
 8022816:	684a      	ldr	r2, [r1, #4]
 8022818:	2a00      	cmp	r2, #0
 802281a:	dc02      	bgt.n	8022822 <__sflush_r+0x1a>
 802281c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 802281e:	2a00      	cmp	r2, #0
 8022820:	dd4e      	ble.n	80228c0 <__sflush_r+0xb8>
 8022822:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022824:	2f00      	cmp	r7, #0
 8022826:	d04b      	beq.n	80228c0 <__sflush_r+0xb8>
 8022828:	2200      	movs	r2, #0
 802282a:	2080      	movs	r0, #128	@ 0x80
 802282c:	682e      	ldr	r6, [r5, #0]
 802282e:	602a      	str	r2, [r5, #0]
 8022830:	001a      	movs	r2, r3
 8022832:	0140      	lsls	r0, r0, #5
 8022834:	6a21      	ldr	r1, [r4, #32]
 8022836:	4002      	ands	r2, r0
 8022838:	4203      	tst	r3, r0
 802283a:	d033      	beq.n	80228a4 <__sflush_r+0x9c>
 802283c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802283e:	89a3      	ldrh	r3, [r4, #12]
 8022840:	075b      	lsls	r3, r3, #29
 8022842:	d506      	bpl.n	8022852 <__sflush_r+0x4a>
 8022844:	6863      	ldr	r3, [r4, #4]
 8022846:	1ad2      	subs	r2, r2, r3
 8022848:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802284a:	2b00      	cmp	r3, #0
 802284c:	d001      	beq.n	8022852 <__sflush_r+0x4a>
 802284e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022850:	1ad2      	subs	r2, r2, r3
 8022852:	2300      	movs	r3, #0
 8022854:	0028      	movs	r0, r5
 8022856:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8022858:	6a21      	ldr	r1, [r4, #32]
 802285a:	47b8      	blx	r7
 802285c:	89a2      	ldrh	r2, [r4, #12]
 802285e:	1c43      	adds	r3, r0, #1
 8022860:	d106      	bne.n	8022870 <__sflush_r+0x68>
 8022862:	6829      	ldr	r1, [r5, #0]
 8022864:	291d      	cmp	r1, #29
 8022866:	d846      	bhi.n	80228f6 <__sflush_r+0xee>
 8022868:	4b29      	ldr	r3, [pc, #164]	@ (8022910 <__sflush_r+0x108>)
 802286a:	410b      	asrs	r3, r1
 802286c:	07db      	lsls	r3, r3, #31
 802286e:	d442      	bmi.n	80228f6 <__sflush_r+0xee>
 8022870:	2300      	movs	r3, #0
 8022872:	6063      	str	r3, [r4, #4]
 8022874:	6923      	ldr	r3, [r4, #16]
 8022876:	6023      	str	r3, [r4, #0]
 8022878:	04d2      	lsls	r2, r2, #19
 802287a:	d505      	bpl.n	8022888 <__sflush_r+0x80>
 802287c:	1c43      	adds	r3, r0, #1
 802287e:	d102      	bne.n	8022886 <__sflush_r+0x7e>
 8022880:	682b      	ldr	r3, [r5, #0]
 8022882:	2b00      	cmp	r3, #0
 8022884:	d100      	bne.n	8022888 <__sflush_r+0x80>
 8022886:	6560      	str	r0, [r4, #84]	@ 0x54
 8022888:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802288a:	602e      	str	r6, [r5, #0]
 802288c:	2900      	cmp	r1, #0
 802288e:	d017      	beq.n	80228c0 <__sflush_r+0xb8>
 8022890:	0023      	movs	r3, r4
 8022892:	3344      	adds	r3, #68	@ 0x44
 8022894:	4299      	cmp	r1, r3
 8022896:	d002      	beq.n	802289e <__sflush_r+0x96>
 8022898:	0028      	movs	r0, r5
 802289a:	f7fe fbc9 	bl	8021030 <_free_r>
 802289e:	2300      	movs	r3, #0
 80228a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80228a2:	e00d      	b.n	80228c0 <__sflush_r+0xb8>
 80228a4:	2301      	movs	r3, #1
 80228a6:	0028      	movs	r0, r5
 80228a8:	47b8      	blx	r7
 80228aa:	0002      	movs	r2, r0
 80228ac:	1c43      	adds	r3, r0, #1
 80228ae:	d1c6      	bne.n	802283e <__sflush_r+0x36>
 80228b0:	682b      	ldr	r3, [r5, #0]
 80228b2:	2b00      	cmp	r3, #0
 80228b4:	d0c3      	beq.n	802283e <__sflush_r+0x36>
 80228b6:	2b1d      	cmp	r3, #29
 80228b8:	d001      	beq.n	80228be <__sflush_r+0xb6>
 80228ba:	2b16      	cmp	r3, #22
 80228bc:	d11a      	bne.n	80228f4 <__sflush_r+0xec>
 80228be:	602e      	str	r6, [r5, #0]
 80228c0:	2000      	movs	r0, #0
 80228c2:	e01e      	b.n	8022902 <__sflush_r+0xfa>
 80228c4:	690e      	ldr	r6, [r1, #16]
 80228c6:	2e00      	cmp	r6, #0
 80228c8:	d0fa      	beq.n	80228c0 <__sflush_r+0xb8>
 80228ca:	680f      	ldr	r7, [r1, #0]
 80228cc:	600e      	str	r6, [r1, #0]
 80228ce:	1bba      	subs	r2, r7, r6
 80228d0:	9201      	str	r2, [sp, #4]
 80228d2:	2200      	movs	r2, #0
 80228d4:	079b      	lsls	r3, r3, #30
 80228d6:	d100      	bne.n	80228da <__sflush_r+0xd2>
 80228d8:	694a      	ldr	r2, [r1, #20]
 80228da:	60a2      	str	r2, [r4, #8]
 80228dc:	9b01      	ldr	r3, [sp, #4]
 80228de:	2b00      	cmp	r3, #0
 80228e0:	ddee      	ble.n	80228c0 <__sflush_r+0xb8>
 80228e2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80228e4:	0032      	movs	r2, r6
 80228e6:	001f      	movs	r7, r3
 80228e8:	0028      	movs	r0, r5
 80228ea:	9b01      	ldr	r3, [sp, #4]
 80228ec:	6a21      	ldr	r1, [r4, #32]
 80228ee:	47b8      	blx	r7
 80228f0:	2800      	cmp	r0, #0
 80228f2:	dc07      	bgt.n	8022904 <__sflush_r+0xfc>
 80228f4:	89a2      	ldrh	r2, [r4, #12]
 80228f6:	2340      	movs	r3, #64	@ 0x40
 80228f8:	2001      	movs	r0, #1
 80228fa:	4313      	orrs	r3, r2
 80228fc:	b21b      	sxth	r3, r3
 80228fe:	81a3      	strh	r3, [r4, #12]
 8022900:	4240      	negs	r0, r0
 8022902:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022904:	9b01      	ldr	r3, [sp, #4]
 8022906:	1836      	adds	r6, r6, r0
 8022908:	1a1b      	subs	r3, r3, r0
 802290a:	9301      	str	r3, [sp, #4]
 802290c:	e7e6      	b.n	80228dc <__sflush_r+0xd4>
 802290e:	46c0      	nop			@ (mov r8, r8)
 8022910:	dfbffffe 	.word	0xdfbffffe

08022914 <_fflush_r>:
 8022914:	690b      	ldr	r3, [r1, #16]
 8022916:	b570      	push	{r4, r5, r6, lr}
 8022918:	0005      	movs	r5, r0
 802291a:	000c      	movs	r4, r1
 802291c:	2b00      	cmp	r3, #0
 802291e:	d102      	bne.n	8022926 <_fflush_r+0x12>
 8022920:	2500      	movs	r5, #0
 8022922:	0028      	movs	r0, r5
 8022924:	bd70      	pop	{r4, r5, r6, pc}
 8022926:	2800      	cmp	r0, #0
 8022928:	d004      	beq.n	8022934 <_fflush_r+0x20>
 802292a:	6a03      	ldr	r3, [r0, #32]
 802292c:	2b00      	cmp	r3, #0
 802292e:	d101      	bne.n	8022934 <_fflush_r+0x20>
 8022930:	f7fd fa28 	bl	801fd84 <__sinit>
 8022934:	220c      	movs	r2, #12
 8022936:	5ea3      	ldrsh	r3, [r4, r2]
 8022938:	2b00      	cmp	r3, #0
 802293a:	d0f1      	beq.n	8022920 <_fflush_r+0xc>
 802293c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802293e:	07d2      	lsls	r2, r2, #31
 8022940:	d404      	bmi.n	802294c <_fflush_r+0x38>
 8022942:	059b      	lsls	r3, r3, #22
 8022944:	d402      	bmi.n	802294c <_fflush_r+0x38>
 8022946:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022948:	f7fd fcd3 	bl	80202f2 <__retarget_lock_acquire_recursive>
 802294c:	0028      	movs	r0, r5
 802294e:	0021      	movs	r1, r4
 8022950:	f7ff ff5a 	bl	8022808 <__sflush_r>
 8022954:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022956:	0005      	movs	r5, r0
 8022958:	07db      	lsls	r3, r3, #31
 802295a:	d4e2      	bmi.n	8022922 <_fflush_r+0xe>
 802295c:	89a3      	ldrh	r3, [r4, #12]
 802295e:	059b      	lsls	r3, r3, #22
 8022960:	d4df      	bmi.n	8022922 <_fflush_r+0xe>
 8022962:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022964:	f7fd fcc6 	bl	80202f4 <__retarget_lock_release_recursive>
 8022968:	e7db      	b.n	8022922 <_fflush_r+0xe>
	...

0802296c <__swhatbuf_r>:
 802296c:	b570      	push	{r4, r5, r6, lr}
 802296e:	000e      	movs	r6, r1
 8022970:	001d      	movs	r5, r3
 8022972:	230e      	movs	r3, #14
 8022974:	5ec9      	ldrsh	r1, [r1, r3]
 8022976:	0014      	movs	r4, r2
 8022978:	b096      	sub	sp, #88	@ 0x58
 802297a:	2900      	cmp	r1, #0
 802297c:	da0c      	bge.n	8022998 <__swhatbuf_r+0x2c>
 802297e:	89b2      	ldrh	r2, [r6, #12]
 8022980:	2380      	movs	r3, #128	@ 0x80
 8022982:	0011      	movs	r1, r2
 8022984:	4019      	ands	r1, r3
 8022986:	421a      	tst	r2, r3
 8022988:	d114      	bne.n	80229b4 <__swhatbuf_r+0x48>
 802298a:	2380      	movs	r3, #128	@ 0x80
 802298c:	00db      	lsls	r3, r3, #3
 802298e:	2000      	movs	r0, #0
 8022990:	6029      	str	r1, [r5, #0]
 8022992:	6023      	str	r3, [r4, #0]
 8022994:	b016      	add	sp, #88	@ 0x58
 8022996:	bd70      	pop	{r4, r5, r6, pc}
 8022998:	466a      	mov	r2, sp
 802299a:	f000 f865 	bl	8022a68 <_fstat_r>
 802299e:	2800      	cmp	r0, #0
 80229a0:	dbed      	blt.n	802297e <__swhatbuf_r+0x12>
 80229a2:	23f0      	movs	r3, #240	@ 0xf0
 80229a4:	9901      	ldr	r1, [sp, #4]
 80229a6:	021b      	lsls	r3, r3, #8
 80229a8:	4019      	ands	r1, r3
 80229aa:	4b04      	ldr	r3, [pc, #16]	@ (80229bc <__swhatbuf_r+0x50>)
 80229ac:	18c9      	adds	r1, r1, r3
 80229ae:	424b      	negs	r3, r1
 80229b0:	4159      	adcs	r1, r3
 80229b2:	e7ea      	b.n	802298a <__swhatbuf_r+0x1e>
 80229b4:	2100      	movs	r1, #0
 80229b6:	2340      	movs	r3, #64	@ 0x40
 80229b8:	e7e9      	b.n	802298e <__swhatbuf_r+0x22>
 80229ba:	46c0      	nop			@ (mov r8, r8)
 80229bc:	ffffe000 	.word	0xffffe000

080229c0 <__smakebuf_r>:
 80229c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80229c2:	2602      	movs	r6, #2
 80229c4:	898b      	ldrh	r3, [r1, #12]
 80229c6:	0005      	movs	r5, r0
 80229c8:	000c      	movs	r4, r1
 80229ca:	b085      	sub	sp, #20
 80229cc:	4233      	tst	r3, r6
 80229ce:	d007      	beq.n	80229e0 <__smakebuf_r+0x20>
 80229d0:	0023      	movs	r3, r4
 80229d2:	3347      	adds	r3, #71	@ 0x47
 80229d4:	6023      	str	r3, [r4, #0]
 80229d6:	6123      	str	r3, [r4, #16]
 80229d8:	2301      	movs	r3, #1
 80229da:	6163      	str	r3, [r4, #20]
 80229dc:	b005      	add	sp, #20
 80229de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80229e0:	ab03      	add	r3, sp, #12
 80229e2:	aa02      	add	r2, sp, #8
 80229e4:	f7ff ffc2 	bl	802296c <__swhatbuf_r>
 80229e8:	9f02      	ldr	r7, [sp, #8]
 80229ea:	9001      	str	r0, [sp, #4]
 80229ec:	0039      	movs	r1, r7
 80229ee:	0028      	movs	r0, r5
 80229f0:	f7fe feee 	bl	80217d0 <_malloc_r>
 80229f4:	2800      	cmp	r0, #0
 80229f6:	d108      	bne.n	8022a0a <__smakebuf_r+0x4a>
 80229f8:	220c      	movs	r2, #12
 80229fa:	5ea3      	ldrsh	r3, [r4, r2]
 80229fc:	059a      	lsls	r2, r3, #22
 80229fe:	d4ed      	bmi.n	80229dc <__smakebuf_r+0x1c>
 8022a00:	2203      	movs	r2, #3
 8022a02:	4393      	bics	r3, r2
 8022a04:	431e      	orrs	r6, r3
 8022a06:	81a6      	strh	r6, [r4, #12]
 8022a08:	e7e2      	b.n	80229d0 <__smakebuf_r+0x10>
 8022a0a:	2380      	movs	r3, #128	@ 0x80
 8022a0c:	89a2      	ldrh	r2, [r4, #12]
 8022a0e:	6020      	str	r0, [r4, #0]
 8022a10:	4313      	orrs	r3, r2
 8022a12:	81a3      	strh	r3, [r4, #12]
 8022a14:	9b03      	ldr	r3, [sp, #12]
 8022a16:	6120      	str	r0, [r4, #16]
 8022a18:	6167      	str	r7, [r4, #20]
 8022a1a:	2b00      	cmp	r3, #0
 8022a1c:	d00c      	beq.n	8022a38 <__smakebuf_r+0x78>
 8022a1e:	0028      	movs	r0, r5
 8022a20:	230e      	movs	r3, #14
 8022a22:	5ee1      	ldrsh	r1, [r4, r3]
 8022a24:	f000 f832 	bl	8022a8c <_isatty_r>
 8022a28:	2800      	cmp	r0, #0
 8022a2a:	d005      	beq.n	8022a38 <__smakebuf_r+0x78>
 8022a2c:	2303      	movs	r3, #3
 8022a2e:	89a2      	ldrh	r2, [r4, #12]
 8022a30:	439a      	bics	r2, r3
 8022a32:	3b02      	subs	r3, #2
 8022a34:	4313      	orrs	r3, r2
 8022a36:	81a3      	strh	r3, [r4, #12]
 8022a38:	89a3      	ldrh	r3, [r4, #12]
 8022a3a:	9a01      	ldr	r2, [sp, #4]
 8022a3c:	4313      	orrs	r3, r2
 8022a3e:	81a3      	strh	r3, [r4, #12]
 8022a40:	e7cc      	b.n	80229dc <__smakebuf_r+0x1c>

08022a42 <memmove>:
 8022a42:	b510      	push	{r4, lr}
 8022a44:	4288      	cmp	r0, r1
 8022a46:	d806      	bhi.n	8022a56 <memmove+0x14>
 8022a48:	2300      	movs	r3, #0
 8022a4a:	429a      	cmp	r2, r3
 8022a4c:	d008      	beq.n	8022a60 <memmove+0x1e>
 8022a4e:	5ccc      	ldrb	r4, [r1, r3]
 8022a50:	54c4      	strb	r4, [r0, r3]
 8022a52:	3301      	adds	r3, #1
 8022a54:	e7f9      	b.n	8022a4a <memmove+0x8>
 8022a56:	188b      	adds	r3, r1, r2
 8022a58:	4298      	cmp	r0, r3
 8022a5a:	d2f5      	bcs.n	8022a48 <memmove+0x6>
 8022a5c:	3a01      	subs	r2, #1
 8022a5e:	d200      	bcs.n	8022a62 <memmove+0x20>
 8022a60:	bd10      	pop	{r4, pc}
 8022a62:	5c8b      	ldrb	r3, [r1, r2]
 8022a64:	5483      	strb	r3, [r0, r2]
 8022a66:	e7f9      	b.n	8022a5c <memmove+0x1a>

08022a68 <_fstat_r>:
 8022a68:	2300      	movs	r3, #0
 8022a6a:	b570      	push	{r4, r5, r6, lr}
 8022a6c:	4d06      	ldr	r5, [pc, #24]	@ (8022a88 <_fstat_r+0x20>)
 8022a6e:	0004      	movs	r4, r0
 8022a70:	0008      	movs	r0, r1
 8022a72:	0011      	movs	r1, r2
 8022a74:	602b      	str	r3, [r5, #0]
 8022a76:	f7eb f867 	bl	800db48 <_fstat>
 8022a7a:	1c43      	adds	r3, r0, #1
 8022a7c:	d103      	bne.n	8022a86 <_fstat_r+0x1e>
 8022a7e:	682b      	ldr	r3, [r5, #0]
 8022a80:	2b00      	cmp	r3, #0
 8022a82:	d000      	beq.n	8022a86 <_fstat_r+0x1e>
 8022a84:	6023      	str	r3, [r4, #0]
 8022a86:	bd70      	pop	{r4, r5, r6, pc}
 8022a88:	2000399c 	.word	0x2000399c

08022a8c <_isatty_r>:
 8022a8c:	2300      	movs	r3, #0
 8022a8e:	b570      	push	{r4, r5, r6, lr}
 8022a90:	4d06      	ldr	r5, [pc, #24]	@ (8022aac <_isatty_r+0x20>)
 8022a92:	0004      	movs	r4, r0
 8022a94:	0008      	movs	r0, r1
 8022a96:	602b      	str	r3, [r5, #0]
 8022a98:	f7eb f864 	bl	800db64 <_isatty>
 8022a9c:	1c43      	adds	r3, r0, #1
 8022a9e:	d103      	bne.n	8022aa8 <_isatty_r+0x1c>
 8022aa0:	682b      	ldr	r3, [r5, #0]
 8022aa2:	2b00      	cmp	r3, #0
 8022aa4:	d000      	beq.n	8022aa8 <_isatty_r+0x1c>
 8022aa6:	6023      	str	r3, [r4, #0]
 8022aa8:	bd70      	pop	{r4, r5, r6, pc}
 8022aaa:	46c0      	nop			@ (mov r8, r8)
 8022aac:	2000399c 	.word	0x2000399c

08022ab0 <_sbrk_r>:
 8022ab0:	2300      	movs	r3, #0
 8022ab2:	b570      	push	{r4, r5, r6, lr}
 8022ab4:	4d06      	ldr	r5, [pc, #24]	@ (8022ad0 <_sbrk_r+0x20>)
 8022ab6:	0004      	movs	r4, r0
 8022ab8:	0008      	movs	r0, r1
 8022aba:	602b      	str	r3, [r5, #0]
 8022abc:	f7eb f866 	bl	800db8c <_sbrk>
 8022ac0:	1c43      	adds	r3, r0, #1
 8022ac2:	d103      	bne.n	8022acc <_sbrk_r+0x1c>
 8022ac4:	682b      	ldr	r3, [r5, #0]
 8022ac6:	2b00      	cmp	r3, #0
 8022ac8:	d000      	beq.n	8022acc <_sbrk_r+0x1c>
 8022aca:	6023      	str	r3, [r4, #0]
 8022acc:	bd70      	pop	{r4, r5, r6, pc}
 8022ace:	46c0      	nop			@ (mov r8, r8)
 8022ad0:	2000399c 	.word	0x2000399c

08022ad4 <__assert_func>:
 8022ad4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8022ad6:	0014      	movs	r4, r2
 8022ad8:	001a      	movs	r2, r3
 8022ada:	4b09      	ldr	r3, [pc, #36]	@ (8022b00 <__assert_func+0x2c>)
 8022adc:	0005      	movs	r5, r0
 8022ade:	681b      	ldr	r3, [r3, #0]
 8022ae0:	000e      	movs	r6, r1
 8022ae2:	68d8      	ldr	r0, [r3, #12]
 8022ae4:	4b07      	ldr	r3, [pc, #28]	@ (8022b04 <__assert_func+0x30>)
 8022ae6:	2c00      	cmp	r4, #0
 8022ae8:	d101      	bne.n	8022aee <__assert_func+0x1a>
 8022aea:	4b07      	ldr	r3, [pc, #28]	@ (8022b08 <__assert_func+0x34>)
 8022aec:	001c      	movs	r4, r3
 8022aee:	4907      	ldr	r1, [pc, #28]	@ (8022b0c <__assert_func+0x38>)
 8022af0:	9301      	str	r3, [sp, #4]
 8022af2:	9402      	str	r4, [sp, #8]
 8022af4:	002b      	movs	r3, r5
 8022af6:	9600      	str	r6, [sp, #0]
 8022af8:	f000 f866 	bl	8022bc8 <fiprintf>
 8022afc:	f000 f874 	bl	8022be8 <abort>
 8022b00:	200003cc 	.word	0x200003cc
 8022b04:	08025ef1 	.word	0x08025ef1
 8022b08:	08025f2c 	.word	0x08025f2c
 8022b0c:	08025efe 	.word	0x08025efe

08022b10 <_calloc_r>:
 8022b10:	b570      	push	{r4, r5, r6, lr}
 8022b12:	0c0b      	lsrs	r3, r1, #16
 8022b14:	0c15      	lsrs	r5, r2, #16
 8022b16:	2b00      	cmp	r3, #0
 8022b18:	d11e      	bne.n	8022b58 <_calloc_r+0x48>
 8022b1a:	2d00      	cmp	r5, #0
 8022b1c:	d10c      	bne.n	8022b38 <_calloc_r+0x28>
 8022b1e:	b289      	uxth	r1, r1
 8022b20:	b294      	uxth	r4, r2
 8022b22:	434c      	muls	r4, r1
 8022b24:	0021      	movs	r1, r4
 8022b26:	f7fe fe53 	bl	80217d0 <_malloc_r>
 8022b2a:	1e05      	subs	r5, r0, #0
 8022b2c:	d01a      	beq.n	8022b64 <_calloc_r+0x54>
 8022b2e:	0022      	movs	r2, r4
 8022b30:	2100      	movs	r1, #0
 8022b32:	f7fd fb0f 	bl	8020154 <memset>
 8022b36:	e016      	b.n	8022b66 <_calloc_r+0x56>
 8022b38:	1c2b      	adds	r3, r5, #0
 8022b3a:	1c0c      	adds	r4, r1, #0
 8022b3c:	b289      	uxth	r1, r1
 8022b3e:	b292      	uxth	r2, r2
 8022b40:	434a      	muls	r2, r1
 8022b42:	b29b      	uxth	r3, r3
 8022b44:	b2a1      	uxth	r1, r4
 8022b46:	4359      	muls	r1, r3
 8022b48:	0c14      	lsrs	r4, r2, #16
 8022b4a:	190c      	adds	r4, r1, r4
 8022b4c:	0c23      	lsrs	r3, r4, #16
 8022b4e:	d107      	bne.n	8022b60 <_calloc_r+0x50>
 8022b50:	0424      	lsls	r4, r4, #16
 8022b52:	b292      	uxth	r2, r2
 8022b54:	4314      	orrs	r4, r2
 8022b56:	e7e5      	b.n	8022b24 <_calloc_r+0x14>
 8022b58:	2d00      	cmp	r5, #0
 8022b5a:	d101      	bne.n	8022b60 <_calloc_r+0x50>
 8022b5c:	1c14      	adds	r4, r2, #0
 8022b5e:	e7ed      	b.n	8022b3c <_calloc_r+0x2c>
 8022b60:	230c      	movs	r3, #12
 8022b62:	6003      	str	r3, [r0, #0]
 8022b64:	2500      	movs	r5, #0
 8022b66:	0028      	movs	r0, r5
 8022b68:	bd70      	pop	{r4, r5, r6, pc}

08022b6a <_realloc_r>:
 8022b6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022b6c:	0006      	movs	r6, r0
 8022b6e:	000c      	movs	r4, r1
 8022b70:	0015      	movs	r5, r2
 8022b72:	2900      	cmp	r1, #0
 8022b74:	d105      	bne.n	8022b82 <_realloc_r+0x18>
 8022b76:	0011      	movs	r1, r2
 8022b78:	f7fe fe2a 	bl	80217d0 <_malloc_r>
 8022b7c:	0004      	movs	r4, r0
 8022b7e:	0020      	movs	r0, r4
 8022b80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022b82:	2a00      	cmp	r2, #0
 8022b84:	d103      	bne.n	8022b8e <_realloc_r+0x24>
 8022b86:	f7fe fa53 	bl	8021030 <_free_r>
 8022b8a:	2400      	movs	r4, #0
 8022b8c:	e7f7      	b.n	8022b7e <_realloc_r+0x14>
 8022b8e:	f000 f832 	bl	8022bf6 <_malloc_usable_size_r>
 8022b92:	0007      	movs	r7, r0
 8022b94:	4285      	cmp	r5, r0
 8022b96:	d802      	bhi.n	8022b9e <_realloc_r+0x34>
 8022b98:	0843      	lsrs	r3, r0, #1
 8022b9a:	42ab      	cmp	r3, r5
 8022b9c:	d3ef      	bcc.n	8022b7e <_realloc_r+0x14>
 8022b9e:	0029      	movs	r1, r5
 8022ba0:	0030      	movs	r0, r6
 8022ba2:	f7fe fe15 	bl	80217d0 <_malloc_r>
 8022ba6:	9001      	str	r0, [sp, #4]
 8022ba8:	2800      	cmp	r0, #0
 8022baa:	d0ee      	beq.n	8022b8a <_realloc_r+0x20>
 8022bac:	002a      	movs	r2, r5
 8022bae:	42bd      	cmp	r5, r7
 8022bb0:	d900      	bls.n	8022bb4 <_realloc_r+0x4a>
 8022bb2:	003a      	movs	r2, r7
 8022bb4:	0021      	movs	r1, r4
 8022bb6:	9801      	ldr	r0, [sp, #4]
 8022bb8:	f7fd fba8 	bl	802030c <memcpy>
 8022bbc:	0021      	movs	r1, r4
 8022bbe:	0030      	movs	r0, r6
 8022bc0:	f7fe fa36 	bl	8021030 <_free_r>
 8022bc4:	9c01      	ldr	r4, [sp, #4]
 8022bc6:	e7da      	b.n	8022b7e <_realloc_r+0x14>

08022bc8 <fiprintf>:
 8022bc8:	b40e      	push	{r1, r2, r3}
 8022bca:	b517      	push	{r0, r1, r2, r4, lr}
 8022bcc:	4c05      	ldr	r4, [pc, #20]	@ (8022be4 <fiprintf+0x1c>)
 8022bce:	ab05      	add	r3, sp, #20
 8022bd0:	cb04      	ldmia	r3!, {r2}
 8022bd2:	0001      	movs	r1, r0
 8022bd4:	6820      	ldr	r0, [r4, #0]
 8022bd6:	9301      	str	r3, [sp, #4]
 8022bd8:	f7ff fcfa 	bl	80225d0 <_vfiprintf_r>
 8022bdc:	bc1e      	pop	{r1, r2, r3, r4}
 8022bde:	bc08      	pop	{r3}
 8022be0:	b003      	add	sp, #12
 8022be2:	4718      	bx	r3
 8022be4:	200003cc 	.word	0x200003cc

08022be8 <abort>:
 8022be8:	2006      	movs	r0, #6
 8022bea:	b510      	push	{r4, lr}
 8022bec:	f000 f834 	bl	8022c58 <raise>
 8022bf0:	2001      	movs	r0, #1
 8022bf2:	f7ea ff75 	bl	800dae0 <_exit>

08022bf6 <_malloc_usable_size_r>:
 8022bf6:	1f0b      	subs	r3, r1, #4
 8022bf8:	681b      	ldr	r3, [r3, #0]
 8022bfa:	1f18      	subs	r0, r3, #4
 8022bfc:	2b00      	cmp	r3, #0
 8022bfe:	da01      	bge.n	8022c04 <_malloc_usable_size_r+0xe>
 8022c00:	580b      	ldr	r3, [r1, r0]
 8022c02:	18c0      	adds	r0, r0, r3
 8022c04:	4770      	bx	lr

08022c06 <_raise_r>:
 8022c06:	b570      	push	{r4, r5, r6, lr}
 8022c08:	0004      	movs	r4, r0
 8022c0a:	000d      	movs	r5, r1
 8022c0c:	291f      	cmp	r1, #31
 8022c0e:	d904      	bls.n	8022c1a <_raise_r+0x14>
 8022c10:	2316      	movs	r3, #22
 8022c12:	6003      	str	r3, [r0, #0]
 8022c14:	2001      	movs	r0, #1
 8022c16:	4240      	negs	r0, r0
 8022c18:	bd70      	pop	{r4, r5, r6, pc}
 8022c1a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8022c1c:	2b00      	cmp	r3, #0
 8022c1e:	d004      	beq.n	8022c2a <_raise_r+0x24>
 8022c20:	008a      	lsls	r2, r1, #2
 8022c22:	189b      	adds	r3, r3, r2
 8022c24:	681a      	ldr	r2, [r3, #0]
 8022c26:	2a00      	cmp	r2, #0
 8022c28:	d108      	bne.n	8022c3c <_raise_r+0x36>
 8022c2a:	0020      	movs	r0, r4
 8022c2c:	f000 f830 	bl	8022c90 <_getpid_r>
 8022c30:	002a      	movs	r2, r5
 8022c32:	0001      	movs	r1, r0
 8022c34:	0020      	movs	r0, r4
 8022c36:	f000 f819 	bl	8022c6c <_kill_r>
 8022c3a:	e7ed      	b.n	8022c18 <_raise_r+0x12>
 8022c3c:	2a01      	cmp	r2, #1
 8022c3e:	d009      	beq.n	8022c54 <_raise_r+0x4e>
 8022c40:	1c51      	adds	r1, r2, #1
 8022c42:	d103      	bne.n	8022c4c <_raise_r+0x46>
 8022c44:	2316      	movs	r3, #22
 8022c46:	6003      	str	r3, [r0, #0]
 8022c48:	2001      	movs	r0, #1
 8022c4a:	e7e5      	b.n	8022c18 <_raise_r+0x12>
 8022c4c:	2100      	movs	r1, #0
 8022c4e:	0028      	movs	r0, r5
 8022c50:	6019      	str	r1, [r3, #0]
 8022c52:	4790      	blx	r2
 8022c54:	2000      	movs	r0, #0
 8022c56:	e7df      	b.n	8022c18 <_raise_r+0x12>

08022c58 <raise>:
 8022c58:	b510      	push	{r4, lr}
 8022c5a:	4b03      	ldr	r3, [pc, #12]	@ (8022c68 <raise+0x10>)
 8022c5c:	0001      	movs	r1, r0
 8022c5e:	6818      	ldr	r0, [r3, #0]
 8022c60:	f7ff ffd1 	bl	8022c06 <_raise_r>
 8022c64:	bd10      	pop	{r4, pc}
 8022c66:	46c0      	nop			@ (mov r8, r8)
 8022c68:	200003cc 	.word	0x200003cc

08022c6c <_kill_r>:
 8022c6c:	2300      	movs	r3, #0
 8022c6e:	b570      	push	{r4, r5, r6, lr}
 8022c70:	4d06      	ldr	r5, [pc, #24]	@ (8022c8c <_kill_r+0x20>)
 8022c72:	0004      	movs	r4, r0
 8022c74:	0008      	movs	r0, r1
 8022c76:	0011      	movs	r1, r2
 8022c78:	602b      	str	r3, [r5, #0]
 8022c7a:	f7ea ff21 	bl	800dac0 <_kill>
 8022c7e:	1c43      	adds	r3, r0, #1
 8022c80:	d103      	bne.n	8022c8a <_kill_r+0x1e>
 8022c82:	682b      	ldr	r3, [r5, #0]
 8022c84:	2b00      	cmp	r3, #0
 8022c86:	d000      	beq.n	8022c8a <_kill_r+0x1e>
 8022c88:	6023      	str	r3, [r4, #0]
 8022c8a:	bd70      	pop	{r4, r5, r6, pc}
 8022c8c:	2000399c 	.word	0x2000399c

08022c90 <_getpid_r>:
 8022c90:	b510      	push	{r4, lr}
 8022c92:	f7ea ff0f 	bl	800dab4 <_getpid>
 8022c96:	bd10      	pop	{r4, pc}

08022c98 <expf>:
 8022c98:	b570      	push	{r4, r5, r6, lr}
 8022c9a:	1c04      	adds	r4, r0, #0
 8022c9c:	f000 f8e6 	bl	8022e6c <__ieee754_expf>
 8022ca0:	1c05      	adds	r5, r0, #0
 8022ca2:	1c20      	adds	r0, r4, #0
 8022ca4:	f000 f83c 	bl	8022d20 <finitef>
 8022ca8:	2800      	cmp	r0, #0
 8022caa:	d00b      	beq.n	8022cc4 <expf+0x2c>
 8022cac:	490c      	ldr	r1, [pc, #48]	@ (8022ce0 <expf+0x48>)
 8022cae:	1c20      	adds	r0, r4, #0
 8022cb0:	f7dd fc52 	bl	8000558 <__aeabi_fcmpgt>
 8022cb4:	2800      	cmp	r0, #0
 8022cb6:	d007      	beq.n	8022cc8 <expf+0x30>
 8022cb8:	f7fd faf0 	bl	802029c <__errno>
 8022cbc:	25ff      	movs	r5, #255	@ 0xff
 8022cbe:	2322      	movs	r3, #34	@ 0x22
 8022cc0:	05ed      	lsls	r5, r5, #23
 8022cc2:	6003      	str	r3, [r0, #0]
 8022cc4:	1c28      	adds	r0, r5, #0
 8022cc6:	bd70      	pop	{r4, r5, r6, pc}
 8022cc8:	4906      	ldr	r1, [pc, #24]	@ (8022ce4 <expf+0x4c>)
 8022cca:	1c20      	adds	r0, r4, #0
 8022ccc:	f7dd fc30 	bl	8000530 <__aeabi_fcmplt>
 8022cd0:	2800      	cmp	r0, #0
 8022cd2:	d0f7      	beq.n	8022cc4 <expf+0x2c>
 8022cd4:	f7fd fae2 	bl	802029c <__errno>
 8022cd8:	2322      	movs	r3, #34	@ 0x22
 8022cda:	2500      	movs	r5, #0
 8022cdc:	6003      	str	r3, [r0, #0]
 8022cde:	e7f1      	b.n	8022cc4 <expf+0x2c>
 8022ce0:	42b17217 	.word	0x42b17217
 8022ce4:	c2cff1b5 	.word	0xc2cff1b5

08022ce8 <sqrtf>:
 8022ce8:	b570      	push	{r4, r5, r6, lr}
 8022cea:	1c05      	adds	r5, r0, #0
 8022cec:	f000 f822 	bl	8022d34 <__ieee754_sqrtf>
 8022cf0:	1c29      	adds	r1, r5, #0
 8022cf2:	1c04      	adds	r4, r0, #0
 8022cf4:	1c28      	adds	r0, r5, #0
 8022cf6:	f7de fc35 	bl	8001564 <__aeabi_fcmpun>
 8022cfa:	2800      	cmp	r0, #0
 8022cfc:	d10e      	bne.n	8022d1c <sqrtf+0x34>
 8022cfe:	2100      	movs	r1, #0
 8022d00:	1c28      	adds	r0, r5, #0
 8022d02:	f7dd fc15 	bl	8000530 <__aeabi_fcmplt>
 8022d06:	2800      	cmp	r0, #0
 8022d08:	d008      	beq.n	8022d1c <sqrtf+0x34>
 8022d0a:	f7fd fac7 	bl	802029c <__errno>
 8022d0e:	2321      	movs	r3, #33	@ 0x21
 8022d10:	2100      	movs	r1, #0
 8022d12:	6003      	str	r3, [r0, #0]
 8022d14:	1c08      	adds	r0, r1, #0
 8022d16:	f7dd ff5d 	bl	8000bd4 <__aeabi_fdiv>
 8022d1a:	1c04      	adds	r4, r0, #0
 8022d1c:	1c20      	adds	r0, r4, #0
 8022d1e:	bd70      	pop	{r4, r5, r6, pc}

08022d20 <finitef>:
 8022d20:	22ff      	movs	r2, #255	@ 0xff
 8022d22:	0043      	lsls	r3, r0, #1
 8022d24:	085b      	lsrs	r3, r3, #1
 8022d26:	2001      	movs	r0, #1
 8022d28:	05d2      	lsls	r2, r2, #23
 8022d2a:	4293      	cmp	r3, r2
 8022d2c:	db00      	blt.n	8022d30 <finitef+0x10>
 8022d2e:	2000      	movs	r0, #0
 8022d30:	4770      	bx	lr
	...

08022d34 <__ieee754_sqrtf>:
 8022d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022d36:	0003      	movs	r3, r0
 8022d38:	0042      	lsls	r2, r0, #1
 8022d3a:	1c04      	adds	r4, r0, #0
 8022d3c:	20ff      	movs	r0, #255	@ 0xff
 8022d3e:	0852      	lsrs	r2, r2, #1
 8022d40:	05c0      	lsls	r0, r0, #23
 8022d42:	4282      	cmp	r2, r0
 8022d44:	d30a      	bcc.n	8022d5c <__ieee754_sqrtf+0x28>
 8022d46:	1c21      	adds	r1, r4, #0
 8022d48:	1c20      	adds	r0, r4, #0
 8022d4a:	f7de f929 	bl	8000fa0 <__aeabi_fmul>
 8022d4e:	1c01      	adds	r1, r0, #0
 8022d50:	1c20      	adds	r0, r4, #0
 8022d52:	f7dd fdb5 	bl	80008c0 <__aeabi_fadd>
 8022d56:	1c04      	adds	r4, r0, #0
 8022d58:	1c20      	adds	r0, r4, #0
 8022d5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022d5c:	2a00      	cmp	r2, #0
 8022d5e:	d0fb      	beq.n	8022d58 <__ieee754_sqrtf+0x24>
 8022d60:	2c00      	cmp	r4, #0
 8022d62:	da07      	bge.n	8022d74 <__ieee754_sqrtf+0x40>
 8022d64:	1c21      	adds	r1, r4, #0
 8022d66:	1c20      	adds	r0, r4, #0
 8022d68:	f7de fa58 	bl	800121c <__aeabi_fsub>
 8022d6c:	1c01      	adds	r1, r0, #0
 8022d6e:	f7dd ff31 	bl	8000bd4 <__aeabi_fdiv>
 8022d72:	e7f0      	b.n	8022d56 <__ieee754_sqrtf+0x22>
 8022d74:	0022      	movs	r2, r4
 8022d76:	15e1      	asrs	r1, r4, #23
 8022d78:	4002      	ands	r2, r0
 8022d7a:	4204      	tst	r4, r0
 8022d7c:	d046      	beq.n	8022e0c <__ieee754_sqrtf+0xd8>
 8022d7e:	2280      	movs	r2, #128	@ 0x80
 8022d80:	000f      	movs	r7, r1
 8022d82:	025b      	lsls	r3, r3, #9
 8022d84:	0a5b      	lsrs	r3, r3, #9
 8022d86:	0412      	lsls	r2, r2, #16
 8022d88:	3f7f      	subs	r7, #127	@ 0x7f
 8022d8a:	4313      	orrs	r3, r2
 8022d8c:	07c9      	lsls	r1, r1, #31
 8022d8e:	d400      	bmi.n	8022d92 <__ieee754_sqrtf+0x5e>
 8022d90:	005b      	lsls	r3, r3, #1
 8022d92:	2400      	movs	r4, #0
 8022d94:	2180      	movs	r1, #128	@ 0x80
 8022d96:	2019      	movs	r0, #25
 8022d98:	0026      	movs	r6, r4
 8022d9a:	107f      	asrs	r7, r7, #1
 8022d9c:	005b      	lsls	r3, r3, #1
 8022d9e:	0449      	lsls	r1, r1, #17
 8022da0:	1875      	adds	r5, r6, r1
 8022da2:	001a      	movs	r2, r3
 8022da4:	429d      	cmp	r5, r3
 8022da6:	dc02      	bgt.n	8022dae <__ieee754_sqrtf+0x7a>
 8022da8:	186e      	adds	r6, r5, r1
 8022daa:	1b5a      	subs	r2, r3, r5
 8022dac:	1864      	adds	r4, r4, r1
 8022dae:	3801      	subs	r0, #1
 8022db0:	0053      	lsls	r3, r2, #1
 8022db2:	0849      	lsrs	r1, r1, #1
 8022db4:	2800      	cmp	r0, #0
 8022db6:	d1f3      	bne.n	8022da0 <__ieee754_sqrtf+0x6c>
 8022db8:	2a00      	cmp	r2, #0
 8022dba:	d019      	beq.n	8022df0 <__ieee754_sqrtf+0xbc>
 8022dbc:	4d17      	ldr	r5, [pc, #92]	@ (8022e1c <__ieee754_sqrtf+0xe8>)
 8022dbe:	4e18      	ldr	r6, [pc, #96]	@ (8022e20 <__ieee754_sqrtf+0xec>)
 8022dc0:	6828      	ldr	r0, [r5, #0]
 8022dc2:	6831      	ldr	r1, [r6, #0]
 8022dc4:	682b      	ldr	r3, [r5, #0]
 8022dc6:	9301      	str	r3, [sp, #4]
 8022dc8:	f7de fa28 	bl	800121c <__aeabi_fsub>
 8022dcc:	1c01      	adds	r1, r0, #0
 8022dce:	9801      	ldr	r0, [sp, #4]
 8022dd0:	f7dd fbb8 	bl	8000544 <__aeabi_fcmple>
 8022dd4:	2800      	cmp	r0, #0
 8022dd6:	d00b      	beq.n	8022df0 <__ieee754_sqrtf+0xbc>
 8022dd8:	6828      	ldr	r0, [r5, #0]
 8022dda:	6831      	ldr	r1, [r6, #0]
 8022ddc:	f7dd fd70 	bl	80008c0 <__aeabi_fadd>
 8022de0:	682d      	ldr	r5, [r5, #0]
 8022de2:	1c01      	adds	r1, r0, #0
 8022de4:	1c28      	adds	r0, r5, #0
 8022de6:	f7dd fba3 	bl	8000530 <__aeabi_fcmplt>
 8022dea:	2800      	cmp	r0, #0
 8022dec:	d011      	beq.n	8022e12 <__ieee754_sqrtf+0xde>
 8022dee:	3402      	adds	r4, #2
 8022df0:	23fc      	movs	r3, #252	@ 0xfc
 8022df2:	1064      	asrs	r4, r4, #1
 8022df4:	059b      	lsls	r3, r3, #22
 8022df6:	18e3      	adds	r3, r4, r3
 8022df8:	05fc      	lsls	r4, r7, #23
 8022dfa:	18e4      	adds	r4, r4, r3
 8022dfc:	e7ac      	b.n	8022d58 <__ieee754_sqrtf+0x24>
 8022dfe:	005b      	lsls	r3, r3, #1
 8022e00:	3201      	adds	r2, #1
 8022e02:	4203      	tst	r3, r0
 8022e04:	d0fb      	beq.n	8022dfe <__ieee754_sqrtf+0xca>
 8022e06:	3a01      	subs	r2, #1
 8022e08:	1a89      	subs	r1, r1, r2
 8022e0a:	e7b8      	b.n	8022d7e <__ieee754_sqrtf+0x4a>
 8022e0c:	2080      	movs	r0, #128	@ 0x80
 8022e0e:	0400      	lsls	r0, r0, #16
 8022e10:	e7f7      	b.n	8022e02 <__ieee754_sqrtf+0xce>
 8022e12:	2301      	movs	r3, #1
 8022e14:	3401      	adds	r4, #1
 8022e16:	439c      	bics	r4, r3
 8022e18:	e7ea      	b.n	8022df0 <__ieee754_sqrtf+0xbc>
 8022e1a:	46c0      	nop			@ (mov r8, r8)
 8022e1c:	20000420 	.word	0x20000420
 8022e20:	2000041c 	.word	0x2000041c

08022e24 <roundf>:
 8022e24:	0dc3      	lsrs	r3, r0, #23
 8022e26:	b2db      	uxtb	r3, r3
 8022e28:	3b7f      	subs	r3, #127	@ 0x7f
 8022e2a:	0002      	movs	r2, r0
 8022e2c:	b510      	push	{r4, lr}
 8022e2e:	2b16      	cmp	r3, #22
 8022e30:	dc13      	bgt.n	8022e5a <roundf+0x36>
 8022e32:	2b00      	cmp	r3, #0
 8022e34:	da07      	bge.n	8022e46 <roundf+0x22>
 8022e36:	0fc2      	lsrs	r2, r0, #31
 8022e38:	07d0      	lsls	r0, r2, #31
 8022e3a:	3301      	adds	r3, #1
 8022e3c:	d102      	bne.n	8022e44 <roundf+0x20>
 8022e3e:	23fe      	movs	r3, #254	@ 0xfe
 8022e40:	059b      	lsls	r3, r3, #22
 8022e42:	4318      	orrs	r0, r3
 8022e44:	bd10      	pop	{r4, pc}
 8022e46:	4908      	ldr	r1, [pc, #32]	@ (8022e68 <roundf+0x44>)
 8022e48:	4119      	asrs	r1, r3
 8022e4a:	4208      	tst	r0, r1
 8022e4c:	d0fa      	beq.n	8022e44 <roundf+0x20>
 8022e4e:	2080      	movs	r0, #128	@ 0x80
 8022e50:	03c0      	lsls	r0, r0, #15
 8022e52:	4118      	asrs	r0, r3
 8022e54:	1880      	adds	r0, r0, r2
 8022e56:	4388      	bics	r0, r1
 8022e58:	e7f4      	b.n	8022e44 <roundf+0x20>
 8022e5a:	2b80      	cmp	r3, #128	@ 0x80
 8022e5c:	d1f2      	bne.n	8022e44 <roundf+0x20>
 8022e5e:	1c01      	adds	r1, r0, #0
 8022e60:	f7dd fd2e 	bl	80008c0 <__aeabi_fadd>
 8022e64:	e7ee      	b.n	8022e44 <roundf+0x20>
 8022e66:	46c0      	nop			@ (mov r8, r8)
 8022e68:	007fffff 	.word	0x007fffff

08022e6c <__ieee754_expf>:
 8022e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022e6e:	21ff      	movs	r1, #255	@ 0xff
 8022e70:	0043      	lsls	r3, r0, #1
 8022e72:	1c04      	adds	r4, r0, #0
 8022e74:	085b      	lsrs	r3, r3, #1
 8022e76:	05c9      	lsls	r1, r1, #23
 8022e78:	428b      	cmp	r3, r1
 8022e7a:	d904      	bls.n	8022e86 <__ieee754_expf+0x1a>
 8022e7c:	1c01      	adds	r1, r0, #0
 8022e7e:	1c20      	adds	r0, r4, #0
 8022e80:	f7dd fd1e 	bl	80008c0 <__aeabi_fadd>
 8022e84:	e00d      	b.n	8022ea2 <__ieee754_expf+0x36>
 8022e86:	0fc6      	lsrs	r6, r0, #31
 8022e88:	428b      	cmp	r3, r1
 8022e8a:	d104      	bne.n	8022e96 <__ieee754_expf+0x2a>
 8022e8c:	2e00      	cmp	r6, #0
 8022e8e:	d000      	beq.n	8022e92 <__ieee754_expf+0x26>
 8022e90:	e0ba      	b.n	8023008 <__ieee754_expf+0x19c>
 8022e92:	1c20      	adds	r0, r4, #0
 8022e94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8022e96:	495d      	ldr	r1, [pc, #372]	@ (802300c <__ieee754_expf+0x1a0>)
 8022e98:	4288      	cmp	r0, r1
 8022e9a:	dd04      	ble.n	8022ea6 <__ieee754_expf+0x3a>
 8022e9c:	2000      	movs	r0, #0
 8022e9e:	f000 f8f1 	bl	8023084 <__math_oflowf>
 8022ea2:	1c04      	adds	r4, r0, #0
 8022ea4:	e7f5      	b.n	8022e92 <__ieee754_expf+0x26>
 8022ea6:	2800      	cmp	r0, #0
 8022ea8:	da06      	bge.n	8022eb8 <__ieee754_expf+0x4c>
 8022eaa:	4a59      	ldr	r2, [pc, #356]	@ (8023010 <__ieee754_expf+0x1a4>)
 8022eac:	4293      	cmp	r3, r2
 8022eae:	d903      	bls.n	8022eb8 <__ieee754_expf+0x4c>
 8022eb0:	2000      	movs	r0, #0
 8022eb2:	f000 f8e1 	bl	8023078 <__math_uflowf>
 8022eb6:	e7f4      	b.n	8022ea2 <__ieee754_expf+0x36>
 8022eb8:	4a56      	ldr	r2, [pc, #344]	@ (8023014 <__ieee754_expf+0x1a8>)
 8022eba:	4293      	cmp	r3, r2
 8022ebc:	d96e      	bls.n	8022f9c <__ieee754_expf+0x130>
 8022ebe:	4a56      	ldr	r2, [pc, #344]	@ (8023018 <__ieee754_expf+0x1ac>)
 8022ec0:	00b5      	lsls	r5, r6, #2
 8022ec2:	4293      	cmp	r3, r2
 8022ec4:	d84e      	bhi.n	8022f64 <__ieee754_expf+0xf8>
 8022ec6:	4b55      	ldr	r3, [pc, #340]	@ (802301c <__ieee754_expf+0x1b0>)
 8022ec8:	1c20      	adds	r0, r4, #0
 8022eca:	5959      	ldr	r1, [r3, r5]
 8022ecc:	f7de f9a6 	bl	800121c <__aeabi_fsub>
 8022ed0:	4b53      	ldr	r3, [pc, #332]	@ (8023020 <__ieee754_expf+0x1b4>)
 8022ed2:	1c07      	adds	r7, r0, #0
 8022ed4:	595b      	ldr	r3, [r3, r5]
 8022ed6:	2501      	movs	r5, #1
 8022ed8:	1bad      	subs	r5, r5, r6
 8022eda:	9300      	str	r3, [sp, #0]
 8022edc:	1bad      	subs	r5, r5, r6
 8022ede:	9900      	ldr	r1, [sp, #0]
 8022ee0:	1c38      	adds	r0, r7, #0
 8022ee2:	f7de f99b 	bl	800121c <__aeabi_fsub>
 8022ee6:	1c04      	adds	r4, r0, #0
 8022ee8:	1c21      	adds	r1, r4, #0
 8022eea:	1c20      	adds	r0, r4, #0
 8022eec:	f7de f858 	bl	8000fa0 <__aeabi_fmul>
 8022ef0:	494c      	ldr	r1, [pc, #304]	@ (8023024 <__ieee754_expf+0x1b8>)
 8022ef2:	1c06      	adds	r6, r0, #0
 8022ef4:	f7de f854 	bl	8000fa0 <__aeabi_fmul>
 8022ef8:	494b      	ldr	r1, [pc, #300]	@ (8023028 <__ieee754_expf+0x1bc>)
 8022efa:	f7de f98f 	bl	800121c <__aeabi_fsub>
 8022efe:	1c31      	adds	r1, r6, #0
 8022f00:	f7de f84e 	bl	8000fa0 <__aeabi_fmul>
 8022f04:	4949      	ldr	r1, [pc, #292]	@ (802302c <__ieee754_expf+0x1c0>)
 8022f06:	f7dd fcdb 	bl	80008c0 <__aeabi_fadd>
 8022f0a:	1c31      	adds	r1, r6, #0
 8022f0c:	f7de f848 	bl	8000fa0 <__aeabi_fmul>
 8022f10:	4947      	ldr	r1, [pc, #284]	@ (8023030 <__ieee754_expf+0x1c4>)
 8022f12:	f7de f983 	bl	800121c <__aeabi_fsub>
 8022f16:	1c31      	adds	r1, r6, #0
 8022f18:	f7de f842 	bl	8000fa0 <__aeabi_fmul>
 8022f1c:	4945      	ldr	r1, [pc, #276]	@ (8023034 <__ieee754_expf+0x1c8>)
 8022f1e:	f7dd fccf 	bl	80008c0 <__aeabi_fadd>
 8022f22:	1c31      	adds	r1, r6, #0
 8022f24:	f7de f83c 	bl	8000fa0 <__aeabi_fmul>
 8022f28:	1c01      	adds	r1, r0, #0
 8022f2a:	1c20      	adds	r0, r4, #0
 8022f2c:	f7de f976 	bl	800121c <__aeabi_fsub>
 8022f30:	1c01      	adds	r1, r0, #0
 8022f32:	1c06      	adds	r6, r0, #0
 8022f34:	1c20      	adds	r0, r4, #0
 8022f36:	f7de f833 	bl	8000fa0 <__aeabi_fmul>
 8022f3a:	9001      	str	r0, [sp, #4]
 8022f3c:	2d00      	cmp	r5, #0
 8022f3e:	d140      	bne.n	8022fc2 <__ieee754_expf+0x156>
 8022f40:	2180      	movs	r1, #128	@ 0x80
 8022f42:	1c30      	adds	r0, r6, #0
 8022f44:	05c9      	lsls	r1, r1, #23
 8022f46:	f7de f969 	bl	800121c <__aeabi_fsub>
 8022f4a:	1c01      	adds	r1, r0, #0
 8022f4c:	9801      	ldr	r0, [sp, #4]
 8022f4e:	f7dd fe41 	bl	8000bd4 <__aeabi_fdiv>
 8022f52:	1c21      	adds	r1, r4, #0
 8022f54:	f7de f962 	bl	800121c <__aeabi_fsub>
 8022f58:	1c01      	adds	r1, r0, #0
 8022f5a:	20fe      	movs	r0, #254	@ 0xfe
 8022f5c:	0580      	lsls	r0, r0, #22
 8022f5e:	f7de f95d 	bl	800121c <__aeabi_fsub>
 8022f62:	e79e      	b.n	8022ea2 <__ieee754_expf+0x36>
 8022f64:	4934      	ldr	r1, [pc, #208]	@ (8023038 <__ieee754_expf+0x1cc>)
 8022f66:	1c20      	adds	r0, r4, #0
 8022f68:	f7de f81a 	bl	8000fa0 <__aeabi_fmul>
 8022f6c:	4b33      	ldr	r3, [pc, #204]	@ (802303c <__ieee754_expf+0x1d0>)
 8022f6e:	5959      	ldr	r1, [r3, r5]
 8022f70:	f7dd fca6 	bl	80008c0 <__aeabi_fadd>
 8022f74:	f7de fb0c 	bl	8001590 <__aeabi_f2iz>
 8022f78:	0005      	movs	r5, r0
 8022f7a:	f7de fb29 	bl	80015d0 <__aeabi_i2f>
 8022f7e:	4930      	ldr	r1, [pc, #192]	@ (8023040 <__ieee754_expf+0x1d4>)
 8022f80:	1c06      	adds	r6, r0, #0
 8022f82:	f7de f80d 	bl	8000fa0 <__aeabi_fmul>
 8022f86:	1c01      	adds	r1, r0, #0
 8022f88:	1c20      	adds	r0, r4, #0
 8022f8a:	f7de f947 	bl	800121c <__aeabi_fsub>
 8022f8e:	492d      	ldr	r1, [pc, #180]	@ (8023044 <__ieee754_expf+0x1d8>)
 8022f90:	1c07      	adds	r7, r0, #0
 8022f92:	1c30      	adds	r0, r6, #0
 8022f94:	f7de f804 	bl	8000fa0 <__aeabi_fmul>
 8022f98:	9000      	str	r0, [sp, #0]
 8022f9a:	e7a0      	b.n	8022ede <__ieee754_expf+0x72>
 8022f9c:	22d0      	movs	r2, #208	@ 0xd0
 8022f9e:	0592      	lsls	r2, r2, #22
 8022fa0:	4293      	cmp	r3, r2
 8022fa2:	d20c      	bcs.n	8022fbe <__ieee754_expf+0x152>
 8022fa4:	4928      	ldr	r1, [pc, #160]	@ (8023048 <__ieee754_expf+0x1dc>)
 8022fa6:	1c20      	adds	r0, r4, #0
 8022fa8:	f7dd fc8a 	bl	80008c0 <__aeabi_fadd>
 8022fac:	21fe      	movs	r1, #254	@ 0xfe
 8022fae:	0589      	lsls	r1, r1, #22
 8022fb0:	f7dd fad2 	bl	8000558 <__aeabi_fcmpgt>
 8022fb4:	1e05      	subs	r5, r0, #0
 8022fb6:	d097      	beq.n	8022ee8 <__ieee754_expf+0x7c>
 8022fb8:	21fe      	movs	r1, #254	@ 0xfe
 8022fba:	0589      	lsls	r1, r1, #22
 8022fbc:	e75f      	b.n	8022e7e <__ieee754_expf+0x12>
 8022fbe:	2500      	movs	r5, #0
 8022fc0:	e792      	b.n	8022ee8 <__ieee754_expf+0x7c>
 8022fc2:	2080      	movs	r0, #128	@ 0x80
 8022fc4:	1c31      	adds	r1, r6, #0
 8022fc6:	05c0      	lsls	r0, r0, #23
 8022fc8:	f7de f928 	bl	800121c <__aeabi_fsub>
 8022fcc:	1c01      	adds	r1, r0, #0
 8022fce:	9801      	ldr	r0, [sp, #4]
 8022fd0:	f7dd fe00 	bl	8000bd4 <__aeabi_fdiv>
 8022fd4:	1c01      	adds	r1, r0, #0
 8022fd6:	9800      	ldr	r0, [sp, #0]
 8022fd8:	f7de f920 	bl	800121c <__aeabi_fsub>
 8022fdc:	1c39      	adds	r1, r7, #0
 8022fde:	f7de f91d 	bl	800121c <__aeabi_fsub>
 8022fe2:	1c01      	adds	r1, r0, #0
 8022fe4:	20fe      	movs	r0, #254	@ 0xfe
 8022fe6:	0580      	lsls	r0, r0, #22
 8022fe8:	f7de f918 	bl	800121c <__aeabi_fsub>
 8022fec:	002b      	movs	r3, r5
 8022fee:	337d      	adds	r3, #125	@ 0x7d
 8022ff0:	db02      	blt.n	8022ff8 <__ieee754_expf+0x18c>
 8022ff2:	05ec      	lsls	r4, r5, #23
 8022ff4:	1824      	adds	r4, r4, r0
 8022ff6:	e74c      	b.n	8022e92 <__ieee754_expf+0x26>
 8022ff8:	21d8      	movs	r1, #216	@ 0xd8
 8022ffa:	3564      	adds	r5, #100	@ 0x64
 8022ffc:	05ed      	lsls	r5, r5, #23
 8022ffe:	1828      	adds	r0, r5, r0
 8023000:	0509      	lsls	r1, r1, #20
 8023002:	f7dd ffcd 	bl	8000fa0 <__aeabi_fmul>
 8023006:	e74c      	b.n	8022ea2 <__ieee754_expf+0x36>
 8023008:	2400      	movs	r4, #0
 802300a:	e742      	b.n	8022e92 <__ieee754_expf+0x26>
 802300c:	42b17217 	.word	0x42b17217
 8023010:	42cff1b5 	.word	0x42cff1b5
 8023014:	3eb17218 	.word	0x3eb17218
 8023018:	3f851591 	.word	0x3f851591
 802301c:	08025f38 	.word	0x08025f38
 8023020:	08025f30 	.word	0x08025f30
 8023024:	3331bb4c 	.word	0x3331bb4c
 8023028:	35ddea0e 	.word	0x35ddea0e
 802302c:	388ab355 	.word	0x388ab355
 8023030:	3b360b61 	.word	0x3b360b61
 8023034:	3e2aaaab 	.word	0x3e2aaaab
 8023038:	3fb8aa3b 	.word	0x3fb8aa3b
 802303c:	08025f40 	.word	0x08025f40
 8023040:	3f317180 	.word	0x3f317180
 8023044:	3717f7d1 	.word	0x3717f7d1
 8023048:	7149f2ca 	.word	0x7149f2ca

0802304c <with_errnof>:
 802304c:	b570      	push	{r4, r5, r6, lr}
 802304e:	000d      	movs	r5, r1
 8023050:	1c04      	adds	r4, r0, #0
 8023052:	f7fd f923 	bl	802029c <__errno>
 8023056:	6005      	str	r5, [r0, #0]
 8023058:	1c20      	adds	r0, r4, #0
 802305a:	bd70      	pop	{r4, r5, r6, pc}

0802305c <xflowf>:
 802305c:	b510      	push	{r4, lr}
 802305e:	1c0b      	adds	r3, r1, #0
 8023060:	2800      	cmp	r0, #0
 8023062:	d002      	beq.n	802306a <xflowf+0xe>
 8023064:	2380      	movs	r3, #128	@ 0x80
 8023066:	061b      	lsls	r3, r3, #24
 8023068:	18cb      	adds	r3, r1, r3
 802306a:	1c18      	adds	r0, r3, #0
 802306c:	f7dd ff98 	bl	8000fa0 <__aeabi_fmul>
 8023070:	2122      	movs	r1, #34	@ 0x22
 8023072:	f7ff ffeb 	bl	802304c <with_errnof>
 8023076:	bd10      	pop	{r4, pc}

08023078 <__math_uflowf>:
 8023078:	2180      	movs	r1, #128	@ 0x80
 802307a:	b510      	push	{r4, lr}
 802307c:	0549      	lsls	r1, r1, #21
 802307e:	f7ff ffed 	bl	802305c <xflowf>
 8023082:	bd10      	pop	{r4, pc}

08023084 <__math_oflowf>:
 8023084:	21e0      	movs	r1, #224	@ 0xe0
 8023086:	b510      	push	{r4, lr}
 8023088:	05c9      	lsls	r1, r1, #23
 802308a:	f7ff ffe7 	bl	802305c <xflowf>
 802308e:	bd10      	pop	{r4, pc}

08023090 <_init>:
 8023090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023092:	46c0      	nop			@ (mov r8, r8)
 8023094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023096:	bc08      	pop	{r3}
 8023098:	469e      	mov	lr, r3
 802309a:	4770      	bx	lr

0802309c <_fini>:
 802309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802309e:	46c0      	nop			@ (mov r8, r8)
 80230a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80230a2:	bc08      	pop	{r3}
 80230a4:	469e      	mov	lr, r3
 80230a6:	4770      	bx	lr
