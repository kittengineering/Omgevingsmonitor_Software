
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019794  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010a0  08019858  08019858  0001a858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a8f8  0801a8f8  0001c4a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a8f8  0801a8f8  0001b8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a900  0801a900  0001c4a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a900  0801a900  0001b900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a904  0801a904  0001b904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004a8  20000000  0801a908  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f44  200004a8  0801adb0  0001c4a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200043ec  0801adb0  0001d3ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001c4a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026b35  00000000  00000000  0001c4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006bdc  00000000  00000000  00043005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f00  00000000  00000000  00049be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001792  00000000  00000000  0004bae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dea8  00000000  00000000  0004d27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030275  00000000  00000000  0006b122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095b0e  00000000  00000000  0009b397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130ea5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000838c  00000000  00000000  00130ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00139274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004a8 	.word	0x200004a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801983c 	.word	0x0801983c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004ac 	.word	0x200004ac
 8000104:	0801983c 	.word	0x0801983c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	0801a2b4 	.word	0x0801a2b4
 8000d08:	0801a2f4 	.word	0x0801a2f4
 8000d0c:	f7ffffff 	.word	0xf7ffffff

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	0801a330 	.word	0x0801a330
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <batteryInit>:
static ADC_HandleTypeDef* ADC_Handler = NULL;
float Charge = 0;
float Solar = 0;
uint16_t Vref = 3;

void batteryInit(ADC_HandleTypeDef* ADC_HANDLER){
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  ADC_Handler = ADC_HANDLER;
 8003554:	4b03      	ldr	r3, [pc, #12]	@ (8003564 <batteryInit+0x18>)
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	601a      	str	r2, [r3, #0]
}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b002      	add	sp, #8
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	200004c4 	.word	0x200004c4

08003568 <checkCharges>:

void checkCharges(){
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	af00      	add	r7, sp, #0
  HAL_ADC_Start(ADC_Handler);
 800356c:	4b41      	ldr	r3, [pc, #260]	@ (8003674 <checkCharges+0x10c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	0018      	movs	r0, r3
 8003572:	f006 f86f 	bl	8009654 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(ADC_Handler, 1);
 8003576:	4b3f      	ldr	r3, [pc, #252]	@ (8003674 <checkCharges+0x10c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2101      	movs	r1, #1
 800357c:	0018      	movs	r0, r3
 800357e:	f006 f8bd 	bl	80096fc <HAL_ADC_PollForConversion>
  Charge = ((float)HAL_ADC_GetValue(ADC_Handler)/4095.0)*Vref*2;
 8003582:	4b3c      	ldr	r3, [pc, #240]	@ (8003674 <checkCharges+0x10c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	0018      	movs	r0, r3
 8003588:	f006 f954 	bl	8009834 <HAL_ADC_GetValue>
 800358c:	0003      	movs	r3, r0
 800358e:	0018      	movs	r0, r3
 8003590:	f7fd ffe8 	bl	8001564 <__aeabi_ui2f>
 8003594:	1c03      	adds	r3, r0, #0
 8003596:	1c18      	adds	r0, r3, #0
 8003598:	f7ff fee2 	bl	8003360 <__aeabi_f2d>
 800359c:	2200      	movs	r2, #0
 800359e:	4b36      	ldr	r3, [pc, #216]	@ (8003678 <checkCharges+0x110>)
 80035a0:	f7fe fb86 	bl	8001cb0 <__aeabi_ddiv>
 80035a4:	0002      	movs	r2, r0
 80035a6:	000b      	movs	r3, r1
 80035a8:	0014      	movs	r4, r2
 80035aa:	001d      	movs	r5, r3
 80035ac:	4b33      	ldr	r3, [pc, #204]	@ (800367c <checkCharges+0x114>)
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f7ff fe83 	bl	80032bc <__aeabi_i2d>
 80035b6:	0002      	movs	r2, r0
 80035b8:	000b      	movs	r3, r1
 80035ba:	0020      	movs	r0, r4
 80035bc:	0029      	movs	r1, r5
 80035be:	f7fe ffbb 	bl	8002538 <__aeabi_dmul>
 80035c2:	0002      	movs	r2, r0
 80035c4:	000b      	movs	r3, r1
 80035c6:	0010      	movs	r0, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	0002      	movs	r2, r0
 80035cc:	000b      	movs	r3, r1
 80035ce:	f7fe f80b 	bl	80015e8 <__aeabi_dadd>
 80035d2:	0002      	movs	r2, r0
 80035d4:	000b      	movs	r3, r1
 80035d6:	0010      	movs	r0, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	f7ff ff09 	bl	80033f0 <__aeabi_d2f>
 80035de:	1c02      	adds	r2, r0, #0
 80035e0:	4b27      	ldr	r3, [pc, #156]	@ (8003680 <checkCharges+0x118>)
 80035e2:	601a      	str	r2, [r3, #0]
  HAL_ADC_Start(ADC_Handler);
 80035e4:	4b23      	ldr	r3, [pc, #140]	@ (8003674 <checkCharges+0x10c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f006 f833 	bl	8009654 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(ADC_Handler, 1);
 80035ee:	4b21      	ldr	r3, [pc, #132]	@ (8003674 <checkCharges+0x10c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2101      	movs	r1, #1
 80035f4:	0018      	movs	r0, r3
 80035f6:	f006 f881 	bl	80096fc <HAL_ADC_PollForConversion>
  Solar = ((float)HAL_ADC_GetValue(ADC_Handler)/4095.0)*Vref*2;
 80035fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003674 <checkCharges+0x10c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	0018      	movs	r0, r3
 8003600:	f006 f918 	bl	8009834 <HAL_ADC_GetValue>
 8003604:	0003      	movs	r3, r0
 8003606:	0018      	movs	r0, r3
 8003608:	f7fd ffac 	bl	8001564 <__aeabi_ui2f>
 800360c:	1c03      	adds	r3, r0, #0
 800360e:	1c18      	adds	r0, r3, #0
 8003610:	f7ff fea6 	bl	8003360 <__aeabi_f2d>
 8003614:	2200      	movs	r2, #0
 8003616:	4b18      	ldr	r3, [pc, #96]	@ (8003678 <checkCharges+0x110>)
 8003618:	f7fe fb4a 	bl	8001cb0 <__aeabi_ddiv>
 800361c:	0002      	movs	r2, r0
 800361e:	000b      	movs	r3, r1
 8003620:	0014      	movs	r4, r2
 8003622:	001d      	movs	r5, r3
 8003624:	4b15      	ldr	r3, [pc, #84]	@ (800367c <checkCharges+0x114>)
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	0018      	movs	r0, r3
 800362a:	f7ff fe47 	bl	80032bc <__aeabi_i2d>
 800362e:	0002      	movs	r2, r0
 8003630:	000b      	movs	r3, r1
 8003632:	0020      	movs	r0, r4
 8003634:	0029      	movs	r1, r5
 8003636:	f7fe ff7f 	bl	8002538 <__aeabi_dmul>
 800363a:	0002      	movs	r2, r0
 800363c:	000b      	movs	r3, r1
 800363e:	0010      	movs	r0, r2
 8003640:	0019      	movs	r1, r3
 8003642:	0002      	movs	r2, r0
 8003644:	000b      	movs	r3, r1
 8003646:	f7fd ffcf 	bl	80015e8 <__aeabi_dadd>
 800364a:	0002      	movs	r2, r0
 800364c:	000b      	movs	r3, r1
 800364e:	0010      	movs	r0, r2
 8003650:	0019      	movs	r1, r3
 8003652:	f7ff fecd 	bl	80033f0 <__aeabi_d2f>
 8003656:	1c02      	adds	r2, r0, #0
 8003658:	4b0a      	ldr	r3, [pc, #40]	@ (8003684 <checkCharges+0x11c>)
 800365a:	601a      	str	r2, [r3, #0]
  setCharges(Charge, Solar);
 800365c:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <checkCharges+0x118>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b08      	ldr	r3, [pc, #32]	@ (8003684 <checkCharges+0x11c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	1c19      	adds	r1, r3, #0
 8003666:	1c10      	adds	r0, r2, #0
 8003668:	f000 f80e 	bl	8003688 <setCharges>
}
 800366c:	46c0      	nop			@ (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	bdb0      	pop	{r4, r5, r7, pc}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	200004c4 	.word	0x200004c4
 8003678:	40affe00 	.word	0x40affe00
 800367c:	20000000 	.word	0x20000000
 8003680:	200004c8 	.word	0x200004c8
 8003684:	200004cc 	.word	0x200004cc

08003688 <setCharges>:

typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;
void setCharges(float battery, float solar){
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  batteryCharge = battery;
 8003692:	4b05      	ldr	r3, [pc, #20]	@ (80036a8 <setCharges+0x20>)
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	601a      	str	r2, [r3, #0]
  solarCharge = solar;
 8003698:	4b04      	ldr	r3, [pc, #16]	@ (80036ac <setCharges+0x24>)
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	601a      	str	r2, [r3, #0]
}
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b002      	add	sp, #8
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	200005f0 	.word	0x200005f0
 80036ac:	200005f4 	.word	0x200005f4

080036b0 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	1dbb      	adds	r3, r7, #6
 80036bc:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80036be:	4b07      	ldr	r3, [pc, #28]	@ (80036dc <setMeasurement+0x2c>)
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80036c4:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <setMeasurement+0x30>)
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80036ca:	4b06      	ldr	r3, [pc, #24]	@ (80036e4 <setMeasurement+0x34>)
 80036cc:	1dba      	adds	r2, r7, #6
 80036ce:	8812      	ldrh	r2, [r2, #0]
 80036d0:	801a      	strh	r2, [r3, #0]
}
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b004      	add	sp, #16
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	200005e8 	.word	0x200005e8
 80036e0:	200005ec 	.word	0x200005ec
 80036e4:	200005f8 	.word	0x200005f8

080036e8 <setMic>:
void setMic(float dB){
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  dBC = dB;
 80036f0:	4b03      	ldr	r3, [pc, #12]	@ (8003700 <setMic+0x18>)
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	601a      	str	r2, [r3, #0]
}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b002      	add	sp, #8
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	200005fc 	.word	0x200005fc

08003704 <ESP_Init>:
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.


void ESP_Init(UART_HandleTypeDef* espUart) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 800370c:	4b05      	ldr	r3, [pc, #20]	@ (8003724 <ESP_Init+0x20>)
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003712:	4b05      	ldr	r3, [pc, #20]	@ (8003728 <ESP_Init+0x24>)
 8003714:	2202      	movs	r2, #2
 8003716:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003718:	f000 f832 	bl	8003780 <ESP_GetUID>
}
 800371c:	46c0      	nop			@ (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b002      	add	sp, #8
 8003722:	bd80      	pop	{r7, pc}
 8003724:	200004d0 	.word	0x200004d0
 8003728:	20000102 	.word	0x20000102

0800372c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 800372c:	b5b0      	push	{r4, r5, r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	000a      	movs	r2, r1
 8003736:	1cbb      	adds	r3, r7, #2
 8003738:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 800373a:	4b0e      	ldr	r3, [pc, #56]	@ (8003774 <ESP_Send+0x48>)
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	250f      	movs	r5, #15
 8003740:	197c      	adds	r4, r7, r5
 8003742:	1cbb      	adds	r3, r7, #2
 8003744:	881a      	ldrh	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	0019      	movs	r1, r3
 800374a:	f00c fd39 	bl	80101c0 <HAL_UART_Transmit_DMA>
 800374e:	0003      	movs	r3, r0
 8003750:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003752:	197b      	adds	r3, r7, r5
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 800375a:	4a07      	ldr	r2, [pc, #28]	@ (8003778 <ESP_Send+0x4c>)
 800375c:	4b07      	ldr	r3, [pc, #28]	@ (800377c <ESP_Send+0x50>)
 800375e:	0019      	movs	r1, r3
 8003760:	2003      	movs	r0, #3
 8003762:	f005 f9bf 	bl	8008ae4 <CreateLine>
    return false;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <ESP_Send+0x40>
  }
  return true;
 800376a:	2301      	movs	r3, #1
}
 800376c:	0018      	movs	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	b004      	add	sp, #16
 8003772:	bdb0      	pop	{r4, r5, r7, pc}
 8003774:	200004d0 	.word	0x200004d0
 8003778:	08019858 	.word	0x08019858
 800377c:	08019878 	.word	0x08019878

08003780 <ESP_GetUID>:

void ESP_GetUID(){
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003784:	f005 fdd4 	bl	8009330 <HAL_GetUIDw0>
 8003788:	0002      	movs	r2, r0
 800378a:	4b0a      	ldr	r3, [pc, #40]	@ (80037b4 <ESP_GetUID+0x34>)
 800378c:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 800378e:	f005 fdd9 	bl	8009344 <HAL_GetUIDw1>
 8003792:	0002      	movs	r2, r0
 8003794:	4b07      	ldr	r3, [pc, #28]	@ (80037b4 <ESP_GetUID+0x34>)
 8003796:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003798:	f005 fdde 	bl	8009358 <HAL_GetUIDw2>
 800379c:	0002      	movs	r2, r0
 800379e:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <ESP_GetUID+0x34>)
 80037a0:	609a      	str	r2, [r3, #8]
  Debug("ID read");
 80037a2:	4a05      	ldr	r2, [pc, #20]	@ (80037b8 <ESP_GetUID+0x38>)
 80037a4:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <ESP_GetUID+0x3c>)
 80037a6:	0019      	movs	r1, r3
 80037a8:	2003      	movs	r0, #3
 80037aa:	f005 f99b 	bl	8008ae4 <CreateLine>
}
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	200005dc 	.word	0x200005dc
 80037b8:	0801987c 	.word	0x0801987c
 80037bc:	08019878 	.word	0x08019878

080037c0 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80037c0:	b5b0      	push	{r4, r5, r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	000a      	movs	r2, r1
 80037ca:	1cfb      	adds	r3, r7, #3
 80037cc:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 80037ce:	4b12      	ldr	r3, [pc, #72]	@ (8003818 <ESP_Receive+0x58>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 80037d4:	4b11      	ldr	r3, [pc, #68]	@ (800381c <ESP_Receive+0x5c>)
 80037d6:	6818      	ldr	r0, [r3, #0]
 80037d8:	1cfb      	adds	r3, r7, #3
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	b29a      	uxth	r2, r3
 80037de:	250f      	movs	r5, #15
 80037e0:	197c      	adds	r4, r7, r5
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	0019      	movs	r1, r3
 80037e6:	f00c fd7b 	bl	80102e0 <HAL_UART_Receive_DMA>
 80037ea:	0003      	movs	r3, r0
 80037ec:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037ee:	197b      	adds	r3, r7, r5
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 80037f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003820 <ESP_Receive+0x60>)
 80037f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003824 <ESP_Receive+0x64>)
 80037fa:	0019      	movs	r1, r3
 80037fc:	2003      	movs	r0, #3
 80037fe:	f005 f971 	bl	8008ae4 <CreateLine>
    RxComplete = true;
 8003802:	4b05      	ldr	r3, [pc, #20]	@ (8003818 <ESP_Receive+0x58>)
 8003804:	2201      	movs	r2, #1
 8003806:	701a      	strb	r2, [r3, #0]
    return false;
 8003808:	2300      	movs	r3, #0
 800380a:	e000      	b.n	800380e <ESP_Receive+0x4e>
  }
  return true;
 800380c:	2301      	movs	r3, #1
}
 800380e:	0018      	movs	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	b004      	add	sp, #16
 8003814:	bdb0      	pop	{r4, r5, r7, pc}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	200004d4 	.word	0x200004d4
 800381c:	200004d0 	.word	0x200004d0
 8003820:	08019884 	.word	0x08019884
 8003824:	08019878 	.word	0x08019878

08003828 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003830:	4b08      	ldr	r3, [pc, #32]	@ (8003854 <HAL_UART_RxCpltCallback+0x2c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	429a      	cmp	r2, r3
 8003838:	d108      	bne.n	800384c <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 800383a:	4b07      	ldr	r3, [pc, #28]	@ (8003858 <HAL_UART_RxCpltCallback+0x30>)
 800383c:	2201      	movs	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003840:	4a06      	ldr	r2, [pc, #24]	@ (800385c <HAL_UART_RxCpltCallback+0x34>)
 8003842:	4b07      	ldr	r3, [pc, #28]	@ (8003860 <HAL_UART_RxCpltCallback+0x38>)
 8003844:	0019      	movs	r1, r3
 8003846:	2003      	movs	r0, #3
 8003848:	f005 f94c 	bl	8008ae4 <CreateLine>
  }
}
 800384c:	46c0      	nop			@ (mov r8, r8)
 800384e:	46bd      	mov	sp, r7
 8003850:	b002      	add	sp, #8
 8003852:	bd80      	pop	{r7, pc}
 8003854:	200004d0 	.word	0x200004d0
 8003858:	200004d4 	.word	0x200004d4
 800385c:	080198a4 	.word	0x080198a4
 8003860:	08019878 	.word	0x08019878

08003864 <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 800386c:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <HAL_UART_ErrorCallback+0x20>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	429a      	cmp	r2, r3
 8003874:	d102      	bne.n	800387c <HAL_UART_ErrorCallback+0x18>
    // Handle error
    EspState = ESP_STATE_ERROR;
 8003876:	4b04      	ldr	r3, [pc, #16]	@ (8003888 <HAL_UART_ErrorCallback+0x24>)
 8003878:	2207      	movs	r2, #7
 800387a:	701a      	strb	r2, [r3, #0]
  }
}
 800387c:	46c0      	nop			@ (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b002      	add	sp, #8
 8003882:	bd80      	pop	{r7, pc}
 8003884:	200004d0 	.word	0x200004d0
 8003888:	20000102 	.word	0x20000102

0800388c <CreateMessage>:
uint16_t CreateMessage(){
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b085      	sub	sp, #20
 8003890:	af02      	add	r7, sp, #8
  uint16_t messageLength = 0;
 8003892:	1dbb      	adds	r3, r7, #6
 8003894:	2200      	movs	r2, #0
 8003896:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart1, "\"name\":\"temp\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"graden\"", sensorID1, Temperature);
 8003898:	4b42      	ldr	r3, [pc, #264]	@ (80039a4 <CreateMessage+0x118>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	1c18      	adds	r0, r3, #0
 800389e:	f7ff fd5f 	bl	8003360 <__aeabi_f2d>
 80038a2:	0002      	movs	r2, r0
 80038a4:	000b      	movs	r3, r1
 80038a6:	4c40      	ldr	r4, [pc, #256]	@ (80039a8 <CreateMessage+0x11c>)
 80038a8:	4940      	ldr	r1, [pc, #256]	@ (80039ac <CreateMessage+0x120>)
 80038aa:	4841      	ldr	r0, [pc, #260]	@ (80039b0 <CreateMessage+0x124>)
 80038ac:	9200      	str	r2, [sp, #0]
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	0022      	movs	r2, r4
 80038b2:	f013 f833 	bl	801691c <siprintf>
  messageLength += strlen(messagePart1);
 80038b6:	4b3e      	ldr	r3, [pc, #248]	@ (80039b0 <CreateMessage+0x124>)
 80038b8:	0018      	movs	r0, r3
 80038ba:	f7fc fc25 	bl	8000108 <strlen>
 80038be:	0003      	movs	r3, r0
 80038c0:	b299      	uxth	r1, r3
 80038c2:	1dbb      	adds	r3, r7, #6
 80038c4:	1dba      	adds	r2, r7, #6
 80038c6:	8812      	ldrh	r2, [r2, #0]
 80038c8:	188a      	adds	r2, r1, r2
 80038ca:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart2, "\"name\":\"humid\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"%%\"", sensorID2, Humidity);
 80038cc:	4b39      	ldr	r3, [pc, #228]	@ (80039b4 <CreateMessage+0x128>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	1c18      	adds	r0, r3, #0
 80038d2:	f7ff fd45 	bl	8003360 <__aeabi_f2d>
 80038d6:	0002      	movs	r2, r0
 80038d8:	000b      	movs	r3, r1
 80038da:	4c37      	ldr	r4, [pc, #220]	@ (80039b8 <CreateMessage+0x12c>)
 80038dc:	4937      	ldr	r1, [pc, #220]	@ (80039bc <CreateMessage+0x130>)
 80038de:	4838      	ldr	r0, [pc, #224]	@ (80039c0 <CreateMessage+0x134>)
 80038e0:	9200      	str	r2, [sp, #0]
 80038e2:	9301      	str	r3, [sp, #4]
 80038e4:	0022      	movs	r2, r4
 80038e6:	f013 f819 	bl	801691c <siprintf>
  messageLength += strlen(messagePart2);
 80038ea:	4b35      	ldr	r3, [pc, #212]	@ (80039c0 <CreateMessage+0x134>)
 80038ec:	0018      	movs	r0, r3
 80038ee:	f7fc fc0b 	bl	8000108 <strlen>
 80038f2:	0003      	movs	r3, r0
 80038f4:	b299      	uxth	r1, r3
 80038f6:	1dbb      	adds	r3, r7, #6
 80038f8:	1dba      	adds	r2, r7, #6
 80038fa:	8812      	ldrh	r2, [r2, #0]
 80038fc:	188a      	adds	r2, r1, r2
 80038fe:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart3, "\"name\":\"Sound\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"dBC\"", sensorID3, dBC);
 8003900:	4b30      	ldr	r3, [pc, #192]	@ (80039c4 <CreateMessage+0x138>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	1c18      	adds	r0, r3, #0
 8003906:	f7ff fd2b 	bl	8003360 <__aeabi_f2d>
 800390a:	0002      	movs	r2, r0
 800390c:	000b      	movs	r3, r1
 800390e:	4c2e      	ldr	r4, [pc, #184]	@ (80039c8 <CreateMessage+0x13c>)
 8003910:	492e      	ldr	r1, [pc, #184]	@ (80039cc <CreateMessage+0x140>)
 8003912:	482f      	ldr	r0, [pc, #188]	@ (80039d0 <CreateMessage+0x144>)
 8003914:	9200      	str	r2, [sp, #0]
 8003916:	9301      	str	r3, [sp, #4]
 8003918:	0022      	movs	r2, r4
 800391a:	f012 ffff 	bl	801691c <siprintf>
  messageLength += strlen(messagePart3);
 800391e:	4b2c      	ldr	r3, [pc, #176]	@ (80039d0 <CreateMessage+0x144>)
 8003920:	0018      	movs	r0, r3
 8003922:	f7fc fbf1 	bl	8000108 <strlen>
 8003926:	0003      	movs	r3, r0
 8003928:	b299      	uxth	r1, r3
 800392a:	1dbb      	adds	r3, r7, #6
 800392c:	1dba      	adds	r2, r7, #6
 800392e:	8812      	ldrh	r2, [r2, #0]
 8003930:	188a      	adds	r2, r1, r2
 8003932:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart4, "\"name\":\"voc\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%d, \"unit\": \"VOC index\"", sensorID4, VOCIndex);
 8003934:	4b27      	ldr	r3, [pc, #156]	@ (80039d4 <CreateMessage+0x148>)
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	4a27      	ldr	r2, [pc, #156]	@ (80039d8 <CreateMessage+0x14c>)
 800393a:	4928      	ldr	r1, [pc, #160]	@ (80039dc <CreateMessage+0x150>)
 800393c:	4828      	ldr	r0, [pc, #160]	@ (80039e0 <CreateMessage+0x154>)
 800393e:	f012 ffed 	bl	801691c <siprintf>
  messageLength += strlen(messagePart4);
 8003942:	4b27      	ldr	r3, [pc, #156]	@ (80039e0 <CreateMessage+0x154>)
 8003944:	0018      	movs	r0, r3
 8003946:	f7fc fbdf 	bl	8000108 <strlen>
 800394a:	0003      	movs	r3, r0
 800394c:	b299      	uxth	r1, r3
 800394e:	1dbb      	adds	r3, r7, #6
 8003950:	1dba      	adds	r2, r7, #6
 8003952:	8812      	ldrh	r2, [r2, #0]
 8003954:	188a      	adds	r2, r1, r2
 8003956:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart5, "\"name\":\"battery\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"Volt\"", sensorID5, batteryCharge);
 8003958:	4b22      	ldr	r3, [pc, #136]	@ (80039e4 <CreateMessage+0x158>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	1c18      	adds	r0, r3, #0
 800395e:	f7ff fcff 	bl	8003360 <__aeabi_f2d>
 8003962:	0002      	movs	r2, r0
 8003964:	000b      	movs	r3, r1
 8003966:	4c20      	ldr	r4, [pc, #128]	@ (80039e8 <CreateMessage+0x15c>)
 8003968:	4920      	ldr	r1, [pc, #128]	@ (80039ec <CreateMessage+0x160>)
 800396a:	4821      	ldr	r0, [pc, #132]	@ (80039f0 <CreateMessage+0x164>)
 800396c:	9200      	str	r2, [sp, #0]
 800396e:	9301      	str	r3, [sp, #4]
 8003970:	0022      	movs	r2, r4
 8003972:	f012 ffd3 	bl	801691c <siprintf>
  messageLength += strlen(messagePart5);
 8003976:	4b1e      	ldr	r3, [pc, #120]	@ (80039f0 <CreateMessage+0x164>)
 8003978:	0018      	movs	r0, r3
 800397a:	f7fc fbc5 	bl	8000108 <strlen>
 800397e:	0003      	movs	r3, r0
 8003980:	b299      	uxth	r1, r3
 8003982:	1dbb      	adds	r3, r7, #6
 8003984:	1dba      	adds	r2, r7, #6
 8003986:	8812      	ldrh	r2, [r2, #0]
 8003988:	188a      	adds	r2, r1, r2
 800398a:	801a      	strh	r2, [r3, #0]
  messageLength += 20;
 800398c:	1dbb      	adds	r3, r7, #6
 800398e:	1dba      	adds	r2, r7, #6
 8003990:	8812      	ldrh	r2, [r2, #0]
 8003992:	3214      	adds	r2, #20
 8003994:	801a      	strh	r2, [r3, #0]
  return(messageLength);
 8003996:	1dbb      	adds	r3, r7, #6
 8003998:	881b      	ldrh	r3, [r3, #0]
}
 800399a:	0018      	movs	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	b003      	add	sp, #12
 80039a0:	bd90      	pop	{r4, r7, pc}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	200005e8 	.word	0x200005e8
 80039a8:	20000064 	.word	0x20000064
 80039ac:	080198b0 	.word	0x080198b0
 80039b0:	20000600 	.word	0x20000600
 80039b4:	200005ec 	.word	0x200005ec
 80039b8:	20000080 	.word	0x20000080
 80039bc:	08019908 	.word	0x08019908
 80039c0:	20000680 	.word	0x20000680
 80039c4:	200005fc 	.word	0x200005fc
 80039c8:	2000009c 	.word	0x2000009c
 80039cc:	0801995c 	.word	0x0801995c
 80039d0:	20000700 	.word	0x20000700
 80039d4:	200005f8 	.word	0x200005f8
 80039d8:	200000b8 	.word	0x200000b8
 80039dc:	080199b4 	.word	0x080199b4
 80039e0:	20000780 	.word	0x20000780
 80039e4:	200005f0 	.word	0x200005f0
 80039e8:	200000d4 	.word	0x200000d4
 80039ec:	08019a0c 	.word	0x08019a0c
 80039f0:	20000800 	.word	0x20000800

080039f4 <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
 80039fc:	2380      	movs	r3, #128	@ 0x80
 80039fe:	009a      	lsls	r2, r3, #2
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	4b05      	ldr	r3, [pc, #20]	@ (8003a18 <SetCommandBuffer+0x24>)
 8003a04:	0018      	movs	r0, r3
 8003a06:	f013 f835 	bl	8016a74 <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 8003a0a:	4b04      	ldr	r3, [pc, #16]	@ (8003a1c <SetCommandBuffer+0x28>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
}
 8003a10:	46c0      	nop			@ (mov r8, r8)
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b002      	add	sp, #8
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20000894 	.word	0x20000894
 8003a1c:	20000a94 	.word	0x20000a94

08003a20 <StartProg>:
void StartProg(){
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(1000);
 8003a24:	23fa      	movs	r3, #250	@ 0xfa
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f005 fc5d 	bl	80092e8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003a2e:	4b15      	ldr	r3, [pc, #84]	@ (8003a84 <StartProg+0x64>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	2101      	movs	r1, #1
 8003a34:	0018      	movs	r0, r3
 8003a36:	f006 fe01 	bl	800a63c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003a3a:	2064      	movs	r0, #100	@ 0x64
 8003a3c:	f005 fc54 	bl	80092e8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003a40:	4b10      	ldr	r3, [pc, #64]	@ (8003a84 <StartProg+0x64>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	2102      	movs	r1, #2
 8003a46:	0018      	movs	r0, r3
 8003a48:	f006 fdf8 	bl	800a63c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a4c:	23fa      	movs	r3, #250	@ 0xfa
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	0018      	movs	r0, r3
 8003a52:	f005 fc49 	bl	80092e8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003a56:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <StartProg+0x64>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f006 fded 	bl	800a63c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a62:	23fa      	movs	r3, #250	@ 0xfa
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	0018      	movs	r0, r3
 8003a68:	f005 fc3e 	bl	80092e8 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003a6c:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <StartProg+0x64>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	2102      	movs	r1, #2
 8003a72:	0018      	movs	r0, r3
 8003a74:	f006 fde2 	bl	800a63c <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003a78:	2028      	movs	r0, #40	@ 0x28
 8003a7a:	f005 fc35 	bl	80092e8 <HAL_Delay>
}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	50001c00 	.word	0x50001c00

08003a88 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a8a:	46c6      	mov	lr, r8
 8003a8c:	b500      	push	{lr}
 8003a8e:	b09a      	sub	sp, #104	@ 0x68
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	61f8      	str	r0, [r7, #28]
 8003a94:	0008      	movs	r0, r1
 8003a96:	0011      	movs	r1, r2
 8003a98:	261a      	movs	r6, #26
 8003a9a:	19bb      	adds	r3, r7, r6
 8003a9c:	1c02      	adds	r2, r0, #0
 8003a9e:	801a      	strh	r2, [r3, #0]
 8003aa0:	2319      	movs	r3, #25
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	1c0a      	adds	r2, r1, #0
 8003aa6:	701a      	strb	r2, [r3, #0]
 8003aa8:	466b      	mov	r3, sp
 8003aaa:	4698      	mov	r8, r3
  char tempBuf[len+1];
 8003aac:	19bb      	adds	r3, r7, r6
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	1e5a      	subs	r2, r3, #1
 8003ab4:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ab6:	001a      	movs	r2, r3
 8003ab8:	60ba      	str	r2, [r7, #8]
 8003aba:	2200      	movs	r2, #0
 8003abc:	60fa      	str	r2, [r7, #12]
 8003abe:	68b8      	ldr	r0, [r7, #8]
 8003ac0:	68f9      	ldr	r1, [r7, #12]
 8003ac2:	0002      	movs	r2, r0
 8003ac4:	0f52      	lsrs	r2, r2, #29
 8003ac6:	000e      	movs	r6, r1
 8003ac8:	00f6      	lsls	r6, r6, #3
 8003aca:	617e      	str	r6, [r7, #20]
 8003acc:	697e      	ldr	r6, [r7, #20]
 8003ace:	4316      	orrs	r6, r2
 8003ad0:	617e      	str	r6, [r7, #20]
 8003ad2:	0002      	movs	r2, r0
 8003ad4:	00d2      	lsls	r2, r2, #3
 8003ad6:	613a      	str	r2, [r7, #16]
 8003ad8:	001a      	movs	r2, r3
 8003ada:	603a      	str	r2, [r7, #0]
 8003adc:	2200      	movs	r2, #0
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	6838      	ldr	r0, [r7, #0]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	0002      	movs	r2, r0
 8003ae6:	0f52      	lsrs	r2, r2, #29
 8003ae8:	000e      	movs	r6, r1
 8003aea:	00f5      	lsls	r5, r6, #3
 8003aec:	4315      	orrs	r5, r2
 8003aee:	0002      	movs	r2, r0
 8003af0:	00d4      	lsls	r4, r2, #3
 8003af2:	3307      	adds	r3, #7
 8003af4:	08db      	lsrs	r3, r3, #3
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	466a      	mov	r2, sp
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	469d      	mov	sp, r3
 8003afe:	466b      	mov	r3, sp
 8003b00:	3300      	adds	r3, #0
 8003b02:	65bb      	str	r3, [r7, #88]	@ 0x58
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003b04:	234f      	movs	r3, #79	@ 0x4f
 8003b06:	2118      	movs	r1, #24
 8003b08:	185b      	adds	r3, r3, r1
 8003b0a:	19db      	adds	r3, r3, r7
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003b10:	234c      	movs	r3, #76	@ 0x4c
 8003b12:	185b      	adds	r3, r3, r1
 8003b14:	19db      	adds	r3, r3, r7
 8003b16:	2200      	movs	r2, #0
 8003b18:	801a      	strh	r2, [r3, #0]
 8003b1a:	e013      	b.n	8003b44 <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 8003b1c:	204c      	movs	r0, #76	@ 0x4c
 8003b1e:	2418      	movs	r4, #24
 8003b20:	1903      	adds	r3, r0, r4
 8003b22:	19db      	adds	r3, r3, r7
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	18d2      	adds	r2, r2, r3
 8003b2a:	1903      	adds	r3, r0, r4
 8003b2c:	19db      	adds	r3, r3, r7
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	7811      	ldrb	r1, [r2, #0]
 8003b32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b34:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003b36:	1903      	adds	r3, r0, r4
 8003b38:	19db      	adds	r3, r3, r7
 8003b3a:	881a      	ldrh	r2, [r3, #0]
 8003b3c:	1903      	adds	r3, r0, r4
 8003b3e:	19db      	adds	r3, r3, r7
 8003b40:	3201      	adds	r2, #1
 8003b42:	801a      	strh	r2, [r3, #0]
 8003b44:	234c      	movs	r3, #76	@ 0x4c
 8003b46:	2018      	movs	r0, #24
 8003b48:	181b      	adds	r3, r3, r0
 8003b4a:	19da      	adds	r2, r3, r7
 8003b4c:	211a      	movs	r1, #26
 8003b4e:	187b      	adds	r3, r7, r1
 8003b50:	8812      	ldrh	r2, [r2, #0]
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d3e1      	bcc.n	8003b1c <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 8003b58:	187b      	adds	r3, r7, r1
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b5e:	2100      	movs	r1, #0
 8003b60:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 8003b62:	233f      	movs	r3, #63	@ 0x3f
 8003b64:	0006      	movs	r6, r0
 8003b66:	199b      	adds	r3, r3, r6
 8003b68:	19db      	adds	r3, r3, r7
 8003b6a:	224e      	movs	r2, #78	@ 0x4e
 8003b6c:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  char * ParsePoint3;
  const char OK[] = AT_RESPONSE_OK;
 8003b6e:	2530      	movs	r5, #48	@ 0x30
 8003b70:	19ab      	adds	r3, r5, r6
 8003b72:	19db      	adds	r3, r3, r7
 8003b74:	4a60      	ldr	r2, [pc, #384]	@ (8003cf8 <ParseBuffer+0x270>)
 8003b76:	8811      	ldrh	r1, [r2, #0]
 8003b78:	8019      	strh	r1, [r3, #0]
 8003b7a:	7892      	ldrb	r2, [r2, #2]
 8003b7c:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003b7e:	2328      	movs	r3, #40	@ 0x28
 8003b80:	199b      	adds	r3, r3, r6
 8003b82:	19db      	adds	r3, r3, r7
 8003b84:	4a5d      	ldr	r2, [pc, #372]	@ (8003cfc <ParseBuffer+0x274>)
 8003b86:	6811      	ldr	r1, [r2, #0]
 8003b88:	6019      	str	r1, [r3, #0]
 8003b8a:	8892      	ldrh	r2, [r2, #4]
 8003b8c:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003b8e:	2320      	movs	r3, #32
 8003b90:	199b      	adds	r3, r3, r6
 8003b92:	19db      	adds	r3, r3, r7
 8003b94:	4a5a      	ldr	r2, [pc, #360]	@ (8003d00 <ParseBuffer+0x278>)
 8003b96:	6811      	ldr	r1, [r2, #0]
 8003b98:	6019      	str	r1, [r3, #0]
 8003b9a:	8892      	ldrh	r2, [r2, #4]
 8003b9c:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003b9e:	231c      	movs	r3, #28
 8003ba0:	199b      	adds	r3, r3, r6
 8003ba2:	19db      	adds	r3, r3, r7
 8003ba4:	223e      	movs	r2, #62	@ 0x3e
 8003ba6:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003ba8:	230c      	movs	r3, #12
 8003baa:	199b      	adds	r3, r3, r6
 8003bac:	19db      	adds	r3, r3, r7
 8003bae:	4a55      	ldr	r2, [pc, #340]	@ (8003d04 <ParseBuffer+0x27c>)
 8003bb0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003bb2:	c313      	stmia	r3!, {r0, r1, r4}
 8003bb4:	8811      	ldrh	r1, [r2, #0]
 8003bb6:	8019      	strh	r1, [r3, #0]
 8003bb8:	7892      	ldrb	r2, [r2, #2]
 8003bba:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003bbc:	2319      	movs	r3, #25
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d108      	bne.n	8003bd8 <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 8003bc6:	19ab      	adds	r3, r5, r6
 8003bc8:	19da      	adds	r2, r3, r7
 8003bca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bcc:	0011      	movs	r1, r2
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f012 ff64 	bl	8016a9c <strstr>
 8003bd4:	0003      	movs	r3, r0
 8003bd6:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003bd8:	2319      	movs	r3, #25
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d10a      	bne.n	8003bf8 <ParseBuffer+0x170>
    ParsePoint = strstr(tempBuf, ready);
 8003be2:	2320      	movs	r3, #32
 8003be4:	2218      	movs	r2, #24
 8003be6:	189b      	adds	r3, r3, r2
 8003be8:	19da      	adds	r2, r3, r7
 8003bea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bec:	0011      	movs	r1, r2
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f012 ff54 	bl	8016a9c <strstr>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003bf8:	2319      	movs	r3, #25
 8003bfa:	18fb      	adds	r3, r7, r3
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d10a      	bne.n	8003c18 <ParseBuffer+0x190>
    ParsePoint = strstr(tempBuf, start);
 8003c02:	231c      	movs	r3, #28
 8003c04:	2218      	movs	r2, #24
 8003c06:	189b      	adds	r3, r3, r2
 8003c08:	19da      	adds	r2, r3, r7
 8003c0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c0c:	0011      	movs	r1, r2
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f012 ff44 	bl	8016a9c <strstr>
 8003c14:	0003      	movs	r3, r0
 8003c16:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003c18:	2328      	movs	r3, #40	@ 0x28
 8003c1a:	2418      	movs	r4, #24
 8003c1c:	191b      	adds	r3, r3, r4
 8003c1e:	19da      	adds	r2, r3, r7
 8003c20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c22:	0011      	movs	r1, r2
 8003c24:	0018      	movs	r0, r3
 8003c26:	f012 ff39 	bl	8016a9c <strstr>
 8003c2a:	0003      	movs	r3, r0
 8003c2c:	653b      	str	r3, [r7, #80]	@ 0x50
  ParsePoint3 = strstr(tempBuf, WIFI);
 8003c2e:	230c      	movs	r3, #12
 8003c30:	191b      	adds	r3, r3, r4
 8003c32:	19da      	adds	r2, r3, r7
 8003c34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c36:	0011      	movs	r1, r2
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f012 ff2f 	bl	8016a9c <strstr>
 8003c3e:	0003      	movs	r3, r0
 8003c40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if(len > 1 ){
 8003c42:	231a      	movs	r3, #26
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d948      	bls.n	8003cde <ParseBuffer+0x256>
    TestChar = *ParsePoint;
 8003c4c:	213f      	movs	r1, #63	@ 0x3f
 8003c4e:	190b      	adds	r3, r1, r4
 8003c50:	19db      	adds	r3, r3, r7
 8003c52:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c54:	7812      	ldrb	r2, [r2, #0]
 8003c56:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003c58:	190b      	adds	r3, r1, r4
 8003c5a:	19db      	adds	r3, r3, r7
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b4f      	cmp	r3, #79	@ 0x4f
 8003c60:	d104      	bne.n	8003c6c <ParseBuffer+0x1e4>
      status = RECEIVE_STATUS_OK;
 8003c62:	234f      	movs	r3, #79	@ 0x4f
 8003c64:	191b      	adds	r3, r3, r4
 8003c66:	19db      	adds	r3, r3, r7
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003c6c:	233f      	movs	r3, #63	@ 0x3f
 8003c6e:	2218      	movs	r2, #24
 8003c70:	189b      	adds	r3, r3, r2
 8003c72:	19db      	adds	r3, r3, r7
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b72      	cmp	r3, #114	@ 0x72
 8003c78:	d104      	bne.n	8003c84 <ParseBuffer+0x1fc>
      status = RECEIVE_STATUS_READY;
 8003c7a:	234f      	movs	r3, #79	@ 0x4f
 8003c7c:	189b      	adds	r3, r3, r2
 8003c7e:	19db      	adds	r3, r3, r7
 8003c80:	2202      	movs	r2, #2
 8003c82:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003c84:	233f      	movs	r3, #63	@ 0x3f
 8003c86:	2218      	movs	r2, #24
 8003c88:	189b      	adds	r3, r3, r2
 8003c8a:	19db      	adds	r3, r3, r7
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c90:	d104      	bne.n	8003c9c <ParseBuffer+0x214>
      status = RECEIVE_STATUS_START;
 8003c92:	234f      	movs	r3, #79	@ 0x4f
 8003c94:	189b      	adds	r3, r3, r2
 8003c96:	19db      	adds	r3, r3, r7
 8003c98:	2205      	movs	r2, #5
 8003c9a:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003c9c:	213f      	movs	r1, #63	@ 0x3f
 8003c9e:	2018      	movs	r0, #24
 8003ca0:	180b      	adds	r3, r1, r0
 8003ca2:	19db      	adds	r3, r3, r7
 8003ca4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ca6:	7812      	ldrb	r2, [r2, #0]
 8003ca8:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003caa:	0002      	movs	r2, r0
 8003cac:	188b      	adds	r3, r1, r2
 8003cae:	19db      	adds	r3, r3, r7
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b45      	cmp	r3, #69	@ 0x45
 8003cb4:	d104      	bne.n	8003cc0 <ParseBuffer+0x238>
      status = RECEIVE_STATUS_ERROR;
 8003cb6:	234f      	movs	r3, #79	@ 0x4f
 8003cb8:	189b      	adds	r3, r3, r2
 8003cba:	19db      	adds	r3, r3, r7
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint3;
 8003cc0:	213f      	movs	r1, #63	@ 0x3f
 8003cc2:	2018      	movs	r0, #24
 8003cc4:	180b      	adds	r3, r1, r0
 8003cc6:	19db      	adds	r3, r3, r7
 8003cc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cca:	7812      	ldrb	r2, [r2, #0]
 8003ccc:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'W'){
 8003cce:	180b      	adds	r3, r1, r0
 8003cd0:	19db      	adds	r3, r3, r7
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b57      	cmp	r3, #87	@ 0x57
 8003cd6:	d102      	bne.n	8003cde <ParseBuffer+0x256>
      ConnectionMade = true;
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d08 <ParseBuffer+0x280>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003cde:	234f      	movs	r3, #79	@ 0x4f
 8003ce0:	2218      	movs	r2, #24
 8003ce2:	189b      	adds	r3, r3, r2
 8003ce4:	19db      	adds	r3, r3, r7
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	46c5      	mov	sp, r8

}
 8003cea:	0018      	movs	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	b01a      	add	sp, #104	@ 0x68
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	46b8      	mov	r8, r7
 8003cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cf6:	46c0      	nop			@ (mov r8, r8)
 8003cf8:	08019a64 	.word	0x08019a64
 8003cfc:	08019a68 	.word	0x08019a68
 8003d00:	08019a70 	.word	0x08019a70
 8003d04:	08019a78 	.word	0x08019a78
 8003d08:	200005da 	.word	0x200005da

08003d0c <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <PollAwake+0x3c>)
 8003d14:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f7ff fe6b 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	0018      	movs	r0, r3
 8003d22:	f7fc f9f1 	bl	8000108 <strlen>
 8003d26:	0003      	movs	r3, r0
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	0011      	movs	r1, r2
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7ff fcfc 	bl	800372c <ESP_Send>
 8003d34:	1e03      	subs	r3, r0, #0
 8003d36:	d001      	beq.n	8003d3c <PollAwake+0x30>
    return true;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <PollAwake+0x32>
  }
  else{
    return false;
 8003d3c:	2300      	movs	r3, #0
  }
}
 8003d3e:	0018      	movs	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b002      	add	sp, #8
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			@ (mov r8, r8)
 8003d48:	08019a88 	.word	0x08019a88

08003d4c <RFPower>:
bool RFPower(){
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003d52:	4b0d      	ldr	r3, [pc, #52]	@ (8003d88 <RFPower+0x3c>)
 8003d54:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f7ff fe4b 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7fc f9d1 	bl	8000108 <strlen>
 8003d66:	0003      	movs	r3, r0
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	0011      	movs	r1, r2
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f7ff fcdc 	bl	800372c <ESP_Send>
 8003d74:	1e03      	subs	r3, r0, #0
 8003d76:	d001      	beq.n	8003d7c <RFPower+0x30>
    return true;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <RFPower+0x32>
  }
  else{
    return false;
 8003d7c:	2300      	movs	r3, #0
  }
}
 8003d7e:	0018      	movs	r0, r3
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b002      	add	sp, #8
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	08019a90 	.word	0x08019a90

08003d8c <CheckRFPower>:
bool CheckRFPower(){
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003d92:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc8 <CheckRFPower+0x3c>)
 8003d94:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f7ff fe2b 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7fc f9b1 	bl	8000108 <strlen>
 8003da6:	0003      	movs	r3, r0
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	0011      	movs	r1, r2
 8003dae:	0018      	movs	r0, r3
 8003db0:	f7ff fcbc 	bl	800372c <ESP_Send>
 8003db4:	1e03      	subs	r3, r0, #0
 8003db6:	d001      	beq.n	8003dbc <CheckRFPower+0x30>
    return true;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <CheckRFPower+0x32>
  }
  else{
    return false;
 8003dbc:	2300      	movs	r3, #0
  }
}
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b002      	add	sp, #8
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	46c0      	nop			@ (mov r8, r8)
 8003dc8:	08019aa0 	.word	0x08019aa0

08003dcc <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8003dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e08 <ATRestore+0x3c>)
 8003dd4:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f7ff fe0b 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f7fc f991 	bl	8000108 <strlen>
 8003de6:	0003      	movs	r3, r0
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	0011      	movs	r1, r2
 8003dee:	0018      	movs	r0, r3
 8003df0:	f7ff fc9c 	bl	800372c <ESP_Send>
 8003df4:	1e03      	subs	r3, r0, #0
 8003df6:	d001      	beq.n	8003dfc <ATRestore+0x30>
    return true;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <ATRestore+0x32>
  }
  else{
    return false;
 8003dfc:	2300      	movs	r3, #0
  }
}
 8003dfe:	0018      	movs	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b002      	add	sp, #8
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	46c0      	nop			@ (mov r8, r8)
 8003e08:	08019ab0 	.word	0x08019ab0

08003e0c <CWINIT>:
bool CWINIT(){
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8003e12:	4b0d      	ldr	r3, [pc, #52]	@ (8003e48 <CWINIT+0x3c>)
 8003e14:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f7ff fdeb 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	0018      	movs	r0, r3
 8003e22:	f7fc f971 	bl	8000108 <strlen>
 8003e26:	0003      	movs	r3, r0
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	0011      	movs	r1, r2
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f7ff fc7c 	bl	800372c <ESP_Send>
 8003e34:	1e03      	subs	r3, r0, #0
 8003e36:	d001      	beq.n	8003e3c <CWINIT+0x30>
    return true;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <CWINIT+0x32>
  }
  else{
    return false;
 8003e3c:	2300      	movs	r3, #0
  }
}
 8003e3e:	0018      	movs	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	b002      	add	sp, #8
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	46c0      	nop			@ (mov r8, r8)
 8003e48:	08019ac0 	.word	0x08019ac0

08003e4c <CWMODE1>:
bool CWMODE1(){
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8003e52:	4b0d      	ldr	r3, [pc, #52]	@ (8003e88 <CWMODE1+0x3c>)
 8003e54:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7ff fdcb 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	0018      	movs	r0, r3
 8003e62:	f7fc f951 	bl	8000108 <strlen>
 8003e66:	0003      	movs	r3, r0
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	0011      	movs	r1, r2
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f7ff fc5c 	bl	800372c <ESP_Send>
 8003e74:	1e03      	subs	r3, r0, #0
 8003e76:	d001      	beq.n	8003e7c <CWMODE1+0x30>
    return true;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <CWMODE1+0x32>
  }
  else{
    return false;
 8003e7c:	2300      	movs	r3, #0
  }
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b002      	add	sp, #8
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			@ (mov r8, r8)
 8003e88:	08019ad0 	.word	0x08019ad0

08003e8c <CWAUTOCONN>:
bool CWAUTOCONN(){
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8003e92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec8 <CWAUTOCONN+0x3c>)
 8003e94:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f7ff fdab 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f7fc f931 	bl	8000108 <strlen>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	0011      	movs	r1, r2
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f7ff fc3c 	bl	800372c <ESP_Send>
 8003eb4:	1e03      	subs	r3, r0, #0
 8003eb6:	d001      	beq.n	8003ebc <CWAUTOCONN+0x30>
    return true;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <CWAUTOCONN+0x32>
  }
  else{
    return false;
 8003ebc:	2300      	movs	r3, #0
  }
}
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	b002      	add	sp, #8
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			@ (mov r8, r8)
 8003ec8:	08019ae0 	.word	0x08019ae0

08003ecc <CWJAP>:
bool CWJAP(){
 8003ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ece:	46c6      	mov	lr, r8
 8003ed0:	b500      	push	{lr}
 8003ed2:	b0a2      	sub	sp, #136	@ 0x88
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	466b      	mov	r3, sp
 8003ed8:	4698      	mov	r8, r3
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8003eda:	2618      	movs	r6, #24
 8003edc:	19bb      	adds	r3, r7, r6
 8003ede:	2264      	movs	r2, #100	@ 0x64
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	f012 fdbe 	bl	8016a64 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8003ee8:	4b35      	ldr	r3, [pc, #212]	@ (8003fc0 <CWJAP+0xf4>)
 8003eea:	4a36      	ldr	r2, [pc, #216]	@ (8003fc4 <CWJAP+0xf8>)
 8003eec:	4936      	ldr	r1, [pc, #216]	@ (8003fc8 <CWJAP+0xfc>)
 8003eee:	19b8      	adds	r0, r7, r6
 8003ef0:	f012 fd14 	bl	801691c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8003ef4:	19bb      	adds	r3, r7, r6
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f7fc f906 	bl	8000108 <strlen>
 8003efc:	0002      	movs	r2, r0
 8003efe:	216f      	movs	r1, #111	@ 0x6f
 8003f00:	0030      	movs	r0, r6
 8003f02:	180b      	adds	r3, r1, r0
 8003f04:	19db      	adds	r3, r3, r7
 8003f06:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8003f08:	180b      	adds	r3, r1, r0
 8003f0a:	19db      	adds	r3, r3, r7
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	1e5a      	subs	r2, r3, #1
 8003f12:	2180      	movs	r1, #128	@ 0x80
 8003f14:	1879      	adds	r1, r7, r1
 8003f16:	600a      	str	r2, [r1, #0]
 8003f18:	001a      	movs	r2, r3
 8003f1a:	60ba      	str	r2, [r7, #8]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	60fa      	str	r2, [r7, #12]
 8003f20:	68b8      	ldr	r0, [r7, #8]
 8003f22:	68f9      	ldr	r1, [r7, #12]
 8003f24:	0002      	movs	r2, r0
 8003f26:	0f52      	lsrs	r2, r2, #29
 8003f28:	000e      	movs	r6, r1
 8003f2a:	00f6      	lsls	r6, r6, #3
 8003f2c:	617e      	str	r6, [r7, #20]
 8003f2e:	697e      	ldr	r6, [r7, #20]
 8003f30:	4316      	orrs	r6, r2
 8003f32:	617e      	str	r6, [r7, #20]
 8003f34:	0002      	movs	r2, r0
 8003f36:	00d2      	lsls	r2, r2, #3
 8003f38:	613a      	str	r2, [r7, #16]
 8003f3a:	001a      	movs	r2, r3
 8003f3c:	603a      	str	r2, [r7, #0]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	607a      	str	r2, [r7, #4]
 8003f42:	6838      	ldr	r0, [r7, #0]
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	0002      	movs	r2, r0
 8003f48:	0f52      	lsrs	r2, r2, #29
 8003f4a:	000e      	movs	r6, r1
 8003f4c:	00f5      	lsls	r5, r6, #3
 8003f4e:	4315      	orrs	r5, r2
 8003f50:	0002      	movs	r2, r0
 8003f52:	00d4      	lsls	r4, r2, #3
 8003f54:	3307      	adds	r3, #7
 8003f56:	08db      	lsrs	r3, r3, #3
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	466a      	mov	r2, sp
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	469d      	mov	sp, r3
 8003f60:	466b      	mov	r3, sp
 8003f62:	3300      	adds	r3, #0
 8003f64:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8003f66:	246f      	movs	r4, #111	@ 0x6f
 8003f68:	2518      	movs	r5, #24
 8003f6a:	1963      	adds	r3, r4, r5
 8003f6c:	19db      	adds	r3, r3, r7
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	3301      	adds	r3, #1
 8003f72:	001a      	movs	r2, r3
 8003f74:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f76:	2100      	movs	r1, #0
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f012 fd73 	bl	8016a64 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8003f7e:	1963      	adds	r3, r4, r5
 8003f80:	19db      	adds	r3, r3, r7
 8003f82:	781a      	ldrb	r2, [r3, #0]
 8003f84:	1979      	adds	r1, r7, r5
 8003f86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f012 fd73 	bl	8016a74 <strncpy>
  SetCommandBuffer(atCommand);
 8003f8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f90:	0018      	movs	r0, r3
 8003f92:	f7ff fd2f 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8003f96:	1963      	adds	r3, r4, r5
 8003f98:	19db      	adds	r3, r3, r7
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fa0:	0011      	movs	r1, r2
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f7ff fbc2 	bl	800372c <ESP_Send>
 8003fa8:	1e03      	subs	r3, r0, #0
 8003faa:	d001      	beq.n	8003fb0 <CWJAP+0xe4>
    return true;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <CWJAP+0xe6>
  }
  else{
    return false;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	46c5      	mov	sp, r8
  }
}
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b022      	add	sp, #136	@ 0x88
 8003fba:	bc80      	pop	{r7}
 8003fbc:	46b8      	mov	r8, r7
 8003fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fc0:	20000010 	.word	0x20000010
 8003fc4:	20000004 	.word	0x20000004
 8003fc8:	08019af4 	.word	0x08019af4

08003fcc <CWMODE3>:
bool CWMODE3(){
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8003fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004008 <CWMODE3+0x3c>)
 8003fd4:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7ff fd0b 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f7fc f891 	bl	8000108 <strlen>
 8003fe6:	0003      	movs	r3, r0
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	0011      	movs	r1, r2
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f7ff fb9c 	bl	800372c <ESP_Send>
 8003ff4:	1e03      	subs	r3, r0, #0
 8003ff6:	d001      	beq.n	8003ffc <CWMODE3+0x30>
    return true;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <CWMODE3+0x32>
  }
  else{
    return false;
 8003ffc:	2300      	movs	r3, #0
  }
}
 8003ffe:	0018      	movs	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	b002      	add	sp, #8
 8004004:	bd80      	pop	{r7, pc}
 8004006:	46c0      	nop			@ (mov r8, r8)
 8004008:	08019b0c 	.word	0x08019b0c

0800400c <CWSAP>:
bool CWSAP(){
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8004012:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <CWSAP+0x3c>)
 8004014:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	0018      	movs	r0, r3
 800401a:	f7ff fceb 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	0018      	movs	r0, r3
 8004022:	f7fc f871 	bl	8000108 <strlen>
 8004026:	0003      	movs	r3, r0
 8004028:	b29a      	uxth	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	0011      	movs	r1, r2
 800402e:	0018      	movs	r0, r3
 8004030:	f7ff fb7c 	bl	800372c <ESP_Send>
 8004034:	1e03      	subs	r3, r0, #0
 8004036:	d001      	beq.n	800403c <CWSAP+0x30>
    return true;
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <CWSAP+0x32>
  }
  else{
    return false;
 800403c:	2300      	movs	r3, #0
  }
}
 800403e:	0018      	movs	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	b002      	add	sp, #8
 8004044:	bd80      	pop	{r7, pc}
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	08019b1c 	.word	0x08019b1c

0800404c <CIPMUX>:
bool CIPMUX(){
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004052:	4b0d      	ldr	r3, [pc, #52]	@ (8004088 <CIPMUX+0x3c>)
 8004054:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	0018      	movs	r0, r3
 800405a:	f7ff fccb 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	0018      	movs	r0, r3
 8004062:	f7fc f851 	bl	8000108 <strlen>
 8004066:	0003      	movs	r3, r0
 8004068:	b29a      	uxth	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	0011      	movs	r1, r2
 800406e:	0018      	movs	r0, r3
 8004070:	f7ff fb5c 	bl	800372c <ESP_Send>
 8004074:	1e03      	subs	r3, r0, #0
 8004076:	d001      	beq.n	800407c <CIPMUX+0x30>
    return true;
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <CIPMUX+0x32>
  }
  else{
    return false;
 800407c:	2300      	movs	r3, #0
  }
}
 800407e:	0018      	movs	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	b002      	add	sp, #8
 8004084:	bd80      	pop	{r7, pc}
 8004086:	46c0      	nop			@ (mov r8, r8)
 8004088:	08019b40 	.word	0x08019b40

0800408c <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004092:	4b0d      	ldr	r3, [pc, #52]	@ (80040c8 <WEBSERVER+0x3c>)
 8004094:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	0018      	movs	r0, r3
 800409a:	f7ff fcab 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	0018      	movs	r0, r3
 80040a2:	f7fc f831 	bl	8000108 <strlen>
 80040a6:	0003      	movs	r3, r0
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	0011      	movs	r1, r2
 80040ae:	0018      	movs	r0, r3
 80040b0:	f7ff fb3c 	bl	800372c <ESP_Send>
 80040b4:	1e03      	subs	r3, r0, #0
 80040b6:	d001      	beq.n	80040bc <WEBSERVER+0x30>
    return true;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <WEBSERVER+0x32>
  }
  else{
    return false;
 80040bc:	2300      	movs	r3, #0
  }
}
 80040be:	0018      	movs	r0, r3
 80040c0:	46bd      	mov	sp, r7
 80040c2:	b002      	add	sp, #8
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	46c0      	nop			@ (mov r8, r8)
 80040c8:	08019b50 	.word	0x08019b50

080040cc <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 80040cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ce:	46c6      	mov	lr, r8
 80040d0:	b500      	push	{lr}
 80040d2:	4c47      	ldr	r4, [pc, #284]	@ (80041f0 <HTTPCPOST+0x124>)
 80040d4:	44a5      	add	sp, r4
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	466b      	mov	r3, sp
 80040da:	4698      	mov	r8, r3
  char atCommandBuff[600];
  uint16_t length = CreateMessage();
 80040dc:	4b45      	ldr	r3, [pc, #276]	@ (80041f4 <HTTPCPOST+0x128>)
 80040de:	2218      	movs	r2, #24
 80040e0:	189b      	adds	r3, r3, r2
 80040e2:	19dc      	adds	r4, r3, r7
 80040e4:	f7ff fbd2 	bl	800388c <CreateMessage>
 80040e8:	0003      	movs	r3, r0
 80040ea:	8023      	strh	r3, [r4, #0]
  sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 80040ec:	4b41      	ldr	r3, [pc, #260]	@ (80041f4 <HTTPCPOST+0x128>)
 80040ee:	2218      	movs	r2, #24
 80040f0:	189b      	adds	r3, r3, r2
 80040f2:	19db      	adds	r3, r3, r7
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	4a40      	ldr	r2, [pc, #256]	@ (80041f8 <HTTPCPOST+0x12c>)
 80040f8:	4940      	ldr	r1, [pc, #256]	@ (80041fc <HTTPCPOST+0x130>)
 80040fa:	201c      	movs	r0, #28
 80040fc:	1838      	adds	r0, r7, r0
 80040fe:	f012 fc0d 	bl	801691c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004102:	231c      	movs	r3, #28
 8004104:	18fb      	adds	r3, r7, r3
 8004106:	0018      	movs	r0, r3
 8004108:	f7fb fffe 	bl	8000108 <strlen>
 800410c:	0002      	movs	r2, r0
 800410e:	4c3c      	ldr	r4, [pc, #240]	@ (8004200 <HTTPCPOST+0x134>)
 8004110:	2318      	movs	r3, #24
 8004112:	18e3      	adds	r3, r4, r3
 8004114:	19db      	adds	r3, r3, r7
 8004116:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004118:	2318      	movs	r3, #24
 800411a:	18e3      	adds	r3, r4, r3
 800411c:	19db      	adds	r3, r3, r7
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	3301      	adds	r3, #1
 8004122:	1e5a      	subs	r2, r3, #1
 8004124:	2198      	movs	r1, #152	@ 0x98
 8004126:	0089      	lsls	r1, r1, #2
 8004128:	2018      	movs	r0, #24
 800412a:	1809      	adds	r1, r1, r0
 800412c:	19c9      	adds	r1, r1, r7
 800412e:	600a      	str	r2, [r1, #0]
 8004130:	001a      	movs	r2, r3
 8004132:	0015      	movs	r5, r2
 8004134:	2200      	movs	r2, #0
 8004136:	0016      	movs	r6, r2
 8004138:	0028      	movs	r0, r5
 800413a:	0031      	movs	r1, r6
 800413c:	0002      	movs	r2, r0
 800413e:	0f52      	lsrs	r2, r2, #29
 8004140:	000d      	movs	r5, r1
 8004142:	00ed      	lsls	r5, r5, #3
 8004144:	617d      	str	r5, [r7, #20]
 8004146:	697d      	ldr	r5, [r7, #20]
 8004148:	4315      	orrs	r5, r2
 800414a:	617d      	str	r5, [r7, #20]
 800414c:	0002      	movs	r2, r0
 800414e:	00d2      	lsls	r2, r2, #3
 8004150:	613a      	str	r2, [r7, #16]
 8004152:	001a      	movs	r2, r3
 8004154:	603a      	str	r2, [r7, #0]
 8004156:	2200      	movs	r2, #0
 8004158:	607a      	str	r2, [r7, #4]
 800415a:	6838      	ldr	r0, [r7, #0]
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	0002      	movs	r2, r0
 8004160:	0f52      	lsrs	r2, r2, #29
 8004162:	000d      	movs	r5, r1
 8004164:	00ed      	lsls	r5, r5, #3
 8004166:	60fd      	str	r5, [r7, #12]
 8004168:	68fd      	ldr	r5, [r7, #12]
 800416a:	4315      	orrs	r5, r2
 800416c:	60fd      	str	r5, [r7, #12]
 800416e:	0002      	movs	r2, r0
 8004170:	00d2      	lsls	r2, r2, #3
 8004172:	60ba      	str	r2, [r7, #8]
 8004174:	3307      	adds	r3, #7
 8004176:	08db      	lsrs	r3, r3, #3
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	466a      	mov	r2, sp
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	469d      	mov	sp, r3
 8004180:	466b      	mov	r3, sp
 8004182:	3300      	adds	r3, #0
 8004184:	2597      	movs	r5, #151	@ 0x97
 8004186:	00ad      	lsls	r5, r5, #2
 8004188:	2218      	movs	r2, #24
 800418a:	18aa      	adds	r2, r5, r2
 800418c:	19d2      	adds	r2, r2, r7
 800418e:	6013      	str	r3, [r2, #0]
  strncpy(atCommand, atCommandBuff, len);
 8004190:	2318      	movs	r3, #24
 8004192:	18e3      	adds	r3, r4, r3
 8004194:	19db      	adds	r3, r3, r7
 8004196:	781a      	ldrb	r2, [r3, #0]
 8004198:	231c      	movs	r3, #28
 800419a:	18f9      	adds	r1, r7, r3
 800419c:	2318      	movs	r3, #24
 800419e:	18eb      	adds	r3, r5, r3
 80041a0:	19db      	adds	r3, r3, r7
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	0018      	movs	r0, r3
 80041a6:	f012 fc65 	bl	8016a74 <strncpy>
  SetCommandBuffer(atCommand);
 80041aa:	2318      	movs	r3, #24
 80041ac:	18eb      	adds	r3, r5, r3
 80041ae:	19db      	adds	r3, r3, r7
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	0018      	movs	r0, r3
 80041b4:	f7ff fc1e 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)){
 80041b8:	2318      	movs	r3, #24
 80041ba:	18e3      	adds	r3, r4, r3
 80041bc:	19db      	adds	r3, r3, r7
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	2318      	movs	r3, #24
 80041c4:	18eb      	adds	r3, r5, r3
 80041c6:	19db      	adds	r3, r3, r7
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	0011      	movs	r1, r2
 80041cc:	0018      	movs	r0, r3
 80041ce:	f7ff faad 	bl	800372c <ESP_Send>
 80041d2:	1e03      	subs	r3, r0, #0
 80041d4:	d001      	beq.n	80041da <HTTPCPOST+0x10e>
    return true;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <HTTPCPOST+0x110>
  }
  else{
    return false;
 80041da:	2300      	movs	r3, #0
 80041dc:	46c5      	mov	sp, r8
  }
}
 80041de:	0018      	movs	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	23a0      	movs	r3, #160	@ 0xa0
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	449d      	add	sp, r3
 80041e8:	bc80      	pop	{r7}
 80041ea:	46b8      	mov	r8, r7
 80041ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ee:	46c0      	nop			@ (mov r8, r8)
 80041f0:	fffffd80 	.word	0xfffffd80
 80041f4:	00000266 	.word	0x00000266
 80041f8:	20000028 	.word	0x20000028
 80041fc:	08019b68 	.word	0x08019b68
 8004200:	00000265 	.word	0x00000265

08004204 <SENDDATA>:
bool SENDDATA(){
 8004204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004206:	46c6      	mov	lr, r8
 8004208:	b500      	push	{lr}
 800420a:	4c4c      	ldr	r4, [pc, #304]	@ (800433c <SENDDATA+0x138>)
 800420c:	44a5      	add	sp, r4
 800420e:	af04      	add	r7, sp, #16
 8004210:	466b      	mov	r3, sp
 8004212:	4698      	mov	r8, r3
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 8004214:	23a4      	movs	r3, #164	@ 0xa4
 8004216:	009a      	lsls	r2, r3, #2
 8004218:	261c      	movs	r6, #28
 800421a:	19bb      	adds	r3, r7, r6
 800421c:	2100      	movs	r1, #0
 800421e:	0018      	movs	r0, r3
 8004220:	f012 fc20 	bl	8016a64 <memset>
  sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
 8004224:	4a46      	ldr	r2, [pc, #280]	@ (8004340 <SENDDATA+0x13c>)
 8004226:	4947      	ldr	r1, [pc, #284]	@ (8004344 <SENDDATA+0x140>)
 8004228:	4847      	ldr	r0, [pc, #284]	@ (8004348 <SENDDATA+0x144>)
 800422a:	19be      	adds	r6, r7, r6
 800422c:	4b47      	ldr	r3, [pc, #284]	@ (800434c <SENDDATA+0x148>)
 800422e:	9302      	str	r3, [sp, #8]
 8004230:	4b47      	ldr	r3, [pc, #284]	@ (8004350 <SENDDATA+0x14c>)
 8004232:	9301      	str	r3, [sp, #4]
 8004234:	4b47      	ldr	r3, [pc, #284]	@ (8004354 <SENDDATA+0x150>)
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	0013      	movs	r3, r2
 800423a:	000a      	movs	r2, r1
 800423c:	0001      	movs	r1, r0
 800423e:	0030      	movs	r0, r6
 8004240:	f012 fb6c 	bl	801691c <siprintf>
  uint16_t len = strlen(atCommandBuff);
 8004244:	231c      	movs	r3, #28
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	0018      	movs	r0, r3
 800424a:	f7fb ff5d 	bl	8000108 <strlen>
 800424e:	0002      	movs	r2, r0
 8004250:	4e41      	ldr	r6, [pc, #260]	@ (8004358 <SENDDATA+0x154>)
 8004252:	2018      	movs	r0, #24
 8004254:	1831      	adds	r1, r6, r0
 8004256:	19cb      	adds	r3, r1, r7
 8004258:	801a      	strh	r2, [r3, #0]
  char atCommand[len+1];
 800425a:	1832      	adds	r2, r6, r0
 800425c:	19d3      	adds	r3, r2, r7
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	3301      	adds	r3, #1
 8004262:	1e5a      	subs	r2, r3, #1
 8004264:	21a6      	movs	r1, #166	@ 0xa6
 8004266:	0089      	lsls	r1, r1, #2
 8004268:	1809      	adds	r1, r1, r0
 800426a:	19c9      	adds	r1, r1, r7
 800426c:	600a      	str	r2, [r1, #0]
 800426e:	001a      	movs	r2, r3
 8004270:	60ba      	str	r2, [r7, #8]
 8004272:	2200      	movs	r2, #0
 8004274:	60fa      	str	r2, [r7, #12]
 8004276:	68b8      	ldr	r0, [r7, #8]
 8004278:	68f9      	ldr	r1, [r7, #12]
 800427a:	0002      	movs	r2, r0
 800427c:	0f52      	lsrs	r2, r2, #29
 800427e:	000e      	movs	r6, r1
 8004280:	00f6      	lsls	r6, r6, #3
 8004282:	617e      	str	r6, [r7, #20]
 8004284:	697e      	ldr	r6, [r7, #20]
 8004286:	4316      	orrs	r6, r2
 8004288:	617e      	str	r6, [r7, #20]
 800428a:	0002      	movs	r2, r0
 800428c:	00d2      	lsls	r2, r2, #3
 800428e:	613a      	str	r2, [r7, #16]
 8004290:	001a      	movs	r2, r3
 8004292:	603a      	str	r2, [r7, #0]
 8004294:	2200      	movs	r2, #0
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	6838      	ldr	r0, [r7, #0]
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	0002      	movs	r2, r0
 800429e:	0f52      	lsrs	r2, r2, #29
 80042a0:	000e      	movs	r6, r1
 80042a2:	00f5      	lsls	r5, r6, #3
 80042a4:	4315      	orrs	r5, r2
 80042a6:	0002      	movs	r2, r0
 80042a8:	00d4      	lsls	r4, r2, #3
 80042aa:	3307      	adds	r3, #7
 80042ac:	08db      	lsrs	r3, r3, #3
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	466a      	mov	r2, sp
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	469d      	mov	sp, r3
 80042b6:	ab04      	add	r3, sp, #16
 80042b8:	3300      	adds	r3, #0
 80042ba:	21a5      	movs	r1, #165	@ 0xa5
 80042bc:	0089      	lsls	r1, r1, #2
 80042be:	2018      	movs	r0, #24
 80042c0:	180a      	adds	r2, r1, r0
 80042c2:	19d2      	adds	r2, r2, r7
 80042c4:	6013      	str	r3, [r2, #0]
  memset(atCommand, '\0', len+1);
 80042c6:	4e24      	ldr	r6, [pc, #144]	@ (8004358 <SENDDATA+0x154>)
 80042c8:	1832      	adds	r2, r6, r0
 80042ca:	19d3      	adds	r3, r2, r7
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	3301      	adds	r3, #1
 80042d0:	001a      	movs	r2, r3
 80042d2:	000c      	movs	r4, r1
 80042d4:	0005      	movs	r5, r0
 80042d6:	1821      	adds	r1, r4, r0
 80042d8:	19cb      	adds	r3, r1, r7
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2100      	movs	r1, #0
 80042de:	0018      	movs	r0, r3
 80042e0:	f012 fbc0 	bl	8016a64 <memset>
  strncpy(atCommand, atCommandBuff, len);
 80042e4:	0028      	movs	r0, r5
 80042e6:	1832      	adds	r2, r6, r0
 80042e8:	19d3      	adds	r3, r2, r7
 80042ea:	881a      	ldrh	r2, [r3, #0]
 80042ec:	231c      	movs	r3, #28
 80042ee:	18f9      	adds	r1, r7, r3
 80042f0:	0005      	movs	r5, r0
 80042f2:	1963      	adds	r3, r4, r5
 80042f4:	19db      	adds	r3, r3, r7
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	0018      	movs	r0, r3
 80042fa:	f012 fbbb 	bl	8016a74 <strncpy>
  SetCommandBuffer(atCommand);
 80042fe:	1963      	adds	r3, r4, r5
 8004300:	19db      	adds	r3, r3, r7
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	0018      	movs	r0, r3
 8004306:	f7ff fb75 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 800430a:	0028      	movs	r0, r5
 800430c:	1833      	adds	r3, r6, r0
 800430e:	19db      	adds	r3, r3, r7
 8004310:	881a      	ldrh	r2, [r3, #0]
 8004312:	1823      	adds	r3, r4, r0
 8004314:	19db      	adds	r3, r3, r7
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	0011      	movs	r1, r2
 800431a:	0018      	movs	r0, r3
 800431c:	f7ff fa06 	bl	800372c <ESP_Send>
 8004320:	1e03      	subs	r3, r0, #0
 8004322:	d001      	beq.n	8004328 <SENDDATA+0x124>
    return true;
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <SENDDATA+0x126>
  }
  else{
    return false;
 8004328:	2300      	movs	r3, #0
 800432a:	46c5      	mov	sp, r8
  }
}
 800432c:	0018      	movs	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	23ae      	movs	r3, #174	@ 0xae
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	449d      	add	sp, r3
 8004336:	bc80      	pop	{r7}
 8004338:	46b8      	mov	r8, r7
 800433a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800433c:	fffffd38 	.word	0xfffffd38
 8004340:	20000680 	.word	0x20000680
 8004344:	20000600 	.word	0x20000600
 8004348:	08019ba0 	.word	0x08019ba0
 800434c:	20000800 	.word	0x20000800
 8004350:	20000780 	.word	0x20000780
 8004354:	20000700 	.word	0x20000700
 8004358:	0000029e 	.word	0x0000029e

0800435c <SLEEP>:
bool SLEEP(){
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004362:	4b0d      	ldr	r3, [pc, #52]	@ (8004398 <SLEEP+0x3c>)
 8004364:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0018      	movs	r0, r3
 800436a:	f7ff fb43 	bl	80039f4 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	0018      	movs	r0, r3
 8004372:	f7fb fec9 	bl	8000108 <strlen>
 8004376:	0003      	movs	r3, r0
 8004378:	b29a      	uxth	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	0011      	movs	r1, r2
 800437e:	0018      	movs	r0, r3
 8004380:	f7ff f9d4 	bl	800372c <ESP_Send>
 8004384:	1e03      	subs	r3, r0, #0
 8004386:	d001      	beq.n	800438c <SLEEP+0x30>
    return true;
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <SLEEP+0x32>
  }
  else{
    return false;
 800438c:	2300      	movs	r3, #0
  }
}
 800438e:	0018      	movs	r0, r3
 8004390:	46bd      	mov	sp, r7
 8004392:	b002      	add	sp, #8
 8004394:	bd80      	pop	{r7, pc}
 8004396:	46c0      	nop			@ (mov r8, r8)
 8004398:	08019bc0 	.word	0x08019bc0

0800439c <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 800439c:	b5b0      	push	{r4, r5, r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	0002      	movs	r2, r0
 80043a4:	1dfb      	adds	r3, r7, #7
 80043a6:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 80043a8:	4b4c      	ldr	r3, [pc, #304]	@ (80044dc <DMA_ProcessBuffer+0x140>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	210e      	movs	r1, #14
 80043b2:	187b      	adds	r3, r7, r1
 80043b4:	43d2      	mvns	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 80043b8:	200f      	movs	r0, #15
 80043ba:	183b      	adds	r3, r7, r0
 80043bc:	2203      	movs	r2, #3
 80043be:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 80043c0:	4b47      	ldr	r3, [pc, #284]	@ (80044e0 <DMA_ProcessBuffer+0x144>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	187a      	adds	r2, r7, r1
 80043c8:	7812      	ldrb	r2, [r2, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d129      	bne.n	8004422 <DMA_ProcessBuffer+0x86>
      if(retry >4){
 80043ce:	4b45      	ldr	r3, [pc, #276]	@ (80044e4 <DMA_ProcessBuffer+0x148>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d913      	bls.n	80043fe <DMA_ProcessBuffer+0x62>
        retry = 0;
 80043d6:	4b43      	ldr	r3, [pc, #268]	@ (80044e4 <DMA_ProcessBuffer+0x148>)
 80043d8:	2200      	movs	r2, #0
 80043da:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 80043dc:	4b42      	ldr	r3, [pc, #264]	@ (80044e8 <DMA_ProcessBuffer+0x14c>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d107      	bne.n	80043f4 <DMA_ProcessBuffer+0x58>
 80043e4:	4b41      	ldr	r3, [pc, #260]	@ (80044ec <DMA_ProcessBuffer+0x150>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <DMA_ProcessBuffer+0x58>
          status = RECEIVE_STATUS_UNPROGGED;
 80043ec:	183b      	adds	r3, r7, r0
 80043ee:	2207      	movs	r2, #7
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	e016      	b.n	8004422 <DMA_ProcessBuffer+0x86>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 80043f4:	230f      	movs	r3, #15
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	2206      	movs	r2, #6
 80043fa:	701a      	strb	r2, [r3, #0]
 80043fc:	e011      	b.n	8004422 <DMA_ProcessBuffer+0x86>
        }
      }
     else{
       retry ++;
 80043fe:	4b39      	ldr	r3, [pc, #228]	@ (80044e4 <DMA_ProcessBuffer+0x148>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	3301      	adds	r3, #1
 8004404:	b2da      	uxtb	r2, r3
 8004406:	4b37      	ldr	r3, [pc, #220]	@ (80044e4 <DMA_ProcessBuffer+0x148>)
 8004408:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800440a:	f004 ff63 	bl	80092d4 <HAL_GetTick>
 800440e:	0003      	movs	r3, r0
 8004410:	33f5      	adds	r3, #245	@ 0xf5
 8004412:	33ff      	adds	r3, #255	@ 0xff
 8004414:	001a      	movs	r2, r3
 8004416:	4b36      	ldr	r3, [pc, #216]	@ (80044f0 <DMA_ProcessBuffer+0x154>)
 8004418:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 800441a:	230f      	movs	r3, #15
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	2204      	movs	r2, #4
 8004420:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004422:	4b2f      	ldr	r3, [pc, #188]	@ (80044e0 <DMA_ProcessBuffer+0x144>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	210e      	movs	r1, #14
 800442a:	187a      	adds	r2, r7, r1
 800442c:	7812      	ldrb	r2, [r2, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d048      	beq.n	80044c4 <DMA_ProcessBuffer+0x128>
      retry = 0;
 8004432:	4b2c      	ldr	r3, [pc, #176]	@ (80044e4 <DMA_ProcessBuffer+0x148>)
 8004434:	2200      	movs	r2, #0
 8004436:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 8004438:	4b29      	ldr	r3, [pc, #164]	@ (80044e0 <DMA_ProcessBuffer+0x144>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	187a      	adds	r2, r7, r1
 8004440:	7812      	ldrb	r2, [r2, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d917      	bls.n	8004476 <DMA_ProcessBuffer+0xda>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004446:	4b26      	ldr	r3, [pc, #152]	@ (80044e0 <DMA_ProcessBuffer+0x144>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	001a      	movs	r2, r3
 800444e:	4b29      	ldr	r3, [pc, #164]	@ (80044f4 <DMA_ProcessBuffer+0x158>)
 8004450:	18d0      	adds	r0, r2, r3
 8004452:	187b      	adds	r3, r7, r1
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	4a21      	ldr	r2, [pc, #132]	@ (80044e0 <DMA_ProcessBuffer+0x144>)
 800445a:	7812      	ldrb	r2, [r2, #0]
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	1a9b      	subs	r3, r3, r2
 8004460:	b299      	uxth	r1, r3
 8004462:	230f      	movs	r3, #15
 8004464:	18fc      	adds	r4, r7, r3
 8004466:	1dfb      	adds	r3, r7, #7
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	001a      	movs	r2, r3
 800446c:	f7ff fb0c 	bl	8003a88 <ParseBuffer>
 8004470:	0003      	movs	r3, r0
 8004472:	7023      	strb	r3, [r4, #0]
 8004474:	e026      	b.n	80044c4 <DMA_ProcessBuffer+0x128>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004476:	4b1a      	ldr	r3, [pc, #104]	@ (80044e0 <DMA_ProcessBuffer+0x144>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	001a      	movs	r2, r3
 800447e:	4b1d      	ldr	r3, [pc, #116]	@ (80044f4 <DMA_ProcessBuffer+0x158>)
 8004480:	18d0      	adds	r0, r2, r3
 8004482:	4b17      	ldr	r3, [pc, #92]	@ (80044e0 <DMA_ProcessBuffer+0x144>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	001a      	movs	r2, r3
 800448a:	23ff      	movs	r3, #255	@ 0xff
 800448c:	1a9b      	subs	r3, r3, r2
 800448e:	b299      	uxth	r1, r3
 8004490:	250f      	movs	r5, #15
 8004492:	197c      	adds	r4, r7, r5
 8004494:	1dfb      	adds	r3, r7, #7
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	001a      	movs	r2, r3
 800449a:	f7ff faf5 	bl	8003a88 <ParseBuffer>
 800449e:	0003      	movs	r3, r0
 80044a0:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 80044a2:	220e      	movs	r2, #14
 80044a4:	18bb      	adds	r3, r7, r2
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00b      	beq.n	80044c4 <DMA_ProcessBuffer+0x128>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 80044ac:	18bb      	adds	r3, r7, r2
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	b299      	uxth	r1, r3
 80044b2:	197c      	adds	r4, r7, r5
 80044b4:	1dfb      	adds	r3, r7, #7
 80044b6:	781a      	ldrb	r2, [r3, #0]
 80044b8:	4b0e      	ldr	r3, [pc, #56]	@ (80044f4 <DMA_ProcessBuffer+0x158>)
 80044ba:	0018      	movs	r0, r3
 80044bc:	f7ff fae4 	bl	8003a88 <ParseBuffer>
 80044c0:	0003      	movs	r3, r0
 80044c2:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 80044c4:	4b06      	ldr	r3, [pc, #24]	@ (80044e0 <DMA_ProcessBuffer+0x144>)
 80044c6:	220e      	movs	r2, #14
 80044c8:	18ba      	adds	r2, r7, r2
 80044ca:	7812      	ldrb	r2, [r2, #0]
 80044cc:	701a      	strb	r2, [r3, #0]
    return status;
 80044ce:	230f      	movs	r3, #15
 80044d0:	18fb      	adds	r3, r7, r3
 80044d2:	781b      	ldrb	r3, [r3, #0]
}
 80044d4:	0018      	movs	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	b004      	add	sp, #16
 80044da:	bdb0      	pop	{r4, r5, r7, pc}
 80044dc:	20002814 	.word	0x20002814
 80044e0:	2000088b 	.word	0x2000088b
 80044e4:	20000890 	.word	0x20000890
 80044e8:	20000a96 	.word	0x20000a96
 80044ec:	20000002 	.word	0x20000002
 80044f0:	2000088c 	.word	0x2000088c
 80044f4:	200004d8 	.word	0x200004d8

080044f8 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	0002      	movs	r2, r0
 8004500:	1dfb      	adds	r3, r7, #7
 8004502:	701a      	strb	r2, [r3, #0]
 8004504:	1dbb      	adds	r3, r7, #6
 8004506:	1c0a      	adds	r2, r1, #0
 8004508:	701a      	strb	r2, [r3, #0]
  bool value = false;
 800450a:	210f      	movs	r1, #15
 800450c:	187b      	adds	r3, r7, r1
 800450e:	2200      	movs	r2, #0
 8004510:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004512:	1dbb      	adds	r3, r7, #6
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d105      	bne.n	8004526 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 800451a:	187b      	adds	r3, r7, r1
 800451c:	1dfa      	adds	r2, r7, #7
 800451e:	7812      	ldrb	r2, [r2, #0]
 8004520:	4251      	negs	r1, r2
 8004522:	414a      	adcs	r2, r1
 8004524:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004526:	1dbb      	adds	r3, r7, #6
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d107      	bne.n	800453e <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800452e:	230f      	movs	r3, #15
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	1dfa      	adds	r2, r7, #7
 8004534:	7812      	ldrb	r2, [r2, #0]
 8004536:	3a02      	subs	r2, #2
 8004538:	4251      	negs	r1, r2
 800453a:	414a      	adcs	r2, r1
 800453c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 800453e:	1dbb      	adds	r3, r7, #6
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d107      	bne.n	8004556 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004546:	230f      	movs	r3, #15
 8004548:	18fb      	adds	r3, r7, r3
 800454a:	1dfa      	adds	r2, r7, #7
 800454c:	7812      	ldrb	r2, [r2, #0]
 800454e:	3a05      	subs	r2, #5
 8004550:	4251      	negs	r1, r2
 8004552:	414a      	adcs	r2, r1
 8004554:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004556:	230f      	movs	r3, #15
 8004558:	18fb      	adds	r3, r7, r3
 800455a:	781b      	ldrb	r3, [r3, #0]
}
 800455c:	0018      	movs	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	b004      	add	sp, #16
 8004562:	bd80      	pop	{r7, pc}

08004564 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004564:	b590      	push	{r4, r7, lr}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	0002      	movs	r2, r0
 800456c:	1dfb      	adds	r3, r7, #7
 800456e:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004570:	230f      	movs	r3, #15
 8004572:	18fb      	adds	r3, r7, r3
 8004574:	2200      	movs	r2, #0
 8004576:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004578:	1dfb      	adds	r3, r7, #7
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b0e      	cmp	r3, #14
 800457e:	d900      	bls.n	8004582 <AT_Send+0x1e>
 8004580:	e136      	b.n	80047f0 <AT_Send+0x28c>
 8004582:	009a      	lsls	r2, r3, #2
 8004584:	4b9e      	ldr	r3, [pc, #632]	@ (8004800 <AT_Send+0x29c>)
 8004586:	18d3      	adds	r3, r2, r3
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 800458c:	4b9d      	ldr	r3, [pc, #628]	@ (8004804 <AT_Send+0x2a0>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	0018      	movs	r0, r3
 8004592:	f004 fa51 	bl	8008a38 <TimestampIsReached>
 8004596:	1e03      	subs	r3, r0, #0
 8004598:	d100      	bne.n	800459c <AT_Send+0x38>
 800459a:	e128      	b.n	80047ee <AT_Send+0x28a>
    ATCommandSend = PollAwake();
 800459c:	230f      	movs	r3, #15
 800459e:	18fc      	adds	r4, r7, r3
 80045a0:	f7ff fbb4 	bl	8003d0c <PollAwake>
 80045a4:	0003      	movs	r3, r0
 80045a6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80045a8:	f004 fe94 	bl	80092d4 <HAL_GetTick>
 80045ac:	0003      	movs	r3, r0
 80045ae:	3332      	adds	r3, #50	@ 0x32
 80045b0:	001a      	movs	r2, r3
 80045b2:	4b94      	ldr	r3, [pc, #592]	@ (8004804 <AT_Send+0x2a0>)
 80045b4:	601a      	str	r2, [r3, #0]
  }
  break;
 80045b6:	e11a      	b.n	80047ee <AT_Send+0x28a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 80045b8:	4a93      	ldr	r2, [pc, #588]	@ (8004808 <AT_Send+0x2a4>)
 80045ba:	4b94      	ldr	r3, [pc, #592]	@ (800480c <AT_Send+0x2a8>)
 80045bc:	0019      	movs	r1, r3
 80045be:	2003      	movs	r0, #3
 80045c0:	f004 fa90 	bl	8008ae4 <CreateLine>
    ATCommandSend = RFPower();
 80045c4:	230f      	movs	r3, #15
 80045c6:	18fc      	adds	r4, r7, r3
 80045c8:	f7ff fbc0 	bl	8003d4c <RFPower>
 80045cc:	0003      	movs	r3, r0
 80045ce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80045d0:	f004 fe80 	bl	80092d4 <HAL_GetTick>
 80045d4:	0003      	movs	r3, r0
 80045d6:	330a      	adds	r3, #10
 80045d8:	001a      	movs	r2, r3
 80045da:	4b8a      	ldr	r3, [pc, #552]	@ (8004804 <AT_Send+0x2a0>)
 80045dc:	601a      	str	r2, [r3, #0]
    break;
 80045de:	e107      	b.n	80047f0 <AT_Send+0x28c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 80045e0:	4a8b      	ldr	r2, [pc, #556]	@ (8004810 <AT_Send+0x2ac>)
 80045e2:	4b8a      	ldr	r3, [pc, #552]	@ (800480c <AT_Send+0x2a8>)
 80045e4:	0019      	movs	r1, r3
 80045e6:	2003      	movs	r0, #3
 80045e8:	f004 fa7c 	bl	8008ae4 <CreateLine>
    ATCommandSend = CheckRFPower();
 80045ec:	230f      	movs	r3, #15
 80045ee:	18fc      	adds	r4, r7, r3
 80045f0:	f7ff fbcc 	bl	8003d8c <CheckRFPower>
 80045f4:	0003      	movs	r3, r0
 80045f6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80045f8:	f004 fe6c 	bl	80092d4 <HAL_GetTick>
 80045fc:	0003      	movs	r3, r0
 80045fe:	330a      	adds	r3, #10
 8004600:	001a      	movs	r2, r3
 8004602:	4b80      	ldr	r3, [pc, #512]	@ (8004804 <AT_Send+0x2a0>)
 8004604:	601a      	str	r2, [r3, #0]
    break;
 8004606:	e0f3      	b.n	80047f0 <AT_Send+0x28c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004608:	4a82      	ldr	r2, [pc, #520]	@ (8004814 <AT_Send+0x2b0>)
 800460a:	4b80      	ldr	r3, [pc, #512]	@ (800480c <AT_Send+0x2a8>)
 800460c:	0019      	movs	r1, r3
 800460e:	2003      	movs	r0, #3
 8004610:	f004 fa68 	bl	8008ae4 <CreateLine>
    ATCommandSend = ATRestore();
 8004614:	230f      	movs	r3, #15
 8004616:	18fc      	adds	r4, r7, r3
 8004618:	f7ff fbd8 	bl	8003dcc <ATRestore>
 800461c:	0003      	movs	r3, r0
 800461e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004620:	f004 fe58 	bl	80092d4 <HAL_GetTick>
 8004624:	0003      	movs	r3, r0
 8004626:	3332      	adds	r3, #50	@ 0x32
 8004628:	001a      	movs	r2, r3
 800462a:	4b76      	ldr	r3, [pc, #472]	@ (8004804 <AT_Send+0x2a0>)
 800462c:	601a      	str	r2, [r3, #0]
    break;
 800462e:	e0df      	b.n	80047f0 <AT_Send+0x28c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004630:	4a79      	ldr	r2, [pc, #484]	@ (8004818 <AT_Send+0x2b4>)
 8004632:	4b76      	ldr	r3, [pc, #472]	@ (800480c <AT_Send+0x2a8>)
 8004634:	0019      	movs	r1, r3
 8004636:	2003      	movs	r0, #3
 8004638:	f004 fa54 	bl	8008ae4 <CreateLine>
    ATCommandSend = CWINIT();
 800463c:	230f      	movs	r3, #15
 800463e:	18fc      	adds	r4, r7, r3
 8004640:	f7ff fbe4 	bl	8003e0c <CWINIT>
 8004644:	0003      	movs	r3, r0
 8004646:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004648:	f004 fe44 	bl	80092d4 <HAL_GetTick>
 800464c:	0003      	movs	r3, r0
 800464e:	33f5      	adds	r3, #245	@ 0xf5
 8004650:	33ff      	adds	r3, #255	@ 0xff
 8004652:	001a      	movs	r2, r3
 8004654:	4b6b      	ldr	r3, [pc, #428]	@ (8004804 <AT_Send+0x2a0>)
 8004656:	601a      	str	r2, [r3, #0]
    break;
 8004658:	e0ca      	b.n	80047f0 <AT_Send+0x28c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 800465a:	4a70      	ldr	r2, [pc, #448]	@ (800481c <AT_Send+0x2b8>)
 800465c:	4b6b      	ldr	r3, [pc, #428]	@ (800480c <AT_Send+0x2a8>)
 800465e:	0019      	movs	r1, r3
 8004660:	2003      	movs	r0, #3
 8004662:	f004 fa3f 	bl	8008ae4 <CreateLine>
    ATCommandSend = CWMODE1();
 8004666:	230f      	movs	r3, #15
 8004668:	18fc      	adds	r4, r7, r3
 800466a:	f7ff fbef 	bl	8003e4c <CWMODE1>
 800466e:	0003      	movs	r3, r0
 8004670:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004672:	f004 fe2f 	bl	80092d4 <HAL_GetTick>
 8004676:	0003      	movs	r3, r0
 8004678:	330a      	adds	r3, #10
 800467a:	001a      	movs	r2, r3
 800467c:	4b61      	ldr	r3, [pc, #388]	@ (8004804 <AT_Send+0x2a0>)
 800467e:	601a      	str	r2, [r3, #0]
    break;
 8004680:	e0b6      	b.n	80047f0 <AT_Send+0x28c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004682:	4a67      	ldr	r2, [pc, #412]	@ (8004820 <AT_Send+0x2bc>)
 8004684:	4b61      	ldr	r3, [pc, #388]	@ (800480c <AT_Send+0x2a8>)
 8004686:	0019      	movs	r1, r3
 8004688:	2003      	movs	r0, #3
 800468a:	f004 fa2b 	bl	8008ae4 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800468e:	230f      	movs	r3, #15
 8004690:	18fc      	adds	r4, r7, r3
 8004692:	f7ff fbfb 	bl	8003e8c <CWAUTOCONN>
 8004696:	0003      	movs	r3, r0
 8004698:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800469a:	f004 fe1b 	bl	80092d4 <HAL_GetTick>
 800469e:	0003      	movs	r3, r0
 80046a0:	330a      	adds	r3, #10
 80046a2:	001a      	movs	r2, r3
 80046a4:	4b57      	ldr	r3, [pc, #348]	@ (8004804 <AT_Send+0x2a0>)
 80046a6:	601a      	str	r2, [r3, #0]
    break;
 80046a8:	e0a2      	b.n	80047f0 <AT_Send+0x28c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 80046aa:	4a5e      	ldr	r2, [pc, #376]	@ (8004824 <AT_Send+0x2c0>)
 80046ac:	4b57      	ldr	r3, [pc, #348]	@ (800480c <AT_Send+0x2a8>)
 80046ae:	0019      	movs	r1, r3
 80046b0:	2003      	movs	r0, #3
 80046b2:	f004 fa17 	bl	8008ae4 <CreateLine>
    ATCommandSend = CWJAP();
 80046b6:	230f      	movs	r3, #15
 80046b8:	18fc      	adds	r4, r7, r3
 80046ba:	f7ff fc07 	bl	8003ecc <CWJAP>
 80046be:	0003      	movs	r3, r0
 80046c0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80046c2:	f004 fe07 	bl	80092d4 <HAL_GetTick>
 80046c6:	0003      	movs	r3, r0
 80046c8:	3332      	adds	r3, #50	@ 0x32
 80046ca:	001a      	movs	r2, r3
 80046cc:	4b4d      	ldr	r3, [pc, #308]	@ (8004804 <AT_Send+0x2a0>)
 80046ce:	601a      	str	r2, [r3, #0]
    break;
 80046d0:	e08e      	b.n	80047f0 <AT_Send+0x28c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 80046d2:	4a55      	ldr	r2, [pc, #340]	@ (8004828 <AT_Send+0x2c4>)
 80046d4:	4b4d      	ldr	r3, [pc, #308]	@ (800480c <AT_Send+0x2a8>)
 80046d6:	0019      	movs	r1, r3
 80046d8:	2003      	movs	r0, #3
 80046da:	f004 fa03 	bl	8008ae4 <CreateLine>
    ATCommandSend = CWMODE3();
 80046de:	230f      	movs	r3, #15
 80046e0:	18fc      	adds	r4, r7, r3
 80046e2:	f7ff fc73 	bl	8003fcc <CWMODE3>
 80046e6:	0003      	movs	r3, r0
 80046e8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046ea:	f004 fdf3 	bl	80092d4 <HAL_GetTick>
 80046ee:	0003      	movs	r3, r0
 80046f0:	330a      	adds	r3, #10
 80046f2:	001a      	movs	r2, r3
 80046f4:	4b43      	ldr	r3, [pc, #268]	@ (8004804 <AT_Send+0x2a0>)
 80046f6:	601a      	str	r2, [r3, #0]
    break;
 80046f8:	e07a      	b.n	80047f0 <AT_Send+0x28c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80046fa:	4a4c      	ldr	r2, [pc, #304]	@ (800482c <AT_Send+0x2c8>)
 80046fc:	4b43      	ldr	r3, [pc, #268]	@ (800480c <AT_Send+0x2a8>)
 80046fe:	0019      	movs	r1, r3
 8004700:	2003      	movs	r0, #3
 8004702:	f004 f9ef 	bl	8008ae4 <CreateLine>
    ATCommandSend = CWSAP();
 8004706:	230f      	movs	r3, #15
 8004708:	18fc      	adds	r4, r7, r3
 800470a:	f7ff fc7f 	bl	800400c <CWSAP>
 800470e:	0003      	movs	r3, r0
 8004710:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004712:	f004 fddf 	bl	80092d4 <HAL_GetTick>
 8004716:	0003      	movs	r3, r0
 8004718:	330a      	adds	r3, #10
 800471a:	001a      	movs	r2, r3
 800471c:	4b39      	ldr	r3, [pc, #228]	@ (8004804 <AT_Send+0x2a0>)
 800471e:	601a      	str	r2, [r3, #0]
    break;
 8004720:	e066      	b.n	80047f0 <AT_Send+0x28c>

  case AT_CIPMUX:
    Debug("SET multiple communication channels");
 8004722:	4a43      	ldr	r2, [pc, #268]	@ (8004830 <AT_Send+0x2cc>)
 8004724:	4b39      	ldr	r3, [pc, #228]	@ (800480c <AT_Send+0x2a8>)
 8004726:	0019      	movs	r1, r3
 8004728:	2003      	movs	r0, #3
 800472a:	f004 f9db 	bl	8008ae4 <CreateLine>
    ATCommandSend = CIPMUX();
 800472e:	230f      	movs	r3, #15
 8004730:	18fc      	adds	r4, r7, r3
 8004732:	f7ff fc8b 	bl	800404c <CIPMUX>
 8004736:	0003      	movs	r3, r0
 8004738:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800473a:	f004 fdcb 	bl	80092d4 <HAL_GetTick>
 800473e:	0003      	movs	r3, r0
 8004740:	330a      	adds	r3, #10
 8004742:	001a      	movs	r2, r3
 8004744:	4b2f      	ldr	r3, [pc, #188]	@ (8004804 <AT_Send+0x2a0>)
 8004746:	601a      	str	r2, [r3, #0]
    break;
 8004748:	e052      	b.n	80047f0 <AT_Send+0x28c>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 800474a:	4a37      	ldr	r2, [pc, #220]	@ (8004828 <AT_Send+0x2c4>)
 800474c:	4b2f      	ldr	r3, [pc, #188]	@ (800480c <AT_Send+0x2a8>)
 800474e:	0019      	movs	r1, r3
 8004750:	2003      	movs	r0, #3
 8004752:	f004 f9c7 	bl	8008ae4 <CreateLine>
    ATCommandSend = WEBSERVER();
 8004756:	230f      	movs	r3, #15
 8004758:	18fc      	adds	r4, r7, r3
 800475a:	f7ff fc97 	bl	800408c <WEBSERVER>
 800475e:	0003      	movs	r3, r0
 8004760:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004762:	f004 fdb7 	bl	80092d4 <HAL_GetTick>
 8004766:	0003      	movs	r3, r0
 8004768:	330a      	adds	r3, #10
 800476a:	001a      	movs	r2, r3
 800476c:	4b25      	ldr	r3, [pc, #148]	@ (8004804 <AT_Send+0x2a0>)
 800476e:	601a      	str	r2, [r3, #0]
    break;
 8004770:	e03e      	b.n	80047f0 <AT_Send+0x28c>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 8004772:	4a2d      	ldr	r2, [pc, #180]	@ (8004828 <AT_Send+0x2c4>)
 8004774:	4b25      	ldr	r3, [pc, #148]	@ (800480c <AT_Send+0x2a8>)
 8004776:	0019      	movs	r1, r3
 8004778:	2003      	movs	r0, #3
 800477a:	f004 f9b3 	bl	8008ae4 <CreateLine>
    ATCommandSend = HTTPCPOST();
 800477e:	230f      	movs	r3, #15
 8004780:	18fc      	adds	r4, r7, r3
 8004782:	f7ff fca3 	bl	80040cc <HTTPCPOST>
 8004786:	0003      	movs	r3, r0
 8004788:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800478a:	f004 fda3 	bl	80092d4 <HAL_GetTick>
 800478e:	0003      	movs	r3, r0
 8004790:	33f5      	adds	r3, #245	@ 0xf5
 8004792:	33ff      	adds	r3, #255	@ 0xff
 8004794:	001a      	movs	r2, r3
 8004796:	4b1b      	ldr	r3, [pc, #108]	@ (8004804 <AT_Send+0x2a0>)
 8004798:	601a      	str	r2, [r3, #0]
    break;
 800479a:	e029      	b.n	80047f0 <AT_Send+0x28c>

  case AT_SENDDATA:
    Debug("Send the data");
 800479c:	4a25      	ldr	r2, [pc, #148]	@ (8004834 <AT_Send+0x2d0>)
 800479e:	4b1b      	ldr	r3, [pc, #108]	@ (800480c <AT_Send+0x2a8>)
 80047a0:	0019      	movs	r1, r3
 80047a2:	2003      	movs	r0, #3
 80047a4:	f004 f99e 	bl	8008ae4 <CreateLine>
    ATCommandSend = SENDDATA();
 80047a8:	230f      	movs	r3, #15
 80047aa:	18fc      	adds	r4, r7, r3
 80047ac:	f7ff fd2a 	bl	8004204 <SENDDATA>
 80047b0:	0003      	movs	r3, r0
 80047b2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80047b4:	f004 fd8e 	bl	80092d4 <HAL_GetTick>
 80047b8:	0003      	movs	r3, r0
 80047ba:	33f5      	adds	r3, #245	@ 0xf5
 80047bc:	33ff      	adds	r3, #255	@ 0xff
 80047be:	001a      	movs	r2, r3
 80047c0:	4b10      	ldr	r3, [pc, #64]	@ (8004804 <AT_Send+0x2a0>)
 80047c2:	601a      	str	r2, [r3, #0]
    break;
 80047c4:	e014      	b.n	80047f0 <AT_Send+0x28c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 80047c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004838 <AT_Send+0x2d4>)
 80047c8:	4b10      	ldr	r3, [pc, #64]	@ (800480c <AT_Send+0x2a8>)
 80047ca:	0019      	movs	r1, r3
 80047cc:	2003      	movs	r0, #3
 80047ce:	f004 f989 	bl	8008ae4 <CreateLine>
    ATCommandSend = SLEEP();
 80047d2:	230f      	movs	r3, #15
 80047d4:	18fc      	adds	r4, r7, r3
 80047d6:	f7ff fdc1 	bl	800435c <SLEEP>
 80047da:	0003      	movs	r3, r0
 80047dc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80047de:	f004 fd79 	bl	80092d4 <HAL_GetTick>
 80047e2:	0003      	movs	r3, r0
 80047e4:	330a      	adds	r3, #10
 80047e6:	001a      	movs	r2, r3
 80047e8:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <AT_Send+0x2a0>)
 80047ea:	601a      	str	r2, [r3, #0]
    break;
 80047ec:	e000      	b.n	80047f0 <AT_Send+0x28c>
  break;
 80047ee:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80047f0:	230f      	movs	r3, #15
 80047f2:	18fb      	adds	r3, r7, r3
 80047f4:	781b      	ldrb	r3, [r3, #0]
}
 80047f6:	0018      	movs	r0, r3
 80047f8:	46bd      	mov	sp, r7
 80047fa:	b005      	add	sp, #20
 80047fc:	bd90      	pop	{r4, r7, pc}
 80047fe:	46c0      	nop			@ (mov r8, r8)
 8004800:	0801a370 	.word	0x0801a370
 8004804:	2000088c 	.word	0x2000088c
 8004808:	08019bd0 	.word	0x08019bd0
 800480c:	08019878 	.word	0x08019878
 8004810:	08019be4 	.word	0x08019be4
 8004814:	08019bf8 	.word	0x08019bf8
 8004818:	08019c08 	.word	0x08019c08
 800481c:	08019c1c 	.word	0x08019c1c
 8004820:	08019c34 	.word	0x08019c34
 8004824:	08019c4c 	.word	0x08019c4c
 8004828:	08019c60 	.word	0x08019c60
 800482c:	08019c7c 	.word	0x08019c7c
 8004830:	08019c98 	.word	0x08019c98
 8004834:	08019cbc 	.word	0x08019cbc
 8004838:	08019ccc 	.word	0x08019ccc

0800483c <ESP_WakeTest>:

void ESP_WakeTest(void) {
 800483c:	b590      	push	{r4, r7, lr}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004842:	1dfb      	adds	r3, r7, #7
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
  static RECEIVE_STATUS ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004848:	4b79      	ldr	r3, [pc, #484]	@ (8004a30 <ESP_WakeTest+0x1f4>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b05      	cmp	r3, #5
 800484e:	d900      	bls.n	8004852 <ESP_WakeTest+0x16>
 8004850:	e0e9      	b.n	8004a26 <ESP_WakeTest+0x1ea>
 8004852:	009a      	lsls	r2, r3, #2
 8004854:	4b77      	ldr	r3, [pc, #476]	@ (8004a34 <ESP_WakeTest+0x1f8>)
 8004856:	18d3      	adds	r3, r2, r3
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 800485c:	4b76      	ldr	r3, [pc, #472]	@ (8004a38 <ESP_WakeTest+0x1fc>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2201      	movs	r2, #1
 8004862:	4053      	eors	r3, r2
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d03a      	beq.n	80048e0 <ESP_WakeTest+0xa4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800486a:	2380      	movs	r3, #128	@ 0x80
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	4873      	ldr	r0, [pc, #460]	@ (8004a3c <ESP_WakeTest+0x200>)
 8004870:	2200      	movs	r2, #0
 8004872:	0019      	movs	r1, r3
 8004874:	f005 fee2 	bl	800a63c <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8004878:	23fa      	movs	r3, #250	@ 0xfa
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	0018      	movs	r0, r3
 800487e:	f004 fd33 	bl	80092e8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004882:	2380      	movs	r3, #128	@ 0x80
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	486d      	ldr	r0, [pc, #436]	@ (8004a3c <ESP_WakeTest+0x200>)
 8004888:	2201      	movs	r2, #1
 800488a:	0019      	movs	r1, r3
 800488c:	f005 fed6 	bl	800a63c <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8004890:	23fa      	movs	r3, #250	@ 0xfa
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	0018      	movs	r0, r3
 8004896:	f004 fd27 	bl	80092e8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800489a:	4b69      	ldr	r3, [pc, #420]	@ (8004a40 <ESP_WakeTest+0x204>)
 800489c:	2200      	movs	r2, #0
 800489e:	2101      	movs	r1, #1
 80048a0:	0018      	movs	r0, r3
 80048a2:	f005 fecb 	bl	800a63c <HAL_GPIO_WritePin>
        HAL_Delay(100);
 80048a6:	2064      	movs	r0, #100	@ 0x64
 80048a8:	f004 fd1e 	bl	80092e8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80048ac:	4b64      	ldr	r3, [pc, #400]	@ (8004a40 <ESP_WakeTest+0x204>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	2102      	movs	r1, #2
 80048b2:	0018      	movs	r0, r3
 80048b4:	f005 fec2 	bl	800a63c <HAL_GPIO_WritePin>
        HAL_Delay(100);
 80048b8:	2064      	movs	r0, #100	@ 0x64
 80048ba:	f004 fd15 	bl	80092e8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80048be:	4b60      	ldr	r3, [pc, #384]	@ (8004a40 <ESP_WakeTest+0x204>)
 80048c0:	2201      	movs	r2, #1
 80048c2:	2101      	movs	r1, #1
 80048c4:	0018      	movs	r0, r3
 80048c6:	f005 feb9 	bl	800a63c <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80048ca:	f004 fd03 	bl	80092d4 <HAL_GetTick>
 80048ce:	0003      	movs	r3, r0
 80048d0:	22af      	movs	r2, #175	@ 0xaf
 80048d2:	0092      	lsls	r2, r2, #2
 80048d4:	189a      	adds	r2, r3, r2
 80048d6:	4b5b      	ldr	r3, [pc, #364]	@ (8004a44 <ESP_WakeTest+0x208>)
 80048d8:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80048da:	4b57      	ldr	r3, [pc, #348]	@ (8004a38 <ESP_WakeTest+0x1fc>)
 80048dc:	2201      	movs	r2, #1
 80048de:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80048e0:	4b59      	ldr	r3, [pc, #356]	@ (8004a48 <ESP_WakeTest+0x20c>)
 80048e2:	21ff      	movs	r1, #255	@ 0xff
 80048e4:	0018      	movs	r0, r3
 80048e6:	f7fe ff6b 	bl	80037c0 <ESP_Receive>
 80048ea:	1e03      	subs	r3, r0, #0
 80048ec:	d100      	bne.n	80048f0 <ESP_WakeTest+0xb4>
 80048ee:	e095      	b.n	8004a1c <ESP_WakeTest+0x1e0>
        TestState = ESP_TEST_SEND;
 80048f0:	4b4f      	ldr	r3, [pc, #316]	@ (8004a30 <ESP_WakeTest+0x1f4>)
 80048f2:	2201      	movs	r2, #1
 80048f4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80048f6:	e091      	b.n	8004a1c <ESP_WakeTest+0x1e0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 80048f8:	4b52      	ldr	r3, [pc, #328]	@ (8004a44 <ESP_WakeTest+0x208>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	0018      	movs	r0, r3
 80048fe:	f004 f89b 	bl	8008a38 <TimestampIsReached>
 8004902:	1e03      	subs	r3, r0, #0
 8004904:	d100      	bne.n	8004908 <ESP_WakeTest+0xcc>
 8004906:	e08b      	b.n	8004a20 <ESP_WakeTest+0x1e4>
        ATSend = AT_Send(ATCommand);
 8004908:	4b50      	ldr	r3, [pc, #320]	@ (8004a4c <ESP_WakeTest+0x210>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	1dfc      	adds	r4, r7, #7
 800490e:	0018      	movs	r0, r3
 8004910:	f7ff fe28 	bl	8004564 <AT_Send>
 8004914:	0003      	movs	r3, r0
 8004916:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004918:	1dfb      	adds	r3, r7, #7
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d100      	bne.n	8004922 <ESP_WakeTest+0xe6>
 8004920:	e07e      	b.n	8004a20 <ESP_WakeTest+0x1e4>
          TestState = ESP_TEST_RECEIVE;
 8004922:	4b43      	ldr	r3, [pc, #268]	@ (8004a30 <ESP_WakeTest+0x1f4>)
 8004924:	2202      	movs	r2, #2
 8004926:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004928:	e07a      	b.n	8004a20 <ESP_WakeTest+0x1e4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 800492a:	4b46      	ldr	r3, [pc, #280]	@ (8004a44 <ESP_WakeTest+0x208>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	0018      	movs	r0, r3
 8004930:	f004 f882 	bl	8008a38 <TimestampIsReached>
 8004934:	1e03      	subs	r3, r0, #0
 8004936:	d100      	bne.n	800493a <ESP_WakeTest+0xfe>
 8004938:	e074      	b.n	8004a24 <ESP_WakeTest+0x1e8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 800493a:	4b45      	ldr	r3, [pc, #276]	@ (8004a50 <ESP_WakeTest+0x214>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	0018      	movs	r0, r3
 8004940:	f7ff fd2c 	bl	800439c <DMA_ProcessBuffer>
 8004944:	0003      	movs	r3, r0
 8004946:	001a      	movs	r2, r3
 8004948:	4b42      	ldr	r3, [pc, #264]	@ (8004a54 <ESP_WakeTest+0x218>)
 800494a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800494c:	4b41      	ldr	r3, [pc, #260]	@ (8004a54 <ESP_WakeTest+0x218>)
 800494e:	781a      	ldrb	r2, [r3, #0]
 8004950:	4b3f      	ldr	r3, [pc, #252]	@ (8004a50 <ESP_WakeTest+0x214>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	1dbc      	adds	r4, r7, #6
 8004956:	0019      	movs	r1, r3
 8004958:	0010      	movs	r0, r2
 800495a:	f7ff fdcd 	bl	80044f8 <ATCompare>
 800495e:	0003      	movs	r3, r0
 8004960:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004962:	4b3c      	ldr	r3, [pc, #240]	@ (8004a54 <ESP_WakeTest+0x218>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d102      	bne.n	8004970 <ESP_WakeTest+0x134>
          TestState = ESP_TEST_SEND;
 800496a:	4b31      	ldr	r3, [pc, #196]	@ (8004a30 <ESP_WakeTest+0x1f4>)
 800496c:	2201      	movs	r2, #1
 800496e:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8004970:	4b38      	ldr	r3, [pc, #224]	@ (8004a54 <ESP_WakeTest+0x218>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b07      	cmp	r3, #7
 8004976:	d104      	bne.n	8004982 <ESP_WakeTest+0x146>
          StartProg();
 8004978:	f7ff f852 	bl	8003a20 <StartProg>
          TestState = ESP_TEST_BOOT;
 800497c:	4b2c      	ldr	r3, [pc, #176]	@ (8004a30 <ESP_WakeTest+0x1f4>)
 800497e:	2205      	movs	r2, #5
 8004980:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004982:	4b34      	ldr	r3, [pc, #208]	@ (8004a54 <ESP_WakeTest+0x218>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b03      	cmp	r3, #3
 8004988:	d109      	bne.n	800499e <ESP_WakeTest+0x162>
          ESPTimeStamp = HAL_GetTick() + 50;
 800498a:	f004 fca3 	bl	80092d4 <HAL_GetTick>
 800498e:	0003      	movs	r3, r0
 8004990:	3332      	adds	r3, #50	@ 0x32
 8004992:	001a      	movs	r2, r3
 8004994:	4b2b      	ldr	r3, [pc, #172]	@ (8004a44 <ESP_WakeTest+0x208>)
 8004996:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004998:	4b25      	ldr	r3, [pc, #148]	@ (8004a30 <ESP_WakeTest+0x1f4>)
 800499a:	2201      	movs	r2, #1
 800499c:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 800499e:	1dbb      	adds	r3, r7, #6
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d03e      	beq.n	8004a24 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_VALIDATE;
 80049a6:	4b22      	ldr	r3, [pc, #136]	@ (8004a30 <ESP_WakeTest+0x1f4>)
 80049a8:	2203      	movs	r2, #3
 80049aa:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80049ac:	e03a      	b.n	8004a24 <ESP_WakeTest+0x1e8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = 4000;
 80049ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004a58 <ESP_WakeTest+0x21c>)
 80049b0:	22fa      	movs	r2, #250	@ 0xfa
 80049b2:	0112      	lsls	r2, r2, #4
 80049b4:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 0;
 80049b6:	4b28      	ldr	r3, [pc, #160]	@ (8004a58 <ESP_WakeTest+0x21c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 80049bc:	4b26      	ldr	r3, [pc, #152]	@ (8004a58 <ESP_WakeTest+0x21c>)
 80049be:	22fa      	movs	r2, #250	@ 0xfa
 80049c0:	0112      	lsls	r2, r2, #4
 80049c2:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 80049c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004a30 <ESP_WakeTest+0x1f4>)
 80049c6:	2204      	movs	r2, #4
 80049c8:	701a      	strb	r2, [r3, #0]

      break;
 80049ca:	e02c      	b.n	8004a26 <ESP_WakeTest+0x1ea>

    case ESP_TEST_DEINIT:
      testRound = false;
 80049cc:	4b23      	ldr	r3, [pc, #140]	@ (8004a5c <ESP_WakeTest+0x220>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 80049d2:	4b19      	ldr	r3, [pc, #100]	@ (8004a38 <ESP_WakeTest+0x1fc>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80049d8:	4b19      	ldr	r3, [pc, #100]	@ (8004a40 <ESP_WakeTest+0x204>)
 80049da:	2200      	movs	r2, #0
 80049dc:	2101      	movs	r1, #1
 80049de:	0018      	movs	r0, r3
 80049e0:	f005 fe2c 	bl	800a63c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80049e4:	2380      	movs	r3, #128	@ 0x80
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	4814      	ldr	r0, [pc, #80]	@ (8004a3c <ESP_WakeTest+0x200>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	0019      	movs	r1, r3
 80049ee:	f005 fe25 	bl	800a63c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80049f2:	4b13      	ldr	r3, [pc, #76]	@ (8004a40 <ESP_WakeTest+0x204>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	2102      	movs	r1, #2
 80049f8:	0018      	movs	r0, r3
 80049fa:	f005 fe1f 	bl	800a63c <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 80049fe:	f001 fc19 	bl	8006234 <SetESPMeasurementDone>

      break;
 8004a02:	e010      	b.n	8004a26 <ESP_WakeTest+0x1ea>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8004a04:	4b14      	ldr	r3, [pc, #80]	@ (8004a58 <ESP_WakeTest+0x21c>)
 8004a06:	22fa      	movs	r2, #250	@ 0xfa
 8004a08:	0112      	lsls	r2, r2, #4
 8004a0a:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8004a0c:	4b12      	ldr	r3, [pc, #72]	@ (8004a58 <ESP_WakeTest+0x21c>)
 8004a0e:	22fa      	movs	r2, #250	@ 0xfa
 8004a10:	0112      	lsls	r2, r2, #4
 8004a12:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8004a14:	4b10      	ldr	r3, [pc, #64]	@ (8004a58 <ESP_WakeTest+0x21c>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 8004a1a:	e004      	b.n	8004a26 <ESP_WakeTest+0x1ea>
      break;
 8004a1c:	46c0      	nop			@ (mov r8, r8)
 8004a1e:	e002      	b.n	8004a26 <ESP_WakeTest+0x1ea>
      break;
 8004a20:	46c0      	nop			@ (mov r8, r8)
 8004a22:	e000      	b.n	8004a26 <ESP_WakeTest+0x1ea>
      break;
 8004a24:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004a26:	46c0      	nop			@ (mov r8, r8)
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	b003      	add	sp, #12
 8004a2c:	bd90      	pop	{r4, r7, pc}
 8004a2e:	46c0      	nop			@ (mov r8, r8)
 8004a30:	20000a98 	.word	0x20000a98
 8004a34:	0801a3ac 	.word	0x0801a3ac
 8004a38:	200005d7 	.word	0x200005d7
 8004a3c:	50000800 	.word	0x50000800
 8004a40:	50001c00 	.word	0x50001c00
 8004a44:	2000088c 	.word	0x2000088c
 8004a48:	200004d8 	.word	0x200004d8
 8004a4c:	20000a96 	.word	0x20000a96
 8004a50:	20000a95 	.word	0x20000a95
 8004a54:	20000103 	.word	0x20000103
 8004a58:	40000400 	.word	0x40000400
 8004a5c:	20000002 	.word	0x20000002

08004a60 <ESP_Upkeep>:

void ESP_Upkeep(void) {
 8004a60:	b590      	push	{r4, r7, lr}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004a66:	1dfb      	adds	r3, r7, #7
 8004a68:	2200      	movs	r2, #0
 8004a6a:	701a      	strb	r2, [r3, #0]
  static RECEIVE_STATUS ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (EspState) {
 8004a6c:	4bdd      	ldr	r3, [pc, #884]	@ (8004de4 <ESP_Upkeep+0x384>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b0b      	cmp	r3, #11
 8004a72:	d900      	bls.n	8004a76 <ESP_Upkeep+0x16>
 8004a74:	e1a5      	b.n	8004dc2 <ESP_Upkeep+0x362>
 8004a76:	009a      	lsls	r2, r3, #2
 8004a78:	4bdb      	ldr	r3, [pc, #876]	@ (8004de8 <ESP_Upkeep+0x388>)
 8004a7a:	18d3      	adds	r3, r2, r3
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004a80:	4bd8      	ldr	r3, [pc, #864]	@ (8004de4 <ESP_Upkeep+0x384>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	701a      	strb	r2, [r3, #0]
      break;
 8004a86:	e1de      	b.n	8004e46 <ESP_Upkeep+0x3e6>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8004a88:	4bd8      	ldr	r3, [pc, #864]	@ (8004dec <ESP_Upkeep+0x38c>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	4053      	eors	r3, r2
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d03a      	beq.n	8004b0c <ESP_Upkeep+0xac>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004a96:	2380      	movs	r3, #128	@ 0x80
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	48d5      	ldr	r0, [pc, #852]	@ (8004df0 <ESP_Upkeep+0x390>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	f005 fdcc 	bl	800a63c <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8004aa4:	23fa      	movs	r3, #250	@ 0xfa
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f004 fc1d 	bl	80092e8 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004aae:	2380      	movs	r3, #128	@ 0x80
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	48cf      	ldr	r0, [pc, #828]	@ (8004df0 <ESP_Upkeep+0x390>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	0019      	movs	r1, r3
 8004ab8:	f005 fdc0 	bl	800a63c <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8004abc:	23fa      	movs	r3, #250	@ 0xfa
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f004 fc11 	bl	80092e8 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004ac6:	4bcb      	ldr	r3, [pc, #812]	@ (8004df4 <ESP_Upkeep+0x394>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	2101      	movs	r1, #1
 8004acc:	0018      	movs	r0, r3
 8004ace:	f005 fdb5 	bl	800a63c <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8004ad2:	2064      	movs	r0, #100	@ 0x64
 8004ad4:	f004 fc08 	bl	80092e8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004ad8:	4bc6      	ldr	r3, [pc, #792]	@ (8004df4 <ESP_Upkeep+0x394>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	2102      	movs	r1, #2
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f005 fdac 	bl	800a63c <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8004ae4:	2064      	movs	r0, #100	@ 0x64
 8004ae6:	f004 fbff 	bl	80092e8 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004aea:	4bc2      	ldr	r3, [pc, #776]	@ (8004df4 <ESP_Upkeep+0x394>)
 8004aec:	2201      	movs	r2, #1
 8004aee:	2101      	movs	r1, #1
 8004af0:	0018      	movs	r0, r3
 8004af2:	f005 fda3 	bl	800a63c <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004af6:	f004 fbed 	bl	80092d4 <HAL_GetTick>
 8004afa:	0003      	movs	r3, r0
 8004afc:	22af      	movs	r2, #175	@ 0xaf
 8004afe:	0092      	lsls	r2, r2, #2
 8004b00:	189a      	adds	r2, r3, r2
 8004b02:	4bbd      	ldr	r3, [pc, #756]	@ (8004df8 <ESP_Upkeep+0x398>)
 8004b04:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004b06:	4bb9      	ldr	r3, [pc, #740]	@ (8004dec <ESP_Upkeep+0x38c>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004b0c:	4bbb      	ldr	r3, [pc, #748]	@ (8004dfc <ESP_Upkeep+0x39c>)
 8004b0e:	21ff      	movs	r1, #255	@ 0xff
 8004b10:	0018      	movs	r0, r3
 8004b12:	f7fe fe55 	bl	80037c0 <ESP_Receive>
 8004b16:	1e03      	subs	r3, r0, #0
 8004b18:	d100      	bne.n	8004b1c <ESP_Upkeep+0xbc>
 8004b1a:	e158      	b.n	8004dce <ESP_Upkeep+0x36e>
        EspState = ESP_STATE_MODE_SELECT;
 8004b1c:	4bb1      	ldr	r3, [pc, #708]	@ (8004de4 <ESP_Upkeep+0x384>)
 8004b1e:	220b      	movs	r2, #11
 8004b20:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004b22:	e154      	b.n	8004dce <ESP_Upkeep+0x36e>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 10);
 8004b24:	4bb6      	ldr	r3, [pc, #728]	@ (8004e00 <ESP_Upkeep+0x3a0>)
 8004b26:	220a      	movs	r2, #10
 8004b28:	210f      	movs	r1, #15
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f011 ff9a 	bl	8016a64 <memset>
      if(!InitIsDone || WifiReset){
 8004b30:	4bb4      	ldr	r3, [pc, #720]	@ (8004e04 <ESP_Upkeep+0x3a4>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2201      	movs	r2, #1
 8004b36:	4053      	eors	r3, r2
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d103      	bne.n	8004b46 <ESP_Upkeep+0xe6>
 8004b3e:	4bb2      	ldr	r3, [pc, #712]	@ (8004e08 <ESP_Upkeep+0x3a8>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d016      	beq.n	8004b74 <ESP_Upkeep+0x114>
        memcpy(ATCommandArray, AT_INIT, 8);
 8004b46:	4bae      	ldr	r3, [pc, #696]	@ (8004e00 <ESP_Upkeep+0x3a0>)
 8004b48:	4ab0      	ldr	r2, [pc, #704]	@ (8004e0c <ESP_Upkeep+0x3ac>)
 8004b4a:	ca03      	ldmia	r2!, {r0, r1}
 8004b4c:	c303      	stmia	r3!, {r0, r1}
        EspState = ESP_STATE_SEND;
 8004b4e:	4ba5      	ldr	r3, [pc, #660]	@ (8004de4 <ESP_Upkeep+0x384>)
 8004b50:	2204      	movs	r2, #4
 8004b52:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004b54:	4bae      	ldr	r3, [pc, #696]	@ (8004e10 <ESP_Upkeep+0x3b0>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8004b5a:	4bae      	ldr	r3, [pc, #696]	@ (8004e14 <ESP_Upkeep+0x3b4>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004b60:	4bab      	ldr	r3, [pc, #684]	@ (8004e10 <ESP_Upkeep+0x3b0>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	001a      	movs	r2, r3
 8004b66:	4ba6      	ldr	r3, [pc, #664]	@ (8004e00 <ESP_Upkeep+0x3a0>)
 8004b68:	5c9a      	ldrb	r2, [r3, r2]
 8004b6a:	4bab      	ldr	r3, [pc, #684]	@ (8004e18 <ESP_Upkeep+0x3b8>)
 8004b6c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004b6e:	4bab      	ldr	r3, [pc, #684]	@ (8004e1c <ESP_Upkeep+0x3bc>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8004b74:	4ba3      	ldr	r3, [pc, #652]	@ (8004e04 <ESP_Upkeep+0x3a4>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01f      	beq.n	8004bbc <ESP_Upkeep+0x15c>
 8004b7c:	4ba8      	ldr	r3, [pc, #672]	@ (8004e20 <ESP_Upkeep+0x3c0>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2201      	movs	r2, #1
 8004b82:	4053      	eors	r3, r2
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d018      	beq.n	8004bbc <ESP_Upkeep+0x15c>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8004b8a:	4b9d      	ldr	r3, [pc, #628]	@ (8004e00 <ESP_Upkeep+0x3a0>)
 8004b8c:	4aa5      	ldr	r2, [pc, #660]	@ (8004e24 <ESP_Upkeep+0x3c4>)
 8004b8e:	6811      	ldr	r1, [r2, #0]
 8004b90:	6019      	str	r1, [r3, #0]
 8004b92:	8892      	ldrh	r2, [r2, #4]
 8004b94:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004b96:	4b93      	ldr	r3, [pc, #588]	@ (8004de4 <ESP_Upkeep+0x384>)
 8004b98:	2204      	movs	r2, #4
 8004b9a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004b9c:	4b9c      	ldr	r3, [pc, #624]	@ (8004e10 <ESP_Upkeep+0x3b0>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8004ba2:	4b9c      	ldr	r3, [pc, #624]	@ (8004e14 <ESP_Upkeep+0x3b4>)
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004ba8:	4b99      	ldr	r3, [pc, #612]	@ (8004e10 <ESP_Upkeep+0x3b0>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	001a      	movs	r2, r3
 8004bae:	4b94      	ldr	r3, [pc, #592]	@ (8004e00 <ESP_Upkeep+0x3a0>)
 8004bb0:	5c9a      	ldrb	r2, [r3, r2]
 8004bb2:	4b99      	ldr	r3, [pc, #612]	@ (8004e18 <ESP_Upkeep+0x3b8>)
 8004bb4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004bb6:	4b99      	ldr	r3, [pc, #612]	@ (8004e1c <ESP_Upkeep+0x3bc>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !WifiReset){
 8004bbc:	4b91      	ldr	r3, [pc, #580]	@ (8004e04 <ESP_Upkeep+0x3a4>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d100      	bne.n	8004bc6 <ESP_Upkeep+0x166>
 8004bc4:	e105      	b.n	8004dd2 <ESP_Upkeep+0x372>
 8004bc6:	4b96      	ldr	r3, [pc, #600]	@ (8004e20 <ESP_Upkeep+0x3c0>)
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d100      	bne.n	8004bd0 <ESP_Upkeep+0x170>
 8004bce:	e100      	b.n	8004dd2 <ESP_Upkeep+0x372>
 8004bd0:	4b8d      	ldr	r3, [pc, #564]	@ (8004e08 <ESP_Upkeep+0x3a8>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	4053      	eors	r3, r2
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d100      	bne.n	8004be0 <ESP_Upkeep+0x180>
 8004bde:	e0f8      	b.n	8004dd2 <ESP_Upkeep+0x372>
        memcpy(ATCommandArray, AT_SEND, 3);
 8004be0:	4b87      	ldr	r3, [pc, #540]	@ (8004e00 <ESP_Upkeep+0x3a0>)
 8004be2:	4a91      	ldr	r2, [pc, #580]	@ (8004e28 <ESP_Upkeep+0x3c8>)
 8004be4:	8811      	ldrh	r1, [r2, #0]
 8004be6:	8019      	strh	r1, [r3, #0]
 8004be8:	7892      	ldrb	r2, [r2, #2]
 8004bea:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8004bec:	4b7d      	ldr	r3, [pc, #500]	@ (8004de4 <ESP_Upkeep+0x384>)
 8004bee:	2204      	movs	r2, #4
 8004bf0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004bf2:	4b87      	ldr	r3, [pc, #540]	@ (8004e10 <ESP_Upkeep+0x3b0>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8004bf8:	4b86      	ldr	r3, [pc, #536]	@ (8004e14 <ESP_Upkeep+0x3b4>)
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	701a      	strb	r2, [r3, #0]
        TIM2 -> CCR4 = 3000;
 8004bfe:	2380      	movs	r3, #128	@ 0x80
 8004c00:	05db      	lsls	r3, r3, #23
 8004c02:	4a8a      	ldr	r2, [pc, #552]	@ (8004e2c <ESP_Upkeep+0x3cc>)
 8004c04:	641a      	str	r2, [r3, #64]	@ 0x40
        ATCommand = ATCommandArray[ATCounter];
 8004c06:	4b82      	ldr	r3, [pc, #520]	@ (8004e10 <ESP_Upkeep+0x3b0>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	001a      	movs	r2, r3
 8004c0c:	4b7c      	ldr	r3, [pc, #496]	@ (8004e00 <ESP_Upkeep+0x3a0>)
 8004c0e:	5c9a      	ldrb	r2, [r3, r2]
 8004c10:	4b81      	ldr	r3, [pc, #516]	@ (8004e18 <ESP_Upkeep+0x3b8>)
 8004c12:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004c14:	4b81      	ldr	r3, [pc, #516]	@ (8004e1c <ESP_Upkeep+0x3bc>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	701a      	strb	r2, [r3, #0]
      }

    break;
 8004c1a:	e0da      	b.n	8004dd2 <ESP_Upkeep+0x372>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8004c1c:	4b7e      	ldr	r3, [pc, #504]	@ (8004e18 <ESP_Upkeep+0x3b8>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	1dfc      	adds	r4, r7, #7
 8004c22:	0018      	movs	r0, r3
 8004c24:	f7ff fc9e 	bl	8004564 <AT_Send>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004c2c:	1dfb      	adds	r3, r7, #7
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d100      	bne.n	8004c36 <ESP_Upkeep+0x1d6>
 8004c34:	e0cf      	b.n	8004dd6 <ESP_Upkeep+0x376>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8004c36:	4b6b      	ldr	r3, [pc, #428]	@ (8004de4 <ESP_Upkeep+0x384>)
 8004c38:	2203      	movs	r2, #3
 8004c3a:	701a      	strb	r2, [r3, #0]
        }
         break;
 8004c3c:	e0cb      	b.n	8004dd6 <ESP_Upkeep+0x376>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004c3e:	4b6e      	ldr	r3, [pc, #440]	@ (8004df8 <ESP_Upkeep+0x398>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	0018      	movs	r0, r3
 8004c44:	f003 fef8 	bl	8008a38 <TimestampIsReached>
 8004c48:	1e03      	subs	r3, r0, #0
 8004c4a:	d100      	bne.n	8004c4e <ESP_Upkeep+0x1ee>
 8004c4c:	e0c5      	b.n	8004dda <ESP_Upkeep+0x37a>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004c4e:	4b73      	ldr	r3, [pc, #460]	@ (8004e1c <ESP_Upkeep+0x3bc>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	0018      	movs	r0, r3
 8004c54:	f7ff fba2 	bl	800439c <DMA_ProcessBuffer>
 8004c58:	0003      	movs	r3, r0
 8004c5a:	001a      	movs	r2, r3
 8004c5c:	4b74      	ldr	r3, [pc, #464]	@ (8004e30 <ESP_Upkeep+0x3d0>)
 8004c5e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004c60:	4b73      	ldr	r3, [pc, #460]	@ (8004e30 <ESP_Upkeep+0x3d0>)
 8004c62:	781a      	ldrb	r2, [r3, #0]
 8004c64:	4b6d      	ldr	r3, [pc, #436]	@ (8004e1c <ESP_Upkeep+0x3bc>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	1dbc      	adds	r4, r7, #6
 8004c6a:	0019      	movs	r1, r3
 8004c6c:	0010      	movs	r0, r2
 8004c6e:	f7ff fc43 	bl	80044f8 <ATCompare>
 8004c72:	0003      	movs	r3, r0
 8004c74:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004c76:	4b6e      	ldr	r3, [pc, #440]	@ (8004e30 <ESP_Upkeep+0x3d0>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d102      	bne.n	8004c84 <ESP_Upkeep+0x224>
          EspState = ESP_STATE_SEND;
 8004c7e:	4b59      	ldr	r3, [pc, #356]	@ (8004de4 <ESP_Upkeep+0x384>)
 8004c80:	2204      	movs	r2, #4
 8004c82:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004c84:	4b6a      	ldr	r3, [pc, #424]	@ (8004e30 <ESP_Upkeep+0x3d0>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d106      	bne.n	8004c9a <ESP_Upkeep+0x23a>
          ESPTimeStamp = HAL_GetTick() + 10;
 8004c8c:	f004 fb22 	bl	80092d4 <HAL_GetTick>
 8004c90:	0003      	movs	r3, r0
 8004c92:	330a      	adds	r3, #10
 8004c94:	001a      	movs	r2, r3
 8004c96:	4b58      	ldr	r3, [pc, #352]	@ (8004df8 <ESP_Upkeep+0x398>)
 8004c98:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8004c9a:	4b65      	ldr	r3, [pc, #404]	@ (8004e30 <ESP_Upkeep+0x3d0>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b06      	cmp	r3, #6
 8004ca0:	d116      	bne.n	8004cd0 <ESP_Upkeep+0x270>
          if(ATCommand != AT_SENDDATA){
 8004ca2:	4b5d      	ldr	r3, [pc, #372]	@ (8004e18 <ESP_Upkeep+0x3b8>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b0d      	cmp	r3, #13
 8004ca8:	d003      	beq.n	8004cb2 <ESP_Upkeep+0x252>
            EspState = ESP_STATE_SEND;
 8004caa:	4b4e      	ldr	r3, [pc, #312]	@ (8004de4 <ESP_Upkeep+0x384>)
 8004cac:	2204      	movs	r2, #4
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	e00e      	b.n	8004cd0 <ESP_Upkeep+0x270>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8004cb2:	4b59      	ldr	r3, [pc, #356]	@ (8004e18 <ESP_Upkeep+0x3b8>)
 8004cb4:	220c      	movs	r2, #12
 8004cb6:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8004cb8:	4b55      	ldr	r3, [pc, #340]	@ (8004e10 <ESP_Upkeep+0x3b0>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	4b53      	ldr	r3, [pc, #332]	@ (8004e10 <ESP_Upkeep+0x3b0>)
 8004cc2:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004cc4:	4b55      	ldr	r3, [pc, #340]	@ (8004e1c <ESP_Upkeep+0x3bc>)
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8004cca:	4b46      	ldr	r3, [pc, #280]	@ (8004de4 <ESP_Upkeep+0x384>)
 8004ccc:	2204      	movs	r2, #4
 8004cce:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8004cd0:	1dbb      	adds	r3, r7, #6
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d100      	bne.n	8004cda <ESP_Upkeep+0x27a>
 8004cd8:	e07f      	b.n	8004dda <ESP_Upkeep+0x37a>
          EspState = ESP_STATE_NEXT_AT;
 8004cda:	4b42      	ldr	r3, [pc, #264]	@ (8004de4 <ESP_Upkeep+0x384>)
 8004cdc:	2205      	movs	r2, #5
 8004cde:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004ce0:	e07b      	b.n	8004dda <ESP_Upkeep+0x37a>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8004ce2:	4b4b      	ldr	r3, [pc, #300]	@ (8004e10 <ESP_Upkeep+0x3b0>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	4b49      	ldr	r3, [pc, #292]	@ (8004e10 <ESP_Upkeep+0x3b0>)
 8004cec:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8004cee:	4b48      	ldr	r3, [pc, #288]	@ (8004e10 <ESP_Upkeep+0x3b0>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	001a      	movs	r2, r3
 8004cf4:	4b42      	ldr	r3, [pc, #264]	@ (8004e00 <ESP_Upkeep+0x3a0>)
 8004cf6:	5c9a      	ldrb	r2, [r3, r2]
 8004cf8:	4b47      	ldr	r3, [pc, #284]	@ (8004e18 <ESP_Upkeep+0x3b8>)
 8004cfa:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8004cfc:	4b46      	ldr	r3, [pc, #280]	@ (8004e18 <ESP_Upkeep+0x3b8>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d102      	bne.n	8004d0a <ESP_Upkeep+0x2aa>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8004d04:	4b45      	ldr	r3, [pc, #276]	@ (8004e1c <ESP_Upkeep+0x3bc>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8004d0a:	4b43      	ldr	r3, [pc, #268]	@ (8004e18 <ESP_Upkeep+0x3b8>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2b0c      	cmp	r3, #12
 8004d10:	d102      	bne.n	8004d18 <ESP_Upkeep+0x2b8>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8004d12:	4b42      	ldr	r3, [pc, #264]	@ (8004e1c <ESP_Upkeep+0x3bc>)
 8004d14:	2202      	movs	r2, #2
 8004d16:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8004d18:	4b3f      	ldr	r3, [pc, #252]	@ (8004e18 <ESP_Upkeep+0x3b8>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b0c      	cmp	r3, #12
 8004d1e:	d006      	beq.n	8004d2e <ESP_Upkeep+0x2ce>
 8004d20:	4b3d      	ldr	r3, [pc, #244]	@ (8004e18 <ESP_Upkeep+0x3b8>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	d002      	beq.n	8004d2e <ESP_Upkeep+0x2ce>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004d28:	4b3c      	ldr	r3, [pc, #240]	@ (8004e1c <ESP_Upkeep+0x3bc>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8004d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8004de4 <ESP_Upkeep+0x384>)
 8004d30:	2204      	movs	r2, #4
 8004d32:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8004d34:	4b38      	ldr	r3, [pc, #224]	@ (8004e18 <ESP_Upkeep+0x3b8>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b0f      	cmp	r3, #15
 8004d3a:	d150      	bne.n	8004dde <ESP_Upkeep+0x37e>
        if(Mode == AT_MODE_SEND){
 8004d3c:	4b35      	ldr	r3, [pc, #212]	@ (8004e14 <ESP_Upkeep+0x3b4>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d10b      	bne.n	8004d5c <ESP_Upkeep+0x2fc>
          ESPTimeStamp = HAL_GetTick() + 300000;
 8004d44:	f004 fac6 	bl	80092d4 <HAL_GetTick>
 8004d48:	0003      	movs	r3, r0
 8004d4a:	4a3a      	ldr	r2, [pc, #232]	@ (8004e34 <ESP_Upkeep+0x3d4>)
 8004d4c:	189a      	adds	r2, r3, r2
 8004d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8004df8 <ESP_Upkeep+0x398>)
 8004d50:	601a      	str	r2, [r3, #0]
          TIM2 -> CCR4 = 4000;
 8004d52:	2380      	movs	r3, #128	@ 0x80
 8004d54:	05db      	lsls	r3, r3, #23
 8004d56:	22fa      	movs	r2, #250	@ 0xfa
 8004d58:	0112      	lsls	r2, r2, #4
 8004d5a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        EspState = ESP_STATE_RESET;
 8004d5c:	4b21      	ldr	r3, [pc, #132]	@ (8004de4 <ESP_Upkeep+0x384>)
 8004d5e:	2209      	movs	r2, #9
 8004d60:	701a      	strb	r2, [r3, #0]
      }
    break;
 8004d62:	e03c      	b.n	8004dde <ESP_Upkeep+0x37e>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp)){
 8004d64:	4b24      	ldr	r3, [pc, #144]	@ (8004df8 <ESP_Upkeep+0x398>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f003 fe65 	bl	8008a38 <TimestampIsReached>
 8004d6e:	1e03      	subs	r3, r0, #0
 8004d70:	d068      	beq.n	8004e44 <ESP_Upkeep+0x3e4>
        if(Mode == AT_MODE_INIT){
 8004d72:	4b28      	ldr	r3, [pc, #160]	@ (8004e14 <ESP_Upkeep+0x3b4>)
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <ESP_Upkeep+0x320>
          InitIsDone = true;
 8004d7a:	4b22      	ldr	r3, [pc, #136]	@ (8004e04 <ESP_Upkeep+0x3a4>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8004d80:	4b24      	ldr	r3, [pc, #144]	@ (8004e14 <ESP_Upkeep+0x3b4>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d102      	bne.n	8004d8e <ESP_Upkeep+0x32e>
          ConnectionMade = true;
 8004d88:	4b25      	ldr	r3, [pc, #148]	@ (8004e20 <ESP_Upkeep+0x3c0>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	701a      	strb	r2, [r3, #0]
        }
        TIM2 -> CCR1 = 40000;
 8004d8e:	2380      	movs	r3, #128	@ 0x80
 8004d90:	05db      	lsls	r3, r3, #23
 8004d92:	4a29      	ldr	r2, [pc, #164]	@ (8004e38 <ESP_Upkeep+0x3d8>)
 8004d94:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM2 -> CCR3 = 40000;
 8004d96:	2380      	movs	r3, #128	@ 0x80
 8004d98:	05db      	lsls	r3, r3, #23
 8004d9a:	4a27      	ldr	r2, [pc, #156]	@ (8004e38 <ESP_Upkeep+0x3d8>)
 8004d9c:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM2 -> CCR4 = 40000;
 8004d9e:	2380      	movs	r3, #128	@ 0x80
 8004da0:	05db      	lsls	r3, r3, #23
 8004da2:	4a25      	ldr	r2, [pc, #148]	@ (8004e38 <ESP_Upkeep+0x3d8>)
 8004da4:	641a      	str	r2, [r3, #64]	@ 0x40
        EspState = ESP_STATE_MODE_SELECT;
 8004da6:	4b0f      	ldr	r3, [pc, #60]	@ (8004de4 <ESP_Upkeep+0x384>)
 8004da8:	220b      	movs	r2, #11
 8004daa:	701a      	strb	r2, [r3, #0]
      }

      break;
 8004dac:	e04a      	b.n	8004e44 <ESP_Upkeep+0x3e4>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8004dae:	4a23      	ldr	r2, [pc, #140]	@ (8004e3c <ESP_Upkeep+0x3dc>)
 8004db0:	4b23      	ldr	r3, [pc, #140]	@ (8004e40 <ESP_Upkeep+0x3e0>)
 8004db2:	0019      	movs	r1, r3
 8004db4:	2003      	movs	r0, #3
 8004db6:	f003 fe95 	bl	8008ae4 <CreateLine>
      EspState = ESP_STATE_INIT;
 8004dba:	4b0a      	ldr	r3, [pc, #40]	@ (8004de4 <ESP_Upkeep+0x384>)
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	701a      	strb	r2, [r3, #0]
      break;
 8004dc0:	e041      	b.n	8004e46 <ESP_Upkeep+0x3e6>

    default:
      // Handle unexpected state
      EspState = ESP_STATE_ERROR;
 8004dc2:	4b08      	ldr	r3, [pc, #32]	@ (8004de4 <ESP_Upkeep+0x384>)
 8004dc4:	2207      	movs	r2, #7
 8004dc6:	701a      	strb	r2, [r3, #0]
      break;
 8004dc8:	e03d      	b.n	8004e46 <ESP_Upkeep+0x3e6>
      break;
 8004dca:	46c0      	nop			@ (mov r8, r8)
 8004dcc:	e03b      	b.n	8004e46 <ESP_Upkeep+0x3e6>
      break;
 8004dce:	46c0      	nop			@ (mov r8, r8)
 8004dd0:	e039      	b.n	8004e46 <ESP_Upkeep+0x3e6>
    break;
 8004dd2:	46c0      	nop			@ (mov r8, r8)
 8004dd4:	e037      	b.n	8004e46 <ESP_Upkeep+0x3e6>
         break;
 8004dd6:	46c0      	nop			@ (mov r8, r8)
 8004dd8:	e035      	b.n	8004e46 <ESP_Upkeep+0x3e6>
      break;
 8004dda:	46c0      	nop			@ (mov r8, r8)
 8004ddc:	e033      	b.n	8004e46 <ESP_Upkeep+0x3e6>
    break;
 8004dde:	46c0      	nop			@ (mov r8, r8)
 8004de0:	e031      	b.n	8004e46 <ESP_Upkeep+0x3e6>
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	20000102 	.word	0x20000102
 8004de8:	0801a3c4 	.word	0x0801a3c4
 8004dec:	200005d7 	.word	0x200005d7
 8004df0:	50000800 	.word	0x50000800
 8004df4:	50001c00 	.word	0x50001c00
 8004df8:	2000088c 	.word	0x2000088c
 8004dfc:	200004d8 	.word	0x200004d8
 8004e00:	20000880 	.word	0x20000880
 8004e04:	200005d8 	.word	0x200005d8
 8004e08:	200005d9 	.word	0x200005d9
 8004e0c:	200000f0 	.word	0x200000f0
 8004e10:	2000088a 	.word	0x2000088a
 8004e14:	20000a97 	.word	0x20000a97
 8004e18:	20000a96 	.word	0x20000a96
 8004e1c:	20000a95 	.word	0x20000a95
 8004e20:	200005da 	.word	0x200005da
 8004e24:	200000fc 	.word	0x200000fc
 8004e28:	200000f8 	.word	0x200000f8
 8004e2c:	00000bb8 	.word	0x00000bb8
 8004e30:	20000104 	.word	0x20000104
 8004e34:	000493e0 	.word	0x000493e0
 8004e38:	00009c40 	.word	0x00009c40
 8004e3c:	08019cf0 	.word	0x08019cf0
 8004e40:	08019878 	.word	0x08019878
      break;
 8004e44:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004e46:	46c0      	nop			@ (mov r8, r8)
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b003      	add	sp, #12
 8004e4c:	bd90      	pop	{r4, r7, pc}
 8004e4e:	46c0      	nop			@ (mov r8, r8)

08004e50 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8004e58:	4b09      	ldr	r3, [pc, #36]	@ (8004e80 <I2CSensors_Init+0x30>)
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8004e5e:	4a09      	ldr	r2, [pc, #36]	@ (8004e84 <I2CSensors_Init+0x34>)
 8004e60:	4b09      	ldr	r3, [pc, #36]	@ (8004e88 <I2CSensors_Init+0x38>)
 8004e62:	0011      	movs	r1, r2
 8004e64:	0018      	movs	r0, r3
 8004e66:	f000 faf1 	bl	800544c <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8004e6a:	4a06      	ldr	r2, [pc, #24]	@ (8004e84 <I2CSensors_Init+0x34>)
 8004e6c:	4b06      	ldr	r3, [pc, #24]	@ (8004e88 <I2CSensors_Init+0x38>)
 8004e6e:	0011      	movs	r1, r2
 8004e70:	0018      	movs	r0, r3
 8004e72:	f000 f973 	bl	800515c <Gas_Init>
}
 8004e76:	46c0      	nop			@ (mov r8, r8)
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	b002      	add	sp, #8
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	46c0      	nop			@ (mov r8, r8)
 8004e80:	20000a9c 	.word	0x20000a9c
 8004e84:	08004ee1 	.word	0x08004ee1
 8004e88:	08004e8d 	.word	0x08004e8d

08004e8c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004e8c:	b5b0      	push	{r4, r5, r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6039      	str	r1, [r7, #0]
 8004e94:	0011      	movs	r1, r2
 8004e96:	1dfb      	adds	r3, r7, #7
 8004e98:	1c02      	adds	r2, r0, #0
 8004e9a:	701a      	strb	r2, [r3, #0]
 8004e9c:	1dbb      	adds	r3, r7, #6
 8004e9e:	1c0a      	adds	r2, r1, #0
 8004ea0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8004edc <ReadI2C+0x50>)
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	1dfb      	adds	r3, r7, #7
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	18db      	adds	r3, r3, r3
 8004eae:	b299      	uxth	r1, r3
 8004eb0:	1dbb      	adds	r3, r7, #6
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	250f      	movs	r5, #15
 8004eb8:	197c      	adds	r4, r7, r5
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	f005 fd78 	bl	800a9b0 <HAL_I2C_Master_Receive_DMA>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004ec4:	197b      	adds	r3, r7, r5
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <ReadI2C+0x44>
        return false;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e000      	b.n	8004ed2 <ReadI2C+0x46>
    }
    return true;
 8004ed0:	2301      	movs	r3, #1
}
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b004      	add	sp, #16
 8004ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8004eda:	46c0      	nop			@ (mov r8, r8)
 8004edc:	20000a9c 	.word	0x20000a9c

08004ee0 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004ee0:	b5b0      	push	{r4, r5, r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6039      	str	r1, [r7, #0]
 8004ee8:	0011      	movs	r1, r2
 8004eea:	1dfb      	adds	r3, r7, #7
 8004eec:	1c02      	adds	r2, r0, #0
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	1dbb      	adds	r3, r7, #6
 8004ef2:	1c0a      	adds	r2, r1, #0
 8004ef4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8004f30 <WriteI2C+0x50>)
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	1dfb      	adds	r3, r7, #7
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	18db      	adds	r3, r3, r3
 8004f02:	b299      	uxth	r1, r3
 8004f04:	1dbb      	adds	r3, r7, #6
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	250f      	movs	r5, #15
 8004f0c:	197c      	adds	r4, r7, r5
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	f005 fc48 	bl	800a7a4 <HAL_I2C_Master_Transmit_DMA>
 8004f14:	0003      	movs	r3, r0
 8004f16:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004f18:	197b      	adds	r3, r7, r5
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <WriteI2C+0x44>
        return false;
 8004f20:	2300      	movs	r3, #0
 8004f22:	e000      	b.n	8004f26 <WriteI2C+0x46>
    }
    return true;
 8004f24:	2301      	movs	r3, #1
}
 8004f26:	0018      	movs	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b004      	add	sp, #16
 8004f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f2e:	46c0      	nop			@ (mov r8, r8)
 8004f30:	20000a9c 	.word	0x20000a9c

08004f34 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004f3a:	003b      	movs	r3, r7
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	2308      	movs	r3, #8
 8004f40:	001a      	movs	r2, r3
 8004f42:	2100      	movs	r1, #0
 8004f44:	f011 fd8e 	bl	8016a64 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004f48:	4b30      	ldr	r3, [pc, #192]	@ (800500c <MX_ADC_Init+0xd8>)
 8004f4a:	4a31      	ldr	r2, [pc, #196]	@ (8005010 <MX_ADC_Init+0xdc>)
 8004f4c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8004f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800500c <MX_ADC_Init+0xd8>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004f54:	4b2d      	ldr	r3, [pc, #180]	@ (800500c <MX_ADC_Init+0xd8>)
 8004f56:	22c0      	movs	r2, #192	@ 0xc0
 8004f58:	0612      	lsls	r2, r2, #24
 8004f5a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800500c <MX_ADC_Init+0xd8>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004f62:	4b2a      	ldr	r3, [pc, #168]	@ (800500c <MX_ADC_Init+0xd8>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004f68:	4b28      	ldr	r3, [pc, #160]	@ (800500c <MX_ADC_Init+0xd8>)
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f6e:	4b27      	ldr	r3, [pc, #156]	@ (800500c <MX_ADC_Init+0xd8>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004f74:	4b25      	ldr	r3, [pc, #148]	@ (800500c <MX_ADC_Init+0xd8>)
 8004f76:	2220      	movs	r2, #32
 8004f78:	2100      	movs	r1, #0
 8004f7a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8004f7c:	4b23      	ldr	r3, [pc, #140]	@ (800500c <MX_ADC_Init+0xd8>)
 8004f7e:	2221      	movs	r2, #33	@ 0x21
 8004f80:	2101      	movs	r1, #1
 8004f82:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f84:	4b21      	ldr	r3, [pc, #132]	@ (800500c <MX_ADC_Init+0xd8>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f8a:	4b20      	ldr	r3, [pc, #128]	@ (800500c <MX_ADC_Init+0xd8>)
 8004f8c:	22c2      	movs	r2, #194	@ 0xc2
 8004f8e:	32ff      	adds	r2, #255	@ 0xff
 8004f90:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004f92:	4b1e      	ldr	r3, [pc, #120]	@ (800500c <MX_ADC_Init+0xd8>)
 8004f94:	222c      	movs	r2, #44	@ 0x2c
 8004f96:	2100      	movs	r1, #0
 8004f98:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800500c <MX_ADC_Init+0xd8>)
 8004f9c:	2204      	movs	r2, #4
 8004f9e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800500c <MX_ADC_Init+0xd8>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004fa6:	4b19      	ldr	r3, [pc, #100]	@ (800500c <MX_ADC_Init+0xd8>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004fac:	4b17      	ldr	r3, [pc, #92]	@ (800500c <MX_ADC_Init+0xd8>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004fb2:	4b16      	ldr	r3, [pc, #88]	@ (800500c <MX_ADC_Init+0xd8>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004fb8:	4b14      	ldr	r3, [pc, #80]	@ (800500c <MX_ADC_Init+0xd8>)
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f004 f9d6 	bl	800936c <HAL_ADC_Init>
 8004fc0:	1e03      	subs	r3, r0, #0
 8004fc2:	d001      	beq.n	8004fc8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8004fc4:	f000 fdc4 	bl	8005b50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004fc8:	003b      	movs	r3, r7
 8004fca:	4a12      	ldr	r2, [pc, #72]	@ (8005014 <MX_ADC_Init+0xe0>)
 8004fcc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004fce:	003b      	movs	r3, r7
 8004fd0:	2280      	movs	r2, #128	@ 0x80
 8004fd2:	0152      	lsls	r2, r2, #5
 8004fd4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004fd6:	003a      	movs	r2, r7
 8004fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800500c <MX_ADC_Init+0xd8>)
 8004fda:	0011      	movs	r1, r2
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f004 fc35 	bl	800984c <HAL_ADC_ConfigChannel>
 8004fe2:	1e03      	subs	r3, r0, #0
 8004fe4:	d001      	beq.n	8004fea <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8004fe6:	f000 fdb3 	bl	8005b50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004fea:	003b      	movs	r3, r7
 8004fec:	4a0a      	ldr	r2, [pc, #40]	@ (8005018 <MX_ADC_Init+0xe4>)
 8004fee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004ff0:	003a      	movs	r2, r7
 8004ff2:	4b06      	ldr	r3, [pc, #24]	@ (800500c <MX_ADC_Init+0xd8>)
 8004ff4:	0011      	movs	r1, r2
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f004 fc28 	bl	800984c <HAL_ADC_ConfigChannel>
 8004ffc:	1e03      	subs	r3, r0, #0
 8004ffe:	d001      	beq.n	8005004 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8005000:	f000 fda6 	bl	8005b50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8005004:	46c0      	nop			@ (mov r8, r8)
 8005006:	46bd      	mov	sp, r7
 8005008:	b002      	add	sp, #8
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20000aa0 	.word	0x20000aa0
 8005010:	40012400 	.word	0x40012400
 8005014:	38004000 	.word	0x38004000
 8005018:	3c008000 	.word	0x3c008000

0800501c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800501c:	b590      	push	{r4, r7, lr}
 800501e:	b089      	sub	sp, #36	@ 0x24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005024:	240c      	movs	r4, #12
 8005026:	193b      	adds	r3, r7, r4
 8005028:	0018      	movs	r0, r3
 800502a:	2314      	movs	r3, #20
 800502c:	001a      	movs	r2, r3
 800502e:	2100      	movs	r1, #0
 8005030:	f011 fd18 	bl	8016a64 <memset>
  if(adcHandle->Instance==ADC1)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a14      	ldr	r2, [pc, #80]	@ (800508c <HAL_ADC_MspInit+0x70>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d121      	bne.n	8005082 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800503e:	4b14      	ldr	r3, [pc, #80]	@ (8005090 <HAL_ADC_MspInit+0x74>)
 8005040:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005042:	4b13      	ldr	r3, [pc, #76]	@ (8005090 <HAL_ADC_MspInit+0x74>)
 8005044:	2180      	movs	r1, #128	@ 0x80
 8005046:	0089      	lsls	r1, r1, #2
 8005048:	430a      	orrs	r2, r1
 800504a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800504c:	4b10      	ldr	r3, [pc, #64]	@ (8005090 <HAL_ADC_MspInit+0x74>)
 800504e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005050:	4b0f      	ldr	r3, [pc, #60]	@ (8005090 <HAL_ADC_MspInit+0x74>)
 8005052:	2104      	movs	r1, #4
 8005054:	430a      	orrs	r2, r1
 8005056:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005058:	4b0d      	ldr	r3, [pc, #52]	@ (8005090 <HAL_ADC_MspInit+0x74>)
 800505a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505c:	2204      	movs	r2, #4
 800505e:	4013      	ands	r3, r2
 8005060:	60bb      	str	r3, [r7, #8]
 8005062:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8005064:	193b      	adds	r3, r7, r4
 8005066:	2230      	movs	r2, #48	@ 0x30
 8005068:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800506a:	193b      	adds	r3, r7, r4
 800506c:	2203      	movs	r2, #3
 800506e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005070:	193b      	adds	r3, r7, r4
 8005072:	2200      	movs	r2, #0
 8005074:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005076:	193b      	adds	r3, r7, r4
 8005078:	4a06      	ldr	r2, [pc, #24]	@ (8005094 <HAL_ADC_MspInit+0x78>)
 800507a:	0019      	movs	r1, r3
 800507c:	0010      	movs	r0, r2
 800507e:	f005 f87d 	bl	800a17c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005082:	46c0      	nop			@ (mov r8, r8)
 8005084:	46bd      	mov	sp, r7
 8005086:	b009      	add	sp, #36	@ 0x24
 8005088:	bd90      	pop	{r4, r7, pc}
 800508a:	46c0      	nop			@ (mov r8, r8)
 800508c:	40012400 	.word	0x40012400
 8005090:	40021000 	.word	0x40021000
 8005094:	50000800 	.word	0x50000800

08005098 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800509e:	4b10      	ldr	r3, [pc, #64]	@ (80050e0 <MX_DMA_Init+0x48>)
 80050a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050a2:	4b0f      	ldr	r3, [pc, #60]	@ (80050e0 <MX_DMA_Init+0x48>)
 80050a4:	2101      	movs	r1, #1
 80050a6:	430a      	orrs	r2, r1
 80050a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80050aa:	4b0d      	ldr	r3, [pc, #52]	@ (80050e0 <MX_DMA_Init+0x48>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ae:	2201      	movs	r2, #1
 80050b0:	4013      	ands	r3, r2
 80050b2:	607b      	str	r3, [r7, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80050b6:	2200      	movs	r2, #0
 80050b8:	2100      	movs	r1, #0
 80050ba:	200a      	movs	r0, #10
 80050bc:	f004 fd80 	bl	8009bc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80050c0:	200a      	movs	r0, #10
 80050c2:	f004 fd92 	bl	8009bea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 80050c6:	2200      	movs	r2, #0
 80050c8:	2103      	movs	r1, #3
 80050ca:	200b      	movs	r0, #11
 80050cc:	f004 fd78 	bl	8009bc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80050d0:	200b      	movs	r0, #11
 80050d2:	f004 fd8a 	bl	8009bea <HAL_NVIC_EnableIRQ>

}
 80050d6:	46c0      	nop			@ (mov r8, r8)
 80050d8:	46bd      	mov	sp, r7
 80050da:	b002      	add	sp, #8
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	46c0      	nop			@ (mov r8, r8)
 80050e0:	40021000 	.word	0x40021000

080050e4 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 80050f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005130 <Gadget_Init+0x4c>)
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	f000 fff9 	bl	80060ec <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	68b9      	ldr	r1, [r7, #8]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	0018      	movs	r0, r3
 8005102:	f000 fd99 	bl	8005c38 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	0018      	movs	r0, r3
 800510a:	f7fe fafb 	bl	8003704 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 800510e:	4a09      	ldr	r2, [pc, #36]	@ (8005134 <Gadget_Init+0x50>)
 8005110:	4b09      	ldr	r3, [pc, #36]	@ (8005138 <Gadget_Init+0x54>)
 8005112:	0019      	movs	r1, r3
 8005114:	2003      	movs	r0, #3
 8005116:	f003 fce5 	bl	8008ae4 <CreateLine>
  Debug("Simple check to check the branch");
 800511a:	4a08      	ldr	r2, [pc, #32]	@ (800513c <Gadget_Init+0x58>)
 800511c:	4b06      	ldr	r3, [pc, #24]	@ (8005138 <Gadget_Init+0x54>)
 800511e:	0019      	movs	r1, r3
 8005120:	2003      	movs	r0, #3
 8005122:	f003 fcdf 	bl	8008ae4 <CreateLine>
}
 8005126:	46c0      	nop			@ (mov r8, r8)
 8005128:	46bd      	mov	sp, r7
 800512a:	b004      	add	sp, #16
 800512c:	bd80      	pop	{r7, pc}
 800512e:	46c0      	nop			@ (mov r8, r8)
 8005130:	20000108 	.word	0x20000108
 8005134:	08019d04 	.word	0x08019d04
 8005138:	08019d18 	.word	0x08019d18
 800513c:	08019d1c 	.word	0x08019d1c

08005140 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  Meas_Test();
 8005144:	f001 f820 	bl	8006188 <Meas_Test>
}
 8005148:	46c0      	nop			@ (mov r8, r8)
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <UpkeepGadget>:

void UpkeepGadget() {
 800514e:	b580      	push	{r7, lr}
 8005150:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 8005152:	f000 ff2b 	bl	8005fac <Meas_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8005156:	46c0      	nop			@ (mov r8, r8)
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	0011      	movs	r1, r2
 800516c:	0018      	movs	r0, r3
 800516e:	f002 fbc7 	bl	8007900 <SGP_Init>
}
 8005172:	46c0      	nop			@ (mov r8, r8)
 8005174:	46bd      	mov	sp, r7
 8005176:	b002      	add	sp, #8
 8005178:	bd80      	pop	{r7, pc}

0800517a <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 800517a:	b580      	push	{r7, lr}
 800517c:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 800517e:	f002 fbd9 	bl	8007934 <SGP_StartMeasurement>
}
 8005182:	46c0      	nop			@ (mov r8, r8)
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	0018      	movs	r0, r3
 8005194:	f002 fc3e 	bl	8007a14 <SGP_GetMeasurementValues>
 8005198:	0003      	movs	r3, r0
}
 800519a:	0018      	movs	r0, r3
 800519c:	46bd      	mov	sp, r7
 800519e:	b002      	add	sp, #8
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 80051a2:	b580      	push	{r7, lr}
 80051a4:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 80051a6:	f002 fe53 	bl	8007e50 <SGP_DeviceConnected>
 80051aa:	0003      	movs	r3, r0
}
 80051ac:	0018      	movs	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80051b4:	b590      	push	{r4, r7, lr}
 80051b6:	b08b      	sub	sp, #44	@ 0x2c
 80051b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ba:	2414      	movs	r4, #20
 80051bc:	193b      	adds	r3, r7, r4
 80051be:	0018      	movs	r0, r3
 80051c0:	2314      	movs	r3, #20
 80051c2:	001a      	movs	r2, r3
 80051c4:	2100      	movs	r1, #0
 80051c6:	f011 fc4d 	bl	8016a64 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80051ca:	4b70      	ldr	r3, [pc, #448]	@ (800538c <MX_GPIO_Init+0x1d8>)
 80051cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ce:	4b6f      	ldr	r3, [pc, #444]	@ (800538c <MX_GPIO_Init+0x1d8>)
 80051d0:	2104      	movs	r1, #4
 80051d2:	430a      	orrs	r2, r1
 80051d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051d6:	4b6d      	ldr	r3, [pc, #436]	@ (800538c <MX_GPIO_Init+0x1d8>)
 80051d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051da:	2204      	movs	r2, #4
 80051dc:	4013      	ands	r3, r2
 80051de:	613b      	str	r3, [r7, #16]
 80051e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80051e2:	4b6a      	ldr	r3, [pc, #424]	@ (800538c <MX_GPIO_Init+0x1d8>)
 80051e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e6:	4b69      	ldr	r3, [pc, #420]	@ (800538c <MX_GPIO_Init+0x1d8>)
 80051e8:	2180      	movs	r1, #128	@ 0x80
 80051ea:	430a      	orrs	r2, r1
 80051ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051ee:	4b67      	ldr	r3, [pc, #412]	@ (800538c <MX_GPIO_Init+0x1d8>)
 80051f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f2:	2280      	movs	r2, #128	@ 0x80
 80051f4:	4013      	ands	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051fa:	4b64      	ldr	r3, [pc, #400]	@ (800538c <MX_GPIO_Init+0x1d8>)
 80051fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051fe:	4b63      	ldr	r3, [pc, #396]	@ (800538c <MX_GPIO_Init+0x1d8>)
 8005200:	2101      	movs	r1, #1
 8005202:	430a      	orrs	r2, r1
 8005204:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005206:	4b61      	ldr	r3, [pc, #388]	@ (800538c <MX_GPIO_Init+0x1d8>)
 8005208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520a:	2201      	movs	r2, #1
 800520c:	4013      	ands	r3, r2
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005212:	4b5e      	ldr	r3, [pc, #376]	@ (800538c <MX_GPIO_Init+0x1d8>)
 8005214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005216:	4b5d      	ldr	r3, [pc, #372]	@ (800538c <MX_GPIO_Init+0x1d8>)
 8005218:	2102      	movs	r1, #2
 800521a:	430a      	orrs	r2, r1
 800521c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800521e:	4b5b      	ldr	r3, [pc, #364]	@ (800538c <MX_GPIO_Init+0x1d8>)
 8005220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005222:	2202      	movs	r2, #2
 8005224:	4013      	ands	r3, r2
 8005226:	607b      	str	r3, [r7, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800522a:	4b58      	ldr	r3, [pc, #352]	@ (800538c <MX_GPIO_Init+0x1d8>)
 800522c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800522e:	4b57      	ldr	r3, [pc, #348]	@ (800538c <MX_GPIO_Init+0x1d8>)
 8005230:	2108      	movs	r1, #8
 8005232:	430a      	orrs	r2, r1
 8005234:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005236:	4b55      	ldr	r3, [pc, #340]	@ (800538c <MX_GPIO_Init+0x1d8>)
 8005238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523a:	2208      	movs	r2, #8
 800523c:	4013      	ands	r3, r2
 800523e:	603b      	str	r3, [r7, #0]
 8005240:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005242:	4b53      	ldr	r3, [pc, #332]	@ (8005390 <MX_GPIO_Init+0x1dc>)
 8005244:	2201      	movs	r2, #1
 8005246:	2101      	movs	r1, #1
 8005248:	0018      	movs	r0, r3
 800524a:	f005 f9f7 	bl	800a63c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800524e:	4b50      	ldr	r3, [pc, #320]	@ (8005390 <MX_GPIO_Init+0x1dc>)
 8005250:	2200      	movs	r2, #0
 8005252:	2102      	movs	r1, #2
 8005254:	0018      	movs	r0, r3
 8005256:	f005 f9f1 	bl	800a63c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800525a:	494e      	ldr	r1, [pc, #312]	@ (8005394 <MX_GPIO_Init+0x1e0>)
 800525c:	4b4e      	ldr	r3, [pc, #312]	@ (8005398 <MX_GPIO_Init+0x1e4>)
 800525e:	2201      	movs	r2, #1
 8005260:	0018      	movs	r0, r3
 8005262:	f005 f9eb 	bl	800a63c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005266:	2380      	movs	r3, #128	@ 0x80
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	484c      	ldr	r0, [pc, #304]	@ (800539c <MX_GPIO_Init+0x1e8>)
 800526c:	2201      	movs	r2, #1
 800526e:	0019      	movs	r1, r3
 8005270:	f005 f9e4 	bl	800a63c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8005274:	193b      	adds	r3, r7, r4
 8005276:	4a4a      	ldr	r2, [pc, #296]	@ (80053a0 <MX_GPIO_Init+0x1ec>)
 8005278:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800527a:	193b      	adds	r3, r7, r4
 800527c:	2203      	movs	r2, #3
 800527e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005280:	193b      	adds	r3, r7, r4
 8005282:	2200      	movs	r2, #0
 8005284:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005286:	193b      	adds	r3, r7, r4
 8005288:	4a44      	ldr	r2, [pc, #272]	@ (800539c <MX_GPIO_Init+0x1e8>)
 800528a:	0019      	movs	r1, r3
 800528c:	0010      	movs	r0, r2
 800528e:	f004 ff75 	bl	800a17c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8005292:	193b      	adds	r3, r7, r4
 8005294:	2203      	movs	r2, #3
 8005296:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005298:	193b      	adds	r3, r7, r4
 800529a:	2201      	movs	r2, #1
 800529c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800529e:	193b      	adds	r3, r7, r4
 80052a0:	2200      	movs	r2, #0
 80052a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052a4:	193b      	adds	r3, r7, r4
 80052a6:	2200      	movs	r2, #0
 80052a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80052aa:	193b      	adds	r3, r7, r4
 80052ac:	4a38      	ldr	r2, [pc, #224]	@ (8005390 <MX_GPIO_Init+0x1dc>)
 80052ae:	0019      	movs	r1, r3
 80052b0:	0010      	movs	r0, r2
 80052b2:	f004 ff63 	bl	800a17c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 80052b6:	193b      	adds	r3, r7, r4
 80052b8:	4a3a      	ldr	r2, [pc, #232]	@ (80053a4 <MX_GPIO_Init+0x1f0>)
 80052ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052bc:	193b      	adds	r3, r7, r4
 80052be:	2203      	movs	r2, #3
 80052c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c2:	193b      	adds	r3, r7, r4
 80052c4:	2200      	movs	r2, #0
 80052c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052c8:	193a      	adds	r2, r7, r4
 80052ca:	23a0      	movs	r3, #160	@ 0xa0
 80052cc:	05db      	lsls	r3, r3, #23
 80052ce:	0011      	movs	r1, r2
 80052d0:	0018      	movs	r0, r3
 80052d2:	f004 ff53 	bl	800a17c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 80052d6:	193b      	adds	r3, r7, r4
 80052d8:	22c0      	movs	r2, #192	@ 0xc0
 80052da:	0052      	lsls	r2, r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052de:	193b      	adds	r3, r7, r4
 80052e0:	2200      	movs	r2, #0
 80052e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e4:	193b      	adds	r3, r7, r4
 80052e6:	2200      	movs	r2, #0
 80052e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ea:	193a      	adds	r2, r7, r4
 80052ec:	23a0      	movs	r3, #160	@ 0xa0
 80052ee:	05db      	lsls	r3, r3, #23
 80052f0:	0011      	movs	r1, r2
 80052f2:	0018      	movs	r0, r3
 80052f4:	f004 ff42 	bl	800a17c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80052f8:	193b      	adds	r3, r7, r4
 80052fa:	4a26      	ldr	r2, [pc, #152]	@ (8005394 <MX_GPIO_Init+0x1e0>)
 80052fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052fe:	193b      	adds	r3, r7, r4
 8005300:	2201      	movs	r2, #1
 8005302:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005304:	193b      	adds	r3, r7, r4
 8005306:	2200      	movs	r2, #0
 8005308:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800530a:	193b      	adds	r3, r7, r4
 800530c:	2200      	movs	r2, #0
 800530e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005310:	193b      	adds	r3, r7, r4
 8005312:	4a21      	ldr	r2, [pc, #132]	@ (8005398 <MX_GPIO_Init+0x1e4>)
 8005314:	0019      	movs	r1, r3
 8005316:	0010      	movs	r0, r2
 8005318:	f004 ff30 	bl	800a17c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 800531c:	193b      	adds	r3, r7, r4
 800531e:	4a22      	ldr	r2, [pc, #136]	@ (80053a8 <MX_GPIO_Init+0x1f4>)
 8005320:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005322:	193b      	adds	r3, r7, r4
 8005324:	2203      	movs	r2, #3
 8005326:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005328:	193b      	adds	r3, r7, r4
 800532a:	2200      	movs	r2, #0
 800532c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800532e:	193b      	adds	r3, r7, r4
 8005330:	4a19      	ldr	r2, [pc, #100]	@ (8005398 <MX_GPIO_Init+0x1e4>)
 8005332:	0019      	movs	r1, r3
 8005334:	0010      	movs	r0, r2
 8005336:	f004 ff21 	bl	800a17c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin;
 800533a:	0021      	movs	r1, r4
 800533c:	187b      	adds	r3, r7, r1
 800533e:	2280      	movs	r2, #128	@ 0x80
 8005340:	0112      	lsls	r2, r2, #4
 8005342:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005344:	000c      	movs	r4, r1
 8005346:	193b      	adds	r3, r7, r4
 8005348:	2201      	movs	r2, #1
 800534a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800534c:	193b      	adds	r3, r7, r4
 800534e:	2200      	movs	r2, #0
 8005350:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005352:	193b      	adds	r3, r7, r4
 8005354:	2200      	movs	r2, #0
 8005356:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Wireless_PSU_EN_GPIO_Port, &GPIO_InitStruct);
 8005358:	193b      	adds	r3, r7, r4
 800535a:	4a10      	ldr	r2, [pc, #64]	@ (800539c <MX_GPIO_Init+0x1e8>)
 800535c:	0019      	movs	r1, r3
 800535e:	0010      	movs	r0, r2
 8005360:	f004 ff0c 	bl	800a17c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8005364:	0021      	movs	r1, r4
 8005366:	187b      	adds	r3, r7, r1
 8005368:	2204      	movs	r2, #4
 800536a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800536c:	187b      	adds	r3, r7, r1
 800536e:	2200      	movs	r2, #0
 8005370:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005372:	187b      	adds	r3, r7, r1
 8005374:	2200      	movs	r2, #0
 8005376:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8005378:	187b      	adds	r3, r7, r1
 800537a:	4a0c      	ldr	r2, [pc, #48]	@ (80053ac <MX_GPIO_Init+0x1f8>)
 800537c:	0019      	movs	r1, r3
 800537e:	0010      	movs	r0, r2
 8005380:	f004 fefc 	bl	800a17c <HAL_GPIO_Init>

}
 8005384:	46c0      	nop			@ (mov r8, r8)
 8005386:	46bd      	mov	sp, r7
 8005388:	b00b      	add	sp, #44	@ 0x2c
 800538a:	bd90      	pop	{r4, r7, pc}
 800538c:	40021000 	.word	0x40021000
 8005390:	50001c00 	.word	0x50001c00
 8005394:	00000301 	.word	0x00000301
 8005398:	50000400 	.word	0x50000400
 800539c:	50000800 	.word	0x50000800
 80053a0:	0000320f 	.word	0x0000320f
 80053a4:	00008070 	.word	0x00008070
 80053a8:	0000403e 	.word	0x0000403e
 80053ac:	50000c00 	.word	0x50000c00

080053b0 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2100      	movs	r1, #0
 80053be:	0018      	movs	r0, r3
 80053c0:	f00a fa9e 	bl	800f900 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2108      	movs	r1, #8
 80053c8:	0018      	movs	r0, r3
 80053ca:	f00a fa99 	bl	800f900 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	210c      	movs	r1, #12
 80053d2:	0018      	movs	r0, r3
 80053d4:	f00a fa94 	bl	800f900 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 80053d8:	2380      	movs	r3, #128	@ 0x80
 80053da:	05db      	lsls	r3, r3, #23
 80053dc:	22fa      	movs	r2, #250	@ 0xfa
 80053de:	0112      	lsls	r2, r2, #4
 80053e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 80053e2:	2380      	movs	r3, #128	@ 0x80
 80053e4:	05db      	lsls	r3, r3, #23
 80053e6:	22fa      	movs	r2, #250	@ 0xfa
 80053e8:	0112      	lsls	r2, r2, #4
 80053ea:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80053ec:	2380      	movs	r3, #128	@ 0x80
 80053ee:	05db      	lsls	r3, r3, #23
 80053f0:	22fa      	movs	r2, #250	@ 0xfa
 80053f2:	0112      	lsls	r2, r2, #4
 80053f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80053f6:	2380      	movs	r3, #128	@ 0x80
 80053f8:	05db      	lsls	r3, r3, #23
 80053fa:	22fa      	movs	r2, #250	@ 0xfa
 80053fc:	0112      	lsls	r2, r2, #4
 80053fe:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2100      	movs	r1, #0
 8005404:	0018      	movs	r0, r3
 8005406:	f00a fa7b 	bl	800f900 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2104      	movs	r1, #4
 800540e:	0018      	movs	r0, r3
 8005410:	f00a fa76 	bl	800f900 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2108      	movs	r1, #8
 8005418:	0018      	movs	r0, r3
 800541a:	f00a fa71 	bl	800f900 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 800541e:	4b0a      	ldr	r3, [pc, #40]	@ (8005448 <GPIO_InitPWMLEDs+0x98>)
 8005420:	22fa      	movs	r2, #250	@ 0xfa
 8005422:	0112      	lsls	r2, r2, #4
 8005424:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8005426:	4b08      	ldr	r3, [pc, #32]	@ (8005448 <GPIO_InitPWMLEDs+0x98>)
 8005428:	22fa      	movs	r2, #250	@ 0xfa
 800542a:	0112      	lsls	r2, r2, #4
 800542c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800542e:	4b06      	ldr	r3, [pc, #24]	@ (8005448 <GPIO_InitPWMLEDs+0x98>)
 8005430:	22fa      	movs	r2, #250	@ 0xfa
 8005432:	0112      	lsls	r2, r2, #4
 8005434:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8005436:	4b04      	ldr	r3, [pc, #16]	@ (8005448 <GPIO_InitPWMLEDs+0x98>)
 8005438:	22fa      	movs	r2, #250	@ 0xfa
 800543a:	0112      	lsls	r2, r2, #4
 800543c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800543e:	46c0      	nop			@ (mov r8, r8)
 8005440:	46bd      	mov	sp, r7
 8005442:	b002      	add	sp, #8
 8005444:	bd80      	pop	{r7, pc}
 8005446:	46c0      	nop			@ (mov r8, r8)
 8005448:	40000400 	.word	0x40000400

0800544c <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	0011      	movs	r1, r2
 800545c:	0018      	movs	r0, r3
 800545e:	f003 fc99 	bl	8008d94 <HIDS_Init>
}
 8005462:	46c0      	nop			@ (mov r8, r8)
 8005464:	46bd      	mov	sp, r7
 8005466:	b002      	add	sp, #8
 8005468:	bd80      	pop	{r7, pc}

0800546a <HT_StartMeasurement>:

void HT_StartMeasurement() {
 800546a:	b580      	push	{r7, lr}
 800546c:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 800546e:	f003 fcb3 	bl	8008dd8 <HIDS_StartMeasurement>
}
 8005472:	46c0      	nop			@ (mov r8, r8)
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	0011      	movs	r1, r2
 8005488:	0018      	movs	r0, r3
 800548a:	f003 fd81 	bl	8008f90 <HIDS_GetMeasurementValues>
 800548e:	0003      	movs	r3, r0
}
 8005490:	0018      	movs	r0, r3
 8005492:	46bd      	mov	sp, r7
 8005494:	b002      	add	sp, #8
 8005496:	bd80      	pop	{r7, pc}

08005498 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 800549c:	f003 fd1c 	bl	8008ed8 <HIDS_DeviceConnected>
 80054a0:	0003      	movs	r3, r0
}
 80054a2:	0018      	movs	r0, r3
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80054ac:	4b1b      	ldr	r3, [pc, #108]	@ (800551c <MX_I2C1_Init+0x74>)
 80054ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005520 <MX_I2C1_Init+0x78>)
 80054b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80054b2:	4b1a      	ldr	r3, [pc, #104]	@ (800551c <MX_I2C1_Init+0x74>)
 80054b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005524 <MX_I2C1_Init+0x7c>)
 80054b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80054b8:	4b18      	ldr	r3, [pc, #96]	@ (800551c <MX_I2C1_Init+0x74>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80054be:	4b17      	ldr	r3, [pc, #92]	@ (800551c <MX_I2C1_Init+0x74>)
 80054c0:	2201      	movs	r2, #1
 80054c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80054c4:	4b15      	ldr	r3, [pc, #84]	@ (800551c <MX_I2C1_Init+0x74>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80054ca:	4b14      	ldr	r3, [pc, #80]	@ (800551c <MX_I2C1_Init+0x74>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80054d0:	4b12      	ldr	r3, [pc, #72]	@ (800551c <MX_I2C1_Init+0x74>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80054d6:	4b11      	ldr	r3, [pc, #68]	@ (800551c <MX_I2C1_Init+0x74>)
 80054d8:	2200      	movs	r2, #0
 80054da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80054dc:	4b0f      	ldr	r3, [pc, #60]	@ (800551c <MX_I2C1_Init+0x74>)
 80054de:	2200      	movs	r2, #0
 80054e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80054e2:	4b0e      	ldr	r3, [pc, #56]	@ (800551c <MX_I2C1_Init+0x74>)
 80054e4:	0018      	movs	r0, r3
 80054e6:	f005 f8c7 	bl	800a678 <HAL_I2C_Init>
 80054ea:	1e03      	subs	r3, r0, #0
 80054ec:	d001      	beq.n	80054f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80054ee:	f000 fb2f 	bl	8005b50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80054f2:	4b0a      	ldr	r3, [pc, #40]	@ (800551c <MX_I2C1_Init+0x74>)
 80054f4:	2100      	movs	r1, #0
 80054f6:	0018      	movs	r0, r3
 80054f8:	f007 f836 	bl	800c568 <HAL_I2CEx_ConfigAnalogFilter>
 80054fc:	1e03      	subs	r3, r0, #0
 80054fe:	d001      	beq.n	8005504 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005500:	f000 fb26 	bl	8005b50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005504:	4b05      	ldr	r3, [pc, #20]	@ (800551c <MX_I2C1_Init+0x74>)
 8005506:	2100      	movs	r1, #0
 8005508:	0018      	movs	r0, r3
 800550a:	f007 f879 	bl	800c600 <HAL_I2CEx_ConfigDigitalFilter>
 800550e:	1e03      	subs	r3, r0, #0
 8005510:	d001      	beq.n	8005516 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005512:	f000 fb1d 	bl	8005b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005516:	46c0      	nop			@ (mov r8, r8)
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20000afc 	.word	0x20000afc
 8005520:	40005400 	.word	0x40005400
 8005524:	00503d58 	.word	0x00503d58

08005528 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800552c:	4b1b      	ldr	r3, [pc, #108]	@ (800559c <MX_I2C2_Init+0x74>)
 800552e:	4a1c      	ldr	r2, [pc, #112]	@ (80055a0 <MX_I2C2_Init+0x78>)
 8005530:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8005532:	4b1a      	ldr	r3, [pc, #104]	@ (800559c <MX_I2C2_Init+0x74>)
 8005534:	4a1b      	ldr	r2, [pc, #108]	@ (80055a4 <MX_I2C2_Init+0x7c>)
 8005536:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005538:	4b18      	ldr	r3, [pc, #96]	@ (800559c <MX_I2C2_Init+0x74>)
 800553a:	2200      	movs	r2, #0
 800553c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800553e:	4b17      	ldr	r3, [pc, #92]	@ (800559c <MX_I2C2_Init+0x74>)
 8005540:	2201      	movs	r2, #1
 8005542:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005544:	4b15      	ldr	r3, [pc, #84]	@ (800559c <MX_I2C2_Init+0x74>)
 8005546:	2200      	movs	r2, #0
 8005548:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800554a:	4b14      	ldr	r3, [pc, #80]	@ (800559c <MX_I2C2_Init+0x74>)
 800554c:	2200      	movs	r2, #0
 800554e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005550:	4b12      	ldr	r3, [pc, #72]	@ (800559c <MX_I2C2_Init+0x74>)
 8005552:	2200      	movs	r2, #0
 8005554:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005556:	4b11      	ldr	r3, [pc, #68]	@ (800559c <MX_I2C2_Init+0x74>)
 8005558:	2200      	movs	r2, #0
 800555a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800555c:	4b0f      	ldr	r3, [pc, #60]	@ (800559c <MX_I2C2_Init+0x74>)
 800555e:	2200      	movs	r2, #0
 8005560:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005562:	4b0e      	ldr	r3, [pc, #56]	@ (800559c <MX_I2C2_Init+0x74>)
 8005564:	0018      	movs	r0, r3
 8005566:	f005 f887 	bl	800a678 <HAL_I2C_Init>
 800556a:	1e03      	subs	r3, r0, #0
 800556c:	d001      	beq.n	8005572 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800556e:	f000 faef 	bl	8005b50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005572:	4b0a      	ldr	r3, [pc, #40]	@ (800559c <MX_I2C2_Init+0x74>)
 8005574:	2100      	movs	r1, #0
 8005576:	0018      	movs	r0, r3
 8005578:	f006 fff6 	bl	800c568 <HAL_I2CEx_ConfigAnalogFilter>
 800557c:	1e03      	subs	r3, r0, #0
 800557e:	d001      	beq.n	8005584 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005580:	f000 fae6 	bl	8005b50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005584:	4b05      	ldr	r3, [pc, #20]	@ (800559c <MX_I2C2_Init+0x74>)
 8005586:	2100      	movs	r1, #0
 8005588:	0018      	movs	r0, r3
 800558a:	f007 f839 	bl	800c600 <HAL_I2CEx_ConfigDigitalFilter>
 800558e:	1e03      	subs	r3, r0, #0
 8005590:	d001      	beq.n	8005596 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005592:	f000 fadd 	bl	8005b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005596:	46c0      	nop			@ (mov r8, r8)
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	20000b50 	.word	0x20000b50
 80055a0:	40005800 	.word	0x40005800
 80055a4:	00503d58 	.word	0x00503d58

080055a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80055a8:	b590      	push	{r4, r7, lr}
 80055aa:	b08b      	sub	sp, #44	@ 0x2c
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055b0:	2414      	movs	r4, #20
 80055b2:	193b      	adds	r3, r7, r4
 80055b4:	0018      	movs	r0, r3
 80055b6:	2314      	movs	r3, #20
 80055b8:	001a      	movs	r2, r3
 80055ba:	2100      	movs	r1, #0
 80055bc:	f011 fa52 	bl	8016a64 <memset>
  if(i2cHandle->Instance==I2C1)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a5d      	ldr	r2, [pc, #372]	@ (800573c <HAL_I2C_MspInit+0x194>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d000      	beq.n	80055cc <HAL_I2C_MspInit+0x24>
 80055ca:	e083      	b.n	80056d4 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055cc:	4b5c      	ldr	r3, [pc, #368]	@ (8005740 <HAL_I2C_MspInit+0x198>)
 80055ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055d0:	4b5b      	ldr	r3, [pc, #364]	@ (8005740 <HAL_I2C_MspInit+0x198>)
 80055d2:	2102      	movs	r1, #2
 80055d4:	430a      	orrs	r2, r1
 80055d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80055d8:	4b59      	ldr	r3, [pc, #356]	@ (8005740 <HAL_I2C_MspInit+0x198>)
 80055da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055dc:	2202      	movs	r2, #2
 80055de:	4013      	ands	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
 80055e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80055e4:	0021      	movs	r1, r4
 80055e6:	187b      	adds	r3, r7, r1
 80055e8:	22c0      	movs	r2, #192	@ 0xc0
 80055ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055ec:	187b      	adds	r3, r7, r1
 80055ee:	2212      	movs	r2, #18
 80055f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f2:	187b      	adds	r3, r7, r1
 80055f4:	2200      	movs	r2, #0
 80055f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055f8:	187b      	adds	r3, r7, r1
 80055fa:	2203      	movs	r2, #3
 80055fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80055fe:	187b      	adds	r3, r7, r1
 8005600:	2201      	movs	r2, #1
 8005602:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005604:	187b      	adds	r3, r7, r1
 8005606:	4a4f      	ldr	r2, [pc, #316]	@ (8005744 <HAL_I2C_MspInit+0x19c>)
 8005608:	0019      	movs	r1, r3
 800560a:	0010      	movs	r0, r2
 800560c:	f004 fdb6 	bl	800a17c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005610:	4b4b      	ldr	r3, [pc, #300]	@ (8005740 <HAL_I2C_MspInit+0x198>)
 8005612:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005614:	4b4a      	ldr	r3, [pc, #296]	@ (8005740 <HAL_I2C_MspInit+0x198>)
 8005616:	2180      	movs	r1, #128	@ 0x80
 8005618:	0389      	lsls	r1, r1, #14
 800561a:	430a      	orrs	r2, r1
 800561c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800561e:	4b4a      	ldr	r3, [pc, #296]	@ (8005748 <HAL_I2C_MspInit+0x1a0>)
 8005620:	4a4a      	ldr	r2, [pc, #296]	@ (800574c <HAL_I2C_MspInit+0x1a4>)
 8005622:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8005624:	4b48      	ldr	r3, [pc, #288]	@ (8005748 <HAL_I2C_MspInit+0x1a0>)
 8005626:	2206      	movs	r2, #6
 8005628:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800562a:	4b47      	ldr	r3, [pc, #284]	@ (8005748 <HAL_I2C_MspInit+0x1a0>)
 800562c:	2200      	movs	r2, #0
 800562e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005630:	4b45      	ldr	r3, [pc, #276]	@ (8005748 <HAL_I2C_MspInit+0x1a0>)
 8005632:	2200      	movs	r2, #0
 8005634:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005636:	4b44      	ldr	r3, [pc, #272]	@ (8005748 <HAL_I2C_MspInit+0x1a0>)
 8005638:	2280      	movs	r2, #128	@ 0x80
 800563a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800563c:	4b42      	ldr	r3, [pc, #264]	@ (8005748 <HAL_I2C_MspInit+0x1a0>)
 800563e:	2200      	movs	r2, #0
 8005640:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005642:	4b41      	ldr	r3, [pc, #260]	@ (8005748 <HAL_I2C_MspInit+0x1a0>)
 8005644:	2200      	movs	r2, #0
 8005646:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005648:	4b3f      	ldr	r3, [pc, #252]	@ (8005748 <HAL_I2C_MspInit+0x1a0>)
 800564a:	2200      	movs	r2, #0
 800564c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800564e:	4b3e      	ldr	r3, [pc, #248]	@ (8005748 <HAL_I2C_MspInit+0x1a0>)
 8005650:	2200      	movs	r2, #0
 8005652:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005654:	4b3c      	ldr	r3, [pc, #240]	@ (8005748 <HAL_I2C_MspInit+0x1a0>)
 8005656:	0018      	movs	r0, r3
 8005658:	f004 fae4 	bl	8009c24 <HAL_DMA_Init>
 800565c:	1e03      	subs	r3, r0, #0
 800565e:	d001      	beq.n	8005664 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8005660:	f000 fa76 	bl	8005b50 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a38      	ldr	r2, [pc, #224]	@ (8005748 <HAL_I2C_MspInit+0x1a0>)
 8005668:	63da      	str	r2, [r3, #60]	@ 0x3c
 800566a:	4b37      	ldr	r3, [pc, #220]	@ (8005748 <HAL_I2C_MspInit+0x1a0>)
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8005670:	4b37      	ldr	r3, [pc, #220]	@ (8005750 <HAL_I2C_MspInit+0x1a8>)
 8005672:	4a38      	ldr	r2, [pc, #224]	@ (8005754 <HAL_I2C_MspInit+0x1ac>)
 8005674:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8005676:	4b36      	ldr	r3, [pc, #216]	@ (8005750 <HAL_I2C_MspInit+0x1a8>)
 8005678:	2206      	movs	r2, #6
 800567a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800567c:	4b34      	ldr	r3, [pc, #208]	@ (8005750 <HAL_I2C_MspInit+0x1a8>)
 800567e:	2210      	movs	r2, #16
 8005680:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005682:	4b33      	ldr	r3, [pc, #204]	@ (8005750 <HAL_I2C_MspInit+0x1a8>)
 8005684:	2200      	movs	r2, #0
 8005686:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005688:	4b31      	ldr	r3, [pc, #196]	@ (8005750 <HAL_I2C_MspInit+0x1a8>)
 800568a:	2280      	movs	r2, #128	@ 0x80
 800568c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800568e:	4b30      	ldr	r3, [pc, #192]	@ (8005750 <HAL_I2C_MspInit+0x1a8>)
 8005690:	2200      	movs	r2, #0
 8005692:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005694:	4b2e      	ldr	r3, [pc, #184]	@ (8005750 <HAL_I2C_MspInit+0x1a8>)
 8005696:	2200      	movs	r2, #0
 8005698:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800569a:	4b2d      	ldr	r3, [pc, #180]	@ (8005750 <HAL_I2C_MspInit+0x1a8>)
 800569c:	2200      	movs	r2, #0
 800569e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80056a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005750 <HAL_I2C_MspInit+0x1a8>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80056a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005750 <HAL_I2C_MspInit+0x1a8>)
 80056a8:	0018      	movs	r0, r3
 80056aa:	f004 fabb 	bl	8009c24 <HAL_DMA_Init>
 80056ae:	1e03      	subs	r3, r0, #0
 80056b0:	d001      	beq.n	80056b6 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80056b2:	f000 fa4d 	bl	8005b50 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a25      	ldr	r2, [pc, #148]	@ (8005750 <HAL_I2C_MspInit+0x1a8>)
 80056ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80056bc:	4b24      	ldr	r3, [pc, #144]	@ (8005750 <HAL_I2C_MspInit+0x1a8>)
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80056c2:	2200      	movs	r2, #0
 80056c4:	2100      	movs	r1, #0
 80056c6:	2017      	movs	r0, #23
 80056c8:	f004 fa7a 	bl	8009bc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80056cc:	2017      	movs	r0, #23
 80056ce:	f004 fa8c 	bl	8009bea <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80056d2:	e02e      	b.n	8005732 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005758 <HAL_I2C_MspInit+0x1b0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d129      	bne.n	8005732 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056de:	4b18      	ldr	r3, [pc, #96]	@ (8005740 <HAL_I2C_MspInit+0x198>)
 80056e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e2:	4b17      	ldr	r3, [pc, #92]	@ (8005740 <HAL_I2C_MspInit+0x198>)
 80056e4:	2102      	movs	r1, #2
 80056e6:	430a      	orrs	r2, r1
 80056e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80056ea:	4b15      	ldr	r3, [pc, #84]	@ (8005740 <HAL_I2C_MspInit+0x198>)
 80056ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ee:	2202      	movs	r2, #2
 80056f0:	4013      	ands	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80056f6:	2114      	movs	r1, #20
 80056f8:	187b      	adds	r3, r7, r1
 80056fa:	22c0      	movs	r2, #192	@ 0xc0
 80056fc:	0112      	lsls	r2, r2, #4
 80056fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005700:	187b      	adds	r3, r7, r1
 8005702:	2212      	movs	r2, #18
 8005704:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005706:	187b      	adds	r3, r7, r1
 8005708:	2200      	movs	r2, #0
 800570a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800570c:	187b      	adds	r3, r7, r1
 800570e:	2203      	movs	r2, #3
 8005710:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8005712:	187b      	adds	r3, r7, r1
 8005714:	2206      	movs	r2, #6
 8005716:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005718:	187b      	adds	r3, r7, r1
 800571a:	4a0a      	ldr	r2, [pc, #40]	@ (8005744 <HAL_I2C_MspInit+0x19c>)
 800571c:	0019      	movs	r1, r3
 800571e:	0010      	movs	r0, r2
 8005720:	f004 fd2c 	bl	800a17c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005724:	4b06      	ldr	r3, [pc, #24]	@ (8005740 <HAL_I2C_MspInit+0x198>)
 8005726:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005728:	4b05      	ldr	r3, [pc, #20]	@ (8005740 <HAL_I2C_MspInit+0x198>)
 800572a:	2180      	movs	r1, #128	@ 0x80
 800572c:	03c9      	lsls	r1, r1, #15
 800572e:	430a      	orrs	r2, r1
 8005730:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005732:	46c0      	nop			@ (mov r8, r8)
 8005734:	46bd      	mov	sp, r7
 8005736:	b00b      	add	sp, #44	@ 0x2c
 8005738:	bd90      	pop	{r4, r7, pc}
 800573a:	46c0      	nop			@ (mov r8, r8)
 800573c:	40005400 	.word	0x40005400
 8005740:	40021000 	.word	0x40021000
 8005744:	50000400 	.word	0x50000400
 8005748:	20000ba4 	.word	0x20000ba4
 800574c:	40020030 	.word	0x40020030
 8005750:	20000bec 	.word	0x20000bec
 8005754:	4002001c 	.word	0x4002001c
 8005758:	40005800 	.word	0x40005800

0800575c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8005760:	4b10      	ldr	r3, [pc, #64]	@ (80057a4 <MX_I2S2_Init+0x48>)
 8005762:	4a11      	ldr	r2, [pc, #68]	@ (80057a8 <MX_I2S2_Init+0x4c>)
 8005764:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8005766:	4b0f      	ldr	r3, [pc, #60]	@ (80057a4 <MX_I2S2_Init+0x48>)
 8005768:	22c0      	movs	r2, #192	@ 0xc0
 800576a:	0092      	lsls	r2, r2, #2
 800576c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 800576e:	4b0d      	ldr	r3, [pc, #52]	@ (80057a4 <MX_I2S2_Init+0x48>)
 8005770:	2210      	movs	r2, #16
 8005772:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8005774:	4b0b      	ldr	r3, [pc, #44]	@ (80057a4 <MX_I2S2_Init+0x48>)
 8005776:	2205      	movs	r2, #5
 8005778:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800577a:	4b0a      	ldr	r3, [pc, #40]	@ (80057a4 <MX_I2S2_Init+0x48>)
 800577c:	2200      	movs	r2, #0
 800577e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8005780:	4b08      	ldr	r3, [pc, #32]	@ (80057a4 <MX_I2S2_Init+0x48>)
 8005782:	22fa      	movs	r2, #250	@ 0xfa
 8005784:	0152      	lsls	r2, r2, #5
 8005786:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8005788:	4b06      	ldr	r3, [pc, #24]	@ (80057a4 <MX_I2S2_Init+0x48>)
 800578a:	2208      	movs	r2, #8
 800578c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800578e:	4b05      	ldr	r3, [pc, #20]	@ (80057a4 <MX_I2S2_Init+0x48>)
 8005790:	0018      	movs	r0, r3
 8005792:	f006 ff81 	bl	800c698 <HAL_I2S_Init>
 8005796:	1e03      	subs	r3, r0, #0
 8005798:	d001      	beq.n	800579e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800579a:	f000 f9d9 	bl	8005b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800579e:	46c0      	nop			@ (mov r8, r8)
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20000c34 	.word	0x20000c34
 80057a8:	40003800 	.word	0x40003800

080057ac <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80057ac:	b590      	push	{r4, r7, lr}
 80057ae:	b089      	sub	sp, #36	@ 0x24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057b4:	240c      	movs	r4, #12
 80057b6:	193b      	adds	r3, r7, r4
 80057b8:	0018      	movs	r0, r3
 80057ba:	2314      	movs	r3, #20
 80057bc:	001a      	movs	r2, r3
 80057be:	2100      	movs	r1, #0
 80057c0:	f011 f950 	bl	8016a64 <memset>
  if(i2sHandle->Instance==SPI2)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a2d      	ldr	r2, [pc, #180]	@ (8005880 <HAL_I2S_MspInit+0xd4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d154      	bne.n	8005878 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80057ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005884 <HAL_I2S_MspInit+0xd8>)
 80057d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057d2:	4b2c      	ldr	r3, [pc, #176]	@ (8005884 <HAL_I2S_MspInit+0xd8>)
 80057d4:	2180      	movs	r1, #128	@ 0x80
 80057d6:	01c9      	lsls	r1, r1, #7
 80057d8:	430a      	orrs	r2, r1
 80057da:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057dc:	4b29      	ldr	r3, [pc, #164]	@ (8005884 <HAL_I2S_MspInit+0xd8>)
 80057de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e0:	4b28      	ldr	r3, [pc, #160]	@ (8005884 <HAL_I2S_MspInit+0xd8>)
 80057e2:	2102      	movs	r1, #2
 80057e4:	430a      	orrs	r2, r1
 80057e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80057e8:	4b26      	ldr	r3, [pc, #152]	@ (8005884 <HAL_I2S_MspInit+0xd8>)
 80057ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ec:	2202      	movs	r2, #2
 80057ee:	4013      	ands	r3, r2
 80057f0:	60bb      	str	r3, [r7, #8]
 80057f2:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80057f4:	193b      	adds	r3, r7, r4
 80057f6:	22b0      	movs	r2, #176	@ 0xb0
 80057f8:	0212      	lsls	r2, r2, #8
 80057fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057fc:	0021      	movs	r1, r4
 80057fe:	187b      	adds	r3, r7, r1
 8005800:	2202      	movs	r2, #2
 8005802:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005804:	187b      	adds	r3, r7, r1
 8005806:	2200      	movs	r2, #0
 8005808:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800580a:	187b      	adds	r3, r7, r1
 800580c:	2200      	movs	r2, #0
 800580e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8005810:	187b      	adds	r3, r7, r1
 8005812:	2200      	movs	r2, #0
 8005814:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005816:	187b      	adds	r3, r7, r1
 8005818:	4a1b      	ldr	r2, [pc, #108]	@ (8005888 <HAL_I2S_MspInit+0xdc>)
 800581a:	0019      	movs	r1, r3
 800581c:	0010      	movs	r0, r2
 800581e:	f004 fcad 	bl	800a17c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8005822:	4b1a      	ldr	r3, [pc, #104]	@ (800588c <HAL_I2S_MspInit+0xe0>)
 8005824:	4a1a      	ldr	r2, [pc, #104]	@ (8005890 <HAL_I2S_MspInit+0xe4>)
 8005826:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8005828:	4b18      	ldr	r3, [pc, #96]	@ (800588c <HAL_I2S_MspInit+0xe0>)
 800582a:	2202      	movs	r2, #2
 800582c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800582e:	4b17      	ldr	r3, [pc, #92]	@ (800588c <HAL_I2S_MspInit+0xe0>)
 8005830:	2200      	movs	r2, #0
 8005832:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005834:	4b15      	ldr	r3, [pc, #84]	@ (800588c <HAL_I2S_MspInit+0xe0>)
 8005836:	2200      	movs	r2, #0
 8005838:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800583a:	4b14      	ldr	r3, [pc, #80]	@ (800588c <HAL_I2S_MspInit+0xe0>)
 800583c:	2280      	movs	r2, #128	@ 0x80
 800583e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005840:	4b12      	ldr	r3, [pc, #72]	@ (800588c <HAL_I2S_MspInit+0xe0>)
 8005842:	2280      	movs	r2, #128	@ 0x80
 8005844:	0052      	lsls	r2, r2, #1
 8005846:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005848:	4b10      	ldr	r3, [pc, #64]	@ (800588c <HAL_I2S_MspInit+0xe0>)
 800584a:	2280      	movs	r2, #128	@ 0x80
 800584c:	00d2      	lsls	r2, r2, #3
 800584e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8005850:	4b0e      	ldr	r3, [pc, #56]	@ (800588c <HAL_I2S_MspInit+0xe0>)
 8005852:	2220      	movs	r2, #32
 8005854:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005856:	4b0d      	ldr	r3, [pc, #52]	@ (800588c <HAL_I2S_MspInit+0xe0>)
 8005858:	2200      	movs	r2, #0
 800585a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800585c:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <HAL_I2S_MspInit+0xe0>)
 800585e:	0018      	movs	r0, r3
 8005860:	f004 f9e0 	bl	8009c24 <HAL_DMA_Init>
 8005864:	1e03      	subs	r3, r0, #0
 8005866:	d001      	beq.n	800586c <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8005868:	f000 f972 	bl	8005b50 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a07      	ldr	r2, [pc, #28]	@ (800588c <HAL_I2S_MspInit+0xe0>)
 8005870:	631a      	str	r2, [r3, #48]	@ 0x30
 8005872:	4b06      	ldr	r3, [pc, #24]	@ (800588c <HAL_I2S_MspInit+0xe0>)
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005878:	46c0      	nop			@ (mov r8, r8)
 800587a:	46bd      	mov	sp, r7
 800587c:	b009      	add	sp, #36	@ 0x24
 800587e:	bd90      	pop	{r4, r7, pc}
 8005880:	40003800 	.word	0x40003800
 8005884:	40021000 	.word	0x40021000
 8005888:	50000400 	.word	0x50000400
 800588c:	20000c70 	.word	0x20000c70
 8005890:	40020044 	.word	0x40020044

08005894 <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a0c      	ldr	r2, [pc, #48]	@ (80058d4 <HAL_I2S_MspDeInit+0x40>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d111      	bne.n	80058ca <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 80058a6:	4b0c      	ldr	r3, [pc, #48]	@ (80058d8 <HAL_I2S_MspDeInit+0x44>)
 80058a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058aa:	4b0b      	ldr	r3, [pc, #44]	@ (80058d8 <HAL_I2S_MspDeInit+0x44>)
 80058ac:	490b      	ldr	r1, [pc, #44]	@ (80058dc <HAL_I2S_MspDeInit+0x48>)
 80058ae:	400a      	ands	r2, r1
 80058b0:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 80058b2:	23b0      	movs	r3, #176	@ 0xb0
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	4a0a      	ldr	r2, [pc, #40]	@ (80058e0 <HAL_I2S_MspDeInit+0x4c>)
 80058b8:	0019      	movs	r1, r3
 80058ba:	0010      	movs	r0, r2
 80058bc:	f004 fddc 	bl	800a478 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c4:	0018      	movs	r0, r3
 80058c6:	f004 fa25 	bl	8009d14 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 80058ca:	46c0      	nop			@ (mov r8, r8)
 80058cc:	46bd      	mov	sp, r7
 80058ce:	b002      	add	sp, #8
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	46c0      	nop			@ (mov r8, r8)
 80058d4:	40003800 	.word	0x40003800
 80058d8:	40021000 	.word	0x40021000
 80058dc:	ffffbfff 	.word	0xffffbfff
 80058e0:	50000400 	.word	0x50000400

080058e4 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  testDone = true;
 80058e8:	4b35      	ldr	r3, [pc, #212]	@ (80059c0 <SetTestDone+0xdc>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 80058ee:	23fa      	movs	r3, #250	@ 0xfa
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	0018      	movs	r0, r3
 80058f4:	f003 fcf8 	bl	80092e8 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 80058f8:	4b32      	ldr	r3, [pc, #200]	@ (80059c4 <SetTestDone+0xe0>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	2101      	movs	r1, #1
 80058fe:	0018      	movs	r0, r3
 8005900:	f004 fe9c 	bl	800a63c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8005904:	2380      	movs	r3, #128	@ 0x80
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	482e      	ldr	r0, [pc, #184]	@ (80059c4 <SetTestDone+0xe0>)
 800590a:	2201      	movs	r2, #1
 800590c:	0019      	movs	r1, r3
 800590e:	f004 fe95 	bl	800a63c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8005912:	2380      	movs	r3, #128	@ 0x80
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	482b      	ldr	r0, [pc, #172]	@ (80059c4 <SetTestDone+0xe0>)
 8005918:	2200      	movs	r2, #0
 800591a:	0019      	movs	r1, r3
 800591c:	f004 fe8e 	bl	800a63c <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 4000;
 8005920:	2380      	movs	r3, #128	@ 0x80
 8005922:	05db      	lsls	r3, r3, #23
 8005924:	22fa      	movs	r2, #250	@ 0xfa
 8005926:	0112      	lsls	r2, r2, #4
 8005928:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800592a:	2380      	movs	r3, #128	@ 0x80
 800592c:	05db      	lsls	r3, r3, #23
 800592e:	22fa      	movs	r2, #250	@ 0xfa
 8005930:	0112      	lsls	r2, r2, #4
 8005932:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 0;
 8005934:	2380      	movs	r3, #128	@ 0x80
 8005936:	05db      	lsls	r3, r3, #23
 8005938:	2200      	movs	r2, #0
 800593a:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 800593c:	4b22      	ldr	r3, [pc, #136]	@ (80059c8 <SetTestDone+0xe4>)
 800593e:	22fa      	movs	r2, #250	@ 0xfa
 8005940:	0112      	lsls	r2, r2, #4
 8005942:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8005944:	4b20      	ldr	r3, [pc, #128]	@ (80059c8 <SetTestDone+0xe4>)
 8005946:	22fa      	movs	r2, #250	@ 0xfa
 8005948:	0112      	lsls	r2, r2, #4
 800594a:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 0;
 800594c:	4b1e      	ldr	r3, [pc, #120]	@ (80059c8 <SetTestDone+0xe4>)
 800594e:	2200      	movs	r2, #0
 8005950:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(1000);
 8005952:	23fa      	movs	r3, #250	@ 0xfa
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	0018      	movs	r0, r3
 8005958:	f003 fcc6 	bl	80092e8 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 800595c:	4b19      	ldr	r3, [pc, #100]	@ (80059c4 <SetTestDone+0xe0>)
 800595e:	2201      	movs	r2, #1
 8005960:	2101      	movs	r1, #1
 8005962:	0018      	movs	r0, r3
 8005964:	f004 fe6a 	bl	800a63c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8005968:	2380      	movs	r3, #128	@ 0x80
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	4815      	ldr	r0, [pc, #84]	@ (80059c4 <SetTestDone+0xe0>)
 800596e:	2201      	movs	r2, #1
 8005970:	0019      	movs	r1, r3
 8005972:	f004 fe63 	bl	800a63c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005976:	2380      	movs	r3, #128	@ 0x80
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4812      	ldr	r0, [pc, #72]	@ (80059c4 <SetTestDone+0xe0>)
 800597c:	2201      	movs	r2, #1
 800597e:	0019      	movs	r1, r3
 8005980:	f004 fe5c 	bl	800a63c <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 4000;
 8005984:	2380      	movs	r3, #128	@ 0x80
 8005986:	05db      	lsls	r3, r3, #23
 8005988:	22fa      	movs	r2, #250	@ 0xfa
 800598a:	0112      	lsls	r2, r2, #4
 800598c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800598e:	2380      	movs	r3, #128	@ 0x80
 8005990:	05db      	lsls	r3, r3, #23
 8005992:	22fa      	movs	r2, #250	@ 0xfa
 8005994:	0112      	lsls	r2, r2, #4
 8005996:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8005998:	2380      	movs	r3, #128	@ 0x80
 800599a:	05db      	lsls	r3, r3, #23
 800599c:	22fa      	movs	r2, #250	@ 0xfa
 800599e:	0112      	lsls	r2, r2, #4
 80059a0:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 80059a2:	4b09      	ldr	r3, [pc, #36]	@ (80059c8 <SetTestDone+0xe4>)
 80059a4:	22fa      	movs	r2, #250	@ 0xfa
 80059a6:	0112      	lsls	r2, r2, #4
 80059a8:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 80059aa:	4b07      	ldr	r3, [pc, #28]	@ (80059c8 <SetTestDone+0xe4>)
 80059ac:	22fa      	movs	r2, #250	@ 0xfa
 80059ae:	0112      	lsls	r2, r2, #4
 80059b0:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 80059b2:	4b05      	ldr	r3, [pc, #20]	@ (80059c8 <SetTestDone+0xe4>)
 80059b4:	22fa      	movs	r2, #250	@ 0xfa
 80059b6:	0112      	lsls	r2, r2, #4
 80059b8:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 80059ba:	46c0      	nop			@ (mov r8, r8)
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20000cb8 	.word	0x20000cb8
 80059c4:	50000400 	.word	0x50000400
 80059c8:	40000400 	.word	0x40000400

080059cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80059d2:	f003 fc19 	bl	8009208 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80059d6:	f000 f849 	bl	8005a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80059da:	f7ff fbeb 	bl	80051b4 <MX_GPIO_Init>
  MX_DMA_Init();
 80059de:	f7ff fb5b 	bl	8005098 <MX_DMA_Init>
  MX_I2C1_Init();
 80059e2:	f7ff fd61 	bl	80054a8 <MX_I2C1_Init>
  MX_I2S2_Init();
 80059e6:	f7ff feb9 	bl	800575c <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80059ea:	f002 fec3 	bl	8008774 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80059ee:	f7ff fd9b 	bl	8005528 <MX_I2C2_Init>
  MX_TIM2_Init();
 80059f2:	f002 fd41 	bl	8008478 <MX_TIM2_Init>
  MX_TIM3_Init();
 80059f6:	f002 fdb3 	bl	8008560 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 80059fa:	f002 feef 	bl	80087dc <MX_USART4_UART_Init>
  MX_ADC_Init();
 80059fe:	f7ff fa99 	bl	8004f34 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8005a02:	f00f fd4d 	bl	80154a0 <MX_USB_DEVICE_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8005a06:	4a12      	ldr	r2, [pc, #72]	@ (8005a50 <main+0x84>)
 8005a08:	4b12      	ldr	r3, [pc, #72]	@ (8005a54 <main+0x88>)
 8005a0a:	0011      	movs	r1, r2
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	f7ff fccf 	bl	80053b0 <GPIO_InitPWMLEDs>
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 8005a12:	f003 fc5f 	bl	80092d4 <HAL_GetTick>
 8005a16:	0003      	movs	r3, r0
 8005a18:	22fa      	movs	r2, #250	@ 0xfa
 8005a1a:	0092      	lsls	r2, r2, #2
 8005a1c:	4694      	mov	ip, r2
 8005a1e:	4463      	add	r3, ip
 8005a20:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 8005a22:	2003      	movs	r0, #3
 8005a24:	f003 f8da 	bl	8008bdc <SetVerboseLevel>
  BinaryReleaseInfo();
 8005a28:	f003 f8f0 	bl	8008c0c <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a58 <main+0x8c>)
 8005a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8005a5c <main+0x90>)
 8005a30:	490b      	ldr	r1, [pc, #44]	@ (8005a60 <main+0x94>)
 8005a32:	480c      	ldr	r0, [pc, #48]	@ (8005a64 <main+0x98>)
 8005a34:	f7ff fb56 	bl	80050e4 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone){
 8005a38:	4b0b      	ldr	r3, [pc, #44]	@ (8005a68 <main+0x9c>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d004      	beq.n	8005a4a <main+0x7e>
      UpkeepGadget();
 8005a40:	f7ff fb85 	bl	800514e <UpkeepGadget>
      ESP_Upkeep();
 8005a44:	f7ff f80c 	bl	8004a60 <ESP_Upkeep>
 8005a48:	e7f6      	b.n	8005a38 <main+0x6c>
    }
    else{
      Gadget_Test();
 8005a4a:	f7ff fb79 	bl	8005140 <Gadget_Test>
    if(testDone){
 8005a4e:	e7f3      	b.n	8005a38 <main+0x6c>
 8005a50:	20002664 	.word	0x20002664
 8005a54:	20002624 	.word	0x20002624
 8005a58:	20000aa0 	.word	0x20000aa0
 8005a5c:	2000275c 	.word	0x2000275c
 8005a60:	20000c34 	.word	0x20000c34
 8005a64:	20000afc 	.word	0x20000afc
 8005a68:	20000cb8 	.word	0x20000cb8

08005a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a6c:	b590      	push	{r4, r7, lr}
 8005a6e:	b09d      	sub	sp, #116	@ 0x74
 8005a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a72:	2438      	movs	r4, #56	@ 0x38
 8005a74:	193b      	adds	r3, r7, r4
 8005a76:	0018      	movs	r0, r3
 8005a78:	2338      	movs	r3, #56	@ 0x38
 8005a7a:	001a      	movs	r2, r3
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	f010 fff1 	bl	8016a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a82:	2324      	movs	r3, #36	@ 0x24
 8005a84:	18fb      	adds	r3, r7, r3
 8005a86:	0018      	movs	r0, r3
 8005a88:	2314      	movs	r3, #20
 8005a8a:	001a      	movs	r2, r3
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	f010 ffe9 	bl	8016a64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a92:	003b      	movs	r3, r7
 8005a94:	0018      	movs	r0, r3
 8005a96:	2324      	movs	r3, #36	@ 0x24
 8005a98:	001a      	movs	r2, r3
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	f010 ffe2 	bl	8016a64 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005aa0:	4b29      	ldr	r3, [pc, #164]	@ (8005b48 <SystemClock_Config+0xdc>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a29      	ldr	r2, [pc, #164]	@ (8005b4c <SystemClock_Config+0xe0>)
 8005aa6:	401a      	ands	r2, r3
 8005aa8:	4b27      	ldr	r3, [pc, #156]	@ (8005b48 <SystemClock_Config+0xdc>)
 8005aaa:	2180      	movs	r1, #128	@ 0x80
 8005aac:	0109      	lsls	r1, r1, #4
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8005ab2:	0021      	movs	r1, r4
 8005ab4:	187b      	adds	r3, r7, r1
 8005ab6:	2222      	movs	r2, #34	@ 0x22
 8005ab8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005aba:	187b      	adds	r3, r7, r1
 8005abc:	2201      	movs	r2, #1
 8005abe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005ac0:	187b      	adds	r3, r7, r1
 8005ac2:	2210      	movs	r2, #16
 8005ac4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005ac6:	187b      	adds	r3, r7, r1
 8005ac8:	2201      	movs	r2, #1
 8005aca:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005acc:	187b      	adds	r3, r7, r1
 8005ace:	2200      	movs	r2, #0
 8005ad0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ad2:	187b      	adds	r3, r7, r1
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	f008 ff7f 	bl	800e9d8 <HAL_RCC_OscConfig>
 8005ada:	1e03      	subs	r3, r0, #0
 8005adc:	d001      	beq.n	8005ae2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8005ade:	f000 f837 	bl	8005b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ae2:	2124      	movs	r1, #36	@ 0x24
 8005ae4:	187b      	adds	r3, r7, r1
 8005ae6:	220f      	movs	r2, #15
 8005ae8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005aea:	187b      	adds	r3, r7, r1
 8005aec:	2201      	movs	r2, #1
 8005aee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005af0:	187b      	adds	r3, r7, r1
 8005af2:	2200      	movs	r2, #0
 8005af4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005af6:	187b      	adds	r3, r7, r1
 8005af8:	2200      	movs	r2, #0
 8005afa:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005afc:	187b      	adds	r3, r7, r1
 8005afe:	2200      	movs	r2, #0
 8005b00:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005b02:	187b      	adds	r3, r7, r1
 8005b04:	2100      	movs	r1, #0
 8005b06:	0018      	movs	r0, r3
 8005b08:	f009 fb3a 	bl	800f180 <HAL_RCC_ClockConfig>
 8005b0c:	1e03      	subs	r3, r0, #0
 8005b0e:	d001      	beq.n	8005b14 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8005b10:	f000 f81e 	bl	8005b50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8005b14:	003b      	movs	r3, r7
 8005b16:	2249      	movs	r2, #73	@ 0x49
 8005b18:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005b1a:	003b      	movs	r3, r7
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005b20:	003b      	movs	r3, r7
 8005b22:	2200      	movs	r2, #0
 8005b24:	615a      	str	r2, [r3, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8005b26:	003b      	movs	r3, r7
 8005b28:	2280      	movs	r2, #128	@ 0x80
 8005b2a:	04d2      	lsls	r2, r2, #19
 8005b2c:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b2e:	003b      	movs	r3, r7
 8005b30:	0018      	movs	r0, r3
 8005b32:	f009 fd49 	bl	800f5c8 <HAL_RCCEx_PeriphCLKConfig>
 8005b36:	1e03      	subs	r3, r0, #0
 8005b38:	d001      	beq.n	8005b3e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8005b3a:	f000 f809 	bl	8005b50 <Error_Handler>
  }
}
 8005b3e:	46c0      	nop			@ (mov r8, r8)
 8005b40:	46bd      	mov	sp, r7
 8005b42:	b01d      	add	sp, #116	@ 0x74
 8005b44:	bd90      	pop	{r4, r7, pc}
 8005b46:	46c0      	nop			@ (mov r8, r8)
 8005b48:	40007000 	.word	0x40007000
 8005b4c:	ffffe7ff 	.word	0xffffe7ff

08005b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b54:	b672      	cpsid	i
}
 8005b56:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b58:	46c0      	nop			@ (mov r8, r8)
 8005b5a:	e7fd      	b.n	8005b58 <Error_Handler+0x8>

08005b5c <HT_StartMeasurementWrapper>:
static MeasurementTested MeasTest;
static MeasurementState MeasState = MEAS_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;
static uint32_t MeasStamp;

static void HT_StartMeasurementWrapper(void) {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8005b60:	f7ff fc83 	bl	800546a <HT_StartMeasurement>
}
 8005b64:	46c0      	nop			@ (mov r8, r8)
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8005b70:	4a04      	ldr	r2, [pc, #16]	@ (8005b84 <HT_IsMeasurementDoneWrapper+0x18>)
 8005b72:	4b05      	ldr	r3, [pc, #20]	@ (8005b88 <HT_IsMeasurementDoneWrapper+0x1c>)
 8005b74:	0011      	movs	r1, r2
 8005b76:	0018      	movs	r0, r3
 8005b78:	f7ff fc7e 	bl	8005478 <HT_GetMeasurementValues>
 8005b7c:	0003      	movs	r3, r0
}
 8005b7e:	0018      	movs	r0, r3
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	20000cc0 	.word	0x20000cc0
 8005b88:	20000cbc 	.word	0x20000cbc

08005b8c <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8005b90:	f7ff faf3 	bl	800517a <Gas_StartMeasurement>
}
 8005b94:	46c0      	nop			@ (mov r8, r8)
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8005ba0:	4b03      	ldr	r3, [pc, #12]	@ (8005bb0 <VOC_IsMeasurementDoneWrapper+0x14>)
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	f7ff faf0 	bl	8005188 <Gas_GetMeasurementValues>
 8005ba8:	0003      	movs	r3, r0
}
 8005baa:	0018      	movs	r0, r3
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	20000cc4 	.word	0x20000cc4

08005bb4 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
}
 8005bb8:	46c0      	nop			@ (mov r8, r8)
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	af00      	add	r7, sp, #0
  return true;
 8005bc2:	2301      	movs	r3, #1
}
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128); // Dont init like this.
 8005bce:	23fa      	movs	r3, #250	@ 0xfa
 8005bd0:	015b      	lsls	r3, r3, #5
 8005bd2:	2180      	movs	r1, #128	@ 0x80
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f000 fbab 	bl	8006330 <MIC_Start>
}
 8005bda:	46c0      	nop			@ (mov r8, r8)
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 8005be4:	f000 fe8a 	bl	80068fc <MIC_MeasurementDone>
 8005be8:	0003      	movs	r3, r0
}
 8005bea:	0018      	movs	r0, r3
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <Meas_TestStart>:
void Meas_TestStart(){
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  MIC_StartMeasurementWrapper();
 8005bf4:	f7ff ffe9 	bl	8005bca <MIC_StartMeasurementWrapper>
}
 8005bf8:	46c0      	nop			@ (mov r8, r8)
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <MIC_IsTestMeasurementDoneWrapper>:
static bool MIC_IsTestMeasurementDoneWrapper(void) {
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8005c02:	f000 fe9f 	bl	8006944 <MIC_TestMeasurementDone>
 8005c06:	0003      	movs	r3, r0
}
 8005c08:	0018      	movs	r0, r3
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <testInit>:
void testInit(){
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8005c14:	4b07      	ldr	r3, [pc, #28]	@ (8005c34 <testInit+0x24>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 8005c1a:	4b06      	ldr	r3, [pc, #24]	@ (8005c34 <testInit+0x24>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 8005c20:	4b04      	ldr	r3, [pc, #16]	@ (8005c34 <testInit+0x24>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 8005c26:	4b03      	ldr	r3, [pc, #12]	@ (8005c34 <testInit+0x24>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	705a      	strb	r2, [r3, #1]
}
 8005c2c:	46c0      	nop			@ (mov r8, r8)
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	46c0      	nop			@ (mov r8, r8)
 8005c34:	20000d10 	.word	0x20000d10

08005c38 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8005c38:	b5b0      	push	{r4, r5, r7, lr}
 8005c3a:	b096      	sub	sp, #88	@ 0x58
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 8005c44:	4b84      	ldr	r3, [pc, #528]	@ (8005e58 <Meas_Init+0x220>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	701a      	strb	r2, [r3, #0]
  testInit();
 8005c4a:	f7ff ffe1 	bl	8005c10 <testInit>
  batteryInit(ADC_HANDLER);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	0018      	movs	r0, r3
 8005c52:	f7fd fc7b 	bl	800354c <batteryInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8005c56:	4b81      	ldr	r3, [pc, #516]	@ (8005e5c <Meas_Init+0x224>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d103      	bne.n	8005c66 <Meas_Init+0x2e>
 8005c5e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e5c <Meas_Init+0x224>)
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d072      	beq.n	8005d4c <Meas_Init+0x114>
    I2CSensors_Init(sensorI2C);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f7ff f8f1 	bl	8004e50 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8005c6e:	f7ff fc13 	bl	8005498 <HT_DeviceConnected>
 8005c72:	0003      	movs	r3, r0
 8005c74:	001a      	movs	r2, r3
 8005c76:	2301      	movs	r3, #1
 8005c78:	4053      	eors	r3, r2
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00c      	beq.n	8005c9a <Meas_Init+0x62>
       Error("Humidity / Temperature sensor NOT connected!");
 8005c80:	4a77      	ldr	r2, [pc, #476]	@ (8005e60 <Meas_Init+0x228>)
 8005c82:	4b78      	ldr	r3, [pc, #480]	@ (8005e64 <Meas_Init+0x22c>)
 8005c84:	0019      	movs	r1, r3
 8005c86:	2001      	movs	r0, #1
 8005c88:	f002 ff2c 	bl	8008ae4 <CreateLine>
       MeasTest.HT_Tested = false;
 8005c8c:	4b76      	ldr	r3, [pc, #472]	@ (8005e68 <Meas_Init+0x230>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 8005c92:	4b72      	ldr	r3, [pc, #456]	@ (8005e5c <Meas_Init+0x224>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	701a      	strb	r2, [r3, #0]
 8005c98:	e008      	b.n	8005cac <Meas_Init+0x74>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
      MeasTest.HT_Tested = true;
 8005c9a:	4b73      	ldr	r3, [pc, #460]	@ (8005e68 <Meas_Init+0x230>)
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8005ca0:	4a72      	ldr	r2, [pc, #456]	@ (8005e6c <Meas_Init+0x234>)
 8005ca2:	4b73      	ldr	r3, [pc, #460]	@ (8005e70 <Meas_Init+0x238>)
 8005ca4:	0019      	movs	r1, r3
 8005ca6:	2003      	movs	r0, #3
 8005ca8:	f002 ff1c 	bl	8008ae4 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 8005cac:	f7ff fa79 	bl	80051a2 <Gas_DeviceConnected>
 8005cb0:	0003      	movs	r3, r0
 8005cb2:	001a      	movs	r2, r3
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	4053      	eors	r3, r2
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00c      	beq.n	8005cd8 <Meas_Init+0xa0>
      MeasTest.VOC_Tested = false;
 8005cbe:	4b6a      	ldr	r3, [pc, #424]	@ (8005e68 <Meas_Init+0x230>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8005cc4:	4a6b      	ldr	r2, [pc, #428]	@ (8005e74 <Meas_Init+0x23c>)
 8005cc6:	4b67      	ldr	r3, [pc, #412]	@ (8005e64 <Meas_Init+0x22c>)
 8005cc8:	0019      	movs	r1, r3
 8005cca:	2001      	movs	r0, #1
 8005ccc:	f002 ff0a 	bl	8008ae4 <CreateLine>
       // SGP Device is NOT connected, turning led on RED.
//       HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
//       HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//       HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
       MeasEnabled.VOC_measurementEnabled = false;
 8005cd0:	4b62      	ldr	r3, [pc, #392]	@ (8005e5c <Meas_Init+0x224>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	705a      	strb	r2, [r3, #1]
 8005cd6:	e008      	b.n	8005cea <Meas_Init+0xb2>
    }else{
      MeasTest.VOC_Tested = true;
 8005cd8:	4b63      	ldr	r3, [pc, #396]	@ (8005e68 <Meas_Init+0x230>)
 8005cda:	2201      	movs	r2, #1
 8005cdc:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8005cde:	4a66      	ldr	r2, [pc, #408]	@ (8005e78 <Meas_Init+0x240>)
 8005ce0:	4b63      	ldr	r3, [pc, #396]	@ (8005e70 <Meas_Init+0x238>)
 8005ce2:	0019      	movs	r1, r3
 8005ce4:	2003      	movs	r0, #3
 8005ce6:	f002 fefd 	bl	8008ae4 <CreateLine>
      // HT Device is connected, turning led on GREEN.
//      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
//      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8005cea:	4b5f      	ldr	r3, [pc, #380]	@ (8005e68 <Meas_Init+0x230>)
 8005cec:	785b      	ldrb	r3, [r3, #1]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d018      	beq.n	8005d24 <Meas_Init+0xec>
 8005cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8005e68 <Meas_Init+0x230>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d014      	beq.n	8005d24 <Meas_Init+0xec>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8005cfa:	4b60      	ldr	r3, [pc, #384]	@ (8005e7c <Meas_Init+0x244>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	2101      	movs	r1, #1
 8005d00:	0018      	movs	r0, r3
 8005d02:	f004 fc9b 	bl	800a63c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8005d06:	2380      	movs	r3, #128	@ 0x80
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	485c      	ldr	r0, [pc, #368]	@ (8005e7c <Meas_Init+0x244>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	0019      	movs	r1, r3
 8005d10:	f004 fc94 	bl	800a63c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005d14:	2380      	movs	r3, #128	@ 0x80
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4858      	ldr	r0, [pc, #352]	@ (8005e7c <Meas_Init+0x244>)
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	0019      	movs	r1, r3
 8005d1e:	f004 fc8d 	bl	800a63c <HAL_GPIO_WritePin>
 8005d22:	e013      	b.n	8005d4c <Meas_Init+0x114>
    }
    else{
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8005d24:	4b55      	ldr	r3, [pc, #340]	@ (8005e7c <Meas_Init+0x244>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	2101      	movs	r1, #1
 8005d2a:	0018      	movs	r0, r3
 8005d2c:	f004 fc86 	bl	800a63c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8005d30:	2380      	movs	r3, #128	@ 0x80
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	4851      	ldr	r0, [pc, #324]	@ (8005e7c <Meas_Init+0x244>)
 8005d36:	2201      	movs	r2, #1
 8005d38:	0019      	movs	r1, r3
 8005d3a:	f004 fc7f 	bl	800a63c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005d3e:	2380      	movs	r3, #128	@ 0x80
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	484e      	ldr	r0, [pc, #312]	@ (8005e7c <Meas_Init+0x244>)
 8005d44:	2201      	movs	r2, #1
 8005d46:	0019      	movs	r1, r3
 8005d48:	f004 fc78 	bl	800a63c <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8005d4c:	4b43      	ldr	r3, [pc, #268]	@ (8005e5c <Meas_Init+0x224>)
 8005d4e:	78db      	ldrb	r3, [r3, #3]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <Meas_Init+0x128>
    MIC_Init(micI2s);
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	0018      	movs	r0, r3
 8005d58:	f000 fa76 	bl	8006248 <MIC_Init>
    Meas_TestStart();
 8005d5c:	f7ff ff48 	bl	8005bf0 <Meas_TestStart>
  }
  uint8_t offset = 0;
 8005d60:	2557      	movs	r5, #87	@ 0x57
 8005d62:	197b      	adds	r3, r7, r5
 8005d64:	2200      	movs	r2, #0
 8005d66:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8005d68:	197b      	adds	r3, r7, r5
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	197a      	adds	r2, r7, r5
 8005d6e:	1c59      	adds	r1, r3, #1
 8005d70:	7011      	strb	r1, [r2, #0]
 8005d72:	4a3a      	ldr	r2, [pc, #232]	@ (8005e5c <Meas_Init+0x224>)
 8005d74:	7814      	ldrb	r4, [r2, #0]
 8005d76:	4a42      	ldr	r2, [pc, #264]	@ (8005e80 <Meas_Init+0x248>)
 8005d78:	0119      	lsls	r1, r3, #4
 8005d7a:	4842      	ldr	r0, [pc, #264]	@ (8005e84 <Meas_Init+0x24c>)
 8005d7c:	5088      	str	r0, [r1, r2]
 8005d7e:	4940      	ldr	r1, [pc, #256]	@ (8005e80 <Meas_Init+0x248>)
 8005d80:	011a      	lsls	r2, r3, #4
 8005d82:	188a      	adds	r2, r1, r2
 8005d84:	3204      	adds	r2, #4
 8005d86:	4940      	ldr	r1, [pc, #256]	@ (8005e88 <Meas_Init+0x250>)
 8005d88:	6011      	str	r1, [r2, #0]
 8005d8a:	493d      	ldr	r1, [pc, #244]	@ (8005e80 <Meas_Init+0x248>)
 8005d8c:	011a      	lsls	r2, r3, #4
 8005d8e:	188a      	adds	r2, r1, r2
 8005d90:	3208      	adds	r2, #8
 8005d92:	493e      	ldr	r1, [pc, #248]	@ (8005e8c <Meas_Init+0x254>)
 8005d94:	6011      	str	r1, [r2, #0]
 8005d96:	4a3a      	ldr	r2, [pc, #232]	@ (8005e80 <Meas_Init+0x248>)
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	18d3      	adds	r3, r2, r3
 8005d9c:	330c      	adds	r3, #12
 8005d9e:	1c22      	adds	r2, r4, #0
 8005da0:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8005da2:	197b      	adds	r3, r7, r5
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	197a      	adds	r2, r7, r5
 8005da8:	1c59      	adds	r1, r3, #1
 8005daa:	7011      	strb	r1, [r2, #0]
 8005dac:	4a2b      	ldr	r2, [pc, #172]	@ (8005e5c <Meas_Init+0x224>)
 8005dae:	7854      	ldrb	r4, [r2, #1]
 8005db0:	4a33      	ldr	r2, [pc, #204]	@ (8005e80 <Meas_Init+0x248>)
 8005db2:	0119      	lsls	r1, r3, #4
 8005db4:	4836      	ldr	r0, [pc, #216]	@ (8005e90 <Meas_Init+0x258>)
 8005db6:	5088      	str	r0, [r1, r2]
 8005db8:	4931      	ldr	r1, [pc, #196]	@ (8005e80 <Meas_Init+0x248>)
 8005dba:	011a      	lsls	r2, r3, #4
 8005dbc:	188a      	adds	r2, r1, r2
 8005dbe:	3204      	adds	r2, #4
 8005dc0:	4934      	ldr	r1, [pc, #208]	@ (8005e94 <Meas_Init+0x25c>)
 8005dc2:	6011      	str	r1, [r2, #0]
 8005dc4:	492e      	ldr	r1, [pc, #184]	@ (8005e80 <Meas_Init+0x248>)
 8005dc6:	011a      	lsls	r2, r3, #4
 8005dc8:	188a      	adds	r2, r1, r2
 8005dca:	3208      	adds	r2, #8
 8005dcc:	4932      	ldr	r1, [pc, #200]	@ (8005e98 <Meas_Init+0x260>)
 8005dce:	6011      	str	r1, [r2, #0]
 8005dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8005e80 <Meas_Init+0x248>)
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	18d3      	adds	r3, r2, r3
 8005dd6:	330c      	adds	r3, #12
 8005dd8:	1c22      	adds	r2, r4, #0
 8005dda:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8005ddc:	197b      	adds	r3, r7, r5
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	197a      	adds	r2, r7, r5
 8005de2:	1c59      	adds	r1, r3, #1
 8005de4:	7011      	strb	r1, [r2, #0]
 8005de6:	4a1d      	ldr	r2, [pc, #116]	@ (8005e5c <Meas_Init+0x224>)
 8005de8:	7894      	ldrb	r4, [r2, #2]
 8005dea:	4a25      	ldr	r2, [pc, #148]	@ (8005e80 <Meas_Init+0x248>)
 8005dec:	0119      	lsls	r1, r3, #4
 8005dee:	482b      	ldr	r0, [pc, #172]	@ (8005e9c <Meas_Init+0x264>)
 8005df0:	5088      	str	r0, [r1, r2]
 8005df2:	4923      	ldr	r1, [pc, #140]	@ (8005e80 <Meas_Init+0x248>)
 8005df4:	011a      	lsls	r2, r3, #4
 8005df6:	188a      	adds	r2, r1, r2
 8005df8:	3204      	adds	r2, #4
 8005dfa:	4929      	ldr	r1, [pc, #164]	@ (8005ea0 <Meas_Init+0x268>)
 8005dfc:	6011      	str	r1, [r2, #0]
 8005dfe:	4920      	ldr	r1, [pc, #128]	@ (8005e80 <Meas_Init+0x248>)
 8005e00:	011a      	lsls	r2, r3, #4
 8005e02:	188a      	adds	r2, r1, r2
 8005e04:	3208      	adds	r2, #8
 8005e06:	4927      	ldr	r1, [pc, #156]	@ (8005ea4 <Meas_Init+0x26c>)
 8005e08:	6011      	str	r1, [r2, #0]
 8005e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8005e80 <Meas_Init+0x248>)
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	18d3      	adds	r3, r2, r3
 8005e10:	330c      	adds	r3, #12
 8005e12:	1c22      	adds	r2, r4, #0
 8005e14:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
 8005e16:	197b      	adds	r3, r7, r5
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	197a      	adds	r2, r7, r5
 8005e1c:	1c59      	adds	r1, r3, #1
 8005e1e:	7011      	strb	r1, [r2, #0]
 8005e20:	4a0e      	ldr	r2, [pc, #56]	@ (8005e5c <Meas_Init+0x224>)
 8005e22:	78d4      	ldrb	r4, [r2, #3]
 8005e24:	4a16      	ldr	r2, [pc, #88]	@ (8005e80 <Meas_Init+0x248>)
 8005e26:	0119      	lsls	r1, r3, #4
 8005e28:	481f      	ldr	r0, [pc, #124]	@ (8005ea8 <Meas_Init+0x270>)
 8005e2a:	5088      	str	r0, [r1, r2]
 8005e2c:	4914      	ldr	r1, [pc, #80]	@ (8005e80 <Meas_Init+0x248>)
 8005e2e:	011a      	lsls	r2, r3, #4
 8005e30:	188a      	adds	r2, r1, r2
 8005e32:	3204      	adds	r2, #4
 8005e34:	491d      	ldr	r1, [pc, #116]	@ (8005eac <Meas_Init+0x274>)
 8005e36:	6011      	str	r1, [r2, #0]
 8005e38:	4911      	ldr	r1, [pc, #68]	@ (8005e80 <Meas_Init+0x248>)
 8005e3a:	011a      	lsls	r2, r3, #4
 8005e3c:	188a      	adds	r2, r1, r2
 8005e3e:	3208      	adds	r2, #8
 8005e40:	491b      	ldr	r1, [pc, #108]	@ (8005eb0 <Meas_Init+0x278>)
 8005e42:	6011      	str	r1, [r2, #0]
 8005e44:	4a0e      	ldr	r2, [pc, #56]	@ (8005e80 <Meas_Init+0x248>)
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	18d3      	adds	r3, r2, r3
 8005e4a:	330c      	adds	r3, #12
 8005e4c:	1c22      	adds	r2, r4, #0
 8005e4e:	701a      	strb	r2, [r3, #0]
}
 8005e50:	46c0      	nop			@ (mov r8, r8)
 8005e52:	46bd      	mov	sp, r7
 8005e54:	b016      	add	sp, #88	@ 0x58
 8005e56:	bdb0      	pop	{r4, r5, r7, pc}
 8005e58:	20000d14 	.word	0x20000d14
 8005e5c:	20000d0c 	.word	0x20000d0c
 8005e60:	08019d40 	.word	0x08019d40
 8005e64:	08019d70 	.word	0x08019d70
 8005e68:	20000d10 	.word	0x20000d10
 8005e6c:	08019d74 	.word	0x08019d74
 8005e70:	08019da0 	.word	0x08019da0
 8005e74:	08019da4 	.word	0x08019da4
 8005e78:	08019dc0 	.word	0x08019dc0
 8005e7c:	50000400 	.word	0x50000400
 8005e80:	20000ccc 	.word	0x20000ccc
 8005e84:	08005b5d 	.word	0x08005b5d
 8005e88:	08005b6d 	.word	0x08005b6d
 8005e8c:	20000cc8 	.word	0x20000cc8
 8005e90:	08005b8d 	.word	0x08005b8d
 8005e94:	08005b9d 	.word	0x08005b9d
 8005e98:	20000cc9 	.word	0x20000cc9
 8005e9c:	08005bb5 	.word	0x08005bb5
 8005ea0:	08005bbf 	.word	0x08005bbf
 8005ea4:	20000cca 	.word	0x20000cca
 8005ea8:	08005bcb 	.word	0x08005bcb
 8005eac:	08005be1 	.word	0x08005be1
 8005eb0:	20000ccb 	.word	0x20000ccb

08005eb4 <StartMeasurements>:

void StartMeasurements(void) {
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005eb8:	4b10      	ldr	r3, [pc, #64]	@ (8005efc <StartMeasurements+0x48>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
 8005ebe:	e015      	b.n	8005eec <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8005ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8005efc <StartMeasurements+0x48>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	4a0e      	ldr	r2, [pc, #56]	@ (8005f00 <StartMeasurements+0x4c>)
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	18d3      	adds	r3, r2, r3
 8005eca:	330c      	adds	r3, #12
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d006      	beq.n	8005ee0 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8005efc <StartMeasurements+0x48>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	001a      	movs	r2, r3
 8005ed8:	4b09      	ldr	r3, [pc, #36]	@ (8005f00 <StartMeasurements+0x4c>)
 8005eda:	0112      	lsls	r2, r2, #4
 8005edc:	58d3      	ldr	r3, [r2, r3]
 8005ede:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005ee0:	4b06      	ldr	r3, [pc, #24]	@ (8005efc <StartMeasurements+0x48>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	4b04      	ldr	r3, [pc, #16]	@ (8005efc <StartMeasurements+0x48>)
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	4b03      	ldr	r3, [pc, #12]	@ (8005efc <StartMeasurements+0x48>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d9e5      	bls.n	8005ec0 <StartMeasurements+0xc>
    }
  }
}
 8005ef4:	46c0      	nop			@ (mov r8, r8)
 8005ef6:	46c0      	nop			@ (mov r8, r8)
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	20000d15 	.word	0x20000d15
 8005f00:	20000ccc 	.word	0x20000ccc

08005f04 <ResetMeasurements>:

void ResetMeasurements(void) {
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8005f08:	4b0b      	ldr	r3, [pc, #44]	@ (8005f38 <ResetMeasurements+0x34>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8005f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f38 <ResetMeasurements+0x34>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8005f14:	4b08      	ldr	r3, [pc, #32]	@ (8005f38 <ResetMeasurements+0x34>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8005f1a:	4b07      	ldr	r3, [pc, #28]	@ (8005f38 <ResetMeasurements+0x34>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8005f20:	4b05      	ldr	r3, [pc, #20]	@ (8005f38 <ResetMeasurements+0x34>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8005f26:	4b04      	ldr	r3, [pc, #16]	@ (8005f38 <ResetMeasurements+0x34>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8005f2c:	4b02      	ldr	r3, [pc, #8]	@ (8005f38 <ResetMeasurements+0x34>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	73da      	strb	r2, [r3, #15]
}
 8005f32:	46c0      	nop			@ (mov r8, r8)
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	20000cbc 	.word	0x20000cbc

08005f3c <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005f40:	4b18      	ldr	r3, [pc, #96]	@ (8005fa4 <MeasurementsCompleted+0x68>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	e024      	b.n	8005f92 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8005f48:	4b16      	ldr	r3, [pc, #88]	@ (8005fa4 <MeasurementsCompleted+0x68>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	4a16      	ldr	r2, [pc, #88]	@ (8005fa8 <MeasurementsCompleted+0x6c>)
 8005f4e:	011b      	lsls	r3, r3, #4
 8005f50:	18d3      	adds	r3, r2, r3
 8005f52:	330c      	adds	r3, #12
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d015      	beq.n	8005f86 <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8005f5a:	4b12      	ldr	r3, [pc, #72]	@ (8005fa4 <MeasurementsCompleted+0x68>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	4a12      	ldr	r2, [pc, #72]	@ (8005fa8 <MeasurementsCompleted+0x6c>)
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	18d3      	adds	r3, r2, r3
 8005f64:	3304      	adds	r3, #4
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4798      	blx	r3
 8005f6a:	1e03      	subs	r3, r0, #0
 8005f6c:	d009      	beq.n	8005f82 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8005f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa4 <MeasurementsCompleted+0x68>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	4a0d      	ldr	r2, [pc, #52]	@ (8005fa8 <MeasurementsCompleted+0x6c>)
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	18d3      	adds	r3, r2, r3
 8005f78:	3308      	adds	r3, #8
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	e001      	b.n	8005f86 <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8005f82:	2300      	movs	r3, #0
 8005f84:	e00a      	b.n	8005f9c <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005f86:	4b07      	ldr	r3, [pc, #28]	@ (8005fa4 <MeasurementsCompleted+0x68>)
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	4b05      	ldr	r3, [pc, #20]	@ (8005fa4 <MeasurementsCompleted+0x68>)
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	4b04      	ldr	r3, [pc, #16]	@ (8005fa4 <MeasurementsCompleted+0x68>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d9d6      	bls.n	8005f48 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8005f9a:	2301      	movs	r3, #1
}
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	46c0      	nop			@ (mov r8, r8)
 8005fa4:	20000d15 	.word	0x20000d15
 8005fa8:	20000ccc 	.word	0x20000ccc

08005fac <Meas_Upkeep>:

void Meas_Upkeep(void) {
 8005fac:	b5b0      	push	{r4, r5, r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af04      	add	r7, sp, #16
  switch(MeasState) {
 8005fb2:	4b42      	ldr	r3, [pc, #264]	@ (80060bc <Meas_Upkeep+0x110>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b06      	cmp	r3, #6
 8005fb8:	d900      	bls.n	8005fbc <Meas_Upkeep+0x10>
 8005fba:	e075      	b.n	80060a8 <Meas_Upkeep+0xfc>
 8005fbc:	009a      	lsls	r2, r3, #2
 8005fbe:	4b40      	ldr	r3, [pc, #256]	@ (80060c0 <Meas_Upkeep+0x114>)
 8005fc0:	18d3      	adds	r3, r2, r3
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:
    Debug("Measurements are turned off.");
 8005fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80060c4 <Meas_Upkeep+0x118>)
 8005fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80060c8 <Meas_Upkeep+0x11c>)
 8005fca:	0019      	movs	r1, r3
 8005fcc:	2003      	movs	r0, #3
 8005fce:	f002 fd89 	bl	8008ae4 <CreateLine>
    break;
 8005fd2:	e070      	b.n	80060b6 <Meas_Upkeep+0x10a>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8005fd4:	f7ff ff96 	bl	8005f04 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8005fd8:	4b38      	ldr	r3, [pc, #224]	@ (80060bc <Meas_Upkeep+0x110>)
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]
    break;
 8005fde:	e06a      	b.n	80060b6 <Meas_Upkeep+0x10a>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8005fe0:	f7ff ff68 	bl	8005eb4 <StartMeasurements>
    TIM2 -> CCR3 = 3000;
 8005fe4:	2380      	movs	r3, #128	@ 0x80
 8005fe6:	05db      	lsls	r3, r3, #23
 8005fe8:	4a38      	ldr	r2, [pc, #224]	@ (80060cc <Meas_Upkeep+0x120>)
 8005fea:	63da      	str	r2, [r3, #60]	@ 0x3c
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8005fec:	4b33      	ldr	r3, [pc, #204]	@ (80060bc <Meas_Upkeep+0x110>)
 8005fee:	2202      	movs	r2, #2
 8005ff0:	701a      	strb	r2, [r3, #0]
   break;
 8005ff2:	e060      	b.n	80060b6 <Meas_Upkeep+0x10a>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8005ff4:	f7ff ffa2 	bl	8005f3c <MeasurementsCompleted>
 8005ff8:	1e03      	subs	r3, r0, #0
 8005ffa:	d059      	beq.n	80060b0 <Meas_Upkeep+0x104>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8005ffc:	4b2f      	ldr	r3, [pc, #188]	@ (80060bc <Meas_Upkeep+0x110>)
 8005ffe:	2203      	movs	r2, #3
 8006000:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006002:	e055      	b.n	80060b0 <Meas_Upkeep+0x104>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8006004:	4a32      	ldr	r2, [pc, #200]	@ (80060d0 <Meas_Upkeep+0x124>)
 8006006:	4b30      	ldr	r3, [pc, #192]	@ (80060c8 <Meas_Upkeep+0x11c>)
 8006008:	0019      	movs	r1, r3
 800600a:	2003      	movs	r0, #3
 800600c:	f002 fd6a 	bl	8008ae4 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8006010:	4b30      	ldr	r3, [pc, #192]	@ (80060d4 <Meas_Upkeep+0x128>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	4a30      	ldr	r2, [pc, #192]	@ (80060d8 <Meas_Upkeep+0x12c>)
 8006016:	492c      	ldr	r1, [pc, #176]	@ (80060c8 <Meas_Upkeep+0x11c>)
 8006018:	2003      	movs	r0, #3
 800601a:	f002 fd63 	bl	8008ae4 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 800601e:	4b2d      	ldr	r3, [pc, #180]	@ (80060d4 <Meas_Upkeep+0x128>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	1c18      	adds	r0, r3, #0
 8006024:	f7fd f99c 	bl	8003360 <__aeabi_f2d>
 8006028:	0004      	movs	r4, r0
 800602a:	000d      	movs	r5, r1
 800602c:	4b29      	ldr	r3, [pc, #164]	@ (80060d4 <Meas_Upkeep+0x128>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	1c18      	adds	r0, r3, #0
 8006032:	f7fd f995 	bl	8003360 <__aeabi_f2d>
 8006036:	0002      	movs	r2, r0
 8006038:	000b      	movs	r3, r1
 800603a:	4828      	ldr	r0, [pc, #160]	@ (80060dc <Meas_Upkeep+0x130>)
 800603c:	4922      	ldr	r1, [pc, #136]	@ (80060c8 <Meas_Upkeep+0x11c>)
 800603e:	9202      	str	r2, [sp, #8]
 8006040:	9303      	str	r3, [sp, #12]
 8006042:	9400      	str	r4, [sp, #0]
 8006044:	9501      	str	r5, [sp, #4]
 8006046:	0002      	movs	r2, r0
 8006048:	2003      	movs	r0, #3
 800604a:	f002 fd4b 	bl	8008ae4 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 800604e:	4b21      	ldr	r3, [pc, #132]	@ (80060d4 <Meas_Upkeep+0x128>)
 8006050:	6858      	ldr	r0, [r3, #4]
 8006052:	4b20      	ldr	r3, [pc, #128]	@ (80060d4 <Meas_Upkeep+0x128>)
 8006054:	6819      	ldr	r1, [r3, #0]
 8006056:	4b1f      	ldr	r3, [pc, #124]	@ (80060d4 <Meas_Upkeep+0x128>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	b29b      	uxth	r3, r3
 800605c:	001a      	movs	r2, r3
 800605e:	f7fd fb27 	bl	80036b0 <setMeasurement>
    checkCharges();
 8006062:	f7fd fa81 	bl	8003568 <checkCharges>
    TIM2 -> CCR3 = 4000;
 8006066:	2380      	movs	r3, #128	@ 0x80
 8006068:	05db      	lsls	r3, r3, #23
 800606a:	22fa      	movs	r2, #250	@ 0xfa
 800606c:	0112      	lsls	r2, r2, #4
 800606e:	63da      	str	r2, [r3, #60]	@ 0x3c
    MeasStamp = HAL_GetTick() + 10000;
 8006070:	f003 f930 	bl	80092d4 <HAL_GetTick>
 8006074:	0003      	movs	r3, r0
 8006076:	4a1a      	ldr	r2, [pc, #104]	@ (80060e0 <Meas_Upkeep+0x134>)
 8006078:	189a      	adds	r2, r3, r2
 800607a:	4b1a      	ldr	r3, [pc, #104]	@ (80060e4 <Meas_Upkeep+0x138>)
 800607c:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 800607e:	4b0f      	ldr	r3, [pc, #60]	@ (80060bc <Meas_Upkeep+0x110>)
 8006080:	2206      	movs	r2, #6
 8006082:	701a      	strb	r2, [r3, #0]
    break;
 8006084:	e017      	b.n	80060b6 <Meas_Upkeep+0x10a>

  case MEAS_STATE_WAIT:
    Debug("Waiting until next loop");
 8006086:	4a18      	ldr	r2, [pc, #96]	@ (80060e8 <Meas_Upkeep+0x13c>)
 8006088:	4b0f      	ldr	r3, [pc, #60]	@ (80060c8 <Meas_Upkeep+0x11c>)
 800608a:	0019      	movs	r1, r3
 800608c:	2003      	movs	r0, #3
 800608e:	f002 fd29 	bl	8008ae4 <CreateLine>
    if(TimestampIsReached(MeasStamp)){
 8006092:	4b14      	ldr	r3, [pc, #80]	@ (80060e4 <Meas_Upkeep+0x138>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	0018      	movs	r0, r3
 8006098:	f002 fcce 	bl	8008a38 <TimestampIsReached>
 800609c:	1e03      	subs	r3, r0, #0
 800609e:	d009      	beq.n	80060b4 <Meas_Upkeep+0x108>
      MeasState = MEAS_STATE_INIT;
 80060a0:	4b06      	ldr	r3, [pc, #24]	@ (80060bc <Meas_Upkeep+0x110>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	701a      	strb	r2, [r3, #0]
    }

    break;
 80060a6:	e005      	b.n	80060b4 <Meas_Upkeep+0x108>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 80060a8:	4b04      	ldr	r3, [pc, #16]	@ (80060bc <Meas_Upkeep+0x110>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	701a      	strb	r2, [r3, #0]
    break;
 80060ae:	e002      	b.n	80060b6 <Meas_Upkeep+0x10a>
    break;
 80060b0:	46c0      	nop			@ (mov r8, r8)
 80060b2:	e000      	b.n	80060b6 <Meas_Upkeep+0x10a>
    break;
 80060b4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80060b6:	46c0      	nop			@ (mov r8, r8)
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bdb0      	pop	{r4, r5, r7, pc}
 80060bc:	20000d14 	.word	0x20000d14
 80060c0:	0801a3f4 	.word	0x0801a3f4
 80060c4:	08019dd8 	.word	0x08019dd8
 80060c8:	08019da0 	.word	0x08019da0
 80060cc:	00000bb8 	.word	0x00000bb8
 80060d0:	08019df8 	.word	0x08019df8
 80060d4:	20000cbc 	.word	0x20000cbc
 80060d8:	08019e0c 	.word	0x08019e0c
 80060dc:	08019e24 	.word	0x08019e24
 80060e0:	00002710 	.word	0x00002710
 80060e4:	20000d18 	.word	0x20000d18
 80060e8:	08019e58 	.word	0x08019e58

080060ec <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 80060ec:	b590      	push	{r4, r7, lr}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	1d3b      	adds	r3, r7, #4
 80060f4:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 80060f6:	240f      	movs	r4, #15
 80060f8:	193b      	adds	r3, r7, r4
 80060fa:	2200      	movs	r2, #0
 80060fc:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 80060fe:	4b20      	ldr	r3, [pc, #128]	@ (8006180 <Meas_SetEnabledSensors+0x94>)
 8006100:	1d3a      	adds	r2, r7, #4
 8006102:	6812      	ldr	r2, [r2, #0]
 8006104:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8006106:	193b      	adds	r3, r7, r4
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	193a      	adds	r2, r7, r4
 800610c:	1c59      	adds	r1, r3, #1
 800610e:	7011      	strb	r1, [r2, #0]
 8006110:	0018      	movs	r0, r3
 8006112:	1d3b      	adds	r3, r7, #4
 8006114:	7819      	ldrb	r1, [r3, #0]
 8006116:	4a1b      	ldr	r2, [pc, #108]	@ (8006184 <Meas_SetEnabledSensors+0x98>)
 8006118:	0103      	lsls	r3, r0, #4
 800611a:	18d3      	adds	r3, r2, r3
 800611c:	330c      	adds	r3, #12
 800611e:	1c0a      	adds	r2, r1, #0
 8006120:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8006122:	193b      	adds	r3, r7, r4
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	193a      	adds	r2, r7, r4
 8006128:	1c59      	adds	r1, r3, #1
 800612a:	7011      	strb	r1, [r2, #0]
 800612c:	0018      	movs	r0, r3
 800612e:	1d3b      	adds	r3, r7, #4
 8006130:	7859      	ldrb	r1, [r3, #1]
 8006132:	4a14      	ldr	r2, [pc, #80]	@ (8006184 <Meas_SetEnabledSensors+0x98>)
 8006134:	0103      	lsls	r3, r0, #4
 8006136:	18d3      	adds	r3, r2, r3
 8006138:	330c      	adds	r3, #12
 800613a:	1c0a      	adds	r2, r1, #0
 800613c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 800613e:	193b      	adds	r3, r7, r4
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	193a      	adds	r2, r7, r4
 8006144:	1c59      	adds	r1, r3, #1
 8006146:	7011      	strb	r1, [r2, #0]
 8006148:	0018      	movs	r0, r3
 800614a:	1d3b      	adds	r3, r7, #4
 800614c:	7899      	ldrb	r1, [r3, #2]
 800614e:	4a0d      	ldr	r2, [pc, #52]	@ (8006184 <Meas_SetEnabledSensors+0x98>)
 8006150:	0103      	lsls	r3, r0, #4
 8006152:	18d3      	adds	r3, r2, r3
 8006154:	330c      	adds	r3, #12
 8006156:	1c0a      	adds	r2, r1, #0
 8006158:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 800615a:	193b      	adds	r3, r7, r4
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	193a      	adds	r2, r7, r4
 8006160:	1c59      	adds	r1, r3, #1
 8006162:	7011      	strb	r1, [r2, #0]
 8006164:	0018      	movs	r0, r3
 8006166:	1d3b      	adds	r3, r7, #4
 8006168:	78d9      	ldrb	r1, [r3, #3]
 800616a:	4a06      	ldr	r2, [pc, #24]	@ (8006184 <Meas_SetEnabledSensors+0x98>)
 800616c:	0103      	lsls	r3, r0, #4
 800616e:	18d3      	adds	r3, r2, r3
 8006170:	330c      	adds	r3, #12
 8006172:	1c0a      	adds	r2, r1, #0
 8006174:	701a      	strb	r2, [r3, #0]
}
 8006176:	46c0      	nop			@ (mov r8, r8)
 8006178:	46bd      	mov	sp, r7
 800617a:	b005      	add	sp, #20
 800617c:	bd90      	pop	{r4, r7, pc}
 800617e:	46c0      	nop			@ (mov r8, r8)
 8006180:	20000d0c 	.word	0x20000d0c
 8006184:	20000ccc 	.word	0x20000ccc

08006188 <Meas_Test>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}


void Meas_Test(){
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 800618c:	4b25      	ldr	r3, [pc, #148]	@ (8006224 <Meas_Test+0x9c>)
 800618e:	78db      	ldrb	r3, [r3, #3]
 8006190:	2201      	movs	r2, #1
 8006192:	4053      	eors	r3, r2
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <Meas_Test+0x16>
    ESP_WakeTest();
 800619a:	f7fe fb4f 	bl	800483c <ESP_WakeTest>
  }
  if(!MeasTest.MIC_Tested){
 800619e:	4b21      	ldr	r3, [pc, #132]	@ (8006224 <Meas_Test+0x9c>)
 80061a0:	789b      	ldrb	r3, [r3, #2]
 80061a2:	2201      	movs	r2, #1
 80061a4:	4053      	eors	r3, r2
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d01f      	beq.n	80061ec <Meas_Test+0x64>
    if(MIC_IsTestMeasurementDoneWrapper()){
 80061ac:	f7ff fd27 	bl	8005bfe <MIC_IsTestMeasurementDoneWrapper>
 80061b0:	1e03      	subs	r3, r0, #0
 80061b2:	d00f      	beq.n	80061d4 <Meas_Test+0x4c>
      MeasTest.MIC_Tested = true;
 80061b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006224 <Meas_Test+0x9c>)
 80061b6:	2201      	movs	r2, #1
 80061b8:	709a      	strb	r2, [r3, #2]
      TIM2 -> CCR1 = 40000;
 80061ba:	2380      	movs	r3, #128	@ 0x80
 80061bc:	05db      	lsls	r3, r3, #23
 80061be:	4a1a      	ldr	r2, [pc, #104]	@ (8006228 <Meas_Test+0xa0>)
 80061c0:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 0;
 80061c2:	2380      	movs	r3, #128	@ 0x80
 80061c4:	05db      	lsls	r3, r3, #23
 80061c6:	2200      	movs	r2, #0
 80061c8:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 40000;
 80061ca:	2380      	movs	r3, #128	@ 0x80
 80061cc:	05db      	lsls	r3, r3, #23
 80061ce:	4a16      	ldr	r2, [pc, #88]	@ (8006228 <Meas_Test+0xa0>)
 80061d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80061d2:	e00b      	b.n	80061ec <Meas_Test+0x64>
    }
    else{
      TIM2 -> CCR1 = 0;
 80061d4:	2380      	movs	r3, #128	@ 0x80
 80061d6:	05db      	lsls	r3, r3, #23
 80061d8:	2200      	movs	r2, #0
 80061da:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 40000;
 80061dc:	2380      	movs	r3, #128	@ 0x80
 80061de:	05db      	lsls	r3, r3, #23
 80061e0:	4a11      	ldr	r2, [pc, #68]	@ (8006228 <Meas_Test+0xa0>)
 80061e2:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 40000;
 80061e4:	2380      	movs	r3, #128	@ 0x80
 80061e6:	05db      	lsls	r3, r3, #23
 80061e8:	4a0f      	ldr	r2, [pc, #60]	@ (8006228 <Meas_Test+0xa0>)
 80061ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 80061ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006224 <Meas_Test+0x9c>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d013      	beq.n	800621c <Meas_Test+0x94>
 80061f4:	4b0b      	ldr	r3, [pc, #44]	@ (8006224 <Meas_Test+0x9c>)
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00f      	beq.n	800621c <Meas_Test+0x94>
 80061fc:	4b09      	ldr	r3, [pc, #36]	@ (8006224 <Meas_Test+0x9c>)
 80061fe:	78db      	ldrb	r3, [r3, #3]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00b      	beq.n	800621c <Meas_Test+0x94>
 8006204:	4b07      	ldr	r3, [pc, #28]	@ (8006224 <Meas_Test+0x9c>)
 8006206:	789b      	ldrb	r3, [r3, #2]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <Meas_Test+0x94>
    Debug("Test completed");
 800620c:	4a07      	ldr	r2, [pc, #28]	@ (800622c <Meas_Test+0xa4>)
 800620e:	4b08      	ldr	r3, [pc, #32]	@ (8006230 <Meas_Test+0xa8>)
 8006210:	0019      	movs	r1, r3
 8006212:	2003      	movs	r0, #3
 8006214:	f002 fc66 	bl	8008ae4 <CreateLine>
    SetTestDone();
 8006218:	f7ff fb64 	bl	80058e4 <SetTestDone>
  }
}
 800621c:	46c0      	nop			@ (mov r8, r8)
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	46c0      	nop			@ (mov r8, r8)
 8006224:	20000d10 	.word	0x20000d10
 8006228:	00009c40 	.word	0x00009c40
 800622c:	08019e70 	.word	0x08019e70
 8006230:	08019da0 	.word	0x08019da0

08006234 <SetESPMeasurementDone>:

void SetESPMeasurementDone(){
 8006234:	b580      	push	{r7, lr}
 8006236:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8006238:	4b02      	ldr	r3, [pc, #8]	@ (8006244 <SetESPMeasurementDone+0x10>)
 800623a:	2201      	movs	r2, #1
 800623c:	70da      	strb	r2, [r3, #3]
}
 800623e:	46c0      	nop			@ (mov r8, r8)
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	20000d10 	.word	0x20000d10

08006248 <MIC_Init>:
float sample[NUMBER_OF_SAMPLES];




void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	4b03      	ldr	r3, [pc, #12]	@ (8006260 <MIC_Init+0x18>)
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	46c0      	nop			@ (mov r8, r8)
 8006258:	46bd      	mov	sp, r7
 800625a:	b002      	add	sp, #8
 800625c:	bd80      	pop	{r7, pc}
 800625e:	46c0      	nop			@ (mov r8, r8)
 8006260:	20000d1c 	.word	0x20000d1c

08006264 <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 800626c:	4b0c      	ldr	r3, [pc, #48]	@ (80062a0 <UpdateSampleRate+0x3c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	429a      	cmp	r2, r3
 8006276:	d00e      	beq.n	8006296 <UpdateSampleRate+0x32>
    return;
  }

  HAL_I2S_DeInit(I2SHandle);
 8006278:	4b09      	ldr	r3, [pc, #36]	@ (80062a0 <UpdateSampleRate+0x3c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	0018      	movs	r0, r3
 800627e:	f006 fafd 	bl	800c87c <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 8006282:	4b07      	ldr	r3, [pc, #28]	@ (80062a0 <UpdateSampleRate+0x3c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 800628a:	4b05      	ldr	r3, [pc, #20]	@ (80062a0 <UpdateSampleRate+0x3c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	0018      	movs	r0, r3
 8006290:	f006 fa02 	bl	800c698 <HAL_I2S_Init>
 8006294:	e000      	b.n	8006298 <UpdateSampleRate+0x34>
    return;
 8006296:	46c0      	nop			@ (mov r8, r8)
}
 8006298:	46bd      	mov	sp, r7
 800629a:	b002      	add	sp, #8
 800629c:	bd80      	pop	{r7, pc}
 800629e:	46c0      	nop			@ (mov r8, r8)
 80062a0:	20000d1c 	.word	0x20000d1c

080062a4 <ConvertAudio>:

static float ConvertAudio(uint16_t* data) {
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08a      	sub	sp, #40	@ 0x28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t MSP;
  uint32_t LSP;
  int32_t signedAudioValue;
  float Division = 8388607.0; //Reference?
 80062ac:	4b1e      	ldr	r3, [pc, #120]	@ (8006328 <ConvertAudio+0x84>)
 80062ae:	623b      	str	r3, [r7, #32]
  float adjustedAudioValue = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	61fb      	str	r3, [r7, #28]
  uint32_t audioValue = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	627b      	str	r3, [r7, #36]	@ 0x24

  int32_t value = 12345;
 80062b8:	4b1c      	ldr	r3, [pc, #112]	@ (800632c <ConvertAudio+0x88>)
 80062ba:	61bb      	str	r3, [r7, #24]
  uint16_t msb=(value & 0x0FFFFFF)>>9;
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	125b      	asrs	r3, r3, #9
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	2316      	movs	r3, #22
 80062c4:	18fb      	adds	r3, r7, r3
 80062c6:	0452      	lsls	r2, r2, #17
 80062c8:	0c52      	lsrs	r2, r2, #17
 80062ca:	801a      	strh	r2, [r3, #0]
  uint16_t lsb=(value & 0x1FF)<<7;
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	01da      	lsls	r2, r3, #7
 80062d0:	2314      	movs	r3, #20
 80062d2:	18fb      	adds	r3, r7, r3
 80062d4:	801a      	strh	r2, [r3, #0]
  MSP = data[0]<<9;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	881b      	ldrh	r3, [r3, #0]
 80062da:	025b      	lsls	r3, r3, #9
 80062dc:	613b      	str	r3, [r7, #16]
  LSP = (data[1]&0xFF80)>>7;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	3302      	adds	r3, #2
 80062e2:	881b      	ldrh	r3, [r3, #0]
 80062e4:	09db      	lsrs	r3, r3, #7
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	60fb      	str	r3, [r7, #12]
  audioValue = MSP | LSP;
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if((0x800000 & audioValue) != 0){
 80062f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062f4:	2380      	movs	r3, #128	@ 0x80
 80062f6:	041b      	lsls	r3, r3, #16
 80062f8:	4013      	ands	r3, r2
 80062fa:	d004      	beq.n	8006306 <ConvertAudio+0x62>
    audioValue = 0xFF000000 | audioValue;
 80062fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fe:	22ff      	movs	r2, #255	@ 0xff
 8006300:	0612      	lsls	r2, r2, #24
 8006302:	4313      	orrs	r3, r2
 8006304:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  signedAudioValue = (int32_t)audioValue;
 8006306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006308:	60bb      	str	r3, [r7, #8]
  adjustedAudioValue = ((float)signedAudioValue/Division);
 800630a:	68b8      	ldr	r0, [r7, #8]
 800630c:	f7fb f8de 	bl	80014cc <__aeabi_i2f>
 8006310:	1c03      	adds	r3, r0, #0
 8006312:	6a39      	ldr	r1, [r7, #32]
 8006314:	1c18      	adds	r0, r3, #0
 8006316:	f7fa fbdb 	bl	8000ad0 <__aeabi_fdiv>
 800631a:	1c03      	adds	r3, r0, #0
 800631c:	61fb      	str	r3, [r7, #28]
//  if(audioValue < 0){
//    audioValue = 0xFFFFFFFF-audioValue;
//  }
//  dB = 20 * log10(audioValue / Division);

  return adjustedAudioValue;
 800631e:	69fb      	ldr	r3, [r7, #28]
}
 8006320:	1c18      	adds	r0, r3, #0
 8006322:	46bd      	mov	sp, r7
 8006324:	b00a      	add	sp, #40	@ 0x28
 8006326:	bd80      	pop	{r7, pc}
 8006328:	4afffffe 	.word	0x4afffffe
 800632c:	00003039 	.word	0x00003039

08006330 <MIC_Start>:
//  arm_rfft_q15(&fft_instance, sample, output);
//  arm_abs_q15(output, output, NUMBER_OF_SAMPLES);
//  GetAllOctaves();
//}

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8006330:	b5b0      	push	{r4, r5, r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	000a      	movs	r2, r1
 800633a:	1cbb      	adds	r3, r7, #2
 800633c:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 800633e:	4b20      	ldr	r3, [pc, #128]	@ (80063c0 <MIC_Start+0x90>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d106      	bne.n	8006354 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 8006346:	4a1f      	ldr	r2, [pc, #124]	@ (80063c4 <MIC_Start+0x94>)
 8006348:	4b1f      	ldr	r3, [pc, #124]	@ (80063c8 <MIC_Start+0x98>)
 800634a:	0019      	movs	r1, r3
 800634c:	2001      	movs	r0, #1
 800634e:	f002 fbc9 	bl	8008ae4 <CreateLine>
    return;
 8006352:	e031      	b.n	80063b8 <MIC_Start+0x88>
  }
  TIM2 -> CCR1 = 3000;
 8006354:	2380      	movs	r3, #128	@ 0x80
 8006356:	05db      	lsls	r3, r3, #23
 8006358:	4a1c      	ldr	r2, [pc, #112]	@ (80063cc <MIC_Start+0x9c>)
 800635a:	635a      	str	r2, [r3, #52]	@ 0x34
  Debug("In mic start");
 800635c:	4a1c      	ldr	r2, [pc, #112]	@ (80063d0 <MIC_Start+0xa0>)
 800635e:	4b1d      	ldr	r3, [pc, #116]	@ (80063d4 <MIC_Start+0xa4>)
 8006360:	0019      	movs	r1, r3
 8006362:	2003      	movs	r0, #3
 8006364:	f002 fbbe 	bl	8008ae4 <CreateLine>
  UpdateSampleRate(sampleRate);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	0018      	movs	r0, r3
 800636c:	f7ff ff7a 	bl	8006264 <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 8006370:	4b19      	ldr	r3, [pc, #100]	@ (80063d8 <MIC_Start+0xa8>)
 8006372:	1cba      	adds	r2, r7, #2
 8006374:	8812      	ldrh	r2, [r2, #0]
 8006376:	801a      	strh	r2, [r3, #0]

  //StartTime = GetCurrentHalTicks();
  StartupDoneTime = HAL_GetTick() + 20;
 8006378:	f002 ffac 	bl	80092d4 <HAL_GetTick>
 800637c:	0003      	movs	r3, r0
 800637e:	3314      	adds	r3, #20
 8006380:	001a      	movs	r2, r3
 8006382:	4b16      	ldr	r3, [pc, #88]	@ (80063dc <MIC_Start+0xac>)
 8006384:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 8006386:	4b16      	ldr	r3, [pc, #88]	@ (80063e0 <MIC_Start+0xb0>)
 8006388:	2200      	movs	r2, #0
 800638a:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 800638c:	4b15      	ldr	r3, [pc, #84]	@ (80063e4 <MIC_Start+0xb4>)
 800638e:	2200      	movs	r2, #0
 8006390:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, NUMBER_OF_SAMPLES*2);
 8006392:	4b0b      	ldr	r3, [pc, #44]	@ (80063c0 <MIC_Start+0x90>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	250f      	movs	r5, #15
 8006398:	197c      	adds	r4, r7, r5
 800639a:	2280      	movs	r2, #128	@ 0x80
 800639c:	00d2      	lsls	r2, r2, #3
 800639e:	4912      	ldr	r1, [pc, #72]	@ (80063e8 <MIC_Start+0xb8>)
 80063a0:	0018      	movs	r0, r3
 80063a2:	f006 fa97 	bl	800c8d4 <HAL_I2S_Receive_DMA>
 80063a6:	0003      	movs	r3, r0
 80063a8:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

  Info("Status %d", status);
 80063aa:	197b      	adds	r3, r7, r5
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	4a0f      	ldr	r2, [pc, #60]	@ (80063ec <MIC_Start+0xbc>)
 80063b0:	490f      	ldr	r1, [pc, #60]	@ (80063f0 <MIC_Start+0xc0>)
 80063b2:	2002      	movs	r0, #2
 80063b4:	f002 fb96 	bl	8008ae4 <CreateLine>
}
 80063b8:	46bd      	mov	sp, r7
 80063ba:	b004      	add	sp, #16
 80063bc:	bdb0      	pop	{r4, r5, r7, pc}
 80063be:	46c0      	nop			@ (mov r8, r8)
 80063c0:	20000d1c 	.word	0x20000d1c
 80063c4:	08019e80 	.word	0x08019e80
 80063c8:	08019ea0 	.word	0x08019ea0
 80063cc:	00000bb8 	.word	0x00000bb8
 80063d0:	08019ea4 	.word	0x08019ea4
 80063d4:	08019eb4 	.word	0x08019eb4
 80063d8:	2000010c 	.word	0x2000010c
 80063dc:	20001d20 	.word	0x20001d20
 80063e0:	20001d24 	.word	0x20001d24
 80063e4:	20001d25 	.word	0x20001d25
 80063e8:	20000d20 	.word	0x20000d20
 80063ec:	08019eb8 	.word	0x08019eb8
 80063f0:	08019ec4 	.word	0x08019ec4

080063f4 <MinimalValue>:

float MinimalValue(uint16_t length){
 80063f4:	b590      	push	{r4, r7, lr}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	0002      	movs	r2, r0
 80063fc:	1dbb      	adds	r3, r7, #6
 80063fe:	801a      	strh	r2, [r3, #0]
  float MinVal = 1;
 8006400:	23fe      	movs	r3, #254	@ 0xfe
 8006402:	059b      	lsls	r3, r3, #22
 8006404:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006406:	230a      	movs	r3, #10
 8006408:	18fb      	adds	r3, r7, r3
 800640a:	2200      	movs	r2, #0
 800640c:	801a      	strh	r2, [r3, #0]
 800640e:	e01c      	b.n	800644a <MinimalValue+0x56>
    if(sample[i] < MinVal){
 8006410:	240a      	movs	r4, #10
 8006412:	193b      	adds	r3, r7, r4
 8006414:	2200      	movs	r2, #0
 8006416:	5e9a      	ldrsh	r2, [r3, r2]
 8006418:	4b12      	ldr	r3, [pc, #72]	@ (8006464 <MinimalValue+0x70>)
 800641a:	0092      	lsls	r2, r2, #2
 800641c:	58d3      	ldr	r3, [r2, r3]
 800641e:	1c19      	adds	r1, r3, #0
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f7fa f867 	bl	80004f4 <__aeabi_fcmpgt>
 8006426:	1e03      	subs	r3, r0, #0
 8006428:	d006      	beq.n	8006438 <MinimalValue+0x44>
      MinVal = sample[i];
 800642a:	193b      	adds	r3, r7, r4
 800642c:	2200      	movs	r2, #0
 800642e:	5e9a      	ldrsh	r2, [r3, r2]
 8006430:	4b0c      	ldr	r3, [pc, #48]	@ (8006464 <MinimalValue+0x70>)
 8006432:	0092      	lsls	r2, r2, #2
 8006434:	58d3      	ldr	r3, [r2, r3]
 8006436:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006438:	210a      	movs	r1, #10
 800643a:	187b      	adds	r3, r7, r1
 800643c:	2200      	movs	r2, #0
 800643e:	5e9b      	ldrsh	r3, [r3, r2]
 8006440:	b29b      	uxth	r3, r3
 8006442:	3301      	adds	r3, #1
 8006444:	b29a      	uxth	r2, r3
 8006446:	187b      	adds	r3, r7, r1
 8006448:	801a      	strh	r2, [r3, #0]
 800644a:	230a      	movs	r3, #10
 800644c:	18fb      	adds	r3, r7, r3
 800644e:	2200      	movs	r2, #0
 8006450:	5e9a      	ldrsh	r2, [r3, r2]
 8006452:	1dbb      	adds	r3, r7, #6
 8006454:	881b      	ldrh	r3, [r3, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	dbda      	blt.n	8006410 <MinimalValue+0x1c>
    }
  }
  return(MinVal);
 800645a:	68fb      	ldr	r3, [r7, #12]
}
 800645c:	1c18      	adds	r0, r3, #0
 800645e:	46bd      	mov	sp, r7
 8006460:	b005      	add	sp, #20
 8006462:	bd90      	pop	{r4, r7, pc}
 8006464:	20001d5c 	.word	0x20001d5c

08006468 <MaximalValue>:

float MaximalValue(uint16_t length){
 8006468:	b590      	push	{r4, r7, lr}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	0002      	movs	r2, r0
 8006470:	1dbb      	adds	r3, r7, #6
 8006472:	801a      	strh	r2, [r3, #0]
  float MaxVal = -1;
 8006474:	4b18      	ldr	r3, [pc, #96]	@ (80064d8 <MaximalValue+0x70>)
 8006476:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006478:	230a      	movs	r3, #10
 800647a:	18fb      	adds	r3, r7, r3
 800647c:	2200      	movs	r2, #0
 800647e:	801a      	strh	r2, [r3, #0]
 8006480:	e01c      	b.n	80064bc <MaximalValue+0x54>
    if(sample[i] > MaxVal){
 8006482:	240a      	movs	r4, #10
 8006484:	193b      	adds	r3, r7, r4
 8006486:	2200      	movs	r2, #0
 8006488:	5e9a      	ldrsh	r2, [r3, r2]
 800648a:	4b14      	ldr	r3, [pc, #80]	@ (80064dc <MaximalValue+0x74>)
 800648c:	0092      	lsls	r2, r2, #2
 800648e:	58d3      	ldr	r3, [r2, r3]
 8006490:	1c19      	adds	r1, r3, #0
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f7fa f81a 	bl	80004cc <__aeabi_fcmplt>
 8006498:	1e03      	subs	r3, r0, #0
 800649a:	d006      	beq.n	80064aa <MaximalValue+0x42>
      MaxVal = sample[i];
 800649c:	193b      	adds	r3, r7, r4
 800649e:	2200      	movs	r2, #0
 80064a0:	5e9a      	ldrsh	r2, [r3, r2]
 80064a2:	4b0e      	ldr	r3, [pc, #56]	@ (80064dc <MaximalValue+0x74>)
 80064a4:	0092      	lsls	r2, r2, #2
 80064a6:	58d3      	ldr	r3, [r2, r3]
 80064a8:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 80064aa:	210a      	movs	r1, #10
 80064ac:	187b      	adds	r3, r7, r1
 80064ae:	2200      	movs	r2, #0
 80064b0:	5e9b      	ldrsh	r3, [r3, r2]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	3301      	adds	r3, #1
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	187b      	adds	r3, r7, r1
 80064ba:	801a      	strh	r2, [r3, #0]
 80064bc:	230a      	movs	r3, #10
 80064be:	18fb      	adds	r3, r7, r3
 80064c0:	2200      	movs	r2, #0
 80064c2:	5e9a      	ldrsh	r2, [r3, r2]
 80064c4:	1dbb      	adds	r3, r7, #6
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	dbda      	blt.n	8006482 <MaximalValue+0x1a>
    }
  }
  return(MaxVal);
 80064cc:	68fb      	ldr	r3, [r7, #12]
}
 80064ce:	1c18      	adds	r0, r3, #0
 80064d0:	46bd      	mov	sp, r7
 80064d2:	b005      	add	sp, #20
 80064d4:	bd90      	pop	{r4, r7, pc}
 80064d6:	46c0      	nop			@ (mov r8, r8)
 80064d8:	bf800000 	.word	0xbf800000
 80064dc:	20001d5c 	.word	0x20001d5c

080064e0 <MIC_Check>:
bool MIC_Check(void) {
 80064e0:	b5b0      	push	{r4, r5, r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 80064e6:	4a25      	ldr	r2, [pc, #148]	@ (800657c <MIC_Check+0x9c>)
 80064e8:	4b25      	ldr	r3, [pc, #148]	@ (8006580 <MIC_Check+0xa0>)
 80064ea:	0019      	movs	r1, r3
 80064ec:	2002      	movs	r0, #2
 80064ee:	f002 faf9 	bl	8008ae4 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 80064f2:	230e      	movs	r3, #14
 80064f4:	18fb      	adds	r3, r7, r3
 80064f6:	2200      	movs	r2, #0
 80064f8:	801a      	strh	r2, [r3, #0]
 80064fa:	e016      	b.n	800652a <MIC_Check+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 80064fc:	210e      	movs	r1, #14
 80064fe:	187b      	adds	r3, r7, r1
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	3302      	adds	r3, #2
 8006506:	005a      	lsls	r2, r3, #1
 8006508:	4b1e      	ldr	r3, [pc, #120]	@ (8006584 <MIC_Check+0xa4>)
 800650a:	18d2      	adds	r2, r2, r3
 800650c:	000d      	movs	r5, r1
 800650e:	187b      	adds	r3, r7, r1
 8006510:	881c      	ldrh	r4, [r3, #0]
 8006512:	0010      	movs	r0, r2
 8006514:	f7ff fec6 	bl	80062a4 <ConvertAudio>
 8006518:	1c01      	adds	r1, r0, #0
 800651a:	4b1b      	ldr	r3, [pc, #108]	@ (8006588 <MIC_Check+0xa8>)
 800651c:	00a2      	lsls	r2, r4, #2
 800651e:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006520:	197b      	adds	r3, r7, r5
 8006522:	197a      	adds	r2, r7, r5
 8006524:	8812      	ldrh	r2, [r2, #0]
 8006526:	3201      	adds	r2, #1
 8006528:	801a      	strh	r2, [r3, #0]
 800652a:	230e      	movs	r3, #14
 800652c:	18fb      	adds	r3, r7, r3
 800652e:	881a      	ldrh	r2, [r3, #0]
 8006530:	2380      	movs	r3, #128	@ 0x80
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	429a      	cmp	r2, r3
 8006536:	d3e1      	bcc.n	80064fc <MIC_Check+0x1c>
    //Info("0x%08x", sample);
  }
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 8006538:	2380      	movs	r3, #128	@ 0x80
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	0018      	movs	r0, r3
 800653e:	f7ff ff93 	bl	8006468 <MaximalValue>
 8006542:	1c03      	adds	r3, r0, #0
 8006544:	60bb      	str	r3, [r7, #8]
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 8006546:	2380      	movs	r3, #128	@ 0x80
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	0018      	movs	r0, r3
 800654c:	f7ff ff52 	bl	80063f4 <MinimalValue>
 8006550:	1c03      	adds	r3, r0, #0
 8006552:	607b      	str	r3, [r7, #4]
  if(Max > 0.0 || Min < 0.0){
 8006554:	2100      	movs	r1, #0
 8006556:	68b8      	ldr	r0, [r7, #8]
 8006558:	f7f9 ffcc 	bl	80004f4 <__aeabi_fcmpgt>
 800655c:	1e03      	subs	r3, r0, #0
 800655e:	d105      	bne.n	800656c <MIC_Check+0x8c>
 8006560:	2100      	movs	r1, #0
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7f9 ffb2 	bl	80004cc <__aeabi_fcmplt>
 8006568:	1e03      	subs	r3, r0, #0
 800656a:	d001      	beq.n	8006570 <MIC_Check+0x90>
    return(true);
 800656c:	2301      	movs	r3, #1
 800656e:	e000      	b.n	8006572 <MIC_Check+0x92>
  }
  return(false);
 8006570:	2300      	movs	r3, #0
}
 8006572:	0018      	movs	r0, r3
 8006574:	46bd      	mov	sp, r7
 8006576:	b004      	add	sp, #16
 8006578:	bdb0      	pop	{r4, r5, r7, pc}
 800657a:	46c0      	nop			@ (mov r8, r8)
 800657c:	08019ec8 	.word	0x08019ec8
 8006580:	08019ec4 	.word	0x08019ec4
 8006584:	20000d20 	.word	0x20000d20
 8006588:	20001d5c 	.word	0x20001d5c

0800658c <MIC_Print>:
void MIC_Print(void) {
 800658c:	b5b0      	push	{r4, r5, r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 8006592:	4ac9      	ldr	r2, [pc, #804]	@ (80068b8 <MIC_Print+0x32c>)
 8006594:	4bc9      	ldr	r3, [pc, #804]	@ (80068bc <MIC_Print+0x330>)
 8006596:	0019      	movs	r1, r3
 8006598:	2002      	movs	r0, #2
 800659a:	f002 faa3 	bl	8008ae4 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 800659e:	230e      	movs	r3, #14
 80065a0:	18fb      	adds	r3, r7, r3
 80065a2:	2200      	movs	r2, #0
 80065a4:	801a      	strh	r2, [r3, #0]
 80065a6:	e016      	b.n	80065d6 <MIC_Print+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 80065a8:	210e      	movs	r1, #14
 80065aa:	187b      	adds	r3, r7, r1
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	3302      	adds	r3, #2
 80065b2:	005a      	lsls	r2, r3, #1
 80065b4:	4bc2      	ldr	r3, [pc, #776]	@ (80068c0 <MIC_Print+0x334>)
 80065b6:	18d2      	adds	r2, r2, r3
 80065b8:	000d      	movs	r5, r1
 80065ba:	187b      	adds	r3, r7, r1
 80065bc:	881c      	ldrh	r4, [r3, #0]
 80065be:	0010      	movs	r0, r2
 80065c0:	f7ff fe70 	bl	80062a4 <ConvertAudio>
 80065c4:	1c01      	adds	r1, r0, #0
 80065c6:	4bbf      	ldr	r3, [pc, #764]	@ (80068c4 <MIC_Print+0x338>)
 80065c8:	00a2      	lsls	r2, r4, #2
 80065ca:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 80065cc:	197b      	adds	r3, r7, r5
 80065ce:	197a      	adds	r2, r7, r5
 80065d0:	8812      	ldrh	r2, [r2, #0]
 80065d2:	3201      	adds	r2, #1
 80065d4:	801a      	strh	r2, [r3, #0]
 80065d6:	230e      	movs	r3, #14
 80065d8:	18fb      	adds	r3, r7, r3
 80065da:	881a      	ldrh	r2, [r3, #0]
 80065dc:	2380      	movs	r3, #128	@ 0x80
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d3e1      	bcc.n	80065a8 <MIC_Print+0x1c>
    //Info("0x%08x", sample);
  }
  //filter();
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 80065e4:	2380      	movs	r3, #128	@ 0x80
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	0018      	movs	r0, r3
 80065ea:	f7ff ff03 	bl	80063f4 <MinimalValue>
 80065ee:	1c03      	adds	r3, r0, #0
 80065f0:	60bb      	str	r3, [r7, #8]
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 80065f2:	2380      	movs	r3, #128	@ 0x80
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	0018      	movs	r0, r3
 80065f8:	f7ff ff36 	bl	8006468 <MaximalValue>
 80065fc:	1c03      	adds	r3, r0, #0
 80065fe:	607b      	str	r3, [r7, #4]
  dBc = MIC_GetDB();
 8006600:	f000 f9ea 	bl	80069d8 <MIC_GetDB>
 8006604:	1c02      	adds	r2, r0, #0
 8006606:	4bb0      	ldr	r3, [pc, #704]	@ (80068c8 <MIC_Print+0x33c>)
 8006608:	601a      	str	r2, [r3, #0]
  if(counter < 10){
 800660a:	4bb0      	ldr	r3, [pc, #704]	@ (80068cc <MIC_Print+0x340>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	2b09      	cmp	r3, #9
 8006610:	d80e      	bhi.n	8006630 <MIC_Print+0xa4>
    dBcSamples[counter] = dBc;
 8006612:	4bae      	ldr	r3, [pc, #696]	@ (80068cc <MIC_Print+0x340>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	001a      	movs	r2, r3
 8006618:	4bab      	ldr	r3, [pc, #684]	@ (80068c8 <MIC_Print+0x33c>)
 800661a:	6819      	ldr	r1, [r3, #0]
 800661c:	4bac      	ldr	r3, [pc, #688]	@ (80068d0 <MIC_Print+0x344>)
 800661e:	0092      	lsls	r2, r2, #2
 8006620:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8006622:	4baa      	ldr	r3, [pc, #680]	@ (80068cc <MIC_Print+0x340>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	3301      	adds	r3, #1
 8006628:	b2da      	uxtb	r2, r3
 800662a:	4ba8      	ldr	r3, [pc, #672]	@ (80068cc <MIC_Print+0x340>)
 800662c:	701a      	strb	r2, [r3, #0]
 800662e:	e013      	b.n	8006658 <MIC_Print+0xcc>
  }
  else{
    counter = 0;
 8006630:	4ba6      	ldr	r3, [pc, #664]	@ (80068cc <MIC_Print+0x340>)
 8006632:	2200      	movs	r2, #0
 8006634:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 8006636:	4ba5      	ldr	r3, [pc, #660]	@ (80068cc <MIC_Print+0x340>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	001a      	movs	r2, r3
 800663c:	4ba2      	ldr	r3, [pc, #648]	@ (80068c8 <MIC_Print+0x33c>)
 800663e:	6819      	ldr	r1, [r3, #0]
 8006640:	4ba3      	ldr	r3, [pc, #652]	@ (80068d0 <MIC_Print+0x344>)
 8006642:	0092      	lsls	r2, r2, #2
 8006644:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8006646:	4ba1      	ldr	r3, [pc, #644]	@ (80068cc <MIC_Print+0x340>)
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	3301      	adds	r3, #1
 800664c:	b2da      	uxtb	r2, r3
 800664e:	4b9f      	ldr	r3, [pc, #636]	@ (80068cc <MIC_Print+0x340>)
 8006650:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 8006652:	4ba0      	ldr	r3, [pc, #640]	@ (80068d4 <MIC_Print+0x348>)
 8006654:	2201      	movs	r2, #1
 8006656:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 8006658:	4b9e      	ldr	r3, [pc, #632]	@ (80068d4 <MIC_Print+0x348>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2201      	movs	r2, #1
 800665e:	4053      	eors	r3, r2
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d005      	beq.n	8006672 <MIC_Print+0xe6>
    setMic(dBc);
 8006666:	4b98      	ldr	r3, [pc, #608]	@ (80068c8 <MIC_Print+0x33c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	1c18      	adds	r0, r3, #0
 800666c:	f7fd f83c 	bl	80036e8 <setMic>
 8006670:	e030      	b.n	80066d4 <MIC_Print+0x148>
  }
  else{
    dBcAverage = 0;
 8006672:	4b99      	ldr	r3, [pc, #612]	@ (80068d8 <MIC_Print+0x34c>)
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 8006678:	230d      	movs	r3, #13
 800667a:	18fb      	adds	r3, r7, r3
 800667c:	2200      	movs	r2, #0
 800667e:	701a      	strb	r2, [r3, #0]
 8006680:	e014      	b.n	80066ac <MIC_Print+0x120>
      dBcAverage += dBcSamples[i];
 8006682:	240d      	movs	r4, #13
 8006684:	193b      	adds	r3, r7, r4
 8006686:	781a      	ldrb	r2, [r3, #0]
 8006688:	4b91      	ldr	r3, [pc, #580]	@ (80068d0 <MIC_Print+0x344>)
 800668a:	0092      	lsls	r2, r2, #2
 800668c:	58d2      	ldr	r2, [r2, r3]
 800668e:	4b92      	ldr	r3, [pc, #584]	@ (80068d8 <MIC_Print+0x34c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	1c19      	adds	r1, r3, #0
 8006694:	1c10      	adds	r0, r2, #0
 8006696:	f7fa f891 	bl	80007bc <__aeabi_fadd>
 800669a:	1c03      	adds	r3, r0, #0
 800669c:	1c1a      	adds	r2, r3, #0
 800669e:	4b8e      	ldr	r3, [pc, #568]	@ (80068d8 <MIC_Print+0x34c>)
 80066a0:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 80066a2:	193b      	adds	r3, r7, r4
 80066a4:	781a      	ldrb	r2, [r3, #0]
 80066a6:	193b      	adds	r3, r7, r4
 80066a8:	3201      	adds	r2, #1
 80066aa:	701a      	strb	r2, [r3, #0]
 80066ac:	230d      	movs	r3, #13
 80066ae:	18fb      	adds	r3, r7, r3
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b09      	cmp	r3, #9
 80066b4:	d9e5      	bls.n	8006682 <MIC_Print+0xf6>
    }
    dBcAverage = dBcAverage/10;
 80066b6:	4b88      	ldr	r3, [pc, #544]	@ (80068d8 <MIC_Print+0x34c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4988      	ldr	r1, [pc, #544]	@ (80068dc <MIC_Print+0x350>)
 80066bc:	1c18      	adds	r0, r3, #0
 80066be:	f7fa fa07 	bl	8000ad0 <__aeabi_fdiv>
 80066c2:	1c03      	adds	r3, r0, #0
 80066c4:	1c1a      	adds	r2, r3, #0
 80066c6:	4b84      	ldr	r3, [pc, #528]	@ (80068d8 <MIC_Print+0x34c>)
 80066c8:	601a      	str	r2, [r3, #0]
    setMic(dBcAverage);
 80066ca:	4b83      	ldr	r3, [pc, #524]	@ (80068d8 <MIC_Print+0x34c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	1c18      	adds	r0, r3, #0
 80066d0:	f7fd f80a 	bl	80036e8 <setMic>
  }
  //Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc > 85){ //white
 80066d4:	4b7c      	ldr	r3, [pc, #496]	@ (80068c8 <MIC_Print+0x33c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4981      	ldr	r1, [pc, #516]	@ (80068e0 <MIC_Print+0x354>)
 80066da:	1c18      	adds	r0, r3, #0
 80066dc:	f7f9 ff0a 	bl	80004f4 <__aeabi_fcmpgt>
 80066e0:	1e03      	subs	r3, r0, #0
 80066e2:	d013      	beq.n	800670c <MIC_Print+0x180>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80066e4:	4b7f      	ldr	r3, [pc, #508]	@ (80068e4 <MIC_Print+0x358>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	2101      	movs	r1, #1
 80066ea:	0018      	movs	r0, r3
 80066ec:	f003 ffa6 	bl	800a63c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 80066f0:	2380      	movs	r3, #128	@ 0x80
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	487b      	ldr	r0, [pc, #492]	@ (80068e4 <MIC_Print+0x358>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	0019      	movs	r1, r3
 80066fa:	f003 ff9f 	bl	800a63c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 80066fe:	2380      	movs	r3, #128	@ 0x80
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4878      	ldr	r0, [pc, #480]	@ (80068e4 <MIC_Print+0x358>)
 8006704:	2200      	movs	r2, #0
 8006706:	0019      	movs	r1, r3
 8006708:	f003 ff98 	bl	800a63c <HAL_GPIO_WritePin>
  }
  if(dBc < 85 && dBc >= 80){ //red
 800670c:	4b6e      	ldr	r3, [pc, #440]	@ (80068c8 <MIC_Print+0x33c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4973      	ldr	r1, [pc, #460]	@ (80068e0 <MIC_Print+0x354>)
 8006712:	1c18      	adds	r0, r3, #0
 8006714:	f7f9 feda 	bl	80004cc <__aeabi_fcmplt>
 8006718:	1e03      	subs	r3, r0, #0
 800671a:	d01b      	beq.n	8006754 <MIC_Print+0x1c8>
 800671c:	4b6a      	ldr	r3, [pc, #424]	@ (80068c8 <MIC_Print+0x33c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4971      	ldr	r1, [pc, #452]	@ (80068e8 <MIC_Print+0x35c>)
 8006722:	1c18      	adds	r0, r3, #0
 8006724:	f7f9 fef0 	bl	8000508 <__aeabi_fcmpge>
 8006728:	1e03      	subs	r3, r0, #0
 800672a:	d013      	beq.n	8006754 <MIC_Print+0x1c8>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800672c:	4b6d      	ldr	r3, [pc, #436]	@ (80068e4 <MIC_Print+0x358>)
 800672e:	2200      	movs	r2, #0
 8006730:	2101      	movs	r1, #1
 8006732:	0018      	movs	r0, r3
 8006734:	f003 ff82 	bl	800a63c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006738:	2380      	movs	r3, #128	@ 0x80
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	4869      	ldr	r0, [pc, #420]	@ (80068e4 <MIC_Print+0x358>)
 800673e:	2201      	movs	r2, #1
 8006740:	0019      	movs	r1, r3
 8006742:	f003 ff7b 	bl	800a63c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006746:	2380      	movs	r3, #128	@ 0x80
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4866      	ldr	r0, [pc, #408]	@ (80068e4 <MIC_Print+0x358>)
 800674c:	2201      	movs	r2, #1
 800674e:	0019      	movs	r1, r3
 8006750:	f003 ff74 	bl	800a63c <HAL_GPIO_WritePin>
  }
  if(dBc < 80 && dBc >= 75){//purple
 8006754:	4b5c      	ldr	r3, [pc, #368]	@ (80068c8 <MIC_Print+0x33c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4963      	ldr	r1, [pc, #396]	@ (80068e8 <MIC_Print+0x35c>)
 800675a:	1c18      	adds	r0, r3, #0
 800675c:	f7f9 feb6 	bl	80004cc <__aeabi_fcmplt>
 8006760:	1e03      	subs	r3, r0, #0
 8006762:	d01b      	beq.n	800679c <MIC_Print+0x210>
 8006764:	4b58      	ldr	r3, [pc, #352]	@ (80068c8 <MIC_Print+0x33c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4960      	ldr	r1, [pc, #384]	@ (80068ec <MIC_Print+0x360>)
 800676a:	1c18      	adds	r0, r3, #0
 800676c:	f7f9 fecc 	bl	8000508 <__aeabi_fcmpge>
 8006770:	1e03      	subs	r3, r0, #0
 8006772:	d013      	beq.n	800679c <MIC_Print+0x210>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006774:	4b5b      	ldr	r3, [pc, #364]	@ (80068e4 <MIC_Print+0x358>)
 8006776:	2200      	movs	r2, #0
 8006778:	2101      	movs	r1, #1
 800677a:	0018      	movs	r0, r3
 800677c:	f003 ff5e 	bl	800a63c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006780:	2380      	movs	r3, #128	@ 0x80
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	4857      	ldr	r0, [pc, #348]	@ (80068e4 <MIC_Print+0x358>)
 8006786:	2201      	movs	r2, #1
 8006788:	0019      	movs	r1, r3
 800678a:	f003 ff57 	bl	800a63c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 800678e:	2380      	movs	r3, #128	@ 0x80
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4854      	ldr	r0, [pc, #336]	@ (80068e4 <MIC_Print+0x358>)
 8006794:	2200      	movs	r2, #0
 8006796:	0019      	movs	r1, r3
 8006798:	f003 ff50 	bl	800a63c <HAL_GPIO_WritePin>
  }
  if(dBc < 75 && dBc >= 70){//yellow
 800679c:	4b4a      	ldr	r3, [pc, #296]	@ (80068c8 <MIC_Print+0x33c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4952      	ldr	r1, [pc, #328]	@ (80068ec <MIC_Print+0x360>)
 80067a2:	1c18      	adds	r0, r3, #0
 80067a4:	f7f9 fe92 	bl	80004cc <__aeabi_fcmplt>
 80067a8:	1e03      	subs	r3, r0, #0
 80067aa:	d01b      	beq.n	80067e4 <MIC_Print+0x258>
 80067ac:	4b46      	ldr	r3, [pc, #280]	@ (80068c8 <MIC_Print+0x33c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	494f      	ldr	r1, [pc, #316]	@ (80068f0 <MIC_Print+0x364>)
 80067b2:	1c18      	adds	r0, r3, #0
 80067b4:	f7f9 fea8 	bl	8000508 <__aeabi_fcmpge>
 80067b8:	1e03      	subs	r3, r0, #0
 80067ba:	d013      	beq.n	80067e4 <MIC_Print+0x258>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80067bc:	4b49      	ldr	r3, [pc, #292]	@ (80068e4 <MIC_Print+0x358>)
 80067be:	2200      	movs	r2, #0
 80067c0:	2101      	movs	r1, #1
 80067c2:	0018      	movs	r0, r3
 80067c4:	f003 ff3a 	bl	800a63c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 80067c8:	2380      	movs	r3, #128	@ 0x80
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	4845      	ldr	r0, [pc, #276]	@ (80068e4 <MIC_Print+0x358>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	0019      	movs	r1, r3
 80067d2:	f003 ff33 	bl	800a63c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80067d6:	2380      	movs	r3, #128	@ 0x80
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4842      	ldr	r0, [pc, #264]	@ (80068e4 <MIC_Print+0x358>)
 80067dc:	2201      	movs	r2, #1
 80067de:	0019      	movs	r1, r3
 80067e0:	f003 ff2c 	bl	800a63c <HAL_GPIO_WritePin>
  }
  if(dBc < 70 && dBc >= 65){//Green
 80067e4:	4b38      	ldr	r3, [pc, #224]	@ (80068c8 <MIC_Print+0x33c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4941      	ldr	r1, [pc, #260]	@ (80068f0 <MIC_Print+0x364>)
 80067ea:	1c18      	adds	r0, r3, #0
 80067ec:	f7f9 fe6e 	bl	80004cc <__aeabi_fcmplt>
 80067f0:	1e03      	subs	r3, r0, #0
 80067f2:	d01b      	beq.n	800682c <MIC_Print+0x2a0>
 80067f4:	4b34      	ldr	r3, [pc, #208]	@ (80068c8 <MIC_Print+0x33c>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	493e      	ldr	r1, [pc, #248]	@ (80068f4 <MIC_Print+0x368>)
 80067fa:	1c18      	adds	r0, r3, #0
 80067fc:	f7f9 fe84 	bl	8000508 <__aeabi_fcmpge>
 8006800:	1e03      	subs	r3, r0, #0
 8006802:	d013      	beq.n	800682c <MIC_Print+0x2a0>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8006804:	4b37      	ldr	r3, [pc, #220]	@ (80068e4 <MIC_Print+0x358>)
 8006806:	2201      	movs	r2, #1
 8006808:	2101      	movs	r1, #1
 800680a:	0018      	movs	r0, r3
 800680c:	f003 ff16 	bl	800a63c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8006810:	2380      	movs	r3, #128	@ 0x80
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	4833      	ldr	r0, [pc, #204]	@ (80068e4 <MIC_Print+0x358>)
 8006816:	2200      	movs	r2, #0
 8006818:	0019      	movs	r1, r3
 800681a:	f003 ff0f 	bl	800a63c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800681e:	2380      	movs	r3, #128	@ 0x80
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4830      	ldr	r0, [pc, #192]	@ (80068e4 <MIC_Print+0x358>)
 8006824:	2201      	movs	r2, #1
 8006826:	0019      	movs	r1, r3
 8006828:	f003 ff08 	bl	800a63c <HAL_GPIO_WritePin>
  }
  if(dBc < 65 && dBc >= 60){//blue
 800682c:	4b26      	ldr	r3, [pc, #152]	@ (80068c8 <MIC_Print+0x33c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4930      	ldr	r1, [pc, #192]	@ (80068f4 <MIC_Print+0x368>)
 8006832:	1c18      	adds	r0, r3, #0
 8006834:	f7f9 fe4a 	bl	80004cc <__aeabi_fcmplt>
 8006838:	1e03      	subs	r3, r0, #0
 800683a:	d01b      	beq.n	8006874 <MIC_Print+0x2e8>
 800683c:	4b22      	ldr	r3, [pc, #136]	@ (80068c8 <MIC_Print+0x33c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	492d      	ldr	r1, [pc, #180]	@ (80068f8 <MIC_Print+0x36c>)
 8006842:	1c18      	adds	r0, r3, #0
 8006844:	f7f9 fe60 	bl	8000508 <__aeabi_fcmpge>
 8006848:	1e03      	subs	r3, r0, #0
 800684a:	d013      	beq.n	8006874 <MIC_Print+0x2e8>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 800684c:	4b25      	ldr	r3, [pc, #148]	@ (80068e4 <MIC_Print+0x358>)
 800684e:	2201      	movs	r2, #1
 8006850:	2101      	movs	r1, #1
 8006852:	0018      	movs	r0, r3
 8006854:	f003 fef2 	bl	800a63c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006858:	2380      	movs	r3, #128	@ 0x80
 800685a:	005b      	lsls	r3, r3, #1
 800685c:	4821      	ldr	r0, [pc, #132]	@ (80068e4 <MIC_Print+0x358>)
 800685e:	2201      	movs	r2, #1
 8006860:	0019      	movs	r1, r3
 8006862:	f003 feeb 	bl	800a63c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8006866:	2380      	movs	r3, #128	@ 0x80
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	481e      	ldr	r0, [pc, #120]	@ (80068e4 <MIC_Print+0x358>)
 800686c:	2200      	movs	r2, #0
 800686e:	0019      	movs	r1, r3
 8006870:	f003 fee4 	bl	800a63c <HAL_GPIO_WritePin>
  }
  if(dBc < 60){//light blue
 8006874:	4b14      	ldr	r3, [pc, #80]	@ (80068c8 <MIC_Print+0x33c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	491f      	ldr	r1, [pc, #124]	@ (80068f8 <MIC_Print+0x36c>)
 800687a:	1c18      	adds	r0, r3, #0
 800687c:	f7f9 fe26 	bl	80004cc <__aeabi_fcmplt>
 8006880:	1e03      	subs	r3, r0, #0
 8006882:	d100      	bne.n	8006886 <MIC_Print+0x2fa>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
  }


  //FFT();
}
 8006884:	e013      	b.n	80068ae <MIC_Print+0x322>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8006886:	4b17      	ldr	r3, [pc, #92]	@ (80068e4 <MIC_Print+0x358>)
 8006888:	2201      	movs	r2, #1
 800688a:	2101      	movs	r1, #1
 800688c:	0018      	movs	r0, r3
 800688e:	f003 fed5 	bl	800a63c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8006892:	2380      	movs	r3, #128	@ 0x80
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	4813      	ldr	r0, [pc, #76]	@ (80068e4 <MIC_Print+0x358>)
 8006898:	2200      	movs	r2, #0
 800689a:	0019      	movs	r1, r3
 800689c:	f003 fece 	bl	800a63c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 80068a0:	2380      	movs	r3, #128	@ 0x80
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	480f      	ldr	r0, [pc, #60]	@ (80068e4 <MIC_Print+0x358>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	0019      	movs	r1, r3
 80068aa:	f003 fec7 	bl	800a63c <HAL_GPIO_WritePin>
}
 80068ae:	46c0      	nop			@ (mov r8, r8)
 80068b0:	46bd      	mov	sp, r7
 80068b2:	b004      	add	sp, #16
 80068b4:	bdb0      	pop	{r4, r5, r7, pc}
 80068b6:	46c0      	nop			@ (mov r8, r8)
 80068b8:	08019ec8 	.word	0x08019ec8
 80068bc:	08019ec4 	.word	0x08019ec4
 80068c0:	20000d20 	.word	0x20000d20
 80068c4:	20001d5c 	.word	0x20001d5c
 80068c8:	20001d28 	.word	0x20001d28
 80068cc:	20001d58 	.word	0x20001d58
 80068d0:	20001d2c 	.word	0x20001d2c
 80068d4:	20001d59 	.word	0x20001d59
 80068d8:	20001d54 	.word	0x20001d54
 80068dc:	41200000 	.word	0x41200000
 80068e0:	42aa0000 	.word	0x42aa0000
 80068e4:	50000400 	.word	0x50000400
 80068e8:	42a00000 	.word	0x42a00000
 80068ec:	42960000 	.word	0x42960000
 80068f0:	428c0000 	.word	0x428c0000
 80068f4:	42820000 	.word	0x42820000
 80068f8:	42700000 	.word	0x42700000

080068fc <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  if(DataReady) {
 8006900:	4b0c      	ldr	r3, [pc, #48]	@ (8006934 <MIC_MeasurementDone+0x38>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00f      	beq.n	800692a <MIC_MeasurementDone+0x2e>
    MIC_Print();
 800690a:	f7ff fe3f 	bl	800658c <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples);
 800690e:	4b0a      	ldr	r3, [pc, #40]	@ (8006938 <MIC_MeasurementDone+0x3c>)
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	4a0a      	ldr	r2, [pc, #40]	@ (800693c <MIC_MeasurementDone+0x40>)
 8006914:	490a      	ldr	r1, [pc, #40]	@ (8006940 <MIC_MeasurementDone+0x44>)
 8006916:	2003      	movs	r0, #3
 8006918:	f002 f8e4 	bl	8008ae4 <CreateLine>
    TIM2 -> CCR1 = 4000;
 800691c:	2380      	movs	r3, #128	@ 0x80
 800691e:	05db      	lsls	r3, r3, #23
 8006920:	22fa      	movs	r2, #250	@ 0xfa
 8006922:	0112      	lsls	r2, r2, #4
 8006924:	635a      	str	r2, [r3, #52]	@ 0x34
    return true;
 8006926:	2301      	movs	r3, #1
 8006928:	e000      	b.n	800692c <MIC_MeasurementDone+0x30>
  }
  return false;
 800692a:	2300      	movs	r3, #0
}
 800692c:	0018      	movs	r0, r3
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	46c0      	nop			@ (mov r8, r8)
 8006934:	20001d25 	.word	0x20001d25
 8006938:	2000010c 	.word	0x2000010c
 800693c:	08019ed4 	.word	0x08019ed4
 8006940:	08019eb4 	.word	0x08019eb4

08006944 <MIC_TestMeasurementDone>:
bool MIC_TestMeasurementDone(void) {
 8006944:	b590      	push	{r4, r7, lr}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
  bool Check;
  if(DataReady) {
 800694a:	4b0b      	ldr	r3, [pc, #44]	@ (8006978 <MIC_TestMeasurementDone+0x34>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00c      	beq.n	800696e <MIC_TestMeasurementDone+0x2a>
    Check = MIC_Check();
 8006954:	1dfc      	adds	r4, r7, #7
 8006956:	f7ff fdc3 	bl	80064e0 <MIC_Check>
 800695a:	0003      	movs	r3, r0
 800695c:	7023      	strb	r3, [r4, #0]
    TIM2 -> CCR1 = 4000;
 800695e:	2380      	movs	r3, #128	@ 0x80
 8006960:	05db      	lsls	r3, r3, #23
 8006962:	22fa      	movs	r2, #250	@ 0xfa
 8006964:	0112      	lsls	r2, r2, #4
 8006966:	635a      	str	r2, [r3, #52]	@ 0x34
    return Check;
 8006968:	1dfb      	adds	r3, r7, #7
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	e000      	b.n	8006970 <MIC_TestMeasurementDone+0x2c>
  }
  return false;
 800696e:	2300      	movs	r3, #0
}
 8006970:	0018      	movs	r0, r3
 8006972:	46bd      	mov	sp, r7
 8006974:	b003      	add	sp, #12
 8006976:	bd90      	pop	{r4, r7, pc}
 8006978:	20001d25 	.word	0x20001d25

0800697c <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 8006984:	4b10      	ldr	r3, [pc, #64]	@ (80069c8 <HAL_I2S_RxCpltCallback+0x4c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	429a      	cmp	r2, r3
 800698c:	d118      	bne.n	80069c0 <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 800698e:	4b0f      	ldr	r3, [pc, #60]	@ (80069cc <HAL_I2S_RxCpltCallback+0x50>)
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	d008      	beq.n	80069aa <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 8006998:	4b0b      	ldr	r3, [pc, #44]	@ (80069c8 <HAL_I2S_RxCpltCallback+0x4c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	0018      	movs	r0, r3
 800699e:	f006 f85b 	bl	800ca58 <HAL_I2S_DMAStop>
    DataReady = true;
 80069a2:	4b0b      	ldr	r3, [pc, #44]	@ (80069d0 <HAL_I2S_RxCpltCallback+0x54>)
 80069a4:	2201      	movs	r2, #1
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	e00b      	b.n	80069c2 <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 80069aa:	4b0a      	ldr	r3, [pc, #40]	@ (80069d4 <HAL_I2S_RxCpltCallback+0x58>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	0018      	movs	r0, r3
 80069b0:	f002 f842 	bl	8008a38 <TimestampIsReached>
 80069b4:	1e03      	subs	r3, r0, #0
 80069b6:	d004      	beq.n	80069c2 <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 80069b8:	4b04      	ldr	r3, [pc, #16]	@ (80069cc <HAL_I2S_RxCpltCallback+0x50>)
 80069ba:	2201      	movs	r2, #1
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	e000      	b.n	80069c2 <HAL_I2S_RxCpltCallback+0x46>
    return;
 80069c0:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 80069c2:	46bd      	mov	sp, r7
 80069c4:	b002      	add	sp, #8
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	20000d1c 	.word	0x20000d1c
 80069cc:	20001d24 	.word	0x20001d24
 80069d0:	20001d25 	.word	0x20001d25
 80069d4:	20001d20 	.word	0x20001d20

080069d8 <MIC_GetDB>:

float MIC_GetDB(void) {
 80069d8:	b590      	push	{r4, r7, lr}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
    float sum = 0.0f;
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
    float dBValue = 0.0f;
 80069e2:	2300      	movs	r3, #0
 80069e4:	607b      	str	r3, [r7, #4]

    // Calculate the sum of the magnitudes in FFTResult
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 80069e6:	230a      	movs	r3, #10
 80069e8:	18fb      	adds	r3, r7, r3
 80069ea:	2280      	movs	r2, #128	@ 0x80
 80069ec:	0052      	lsls	r2, r2, #1
 80069ee:	801a      	strh	r2, [r3, #0]
 80069f0:	e019      	b.n	8006a26 <MIC_GetDB+0x4e>
      // Sum of squares of magnitudes
      sum += sample[i]*sample[i];
 80069f2:	240a      	movs	r4, #10
 80069f4:	193b      	adds	r3, r7, r4
 80069f6:	881a      	ldrh	r2, [r3, #0]
 80069f8:	4b2b      	ldr	r3, [pc, #172]	@ (8006aa8 <MIC_GetDB+0xd0>)
 80069fa:	0092      	lsls	r2, r2, #2
 80069fc:	58d0      	ldr	r0, [r2, r3]
 80069fe:	193b      	adds	r3, r7, r4
 8006a00:	881a      	ldrh	r2, [r3, #0]
 8006a02:	4b29      	ldr	r3, [pc, #164]	@ (8006aa8 <MIC_GetDB+0xd0>)
 8006a04:	0092      	lsls	r2, r2, #2
 8006a06:	58d3      	ldr	r3, [r2, r3]
 8006a08:	1c19      	adds	r1, r3, #0
 8006a0a:	f7fa fa47 	bl	8000e9c <__aeabi_fmul>
 8006a0e:	1c03      	adds	r3, r0, #0
 8006a10:	1c19      	adds	r1, r3, #0
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f7f9 fed2 	bl	80007bc <__aeabi_fadd>
 8006a18:	1c03      	adds	r3, r0, #0
 8006a1a:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 8006a1c:	193b      	adds	r3, r7, r4
 8006a1e:	881a      	ldrh	r2, [r3, #0]
 8006a20:	193b      	adds	r3, r7, r4
 8006a22:	3201      	adds	r2, #1
 8006a24:	801a      	strh	r2, [r3, #0]
 8006a26:	230a      	movs	r3, #10
 8006a28:	18fb      	adds	r3, r7, r3
 8006a2a:	881a      	ldrh	r2, [r3, #0]
 8006a2c:	2380      	movs	r3, #128	@ 0x80
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d3de      	bcc.n	80069f2 <MIC_GetDB+0x1a>
    }

    // Calculate the root mean square (RMS)
    float rms = sqrt(sum/(float)(NUMBER_OF_SAMPLES/2));
 8006a34:	2187      	movs	r1, #135	@ 0x87
 8006a36:	05c9      	lsls	r1, r1, #23
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f7fa f849 	bl	8000ad0 <__aeabi_fdiv>
 8006a3e:	1c03      	adds	r3, r0, #0
 8006a40:	1c18      	adds	r0, r3, #0
 8006a42:	f7fc fc8d 	bl	8003360 <__aeabi_f2d>
 8006a46:	0002      	movs	r2, r0
 8006a48:	000b      	movs	r3, r1
 8006a4a:	0010      	movs	r0, r2
 8006a4c:	0019      	movs	r1, r3
 8006a4e:	f012 f9dd 	bl	8018e0c <sqrt>
 8006a52:	0002      	movs	r2, r0
 8006a54:	000b      	movs	r3, r1
 8006a56:	0010      	movs	r0, r2
 8006a58:	0019      	movs	r1, r3
 8006a5a:	f7fc fcc9 	bl	80033f0 <__aeabi_d2f>
 8006a5e:	1c03      	adds	r3, r0, #0
 8006a60:	603b      	str	r3, [r7, #0]

    // Convert the RMS value to dB
    dBValue = 20.0f * log10(rms) +120.0;
 8006a62:	6838      	ldr	r0, [r7, #0]
 8006a64:	f7fc fc7c 	bl	8003360 <__aeabi_f2d>
 8006a68:	0002      	movs	r2, r0
 8006a6a:	000b      	movs	r3, r1
 8006a6c:	0010      	movs	r0, r2
 8006a6e:	0019      	movs	r1, r3
 8006a70:	f012 f996 	bl	8018da0 <log10>
 8006a74:	2200      	movs	r2, #0
 8006a76:	4b0d      	ldr	r3, [pc, #52]	@ (8006aac <MIC_GetDB+0xd4>)
 8006a78:	f7fb fd5e 	bl	8002538 <__aeabi_dmul>
 8006a7c:	0002      	movs	r2, r0
 8006a7e:	000b      	movs	r3, r1
 8006a80:	0010      	movs	r0, r2
 8006a82:	0019      	movs	r1, r3
 8006a84:	2200      	movs	r2, #0
 8006a86:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab0 <MIC_GetDB+0xd8>)
 8006a88:	f7fa fdae 	bl	80015e8 <__aeabi_dadd>
 8006a8c:	0002      	movs	r2, r0
 8006a8e:	000b      	movs	r3, r1
 8006a90:	0010      	movs	r0, r2
 8006a92:	0019      	movs	r1, r3
 8006a94:	f7fc fcac 	bl	80033f0 <__aeabi_d2f>
 8006a98:	1c03      	adds	r3, r0, #0
 8006a9a:	607b      	str	r3, [r7, #4]

    return dBValue;
 8006a9c:	687b      	ldr	r3, [r7, #4]
}
 8006a9e:	1c18      	adds	r0, r3, #0
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	b005      	add	sp, #20
 8006aa4:	bd90      	pop	{r4, r7, pc}
 8006aa6:	46c0      	nop			@ (mov r8, r8)
 8006aa8:	20001d5c 	.word	0x20001d5c
 8006aac:	40340000 	.word	0x40340000
 8006ab0:	405e0000 	.word	0x405e0000

08006ab4 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d113      	bne.n	8006afa <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	22fe      	movs	r2, #254	@ 0xfe
 8006ad6:	0592      	lsls	r2, r2, #22
 8006ad8:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4a1a      	ldr	r2, [pc, #104]	@ (8006b48 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8006ade:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4a1a      	ldr	r2, [pc, #104]	@ (8006b4c <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8006ae4:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4a19      	ldr	r2, [pc, #100]	@ (8006b50 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8006aea:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4a19      	ldr	r2, [pc, #100]	@ (8006b54 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8006af0:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4a18      	ldr	r2, [pc, #96]	@ (8006b58 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8006af6:	61da      	str	r2, [r3, #28]
 8006af8:	e011      	b.n	8006b1e <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4a17      	ldr	r2, [pc, #92]	@ (8006b5c <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8006afe:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4a17      	ldr	r2, [pc, #92]	@ (8006b60 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8006b04:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4a16      	ldr	r2, [pc, #88]	@ (8006b64 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8006b0a:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4a16      	ldr	r2, [pc, #88]	@ (8006b68 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8006b10:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4a15      	ldr	r2, [pc, #84]	@ (8006b6c <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8006b16:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4a15      	ldr	r2, [pc, #84]	@ (8006b70 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8006b1c:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4a14      	ldr	r2, [pc, #80]	@ (8006b74 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8006b22:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4a14      	ldr	r2, [pc, #80]	@ (8006b78 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8006b28:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4a12      	ldr	r2, [pc, #72]	@ (8006b78 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8006b2e:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4a12      	ldr	r2, [pc, #72]	@ (8006b7c <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8006b34:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f000 f831 	bl	8006ba0 <GasIndexAlgorithm_reset>
}
 8006b3e:	46c0      	nop			@ (mov r8, r8)
 8006b40:	46bd      	mov	sp, r7
 8006b42:	b004      	add	sp, #16
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	46c0      	nop			@ (mov r8, r8)
 8006b48:	00002710 	.word	0x00002710
 8006b4c:	44340000 	.word	0x44340000
 8006b50:	46859800 	.word	0x46859800
 8006b54:	46a05000 	.word	0x46a05000
 8006b58:	41f00000 	.word	0x41f00000
 8006b5c:	42c80000 	.word	0x42c80000
 8006b60:	00004e20 	.word	0x00004e20
 8006b64:	43340000 	.word	0x43340000
 8006b68:	4528c000 	.word	0x4528c000
 8006b6c:	45a32000 	.word	0x45a32000
 8006b70:	43aa0000 	.word	0x43aa0000
 8006b74:	43660000 	.word	0x43660000
 8006b78:	41400000 	.word	0x41400000
 8006b7c:	42480000 	.word	0x42480000

08006b80 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8006b8a:	22fe      	movs	r2, #254	@ 0xfe
 8006b8c:	0592      	lsls	r2, r2, #22
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	0018      	movs	r0, r3
 8006b94:	f7ff ff8e 	bl	8006ab4 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8006b98:	46c0      	nop			@ (mov r8, r8)
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	b002      	add	sp, #8
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	f000 f805 	bl	8006bcc <GasIndexAlgorithm__init_instances>
}
 8006bc2:	46c0      	nop			@ (mov r8, r8)
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	b002      	add	sp, #8
 8006bc8:	bd80      	pop	{r7, pc}
	...

08006bcc <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8006bcc:	b590      	push	{r4, r7, lr}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	f000 f8e8 	bl	8006dac <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	0018      	movs	r0, r3
 8006be0:	f000 f9a6 	bl	8006f30 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8006be4:	1c04      	adds	r4, r0, #0
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	0018      	movs	r0, r3
 8006bea:	f000 f9ab 	bl	8006f44 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8006bee:	1c02      	adds	r2, r0, #0
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	1c21      	adds	r1, r4, #0
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	f000 fc3b 	bl	8007470 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d107      	bne.n	8006c12 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8006c02:	23fe      	movs	r3, #254	@ 0xfe
 8006c04:	059b      	lsls	r3, r3, #22
 8006c06:	4a0a      	ldr	r2, [pc, #40]	@ (8006c30 <GasIndexAlgorithm__init_instances+0x64>)
 8006c08:	490a      	ldr	r1, [pc, #40]	@ (8006c34 <GasIndexAlgorithm__init_instances+0x68>)
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fc86 	bl	800751c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8006c10:	e005      	b.n	8006c1e <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8006c12:	4b09      	ldr	r3, [pc, #36]	@ (8006c38 <GasIndexAlgorithm__init_instances+0x6c>)
 8006c14:	4a09      	ldr	r2, [pc, #36]	@ (8006c3c <GasIndexAlgorithm__init_instances+0x70>)
 8006c16:	490a      	ldr	r1, [pc, #40]	@ (8006c40 <GasIndexAlgorithm__init_instances+0x74>)
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fc7f 	bl	800751c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	0018      	movs	r0, r3
 8006c22:	f000 fd35 	bl	8007690 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8006c26:	46c0      	nop			@ (mov r8, r8)
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	b003      	add	sp, #12
 8006c2c:	bd90      	pop	{r4, r7, pc}
 8006c2e:	46c0      	nop			@ (mov r8, r8)
 8006c30:	bc257a78 	.word	0xbc257a78
 8006c34:	44198000 	.word	0x44198000
 8006c38:	42c80000 	.word	0x42c80000
 8006c3c:	bbd4fdf4 	.word	0xbbd4fdf4
 8006c40:	43550000 	.word	0x43550000

08006c44 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8006c44:	b590      	push	{r4, r7, lr}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c54:	4952      	ldr	r1, [pc, #328]	@ (8006da0 <GasIndexAlgorithm_process+0x15c>)
 8006c56:	1c18      	adds	r0, r3, #0
 8006c58:	f7f9 fc42 	bl	80004e0 <__aeabi_fcmple>
 8006c5c:	1e03      	subs	r3, r0, #0
 8006c5e:	d00c      	beq.n	8006c7a <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	1c19      	adds	r1, r3, #0
 8006c6a:	1c10      	adds	r0, r2, #0
 8006c6c:	f7f9 fda6 	bl	80007bc <__aeabi_fadd>
 8006c70:	1c03      	adds	r3, r0, #0
 8006c72:	1c1a      	adds	r2, r3, #0
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c78:	e080      	b.n	8006d7c <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	dd25      	ble.n	8006ccc <GasIndexAlgorithm_process+0x88>
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4a48      	ldr	r2, [pc, #288]	@ (8006da4 <GasIndexAlgorithm_process+0x160>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	dc21      	bgt.n	8006ccc <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	dc04      	bgt.n	8006c9c <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	3301      	adds	r3, #1
 8006c98:	60bb      	str	r3, [r7, #8]
 8006c9a:	e00d      	b.n	8006cb8 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	4a41      	ldr	r2, [pc, #260]	@ (8006da8 <GasIndexAlgorithm_process+0x164>)
 8006ca2:	4694      	mov	ip, r2
 8006ca4:	4463      	add	r3, ip
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	dd05      	ble.n	8006cb8 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	4a3d      	ldr	r2, [pc, #244]	@ (8006da8 <GasIndexAlgorithm_process+0x164>)
 8006cb2:	4694      	mov	ip, r2
 8006cb4:	4463      	add	r3, ip
 8006cb6:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f7fa fc03 	bl	80014cc <__aeabi_i2f>
 8006cc6:	1c02      	adds	r2, r0, #0
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d005      	beq.n	8006ce0 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	f000 f945 	bl	8006f66 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8006cdc:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8006cde:	d014      	beq.n	8006d0a <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	1c11      	adds	r1, r2, #0
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f000 fbd1 	bl	8007490 <GasIndexAlgorithm__mox_model__process>
 8006cee:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	1c11      	adds	r1, r2, #0
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f000 fc25 	bl	800754c <GasIndexAlgorithm__sigmoid_scaled__process>
 8006d02:	1c02      	adds	r2, r0, #0
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	639a      	str	r2, [r3, #56]	@ 0x38
 8006d08:	e003      	b.n	8006d12 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	689a      	ldr	r2, [r3, #8]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	1c11      	adds	r1, r2, #0
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	f000 fcec 	bl	80076f8 <GasIndexAlgorithm__adaptive_lowpass__process>
 8006d20:	1c02      	adds	r2, r0, #0
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2a:	21fc      	movs	r1, #252	@ 0xfc
 8006d2c:	0589      	lsls	r1, r1, #22
 8006d2e:	1c18      	adds	r0, r3, #0
 8006d30:	f7f9 fbcc 	bl	80004cc <__aeabi_fcmplt>
 8006d34:	1e03      	subs	r3, r0, #0
 8006d36:	d003      	beq.n	8006d40 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	22fc      	movs	r2, #252	@ 0xfc
 8006d3c:	0592      	lsls	r2, r2, #22
 8006d3e:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d44:	2100      	movs	r1, #0
 8006d46:	1c18      	adds	r0, r3, #0
 8006d48:	f7f9 fbd4 	bl	80004f4 <__aeabi_fcmpgt>
 8006d4c:	1e03      	subs	r3, r0, #0
 8006d4e:	d015      	beq.n	8006d7c <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	1c11      	adds	r1, r2, #0
 8006d58:	0018      	movs	r0, r3
 8006d5a:	f000 fa4f 	bl	80071fc <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	0018      	movs	r0, r3
 8006d62:	f000 f8e5 	bl	8006f30 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8006d66:	1c04      	adds	r4, r0, #0
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	0018      	movs	r0, r3
 8006d6c:	f000 f8ea 	bl	8006f44 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8006d70:	1c02      	adds	r2, r0, #0
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	1c21      	adds	r1, r4, #0
 8006d76:	0018      	movs	r0, r3
 8006d78:	f000 fb7a 	bl	8007470 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d80:	21fc      	movs	r1, #252	@ 0xfc
 8006d82:	0589      	lsls	r1, r1, #22
 8006d84:	1c18      	adds	r0, r3, #0
 8006d86:	f7f9 fd19 	bl	80007bc <__aeabi_fadd>
 8006d8a:	1c03      	adds	r3, r0, #0
 8006d8c:	1c18      	adds	r0, r3, #0
 8006d8e:	f7fa fb7d 	bl	800148c <__aeabi_f2iz>
 8006d92:	0002      	movs	r2, r0
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	601a      	str	r2, [r3, #0]
    return;
 8006d98:	46c0      	nop			@ (mov r8, r8)
}
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	b005      	add	sp, #20
 8006d9e:	bd90      	pop	{r4, r7, pc}
 8006da0:	42340000 	.word	0x42340000
 8006da4:	0000fde7 	.word	0x0000fde7
 8006da8:	00007fff 	.word	0x00007fff

08006dac <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8006dac:	b5b0      	push	{r4, r5, r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	223c      	movs	r2, #60	@ 0x3c
 8006db8:	2100      	movs	r1, #0
 8006dba:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	4952      	ldr	r1, [pc, #328]	@ (8006f20 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006dd6:	1c18      	adds	r0, r3, #0
 8006dd8:	f7f9 fe7a 	bl	8000ad0 <__aeabi_fdiv>
 8006ddc:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006dde:	2188      	movs	r1, #136	@ 0x88
 8006de0:	05c9      	lsls	r1, r1, #23
 8006de2:	1c18      	adds	r0, r3, #0
 8006de4:	f7fa f85a 	bl	8000e9c <__aeabi_fmul>
 8006de8:	1c03      	adds	r3, r0, #0
 8006dea:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	494a      	ldr	r1, [pc, #296]	@ (8006f20 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006df6:	1c18      	adds	r0, r3, #0
 8006df8:	f7f9 fe6a 	bl	8000ad0 <__aeabi_fdiv>
 8006dfc:	1c03      	adds	r3, r0, #0
 8006dfe:	1c19      	adds	r1, r3, #0
 8006e00:	1c20      	adds	r0, r4, #0
 8006e02:	f7f9 fcdb 	bl	80007bc <__aeabi_fadd>
 8006e06:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8006e08:	1c19      	adds	r1, r3, #0
 8006e0a:	1c28      	adds	r0, r5, #0
 8006e0c:	f7f9 fe60 	bl	8000ad0 <__aeabi_fdiv>
 8006e10:	1c03      	adds	r3, r0, #0
 8006e12:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	4940      	ldr	r1, [pc, #256]	@ (8006f20 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006e1e:	1c18      	adds	r0, r3, #0
 8006e20:	f7f9 fe56 	bl	8000ad0 <__aeabi_fdiv>
 8006e24:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006e26:	2185      	movs	r1, #133	@ 0x85
 8006e28:	05c9      	lsls	r1, r1, #23
 8006e2a:	1c18      	adds	r0, r3, #0
 8006e2c:	f7fa f836 	bl	8000e9c <__aeabi_fmul>
 8006e30:	1c03      	adds	r3, r0, #0
 8006e32:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	4938      	ldr	r1, [pc, #224]	@ (8006f20 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006e3e:	1c18      	adds	r0, r3, #0
 8006e40:	f7f9 fe46 	bl	8000ad0 <__aeabi_fdiv>
 8006e44:	1c03      	adds	r3, r0, #0
 8006e46:	1c19      	adds	r1, r3, #0
 8006e48:	1c20      	adds	r0, r4, #0
 8006e4a:	f7f9 fcb7 	bl	80007bc <__aeabi_fadd>
 8006e4e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8006e50:	1c19      	adds	r1, r3, #0
 8006e52:	1c28      	adds	r0, r5, #0
 8006e54:	f7f9 fe3c 	bl	8000ad0 <__aeabi_fdiv>
 8006e58:	1c03      	adds	r3, r0, #0
 8006e5a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d118      	bne.n	8006e9a <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006e6c:	2188      	movs	r1, #136	@ 0x88
 8006e6e:	05c9      	lsls	r1, r1, #23
 8006e70:	1c18      	adds	r0, r3, #0
 8006e72:	f7fa f813 	bl	8000e9c <__aeabi_fmul>
 8006e76:	1c03      	adds	r3, r0, #0
 8006e78:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8006e7e:	4929      	ldr	r1, [pc, #164]	@ (8006f24 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8006e80:	1c18      	adds	r0, r3, #0
 8006e82:	f7f9 fc9b 	bl	80007bc <__aeabi_fadd>
 8006e86:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8006e88:	1c19      	adds	r1, r3, #0
 8006e8a:	1c20      	adds	r0, r4, #0
 8006e8c:	f7f9 fe20 	bl	8000ad0 <__aeabi_fdiv>
 8006e90:	1c03      	adds	r3, r0, #0
 8006e92:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	655a      	str	r2, [r3, #84]	@ 0x54
 8006e98:	e017      	b.n	8006eca <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006e9e:	2188      	movs	r1, #136	@ 0x88
 8006ea0:	05c9      	lsls	r1, r1, #23
 8006ea2:	1c18      	adds	r0, r3, #0
 8006ea4:	f7f9 fffa 	bl	8000e9c <__aeabi_fmul>
 8006ea8:	1c03      	adds	r3, r0, #0
 8006eaa:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8006eb0:	491d      	ldr	r1, [pc, #116]	@ (8006f28 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8006eb2:	1c18      	adds	r0, r3, #0
 8006eb4:	f7f9 fc82 	bl	80007bc <__aeabi_fadd>
 8006eb8:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8006eba:	1c19      	adds	r1, r3, #0
 8006ebc:	1c20      	adds	r0, r4, #0
 8006ebe:	f7f9 fe07 	bl	8000ad0 <__aeabi_fdiv>
 8006ec2:	1c03      	adds	r3, r0, #0
 8006ec4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006ece:	2185      	movs	r1, #133	@ 0x85
 8006ed0:	05c9      	lsls	r1, r1, #23
 8006ed2:	1c18      	adds	r0, r3, #0
 8006ed4:	f7f9 ffe2 	bl	8000e9c <__aeabi_fmul>
 8006ed8:	1c03      	adds	r3, r0, #0
 8006eda:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	4912      	ldr	r1, [pc, #72]	@ (8006f2c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8006ee2:	1c18      	adds	r0, r3, #0
 8006ee4:	f7f9 fc6a 	bl	80007bc <__aeabi_fadd>
 8006ee8:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8006eea:	1c19      	adds	r1, r3, #0
 8006eec:	1c20      	adds	r0, r4, #0
 8006eee:	f7f9 fdef 	bl	8000ad0 <__aeabi_fdiv>
 8006ef2:	1c03      	adds	r3, r0, #0
 8006ef4:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8006f18:	46c0      	nop			@ (mov r8, r8)
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	b002      	add	sp, #8
 8006f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8006f20:	45610000 	.word	0x45610000
 8006f24:	44960000 	.word	0x44960000
 8006f28:	41a00000 	.word	0x41a00000
 8006f2c:	451c4000 	.word	0x451c4000

08006f30 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8006f3c:	1c18      	adds	r0, r3, #0
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	b002      	add	sp, #8
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8006f54:	1c19      	adds	r1, r3, #0
 8006f56:	1c10      	adds	r0, r2, #0
 8006f58:	f7f9 fc30 	bl	80007bc <__aeabi_fadd>
 8006f5c:	1c03      	adds	r3, r0, #0
}
 8006f5e:	1c18      	adds	r0, r3, #0
 8006f60:	46bd      	mov	sp, r7
 8006f62:	b002      	add	sp, #8
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b082      	sub	sp, #8
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	223c      	movs	r2, #60	@ 0x3c
 8006f72:	5c9b      	ldrb	r3, [r3, r2]
}
 8006f74:	0018      	movs	r0, r3
 8006f76:	46bd      	mov	sp, r7
 8006f78:	b002      	add	sp, #8
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8006f7c:	b5b0      	push	{r4, r5, r7, lr}
 8006f7e:	b08c      	sub	sp, #48	@ 0x30
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8006f88:	1c19      	adds	r1, r3, #0
 8006f8a:	4895      	ldr	r0, [pc, #596]	@ (80071e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8006f8c:	f7fa f8c4 	bl	8001118 <__aeabi_fsub>
 8006f90:	1c03      	adds	r3, r0, #0
 8006f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f98:	1c19      	adds	r1, r3, #0
 8006f9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f9c:	f7f9 faaa 	bl	80004f4 <__aeabi_fcmpgt>
 8006fa0:	1e03      	subs	r3, r0, #0
 8006fa2:	d00b      	beq.n	8006fbc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8006fac:	1c19      	adds	r1, r3, #0
 8006fae:	1c10      	adds	r0, r2, #0
 8006fb0:	f7f9 fc04 	bl	80007bc <__aeabi_fadd>
 8006fb4:	1c03      	adds	r3, r0, #0
 8006fb6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fc0:	1c19      	adds	r1, r3, #0
 8006fc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006fc4:	f7f9 fa96 	bl	80004f4 <__aeabi_fcmpgt>
 8006fc8:	1e03      	subs	r3, r0, #0
 8006fca:	d00b      	beq.n	8006fe4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8006fd4:	1c19      	adds	r1, r3, #0
 8006fd6:	1c10      	adds	r0, r2, #0
 8006fd8:	f7f9 fbf0 	bl	80007bc <__aeabi_fadd>
 8006fdc:	1c03      	adds	r3, r0, #0
 8006fde:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6959      	ldr	r1, [r3, #20]
 8006fe8:	4a7e      	ldr	r2, [pc, #504]	@ (80071e4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	0018      	movs	r0, r3
 8006fee:	f000 f9f1 	bl	80073d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	1c11      	adds	r1, r2, #0
 8006ffa:	0018      	movs	r0, r3
 8006ffc:	f000 f9fa 	bl	80073f4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007000:	1c03      	adds	r3, r0, #0
 8007002:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007010:	1c19      	adds	r1, r3, #0
 8007012:	1c10      	adds	r0, r2, #0
 8007014:	f7fa f880 	bl	8001118 <__aeabi_fsub>
 8007018:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800701a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800701c:	1c18      	adds	r0, r3, #0
 800701e:	f7f9 ff3d 	bl	8000e9c <__aeabi_fmul>
 8007022:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8007024:	1c19      	adds	r1, r3, #0
 8007026:	1c20      	adds	r0, r4, #0
 8007028:	f7f9 fbc8 	bl	80007bc <__aeabi_fadd>
 800702c:	1c03      	adds	r3, r0, #0
 800702e:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007038:	1c19      	adds	r1, r3, #0
 800703a:	486b      	ldr	r0, [pc, #428]	@ (80071e8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800703c:	f7fa f86c 	bl	8001118 <__aeabi_fsub>
 8007040:	1c03      	adds	r3, r0, #0
 8007042:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	1c11      	adds	r1, r2, #0
 800704c:	0018      	movs	r0, r3
 800704e:	f000 f9d1 	bl	80073f4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007052:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007054:	1c19      	adds	r1, r3, #0
 8007056:	1c28      	adds	r0, r5, #0
 8007058:	f7f9 ff20 	bl	8000e9c <__aeabi_fmul>
 800705c:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800705e:	1c19      	adds	r1, r3, #0
 8007060:	1c20      	adds	r0, r4, #0
 8007062:	f7f9 fbab 	bl	80007bc <__aeabi_fadd>
 8007066:	1c03      	adds	r3, r0, #0
 8007068:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800706a:	4a60      	ldr	r2, [pc, #384]	@ (80071ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800706c:	6a39      	ldr	r1, [r7, #32]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	0018      	movs	r0, r3
 8007072:	f000 f9af 	bl	80073d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	1c11      	adds	r1, r2, #0
 800707e:	0018      	movs	r0, r3
 8007080:	f000 f9b8 	bl	80073f4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007084:	1c03      	adds	r3, r0, #0
 8007086:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8007088:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800708a:	69f8      	ldr	r0, [r7, #28]
 800708c:	f7f9 ff06 	bl	8000e9c <__aeabi_fmul>
 8007090:	1c03      	adds	r3, r0, #0
 8007092:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6999      	ldr	r1, [r3, #24]
 800709c:	4a51      	ldr	r2, [pc, #324]	@ (80071e4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	0018      	movs	r0, r3
 80070a2:	f000 f997 	bl	80073d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	1c11      	adds	r1, r2, #0
 80070ae:	0018      	movs	r0, r3
 80070b0:	f000 f9a0 	bl	80073f4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80070b4:	1c03      	adds	r3, r0, #0
 80070b6:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80070c4:	1c19      	adds	r1, r3, #0
 80070c6:	1c10      	adds	r0, r2, #0
 80070c8:	f7fa f826 	bl	8001118 <__aeabi_fsub>
 80070cc:	1c03      	adds	r3, r0, #0
 80070ce:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 80070d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070d2:	69b8      	ldr	r0, [r7, #24]
 80070d4:	f7fa f820 	bl	8001118 <__aeabi_fsub>
 80070d8:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80070da:	1c19      	adds	r1, r3, #0
 80070dc:	1c28      	adds	r0, r5, #0
 80070de:	f7f9 fedd 	bl	8000e9c <__aeabi_fmul>
 80070e2:	1c03      	adds	r3, r0, #0
    gamma_variance =
 80070e4:	1c19      	adds	r1, r3, #0
 80070e6:	1c20      	adds	r0, r4, #0
 80070e8:	f7f9 fb68 	bl	80007bc <__aeabi_fadd>
 80070ec:	1c03      	adds	r3, r0, #0
 80070ee:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 80070f8:	1c19      	adds	r1, r3, #0
 80070fa:	483b      	ldr	r0, [pc, #236]	@ (80071e8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80070fc:	f7fa f80c 	bl	8001118 <__aeabi_fsub>
 8007100:	1c03      	adds	r3, r0, #0
 8007102:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	1c11      	adds	r1, r2, #0
 800710c:	0018      	movs	r0, r3
 800710e:	f000 f971 	bl	80073f4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007112:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007114:	1c19      	adds	r1, r3, #0
 8007116:	1c28      	adds	r0, r5, #0
 8007118:	f7f9 fec0 	bl	8000e9c <__aeabi_fmul>
 800711c:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800711e:	1c19      	adds	r1, r3, #0
 8007120:	1c20      	adds	r0, r4, #0
 8007122:	f7f9 fb4b 	bl	80007bc <__aeabi_fadd>
 8007126:	1c03      	adds	r3, r0, #0
 8007128:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800712a:	4a30      	ldr	r2, [pc, #192]	@ (80071ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800712c:	6939      	ldr	r1, [r7, #16]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	0018      	movs	r0, r3
 8007132:	f000 f94f 	bl	80073d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	1c11      	adds	r1, r2, #0
 800713e:	0018      	movs	r0, r3
 8007140:	f000 f958 	bl	80073f4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007144:	1c03      	adds	r3, r0, #0
 8007146:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8007148:	6979      	ldr	r1, [r7, #20]
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f7f9 fea6 	bl	8000e9c <__aeabi_fmul>
 8007150:	1c03      	adds	r3, r0, #0
 8007152:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	4923      	ldr	r1, [pc, #140]	@ (80071f0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8007162:	1c18      	adds	r0, r3, #0
 8007164:	f7f9 fcb4 	bl	8000ad0 <__aeabi_fdiv>
 8007168:	1c03      	adds	r3, r0, #0
 800716a:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800716c:	69f9      	ldr	r1, [r7, #28]
 800716e:	20fe      	movs	r0, #254	@ 0xfe
 8007170:	0580      	lsls	r0, r0, #22
 8007172:	f7f9 ffd1 	bl	8001118 <__aeabi_fsub>
 8007176:	1c03      	adds	r3, r0, #0
 8007178:	491e      	ldr	r1, [pc, #120]	@ (80071f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800717a:	1c18      	adds	r0, r3, #0
 800717c:	f7f9 fe8e 	bl	8000e9c <__aeabi_fmul>
 8007180:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8007182:	491d      	ldr	r1, [pc, #116]	@ (80071f8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8007184:	1c18      	adds	r0, r3, #0
 8007186:	f7f9 ffc7 	bl	8001118 <__aeabi_fsub>
 800718a:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800718c:	1c19      	adds	r1, r3, #0
 800718e:	1c28      	adds	r0, r5, #0
 8007190:	f7f9 fe84 	bl	8000e9c <__aeabi_fmul>
 8007194:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007196:	1c19      	adds	r1, r3, #0
 8007198:	1c20      	adds	r0, r4, #0
 800719a:	f7f9 fb0f 	bl	80007bc <__aeabi_fadd>
 800719e:	1c03      	adds	r3, r0, #0
 80071a0:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071aa:	2100      	movs	r1, #0
 80071ac:	1c18      	adds	r0, r3, #0
 80071ae:	f7f9 f98d 	bl	80004cc <__aeabi_fcmplt>
 80071b2:	1e03      	subs	r3, r0, #0
 80071b4:	d002      	beq.n	80071bc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80071c4:	1c19      	adds	r1, r3, #0
 80071c6:	1c10      	adds	r0, r2, #0
 80071c8:	f7f9 f994 	bl	80004f4 <__aeabi_fcmpgt>
 80071cc:	1e03      	subs	r3, r0, #0
 80071ce:	d100      	bne.n	80071d2 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 80071d0:	e002      	b.n	80071d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80071d8:	46c0      	nop			@ (mov r8, r8)
 80071da:	46bd      	mov	sp, r7
 80071dc:	b00c      	add	sp, #48	@ 0x30
 80071de:	bdb0      	pop	{r4, r5, r7, pc}
 80071e0:	46fffe00 	.word	0x46fffe00
 80071e4:	3c23d70a 	.word	0x3c23d70a
 80071e8:	43ff0000 	.word	0x43ff0000
 80071ec:	3db851ec 	.word	0x3db851ec
 80071f0:	42700000 	.word	0x42700000
 80071f4:	3fa66666 	.word	0x3fa66666
 80071f8:	3e99999a 	.word	0x3e99999a

080071fc <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 80071fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	223c      	movs	r2, #60	@ 0x3c
 800720a:	5c9b      	ldrb	r3, [r3, r2]
 800720c:	2201      	movs	r2, #1
 800720e:	4053      	eors	r3, r2
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	223c      	movs	r2, #60	@ 0x3c
 800721a:	2101      	movs	r1, #1
 800721c:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800722a:	e0c8      	b.n	80073be <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007230:	4965      	ldr	r1, [pc, #404]	@ (80073c8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8007232:	1c18      	adds	r0, r3, #0
 8007234:	f7f9 f968 	bl	8000508 <__aeabi_fcmpge>
 8007238:	1e03      	subs	r3, r0, #0
 800723a:	d107      	bne.n	800724c <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007240:	4962      	ldr	r1, [pc, #392]	@ (80073cc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8007242:	1c18      	adds	r0, r3, #0
 8007244:	f7f9 f94c 	bl	80004e0 <__aeabi_fcmple>
 8007248:	1e03      	subs	r3, r0, #0
 800724a:	d00e      	beq.n	800726a <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007254:	1c19      	adds	r1, r3, #0
 8007256:	1c10      	adds	r0, r2, #0
 8007258:	f7f9 fab0 	bl	80007bc <__aeabi_fadd>
 800725c:	1c03      	adds	r3, r0, #0
 800725e:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800726e:	1c19      	adds	r1, r3, #0
 8007270:	6838      	ldr	r0, [r7, #0]
 8007272:	f7f9 ff51 	bl	8001118 <__aeabi_fsub>
 8007276:	1c03      	adds	r3, r0, #0
 8007278:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	0018      	movs	r0, r3
 800727e:	f7ff fe7d 	bl	8006f7c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007286:	1c19      	adds	r1, r3, #0
 8007288:	6838      	ldr	r0, [r7, #0]
 800728a:	f7f9 ff45 	bl	8001118 <__aeabi_fsub>
 800728e:	1c03      	adds	r3, r0, #0
 8007290:	2185      	movs	r1, #133	@ 0x85
 8007292:	05c9      	lsls	r1, r1, #23
 8007294:	1c18      	adds	r0, r3, #0
 8007296:	f7f9 fc1b 	bl	8000ad0 <__aeabi_fdiv>
 800729a:	1c03      	adds	r3, r0, #0
 800729c:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800729e:	2100      	movs	r1, #0
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f7f9 f913 	bl	80004cc <__aeabi_fcmplt>
 80072a6:	1e03      	subs	r3, r0, #0
 80072a8:	d008      	beq.n	80072bc <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072ae:	68f9      	ldr	r1, [r7, #12]
 80072b0:	1c18      	adds	r0, r3, #0
 80072b2:	f7f9 ff31 	bl	8001118 <__aeabi_fsub>
 80072b6:	1c03      	adds	r3, r0, #0
 80072b8:	617b      	str	r3, [r7, #20]
 80072ba:	e007      	b.n	80072cc <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072c0:	1c19      	adds	r1, r3, #0
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f7f9 fa7a 	bl	80007bc <__aeabi_fadd>
 80072c8:	1c03      	adds	r3, r0, #0
 80072ca:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 80072cc:	23fe      	movs	r3, #254	@ 0xfe
 80072ce:	059b      	lsls	r3, r3, #22
 80072d0:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 80072d2:	493f      	ldr	r1, [pc, #252]	@ (80073d0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80072d4:	6978      	ldr	r0, [r7, #20]
 80072d6:	f7f9 f90d 	bl	80004f4 <__aeabi_fcmpgt>
 80072da:	1e03      	subs	r3, r0, #0
 80072dc:	d010      	beq.n	8007300 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 80072de:	493c      	ldr	r1, [pc, #240]	@ (80073d0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80072e0:	6978      	ldr	r0, [r7, #20]
 80072e2:	f7f9 fbf5 	bl	8000ad0 <__aeabi_fdiv>
 80072e6:	1c03      	adds	r3, r0, #0
 80072e8:	1c1c      	adds	r4, r3, #0
 80072ea:	4939      	ldr	r1, [pc, #228]	@ (80073d0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80072ec:	6978      	ldr	r0, [r7, #20]
 80072ee:	f7f9 fbef 	bl	8000ad0 <__aeabi_fdiv>
 80072f2:	1c03      	adds	r3, r0, #0
 80072f4:	1c19      	adds	r1, r3, #0
 80072f6:	1c20      	adds	r0, r4, #0
 80072f8:	f7f9 fdd0 	bl	8000e9c <__aeabi_fmul>
 80072fc:	1c03      	adds	r3, r0, #0
 80072fe:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8007304:	1c19      	adds	r1, r3, #0
 8007306:	2085      	movs	r0, #133	@ 0x85
 8007308:	05c0      	lsls	r0, r0, #23
 800730a:	f7f9 ff05 	bl	8001118 <__aeabi_fsub>
 800730e:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8007310:	6939      	ldr	r1, [r7, #16]
 8007312:	1c18      	adds	r0, r3, #0
 8007314:	f7f9 fdc2 	bl	8000e9c <__aeabi_fmul>
 8007318:	1c03      	adds	r3, r0, #0
 800731a:	1c18      	adds	r0, r3, #0
 800731c:	f011 fdc4 	bl	8018ea8 <sqrtf>
 8007320:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800732a:	2185      	movs	r1, #133	@ 0x85
 800732c:	05c9      	lsls	r1, r1, #23
 800732e:	6938      	ldr	r0, [r7, #16]
 8007330:	f7f9 fdb4 	bl	8000e9c <__aeabi_fmul>
 8007334:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8007336:	1c19      	adds	r1, r3, #0
 8007338:	1c28      	adds	r0, r5, #0
 800733a:	f7f9 fbc9 	bl	8000ad0 <__aeabi_fdiv>
 800733e:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007340:	1c19      	adds	r1, r3, #0
 8007342:	1c20      	adds	r0, r4, #0
 8007344:	f7f9 fdaa 	bl	8000e9c <__aeabi_fmul>
 8007348:	1c03      	adds	r3, r0, #0
 800734a:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007350:	68f9      	ldr	r1, [r7, #12]
 8007352:	1c18      	adds	r0, r3, #0
 8007354:	f7f9 fda2 	bl	8000e9c <__aeabi_fmul>
 8007358:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800735a:	6939      	ldr	r1, [r7, #16]
 800735c:	1c18      	adds	r0, r3, #0
 800735e:	f7f9 fbb7 	bl	8000ad0 <__aeabi_fdiv>
 8007362:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8007364:	68f9      	ldr	r1, [r7, #12]
 8007366:	1c18      	adds	r0, r3, #0
 8007368:	f7f9 fd98 	bl	8000e9c <__aeabi_fmul>
 800736c:	1c03      	adds	r3, r0, #0
             sqrtf(
 800736e:	1c19      	adds	r1, r3, #0
 8007370:	1c20      	adds	r0, r4, #0
 8007372:	f7f9 fa23 	bl	80007bc <__aeabi_fadd>
 8007376:	1c03      	adds	r3, r0, #0
 8007378:	1c18      	adds	r0, r3, #0
 800737a:	f011 fd95 	bl	8018ea8 <sqrtf>
 800737e:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007380:	1c19      	adds	r1, r3, #0
 8007382:	1c30      	adds	r0, r6, #0
 8007384:	f7f9 fd8a 	bl	8000e9c <__aeabi_fmul>
 8007388:	1c03      	adds	r3, r0, #0
 800738a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007398:	68f9      	ldr	r1, [r7, #12]
 800739a:	1c18      	adds	r0, r3, #0
 800739c:	f7f9 fd7e 	bl	8000e9c <__aeabi_fmul>
 80073a0:	1c03      	adds	r3, r0, #0
 80073a2:	2182      	movs	r1, #130	@ 0x82
 80073a4:	05c9      	lsls	r1, r1, #23
 80073a6:	1c18      	adds	r0, r3, #0
 80073a8:	f7f9 fb92 	bl	8000ad0 <__aeabi_fdiv>
 80073ac:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 80073ae:	1c19      	adds	r1, r3, #0
 80073b0:	1c20      	adds	r0, r4, #0
 80073b2:	f7f9 fa03 	bl	80007bc <__aeabi_fadd>
 80073b6:	1c03      	adds	r3, r0, #0
 80073b8:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80073be:	46c0      	nop			@ (mov r8, r8)
 80073c0:	46bd      	mov	sp, r7
 80073c2:	b007      	add	sp, #28
 80073c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073c6:	46c0      	nop			@ (mov r8, r8)
 80073c8:	42c80000 	.word	0x42c80000
 80073cc:	c2c80000 	.word	0xc2c80000
 80073d0:	44b40000 	.word	0x44b40000

080073d4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80073ec:	46c0      	nop			@ (mov r8, r8)
 80073ee:	46bd      	mov	sp, r7
 80073f0:	b004      	add	sp, #16
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 80073f4:	b590      	push	{r4, r7, lr}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007406:	1c19      	adds	r1, r3, #0
 8007408:	6838      	ldr	r0, [r7, #0]
 800740a:	f7f9 fe85 	bl	8001118 <__aeabi_fsub>
 800740e:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007410:	1c19      	adds	r1, r3, #0
 8007412:	1c20      	adds	r0, r4, #0
 8007414:	f7f9 fd42 	bl	8000e9c <__aeabi_fmul>
 8007418:	1c03      	adds	r3, r0, #0
 800741a:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800741c:	4912      	ldr	r1, [pc, #72]	@ (8007468 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f7f9 f854 	bl	80004cc <__aeabi_fcmplt>
 8007424:	1e03      	subs	r3, r0, #0
 8007426:	d002      	beq.n	800742e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8007428:	23fe      	movs	r3, #254	@ 0xfe
 800742a:	059b      	lsls	r3, r3, #22
 800742c:	e018      	b.n	8007460 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800742e:	490f      	ldr	r1, [pc, #60]	@ (800746c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f7f9 f85f 	bl	80004f4 <__aeabi_fcmpgt>
 8007436:	1e03      	subs	r3, r0, #0
 8007438:	d001      	beq.n	800743e <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800743a:	2300      	movs	r3, #0
 800743c:	e010      	b.n	8007460 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	1c18      	adds	r0, r3, #0
 8007442:	f011 fd09 	bl	8018e58 <expf>
 8007446:	1c03      	adds	r3, r0, #0
 8007448:	21fe      	movs	r1, #254	@ 0xfe
 800744a:	0589      	lsls	r1, r1, #22
 800744c:	1c18      	adds	r0, r3, #0
 800744e:	f7f9 f9b5 	bl	80007bc <__aeabi_fadd>
 8007452:	1c03      	adds	r3, r0, #0
 8007454:	1c19      	adds	r1, r3, #0
 8007456:	20fe      	movs	r0, #254	@ 0xfe
 8007458:	0580      	lsls	r0, r0, #22
 800745a:	f7f9 fb39 	bl	8000ad0 <__aeabi_fdiv>
 800745e:	1c03      	adds	r3, r0, #0
    }
}
 8007460:	1c18      	adds	r0, r3, #0
 8007462:	46bd      	mov	sp, r7
 8007464:	b005      	add	sp, #20
 8007466:	bd90      	pop	{r4, r7, pc}
 8007468:	c2480000 	.word	0xc2480000
 800746c:	42480000 	.word	0x42480000

08007470 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	68ba      	ldr	r2, [r7, #8]
 8007480:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007488:	46c0      	nop			@ (mov r8, r8)
 800748a:	46bd      	mov	sp, r7
 800748c:	b004      	add	sp, #16
 800748e:	bd80      	pop	{r7, pc}

08007490 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8007490:	b590      	push	{r4, r7, lr}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d114      	bne.n	80074cc <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074a6:	1c19      	adds	r1, r3, #0
 80074a8:	6838      	ldr	r0, [r7, #0]
 80074aa:	f7f9 fe35 	bl	8001118 <__aeabi_fsub>
 80074ae:	1c03      	adds	r3, r0, #0
 80074b0:	4918      	ldr	r1, [pc, #96]	@ (8007514 <GasIndexAlgorithm__mox_model__process+0x84>)
 80074b2:	1c18      	adds	r0, r3, #0
 80074b4:	f7f9 fb0c 	bl	8000ad0 <__aeabi_fdiv>
 80074b8:	1c03      	adds	r3, r0, #0
 80074ba:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 80074c0:	1c19      	adds	r1, r3, #0
 80074c2:	1c10      	adds	r0, r2, #0
 80074c4:	f7f9 fcea 	bl	8000e9c <__aeabi_fmul>
 80074c8:	1c03      	adds	r3, r0, #0
 80074ca:	e01f      	b.n	800750c <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074d0:	1c19      	adds	r1, r3, #0
 80074d2:	6838      	ldr	r0, [r7, #0]
 80074d4:	f7f9 fe20 	bl	8001118 <__aeabi_fsub>
 80074d8:	1c03      	adds	r3, r0, #0
 80074da:	1c1a      	adds	r2, r3, #0
 80074dc:	2380      	movs	r3, #128	@ 0x80
 80074de:	061b      	lsls	r3, r3, #24
 80074e0:	4053      	eors	r3, r2
 80074e2:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80074e8:	490b      	ldr	r1, [pc, #44]	@ (8007518 <GasIndexAlgorithm__mox_model__process+0x88>)
 80074ea:	1c18      	adds	r0, r3, #0
 80074ec:	f7f9 f966 	bl	80007bc <__aeabi_fadd>
 80074f0:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80074f2:	1c19      	adds	r1, r3, #0
 80074f4:	1c20      	adds	r0, r4, #0
 80074f6:	f7f9 faeb 	bl	8000ad0 <__aeabi_fdiv>
 80074fa:	1c03      	adds	r3, r0, #0
 80074fc:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8007502:	1c19      	adds	r1, r3, #0
 8007504:	1c10      	adds	r0, r2, #0
 8007506:	f7f9 fcc9 	bl	8000e9c <__aeabi_fmul>
 800750a:	1c03      	adds	r3, r0, #0
    }
}
 800750c:	1c18      	adds	r0, r3, #0
 800750e:	46bd      	mov	sp, r7
 8007510:	b003      	add	sp, #12
 8007512:	bd90      	pop	{r4, r7, pc}
 8007514:	44fa0000 	.word	0x44fa0000
 8007518:	435c0000 	.word	0x435c0000

0800751c <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2180      	movs	r1, #128	@ 0x80
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2184      	movs	r1, #132	@ 0x84
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2188      	movs	r1, #136	@ 0x88
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	505a      	str	r2, [r3, r1]
}
 8007542:	46c0      	nop			@ (mov r8, r8)
 8007544:	46bd      	mov	sp, r7
 8007546:	b004      	add	sp, #16
 8007548:	bd80      	pop	{r7, pc}
	...

0800754c <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800754c:	b590      	push	{r4, r7, lr}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2280      	movs	r2, #128	@ 0x80
 800755a:	589c      	ldr	r4, [r3, r2]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2284      	movs	r2, #132	@ 0x84
 8007560:	589b      	ldr	r3, [r3, r2]
 8007562:	1c19      	adds	r1, r3, #0
 8007564:	6838      	ldr	r0, [r7, #0]
 8007566:	f7f9 fdd7 	bl	8001118 <__aeabi_fsub>
 800756a:	1c03      	adds	r3, r0, #0
 800756c:	1c19      	adds	r1, r3, #0
 800756e:	1c20      	adds	r0, r4, #0
 8007570:	f7f9 fc94 	bl	8000e9c <__aeabi_fmul>
 8007574:	1c03      	adds	r3, r0, #0
 8007576:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8007578:	4940      	ldr	r1, [pc, #256]	@ (800767c <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800757a:	68b8      	ldr	r0, [r7, #8]
 800757c:	f7f8 ffa6 	bl	80004cc <__aeabi_fcmplt>
 8007580:	1e03      	subs	r3, r0, #0
 8007582:	d001      	beq.n	8007588 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8007584:	4b3e      	ldr	r3, [pc, #248]	@ (8007680 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007586:	e075      	b.n	8007674 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8007588:	493e      	ldr	r1, [pc, #248]	@ (8007684 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800758a:	68b8      	ldr	r0, [r7, #8]
 800758c:	f7f8 ffb2 	bl	80004f4 <__aeabi_fcmpgt>
 8007590:	1e03      	subs	r3, r0, #0
 8007592:	d001      	beq.n	8007598 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8007594:	2300      	movs	r3, #0
 8007596:	e06d      	b.n	8007674 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8007598:	2100      	movs	r1, #0
 800759a:	6838      	ldr	r0, [r7, #0]
 800759c:	f7f8 ffb4 	bl	8000508 <__aeabi_fcmpge>
 80075a0:	1e03      	subs	r3, r0, #0
 80075a2:	d047      	beq.n	8007634 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2288      	movs	r2, #136	@ 0x88
 80075a8:	589b      	ldr	r3, [r3, r2]
 80075aa:	21fe      	movs	r1, #254	@ 0xfe
 80075ac:	0589      	lsls	r1, r1, #22
 80075ae:	1c18      	adds	r0, r3, #0
 80075b0:	f7f8 ff86 	bl	80004c0 <__aeabi_fcmpeq>
 80075b4:	1e03      	subs	r3, r0, #0
 80075b6:	d00e      	beq.n	80075d6 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	1c19      	adds	r1, r3, #0
 80075be:	20fe      	movs	r0, #254	@ 0xfe
 80075c0:	0580      	lsls	r0, r0, #22
 80075c2:	f7f9 fda9 	bl	8001118 <__aeabi_fsub>
 80075c6:	1c03      	adds	r3, r0, #0
 80075c8:	492f      	ldr	r1, [pc, #188]	@ (8007688 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 80075ca:	1c18      	adds	r0, r3, #0
 80075cc:	f7f9 fc66 	bl	8000e9c <__aeabi_fmul>
 80075d0:	1c03      	adds	r3, r0, #0
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	e012      	b.n	80075fc <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	492c      	ldr	r1, [pc, #176]	@ (800768c <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 80075dc:	1c18      	adds	r0, r3, #0
 80075de:	f7f9 fc5d 	bl	8000e9c <__aeabi_fmul>
 80075e2:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 80075e4:	1c19      	adds	r1, r3, #0
 80075e6:	4826      	ldr	r0, [pc, #152]	@ (8007680 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80075e8:	f7f9 fd96 	bl	8001118 <__aeabi_fsub>
 80075ec:	1c03      	adds	r3, r0, #0
 80075ee:	2181      	movs	r1, #129	@ 0x81
 80075f0:	05c9      	lsls	r1, r1, #23
 80075f2:	1c18      	adds	r0, r3, #0
 80075f4:	f7f9 fa6c 	bl	8000ad0 <__aeabi_fdiv>
 80075f8:	1c03      	adds	r3, r0, #0
 80075fa:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 80075fc:	4920      	ldr	r1, [pc, #128]	@ (8007680 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7f9 f8dc 	bl	80007bc <__aeabi_fadd>
 8007604:	1c03      	adds	r3, r0, #0
 8007606:	1c1c      	adds	r4, r3, #0
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	1c18      	adds	r0, r3, #0
 800760c:	f011 fc24 	bl	8018e58 <expf>
 8007610:	1c03      	adds	r3, r0, #0
 8007612:	21fe      	movs	r1, #254	@ 0xfe
 8007614:	0589      	lsls	r1, r1, #22
 8007616:	1c18      	adds	r0, r3, #0
 8007618:	f7f9 f8d0 	bl	80007bc <__aeabi_fadd>
 800761c:	1c03      	adds	r3, r0, #0
 800761e:	1c19      	adds	r1, r3, #0
 8007620:	1c20      	adds	r0, r4, #0
 8007622:	f7f9 fa55 	bl	8000ad0 <__aeabi_fdiv>
 8007626:	1c03      	adds	r3, r0, #0
 8007628:	68f9      	ldr	r1, [r7, #12]
 800762a:	1c18      	adds	r0, r3, #0
 800762c:	f7f9 fd74 	bl	8001118 <__aeabi_fsub>
 8007630:	1c03      	adds	r3, r0, #0
 8007632:	e01f      	b.n	8007674 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2188      	movs	r1, #136	@ 0x88
 800763c:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800763e:	1c19      	adds	r1, r3, #0
 8007640:	1c10      	adds	r0, r2, #0
 8007642:	f7f9 fa45 	bl	8000ad0 <__aeabi_fdiv>
 8007646:	1c03      	adds	r3, r0, #0
 8007648:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	1c18      	adds	r0, r3, #0
 800764e:	f011 fc03 	bl	8018e58 <expf>
 8007652:	1c03      	adds	r3, r0, #0
 8007654:	21fe      	movs	r1, #254	@ 0xfe
 8007656:	0589      	lsls	r1, r1, #22
 8007658:	1c18      	adds	r0, r3, #0
 800765a:	f7f9 f8af 	bl	80007bc <__aeabi_fadd>
 800765e:	1c03      	adds	r3, r0, #0
 8007660:	1c19      	adds	r1, r3, #0
 8007662:	4807      	ldr	r0, [pc, #28]	@ (8007680 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007664:	f7f9 fa34 	bl	8000ad0 <__aeabi_fdiv>
 8007668:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800766a:	1c19      	adds	r1, r3, #0
 800766c:	1c20      	adds	r0, r4, #0
 800766e:	f7f9 fc15 	bl	8000e9c <__aeabi_fmul>
 8007672:	1c03      	adds	r3, r0, #0
        }
    }
}
 8007674:	1c18      	adds	r0, r3, #0
 8007676:	46bd      	mov	sp, r7
 8007678:	b005      	add	sp, #20
 800767a:	bd90      	pop	{r4, r7, pc}
 800767c:	c2480000 	.word	0xc2480000
 8007680:	43fa0000 	.word	0x43fa0000
 8007684:	42480000 	.word	0x42480000
 8007688:	3f8041ab 	.word	0x3f8041ab
 800768c:	40a00000 	.word	0x40a00000

08007690 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8007690:	b590      	push	{r4, r7, lr}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	4913      	ldr	r1, [pc, #76]	@ (80076f0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 80076a2:	1c18      	adds	r0, r3, #0
 80076a4:	f7f9 f88a 	bl	80007bc <__aeabi_fadd>
 80076a8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80076aa:	1c19      	adds	r1, r3, #0
 80076ac:	1c20      	adds	r0, r4, #0
 80076ae:	f7f9 fa0f 	bl	8000ad0 <__aeabi_fdiv>
 80076b2:	1c03      	adds	r3, r0, #0
 80076b4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	228c      	movs	r2, #140	@ 0x8c
 80076ba:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	490b      	ldr	r1, [pc, #44]	@ (80076f4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 80076c6:	1c18      	adds	r0, r3, #0
 80076c8:	f7f9 f878 	bl	80007bc <__aeabi_fadd>
 80076cc:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80076ce:	1c19      	adds	r1, r3, #0
 80076d0:	1c20      	adds	r0, r4, #0
 80076d2:	f7f9 f9fd 	bl	8000ad0 <__aeabi_fdiv>
 80076d6:	1c03      	adds	r3, r0, #0
 80076d8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2290      	movs	r2, #144	@ 0x90
 80076de:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2294      	movs	r2, #148	@ 0x94
 80076e4:	2100      	movs	r1, #0
 80076e6:	5499      	strb	r1, [r3, r2]
}
 80076e8:	46c0      	nop			@ (mov r8, r8)
 80076ea:	46bd      	mov	sp, r7
 80076ec:	b003      	add	sp, #12
 80076ee:	bd90      	pop	{r4, r7, pc}
 80076f0:	41a00000 	.word	0x41a00000
 80076f4:	43fa0000 	.word	0x43fa0000

080076f8 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 80076f8:	b590      	push	{r4, r7, lr}
 80076fa:	b087      	sub	sp, #28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2294      	movs	r2, #148	@ 0x94
 8007706:	5c9b      	ldrb	r3, [r3, r2]
 8007708:	2201      	movs	r2, #1
 800770a:	4053      	eors	r3, r2
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00f      	beq.n	8007732 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2198      	movs	r1, #152	@ 0x98
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	219c      	movs	r1, #156	@ 0x9c
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	21a0      	movs	r1, #160	@ 0xa0
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2294      	movs	r2, #148	@ 0x94
 800772e:	2101      	movs	r1, #1
 8007730:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	228c      	movs	r2, #140	@ 0x8c
 8007736:	589b      	ldr	r3, [r3, r2]
 8007738:	1c19      	adds	r1, r3, #0
 800773a:	20fe      	movs	r0, #254	@ 0xfe
 800773c:	0580      	lsls	r0, r0, #22
 800773e:	f7f9 fceb 	bl	8001118 <__aeabi_fsub>
 8007742:	1c03      	adds	r3, r0, #0
 8007744:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2298      	movs	r2, #152	@ 0x98
 800774a:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800774c:	1c19      	adds	r1, r3, #0
 800774e:	f7f9 fba5 	bl	8000e9c <__aeabi_fmul>
 8007752:	1c03      	adds	r3, r0, #0
 8007754:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	228c      	movs	r2, #140	@ 0x8c
 800775a:	589b      	ldr	r3, [r3, r2]
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	1c18      	adds	r0, r3, #0
 8007760:	f7f9 fb9c 	bl	8000e9c <__aeabi_fmul>
 8007764:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8007766:	1c19      	adds	r1, r3, #0
 8007768:	1c20      	adds	r0, r4, #0
 800776a:	f7f9 f827 	bl	80007bc <__aeabi_fadd>
 800776e:	1c03      	adds	r3, r0, #0
 8007770:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2298      	movs	r2, #152	@ 0x98
 8007776:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2290      	movs	r2, #144	@ 0x90
 800777c:	589b      	ldr	r3, [r3, r2]
 800777e:	1c19      	adds	r1, r3, #0
 8007780:	20fe      	movs	r0, #254	@ 0xfe
 8007782:	0580      	lsls	r0, r0, #22
 8007784:	f7f9 fcc8 	bl	8001118 <__aeabi_fsub>
 8007788:	1c03      	adds	r3, r0, #0
 800778a:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	229c      	movs	r2, #156	@ 0x9c
 8007790:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8007792:	1c19      	adds	r1, r3, #0
 8007794:	f7f9 fb82 	bl	8000e9c <__aeabi_fmul>
 8007798:	1c03      	adds	r3, r0, #0
 800779a:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2290      	movs	r2, #144	@ 0x90
 80077a0:	589b      	ldr	r3, [r3, r2]
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	1c18      	adds	r0, r3, #0
 80077a6:	f7f9 fb79 	bl	8000e9c <__aeabi_fmul>
 80077aa:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 80077ac:	1c19      	adds	r1, r3, #0
 80077ae:	1c20      	adds	r0, r4, #0
 80077b0:	f7f9 f804 	bl	80007bc <__aeabi_fadd>
 80077b4:	1c03      	adds	r3, r0, #0
 80077b6:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	229c      	movs	r2, #156	@ 0x9c
 80077bc:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2298      	movs	r2, #152	@ 0x98
 80077c2:	589a      	ldr	r2, [r3, r2]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	219c      	movs	r1, #156	@ 0x9c
 80077c8:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 80077ca:	1c19      	adds	r1, r3, #0
 80077cc:	1c10      	adds	r0, r2, #0
 80077ce:	f7f9 fca3 	bl	8001118 <__aeabi_fsub>
 80077d2:	1c03      	adds	r3, r0, #0
 80077d4:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 80077d6:	2100      	movs	r1, #0
 80077d8:	6978      	ldr	r0, [r7, #20]
 80077da:	f7f8 fe77 	bl	80004cc <__aeabi_fcmplt>
 80077de:	1e03      	subs	r3, r0, #0
 80077e0:	d004      	beq.n	80077ec <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2280      	movs	r2, #128	@ 0x80
 80077e6:	0612      	lsls	r2, r2, #24
 80077e8:	4053      	eors	r3, r2
 80077ea:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 80077ec:	4923      	ldr	r1, [pc, #140]	@ (800787c <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 80077ee:	6978      	ldr	r0, [r7, #20]
 80077f0:	f7f9 fb54 	bl	8000e9c <__aeabi_fmul>
 80077f4:	1c03      	adds	r3, r0, #0
 80077f6:	1c18      	adds	r0, r3, #0
 80077f8:	f011 fb2e 	bl	8018e58 <expf>
 80077fc:	1c03      	adds	r3, r0, #0
 80077fe:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8007800:	491f      	ldr	r1, [pc, #124]	@ (8007880 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8007802:	6938      	ldr	r0, [r7, #16]
 8007804:	f7f9 fb4a 	bl	8000e9c <__aeabi_fmul>
 8007808:	1c03      	adds	r3, r0, #0
 800780a:	491e      	ldr	r1, [pc, #120]	@ (8007884 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800780c:	1c18      	adds	r0, r3, #0
 800780e:	f7f8 ffd5 	bl	80007bc <__aeabi_fadd>
 8007812:	1c03      	adds	r3, r0, #0
 8007814:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685c      	ldr	r4, [r3, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	68f9      	ldr	r1, [r7, #12]
 8007820:	1c18      	adds	r0, r3, #0
 8007822:	f7f8 ffcb 	bl	80007bc <__aeabi_fadd>
 8007826:	1c03      	adds	r3, r0, #0
 8007828:	1c19      	adds	r1, r3, #0
 800782a:	1c20      	adds	r0, r4, #0
 800782c:	f7f9 f950 	bl	8000ad0 <__aeabi_fdiv>
 8007830:	1c03      	adds	r3, r0, #0
 8007832:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8007834:	68b9      	ldr	r1, [r7, #8]
 8007836:	20fe      	movs	r0, #254	@ 0xfe
 8007838:	0580      	lsls	r0, r0, #22
 800783a:	f7f9 fc6d 	bl	8001118 <__aeabi_fsub>
 800783e:	1c03      	adds	r3, r0, #0
 8007840:	1c18      	adds	r0, r3, #0
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	22a0      	movs	r2, #160	@ 0xa0
 8007846:	589b      	ldr	r3, [r3, r2]
 8007848:	1c19      	adds	r1, r3, #0
 800784a:	f7f9 fb27 	bl	8000e9c <__aeabi_fmul>
 800784e:	1c03      	adds	r3, r0, #0
 8007850:	1c1c      	adds	r4, r3, #0
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	68b8      	ldr	r0, [r7, #8]
 8007856:	f7f9 fb21 	bl	8000e9c <__aeabi_fmul>
 800785a:	1c03      	adds	r3, r0, #0
 800785c:	1c19      	adds	r1, r3, #0
 800785e:	1c20      	adds	r0, r4, #0
 8007860:	f7f8 ffac 	bl	80007bc <__aeabi_fadd>
 8007864:	1c03      	adds	r3, r0, #0
 8007866:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	22a0      	movs	r2, #160	@ 0xa0
 800786c:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	22a0      	movs	r2, #160	@ 0xa0
 8007872:	589b      	ldr	r3, [r3, r2]
}
 8007874:	1c18      	adds	r0, r3, #0
 8007876:	46bd      	mov	sp, r7
 8007878:	b007      	add	sp, #28
 800787a:	bd90      	pop	{r4, r7, pc}
 800787c:	be4ccccd 	.word	0xbe4ccccd
 8007880:	43f00000 	.word	0x43f00000
 8007884:	41a00000 	.word	0x41a00000

08007888 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8007888:	b590      	push	{r4, r7, lr}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6039      	str	r1, [r7, #0]
 8007890:	0011      	movs	r1, r2
 8007892:	1dfb      	adds	r3, r7, #7
 8007894:	1c02      	adds	r2, r0, #0
 8007896:	701a      	strb	r2, [r3, #0]
 8007898:	1dbb      	adds	r3, r7, #6
 800789a:	1c0a      	adds	r2, r1, #0
 800789c:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800789e:	4b08      	ldr	r3, [pc, #32]	@ (80078c0 <ReadRegister+0x38>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d008      	beq.n	80078b8 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 80078a6:	4b06      	ldr	r3, [pc, #24]	@ (80078c0 <ReadRegister+0x38>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	1dba      	adds	r2, r7, #6
 80078ac:	7814      	ldrb	r4, [r2, #0]
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	1dfa      	adds	r2, r7, #7
 80078b2:	7810      	ldrb	r0, [r2, #0]
 80078b4:	0022      	movs	r2, r4
 80078b6:	4798      	blx	r3
  }
}
 80078b8:	46c0      	nop			@ (mov r8, r8)
 80078ba:	46bd      	mov	sp, r7
 80078bc:	b003      	add	sp, #12
 80078be:	bd90      	pop	{r4, r7, pc}
 80078c0:	2000255c 	.word	0x2000255c

080078c4 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80078c4:	b590      	push	{r4, r7, lr}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6039      	str	r1, [r7, #0]
 80078cc:	0011      	movs	r1, r2
 80078ce:	1dfb      	adds	r3, r7, #7
 80078d0:	1c02      	adds	r2, r0, #0
 80078d2:	701a      	strb	r2, [r3, #0]
 80078d4:	1dbb      	adds	r3, r7, #6
 80078d6:	1c0a      	adds	r2, r1, #0
 80078d8:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80078da:	4b08      	ldr	r3, [pc, #32]	@ (80078fc <WriteRegister+0x38>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d008      	beq.n	80078f4 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 80078e2:	4b06      	ldr	r3, [pc, #24]	@ (80078fc <WriteRegister+0x38>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	1dba      	adds	r2, r7, #6
 80078e8:	7814      	ldrb	r4, [r2, #0]
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	1dfa      	adds	r2, r7, #7
 80078ee:	7810      	ldrb	r0, [r2, #0]
 80078f0:	0022      	movs	r2, r4
 80078f2:	4798      	blx	r3
  }
}
 80078f4:	46c0      	nop			@ (mov r8, r8)
 80078f6:	46bd      	mov	sp, r7
 80078f8:	b003      	add	sp, #12
 80078fa:	bd90      	pop	{r4, r7, pc}
 80078fc:	20002560 	.word	0x20002560

08007900 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800790a:	4b07      	ldr	r3, [pc, #28]	@ (8007928 <SGP_Init+0x28>)
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8007910:	4b06      	ldr	r3, [pc, #24]	@ (800792c <SGP_Init+0x2c>)
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8007916:	4b06      	ldr	r3, [pc, #24]	@ (8007930 <SGP_Init+0x30>)
 8007918:	2100      	movs	r1, #0
 800791a:	0018      	movs	r0, r3
 800791c:	f7ff f930 	bl	8006b80 <GasIndexAlgorithm_init>
}
 8007920:	46c0      	nop			@ (mov r8, r8)
 8007922:	46bd      	mov	sp, r7
 8007924:	b002      	add	sp, #8
 8007926:	bd80      	pop	{r7, pc}
 8007928:	2000255c 	.word	0x2000255c
 800792c:	20002560 	.word	0x20002560
 8007930:	20002570 	.word	0x20002570

08007934 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8007934:	b580      	push	{r7, lr}
 8007936:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8007938:	4b13      	ldr	r3, [pc, #76]	@ (8007988 <SGP_StartMeasurement+0x54>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00d      	beq.n	800795c <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8007940:	4b12      	ldr	r3, [pc, #72]	@ (800798c <SGP_StartMeasurement+0x58>)
 8007942:	2208      	movs	r2, #8
 8007944:	0019      	movs	r1, r3
 8007946:	2059      	movs	r0, #89	@ 0x59
 8007948:	f7ff ffbc 	bl	80078c4 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800794c:	f001 f956 	bl	8008bfc <GetCurrentHalTicks>
 8007950:	0003      	movs	r3, r0
 8007952:	331e      	adds	r3, #30
 8007954:	001a      	movs	r2, r3
 8007956:	4b0e      	ldr	r3, [pc, #56]	@ (8007990 <SGP_StartMeasurement+0x5c>)
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	e00c      	b.n	8007976 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800795c:	4b0d      	ldr	r3, [pc, #52]	@ (8007994 <SGP_StartMeasurement+0x60>)
 800795e:	2208      	movs	r2, #8
 8007960:	0019      	movs	r1, r3
 8007962:	2059      	movs	r0, #89	@ 0x59
 8007964:	f7ff ffae 	bl	80078c4 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 8007968:	f001 f948 	bl	8008bfc <GetCurrentHalTicks>
 800796c:	0003      	movs	r3, r0
 800796e:	33aa      	adds	r3, #170	@ 0xaa
 8007970:	001a      	movs	r2, r3
 8007972:	4b09      	ldr	r3, [pc, #36]	@ (8007998 <SGP_StartMeasurement+0x64>)
 8007974:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8007976:	4b09      	ldr	r3, [pc, #36]	@ (800799c <SGP_StartMeasurement+0x68>)
 8007978:	2200      	movs	r2, #0
 800797a:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800797c:	4b08      	ldr	r3, [pc, #32]	@ (80079a0 <SGP_StartMeasurement+0x6c>)
 800797e:	2200      	movs	r2, #0
 8007980:	701a      	strb	r2, [r3, #0]
}
 8007982:	46c0      	nop			@ (mov r8, r8)
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	20002618 	.word	0x20002618
 800798c:	20000120 	.word	0x20000120
 8007990:	20000134 	.word	0x20000134
 8007994:	20000118 	.word	0x20000118
 8007998:	2000012c 	.word	0x2000012c
 800799c:	2000256e 	.word	0x2000256e
 80079a0:	2000256f 	.word	0x2000256f

080079a4 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	4b04      	ldr	r3, [pc, #16]	@ (80079bc <SGP_HeatedUp+0x18>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	0018      	movs	r0, r3
 80079ae:	f001 f843 	bl	8008a38 <TimestampIsReached>
 80079b2:	0003      	movs	r3, r0
 80079b4:	0018      	movs	r0, r3
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	46c0      	nop			@ (mov r8, r8)
 80079bc:	2000012c 	.word	0x2000012c

080079c0 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 80079c0:	b580      	push	{r7, lr}
 80079c2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 80079c4:	4b04      	ldr	r3, [pc, #16]	@ (80079d8 <SGP_MeasurementReady+0x18>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	0018      	movs	r0, r3
 80079ca:	f001 f835 	bl	8008a38 <TimestampIsReached>
 80079ce:	0003      	movs	r3, r0
}
 80079d0:	0018      	movs	r0, r3
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	46c0      	nop			@ (mov r8, r8)
 80079d8:	20000134 	.word	0x20000134

080079dc <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 80079e0:	4b04      	ldr	r3, [pc, #16]	@ (80079f4 <SGP_MeasurementDone+0x18>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	0018      	movs	r0, r3
 80079e6:	f001 f827 	bl	8008a38 <TimestampIsReached>
 80079ea:	0003      	movs	r3, r0
}
 80079ec:	0018      	movs	r0, r3
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	46c0      	nop			@ (mov r8, r8)
 80079f4:	20000130 	.word	0x20000130

080079f8 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80079fc:	4b04      	ldr	r3, [pc, #16]	@ (8007a10 <SGP_TurnHeaterOff+0x18>)
 80079fe:	2202      	movs	r2, #2
 8007a00:	0019      	movs	r1, r3
 8007a02:	2059      	movs	r0, #89	@ 0x59
 8007a04:	f7ff ff5e 	bl	80078c4 <WriteRegister>
}
 8007a08:	46c0      	nop			@ (mov r8, r8)
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	46c0      	nop			@ (mov r8, r8)
 8007a10:	20000110 	.word	0x20000110

08007a14 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8007a14:	b5b0      	push	{r4, r5, r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af02      	add	r7, sp, #8
 8007a1a:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8007a1c:	f7ff ffc2 	bl	80079a4 <SGP_HeatedUp>
 8007a20:	1e03      	subs	r3, r0, #0
 8007a22:	d038      	beq.n	8007a96 <SGP_GetMeasurementValues+0x82>
 8007a24:	4bd8      	ldr	r3, [pc, #864]	@ (8007d88 <SGP_GetMeasurementValues+0x374>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	4053      	eors	r3, r2
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d031      	beq.n	8007a96 <SGP_GetMeasurementValues+0x82>
 8007a32:	4bd6      	ldr	r3, [pc, #856]	@ (8007d8c <SGP_GetMeasurementValues+0x378>)
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2201      	movs	r2, #1
 8007a38:	4053      	eors	r3, r2
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d02a      	beq.n	8007a96 <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 8007a40:	4ad3      	ldr	r2, [pc, #844]	@ (8007d90 <SGP_GetMeasurementValues+0x37c>)
 8007a42:	4bd4      	ldr	r3, [pc, #848]	@ (8007d94 <SGP_GetMeasurementValues+0x380>)
 8007a44:	0019      	movs	r1, r3
 8007a46:	2003      	movs	r0, #3
 8007a48:	f001 f84c 	bl	8008ae4 <CreateLine>
    HeatUpIsDone = true;
 8007a4c:	4bce      	ldr	r3, [pc, #824]	@ (8007d88 <SGP_GetMeasurementValues+0x374>)
 8007a4e:	2201      	movs	r2, #1
 8007a50:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8007a52:	4bd1      	ldr	r3, [pc, #836]	@ (8007d98 <SGP_GetMeasurementValues+0x384>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00d      	beq.n	8007a76 <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8007a5a:	4bd0      	ldr	r3, [pc, #832]	@ (8007d9c <SGP_GetMeasurementValues+0x388>)
 8007a5c:	2208      	movs	r2, #8
 8007a5e:	0019      	movs	r1, r3
 8007a60:	2059      	movs	r0, #89	@ 0x59
 8007a62:	f7ff ff2f 	bl	80078c4 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8007a66:	f001 f8c9 	bl	8008bfc <GetCurrentHalTicks>
 8007a6a:	0003      	movs	r3, r0
 8007a6c:	331e      	adds	r3, #30
 8007a6e:	001a      	movs	r2, r3
 8007a70:	4bcb      	ldr	r3, [pc, #812]	@ (8007da0 <SGP_GetMeasurementValues+0x38c>)
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	e00c      	b.n	8007a90 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8007a76:	4bcb      	ldr	r3, [pc, #812]	@ (8007da4 <SGP_GetMeasurementValues+0x390>)
 8007a78:	2208      	movs	r2, #8
 8007a7a:	0019      	movs	r1, r3
 8007a7c:	2059      	movs	r0, #89	@ 0x59
 8007a7e:	f7ff ff21 	bl	80078c4 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8007a82:	f001 f8bb 	bl	8008bfc <GetCurrentHalTicks>
 8007a86:	0003      	movs	r3, r0
 8007a88:	331e      	adds	r3, #30
 8007a8a:	001a      	movs	r2, r3
 8007a8c:	4bc4      	ldr	r3, [pc, #784]	@ (8007da0 <SGP_GetMeasurementValues+0x38c>)
 8007a8e:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8007a90:	4bbe      	ldr	r3, [pc, #760]	@ (8007d8c <SGP_GetMeasurementValues+0x378>)
 8007a92:	2201      	movs	r2, #1
 8007a94:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8007a96:	4bbc      	ldr	r3, [pc, #752]	@ (8007d88 <SGP_GetMeasurementValues+0x374>)
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d100      	bne.n	8007aa0 <SGP_GetMeasurementValues+0x8c>
 8007a9e:	e1b1      	b.n	8007e04 <SGP_GetMeasurementValues+0x3f0>
 8007aa0:	f7ff ff8e 	bl	80079c0 <SGP_MeasurementReady>
 8007aa4:	1e03      	subs	r3, r0, #0
 8007aa6:	d100      	bne.n	8007aaa <SGP_GetMeasurementValues+0x96>
 8007aa8:	e1ac      	b.n	8007e04 <SGP_GetMeasurementValues+0x3f0>
 8007aaa:	4bbf      	ldr	r3, [pc, #764]	@ (8007da8 <SGP_GetMeasurementValues+0x394>)
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	4053      	eors	r3, r2
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d100      	bne.n	8007aba <SGP_GetMeasurementValues+0xa6>
 8007ab8:	e1a4      	b.n	8007e04 <SGP_GetMeasurementValues+0x3f0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 8007aba:	4bbc      	ldr	r3, [pc, #752]	@ (8007dac <SGP_GetMeasurementValues+0x398>)
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	4abb      	ldr	r2, [pc, #748]	@ (8007db0 <SGP_GetMeasurementValues+0x39c>)
 8007ac2:	49b4      	ldr	r1, [pc, #720]	@ (8007d94 <SGP_GetMeasurementValues+0x380>)
 8007ac4:	2003      	movs	r0, #3
 8007ac6:	f001 f80d 	bl	8008ae4 <CreateLine>
    MeasurementIsReady = true;
 8007aca:	4bb7      	ldr	r3, [pc, #732]	@ (8007da8 <SGP_GetMeasurementValues+0x394>)
 8007acc:	2201      	movs	r2, #1
 8007ace:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8007ad0:	4bb8      	ldr	r3, [pc, #736]	@ (8007db4 <SGP_GetMeasurementValues+0x3a0>)
 8007ad2:	2203      	movs	r2, #3
 8007ad4:	0019      	movs	r1, r3
 8007ad6:	2059      	movs	r0, #89	@ 0x59
 8007ad8:	f7ff fed6 	bl	8007888 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8007adc:	4bb5      	ldr	r3, [pc, #724]	@ (8007db4 <SGP_GetMeasurementValues+0x3a0>)
 8007ade:	2203      	movs	r2, #3
 8007ae0:	2103      	movs	r1, #3
 8007ae2:	0018      	movs	r0, r3
 8007ae4:	f000 f9f4 	bl	8007ed0 <CheckCRC>
 8007ae8:	0003      	movs	r3, r0
 8007aea:	001a      	movs	r2, r3
 8007aec:	2301      	movs	r3, #1
 8007aee:	4053      	eors	r3, r2
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d02a      	beq.n	8007b4c <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 8007af6:	4ab0      	ldr	r2, [pc, #704]	@ (8007db8 <SGP_GetMeasurementValues+0x3a4>)
 8007af8:	4bb0      	ldr	r3, [pc, #704]	@ (8007dbc <SGP_GetMeasurementValues+0x3a8>)
 8007afa:	0019      	movs	r1, r3
 8007afc:	2001      	movs	r0, #1
 8007afe:	f000 fff1 	bl	8008ae4 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8007b02:	4aaf      	ldr	r2, [pc, #700]	@ (8007dc0 <SGP_GetMeasurementValues+0x3ac>)
 8007b04:	4baf      	ldr	r3, [pc, #700]	@ (8007dc4 <SGP_GetMeasurementValues+0x3b0>)
 8007b06:	0019      	movs	r1, r3
 8007b08:	2002      	movs	r0, #2
 8007b0a:	f000 ffeb 	bl	8008ae4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8007b0e:	230f      	movs	r3, #15
 8007b10:	18fb      	adds	r3, r7, r3
 8007b12:	2200      	movs	r2, #0
 8007b14:	701a      	strb	r2, [r3, #0]
 8007b16:	e012      	b.n	8007b3e <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8007b18:	240f      	movs	r4, #15
 8007b1a:	193b      	adds	r3, r7, r4
 8007b1c:	7818      	ldrb	r0, [r3, #0]
 8007b1e:	193b      	adds	r3, r7, r4
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	4aa4      	ldr	r2, [pc, #656]	@ (8007db4 <SGP_GetMeasurementValues+0x3a0>)
 8007b24:	5cd3      	ldrb	r3, [r2, r3]
 8007b26:	4aa8      	ldr	r2, [pc, #672]	@ (8007dc8 <SGP_GetMeasurementValues+0x3b4>)
 8007b28:	499a      	ldr	r1, [pc, #616]	@ (8007d94 <SGP_GetMeasurementValues+0x380>)
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	0003      	movs	r3, r0
 8007b2e:	2003      	movs	r0, #3
 8007b30:	f000 ffd8 	bl	8008ae4 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8007b34:	193b      	adds	r3, r7, r4
 8007b36:	781a      	ldrb	r2, [r3, #0]
 8007b38:	193b      	adds	r3, r7, r4
 8007b3a:	3201      	adds	r2, #1
 8007b3c:	701a      	strb	r2, [r3, #0]
 8007b3e:	230f      	movs	r3, #15
 8007b40:	18fb      	adds	r3, r7, r3
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d9e7      	bls.n	8007b18 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	e173      	b.n	8007e34 <SGP_GetMeasurementValues+0x420>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 8007b4c:	f001 f856 	bl	8008bfc <GetCurrentHalTicks>
 8007b50:	0003      	movs	r3, r0
 8007b52:	22fa      	movs	r2, #250	@ 0xfa
 8007b54:	0092      	lsls	r2, r2, #2
 8007b56:	189a      	adds	r2, r3, r2
 8007b58:	4b9c      	ldr	r3, [pc, #624]	@ (8007dcc <SGP_GetMeasurementValues+0x3b8>)
 8007b5a:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8007b5c:	f7ff ff4c 	bl	80079f8 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 8007b60:	4b92      	ldr	r3, [pc, #584]	@ (8007dac <SGP_GetMeasurementValues+0x398>)
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	3301      	adds	r3, #1
 8007b66:	b2da      	uxtb	r2, r3
 8007b68:	4b90      	ldr	r3, [pc, #576]	@ (8007dac <SGP_GetMeasurementValues+0x398>)
 8007b6a:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8007b6c:	4b8f      	ldr	r3, [pc, #572]	@ (8007dac <SGP_GetMeasurementValues+0x398>)
 8007b6e:	781a      	ldrb	r2, [r3, #0]
 8007b70:	4b97      	ldr	r3, [pc, #604]	@ (8007dd0 <SGP_GetMeasurementValues+0x3bc>)
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d200      	bcs.n	8007b7a <SGP_GetMeasurementValues+0x166>
 8007b78:	e144      	b.n	8007e04 <SGP_GetMeasurementValues+0x3f0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8007b7a:	4b8e      	ldr	r3, [pc, #568]	@ (8007db4 <SGP_GetMeasurementValues+0x3a0>)
 8007b7c:	785b      	ldrb	r3, [r3, #1]
 8007b7e:	021b      	lsls	r3, r3, #8
 8007b80:	b21a      	sxth	r2, r3
 8007b82:	4b8c      	ldr	r3, [pc, #560]	@ (8007db4 <SGP_GetMeasurementValues+0x3a0>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	b21b      	sxth	r3, r3
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	b21a      	sxth	r2, r3
 8007b8c:	240c      	movs	r4, #12
 8007b8e:	193b      	adds	r3, r7, r4
 8007b90:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8007b92:	193b      	adds	r3, r7, r4
 8007b94:	881b      	ldrh	r3, [r3, #0]
 8007b96:	4a8f      	ldr	r2, [pc, #572]	@ (8007dd4 <SGP_GetMeasurementValues+0x3c0>)
 8007b98:	497e      	ldr	r1, [pc, #504]	@ (8007d94 <SGP_GetMeasurementValues+0x380>)
 8007b9a:	2003      	movs	r0, #3
 8007b9c:	f000 ffa2 	bl	8008ae4 <CreateLine>
      int32_t tempVocIndex = 0;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8007ba4:	193b      	adds	r3, r7, r4
 8007ba6:	8819      	ldrh	r1, [r3, #0]
 8007ba8:	2308      	movs	r3, #8
 8007baa:	18fa      	adds	r2, r7, r3
 8007bac:	4b8a      	ldr	r3, [pc, #552]	@ (8007dd8 <SGP_GetMeasurementValues+0x3c4>)
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f7ff f848 	bl	8006c44 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	4a89      	ldr	r2, [pc, #548]	@ (8007ddc <SGP_GetMeasurementValues+0x3c8>)
 8007bb8:	4976      	ldr	r1, [pc, #472]	@ (8007d94 <SGP_GetMeasurementValues+0x380>)
 8007bba:	2003      	movs	r0, #3
 8007bbc:	f000 ff92 	bl	8008ae4 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	dd5d      	ble.n	8007c8a <SGP_GetMeasurementValues+0x276>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b64      	cmp	r3, #100	@ 0x64
 8007bd4:	dc59      	bgt.n	8007c8a <SGP_GetMeasurementValues+0x276>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	0018      	movs	r0, r3
 8007bdc:	f7fb fb6e 	bl	80032bc <__aeabi_i2d>
 8007be0:	2200      	movs	r2, #0
 8007be2:	4b7f      	ldr	r3, [pc, #508]	@ (8007de0 <SGP_GetMeasurementValues+0x3cc>)
 8007be4:	f7fa f864 	bl	8001cb0 <__aeabi_ddiv>
 8007be8:	0002      	movs	r2, r0
 8007bea:	000b      	movs	r3, r1
 8007bec:	2000      	movs	r0, #0
 8007bee:	497d      	ldr	r1, [pc, #500]	@ (8007de4 <SGP_GetMeasurementValues+0x3d0>)
 8007bf0:	f7fa ff6a 	bl	8002ac8 <__aeabi_dsub>
 8007bf4:	0002      	movs	r2, r0
 8007bf6:	000b      	movs	r3, r1
 8007bf8:	0014      	movs	r4, r2
 8007bfa:	001d      	movs	r5, r3
 8007bfc:	4b7a      	ldr	r3, [pc, #488]	@ (8007de8 <SGP_GetMeasurementValues+0x3d4>)
 8007bfe:	881b      	ldrh	r3, [r3, #0]
 8007c00:	0018      	movs	r0, r3
 8007c02:	f7fb fb5b 	bl	80032bc <__aeabi_i2d>
 8007c06:	0002      	movs	r2, r0
 8007c08:	000b      	movs	r3, r1
 8007c0a:	0020      	movs	r0, r4
 8007c0c:	0029      	movs	r1, r5
 8007c0e:	f7fa fc93 	bl	8002538 <__aeabi_dmul>
 8007c12:	0002      	movs	r2, r0
 8007c14:	000b      	movs	r3, r1
 8007c16:	0010      	movs	r0, r2
 8007c18:	0019      	movs	r1, r3
 8007c1a:	f7f8 fce5 	bl	80005e8 <__aeabi_d2uiz>
 8007c1e:	0003      	movs	r3, r0
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	4b72      	ldr	r3, [pc, #456]	@ (8007dec <SGP_GetMeasurementValues+0x3d8>)
 8007c24:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	0018      	movs	r0, r3
 8007c2c:	f7fb fb46 	bl	80032bc <__aeabi_i2d>
 8007c30:	2200      	movs	r2, #0
 8007c32:	4b6b      	ldr	r3, [pc, #428]	@ (8007de0 <SGP_GetMeasurementValues+0x3cc>)
 8007c34:	f7fa f83c 	bl	8001cb0 <__aeabi_ddiv>
 8007c38:	0002      	movs	r2, r0
 8007c3a:	000b      	movs	r3, r1
 8007c3c:	0014      	movs	r4, r2
 8007c3e:	001d      	movs	r5, r3
 8007c40:	4b69      	ldr	r3, [pc, #420]	@ (8007de8 <SGP_GetMeasurementValues+0x3d4>)
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	0018      	movs	r0, r3
 8007c46:	f7fb fb39 	bl	80032bc <__aeabi_i2d>
 8007c4a:	0002      	movs	r2, r0
 8007c4c:	000b      	movs	r3, r1
 8007c4e:	0020      	movs	r0, r4
 8007c50:	0029      	movs	r1, r5
 8007c52:	f7fa fc71 	bl	8002538 <__aeabi_dmul>
 8007c56:	0002      	movs	r2, r0
 8007c58:	000b      	movs	r3, r1
 8007c5a:	0010      	movs	r0, r2
 8007c5c:	0019      	movs	r1, r3
 8007c5e:	f7f8 fcc3 	bl	80005e8 <__aeabi_d2uiz>
 8007c62:	0003      	movs	r3, r0
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	4b62      	ldr	r3, [pc, #392]	@ (8007df0 <SGP_GetMeasurementValues+0x3dc>)
 8007c68:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 8007c6a:	4b5f      	ldr	r3, [pc, #380]	@ (8007de8 <SGP_GetMeasurementValues+0x3d4>)
 8007c6c:	881a      	ldrh	r2, [r3, #0]
 8007c6e:	4b61      	ldr	r3, [pc, #388]	@ (8007df4 <SGP_GetMeasurementValues+0x3e0>)
 8007c70:	801a      	strh	r2, [r3, #0]
      TIM3->CCR1 = Red;
 8007c72:	4b60      	ldr	r3, [pc, #384]	@ (8007df4 <SGP_GetMeasurementValues+0x3e0>)
 8007c74:	881a      	ldrh	r2, [r3, #0]
 8007c76:	4b60      	ldr	r3, [pc, #384]	@ (8007df8 <SGP_GetMeasurementValues+0x3e4>)
 8007c78:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3->CCR2 = Green;
 8007c7a:	4b5c      	ldr	r3, [pc, #368]	@ (8007dec <SGP_GetMeasurementValues+0x3d8>)
 8007c7c:	881a      	ldrh	r2, [r3, #0]
 8007c7e:	4b5e      	ldr	r3, [pc, #376]	@ (8007df8 <SGP_GetMeasurementValues+0x3e4>)
 8007c80:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3->CCR3 = Blue;
 8007c82:	4b5b      	ldr	r3, [pc, #364]	@ (8007df0 <SGP_GetMeasurementValues+0x3dc>)
 8007c84:	881a      	ldrh	r2, [r3, #0]
 8007c86:	4b5c      	ldr	r3, [pc, #368]	@ (8007df8 <SGP_GetMeasurementValues+0x3e4>)
 8007c88:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      if(*vocIndex > 100){
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b64      	cmp	r3, #100	@ 0x64
 8007c90:	dd69      	ble.n	8007d66 <SGP_GetMeasurementValues+0x352>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	0018      	movs	r0, r3
 8007c98:	f7fb fb10 	bl	80032bc <__aeabi_i2d>
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	4b50      	ldr	r3, [pc, #320]	@ (8007de0 <SGP_GetMeasurementValues+0x3cc>)
 8007ca0:	f7fa ff12 	bl	8002ac8 <__aeabi_dsub>
 8007ca4:	0002      	movs	r2, r0
 8007ca6:	000b      	movs	r3, r1
 8007ca8:	0010      	movs	r0, r2
 8007caa:	0019      	movs	r1, r3
 8007cac:	2200      	movs	r2, #0
 8007cae:	4b53      	ldr	r3, [pc, #332]	@ (8007dfc <SGP_GetMeasurementValues+0x3e8>)
 8007cb0:	f7f9 fffe 	bl	8001cb0 <__aeabi_ddiv>
 8007cb4:	0002      	movs	r2, r0
 8007cb6:	000b      	movs	r3, r1
 8007cb8:	0014      	movs	r4, r2
 8007cba:	001d      	movs	r5, r3
 8007cbc:	4b4a      	ldr	r3, [pc, #296]	@ (8007de8 <SGP_GetMeasurementValues+0x3d4>)
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	f7fb fafb 	bl	80032bc <__aeabi_i2d>
 8007cc6:	0002      	movs	r2, r0
 8007cc8:	000b      	movs	r3, r1
 8007cca:	0020      	movs	r0, r4
 8007ccc:	0029      	movs	r1, r5
 8007cce:	f7fa fc33 	bl	8002538 <__aeabi_dmul>
 8007cd2:	0002      	movs	r2, r0
 8007cd4:	000b      	movs	r3, r1
 8007cd6:	0010      	movs	r0, r2
 8007cd8:	0019      	movs	r1, r3
 8007cda:	f7f8 fc85 	bl	80005e8 <__aeabi_d2uiz>
 8007cde:	0003      	movs	r3, r0
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	4b42      	ldr	r3, [pc, #264]	@ (8007dec <SGP_GetMeasurementValues+0x3d8>)
 8007ce4:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	0018      	movs	r0, r3
 8007cec:	f7fb fae6 	bl	80032bc <__aeabi_i2d>
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8007de0 <SGP_GetMeasurementValues+0x3cc>)
 8007cf4:	f7fa fee8 	bl	8002ac8 <__aeabi_dsub>
 8007cf8:	0002      	movs	r2, r0
 8007cfa:	000b      	movs	r3, r1
 8007cfc:	0010      	movs	r0, r2
 8007cfe:	0019      	movs	r1, r3
 8007d00:	2200      	movs	r2, #0
 8007d02:	4b3e      	ldr	r3, [pc, #248]	@ (8007dfc <SGP_GetMeasurementValues+0x3e8>)
 8007d04:	f7f9 ffd4 	bl	8001cb0 <__aeabi_ddiv>
 8007d08:	0002      	movs	r2, r0
 8007d0a:	000b      	movs	r3, r1
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	4935      	ldr	r1, [pc, #212]	@ (8007de4 <SGP_GetMeasurementValues+0x3d0>)
 8007d10:	f7fa feda 	bl	8002ac8 <__aeabi_dsub>
 8007d14:	0002      	movs	r2, r0
 8007d16:	000b      	movs	r3, r1
 8007d18:	0014      	movs	r4, r2
 8007d1a:	001d      	movs	r5, r3
 8007d1c:	4b32      	ldr	r3, [pc, #200]	@ (8007de8 <SGP_GetMeasurementValues+0x3d4>)
 8007d1e:	881b      	ldrh	r3, [r3, #0]
 8007d20:	0018      	movs	r0, r3
 8007d22:	f7fb facb 	bl	80032bc <__aeabi_i2d>
 8007d26:	0002      	movs	r2, r0
 8007d28:	000b      	movs	r3, r1
 8007d2a:	0020      	movs	r0, r4
 8007d2c:	0029      	movs	r1, r5
 8007d2e:	f7fa fc03 	bl	8002538 <__aeabi_dmul>
 8007d32:	0002      	movs	r2, r0
 8007d34:	000b      	movs	r3, r1
 8007d36:	0010      	movs	r0, r2
 8007d38:	0019      	movs	r1, r3
 8007d3a:	f7f8 fc55 	bl	80005e8 <__aeabi_d2uiz>
 8007d3e:	0003      	movs	r3, r0
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	4b2c      	ldr	r3, [pc, #176]	@ (8007df4 <SGP_GetMeasurementValues+0x3e0>)
 8007d44:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 8007d46:	4b28      	ldr	r3, [pc, #160]	@ (8007de8 <SGP_GetMeasurementValues+0x3d4>)
 8007d48:	881a      	ldrh	r2, [r3, #0]
 8007d4a:	4b29      	ldr	r3, [pc, #164]	@ (8007df0 <SGP_GetMeasurementValues+0x3dc>)
 8007d4c:	801a      	strh	r2, [r3, #0]
        TIM3->CCR1 = Red;
 8007d4e:	4b29      	ldr	r3, [pc, #164]	@ (8007df4 <SGP_GetMeasurementValues+0x3e0>)
 8007d50:	881a      	ldrh	r2, [r3, #0]
 8007d52:	4b29      	ldr	r3, [pc, #164]	@ (8007df8 <SGP_GetMeasurementValues+0x3e4>)
 8007d54:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR2 = Green;
 8007d56:	4b25      	ldr	r3, [pc, #148]	@ (8007dec <SGP_GetMeasurementValues+0x3d8>)
 8007d58:	881a      	ldrh	r2, [r3, #0]
 8007d5a:	4b27      	ldr	r3, [pc, #156]	@ (8007df8 <SGP_GetMeasurementValues+0x3e4>)
 8007d5c:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR3 = Blue;
 8007d5e:	4b24      	ldr	r3, [pc, #144]	@ (8007df0 <SGP_GetMeasurementValues+0x3dc>)
 8007d60:	881a      	ldrh	r2, [r3, #0]
 8007d62:	4b25      	ldr	r3, [pc, #148]	@ (8007df8 <SGP_GetMeasurementValues+0x3e4>)
 8007d64:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      SGP_AmountOfSamplesDone = 0;
 8007d66:	4b11      	ldr	r3, [pc, #68]	@ (8007dac <SGP_GetMeasurementValues+0x398>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8007d6c:	4a24      	ldr	r2, [pc, #144]	@ (8007e00 <SGP_GetMeasurementValues+0x3ec>)
 8007d6e:	4b09      	ldr	r3, [pc, #36]	@ (8007d94 <SGP_GetMeasurementValues+0x380>)
 8007d70:	0019      	movs	r1, r3
 8007d72:	2003      	movs	r0, #3
 8007d74:	f000 feb6 	bl	8008ae4 <CreateLine>
      HT_MeasurementReceived = false;
 8007d78:	4b07      	ldr	r3, [pc, #28]	@ (8007d98 <SGP_GetMeasurementValues+0x384>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8007d7e:	4b03      	ldr	r3, [pc, #12]	@ (8007d8c <SGP_GetMeasurementValues+0x378>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e055      	b.n	8007e34 <SGP_GetMeasurementValues+0x420>
 8007d88:	2000256e 	.word	0x2000256e
 8007d8c:	20002619 	.word	0x20002619
 8007d90:	08019f00 	.word	0x08019f00
 8007d94:	08019f2c 	.word	0x08019f2c
 8007d98:	20002618 	.word	0x20002618
 8007d9c:	20000120 	.word	0x20000120
 8007da0:	20000134 	.word	0x20000134
 8007da4:	20000118 	.word	0x20000118
 8007da8:	2000256f 	.word	0x2000256f
 8007dac:	2000256d 	.word	0x2000256d
 8007db0:	08019f30 	.word	0x08019f30
 8007db4:	20002564 	.word	0x20002564
 8007db8:	08019f60 	.word	0x08019f60
 8007dbc:	08019f84 	.word	0x08019f84
 8007dc0:	08019f88 	.word	0x08019f88
 8007dc4:	08019fa8 	.word	0x08019fa8
 8007dc8:	08019fac 	.word	0x08019fac
 8007dcc:	20000130 	.word	0x20000130
 8007dd0:	20000128 	.word	0x20000128
 8007dd4:	08019fcc 	.word	0x08019fcc
 8007dd8:	20002570 	.word	0x20002570
 8007ddc:	08019fe0 	.word	0x08019fe0
 8007de0:	40590000 	.word	0x40590000
 8007de4:	3ff00000 	.word	0x3ff00000
 8007de8:	20000138 	.word	0x20000138
 8007dec:	2000261e 	.word	0x2000261e
 8007df0:	2000261c 	.word	0x2000261c
 8007df4:	2000261a 	.word	0x2000261a
 8007df8:	40000400 	.word	0x40000400
 8007dfc:	40790000 	.word	0x40790000
 8007e00:	08019ff4 	.word	0x08019ff4
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8007e04:	f7ff fdea 	bl	80079dc <SGP_MeasurementDone>
 8007e08:	1e03      	subs	r3, r0, #0
 8007e0a:	d012      	beq.n	8007e32 <SGP_GetMeasurementValues+0x41e>
 8007e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e3c <SGP_GetMeasurementValues+0x428>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00e      	beq.n	8007e32 <SGP_GetMeasurementValues+0x41e>
 8007e14:	4b0a      	ldr	r3, [pc, #40]	@ (8007e40 <SGP_GetMeasurementValues+0x42c>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <SGP_GetMeasurementValues+0x41e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8007e1c:	4a09      	ldr	r2, [pc, #36]	@ (8007e44 <SGP_GetMeasurementValues+0x430>)
 8007e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8007e48 <SGP_GetMeasurementValues+0x434>)
 8007e20:	0019      	movs	r1, r3
 8007e22:	2003      	movs	r0, #3
 8007e24:	f000 fe5e 	bl	8008ae4 <CreateLine>
    SGP_StartMeasurement();
 8007e28:	f7ff fd84 	bl	8007934 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8007e2c:	4b07      	ldr	r3, [pc, #28]	@ (8007e4c <SGP_GetMeasurementValues+0x438>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	0018      	movs	r0, r3
 8007e36:	46bd      	mov	sp, r7
 8007e38:	b004      	add	sp, #16
 8007e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8007e3c:	2000256e 	.word	0x2000256e
 8007e40:	2000256f 	.word	0x2000256f
 8007e44:	0801a018 	.word	0x0801a018
 8007e48:	08019f2c 	.word	0x08019f2c
 8007e4c:	20002619 	.word	0x20002619

08007e50 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8007e56:	4b1a      	ldr	r3, [pc, #104]	@ (8007ec0 <SGP_DeviceConnected+0x70>)
 8007e58:	2202      	movs	r2, #2
 8007e5a:	0019      	movs	r1, r3
 8007e5c:	2059      	movs	r0, #89	@ 0x59
 8007e5e:	f7ff fd31 	bl	80078c4 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8007e62:	2001      	movs	r0, #1
 8007e64:	f001 fa40 	bl	80092e8 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8007e68:	4b16      	ldr	r3, [pc, #88]	@ (8007ec4 <SGP_DeviceConnected+0x74>)
 8007e6a:	2209      	movs	r2, #9
 8007e6c:	0019      	movs	r1, r3
 8007e6e:	2059      	movs	r0, #89	@ 0x59
 8007e70:	f7ff fd0a 	bl	8007888 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8007e74:	1dfb      	adds	r3, r7, #7
 8007e76:	2200      	movs	r2, #0
 8007e78:	701a      	strb	r2, [r3, #0]
 8007e7a:	e011      	b.n	8007ea0 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8007e7c:	1dfb      	adds	r3, r7, #7
 8007e7e:	7818      	ldrb	r0, [r3, #0]
 8007e80:	1dfb      	adds	r3, r7, #7
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	4a0f      	ldr	r2, [pc, #60]	@ (8007ec4 <SGP_DeviceConnected+0x74>)
 8007e86:	5cd3      	ldrb	r3, [r2, r3]
 8007e88:	4a0f      	ldr	r2, [pc, #60]	@ (8007ec8 <SGP_DeviceConnected+0x78>)
 8007e8a:	4910      	ldr	r1, [pc, #64]	@ (8007ecc <SGP_DeviceConnected+0x7c>)
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	0003      	movs	r3, r0
 8007e90:	2002      	movs	r0, #2
 8007e92:	f000 fe27 	bl	8008ae4 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8007e96:	1dfb      	adds	r3, r7, #7
 8007e98:	781a      	ldrb	r2, [r3, #0]
 8007e9a:	1dfb      	adds	r3, r7, #7
 8007e9c:	3201      	adds	r2, #1
 8007e9e:	701a      	strb	r2, [r3, #0]
 8007ea0:	1dfb      	adds	r3, r7, #7
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d9e9      	bls.n	8007e7c <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8007ea8:	4b06      	ldr	r3, [pc, #24]	@ (8007ec4 <SGP_DeviceConnected+0x74>)
 8007eaa:	2203      	movs	r2, #3
 8007eac:	2109      	movs	r1, #9
 8007eae:	0018      	movs	r0, r3
 8007eb0:	f000 f80e 	bl	8007ed0 <CheckCRC>
 8007eb4:	0003      	movs	r3, r0
}
 8007eb6:	0018      	movs	r0, r3
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	b002      	add	sp, #8
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	46c0      	nop			@ (mov r8, r8)
 8007ec0:	20000114 	.word	0x20000114
 8007ec4:	20002564 	.word	0x20002564
 8007ec8:	0801a038 	.word	0x0801a038
 8007ecc:	08019fa8 	.word	0x08019fa8

08007ed0 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8007ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ed2:	b08f      	sub	sp, #60	@ 0x3c
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6278      	str	r0, [r7, #36]	@ 0x24
 8007ed8:	0008      	movs	r0, r1
 8007eda:	0011      	movs	r1, r2
 8007edc:	2323      	movs	r3, #35	@ 0x23
 8007ede:	18fb      	adds	r3, r7, r3
 8007ee0:	1c02      	adds	r2, r0, #0
 8007ee2:	701a      	strb	r2, [r3, #0]
 8007ee4:	2322      	movs	r3, #34	@ 0x22
 8007ee6:	18fb      	adds	r3, r7, r3
 8007ee8:	1c0a      	adds	r2, r1, #0
 8007eea:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8007eec:	2317      	movs	r3, #23
 8007eee:	2220      	movs	r2, #32
 8007ef0:	189b      	adds	r3, r3, r2
 8007ef2:	19db      	adds	r3, r3, r7
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	701a      	strb	r2, [r3, #0]
 8007ef8:	e09f      	b.n	800803a <CheckCRC+0x16a>
 8007efa:	466b      	mov	r3, sp
 8007efc:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8007efe:	2322      	movs	r3, #34	@ 0x22
 8007f00:	18fb      	adds	r3, r7, r3
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	001a      	movs	r2, r3
 8007f06:	3a01      	subs	r2, #1
 8007f08:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f0a:	60bb      	str	r3, [r7, #8]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	60fa      	str	r2, [r7, #12]
 8007f10:	68b8      	ldr	r0, [r7, #8]
 8007f12:	68f9      	ldr	r1, [r7, #12]
 8007f14:	0002      	movs	r2, r0
 8007f16:	0f52      	lsrs	r2, r2, #29
 8007f18:	000c      	movs	r4, r1
 8007f1a:	00e4      	lsls	r4, r4, #3
 8007f1c:	61fc      	str	r4, [r7, #28]
 8007f1e:	69fc      	ldr	r4, [r7, #28]
 8007f20:	4314      	orrs	r4, r2
 8007f22:	61fc      	str	r4, [r7, #28]
 8007f24:	0002      	movs	r2, r0
 8007f26:	00d2      	lsls	r2, r2, #3
 8007f28:	61ba      	str	r2, [r7, #24]
 8007f2a:	603b      	str	r3, [r7, #0]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	6838      	ldr	r0, [r7, #0]
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	0002      	movs	r2, r0
 8007f36:	0f52      	lsrs	r2, r2, #29
 8007f38:	000c      	movs	r4, r1
 8007f3a:	00e4      	lsls	r4, r4, #3
 8007f3c:	617c      	str	r4, [r7, #20]
 8007f3e:	697c      	ldr	r4, [r7, #20]
 8007f40:	4314      	orrs	r4, r2
 8007f42:	617c      	str	r4, [r7, #20]
 8007f44:	0002      	movs	r2, r0
 8007f46:	00d2      	lsls	r2, r2, #3
 8007f48:	613a      	str	r2, [r7, #16]
 8007f4a:	3307      	adds	r3, #7
 8007f4c:	08db      	lsrs	r3, r3, #3
 8007f4e:	00db      	lsls	r3, r3, #3
 8007f50:	466a      	mov	r2, sp
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	469d      	mov	sp, r3
 8007f56:	466b      	mov	r3, sp
 8007f58:	3300      	adds	r3, #0
 8007f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8007f5c:	2316      	movs	r3, #22
 8007f5e:	2220      	movs	r2, #32
 8007f60:	189b      	adds	r3, r3, r2
 8007f62:	19db      	adds	r3, r3, r7
 8007f64:	2200      	movs	r2, #0
 8007f66:	701a      	strb	r2, [r3, #0]
 8007f68:	e01e      	b.n	8007fa8 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8007f6a:	2317      	movs	r3, #23
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	189b      	adds	r3, r3, r2
 8007f70:	19db      	adds	r3, r3, r7
 8007f72:	781a      	ldrb	r2, [r3, #0]
 8007f74:	2116      	movs	r1, #22
 8007f76:	2320      	movs	r3, #32
 8007f78:	18cb      	adds	r3, r1, r3
 8007f7a:	19db      	adds	r3, r3, r7
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	18d3      	adds	r3, r2, r3
 8007f80:	001a      	movs	r2, r3
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	189a      	adds	r2, r3, r2
 8007f86:	0008      	movs	r0, r1
 8007f88:	2320      	movs	r3, #32
 8007f8a:	18cb      	adds	r3, r1, r3
 8007f8c:	19db      	adds	r3, r3, r7
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	7811      	ldrb	r1, [r2, #0]
 8007f92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f94:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8007f96:	2320      	movs	r3, #32
 8007f98:	18c3      	adds	r3, r0, r3
 8007f9a:	19db      	adds	r3, r3, r7
 8007f9c:	781a      	ldrb	r2, [r3, #0]
 8007f9e:	2320      	movs	r3, #32
 8007fa0:	18c3      	adds	r3, r0, r3
 8007fa2:	19db      	adds	r3, r3, r7
 8007fa4:	3201      	adds	r2, #1
 8007fa6:	701a      	strb	r2, [r3, #0]
 8007fa8:	2316      	movs	r3, #22
 8007faa:	2220      	movs	r2, #32
 8007fac:	189b      	adds	r3, r3, r2
 8007fae:	19da      	adds	r2, r3, r7
 8007fb0:	2322      	movs	r3, #34	@ 0x22
 8007fb2:	18fb      	adds	r3, r7, r3
 8007fb4:	7812      	ldrb	r2, [r2, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d3d6      	bcc.n	8007f6a <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8007fbc:	2417      	movs	r4, #23
 8007fbe:	2320      	movs	r3, #32
 8007fc0:	18e3      	adds	r3, r4, r3
 8007fc2:	19db      	adds	r3, r3, r7
 8007fc4:	781a      	ldrb	r2, [r3, #0]
 8007fc6:	2322      	movs	r3, #34	@ 0x22
 8007fc8:	18fb      	adds	r3, r7, r3
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	18d3      	adds	r3, r2, r3
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fd2:	18d2      	adds	r2, r2, r3
 8007fd4:	250b      	movs	r5, #11
 8007fd6:	2320      	movs	r3, #32
 8007fd8:	18eb      	adds	r3, r5, r3
 8007fda:	19db      	adds	r3, r3, r7
 8007fdc:	7812      	ldrb	r2, [r2, #0]
 8007fde:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8007fe0:	2322      	movs	r3, #34	@ 0x22
 8007fe2:	18fb      	adds	r3, r7, r3
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fec:	0011      	movs	r1, r2
 8007fee:	0018      	movs	r0, r3
 8007ff0:	f000 f838 	bl	8008064 <CalculateCRC>
 8007ff4:	0003      	movs	r3, r0
 8007ff6:	001a      	movs	r2, r3
 8007ff8:	2320      	movs	r3, #32
 8007ffa:	18eb      	adds	r3, r5, r3
 8007ffc:	19db      	adds	r3, r3, r7
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	4293      	cmp	r3, r2
 8008002:	d00c      	beq.n	800801e <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8008004:	2320      	movs	r3, #32
 8008006:	18e3      	adds	r3, r4, r3
 8008008:	19db      	adds	r3, r3, r7
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	3301      	adds	r3, #1
 800800e:	4a13      	ldr	r2, [pc, #76]	@ (800805c <CheckCRC+0x18c>)
 8008010:	4913      	ldr	r1, [pc, #76]	@ (8008060 <CheckCRC+0x190>)
 8008012:	2001      	movs	r0, #1
 8008014:	f000 fd66 	bl	8008ae4 <CreateLine>
      return false;
 8008018:	2300      	movs	r3, #0
 800801a:	46b5      	mov	sp, r6
 800801c:	e019      	b.n	8008052 <CheckCRC+0x182>
 800801e:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8008020:	2217      	movs	r2, #23
 8008022:	2320      	movs	r3, #32
 8008024:	18d3      	adds	r3, r2, r3
 8008026:	19db      	adds	r3, r3, r7
 8008028:	2120      	movs	r1, #32
 800802a:	1852      	adds	r2, r2, r1
 800802c:	19d1      	adds	r1, r2, r7
 800802e:	2222      	movs	r2, #34	@ 0x22
 8008030:	18ba      	adds	r2, r7, r2
 8008032:	7809      	ldrb	r1, [r1, #0]
 8008034:	7812      	ldrb	r2, [r2, #0]
 8008036:	188a      	adds	r2, r1, r2
 8008038:	701a      	strb	r2, [r3, #0]
 800803a:	2317      	movs	r3, #23
 800803c:	2220      	movs	r2, #32
 800803e:	189b      	adds	r3, r3, r2
 8008040:	19da      	adds	r2, r3, r7
 8008042:	2323      	movs	r3, #35	@ 0x23
 8008044:	18fb      	adds	r3, r7, r3
 8008046:	7812      	ldrb	r2, [r2, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	429a      	cmp	r2, r3
 800804c:	d200      	bcs.n	8008050 <CheckCRC+0x180>
 800804e:	e754      	b.n	8007efa <CheckCRC+0x2a>
    }
  }
  return true;
 8008050:	2301      	movs	r3, #1
}
 8008052:	0018      	movs	r0, r3
 8008054:	46bd      	mov	sp, r7
 8008056:	b00f      	add	sp, #60	@ 0x3c
 8008058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800805a:	46c0      	nop			@ (mov r8, r8)
 800805c:	0801a058 	.word	0x0801a058
 8008060:	08019f84 	.word	0x08019f84

08008064 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	000a      	movs	r2, r1
 800806e:	1cfb      	adds	r3, r7, #3
 8008070:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8008072:	230f      	movs	r3, #15
 8008074:	18fb      	adds	r3, r7, r3
 8008076:	22ff      	movs	r2, #255	@ 0xff
 8008078:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800807a:	230e      	movs	r3, #14
 800807c:	18fb      	adds	r3, r7, r3
 800807e:	2200      	movs	r2, #0
 8008080:	701a      	strb	r2, [r3, #0]
 8008082:	e037      	b.n	80080f4 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008084:	230e      	movs	r3, #14
 8008086:	18fb      	adds	r3, r7, r3
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	18d3      	adds	r3, r2, r3
 800808e:	7819      	ldrb	r1, [r3, #0]
 8008090:	220f      	movs	r2, #15
 8008092:	18bb      	adds	r3, r7, r2
 8008094:	18ba      	adds	r2, r7, r2
 8008096:	7812      	ldrb	r2, [r2, #0]
 8008098:	404a      	eors	r2, r1
 800809a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800809c:	230d      	movs	r3, #13
 800809e:	18fb      	adds	r3, r7, r3
 80080a0:	2200      	movs	r2, #0
 80080a2:	701a      	strb	r2, [r3, #0]
 80080a4:	e01b      	b.n	80080de <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 80080a6:	210f      	movs	r1, #15
 80080a8:	187b      	adds	r3, r7, r1
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	b25b      	sxtb	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	da09      	bge.n	80080c6 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 80080b2:	187b      	adds	r3, r7, r1
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	005b      	lsls	r3, r3, #1
 80080b8:	b25b      	sxtb	r3, r3
 80080ba:	2231      	movs	r2, #49	@ 0x31
 80080bc:	4053      	eors	r3, r2
 80080be:	b25a      	sxtb	r2, r3
 80080c0:	187b      	adds	r3, r7, r1
 80080c2:	701a      	strb	r2, [r3, #0]
 80080c4:	e005      	b.n	80080d2 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 80080c6:	230f      	movs	r3, #15
 80080c8:	18fa      	adds	r2, r7, r3
 80080ca:	18fb      	adds	r3, r7, r3
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	18db      	adds	r3, r3, r3
 80080d0:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80080d2:	210d      	movs	r1, #13
 80080d4:	187b      	adds	r3, r7, r1
 80080d6:	781a      	ldrb	r2, [r3, #0]
 80080d8:	187b      	adds	r3, r7, r1
 80080da:	3201      	adds	r2, #1
 80080dc:	701a      	strb	r2, [r3, #0]
 80080de:	230d      	movs	r3, #13
 80080e0:	18fb      	adds	r3, r7, r3
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b07      	cmp	r3, #7
 80080e6:	d9de      	bls.n	80080a6 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80080e8:	210e      	movs	r1, #14
 80080ea:	187b      	adds	r3, r7, r1
 80080ec:	781a      	ldrb	r2, [r3, #0]
 80080ee:	187b      	adds	r3, r7, r1
 80080f0:	3201      	adds	r2, #1
 80080f2:	701a      	strb	r2, [r3, #0]
 80080f4:	230e      	movs	r3, #14
 80080f6:	18fa      	adds	r2, r7, r3
 80080f8:	1cfb      	adds	r3, r7, #3
 80080fa:	7812      	ldrb	r2, [r2, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d3c0      	bcc.n	8008084 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8008102:	230f      	movs	r3, #15
 8008104:	18fb      	adds	r3, r7, r3
 8008106:	781b      	ldrb	r3, [r3, #0]
}
 8008108:	0018      	movs	r0, r3
 800810a:	46bd      	mov	sp, r7
 800810c:	b004      	add	sp, #16
 800810e:	bd80      	pop	{r7, pc}

08008110 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4936      	ldr	r1, [pc, #216]	@ (80081f8 <SGP_GetHT+0xe8>)
 8008120:	1c18      	adds	r0, r3, #0
 8008122:	f7f8 fb4b 	bl	80007bc <__aeabi_fadd>
 8008126:	1c03      	adds	r3, r0, #0
 8008128:	4934      	ldr	r1, [pc, #208]	@ (80081fc <SGP_GetHT+0xec>)
 800812a:	1c18      	adds	r0, r3, #0
 800812c:	f7f8 fcd0 	bl	8000ad0 <__aeabi_fdiv>
 8008130:	1c03      	adds	r3, r0, #0
 8008132:	4933      	ldr	r1, [pc, #204]	@ (8008200 <SGP_GetHT+0xf0>)
 8008134:	1c18      	adds	r0, r3, #0
 8008136:	f7f8 feb1 	bl	8000e9c <__aeabi_fmul>
 800813a:	1c03      	adds	r3, r0, #0
 800813c:	1c18      	adds	r0, r3, #0
 800813e:	f7f8 fa3b 	bl	80005b8 <__aeabi_f2uiz>
 8008142:	0003      	movs	r3, r0
 8008144:	b29a      	uxth	r2, r3
 8008146:	4b2f      	ldr	r3, [pc, #188]	@ (8008204 <SGP_GetHT+0xf4>)
 8008148:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	492e      	ldr	r1, [pc, #184]	@ (8008208 <SGP_GetHT+0xf8>)
 8008150:	1c18      	adds	r0, r3, #0
 8008152:	f7f8 fcbd 	bl	8000ad0 <__aeabi_fdiv>
 8008156:	1c03      	adds	r3, r0, #0
 8008158:	4929      	ldr	r1, [pc, #164]	@ (8008200 <SGP_GetHT+0xf0>)
 800815a:	1c18      	adds	r0, r3, #0
 800815c:	f7f8 fe9e 	bl	8000e9c <__aeabi_fmul>
 8008160:	1c03      	adds	r3, r0, #0
 8008162:	1c18      	adds	r0, r3, #0
 8008164:	f7f8 fa28 	bl	80005b8 <__aeabi_f2uiz>
 8008168:	0003      	movs	r3, r0
 800816a:	b29a      	uxth	r2, r3
 800816c:	4b27      	ldr	r3, [pc, #156]	@ (800820c <SGP_GetHT+0xfc>)
 800816e:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8008170:	4b26      	ldr	r3, [pc, #152]	@ (800820c <SGP_GetHT+0xfc>)
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	0a1b      	lsrs	r3, r3, #8
 8008176:	b29b      	uxth	r3, r3
 8008178:	b2da      	uxtb	r2, r3
 800817a:	4b25      	ldr	r3, [pc, #148]	@ (8008210 <SGP_GetHT+0x100>)
 800817c:	709a      	strb	r2, [r3, #2]
 800817e:	4b24      	ldr	r3, [pc, #144]	@ (8008210 <SGP_GetHT+0x100>)
 8008180:	789a      	ldrb	r2, [r3, #2]
 8008182:	210c      	movs	r1, #12
 8008184:	187b      	adds	r3, r7, r1
 8008186:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8008188:	4b20      	ldr	r3, [pc, #128]	@ (800820c <SGP_GetHT+0xfc>)
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	b2da      	uxtb	r2, r3
 800818e:	4b20      	ldr	r3, [pc, #128]	@ (8008210 <SGP_GetHT+0x100>)
 8008190:	70da      	strb	r2, [r3, #3]
 8008192:	4b1f      	ldr	r3, [pc, #124]	@ (8008210 <SGP_GetHT+0x100>)
 8008194:	78da      	ldrb	r2, [r3, #3]
 8008196:	187b      	adds	r3, r7, r1
 8008198:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800819a:	187b      	adds	r3, r7, r1
 800819c:	2102      	movs	r1, #2
 800819e:	0018      	movs	r0, r3
 80081a0:	f7ff ff60 	bl	8008064 <CalculateCRC>
 80081a4:	0003      	movs	r3, r0
 80081a6:	001a      	movs	r2, r3
 80081a8:	4b19      	ldr	r3, [pc, #100]	@ (8008210 <SGP_GetHT+0x100>)
 80081aa:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 80081ac:	4b15      	ldr	r3, [pc, #84]	@ (8008204 <SGP_GetHT+0xf4>)
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	0a1b      	lsrs	r3, r3, #8
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	4b16      	ldr	r3, [pc, #88]	@ (8008210 <SGP_GetHT+0x100>)
 80081b8:	715a      	strb	r2, [r3, #5]
 80081ba:	4b15      	ldr	r3, [pc, #84]	@ (8008210 <SGP_GetHT+0x100>)
 80081bc:	795a      	ldrb	r2, [r3, #5]
 80081be:	2108      	movs	r1, #8
 80081c0:	187b      	adds	r3, r7, r1
 80081c2:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 80081c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008204 <SGP_GetHT+0xf4>)
 80081c6:	881b      	ldrh	r3, [r3, #0]
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	4b11      	ldr	r3, [pc, #68]	@ (8008210 <SGP_GetHT+0x100>)
 80081cc:	719a      	strb	r2, [r3, #6]
 80081ce:	4b10      	ldr	r3, [pc, #64]	@ (8008210 <SGP_GetHT+0x100>)
 80081d0:	799a      	ldrb	r2, [r3, #6]
 80081d2:	187b      	adds	r3, r7, r1
 80081d4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 80081d6:	187b      	adds	r3, r7, r1
 80081d8:	2102      	movs	r1, #2
 80081da:	0018      	movs	r0, r3
 80081dc:	f7ff ff42 	bl	8008064 <CalculateCRC>
 80081e0:	0003      	movs	r3, r0
 80081e2:	001a      	movs	r2, r3
 80081e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008210 <SGP_GetHT+0x100>)
 80081e6:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 80081e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008214 <SGP_GetHT+0x104>)
 80081ea:	2201      	movs	r2, #1
 80081ec:	701a      	strb	r2, [r3, #0]
}
 80081ee:	46c0      	nop			@ (mov r8, r8)
 80081f0:	46bd      	mov	sp, r7
 80081f2:	b004      	add	sp, #16
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	46c0      	nop			@ (mov r8, r8)
 80081f8:	42340000 	.word	0x42340000
 80081fc:	432f0000 	.word	0x432f0000
 8008200:	477fff00 	.word	0x477fff00
 8008204:	20002616 	.word	0x20002616
 8008208:	42c80000 	.word	0x42c80000
 800820c:	20002614 	.word	0x20002614
 8008210:	20000120 	.word	0x20000120
 8008214:	20002618 	.word	0x20002618

08008218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800821c:	4b07      	ldr	r3, [pc, #28]	@ (800823c <HAL_MspInit+0x24>)
 800821e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008220:	4b06      	ldr	r3, [pc, #24]	@ (800823c <HAL_MspInit+0x24>)
 8008222:	2101      	movs	r1, #1
 8008224:	430a      	orrs	r2, r1
 8008226:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8008228:	4b04      	ldr	r3, [pc, #16]	@ (800823c <HAL_MspInit+0x24>)
 800822a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800822c:	4b03      	ldr	r3, [pc, #12]	@ (800823c <HAL_MspInit+0x24>)
 800822e:	2180      	movs	r1, #128	@ 0x80
 8008230:	0549      	lsls	r1, r1, #21
 8008232:	430a      	orrs	r2, r1
 8008234:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008236:	46c0      	nop			@ (mov r8, r8)
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	40021000 	.word	0x40021000

08008240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008244:	46c0      	nop			@ (mov r8, r8)
 8008246:	e7fd      	b.n	8008244 <NMI_Handler+0x4>

08008248 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800824c:	46c0      	nop			@ (mov r8, r8)
 800824e:	e7fd      	b.n	800824c <HardFault_Handler+0x4>

08008250 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008254:	46c0      	nop			@ (mov r8, r8)
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800825e:	46c0      	nop			@ (mov r8, r8)
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008268:	f001 f822 	bl	80092b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800826c:	46c0      	nop			@ (mov r8, r8)
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
	...

08008274 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8008278:	4b05      	ldr	r3, [pc, #20]	@ (8008290 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800827a:	0018      	movs	r0, r3
 800827c:	f001 fe95 	bl	8009faa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8008280:	4b04      	ldr	r3, [pc, #16]	@ (8008294 <DMA1_Channel2_3_IRQHandler+0x20>)
 8008282:	0018      	movs	r0, r3
 8008284:	f001 fe91 	bl	8009faa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8008288:	46c0      	nop			@ (mov r8, r8)
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	46c0      	nop			@ (mov r8, r8)
 8008290:	20000bec 	.word	0x20000bec
 8008294:	20000ba4 	.word	0x20000ba4

08008298 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800829c:	4b07      	ldr	r3, [pc, #28]	@ (80082bc <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800829e:	0018      	movs	r0, r3
 80082a0:	f001 fe83 	bl	8009faa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 80082a4:	4b06      	ldr	r3, [pc, #24]	@ (80082c0 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 80082a6:	0018      	movs	r0, r3
 80082a8:	f001 fe7f 	bl	8009faa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 80082ac:	4b05      	ldr	r3, [pc, #20]	@ (80082c4 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 80082ae:	0018      	movs	r0, r3
 80082b0:	f001 fe7b 	bl	8009faa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80082b4:	46c0      	nop			@ (mov r8, r8)
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	46c0      	nop			@ (mov r8, r8)
 80082bc:	20000c70 	.word	0x20000c70
 80082c0:	20002814 	.word	0x20002814
 80082c4:	2000285c 	.word	0x2000285c

080082c8 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80082cc:	4b03      	ldr	r3, [pc, #12]	@ (80082dc <USART4_5_IRQHandler+0x14>)
 80082ce:	0018      	movs	r0, r3
 80082d0:	f008 f864 	bl	801039c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80082d4:	46c0      	nop			@ (mov r8, r8)
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	46c0      	nop			@ (mov r8, r8)
 80082dc:	2000275c 	.word	0x2000275c

080082e0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80082e4:	4b09      	ldr	r3, [pc, #36]	@ (800830c <I2C1_IRQHandler+0x2c>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	699a      	ldr	r2, [r3, #24]
 80082ea:	23e0      	movs	r3, #224	@ 0xe0
 80082ec:	00db      	lsls	r3, r3, #3
 80082ee:	4013      	ands	r3, r2
 80082f0:	d004      	beq.n	80082fc <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80082f2:	4b06      	ldr	r3, [pc, #24]	@ (800830c <I2C1_IRQHandler+0x2c>)
 80082f4:	0018      	movs	r0, r3
 80082f6:	f002 fc7b 	bl	800abf0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80082fa:	e003      	b.n	8008304 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80082fc:	4b03      	ldr	r3, [pc, #12]	@ (800830c <I2C1_IRQHandler+0x2c>)
 80082fe:	0018      	movs	r0, r3
 8008300:	f002 fc5c 	bl	800abbc <HAL_I2C_EV_IRQHandler>
}
 8008304:	46c0      	nop			@ (mov r8, r8)
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	46c0      	nop			@ (mov r8, r8)
 800830c:	20000afc 	.word	0x20000afc

08008310 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008314:	4b03      	ldr	r3, [pc, #12]	@ (8008324 <USB_IRQHandler+0x14>)
 8008316:	0018      	movs	r0, r3
 8008318:	f004 fe32 	bl	800cf80 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800831c:	46c0      	nop			@ (mov r8, r8)
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	46c0      	nop			@ (mov r8, r8)
 8008324:	20003d8c 	.word	0x20003d8c

08008328 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	af00      	add	r7, sp, #0
  return 1;
 800832c:	2301      	movs	r3, #1
}
 800832e:	0018      	movs	r0, r3
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <_kill>:

int _kill(int pid, int sig)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800833e:	f00e fc15 	bl	8016b6c <__errno>
 8008342:	0003      	movs	r3, r0
 8008344:	2216      	movs	r2, #22
 8008346:	601a      	str	r2, [r3, #0]
  return -1;
 8008348:	2301      	movs	r3, #1
 800834a:	425b      	negs	r3, r3
}
 800834c:	0018      	movs	r0, r3
 800834e:	46bd      	mov	sp, r7
 8008350:	b002      	add	sp, #8
 8008352:	bd80      	pop	{r7, pc}

08008354 <_exit>:

void _exit (int status)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800835c:	2301      	movs	r3, #1
 800835e:	425a      	negs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	0011      	movs	r1, r2
 8008364:	0018      	movs	r0, r3
 8008366:	f7ff ffe5 	bl	8008334 <_kill>
  while (1) {}    /* Make sure we hang here */
 800836a:	46c0      	nop			@ (mov r8, r8)
 800836c:	e7fd      	b.n	800836a <_exit+0x16>

0800836e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b086      	sub	sp, #24
 8008372:	af00      	add	r7, sp, #0
 8008374:	60f8      	str	r0, [r7, #12]
 8008376:	60b9      	str	r1, [r7, #8]
 8008378:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800837a:	2300      	movs	r3, #0
 800837c:	617b      	str	r3, [r7, #20]
 800837e:	e00a      	b.n	8008396 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008380:	e000      	b.n	8008384 <_read+0x16>
 8008382:	bf00      	nop
 8008384:	0001      	movs	r1, r0
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	60ba      	str	r2, [r7, #8]
 800838c:	b2ca      	uxtb	r2, r1
 800838e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	3301      	adds	r3, #1
 8008394:	617b      	str	r3, [r7, #20]
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	429a      	cmp	r2, r3
 800839c:	dbf0      	blt.n	8008380 <_read+0x12>
  }

  return len;
 800839e:	687b      	ldr	r3, [r7, #4]
}
 80083a0:	0018      	movs	r0, r3
 80083a2:	46bd      	mov	sp, r7
 80083a4:	b006      	add	sp, #24
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80083b0:	2301      	movs	r3, #1
 80083b2:	425b      	negs	r3, r3
}
 80083b4:	0018      	movs	r0, r3
 80083b6:	46bd      	mov	sp, r7
 80083b8:	b002      	add	sp, #8
 80083ba:	bd80      	pop	{r7, pc}

080083bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2280      	movs	r2, #128	@ 0x80
 80083ca:	0192      	lsls	r2, r2, #6
 80083cc:	605a      	str	r2, [r3, #4]
  return 0;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	0018      	movs	r0, r3
 80083d2:	46bd      	mov	sp, r7
 80083d4:	b002      	add	sp, #8
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <_isatty>:

int _isatty(int file)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80083e0:	2301      	movs	r3, #1
}
 80083e2:	0018      	movs	r0, r3
 80083e4:	46bd      	mov	sp, r7
 80083e6:	b002      	add	sp, #8
 80083e8:	bd80      	pop	{r7, pc}

080083ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b084      	sub	sp, #16
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	60f8      	str	r0, [r7, #12]
 80083f2:	60b9      	str	r1, [r7, #8]
 80083f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	0018      	movs	r0, r3
 80083fa:	46bd      	mov	sp, r7
 80083fc:	b004      	add	sp, #16
 80083fe:	bd80      	pop	{r7, pc}

08008400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008408:	4a14      	ldr	r2, [pc, #80]	@ (800845c <_sbrk+0x5c>)
 800840a:	4b15      	ldr	r3, [pc, #84]	@ (8008460 <_sbrk+0x60>)
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008414:	4b13      	ldr	r3, [pc, #76]	@ (8008464 <_sbrk+0x64>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d102      	bne.n	8008422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800841c:	4b11      	ldr	r3, [pc, #68]	@ (8008464 <_sbrk+0x64>)
 800841e:	4a12      	ldr	r2, [pc, #72]	@ (8008468 <_sbrk+0x68>)
 8008420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008422:	4b10      	ldr	r3, [pc, #64]	@ (8008464 <_sbrk+0x64>)
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	18d3      	adds	r3, r2, r3
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	429a      	cmp	r2, r3
 800842e:	d207      	bcs.n	8008440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008430:	f00e fb9c 	bl	8016b6c <__errno>
 8008434:	0003      	movs	r3, r0
 8008436:	220c      	movs	r2, #12
 8008438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800843a:	2301      	movs	r3, #1
 800843c:	425b      	negs	r3, r3
 800843e:	e009      	b.n	8008454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008440:	4b08      	ldr	r3, [pc, #32]	@ (8008464 <_sbrk+0x64>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008446:	4b07      	ldr	r3, [pc, #28]	@ (8008464 <_sbrk+0x64>)
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	18d2      	adds	r2, r2, r3
 800844e:	4b05      	ldr	r3, [pc, #20]	@ (8008464 <_sbrk+0x64>)
 8008450:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8008452:	68fb      	ldr	r3, [r7, #12]
}
 8008454:	0018      	movs	r0, r3
 8008456:	46bd      	mov	sp, r7
 8008458:	b006      	add	sp, #24
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20005000 	.word	0x20005000
 8008460:	00000400 	.word	0x00000400
 8008464:	20002620 	.word	0x20002620
 8008468:	200043f0 	.word	0x200043f0

0800846c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008470:	46c0      	nop			@ (mov r8, r8)
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
	...

08008478 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800847e:	2310      	movs	r3, #16
 8008480:	18fb      	adds	r3, r7, r3
 8008482:	0018      	movs	r0, r3
 8008484:	2308      	movs	r3, #8
 8008486:	001a      	movs	r2, r3
 8008488:	2100      	movs	r1, #0
 800848a:	f00e faeb 	bl	8016a64 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800848e:	003b      	movs	r3, r7
 8008490:	0018      	movs	r0, r3
 8008492:	2310      	movs	r3, #16
 8008494:	001a      	movs	r2, r3
 8008496:	2100      	movs	r1, #0
 8008498:	f00e fae4 	bl	8016a64 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800849c:	4b2e      	ldr	r3, [pc, #184]	@ (8008558 <MX_TIM2_Init+0xe0>)
 800849e:	2280      	movs	r2, #128	@ 0x80
 80084a0:	05d2      	lsls	r2, r2, #23
 80084a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80084a4:	4b2c      	ldr	r3, [pc, #176]	@ (8008558 <MX_TIM2_Init+0xe0>)
 80084a6:	2200      	movs	r2, #0
 80084a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084aa:	4b2b      	ldr	r3, [pc, #172]	@ (8008558 <MX_TIM2_Init+0xe0>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80084b0:	4b29      	ldr	r3, [pc, #164]	@ (8008558 <MX_TIM2_Init+0xe0>)
 80084b2:	4a2a      	ldr	r2, [pc, #168]	@ (800855c <MX_TIM2_Init+0xe4>)
 80084b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084b6:	4b28      	ldr	r3, [pc, #160]	@ (8008558 <MX_TIM2_Init+0xe0>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80084bc:	4b26      	ldr	r3, [pc, #152]	@ (8008558 <MX_TIM2_Init+0xe0>)
 80084be:	2200      	movs	r2, #0
 80084c0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80084c2:	4b25      	ldr	r3, [pc, #148]	@ (8008558 <MX_TIM2_Init+0xe0>)
 80084c4:	0018      	movs	r0, r3
 80084c6:	f007 f9db 	bl	800f880 <HAL_TIM_PWM_Init>
 80084ca:	1e03      	subs	r3, r0, #0
 80084cc:	d001      	beq.n	80084d2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80084ce:	f7fd fb3f 	bl	8005b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80084d2:	2110      	movs	r1, #16
 80084d4:	187b      	adds	r3, r7, r1
 80084d6:	2200      	movs	r2, #0
 80084d8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80084da:	187b      	adds	r3, r7, r1
 80084dc:	2200      	movs	r2, #0
 80084de:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80084e0:	187a      	adds	r2, r7, r1
 80084e2:	4b1d      	ldr	r3, [pc, #116]	@ (8008558 <MX_TIM2_Init+0xe0>)
 80084e4:	0011      	movs	r1, r2
 80084e6:	0018      	movs	r0, r3
 80084e8:	f007 fce8 	bl	800febc <HAL_TIMEx_MasterConfigSynchronization>
 80084ec:	1e03      	subs	r3, r0, #0
 80084ee:	d001      	beq.n	80084f4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80084f0:	f7fd fb2e 	bl	8005b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80084f4:	003b      	movs	r3, r7
 80084f6:	2260      	movs	r2, #96	@ 0x60
 80084f8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80084fa:	003b      	movs	r3, r7
 80084fc:	2200      	movs	r2, #0
 80084fe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008500:	003b      	movs	r3, r7
 8008502:	2200      	movs	r2, #0
 8008504:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008506:	003b      	movs	r3, r7
 8008508:	2200      	movs	r2, #0
 800850a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800850c:	0039      	movs	r1, r7
 800850e:	4b12      	ldr	r3, [pc, #72]	@ (8008558 <MX_TIM2_Init+0xe0>)
 8008510:	2200      	movs	r2, #0
 8008512:	0018      	movs	r0, r3
 8008514:	f007 fa86 	bl	800fa24 <HAL_TIM_PWM_ConfigChannel>
 8008518:	1e03      	subs	r3, r0, #0
 800851a:	d001      	beq.n	8008520 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800851c:	f7fd fb18 	bl	8005b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008520:	0039      	movs	r1, r7
 8008522:	4b0d      	ldr	r3, [pc, #52]	@ (8008558 <MX_TIM2_Init+0xe0>)
 8008524:	2208      	movs	r2, #8
 8008526:	0018      	movs	r0, r3
 8008528:	f007 fa7c 	bl	800fa24 <HAL_TIM_PWM_ConfigChannel>
 800852c:	1e03      	subs	r3, r0, #0
 800852e:	d001      	beq.n	8008534 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8008530:	f7fd fb0e 	bl	8005b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008534:	0039      	movs	r1, r7
 8008536:	4b08      	ldr	r3, [pc, #32]	@ (8008558 <MX_TIM2_Init+0xe0>)
 8008538:	220c      	movs	r2, #12
 800853a:	0018      	movs	r0, r3
 800853c:	f007 fa72 	bl	800fa24 <HAL_TIM_PWM_ConfigChannel>
 8008540:	1e03      	subs	r3, r0, #0
 8008542:	d001      	beq.n	8008548 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8008544:	f7fd fb04 	bl	8005b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8008548:	4b03      	ldr	r3, [pc, #12]	@ (8008558 <MX_TIM2_Init+0xe0>)
 800854a:	0018      	movs	r0, r3
 800854c:	f000 f8aa 	bl	80086a4 <HAL_TIM_MspPostInit>

}
 8008550:	46c0      	nop			@ (mov r8, r8)
 8008552:	46bd      	mov	sp, r7
 8008554:	b006      	add	sp, #24
 8008556:	bd80      	pop	{r7, pc}
 8008558:	20002624 	.word	0x20002624
 800855c:	0000ffff 	.word	0x0000ffff

08008560 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008566:	2310      	movs	r3, #16
 8008568:	18fb      	adds	r3, r7, r3
 800856a:	0018      	movs	r0, r3
 800856c:	2308      	movs	r3, #8
 800856e:	001a      	movs	r2, r3
 8008570:	2100      	movs	r1, #0
 8008572:	f00e fa77 	bl	8016a64 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008576:	003b      	movs	r3, r7
 8008578:	0018      	movs	r0, r3
 800857a:	2310      	movs	r3, #16
 800857c:	001a      	movs	r2, r3
 800857e:	2100      	movs	r1, #0
 8008580:	f00e fa70 	bl	8016a64 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008584:	4b32      	ldr	r3, [pc, #200]	@ (8008650 <MX_TIM3_Init+0xf0>)
 8008586:	4a33      	ldr	r2, [pc, #204]	@ (8008654 <MX_TIM3_Init+0xf4>)
 8008588:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800858a:	4b31      	ldr	r3, [pc, #196]	@ (8008650 <MX_TIM3_Init+0xf0>)
 800858c:	2200      	movs	r2, #0
 800858e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008590:	4b2f      	ldr	r3, [pc, #188]	@ (8008650 <MX_TIM3_Init+0xf0>)
 8008592:	2200      	movs	r2, #0
 8008594:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8008596:	4b2e      	ldr	r3, [pc, #184]	@ (8008650 <MX_TIM3_Init+0xf0>)
 8008598:	4a2f      	ldr	r2, [pc, #188]	@ (8008658 <MX_TIM3_Init+0xf8>)
 800859a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800859c:	4b2c      	ldr	r3, [pc, #176]	@ (8008650 <MX_TIM3_Init+0xf0>)
 800859e:	2200      	movs	r2, #0
 80085a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085a2:	4b2b      	ldr	r3, [pc, #172]	@ (8008650 <MX_TIM3_Init+0xf0>)
 80085a4:	2200      	movs	r2, #0
 80085a6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80085a8:	4b29      	ldr	r3, [pc, #164]	@ (8008650 <MX_TIM3_Init+0xf0>)
 80085aa:	0018      	movs	r0, r3
 80085ac:	f007 f968 	bl	800f880 <HAL_TIM_PWM_Init>
 80085b0:	1e03      	subs	r3, r0, #0
 80085b2:	d001      	beq.n	80085b8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80085b4:	f7fd facc 	bl	8005b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80085b8:	2110      	movs	r1, #16
 80085ba:	187b      	adds	r3, r7, r1
 80085bc:	2200      	movs	r2, #0
 80085be:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80085c0:	187b      	adds	r3, r7, r1
 80085c2:	2200      	movs	r2, #0
 80085c4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80085c6:	187a      	adds	r2, r7, r1
 80085c8:	4b21      	ldr	r3, [pc, #132]	@ (8008650 <MX_TIM3_Init+0xf0>)
 80085ca:	0011      	movs	r1, r2
 80085cc:	0018      	movs	r0, r3
 80085ce:	f007 fc75 	bl	800febc <HAL_TIMEx_MasterConfigSynchronization>
 80085d2:	1e03      	subs	r3, r0, #0
 80085d4:	d001      	beq.n	80085da <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80085d6:	f7fd fabb 	bl	8005b50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80085da:	003b      	movs	r3, r7
 80085dc:	2260      	movs	r2, #96	@ 0x60
 80085de:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80085e0:	003b      	movs	r3, r7
 80085e2:	2200      	movs	r2, #0
 80085e4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80085e6:	003b      	movs	r3, r7
 80085e8:	2200      	movs	r2, #0
 80085ea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80085ec:	003b      	movs	r3, r7
 80085ee:	2200      	movs	r2, #0
 80085f0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80085f2:	0039      	movs	r1, r7
 80085f4:	4b16      	ldr	r3, [pc, #88]	@ (8008650 <MX_TIM3_Init+0xf0>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	0018      	movs	r0, r3
 80085fa:	f007 fa13 	bl	800fa24 <HAL_TIM_PWM_ConfigChannel>
 80085fe:	1e03      	subs	r3, r0, #0
 8008600:	d001      	beq.n	8008606 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8008602:	f7fd faa5 	bl	8005b50 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8008606:	4b12      	ldr	r3, [pc, #72]	@ (8008650 <MX_TIM3_Init+0xf0>)
 8008608:	2104      	movs	r1, #4
 800860a:	0018      	movs	r0, r3
 800860c:	f007 fcb4 	bl	800ff78 <HAL_TIMEx_RemapConfig>
 8008610:	1e03      	subs	r3, r0, #0
 8008612:	d001      	beq.n	8008618 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8008614:	f7fd fa9c 	bl	8005b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008618:	0039      	movs	r1, r7
 800861a:	4b0d      	ldr	r3, [pc, #52]	@ (8008650 <MX_TIM3_Init+0xf0>)
 800861c:	2204      	movs	r2, #4
 800861e:	0018      	movs	r0, r3
 8008620:	f007 fa00 	bl	800fa24 <HAL_TIM_PWM_ConfigChannel>
 8008624:	1e03      	subs	r3, r0, #0
 8008626:	d001      	beq.n	800862c <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8008628:	f7fd fa92 	bl	8005b50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800862c:	0039      	movs	r1, r7
 800862e:	4b08      	ldr	r3, [pc, #32]	@ (8008650 <MX_TIM3_Init+0xf0>)
 8008630:	2208      	movs	r2, #8
 8008632:	0018      	movs	r0, r3
 8008634:	f007 f9f6 	bl	800fa24 <HAL_TIM_PWM_ConfigChannel>
 8008638:	1e03      	subs	r3, r0, #0
 800863a:	d001      	beq.n	8008640 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800863c:	f7fd fa88 	bl	8005b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008640:	4b03      	ldr	r3, [pc, #12]	@ (8008650 <MX_TIM3_Init+0xf0>)
 8008642:	0018      	movs	r0, r3
 8008644:	f000 f82e 	bl	80086a4 <HAL_TIM_MspPostInit>

}
 8008648:	46c0      	nop			@ (mov r8, r8)
 800864a:	46bd      	mov	sp, r7
 800864c:	b006      	add	sp, #24
 800864e:	bd80      	pop	{r7, pc}
 8008650:	20002664 	.word	0x20002664
 8008654:	40000400 	.word	0x40000400
 8008658:	0000ffff 	.word	0x0000ffff

0800865c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	2380      	movs	r3, #128	@ 0x80
 800866a:	05db      	lsls	r3, r3, #23
 800866c:	429a      	cmp	r2, r3
 800866e:	d106      	bne.n	800867e <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008670:	4b0a      	ldr	r3, [pc, #40]	@ (800869c <HAL_TIM_PWM_MspInit+0x40>)
 8008672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008674:	4b09      	ldr	r3, [pc, #36]	@ (800869c <HAL_TIM_PWM_MspInit+0x40>)
 8008676:	2101      	movs	r1, #1
 8008678:	430a      	orrs	r2, r1
 800867a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800867c:	e00a      	b.n	8008694 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a07      	ldr	r2, [pc, #28]	@ (80086a0 <HAL_TIM_PWM_MspInit+0x44>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d105      	bne.n	8008694 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008688:	4b04      	ldr	r3, [pc, #16]	@ (800869c <HAL_TIM_PWM_MspInit+0x40>)
 800868a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800868c:	4b03      	ldr	r3, [pc, #12]	@ (800869c <HAL_TIM_PWM_MspInit+0x40>)
 800868e:	2102      	movs	r1, #2
 8008690:	430a      	orrs	r2, r1
 8008692:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008694:	46c0      	nop			@ (mov r8, r8)
 8008696:	46bd      	mov	sp, r7
 8008698:	b002      	add	sp, #8
 800869a:	bd80      	pop	{r7, pc}
 800869c:	40021000 	.word	0x40021000
 80086a0:	40000400 	.word	0x40000400

080086a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80086a4:	b590      	push	{r4, r7, lr}
 80086a6:	b08b      	sub	sp, #44	@ 0x2c
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086ac:	2414      	movs	r4, #20
 80086ae:	193b      	adds	r3, r7, r4
 80086b0:	0018      	movs	r0, r3
 80086b2:	2314      	movs	r3, #20
 80086b4:	001a      	movs	r2, r3
 80086b6:	2100      	movs	r1, #0
 80086b8:	f00e f9d4 	bl	8016a64 <memset>
  if(timHandle->Instance==TIM2)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	2380      	movs	r3, #128	@ 0x80
 80086c2:	05db      	lsls	r3, r3, #23
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d123      	bne.n	8008710 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086c8:	4b27      	ldr	r3, [pc, #156]	@ (8008768 <HAL_TIM_MspPostInit+0xc4>)
 80086ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086cc:	4b26      	ldr	r3, [pc, #152]	@ (8008768 <HAL_TIM_MspPostInit+0xc4>)
 80086ce:	2101      	movs	r1, #1
 80086d0:	430a      	orrs	r2, r1
 80086d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80086d4:	4b24      	ldr	r3, [pc, #144]	@ (8008768 <HAL_TIM_MspPostInit+0xc4>)
 80086d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d8:	2201      	movs	r2, #1
 80086da:	4013      	ands	r3, r2
 80086dc:	613b      	str	r3, [r7, #16]
 80086de:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 80086e0:	0021      	movs	r1, r4
 80086e2:	187b      	adds	r3, r7, r1
 80086e4:	220d      	movs	r2, #13
 80086e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086e8:	187b      	adds	r3, r7, r1
 80086ea:	2202      	movs	r2, #2
 80086ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ee:	187b      	adds	r3, r7, r1
 80086f0:	2200      	movs	r2, #0
 80086f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086f4:	187b      	adds	r3, r7, r1
 80086f6:	2200      	movs	r2, #0
 80086f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80086fa:	187b      	adds	r3, r7, r1
 80086fc:	2202      	movs	r2, #2
 80086fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008700:	187a      	adds	r2, r7, r1
 8008702:	23a0      	movs	r3, #160	@ 0xa0
 8008704:	05db      	lsls	r3, r3, #23
 8008706:	0011      	movs	r1, r2
 8008708:	0018      	movs	r0, r3
 800870a:	f001 fd37 	bl	800a17c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800870e:	e027      	b.n	8008760 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a15      	ldr	r2, [pc, #84]	@ (800876c <HAL_TIM_MspPostInit+0xc8>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d122      	bne.n	8008760 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800871a:	4b13      	ldr	r3, [pc, #76]	@ (8008768 <HAL_TIM_MspPostInit+0xc4>)
 800871c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800871e:	4b12      	ldr	r3, [pc, #72]	@ (8008768 <HAL_TIM_MspPostInit+0xc4>)
 8008720:	2104      	movs	r1, #4
 8008722:	430a      	orrs	r2, r1
 8008724:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008726:	4b10      	ldr	r3, [pc, #64]	@ (8008768 <HAL_TIM_MspPostInit+0xc4>)
 8008728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872a:	2204      	movs	r2, #4
 800872c:	4013      	ands	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8008732:	2114      	movs	r1, #20
 8008734:	187b      	adds	r3, r7, r1
 8008736:	22e0      	movs	r2, #224	@ 0xe0
 8008738:	0052      	lsls	r2, r2, #1
 800873a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800873c:	187b      	adds	r3, r7, r1
 800873e:	2202      	movs	r2, #2
 8008740:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008742:	187b      	adds	r3, r7, r1
 8008744:	2200      	movs	r2, #0
 8008746:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008748:	187b      	adds	r3, r7, r1
 800874a:	2200      	movs	r2, #0
 800874c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800874e:	187b      	adds	r3, r7, r1
 8008750:	2202      	movs	r2, #2
 8008752:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008754:	187b      	adds	r3, r7, r1
 8008756:	4a06      	ldr	r2, [pc, #24]	@ (8008770 <HAL_TIM_MspPostInit+0xcc>)
 8008758:	0019      	movs	r1, r3
 800875a:	0010      	movs	r0, r2
 800875c:	f001 fd0e 	bl	800a17c <HAL_GPIO_Init>
}
 8008760:	46c0      	nop			@ (mov r8, r8)
 8008762:	46bd      	mov	sp, r7
 8008764:	b00b      	add	sp, #44	@ 0x2c
 8008766:	bd90      	pop	{r4, r7, pc}
 8008768:	40021000 	.word	0x40021000
 800876c:	40000400 	.word	0x40000400
 8008770:	50000800 	.word	0x50000800

08008774 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008778:	4b16      	ldr	r3, [pc, #88]	@ (80087d4 <MX_USART1_UART_Init+0x60>)
 800877a:	4a17      	ldr	r2, [pc, #92]	@ (80087d8 <MX_USART1_UART_Init+0x64>)
 800877c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800877e:	4b15      	ldr	r3, [pc, #84]	@ (80087d4 <MX_USART1_UART_Init+0x60>)
 8008780:	22e1      	movs	r2, #225	@ 0xe1
 8008782:	0252      	lsls	r2, r2, #9
 8008784:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008786:	4b13      	ldr	r3, [pc, #76]	@ (80087d4 <MX_USART1_UART_Init+0x60>)
 8008788:	2200      	movs	r2, #0
 800878a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800878c:	4b11      	ldr	r3, [pc, #68]	@ (80087d4 <MX_USART1_UART_Init+0x60>)
 800878e:	2200      	movs	r2, #0
 8008790:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008792:	4b10      	ldr	r3, [pc, #64]	@ (80087d4 <MX_USART1_UART_Init+0x60>)
 8008794:	2200      	movs	r2, #0
 8008796:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008798:	4b0e      	ldr	r3, [pc, #56]	@ (80087d4 <MX_USART1_UART_Init+0x60>)
 800879a:	220c      	movs	r2, #12
 800879c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800879e:	4b0d      	ldr	r3, [pc, #52]	@ (80087d4 <MX_USART1_UART_Init+0x60>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80087a4:	4b0b      	ldr	r3, [pc, #44]	@ (80087d4 <MX_USART1_UART_Init+0x60>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80087aa:	4b0a      	ldr	r3, [pc, #40]	@ (80087d4 <MX_USART1_UART_Init+0x60>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80087b0:	4b08      	ldr	r3, [pc, #32]	@ (80087d4 <MX_USART1_UART_Init+0x60>)
 80087b2:	2208      	movs	r2, #8
 80087b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80087b6:	4b07      	ldr	r3, [pc, #28]	@ (80087d4 <MX_USART1_UART_Init+0x60>)
 80087b8:	2280      	movs	r2, #128	@ 0x80
 80087ba:	0212      	lsls	r2, r2, #8
 80087bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80087be:	4b05      	ldr	r3, [pc, #20]	@ (80087d4 <MX_USART1_UART_Init+0x60>)
 80087c0:	0018      	movs	r0, r3
 80087c2:	f007 fbf7 	bl	800ffb4 <HAL_UART_Init>
 80087c6:	1e03      	subs	r3, r0, #0
 80087c8:	d001      	beq.n	80087ce <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80087ca:	f7fd f9c1 	bl	8005b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80087ce:	46c0      	nop			@ (mov r8, r8)
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	200026a4 	.word	0x200026a4
 80087d8:	40013800 	.word	0x40013800

080087dc <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80087e0:	4b14      	ldr	r3, [pc, #80]	@ (8008834 <MX_USART4_UART_Init+0x58>)
 80087e2:	4a15      	ldr	r2, [pc, #84]	@ (8008838 <MX_USART4_UART_Init+0x5c>)
 80087e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80087e6:	4b13      	ldr	r3, [pc, #76]	@ (8008834 <MX_USART4_UART_Init+0x58>)
 80087e8:	22e1      	movs	r2, #225	@ 0xe1
 80087ea:	0252      	lsls	r2, r2, #9
 80087ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80087ee:	4b11      	ldr	r3, [pc, #68]	@ (8008834 <MX_USART4_UART_Init+0x58>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80087f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008834 <MX_USART4_UART_Init+0x58>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80087fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008834 <MX_USART4_UART_Init+0x58>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8008800:	4b0c      	ldr	r3, [pc, #48]	@ (8008834 <MX_USART4_UART_Init+0x58>)
 8008802:	220c      	movs	r2, #12
 8008804:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008806:	4b0b      	ldr	r3, [pc, #44]	@ (8008834 <MX_USART4_UART_Init+0x58>)
 8008808:	2200      	movs	r2, #0
 800880a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800880c:	4b09      	ldr	r3, [pc, #36]	@ (8008834 <MX_USART4_UART_Init+0x58>)
 800880e:	2200      	movs	r2, #0
 8008810:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008812:	4b08      	ldr	r3, [pc, #32]	@ (8008834 <MX_USART4_UART_Init+0x58>)
 8008814:	2200      	movs	r2, #0
 8008816:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008818:	4b06      	ldr	r3, [pc, #24]	@ (8008834 <MX_USART4_UART_Init+0x58>)
 800881a:	2200      	movs	r2, #0
 800881c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800881e:	4b05      	ldr	r3, [pc, #20]	@ (8008834 <MX_USART4_UART_Init+0x58>)
 8008820:	0018      	movs	r0, r3
 8008822:	f007 fbc7 	bl	800ffb4 <HAL_UART_Init>
 8008826:	1e03      	subs	r3, r0, #0
 8008828:	d001      	beq.n	800882e <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800882a:	f7fd f991 	bl	8005b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800882e:	46c0      	nop			@ (mov r8, r8)
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	2000275c 	.word	0x2000275c
 8008838:	40004c00 	.word	0x40004c00

0800883c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800883c:	b590      	push	{r4, r7, lr}
 800883e:	b08b      	sub	sp, #44	@ 0x2c
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008844:	2414      	movs	r4, #20
 8008846:	193b      	adds	r3, r7, r4
 8008848:	0018      	movs	r0, r3
 800884a:	2314      	movs	r3, #20
 800884c:	001a      	movs	r2, r3
 800884e:	2100      	movs	r1, #0
 8008850:	f00e f908 	bl	8016a64 <memset>
  if(uartHandle->Instance==USART1)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a6f      	ldr	r2, [pc, #444]	@ (8008a18 <HAL_UART_MspInit+0x1dc>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d12b      	bne.n	80088b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800885e:	4b6f      	ldr	r3, [pc, #444]	@ (8008a1c <HAL_UART_MspInit+0x1e0>)
 8008860:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008862:	4b6e      	ldr	r3, [pc, #440]	@ (8008a1c <HAL_UART_MspInit+0x1e0>)
 8008864:	2180      	movs	r1, #128	@ 0x80
 8008866:	01c9      	lsls	r1, r1, #7
 8008868:	430a      	orrs	r2, r1
 800886a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800886c:	4b6b      	ldr	r3, [pc, #428]	@ (8008a1c <HAL_UART_MspInit+0x1e0>)
 800886e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008870:	4b6a      	ldr	r3, [pc, #424]	@ (8008a1c <HAL_UART_MspInit+0x1e0>)
 8008872:	2101      	movs	r1, #1
 8008874:	430a      	orrs	r2, r1
 8008876:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008878:	4b68      	ldr	r3, [pc, #416]	@ (8008a1c <HAL_UART_MspInit+0x1e0>)
 800887a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887c:	2201      	movs	r2, #1
 800887e:	4013      	ands	r3, r2
 8008880:	613b      	str	r3, [r7, #16]
 8008882:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008884:	193b      	adds	r3, r7, r4
 8008886:	22c0      	movs	r2, #192	@ 0xc0
 8008888:	00d2      	lsls	r2, r2, #3
 800888a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800888c:	0021      	movs	r1, r4
 800888e:	187b      	adds	r3, r7, r1
 8008890:	2202      	movs	r2, #2
 8008892:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008894:	187b      	adds	r3, r7, r1
 8008896:	2200      	movs	r2, #0
 8008898:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800889a:	187b      	adds	r3, r7, r1
 800889c:	2203      	movs	r2, #3
 800889e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80088a0:	187b      	adds	r3, r7, r1
 80088a2:	2204      	movs	r2, #4
 80088a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088a6:	187a      	adds	r2, r7, r1
 80088a8:	23a0      	movs	r3, #160	@ 0xa0
 80088aa:	05db      	lsls	r3, r3, #23
 80088ac:	0011      	movs	r1, r2
 80088ae:	0018      	movs	r0, r3
 80088b0:	f001 fc64 	bl	800a17c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 80088b4:	e0ac      	b.n	8008a10 <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==USART4)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a59      	ldr	r2, [pc, #356]	@ (8008a20 <HAL_UART_MspInit+0x1e4>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d000      	beq.n	80088c2 <HAL_UART_MspInit+0x86>
 80088c0:	e0a6      	b.n	8008a10 <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART4_CLK_ENABLE();
 80088c2:	4b56      	ldr	r3, [pc, #344]	@ (8008a1c <HAL_UART_MspInit+0x1e0>)
 80088c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088c6:	4b55      	ldr	r3, [pc, #340]	@ (8008a1c <HAL_UART_MspInit+0x1e0>)
 80088c8:	2180      	movs	r1, #128	@ 0x80
 80088ca:	0309      	lsls	r1, r1, #12
 80088cc:	430a      	orrs	r2, r1
 80088ce:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088d0:	4b52      	ldr	r3, [pc, #328]	@ (8008a1c <HAL_UART_MspInit+0x1e0>)
 80088d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088d4:	4b51      	ldr	r3, [pc, #324]	@ (8008a1c <HAL_UART_MspInit+0x1e0>)
 80088d6:	2101      	movs	r1, #1
 80088d8:	430a      	orrs	r2, r1
 80088da:	62da      	str	r2, [r3, #44]	@ 0x2c
 80088dc:	4b4f      	ldr	r3, [pc, #316]	@ (8008a1c <HAL_UART_MspInit+0x1e0>)
 80088de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e0:	2201      	movs	r2, #1
 80088e2:	4013      	ands	r3, r2
 80088e4:	60fb      	str	r3, [r7, #12]
 80088e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80088e8:	4b4c      	ldr	r3, [pc, #304]	@ (8008a1c <HAL_UART_MspInit+0x1e0>)
 80088ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ec:	4b4b      	ldr	r3, [pc, #300]	@ (8008a1c <HAL_UART_MspInit+0x1e0>)
 80088ee:	2104      	movs	r1, #4
 80088f0:	430a      	orrs	r2, r1
 80088f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80088f4:	4b49      	ldr	r3, [pc, #292]	@ (8008a1c <HAL_UART_MspInit+0x1e0>)
 80088f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f8:	2204      	movs	r2, #4
 80088fa:	4013      	ands	r3, r2
 80088fc:	60bb      	str	r3, [r7, #8]
 80088fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008900:	2414      	movs	r4, #20
 8008902:	193b      	adds	r3, r7, r4
 8008904:	2202      	movs	r2, #2
 8008906:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008908:	193b      	adds	r3, r7, r4
 800890a:	2202      	movs	r2, #2
 800890c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800890e:	193b      	adds	r3, r7, r4
 8008910:	2200      	movs	r2, #0
 8008912:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008914:	193b      	adds	r3, r7, r4
 8008916:	2203      	movs	r2, #3
 8008918:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800891a:	193b      	adds	r3, r7, r4
 800891c:	2206      	movs	r2, #6
 800891e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008920:	193a      	adds	r2, r7, r4
 8008922:	23a0      	movs	r3, #160	@ 0xa0
 8008924:	05db      	lsls	r3, r3, #23
 8008926:	0011      	movs	r1, r2
 8008928:	0018      	movs	r0, r3
 800892a:	f001 fc27 	bl	800a17c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800892e:	0021      	movs	r1, r4
 8008930:	187b      	adds	r3, r7, r1
 8008932:	2280      	movs	r2, #128	@ 0x80
 8008934:	00d2      	lsls	r2, r2, #3
 8008936:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008938:	187b      	adds	r3, r7, r1
 800893a:	2202      	movs	r2, #2
 800893c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800893e:	187b      	adds	r3, r7, r1
 8008940:	2200      	movs	r2, #0
 8008942:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008944:	187b      	adds	r3, r7, r1
 8008946:	2203      	movs	r2, #3
 8008948:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800894a:	187b      	adds	r3, r7, r1
 800894c:	2206      	movs	r2, #6
 800894e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008950:	187b      	adds	r3, r7, r1
 8008952:	4a34      	ldr	r2, [pc, #208]	@ (8008a24 <HAL_UART_MspInit+0x1e8>)
 8008954:	0019      	movs	r1, r3
 8008956:	0010      	movs	r0, r2
 8008958:	f001 fc10 	bl	800a17c <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800895c:	4b32      	ldr	r3, [pc, #200]	@ (8008a28 <HAL_UART_MspInit+0x1ec>)
 800895e:	4a33      	ldr	r2, [pc, #204]	@ (8008a2c <HAL_UART_MspInit+0x1f0>)
 8008960:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8008962:	4b31      	ldr	r3, [pc, #196]	@ (8008a28 <HAL_UART_MspInit+0x1ec>)
 8008964:	220c      	movs	r2, #12
 8008966:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008968:	4b2f      	ldr	r3, [pc, #188]	@ (8008a28 <HAL_UART_MspInit+0x1ec>)
 800896a:	2200      	movs	r2, #0
 800896c:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800896e:	4b2e      	ldr	r3, [pc, #184]	@ (8008a28 <HAL_UART_MspInit+0x1ec>)
 8008970:	2200      	movs	r2, #0
 8008972:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008974:	4b2c      	ldr	r3, [pc, #176]	@ (8008a28 <HAL_UART_MspInit+0x1ec>)
 8008976:	2280      	movs	r2, #128	@ 0x80
 8008978:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800897a:	4b2b      	ldr	r3, [pc, #172]	@ (8008a28 <HAL_UART_MspInit+0x1ec>)
 800897c:	2200      	movs	r2, #0
 800897e:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008980:	4b29      	ldr	r3, [pc, #164]	@ (8008a28 <HAL_UART_MspInit+0x1ec>)
 8008982:	2200      	movs	r2, #0
 8008984:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8008986:	4b28      	ldr	r3, [pc, #160]	@ (8008a28 <HAL_UART_MspInit+0x1ec>)
 8008988:	2220      	movs	r2, #32
 800898a:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800898c:	4b26      	ldr	r3, [pc, #152]	@ (8008a28 <HAL_UART_MspInit+0x1ec>)
 800898e:	2200      	movs	r2, #0
 8008990:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8008992:	4b25      	ldr	r3, [pc, #148]	@ (8008a28 <HAL_UART_MspInit+0x1ec>)
 8008994:	0018      	movs	r0, r3
 8008996:	f001 f945 	bl	8009c24 <HAL_DMA_Init>
 800899a:	1e03      	subs	r3, r0, #0
 800899c:	d001      	beq.n	80089a2 <HAL_UART_MspInit+0x166>
      Error_Handler();
 800899e:	f7fd f8d7 	bl	8005b50 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a20      	ldr	r2, [pc, #128]	@ (8008a28 <HAL_UART_MspInit+0x1ec>)
 80089a6:	675a      	str	r2, [r3, #116]	@ 0x74
 80089a8:	4b1f      	ldr	r3, [pc, #124]	@ (8008a28 <HAL_UART_MspInit+0x1ec>)
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 80089ae:	4b20      	ldr	r3, [pc, #128]	@ (8008a30 <HAL_UART_MspInit+0x1f4>)
 80089b0:	4a20      	ldr	r2, [pc, #128]	@ (8008a34 <HAL_UART_MspInit+0x1f8>)
 80089b2:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 80089b4:	4b1e      	ldr	r3, [pc, #120]	@ (8008a30 <HAL_UART_MspInit+0x1f4>)
 80089b6:	220c      	movs	r2, #12
 80089b8:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80089ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008a30 <HAL_UART_MspInit+0x1f4>)
 80089bc:	2210      	movs	r2, #16
 80089be:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80089c0:	4b1b      	ldr	r3, [pc, #108]	@ (8008a30 <HAL_UART_MspInit+0x1f4>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80089c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008a30 <HAL_UART_MspInit+0x1f4>)
 80089c8:	2280      	movs	r2, #128	@ 0x80
 80089ca:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80089cc:	4b18      	ldr	r3, [pc, #96]	@ (8008a30 <HAL_UART_MspInit+0x1f4>)
 80089ce:	2200      	movs	r2, #0
 80089d0:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80089d2:	4b17      	ldr	r3, [pc, #92]	@ (8008a30 <HAL_UART_MspInit+0x1f4>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 80089d8:	4b15      	ldr	r3, [pc, #84]	@ (8008a30 <HAL_UART_MspInit+0x1f4>)
 80089da:	2200      	movs	r2, #0
 80089dc:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80089de:	4b14      	ldr	r3, [pc, #80]	@ (8008a30 <HAL_UART_MspInit+0x1f4>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 80089e4:	4b12      	ldr	r3, [pc, #72]	@ (8008a30 <HAL_UART_MspInit+0x1f4>)
 80089e6:	0018      	movs	r0, r3
 80089e8:	f001 f91c 	bl	8009c24 <HAL_DMA_Init>
 80089ec:	1e03      	subs	r3, r0, #0
 80089ee:	d001      	beq.n	80089f4 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 80089f0:	f7fd f8ae 	bl	8005b50 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a0e      	ldr	r2, [pc, #56]	@ (8008a30 <HAL_UART_MspInit+0x1f4>)
 80089f8:	671a      	str	r2, [r3, #112]	@ 0x70
 80089fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008a30 <HAL_UART_MspInit+0x1f4>)
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8008a00:	2200      	movs	r2, #0
 8008a02:	2100      	movs	r1, #0
 8008a04:	200e      	movs	r0, #14
 8008a06:	f001 f8db 	bl	8009bc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8008a0a:	200e      	movs	r0, #14
 8008a0c:	f001 f8ed 	bl	8009bea <HAL_NVIC_EnableIRQ>
}
 8008a10:	46c0      	nop			@ (mov r8, r8)
 8008a12:	46bd      	mov	sp, r7
 8008a14:	b00b      	add	sp, #44	@ 0x2c
 8008a16:	bd90      	pop	{r4, r7, pc}
 8008a18:	40013800 	.word	0x40013800
 8008a1c:	40021000 	.word	0x40021000
 8008a20:	40004c00 	.word	0x40004c00
 8008a24:	50000800 	.word	0x50000800
 8008a28:	20002814 	.word	0x20002814
 8008a2c:	4002006c 	.word	0x4002006c
 8008a30:	2000285c 	.word	0x2000285c
 8008a34:	40020080 	.word	0x40020080

08008a38 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b086      	sub	sp, #24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8008a40:	f000 fc48 	bl	80092d4 <HAL_GetTick>
 8008a44:	0003      	movs	r3, r0
 8008a46:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8008a48:	4b1c      	ldr	r3, [pc, #112]	@ (8008abc <TimestampIsReached+0x84>)
 8008a4a:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d307      	bcc.n	8008a64 <TimestampIsReached+0x2c>
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d901      	bls.n	8008a64 <TimestampIsReached+0x2c>
 8008a60:	2201      	movs	r2, #1
 8008a62:	e000      	b.n	8008a66 <TimestampIsReached+0x2e>
 8008a64:	2200      	movs	r2, #0
 8008a66:	230f      	movs	r3, #15
 8008a68:	18fb      	adds	r3, r7, r3
 8008a6a:	701a      	strb	r2, [r3, #0]
 8008a6c:	781a      	ldrb	r2, [r3, #0]
 8008a6e:	2101      	movs	r1, #1
 8008a70:	400a      	ands	r2, r1
 8008a72:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8008a74:	697a      	ldr	r2, [r7, #20]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d207      	bcs.n	8008a8c <TimestampIsReached+0x54>
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	693a      	ldr	r2, [r7, #16]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d201      	bcs.n	8008a8c <TimestampIsReached+0x54>
 8008a88:	2201      	movs	r2, #1
 8008a8a:	e000      	b.n	8008a8e <TimestampIsReached+0x56>
 8008a8c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8008a8e:	200e      	movs	r0, #14
 8008a90:	183b      	adds	r3, r7, r0
 8008a92:	701a      	strb	r2, [r3, #0]
 8008a94:	781a      	ldrb	r2, [r3, #0]
 8008a96:	2101      	movs	r1, #1
 8008a98:	400a      	ands	r2, r1
 8008a9a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8008a9c:	230f      	movs	r3, #15
 8008a9e:	18fb      	adds	r3, r7, r3
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d103      	bne.n	8008aae <TimestampIsReached+0x76>
 8008aa6:	183b      	adds	r3, r7, r0
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e000      	b.n	8008ab4 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	b006      	add	sp, #24
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	7fffffff 	.word	0x7fffffff

08008ac0 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8008ac8:	f000 fc04 	bl	80092d4 <HAL_GetTick>
 8008acc:	0002      	movs	r2, r0
 8008ace:	4904      	ldr	r1, [pc, #16]	@ (8008ae0 <AddTimestamp+0x20>)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	0018      	movs	r0, r3
 8008ad4:	f00d ff22 	bl	801691c <siprintf>
}
 8008ad8:	46c0      	nop			@ (mov r8, r8)
 8008ada:	46bd      	mov	sp, r7
 8008adc:	b002      	add	sp, #8
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	0801a100 	.word	0x0801a100

08008ae4 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8008ae4:	b40c      	push	{r2, r3}
 8008ae6:	b5b0      	push	{r4, r5, r7, lr}
 8008ae8:	4c2b      	ldr	r4, [pc, #172]	@ (8008b98 <CreateLine+0xb4>)
 8008aea:	44a5      	add	sp, r4
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	0002      	movs	r2, r0
 8008af0:	6039      	str	r1, [r7, #0]
 8008af2:	4b2a      	ldr	r3, [pc, #168]	@ (8008b9c <CreateLine+0xb8>)
 8008af4:	2182      	movs	r1, #130	@ 0x82
 8008af6:	00c9      	lsls	r1, r1, #3
 8008af8:	185b      	adds	r3, r3, r1
 8008afa:	19db      	adds	r3, r3, r7
 8008afc:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8008afe:	4b28      	ldr	r3, [pc, #160]	@ (8008ba0 <CreateLine+0xbc>)
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	4a26      	ldr	r2, [pc, #152]	@ (8008b9c <CreateLine+0xb8>)
 8008b04:	1852      	adds	r2, r2, r1
 8008b06:	19d2      	adds	r2, r2, r7
 8008b08:	7812      	ldrb	r2, [r2, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d83b      	bhi.n	8008b86 <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	4924      	ldr	r1, [pc, #144]	@ (8008ba4 <CreateLine+0xc0>)
 8008b12:	240c      	movs	r4, #12
 8008b14:	193b      	adds	r3, r7, r4
 8008b16:	0018      	movs	r0, r3
 8008b18:	f00d ff00 	bl	801691c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8008b1c:	4b20      	ldr	r3, [pc, #128]	@ (8008ba0 <CreateLine+0xbc>)
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d909      	bls.n	8008b38 <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8008b24:	193b      	adds	r3, r7, r4
 8008b26:	0018      	movs	r0, r3
 8008b28:	f7f7 faee 	bl	8000108 <strlen>
 8008b2c:	0002      	movs	r2, r0
 8008b2e:	193b      	adds	r3, r7, r4
 8008b30:	189b      	adds	r3, r3, r2
 8008b32:	0018      	movs	r0, r3
 8008b34:	f7ff ffc4 	bl	8008ac0 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8008b38:	240c      	movs	r4, #12
 8008b3a:	193b      	adds	r3, r7, r4
 8008b3c:	0018      	movs	r0, r3
 8008b3e:	f7f7 fae3 	bl	8000108 <strlen>
 8008b42:	0003      	movs	r3, r0
 8008b44:	4918      	ldr	r1, [pc, #96]	@ (8008ba8 <CreateLine+0xc4>)
 8008b46:	187a      	adds	r2, r7, r1
 8008b48:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8008b4a:	4b18      	ldr	r3, [pc, #96]	@ (8008bac <CreateLine+0xc8>)
 8008b4c:	2508      	movs	r5, #8
 8008b4e:	195b      	adds	r3, r3, r5
 8008b50:	19db      	adds	r3, r3, r7
 8008b52:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8008b54:	193a      	adds	r2, r7, r4
 8008b56:	187b      	adds	r3, r7, r1
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	18d0      	adds	r0, r2, r3
 8008b5c:	187b      	adds	r3, r7, r1
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2280      	movs	r2, #128	@ 0x80
 8008b62:	00d2      	lsls	r2, r2, #3
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	0019      	movs	r1, r3
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2283      	movs	r2, #131	@ 0x83
 8008b6c:	00d2      	lsls	r2, r2, #3
 8008b6e:	1952      	adds	r2, r2, r5
 8008b70:	19d2      	adds	r2, r2, r7
 8008b72:	6812      	ldr	r2, [r2, #0]
 8008b74:	f00d ff6a 	bl	8016a4c <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8008b78:	193a      	adds	r2, r7, r4
 8008b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008bb0 <CreateLine+0xcc>)
 8008b7c:	0011      	movs	r1, r2
 8008b7e:	0018      	movs	r0, r3
 8008b80:	f00d febc 	bl	80168fc <iprintf>
 8008b84:	e000      	b.n	8008b88 <CreateLine+0xa4>
    return;
 8008b86:	46c0      	nop			@ (mov r8, r8)
}
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	2382      	movs	r3, #130	@ 0x82
 8008b8c:	00db      	lsls	r3, r3, #3
 8008b8e:	449d      	add	sp, r3
 8008b90:	bcb0      	pop	{r4, r5, r7}
 8008b92:	bc08      	pop	{r3}
 8008b94:	b002      	add	sp, #8
 8008b96:	4718      	bx	r3
 8008b98:	fffffbf0 	.word	0xfffffbf0
 8008b9c:	fffffbf7 	.word	0xfffffbf7
 8008ba0:	20000140 	.word	0x20000140
 8008ba4:	0801a10c 	.word	0x0801a10c
 8008ba8:	0000040c 	.word	0x0000040c
 8008bac:	0000041c 	.word	0x0000041c
 8008bb0:	0801a110 	.word	0x0801a110

08008bb4 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	68b9      	ldr	r1, [r7, #8]
 8008bc6:	4804      	ldr	r0, [pc, #16]	@ (8008bd8 <_write+0x24>)
 8008bc8:	2364      	movs	r3, #100	@ 0x64
 8008bca:	f007 fa59 	bl	8010080 <HAL_UART_Transmit>
  return count;
 8008bce:	687b      	ldr	r3, [r7, #4]
}
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	b004      	add	sp, #16
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	200026a4 	.word	0x200026a4

08008bdc <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b082      	sub	sp, #8
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	0002      	movs	r2, r0
 8008be4:	1dfb      	adds	r3, r7, #7
 8008be6:	701a      	strb	r2, [r3, #0]
 8008be8:	4b03      	ldr	r3, [pc, #12]	@ (8008bf8 <SetVerboseLevel+0x1c>)
 8008bea:	1dfa      	adds	r2, r7, #7
 8008bec:	7812      	ldrb	r2, [r2, #0]
 8008bee:	701a      	strb	r2, [r3, #0]
 8008bf0:	46c0      	nop			@ (mov r8, r8)
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	b002      	add	sp, #8
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	20000140 	.word	0x20000140

08008bfc <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008c00:	f000 fb68 	bl	80092d4 <HAL_GetTick>
 8008c04:	0003      	movs	r3, r0
}
 8008c06:	0018      	movs	r0, r3
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8008c12:	4a0f      	ldr	r2, [pc, #60]	@ (8008c50 <BinaryReleaseInfo+0x44>)
 8008c14:	4b0f      	ldr	r3, [pc, #60]	@ (8008c54 <BinaryReleaseInfo+0x48>)
 8008c16:	0019      	movs	r1, r3
 8008c18:	2002      	movs	r0, #2
 8008c1a:	f7ff ff63 	bl	8008ae4 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8008c1e:	480e      	ldr	r0, [pc, #56]	@ (8008c58 <BinaryReleaseInfo+0x4c>)
 8008c20:	4a0e      	ldr	r2, [pc, #56]	@ (8008c5c <BinaryReleaseInfo+0x50>)
 8008c22:	490c      	ldr	r1, [pc, #48]	@ (8008c54 <BinaryReleaseInfo+0x48>)
 8008c24:	4b0e      	ldr	r3, [pc, #56]	@ (8008c60 <BinaryReleaseInfo+0x54>)
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	0003      	movs	r3, r0
 8008c2a:	2002      	movs	r0, #2
 8008c2c:	f7ff ff5a 	bl	8008ae4 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8008c30:	4a0c      	ldr	r2, [pc, #48]	@ (8008c64 <BinaryReleaseInfo+0x58>)
 8008c32:	4b08      	ldr	r3, [pc, #32]	@ (8008c54 <BinaryReleaseInfo+0x48>)
 8008c34:	0019      	movs	r1, r3
 8008c36:	2002      	movs	r0, #2
 8008c38:	f7ff ff54 	bl	8008ae4 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8008c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c68 <BinaryReleaseInfo+0x5c>)
 8008c3e:	4a0b      	ldr	r2, [pc, #44]	@ (8008c6c <BinaryReleaseInfo+0x60>)
 8008c40:	4904      	ldr	r1, [pc, #16]	@ (8008c54 <BinaryReleaseInfo+0x48>)
 8008c42:	2002      	movs	r0, #2
 8008c44:	f7ff ff4e 	bl	8008ae4 <CreateLine>
}
 8008c48:	46c0      	nop			@ (mov r8, r8)
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	46c0      	nop			@ (mov r8, r8)
 8008c50:	0801a118 	.word	0x0801a118
 8008c54:	0801a144 	.word	0x0801a144
 8008c58:	0801a148 	.word	0x0801a148
 8008c5c:	0801a154 	.word	0x0801a154
 8008c60:	0801a168 	.word	0x0801a168
 8008c64:	0801a174 	.word	0x0801a174
 8008c68:	0801a180 	.word	0x0801a180
 8008c6c:	0801a188 	.word	0x0801a188

08008c70 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008c70:	b590      	push	{r4, r7, lr}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6039      	str	r1, [r7, #0]
 8008c78:	0011      	movs	r1, r2
 8008c7a:	1dfb      	adds	r3, r7, #7
 8008c7c:	1c02      	adds	r2, r0, #0
 8008c7e:	701a      	strb	r2, [r3, #0]
 8008c80:	1dbb      	adds	r3, r7, #6
 8008c82:	1c0a      	adds	r2, r1, #0
 8008c84:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8008c86:	4b08      	ldr	r3, [pc, #32]	@ (8008ca8 <ReadRegister+0x38>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d008      	beq.n	8008ca0 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 8008c8e:	4b06      	ldr	r3, [pc, #24]	@ (8008ca8 <ReadRegister+0x38>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	1dba      	adds	r2, r7, #6
 8008c94:	7814      	ldrb	r4, [r2, #0]
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	1dfa      	adds	r2, r7, #7
 8008c9a:	7810      	ldrb	r0, [r2, #0]
 8008c9c:	0022      	movs	r2, r4
 8008c9e:	4798      	blx	r3
	}
}
 8008ca0:	46c0      	nop			@ (mov r8, r8)
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	b003      	add	sp, #12
 8008ca6:	bd90      	pop	{r4, r7, pc}
 8008ca8:	200028a4 	.word	0x200028a4

08008cac <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008cac:	b590      	push	{r4, r7, lr}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6039      	str	r1, [r7, #0]
 8008cb4:	0011      	movs	r1, r2
 8008cb6:	1dfb      	adds	r3, r7, #7
 8008cb8:	1c02      	adds	r2, r0, #0
 8008cba:	701a      	strb	r2, [r3, #0]
 8008cbc:	1dbb      	adds	r3, r7, #6
 8008cbe:	1c0a      	adds	r2, r1, #0
 8008cc0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8008cc2:	4b08      	ldr	r3, [pc, #32]	@ (8008ce4 <WriteRegister+0x38>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d008      	beq.n	8008cdc <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8008cca:	4b06      	ldr	r3, [pc, #24]	@ (8008ce4 <WriteRegister+0x38>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	1dba      	adds	r2, r7, #6
 8008cd0:	7814      	ldrb	r4, [r2, #0]
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	1dfa      	adds	r2, r7, #7
 8008cd6:	7810      	ldrb	r0, [r2, #0]
 8008cd8:	0022      	movs	r2, r4
 8008cda:	4798      	blx	r3
  }
}
 8008cdc:	46c0      	nop			@ (mov r8, r8)
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	b003      	add	sp, #12
 8008ce2:	bd90      	pop	{r4, r7, pc}
 8008ce4:	200028a8 	.word	0x200028a8

08008ce8 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	000a      	movs	r2, r1
 8008cf2:	1cfb      	adds	r3, r7, #3
 8008cf4:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8008cf6:	230f      	movs	r3, #15
 8008cf8:	18fb      	adds	r3, r7, r3
 8008cfa:	22ff      	movs	r2, #255	@ 0xff
 8008cfc:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008cfe:	230e      	movs	r3, #14
 8008d00:	18fb      	adds	r3, r7, r3
 8008d02:	2200      	movs	r2, #0
 8008d04:	701a      	strb	r2, [r3, #0]
 8008d06:	e037      	b.n	8008d78 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008d08:	230e      	movs	r3, #14
 8008d0a:	18fb      	adds	r3, r7, r3
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	18d3      	adds	r3, r2, r3
 8008d12:	7819      	ldrb	r1, [r3, #0]
 8008d14:	220f      	movs	r2, #15
 8008d16:	18bb      	adds	r3, r7, r2
 8008d18:	18ba      	adds	r2, r7, r2
 8008d1a:	7812      	ldrb	r2, [r2, #0]
 8008d1c:	404a      	eors	r2, r1
 8008d1e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008d20:	230d      	movs	r3, #13
 8008d22:	18fb      	adds	r3, r7, r3
 8008d24:	2200      	movs	r2, #0
 8008d26:	701a      	strb	r2, [r3, #0]
 8008d28:	e01b      	b.n	8008d62 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8008d2a:	210f      	movs	r1, #15
 8008d2c:	187b      	adds	r3, r7, r1
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	b25b      	sxtb	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	da09      	bge.n	8008d4a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8008d36:	187b      	adds	r3, r7, r1
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	005b      	lsls	r3, r3, #1
 8008d3c:	b25b      	sxtb	r3, r3
 8008d3e:	2231      	movs	r2, #49	@ 0x31
 8008d40:	4053      	eors	r3, r2
 8008d42:	b25a      	sxtb	r2, r3
 8008d44:	187b      	adds	r3, r7, r1
 8008d46:	701a      	strb	r2, [r3, #0]
 8008d48:	e005      	b.n	8008d56 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8008d4a:	230f      	movs	r3, #15
 8008d4c:	18fa      	adds	r2, r7, r3
 8008d4e:	18fb      	adds	r3, r7, r3
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	18db      	adds	r3, r3, r3
 8008d54:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008d56:	210d      	movs	r1, #13
 8008d58:	187b      	adds	r3, r7, r1
 8008d5a:	781a      	ldrb	r2, [r3, #0]
 8008d5c:	187b      	adds	r3, r7, r1
 8008d5e:	3201      	adds	r2, #1
 8008d60:	701a      	strb	r2, [r3, #0]
 8008d62:	230d      	movs	r3, #13
 8008d64:	18fb      	adds	r3, r7, r3
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	2b07      	cmp	r3, #7
 8008d6a:	d9de      	bls.n	8008d2a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008d6c:	210e      	movs	r1, #14
 8008d6e:	187b      	adds	r3, r7, r1
 8008d70:	781a      	ldrb	r2, [r3, #0]
 8008d72:	187b      	adds	r3, r7, r1
 8008d74:	3201      	adds	r2, #1
 8008d76:	701a      	strb	r2, [r3, #0]
 8008d78:	230e      	movs	r3, #14
 8008d7a:	18fa      	adds	r2, r7, r3
 8008d7c:	1cfb      	adds	r3, r7, #3
 8008d7e:	7812      	ldrb	r2, [r2, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d3c0      	bcc.n	8008d08 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8008d86:	230f      	movs	r3, #15
 8008d88:	18fb      	adds	r3, r7, r3
 8008d8a:	781b      	ldrb	r3, [r3, #0]
}
 8008d8c:	0018      	movs	r0, r3
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	b004      	add	sp, #16
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8008d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8008dc8 <HIDS_Init+0x34>)
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8008da4:	4b09      	ldr	r3, [pc, #36]	@ (8008dcc <HIDS_Init+0x38>)
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8008daa:	4b09      	ldr	r3, [pc, #36]	@ (8008dd0 <HIDS_Init+0x3c>)
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	0018      	movs	r0, r3
 8008db0:	f000 f8d0 	bl	8008f54 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8008db4:	4b07      	ldr	r3, [pc, #28]	@ (8008dd4 <HIDS_Init+0x40>)
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	0018      	movs	r0, r3
 8008dba:	f000 f82b 	bl	8008e14 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8008dbe:	46c0      	nop			@ (mov r8, r8)
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	b002      	add	sp, #8
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	46c0      	nop			@ (mov r8, r8)
 8008dc8:	200028a4 	.word	0x200028a4
 8008dcc:	200028a8 	.word	0x200028a8
 8008dd0:	20000142 	.word	0x20000142
 8008dd4:	20000141 	.word	0x20000141

08008dd8 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8008ddc:	f7ff ff0e 	bl	8008bfc <GetCurrentHalTicks>
 8008de0:	0002      	movs	r2, r0
 8008de2:	4b08      	ldr	r3, [pc, #32]	@ (8008e04 <HIDS_StartMeasurement+0x2c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	18d2      	adds	r2, r2, r3
 8008de8:	4b07      	ldr	r3, [pc, #28]	@ (8008e08 <HIDS_StartMeasurement+0x30>)
 8008dea:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8008dec:	4b07      	ldr	r3, [pc, #28]	@ (8008e0c <HIDS_StartMeasurement+0x34>)
 8008dee:	2201      	movs	r2, #1
 8008df0:	0019      	movs	r1, r3
 8008df2:	2044      	movs	r0, #68	@ 0x44
 8008df4:	f7ff ff5a 	bl	8008cac <WriteRegister>
  MeasurementDone = false;
 8008df8:	4b05      	ldr	r3, [pc, #20]	@ (8008e10 <HIDS_StartMeasurement+0x38>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	701a      	strb	r2, [r3, #0]
}
 8008dfe:	46c0      	nop			@ (mov r8, r8)
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	20000148 	.word	0x20000148
 8008e08:	20000144 	.word	0x20000144
 8008e0c:	20000142 	.word	0x20000142
 8008e10:	200028ba 	.word	0x200028ba

08008e14 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	0002      	movs	r2, r0
 8008e1c:	1dfb      	adds	r3, r7, #7
 8008e1e:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8008e20:	4b03      	ldr	r3, [pc, #12]	@ (8008e30 <HIDS_SetHeaterMode+0x1c>)
 8008e22:	1dfa      	adds	r2, r7, #7
 8008e24:	7812      	ldrb	r2, [r2, #0]
 8008e26:	701a      	strb	r2, [r3, #0]
}
 8008e28:	46c0      	nop			@ (mov r8, r8)
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	b002      	add	sp, #8
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	20000141 	.word	0x20000141

08008e34 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8008e34:	b590      	push	{r4, r7, lr}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	781a      	ldrb	r2, [r3, #0]
 8008e40:	210c      	movs	r1, #12
 8008e42:	187b      	adds	r3, r7, r1
 8008e44:	701a      	strb	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	785a      	ldrb	r2, [r3, #1]
 8008e4a:	187b      	adds	r3, r7, r1
 8008e4c:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8008e4e:	240f      	movs	r4, #15
 8008e50:	193b      	adds	r3, r7, r4
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	7892      	ldrb	r2, [r2, #2]
 8008e56:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8008e58:	187b      	adds	r3, r7, r1
 8008e5a:	2102      	movs	r1, #2
 8008e5c:	0018      	movs	r0, r3
 8008e5e:	f7ff ff43 	bl	8008ce8 <CalculateCRC>
 8008e62:	0003      	movs	r3, r0
 8008e64:	001a      	movs	r2, r3
 8008e66:	193b      	adds	r3, r7, r4
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d007      	beq.n	8008e7e <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8008e6e:	4a17      	ldr	r2, [pc, #92]	@ (8008ecc <CheckCRC+0x98>)
 8008e70:	4b17      	ldr	r3, [pc, #92]	@ (8008ed0 <CheckCRC+0x9c>)
 8008e72:	0019      	movs	r1, r3
 8008e74:	2001      	movs	r0, #1
 8008e76:	f7ff fe35 	bl	8008ae4 <CreateLine>
		return false;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	e021      	b.n	8008ec2 <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	78da      	ldrb	r2, [r3, #3]
 8008e82:	2108      	movs	r1, #8
 8008e84:	187b      	adds	r3, r7, r1
 8008e86:	701a      	strb	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	791a      	ldrb	r2, [r3, #4]
 8008e8c:	187b      	adds	r3, r7, r1
 8008e8e:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8008e90:	240e      	movs	r4, #14
 8008e92:	193b      	adds	r3, r7, r4
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	7952      	ldrb	r2, [r2, #5]
 8008e98:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8008e9a:	187b      	adds	r3, r7, r1
 8008e9c:	2102      	movs	r1, #2
 8008e9e:	0018      	movs	r0, r3
 8008ea0:	f7ff ff22 	bl	8008ce8 <CalculateCRC>
 8008ea4:	0003      	movs	r3, r0
 8008ea6:	001a      	movs	r2, r3
 8008ea8:	193b      	adds	r3, r7, r4
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d007      	beq.n	8008ec0 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8008eb0:	4a08      	ldr	r2, [pc, #32]	@ (8008ed4 <CheckCRC+0xa0>)
 8008eb2:	4b07      	ldr	r3, [pc, #28]	@ (8008ed0 <CheckCRC+0x9c>)
 8008eb4:	0019      	movs	r1, r3
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	f7ff fe14 	bl	8008ae4 <CreateLine>
		return false;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	e000      	b.n	8008ec2 <CheckCRC+0x8e>
	}
	return true;
 8008ec0:	2301      	movs	r3, #1
}
 8008ec2:	0018      	movs	r0, r3
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	b005      	add	sp, #20
 8008ec8:	bd90      	pop	{r4, r7, pc}
 8008eca:	46c0      	nop			@ (mov r8, r8)
 8008ecc:	0801a1c4 	.word	0x0801a1c4
 8008ed0:	0801a1ec 	.word	0x0801a1ec
 8008ed4:	0801a1f0 	.word	0x0801a1f0

08008ed8 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8008ede:	1dbb      	adds	r3, r7, #6
 8008ee0:	2289      	movs	r2, #137	@ 0x89
 8008ee2:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8008ee4:	1dbb      	adds	r3, r7, #6
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	0019      	movs	r1, r3
 8008eea:	2044      	movs	r0, #68	@ 0x44
 8008eec:	f7ff fede 	bl	8008cac <WriteRegister>
	HAL_Delay(30);
 8008ef0:	201e      	movs	r0, #30
 8008ef2:	f000 f9f9 	bl	80092e8 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8008ef6:	4b14      	ldr	r3, [pc, #80]	@ (8008f48 <HIDS_DeviceConnected+0x70>)
 8008ef8:	2206      	movs	r2, #6
 8008efa:	0019      	movs	r1, r3
 8008efc:	2044      	movs	r0, #68	@ 0x44
 8008efe:	f7ff feb7 	bl	8008c70 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8008f02:	1dfb      	adds	r3, r7, #7
 8008f04:	2200      	movs	r2, #0
 8008f06:	701a      	strb	r2, [r3, #0]
 8008f08:	e011      	b.n	8008f2e <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8008f0a:	1dfb      	adds	r3, r7, #7
 8008f0c:	7818      	ldrb	r0, [r3, #0]
 8008f0e:	1dfb      	adds	r3, r7, #7
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	4a0d      	ldr	r2, [pc, #52]	@ (8008f48 <HIDS_DeviceConnected+0x70>)
 8008f14:	5cd3      	ldrb	r3, [r2, r3]
 8008f16:	4a0d      	ldr	r2, [pc, #52]	@ (8008f4c <HIDS_DeviceConnected+0x74>)
 8008f18:	490d      	ldr	r1, [pc, #52]	@ (8008f50 <HIDS_DeviceConnected+0x78>)
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	0003      	movs	r3, r0
 8008f1e:	2002      	movs	r0, #2
 8008f20:	f7ff fde0 	bl	8008ae4 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8008f24:	1dfb      	adds	r3, r7, #7
 8008f26:	781a      	ldrb	r2, [r3, #0]
 8008f28:	1dfb      	adds	r3, r7, #7
 8008f2a:	3201      	adds	r2, #1
 8008f2c:	701a      	strb	r2, [r3, #0]
 8008f2e:	1dfb      	adds	r3, r7, #7
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b05      	cmp	r3, #5
 8008f34:	d9e9      	bls.n	8008f0a <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8008f36:	4b04      	ldr	r3, [pc, #16]	@ (8008f48 <HIDS_DeviceConnected+0x70>)
 8008f38:	0018      	movs	r0, r3
 8008f3a:	f7ff ff7b 	bl	8008e34 <CheckCRC>
 8008f3e:	0003      	movs	r3, r0
}
 8008f40:	0018      	movs	r0, r3
 8008f42:	46bd      	mov	sp, r7
 8008f44:	b002      	add	sp, #8
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	200028ac 	.word	0x200028ac
 8008f4c:	0801a21c 	.word	0x0801a21c
 8008f50:	0801a1c0 	.word	0x0801a1c0

08008f54 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	0002      	movs	r2, r0
 8008f5c:	1dfb      	adds	r3, r7, #7
 8008f5e:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8008f60:	4b03      	ldr	r3, [pc, #12]	@ (8008f70 <HIDS_SetMeasurementMode+0x1c>)
 8008f62:	1dfa      	adds	r2, r7, #7
 8008f64:	7812      	ldrb	r2, [r2, #0]
 8008f66:	701a      	strb	r2, [r3, #0]
}
 8008f68:	46c0      	nop			@ (mov r8, r8)
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	b002      	add	sp, #8
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	20000142 	.word	0x20000142

08008f74 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8008f78:	4b04      	ldr	r3, [pc, #16]	@ (8008f8c <HIDS_MeasurementReady+0x18>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	0018      	movs	r0, r3
 8008f7e:	f7ff fd5b 	bl	8008a38 <TimestampIsReached>
 8008f82:	0003      	movs	r3, r0
}
 8008f84:	0018      	movs	r0, r3
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	46c0      	nop			@ (mov r8, r8)
 8008f8c:	20000144 	.word	0x20000144

08008f90 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b08c      	sub	sp, #48	@ 0x30
 8008f94:	af02      	add	r7, sp, #8
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 8008f9a:	4b7a      	ldr	r3, [pc, #488]	@ (8009184 <HIDS_GetMeasurementValues+0x1f4>)
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <HIDS_GetMeasurementValues+0x16>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e0ea      	b.n	800917c <HIDS_GetMeasurementValues+0x1ec>
  if(!HIDS_MeasurementReady()) return false;
 8008fa6:	f7ff ffe5 	bl	8008f74 <HIDS_MeasurementReady>
 8008faa:	0003      	movs	r3, r0
 8008fac:	001a      	movs	r2, r3
 8008fae:	2301      	movs	r3, #1
 8008fb0:	4053      	eors	r3, r2
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d001      	beq.n	8008fbc <HIDS_GetMeasurementValues+0x2c>
 8008fb8:	2300      	movs	r3, #0
 8008fba:	e0df      	b.n	800917c <HIDS_GetMeasurementValues+0x1ec>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8008fbc:	4b72      	ldr	r3, [pc, #456]	@ (8009188 <HIDS_GetMeasurementValues+0x1f8>)
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	4b72      	ldr	r3, [pc, #456]	@ (800918c <HIDS_GetMeasurementValues+0x1fc>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	0019      	movs	r1, r3
 8008fc6:	0010      	movs	r0, r2
 8008fc8:	f7f7 f8ba 	bl	8000140 <__udivsi3>
 8008fcc:	0003      	movs	r3, r0
 8008fce:	617b      	str	r3, [r7, #20]
  float currentTemperature;
  float currentHumidity;
  static float temperatures[HIDS_MAX_MEASUREMENTS];
  static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 8008fd0:	4b6f      	ldr	r3, [pc, #444]	@ (8009190 <HIDS_GetMeasurementValues+0x200>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	1c58      	adds	r0, r3, #1
 8008fd6:	4a6f      	ldr	r2, [pc, #444]	@ (8009194 <HIDS_GetMeasurementValues+0x204>)
 8008fd8:	496f      	ldr	r1, [pc, #444]	@ (8009198 <HIDS_GetMeasurementValues+0x208>)
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	9300      	str	r3, [sp, #0]
 8008fde:	0003      	movs	r3, r0
 8008fe0:	2003      	movs	r0, #3
 8008fe2:	f7ff fd7f 	bl	8008ae4 <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 8008fe6:	4b6d      	ldr	r3, [pc, #436]	@ (800919c <HIDS_GetMeasurementValues+0x20c>)
 8008fe8:	2206      	movs	r2, #6
 8008fea:	0019      	movs	r1, r3
 8008fec:	2044      	movs	r0, #68	@ 0x44
 8008fee:	f7ff fe3f 	bl	8008c70 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 8008ff2:	4b6a      	ldr	r3, [pc, #424]	@ (800919c <HIDS_GetMeasurementValues+0x20c>)
 8008ff4:	0018      	movs	r0, r3
 8008ff6:	f7ff ff1d 	bl	8008e34 <CheckCRC>
 8008ffa:	0003      	movs	r3, r0
 8008ffc:	001a      	movs	r2, r3
 8008ffe:	2301      	movs	r3, #1
 8009000:	4053      	eors	r3, r2
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b00      	cmp	r3, #0
 8009006:	d011      	beq.n	800902c <HIDS_GetMeasurementValues+0x9c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8009008:	2327      	movs	r3, #39	@ 0x27
 800900a:	18fb      	adds	r3, r7, r3
 800900c:	2200      	movs	r2, #0
 800900e:	701a      	strb	r2, [r3, #0]
 8009010:	e005      	b.n	800901e <HIDS_GetMeasurementValues+0x8e>
 8009012:	2127      	movs	r1, #39	@ 0x27
 8009014:	187b      	adds	r3, r7, r1
 8009016:	781a      	ldrb	r2, [r3, #0]
 8009018:	187b      	adds	r3, r7, r1
 800901a:	3201      	adds	r2, #1
 800901c:	701a      	strb	r2, [r3, #0]
 800901e:	2327      	movs	r3, #39	@ 0x27
 8009020:	18fb      	adds	r3, r7, r3
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	2b05      	cmp	r3, #5
 8009026:	d9f4      	bls.n	8009012 <HIDS_GetMeasurementValues+0x82>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 8009028:	2300      	movs	r3, #0
 800902a:	e0a7      	b.n	800917c <HIDS_GetMeasurementValues+0x1ec>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 800902c:	4b5b      	ldr	r3, [pc, #364]	@ (800919c <HIDS_GetMeasurementValues+0x20c>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	021b      	lsls	r3, r3, #8
 8009032:	22af      	movs	r2, #175	@ 0xaf
 8009034:	4353      	muls	r3, r2
 8009036:	4a59      	ldr	r2, [pc, #356]	@ (800919c <HIDS_GetMeasurementValues+0x20c>)
 8009038:	7852      	ldrb	r2, [r2, #1]
 800903a:	4313      	orrs	r3, r2
 800903c:	0018      	movs	r0, r3
 800903e:	f7fa f93d 	bl	80032bc <__aeabi_i2d>
 8009042:	2200      	movs	r2, #0
 8009044:	4b56      	ldr	r3, [pc, #344]	@ (80091a0 <HIDS_GetMeasurementValues+0x210>)
 8009046:	f7f8 fe33 	bl	8001cb0 <__aeabi_ddiv>
 800904a:	0002      	movs	r2, r0
 800904c:	000b      	movs	r3, r1
 800904e:	0010      	movs	r0, r2
 8009050:	0019      	movs	r1, r3
 8009052:	f7fa f9cd 	bl	80033f0 <__aeabi_d2f>
 8009056:	1c03      	adds	r3, r0, #0
 8009058:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800905a:	4952      	ldr	r1, [pc, #328]	@ (80091a4 <HIDS_GetMeasurementValues+0x214>)
 800905c:	6938      	ldr	r0, [r7, #16]
 800905e:	f7f8 f85b 	bl	8001118 <__aeabi_fsub>
 8009062:	1c03      	adds	r3, r0, #0
 8009064:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8009066:	4b4d      	ldr	r3, [pc, #308]	@ (800919c <HIDS_GetMeasurementValues+0x20c>)
 8009068:	78db      	ldrb	r3, [r3, #3]
 800906a:	021b      	lsls	r3, r3, #8
 800906c:	4a4b      	ldr	r2, [pc, #300]	@ (800919c <HIDS_GetMeasurementValues+0x20c>)
 800906e:	7912      	ldrb	r2, [r2, #4]
 8009070:	431a      	orrs	r2, r3
 8009072:	0013      	movs	r3, r2
 8009074:	015b      	lsls	r3, r3, #5
 8009076:	1a9b      	subs	r3, r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	189b      	adds	r3, r3, r2
 800907c:	0018      	movs	r0, r3
 800907e:	f7fa f91d 	bl	80032bc <__aeabi_i2d>
 8009082:	2200      	movs	r2, #0
 8009084:	4b46      	ldr	r3, [pc, #280]	@ (80091a0 <HIDS_GetMeasurementValues+0x210>)
 8009086:	f7f8 fe13 	bl	8001cb0 <__aeabi_ddiv>
 800908a:	0002      	movs	r2, r0
 800908c:	000b      	movs	r3, r1
 800908e:	0010      	movs	r0, r2
 8009090:	0019      	movs	r1, r3
 8009092:	f7fa f9ad 	bl	80033f0 <__aeabi_d2f>
 8009096:	1c03      	adds	r3, r0, #0
 8009098:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800909a:	4943      	ldr	r1, [pc, #268]	@ (80091a8 <HIDS_GetMeasurementValues+0x218>)
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f7f8 f83b 	bl	8001118 <__aeabi_fsub>
 80090a2:	1c03      	adds	r3, r0, #0
 80090a4:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 80090a6:	4b3a      	ldr	r3, [pc, #232]	@ (8009190 <HIDS_GetMeasurementValues+0x200>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d910      	bls.n	80090d2 <HIDS_GetMeasurementValues+0x142>
	  temperatures[measurements] = currentTemperature;
 80090b0:	4b37      	ldr	r3, [pc, #220]	@ (8009190 <HIDS_GetMeasurementValues+0x200>)
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	4b3d      	ldr	r3, [pc, #244]	@ (80091ac <HIDS_GetMeasurementValues+0x21c>)
 80090b6:	0092      	lsls	r2, r2, #2
 80090b8:	6939      	ldr	r1, [r7, #16]
 80090ba:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 80090bc:	4b34      	ldr	r3, [pc, #208]	@ (8009190 <HIDS_GetMeasurementValues+0x200>)
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	4b3b      	ldr	r3, [pc, #236]	@ (80091b0 <HIDS_GetMeasurementValues+0x220>)
 80090c2:	0092      	lsls	r2, r2, #2
 80090c4:	68f9      	ldr	r1, [r7, #12]
 80090c6:	50d1      	str	r1, [r2, r3]
	  measurements++;
 80090c8:	4b31      	ldr	r3, [pc, #196]	@ (8009190 <HIDS_GetMeasurementValues+0x200>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	1c5a      	adds	r2, r3, #1
 80090ce:	4b30      	ldr	r3, [pc, #192]	@ (8009190 <HIDS_GetMeasurementValues+0x200>)
 80090d0:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 80090d2:	4b2f      	ldr	r3, [pc, #188]	@ (8009190 <HIDS_GetMeasurementValues+0x200>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d84c      	bhi.n	8009176 <HIDS_GetMeasurementValues+0x1e6>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 80090dc:	2300      	movs	r3, #0
 80090de:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 80090e4:	2300      	movs	r3, #0
 80090e6:	61bb      	str	r3, [r7, #24]
 80090e8:	e016      	b.n	8009118 <HIDS_GetMeasurementValues+0x188>
        sumTemperature += temperatures[i];
 80090ea:	4b30      	ldr	r3, [pc, #192]	@ (80091ac <HIDS_GetMeasurementValues+0x21c>)
 80090ec:	69ba      	ldr	r2, [r7, #24]
 80090ee:	0092      	lsls	r2, r2, #2
 80090f0:	58d3      	ldr	r3, [r2, r3]
 80090f2:	1c19      	adds	r1, r3, #0
 80090f4:	6a38      	ldr	r0, [r7, #32]
 80090f6:	f7f7 fb61 	bl	80007bc <__aeabi_fadd>
 80090fa:	1c03      	adds	r3, r0, #0
 80090fc:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 80090fe:	4b2c      	ldr	r3, [pc, #176]	@ (80091b0 <HIDS_GetMeasurementValues+0x220>)
 8009100:	69ba      	ldr	r2, [r7, #24]
 8009102:	0092      	lsls	r2, r2, #2
 8009104:	58d3      	ldr	r3, [r2, r3]
 8009106:	1c19      	adds	r1, r3, #0
 8009108:	69f8      	ldr	r0, [r7, #28]
 800910a:	f7f7 fb57 	bl	80007bc <__aeabi_fadd>
 800910e:	1c03      	adds	r3, r0, #0
 8009110:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	3301      	adds	r3, #1
 8009116:	61bb      	str	r3, [r7, #24]
 8009118:	4b1d      	ldr	r3, [pc, #116]	@ (8009190 <HIDS_GetMeasurementValues+0x200>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	69ba      	ldr	r2, [r7, #24]
 800911e:	429a      	cmp	r2, r3
 8009120:	d3e3      	bcc.n	80090ea <HIDS_GetMeasurementValues+0x15a>
    }

    *temperature = sumTemperature / measurements;
 8009122:	4b1b      	ldr	r3, [pc, #108]	@ (8009190 <HIDS_GetMeasurementValues+0x200>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	0018      	movs	r0, r3
 8009128:	f7f8 fa1c 	bl	8001564 <__aeabi_ui2f>
 800912c:	1c03      	adds	r3, r0, #0
 800912e:	1c19      	adds	r1, r3, #0
 8009130:	6a38      	ldr	r0, [r7, #32]
 8009132:	f7f7 fccd 	bl	8000ad0 <__aeabi_fdiv>
 8009136:	1c03      	adds	r3, r0, #0
 8009138:	1c1a      	adds	r2, r3, #0
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 800913e:	4b14      	ldr	r3, [pc, #80]	@ (8009190 <HIDS_GetMeasurementValues+0x200>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	0018      	movs	r0, r3
 8009144:	f7f8 fa0e 	bl	8001564 <__aeabi_ui2f>
 8009148:	1c03      	adds	r3, r0, #0
 800914a:	1c19      	adds	r1, r3, #0
 800914c:	69f8      	ldr	r0, [r7, #28]
 800914e:	f7f7 fcbf 	bl	8000ad0 <__aeabi_fdiv>
 8009152:	1c03      	adds	r3, r0, #0
 8009154:	1c1a      	adds	r2, r3, #0
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	601a      	str	r2, [r3, #0]

    SGP_GetHT(temperature, humidity);
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	0011      	movs	r1, r2
 8009160:	0018      	movs	r0, r3
 8009162:	f7fe ffd5 	bl	8008110 <SGP_GetHT>

    measurements = 0;
 8009166:	4b0a      	ldr	r3, [pc, #40]	@ (8009190 <HIDS_GetMeasurementValues+0x200>)
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 800916c:	4b05      	ldr	r3, [pc, #20]	@ (8009184 <HIDS_GetMeasurementValues+0x1f4>)
 800916e:	2201      	movs	r2, #1
 8009170:	701a      	strb	r2, [r3, #0]
    //Debug("HIDS measurement is done.");
    return true;
 8009172:	2301      	movs	r3, #1
 8009174:	e002      	b.n	800917c <HIDS_GetMeasurementValues+0x1ec>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 8009176:	f7ff fe2f 	bl	8008dd8 <HIDS_StartMeasurement>
	return false;
 800917a:	2300      	movs	r3, #0
}
 800917c:	0018      	movs	r0, r3
 800917e:	46bd      	mov	sp, r7
 8009180:	b00a      	add	sp, #40	@ 0x28
 8009182:	bd80      	pop	{r7, pc}
 8009184:	200028ba 	.word	0x200028ba
 8009188:	2000014c 	.word	0x2000014c
 800918c:	20000148 	.word	0x20000148
 8009190:	200028bc 	.word	0x200028bc
 8009194:	0801a23c 	.word	0x0801a23c
 8009198:	0801a268 	.word	0x0801a268
 800919c:	200028b4 	.word	0x200028b4
 80091a0:	40efffe0 	.word	0x40efffe0
 80091a4:	42340000 	.word	0x42340000
 80091a8:	40c00000 	.word	0x40c00000
 80091ac:	200028c0 	.word	0x200028c0
 80091b0:	20002cc0 	.word	0x20002cc0

080091b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80091b4:	480d      	ldr	r0, [pc, #52]	@ (80091ec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80091b6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80091b8:	f7ff f958 	bl	800846c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80091bc:	480c      	ldr	r0, [pc, #48]	@ (80091f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80091be:	490d      	ldr	r1, [pc, #52]	@ (80091f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80091c0:	4a0d      	ldr	r2, [pc, #52]	@ (80091f8 <LoopForever+0xe>)
  movs r3, #0
 80091c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80091c4:	e002      	b.n	80091cc <LoopCopyDataInit>

080091c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80091c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80091c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80091ca:	3304      	adds	r3, #4

080091cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80091cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80091ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80091d0:	d3f9      	bcc.n	80091c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80091d2:	4a0a      	ldr	r2, [pc, #40]	@ (80091fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80091d4:	4c0a      	ldr	r4, [pc, #40]	@ (8009200 <LoopForever+0x16>)
  movs r3, #0
 80091d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80091d8:	e001      	b.n	80091de <LoopFillZerobss>

080091da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80091da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80091dc:	3204      	adds	r2, #4

080091de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80091de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80091e0:	d3fb      	bcc.n	80091da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80091e2:	f00d fcc9 	bl	8016b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80091e6:	f7fc fbf1 	bl	80059cc <main>

080091ea <LoopForever>:

LoopForever:
    b LoopForever
 80091ea:	e7fe      	b.n	80091ea <LoopForever>
   ldr   r0, =_estack
 80091ec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80091f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80091f4:	200004a8 	.word	0x200004a8
  ldr r2, =_sidata
 80091f8:	0801a908 	.word	0x0801a908
  ldr r2, =_sbss
 80091fc:	200004a8 	.word	0x200004a8
  ldr r4, =_ebss
 8009200:	200043ec 	.word	0x200043ec

08009204 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009204:	e7fe      	b.n	8009204 <ADC1_COMP_IRQHandler>
	...

08009208 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800920e:	1dfb      	adds	r3, r7, #7
 8009210:	2200      	movs	r2, #0
 8009212:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8009214:	4b0b      	ldr	r3, [pc, #44]	@ (8009244 <HAL_Init+0x3c>)
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	4b0a      	ldr	r3, [pc, #40]	@ (8009244 <HAL_Init+0x3c>)
 800921a:	2140      	movs	r1, #64	@ 0x40
 800921c:	430a      	orrs	r2, r1
 800921e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009220:	2003      	movs	r0, #3
 8009222:	f000 f811 	bl	8009248 <HAL_InitTick>
 8009226:	1e03      	subs	r3, r0, #0
 8009228:	d003      	beq.n	8009232 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800922a:	1dfb      	adds	r3, r7, #7
 800922c:	2201      	movs	r2, #1
 800922e:	701a      	strb	r2, [r3, #0]
 8009230:	e001      	b.n	8009236 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009232:	f7fe fff1 	bl	8008218 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009236:	1dfb      	adds	r3, r7, #7
 8009238:	781b      	ldrb	r3, [r3, #0]
}
 800923a:	0018      	movs	r0, r3
 800923c:	46bd      	mov	sp, r7
 800923e:	b002      	add	sp, #8
 8009240:	bd80      	pop	{r7, pc}
 8009242:	46c0      	nop			@ (mov r8, r8)
 8009244:	40022000 	.word	0x40022000

08009248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009248:	b590      	push	{r4, r7, lr}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009250:	4b14      	ldr	r3, [pc, #80]	@ (80092a4 <HAL_InitTick+0x5c>)
 8009252:	681c      	ldr	r4, [r3, #0]
 8009254:	4b14      	ldr	r3, [pc, #80]	@ (80092a8 <HAL_InitTick+0x60>)
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	0019      	movs	r1, r3
 800925a:	23fa      	movs	r3, #250	@ 0xfa
 800925c:	0098      	lsls	r0, r3, #2
 800925e:	f7f6 ff6f 	bl	8000140 <__udivsi3>
 8009262:	0003      	movs	r3, r0
 8009264:	0019      	movs	r1, r3
 8009266:	0020      	movs	r0, r4
 8009268:	f7f6 ff6a 	bl	8000140 <__udivsi3>
 800926c:	0003      	movs	r3, r0
 800926e:	0018      	movs	r0, r3
 8009270:	f000 fccb 	bl	8009c0a <HAL_SYSTICK_Config>
 8009274:	1e03      	subs	r3, r0, #0
 8009276:	d001      	beq.n	800927c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e00f      	b.n	800929c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b03      	cmp	r3, #3
 8009280:	d80b      	bhi.n	800929a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	2301      	movs	r3, #1
 8009286:	425b      	negs	r3, r3
 8009288:	2200      	movs	r2, #0
 800928a:	0018      	movs	r0, r3
 800928c:	f000 fc98 	bl	8009bc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009290:	4b06      	ldr	r3, [pc, #24]	@ (80092ac <HAL_InitTick+0x64>)
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	e000      	b.n	800929c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
}
 800929c:	0018      	movs	r0, r3
 800929e:	46bd      	mov	sp, r7
 80092a0:	b003      	add	sp, #12
 80092a2:	bd90      	pop	{r4, r7, pc}
 80092a4:	2000013c 	.word	0x2000013c
 80092a8:	20000154 	.word	0x20000154
 80092ac:	20000150 	.word	0x20000150

080092b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80092b4:	4b05      	ldr	r3, [pc, #20]	@ (80092cc <HAL_IncTick+0x1c>)
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	001a      	movs	r2, r3
 80092ba:	4b05      	ldr	r3, [pc, #20]	@ (80092d0 <HAL_IncTick+0x20>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	18d2      	adds	r2, r2, r3
 80092c0:	4b03      	ldr	r3, [pc, #12]	@ (80092d0 <HAL_IncTick+0x20>)
 80092c2:	601a      	str	r2, [r3, #0]
}
 80092c4:	46c0      	nop			@ (mov r8, r8)
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	46c0      	nop			@ (mov r8, r8)
 80092cc:	20000154 	.word	0x20000154
 80092d0:	200030c0 	.word	0x200030c0

080092d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	af00      	add	r7, sp, #0
  return uwTick;
 80092d8:	4b02      	ldr	r3, [pc, #8]	@ (80092e4 <HAL_GetTick+0x10>)
 80092da:	681b      	ldr	r3, [r3, #0]
}
 80092dc:	0018      	movs	r0, r3
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	46c0      	nop			@ (mov r8, r8)
 80092e4:	200030c0 	.word	0x200030c0

080092e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80092f0:	f7ff fff0 	bl	80092d4 <HAL_GetTick>
 80092f4:	0003      	movs	r3, r0
 80092f6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	3301      	adds	r3, #1
 8009300:	d005      	beq.n	800930e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009302:	4b0a      	ldr	r3, [pc, #40]	@ (800932c <HAL_Delay+0x44>)
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	001a      	movs	r2, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	189b      	adds	r3, r3, r2
 800930c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800930e:	46c0      	nop			@ (mov r8, r8)
 8009310:	f7ff ffe0 	bl	80092d4 <HAL_GetTick>
 8009314:	0002      	movs	r2, r0
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	429a      	cmp	r2, r3
 800931e:	d8f7      	bhi.n	8009310 <HAL_Delay+0x28>
  {
  }
}
 8009320:	46c0      	nop			@ (mov r8, r8)
 8009322:	46c0      	nop			@ (mov r8, r8)
 8009324:	46bd      	mov	sp, r7
 8009326:	b004      	add	sp, #16
 8009328:	bd80      	pop	{r7, pc}
 800932a:	46c0      	nop			@ (mov r8, r8)
 800932c:	20000154 	.word	0x20000154

08009330 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8009334:	4b02      	ldr	r3, [pc, #8]	@ (8009340 <HAL_GetUIDw0+0x10>)
 8009336:	681b      	ldr	r3, [r3, #0]
}
 8009338:	0018      	movs	r0, r3
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	46c0      	nop			@ (mov r8, r8)
 8009340:	1ff80050 	.word	0x1ff80050

08009344 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8009348:	4b02      	ldr	r3, [pc, #8]	@ (8009354 <HAL_GetUIDw1+0x10>)
 800934a:	681b      	ldr	r3, [r3, #0]
}
 800934c:	0018      	movs	r0, r3
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	46c0      	nop			@ (mov r8, r8)
 8009354:	1ff80054 	.word	0x1ff80054

08009358 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800935c:	4b02      	ldr	r3, [pc, #8]	@ (8009368 <HAL_GetUIDw2+0x10>)
 800935e:	681b      	ldr	r3, [r3, #0]
}
 8009360:	0018      	movs	r0, r3
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	46c0      	nop			@ (mov r8, r8)
 8009368:	1ff80064 	.word	0x1ff80064

0800936c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d101      	bne.n	800937e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e159      	b.n	8009632 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10a      	bne.n	800939c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2250      	movs	r2, #80	@ 0x50
 8009390:	2100      	movs	r1, #0
 8009392:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	0018      	movs	r0, r3
 8009398:	f7fb fe40 	bl	800501c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a0:	2210      	movs	r2, #16
 80093a2:	4013      	ands	r3, r2
 80093a4:	2b10      	cmp	r3, #16
 80093a6:	d005      	beq.n	80093b4 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	2204      	movs	r2, #4
 80093b0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80093b2:	d00b      	beq.n	80093cc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093b8:	2210      	movs	r2, #16
 80093ba:	431a      	orrs	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2250      	movs	r2, #80	@ 0x50
 80093c4:	2100      	movs	r1, #0
 80093c6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e132      	b.n	8009632 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093d0:	4a9a      	ldr	r2, [pc, #616]	@ (800963c <HAL_ADC_Init+0x2d0>)
 80093d2:	4013      	ands	r3, r2
 80093d4:	2202      	movs	r2, #2
 80093d6:	431a      	orrs	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	2203      	movs	r2, #3
 80093e4:	4013      	ands	r3, r2
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d108      	bne.n	80093fc <HAL_ADC_Init+0x90>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2201      	movs	r2, #1
 80093f2:	4013      	ands	r3, r2
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d101      	bne.n	80093fc <HAL_ADC_Init+0x90>
 80093f8:	2301      	movs	r3, #1
 80093fa:	e000      	b.n	80093fe <HAL_ADC_Init+0x92>
 80093fc:	2300      	movs	r3, #0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d149      	bne.n	8009496 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	685a      	ldr	r2, [r3, #4]
 8009406:	23c0      	movs	r3, #192	@ 0xc0
 8009408:	061b      	lsls	r3, r3, #24
 800940a:	429a      	cmp	r2, r3
 800940c:	d00b      	beq.n	8009426 <HAL_ADC_Init+0xba>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685a      	ldr	r2, [r3, #4]
 8009412:	2380      	movs	r3, #128	@ 0x80
 8009414:	05db      	lsls	r3, r3, #23
 8009416:	429a      	cmp	r2, r3
 8009418:	d005      	beq.n	8009426 <HAL_ADC_Init+0xba>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685a      	ldr	r2, [r3, #4]
 800941e:	2380      	movs	r3, #128	@ 0x80
 8009420:	061b      	lsls	r3, r3, #24
 8009422:	429a      	cmp	r2, r3
 8009424:	d111      	bne.n	800944a <HAL_ADC_Init+0xde>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	691a      	ldr	r2, [r3, #16]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	0092      	lsls	r2, r2, #2
 8009432:	0892      	lsrs	r2, r2, #2
 8009434:	611a      	str	r2, [r3, #16]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	6919      	ldr	r1, [r3, #16]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	430a      	orrs	r2, r1
 8009446:	611a      	str	r2, [r3, #16]
 8009448:	e014      	b.n	8009474 <HAL_ADC_Init+0x108>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	691a      	ldr	r2, [r3, #16]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	0092      	lsls	r2, r2, #2
 8009456:	0892      	lsrs	r2, r2, #2
 8009458:	611a      	str	r2, [r3, #16]
 800945a:	4b79      	ldr	r3, [pc, #484]	@ (8009640 <HAL_ADC_Init+0x2d4>)
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	4b78      	ldr	r3, [pc, #480]	@ (8009640 <HAL_ADC_Init+0x2d4>)
 8009460:	4978      	ldr	r1, [pc, #480]	@ (8009644 <HAL_ADC_Init+0x2d8>)
 8009462:	400a      	ands	r2, r1
 8009464:	601a      	str	r2, [r3, #0]
 8009466:	4b76      	ldr	r3, [pc, #472]	@ (8009640 <HAL_ADC_Init+0x2d4>)
 8009468:	6819      	ldr	r1, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	4b74      	ldr	r3, [pc, #464]	@ (8009640 <HAL_ADC_Init+0x2d4>)
 8009470:	430a      	orrs	r2, r1
 8009472:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68da      	ldr	r2, [r3, #12]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2118      	movs	r1, #24
 8009480:	438a      	bics	r2, r1
 8009482:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68d9      	ldr	r1, [r3, #12]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	689a      	ldr	r2, [r3, #8]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	430a      	orrs	r2, r1
 8009494:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8009496:	4b6a      	ldr	r3, [pc, #424]	@ (8009640 <HAL_ADC_Init+0x2d4>)
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	4b69      	ldr	r3, [pc, #420]	@ (8009640 <HAL_ADC_Init+0x2d4>)
 800949c:	496a      	ldr	r1, [pc, #424]	@ (8009648 <HAL_ADC_Init+0x2dc>)
 800949e:	400a      	ands	r2, r1
 80094a0:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80094a2:	4b67      	ldr	r3, [pc, #412]	@ (8009640 <HAL_ADC_Init+0x2d4>)
 80094a4:	6819      	ldr	r1, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094aa:	065a      	lsls	r2, r3, #25
 80094ac:	4b64      	ldr	r3, [pc, #400]	@ (8009640 <HAL_ADC_Init+0x2d4>)
 80094ae:	430a      	orrs	r2, r1
 80094b0:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	689a      	ldr	r2, [r3, #8]
 80094b8:	2380      	movs	r3, #128	@ 0x80
 80094ba:	055b      	lsls	r3, r3, #21
 80094bc:	4013      	ands	r3, r2
 80094be:	d108      	bne.n	80094d2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689a      	ldr	r2, [r3, #8]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2180      	movs	r1, #128	@ 0x80
 80094cc:	0549      	lsls	r1, r1, #21
 80094ce:	430a      	orrs	r2, r1
 80094d0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68da      	ldr	r2, [r3, #12]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	495b      	ldr	r1, [pc, #364]	@ (800964c <HAL_ADC_Init+0x2e0>)
 80094de:	400a      	ands	r2, r1
 80094e0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68d9      	ldr	r1, [r3, #12]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	d101      	bne.n	80094f8 <HAL_ADC_Init+0x18c>
 80094f4:	2304      	movs	r3, #4
 80094f6:	e000      	b.n	80094fa <HAL_ADC_Init+0x18e>
 80094f8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80094fa:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2020      	movs	r0, #32
 8009500:	5c1b      	ldrb	r3, [r3, r0]
 8009502:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8009504:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	202c      	movs	r0, #44	@ 0x2c
 800950a:	5c1b      	ldrb	r3, [r3, r0]
 800950c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800950e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8009514:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800951c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	69db      	ldr	r3, [r3, #28]
 8009522:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8009524:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	430a      	orrs	r2, r1
 800952c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009532:	23c2      	movs	r3, #194	@ 0xc2
 8009534:	33ff      	adds	r3, #255	@ 0xff
 8009536:	429a      	cmp	r2, r3
 8009538:	d00b      	beq.n	8009552 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68d9      	ldr	r1, [r3, #12]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8009548:	431a      	orrs	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	430a      	orrs	r2, r1
 8009550:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2221      	movs	r2, #33	@ 0x21
 8009556:	5c9b      	ldrb	r3, [r3, r2]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d11a      	bne.n	8009592 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2220      	movs	r2, #32
 8009560:	5c9b      	ldrb	r3, [r3, r2]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d109      	bne.n	800957a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68da      	ldr	r2, [r3, #12]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2180      	movs	r1, #128	@ 0x80
 8009572:	0249      	lsls	r1, r1, #9
 8009574:	430a      	orrs	r2, r1
 8009576:	60da      	str	r2, [r3, #12]
 8009578:	e00b      	b.n	8009592 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800957e:	2220      	movs	r2, #32
 8009580:	431a      	orrs	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800958a:	2201      	movs	r2, #1
 800958c:	431a      	orrs	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009596:	2b01      	cmp	r3, #1
 8009598:	d11f      	bne.n	80095da <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	691a      	ldr	r2, [r3, #16]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	492a      	ldr	r1, [pc, #168]	@ (8009650 <HAL_ADC_Init+0x2e4>)
 80095a6:	400a      	ands	r2, r1
 80095a8:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	6919      	ldr	r1, [r3, #16]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80095b8:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80095be:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	430a      	orrs	r2, r1
 80095c6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	691a      	ldr	r2, [r3, #16]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2101      	movs	r1, #1
 80095d4:	430a      	orrs	r2, r1
 80095d6:	611a      	str	r2, [r3, #16]
 80095d8:	e00e      	b.n	80095f8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	2201      	movs	r2, #1
 80095e2:	4013      	ands	r3, r2
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d107      	bne.n	80095f8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	691a      	ldr	r2, [r3, #16]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2101      	movs	r1, #1
 80095f4:	438a      	bics	r2, r1
 80095f6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	695a      	ldr	r2, [r3, #20]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2107      	movs	r1, #7
 8009604:	438a      	bics	r2, r1
 8009606:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6959      	ldr	r1, [r3, #20]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	430a      	orrs	r2, r1
 8009618:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009624:	2203      	movs	r2, #3
 8009626:	4393      	bics	r3, r2
 8009628:	2201      	movs	r2, #1
 800962a:	431a      	orrs	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	0018      	movs	r0, r3
 8009634:	46bd      	mov	sp, r7
 8009636:	b002      	add	sp, #8
 8009638:	bd80      	pop	{r7, pc}
 800963a:	46c0      	nop			@ (mov r8, r8)
 800963c:	fffffefd 	.word	0xfffffefd
 8009640:	40012708 	.word	0x40012708
 8009644:	ffc3ffff 	.word	0xffc3ffff
 8009648:	fdffffff 	.word	0xfdffffff
 800964c:	fffe0219 	.word	0xfffe0219
 8009650:	fffffc03 	.word	0xfffffc03

08009654 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8009654:	b590      	push	{r4, r7, lr}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800965c:	230f      	movs	r3, #15
 800965e:	18fb      	adds	r3, r7, r3
 8009660:	2200      	movs	r2, #0
 8009662:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	2204      	movs	r2, #4
 800966c:	4013      	ands	r3, r2
 800966e:	d138      	bne.n	80096e2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2250      	movs	r2, #80	@ 0x50
 8009674:	5c9b      	ldrb	r3, [r3, r2]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d101      	bne.n	800967e <HAL_ADC_Start+0x2a>
 800967a:	2302      	movs	r3, #2
 800967c:	e038      	b.n	80096f0 <HAL_ADC_Start+0x9c>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2250      	movs	r2, #80	@ 0x50
 8009682:	2101      	movs	r1, #1
 8009684:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	69db      	ldr	r3, [r3, #28]
 800968a:	2b01      	cmp	r3, #1
 800968c:	d007      	beq.n	800969e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800968e:	230f      	movs	r3, #15
 8009690:	18fc      	adds	r4, r7, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	0018      	movs	r0, r3
 8009696:	f000 f95f 	bl	8009958 <ADC_Enable>
 800969a:	0003      	movs	r3, r0
 800969c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800969e:	230f      	movs	r3, #15
 80096a0:	18fb      	adds	r3, r7, r3
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d120      	bne.n	80096ea <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ac:	4a12      	ldr	r2, [pc, #72]	@ (80096f8 <HAL_ADC_Start+0xa4>)
 80096ae:	4013      	ands	r3, r2
 80096b0:	2280      	movs	r2, #128	@ 0x80
 80096b2:	0052      	lsls	r2, r2, #1
 80096b4:	431a      	orrs	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2250      	movs	r2, #80	@ 0x50
 80096c4:	2100      	movs	r1, #0
 80096c6:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	221c      	movs	r2, #28
 80096ce:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	689a      	ldr	r2, [r3, #8]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	2104      	movs	r1, #4
 80096dc:	430a      	orrs	r2, r1
 80096de:	609a      	str	r2, [r3, #8]
 80096e0:	e003      	b.n	80096ea <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80096e2:	230f      	movs	r3, #15
 80096e4:	18fb      	adds	r3, r7, r3
 80096e6:	2202      	movs	r2, #2
 80096e8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80096ea:	230f      	movs	r3, #15
 80096ec:	18fb      	adds	r3, r7, r3
 80096ee:	781b      	ldrb	r3, [r3, #0]
}
 80096f0:	0018      	movs	r0, r3
 80096f2:	46bd      	mov	sp, r7
 80096f4:	b005      	add	sp, #20
 80096f6:	bd90      	pop	{r4, r7, pc}
 80096f8:	fffff0fe 	.word	0xfffff0fe

080096fc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009706:	2300      	movs	r3, #0
 8009708:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800970a:	2300      	movs	r3, #0
 800970c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	2b08      	cmp	r3, #8
 8009714:	d102      	bne.n	800971c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8009716:	2308      	movs	r3, #8
 8009718:	60fb      	str	r3, [r7, #12]
 800971a:	e014      	b.n	8009746 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	2201      	movs	r2, #1
 8009724:	4013      	ands	r3, r2
 8009726:	2b01      	cmp	r3, #1
 8009728:	d10b      	bne.n	8009742 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800972e:	2220      	movs	r2, #32
 8009730:	431a      	orrs	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2250      	movs	r2, #80	@ 0x50
 800973a:	2100      	movs	r1, #0
 800973c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e072      	b.n	8009828 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8009742:	230c      	movs	r3, #12
 8009744:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8009746:	f7ff fdc5 	bl	80092d4 <HAL_GetTick>
 800974a:	0003      	movs	r3, r0
 800974c:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800974e:	e01f      	b.n	8009790 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	3301      	adds	r3, #1
 8009754:	d01c      	beq.n	8009790 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d007      	beq.n	800976c <HAL_ADC_PollForConversion+0x70>
 800975c:	f7ff fdba 	bl	80092d4 <HAL_GetTick>
 8009760:	0002      	movs	r2, r0
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	1ad3      	subs	r3, r2, r3
 8009766:	683a      	ldr	r2, [r7, #0]
 8009768:	429a      	cmp	r2, r3
 800976a:	d211      	bcs.n	8009790 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	4013      	ands	r3, r2
 8009776:	d10b      	bne.n	8009790 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800977c:	2204      	movs	r2, #4
 800977e:	431a      	orrs	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2250      	movs	r2, #80	@ 0x50
 8009788:	2100      	movs	r1, #0
 800978a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	e04b      	b.n	8009828 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	4013      	ands	r3, r2
 800979a:	d0d9      	beq.n	8009750 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097a0:	2280      	movs	r2, #128	@ 0x80
 80097a2:	0092      	lsls	r2, r2, #2
 80097a4:	431a      	orrs	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	68da      	ldr	r2, [r3, #12]
 80097b0:	23c0      	movs	r3, #192	@ 0xc0
 80097b2:	011b      	lsls	r3, r3, #4
 80097b4:	4013      	ands	r3, r2
 80097b6:	d12e      	bne.n	8009816 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2220      	movs	r2, #32
 80097bc:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d129      	bne.n	8009816 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2208      	movs	r2, #8
 80097ca:	4013      	ands	r3, r2
 80097cc:	2b08      	cmp	r3, #8
 80097ce:	d122      	bne.n	8009816 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	689b      	ldr	r3, [r3, #8]
 80097d6:	2204      	movs	r2, #4
 80097d8:	4013      	ands	r3, r2
 80097da:	d110      	bne.n	80097fe <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685a      	ldr	r2, [r3, #4]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	210c      	movs	r1, #12
 80097e8:	438a      	bics	r2, r1
 80097ea:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097f0:	4a0f      	ldr	r2, [pc, #60]	@ (8009830 <HAL_ADC_PollForConversion+0x134>)
 80097f2:	4013      	ands	r3, r2
 80097f4:	2201      	movs	r2, #1
 80097f6:	431a      	orrs	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	655a      	str	r2, [r3, #84]	@ 0x54
 80097fc:	e00b      	b.n	8009816 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009802:	2220      	movs	r2, #32
 8009804:	431a      	orrs	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800980e:	2201      	movs	r2, #1
 8009810:	431a      	orrs	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	699b      	ldr	r3, [r3, #24]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d103      	bne.n	8009826 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	220c      	movs	r2, #12
 8009824:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	0018      	movs	r0, r3
 800982a:	46bd      	mov	sp, r7
 800982c:	b004      	add	sp, #16
 800982e:	bd80      	pop	{r7, pc}
 8009830:	fffffefe 	.word	0xfffffefe

08009834 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8009842:	0018      	movs	r0, r3
 8009844:	46bd      	mov	sp, r7
 8009846:	b002      	add	sp, #8
 8009848:	bd80      	pop	{r7, pc}
	...

0800984c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2250      	movs	r2, #80	@ 0x50
 800985a:	5c9b      	ldrb	r3, [r3, r2]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d101      	bne.n	8009864 <HAL_ADC_ConfigChannel+0x18>
 8009860:	2302      	movs	r3, #2
 8009862:	e06c      	b.n	800993e <HAL_ADC_ConfigChannel+0xf2>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2250      	movs	r2, #80	@ 0x50
 8009868:	2101      	movs	r1, #1
 800986a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	2204      	movs	r2, #4
 8009874:	4013      	ands	r3, r2
 8009876:	d00b      	beq.n	8009890 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800987c:	2220      	movs	r2, #32
 800987e:	431a      	orrs	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2250      	movs	r2, #80	@ 0x50
 8009888:	2100      	movs	r1, #0
 800988a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	e056      	b.n	800993e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	4a2c      	ldr	r2, [pc, #176]	@ (8009948 <HAL_ADC_ConfigChannel+0xfc>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d028      	beq.n	80098ec <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	035b      	lsls	r3, r3, #13
 80098a6:	0b5a      	lsrs	r2, r3, #13
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	430a      	orrs	r2, r1
 80098ae:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	2380      	movs	r3, #128	@ 0x80
 80098b6:	02db      	lsls	r3, r3, #11
 80098b8:	4013      	ands	r3, r2
 80098ba:	d009      	beq.n	80098d0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80098bc:	4b23      	ldr	r3, [pc, #140]	@ (800994c <HAL_ADC_ConfigChannel+0x100>)
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	4b22      	ldr	r3, [pc, #136]	@ (800994c <HAL_ADC_ConfigChannel+0x100>)
 80098c2:	2180      	movs	r1, #128	@ 0x80
 80098c4:	0409      	lsls	r1, r1, #16
 80098c6:	430a      	orrs	r2, r1
 80098c8:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80098ca:	200a      	movs	r0, #10
 80098cc:	f000 f8ac 	bl	8009a28 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	2380      	movs	r3, #128	@ 0x80
 80098d6:	029b      	lsls	r3, r3, #10
 80098d8:	4013      	ands	r3, r2
 80098da:	d02b      	beq.n	8009934 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80098dc:	4b1b      	ldr	r3, [pc, #108]	@ (800994c <HAL_ADC_ConfigChannel+0x100>)
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	4b1a      	ldr	r3, [pc, #104]	@ (800994c <HAL_ADC_ConfigChannel+0x100>)
 80098e2:	2180      	movs	r1, #128	@ 0x80
 80098e4:	03c9      	lsls	r1, r1, #15
 80098e6:	430a      	orrs	r2, r1
 80098e8:	601a      	str	r2, [r3, #0]
 80098ea:	e023      	b.n	8009934 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	035b      	lsls	r3, r3, #13
 80098f8:	0b5b      	lsrs	r3, r3, #13
 80098fa:	43d9      	mvns	r1, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	400a      	ands	r2, r1
 8009902:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	2380      	movs	r3, #128	@ 0x80
 800990a:	02db      	lsls	r3, r3, #11
 800990c:	4013      	ands	r3, r2
 800990e:	d005      	beq.n	800991c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8009910:	4b0e      	ldr	r3, [pc, #56]	@ (800994c <HAL_ADC_ConfigChannel+0x100>)
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	4b0d      	ldr	r3, [pc, #52]	@ (800994c <HAL_ADC_ConfigChannel+0x100>)
 8009916:	490e      	ldr	r1, [pc, #56]	@ (8009950 <HAL_ADC_ConfigChannel+0x104>)
 8009918:	400a      	ands	r2, r1
 800991a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	2380      	movs	r3, #128	@ 0x80
 8009922:	029b      	lsls	r3, r3, #10
 8009924:	4013      	ands	r3, r2
 8009926:	d005      	beq.n	8009934 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8009928:	4b08      	ldr	r3, [pc, #32]	@ (800994c <HAL_ADC_ConfigChannel+0x100>)
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	4b07      	ldr	r3, [pc, #28]	@ (800994c <HAL_ADC_ConfigChannel+0x100>)
 800992e:	4909      	ldr	r1, [pc, #36]	@ (8009954 <HAL_ADC_ConfigChannel+0x108>)
 8009930:	400a      	ands	r2, r1
 8009932:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2250      	movs	r2, #80	@ 0x50
 8009938:	2100      	movs	r1, #0
 800993a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	0018      	movs	r0, r3
 8009940:	46bd      	mov	sp, r7
 8009942:	b002      	add	sp, #8
 8009944:	bd80      	pop	{r7, pc}
 8009946:	46c0      	nop			@ (mov r8, r8)
 8009948:	00001001 	.word	0x00001001
 800994c:	40012708 	.word	0x40012708
 8009950:	ff7fffff 	.word	0xff7fffff
 8009954:	ffbfffff 	.word	0xffbfffff

08009958 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009960:	2300      	movs	r3, #0
 8009962:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	2203      	movs	r2, #3
 800996c:	4013      	ands	r3, r2
 800996e:	2b01      	cmp	r3, #1
 8009970:	d108      	bne.n	8009984 <ADC_Enable+0x2c>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2201      	movs	r2, #1
 800997a:	4013      	ands	r3, r2
 800997c:	2b01      	cmp	r3, #1
 800997e:	d101      	bne.n	8009984 <ADC_Enable+0x2c>
 8009980:	2301      	movs	r3, #1
 8009982:	e000      	b.n	8009986 <ADC_Enable+0x2e>
 8009984:	2300      	movs	r3, #0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d146      	bne.n	8009a18 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	4a24      	ldr	r2, [pc, #144]	@ (8009a24 <ADC_Enable+0xcc>)
 8009992:	4013      	ands	r3, r2
 8009994:	d00d      	beq.n	80099b2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800999a:	2210      	movs	r2, #16
 800999c:	431a      	orrs	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099a6:	2201      	movs	r2, #1
 80099a8:	431a      	orrs	r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	e033      	b.n	8009a1a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	689a      	ldr	r2, [r3, #8]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2101      	movs	r1, #1
 80099be:	430a      	orrs	r2, r1
 80099c0:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80099c2:	2001      	movs	r0, #1
 80099c4:	f000 f830 	bl	8009a28 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80099c8:	f7ff fc84 	bl	80092d4 <HAL_GetTick>
 80099cc:	0003      	movs	r3, r0
 80099ce:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80099d0:	e01b      	b.n	8009a0a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80099d2:	f7ff fc7f 	bl	80092d4 <HAL_GetTick>
 80099d6:	0002      	movs	r2, r0
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	2b0a      	cmp	r3, #10
 80099de:	d914      	bls.n	8009a0a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2201      	movs	r2, #1
 80099e8:	4013      	ands	r3, r2
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d00d      	beq.n	8009a0a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099f2:	2210      	movs	r2, #16
 80099f4:	431a      	orrs	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099fe:	2201      	movs	r2, #1
 8009a00:	431a      	orrs	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e007      	b.n	8009a1a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2201      	movs	r2, #1
 8009a12:	4013      	ands	r3, r2
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d1dc      	bne.n	80099d2 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	0018      	movs	r0, r3
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	b004      	add	sp, #16
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	46c0      	nop			@ (mov r8, r8)
 8009a24:	80000017 	.word	0x80000017

08009a28 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8009a30:	4b0b      	ldr	r3, [pc, #44]	@ (8009a60 <ADC_DelayMicroSecond+0x38>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	490b      	ldr	r1, [pc, #44]	@ (8009a64 <ADC_DelayMicroSecond+0x3c>)
 8009a36:	0018      	movs	r0, r3
 8009a38:	f7f6 fb82 	bl	8000140 <__udivsi3>
 8009a3c:	0003      	movs	r3, r0
 8009a3e:	001a      	movs	r2, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4353      	muls	r3, r2
 8009a44:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8009a46:	e002      	b.n	8009a4e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1f9      	bne.n	8009a48 <ADC_DelayMicroSecond+0x20>
  }
}
 8009a54:	46c0      	nop			@ (mov r8, r8)
 8009a56:	46c0      	nop			@ (mov r8, r8)
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	b004      	add	sp, #16
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	46c0      	nop			@ (mov r8, r8)
 8009a60:	2000013c 	.word	0x2000013c
 8009a64:	000f4240 	.word	0x000f4240

08009a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	0002      	movs	r2, r0
 8009a70:	1dfb      	adds	r3, r7, #7
 8009a72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009a74:	1dfb      	adds	r3, r7, #7
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a7a:	d809      	bhi.n	8009a90 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a7c:	1dfb      	adds	r3, r7, #7
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	001a      	movs	r2, r3
 8009a82:	231f      	movs	r3, #31
 8009a84:	401a      	ands	r2, r3
 8009a86:	4b04      	ldr	r3, [pc, #16]	@ (8009a98 <__NVIC_EnableIRQ+0x30>)
 8009a88:	2101      	movs	r1, #1
 8009a8a:	4091      	lsls	r1, r2
 8009a8c:	000a      	movs	r2, r1
 8009a8e:	601a      	str	r2, [r3, #0]
  }
}
 8009a90:	46c0      	nop			@ (mov r8, r8)
 8009a92:	46bd      	mov	sp, r7
 8009a94:	b002      	add	sp, #8
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	e000e100 	.word	0xe000e100

08009a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009a9c:	b590      	push	{r4, r7, lr}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	0002      	movs	r2, r0
 8009aa4:	6039      	str	r1, [r7, #0]
 8009aa6:	1dfb      	adds	r3, r7, #7
 8009aa8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009aaa:	1dfb      	adds	r3, r7, #7
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ab0:	d828      	bhi.n	8009b04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009ab2:	4a2f      	ldr	r2, [pc, #188]	@ (8009b70 <__NVIC_SetPriority+0xd4>)
 8009ab4:	1dfb      	adds	r3, r7, #7
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	b25b      	sxtb	r3, r3
 8009aba:	089b      	lsrs	r3, r3, #2
 8009abc:	33c0      	adds	r3, #192	@ 0xc0
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	589b      	ldr	r3, [r3, r2]
 8009ac2:	1dfa      	adds	r2, r7, #7
 8009ac4:	7812      	ldrb	r2, [r2, #0]
 8009ac6:	0011      	movs	r1, r2
 8009ac8:	2203      	movs	r2, #3
 8009aca:	400a      	ands	r2, r1
 8009acc:	00d2      	lsls	r2, r2, #3
 8009ace:	21ff      	movs	r1, #255	@ 0xff
 8009ad0:	4091      	lsls	r1, r2
 8009ad2:	000a      	movs	r2, r1
 8009ad4:	43d2      	mvns	r2, r2
 8009ad6:	401a      	ands	r2, r3
 8009ad8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	019b      	lsls	r3, r3, #6
 8009ade:	22ff      	movs	r2, #255	@ 0xff
 8009ae0:	401a      	ands	r2, r3
 8009ae2:	1dfb      	adds	r3, r7, #7
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	0018      	movs	r0, r3
 8009ae8:	2303      	movs	r3, #3
 8009aea:	4003      	ands	r3, r0
 8009aec:	00db      	lsls	r3, r3, #3
 8009aee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009af0:	481f      	ldr	r0, [pc, #124]	@ (8009b70 <__NVIC_SetPriority+0xd4>)
 8009af2:	1dfb      	adds	r3, r7, #7
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	b25b      	sxtb	r3, r3
 8009af8:	089b      	lsrs	r3, r3, #2
 8009afa:	430a      	orrs	r2, r1
 8009afc:	33c0      	adds	r3, #192	@ 0xc0
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8009b02:	e031      	b.n	8009b68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009b04:	4a1b      	ldr	r2, [pc, #108]	@ (8009b74 <__NVIC_SetPriority+0xd8>)
 8009b06:	1dfb      	adds	r3, r7, #7
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	0019      	movs	r1, r3
 8009b0c:	230f      	movs	r3, #15
 8009b0e:	400b      	ands	r3, r1
 8009b10:	3b08      	subs	r3, #8
 8009b12:	089b      	lsrs	r3, r3, #2
 8009b14:	3306      	adds	r3, #6
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	18d3      	adds	r3, r2, r3
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	1dfa      	adds	r2, r7, #7
 8009b20:	7812      	ldrb	r2, [r2, #0]
 8009b22:	0011      	movs	r1, r2
 8009b24:	2203      	movs	r2, #3
 8009b26:	400a      	ands	r2, r1
 8009b28:	00d2      	lsls	r2, r2, #3
 8009b2a:	21ff      	movs	r1, #255	@ 0xff
 8009b2c:	4091      	lsls	r1, r2
 8009b2e:	000a      	movs	r2, r1
 8009b30:	43d2      	mvns	r2, r2
 8009b32:	401a      	ands	r2, r3
 8009b34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	019b      	lsls	r3, r3, #6
 8009b3a:	22ff      	movs	r2, #255	@ 0xff
 8009b3c:	401a      	ands	r2, r3
 8009b3e:	1dfb      	adds	r3, r7, #7
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	0018      	movs	r0, r3
 8009b44:	2303      	movs	r3, #3
 8009b46:	4003      	ands	r3, r0
 8009b48:	00db      	lsls	r3, r3, #3
 8009b4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009b4c:	4809      	ldr	r0, [pc, #36]	@ (8009b74 <__NVIC_SetPriority+0xd8>)
 8009b4e:	1dfb      	adds	r3, r7, #7
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	001c      	movs	r4, r3
 8009b54:	230f      	movs	r3, #15
 8009b56:	4023      	ands	r3, r4
 8009b58:	3b08      	subs	r3, #8
 8009b5a:	089b      	lsrs	r3, r3, #2
 8009b5c:	430a      	orrs	r2, r1
 8009b5e:	3306      	adds	r3, #6
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	18c3      	adds	r3, r0, r3
 8009b64:	3304      	adds	r3, #4
 8009b66:	601a      	str	r2, [r3, #0]
}
 8009b68:	46c0      	nop			@ (mov r8, r8)
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	b003      	add	sp, #12
 8009b6e:	bd90      	pop	{r4, r7, pc}
 8009b70:	e000e100 	.word	0xe000e100
 8009b74:	e000ed00 	.word	0xe000ed00

08009b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	1e5a      	subs	r2, r3, #1
 8009b84:	2380      	movs	r3, #128	@ 0x80
 8009b86:	045b      	lsls	r3, r3, #17
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d301      	bcc.n	8009b90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e010      	b.n	8009bb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009b90:	4b0a      	ldr	r3, [pc, #40]	@ (8009bbc <SysTick_Config+0x44>)
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	3a01      	subs	r2, #1
 8009b96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009b98:	2301      	movs	r3, #1
 8009b9a:	425b      	negs	r3, r3
 8009b9c:	2103      	movs	r1, #3
 8009b9e:	0018      	movs	r0, r3
 8009ba0:	f7ff ff7c 	bl	8009a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009ba4:	4b05      	ldr	r3, [pc, #20]	@ (8009bbc <SysTick_Config+0x44>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009baa:	4b04      	ldr	r3, [pc, #16]	@ (8009bbc <SysTick_Config+0x44>)
 8009bac:	2207      	movs	r2, #7
 8009bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	0018      	movs	r0, r3
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	b002      	add	sp, #8
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	46c0      	nop			@ (mov r8, r8)
 8009bbc:	e000e010 	.word	0xe000e010

08009bc0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60b9      	str	r1, [r7, #8]
 8009bc8:	607a      	str	r2, [r7, #4]
 8009bca:	210f      	movs	r1, #15
 8009bcc:	187b      	adds	r3, r7, r1
 8009bce:	1c02      	adds	r2, r0, #0
 8009bd0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	187b      	adds	r3, r7, r1
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	b25b      	sxtb	r3, r3
 8009bda:	0011      	movs	r1, r2
 8009bdc:	0018      	movs	r0, r3
 8009bde:	f7ff ff5d 	bl	8009a9c <__NVIC_SetPriority>
}
 8009be2:	46c0      	nop			@ (mov r8, r8)
 8009be4:	46bd      	mov	sp, r7
 8009be6:	b004      	add	sp, #16
 8009be8:	bd80      	pop	{r7, pc}

08009bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b082      	sub	sp, #8
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	0002      	movs	r2, r0
 8009bf2:	1dfb      	adds	r3, r7, #7
 8009bf4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009bf6:	1dfb      	adds	r3, r7, #7
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	b25b      	sxtb	r3, r3
 8009bfc:	0018      	movs	r0, r3
 8009bfe:	f7ff ff33 	bl	8009a68 <__NVIC_EnableIRQ>
}
 8009c02:	46c0      	nop			@ (mov r8, r8)
 8009c04:	46bd      	mov	sp, r7
 8009c06:	b002      	add	sp, #8
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b082      	sub	sp, #8
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	0018      	movs	r0, r3
 8009c16:	f7ff ffaf 	bl	8009b78 <SysTick_Config>
 8009c1a:	0003      	movs	r3, r0
}
 8009c1c:	0018      	movs	r0, r3
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	b002      	add	sp, #8
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e061      	b.n	8009cfa <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a32      	ldr	r2, [pc, #200]	@ (8009d04 <HAL_DMA_Init+0xe0>)
 8009c3c:	4694      	mov	ip, r2
 8009c3e:	4463      	add	r3, ip
 8009c40:	2114      	movs	r1, #20
 8009c42:	0018      	movs	r0, r3
 8009c44:	f7f6 fa7c 	bl	8000140 <__udivsi3>
 8009c48:	0003      	movs	r3, r0
 8009c4a:	009a      	lsls	r2, r3, #2
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a2d      	ldr	r2, [pc, #180]	@ (8009d08 <HAL_DMA_Init+0xe4>)
 8009c54:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2225      	movs	r2, #37	@ 0x25
 8009c5a:	2102      	movs	r1, #2
 8009c5c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	4a28      	ldr	r2, [pc, #160]	@ (8009d0c <HAL_DMA_Init+0xe8>)
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	699b      	ldr	r3, [r3, #24]
 8009c88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a1b      	ldr	r3, [r3, #32]
 8009c94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	689a      	ldr	r2, [r3, #8]
 8009ca8:	2380      	movs	r3, #128	@ 0x80
 8009caa:	01db      	lsls	r3, r3, #7
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d018      	beq.n	8009ce2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009cb0:	4b17      	ldr	r3, [pc, #92]	@ (8009d10 <HAL_DMA_Init+0xec>)
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cb8:	211c      	movs	r1, #28
 8009cba:	400b      	ands	r3, r1
 8009cbc:	210f      	movs	r1, #15
 8009cbe:	4099      	lsls	r1, r3
 8009cc0:	000b      	movs	r3, r1
 8009cc2:	43d9      	mvns	r1, r3
 8009cc4:	4b12      	ldr	r3, [pc, #72]	@ (8009d10 <HAL_DMA_Init+0xec>)
 8009cc6:	400a      	ands	r2, r1
 8009cc8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009cca:	4b11      	ldr	r3, [pc, #68]	@ (8009d10 <HAL_DMA_Init+0xec>)
 8009ccc:	6819      	ldr	r1, [r3, #0]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	685a      	ldr	r2, [r3, #4]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cd6:	201c      	movs	r0, #28
 8009cd8:	4003      	ands	r3, r0
 8009cda:	409a      	lsls	r2, r3
 8009cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8009d10 <HAL_DMA_Init+0xec>)
 8009cde:	430a      	orrs	r2, r1
 8009ce0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2225      	movs	r2, #37	@ 0x25
 8009cec:	2101      	movs	r1, #1
 8009cee:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2224      	movs	r2, #36	@ 0x24
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	0018      	movs	r0, r3
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	b004      	add	sp, #16
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	46c0      	nop			@ (mov r8, r8)
 8009d04:	bffdfff8 	.word	0xbffdfff8
 8009d08:	40020000 	.word	0x40020000
 8009d0c:	ffff800f 	.word	0xffff800f
 8009d10:	400200a8 	.word	0x400200a8

08009d14 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d101      	bne.n	8009d26 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e04a      	b.n	8009dbc <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2101      	movs	r1, #1
 8009d32:	438a      	bics	r2, r1
 8009d34:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a22      	ldr	r2, [pc, #136]	@ (8009dc4 <HAL_DMA_DeInit+0xb0>)
 8009d3c:	4694      	mov	ip, r2
 8009d3e:	4463      	add	r3, ip
 8009d40:	2114      	movs	r1, #20
 8009d42:	0018      	movs	r0, r3
 8009d44:	f7f6 f9fc 	bl	8000140 <__udivsi3>
 8009d48:	0003      	movs	r3, r0
 8009d4a:	009a      	lsls	r2, r3, #2
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a1d      	ldr	r2, [pc, #116]	@ (8009dc8 <HAL_DMA_DeInit+0xb4>)
 8009d54:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d62:	221c      	movs	r2, #28
 8009d64:	401a      	ands	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	4091      	lsls	r1, r2
 8009d6e:	000a      	movs	r2, r1
 8009d70:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009d72:	4b16      	ldr	r3, [pc, #88]	@ (8009dcc <HAL_DMA_DeInit+0xb8>)
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d7a:	211c      	movs	r1, #28
 8009d7c:	400b      	ands	r3, r1
 8009d7e:	210f      	movs	r1, #15
 8009d80:	4099      	lsls	r1, r3
 8009d82:	000b      	movs	r3, r1
 8009d84:	43d9      	mvns	r1, r3
 8009d86:	4b11      	ldr	r3, [pc, #68]	@ (8009dcc <HAL_DMA_DeInit+0xb8>)
 8009d88:	400a      	ands	r2, r1
 8009d8a:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2225      	movs	r2, #37	@ 0x25
 8009dae:	2100      	movs	r1, #0
 8009db0:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2224      	movs	r2, #36	@ 0x24
 8009db6:	2100      	movs	r1, #0
 8009db8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	0018      	movs	r0, r3
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	b002      	add	sp, #8
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	bffdfff8 	.word	0xbffdfff8
 8009dc8:	40020000 	.word	0x40020000
 8009dcc:	400200a8 	.word	0x400200a8

08009dd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009dde:	2317      	movs	r3, #23
 8009de0:	18fb      	adds	r3, r7, r3
 8009de2:	2200      	movs	r2, #0
 8009de4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2224      	movs	r2, #36	@ 0x24
 8009dea:	5c9b      	ldrb	r3, [r3, r2]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d101      	bne.n	8009df4 <HAL_DMA_Start_IT+0x24>
 8009df0:	2302      	movs	r3, #2
 8009df2:	e04f      	b.n	8009e94 <HAL_DMA_Start_IT+0xc4>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2224      	movs	r2, #36	@ 0x24
 8009df8:	2101      	movs	r1, #1
 8009dfa:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2225      	movs	r2, #37	@ 0x25
 8009e00:	5c9b      	ldrb	r3, [r3, r2]
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d13a      	bne.n	8009e7e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2225      	movs	r2, #37	@ 0x25
 8009e0c:	2102      	movs	r1, #2
 8009e0e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2200      	movs	r2, #0
 8009e14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2101      	movs	r1, #1
 8009e22:	438a      	bics	r2, r1
 8009e24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	68b9      	ldr	r1, [r7, #8]
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f000 f976 	bl	800a11e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d008      	beq.n	8009e4c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	210e      	movs	r1, #14
 8009e46:	430a      	orrs	r2, r1
 8009e48:	601a      	str	r2, [r3, #0]
 8009e4a:	e00f      	b.n	8009e6c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2104      	movs	r1, #4
 8009e58:	438a      	bics	r2, r1
 8009e5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	210a      	movs	r1, #10
 8009e68:	430a      	orrs	r2, r1
 8009e6a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2101      	movs	r1, #1
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	601a      	str	r2, [r3, #0]
 8009e7c:	e007      	b.n	8009e8e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2224      	movs	r2, #36	@ 0x24
 8009e82:	2100      	movs	r1, #0
 8009e84:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8009e86:	2317      	movs	r3, #23
 8009e88:	18fb      	adds	r3, r7, r3
 8009e8a:	2202      	movs	r2, #2
 8009e8c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8009e8e:	2317      	movs	r3, #23
 8009e90:	18fb      	adds	r3, r7, r3
 8009e92:	781b      	ldrb	r3, [r3, #0]
}
 8009e94:	0018      	movs	r0, r3
 8009e96:	46bd      	mov	sp, r7
 8009e98:	b006      	add	sp, #24
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ea4:	230f      	movs	r3, #15
 8009ea6:	18fb      	adds	r3, r7, r3
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2225      	movs	r2, #37	@ 0x25
 8009eb0:	5c9b      	ldrb	r3, [r3, r2]
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d008      	beq.n	8009eca <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2204      	movs	r2, #4
 8009ebc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2224      	movs	r2, #36	@ 0x24
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e024      	b.n	8009f14 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	210e      	movs	r1, #14
 8009ed6:	438a      	bics	r2, r1
 8009ed8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2101      	movs	r1, #1
 8009ee6:	438a      	bics	r2, r1
 8009ee8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eee:	221c      	movs	r2, #28
 8009ef0:	401a      	ands	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	4091      	lsls	r1, r2
 8009efa:	000a      	movs	r2, r1
 8009efc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2225      	movs	r2, #37	@ 0x25
 8009f02:	2101      	movs	r1, #1
 8009f04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2224      	movs	r2, #36	@ 0x24
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	5499      	strb	r1, [r3, r2]

    return status;
 8009f0e:	230f      	movs	r3, #15
 8009f10:	18fb      	adds	r3, r7, r3
 8009f12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f14:	0018      	movs	r0, r3
 8009f16:	46bd      	mov	sp, r7
 8009f18:	b004      	add	sp, #16
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f24:	210f      	movs	r1, #15
 8009f26:	187b      	adds	r3, r7, r1
 8009f28:	2200      	movs	r2, #0
 8009f2a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2225      	movs	r2, #37	@ 0x25
 8009f30:	5c9b      	ldrb	r3, [r3, r2]
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	2b02      	cmp	r3, #2
 8009f36:	d006      	beq.n	8009f46 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2204      	movs	r2, #4
 8009f3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8009f3e:	187b      	adds	r3, r7, r1
 8009f40:	2201      	movs	r2, #1
 8009f42:	701a      	strb	r2, [r3, #0]
 8009f44:	e02a      	b.n	8009f9c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	210e      	movs	r1, #14
 8009f52:	438a      	bics	r2, r1
 8009f54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2101      	movs	r1, #1
 8009f62:	438a      	bics	r2, r1
 8009f64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f6a:	221c      	movs	r2, #28
 8009f6c:	401a      	ands	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f72:	2101      	movs	r1, #1
 8009f74:	4091      	lsls	r1, r2
 8009f76:	000a      	movs	r2, r1
 8009f78:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2225      	movs	r2, #37	@ 0x25
 8009f7e:	2101      	movs	r1, #1
 8009f80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2224      	movs	r2, #36	@ 0x24
 8009f86:	2100      	movs	r1, #0
 8009f88:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d004      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	0010      	movs	r0, r2
 8009f9a:	4798      	blx	r3
    }
  }
  return status;
 8009f9c:	230f      	movs	r3, #15
 8009f9e:	18fb      	adds	r3, r7, r3
 8009fa0:	781b      	ldrb	r3, [r3, #0]
}
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	b004      	add	sp, #16
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b084      	sub	sp, #16
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fc6:	221c      	movs	r2, #28
 8009fc8:	4013      	ands	r3, r2
 8009fca:	2204      	movs	r2, #4
 8009fcc:	409a      	lsls	r2, r3
 8009fce:	0013      	movs	r3, r2
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	4013      	ands	r3, r2
 8009fd4:	d026      	beq.n	800a024 <HAL_DMA_IRQHandler+0x7a>
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	2204      	movs	r2, #4
 8009fda:	4013      	ands	r3, r2
 8009fdc:	d022      	beq.n	800a024 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2220      	movs	r2, #32
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	d107      	bne.n	8009ffa <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2104      	movs	r1, #4
 8009ff6:	438a      	bics	r2, r1
 8009ff8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ffe:	221c      	movs	r2, #28
 800a000:	401a      	ands	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a006:	2104      	movs	r1, #4
 800a008:	4091      	lsls	r1, r2
 800a00a:	000a      	movs	r2, r1
 800a00c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a012:	2b00      	cmp	r3, #0
 800a014:	d100      	bne.n	800a018 <HAL_DMA_IRQHandler+0x6e>
 800a016:	e071      	b.n	800a0fc <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	0010      	movs	r0, r2
 800a020:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800a022:	e06b      	b.n	800a0fc <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a028:	221c      	movs	r2, #28
 800a02a:	4013      	ands	r3, r2
 800a02c:	2202      	movs	r2, #2
 800a02e:	409a      	lsls	r2, r3
 800a030:	0013      	movs	r3, r2
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	4013      	ands	r3, r2
 800a036:	d02d      	beq.n	800a094 <HAL_DMA_IRQHandler+0xea>
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2202      	movs	r2, #2
 800a03c:	4013      	ands	r3, r2
 800a03e:	d029      	beq.n	800a094 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2220      	movs	r2, #32
 800a048:	4013      	ands	r3, r2
 800a04a:	d10b      	bne.n	800a064 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	210a      	movs	r1, #10
 800a058:	438a      	bics	r2, r1
 800a05a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2225      	movs	r2, #37	@ 0x25
 800a060:	2101      	movs	r1, #1
 800a062:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a068:	221c      	movs	r2, #28
 800a06a:	401a      	ands	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a070:	2102      	movs	r1, #2
 800a072:	4091      	lsls	r1, r2
 800a074:	000a      	movs	r2, r1
 800a076:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2224      	movs	r2, #36	@ 0x24
 800a07c:	2100      	movs	r1, #0
 800a07e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a084:	2b00      	cmp	r3, #0
 800a086:	d039      	beq.n	800a0fc <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	0010      	movs	r0, r2
 800a090:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800a092:	e033      	b.n	800a0fc <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a098:	221c      	movs	r2, #28
 800a09a:	4013      	ands	r3, r2
 800a09c:	2208      	movs	r2, #8
 800a09e:	409a      	lsls	r2, r3
 800a0a0:	0013      	movs	r3, r2
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	d02a      	beq.n	800a0fe <HAL_DMA_IRQHandler+0x154>
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2208      	movs	r2, #8
 800a0ac:	4013      	ands	r3, r2
 800a0ae:	d026      	beq.n	800a0fe <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	210e      	movs	r1, #14
 800a0bc:	438a      	bics	r2, r1
 800a0be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0c4:	221c      	movs	r2, #28
 800a0c6:	401a      	ands	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0cc:	2101      	movs	r1, #1
 800a0ce:	4091      	lsls	r1, r2
 800a0d0:	000a      	movs	r2, r1
 800a0d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2225      	movs	r2, #37	@ 0x25
 800a0de:	2101      	movs	r1, #1
 800a0e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2224      	movs	r2, #36	@ 0x24
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d005      	beq.n	800a0fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	0010      	movs	r0, r2
 800a0fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a0fc:	46c0      	nop			@ (mov r8, r8)
 800a0fe:	46c0      	nop			@ (mov r8, r8)
}
 800a100:	46bd      	mov	sp, r7
 800a102:	b004      	add	sp, #16
 800a104:	bd80      	pop	{r7, pc}

0800a106 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b082      	sub	sp, #8
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2225      	movs	r2, #37	@ 0x25
 800a112:	5c9b      	ldrb	r3, [r3, r2]
 800a114:	b2db      	uxtb	r3, r3
}
 800a116:	0018      	movs	r0, r3
 800a118:	46bd      	mov	sp, r7
 800a11a:	b002      	add	sp, #8
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b084      	sub	sp, #16
 800a122:	af00      	add	r7, sp, #0
 800a124:	60f8      	str	r0, [r7, #12]
 800a126:	60b9      	str	r1, [r7, #8]
 800a128:	607a      	str	r2, [r7, #4]
 800a12a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a130:	221c      	movs	r2, #28
 800a132:	401a      	ands	r2, r3
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a138:	2101      	movs	r1, #1
 800a13a:	4091      	lsls	r1, r2
 800a13c:	000a      	movs	r2, r1
 800a13e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	683a      	ldr	r2, [r7, #0]
 800a146:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	2b10      	cmp	r3, #16
 800a14e:	d108      	bne.n	800a162 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a160:	e007      	b.n	800a172 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68ba      	ldr	r2, [r7, #8]
 800a168:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	60da      	str	r2, [r3, #12]
}
 800a172:	46c0      	nop			@ (mov r8, r8)
 800a174:	46bd      	mov	sp, r7
 800a176:	b004      	add	sp, #16
 800a178:	bd80      	pop	{r7, pc}
	...

0800a17c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b086      	sub	sp, #24
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a186:	2300      	movs	r3, #0
 800a188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a18a:	2300      	movs	r3, #0
 800a18c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800a18e:	2300      	movs	r3, #0
 800a190:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800a192:	e155      	b.n	800a440 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2101      	movs	r1, #1
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	4091      	lsls	r1, r2
 800a19e:	000a      	movs	r2, r1
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d100      	bne.n	800a1ac <HAL_GPIO_Init+0x30>
 800a1aa:	e146      	b.n	800a43a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	2203      	movs	r2, #3
 800a1b2:	4013      	ands	r3, r2
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d005      	beq.n	800a1c4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	2203      	movs	r2, #3
 800a1be:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d130      	bne.n	800a226 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	005b      	lsls	r3, r3, #1
 800a1ce:	2203      	movs	r2, #3
 800a1d0:	409a      	lsls	r2, r3
 800a1d2:	0013      	movs	r3, r2
 800a1d4:	43da      	mvns	r2, r3
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	4013      	ands	r3, r2
 800a1da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	68da      	ldr	r2, [r3, #12]
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	005b      	lsls	r3, r3, #1
 800a1e4:	409a      	lsls	r2, r3
 800a1e6:	0013      	movs	r3, r2
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	409a      	lsls	r2, r3
 800a200:	0013      	movs	r3, r2
 800a202:	43da      	mvns	r2, r3
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	4013      	ands	r3, r2
 800a208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	091b      	lsrs	r3, r3, #4
 800a210:	2201      	movs	r2, #1
 800a212:	401a      	ands	r2, r3
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	409a      	lsls	r2, r3
 800a218:	0013      	movs	r3, r2
 800a21a:	693a      	ldr	r2, [r7, #16]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	2203      	movs	r2, #3
 800a22c:	4013      	ands	r3, r2
 800a22e:	2b03      	cmp	r3, #3
 800a230:	d017      	beq.n	800a262 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	005b      	lsls	r3, r3, #1
 800a23c:	2203      	movs	r2, #3
 800a23e:	409a      	lsls	r2, r3
 800a240:	0013      	movs	r3, r2
 800a242:	43da      	mvns	r2, r3
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	4013      	ands	r3, r2
 800a248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	689a      	ldr	r2, [r3, #8]
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	005b      	lsls	r3, r3, #1
 800a252:	409a      	lsls	r2, r3
 800a254:	0013      	movs	r3, r2
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	4313      	orrs	r3, r2
 800a25a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	2203      	movs	r2, #3
 800a268:	4013      	ands	r3, r2
 800a26a:	2b02      	cmp	r3, #2
 800a26c:	d123      	bne.n	800a2b6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	08da      	lsrs	r2, r3, #3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	3208      	adds	r2, #8
 800a276:	0092      	lsls	r2, r2, #2
 800a278:	58d3      	ldr	r3, [r2, r3]
 800a27a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	2207      	movs	r2, #7
 800a280:	4013      	ands	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	220f      	movs	r2, #15
 800a286:	409a      	lsls	r2, r3
 800a288:	0013      	movs	r3, r2
 800a28a:	43da      	mvns	r2, r3
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	4013      	ands	r3, r2
 800a290:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	691a      	ldr	r2, [r3, #16]
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	2107      	movs	r1, #7
 800a29a:	400b      	ands	r3, r1
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	409a      	lsls	r2, r3
 800a2a0:	0013      	movs	r3, r2
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	08da      	lsrs	r2, r3, #3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	3208      	adds	r2, #8
 800a2b0:	0092      	lsls	r2, r2, #2
 800a2b2:	6939      	ldr	r1, [r7, #16]
 800a2b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	005b      	lsls	r3, r3, #1
 800a2c0:	2203      	movs	r2, #3
 800a2c2:	409a      	lsls	r2, r3
 800a2c4:	0013      	movs	r3, r2
 800a2c6:	43da      	mvns	r2, r3
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	2203      	movs	r2, #3
 800a2d4:	401a      	ands	r2, r3
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	005b      	lsls	r3, r3, #1
 800a2da:	409a      	lsls	r2, r3
 800a2dc:	0013      	movs	r3, r2
 800a2de:	693a      	ldr	r2, [r7, #16]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	23c0      	movs	r3, #192	@ 0xc0
 800a2f0:	029b      	lsls	r3, r3, #10
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	d100      	bne.n	800a2f8 <HAL_GPIO_Init+0x17c>
 800a2f6:	e0a0      	b.n	800a43a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2f8:	4b57      	ldr	r3, [pc, #348]	@ (800a458 <HAL_GPIO_Init+0x2dc>)
 800a2fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2fc:	4b56      	ldr	r3, [pc, #344]	@ (800a458 <HAL_GPIO_Init+0x2dc>)
 800a2fe:	2101      	movs	r1, #1
 800a300:	430a      	orrs	r2, r1
 800a302:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800a304:	4a55      	ldr	r2, [pc, #340]	@ (800a45c <HAL_GPIO_Init+0x2e0>)
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	089b      	lsrs	r3, r3, #2
 800a30a:	3302      	adds	r3, #2
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	589b      	ldr	r3, [r3, r2]
 800a310:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	2203      	movs	r2, #3
 800a316:	4013      	ands	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	220f      	movs	r2, #15
 800a31c:	409a      	lsls	r2, r3
 800a31e:	0013      	movs	r3, r2
 800a320:	43da      	mvns	r2, r3
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	4013      	ands	r3, r2
 800a326:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	23a0      	movs	r3, #160	@ 0xa0
 800a32c:	05db      	lsls	r3, r3, #23
 800a32e:	429a      	cmp	r2, r3
 800a330:	d01f      	beq.n	800a372 <HAL_GPIO_Init+0x1f6>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a4a      	ldr	r2, [pc, #296]	@ (800a460 <HAL_GPIO_Init+0x2e4>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d019      	beq.n	800a36e <HAL_GPIO_Init+0x1f2>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4a49      	ldr	r2, [pc, #292]	@ (800a464 <HAL_GPIO_Init+0x2e8>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d013      	beq.n	800a36a <HAL_GPIO_Init+0x1ee>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a48      	ldr	r2, [pc, #288]	@ (800a468 <HAL_GPIO_Init+0x2ec>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d00d      	beq.n	800a366 <HAL_GPIO_Init+0x1ea>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a47      	ldr	r2, [pc, #284]	@ (800a46c <HAL_GPIO_Init+0x2f0>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d007      	beq.n	800a362 <HAL_GPIO_Init+0x1e6>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	4a46      	ldr	r2, [pc, #280]	@ (800a470 <HAL_GPIO_Init+0x2f4>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d101      	bne.n	800a35e <HAL_GPIO_Init+0x1e2>
 800a35a:	2305      	movs	r3, #5
 800a35c:	e00a      	b.n	800a374 <HAL_GPIO_Init+0x1f8>
 800a35e:	2306      	movs	r3, #6
 800a360:	e008      	b.n	800a374 <HAL_GPIO_Init+0x1f8>
 800a362:	2304      	movs	r3, #4
 800a364:	e006      	b.n	800a374 <HAL_GPIO_Init+0x1f8>
 800a366:	2303      	movs	r3, #3
 800a368:	e004      	b.n	800a374 <HAL_GPIO_Init+0x1f8>
 800a36a:	2302      	movs	r3, #2
 800a36c:	e002      	b.n	800a374 <HAL_GPIO_Init+0x1f8>
 800a36e:	2301      	movs	r3, #1
 800a370:	e000      	b.n	800a374 <HAL_GPIO_Init+0x1f8>
 800a372:	2300      	movs	r3, #0
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	2103      	movs	r1, #3
 800a378:	400a      	ands	r2, r1
 800a37a:	0092      	lsls	r2, r2, #2
 800a37c:	4093      	lsls	r3, r2
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	4313      	orrs	r3, r2
 800a382:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a384:	4935      	ldr	r1, [pc, #212]	@ (800a45c <HAL_GPIO_Init+0x2e0>)
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	089b      	lsrs	r3, r3, #2
 800a38a:	3302      	adds	r3, #2
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a392:	4b38      	ldr	r3, [pc, #224]	@ (800a474 <HAL_GPIO_Init+0x2f8>)
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	43da      	mvns	r2, r3
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	4013      	ands	r3, r2
 800a3a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	685a      	ldr	r2, [r3, #4]
 800a3a6:	2380      	movs	r3, #128	@ 0x80
 800a3a8:	035b      	lsls	r3, r3, #13
 800a3aa:	4013      	ands	r3, r2
 800a3ac:	d003      	beq.n	800a3b6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800a3b6:	4b2f      	ldr	r3, [pc, #188]	@ (800a474 <HAL_GPIO_Init+0x2f8>)
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800a3bc:	4b2d      	ldr	r3, [pc, #180]	@ (800a474 <HAL_GPIO_Init+0x2f8>)
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	43da      	mvns	r2, r3
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	685a      	ldr	r2, [r3, #4]
 800a3d0:	2380      	movs	r3, #128	@ 0x80
 800a3d2:	039b      	lsls	r3, r3, #14
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	d003      	beq.n	800a3e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800a3d8:	693a      	ldr	r2, [r7, #16]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800a3e0:	4b24      	ldr	r3, [pc, #144]	@ (800a474 <HAL_GPIO_Init+0x2f8>)
 800a3e2:	693a      	ldr	r2, [r7, #16]
 800a3e4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800a3e6:	4b23      	ldr	r3, [pc, #140]	@ (800a474 <HAL_GPIO_Init+0x2f8>)
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	43da      	mvns	r2, r3
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	685a      	ldr	r2, [r3, #4]
 800a3fa:	2380      	movs	r3, #128	@ 0x80
 800a3fc:	029b      	lsls	r3, r3, #10
 800a3fe:	4013      	ands	r3, r2
 800a400:	d003      	beq.n	800a40a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	4313      	orrs	r3, r2
 800a408:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800a40a:	4b1a      	ldr	r3, [pc, #104]	@ (800a474 <HAL_GPIO_Init+0x2f8>)
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a410:	4b18      	ldr	r3, [pc, #96]	@ (800a474 <HAL_GPIO_Init+0x2f8>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	43da      	mvns	r2, r3
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	4013      	ands	r3, r2
 800a41e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	685a      	ldr	r2, [r3, #4]
 800a424:	2380      	movs	r3, #128	@ 0x80
 800a426:	025b      	lsls	r3, r3, #9
 800a428:	4013      	ands	r3, r2
 800a42a:	d003      	beq.n	800a434 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	4313      	orrs	r3, r2
 800a432:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800a434:	4b0f      	ldr	r3, [pc, #60]	@ (800a474 <HAL_GPIO_Init+0x2f8>)
 800a436:	693a      	ldr	r2, [r7, #16]
 800a438:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	3301      	adds	r3, #1
 800a43e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	40da      	lsrs	r2, r3
 800a448:	1e13      	subs	r3, r2, #0
 800a44a:	d000      	beq.n	800a44e <HAL_GPIO_Init+0x2d2>
 800a44c:	e6a2      	b.n	800a194 <HAL_GPIO_Init+0x18>
  }
}
 800a44e:	46c0      	nop			@ (mov r8, r8)
 800a450:	46c0      	nop			@ (mov r8, r8)
 800a452:	46bd      	mov	sp, r7
 800a454:	b006      	add	sp, #24
 800a456:	bd80      	pop	{r7, pc}
 800a458:	40021000 	.word	0x40021000
 800a45c:	40010000 	.word	0x40010000
 800a460:	50000400 	.word	0x50000400
 800a464:	50000800 	.word	0x50000800
 800a468:	50000c00 	.word	0x50000c00
 800a46c:	50001000 	.word	0x50001000
 800a470:	50001c00 	.word	0x50001c00
 800a474:	40010400 	.word	0x40010400

0800a478 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b086      	sub	sp, #24
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a482:	2300      	movs	r3, #0
 800a484:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a486:	2300      	movs	r3, #0
 800a488:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800a48a:	2300      	movs	r3, #0
 800a48c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800a48e:	e0bc      	b.n	800a60a <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800a490:	2201      	movs	r2, #1
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	409a      	lsls	r2, r3
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	4013      	ands	r3, r2
 800a49a:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d100      	bne.n	800a4a4 <HAL_GPIO_DeInit+0x2c>
 800a4a2:	e0af      	b.n	800a604 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800a4a4:	4a5e      	ldr	r2, [pc, #376]	@ (800a620 <HAL_GPIO_DeInit+0x1a8>)
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	089b      	lsrs	r3, r3, #2
 800a4aa:	3302      	adds	r3, #2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	589b      	ldr	r3, [r3, r2]
 800a4b0:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	2203      	movs	r2, #3
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	220f      	movs	r2, #15
 800a4bc:	409a      	lsls	r2, r3
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	23a0      	movs	r3, #160	@ 0xa0
 800a4c8:	05db      	lsls	r3, r3, #23
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d01f      	beq.n	800a50e <HAL_GPIO_DeInit+0x96>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4a54      	ldr	r2, [pc, #336]	@ (800a624 <HAL_GPIO_DeInit+0x1ac>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d019      	beq.n	800a50a <HAL_GPIO_DeInit+0x92>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a53      	ldr	r2, [pc, #332]	@ (800a628 <HAL_GPIO_DeInit+0x1b0>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d013      	beq.n	800a506 <HAL_GPIO_DeInit+0x8e>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4a52      	ldr	r2, [pc, #328]	@ (800a62c <HAL_GPIO_DeInit+0x1b4>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d00d      	beq.n	800a502 <HAL_GPIO_DeInit+0x8a>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a51      	ldr	r2, [pc, #324]	@ (800a630 <HAL_GPIO_DeInit+0x1b8>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d007      	beq.n	800a4fe <HAL_GPIO_DeInit+0x86>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a50      	ldr	r2, [pc, #320]	@ (800a634 <HAL_GPIO_DeInit+0x1bc>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d101      	bne.n	800a4fa <HAL_GPIO_DeInit+0x82>
 800a4f6:	2305      	movs	r3, #5
 800a4f8:	e00a      	b.n	800a510 <HAL_GPIO_DeInit+0x98>
 800a4fa:	2306      	movs	r3, #6
 800a4fc:	e008      	b.n	800a510 <HAL_GPIO_DeInit+0x98>
 800a4fe:	2304      	movs	r3, #4
 800a500:	e006      	b.n	800a510 <HAL_GPIO_DeInit+0x98>
 800a502:	2303      	movs	r3, #3
 800a504:	e004      	b.n	800a510 <HAL_GPIO_DeInit+0x98>
 800a506:	2302      	movs	r3, #2
 800a508:	e002      	b.n	800a510 <HAL_GPIO_DeInit+0x98>
 800a50a:	2301      	movs	r3, #1
 800a50c:	e000      	b.n	800a510 <HAL_GPIO_DeInit+0x98>
 800a50e:	2300      	movs	r3, #0
 800a510:	697a      	ldr	r2, [r7, #20]
 800a512:	2103      	movs	r1, #3
 800a514:	400a      	ands	r2, r1
 800a516:	0092      	lsls	r2, r2, #2
 800a518:	4093      	lsls	r3, r2
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d132      	bne.n	800a586 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a520:	4b45      	ldr	r3, [pc, #276]	@ (800a638 <HAL_GPIO_DeInit+0x1c0>)
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	43d9      	mvns	r1, r3
 800a528:	4b43      	ldr	r3, [pc, #268]	@ (800a638 <HAL_GPIO_DeInit+0x1c0>)
 800a52a:	400a      	ands	r2, r1
 800a52c:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a52e:	4b42      	ldr	r3, [pc, #264]	@ (800a638 <HAL_GPIO_DeInit+0x1c0>)
 800a530:	685a      	ldr	r2, [r3, #4]
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	43d9      	mvns	r1, r3
 800a536:	4b40      	ldr	r3, [pc, #256]	@ (800a638 <HAL_GPIO_DeInit+0x1c0>)
 800a538:	400a      	ands	r2, r1
 800a53a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a53c:	4b3e      	ldr	r3, [pc, #248]	@ (800a638 <HAL_GPIO_DeInit+0x1c0>)
 800a53e:	68da      	ldr	r2, [r3, #12]
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	43d9      	mvns	r1, r3
 800a544:	4b3c      	ldr	r3, [pc, #240]	@ (800a638 <HAL_GPIO_DeInit+0x1c0>)
 800a546:	400a      	ands	r2, r1
 800a548:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a54a:	4b3b      	ldr	r3, [pc, #236]	@ (800a638 <HAL_GPIO_DeInit+0x1c0>)
 800a54c:	689a      	ldr	r2, [r3, #8]
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	43d9      	mvns	r1, r3
 800a552:	4b39      	ldr	r3, [pc, #228]	@ (800a638 <HAL_GPIO_DeInit+0x1c0>)
 800a554:	400a      	ands	r2, r1
 800a556:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	2203      	movs	r2, #3
 800a55c:	4013      	ands	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	220f      	movs	r2, #15
 800a562:	409a      	lsls	r2, r3
 800a564:	0013      	movs	r3, r2
 800a566:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a568:	4a2d      	ldr	r2, [pc, #180]	@ (800a620 <HAL_GPIO_DeInit+0x1a8>)
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	089b      	lsrs	r3, r3, #2
 800a56e:	3302      	adds	r3, #2
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	589a      	ldr	r2, [r3, r2]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	43d9      	mvns	r1, r3
 800a578:	4829      	ldr	r0, [pc, #164]	@ (800a620 <HAL_GPIO_DeInit+0x1a8>)
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	089b      	lsrs	r3, r3, #2
 800a57e:	400a      	ands	r2, r1
 800a580:	3302      	adds	r3, #2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	005b      	lsls	r3, r3, #1
 800a58e:	2103      	movs	r1, #3
 800a590:	4099      	lsls	r1, r3
 800a592:	000b      	movs	r3, r1
 800a594:	431a      	orrs	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	08da      	lsrs	r2, r3, #3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	3208      	adds	r2, #8
 800a5a2:	0092      	lsls	r2, r2, #2
 800a5a4:	58d3      	ldr	r3, [r2, r3]
 800a5a6:	697a      	ldr	r2, [r7, #20]
 800a5a8:	2107      	movs	r1, #7
 800a5aa:	400a      	ands	r2, r1
 800a5ac:	0092      	lsls	r2, r2, #2
 800a5ae:	210f      	movs	r1, #15
 800a5b0:	4091      	lsls	r1, r2
 800a5b2:	000a      	movs	r2, r1
 800a5b4:	43d1      	mvns	r1, r2
 800a5b6:	697a      	ldr	r2, [r7, #20]
 800a5b8:	08d2      	lsrs	r2, r2, #3
 800a5ba:	4019      	ands	r1, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	3208      	adds	r2, #8
 800a5c0:	0092      	lsls	r2, r2, #2
 800a5c2:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	697a      	ldr	r2, [r7, #20]
 800a5ca:	0052      	lsls	r2, r2, #1
 800a5cc:	2103      	movs	r1, #3
 800a5ce:	4091      	lsls	r1, r2
 800a5d0:	000a      	movs	r2, r1
 800a5d2:	43d2      	mvns	r2, r2
 800a5d4:	401a      	ands	r2, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	2101      	movs	r1, #1
 800a5e0:	697a      	ldr	r2, [r7, #20]
 800a5e2:	4091      	lsls	r1, r2
 800a5e4:	000a      	movs	r2, r1
 800a5e6:	43d2      	mvns	r2, r2
 800a5e8:	401a      	ands	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	697a      	ldr	r2, [r7, #20]
 800a5f4:	0052      	lsls	r2, r2, #1
 800a5f6:	2103      	movs	r1, #3
 800a5f8:	4091      	lsls	r1, r2
 800a5fa:	000a      	movs	r2, r1
 800a5fc:	43d2      	mvns	r2, r2
 800a5fe:	401a      	ands	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	609a      	str	r2, [r3, #8]
    }
    position++;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	3301      	adds	r3, #1
 800a608:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	40da      	lsrs	r2, r3
 800a610:	1e13      	subs	r3, r2, #0
 800a612:	d000      	beq.n	800a616 <HAL_GPIO_DeInit+0x19e>
 800a614:	e73c      	b.n	800a490 <HAL_GPIO_DeInit+0x18>
  }
}
 800a616:	46c0      	nop			@ (mov r8, r8)
 800a618:	46c0      	nop			@ (mov r8, r8)
 800a61a:	46bd      	mov	sp, r7
 800a61c:	b006      	add	sp, #24
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	40010000 	.word	0x40010000
 800a624:	50000400 	.word	0x50000400
 800a628:	50000800 	.word	0x50000800
 800a62c:	50000c00 	.word	0x50000c00
 800a630:	50001000 	.word	0x50001000
 800a634:	50001c00 	.word	0x50001c00
 800a638:	40010400 	.word	0x40010400

0800a63c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	0008      	movs	r0, r1
 800a646:	0011      	movs	r1, r2
 800a648:	1cbb      	adds	r3, r7, #2
 800a64a:	1c02      	adds	r2, r0, #0
 800a64c:	801a      	strh	r2, [r3, #0]
 800a64e:	1c7b      	adds	r3, r7, #1
 800a650:	1c0a      	adds	r2, r1, #0
 800a652:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a654:	1c7b      	adds	r3, r7, #1
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d004      	beq.n	800a666 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a65c:	1cbb      	adds	r3, r7, #2
 800a65e:	881a      	ldrh	r2, [r3, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800a664:	e003      	b.n	800a66e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800a666:	1cbb      	adds	r3, r7, #2
 800a668:	881a      	ldrh	r2, [r3, #0]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a66e:	46c0      	nop			@ (mov r8, r8)
 800a670:	46bd      	mov	sp, r7
 800a672:	b002      	add	sp, #8
 800a674:	bd80      	pop	{r7, pc}
	...

0800a678 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d101      	bne.n	800a68a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	e082      	b.n	800a790 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2241      	movs	r2, #65	@ 0x41
 800a68e:	5c9b      	ldrb	r3, [r3, r2]
 800a690:	b2db      	uxtb	r3, r3
 800a692:	2b00      	cmp	r3, #0
 800a694:	d107      	bne.n	800a6a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2240      	movs	r2, #64	@ 0x40
 800a69a:	2100      	movs	r1, #0
 800a69c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	0018      	movs	r0, r3
 800a6a2:	f7fa ff81 	bl	80055a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2241      	movs	r2, #65	@ 0x41
 800a6aa:	2124      	movs	r1, #36	@ 0x24
 800a6ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2101      	movs	r1, #1
 800a6ba:	438a      	bics	r2, r1
 800a6bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	685a      	ldr	r2, [r3, #4]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4934      	ldr	r1, [pc, #208]	@ (800a798 <HAL_I2C_Init+0x120>)
 800a6c8:	400a      	ands	r2, r1
 800a6ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	689a      	ldr	r2, [r3, #8]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4931      	ldr	r1, [pc, #196]	@ (800a79c <HAL_I2C_Init+0x124>)
 800a6d8:	400a      	ands	r2, r1
 800a6da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d108      	bne.n	800a6f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	689a      	ldr	r2, [r3, #8]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2180      	movs	r1, #128	@ 0x80
 800a6ee:	0209      	lsls	r1, r1, #8
 800a6f0:	430a      	orrs	r2, r1
 800a6f2:	609a      	str	r2, [r3, #8]
 800a6f4:	e007      	b.n	800a706 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	689a      	ldr	r2, [r3, #8]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2184      	movs	r1, #132	@ 0x84
 800a700:	0209      	lsls	r1, r1, #8
 800a702:	430a      	orrs	r2, r1
 800a704:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d104      	bne.n	800a718 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2280      	movs	r2, #128	@ 0x80
 800a714:	0112      	lsls	r2, r2, #4
 800a716:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	491f      	ldr	r1, [pc, #124]	@ (800a7a0 <HAL_I2C_Init+0x128>)
 800a724:	430a      	orrs	r2, r1
 800a726:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68da      	ldr	r2, [r3, #12]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	491a      	ldr	r1, [pc, #104]	@ (800a79c <HAL_I2C_Init+0x124>)
 800a734:	400a      	ands	r2, r1
 800a736:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	691a      	ldr	r2, [r3, #16]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	695b      	ldr	r3, [r3, #20]
 800a740:	431a      	orrs	r2, r3
 800a742:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	699b      	ldr	r3, [r3, #24]
 800a748:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	430a      	orrs	r2, r1
 800a750:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	69d9      	ldr	r1, [r3, #28]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a1a      	ldr	r2, [r3, #32]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	430a      	orrs	r2, r1
 800a760:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2101      	movs	r1, #1
 800a76e:	430a      	orrs	r2, r1
 800a770:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2241      	movs	r2, #65	@ 0x41
 800a77c:	2120      	movs	r1, #32
 800a77e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2242      	movs	r2, #66	@ 0x42
 800a78a:	2100      	movs	r1, #0
 800a78c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	0018      	movs	r0, r3
 800a792:	46bd      	mov	sp, r7
 800a794:	b002      	add	sp, #8
 800a796:	bd80      	pop	{r7, pc}
 800a798:	f0ffffff 	.word	0xf0ffffff
 800a79c:	ffff7fff 	.word	0xffff7fff
 800a7a0:	02008000 	.word	0x02008000

0800a7a4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800a7a4:	b5b0      	push	{r4, r5, r7, lr}
 800a7a6:	b088      	sub	sp, #32
 800a7a8:	af02      	add	r7, sp, #8
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	0008      	movs	r0, r1
 800a7ae:	607a      	str	r2, [r7, #4]
 800a7b0:	0019      	movs	r1, r3
 800a7b2:	230a      	movs	r3, #10
 800a7b4:	18fb      	adds	r3, r7, r3
 800a7b6:	1c02      	adds	r2, r0, #0
 800a7b8:	801a      	strh	r2, [r3, #0]
 800a7ba:	2308      	movs	r3, #8
 800a7bc:	18fb      	adds	r3, r7, r3
 800a7be:	1c0a      	adds	r2, r1, #0
 800a7c0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2241      	movs	r2, #65	@ 0x41
 800a7c6:	5c9b      	ldrb	r3, [r3, r2]
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	2b20      	cmp	r3, #32
 800a7cc:	d000      	beq.n	800a7d0 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800a7ce:	e0dd      	b.n	800a98c <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	699a      	ldr	r2, [r3, #24]
 800a7d6:	2380      	movs	r3, #128	@ 0x80
 800a7d8:	021b      	lsls	r3, r3, #8
 800a7da:	401a      	ands	r2, r3
 800a7dc:	2380      	movs	r3, #128	@ 0x80
 800a7de:	021b      	lsls	r3, r3, #8
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d101      	bne.n	800a7e8 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	e0d2      	b.n	800a98e <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2240      	movs	r2, #64	@ 0x40
 800a7ec:	5c9b      	ldrb	r3, [r3, r2]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d101      	bne.n	800a7f6 <HAL_I2C_Master_Transmit_DMA+0x52>
 800a7f2:	2302      	movs	r3, #2
 800a7f4:	e0cb      	b.n	800a98e <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2240      	movs	r2, #64	@ 0x40
 800a7fa:	2101      	movs	r1, #1
 800a7fc:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2241      	movs	r2, #65	@ 0x41
 800a802:	2121      	movs	r1, #33	@ 0x21
 800a804:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2242      	movs	r2, #66	@ 0x42
 800a80a:	2110      	movs	r1, #16
 800a80c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2200      	movs	r2, #0
 800a812:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2208      	movs	r2, #8
 800a81e:	18ba      	adds	r2, r7, r2
 800a820:	8812      	ldrh	r2, [r2, #0]
 800a822:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	4a5c      	ldr	r2, [pc, #368]	@ (800a998 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800a828:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	4a5b      	ldr	r2, [pc, #364]	@ (800a99c <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800a82e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a834:	b29b      	uxth	r3, r3
 800a836:	2bff      	cmp	r3, #255	@ 0xff
 800a838:	d906      	bls.n	800a848 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	22ff      	movs	r2, #255	@ 0xff
 800a83e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a840:	2380      	movs	r3, #128	@ 0x80
 800a842:	045b      	lsls	r3, r3, #17
 800a844:	617b      	str	r3, [r7, #20]
 800a846:	e007      	b.n	800a858 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a852:	2380      	movs	r3, #128	@ 0x80
 800a854:	049b      	lsls	r3, r3, #18
 800a856:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d100      	bne.n	800a862 <HAL_I2C_Master_Transmit_DMA+0xbe>
 800a860:	e078      	b.n	800a954 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a866:	2b00      	cmp	r3, #0
 800a868:	d023      	beq.n	800a8b2 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a86e:	4a4c      	ldr	r2, [pc, #304]	@ (800a9a0 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800a870:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a876:	4a4b      	ldr	r2, [pc, #300]	@ (800a9a4 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800a878:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a87e:	2200      	movs	r2, #0
 800a880:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a886:	2200      	movs	r2, #0
 800a888:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a88e:	6879      	ldr	r1, [r7, #4]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	3328      	adds	r3, #40	@ 0x28
 800a896:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800a89c:	2513      	movs	r5, #19
 800a89e:	197c      	adds	r4, r7, r5
 800a8a0:	f7ff fa96 	bl	8009dd0 <HAL_DMA_Start_IT>
 800a8a4:	0003      	movs	r3, r0
 800a8a6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a8a8:	197b      	adds	r3, r7, r5
 800a8aa:	781b      	ldrb	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d13d      	bne.n	800a92c <HAL_I2C_Master_Transmit_DMA+0x188>
 800a8b0:	e013      	b.n	800a8da <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2241      	movs	r2, #65	@ 0x41
 800a8b6:	2120      	movs	r1, #32
 800a8b8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2242      	movs	r2, #66	@ 0x42
 800a8be:	2100      	movs	r1, #0
 800a8c0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8c6:	2280      	movs	r2, #128	@ 0x80
 800a8c8:	431a      	orrs	r2, r3
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2240      	movs	r2, #64	@ 0x40
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e059      	b.n	800a98e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8de:	b2da      	uxtb	r2, r3
 800a8e0:	697c      	ldr	r4, [r7, #20]
 800a8e2:	230a      	movs	r3, #10
 800a8e4:	18fb      	adds	r3, r7, r3
 800a8e6:	8819      	ldrh	r1, [r3, #0]
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	4b2f      	ldr	r3, [pc, #188]	@ (800a9a8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	0023      	movs	r3, r4
 800a8f0:	f001 fd0e 	bl	800c310 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8fe:	1ad3      	subs	r3, r2, r3
 800a900:	b29a      	uxth	r2, r3
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2240      	movs	r2, #64	@ 0x40
 800a90a:	2100      	movs	r1, #0
 800a90c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2110      	movs	r1, #16
 800a912:	0018      	movs	r0, r3
 800a914:	f001 fd36 	bl	800c384 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2180      	movs	r1, #128	@ 0x80
 800a924:	01c9      	lsls	r1, r1, #7
 800a926:	430a      	orrs	r2, r1
 800a928:	601a      	str	r2, [r3, #0]
 800a92a:	e02d      	b.n	800a988 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2241      	movs	r2, #65	@ 0x41
 800a930:	2120      	movs	r1, #32
 800a932:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2242      	movs	r2, #66	@ 0x42
 800a938:	2100      	movs	r1, #0
 800a93a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a940:	2210      	movs	r2, #16
 800a942:	431a      	orrs	r2, r3
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2240      	movs	r2, #64	@ 0x40
 800a94c:	2100      	movs	r1, #0
 800a94e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	e01c      	b.n	800a98e <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	4a15      	ldr	r2, [pc, #84]	@ (800a9ac <HAL_I2C_Master_Transmit_DMA+0x208>)
 800a958:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a95e:	b2da      	uxtb	r2, r3
 800a960:	2380      	movs	r3, #128	@ 0x80
 800a962:	049c      	lsls	r4, r3, #18
 800a964:	230a      	movs	r3, #10
 800a966:	18fb      	adds	r3, r7, r3
 800a968:	8819      	ldrh	r1, [r3, #0]
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	4b0e      	ldr	r3, [pc, #56]	@ (800a9a8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	0023      	movs	r3, r4
 800a972:	f001 fccd 	bl	800c310 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2240      	movs	r2, #64	@ 0x40
 800a97a:	2100      	movs	r1, #0
 800a97c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2101      	movs	r1, #1
 800a982:	0018      	movs	r0, r3
 800a984:	f001 fcfe 	bl	800c384 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800a988:	2300      	movs	r3, #0
 800a98a:	e000      	b.n	800a98e <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a98c:	2302      	movs	r3, #2
  }
}
 800a98e:	0018      	movs	r0, r3
 800a990:	46bd      	mov	sp, r7
 800a992:	b006      	add	sp, #24
 800a994:	bdb0      	pop	{r4, r5, r7, pc}
 800a996:	46c0      	nop			@ (mov r8, r8)
 800a998:	ffff0000 	.word	0xffff0000
 800a99c:	0800b1a9 	.word	0x0800b1a9
 800a9a0:	0800c161 	.word	0x0800c161
 800a9a4:	0800c2a1 	.word	0x0800c2a1
 800a9a8:	80002000 	.word	0x80002000
 800a9ac:	0800ad55 	.word	0x0800ad55

0800a9b0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800a9b0:	b5b0      	push	{r4, r5, r7, lr}
 800a9b2:	b088      	sub	sp, #32
 800a9b4:	af02      	add	r7, sp, #8
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	0008      	movs	r0, r1
 800a9ba:	607a      	str	r2, [r7, #4]
 800a9bc:	0019      	movs	r1, r3
 800a9be:	230a      	movs	r3, #10
 800a9c0:	18fb      	adds	r3, r7, r3
 800a9c2:	1c02      	adds	r2, r0, #0
 800a9c4:	801a      	strh	r2, [r3, #0]
 800a9c6:	2308      	movs	r3, #8
 800a9c8:	18fb      	adds	r3, r7, r3
 800a9ca:	1c0a      	adds	r2, r1, #0
 800a9cc:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2241      	movs	r2, #65	@ 0x41
 800a9d2:	5c9b      	ldrb	r3, [r3, r2]
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b20      	cmp	r3, #32
 800a9d8:	d000      	beq.n	800a9dc <HAL_I2C_Master_Receive_DMA+0x2c>
 800a9da:	e0dd      	b.n	800ab98 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	699a      	ldr	r2, [r3, #24]
 800a9e2:	2380      	movs	r3, #128	@ 0x80
 800a9e4:	021b      	lsls	r3, r3, #8
 800a9e6:	401a      	ands	r2, r3
 800a9e8:	2380      	movs	r3, #128	@ 0x80
 800a9ea:	021b      	lsls	r3, r3, #8
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d101      	bne.n	800a9f4 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	e0d2      	b.n	800ab9a <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2240      	movs	r2, #64	@ 0x40
 800a9f8:	5c9b      	ldrb	r3, [r3, r2]
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d101      	bne.n	800aa02 <HAL_I2C_Master_Receive_DMA+0x52>
 800a9fe:	2302      	movs	r3, #2
 800aa00:	e0cb      	b.n	800ab9a <HAL_I2C_Master_Receive_DMA+0x1ea>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2240      	movs	r2, #64	@ 0x40
 800aa06:	2101      	movs	r1, #1
 800aa08:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2241      	movs	r2, #65	@ 0x41
 800aa0e:	2122      	movs	r1, #34	@ 0x22
 800aa10:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2242      	movs	r2, #66	@ 0x42
 800aa16:	2110      	movs	r1, #16
 800aa18:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2208      	movs	r2, #8
 800aa2a:	18ba      	adds	r2, r7, r2
 800aa2c:	8812      	ldrh	r2, [r2, #0]
 800aa2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	4a5c      	ldr	r2, [pc, #368]	@ (800aba4 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800aa34:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	4a5b      	ldr	r2, [pc, #364]	@ (800aba8 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800aa3a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	2bff      	cmp	r3, #255	@ 0xff
 800aa44:	d906      	bls.n	800aa54 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	22ff      	movs	r2, #255	@ 0xff
 800aa4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800aa4c:	2380      	movs	r3, #128	@ 0x80
 800aa4e:	045b      	lsls	r3, r3, #17
 800aa50:	617b      	str	r3, [r7, #20]
 800aa52:	e007      	b.n	800aa64 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800aa5e:	2380      	movs	r3, #128	@ 0x80
 800aa60:	049b      	lsls	r3, r3, #18
 800aa62:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d100      	bne.n	800aa6e <HAL_I2C_Master_Receive_DMA+0xbe>
 800aa6c:	e078      	b.n	800ab60 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d023      	beq.n	800aabe <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa7a:	4a4c      	ldr	r2, [pc, #304]	@ (800abac <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800aa7c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa82:	4a4b      	ldr	r2, [pc, #300]	@ (800abb0 <HAL_I2C_Master_Receive_DMA+0x200>)
 800aa84:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa92:	2200      	movs	r2, #0
 800aa94:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	3324      	adds	r3, #36	@ 0x24
 800aaa0:	0019      	movs	r1, r3
 800aaa2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800aaa8:	2513      	movs	r5, #19
 800aaaa:	197c      	adds	r4, r7, r5
 800aaac:	f7ff f990 	bl	8009dd0 <HAL_DMA_Start_IT>
 800aab0:	0003      	movs	r3, r0
 800aab2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800aab4:	197b      	adds	r3, r7, r5
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d13d      	bne.n	800ab38 <HAL_I2C_Master_Receive_DMA+0x188>
 800aabc:	e013      	b.n	800aae6 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2241      	movs	r2, #65	@ 0x41
 800aac2:	2120      	movs	r1, #32
 800aac4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2242      	movs	r2, #66	@ 0x42
 800aaca:	2100      	movs	r1, #0
 800aacc:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aad2:	2280      	movs	r2, #128	@ 0x80
 800aad4:	431a      	orrs	r2, r3
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2240      	movs	r2, #64	@ 0x40
 800aade:	2100      	movs	r1, #0
 800aae0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	e059      	b.n	800ab9a <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaea:	b2da      	uxtb	r2, r3
 800aaec:	697c      	ldr	r4, [r7, #20]
 800aaee:	230a      	movs	r3, #10
 800aaf0:	18fb      	adds	r3, r7, r3
 800aaf2:	8819      	ldrh	r1, [r3, #0]
 800aaf4:	68f8      	ldr	r0, [r7, #12]
 800aaf6:	4b2f      	ldr	r3, [pc, #188]	@ (800abb4 <HAL_I2C_Master_Receive_DMA+0x204>)
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	0023      	movs	r3, r4
 800aafc:	f001 fc08 	bl	800c310 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab04:	b29a      	uxth	r2, r3
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	b29a      	uxth	r2, r3
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2240      	movs	r2, #64	@ 0x40
 800ab16:	2100      	movs	r1, #0
 800ab18:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2110      	movs	r1, #16
 800ab1e:	0018      	movs	r0, r3
 800ab20:	f001 fc30 	bl	800c384 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2180      	movs	r1, #128	@ 0x80
 800ab30:	0209      	lsls	r1, r1, #8
 800ab32:	430a      	orrs	r2, r1
 800ab34:	601a      	str	r2, [r3, #0]
 800ab36:	e02d      	b.n	800ab94 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2241      	movs	r2, #65	@ 0x41
 800ab3c:	2120      	movs	r1, #32
 800ab3e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2242      	movs	r2, #66	@ 0x42
 800ab44:	2100      	movs	r1, #0
 800ab46:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab4c:	2210      	movs	r2, #16
 800ab4e:	431a      	orrs	r2, r3
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2240      	movs	r2, #64	@ 0x40
 800ab58:	2100      	movs	r1, #0
 800ab5a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e01c      	b.n	800ab9a <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	4a15      	ldr	r2, [pc, #84]	@ (800abb8 <HAL_I2C_Master_Receive_DMA+0x208>)
 800ab64:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	2380      	movs	r3, #128	@ 0x80
 800ab6e:	049c      	lsls	r4, r3, #18
 800ab70:	230a      	movs	r3, #10
 800ab72:	18fb      	adds	r3, r7, r3
 800ab74:	8819      	ldrh	r1, [r3, #0]
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	4b0e      	ldr	r3, [pc, #56]	@ (800abb4 <HAL_I2C_Master_Receive_DMA+0x204>)
 800ab7a:	9300      	str	r3, [sp, #0]
 800ab7c:	0023      	movs	r3, r4
 800ab7e:	f001 fbc7 	bl	800c310 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2240      	movs	r2, #64	@ 0x40
 800ab86:	2100      	movs	r1, #0
 800ab88:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2101      	movs	r1, #1
 800ab8e:	0018      	movs	r0, r3
 800ab90:	f001 fbf8 	bl	800c384 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800ab94:	2300      	movs	r3, #0
 800ab96:	e000      	b.n	800ab9a <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ab98:	2302      	movs	r3, #2
  }
}
 800ab9a:	0018      	movs	r0, r3
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	b006      	add	sp, #24
 800aba0:	bdb0      	pop	{r4, r5, r7, pc}
 800aba2:	46c0      	nop			@ (mov r8, r8)
 800aba4:	ffff0000 	.word	0xffff0000
 800aba8:	0800b1a9 	.word	0x0800b1a9
 800abac:	0800c201 	.word	0x0800c201
 800abb0:	0800c2a1 	.word	0x0800c2a1
 800abb4:	80002400 	.word	0x80002400
 800abb8:	0800ad55 	.word	0x0800ad55

0800abbc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b084      	sub	sp, #16
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	699b      	ldr	r3, [r3, #24]
 800abca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d005      	beq.n	800abe8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abe0:	68ba      	ldr	r2, [r7, #8]
 800abe2:	68f9      	ldr	r1, [r7, #12]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	4798      	blx	r3
  }
}
 800abe8:	46c0      	nop			@ (mov r8, r8)
 800abea:	46bd      	mov	sp, r7
 800abec:	b004      	add	sp, #16
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	699b      	ldr	r3, [r3, #24]
 800abfe:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	2380      	movs	r3, #128	@ 0x80
 800ac0c:	005b      	lsls	r3, r3, #1
 800ac0e:	4013      	ands	r3, r2
 800ac10:	d00e      	beq.n	800ac30 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	2280      	movs	r2, #128	@ 0x80
 800ac16:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ac18:	d00a      	beq.n	800ac30 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac1e:	2201      	movs	r2, #1
 800ac20:	431a      	orrs	r2, r3
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2280      	movs	r2, #128	@ 0x80
 800ac2c:	0052      	lsls	r2, r2, #1
 800ac2e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	2380      	movs	r3, #128	@ 0x80
 800ac34:	00db      	lsls	r3, r3, #3
 800ac36:	4013      	ands	r3, r2
 800ac38:	d00e      	beq.n	800ac58 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	2280      	movs	r2, #128	@ 0x80
 800ac3e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ac40:	d00a      	beq.n	800ac58 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac46:	2208      	movs	r2, #8
 800ac48:	431a      	orrs	r2, r3
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2280      	movs	r2, #128	@ 0x80
 800ac54:	00d2      	lsls	r2, r2, #3
 800ac56:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ac58:	697a      	ldr	r2, [r7, #20]
 800ac5a:	2380      	movs	r3, #128	@ 0x80
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4013      	ands	r3, r2
 800ac60:	d00e      	beq.n	800ac80 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	2280      	movs	r2, #128	@ 0x80
 800ac66:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ac68:	d00a      	beq.n	800ac80 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac6e:	2202      	movs	r2, #2
 800ac70:	431a      	orrs	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2280      	movs	r2, #128	@ 0x80
 800ac7c:	0092      	lsls	r2, r2, #2
 800ac7e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac84:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	220b      	movs	r2, #11
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	d005      	beq.n	800ac9a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	0011      	movs	r1, r2
 800ac94:	0018      	movs	r0, r3
 800ac96:	f001 f915 	bl	800bec4 <I2C_ITError>
  }
}
 800ac9a:	46c0      	nop			@ (mov r8, r8)
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	b006      	add	sp, #24
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b082      	sub	sp, #8
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800acaa:	46c0      	nop			@ (mov r8, r8)
 800acac:	46bd      	mov	sp, r7
 800acae:	b002      	add	sp, #8
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b082      	sub	sp, #8
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800acba:	46c0      	nop			@ (mov r8, r8)
 800acbc:	46bd      	mov	sp, r7
 800acbe:	b002      	add	sp, #8
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b082      	sub	sp, #8
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800acca:	46c0      	nop			@ (mov r8, r8)
 800accc:	46bd      	mov	sp, r7
 800acce:	b002      	add	sp, #8
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b082      	sub	sp, #8
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800acda:	46c0      	nop			@ (mov r8, r8)
 800acdc:	46bd      	mov	sp, r7
 800acde:	b002      	add	sp, #8
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b082      	sub	sp, #8
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	0008      	movs	r0, r1
 800acec:	0011      	movs	r1, r2
 800acee:	1cfb      	adds	r3, r7, #3
 800acf0:	1c02      	adds	r2, r0, #0
 800acf2:	701a      	strb	r2, [r3, #0]
 800acf4:	003b      	movs	r3, r7
 800acf6:	1c0a      	adds	r2, r1, #0
 800acf8:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800acfa:	46c0      	nop			@ (mov r8, r8)
 800acfc:	46bd      	mov	sp, r7
 800acfe:	b002      	add	sp, #8
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b082      	sub	sp, #8
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ad0a:	46c0      	nop			@ (mov r8, r8)
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	b002      	add	sp, #8
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b082      	sub	sp, #8
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ad1a:	46c0      	nop			@ (mov r8, r8)
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	b002      	add	sp, #8
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800ad2a:	46c0      	nop			@ (mov r8, r8)
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	b002      	add	sp, #8
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b082      	sub	sp, #8
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ad3a:	46c0      	nop			@ (mov r8, r8)
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	b002      	add	sp, #8
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad42:	b580      	push	{r7, lr}
 800ad44:	b082      	sub	sp, #8
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ad4a:	46c0      	nop			@ (mov r8, r8)
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	b002      	add	sp, #8
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800ad54:	b590      	push	{r4, r7, lr}
 800ad56:	b089      	sub	sp, #36	@ 0x24
 800ad58:	af02      	add	r7, sp, #8
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2240      	movs	r2, #64	@ 0x40
 800ad68:	5c9b      	ldrb	r3, [r3, r2]
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d101      	bne.n	800ad72 <I2C_Master_ISR_IT+0x1e>
 800ad6e:	2302      	movs	r3, #2
 800ad70:	e113      	b.n	800af9a <I2C_Master_ISR_IT+0x246>
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2240      	movs	r2, #64	@ 0x40
 800ad76:	2101      	movs	r1, #1
 800ad78:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	2210      	movs	r2, #16
 800ad7e:	4013      	ands	r3, r2
 800ad80:	d012      	beq.n	800ada8 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2210      	movs	r2, #16
 800ad86:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ad88:	d00e      	beq.n	800ada8 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2210      	movs	r2, #16
 800ad90:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad96:	2204      	movs	r2, #4
 800ad98:	431a      	orrs	r2, r3
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	0018      	movs	r0, r3
 800ada2:	f001 f9ba 	bl	800c11a <I2C_Flush_TXDR>
 800ada6:	e0e5      	b.n	800af74 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	2204      	movs	r2, #4
 800adac:	4013      	ands	r3, r2
 800adae:	d021      	beq.n	800adf4 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2204      	movs	r2, #4
 800adb4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800adb6:	d01d      	beq.n	800adf4 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	2204      	movs	r2, #4
 800adbc:	4393      	bics	r3, r2
 800adbe:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adca:	b2d2      	uxtb	r2, r2
 800adcc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add2:	1c5a      	adds	r2, r3, #1
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800addc:	3b01      	subs	r3, #1
 800adde:	b29a      	uxth	r2, r3
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ade8:	b29b      	uxth	r3, r3
 800adea:	3b01      	subs	r3, #1
 800adec:	b29a      	uxth	r2, r3
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800adf2:	e0bf      	b.n	800af74 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	2202      	movs	r2, #2
 800adf8:	4013      	ands	r3, r2
 800adfa:	d01c      	beq.n	800ae36 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2202      	movs	r2, #2
 800ae00:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ae02:	d018      	beq.n	800ae36 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae08:	781a      	ldrb	r2, [r3, #0]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae14:	1c5a      	adds	r2, r3, #1
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae1e:	3b01      	subs	r3, #1
 800ae20:	b29a      	uxth	r2, r3
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ae34:	e09e      	b.n	800af74 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	2280      	movs	r2, #128	@ 0x80
 800ae3a:	4013      	ands	r3, r2
 800ae3c:	d100      	bne.n	800ae40 <I2C_Master_ISR_IT+0xec>
 800ae3e:	e069      	b.n	800af14 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2240      	movs	r2, #64	@ 0x40
 800ae44:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ae46:	d065      	beq.n	800af14 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d04a      	beq.n	800aee8 <I2C_Master_ISR_IT+0x194>
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d146      	bne.n	800aee8 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	b29a      	uxth	r2, r3
 800ae62:	2112      	movs	r1, #18
 800ae64:	187b      	adds	r3, r7, r1
 800ae66:	0592      	lsls	r2, r2, #22
 800ae68:	0d92      	lsrs	r2, r2, #22
 800ae6a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	2bff      	cmp	r3, #255	@ 0xff
 800ae74:	d910      	bls.n	800ae98 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	22ff      	movs	r2, #255	@ 0xff
 800ae7a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	2380      	movs	r3, #128	@ 0x80
 800ae84:	045c      	lsls	r4, r3, #17
 800ae86:	187b      	adds	r3, r7, r1
 800ae88:	8819      	ldrh	r1, [r3, #0]
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	9300      	str	r3, [sp, #0]
 800ae90:	0023      	movs	r3, r4
 800ae92:	f001 fa3d 	bl	800c310 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae96:	e03c      	b.n	800af12 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae9c:	b29a      	uxth	r2, r3
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aea6:	4a3f      	ldr	r2, [pc, #252]	@ (800afa4 <I2C_Master_ISR_IT+0x250>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d00e      	beq.n	800aeca <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aeb0:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800aeb6:	2312      	movs	r3, #18
 800aeb8:	18fb      	adds	r3, r7, r3
 800aeba:	8819      	ldrh	r1, [r3, #0]
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	2300      	movs	r3, #0
 800aec0:	9300      	str	r3, [sp, #0]
 800aec2:	0023      	movs	r3, r4
 800aec4:	f001 fa24 	bl	800c310 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aec8:	e023      	b.n	800af12 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aece:	b2da      	uxtb	r2, r3
 800aed0:	2380      	movs	r3, #128	@ 0x80
 800aed2:	049c      	lsls	r4, r3, #18
 800aed4:	2312      	movs	r3, #18
 800aed6:	18fb      	adds	r3, r7, r3
 800aed8:	8819      	ldrh	r1, [r3, #0]
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	2300      	movs	r3, #0
 800aede:	9300      	str	r3, [sp, #0]
 800aee0:	0023      	movs	r3, r4
 800aee2:	f001 fa15 	bl	800c310 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aee6:	e014      	b.n	800af12 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	685a      	ldr	r2, [r3, #4]
 800aeee:	2380      	movs	r3, #128	@ 0x80
 800aef0:	049b      	lsls	r3, r3, #18
 800aef2:	401a      	ands	r2, r3
 800aef4:	2380      	movs	r3, #128	@ 0x80
 800aef6:	049b      	lsls	r3, r3, #18
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d004      	beq.n	800af06 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	0018      	movs	r0, r3
 800af00:	f000 fcf4 	bl	800b8ec <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800af04:	e036      	b.n	800af74 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2140      	movs	r1, #64	@ 0x40
 800af0a:	0018      	movs	r0, r3
 800af0c:	f000 ffda 	bl	800bec4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800af10:	e030      	b.n	800af74 <I2C_Master_ISR_IT+0x220>
 800af12:	e02f      	b.n	800af74 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	2240      	movs	r2, #64	@ 0x40
 800af18:	4013      	ands	r3, r2
 800af1a:	d02b      	beq.n	800af74 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2240      	movs	r2, #64	@ 0x40
 800af20:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800af22:	d027      	beq.n	800af74 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af28:	b29b      	uxth	r3, r3
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d11d      	bne.n	800af6a <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	685a      	ldr	r2, [r3, #4]
 800af34:	2380      	movs	r3, #128	@ 0x80
 800af36:	049b      	lsls	r3, r3, #18
 800af38:	401a      	ands	r2, r3
 800af3a:	2380      	movs	r3, #128	@ 0x80
 800af3c:	049b      	lsls	r3, r3, #18
 800af3e:	429a      	cmp	r2, r3
 800af40:	d018      	beq.n	800af74 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af46:	4a17      	ldr	r2, [pc, #92]	@ (800afa4 <I2C_Master_ISR_IT+0x250>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d109      	bne.n	800af60 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	685a      	ldr	r2, [r3, #4]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2180      	movs	r1, #128	@ 0x80
 800af58:	01c9      	lsls	r1, r1, #7
 800af5a:	430a      	orrs	r2, r1
 800af5c:	605a      	str	r2, [r3, #4]
 800af5e:	e009      	b.n	800af74 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	0018      	movs	r0, r3
 800af64:	f000 fcc2 	bl	800b8ec <I2C_ITMasterSeqCplt>
 800af68:	e004      	b.n	800af74 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2140      	movs	r1, #64	@ 0x40
 800af6e:	0018      	movs	r0, r3
 800af70:	f000 ffa8 	bl	800bec4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	2220      	movs	r2, #32
 800af78:	4013      	ands	r3, r2
 800af7a:	d009      	beq.n	800af90 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2220      	movs	r2, #32
 800af80:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800af82:	d005      	beq.n	800af90 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	0011      	movs	r1, r2
 800af8a:	0018      	movs	r0, r3
 800af8c:	f000 fd54 	bl	800ba38 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2240      	movs	r2, #64	@ 0x40
 800af94:	2100      	movs	r1, #0
 800af96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	0018      	movs	r0, r3
 800af9c:	46bd      	mov	sp, r7
 800af9e:	b007      	add	sp, #28
 800afa0:	bd90      	pop	{r4, r7, pc}
 800afa2:	46c0      	nop			@ (mov r8, r8)
 800afa4:	ffff0000 	.word	0xffff0000

0800afa8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b086      	sub	sp, #24
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2240      	movs	r2, #64	@ 0x40
 800afc2:	5c9b      	ldrb	r3, [r3, r2]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d101      	bne.n	800afcc <I2C_Slave_ISR_IT+0x24>
 800afc8:	2302      	movs	r3, #2
 800afca:	e0e6      	b.n	800b19a <I2C_Slave_ISR_IT+0x1f2>
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2240      	movs	r2, #64	@ 0x40
 800afd0:	2101      	movs	r1, #1
 800afd2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	2220      	movs	r2, #32
 800afd8:	4013      	ands	r3, r2
 800afda:	d009      	beq.n	800aff0 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2220      	movs	r2, #32
 800afe0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800afe2:	d005      	beq.n	800aff0 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800afe4:	693a      	ldr	r2, [r7, #16]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	0011      	movs	r1, r2
 800afea:	0018      	movs	r0, r3
 800afec:	f000 fdf2 	bl	800bbd4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	2210      	movs	r2, #16
 800aff4:	4013      	ands	r3, r2
 800aff6:	d052      	beq.n	800b09e <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2210      	movs	r2, #16
 800affc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800affe:	d04e      	beq.n	800b09e <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b004:	b29b      	uxth	r3, r3
 800b006:	2b00      	cmp	r3, #0
 800b008:	d12d      	bne.n	800b066 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2241      	movs	r2, #65	@ 0x41
 800b00e:	5c9b      	ldrb	r3, [r3, r2]
 800b010:	b2db      	uxtb	r3, r3
 800b012:	2b28      	cmp	r3, #40	@ 0x28
 800b014:	d10b      	bne.n	800b02e <I2C_Slave_ISR_IT+0x86>
 800b016:	697a      	ldr	r2, [r7, #20]
 800b018:	2380      	movs	r3, #128	@ 0x80
 800b01a:	049b      	lsls	r3, r3, #18
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d106      	bne.n	800b02e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	0011      	movs	r1, r2
 800b026:	0018      	movs	r0, r3
 800b028:	f000 fef4 	bl	800be14 <I2C_ITListenCplt>
 800b02c:	e036      	b.n	800b09c <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2241      	movs	r2, #65	@ 0x41
 800b032:	5c9b      	ldrb	r3, [r3, r2]
 800b034:	b2db      	uxtb	r3, r3
 800b036:	2b29      	cmp	r3, #41	@ 0x29
 800b038:	d110      	bne.n	800b05c <I2C_Slave_ISR_IT+0xb4>
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	4a59      	ldr	r2, [pc, #356]	@ (800b1a4 <I2C_Slave_ISR_IT+0x1fc>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d00c      	beq.n	800b05c <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	2210      	movs	r2, #16
 800b048:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	0018      	movs	r0, r3
 800b04e:	f001 f864 	bl	800c11a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	0018      	movs	r0, r3
 800b056:	f000 fc8b 	bl	800b970 <I2C_ITSlaveSeqCplt>
 800b05a:	e01f      	b.n	800b09c <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2210      	movs	r2, #16
 800b062:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800b064:	e091      	b.n	800b18a <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2210      	movs	r2, #16
 800b06c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b072:	2204      	movs	r2, #4
 800b074:	431a      	orrs	r2, r3
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d005      	beq.n	800b08c <I2C_Slave_ISR_IT+0xe4>
 800b080:	697a      	ldr	r2, [r7, #20]
 800b082:	2380      	movs	r3, #128	@ 0x80
 800b084:	045b      	lsls	r3, r3, #17
 800b086:	429a      	cmp	r2, r3
 800b088:	d000      	beq.n	800b08c <I2C_Slave_ISR_IT+0xe4>
 800b08a:	e07e      	b.n	800b18a <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	0011      	movs	r1, r2
 800b094:	0018      	movs	r0, r3
 800b096:	f000 ff15 	bl	800bec4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b09a:	e076      	b.n	800b18a <I2C_Slave_ISR_IT+0x1e2>
 800b09c:	e075      	b.n	800b18a <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	2204      	movs	r2, #4
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	d02f      	beq.n	800b106 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2204      	movs	r2, #4
 800b0aa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b0ac:	d02b      	beq.n	800b106 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d018      	beq.n	800b0ea <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c2:	b2d2      	uxtb	r2, r2
 800b0c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ca:	1c5a      	adds	r2, r3, #1
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	b29a      	uxth	r2, r3
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d14c      	bne.n	800b18e <I2C_Slave_ISR_IT+0x1e6>
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	4a2b      	ldr	r2, [pc, #172]	@ (800b1a4 <I2C_Slave_ISR_IT+0x1fc>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d048      	beq.n	800b18e <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	0018      	movs	r0, r3
 800b100:	f000 fc36 	bl	800b970 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800b104:	e043      	b.n	800b18e <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	2208      	movs	r2, #8
 800b10a:	4013      	ands	r3, r2
 800b10c:	d00a      	beq.n	800b124 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2208      	movs	r2, #8
 800b112:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b114:	d006      	beq.n	800b124 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800b116:	693a      	ldr	r2, [r7, #16]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	0011      	movs	r1, r2
 800b11c:	0018      	movs	r0, r3
 800b11e:	f000 fb41 	bl	800b7a4 <I2C_ITAddrCplt>
 800b122:	e035      	b.n	800b190 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	2202      	movs	r2, #2
 800b128:	4013      	ands	r3, r2
 800b12a:	d031      	beq.n	800b190 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2202      	movs	r2, #2
 800b130:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b132:	d02d      	beq.n	800b190 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b138:	b29b      	uxth	r3, r3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d018      	beq.n	800b170 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b142:	781a      	ldrb	r2, [r3, #0]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b14e:	1c5a      	adds	r2, r3, #1
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b158:	b29b      	uxth	r3, r3
 800b15a:	3b01      	subs	r3, #1
 800b15c:	b29a      	uxth	r2, r3
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b166:	3b01      	subs	r3, #1
 800b168:	b29a      	uxth	r2, r3
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b16e:	e00f      	b.n	800b190 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b170:	697a      	ldr	r2, [r7, #20]
 800b172:	2380      	movs	r3, #128	@ 0x80
 800b174:	045b      	lsls	r3, r3, #17
 800b176:	429a      	cmp	r2, r3
 800b178:	d002      	beq.n	800b180 <I2C_Slave_ISR_IT+0x1d8>
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d107      	bne.n	800b190 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	0018      	movs	r0, r3
 800b184:	f000 fbf4 	bl	800b970 <I2C_ITSlaveSeqCplt>
 800b188:	e002      	b.n	800b190 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800b18a:	46c0      	nop			@ (mov r8, r8)
 800b18c:	e000      	b.n	800b190 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800b18e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2240      	movs	r2, #64	@ 0x40
 800b194:	2100      	movs	r1, #0
 800b196:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	0018      	movs	r0, r3
 800b19c:	46bd      	mov	sp, r7
 800b19e:	b006      	add	sp, #24
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	46c0      	nop			@ (mov r8, r8)
 800b1a4:	ffff0000 	.word	0xffff0000

0800b1a8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800b1a8:	b590      	push	{r4, r7, lr}
 800b1aa:	b089      	sub	sp, #36	@ 0x24
 800b1ac:	af02      	add	r7, sp, #8
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2240      	movs	r2, #64	@ 0x40
 800b1b8:	5c9b      	ldrb	r3, [r3, r2]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d101      	bne.n	800b1c2 <I2C_Master_ISR_DMA+0x1a>
 800b1be:	2302      	movs	r3, #2
 800b1c0:	e0e7      	b.n	800b392 <I2C_Master_ISR_DMA+0x1ea>
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2240      	movs	r2, #64	@ 0x40
 800b1c6:	2101      	movs	r1, #1
 800b1c8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	2210      	movs	r2, #16
 800b1ce:	4013      	ands	r3, r2
 800b1d0:	d017      	beq.n	800b202 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2210      	movs	r2, #16
 800b1d6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b1d8:	d013      	beq.n	800b202 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2210      	movs	r2, #16
 800b1e0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1e6:	2204      	movs	r2, #4
 800b1e8:	431a      	orrs	r2, r3
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2120      	movs	r1, #32
 800b1f2:	0018      	movs	r0, r3
 800b1f4:	f001 f8c6 	bl	800c384 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	0018      	movs	r0, r3
 800b1fc:	f000 ff8d 	bl	800c11a <I2C_Flush_TXDR>
 800b200:	e0c2      	b.n	800b388 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	2280      	movs	r2, #128	@ 0x80
 800b206:	4013      	ands	r3, r2
 800b208:	d100      	bne.n	800b20c <I2C_Master_ISR_DMA+0x64>
 800b20a:	e07c      	b.n	800b306 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2240      	movs	r2, #64	@ 0x40
 800b210:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b212:	d100      	bne.n	800b216 <I2C_Master_ISR_DMA+0x6e>
 800b214:	e077      	b.n	800b306 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2140      	movs	r1, #64	@ 0x40
 800b222:	438a      	bics	r2, r1
 800b224:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d055      	beq.n	800b2dc <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	b29a      	uxth	r2, r3
 800b238:	2312      	movs	r3, #18
 800b23a:	18fb      	adds	r3, r7, r3
 800b23c:	0592      	lsls	r2, r2, #22
 800b23e:	0d92      	lsrs	r2, r2, #22
 800b240:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b246:	b29b      	uxth	r3, r3
 800b248:	2bff      	cmp	r3, #255	@ 0xff
 800b24a:	d906      	bls.n	800b25a <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	22ff      	movs	r2, #255	@ 0xff
 800b250:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800b252:	2380      	movs	r3, #128	@ 0x80
 800b254:	045b      	lsls	r3, r3, #17
 800b256:	617b      	str	r3, [r7, #20]
 800b258:	e010      	b.n	800b27c <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b25e:	b29a      	uxth	r2, r3
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b268:	4a4c      	ldr	r2, [pc, #304]	@ (800b39c <I2C_Master_ISR_DMA+0x1f4>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d003      	beq.n	800b276 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b272:	617b      	str	r3, [r7, #20]
 800b274:	e002      	b.n	800b27c <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800b276:	2380      	movs	r3, #128	@ 0x80
 800b278:	049b      	lsls	r3, r3, #18
 800b27a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b280:	b2da      	uxtb	r2, r3
 800b282:	697c      	ldr	r4, [r7, #20]
 800b284:	2312      	movs	r3, #18
 800b286:	18fb      	adds	r3, r7, r3
 800b288:	8819      	ldrh	r1, [r3, #0]
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	2300      	movs	r3, #0
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	0023      	movs	r3, r4
 800b292:	f001 f83d 	bl	800c310 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2241      	movs	r2, #65	@ 0x41
 800b2ac:	5c9b      	ldrb	r3, [r3, r2]
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	2b22      	cmp	r3, #34	@ 0x22
 800b2b2:	d109      	bne.n	800b2c8 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2180      	movs	r1, #128	@ 0x80
 800b2c0:	0209      	lsls	r1, r1, #8
 800b2c2:	430a      	orrs	r2, r1
 800b2c4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b2c6:	e05f      	b.n	800b388 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2180      	movs	r1, #128	@ 0x80
 800b2d4:	01c9      	lsls	r1, r1, #7
 800b2d6:	430a      	orrs	r2, r1
 800b2d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b2da:	e055      	b.n	800b388 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	685a      	ldr	r2, [r3, #4]
 800b2e2:	2380      	movs	r3, #128	@ 0x80
 800b2e4:	049b      	lsls	r3, r3, #18
 800b2e6:	401a      	ands	r2, r3
 800b2e8:	2380      	movs	r3, #128	@ 0x80
 800b2ea:	049b      	lsls	r3, r3, #18
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d004      	beq.n	800b2fa <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	0018      	movs	r0, r3
 800b2f4:	f000 fafa 	bl	800b8ec <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800b2f8:	e046      	b.n	800b388 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2140      	movs	r1, #64	@ 0x40
 800b2fe:	0018      	movs	r0, r3
 800b300:	f000 fde0 	bl	800bec4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b304:	e040      	b.n	800b388 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2240      	movs	r2, #64	@ 0x40
 800b30a:	4013      	ands	r3, r2
 800b30c:	d02c      	beq.n	800b368 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2240      	movs	r2, #64	@ 0x40
 800b312:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b314:	d028      	beq.n	800b368 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d11d      	bne.n	800b35c <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	685a      	ldr	r2, [r3, #4]
 800b326:	2380      	movs	r3, #128	@ 0x80
 800b328:	049b      	lsls	r3, r3, #18
 800b32a:	401a      	ands	r2, r3
 800b32c:	2380      	movs	r3, #128	@ 0x80
 800b32e:	049b      	lsls	r3, r3, #18
 800b330:	429a      	cmp	r2, r3
 800b332:	d028      	beq.n	800b386 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b338:	4a18      	ldr	r2, [pc, #96]	@ (800b39c <I2C_Master_ISR_DMA+0x1f4>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d109      	bne.n	800b352 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	685a      	ldr	r2, [r3, #4]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2180      	movs	r1, #128	@ 0x80
 800b34a:	01c9      	lsls	r1, r1, #7
 800b34c:	430a      	orrs	r2, r1
 800b34e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800b350:	e019      	b.n	800b386 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	0018      	movs	r0, r3
 800b356:	f000 fac9 	bl	800b8ec <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800b35a:	e014      	b.n	800b386 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2140      	movs	r1, #64	@ 0x40
 800b360:	0018      	movs	r0, r3
 800b362:	f000 fdaf 	bl	800bec4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b366:	e00e      	b.n	800b386 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	2220      	movs	r2, #32
 800b36c:	4013      	ands	r3, r2
 800b36e:	d00b      	beq.n	800b388 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2220      	movs	r2, #32
 800b374:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b376:	d007      	beq.n	800b388 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b378:	68ba      	ldr	r2, [r7, #8]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	0011      	movs	r1, r2
 800b37e:	0018      	movs	r0, r3
 800b380:	f000 fb5a 	bl	800ba38 <I2C_ITMasterCplt>
 800b384:	e000      	b.n	800b388 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800b386:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2240      	movs	r2, #64	@ 0x40
 800b38c:	2100      	movs	r1, #0
 800b38e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b390:	2300      	movs	r3, #0
}
 800b392:	0018      	movs	r0, r3
 800b394:	46bd      	mov	sp, r7
 800b396:	b007      	add	sp, #28
 800b398:	bd90      	pop	{r4, r7, pc}
 800b39a:	46c0      	nop			@ (mov r8, r8)
 800b39c:	ffff0000 	.word	0xffff0000

0800b3a0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800b3a0:	b590      	push	{r4, r7, lr}
 800b3a2:	b089      	sub	sp, #36	@ 0x24
 800b3a4:	af02      	add	r7, sp, #8
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800b3ac:	4b88      	ldr	r3, [pc, #544]	@ (800b5d0 <I2C_Mem_ISR_DMA+0x230>)
 800b3ae:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2240      	movs	r2, #64	@ 0x40
 800b3b4:	5c9b      	ldrb	r3, [r3, r2]
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d101      	bne.n	800b3be <I2C_Mem_ISR_DMA+0x1e>
 800b3ba:	2302      	movs	r3, #2
 800b3bc:	e104      	b.n	800b5c8 <I2C_Mem_ISR_DMA+0x228>
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2240      	movs	r2, #64	@ 0x40
 800b3c2:	2101      	movs	r1, #1
 800b3c4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	2210      	movs	r2, #16
 800b3ca:	4013      	ands	r3, r2
 800b3cc:	d017      	beq.n	800b3fe <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2210      	movs	r2, #16
 800b3d2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b3d4:	d013      	beq.n	800b3fe <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2210      	movs	r2, #16
 800b3dc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3e2:	2204      	movs	r2, #4
 800b3e4:	431a      	orrs	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2120      	movs	r1, #32
 800b3ee:	0018      	movs	r0, r3
 800b3f0:	f000 ffc8 	bl	800c384 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	0018      	movs	r0, r3
 800b3f8:	f000 fe8f 	bl	800c11a <I2C_Flush_TXDR>
 800b3fc:	e0df      	b.n	800b5be <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	2202      	movs	r2, #2
 800b402:	4013      	ands	r3, r2
 800b404:	d00d      	beq.n	800b422 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2202      	movs	r2, #2
 800b40a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b40c:	d009      	beq.n	800b422 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b416:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2201      	movs	r2, #1
 800b41c:	4252      	negs	r2, r2
 800b41e:	651a      	str	r2, [r3, #80]	@ 0x50
 800b420:	e0cd      	b.n	800b5be <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	2280      	movs	r2, #128	@ 0x80
 800b426:	4013      	ands	r3, r2
 800b428:	d05e      	beq.n	800b4e8 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2240      	movs	r2, #64	@ 0x40
 800b42e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b430:	d05a      	beq.n	800b4e8 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2110      	movs	r1, #16
 800b436:	0018      	movs	r0, r3
 800b438:	f000 ffa4 	bl	800c384 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b440:	b29b      	uxth	r3, r3
 800b442:	2b00      	cmp	r3, #0
 800b444:	d04a      	beq.n	800b4dc <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	2bff      	cmp	r3, #255	@ 0xff
 800b44e:	d910      	bls.n	800b472 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	22ff      	movs	r2, #255	@ 0xff
 800b454:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b45a:	b299      	uxth	r1, r3
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b460:	b2da      	uxtb	r2, r3
 800b462:	2380      	movs	r3, #128	@ 0x80
 800b464:	045b      	lsls	r3, r3, #17
 800b466:	68f8      	ldr	r0, [r7, #12]
 800b468:	2400      	movs	r4, #0
 800b46a:	9400      	str	r4, [sp, #0]
 800b46c:	f000 ff50 	bl	800c310 <I2C_TransferConfig>
 800b470:	e011      	b.n	800b496 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b476:	b29a      	uxth	r2, r3
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b480:	b299      	uxth	r1, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b486:	b2da      	uxtb	r2, r3
 800b488:	2380      	movs	r3, #128	@ 0x80
 800b48a:	049b      	lsls	r3, r3, #18
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	2400      	movs	r4, #0
 800b490:	9400      	str	r4, [sp, #0]
 800b492:	f000 ff3d 	bl	800c310 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b49a:	b29a      	uxth	r2, r3
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4a0:	1ad3      	subs	r3, r2, r3
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2241      	movs	r2, #65	@ 0x41
 800b4ac:	5c9b      	ldrb	r3, [r3, r2]
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	2b22      	cmp	r3, #34	@ 0x22
 800b4b2:	d109      	bne.n	800b4c8 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2180      	movs	r1, #128	@ 0x80
 800b4c0:	0209      	lsls	r1, r1, #8
 800b4c2:	430a      	orrs	r2, r1
 800b4c4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b4c6:	e07a      	b.n	800b5be <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2180      	movs	r1, #128	@ 0x80
 800b4d4:	01c9      	lsls	r1, r1, #7
 800b4d6:	430a      	orrs	r2, r1
 800b4d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b4da:	e070      	b.n	800b5be <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2140      	movs	r1, #64	@ 0x40
 800b4e0:	0018      	movs	r0, r3
 800b4e2:	f000 fcef 	bl	800bec4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b4e6:	e06a      	b.n	800b5be <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	2240      	movs	r2, #64	@ 0x40
 800b4ec:	4013      	ands	r3, r2
 800b4ee:	d058      	beq.n	800b5a2 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2240      	movs	r2, #64	@ 0x40
 800b4f4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b4f6:	d054      	beq.n	800b5a2 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2241      	movs	r2, #65	@ 0x41
 800b4fc:	5c9b      	ldrb	r3, [r3, r2]
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	2b22      	cmp	r3, #34	@ 0x22
 800b502:	d101      	bne.n	800b508 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800b504:	4b33      	ldr	r3, [pc, #204]	@ (800b5d4 <I2C_Mem_ISR_DMA+0x234>)
 800b506:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	2bff      	cmp	r3, #255	@ 0xff
 800b510:	d911      	bls.n	800b536 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	22ff      	movs	r2, #255	@ 0xff
 800b516:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b51c:	b299      	uxth	r1, r3
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b522:	b2da      	uxtb	r2, r3
 800b524:	2380      	movs	r3, #128	@ 0x80
 800b526:	045c      	lsls	r4, r3, #17
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	0023      	movs	r3, r4
 800b530:	f000 feee 	bl	800c310 <I2C_TransferConfig>
 800b534:	e012      	b.n	800b55c <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b544:	b299      	uxth	r1, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b54a:	b2da      	uxtb	r2, r3
 800b54c:	2380      	movs	r3, #128	@ 0x80
 800b54e:	049c      	lsls	r4, r3, #18
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	9300      	str	r3, [sp, #0]
 800b556:	0023      	movs	r3, r4
 800b558:	f000 feda 	bl	800c310 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b560:	b29a      	uxth	r2, r3
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b566:	1ad3      	subs	r3, r2, r3
 800b568:	b29a      	uxth	r2, r3
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2241      	movs	r2, #65	@ 0x41
 800b572:	5c9b      	ldrb	r3, [r3, r2]
 800b574:	b2db      	uxtb	r3, r3
 800b576:	2b22      	cmp	r3, #34	@ 0x22
 800b578:	d109      	bne.n	800b58e <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2180      	movs	r1, #128	@ 0x80
 800b586:	0209      	lsls	r1, r1, #8
 800b588:	430a      	orrs	r2, r1
 800b58a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b58c:	e017      	b.n	800b5be <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2180      	movs	r1, #128	@ 0x80
 800b59a:	01c9      	lsls	r1, r1, #7
 800b59c:	430a      	orrs	r2, r1
 800b59e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b5a0:	e00d      	b.n	800b5be <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	2220      	movs	r2, #32
 800b5a6:	4013      	ands	r3, r2
 800b5a8:	d009      	beq.n	800b5be <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2220      	movs	r2, #32
 800b5ae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b5b0:	d005      	beq.n	800b5be <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b5b2:	68ba      	ldr	r2, [r7, #8]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	0011      	movs	r1, r2
 800b5b8:	0018      	movs	r0, r3
 800b5ba:	f000 fa3d 	bl	800ba38 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2240      	movs	r2, #64	@ 0x40
 800b5c2:	2100      	movs	r1, #0
 800b5c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	0018      	movs	r0, r3
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	b007      	add	sp, #28
 800b5ce:	bd90      	pop	{r4, r7, pc}
 800b5d0:	80002000 	.word	0x80002000
 800b5d4:	80002400 	.word	0x80002400

0800b5d8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b088      	sub	sp, #32
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5e8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2240      	movs	r2, #64	@ 0x40
 800b5f2:	5c9b      	ldrb	r3, [r3, r2]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d101      	bne.n	800b5fc <I2C_Slave_ISR_DMA+0x24>
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	e0cd      	b.n	800b798 <I2C_Slave_ISR_DMA+0x1c0>
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2240      	movs	r2, #64	@ 0x40
 800b600:	2101      	movs	r1, #1
 800b602:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	2220      	movs	r2, #32
 800b608:	4013      	ands	r3, r2
 800b60a:	d009      	beq.n	800b620 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2220      	movs	r2, #32
 800b610:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b612:	d005      	beq.n	800b620 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800b614:	68ba      	ldr	r2, [r7, #8]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	0011      	movs	r1, r2
 800b61a:	0018      	movs	r0, r3
 800b61c:	f000 fada 	bl	800bbd4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	2210      	movs	r2, #16
 800b624:	4013      	ands	r3, r2
 800b626:	d100      	bne.n	800b62a <I2C_Slave_ISR_DMA+0x52>
 800b628:	e0a3      	b.n	800b772 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2210      	movs	r2, #16
 800b62e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b630:	d100      	bne.n	800b634 <I2C_Slave_ISR_DMA+0x5c>
 800b632:	e09e      	b.n	800b772 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	2380      	movs	r3, #128	@ 0x80
 800b638:	01db      	lsls	r3, r3, #7
 800b63a:	4013      	ands	r3, r2
 800b63c:	d105      	bne.n	800b64a <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	2380      	movs	r3, #128	@ 0x80
 800b642:	021b      	lsls	r3, r3, #8
 800b644:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b646:	d100      	bne.n	800b64a <I2C_Slave_ISR_DMA+0x72>
 800b648:	e08c      	b.n	800b764 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00c      	beq.n	800b66c <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	2380      	movs	r3, #128	@ 0x80
 800b656:	021b      	lsls	r3, r3, #8
 800b658:	4013      	ands	r3, r2
 800b65a:	d007      	beq.n	800b66c <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d101      	bne.n	800b66c <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800b668:	2301      	movs	r3, #1
 800b66a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b670:	2b00      	cmp	r3, #0
 800b672:	d00c      	beq.n	800b68e <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	2380      	movs	r3, #128	@ 0x80
 800b678:	01db      	lsls	r3, r3, #7
 800b67a:	4013      	ands	r3, r2
 800b67c:	d007      	beq.n	800b68e <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d101      	bne.n	800b68e <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800b68a:	2301      	movs	r3, #1
 800b68c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800b68e:	69fb      	ldr	r3, [r7, #28]
 800b690:	2b01      	cmp	r3, #1
 800b692:	d12d      	bne.n	800b6f0 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2241      	movs	r2, #65	@ 0x41
 800b698:	5c9b      	ldrb	r3, [r3, r2]
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	2b28      	cmp	r3, #40	@ 0x28
 800b69e:	d10b      	bne.n	800b6b8 <I2C_Slave_ISR_DMA+0xe0>
 800b6a0:	69ba      	ldr	r2, [r7, #24]
 800b6a2:	2380      	movs	r3, #128	@ 0x80
 800b6a4:	049b      	lsls	r3, r3, #18
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d106      	bne.n	800b6b8 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	0011      	movs	r1, r2
 800b6b0:	0018      	movs	r0, r3
 800b6b2:	f000 fbaf 	bl	800be14 <I2C_ITListenCplt>
 800b6b6:	e054      	b.n	800b762 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2241      	movs	r2, #65	@ 0x41
 800b6bc:	5c9b      	ldrb	r3, [r3, r2]
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	2b29      	cmp	r3, #41	@ 0x29
 800b6c2:	d110      	bne.n	800b6e6 <I2C_Slave_ISR_DMA+0x10e>
 800b6c4:	69bb      	ldr	r3, [r7, #24]
 800b6c6:	4a36      	ldr	r2, [pc, #216]	@ (800b7a0 <I2C_Slave_ISR_DMA+0x1c8>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d00c      	beq.n	800b6e6 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2210      	movs	r2, #16
 800b6d2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	0018      	movs	r0, r3
 800b6d8:	f000 fd1f 	bl	800c11a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	0018      	movs	r0, r3
 800b6e0:	f000 f946 	bl	800b970 <I2C_ITSlaveSeqCplt>
 800b6e4:	e03d      	b.n	800b762 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	2210      	movs	r2, #16
 800b6ec:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800b6ee:	e03e      	b.n	800b76e <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2210      	movs	r2, #16
 800b6f6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6fc:	2204      	movs	r2, #4
 800b6fe:	431a      	orrs	r2, r3
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800b704:	2317      	movs	r3, #23
 800b706:	18fb      	adds	r3, r7, r3
 800b708:	68fa      	ldr	r2, [r7, #12]
 800b70a:	2141      	movs	r1, #65	@ 0x41
 800b70c:	5c52      	ldrb	r2, [r2, r1]
 800b70e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d004      	beq.n	800b720 <I2C_Slave_ISR_DMA+0x148>
 800b716:	69ba      	ldr	r2, [r7, #24]
 800b718:	2380      	movs	r3, #128	@ 0x80
 800b71a:	045b      	lsls	r3, r3, #17
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d126      	bne.n	800b76e <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b720:	2217      	movs	r2, #23
 800b722:	18bb      	adds	r3, r7, r2
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	2b21      	cmp	r3, #33	@ 0x21
 800b728:	d003      	beq.n	800b732 <I2C_Slave_ISR_DMA+0x15a>
 800b72a:	18bb      	adds	r3, r7, r2
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	2b29      	cmp	r3, #41	@ 0x29
 800b730:	d103      	bne.n	800b73a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	2221      	movs	r2, #33	@ 0x21
 800b736:	631a      	str	r2, [r3, #48]	@ 0x30
 800b738:	e00b      	b.n	800b752 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b73a:	2217      	movs	r2, #23
 800b73c:	18bb      	adds	r3, r7, r2
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	2b22      	cmp	r3, #34	@ 0x22
 800b742:	d003      	beq.n	800b74c <I2C_Slave_ISR_DMA+0x174>
 800b744:	18bb      	adds	r3, r7, r2
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	2b2a      	cmp	r3, #42	@ 0x2a
 800b74a:	d102      	bne.n	800b752 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2222      	movs	r2, #34	@ 0x22
 800b750:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	0011      	movs	r1, r2
 800b75a:	0018      	movs	r0, r3
 800b75c:	f000 fbb2 	bl	800bec4 <I2C_ITError>
      if (treatdmanack == 1U)
 800b760:	e005      	b.n	800b76e <I2C_Slave_ISR_DMA+0x196>
 800b762:	e004      	b.n	800b76e <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2210      	movs	r2, #16
 800b76a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b76c:	e00f      	b.n	800b78e <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800b76e:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b770:	e00d      	b.n	800b78e <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	2208      	movs	r2, #8
 800b776:	4013      	ands	r3, r2
 800b778:	d009      	beq.n	800b78e <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2208      	movs	r2, #8
 800b77e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b780:	d005      	beq.n	800b78e <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800b782:	68ba      	ldr	r2, [r7, #8]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	0011      	movs	r1, r2
 800b788:	0018      	movs	r0, r3
 800b78a:	f000 f80b 	bl	800b7a4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2240      	movs	r2, #64	@ 0x40
 800b792:	2100      	movs	r1, #0
 800b794:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b796:	2300      	movs	r3, #0
}
 800b798:	0018      	movs	r0, r3
 800b79a:	46bd      	mov	sp, r7
 800b79c:	b008      	add	sp, #32
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	ffff0000 	.word	0xffff0000

0800b7a4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b7a4:	b5b0      	push	{r4, r5, r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2241      	movs	r2, #65	@ 0x41
 800b7b2:	5c9b      	ldrb	r3, [r3, r2]
 800b7b4:	b2db      	uxtb	r3, r3
 800b7b6:	001a      	movs	r2, r3
 800b7b8:	2328      	movs	r3, #40	@ 0x28
 800b7ba:	4013      	ands	r3, r2
 800b7bc:	2b28      	cmp	r3, #40	@ 0x28
 800b7be:	d000      	beq.n	800b7c2 <I2C_ITAddrCplt+0x1e>
 800b7c0:	e088      	b.n	800b8d4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	699b      	ldr	r3, [r3, #24]
 800b7c8:	0c1b      	lsrs	r3, r3, #16
 800b7ca:	b2da      	uxtb	r2, r3
 800b7cc:	250f      	movs	r5, #15
 800b7ce:	197b      	adds	r3, r7, r5
 800b7d0:	2101      	movs	r1, #1
 800b7d2:	400a      	ands	r2, r1
 800b7d4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	699b      	ldr	r3, [r3, #24]
 800b7dc:	0c1b      	lsrs	r3, r3, #16
 800b7de:	b29a      	uxth	r2, r3
 800b7e0:	200c      	movs	r0, #12
 800b7e2:	183b      	adds	r3, r7, r0
 800b7e4:	21fe      	movs	r1, #254	@ 0xfe
 800b7e6:	400a      	ands	r2, r1
 800b7e8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	240a      	movs	r4, #10
 800b7f4:	193b      	adds	r3, r7, r4
 800b7f6:	0592      	lsls	r2, r2, #22
 800b7f8:	0d92      	lsrs	r2, r2, #22
 800b7fa:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	b29a      	uxth	r2, r3
 800b804:	2308      	movs	r3, #8
 800b806:	18fb      	adds	r3, r7, r3
 800b808:	21fe      	movs	r1, #254	@ 0xfe
 800b80a:	400a      	ands	r2, r1
 800b80c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	2b02      	cmp	r3, #2
 800b814:	d148      	bne.n	800b8a8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b816:	0021      	movs	r1, r4
 800b818:	187b      	adds	r3, r7, r1
 800b81a:	881b      	ldrh	r3, [r3, #0]
 800b81c:	09db      	lsrs	r3, r3, #7
 800b81e:	b29a      	uxth	r2, r3
 800b820:	183b      	adds	r3, r7, r0
 800b822:	881b      	ldrh	r3, [r3, #0]
 800b824:	4053      	eors	r3, r2
 800b826:	b29b      	uxth	r3, r3
 800b828:	001a      	movs	r2, r3
 800b82a:	2306      	movs	r3, #6
 800b82c:	4013      	ands	r3, r2
 800b82e:	d120      	bne.n	800b872 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800b830:	183b      	adds	r3, r7, r0
 800b832:	187a      	adds	r2, r7, r1
 800b834:	8812      	ldrh	r2, [r2, #0]
 800b836:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b83c:	1c5a      	adds	r2, r3, #1
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b846:	2b02      	cmp	r3, #2
 800b848:	d14c      	bne.n	800b8e4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2208      	movs	r2, #8
 800b856:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2240      	movs	r2, #64	@ 0x40
 800b85c:	2100      	movs	r1, #0
 800b85e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b860:	183b      	adds	r3, r7, r0
 800b862:	881a      	ldrh	r2, [r3, #0]
 800b864:	197b      	adds	r3, r7, r5
 800b866:	7819      	ldrb	r1, [r3, #0]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	0018      	movs	r0, r3
 800b86c:	f7ff fa39 	bl	800ace2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b870:	e038      	b.n	800b8e4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800b872:	240c      	movs	r4, #12
 800b874:	193b      	adds	r3, r7, r4
 800b876:	2208      	movs	r2, #8
 800b878:	18ba      	adds	r2, r7, r2
 800b87a:	8812      	ldrh	r2, [r2, #0]
 800b87c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b87e:	2380      	movs	r3, #128	@ 0x80
 800b880:	021a      	lsls	r2, r3, #8
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	0011      	movs	r1, r2
 800b886:	0018      	movs	r0, r3
 800b888:	f000 fe0a 	bl	800c4a0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2240      	movs	r2, #64	@ 0x40
 800b890:	2100      	movs	r1, #0
 800b892:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b894:	193b      	adds	r3, r7, r4
 800b896:	881a      	ldrh	r2, [r3, #0]
 800b898:	230f      	movs	r3, #15
 800b89a:	18fb      	adds	r3, r7, r3
 800b89c:	7819      	ldrb	r1, [r3, #0]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	0018      	movs	r0, r3
 800b8a2:	f7ff fa1e 	bl	800ace2 <HAL_I2C_AddrCallback>
}
 800b8a6:	e01d      	b.n	800b8e4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b8a8:	2380      	movs	r3, #128	@ 0x80
 800b8aa:	021a      	lsls	r2, r3, #8
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	0011      	movs	r1, r2
 800b8b0:	0018      	movs	r0, r3
 800b8b2:	f000 fdf5 	bl	800c4a0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2240      	movs	r2, #64	@ 0x40
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b8be:	230c      	movs	r3, #12
 800b8c0:	18fb      	adds	r3, r7, r3
 800b8c2:	881a      	ldrh	r2, [r3, #0]
 800b8c4:	230f      	movs	r3, #15
 800b8c6:	18fb      	adds	r3, r7, r3
 800b8c8:	7819      	ldrb	r1, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	0018      	movs	r0, r3
 800b8ce:	f7ff fa08 	bl	800ace2 <HAL_I2C_AddrCallback>
}
 800b8d2:	e007      	b.n	800b8e4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2208      	movs	r2, #8
 800b8da:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2240      	movs	r2, #64	@ 0x40
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	5499      	strb	r1, [r3, r2]
}
 800b8e4:	46c0      	nop			@ (mov r8, r8)
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	b004      	add	sp, #16
 800b8ea:	bdb0      	pop	{r4, r5, r7, pc}

0800b8ec <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2242      	movs	r2, #66	@ 0x42
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2241      	movs	r2, #65	@ 0x41
 800b900:	5c9b      	ldrb	r3, [r3, r2]
 800b902:	b2db      	uxtb	r3, r3
 800b904:	2b21      	cmp	r3, #33	@ 0x21
 800b906:	d117      	bne.n	800b938 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2241      	movs	r2, #65	@ 0x41
 800b90c:	2120      	movs	r1, #32
 800b90e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2211      	movs	r2, #17
 800b914:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2101      	movs	r1, #1
 800b920:	0018      	movs	r0, r3
 800b922:	f000 fdbd 	bl	800c4a0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2240      	movs	r2, #64	@ 0x40
 800b92a:	2100      	movs	r1, #0
 800b92c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	0018      	movs	r0, r3
 800b932:	f7ff f9b6 	bl	800aca2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b936:	e016      	b.n	800b966 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2241      	movs	r2, #65	@ 0x41
 800b93c:	2120      	movs	r1, #32
 800b93e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2212      	movs	r2, #18
 800b944:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2200      	movs	r2, #0
 800b94a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2102      	movs	r1, #2
 800b950:	0018      	movs	r0, r3
 800b952:	f000 fda5 	bl	800c4a0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2240      	movs	r2, #64	@ 0x40
 800b95a:	2100      	movs	r1, #0
 800b95c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	0018      	movs	r0, r3
 800b962:	f7ff f9a6 	bl	800acb2 <HAL_I2C_MasterRxCpltCallback>
}
 800b966:	46c0      	nop			@ (mov r8, r8)
 800b968:	46bd      	mov	sp, r7
 800b96a:	b002      	add	sp, #8
 800b96c:	bd80      	pop	{r7, pc}
	...

0800b970 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2242      	movs	r2, #66	@ 0x42
 800b984:	2100      	movs	r1, #0
 800b986:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b988:	68fa      	ldr	r2, [r7, #12]
 800b98a:	2380      	movs	r3, #128	@ 0x80
 800b98c:	01db      	lsls	r3, r3, #7
 800b98e:	4013      	ands	r3, r2
 800b990:	d008      	beq.n	800b9a4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4924      	ldr	r1, [pc, #144]	@ (800ba30 <I2C_ITSlaveSeqCplt+0xc0>)
 800b99e:	400a      	ands	r2, r1
 800b9a0:	601a      	str	r2, [r3, #0]
 800b9a2:	e00c      	b.n	800b9be <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	2380      	movs	r3, #128	@ 0x80
 800b9a8:	021b      	lsls	r3, r3, #8
 800b9aa:	4013      	ands	r3, r2
 800b9ac:	d007      	beq.n	800b9be <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	491e      	ldr	r1, [pc, #120]	@ (800ba34 <I2C_ITSlaveSeqCplt+0xc4>)
 800b9ba:	400a      	ands	r2, r1
 800b9bc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2241      	movs	r2, #65	@ 0x41
 800b9c2:	5c9b      	ldrb	r3, [r3, r2]
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	2b29      	cmp	r3, #41	@ 0x29
 800b9c8:	d114      	bne.n	800b9f4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2241      	movs	r2, #65	@ 0x41
 800b9ce:	2128      	movs	r1, #40	@ 0x28
 800b9d0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2221      	movs	r2, #33	@ 0x21
 800b9d6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2101      	movs	r1, #1
 800b9dc:	0018      	movs	r0, r3
 800b9de:	f000 fd5f 	bl	800c4a0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2240      	movs	r2, #64	@ 0x40
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	0018      	movs	r0, r3
 800b9ee:	f7ff f968 	bl	800acc2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b9f2:	e019      	b.n	800ba28 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2241      	movs	r2, #65	@ 0x41
 800b9f8:	5c9b      	ldrb	r3, [r3, r2]
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9fe:	d113      	bne.n	800ba28 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2241      	movs	r2, #65	@ 0x41
 800ba04:	2128      	movs	r1, #40	@ 0x28
 800ba06:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2222      	movs	r2, #34	@ 0x22
 800ba0c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2102      	movs	r1, #2
 800ba12:	0018      	movs	r0, r3
 800ba14:	f000 fd44 	bl	800c4a0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2240      	movs	r2, #64	@ 0x40
 800ba1c:	2100      	movs	r1, #0
 800ba1e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	0018      	movs	r0, r3
 800ba24:	f7ff f955 	bl	800acd2 <HAL_I2C_SlaveRxCpltCallback>
}
 800ba28:	46c0      	nop			@ (mov r8, r8)
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	b004      	add	sp, #16
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	ffffbfff 	.word	0xffffbfff
 800ba34:	ffff7fff 	.word	0xffff7fff

0800ba38 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b086      	sub	sp, #24
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	2220      	movs	r2, #32
 800ba4c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2241      	movs	r2, #65	@ 0x41
 800ba52:	5c9b      	ldrb	r3, [r3, r2]
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	2b21      	cmp	r3, #33	@ 0x21
 800ba58:	d108      	bne.n	800ba6c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2101      	movs	r1, #1
 800ba5e:	0018      	movs	r0, r3
 800ba60:	f000 fd1e 	bl	800c4a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2211      	movs	r2, #17
 800ba68:	631a      	str	r2, [r3, #48]	@ 0x30
 800ba6a:	e00d      	b.n	800ba88 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2241      	movs	r2, #65	@ 0x41
 800ba70:	5c9b      	ldrb	r3, [r3, r2]
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	2b22      	cmp	r3, #34	@ 0x22
 800ba76:	d107      	bne.n	800ba88 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2102      	movs	r1, #2
 800ba7c:	0018      	movs	r0, r3
 800ba7e:	f000 fd0f 	bl	800c4a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2212      	movs	r2, #18
 800ba86:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	685a      	ldr	r2, [r3, #4]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	494e      	ldr	r1, [pc, #312]	@ (800bbcc <I2C_ITMasterCplt+0x194>)
 800ba94:	400a      	ands	r2, r1
 800ba96:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	4a4b      	ldr	r2, [pc, #300]	@ (800bbd0 <I2C_ITMasterCplt+0x198>)
 800baa2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	2210      	movs	r2, #16
 800baa8:	4013      	ands	r3, r2
 800baaa:	d009      	beq.n	800bac0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2210      	movs	r2, #16
 800bab2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bab8:	2204      	movs	r2, #4
 800baba:	431a      	orrs	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2241      	movs	r2, #65	@ 0x41
 800bac4:	5c9b      	ldrb	r3, [r3, r2]
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	2b60      	cmp	r3, #96	@ 0x60
 800baca:	d109      	bne.n	800bae0 <I2C_ITMasterCplt+0xa8>
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	2204      	movs	r2, #4
 800bad0:	4013      	ands	r3, r2
 800bad2:	d005      	beq.n	800bae0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bada:	b2db      	uxtb	r3, r3
 800badc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800bade:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	0018      	movs	r0, r3
 800bae4:	f000 fb19 	bl	800c11a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baec:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2241      	movs	r2, #65	@ 0x41
 800baf2:	5c9b      	ldrb	r3, [r3, r2]
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	2b60      	cmp	r3, #96	@ 0x60
 800baf8:	d002      	beq.n	800bb00 <I2C_ITMasterCplt+0xc8>
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d007      	beq.n	800bb10 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	0011      	movs	r1, r2
 800bb08:	0018      	movs	r0, r3
 800bb0a:	f000 f9db 	bl	800bec4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bb0e:	e058      	b.n	800bbc2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2241      	movs	r2, #65	@ 0x41
 800bb14:	5c9b      	ldrb	r3, [r3, r2]
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	2b21      	cmp	r3, #33	@ 0x21
 800bb1a:	d126      	bne.n	800bb6a <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2241      	movs	r2, #65	@ 0x41
 800bb20:	2120      	movs	r1, #32
 800bb22:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2242      	movs	r2, #66	@ 0x42
 800bb2e:	5c9b      	ldrb	r3, [r3, r2]
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	2b40      	cmp	r3, #64	@ 0x40
 800bb34:	d10c      	bne.n	800bb50 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2242      	movs	r2, #66	@ 0x42
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2240      	movs	r2, #64	@ 0x40
 800bb42:	2100      	movs	r1, #0
 800bb44:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	0018      	movs	r0, r3
 800bb4a:	f7ff f8e2 	bl	800ad12 <HAL_I2C_MemTxCpltCallback>
}
 800bb4e:	e038      	b.n	800bbc2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2242      	movs	r2, #66	@ 0x42
 800bb54:	2100      	movs	r1, #0
 800bb56:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2240      	movs	r2, #64	@ 0x40
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	0018      	movs	r0, r3
 800bb64:	f7ff f89d 	bl	800aca2 <HAL_I2C_MasterTxCpltCallback>
}
 800bb68:	e02b      	b.n	800bbc2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2241      	movs	r2, #65	@ 0x41
 800bb6e:	5c9b      	ldrb	r3, [r3, r2]
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	2b22      	cmp	r3, #34	@ 0x22
 800bb74:	d125      	bne.n	800bbc2 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2241      	movs	r2, #65	@ 0x41
 800bb7a:	2120      	movs	r1, #32
 800bb7c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2200      	movs	r2, #0
 800bb82:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2242      	movs	r2, #66	@ 0x42
 800bb88:	5c9b      	ldrb	r3, [r3, r2]
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	2b40      	cmp	r3, #64	@ 0x40
 800bb8e:	d10c      	bne.n	800bbaa <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2242      	movs	r2, #66	@ 0x42
 800bb94:	2100      	movs	r1, #0
 800bb96:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2240      	movs	r2, #64	@ 0x40
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	0018      	movs	r0, r3
 800bba4:	f7ff f8bd 	bl	800ad22 <HAL_I2C_MemRxCpltCallback>
}
 800bba8:	e00b      	b.n	800bbc2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2242      	movs	r2, #66	@ 0x42
 800bbae:	2100      	movs	r1, #0
 800bbb0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2240      	movs	r2, #64	@ 0x40
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	0018      	movs	r0, r3
 800bbbe:	f7ff f878 	bl	800acb2 <HAL_I2C_MasterRxCpltCallback>
}
 800bbc2:	46c0      	nop			@ (mov r8, r8)
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	b006      	add	sp, #24
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	46c0      	nop			@ (mov r8, r8)
 800bbcc:	fe00e800 	.word	0xfe00e800
 800bbd0:	ffff0000 	.word	0xffff0000

0800bbd4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bbea:	200f      	movs	r0, #15
 800bbec:	183b      	adds	r3, r7, r0
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	2141      	movs	r1, #65	@ 0x41
 800bbf2:	5c52      	ldrb	r2, [r2, r1]
 800bbf4:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	2220      	movs	r2, #32
 800bbfc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bbfe:	183b      	adds	r3, r7, r0
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	2b21      	cmp	r3, #33	@ 0x21
 800bc04:	d003      	beq.n	800bc0e <I2C_ITSlaveCplt+0x3a>
 800bc06:	183b      	adds	r3, r7, r0
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	2b29      	cmp	r3, #41	@ 0x29
 800bc0c:	d109      	bne.n	800bc22 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800bc0e:	4a7b      	ldr	r2, [pc, #492]	@ (800bdfc <I2C_ITSlaveCplt+0x228>)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	0011      	movs	r1, r2
 800bc14:	0018      	movs	r0, r3
 800bc16:	f000 fc43 	bl	800c4a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2221      	movs	r2, #33	@ 0x21
 800bc1e:	631a      	str	r2, [r3, #48]	@ 0x30
 800bc20:	e011      	b.n	800bc46 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bc22:	220f      	movs	r2, #15
 800bc24:	18bb      	adds	r3, r7, r2
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	2b22      	cmp	r3, #34	@ 0x22
 800bc2a:	d003      	beq.n	800bc34 <I2C_ITSlaveCplt+0x60>
 800bc2c:	18bb      	adds	r3, r7, r2
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc32:	d108      	bne.n	800bc46 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800bc34:	4a72      	ldr	r2, [pc, #456]	@ (800be00 <I2C_ITSlaveCplt+0x22c>)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	0011      	movs	r1, r2
 800bc3a:	0018      	movs	r0, r3
 800bc3c:	f000 fc30 	bl	800c4a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2222      	movs	r2, #34	@ 0x22
 800bc44:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2180      	movs	r1, #128	@ 0x80
 800bc52:	0209      	lsls	r1, r1, #8
 800bc54:	430a      	orrs	r2, r1
 800bc56:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	685a      	ldr	r2, [r3, #4]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4968      	ldr	r1, [pc, #416]	@ (800be04 <I2C_ITSlaveCplt+0x230>)
 800bc64:	400a      	ands	r2, r1
 800bc66:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	0018      	movs	r0, r3
 800bc6c:	f000 fa55 	bl	800c11a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bc70:	693a      	ldr	r2, [r7, #16]
 800bc72:	2380      	movs	r3, #128	@ 0x80
 800bc74:	01db      	lsls	r3, r3, #7
 800bc76:	4013      	ands	r3, r2
 800bc78:	d013      	beq.n	800bca2 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4960      	ldr	r1, [pc, #384]	@ (800be08 <I2C_ITSlaveCplt+0x234>)
 800bc86:	400a      	ands	r2, r1
 800bc88:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d01f      	beq.n	800bcd2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bca0:	e017      	b.n	800bcd2 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bca2:	693a      	ldr	r2, [r7, #16]
 800bca4:	2380      	movs	r3, #128	@ 0x80
 800bca6:	021b      	lsls	r3, r3, #8
 800bca8:	4013      	ands	r3, r2
 800bcaa:	d012      	beq.n	800bcd2 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4955      	ldr	r1, [pc, #340]	@ (800be0c <I2C_ITSlaveCplt+0x238>)
 800bcb8:	400a      	ands	r2, r1
 800bcba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d006      	beq.n	800bcd2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	2204      	movs	r2, #4
 800bcd6:	4013      	ands	r3, r2
 800bcd8:	d020      	beq.n	800bd1c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	2204      	movs	r2, #4
 800bcde:	4393      	bics	r3, r2
 800bce0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcec:	b2d2      	uxtb	r2, r2
 800bcee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcf4:	1c5a      	adds	r2, r3, #1
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00c      	beq.n	800bd1c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd06:	3b01      	subs	r3, #1
 800bd08:	b29a      	uxth	r2, r3
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	3b01      	subs	r3, #1
 800bd16:	b29a      	uxth	r2, r3
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d005      	beq.n	800bd32 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd2a:	2204      	movs	r2, #4
 800bd2c:	431a      	orrs	r2, r3
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2242      	movs	r2, #66	@ 0x42
 800bd36:	2100      	movs	r1, #0
 800bd38:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d013      	beq.n	800bd70 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	0011      	movs	r1, r2
 800bd50:	0018      	movs	r0, r3
 800bd52:	f000 f8b7 	bl	800bec4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2241      	movs	r2, #65	@ 0x41
 800bd5a:	5c9b      	ldrb	r3, [r3, r2]
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	2b28      	cmp	r3, #40	@ 0x28
 800bd60:	d147      	bne.n	800bdf2 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800bd62:	697a      	ldr	r2, [r7, #20]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	0011      	movs	r1, r2
 800bd68:	0018      	movs	r0, r3
 800bd6a:	f000 f853 	bl	800be14 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bd6e:	e040      	b.n	800bdf2 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd74:	4a26      	ldr	r2, [pc, #152]	@ (800be10 <I2C_ITSlaveCplt+0x23c>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d016      	beq.n	800bda8 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	0018      	movs	r0, r3
 800bd7e:	f7ff fdf7 	bl	800b970 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	4a22      	ldr	r2, [pc, #136]	@ (800be10 <I2C_ITSlaveCplt+0x23c>)
 800bd86:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2241      	movs	r2, #65	@ 0x41
 800bd8c:	2120      	movs	r1, #32
 800bd8e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2240      	movs	r2, #64	@ 0x40
 800bd9a:	2100      	movs	r1, #0
 800bd9c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	0018      	movs	r0, r3
 800bda2:	f7fe ffae 	bl	800ad02 <HAL_I2C_ListenCpltCallback>
}
 800bda6:	e024      	b.n	800bdf2 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2241      	movs	r2, #65	@ 0x41
 800bdac:	5c9b      	ldrb	r3, [r3, r2]
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	2b22      	cmp	r3, #34	@ 0x22
 800bdb2:	d10f      	bne.n	800bdd4 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2241      	movs	r2, #65	@ 0x41
 800bdb8:	2120      	movs	r1, #32
 800bdba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2240      	movs	r2, #64	@ 0x40
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	0018      	movs	r0, r3
 800bdce:	f7fe ff80 	bl	800acd2 <HAL_I2C_SlaveRxCpltCallback>
}
 800bdd2:	e00e      	b.n	800bdf2 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2241      	movs	r2, #65	@ 0x41
 800bdd8:	2120      	movs	r1, #32
 800bdda:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2200      	movs	r2, #0
 800bde0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2240      	movs	r2, #64	@ 0x40
 800bde6:	2100      	movs	r1, #0
 800bde8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	0018      	movs	r0, r3
 800bdee:	f7fe ff68 	bl	800acc2 <HAL_I2C_SlaveTxCpltCallback>
}
 800bdf2:	46c0      	nop			@ (mov r8, r8)
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	b006      	add	sp, #24
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	46c0      	nop			@ (mov r8, r8)
 800bdfc:	00008001 	.word	0x00008001
 800be00:	00008002 	.word	0x00008002
 800be04:	fe00e800 	.word	0xfe00e800
 800be08:	ffffbfff 	.word	0xffffbfff
 800be0c:	ffff7fff 	.word	0xffff7fff
 800be10:	ffff0000 	.word	0xffff0000

0800be14 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	4a26      	ldr	r2, [pc, #152]	@ (800bebc <I2C_ITListenCplt+0xa8>)
 800be22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2200      	movs	r2, #0
 800be28:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2241      	movs	r2, #65	@ 0x41
 800be2e:	2120      	movs	r1, #32
 800be30:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2242      	movs	r2, #66	@ 0x42
 800be36:	2100      	movs	r1, #0
 800be38:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2200      	movs	r2, #0
 800be3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2204      	movs	r2, #4
 800be44:	4013      	ands	r3, r2
 800be46:	d022      	beq.n	800be8e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be52:	b2d2      	uxtb	r2, r2
 800be54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be5a:	1c5a      	adds	r2, r3, #1
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be64:	2b00      	cmp	r3, #0
 800be66:	d012      	beq.n	800be8e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be6c:	3b01      	subs	r3, #1
 800be6e:	b29a      	uxth	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be78:	b29b      	uxth	r3, r3
 800be7a:	3b01      	subs	r3, #1
 800be7c:	b29a      	uxth	r2, r3
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be86:	2204      	movs	r2, #4
 800be88:	431a      	orrs	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800be8e:	4a0c      	ldr	r2, [pc, #48]	@ (800bec0 <I2C_ITListenCplt+0xac>)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	0011      	movs	r1, r2
 800be94:	0018      	movs	r0, r3
 800be96:	f000 fb03 	bl	800c4a0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2210      	movs	r2, #16
 800bea0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2240      	movs	r2, #64	@ 0x40
 800bea6:	2100      	movs	r1, #0
 800bea8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	0018      	movs	r0, r3
 800beae:	f7fe ff28 	bl	800ad02 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800beb2:	46c0      	nop			@ (mov r8, r8)
 800beb4:	46bd      	mov	sp, r7
 800beb6:	b002      	add	sp, #8
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	46c0      	nop			@ (mov r8, r8)
 800bebc:	ffff0000 	.word	0xffff0000
 800bec0:	00008003 	.word	0x00008003

0800bec4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bece:	200f      	movs	r0, #15
 800bed0:	183b      	adds	r3, r7, r0
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	2141      	movs	r1, #65	@ 0x41
 800bed6:	5c52      	ldrb	r2, [r2, r1]
 800bed8:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2242      	movs	r2, #66	@ 0x42
 800bede:	2100      	movs	r1, #0
 800bee0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4a72      	ldr	r2, [pc, #456]	@ (800c0b0 <I2C_ITError+0x1ec>)
 800bee6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	431a      	orrs	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800befa:	183b      	adds	r3, r7, r0
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	2b28      	cmp	r3, #40	@ 0x28
 800bf00:	d007      	beq.n	800bf12 <I2C_ITError+0x4e>
 800bf02:	183b      	adds	r3, r7, r0
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	2b29      	cmp	r3, #41	@ 0x29
 800bf08:	d003      	beq.n	800bf12 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800bf0a:	183b      	adds	r3, r7, r0
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf10:	d10c      	bne.n	800bf2c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2103      	movs	r1, #3
 800bf16:	0018      	movs	r0, r3
 800bf18:	f000 fac2 	bl	800c4a0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2241      	movs	r2, #65	@ 0x41
 800bf20:	2128      	movs	r1, #40	@ 0x28
 800bf22:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a63      	ldr	r2, [pc, #396]	@ (800c0b4 <I2C_ITError+0x1f0>)
 800bf28:	635a      	str	r2, [r3, #52]	@ 0x34
 800bf2a:	e032      	b.n	800bf92 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bf2c:	4a62      	ldr	r2, [pc, #392]	@ (800c0b8 <I2C_ITError+0x1f4>)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	0011      	movs	r1, r2
 800bf32:	0018      	movs	r0, r3
 800bf34:	f000 fab4 	bl	800c4a0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	0018      	movs	r0, r3
 800bf3c:	f000 f8ed 	bl	800c11a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2241      	movs	r2, #65	@ 0x41
 800bf44:	5c9b      	ldrb	r3, [r3, r2]
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	2b60      	cmp	r3, #96	@ 0x60
 800bf4a:	d01f      	beq.n	800bf8c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2241      	movs	r2, #65	@ 0x41
 800bf50:	2120      	movs	r1, #32
 800bf52:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	699b      	ldr	r3, [r3, #24]
 800bf5a:	2220      	movs	r2, #32
 800bf5c:	4013      	ands	r3, r2
 800bf5e:	2b20      	cmp	r3, #32
 800bf60:	d114      	bne.n	800bf8c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	699b      	ldr	r3, [r3, #24]
 800bf68:	2210      	movs	r2, #16
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	2b10      	cmp	r3, #16
 800bf6e:	d109      	bne.n	800bf84 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2210      	movs	r2, #16
 800bf76:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf7c:	2204      	movs	r2, #4
 800bf7e:	431a      	orrs	r2, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2220      	movs	r2, #32
 800bf8a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf96:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d03b      	beq.n	800c018 <I2C_ITError+0x154>
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	2b11      	cmp	r3, #17
 800bfa4:	d002      	beq.n	800bfac <I2C_ITError+0xe8>
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	2b21      	cmp	r3, #33	@ 0x21
 800bfaa:	d135      	bne.n	800c018 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	2380      	movs	r3, #128	@ 0x80
 800bfb4:	01db      	lsls	r3, r3, #7
 800bfb6:	401a      	ands	r2, r3
 800bfb8:	2380      	movs	r3, #128	@ 0x80
 800bfba:	01db      	lsls	r3, r3, #7
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d107      	bne.n	800bfd0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	493c      	ldr	r1, [pc, #240]	@ (800c0bc <I2C_ITError+0x1f8>)
 800bfcc:	400a      	ands	r2, r1
 800bfce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfd4:	0018      	movs	r0, r3
 800bfd6:	f7fe f896 	bl	800a106 <HAL_DMA_GetState>
 800bfda:	0003      	movs	r3, r0
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d016      	beq.n	800c00e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfe4:	4a36      	ldr	r2, [pc, #216]	@ (800c0c0 <I2C_ITError+0x1fc>)
 800bfe6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2240      	movs	r2, #64	@ 0x40
 800bfec:	2100      	movs	r1, #0
 800bfee:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bff4:	0018      	movs	r0, r3
 800bff6:	f7fd ff91 	bl	8009f1c <HAL_DMA_Abort_IT>
 800bffa:	1e03      	subs	r3, r0, #0
 800bffc:	d051      	beq.n	800c0a2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c002:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c008:	0018      	movs	r0, r3
 800c00a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c00c:	e049      	b.n	800c0a2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	0018      	movs	r0, r3
 800c012:	f000 f859 	bl	800c0c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c016:	e044      	b.n	800c0a2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d03b      	beq.n	800c098 <I2C_ITError+0x1d4>
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	2b12      	cmp	r3, #18
 800c024:	d002      	beq.n	800c02c <I2C_ITError+0x168>
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	2b22      	cmp	r3, #34	@ 0x22
 800c02a:	d135      	bne.n	800c098 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	2380      	movs	r3, #128	@ 0x80
 800c034:	021b      	lsls	r3, r3, #8
 800c036:	401a      	ands	r2, r3
 800c038:	2380      	movs	r3, #128	@ 0x80
 800c03a:	021b      	lsls	r3, r3, #8
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d107      	bne.n	800c050 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681a      	ldr	r2, [r3, #0]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	491e      	ldr	r1, [pc, #120]	@ (800c0c4 <I2C_ITError+0x200>)
 800c04c:	400a      	ands	r2, r1
 800c04e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c054:	0018      	movs	r0, r3
 800c056:	f7fe f856 	bl	800a106 <HAL_DMA_GetState>
 800c05a:	0003      	movs	r3, r0
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d016      	beq.n	800c08e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c064:	4a16      	ldr	r2, [pc, #88]	@ (800c0c0 <I2C_ITError+0x1fc>)
 800c066:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2240      	movs	r2, #64	@ 0x40
 800c06c:	2100      	movs	r1, #0
 800c06e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c074:	0018      	movs	r0, r3
 800c076:	f7fd ff51 	bl	8009f1c <HAL_DMA_Abort_IT>
 800c07a:	1e03      	subs	r3, r0, #0
 800c07c:	d013      	beq.n	800c0a6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c082:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c088:	0018      	movs	r0, r3
 800c08a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c08c:	e00b      	b.n	800c0a6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	0018      	movs	r0, r3
 800c092:	f000 f819 	bl	800c0c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c096:	e006      	b.n	800c0a6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	0018      	movs	r0, r3
 800c09c:	f000 f814 	bl	800c0c8 <I2C_TreatErrorCallback>
  }
}
 800c0a0:	e002      	b.n	800c0a8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c0a2:	46c0      	nop			@ (mov r8, r8)
 800c0a4:	e000      	b.n	800c0a8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c0a6:	46c0      	nop			@ (mov r8, r8)
}
 800c0a8:	46c0      	nop			@ (mov r8, r8)
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	b004      	add	sp, #16
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	ffff0000 	.word	0xffff0000
 800c0b4:	0800afa9 	.word	0x0800afa9
 800c0b8:	00008003 	.word	0x00008003
 800c0bc:	ffffbfff 	.word	0xffffbfff
 800c0c0:	0800c2d3 	.word	0x0800c2d3
 800c0c4:	ffff7fff 	.word	0xffff7fff

0800c0c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2241      	movs	r2, #65	@ 0x41
 800c0d4:	5c9b      	ldrb	r3, [r3, r2]
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	2b60      	cmp	r3, #96	@ 0x60
 800c0da:	d10f      	bne.n	800c0fc <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2241      	movs	r2, #65	@ 0x41
 800c0e0:	2120      	movs	r1, #32
 800c0e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2240      	movs	r2, #64	@ 0x40
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	0018      	movs	r0, r3
 800c0f6:	f7fe fe24 	bl	800ad42 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c0fa:	e00a      	b.n	800c112 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2240      	movs	r2, #64	@ 0x40
 800c106:	2100      	movs	r1, #0
 800c108:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	0018      	movs	r0, r3
 800c10e:	f7fe fe10 	bl	800ad32 <HAL_I2C_ErrorCallback>
}
 800c112:	46c0      	nop			@ (mov r8, r8)
 800c114:	46bd      	mov	sp, r7
 800c116:	b002      	add	sp, #8
 800c118:	bd80      	pop	{r7, pc}

0800c11a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b082      	sub	sp, #8
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	699b      	ldr	r3, [r3, #24]
 800c128:	2202      	movs	r2, #2
 800c12a:	4013      	ands	r3, r2
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	d103      	bne.n	800c138 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2200      	movs	r2, #0
 800c136:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	699b      	ldr	r3, [r3, #24]
 800c13e:	2201      	movs	r2, #1
 800c140:	4013      	ands	r3, r2
 800c142:	2b01      	cmp	r3, #1
 800c144:	d007      	beq.n	800c156 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	699a      	ldr	r2, [r3, #24]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2101      	movs	r1, #1
 800c152:	430a      	orrs	r2, r1
 800c154:	619a      	str	r2, [r3, #24]
  }
}
 800c156:	46c0      	nop			@ (mov r8, r8)
 800c158:	46bd      	mov	sp, r7
 800c15a:	b002      	add	sp, #8
 800c15c:	bd80      	pop	{r7, pc}
	...

0800c160 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c16c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4920      	ldr	r1, [pc, #128]	@ (800c1fc <I2C_DMAMasterTransmitCplt+0x9c>)
 800c17a:	400a      	ands	r2, r1
 800c17c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c182:	b29b      	uxth	r3, r3
 800c184:	2b00      	cmp	r3, #0
 800c186:	d105      	bne.n	800c194 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2120      	movs	r1, #32
 800c18c:	0018      	movs	r0, r3
 800c18e:	f000 f8f9 	bl	800c384 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800c192:	e02e      	b.n	800c1f2 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c198:	68fa      	ldr	r2, [r7, #12]
 800c19a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c19c:	189a      	adds	r2, r3, r2
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	2bff      	cmp	r3, #255	@ 0xff
 800c1aa:	d903      	bls.n	800c1b4 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	22ff      	movs	r2, #255	@ 0xff
 800c1b0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c1b2:	e004      	b.n	800c1be <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1c6:	0019      	movs	r1, r3
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	3328      	adds	r3, #40	@ 0x28
 800c1ce:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800c1d4:	f7fd fdfc 	bl	8009dd0 <HAL_DMA_Start_IT>
 800c1d8:	1e03      	subs	r3, r0, #0
 800c1da:	d005      	beq.n	800c1e8 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2110      	movs	r1, #16
 800c1e0:	0018      	movs	r0, r3
 800c1e2:	f7ff fe6f 	bl	800bec4 <I2C_ITError>
}
 800c1e6:	e004      	b.n	800c1f2 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2140      	movs	r1, #64	@ 0x40
 800c1ec:	0018      	movs	r0, r3
 800c1ee:	f000 f8c9 	bl	800c384 <I2C_Enable_IRQ>
}
 800c1f2:	46c0      	nop			@ (mov r8, r8)
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	b004      	add	sp, #16
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	46c0      	nop			@ (mov r8, r8)
 800c1fc:	ffffbfff 	.word	0xffffbfff

0800c200 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c20c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	681a      	ldr	r2, [r3, #0]
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4920      	ldr	r1, [pc, #128]	@ (800c29c <I2C_DMAMasterReceiveCplt+0x9c>)
 800c21a:	400a      	ands	r2, r1
 800c21c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c222:	b29b      	uxth	r3, r3
 800c224:	2b00      	cmp	r3, #0
 800c226:	d105      	bne.n	800c234 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2120      	movs	r1, #32
 800c22c:	0018      	movs	r0, r3
 800c22e:	f000 f8a9 	bl	800c384 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800c232:	e02e      	b.n	800c292 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c238:	68fa      	ldr	r2, [r7, #12]
 800c23a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c23c:	189a      	adds	r2, r3, r2
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c246:	b29b      	uxth	r3, r3
 800c248:	2bff      	cmp	r3, #255	@ 0xff
 800c24a:	d903      	bls.n	800c254 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	22ff      	movs	r2, #255	@ 0xff
 800c250:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c252:	e004      	b.n	800c25e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c258:	b29a      	uxth	r2, r3
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	3324      	adds	r3, #36	@ 0x24
 800c268:	0019      	movs	r1, r3
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c26e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800c274:	f7fd fdac 	bl	8009dd0 <HAL_DMA_Start_IT>
 800c278:	1e03      	subs	r3, r0, #0
 800c27a:	d005      	beq.n	800c288 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2110      	movs	r1, #16
 800c280:	0018      	movs	r0, r3
 800c282:	f7ff fe1f 	bl	800bec4 <I2C_ITError>
}
 800c286:	e004      	b.n	800c292 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2140      	movs	r1, #64	@ 0x40
 800c28c:	0018      	movs	r0, r3
 800c28e:	f000 f879 	bl	800c384 <I2C_Enable_IRQ>
}
 800c292:	46c0      	nop			@ (mov r8, r8)
 800c294:	46bd      	mov	sp, r7
 800c296:	b004      	add	sp, #16
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	46c0      	nop			@ (mov r8, r8)
 800c29c:	ffff7fff 	.word	0xffff7fff

0800c2a0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2ac:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	685a      	ldr	r2, [r3, #4]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2180      	movs	r1, #128	@ 0x80
 800c2ba:	0209      	lsls	r1, r1, #8
 800c2bc:	430a      	orrs	r2, r1
 800c2be:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2110      	movs	r1, #16
 800c2c4:	0018      	movs	r0, r3
 800c2c6:	f7ff fdfd 	bl	800bec4 <I2C_ITError>
}
 800c2ca:	46c0      	nop			@ (mov r8, r8)
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	b004      	add	sp, #16
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b084      	sub	sp, #16
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2de:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d003      	beq.n	800c2f0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d003      	beq.n	800c300 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	0018      	movs	r0, r3
 800c304:	f7ff fee0 	bl	800c0c8 <I2C_TreatErrorCallback>
}
 800c308:	46c0      	nop			@ (mov r8, r8)
 800c30a:	46bd      	mov	sp, r7
 800c30c:	b004      	add	sp, #16
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c310:	b590      	push	{r4, r7, lr}
 800c312:	b087      	sub	sp, #28
 800c314:	af00      	add	r7, sp, #0
 800c316:	60f8      	str	r0, [r7, #12]
 800c318:	0008      	movs	r0, r1
 800c31a:	0011      	movs	r1, r2
 800c31c:	607b      	str	r3, [r7, #4]
 800c31e:	240a      	movs	r4, #10
 800c320:	193b      	adds	r3, r7, r4
 800c322:	1c02      	adds	r2, r0, #0
 800c324:	801a      	strh	r2, [r3, #0]
 800c326:	2009      	movs	r0, #9
 800c328:	183b      	adds	r3, r7, r0
 800c32a:	1c0a      	adds	r2, r1, #0
 800c32c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c32e:	193b      	adds	r3, r7, r4
 800c330:	881b      	ldrh	r3, [r3, #0]
 800c332:	059b      	lsls	r3, r3, #22
 800c334:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c336:	183b      	adds	r3, r7, r0
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	0419      	lsls	r1, r3, #16
 800c33c:	23ff      	movs	r3, #255	@ 0xff
 800c33e:	041b      	lsls	r3, r3, #16
 800c340:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c342:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c34a:	4313      	orrs	r3, r2
 800c34c:	005b      	lsls	r3, r3, #1
 800c34e:	085b      	lsrs	r3, r3, #1
 800c350:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c35a:	0d51      	lsrs	r1, r2, #21
 800c35c:	2280      	movs	r2, #128	@ 0x80
 800c35e:	00d2      	lsls	r2, r2, #3
 800c360:	400a      	ands	r2, r1
 800c362:	4907      	ldr	r1, [pc, #28]	@ (800c380 <I2C_TransferConfig+0x70>)
 800c364:	430a      	orrs	r2, r1
 800c366:	43d2      	mvns	r2, r2
 800c368:	401a      	ands	r2, r3
 800c36a:	0011      	movs	r1, r2
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	697a      	ldr	r2, [r7, #20]
 800c372:	430a      	orrs	r2, r1
 800c374:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c376:	46c0      	nop			@ (mov r8, r8)
 800c378:	46bd      	mov	sp, r7
 800c37a:	b007      	add	sp, #28
 800c37c:	bd90      	pop	{r4, r7, pc}
 800c37e:	46c0      	nop			@ (mov r8, r8)
 800c380:	03ff63ff 	.word	0x03ff63ff

0800c384 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	000a      	movs	r2, r1
 800c38e:	1cbb      	adds	r3, r7, #2
 800c390:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800c392:	2300      	movs	r3, #0
 800c394:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c39a:	4b3e      	ldr	r3, [pc, #248]	@ (800c494 <I2C_Enable_IRQ+0x110>)
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d035      	beq.n	800c40c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800c3a4:	4b3c      	ldr	r3, [pc, #240]	@ (800c498 <I2C_Enable_IRQ+0x114>)
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d030      	beq.n	800c40c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800c3ae:	4b3b      	ldr	r3, [pc, #236]	@ (800c49c <I2C_Enable_IRQ+0x118>)
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d02b      	beq.n	800c40c <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c3b4:	1cbb      	adds	r3, r7, #2
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	5e9b      	ldrsh	r3, [r3, r2]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	da03      	bge.n	800c3c6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	22b8      	movs	r2, #184	@ 0xb8
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c3c6:	1cbb      	adds	r3, r7, #2
 800c3c8:	881b      	ldrh	r3, [r3, #0]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	4013      	ands	r3, r2
 800c3ce:	d003      	beq.n	800c3d8 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	22f2      	movs	r2, #242	@ 0xf2
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c3d8:	1cbb      	adds	r3, r7, #2
 800c3da:	881b      	ldrh	r3, [r3, #0]
 800c3dc:	2202      	movs	r2, #2
 800c3de:	4013      	ands	r3, r2
 800c3e0:	d003      	beq.n	800c3ea <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	22f4      	movs	r2, #244	@ 0xf4
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c3ea:	1cbb      	adds	r3, r7, #2
 800c3ec:	881b      	ldrh	r3, [r3, #0]
 800c3ee:	2b10      	cmp	r3, #16
 800c3f0:	d103      	bne.n	800c3fa <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2290      	movs	r2, #144	@ 0x90
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c3fa:	1cbb      	adds	r3, r7, #2
 800c3fc:	881b      	ldrh	r3, [r3, #0]
 800c3fe:	2b20      	cmp	r3, #32
 800c400:	d13c      	bne.n	800c47c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2220      	movs	r2, #32
 800c406:	4313      	orrs	r3, r2
 800c408:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c40a:	e037      	b.n	800c47c <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c40c:	1cbb      	adds	r3, r7, #2
 800c40e:	2200      	movs	r2, #0
 800c410:	5e9b      	ldrsh	r3, [r3, r2]
 800c412:	2b00      	cmp	r3, #0
 800c414:	da03      	bge.n	800c41e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	22b8      	movs	r2, #184	@ 0xb8
 800c41a:	4313      	orrs	r3, r2
 800c41c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c41e:	1cbb      	adds	r3, r7, #2
 800c420:	881b      	ldrh	r3, [r3, #0]
 800c422:	2201      	movs	r2, #1
 800c424:	4013      	ands	r3, r2
 800c426:	d003      	beq.n	800c430 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	22f2      	movs	r2, #242	@ 0xf2
 800c42c:	4313      	orrs	r3, r2
 800c42e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c430:	1cbb      	adds	r3, r7, #2
 800c432:	881b      	ldrh	r3, [r3, #0]
 800c434:	2202      	movs	r2, #2
 800c436:	4013      	ands	r3, r2
 800c438:	d003      	beq.n	800c442 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	22f4      	movs	r2, #244	@ 0xf4
 800c43e:	4313      	orrs	r3, r2
 800c440:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c442:	1cbb      	adds	r3, r7, #2
 800c444:	881b      	ldrh	r3, [r3, #0]
 800c446:	2b10      	cmp	r3, #16
 800c448:	d103      	bne.n	800c452 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2290      	movs	r2, #144	@ 0x90
 800c44e:	4313      	orrs	r3, r2
 800c450:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c452:	1cbb      	adds	r3, r7, #2
 800c454:	881b      	ldrh	r3, [r3, #0]
 800c456:	2b20      	cmp	r3, #32
 800c458:	d103      	bne.n	800c462 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	2260      	movs	r2, #96	@ 0x60
 800c45e:	4313      	orrs	r3, r2
 800c460:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c466:	4b0d      	ldr	r3, [pc, #52]	@ (800c49c <I2C_Enable_IRQ+0x118>)
 800c468:	429a      	cmp	r2, r3
 800c46a:	d007      	beq.n	800c47c <I2C_Enable_IRQ+0xf8>
 800c46c:	1cbb      	adds	r3, r7, #2
 800c46e:	881b      	ldrh	r3, [r3, #0]
 800c470:	2b40      	cmp	r3, #64	@ 0x40
 800c472:	d103      	bne.n	800c47c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2240      	movs	r2, #64	@ 0x40
 800c478:	4313      	orrs	r3, r2
 800c47a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	6819      	ldr	r1, [r3, #0]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	430a      	orrs	r2, r1
 800c48a:	601a      	str	r2, [r3, #0]
}
 800c48c:	46c0      	nop			@ (mov r8, r8)
 800c48e:	46bd      	mov	sp, r7
 800c490:	b004      	add	sp, #16
 800c492:	bd80      	pop	{r7, pc}
 800c494:	0800b1a9 	.word	0x0800b1a9
 800c498:	0800b5d9 	.word	0x0800b5d9
 800c49c:	0800b3a1 	.word	0x0800b3a1

0800c4a0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	000a      	movs	r2, r1
 800c4aa:	1cbb      	adds	r3, r7, #2
 800c4ac:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c4b2:	1cbb      	adds	r3, r7, #2
 800c4b4:	881b      	ldrh	r3, [r3, #0]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	4013      	ands	r3, r2
 800c4ba:	d010      	beq.n	800c4de <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2242      	movs	r2, #66	@ 0x42
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2241      	movs	r2, #65	@ 0x41
 800c4c8:	5c9b      	ldrb	r3, [r3, r2]
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	001a      	movs	r2, r3
 800c4ce:	2328      	movs	r3, #40	@ 0x28
 800c4d0:	4013      	ands	r3, r2
 800c4d2:	2b28      	cmp	r3, #40	@ 0x28
 800c4d4:	d003      	beq.n	800c4de <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	22b0      	movs	r2, #176	@ 0xb0
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c4de:	1cbb      	adds	r3, r7, #2
 800c4e0:	881b      	ldrh	r3, [r3, #0]
 800c4e2:	2202      	movs	r2, #2
 800c4e4:	4013      	ands	r3, r2
 800c4e6:	d010      	beq.n	800c50a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2244      	movs	r2, #68	@ 0x44
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2241      	movs	r2, #65	@ 0x41
 800c4f4:	5c9b      	ldrb	r3, [r3, r2]
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	001a      	movs	r2, r3
 800c4fa:	2328      	movs	r3, #40	@ 0x28
 800c4fc:	4013      	ands	r3, r2
 800c4fe:	2b28      	cmp	r3, #40	@ 0x28
 800c500:	d003      	beq.n	800c50a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	22b0      	movs	r2, #176	@ 0xb0
 800c506:	4313      	orrs	r3, r2
 800c508:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c50a:	1cbb      	adds	r3, r7, #2
 800c50c:	2200      	movs	r2, #0
 800c50e:	5e9b      	ldrsh	r3, [r3, r2]
 800c510:	2b00      	cmp	r3, #0
 800c512:	da03      	bge.n	800c51c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	22b8      	movs	r2, #184	@ 0xb8
 800c518:	4313      	orrs	r3, r2
 800c51a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c51c:	1cbb      	adds	r3, r7, #2
 800c51e:	881b      	ldrh	r3, [r3, #0]
 800c520:	2b10      	cmp	r3, #16
 800c522:	d103      	bne.n	800c52c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2290      	movs	r2, #144	@ 0x90
 800c528:	4313      	orrs	r3, r2
 800c52a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c52c:	1cbb      	adds	r3, r7, #2
 800c52e:	881b      	ldrh	r3, [r3, #0]
 800c530:	2b20      	cmp	r3, #32
 800c532:	d103      	bne.n	800c53c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2220      	movs	r2, #32
 800c538:	4313      	orrs	r3, r2
 800c53a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c53c:	1cbb      	adds	r3, r7, #2
 800c53e:	881b      	ldrh	r3, [r3, #0]
 800c540:	2b40      	cmp	r3, #64	@ 0x40
 800c542:	d103      	bne.n	800c54c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2240      	movs	r2, #64	@ 0x40
 800c548:	4313      	orrs	r3, r2
 800c54a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	681a      	ldr	r2, [r3, #0]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	43d9      	mvns	r1, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	400a      	ands	r2, r1
 800c55c:	601a      	str	r2, [r3, #0]
}
 800c55e:	46c0      	nop			@ (mov r8, r8)
 800c560:	46bd      	mov	sp, r7
 800c562:	b004      	add	sp, #16
 800c564:	bd80      	pop	{r7, pc}
	...

0800c568 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2241      	movs	r2, #65	@ 0x41
 800c576:	5c9b      	ldrb	r3, [r3, r2]
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	2b20      	cmp	r3, #32
 800c57c:	d138      	bne.n	800c5f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2240      	movs	r2, #64	@ 0x40
 800c582:	5c9b      	ldrb	r3, [r3, r2]
 800c584:	2b01      	cmp	r3, #1
 800c586:	d101      	bne.n	800c58c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c588:	2302      	movs	r3, #2
 800c58a:	e032      	b.n	800c5f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2240      	movs	r2, #64	@ 0x40
 800c590:	2101      	movs	r1, #1
 800c592:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2241      	movs	r2, #65	@ 0x41
 800c598:	2124      	movs	r1, #36	@ 0x24
 800c59a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2101      	movs	r1, #1
 800c5a8:	438a      	bics	r2, r1
 800c5aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	681a      	ldr	r2, [r3, #0]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4911      	ldr	r1, [pc, #68]	@ (800c5fc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800c5b8:	400a      	ands	r2, r1
 800c5ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6819      	ldr	r1, [r3, #0]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	683a      	ldr	r2, [r7, #0]
 800c5c8:	430a      	orrs	r2, r1
 800c5ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2101      	movs	r1, #1
 800c5d8:	430a      	orrs	r2, r1
 800c5da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2241      	movs	r2, #65	@ 0x41
 800c5e0:	2120      	movs	r1, #32
 800c5e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2240      	movs	r2, #64	@ 0x40
 800c5e8:	2100      	movs	r1, #0
 800c5ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	e000      	b.n	800c5f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c5f0:	2302      	movs	r3, #2
  }
}
 800c5f2:	0018      	movs	r0, r3
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	b002      	add	sp, #8
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	46c0      	nop			@ (mov r8, r8)
 800c5fc:	ffffefff 	.word	0xffffefff

0800c600 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2241      	movs	r2, #65	@ 0x41
 800c60e:	5c9b      	ldrb	r3, [r3, r2]
 800c610:	b2db      	uxtb	r3, r3
 800c612:	2b20      	cmp	r3, #32
 800c614:	d139      	bne.n	800c68a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2240      	movs	r2, #64	@ 0x40
 800c61a:	5c9b      	ldrb	r3, [r3, r2]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d101      	bne.n	800c624 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c620:	2302      	movs	r3, #2
 800c622:	e033      	b.n	800c68c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2240      	movs	r2, #64	@ 0x40
 800c628:	2101      	movs	r1, #1
 800c62a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2241      	movs	r2, #65	@ 0x41
 800c630:	2124      	movs	r1, #36	@ 0x24
 800c632:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	2101      	movs	r1, #1
 800c640:	438a      	bics	r2, r1
 800c642:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	4a11      	ldr	r2, [pc, #68]	@ (800c694 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800c650:	4013      	ands	r3, r2
 800c652:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	021b      	lsls	r3, r3, #8
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	4313      	orrs	r3, r2
 800c65c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	68fa      	ldr	r2, [r7, #12]
 800c664:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2101      	movs	r1, #1
 800c672:	430a      	orrs	r2, r1
 800c674:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2241      	movs	r2, #65	@ 0x41
 800c67a:	2120      	movs	r1, #32
 800c67c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2240      	movs	r2, #64	@ 0x40
 800c682:	2100      	movs	r1, #0
 800c684:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c686:	2300      	movs	r3, #0
 800c688:	e000      	b.n	800c68c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c68a:	2302      	movs	r3, #2
  }
}
 800c68c:	0018      	movs	r0, r3
 800c68e:	46bd      	mov	sp, r7
 800c690:	b004      	add	sp, #16
 800c692:	bd80      	pop	{r7, pc}
 800c694:	fffff0ff 	.word	0xfffff0ff

0800c698 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b088      	sub	sp, #32
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d101      	bne.n	800c6aa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e0e1      	b.n	800c86e <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2235      	movs	r2, #53	@ 0x35
 800c6ae:	5c9b      	ldrb	r3, [r3, r2]
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d107      	bne.n	800c6c6 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2234      	movs	r2, #52	@ 0x34
 800c6ba:	2100      	movs	r1, #0
 800c6bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	0018      	movs	r0, r3
 800c6c2:	f7f9 f873 	bl	80057ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2235      	movs	r2, #53	@ 0x35
 800c6ca:	2102      	movs	r1, #2
 800c6cc:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	69da      	ldr	r2, [r3, #28]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4967      	ldr	r1, [pc, #412]	@ (800c878 <HAL_I2S_Init+0x1e0>)
 800c6da:	400a      	ands	r2, r1
 800c6dc:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2202      	movs	r2, #2
 800c6e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	695b      	ldr	r3, [r3, #20]
 800c6ea:	2b02      	cmp	r3, #2
 800c6ec:	d073      	beq.n	800c7d6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d102      	bne.n	800c6fc <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800c6f6:	2310      	movs	r3, #16
 800c6f8:	617b      	str	r3, [r7, #20]
 800c6fa:	e001      	b.n	800c700 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800c6fc:	2320      	movs	r3, #32
 800c6fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	2b20      	cmp	r3, #32
 800c706:	d802      	bhi.n	800c70e <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	005b      	lsls	r3, r3, #1
 800c70c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800c70e:	f002 fe7f 	bl	800f410 <HAL_RCC_GetSysClockFreq>
 800c712:	0003      	movs	r3, r0
 800c714:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	691a      	ldr	r2, [r3, #16]
 800c71a:	2380      	movs	r3, #128	@ 0x80
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	429a      	cmp	r2, r3
 800c720:	d131      	bne.n	800c786 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	68db      	ldr	r3, [r3, #12]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d016      	beq.n	800c758 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	009b      	lsls	r3, r3, #2
 800c72e:	0019      	movs	r1, r3
 800c730:	68f8      	ldr	r0, [r7, #12]
 800c732:	f7f3 fd05 	bl	8000140 <__udivsi3>
 800c736:	0003      	movs	r3, r0
 800c738:	001a      	movs	r2, r3
 800c73a:	0013      	movs	r3, r2
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	189b      	adds	r3, r3, r2
 800c740:	005b      	lsls	r3, r3, #1
 800c742:	001a      	movs	r2, r3
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	695b      	ldr	r3, [r3, #20]
 800c748:	0019      	movs	r1, r3
 800c74a:	0010      	movs	r0, r2
 800c74c:	f7f3 fcf8 	bl	8000140 <__udivsi3>
 800c750:	0003      	movs	r3, r0
 800c752:	3305      	adds	r3, #5
 800c754:	613b      	str	r3, [r7, #16]
 800c756:	e02a      	b.n	800c7ae <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	00db      	lsls	r3, r3, #3
 800c75c:	0019      	movs	r1, r3
 800c75e:	68f8      	ldr	r0, [r7, #12]
 800c760:	f7f3 fcee 	bl	8000140 <__udivsi3>
 800c764:	0003      	movs	r3, r0
 800c766:	001a      	movs	r2, r3
 800c768:	0013      	movs	r3, r2
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	189b      	adds	r3, r3, r2
 800c76e:	005b      	lsls	r3, r3, #1
 800c770:	001a      	movs	r2, r3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	695b      	ldr	r3, [r3, #20]
 800c776:	0019      	movs	r1, r3
 800c778:	0010      	movs	r0, r2
 800c77a:	f7f3 fce1 	bl	8000140 <__udivsi3>
 800c77e:	0003      	movs	r3, r0
 800c780:	3305      	adds	r3, #5
 800c782:	613b      	str	r3, [r7, #16]
 800c784:	e013      	b.n	800c7ae <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c786:	6979      	ldr	r1, [r7, #20]
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f7f3 fcd9 	bl	8000140 <__udivsi3>
 800c78e:	0003      	movs	r3, r0
 800c790:	001a      	movs	r2, r3
 800c792:	0013      	movs	r3, r2
 800c794:	009b      	lsls	r3, r3, #2
 800c796:	189b      	adds	r3, r3, r2
 800c798:	005b      	lsls	r3, r3, #1
 800c79a:	001a      	movs	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	695b      	ldr	r3, [r3, #20]
 800c7a0:	0019      	movs	r1, r3
 800c7a2:	0010      	movs	r0, r2
 800c7a4:	f7f3 fccc 	bl	8000140 <__udivsi3>
 800c7a8:	0003      	movs	r3, r0
 800c7aa:	3305      	adds	r3, #5
 800c7ac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	210a      	movs	r1, #10
 800c7b2:	0018      	movs	r0, r3
 800c7b4:	f7f3 fcc4 	bl	8000140 <__udivsi3>
 800c7b8:	0003      	movs	r3, r0
 800c7ba:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	4013      	ands	r3, r2
 800c7c2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800c7c4:	693a      	ldr	r2, [r7, #16]
 800c7c6:	69bb      	ldr	r3, [r7, #24]
 800c7c8:	1ad3      	subs	r3, r2, r3
 800c7ca:	085b      	lsrs	r3, r3, #1
 800c7cc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800c7ce:	69bb      	ldr	r3, [r7, #24]
 800c7d0:	021b      	lsls	r3, r3, #8
 800c7d2:	61bb      	str	r3, [r7, #24]
 800c7d4:	e003      	b.n	800c7de <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800c7d6:	2302      	movs	r3, #2
 800c7d8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d902      	bls.n	800c7ea <HAL_I2S_Init+0x152>
 800c7e4:	69fb      	ldr	r3, [r7, #28]
 800c7e6:	2bff      	cmp	r3, #255	@ 0xff
 800c7e8:	d907      	bls.n	800c7fa <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7ee:	2210      	movs	r2, #16
 800c7f0:	431a      	orrs	r2, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e039      	b.n	800c86e <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	691a      	ldr	r2, [r3, #16]
 800c7fe:	69bb      	ldr	r3, [r7, #24]
 800c800:	431a      	orrs	r2, r3
 800c802:	0011      	movs	r1, r2
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	69fa      	ldr	r2, [r7, #28]
 800c80a:	430a      	orrs	r2, r1
 800c80c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	69db      	ldr	r3, [r3, #28]
 800c814:	4a18      	ldr	r2, [pc, #96]	@ (800c878 <HAL_I2S_Init+0x1e0>)
 800c816:	401a      	ands	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6859      	ldr	r1, [r3, #4]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	4319      	orrs	r1, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	4319      	orrs	r1, r3
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	699b      	ldr	r3, [r3, #24]
 800c82c:	430b      	orrs	r3, r1
 800c82e:	431a      	orrs	r2, r3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	2180      	movs	r1, #128	@ 0x80
 800c836:	0109      	lsls	r1, r1, #4
 800c838:	430a      	orrs	r2, r1
 800c83a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	2b30      	cmp	r3, #48	@ 0x30
 800c842:	d003      	beq.n	800c84c <HAL_I2S_Init+0x1b4>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	2bb0      	cmp	r3, #176	@ 0xb0
 800c84a:	d108      	bne.n	800c85e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	69da      	ldr	r2, [r3, #28]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2180      	movs	r1, #128	@ 0x80
 800c858:	0149      	lsls	r1, r1, #5
 800c85a:	430a      	orrs	r2, r1
 800c85c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2235      	movs	r2, #53	@ 0x35
 800c868:	2101      	movs	r1, #1
 800c86a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	0018      	movs	r0, r3
 800c870:	46bd      	mov	sp, r7
 800c872:	b008      	add	sp, #32
 800c874:	bd80      	pop	{r7, pc}
 800c876:	46c0      	nop			@ (mov r8, r8)
 800c878:	fffff040 	.word	0xfffff040

0800c87c <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d101      	bne.n	800c88e <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800c88a:	2301      	movs	r3, #1
 800c88c:	e01b      	b.n	800c8c6 <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2235      	movs	r2, #53	@ 0x35
 800c892:	2102      	movs	r1, #2
 800c894:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	69da      	ldr	r2, [r3, #28]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	490b      	ldr	r1, [pc, #44]	@ (800c8d0 <HAL_I2S_DeInit+0x54>)
 800c8a2:	400a      	ands	r2, r1
 800c8a4:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	0018      	movs	r0, r3
 800c8aa:	f7f8 fff3 	bl	8005894 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2235      	movs	r2, #53	@ 0x35
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2234      	movs	r2, #52	@ 0x34
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c8c4:	2300      	movs	r3, #0
}
 800c8c6:	0018      	movs	r0, r3
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	b002      	add	sp, #8
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	46c0      	nop			@ (mov r8, r8)
 800c8d0:	fffffbff 	.word	0xfffffbff

0800c8d4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b086      	sub	sp, #24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	1dbb      	adds	r3, r7, #6
 800c8e0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d003      	beq.n	800c8f0 <HAL_I2S_Receive_DMA+0x1c>
 800c8e8:	1dbb      	adds	r3, r7, #6
 800c8ea:	881b      	ldrh	r3, [r3, #0]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d101      	bne.n	800c8f4 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e0a6      	b.n	800ca42 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2234      	movs	r2, #52	@ 0x34
 800c8f8:	5c9b      	ldrb	r3, [r3, r2]
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d101      	bne.n	800c904 <HAL_I2S_Receive_DMA+0x30>
 800c900:	2302      	movs	r3, #2
 800c902:	e09e      	b.n	800ca42 <HAL_I2S_Receive_DMA+0x16e>
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2234      	movs	r2, #52	@ 0x34
 800c908:	2101      	movs	r1, #1
 800c90a:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2235      	movs	r2, #53	@ 0x35
 800c910:	5c9b      	ldrb	r3, [r3, r2]
 800c912:	b2db      	uxtb	r3, r3
 800c914:	2b01      	cmp	r3, #1
 800c916:	d005      	beq.n	800c924 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2234      	movs	r2, #52	@ 0x34
 800c91c:	2100      	movs	r1, #0
 800c91e:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800c920:	2302      	movs	r3, #2
 800c922:	e08e      	b.n	800ca42 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2235      	movs	r2, #53	@ 0x35
 800c928:	2104      	movs	r1, #4
 800c92a:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2200      	movs	r2, #0
 800c930:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	69db      	ldr	r3, [r3, #28]
 800c93e:	2207      	movs	r2, #7
 800c940:	4013      	ands	r3, r2
 800c942:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	2b03      	cmp	r3, #3
 800c948:	d002      	beq.n	800c950 <HAL_I2S_Receive_DMA+0x7c>
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	2b05      	cmp	r3, #5
 800c94e:	d10c      	bne.n	800c96a <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800c950:	1dbb      	adds	r3, r7, #6
 800c952:	881b      	ldrh	r3, [r3, #0]
 800c954:	18db      	adds	r3, r3, r3
 800c956:	b29a      	uxth	r2, r3
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800c95c:	1dbb      	adds	r3, r7, #6
 800c95e:	881b      	ldrh	r3, [r3, #0]
 800c960:	18db      	adds	r3, r3, r3
 800c962:	b29a      	uxth	r2, r3
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c968:	e007      	b.n	800c97a <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	1dba      	adds	r2, r7, #6
 800c96e:	8812      	ldrh	r2, [r2, #0]
 800c970:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	1dba      	adds	r2, r7, #6
 800c976:	8812      	ldrh	r2, [r2, #0]
 800c978:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c97e:	4a33      	ldr	r2, [pc, #204]	@ (800ca4c <HAL_I2S_Receive_DMA+0x178>)
 800c980:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c986:	4a32      	ldr	r2, [pc, #200]	@ (800ca50 <HAL_I2S_Receive_DMA+0x17c>)
 800c988:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c98e:	4a31      	ldr	r2, [pc, #196]	@ (800ca54 <HAL_I2S_Receive_DMA+0x180>)
 800c990:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	69da      	ldr	r2, [r3, #28]
 800c998:	23c0      	movs	r3, #192	@ 0xc0
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	401a      	ands	r2, r3
 800c99e:	23c0      	movs	r3, #192	@ 0xc0
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d10a      	bne.n	800c9bc <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	613b      	str	r3, [r7, #16]
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	68db      	ldr	r3, [r3, #12]
 800c9b0:	613b      	str	r3, [r7, #16]
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	613b      	str	r3, [r7, #16]
 800c9ba:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	330c      	adds	r3, #12
 800c9c6:	0019      	movs	r1, r3
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9cc:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800c9d4:	f7fd f9fc 	bl	8009dd0 <HAL_DMA_Start_IT>
 800c9d8:	1e03      	subs	r3, r0, #0
 800c9da:	d00f      	beq.n	800c9fc <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9e0:	2208      	movs	r2, #8
 800c9e2:	431a      	orrs	r2, r3
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2235      	movs	r2, #53	@ 0x35
 800c9ec:	2101      	movs	r1, #1
 800c9ee:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2234      	movs	r2, #52	@ 0x34
 800c9f4:	2100      	movs	r1, #0
 800c9f6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	e022      	b.n	800ca42 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	69da      	ldr	r2, [r3, #28]
 800ca02:	2380      	movs	r3, #128	@ 0x80
 800ca04:	00db      	lsls	r3, r3, #3
 800ca06:	4013      	ands	r3, r2
 800ca08:	d108      	bne.n	800ca1c <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	69da      	ldr	r2, [r3, #28]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	2180      	movs	r1, #128	@ 0x80
 800ca16:	00c9      	lsls	r1, r1, #3
 800ca18:	430a      	orrs	r2, r1
 800ca1a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	2201      	movs	r2, #1
 800ca24:	4013      	ands	r3, r2
 800ca26:	d107      	bne.n	800ca38 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	685a      	ldr	r2, [r3, #4]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2101      	movs	r1, #1
 800ca34:	430a      	orrs	r2, r1
 800ca36:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2234      	movs	r2, #52	@ 0x34
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	0018      	movs	r0, r3
 800ca44:	46bd      	mov	sp, r7
 800ca46:	b006      	add	sp, #24
 800ca48:	bd80      	pop	{r7, pc}
 800ca4a:	46c0      	nop			@ (mov r8, r8)
 800ca4c:	0800cc55 	.word	0x0800cc55
 800ca50:	0800cc11 	.word	0x0800cc11
 800ca54:	0800cc73 	.word	0x0800cc73

0800ca58 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ca60:	2317      	movs	r3, #23
 800ca62:	18fb      	adds	r3, r7, r3
 800ca64:	2200      	movs	r2, #0
 800ca66:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	685a      	ldr	r2, [r3, #4]
 800ca6c:	2380      	movs	r3, #128	@ 0x80
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d003      	beq.n	800ca7c <HAL_I2S_DMAStop+0x24>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d158      	bne.n	800cb2e <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d010      	beq.n	800caa6 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca88:	0018      	movs	r0, r3
 800ca8a:	f7fd fa07 	bl	8009e9c <HAL_DMA_Abort>
 800ca8e:	1e03      	subs	r3, r0, #0
 800ca90:	d009      	beq.n	800caa6 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca96:	2208      	movs	r2, #8
 800ca98:	431a      	orrs	r2, r3
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800ca9e:	2317      	movs	r3, #23
 800caa0:	18fb      	adds	r3, r7, r3
 800caa2:	2201      	movs	r2, #1
 800caa4:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	2364      	movs	r3, #100	@ 0x64
 800caaa:	2201      	movs	r2, #1
 800caac:	2102      	movs	r1, #2
 800caae:	f000 f907 	bl	800ccc0 <I2S_WaitFlagStateUntilTimeout>
 800cab2:	1e03      	subs	r3, r0, #0
 800cab4:	d00d      	beq.n	800cad2 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caba:	2201      	movs	r2, #1
 800cabc:	431a      	orrs	r2, r3
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2235      	movs	r2, #53	@ 0x35
 800cac6:	2101      	movs	r1, #1
 800cac8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800caca:	2317      	movs	r3, #23
 800cacc:	18fb      	adds	r3, r7, r3
 800cace:	2201      	movs	r2, #1
 800cad0:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	2364      	movs	r3, #100	@ 0x64
 800cad6:	2200      	movs	r2, #0
 800cad8:	2180      	movs	r1, #128	@ 0x80
 800cada:	f000 f8f1 	bl	800ccc0 <I2S_WaitFlagStateUntilTimeout>
 800cade:	1e03      	subs	r3, r0, #0
 800cae0:	d00d      	beq.n	800cafe <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cae6:	2201      	movs	r2, #1
 800cae8:	431a      	orrs	r2, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2235      	movs	r2, #53	@ 0x35
 800caf2:	2101      	movs	r1, #1
 800caf4:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800caf6:	2317      	movs	r3, #23
 800caf8:	18fb      	adds	r3, r7, r3
 800cafa:	2201      	movs	r2, #1
 800cafc:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	69da      	ldr	r2, [r3, #28]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4938      	ldr	r1, [pc, #224]	@ (800cbec <HAL_I2S_DMAStop+0x194>)
 800cb0a:	400a      	ands	r2, r1
 800cb0c:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800cb0e:	2300      	movs	r3, #0
 800cb10:	613b      	str	r3, [r7, #16]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	613b      	str	r3, [r7, #16]
 800cb1a:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	685a      	ldr	r2, [r3, #4]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2102      	movs	r1, #2
 800cb28:	438a      	bics	r2, r1
 800cb2a:	605a      	str	r2, [r3, #4]
 800cb2c:	e053      	b.n	800cbd6 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	685a      	ldr	r2, [r3, #4]
 800cb32:	23c0      	movs	r3, #192	@ 0xc0
 800cb34:	009b      	lsls	r3, r3, #2
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d005      	beq.n	800cb46 <HAL_I2S_DMAStop+0xee>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	685a      	ldr	r2, [r3, #4]
 800cb3e:	2380      	movs	r3, #128	@ 0x80
 800cb40:	005b      	lsls	r3, r3, #1
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d147      	bne.n	800cbd6 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d010      	beq.n	800cb70 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb52:	0018      	movs	r0, r3
 800cb54:	f7fd f9a2 	bl	8009e9c <HAL_DMA_Abort>
 800cb58:	1e03      	subs	r3, r0, #0
 800cb5a:	d009      	beq.n	800cb70 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb60:	2208      	movs	r2, #8
 800cb62:	431a      	orrs	r2, r3
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800cb68:	2317      	movs	r3, #23
 800cb6a:	18fb      	adds	r3, r7, r3
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	69da      	ldr	r2, [r3, #28]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	491c      	ldr	r1, [pc, #112]	@ (800cbec <HAL_I2S_DMAStop+0x194>)
 800cb7c:	400a      	ands	r2, r1
 800cb7e:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800cb80:	2300      	movs	r3, #0
 800cb82:	60fb      	str	r3, [r7, #12]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	68db      	ldr	r3, [r3, #12]
 800cb8a:	60fb      	str	r3, [r7, #12]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	60fb      	str	r3, [r7, #12]
 800cb94:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	685a      	ldr	r2, [r3, #4]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2101      	movs	r1, #1
 800cba2:	438a      	bics	r2, r1
 800cba4:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	685a      	ldr	r2, [r3, #4]
 800cbaa:	2380      	movs	r3, #128	@ 0x80
 800cbac:	005b      	lsls	r3, r3, #1
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d10e      	bne.n	800cbd0 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbb6:	2240      	movs	r2, #64	@ 0x40
 800cbb8:	431a      	orrs	r2, r3
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2235      	movs	r2, #53	@ 0x35
 800cbc2:	2101      	movs	r1, #1
 800cbc4:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800cbc6:	2317      	movs	r3, #23
 800cbc8:	18fb      	adds	r3, r7, r3
 800cbca:	2201      	movs	r2, #1
 800cbcc:	701a      	strb	r2, [r3, #0]
 800cbce:	e002      	b.n	800cbd6 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2235      	movs	r2, #53	@ 0x35
 800cbda:	2101      	movs	r1, #1
 800cbdc:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800cbde:	2317      	movs	r3, #23
 800cbe0:	18fb      	adds	r3, r7, r3
 800cbe2:	781b      	ldrb	r3, [r3, #0]
}
 800cbe4:	0018      	movs	r0, r3
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	b006      	add	sp, #24
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	fffffbff 	.word	0xfffffbff

0800cbf0 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800cbf8:	46c0      	nop			@ (mov r8, r8)
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	b002      	add	sp, #8
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800cc08:	46c0      	nop			@ (mov r8, r8)
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	b002      	add	sp, #8
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc1c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	69db      	ldr	r3, [r3, #28]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d10e      	bne.n	800cc44 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	685a      	ldr	r2, [r3, #4]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2101      	movs	r1, #1
 800cc32:	438a      	bics	r2, r1
 800cc34:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2235      	movs	r2, #53	@ 0x35
 800cc40:	2101      	movs	r1, #1
 800cc42:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	0018      	movs	r0, r3
 800cc48:	f7f9 fe98 	bl	800697c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800cc4c:	46c0      	nop			@ (mov r8, r8)
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	b004      	add	sp, #16
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc60:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	0018      	movs	r0, r3
 800cc66:	f7ff ffc3 	bl	800cbf0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800cc6a:	46c0      	nop			@ (mov r8, r8)
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	b004      	add	sp, #16
 800cc70:	bd80      	pop	{r7, pc}

0800cc72 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b084      	sub	sp, #16
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc7e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	685a      	ldr	r2, [r3, #4]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	2103      	movs	r1, #3
 800cc8c:	438a      	bics	r2, r1
 800cc8e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2200      	movs	r2, #0
 800cc94:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2235      	movs	r2, #53	@ 0x35
 800cca0:	2101      	movs	r1, #1
 800cca2:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cca8:	2208      	movs	r2, #8
 800ccaa:	431a      	orrs	r2, r3
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	0018      	movs	r0, r3
 800ccb4:	f7ff ffa4 	bl	800cc00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800ccb8:	46c0      	nop			@ (mov r8, r8)
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	b004      	add	sp, #16
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b086      	sub	sp, #24
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	603b      	str	r3, [r7, #0]
 800cccc:	1dfb      	adds	r3, r7, #7
 800ccce:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800ccd0:	f7fc fb00 	bl	80092d4 <HAL_GetTick>
 800ccd4:	0003      	movs	r3, r0
 800ccd6:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800ccd8:	e017      	b.n	800cd0a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	d014      	beq.n	800cd0a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800cce0:	f7fc faf8 	bl	80092d4 <HAL_GetTick>
 800cce4:	0002      	movs	r2, r0
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	1ad3      	subs	r3, r2, r3
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d902      	bls.n	800ccf6 <I2S_WaitFlagStateUntilTimeout+0x36>
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d109      	bne.n	800cd0a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2235      	movs	r2, #53	@ 0x35
 800ccfa:	2101      	movs	r1, #1
 800ccfc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2234      	movs	r2, #52	@ 0x34
 800cd02:	2100      	movs	r1, #0
 800cd04:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800cd06:	2303      	movs	r3, #3
 800cd08:	e00f      	b.n	800cd2a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	68ba      	ldr	r2, [r7, #8]
 800cd12:	4013      	ands	r3, r2
 800cd14:	68ba      	ldr	r2, [r7, #8]
 800cd16:	1ad3      	subs	r3, r2, r3
 800cd18:	425a      	negs	r2, r3
 800cd1a:	4153      	adcs	r3, r2
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	001a      	movs	r2, r3
 800cd20:	1dfb      	adds	r3, r7, #7
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d1d8      	bne.n	800ccda <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800cd28:	2300      	movs	r3, #0
}
 800cd2a:	0018      	movs	r0, r3
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	b006      	add	sp, #24
 800cd30:	bd80      	pop	{r7, pc}
	...

0800cd34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800cd34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd36:	b08b      	sub	sp, #44	@ 0x2c
 800cd38:	af06      	add	r7, sp, #24
 800cd3a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d101      	bne.n	800cd46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800cd42:	2301      	movs	r3, #1
 800cd44:	e0f0      	b.n	800cf28 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4a79      	ldr	r2, [pc, #484]	@ (800cf30 <HAL_PCD_Init+0x1fc>)
 800cd4a:	5c9b      	ldrb	r3, [r3, r2]
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d108      	bne.n	800cd64 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	23aa      	movs	r3, #170	@ 0xaa
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	2100      	movs	r1, #0
 800cd5a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	0018      	movs	r0, r3
 800cd60:	f008 fd50 	bl	8015804 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	4a72      	ldr	r2, [pc, #456]	@ (800cf30 <HAL_PCD_Init+0x1fc>)
 800cd68:	2103      	movs	r1, #3
 800cd6a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	0018      	movs	r0, r3
 800cd72:	f004 fdd1 	bl	8011918 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cd76:	230f      	movs	r3, #15
 800cd78:	18fb      	adds	r3, r7, r3
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	701a      	strb	r2, [r3, #0]
 800cd7e:	e049      	b.n	800ce14 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800cd80:	200f      	movs	r0, #15
 800cd82:	183b      	adds	r3, r7, r0
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	6879      	ldr	r1, [r7, #4]
 800cd88:	1c5a      	adds	r2, r3, #1
 800cd8a:	0013      	movs	r3, r2
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	189b      	adds	r3, r3, r2
 800cd90:	00db      	lsls	r3, r3, #3
 800cd92:	18cb      	adds	r3, r1, r3
 800cd94:	3301      	adds	r3, #1
 800cd96:	2201      	movs	r2, #1
 800cd98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800cd9a:	183b      	adds	r3, r7, r0
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	6879      	ldr	r1, [r7, #4]
 800cda0:	1c5a      	adds	r2, r3, #1
 800cda2:	0013      	movs	r3, r2
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	189b      	adds	r3, r3, r2
 800cda8:	00db      	lsls	r3, r3, #3
 800cdaa:	183a      	adds	r2, r7, r0
 800cdac:	7812      	ldrb	r2, [r2, #0]
 800cdae:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cdb0:	183b      	adds	r3, r7, r0
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	6879      	ldr	r1, [r7, #4]
 800cdb6:	1c5a      	adds	r2, r3, #1
 800cdb8:	0013      	movs	r3, r2
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	189b      	adds	r3, r3, r2
 800cdbe:	00db      	lsls	r3, r3, #3
 800cdc0:	18cb      	adds	r3, r1, r3
 800cdc2:	3303      	adds	r3, #3
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800cdc8:	183b      	adds	r3, r7, r0
 800cdca:	781a      	ldrb	r2, [r3, #0]
 800cdcc:	6879      	ldr	r1, [r7, #4]
 800cdce:	0013      	movs	r3, r2
 800cdd0:	009b      	lsls	r3, r3, #2
 800cdd2:	189b      	adds	r3, r3, r2
 800cdd4:	00db      	lsls	r3, r3, #3
 800cdd6:	18cb      	adds	r3, r1, r3
 800cdd8:	3338      	adds	r3, #56	@ 0x38
 800cdda:	2200      	movs	r2, #0
 800cddc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800cdde:	183b      	adds	r3, r7, r0
 800cde0:	781a      	ldrb	r2, [r3, #0]
 800cde2:	6879      	ldr	r1, [r7, #4]
 800cde4:	0013      	movs	r3, r2
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	189b      	adds	r3, r3, r2
 800cdea:	00db      	lsls	r3, r3, #3
 800cdec:	18cb      	adds	r3, r1, r3
 800cdee:	333c      	adds	r3, #60	@ 0x3c
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800cdf4:	183b      	adds	r3, r7, r0
 800cdf6:	781a      	ldrb	r2, [r3, #0]
 800cdf8:	6879      	ldr	r1, [r7, #4]
 800cdfa:	0013      	movs	r3, r2
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	189b      	adds	r3, r3, r2
 800ce00:	00db      	lsls	r3, r3, #3
 800ce02:	18cb      	adds	r3, r1, r3
 800ce04:	3340      	adds	r3, #64	@ 0x40
 800ce06:	2200      	movs	r2, #0
 800ce08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce0a:	183b      	adds	r3, r7, r0
 800ce0c:	781a      	ldrb	r2, [r3, #0]
 800ce0e:	183b      	adds	r3, r7, r0
 800ce10:	3201      	adds	r2, #1
 800ce12:	701a      	strb	r2, [r3, #0]
 800ce14:	210f      	movs	r1, #15
 800ce16:	187b      	adds	r3, r7, r1
 800ce18:	781a      	ldrb	r2, [r3, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	685b      	ldr	r3, [r3, #4]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d3ae      	bcc.n	800cd80 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce22:	187b      	adds	r3, r7, r1
 800ce24:	2200      	movs	r2, #0
 800ce26:	701a      	strb	r2, [r3, #0]
 800ce28:	e056      	b.n	800ced8 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ce2a:	240f      	movs	r4, #15
 800ce2c:	193b      	adds	r3, r7, r4
 800ce2e:	781a      	ldrb	r2, [r3, #0]
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	236a      	movs	r3, #106	@ 0x6a
 800ce34:	33ff      	adds	r3, #255	@ 0xff
 800ce36:	0019      	movs	r1, r3
 800ce38:	0013      	movs	r3, r2
 800ce3a:	009b      	lsls	r3, r3, #2
 800ce3c:	189b      	adds	r3, r3, r2
 800ce3e:	00db      	lsls	r3, r3, #3
 800ce40:	18c3      	adds	r3, r0, r3
 800ce42:	185b      	adds	r3, r3, r1
 800ce44:	2200      	movs	r2, #0
 800ce46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ce48:	193b      	adds	r3, r7, r4
 800ce4a:	781a      	ldrb	r2, [r3, #0]
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	23b4      	movs	r3, #180	@ 0xb4
 800ce50:	0059      	lsls	r1, r3, #1
 800ce52:	0013      	movs	r3, r2
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	189b      	adds	r3, r3, r2
 800ce58:	00db      	lsls	r3, r3, #3
 800ce5a:	18c3      	adds	r3, r0, r3
 800ce5c:	185b      	adds	r3, r3, r1
 800ce5e:	193a      	adds	r2, r7, r4
 800ce60:	7812      	ldrb	r2, [r2, #0]
 800ce62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ce64:	193b      	adds	r3, r7, r4
 800ce66:	781a      	ldrb	r2, [r3, #0]
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	236c      	movs	r3, #108	@ 0x6c
 800ce6c:	33ff      	adds	r3, #255	@ 0xff
 800ce6e:	0019      	movs	r1, r3
 800ce70:	0013      	movs	r3, r2
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	189b      	adds	r3, r3, r2
 800ce76:	00db      	lsls	r3, r3, #3
 800ce78:	18c3      	adds	r3, r0, r3
 800ce7a:	185b      	adds	r3, r3, r1
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ce80:	193b      	adds	r3, r7, r4
 800ce82:	781a      	ldrb	r2, [r3, #0]
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	23bc      	movs	r3, #188	@ 0xbc
 800ce88:	0059      	lsls	r1, r3, #1
 800ce8a:	0013      	movs	r3, r2
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	189b      	adds	r3, r3, r2
 800ce90:	00db      	lsls	r3, r3, #3
 800ce92:	18c3      	adds	r3, r0, r3
 800ce94:	185b      	adds	r3, r3, r1
 800ce96:	2200      	movs	r2, #0
 800ce98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ce9a:	193b      	adds	r3, r7, r4
 800ce9c:	781a      	ldrb	r2, [r3, #0]
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	23be      	movs	r3, #190	@ 0xbe
 800cea2:	0059      	lsls	r1, r3, #1
 800cea4:	0013      	movs	r3, r2
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	189b      	adds	r3, r3, r2
 800ceaa:	00db      	lsls	r3, r3, #3
 800ceac:	18c3      	adds	r3, r0, r3
 800ceae:	185b      	adds	r3, r3, r1
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ceb4:	193b      	adds	r3, r7, r4
 800ceb6:	781a      	ldrb	r2, [r3, #0]
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	23c0      	movs	r3, #192	@ 0xc0
 800cebc:	0059      	lsls	r1, r3, #1
 800cebe:	0013      	movs	r3, r2
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	189b      	adds	r3, r3, r2
 800cec4:	00db      	lsls	r3, r3, #3
 800cec6:	18c3      	adds	r3, r0, r3
 800cec8:	185b      	adds	r3, r3, r1
 800ceca:	2200      	movs	r2, #0
 800cecc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cece:	193b      	adds	r3, r7, r4
 800ced0:	781a      	ldrb	r2, [r3, #0]
 800ced2:	193b      	adds	r3, r7, r4
 800ced4:	3201      	adds	r2, #1
 800ced6:	701a      	strb	r2, [r3, #0]
 800ced8:	230f      	movs	r3, #15
 800ceda:	18fb      	adds	r3, r7, r3
 800cedc:	781a      	ldrb	r2, [r3, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d3a1      	bcc.n	800ce2a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6818      	ldr	r0, [r3, #0]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	466a      	mov	r2, sp
 800ceee:	0011      	movs	r1, r2
 800cef0:	001a      	movs	r2, r3
 800cef2:	3210      	adds	r2, #16
 800cef4:	ca70      	ldmia	r2!, {r4, r5, r6}
 800cef6:	c170      	stmia	r1!, {r4, r5, r6}
 800cef8:	ca30      	ldmia	r2!, {r4, r5}
 800cefa:	c130      	stmia	r1!, {r4, r5}
 800cefc:	6859      	ldr	r1, [r3, #4]
 800cefe:	689a      	ldr	r2, [r3, #8]
 800cf00:	68db      	ldr	r3, [r3, #12]
 800cf02:	f004 fd23 	bl	801194c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2224      	movs	r2, #36	@ 0x24
 800cf0a:	2100      	movs	r1, #0
 800cf0c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4a07      	ldr	r2, [pc, #28]	@ (800cf30 <HAL_PCD_Init+0x1fc>)
 800cf12:	2101      	movs	r1, #1
 800cf14:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	69db      	ldr	r3, [r3, #28]
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d103      	bne.n	800cf26 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	0018      	movs	r0, r3
 800cf22:	f001 fd23 	bl	800e96c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800cf26:	2300      	movs	r3, #0
}
 800cf28:	0018      	movs	r0, r3
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	b005      	add	sp, #20
 800cf2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf30:	000002a9 	.word	0x000002a9

0800cf34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	23aa      	movs	r3, #170	@ 0xaa
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	5cd3      	ldrb	r3, [r2, r3]
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d101      	bne.n	800cf4c <HAL_PCD_Start+0x18>
 800cf48:	2302      	movs	r3, #2
 800cf4a:	e014      	b.n	800cf76 <HAL_PCD_Start+0x42>
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	23aa      	movs	r3, #170	@ 0xaa
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	2101      	movs	r1, #1
 800cf54:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	0018      	movs	r0, r3
 800cf5c:	f004 fcc6 	bl	80118ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	0018      	movs	r0, r3
 800cf66:	f006 fcc9 	bl	80138fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	23aa      	movs	r3, #170	@ 0xaa
 800cf6e:	009b      	lsls	r3, r3, #2
 800cf70:	2100      	movs	r1, #0
 800cf72:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800cf74:	2300      	movs	r3, #0
}
 800cf76:	0018      	movs	r0, r3
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	b002      	add	sp, #8
 800cf7c:	bd80      	pop	{r7, pc}
	...

0800cf80 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	0018      	movs	r0, r3
 800cf8e:	f006 fccb 	bl	8013928 <USB_ReadInterrupts>
 800cf92:	0003      	movs	r3, r0
 800cf94:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	2380      	movs	r3, #128	@ 0x80
 800cf9a:	021b      	lsls	r3, r3, #8
 800cf9c:	4013      	ands	r3, r2
 800cf9e:	d004      	beq.n	800cfaa <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	0018      	movs	r0, r3
 800cfa4:	f000 fb62 	bl	800d66c <PCD_EP_ISR_Handler>

    return;
 800cfa8:	e11d      	b.n	800d1e6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	2380      	movs	r3, #128	@ 0x80
 800cfae:	00db      	lsls	r3, r3, #3
 800cfb0:	4013      	ands	r3, r2
 800cfb2:	d015      	beq.n	800cfe0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	2244      	movs	r2, #68	@ 0x44
 800cfba:	5a9b      	ldrh	r3, [r3, r2]
 800cfbc:	b29a      	uxth	r2, r3
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	498a      	ldr	r1, [pc, #552]	@ (800d1ec <HAL_PCD_IRQHandler+0x26c>)
 800cfc4:	400a      	ands	r2, r1
 800cfc6:	b291      	uxth	r1, r2
 800cfc8:	2244      	movs	r2, #68	@ 0x44
 800cfca:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	0018      	movs	r0, r3
 800cfd0:	f008 fc9b 	bl	801590a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2100      	movs	r1, #0
 800cfd8:	0018      	movs	r0, r3
 800cfda:	f000 f915 	bl	800d208 <HAL_PCD_SetAddress>

    return;
 800cfde:	e102      	b.n	800d1e6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800cfe0:	68fa      	ldr	r2, [r7, #12]
 800cfe2:	2380      	movs	r3, #128	@ 0x80
 800cfe4:	01db      	lsls	r3, r3, #7
 800cfe6:	4013      	ands	r3, r2
 800cfe8:	d00c      	beq.n	800d004 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2244      	movs	r2, #68	@ 0x44
 800cff0:	5a9b      	ldrh	r3, [r3, r2]
 800cff2:	b29a      	uxth	r2, r3
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	497d      	ldr	r1, [pc, #500]	@ (800d1f0 <HAL_PCD_IRQHandler+0x270>)
 800cffa:	400a      	ands	r2, r1
 800cffc:	b291      	uxth	r1, r2
 800cffe:	2244      	movs	r2, #68	@ 0x44
 800d000:	5299      	strh	r1, [r3, r2]

    return;
 800d002:	e0f0      	b.n	800d1e6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	2380      	movs	r3, #128	@ 0x80
 800d008:	019b      	lsls	r3, r3, #6
 800d00a:	4013      	ands	r3, r2
 800d00c:	d00c      	beq.n	800d028 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	2244      	movs	r2, #68	@ 0x44
 800d014:	5a9b      	ldrh	r3, [r3, r2]
 800d016:	b29a      	uxth	r2, r3
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4975      	ldr	r1, [pc, #468]	@ (800d1f4 <HAL_PCD_IRQHandler+0x274>)
 800d01e:	400a      	ands	r2, r1
 800d020:	b291      	uxth	r1, r2
 800d022:	2244      	movs	r2, #68	@ 0x44
 800d024:	5299      	strh	r1, [r3, r2]

    return;
 800d026:	e0de      	b.n	800d1e6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	2380      	movs	r3, #128	@ 0x80
 800d02c:	015b      	lsls	r3, r3, #5
 800d02e:	4013      	ands	r3, r2
 800d030:	d038      	beq.n	800d0a4 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	2240      	movs	r2, #64	@ 0x40
 800d038:	5a9b      	ldrh	r3, [r3, r2]
 800d03a:	b29a      	uxth	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2104      	movs	r1, #4
 800d042:	438a      	bics	r2, r1
 800d044:	b291      	uxth	r1, r2
 800d046:	2240      	movs	r2, #64	@ 0x40
 800d048:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2240      	movs	r2, #64	@ 0x40
 800d050:	5a9b      	ldrh	r3, [r3, r2]
 800d052:	b29a      	uxth	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	2108      	movs	r1, #8
 800d05a:	438a      	bics	r2, r1
 800d05c:	b291      	uxth	r1, r2
 800d05e:	2240      	movs	r2, #64	@ 0x40
 800d060:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	23b8      	movs	r3, #184	@ 0xb8
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	5cd3      	ldrb	r3, [r2, r3]
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	d109      	bne.n	800d082 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	23b8      	movs	r3, #184	@ 0xb8
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	2100      	movs	r1, #0
 800d076:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2100      	movs	r1, #0
 800d07c:	0018      	movs	r0, r3
 800d07e:	f001 fc9f 	bl	800e9c0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	0018      	movs	r0, r3
 800d086:	f008 fc81 	bl	801598c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2244      	movs	r2, #68	@ 0x44
 800d090:	5a9b      	ldrh	r3, [r3, r2]
 800d092:	b29a      	uxth	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4957      	ldr	r1, [pc, #348]	@ (800d1f8 <HAL_PCD_IRQHandler+0x278>)
 800d09a:	400a      	ands	r2, r1
 800d09c:	b291      	uxth	r1, r2
 800d09e:	2244      	movs	r2, #68	@ 0x44
 800d0a0:	5299      	strh	r1, [r3, r2]

    return;
 800d0a2:	e0a0      	b.n	800d1e6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	2380      	movs	r3, #128	@ 0x80
 800d0a8:	011b      	lsls	r3, r3, #4
 800d0aa:	4013      	ands	r3, r2
 800d0ac:	d028      	beq.n	800d100 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2240      	movs	r2, #64	@ 0x40
 800d0b4:	5a9b      	ldrh	r3, [r3, r2]
 800d0b6:	b29a      	uxth	r2, r3
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	2108      	movs	r1, #8
 800d0be:	430a      	orrs	r2, r1
 800d0c0:	b291      	uxth	r1, r2
 800d0c2:	2240      	movs	r2, #64	@ 0x40
 800d0c4:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2244      	movs	r2, #68	@ 0x44
 800d0cc:	5a9b      	ldrh	r3, [r3, r2]
 800d0ce:	b29a      	uxth	r2, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4949      	ldr	r1, [pc, #292]	@ (800d1fc <HAL_PCD_IRQHandler+0x27c>)
 800d0d6:	400a      	ands	r2, r1
 800d0d8:	b291      	uxth	r1, r2
 800d0da:	2244      	movs	r2, #68	@ 0x44
 800d0dc:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2240      	movs	r2, #64	@ 0x40
 800d0e4:	5a9b      	ldrh	r3, [r3, r2]
 800d0e6:	b29a      	uxth	r2, r3
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2104      	movs	r1, #4
 800d0ee:	430a      	orrs	r2, r1
 800d0f0:	b291      	uxth	r1, r2
 800d0f2:	2240      	movs	r2, #64	@ 0x40
 800d0f4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	0018      	movs	r0, r3
 800d0fa:	f008 fc2b 	bl	8015954 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800d0fe:	e072      	b.n	800d1e6 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2280      	movs	r2, #128	@ 0x80
 800d104:	4013      	ands	r3, r2
 800d106:	d046      	beq.n	800d196 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2244      	movs	r2, #68	@ 0x44
 800d10e:	5a9b      	ldrh	r3, [r3, r2]
 800d110:	b29a      	uxth	r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2180      	movs	r1, #128	@ 0x80
 800d118:	438a      	bics	r2, r1
 800d11a:	b291      	uxth	r1, r2
 800d11c:	2244      	movs	r2, #68	@ 0x44
 800d11e:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	23b8      	movs	r3, #184	@ 0xb8
 800d124:	009b      	lsls	r3, r3, #2
 800d126:	5cd3      	ldrb	r3, [r2, r3]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d12f      	bne.n	800d18c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2240      	movs	r2, #64	@ 0x40
 800d132:	5a9b      	ldrh	r3, [r3, r2]
 800d134:	b29a      	uxth	r2, r3
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2104      	movs	r1, #4
 800d13c:	430a      	orrs	r2, r1
 800d13e:	b291      	uxth	r1, r2
 800d140:	2240      	movs	r2, #64	@ 0x40
 800d142:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2240      	movs	r2, #64	@ 0x40
 800d14a:	5a9b      	ldrh	r3, [r3, r2]
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2108      	movs	r1, #8
 800d154:	430a      	orrs	r2, r1
 800d156:	b291      	uxth	r1, r2
 800d158:	2240      	movs	r2, #64	@ 0x40
 800d15a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	23b8      	movs	r3, #184	@ 0xb8
 800d160:	009b      	lsls	r3, r3, #2
 800d162:	2101      	movs	r1, #1
 800d164:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2254      	movs	r2, #84	@ 0x54
 800d16c:	5a9b      	ldrh	r3, [r3, r2]
 800d16e:	b29b      	uxth	r3, r3
 800d170:	089b      	lsrs	r3, r3, #2
 800d172:	223c      	movs	r2, #60	@ 0x3c
 800d174:	4013      	ands	r3, r2
 800d176:	0019      	movs	r1, r3
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	23b9      	movs	r3, #185	@ 0xb9
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2101      	movs	r1, #1
 800d184:	0018      	movs	r0, r3
 800d186:	f001 fc1b 	bl	800e9c0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800d18a:	e02c      	b.n	800d1e6 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	0018      	movs	r0, r3
 800d190:	f008 fbe0 	bl	8015954 <HAL_PCD_SuspendCallback>
    return;
 800d194:	e027      	b.n	800d1e6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800d196:	68fa      	ldr	r2, [r7, #12]
 800d198:	2380      	movs	r3, #128	@ 0x80
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	4013      	ands	r3, r2
 800d19e:	d010      	beq.n	800d1c2 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2244      	movs	r2, #68	@ 0x44
 800d1a6:	5a9b      	ldrh	r3, [r3, r2]
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4914      	ldr	r1, [pc, #80]	@ (800d200 <HAL_PCD_IRQHandler+0x280>)
 800d1b0:	400a      	ands	r2, r1
 800d1b2:	b291      	uxth	r1, r2
 800d1b4:	2244      	movs	r2, #68	@ 0x44
 800d1b6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	0018      	movs	r0, r3
 800d1bc:	f008 fb96 	bl	80158ec <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800d1c0:	e011      	b.n	800d1e6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800d1c2:	68fa      	ldr	r2, [r7, #12]
 800d1c4:	2380      	movs	r3, #128	@ 0x80
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	4013      	ands	r3, r2
 800d1ca:	d00c      	beq.n	800d1e6 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	2244      	movs	r2, #68	@ 0x44
 800d1d2:	5a9b      	ldrh	r3, [r3, r2]
 800d1d4:	b29a      	uxth	r2, r3
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	490a      	ldr	r1, [pc, #40]	@ (800d204 <HAL_PCD_IRQHandler+0x284>)
 800d1dc:	400a      	ands	r2, r1
 800d1de:	b291      	uxth	r1, r2
 800d1e0:	2244      	movs	r2, #68	@ 0x44
 800d1e2:	5299      	strh	r1, [r3, r2]

    return;
 800d1e4:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	b004      	add	sp, #16
 800d1ea:	bd80      	pop	{r7, pc}
 800d1ec:	fffffbff 	.word	0xfffffbff
 800d1f0:	ffffbfff 	.word	0xffffbfff
 800d1f4:	ffffdfff 	.word	0xffffdfff
 800d1f8:	ffffefff 	.word	0xffffefff
 800d1fc:	fffff7ff 	.word	0xfffff7ff
 800d200:	fffffdff 	.word	0xfffffdff
 800d204:	fffffeff 	.word	0xfffffeff

0800d208 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	000a      	movs	r2, r1
 800d212:	1cfb      	adds	r3, r7, #3
 800d214:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	23aa      	movs	r3, #170	@ 0xaa
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	5cd3      	ldrb	r3, [r2, r3]
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d101      	bne.n	800d226 <HAL_PCD_SetAddress+0x1e>
 800d222:	2302      	movs	r3, #2
 800d224:	e017      	b.n	800d256 <HAL_PCD_SetAddress+0x4e>
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	23aa      	movs	r3, #170	@ 0xaa
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	2101      	movs	r1, #1
 800d22e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	1cfa      	adds	r2, r7, #3
 800d234:	2124      	movs	r1, #36	@ 0x24
 800d236:	7812      	ldrb	r2, [r2, #0]
 800d238:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681a      	ldr	r2, [r3, #0]
 800d23e:	1cfb      	adds	r3, r7, #3
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	0019      	movs	r1, r3
 800d244:	0010      	movs	r0, r2
 800d246:	f006 fb45 	bl	80138d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	23aa      	movs	r3, #170	@ 0xaa
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	2100      	movs	r1, #0
 800d252:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800d254:	2300      	movs	r3, #0
}
 800d256:	0018      	movs	r0, r3
 800d258:	46bd      	mov	sp, r7
 800d25a:	b002      	add	sp, #8
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d25e:	b590      	push	{r4, r7, lr}
 800d260:	b085      	sub	sp, #20
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
 800d266:	000c      	movs	r4, r1
 800d268:	0010      	movs	r0, r2
 800d26a:	0019      	movs	r1, r3
 800d26c:	1cfb      	adds	r3, r7, #3
 800d26e:	1c22      	adds	r2, r4, #0
 800d270:	701a      	strb	r2, [r3, #0]
 800d272:	003b      	movs	r3, r7
 800d274:	1c02      	adds	r2, r0, #0
 800d276:	801a      	strh	r2, [r3, #0]
 800d278:	1cbb      	adds	r3, r7, #2
 800d27a:	1c0a      	adds	r2, r1, #0
 800d27c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800d27e:	230b      	movs	r3, #11
 800d280:	18fb      	adds	r3, r7, r3
 800d282:	2200      	movs	r2, #0
 800d284:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d286:	1cfb      	adds	r3, r7, #3
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	b25b      	sxtb	r3, r3
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	da0f      	bge.n	800d2b0 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d290:	1cfb      	adds	r3, r7, #3
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	2207      	movs	r2, #7
 800d296:	4013      	ands	r3, r2
 800d298:	1c5a      	adds	r2, r3, #1
 800d29a:	0013      	movs	r3, r2
 800d29c:	009b      	lsls	r3, r3, #2
 800d29e:	189b      	adds	r3, r3, r2
 800d2a0:	00db      	lsls	r3, r3, #3
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	18d3      	adds	r3, r2, r3
 800d2a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	705a      	strb	r2, [r3, #1]
 800d2ae:	e00f      	b.n	800d2d0 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d2b0:	1cfb      	adds	r3, r7, #3
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	2207      	movs	r2, #7
 800d2b6:	401a      	ands	r2, r3
 800d2b8:	0013      	movs	r3, r2
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	189b      	adds	r3, r3, r2
 800d2be:	00db      	lsls	r3, r3, #3
 800d2c0:	3369      	adds	r3, #105	@ 0x69
 800d2c2:	33ff      	adds	r3, #255	@ 0xff
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	18d3      	adds	r3, r2, r3
 800d2c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d2d0:	1cfb      	adds	r3, r7, #3
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	2207      	movs	r2, #7
 800d2d6:	4013      	ands	r3, r2
 800d2d8:	b2da      	uxtb	r2, r3
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800d2de:	003b      	movs	r3, r7
 800d2e0:	881a      	ldrh	r2, [r3, #0]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	1cba      	adds	r2, r7, #2
 800d2ea:	7812      	ldrb	r2, [r2, #0]
 800d2ec:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d2ee:	1cbb      	adds	r3, r7, #2
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	d102      	bne.n	800d2fc <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	23aa      	movs	r3, #170	@ 0xaa
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	5cd3      	ldrb	r3, [r2, r3]
 800d304:	2b01      	cmp	r3, #1
 800d306:	d101      	bne.n	800d30c <HAL_PCD_EP_Open+0xae>
 800d308:	2302      	movs	r3, #2
 800d30a:	e013      	b.n	800d334 <HAL_PCD_EP_Open+0xd6>
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	23aa      	movs	r3, #170	@ 0xaa
 800d310:	009b      	lsls	r3, r3, #2
 800d312:	2101      	movs	r1, #1
 800d314:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	68fa      	ldr	r2, [r7, #12]
 800d31c:	0011      	movs	r1, r2
 800d31e:	0018      	movs	r0, r3
 800d320:	f004 fb3c 	bl	801199c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d324:	687a      	ldr	r2, [r7, #4]
 800d326:	23aa      	movs	r3, #170	@ 0xaa
 800d328:	009b      	lsls	r3, r3, #2
 800d32a:	2100      	movs	r1, #0
 800d32c:	54d1      	strb	r1, [r2, r3]

  return ret;
 800d32e:	230b      	movs	r3, #11
 800d330:	18fb      	adds	r3, r7, r3
 800d332:	781b      	ldrb	r3, [r3, #0]
}
 800d334:	0018      	movs	r0, r3
 800d336:	46bd      	mov	sp, r7
 800d338:	b005      	add	sp, #20
 800d33a:	bd90      	pop	{r4, r7, pc}

0800d33c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	000a      	movs	r2, r1
 800d346:	1cfb      	adds	r3, r7, #3
 800d348:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d34a:	1cfb      	adds	r3, r7, #3
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	b25b      	sxtb	r3, r3
 800d350:	2b00      	cmp	r3, #0
 800d352:	da0f      	bge.n	800d374 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d354:	1cfb      	adds	r3, r7, #3
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	2207      	movs	r2, #7
 800d35a:	4013      	ands	r3, r2
 800d35c:	1c5a      	adds	r2, r3, #1
 800d35e:	0013      	movs	r3, r2
 800d360:	009b      	lsls	r3, r3, #2
 800d362:	189b      	adds	r3, r3, r2
 800d364:	00db      	lsls	r3, r3, #3
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	18d3      	adds	r3, r2, r3
 800d36a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2201      	movs	r2, #1
 800d370:	705a      	strb	r2, [r3, #1]
 800d372:	e00f      	b.n	800d394 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d374:	1cfb      	adds	r3, r7, #3
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	2207      	movs	r2, #7
 800d37a:	401a      	ands	r2, r3
 800d37c:	0013      	movs	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	189b      	adds	r3, r3, r2
 800d382:	00db      	lsls	r3, r3, #3
 800d384:	3369      	adds	r3, #105	@ 0x69
 800d386:	33ff      	adds	r3, #255	@ 0xff
 800d388:	687a      	ldr	r2, [r7, #4]
 800d38a:	18d3      	adds	r3, r2, r3
 800d38c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2200      	movs	r2, #0
 800d392:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800d394:	1cfb      	adds	r3, r7, #3
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	2207      	movs	r2, #7
 800d39a:	4013      	ands	r3, r2
 800d39c:	b2da      	uxtb	r2, r3
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	23aa      	movs	r3, #170	@ 0xaa
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	5cd3      	ldrb	r3, [r2, r3]
 800d3aa:	2b01      	cmp	r3, #1
 800d3ac:	d101      	bne.n	800d3b2 <HAL_PCD_EP_Close+0x76>
 800d3ae:	2302      	movs	r3, #2
 800d3b0:	e011      	b.n	800d3d6 <HAL_PCD_EP_Close+0x9a>
 800d3b2:	687a      	ldr	r2, [r7, #4]
 800d3b4:	23aa      	movs	r3, #170	@ 0xaa
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	2101      	movs	r1, #1
 800d3ba:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	68fa      	ldr	r2, [r7, #12]
 800d3c2:	0011      	movs	r1, r2
 800d3c4:	0018      	movs	r0, r3
 800d3c6:	f004 fe8b 	bl	80120e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	23aa      	movs	r3, #170	@ 0xaa
 800d3ce:	009b      	lsls	r3, r3, #2
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800d3d4:	2300      	movs	r3, #0
}
 800d3d6:	0018      	movs	r0, r3
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	b004      	add	sp, #16
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b086      	sub	sp, #24
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	60f8      	str	r0, [r7, #12]
 800d3e6:	607a      	str	r2, [r7, #4]
 800d3e8:	603b      	str	r3, [r7, #0]
 800d3ea:	200b      	movs	r0, #11
 800d3ec:	183b      	adds	r3, r7, r0
 800d3ee:	1c0a      	adds	r2, r1, #0
 800d3f0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d3f2:	0001      	movs	r1, r0
 800d3f4:	187b      	adds	r3, r7, r1
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	2207      	movs	r2, #7
 800d3fa:	401a      	ands	r2, r3
 800d3fc:	0013      	movs	r3, r2
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	189b      	adds	r3, r3, r2
 800d402:	00db      	lsls	r3, r3, #3
 800d404:	3369      	adds	r3, #105	@ 0x69
 800d406:	33ff      	adds	r3, #255	@ 0xff
 800d408:	68fa      	ldr	r2, [r7, #12]
 800d40a:	18d3      	adds	r3, r2, r3
 800d40c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	687a      	ldr	r2, [r7, #4]
 800d412:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	683a      	ldr	r2, [r7, #0]
 800d418:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	2200      	movs	r2, #0
 800d41e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	2200      	movs	r2, #0
 800d424:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d426:	187b      	adds	r3, r7, r1
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	2207      	movs	r2, #7
 800d42c:	4013      	ands	r3, r2
 800d42e:	b2da      	uxtb	r2, r3
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	697a      	ldr	r2, [r7, #20]
 800d43a:	0011      	movs	r1, r2
 800d43c:	0018      	movs	r0, r3
 800d43e:	f005 f80f 	bl	8012460 <USB_EPStartXfer>

  return HAL_OK;
 800d442:	2300      	movs	r3, #0
}
 800d444:	0018      	movs	r0, r3
 800d446:	46bd      	mov	sp, r7
 800d448:	b006      	add	sp, #24
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	000a      	movs	r2, r1
 800d456:	1cfb      	adds	r3, r7, #3
 800d458:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d45a:	1cfb      	adds	r3, r7, #3
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	2207      	movs	r2, #7
 800d460:	401a      	ands	r2, r3
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	23c2      	movs	r3, #194	@ 0xc2
 800d466:	0059      	lsls	r1, r3, #1
 800d468:	0013      	movs	r3, r2
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	189b      	adds	r3, r3, r2
 800d46e:	00db      	lsls	r3, r3, #3
 800d470:	18c3      	adds	r3, r0, r3
 800d472:	185b      	adds	r3, r3, r1
 800d474:	681b      	ldr	r3, [r3, #0]
}
 800d476:	0018      	movs	r0, r3
 800d478:	46bd      	mov	sp, r7
 800d47a:	b002      	add	sp, #8
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d47e:	b580      	push	{r7, lr}
 800d480:	b086      	sub	sp, #24
 800d482:	af00      	add	r7, sp, #0
 800d484:	60f8      	str	r0, [r7, #12]
 800d486:	607a      	str	r2, [r7, #4]
 800d488:	603b      	str	r3, [r7, #0]
 800d48a:	200b      	movs	r0, #11
 800d48c:	183b      	adds	r3, r7, r0
 800d48e:	1c0a      	adds	r2, r1, #0
 800d490:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d492:	183b      	adds	r3, r7, r0
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	2207      	movs	r2, #7
 800d498:	4013      	ands	r3, r2
 800d49a:	1c5a      	adds	r2, r3, #1
 800d49c:	0013      	movs	r3, r2
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	189b      	adds	r3, r3, r2
 800d4a2:	00db      	lsls	r3, r3, #3
 800d4a4:	68fa      	ldr	r2, [r7, #12]
 800d4a6:	18d3      	adds	r3, r2, r3
 800d4a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	687a      	ldr	r2, [r7, #4]
 800d4ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	683a      	ldr	r2, [r7, #0]
 800d4b4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	2224      	movs	r2, #36	@ 0x24
 800d4ba:	2101      	movs	r1, #1
 800d4bc:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	683a      	ldr	r2, [r7, #0]
 800d4c2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d4d0:	183b      	adds	r3, r7, r0
 800d4d2:	781b      	ldrb	r3, [r3, #0]
 800d4d4:	2207      	movs	r2, #7
 800d4d6:	4013      	ands	r3, r2
 800d4d8:	b2da      	uxtb	r2, r3
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	697a      	ldr	r2, [r7, #20]
 800d4e4:	0011      	movs	r1, r2
 800d4e6:	0018      	movs	r0, r3
 800d4e8:	f004 ffba 	bl	8012460 <USB_EPStartXfer>

  return HAL_OK;
 800d4ec:	2300      	movs	r3, #0
}
 800d4ee:	0018      	movs	r0, r3
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	b006      	add	sp, #24
 800d4f4:	bd80      	pop	{r7, pc}

0800d4f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	b084      	sub	sp, #16
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
 800d4fe:	000a      	movs	r2, r1
 800d500:	1cfb      	adds	r3, r7, #3
 800d502:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d504:	1cfb      	adds	r3, r7, #3
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	2207      	movs	r2, #7
 800d50a:	401a      	ands	r2, r3
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	429a      	cmp	r2, r3
 800d512:	d901      	bls.n	800d518 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800d514:	2301      	movs	r3, #1
 800d516:	e046      	b.n	800d5a6 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d518:	1cfb      	adds	r3, r7, #3
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	b25b      	sxtb	r3, r3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	da0f      	bge.n	800d542 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d522:	1cfb      	adds	r3, r7, #3
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	2207      	movs	r2, #7
 800d528:	4013      	ands	r3, r2
 800d52a:	1c5a      	adds	r2, r3, #1
 800d52c:	0013      	movs	r3, r2
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	189b      	adds	r3, r3, r2
 800d532:	00db      	lsls	r3, r3, #3
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	18d3      	adds	r3, r2, r3
 800d538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	2201      	movs	r2, #1
 800d53e:	705a      	strb	r2, [r3, #1]
 800d540:	e00d      	b.n	800d55e <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d542:	1cfb      	adds	r3, r7, #3
 800d544:	781a      	ldrb	r2, [r3, #0]
 800d546:	0013      	movs	r3, r2
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	189b      	adds	r3, r3, r2
 800d54c:	00db      	lsls	r3, r3, #3
 800d54e:	3369      	adds	r3, #105	@ 0x69
 800d550:	33ff      	adds	r3, #255	@ 0xff
 800d552:	687a      	ldr	r2, [r7, #4]
 800d554:	18d3      	adds	r3, r2, r3
 800d556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2200      	movs	r2, #0
 800d55c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2201      	movs	r2, #1
 800d562:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d564:	1cfb      	adds	r3, r7, #3
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	2207      	movs	r2, #7
 800d56a:	4013      	ands	r3, r2
 800d56c:	b2da      	uxtb	r2, r3
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	23aa      	movs	r3, #170	@ 0xaa
 800d576:	009b      	lsls	r3, r3, #2
 800d578:	5cd3      	ldrb	r3, [r2, r3]
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d101      	bne.n	800d582 <HAL_PCD_EP_SetStall+0x8c>
 800d57e:	2302      	movs	r3, #2
 800d580:	e011      	b.n	800d5a6 <HAL_PCD_EP_SetStall+0xb0>
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	23aa      	movs	r3, #170	@ 0xaa
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	2101      	movs	r1, #1
 800d58a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	68fa      	ldr	r2, [r7, #12]
 800d592:	0011      	movs	r1, r2
 800d594:	0018      	movs	r0, r3
 800d596:	f006 f89b 	bl	80136d0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800d59a:	687a      	ldr	r2, [r7, #4]
 800d59c:	23aa      	movs	r3, #170	@ 0xaa
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800d5a4:	2300      	movs	r3, #0
}
 800d5a6:	0018      	movs	r0, r3
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	b004      	add	sp, #16
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b084      	sub	sp, #16
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
 800d5b6:	000a      	movs	r2, r1
 800d5b8:	1cfb      	adds	r3, r7, #3
 800d5ba:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d5bc:	1cfb      	adds	r3, r7, #3
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	220f      	movs	r2, #15
 800d5c2:	401a      	ands	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d901      	bls.n	800d5d0 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	e048      	b.n	800d662 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d5d0:	1cfb      	adds	r3, r7, #3
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	b25b      	sxtb	r3, r3
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	da0f      	bge.n	800d5fa <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d5da:	1cfb      	adds	r3, r7, #3
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	2207      	movs	r2, #7
 800d5e0:	4013      	ands	r3, r2
 800d5e2:	1c5a      	adds	r2, r3, #1
 800d5e4:	0013      	movs	r3, r2
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	189b      	adds	r3, r3, r2
 800d5ea:	00db      	lsls	r3, r3, #3
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	18d3      	adds	r3, r2, r3
 800d5f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	705a      	strb	r2, [r3, #1]
 800d5f8:	e00f      	b.n	800d61a <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d5fa:	1cfb      	adds	r3, r7, #3
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	2207      	movs	r2, #7
 800d600:	401a      	ands	r2, r3
 800d602:	0013      	movs	r3, r2
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	189b      	adds	r3, r3, r2
 800d608:	00db      	lsls	r3, r3, #3
 800d60a:	3369      	adds	r3, #105	@ 0x69
 800d60c:	33ff      	adds	r3, #255	@ 0xff
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	18d3      	adds	r3, r2, r3
 800d612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2200      	movs	r2, #0
 800d618:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2200      	movs	r2, #0
 800d61e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d620:	1cfb      	adds	r3, r7, #3
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	2207      	movs	r2, #7
 800d626:	4013      	ands	r3, r2
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d62e:	687a      	ldr	r2, [r7, #4]
 800d630:	23aa      	movs	r3, #170	@ 0xaa
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	5cd3      	ldrb	r3, [r2, r3]
 800d636:	2b01      	cmp	r3, #1
 800d638:	d101      	bne.n	800d63e <HAL_PCD_EP_ClrStall+0x90>
 800d63a:	2302      	movs	r3, #2
 800d63c:	e011      	b.n	800d662 <HAL_PCD_EP_ClrStall+0xb4>
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	23aa      	movs	r3, #170	@ 0xaa
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	2101      	movs	r1, #1
 800d646:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	68fa      	ldr	r2, [r7, #12]
 800d64e:	0011      	movs	r1, r2
 800d650:	0018      	movs	r0, r3
 800d652:	f006 f88d 	bl	8013770 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	23aa      	movs	r3, #170	@ 0xaa
 800d65a:	009b      	lsls	r3, r3, #2
 800d65c:	2100      	movs	r1, #0
 800d65e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800d660:	2300      	movs	r3, #0
}
 800d662:	0018      	movs	r0, r3
 800d664:	46bd      	mov	sp, r7
 800d666:	b004      	add	sp, #16
 800d668:	bd80      	pop	{r7, pc}
	...

0800d66c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800d66c:	b5b0      	push	{r4, r5, r7, lr}
 800d66e:	b096      	sub	sp, #88	@ 0x58
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800d674:	f000 fbec 	bl	800de50 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	204e      	movs	r0, #78	@ 0x4e
 800d67e:	183b      	adds	r3, r7, r0
 800d680:	2144      	movs	r1, #68	@ 0x44
 800d682:	5a52      	ldrh	r2, [r2, r1]
 800d684:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800d686:	183b      	adds	r3, r7, r0
 800d688:	881b      	ldrh	r3, [r3, #0]
 800d68a:	b2da      	uxtb	r2, r3
 800d68c:	244d      	movs	r4, #77	@ 0x4d
 800d68e:	193b      	adds	r3, r7, r4
 800d690:	210f      	movs	r1, #15
 800d692:	400a      	ands	r2, r1
 800d694:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800d696:	193b      	adds	r3, r7, r4
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d000      	beq.n	800d6a0 <PCD_EP_ISR_Handler+0x34>
 800d69e:	e18f      	b.n	800d9c0 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800d6a0:	183b      	adds	r3, r7, r0
 800d6a2:	881b      	ldrh	r3, [r3, #0]
 800d6a4:	2210      	movs	r2, #16
 800d6a6:	4013      	ands	r3, r2
 800d6a8:	d155      	bne.n	800d756 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	881b      	ldrh	r3, [r3, #0]
 800d6b0:	b29a      	uxth	r2, r3
 800d6b2:	200e      	movs	r0, #14
 800d6b4:	183b      	adds	r3, r7, r0
 800d6b6:	49bb      	ldr	r1, [pc, #748]	@ (800d9a4 <PCD_EP_ISR_Handler+0x338>)
 800d6b8:	400a      	ands	r2, r1
 800d6ba:	801a      	strh	r2, [r3, #0]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	183a      	adds	r2, r7, r0
 800d6c2:	8812      	ldrh	r2, [r2, #0]
 800d6c4:	49b8      	ldr	r1, [pc, #736]	@ (800d9a8 <PCD_EP_ISR_Handler+0x33c>)
 800d6c6:	430a      	orrs	r2, r1
 800d6c8:	b292      	uxth	r2, r2
 800d6ca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	3328      	adds	r3, #40	@ 0x28
 800d6d0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	2250      	movs	r2, #80	@ 0x50
 800d6d8:	5a9b      	ldrh	r3, [r3, r2]
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	001a      	movs	r2, r3
 800d6de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	00db      	lsls	r3, r3, #3
 800d6e4:	18d2      	adds	r2, r2, r3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	18d3      	adds	r3, r2, r3
 800d6ec:	4aaf      	ldr	r2, [pc, #700]	@ (800d9ac <PCD_EP_ISR_Handler+0x340>)
 800d6ee:	4694      	mov	ip, r2
 800d6f0:	4463      	add	r3, ip
 800d6f2:	881b      	ldrh	r3, [r3, #0]
 800d6f4:	059b      	lsls	r3, r3, #22
 800d6f6:	0d9a      	lsrs	r2, r3, #22
 800d6f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800d6fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6fe:	695a      	ldr	r2, [r3, #20]
 800d700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d702:	69db      	ldr	r3, [r3, #28]
 800d704:	18d2      	adds	r2, r2, r3
 800d706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d708:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2100      	movs	r1, #0
 800d70e:	0018      	movs	r0, r3
 800d710:	f008 f8ce 	bl	80158b0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2224      	movs	r2, #36	@ 0x24
 800d718:	5c9b      	ldrb	r3, [r3, r2]
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d101      	bne.n	800d724 <PCD_EP_ISR_Handler+0xb8>
 800d720:	f000 fb96 	bl	800de50 <PCD_EP_ISR_Handler+0x7e4>
 800d724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d726:	699b      	ldr	r3, [r3, #24]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d001      	beq.n	800d730 <PCD_EP_ISR_Handler+0xc4>
 800d72c:	f000 fb90 	bl	800de50 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2224      	movs	r2, #36	@ 0x24
 800d734:	5c9b      	ldrb	r3, [r3, r2]
 800d736:	b2db      	uxtb	r3, r3
 800d738:	2280      	movs	r2, #128	@ 0x80
 800d73a:	4252      	negs	r2, r2
 800d73c:	4313      	orrs	r3, r2
 800d73e:	b2da      	uxtb	r2, r3
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	0011      	movs	r1, r2
 800d746:	224c      	movs	r2, #76	@ 0x4c
 800d748:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2224      	movs	r2, #36	@ 0x24
 800d74e:	2100      	movs	r1, #0
 800d750:	5499      	strb	r1, [r3, r2]
 800d752:	f000 fb7d 	bl	800de50 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	3369      	adds	r3, #105	@ 0x69
 800d75a:	33ff      	adds	r3, #255	@ 0xff
 800d75c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	214a      	movs	r1, #74	@ 0x4a
 800d764:	187b      	adds	r3, r7, r1
 800d766:	8812      	ldrh	r2, [r2, #0]
 800d768:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800d76a:	187b      	adds	r3, r7, r1
 800d76c:	881a      	ldrh	r2, [r3, #0]
 800d76e:	2380      	movs	r3, #128	@ 0x80
 800d770:	011b      	lsls	r3, r3, #4
 800d772:	4013      	ands	r3, r2
 800d774:	d037      	beq.n	800d7e6 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	2250      	movs	r2, #80	@ 0x50
 800d77c:	5a9b      	ldrh	r3, [r3, r2]
 800d77e:	b29b      	uxth	r3, r3
 800d780:	001a      	movs	r2, r3
 800d782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	00db      	lsls	r3, r3, #3
 800d788:	18d2      	adds	r2, r2, r3
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	18d3      	adds	r3, r2, r3
 800d790:	4a87      	ldr	r2, [pc, #540]	@ (800d9b0 <PCD_EP_ISR_Handler+0x344>)
 800d792:	4694      	mov	ip, r2
 800d794:	4463      	add	r3, ip
 800d796:	881b      	ldrh	r3, [r3, #0]
 800d798:	059b      	lsls	r3, r3, #22
 800d79a:	0d9a      	lsrs	r2, r3, #22
 800d79c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d79e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6818      	ldr	r0, [r3, #0]
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	22ac      	movs	r2, #172	@ 0xac
 800d7a8:	0092      	lsls	r2, r2, #2
 800d7aa:	1899      	adds	r1, r3, r2
 800d7ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7ae:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800d7b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7b2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	f006 f90e 	bl	80139d6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	881b      	ldrh	r3, [r3, #0]
 800d7c0:	b29a      	uxth	r2, r3
 800d7c2:	2010      	movs	r0, #16
 800d7c4:	183b      	adds	r3, r7, r0
 800d7c6:	497b      	ldr	r1, [pc, #492]	@ (800d9b4 <PCD_EP_ISR_Handler+0x348>)
 800d7c8:	400a      	ands	r2, r1
 800d7ca:	801a      	strh	r2, [r3, #0]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	183a      	adds	r2, r7, r0
 800d7d2:	8812      	ldrh	r2, [r2, #0]
 800d7d4:	2180      	movs	r1, #128	@ 0x80
 800d7d6:	430a      	orrs	r2, r1
 800d7d8:	b292      	uxth	r2, r2
 800d7da:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	0018      	movs	r0, r3
 800d7e0:	f008 f830 	bl	8015844 <HAL_PCD_SetupStageCallback>
 800d7e4:	e334      	b.n	800de50 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d7e6:	234a      	movs	r3, #74	@ 0x4a
 800d7e8:	18fb      	adds	r3, r7, r3
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	5e9b      	ldrsh	r3, [r3, r2]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	db00      	blt.n	800d7f4 <PCD_EP_ISR_Handler+0x188>
 800d7f2:	e32d      	b.n	800de50 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	881b      	ldrh	r3, [r3, #0]
 800d7fa:	b29a      	uxth	r2, r3
 800d7fc:	201e      	movs	r0, #30
 800d7fe:	183b      	adds	r3, r7, r0
 800d800:	496c      	ldr	r1, [pc, #432]	@ (800d9b4 <PCD_EP_ISR_Handler+0x348>)
 800d802:	400a      	ands	r2, r1
 800d804:	801a      	strh	r2, [r3, #0]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	183a      	adds	r2, r7, r0
 800d80c:	8812      	ldrh	r2, [r2, #0]
 800d80e:	2180      	movs	r1, #128	@ 0x80
 800d810:	430a      	orrs	r2, r1
 800d812:	b292      	uxth	r2, r2
 800d814:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2250      	movs	r2, #80	@ 0x50
 800d81c:	5a9b      	ldrh	r3, [r3, r2]
 800d81e:	b29b      	uxth	r3, r3
 800d820:	001a      	movs	r2, r3
 800d822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	00db      	lsls	r3, r3, #3
 800d828:	18d2      	adds	r2, r2, r3
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	18d3      	adds	r3, r2, r3
 800d830:	4a5f      	ldr	r2, [pc, #380]	@ (800d9b0 <PCD_EP_ISR_Handler+0x344>)
 800d832:	4694      	mov	ip, r2
 800d834:	4463      	add	r3, ip
 800d836:	881b      	ldrh	r3, [r3, #0]
 800d838:	059b      	lsls	r3, r3, #22
 800d83a:	0d9a      	lsrs	r2, r3, #22
 800d83c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d83e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800d840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d842:	69db      	ldr	r3, [r3, #28]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d01a      	beq.n	800d87e <PCD_EP_ISR_Handler+0x212>
 800d848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d84a:	695b      	ldr	r3, [r3, #20]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d016      	beq.n	800d87e <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6818      	ldr	r0, [r3, #0]
 800d854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d856:	6959      	ldr	r1, [r3, #20]
 800d858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d85a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800d85c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d85e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800d860:	b29b      	uxth	r3, r3
 800d862:	f006 f8b8 	bl	80139d6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800d866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d868:	695a      	ldr	r2, [r3, #20]
 800d86a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d86c:	69db      	ldr	r3, [r3, #28]
 800d86e:	18d2      	adds	r2, r2, r3
 800d870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d872:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2100      	movs	r1, #0
 800d878:	0018      	movs	r0, r3
 800d87a:	f007 fff8 	bl	801586e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	214a      	movs	r1, #74	@ 0x4a
 800d884:	187b      	adds	r3, r7, r1
 800d886:	8812      	ldrh	r2, [r2, #0]
 800d888:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800d88a:	187b      	adds	r3, r7, r1
 800d88c:	881a      	ldrh	r2, [r3, #0]
 800d88e:	2380      	movs	r3, #128	@ 0x80
 800d890:	011b      	lsls	r3, r3, #4
 800d892:	4013      	ands	r3, r2
 800d894:	d000      	beq.n	800d898 <PCD_EP_ISR_Handler+0x22c>
 800d896:	e2db      	b.n	800de50 <PCD_EP_ISR_Handler+0x7e4>
 800d898:	187b      	adds	r3, r7, r1
 800d89a:	881a      	ldrh	r2, [r3, #0]
 800d89c:	23c0      	movs	r3, #192	@ 0xc0
 800d89e:	019b      	lsls	r3, r3, #6
 800d8a0:	401a      	ands	r2, r3
 800d8a2:	23c0      	movs	r3, #192	@ 0xc0
 800d8a4:	019b      	lsls	r3, r3, #6
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d100      	bne.n	800d8ac <PCD_EP_ISR_Handler+0x240>
 800d8aa:	e2d1      	b.n	800de50 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	61bb      	str	r3, [r7, #24]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	2250      	movs	r2, #80	@ 0x50
 800d8b8:	5a9b      	ldrh	r3, [r3, r2]
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	001a      	movs	r2, r3
 800d8be:	69bb      	ldr	r3, [r7, #24]
 800d8c0:	189b      	adds	r3, r3, r2
 800d8c2:	61bb      	str	r3, [r7, #24]
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	4a3a      	ldr	r2, [pc, #232]	@ (800d9b0 <PCD_EP_ISR_Handler+0x344>)
 800d8c8:	4694      	mov	ip, r2
 800d8ca:	4463      	add	r3, ip
 800d8cc:	617b      	str	r3, [r7, #20]
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	881b      	ldrh	r3, [r3, #0]
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	059b      	lsls	r3, r3, #22
 800d8d6:	0d9b      	lsrs	r3, r3, #22
 800d8d8:	b29a      	uxth	r2, r3
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	801a      	strh	r2, [r3, #0]
 800d8de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8e0:	691b      	ldr	r3, [r3, #16]
 800d8e2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d8e4:	d91a      	bls.n	800d91c <PCD_EP_ISR_Handler+0x2b0>
 800d8e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8e8:	691b      	ldr	r3, [r3, #16]
 800d8ea:	095b      	lsrs	r3, r3, #5
 800d8ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8f0:	691b      	ldr	r3, [r3, #16]
 800d8f2:	221f      	movs	r2, #31
 800d8f4:	4013      	ands	r3, r2
 800d8f6:	d102      	bne.n	800d8fe <PCD_EP_ISR_Handler+0x292>
 800d8f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8fa:	3b01      	subs	r3, #1
 800d8fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	881b      	ldrh	r3, [r3, #0]
 800d902:	b29a      	uxth	r2, r3
 800d904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d906:	b29b      	uxth	r3, r3
 800d908:	029b      	lsls	r3, r3, #10
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	4313      	orrs	r3, r2
 800d90e:	b29b      	uxth	r3, r3
 800d910:	4a25      	ldr	r2, [pc, #148]	@ (800d9a8 <PCD_EP_ISR_Handler+0x33c>)
 800d912:	4313      	orrs	r3, r2
 800d914:	b29a      	uxth	r2, r3
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	801a      	strh	r2, [r3, #0]
 800d91a:	e023      	b.n	800d964 <PCD_EP_ISR_Handler+0x2f8>
 800d91c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d91e:	691b      	ldr	r3, [r3, #16]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d108      	bne.n	800d936 <PCD_EP_ISR_Handler+0x2ca>
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	881b      	ldrh	r3, [r3, #0]
 800d928:	b29b      	uxth	r3, r3
 800d92a:	4a1f      	ldr	r2, [pc, #124]	@ (800d9a8 <PCD_EP_ISR_Handler+0x33c>)
 800d92c:	4313      	orrs	r3, r2
 800d92e:	b29a      	uxth	r2, r3
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	801a      	strh	r2, [r3, #0]
 800d934:	e016      	b.n	800d964 <PCD_EP_ISR_Handler+0x2f8>
 800d936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d938:	691b      	ldr	r3, [r3, #16]
 800d93a:	085b      	lsrs	r3, r3, #1
 800d93c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d93e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d940:	691b      	ldr	r3, [r3, #16]
 800d942:	2201      	movs	r2, #1
 800d944:	4013      	ands	r3, r2
 800d946:	d002      	beq.n	800d94e <PCD_EP_ISR_Handler+0x2e2>
 800d948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d94a:	3301      	adds	r3, #1
 800d94c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	881b      	ldrh	r3, [r3, #0]
 800d952:	b29a      	uxth	r2, r3
 800d954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d956:	b29b      	uxth	r3, r3
 800d958:	029b      	lsls	r3, r3, #10
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	4313      	orrs	r3, r2
 800d95e:	b29a      	uxth	r2, r3
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	881b      	ldrh	r3, [r3, #0]
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	2012      	movs	r0, #18
 800d96e:	183b      	adds	r3, r7, r0
 800d970:	4911      	ldr	r1, [pc, #68]	@ (800d9b8 <PCD_EP_ISR_Handler+0x34c>)
 800d972:	400a      	ands	r2, r1
 800d974:	801a      	strh	r2, [r3, #0]
 800d976:	183b      	adds	r3, r7, r0
 800d978:	183a      	adds	r2, r7, r0
 800d97a:	8812      	ldrh	r2, [r2, #0]
 800d97c:	2180      	movs	r1, #128	@ 0x80
 800d97e:	0149      	lsls	r1, r1, #5
 800d980:	404a      	eors	r2, r1
 800d982:	801a      	strh	r2, [r3, #0]
 800d984:	183b      	adds	r3, r7, r0
 800d986:	183a      	adds	r2, r7, r0
 800d988:	8812      	ldrh	r2, [r2, #0]
 800d98a:	2180      	movs	r1, #128	@ 0x80
 800d98c:	0189      	lsls	r1, r1, #6
 800d98e:	404a      	eors	r2, r1
 800d990:	801a      	strh	r2, [r3, #0]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	183a      	adds	r2, r7, r0
 800d998:	8812      	ldrh	r2, [r2, #0]
 800d99a:	4908      	ldr	r1, [pc, #32]	@ (800d9bc <PCD_EP_ISR_Handler+0x350>)
 800d99c:	430a      	orrs	r2, r1
 800d99e:	b292      	uxth	r2, r2
 800d9a0:	801a      	strh	r2, [r3, #0]
 800d9a2:	e255      	b.n	800de50 <PCD_EP_ISR_Handler+0x7e4>
 800d9a4:	ffff8f0f 	.word	0xffff8f0f
 800d9a8:	ffff8000 	.word	0xffff8000
 800d9ac:	00000402 	.word	0x00000402
 800d9b0:	00000406 	.word	0x00000406
 800d9b4:	00000f8f 	.word	0x00000f8f
 800d9b8:	ffffbf8f 	.word	0xffffbf8f
 800d9bc:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	001a      	movs	r2, r3
 800d9c6:	204d      	movs	r0, #77	@ 0x4d
 800d9c8:	183b      	adds	r3, r7, r0
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	18d2      	adds	r2, r2, r3
 800d9d0:	214a      	movs	r1, #74	@ 0x4a
 800d9d2:	187b      	adds	r3, r7, r1
 800d9d4:	8812      	ldrh	r2, [r2, #0]
 800d9d6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d9d8:	187b      	adds	r3, r7, r1
 800d9da:	2200      	movs	r2, #0
 800d9dc:	5e9b      	ldrsh	r3, [r3, r2]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	db00      	blt.n	800d9e4 <PCD_EP_ISR_Handler+0x378>
 800d9e2:	e0fa      	b.n	800dbda <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	001a      	movs	r2, r3
 800d9ea:	183b      	adds	r3, r7, r0
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	009b      	lsls	r3, r3, #2
 800d9f0:	18d3      	adds	r3, r2, r3
 800d9f2:	881b      	ldrh	r3, [r3, #0]
 800d9f4:	b29a      	uxth	r2, r3
 800d9f6:	2448      	movs	r4, #72	@ 0x48
 800d9f8:	193b      	adds	r3, r7, r4
 800d9fa:	49d1      	ldr	r1, [pc, #836]	@ (800dd40 <PCD_EP_ISR_Handler+0x6d4>)
 800d9fc:	400a      	ands	r2, r1
 800d9fe:	801a      	strh	r2, [r3, #0]
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	001a      	movs	r2, r3
 800da06:	183b      	adds	r3, r7, r0
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	009b      	lsls	r3, r3, #2
 800da0c:	18d3      	adds	r3, r2, r3
 800da0e:	193a      	adds	r2, r7, r4
 800da10:	8812      	ldrh	r2, [r2, #0]
 800da12:	2180      	movs	r1, #128	@ 0x80
 800da14:	430a      	orrs	r2, r1
 800da16:	b292      	uxth	r2, r2
 800da18:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800da1a:	183b      	adds	r3, r7, r0
 800da1c:	781a      	ldrb	r2, [r3, #0]
 800da1e:	0013      	movs	r3, r2
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	189b      	adds	r3, r3, r2
 800da24:	00db      	lsls	r3, r3, #3
 800da26:	3369      	adds	r3, #105	@ 0x69
 800da28:	33ff      	adds	r3, #255	@ 0xff
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	18d3      	adds	r3, r2, r3
 800da2e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800da30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da32:	7b1b      	ldrb	r3, [r3, #12]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d125      	bne.n	800da84 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	2250      	movs	r2, #80	@ 0x50
 800da3e:	5a9b      	ldrh	r3, [r3, r2]
 800da40:	b29b      	uxth	r3, r3
 800da42:	001a      	movs	r2, r3
 800da44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	00db      	lsls	r3, r3, #3
 800da4a:	18d2      	adds	r2, r2, r3
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	18d3      	adds	r3, r2, r3
 800da52:	4abc      	ldr	r2, [pc, #752]	@ (800dd44 <PCD_EP_ISR_Handler+0x6d8>)
 800da54:	4694      	mov	ip, r2
 800da56:	4463      	add	r3, ip
 800da58:	881a      	ldrh	r2, [r3, #0]
 800da5a:	2450      	movs	r4, #80	@ 0x50
 800da5c:	193b      	adds	r3, r7, r4
 800da5e:	0592      	lsls	r2, r2, #22
 800da60:	0d92      	lsrs	r2, r2, #22
 800da62:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800da64:	193b      	adds	r3, r7, r4
 800da66:	881b      	ldrh	r3, [r3, #0]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d100      	bne.n	800da6e <PCD_EP_ISR_Handler+0x402>
 800da6c:	e08d      	b.n	800db8a <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6818      	ldr	r0, [r3, #0]
 800da72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da74:	6959      	ldr	r1, [r3, #20]
 800da76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da78:	88da      	ldrh	r2, [r3, #6]
 800da7a:	193b      	adds	r3, r7, r4
 800da7c:	881b      	ldrh	r3, [r3, #0]
 800da7e:	f005 ffaa 	bl	80139d6 <USB_ReadPMA>
 800da82:	e082      	b.n	800db8a <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800da84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da86:	78db      	ldrb	r3, [r3, #3]
 800da88:	2b02      	cmp	r3, #2
 800da8a:	d10c      	bne.n	800daa6 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800da8c:	2350      	movs	r3, #80	@ 0x50
 800da8e:	18fc      	adds	r4, r7, r3
 800da90:	234a      	movs	r3, #74	@ 0x4a
 800da92:	18fb      	adds	r3, r7, r3
 800da94:	881a      	ldrh	r2, [r3, #0]
 800da96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	0018      	movs	r0, r3
 800da9c:	f000 f9ec 	bl	800de78 <HAL_PCD_EP_DB_Receive>
 800daa0:	0003      	movs	r3, r0
 800daa2:	8023      	strh	r3, [r4, #0]
 800daa4:	e071      	b.n	800db8a <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	001a      	movs	r2, r3
 800daac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	18d3      	adds	r3, r2, r3
 800dab4:	881b      	ldrh	r3, [r3, #0]
 800dab6:	b29a      	uxth	r2, r3
 800dab8:	2052      	movs	r0, #82	@ 0x52
 800daba:	183b      	adds	r3, r7, r0
 800dabc:	49a2      	ldr	r1, [pc, #648]	@ (800dd48 <PCD_EP_ISR_Handler+0x6dc>)
 800dabe:	400a      	ands	r2, r1
 800dac0:	801a      	strh	r2, [r3, #0]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	001a      	movs	r2, r3
 800dac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	18d3      	adds	r3, r2, r3
 800dad0:	183a      	adds	r2, r7, r0
 800dad2:	8812      	ldrh	r2, [r2, #0]
 800dad4:	499d      	ldr	r1, [pc, #628]	@ (800dd4c <PCD_EP_ISR_Handler+0x6e0>)
 800dad6:	430a      	orrs	r2, r1
 800dad8:	b292      	uxth	r2, r2
 800dada:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	001a      	movs	r2, r3
 800dae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dae4:	781b      	ldrb	r3, [r3, #0]
 800dae6:	009b      	lsls	r3, r3, #2
 800dae8:	18d3      	adds	r3, r2, r3
 800daea:	881b      	ldrh	r3, [r3, #0]
 800daec:	b29b      	uxth	r3, r3
 800daee:	001a      	movs	r2, r3
 800daf0:	2380      	movs	r3, #128	@ 0x80
 800daf2:	01db      	lsls	r3, r3, #7
 800daf4:	4013      	ands	r3, r2
 800daf6:	d024      	beq.n	800db42 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2250      	movs	r2, #80	@ 0x50
 800dafe:	5a9b      	ldrh	r3, [r3, r2]
 800db00:	b29b      	uxth	r3, r3
 800db02:	001a      	movs	r2, r3
 800db04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	00db      	lsls	r3, r3, #3
 800db0a:	18d2      	adds	r2, r2, r3
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	18d3      	adds	r3, r2, r3
 800db12:	4a8f      	ldr	r2, [pc, #572]	@ (800dd50 <PCD_EP_ISR_Handler+0x6e4>)
 800db14:	4694      	mov	ip, r2
 800db16:	4463      	add	r3, ip
 800db18:	881a      	ldrh	r2, [r3, #0]
 800db1a:	2450      	movs	r4, #80	@ 0x50
 800db1c:	193b      	adds	r3, r7, r4
 800db1e:	0592      	lsls	r2, r2, #22
 800db20:	0d92      	lsrs	r2, r2, #22
 800db22:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800db24:	193b      	adds	r3, r7, r4
 800db26:	881b      	ldrh	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d02e      	beq.n	800db8a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6818      	ldr	r0, [r3, #0]
 800db30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db32:	6959      	ldr	r1, [r3, #20]
 800db34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db36:	891a      	ldrh	r2, [r3, #8]
 800db38:	193b      	adds	r3, r7, r4
 800db3a:	881b      	ldrh	r3, [r3, #0]
 800db3c:	f005 ff4b 	bl	80139d6 <USB_ReadPMA>
 800db40:	e023      	b.n	800db8a <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	2250      	movs	r2, #80	@ 0x50
 800db48:	5a9b      	ldrh	r3, [r3, r2]
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	001a      	movs	r2, r3
 800db4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	00db      	lsls	r3, r3, #3
 800db54:	18d2      	adds	r2, r2, r3
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	18d3      	adds	r3, r2, r3
 800db5c:	4a79      	ldr	r2, [pc, #484]	@ (800dd44 <PCD_EP_ISR_Handler+0x6d8>)
 800db5e:	4694      	mov	ip, r2
 800db60:	4463      	add	r3, ip
 800db62:	881a      	ldrh	r2, [r3, #0]
 800db64:	2450      	movs	r4, #80	@ 0x50
 800db66:	193b      	adds	r3, r7, r4
 800db68:	0592      	lsls	r2, r2, #22
 800db6a:	0d92      	lsrs	r2, r2, #22
 800db6c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800db6e:	193b      	adds	r3, r7, r4
 800db70:	881b      	ldrh	r3, [r3, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d009      	beq.n	800db8a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6818      	ldr	r0, [r3, #0]
 800db7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db7c:	6959      	ldr	r1, [r3, #20]
 800db7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db80:	895a      	ldrh	r2, [r3, #10]
 800db82:	193b      	adds	r3, r7, r4
 800db84:	881b      	ldrh	r3, [r3, #0]
 800db86:	f005 ff26 	bl	80139d6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800db8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db8c:	69da      	ldr	r2, [r3, #28]
 800db8e:	2150      	movs	r1, #80	@ 0x50
 800db90:	187b      	adds	r3, r7, r1
 800db92:	881b      	ldrh	r3, [r3, #0]
 800db94:	18d2      	adds	r2, r2, r3
 800db96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db98:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800db9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db9c:	695a      	ldr	r2, [r3, #20]
 800db9e:	187b      	adds	r3, r7, r1
 800dba0:	881b      	ldrh	r3, [r3, #0]
 800dba2:	18d2      	adds	r2, r2, r3
 800dba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dba6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800dba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbaa:	699b      	ldr	r3, [r3, #24]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d005      	beq.n	800dbbc <PCD_EP_ISR_Handler+0x550>
 800dbb0:	187b      	adds	r3, r7, r1
 800dbb2:	881a      	ldrh	r2, [r3, #0]
 800dbb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbb6:	691b      	ldr	r3, [r3, #16]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d207      	bcs.n	800dbcc <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800dbbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbbe:	781a      	ldrb	r2, [r3, #0]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	0011      	movs	r1, r2
 800dbc4:	0018      	movs	r0, r3
 800dbc6:	f007 fe52 	bl	801586e <HAL_PCD_DataOutStageCallback>
 800dbca:	e006      	b.n	800dbda <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dbd2:	0011      	movs	r1, r2
 800dbd4:	0018      	movs	r0, r3
 800dbd6:	f004 fc43 	bl	8012460 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800dbda:	244a      	movs	r4, #74	@ 0x4a
 800dbdc:	193b      	adds	r3, r7, r4
 800dbde:	881b      	ldrh	r3, [r3, #0]
 800dbe0:	2280      	movs	r2, #128	@ 0x80
 800dbe2:	4013      	ands	r3, r2
 800dbe4:	d100      	bne.n	800dbe8 <PCD_EP_ISR_Handler+0x57c>
 800dbe6:	e133      	b.n	800de50 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800dbe8:	204d      	movs	r0, #77	@ 0x4d
 800dbea:	183b      	adds	r3, r7, r0
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	1c5a      	adds	r2, r3, #1
 800dbf0:	0013      	movs	r3, r2
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	189b      	adds	r3, r3, r2
 800dbf6:	00db      	lsls	r3, r3, #3
 800dbf8:	687a      	ldr	r2, [r7, #4]
 800dbfa:	18d3      	adds	r3, r2, r3
 800dbfc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	001a      	movs	r2, r3
 800dc04:	183b      	adds	r3, r7, r0
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	009b      	lsls	r3, r3, #2
 800dc0a:	18d3      	adds	r3, r2, r3
 800dc0c:	881b      	ldrh	r3, [r3, #0]
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	2542      	movs	r5, #66	@ 0x42
 800dc12:	197b      	adds	r3, r7, r5
 800dc14:	494f      	ldr	r1, [pc, #316]	@ (800dd54 <PCD_EP_ISR_Handler+0x6e8>)
 800dc16:	400a      	ands	r2, r1
 800dc18:	801a      	strh	r2, [r3, #0]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	001a      	movs	r2, r3
 800dc20:	183b      	adds	r3, r7, r0
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	009b      	lsls	r3, r3, #2
 800dc26:	18d3      	adds	r3, r2, r3
 800dc28:	197a      	adds	r2, r7, r5
 800dc2a:	8812      	ldrh	r2, [r2, #0]
 800dc2c:	494a      	ldr	r1, [pc, #296]	@ (800dd58 <PCD_EP_ISR_Handler+0x6ec>)
 800dc2e:	430a      	orrs	r2, r1
 800dc30:	b292      	uxth	r2, r2
 800dc32:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800dc34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc36:	78db      	ldrb	r3, [r3, #3]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d000      	beq.n	800dc3e <PCD_EP_ISR_Handler+0x5d2>
 800dc3c:	e0af      	b.n	800dd9e <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800dc3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc40:	2200      	movs	r2, #0
 800dc42:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800dc44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc46:	7b1b      	ldrb	r3, [r3, #12]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d100      	bne.n	800dc4e <PCD_EP_ISR_Handler+0x5e2>
 800dc4c:	e09f      	b.n	800dd8e <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800dc4e:	193b      	adds	r3, r7, r4
 800dc50:	881b      	ldrh	r3, [r3, #0]
 800dc52:	2240      	movs	r2, #64	@ 0x40
 800dc54:	4013      	ands	r3, r2
 800dc56:	d046      	beq.n	800dce6 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800dc58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc5a:	785b      	ldrb	r3, [r3, #1]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d125      	bne.n	800dcac <PCD_EP_ISR_Handler+0x640>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2250      	movs	r2, #80	@ 0x50
 800dc6c:	5a9b      	ldrh	r3, [r3, r2]
 800dc6e:	b29b      	uxth	r3, r3
 800dc70:	001a      	movs	r2, r3
 800dc72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc74:	189b      	adds	r3, r3, r2
 800dc76:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	00da      	lsls	r2, r3, #3
 800dc7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc80:	18d3      	adds	r3, r2, r3
 800dc82:	4a33      	ldr	r2, [pc, #204]	@ (800dd50 <PCD_EP_ISR_Handler+0x6e4>)
 800dc84:	4694      	mov	ip, r2
 800dc86:	4463      	add	r3, ip
 800dc88:	623b      	str	r3, [r7, #32]
 800dc8a:	6a3b      	ldr	r3, [r7, #32]
 800dc8c:	881b      	ldrh	r3, [r3, #0]
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	059b      	lsls	r3, r3, #22
 800dc92:	0d9b      	lsrs	r3, r3, #22
 800dc94:	b29a      	uxth	r2, r3
 800dc96:	6a3b      	ldr	r3, [r7, #32]
 800dc98:	801a      	strh	r2, [r3, #0]
 800dc9a:	6a3b      	ldr	r3, [r7, #32]
 800dc9c:	881b      	ldrh	r3, [r3, #0]
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	4a2d      	ldr	r2, [pc, #180]	@ (800dd58 <PCD_EP_ISR_Handler+0x6ec>)
 800dca2:	4313      	orrs	r3, r2
 800dca4:	b29a      	uxth	r2, r3
 800dca6:	6a3b      	ldr	r3, [r7, #32]
 800dca8:	801a      	strh	r2, [r3, #0]
 800dcaa:	e070      	b.n	800dd8e <PCD_EP_ISR_Handler+0x722>
 800dcac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcae:	785b      	ldrb	r3, [r3, #1]
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d16c      	bne.n	800dd8e <PCD_EP_ISR_Handler+0x722>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	2250      	movs	r2, #80	@ 0x50
 800dcc0:	5a9b      	ldrh	r3, [r3, r2]
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	001a      	movs	r2, r3
 800dcc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcc8:	189b      	adds	r3, r3, r2
 800dcca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	00da      	lsls	r2, r3, #3
 800dcd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcd4:	18d3      	adds	r3, r2, r3
 800dcd6:	4a1e      	ldr	r2, [pc, #120]	@ (800dd50 <PCD_EP_ISR_Handler+0x6e4>)
 800dcd8:	4694      	mov	ip, r2
 800dcda:	4463      	add	r3, ip
 800dcdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dcde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce0:	2200      	movs	r2, #0
 800dce2:	801a      	strh	r2, [r3, #0]
 800dce4:	e053      	b.n	800dd8e <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dcec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcee:	785b      	ldrb	r3, [r3, #1]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d133      	bne.n	800dd5c <PCD_EP_ISR_Handler+0x6f0>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	637b      	str	r3, [r7, #52]	@ 0x34
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	2250      	movs	r2, #80	@ 0x50
 800dd00:	5a9b      	ldrh	r3, [r3, r2]
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	001a      	movs	r2, r3
 800dd06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd08:	189b      	adds	r3, r3, r2
 800dd0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	00da      	lsls	r2, r3, #3
 800dd12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd14:	18d3      	adds	r3, r2, r3
 800dd16:	4a0b      	ldr	r2, [pc, #44]	@ (800dd44 <PCD_EP_ISR_Handler+0x6d8>)
 800dd18:	4694      	mov	ip, r2
 800dd1a:	4463      	add	r3, ip
 800dd1c:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd20:	881b      	ldrh	r3, [r3, #0]
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	059b      	lsls	r3, r3, #22
 800dd26:	0d9b      	lsrs	r3, r3, #22
 800dd28:	b29a      	uxth	r2, r3
 800dd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd2c:	801a      	strh	r2, [r3, #0]
 800dd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd30:	881b      	ldrh	r3, [r3, #0]
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	4a08      	ldr	r2, [pc, #32]	@ (800dd58 <PCD_EP_ISR_Handler+0x6ec>)
 800dd36:	4313      	orrs	r3, r2
 800dd38:	b29a      	uxth	r2, r3
 800dd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd3c:	801a      	strh	r2, [r3, #0]
 800dd3e:	e026      	b.n	800dd8e <PCD_EP_ISR_Handler+0x722>
 800dd40:	00000f8f 	.word	0x00000f8f
 800dd44:	00000406 	.word	0x00000406
 800dd48:	ffff8f8f 	.word	0xffff8f8f
 800dd4c:	ffff80c0 	.word	0xffff80c0
 800dd50:	00000402 	.word	0x00000402
 800dd54:	ffff8f0f 	.word	0xffff8f0f
 800dd58:	ffff8000 	.word	0xffff8000
 800dd5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd5e:	785b      	ldrb	r3, [r3, #1]
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	d114      	bne.n	800dd8e <PCD_EP_ISR_Handler+0x722>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	2250      	movs	r2, #80	@ 0x50
 800dd6a:	5a9b      	ldrh	r3, [r3, r2]
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	001a      	movs	r2, r3
 800dd70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd72:	189b      	adds	r3, r3, r2
 800dd74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	00da      	lsls	r2, r3, #3
 800dd7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd7e:	18d3      	adds	r3, r2, r3
 800dd80:	4a3b      	ldr	r2, [pc, #236]	@ (800de70 <PCD_EP_ISR_Handler+0x804>)
 800dd82:	4694      	mov	ip, r2
 800dd84:	4463      	add	r3, ip
 800dd86:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dd88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800dd8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd90:	781a      	ldrb	r2, [r3, #0]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	0011      	movs	r1, r2
 800dd96:	0018      	movs	r0, r3
 800dd98:	f007 fd8a 	bl	80158b0 <HAL_PCD_DataInStageCallback>
 800dd9c:	e058      	b.n	800de50 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800dd9e:	234a      	movs	r3, #74	@ 0x4a
 800dda0:	18fb      	adds	r3, r7, r3
 800dda2:	881a      	ldrh	r2, [r3, #0]
 800dda4:	2380      	movs	r3, #128	@ 0x80
 800dda6:	005b      	lsls	r3, r3, #1
 800dda8:	4013      	ands	r3, r2
 800ddaa:	d149      	bne.n	800de40 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	2250      	movs	r2, #80	@ 0x50
 800ddb2:	5a9b      	ldrh	r3, [r3, r2]
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	001a      	movs	r2, r3
 800ddb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	00db      	lsls	r3, r3, #3
 800ddbe:	18d2      	adds	r2, r2, r3
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	18d3      	adds	r3, r2, r3
 800ddc6:	4a2b      	ldr	r2, [pc, #172]	@ (800de74 <PCD_EP_ISR_Handler+0x808>)
 800ddc8:	4694      	mov	ip, r2
 800ddca:	4463      	add	r3, ip
 800ddcc:	881a      	ldrh	r2, [r3, #0]
 800ddce:	2140      	movs	r1, #64	@ 0x40
 800ddd0:	187b      	adds	r3, r7, r1
 800ddd2:	0592      	lsls	r2, r2, #22
 800ddd4:	0d92      	lsrs	r2, r2, #22
 800ddd6:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800ddd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddda:	699a      	ldr	r2, [r3, #24]
 800dddc:	187b      	adds	r3, r7, r1
 800ddde:	881b      	ldrh	r3, [r3, #0]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d907      	bls.n	800ddf4 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 800dde4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dde6:	699a      	ldr	r2, [r3, #24]
 800dde8:	187b      	adds	r3, r7, r1
 800ddea:	881b      	ldrh	r3, [r3, #0]
 800ddec:	1ad2      	subs	r2, r2, r3
 800ddee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddf0:	619a      	str	r2, [r3, #24]
 800ddf2:	e002      	b.n	800ddfa <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 800ddf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800ddfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddfc:	699b      	ldr	r3, [r3, #24]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d107      	bne.n	800de12 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800de02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de04:	781a      	ldrb	r2, [r3, #0]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	0011      	movs	r1, r2
 800de0a:	0018      	movs	r0, r3
 800de0c:	f007 fd50 	bl	80158b0 <HAL_PCD_DataInStageCallback>
 800de10:	e01e      	b.n	800de50 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800de12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de14:	695a      	ldr	r2, [r3, #20]
 800de16:	2140      	movs	r1, #64	@ 0x40
 800de18:	187b      	adds	r3, r7, r1
 800de1a:	881b      	ldrh	r3, [r3, #0]
 800de1c:	18d2      	adds	r2, r2, r3
 800de1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de20:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800de22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de24:	69da      	ldr	r2, [r3, #28]
 800de26:	187b      	adds	r3, r7, r1
 800de28:	881b      	ldrh	r3, [r3, #0]
 800de2a:	18d2      	adds	r2, r2, r3
 800de2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de2e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800de36:	0011      	movs	r1, r2
 800de38:	0018      	movs	r0, r3
 800de3a:	f004 fb11 	bl	8012460 <USB_EPStartXfer>
 800de3e:	e007      	b.n	800de50 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800de40:	234a      	movs	r3, #74	@ 0x4a
 800de42:	18fb      	adds	r3, r7, r3
 800de44:	881a      	ldrh	r2, [r3, #0]
 800de46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	0018      	movs	r0, r3
 800de4c:	f000 f930 	bl	800e0b0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2244      	movs	r2, #68	@ 0x44
 800de56:	5a9b      	ldrh	r3, [r3, r2]
 800de58:	b29b      	uxth	r3, r3
 800de5a:	b21b      	sxth	r3, r3
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	da01      	bge.n	800de64 <PCD_EP_ISR_Handler+0x7f8>
 800de60:	f7ff fc0a 	bl	800d678 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800de64:	2300      	movs	r3, #0
}
 800de66:	0018      	movs	r0, r3
 800de68:	46bd      	mov	sp, r7
 800de6a:	b016      	add	sp, #88	@ 0x58
 800de6c:	bdb0      	pop	{r4, r5, r7, pc}
 800de6e:	46c0      	nop			@ (mov r8, r8)
 800de70:	00000406 	.word	0x00000406
 800de74:	00000402 	.word	0x00000402

0800de78 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800de78:	b590      	push	{r4, r7, lr}
 800de7a:	b089      	sub	sp, #36	@ 0x24
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	1dbb      	adds	r3, r7, #6
 800de84:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800de86:	1dbb      	adds	r3, r7, #6
 800de88:	881a      	ldrh	r2, [r3, #0]
 800de8a:	2380      	movs	r3, #128	@ 0x80
 800de8c:	01db      	lsls	r3, r3, #7
 800de8e:	4013      	ands	r3, r2
 800de90:	d100      	bne.n	800de94 <HAL_PCD_EP_DB_Receive+0x1c>
 800de92:	e07d      	b.n	800df90 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2250      	movs	r2, #80	@ 0x50
 800de9a:	5a9b      	ldrh	r3, [r3, r2]
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	001a      	movs	r2, r3
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	00db      	lsls	r3, r3, #3
 800dea6:	18d2      	adds	r2, r2, r3
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	18d3      	adds	r3, r2, r3
 800deae:	4a7a      	ldr	r2, [pc, #488]	@ (800e098 <HAL_PCD_EP_DB_Receive+0x220>)
 800deb0:	4694      	mov	ip, r2
 800deb2:	4463      	add	r3, ip
 800deb4:	881a      	ldrh	r2, [r3, #0]
 800deb6:	211a      	movs	r1, #26
 800deb8:	187b      	adds	r3, r7, r1
 800deba:	0592      	lsls	r2, r2, #22
 800debc:	0d92      	lsrs	r2, r2, #22
 800debe:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	699a      	ldr	r2, [r3, #24]
 800dec4:	187b      	adds	r3, r7, r1
 800dec6:	881b      	ldrh	r3, [r3, #0]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d307      	bcc.n	800dedc <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	699a      	ldr	r2, [r3, #24]
 800ded0:	187b      	adds	r3, r7, r1
 800ded2:	881b      	ldrh	r3, [r3, #0]
 800ded4:	1ad2      	subs	r2, r2, r3
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	619a      	str	r2, [r3, #24]
 800deda:	e002      	b.n	800dee2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	2200      	movs	r2, #0
 800dee0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	699b      	ldr	r3, [r3, #24]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d121      	bne.n	800df2e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	001a      	movs	r2, r3
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	18d3      	adds	r3, r2, r3
 800def8:	881b      	ldrh	r3, [r3, #0]
 800defa:	b29a      	uxth	r2, r3
 800defc:	2018      	movs	r0, #24
 800defe:	183b      	adds	r3, r7, r0
 800df00:	4966      	ldr	r1, [pc, #408]	@ (800e09c <HAL_PCD_EP_DB_Receive+0x224>)
 800df02:	400a      	ands	r2, r1
 800df04:	801a      	strh	r2, [r3, #0]
 800df06:	183b      	adds	r3, r7, r0
 800df08:	183a      	adds	r2, r7, r0
 800df0a:	8812      	ldrh	r2, [r2, #0]
 800df0c:	2180      	movs	r1, #128	@ 0x80
 800df0e:	0189      	lsls	r1, r1, #6
 800df10:	404a      	eors	r2, r1
 800df12:	801a      	strh	r2, [r3, #0]
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	001a      	movs	r2, r3
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	009b      	lsls	r3, r3, #2
 800df20:	18d3      	adds	r3, r2, r3
 800df22:	183a      	adds	r2, r7, r0
 800df24:	8812      	ldrh	r2, [r2, #0]
 800df26:	495e      	ldr	r1, [pc, #376]	@ (800e0a0 <HAL_PCD_EP_DB_Receive+0x228>)
 800df28:	430a      	orrs	r2, r1
 800df2a:	b292      	uxth	r2, r2
 800df2c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800df2e:	1dbb      	adds	r3, r7, #6
 800df30:	881b      	ldrh	r3, [r3, #0]
 800df32:	2240      	movs	r2, #64	@ 0x40
 800df34:	4013      	ands	r3, r2
 800df36:	d01a      	beq.n	800df6e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	001a      	movs	r2, r3
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	18d3      	adds	r3, r2, r3
 800df46:	881b      	ldrh	r3, [r3, #0]
 800df48:	b29a      	uxth	r2, r3
 800df4a:	2016      	movs	r0, #22
 800df4c:	183b      	adds	r3, r7, r0
 800df4e:	4955      	ldr	r1, [pc, #340]	@ (800e0a4 <HAL_PCD_EP_DB_Receive+0x22c>)
 800df50:	400a      	ands	r2, r1
 800df52:	801a      	strh	r2, [r3, #0]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	001a      	movs	r2, r3
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	18d3      	adds	r3, r2, r3
 800df62:	183a      	adds	r2, r7, r0
 800df64:	8812      	ldrh	r2, [r2, #0]
 800df66:	4950      	ldr	r1, [pc, #320]	@ (800e0a8 <HAL_PCD_EP_DB_Receive+0x230>)
 800df68:	430a      	orrs	r2, r1
 800df6a:	b292      	uxth	r2, r2
 800df6c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800df6e:	241a      	movs	r4, #26
 800df70:	193b      	adds	r3, r7, r4
 800df72:	881b      	ldrh	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d100      	bne.n	800df7a <HAL_PCD_EP_DB_Receive+0x102>
 800df78:	e086      	b.n	800e088 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	6818      	ldr	r0, [r3, #0]
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	6959      	ldr	r1, [r3, #20]
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	891a      	ldrh	r2, [r3, #8]
 800df86:	193b      	adds	r3, r7, r4
 800df88:	881b      	ldrh	r3, [r3, #0]
 800df8a:	f005 fd24 	bl	80139d6 <USB_ReadPMA>
 800df8e:	e07b      	b.n	800e088 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	2250      	movs	r2, #80	@ 0x50
 800df96:	5a9b      	ldrh	r3, [r3, r2]
 800df98:	b29b      	uxth	r3, r3
 800df9a:	001a      	movs	r2, r3
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	781b      	ldrb	r3, [r3, #0]
 800dfa0:	00db      	lsls	r3, r3, #3
 800dfa2:	18d2      	adds	r2, r2, r3
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	18d3      	adds	r3, r2, r3
 800dfaa:	4a40      	ldr	r2, [pc, #256]	@ (800e0ac <HAL_PCD_EP_DB_Receive+0x234>)
 800dfac:	4694      	mov	ip, r2
 800dfae:	4463      	add	r3, ip
 800dfb0:	881a      	ldrh	r2, [r3, #0]
 800dfb2:	211a      	movs	r1, #26
 800dfb4:	187b      	adds	r3, r7, r1
 800dfb6:	0592      	lsls	r2, r2, #22
 800dfb8:	0d92      	lsrs	r2, r2, #22
 800dfba:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	699a      	ldr	r2, [r3, #24]
 800dfc0:	187b      	adds	r3, r7, r1
 800dfc2:	881b      	ldrh	r3, [r3, #0]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d307      	bcc.n	800dfd8 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	699a      	ldr	r2, [r3, #24]
 800dfcc:	187b      	adds	r3, r7, r1
 800dfce:	881b      	ldrh	r3, [r3, #0]
 800dfd0:	1ad2      	subs	r2, r2, r3
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	619a      	str	r2, [r3, #24]
 800dfd6:	e002      	b.n	800dfde <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	699b      	ldr	r3, [r3, #24]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d121      	bne.n	800e02a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	001a      	movs	r2, r3
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	009b      	lsls	r3, r3, #2
 800dff2:	18d3      	adds	r3, r2, r3
 800dff4:	881b      	ldrh	r3, [r3, #0]
 800dff6:	b29a      	uxth	r2, r3
 800dff8:	201e      	movs	r0, #30
 800dffa:	183b      	adds	r3, r7, r0
 800dffc:	4927      	ldr	r1, [pc, #156]	@ (800e09c <HAL_PCD_EP_DB_Receive+0x224>)
 800dffe:	400a      	ands	r2, r1
 800e000:	801a      	strh	r2, [r3, #0]
 800e002:	183b      	adds	r3, r7, r0
 800e004:	183a      	adds	r2, r7, r0
 800e006:	8812      	ldrh	r2, [r2, #0]
 800e008:	2180      	movs	r1, #128	@ 0x80
 800e00a:	0189      	lsls	r1, r1, #6
 800e00c:	404a      	eors	r2, r1
 800e00e:	801a      	strh	r2, [r3, #0]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	001a      	movs	r2, r3
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	18d3      	adds	r3, r2, r3
 800e01e:	183a      	adds	r2, r7, r0
 800e020:	8812      	ldrh	r2, [r2, #0]
 800e022:	491f      	ldr	r1, [pc, #124]	@ (800e0a0 <HAL_PCD_EP_DB_Receive+0x228>)
 800e024:	430a      	orrs	r2, r1
 800e026:	b292      	uxth	r2, r2
 800e028:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800e02a:	1dbb      	adds	r3, r7, #6
 800e02c:	881b      	ldrh	r3, [r3, #0]
 800e02e:	2240      	movs	r2, #64	@ 0x40
 800e030:	4013      	ands	r3, r2
 800e032:	d11a      	bne.n	800e06a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	001a      	movs	r2, r3
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	18d3      	adds	r3, r2, r3
 800e042:	881b      	ldrh	r3, [r3, #0]
 800e044:	b29a      	uxth	r2, r3
 800e046:	201c      	movs	r0, #28
 800e048:	183b      	adds	r3, r7, r0
 800e04a:	4916      	ldr	r1, [pc, #88]	@ (800e0a4 <HAL_PCD_EP_DB_Receive+0x22c>)
 800e04c:	400a      	ands	r2, r1
 800e04e:	801a      	strh	r2, [r3, #0]
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	001a      	movs	r2, r3
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	18d3      	adds	r3, r2, r3
 800e05e:	183a      	adds	r2, r7, r0
 800e060:	8812      	ldrh	r2, [r2, #0]
 800e062:	4911      	ldr	r1, [pc, #68]	@ (800e0a8 <HAL_PCD_EP_DB_Receive+0x230>)
 800e064:	430a      	orrs	r2, r1
 800e066:	b292      	uxth	r2, r2
 800e068:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800e06a:	241a      	movs	r4, #26
 800e06c:	193b      	adds	r3, r7, r4
 800e06e:	881b      	ldrh	r3, [r3, #0]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d009      	beq.n	800e088 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	6818      	ldr	r0, [r3, #0]
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	6959      	ldr	r1, [r3, #20]
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	895a      	ldrh	r2, [r3, #10]
 800e080:	193b      	adds	r3, r7, r4
 800e082:	881b      	ldrh	r3, [r3, #0]
 800e084:	f005 fca7 	bl	80139d6 <USB_ReadPMA>
    }
  }

  return count;
 800e088:	231a      	movs	r3, #26
 800e08a:	18fb      	adds	r3, r7, r3
 800e08c:	881b      	ldrh	r3, [r3, #0]
}
 800e08e:	0018      	movs	r0, r3
 800e090:	46bd      	mov	sp, r7
 800e092:	b009      	add	sp, #36	@ 0x24
 800e094:	bd90      	pop	{r4, r7, pc}
 800e096:	46c0      	nop			@ (mov r8, r8)
 800e098:	00000402 	.word	0x00000402
 800e09c:	ffffbf8f 	.word	0xffffbf8f
 800e0a0:	ffff8080 	.word	0xffff8080
 800e0a4:	ffff8f8f 	.word	0xffff8f8f
 800e0a8:	ffff80c0 	.word	0xffff80c0
 800e0ac:	00000406 	.word	0x00000406

0800e0b0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b0a4      	sub	sp, #144	@ 0x90
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	60b9      	str	r1, [r7, #8]
 800e0ba:	1dbb      	adds	r3, r7, #6
 800e0bc:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800e0be:	1dbb      	adds	r3, r7, #6
 800e0c0:	881b      	ldrh	r3, [r3, #0]
 800e0c2:	2240      	movs	r2, #64	@ 0x40
 800e0c4:	4013      	ands	r3, r2
 800e0c6:	d100      	bne.n	800e0ca <HAL_PCD_EP_DB_Transmit+0x1a>
 800e0c8:	e1e4      	b.n	800e494 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2250      	movs	r2, #80	@ 0x50
 800e0d0:	5a9b      	ldrh	r3, [r3, r2]
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	001a      	movs	r2, r3
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	00db      	lsls	r3, r3, #3
 800e0dc:	18d2      	adds	r2, r2, r3
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	18d3      	adds	r3, r2, r3
 800e0e4:	4ad0      	ldr	r2, [pc, #832]	@ (800e428 <HAL_PCD_EP_DB_Transmit+0x378>)
 800e0e6:	4694      	mov	ip, r2
 800e0e8:	4463      	add	r3, ip
 800e0ea:	881a      	ldrh	r2, [r3, #0]
 800e0ec:	2186      	movs	r1, #134	@ 0x86
 800e0ee:	187b      	adds	r3, r7, r1
 800e0f0:	0592      	lsls	r2, r2, #22
 800e0f2:	0d92      	lsrs	r2, r2, #22
 800e0f4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	699a      	ldr	r2, [r3, #24]
 800e0fa:	187b      	adds	r3, r7, r1
 800e0fc:	881b      	ldrh	r3, [r3, #0]
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d907      	bls.n	800e112 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	699a      	ldr	r2, [r3, #24]
 800e106:	187b      	adds	r3, r7, r1
 800e108:	881b      	ldrh	r3, [r3, #0]
 800e10a:	1ad2      	subs	r2, r2, r3
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	619a      	str	r2, [r3, #24]
 800e110:	e002      	b.n	800e118 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	2200      	movs	r2, #0
 800e116:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	699b      	ldr	r3, [r3, #24]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d000      	beq.n	800e122 <HAL_PCD_EP_DB_Transmit+0x72>
 800e120:	e0b5      	b.n	800e28e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	785b      	ldrb	r3, [r3, #1]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d125      	bne.n	800e176 <HAL_PCD_EP_DB_Transmit+0xc6>
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2250      	movs	r2, #80	@ 0x50
 800e136:	5a9b      	ldrh	r3, [r3, r2]
 800e138:	b29b      	uxth	r3, r3
 800e13a:	001a      	movs	r2, r3
 800e13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e13e:	189b      	adds	r3, r3, r2
 800e140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	00da      	lsls	r2, r3, #3
 800e148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e14a:	18d3      	adds	r3, r2, r3
 800e14c:	4ab6      	ldr	r2, [pc, #728]	@ (800e428 <HAL_PCD_EP_DB_Transmit+0x378>)
 800e14e:	4694      	mov	ip, r2
 800e150:	4463      	add	r3, ip
 800e152:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e156:	881b      	ldrh	r3, [r3, #0]
 800e158:	b29b      	uxth	r3, r3
 800e15a:	059b      	lsls	r3, r3, #22
 800e15c:	0d9b      	lsrs	r3, r3, #22
 800e15e:	b29a      	uxth	r2, r3
 800e160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e162:	801a      	strh	r2, [r3, #0]
 800e164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e166:	881b      	ldrh	r3, [r3, #0]
 800e168:	b29b      	uxth	r3, r3
 800e16a:	4ab0      	ldr	r2, [pc, #704]	@ (800e42c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e16c:	4313      	orrs	r3, r2
 800e16e:	b29a      	uxth	r2, r3
 800e170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e172:	801a      	strh	r2, [r3, #0]
 800e174:	e01b      	b.n	800e1ae <HAL_PCD_EP_DB_Transmit+0xfe>
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	785b      	ldrb	r3, [r3, #1]
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	d117      	bne.n	800e1ae <HAL_PCD_EP_DB_Transmit+0xfe>
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	637b      	str	r3, [r7, #52]	@ 0x34
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	2250      	movs	r2, #80	@ 0x50
 800e18a:	5a9b      	ldrh	r3, [r3, r2]
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	001a      	movs	r2, r3
 800e190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e192:	189b      	adds	r3, r3, r2
 800e194:	637b      	str	r3, [r7, #52]	@ 0x34
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	781b      	ldrb	r3, [r3, #0]
 800e19a:	00da      	lsls	r2, r3, #3
 800e19c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e19e:	18d3      	adds	r3, r2, r3
 800e1a0:	4aa1      	ldr	r2, [pc, #644]	@ (800e428 <HAL_PCD_EP_DB_Transmit+0x378>)
 800e1a2:	4694      	mov	ip, r2
 800e1a4:	4463      	add	r3, ip
 800e1a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800e1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	785b      	ldrb	r3, [r3, #1]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d125      	bne.n	800e208 <HAL_PCD_EP_DB_Transmit+0x158>
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	61fb      	str	r3, [r7, #28]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	2250      	movs	r2, #80	@ 0x50
 800e1c8:	5a9b      	ldrh	r3, [r3, r2]
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	001a      	movs	r2, r3
 800e1ce:	69fb      	ldr	r3, [r7, #28]
 800e1d0:	189b      	adds	r3, r3, r2
 800e1d2:	61fb      	str	r3, [r7, #28]
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	00da      	lsls	r2, r3, #3
 800e1da:	69fb      	ldr	r3, [r7, #28]
 800e1dc:	18d3      	adds	r3, r2, r3
 800e1de:	4a94      	ldr	r2, [pc, #592]	@ (800e430 <HAL_PCD_EP_DB_Transmit+0x380>)
 800e1e0:	4694      	mov	ip, r2
 800e1e2:	4463      	add	r3, ip
 800e1e4:	61bb      	str	r3, [r7, #24]
 800e1e6:	69bb      	ldr	r3, [r7, #24]
 800e1e8:	881b      	ldrh	r3, [r3, #0]
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	059b      	lsls	r3, r3, #22
 800e1ee:	0d9b      	lsrs	r3, r3, #22
 800e1f0:	b29a      	uxth	r2, r3
 800e1f2:	69bb      	ldr	r3, [r7, #24]
 800e1f4:	801a      	strh	r2, [r3, #0]
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	881b      	ldrh	r3, [r3, #0]
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	4a8b      	ldr	r2, [pc, #556]	@ (800e42c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e1fe:	4313      	orrs	r3, r2
 800e200:	b29a      	uxth	r2, r3
 800e202:	69bb      	ldr	r3, [r7, #24]
 800e204:	801a      	strh	r2, [r3, #0]
 800e206:	e018      	b.n	800e23a <HAL_PCD_EP_DB_Transmit+0x18a>
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	785b      	ldrb	r3, [r3, #1]
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d114      	bne.n	800e23a <HAL_PCD_EP_DB_Transmit+0x18a>
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	2250      	movs	r2, #80	@ 0x50
 800e216:	5a9b      	ldrh	r3, [r3, r2]
 800e218:	b29b      	uxth	r3, r3
 800e21a:	001a      	movs	r2, r3
 800e21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e21e:	189b      	adds	r3, r3, r2
 800e220:	627b      	str	r3, [r7, #36]	@ 0x24
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	00da      	lsls	r2, r3, #3
 800e228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e22a:	18d3      	adds	r3, r2, r3
 800e22c:	4a80      	ldr	r2, [pc, #512]	@ (800e430 <HAL_PCD_EP_DB_Transmit+0x380>)
 800e22e:	4694      	mov	ip, r2
 800e230:	4463      	add	r3, ip
 800e232:	623b      	str	r3, [r7, #32]
 800e234:	6a3b      	ldr	r3, [r7, #32]
 800e236:	2200      	movs	r2, #0
 800e238:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	781a      	ldrb	r2, [r3, #0]
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	0011      	movs	r1, r2
 800e242:	0018      	movs	r0, r3
 800e244:	f007 fb34 	bl	80158b0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800e248:	1dbb      	adds	r3, r7, #6
 800e24a:	881a      	ldrh	r2, [r3, #0]
 800e24c:	2380      	movs	r3, #128	@ 0x80
 800e24e:	01db      	lsls	r3, r3, #7
 800e250:	4013      	ands	r3, r2
 800e252:	d100      	bne.n	800e256 <HAL_PCD_EP_DB_Transmit+0x1a6>
 800e254:	e309      	b.n	800e86a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	001a      	movs	r2, r3
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	18d3      	adds	r3, r2, r3
 800e264:	881b      	ldrh	r3, [r3, #0]
 800e266:	b29a      	uxth	r2, r3
 800e268:	2016      	movs	r0, #22
 800e26a:	183b      	adds	r3, r7, r0
 800e26c:	4971      	ldr	r1, [pc, #452]	@ (800e434 <HAL_PCD_EP_DB_Transmit+0x384>)
 800e26e:	400a      	ands	r2, r1
 800e270:	801a      	strh	r2, [r3, #0]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	001a      	movs	r2, r3
 800e278:	68bb      	ldr	r3, [r7, #8]
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	009b      	lsls	r3, r3, #2
 800e27e:	18d3      	adds	r3, r2, r3
 800e280:	183a      	adds	r2, r7, r0
 800e282:	8812      	ldrh	r2, [r2, #0]
 800e284:	496c      	ldr	r1, [pc, #432]	@ (800e438 <HAL_PCD_EP_DB_Transmit+0x388>)
 800e286:	430a      	orrs	r2, r1
 800e288:	b292      	uxth	r2, r2
 800e28a:	801a      	strh	r2, [r3, #0]
 800e28c:	e2ed      	b.n	800e86a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800e28e:	1dbb      	adds	r3, r7, #6
 800e290:	881a      	ldrh	r2, [r3, #0]
 800e292:	2380      	movs	r3, #128	@ 0x80
 800e294:	01db      	lsls	r3, r3, #7
 800e296:	4013      	ands	r3, r2
 800e298:	d01a      	beq.n	800e2d0 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	001a      	movs	r2, r3
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	009b      	lsls	r3, r3, #2
 800e2a6:	18d3      	adds	r3, r2, r3
 800e2a8:	881b      	ldrh	r3, [r3, #0]
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	208a      	movs	r0, #138	@ 0x8a
 800e2ae:	183b      	adds	r3, r7, r0
 800e2b0:	4960      	ldr	r1, [pc, #384]	@ (800e434 <HAL_PCD_EP_DB_Transmit+0x384>)
 800e2b2:	400a      	ands	r2, r1
 800e2b4:	801a      	strh	r2, [r3, #0]
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	001a      	movs	r2, r3
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	18d3      	adds	r3, r2, r3
 800e2c4:	183a      	adds	r2, r7, r0
 800e2c6:	8812      	ldrh	r2, [r2, #0]
 800e2c8:	495b      	ldr	r1, [pc, #364]	@ (800e438 <HAL_PCD_EP_DB_Transmit+0x388>)
 800e2ca:	430a      	orrs	r2, r1
 800e2cc:	b292      	uxth	r2, r2
 800e2ce:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	2224      	movs	r2, #36	@ 0x24
 800e2d4:	5c9b      	ldrb	r3, [r3, r2]
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	d000      	beq.n	800e2dc <HAL_PCD_EP_DB_Transmit+0x22c>
 800e2da:	e2c6      	b.n	800e86a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	695a      	ldr	r2, [r3, #20]
 800e2e0:	2186      	movs	r1, #134	@ 0x86
 800e2e2:	187b      	adds	r3, r7, r1
 800e2e4:	881b      	ldrh	r3, [r3, #0]
 800e2e6:	18d2      	adds	r2, r2, r3
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	69da      	ldr	r2, [r3, #28]
 800e2f0:	187b      	adds	r3, r7, r1
 800e2f2:	881b      	ldrh	r3, [r3, #0]
 800e2f4:	18d2      	adds	r2, r2, r3
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	6a1a      	ldr	r2, [r3, #32]
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	691b      	ldr	r3, [r3, #16]
 800e302:	429a      	cmp	r2, r3
 800e304:	d30c      	bcc.n	800e320 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	691b      	ldr	r3, [r3, #16]
 800e30a:	218c      	movs	r1, #140	@ 0x8c
 800e30c:	187a      	adds	r2, r7, r1
 800e30e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	6a1a      	ldr	r2, [r3, #32]
 800e314:	187b      	adds	r3, r7, r1
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	1ad2      	subs	r2, r2, r3
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	621a      	str	r2, [r3, #32]
 800e31e:	e01a      	b.n	800e356 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	6a1b      	ldr	r3, [r3, #32]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d10a      	bne.n	800e33e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800e328:	2386      	movs	r3, #134	@ 0x86
 800e32a:	18fb      	adds	r3, r7, r3
 800e32c:	881b      	ldrh	r3, [r3, #0]
 800e32e:	228c      	movs	r2, #140	@ 0x8c
 800e330:	18ba      	adds	r2, r7, r2
 800e332:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	2224      	movs	r2, #36	@ 0x24
 800e338:	2100      	movs	r1, #0
 800e33a:	5499      	strb	r1, [r3, r2]
 800e33c:	e00b      	b.n	800e356 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	2224      	movs	r2, #36	@ 0x24
 800e342:	2100      	movs	r1, #0
 800e344:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	6a1b      	ldr	r3, [r3, #32]
 800e34a:	228c      	movs	r2, #140	@ 0x8c
 800e34c:	18ba      	adds	r2, r7, r2
 800e34e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	2200      	movs	r2, #0
 800e354:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	785b      	ldrb	r3, [r3, #1]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d000      	beq.n	800e360 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800e35e:	e06d      	b.n	800e43c <HAL_PCD_EP_DB_Transmit+0x38c>
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	2250      	movs	r2, #80	@ 0x50
 800e36c:	5a9b      	ldrh	r3, [r3, r2]
 800e36e:	b29b      	uxth	r3, r3
 800e370:	001a      	movs	r2, r3
 800e372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e374:	189b      	adds	r3, r3, r2
 800e376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	00da      	lsls	r2, r3, #3
 800e37e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e380:	18d3      	adds	r3, r2, r3
 800e382:	4a29      	ldr	r2, [pc, #164]	@ (800e428 <HAL_PCD_EP_DB_Transmit+0x378>)
 800e384:	4694      	mov	ip, r2
 800e386:	4463      	add	r3, ip
 800e388:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e38c:	881b      	ldrh	r3, [r3, #0]
 800e38e:	b29b      	uxth	r3, r3
 800e390:	059b      	lsls	r3, r3, #22
 800e392:	0d9b      	lsrs	r3, r3, #22
 800e394:	b29a      	uxth	r2, r3
 800e396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e398:	801a      	strh	r2, [r3, #0]
 800e39a:	228c      	movs	r2, #140	@ 0x8c
 800e39c:	18bb      	adds	r3, r7, r2
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2b3e      	cmp	r3, #62	@ 0x3e
 800e3a2:	d91a      	bls.n	800e3da <HAL_PCD_EP_DB_Transmit+0x32a>
 800e3a4:	18bb      	adds	r3, r7, r2
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	095b      	lsrs	r3, r3, #5
 800e3aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e3ac:	18bb      	adds	r3, r7, r2
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	221f      	movs	r2, #31
 800e3b2:	4013      	ands	r3, r2
 800e3b4:	d102      	bne.n	800e3bc <HAL_PCD_EP_DB_Transmit+0x30c>
 800e3b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3b8:	3b01      	subs	r3, #1
 800e3ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3be:	881b      	ldrh	r3, [r3, #0]
 800e3c0:	b29a      	uxth	r2, r3
 800e3c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	029b      	lsls	r3, r3, #10
 800e3c8:	b29b      	uxth	r3, r3
 800e3ca:	4313      	orrs	r3, r2
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	4a17      	ldr	r2, [pc, #92]	@ (800e42c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	b29a      	uxth	r2, r3
 800e3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3d6:	801a      	strh	r2, [r3, #0]
 800e3d8:	e04f      	b.n	800e47a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e3da:	238c      	movs	r3, #140	@ 0x8c
 800e3dc:	18fb      	adds	r3, r7, r3
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d108      	bne.n	800e3f6 <HAL_PCD_EP_DB_Transmit+0x346>
 800e3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3e6:	881b      	ldrh	r3, [r3, #0]
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	4a10      	ldr	r2, [pc, #64]	@ (800e42c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e3ec:	4313      	orrs	r3, r2
 800e3ee:	b29a      	uxth	r2, r3
 800e3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3f2:	801a      	strh	r2, [r3, #0]
 800e3f4:	e041      	b.n	800e47a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e3f6:	228c      	movs	r2, #140	@ 0x8c
 800e3f8:	18bb      	adds	r3, r7, r2
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	085b      	lsrs	r3, r3, #1
 800e3fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e400:	18bb      	adds	r3, r7, r2
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	2201      	movs	r2, #1
 800e406:	4013      	ands	r3, r2
 800e408:	d002      	beq.n	800e410 <HAL_PCD_EP_DB_Transmit+0x360>
 800e40a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e40c:	3301      	adds	r3, #1
 800e40e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e412:	881b      	ldrh	r3, [r3, #0]
 800e414:	b29a      	uxth	r2, r3
 800e416:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e418:	b29b      	uxth	r3, r3
 800e41a:	029b      	lsls	r3, r3, #10
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	4313      	orrs	r3, r2
 800e420:	b29a      	uxth	r2, r3
 800e422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e424:	801a      	strh	r2, [r3, #0]
 800e426:	e028      	b.n	800e47a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e428:	00000402 	.word	0x00000402
 800e42c:	ffff8000 	.word	0xffff8000
 800e430:	00000406 	.word	0x00000406
 800e434:	ffff8f8f 	.word	0xffff8f8f
 800e438:	ffffc080 	.word	0xffffc080
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	785b      	ldrb	r3, [r3, #1]
 800e440:	2b01      	cmp	r3, #1
 800e442:	d11a      	bne.n	800e47a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	647b      	str	r3, [r7, #68]	@ 0x44
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2250      	movs	r2, #80	@ 0x50
 800e450:	5a9b      	ldrh	r3, [r3, r2]
 800e452:	b29b      	uxth	r3, r3
 800e454:	001a      	movs	r2, r3
 800e456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e458:	189b      	adds	r3, r3, r2
 800e45a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	00da      	lsls	r2, r3, #3
 800e462:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e464:	18d3      	adds	r3, r2, r3
 800e466:	4adb      	ldr	r2, [pc, #876]	@ (800e7d4 <HAL_PCD_EP_DB_Transmit+0x724>)
 800e468:	4694      	mov	ip, r2
 800e46a:	4463      	add	r3, ip
 800e46c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e46e:	238c      	movs	r3, #140	@ 0x8c
 800e470:	18fb      	adds	r3, r7, r3
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	b29a      	uxth	r2, r3
 800e476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e478:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6818      	ldr	r0, [r3, #0]
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	6959      	ldr	r1, [r3, #20]
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	891a      	ldrh	r2, [r3, #8]
 800e486:	238c      	movs	r3, #140	@ 0x8c
 800e488:	18fb      	adds	r3, r7, r3
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	f005 fa59 	bl	8013944 <USB_WritePMA>
 800e492:	e1ea      	b.n	800e86a <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	2250      	movs	r2, #80	@ 0x50
 800e49a:	5a9b      	ldrh	r3, [r3, r2]
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	001a      	movs	r2, r3
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	00db      	lsls	r3, r3, #3
 800e4a6:	18d2      	adds	r2, r2, r3
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	18d3      	adds	r3, r2, r3
 800e4ae:	4aca      	ldr	r2, [pc, #808]	@ (800e7d8 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e4b0:	4694      	mov	ip, r2
 800e4b2:	4463      	add	r3, ip
 800e4b4:	881a      	ldrh	r2, [r3, #0]
 800e4b6:	2186      	movs	r1, #134	@ 0x86
 800e4b8:	187b      	adds	r3, r7, r1
 800e4ba:	0592      	lsls	r2, r2, #22
 800e4bc:	0d92      	lsrs	r2, r2, #22
 800e4be:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	699a      	ldr	r2, [r3, #24]
 800e4c4:	187b      	adds	r3, r7, r1
 800e4c6:	881b      	ldrh	r3, [r3, #0]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d307      	bcc.n	800e4dc <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	699a      	ldr	r2, [r3, #24]
 800e4d0:	187b      	adds	r3, r7, r1
 800e4d2:	881b      	ldrh	r3, [r3, #0]
 800e4d4:	1ad2      	subs	r2, r2, r3
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	619a      	str	r2, [r3, #24]
 800e4da:	e002      	b.n	800e4e2 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	699b      	ldr	r3, [r3, #24]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d000      	beq.n	800e4ec <HAL_PCD_EP_DB_Transmit+0x43c>
 800e4ea:	e0bb      	b.n	800e664 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	785b      	ldrb	r3, [r3, #1]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d125      	bne.n	800e540 <HAL_PCD_EP_DB_Transmit+0x490>
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2250      	movs	r2, #80	@ 0x50
 800e500:	5a9b      	ldrh	r3, [r3, r2]
 800e502:	b29b      	uxth	r3, r3
 800e504:	001a      	movs	r2, r3
 800e506:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e508:	189b      	adds	r3, r3, r2
 800e50a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	00da      	lsls	r2, r3, #3
 800e512:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e514:	18d3      	adds	r3, r2, r3
 800e516:	4aaf      	ldr	r2, [pc, #700]	@ (800e7d4 <HAL_PCD_EP_DB_Transmit+0x724>)
 800e518:	4694      	mov	ip, r2
 800e51a:	4463      	add	r3, ip
 800e51c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e51e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e520:	881b      	ldrh	r3, [r3, #0]
 800e522:	b29b      	uxth	r3, r3
 800e524:	059b      	lsls	r3, r3, #22
 800e526:	0d9b      	lsrs	r3, r3, #22
 800e528:	b29a      	uxth	r2, r3
 800e52a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e52c:	801a      	strh	r2, [r3, #0]
 800e52e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e530:	881b      	ldrh	r3, [r3, #0]
 800e532:	b29b      	uxth	r3, r3
 800e534:	4aa9      	ldr	r2, [pc, #676]	@ (800e7dc <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e536:	4313      	orrs	r3, r2
 800e538:	b29a      	uxth	r2, r3
 800e53a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e53c:	801a      	strh	r2, [r3, #0]
 800e53e:	e01b      	b.n	800e578 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	785b      	ldrb	r3, [r3, #1]
 800e544:	2b01      	cmp	r3, #1
 800e546:	d117      	bne.n	800e578 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	667b      	str	r3, [r7, #100]	@ 0x64
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2250      	movs	r2, #80	@ 0x50
 800e554:	5a9b      	ldrh	r3, [r3, r2]
 800e556:	b29b      	uxth	r3, r3
 800e558:	001a      	movs	r2, r3
 800e55a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e55c:	189b      	adds	r3, r3, r2
 800e55e:	667b      	str	r3, [r7, #100]	@ 0x64
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	00da      	lsls	r2, r3, #3
 800e566:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e568:	18d3      	adds	r3, r2, r3
 800e56a:	4a9a      	ldr	r2, [pc, #616]	@ (800e7d4 <HAL_PCD_EP_DB_Transmit+0x724>)
 800e56c:	4694      	mov	ip, r2
 800e56e:	4463      	add	r3, ip
 800e570:	663b      	str	r3, [r7, #96]	@ 0x60
 800e572:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e574:	2200      	movs	r2, #0
 800e576:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	677b      	str	r3, [r7, #116]	@ 0x74
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	785b      	ldrb	r3, [r3, #1]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d12b      	bne.n	800e5de <HAL_PCD_EP_DB_Transmit+0x52e>
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	2250      	movs	r2, #80	@ 0x50
 800e592:	5a9b      	ldrh	r3, [r3, r2]
 800e594:	b29b      	uxth	r3, r3
 800e596:	001a      	movs	r2, r3
 800e598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e59a:	189b      	adds	r3, r3, r2
 800e59c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	00da      	lsls	r2, r3, #3
 800e5a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5a6:	18d3      	adds	r3, r2, r3
 800e5a8:	4a8b      	ldr	r2, [pc, #556]	@ (800e7d8 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e5aa:	4694      	mov	ip, r2
 800e5ac:	4463      	add	r3, ip
 800e5ae:	2180      	movs	r1, #128	@ 0x80
 800e5b0:	187a      	adds	r2, r7, r1
 800e5b2:	6013      	str	r3, [r2, #0]
 800e5b4:	187b      	adds	r3, r7, r1
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	881b      	ldrh	r3, [r3, #0]
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	059b      	lsls	r3, r3, #22
 800e5be:	0d9b      	lsrs	r3, r3, #22
 800e5c0:	b29a      	uxth	r2, r3
 800e5c2:	187b      	adds	r3, r7, r1
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	801a      	strh	r2, [r3, #0]
 800e5c8:	187b      	adds	r3, r7, r1
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	881b      	ldrh	r3, [r3, #0]
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	4a82      	ldr	r2, [pc, #520]	@ (800e7dc <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e5d2:	4313      	orrs	r3, r2
 800e5d4:	b29a      	uxth	r2, r3
 800e5d6:	187b      	adds	r3, r7, r1
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	801a      	strh	r2, [r3, #0]
 800e5dc:	e018      	b.n	800e610 <HAL_PCD_EP_DB_Transmit+0x560>
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	785b      	ldrb	r3, [r3, #1]
 800e5e2:	2b01      	cmp	r3, #1
 800e5e4:	d114      	bne.n	800e610 <HAL_PCD_EP_DB_Transmit+0x560>
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2250      	movs	r2, #80	@ 0x50
 800e5ec:	5a9b      	ldrh	r3, [r3, r2]
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	001a      	movs	r2, r3
 800e5f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e5f4:	189b      	adds	r3, r3, r2
 800e5f6:	677b      	str	r3, [r7, #116]	@ 0x74
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	781b      	ldrb	r3, [r3, #0]
 800e5fc:	00da      	lsls	r2, r3, #3
 800e5fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e600:	18d3      	adds	r3, r2, r3
 800e602:	4a75      	ldr	r2, [pc, #468]	@ (800e7d8 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e604:	4694      	mov	ip, r2
 800e606:	4463      	add	r3, ip
 800e608:	673b      	str	r3, [r7, #112]	@ 0x70
 800e60a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e60c:	2200      	movs	r2, #0
 800e60e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	781a      	ldrb	r2, [r3, #0]
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	0011      	movs	r1, r2
 800e618:	0018      	movs	r0, r3
 800e61a:	f007 f949 	bl	80158b0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800e61e:	1dbb      	adds	r3, r7, #6
 800e620:	881a      	ldrh	r2, [r3, #0]
 800e622:	2380      	movs	r3, #128	@ 0x80
 800e624:	01db      	lsls	r3, r3, #7
 800e626:	4013      	ands	r3, r2
 800e628:	d000      	beq.n	800e62c <HAL_PCD_EP_DB_Transmit+0x57c>
 800e62a:	e11e      	b.n	800e86a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	001a      	movs	r2, r3
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	009b      	lsls	r3, r3, #2
 800e638:	18d3      	adds	r3, r2, r3
 800e63a:	881b      	ldrh	r3, [r3, #0]
 800e63c:	b29a      	uxth	r2, r3
 800e63e:	2088      	movs	r0, #136	@ 0x88
 800e640:	183b      	adds	r3, r7, r0
 800e642:	4967      	ldr	r1, [pc, #412]	@ (800e7e0 <HAL_PCD_EP_DB_Transmit+0x730>)
 800e644:	400a      	ands	r2, r1
 800e646:	801a      	strh	r2, [r3, #0]
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	001a      	movs	r2, r3
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	009b      	lsls	r3, r3, #2
 800e654:	18d3      	adds	r3, r2, r3
 800e656:	183a      	adds	r2, r7, r0
 800e658:	8812      	ldrh	r2, [r2, #0]
 800e65a:	4962      	ldr	r1, [pc, #392]	@ (800e7e4 <HAL_PCD_EP_DB_Transmit+0x734>)
 800e65c:	430a      	orrs	r2, r1
 800e65e:	b292      	uxth	r2, r2
 800e660:	801a      	strh	r2, [r3, #0]
 800e662:	e102      	b.n	800e86a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800e664:	1dbb      	adds	r3, r7, #6
 800e666:	881a      	ldrh	r2, [r3, #0]
 800e668:	2380      	movs	r3, #128	@ 0x80
 800e66a:	01db      	lsls	r3, r3, #7
 800e66c:	4013      	ands	r3, r2
 800e66e:	d11a      	bne.n	800e6a6 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	001a      	movs	r2, r3
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	009b      	lsls	r3, r3, #2
 800e67c:	18d3      	adds	r3, r2, r3
 800e67e:	881b      	ldrh	r3, [r3, #0]
 800e680:	b29a      	uxth	r2, r3
 800e682:	204e      	movs	r0, #78	@ 0x4e
 800e684:	183b      	adds	r3, r7, r0
 800e686:	4956      	ldr	r1, [pc, #344]	@ (800e7e0 <HAL_PCD_EP_DB_Transmit+0x730>)
 800e688:	400a      	ands	r2, r1
 800e68a:	801a      	strh	r2, [r3, #0]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	001a      	movs	r2, r3
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	18d3      	adds	r3, r2, r3
 800e69a:	183a      	adds	r2, r7, r0
 800e69c:	8812      	ldrh	r2, [r2, #0]
 800e69e:	4951      	ldr	r1, [pc, #324]	@ (800e7e4 <HAL_PCD_EP_DB_Transmit+0x734>)
 800e6a0:	430a      	orrs	r2, r1
 800e6a2:	b292      	uxth	r2, r2
 800e6a4:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	2224      	movs	r2, #36	@ 0x24
 800e6aa:	5c9b      	ldrb	r3, [r3, r2]
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d000      	beq.n	800e6b2 <HAL_PCD_EP_DB_Transmit+0x602>
 800e6b0:	e0db      	b.n	800e86a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	695a      	ldr	r2, [r3, #20]
 800e6b6:	2186      	movs	r1, #134	@ 0x86
 800e6b8:	187b      	adds	r3, r7, r1
 800e6ba:	881b      	ldrh	r3, [r3, #0]
 800e6bc:	18d2      	adds	r2, r2, r3
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	69da      	ldr	r2, [r3, #28]
 800e6c6:	187b      	adds	r3, r7, r1
 800e6c8:	881b      	ldrh	r3, [r3, #0]
 800e6ca:	18d2      	adds	r2, r2, r3
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	6a1a      	ldr	r2, [r3, #32]
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	691b      	ldr	r3, [r3, #16]
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d30c      	bcc.n	800e6f6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	691b      	ldr	r3, [r3, #16]
 800e6e0:	218c      	movs	r1, #140	@ 0x8c
 800e6e2:	187a      	adds	r2, r7, r1
 800e6e4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	6a1a      	ldr	r2, [r3, #32]
 800e6ea:	187b      	adds	r3, r7, r1
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	1ad2      	subs	r2, r2, r3
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	621a      	str	r2, [r3, #32]
 800e6f4:	e01a      	b.n	800e72c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	6a1b      	ldr	r3, [r3, #32]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d10a      	bne.n	800e714 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800e6fe:	2386      	movs	r3, #134	@ 0x86
 800e700:	18fb      	adds	r3, r7, r3
 800e702:	881b      	ldrh	r3, [r3, #0]
 800e704:	228c      	movs	r2, #140	@ 0x8c
 800e706:	18ba      	adds	r2, r7, r2
 800e708:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	2224      	movs	r2, #36	@ 0x24
 800e70e:	2100      	movs	r1, #0
 800e710:	5499      	strb	r1, [r3, r2]
 800e712:	e00b      	b.n	800e72c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	6a1b      	ldr	r3, [r3, #32]
 800e718:	228c      	movs	r2, #140	@ 0x8c
 800e71a:	18ba      	adds	r2, r7, r2
 800e71c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	2200      	movs	r2, #0
 800e722:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	2224      	movs	r2, #36	@ 0x24
 800e728:	2100      	movs	r1, #0
 800e72a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	657b      	str	r3, [r7, #84]	@ 0x54
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	785b      	ldrb	r3, [r3, #1]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d000      	beq.n	800e73c <HAL_PCD_EP_DB_Transmit+0x68c>
 800e73a:	e06e      	b.n	800e81a <HAL_PCD_EP_DB_Transmit+0x76a>
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	2250      	movs	r2, #80	@ 0x50
 800e748:	5a9b      	ldrh	r3, [r3, r2]
 800e74a:	b29b      	uxth	r3, r3
 800e74c:	001a      	movs	r2, r3
 800e74e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e750:	189b      	adds	r3, r3, r2
 800e752:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	00da      	lsls	r2, r3, #3
 800e75a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e75c:	18d3      	adds	r3, r2, r3
 800e75e:	4a1e      	ldr	r2, [pc, #120]	@ (800e7d8 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e760:	4694      	mov	ip, r2
 800e762:	4463      	add	r3, ip
 800e764:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e766:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e768:	881b      	ldrh	r3, [r3, #0]
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	059b      	lsls	r3, r3, #22
 800e76e:	0d9b      	lsrs	r3, r3, #22
 800e770:	b29a      	uxth	r2, r3
 800e772:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e774:	801a      	strh	r2, [r3, #0]
 800e776:	228c      	movs	r2, #140	@ 0x8c
 800e778:	18bb      	adds	r3, r7, r2
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	2b3e      	cmp	r3, #62	@ 0x3e
 800e77e:	d91a      	bls.n	800e7b6 <HAL_PCD_EP_DB_Transmit+0x706>
 800e780:	18bb      	adds	r3, r7, r2
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	095b      	lsrs	r3, r3, #5
 800e786:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e788:	18bb      	adds	r3, r7, r2
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	221f      	movs	r2, #31
 800e78e:	4013      	ands	r3, r2
 800e790:	d102      	bne.n	800e798 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800e792:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e794:	3b01      	subs	r3, #1
 800e796:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e798:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e79a:	881b      	ldrh	r3, [r3, #0]
 800e79c:	b29a      	uxth	r2, r3
 800e79e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	029b      	lsls	r3, r3, #10
 800e7a4:	b29b      	uxth	r3, r3
 800e7a6:	4313      	orrs	r3, r2
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	4a0c      	ldr	r2, [pc, #48]	@ (800e7dc <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e7ac:	4313      	orrs	r3, r2
 800e7ae:	b29a      	uxth	r2, r3
 800e7b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e7b2:	801a      	strh	r2, [r3, #0]
 800e7b4:	e04d      	b.n	800e852 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e7b6:	238c      	movs	r3, #140	@ 0x8c
 800e7b8:	18fb      	adds	r3, r7, r3
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d113      	bne.n	800e7e8 <HAL_PCD_EP_DB_Transmit+0x738>
 800e7c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e7c2:	881b      	ldrh	r3, [r3, #0]
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	4a05      	ldr	r2, [pc, #20]	@ (800e7dc <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	b29a      	uxth	r2, r3
 800e7cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e7ce:	801a      	strh	r2, [r3, #0]
 800e7d0:	e03f      	b.n	800e852 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e7d2:	46c0      	nop			@ (mov r8, r8)
 800e7d4:	00000402 	.word	0x00000402
 800e7d8:	00000406 	.word	0x00000406
 800e7dc:	ffff8000 	.word	0xffff8000
 800e7e0:	ffff8f8f 	.word	0xffff8f8f
 800e7e4:	ffffc080 	.word	0xffffc080
 800e7e8:	228c      	movs	r2, #140	@ 0x8c
 800e7ea:	18bb      	adds	r3, r7, r2
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	085b      	lsrs	r3, r3, #1
 800e7f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e7f2:	18bb      	adds	r3, r7, r2
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	4013      	ands	r3, r2
 800e7fa:	d002      	beq.n	800e802 <HAL_PCD_EP_DB_Transmit+0x752>
 800e7fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e7fe:	3301      	adds	r3, #1
 800e800:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e802:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e804:	881b      	ldrh	r3, [r3, #0]
 800e806:	b29a      	uxth	r2, r3
 800e808:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	029b      	lsls	r3, r3, #10
 800e80e:	b29b      	uxth	r3, r3
 800e810:	4313      	orrs	r3, r2
 800e812:	b29a      	uxth	r2, r3
 800e814:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e816:	801a      	strh	r2, [r3, #0]
 800e818:	e01b      	b.n	800e852 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	785b      	ldrb	r3, [r3, #1]
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d117      	bne.n	800e852 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	2250      	movs	r2, #80	@ 0x50
 800e828:	5a9b      	ldrh	r3, [r3, r2]
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	001a      	movs	r2, r3
 800e82e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e830:	189b      	adds	r3, r3, r2
 800e832:	657b      	str	r3, [r7, #84]	@ 0x54
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	00da      	lsls	r2, r3, #3
 800e83a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e83c:	18d3      	adds	r3, r2, r3
 800e83e:	4a21      	ldr	r2, [pc, #132]	@ (800e8c4 <HAL_PCD_EP_DB_Transmit+0x814>)
 800e840:	4694      	mov	ip, r2
 800e842:	4463      	add	r3, ip
 800e844:	653b      	str	r3, [r7, #80]	@ 0x50
 800e846:	238c      	movs	r3, #140	@ 0x8c
 800e848:	18fb      	adds	r3, r7, r3
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e850:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	6818      	ldr	r0, [r3, #0]
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	6959      	ldr	r1, [r3, #20]
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	895a      	ldrh	r2, [r3, #10]
 800e85e:	238c      	movs	r3, #140	@ 0x8c
 800e860:	18fb      	adds	r3, r7, r3
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	b29b      	uxth	r3, r3
 800e866:	f005 f86d 	bl	8013944 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	001a      	movs	r2, r3
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	18d3      	adds	r3, r2, r3
 800e878:	881b      	ldrh	r3, [r3, #0]
 800e87a:	b29a      	uxth	r2, r3
 800e87c:	2014      	movs	r0, #20
 800e87e:	183b      	adds	r3, r7, r0
 800e880:	4911      	ldr	r1, [pc, #68]	@ (800e8c8 <HAL_PCD_EP_DB_Transmit+0x818>)
 800e882:	400a      	ands	r2, r1
 800e884:	801a      	strh	r2, [r3, #0]
 800e886:	183b      	adds	r3, r7, r0
 800e888:	183a      	adds	r2, r7, r0
 800e88a:	8812      	ldrh	r2, [r2, #0]
 800e88c:	2110      	movs	r1, #16
 800e88e:	404a      	eors	r2, r1
 800e890:	801a      	strh	r2, [r3, #0]
 800e892:	183b      	adds	r3, r7, r0
 800e894:	183a      	adds	r2, r7, r0
 800e896:	8812      	ldrh	r2, [r2, #0]
 800e898:	2120      	movs	r1, #32
 800e89a:	404a      	eors	r2, r1
 800e89c:	801a      	strh	r2, [r3, #0]
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	001a      	movs	r2, r3
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	009b      	lsls	r3, r3, #2
 800e8aa:	18d3      	adds	r3, r2, r3
 800e8ac:	183a      	adds	r2, r7, r0
 800e8ae:	8812      	ldrh	r2, [r2, #0]
 800e8b0:	4906      	ldr	r1, [pc, #24]	@ (800e8cc <HAL_PCD_EP_DB_Transmit+0x81c>)
 800e8b2:	430a      	orrs	r2, r1
 800e8b4:	b292      	uxth	r2, r2
 800e8b6:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800e8b8:	2300      	movs	r3, #0
}
 800e8ba:	0018      	movs	r0, r3
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	b024      	add	sp, #144	@ 0x90
 800e8c0:	bd80      	pop	{r7, pc}
 800e8c2:	46c0      	nop			@ (mov r8, r8)
 800e8c4:	00000406 	.word	0x00000406
 800e8c8:	ffff8fbf 	.word	0xffff8fbf
 800e8cc:	ffff8080 	.word	0xffff8080

0800e8d0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800e8d0:	b590      	push	{r4, r7, lr}
 800e8d2:	b087      	sub	sp, #28
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	0008      	movs	r0, r1
 800e8da:	0011      	movs	r1, r2
 800e8dc:	607b      	str	r3, [r7, #4]
 800e8de:	240a      	movs	r4, #10
 800e8e0:	193b      	adds	r3, r7, r4
 800e8e2:	1c02      	adds	r2, r0, #0
 800e8e4:	801a      	strh	r2, [r3, #0]
 800e8e6:	2308      	movs	r3, #8
 800e8e8:	18fb      	adds	r3, r7, r3
 800e8ea:	1c0a      	adds	r2, r1, #0
 800e8ec:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800e8ee:	0021      	movs	r1, r4
 800e8f0:	187b      	adds	r3, r7, r1
 800e8f2:	881b      	ldrh	r3, [r3, #0]
 800e8f4:	2280      	movs	r2, #128	@ 0x80
 800e8f6:	4013      	ands	r3, r2
 800e8f8:	b29b      	uxth	r3, r3
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d00c      	beq.n	800e918 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e8fe:	187b      	adds	r3, r7, r1
 800e900:	881b      	ldrh	r3, [r3, #0]
 800e902:	2207      	movs	r2, #7
 800e904:	4013      	ands	r3, r2
 800e906:	1c5a      	adds	r2, r3, #1
 800e908:	0013      	movs	r3, r2
 800e90a:	009b      	lsls	r3, r3, #2
 800e90c:	189b      	adds	r3, r3, r2
 800e90e:	00db      	lsls	r3, r3, #3
 800e910:	68fa      	ldr	r2, [r7, #12]
 800e912:	18d3      	adds	r3, r2, r3
 800e914:	617b      	str	r3, [r7, #20]
 800e916:	e00b      	b.n	800e930 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e918:	230a      	movs	r3, #10
 800e91a:	18fb      	adds	r3, r7, r3
 800e91c:	881a      	ldrh	r2, [r3, #0]
 800e91e:	0013      	movs	r3, r2
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	189b      	adds	r3, r3, r2
 800e924:	00db      	lsls	r3, r3, #3
 800e926:	3369      	adds	r3, #105	@ 0x69
 800e928:	33ff      	adds	r3, #255	@ 0xff
 800e92a:	68fa      	ldr	r2, [r7, #12]
 800e92c:	18d3      	adds	r3, r2, r3
 800e92e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800e930:	2308      	movs	r3, #8
 800e932:	18fb      	adds	r3, r7, r3
 800e934:	881b      	ldrh	r3, [r3, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d107      	bne.n	800e94a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	2200      	movs	r2, #0
 800e93e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	b29a      	uxth	r2, r3
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	80da      	strh	r2, [r3, #6]
 800e948:	e00b      	b.n	800e962 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	2201      	movs	r2, #1
 800e94e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	b29a      	uxth	r2, r3
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	0c1b      	lsrs	r3, r3, #16
 800e95c:	b29a      	uxth	r2, r3
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e962:	2300      	movs	r3, #0
}
 800e964:	0018      	movs	r0, r3
 800e966:	46bd      	mov	sp, r7
 800e968:	b007      	add	sp, #28
 800e96a:	bd90      	pop	{r4, r7, pc}

0800e96c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b084      	sub	sp, #16
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	23ba      	movs	r3, #186	@ 0xba
 800e97e:	009b      	lsls	r3, r3, #2
 800e980:	2101      	movs	r1, #1
 800e982:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	23b8      	movs	r3, #184	@ 0xb8
 800e988:	009b      	lsls	r3, r3, #2
 800e98a:	2100      	movs	r1, #0
 800e98c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2254      	movs	r2, #84	@ 0x54
 800e992:	5a9b      	ldrh	r3, [r3, r2]
 800e994:	b29b      	uxth	r3, r3
 800e996:	2201      	movs	r2, #1
 800e998:	4313      	orrs	r3, r2
 800e99a:	b299      	uxth	r1, r3
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2254      	movs	r2, #84	@ 0x54
 800e9a0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	2254      	movs	r2, #84	@ 0x54
 800e9a6:	5a9b      	ldrh	r3, [r3, r2]
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	2202      	movs	r2, #2
 800e9ac:	4313      	orrs	r3, r2
 800e9ae:	b299      	uxth	r1, r3
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2254      	movs	r2, #84	@ 0x54
 800e9b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800e9b6:	2300      	movs	r3, #0
}
 800e9b8:	0018      	movs	r0, r3
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	b004      	add	sp, #16
 800e9be:	bd80      	pop	{r7, pc}

0800e9c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	000a      	movs	r2, r1
 800e9ca:	1cfb      	adds	r3, r7, #3
 800e9cc:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800e9ce:	46c0      	nop			@ (mov r8, r8)
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	b002      	add	sp, #8
 800e9d4:	bd80      	pop	{r7, pc}
	...

0800e9d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e9d8:	b5b0      	push	{r4, r5, r7, lr}
 800e9da:	b08a      	sub	sp, #40	@ 0x28
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d102      	bne.n	800e9ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800e9e6:	2301      	movs	r3, #1
 800e9e8:	f000 fbbf 	bl	800f16a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e9ec:	4bc9      	ldr	r3, [pc, #804]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800e9ee:	68db      	ldr	r3, [r3, #12]
 800e9f0:	220c      	movs	r2, #12
 800e9f2:	4013      	ands	r3, r2
 800e9f4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e9f6:	4bc7      	ldr	r3, [pc, #796]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800e9f8:	68da      	ldr	r2, [r3, #12]
 800e9fa:	2380      	movs	r3, #128	@ 0x80
 800e9fc:	025b      	lsls	r3, r3, #9
 800e9fe:	4013      	ands	r3, r2
 800ea00:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2201      	movs	r2, #1
 800ea08:	4013      	ands	r3, r2
 800ea0a:	d100      	bne.n	800ea0e <HAL_RCC_OscConfig+0x36>
 800ea0c:	e07e      	b.n	800eb0c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ea0e:	69fb      	ldr	r3, [r7, #28]
 800ea10:	2b08      	cmp	r3, #8
 800ea12:	d007      	beq.n	800ea24 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800ea14:	69fb      	ldr	r3, [r7, #28]
 800ea16:	2b0c      	cmp	r3, #12
 800ea18:	d112      	bne.n	800ea40 <HAL_RCC_OscConfig+0x68>
 800ea1a:	69ba      	ldr	r2, [r7, #24]
 800ea1c:	2380      	movs	r3, #128	@ 0x80
 800ea1e:	025b      	lsls	r3, r3, #9
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d10d      	bne.n	800ea40 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ea24:	4bbb      	ldr	r3, [pc, #748]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ea26:	681a      	ldr	r2, [r3, #0]
 800ea28:	2380      	movs	r3, #128	@ 0x80
 800ea2a:	029b      	lsls	r3, r3, #10
 800ea2c:	4013      	ands	r3, r2
 800ea2e:	d100      	bne.n	800ea32 <HAL_RCC_OscConfig+0x5a>
 800ea30:	e06b      	b.n	800eb0a <HAL_RCC_OscConfig+0x132>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d167      	bne.n	800eb0a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	f000 fb95 	bl	800f16a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	685a      	ldr	r2, [r3, #4]
 800ea44:	2380      	movs	r3, #128	@ 0x80
 800ea46:	025b      	lsls	r3, r3, #9
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d107      	bne.n	800ea5c <HAL_RCC_OscConfig+0x84>
 800ea4c:	4bb1      	ldr	r3, [pc, #708]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ea4e:	681a      	ldr	r2, [r3, #0]
 800ea50:	4bb0      	ldr	r3, [pc, #704]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ea52:	2180      	movs	r1, #128	@ 0x80
 800ea54:	0249      	lsls	r1, r1, #9
 800ea56:	430a      	orrs	r2, r1
 800ea58:	601a      	str	r2, [r3, #0]
 800ea5a:	e027      	b.n	800eaac <HAL_RCC_OscConfig+0xd4>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	685a      	ldr	r2, [r3, #4]
 800ea60:	23a0      	movs	r3, #160	@ 0xa0
 800ea62:	02db      	lsls	r3, r3, #11
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d10e      	bne.n	800ea86 <HAL_RCC_OscConfig+0xae>
 800ea68:	4baa      	ldr	r3, [pc, #680]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	4ba9      	ldr	r3, [pc, #676]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ea6e:	2180      	movs	r1, #128	@ 0x80
 800ea70:	02c9      	lsls	r1, r1, #11
 800ea72:	430a      	orrs	r2, r1
 800ea74:	601a      	str	r2, [r3, #0]
 800ea76:	4ba7      	ldr	r3, [pc, #668]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	4ba6      	ldr	r3, [pc, #664]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ea7c:	2180      	movs	r1, #128	@ 0x80
 800ea7e:	0249      	lsls	r1, r1, #9
 800ea80:	430a      	orrs	r2, r1
 800ea82:	601a      	str	r2, [r3, #0]
 800ea84:	e012      	b.n	800eaac <HAL_RCC_OscConfig+0xd4>
 800ea86:	4ba3      	ldr	r3, [pc, #652]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ea88:	681a      	ldr	r2, [r3, #0]
 800ea8a:	4ba2      	ldr	r3, [pc, #648]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ea8c:	49a2      	ldr	r1, [pc, #648]	@ (800ed18 <HAL_RCC_OscConfig+0x340>)
 800ea8e:	400a      	ands	r2, r1
 800ea90:	601a      	str	r2, [r3, #0]
 800ea92:	4ba0      	ldr	r3, [pc, #640]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	2380      	movs	r3, #128	@ 0x80
 800ea98:	025b      	lsls	r3, r3, #9
 800ea9a:	4013      	ands	r3, r2
 800ea9c:	60fb      	str	r3, [r7, #12]
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	4b9c      	ldr	r3, [pc, #624]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	4b9b      	ldr	r3, [pc, #620]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800eaa6:	499d      	ldr	r1, [pc, #628]	@ (800ed1c <HAL_RCC_OscConfig+0x344>)
 800eaa8:	400a      	ands	r2, r1
 800eaaa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d015      	beq.n	800eae0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eab4:	f7fa fc0e 	bl	80092d4 <HAL_GetTick>
 800eab8:	0003      	movs	r3, r0
 800eaba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800eabc:	e009      	b.n	800ead2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800eabe:	f7fa fc09 	bl	80092d4 <HAL_GetTick>
 800eac2:	0002      	movs	r2, r0
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	1ad3      	subs	r3, r2, r3
 800eac8:	2b64      	cmp	r3, #100	@ 0x64
 800eaca:	d902      	bls.n	800ead2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800eacc:	2303      	movs	r3, #3
 800eace:	f000 fb4c 	bl	800f16a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ead2:	4b90      	ldr	r3, [pc, #576]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	2380      	movs	r3, #128	@ 0x80
 800ead8:	029b      	lsls	r3, r3, #10
 800eada:	4013      	ands	r3, r2
 800eadc:	d0ef      	beq.n	800eabe <HAL_RCC_OscConfig+0xe6>
 800eade:	e015      	b.n	800eb0c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eae0:	f7fa fbf8 	bl	80092d4 <HAL_GetTick>
 800eae4:	0003      	movs	r3, r0
 800eae6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800eae8:	e008      	b.n	800eafc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800eaea:	f7fa fbf3 	bl	80092d4 <HAL_GetTick>
 800eaee:	0002      	movs	r2, r0
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	1ad3      	subs	r3, r2, r3
 800eaf4:	2b64      	cmp	r3, #100	@ 0x64
 800eaf6:	d901      	bls.n	800eafc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800eaf8:	2303      	movs	r3, #3
 800eafa:	e336      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800eafc:	4b85      	ldr	r3, [pc, #532]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	2380      	movs	r3, #128	@ 0x80
 800eb02:	029b      	lsls	r3, r3, #10
 800eb04:	4013      	ands	r3, r2
 800eb06:	d1f0      	bne.n	800eaea <HAL_RCC_OscConfig+0x112>
 800eb08:	e000      	b.n	800eb0c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eb0a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2202      	movs	r2, #2
 800eb12:	4013      	ands	r3, r2
 800eb14:	d100      	bne.n	800eb18 <HAL_RCC_OscConfig+0x140>
 800eb16:	e099      	b.n	800ec4c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	68db      	ldr	r3, [r3, #12]
 800eb1c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800eb1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb20:	2220      	movs	r2, #32
 800eb22:	4013      	ands	r3, r2
 800eb24:	d009      	beq.n	800eb3a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800eb26:	4b7b      	ldr	r3, [pc, #492]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	4b7a      	ldr	r3, [pc, #488]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800eb2c:	2120      	movs	r1, #32
 800eb2e:	430a      	orrs	r2, r1
 800eb30:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800eb32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb34:	2220      	movs	r2, #32
 800eb36:	4393      	bics	r3, r2
 800eb38:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800eb3a:	69fb      	ldr	r3, [r7, #28]
 800eb3c:	2b04      	cmp	r3, #4
 800eb3e:	d005      	beq.n	800eb4c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800eb40:	69fb      	ldr	r3, [r7, #28]
 800eb42:	2b0c      	cmp	r3, #12
 800eb44:	d13e      	bne.n	800ebc4 <HAL_RCC_OscConfig+0x1ec>
 800eb46:	69bb      	ldr	r3, [r7, #24]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d13b      	bne.n	800ebc4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800eb4c:	4b71      	ldr	r3, [pc, #452]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	2204      	movs	r2, #4
 800eb52:	4013      	ands	r3, r2
 800eb54:	d004      	beq.n	800eb60 <HAL_RCC_OscConfig+0x188>
 800eb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d101      	bne.n	800eb60 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800eb5c:	2301      	movs	r3, #1
 800eb5e:	e304      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eb60:	4b6c      	ldr	r3, [pc, #432]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	4a6e      	ldr	r2, [pc, #440]	@ (800ed20 <HAL_RCC_OscConfig+0x348>)
 800eb66:	4013      	ands	r3, r2
 800eb68:	0019      	movs	r1, r3
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	691b      	ldr	r3, [r3, #16]
 800eb6e:	021a      	lsls	r2, r3, #8
 800eb70:	4b68      	ldr	r3, [pc, #416]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800eb72:	430a      	orrs	r2, r1
 800eb74:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800eb76:	4b67      	ldr	r3, [pc, #412]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	2209      	movs	r2, #9
 800eb7c:	4393      	bics	r3, r2
 800eb7e:	0019      	movs	r1, r3
 800eb80:	4b64      	ldr	r3, [pc, #400]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800eb82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb84:	430a      	orrs	r2, r1
 800eb86:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800eb88:	f000 fc42 	bl	800f410 <HAL_RCC_GetSysClockFreq>
 800eb8c:	0001      	movs	r1, r0
 800eb8e:	4b61      	ldr	r3, [pc, #388]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	091b      	lsrs	r3, r3, #4
 800eb94:	220f      	movs	r2, #15
 800eb96:	4013      	ands	r3, r2
 800eb98:	4a62      	ldr	r2, [pc, #392]	@ (800ed24 <HAL_RCC_OscConfig+0x34c>)
 800eb9a:	5cd3      	ldrb	r3, [r2, r3]
 800eb9c:	000a      	movs	r2, r1
 800eb9e:	40da      	lsrs	r2, r3
 800eba0:	4b61      	ldr	r3, [pc, #388]	@ (800ed28 <HAL_RCC_OscConfig+0x350>)
 800eba2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800eba4:	4b61      	ldr	r3, [pc, #388]	@ (800ed2c <HAL_RCC_OscConfig+0x354>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2513      	movs	r5, #19
 800ebaa:	197c      	adds	r4, r7, r5
 800ebac:	0018      	movs	r0, r3
 800ebae:	f7fa fb4b 	bl	8009248 <HAL_InitTick>
 800ebb2:	0003      	movs	r3, r0
 800ebb4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800ebb6:	197b      	adds	r3, r7, r5
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d046      	beq.n	800ec4c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800ebbe:	197b      	adds	r3, r7, r5
 800ebc0:	781b      	ldrb	r3, [r3, #0]
 800ebc2:	e2d2      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800ebc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d027      	beq.n	800ec1a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800ebca:	4b52      	ldr	r3, [pc, #328]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2209      	movs	r2, #9
 800ebd0:	4393      	bics	r3, r2
 800ebd2:	0019      	movs	r1, r3
 800ebd4:	4b4f      	ldr	r3, [pc, #316]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ebd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebd8:	430a      	orrs	r2, r1
 800ebda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ebdc:	f7fa fb7a 	bl	80092d4 <HAL_GetTick>
 800ebe0:	0003      	movs	r3, r0
 800ebe2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ebe4:	e008      	b.n	800ebf8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ebe6:	f7fa fb75 	bl	80092d4 <HAL_GetTick>
 800ebea:	0002      	movs	r2, r0
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	2b02      	cmp	r3, #2
 800ebf2:	d901      	bls.n	800ebf8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800ebf4:	2303      	movs	r3, #3
 800ebf6:	e2b8      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ebf8:	4b46      	ldr	r3, [pc, #280]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	2204      	movs	r2, #4
 800ebfe:	4013      	ands	r3, r2
 800ec00:	d0f1      	beq.n	800ebe6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ec02:	4b44      	ldr	r3, [pc, #272]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	4a46      	ldr	r2, [pc, #280]	@ (800ed20 <HAL_RCC_OscConfig+0x348>)
 800ec08:	4013      	ands	r3, r2
 800ec0a:	0019      	movs	r1, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	691b      	ldr	r3, [r3, #16]
 800ec10:	021a      	lsls	r2, r3, #8
 800ec12:	4b40      	ldr	r3, [pc, #256]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ec14:	430a      	orrs	r2, r1
 800ec16:	605a      	str	r2, [r3, #4]
 800ec18:	e018      	b.n	800ec4c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ec1a:	4b3e      	ldr	r3, [pc, #248]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	4b3d      	ldr	r3, [pc, #244]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ec20:	2101      	movs	r1, #1
 800ec22:	438a      	bics	r2, r1
 800ec24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ec26:	f7fa fb55 	bl	80092d4 <HAL_GetTick>
 800ec2a:	0003      	movs	r3, r0
 800ec2c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ec2e:	e008      	b.n	800ec42 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ec30:	f7fa fb50 	bl	80092d4 <HAL_GetTick>
 800ec34:	0002      	movs	r2, r0
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	1ad3      	subs	r3, r2, r3
 800ec3a:	2b02      	cmp	r3, #2
 800ec3c:	d901      	bls.n	800ec42 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800ec3e:	2303      	movs	r3, #3
 800ec40:	e293      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ec42:	4b34      	ldr	r3, [pc, #208]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	2204      	movs	r2, #4
 800ec48:	4013      	ands	r3, r2
 800ec4a:	d1f1      	bne.n	800ec30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	2210      	movs	r2, #16
 800ec52:	4013      	ands	r3, r2
 800ec54:	d100      	bne.n	800ec58 <HAL_RCC_OscConfig+0x280>
 800ec56:	e0a2      	b.n	800ed9e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ec58:	69fb      	ldr	r3, [r7, #28]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d140      	bne.n	800ece0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ec5e:	4b2d      	ldr	r3, [pc, #180]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	2380      	movs	r3, #128	@ 0x80
 800ec64:	009b      	lsls	r3, r3, #2
 800ec66:	4013      	ands	r3, r2
 800ec68:	d005      	beq.n	800ec76 <HAL_RCC_OscConfig+0x29e>
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	69db      	ldr	r3, [r3, #28]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d101      	bne.n	800ec76 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ec72:	2301      	movs	r3, #1
 800ec74:	e279      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ec76:	4b27      	ldr	r3, [pc, #156]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ec78:	685b      	ldr	r3, [r3, #4]
 800ec7a:	4a2d      	ldr	r2, [pc, #180]	@ (800ed30 <HAL_RCC_OscConfig+0x358>)
 800ec7c:	4013      	ands	r3, r2
 800ec7e:	0019      	movs	r1, r3
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ec84:	4b23      	ldr	r3, [pc, #140]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ec86:	430a      	orrs	r2, r1
 800ec88:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ec8a:	4b22      	ldr	r3, [pc, #136]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	021b      	lsls	r3, r3, #8
 800ec90:	0a19      	lsrs	r1, r3, #8
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6a1b      	ldr	r3, [r3, #32]
 800ec96:	061a      	lsls	r2, r3, #24
 800ec98:	4b1e      	ldr	r3, [pc, #120]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ec9a:	430a      	orrs	r2, r1
 800ec9c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eca2:	0b5b      	lsrs	r3, r3, #13
 800eca4:	3301      	adds	r3, #1
 800eca6:	2280      	movs	r2, #128	@ 0x80
 800eca8:	0212      	lsls	r2, r2, #8
 800ecaa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800ecac:	4b19      	ldr	r3, [pc, #100]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ecae:	68db      	ldr	r3, [r3, #12]
 800ecb0:	091b      	lsrs	r3, r3, #4
 800ecb2:	210f      	movs	r1, #15
 800ecb4:	400b      	ands	r3, r1
 800ecb6:	491b      	ldr	r1, [pc, #108]	@ (800ed24 <HAL_RCC_OscConfig+0x34c>)
 800ecb8:	5ccb      	ldrb	r3, [r1, r3]
 800ecba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800ecbc:	4b1a      	ldr	r3, [pc, #104]	@ (800ed28 <HAL_RCC_OscConfig+0x350>)
 800ecbe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800ecc0:	4b1a      	ldr	r3, [pc, #104]	@ (800ed2c <HAL_RCC_OscConfig+0x354>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2513      	movs	r5, #19
 800ecc6:	197c      	adds	r4, r7, r5
 800ecc8:	0018      	movs	r0, r3
 800ecca:	f7fa fabd 	bl	8009248 <HAL_InitTick>
 800ecce:	0003      	movs	r3, r0
 800ecd0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800ecd2:	197b      	adds	r3, r7, r5
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d061      	beq.n	800ed9e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800ecda:	197b      	adds	r3, r7, r5
 800ecdc:	781b      	ldrb	r3, [r3, #0]
 800ecde:	e244      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	69db      	ldr	r3, [r3, #28]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d040      	beq.n	800ed6a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ece8:	4b0a      	ldr	r3, [pc, #40]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	4b09      	ldr	r3, [pc, #36]	@ (800ed14 <HAL_RCC_OscConfig+0x33c>)
 800ecee:	2180      	movs	r1, #128	@ 0x80
 800ecf0:	0049      	lsls	r1, r1, #1
 800ecf2:	430a      	orrs	r2, r1
 800ecf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ecf6:	f7fa faed 	bl	80092d4 <HAL_GetTick>
 800ecfa:	0003      	movs	r3, r0
 800ecfc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800ecfe:	e019      	b.n	800ed34 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ed00:	f7fa fae8 	bl	80092d4 <HAL_GetTick>
 800ed04:	0002      	movs	r2, r0
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	1ad3      	subs	r3, r2, r3
 800ed0a:	2b02      	cmp	r3, #2
 800ed0c:	d912      	bls.n	800ed34 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800ed0e:	2303      	movs	r3, #3
 800ed10:	e22b      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
 800ed12:	46c0      	nop			@ (mov r8, r8)
 800ed14:	40021000 	.word	0x40021000
 800ed18:	fffeffff 	.word	0xfffeffff
 800ed1c:	fffbffff 	.word	0xfffbffff
 800ed20:	ffffe0ff 	.word	0xffffe0ff
 800ed24:	0801a410 	.word	0x0801a410
 800ed28:	2000013c 	.word	0x2000013c
 800ed2c:	20000150 	.word	0x20000150
 800ed30:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800ed34:	4bca      	ldr	r3, [pc, #808]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ed36:	681a      	ldr	r2, [r3, #0]
 800ed38:	2380      	movs	r3, #128	@ 0x80
 800ed3a:	009b      	lsls	r3, r3, #2
 800ed3c:	4013      	ands	r3, r2
 800ed3e:	d0df      	beq.n	800ed00 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ed40:	4bc7      	ldr	r3, [pc, #796]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	4ac7      	ldr	r2, [pc, #796]	@ (800f064 <HAL_RCC_OscConfig+0x68c>)
 800ed46:	4013      	ands	r3, r2
 800ed48:	0019      	movs	r1, r3
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ed4e:	4bc4      	ldr	r3, [pc, #784]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ed50:	430a      	orrs	r2, r1
 800ed52:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ed54:	4bc2      	ldr	r3, [pc, #776]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ed56:	685b      	ldr	r3, [r3, #4]
 800ed58:	021b      	lsls	r3, r3, #8
 800ed5a:	0a19      	lsrs	r1, r3, #8
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6a1b      	ldr	r3, [r3, #32]
 800ed60:	061a      	lsls	r2, r3, #24
 800ed62:	4bbf      	ldr	r3, [pc, #764]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ed64:	430a      	orrs	r2, r1
 800ed66:	605a      	str	r2, [r3, #4]
 800ed68:	e019      	b.n	800ed9e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ed6a:	4bbd      	ldr	r3, [pc, #756]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	4bbc      	ldr	r3, [pc, #752]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ed70:	49bd      	ldr	r1, [pc, #756]	@ (800f068 <HAL_RCC_OscConfig+0x690>)
 800ed72:	400a      	ands	r2, r1
 800ed74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed76:	f7fa faad 	bl	80092d4 <HAL_GetTick>
 800ed7a:	0003      	movs	r3, r0
 800ed7c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800ed7e:	e008      	b.n	800ed92 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ed80:	f7fa faa8 	bl	80092d4 <HAL_GetTick>
 800ed84:	0002      	movs	r2, r0
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	1ad3      	subs	r3, r2, r3
 800ed8a:	2b02      	cmp	r3, #2
 800ed8c:	d901      	bls.n	800ed92 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800ed8e:	2303      	movs	r3, #3
 800ed90:	e1eb      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800ed92:	4bb3      	ldr	r3, [pc, #716]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	2380      	movs	r3, #128	@ 0x80
 800ed98:	009b      	lsls	r3, r3, #2
 800ed9a:	4013      	ands	r3, r2
 800ed9c:	d1f0      	bne.n	800ed80 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	2208      	movs	r2, #8
 800eda4:	4013      	ands	r3, r2
 800eda6:	d036      	beq.n	800ee16 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	695b      	ldr	r3, [r3, #20]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d019      	beq.n	800ede4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800edb0:	4bab      	ldr	r3, [pc, #684]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800edb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800edb4:	4baa      	ldr	r3, [pc, #680]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800edb6:	2101      	movs	r1, #1
 800edb8:	430a      	orrs	r2, r1
 800edba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800edbc:	f7fa fa8a 	bl	80092d4 <HAL_GetTick>
 800edc0:	0003      	movs	r3, r0
 800edc2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800edc4:	e008      	b.n	800edd8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800edc6:	f7fa fa85 	bl	80092d4 <HAL_GetTick>
 800edca:	0002      	movs	r2, r0
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	1ad3      	subs	r3, r2, r3
 800edd0:	2b02      	cmp	r3, #2
 800edd2:	d901      	bls.n	800edd8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800edd4:	2303      	movs	r3, #3
 800edd6:	e1c8      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800edd8:	4ba1      	ldr	r3, [pc, #644]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800edda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eddc:	2202      	movs	r2, #2
 800edde:	4013      	ands	r3, r2
 800ede0:	d0f1      	beq.n	800edc6 <HAL_RCC_OscConfig+0x3ee>
 800ede2:	e018      	b.n	800ee16 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ede4:	4b9e      	ldr	r3, [pc, #632]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ede6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ede8:	4b9d      	ldr	r3, [pc, #628]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800edea:	2101      	movs	r1, #1
 800edec:	438a      	bics	r2, r1
 800edee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800edf0:	f7fa fa70 	bl	80092d4 <HAL_GetTick>
 800edf4:	0003      	movs	r3, r0
 800edf6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800edf8:	e008      	b.n	800ee0c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800edfa:	f7fa fa6b 	bl	80092d4 <HAL_GetTick>
 800edfe:	0002      	movs	r2, r0
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	1ad3      	subs	r3, r2, r3
 800ee04:	2b02      	cmp	r3, #2
 800ee06:	d901      	bls.n	800ee0c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800ee08:	2303      	movs	r3, #3
 800ee0a:	e1ae      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ee0c:	4b94      	ldr	r3, [pc, #592]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ee0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee10:	2202      	movs	r2, #2
 800ee12:	4013      	ands	r3, r2
 800ee14:	d1f1      	bne.n	800edfa <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	2204      	movs	r2, #4
 800ee1c:	4013      	ands	r3, r2
 800ee1e:	d100      	bne.n	800ee22 <HAL_RCC_OscConfig+0x44a>
 800ee20:	e0ae      	b.n	800ef80 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ee22:	2023      	movs	r0, #35	@ 0x23
 800ee24:	183b      	adds	r3, r7, r0
 800ee26:	2200      	movs	r2, #0
 800ee28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ee2a:	4b8d      	ldr	r3, [pc, #564]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ee2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ee2e:	2380      	movs	r3, #128	@ 0x80
 800ee30:	055b      	lsls	r3, r3, #21
 800ee32:	4013      	ands	r3, r2
 800ee34:	d109      	bne.n	800ee4a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ee36:	4b8a      	ldr	r3, [pc, #552]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ee38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ee3a:	4b89      	ldr	r3, [pc, #548]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ee3c:	2180      	movs	r1, #128	@ 0x80
 800ee3e:	0549      	lsls	r1, r1, #21
 800ee40:	430a      	orrs	r2, r1
 800ee42:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800ee44:	183b      	adds	r3, r7, r0
 800ee46:	2201      	movs	r2, #1
 800ee48:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ee4a:	4b88      	ldr	r3, [pc, #544]	@ (800f06c <HAL_RCC_OscConfig+0x694>)
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	2380      	movs	r3, #128	@ 0x80
 800ee50:	005b      	lsls	r3, r3, #1
 800ee52:	4013      	ands	r3, r2
 800ee54:	d11a      	bne.n	800ee8c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ee56:	4b85      	ldr	r3, [pc, #532]	@ (800f06c <HAL_RCC_OscConfig+0x694>)
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	4b84      	ldr	r3, [pc, #528]	@ (800f06c <HAL_RCC_OscConfig+0x694>)
 800ee5c:	2180      	movs	r1, #128	@ 0x80
 800ee5e:	0049      	lsls	r1, r1, #1
 800ee60:	430a      	orrs	r2, r1
 800ee62:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ee64:	f7fa fa36 	bl	80092d4 <HAL_GetTick>
 800ee68:	0003      	movs	r3, r0
 800ee6a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ee6c:	e008      	b.n	800ee80 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ee6e:	f7fa fa31 	bl	80092d4 <HAL_GetTick>
 800ee72:	0002      	movs	r2, r0
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	1ad3      	subs	r3, r2, r3
 800ee78:	2b64      	cmp	r3, #100	@ 0x64
 800ee7a:	d901      	bls.n	800ee80 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800ee7c:	2303      	movs	r3, #3
 800ee7e:	e174      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ee80:	4b7a      	ldr	r3, [pc, #488]	@ (800f06c <HAL_RCC_OscConfig+0x694>)
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	2380      	movs	r3, #128	@ 0x80
 800ee86:	005b      	lsls	r3, r3, #1
 800ee88:	4013      	ands	r3, r2
 800ee8a:	d0f0      	beq.n	800ee6e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	689a      	ldr	r2, [r3, #8]
 800ee90:	2380      	movs	r3, #128	@ 0x80
 800ee92:	005b      	lsls	r3, r3, #1
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d107      	bne.n	800eea8 <HAL_RCC_OscConfig+0x4d0>
 800ee98:	4b71      	ldr	r3, [pc, #452]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ee9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee9c:	4b70      	ldr	r3, [pc, #448]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ee9e:	2180      	movs	r1, #128	@ 0x80
 800eea0:	0049      	lsls	r1, r1, #1
 800eea2:	430a      	orrs	r2, r1
 800eea4:	651a      	str	r2, [r3, #80]	@ 0x50
 800eea6:	e031      	b.n	800ef0c <HAL_RCC_OscConfig+0x534>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	689b      	ldr	r3, [r3, #8]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d10c      	bne.n	800eeca <HAL_RCC_OscConfig+0x4f2>
 800eeb0:	4b6b      	ldr	r3, [pc, #428]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800eeb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eeb4:	4b6a      	ldr	r3, [pc, #424]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800eeb6:	496c      	ldr	r1, [pc, #432]	@ (800f068 <HAL_RCC_OscConfig+0x690>)
 800eeb8:	400a      	ands	r2, r1
 800eeba:	651a      	str	r2, [r3, #80]	@ 0x50
 800eebc:	4b68      	ldr	r3, [pc, #416]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800eebe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eec0:	4b67      	ldr	r3, [pc, #412]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800eec2:	496b      	ldr	r1, [pc, #428]	@ (800f070 <HAL_RCC_OscConfig+0x698>)
 800eec4:	400a      	ands	r2, r1
 800eec6:	651a      	str	r2, [r3, #80]	@ 0x50
 800eec8:	e020      	b.n	800ef0c <HAL_RCC_OscConfig+0x534>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	689a      	ldr	r2, [r3, #8]
 800eece:	23a0      	movs	r3, #160	@ 0xa0
 800eed0:	00db      	lsls	r3, r3, #3
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d10e      	bne.n	800eef4 <HAL_RCC_OscConfig+0x51c>
 800eed6:	4b62      	ldr	r3, [pc, #392]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800eed8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eeda:	4b61      	ldr	r3, [pc, #388]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800eedc:	2180      	movs	r1, #128	@ 0x80
 800eede:	00c9      	lsls	r1, r1, #3
 800eee0:	430a      	orrs	r2, r1
 800eee2:	651a      	str	r2, [r3, #80]	@ 0x50
 800eee4:	4b5e      	ldr	r3, [pc, #376]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800eee6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eee8:	4b5d      	ldr	r3, [pc, #372]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800eeea:	2180      	movs	r1, #128	@ 0x80
 800eeec:	0049      	lsls	r1, r1, #1
 800eeee:	430a      	orrs	r2, r1
 800eef0:	651a      	str	r2, [r3, #80]	@ 0x50
 800eef2:	e00b      	b.n	800ef0c <HAL_RCC_OscConfig+0x534>
 800eef4:	4b5a      	ldr	r3, [pc, #360]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800eef6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eef8:	4b59      	ldr	r3, [pc, #356]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800eefa:	495b      	ldr	r1, [pc, #364]	@ (800f068 <HAL_RCC_OscConfig+0x690>)
 800eefc:	400a      	ands	r2, r1
 800eefe:	651a      	str	r2, [r3, #80]	@ 0x50
 800ef00:	4b57      	ldr	r3, [pc, #348]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ef02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef04:	4b56      	ldr	r3, [pc, #344]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ef06:	495a      	ldr	r1, [pc, #360]	@ (800f070 <HAL_RCC_OscConfig+0x698>)
 800ef08:	400a      	ands	r2, r1
 800ef0a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	689b      	ldr	r3, [r3, #8]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d015      	beq.n	800ef40 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ef14:	f7fa f9de 	bl	80092d4 <HAL_GetTick>
 800ef18:	0003      	movs	r3, r0
 800ef1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ef1c:	e009      	b.n	800ef32 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ef1e:	f7fa f9d9 	bl	80092d4 <HAL_GetTick>
 800ef22:	0002      	movs	r2, r0
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	1ad3      	subs	r3, r2, r3
 800ef28:	4a52      	ldr	r2, [pc, #328]	@ (800f074 <HAL_RCC_OscConfig+0x69c>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d901      	bls.n	800ef32 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800ef2e:	2303      	movs	r3, #3
 800ef30:	e11b      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ef32:	4b4b      	ldr	r3, [pc, #300]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ef34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef36:	2380      	movs	r3, #128	@ 0x80
 800ef38:	009b      	lsls	r3, r3, #2
 800ef3a:	4013      	ands	r3, r2
 800ef3c:	d0ef      	beq.n	800ef1e <HAL_RCC_OscConfig+0x546>
 800ef3e:	e014      	b.n	800ef6a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ef40:	f7fa f9c8 	bl	80092d4 <HAL_GetTick>
 800ef44:	0003      	movs	r3, r0
 800ef46:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ef48:	e009      	b.n	800ef5e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ef4a:	f7fa f9c3 	bl	80092d4 <HAL_GetTick>
 800ef4e:	0002      	movs	r2, r0
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	1ad3      	subs	r3, r2, r3
 800ef54:	4a47      	ldr	r2, [pc, #284]	@ (800f074 <HAL_RCC_OscConfig+0x69c>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d901      	bls.n	800ef5e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800ef5a:	2303      	movs	r3, #3
 800ef5c:	e105      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ef5e:	4b40      	ldr	r3, [pc, #256]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ef60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ef62:	2380      	movs	r3, #128	@ 0x80
 800ef64:	009b      	lsls	r3, r3, #2
 800ef66:	4013      	ands	r3, r2
 800ef68:	d1ef      	bne.n	800ef4a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ef6a:	2323      	movs	r3, #35	@ 0x23
 800ef6c:	18fb      	adds	r3, r7, r3
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	d105      	bne.n	800ef80 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ef74:	4b3a      	ldr	r3, [pc, #232]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ef76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef78:	4b39      	ldr	r3, [pc, #228]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ef7a:	493f      	ldr	r1, [pc, #252]	@ (800f078 <HAL_RCC_OscConfig+0x6a0>)
 800ef7c:	400a      	ands	r2, r1
 800ef7e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2220      	movs	r2, #32
 800ef86:	4013      	ands	r3, r2
 800ef88:	d049      	beq.n	800f01e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	699b      	ldr	r3, [r3, #24]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d026      	beq.n	800efe0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800ef92:	4b33      	ldr	r3, [pc, #204]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ef94:	689a      	ldr	r2, [r3, #8]
 800ef96:	4b32      	ldr	r3, [pc, #200]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800ef98:	2101      	movs	r1, #1
 800ef9a:	430a      	orrs	r2, r1
 800ef9c:	609a      	str	r2, [r3, #8]
 800ef9e:	4b30      	ldr	r3, [pc, #192]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800efa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800efa2:	4b2f      	ldr	r3, [pc, #188]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800efa4:	2101      	movs	r1, #1
 800efa6:	430a      	orrs	r2, r1
 800efa8:	635a      	str	r2, [r3, #52]	@ 0x34
 800efaa:	4b34      	ldr	r3, [pc, #208]	@ (800f07c <HAL_RCC_OscConfig+0x6a4>)
 800efac:	6a1a      	ldr	r2, [r3, #32]
 800efae:	4b33      	ldr	r3, [pc, #204]	@ (800f07c <HAL_RCC_OscConfig+0x6a4>)
 800efb0:	2180      	movs	r1, #128	@ 0x80
 800efb2:	0189      	lsls	r1, r1, #6
 800efb4:	430a      	orrs	r2, r1
 800efb6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800efb8:	f7fa f98c 	bl	80092d4 <HAL_GetTick>
 800efbc:	0003      	movs	r3, r0
 800efbe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800efc0:	e008      	b.n	800efd4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800efc2:	f7fa f987 	bl	80092d4 <HAL_GetTick>
 800efc6:	0002      	movs	r2, r0
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	1ad3      	subs	r3, r2, r3
 800efcc:	2b02      	cmp	r3, #2
 800efce:	d901      	bls.n	800efd4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800efd0:	2303      	movs	r3, #3
 800efd2:	e0ca      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800efd4:	4b22      	ldr	r3, [pc, #136]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800efd6:	689b      	ldr	r3, [r3, #8]
 800efd8:	2202      	movs	r2, #2
 800efda:	4013      	ands	r3, r2
 800efdc:	d0f1      	beq.n	800efc2 <HAL_RCC_OscConfig+0x5ea>
 800efde:	e01e      	b.n	800f01e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800efe0:	4b1f      	ldr	r3, [pc, #124]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800efe2:	689a      	ldr	r2, [r3, #8]
 800efe4:	4b1e      	ldr	r3, [pc, #120]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800efe6:	2101      	movs	r1, #1
 800efe8:	438a      	bics	r2, r1
 800efea:	609a      	str	r2, [r3, #8]
 800efec:	4b23      	ldr	r3, [pc, #140]	@ (800f07c <HAL_RCC_OscConfig+0x6a4>)
 800efee:	6a1a      	ldr	r2, [r3, #32]
 800eff0:	4b22      	ldr	r3, [pc, #136]	@ (800f07c <HAL_RCC_OscConfig+0x6a4>)
 800eff2:	4923      	ldr	r1, [pc, #140]	@ (800f080 <HAL_RCC_OscConfig+0x6a8>)
 800eff4:	400a      	ands	r2, r1
 800eff6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eff8:	f7fa f96c 	bl	80092d4 <HAL_GetTick>
 800effc:	0003      	movs	r3, r0
 800effe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f000:	e008      	b.n	800f014 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f002:	f7fa f967 	bl	80092d4 <HAL_GetTick>
 800f006:	0002      	movs	r2, r0
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	1ad3      	subs	r3, r2, r3
 800f00c:	2b02      	cmp	r3, #2
 800f00e:	d901      	bls.n	800f014 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800f010:	2303      	movs	r3, #3
 800f012:	e0aa      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f014:	4b12      	ldr	r3, [pc, #72]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800f016:	689b      	ldr	r3, [r3, #8]
 800f018:	2202      	movs	r2, #2
 800f01a:	4013      	ands	r3, r2
 800f01c:	d1f1      	bne.n	800f002 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f022:	2b00      	cmp	r3, #0
 800f024:	d100      	bne.n	800f028 <HAL_RCC_OscConfig+0x650>
 800f026:	e09f      	b.n	800f168 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f028:	69fb      	ldr	r3, [r7, #28]
 800f02a:	2b0c      	cmp	r3, #12
 800f02c:	d100      	bne.n	800f030 <HAL_RCC_OscConfig+0x658>
 800f02e:	e078      	b.n	800f122 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f034:	2b02      	cmp	r3, #2
 800f036:	d159      	bne.n	800f0ec <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f038:	4b09      	ldr	r3, [pc, #36]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800f03a:	681a      	ldr	r2, [r3, #0]
 800f03c:	4b08      	ldr	r3, [pc, #32]	@ (800f060 <HAL_RCC_OscConfig+0x688>)
 800f03e:	4911      	ldr	r1, [pc, #68]	@ (800f084 <HAL_RCC_OscConfig+0x6ac>)
 800f040:	400a      	ands	r2, r1
 800f042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f044:	f7fa f946 	bl	80092d4 <HAL_GetTick>
 800f048:	0003      	movs	r3, r0
 800f04a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800f04c:	e01c      	b.n	800f088 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f04e:	f7fa f941 	bl	80092d4 <HAL_GetTick>
 800f052:	0002      	movs	r2, r0
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	1ad3      	subs	r3, r2, r3
 800f058:	2b02      	cmp	r3, #2
 800f05a:	d915      	bls.n	800f088 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800f05c:	2303      	movs	r3, #3
 800f05e:	e084      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
 800f060:	40021000 	.word	0x40021000
 800f064:	ffff1fff 	.word	0xffff1fff
 800f068:	fffffeff 	.word	0xfffffeff
 800f06c:	40007000 	.word	0x40007000
 800f070:	fffffbff 	.word	0xfffffbff
 800f074:	00001388 	.word	0x00001388
 800f078:	efffffff 	.word	0xefffffff
 800f07c:	40010000 	.word	0x40010000
 800f080:	ffffdfff 	.word	0xffffdfff
 800f084:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800f088:	4b3a      	ldr	r3, [pc, #232]	@ (800f174 <HAL_RCC_OscConfig+0x79c>)
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	2380      	movs	r3, #128	@ 0x80
 800f08e:	049b      	lsls	r3, r3, #18
 800f090:	4013      	ands	r3, r2
 800f092:	d1dc      	bne.n	800f04e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f094:	4b37      	ldr	r3, [pc, #220]	@ (800f174 <HAL_RCC_OscConfig+0x79c>)
 800f096:	68db      	ldr	r3, [r3, #12]
 800f098:	4a37      	ldr	r2, [pc, #220]	@ (800f178 <HAL_RCC_OscConfig+0x7a0>)
 800f09a:	4013      	ands	r3, r2
 800f09c:	0019      	movs	r1, r3
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0a6:	431a      	orrs	r2, r3
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0ac:	431a      	orrs	r2, r3
 800f0ae:	4b31      	ldr	r3, [pc, #196]	@ (800f174 <HAL_RCC_OscConfig+0x79c>)
 800f0b0:	430a      	orrs	r2, r1
 800f0b2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f0b4:	4b2f      	ldr	r3, [pc, #188]	@ (800f174 <HAL_RCC_OscConfig+0x79c>)
 800f0b6:	681a      	ldr	r2, [r3, #0]
 800f0b8:	4b2e      	ldr	r3, [pc, #184]	@ (800f174 <HAL_RCC_OscConfig+0x79c>)
 800f0ba:	2180      	movs	r1, #128	@ 0x80
 800f0bc:	0449      	lsls	r1, r1, #17
 800f0be:	430a      	orrs	r2, r1
 800f0c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f0c2:	f7fa f907 	bl	80092d4 <HAL_GetTick>
 800f0c6:	0003      	movs	r3, r0
 800f0c8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800f0ca:	e008      	b.n	800f0de <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f0cc:	f7fa f902 	bl	80092d4 <HAL_GetTick>
 800f0d0:	0002      	movs	r2, r0
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	1ad3      	subs	r3, r2, r3
 800f0d6:	2b02      	cmp	r3, #2
 800f0d8:	d901      	bls.n	800f0de <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800f0da:	2303      	movs	r3, #3
 800f0dc:	e045      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800f0de:	4b25      	ldr	r3, [pc, #148]	@ (800f174 <HAL_RCC_OscConfig+0x79c>)
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	2380      	movs	r3, #128	@ 0x80
 800f0e4:	049b      	lsls	r3, r3, #18
 800f0e6:	4013      	ands	r3, r2
 800f0e8:	d0f0      	beq.n	800f0cc <HAL_RCC_OscConfig+0x6f4>
 800f0ea:	e03d      	b.n	800f168 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f0ec:	4b21      	ldr	r3, [pc, #132]	@ (800f174 <HAL_RCC_OscConfig+0x79c>)
 800f0ee:	681a      	ldr	r2, [r3, #0]
 800f0f0:	4b20      	ldr	r3, [pc, #128]	@ (800f174 <HAL_RCC_OscConfig+0x79c>)
 800f0f2:	4922      	ldr	r1, [pc, #136]	@ (800f17c <HAL_RCC_OscConfig+0x7a4>)
 800f0f4:	400a      	ands	r2, r1
 800f0f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f0f8:	f7fa f8ec 	bl	80092d4 <HAL_GetTick>
 800f0fc:	0003      	movs	r3, r0
 800f0fe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800f100:	e008      	b.n	800f114 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f102:	f7fa f8e7 	bl	80092d4 <HAL_GetTick>
 800f106:	0002      	movs	r2, r0
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	1ad3      	subs	r3, r2, r3
 800f10c:	2b02      	cmp	r3, #2
 800f10e:	d901      	bls.n	800f114 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800f110:	2303      	movs	r3, #3
 800f112:	e02a      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800f114:	4b17      	ldr	r3, [pc, #92]	@ (800f174 <HAL_RCC_OscConfig+0x79c>)
 800f116:	681a      	ldr	r2, [r3, #0]
 800f118:	2380      	movs	r3, #128	@ 0x80
 800f11a:	049b      	lsls	r3, r3, #18
 800f11c:	4013      	ands	r3, r2
 800f11e:	d1f0      	bne.n	800f102 <HAL_RCC_OscConfig+0x72a>
 800f120:	e022      	b.n	800f168 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f126:	2b01      	cmp	r3, #1
 800f128:	d101      	bne.n	800f12e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800f12a:	2301      	movs	r3, #1
 800f12c:	e01d      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800f12e:	4b11      	ldr	r3, [pc, #68]	@ (800f174 <HAL_RCC_OscConfig+0x79c>)
 800f130:	68db      	ldr	r3, [r3, #12]
 800f132:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f134:	69ba      	ldr	r2, [r7, #24]
 800f136:	2380      	movs	r3, #128	@ 0x80
 800f138:	025b      	lsls	r3, r3, #9
 800f13a:	401a      	ands	r2, r3
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f140:	429a      	cmp	r2, r3
 800f142:	d10f      	bne.n	800f164 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800f144:	69ba      	ldr	r2, [r7, #24]
 800f146:	23f0      	movs	r3, #240	@ 0xf0
 800f148:	039b      	lsls	r3, r3, #14
 800f14a:	401a      	ands	r2, r3
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f150:	429a      	cmp	r2, r3
 800f152:	d107      	bne.n	800f164 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800f154:	69ba      	ldr	r2, [r7, #24]
 800f156:	23c0      	movs	r3, #192	@ 0xc0
 800f158:	041b      	lsls	r3, r3, #16
 800f15a:	401a      	ands	r2, r3
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800f160:	429a      	cmp	r2, r3
 800f162:	d001      	beq.n	800f168 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800f164:	2301      	movs	r3, #1
 800f166:	e000      	b.n	800f16a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800f168:	2300      	movs	r3, #0
}
 800f16a:	0018      	movs	r0, r3
 800f16c:	46bd      	mov	sp, r7
 800f16e:	b00a      	add	sp, #40	@ 0x28
 800f170:	bdb0      	pop	{r4, r5, r7, pc}
 800f172:	46c0      	nop			@ (mov r8, r8)
 800f174:	40021000 	.word	0x40021000
 800f178:	ff02ffff 	.word	0xff02ffff
 800f17c:	feffffff 	.word	0xfeffffff

0800f180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f180:	b5b0      	push	{r4, r5, r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d101      	bne.n	800f194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f190:	2301      	movs	r3, #1
 800f192:	e128      	b.n	800f3e6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f194:	4b96      	ldr	r3, [pc, #600]	@ (800f3f0 <HAL_RCC_ClockConfig+0x270>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	2201      	movs	r2, #1
 800f19a:	4013      	ands	r3, r2
 800f19c:	683a      	ldr	r2, [r7, #0]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d91e      	bls.n	800f1e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f1a2:	4b93      	ldr	r3, [pc, #588]	@ (800f3f0 <HAL_RCC_ClockConfig+0x270>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	4393      	bics	r3, r2
 800f1aa:	0019      	movs	r1, r3
 800f1ac:	4b90      	ldr	r3, [pc, #576]	@ (800f3f0 <HAL_RCC_ClockConfig+0x270>)
 800f1ae:	683a      	ldr	r2, [r7, #0]
 800f1b0:	430a      	orrs	r2, r1
 800f1b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800f1b4:	f7fa f88e 	bl	80092d4 <HAL_GetTick>
 800f1b8:	0003      	movs	r3, r0
 800f1ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f1bc:	e009      	b.n	800f1d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f1be:	f7fa f889 	bl	80092d4 <HAL_GetTick>
 800f1c2:	0002      	movs	r2, r0
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	1ad3      	subs	r3, r2, r3
 800f1c8:	4a8a      	ldr	r2, [pc, #552]	@ (800f3f4 <HAL_RCC_ClockConfig+0x274>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d901      	bls.n	800f1d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800f1ce:	2303      	movs	r3, #3
 800f1d0:	e109      	b.n	800f3e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f1d2:	4b87      	ldr	r3, [pc, #540]	@ (800f3f0 <HAL_RCC_ClockConfig+0x270>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	4013      	ands	r3, r2
 800f1da:	683a      	ldr	r2, [r7, #0]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d1ee      	bne.n	800f1be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	2202      	movs	r2, #2
 800f1e6:	4013      	ands	r3, r2
 800f1e8:	d009      	beq.n	800f1fe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f1ea:	4b83      	ldr	r3, [pc, #524]	@ (800f3f8 <HAL_RCC_ClockConfig+0x278>)
 800f1ec:	68db      	ldr	r3, [r3, #12]
 800f1ee:	22f0      	movs	r2, #240	@ 0xf0
 800f1f0:	4393      	bics	r3, r2
 800f1f2:	0019      	movs	r1, r3
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	689a      	ldr	r2, [r3, #8]
 800f1f8:	4b7f      	ldr	r3, [pc, #508]	@ (800f3f8 <HAL_RCC_ClockConfig+0x278>)
 800f1fa:	430a      	orrs	r2, r1
 800f1fc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	2201      	movs	r2, #1
 800f204:	4013      	ands	r3, r2
 800f206:	d100      	bne.n	800f20a <HAL_RCC_ClockConfig+0x8a>
 800f208:	e089      	b.n	800f31e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	685b      	ldr	r3, [r3, #4]
 800f20e:	2b02      	cmp	r3, #2
 800f210:	d107      	bne.n	800f222 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f212:	4b79      	ldr	r3, [pc, #484]	@ (800f3f8 <HAL_RCC_ClockConfig+0x278>)
 800f214:	681a      	ldr	r2, [r3, #0]
 800f216:	2380      	movs	r3, #128	@ 0x80
 800f218:	029b      	lsls	r3, r3, #10
 800f21a:	4013      	ands	r3, r2
 800f21c:	d120      	bne.n	800f260 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800f21e:	2301      	movs	r3, #1
 800f220:	e0e1      	b.n	800f3e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	2b03      	cmp	r3, #3
 800f228:	d107      	bne.n	800f23a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f22a:	4b73      	ldr	r3, [pc, #460]	@ (800f3f8 <HAL_RCC_ClockConfig+0x278>)
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	2380      	movs	r3, #128	@ 0x80
 800f230:	049b      	lsls	r3, r3, #18
 800f232:	4013      	ands	r3, r2
 800f234:	d114      	bne.n	800f260 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800f236:	2301      	movs	r3, #1
 800f238:	e0d5      	b.n	800f3e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	2b01      	cmp	r3, #1
 800f240:	d106      	bne.n	800f250 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f242:	4b6d      	ldr	r3, [pc, #436]	@ (800f3f8 <HAL_RCC_ClockConfig+0x278>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	2204      	movs	r2, #4
 800f248:	4013      	ands	r3, r2
 800f24a:	d109      	bne.n	800f260 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800f24c:	2301      	movs	r3, #1
 800f24e:	e0ca      	b.n	800f3e6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800f250:	4b69      	ldr	r3, [pc, #420]	@ (800f3f8 <HAL_RCC_ClockConfig+0x278>)
 800f252:	681a      	ldr	r2, [r3, #0]
 800f254:	2380      	movs	r3, #128	@ 0x80
 800f256:	009b      	lsls	r3, r3, #2
 800f258:	4013      	ands	r3, r2
 800f25a:	d101      	bne.n	800f260 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800f25c:	2301      	movs	r3, #1
 800f25e:	e0c2      	b.n	800f3e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f260:	4b65      	ldr	r3, [pc, #404]	@ (800f3f8 <HAL_RCC_ClockConfig+0x278>)
 800f262:	68db      	ldr	r3, [r3, #12]
 800f264:	2203      	movs	r2, #3
 800f266:	4393      	bics	r3, r2
 800f268:	0019      	movs	r1, r3
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	685a      	ldr	r2, [r3, #4]
 800f26e:	4b62      	ldr	r3, [pc, #392]	@ (800f3f8 <HAL_RCC_ClockConfig+0x278>)
 800f270:	430a      	orrs	r2, r1
 800f272:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f274:	f7fa f82e 	bl	80092d4 <HAL_GetTick>
 800f278:	0003      	movs	r3, r0
 800f27a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	685b      	ldr	r3, [r3, #4]
 800f280:	2b02      	cmp	r3, #2
 800f282:	d111      	bne.n	800f2a8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800f284:	e009      	b.n	800f29a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f286:	f7fa f825 	bl	80092d4 <HAL_GetTick>
 800f28a:	0002      	movs	r2, r0
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	1ad3      	subs	r3, r2, r3
 800f290:	4a58      	ldr	r2, [pc, #352]	@ (800f3f4 <HAL_RCC_ClockConfig+0x274>)
 800f292:	4293      	cmp	r3, r2
 800f294:	d901      	bls.n	800f29a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800f296:	2303      	movs	r3, #3
 800f298:	e0a5      	b.n	800f3e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800f29a:	4b57      	ldr	r3, [pc, #348]	@ (800f3f8 <HAL_RCC_ClockConfig+0x278>)
 800f29c:	68db      	ldr	r3, [r3, #12]
 800f29e:	220c      	movs	r2, #12
 800f2a0:	4013      	ands	r3, r2
 800f2a2:	2b08      	cmp	r3, #8
 800f2a4:	d1ef      	bne.n	800f286 <HAL_RCC_ClockConfig+0x106>
 800f2a6:	e03a      	b.n	800f31e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	2b03      	cmp	r3, #3
 800f2ae:	d111      	bne.n	800f2d4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f2b0:	e009      	b.n	800f2c6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f2b2:	f7fa f80f 	bl	80092d4 <HAL_GetTick>
 800f2b6:	0002      	movs	r2, r0
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	1ad3      	subs	r3, r2, r3
 800f2bc:	4a4d      	ldr	r2, [pc, #308]	@ (800f3f4 <HAL_RCC_ClockConfig+0x274>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d901      	bls.n	800f2c6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800f2c2:	2303      	movs	r3, #3
 800f2c4:	e08f      	b.n	800f3e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f2c6:	4b4c      	ldr	r3, [pc, #304]	@ (800f3f8 <HAL_RCC_ClockConfig+0x278>)
 800f2c8:	68db      	ldr	r3, [r3, #12]
 800f2ca:	220c      	movs	r2, #12
 800f2cc:	4013      	ands	r3, r2
 800f2ce:	2b0c      	cmp	r3, #12
 800f2d0:	d1ef      	bne.n	800f2b2 <HAL_RCC_ClockConfig+0x132>
 800f2d2:	e024      	b.n	800f31e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d11b      	bne.n	800f314 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800f2dc:	e009      	b.n	800f2f2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f2de:	f7f9 fff9 	bl	80092d4 <HAL_GetTick>
 800f2e2:	0002      	movs	r2, r0
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	1ad3      	subs	r3, r2, r3
 800f2e8:	4a42      	ldr	r2, [pc, #264]	@ (800f3f4 <HAL_RCC_ClockConfig+0x274>)
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	d901      	bls.n	800f2f2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800f2ee:	2303      	movs	r3, #3
 800f2f0:	e079      	b.n	800f3e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800f2f2:	4b41      	ldr	r3, [pc, #260]	@ (800f3f8 <HAL_RCC_ClockConfig+0x278>)
 800f2f4:	68db      	ldr	r3, [r3, #12]
 800f2f6:	220c      	movs	r2, #12
 800f2f8:	4013      	ands	r3, r2
 800f2fa:	2b04      	cmp	r3, #4
 800f2fc:	d1ef      	bne.n	800f2de <HAL_RCC_ClockConfig+0x15e>
 800f2fe:	e00e      	b.n	800f31e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f300:	f7f9 ffe8 	bl	80092d4 <HAL_GetTick>
 800f304:	0002      	movs	r2, r0
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	1ad3      	subs	r3, r2, r3
 800f30a:	4a3a      	ldr	r2, [pc, #232]	@ (800f3f4 <HAL_RCC_ClockConfig+0x274>)
 800f30c:	4293      	cmp	r3, r2
 800f30e:	d901      	bls.n	800f314 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800f310:	2303      	movs	r3, #3
 800f312:	e068      	b.n	800f3e6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800f314:	4b38      	ldr	r3, [pc, #224]	@ (800f3f8 <HAL_RCC_ClockConfig+0x278>)
 800f316:	68db      	ldr	r3, [r3, #12]
 800f318:	220c      	movs	r2, #12
 800f31a:	4013      	ands	r3, r2
 800f31c:	d1f0      	bne.n	800f300 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f31e:	4b34      	ldr	r3, [pc, #208]	@ (800f3f0 <HAL_RCC_ClockConfig+0x270>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2201      	movs	r2, #1
 800f324:	4013      	ands	r3, r2
 800f326:	683a      	ldr	r2, [r7, #0]
 800f328:	429a      	cmp	r2, r3
 800f32a:	d21e      	bcs.n	800f36a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f32c:	4b30      	ldr	r3, [pc, #192]	@ (800f3f0 <HAL_RCC_ClockConfig+0x270>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	2201      	movs	r2, #1
 800f332:	4393      	bics	r3, r2
 800f334:	0019      	movs	r1, r3
 800f336:	4b2e      	ldr	r3, [pc, #184]	@ (800f3f0 <HAL_RCC_ClockConfig+0x270>)
 800f338:	683a      	ldr	r2, [r7, #0]
 800f33a:	430a      	orrs	r2, r1
 800f33c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800f33e:	f7f9 ffc9 	bl	80092d4 <HAL_GetTick>
 800f342:	0003      	movs	r3, r0
 800f344:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f346:	e009      	b.n	800f35c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f348:	f7f9 ffc4 	bl	80092d4 <HAL_GetTick>
 800f34c:	0002      	movs	r2, r0
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	1ad3      	subs	r3, r2, r3
 800f352:	4a28      	ldr	r2, [pc, #160]	@ (800f3f4 <HAL_RCC_ClockConfig+0x274>)
 800f354:	4293      	cmp	r3, r2
 800f356:	d901      	bls.n	800f35c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800f358:	2303      	movs	r3, #3
 800f35a:	e044      	b.n	800f3e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f35c:	4b24      	ldr	r3, [pc, #144]	@ (800f3f0 <HAL_RCC_ClockConfig+0x270>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	2201      	movs	r2, #1
 800f362:	4013      	ands	r3, r2
 800f364:	683a      	ldr	r2, [r7, #0]
 800f366:	429a      	cmp	r2, r3
 800f368:	d1ee      	bne.n	800f348 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	2204      	movs	r2, #4
 800f370:	4013      	ands	r3, r2
 800f372:	d009      	beq.n	800f388 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f374:	4b20      	ldr	r3, [pc, #128]	@ (800f3f8 <HAL_RCC_ClockConfig+0x278>)
 800f376:	68db      	ldr	r3, [r3, #12]
 800f378:	4a20      	ldr	r2, [pc, #128]	@ (800f3fc <HAL_RCC_ClockConfig+0x27c>)
 800f37a:	4013      	ands	r3, r2
 800f37c:	0019      	movs	r1, r3
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	68da      	ldr	r2, [r3, #12]
 800f382:	4b1d      	ldr	r3, [pc, #116]	@ (800f3f8 <HAL_RCC_ClockConfig+0x278>)
 800f384:	430a      	orrs	r2, r1
 800f386:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	2208      	movs	r2, #8
 800f38e:	4013      	ands	r3, r2
 800f390:	d00a      	beq.n	800f3a8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800f392:	4b19      	ldr	r3, [pc, #100]	@ (800f3f8 <HAL_RCC_ClockConfig+0x278>)
 800f394:	68db      	ldr	r3, [r3, #12]
 800f396:	4a1a      	ldr	r2, [pc, #104]	@ (800f400 <HAL_RCC_ClockConfig+0x280>)
 800f398:	4013      	ands	r3, r2
 800f39a:	0019      	movs	r1, r3
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	691b      	ldr	r3, [r3, #16]
 800f3a0:	00da      	lsls	r2, r3, #3
 800f3a2:	4b15      	ldr	r3, [pc, #84]	@ (800f3f8 <HAL_RCC_ClockConfig+0x278>)
 800f3a4:	430a      	orrs	r2, r1
 800f3a6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f3a8:	f000 f832 	bl	800f410 <HAL_RCC_GetSysClockFreq>
 800f3ac:	0001      	movs	r1, r0
 800f3ae:	4b12      	ldr	r3, [pc, #72]	@ (800f3f8 <HAL_RCC_ClockConfig+0x278>)
 800f3b0:	68db      	ldr	r3, [r3, #12]
 800f3b2:	091b      	lsrs	r3, r3, #4
 800f3b4:	220f      	movs	r2, #15
 800f3b6:	4013      	ands	r3, r2
 800f3b8:	4a12      	ldr	r2, [pc, #72]	@ (800f404 <HAL_RCC_ClockConfig+0x284>)
 800f3ba:	5cd3      	ldrb	r3, [r2, r3]
 800f3bc:	000a      	movs	r2, r1
 800f3be:	40da      	lsrs	r2, r3
 800f3c0:	4b11      	ldr	r3, [pc, #68]	@ (800f408 <HAL_RCC_ClockConfig+0x288>)
 800f3c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800f3c4:	4b11      	ldr	r3, [pc, #68]	@ (800f40c <HAL_RCC_ClockConfig+0x28c>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	250b      	movs	r5, #11
 800f3ca:	197c      	adds	r4, r7, r5
 800f3cc:	0018      	movs	r0, r3
 800f3ce:	f7f9 ff3b 	bl	8009248 <HAL_InitTick>
 800f3d2:	0003      	movs	r3, r0
 800f3d4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800f3d6:	197b      	adds	r3, r7, r5
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d002      	beq.n	800f3e4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800f3de:	197b      	adds	r3, r7, r5
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	e000      	b.n	800f3e6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800f3e4:	2300      	movs	r3, #0
}
 800f3e6:	0018      	movs	r0, r3
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	b004      	add	sp, #16
 800f3ec:	bdb0      	pop	{r4, r5, r7, pc}
 800f3ee:	46c0      	nop			@ (mov r8, r8)
 800f3f0:	40022000 	.word	0x40022000
 800f3f4:	00001388 	.word	0x00001388
 800f3f8:	40021000 	.word	0x40021000
 800f3fc:	fffff8ff 	.word	0xfffff8ff
 800f400:	ffffc7ff 	.word	0xffffc7ff
 800f404:	0801a410 	.word	0x0801a410
 800f408:	2000013c 	.word	0x2000013c
 800f40c:	20000150 	.word	0x20000150

0800f410 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f410:	b5b0      	push	{r4, r5, r7, lr}
 800f412:	b08e      	sub	sp, #56	@ 0x38
 800f414:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800f416:	4b4c      	ldr	r3, [pc, #304]	@ (800f548 <HAL_RCC_GetSysClockFreq+0x138>)
 800f418:	68db      	ldr	r3, [r3, #12]
 800f41a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800f41c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f41e:	230c      	movs	r3, #12
 800f420:	4013      	ands	r3, r2
 800f422:	2b0c      	cmp	r3, #12
 800f424:	d014      	beq.n	800f450 <HAL_RCC_GetSysClockFreq+0x40>
 800f426:	d900      	bls.n	800f42a <HAL_RCC_GetSysClockFreq+0x1a>
 800f428:	e07b      	b.n	800f522 <HAL_RCC_GetSysClockFreq+0x112>
 800f42a:	2b04      	cmp	r3, #4
 800f42c:	d002      	beq.n	800f434 <HAL_RCC_GetSysClockFreq+0x24>
 800f42e:	2b08      	cmp	r3, #8
 800f430:	d00b      	beq.n	800f44a <HAL_RCC_GetSysClockFreq+0x3a>
 800f432:	e076      	b.n	800f522 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800f434:	4b44      	ldr	r3, [pc, #272]	@ (800f548 <HAL_RCC_GetSysClockFreq+0x138>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	2210      	movs	r2, #16
 800f43a:	4013      	ands	r3, r2
 800f43c:	d002      	beq.n	800f444 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800f43e:	4b43      	ldr	r3, [pc, #268]	@ (800f54c <HAL_RCC_GetSysClockFreq+0x13c>)
 800f440:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800f442:	e07c      	b.n	800f53e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800f444:	4b42      	ldr	r3, [pc, #264]	@ (800f550 <HAL_RCC_GetSysClockFreq+0x140>)
 800f446:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f448:	e079      	b.n	800f53e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800f44a:	4b42      	ldr	r3, [pc, #264]	@ (800f554 <HAL_RCC_GetSysClockFreq+0x144>)
 800f44c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f44e:	e076      	b.n	800f53e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800f450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f452:	0c9a      	lsrs	r2, r3, #18
 800f454:	230f      	movs	r3, #15
 800f456:	401a      	ands	r2, r3
 800f458:	4b3f      	ldr	r3, [pc, #252]	@ (800f558 <HAL_RCC_GetSysClockFreq+0x148>)
 800f45a:	5c9b      	ldrb	r3, [r3, r2]
 800f45c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800f45e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f460:	0d9a      	lsrs	r2, r3, #22
 800f462:	2303      	movs	r3, #3
 800f464:	4013      	ands	r3, r2
 800f466:	3301      	adds	r3, #1
 800f468:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f46a:	4b37      	ldr	r3, [pc, #220]	@ (800f548 <HAL_RCC_GetSysClockFreq+0x138>)
 800f46c:	68da      	ldr	r2, [r3, #12]
 800f46e:	2380      	movs	r3, #128	@ 0x80
 800f470:	025b      	lsls	r3, r3, #9
 800f472:	4013      	ands	r3, r2
 800f474:	d01a      	beq.n	800f4ac <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800f476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f478:	61bb      	str	r3, [r7, #24]
 800f47a:	2300      	movs	r3, #0
 800f47c:	61fb      	str	r3, [r7, #28]
 800f47e:	4a35      	ldr	r2, [pc, #212]	@ (800f554 <HAL_RCC_GetSysClockFreq+0x144>)
 800f480:	2300      	movs	r3, #0
 800f482:	69b8      	ldr	r0, [r7, #24]
 800f484:	69f9      	ldr	r1, [r7, #28]
 800f486:	f7f1 f869 	bl	800055c <__aeabi_lmul>
 800f48a:	0002      	movs	r2, r0
 800f48c:	000b      	movs	r3, r1
 800f48e:	0010      	movs	r0, r2
 800f490:	0019      	movs	r1, r3
 800f492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f494:	613b      	str	r3, [r7, #16]
 800f496:	2300      	movs	r3, #0
 800f498:	617b      	str	r3, [r7, #20]
 800f49a:	693a      	ldr	r2, [r7, #16]
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	f7f1 f83d 	bl	800051c <__aeabi_uldivmod>
 800f4a2:	0002      	movs	r2, r0
 800f4a4:	000b      	movs	r3, r1
 800f4a6:	0013      	movs	r3, r2
 800f4a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4aa:	e037      	b.n	800f51c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800f4ac:	4b26      	ldr	r3, [pc, #152]	@ (800f548 <HAL_RCC_GetSysClockFreq+0x138>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2210      	movs	r2, #16
 800f4b2:	4013      	ands	r3, r2
 800f4b4:	d01a      	beq.n	800f4ec <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800f4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4b8:	60bb      	str	r3, [r7, #8]
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	60fb      	str	r3, [r7, #12]
 800f4be:	4a23      	ldr	r2, [pc, #140]	@ (800f54c <HAL_RCC_GetSysClockFreq+0x13c>)
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	68b8      	ldr	r0, [r7, #8]
 800f4c4:	68f9      	ldr	r1, [r7, #12]
 800f4c6:	f7f1 f849 	bl	800055c <__aeabi_lmul>
 800f4ca:	0002      	movs	r2, r0
 800f4cc:	000b      	movs	r3, r1
 800f4ce:	0010      	movs	r0, r2
 800f4d0:	0019      	movs	r1, r3
 800f4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4d4:	603b      	str	r3, [r7, #0]
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	607b      	str	r3, [r7, #4]
 800f4da:	683a      	ldr	r2, [r7, #0]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f7f1 f81d 	bl	800051c <__aeabi_uldivmod>
 800f4e2:	0002      	movs	r2, r0
 800f4e4:	000b      	movs	r3, r1
 800f4e6:	0013      	movs	r3, r2
 800f4e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4ea:	e017      	b.n	800f51c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800f4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ee:	0018      	movs	r0, r3
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	0019      	movs	r1, r3
 800f4f4:	4a16      	ldr	r2, [pc, #88]	@ (800f550 <HAL_RCC_GetSysClockFreq+0x140>)
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	f7f1 f830 	bl	800055c <__aeabi_lmul>
 800f4fc:	0002      	movs	r2, r0
 800f4fe:	000b      	movs	r3, r1
 800f500:	0010      	movs	r0, r2
 800f502:	0019      	movs	r1, r3
 800f504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f506:	001c      	movs	r4, r3
 800f508:	2300      	movs	r3, #0
 800f50a:	001d      	movs	r5, r3
 800f50c:	0022      	movs	r2, r4
 800f50e:	002b      	movs	r3, r5
 800f510:	f7f1 f804 	bl	800051c <__aeabi_uldivmod>
 800f514:	0002      	movs	r2, r0
 800f516:	000b      	movs	r3, r1
 800f518:	0013      	movs	r3, r2
 800f51a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800f51c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f51e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f520:	e00d      	b.n	800f53e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800f522:	4b09      	ldr	r3, [pc, #36]	@ (800f548 <HAL_RCC_GetSysClockFreq+0x138>)
 800f524:	685b      	ldr	r3, [r3, #4]
 800f526:	0b5b      	lsrs	r3, r3, #13
 800f528:	2207      	movs	r2, #7
 800f52a:	4013      	ands	r3, r2
 800f52c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800f52e:	6a3b      	ldr	r3, [r7, #32]
 800f530:	3301      	adds	r3, #1
 800f532:	2280      	movs	r2, #128	@ 0x80
 800f534:	0212      	lsls	r2, r2, #8
 800f536:	409a      	lsls	r2, r3
 800f538:	0013      	movs	r3, r2
 800f53a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f53c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800f53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800f540:	0018      	movs	r0, r3
 800f542:	46bd      	mov	sp, r7
 800f544:	b00e      	add	sp, #56	@ 0x38
 800f546:	bdb0      	pop	{r4, r5, r7, pc}
 800f548:	40021000 	.word	0x40021000
 800f54c:	003d0900 	.word	0x003d0900
 800f550:	00f42400 	.word	0x00f42400
 800f554:	007a1200 	.word	0x007a1200
 800f558:	0801a428 	.word	0x0801a428

0800f55c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f560:	4b02      	ldr	r3, [pc, #8]	@ (800f56c <HAL_RCC_GetHCLKFreq+0x10>)
 800f562:	681b      	ldr	r3, [r3, #0]
}
 800f564:	0018      	movs	r0, r3
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
 800f56a:	46c0      	nop			@ (mov r8, r8)
 800f56c:	2000013c 	.word	0x2000013c

0800f570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f574:	f7ff fff2 	bl	800f55c <HAL_RCC_GetHCLKFreq>
 800f578:	0001      	movs	r1, r0
 800f57a:	4b06      	ldr	r3, [pc, #24]	@ (800f594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f57c:	68db      	ldr	r3, [r3, #12]
 800f57e:	0a1b      	lsrs	r3, r3, #8
 800f580:	2207      	movs	r2, #7
 800f582:	4013      	ands	r3, r2
 800f584:	4a04      	ldr	r2, [pc, #16]	@ (800f598 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f586:	5cd3      	ldrb	r3, [r2, r3]
 800f588:	40d9      	lsrs	r1, r3
 800f58a:	000b      	movs	r3, r1
}
 800f58c:	0018      	movs	r0, r3
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
 800f592:	46c0      	nop			@ (mov r8, r8)
 800f594:	40021000 	.word	0x40021000
 800f598:	0801a420 	.word	0x0801a420

0800f59c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f5a0:	f7ff ffdc 	bl	800f55c <HAL_RCC_GetHCLKFreq>
 800f5a4:	0001      	movs	r1, r0
 800f5a6:	4b06      	ldr	r3, [pc, #24]	@ (800f5c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	0adb      	lsrs	r3, r3, #11
 800f5ac:	2207      	movs	r2, #7
 800f5ae:	4013      	ands	r3, r2
 800f5b0:	4a04      	ldr	r2, [pc, #16]	@ (800f5c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f5b2:	5cd3      	ldrb	r3, [r2, r3]
 800f5b4:	40d9      	lsrs	r1, r3
 800f5b6:	000b      	movs	r3, r1
}
 800f5b8:	0018      	movs	r0, r3
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
 800f5be:	46c0      	nop			@ (mov r8, r8)
 800f5c0:	40021000 	.word	0x40021000
 800f5c4:	0801a420 	.word	0x0801a420

0800f5c8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b086      	sub	sp, #24
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800f5d0:	2017      	movs	r0, #23
 800f5d2:	183b      	adds	r3, r7, r0
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	2220      	movs	r2, #32
 800f5de:	4013      	ands	r3, r2
 800f5e0:	d100      	bne.n	800f5e4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800f5e2:	e0c7      	b.n	800f774 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f5e4:	4b9b      	ldr	r3, [pc, #620]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f5e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f5e8:	2380      	movs	r3, #128	@ 0x80
 800f5ea:	055b      	lsls	r3, r3, #21
 800f5ec:	4013      	ands	r3, r2
 800f5ee:	d109      	bne.n	800f604 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f5f0:	4b98      	ldr	r3, [pc, #608]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f5f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f5f4:	4b97      	ldr	r3, [pc, #604]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f5f6:	2180      	movs	r1, #128	@ 0x80
 800f5f8:	0549      	lsls	r1, r1, #21
 800f5fa:	430a      	orrs	r2, r1
 800f5fc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800f5fe:	183b      	adds	r3, r7, r0
 800f600:	2201      	movs	r2, #1
 800f602:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f604:	4b94      	ldr	r3, [pc, #592]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f606:	681a      	ldr	r2, [r3, #0]
 800f608:	2380      	movs	r3, #128	@ 0x80
 800f60a:	005b      	lsls	r3, r3, #1
 800f60c:	4013      	ands	r3, r2
 800f60e:	d11a      	bne.n	800f646 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f610:	4b91      	ldr	r3, [pc, #580]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f612:	681a      	ldr	r2, [r3, #0]
 800f614:	4b90      	ldr	r3, [pc, #576]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f616:	2180      	movs	r1, #128	@ 0x80
 800f618:	0049      	lsls	r1, r1, #1
 800f61a:	430a      	orrs	r2, r1
 800f61c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f61e:	f7f9 fe59 	bl	80092d4 <HAL_GetTick>
 800f622:	0003      	movs	r3, r0
 800f624:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f626:	e008      	b.n	800f63a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f628:	f7f9 fe54 	bl	80092d4 <HAL_GetTick>
 800f62c:	0002      	movs	r2, r0
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	1ad3      	subs	r3, r2, r3
 800f632:	2b64      	cmp	r3, #100	@ 0x64
 800f634:	d901      	bls.n	800f63a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800f636:	2303      	movs	r3, #3
 800f638:	e107      	b.n	800f84a <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f63a:	4b87      	ldr	r3, [pc, #540]	@ (800f858 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	2380      	movs	r3, #128	@ 0x80
 800f640:	005b      	lsls	r3, r3, #1
 800f642:	4013      	ands	r3, r2
 800f644:	d0f0      	beq.n	800f628 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800f646:	4b83      	ldr	r3, [pc, #524]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f648:	681a      	ldr	r2, [r3, #0]
 800f64a:	23c0      	movs	r3, #192	@ 0xc0
 800f64c:	039b      	lsls	r3, r3, #14
 800f64e:	4013      	ands	r3, r2
 800f650:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	685a      	ldr	r2, [r3, #4]
 800f656:	23c0      	movs	r3, #192	@ 0xc0
 800f658:	039b      	lsls	r3, r3, #14
 800f65a:	4013      	ands	r3, r2
 800f65c:	68fa      	ldr	r2, [r7, #12]
 800f65e:	429a      	cmp	r2, r3
 800f660:	d013      	beq.n	800f68a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	685a      	ldr	r2, [r3, #4]
 800f666:	23c0      	movs	r3, #192	@ 0xc0
 800f668:	029b      	lsls	r3, r3, #10
 800f66a:	401a      	ands	r2, r3
 800f66c:	23c0      	movs	r3, #192	@ 0xc0
 800f66e:	029b      	lsls	r3, r3, #10
 800f670:	429a      	cmp	r2, r3
 800f672:	d10a      	bne.n	800f68a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f674:	4b77      	ldr	r3, [pc, #476]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	2380      	movs	r3, #128	@ 0x80
 800f67a:	029b      	lsls	r3, r3, #10
 800f67c:	401a      	ands	r2, r3
 800f67e:	2380      	movs	r3, #128	@ 0x80
 800f680:	029b      	lsls	r3, r3, #10
 800f682:	429a      	cmp	r2, r3
 800f684:	d101      	bne.n	800f68a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800f686:	2301      	movs	r3, #1
 800f688:	e0df      	b.n	800f84a <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800f68a:	4b72      	ldr	r3, [pc, #456]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f68c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f68e:	23c0      	movs	r3, #192	@ 0xc0
 800f690:	029b      	lsls	r3, r3, #10
 800f692:	4013      	ands	r3, r2
 800f694:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d03b      	beq.n	800f714 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	685a      	ldr	r2, [r3, #4]
 800f6a0:	23c0      	movs	r3, #192	@ 0xc0
 800f6a2:	029b      	lsls	r3, r3, #10
 800f6a4:	4013      	ands	r3, r2
 800f6a6:	68fa      	ldr	r2, [r7, #12]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d033      	beq.n	800f714 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	2220      	movs	r2, #32
 800f6b2:	4013      	ands	r3, r2
 800f6b4:	d02e      	beq.n	800f714 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800f6b6:	4b67      	ldr	r3, [pc, #412]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6ba:	4a68      	ldr	r2, [pc, #416]	@ (800f85c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800f6bc:	4013      	ands	r3, r2
 800f6be:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f6c0:	4b64      	ldr	r3, [pc, #400]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f6c4:	4b63      	ldr	r3, [pc, #396]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6c6:	2180      	movs	r1, #128	@ 0x80
 800f6c8:	0309      	lsls	r1, r1, #12
 800f6ca:	430a      	orrs	r2, r1
 800f6cc:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f6ce:	4b61      	ldr	r3, [pc, #388]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f6d2:	4b60      	ldr	r3, [pc, #384]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6d4:	4962      	ldr	r1, [pc, #392]	@ (800f860 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800f6d6:	400a      	ands	r2, r1
 800f6d8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800f6da:	4b5e      	ldr	r3, [pc, #376]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6dc:	68fa      	ldr	r2, [r7, #12]
 800f6de:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800f6e0:	68fa      	ldr	r2, [r7, #12]
 800f6e2:	2380      	movs	r3, #128	@ 0x80
 800f6e4:	005b      	lsls	r3, r3, #1
 800f6e6:	4013      	ands	r3, r2
 800f6e8:	d014      	beq.n	800f714 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f6ea:	f7f9 fdf3 	bl	80092d4 <HAL_GetTick>
 800f6ee:	0003      	movs	r3, r0
 800f6f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f6f2:	e009      	b.n	800f708 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f6f4:	f7f9 fdee 	bl	80092d4 <HAL_GetTick>
 800f6f8:	0002      	movs	r2, r0
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	1ad3      	subs	r3, r2, r3
 800f6fe:	4a59      	ldr	r2, [pc, #356]	@ (800f864 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d901      	bls.n	800f708 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800f704:	2303      	movs	r3, #3
 800f706:	e0a0      	b.n	800f84a <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f708:	4b52      	ldr	r3, [pc, #328]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f70a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f70c:	2380      	movs	r3, #128	@ 0x80
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	4013      	ands	r3, r2
 800f712:	d0ef      	beq.n	800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	2220      	movs	r2, #32
 800f71a:	4013      	ands	r3, r2
 800f71c:	d01f      	beq.n	800f75e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	685a      	ldr	r2, [r3, #4]
 800f722:	23c0      	movs	r3, #192	@ 0xc0
 800f724:	029b      	lsls	r3, r3, #10
 800f726:	401a      	ands	r2, r3
 800f728:	23c0      	movs	r3, #192	@ 0xc0
 800f72a:	029b      	lsls	r3, r3, #10
 800f72c:	429a      	cmp	r2, r3
 800f72e:	d10c      	bne.n	800f74a <HAL_RCCEx_PeriphCLKConfig+0x182>
 800f730:	4b48      	ldr	r3, [pc, #288]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	4a4c      	ldr	r2, [pc, #304]	@ (800f868 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800f736:	4013      	ands	r3, r2
 800f738:	0019      	movs	r1, r3
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	685a      	ldr	r2, [r3, #4]
 800f73e:	23c0      	movs	r3, #192	@ 0xc0
 800f740:	039b      	lsls	r3, r3, #14
 800f742:	401a      	ands	r2, r3
 800f744:	4b43      	ldr	r3, [pc, #268]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f746:	430a      	orrs	r2, r1
 800f748:	601a      	str	r2, [r3, #0]
 800f74a:	4b42      	ldr	r3, [pc, #264]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f74c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	685a      	ldr	r2, [r3, #4]
 800f752:	23c0      	movs	r3, #192	@ 0xc0
 800f754:	029b      	lsls	r3, r3, #10
 800f756:	401a      	ands	r2, r3
 800f758:	4b3e      	ldr	r3, [pc, #248]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f75a:	430a      	orrs	r2, r1
 800f75c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800f75e:	2317      	movs	r3, #23
 800f760:	18fb      	adds	r3, r7, r3
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	2b01      	cmp	r3, #1
 800f766:	d105      	bne.n	800f774 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f768:	4b3a      	ldr	r3, [pc, #232]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f76a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f76c:	4b39      	ldr	r3, [pc, #228]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f76e:	493f      	ldr	r1, [pc, #252]	@ (800f86c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800f770:	400a      	ands	r2, r1
 800f772:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	2201      	movs	r2, #1
 800f77a:	4013      	ands	r3, r2
 800f77c:	d009      	beq.n	800f792 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f77e:	4b35      	ldr	r3, [pc, #212]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f782:	2203      	movs	r2, #3
 800f784:	4393      	bics	r3, r2
 800f786:	0019      	movs	r1, r3
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	689a      	ldr	r2, [r3, #8]
 800f78c:	4b31      	ldr	r3, [pc, #196]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f78e:	430a      	orrs	r2, r1
 800f790:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	2202      	movs	r2, #2
 800f798:	4013      	ands	r3, r2
 800f79a:	d009      	beq.n	800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f79c:	4b2d      	ldr	r3, [pc, #180]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f79e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7a0:	220c      	movs	r2, #12
 800f7a2:	4393      	bics	r3, r2
 800f7a4:	0019      	movs	r1, r3
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	68da      	ldr	r2, [r3, #12]
 800f7aa:	4b2a      	ldr	r3, [pc, #168]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f7ac:	430a      	orrs	r2, r1
 800f7ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	2204      	movs	r2, #4
 800f7b6:	4013      	ands	r3, r2
 800f7b8:	d009      	beq.n	800f7ce <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f7ba:	4b26      	ldr	r3, [pc, #152]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f7bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7be:	4a2c      	ldr	r2, [pc, #176]	@ (800f870 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800f7c0:	4013      	ands	r3, r2
 800f7c2:	0019      	movs	r1, r3
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	691a      	ldr	r2, [r3, #16]
 800f7c8:	4b22      	ldr	r3, [pc, #136]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f7ca:	430a      	orrs	r2, r1
 800f7cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	2208      	movs	r2, #8
 800f7d4:	4013      	ands	r3, r2
 800f7d6:	d009      	beq.n	800f7ec <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f7d8:	4b1e      	ldr	r3, [pc, #120]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f7da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7dc:	4a25      	ldr	r2, [pc, #148]	@ (800f874 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800f7de:	4013      	ands	r3, r2
 800f7e0:	0019      	movs	r1, r3
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	695a      	ldr	r2, [r3, #20]
 800f7e6:	4b1b      	ldr	r3, [pc, #108]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f7e8:	430a      	orrs	r2, r1
 800f7ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681a      	ldr	r2, [r3, #0]
 800f7f0:	2380      	movs	r3, #128	@ 0x80
 800f7f2:	005b      	lsls	r3, r3, #1
 800f7f4:	4013      	ands	r3, r2
 800f7f6:	d009      	beq.n	800f80c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f7f8:	4b16      	ldr	r3, [pc, #88]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f7fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f7fc:	4a17      	ldr	r2, [pc, #92]	@ (800f85c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800f7fe:	4013      	ands	r3, r2
 800f800:	0019      	movs	r1, r3
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	699a      	ldr	r2, [r3, #24]
 800f806:	4b13      	ldr	r3, [pc, #76]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f808:	430a      	orrs	r2, r1
 800f80a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	2240      	movs	r2, #64	@ 0x40
 800f812:	4013      	ands	r3, r2
 800f814:	d009      	beq.n	800f82a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f816:	4b0f      	ldr	r3, [pc, #60]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f81a:	4a17      	ldr	r2, [pc, #92]	@ (800f878 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800f81c:	4013      	ands	r3, r2
 800f81e:	0019      	movs	r1, r3
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6a1a      	ldr	r2, [r3, #32]
 800f824:	4b0b      	ldr	r3, [pc, #44]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f826:	430a      	orrs	r2, r1
 800f828:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	2280      	movs	r2, #128	@ 0x80
 800f830:	4013      	ands	r3, r2
 800f832:	d009      	beq.n	800f848 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800f834:	4b07      	ldr	r3, [pc, #28]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f838:	4a10      	ldr	r2, [pc, #64]	@ (800f87c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800f83a:	4013      	ands	r3, r2
 800f83c:	0019      	movs	r1, r3
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	69da      	ldr	r2, [r3, #28]
 800f842:	4b04      	ldr	r3, [pc, #16]	@ (800f854 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f844:	430a      	orrs	r2, r1
 800f846:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f848:	2300      	movs	r3, #0
}
 800f84a:	0018      	movs	r0, r3
 800f84c:	46bd      	mov	sp, r7
 800f84e:	b006      	add	sp, #24
 800f850:	bd80      	pop	{r7, pc}
 800f852:	46c0      	nop			@ (mov r8, r8)
 800f854:	40021000 	.word	0x40021000
 800f858:	40007000 	.word	0x40007000
 800f85c:	fffcffff 	.word	0xfffcffff
 800f860:	fff7ffff 	.word	0xfff7ffff
 800f864:	00001388 	.word	0x00001388
 800f868:	ffcfffff 	.word	0xffcfffff
 800f86c:	efffffff 	.word	0xefffffff
 800f870:	fffff3ff 	.word	0xfffff3ff
 800f874:	ffffcfff 	.word	0xffffcfff
 800f878:	fbffffff 	.word	0xfbffffff
 800f87c:	fff3ffff 	.word	0xfff3ffff

0800f880 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d101      	bne.n	800f892 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f88e:	2301      	movs	r3, #1
 800f890:	e032      	b.n	800f8f8 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2239      	movs	r2, #57	@ 0x39
 800f896:	5c9b      	ldrb	r3, [r3, r2]
 800f898:	b2db      	uxtb	r3, r3
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d107      	bne.n	800f8ae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2238      	movs	r2, #56	@ 0x38
 800f8a2:	2100      	movs	r1, #0
 800f8a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	0018      	movs	r0, r3
 800f8aa:	f7f8 fed7 	bl	800865c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2239      	movs	r2, #57	@ 0x39
 800f8b2:	2102      	movs	r1, #2
 800f8b4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681a      	ldr	r2, [r3, #0]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	3304      	adds	r3, #4
 800f8be:	0019      	movs	r1, r3
 800f8c0:	0010      	movs	r0, r2
 800f8c2:	f000 f975 	bl	800fbb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	223e      	movs	r2, #62	@ 0x3e
 800f8ca:	2101      	movs	r1, #1
 800f8cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	223a      	movs	r2, #58	@ 0x3a
 800f8d2:	2101      	movs	r1, #1
 800f8d4:	5499      	strb	r1, [r3, r2]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	223b      	movs	r2, #59	@ 0x3b
 800f8da:	2101      	movs	r1, #1
 800f8dc:	5499      	strb	r1, [r3, r2]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	223c      	movs	r2, #60	@ 0x3c
 800f8e2:	2101      	movs	r1, #1
 800f8e4:	5499      	strb	r1, [r3, r2]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	223d      	movs	r2, #61	@ 0x3d
 800f8ea:	2101      	movs	r1, #1
 800f8ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2239      	movs	r2, #57	@ 0x39
 800f8f2:	2101      	movs	r1, #1
 800f8f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f8f6:	2300      	movs	r3, #0
}
 800f8f8:	0018      	movs	r0, r3
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	b002      	add	sp, #8
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b084      	sub	sp, #16
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d108      	bne.n	800f922 <HAL_TIM_PWM_Start+0x22>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	223a      	movs	r2, #58	@ 0x3a
 800f914:	5c9b      	ldrb	r3, [r3, r2]
 800f916:	b2db      	uxtb	r3, r3
 800f918:	3b01      	subs	r3, #1
 800f91a:	1e5a      	subs	r2, r3, #1
 800f91c:	4193      	sbcs	r3, r2
 800f91e:	b2db      	uxtb	r3, r3
 800f920:	e01f      	b.n	800f962 <HAL_TIM_PWM_Start+0x62>
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	2b04      	cmp	r3, #4
 800f926:	d108      	bne.n	800f93a <HAL_TIM_PWM_Start+0x3a>
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	223b      	movs	r2, #59	@ 0x3b
 800f92c:	5c9b      	ldrb	r3, [r3, r2]
 800f92e:	b2db      	uxtb	r3, r3
 800f930:	3b01      	subs	r3, #1
 800f932:	1e5a      	subs	r2, r3, #1
 800f934:	4193      	sbcs	r3, r2
 800f936:	b2db      	uxtb	r3, r3
 800f938:	e013      	b.n	800f962 <HAL_TIM_PWM_Start+0x62>
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	2b08      	cmp	r3, #8
 800f93e:	d108      	bne.n	800f952 <HAL_TIM_PWM_Start+0x52>
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	223c      	movs	r2, #60	@ 0x3c
 800f944:	5c9b      	ldrb	r3, [r3, r2]
 800f946:	b2db      	uxtb	r3, r3
 800f948:	3b01      	subs	r3, #1
 800f94a:	1e5a      	subs	r2, r3, #1
 800f94c:	4193      	sbcs	r3, r2
 800f94e:	b2db      	uxtb	r3, r3
 800f950:	e007      	b.n	800f962 <HAL_TIM_PWM_Start+0x62>
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	223d      	movs	r2, #61	@ 0x3d
 800f956:	5c9b      	ldrb	r3, [r3, r2]
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	3b01      	subs	r3, #1
 800f95c:	1e5a      	subs	r2, r3, #1
 800f95e:	4193      	sbcs	r3, r2
 800f960:	b2db      	uxtb	r3, r3
 800f962:	2b00      	cmp	r3, #0
 800f964:	d001      	beq.n	800f96a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800f966:	2301      	movs	r3, #1
 800f968:	e052      	b.n	800fa10 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d104      	bne.n	800f97a <HAL_TIM_PWM_Start+0x7a>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	223a      	movs	r2, #58	@ 0x3a
 800f974:	2102      	movs	r1, #2
 800f976:	5499      	strb	r1, [r3, r2]
 800f978:	e013      	b.n	800f9a2 <HAL_TIM_PWM_Start+0xa2>
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	2b04      	cmp	r3, #4
 800f97e:	d104      	bne.n	800f98a <HAL_TIM_PWM_Start+0x8a>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	223b      	movs	r2, #59	@ 0x3b
 800f984:	2102      	movs	r1, #2
 800f986:	5499      	strb	r1, [r3, r2]
 800f988:	e00b      	b.n	800f9a2 <HAL_TIM_PWM_Start+0xa2>
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	2b08      	cmp	r3, #8
 800f98e:	d104      	bne.n	800f99a <HAL_TIM_PWM_Start+0x9a>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	223c      	movs	r2, #60	@ 0x3c
 800f994:	2102      	movs	r1, #2
 800f996:	5499      	strb	r1, [r3, r2]
 800f998:	e003      	b.n	800f9a2 <HAL_TIM_PWM_Start+0xa2>
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	223d      	movs	r2, #61	@ 0x3d
 800f99e:	2102      	movs	r1, #2
 800f9a0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	6839      	ldr	r1, [r7, #0]
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	0018      	movs	r0, r3
 800f9ac:	f000 fa62 	bl	800fe74 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681a      	ldr	r2, [r3, #0]
 800f9b4:	2380      	movs	r3, #128	@ 0x80
 800f9b6:	05db      	lsls	r3, r3, #23
 800f9b8:	429a      	cmp	r2, r3
 800f9ba:	d00e      	beq.n	800f9da <HAL_TIM_PWM_Start+0xda>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	4a15      	ldr	r2, [pc, #84]	@ (800fa18 <HAL_TIM_PWM_Start+0x118>)
 800f9c2:	4293      	cmp	r3, r2
 800f9c4:	d009      	beq.n	800f9da <HAL_TIM_PWM_Start+0xda>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	4a14      	ldr	r2, [pc, #80]	@ (800fa1c <HAL_TIM_PWM_Start+0x11c>)
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d004      	beq.n	800f9da <HAL_TIM_PWM_Start+0xda>
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	4a12      	ldr	r2, [pc, #72]	@ (800fa20 <HAL_TIM_PWM_Start+0x120>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d111      	bne.n	800f9fe <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	689b      	ldr	r3, [r3, #8]
 800f9e0:	2207      	movs	r2, #7
 800f9e2:	4013      	ands	r3, r2
 800f9e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	2b06      	cmp	r3, #6
 800f9ea:	d010      	beq.n	800fa0e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	681a      	ldr	r2, [r3, #0]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	2101      	movs	r1, #1
 800f9f8:	430a      	orrs	r2, r1
 800f9fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9fc:	e007      	b.n	800fa0e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	681a      	ldr	r2, [r3, #0]
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	2101      	movs	r1, #1
 800fa0a:	430a      	orrs	r2, r1
 800fa0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fa0e:	2300      	movs	r3, #0
}
 800fa10:	0018      	movs	r0, r3
 800fa12:	46bd      	mov	sp, r7
 800fa14:	b004      	add	sp, #16
 800fa16:	bd80      	pop	{r7, pc}
 800fa18:	40000400 	.word	0x40000400
 800fa1c:	40010800 	.word	0x40010800
 800fa20:	40011400 	.word	0x40011400

0800fa24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b086      	sub	sp, #24
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fa30:	2317      	movs	r3, #23
 800fa32:	18fb      	adds	r3, r7, r3
 800fa34:	2200      	movs	r2, #0
 800fa36:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	2238      	movs	r2, #56	@ 0x38
 800fa3c:	5c9b      	ldrb	r3, [r3, r2]
 800fa3e:	2b01      	cmp	r3, #1
 800fa40:	d101      	bne.n	800fa46 <HAL_TIM_PWM_ConfigChannel+0x22>
 800fa42:	2302      	movs	r3, #2
 800fa44:	e0ad      	b.n	800fba2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2238      	movs	r2, #56	@ 0x38
 800fa4a:	2101      	movs	r1, #1
 800fa4c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2b0c      	cmp	r3, #12
 800fa52:	d100      	bne.n	800fa56 <HAL_TIM_PWM_ConfigChannel+0x32>
 800fa54:	e076      	b.n	800fb44 <HAL_TIM_PWM_ConfigChannel+0x120>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2b0c      	cmp	r3, #12
 800fa5a:	d900      	bls.n	800fa5e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800fa5c:	e095      	b.n	800fb8a <HAL_TIM_PWM_ConfigChannel+0x166>
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2b08      	cmp	r3, #8
 800fa62:	d04e      	beq.n	800fb02 <HAL_TIM_PWM_ConfigChannel+0xde>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2b08      	cmp	r3, #8
 800fa68:	d900      	bls.n	800fa6c <HAL_TIM_PWM_ConfigChannel+0x48>
 800fa6a:	e08e      	b.n	800fb8a <HAL_TIM_PWM_ConfigChannel+0x166>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d003      	beq.n	800fa7a <HAL_TIM_PWM_ConfigChannel+0x56>
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2b04      	cmp	r3, #4
 800fa76:	d021      	beq.n	800fabc <HAL_TIM_PWM_ConfigChannel+0x98>
 800fa78:	e087      	b.n	800fb8a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	68ba      	ldr	r2, [r7, #8]
 800fa80:	0011      	movs	r1, r2
 800fa82:	0018      	movs	r0, r3
 800fa84:	f000 f8f2 	bl	800fc6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	699a      	ldr	r2, [r3, #24]
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	2108      	movs	r1, #8
 800fa94:	430a      	orrs	r2, r1
 800fa96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	699a      	ldr	r2, [r3, #24]
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	2104      	movs	r1, #4
 800faa4:	438a      	bics	r2, r1
 800faa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	6999      	ldr	r1, [r3, #24]
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	68da      	ldr	r2, [r3, #12]
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	430a      	orrs	r2, r1
 800fab8:	619a      	str	r2, [r3, #24]
      break;
 800faba:	e06b      	b.n	800fb94 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	68ba      	ldr	r2, [r7, #8]
 800fac2:	0011      	movs	r1, r2
 800fac4:	0018      	movs	r0, r3
 800fac6:	f000 f90d 	bl	800fce4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	699a      	ldr	r2, [r3, #24]
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	2180      	movs	r1, #128	@ 0x80
 800fad6:	0109      	lsls	r1, r1, #4
 800fad8:	430a      	orrs	r2, r1
 800fada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	699a      	ldr	r2, [r3, #24]
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	4931      	ldr	r1, [pc, #196]	@ (800fbac <HAL_TIM_PWM_ConfigChannel+0x188>)
 800fae8:	400a      	ands	r2, r1
 800faea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	6999      	ldr	r1, [r3, #24]
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	68db      	ldr	r3, [r3, #12]
 800faf6:	021a      	lsls	r2, r3, #8
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	430a      	orrs	r2, r1
 800fafe:	619a      	str	r2, [r3, #24]
      break;
 800fb00:	e048      	b.n	800fb94 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	68ba      	ldr	r2, [r7, #8]
 800fb08:	0011      	movs	r1, r2
 800fb0a:	0018      	movs	r0, r3
 800fb0c:	f000 f92c 	bl	800fd68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	69da      	ldr	r2, [r3, #28]
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	2108      	movs	r1, #8
 800fb1c:	430a      	orrs	r2, r1
 800fb1e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	69da      	ldr	r2, [r3, #28]
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	2104      	movs	r1, #4
 800fb2c:	438a      	bics	r2, r1
 800fb2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	69d9      	ldr	r1, [r3, #28]
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	68da      	ldr	r2, [r3, #12]
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	430a      	orrs	r2, r1
 800fb40:	61da      	str	r2, [r3, #28]
      break;
 800fb42:	e027      	b.n	800fb94 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	68ba      	ldr	r2, [r7, #8]
 800fb4a:	0011      	movs	r1, r2
 800fb4c:	0018      	movs	r0, r3
 800fb4e:	f000 f94b 	bl	800fde8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	69da      	ldr	r2, [r3, #28]
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	2180      	movs	r1, #128	@ 0x80
 800fb5e:	0109      	lsls	r1, r1, #4
 800fb60:	430a      	orrs	r2, r1
 800fb62:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	69da      	ldr	r2, [r3, #28]
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	490f      	ldr	r1, [pc, #60]	@ (800fbac <HAL_TIM_PWM_ConfigChannel+0x188>)
 800fb70:	400a      	ands	r2, r1
 800fb72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	69d9      	ldr	r1, [r3, #28]
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	68db      	ldr	r3, [r3, #12]
 800fb7e:	021a      	lsls	r2, r3, #8
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	430a      	orrs	r2, r1
 800fb86:	61da      	str	r2, [r3, #28]
      break;
 800fb88:	e004      	b.n	800fb94 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800fb8a:	2317      	movs	r3, #23
 800fb8c:	18fb      	adds	r3, r7, r3
 800fb8e:	2201      	movs	r2, #1
 800fb90:	701a      	strb	r2, [r3, #0]
      break;
 800fb92:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2238      	movs	r2, #56	@ 0x38
 800fb98:	2100      	movs	r1, #0
 800fb9a:	5499      	strb	r1, [r3, r2]

  return status;
 800fb9c:	2317      	movs	r3, #23
 800fb9e:	18fb      	adds	r3, r7, r3
 800fba0:	781b      	ldrb	r3, [r3, #0]
}
 800fba2:	0018      	movs	r0, r3
 800fba4:	46bd      	mov	sp, r7
 800fba6:	b006      	add	sp, #24
 800fba8:	bd80      	pop	{r7, pc}
 800fbaa:	46c0      	nop			@ (mov r8, r8)
 800fbac:	fffffbff 	.word	0xfffffbff

0800fbb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	2380      	movs	r3, #128	@ 0x80
 800fbc4:	05db      	lsls	r3, r3, #23
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d00b      	beq.n	800fbe2 <TIM_Base_SetConfig+0x32>
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	4a23      	ldr	r2, [pc, #140]	@ (800fc5c <TIM_Base_SetConfig+0xac>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d007      	beq.n	800fbe2 <TIM_Base_SetConfig+0x32>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	4a22      	ldr	r2, [pc, #136]	@ (800fc60 <TIM_Base_SetConfig+0xb0>)
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d003      	beq.n	800fbe2 <TIM_Base_SetConfig+0x32>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	4a21      	ldr	r2, [pc, #132]	@ (800fc64 <TIM_Base_SetConfig+0xb4>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d108      	bne.n	800fbf4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	2270      	movs	r2, #112	@ 0x70
 800fbe6:	4393      	bics	r3, r2
 800fbe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	685b      	ldr	r3, [r3, #4]
 800fbee:	68fa      	ldr	r2, [r7, #12]
 800fbf0:	4313      	orrs	r3, r2
 800fbf2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	2380      	movs	r3, #128	@ 0x80
 800fbf8:	05db      	lsls	r3, r3, #23
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d00b      	beq.n	800fc16 <TIM_Base_SetConfig+0x66>
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	4a16      	ldr	r2, [pc, #88]	@ (800fc5c <TIM_Base_SetConfig+0xac>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d007      	beq.n	800fc16 <TIM_Base_SetConfig+0x66>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	4a15      	ldr	r2, [pc, #84]	@ (800fc60 <TIM_Base_SetConfig+0xb0>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d003      	beq.n	800fc16 <TIM_Base_SetConfig+0x66>
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	4a14      	ldr	r2, [pc, #80]	@ (800fc64 <TIM_Base_SetConfig+0xb4>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d108      	bne.n	800fc28 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	4a13      	ldr	r2, [pc, #76]	@ (800fc68 <TIM_Base_SetConfig+0xb8>)
 800fc1a:	4013      	ands	r3, r2
 800fc1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	68db      	ldr	r3, [r3, #12]
 800fc22:	68fa      	ldr	r2, [r7, #12]
 800fc24:	4313      	orrs	r3, r2
 800fc26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	2280      	movs	r2, #128	@ 0x80
 800fc2c:	4393      	bics	r3, r2
 800fc2e:	001a      	movs	r2, r3
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	691b      	ldr	r3, [r3, #16]
 800fc34:	4313      	orrs	r3, r2
 800fc36:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	68fa      	ldr	r2, [r7, #12]
 800fc3c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	689a      	ldr	r2, [r3, #8]
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	681a      	ldr	r2, [r3, #0]
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2201      	movs	r2, #1
 800fc52:	615a      	str	r2, [r3, #20]
}
 800fc54:	46c0      	nop			@ (mov r8, r8)
 800fc56:	46bd      	mov	sp, r7
 800fc58:	b004      	add	sp, #16
 800fc5a:	bd80      	pop	{r7, pc}
 800fc5c:	40000400 	.word	0x40000400
 800fc60:	40010800 	.word	0x40010800
 800fc64:	40011400 	.word	0x40011400
 800fc68:	fffffcff 	.word	0xfffffcff

0800fc6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b086      	sub	sp, #24
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6a1b      	ldr	r3, [r3, #32]
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	4393      	bics	r3, r2
 800fc7e:	001a      	movs	r2, r3
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6a1b      	ldr	r3, [r3, #32]
 800fc88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	685b      	ldr	r3, [r3, #4]
 800fc8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	699b      	ldr	r3, [r3, #24]
 800fc94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	2270      	movs	r2, #112	@ 0x70
 800fc9a:	4393      	bics	r3, r2
 800fc9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2203      	movs	r2, #3
 800fca2:	4393      	bics	r3, r2
 800fca4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	68fa      	ldr	r2, [r7, #12]
 800fcac:	4313      	orrs	r3, r2
 800fcae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	2202      	movs	r2, #2
 800fcb4:	4393      	bics	r3, r2
 800fcb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	689b      	ldr	r3, [r3, #8]
 800fcbc:	697a      	ldr	r2, [r7, #20]
 800fcbe:	4313      	orrs	r3, r2
 800fcc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	693a      	ldr	r2, [r7, #16]
 800fcc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	68fa      	ldr	r2, [r7, #12]
 800fccc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	685a      	ldr	r2, [r3, #4]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	697a      	ldr	r2, [r7, #20]
 800fcda:	621a      	str	r2, [r3, #32]
}
 800fcdc:	46c0      	nop			@ (mov r8, r8)
 800fcde:	46bd      	mov	sp, r7
 800fce0:	b006      	add	sp, #24
 800fce2:	bd80      	pop	{r7, pc}

0800fce4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b086      	sub	sp, #24
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
 800fcec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6a1b      	ldr	r3, [r3, #32]
 800fcf2:	2210      	movs	r2, #16
 800fcf4:	4393      	bics	r3, r2
 800fcf6:	001a      	movs	r2, r3
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6a1b      	ldr	r3, [r3, #32]
 800fd00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	699b      	ldr	r3, [r3, #24]
 800fd0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	4a13      	ldr	r2, [pc, #76]	@ (800fd60 <TIM_OC2_SetConfig+0x7c>)
 800fd12:	4013      	ands	r3, r2
 800fd14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	4a12      	ldr	r2, [pc, #72]	@ (800fd64 <TIM_OC2_SetConfig+0x80>)
 800fd1a:	4013      	ands	r3, r2
 800fd1c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	021b      	lsls	r3, r3, #8
 800fd24:	68fa      	ldr	r2, [r7, #12]
 800fd26:	4313      	orrs	r3, r2
 800fd28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	2220      	movs	r2, #32
 800fd2e:	4393      	bics	r3, r2
 800fd30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fd32:	683b      	ldr	r3, [r7, #0]
 800fd34:	689b      	ldr	r3, [r3, #8]
 800fd36:	011b      	lsls	r3, r3, #4
 800fd38:	697a      	ldr	r2, [r7, #20]
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	693a      	ldr	r2, [r7, #16]
 800fd42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	68fa      	ldr	r2, [r7, #12]
 800fd48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	685a      	ldr	r2, [r3, #4]
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	697a      	ldr	r2, [r7, #20]
 800fd56:	621a      	str	r2, [r3, #32]
}
 800fd58:	46c0      	nop			@ (mov r8, r8)
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	b006      	add	sp, #24
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	ffff8fff 	.word	0xffff8fff
 800fd64:	fffffcff 	.word	0xfffffcff

0800fd68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b086      	sub	sp, #24
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
 800fd70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6a1b      	ldr	r3, [r3, #32]
 800fd76:	4a1a      	ldr	r2, [pc, #104]	@ (800fde0 <TIM_OC3_SetConfig+0x78>)
 800fd78:	401a      	ands	r2, r3
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6a1b      	ldr	r3, [r3, #32]
 800fd82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	69db      	ldr	r3, [r3, #28]
 800fd8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	2270      	movs	r2, #112	@ 0x70
 800fd94:	4393      	bics	r3, r2
 800fd96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2203      	movs	r2, #3
 800fd9c:	4393      	bics	r3, r2
 800fd9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	68fa      	ldr	r2, [r7, #12]
 800fda6:	4313      	orrs	r3, r2
 800fda8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	4a0d      	ldr	r2, [pc, #52]	@ (800fde4 <TIM_OC3_SetConfig+0x7c>)
 800fdae:	4013      	ands	r3, r2
 800fdb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	689b      	ldr	r3, [r3, #8]
 800fdb6:	021b      	lsls	r3, r3, #8
 800fdb8:	697a      	ldr	r2, [r7, #20]
 800fdba:	4313      	orrs	r3, r2
 800fdbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	693a      	ldr	r2, [r7, #16]
 800fdc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	68fa      	ldr	r2, [r7, #12]
 800fdc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	685a      	ldr	r2, [r3, #4]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	697a      	ldr	r2, [r7, #20]
 800fdd6:	621a      	str	r2, [r3, #32]
}
 800fdd8:	46c0      	nop			@ (mov r8, r8)
 800fdda:	46bd      	mov	sp, r7
 800fddc:	b006      	add	sp, #24
 800fdde:	bd80      	pop	{r7, pc}
 800fde0:	fffffeff 	.word	0xfffffeff
 800fde4:	fffffdff 	.word	0xfffffdff

0800fde8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b086      	sub	sp, #24
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6a1b      	ldr	r3, [r3, #32]
 800fdf6:	4a1b      	ldr	r2, [pc, #108]	@ (800fe64 <TIM_OC4_SetConfig+0x7c>)
 800fdf8:	401a      	ands	r2, r3
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6a1b      	ldr	r3, [r3, #32]
 800fe02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	685b      	ldr	r3, [r3, #4]
 800fe08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	69db      	ldr	r3, [r3, #28]
 800fe0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	4a15      	ldr	r2, [pc, #84]	@ (800fe68 <TIM_OC4_SetConfig+0x80>)
 800fe14:	4013      	ands	r3, r2
 800fe16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	4a14      	ldr	r2, [pc, #80]	@ (800fe6c <TIM_OC4_SetConfig+0x84>)
 800fe1c:	4013      	ands	r3, r2
 800fe1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	021b      	lsls	r3, r3, #8
 800fe26:	68fa      	ldr	r2, [r7, #12]
 800fe28:	4313      	orrs	r3, r2
 800fe2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	4a10      	ldr	r2, [pc, #64]	@ (800fe70 <TIM_OC4_SetConfig+0x88>)
 800fe30:	4013      	ands	r3, r2
 800fe32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	689b      	ldr	r3, [r3, #8]
 800fe38:	031b      	lsls	r3, r3, #12
 800fe3a:	697a      	ldr	r2, [r7, #20]
 800fe3c:	4313      	orrs	r3, r2
 800fe3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	693a      	ldr	r2, [r7, #16]
 800fe44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	68fa      	ldr	r2, [r7, #12]
 800fe4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	685a      	ldr	r2, [r3, #4]
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	697a      	ldr	r2, [r7, #20]
 800fe58:	621a      	str	r2, [r3, #32]
}
 800fe5a:	46c0      	nop			@ (mov r8, r8)
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	b006      	add	sp, #24
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	46c0      	nop			@ (mov r8, r8)
 800fe64:	ffffefff 	.word	0xffffefff
 800fe68:	ffff8fff 	.word	0xffff8fff
 800fe6c:	fffffcff 	.word	0xfffffcff
 800fe70:	ffffdfff 	.word	0xffffdfff

0800fe74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b086      	sub	sp, #24
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	60b9      	str	r1, [r7, #8]
 800fe7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	221f      	movs	r2, #31
 800fe84:	4013      	ands	r3, r2
 800fe86:	2201      	movs	r2, #1
 800fe88:	409a      	lsls	r2, r3
 800fe8a:	0013      	movs	r3, r2
 800fe8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	6a1b      	ldr	r3, [r3, #32]
 800fe92:	697a      	ldr	r2, [r7, #20]
 800fe94:	43d2      	mvns	r2, r2
 800fe96:	401a      	ands	r2, r3
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	6a1a      	ldr	r2, [r3, #32]
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	211f      	movs	r1, #31
 800fea4:	400b      	ands	r3, r1
 800fea6:	6879      	ldr	r1, [r7, #4]
 800fea8:	4099      	lsls	r1, r3
 800feaa:	000b      	movs	r3, r1
 800feac:	431a      	orrs	r2, r3
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	621a      	str	r2, [r3, #32]
}
 800feb2:	46c0      	nop			@ (mov r8, r8)
 800feb4:	46bd      	mov	sp, r7
 800feb6:	b006      	add	sp, #24
 800feb8:	bd80      	pop	{r7, pc}
	...

0800febc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b084      	sub	sp, #16
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2238      	movs	r2, #56	@ 0x38
 800feca:	5c9b      	ldrb	r3, [r3, r2]
 800fecc:	2b01      	cmp	r3, #1
 800fece:	d101      	bne.n	800fed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fed0:	2302      	movs	r3, #2
 800fed2:	e047      	b.n	800ff64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2238      	movs	r2, #56	@ 0x38
 800fed8:	2101      	movs	r1, #1
 800feda:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2239      	movs	r2, #57	@ 0x39
 800fee0:	2102      	movs	r1, #2
 800fee2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	685b      	ldr	r3, [r3, #4]
 800feea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	689b      	ldr	r3, [r3, #8]
 800fef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	2270      	movs	r2, #112	@ 0x70
 800fef8:	4393      	bics	r3, r2
 800fefa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	68fa      	ldr	r2, [r7, #12]
 800ff02:	4313      	orrs	r3, r2
 800ff04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	68fa      	ldr	r2, [r7, #12]
 800ff0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681a      	ldr	r2, [r3, #0]
 800ff12:	2380      	movs	r3, #128	@ 0x80
 800ff14:	05db      	lsls	r3, r3, #23
 800ff16:	429a      	cmp	r2, r3
 800ff18:	d00e      	beq.n	800ff38 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	4a13      	ldr	r2, [pc, #76]	@ (800ff6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800ff20:	4293      	cmp	r3, r2
 800ff22:	d009      	beq.n	800ff38 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	4a11      	ldr	r2, [pc, #68]	@ (800ff70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d004      	beq.n	800ff38 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	4a10      	ldr	r2, [pc, #64]	@ (800ff74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800ff34:	4293      	cmp	r3, r2
 800ff36:	d10c      	bne.n	800ff52 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	2280      	movs	r2, #128	@ 0x80
 800ff3c:	4393      	bics	r3, r2
 800ff3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	68ba      	ldr	r2, [r7, #8]
 800ff46:	4313      	orrs	r3, r2
 800ff48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	68ba      	ldr	r2, [r7, #8]
 800ff50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2239      	movs	r2, #57	@ 0x39
 800ff56:	2101      	movs	r1, #1
 800ff58:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2238      	movs	r2, #56	@ 0x38
 800ff5e:	2100      	movs	r1, #0
 800ff60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ff62:	2300      	movs	r3, #0
}
 800ff64:	0018      	movs	r0, r3
 800ff66:	46bd      	mov	sp, r7
 800ff68:	b004      	add	sp, #16
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	40000400 	.word	0x40000400
 800ff70:	40010800 	.word	0x40010800
 800ff74:	40011400 	.word	0x40011400

0800ff78 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2238      	movs	r2, #56	@ 0x38
 800ff86:	5c9b      	ldrb	r3, [r3, r2]
 800ff88:	2b01      	cmp	r3, #1
 800ff8a:	d101      	bne.n	800ff90 <HAL_TIMEx_RemapConfig+0x18>
 800ff8c:	2302      	movs	r3, #2
 800ff8e:	e00c      	b.n	800ffaa <HAL_TIMEx_RemapConfig+0x32>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2238      	movs	r2, #56	@ 0x38
 800ff94:	2101      	movs	r1, #1
 800ff96:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	683a      	ldr	r2, [r7, #0]
 800ff9e:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2238      	movs	r2, #56	@ 0x38
 800ffa4:	2100      	movs	r1, #0
 800ffa6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ffa8:	2300      	movs	r3, #0
}
 800ffaa:	0018      	movs	r0, r3
 800ffac:	46bd      	mov	sp, r7
 800ffae:	b002      	add	sp, #8
 800ffb0:	bd80      	pop	{r7, pc}
	...

0800ffb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d101      	bne.n	800ffc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	e053      	b.n	801006e <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d116      	bne.n	800fffc <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2278      	movs	r2, #120	@ 0x78
 800ffd2:	2100      	movs	r1, #0
 800ffd4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	0018      	movs	r0, r3
 800ffda:	f000 fd07 	bl	80109ec <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	22b0      	movs	r2, #176	@ 0xb0
 800ffe2:	589b      	ldr	r3, [r3, r2]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d103      	bne.n	800fff0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	21b0      	movs	r1, #176	@ 0xb0
 800ffec:	4a22      	ldr	r2, [pc, #136]	@ (8010078 <HAL_UART_Init+0xc4>)
 800ffee:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	22b0      	movs	r2, #176	@ 0xb0
 800fff4:	589b      	ldr	r3, [r3, r2]
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	0010      	movs	r0, r2
 800fffa:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2224      	movs	r2, #36	@ 0x24
 8010000:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	681a      	ldr	r2, [r3, #0]
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	2101      	movs	r1, #1
 801000e:	438a      	bics	r2, r1
 8010010:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	0018      	movs	r0, r3
 8010016:	f000 fd2d 	bl	8010a74 <UART_SetConfig>
 801001a:	0003      	movs	r3, r0
 801001c:	2b01      	cmp	r3, #1
 801001e:	d101      	bne.n	8010024 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8010020:	2301      	movs	r3, #1
 8010022:	e024      	b.n	801006e <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010028:	2b00      	cmp	r3, #0
 801002a:	d003      	beq.n	8010034 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	0018      	movs	r0, r3
 8010030:	f000 ffbe 	bl	8010fb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	685a      	ldr	r2, [r3, #4]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	490f      	ldr	r1, [pc, #60]	@ (801007c <HAL_UART_Init+0xc8>)
 8010040:	400a      	ands	r2, r1
 8010042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	689a      	ldr	r2, [r3, #8]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	212a      	movs	r1, #42	@ 0x2a
 8010050:	438a      	bics	r2, r1
 8010052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	681a      	ldr	r2, [r3, #0]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	2101      	movs	r1, #1
 8010060:	430a      	orrs	r2, r1
 8010062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	0018      	movs	r0, r3
 8010068:	f001 f856 	bl	8011118 <UART_CheckIdleState>
 801006c:	0003      	movs	r3, r0
}
 801006e:	0018      	movs	r0, r3
 8010070:	46bd      	mov	sp, r7
 8010072:	b002      	add	sp, #8
 8010074:	bd80      	pop	{r7, pc}
 8010076:	46c0      	nop			@ (mov r8, r8)
 8010078:	0800883d 	.word	0x0800883d
 801007c:	ffffb7ff 	.word	0xffffb7ff

08010080 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b08a      	sub	sp, #40	@ 0x28
 8010084:	af02      	add	r7, sp, #8
 8010086:	60f8      	str	r0, [r7, #12]
 8010088:	60b9      	str	r1, [r7, #8]
 801008a:	603b      	str	r3, [r7, #0]
 801008c:	1dbb      	adds	r3, r7, #6
 801008e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010094:	2b20      	cmp	r3, #32
 8010096:	d000      	beq.n	801009a <HAL_UART_Transmit+0x1a>
 8010098:	e08c      	b.n	80101b4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d003      	beq.n	80100a8 <HAL_UART_Transmit+0x28>
 80100a0:	1dbb      	adds	r3, r7, #6
 80100a2:	881b      	ldrh	r3, [r3, #0]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d101      	bne.n	80100ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80100a8:	2301      	movs	r3, #1
 80100aa:	e084      	b.n	80101b6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	689a      	ldr	r2, [r3, #8]
 80100b0:	2380      	movs	r3, #128	@ 0x80
 80100b2:	015b      	lsls	r3, r3, #5
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d109      	bne.n	80100cc <HAL_UART_Transmit+0x4c>
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	691b      	ldr	r3, [r3, #16]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d105      	bne.n	80100cc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80100c0:	68bb      	ldr	r3, [r7, #8]
 80100c2:	2201      	movs	r2, #1
 80100c4:	4013      	ands	r3, r2
 80100c6:	d001      	beq.n	80100cc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80100c8:	2301      	movs	r3, #1
 80100ca:	e074      	b.n	80101b6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2284      	movs	r2, #132	@ 0x84
 80100d0:	2100      	movs	r1, #0
 80100d2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	2221      	movs	r2, #33	@ 0x21
 80100d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80100da:	f7f9 f8fb 	bl	80092d4 <HAL_GetTick>
 80100de:	0003      	movs	r3, r0
 80100e0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	1dba      	adds	r2, r7, #6
 80100e6:	2150      	movs	r1, #80	@ 0x50
 80100e8:	8812      	ldrh	r2, [r2, #0]
 80100ea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	1dba      	adds	r2, r7, #6
 80100f0:	2152      	movs	r1, #82	@ 0x52
 80100f2:	8812      	ldrh	r2, [r2, #0]
 80100f4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	689a      	ldr	r2, [r3, #8]
 80100fa:	2380      	movs	r3, #128	@ 0x80
 80100fc:	015b      	lsls	r3, r3, #5
 80100fe:	429a      	cmp	r2, r3
 8010100:	d108      	bne.n	8010114 <HAL_UART_Transmit+0x94>
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	691b      	ldr	r3, [r3, #16]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d104      	bne.n	8010114 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801010a:	2300      	movs	r3, #0
 801010c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	61bb      	str	r3, [r7, #24]
 8010112:	e003      	b.n	801011c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010118:	2300      	movs	r3, #0
 801011a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801011c:	e02f      	b.n	801017e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801011e:	697a      	ldr	r2, [r7, #20]
 8010120:	68f8      	ldr	r0, [r7, #12]
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	9300      	str	r3, [sp, #0]
 8010126:	0013      	movs	r3, r2
 8010128:	2200      	movs	r2, #0
 801012a:	2180      	movs	r1, #128	@ 0x80
 801012c:	f001 f89c 	bl	8011268 <UART_WaitOnFlagUntilTimeout>
 8010130:	1e03      	subs	r3, r0, #0
 8010132:	d004      	beq.n	801013e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2220      	movs	r2, #32
 8010138:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801013a:	2303      	movs	r3, #3
 801013c:	e03b      	b.n	80101b6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801013e:	69fb      	ldr	r3, [r7, #28]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d10b      	bne.n	801015c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010144:	69bb      	ldr	r3, [r7, #24]
 8010146:	881b      	ldrh	r3, [r3, #0]
 8010148:	001a      	movs	r2, r3
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	05d2      	lsls	r2, r2, #23
 8010150:	0dd2      	lsrs	r2, r2, #23
 8010152:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8010154:	69bb      	ldr	r3, [r7, #24]
 8010156:	3302      	adds	r3, #2
 8010158:	61bb      	str	r3, [r7, #24]
 801015a:	e007      	b.n	801016c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801015c:	69fb      	ldr	r3, [r7, #28]
 801015e:	781a      	ldrb	r2, [r3, #0]
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8010166:	69fb      	ldr	r3, [r7, #28]
 8010168:	3301      	adds	r3, #1
 801016a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	2252      	movs	r2, #82	@ 0x52
 8010170:	5a9b      	ldrh	r3, [r3, r2]
 8010172:	b29b      	uxth	r3, r3
 8010174:	3b01      	subs	r3, #1
 8010176:	b299      	uxth	r1, r3
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	2252      	movs	r2, #82	@ 0x52
 801017c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	2252      	movs	r2, #82	@ 0x52
 8010182:	5a9b      	ldrh	r3, [r3, r2]
 8010184:	b29b      	uxth	r3, r3
 8010186:	2b00      	cmp	r3, #0
 8010188:	d1c9      	bne.n	801011e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801018a:	697a      	ldr	r2, [r7, #20]
 801018c:	68f8      	ldr	r0, [r7, #12]
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	9300      	str	r3, [sp, #0]
 8010192:	0013      	movs	r3, r2
 8010194:	2200      	movs	r2, #0
 8010196:	2140      	movs	r1, #64	@ 0x40
 8010198:	f001 f866 	bl	8011268 <UART_WaitOnFlagUntilTimeout>
 801019c:	1e03      	subs	r3, r0, #0
 801019e:	d004      	beq.n	80101aa <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	2220      	movs	r2, #32
 80101a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80101a6:	2303      	movs	r3, #3
 80101a8:	e005      	b.n	80101b6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2220      	movs	r2, #32
 80101ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80101b0:	2300      	movs	r3, #0
 80101b2:	e000      	b.n	80101b6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80101b4:	2302      	movs	r3, #2
  }
}
 80101b6:	0018      	movs	r0, r3
 80101b8:	46bd      	mov	sp, r7
 80101ba:	b008      	add	sp, #32
 80101bc:	bd80      	pop	{r7, pc}
	...

080101c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b088      	sub	sp, #32
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	60b9      	str	r1, [r7, #8]
 80101ca:	1dbb      	adds	r3, r7, #6
 80101cc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80101d2:	2b20      	cmp	r3, #32
 80101d4:	d000      	beq.n	80101d8 <HAL_UART_Transmit_DMA+0x18>
 80101d6:	e077      	b.n	80102c8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d003      	beq.n	80101e6 <HAL_UART_Transmit_DMA+0x26>
 80101de:	1dbb      	adds	r3, r7, #6
 80101e0:	881b      	ldrh	r3, [r3, #0]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d101      	bne.n	80101ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80101e6:	2301      	movs	r3, #1
 80101e8:	e06f      	b.n	80102ca <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	689a      	ldr	r2, [r3, #8]
 80101ee:	2380      	movs	r3, #128	@ 0x80
 80101f0:	015b      	lsls	r3, r3, #5
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d109      	bne.n	801020a <HAL_UART_Transmit_DMA+0x4a>
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	691b      	ldr	r3, [r3, #16]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d105      	bne.n	801020a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	2201      	movs	r2, #1
 8010202:	4013      	ands	r3, r2
 8010204:	d001      	beq.n	801020a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8010206:	2301      	movs	r3, #1
 8010208:	e05f      	b.n	80102ca <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	68ba      	ldr	r2, [r7, #8]
 801020e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	1dba      	adds	r2, r7, #6
 8010214:	2150      	movs	r1, #80	@ 0x50
 8010216:	8812      	ldrh	r2, [r2, #0]
 8010218:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	1dba      	adds	r2, r7, #6
 801021e:	2152      	movs	r1, #82	@ 0x52
 8010220:	8812      	ldrh	r2, [r2, #0]
 8010222:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2284      	movs	r2, #132	@ 0x84
 8010228:	2100      	movs	r1, #0
 801022a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2221      	movs	r2, #33	@ 0x21
 8010230:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010236:	2b00      	cmp	r3, #0
 8010238:	d027      	beq.n	801028a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801023e:	4a25      	ldr	r2, [pc, #148]	@ (80102d4 <HAL_UART_Transmit_DMA+0x114>)
 8010240:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010246:	4a24      	ldr	r2, [pc, #144]	@ (80102d8 <HAL_UART_Transmit_DMA+0x118>)
 8010248:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801024e:	4a23      	ldr	r2, [pc, #140]	@ (80102dc <HAL_UART_Transmit_DMA+0x11c>)
 8010250:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010256:	2200      	movs	r2, #0
 8010258:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010262:	0019      	movs	r1, r3
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	3328      	adds	r3, #40	@ 0x28
 801026a:	001a      	movs	r2, r3
 801026c:	1dbb      	adds	r3, r7, #6
 801026e:	881b      	ldrh	r3, [r3, #0]
 8010270:	f7f9 fdae 	bl	8009dd0 <HAL_DMA_Start_IT>
 8010274:	1e03      	subs	r3, r0, #0
 8010276:	d008      	beq.n	801028a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	2284      	movs	r2, #132	@ 0x84
 801027c:	2110      	movs	r1, #16
 801027e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	2220      	movs	r2, #32
 8010284:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8010286:	2301      	movs	r3, #1
 8010288:	e01f      	b.n	80102ca <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	2240      	movs	r2, #64	@ 0x40
 8010290:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010292:	f3ef 8310 	mrs	r3, PRIMASK
 8010296:	613b      	str	r3, [r7, #16]
  return(result);
 8010298:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801029a:	61fb      	str	r3, [r7, #28]
 801029c:	2301      	movs	r3, #1
 801029e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	f383 8810 	msr	PRIMASK, r3
}
 80102a6:	46c0      	nop			@ (mov r8, r8)
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	689a      	ldr	r2, [r3, #8]
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	2180      	movs	r1, #128	@ 0x80
 80102b4:	430a      	orrs	r2, r1
 80102b6:	609a      	str	r2, [r3, #8]
 80102b8:	69fb      	ldr	r3, [r7, #28]
 80102ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102bc:	69bb      	ldr	r3, [r7, #24]
 80102be:	f383 8810 	msr	PRIMASK, r3
}
 80102c2:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80102c4:	2300      	movs	r3, #0
 80102c6:	e000      	b.n	80102ca <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80102c8:	2302      	movs	r3, #2
  }
}
 80102ca:	0018      	movs	r0, r3
 80102cc:	46bd      	mov	sp, r7
 80102ce:	b008      	add	sp, #32
 80102d0:	bd80      	pop	{r7, pc}
 80102d2:	46c0      	nop			@ (mov r8, r8)
 80102d4:	0801158d 	.word	0x0801158d
 80102d8:	08011629 	.word	0x08011629
 80102dc:	080117c9 	.word	0x080117c9

080102e0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b088      	sub	sp, #32
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	60f8      	str	r0, [r7, #12]
 80102e8:	60b9      	str	r1, [r7, #8]
 80102ea:	1dbb      	adds	r3, r7, #6
 80102ec:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	2280      	movs	r2, #128	@ 0x80
 80102f2:	589b      	ldr	r3, [r3, r2]
 80102f4:	2b20      	cmp	r3, #32
 80102f6:	d14a      	bne.n	801038e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d003      	beq.n	8010306 <HAL_UART_Receive_DMA+0x26>
 80102fe:	1dbb      	adds	r3, r7, #6
 8010300:	881b      	ldrh	r3, [r3, #0]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d101      	bne.n	801030a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010306:	2301      	movs	r3, #1
 8010308:	e042      	b.n	8010390 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	689a      	ldr	r2, [r3, #8]
 801030e:	2380      	movs	r3, #128	@ 0x80
 8010310:	015b      	lsls	r3, r3, #5
 8010312:	429a      	cmp	r2, r3
 8010314:	d109      	bne.n	801032a <HAL_UART_Receive_DMA+0x4a>
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	691b      	ldr	r3, [r3, #16]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d105      	bne.n	801032a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	2201      	movs	r2, #1
 8010322:	4013      	ands	r3, r2
 8010324:	d001      	beq.n	801032a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8010326:	2301      	movs	r3, #1
 8010328:	e032      	b.n	8010390 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	2200      	movs	r2, #0
 801032e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	4a18      	ldr	r2, [pc, #96]	@ (8010398 <HAL_UART_Receive_DMA+0xb8>)
 8010336:	4293      	cmp	r3, r2
 8010338:	d020      	beq.n	801037c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	685a      	ldr	r2, [r3, #4]
 8010340:	2380      	movs	r3, #128	@ 0x80
 8010342:	041b      	lsls	r3, r3, #16
 8010344:	4013      	ands	r3, r2
 8010346:	d019      	beq.n	801037c <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010348:	f3ef 8310 	mrs	r3, PRIMASK
 801034c:	613b      	str	r3, [r7, #16]
  return(result);
 801034e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010350:	61fb      	str	r3, [r7, #28]
 8010352:	2301      	movs	r3, #1
 8010354:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	f383 8810 	msr	PRIMASK, r3
}
 801035c:	46c0      	nop			@ (mov r8, r8)
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	2180      	movs	r1, #128	@ 0x80
 801036a:	04c9      	lsls	r1, r1, #19
 801036c:	430a      	orrs	r2, r1
 801036e:	601a      	str	r2, [r3, #0]
 8010370:	69fb      	ldr	r3, [r7, #28]
 8010372:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010374:	69bb      	ldr	r3, [r7, #24]
 8010376:	f383 8810 	msr	PRIMASK, r3
}
 801037a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801037c:	1dbb      	adds	r3, r7, #6
 801037e:	881a      	ldrh	r2, [r3, #0]
 8010380:	68b9      	ldr	r1, [r7, #8]
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	0018      	movs	r0, r3
 8010386:	f000 ffd9 	bl	801133c <UART_Start_Receive_DMA>
 801038a:	0003      	movs	r3, r0
 801038c:	e000      	b.n	8010390 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801038e:	2302      	movs	r3, #2
  }
}
 8010390:	0018      	movs	r0, r3
 8010392:	46bd      	mov	sp, r7
 8010394:	b008      	add	sp, #32
 8010396:	bd80      	pop	{r7, pc}
 8010398:	40004800 	.word	0x40004800

0801039c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801039c:	b590      	push	{r4, r7, lr}
 801039e:	b0ab      	sub	sp, #172	@ 0xac
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	69db      	ldr	r3, [r3, #28]
 80103aa:	22a4      	movs	r2, #164	@ 0xa4
 80103ac:	18b9      	adds	r1, r7, r2
 80103ae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	20a0      	movs	r0, #160	@ 0xa0
 80103b8:	1839      	adds	r1, r7, r0
 80103ba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	689b      	ldr	r3, [r3, #8]
 80103c2:	219c      	movs	r1, #156	@ 0x9c
 80103c4:	1879      	adds	r1, r7, r1
 80103c6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80103c8:	0011      	movs	r1, r2
 80103ca:	18bb      	adds	r3, r7, r2
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	4a9c      	ldr	r2, [pc, #624]	@ (8010640 <HAL_UART_IRQHandler+0x2a4>)
 80103d0:	4013      	ands	r3, r2
 80103d2:	2298      	movs	r2, #152	@ 0x98
 80103d4:	18bc      	adds	r4, r7, r2
 80103d6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80103d8:	18bb      	adds	r3, r7, r2
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d114      	bne.n	801040a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80103e0:	187b      	adds	r3, r7, r1
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	2220      	movs	r2, #32
 80103e6:	4013      	ands	r3, r2
 80103e8:	d00f      	beq.n	801040a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80103ea:	183b      	adds	r3, r7, r0
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	2220      	movs	r2, #32
 80103f0:	4013      	ands	r3, r2
 80103f2:	d00a      	beq.n	801040a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d100      	bne.n	80103fe <HAL_UART_IRQHandler+0x62>
 80103fc:	e2aa      	b.n	8010954 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010402:	687a      	ldr	r2, [r7, #4]
 8010404:	0010      	movs	r0, r2
 8010406:	4798      	blx	r3
      }
      return;
 8010408:	e2a4      	b.n	8010954 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801040a:	2398      	movs	r3, #152	@ 0x98
 801040c:	18fb      	adds	r3, r7, r3
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d100      	bne.n	8010416 <HAL_UART_IRQHandler+0x7a>
 8010414:	e11a      	b.n	801064c <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8010416:	239c      	movs	r3, #156	@ 0x9c
 8010418:	18fb      	adds	r3, r7, r3
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	2201      	movs	r2, #1
 801041e:	4013      	ands	r3, r2
 8010420:	d106      	bne.n	8010430 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8010422:	23a0      	movs	r3, #160	@ 0xa0
 8010424:	18fb      	adds	r3, r7, r3
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4a86      	ldr	r2, [pc, #536]	@ (8010644 <HAL_UART_IRQHandler+0x2a8>)
 801042a:	4013      	ands	r3, r2
 801042c:	d100      	bne.n	8010430 <HAL_UART_IRQHandler+0x94>
 801042e:	e10d      	b.n	801064c <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010430:	23a4      	movs	r3, #164	@ 0xa4
 8010432:	18fb      	adds	r3, r7, r3
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	2201      	movs	r2, #1
 8010438:	4013      	ands	r3, r2
 801043a:	d012      	beq.n	8010462 <HAL_UART_IRQHandler+0xc6>
 801043c:	23a0      	movs	r3, #160	@ 0xa0
 801043e:	18fb      	adds	r3, r7, r3
 8010440:	681a      	ldr	r2, [r3, #0]
 8010442:	2380      	movs	r3, #128	@ 0x80
 8010444:	005b      	lsls	r3, r3, #1
 8010446:	4013      	ands	r3, r2
 8010448:	d00b      	beq.n	8010462 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2201      	movs	r2, #1
 8010450:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2284      	movs	r2, #132	@ 0x84
 8010456:	589b      	ldr	r3, [r3, r2]
 8010458:	2201      	movs	r2, #1
 801045a:	431a      	orrs	r2, r3
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2184      	movs	r1, #132	@ 0x84
 8010460:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010462:	23a4      	movs	r3, #164	@ 0xa4
 8010464:	18fb      	adds	r3, r7, r3
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	2202      	movs	r2, #2
 801046a:	4013      	ands	r3, r2
 801046c:	d011      	beq.n	8010492 <HAL_UART_IRQHandler+0xf6>
 801046e:	239c      	movs	r3, #156	@ 0x9c
 8010470:	18fb      	adds	r3, r7, r3
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	2201      	movs	r2, #1
 8010476:	4013      	ands	r3, r2
 8010478:	d00b      	beq.n	8010492 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	2202      	movs	r2, #2
 8010480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2284      	movs	r2, #132	@ 0x84
 8010486:	589b      	ldr	r3, [r3, r2]
 8010488:	2204      	movs	r2, #4
 801048a:	431a      	orrs	r2, r3
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2184      	movs	r1, #132	@ 0x84
 8010490:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010492:	23a4      	movs	r3, #164	@ 0xa4
 8010494:	18fb      	adds	r3, r7, r3
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	2204      	movs	r2, #4
 801049a:	4013      	ands	r3, r2
 801049c:	d011      	beq.n	80104c2 <HAL_UART_IRQHandler+0x126>
 801049e:	239c      	movs	r3, #156	@ 0x9c
 80104a0:	18fb      	adds	r3, r7, r3
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	2201      	movs	r2, #1
 80104a6:	4013      	ands	r3, r2
 80104a8:	d00b      	beq.n	80104c2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	2204      	movs	r2, #4
 80104b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2284      	movs	r2, #132	@ 0x84
 80104b6:	589b      	ldr	r3, [r3, r2]
 80104b8:	2202      	movs	r2, #2
 80104ba:	431a      	orrs	r2, r3
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2184      	movs	r1, #132	@ 0x84
 80104c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80104c2:	23a4      	movs	r3, #164	@ 0xa4
 80104c4:	18fb      	adds	r3, r7, r3
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	2208      	movs	r2, #8
 80104ca:	4013      	ands	r3, r2
 80104cc:	d017      	beq.n	80104fe <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80104ce:	23a0      	movs	r3, #160	@ 0xa0
 80104d0:	18fb      	adds	r3, r7, r3
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	2220      	movs	r2, #32
 80104d6:	4013      	ands	r3, r2
 80104d8:	d105      	bne.n	80104e6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80104da:	239c      	movs	r3, #156	@ 0x9c
 80104dc:	18fb      	adds	r3, r7, r3
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	2201      	movs	r2, #1
 80104e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80104e4:	d00b      	beq.n	80104fe <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	2208      	movs	r2, #8
 80104ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2284      	movs	r2, #132	@ 0x84
 80104f2:	589b      	ldr	r3, [r3, r2]
 80104f4:	2208      	movs	r2, #8
 80104f6:	431a      	orrs	r2, r3
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2184      	movs	r1, #132	@ 0x84
 80104fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80104fe:	23a4      	movs	r3, #164	@ 0xa4
 8010500:	18fb      	adds	r3, r7, r3
 8010502:	681a      	ldr	r2, [r3, #0]
 8010504:	2380      	movs	r3, #128	@ 0x80
 8010506:	011b      	lsls	r3, r3, #4
 8010508:	4013      	ands	r3, r2
 801050a:	d013      	beq.n	8010534 <HAL_UART_IRQHandler+0x198>
 801050c:	23a0      	movs	r3, #160	@ 0xa0
 801050e:	18fb      	adds	r3, r7, r3
 8010510:	681a      	ldr	r2, [r3, #0]
 8010512:	2380      	movs	r3, #128	@ 0x80
 8010514:	04db      	lsls	r3, r3, #19
 8010516:	4013      	ands	r3, r2
 8010518:	d00c      	beq.n	8010534 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	2280      	movs	r2, #128	@ 0x80
 8010520:	0112      	lsls	r2, r2, #4
 8010522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2284      	movs	r2, #132	@ 0x84
 8010528:	589b      	ldr	r3, [r3, r2]
 801052a:	2220      	movs	r2, #32
 801052c:	431a      	orrs	r2, r3
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2184      	movs	r1, #132	@ 0x84
 8010532:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2284      	movs	r2, #132	@ 0x84
 8010538:	589b      	ldr	r3, [r3, r2]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d100      	bne.n	8010540 <HAL_UART_IRQHandler+0x1a4>
 801053e:	e20b      	b.n	8010958 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8010540:	23a4      	movs	r3, #164	@ 0xa4
 8010542:	18fb      	adds	r3, r7, r3
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	2220      	movs	r2, #32
 8010548:	4013      	ands	r3, r2
 801054a:	d00e      	beq.n	801056a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801054c:	23a0      	movs	r3, #160	@ 0xa0
 801054e:	18fb      	adds	r3, r7, r3
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	2220      	movs	r2, #32
 8010554:	4013      	ands	r3, r2
 8010556:	d008      	beq.n	801056a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801055c:	2b00      	cmp	r3, #0
 801055e:	d004      	beq.n	801056a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010564:	687a      	ldr	r2, [r7, #4]
 8010566:	0010      	movs	r0, r2
 8010568:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2284      	movs	r2, #132	@ 0x84
 801056e:	589b      	ldr	r3, [r3, r2]
 8010570:	2194      	movs	r1, #148	@ 0x94
 8010572:	187a      	adds	r2, r7, r1
 8010574:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	689b      	ldr	r3, [r3, #8]
 801057c:	2240      	movs	r2, #64	@ 0x40
 801057e:	4013      	ands	r3, r2
 8010580:	2b40      	cmp	r3, #64	@ 0x40
 8010582:	d004      	beq.n	801058e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010584:	187b      	adds	r3, r7, r1
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	2228      	movs	r2, #40	@ 0x28
 801058a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801058c:	d04b      	beq.n	8010626 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	0018      	movs	r0, r3
 8010592:	f000 ff97 	bl	80114c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	689b      	ldr	r3, [r3, #8]
 801059c:	2240      	movs	r2, #64	@ 0x40
 801059e:	4013      	ands	r3, r2
 80105a0:	2b40      	cmp	r3, #64	@ 0x40
 80105a2:	d139      	bne.n	8010618 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105a4:	f3ef 8310 	mrs	r3, PRIMASK
 80105a8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80105aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80105ac:	2090      	movs	r0, #144	@ 0x90
 80105ae:	183a      	adds	r2, r7, r0
 80105b0:	6013      	str	r3, [r2, #0]
 80105b2:	2301      	movs	r3, #1
 80105b4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80105b8:	f383 8810 	msr	PRIMASK, r3
}
 80105bc:	46c0      	nop			@ (mov r8, r8)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	689a      	ldr	r2, [r3, #8]
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	2140      	movs	r1, #64	@ 0x40
 80105ca:	438a      	bics	r2, r1
 80105cc:	609a      	str	r2, [r3, #8]
 80105ce:	183b      	adds	r3, r7, r0
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80105d6:	f383 8810 	msr	PRIMASK, r3
}
 80105da:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d012      	beq.n	801060a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105e8:	4a17      	ldr	r2, [pc, #92]	@ (8010648 <HAL_UART_IRQHandler+0x2ac>)
 80105ea:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105f0:	0018      	movs	r0, r3
 80105f2:	f7f9 fc93 	bl	8009f1c <HAL_DMA_Abort_IT>
 80105f6:	1e03      	subs	r3, r0, #0
 80105f8:	d020      	beq.n	801063c <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010604:	0018      	movs	r0, r3
 8010606:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010608:	e018      	b.n	801063c <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2298      	movs	r2, #152	@ 0x98
 801060e:	589b      	ldr	r3, [r3, r2]
 8010610:	687a      	ldr	r2, [r7, #4]
 8010612:	0010      	movs	r0, r2
 8010614:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010616:	e011      	b.n	801063c <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2298      	movs	r2, #152	@ 0x98
 801061c:	589b      	ldr	r3, [r3, r2]
 801061e:	687a      	ldr	r2, [r7, #4]
 8010620:	0010      	movs	r0, r2
 8010622:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010624:	e00a      	b.n	801063c <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2298      	movs	r2, #152	@ 0x98
 801062a:	589b      	ldr	r3, [r3, r2]
 801062c:	687a      	ldr	r2, [r7, #4]
 801062e:	0010      	movs	r0, r2
 8010630:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2284      	movs	r2, #132	@ 0x84
 8010636:	2100      	movs	r1, #0
 8010638:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801063a:	e18d      	b.n	8010958 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801063c:	46c0      	nop			@ (mov r8, r8)
    return;
 801063e:	e18b      	b.n	8010958 <HAL_UART_IRQHandler+0x5bc>
 8010640:	0000080f 	.word	0x0000080f
 8010644:	04000120 	.word	0x04000120
 8010648:	08011851 	.word	0x08011851

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010650:	2b01      	cmp	r3, #1
 8010652:	d000      	beq.n	8010656 <HAL_UART_IRQHandler+0x2ba>
 8010654:	e13d      	b.n	80108d2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010656:	23a4      	movs	r3, #164	@ 0xa4
 8010658:	18fb      	adds	r3, r7, r3
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2210      	movs	r2, #16
 801065e:	4013      	ands	r3, r2
 8010660:	d100      	bne.n	8010664 <HAL_UART_IRQHandler+0x2c8>
 8010662:	e136      	b.n	80108d2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010664:	23a0      	movs	r3, #160	@ 0xa0
 8010666:	18fb      	adds	r3, r7, r3
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	2210      	movs	r2, #16
 801066c:	4013      	ands	r3, r2
 801066e:	d100      	bne.n	8010672 <HAL_UART_IRQHandler+0x2d6>
 8010670:	e12f      	b.n	80108d2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	2210      	movs	r2, #16
 8010678:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	689b      	ldr	r3, [r3, #8]
 8010680:	2240      	movs	r2, #64	@ 0x40
 8010682:	4013      	ands	r3, r2
 8010684:	2b40      	cmp	r3, #64	@ 0x40
 8010686:	d000      	beq.n	801068a <HAL_UART_IRQHandler+0x2ee>
 8010688:	e0a2      	b.n	80107d0 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	685a      	ldr	r2, [r3, #4]
 8010692:	217e      	movs	r1, #126	@ 0x7e
 8010694:	187b      	adds	r3, r7, r1
 8010696:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8010698:	187b      	adds	r3, r7, r1
 801069a:	881b      	ldrh	r3, [r3, #0]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d100      	bne.n	80106a2 <HAL_UART_IRQHandler+0x306>
 80106a0:	e15c      	b.n	801095c <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2258      	movs	r2, #88	@ 0x58
 80106a6:	5a9b      	ldrh	r3, [r3, r2]
 80106a8:	187a      	adds	r2, r7, r1
 80106aa:	8812      	ldrh	r2, [r2, #0]
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d300      	bcc.n	80106b2 <HAL_UART_IRQHandler+0x316>
 80106b0:	e154      	b.n	801095c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	187a      	adds	r2, r7, r1
 80106b6:	215a      	movs	r1, #90	@ 0x5a
 80106b8:	8812      	ldrh	r2, [r2, #0]
 80106ba:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	2220      	movs	r2, #32
 80106c6:	4013      	ands	r3, r2
 80106c8:	d16f      	bne.n	80107aa <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106ca:	f3ef 8310 	mrs	r3, PRIMASK
 80106ce:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80106d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80106d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80106d4:	2301      	movs	r3, #1
 80106d6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106da:	f383 8810 	msr	PRIMASK, r3
}
 80106de:	46c0      	nop			@ (mov r8, r8)
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	681a      	ldr	r2, [r3, #0]
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	49a0      	ldr	r1, [pc, #640]	@ (801096c <HAL_UART_IRQHandler+0x5d0>)
 80106ec:	400a      	ands	r2, r1
 80106ee:	601a      	str	r2, [r3, #0]
 80106f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80106f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106f6:	f383 8810 	msr	PRIMASK, r3
}
 80106fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106fc:	f3ef 8310 	mrs	r3, PRIMASK
 8010700:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8010702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010704:	677b      	str	r3, [r7, #116]	@ 0x74
 8010706:	2301      	movs	r3, #1
 8010708:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801070a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801070c:	f383 8810 	msr	PRIMASK, r3
}
 8010710:	46c0      	nop			@ (mov r8, r8)
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	689a      	ldr	r2, [r3, #8]
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	2101      	movs	r1, #1
 801071e:	438a      	bics	r2, r1
 8010720:	609a      	str	r2, [r3, #8]
 8010722:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010724:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010728:	f383 8810 	msr	PRIMASK, r3
}
 801072c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801072e:	f3ef 8310 	mrs	r3, PRIMASK
 8010732:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8010734:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010736:	673b      	str	r3, [r7, #112]	@ 0x70
 8010738:	2301      	movs	r3, #1
 801073a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801073c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801073e:	f383 8810 	msr	PRIMASK, r3
}
 8010742:	46c0      	nop			@ (mov r8, r8)
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	689a      	ldr	r2, [r3, #8]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	2140      	movs	r1, #64	@ 0x40
 8010750:	438a      	bics	r2, r1
 8010752:	609a      	str	r2, [r3, #8]
 8010754:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010756:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801075a:	f383 8810 	msr	PRIMASK, r3
}
 801075e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2280      	movs	r2, #128	@ 0x80
 8010764:	2120      	movs	r1, #32
 8010766:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2200      	movs	r2, #0
 801076c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801076e:	f3ef 8310 	mrs	r3, PRIMASK
 8010772:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8010774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010776:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010778:	2301      	movs	r3, #1
 801077a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801077c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801077e:	f383 8810 	msr	PRIMASK, r3
}
 8010782:	46c0      	nop			@ (mov r8, r8)
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	681a      	ldr	r2, [r3, #0]
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	2110      	movs	r1, #16
 8010790:	438a      	bics	r2, r1
 8010792:	601a      	str	r2, [r3, #0]
 8010794:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010796:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010798:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801079a:	f383 8810 	msr	PRIMASK, r3
}
 801079e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80107a4:	0018      	movs	r0, r3
 80107a6:	f7f9 fb79 	bl	8009e9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2202      	movs	r2, #2
 80107ae:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	22ac      	movs	r2, #172	@ 0xac
 80107b4:	589b      	ldr	r3, [r3, r2]
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	2158      	movs	r1, #88	@ 0x58
 80107ba:	5a51      	ldrh	r1, [r2, r1]
 80107bc:	687a      	ldr	r2, [r7, #4]
 80107be:	205a      	movs	r0, #90	@ 0x5a
 80107c0:	5a12      	ldrh	r2, [r2, r0]
 80107c2:	b292      	uxth	r2, r2
 80107c4:	1a8a      	subs	r2, r1, r2
 80107c6:	b291      	uxth	r1, r2
 80107c8:	687a      	ldr	r2, [r7, #4]
 80107ca:	0010      	movs	r0, r2
 80107cc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80107ce:	e0c5      	b.n	801095c <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	2258      	movs	r2, #88	@ 0x58
 80107d4:	5a99      	ldrh	r1, [r3, r2]
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	225a      	movs	r2, #90	@ 0x5a
 80107da:	5a9b      	ldrh	r3, [r3, r2]
 80107dc:	b29a      	uxth	r2, r3
 80107de:	208e      	movs	r0, #142	@ 0x8e
 80107e0:	183b      	adds	r3, r7, r0
 80107e2:	1a8a      	subs	r2, r1, r2
 80107e4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	225a      	movs	r2, #90	@ 0x5a
 80107ea:	5a9b      	ldrh	r3, [r3, r2]
 80107ec:	b29b      	uxth	r3, r3
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d100      	bne.n	80107f4 <HAL_UART_IRQHandler+0x458>
 80107f2:	e0b5      	b.n	8010960 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 80107f4:	183b      	adds	r3, r7, r0
 80107f6:	881b      	ldrh	r3, [r3, #0]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d100      	bne.n	80107fe <HAL_UART_IRQHandler+0x462>
 80107fc:	e0b0      	b.n	8010960 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107fe:	f3ef 8310 	mrs	r3, PRIMASK
 8010802:	60fb      	str	r3, [r7, #12]
  return(result);
 8010804:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010806:	2488      	movs	r4, #136	@ 0x88
 8010808:	193a      	adds	r2, r7, r4
 801080a:	6013      	str	r3, [r2, #0]
 801080c:	2301      	movs	r3, #1
 801080e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	f383 8810 	msr	PRIMASK, r3
}
 8010816:	46c0      	nop			@ (mov r8, r8)
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	681a      	ldr	r2, [r3, #0]
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	4953      	ldr	r1, [pc, #332]	@ (8010970 <HAL_UART_IRQHandler+0x5d4>)
 8010824:	400a      	ands	r2, r1
 8010826:	601a      	str	r2, [r3, #0]
 8010828:	193b      	adds	r3, r7, r4
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	f383 8810 	msr	PRIMASK, r3
}
 8010834:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010836:	f3ef 8310 	mrs	r3, PRIMASK
 801083a:	61bb      	str	r3, [r7, #24]
  return(result);
 801083c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801083e:	2484      	movs	r4, #132	@ 0x84
 8010840:	193a      	adds	r2, r7, r4
 8010842:	6013      	str	r3, [r2, #0]
 8010844:	2301      	movs	r3, #1
 8010846:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010848:	69fb      	ldr	r3, [r7, #28]
 801084a:	f383 8810 	msr	PRIMASK, r3
}
 801084e:	46c0      	nop			@ (mov r8, r8)
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	689a      	ldr	r2, [r3, #8]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	2101      	movs	r1, #1
 801085c:	438a      	bics	r2, r1
 801085e:	609a      	str	r2, [r3, #8]
 8010860:	193b      	adds	r3, r7, r4
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010866:	6a3b      	ldr	r3, [r7, #32]
 8010868:	f383 8810 	msr	PRIMASK, r3
}
 801086c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2280      	movs	r2, #128	@ 0x80
 8010872:	2120      	movs	r1, #32
 8010874:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	2200      	movs	r2, #0
 801087a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2200      	movs	r2, #0
 8010880:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010882:	f3ef 8310 	mrs	r3, PRIMASK
 8010886:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8010888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801088a:	2480      	movs	r4, #128	@ 0x80
 801088c:	193a      	adds	r2, r7, r4
 801088e:	6013      	str	r3, [r2, #0]
 8010890:	2301      	movs	r3, #1
 8010892:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010896:	f383 8810 	msr	PRIMASK, r3
}
 801089a:	46c0      	nop			@ (mov r8, r8)
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	681a      	ldr	r2, [r3, #0]
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	2110      	movs	r1, #16
 80108a8:	438a      	bics	r2, r1
 80108aa:	601a      	str	r2, [r3, #0]
 80108ac:	193b      	adds	r3, r7, r4
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80108b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b4:	f383 8810 	msr	PRIMASK, r3
}
 80108b8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	2202      	movs	r2, #2
 80108be:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	22ac      	movs	r2, #172	@ 0xac
 80108c4:	589b      	ldr	r3, [r3, r2]
 80108c6:	183a      	adds	r2, r7, r0
 80108c8:	8811      	ldrh	r1, [r2, #0]
 80108ca:	687a      	ldr	r2, [r7, #4]
 80108cc:	0010      	movs	r0, r2
 80108ce:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80108d0:	e046      	b.n	8010960 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80108d2:	23a4      	movs	r3, #164	@ 0xa4
 80108d4:	18fb      	adds	r3, r7, r3
 80108d6:	681a      	ldr	r2, [r3, #0]
 80108d8:	2380      	movs	r3, #128	@ 0x80
 80108da:	035b      	lsls	r3, r3, #13
 80108dc:	4013      	ands	r3, r2
 80108de:	d012      	beq.n	8010906 <HAL_UART_IRQHandler+0x56a>
 80108e0:	239c      	movs	r3, #156	@ 0x9c
 80108e2:	18fb      	adds	r3, r7, r3
 80108e4:	681a      	ldr	r2, [r3, #0]
 80108e6:	2380      	movs	r3, #128	@ 0x80
 80108e8:	03db      	lsls	r3, r3, #15
 80108ea:	4013      	ands	r3, r2
 80108ec:	d00b      	beq.n	8010906 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	2280      	movs	r2, #128	@ 0x80
 80108f4:	0352      	lsls	r2, r2, #13
 80108f6:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	22a8      	movs	r2, #168	@ 0xa8
 80108fc:	589b      	ldr	r3, [r3, r2]
 80108fe:	687a      	ldr	r2, [r7, #4]
 8010900:	0010      	movs	r0, r2
 8010902:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010904:	e02f      	b.n	8010966 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8010906:	23a4      	movs	r3, #164	@ 0xa4
 8010908:	18fb      	adds	r3, r7, r3
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	2280      	movs	r2, #128	@ 0x80
 801090e:	4013      	ands	r3, r2
 8010910:	d00f      	beq.n	8010932 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8010912:	23a0      	movs	r3, #160	@ 0xa0
 8010914:	18fb      	adds	r3, r7, r3
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	2280      	movs	r2, #128	@ 0x80
 801091a:	4013      	ands	r3, r2
 801091c:	d009      	beq.n	8010932 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010922:	2b00      	cmp	r3, #0
 8010924:	d01e      	beq.n	8010964 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801092a:	687a      	ldr	r2, [r7, #4]
 801092c:	0010      	movs	r0, r2
 801092e:	4798      	blx	r3
    }
    return;
 8010930:	e018      	b.n	8010964 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010932:	23a4      	movs	r3, #164	@ 0xa4
 8010934:	18fb      	adds	r3, r7, r3
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	2240      	movs	r2, #64	@ 0x40
 801093a:	4013      	ands	r3, r2
 801093c:	d013      	beq.n	8010966 <HAL_UART_IRQHandler+0x5ca>
 801093e:	23a0      	movs	r3, #160	@ 0xa0
 8010940:	18fb      	adds	r3, r7, r3
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	2240      	movs	r2, #64	@ 0x40
 8010946:	4013      	ands	r3, r2
 8010948:	d00d      	beq.n	8010966 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	0018      	movs	r0, r3
 801094e:	f000 ff98 	bl	8011882 <UART_EndTransmit_IT>
    return;
 8010952:	e008      	b.n	8010966 <HAL_UART_IRQHandler+0x5ca>
      return;
 8010954:	46c0      	nop			@ (mov r8, r8)
 8010956:	e006      	b.n	8010966 <HAL_UART_IRQHandler+0x5ca>
    return;
 8010958:	46c0      	nop			@ (mov r8, r8)
 801095a:	e004      	b.n	8010966 <HAL_UART_IRQHandler+0x5ca>
      return;
 801095c:	46c0      	nop			@ (mov r8, r8)
 801095e:	e002      	b.n	8010966 <HAL_UART_IRQHandler+0x5ca>
      return;
 8010960:	46c0      	nop			@ (mov r8, r8)
 8010962:	e000      	b.n	8010966 <HAL_UART_IRQHandler+0x5ca>
    return;
 8010964:	46c0      	nop			@ (mov r8, r8)
  }

}
 8010966:	46bd      	mov	sp, r7
 8010968:	b02b      	add	sp, #172	@ 0xac
 801096a:	bd90      	pop	{r4, r7, pc}
 801096c:	fffffeff 	.word	0xfffffeff
 8010970:	fffffedf 	.word	0xfffffedf

08010974 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801097c:	46c0      	nop			@ (mov r8, r8)
 801097e:	46bd      	mov	sp, r7
 8010980:	b002      	add	sp, #8
 8010982:	bd80      	pop	{r7, pc}

08010984 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b082      	sub	sp, #8
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801098c:	46c0      	nop			@ (mov r8, r8)
 801098e:	46bd      	mov	sp, r7
 8010990:	b002      	add	sp, #8
 8010992:	bd80      	pop	{r7, pc}

08010994 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b082      	sub	sp, #8
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801099c:	46c0      	nop			@ (mov r8, r8)
 801099e:	46bd      	mov	sp, r7
 80109a0:	b002      	add	sp, #8
 80109a2:	bd80      	pop	{r7, pc}

080109a4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b082      	sub	sp, #8
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80109ac:	46c0      	nop			@ (mov r8, r8)
 80109ae:	46bd      	mov	sp, r7
 80109b0:	b002      	add	sp, #8
 80109b2:	bd80      	pop	{r7, pc}

080109b4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b082      	sub	sp, #8
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80109bc:	46c0      	nop			@ (mov r8, r8)
 80109be:	46bd      	mov	sp, r7
 80109c0:	b002      	add	sp, #8
 80109c2:	bd80      	pop	{r7, pc}

080109c4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80109cc:	46c0      	nop			@ (mov r8, r8)
 80109ce:	46bd      	mov	sp, r7
 80109d0:	b002      	add	sp, #8
 80109d2:	bd80      	pop	{r7, pc}

080109d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b082      	sub	sp, #8
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	000a      	movs	r2, r1
 80109de:	1cbb      	adds	r3, r7, #2
 80109e0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80109e2:	46c0      	nop			@ (mov r8, r8)
 80109e4:	46bd      	mov	sp, r7
 80109e6:	b002      	add	sp, #8
 80109e8:	bd80      	pop	{r7, pc}
	...

080109ec <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2188      	movs	r1, #136	@ 0x88
 80109f8:	4a14      	ldr	r2, [pc, #80]	@ (8010a4c <UART_InitCallbacksToDefault+0x60>)
 80109fa:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	218c      	movs	r1, #140	@ 0x8c
 8010a00:	4a13      	ldr	r2, [pc, #76]	@ (8010a50 <UART_InitCallbacksToDefault+0x64>)
 8010a02:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2190      	movs	r1, #144	@ 0x90
 8010a08:	4a12      	ldr	r2, [pc, #72]	@ (8010a54 <UART_InitCallbacksToDefault+0x68>)
 8010a0a:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2194      	movs	r1, #148	@ 0x94
 8010a10:	4a11      	ldr	r2, [pc, #68]	@ (8010a58 <UART_InitCallbacksToDefault+0x6c>)
 8010a12:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2198      	movs	r1, #152	@ 0x98
 8010a18:	4a10      	ldr	r2, [pc, #64]	@ (8010a5c <UART_InitCallbacksToDefault+0x70>)
 8010a1a:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	219c      	movs	r1, #156	@ 0x9c
 8010a20:	4a0f      	ldr	r2, [pc, #60]	@ (8010a60 <UART_InitCallbacksToDefault+0x74>)
 8010a22:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	21a0      	movs	r1, #160	@ 0xa0
 8010a28:	4a0e      	ldr	r2, [pc, #56]	@ (8010a64 <UART_InitCallbacksToDefault+0x78>)
 8010a2a:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	21a4      	movs	r1, #164	@ 0xa4
 8010a30:	4a0d      	ldr	r2, [pc, #52]	@ (8010a68 <UART_InitCallbacksToDefault+0x7c>)
 8010a32:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	21a8      	movs	r1, #168	@ 0xa8
 8010a38:	4a0c      	ldr	r2, [pc, #48]	@ (8010a6c <UART_InitCallbacksToDefault+0x80>)
 8010a3a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	21ac      	movs	r1, #172	@ 0xac
 8010a40:	4a0b      	ldr	r2, [pc, #44]	@ (8010a70 <UART_InitCallbacksToDefault+0x84>)
 8010a42:	505a      	str	r2, [r3, r1]

}
 8010a44:	46c0      	nop			@ (mov r8, r8)
 8010a46:	46bd      	mov	sp, r7
 8010a48:	b002      	add	sp, #8
 8010a4a:	bd80      	pop	{r7, pc}
 8010a4c:	08010985 	.word	0x08010985
 8010a50:	08010975 	.word	0x08010975
 8010a54:	08010995 	.word	0x08010995
 8010a58:	08003829 	.word	0x08003829
 8010a5c:	08003865 	.word	0x08003865
 8010a60:	080109a5 	.word	0x080109a5
 8010a64:	080109b5 	.word	0x080109b5
 8010a68:	080109c5 	.word	0x080109c5
 8010a6c:	080118dd 	.word	0x080118dd
 8010a70:	080109d5 	.word	0x080109d5

08010a74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010a74:	b5b0      	push	{r4, r5, r7, lr}
 8010a76:	b08e      	sub	sp, #56	@ 0x38
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010a7c:	231a      	movs	r3, #26
 8010a7e:	2218      	movs	r2, #24
 8010a80:	189b      	adds	r3, r3, r2
 8010a82:	19db      	adds	r3, r3, r7
 8010a84:	2200      	movs	r2, #0
 8010a86:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010a88:	69fb      	ldr	r3, [r7, #28]
 8010a8a:	689a      	ldr	r2, [r3, #8]
 8010a8c:	69fb      	ldr	r3, [r7, #28]
 8010a8e:	691b      	ldr	r3, [r3, #16]
 8010a90:	431a      	orrs	r2, r3
 8010a92:	69fb      	ldr	r3, [r7, #28]
 8010a94:	695b      	ldr	r3, [r3, #20]
 8010a96:	431a      	orrs	r2, r3
 8010a98:	69fb      	ldr	r3, [r7, #28]
 8010a9a:	69db      	ldr	r3, [r3, #28]
 8010a9c:	4313      	orrs	r3, r2
 8010a9e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010aa0:	69fb      	ldr	r3, [r7, #28]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	4ac3      	ldr	r2, [pc, #780]	@ (8010db4 <UART_SetConfig+0x340>)
 8010aa8:	4013      	ands	r3, r2
 8010aaa:	0019      	movs	r1, r3
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010ab2:	430a      	orrs	r2, r1
 8010ab4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010ab6:	69fb      	ldr	r3, [r7, #28]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	685b      	ldr	r3, [r3, #4]
 8010abc:	4abe      	ldr	r2, [pc, #760]	@ (8010db8 <UART_SetConfig+0x344>)
 8010abe:	4013      	ands	r3, r2
 8010ac0:	0019      	movs	r1, r3
 8010ac2:	69fb      	ldr	r3, [r7, #28]
 8010ac4:	68da      	ldr	r2, [r3, #12]
 8010ac6:	69fb      	ldr	r3, [r7, #28]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	430a      	orrs	r2, r1
 8010acc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010ace:	69fb      	ldr	r3, [r7, #28]
 8010ad0:	699b      	ldr	r3, [r3, #24]
 8010ad2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010ad4:	69fb      	ldr	r3, [r7, #28]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	4ab8      	ldr	r2, [pc, #736]	@ (8010dbc <UART_SetConfig+0x348>)
 8010ada:	4293      	cmp	r3, r2
 8010adc:	d004      	beq.n	8010ae8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010ade:	69fb      	ldr	r3, [r7, #28]
 8010ae0:	6a1b      	ldr	r3, [r3, #32]
 8010ae2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010ae4:	4313      	orrs	r3, r2
 8010ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010ae8:	69fb      	ldr	r3, [r7, #28]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	689b      	ldr	r3, [r3, #8]
 8010aee:	4ab4      	ldr	r2, [pc, #720]	@ (8010dc0 <UART_SetConfig+0x34c>)
 8010af0:	4013      	ands	r3, r2
 8010af2:	0019      	movs	r1, r3
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010afa:	430a      	orrs	r2, r1
 8010afc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010afe:	69fb      	ldr	r3, [r7, #28]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	4ab0      	ldr	r2, [pc, #704]	@ (8010dc4 <UART_SetConfig+0x350>)
 8010b04:	4293      	cmp	r3, r2
 8010b06:	d131      	bne.n	8010b6c <UART_SetConfig+0xf8>
 8010b08:	4baf      	ldr	r3, [pc, #700]	@ (8010dc8 <UART_SetConfig+0x354>)
 8010b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b0c:	2203      	movs	r2, #3
 8010b0e:	4013      	ands	r3, r2
 8010b10:	2b03      	cmp	r3, #3
 8010b12:	d01d      	beq.n	8010b50 <UART_SetConfig+0xdc>
 8010b14:	d823      	bhi.n	8010b5e <UART_SetConfig+0xea>
 8010b16:	2b02      	cmp	r3, #2
 8010b18:	d00c      	beq.n	8010b34 <UART_SetConfig+0xc0>
 8010b1a:	d820      	bhi.n	8010b5e <UART_SetConfig+0xea>
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d002      	beq.n	8010b26 <UART_SetConfig+0xb2>
 8010b20:	2b01      	cmp	r3, #1
 8010b22:	d00e      	beq.n	8010b42 <UART_SetConfig+0xce>
 8010b24:	e01b      	b.n	8010b5e <UART_SetConfig+0xea>
 8010b26:	231b      	movs	r3, #27
 8010b28:	2218      	movs	r2, #24
 8010b2a:	189b      	adds	r3, r3, r2
 8010b2c:	19db      	adds	r3, r3, r7
 8010b2e:	2201      	movs	r2, #1
 8010b30:	701a      	strb	r2, [r3, #0]
 8010b32:	e0b4      	b.n	8010c9e <UART_SetConfig+0x22a>
 8010b34:	231b      	movs	r3, #27
 8010b36:	2218      	movs	r2, #24
 8010b38:	189b      	adds	r3, r3, r2
 8010b3a:	19db      	adds	r3, r3, r7
 8010b3c:	2202      	movs	r2, #2
 8010b3e:	701a      	strb	r2, [r3, #0]
 8010b40:	e0ad      	b.n	8010c9e <UART_SetConfig+0x22a>
 8010b42:	231b      	movs	r3, #27
 8010b44:	2218      	movs	r2, #24
 8010b46:	189b      	adds	r3, r3, r2
 8010b48:	19db      	adds	r3, r3, r7
 8010b4a:	2204      	movs	r2, #4
 8010b4c:	701a      	strb	r2, [r3, #0]
 8010b4e:	e0a6      	b.n	8010c9e <UART_SetConfig+0x22a>
 8010b50:	231b      	movs	r3, #27
 8010b52:	2218      	movs	r2, #24
 8010b54:	189b      	adds	r3, r3, r2
 8010b56:	19db      	adds	r3, r3, r7
 8010b58:	2208      	movs	r2, #8
 8010b5a:	701a      	strb	r2, [r3, #0]
 8010b5c:	e09f      	b.n	8010c9e <UART_SetConfig+0x22a>
 8010b5e:	231b      	movs	r3, #27
 8010b60:	2218      	movs	r2, #24
 8010b62:	189b      	adds	r3, r3, r2
 8010b64:	19db      	adds	r3, r3, r7
 8010b66:	2210      	movs	r2, #16
 8010b68:	701a      	strb	r2, [r3, #0]
 8010b6a:	e098      	b.n	8010c9e <UART_SetConfig+0x22a>
 8010b6c:	69fb      	ldr	r3, [r7, #28]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	4a96      	ldr	r2, [pc, #600]	@ (8010dcc <UART_SetConfig+0x358>)
 8010b72:	4293      	cmp	r3, r2
 8010b74:	d131      	bne.n	8010bda <UART_SetConfig+0x166>
 8010b76:	4b94      	ldr	r3, [pc, #592]	@ (8010dc8 <UART_SetConfig+0x354>)
 8010b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b7a:	220c      	movs	r2, #12
 8010b7c:	4013      	ands	r3, r2
 8010b7e:	2b0c      	cmp	r3, #12
 8010b80:	d01d      	beq.n	8010bbe <UART_SetConfig+0x14a>
 8010b82:	d823      	bhi.n	8010bcc <UART_SetConfig+0x158>
 8010b84:	2b08      	cmp	r3, #8
 8010b86:	d00c      	beq.n	8010ba2 <UART_SetConfig+0x12e>
 8010b88:	d820      	bhi.n	8010bcc <UART_SetConfig+0x158>
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d002      	beq.n	8010b94 <UART_SetConfig+0x120>
 8010b8e:	2b04      	cmp	r3, #4
 8010b90:	d00e      	beq.n	8010bb0 <UART_SetConfig+0x13c>
 8010b92:	e01b      	b.n	8010bcc <UART_SetConfig+0x158>
 8010b94:	231b      	movs	r3, #27
 8010b96:	2218      	movs	r2, #24
 8010b98:	189b      	adds	r3, r3, r2
 8010b9a:	19db      	adds	r3, r3, r7
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	701a      	strb	r2, [r3, #0]
 8010ba0:	e07d      	b.n	8010c9e <UART_SetConfig+0x22a>
 8010ba2:	231b      	movs	r3, #27
 8010ba4:	2218      	movs	r2, #24
 8010ba6:	189b      	adds	r3, r3, r2
 8010ba8:	19db      	adds	r3, r3, r7
 8010baa:	2202      	movs	r2, #2
 8010bac:	701a      	strb	r2, [r3, #0]
 8010bae:	e076      	b.n	8010c9e <UART_SetConfig+0x22a>
 8010bb0:	231b      	movs	r3, #27
 8010bb2:	2218      	movs	r2, #24
 8010bb4:	189b      	adds	r3, r3, r2
 8010bb6:	19db      	adds	r3, r3, r7
 8010bb8:	2204      	movs	r2, #4
 8010bba:	701a      	strb	r2, [r3, #0]
 8010bbc:	e06f      	b.n	8010c9e <UART_SetConfig+0x22a>
 8010bbe:	231b      	movs	r3, #27
 8010bc0:	2218      	movs	r2, #24
 8010bc2:	189b      	adds	r3, r3, r2
 8010bc4:	19db      	adds	r3, r3, r7
 8010bc6:	2208      	movs	r2, #8
 8010bc8:	701a      	strb	r2, [r3, #0]
 8010bca:	e068      	b.n	8010c9e <UART_SetConfig+0x22a>
 8010bcc:	231b      	movs	r3, #27
 8010bce:	2218      	movs	r2, #24
 8010bd0:	189b      	adds	r3, r3, r2
 8010bd2:	19db      	adds	r3, r3, r7
 8010bd4:	2210      	movs	r2, #16
 8010bd6:	701a      	strb	r2, [r3, #0]
 8010bd8:	e061      	b.n	8010c9e <UART_SetConfig+0x22a>
 8010bda:	69fb      	ldr	r3, [r7, #28]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	4a7c      	ldr	r2, [pc, #496]	@ (8010dd0 <UART_SetConfig+0x35c>)
 8010be0:	4293      	cmp	r3, r2
 8010be2:	d106      	bne.n	8010bf2 <UART_SetConfig+0x17e>
 8010be4:	231b      	movs	r3, #27
 8010be6:	2218      	movs	r2, #24
 8010be8:	189b      	adds	r3, r3, r2
 8010bea:	19db      	adds	r3, r3, r7
 8010bec:	2200      	movs	r2, #0
 8010bee:	701a      	strb	r2, [r3, #0]
 8010bf0:	e055      	b.n	8010c9e <UART_SetConfig+0x22a>
 8010bf2:	69fb      	ldr	r3, [r7, #28]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	4a77      	ldr	r2, [pc, #476]	@ (8010dd4 <UART_SetConfig+0x360>)
 8010bf8:	4293      	cmp	r3, r2
 8010bfa:	d106      	bne.n	8010c0a <UART_SetConfig+0x196>
 8010bfc:	231b      	movs	r3, #27
 8010bfe:	2218      	movs	r2, #24
 8010c00:	189b      	adds	r3, r3, r2
 8010c02:	19db      	adds	r3, r3, r7
 8010c04:	2200      	movs	r2, #0
 8010c06:	701a      	strb	r2, [r3, #0]
 8010c08:	e049      	b.n	8010c9e <UART_SetConfig+0x22a>
 8010c0a:	69fb      	ldr	r3, [r7, #28]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	4a6b      	ldr	r2, [pc, #428]	@ (8010dbc <UART_SetConfig+0x348>)
 8010c10:	4293      	cmp	r3, r2
 8010c12:	d13e      	bne.n	8010c92 <UART_SetConfig+0x21e>
 8010c14:	4b6c      	ldr	r3, [pc, #432]	@ (8010dc8 <UART_SetConfig+0x354>)
 8010c16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010c18:	23c0      	movs	r3, #192	@ 0xc0
 8010c1a:	011b      	lsls	r3, r3, #4
 8010c1c:	4013      	ands	r3, r2
 8010c1e:	22c0      	movs	r2, #192	@ 0xc0
 8010c20:	0112      	lsls	r2, r2, #4
 8010c22:	4293      	cmp	r3, r2
 8010c24:	d027      	beq.n	8010c76 <UART_SetConfig+0x202>
 8010c26:	22c0      	movs	r2, #192	@ 0xc0
 8010c28:	0112      	lsls	r2, r2, #4
 8010c2a:	4293      	cmp	r3, r2
 8010c2c:	d82a      	bhi.n	8010c84 <UART_SetConfig+0x210>
 8010c2e:	2280      	movs	r2, #128	@ 0x80
 8010c30:	0112      	lsls	r2, r2, #4
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d011      	beq.n	8010c5a <UART_SetConfig+0x1e6>
 8010c36:	2280      	movs	r2, #128	@ 0x80
 8010c38:	0112      	lsls	r2, r2, #4
 8010c3a:	4293      	cmp	r3, r2
 8010c3c:	d822      	bhi.n	8010c84 <UART_SetConfig+0x210>
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d004      	beq.n	8010c4c <UART_SetConfig+0x1d8>
 8010c42:	2280      	movs	r2, #128	@ 0x80
 8010c44:	00d2      	lsls	r2, r2, #3
 8010c46:	4293      	cmp	r3, r2
 8010c48:	d00e      	beq.n	8010c68 <UART_SetConfig+0x1f4>
 8010c4a:	e01b      	b.n	8010c84 <UART_SetConfig+0x210>
 8010c4c:	231b      	movs	r3, #27
 8010c4e:	2218      	movs	r2, #24
 8010c50:	189b      	adds	r3, r3, r2
 8010c52:	19db      	adds	r3, r3, r7
 8010c54:	2200      	movs	r2, #0
 8010c56:	701a      	strb	r2, [r3, #0]
 8010c58:	e021      	b.n	8010c9e <UART_SetConfig+0x22a>
 8010c5a:	231b      	movs	r3, #27
 8010c5c:	2218      	movs	r2, #24
 8010c5e:	189b      	adds	r3, r3, r2
 8010c60:	19db      	adds	r3, r3, r7
 8010c62:	2202      	movs	r2, #2
 8010c64:	701a      	strb	r2, [r3, #0]
 8010c66:	e01a      	b.n	8010c9e <UART_SetConfig+0x22a>
 8010c68:	231b      	movs	r3, #27
 8010c6a:	2218      	movs	r2, #24
 8010c6c:	189b      	adds	r3, r3, r2
 8010c6e:	19db      	adds	r3, r3, r7
 8010c70:	2204      	movs	r2, #4
 8010c72:	701a      	strb	r2, [r3, #0]
 8010c74:	e013      	b.n	8010c9e <UART_SetConfig+0x22a>
 8010c76:	231b      	movs	r3, #27
 8010c78:	2218      	movs	r2, #24
 8010c7a:	189b      	adds	r3, r3, r2
 8010c7c:	19db      	adds	r3, r3, r7
 8010c7e:	2208      	movs	r2, #8
 8010c80:	701a      	strb	r2, [r3, #0]
 8010c82:	e00c      	b.n	8010c9e <UART_SetConfig+0x22a>
 8010c84:	231b      	movs	r3, #27
 8010c86:	2218      	movs	r2, #24
 8010c88:	189b      	adds	r3, r3, r2
 8010c8a:	19db      	adds	r3, r3, r7
 8010c8c:	2210      	movs	r2, #16
 8010c8e:	701a      	strb	r2, [r3, #0]
 8010c90:	e005      	b.n	8010c9e <UART_SetConfig+0x22a>
 8010c92:	231b      	movs	r3, #27
 8010c94:	2218      	movs	r2, #24
 8010c96:	189b      	adds	r3, r3, r2
 8010c98:	19db      	adds	r3, r3, r7
 8010c9a:	2210      	movs	r2, #16
 8010c9c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010c9e:	69fb      	ldr	r3, [r7, #28]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	4a46      	ldr	r2, [pc, #280]	@ (8010dbc <UART_SetConfig+0x348>)
 8010ca4:	4293      	cmp	r3, r2
 8010ca6:	d000      	beq.n	8010caa <UART_SetConfig+0x236>
 8010ca8:	e09a      	b.n	8010de0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010caa:	231b      	movs	r3, #27
 8010cac:	2218      	movs	r2, #24
 8010cae:	189b      	adds	r3, r3, r2
 8010cb0:	19db      	adds	r3, r3, r7
 8010cb2:	781b      	ldrb	r3, [r3, #0]
 8010cb4:	2b08      	cmp	r3, #8
 8010cb6:	d01d      	beq.n	8010cf4 <UART_SetConfig+0x280>
 8010cb8:	dc20      	bgt.n	8010cfc <UART_SetConfig+0x288>
 8010cba:	2b04      	cmp	r3, #4
 8010cbc:	d015      	beq.n	8010cea <UART_SetConfig+0x276>
 8010cbe:	dc1d      	bgt.n	8010cfc <UART_SetConfig+0x288>
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d002      	beq.n	8010cca <UART_SetConfig+0x256>
 8010cc4:	2b02      	cmp	r3, #2
 8010cc6:	d005      	beq.n	8010cd4 <UART_SetConfig+0x260>
 8010cc8:	e018      	b.n	8010cfc <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010cca:	f7fe fc51 	bl	800f570 <HAL_RCC_GetPCLK1Freq>
 8010cce:	0003      	movs	r3, r0
 8010cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010cd2:	e01c      	b.n	8010d0e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010cd4:	4b3c      	ldr	r3, [pc, #240]	@ (8010dc8 <UART_SetConfig+0x354>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	2210      	movs	r2, #16
 8010cda:	4013      	ands	r3, r2
 8010cdc:	d002      	beq.n	8010ce4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8010cde:	4b3e      	ldr	r3, [pc, #248]	@ (8010dd8 <UART_SetConfig+0x364>)
 8010ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010ce2:	e014      	b.n	8010d0e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8010ce4:	4b3d      	ldr	r3, [pc, #244]	@ (8010ddc <UART_SetConfig+0x368>)
 8010ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010ce8:	e011      	b.n	8010d0e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010cea:	f7fe fb91 	bl	800f410 <HAL_RCC_GetSysClockFreq>
 8010cee:	0003      	movs	r3, r0
 8010cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010cf2:	e00c      	b.n	8010d0e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010cf4:	2380      	movs	r3, #128	@ 0x80
 8010cf6:	021b      	lsls	r3, r3, #8
 8010cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010cfa:	e008      	b.n	8010d0e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010d00:	231a      	movs	r3, #26
 8010d02:	2218      	movs	r2, #24
 8010d04:	189b      	adds	r3, r3, r2
 8010d06:	19db      	adds	r3, r3, r7
 8010d08:	2201      	movs	r2, #1
 8010d0a:	701a      	strb	r2, [r3, #0]
        break;
 8010d0c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d100      	bne.n	8010d16 <UART_SetConfig+0x2a2>
 8010d14:	e133      	b.n	8010f7e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010d16:	69fb      	ldr	r3, [r7, #28]
 8010d18:	685a      	ldr	r2, [r3, #4]
 8010d1a:	0013      	movs	r3, r2
 8010d1c:	005b      	lsls	r3, r3, #1
 8010d1e:	189b      	adds	r3, r3, r2
 8010d20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d305      	bcc.n	8010d32 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8010d26:	69fb      	ldr	r3, [r7, #28]
 8010d28:	685b      	ldr	r3, [r3, #4]
 8010d2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010d2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d906      	bls.n	8010d40 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8010d32:	231a      	movs	r3, #26
 8010d34:	2218      	movs	r2, #24
 8010d36:	189b      	adds	r3, r3, r2
 8010d38:	19db      	adds	r3, r3, r7
 8010d3a:	2201      	movs	r2, #1
 8010d3c:	701a      	strb	r2, [r3, #0]
 8010d3e:	e11e      	b.n	8010f7e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8010d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d42:	613b      	str	r3, [r7, #16]
 8010d44:	2300      	movs	r3, #0
 8010d46:	617b      	str	r3, [r7, #20]
 8010d48:	6939      	ldr	r1, [r7, #16]
 8010d4a:	697a      	ldr	r2, [r7, #20]
 8010d4c:	000b      	movs	r3, r1
 8010d4e:	0e1b      	lsrs	r3, r3, #24
 8010d50:	0010      	movs	r0, r2
 8010d52:	0205      	lsls	r5, r0, #8
 8010d54:	431d      	orrs	r5, r3
 8010d56:	000b      	movs	r3, r1
 8010d58:	021c      	lsls	r4, r3, #8
 8010d5a:	69fb      	ldr	r3, [r7, #28]
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	085b      	lsrs	r3, r3, #1
 8010d60:	60bb      	str	r3, [r7, #8]
 8010d62:	2300      	movs	r3, #0
 8010d64:	60fb      	str	r3, [r7, #12]
 8010d66:	68b8      	ldr	r0, [r7, #8]
 8010d68:	68f9      	ldr	r1, [r7, #12]
 8010d6a:	1900      	adds	r0, r0, r4
 8010d6c:	4169      	adcs	r1, r5
 8010d6e:	69fb      	ldr	r3, [r7, #28]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	603b      	str	r3, [r7, #0]
 8010d74:	2300      	movs	r3, #0
 8010d76:	607b      	str	r3, [r7, #4]
 8010d78:	683a      	ldr	r2, [r7, #0]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f7ef fbce 	bl	800051c <__aeabi_uldivmod>
 8010d80:	0002      	movs	r2, r0
 8010d82:	000b      	movs	r3, r1
 8010d84:	0013      	movs	r3, r2
 8010d86:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010d88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d8a:	23c0      	movs	r3, #192	@ 0xc0
 8010d8c:	009b      	lsls	r3, r3, #2
 8010d8e:	429a      	cmp	r2, r3
 8010d90:	d309      	bcc.n	8010da6 <UART_SetConfig+0x332>
 8010d92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010d94:	2380      	movs	r3, #128	@ 0x80
 8010d96:	035b      	lsls	r3, r3, #13
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	d204      	bcs.n	8010da6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8010d9c:	69fb      	ldr	r3, [r7, #28]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010da2:	60da      	str	r2, [r3, #12]
 8010da4:	e0eb      	b.n	8010f7e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8010da6:	231a      	movs	r3, #26
 8010da8:	2218      	movs	r2, #24
 8010daa:	189b      	adds	r3, r3, r2
 8010dac:	19db      	adds	r3, r3, r7
 8010dae:	2201      	movs	r2, #1
 8010db0:	701a      	strb	r2, [r3, #0]
 8010db2:	e0e4      	b.n	8010f7e <UART_SetConfig+0x50a>
 8010db4:	efff69f3 	.word	0xefff69f3
 8010db8:	ffffcfff 	.word	0xffffcfff
 8010dbc:	40004800 	.word	0x40004800
 8010dc0:	fffff4ff 	.word	0xfffff4ff
 8010dc4:	40013800 	.word	0x40013800
 8010dc8:	40021000 	.word	0x40021000
 8010dcc:	40004400 	.word	0x40004400
 8010dd0:	40004c00 	.word	0x40004c00
 8010dd4:	40005000 	.word	0x40005000
 8010dd8:	003d0900 	.word	0x003d0900
 8010ddc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010de0:	69fb      	ldr	r3, [r7, #28]
 8010de2:	69da      	ldr	r2, [r3, #28]
 8010de4:	2380      	movs	r3, #128	@ 0x80
 8010de6:	021b      	lsls	r3, r3, #8
 8010de8:	429a      	cmp	r2, r3
 8010dea:	d000      	beq.n	8010dee <UART_SetConfig+0x37a>
 8010dec:	e070      	b.n	8010ed0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8010dee:	231b      	movs	r3, #27
 8010df0:	2218      	movs	r2, #24
 8010df2:	189b      	adds	r3, r3, r2
 8010df4:	19db      	adds	r3, r3, r7
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	2b08      	cmp	r3, #8
 8010dfa:	d822      	bhi.n	8010e42 <UART_SetConfig+0x3ce>
 8010dfc:	009a      	lsls	r2, r3, #2
 8010dfe:	4b67      	ldr	r3, [pc, #412]	@ (8010f9c <UART_SetConfig+0x528>)
 8010e00:	18d3      	adds	r3, r2, r3
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010e06:	f7fe fbb3 	bl	800f570 <HAL_RCC_GetPCLK1Freq>
 8010e0a:	0003      	movs	r3, r0
 8010e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010e0e:	e021      	b.n	8010e54 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010e10:	f7fe fbc4 	bl	800f59c <HAL_RCC_GetPCLK2Freq>
 8010e14:	0003      	movs	r3, r0
 8010e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010e18:	e01c      	b.n	8010e54 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e1a:	4b61      	ldr	r3, [pc, #388]	@ (8010fa0 <UART_SetConfig+0x52c>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	2210      	movs	r2, #16
 8010e20:	4013      	ands	r3, r2
 8010e22:	d002      	beq.n	8010e2a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8010e24:	4b5f      	ldr	r3, [pc, #380]	@ (8010fa4 <UART_SetConfig+0x530>)
 8010e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010e28:	e014      	b.n	8010e54 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8010e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8010fa8 <UART_SetConfig+0x534>)
 8010e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010e2e:	e011      	b.n	8010e54 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010e30:	f7fe faee 	bl	800f410 <HAL_RCC_GetSysClockFreq>
 8010e34:	0003      	movs	r3, r0
 8010e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010e38:	e00c      	b.n	8010e54 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010e3a:	2380      	movs	r3, #128	@ 0x80
 8010e3c:	021b      	lsls	r3, r3, #8
 8010e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010e40:	e008      	b.n	8010e54 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8010e42:	2300      	movs	r3, #0
 8010e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010e46:	231a      	movs	r3, #26
 8010e48:	2218      	movs	r2, #24
 8010e4a:	189b      	adds	r3, r3, r2
 8010e4c:	19db      	adds	r3, r3, r7
 8010e4e:	2201      	movs	r2, #1
 8010e50:	701a      	strb	r2, [r3, #0]
        break;
 8010e52:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d100      	bne.n	8010e5c <UART_SetConfig+0x3e8>
 8010e5a:	e090      	b.n	8010f7e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e5e:	005a      	lsls	r2, r3, #1
 8010e60:	69fb      	ldr	r3, [r7, #28]
 8010e62:	685b      	ldr	r3, [r3, #4]
 8010e64:	085b      	lsrs	r3, r3, #1
 8010e66:	18d2      	adds	r2, r2, r3
 8010e68:	69fb      	ldr	r3, [r7, #28]
 8010e6a:	685b      	ldr	r3, [r3, #4]
 8010e6c:	0019      	movs	r1, r3
 8010e6e:	0010      	movs	r0, r2
 8010e70:	f7ef f966 	bl	8000140 <__udivsi3>
 8010e74:	0003      	movs	r3, r0
 8010e76:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e7a:	2b0f      	cmp	r3, #15
 8010e7c:	d921      	bls.n	8010ec2 <UART_SetConfig+0x44e>
 8010e7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e80:	2380      	movs	r3, #128	@ 0x80
 8010e82:	025b      	lsls	r3, r3, #9
 8010e84:	429a      	cmp	r2, r3
 8010e86:	d21c      	bcs.n	8010ec2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e8a:	b29a      	uxth	r2, r3
 8010e8c:	200e      	movs	r0, #14
 8010e8e:	2418      	movs	r4, #24
 8010e90:	1903      	adds	r3, r0, r4
 8010e92:	19db      	adds	r3, r3, r7
 8010e94:	210f      	movs	r1, #15
 8010e96:	438a      	bics	r2, r1
 8010e98:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e9c:	085b      	lsrs	r3, r3, #1
 8010e9e:	b29b      	uxth	r3, r3
 8010ea0:	2207      	movs	r2, #7
 8010ea2:	4013      	ands	r3, r2
 8010ea4:	b299      	uxth	r1, r3
 8010ea6:	1903      	adds	r3, r0, r4
 8010ea8:	19db      	adds	r3, r3, r7
 8010eaa:	1902      	adds	r2, r0, r4
 8010eac:	19d2      	adds	r2, r2, r7
 8010eae:	8812      	ldrh	r2, [r2, #0]
 8010eb0:	430a      	orrs	r2, r1
 8010eb2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8010eb4:	69fb      	ldr	r3, [r7, #28]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	1902      	adds	r2, r0, r4
 8010eba:	19d2      	adds	r2, r2, r7
 8010ebc:	8812      	ldrh	r2, [r2, #0]
 8010ebe:	60da      	str	r2, [r3, #12]
 8010ec0:	e05d      	b.n	8010f7e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8010ec2:	231a      	movs	r3, #26
 8010ec4:	2218      	movs	r2, #24
 8010ec6:	189b      	adds	r3, r3, r2
 8010ec8:	19db      	adds	r3, r3, r7
 8010eca:	2201      	movs	r2, #1
 8010ecc:	701a      	strb	r2, [r3, #0]
 8010ece:	e056      	b.n	8010f7e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010ed0:	231b      	movs	r3, #27
 8010ed2:	2218      	movs	r2, #24
 8010ed4:	189b      	adds	r3, r3, r2
 8010ed6:	19db      	adds	r3, r3, r7
 8010ed8:	781b      	ldrb	r3, [r3, #0]
 8010eda:	2b08      	cmp	r3, #8
 8010edc:	d822      	bhi.n	8010f24 <UART_SetConfig+0x4b0>
 8010ede:	009a      	lsls	r2, r3, #2
 8010ee0:	4b32      	ldr	r3, [pc, #200]	@ (8010fac <UART_SetConfig+0x538>)
 8010ee2:	18d3      	adds	r3, r2, r3
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010ee8:	f7fe fb42 	bl	800f570 <HAL_RCC_GetPCLK1Freq>
 8010eec:	0003      	movs	r3, r0
 8010eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010ef0:	e021      	b.n	8010f36 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010ef2:	f7fe fb53 	bl	800f59c <HAL_RCC_GetPCLK2Freq>
 8010ef6:	0003      	movs	r3, r0
 8010ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010efa:	e01c      	b.n	8010f36 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010efc:	4b28      	ldr	r3, [pc, #160]	@ (8010fa0 <UART_SetConfig+0x52c>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	2210      	movs	r2, #16
 8010f02:	4013      	ands	r3, r2
 8010f04:	d002      	beq.n	8010f0c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8010f06:	4b27      	ldr	r3, [pc, #156]	@ (8010fa4 <UART_SetConfig+0x530>)
 8010f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010f0a:	e014      	b.n	8010f36 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8010f0c:	4b26      	ldr	r3, [pc, #152]	@ (8010fa8 <UART_SetConfig+0x534>)
 8010f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010f10:	e011      	b.n	8010f36 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010f12:	f7fe fa7d 	bl	800f410 <HAL_RCC_GetSysClockFreq>
 8010f16:	0003      	movs	r3, r0
 8010f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010f1a:	e00c      	b.n	8010f36 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010f1c:	2380      	movs	r3, #128	@ 0x80
 8010f1e:	021b      	lsls	r3, r3, #8
 8010f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010f22:	e008      	b.n	8010f36 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8010f24:	2300      	movs	r3, #0
 8010f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010f28:	231a      	movs	r3, #26
 8010f2a:	2218      	movs	r2, #24
 8010f2c:	189b      	adds	r3, r3, r2
 8010f2e:	19db      	adds	r3, r3, r7
 8010f30:	2201      	movs	r2, #1
 8010f32:	701a      	strb	r2, [r3, #0]
        break;
 8010f34:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8010f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d020      	beq.n	8010f7e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010f3c:	69fb      	ldr	r3, [r7, #28]
 8010f3e:	685b      	ldr	r3, [r3, #4]
 8010f40:	085a      	lsrs	r2, r3, #1
 8010f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f44:	18d2      	adds	r2, r2, r3
 8010f46:	69fb      	ldr	r3, [r7, #28]
 8010f48:	685b      	ldr	r3, [r3, #4]
 8010f4a:	0019      	movs	r1, r3
 8010f4c:	0010      	movs	r0, r2
 8010f4e:	f7ef f8f7 	bl	8000140 <__udivsi3>
 8010f52:	0003      	movs	r3, r0
 8010f54:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f58:	2b0f      	cmp	r3, #15
 8010f5a:	d90a      	bls.n	8010f72 <UART_SetConfig+0x4fe>
 8010f5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010f5e:	2380      	movs	r3, #128	@ 0x80
 8010f60:	025b      	lsls	r3, r3, #9
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d205      	bcs.n	8010f72 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f68:	b29a      	uxth	r2, r3
 8010f6a:	69fb      	ldr	r3, [r7, #28]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	60da      	str	r2, [r3, #12]
 8010f70:	e005      	b.n	8010f7e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8010f72:	231a      	movs	r3, #26
 8010f74:	2218      	movs	r2, #24
 8010f76:	189b      	adds	r3, r3, r2
 8010f78:	19db      	adds	r3, r3, r7
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010f7e:	69fb      	ldr	r3, [r7, #28]
 8010f80:	2200      	movs	r2, #0
 8010f82:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8010f84:	69fb      	ldr	r3, [r7, #28]
 8010f86:	2200      	movs	r2, #0
 8010f88:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8010f8a:	231a      	movs	r3, #26
 8010f8c:	2218      	movs	r2, #24
 8010f8e:	189b      	adds	r3, r3, r2
 8010f90:	19db      	adds	r3, r3, r7
 8010f92:	781b      	ldrb	r3, [r3, #0]
}
 8010f94:	0018      	movs	r0, r3
 8010f96:	46bd      	mov	sp, r7
 8010f98:	b00e      	add	sp, #56	@ 0x38
 8010f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8010f9c:	0801a434 	.word	0x0801a434
 8010fa0:	40021000 	.word	0x40021000
 8010fa4:	003d0900 	.word	0x003d0900
 8010fa8:	00f42400 	.word	0x00f42400
 8010fac:	0801a458 	.word	0x0801a458

08010fb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b082      	sub	sp, #8
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fbc:	2201      	movs	r2, #1
 8010fbe:	4013      	ands	r3, r2
 8010fc0:	d00b      	beq.n	8010fda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	685b      	ldr	r3, [r3, #4]
 8010fc8:	4a4a      	ldr	r2, [pc, #296]	@ (80110f4 <UART_AdvFeatureConfig+0x144>)
 8010fca:	4013      	ands	r3, r2
 8010fcc:	0019      	movs	r1, r3
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	430a      	orrs	r2, r1
 8010fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fde:	2202      	movs	r2, #2
 8010fe0:	4013      	ands	r3, r2
 8010fe2:	d00b      	beq.n	8010ffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	685b      	ldr	r3, [r3, #4]
 8010fea:	4a43      	ldr	r2, [pc, #268]	@ (80110f8 <UART_AdvFeatureConfig+0x148>)
 8010fec:	4013      	ands	r3, r2
 8010fee:	0019      	movs	r1, r3
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	430a      	orrs	r2, r1
 8010ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011000:	2204      	movs	r2, #4
 8011002:	4013      	ands	r3, r2
 8011004:	d00b      	beq.n	801101e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	685b      	ldr	r3, [r3, #4]
 801100c:	4a3b      	ldr	r2, [pc, #236]	@ (80110fc <UART_AdvFeatureConfig+0x14c>)
 801100e:	4013      	ands	r3, r2
 8011010:	0019      	movs	r1, r3
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	430a      	orrs	r2, r1
 801101c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011022:	2208      	movs	r2, #8
 8011024:	4013      	ands	r3, r2
 8011026:	d00b      	beq.n	8011040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	685b      	ldr	r3, [r3, #4]
 801102e:	4a34      	ldr	r2, [pc, #208]	@ (8011100 <UART_AdvFeatureConfig+0x150>)
 8011030:	4013      	ands	r3, r2
 8011032:	0019      	movs	r1, r3
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	430a      	orrs	r2, r1
 801103e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011044:	2210      	movs	r2, #16
 8011046:	4013      	ands	r3, r2
 8011048:	d00b      	beq.n	8011062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	689b      	ldr	r3, [r3, #8]
 8011050:	4a2c      	ldr	r2, [pc, #176]	@ (8011104 <UART_AdvFeatureConfig+0x154>)
 8011052:	4013      	ands	r3, r2
 8011054:	0019      	movs	r1, r3
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	430a      	orrs	r2, r1
 8011060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011066:	2220      	movs	r2, #32
 8011068:	4013      	ands	r3, r2
 801106a:	d00b      	beq.n	8011084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	689b      	ldr	r3, [r3, #8]
 8011072:	4a25      	ldr	r2, [pc, #148]	@ (8011108 <UART_AdvFeatureConfig+0x158>)
 8011074:	4013      	ands	r3, r2
 8011076:	0019      	movs	r1, r3
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	430a      	orrs	r2, r1
 8011082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011088:	2240      	movs	r2, #64	@ 0x40
 801108a:	4013      	ands	r3, r2
 801108c:	d01d      	beq.n	80110ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	685b      	ldr	r3, [r3, #4]
 8011094:	4a1d      	ldr	r2, [pc, #116]	@ (801110c <UART_AdvFeatureConfig+0x15c>)
 8011096:	4013      	ands	r3, r2
 8011098:	0019      	movs	r1, r3
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	430a      	orrs	r2, r1
 80110a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80110aa:	2380      	movs	r3, #128	@ 0x80
 80110ac:	035b      	lsls	r3, r3, #13
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d10b      	bne.n	80110ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	685b      	ldr	r3, [r3, #4]
 80110b8:	4a15      	ldr	r2, [pc, #84]	@ (8011110 <UART_AdvFeatureConfig+0x160>)
 80110ba:	4013      	ands	r3, r2
 80110bc:	0019      	movs	r1, r3
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	430a      	orrs	r2, r1
 80110c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110ce:	2280      	movs	r2, #128	@ 0x80
 80110d0:	4013      	ands	r3, r2
 80110d2:	d00b      	beq.n	80110ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	685b      	ldr	r3, [r3, #4]
 80110da:	4a0e      	ldr	r2, [pc, #56]	@ (8011114 <UART_AdvFeatureConfig+0x164>)
 80110dc:	4013      	ands	r3, r2
 80110de:	0019      	movs	r1, r3
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	430a      	orrs	r2, r1
 80110ea:	605a      	str	r2, [r3, #4]
  }
}
 80110ec:	46c0      	nop			@ (mov r8, r8)
 80110ee:	46bd      	mov	sp, r7
 80110f0:	b002      	add	sp, #8
 80110f2:	bd80      	pop	{r7, pc}
 80110f4:	fffdffff 	.word	0xfffdffff
 80110f8:	fffeffff 	.word	0xfffeffff
 80110fc:	fffbffff 	.word	0xfffbffff
 8011100:	ffff7fff 	.word	0xffff7fff
 8011104:	ffffefff 	.word	0xffffefff
 8011108:	ffffdfff 	.word	0xffffdfff
 801110c:	ffefffff 	.word	0xffefffff
 8011110:	ff9fffff 	.word	0xff9fffff
 8011114:	fff7ffff 	.word	0xfff7ffff

08011118 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b092      	sub	sp, #72	@ 0x48
 801111c:	af02      	add	r7, sp, #8
 801111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2284      	movs	r2, #132	@ 0x84
 8011124:	2100      	movs	r1, #0
 8011126:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011128:	f7f8 f8d4 	bl	80092d4 <HAL_GetTick>
 801112c:	0003      	movs	r3, r0
 801112e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	2208      	movs	r2, #8
 8011138:	4013      	ands	r3, r2
 801113a:	2b08      	cmp	r3, #8
 801113c:	d12c      	bne.n	8011198 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801113e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011140:	2280      	movs	r2, #128	@ 0x80
 8011142:	0391      	lsls	r1, r2, #14
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	4a46      	ldr	r2, [pc, #280]	@ (8011260 <UART_CheckIdleState+0x148>)
 8011148:	9200      	str	r2, [sp, #0]
 801114a:	2200      	movs	r2, #0
 801114c:	f000 f88c 	bl	8011268 <UART_WaitOnFlagUntilTimeout>
 8011150:	1e03      	subs	r3, r0, #0
 8011152:	d021      	beq.n	8011198 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011154:	f3ef 8310 	mrs	r3, PRIMASK
 8011158:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801115a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801115c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801115e:	2301      	movs	r3, #1
 8011160:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011164:	f383 8810 	msr	PRIMASK, r3
}
 8011168:	46c0      	nop			@ (mov r8, r8)
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	681a      	ldr	r2, [r3, #0]
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	2180      	movs	r1, #128	@ 0x80
 8011176:	438a      	bics	r2, r1
 8011178:	601a      	str	r2, [r3, #0]
 801117a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801117c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801117e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011180:	f383 8810 	msr	PRIMASK, r3
}
 8011184:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2220      	movs	r2, #32
 801118a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2278      	movs	r2, #120	@ 0x78
 8011190:	2100      	movs	r1, #0
 8011192:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011194:	2303      	movs	r3, #3
 8011196:	e05f      	b.n	8011258 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	2204      	movs	r2, #4
 80111a0:	4013      	ands	r3, r2
 80111a2:	2b04      	cmp	r3, #4
 80111a4:	d146      	bne.n	8011234 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80111a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111a8:	2280      	movs	r2, #128	@ 0x80
 80111aa:	03d1      	lsls	r1, r2, #15
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	4a2c      	ldr	r2, [pc, #176]	@ (8011260 <UART_CheckIdleState+0x148>)
 80111b0:	9200      	str	r2, [sp, #0]
 80111b2:	2200      	movs	r2, #0
 80111b4:	f000 f858 	bl	8011268 <UART_WaitOnFlagUntilTimeout>
 80111b8:	1e03      	subs	r3, r0, #0
 80111ba:	d03b      	beq.n	8011234 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111bc:	f3ef 8310 	mrs	r3, PRIMASK
 80111c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80111c2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80111c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80111c6:	2301      	movs	r3, #1
 80111c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80111ca:	693b      	ldr	r3, [r7, #16]
 80111cc:	f383 8810 	msr	PRIMASK, r3
}
 80111d0:	46c0      	nop			@ (mov r8, r8)
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	681a      	ldr	r2, [r3, #0]
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	4921      	ldr	r1, [pc, #132]	@ (8011264 <UART_CheckIdleState+0x14c>)
 80111de:	400a      	ands	r2, r1
 80111e0:	601a      	str	r2, [r3, #0]
 80111e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	f383 8810 	msr	PRIMASK, r3
}
 80111ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111ee:	f3ef 8310 	mrs	r3, PRIMASK
 80111f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80111f4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80111f8:	2301      	movs	r3, #1
 80111fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80111fc:	69fb      	ldr	r3, [r7, #28]
 80111fe:	f383 8810 	msr	PRIMASK, r3
}
 8011202:	46c0      	nop			@ (mov r8, r8)
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	689a      	ldr	r2, [r3, #8]
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	2101      	movs	r1, #1
 8011210:	438a      	bics	r2, r1
 8011212:	609a      	str	r2, [r3, #8]
 8011214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011216:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011218:	6a3b      	ldr	r3, [r7, #32]
 801121a:	f383 8810 	msr	PRIMASK, r3
}
 801121e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2280      	movs	r2, #128	@ 0x80
 8011224:	2120      	movs	r1, #32
 8011226:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2278      	movs	r2, #120	@ 0x78
 801122c:	2100      	movs	r1, #0
 801122e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011230:	2303      	movs	r3, #3
 8011232:	e011      	b.n	8011258 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2220      	movs	r2, #32
 8011238:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	2280      	movs	r2, #128	@ 0x80
 801123e:	2120      	movs	r1, #32
 8011240:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2200      	movs	r2, #0
 8011246:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2200      	movs	r2, #0
 801124c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	2278      	movs	r2, #120	@ 0x78
 8011252:	2100      	movs	r1, #0
 8011254:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011256:	2300      	movs	r3, #0
}
 8011258:	0018      	movs	r0, r3
 801125a:	46bd      	mov	sp, r7
 801125c:	b010      	add	sp, #64	@ 0x40
 801125e:	bd80      	pop	{r7, pc}
 8011260:	01ffffff 	.word	0x01ffffff
 8011264:	fffffedf 	.word	0xfffffedf

08011268 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b084      	sub	sp, #16
 801126c:	af00      	add	r7, sp, #0
 801126e:	60f8      	str	r0, [r7, #12]
 8011270:	60b9      	str	r1, [r7, #8]
 8011272:	603b      	str	r3, [r7, #0]
 8011274:	1dfb      	adds	r3, r7, #7
 8011276:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011278:	e04b      	b.n	8011312 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801127a:	69bb      	ldr	r3, [r7, #24]
 801127c:	3301      	adds	r3, #1
 801127e:	d048      	beq.n	8011312 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011280:	f7f8 f828 	bl	80092d4 <HAL_GetTick>
 8011284:	0002      	movs	r2, r0
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	1ad3      	subs	r3, r2, r3
 801128a:	69ba      	ldr	r2, [r7, #24]
 801128c:	429a      	cmp	r2, r3
 801128e:	d302      	bcc.n	8011296 <UART_WaitOnFlagUntilTimeout+0x2e>
 8011290:	69bb      	ldr	r3, [r7, #24]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d101      	bne.n	801129a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8011296:	2303      	movs	r3, #3
 8011298:	e04b      	b.n	8011332 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	2204      	movs	r2, #4
 80112a2:	4013      	ands	r3, r2
 80112a4:	d035      	beq.n	8011312 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	69db      	ldr	r3, [r3, #28]
 80112ac:	2208      	movs	r2, #8
 80112ae:	4013      	ands	r3, r2
 80112b0:	2b08      	cmp	r3, #8
 80112b2:	d111      	bne.n	80112d8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	2208      	movs	r2, #8
 80112ba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	0018      	movs	r0, r3
 80112c0:	f000 f900 	bl	80114c4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2284      	movs	r2, #132	@ 0x84
 80112c8:	2108      	movs	r1, #8
 80112ca:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2278      	movs	r2, #120	@ 0x78
 80112d0:	2100      	movs	r1, #0
 80112d2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80112d4:	2301      	movs	r3, #1
 80112d6:	e02c      	b.n	8011332 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	69da      	ldr	r2, [r3, #28]
 80112de:	2380      	movs	r3, #128	@ 0x80
 80112e0:	011b      	lsls	r3, r3, #4
 80112e2:	401a      	ands	r2, r3
 80112e4:	2380      	movs	r3, #128	@ 0x80
 80112e6:	011b      	lsls	r3, r3, #4
 80112e8:	429a      	cmp	r2, r3
 80112ea:	d112      	bne.n	8011312 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	2280      	movs	r2, #128	@ 0x80
 80112f2:	0112      	lsls	r2, r2, #4
 80112f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	0018      	movs	r0, r3
 80112fa:	f000 f8e3 	bl	80114c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	2284      	movs	r2, #132	@ 0x84
 8011302:	2120      	movs	r1, #32
 8011304:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	2278      	movs	r2, #120	@ 0x78
 801130a:	2100      	movs	r1, #0
 801130c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801130e:	2303      	movs	r3, #3
 8011310:	e00f      	b.n	8011332 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	69db      	ldr	r3, [r3, #28]
 8011318:	68ba      	ldr	r2, [r7, #8]
 801131a:	4013      	ands	r3, r2
 801131c:	68ba      	ldr	r2, [r7, #8]
 801131e:	1ad3      	subs	r3, r2, r3
 8011320:	425a      	negs	r2, r3
 8011322:	4153      	adcs	r3, r2
 8011324:	b2db      	uxtb	r3, r3
 8011326:	001a      	movs	r2, r3
 8011328:	1dfb      	adds	r3, r7, #7
 801132a:	781b      	ldrb	r3, [r3, #0]
 801132c:	429a      	cmp	r2, r3
 801132e:	d0a4      	beq.n	801127a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011330:	2300      	movs	r3, #0
}
 8011332:	0018      	movs	r0, r3
 8011334:	46bd      	mov	sp, r7
 8011336:	b004      	add	sp, #16
 8011338:	bd80      	pop	{r7, pc}
	...

0801133c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b090      	sub	sp, #64	@ 0x40
 8011340:	af00      	add	r7, sp, #0
 8011342:	60f8      	str	r0, [r7, #12]
 8011344:	60b9      	str	r1, [r7, #8]
 8011346:	1dbb      	adds	r3, r7, #6
 8011348:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	68ba      	ldr	r2, [r7, #8]
 801134e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	1dba      	adds	r2, r7, #6
 8011354:	2158      	movs	r1, #88	@ 0x58
 8011356:	8812      	ldrh	r2, [r2, #0]
 8011358:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	2284      	movs	r2, #132	@ 0x84
 801135e:	2100      	movs	r1, #0
 8011360:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	2280      	movs	r2, #128	@ 0x80
 8011366:	2122      	movs	r1, #34	@ 0x22
 8011368:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801136e:	2b00      	cmp	r3, #0
 8011370:	d028      	beq.n	80113c4 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011376:	4a3e      	ldr	r2, [pc, #248]	@ (8011470 <UART_Start_Receive_DMA+0x134>)
 8011378:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801137e:	4a3d      	ldr	r2, [pc, #244]	@ (8011474 <UART_Start_Receive_DMA+0x138>)
 8011380:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011386:	4a3c      	ldr	r2, [pc, #240]	@ (8011478 <UART_Start_Receive_DMA+0x13c>)
 8011388:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801138e:	2200      	movs	r2, #0
 8011390:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	3324      	adds	r3, #36	@ 0x24
 801139c:	0019      	movs	r1, r3
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80113a2:	001a      	movs	r2, r3
 80113a4:	1dbb      	adds	r3, r7, #6
 80113a6:	881b      	ldrh	r3, [r3, #0]
 80113a8:	f7f8 fd12 	bl	8009dd0 <HAL_DMA_Start_IT>
 80113ac:	1e03      	subs	r3, r0, #0
 80113ae:	d009      	beq.n	80113c4 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	2284      	movs	r2, #132	@ 0x84
 80113b4:	2110      	movs	r1, #16
 80113b6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	2280      	movs	r2, #128	@ 0x80
 80113bc:	2120      	movs	r1, #32
 80113be:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80113c0:	2301      	movs	r3, #1
 80113c2:	e050      	b.n	8011466 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	691b      	ldr	r3, [r3, #16]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d019      	beq.n	8011400 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113cc:	f3ef 8310 	mrs	r3, PRIMASK
 80113d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80113d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80113d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80113d6:	2301      	movs	r3, #1
 80113d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113dc:	f383 8810 	msr	PRIMASK, r3
}
 80113e0:	46c0      	nop			@ (mov r8, r8)
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	681a      	ldr	r2, [r3, #0]
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	2180      	movs	r1, #128	@ 0x80
 80113ee:	0049      	lsls	r1, r1, #1
 80113f0:	430a      	orrs	r2, r1
 80113f2:	601a      	str	r2, [r3, #0]
 80113f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113f6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113fa:	f383 8810 	msr	PRIMASK, r3
}
 80113fe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011400:	f3ef 8310 	mrs	r3, PRIMASK
 8011404:	613b      	str	r3, [r7, #16]
  return(result);
 8011406:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011408:	63bb      	str	r3, [r7, #56]	@ 0x38
 801140a:	2301      	movs	r3, #1
 801140c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	f383 8810 	msr	PRIMASK, r3
}
 8011414:	46c0      	nop			@ (mov r8, r8)
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	689a      	ldr	r2, [r3, #8]
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	2101      	movs	r1, #1
 8011422:	430a      	orrs	r2, r1
 8011424:	609a      	str	r2, [r3, #8]
 8011426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011428:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801142a:	69bb      	ldr	r3, [r7, #24]
 801142c:	f383 8810 	msr	PRIMASK, r3
}
 8011430:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011432:	f3ef 8310 	mrs	r3, PRIMASK
 8011436:	61fb      	str	r3, [r7, #28]
  return(result);
 8011438:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801143a:	637b      	str	r3, [r7, #52]	@ 0x34
 801143c:	2301      	movs	r3, #1
 801143e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011440:	6a3b      	ldr	r3, [r7, #32]
 8011442:	f383 8810 	msr	PRIMASK, r3
}
 8011446:	46c0      	nop			@ (mov r8, r8)
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	689a      	ldr	r2, [r3, #8]
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	2140      	movs	r1, #64	@ 0x40
 8011454:	430a      	orrs	r2, r1
 8011456:	609a      	str	r2, [r3, #8]
 8011458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801145a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801145c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801145e:	f383 8810 	msr	PRIMASK, r3
}
 8011462:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8011464:	2300      	movs	r3, #0
}
 8011466:	0018      	movs	r0, r3
 8011468:	46bd      	mov	sp, r7
 801146a:	b010      	add	sp, #64	@ 0x40
 801146c:	bd80      	pop	{r7, pc}
 801146e:	46c0      	nop			@ (mov r8, r8)
 8011470:	0801164d 	.word	0x0801164d
 8011474:	08011781 	.word	0x08011781
 8011478:	080117c9 	.word	0x080117c9

0801147c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b086      	sub	sp, #24
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011484:	f3ef 8310 	mrs	r3, PRIMASK
 8011488:	60bb      	str	r3, [r7, #8]
  return(result);
 801148a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801148c:	617b      	str	r3, [r7, #20]
 801148e:	2301      	movs	r3, #1
 8011490:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	f383 8810 	msr	PRIMASK, r3
}
 8011498:	46c0      	nop			@ (mov r8, r8)
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	681a      	ldr	r2, [r3, #0]
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	21c0      	movs	r1, #192	@ 0xc0
 80114a6:	438a      	bics	r2, r1
 80114a8:	601a      	str	r2, [r3, #0]
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114ae:	693b      	ldr	r3, [r7, #16]
 80114b0:	f383 8810 	msr	PRIMASK, r3
}
 80114b4:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	2220      	movs	r2, #32
 80114ba:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80114bc:	46c0      	nop			@ (mov r8, r8)
 80114be:	46bd      	mov	sp, r7
 80114c0:	b006      	add	sp, #24
 80114c2:	bd80      	pop	{r7, pc}

080114c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b08e      	sub	sp, #56	@ 0x38
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114cc:	f3ef 8310 	mrs	r3, PRIMASK
 80114d0:	617b      	str	r3, [r7, #20]
  return(result);
 80114d2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80114d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80114d6:	2301      	movs	r3, #1
 80114d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114da:	69bb      	ldr	r3, [r7, #24]
 80114dc:	f383 8810 	msr	PRIMASK, r3
}
 80114e0:	46c0      	nop			@ (mov r8, r8)
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	681a      	ldr	r2, [r3, #0]
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	4926      	ldr	r1, [pc, #152]	@ (8011588 <UART_EndRxTransfer+0xc4>)
 80114ee:	400a      	ands	r2, r1
 80114f0:	601a      	str	r2, [r3, #0]
 80114f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114f6:	69fb      	ldr	r3, [r7, #28]
 80114f8:	f383 8810 	msr	PRIMASK, r3
}
 80114fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114fe:	f3ef 8310 	mrs	r3, PRIMASK
 8011502:	623b      	str	r3, [r7, #32]
  return(result);
 8011504:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011506:	633b      	str	r3, [r7, #48]	@ 0x30
 8011508:	2301      	movs	r3, #1
 801150a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801150e:	f383 8810 	msr	PRIMASK, r3
}
 8011512:	46c0      	nop			@ (mov r8, r8)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	689a      	ldr	r2, [r3, #8]
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	2101      	movs	r1, #1
 8011520:	438a      	bics	r2, r1
 8011522:	609a      	str	r2, [r3, #8]
 8011524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011526:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801152a:	f383 8810 	msr	PRIMASK, r3
}
 801152e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011534:	2b01      	cmp	r3, #1
 8011536:	d118      	bne.n	801156a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011538:	f3ef 8310 	mrs	r3, PRIMASK
 801153c:	60bb      	str	r3, [r7, #8]
  return(result);
 801153e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011540:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011542:	2301      	movs	r3, #1
 8011544:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	f383 8810 	msr	PRIMASK, r3
}
 801154c:	46c0      	nop			@ (mov r8, r8)
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	681a      	ldr	r2, [r3, #0]
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	2110      	movs	r1, #16
 801155a:	438a      	bics	r2, r1
 801155c:	601a      	str	r2, [r3, #0]
 801155e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011560:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011562:	693b      	ldr	r3, [r7, #16]
 8011564:	f383 8810 	msr	PRIMASK, r3
}
 8011568:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2280      	movs	r2, #128	@ 0x80
 801156e:	2120      	movs	r1, #32
 8011570:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2200      	movs	r2, #0
 8011576:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2200      	movs	r2, #0
 801157c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801157e:	46c0      	nop			@ (mov r8, r8)
 8011580:	46bd      	mov	sp, r7
 8011582:	b00e      	add	sp, #56	@ 0x38
 8011584:	bd80      	pop	{r7, pc}
 8011586:	46c0      	nop			@ (mov r8, r8)
 8011588:	fffffedf 	.word	0xfffffedf

0801158c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b08c      	sub	sp, #48	@ 0x30
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011598:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	2220      	movs	r2, #32
 80115a2:	4013      	ands	r3, r2
 80115a4:	d135      	bne.n	8011612 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80115a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a8:	2252      	movs	r2, #82	@ 0x52
 80115aa:	2100      	movs	r1, #0
 80115ac:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115ae:	f3ef 8310 	mrs	r3, PRIMASK
 80115b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80115b4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80115b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80115b8:	2301      	movs	r3, #1
 80115ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	f383 8810 	msr	PRIMASK, r3
}
 80115c2:	46c0      	nop			@ (mov r8, r8)
 80115c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	689a      	ldr	r2, [r3, #8]
 80115ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	2180      	movs	r1, #128	@ 0x80
 80115d0:	438a      	bics	r2, r1
 80115d2:	609a      	str	r2, [r3, #8]
 80115d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	f383 8810 	msr	PRIMASK, r3
}
 80115de:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115e0:	f3ef 8310 	mrs	r3, PRIMASK
 80115e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80115e6:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80115e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80115ea:	2301      	movs	r3, #1
 80115ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115ee:	69fb      	ldr	r3, [r7, #28]
 80115f0:	f383 8810 	msr	PRIMASK, r3
}
 80115f4:	46c0      	nop			@ (mov r8, r8)
 80115f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	681a      	ldr	r2, [r3, #0]
 80115fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	2140      	movs	r1, #64	@ 0x40
 8011602:	430a      	orrs	r2, r1
 8011604:	601a      	str	r2, [r3, #0]
 8011606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011608:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801160a:	6a3b      	ldr	r3, [r7, #32]
 801160c:	f383 8810 	msr	PRIMASK, r3
}
 8011610:	e006      	b.n	8011620 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8011612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011614:	228c      	movs	r2, #140	@ 0x8c
 8011616:	589b      	ldr	r3, [r3, r2]
 8011618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801161a:	0010      	movs	r0, r2
 801161c:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801161e:	46c0      	nop			@ (mov r8, r8)
 8011620:	46c0      	nop			@ (mov r8, r8)
 8011622:	46bd      	mov	sp, r7
 8011624:	b00c      	add	sp, #48	@ 0x30
 8011626:	bd80      	pop	{r7, pc}

08011628 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b084      	sub	sp, #16
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011634:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	2288      	movs	r2, #136	@ 0x88
 801163a:	589b      	ldr	r3, [r3, r2]
 801163c:	68fa      	ldr	r2, [r7, #12]
 801163e:	0010      	movs	r0, r2
 8011640:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011642:	46c0      	nop			@ (mov r8, r8)
 8011644:	46bd      	mov	sp, r7
 8011646:	b004      	add	sp, #16
 8011648:	bd80      	pop	{r7, pc}
	...

0801164c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b094      	sub	sp, #80	@ 0x50
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011658:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	2220      	movs	r2, #32
 8011662:	4013      	ands	r3, r2
 8011664:	d16f      	bne.n	8011746 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8011666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011668:	225a      	movs	r2, #90	@ 0x5a
 801166a:	2100      	movs	r1, #0
 801166c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801166e:	f3ef 8310 	mrs	r3, PRIMASK
 8011672:	61bb      	str	r3, [r7, #24]
  return(result);
 8011674:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011676:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011678:	2301      	movs	r3, #1
 801167a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801167c:	69fb      	ldr	r3, [r7, #28]
 801167e:	f383 8810 	msr	PRIMASK, r3
}
 8011682:	46c0      	nop			@ (mov r8, r8)
 8011684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	681a      	ldr	r2, [r3, #0]
 801168a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	493b      	ldr	r1, [pc, #236]	@ (801177c <UART_DMAReceiveCplt+0x130>)
 8011690:	400a      	ands	r2, r1
 8011692:	601a      	str	r2, [r3, #0]
 8011694:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011696:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011698:	6a3b      	ldr	r3, [r7, #32]
 801169a:	f383 8810 	msr	PRIMASK, r3
}
 801169e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116a0:	f3ef 8310 	mrs	r3, PRIMASK
 80116a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80116a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80116aa:	2301      	movs	r3, #1
 80116ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116b0:	f383 8810 	msr	PRIMASK, r3
}
 80116b4:	46c0      	nop			@ (mov r8, r8)
 80116b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	689a      	ldr	r2, [r3, #8]
 80116bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	2101      	movs	r1, #1
 80116c2:	438a      	bics	r2, r1
 80116c4:	609a      	str	r2, [r3, #8]
 80116c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116cc:	f383 8810 	msr	PRIMASK, r3
}
 80116d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116d2:	f3ef 8310 	mrs	r3, PRIMASK
 80116d6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80116d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80116da:	643b      	str	r3, [r7, #64]	@ 0x40
 80116dc:	2301      	movs	r3, #1
 80116de:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116e2:	f383 8810 	msr	PRIMASK, r3
}
 80116e6:	46c0      	nop			@ (mov r8, r8)
 80116e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	689a      	ldr	r2, [r3, #8]
 80116ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	2140      	movs	r1, #64	@ 0x40
 80116f4:	438a      	bics	r2, r1
 80116f6:	609a      	str	r2, [r3, #8]
 80116f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80116fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116fe:	f383 8810 	msr	PRIMASK, r3
}
 8011702:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011706:	2280      	movs	r2, #128	@ 0x80
 8011708:	2120      	movs	r1, #32
 801170a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801170c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801170e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011710:	2b01      	cmp	r3, #1
 8011712:	d118      	bne.n	8011746 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011714:	f3ef 8310 	mrs	r3, PRIMASK
 8011718:	60fb      	str	r3, [r7, #12]
  return(result);
 801171a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801171c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801171e:	2301      	movs	r3, #1
 8011720:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	f383 8810 	msr	PRIMASK, r3
}
 8011728:	46c0      	nop			@ (mov r8, r8)
 801172a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	681a      	ldr	r2, [r3, #0]
 8011730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	2110      	movs	r1, #16
 8011736:	438a      	bics	r2, r1
 8011738:	601a      	str	r2, [r3, #0]
 801173a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801173c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	f383 8810 	msr	PRIMASK, r3
}
 8011744:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011746:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011748:	2200      	movs	r2, #0
 801174a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801174c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801174e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011750:	2b01      	cmp	r3, #1
 8011752:	d109      	bne.n	8011768 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8011754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011756:	22ac      	movs	r2, #172	@ 0xac
 8011758:	589b      	ldr	r3, [r3, r2]
 801175a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801175c:	2158      	movs	r1, #88	@ 0x58
 801175e:	5a51      	ldrh	r1, [r2, r1]
 8011760:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011762:	0010      	movs	r0, r2
 8011764:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011766:	e005      	b.n	8011774 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8011768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801176a:	2294      	movs	r2, #148	@ 0x94
 801176c:	589b      	ldr	r3, [r3, r2]
 801176e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011770:	0010      	movs	r0, r2
 8011772:	4798      	blx	r3
}
 8011774:	46c0      	nop			@ (mov r8, r8)
 8011776:	46bd      	mov	sp, r7
 8011778:	b014      	add	sp, #80	@ 0x50
 801177a:	bd80      	pop	{r7, pc}
 801177c:	fffffeff 	.word	0xfffffeff

08011780 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b084      	sub	sp, #16
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801178c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	2201      	movs	r2, #1
 8011792:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011798:	2b01      	cmp	r3, #1
 801179a:	d10b      	bne.n	80117b4 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	22ac      	movs	r2, #172	@ 0xac
 80117a0:	589b      	ldr	r3, [r3, r2]
 80117a2:	68fa      	ldr	r2, [r7, #12]
 80117a4:	2158      	movs	r1, #88	@ 0x58
 80117a6:	5a52      	ldrh	r2, [r2, r1]
 80117a8:	0852      	lsrs	r2, r2, #1
 80117aa:	b291      	uxth	r1, r2
 80117ac:	68fa      	ldr	r2, [r7, #12]
 80117ae:	0010      	movs	r0, r2
 80117b0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80117b2:	e005      	b.n	80117c0 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	2290      	movs	r2, #144	@ 0x90
 80117b8:	589b      	ldr	r3, [r3, r2]
 80117ba:	68fa      	ldr	r2, [r7, #12]
 80117bc:	0010      	movs	r0, r2
 80117be:	4798      	blx	r3
}
 80117c0:	46c0      	nop			@ (mov r8, r8)
 80117c2:	46bd      	mov	sp, r7
 80117c4:	b004      	add	sp, #16
 80117c6:	bd80      	pop	{r7, pc}

080117c8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b086      	sub	sp, #24
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117d4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80117da:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80117dc:	697b      	ldr	r3, [r7, #20]
 80117de:	2280      	movs	r2, #128	@ 0x80
 80117e0:	589b      	ldr	r3, [r3, r2]
 80117e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	689b      	ldr	r3, [r3, #8]
 80117ea:	2280      	movs	r2, #128	@ 0x80
 80117ec:	4013      	ands	r3, r2
 80117ee:	2b80      	cmp	r3, #128	@ 0x80
 80117f0:	d10a      	bne.n	8011808 <UART_DMAError+0x40>
 80117f2:	693b      	ldr	r3, [r7, #16]
 80117f4:	2b21      	cmp	r3, #33	@ 0x21
 80117f6:	d107      	bne.n	8011808 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	2252      	movs	r2, #82	@ 0x52
 80117fc:	2100      	movs	r1, #0
 80117fe:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8011800:	697b      	ldr	r3, [r7, #20]
 8011802:	0018      	movs	r0, r3
 8011804:	f7ff fe3a 	bl	801147c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011808:	697b      	ldr	r3, [r7, #20]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	689b      	ldr	r3, [r3, #8]
 801180e:	2240      	movs	r2, #64	@ 0x40
 8011810:	4013      	ands	r3, r2
 8011812:	2b40      	cmp	r3, #64	@ 0x40
 8011814:	d10a      	bne.n	801182c <UART_DMAError+0x64>
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	2b22      	cmp	r3, #34	@ 0x22
 801181a:	d107      	bne.n	801182c <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	225a      	movs	r2, #90	@ 0x5a
 8011820:	2100      	movs	r1, #0
 8011822:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	0018      	movs	r0, r3
 8011828:	f7ff fe4c 	bl	80114c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	2284      	movs	r2, #132	@ 0x84
 8011830:	589b      	ldr	r3, [r3, r2]
 8011832:	2210      	movs	r2, #16
 8011834:	431a      	orrs	r2, r3
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	2184      	movs	r1, #132	@ 0x84
 801183a:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	2298      	movs	r2, #152	@ 0x98
 8011840:	589b      	ldr	r3, [r3, r2]
 8011842:	697a      	ldr	r2, [r7, #20]
 8011844:	0010      	movs	r0, r2
 8011846:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011848:	46c0      	nop			@ (mov r8, r8)
 801184a:	46bd      	mov	sp, r7
 801184c:	b006      	add	sp, #24
 801184e:	bd80      	pop	{r7, pc}

08011850 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b084      	sub	sp, #16
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801185c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	225a      	movs	r2, #90	@ 0x5a
 8011862:	2100      	movs	r1, #0
 8011864:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	2252      	movs	r2, #82	@ 0x52
 801186a:	2100      	movs	r1, #0
 801186c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	2298      	movs	r2, #152	@ 0x98
 8011872:	589b      	ldr	r3, [r3, r2]
 8011874:	68fa      	ldr	r2, [r7, #12]
 8011876:	0010      	movs	r0, r2
 8011878:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801187a:	46c0      	nop			@ (mov r8, r8)
 801187c:	46bd      	mov	sp, r7
 801187e:	b004      	add	sp, #16
 8011880:	bd80      	pop	{r7, pc}

08011882 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011882:	b580      	push	{r7, lr}
 8011884:	b086      	sub	sp, #24
 8011886:	af00      	add	r7, sp, #0
 8011888:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801188a:	f3ef 8310 	mrs	r3, PRIMASK
 801188e:	60bb      	str	r3, [r7, #8]
  return(result);
 8011890:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011892:	617b      	str	r3, [r7, #20]
 8011894:	2301      	movs	r3, #1
 8011896:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	f383 8810 	msr	PRIMASK, r3
}
 801189e:	46c0      	nop			@ (mov r8, r8)
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	681a      	ldr	r2, [r3, #0]
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	2140      	movs	r1, #64	@ 0x40
 80118ac:	438a      	bics	r2, r1
 80118ae:	601a      	str	r2, [r3, #0]
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	f383 8810 	msr	PRIMASK, r3
}
 80118ba:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2220      	movs	r2, #32
 80118c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2200      	movs	r2, #0
 80118c6:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	228c      	movs	r2, #140	@ 0x8c
 80118cc:	589b      	ldr	r3, [r3, r2]
 80118ce:	687a      	ldr	r2, [r7, #4]
 80118d0:	0010      	movs	r0, r2
 80118d2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80118d4:	46c0      	nop			@ (mov r8, r8)
 80118d6:	46bd      	mov	sp, r7
 80118d8:	b006      	add	sp, #24
 80118da:	bd80      	pop	{r7, pc}

080118dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80118e4:	46c0      	nop			@ (mov r8, r8)
 80118e6:	46bd      	mov	sp, r7
 80118e8:	b002      	add	sp, #8
 80118ea:	bd80      	pop	{r7, pc}

080118ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b084      	sub	sp, #16
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2244      	movs	r2, #68	@ 0x44
 80118f8:	2100      	movs	r1, #0
 80118fa:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80118fc:	4b05      	ldr	r3, [pc, #20]	@ (8011914 <USB_EnableGlobalInt+0x28>)
 80118fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	b299      	uxth	r1, r3
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2240      	movs	r2, #64	@ 0x40
 8011908:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801190a:	2300      	movs	r3, #0
}
 801190c:	0018      	movs	r0, r3
 801190e:	46bd      	mov	sp, r7
 8011910:	b004      	add	sp, #16
 8011912:	bd80      	pop	{r7, pc}
 8011914:	0000bf80 	.word	0x0000bf80

08011918 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b084      	sub	sp, #16
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011920:	4b09      	ldr	r3, [pc, #36]	@ (8011948 <USB_DisableGlobalInt+0x30>)
 8011922:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2240      	movs	r2, #64	@ 0x40
 8011928:	5a9b      	ldrh	r3, [r3, r2]
 801192a:	b29b      	uxth	r3, r3
 801192c:	68fa      	ldr	r2, [r7, #12]
 801192e:	b292      	uxth	r2, r2
 8011930:	43d2      	mvns	r2, r2
 8011932:	b292      	uxth	r2, r2
 8011934:	4013      	ands	r3, r2
 8011936:	b299      	uxth	r1, r3
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2240      	movs	r2, #64	@ 0x40
 801193c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801193e:	2300      	movs	r3, #0
}
 8011940:	0018      	movs	r0, r3
 8011942:	46bd      	mov	sp, r7
 8011944:	b004      	add	sp, #16
 8011946:	bd80      	pop	{r7, pc}
 8011948:	0000bf80 	.word	0x0000bf80

0801194c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801194c:	b084      	sub	sp, #16
 801194e:	b590      	push	{r4, r7, lr}
 8011950:	b083      	sub	sp, #12
 8011952:	af00      	add	r7, sp, #0
 8011954:	6078      	str	r0, [r7, #4]
 8011956:	2004      	movs	r0, #4
 8011958:	2410      	movs	r4, #16
 801195a:	1900      	adds	r0, r0, r4
 801195c:	2408      	movs	r4, #8
 801195e:	46a4      	mov	ip, r4
 8011960:	44bc      	add	ip, r7
 8011962:	4460      	add	r0, ip
 8011964:	6001      	str	r1, [r0, #0]
 8011966:	6042      	str	r2, [r0, #4]
 8011968:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2240      	movs	r2, #64	@ 0x40
 801196e:	2101      	movs	r1, #1
 8011970:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2240      	movs	r2, #64	@ 0x40
 8011976:	2100      	movs	r1, #0
 8011978:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2244      	movs	r2, #68	@ 0x44
 801197e:	2100      	movs	r1, #0
 8011980:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	2250      	movs	r2, #80	@ 0x50
 8011986:	2100      	movs	r1, #0
 8011988:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801198a:	2300      	movs	r3, #0
}
 801198c:	0018      	movs	r0, r3
 801198e:	46bd      	mov	sp, r7
 8011990:	b003      	add	sp, #12
 8011992:	bc90      	pop	{r4, r7}
 8011994:	bc08      	pop	{r3}
 8011996:	b004      	add	sp, #16
 8011998:	4718      	bx	r3
	...

0801199c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b09c      	sub	sp, #112	@ 0x70
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
 80119a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80119a6:	236f      	movs	r3, #111	@ 0x6f
 80119a8:	18fb      	adds	r3, r7, r3
 80119aa:	2200      	movs	r2, #0
 80119ac:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80119ae:	687a      	ldr	r2, [r7, #4]
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	781b      	ldrb	r3, [r3, #0]
 80119b4:	009b      	lsls	r3, r3, #2
 80119b6:	18d3      	adds	r3, r2, r3
 80119b8:	881b      	ldrh	r3, [r3, #0]
 80119ba:	b29a      	uxth	r2, r3
 80119bc:	236c      	movs	r3, #108	@ 0x6c
 80119be:	18fb      	adds	r3, r7, r3
 80119c0:	49a3      	ldr	r1, [pc, #652]	@ (8011c50 <USB_ActivateEndpoint+0x2b4>)
 80119c2:	400a      	ands	r2, r1
 80119c4:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	78db      	ldrb	r3, [r3, #3]
 80119ca:	2b03      	cmp	r3, #3
 80119cc:	d017      	beq.n	80119fe <USB_ActivateEndpoint+0x62>
 80119ce:	dc28      	bgt.n	8011a22 <USB_ActivateEndpoint+0x86>
 80119d0:	2b02      	cmp	r3, #2
 80119d2:	d00e      	beq.n	80119f2 <USB_ActivateEndpoint+0x56>
 80119d4:	dc25      	bgt.n	8011a22 <USB_ActivateEndpoint+0x86>
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d002      	beq.n	80119e0 <USB_ActivateEndpoint+0x44>
 80119da:	2b01      	cmp	r3, #1
 80119dc:	d018      	beq.n	8011a10 <USB_ActivateEndpoint+0x74>
 80119de:	e020      	b.n	8011a22 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80119e0:	226c      	movs	r2, #108	@ 0x6c
 80119e2:	18bb      	adds	r3, r7, r2
 80119e4:	18ba      	adds	r2, r7, r2
 80119e6:	8812      	ldrh	r2, [r2, #0]
 80119e8:	2180      	movs	r1, #128	@ 0x80
 80119ea:	0089      	lsls	r1, r1, #2
 80119ec:	430a      	orrs	r2, r1
 80119ee:	801a      	strh	r2, [r3, #0]
      break;
 80119f0:	e01c      	b.n	8011a2c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80119f2:	226c      	movs	r2, #108	@ 0x6c
 80119f4:	18bb      	adds	r3, r7, r2
 80119f6:	18ba      	adds	r2, r7, r2
 80119f8:	8812      	ldrh	r2, [r2, #0]
 80119fa:	801a      	strh	r2, [r3, #0]
      break;
 80119fc:	e016      	b.n	8011a2c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80119fe:	226c      	movs	r2, #108	@ 0x6c
 8011a00:	18bb      	adds	r3, r7, r2
 8011a02:	18ba      	adds	r2, r7, r2
 8011a04:	8812      	ldrh	r2, [r2, #0]
 8011a06:	21c0      	movs	r1, #192	@ 0xc0
 8011a08:	00c9      	lsls	r1, r1, #3
 8011a0a:	430a      	orrs	r2, r1
 8011a0c:	801a      	strh	r2, [r3, #0]
      break;
 8011a0e:	e00d      	b.n	8011a2c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8011a10:	226c      	movs	r2, #108	@ 0x6c
 8011a12:	18bb      	adds	r3, r7, r2
 8011a14:	18ba      	adds	r2, r7, r2
 8011a16:	8812      	ldrh	r2, [r2, #0]
 8011a18:	2180      	movs	r1, #128	@ 0x80
 8011a1a:	00c9      	lsls	r1, r1, #3
 8011a1c:	430a      	orrs	r2, r1
 8011a1e:	801a      	strh	r2, [r3, #0]
      break;
 8011a20:	e004      	b.n	8011a2c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8011a22:	236f      	movs	r3, #111	@ 0x6f
 8011a24:	18fb      	adds	r3, r7, r3
 8011a26:	2201      	movs	r2, #1
 8011a28:	701a      	strb	r2, [r3, #0]
      break;
 8011a2a:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8011a2c:	687a      	ldr	r2, [r7, #4]
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	781b      	ldrb	r3, [r3, #0]
 8011a32:	009b      	lsls	r3, r3, #2
 8011a34:	18d3      	adds	r3, r2, r3
 8011a36:	226c      	movs	r2, #108	@ 0x6c
 8011a38:	18ba      	adds	r2, r7, r2
 8011a3a:	8812      	ldrh	r2, [r2, #0]
 8011a3c:	4985      	ldr	r1, [pc, #532]	@ (8011c54 <USB_ActivateEndpoint+0x2b8>)
 8011a3e:	430a      	orrs	r2, r1
 8011a40:	b292      	uxth	r2, r2
 8011a42:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8011a44:	687a      	ldr	r2, [r7, #4]
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	781b      	ldrb	r3, [r3, #0]
 8011a4a:	009b      	lsls	r3, r3, #2
 8011a4c:	18d3      	adds	r3, r2, r3
 8011a4e:	881b      	ldrh	r3, [r3, #0]
 8011a50:	b29b      	uxth	r3, r3
 8011a52:	b21b      	sxth	r3, r3
 8011a54:	4a80      	ldr	r2, [pc, #512]	@ (8011c58 <USB_ActivateEndpoint+0x2bc>)
 8011a56:	4013      	ands	r3, r2
 8011a58:	b21a      	sxth	r2, r3
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	b21b      	sxth	r3, r3
 8011a60:	4313      	orrs	r3, r2
 8011a62:	b21a      	sxth	r2, r3
 8011a64:	2166      	movs	r1, #102	@ 0x66
 8011a66:	187b      	adds	r3, r7, r1
 8011a68:	801a      	strh	r2, [r3, #0]
 8011a6a:	687a      	ldr	r2, [r7, #4]
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	781b      	ldrb	r3, [r3, #0]
 8011a70:	009b      	lsls	r3, r3, #2
 8011a72:	18d3      	adds	r3, r2, r3
 8011a74:	187a      	adds	r2, r7, r1
 8011a76:	8812      	ldrh	r2, [r2, #0]
 8011a78:	4976      	ldr	r1, [pc, #472]	@ (8011c54 <USB_ActivateEndpoint+0x2b8>)
 8011a7a:	430a      	orrs	r2, r1
 8011a7c:	b292      	uxth	r2, r2
 8011a7e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	7b1b      	ldrb	r3, [r3, #12]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d000      	beq.n	8011a8a <USB_ActivateEndpoint+0xee>
 8011a88:	e178      	b.n	8011d7c <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8011a8a:	683b      	ldr	r3, [r7, #0]
 8011a8c:	785b      	ldrb	r3, [r3, #1]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d100      	bne.n	8011a94 <USB_ActivateEndpoint+0xf8>
 8011a92:	e07a      	b.n	8011b8a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	61bb      	str	r3, [r7, #24]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2250      	movs	r2, #80	@ 0x50
 8011a9c:	5a9b      	ldrh	r3, [r3, r2]
 8011a9e:	b29b      	uxth	r3, r3
 8011aa0:	001a      	movs	r2, r3
 8011aa2:	69bb      	ldr	r3, [r7, #24]
 8011aa4:	189b      	adds	r3, r3, r2
 8011aa6:	61bb      	str	r3, [r7, #24]
 8011aa8:	683b      	ldr	r3, [r7, #0]
 8011aaa:	781b      	ldrb	r3, [r3, #0]
 8011aac:	00da      	lsls	r2, r3, #3
 8011aae:	69bb      	ldr	r3, [r7, #24]
 8011ab0:	18d3      	adds	r3, r2, r3
 8011ab2:	2280      	movs	r2, #128	@ 0x80
 8011ab4:	00d2      	lsls	r2, r2, #3
 8011ab6:	4694      	mov	ip, r2
 8011ab8:	4463      	add	r3, ip
 8011aba:	617b      	str	r3, [r7, #20]
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	88db      	ldrh	r3, [r3, #6]
 8011ac0:	085b      	lsrs	r3, r3, #1
 8011ac2:	b29b      	uxth	r3, r3
 8011ac4:	18db      	adds	r3, r3, r3
 8011ac6:	b29a      	uxth	r2, r3
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011acc:	687a      	ldr	r2, [r7, #4]
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	781b      	ldrb	r3, [r3, #0]
 8011ad2:	009b      	lsls	r3, r3, #2
 8011ad4:	18d2      	adds	r2, r2, r3
 8011ad6:	2112      	movs	r1, #18
 8011ad8:	187b      	adds	r3, r7, r1
 8011ada:	8812      	ldrh	r2, [r2, #0]
 8011adc:	801a      	strh	r2, [r3, #0]
 8011ade:	187b      	adds	r3, r7, r1
 8011ae0:	881b      	ldrh	r3, [r3, #0]
 8011ae2:	2240      	movs	r2, #64	@ 0x40
 8011ae4:	4013      	ands	r3, r2
 8011ae6:	d016      	beq.n	8011b16 <USB_ActivateEndpoint+0x17a>
 8011ae8:	687a      	ldr	r2, [r7, #4]
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	781b      	ldrb	r3, [r3, #0]
 8011aee:	009b      	lsls	r3, r3, #2
 8011af0:	18d3      	adds	r3, r2, r3
 8011af2:	881b      	ldrh	r3, [r3, #0]
 8011af4:	b29a      	uxth	r2, r3
 8011af6:	2010      	movs	r0, #16
 8011af8:	183b      	adds	r3, r7, r0
 8011afa:	4957      	ldr	r1, [pc, #348]	@ (8011c58 <USB_ActivateEndpoint+0x2bc>)
 8011afc:	400a      	ands	r2, r1
 8011afe:	801a      	strh	r2, [r3, #0]
 8011b00:	687a      	ldr	r2, [r7, #4]
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	781b      	ldrb	r3, [r3, #0]
 8011b06:	009b      	lsls	r3, r3, #2
 8011b08:	18d3      	adds	r3, r2, r3
 8011b0a:	183a      	adds	r2, r7, r0
 8011b0c:	8812      	ldrh	r2, [r2, #0]
 8011b0e:	4953      	ldr	r1, [pc, #332]	@ (8011c5c <USB_ActivateEndpoint+0x2c0>)
 8011b10:	430a      	orrs	r2, r1
 8011b12:	b292      	uxth	r2, r2
 8011b14:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	78db      	ldrb	r3, [r3, #3]
 8011b1a:	2b01      	cmp	r3, #1
 8011b1c:	d01d      	beq.n	8011b5a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011b1e:	687a      	ldr	r2, [r7, #4]
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	781b      	ldrb	r3, [r3, #0]
 8011b24:	009b      	lsls	r3, r3, #2
 8011b26:	18d3      	adds	r3, r2, r3
 8011b28:	881b      	ldrh	r3, [r3, #0]
 8011b2a:	b29a      	uxth	r2, r3
 8011b2c:	200c      	movs	r0, #12
 8011b2e:	183b      	adds	r3, r7, r0
 8011b30:	494b      	ldr	r1, [pc, #300]	@ (8011c60 <USB_ActivateEndpoint+0x2c4>)
 8011b32:	400a      	ands	r2, r1
 8011b34:	801a      	strh	r2, [r3, #0]
 8011b36:	183b      	adds	r3, r7, r0
 8011b38:	183a      	adds	r2, r7, r0
 8011b3a:	8812      	ldrh	r2, [r2, #0]
 8011b3c:	2120      	movs	r1, #32
 8011b3e:	404a      	eors	r2, r1
 8011b40:	801a      	strh	r2, [r3, #0]
 8011b42:	687a      	ldr	r2, [r7, #4]
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	009b      	lsls	r3, r3, #2
 8011b4a:	18d3      	adds	r3, r2, r3
 8011b4c:	183a      	adds	r2, r7, r0
 8011b4e:	8812      	ldrh	r2, [r2, #0]
 8011b50:	4940      	ldr	r1, [pc, #256]	@ (8011c54 <USB_ActivateEndpoint+0x2b8>)
 8011b52:	430a      	orrs	r2, r1
 8011b54:	b292      	uxth	r2, r2
 8011b56:	801a      	strh	r2, [r3, #0]
 8011b58:	e2b4      	b.n	80120c4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011b5a:	687a      	ldr	r2, [r7, #4]
 8011b5c:	683b      	ldr	r3, [r7, #0]
 8011b5e:	781b      	ldrb	r3, [r3, #0]
 8011b60:	009b      	lsls	r3, r3, #2
 8011b62:	18d3      	adds	r3, r2, r3
 8011b64:	881b      	ldrh	r3, [r3, #0]
 8011b66:	b29a      	uxth	r2, r3
 8011b68:	200e      	movs	r0, #14
 8011b6a:	183b      	adds	r3, r7, r0
 8011b6c:	493c      	ldr	r1, [pc, #240]	@ (8011c60 <USB_ActivateEndpoint+0x2c4>)
 8011b6e:	400a      	ands	r2, r1
 8011b70:	801a      	strh	r2, [r3, #0]
 8011b72:	687a      	ldr	r2, [r7, #4]
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	781b      	ldrb	r3, [r3, #0]
 8011b78:	009b      	lsls	r3, r3, #2
 8011b7a:	18d3      	adds	r3, r2, r3
 8011b7c:	183a      	adds	r2, r7, r0
 8011b7e:	8812      	ldrh	r2, [r2, #0]
 8011b80:	4934      	ldr	r1, [pc, #208]	@ (8011c54 <USB_ActivateEndpoint+0x2b8>)
 8011b82:	430a      	orrs	r2, r1
 8011b84:	b292      	uxth	r2, r2
 8011b86:	801a      	strh	r2, [r3, #0]
 8011b88:	e29c      	b.n	80120c4 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2250      	movs	r2, #80	@ 0x50
 8011b92:	5a9b      	ldrh	r3, [r3, r2]
 8011b94:	b29b      	uxth	r3, r3
 8011b96:	001a      	movs	r2, r3
 8011b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b9a:	189b      	adds	r3, r3, r2
 8011b9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	781b      	ldrb	r3, [r3, #0]
 8011ba2:	00da      	lsls	r2, r3, #3
 8011ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ba6:	18d3      	adds	r3, r2, r3
 8011ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8011c64 <USB_ActivateEndpoint+0x2c8>)
 8011baa:	4694      	mov	ip, r2
 8011bac:	4463      	add	r3, ip
 8011bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	88db      	ldrh	r3, [r3, #6]
 8011bb4:	085b      	lsrs	r3, r3, #1
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	18db      	adds	r3, r3, r3
 8011bba:	b29a      	uxth	r2, r3
 8011bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bbe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	2250      	movs	r2, #80	@ 0x50
 8011bc8:	5a9b      	ldrh	r3, [r3, r2]
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	001a      	movs	r2, r3
 8011bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bd0:	189b      	adds	r3, r3, r2
 8011bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	00da      	lsls	r2, r3, #3
 8011bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bdc:	18d3      	adds	r3, r2, r3
 8011bde:	4a22      	ldr	r2, [pc, #136]	@ (8011c68 <USB_ActivateEndpoint+0x2cc>)
 8011be0:	4694      	mov	ip, r2
 8011be2:	4463      	add	r3, ip
 8011be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8011be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011be8:	881b      	ldrh	r3, [r3, #0]
 8011bea:	b29b      	uxth	r3, r3
 8011bec:	059b      	lsls	r3, r3, #22
 8011bee:	0d9b      	lsrs	r3, r3, #22
 8011bf0:	b29a      	uxth	r2, r3
 8011bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bf4:	801a      	strh	r2, [r3, #0]
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	691b      	ldr	r3, [r3, #16]
 8011bfa:	2b3e      	cmp	r3, #62	@ 0x3e
 8011bfc:	d91a      	bls.n	8011c34 <USB_ActivateEndpoint+0x298>
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	691b      	ldr	r3, [r3, #16]
 8011c02:	095b      	lsrs	r3, r3, #5
 8011c04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	691b      	ldr	r3, [r3, #16]
 8011c0a:	221f      	movs	r2, #31
 8011c0c:	4013      	ands	r3, r2
 8011c0e:	d102      	bne.n	8011c16 <USB_ActivateEndpoint+0x27a>
 8011c10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011c12:	3b01      	subs	r3, #1
 8011c14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c18:	881b      	ldrh	r3, [r3, #0]
 8011c1a:	b29a      	uxth	r2, r3
 8011c1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011c1e:	b29b      	uxth	r3, r3
 8011c20:	029b      	lsls	r3, r3, #10
 8011c22:	b29b      	uxth	r3, r3
 8011c24:	4313      	orrs	r3, r2
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	4a10      	ldr	r2, [pc, #64]	@ (8011c6c <USB_ActivateEndpoint+0x2d0>)
 8011c2a:	4313      	orrs	r3, r2
 8011c2c:	b29a      	uxth	r2, r3
 8011c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c30:	801a      	strh	r2, [r3, #0]
 8011c32:	e034      	b.n	8011c9e <USB_ActivateEndpoint+0x302>
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	691b      	ldr	r3, [r3, #16]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d119      	bne.n	8011c70 <USB_ActivateEndpoint+0x2d4>
 8011c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c3e:	881b      	ldrh	r3, [r3, #0]
 8011c40:	b29b      	uxth	r3, r3
 8011c42:	4a0a      	ldr	r2, [pc, #40]	@ (8011c6c <USB_ActivateEndpoint+0x2d0>)
 8011c44:	4313      	orrs	r3, r2
 8011c46:	b29a      	uxth	r2, r3
 8011c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c4a:	801a      	strh	r2, [r3, #0]
 8011c4c:	e027      	b.n	8011c9e <USB_ActivateEndpoint+0x302>
 8011c4e:	46c0      	nop			@ (mov r8, r8)
 8011c50:	ffff898f 	.word	0xffff898f
 8011c54:	ffff8080 	.word	0xffff8080
 8011c58:	ffff8f8f 	.word	0xffff8f8f
 8011c5c:	ffff80c0 	.word	0xffff80c0
 8011c60:	ffff8fbf 	.word	0xffff8fbf
 8011c64:	00000404 	.word	0x00000404
 8011c68:	00000406 	.word	0x00000406
 8011c6c:	ffff8000 	.word	0xffff8000
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	691b      	ldr	r3, [r3, #16]
 8011c74:	085b      	lsrs	r3, r3, #1
 8011c76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	691b      	ldr	r3, [r3, #16]
 8011c7c:	2201      	movs	r2, #1
 8011c7e:	4013      	ands	r3, r2
 8011c80:	d002      	beq.n	8011c88 <USB_ActivateEndpoint+0x2ec>
 8011c82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011c84:	3301      	adds	r3, #1
 8011c86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c8a:	881b      	ldrh	r3, [r3, #0]
 8011c8c:	b29a      	uxth	r2, r3
 8011c8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	029b      	lsls	r3, r3, #10
 8011c94:	b29b      	uxth	r3, r3
 8011c96:	4313      	orrs	r3, r2
 8011c98:	b29a      	uxth	r2, r3
 8011c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c9c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011c9e:	687a      	ldr	r2, [r7, #4]
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	781b      	ldrb	r3, [r3, #0]
 8011ca4:	009b      	lsls	r3, r3, #2
 8011ca6:	18d2      	adds	r2, r2, r3
 8011ca8:	2122      	movs	r1, #34	@ 0x22
 8011caa:	187b      	adds	r3, r7, r1
 8011cac:	8812      	ldrh	r2, [r2, #0]
 8011cae:	801a      	strh	r2, [r3, #0]
 8011cb0:	187b      	adds	r3, r7, r1
 8011cb2:	881a      	ldrh	r2, [r3, #0]
 8011cb4:	2380      	movs	r3, #128	@ 0x80
 8011cb6:	01db      	lsls	r3, r3, #7
 8011cb8:	4013      	ands	r3, r2
 8011cba:	d016      	beq.n	8011cea <USB_ActivateEndpoint+0x34e>
 8011cbc:	687a      	ldr	r2, [r7, #4]
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	781b      	ldrb	r3, [r3, #0]
 8011cc2:	009b      	lsls	r3, r3, #2
 8011cc4:	18d3      	adds	r3, r2, r3
 8011cc6:	881b      	ldrh	r3, [r3, #0]
 8011cc8:	b29a      	uxth	r2, r3
 8011cca:	2020      	movs	r0, #32
 8011ccc:	183b      	adds	r3, r7, r0
 8011cce:	49dd      	ldr	r1, [pc, #884]	@ (8012044 <USB_ActivateEndpoint+0x6a8>)
 8011cd0:	400a      	ands	r2, r1
 8011cd2:	801a      	strh	r2, [r3, #0]
 8011cd4:	687a      	ldr	r2, [r7, #4]
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	781b      	ldrb	r3, [r3, #0]
 8011cda:	009b      	lsls	r3, r3, #2
 8011cdc:	18d3      	adds	r3, r2, r3
 8011cde:	183a      	adds	r2, r7, r0
 8011ce0:	8812      	ldrh	r2, [r2, #0]
 8011ce2:	49d9      	ldr	r1, [pc, #868]	@ (8012048 <USB_ActivateEndpoint+0x6ac>)
 8011ce4:	430a      	orrs	r2, r1
 8011ce6:	b292      	uxth	r2, r2
 8011ce8:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8011cea:	683b      	ldr	r3, [r7, #0]
 8011cec:	781b      	ldrb	r3, [r3, #0]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d125      	bne.n	8011d3e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011cf2:	687a      	ldr	r2, [r7, #4]
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	781b      	ldrb	r3, [r3, #0]
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	18d3      	adds	r3, r2, r3
 8011cfc:	881b      	ldrh	r3, [r3, #0]
 8011cfe:	b29a      	uxth	r2, r3
 8011d00:	201c      	movs	r0, #28
 8011d02:	183b      	adds	r3, r7, r0
 8011d04:	49d1      	ldr	r1, [pc, #836]	@ (801204c <USB_ActivateEndpoint+0x6b0>)
 8011d06:	400a      	ands	r2, r1
 8011d08:	801a      	strh	r2, [r3, #0]
 8011d0a:	183b      	adds	r3, r7, r0
 8011d0c:	183a      	adds	r2, r7, r0
 8011d0e:	8812      	ldrh	r2, [r2, #0]
 8011d10:	2180      	movs	r1, #128	@ 0x80
 8011d12:	0149      	lsls	r1, r1, #5
 8011d14:	404a      	eors	r2, r1
 8011d16:	801a      	strh	r2, [r3, #0]
 8011d18:	183b      	adds	r3, r7, r0
 8011d1a:	183a      	adds	r2, r7, r0
 8011d1c:	8812      	ldrh	r2, [r2, #0]
 8011d1e:	2180      	movs	r1, #128	@ 0x80
 8011d20:	0189      	lsls	r1, r1, #6
 8011d22:	404a      	eors	r2, r1
 8011d24:	801a      	strh	r2, [r3, #0]
 8011d26:	687a      	ldr	r2, [r7, #4]
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	781b      	ldrb	r3, [r3, #0]
 8011d2c:	009b      	lsls	r3, r3, #2
 8011d2e:	18d3      	adds	r3, r2, r3
 8011d30:	183a      	adds	r2, r7, r0
 8011d32:	8812      	ldrh	r2, [r2, #0]
 8011d34:	49c6      	ldr	r1, [pc, #792]	@ (8012050 <USB_ActivateEndpoint+0x6b4>)
 8011d36:	430a      	orrs	r2, r1
 8011d38:	b292      	uxth	r2, r2
 8011d3a:	801a      	strh	r2, [r3, #0]
 8011d3c:	e1c2      	b.n	80120c4 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8011d3e:	687a      	ldr	r2, [r7, #4]
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	781b      	ldrb	r3, [r3, #0]
 8011d44:	009b      	lsls	r3, r3, #2
 8011d46:	18d3      	adds	r3, r2, r3
 8011d48:	881b      	ldrh	r3, [r3, #0]
 8011d4a:	b29a      	uxth	r2, r3
 8011d4c:	201e      	movs	r0, #30
 8011d4e:	183b      	adds	r3, r7, r0
 8011d50:	49be      	ldr	r1, [pc, #760]	@ (801204c <USB_ActivateEndpoint+0x6b0>)
 8011d52:	400a      	ands	r2, r1
 8011d54:	801a      	strh	r2, [r3, #0]
 8011d56:	183b      	adds	r3, r7, r0
 8011d58:	183a      	adds	r2, r7, r0
 8011d5a:	8812      	ldrh	r2, [r2, #0]
 8011d5c:	2180      	movs	r1, #128	@ 0x80
 8011d5e:	0189      	lsls	r1, r1, #6
 8011d60:	404a      	eors	r2, r1
 8011d62:	801a      	strh	r2, [r3, #0]
 8011d64:	687a      	ldr	r2, [r7, #4]
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	009b      	lsls	r3, r3, #2
 8011d6c:	18d3      	adds	r3, r2, r3
 8011d6e:	183a      	adds	r2, r7, r0
 8011d70:	8812      	ldrh	r2, [r2, #0]
 8011d72:	49b7      	ldr	r1, [pc, #732]	@ (8012050 <USB_ActivateEndpoint+0x6b4>)
 8011d74:	430a      	orrs	r2, r1
 8011d76:	b292      	uxth	r2, r2
 8011d78:	801a      	strh	r2, [r3, #0]
 8011d7a:	e1a3      	b.n	80120c4 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8011d7c:	683b      	ldr	r3, [r7, #0]
 8011d7e:	78db      	ldrb	r3, [r3, #3]
 8011d80:	2b02      	cmp	r3, #2
 8011d82:	d117      	bne.n	8011db4 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011d84:	687a      	ldr	r2, [r7, #4]
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	781b      	ldrb	r3, [r3, #0]
 8011d8a:	009b      	lsls	r3, r3, #2
 8011d8c:	18d3      	adds	r3, r2, r3
 8011d8e:	881b      	ldrh	r3, [r3, #0]
 8011d90:	b29a      	uxth	r2, r3
 8011d92:	2062      	movs	r0, #98	@ 0x62
 8011d94:	183b      	adds	r3, r7, r0
 8011d96:	49ab      	ldr	r1, [pc, #684]	@ (8012044 <USB_ActivateEndpoint+0x6a8>)
 8011d98:	400a      	ands	r2, r1
 8011d9a:	801a      	strh	r2, [r3, #0]
 8011d9c:	687a      	ldr	r2, [r7, #4]
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	781b      	ldrb	r3, [r3, #0]
 8011da2:	009b      	lsls	r3, r3, #2
 8011da4:	18d3      	adds	r3, r2, r3
 8011da6:	183a      	adds	r2, r7, r0
 8011da8:	8812      	ldrh	r2, [r2, #0]
 8011daa:	49aa      	ldr	r1, [pc, #680]	@ (8012054 <USB_ActivateEndpoint+0x6b8>)
 8011dac:	430a      	orrs	r2, r1
 8011dae:	b292      	uxth	r2, r2
 8011db0:	801a      	strh	r2, [r3, #0]
 8011db2:	e016      	b.n	8011de2 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011db4:	687a      	ldr	r2, [r7, #4]
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	009b      	lsls	r3, r3, #2
 8011dbc:	18d3      	adds	r3, r2, r3
 8011dbe:	881b      	ldrh	r3, [r3, #0]
 8011dc0:	b29a      	uxth	r2, r3
 8011dc2:	2064      	movs	r0, #100	@ 0x64
 8011dc4:	183b      	adds	r3, r7, r0
 8011dc6:	49a4      	ldr	r1, [pc, #656]	@ (8012058 <USB_ActivateEndpoint+0x6bc>)
 8011dc8:	400a      	ands	r2, r1
 8011dca:	801a      	strh	r2, [r3, #0]
 8011dcc:	687a      	ldr	r2, [r7, #4]
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	781b      	ldrb	r3, [r3, #0]
 8011dd2:	009b      	lsls	r3, r3, #2
 8011dd4:	18d3      	adds	r3, r2, r3
 8011dd6:	183a      	adds	r2, r7, r0
 8011dd8:	8812      	ldrh	r2, [r2, #0]
 8011dda:	499d      	ldr	r1, [pc, #628]	@ (8012050 <USB_ActivateEndpoint+0x6b4>)
 8011ddc:	430a      	orrs	r2, r1
 8011dde:	b292      	uxth	r2, r2
 8011de0:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	2250      	movs	r2, #80	@ 0x50
 8011dea:	5a9b      	ldrh	r3, [r3, r2]
 8011dec:	b29b      	uxth	r3, r3
 8011dee:	001a      	movs	r2, r3
 8011df0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011df2:	189b      	adds	r3, r3, r2
 8011df4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	781b      	ldrb	r3, [r3, #0]
 8011dfa:	00da      	lsls	r2, r3, #3
 8011dfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011dfe:	18d3      	adds	r3, r2, r3
 8011e00:	2280      	movs	r2, #128	@ 0x80
 8011e02:	00d2      	lsls	r2, r2, #3
 8011e04:	4694      	mov	ip, r2
 8011e06:	4463      	add	r3, ip
 8011e08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	891b      	ldrh	r3, [r3, #8]
 8011e0e:	085b      	lsrs	r3, r3, #1
 8011e10:	b29b      	uxth	r3, r3
 8011e12:	18db      	adds	r3, r3, r3
 8011e14:	b29a      	uxth	r2, r3
 8011e16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011e18:	801a      	strh	r2, [r3, #0]
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	2250      	movs	r2, #80	@ 0x50
 8011e22:	5a9b      	ldrh	r3, [r3, r2]
 8011e24:	b29b      	uxth	r3, r3
 8011e26:	001a      	movs	r2, r3
 8011e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e2a:	189b      	adds	r3, r3, r2
 8011e2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	781b      	ldrb	r3, [r3, #0]
 8011e32:	00da      	lsls	r2, r3, #3
 8011e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e36:	18d3      	adds	r3, r2, r3
 8011e38:	4a88      	ldr	r2, [pc, #544]	@ (801205c <USB_ActivateEndpoint+0x6c0>)
 8011e3a:	4694      	mov	ip, r2
 8011e3c:	4463      	add	r3, ip
 8011e3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	895b      	ldrh	r3, [r3, #10]
 8011e44:	085b      	lsrs	r3, r3, #1
 8011e46:	b29b      	uxth	r3, r3
 8011e48:	18db      	adds	r3, r3, r3
 8011e4a:	b29a      	uxth	r2, r3
 8011e4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e4e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	785b      	ldrb	r3, [r3, #1]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d000      	beq.n	8011e5a <USB_ActivateEndpoint+0x4be>
 8011e58:	e087      	b.n	8011f6a <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011e5a:	687a      	ldr	r2, [r7, #4]
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	781b      	ldrb	r3, [r3, #0]
 8011e60:	009b      	lsls	r3, r3, #2
 8011e62:	18d2      	adds	r2, r2, r3
 8011e64:	2140      	movs	r1, #64	@ 0x40
 8011e66:	187b      	adds	r3, r7, r1
 8011e68:	8812      	ldrh	r2, [r2, #0]
 8011e6a:	801a      	strh	r2, [r3, #0]
 8011e6c:	187b      	adds	r3, r7, r1
 8011e6e:	881a      	ldrh	r2, [r3, #0]
 8011e70:	2380      	movs	r3, #128	@ 0x80
 8011e72:	01db      	lsls	r3, r3, #7
 8011e74:	4013      	ands	r3, r2
 8011e76:	d016      	beq.n	8011ea6 <USB_ActivateEndpoint+0x50a>
 8011e78:	687a      	ldr	r2, [r7, #4]
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	781b      	ldrb	r3, [r3, #0]
 8011e7e:	009b      	lsls	r3, r3, #2
 8011e80:	18d3      	adds	r3, r2, r3
 8011e82:	881b      	ldrh	r3, [r3, #0]
 8011e84:	b29a      	uxth	r2, r3
 8011e86:	203e      	movs	r0, #62	@ 0x3e
 8011e88:	183b      	adds	r3, r7, r0
 8011e8a:	496e      	ldr	r1, [pc, #440]	@ (8012044 <USB_ActivateEndpoint+0x6a8>)
 8011e8c:	400a      	ands	r2, r1
 8011e8e:	801a      	strh	r2, [r3, #0]
 8011e90:	687a      	ldr	r2, [r7, #4]
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	781b      	ldrb	r3, [r3, #0]
 8011e96:	009b      	lsls	r3, r3, #2
 8011e98:	18d3      	adds	r3, r2, r3
 8011e9a:	183a      	adds	r2, r7, r0
 8011e9c:	8812      	ldrh	r2, [r2, #0]
 8011e9e:	496a      	ldr	r1, [pc, #424]	@ (8012048 <USB_ActivateEndpoint+0x6ac>)
 8011ea0:	430a      	orrs	r2, r1
 8011ea2:	b292      	uxth	r2, r2
 8011ea4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011ea6:	687a      	ldr	r2, [r7, #4]
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	781b      	ldrb	r3, [r3, #0]
 8011eac:	009b      	lsls	r3, r3, #2
 8011eae:	18d2      	adds	r2, r2, r3
 8011eb0:	213c      	movs	r1, #60	@ 0x3c
 8011eb2:	187b      	adds	r3, r7, r1
 8011eb4:	8812      	ldrh	r2, [r2, #0]
 8011eb6:	801a      	strh	r2, [r3, #0]
 8011eb8:	187b      	adds	r3, r7, r1
 8011eba:	881b      	ldrh	r3, [r3, #0]
 8011ebc:	2240      	movs	r2, #64	@ 0x40
 8011ebe:	4013      	ands	r3, r2
 8011ec0:	d016      	beq.n	8011ef0 <USB_ActivateEndpoint+0x554>
 8011ec2:	687a      	ldr	r2, [r7, #4]
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	781b      	ldrb	r3, [r3, #0]
 8011ec8:	009b      	lsls	r3, r3, #2
 8011eca:	18d3      	adds	r3, r2, r3
 8011ecc:	881b      	ldrh	r3, [r3, #0]
 8011ece:	b29a      	uxth	r2, r3
 8011ed0:	203a      	movs	r0, #58	@ 0x3a
 8011ed2:	183b      	adds	r3, r7, r0
 8011ed4:	495b      	ldr	r1, [pc, #364]	@ (8012044 <USB_ActivateEndpoint+0x6a8>)
 8011ed6:	400a      	ands	r2, r1
 8011ed8:	801a      	strh	r2, [r3, #0]
 8011eda:	687a      	ldr	r2, [r7, #4]
 8011edc:	683b      	ldr	r3, [r7, #0]
 8011ede:	781b      	ldrb	r3, [r3, #0]
 8011ee0:	009b      	lsls	r3, r3, #2
 8011ee2:	18d3      	adds	r3, r2, r3
 8011ee4:	183a      	adds	r2, r7, r0
 8011ee6:	8812      	ldrh	r2, [r2, #0]
 8011ee8:	495d      	ldr	r1, [pc, #372]	@ (8012060 <USB_ActivateEndpoint+0x6c4>)
 8011eea:	430a      	orrs	r2, r1
 8011eec:	b292      	uxth	r2, r2
 8011eee:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011ef0:	687a      	ldr	r2, [r7, #4]
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	009b      	lsls	r3, r3, #2
 8011ef8:	18d3      	adds	r3, r2, r3
 8011efa:	881b      	ldrh	r3, [r3, #0]
 8011efc:	b29a      	uxth	r2, r3
 8011efe:	2038      	movs	r0, #56	@ 0x38
 8011f00:	183b      	adds	r3, r7, r0
 8011f02:	4952      	ldr	r1, [pc, #328]	@ (801204c <USB_ActivateEndpoint+0x6b0>)
 8011f04:	400a      	ands	r2, r1
 8011f06:	801a      	strh	r2, [r3, #0]
 8011f08:	183b      	adds	r3, r7, r0
 8011f0a:	183a      	adds	r2, r7, r0
 8011f0c:	8812      	ldrh	r2, [r2, #0]
 8011f0e:	2180      	movs	r1, #128	@ 0x80
 8011f10:	0149      	lsls	r1, r1, #5
 8011f12:	404a      	eors	r2, r1
 8011f14:	801a      	strh	r2, [r3, #0]
 8011f16:	183b      	adds	r3, r7, r0
 8011f18:	183a      	adds	r2, r7, r0
 8011f1a:	8812      	ldrh	r2, [r2, #0]
 8011f1c:	2180      	movs	r1, #128	@ 0x80
 8011f1e:	0189      	lsls	r1, r1, #6
 8011f20:	404a      	eors	r2, r1
 8011f22:	801a      	strh	r2, [r3, #0]
 8011f24:	687a      	ldr	r2, [r7, #4]
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	009b      	lsls	r3, r3, #2
 8011f2c:	18d3      	adds	r3, r2, r3
 8011f2e:	183a      	adds	r2, r7, r0
 8011f30:	8812      	ldrh	r2, [r2, #0]
 8011f32:	4947      	ldr	r1, [pc, #284]	@ (8012050 <USB_ActivateEndpoint+0x6b4>)
 8011f34:	430a      	orrs	r2, r1
 8011f36:	b292      	uxth	r2, r2
 8011f38:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011f3a:	687a      	ldr	r2, [r7, #4]
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	009b      	lsls	r3, r3, #2
 8011f42:	18d3      	adds	r3, r2, r3
 8011f44:	881b      	ldrh	r3, [r3, #0]
 8011f46:	b29a      	uxth	r2, r3
 8011f48:	2036      	movs	r0, #54	@ 0x36
 8011f4a:	183b      	adds	r3, r7, r0
 8011f4c:	4945      	ldr	r1, [pc, #276]	@ (8012064 <USB_ActivateEndpoint+0x6c8>)
 8011f4e:	400a      	ands	r2, r1
 8011f50:	801a      	strh	r2, [r3, #0]
 8011f52:	687a      	ldr	r2, [r7, #4]
 8011f54:	683b      	ldr	r3, [r7, #0]
 8011f56:	781b      	ldrb	r3, [r3, #0]
 8011f58:	009b      	lsls	r3, r3, #2
 8011f5a:	18d3      	adds	r3, r2, r3
 8011f5c:	183a      	adds	r2, r7, r0
 8011f5e:	8812      	ldrh	r2, [r2, #0]
 8011f60:	493b      	ldr	r1, [pc, #236]	@ (8012050 <USB_ActivateEndpoint+0x6b4>)
 8011f62:	430a      	orrs	r2, r1
 8011f64:	b292      	uxth	r2, r2
 8011f66:	801a      	strh	r2, [r3, #0]
 8011f68:	e0ac      	b.n	80120c4 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011f6a:	687a      	ldr	r2, [r7, #4]
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	781b      	ldrb	r3, [r3, #0]
 8011f70:	009b      	lsls	r3, r3, #2
 8011f72:	18d2      	adds	r2, r2, r3
 8011f74:	214e      	movs	r1, #78	@ 0x4e
 8011f76:	187b      	adds	r3, r7, r1
 8011f78:	8812      	ldrh	r2, [r2, #0]
 8011f7a:	801a      	strh	r2, [r3, #0]
 8011f7c:	187b      	adds	r3, r7, r1
 8011f7e:	881a      	ldrh	r2, [r3, #0]
 8011f80:	2380      	movs	r3, #128	@ 0x80
 8011f82:	01db      	lsls	r3, r3, #7
 8011f84:	4013      	ands	r3, r2
 8011f86:	d016      	beq.n	8011fb6 <USB_ActivateEndpoint+0x61a>
 8011f88:	687a      	ldr	r2, [r7, #4]
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	781b      	ldrb	r3, [r3, #0]
 8011f8e:	009b      	lsls	r3, r3, #2
 8011f90:	18d3      	adds	r3, r2, r3
 8011f92:	881b      	ldrh	r3, [r3, #0]
 8011f94:	b29a      	uxth	r2, r3
 8011f96:	204c      	movs	r0, #76	@ 0x4c
 8011f98:	183b      	adds	r3, r7, r0
 8011f9a:	492a      	ldr	r1, [pc, #168]	@ (8012044 <USB_ActivateEndpoint+0x6a8>)
 8011f9c:	400a      	ands	r2, r1
 8011f9e:	801a      	strh	r2, [r3, #0]
 8011fa0:	687a      	ldr	r2, [r7, #4]
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	781b      	ldrb	r3, [r3, #0]
 8011fa6:	009b      	lsls	r3, r3, #2
 8011fa8:	18d3      	adds	r3, r2, r3
 8011faa:	183a      	adds	r2, r7, r0
 8011fac:	8812      	ldrh	r2, [r2, #0]
 8011fae:	4926      	ldr	r1, [pc, #152]	@ (8012048 <USB_ActivateEndpoint+0x6ac>)
 8011fb0:	430a      	orrs	r2, r1
 8011fb2:	b292      	uxth	r2, r2
 8011fb4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011fb6:	687a      	ldr	r2, [r7, #4]
 8011fb8:	683b      	ldr	r3, [r7, #0]
 8011fba:	781b      	ldrb	r3, [r3, #0]
 8011fbc:	009b      	lsls	r3, r3, #2
 8011fbe:	18d2      	adds	r2, r2, r3
 8011fc0:	214a      	movs	r1, #74	@ 0x4a
 8011fc2:	187b      	adds	r3, r7, r1
 8011fc4:	8812      	ldrh	r2, [r2, #0]
 8011fc6:	801a      	strh	r2, [r3, #0]
 8011fc8:	187b      	adds	r3, r7, r1
 8011fca:	881b      	ldrh	r3, [r3, #0]
 8011fcc:	2240      	movs	r2, #64	@ 0x40
 8011fce:	4013      	ands	r3, r2
 8011fd0:	d016      	beq.n	8012000 <USB_ActivateEndpoint+0x664>
 8011fd2:	687a      	ldr	r2, [r7, #4]
 8011fd4:	683b      	ldr	r3, [r7, #0]
 8011fd6:	781b      	ldrb	r3, [r3, #0]
 8011fd8:	009b      	lsls	r3, r3, #2
 8011fda:	18d3      	adds	r3, r2, r3
 8011fdc:	881b      	ldrh	r3, [r3, #0]
 8011fde:	b29a      	uxth	r2, r3
 8011fe0:	2048      	movs	r0, #72	@ 0x48
 8011fe2:	183b      	adds	r3, r7, r0
 8011fe4:	4917      	ldr	r1, [pc, #92]	@ (8012044 <USB_ActivateEndpoint+0x6a8>)
 8011fe6:	400a      	ands	r2, r1
 8011fe8:	801a      	strh	r2, [r3, #0]
 8011fea:	687a      	ldr	r2, [r7, #4]
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	781b      	ldrb	r3, [r3, #0]
 8011ff0:	009b      	lsls	r3, r3, #2
 8011ff2:	18d3      	adds	r3, r2, r3
 8011ff4:	183a      	adds	r2, r7, r0
 8011ff6:	8812      	ldrh	r2, [r2, #0]
 8011ff8:	4919      	ldr	r1, [pc, #100]	@ (8012060 <USB_ActivateEndpoint+0x6c4>)
 8011ffa:	430a      	orrs	r2, r1
 8011ffc:	b292      	uxth	r2, r2
 8011ffe:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	78db      	ldrb	r3, [r3, #3]
 8012004:	2b01      	cmp	r3, #1
 8012006:	d02f      	beq.n	8012068 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012008:	687a      	ldr	r2, [r7, #4]
 801200a:	683b      	ldr	r3, [r7, #0]
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	009b      	lsls	r3, r3, #2
 8012010:	18d3      	adds	r3, r2, r3
 8012012:	881b      	ldrh	r3, [r3, #0]
 8012014:	b29a      	uxth	r2, r3
 8012016:	2044      	movs	r0, #68	@ 0x44
 8012018:	183b      	adds	r3, r7, r0
 801201a:	4912      	ldr	r1, [pc, #72]	@ (8012064 <USB_ActivateEndpoint+0x6c8>)
 801201c:	400a      	ands	r2, r1
 801201e:	801a      	strh	r2, [r3, #0]
 8012020:	183b      	adds	r3, r7, r0
 8012022:	183a      	adds	r2, r7, r0
 8012024:	8812      	ldrh	r2, [r2, #0]
 8012026:	2120      	movs	r1, #32
 8012028:	404a      	eors	r2, r1
 801202a:	801a      	strh	r2, [r3, #0]
 801202c:	687a      	ldr	r2, [r7, #4]
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	781b      	ldrb	r3, [r3, #0]
 8012032:	009b      	lsls	r3, r3, #2
 8012034:	18d3      	adds	r3, r2, r3
 8012036:	183a      	adds	r2, r7, r0
 8012038:	8812      	ldrh	r2, [r2, #0]
 801203a:	4905      	ldr	r1, [pc, #20]	@ (8012050 <USB_ActivateEndpoint+0x6b4>)
 801203c:	430a      	orrs	r2, r1
 801203e:	b292      	uxth	r2, r2
 8012040:	801a      	strh	r2, [r3, #0]
 8012042:	e028      	b.n	8012096 <USB_ActivateEndpoint+0x6fa>
 8012044:	ffff8f8f 	.word	0xffff8f8f
 8012048:	ffffc080 	.word	0xffffc080
 801204c:	ffffbf8f 	.word	0xffffbf8f
 8012050:	ffff8080 	.word	0xffff8080
 8012054:	ffff8180 	.word	0xffff8180
 8012058:	ffff8e8f 	.word	0xffff8e8f
 801205c:	00000404 	.word	0x00000404
 8012060:	ffff80c0 	.word	0xffff80c0
 8012064:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012068:	687a      	ldr	r2, [r7, #4]
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	781b      	ldrb	r3, [r3, #0]
 801206e:	009b      	lsls	r3, r3, #2
 8012070:	18d3      	adds	r3, r2, r3
 8012072:	881b      	ldrh	r3, [r3, #0]
 8012074:	b29a      	uxth	r2, r3
 8012076:	2046      	movs	r0, #70	@ 0x46
 8012078:	183b      	adds	r3, r7, r0
 801207a:	4916      	ldr	r1, [pc, #88]	@ (80120d4 <USB_ActivateEndpoint+0x738>)
 801207c:	400a      	ands	r2, r1
 801207e:	801a      	strh	r2, [r3, #0]
 8012080:	687a      	ldr	r2, [r7, #4]
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	781b      	ldrb	r3, [r3, #0]
 8012086:	009b      	lsls	r3, r3, #2
 8012088:	18d3      	adds	r3, r2, r3
 801208a:	183a      	adds	r2, r7, r0
 801208c:	8812      	ldrh	r2, [r2, #0]
 801208e:	4912      	ldr	r1, [pc, #72]	@ (80120d8 <USB_ActivateEndpoint+0x73c>)
 8012090:	430a      	orrs	r2, r1
 8012092:	b292      	uxth	r2, r2
 8012094:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	781b      	ldrb	r3, [r3, #0]
 801209c:	009b      	lsls	r3, r3, #2
 801209e:	18d3      	adds	r3, r2, r3
 80120a0:	881b      	ldrh	r3, [r3, #0]
 80120a2:	b29a      	uxth	r2, r3
 80120a4:	2042      	movs	r0, #66	@ 0x42
 80120a6:	183b      	adds	r3, r7, r0
 80120a8:	490c      	ldr	r1, [pc, #48]	@ (80120dc <USB_ActivateEndpoint+0x740>)
 80120aa:	400a      	ands	r2, r1
 80120ac:	801a      	strh	r2, [r3, #0]
 80120ae:	687a      	ldr	r2, [r7, #4]
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	781b      	ldrb	r3, [r3, #0]
 80120b4:	009b      	lsls	r3, r3, #2
 80120b6:	18d3      	adds	r3, r2, r3
 80120b8:	183a      	adds	r2, r7, r0
 80120ba:	8812      	ldrh	r2, [r2, #0]
 80120bc:	4906      	ldr	r1, [pc, #24]	@ (80120d8 <USB_ActivateEndpoint+0x73c>)
 80120be:	430a      	orrs	r2, r1
 80120c0:	b292      	uxth	r2, r2
 80120c2:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80120c4:	236f      	movs	r3, #111	@ 0x6f
 80120c6:	18fb      	adds	r3, r7, r3
 80120c8:	781b      	ldrb	r3, [r3, #0]
}
 80120ca:	0018      	movs	r0, r3
 80120cc:	46bd      	mov	sp, r7
 80120ce:	b01c      	add	sp, #112	@ 0x70
 80120d0:	bd80      	pop	{r7, pc}
 80120d2:	46c0      	nop			@ (mov r8, r8)
 80120d4:	ffff8fbf 	.word	0xffff8fbf
 80120d8:	ffff8080 	.word	0xffff8080
 80120dc:	ffffbf8f 	.word	0xffffbf8f

080120e0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b08c      	sub	sp, #48	@ 0x30
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	7b1b      	ldrb	r3, [r3, #12]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d000      	beq.n	80120f4 <USB_DeactivateEndpoint+0x14>
 80120f2:	e07e      	b.n	80121f2 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	785b      	ldrb	r3, [r3, #1]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d03c      	beq.n	8012176 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80120fc:	687a      	ldr	r2, [r7, #4]
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	781b      	ldrb	r3, [r3, #0]
 8012102:	009b      	lsls	r3, r3, #2
 8012104:	18d2      	adds	r2, r2, r3
 8012106:	210c      	movs	r1, #12
 8012108:	187b      	adds	r3, r7, r1
 801210a:	8812      	ldrh	r2, [r2, #0]
 801210c:	801a      	strh	r2, [r3, #0]
 801210e:	187b      	adds	r3, r7, r1
 8012110:	881b      	ldrh	r3, [r3, #0]
 8012112:	2240      	movs	r2, #64	@ 0x40
 8012114:	4013      	ands	r3, r2
 8012116:	d016      	beq.n	8012146 <USB_DeactivateEndpoint+0x66>
 8012118:	687a      	ldr	r2, [r7, #4]
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	781b      	ldrb	r3, [r3, #0]
 801211e:	009b      	lsls	r3, r3, #2
 8012120:	18d3      	adds	r3, r2, r3
 8012122:	881b      	ldrh	r3, [r3, #0]
 8012124:	b29a      	uxth	r2, r3
 8012126:	200a      	movs	r0, #10
 8012128:	183b      	adds	r3, r7, r0
 801212a:	49c7      	ldr	r1, [pc, #796]	@ (8012448 <USB_DeactivateEndpoint+0x368>)
 801212c:	400a      	ands	r2, r1
 801212e:	801a      	strh	r2, [r3, #0]
 8012130:	687a      	ldr	r2, [r7, #4]
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	781b      	ldrb	r3, [r3, #0]
 8012136:	009b      	lsls	r3, r3, #2
 8012138:	18d3      	adds	r3, r2, r3
 801213a:	183a      	adds	r2, r7, r0
 801213c:	8812      	ldrh	r2, [r2, #0]
 801213e:	49c3      	ldr	r1, [pc, #780]	@ (801244c <USB_DeactivateEndpoint+0x36c>)
 8012140:	430a      	orrs	r2, r1
 8012142:	b292      	uxth	r2, r2
 8012144:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012146:	687a      	ldr	r2, [r7, #4]
 8012148:	683b      	ldr	r3, [r7, #0]
 801214a:	781b      	ldrb	r3, [r3, #0]
 801214c:	009b      	lsls	r3, r3, #2
 801214e:	18d3      	adds	r3, r2, r3
 8012150:	881b      	ldrh	r3, [r3, #0]
 8012152:	b29a      	uxth	r2, r3
 8012154:	2008      	movs	r0, #8
 8012156:	183b      	adds	r3, r7, r0
 8012158:	49bd      	ldr	r1, [pc, #756]	@ (8012450 <USB_DeactivateEndpoint+0x370>)
 801215a:	400a      	ands	r2, r1
 801215c:	801a      	strh	r2, [r3, #0]
 801215e:	687a      	ldr	r2, [r7, #4]
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	781b      	ldrb	r3, [r3, #0]
 8012164:	009b      	lsls	r3, r3, #2
 8012166:	18d3      	adds	r3, r2, r3
 8012168:	183a      	adds	r2, r7, r0
 801216a:	8812      	ldrh	r2, [r2, #0]
 801216c:	49b9      	ldr	r1, [pc, #740]	@ (8012454 <USB_DeactivateEndpoint+0x374>)
 801216e:	430a      	orrs	r2, r1
 8012170:	b292      	uxth	r2, r2
 8012172:	801a      	strh	r2, [r3, #0]
 8012174:	e163      	b.n	801243e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012176:	687a      	ldr	r2, [r7, #4]
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	781b      	ldrb	r3, [r3, #0]
 801217c:	009b      	lsls	r3, r3, #2
 801217e:	18d2      	adds	r2, r2, r3
 8012180:	2112      	movs	r1, #18
 8012182:	187b      	adds	r3, r7, r1
 8012184:	8812      	ldrh	r2, [r2, #0]
 8012186:	801a      	strh	r2, [r3, #0]
 8012188:	187b      	adds	r3, r7, r1
 801218a:	881a      	ldrh	r2, [r3, #0]
 801218c:	2380      	movs	r3, #128	@ 0x80
 801218e:	01db      	lsls	r3, r3, #7
 8012190:	4013      	ands	r3, r2
 8012192:	d016      	beq.n	80121c2 <USB_DeactivateEndpoint+0xe2>
 8012194:	687a      	ldr	r2, [r7, #4]
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	781b      	ldrb	r3, [r3, #0]
 801219a:	009b      	lsls	r3, r3, #2
 801219c:	18d3      	adds	r3, r2, r3
 801219e:	881b      	ldrh	r3, [r3, #0]
 80121a0:	b29a      	uxth	r2, r3
 80121a2:	2010      	movs	r0, #16
 80121a4:	183b      	adds	r3, r7, r0
 80121a6:	49a8      	ldr	r1, [pc, #672]	@ (8012448 <USB_DeactivateEndpoint+0x368>)
 80121a8:	400a      	ands	r2, r1
 80121aa:	801a      	strh	r2, [r3, #0]
 80121ac:	687a      	ldr	r2, [r7, #4]
 80121ae:	683b      	ldr	r3, [r7, #0]
 80121b0:	781b      	ldrb	r3, [r3, #0]
 80121b2:	009b      	lsls	r3, r3, #2
 80121b4:	18d3      	adds	r3, r2, r3
 80121b6:	183a      	adds	r2, r7, r0
 80121b8:	8812      	ldrh	r2, [r2, #0]
 80121ba:	49a7      	ldr	r1, [pc, #668]	@ (8012458 <USB_DeactivateEndpoint+0x378>)
 80121bc:	430a      	orrs	r2, r1
 80121be:	b292      	uxth	r2, r2
 80121c0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80121c2:	687a      	ldr	r2, [r7, #4]
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	781b      	ldrb	r3, [r3, #0]
 80121c8:	009b      	lsls	r3, r3, #2
 80121ca:	18d3      	adds	r3, r2, r3
 80121cc:	881b      	ldrh	r3, [r3, #0]
 80121ce:	b29a      	uxth	r2, r3
 80121d0:	200e      	movs	r0, #14
 80121d2:	183b      	adds	r3, r7, r0
 80121d4:	49a1      	ldr	r1, [pc, #644]	@ (801245c <USB_DeactivateEndpoint+0x37c>)
 80121d6:	400a      	ands	r2, r1
 80121d8:	801a      	strh	r2, [r3, #0]
 80121da:	687a      	ldr	r2, [r7, #4]
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	781b      	ldrb	r3, [r3, #0]
 80121e0:	009b      	lsls	r3, r3, #2
 80121e2:	18d3      	adds	r3, r2, r3
 80121e4:	183a      	adds	r2, r7, r0
 80121e6:	8812      	ldrh	r2, [r2, #0]
 80121e8:	499a      	ldr	r1, [pc, #616]	@ (8012454 <USB_DeactivateEndpoint+0x374>)
 80121ea:	430a      	orrs	r2, r1
 80121ec:	b292      	uxth	r2, r2
 80121ee:	801a      	strh	r2, [r3, #0]
 80121f0:	e125      	b.n	801243e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	785b      	ldrb	r3, [r3, #1]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d000      	beq.n	80121fc <USB_DeactivateEndpoint+0x11c>
 80121fa:	e090      	b.n	801231e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80121fc:	687a      	ldr	r2, [r7, #4]
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	009b      	lsls	r3, r3, #2
 8012204:	18d2      	adds	r2, r2, r3
 8012206:	2120      	movs	r1, #32
 8012208:	187b      	adds	r3, r7, r1
 801220a:	8812      	ldrh	r2, [r2, #0]
 801220c:	801a      	strh	r2, [r3, #0]
 801220e:	187b      	adds	r3, r7, r1
 8012210:	881a      	ldrh	r2, [r3, #0]
 8012212:	2380      	movs	r3, #128	@ 0x80
 8012214:	01db      	lsls	r3, r3, #7
 8012216:	4013      	ands	r3, r2
 8012218:	d016      	beq.n	8012248 <USB_DeactivateEndpoint+0x168>
 801221a:	687a      	ldr	r2, [r7, #4]
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	781b      	ldrb	r3, [r3, #0]
 8012220:	009b      	lsls	r3, r3, #2
 8012222:	18d3      	adds	r3, r2, r3
 8012224:	881b      	ldrh	r3, [r3, #0]
 8012226:	b29a      	uxth	r2, r3
 8012228:	201e      	movs	r0, #30
 801222a:	183b      	adds	r3, r7, r0
 801222c:	4986      	ldr	r1, [pc, #536]	@ (8012448 <USB_DeactivateEndpoint+0x368>)
 801222e:	400a      	ands	r2, r1
 8012230:	801a      	strh	r2, [r3, #0]
 8012232:	687a      	ldr	r2, [r7, #4]
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	781b      	ldrb	r3, [r3, #0]
 8012238:	009b      	lsls	r3, r3, #2
 801223a:	18d3      	adds	r3, r2, r3
 801223c:	183a      	adds	r2, r7, r0
 801223e:	8812      	ldrh	r2, [r2, #0]
 8012240:	4985      	ldr	r1, [pc, #532]	@ (8012458 <USB_DeactivateEndpoint+0x378>)
 8012242:	430a      	orrs	r2, r1
 8012244:	b292      	uxth	r2, r2
 8012246:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012248:	687a      	ldr	r2, [r7, #4]
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	009b      	lsls	r3, r3, #2
 8012250:	18d2      	adds	r2, r2, r3
 8012252:	211c      	movs	r1, #28
 8012254:	187b      	adds	r3, r7, r1
 8012256:	8812      	ldrh	r2, [r2, #0]
 8012258:	801a      	strh	r2, [r3, #0]
 801225a:	187b      	adds	r3, r7, r1
 801225c:	881b      	ldrh	r3, [r3, #0]
 801225e:	2240      	movs	r2, #64	@ 0x40
 8012260:	4013      	ands	r3, r2
 8012262:	d016      	beq.n	8012292 <USB_DeactivateEndpoint+0x1b2>
 8012264:	687a      	ldr	r2, [r7, #4]
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	781b      	ldrb	r3, [r3, #0]
 801226a:	009b      	lsls	r3, r3, #2
 801226c:	18d3      	adds	r3, r2, r3
 801226e:	881b      	ldrh	r3, [r3, #0]
 8012270:	b29a      	uxth	r2, r3
 8012272:	201a      	movs	r0, #26
 8012274:	183b      	adds	r3, r7, r0
 8012276:	4974      	ldr	r1, [pc, #464]	@ (8012448 <USB_DeactivateEndpoint+0x368>)
 8012278:	400a      	ands	r2, r1
 801227a:	801a      	strh	r2, [r3, #0]
 801227c:	687a      	ldr	r2, [r7, #4]
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	781b      	ldrb	r3, [r3, #0]
 8012282:	009b      	lsls	r3, r3, #2
 8012284:	18d3      	adds	r3, r2, r3
 8012286:	183a      	adds	r2, r7, r0
 8012288:	8812      	ldrh	r2, [r2, #0]
 801228a:	4970      	ldr	r1, [pc, #448]	@ (801244c <USB_DeactivateEndpoint+0x36c>)
 801228c:	430a      	orrs	r2, r1
 801228e:	b292      	uxth	r2, r2
 8012290:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8012292:	687a      	ldr	r2, [r7, #4]
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	781b      	ldrb	r3, [r3, #0]
 8012298:	009b      	lsls	r3, r3, #2
 801229a:	18d3      	adds	r3, r2, r3
 801229c:	881b      	ldrh	r3, [r3, #0]
 801229e:	b29a      	uxth	r2, r3
 80122a0:	2018      	movs	r0, #24
 80122a2:	183b      	adds	r3, r7, r0
 80122a4:	4968      	ldr	r1, [pc, #416]	@ (8012448 <USB_DeactivateEndpoint+0x368>)
 80122a6:	400a      	ands	r2, r1
 80122a8:	801a      	strh	r2, [r3, #0]
 80122aa:	687a      	ldr	r2, [r7, #4]
 80122ac:	683b      	ldr	r3, [r7, #0]
 80122ae:	781b      	ldrb	r3, [r3, #0]
 80122b0:	009b      	lsls	r3, r3, #2
 80122b2:	18d3      	adds	r3, r2, r3
 80122b4:	183a      	adds	r2, r7, r0
 80122b6:	8812      	ldrh	r2, [r2, #0]
 80122b8:	4964      	ldr	r1, [pc, #400]	@ (801244c <USB_DeactivateEndpoint+0x36c>)
 80122ba:	430a      	orrs	r2, r1
 80122bc:	b292      	uxth	r2, r2
 80122be:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80122c0:	687a      	ldr	r2, [r7, #4]
 80122c2:	683b      	ldr	r3, [r7, #0]
 80122c4:	781b      	ldrb	r3, [r3, #0]
 80122c6:	009b      	lsls	r3, r3, #2
 80122c8:	18d3      	adds	r3, r2, r3
 80122ca:	881b      	ldrh	r3, [r3, #0]
 80122cc:	b29a      	uxth	r2, r3
 80122ce:	2016      	movs	r0, #22
 80122d0:	183b      	adds	r3, r7, r0
 80122d2:	4962      	ldr	r1, [pc, #392]	@ (801245c <USB_DeactivateEndpoint+0x37c>)
 80122d4:	400a      	ands	r2, r1
 80122d6:	801a      	strh	r2, [r3, #0]
 80122d8:	687a      	ldr	r2, [r7, #4]
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	781b      	ldrb	r3, [r3, #0]
 80122de:	009b      	lsls	r3, r3, #2
 80122e0:	18d3      	adds	r3, r2, r3
 80122e2:	183a      	adds	r2, r7, r0
 80122e4:	8812      	ldrh	r2, [r2, #0]
 80122e6:	495b      	ldr	r1, [pc, #364]	@ (8012454 <USB_DeactivateEndpoint+0x374>)
 80122e8:	430a      	orrs	r2, r1
 80122ea:	b292      	uxth	r2, r2
 80122ec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	781b      	ldrb	r3, [r3, #0]
 80122f4:	009b      	lsls	r3, r3, #2
 80122f6:	18d3      	adds	r3, r2, r3
 80122f8:	881b      	ldrh	r3, [r3, #0]
 80122fa:	b29a      	uxth	r2, r3
 80122fc:	2014      	movs	r0, #20
 80122fe:	183b      	adds	r3, r7, r0
 8012300:	4953      	ldr	r1, [pc, #332]	@ (8012450 <USB_DeactivateEndpoint+0x370>)
 8012302:	400a      	ands	r2, r1
 8012304:	801a      	strh	r2, [r3, #0]
 8012306:	687a      	ldr	r2, [r7, #4]
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	781b      	ldrb	r3, [r3, #0]
 801230c:	009b      	lsls	r3, r3, #2
 801230e:	18d3      	adds	r3, r2, r3
 8012310:	183a      	adds	r2, r7, r0
 8012312:	8812      	ldrh	r2, [r2, #0]
 8012314:	494f      	ldr	r1, [pc, #316]	@ (8012454 <USB_DeactivateEndpoint+0x374>)
 8012316:	430a      	orrs	r2, r1
 8012318:	b292      	uxth	r2, r2
 801231a:	801a      	strh	r2, [r3, #0]
 801231c:	e08f      	b.n	801243e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801231e:	687a      	ldr	r2, [r7, #4]
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	781b      	ldrb	r3, [r3, #0]
 8012324:	009b      	lsls	r3, r3, #2
 8012326:	18d2      	adds	r2, r2, r3
 8012328:	212e      	movs	r1, #46	@ 0x2e
 801232a:	187b      	adds	r3, r7, r1
 801232c:	8812      	ldrh	r2, [r2, #0]
 801232e:	801a      	strh	r2, [r3, #0]
 8012330:	187b      	adds	r3, r7, r1
 8012332:	881a      	ldrh	r2, [r3, #0]
 8012334:	2380      	movs	r3, #128	@ 0x80
 8012336:	01db      	lsls	r3, r3, #7
 8012338:	4013      	ands	r3, r2
 801233a:	d016      	beq.n	801236a <USB_DeactivateEndpoint+0x28a>
 801233c:	687a      	ldr	r2, [r7, #4]
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	009b      	lsls	r3, r3, #2
 8012344:	18d3      	adds	r3, r2, r3
 8012346:	881b      	ldrh	r3, [r3, #0]
 8012348:	b29a      	uxth	r2, r3
 801234a:	202c      	movs	r0, #44	@ 0x2c
 801234c:	183b      	adds	r3, r7, r0
 801234e:	493e      	ldr	r1, [pc, #248]	@ (8012448 <USB_DeactivateEndpoint+0x368>)
 8012350:	400a      	ands	r2, r1
 8012352:	801a      	strh	r2, [r3, #0]
 8012354:	687a      	ldr	r2, [r7, #4]
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	781b      	ldrb	r3, [r3, #0]
 801235a:	009b      	lsls	r3, r3, #2
 801235c:	18d3      	adds	r3, r2, r3
 801235e:	183a      	adds	r2, r7, r0
 8012360:	8812      	ldrh	r2, [r2, #0]
 8012362:	493d      	ldr	r1, [pc, #244]	@ (8012458 <USB_DeactivateEndpoint+0x378>)
 8012364:	430a      	orrs	r2, r1
 8012366:	b292      	uxth	r2, r2
 8012368:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801236a:	687a      	ldr	r2, [r7, #4]
 801236c:	683b      	ldr	r3, [r7, #0]
 801236e:	781b      	ldrb	r3, [r3, #0]
 8012370:	009b      	lsls	r3, r3, #2
 8012372:	18d2      	adds	r2, r2, r3
 8012374:	212a      	movs	r1, #42	@ 0x2a
 8012376:	187b      	adds	r3, r7, r1
 8012378:	8812      	ldrh	r2, [r2, #0]
 801237a:	801a      	strh	r2, [r3, #0]
 801237c:	187b      	adds	r3, r7, r1
 801237e:	881b      	ldrh	r3, [r3, #0]
 8012380:	2240      	movs	r2, #64	@ 0x40
 8012382:	4013      	ands	r3, r2
 8012384:	d016      	beq.n	80123b4 <USB_DeactivateEndpoint+0x2d4>
 8012386:	687a      	ldr	r2, [r7, #4]
 8012388:	683b      	ldr	r3, [r7, #0]
 801238a:	781b      	ldrb	r3, [r3, #0]
 801238c:	009b      	lsls	r3, r3, #2
 801238e:	18d3      	adds	r3, r2, r3
 8012390:	881b      	ldrh	r3, [r3, #0]
 8012392:	b29a      	uxth	r2, r3
 8012394:	2028      	movs	r0, #40	@ 0x28
 8012396:	183b      	adds	r3, r7, r0
 8012398:	492b      	ldr	r1, [pc, #172]	@ (8012448 <USB_DeactivateEndpoint+0x368>)
 801239a:	400a      	ands	r2, r1
 801239c:	801a      	strh	r2, [r3, #0]
 801239e:	687a      	ldr	r2, [r7, #4]
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	781b      	ldrb	r3, [r3, #0]
 80123a4:	009b      	lsls	r3, r3, #2
 80123a6:	18d3      	adds	r3, r2, r3
 80123a8:	183a      	adds	r2, r7, r0
 80123aa:	8812      	ldrh	r2, [r2, #0]
 80123ac:	4927      	ldr	r1, [pc, #156]	@ (801244c <USB_DeactivateEndpoint+0x36c>)
 80123ae:	430a      	orrs	r2, r1
 80123b0:	b292      	uxth	r2, r2
 80123b2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80123b4:	687a      	ldr	r2, [r7, #4]
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	781b      	ldrb	r3, [r3, #0]
 80123ba:	009b      	lsls	r3, r3, #2
 80123bc:	18d3      	adds	r3, r2, r3
 80123be:	881b      	ldrh	r3, [r3, #0]
 80123c0:	b29a      	uxth	r2, r3
 80123c2:	2026      	movs	r0, #38	@ 0x26
 80123c4:	183b      	adds	r3, r7, r0
 80123c6:	4920      	ldr	r1, [pc, #128]	@ (8012448 <USB_DeactivateEndpoint+0x368>)
 80123c8:	400a      	ands	r2, r1
 80123ca:	801a      	strh	r2, [r3, #0]
 80123cc:	687a      	ldr	r2, [r7, #4]
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	009b      	lsls	r3, r3, #2
 80123d4:	18d3      	adds	r3, r2, r3
 80123d6:	183a      	adds	r2, r7, r0
 80123d8:	8812      	ldrh	r2, [r2, #0]
 80123da:	491f      	ldr	r1, [pc, #124]	@ (8012458 <USB_DeactivateEndpoint+0x378>)
 80123dc:	430a      	orrs	r2, r1
 80123de:	b292      	uxth	r2, r2
 80123e0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80123e2:	687a      	ldr	r2, [r7, #4]
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	009b      	lsls	r3, r3, #2
 80123ea:	18d3      	adds	r3, r2, r3
 80123ec:	881b      	ldrh	r3, [r3, #0]
 80123ee:	b29a      	uxth	r2, r3
 80123f0:	2024      	movs	r0, #36	@ 0x24
 80123f2:	183b      	adds	r3, r7, r0
 80123f4:	4916      	ldr	r1, [pc, #88]	@ (8012450 <USB_DeactivateEndpoint+0x370>)
 80123f6:	400a      	ands	r2, r1
 80123f8:	801a      	strh	r2, [r3, #0]
 80123fa:	687a      	ldr	r2, [r7, #4]
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	009b      	lsls	r3, r3, #2
 8012402:	18d3      	adds	r3, r2, r3
 8012404:	183a      	adds	r2, r7, r0
 8012406:	8812      	ldrh	r2, [r2, #0]
 8012408:	4912      	ldr	r1, [pc, #72]	@ (8012454 <USB_DeactivateEndpoint+0x374>)
 801240a:	430a      	orrs	r2, r1
 801240c:	b292      	uxth	r2, r2
 801240e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012410:	687a      	ldr	r2, [r7, #4]
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	781b      	ldrb	r3, [r3, #0]
 8012416:	009b      	lsls	r3, r3, #2
 8012418:	18d3      	adds	r3, r2, r3
 801241a:	881b      	ldrh	r3, [r3, #0]
 801241c:	b29a      	uxth	r2, r3
 801241e:	2022      	movs	r0, #34	@ 0x22
 8012420:	183b      	adds	r3, r7, r0
 8012422:	490e      	ldr	r1, [pc, #56]	@ (801245c <USB_DeactivateEndpoint+0x37c>)
 8012424:	400a      	ands	r2, r1
 8012426:	801a      	strh	r2, [r3, #0]
 8012428:	687a      	ldr	r2, [r7, #4]
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	781b      	ldrb	r3, [r3, #0]
 801242e:	009b      	lsls	r3, r3, #2
 8012430:	18d3      	adds	r3, r2, r3
 8012432:	183a      	adds	r2, r7, r0
 8012434:	8812      	ldrh	r2, [r2, #0]
 8012436:	4907      	ldr	r1, [pc, #28]	@ (8012454 <USB_DeactivateEndpoint+0x374>)
 8012438:	430a      	orrs	r2, r1
 801243a:	b292      	uxth	r2, r2
 801243c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801243e:	2300      	movs	r3, #0
}
 8012440:	0018      	movs	r0, r3
 8012442:	46bd      	mov	sp, r7
 8012444:	b00c      	add	sp, #48	@ 0x30
 8012446:	bd80      	pop	{r7, pc}
 8012448:	ffff8f8f 	.word	0xffff8f8f
 801244c:	ffff80c0 	.word	0xffff80c0
 8012450:	ffff8fbf 	.word	0xffff8fbf
 8012454:	ffff8080 	.word	0xffff8080
 8012458:	ffffc080 	.word	0xffffc080
 801245c:	ffffbf8f 	.word	0xffffbf8f

08012460 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012460:	b590      	push	{r4, r7, lr}
 8012462:	b0c3      	sub	sp, #268	@ 0x10c
 8012464:	af00      	add	r7, sp, #0
 8012466:	6078      	str	r0, [r7, #4]
 8012468:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	785b      	ldrb	r3, [r3, #1]
 801246e:	2b01      	cmp	r3, #1
 8012470:	d001      	beq.n	8012476 <USB_EPStartXfer+0x16>
 8012472:	f000 fd2d 	bl	8012ed0 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8012476:	683b      	ldr	r3, [r7, #0]
 8012478:	699a      	ldr	r2, [r3, #24]
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	691b      	ldr	r3, [r3, #16]
 801247e:	429a      	cmp	r2, r3
 8012480:	d905      	bls.n	801248e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	691b      	ldr	r3, [r3, #16]
 8012486:	1d7a      	adds	r2, r7, #5
 8012488:	32ff      	adds	r2, #255	@ 0xff
 801248a:	6013      	str	r3, [r2, #0]
 801248c:	e004      	b.n	8012498 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	699b      	ldr	r3, [r3, #24]
 8012492:	1d7a      	adds	r2, r7, #5
 8012494:	32ff      	adds	r2, #255	@ 0xff
 8012496:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	7b1b      	ldrb	r3, [r3, #12]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d125      	bne.n	80124ec <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	6959      	ldr	r1, [r3, #20]
 80124a4:	683b      	ldr	r3, [r7, #0]
 80124a6:	88da      	ldrh	r2, [r3, #6]
 80124a8:	1d7b      	adds	r3, r7, #5
 80124aa:	33ff      	adds	r3, #255	@ 0xff
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	b29b      	uxth	r3, r3
 80124b0:	6878      	ldr	r0, [r7, #4]
 80124b2:	f001 fa47 	bl	8013944 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	613b      	str	r3, [r7, #16]
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2250      	movs	r2, #80	@ 0x50
 80124be:	5a9b      	ldrh	r3, [r3, r2]
 80124c0:	b29b      	uxth	r3, r3
 80124c2:	001a      	movs	r2, r3
 80124c4:	693b      	ldr	r3, [r7, #16]
 80124c6:	189b      	adds	r3, r3, r2
 80124c8:	613b      	str	r3, [r7, #16]
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	00da      	lsls	r2, r3, #3
 80124d0:	693b      	ldr	r3, [r7, #16]
 80124d2:	18d3      	adds	r3, r2, r3
 80124d4:	4ad7      	ldr	r2, [pc, #860]	@ (8012834 <USB_EPStartXfer+0x3d4>)
 80124d6:	4694      	mov	ip, r2
 80124d8:	4463      	add	r3, ip
 80124da:	60fb      	str	r3, [r7, #12]
 80124dc:	1d7b      	adds	r3, r7, #5
 80124de:	33ff      	adds	r3, #255	@ 0xff
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	b29a      	uxth	r2, r3
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	801a      	strh	r2, [r3, #0]
 80124e8:	f000 fccd 	bl	8012e86 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	78db      	ldrb	r3, [r3, #3]
 80124f0:	2b02      	cmp	r3, #2
 80124f2:	d000      	beq.n	80124f6 <USB_EPStartXfer+0x96>
 80124f4:	e362      	b.n	8012bbc <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	6a1a      	ldr	r2, [r3, #32]
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	691b      	ldr	r3, [r3, #16]
 80124fe:	429a      	cmp	r2, r3
 8012500:	d800      	bhi.n	8012504 <USB_EPStartXfer+0xa4>
 8012502:	e309      	b.n	8012b18 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8012504:	687a      	ldr	r2, [r7, #4]
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	009b      	lsls	r3, r3, #2
 801250c:	18d3      	adds	r3, r2, r3
 801250e:	881b      	ldrh	r3, [r3, #0]
 8012510:	b29a      	uxth	r2, r3
 8012512:	2056      	movs	r0, #86	@ 0x56
 8012514:	183b      	adds	r3, r7, r0
 8012516:	49c8      	ldr	r1, [pc, #800]	@ (8012838 <USB_EPStartXfer+0x3d8>)
 8012518:	400a      	ands	r2, r1
 801251a:	801a      	strh	r2, [r3, #0]
 801251c:	687a      	ldr	r2, [r7, #4]
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	781b      	ldrb	r3, [r3, #0]
 8012522:	009b      	lsls	r3, r3, #2
 8012524:	18d3      	adds	r3, r2, r3
 8012526:	183a      	adds	r2, r7, r0
 8012528:	8812      	ldrh	r2, [r2, #0]
 801252a:	49c4      	ldr	r1, [pc, #784]	@ (801283c <USB_EPStartXfer+0x3dc>)
 801252c:	430a      	orrs	r2, r1
 801252e:	b292      	uxth	r2, r2
 8012530:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	6a1a      	ldr	r2, [r3, #32]
 8012536:	1d7b      	adds	r3, r7, #5
 8012538:	33ff      	adds	r3, #255	@ 0xff
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	1ad2      	subs	r2, r2, r3
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012542:	687a      	ldr	r2, [r7, #4]
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	781b      	ldrb	r3, [r3, #0]
 8012548:	009b      	lsls	r3, r3, #2
 801254a:	18d3      	adds	r3, r2, r3
 801254c:	881b      	ldrh	r3, [r3, #0]
 801254e:	b29b      	uxth	r3, r3
 8012550:	001a      	movs	r2, r3
 8012552:	2340      	movs	r3, #64	@ 0x40
 8012554:	4013      	ands	r3, r2
 8012556:	d100      	bne.n	801255a <USB_EPStartXfer+0xfa>
 8012558:	e176      	b.n	8012848 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	633b      	str	r3, [r7, #48]	@ 0x30
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	785b      	ldrb	r3, [r3, #1]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d000      	beq.n	8012568 <USB_EPStartXfer+0x108>
 8012566:	e074      	b.n	8012652 <USB_EPStartXfer+0x1f2>
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	2250      	movs	r2, #80	@ 0x50
 8012570:	5a9b      	ldrh	r3, [r3, r2]
 8012572:	b29b      	uxth	r3, r3
 8012574:	001a      	movs	r2, r3
 8012576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012578:	189b      	adds	r3, r3, r2
 801257a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	781b      	ldrb	r3, [r3, #0]
 8012580:	00da      	lsls	r2, r3, #3
 8012582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012584:	18d3      	adds	r3, r2, r3
 8012586:	4aae      	ldr	r2, [pc, #696]	@ (8012840 <USB_EPStartXfer+0x3e0>)
 8012588:	4694      	mov	ip, r2
 801258a:	4463      	add	r3, ip
 801258c:	627b      	str	r3, [r7, #36]	@ 0x24
 801258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012590:	881b      	ldrh	r3, [r3, #0]
 8012592:	b29b      	uxth	r3, r3
 8012594:	059b      	lsls	r3, r3, #22
 8012596:	0d9b      	lsrs	r3, r3, #22
 8012598:	b29a      	uxth	r2, r3
 801259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801259c:	801a      	strh	r2, [r3, #0]
 801259e:	1d7b      	adds	r3, r7, #5
 80125a0:	33ff      	adds	r3, #255	@ 0xff
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80125a6:	d924      	bls.n	80125f2 <USB_EPStartXfer+0x192>
 80125a8:	1d7b      	adds	r3, r7, #5
 80125aa:	33ff      	adds	r3, #255	@ 0xff
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	095b      	lsrs	r3, r3, #5
 80125b0:	1c7a      	adds	r2, r7, #1
 80125b2:	32ff      	adds	r2, #255	@ 0xff
 80125b4:	6013      	str	r3, [r2, #0]
 80125b6:	1d7b      	adds	r3, r7, #5
 80125b8:	33ff      	adds	r3, #255	@ 0xff
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	221f      	movs	r2, #31
 80125be:	4013      	ands	r3, r2
 80125c0:	d106      	bne.n	80125d0 <USB_EPStartXfer+0x170>
 80125c2:	1c7b      	adds	r3, r7, #1
 80125c4:	33ff      	adds	r3, #255	@ 0xff
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	3b01      	subs	r3, #1
 80125ca:	1c7a      	adds	r2, r7, #1
 80125cc:	32ff      	adds	r2, #255	@ 0xff
 80125ce:	6013      	str	r3, [r2, #0]
 80125d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125d2:	881b      	ldrh	r3, [r3, #0]
 80125d4:	b29a      	uxth	r2, r3
 80125d6:	1c7b      	adds	r3, r7, #1
 80125d8:	33ff      	adds	r3, #255	@ 0xff
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	b29b      	uxth	r3, r3
 80125de:	029b      	lsls	r3, r3, #10
 80125e0:	b29b      	uxth	r3, r3
 80125e2:	4313      	orrs	r3, r2
 80125e4:	b29b      	uxth	r3, r3
 80125e6:	4a97      	ldr	r2, [pc, #604]	@ (8012844 <USB_EPStartXfer+0x3e4>)
 80125e8:	4313      	orrs	r3, r2
 80125ea:	b29a      	uxth	r2, r3
 80125ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ee:	801a      	strh	r2, [r3, #0]
 80125f0:	e04a      	b.n	8012688 <USB_EPStartXfer+0x228>
 80125f2:	1d7b      	adds	r3, r7, #5
 80125f4:	33ff      	adds	r3, #255	@ 0xff
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d108      	bne.n	801260e <USB_EPStartXfer+0x1ae>
 80125fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125fe:	881b      	ldrh	r3, [r3, #0]
 8012600:	b29b      	uxth	r3, r3
 8012602:	4a90      	ldr	r2, [pc, #576]	@ (8012844 <USB_EPStartXfer+0x3e4>)
 8012604:	4313      	orrs	r3, r2
 8012606:	b29a      	uxth	r2, r3
 8012608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801260a:	801a      	strh	r2, [r3, #0]
 801260c:	e03c      	b.n	8012688 <USB_EPStartXfer+0x228>
 801260e:	1d7b      	adds	r3, r7, #5
 8012610:	33ff      	adds	r3, #255	@ 0xff
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	085b      	lsrs	r3, r3, #1
 8012616:	1c7a      	adds	r2, r7, #1
 8012618:	32ff      	adds	r2, #255	@ 0xff
 801261a:	6013      	str	r3, [r2, #0]
 801261c:	1d7b      	adds	r3, r7, #5
 801261e:	33ff      	adds	r3, #255	@ 0xff
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	2201      	movs	r2, #1
 8012624:	4013      	ands	r3, r2
 8012626:	d006      	beq.n	8012636 <USB_EPStartXfer+0x1d6>
 8012628:	1c7b      	adds	r3, r7, #1
 801262a:	33ff      	adds	r3, #255	@ 0xff
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	3301      	adds	r3, #1
 8012630:	1c7a      	adds	r2, r7, #1
 8012632:	32ff      	adds	r2, #255	@ 0xff
 8012634:	6013      	str	r3, [r2, #0]
 8012636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012638:	881b      	ldrh	r3, [r3, #0]
 801263a:	b29a      	uxth	r2, r3
 801263c:	1c7b      	adds	r3, r7, #1
 801263e:	33ff      	adds	r3, #255	@ 0xff
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	b29b      	uxth	r3, r3
 8012644:	029b      	lsls	r3, r3, #10
 8012646:	b29b      	uxth	r3, r3
 8012648:	4313      	orrs	r3, r2
 801264a:	b29a      	uxth	r2, r3
 801264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801264e:	801a      	strh	r2, [r3, #0]
 8012650:	e01a      	b.n	8012688 <USB_EPStartXfer+0x228>
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	785b      	ldrb	r3, [r3, #1]
 8012656:	2b01      	cmp	r3, #1
 8012658:	d116      	bne.n	8012688 <USB_EPStartXfer+0x228>
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	2250      	movs	r2, #80	@ 0x50
 801265e:	5a9b      	ldrh	r3, [r3, r2]
 8012660:	b29b      	uxth	r3, r3
 8012662:	001a      	movs	r2, r3
 8012664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012666:	189b      	adds	r3, r3, r2
 8012668:	633b      	str	r3, [r7, #48]	@ 0x30
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	781b      	ldrb	r3, [r3, #0]
 801266e:	00da      	lsls	r2, r3, #3
 8012670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012672:	18d3      	adds	r3, r2, r3
 8012674:	4a72      	ldr	r2, [pc, #456]	@ (8012840 <USB_EPStartXfer+0x3e0>)
 8012676:	4694      	mov	ip, r2
 8012678:	4463      	add	r3, ip
 801267a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801267c:	1d7b      	adds	r3, r7, #5
 801267e:	33ff      	adds	r3, #255	@ 0xff
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	b29a      	uxth	r2, r3
 8012684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012686:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8012688:	2076      	movs	r0, #118	@ 0x76
 801268a:	183b      	adds	r3, r7, r0
 801268c:	683a      	ldr	r2, [r7, #0]
 801268e:	8952      	ldrh	r2, [r2, #10]
 8012690:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	6959      	ldr	r1, [r3, #20]
 8012696:	1d7b      	adds	r3, r7, #5
 8012698:	33ff      	adds	r3, #255	@ 0xff
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	b29c      	uxth	r4, r3
 801269e:	183b      	adds	r3, r7, r0
 80126a0:	881a      	ldrh	r2, [r3, #0]
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	0023      	movs	r3, r4
 80126a6:	f001 f94d 	bl	8013944 <USB_WritePMA>
            ep->xfer_buff += len;
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	695a      	ldr	r2, [r3, #20]
 80126ae:	1d7b      	adds	r3, r7, #5
 80126b0:	33ff      	adds	r3, #255	@ 0xff
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	18d2      	adds	r2, r2, r3
 80126b6:	683b      	ldr	r3, [r7, #0]
 80126b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	6a1a      	ldr	r2, [r3, #32]
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	691b      	ldr	r3, [r3, #16]
 80126c2:	429a      	cmp	r2, r3
 80126c4:	d908      	bls.n	80126d8 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	6a1a      	ldr	r2, [r3, #32]
 80126ca:	1d7b      	adds	r3, r7, #5
 80126cc:	33ff      	adds	r3, #255	@ 0xff
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	1ad2      	subs	r2, r2, r3
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	621a      	str	r2, [r3, #32]
 80126d6:	e007      	b.n	80126e8 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80126d8:	683b      	ldr	r3, [r7, #0]
 80126da:	6a1b      	ldr	r3, [r3, #32]
 80126dc:	1d7a      	adds	r2, r7, #5
 80126de:	32ff      	adds	r2, #255	@ 0xff
 80126e0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	2200      	movs	r2, #0
 80126e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	785b      	ldrb	r3, [r3, #1]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d000      	beq.n	80126f2 <USB_EPStartXfer+0x292>
 80126f0:	e070      	b.n	80127d4 <USB_EPStartXfer+0x374>
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	61bb      	str	r3, [r7, #24]
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2250      	movs	r2, #80	@ 0x50
 80126fa:	5a9b      	ldrh	r3, [r3, r2]
 80126fc:	b29b      	uxth	r3, r3
 80126fe:	001a      	movs	r2, r3
 8012700:	69bb      	ldr	r3, [r7, #24]
 8012702:	189b      	adds	r3, r3, r2
 8012704:	61bb      	str	r3, [r7, #24]
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	781b      	ldrb	r3, [r3, #0]
 801270a:	00da      	lsls	r2, r3, #3
 801270c:	69bb      	ldr	r3, [r7, #24]
 801270e:	18d3      	adds	r3, r2, r3
 8012710:	4a48      	ldr	r2, [pc, #288]	@ (8012834 <USB_EPStartXfer+0x3d4>)
 8012712:	4694      	mov	ip, r2
 8012714:	4463      	add	r3, ip
 8012716:	617b      	str	r3, [r7, #20]
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	881b      	ldrh	r3, [r3, #0]
 801271c:	b29b      	uxth	r3, r3
 801271e:	059b      	lsls	r3, r3, #22
 8012720:	0d9b      	lsrs	r3, r3, #22
 8012722:	b29a      	uxth	r2, r3
 8012724:	697b      	ldr	r3, [r7, #20]
 8012726:	801a      	strh	r2, [r3, #0]
 8012728:	1d7b      	adds	r3, r7, #5
 801272a:	33ff      	adds	r3, #255	@ 0xff
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	2b3e      	cmp	r3, #62	@ 0x3e
 8012730:	d922      	bls.n	8012778 <USB_EPStartXfer+0x318>
 8012732:	1d7b      	adds	r3, r7, #5
 8012734:	33ff      	adds	r3, #255	@ 0xff
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	095b      	lsrs	r3, r3, #5
 801273a:	21fc      	movs	r1, #252	@ 0xfc
 801273c:	187a      	adds	r2, r7, r1
 801273e:	6013      	str	r3, [r2, #0]
 8012740:	1d7b      	adds	r3, r7, #5
 8012742:	33ff      	adds	r3, #255	@ 0xff
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	221f      	movs	r2, #31
 8012748:	4013      	ands	r3, r2
 801274a:	d104      	bne.n	8012756 <USB_EPStartXfer+0x2f6>
 801274c:	187b      	adds	r3, r7, r1
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	3b01      	subs	r3, #1
 8012752:	187a      	adds	r2, r7, r1
 8012754:	6013      	str	r3, [r2, #0]
 8012756:	697b      	ldr	r3, [r7, #20]
 8012758:	881b      	ldrh	r3, [r3, #0]
 801275a:	b29a      	uxth	r2, r3
 801275c:	23fc      	movs	r3, #252	@ 0xfc
 801275e:	18fb      	adds	r3, r7, r3
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	b29b      	uxth	r3, r3
 8012764:	029b      	lsls	r3, r3, #10
 8012766:	b29b      	uxth	r3, r3
 8012768:	4313      	orrs	r3, r2
 801276a:	b29b      	uxth	r3, r3
 801276c:	4a35      	ldr	r2, [pc, #212]	@ (8012844 <USB_EPStartXfer+0x3e4>)
 801276e:	4313      	orrs	r3, r2
 8012770:	b29a      	uxth	r2, r3
 8012772:	697b      	ldr	r3, [r7, #20]
 8012774:	801a      	strh	r2, [r3, #0]
 8012776:	e04a      	b.n	801280e <USB_EPStartXfer+0x3ae>
 8012778:	1d7b      	adds	r3, r7, #5
 801277a:	33ff      	adds	r3, #255	@ 0xff
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d108      	bne.n	8012794 <USB_EPStartXfer+0x334>
 8012782:	697b      	ldr	r3, [r7, #20]
 8012784:	881b      	ldrh	r3, [r3, #0]
 8012786:	b29b      	uxth	r3, r3
 8012788:	4a2e      	ldr	r2, [pc, #184]	@ (8012844 <USB_EPStartXfer+0x3e4>)
 801278a:	4313      	orrs	r3, r2
 801278c:	b29a      	uxth	r2, r3
 801278e:	697b      	ldr	r3, [r7, #20]
 8012790:	801a      	strh	r2, [r3, #0]
 8012792:	e03c      	b.n	801280e <USB_EPStartXfer+0x3ae>
 8012794:	1d7b      	adds	r3, r7, #5
 8012796:	33ff      	adds	r3, #255	@ 0xff
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	085b      	lsrs	r3, r3, #1
 801279c:	21fc      	movs	r1, #252	@ 0xfc
 801279e:	187a      	adds	r2, r7, r1
 80127a0:	6013      	str	r3, [r2, #0]
 80127a2:	1d7b      	adds	r3, r7, #5
 80127a4:	33ff      	adds	r3, #255	@ 0xff
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	2201      	movs	r2, #1
 80127aa:	4013      	ands	r3, r2
 80127ac:	d004      	beq.n	80127b8 <USB_EPStartXfer+0x358>
 80127ae:	187b      	adds	r3, r7, r1
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	3301      	adds	r3, #1
 80127b4:	187a      	adds	r2, r7, r1
 80127b6:	6013      	str	r3, [r2, #0]
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	881b      	ldrh	r3, [r3, #0]
 80127bc:	b29a      	uxth	r2, r3
 80127be:	23fc      	movs	r3, #252	@ 0xfc
 80127c0:	18fb      	adds	r3, r7, r3
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	b29b      	uxth	r3, r3
 80127c6:	029b      	lsls	r3, r3, #10
 80127c8:	b29b      	uxth	r3, r3
 80127ca:	4313      	orrs	r3, r2
 80127cc:	b29a      	uxth	r2, r3
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	801a      	strh	r2, [r3, #0]
 80127d2:	e01c      	b.n	801280e <USB_EPStartXfer+0x3ae>
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	785b      	ldrb	r3, [r3, #1]
 80127d8:	2b01      	cmp	r3, #1
 80127da:	d118      	bne.n	801280e <USB_EPStartXfer+0x3ae>
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	623b      	str	r3, [r7, #32]
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	2250      	movs	r2, #80	@ 0x50
 80127e4:	5a9b      	ldrh	r3, [r3, r2]
 80127e6:	b29b      	uxth	r3, r3
 80127e8:	001a      	movs	r2, r3
 80127ea:	6a3b      	ldr	r3, [r7, #32]
 80127ec:	189b      	adds	r3, r3, r2
 80127ee:	623b      	str	r3, [r7, #32]
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	00da      	lsls	r2, r3, #3
 80127f6:	6a3b      	ldr	r3, [r7, #32]
 80127f8:	18d3      	adds	r3, r2, r3
 80127fa:	4a0e      	ldr	r2, [pc, #56]	@ (8012834 <USB_EPStartXfer+0x3d4>)
 80127fc:	4694      	mov	ip, r2
 80127fe:	4463      	add	r3, ip
 8012800:	61fb      	str	r3, [r7, #28]
 8012802:	1d7b      	adds	r3, r7, #5
 8012804:	33ff      	adds	r3, #255	@ 0xff
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	b29a      	uxth	r2, r3
 801280a:	69fb      	ldr	r3, [r7, #28]
 801280c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801280e:	2076      	movs	r0, #118	@ 0x76
 8012810:	183b      	adds	r3, r7, r0
 8012812:	683a      	ldr	r2, [r7, #0]
 8012814:	8912      	ldrh	r2, [r2, #8]
 8012816:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012818:	683b      	ldr	r3, [r7, #0]
 801281a:	6959      	ldr	r1, [r3, #20]
 801281c:	1d7b      	adds	r3, r7, #5
 801281e:	33ff      	adds	r3, #255	@ 0xff
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	b29c      	uxth	r4, r3
 8012824:	183b      	adds	r3, r7, r0
 8012826:	881a      	ldrh	r2, [r3, #0]
 8012828:	6878      	ldr	r0, [r7, #4]
 801282a:	0023      	movs	r3, r4
 801282c:	f001 f88a 	bl	8013944 <USB_WritePMA>
 8012830:	e329      	b.n	8012e86 <USB_EPStartXfer+0xa26>
 8012832:	46c0      	nop			@ (mov r8, r8)
 8012834:	00000402 	.word	0x00000402
 8012838:	ffff8f8f 	.word	0xffff8f8f
 801283c:	ffff8180 	.word	0xffff8180
 8012840:	00000406 	.word	0x00000406
 8012844:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	785b      	ldrb	r3, [r3, #1]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d000      	beq.n	8012852 <USB_EPStartXfer+0x3f2>
 8012850:	e070      	b.n	8012934 <USB_EPStartXfer+0x4d4>
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	2250      	movs	r2, #80	@ 0x50
 801285a:	5a9b      	ldrh	r3, [r3, r2]
 801285c:	b29b      	uxth	r3, r3
 801285e:	001a      	movs	r2, r3
 8012860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012862:	189b      	adds	r3, r3, r2
 8012864:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012866:	683b      	ldr	r3, [r7, #0]
 8012868:	781b      	ldrb	r3, [r3, #0]
 801286a:	00da      	lsls	r2, r3, #3
 801286c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801286e:	18d3      	adds	r3, r2, r3
 8012870:	4acd      	ldr	r2, [pc, #820]	@ (8012ba8 <USB_EPStartXfer+0x748>)
 8012872:	4694      	mov	ip, r2
 8012874:	4463      	add	r3, ip
 8012876:	647b      	str	r3, [r7, #68]	@ 0x44
 8012878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801287a:	881b      	ldrh	r3, [r3, #0]
 801287c:	b29b      	uxth	r3, r3
 801287e:	059b      	lsls	r3, r3, #22
 8012880:	0d9b      	lsrs	r3, r3, #22
 8012882:	b29a      	uxth	r2, r3
 8012884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012886:	801a      	strh	r2, [r3, #0]
 8012888:	1d7b      	adds	r3, r7, #5
 801288a:	33ff      	adds	r3, #255	@ 0xff
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	2b3e      	cmp	r3, #62	@ 0x3e
 8012890:	d922      	bls.n	80128d8 <USB_EPStartXfer+0x478>
 8012892:	1d7b      	adds	r3, r7, #5
 8012894:	33ff      	adds	r3, #255	@ 0xff
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	095b      	lsrs	r3, r3, #5
 801289a:	21f8      	movs	r1, #248	@ 0xf8
 801289c:	187a      	adds	r2, r7, r1
 801289e:	6013      	str	r3, [r2, #0]
 80128a0:	1d7b      	adds	r3, r7, #5
 80128a2:	33ff      	adds	r3, #255	@ 0xff
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	221f      	movs	r2, #31
 80128a8:	4013      	ands	r3, r2
 80128aa:	d104      	bne.n	80128b6 <USB_EPStartXfer+0x456>
 80128ac:	187b      	adds	r3, r7, r1
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	3b01      	subs	r3, #1
 80128b2:	187a      	adds	r2, r7, r1
 80128b4:	6013      	str	r3, [r2, #0]
 80128b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128b8:	881b      	ldrh	r3, [r3, #0]
 80128ba:	b29a      	uxth	r2, r3
 80128bc:	23f8      	movs	r3, #248	@ 0xf8
 80128be:	18fb      	adds	r3, r7, r3
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	b29b      	uxth	r3, r3
 80128c4:	029b      	lsls	r3, r3, #10
 80128c6:	b29b      	uxth	r3, r3
 80128c8:	4313      	orrs	r3, r2
 80128ca:	b29b      	uxth	r3, r3
 80128cc:	4ab7      	ldr	r2, [pc, #732]	@ (8012bac <USB_EPStartXfer+0x74c>)
 80128ce:	4313      	orrs	r3, r2
 80128d0:	b29a      	uxth	r2, r3
 80128d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128d4:	801a      	strh	r2, [r3, #0]
 80128d6:	e04a      	b.n	801296e <USB_EPStartXfer+0x50e>
 80128d8:	1d7b      	adds	r3, r7, #5
 80128da:	33ff      	adds	r3, #255	@ 0xff
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d108      	bne.n	80128f4 <USB_EPStartXfer+0x494>
 80128e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128e4:	881b      	ldrh	r3, [r3, #0]
 80128e6:	b29b      	uxth	r3, r3
 80128e8:	4ab0      	ldr	r2, [pc, #704]	@ (8012bac <USB_EPStartXfer+0x74c>)
 80128ea:	4313      	orrs	r3, r2
 80128ec:	b29a      	uxth	r2, r3
 80128ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80128f0:	801a      	strh	r2, [r3, #0]
 80128f2:	e03c      	b.n	801296e <USB_EPStartXfer+0x50e>
 80128f4:	1d7b      	adds	r3, r7, #5
 80128f6:	33ff      	adds	r3, #255	@ 0xff
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	085b      	lsrs	r3, r3, #1
 80128fc:	21f8      	movs	r1, #248	@ 0xf8
 80128fe:	187a      	adds	r2, r7, r1
 8012900:	6013      	str	r3, [r2, #0]
 8012902:	1d7b      	adds	r3, r7, #5
 8012904:	33ff      	adds	r3, #255	@ 0xff
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	2201      	movs	r2, #1
 801290a:	4013      	ands	r3, r2
 801290c:	d004      	beq.n	8012918 <USB_EPStartXfer+0x4b8>
 801290e:	187b      	adds	r3, r7, r1
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	3301      	adds	r3, #1
 8012914:	187a      	adds	r2, r7, r1
 8012916:	6013      	str	r3, [r2, #0]
 8012918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801291a:	881b      	ldrh	r3, [r3, #0]
 801291c:	b29a      	uxth	r2, r3
 801291e:	23f8      	movs	r3, #248	@ 0xf8
 8012920:	18fb      	adds	r3, r7, r3
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	b29b      	uxth	r3, r3
 8012926:	029b      	lsls	r3, r3, #10
 8012928:	b29b      	uxth	r3, r3
 801292a:	4313      	orrs	r3, r2
 801292c:	b29a      	uxth	r2, r3
 801292e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012930:	801a      	strh	r2, [r3, #0]
 8012932:	e01c      	b.n	801296e <USB_EPStartXfer+0x50e>
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	785b      	ldrb	r3, [r3, #1]
 8012938:	2b01      	cmp	r3, #1
 801293a:	d118      	bne.n	801296e <USB_EPStartXfer+0x50e>
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	653b      	str	r3, [r7, #80]	@ 0x50
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2250      	movs	r2, #80	@ 0x50
 8012944:	5a9b      	ldrh	r3, [r3, r2]
 8012946:	b29b      	uxth	r3, r3
 8012948:	001a      	movs	r2, r3
 801294a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801294c:	189b      	adds	r3, r3, r2
 801294e:	653b      	str	r3, [r7, #80]	@ 0x50
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	781b      	ldrb	r3, [r3, #0]
 8012954:	00da      	lsls	r2, r3, #3
 8012956:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012958:	18d3      	adds	r3, r2, r3
 801295a:	4a93      	ldr	r2, [pc, #588]	@ (8012ba8 <USB_EPStartXfer+0x748>)
 801295c:	4694      	mov	ip, r2
 801295e:	4463      	add	r3, ip
 8012960:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012962:	1d7b      	adds	r3, r7, #5
 8012964:	33ff      	adds	r3, #255	@ 0xff
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	b29a      	uxth	r2, r3
 801296a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801296c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801296e:	2076      	movs	r0, #118	@ 0x76
 8012970:	183b      	adds	r3, r7, r0
 8012972:	683a      	ldr	r2, [r7, #0]
 8012974:	8912      	ldrh	r2, [r2, #8]
 8012976:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012978:	683b      	ldr	r3, [r7, #0]
 801297a:	6959      	ldr	r1, [r3, #20]
 801297c:	1d7b      	adds	r3, r7, #5
 801297e:	33ff      	adds	r3, #255	@ 0xff
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	b29c      	uxth	r4, r3
 8012984:	183b      	adds	r3, r7, r0
 8012986:	881a      	ldrh	r2, [r3, #0]
 8012988:	6878      	ldr	r0, [r7, #4]
 801298a:	0023      	movs	r3, r4
 801298c:	f000 ffda 	bl	8013944 <USB_WritePMA>
            ep->xfer_buff += len;
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	695a      	ldr	r2, [r3, #20]
 8012994:	1d7b      	adds	r3, r7, #5
 8012996:	33ff      	adds	r3, #255	@ 0xff
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	18d2      	adds	r2, r2, r3
 801299c:	683b      	ldr	r3, [r7, #0]
 801299e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	6a1a      	ldr	r2, [r3, #32]
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	691b      	ldr	r3, [r3, #16]
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d908      	bls.n	80129be <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	6a1a      	ldr	r2, [r3, #32]
 80129b0:	1d7b      	adds	r3, r7, #5
 80129b2:	33ff      	adds	r3, #255	@ 0xff
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	1ad2      	subs	r2, r2, r3
 80129b8:	683b      	ldr	r3, [r7, #0]
 80129ba:	621a      	str	r2, [r3, #32]
 80129bc:	e007      	b.n	80129ce <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	6a1b      	ldr	r3, [r3, #32]
 80129c2:	1d7a      	adds	r2, r7, #5
 80129c4:	32ff      	adds	r2, #255	@ 0xff
 80129c6:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	2200      	movs	r2, #0
 80129cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	785b      	ldrb	r3, [r3, #1]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d000      	beq.n	80129dc <USB_EPStartXfer+0x57c>
 80129da:	e070      	b.n	8012abe <USB_EPStartXfer+0x65e>
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	2250      	movs	r2, #80	@ 0x50
 80129e4:	5a9b      	ldrh	r3, [r3, r2]
 80129e6:	b29b      	uxth	r3, r3
 80129e8:	001a      	movs	r2, r3
 80129ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129ec:	189b      	adds	r3, r3, r2
 80129ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	00da      	lsls	r2, r3, #3
 80129f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129f8:	18d3      	adds	r3, r2, r3
 80129fa:	4a6d      	ldr	r2, [pc, #436]	@ (8012bb0 <USB_EPStartXfer+0x750>)
 80129fc:	4694      	mov	ip, r2
 80129fe:	4463      	add	r3, ip
 8012a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8012a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a04:	881b      	ldrh	r3, [r3, #0]
 8012a06:	b29b      	uxth	r3, r3
 8012a08:	059b      	lsls	r3, r3, #22
 8012a0a:	0d9b      	lsrs	r3, r3, #22
 8012a0c:	b29a      	uxth	r2, r3
 8012a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a10:	801a      	strh	r2, [r3, #0]
 8012a12:	1d7b      	adds	r3, r7, #5
 8012a14:	33ff      	adds	r3, #255	@ 0xff
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	2b3e      	cmp	r3, #62	@ 0x3e
 8012a1a:	d922      	bls.n	8012a62 <USB_EPStartXfer+0x602>
 8012a1c:	1d7b      	adds	r3, r7, #5
 8012a1e:	33ff      	adds	r3, #255	@ 0xff
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	095b      	lsrs	r3, r3, #5
 8012a24:	21f4      	movs	r1, #244	@ 0xf4
 8012a26:	187a      	adds	r2, r7, r1
 8012a28:	6013      	str	r3, [r2, #0]
 8012a2a:	1d7b      	adds	r3, r7, #5
 8012a2c:	33ff      	adds	r3, #255	@ 0xff
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	221f      	movs	r2, #31
 8012a32:	4013      	ands	r3, r2
 8012a34:	d104      	bne.n	8012a40 <USB_EPStartXfer+0x5e0>
 8012a36:	187b      	adds	r3, r7, r1
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	3b01      	subs	r3, #1
 8012a3c:	187a      	adds	r2, r7, r1
 8012a3e:	6013      	str	r3, [r2, #0]
 8012a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a42:	881b      	ldrh	r3, [r3, #0]
 8012a44:	b29a      	uxth	r2, r3
 8012a46:	23f4      	movs	r3, #244	@ 0xf4
 8012a48:	18fb      	adds	r3, r7, r3
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	b29b      	uxth	r3, r3
 8012a4e:	029b      	lsls	r3, r3, #10
 8012a50:	b29b      	uxth	r3, r3
 8012a52:	4313      	orrs	r3, r2
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	4a55      	ldr	r2, [pc, #340]	@ (8012bac <USB_EPStartXfer+0x74c>)
 8012a58:	4313      	orrs	r3, r2
 8012a5a:	b29a      	uxth	r2, r3
 8012a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a5e:	801a      	strh	r2, [r3, #0]
 8012a60:	e048      	b.n	8012af4 <USB_EPStartXfer+0x694>
 8012a62:	1d7b      	adds	r3, r7, #5
 8012a64:	33ff      	adds	r3, #255	@ 0xff
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d108      	bne.n	8012a7e <USB_EPStartXfer+0x61e>
 8012a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a6e:	881b      	ldrh	r3, [r3, #0]
 8012a70:	b29b      	uxth	r3, r3
 8012a72:	4a4e      	ldr	r2, [pc, #312]	@ (8012bac <USB_EPStartXfer+0x74c>)
 8012a74:	4313      	orrs	r3, r2
 8012a76:	b29a      	uxth	r2, r3
 8012a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a7a:	801a      	strh	r2, [r3, #0]
 8012a7c:	e03a      	b.n	8012af4 <USB_EPStartXfer+0x694>
 8012a7e:	1d7b      	adds	r3, r7, #5
 8012a80:	33ff      	adds	r3, #255	@ 0xff
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	085b      	lsrs	r3, r3, #1
 8012a86:	21f4      	movs	r1, #244	@ 0xf4
 8012a88:	187a      	adds	r2, r7, r1
 8012a8a:	6013      	str	r3, [r2, #0]
 8012a8c:	1d7b      	adds	r3, r7, #5
 8012a8e:	33ff      	adds	r3, #255	@ 0xff
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	2201      	movs	r2, #1
 8012a94:	4013      	ands	r3, r2
 8012a96:	d004      	beq.n	8012aa2 <USB_EPStartXfer+0x642>
 8012a98:	187b      	adds	r3, r7, r1
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	3301      	adds	r3, #1
 8012a9e:	187a      	adds	r2, r7, r1
 8012aa0:	6013      	str	r3, [r2, #0]
 8012aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012aa4:	881b      	ldrh	r3, [r3, #0]
 8012aa6:	b29a      	uxth	r2, r3
 8012aa8:	23f4      	movs	r3, #244	@ 0xf4
 8012aaa:	18fb      	adds	r3, r7, r3
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	029b      	lsls	r3, r3, #10
 8012ab2:	b29b      	uxth	r3, r3
 8012ab4:	4313      	orrs	r3, r2
 8012ab6:	b29a      	uxth	r2, r3
 8012ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012aba:	801a      	strh	r2, [r3, #0]
 8012abc:	e01a      	b.n	8012af4 <USB_EPStartXfer+0x694>
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	785b      	ldrb	r3, [r3, #1]
 8012ac2:	2b01      	cmp	r3, #1
 8012ac4:	d116      	bne.n	8012af4 <USB_EPStartXfer+0x694>
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	2250      	movs	r2, #80	@ 0x50
 8012aca:	5a9b      	ldrh	r3, [r3, r2]
 8012acc:	b29b      	uxth	r3, r3
 8012ace:	001a      	movs	r2, r3
 8012ad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012ad2:	189b      	adds	r3, r3, r2
 8012ad4:	643b      	str	r3, [r7, #64]	@ 0x40
 8012ad6:	683b      	ldr	r3, [r7, #0]
 8012ad8:	781b      	ldrb	r3, [r3, #0]
 8012ada:	00da      	lsls	r2, r3, #3
 8012adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012ade:	18d3      	adds	r3, r2, r3
 8012ae0:	4a33      	ldr	r2, [pc, #204]	@ (8012bb0 <USB_EPStartXfer+0x750>)
 8012ae2:	4694      	mov	ip, r2
 8012ae4:	4463      	add	r3, ip
 8012ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012ae8:	1d7b      	adds	r3, r7, #5
 8012aea:	33ff      	adds	r3, #255	@ 0xff
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	b29a      	uxth	r2, r3
 8012af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012af2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8012af4:	2076      	movs	r0, #118	@ 0x76
 8012af6:	183b      	adds	r3, r7, r0
 8012af8:	683a      	ldr	r2, [r7, #0]
 8012afa:	8952      	ldrh	r2, [r2, #10]
 8012afc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	6959      	ldr	r1, [r3, #20]
 8012b02:	1d7b      	adds	r3, r7, #5
 8012b04:	33ff      	adds	r3, #255	@ 0xff
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	b29c      	uxth	r4, r3
 8012b0a:	183b      	adds	r3, r7, r0
 8012b0c:	881a      	ldrh	r2, [r3, #0]
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	0023      	movs	r3, r4
 8012b12:	f000 ff17 	bl	8013944 <USB_WritePMA>
 8012b16:	e1b6      	b.n	8012e86 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	6a1b      	ldr	r3, [r3, #32]
 8012b1c:	1d7a      	adds	r2, r7, #5
 8012b1e:	32ff      	adds	r2, #255	@ 0xff
 8012b20:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8012b22:	687a      	ldr	r2, [r7, #4]
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	009b      	lsls	r3, r3, #2
 8012b2a:	18d3      	adds	r3, r2, r3
 8012b2c:	881b      	ldrh	r3, [r3, #0]
 8012b2e:	b29a      	uxth	r2, r3
 8012b30:	2062      	movs	r0, #98	@ 0x62
 8012b32:	183b      	adds	r3, r7, r0
 8012b34:	491f      	ldr	r1, [pc, #124]	@ (8012bb4 <USB_EPStartXfer+0x754>)
 8012b36:	400a      	ands	r2, r1
 8012b38:	801a      	strh	r2, [r3, #0]
 8012b3a:	687a      	ldr	r2, [r7, #4]
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	781b      	ldrb	r3, [r3, #0]
 8012b40:	009b      	lsls	r3, r3, #2
 8012b42:	18d3      	adds	r3, r2, r3
 8012b44:	183a      	adds	r2, r7, r0
 8012b46:	8812      	ldrh	r2, [r2, #0]
 8012b48:	491b      	ldr	r1, [pc, #108]	@ (8012bb8 <USB_EPStartXfer+0x758>)
 8012b4a:	430a      	orrs	r2, r1
 8012b4c:	b292      	uxth	r2, r2
 8012b4e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	2250      	movs	r2, #80	@ 0x50
 8012b58:	5a9b      	ldrh	r3, [r3, r2]
 8012b5a:	b29b      	uxth	r3, r3
 8012b5c:	001a      	movs	r2, r3
 8012b5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012b60:	189b      	adds	r3, r3, r2
 8012b62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	00da      	lsls	r2, r3, #3
 8012b6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012b6c:	18d3      	adds	r3, r2, r3
 8012b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8012ba8 <USB_EPStartXfer+0x748>)
 8012b70:	4694      	mov	ip, r2
 8012b72:	4463      	add	r3, ip
 8012b74:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012b76:	1d7b      	adds	r3, r7, #5
 8012b78:	33ff      	adds	r3, #255	@ 0xff
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	b29a      	uxth	r2, r3
 8012b7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012b80:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012b82:	2076      	movs	r0, #118	@ 0x76
 8012b84:	183b      	adds	r3, r7, r0
 8012b86:	683a      	ldr	r2, [r7, #0]
 8012b88:	8912      	ldrh	r2, [r2, #8]
 8012b8a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	6959      	ldr	r1, [r3, #20]
 8012b90:	1d7b      	adds	r3, r7, #5
 8012b92:	33ff      	adds	r3, #255	@ 0xff
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	b29c      	uxth	r4, r3
 8012b98:	183b      	adds	r3, r7, r0
 8012b9a:	881a      	ldrh	r2, [r3, #0]
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	0023      	movs	r3, r4
 8012ba0:	f000 fed0 	bl	8013944 <USB_WritePMA>
 8012ba4:	e16f      	b.n	8012e86 <USB_EPStartXfer+0xa26>
 8012ba6:	46c0      	nop			@ (mov r8, r8)
 8012ba8:	00000402 	.word	0x00000402
 8012bac:	ffff8000 	.word	0xffff8000
 8012bb0:	00000406 	.word	0x00000406
 8012bb4:	ffff8e8f 	.word	0xffff8e8f
 8012bb8:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	6a1a      	ldr	r2, [r3, #32]
 8012bc0:	1d7b      	adds	r3, r7, #5
 8012bc2:	33ff      	adds	r3, #255	@ 0xff
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	1ad2      	subs	r2, r2, r3
 8012bc8:	683b      	ldr	r3, [r7, #0]
 8012bca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012bcc:	687a      	ldr	r2, [r7, #4]
 8012bce:	683b      	ldr	r3, [r7, #0]
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	009b      	lsls	r3, r3, #2
 8012bd4:	18d3      	adds	r3, r2, r3
 8012bd6:	881b      	ldrh	r3, [r3, #0]
 8012bd8:	b29b      	uxth	r3, r3
 8012bda:	001a      	movs	r2, r3
 8012bdc:	2340      	movs	r3, #64	@ 0x40
 8012bde:	4013      	ands	r3, r2
 8012be0:	d100      	bne.n	8012be4 <USB_EPStartXfer+0x784>
 8012be2:	e0a4      	b.n	8012d2e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	673b      	str	r3, [r7, #112]	@ 0x70
 8012be8:	683b      	ldr	r3, [r7, #0]
 8012bea:	785b      	ldrb	r3, [r3, #1]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d000      	beq.n	8012bf2 <USB_EPStartXfer+0x792>
 8012bf0:	e070      	b.n	8012cd4 <USB_EPStartXfer+0x874>
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	2250      	movs	r2, #80	@ 0x50
 8012bfa:	5a9b      	ldrh	r3, [r3, r2]
 8012bfc:	b29b      	uxth	r3, r3
 8012bfe:	001a      	movs	r2, r3
 8012c00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012c02:	189b      	adds	r3, r3, r2
 8012c04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	781b      	ldrb	r3, [r3, #0]
 8012c0a:	00da      	lsls	r2, r3, #3
 8012c0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012c0e:	18d3      	adds	r3, r2, r3
 8012c10:	4abc      	ldr	r2, [pc, #752]	@ (8012f04 <USB_EPStartXfer+0xaa4>)
 8012c12:	4694      	mov	ip, r2
 8012c14:	4463      	add	r3, ip
 8012c16:	667b      	str	r3, [r7, #100]	@ 0x64
 8012c18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c1a:	881b      	ldrh	r3, [r3, #0]
 8012c1c:	b29b      	uxth	r3, r3
 8012c1e:	059b      	lsls	r3, r3, #22
 8012c20:	0d9b      	lsrs	r3, r3, #22
 8012c22:	b29a      	uxth	r2, r3
 8012c24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c26:	801a      	strh	r2, [r3, #0]
 8012c28:	1d7b      	adds	r3, r7, #5
 8012c2a:	33ff      	adds	r3, #255	@ 0xff
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	2b3e      	cmp	r3, #62	@ 0x3e
 8012c30:	d922      	bls.n	8012c78 <USB_EPStartXfer+0x818>
 8012c32:	1d7b      	adds	r3, r7, #5
 8012c34:	33ff      	adds	r3, #255	@ 0xff
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	095b      	lsrs	r3, r3, #5
 8012c3a:	21f0      	movs	r1, #240	@ 0xf0
 8012c3c:	187a      	adds	r2, r7, r1
 8012c3e:	6013      	str	r3, [r2, #0]
 8012c40:	1d7b      	adds	r3, r7, #5
 8012c42:	33ff      	adds	r3, #255	@ 0xff
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	221f      	movs	r2, #31
 8012c48:	4013      	ands	r3, r2
 8012c4a:	d104      	bne.n	8012c56 <USB_EPStartXfer+0x7f6>
 8012c4c:	187b      	adds	r3, r7, r1
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	3b01      	subs	r3, #1
 8012c52:	187a      	adds	r2, r7, r1
 8012c54:	6013      	str	r3, [r2, #0]
 8012c56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c58:	881b      	ldrh	r3, [r3, #0]
 8012c5a:	b29a      	uxth	r2, r3
 8012c5c:	23f0      	movs	r3, #240	@ 0xf0
 8012c5e:	18fb      	adds	r3, r7, r3
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	b29b      	uxth	r3, r3
 8012c64:	029b      	lsls	r3, r3, #10
 8012c66:	b29b      	uxth	r3, r3
 8012c68:	4313      	orrs	r3, r2
 8012c6a:	b29b      	uxth	r3, r3
 8012c6c:	4aa6      	ldr	r2, [pc, #664]	@ (8012f08 <USB_EPStartXfer+0xaa8>)
 8012c6e:	4313      	orrs	r3, r2
 8012c70:	b29a      	uxth	r2, r3
 8012c72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c74:	801a      	strh	r2, [r3, #0]
 8012c76:	e048      	b.n	8012d0a <USB_EPStartXfer+0x8aa>
 8012c78:	1d7b      	adds	r3, r7, #5
 8012c7a:	33ff      	adds	r3, #255	@ 0xff
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d108      	bne.n	8012c94 <USB_EPStartXfer+0x834>
 8012c82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c84:	881b      	ldrh	r3, [r3, #0]
 8012c86:	b29b      	uxth	r3, r3
 8012c88:	4a9f      	ldr	r2, [pc, #636]	@ (8012f08 <USB_EPStartXfer+0xaa8>)
 8012c8a:	4313      	orrs	r3, r2
 8012c8c:	b29a      	uxth	r2, r3
 8012c8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c90:	801a      	strh	r2, [r3, #0]
 8012c92:	e03a      	b.n	8012d0a <USB_EPStartXfer+0x8aa>
 8012c94:	1d7b      	adds	r3, r7, #5
 8012c96:	33ff      	adds	r3, #255	@ 0xff
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	085b      	lsrs	r3, r3, #1
 8012c9c:	21f0      	movs	r1, #240	@ 0xf0
 8012c9e:	187a      	adds	r2, r7, r1
 8012ca0:	6013      	str	r3, [r2, #0]
 8012ca2:	1d7b      	adds	r3, r7, #5
 8012ca4:	33ff      	adds	r3, #255	@ 0xff
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	2201      	movs	r2, #1
 8012caa:	4013      	ands	r3, r2
 8012cac:	d004      	beq.n	8012cb8 <USB_EPStartXfer+0x858>
 8012cae:	187b      	adds	r3, r7, r1
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	3301      	adds	r3, #1
 8012cb4:	187a      	adds	r2, r7, r1
 8012cb6:	6013      	str	r3, [r2, #0]
 8012cb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012cba:	881b      	ldrh	r3, [r3, #0]
 8012cbc:	b29a      	uxth	r2, r3
 8012cbe:	23f0      	movs	r3, #240	@ 0xf0
 8012cc0:	18fb      	adds	r3, r7, r3
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	b29b      	uxth	r3, r3
 8012cc6:	029b      	lsls	r3, r3, #10
 8012cc8:	b29b      	uxth	r3, r3
 8012cca:	4313      	orrs	r3, r2
 8012ccc:	b29a      	uxth	r2, r3
 8012cce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012cd0:	801a      	strh	r2, [r3, #0]
 8012cd2:	e01a      	b.n	8012d0a <USB_EPStartXfer+0x8aa>
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	785b      	ldrb	r3, [r3, #1]
 8012cd8:	2b01      	cmp	r3, #1
 8012cda:	d116      	bne.n	8012d0a <USB_EPStartXfer+0x8aa>
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2250      	movs	r2, #80	@ 0x50
 8012ce0:	5a9b      	ldrh	r3, [r3, r2]
 8012ce2:	b29b      	uxth	r3, r3
 8012ce4:	001a      	movs	r2, r3
 8012ce6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012ce8:	189b      	adds	r3, r3, r2
 8012cea:	673b      	str	r3, [r7, #112]	@ 0x70
 8012cec:	683b      	ldr	r3, [r7, #0]
 8012cee:	781b      	ldrb	r3, [r3, #0]
 8012cf0:	00da      	lsls	r2, r3, #3
 8012cf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012cf4:	18d3      	adds	r3, r2, r3
 8012cf6:	4a83      	ldr	r2, [pc, #524]	@ (8012f04 <USB_EPStartXfer+0xaa4>)
 8012cf8:	4694      	mov	ip, r2
 8012cfa:	4463      	add	r3, ip
 8012cfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012cfe:	1d7b      	adds	r3, r7, #5
 8012d00:	33ff      	adds	r3, #255	@ 0xff
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	b29a      	uxth	r2, r3
 8012d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012d08:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8012d0a:	2076      	movs	r0, #118	@ 0x76
 8012d0c:	183b      	adds	r3, r7, r0
 8012d0e:	683a      	ldr	r2, [r7, #0]
 8012d10:	8952      	ldrh	r2, [r2, #10]
 8012d12:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012d14:	683b      	ldr	r3, [r7, #0]
 8012d16:	6959      	ldr	r1, [r3, #20]
 8012d18:	1d7b      	adds	r3, r7, #5
 8012d1a:	33ff      	adds	r3, #255	@ 0xff
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	b29c      	uxth	r4, r3
 8012d20:	183b      	adds	r3, r7, r0
 8012d22:	881a      	ldrh	r2, [r3, #0]
 8012d24:	6878      	ldr	r0, [r7, #4]
 8012d26:	0023      	movs	r3, r4
 8012d28:	f000 fe0c 	bl	8013944 <USB_WritePMA>
 8012d2c:	e0ab      	b.n	8012e86 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012d2e:	683b      	ldr	r3, [r7, #0]
 8012d30:	785b      	ldrb	r3, [r3, #1]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d000      	beq.n	8012d38 <USB_EPStartXfer+0x8d8>
 8012d36:	e070      	b.n	8012e1a <USB_EPStartXfer+0x9ba>
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2250      	movs	r2, #80	@ 0x50
 8012d40:	5a9b      	ldrh	r3, [r3, r2]
 8012d42:	b29b      	uxth	r3, r3
 8012d44:	001a      	movs	r2, r3
 8012d46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012d48:	189b      	adds	r3, r3, r2
 8012d4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012d4c:	683b      	ldr	r3, [r7, #0]
 8012d4e:	781b      	ldrb	r3, [r3, #0]
 8012d50:	00da      	lsls	r2, r3, #3
 8012d52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012d54:	18d3      	adds	r3, r2, r3
 8012d56:	4a6d      	ldr	r2, [pc, #436]	@ (8012f0c <USB_EPStartXfer+0xaac>)
 8012d58:	4694      	mov	ip, r2
 8012d5a:	4463      	add	r3, ip
 8012d5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012d5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d60:	881b      	ldrh	r3, [r3, #0]
 8012d62:	b29b      	uxth	r3, r3
 8012d64:	059b      	lsls	r3, r3, #22
 8012d66:	0d9b      	lsrs	r3, r3, #22
 8012d68:	b29a      	uxth	r2, r3
 8012d6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d6c:	801a      	strh	r2, [r3, #0]
 8012d6e:	1d7b      	adds	r3, r7, #5
 8012d70:	33ff      	adds	r3, #255	@ 0xff
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	2b3e      	cmp	r3, #62	@ 0x3e
 8012d76:	d922      	bls.n	8012dbe <USB_EPStartXfer+0x95e>
 8012d78:	1d7b      	adds	r3, r7, #5
 8012d7a:	33ff      	adds	r3, #255	@ 0xff
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	095b      	lsrs	r3, r3, #5
 8012d80:	21ec      	movs	r1, #236	@ 0xec
 8012d82:	187a      	adds	r2, r7, r1
 8012d84:	6013      	str	r3, [r2, #0]
 8012d86:	1d7b      	adds	r3, r7, #5
 8012d88:	33ff      	adds	r3, #255	@ 0xff
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	221f      	movs	r2, #31
 8012d8e:	4013      	ands	r3, r2
 8012d90:	d104      	bne.n	8012d9c <USB_EPStartXfer+0x93c>
 8012d92:	187b      	adds	r3, r7, r1
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	3b01      	subs	r3, #1
 8012d98:	187a      	adds	r2, r7, r1
 8012d9a:	6013      	str	r3, [r2, #0]
 8012d9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d9e:	881b      	ldrh	r3, [r3, #0]
 8012da0:	b29a      	uxth	r2, r3
 8012da2:	23ec      	movs	r3, #236	@ 0xec
 8012da4:	18fb      	adds	r3, r7, r3
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	b29b      	uxth	r3, r3
 8012daa:	029b      	lsls	r3, r3, #10
 8012dac:	b29b      	uxth	r3, r3
 8012dae:	4313      	orrs	r3, r2
 8012db0:	b29b      	uxth	r3, r3
 8012db2:	4a55      	ldr	r2, [pc, #340]	@ (8012f08 <USB_EPStartXfer+0xaa8>)
 8012db4:	4313      	orrs	r3, r2
 8012db6:	b29a      	uxth	r2, r3
 8012db8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012dba:	801a      	strh	r2, [r3, #0]
 8012dbc:	e052      	b.n	8012e64 <USB_EPStartXfer+0xa04>
 8012dbe:	1d7b      	adds	r3, r7, #5
 8012dc0:	33ff      	adds	r3, #255	@ 0xff
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d108      	bne.n	8012dda <USB_EPStartXfer+0x97a>
 8012dc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012dca:	881b      	ldrh	r3, [r3, #0]
 8012dcc:	b29b      	uxth	r3, r3
 8012dce:	4a4e      	ldr	r2, [pc, #312]	@ (8012f08 <USB_EPStartXfer+0xaa8>)
 8012dd0:	4313      	orrs	r3, r2
 8012dd2:	b29a      	uxth	r2, r3
 8012dd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012dd6:	801a      	strh	r2, [r3, #0]
 8012dd8:	e044      	b.n	8012e64 <USB_EPStartXfer+0xa04>
 8012dda:	1d7b      	adds	r3, r7, #5
 8012ddc:	33ff      	adds	r3, #255	@ 0xff
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	085b      	lsrs	r3, r3, #1
 8012de2:	21ec      	movs	r1, #236	@ 0xec
 8012de4:	187a      	adds	r2, r7, r1
 8012de6:	6013      	str	r3, [r2, #0]
 8012de8:	1d7b      	adds	r3, r7, #5
 8012dea:	33ff      	adds	r3, #255	@ 0xff
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	2201      	movs	r2, #1
 8012df0:	4013      	ands	r3, r2
 8012df2:	d004      	beq.n	8012dfe <USB_EPStartXfer+0x99e>
 8012df4:	187b      	adds	r3, r7, r1
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	3301      	adds	r3, #1
 8012dfa:	187a      	adds	r2, r7, r1
 8012dfc:	6013      	str	r3, [r2, #0]
 8012dfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012e00:	881b      	ldrh	r3, [r3, #0]
 8012e02:	b29a      	uxth	r2, r3
 8012e04:	23ec      	movs	r3, #236	@ 0xec
 8012e06:	18fb      	adds	r3, r7, r3
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	b29b      	uxth	r3, r3
 8012e0c:	029b      	lsls	r3, r3, #10
 8012e0e:	b29b      	uxth	r3, r3
 8012e10:	4313      	orrs	r3, r2
 8012e12:	b29a      	uxth	r2, r3
 8012e14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012e16:	801a      	strh	r2, [r3, #0]
 8012e18:	e024      	b.n	8012e64 <USB_EPStartXfer+0xa04>
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	785b      	ldrb	r3, [r3, #1]
 8012e1e:	2b01      	cmp	r3, #1
 8012e20:	d120      	bne.n	8012e64 <USB_EPStartXfer+0xa04>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	2184      	movs	r1, #132	@ 0x84
 8012e26:	187a      	adds	r2, r7, r1
 8012e28:	6013      	str	r3, [r2, #0]
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2250      	movs	r2, #80	@ 0x50
 8012e2e:	5a9b      	ldrh	r3, [r3, r2]
 8012e30:	b29b      	uxth	r3, r3
 8012e32:	001a      	movs	r2, r3
 8012e34:	187b      	adds	r3, r7, r1
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	189b      	adds	r3, r3, r2
 8012e3a:	187a      	adds	r2, r7, r1
 8012e3c:	6013      	str	r3, [r2, #0]
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	781b      	ldrb	r3, [r3, #0]
 8012e42:	00da      	lsls	r2, r3, #3
 8012e44:	187b      	adds	r3, r7, r1
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	18d3      	adds	r3, r2, r3
 8012e4a:	4a30      	ldr	r2, [pc, #192]	@ (8012f0c <USB_EPStartXfer+0xaac>)
 8012e4c:	4694      	mov	ip, r2
 8012e4e:	4463      	add	r3, ip
 8012e50:	2180      	movs	r1, #128	@ 0x80
 8012e52:	187a      	adds	r2, r7, r1
 8012e54:	6013      	str	r3, [r2, #0]
 8012e56:	1d7b      	adds	r3, r7, #5
 8012e58:	33ff      	adds	r3, #255	@ 0xff
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	b29a      	uxth	r2, r3
 8012e5e:	187b      	adds	r3, r7, r1
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012e64:	2076      	movs	r0, #118	@ 0x76
 8012e66:	183b      	adds	r3, r7, r0
 8012e68:	683a      	ldr	r2, [r7, #0]
 8012e6a:	8912      	ldrh	r2, [r2, #8]
 8012e6c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	6959      	ldr	r1, [r3, #20]
 8012e72:	1d7b      	adds	r3, r7, #5
 8012e74:	33ff      	adds	r3, #255	@ 0xff
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	b29c      	uxth	r4, r3
 8012e7a:	183b      	adds	r3, r7, r0
 8012e7c:	881a      	ldrh	r2, [r3, #0]
 8012e7e:	6878      	ldr	r0, [r7, #4]
 8012e80:	0023      	movs	r3, r4
 8012e82:	f000 fd5f 	bl	8013944 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012e86:	687a      	ldr	r2, [r7, #4]
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	781b      	ldrb	r3, [r3, #0]
 8012e8c:	009b      	lsls	r3, r3, #2
 8012e8e:	18d3      	adds	r3, r2, r3
 8012e90:	881b      	ldrh	r3, [r3, #0]
 8012e92:	b29a      	uxth	r2, r3
 8012e94:	200a      	movs	r0, #10
 8012e96:	183b      	adds	r3, r7, r0
 8012e98:	491d      	ldr	r1, [pc, #116]	@ (8012f10 <USB_EPStartXfer+0xab0>)
 8012e9a:	400a      	ands	r2, r1
 8012e9c:	801a      	strh	r2, [r3, #0]
 8012e9e:	183b      	adds	r3, r7, r0
 8012ea0:	183a      	adds	r2, r7, r0
 8012ea2:	8812      	ldrh	r2, [r2, #0]
 8012ea4:	2110      	movs	r1, #16
 8012ea6:	404a      	eors	r2, r1
 8012ea8:	801a      	strh	r2, [r3, #0]
 8012eaa:	183b      	adds	r3, r7, r0
 8012eac:	183a      	adds	r2, r7, r0
 8012eae:	8812      	ldrh	r2, [r2, #0]
 8012eb0:	2120      	movs	r1, #32
 8012eb2:	404a      	eors	r2, r1
 8012eb4:	801a      	strh	r2, [r3, #0]
 8012eb6:	687a      	ldr	r2, [r7, #4]
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	781b      	ldrb	r3, [r3, #0]
 8012ebc:	009b      	lsls	r3, r3, #2
 8012ebe:	18d3      	adds	r3, r2, r3
 8012ec0:	183a      	adds	r2, r7, r0
 8012ec2:	8812      	ldrh	r2, [r2, #0]
 8012ec4:	4913      	ldr	r1, [pc, #76]	@ (8012f14 <USB_EPStartXfer+0xab4>)
 8012ec6:	430a      	orrs	r2, r1
 8012ec8:	b292      	uxth	r2, r2
 8012eca:	801a      	strh	r2, [r3, #0]
 8012ecc:	f000 fbf4 	bl	80136b8 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	7b1b      	ldrb	r3, [r3, #12]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d000      	beq.n	8012eda <USB_EPStartXfer+0xa7a>
 8012ed8:	e0a9      	b.n	801302e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012eda:	683b      	ldr	r3, [r7, #0]
 8012edc:	699a      	ldr	r2, [r3, #24]
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	691b      	ldr	r3, [r3, #16]
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	d918      	bls.n	8012f18 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	691b      	ldr	r3, [r3, #16]
 8012eea:	1d7a      	adds	r2, r7, #5
 8012eec:	32ff      	adds	r2, #255	@ 0xff
 8012eee:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	699a      	ldr	r2, [r3, #24]
 8012ef4:	1d7b      	adds	r3, r7, #5
 8012ef6:	33ff      	adds	r3, #255	@ 0xff
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	1ad2      	subs	r2, r2, r3
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	619a      	str	r2, [r3, #24]
 8012f00:	e012      	b.n	8012f28 <USB_EPStartXfer+0xac8>
 8012f02:	46c0      	nop			@ (mov r8, r8)
 8012f04:	00000406 	.word	0x00000406
 8012f08:	ffff8000 	.word	0xffff8000
 8012f0c:	00000402 	.word	0x00000402
 8012f10:	ffff8fbf 	.word	0xffff8fbf
 8012f14:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	699b      	ldr	r3, [r3, #24]
 8012f1c:	1d7a      	adds	r2, r7, #5
 8012f1e:	32ff      	adds	r2, #255	@ 0xff
 8012f20:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8012f22:	683b      	ldr	r3, [r7, #0]
 8012f24:	2200      	movs	r2, #0
 8012f26:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2190      	movs	r1, #144	@ 0x90
 8012f2c:	187a      	adds	r2, r7, r1
 8012f2e:	6013      	str	r3, [r2, #0]
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	2250      	movs	r2, #80	@ 0x50
 8012f34:	5a9b      	ldrh	r3, [r3, r2]
 8012f36:	b29b      	uxth	r3, r3
 8012f38:	001a      	movs	r2, r3
 8012f3a:	187b      	adds	r3, r7, r1
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	189b      	adds	r3, r3, r2
 8012f40:	187a      	adds	r2, r7, r1
 8012f42:	6013      	str	r3, [r2, #0]
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	781b      	ldrb	r3, [r3, #0]
 8012f48:	00da      	lsls	r2, r3, #3
 8012f4a:	187b      	adds	r3, r7, r1
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	18d3      	adds	r3, r2, r3
 8012f50:	4acf      	ldr	r2, [pc, #828]	@ (8013290 <USB_EPStartXfer+0xe30>)
 8012f52:	4694      	mov	ip, r2
 8012f54:	4463      	add	r3, ip
 8012f56:	218c      	movs	r1, #140	@ 0x8c
 8012f58:	187a      	adds	r2, r7, r1
 8012f5a:	6013      	str	r3, [r2, #0]
 8012f5c:	187b      	adds	r3, r7, r1
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	881b      	ldrh	r3, [r3, #0]
 8012f62:	b29b      	uxth	r3, r3
 8012f64:	059b      	lsls	r3, r3, #22
 8012f66:	0d9b      	lsrs	r3, r3, #22
 8012f68:	b29a      	uxth	r2, r3
 8012f6a:	187b      	adds	r3, r7, r1
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	801a      	strh	r2, [r3, #0]
 8012f70:	1d7b      	adds	r3, r7, #5
 8012f72:	33ff      	adds	r3, #255	@ 0xff
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	2b3e      	cmp	r3, #62	@ 0x3e
 8012f78:	d925      	bls.n	8012fc6 <USB_EPStartXfer+0xb66>
 8012f7a:	1d7b      	adds	r3, r7, #5
 8012f7c:	33ff      	adds	r3, #255	@ 0xff
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	095b      	lsrs	r3, r3, #5
 8012f82:	21e8      	movs	r1, #232	@ 0xe8
 8012f84:	187a      	adds	r2, r7, r1
 8012f86:	6013      	str	r3, [r2, #0]
 8012f88:	1d7b      	adds	r3, r7, #5
 8012f8a:	33ff      	adds	r3, #255	@ 0xff
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	221f      	movs	r2, #31
 8012f90:	4013      	ands	r3, r2
 8012f92:	d104      	bne.n	8012f9e <USB_EPStartXfer+0xb3e>
 8012f94:	187b      	adds	r3, r7, r1
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	3b01      	subs	r3, #1
 8012f9a:	187a      	adds	r2, r7, r1
 8012f9c:	6013      	str	r3, [r2, #0]
 8012f9e:	218c      	movs	r1, #140	@ 0x8c
 8012fa0:	187b      	adds	r3, r7, r1
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	881b      	ldrh	r3, [r3, #0]
 8012fa6:	b29a      	uxth	r2, r3
 8012fa8:	23e8      	movs	r3, #232	@ 0xe8
 8012faa:	18fb      	adds	r3, r7, r3
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	b29b      	uxth	r3, r3
 8012fb0:	029b      	lsls	r3, r3, #10
 8012fb2:	b29b      	uxth	r3, r3
 8012fb4:	4313      	orrs	r3, r2
 8012fb6:	b29b      	uxth	r3, r3
 8012fb8:	4ab6      	ldr	r2, [pc, #728]	@ (8013294 <USB_EPStartXfer+0xe34>)
 8012fba:	4313      	orrs	r3, r2
 8012fbc:	b29a      	uxth	r2, r3
 8012fbe:	187b      	adds	r3, r7, r1
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	801a      	strh	r2, [r3, #0]
 8012fc4:	e353      	b.n	801366e <USB_EPStartXfer+0x120e>
 8012fc6:	1d7b      	adds	r3, r7, #5
 8012fc8:	33ff      	adds	r3, #255	@ 0xff
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d10b      	bne.n	8012fe8 <USB_EPStartXfer+0xb88>
 8012fd0:	218c      	movs	r1, #140	@ 0x8c
 8012fd2:	187b      	adds	r3, r7, r1
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	881b      	ldrh	r3, [r3, #0]
 8012fd8:	b29b      	uxth	r3, r3
 8012fda:	4aae      	ldr	r2, [pc, #696]	@ (8013294 <USB_EPStartXfer+0xe34>)
 8012fdc:	4313      	orrs	r3, r2
 8012fde:	b29a      	uxth	r2, r3
 8012fe0:	187b      	adds	r3, r7, r1
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	801a      	strh	r2, [r3, #0]
 8012fe6:	e342      	b.n	801366e <USB_EPStartXfer+0x120e>
 8012fe8:	1d7b      	adds	r3, r7, #5
 8012fea:	33ff      	adds	r3, #255	@ 0xff
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	085b      	lsrs	r3, r3, #1
 8012ff0:	21e8      	movs	r1, #232	@ 0xe8
 8012ff2:	187a      	adds	r2, r7, r1
 8012ff4:	6013      	str	r3, [r2, #0]
 8012ff6:	1d7b      	adds	r3, r7, #5
 8012ff8:	33ff      	adds	r3, #255	@ 0xff
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	2201      	movs	r2, #1
 8012ffe:	4013      	ands	r3, r2
 8013000:	d004      	beq.n	801300c <USB_EPStartXfer+0xbac>
 8013002:	187b      	adds	r3, r7, r1
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	3301      	adds	r3, #1
 8013008:	187a      	adds	r2, r7, r1
 801300a:	6013      	str	r3, [r2, #0]
 801300c:	218c      	movs	r1, #140	@ 0x8c
 801300e:	187b      	adds	r3, r7, r1
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	881b      	ldrh	r3, [r3, #0]
 8013014:	b29a      	uxth	r2, r3
 8013016:	23e8      	movs	r3, #232	@ 0xe8
 8013018:	18fb      	adds	r3, r7, r3
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	b29b      	uxth	r3, r3
 801301e:	029b      	lsls	r3, r3, #10
 8013020:	b29b      	uxth	r3, r3
 8013022:	4313      	orrs	r3, r2
 8013024:	b29a      	uxth	r2, r3
 8013026:	187b      	adds	r3, r7, r1
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	801a      	strh	r2, [r3, #0]
 801302c:	e31f      	b.n	801366e <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	78db      	ldrb	r3, [r3, #3]
 8013032:	2b02      	cmp	r3, #2
 8013034:	d000      	beq.n	8013038 <USB_EPStartXfer+0xbd8>
 8013036:	e191      	b.n	801335c <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	785b      	ldrb	r3, [r3, #1]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d000      	beq.n	8013042 <USB_EPStartXfer+0xbe2>
 8013040:	e07c      	b.n	801313c <USB_EPStartXfer+0xcdc>
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	21ac      	movs	r1, #172	@ 0xac
 8013046:	187a      	adds	r2, r7, r1
 8013048:	6013      	str	r3, [r2, #0]
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	2250      	movs	r2, #80	@ 0x50
 801304e:	5a9b      	ldrh	r3, [r3, r2]
 8013050:	b29b      	uxth	r3, r3
 8013052:	001a      	movs	r2, r3
 8013054:	187b      	adds	r3, r7, r1
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	189b      	adds	r3, r3, r2
 801305a:	187a      	adds	r2, r7, r1
 801305c:	6013      	str	r3, [r2, #0]
 801305e:	683b      	ldr	r3, [r7, #0]
 8013060:	781b      	ldrb	r3, [r3, #0]
 8013062:	00da      	lsls	r2, r3, #3
 8013064:	187b      	adds	r3, r7, r1
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	18d3      	adds	r3, r2, r3
 801306a:	4a8b      	ldr	r2, [pc, #556]	@ (8013298 <USB_EPStartXfer+0xe38>)
 801306c:	4694      	mov	ip, r2
 801306e:	4463      	add	r3, ip
 8013070:	21a8      	movs	r1, #168	@ 0xa8
 8013072:	187a      	adds	r2, r7, r1
 8013074:	6013      	str	r3, [r2, #0]
 8013076:	187b      	adds	r3, r7, r1
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	881b      	ldrh	r3, [r3, #0]
 801307c:	b29b      	uxth	r3, r3
 801307e:	059b      	lsls	r3, r3, #22
 8013080:	0d9b      	lsrs	r3, r3, #22
 8013082:	b29a      	uxth	r2, r3
 8013084:	187b      	adds	r3, r7, r1
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	801a      	strh	r2, [r3, #0]
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	691b      	ldr	r3, [r3, #16]
 801308e:	2b3e      	cmp	r3, #62	@ 0x3e
 8013090:	d923      	bls.n	80130da <USB_EPStartXfer+0xc7a>
 8013092:	683b      	ldr	r3, [r7, #0]
 8013094:	691b      	ldr	r3, [r3, #16]
 8013096:	095b      	lsrs	r3, r3, #5
 8013098:	21e4      	movs	r1, #228	@ 0xe4
 801309a:	187a      	adds	r2, r7, r1
 801309c:	6013      	str	r3, [r2, #0]
 801309e:	683b      	ldr	r3, [r7, #0]
 80130a0:	691b      	ldr	r3, [r3, #16]
 80130a2:	221f      	movs	r2, #31
 80130a4:	4013      	ands	r3, r2
 80130a6:	d104      	bne.n	80130b2 <USB_EPStartXfer+0xc52>
 80130a8:	187b      	adds	r3, r7, r1
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	3b01      	subs	r3, #1
 80130ae:	187a      	adds	r2, r7, r1
 80130b0:	6013      	str	r3, [r2, #0]
 80130b2:	21a8      	movs	r1, #168	@ 0xa8
 80130b4:	187b      	adds	r3, r7, r1
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	881b      	ldrh	r3, [r3, #0]
 80130ba:	b29a      	uxth	r2, r3
 80130bc:	23e4      	movs	r3, #228	@ 0xe4
 80130be:	18fb      	adds	r3, r7, r3
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	b29b      	uxth	r3, r3
 80130c4:	029b      	lsls	r3, r3, #10
 80130c6:	b29b      	uxth	r3, r3
 80130c8:	4313      	orrs	r3, r2
 80130ca:	b29b      	uxth	r3, r3
 80130cc:	4a71      	ldr	r2, [pc, #452]	@ (8013294 <USB_EPStartXfer+0xe34>)
 80130ce:	4313      	orrs	r3, r2
 80130d0:	b29a      	uxth	r2, r3
 80130d2:	187b      	adds	r3, r7, r1
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	801a      	strh	r2, [r3, #0]
 80130d8:	e054      	b.n	8013184 <USB_EPStartXfer+0xd24>
 80130da:	683b      	ldr	r3, [r7, #0]
 80130dc:	691b      	ldr	r3, [r3, #16]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d10b      	bne.n	80130fa <USB_EPStartXfer+0xc9a>
 80130e2:	21a8      	movs	r1, #168	@ 0xa8
 80130e4:	187b      	adds	r3, r7, r1
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	881b      	ldrh	r3, [r3, #0]
 80130ea:	b29b      	uxth	r3, r3
 80130ec:	4a69      	ldr	r2, [pc, #420]	@ (8013294 <USB_EPStartXfer+0xe34>)
 80130ee:	4313      	orrs	r3, r2
 80130f0:	b29a      	uxth	r2, r3
 80130f2:	187b      	adds	r3, r7, r1
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	801a      	strh	r2, [r3, #0]
 80130f8:	e044      	b.n	8013184 <USB_EPStartXfer+0xd24>
 80130fa:	683b      	ldr	r3, [r7, #0]
 80130fc:	691b      	ldr	r3, [r3, #16]
 80130fe:	085b      	lsrs	r3, r3, #1
 8013100:	21e4      	movs	r1, #228	@ 0xe4
 8013102:	187a      	adds	r2, r7, r1
 8013104:	6013      	str	r3, [r2, #0]
 8013106:	683b      	ldr	r3, [r7, #0]
 8013108:	691b      	ldr	r3, [r3, #16]
 801310a:	2201      	movs	r2, #1
 801310c:	4013      	ands	r3, r2
 801310e:	d004      	beq.n	801311a <USB_EPStartXfer+0xcba>
 8013110:	187b      	adds	r3, r7, r1
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	3301      	adds	r3, #1
 8013116:	187a      	adds	r2, r7, r1
 8013118:	6013      	str	r3, [r2, #0]
 801311a:	21a8      	movs	r1, #168	@ 0xa8
 801311c:	187b      	adds	r3, r7, r1
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	881b      	ldrh	r3, [r3, #0]
 8013122:	b29a      	uxth	r2, r3
 8013124:	23e4      	movs	r3, #228	@ 0xe4
 8013126:	18fb      	adds	r3, r7, r3
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	b29b      	uxth	r3, r3
 801312c:	029b      	lsls	r3, r3, #10
 801312e:	b29b      	uxth	r3, r3
 8013130:	4313      	orrs	r3, r2
 8013132:	b29a      	uxth	r2, r3
 8013134:	187b      	adds	r3, r7, r1
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	801a      	strh	r2, [r3, #0]
 801313a:	e023      	b.n	8013184 <USB_EPStartXfer+0xd24>
 801313c:	683b      	ldr	r3, [r7, #0]
 801313e:	785b      	ldrb	r3, [r3, #1]
 8013140:	2b01      	cmp	r3, #1
 8013142:	d11f      	bne.n	8013184 <USB_EPStartXfer+0xd24>
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	21b4      	movs	r1, #180	@ 0xb4
 8013148:	187a      	adds	r2, r7, r1
 801314a:	6013      	str	r3, [r2, #0]
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2250      	movs	r2, #80	@ 0x50
 8013150:	5a9b      	ldrh	r3, [r3, r2]
 8013152:	b29b      	uxth	r3, r3
 8013154:	001a      	movs	r2, r3
 8013156:	187b      	adds	r3, r7, r1
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	189b      	adds	r3, r3, r2
 801315c:	187a      	adds	r2, r7, r1
 801315e:	6013      	str	r3, [r2, #0]
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	781b      	ldrb	r3, [r3, #0]
 8013164:	00da      	lsls	r2, r3, #3
 8013166:	187b      	adds	r3, r7, r1
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	18d3      	adds	r3, r2, r3
 801316c:	4a4a      	ldr	r2, [pc, #296]	@ (8013298 <USB_EPStartXfer+0xe38>)
 801316e:	4694      	mov	ip, r2
 8013170:	4463      	add	r3, ip
 8013172:	21b0      	movs	r1, #176	@ 0xb0
 8013174:	187a      	adds	r2, r7, r1
 8013176:	6013      	str	r3, [r2, #0]
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	691b      	ldr	r3, [r3, #16]
 801317c:	b29a      	uxth	r2, r3
 801317e:	187b      	adds	r3, r7, r1
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	801a      	strh	r2, [r3, #0]
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	22a4      	movs	r2, #164	@ 0xa4
 8013188:	18ba      	adds	r2, r7, r2
 801318a:	6013      	str	r3, [r2, #0]
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	785b      	ldrb	r3, [r3, #1]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d000      	beq.n	8013196 <USB_EPStartXfer+0xd36>
 8013194:	e082      	b.n	801329c <USB_EPStartXfer+0xe3c>
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	219c      	movs	r1, #156	@ 0x9c
 801319a:	187a      	adds	r2, r7, r1
 801319c:	6013      	str	r3, [r2, #0]
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	2250      	movs	r2, #80	@ 0x50
 80131a2:	5a9b      	ldrh	r3, [r3, r2]
 80131a4:	b29b      	uxth	r3, r3
 80131a6:	001a      	movs	r2, r3
 80131a8:	187b      	adds	r3, r7, r1
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	189b      	adds	r3, r3, r2
 80131ae:	187a      	adds	r2, r7, r1
 80131b0:	6013      	str	r3, [r2, #0]
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	781b      	ldrb	r3, [r3, #0]
 80131b6:	00da      	lsls	r2, r3, #3
 80131b8:	187b      	adds	r3, r7, r1
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	18d3      	adds	r3, r2, r3
 80131be:	4a34      	ldr	r2, [pc, #208]	@ (8013290 <USB_EPStartXfer+0xe30>)
 80131c0:	4694      	mov	ip, r2
 80131c2:	4463      	add	r3, ip
 80131c4:	2198      	movs	r1, #152	@ 0x98
 80131c6:	187a      	adds	r2, r7, r1
 80131c8:	6013      	str	r3, [r2, #0]
 80131ca:	187b      	adds	r3, r7, r1
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	881b      	ldrh	r3, [r3, #0]
 80131d0:	b29b      	uxth	r3, r3
 80131d2:	059b      	lsls	r3, r3, #22
 80131d4:	0d9b      	lsrs	r3, r3, #22
 80131d6:	b29a      	uxth	r2, r3
 80131d8:	187b      	adds	r3, r7, r1
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	801a      	strh	r2, [r3, #0]
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	691b      	ldr	r3, [r3, #16]
 80131e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80131e4:	d923      	bls.n	801322e <USB_EPStartXfer+0xdce>
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	691b      	ldr	r3, [r3, #16]
 80131ea:	095b      	lsrs	r3, r3, #5
 80131ec:	21e0      	movs	r1, #224	@ 0xe0
 80131ee:	187a      	adds	r2, r7, r1
 80131f0:	6013      	str	r3, [r2, #0]
 80131f2:	683b      	ldr	r3, [r7, #0]
 80131f4:	691b      	ldr	r3, [r3, #16]
 80131f6:	221f      	movs	r2, #31
 80131f8:	4013      	ands	r3, r2
 80131fa:	d104      	bne.n	8013206 <USB_EPStartXfer+0xda6>
 80131fc:	187b      	adds	r3, r7, r1
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	3b01      	subs	r3, #1
 8013202:	187a      	adds	r2, r7, r1
 8013204:	6013      	str	r3, [r2, #0]
 8013206:	2198      	movs	r1, #152	@ 0x98
 8013208:	187b      	adds	r3, r7, r1
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	881b      	ldrh	r3, [r3, #0]
 801320e:	b29a      	uxth	r2, r3
 8013210:	23e0      	movs	r3, #224	@ 0xe0
 8013212:	18fb      	adds	r3, r7, r3
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	b29b      	uxth	r3, r3
 8013218:	029b      	lsls	r3, r3, #10
 801321a:	b29b      	uxth	r3, r3
 801321c:	4313      	orrs	r3, r2
 801321e:	b29b      	uxth	r3, r3
 8013220:	4a1c      	ldr	r2, [pc, #112]	@ (8013294 <USB_EPStartXfer+0xe34>)
 8013222:	4313      	orrs	r3, r2
 8013224:	b29a      	uxth	r2, r3
 8013226:	187b      	adds	r3, r7, r1
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	801a      	strh	r2, [r3, #0]
 801322c:	e057      	b.n	80132de <USB_EPStartXfer+0xe7e>
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	691b      	ldr	r3, [r3, #16]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d10b      	bne.n	801324e <USB_EPStartXfer+0xdee>
 8013236:	2198      	movs	r1, #152	@ 0x98
 8013238:	187b      	adds	r3, r7, r1
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	881b      	ldrh	r3, [r3, #0]
 801323e:	b29b      	uxth	r3, r3
 8013240:	4a14      	ldr	r2, [pc, #80]	@ (8013294 <USB_EPStartXfer+0xe34>)
 8013242:	4313      	orrs	r3, r2
 8013244:	b29a      	uxth	r2, r3
 8013246:	187b      	adds	r3, r7, r1
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	801a      	strh	r2, [r3, #0]
 801324c:	e047      	b.n	80132de <USB_EPStartXfer+0xe7e>
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	691b      	ldr	r3, [r3, #16]
 8013252:	085b      	lsrs	r3, r3, #1
 8013254:	21e0      	movs	r1, #224	@ 0xe0
 8013256:	187a      	adds	r2, r7, r1
 8013258:	6013      	str	r3, [r2, #0]
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	691b      	ldr	r3, [r3, #16]
 801325e:	2201      	movs	r2, #1
 8013260:	4013      	ands	r3, r2
 8013262:	d004      	beq.n	801326e <USB_EPStartXfer+0xe0e>
 8013264:	187b      	adds	r3, r7, r1
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	3301      	adds	r3, #1
 801326a:	187a      	adds	r2, r7, r1
 801326c:	6013      	str	r3, [r2, #0]
 801326e:	2198      	movs	r1, #152	@ 0x98
 8013270:	187b      	adds	r3, r7, r1
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	881b      	ldrh	r3, [r3, #0]
 8013276:	b29a      	uxth	r2, r3
 8013278:	23e0      	movs	r3, #224	@ 0xe0
 801327a:	18fb      	adds	r3, r7, r3
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	b29b      	uxth	r3, r3
 8013280:	029b      	lsls	r3, r3, #10
 8013282:	b29b      	uxth	r3, r3
 8013284:	4313      	orrs	r3, r2
 8013286:	b29a      	uxth	r2, r3
 8013288:	187b      	adds	r3, r7, r1
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	801a      	strh	r2, [r3, #0]
 801328e:	e026      	b.n	80132de <USB_EPStartXfer+0xe7e>
 8013290:	00000406 	.word	0x00000406
 8013294:	ffff8000 	.word	0xffff8000
 8013298:	00000402 	.word	0x00000402
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	785b      	ldrb	r3, [r3, #1]
 80132a0:	2b01      	cmp	r3, #1
 80132a2:	d11c      	bne.n	80132de <USB_EPStartXfer+0xe7e>
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2250      	movs	r2, #80	@ 0x50
 80132a8:	5a9b      	ldrh	r3, [r3, r2]
 80132aa:	b29b      	uxth	r3, r3
 80132ac:	001a      	movs	r2, r3
 80132ae:	21a4      	movs	r1, #164	@ 0xa4
 80132b0:	187b      	adds	r3, r7, r1
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	189b      	adds	r3, r3, r2
 80132b6:	187a      	adds	r2, r7, r1
 80132b8:	6013      	str	r3, [r2, #0]
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	781b      	ldrb	r3, [r3, #0]
 80132be:	00da      	lsls	r2, r3, #3
 80132c0:	187b      	adds	r3, r7, r1
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	18d3      	adds	r3, r2, r3
 80132c6:	4ad2      	ldr	r2, [pc, #840]	@ (8013610 <USB_EPStartXfer+0x11b0>)
 80132c8:	4694      	mov	ip, r2
 80132ca:	4463      	add	r3, ip
 80132cc:	21a0      	movs	r1, #160	@ 0xa0
 80132ce:	187a      	adds	r2, r7, r1
 80132d0:	6013      	str	r3, [r2, #0]
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	691b      	ldr	r3, [r3, #16]
 80132d6:	b29a      	uxth	r2, r3
 80132d8:	187b      	adds	r3, r7, r1
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	69db      	ldr	r3, [r3, #28]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d100      	bne.n	80132e8 <USB_EPStartXfer+0xe88>
 80132e6:	e1c2      	b.n	801366e <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80132e8:	687a      	ldr	r2, [r7, #4]
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	781b      	ldrb	r3, [r3, #0]
 80132ee:	009b      	lsls	r3, r3, #2
 80132f0:	18d2      	adds	r2, r2, r3
 80132f2:	2196      	movs	r1, #150	@ 0x96
 80132f4:	187b      	adds	r3, r7, r1
 80132f6:	8812      	ldrh	r2, [r2, #0]
 80132f8:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80132fa:	187b      	adds	r3, r7, r1
 80132fc:	881a      	ldrh	r2, [r3, #0]
 80132fe:	2380      	movs	r3, #128	@ 0x80
 8013300:	01db      	lsls	r3, r3, #7
 8013302:	4013      	ands	r3, r2
 8013304:	d004      	beq.n	8013310 <USB_EPStartXfer+0xeb0>
 8013306:	187b      	adds	r3, r7, r1
 8013308:	881b      	ldrh	r3, [r3, #0]
 801330a:	2240      	movs	r2, #64	@ 0x40
 801330c:	4013      	ands	r3, r2
 801330e:	d10d      	bne.n	801332c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8013310:	2196      	movs	r1, #150	@ 0x96
 8013312:	187b      	adds	r3, r7, r1
 8013314:	881a      	ldrh	r2, [r3, #0]
 8013316:	2380      	movs	r3, #128	@ 0x80
 8013318:	01db      	lsls	r3, r3, #7
 801331a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801331c:	d000      	beq.n	8013320 <USB_EPStartXfer+0xec0>
 801331e:	e1a6      	b.n	801366e <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8013320:	187b      	adds	r3, r7, r1
 8013322:	881b      	ldrh	r3, [r3, #0]
 8013324:	2240      	movs	r2, #64	@ 0x40
 8013326:	4013      	ands	r3, r2
 8013328:	d000      	beq.n	801332c <USB_EPStartXfer+0xecc>
 801332a:	e1a0      	b.n	801366e <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801332c:	687a      	ldr	r2, [r7, #4]
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	781b      	ldrb	r3, [r3, #0]
 8013332:	009b      	lsls	r3, r3, #2
 8013334:	18d3      	adds	r3, r2, r3
 8013336:	881b      	ldrh	r3, [r3, #0]
 8013338:	b29a      	uxth	r2, r3
 801333a:	2094      	movs	r0, #148	@ 0x94
 801333c:	183b      	adds	r3, r7, r0
 801333e:	49b5      	ldr	r1, [pc, #724]	@ (8013614 <USB_EPStartXfer+0x11b4>)
 8013340:	400a      	ands	r2, r1
 8013342:	801a      	strh	r2, [r3, #0]
 8013344:	687a      	ldr	r2, [r7, #4]
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	781b      	ldrb	r3, [r3, #0]
 801334a:	009b      	lsls	r3, r3, #2
 801334c:	18d3      	adds	r3, r2, r3
 801334e:	183a      	adds	r2, r7, r0
 8013350:	8812      	ldrh	r2, [r2, #0]
 8013352:	49b1      	ldr	r1, [pc, #708]	@ (8013618 <USB_EPStartXfer+0x11b8>)
 8013354:	430a      	orrs	r2, r1
 8013356:	b292      	uxth	r2, r2
 8013358:	801a      	strh	r2, [r3, #0]
 801335a:	e188      	b.n	801366e <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801335c:	683b      	ldr	r3, [r7, #0]
 801335e:	78db      	ldrb	r3, [r3, #3]
 8013360:	2b01      	cmp	r3, #1
 8013362:	d000      	beq.n	8013366 <USB_EPStartXfer+0xf06>
 8013364:	e181      	b.n	801366a <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8013366:	683b      	ldr	r3, [r7, #0]
 8013368:	699a      	ldr	r2, [r3, #24]
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	691b      	ldr	r3, [r3, #16]
 801336e:	429a      	cmp	r2, r3
 8013370:	d90d      	bls.n	801338e <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8013372:	683b      	ldr	r3, [r7, #0]
 8013374:	691b      	ldr	r3, [r3, #16]
 8013376:	1d7a      	adds	r2, r7, #5
 8013378:	32ff      	adds	r2, #255	@ 0xff
 801337a:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	699a      	ldr	r2, [r3, #24]
 8013380:	1d7b      	adds	r3, r7, #5
 8013382:	33ff      	adds	r3, #255	@ 0xff
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	1ad2      	subs	r2, r2, r3
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	619a      	str	r2, [r3, #24]
 801338c:	e007      	b.n	801339e <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801338e:	683b      	ldr	r3, [r7, #0]
 8013390:	699b      	ldr	r3, [r3, #24]
 8013392:	1d7a      	adds	r2, r7, #5
 8013394:	32ff      	adds	r2, #255	@ 0xff
 8013396:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	2200      	movs	r2, #0
 801339c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801339e:	683b      	ldr	r3, [r7, #0]
 80133a0:	785b      	ldrb	r3, [r3, #1]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d000      	beq.n	80133a8 <USB_EPStartXfer+0xf48>
 80133a6:	e082      	b.n	80134ae <USB_EPStartXfer+0x104e>
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	21cc      	movs	r1, #204	@ 0xcc
 80133ac:	187a      	adds	r2, r7, r1
 80133ae:	6013      	str	r3, [r2, #0]
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	2250      	movs	r2, #80	@ 0x50
 80133b4:	5a9b      	ldrh	r3, [r3, r2]
 80133b6:	b29b      	uxth	r3, r3
 80133b8:	001a      	movs	r2, r3
 80133ba:	187b      	adds	r3, r7, r1
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	189b      	adds	r3, r3, r2
 80133c0:	187a      	adds	r2, r7, r1
 80133c2:	6013      	str	r3, [r2, #0]
 80133c4:	683b      	ldr	r3, [r7, #0]
 80133c6:	781b      	ldrb	r3, [r3, #0]
 80133c8:	00da      	lsls	r2, r3, #3
 80133ca:	187b      	adds	r3, r7, r1
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	18d3      	adds	r3, r2, r3
 80133d0:	4a92      	ldr	r2, [pc, #584]	@ (801361c <USB_EPStartXfer+0x11bc>)
 80133d2:	4694      	mov	ip, r2
 80133d4:	4463      	add	r3, ip
 80133d6:	21c8      	movs	r1, #200	@ 0xc8
 80133d8:	187a      	adds	r2, r7, r1
 80133da:	6013      	str	r3, [r2, #0]
 80133dc:	187b      	adds	r3, r7, r1
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	881b      	ldrh	r3, [r3, #0]
 80133e2:	b29b      	uxth	r3, r3
 80133e4:	059b      	lsls	r3, r3, #22
 80133e6:	0d9b      	lsrs	r3, r3, #22
 80133e8:	b29a      	uxth	r2, r3
 80133ea:	187b      	adds	r3, r7, r1
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	801a      	strh	r2, [r3, #0]
 80133f0:	1d7b      	adds	r3, r7, #5
 80133f2:	33ff      	adds	r3, #255	@ 0xff
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80133f8:	d925      	bls.n	8013446 <USB_EPStartXfer+0xfe6>
 80133fa:	1d7b      	adds	r3, r7, #5
 80133fc:	33ff      	adds	r3, #255	@ 0xff
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	095b      	lsrs	r3, r3, #5
 8013402:	21dc      	movs	r1, #220	@ 0xdc
 8013404:	187a      	adds	r2, r7, r1
 8013406:	6013      	str	r3, [r2, #0]
 8013408:	1d7b      	adds	r3, r7, #5
 801340a:	33ff      	adds	r3, #255	@ 0xff
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	221f      	movs	r2, #31
 8013410:	4013      	ands	r3, r2
 8013412:	d104      	bne.n	801341e <USB_EPStartXfer+0xfbe>
 8013414:	187b      	adds	r3, r7, r1
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	3b01      	subs	r3, #1
 801341a:	187a      	adds	r2, r7, r1
 801341c:	6013      	str	r3, [r2, #0]
 801341e:	21c8      	movs	r1, #200	@ 0xc8
 8013420:	187b      	adds	r3, r7, r1
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	881b      	ldrh	r3, [r3, #0]
 8013426:	b29a      	uxth	r2, r3
 8013428:	23dc      	movs	r3, #220	@ 0xdc
 801342a:	18fb      	adds	r3, r7, r3
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	b29b      	uxth	r3, r3
 8013430:	029b      	lsls	r3, r3, #10
 8013432:	b29b      	uxth	r3, r3
 8013434:	4313      	orrs	r3, r2
 8013436:	b29b      	uxth	r3, r3
 8013438:	4a79      	ldr	r2, [pc, #484]	@ (8013620 <USB_EPStartXfer+0x11c0>)
 801343a:	4313      	orrs	r3, r2
 801343c:	b29a      	uxth	r2, r3
 801343e:	187b      	adds	r3, r7, r1
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	801a      	strh	r2, [r3, #0]
 8013444:	e058      	b.n	80134f8 <USB_EPStartXfer+0x1098>
 8013446:	1d7b      	adds	r3, r7, #5
 8013448:	33ff      	adds	r3, #255	@ 0xff
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d10b      	bne.n	8013468 <USB_EPStartXfer+0x1008>
 8013450:	21c8      	movs	r1, #200	@ 0xc8
 8013452:	187b      	adds	r3, r7, r1
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	881b      	ldrh	r3, [r3, #0]
 8013458:	b29b      	uxth	r3, r3
 801345a:	4a71      	ldr	r2, [pc, #452]	@ (8013620 <USB_EPStartXfer+0x11c0>)
 801345c:	4313      	orrs	r3, r2
 801345e:	b29a      	uxth	r2, r3
 8013460:	187b      	adds	r3, r7, r1
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	801a      	strh	r2, [r3, #0]
 8013466:	e047      	b.n	80134f8 <USB_EPStartXfer+0x1098>
 8013468:	1d7b      	adds	r3, r7, #5
 801346a:	33ff      	adds	r3, #255	@ 0xff
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	085b      	lsrs	r3, r3, #1
 8013470:	21dc      	movs	r1, #220	@ 0xdc
 8013472:	187a      	adds	r2, r7, r1
 8013474:	6013      	str	r3, [r2, #0]
 8013476:	1d7b      	adds	r3, r7, #5
 8013478:	33ff      	adds	r3, #255	@ 0xff
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	2201      	movs	r2, #1
 801347e:	4013      	ands	r3, r2
 8013480:	d004      	beq.n	801348c <USB_EPStartXfer+0x102c>
 8013482:	187b      	adds	r3, r7, r1
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	3301      	adds	r3, #1
 8013488:	187a      	adds	r2, r7, r1
 801348a:	6013      	str	r3, [r2, #0]
 801348c:	21c8      	movs	r1, #200	@ 0xc8
 801348e:	187b      	adds	r3, r7, r1
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	881b      	ldrh	r3, [r3, #0]
 8013494:	b29a      	uxth	r2, r3
 8013496:	23dc      	movs	r3, #220	@ 0xdc
 8013498:	18fb      	adds	r3, r7, r3
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	b29b      	uxth	r3, r3
 801349e:	029b      	lsls	r3, r3, #10
 80134a0:	b29b      	uxth	r3, r3
 80134a2:	4313      	orrs	r3, r2
 80134a4:	b29a      	uxth	r2, r3
 80134a6:	187b      	adds	r3, r7, r1
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	801a      	strh	r2, [r3, #0]
 80134ac:	e024      	b.n	80134f8 <USB_EPStartXfer+0x1098>
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	785b      	ldrb	r3, [r3, #1]
 80134b2:	2b01      	cmp	r3, #1
 80134b4:	d120      	bne.n	80134f8 <USB_EPStartXfer+0x1098>
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	21d4      	movs	r1, #212	@ 0xd4
 80134ba:	187a      	adds	r2, r7, r1
 80134bc:	6013      	str	r3, [r2, #0]
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	2250      	movs	r2, #80	@ 0x50
 80134c2:	5a9b      	ldrh	r3, [r3, r2]
 80134c4:	b29b      	uxth	r3, r3
 80134c6:	001a      	movs	r2, r3
 80134c8:	187b      	adds	r3, r7, r1
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	189b      	adds	r3, r3, r2
 80134ce:	187a      	adds	r2, r7, r1
 80134d0:	6013      	str	r3, [r2, #0]
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	781b      	ldrb	r3, [r3, #0]
 80134d6:	00da      	lsls	r2, r3, #3
 80134d8:	187b      	adds	r3, r7, r1
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	18d3      	adds	r3, r2, r3
 80134de:	4a4f      	ldr	r2, [pc, #316]	@ (801361c <USB_EPStartXfer+0x11bc>)
 80134e0:	4694      	mov	ip, r2
 80134e2:	4463      	add	r3, ip
 80134e4:	21d0      	movs	r1, #208	@ 0xd0
 80134e6:	187a      	adds	r2, r7, r1
 80134e8:	6013      	str	r3, [r2, #0]
 80134ea:	1d7b      	adds	r3, r7, #5
 80134ec:	33ff      	adds	r3, #255	@ 0xff
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	b29a      	uxth	r2, r3
 80134f2:	187b      	adds	r3, r7, r1
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	801a      	strh	r2, [r3, #0]
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	22c4      	movs	r2, #196	@ 0xc4
 80134fc:	18ba      	adds	r2, r7, r2
 80134fe:	6013      	str	r3, [r2, #0]
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	785b      	ldrb	r3, [r3, #1]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d000      	beq.n	801350a <USB_EPStartXfer+0x10aa>
 8013508:	e08c      	b.n	8013624 <USB_EPStartXfer+0x11c4>
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	21bc      	movs	r1, #188	@ 0xbc
 801350e:	187a      	adds	r2, r7, r1
 8013510:	6013      	str	r3, [r2, #0]
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	2250      	movs	r2, #80	@ 0x50
 8013516:	5a9b      	ldrh	r3, [r3, r2]
 8013518:	b29b      	uxth	r3, r3
 801351a:	001a      	movs	r2, r3
 801351c:	187b      	adds	r3, r7, r1
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	189b      	adds	r3, r3, r2
 8013522:	187a      	adds	r2, r7, r1
 8013524:	6013      	str	r3, [r2, #0]
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	781b      	ldrb	r3, [r3, #0]
 801352a:	00da      	lsls	r2, r3, #3
 801352c:	187b      	adds	r3, r7, r1
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	18d3      	adds	r3, r2, r3
 8013532:	4a37      	ldr	r2, [pc, #220]	@ (8013610 <USB_EPStartXfer+0x11b0>)
 8013534:	4694      	mov	ip, r2
 8013536:	4463      	add	r3, ip
 8013538:	21b8      	movs	r1, #184	@ 0xb8
 801353a:	187a      	adds	r2, r7, r1
 801353c:	6013      	str	r3, [r2, #0]
 801353e:	187b      	adds	r3, r7, r1
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	881b      	ldrh	r3, [r3, #0]
 8013544:	b29b      	uxth	r3, r3
 8013546:	059b      	lsls	r3, r3, #22
 8013548:	0d9b      	lsrs	r3, r3, #22
 801354a:	b29a      	uxth	r2, r3
 801354c:	187b      	adds	r3, r7, r1
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	801a      	strh	r2, [r3, #0]
 8013552:	1d7b      	adds	r3, r7, #5
 8013554:	33ff      	adds	r3, #255	@ 0xff
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	2b3e      	cmp	r3, #62	@ 0x3e
 801355a:	d925      	bls.n	80135a8 <USB_EPStartXfer+0x1148>
 801355c:	1d7b      	adds	r3, r7, #5
 801355e:	33ff      	adds	r3, #255	@ 0xff
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	095b      	lsrs	r3, r3, #5
 8013564:	21d8      	movs	r1, #216	@ 0xd8
 8013566:	187a      	adds	r2, r7, r1
 8013568:	6013      	str	r3, [r2, #0]
 801356a:	1d7b      	adds	r3, r7, #5
 801356c:	33ff      	adds	r3, #255	@ 0xff
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	221f      	movs	r2, #31
 8013572:	4013      	ands	r3, r2
 8013574:	d104      	bne.n	8013580 <USB_EPStartXfer+0x1120>
 8013576:	187b      	adds	r3, r7, r1
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	3b01      	subs	r3, #1
 801357c:	187a      	adds	r2, r7, r1
 801357e:	6013      	str	r3, [r2, #0]
 8013580:	21b8      	movs	r1, #184	@ 0xb8
 8013582:	187b      	adds	r3, r7, r1
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	881b      	ldrh	r3, [r3, #0]
 8013588:	b29a      	uxth	r2, r3
 801358a:	23d8      	movs	r3, #216	@ 0xd8
 801358c:	18fb      	adds	r3, r7, r3
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	b29b      	uxth	r3, r3
 8013592:	029b      	lsls	r3, r3, #10
 8013594:	b29b      	uxth	r3, r3
 8013596:	4313      	orrs	r3, r2
 8013598:	b29b      	uxth	r3, r3
 801359a:	4a21      	ldr	r2, [pc, #132]	@ (8013620 <USB_EPStartXfer+0x11c0>)
 801359c:	4313      	orrs	r3, r2
 801359e:	b29a      	uxth	r2, r3
 80135a0:	187b      	adds	r3, r7, r1
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	801a      	strh	r2, [r3, #0]
 80135a6:	e062      	b.n	801366e <USB_EPStartXfer+0x120e>
 80135a8:	1d7b      	adds	r3, r7, #5
 80135aa:	33ff      	adds	r3, #255	@ 0xff
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d10b      	bne.n	80135ca <USB_EPStartXfer+0x116a>
 80135b2:	21b8      	movs	r1, #184	@ 0xb8
 80135b4:	187b      	adds	r3, r7, r1
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	881b      	ldrh	r3, [r3, #0]
 80135ba:	b29b      	uxth	r3, r3
 80135bc:	4a18      	ldr	r2, [pc, #96]	@ (8013620 <USB_EPStartXfer+0x11c0>)
 80135be:	4313      	orrs	r3, r2
 80135c0:	b29a      	uxth	r2, r3
 80135c2:	187b      	adds	r3, r7, r1
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	801a      	strh	r2, [r3, #0]
 80135c8:	e051      	b.n	801366e <USB_EPStartXfer+0x120e>
 80135ca:	1d7b      	adds	r3, r7, #5
 80135cc:	33ff      	adds	r3, #255	@ 0xff
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	085b      	lsrs	r3, r3, #1
 80135d2:	21d8      	movs	r1, #216	@ 0xd8
 80135d4:	187a      	adds	r2, r7, r1
 80135d6:	6013      	str	r3, [r2, #0]
 80135d8:	1d7b      	adds	r3, r7, #5
 80135da:	33ff      	adds	r3, #255	@ 0xff
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	2201      	movs	r2, #1
 80135e0:	4013      	ands	r3, r2
 80135e2:	d004      	beq.n	80135ee <USB_EPStartXfer+0x118e>
 80135e4:	187b      	adds	r3, r7, r1
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	3301      	adds	r3, #1
 80135ea:	187a      	adds	r2, r7, r1
 80135ec:	6013      	str	r3, [r2, #0]
 80135ee:	21b8      	movs	r1, #184	@ 0xb8
 80135f0:	187b      	adds	r3, r7, r1
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	881b      	ldrh	r3, [r3, #0]
 80135f6:	b29a      	uxth	r2, r3
 80135f8:	23d8      	movs	r3, #216	@ 0xd8
 80135fa:	18fb      	adds	r3, r7, r3
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	b29b      	uxth	r3, r3
 8013600:	029b      	lsls	r3, r3, #10
 8013602:	b29b      	uxth	r3, r3
 8013604:	4313      	orrs	r3, r2
 8013606:	b29a      	uxth	r2, r3
 8013608:	187b      	adds	r3, r7, r1
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	801a      	strh	r2, [r3, #0]
 801360e:	e02e      	b.n	801366e <USB_EPStartXfer+0x120e>
 8013610:	00000406 	.word	0x00000406
 8013614:	ffff8f8f 	.word	0xffff8f8f
 8013618:	ffff80c0 	.word	0xffff80c0
 801361c:	00000402 	.word	0x00000402
 8013620:	ffff8000 	.word	0xffff8000
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	785b      	ldrb	r3, [r3, #1]
 8013628:	2b01      	cmp	r3, #1
 801362a:	d120      	bne.n	801366e <USB_EPStartXfer+0x120e>
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2250      	movs	r2, #80	@ 0x50
 8013630:	5a9b      	ldrh	r3, [r3, r2]
 8013632:	b29b      	uxth	r3, r3
 8013634:	001a      	movs	r2, r3
 8013636:	21c4      	movs	r1, #196	@ 0xc4
 8013638:	187b      	adds	r3, r7, r1
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	189b      	adds	r3, r3, r2
 801363e:	187a      	adds	r2, r7, r1
 8013640:	6013      	str	r3, [r2, #0]
 8013642:	683b      	ldr	r3, [r7, #0]
 8013644:	781b      	ldrb	r3, [r3, #0]
 8013646:	00da      	lsls	r2, r3, #3
 8013648:	187b      	adds	r3, r7, r1
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	18d3      	adds	r3, r2, r3
 801364e:	4a1d      	ldr	r2, [pc, #116]	@ (80136c4 <USB_EPStartXfer+0x1264>)
 8013650:	4694      	mov	ip, r2
 8013652:	4463      	add	r3, ip
 8013654:	21c0      	movs	r1, #192	@ 0xc0
 8013656:	187a      	adds	r2, r7, r1
 8013658:	6013      	str	r3, [r2, #0]
 801365a:	1d7b      	adds	r3, r7, #5
 801365c:	33ff      	adds	r3, #255	@ 0xff
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	b29a      	uxth	r2, r3
 8013662:	187b      	adds	r3, r7, r1
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	801a      	strh	r2, [r3, #0]
 8013668:	e001      	b.n	801366e <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801366a:	2301      	movs	r3, #1
 801366c:	e025      	b.n	80136ba <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801366e:	687a      	ldr	r2, [r7, #4]
 8013670:	683b      	ldr	r3, [r7, #0]
 8013672:	781b      	ldrb	r3, [r3, #0]
 8013674:	009b      	lsls	r3, r3, #2
 8013676:	18d3      	adds	r3, r2, r3
 8013678:	881b      	ldrh	r3, [r3, #0]
 801367a:	b29a      	uxth	r2, r3
 801367c:	208a      	movs	r0, #138	@ 0x8a
 801367e:	183b      	adds	r3, r7, r0
 8013680:	4911      	ldr	r1, [pc, #68]	@ (80136c8 <USB_EPStartXfer+0x1268>)
 8013682:	400a      	ands	r2, r1
 8013684:	801a      	strh	r2, [r3, #0]
 8013686:	183b      	adds	r3, r7, r0
 8013688:	183a      	adds	r2, r7, r0
 801368a:	8812      	ldrh	r2, [r2, #0]
 801368c:	2180      	movs	r1, #128	@ 0x80
 801368e:	0149      	lsls	r1, r1, #5
 8013690:	404a      	eors	r2, r1
 8013692:	801a      	strh	r2, [r3, #0]
 8013694:	183b      	adds	r3, r7, r0
 8013696:	183a      	adds	r2, r7, r0
 8013698:	8812      	ldrh	r2, [r2, #0]
 801369a:	2180      	movs	r1, #128	@ 0x80
 801369c:	0189      	lsls	r1, r1, #6
 801369e:	404a      	eors	r2, r1
 80136a0:	801a      	strh	r2, [r3, #0]
 80136a2:	687a      	ldr	r2, [r7, #4]
 80136a4:	683b      	ldr	r3, [r7, #0]
 80136a6:	781b      	ldrb	r3, [r3, #0]
 80136a8:	009b      	lsls	r3, r3, #2
 80136aa:	18d3      	adds	r3, r2, r3
 80136ac:	183a      	adds	r2, r7, r0
 80136ae:	8812      	ldrh	r2, [r2, #0]
 80136b0:	4906      	ldr	r1, [pc, #24]	@ (80136cc <USB_EPStartXfer+0x126c>)
 80136b2:	430a      	orrs	r2, r1
 80136b4:	b292      	uxth	r2, r2
 80136b6:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80136b8:	2300      	movs	r3, #0
}
 80136ba:	0018      	movs	r0, r3
 80136bc:	46bd      	mov	sp, r7
 80136be:	b043      	add	sp, #268	@ 0x10c
 80136c0:	bd90      	pop	{r4, r7, pc}
 80136c2:	46c0      	nop			@ (mov r8, r8)
 80136c4:	00000406 	.word	0x00000406
 80136c8:	ffffbf8f 	.word	0xffffbf8f
 80136cc:	ffff8080 	.word	0xffff8080

080136d0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b084      	sub	sp, #16
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
 80136d8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	785b      	ldrb	r3, [r3, #1]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d01d      	beq.n	801371e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80136e2:	687a      	ldr	r2, [r7, #4]
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	781b      	ldrb	r3, [r3, #0]
 80136e8:	009b      	lsls	r3, r3, #2
 80136ea:	18d3      	adds	r3, r2, r3
 80136ec:	881b      	ldrh	r3, [r3, #0]
 80136ee:	b29a      	uxth	r2, r3
 80136f0:	200c      	movs	r0, #12
 80136f2:	183b      	adds	r3, r7, r0
 80136f4:	491b      	ldr	r1, [pc, #108]	@ (8013764 <USB_EPSetStall+0x94>)
 80136f6:	400a      	ands	r2, r1
 80136f8:	801a      	strh	r2, [r3, #0]
 80136fa:	183b      	adds	r3, r7, r0
 80136fc:	183a      	adds	r2, r7, r0
 80136fe:	8812      	ldrh	r2, [r2, #0]
 8013700:	2110      	movs	r1, #16
 8013702:	404a      	eors	r2, r1
 8013704:	801a      	strh	r2, [r3, #0]
 8013706:	687a      	ldr	r2, [r7, #4]
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	781b      	ldrb	r3, [r3, #0]
 801370c:	009b      	lsls	r3, r3, #2
 801370e:	18d3      	adds	r3, r2, r3
 8013710:	183a      	adds	r2, r7, r0
 8013712:	8812      	ldrh	r2, [r2, #0]
 8013714:	4914      	ldr	r1, [pc, #80]	@ (8013768 <USB_EPSetStall+0x98>)
 8013716:	430a      	orrs	r2, r1
 8013718:	b292      	uxth	r2, r2
 801371a:	801a      	strh	r2, [r3, #0]
 801371c:	e01d      	b.n	801375a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801371e:	687a      	ldr	r2, [r7, #4]
 8013720:	683b      	ldr	r3, [r7, #0]
 8013722:	781b      	ldrb	r3, [r3, #0]
 8013724:	009b      	lsls	r3, r3, #2
 8013726:	18d3      	adds	r3, r2, r3
 8013728:	881b      	ldrh	r3, [r3, #0]
 801372a:	b29a      	uxth	r2, r3
 801372c:	200e      	movs	r0, #14
 801372e:	183b      	adds	r3, r7, r0
 8013730:	490e      	ldr	r1, [pc, #56]	@ (801376c <USB_EPSetStall+0x9c>)
 8013732:	400a      	ands	r2, r1
 8013734:	801a      	strh	r2, [r3, #0]
 8013736:	183b      	adds	r3, r7, r0
 8013738:	183a      	adds	r2, r7, r0
 801373a:	8812      	ldrh	r2, [r2, #0]
 801373c:	2180      	movs	r1, #128	@ 0x80
 801373e:	0149      	lsls	r1, r1, #5
 8013740:	404a      	eors	r2, r1
 8013742:	801a      	strh	r2, [r3, #0]
 8013744:	687a      	ldr	r2, [r7, #4]
 8013746:	683b      	ldr	r3, [r7, #0]
 8013748:	781b      	ldrb	r3, [r3, #0]
 801374a:	009b      	lsls	r3, r3, #2
 801374c:	18d3      	adds	r3, r2, r3
 801374e:	183a      	adds	r2, r7, r0
 8013750:	8812      	ldrh	r2, [r2, #0]
 8013752:	4905      	ldr	r1, [pc, #20]	@ (8013768 <USB_EPSetStall+0x98>)
 8013754:	430a      	orrs	r2, r1
 8013756:	b292      	uxth	r2, r2
 8013758:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 801375a:	2300      	movs	r3, #0
}
 801375c:	0018      	movs	r0, r3
 801375e:	46bd      	mov	sp, r7
 8013760:	b004      	add	sp, #16
 8013762:	bd80      	pop	{r7, pc}
 8013764:	ffff8fbf 	.word	0xffff8fbf
 8013768:	ffff8080 	.word	0xffff8080
 801376c:	ffffbf8f 	.word	0xffffbf8f

08013770 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b086      	sub	sp, #24
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801377a:	683b      	ldr	r3, [r7, #0]
 801377c:	7b1b      	ldrb	r3, [r3, #12]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d000      	beq.n	8013784 <USB_EPClearStall+0x14>
 8013782:	e095      	b.n	80138b0 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	785b      	ldrb	r3, [r3, #1]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d046      	beq.n	801381a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801378c:	687a      	ldr	r2, [r7, #4]
 801378e:	683b      	ldr	r3, [r7, #0]
 8013790:	781b      	ldrb	r3, [r3, #0]
 8013792:	009b      	lsls	r3, r3, #2
 8013794:	18d2      	adds	r2, r2, r3
 8013796:	2110      	movs	r1, #16
 8013798:	187b      	adds	r3, r7, r1
 801379a:	8812      	ldrh	r2, [r2, #0]
 801379c:	801a      	strh	r2, [r3, #0]
 801379e:	187b      	adds	r3, r7, r1
 80137a0:	881b      	ldrh	r3, [r3, #0]
 80137a2:	2240      	movs	r2, #64	@ 0x40
 80137a4:	4013      	ands	r3, r2
 80137a6:	d016      	beq.n	80137d6 <USB_EPClearStall+0x66>
 80137a8:	687a      	ldr	r2, [r7, #4]
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	781b      	ldrb	r3, [r3, #0]
 80137ae:	009b      	lsls	r3, r3, #2
 80137b0:	18d3      	adds	r3, r2, r3
 80137b2:	881b      	ldrh	r3, [r3, #0]
 80137b4:	b29a      	uxth	r2, r3
 80137b6:	200e      	movs	r0, #14
 80137b8:	183b      	adds	r3, r7, r0
 80137ba:	4940      	ldr	r1, [pc, #256]	@ (80138bc <USB_EPClearStall+0x14c>)
 80137bc:	400a      	ands	r2, r1
 80137be:	801a      	strh	r2, [r3, #0]
 80137c0:	687a      	ldr	r2, [r7, #4]
 80137c2:	683b      	ldr	r3, [r7, #0]
 80137c4:	781b      	ldrb	r3, [r3, #0]
 80137c6:	009b      	lsls	r3, r3, #2
 80137c8:	18d3      	adds	r3, r2, r3
 80137ca:	183a      	adds	r2, r7, r0
 80137cc:	8812      	ldrh	r2, [r2, #0]
 80137ce:	493c      	ldr	r1, [pc, #240]	@ (80138c0 <USB_EPClearStall+0x150>)
 80137d0:	430a      	orrs	r2, r1
 80137d2:	b292      	uxth	r2, r2
 80137d4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80137d6:	683b      	ldr	r3, [r7, #0]
 80137d8:	78db      	ldrb	r3, [r3, #3]
 80137da:	2b01      	cmp	r3, #1
 80137dc:	d068      	beq.n	80138b0 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80137de:	687a      	ldr	r2, [r7, #4]
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	781b      	ldrb	r3, [r3, #0]
 80137e4:	009b      	lsls	r3, r3, #2
 80137e6:	18d3      	adds	r3, r2, r3
 80137e8:	881b      	ldrh	r3, [r3, #0]
 80137ea:	b29a      	uxth	r2, r3
 80137ec:	200c      	movs	r0, #12
 80137ee:	183b      	adds	r3, r7, r0
 80137f0:	4934      	ldr	r1, [pc, #208]	@ (80138c4 <USB_EPClearStall+0x154>)
 80137f2:	400a      	ands	r2, r1
 80137f4:	801a      	strh	r2, [r3, #0]
 80137f6:	183b      	adds	r3, r7, r0
 80137f8:	183a      	adds	r2, r7, r0
 80137fa:	8812      	ldrh	r2, [r2, #0]
 80137fc:	2120      	movs	r1, #32
 80137fe:	404a      	eors	r2, r1
 8013800:	801a      	strh	r2, [r3, #0]
 8013802:	687a      	ldr	r2, [r7, #4]
 8013804:	683b      	ldr	r3, [r7, #0]
 8013806:	781b      	ldrb	r3, [r3, #0]
 8013808:	009b      	lsls	r3, r3, #2
 801380a:	18d3      	adds	r3, r2, r3
 801380c:	183a      	adds	r2, r7, r0
 801380e:	8812      	ldrh	r2, [r2, #0]
 8013810:	492d      	ldr	r1, [pc, #180]	@ (80138c8 <USB_EPClearStall+0x158>)
 8013812:	430a      	orrs	r2, r1
 8013814:	b292      	uxth	r2, r2
 8013816:	801a      	strh	r2, [r3, #0]
 8013818:	e04a      	b.n	80138b0 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801381a:	687a      	ldr	r2, [r7, #4]
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	781b      	ldrb	r3, [r3, #0]
 8013820:	009b      	lsls	r3, r3, #2
 8013822:	18d2      	adds	r2, r2, r3
 8013824:	2116      	movs	r1, #22
 8013826:	187b      	adds	r3, r7, r1
 8013828:	8812      	ldrh	r2, [r2, #0]
 801382a:	801a      	strh	r2, [r3, #0]
 801382c:	187b      	adds	r3, r7, r1
 801382e:	881a      	ldrh	r2, [r3, #0]
 8013830:	2380      	movs	r3, #128	@ 0x80
 8013832:	01db      	lsls	r3, r3, #7
 8013834:	4013      	ands	r3, r2
 8013836:	d016      	beq.n	8013866 <USB_EPClearStall+0xf6>
 8013838:	687a      	ldr	r2, [r7, #4]
 801383a:	683b      	ldr	r3, [r7, #0]
 801383c:	781b      	ldrb	r3, [r3, #0]
 801383e:	009b      	lsls	r3, r3, #2
 8013840:	18d3      	adds	r3, r2, r3
 8013842:	881b      	ldrh	r3, [r3, #0]
 8013844:	b29a      	uxth	r2, r3
 8013846:	2014      	movs	r0, #20
 8013848:	183b      	adds	r3, r7, r0
 801384a:	491c      	ldr	r1, [pc, #112]	@ (80138bc <USB_EPClearStall+0x14c>)
 801384c:	400a      	ands	r2, r1
 801384e:	801a      	strh	r2, [r3, #0]
 8013850:	687a      	ldr	r2, [r7, #4]
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	781b      	ldrb	r3, [r3, #0]
 8013856:	009b      	lsls	r3, r3, #2
 8013858:	18d3      	adds	r3, r2, r3
 801385a:	183a      	adds	r2, r7, r0
 801385c:	8812      	ldrh	r2, [r2, #0]
 801385e:	491b      	ldr	r1, [pc, #108]	@ (80138cc <USB_EPClearStall+0x15c>)
 8013860:	430a      	orrs	r2, r1
 8013862:	b292      	uxth	r2, r2
 8013864:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013866:	687a      	ldr	r2, [r7, #4]
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	781b      	ldrb	r3, [r3, #0]
 801386c:	009b      	lsls	r3, r3, #2
 801386e:	18d3      	adds	r3, r2, r3
 8013870:	881b      	ldrh	r3, [r3, #0]
 8013872:	b29a      	uxth	r2, r3
 8013874:	2012      	movs	r0, #18
 8013876:	183b      	adds	r3, r7, r0
 8013878:	4915      	ldr	r1, [pc, #84]	@ (80138d0 <USB_EPClearStall+0x160>)
 801387a:	400a      	ands	r2, r1
 801387c:	801a      	strh	r2, [r3, #0]
 801387e:	183b      	adds	r3, r7, r0
 8013880:	183a      	adds	r2, r7, r0
 8013882:	8812      	ldrh	r2, [r2, #0]
 8013884:	2180      	movs	r1, #128	@ 0x80
 8013886:	0149      	lsls	r1, r1, #5
 8013888:	404a      	eors	r2, r1
 801388a:	801a      	strh	r2, [r3, #0]
 801388c:	183b      	adds	r3, r7, r0
 801388e:	183a      	adds	r2, r7, r0
 8013890:	8812      	ldrh	r2, [r2, #0]
 8013892:	2180      	movs	r1, #128	@ 0x80
 8013894:	0189      	lsls	r1, r1, #6
 8013896:	404a      	eors	r2, r1
 8013898:	801a      	strh	r2, [r3, #0]
 801389a:	687a      	ldr	r2, [r7, #4]
 801389c:	683b      	ldr	r3, [r7, #0]
 801389e:	781b      	ldrb	r3, [r3, #0]
 80138a0:	009b      	lsls	r3, r3, #2
 80138a2:	18d3      	adds	r3, r2, r3
 80138a4:	183a      	adds	r2, r7, r0
 80138a6:	8812      	ldrh	r2, [r2, #0]
 80138a8:	4907      	ldr	r1, [pc, #28]	@ (80138c8 <USB_EPClearStall+0x158>)
 80138aa:	430a      	orrs	r2, r1
 80138ac:	b292      	uxth	r2, r2
 80138ae:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80138b0:	2300      	movs	r3, #0
}
 80138b2:	0018      	movs	r0, r3
 80138b4:	46bd      	mov	sp, r7
 80138b6:	b006      	add	sp, #24
 80138b8:	bd80      	pop	{r7, pc}
 80138ba:	46c0      	nop			@ (mov r8, r8)
 80138bc:	ffff8f8f 	.word	0xffff8f8f
 80138c0:	ffff80c0 	.word	0xffff80c0
 80138c4:	ffff8fbf 	.word	0xffff8fbf
 80138c8:	ffff8080 	.word	0xffff8080
 80138cc:	ffffc080 	.word	0xffffc080
 80138d0:	ffffbf8f 	.word	0xffffbf8f

080138d4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b082      	sub	sp, #8
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
 80138dc:	000a      	movs	r2, r1
 80138de:	1cfb      	adds	r3, r7, #3
 80138e0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80138e2:	1cfb      	adds	r3, r7, #3
 80138e4:	781b      	ldrb	r3, [r3, #0]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d103      	bne.n	80138f2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	224c      	movs	r2, #76	@ 0x4c
 80138ee:	2180      	movs	r1, #128	@ 0x80
 80138f0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80138f2:	2300      	movs	r3, #0
}
 80138f4:	0018      	movs	r0, r3
 80138f6:	46bd      	mov	sp, r7
 80138f8:	b002      	add	sp, #8
 80138fa:	bd80      	pop	{r7, pc}

080138fc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b082      	sub	sp, #8
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	2258      	movs	r2, #88	@ 0x58
 8013908:	5a9b      	ldrh	r3, [r3, r2]
 801390a:	b29b      	uxth	r3, r3
 801390c:	4a05      	ldr	r2, [pc, #20]	@ (8013924 <USB_DevConnect+0x28>)
 801390e:	4313      	orrs	r3, r2
 8013910:	b299      	uxth	r1, r3
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	2258      	movs	r2, #88	@ 0x58
 8013916:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8013918:	2300      	movs	r3, #0
}
 801391a:	0018      	movs	r0, r3
 801391c:	46bd      	mov	sp, r7
 801391e:	b002      	add	sp, #8
 8013920:	bd80      	pop	{r7, pc}
 8013922:	46c0      	nop			@ (mov r8, r8)
 8013924:	ffff8000 	.word	0xffff8000

08013928 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b084      	sub	sp, #16
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	2244      	movs	r2, #68	@ 0x44
 8013934:	5a9b      	ldrh	r3, [r3, r2]
 8013936:	b29b      	uxth	r3, r3
 8013938:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801393a:	68fb      	ldr	r3, [r7, #12]
}
 801393c:	0018      	movs	r0, r3
 801393e:	46bd      	mov	sp, r7
 8013940:	b004      	add	sp, #16
 8013942:	bd80      	pop	{r7, pc}

08013944 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b08a      	sub	sp, #40	@ 0x28
 8013948:	af00      	add	r7, sp, #0
 801394a:	60f8      	str	r0, [r7, #12]
 801394c:	60b9      	str	r1, [r7, #8]
 801394e:	0019      	movs	r1, r3
 8013950:	1dbb      	adds	r3, r7, #6
 8013952:	801a      	strh	r2, [r3, #0]
 8013954:	1d3b      	adds	r3, r7, #4
 8013956:	1c0a      	adds	r2, r1, #0
 8013958:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801395a:	1d3b      	adds	r3, r7, #4
 801395c:	881b      	ldrh	r3, [r3, #0]
 801395e:	3301      	adds	r3, #1
 8013960:	085b      	lsrs	r3, r3, #1
 8013962:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8013968:	68bb      	ldr	r3, [r7, #8]
 801396a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801396c:	1dbb      	adds	r3, r7, #6
 801396e:	881a      	ldrh	r2, [r3, #0]
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	18d3      	adds	r3, r2, r3
 8013974:	2280      	movs	r2, #128	@ 0x80
 8013976:	00d2      	lsls	r2, r2, #3
 8013978:	4694      	mov	ip, r2
 801397a:	4463      	add	r3, ip
 801397c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801397e:	69bb      	ldr	r3, [r7, #24]
 8013980:	627b      	str	r3, [r7, #36]	@ 0x24
 8013982:	e020      	b.n	80139c6 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8013984:	69fb      	ldr	r3, [r7, #28]
 8013986:	781a      	ldrb	r2, [r3, #0]
 8013988:	2112      	movs	r1, #18
 801398a:	187b      	adds	r3, r7, r1
 801398c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801398e:	69fb      	ldr	r3, [r7, #28]
 8013990:	3301      	adds	r3, #1
 8013992:	781b      	ldrb	r3, [r3, #0]
 8013994:	021b      	lsls	r3, r3, #8
 8013996:	b21a      	sxth	r2, r3
 8013998:	187b      	adds	r3, r7, r1
 801399a:	2000      	movs	r0, #0
 801399c:	5e1b      	ldrsh	r3, [r3, r0]
 801399e:	4313      	orrs	r3, r2
 80139a0:	b21a      	sxth	r2, r3
 80139a2:	187b      	adds	r3, r7, r1
 80139a4:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80139a6:	6a3b      	ldr	r3, [r7, #32]
 80139a8:	187a      	adds	r2, r7, r1
 80139aa:	8812      	ldrh	r2, [r2, #0]
 80139ac:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80139ae:	6a3b      	ldr	r3, [r7, #32]
 80139b0:	3302      	adds	r3, #2
 80139b2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80139b4:	69fb      	ldr	r3, [r7, #28]
 80139b6:	3301      	adds	r3, #1
 80139b8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80139ba:	69fb      	ldr	r3, [r7, #28]
 80139bc:	3301      	adds	r3, #1
 80139be:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80139c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139c2:	3b01      	subs	r3, #1
 80139c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80139c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d1db      	bne.n	8013984 <USB_WritePMA+0x40>
  }
}
 80139cc:	46c0      	nop			@ (mov r8, r8)
 80139ce:	46c0      	nop			@ (mov r8, r8)
 80139d0:	46bd      	mov	sp, r7
 80139d2:	b00a      	add	sp, #40	@ 0x28
 80139d4:	bd80      	pop	{r7, pc}

080139d6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80139d6:	b580      	push	{r7, lr}
 80139d8:	b08a      	sub	sp, #40	@ 0x28
 80139da:	af00      	add	r7, sp, #0
 80139dc:	60f8      	str	r0, [r7, #12]
 80139de:	60b9      	str	r1, [r7, #8]
 80139e0:	0019      	movs	r1, r3
 80139e2:	1dbb      	adds	r3, r7, #6
 80139e4:	801a      	strh	r2, [r3, #0]
 80139e6:	1d3b      	adds	r3, r7, #4
 80139e8:	1c0a      	adds	r2, r1, #0
 80139ea:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80139ec:	1d3b      	adds	r3, r7, #4
 80139ee:	881b      	ldrh	r3, [r3, #0]
 80139f0:	085b      	lsrs	r3, r3, #1
 80139f2:	b29b      	uxth	r3, r3
 80139f4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80139fa:	68bb      	ldr	r3, [r7, #8]
 80139fc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80139fe:	1dbb      	adds	r3, r7, #6
 8013a00:	881a      	ldrh	r2, [r3, #0]
 8013a02:	697b      	ldr	r3, [r7, #20]
 8013a04:	18d3      	adds	r3, r2, r3
 8013a06:	2280      	movs	r2, #128	@ 0x80
 8013a08:	00d2      	lsls	r2, r2, #3
 8013a0a:	4694      	mov	ip, r2
 8013a0c:	4463      	add	r3, ip
 8013a0e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8013a10:	69bb      	ldr	r3, [r7, #24]
 8013a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a14:	e018      	b.n	8013a48 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8013a16:	6a3b      	ldr	r3, [r7, #32]
 8013a18:	881b      	ldrh	r3, [r3, #0]
 8013a1a:	b29b      	uxth	r3, r3
 8013a1c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8013a1e:	6a3b      	ldr	r3, [r7, #32]
 8013a20:	3302      	adds	r3, #2
 8013a22:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	b2da      	uxtb	r2, r3
 8013a28:	69fb      	ldr	r3, [r7, #28]
 8013a2a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8013a2c:	69fb      	ldr	r3, [r7, #28]
 8013a2e:	3301      	adds	r3, #1
 8013a30:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	0a1b      	lsrs	r3, r3, #8
 8013a36:	b2da      	uxtb	r2, r3
 8013a38:	69fb      	ldr	r3, [r7, #28]
 8013a3a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8013a3c:	69fb      	ldr	r3, [r7, #28]
 8013a3e:	3301      	adds	r3, #1
 8013a40:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8013a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a44:	3b01      	subs	r3, #1
 8013a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d1e3      	bne.n	8013a16 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8013a4e:	1d3b      	adds	r3, r7, #4
 8013a50:	881b      	ldrh	r3, [r3, #0]
 8013a52:	2201      	movs	r2, #1
 8013a54:	4013      	ands	r3, r2
 8013a56:	b29b      	uxth	r3, r3
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d007      	beq.n	8013a6c <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8013a5c:	6a3b      	ldr	r3, [r7, #32]
 8013a5e:	881b      	ldrh	r3, [r3, #0]
 8013a60:	b29b      	uxth	r3, r3
 8013a62:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8013a64:	693b      	ldr	r3, [r7, #16]
 8013a66:	b2da      	uxtb	r2, r3
 8013a68:	69fb      	ldr	r3, [r7, #28]
 8013a6a:	701a      	strb	r2, [r3, #0]
  }
}
 8013a6c:	46c0      	nop			@ (mov r8, r8)
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	b00a      	add	sp, #40	@ 0x28
 8013a72:	bd80      	pop	{r7, pc}

08013a74 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b084      	sub	sp, #16
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
 8013a7c:	000a      	movs	r2, r1
 8013a7e:	1cfb      	adds	r3, r7, #3
 8013a80:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8013a82:	230f      	movs	r3, #15
 8013a84:	18fb      	adds	r3, r7, r3
 8013a86:	2200      	movs	r2, #0
 8013a88:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	7c1b      	ldrb	r3, [r3, #16]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d116      	bne.n	8013ac0 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013a92:	2380      	movs	r3, #128	@ 0x80
 8013a94:	009b      	lsls	r3, r3, #2
 8013a96:	6878      	ldr	r0, [r7, #4]
 8013a98:	2202      	movs	r2, #2
 8013a9a:	2181      	movs	r1, #129	@ 0x81
 8013a9c:	f002 f81d 	bl	8015ada <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2201      	movs	r2, #1
 8013aa4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013aa6:	2380      	movs	r3, #128	@ 0x80
 8013aa8:	009b      	lsls	r3, r3, #2
 8013aaa:	6878      	ldr	r0, [r7, #4]
 8013aac:	2202      	movs	r2, #2
 8013aae:	2101      	movs	r1, #1
 8013ab0:	f002 f813 	bl	8015ada <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013ab4:	687a      	ldr	r2, [r7, #4]
 8013ab6:	23b6      	movs	r3, #182	@ 0xb6
 8013ab8:	005b      	lsls	r3, r3, #1
 8013aba:	2101      	movs	r1, #1
 8013abc:	50d1      	str	r1, [r2, r3]
 8013abe:	e013      	b.n	8013ae8 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	2340      	movs	r3, #64	@ 0x40
 8013ac4:	2202      	movs	r2, #2
 8013ac6:	2181      	movs	r1, #129	@ 0x81
 8013ac8:	f002 f807 	bl	8015ada <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	2201      	movs	r2, #1
 8013ad0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	2340      	movs	r3, #64	@ 0x40
 8013ad6:	2202      	movs	r2, #2
 8013ad8:	2101      	movs	r1, #1
 8013ada:	f001 fffe 	bl	8015ada <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013ade:	687a      	ldr	r2, [r7, #4]
 8013ae0:	23b6      	movs	r3, #182	@ 0xb6
 8013ae2:	005b      	lsls	r3, r3, #1
 8013ae4:	2101      	movs	r1, #1
 8013ae6:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013ae8:	6878      	ldr	r0, [r7, #4]
 8013aea:	2308      	movs	r3, #8
 8013aec:	2203      	movs	r2, #3
 8013aee:	2182      	movs	r1, #130	@ 0x82
 8013af0:	f001 fff3 	bl	8015ada <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	2201      	movs	r2, #1
 8013af8:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013afa:	2387      	movs	r3, #135	@ 0x87
 8013afc:	009b      	lsls	r3, r3, #2
 8013afe:	0018      	movs	r0, r3
 8013b00:	f002 f984 	bl	8015e0c <USBD_static_malloc>
 8013b04:	0001      	movs	r1, r0
 8013b06:	687a      	ldr	r2, [r7, #4]
 8013b08:	23ae      	movs	r3, #174	@ 0xae
 8013b0a:	009b      	lsls	r3, r3, #2
 8013b0c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8013b0e:	687a      	ldr	r2, [r7, #4]
 8013b10:	23ae      	movs	r3, #174	@ 0xae
 8013b12:	009b      	lsls	r3, r3, #2
 8013b14:	58d3      	ldr	r3, [r2, r3]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d104      	bne.n	8013b24 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8013b1a:	230f      	movs	r3, #15
 8013b1c:	18fb      	adds	r3, r7, r3
 8013b1e:	2201      	movs	r2, #1
 8013b20:	701a      	strb	r2, [r3, #0]
 8013b22:	e02c      	b.n	8013b7e <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013b24:	687a      	ldr	r2, [r7, #4]
 8013b26:	23ae      	movs	r3, #174	@ 0xae
 8013b28:	009b      	lsls	r3, r3, #2
 8013b2a:	58d3      	ldr	r3, [r2, r3]
 8013b2c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	23af      	movs	r3, #175	@ 0xaf
 8013b32:	009b      	lsls	r3, r3, #2
 8013b34:	58d3      	ldr	r3, [r2, r3]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8013b3a:	68ba      	ldr	r2, [r7, #8]
 8013b3c:	2385      	movs	r3, #133	@ 0x85
 8013b3e:	009b      	lsls	r3, r3, #2
 8013b40:	2100      	movs	r1, #0
 8013b42:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8013b44:	68ba      	ldr	r2, [r7, #8]
 8013b46:	2386      	movs	r3, #134	@ 0x86
 8013b48:	009b      	lsls	r3, r3, #2
 8013b4a:	2100      	movs	r1, #0
 8013b4c:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	7c1b      	ldrb	r3, [r3, #16]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d10a      	bne.n	8013b6c <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013b56:	68ba      	ldr	r2, [r7, #8]
 8013b58:	2381      	movs	r3, #129	@ 0x81
 8013b5a:	009b      	lsls	r3, r3, #2
 8013b5c:	58d2      	ldr	r2, [r2, r3]
 8013b5e:	2380      	movs	r3, #128	@ 0x80
 8013b60:	009b      	lsls	r3, r3, #2
 8013b62:	6878      	ldr	r0, [r7, #4]
 8013b64:	2101      	movs	r1, #1
 8013b66:	f002 f903 	bl	8015d70 <USBD_LL_PrepareReceive>
 8013b6a:	e008      	b.n	8013b7e <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013b6c:	68ba      	ldr	r2, [r7, #8]
 8013b6e:	2381      	movs	r3, #129	@ 0x81
 8013b70:	009b      	lsls	r3, r3, #2
 8013b72:	58d2      	ldr	r2, [r2, r3]
 8013b74:	6878      	ldr	r0, [r7, #4]
 8013b76:	2340      	movs	r3, #64	@ 0x40
 8013b78:	2101      	movs	r1, #1
 8013b7a:	f002 f8f9 	bl	8015d70 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8013b7e:	230f      	movs	r3, #15
 8013b80:	18fb      	adds	r3, r7, r3
 8013b82:	781b      	ldrb	r3, [r3, #0]
}
 8013b84:	0018      	movs	r0, r3
 8013b86:	46bd      	mov	sp, r7
 8013b88:	b004      	add	sp, #16
 8013b8a:	bd80      	pop	{r7, pc}

08013b8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b084      	sub	sp, #16
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
 8013b94:	000a      	movs	r2, r1
 8013b96:	1cfb      	adds	r3, r7, #3
 8013b98:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8013b9a:	230f      	movs	r3, #15
 8013b9c:	18fb      	adds	r3, r7, r3
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	2181      	movs	r1, #129	@ 0x81
 8013ba6:	0018      	movs	r0, r3
 8013ba8:	f001 ffce 	bl	8015b48 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	2200      	movs	r2, #0
 8013bb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	2101      	movs	r1, #1
 8013bb6:	0018      	movs	r0, r3
 8013bb8:	f001 ffc6 	bl	8015b48 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013bbc:	687a      	ldr	r2, [r7, #4]
 8013bbe:	23b6      	movs	r3, #182	@ 0xb6
 8013bc0:	005b      	lsls	r3, r3, #1
 8013bc2:	2100      	movs	r1, #0
 8013bc4:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	2182      	movs	r1, #130	@ 0x82
 8013bca:	0018      	movs	r0, r3
 8013bcc:	f001 ffbc 	bl	8015b48 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013bd6:	687a      	ldr	r2, [r7, #4]
 8013bd8:	23ae      	movs	r3, #174	@ 0xae
 8013bda:	009b      	lsls	r3, r3, #2
 8013bdc:	58d3      	ldr	r3, [r2, r3]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d011      	beq.n	8013c06 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013be2:	687a      	ldr	r2, [r7, #4]
 8013be4:	23af      	movs	r3, #175	@ 0xaf
 8013be6:	009b      	lsls	r3, r3, #2
 8013be8:	58d3      	ldr	r3, [r2, r3]
 8013bea:	685b      	ldr	r3, [r3, #4]
 8013bec:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8013bee:	687a      	ldr	r2, [r7, #4]
 8013bf0:	23ae      	movs	r3, #174	@ 0xae
 8013bf2:	009b      	lsls	r3, r3, #2
 8013bf4:	58d3      	ldr	r3, [r2, r3]
 8013bf6:	0018      	movs	r0, r3
 8013bf8:	f002 f914 	bl	8015e24 <USBD_static_free>
    pdev->pClassData = NULL;
 8013bfc:	687a      	ldr	r2, [r7, #4]
 8013bfe:	23ae      	movs	r3, #174	@ 0xae
 8013c00:	009b      	lsls	r3, r3, #2
 8013c02:	2100      	movs	r1, #0
 8013c04:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8013c06:	230f      	movs	r3, #15
 8013c08:	18fb      	adds	r3, r7, r3
 8013c0a:	781b      	ldrb	r3, [r3, #0]
}
 8013c0c:	0018      	movs	r0, r3
 8013c0e:	46bd      	mov	sp, r7
 8013c10:	b004      	add	sp, #16
 8013c12:	bd80      	pop	{r7, pc}

08013c14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b086      	sub	sp, #24
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
 8013c1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013c1e:	687a      	ldr	r2, [r7, #4]
 8013c20:	23ae      	movs	r3, #174	@ 0xae
 8013c22:	009b      	lsls	r3, r3, #2
 8013c24:	58d3      	ldr	r3, [r2, r3]
 8013c26:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8013c28:	230f      	movs	r3, #15
 8013c2a:	18fb      	adds	r3, r7, r3
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8013c30:	230c      	movs	r3, #12
 8013c32:	18fb      	adds	r3, r7, r3
 8013c34:	2200      	movs	r2, #0
 8013c36:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8013c38:	2317      	movs	r3, #23
 8013c3a:	18fb      	adds	r3, r7, r3
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	781b      	ldrb	r3, [r3, #0]
 8013c44:	001a      	movs	r2, r3
 8013c46:	2360      	movs	r3, #96	@ 0x60
 8013c48:	4013      	ands	r3, r2
 8013c4a:	d03d      	beq.n	8013cc8 <USBD_CDC_Setup+0xb4>
 8013c4c:	2b20      	cmp	r3, #32
 8013c4e:	d000      	beq.n	8013c52 <USBD_CDC_Setup+0x3e>
 8013c50:	e094      	b.n	8013d7c <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8013c52:	683b      	ldr	r3, [r7, #0]
 8013c54:	88db      	ldrh	r3, [r3, #6]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d02b      	beq.n	8013cb2 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8013c5a:	683b      	ldr	r3, [r7, #0]
 8013c5c:	781b      	ldrb	r3, [r3, #0]
 8013c5e:	b25b      	sxtb	r3, r3
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	da12      	bge.n	8013c8a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013c64:	687a      	ldr	r2, [r7, #4]
 8013c66:	23af      	movs	r3, #175	@ 0xaf
 8013c68:	009b      	lsls	r3, r3, #2
 8013c6a:	58d3      	ldr	r3, [r2, r3]
 8013c6c:	689b      	ldr	r3, [r3, #8]
 8013c6e:	683a      	ldr	r2, [r7, #0]
 8013c70:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8013c72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013c74:	683a      	ldr	r2, [r7, #0]
 8013c76:	88d2      	ldrh	r2, [r2, #6]
 8013c78:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8013c7a:	6939      	ldr	r1, [r7, #16]
 8013c7c:	683b      	ldr	r3, [r7, #0]
 8013c7e:	88da      	ldrh	r2, [r3, #6]
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	0018      	movs	r0, r3
 8013c84:	f001 fb79 	bl	801537a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8013c88:	e083      	b.n	8013d92 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	7859      	ldrb	r1, [r3, #1]
 8013c8e:	693a      	ldr	r2, [r7, #16]
 8013c90:	2380      	movs	r3, #128	@ 0x80
 8013c92:	009b      	lsls	r3, r3, #2
 8013c94:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	88db      	ldrh	r3, [r3, #6]
 8013c9a:	b2d9      	uxtb	r1, r3
 8013c9c:	693b      	ldr	r3, [r7, #16]
 8013c9e:	4a40      	ldr	r2, [pc, #256]	@ (8013da0 <USBD_CDC_Setup+0x18c>)
 8013ca0:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8013ca2:	6939      	ldr	r1, [r7, #16]
 8013ca4:	683b      	ldr	r3, [r7, #0]
 8013ca6:	88da      	ldrh	r2, [r3, #6]
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	0018      	movs	r0, r3
 8013cac:	f001 fb98 	bl	80153e0 <USBD_CtlPrepareRx>
      break;
 8013cb0:	e06f      	b.n	8013d92 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013cb2:	687a      	ldr	r2, [r7, #4]
 8013cb4:	23af      	movs	r3, #175	@ 0xaf
 8013cb6:	009b      	lsls	r3, r3, #2
 8013cb8:	58d3      	ldr	r3, [r2, r3]
 8013cba:	689b      	ldr	r3, [r3, #8]
 8013cbc:	683a      	ldr	r2, [r7, #0]
 8013cbe:	7850      	ldrb	r0, [r2, #1]
 8013cc0:	6839      	ldr	r1, [r7, #0]
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	4798      	blx	r3
      break;
 8013cc6:	e064      	b.n	8013d92 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013cc8:	683b      	ldr	r3, [r7, #0]
 8013cca:	785b      	ldrb	r3, [r3, #1]
 8013ccc:	2b0b      	cmp	r3, #11
 8013cce:	d037      	beq.n	8013d40 <USBD_CDC_Setup+0x12c>
 8013cd0:	dc47      	bgt.n	8013d62 <USBD_CDC_Setup+0x14e>
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d002      	beq.n	8013cdc <USBD_CDC_Setup+0xc8>
 8013cd6:	2b0a      	cmp	r3, #10
 8013cd8:	d019      	beq.n	8013d0e <USBD_CDC_Setup+0xfa>
 8013cda:	e042      	b.n	8013d62 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cdc:	687a      	ldr	r2, [r7, #4]
 8013cde:	23a7      	movs	r3, #167	@ 0xa7
 8013ce0:	009b      	lsls	r3, r3, #2
 8013ce2:	5cd3      	ldrb	r3, [r2, r3]
 8013ce4:	2b03      	cmp	r3, #3
 8013ce6:	d107      	bne.n	8013cf8 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8013ce8:	230c      	movs	r3, #12
 8013cea:	18f9      	adds	r1, r7, r3
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	2202      	movs	r2, #2
 8013cf0:	0018      	movs	r0, r3
 8013cf2:	f001 fb42 	bl	801537a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013cf6:	e040      	b.n	8013d7a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8013cf8:	683a      	ldr	r2, [r7, #0]
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	0011      	movs	r1, r2
 8013cfe:	0018      	movs	r0, r3
 8013d00:	f001 fabd 	bl	801527e <USBD_CtlError>
            ret = USBD_FAIL;
 8013d04:	2317      	movs	r3, #23
 8013d06:	18fb      	adds	r3, r7, r3
 8013d08:	2202      	movs	r2, #2
 8013d0a:	701a      	strb	r2, [r3, #0]
          break;
 8013d0c:	e035      	b.n	8013d7a <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d0e:	687a      	ldr	r2, [r7, #4]
 8013d10:	23a7      	movs	r3, #167	@ 0xa7
 8013d12:	009b      	lsls	r3, r3, #2
 8013d14:	5cd3      	ldrb	r3, [r2, r3]
 8013d16:	2b03      	cmp	r3, #3
 8013d18:	d107      	bne.n	8013d2a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8013d1a:	230f      	movs	r3, #15
 8013d1c:	18f9      	adds	r1, r7, r3
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	2201      	movs	r2, #1
 8013d22:	0018      	movs	r0, r3
 8013d24:	f001 fb29 	bl	801537a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013d28:	e027      	b.n	8013d7a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8013d2a:	683a      	ldr	r2, [r7, #0]
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	0011      	movs	r1, r2
 8013d30:	0018      	movs	r0, r3
 8013d32:	f001 faa4 	bl	801527e <USBD_CtlError>
            ret = USBD_FAIL;
 8013d36:	2317      	movs	r3, #23
 8013d38:	18fb      	adds	r3, r7, r3
 8013d3a:	2202      	movs	r2, #2
 8013d3c:	701a      	strb	r2, [r3, #0]
          break;
 8013d3e:	e01c      	b.n	8013d7a <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013d40:	687a      	ldr	r2, [r7, #4]
 8013d42:	23a7      	movs	r3, #167	@ 0xa7
 8013d44:	009b      	lsls	r3, r3, #2
 8013d46:	5cd3      	ldrb	r3, [r2, r3]
 8013d48:	2b03      	cmp	r3, #3
 8013d4a:	d015      	beq.n	8013d78 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8013d4c:	683a      	ldr	r2, [r7, #0]
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	0011      	movs	r1, r2
 8013d52:	0018      	movs	r0, r3
 8013d54:	f001 fa93 	bl	801527e <USBD_CtlError>
            ret = USBD_FAIL;
 8013d58:	2317      	movs	r3, #23
 8013d5a:	18fb      	adds	r3, r7, r3
 8013d5c:	2202      	movs	r2, #2
 8013d5e:	701a      	strb	r2, [r3, #0]
          }
          break;
 8013d60:	e00a      	b.n	8013d78 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8013d62:	683a      	ldr	r2, [r7, #0]
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	0011      	movs	r1, r2
 8013d68:	0018      	movs	r0, r3
 8013d6a:	f001 fa88 	bl	801527e <USBD_CtlError>
          ret = USBD_FAIL;
 8013d6e:	2317      	movs	r3, #23
 8013d70:	18fb      	adds	r3, r7, r3
 8013d72:	2202      	movs	r2, #2
 8013d74:	701a      	strb	r2, [r3, #0]
          break;
 8013d76:	e000      	b.n	8013d7a <USBD_CDC_Setup+0x166>
          break;
 8013d78:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8013d7a:	e00a      	b.n	8013d92 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8013d7c:	683a      	ldr	r2, [r7, #0]
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	0011      	movs	r1, r2
 8013d82:	0018      	movs	r0, r3
 8013d84:	f001 fa7b 	bl	801527e <USBD_CtlError>
      ret = USBD_FAIL;
 8013d88:	2317      	movs	r3, #23
 8013d8a:	18fb      	adds	r3, r7, r3
 8013d8c:	2202      	movs	r2, #2
 8013d8e:	701a      	strb	r2, [r3, #0]
      break;
 8013d90:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8013d92:	2317      	movs	r3, #23
 8013d94:	18fb      	adds	r3, r7, r3
 8013d96:	781b      	ldrb	r3, [r3, #0]
}
 8013d98:	0018      	movs	r0, r3
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	b006      	add	sp, #24
 8013d9e:	bd80      	pop	{r7, pc}
 8013da0:	00000201 	.word	0x00000201

08013da4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b084      	sub	sp, #16
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
 8013dac:	000a      	movs	r2, r1
 8013dae:	1cfb      	adds	r3, r7, #3
 8013db0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013db2:	687a      	ldr	r2, [r7, #4]
 8013db4:	23ae      	movs	r3, #174	@ 0xae
 8013db6:	009b      	lsls	r3, r3, #2
 8013db8:	58d3      	ldr	r3, [r2, r3]
 8013dba:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8013dbc:	687a      	ldr	r2, [r7, #4]
 8013dbe:	23b0      	movs	r3, #176	@ 0xb0
 8013dc0:	009b      	lsls	r3, r3, #2
 8013dc2:	58d3      	ldr	r3, [r2, r3]
 8013dc4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8013dc6:	687a      	ldr	r2, [r7, #4]
 8013dc8:	23ae      	movs	r3, #174	@ 0xae
 8013dca:	009b      	lsls	r3, r3, #2
 8013dcc:	58d3      	ldr	r3, [r2, r3]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d03e      	beq.n	8013e50 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013dd2:	1cfb      	adds	r3, r7, #3
 8013dd4:	781a      	ldrb	r2, [r3, #0]
 8013dd6:	6879      	ldr	r1, [r7, #4]
 8013dd8:	0013      	movs	r3, r2
 8013dda:	009b      	lsls	r3, r3, #2
 8013ddc:	189b      	adds	r3, r3, r2
 8013dde:	009b      	lsls	r3, r3, #2
 8013de0:	18cb      	adds	r3, r1, r3
 8013de2:	331c      	adds	r3, #28
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d02b      	beq.n	8013e42 <USBD_CDC_DataIn+0x9e>
 8013dea:	1cfb      	adds	r3, r7, #3
 8013dec:	781a      	ldrb	r2, [r3, #0]
 8013dee:	6879      	ldr	r1, [r7, #4]
 8013df0:	0013      	movs	r3, r2
 8013df2:	009b      	lsls	r3, r3, #2
 8013df4:	189b      	adds	r3, r3, r2
 8013df6:	009b      	lsls	r3, r3, #2
 8013df8:	18cb      	adds	r3, r1, r3
 8013dfa:	331c      	adds	r3, #28
 8013dfc:	6818      	ldr	r0, [r3, #0]
 8013dfe:	1cfb      	adds	r3, r7, #3
 8013e00:	781a      	ldrb	r2, [r3, #0]
 8013e02:	68b9      	ldr	r1, [r7, #8]
 8013e04:	0013      	movs	r3, r2
 8013e06:	009b      	lsls	r3, r3, #2
 8013e08:	189b      	adds	r3, r3, r2
 8013e0a:	00db      	lsls	r3, r3, #3
 8013e0c:	18cb      	adds	r3, r1, r3
 8013e0e:	3338      	adds	r3, #56	@ 0x38
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	0019      	movs	r1, r3
 8013e14:	f7ec fa1a 	bl	800024c <__aeabi_uidivmod>
 8013e18:	1e0b      	subs	r3, r1, #0
 8013e1a:	d112      	bne.n	8013e42 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8013e1c:	1cfb      	adds	r3, r7, #3
 8013e1e:	781a      	ldrb	r2, [r3, #0]
 8013e20:	6879      	ldr	r1, [r7, #4]
 8013e22:	0013      	movs	r3, r2
 8013e24:	009b      	lsls	r3, r3, #2
 8013e26:	189b      	adds	r3, r3, r2
 8013e28:	009b      	lsls	r3, r3, #2
 8013e2a:	18cb      	adds	r3, r1, r3
 8013e2c:	331c      	adds	r3, #28
 8013e2e:	2200      	movs	r2, #0
 8013e30:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013e32:	1cfb      	adds	r3, r7, #3
 8013e34:	7819      	ldrb	r1, [r3, #0]
 8013e36:	6878      	ldr	r0, [r7, #4]
 8013e38:	2300      	movs	r3, #0
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	f001 ff61 	bl	8015d02 <USBD_LL_Transmit>
 8013e40:	e004      	b.n	8013e4c <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8013e42:	68fa      	ldr	r2, [r7, #12]
 8013e44:	2385      	movs	r3, #133	@ 0x85
 8013e46:	009b      	lsls	r3, r3, #2
 8013e48:	2100      	movs	r1, #0
 8013e4a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	e000      	b.n	8013e52 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8013e50:	2302      	movs	r3, #2
  }
}
 8013e52:	0018      	movs	r0, r3
 8013e54:	46bd      	mov	sp, r7
 8013e56:	b004      	add	sp, #16
 8013e58:	bd80      	pop	{r7, pc}

08013e5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013e5a:	b580      	push	{r7, lr}
 8013e5c:	b084      	sub	sp, #16
 8013e5e:	af00      	add	r7, sp, #0
 8013e60:	6078      	str	r0, [r7, #4]
 8013e62:	000a      	movs	r2, r1
 8013e64:	1cfb      	adds	r3, r7, #3
 8013e66:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013e68:	687a      	ldr	r2, [r7, #4]
 8013e6a:	23ae      	movs	r3, #174	@ 0xae
 8013e6c:	009b      	lsls	r3, r3, #2
 8013e6e:	58d3      	ldr	r3, [r2, r3]
 8013e70:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013e72:	1cfb      	adds	r3, r7, #3
 8013e74:	781a      	ldrb	r2, [r3, #0]
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	0011      	movs	r1, r2
 8013e7a:	0018      	movs	r0, r3
 8013e7c:	f001 ffaf 	bl	8015dde <USBD_LL_GetRxDataSize>
 8013e80:	0001      	movs	r1, r0
 8013e82:	68fa      	ldr	r2, [r7, #12]
 8013e84:	2383      	movs	r3, #131	@ 0x83
 8013e86:	009b      	lsls	r3, r3, #2
 8013e88:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8013e8a:	687a      	ldr	r2, [r7, #4]
 8013e8c:	23ae      	movs	r3, #174	@ 0xae
 8013e8e:	009b      	lsls	r3, r3, #2
 8013e90:	58d3      	ldr	r3, [r2, r3]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d011      	beq.n	8013eba <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013e96:	687a      	ldr	r2, [r7, #4]
 8013e98:	23af      	movs	r3, #175	@ 0xaf
 8013e9a:	009b      	lsls	r3, r3, #2
 8013e9c:	58d3      	ldr	r3, [r2, r3]
 8013e9e:	68da      	ldr	r2, [r3, #12]
 8013ea0:	68f9      	ldr	r1, [r7, #12]
 8013ea2:	2381      	movs	r3, #129	@ 0x81
 8013ea4:	009b      	lsls	r3, r3, #2
 8013ea6:	58c8      	ldr	r0, [r1, r3]
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	2183      	movs	r1, #131	@ 0x83
 8013eac:	0089      	lsls	r1, r1, #2
 8013eae:	468c      	mov	ip, r1
 8013eb0:	4463      	add	r3, ip
 8013eb2:	0019      	movs	r1, r3
 8013eb4:	4790      	blx	r2

    return USBD_OK;
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	e000      	b.n	8013ebc <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8013eba:	2302      	movs	r3, #2
  }
}
 8013ebc:	0018      	movs	r0, r3
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	b004      	add	sp, #16
 8013ec2:	bd80      	pop	{r7, pc}

08013ec4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013ec4:	b590      	push	{r4, r7, lr}
 8013ec6:	b085      	sub	sp, #20
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013ecc:	687a      	ldr	r2, [r7, #4]
 8013ece:	23ae      	movs	r3, #174	@ 0xae
 8013ed0:	009b      	lsls	r3, r3, #2
 8013ed2:	58d3      	ldr	r3, [r2, r3]
 8013ed4:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013ed6:	687a      	ldr	r2, [r7, #4]
 8013ed8:	23af      	movs	r3, #175	@ 0xaf
 8013eda:	009b      	lsls	r3, r3, #2
 8013edc:	58d3      	ldr	r3, [r2, r3]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d018      	beq.n	8013f14 <USBD_CDC_EP0_RxReady+0x50>
 8013ee2:	68fa      	ldr	r2, [r7, #12]
 8013ee4:	2380      	movs	r3, #128	@ 0x80
 8013ee6:	009b      	lsls	r3, r3, #2
 8013ee8:	5cd3      	ldrb	r3, [r2, r3]
 8013eea:	2bff      	cmp	r3, #255	@ 0xff
 8013eec:	d012      	beq.n	8013f14 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013eee:	687a      	ldr	r2, [r7, #4]
 8013ef0:	23af      	movs	r3, #175	@ 0xaf
 8013ef2:	009b      	lsls	r3, r3, #2
 8013ef4:	58d3      	ldr	r3, [r2, r3]
 8013ef6:	689b      	ldr	r3, [r3, #8]
 8013ef8:	68f9      	ldr	r1, [r7, #12]
 8013efa:	2280      	movs	r2, #128	@ 0x80
 8013efc:	0092      	lsls	r2, r2, #2
 8013efe:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8013f00:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8013f02:	68fa      	ldr	r2, [r7, #12]
 8013f04:	4c06      	ldr	r4, [pc, #24]	@ (8013f20 <USBD_CDC_EP0_RxReady+0x5c>)
 8013f06:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013f08:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013f0a:	68fa      	ldr	r2, [r7, #12]
 8013f0c:	2380      	movs	r3, #128	@ 0x80
 8013f0e:	009b      	lsls	r3, r3, #2
 8013f10:	21ff      	movs	r1, #255	@ 0xff
 8013f12:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8013f14:	2300      	movs	r3, #0
}
 8013f16:	0018      	movs	r0, r3
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	b005      	add	sp, #20
 8013f1c:	bd90      	pop	{r4, r7, pc}
 8013f1e:	46c0      	nop			@ (mov r8, r8)
 8013f20:	00000201 	.word	0x00000201

08013f24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b082      	sub	sp, #8
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	2243      	movs	r2, #67	@ 0x43
 8013f30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8013f32:	4b02      	ldr	r3, [pc, #8]	@ (8013f3c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8013f34:	0018      	movs	r0, r3
 8013f36:	46bd      	mov	sp, r7
 8013f38:	b002      	add	sp, #8
 8013f3a:	bd80      	pop	{r7, pc}
 8013f3c:	200001e0 	.word	0x200001e0

08013f40 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b082      	sub	sp, #8
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	2243      	movs	r2, #67	@ 0x43
 8013f4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8013f4e:	4b02      	ldr	r3, [pc, #8]	@ (8013f58 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8013f50:	0018      	movs	r0, r3
 8013f52:	46bd      	mov	sp, r7
 8013f54:	b002      	add	sp, #8
 8013f56:	bd80      	pop	{r7, pc}
 8013f58:	2000019c 	.word	0x2000019c

08013f5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b082      	sub	sp, #8
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	2243      	movs	r2, #67	@ 0x43
 8013f68:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8013f6a:	4b02      	ldr	r3, [pc, #8]	@ (8013f74 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8013f6c:	0018      	movs	r0, r3
 8013f6e:	46bd      	mov	sp, r7
 8013f70:	b002      	add	sp, #8
 8013f72:	bd80      	pop	{r7, pc}
 8013f74:	20000224 	.word	0x20000224

08013f78 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b082      	sub	sp, #8
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	220a      	movs	r2, #10
 8013f84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8013f86:	4b02      	ldr	r3, [pc, #8]	@ (8013f90 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8013f88:	0018      	movs	r0, r3
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	b002      	add	sp, #8
 8013f8e:	bd80      	pop	{r7, pc}
 8013f90:	20000158 	.word	0x20000158

08013f94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b084      	sub	sp, #16
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
 8013f9c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8013f9e:	200f      	movs	r0, #15
 8013fa0:	183b      	adds	r3, r7, r0
 8013fa2:	2202      	movs	r2, #2
 8013fa4:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8013fa6:	683b      	ldr	r3, [r7, #0]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d007      	beq.n	8013fbc <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8013fac:	687a      	ldr	r2, [r7, #4]
 8013fae:	23af      	movs	r3, #175	@ 0xaf
 8013fb0:	009b      	lsls	r3, r3, #2
 8013fb2:	6839      	ldr	r1, [r7, #0]
 8013fb4:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8013fb6:	183b      	adds	r3, r7, r0
 8013fb8:	2200      	movs	r2, #0
 8013fba:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8013fbc:	230f      	movs	r3, #15
 8013fbe:	18fb      	adds	r3, r7, r3
 8013fc0:	781b      	ldrb	r3, [r3, #0]
}
 8013fc2:	0018      	movs	r0, r3
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	b004      	add	sp, #16
 8013fc8:	bd80      	pop	{r7, pc}

08013fca <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8013fca:	b580      	push	{r7, lr}
 8013fcc:	b086      	sub	sp, #24
 8013fce:	af00      	add	r7, sp, #0
 8013fd0:	60f8      	str	r0, [r7, #12]
 8013fd2:	60b9      	str	r1, [r7, #8]
 8013fd4:	1dbb      	adds	r3, r7, #6
 8013fd6:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013fd8:	68fa      	ldr	r2, [r7, #12]
 8013fda:	23ae      	movs	r3, #174	@ 0xae
 8013fdc:	009b      	lsls	r3, r3, #2
 8013fde:	58d3      	ldr	r3, [r2, r3]
 8013fe0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8013fe2:	697a      	ldr	r2, [r7, #20]
 8013fe4:	2382      	movs	r3, #130	@ 0x82
 8013fe6:	009b      	lsls	r3, r3, #2
 8013fe8:	68b9      	ldr	r1, [r7, #8]
 8013fea:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8013fec:	1dbb      	adds	r3, r7, #6
 8013fee:	8819      	ldrh	r1, [r3, #0]
 8013ff0:	697a      	ldr	r2, [r7, #20]
 8013ff2:	2384      	movs	r3, #132	@ 0x84
 8013ff4:	009b      	lsls	r3, r3, #2
 8013ff6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8013ff8:	2300      	movs	r3, #0
}
 8013ffa:	0018      	movs	r0, r3
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	b006      	add	sp, #24
 8014000:	bd80      	pop	{r7, pc}

08014002 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8014002:	b580      	push	{r7, lr}
 8014004:	b084      	sub	sp, #16
 8014006:	af00      	add	r7, sp, #0
 8014008:	6078      	str	r0, [r7, #4]
 801400a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801400c:	687a      	ldr	r2, [r7, #4]
 801400e:	23ae      	movs	r3, #174	@ 0xae
 8014010:	009b      	lsls	r3, r3, #2
 8014012:	58d3      	ldr	r3, [r2, r3]
 8014014:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8014016:	68fa      	ldr	r2, [r7, #12]
 8014018:	2381      	movs	r3, #129	@ 0x81
 801401a:	009b      	lsls	r3, r3, #2
 801401c:	6839      	ldr	r1, [r7, #0]
 801401e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8014020:	2300      	movs	r3, #0
}
 8014022:	0018      	movs	r0, r3
 8014024:	46bd      	mov	sp, r7
 8014026:	b004      	add	sp, #16
 8014028:	bd80      	pop	{r7, pc}

0801402a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801402a:	b580      	push	{r7, lr}
 801402c:	b084      	sub	sp, #16
 801402e:	af00      	add	r7, sp, #0
 8014030:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8014032:	687a      	ldr	r2, [r7, #4]
 8014034:	23ae      	movs	r3, #174	@ 0xae
 8014036:	009b      	lsls	r3, r3, #2
 8014038:	58d3      	ldr	r3, [r2, r3]
 801403a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801403c:	687a      	ldr	r2, [r7, #4]
 801403e:	23ae      	movs	r3, #174	@ 0xae
 8014040:	009b      	lsls	r3, r3, #2
 8014042:	58d3      	ldr	r3, [r2, r3]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d019      	beq.n	801407c <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	7c1b      	ldrb	r3, [r3, #16]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d10a      	bne.n	8014066 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8014050:	68fa      	ldr	r2, [r7, #12]
 8014052:	2381      	movs	r3, #129	@ 0x81
 8014054:	009b      	lsls	r3, r3, #2
 8014056:	58d2      	ldr	r2, [r2, r3]
 8014058:	2380      	movs	r3, #128	@ 0x80
 801405a:	009b      	lsls	r3, r3, #2
 801405c:	6878      	ldr	r0, [r7, #4]
 801405e:	2101      	movs	r1, #1
 8014060:	f001 fe86 	bl	8015d70 <USBD_LL_PrepareReceive>
 8014064:	e008      	b.n	8014078 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8014066:	68fa      	ldr	r2, [r7, #12]
 8014068:	2381      	movs	r3, #129	@ 0x81
 801406a:	009b      	lsls	r3, r3, #2
 801406c:	58d2      	ldr	r2, [r2, r3]
 801406e:	6878      	ldr	r0, [r7, #4]
 8014070:	2340      	movs	r3, #64	@ 0x40
 8014072:	2101      	movs	r1, #1
 8014074:	f001 fe7c 	bl	8015d70 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8014078:	2300      	movs	r3, #0
 801407a:	e000      	b.n	801407e <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801407c:	2302      	movs	r3, #2
  }
}
 801407e:	0018      	movs	r0, r3
 8014080:	46bd      	mov	sp, r7
 8014082:	b004      	add	sp, #16
 8014084:	bd80      	pop	{r7, pc}

08014086 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014086:	b580      	push	{r7, lr}
 8014088:	b084      	sub	sp, #16
 801408a:	af00      	add	r7, sp, #0
 801408c:	60f8      	str	r0, [r7, #12]
 801408e:	60b9      	str	r1, [r7, #8]
 8014090:	1dfb      	adds	r3, r7, #7
 8014092:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d101      	bne.n	801409e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801409a:	2302      	movs	r3, #2
 801409c:	e020      	b.n	80140e0 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801409e:	68fa      	ldr	r2, [r7, #12]
 80140a0:	23ad      	movs	r3, #173	@ 0xad
 80140a2:	009b      	lsls	r3, r3, #2
 80140a4:	58d3      	ldr	r3, [r2, r3]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d004      	beq.n	80140b4 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80140aa:	68fa      	ldr	r2, [r7, #12]
 80140ac:	23ad      	movs	r3, #173	@ 0xad
 80140ae:	009b      	lsls	r3, r3, #2
 80140b0:	2100      	movs	r1, #0
 80140b2:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80140b4:	68bb      	ldr	r3, [r7, #8]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d004      	beq.n	80140c4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80140ba:	68fa      	ldr	r2, [r7, #12]
 80140bc:	23ac      	movs	r3, #172	@ 0xac
 80140be:	009b      	lsls	r3, r3, #2
 80140c0:	68b9      	ldr	r1, [r7, #8]
 80140c2:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80140c4:	68fa      	ldr	r2, [r7, #12]
 80140c6:	23a7      	movs	r3, #167	@ 0xa7
 80140c8:	009b      	lsls	r3, r3, #2
 80140ca:	2101      	movs	r1, #1
 80140cc:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	1dfa      	adds	r2, r7, #7
 80140d2:	7812      	ldrb	r2, [r2, #0]
 80140d4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	0018      	movs	r0, r3
 80140da:	f001 fc75 	bl	80159c8 <USBD_LL_Init>

  return USBD_OK;
 80140de:	2300      	movs	r3, #0
}
 80140e0:	0018      	movs	r0, r3
 80140e2:	46bd      	mov	sp, r7
 80140e4:	b004      	add	sp, #16
 80140e6:	bd80      	pop	{r7, pc}

080140e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b084      	sub	sp, #16
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
 80140f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80140f2:	200f      	movs	r0, #15
 80140f4:	183b      	adds	r3, r7, r0
 80140f6:	2200      	movs	r2, #0
 80140f8:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 80140fa:	683b      	ldr	r3, [r7, #0]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d008      	beq.n	8014112 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8014100:	687a      	ldr	r2, [r7, #4]
 8014102:	23ad      	movs	r3, #173	@ 0xad
 8014104:	009b      	lsls	r3, r3, #2
 8014106:	6839      	ldr	r1, [r7, #0]
 8014108:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801410a:	183b      	adds	r3, r7, r0
 801410c:	2200      	movs	r2, #0
 801410e:	701a      	strb	r2, [r3, #0]
 8014110:	e003      	b.n	801411a <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8014112:	230f      	movs	r3, #15
 8014114:	18fb      	adds	r3, r7, r3
 8014116:	2202      	movs	r2, #2
 8014118:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801411a:	230f      	movs	r3, #15
 801411c:	18fb      	adds	r3, r7, r3
 801411e:	781b      	ldrb	r3, [r3, #0]
}
 8014120:	0018      	movs	r0, r3
 8014122:	46bd      	mov	sp, r7
 8014124:	b004      	add	sp, #16
 8014126:	bd80      	pop	{r7, pc}

08014128 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b082      	sub	sp, #8
 801412c:	af00      	add	r7, sp, #0
 801412e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	0018      	movs	r0, r3
 8014134:	f001 fcac 	bl	8015a90 <USBD_LL_Start>

  return USBD_OK;
 8014138:	2300      	movs	r3, #0
}
 801413a:	0018      	movs	r0, r3
 801413c:	46bd      	mov	sp, r7
 801413e:	b002      	add	sp, #8
 8014140:	bd80      	pop	{r7, pc}

08014142 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8014142:	b580      	push	{r7, lr}
 8014144:	b082      	sub	sp, #8
 8014146:	af00      	add	r7, sp, #0
 8014148:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801414a:	2300      	movs	r3, #0
}
 801414c:	0018      	movs	r0, r3
 801414e:	46bd      	mov	sp, r7
 8014150:	b002      	add	sp, #8
 8014152:	bd80      	pop	{r7, pc}

08014154 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8014154:	b590      	push	{r4, r7, lr}
 8014156:	b085      	sub	sp, #20
 8014158:	af00      	add	r7, sp, #0
 801415a:	6078      	str	r0, [r7, #4]
 801415c:	000a      	movs	r2, r1
 801415e:	1cfb      	adds	r3, r7, #3
 8014160:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8014162:	240f      	movs	r4, #15
 8014164:	193b      	adds	r3, r7, r4
 8014166:	2202      	movs	r2, #2
 8014168:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801416a:	687a      	ldr	r2, [r7, #4]
 801416c:	23ad      	movs	r3, #173	@ 0xad
 801416e:	009b      	lsls	r3, r3, #2
 8014170:	58d3      	ldr	r3, [r2, r3]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d00e      	beq.n	8014194 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8014176:	687a      	ldr	r2, [r7, #4]
 8014178:	23ad      	movs	r3, #173	@ 0xad
 801417a:	009b      	lsls	r3, r3, #2
 801417c:	58d3      	ldr	r3, [r2, r3]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	1cfa      	adds	r2, r7, #3
 8014182:	7811      	ldrb	r1, [r2, #0]
 8014184:	687a      	ldr	r2, [r7, #4]
 8014186:	0010      	movs	r0, r2
 8014188:	4798      	blx	r3
 801418a:	1e03      	subs	r3, r0, #0
 801418c:	d102      	bne.n	8014194 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801418e:	193b      	adds	r3, r7, r4
 8014190:	2200      	movs	r2, #0
 8014192:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8014194:	230f      	movs	r3, #15
 8014196:	18fb      	adds	r3, r7, r3
 8014198:	781b      	ldrb	r3, [r3, #0]
}
 801419a:	0018      	movs	r0, r3
 801419c:	46bd      	mov	sp, r7
 801419e:	b005      	add	sp, #20
 80141a0:	bd90      	pop	{r4, r7, pc}

080141a2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80141a2:	b580      	push	{r7, lr}
 80141a4:	b082      	sub	sp, #8
 80141a6:	af00      	add	r7, sp, #0
 80141a8:	6078      	str	r0, [r7, #4]
 80141aa:	000a      	movs	r2, r1
 80141ac:	1cfb      	adds	r3, r7, #3
 80141ae:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80141b0:	687a      	ldr	r2, [r7, #4]
 80141b2:	23ad      	movs	r3, #173	@ 0xad
 80141b4:	009b      	lsls	r3, r3, #2
 80141b6:	58d3      	ldr	r3, [r2, r3]
 80141b8:	685b      	ldr	r3, [r3, #4]
 80141ba:	1cfa      	adds	r2, r7, #3
 80141bc:	7811      	ldrb	r1, [r2, #0]
 80141be:	687a      	ldr	r2, [r7, #4]
 80141c0:	0010      	movs	r0, r2
 80141c2:	4798      	blx	r3

  return USBD_OK;
 80141c4:	2300      	movs	r3, #0
}
 80141c6:	0018      	movs	r0, r3
 80141c8:	46bd      	mov	sp, r7
 80141ca:	b002      	add	sp, #8
 80141cc:	bd80      	pop	{r7, pc}
	...

080141d0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b082      	sub	sp, #8
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
 80141d8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	22aa      	movs	r2, #170	@ 0xaa
 80141de:	0092      	lsls	r2, r2, #2
 80141e0:	4694      	mov	ip, r2
 80141e2:	4463      	add	r3, ip
 80141e4:	683a      	ldr	r2, [r7, #0]
 80141e6:	0011      	movs	r1, r2
 80141e8:	0018      	movs	r0, r3
 80141ea:	f001 f810 	bl	801520e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80141ee:	687a      	ldr	r2, [r7, #4]
 80141f0:	23a5      	movs	r3, #165	@ 0xa5
 80141f2:	009b      	lsls	r3, r3, #2
 80141f4:	2101      	movs	r1, #1
 80141f6:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	4a23      	ldr	r2, [pc, #140]	@ (8014288 <USBD_LL_SetupStage+0xb8>)
 80141fc:	5a9b      	ldrh	r3, [r3, r2]
 80141fe:	0019      	movs	r1, r3
 8014200:	687a      	ldr	r2, [r7, #4]
 8014202:	23a6      	movs	r3, #166	@ 0xa6
 8014204:	009b      	lsls	r3, r3, #2
 8014206:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8014208:	687a      	ldr	r2, [r7, #4]
 801420a:	23aa      	movs	r3, #170	@ 0xaa
 801420c:	009b      	lsls	r3, r3, #2
 801420e:	5cd3      	ldrb	r3, [r2, r3]
 8014210:	001a      	movs	r2, r3
 8014212:	231f      	movs	r3, #31
 8014214:	4013      	ands	r3, r2
 8014216:	2b02      	cmp	r3, #2
 8014218:	d019      	beq.n	801424e <USBD_LL_SetupStage+0x7e>
 801421a:	d822      	bhi.n	8014262 <USBD_LL_SetupStage+0x92>
 801421c:	2b00      	cmp	r3, #0
 801421e:	d002      	beq.n	8014226 <USBD_LL_SetupStage+0x56>
 8014220:	2b01      	cmp	r3, #1
 8014222:	d00a      	beq.n	801423a <USBD_LL_SetupStage+0x6a>
 8014224:	e01d      	b.n	8014262 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	22aa      	movs	r2, #170	@ 0xaa
 801422a:	0092      	lsls	r2, r2, #2
 801422c:	189a      	adds	r2, r3, r2
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	0011      	movs	r1, r2
 8014232:	0018      	movs	r0, r3
 8014234:	f000 fa10 	bl	8014658 <USBD_StdDevReq>
      break;
 8014238:	e020      	b.n	801427c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	22aa      	movs	r2, #170	@ 0xaa
 801423e:	0092      	lsls	r2, r2, #2
 8014240:	189a      	adds	r2, r3, r2
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	0011      	movs	r1, r2
 8014246:	0018      	movs	r0, r3
 8014248:	f000 fa78 	bl	801473c <USBD_StdItfReq>
      break;
 801424c:	e016      	b.n	801427c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	22aa      	movs	r2, #170	@ 0xaa
 8014252:	0092      	lsls	r2, r2, #2
 8014254:	189a      	adds	r2, r3, r2
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	0011      	movs	r1, r2
 801425a:	0018      	movs	r0, r3
 801425c:	f000 fac5 	bl	80147ea <USBD_StdEPReq>
      break;
 8014260:	e00c      	b.n	801427c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014262:	687a      	ldr	r2, [r7, #4]
 8014264:	23aa      	movs	r3, #170	@ 0xaa
 8014266:	009b      	lsls	r3, r3, #2
 8014268:	5cd3      	ldrb	r3, [r2, r3]
 801426a:	227f      	movs	r2, #127	@ 0x7f
 801426c:	4393      	bics	r3, r2
 801426e:	b2da      	uxtb	r2, r3
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	0011      	movs	r1, r2
 8014274:	0018      	movs	r0, r3
 8014276:	f001 fc92 	bl	8015b9e <USBD_LL_StallEP>
      break;
 801427a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801427c:	2300      	movs	r3, #0
}
 801427e:	0018      	movs	r0, r3
 8014280:	46bd      	mov	sp, r7
 8014282:	b002      	add	sp, #8
 8014284:	bd80      	pop	{r7, pc}
 8014286:	46c0      	nop			@ (mov r8, r8)
 8014288:	000002ae 	.word	0x000002ae

0801428c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b086      	sub	sp, #24
 8014290:	af00      	add	r7, sp, #0
 8014292:	60f8      	str	r0, [r7, #12]
 8014294:	607a      	str	r2, [r7, #4]
 8014296:	200b      	movs	r0, #11
 8014298:	183b      	adds	r3, r7, r0
 801429a:	1c0a      	adds	r2, r1, #0
 801429c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801429e:	183b      	adds	r3, r7, r0
 80142a0:	781b      	ldrb	r3, [r3, #0]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d154      	bne.n	8014350 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	3355      	adds	r3, #85	@ 0x55
 80142aa:	33ff      	adds	r3, #255	@ 0xff
 80142ac:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80142ae:	68fa      	ldr	r2, [r7, #12]
 80142b0:	23a5      	movs	r3, #165	@ 0xa5
 80142b2:	009b      	lsls	r3, r3, #2
 80142b4:	58d3      	ldr	r3, [r2, r3]
 80142b6:	2b03      	cmp	r3, #3
 80142b8:	d139      	bne.n	801432e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80142ba:	697b      	ldr	r3, [r7, #20]
 80142bc:	68da      	ldr	r2, [r3, #12]
 80142be:	697b      	ldr	r3, [r7, #20]
 80142c0:	691b      	ldr	r3, [r3, #16]
 80142c2:	429a      	cmp	r2, r3
 80142c4:	d919      	bls.n	80142fa <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80142c6:	697b      	ldr	r3, [r7, #20]
 80142c8:	68da      	ldr	r2, [r3, #12]
 80142ca:	697b      	ldr	r3, [r7, #20]
 80142cc:	691b      	ldr	r3, [r3, #16]
 80142ce:	1ad2      	subs	r2, r2, r3
 80142d0:	697b      	ldr	r3, [r7, #20]
 80142d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	68da      	ldr	r2, [r3, #12]
 80142d8:	697b      	ldr	r3, [r7, #20]
 80142da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80142dc:	429a      	cmp	r2, r3
 80142de:	d203      	bcs.n	80142e8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80142e0:	697b      	ldr	r3, [r7, #20]
 80142e2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80142e4:	b29b      	uxth	r3, r3
 80142e6:	e002      	b.n	80142ee <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80142e8:	697b      	ldr	r3, [r7, #20]
 80142ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80142ec:	b29b      	uxth	r3, r3
 80142ee:	6879      	ldr	r1, [r7, #4]
 80142f0:	68f8      	ldr	r0, [r7, #12]
 80142f2:	001a      	movs	r2, r3
 80142f4:	f001 f898 	bl	8015428 <USBD_CtlContinueRx>
 80142f8:	e045      	b.n	8014386 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80142fa:	68fa      	ldr	r2, [r7, #12]
 80142fc:	23ad      	movs	r3, #173	@ 0xad
 80142fe:	009b      	lsls	r3, r3, #2
 8014300:	58d3      	ldr	r3, [r2, r3]
 8014302:	691b      	ldr	r3, [r3, #16]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d00d      	beq.n	8014324 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014308:	68fa      	ldr	r2, [r7, #12]
 801430a:	23a7      	movs	r3, #167	@ 0xa7
 801430c:	009b      	lsls	r3, r3, #2
 801430e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014310:	2b03      	cmp	r3, #3
 8014312:	d107      	bne.n	8014324 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8014314:	68fa      	ldr	r2, [r7, #12]
 8014316:	23ad      	movs	r3, #173	@ 0xad
 8014318:	009b      	lsls	r3, r3, #2
 801431a:	58d3      	ldr	r3, [r2, r3]
 801431c:	691b      	ldr	r3, [r3, #16]
 801431e:	68fa      	ldr	r2, [r7, #12]
 8014320:	0010      	movs	r0, r2
 8014322:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	0018      	movs	r0, r3
 8014328:	f001 f891 	bl	801544e <USBD_CtlSendStatus>
 801432c:	e02b      	b.n	8014386 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801432e:	68fa      	ldr	r2, [r7, #12]
 8014330:	23a5      	movs	r3, #165	@ 0xa5
 8014332:	009b      	lsls	r3, r3, #2
 8014334:	58d3      	ldr	r3, [r2, r3]
 8014336:	2b05      	cmp	r3, #5
 8014338:	d125      	bne.n	8014386 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801433a:	68fa      	ldr	r2, [r7, #12]
 801433c:	23a5      	movs	r3, #165	@ 0xa5
 801433e:	009b      	lsls	r3, r3, #2
 8014340:	2100      	movs	r1, #0
 8014342:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	2100      	movs	r1, #0
 8014348:	0018      	movs	r0, r3
 801434a:	f001 fc28 	bl	8015b9e <USBD_LL_StallEP>
 801434e:	e01a      	b.n	8014386 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8014350:	68fa      	ldr	r2, [r7, #12]
 8014352:	23ad      	movs	r3, #173	@ 0xad
 8014354:	009b      	lsls	r3, r3, #2
 8014356:	58d3      	ldr	r3, [r2, r3]
 8014358:	699b      	ldr	r3, [r3, #24]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d011      	beq.n	8014382 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801435e:	68fa      	ldr	r2, [r7, #12]
 8014360:	23a7      	movs	r3, #167	@ 0xa7
 8014362:	009b      	lsls	r3, r3, #2
 8014364:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8014366:	2b03      	cmp	r3, #3
 8014368:	d10b      	bne.n	8014382 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801436a:	68fa      	ldr	r2, [r7, #12]
 801436c:	23ad      	movs	r3, #173	@ 0xad
 801436e:	009b      	lsls	r3, r3, #2
 8014370:	58d3      	ldr	r3, [r2, r3]
 8014372:	699b      	ldr	r3, [r3, #24]
 8014374:	220b      	movs	r2, #11
 8014376:	18ba      	adds	r2, r7, r2
 8014378:	7811      	ldrb	r1, [r2, #0]
 801437a:	68fa      	ldr	r2, [r7, #12]
 801437c:	0010      	movs	r0, r2
 801437e:	4798      	blx	r3
 8014380:	e001      	b.n	8014386 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8014382:	2302      	movs	r3, #2
 8014384:	e000      	b.n	8014388 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8014386:	2300      	movs	r3, #0
}
 8014388:	0018      	movs	r0, r3
 801438a:	46bd      	mov	sp, r7
 801438c:	b006      	add	sp, #24
 801438e:	bd80      	pop	{r7, pc}

08014390 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b086      	sub	sp, #24
 8014394:	af00      	add	r7, sp, #0
 8014396:	60f8      	str	r0, [r7, #12]
 8014398:	607a      	str	r2, [r7, #4]
 801439a:	200b      	movs	r0, #11
 801439c:	183b      	adds	r3, r7, r0
 801439e:	1c0a      	adds	r2, r1, #0
 80143a0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80143a2:	183b      	adds	r3, r7, r0
 80143a4:	781b      	ldrb	r3, [r3, #0]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d000      	beq.n	80143ac <USBD_LL_DataInStage+0x1c>
 80143aa:	e08e      	b.n	80144ca <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	3314      	adds	r3, #20
 80143b0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80143b2:	68fa      	ldr	r2, [r7, #12]
 80143b4:	23a5      	movs	r3, #165	@ 0xa5
 80143b6:	009b      	lsls	r3, r3, #2
 80143b8:	58d3      	ldr	r3, [r2, r3]
 80143ba:	2b02      	cmp	r3, #2
 80143bc:	d164      	bne.n	8014488 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80143be:	697b      	ldr	r3, [r7, #20]
 80143c0:	68da      	ldr	r2, [r3, #12]
 80143c2:	697b      	ldr	r3, [r7, #20]
 80143c4:	691b      	ldr	r3, [r3, #16]
 80143c6:	429a      	cmp	r2, r3
 80143c8:	d915      	bls.n	80143f6 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80143ca:	697b      	ldr	r3, [r7, #20]
 80143cc:	68da      	ldr	r2, [r3, #12]
 80143ce:	697b      	ldr	r3, [r7, #20]
 80143d0:	691b      	ldr	r3, [r3, #16]
 80143d2:	1ad2      	subs	r2, r2, r3
 80143d4:	697b      	ldr	r3, [r7, #20]
 80143d6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80143d8:	697b      	ldr	r3, [r7, #20]
 80143da:	68db      	ldr	r3, [r3, #12]
 80143dc:	b29a      	uxth	r2, r3
 80143de:	6879      	ldr	r1, [r7, #4]
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	0018      	movs	r0, r3
 80143e4:	f000 ffe9 	bl	80153ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80143e8:	68f8      	ldr	r0, [r7, #12]
 80143ea:	2300      	movs	r3, #0
 80143ec:	2200      	movs	r2, #0
 80143ee:	2100      	movs	r1, #0
 80143f0:	f001 fcbe 	bl	8015d70 <USBD_LL_PrepareReceive>
 80143f4:	e059      	b.n	80144aa <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80143f6:	697b      	ldr	r3, [r7, #20]
 80143f8:	689a      	ldr	r2, [r3, #8]
 80143fa:	697b      	ldr	r3, [r7, #20]
 80143fc:	691b      	ldr	r3, [r3, #16]
 80143fe:	0019      	movs	r1, r3
 8014400:	0010      	movs	r0, r2
 8014402:	f7eb ff23 	bl	800024c <__aeabi_uidivmod>
 8014406:	1e0b      	subs	r3, r1, #0
 8014408:	d11f      	bne.n	801444a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801440a:	697b      	ldr	r3, [r7, #20]
 801440c:	689a      	ldr	r2, [r3, #8]
 801440e:	697b      	ldr	r3, [r7, #20]
 8014410:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8014412:	429a      	cmp	r2, r3
 8014414:	d319      	bcc.n	801444a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8014416:	697b      	ldr	r3, [r7, #20]
 8014418:	689a      	ldr	r2, [r3, #8]
 801441a:	68f9      	ldr	r1, [r7, #12]
 801441c:	23a6      	movs	r3, #166	@ 0xa6
 801441e:	009b      	lsls	r3, r3, #2
 8014420:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8014422:	429a      	cmp	r2, r3
 8014424:	d211      	bcs.n	801444a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	2200      	movs	r2, #0
 801442a:	2100      	movs	r1, #0
 801442c:	0018      	movs	r0, r3
 801442e:	f000 ffc4 	bl	80153ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014432:	68fa      	ldr	r2, [r7, #12]
 8014434:	23a6      	movs	r3, #166	@ 0xa6
 8014436:	009b      	lsls	r3, r3, #2
 8014438:	2100      	movs	r1, #0
 801443a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801443c:	68f8      	ldr	r0, [r7, #12]
 801443e:	2300      	movs	r3, #0
 8014440:	2200      	movs	r2, #0
 8014442:	2100      	movs	r1, #0
 8014444:	f001 fc94 	bl	8015d70 <USBD_LL_PrepareReceive>
 8014448:	e02f      	b.n	80144aa <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801444a:	68fa      	ldr	r2, [r7, #12]
 801444c:	23ad      	movs	r3, #173	@ 0xad
 801444e:	009b      	lsls	r3, r3, #2
 8014450:	58d3      	ldr	r3, [r2, r3]
 8014452:	68db      	ldr	r3, [r3, #12]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d00d      	beq.n	8014474 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014458:	68fa      	ldr	r2, [r7, #12]
 801445a:	23a7      	movs	r3, #167	@ 0xa7
 801445c:	009b      	lsls	r3, r3, #2
 801445e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014460:	2b03      	cmp	r3, #3
 8014462:	d107      	bne.n	8014474 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8014464:	68fa      	ldr	r2, [r7, #12]
 8014466:	23ad      	movs	r3, #173	@ 0xad
 8014468:	009b      	lsls	r3, r3, #2
 801446a:	58d3      	ldr	r3, [r2, r3]
 801446c:	68db      	ldr	r3, [r3, #12]
 801446e:	68fa      	ldr	r2, [r7, #12]
 8014470:	0010      	movs	r0, r2
 8014472:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	2180      	movs	r1, #128	@ 0x80
 8014478:	0018      	movs	r0, r3
 801447a:	f001 fb90 	bl	8015b9e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	0018      	movs	r0, r3
 8014482:	f000 fff8 	bl	8015476 <USBD_CtlReceiveStatus>
 8014486:	e010      	b.n	80144aa <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8014488:	68fa      	ldr	r2, [r7, #12]
 801448a:	23a5      	movs	r3, #165	@ 0xa5
 801448c:	009b      	lsls	r3, r3, #2
 801448e:	58d3      	ldr	r3, [r2, r3]
 8014490:	2b04      	cmp	r3, #4
 8014492:	d005      	beq.n	80144a0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8014494:	68fa      	ldr	r2, [r7, #12]
 8014496:	23a5      	movs	r3, #165	@ 0xa5
 8014498:	009b      	lsls	r3, r3, #2
 801449a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801449c:	2b00      	cmp	r3, #0
 801449e:	d104      	bne.n	80144aa <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	2180      	movs	r1, #128	@ 0x80
 80144a4:	0018      	movs	r0, r3
 80144a6:	f001 fb7a 	bl	8015b9e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80144aa:	68fa      	ldr	r2, [r7, #12]
 80144ac:	23a8      	movs	r3, #168	@ 0xa8
 80144ae:	009b      	lsls	r3, r3, #2
 80144b0:	5cd3      	ldrb	r3, [r2, r3]
 80144b2:	2b01      	cmp	r3, #1
 80144b4:	d124      	bne.n	8014500 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	0018      	movs	r0, r3
 80144ba:	f7ff fe42 	bl	8014142 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80144be:	68fa      	ldr	r2, [r7, #12]
 80144c0:	23a8      	movs	r3, #168	@ 0xa8
 80144c2:	009b      	lsls	r3, r3, #2
 80144c4:	2100      	movs	r1, #0
 80144c6:	54d1      	strb	r1, [r2, r3]
 80144c8:	e01a      	b.n	8014500 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80144ca:	68fa      	ldr	r2, [r7, #12]
 80144cc:	23ad      	movs	r3, #173	@ 0xad
 80144ce:	009b      	lsls	r3, r3, #2
 80144d0:	58d3      	ldr	r3, [r2, r3]
 80144d2:	695b      	ldr	r3, [r3, #20]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d011      	beq.n	80144fc <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80144d8:	68fa      	ldr	r2, [r7, #12]
 80144da:	23a7      	movs	r3, #167	@ 0xa7
 80144dc:	009b      	lsls	r3, r3, #2
 80144de:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80144e0:	2b03      	cmp	r3, #3
 80144e2:	d10b      	bne.n	80144fc <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80144e4:	68fa      	ldr	r2, [r7, #12]
 80144e6:	23ad      	movs	r3, #173	@ 0xad
 80144e8:	009b      	lsls	r3, r3, #2
 80144ea:	58d3      	ldr	r3, [r2, r3]
 80144ec:	695b      	ldr	r3, [r3, #20]
 80144ee:	220b      	movs	r2, #11
 80144f0:	18ba      	adds	r2, r7, r2
 80144f2:	7811      	ldrb	r1, [r2, #0]
 80144f4:	68fa      	ldr	r2, [r7, #12]
 80144f6:	0010      	movs	r0, r2
 80144f8:	4798      	blx	r3
 80144fa:	e001      	b.n	8014500 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80144fc:	2302      	movs	r3, #2
 80144fe:	e000      	b.n	8014502 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8014500:	2300      	movs	r3, #0
}
 8014502:	0018      	movs	r0, r3
 8014504:	46bd      	mov	sp, r7
 8014506:	b006      	add	sp, #24
 8014508:	bd80      	pop	{r7, pc}

0801450a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801450a:	b580      	push	{r7, lr}
 801450c:	b082      	sub	sp, #8
 801450e:	af00      	add	r7, sp, #0
 8014510:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	2340      	movs	r3, #64	@ 0x40
 8014516:	2200      	movs	r2, #0
 8014518:	2100      	movs	r1, #0
 801451a:	f001 fade 	bl	8015ada <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801451e:	687a      	ldr	r2, [r7, #4]
 8014520:	23ac      	movs	r3, #172	@ 0xac
 8014522:	005b      	lsls	r3, r3, #1
 8014524:	2101      	movs	r1, #1
 8014526:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014528:	687a      	ldr	r2, [r7, #4]
 801452a:	23b2      	movs	r3, #178	@ 0xb2
 801452c:	005b      	lsls	r3, r3, #1
 801452e:	2140      	movs	r1, #64	@ 0x40
 8014530:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	2340      	movs	r3, #64	@ 0x40
 8014536:	2200      	movs	r2, #0
 8014538:	2180      	movs	r1, #128	@ 0x80
 801453a:	f001 face 	bl	8015ada <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	2201      	movs	r2, #1
 8014542:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	2240      	movs	r2, #64	@ 0x40
 8014548:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801454a:	687a      	ldr	r2, [r7, #4]
 801454c:	23a7      	movs	r3, #167	@ 0xa7
 801454e:	009b      	lsls	r3, r3, #2
 8014550:	2101      	movs	r1, #1
 8014552:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8014554:	687a      	ldr	r2, [r7, #4]
 8014556:	23a5      	movs	r3, #165	@ 0xa5
 8014558:	009b      	lsls	r3, r3, #2
 801455a:	2100      	movs	r1, #0
 801455c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	2200      	movs	r2, #0
 8014562:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014564:	687a      	ldr	r2, [r7, #4]
 8014566:	23a9      	movs	r3, #169	@ 0xa9
 8014568:	009b      	lsls	r3, r3, #2
 801456a:	2100      	movs	r1, #0
 801456c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801456e:	687a      	ldr	r2, [r7, #4]
 8014570:	23ae      	movs	r3, #174	@ 0xae
 8014572:	009b      	lsls	r3, r3, #2
 8014574:	58d3      	ldr	r3, [r2, r3]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d00a      	beq.n	8014590 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801457a:	687a      	ldr	r2, [r7, #4]
 801457c:	23ad      	movs	r3, #173	@ 0xad
 801457e:	009b      	lsls	r3, r3, #2
 8014580:	58d3      	ldr	r3, [r2, r3]
 8014582:	685a      	ldr	r2, [r3, #4]
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	685b      	ldr	r3, [r3, #4]
 8014588:	b2d9      	uxtb	r1, r3
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	0018      	movs	r0, r3
 801458e:	4790      	blx	r2
  }

  return USBD_OK;
 8014590:	2300      	movs	r3, #0
}
 8014592:	0018      	movs	r0, r3
 8014594:	46bd      	mov	sp, r7
 8014596:	b002      	add	sp, #8
 8014598:	bd80      	pop	{r7, pc}

0801459a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801459a:	b580      	push	{r7, lr}
 801459c:	b082      	sub	sp, #8
 801459e:	af00      	add	r7, sp, #0
 80145a0:	6078      	str	r0, [r7, #4]
 80145a2:	000a      	movs	r2, r1
 80145a4:	1cfb      	adds	r3, r7, #3
 80145a6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	1cfa      	adds	r2, r7, #3
 80145ac:	7812      	ldrb	r2, [r2, #0]
 80145ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80145b0:	2300      	movs	r3, #0
}
 80145b2:	0018      	movs	r0, r3
 80145b4:	46bd      	mov	sp, r7
 80145b6:	b002      	add	sp, #8
 80145b8:	bd80      	pop	{r7, pc}
	...

080145bc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	b082      	sub	sp, #8
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80145c4:	687a      	ldr	r2, [r7, #4]
 80145c6:	23a7      	movs	r3, #167	@ 0xa7
 80145c8:	009b      	lsls	r3, r3, #2
 80145ca:	5cd1      	ldrb	r1, [r2, r3]
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	4a06      	ldr	r2, [pc, #24]	@ (80145e8 <USBD_LL_Suspend+0x2c>)
 80145d0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80145d2:	687a      	ldr	r2, [r7, #4]
 80145d4:	23a7      	movs	r3, #167	@ 0xa7
 80145d6:	009b      	lsls	r3, r3, #2
 80145d8:	2104      	movs	r1, #4
 80145da:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80145dc:	2300      	movs	r3, #0
}
 80145de:	0018      	movs	r0, r3
 80145e0:	46bd      	mov	sp, r7
 80145e2:	b002      	add	sp, #8
 80145e4:	bd80      	pop	{r7, pc}
 80145e6:	46c0      	nop			@ (mov r8, r8)
 80145e8:	0000029d 	.word	0x0000029d

080145ec <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b082      	sub	sp, #8
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80145f4:	687a      	ldr	r2, [r7, #4]
 80145f6:	23a7      	movs	r3, #167	@ 0xa7
 80145f8:	009b      	lsls	r3, r3, #2
 80145fa:	5cd3      	ldrb	r3, [r2, r3]
 80145fc:	2b04      	cmp	r3, #4
 80145fe:	d106      	bne.n	801460e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	4a05      	ldr	r2, [pc, #20]	@ (8014618 <USBD_LL_Resume+0x2c>)
 8014604:	5c99      	ldrb	r1, [r3, r2]
 8014606:	687a      	ldr	r2, [r7, #4]
 8014608:	23a7      	movs	r3, #167	@ 0xa7
 801460a:	009b      	lsls	r3, r3, #2
 801460c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801460e:	2300      	movs	r3, #0
}
 8014610:	0018      	movs	r0, r3
 8014612:	46bd      	mov	sp, r7
 8014614:	b002      	add	sp, #8
 8014616:	bd80      	pop	{r7, pc}
 8014618:	0000029d 	.word	0x0000029d

0801461c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801461c:	b580      	push	{r7, lr}
 801461e:	b082      	sub	sp, #8
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014624:	687a      	ldr	r2, [r7, #4]
 8014626:	23a7      	movs	r3, #167	@ 0xa7
 8014628:	009b      	lsls	r3, r3, #2
 801462a:	5cd3      	ldrb	r3, [r2, r3]
 801462c:	2b03      	cmp	r3, #3
 801462e:	d10e      	bne.n	801464e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8014630:	687a      	ldr	r2, [r7, #4]
 8014632:	23ad      	movs	r3, #173	@ 0xad
 8014634:	009b      	lsls	r3, r3, #2
 8014636:	58d3      	ldr	r3, [r2, r3]
 8014638:	69db      	ldr	r3, [r3, #28]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d007      	beq.n	801464e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801463e:	687a      	ldr	r2, [r7, #4]
 8014640:	23ad      	movs	r3, #173	@ 0xad
 8014642:	009b      	lsls	r3, r3, #2
 8014644:	58d3      	ldr	r3, [r2, r3]
 8014646:	69db      	ldr	r3, [r3, #28]
 8014648:	687a      	ldr	r2, [r7, #4]
 801464a:	0010      	movs	r0, r2
 801464c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801464e:	2300      	movs	r3, #0
}
 8014650:	0018      	movs	r0, r3
 8014652:	46bd      	mov	sp, r7
 8014654:	b002      	add	sp, #8
 8014656:	bd80      	pop	{r7, pc}

08014658 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b084      	sub	sp, #16
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]
 8014660:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014662:	230f      	movs	r3, #15
 8014664:	18fb      	adds	r3, r7, r3
 8014666:	2200      	movs	r2, #0
 8014668:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801466a:	683b      	ldr	r3, [r7, #0]
 801466c:	781b      	ldrb	r3, [r3, #0]
 801466e:	001a      	movs	r2, r3
 8014670:	2360      	movs	r3, #96	@ 0x60
 8014672:	4013      	ands	r3, r2
 8014674:	2b40      	cmp	r3, #64	@ 0x40
 8014676:	d004      	beq.n	8014682 <USBD_StdDevReq+0x2a>
 8014678:	d84f      	bhi.n	801471a <USBD_StdDevReq+0xc2>
 801467a:	2b00      	cmp	r3, #0
 801467c:	d00b      	beq.n	8014696 <USBD_StdDevReq+0x3e>
 801467e:	2b20      	cmp	r3, #32
 8014680:	d14b      	bne.n	801471a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014682:	687a      	ldr	r2, [r7, #4]
 8014684:	23ad      	movs	r3, #173	@ 0xad
 8014686:	009b      	lsls	r3, r3, #2
 8014688:	58d3      	ldr	r3, [r2, r3]
 801468a:	689b      	ldr	r3, [r3, #8]
 801468c:	6839      	ldr	r1, [r7, #0]
 801468e:	687a      	ldr	r2, [r7, #4]
 8014690:	0010      	movs	r0, r2
 8014692:	4798      	blx	r3
      break;
 8014694:	e048      	b.n	8014728 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	785b      	ldrb	r3, [r3, #1]
 801469a:	2b09      	cmp	r3, #9
 801469c:	d835      	bhi.n	801470a <USBD_StdDevReq+0xb2>
 801469e:	009a      	lsls	r2, r3, #2
 80146a0:	4b25      	ldr	r3, [pc, #148]	@ (8014738 <USBD_StdDevReq+0xe0>)
 80146a2:	18d3      	adds	r3, r2, r3
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80146a8:	683a      	ldr	r2, [r7, #0]
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	0011      	movs	r1, r2
 80146ae:	0018      	movs	r0, r3
 80146b0:	f000 fa52 	bl	8014b58 <USBD_GetDescriptor>
          break;
 80146b4:	e030      	b.n	8014718 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80146b6:	683a      	ldr	r2, [r7, #0]
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	0011      	movs	r1, r2
 80146bc:	0018      	movs	r0, r3
 80146be:	f000 fbfd 	bl	8014ebc <USBD_SetAddress>
          break;
 80146c2:	e029      	b.n	8014718 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80146c4:	683a      	ldr	r2, [r7, #0]
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	0011      	movs	r1, r2
 80146ca:	0018      	movs	r0, r3
 80146cc:	f000 fc4a 	bl	8014f64 <USBD_SetConfig>
          break;
 80146d0:	e022      	b.n	8014718 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80146d2:	683a      	ldr	r2, [r7, #0]
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	0011      	movs	r1, r2
 80146d8:	0018      	movs	r0, r3
 80146da:	f000 fce7 	bl	80150ac <USBD_GetConfig>
          break;
 80146de:	e01b      	b.n	8014718 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80146e0:	683a      	ldr	r2, [r7, #0]
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	0011      	movs	r1, r2
 80146e6:	0018      	movs	r0, r3
 80146e8:	f000 fd1b 	bl	8015122 <USBD_GetStatus>
          break;
 80146ec:	e014      	b.n	8014718 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80146ee:	683a      	ldr	r2, [r7, #0]
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	0011      	movs	r1, r2
 80146f4:	0018      	movs	r0, r3
 80146f6:	f000 fd4e 	bl	8015196 <USBD_SetFeature>
          break;
 80146fa:	e00d      	b.n	8014718 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80146fc:	683a      	ldr	r2, [r7, #0]
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	0011      	movs	r1, r2
 8014702:	0018      	movs	r0, r3
 8014704:	f000 fd5d 	bl	80151c2 <USBD_ClrFeature>
          break;
 8014708:	e006      	b.n	8014718 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801470a:	683a      	ldr	r2, [r7, #0]
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	0011      	movs	r1, r2
 8014710:	0018      	movs	r0, r3
 8014712:	f000 fdb4 	bl	801527e <USBD_CtlError>
          break;
 8014716:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014718:	e006      	b.n	8014728 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801471a:	683a      	ldr	r2, [r7, #0]
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	0011      	movs	r1, r2
 8014720:	0018      	movs	r0, r3
 8014722:	f000 fdac 	bl	801527e <USBD_CtlError>
      break;
 8014726:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8014728:	230f      	movs	r3, #15
 801472a:	18fb      	adds	r3, r7, r3
 801472c:	781b      	ldrb	r3, [r3, #0]
}
 801472e:	0018      	movs	r0, r3
 8014730:	46bd      	mov	sp, r7
 8014732:	b004      	add	sp, #16
 8014734:	bd80      	pop	{r7, pc}
 8014736:	46c0      	nop			@ (mov r8, r8)
 8014738:	0801a47c 	.word	0x0801a47c

0801473c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801473c:	b5b0      	push	{r4, r5, r7, lr}
 801473e:	b084      	sub	sp, #16
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
 8014744:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014746:	230f      	movs	r3, #15
 8014748:	18fb      	adds	r3, r7, r3
 801474a:	2200      	movs	r2, #0
 801474c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801474e:	683b      	ldr	r3, [r7, #0]
 8014750:	781b      	ldrb	r3, [r3, #0]
 8014752:	001a      	movs	r2, r3
 8014754:	2360      	movs	r3, #96	@ 0x60
 8014756:	4013      	ands	r3, r2
 8014758:	2b40      	cmp	r3, #64	@ 0x40
 801475a:	d004      	beq.n	8014766 <USBD_StdItfReq+0x2a>
 801475c:	d839      	bhi.n	80147d2 <USBD_StdItfReq+0x96>
 801475e:	2b00      	cmp	r3, #0
 8014760:	d001      	beq.n	8014766 <USBD_StdItfReq+0x2a>
 8014762:	2b20      	cmp	r3, #32
 8014764:	d135      	bne.n	80147d2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014766:	687a      	ldr	r2, [r7, #4]
 8014768:	23a7      	movs	r3, #167	@ 0xa7
 801476a:	009b      	lsls	r3, r3, #2
 801476c:	5cd3      	ldrb	r3, [r2, r3]
 801476e:	3b01      	subs	r3, #1
 8014770:	2b02      	cmp	r3, #2
 8014772:	d825      	bhi.n	80147c0 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014774:	683b      	ldr	r3, [r7, #0]
 8014776:	889b      	ldrh	r3, [r3, #4]
 8014778:	b2db      	uxtb	r3, r3
 801477a:	2b01      	cmp	r3, #1
 801477c:	d819      	bhi.n	80147b2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801477e:	687a      	ldr	r2, [r7, #4]
 8014780:	23ad      	movs	r3, #173	@ 0xad
 8014782:	009b      	lsls	r3, r3, #2
 8014784:	58d3      	ldr	r3, [r2, r3]
 8014786:	689b      	ldr	r3, [r3, #8]
 8014788:	250f      	movs	r5, #15
 801478a:	197c      	adds	r4, r7, r5
 801478c:	6839      	ldr	r1, [r7, #0]
 801478e:	687a      	ldr	r2, [r7, #4]
 8014790:	0010      	movs	r0, r2
 8014792:	4798      	blx	r3
 8014794:	0003      	movs	r3, r0
 8014796:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	88db      	ldrh	r3, [r3, #6]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d116      	bne.n	80147ce <USBD_StdItfReq+0x92>
 80147a0:	197b      	adds	r3, r7, r5
 80147a2:	781b      	ldrb	r3, [r3, #0]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d112      	bne.n	80147ce <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	0018      	movs	r0, r3
 80147ac:	f000 fe4f 	bl	801544e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80147b0:	e00d      	b.n	80147ce <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80147b2:	683a      	ldr	r2, [r7, #0]
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	0011      	movs	r1, r2
 80147b8:	0018      	movs	r0, r3
 80147ba:	f000 fd60 	bl	801527e <USBD_CtlError>
          break;
 80147be:	e006      	b.n	80147ce <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80147c0:	683a      	ldr	r2, [r7, #0]
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	0011      	movs	r1, r2
 80147c6:	0018      	movs	r0, r3
 80147c8:	f000 fd59 	bl	801527e <USBD_CtlError>
          break;
 80147cc:	e000      	b.n	80147d0 <USBD_StdItfReq+0x94>
          break;
 80147ce:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80147d0:	e006      	b.n	80147e0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80147d2:	683a      	ldr	r2, [r7, #0]
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	0011      	movs	r1, r2
 80147d8:	0018      	movs	r0, r3
 80147da:	f000 fd50 	bl	801527e <USBD_CtlError>
      break;
 80147de:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80147e0:	2300      	movs	r3, #0
}
 80147e2:	0018      	movs	r0, r3
 80147e4:	46bd      	mov	sp, r7
 80147e6:	b004      	add	sp, #16
 80147e8:	bdb0      	pop	{r4, r5, r7, pc}

080147ea <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80147ea:	b5b0      	push	{r4, r5, r7, lr}
 80147ec:	b084      	sub	sp, #16
 80147ee:	af00      	add	r7, sp, #0
 80147f0:	6078      	str	r0, [r7, #4]
 80147f2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80147f4:	230f      	movs	r3, #15
 80147f6:	18fb      	adds	r3, r7, r3
 80147f8:	2200      	movs	r2, #0
 80147fa:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80147fc:	683b      	ldr	r3, [r7, #0]
 80147fe:	889a      	ldrh	r2, [r3, #4]
 8014800:	230e      	movs	r3, #14
 8014802:	18fb      	adds	r3, r7, r3
 8014804:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014806:	683b      	ldr	r3, [r7, #0]
 8014808:	781b      	ldrb	r3, [r3, #0]
 801480a:	001a      	movs	r2, r3
 801480c:	2360      	movs	r3, #96	@ 0x60
 801480e:	4013      	ands	r3, r2
 8014810:	2b40      	cmp	r3, #64	@ 0x40
 8014812:	d006      	beq.n	8014822 <USBD_StdEPReq+0x38>
 8014814:	d900      	bls.n	8014818 <USBD_StdEPReq+0x2e>
 8014816:	e190      	b.n	8014b3a <USBD_StdEPReq+0x350>
 8014818:	2b00      	cmp	r3, #0
 801481a:	d00c      	beq.n	8014836 <USBD_StdEPReq+0x4c>
 801481c:	2b20      	cmp	r3, #32
 801481e:	d000      	beq.n	8014822 <USBD_StdEPReq+0x38>
 8014820:	e18b      	b.n	8014b3a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014822:	687a      	ldr	r2, [r7, #4]
 8014824:	23ad      	movs	r3, #173	@ 0xad
 8014826:	009b      	lsls	r3, r3, #2
 8014828:	58d3      	ldr	r3, [r2, r3]
 801482a:	689b      	ldr	r3, [r3, #8]
 801482c:	6839      	ldr	r1, [r7, #0]
 801482e:	687a      	ldr	r2, [r7, #4]
 8014830:	0010      	movs	r0, r2
 8014832:	4798      	blx	r3
      break;
 8014834:	e188      	b.n	8014b48 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	781b      	ldrb	r3, [r3, #0]
 801483a:	001a      	movs	r2, r3
 801483c:	2360      	movs	r3, #96	@ 0x60
 801483e:	4013      	ands	r3, r2
 8014840:	2b20      	cmp	r3, #32
 8014842:	d10f      	bne.n	8014864 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014844:	687a      	ldr	r2, [r7, #4]
 8014846:	23ad      	movs	r3, #173	@ 0xad
 8014848:	009b      	lsls	r3, r3, #2
 801484a:	58d3      	ldr	r3, [r2, r3]
 801484c:	689b      	ldr	r3, [r3, #8]
 801484e:	250f      	movs	r5, #15
 8014850:	197c      	adds	r4, r7, r5
 8014852:	6839      	ldr	r1, [r7, #0]
 8014854:	687a      	ldr	r2, [r7, #4]
 8014856:	0010      	movs	r0, r2
 8014858:	4798      	blx	r3
 801485a:	0003      	movs	r3, r0
 801485c:	7023      	strb	r3, [r4, #0]

        return ret;
 801485e:	197b      	adds	r3, r7, r5
 8014860:	781b      	ldrb	r3, [r3, #0]
 8014862:	e174      	b.n	8014b4e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	785b      	ldrb	r3, [r3, #1]
 8014868:	2b03      	cmp	r3, #3
 801486a:	d007      	beq.n	801487c <USBD_StdEPReq+0x92>
 801486c:	dd00      	ble.n	8014870 <USBD_StdEPReq+0x86>
 801486e:	e15c      	b.n	8014b2a <USBD_StdEPReq+0x340>
 8014870:	2b00      	cmp	r3, #0
 8014872:	d100      	bne.n	8014876 <USBD_StdEPReq+0x8c>
 8014874:	e092      	b.n	801499c <USBD_StdEPReq+0x1b2>
 8014876:	2b01      	cmp	r3, #1
 8014878:	d04b      	beq.n	8014912 <USBD_StdEPReq+0x128>
 801487a:	e156      	b.n	8014b2a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801487c:	687a      	ldr	r2, [r7, #4]
 801487e:	23a7      	movs	r3, #167	@ 0xa7
 8014880:	009b      	lsls	r3, r3, #2
 8014882:	5cd3      	ldrb	r3, [r2, r3]
 8014884:	2b02      	cmp	r3, #2
 8014886:	d002      	beq.n	801488e <USBD_StdEPReq+0xa4>
 8014888:	2b03      	cmp	r3, #3
 801488a:	d01d      	beq.n	80148c8 <USBD_StdEPReq+0xde>
 801488c:	e039      	b.n	8014902 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801488e:	220e      	movs	r2, #14
 8014890:	18bb      	adds	r3, r7, r2
 8014892:	781b      	ldrb	r3, [r3, #0]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d010      	beq.n	80148ba <USBD_StdEPReq+0xd0>
 8014898:	18bb      	adds	r3, r7, r2
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	2b80      	cmp	r3, #128	@ 0x80
 801489e:	d00c      	beq.n	80148ba <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80148a0:	18bb      	adds	r3, r7, r2
 80148a2:	781a      	ldrb	r2, [r3, #0]
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	0011      	movs	r1, r2
 80148a8:	0018      	movs	r0, r3
 80148aa:	f001 f978 	bl	8015b9e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	2180      	movs	r1, #128	@ 0x80
 80148b2:	0018      	movs	r0, r3
 80148b4:	f001 f973 	bl	8015b9e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80148b8:	e02a      	b.n	8014910 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80148ba:	683a      	ldr	r2, [r7, #0]
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	0011      	movs	r1, r2
 80148c0:	0018      	movs	r0, r3
 80148c2:	f000 fcdc 	bl	801527e <USBD_CtlError>
              break;
 80148c6:	e023      	b.n	8014910 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80148c8:	683b      	ldr	r3, [r7, #0]
 80148ca:	885b      	ldrh	r3, [r3, #2]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d113      	bne.n	80148f8 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80148d0:	220e      	movs	r2, #14
 80148d2:	18bb      	adds	r3, r7, r2
 80148d4:	781b      	ldrb	r3, [r3, #0]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d00e      	beq.n	80148f8 <USBD_StdEPReq+0x10e>
 80148da:	18bb      	adds	r3, r7, r2
 80148dc:	781b      	ldrb	r3, [r3, #0]
 80148de:	2b80      	cmp	r3, #128	@ 0x80
 80148e0:	d00a      	beq.n	80148f8 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80148e2:	683b      	ldr	r3, [r7, #0]
 80148e4:	88db      	ldrh	r3, [r3, #6]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d106      	bne.n	80148f8 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80148ea:	18bb      	adds	r3, r7, r2
 80148ec:	781a      	ldrb	r2, [r3, #0]
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	0011      	movs	r1, r2
 80148f2:	0018      	movs	r0, r3
 80148f4:	f001 f953 	bl	8015b9e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	0018      	movs	r0, r3
 80148fc:	f000 fda7 	bl	801544e <USBD_CtlSendStatus>

              break;
 8014900:	e006      	b.n	8014910 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8014902:	683a      	ldr	r2, [r7, #0]
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	0011      	movs	r1, r2
 8014908:	0018      	movs	r0, r3
 801490a:	f000 fcb8 	bl	801527e <USBD_CtlError>
              break;
 801490e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8014910:	e112      	b.n	8014b38 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014912:	687a      	ldr	r2, [r7, #4]
 8014914:	23a7      	movs	r3, #167	@ 0xa7
 8014916:	009b      	lsls	r3, r3, #2
 8014918:	5cd3      	ldrb	r3, [r2, r3]
 801491a:	2b02      	cmp	r3, #2
 801491c:	d002      	beq.n	8014924 <USBD_StdEPReq+0x13a>
 801491e:	2b03      	cmp	r3, #3
 8014920:	d01d      	beq.n	801495e <USBD_StdEPReq+0x174>
 8014922:	e032      	b.n	801498a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014924:	220e      	movs	r2, #14
 8014926:	18bb      	adds	r3, r7, r2
 8014928:	781b      	ldrb	r3, [r3, #0]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d010      	beq.n	8014950 <USBD_StdEPReq+0x166>
 801492e:	18bb      	adds	r3, r7, r2
 8014930:	781b      	ldrb	r3, [r3, #0]
 8014932:	2b80      	cmp	r3, #128	@ 0x80
 8014934:	d00c      	beq.n	8014950 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8014936:	18bb      	adds	r3, r7, r2
 8014938:	781a      	ldrb	r2, [r3, #0]
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	0011      	movs	r1, r2
 801493e:	0018      	movs	r0, r3
 8014940:	f001 f92d 	bl	8015b9e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	2180      	movs	r1, #128	@ 0x80
 8014948:	0018      	movs	r0, r3
 801494a:	f001 f928 	bl	8015b9e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801494e:	e024      	b.n	801499a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8014950:	683a      	ldr	r2, [r7, #0]
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	0011      	movs	r1, r2
 8014956:	0018      	movs	r0, r3
 8014958:	f000 fc91 	bl	801527e <USBD_CtlError>
              break;
 801495c:	e01d      	b.n	801499a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801495e:	683b      	ldr	r3, [r7, #0]
 8014960:	885b      	ldrh	r3, [r3, #2]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d118      	bne.n	8014998 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014966:	210e      	movs	r1, #14
 8014968:	187b      	adds	r3, r7, r1
 801496a:	781b      	ldrb	r3, [r3, #0]
 801496c:	227f      	movs	r2, #127	@ 0x7f
 801496e:	4013      	ands	r3, r2
 8014970:	d006      	beq.n	8014980 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8014972:	187b      	adds	r3, r7, r1
 8014974:	781a      	ldrb	r2, [r3, #0]
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	0011      	movs	r1, r2
 801497a:	0018      	movs	r0, r3
 801497c:	f001 f93a 	bl	8015bf4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	0018      	movs	r0, r3
 8014984:	f000 fd63 	bl	801544e <USBD_CtlSendStatus>
              }
              break;
 8014988:	e006      	b.n	8014998 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801498a:	683a      	ldr	r2, [r7, #0]
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	0011      	movs	r1, r2
 8014990:	0018      	movs	r0, r3
 8014992:	f000 fc74 	bl	801527e <USBD_CtlError>
              break;
 8014996:	e000      	b.n	801499a <USBD_StdEPReq+0x1b0>
              break;
 8014998:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801499a:	e0cd      	b.n	8014b38 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801499c:	687a      	ldr	r2, [r7, #4]
 801499e:	23a7      	movs	r3, #167	@ 0xa7
 80149a0:	009b      	lsls	r3, r3, #2
 80149a2:	5cd3      	ldrb	r3, [r2, r3]
 80149a4:	2b02      	cmp	r3, #2
 80149a6:	d002      	beq.n	80149ae <USBD_StdEPReq+0x1c4>
 80149a8:	2b03      	cmp	r3, #3
 80149aa:	d03c      	beq.n	8014a26 <USBD_StdEPReq+0x23c>
 80149ac:	e0b5      	b.n	8014b1a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80149ae:	220e      	movs	r2, #14
 80149b0:	18bb      	adds	r3, r7, r2
 80149b2:	781b      	ldrb	r3, [r3, #0]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d00a      	beq.n	80149ce <USBD_StdEPReq+0x1e4>
 80149b8:	18bb      	adds	r3, r7, r2
 80149ba:	781b      	ldrb	r3, [r3, #0]
 80149bc:	2b80      	cmp	r3, #128	@ 0x80
 80149be:	d006      	beq.n	80149ce <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80149c0:	683a      	ldr	r2, [r7, #0]
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	0011      	movs	r1, r2
 80149c6:	0018      	movs	r0, r3
 80149c8:	f000 fc59 	bl	801527e <USBD_CtlError>
                break;
 80149cc:	e0ac      	b.n	8014b28 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80149ce:	220e      	movs	r2, #14
 80149d0:	18bb      	adds	r3, r7, r2
 80149d2:	781b      	ldrb	r3, [r3, #0]
 80149d4:	b25b      	sxtb	r3, r3
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	da0c      	bge.n	80149f4 <USBD_StdEPReq+0x20a>
 80149da:	18bb      	adds	r3, r7, r2
 80149dc:	781b      	ldrb	r3, [r3, #0]
 80149de:	227f      	movs	r2, #127	@ 0x7f
 80149e0:	401a      	ands	r2, r3
 80149e2:	0013      	movs	r3, r2
 80149e4:	009b      	lsls	r3, r3, #2
 80149e6:	189b      	adds	r3, r3, r2
 80149e8:	009b      	lsls	r3, r3, #2
 80149ea:	3310      	adds	r3, #16
 80149ec:	687a      	ldr	r2, [r7, #4]
 80149ee:	18d3      	adds	r3, r2, r3
 80149f0:	3304      	adds	r3, #4
 80149f2:	e00d      	b.n	8014a10 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80149f4:	230e      	movs	r3, #14
 80149f6:	18fb      	adds	r3, r7, r3
 80149f8:	781b      	ldrb	r3, [r3, #0]
 80149fa:	227f      	movs	r2, #127	@ 0x7f
 80149fc:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80149fe:	0013      	movs	r3, r2
 8014a00:	009b      	lsls	r3, r3, #2
 8014a02:	189b      	adds	r3, r3, r2
 8014a04:	009b      	lsls	r3, r3, #2
 8014a06:	3351      	adds	r3, #81	@ 0x51
 8014a08:	33ff      	adds	r3, #255	@ 0xff
 8014a0a:	687a      	ldr	r2, [r7, #4]
 8014a0c:	18d3      	adds	r3, r2, r3
 8014a0e:	3304      	adds	r3, #4
 8014a10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014a12:	68bb      	ldr	r3, [r7, #8]
 8014a14:	2200      	movs	r2, #0
 8014a16:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014a18:	68b9      	ldr	r1, [r7, #8]
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	2202      	movs	r2, #2
 8014a1e:	0018      	movs	r0, r3
 8014a20:	f000 fcab 	bl	801537a <USBD_CtlSendData>
              break;
 8014a24:	e080      	b.n	8014b28 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014a26:	220e      	movs	r2, #14
 8014a28:	18bb      	adds	r3, r7, r2
 8014a2a:	781b      	ldrb	r3, [r3, #0]
 8014a2c:	b25b      	sxtb	r3, r3
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	da14      	bge.n	8014a5c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014a32:	18bb      	adds	r3, r7, r2
 8014a34:	781b      	ldrb	r3, [r3, #0]
 8014a36:	220f      	movs	r2, #15
 8014a38:	401a      	ands	r2, r3
 8014a3a:	6879      	ldr	r1, [r7, #4]
 8014a3c:	0013      	movs	r3, r2
 8014a3e:	009b      	lsls	r3, r3, #2
 8014a40:	189b      	adds	r3, r3, r2
 8014a42:	009b      	lsls	r3, r3, #2
 8014a44:	18cb      	adds	r3, r1, r3
 8014a46:	3318      	adds	r3, #24
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d11e      	bne.n	8014a8c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8014a4e:	683a      	ldr	r2, [r7, #0]
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	0011      	movs	r1, r2
 8014a54:	0018      	movs	r0, r3
 8014a56:	f000 fc12 	bl	801527e <USBD_CtlError>
                  break;
 8014a5a:	e065      	b.n	8014b28 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014a5c:	230e      	movs	r3, #14
 8014a5e:	18fb      	adds	r3, r7, r3
 8014a60:	781b      	ldrb	r3, [r3, #0]
 8014a62:	220f      	movs	r2, #15
 8014a64:	401a      	ands	r2, r3
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	23ac      	movs	r3, #172	@ 0xac
 8014a6a:	0059      	lsls	r1, r3, #1
 8014a6c:	0013      	movs	r3, r2
 8014a6e:	009b      	lsls	r3, r3, #2
 8014a70:	189b      	adds	r3, r3, r2
 8014a72:	009b      	lsls	r3, r3, #2
 8014a74:	18c3      	adds	r3, r0, r3
 8014a76:	185b      	adds	r3, r3, r1
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d106      	bne.n	8014a8c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8014a7e:	683a      	ldr	r2, [r7, #0]
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	0011      	movs	r1, r2
 8014a84:	0018      	movs	r0, r3
 8014a86:	f000 fbfa 	bl	801527e <USBD_CtlError>
                  break;
 8014a8a:	e04d      	b.n	8014b28 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014a8c:	220e      	movs	r2, #14
 8014a8e:	18bb      	adds	r3, r7, r2
 8014a90:	781b      	ldrb	r3, [r3, #0]
 8014a92:	b25b      	sxtb	r3, r3
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	da0c      	bge.n	8014ab2 <USBD_StdEPReq+0x2c8>
 8014a98:	18bb      	adds	r3, r7, r2
 8014a9a:	781b      	ldrb	r3, [r3, #0]
 8014a9c:	227f      	movs	r2, #127	@ 0x7f
 8014a9e:	401a      	ands	r2, r3
 8014aa0:	0013      	movs	r3, r2
 8014aa2:	009b      	lsls	r3, r3, #2
 8014aa4:	189b      	adds	r3, r3, r2
 8014aa6:	009b      	lsls	r3, r3, #2
 8014aa8:	3310      	adds	r3, #16
 8014aaa:	687a      	ldr	r2, [r7, #4]
 8014aac:	18d3      	adds	r3, r2, r3
 8014aae:	3304      	adds	r3, #4
 8014ab0:	e00d      	b.n	8014ace <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014ab2:	230e      	movs	r3, #14
 8014ab4:	18fb      	adds	r3, r7, r3
 8014ab6:	781b      	ldrb	r3, [r3, #0]
 8014ab8:	227f      	movs	r2, #127	@ 0x7f
 8014aba:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014abc:	0013      	movs	r3, r2
 8014abe:	009b      	lsls	r3, r3, #2
 8014ac0:	189b      	adds	r3, r3, r2
 8014ac2:	009b      	lsls	r3, r3, #2
 8014ac4:	3351      	adds	r3, #81	@ 0x51
 8014ac6:	33ff      	adds	r3, #255	@ 0xff
 8014ac8:	687a      	ldr	r2, [r7, #4]
 8014aca:	18d3      	adds	r3, r2, r3
 8014acc:	3304      	adds	r3, #4
 8014ace:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014ad0:	220e      	movs	r2, #14
 8014ad2:	18bb      	adds	r3, r7, r2
 8014ad4:	781b      	ldrb	r3, [r3, #0]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d003      	beq.n	8014ae2 <USBD_StdEPReq+0x2f8>
 8014ada:	18bb      	adds	r3, r7, r2
 8014adc:	781b      	ldrb	r3, [r3, #0]
 8014ade:	2b80      	cmp	r3, #128	@ 0x80
 8014ae0:	d103      	bne.n	8014aea <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8014ae2:	68bb      	ldr	r3, [r7, #8]
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	601a      	str	r2, [r3, #0]
 8014ae8:	e010      	b.n	8014b0c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8014aea:	230e      	movs	r3, #14
 8014aec:	18fb      	adds	r3, r7, r3
 8014aee:	781a      	ldrb	r2, [r3, #0]
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	0011      	movs	r1, r2
 8014af4:	0018      	movs	r0, r3
 8014af6:	f001 f8a8 	bl	8015c4a <USBD_LL_IsStallEP>
 8014afa:	1e03      	subs	r3, r0, #0
 8014afc:	d003      	beq.n	8014b06 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	2201      	movs	r2, #1
 8014b02:	601a      	str	r2, [r3, #0]
 8014b04:	e002      	b.n	8014b0c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8014b06:	68bb      	ldr	r3, [r7, #8]
 8014b08:	2200      	movs	r2, #0
 8014b0a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014b0c:	68b9      	ldr	r1, [r7, #8]
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	2202      	movs	r2, #2
 8014b12:	0018      	movs	r0, r3
 8014b14:	f000 fc31 	bl	801537a <USBD_CtlSendData>
              break;
 8014b18:	e006      	b.n	8014b28 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8014b1a:	683a      	ldr	r2, [r7, #0]
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	0011      	movs	r1, r2
 8014b20:	0018      	movs	r0, r3
 8014b22:	f000 fbac 	bl	801527e <USBD_CtlError>
              break;
 8014b26:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8014b28:	e006      	b.n	8014b38 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8014b2a:	683a      	ldr	r2, [r7, #0]
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	0011      	movs	r1, r2
 8014b30:	0018      	movs	r0, r3
 8014b32:	f000 fba4 	bl	801527e <USBD_CtlError>
          break;
 8014b36:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014b38:	e006      	b.n	8014b48 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8014b3a:	683a      	ldr	r2, [r7, #0]
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	0011      	movs	r1, r2
 8014b40:	0018      	movs	r0, r3
 8014b42:	f000 fb9c 	bl	801527e <USBD_CtlError>
      break;
 8014b46:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8014b48:	230f      	movs	r3, #15
 8014b4a:	18fb      	adds	r3, r7, r3
 8014b4c:	781b      	ldrb	r3, [r3, #0]
}
 8014b4e:	0018      	movs	r0, r3
 8014b50:	46bd      	mov	sp, r7
 8014b52:	b004      	add	sp, #16
 8014b54:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014b58 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b084      	sub	sp, #16
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
 8014b60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014b62:	2308      	movs	r3, #8
 8014b64:	18fb      	adds	r3, r7, r3
 8014b66:	2200      	movs	r2, #0
 8014b68:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014b6e:	230b      	movs	r3, #11
 8014b70:	18fb      	adds	r3, r7, r3
 8014b72:	2200      	movs	r2, #0
 8014b74:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8014b76:	683b      	ldr	r3, [r7, #0]
 8014b78:	885b      	ldrh	r3, [r3, #2]
 8014b7a:	0a1b      	lsrs	r3, r3, #8
 8014b7c:	b29b      	uxth	r3, r3
 8014b7e:	2b07      	cmp	r3, #7
 8014b80:	d900      	bls.n	8014b84 <USBD_GetDescriptor+0x2c>
 8014b82:	e159      	b.n	8014e38 <USBD_GetDescriptor+0x2e0>
 8014b84:	009a      	lsls	r2, r3, #2
 8014b86:	4bcb      	ldr	r3, [pc, #812]	@ (8014eb4 <USBD_GetDescriptor+0x35c>)
 8014b88:	18d3      	adds	r3, r2, r3
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014b8e:	687a      	ldr	r2, [r7, #4]
 8014b90:	23ac      	movs	r3, #172	@ 0xac
 8014b92:	009b      	lsls	r3, r3, #2
 8014b94:	58d3      	ldr	r3, [r2, r3]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	687a      	ldr	r2, [r7, #4]
 8014b9a:	7c12      	ldrb	r2, [r2, #16]
 8014b9c:	2108      	movs	r1, #8
 8014b9e:	1879      	adds	r1, r7, r1
 8014ba0:	0010      	movs	r0, r2
 8014ba2:	4798      	blx	r3
 8014ba4:	0003      	movs	r3, r0
 8014ba6:	60fb      	str	r3, [r7, #12]
      break;
 8014ba8:	e153      	b.n	8014e52 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	7c1b      	ldrb	r3, [r3, #16]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d10f      	bne.n	8014bd2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014bb2:	687a      	ldr	r2, [r7, #4]
 8014bb4:	23ad      	movs	r3, #173	@ 0xad
 8014bb6:	009b      	lsls	r3, r3, #2
 8014bb8:	58d3      	ldr	r3, [r2, r3]
 8014bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bbc:	2208      	movs	r2, #8
 8014bbe:	18ba      	adds	r2, r7, r2
 8014bc0:	0010      	movs	r0, r2
 8014bc2:	4798      	blx	r3
 8014bc4:	0003      	movs	r3, r0
 8014bc6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	3301      	adds	r3, #1
 8014bcc:	2202      	movs	r2, #2
 8014bce:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014bd0:	e13f      	b.n	8014e52 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014bd2:	687a      	ldr	r2, [r7, #4]
 8014bd4:	23ad      	movs	r3, #173	@ 0xad
 8014bd6:	009b      	lsls	r3, r3, #2
 8014bd8:	58d3      	ldr	r3, [r2, r3]
 8014bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014bdc:	2208      	movs	r2, #8
 8014bde:	18ba      	adds	r2, r7, r2
 8014be0:	0010      	movs	r0, r2
 8014be2:	4798      	blx	r3
 8014be4:	0003      	movs	r3, r0
 8014be6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	3301      	adds	r3, #1
 8014bec:	2202      	movs	r2, #2
 8014bee:	701a      	strb	r2, [r3, #0]
      break;
 8014bf0:	e12f      	b.n	8014e52 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	885b      	ldrh	r3, [r3, #2]
 8014bf6:	b2db      	uxtb	r3, r3
 8014bf8:	2b05      	cmp	r3, #5
 8014bfa:	d900      	bls.n	8014bfe <USBD_GetDescriptor+0xa6>
 8014bfc:	e0d0      	b.n	8014da0 <USBD_GetDescriptor+0x248>
 8014bfe:	009a      	lsls	r2, r3, #2
 8014c00:	4bad      	ldr	r3, [pc, #692]	@ (8014eb8 <USBD_GetDescriptor+0x360>)
 8014c02:	18d3      	adds	r3, r2, r3
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014c08:	687a      	ldr	r2, [r7, #4]
 8014c0a:	23ac      	movs	r3, #172	@ 0xac
 8014c0c:	009b      	lsls	r3, r3, #2
 8014c0e:	58d3      	ldr	r3, [r2, r3]
 8014c10:	685b      	ldr	r3, [r3, #4]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d00d      	beq.n	8014c32 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014c16:	687a      	ldr	r2, [r7, #4]
 8014c18:	23ac      	movs	r3, #172	@ 0xac
 8014c1a:	009b      	lsls	r3, r3, #2
 8014c1c:	58d3      	ldr	r3, [r2, r3]
 8014c1e:	685b      	ldr	r3, [r3, #4]
 8014c20:	687a      	ldr	r2, [r7, #4]
 8014c22:	7c12      	ldrb	r2, [r2, #16]
 8014c24:	2108      	movs	r1, #8
 8014c26:	1879      	adds	r1, r7, r1
 8014c28:	0010      	movs	r0, r2
 8014c2a:	4798      	blx	r3
 8014c2c:	0003      	movs	r3, r0
 8014c2e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c30:	e0c3      	b.n	8014dba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014c32:	683a      	ldr	r2, [r7, #0]
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	0011      	movs	r1, r2
 8014c38:	0018      	movs	r0, r3
 8014c3a:	f000 fb20 	bl	801527e <USBD_CtlError>
            err++;
 8014c3e:	210b      	movs	r1, #11
 8014c40:	187b      	adds	r3, r7, r1
 8014c42:	781a      	ldrb	r2, [r3, #0]
 8014c44:	187b      	adds	r3, r7, r1
 8014c46:	3201      	adds	r2, #1
 8014c48:	701a      	strb	r2, [r3, #0]
          break;
 8014c4a:	e0b6      	b.n	8014dba <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014c4c:	687a      	ldr	r2, [r7, #4]
 8014c4e:	23ac      	movs	r3, #172	@ 0xac
 8014c50:	009b      	lsls	r3, r3, #2
 8014c52:	58d3      	ldr	r3, [r2, r3]
 8014c54:	689b      	ldr	r3, [r3, #8]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d00d      	beq.n	8014c76 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014c5a:	687a      	ldr	r2, [r7, #4]
 8014c5c:	23ac      	movs	r3, #172	@ 0xac
 8014c5e:	009b      	lsls	r3, r3, #2
 8014c60:	58d3      	ldr	r3, [r2, r3]
 8014c62:	689b      	ldr	r3, [r3, #8]
 8014c64:	687a      	ldr	r2, [r7, #4]
 8014c66:	7c12      	ldrb	r2, [r2, #16]
 8014c68:	2108      	movs	r1, #8
 8014c6a:	1879      	adds	r1, r7, r1
 8014c6c:	0010      	movs	r0, r2
 8014c6e:	4798      	blx	r3
 8014c70:	0003      	movs	r3, r0
 8014c72:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c74:	e0a1      	b.n	8014dba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014c76:	683a      	ldr	r2, [r7, #0]
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	0011      	movs	r1, r2
 8014c7c:	0018      	movs	r0, r3
 8014c7e:	f000 fafe 	bl	801527e <USBD_CtlError>
            err++;
 8014c82:	210b      	movs	r1, #11
 8014c84:	187b      	adds	r3, r7, r1
 8014c86:	781a      	ldrb	r2, [r3, #0]
 8014c88:	187b      	adds	r3, r7, r1
 8014c8a:	3201      	adds	r2, #1
 8014c8c:	701a      	strb	r2, [r3, #0]
          break;
 8014c8e:	e094      	b.n	8014dba <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014c90:	687a      	ldr	r2, [r7, #4]
 8014c92:	23ac      	movs	r3, #172	@ 0xac
 8014c94:	009b      	lsls	r3, r3, #2
 8014c96:	58d3      	ldr	r3, [r2, r3]
 8014c98:	68db      	ldr	r3, [r3, #12]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d00d      	beq.n	8014cba <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014c9e:	687a      	ldr	r2, [r7, #4]
 8014ca0:	23ac      	movs	r3, #172	@ 0xac
 8014ca2:	009b      	lsls	r3, r3, #2
 8014ca4:	58d3      	ldr	r3, [r2, r3]
 8014ca6:	68db      	ldr	r3, [r3, #12]
 8014ca8:	687a      	ldr	r2, [r7, #4]
 8014caa:	7c12      	ldrb	r2, [r2, #16]
 8014cac:	2108      	movs	r1, #8
 8014cae:	1879      	adds	r1, r7, r1
 8014cb0:	0010      	movs	r0, r2
 8014cb2:	4798      	blx	r3
 8014cb4:	0003      	movs	r3, r0
 8014cb6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014cb8:	e07f      	b.n	8014dba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014cba:	683a      	ldr	r2, [r7, #0]
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	0011      	movs	r1, r2
 8014cc0:	0018      	movs	r0, r3
 8014cc2:	f000 fadc 	bl	801527e <USBD_CtlError>
            err++;
 8014cc6:	210b      	movs	r1, #11
 8014cc8:	187b      	adds	r3, r7, r1
 8014cca:	781a      	ldrb	r2, [r3, #0]
 8014ccc:	187b      	adds	r3, r7, r1
 8014cce:	3201      	adds	r2, #1
 8014cd0:	701a      	strb	r2, [r3, #0]
          break;
 8014cd2:	e072      	b.n	8014dba <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014cd4:	687a      	ldr	r2, [r7, #4]
 8014cd6:	23ac      	movs	r3, #172	@ 0xac
 8014cd8:	009b      	lsls	r3, r3, #2
 8014cda:	58d3      	ldr	r3, [r2, r3]
 8014cdc:	691b      	ldr	r3, [r3, #16]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d00d      	beq.n	8014cfe <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014ce2:	687a      	ldr	r2, [r7, #4]
 8014ce4:	23ac      	movs	r3, #172	@ 0xac
 8014ce6:	009b      	lsls	r3, r3, #2
 8014ce8:	58d3      	ldr	r3, [r2, r3]
 8014cea:	691b      	ldr	r3, [r3, #16]
 8014cec:	687a      	ldr	r2, [r7, #4]
 8014cee:	7c12      	ldrb	r2, [r2, #16]
 8014cf0:	2108      	movs	r1, #8
 8014cf2:	1879      	adds	r1, r7, r1
 8014cf4:	0010      	movs	r0, r2
 8014cf6:	4798      	blx	r3
 8014cf8:	0003      	movs	r3, r0
 8014cfa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014cfc:	e05d      	b.n	8014dba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014cfe:	683a      	ldr	r2, [r7, #0]
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	0011      	movs	r1, r2
 8014d04:	0018      	movs	r0, r3
 8014d06:	f000 faba 	bl	801527e <USBD_CtlError>
            err++;
 8014d0a:	210b      	movs	r1, #11
 8014d0c:	187b      	adds	r3, r7, r1
 8014d0e:	781a      	ldrb	r2, [r3, #0]
 8014d10:	187b      	adds	r3, r7, r1
 8014d12:	3201      	adds	r2, #1
 8014d14:	701a      	strb	r2, [r3, #0]
          break;
 8014d16:	e050      	b.n	8014dba <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014d18:	687a      	ldr	r2, [r7, #4]
 8014d1a:	23ac      	movs	r3, #172	@ 0xac
 8014d1c:	009b      	lsls	r3, r3, #2
 8014d1e:	58d3      	ldr	r3, [r2, r3]
 8014d20:	695b      	ldr	r3, [r3, #20]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d00d      	beq.n	8014d42 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014d26:	687a      	ldr	r2, [r7, #4]
 8014d28:	23ac      	movs	r3, #172	@ 0xac
 8014d2a:	009b      	lsls	r3, r3, #2
 8014d2c:	58d3      	ldr	r3, [r2, r3]
 8014d2e:	695b      	ldr	r3, [r3, #20]
 8014d30:	687a      	ldr	r2, [r7, #4]
 8014d32:	7c12      	ldrb	r2, [r2, #16]
 8014d34:	2108      	movs	r1, #8
 8014d36:	1879      	adds	r1, r7, r1
 8014d38:	0010      	movs	r0, r2
 8014d3a:	4798      	blx	r3
 8014d3c:	0003      	movs	r3, r0
 8014d3e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014d40:	e03b      	b.n	8014dba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014d42:	683a      	ldr	r2, [r7, #0]
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	0011      	movs	r1, r2
 8014d48:	0018      	movs	r0, r3
 8014d4a:	f000 fa98 	bl	801527e <USBD_CtlError>
            err++;
 8014d4e:	210b      	movs	r1, #11
 8014d50:	187b      	adds	r3, r7, r1
 8014d52:	781a      	ldrb	r2, [r3, #0]
 8014d54:	187b      	adds	r3, r7, r1
 8014d56:	3201      	adds	r2, #1
 8014d58:	701a      	strb	r2, [r3, #0]
          break;
 8014d5a:	e02e      	b.n	8014dba <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014d5c:	687a      	ldr	r2, [r7, #4]
 8014d5e:	23ac      	movs	r3, #172	@ 0xac
 8014d60:	009b      	lsls	r3, r3, #2
 8014d62:	58d3      	ldr	r3, [r2, r3]
 8014d64:	699b      	ldr	r3, [r3, #24]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d00d      	beq.n	8014d86 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014d6a:	687a      	ldr	r2, [r7, #4]
 8014d6c:	23ac      	movs	r3, #172	@ 0xac
 8014d6e:	009b      	lsls	r3, r3, #2
 8014d70:	58d3      	ldr	r3, [r2, r3]
 8014d72:	699b      	ldr	r3, [r3, #24]
 8014d74:	687a      	ldr	r2, [r7, #4]
 8014d76:	7c12      	ldrb	r2, [r2, #16]
 8014d78:	2108      	movs	r1, #8
 8014d7a:	1879      	adds	r1, r7, r1
 8014d7c:	0010      	movs	r0, r2
 8014d7e:	4798      	blx	r3
 8014d80:	0003      	movs	r3, r0
 8014d82:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014d84:	e019      	b.n	8014dba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014d86:	683a      	ldr	r2, [r7, #0]
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	0011      	movs	r1, r2
 8014d8c:	0018      	movs	r0, r3
 8014d8e:	f000 fa76 	bl	801527e <USBD_CtlError>
            err++;
 8014d92:	210b      	movs	r1, #11
 8014d94:	187b      	adds	r3, r7, r1
 8014d96:	781a      	ldrb	r2, [r3, #0]
 8014d98:	187b      	adds	r3, r7, r1
 8014d9a:	3201      	adds	r2, #1
 8014d9c:	701a      	strb	r2, [r3, #0]
          break;
 8014d9e:	e00c      	b.n	8014dba <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8014da0:	683a      	ldr	r2, [r7, #0]
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	0011      	movs	r1, r2
 8014da6:	0018      	movs	r0, r3
 8014da8:	f000 fa69 	bl	801527e <USBD_CtlError>
          err++;
 8014dac:	210b      	movs	r1, #11
 8014dae:	187b      	adds	r3, r7, r1
 8014db0:	781a      	ldrb	r2, [r3, #0]
 8014db2:	187b      	adds	r3, r7, r1
 8014db4:	3201      	adds	r2, #1
 8014db6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8014db8:	e04b      	b.n	8014e52 <USBD_GetDescriptor+0x2fa>
 8014dba:	e04a      	b.n	8014e52 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	7c1b      	ldrb	r3, [r3, #16]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d10b      	bne.n	8014ddc <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014dc4:	687a      	ldr	r2, [r7, #4]
 8014dc6:	23ad      	movs	r3, #173	@ 0xad
 8014dc8:	009b      	lsls	r3, r3, #2
 8014dca:	58d3      	ldr	r3, [r2, r3]
 8014dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014dce:	2208      	movs	r2, #8
 8014dd0:	18ba      	adds	r2, r7, r2
 8014dd2:	0010      	movs	r0, r2
 8014dd4:	4798      	blx	r3
 8014dd6:	0003      	movs	r3, r0
 8014dd8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014dda:	e03a      	b.n	8014e52 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8014ddc:	683a      	ldr	r2, [r7, #0]
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	0011      	movs	r1, r2
 8014de2:	0018      	movs	r0, r3
 8014de4:	f000 fa4b 	bl	801527e <USBD_CtlError>
        err++;
 8014de8:	210b      	movs	r1, #11
 8014dea:	187b      	adds	r3, r7, r1
 8014dec:	781a      	ldrb	r2, [r3, #0]
 8014dee:	187b      	adds	r3, r7, r1
 8014df0:	3201      	adds	r2, #1
 8014df2:	701a      	strb	r2, [r3, #0]
      break;
 8014df4:	e02d      	b.n	8014e52 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	7c1b      	ldrb	r3, [r3, #16]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d10f      	bne.n	8014e1e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014dfe:	687a      	ldr	r2, [r7, #4]
 8014e00:	23ad      	movs	r3, #173	@ 0xad
 8014e02:	009b      	lsls	r3, r3, #2
 8014e04:	58d3      	ldr	r3, [r2, r3]
 8014e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014e08:	2208      	movs	r2, #8
 8014e0a:	18ba      	adds	r2, r7, r2
 8014e0c:	0010      	movs	r0, r2
 8014e0e:	4798      	blx	r3
 8014e10:	0003      	movs	r3, r0
 8014e12:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	3301      	adds	r3, #1
 8014e18:	2207      	movs	r2, #7
 8014e1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014e1c:	e019      	b.n	8014e52 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8014e1e:	683a      	ldr	r2, [r7, #0]
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	0011      	movs	r1, r2
 8014e24:	0018      	movs	r0, r3
 8014e26:	f000 fa2a 	bl	801527e <USBD_CtlError>
        err++;
 8014e2a:	210b      	movs	r1, #11
 8014e2c:	187b      	adds	r3, r7, r1
 8014e2e:	781a      	ldrb	r2, [r3, #0]
 8014e30:	187b      	adds	r3, r7, r1
 8014e32:	3201      	adds	r2, #1
 8014e34:	701a      	strb	r2, [r3, #0]
      break;
 8014e36:	e00c      	b.n	8014e52 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8014e38:	683a      	ldr	r2, [r7, #0]
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	0011      	movs	r1, r2
 8014e3e:	0018      	movs	r0, r3
 8014e40:	f000 fa1d 	bl	801527e <USBD_CtlError>
      err++;
 8014e44:	210b      	movs	r1, #11
 8014e46:	187b      	adds	r3, r7, r1
 8014e48:	781a      	ldrb	r2, [r3, #0]
 8014e4a:	187b      	adds	r3, r7, r1
 8014e4c:	3201      	adds	r2, #1
 8014e4e:	701a      	strb	r2, [r3, #0]
      break;
 8014e50:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8014e52:	230b      	movs	r3, #11
 8014e54:	18fb      	adds	r3, r7, r3
 8014e56:	781b      	ldrb	r3, [r3, #0]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d127      	bne.n	8014eac <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8014e5c:	2108      	movs	r1, #8
 8014e5e:	187b      	adds	r3, r7, r1
 8014e60:	881b      	ldrh	r3, [r3, #0]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d019      	beq.n	8014e9a <USBD_GetDescriptor+0x342>
 8014e66:	683b      	ldr	r3, [r7, #0]
 8014e68:	88db      	ldrh	r3, [r3, #6]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d015      	beq.n	8014e9a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8014e6e:	683b      	ldr	r3, [r7, #0]
 8014e70:	88da      	ldrh	r2, [r3, #6]
 8014e72:	187b      	adds	r3, r7, r1
 8014e74:	881b      	ldrh	r3, [r3, #0]
 8014e76:	1c18      	adds	r0, r3, #0
 8014e78:	1c11      	adds	r1, r2, #0
 8014e7a:	b28a      	uxth	r2, r1
 8014e7c:	b283      	uxth	r3, r0
 8014e7e:	429a      	cmp	r2, r3
 8014e80:	d900      	bls.n	8014e84 <USBD_GetDescriptor+0x32c>
 8014e82:	1c01      	adds	r1, r0, #0
 8014e84:	b28a      	uxth	r2, r1
 8014e86:	2108      	movs	r1, #8
 8014e88:	187b      	adds	r3, r7, r1
 8014e8a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014e8c:	187b      	adds	r3, r7, r1
 8014e8e:	881a      	ldrh	r2, [r3, #0]
 8014e90:	68f9      	ldr	r1, [r7, #12]
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	0018      	movs	r0, r3
 8014e96:	f000 fa70 	bl	801537a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	88db      	ldrh	r3, [r3, #6]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d105      	bne.n	8014eae <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	0018      	movs	r0, r3
 8014ea6:	f000 fad2 	bl	801544e <USBD_CtlSendStatus>
 8014eaa:	e000      	b.n	8014eae <USBD_GetDescriptor+0x356>
    return;
 8014eac:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	b004      	add	sp, #16
 8014eb2:	bd80      	pop	{r7, pc}
 8014eb4:	0801a4a4 	.word	0x0801a4a4
 8014eb8:	0801a4c4 	.word	0x0801a4c4

08014ebc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014ebc:	b590      	push	{r4, r7, lr}
 8014ebe:	b085      	sub	sp, #20
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	6078      	str	r0, [r7, #4]
 8014ec4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014ec6:	683b      	ldr	r3, [r7, #0]
 8014ec8:	889b      	ldrh	r3, [r3, #4]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d13d      	bne.n	8014f4a <USBD_SetAddress+0x8e>
 8014ece:	683b      	ldr	r3, [r7, #0]
 8014ed0:	88db      	ldrh	r3, [r3, #6]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d139      	bne.n	8014f4a <USBD_SetAddress+0x8e>
 8014ed6:	683b      	ldr	r3, [r7, #0]
 8014ed8:	885b      	ldrh	r3, [r3, #2]
 8014eda:	2b7f      	cmp	r3, #127	@ 0x7f
 8014edc:	d835      	bhi.n	8014f4a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	885b      	ldrh	r3, [r3, #2]
 8014ee2:	b2da      	uxtb	r2, r3
 8014ee4:	230f      	movs	r3, #15
 8014ee6:	18fb      	adds	r3, r7, r3
 8014ee8:	217f      	movs	r1, #127	@ 0x7f
 8014eea:	400a      	ands	r2, r1
 8014eec:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014eee:	687a      	ldr	r2, [r7, #4]
 8014ef0:	23a7      	movs	r3, #167	@ 0xa7
 8014ef2:	009b      	lsls	r3, r3, #2
 8014ef4:	5cd3      	ldrb	r3, [r2, r3]
 8014ef6:	2b03      	cmp	r3, #3
 8014ef8:	d106      	bne.n	8014f08 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8014efa:	683a      	ldr	r2, [r7, #0]
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	0011      	movs	r1, r2
 8014f00:	0018      	movs	r0, r3
 8014f02:	f000 f9bc 	bl	801527e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f06:	e027      	b.n	8014f58 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	240f      	movs	r4, #15
 8014f0c:	193a      	adds	r2, r7, r4
 8014f0e:	4914      	ldr	r1, [pc, #80]	@ (8014f60 <USBD_SetAddress+0xa4>)
 8014f10:	7812      	ldrb	r2, [r2, #0]
 8014f12:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014f14:	193b      	adds	r3, r7, r4
 8014f16:	781a      	ldrb	r2, [r3, #0]
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	0011      	movs	r1, r2
 8014f1c:	0018      	movs	r0, r3
 8014f1e:	f000 fec5 	bl	8015cac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	0018      	movs	r0, r3
 8014f26:	f000 fa92 	bl	801544e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014f2a:	193b      	adds	r3, r7, r4
 8014f2c:	781b      	ldrb	r3, [r3, #0]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d005      	beq.n	8014f3e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014f32:	687a      	ldr	r2, [r7, #4]
 8014f34:	23a7      	movs	r3, #167	@ 0xa7
 8014f36:	009b      	lsls	r3, r3, #2
 8014f38:	2102      	movs	r1, #2
 8014f3a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f3c:	e00c      	b.n	8014f58 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014f3e:	687a      	ldr	r2, [r7, #4]
 8014f40:	23a7      	movs	r3, #167	@ 0xa7
 8014f42:	009b      	lsls	r3, r3, #2
 8014f44:	2101      	movs	r1, #1
 8014f46:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f48:	e006      	b.n	8014f58 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014f4a:	683a      	ldr	r2, [r7, #0]
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	0011      	movs	r1, r2
 8014f50:	0018      	movs	r0, r3
 8014f52:	f000 f994 	bl	801527e <USBD_CtlError>
  }
}
 8014f56:	46c0      	nop			@ (mov r8, r8)
 8014f58:	46c0      	nop			@ (mov r8, r8)
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	b005      	add	sp, #20
 8014f5e:	bd90      	pop	{r4, r7, pc}
 8014f60:	0000029e 	.word	0x0000029e

08014f64 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b082      	sub	sp, #8
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
 8014f6c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014f6e:	683b      	ldr	r3, [r7, #0]
 8014f70:	885b      	ldrh	r3, [r3, #2]
 8014f72:	b2da      	uxtb	r2, r3
 8014f74:	4b4c      	ldr	r3, [pc, #304]	@ (80150a8 <USBD_SetConfig+0x144>)
 8014f76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014f78:	4b4b      	ldr	r3, [pc, #300]	@ (80150a8 <USBD_SetConfig+0x144>)
 8014f7a:	781b      	ldrb	r3, [r3, #0]
 8014f7c:	2b01      	cmp	r3, #1
 8014f7e:	d906      	bls.n	8014f8e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8014f80:	683a      	ldr	r2, [r7, #0]
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	0011      	movs	r1, r2
 8014f86:	0018      	movs	r0, r3
 8014f88:	f000 f979 	bl	801527e <USBD_CtlError>
 8014f8c:	e088      	b.n	80150a0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8014f8e:	687a      	ldr	r2, [r7, #4]
 8014f90:	23a7      	movs	r3, #167	@ 0xa7
 8014f92:	009b      	lsls	r3, r3, #2
 8014f94:	5cd3      	ldrb	r3, [r2, r3]
 8014f96:	2b02      	cmp	r3, #2
 8014f98:	d002      	beq.n	8014fa0 <USBD_SetConfig+0x3c>
 8014f9a:	2b03      	cmp	r3, #3
 8014f9c:	d029      	beq.n	8014ff2 <USBD_SetConfig+0x8e>
 8014f9e:	e071      	b.n	8015084 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8014fa0:	4b41      	ldr	r3, [pc, #260]	@ (80150a8 <USBD_SetConfig+0x144>)
 8014fa2:	781b      	ldrb	r3, [r3, #0]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d01f      	beq.n	8014fe8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8014fa8:	4b3f      	ldr	r3, [pc, #252]	@ (80150a8 <USBD_SetConfig+0x144>)
 8014faa:	781b      	ldrb	r3, [r3, #0]
 8014fac:	001a      	movs	r2, r3
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014fb2:	687a      	ldr	r2, [r7, #4]
 8014fb4:	23a7      	movs	r3, #167	@ 0xa7
 8014fb6:	009b      	lsls	r3, r3, #2
 8014fb8:	2103      	movs	r1, #3
 8014fba:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014fbc:	4b3a      	ldr	r3, [pc, #232]	@ (80150a8 <USBD_SetConfig+0x144>)
 8014fbe:	781a      	ldrb	r2, [r3, #0]
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	0011      	movs	r1, r2
 8014fc4:	0018      	movs	r0, r3
 8014fc6:	f7ff f8c5 	bl	8014154 <USBD_SetClassConfig>
 8014fca:	0003      	movs	r3, r0
 8014fcc:	2b02      	cmp	r3, #2
 8014fce:	d106      	bne.n	8014fde <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8014fd0:	683a      	ldr	r2, [r7, #0]
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	0011      	movs	r1, r2
 8014fd6:	0018      	movs	r0, r3
 8014fd8:	f000 f951 	bl	801527e <USBD_CtlError>
            return;
 8014fdc:	e060      	b.n	80150a0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	0018      	movs	r0, r3
 8014fe2:	f000 fa34 	bl	801544e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014fe6:	e05b      	b.n	80150a0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	0018      	movs	r0, r3
 8014fec:	f000 fa2f 	bl	801544e <USBD_CtlSendStatus>
        break;
 8014ff0:	e056      	b.n	80150a0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8014ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80150a8 <USBD_SetConfig+0x144>)
 8014ff4:	781b      	ldrb	r3, [r3, #0]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d115      	bne.n	8015026 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014ffa:	687a      	ldr	r2, [r7, #4]
 8014ffc:	23a7      	movs	r3, #167	@ 0xa7
 8014ffe:	009b      	lsls	r3, r3, #2
 8015000:	2102      	movs	r1, #2
 8015002:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8015004:	4b28      	ldr	r3, [pc, #160]	@ (80150a8 <USBD_SetConfig+0x144>)
 8015006:	781b      	ldrb	r3, [r3, #0]
 8015008:	001a      	movs	r2, r3
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801500e:	4b26      	ldr	r3, [pc, #152]	@ (80150a8 <USBD_SetConfig+0x144>)
 8015010:	781a      	ldrb	r2, [r3, #0]
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	0011      	movs	r1, r2
 8015016:	0018      	movs	r0, r3
 8015018:	f7ff f8c3 	bl	80141a2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	0018      	movs	r0, r3
 8015020:	f000 fa15 	bl	801544e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8015024:	e03c      	b.n	80150a0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8015026:	4b20      	ldr	r3, [pc, #128]	@ (80150a8 <USBD_SetConfig+0x144>)
 8015028:	781b      	ldrb	r3, [r3, #0]
 801502a:	001a      	movs	r2, r3
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	685b      	ldr	r3, [r3, #4]
 8015030:	429a      	cmp	r2, r3
 8015032:	d022      	beq.n	801507a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	685b      	ldr	r3, [r3, #4]
 8015038:	b2da      	uxtb	r2, r3
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	0011      	movs	r1, r2
 801503e:	0018      	movs	r0, r3
 8015040:	f7ff f8af 	bl	80141a2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8015044:	4b18      	ldr	r3, [pc, #96]	@ (80150a8 <USBD_SetConfig+0x144>)
 8015046:	781b      	ldrb	r3, [r3, #0]
 8015048:	001a      	movs	r2, r3
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801504e:	4b16      	ldr	r3, [pc, #88]	@ (80150a8 <USBD_SetConfig+0x144>)
 8015050:	781a      	ldrb	r2, [r3, #0]
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	0011      	movs	r1, r2
 8015056:	0018      	movs	r0, r3
 8015058:	f7ff f87c 	bl	8014154 <USBD_SetClassConfig>
 801505c:	0003      	movs	r3, r0
 801505e:	2b02      	cmp	r3, #2
 8015060:	d106      	bne.n	8015070 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8015062:	683a      	ldr	r2, [r7, #0]
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	0011      	movs	r1, r2
 8015068:	0018      	movs	r0, r3
 801506a:	f000 f908 	bl	801527e <USBD_CtlError>
            return;
 801506e:	e017      	b.n	80150a0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	0018      	movs	r0, r3
 8015074:	f000 f9eb 	bl	801544e <USBD_CtlSendStatus>
        break;
 8015078:	e012      	b.n	80150a0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	0018      	movs	r0, r3
 801507e:	f000 f9e6 	bl	801544e <USBD_CtlSendStatus>
        break;
 8015082:	e00d      	b.n	80150a0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8015084:	683a      	ldr	r2, [r7, #0]
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	0011      	movs	r1, r2
 801508a:	0018      	movs	r0, r3
 801508c:	f000 f8f7 	bl	801527e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8015090:	4b05      	ldr	r3, [pc, #20]	@ (80150a8 <USBD_SetConfig+0x144>)
 8015092:	781a      	ldrb	r2, [r3, #0]
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	0011      	movs	r1, r2
 8015098:	0018      	movs	r0, r3
 801509a:	f7ff f882 	bl	80141a2 <USBD_ClrClassConfig>
        break;
 801509e:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80150a0:	46bd      	mov	sp, r7
 80150a2:	b002      	add	sp, #8
 80150a4:	bd80      	pop	{r7, pc}
 80150a6:	46c0      	nop			@ (mov r8, r8)
 80150a8:	200030c4 	.word	0x200030c4

080150ac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b082      	sub	sp, #8
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
 80150b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80150b6:	683b      	ldr	r3, [r7, #0]
 80150b8:	88db      	ldrh	r3, [r3, #6]
 80150ba:	2b01      	cmp	r3, #1
 80150bc:	d006      	beq.n	80150cc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80150be:	683a      	ldr	r2, [r7, #0]
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	0011      	movs	r1, r2
 80150c4:	0018      	movs	r0, r3
 80150c6:	f000 f8da 	bl	801527e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80150ca:	e026      	b.n	801511a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 80150cc:	687a      	ldr	r2, [r7, #4]
 80150ce:	23a7      	movs	r3, #167	@ 0xa7
 80150d0:	009b      	lsls	r3, r3, #2
 80150d2:	5cd3      	ldrb	r3, [r2, r3]
 80150d4:	2b02      	cmp	r3, #2
 80150d6:	dc02      	bgt.n	80150de <USBD_GetConfig+0x32>
 80150d8:	2b00      	cmp	r3, #0
 80150da:	dc03      	bgt.n	80150e4 <USBD_GetConfig+0x38>
 80150dc:	e016      	b.n	801510c <USBD_GetConfig+0x60>
 80150de:	2b03      	cmp	r3, #3
 80150e0:	d00c      	beq.n	80150fc <USBD_GetConfig+0x50>
 80150e2:	e013      	b.n	801510c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	2200      	movs	r2, #0
 80150e8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	3308      	adds	r3, #8
 80150ee:	0019      	movs	r1, r3
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	2201      	movs	r2, #1
 80150f4:	0018      	movs	r0, r3
 80150f6:	f000 f940 	bl	801537a <USBD_CtlSendData>
        break;
 80150fa:	e00e      	b.n	801511a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	1d19      	adds	r1, r3, #4
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	2201      	movs	r2, #1
 8015104:	0018      	movs	r0, r3
 8015106:	f000 f938 	bl	801537a <USBD_CtlSendData>
        break;
 801510a:	e006      	b.n	801511a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801510c:	683a      	ldr	r2, [r7, #0]
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	0011      	movs	r1, r2
 8015112:	0018      	movs	r0, r3
 8015114:	f000 f8b3 	bl	801527e <USBD_CtlError>
        break;
 8015118:	46c0      	nop			@ (mov r8, r8)
}
 801511a:	46c0      	nop			@ (mov r8, r8)
 801511c:	46bd      	mov	sp, r7
 801511e:	b002      	add	sp, #8
 8015120:	bd80      	pop	{r7, pc}

08015122 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015122:	b580      	push	{r7, lr}
 8015124:	b082      	sub	sp, #8
 8015126:	af00      	add	r7, sp, #0
 8015128:	6078      	str	r0, [r7, #4]
 801512a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801512c:	687a      	ldr	r2, [r7, #4]
 801512e:	23a7      	movs	r3, #167	@ 0xa7
 8015130:	009b      	lsls	r3, r3, #2
 8015132:	5cd3      	ldrb	r3, [r2, r3]
 8015134:	3b01      	subs	r3, #1
 8015136:	2b02      	cmp	r3, #2
 8015138:	d822      	bhi.n	8015180 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801513a:	683b      	ldr	r3, [r7, #0]
 801513c:	88db      	ldrh	r3, [r3, #6]
 801513e:	2b02      	cmp	r3, #2
 8015140:	d006      	beq.n	8015150 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8015142:	683a      	ldr	r2, [r7, #0]
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	0011      	movs	r1, r2
 8015148:	0018      	movs	r0, r3
 801514a:	f000 f898 	bl	801527e <USBD_CtlError>
        break;
 801514e:	e01e      	b.n	801518e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	2201      	movs	r2, #1
 8015154:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8015156:	687a      	ldr	r2, [r7, #4]
 8015158:	23a9      	movs	r3, #169	@ 0xa9
 801515a:	009b      	lsls	r3, r3, #2
 801515c:	58d3      	ldr	r3, [r2, r3]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d005      	beq.n	801516e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	68db      	ldr	r3, [r3, #12]
 8015166:	2202      	movs	r2, #2
 8015168:	431a      	orrs	r2, r3
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	330c      	adds	r3, #12
 8015172:	0019      	movs	r1, r3
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	2202      	movs	r2, #2
 8015178:	0018      	movs	r0, r3
 801517a:	f000 f8fe 	bl	801537a <USBD_CtlSendData>
      break;
 801517e:	e006      	b.n	801518e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8015180:	683a      	ldr	r2, [r7, #0]
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	0011      	movs	r1, r2
 8015186:	0018      	movs	r0, r3
 8015188:	f000 f879 	bl	801527e <USBD_CtlError>
      break;
 801518c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801518e:	46c0      	nop			@ (mov r8, r8)
 8015190:	46bd      	mov	sp, r7
 8015192:	b002      	add	sp, #8
 8015194:	bd80      	pop	{r7, pc}

08015196 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8015196:	b580      	push	{r7, lr}
 8015198:	b082      	sub	sp, #8
 801519a:	af00      	add	r7, sp, #0
 801519c:	6078      	str	r0, [r7, #4]
 801519e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80151a0:	683b      	ldr	r3, [r7, #0]
 80151a2:	885b      	ldrh	r3, [r3, #2]
 80151a4:	2b01      	cmp	r3, #1
 80151a6:	d108      	bne.n	80151ba <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80151a8:	687a      	ldr	r2, [r7, #4]
 80151aa:	23a9      	movs	r3, #169	@ 0xa9
 80151ac:	009b      	lsls	r3, r3, #2
 80151ae:	2101      	movs	r1, #1
 80151b0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	0018      	movs	r0, r3
 80151b6:	f000 f94a 	bl	801544e <USBD_CtlSendStatus>
  }
}
 80151ba:	46c0      	nop			@ (mov r8, r8)
 80151bc:	46bd      	mov	sp, r7
 80151be:	b002      	add	sp, #8
 80151c0:	bd80      	pop	{r7, pc}

080151c2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80151c2:	b580      	push	{r7, lr}
 80151c4:	b082      	sub	sp, #8
 80151c6:	af00      	add	r7, sp, #0
 80151c8:	6078      	str	r0, [r7, #4]
 80151ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80151cc:	687a      	ldr	r2, [r7, #4]
 80151ce:	23a7      	movs	r3, #167	@ 0xa7
 80151d0:	009b      	lsls	r3, r3, #2
 80151d2:	5cd3      	ldrb	r3, [r2, r3]
 80151d4:	3b01      	subs	r3, #1
 80151d6:	2b02      	cmp	r3, #2
 80151d8:	d80d      	bhi.n	80151f6 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80151da:	683b      	ldr	r3, [r7, #0]
 80151dc:	885b      	ldrh	r3, [r3, #2]
 80151de:	2b01      	cmp	r3, #1
 80151e0:	d110      	bne.n	8015204 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 80151e2:	687a      	ldr	r2, [r7, #4]
 80151e4:	23a9      	movs	r3, #169	@ 0xa9
 80151e6:	009b      	lsls	r3, r3, #2
 80151e8:	2100      	movs	r1, #0
 80151ea:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	0018      	movs	r0, r3
 80151f0:	f000 f92d 	bl	801544e <USBD_CtlSendStatus>
      }
      break;
 80151f4:	e006      	b.n	8015204 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 80151f6:	683a      	ldr	r2, [r7, #0]
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	0011      	movs	r1, r2
 80151fc:	0018      	movs	r0, r3
 80151fe:	f000 f83e 	bl	801527e <USBD_CtlError>
      break;
 8015202:	e000      	b.n	8015206 <USBD_ClrFeature+0x44>
      break;
 8015204:	46c0      	nop			@ (mov r8, r8)
  }
}
 8015206:	46c0      	nop			@ (mov r8, r8)
 8015208:	46bd      	mov	sp, r7
 801520a:	b002      	add	sp, #8
 801520c:	bd80      	pop	{r7, pc}

0801520e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801520e:	b580      	push	{r7, lr}
 8015210:	b082      	sub	sp, #8
 8015212:	af00      	add	r7, sp, #0
 8015214:	6078      	str	r0, [r7, #4]
 8015216:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8015218:	683b      	ldr	r3, [r7, #0]
 801521a:	781a      	ldrb	r2, [r3, #0]
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8015220:	683b      	ldr	r3, [r7, #0]
 8015222:	785a      	ldrb	r2, [r3, #1]
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8015228:	683b      	ldr	r3, [r7, #0]
 801522a:	3302      	adds	r3, #2
 801522c:	781b      	ldrb	r3, [r3, #0]
 801522e:	001a      	movs	r2, r3
 8015230:	683b      	ldr	r3, [r7, #0]
 8015232:	3303      	adds	r3, #3
 8015234:	781b      	ldrb	r3, [r3, #0]
 8015236:	021b      	lsls	r3, r3, #8
 8015238:	b29b      	uxth	r3, r3
 801523a:	18d3      	adds	r3, r2, r3
 801523c:	b29a      	uxth	r2, r3
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	3304      	adds	r3, #4
 8015246:	781b      	ldrb	r3, [r3, #0]
 8015248:	001a      	movs	r2, r3
 801524a:	683b      	ldr	r3, [r7, #0]
 801524c:	3305      	adds	r3, #5
 801524e:	781b      	ldrb	r3, [r3, #0]
 8015250:	021b      	lsls	r3, r3, #8
 8015252:	b29b      	uxth	r3, r3
 8015254:	18d3      	adds	r3, r2, r3
 8015256:	b29a      	uxth	r2, r3
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801525c:	683b      	ldr	r3, [r7, #0]
 801525e:	3306      	adds	r3, #6
 8015260:	781b      	ldrb	r3, [r3, #0]
 8015262:	001a      	movs	r2, r3
 8015264:	683b      	ldr	r3, [r7, #0]
 8015266:	3307      	adds	r3, #7
 8015268:	781b      	ldrb	r3, [r3, #0]
 801526a:	021b      	lsls	r3, r3, #8
 801526c:	b29b      	uxth	r3, r3
 801526e:	18d3      	adds	r3, r2, r3
 8015270:	b29a      	uxth	r2, r3
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	80da      	strh	r2, [r3, #6]

}
 8015276:	46c0      	nop			@ (mov r8, r8)
 8015278:	46bd      	mov	sp, r7
 801527a:	b002      	add	sp, #8
 801527c:	bd80      	pop	{r7, pc}

0801527e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801527e:	b580      	push	{r7, lr}
 8015280:	b082      	sub	sp, #8
 8015282:	af00      	add	r7, sp, #0
 8015284:	6078      	str	r0, [r7, #4]
 8015286:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	2180      	movs	r1, #128	@ 0x80
 801528c:	0018      	movs	r0, r3
 801528e:	f000 fc86 	bl	8015b9e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	2100      	movs	r1, #0
 8015296:	0018      	movs	r0, r3
 8015298:	f000 fc81 	bl	8015b9e <USBD_LL_StallEP>
}
 801529c:	46c0      	nop			@ (mov r8, r8)
 801529e:	46bd      	mov	sp, r7
 80152a0:	b002      	add	sp, #8
 80152a2:	bd80      	pop	{r7, pc}

080152a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80152a4:	b590      	push	{r4, r7, lr}
 80152a6:	b087      	sub	sp, #28
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	60f8      	str	r0, [r7, #12]
 80152ac:	60b9      	str	r1, [r7, #8]
 80152ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80152b0:	2417      	movs	r4, #23
 80152b2:	193b      	adds	r3, r7, r4
 80152b4:	2200      	movs	r2, #0
 80152b6:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d03c      	beq.n	8015338 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	0018      	movs	r0, r3
 80152c2:	f000 f83d 	bl	8015340 <USBD_GetLen>
 80152c6:	0003      	movs	r3, r0
 80152c8:	3301      	adds	r3, #1
 80152ca:	b29b      	uxth	r3, r3
 80152cc:	18db      	adds	r3, r3, r3
 80152ce:	b29a      	uxth	r2, r3
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80152d4:	193b      	adds	r3, r7, r4
 80152d6:	781b      	ldrb	r3, [r3, #0]
 80152d8:	193a      	adds	r2, r7, r4
 80152da:	1c59      	adds	r1, r3, #1
 80152dc:	7011      	strb	r1, [r2, #0]
 80152de:	001a      	movs	r2, r3
 80152e0:	68bb      	ldr	r3, [r7, #8]
 80152e2:	189b      	adds	r3, r3, r2
 80152e4:	687a      	ldr	r2, [r7, #4]
 80152e6:	7812      	ldrb	r2, [r2, #0]
 80152e8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80152ea:	193b      	adds	r3, r7, r4
 80152ec:	781b      	ldrb	r3, [r3, #0]
 80152ee:	193a      	adds	r2, r7, r4
 80152f0:	1c59      	adds	r1, r3, #1
 80152f2:	7011      	strb	r1, [r2, #0]
 80152f4:	001a      	movs	r2, r3
 80152f6:	68bb      	ldr	r3, [r7, #8]
 80152f8:	189b      	adds	r3, r3, r2
 80152fa:	2203      	movs	r2, #3
 80152fc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80152fe:	e017      	b.n	8015330 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	1c5a      	adds	r2, r3, #1
 8015304:	60fa      	str	r2, [r7, #12]
 8015306:	2417      	movs	r4, #23
 8015308:	193a      	adds	r2, r7, r4
 801530a:	7812      	ldrb	r2, [r2, #0]
 801530c:	1939      	adds	r1, r7, r4
 801530e:	1c50      	adds	r0, r2, #1
 8015310:	7008      	strb	r0, [r1, #0]
 8015312:	0011      	movs	r1, r2
 8015314:	68ba      	ldr	r2, [r7, #8]
 8015316:	1852      	adds	r2, r2, r1
 8015318:	781b      	ldrb	r3, [r3, #0]
 801531a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801531c:	193b      	adds	r3, r7, r4
 801531e:	781b      	ldrb	r3, [r3, #0]
 8015320:	193a      	adds	r2, r7, r4
 8015322:	1c59      	adds	r1, r3, #1
 8015324:	7011      	strb	r1, [r2, #0]
 8015326:	001a      	movs	r2, r3
 8015328:	68bb      	ldr	r3, [r7, #8]
 801532a:	189b      	adds	r3, r3, r2
 801532c:	2200      	movs	r2, #0
 801532e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	781b      	ldrb	r3, [r3, #0]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d1e3      	bne.n	8015300 <USBD_GetString+0x5c>
    }
  }
}
 8015338:	46c0      	nop			@ (mov r8, r8)
 801533a:	46bd      	mov	sp, r7
 801533c:	b007      	add	sp, #28
 801533e:	bd90      	pop	{r4, r7, pc}

08015340 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b084      	sub	sp, #16
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015348:	230f      	movs	r3, #15
 801534a:	18fb      	adds	r3, r7, r3
 801534c:	2200      	movs	r2, #0
 801534e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8015350:	e008      	b.n	8015364 <USBD_GetLen+0x24>
  {
    len++;
 8015352:	210f      	movs	r1, #15
 8015354:	187b      	adds	r3, r7, r1
 8015356:	781a      	ldrb	r2, [r3, #0]
 8015358:	187b      	adds	r3, r7, r1
 801535a:	3201      	adds	r2, #1
 801535c:	701a      	strb	r2, [r3, #0]
    buf++;
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	3301      	adds	r3, #1
 8015362:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	781b      	ldrb	r3, [r3, #0]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d1f2      	bne.n	8015352 <USBD_GetLen+0x12>
  }

  return len;
 801536c:	230f      	movs	r3, #15
 801536e:	18fb      	adds	r3, r7, r3
 8015370:	781b      	ldrb	r3, [r3, #0]
}
 8015372:	0018      	movs	r0, r3
 8015374:	46bd      	mov	sp, r7
 8015376:	b004      	add	sp, #16
 8015378:	bd80      	pop	{r7, pc}

0801537a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801537a:	b580      	push	{r7, lr}
 801537c:	b084      	sub	sp, #16
 801537e:	af00      	add	r7, sp, #0
 8015380:	60f8      	str	r0, [r7, #12]
 8015382:	60b9      	str	r1, [r7, #8]
 8015384:	1dbb      	adds	r3, r7, #6
 8015386:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015388:	68fa      	ldr	r2, [r7, #12]
 801538a:	23a5      	movs	r3, #165	@ 0xa5
 801538c:	009b      	lsls	r3, r3, #2
 801538e:	2102      	movs	r1, #2
 8015390:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8015392:	1dbb      	adds	r3, r7, #6
 8015394:	881a      	ldrh	r2, [r3, #0]
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801539a:	1dbb      	adds	r3, r7, #6
 801539c:	881a      	ldrh	r2, [r3, #0]
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80153a2:	1dbb      	adds	r3, r7, #6
 80153a4:	881b      	ldrh	r3, [r3, #0]
 80153a6:	68ba      	ldr	r2, [r7, #8]
 80153a8:	68f8      	ldr	r0, [r7, #12]
 80153aa:	2100      	movs	r1, #0
 80153ac:	f000 fca9 	bl	8015d02 <USBD_LL_Transmit>

  return USBD_OK;
 80153b0:	2300      	movs	r3, #0
}
 80153b2:	0018      	movs	r0, r3
 80153b4:	46bd      	mov	sp, r7
 80153b6:	b004      	add	sp, #16
 80153b8:	bd80      	pop	{r7, pc}

080153ba <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80153ba:	b580      	push	{r7, lr}
 80153bc:	b084      	sub	sp, #16
 80153be:	af00      	add	r7, sp, #0
 80153c0:	60f8      	str	r0, [r7, #12]
 80153c2:	60b9      	str	r1, [r7, #8]
 80153c4:	1dbb      	adds	r3, r7, #6
 80153c6:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80153c8:	1dbb      	adds	r3, r7, #6
 80153ca:	881b      	ldrh	r3, [r3, #0]
 80153cc:	68ba      	ldr	r2, [r7, #8]
 80153ce:	68f8      	ldr	r0, [r7, #12]
 80153d0:	2100      	movs	r1, #0
 80153d2:	f000 fc96 	bl	8015d02 <USBD_LL_Transmit>

  return USBD_OK;
 80153d6:	2300      	movs	r3, #0
}
 80153d8:	0018      	movs	r0, r3
 80153da:	46bd      	mov	sp, r7
 80153dc:	b004      	add	sp, #16
 80153de:	bd80      	pop	{r7, pc}

080153e0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b084      	sub	sp, #16
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	60f8      	str	r0, [r7, #12]
 80153e8:	60b9      	str	r1, [r7, #8]
 80153ea:	1dbb      	adds	r3, r7, #6
 80153ec:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80153ee:	68fa      	ldr	r2, [r7, #12]
 80153f0:	23a5      	movs	r3, #165	@ 0xa5
 80153f2:	009b      	lsls	r3, r3, #2
 80153f4:	2103      	movs	r1, #3
 80153f6:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80153f8:	1dbb      	adds	r3, r7, #6
 80153fa:	8819      	ldrh	r1, [r3, #0]
 80153fc:	68fa      	ldr	r2, [r7, #12]
 80153fe:	23ae      	movs	r3, #174	@ 0xae
 8015400:	005b      	lsls	r3, r3, #1
 8015402:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8015404:	1dbb      	adds	r3, r7, #6
 8015406:	8819      	ldrh	r1, [r3, #0]
 8015408:	68fa      	ldr	r2, [r7, #12]
 801540a:	23b0      	movs	r3, #176	@ 0xb0
 801540c:	005b      	lsls	r3, r3, #1
 801540e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015410:	1dbb      	adds	r3, r7, #6
 8015412:	881b      	ldrh	r3, [r3, #0]
 8015414:	68ba      	ldr	r2, [r7, #8]
 8015416:	68f8      	ldr	r0, [r7, #12]
 8015418:	2100      	movs	r1, #0
 801541a:	f000 fca9 	bl	8015d70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801541e:	2300      	movs	r3, #0
}
 8015420:	0018      	movs	r0, r3
 8015422:	46bd      	mov	sp, r7
 8015424:	b004      	add	sp, #16
 8015426:	bd80      	pop	{r7, pc}

08015428 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b084      	sub	sp, #16
 801542c:	af00      	add	r7, sp, #0
 801542e:	60f8      	str	r0, [r7, #12]
 8015430:	60b9      	str	r1, [r7, #8]
 8015432:	1dbb      	adds	r3, r7, #6
 8015434:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015436:	1dbb      	adds	r3, r7, #6
 8015438:	881b      	ldrh	r3, [r3, #0]
 801543a:	68ba      	ldr	r2, [r7, #8]
 801543c:	68f8      	ldr	r0, [r7, #12]
 801543e:	2100      	movs	r1, #0
 8015440:	f000 fc96 	bl	8015d70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015444:	2300      	movs	r3, #0
}
 8015446:	0018      	movs	r0, r3
 8015448:	46bd      	mov	sp, r7
 801544a:	b004      	add	sp, #16
 801544c:	bd80      	pop	{r7, pc}

0801544e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801544e:	b580      	push	{r7, lr}
 8015450:	b082      	sub	sp, #8
 8015452:	af00      	add	r7, sp, #0
 8015454:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015456:	687a      	ldr	r2, [r7, #4]
 8015458:	23a5      	movs	r3, #165	@ 0xa5
 801545a:	009b      	lsls	r3, r3, #2
 801545c:	2104      	movs	r1, #4
 801545e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015460:	6878      	ldr	r0, [r7, #4]
 8015462:	2300      	movs	r3, #0
 8015464:	2200      	movs	r2, #0
 8015466:	2100      	movs	r1, #0
 8015468:	f000 fc4b 	bl	8015d02 <USBD_LL_Transmit>

  return USBD_OK;
 801546c:	2300      	movs	r3, #0
}
 801546e:	0018      	movs	r0, r3
 8015470:	46bd      	mov	sp, r7
 8015472:	b002      	add	sp, #8
 8015474:	bd80      	pop	{r7, pc}

08015476 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015476:	b580      	push	{r7, lr}
 8015478:	b082      	sub	sp, #8
 801547a:	af00      	add	r7, sp, #0
 801547c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801547e:	687a      	ldr	r2, [r7, #4]
 8015480:	23a5      	movs	r3, #165	@ 0xa5
 8015482:	009b      	lsls	r3, r3, #2
 8015484:	2105      	movs	r1, #5
 8015486:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015488:	6878      	ldr	r0, [r7, #4]
 801548a:	2300      	movs	r3, #0
 801548c:	2200      	movs	r2, #0
 801548e:	2100      	movs	r1, #0
 8015490:	f000 fc6e 	bl	8015d70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015494:	2300      	movs	r3, #0
}
 8015496:	0018      	movs	r0, r3
 8015498:	46bd      	mov	sp, r7
 801549a:	b002      	add	sp, #8
 801549c:	bd80      	pop	{r7, pc}
	...

080154a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80154a4:	4914      	ldr	r1, [pc, #80]	@ (80154f8 <MX_USB_DEVICE_Init+0x58>)
 80154a6:	4b15      	ldr	r3, [pc, #84]	@ (80154fc <MX_USB_DEVICE_Init+0x5c>)
 80154a8:	2200      	movs	r2, #0
 80154aa:	0018      	movs	r0, r3
 80154ac:	f7fe fdeb 	bl	8014086 <USBD_Init>
 80154b0:	1e03      	subs	r3, r0, #0
 80154b2:	d001      	beq.n	80154b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80154b4:	f7f0 fb4c 	bl	8005b50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80154b8:	4a11      	ldr	r2, [pc, #68]	@ (8015500 <MX_USB_DEVICE_Init+0x60>)
 80154ba:	4b10      	ldr	r3, [pc, #64]	@ (80154fc <MX_USB_DEVICE_Init+0x5c>)
 80154bc:	0011      	movs	r1, r2
 80154be:	0018      	movs	r0, r3
 80154c0:	f7fe fe12 	bl	80140e8 <USBD_RegisterClass>
 80154c4:	1e03      	subs	r3, r0, #0
 80154c6:	d001      	beq.n	80154cc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80154c8:	f7f0 fb42 	bl	8005b50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80154cc:	4a0d      	ldr	r2, [pc, #52]	@ (8015504 <MX_USB_DEVICE_Init+0x64>)
 80154ce:	4b0b      	ldr	r3, [pc, #44]	@ (80154fc <MX_USB_DEVICE_Init+0x5c>)
 80154d0:	0011      	movs	r1, r2
 80154d2:	0018      	movs	r0, r3
 80154d4:	f7fe fd5e 	bl	8013f94 <USBD_CDC_RegisterInterface>
 80154d8:	1e03      	subs	r3, r0, #0
 80154da:	d001      	beq.n	80154e0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80154dc:	f7f0 fb38 	bl	8005b50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80154e0:	4b06      	ldr	r3, [pc, #24]	@ (80154fc <MX_USB_DEVICE_Init+0x5c>)
 80154e2:	0018      	movs	r0, r3
 80154e4:	f7fe fe20 	bl	8014128 <USBD_Start>
 80154e8:	1e03      	subs	r3, r0, #0
 80154ea:	d001      	beq.n	80154f0 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80154ec:	f7f0 fb30 	bl	8005b50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80154f0:	46c0      	nop			@ (mov r8, r8)
 80154f2:	46bd      	mov	sp, r7
 80154f4:	bd80      	pop	{r7, pc}
 80154f6:	46c0      	nop			@ (mov r8, r8)
 80154f8:	20000278 	.word	0x20000278
 80154fc:	200030c8 	.word	0x200030c8
 8015500:	20000164 	.word	0x20000164
 8015504:	20000268 	.word	0x20000268

08015508 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801550c:	4907      	ldr	r1, [pc, #28]	@ (801552c <CDC_Init_FS+0x24>)
 801550e:	4b08      	ldr	r3, [pc, #32]	@ (8015530 <CDC_Init_FS+0x28>)
 8015510:	2200      	movs	r2, #0
 8015512:	0018      	movs	r0, r3
 8015514:	f7fe fd59 	bl	8013fca <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015518:	4a06      	ldr	r2, [pc, #24]	@ (8015534 <CDC_Init_FS+0x2c>)
 801551a:	4b05      	ldr	r3, [pc, #20]	@ (8015530 <CDC_Init_FS+0x28>)
 801551c:	0011      	movs	r1, r2
 801551e:	0018      	movs	r0, r3
 8015520:	f7fe fd6f 	bl	8014002 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015524:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015526:	0018      	movs	r0, r3
 8015528:	46bd      	mov	sp, r7
 801552a:	bd80      	pop	{r7, pc}
 801552c:	2000378c 	.word	0x2000378c
 8015530:	200030c8 	.word	0x200030c8
 8015534:	2000338c 	.word	0x2000338c

08015538 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801553c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801553e:	0018      	movs	r0, r3
 8015540:	46bd      	mov	sp, r7
 8015542:	bd80      	pop	{r7, pc}

08015544 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015544:	b580      	push	{r7, lr}
 8015546:	b082      	sub	sp, #8
 8015548:	af00      	add	r7, sp, #0
 801554a:	6039      	str	r1, [r7, #0]
 801554c:	0011      	movs	r1, r2
 801554e:	1dfb      	adds	r3, r7, #7
 8015550:	1c02      	adds	r2, r0, #0
 8015552:	701a      	strb	r2, [r3, #0]
 8015554:	1d3b      	adds	r3, r7, #4
 8015556:	1c0a      	adds	r2, r1, #0
 8015558:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801555a:	1dfb      	adds	r3, r7, #7
 801555c:	781b      	ldrb	r3, [r3, #0]
 801555e:	2b23      	cmp	r3, #35	@ 0x23
 8015560:	d804      	bhi.n	801556c <CDC_Control_FS+0x28>
 8015562:	009a      	lsls	r2, r3, #2
 8015564:	4b04      	ldr	r3, [pc, #16]	@ (8015578 <CDC_Control_FS+0x34>)
 8015566:	18d3      	adds	r3, r2, r3
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801556c:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801556e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015570:	0018      	movs	r0, r3
 8015572:	46bd      	mov	sp, r7
 8015574:	b002      	add	sp, #8
 8015576:	bd80      	pop	{r7, pc}
 8015578:	0801a4dc 	.word	0x0801a4dc

0801557c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b082      	sub	sp, #8
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
 8015584:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015586:	687a      	ldr	r2, [r7, #4]
 8015588:	4b06      	ldr	r3, [pc, #24]	@ (80155a4 <CDC_Receive_FS+0x28>)
 801558a:	0011      	movs	r1, r2
 801558c:	0018      	movs	r0, r3
 801558e:	f7fe fd38 	bl	8014002 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015592:	4b04      	ldr	r3, [pc, #16]	@ (80155a4 <CDC_Receive_FS+0x28>)
 8015594:	0018      	movs	r0, r3
 8015596:	f7fe fd48 	bl	801402a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801559a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801559c:	0018      	movs	r0, r3
 801559e:	46bd      	mov	sp, r7
 80155a0:	b002      	add	sp, #8
 80155a2:	bd80      	pop	{r7, pc}
 80155a4:	200030c8 	.word	0x200030c8

080155a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b082      	sub	sp, #8
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	0002      	movs	r2, r0
 80155b0:	6039      	str	r1, [r7, #0]
 80155b2:	1dfb      	adds	r3, r7, #7
 80155b4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80155b6:	683b      	ldr	r3, [r7, #0]
 80155b8:	2212      	movs	r2, #18
 80155ba:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80155bc:	4b02      	ldr	r3, [pc, #8]	@ (80155c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80155be:	0018      	movs	r0, r3
 80155c0:	46bd      	mov	sp, r7
 80155c2:	b002      	add	sp, #8
 80155c4:	bd80      	pop	{r7, pc}
 80155c6:	46c0      	nop			@ (mov r8, r8)
 80155c8:	20000294 	.word	0x20000294

080155cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b082      	sub	sp, #8
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	0002      	movs	r2, r0
 80155d4:	6039      	str	r1, [r7, #0]
 80155d6:	1dfb      	adds	r3, r7, #7
 80155d8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80155da:	683b      	ldr	r3, [r7, #0]
 80155dc:	2204      	movs	r2, #4
 80155de:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80155e0:	4b02      	ldr	r3, [pc, #8]	@ (80155ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80155e2:	0018      	movs	r0, r3
 80155e4:	46bd      	mov	sp, r7
 80155e6:	b002      	add	sp, #8
 80155e8:	bd80      	pop	{r7, pc}
 80155ea:	46c0      	nop			@ (mov r8, r8)
 80155ec:	200002a8 	.word	0x200002a8

080155f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b082      	sub	sp, #8
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	0002      	movs	r2, r0
 80155f8:	6039      	str	r1, [r7, #0]
 80155fa:	1dfb      	adds	r3, r7, #7
 80155fc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80155fe:	1dfb      	adds	r3, r7, #7
 8015600:	781b      	ldrb	r3, [r3, #0]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d106      	bne.n	8015614 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015606:	683a      	ldr	r2, [r7, #0]
 8015608:	4908      	ldr	r1, [pc, #32]	@ (801562c <USBD_FS_ProductStrDescriptor+0x3c>)
 801560a:	4b09      	ldr	r3, [pc, #36]	@ (8015630 <USBD_FS_ProductStrDescriptor+0x40>)
 801560c:	0018      	movs	r0, r3
 801560e:	f7ff fe49 	bl	80152a4 <USBD_GetString>
 8015612:	e005      	b.n	8015620 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015614:	683a      	ldr	r2, [r7, #0]
 8015616:	4905      	ldr	r1, [pc, #20]	@ (801562c <USBD_FS_ProductStrDescriptor+0x3c>)
 8015618:	4b05      	ldr	r3, [pc, #20]	@ (8015630 <USBD_FS_ProductStrDescriptor+0x40>)
 801561a:	0018      	movs	r0, r3
 801561c:	f7ff fe42 	bl	80152a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015620:	4b02      	ldr	r3, [pc, #8]	@ (801562c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8015622:	0018      	movs	r0, r3
 8015624:	46bd      	mov	sp, r7
 8015626:	b002      	add	sp, #8
 8015628:	bd80      	pop	{r7, pc}
 801562a:	46c0      	nop			@ (mov r8, r8)
 801562c:	20003b8c 	.word	0x20003b8c
 8015630:	0801a26c 	.word	0x0801a26c

08015634 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b082      	sub	sp, #8
 8015638:	af00      	add	r7, sp, #0
 801563a:	0002      	movs	r2, r0
 801563c:	6039      	str	r1, [r7, #0]
 801563e:	1dfb      	adds	r3, r7, #7
 8015640:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015642:	683a      	ldr	r2, [r7, #0]
 8015644:	4904      	ldr	r1, [pc, #16]	@ (8015658 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015646:	4b05      	ldr	r3, [pc, #20]	@ (801565c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8015648:	0018      	movs	r0, r3
 801564a:	f7ff fe2b 	bl	80152a4 <USBD_GetString>
  return USBD_StrDesc;
 801564e:	4b02      	ldr	r3, [pc, #8]	@ (8015658 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8015650:	0018      	movs	r0, r3
 8015652:	46bd      	mov	sp, r7
 8015654:	b002      	add	sp, #8
 8015656:	bd80      	pop	{r7, pc}
 8015658:	20003b8c 	.word	0x20003b8c
 801565c:	0801a284 	.word	0x0801a284

08015660 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b082      	sub	sp, #8
 8015664:	af00      	add	r7, sp, #0
 8015666:	0002      	movs	r2, r0
 8015668:	6039      	str	r1, [r7, #0]
 801566a:	1dfb      	adds	r3, r7, #7
 801566c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801566e:	683b      	ldr	r3, [r7, #0]
 8015670:	221a      	movs	r2, #26
 8015672:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015674:	f000 f84c 	bl	8015710 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015678:	4b02      	ldr	r3, [pc, #8]	@ (8015684 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801567a:	0018      	movs	r0, r3
 801567c:	46bd      	mov	sp, r7
 801567e:	b002      	add	sp, #8
 8015680:	bd80      	pop	{r7, pc}
 8015682:	46c0      	nop			@ (mov r8, r8)
 8015684:	200002ac 	.word	0x200002ac

08015688 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015688:	b580      	push	{r7, lr}
 801568a:	b082      	sub	sp, #8
 801568c:	af00      	add	r7, sp, #0
 801568e:	0002      	movs	r2, r0
 8015690:	6039      	str	r1, [r7, #0]
 8015692:	1dfb      	adds	r3, r7, #7
 8015694:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8015696:	1dfb      	adds	r3, r7, #7
 8015698:	781b      	ldrb	r3, [r3, #0]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d106      	bne.n	80156ac <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801569e:	683a      	ldr	r2, [r7, #0]
 80156a0:	4908      	ldr	r1, [pc, #32]	@ (80156c4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80156a2:	4b09      	ldr	r3, [pc, #36]	@ (80156c8 <USBD_FS_ConfigStrDescriptor+0x40>)
 80156a4:	0018      	movs	r0, r3
 80156a6:	f7ff fdfd 	bl	80152a4 <USBD_GetString>
 80156aa:	e005      	b.n	80156b8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80156ac:	683a      	ldr	r2, [r7, #0]
 80156ae:	4905      	ldr	r1, [pc, #20]	@ (80156c4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80156b0:	4b05      	ldr	r3, [pc, #20]	@ (80156c8 <USBD_FS_ConfigStrDescriptor+0x40>)
 80156b2:	0018      	movs	r0, r3
 80156b4:	f7ff fdf6 	bl	80152a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80156b8:	4b02      	ldr	r3, [pc, #8]	@ (80156c4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80156ba:	0018      	movs	r0, r3
 80156bc:	46bd      	mov	sp, r7
 80156be:	b002      	add	sp, #8
 80156c0:	bd80      	pop	{r7, pc}
 80156c2:	46c0      	nop			@ (mov r8, r8)
 80156c4:	20003b8c 	.word	0x20003b8c
 80156c8:	0801a298 	.word	0x0801a298

080156cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b082      	sub	sp, #8
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	0002      	movs	r2, r0
 80156d4:	6039      	str	r1, [r7, #0]
 80156d6:	1dfb      	adds	r3, r7, #7
 80156d8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80156da:	1dfb      	adds	r3, r7, #7
 80156dc:	781b      	ldrb	r3, [r3, #0]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d106      	bne.n	80156f0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80156e2:	683a      	ldr	r2, [r7, #0]
 80156e4:	4908      	ldr	r1, [pc, #32]	@ (8015708 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80156e6:	4b09      	ldr	r3, [pc, #36]	@ (801570c <USBD_FS_InterfaceStrDescriptor+0x40>)
 80156e8:	0018      	movs	r0, r3
 80156ea:	f7ff fddb 	bl	80152a4 <USBD_GetString>
 80156ee:	e005      	b.n	80156fc <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80156f0:	683a      	ldr	r2, [r7, #0]
 80156f2:	4905      	ldr	r1, [pc, #20]	@ (8015708 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80156f4:	4b05      	ldr	r3, [pc, #20]	@ (801570c <USBD_FS_InterfaceStrDescriptor+0x40>)
 80156f6:	0018      	movs	r0, r3
 80156f8:	f7ff fdd4 	bl	80152a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80156fc:	4b02      	ldr	r3, [pc, #8]	@ (8015708 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 80156fe:	0018      	movs	r0, r3
 8015700:	46bd      	mov	sp, r7
 8015702:	b002      	add	sp, #8
 8015704:	bd80      	pop	{r7, pc}
 8015706:	46c0      	nop			@ (mov r8, r8)
 8015708:	20003b8c 	.word	0x20003b8c
 801570c:	0801a2a4 	.word	0x0801a2a4

08015710 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b084      	sub	sp, #16
 8015714:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015716:	4b10      	ldr	r3, [pc, #64]	@ (8015758 <Get_SerialNum+0x48>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801571c:	4b0f      	ldr	r3, [pc, #60]	@ (801575c <Get_SerialNum+0x4c>)
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015722:	4b0f      	ldr	r3, [pc, #60]	@ (8015760 <Get_SerialNum+0x50>)
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015728:	68fa      	ldr	r2, [r7, #12]
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	18d3      	adds	r3, r2, r3
 801572e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d00b      	beq.n	801574e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015736:	490b      	ldr	r1, [pc, #44]	@ (8015764 <Get_SerialNum+0x54>)
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	2208      	movs	r2, #8
 801573c:	0018      	movs	r0, r3
 801573e:	f000 f815 	bl	801576c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015742:	4909      	ldr	r1, [pc, #36]	@ (8015768 <Get_SerialNum+0x58>)
 8015744:	68bb      	ldr	r3, [r7, #8]
 8015746:	2204      	movs	r2, #4
 8015748:	0018      	movs	r0, r3
 801574a:	f000 f80f 	bl	801576c <IntToUnicode>
  }
}
 801574e:	46c0      	nop			@ (mov r8, r8)
 8015750:	46bd      	mov	sp, r7
 8015752:	b004      	add	sp, #16
 8015754:	bd80      	pop	{r7, pc}
 8015756:	46c0      	nop			@ (mov r8, r8)
 8015758:	1ff80050 	.word	0x1ff80050
 801575c:	1ff80054 	.word	0x1ff80054
 8015760:	1ff80058 	.word	0x1ff80058
 8015764:	200002ae 	.word	0x200002ae
 8015768:	200002be 	.word	0x200002be

0801576c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801576c:	b580      	push	{r7, lr}
 801576e:	b086      	sub	sp, #24
 8015770:	af00      	add	r7, sp, #0
 8015772:	60f8      	str	r0, [r7, #12]
 8015774:	60b9      	str	r1, [r7, #8]
 8015776:	1dfb      	adds	r3, r7, #7
 8015778:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801577a:	2117      	movs	r1, #23
 801577c:	187b      	adds	r3, r7, r1
 801577e:	2200      	movs	r2, #0
 8015780:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8015782:	187b      	adds	r3, r7, r1
 8015784:	2200      	movs	r2, #0
 8015786:	701a      	strb	r2, [r3, #0]
 8015788:	e02f      	b.n	80157ea <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	0f1b      	lsrs	r3, r3, #28
 801578e:	2b09      	cmp	r3, #9
 8015790:	d80d      	bhi.n	80157ae <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	0f1b      	lsrs	r3, r3, #28
 8015796:	b2da      	uxtb	r2, r3
 8015798:	2317      	movs	r3, #23
 801579a:	18fb      	adds	r3, r7, r3
 801579c:	781b      	ldrb	r3, [r3, #0]
 801579e:	005b      	lsls	r3, r3, #1
 80157a0:	0019      	movs	r1, r3
 80157a2:	68bb      	ldr	r3, [r7, #8]
 80157a4:	185b      	adds	r3, r3, r1
 80157a6:	3230      	adds	r2, #48	@ 0x30
 80157a8:	b2d2      	uxtb	r2, r2
 80157aa:	701a      	strb	r2, [r3, #0]
 80157ac:	e00c      	b.n	80157c8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	0f1b      	lsrs	r3, r3, #28
 80157b2:	b2da      	uxtb	r2, r3
 80157b4:	2317      	movs	r3, #23
 80157b6:	18fb      	adds	r3, r7, r3
 80157b8:	781b      	ldrb	r3, [r3, #0]
 80157ba:	005b      	lsls	r3, r3, #1
 80157bc:	0019      	movs	r1, r3
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	185b      	adds	r3, r3, r1
 80157c2:	3237      	adds	r2, #55	@ 0x37
 80157c4:	b2d2      	uxtb	r2, r2
 80157c6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	011b      	lsls	r3, r3, #4
 80157cc:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80157ce:	2117      	movs	r1, #23
 80157d0:	187b      	adds	r3, r7, r1
 80157d2:	781b      	ldrb	r3, [r3, #0]
 80157d4:	005b      	lsls	r3, r3, #1
 80157d6:	3301      	adds	r3, #1
 80157d8:	68ba      	ldr	r2, [r7, #8]
 80157da:	18d3      	adds	r3, r2, r3
 80157dc:	2200      	movs	r2, #0
 80157de:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80157e0:	187b      	adds	r3, r7, r1
 80157e2:	781a      	ldrb	r2, [r3, #0]
 80157e4:	187b      	adds	r3, r7, r1
 80157e6:	3201      	adds	r2, #1
 80157e8:	701a      	strb	r2, [r3, #0]
 80157ea:	2317      	movs	r3, #23
 80157ec:	18fa      	adds	r2, r7, r3
 80157ee:	1dfb      	adds	r3, r7, #7
 80157f0:	7812      	ldrb	r2, [r2, #0]
 80157f2:	781b      	ldrb	r3, [r3, #0]
 80157f4:	429a      	cmp	r2, r3
 80157f6:	d3c8      	bcc.n	801578a <IntToUnicode+0x1e>
  }
}
 80157f8:	46c0      	nop			@ (mov r8, r8)
 80157fa:	46c0      	nop			@ (mov r8, r8)
 80157fc:	46bd      	mov	sp, r7
 80157fe:	b006      	add	sp, #24
 8015800:	bd80      	pop	{r7, pc}
	...

08015804 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015804:	b580      	push	{r7, lr}
 8015806:	b082      	sub	sp, #8
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	4a0a      	ldr	r2, [pc, #40]	@ (801583c <HAL_PCD_MspInit+0x38>)
 8015812:	4293      	cmp	r3, r2
 8015814:	d10e      	bne.n	8015834 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015816:	4b0a      	ldr	r3, [pc, #40]	@ (8015840 <HAL_PCD_MspInit+0x3c>)
 8015818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801581a:	4b09      	ldr	r3, [pc, #36]	@ (8015840 <HAL_PCD_MspInit+0x3c>)
 801581c:	2180      	movs	r1, #128	@ 0x80
 801581e:	0409      	lsls	r1, r1, #16
 8015820:	430a      	orrs	r2, r1
 8015822:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8015824:	2200      	movs	r2, #0
 8015826:	2100      	movs	r1, #0
 8015828:	201f      	movs	r0, #31
 801582a:	f7f4 f9c9 	bl	8009bc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801582e:	201f      	movs	r0, #31
 8015830:	f7f4 f9db 	bl	8009bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8015834:	46c0      	nop			@ (mov r8, r8)
 8015836:	46bd      	mov	sp, r7
 8015838:	b002      	add	sp, #8
 801583a:	bd80      	pop	{r7, pc}
 801583c:	40005c00 	.word	0x40005c00
 8015840:	40021000 	.word	0x40021000

08015844 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b082      	sub	sp, #8
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801584c:	687a      	ldr	r2, [r7, #4]
 801584e:	23bc      	movs	r3, #188	@ 0xbc
 8015850:	009b      	lsls	r3, r3, #2
 8015852:	58d2      	ldr	r2, [r2, r3]
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	21ac      	movs	r1, #172	@ 0xac
 8015858:	0089      	lsls	r1, r1, #2
 801585a:	468c      	mov	ip, r1
 801585c:	4463      	add	r3, ip
 801585e:	0019      	movs	r1, r3
 8015860:	0010      	movs	r0, r2
 8015862:	f7fe fcb5 	bl	80141d0 <USBD_LL_SetupStage>
}
 8015866:	46c0      	nop			@ (mov r8, r8)
 8015868:	46bd      	mov	sp, r7
 801586a:	b002      	add	sp, #8
 801586c:	bd80      	pop	{r7, pc}

0801586e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801586e:	b590      	push	{r4, r7, lr}
 8015870:	b083      	sub	sp, #12
 8015872:	af00      	add	r7, sp, #0
 8015874:	6078      	str	r0, [r7, #4]
 8015876:	000a      	movs	r2, r1
 8015878:	1cfb      	adds	r3, r7, #3
 801587a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801587c:	687a      	ldr	r2, [r7, #4]
 801587e:	23bc      	movs	r3, #188	@ 0xbc
 8015880:	009b      	lsls	r3, r3, #2
 8015882:	58d4      	ldr	r4, [r2, r3]
 8015884:	1cfb      	adds	r3, r7, #3
 8015886:	781a      	ldrb	r2, [r3, #0]
 8015888:	6878      	ldr	r0, [r7, #4]
 801588a:	23be      	movs	r3, #190	@ 0xbe
 801588c:	0059      	lsls	r1, r3, #1
 801588e:	0013      	movs	r3, r2
 8015890:	009b      	lsls	r3, r3, #2
 8015892:	189b      	adds	r3, r3, r2
 8015894:	00db      	lsls	r3, r3, #3
 8015896:	18c3      	adds	r3, r0, r3
 8015898:	185b      	adds	r3, r3, r1
 801589a:	681a      	ldr	r2, [r3, #0]
 801589c:	1cfb      	adds	r3, r7, #3
 801589e:	781b      	ldrb	r3, [r3, #0]
 80158a0:	0019      	movs	r1, r3
 80158a2:	0020      	movs	r0, r4
 80158a4:	f7fe fcf2 	bl	801428c <USBD_LL_DataOutStage>
}
 80158a8:	46c0      	nop			@ (mov r8, r8)
 80158aa:	46bd      	mov	sp, r7
 80158ac:	b003      	add	sp, #12
 80158ae:	bd90      	pop	{r4, r7, pc}

080158b0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b082      	sub	sp, #8
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
 80158b8:	000a      	movs	r2, r1
 80158ba:	1cfb      	adds	r3, r7, #3
 80158bc:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80158be:	687a      	ldr	r2, [r7, #4]
 80158c0:	23bc      	movs	r3, #188	@ 0xbc
 80158c2:	009b      	lsls	r3, r3, #2
 80158c4:	58d0      	ldr	r0, [r2, r3]
 80158c6:	1cfb      	adds	r3, r7, #3
 80158c8:	781a      	ldrb	r2, [r3, #0]
 80158ca:	6879      	ldr	r1, [r7, #4]
 80158cc:	0013      	movs	r3, r2
 80158ce:	009b      	lsls	r3, r3, #2
 80158d0:	189b      	adds	r3, r3, r2
 80158d2:	00db      	lsls	r3, r3, #3
 80158d4:	18cb      	adds	r3, r1, r3
 80158d6:	333c      	adds	r3, #60	@ 0x3c
 80158d8:	681a      	ldr	r2, [r3, #0]
 80158da:	1cfb      	adds	r3, r7, #3
 80158dc:	781b      	ldrb	r3, [r3, #0]
 80158de:	0019      	movs	r1, r3
 80158e0:	f7fe fd56 	bl	8014390 <USBD_LL_DataInStage>
}
 80158e4:	46c0      	nop			@ (mov r8, r8)
 80158e6:	46bd      	mov	sp, r7
 80158e8:	b002      	add	sp, #8
 80158ea:	bd80      	pop	{r7, pc}

080158ec <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b082      	sub	sp, #8
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80158f4:	687a      	ldr	r2, [r7, #4]
 80158f6:	23bc      	movs	r3, #188	@ 0xbc
 80158f8:	009b      	lsls	r3, r3, #2
 80158fa:	58d3      	ldr	r3, [r2, r3]
 80158fc:	0018      	movs	r0, r3
 80158fe:	f7fe fe8d 	bl	801461c <USBD_LL_SOF>
}
 8015902:	46c0      	nop			@ (mov r8, r8)
 8015904:	46bd      	mov	sp, r7
 8015906:	b002      	add	sp, #8
 8015908:	bd80      	pop	{r7, pc}

0801590a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801590a:	b580      	push	{r7, lr}
 801590c:	b084      	sub	sp, #16
 801590e:	af00      	add	r7, sp, #0
 8015910:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015912:	230f      	movs	r3, #15
 8015914:	18fb      	adds	r3, r7, r3
 8015916:	2201      	movs	r2, #1
 8015918:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	689b      	ldr	r3, [r3, #8]
 801591e:	2b02      	cmp	r3, #2
 8015920:	d001      	beq.n	8015926 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8015922:	f7f0 f915 	bl	8005b50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015926:	687a      	ldr	r2, [r7, #4]
 8015928:	23bc      	movs	r3, #188	@ 0xbc
 801592a:	009b      	lsls	r3, r3, #2
 801592c:	58d2      	ldr	r2, [r2, r3]
 801592e:	230f      	movs	r3, #15
 8015930:	18fb      	adds	r3, r7, r3
 8015932:	781b      	ldrb	r3, [r3, #0]
 8015934:	0019      	movs	r1, r3
 8015936:	0010      	movs	r0, r2
 8015938:	f7fe fe2f 	bl	801459a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801593c:	687a      	ldr	r2, [r7, #4]
 801593e:	23bc      	movs	r3, #188	@ 0xbc
 8015940:	009b      	lsls	r3, r3, #2
 8015942:	58d3      	ldr	r3, [r2, r3]
 8015944:	0018      	movs	r0, r3
 8015946:	f7fe fde0 	bl	801450a <USBD_LL_Reset>
}
 801594a:	46c0      	nop			@ (mov r8, r8)
 801594c:	46bd      	mov	sp, r7
 801594e:	b004      	add	sp, #16
 8015950:	bd80      	pop	{r7, pc}
	...

08015954 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015954:	b580      	push	{r7, lr}
 8015956:	b082      	sub	sp, #8
 8015958:	af00      	add	r7, sp, #0
 801595a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801595c:	687a      	ldr	r2, [r7, #4]
 801595e:	23bc      	movs	r3, #188	@ 0xbc
 8015960:	009b      	lsls	r3, r3, #2
 8015962:	58d3      	ldr	r3, [r2, r3]
 8015964:	0018      	movs	r0, r3
 8015966:	f7fe fe29 	bl	80145bc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	699b      	ldr	r3, [r3, #24]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d005      	beq.n	801597e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015972:	4b05      	ldr	r3, [pc, #20]	@ (8015988 <HAL_PCD_SuspendCallback+0x34>)
 8015974:	691a      	ldr	r2, [r3, #16]
 8015976:	4b04      	ldr	r3, [pc, #16]	@ (8015988 <HAL_PCD_SuspendCallback+0x34>)
 8015978:	2106      	movs	r1, #6
 801597a:	430a      	orrs	r2, r1
 801597c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801597e:	46c0      	nop			@ (mov r8, r8)
 8015980:	46bd      	mov	sp, r7
 8015982:	b002      	add	sp, #8
 8015984:	bd80      	pop	{r7, pc}
 8015986:	46c0      	nop			@ (mov r8, r8)
 8015988:	e000ed00 	.word	0xe000ed00

0801598c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b082      	sub	sp, #8
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	699b      	ldr	r3, [r3, #24]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d007      	beq.n	80159ac <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801599c:	4b09      	ldr	r3, [pc, #36]	@ (80159c4 <HAL_PCD_ResumeCallback+0x38>)
 801599e:	691a      	ldr	r2, [r3, #16]
 80159a0:	4b08      	ldr	r3, [pc, #32]	@ (80159c4 <HAL_PCD_ResumeCallback+0x38>)
 80159a2:	2106      	movs	r1, #6
 80159a4:	438a      	bics	r2, r1
 80159a6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80159a8:	f000 fa44 	bl	8015e34 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80159ac:	687a      	ldr	r2, [r7, #4]
 80159ae:	23bc      	movs	r3, #188	@ 0xbc
 80159b0:	009b      	lsls	r3, r3, #2
 80159b2:	58d3      	ldr	r3, [r2, r3]
 80159b4:	0018      	movs	r0, r3
 80159b6:	f7fe fe19 	bl	80145ec <USBD_LL_Resume>
}
 80159ba:	46c0      	nop			@ (mov r8, r8)
 80159bc:	46bd      	mov	sp, r7
 80159be:	b002      	add	sp, #8
 80159c0:	bd80      	pop	{r7, pc}
 80159c2:	46c0      	nop			@ (mov r8, r8)
 80159c4:	e000ed00 	.word	0xe000ed00

080159c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b082      	sub	sp, #8
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80159d0:	4a2d      	ldr	r2, [pc, #180]	@ (8015a88 <USBD_LL_Init+0xc0>)
 80159d2:	23bc      	movs	r3, #188	@ 0xbc
 80159d4:	009b      	lsls	r3, r3, #2
 80159d6:	6879      	ldr	r1, [r7, #4]
 80159d8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80159da:	687a      	ldr	r2, [r7, #4]
 80159dc:	23b0      	movs	r3, #176	@ 0xb0
 80159de:	009b      	lsls	r3, r3, #2
 80159e0:	4929      	ldr	r1, [pc, #164]	@ (8015a88 <USBD_LL_Init+0xc0>)
 80159e2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80159e4:	4b28      	ldr	r3, [pc, #160]	@ (8015a88 <USBD_LL_Init+0xc0>)
 80159e6:	4a29      	ldr	r2, [pc, #164]	@ (8015a8c <USBD_LL_Init+0xc4>)
 80159e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80159ea:	4b27      	ldr	r3, [pc, #156]	@ (8015a88 <USBD_LL_Init+0xc0>)
 80159ec:	2208      	movs	r2, #8
 80159ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80159f0:	4b25      	ldr	r3, [pc, #148]	@ (8015a88 <USBD_LL_Init+0xc0>)
 80159f2:	2202      	movs	r2, #2
 80159f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80159f6:	4b24      	ldr	r3, [pc, #144]	@ (8015a88 <USBD_LL_Init+0xc0>)
 80159f8:	2202      	movs	r2, #2
 80159fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80159fc:	4b22      	ldr	r3, [pc, #136]	@ (8015a88 <USBD_LL_Init+0xc0>)
 80159fe:	2200      	movs	r2, #0
 8015a00:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8015a02:	4b21      	ldr	r3, [pc, #132]	@ (8015a88 <USBD_LL_Init+0xc0>)
 8015a04:	2200      	movs	r2, #0
 8015a06:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015a08:	4b1f      	ldr	r3, [pc, #124]	@ (8015a88 <USBD_LL_Init+0xc0>)
 8015a0a:	2200      	movs	r2, #0
 8015a0c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8015a88 <USBD_LL_Init+0xc0>)
 8015a10:	0018      	movs	r0, r3
 8015a12:	f7f7 f98f 	bl	800cd34 <HAL_PCD_Init>
 8015a16:	1e03      	subs	r3, r0, #0
 8015a18:	d001      	beq.n	8015a1e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8015a1a:	f7f0 f899 	bl	8005b50 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015a1e:	687a      	ldr	r2, [r7, #4]
 8015a20:	23b0      	movs	r3, #176	@ 0xb0
 8015a22:	009b      	lsls	r3, r3, #2
 8015a24:	58d0      	ldr	r0, [r2, r3]
 8015a26:	2318      	movs	r3, #24
 8015a28:	2200      	movs	r2, #0
 8015a2a:	2100      	movs	r1, #0
 8015a2c:	f7f8 ff50 	bl	800e8d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015a30:	687a      	ldr	r2, [r7, #4]
 8015a32:	23b0      	movs	r3, #176	@ 0xb0
 8015a34:	009b      	lsls	r3, r3, #2
 8015a36:	58d0      	ldr	r0, [r2, r3]
 8015a38:	2358      	movs	r3, #88	@ 0x58
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	2180      	movs	r1, #128	@ 0x80
 8015a3e:	f7f8 ff47 	bl	800e8d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8015a42:	687a      	ldr	r2, [r7, #4]
 8015a44:	23b0      	movs	r3, #176	@ 0xb0
 8015a46:	009b      	lsls	r3, r3, #2
 8015a48:	58d0      	ldr	r0, [r2, r3]
 8015a4a:	23c0      	movs	r3, #192	@ 0xc0
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	2181      	movs	r1, #129	@ 0x81
 8015a50:	f7f8 ff3e 	bl	800e8d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8015a54:	687a      	ldr	r2, [r7, #4]
 8015a56:	23b0      	movs	r3, #176	@ 0xb0
 8015a58:	009b      	lsls	r3, r3, #2
 8015a5a:	58d0      	ldr	r0, [r2, r3]
 8015a5c:	2388      	movs	r3, #136	@ 0x88
 8015a5e:	005b      	lsls	r3, r3, #1
 8015a60:	2200      	movs	r2, #0
 8015a62:	2101      	movs	r1, #1
 8015a64:	f7f8 ff34 	bl	800e8d0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8015a68:	687a      	ldr	r2, [r7, #4]
 8015a6a:	23b0      	movs	r3, #176	@ 0xb0
 8015a6c:	009b      	lsls	r3, r3, #2
 8015a6e:	58d0      	ldr	r0, [r2, r3]
 8015a70:	2380      	movs	r3, #128	@ 0x80
 8015a72:	005b      	lsls	r3, r3, #1
 8015a74:	2200      	movs	r2, #0
 8015a76:	2182      	movs	r1, #130	@ 0x82
 8015a78:	f7f8 ff2a 	bl	800e8d0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015a7c:	2300      	movs	r3, #0
}
 8015a7e:	0018      	movs	r0, r3
 8015a80:	46bd      	mov	sp, r7
 8015a82:	b002      	add	sp, #8
 8015a84:	bd80      	pop	{r7, pc}
 8015a86:	46c0      	nop			@ (mov r8, r8)
 8015a88:	20003d8c 	.word	0x20003d8c
 8015a8c:	40005c00 	.word	0x40005c00

08015a90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a92:	b085      	sub	sp, #20
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a98:	210f      	movs	r1, #15
 8015a9a:	187b      	adds	r3, r7, r1
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015aa0:	260e      	movs	r6, #14
 8015aa2:	19bb      	adds	r3, r7, r6
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015aa8:	687a      	ldr	r2, [r7, #4]
 8015aaa:	23b0      	movs	r3, #176	@ 0xb0
 8015aac:	009b      	lsls	r3, r3, #2
 8015aae:	58d3      	ldr	r3, [r2, r3]
 8015ab0:	000d      	movs	r5, r1
 8015ab2:	187c      	adds	r4, r7, r1
 8015ab4:	0018      	movs	r0, r3
 8015ab6:	f7f7 fa3d 	bl	800cf34 <HAL_PCD_Start>
 8015aba:	0003      	movs	r3, r0
 8015abc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015abe:	19bc      	adds	r4, r7, r6
 8015ac0:	197b      	adds	r3, r7, r5
 8015ac2:	781b      	ldrb	r3, [r3, #0]
 8015ac4:	0018      	movs	r0, r3
 8015ac6:	f000 f9bc 	bl	8015e42 <USBD_Get_USB_Status>
 8015aca:	0003      	movs	r3, r0
 8015acc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015ace:	19bb      	adds	r3, r7, r6
 8015ad0:	781b      	ldrb	r3, [r3, #0]
}
 8015ad2:	0018      	movs	r0, r3
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	b005      	add	sp, #20
 8015ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015ada <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015ada:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015adc:	b085      	sub	sp, #20
 8015ade:	af00      	add	r7, sp, #0
 8015ae0:	6078      	str	r0, [r7, #4]
 8015ae2:	000c      	movs	r4, r1
 8015ae4:	0010      	movs	r0, r2
 8015ae6:	0019      	movs	r1, r3
 8015ae8:	1cfb      	adds	r3, r7, #3
 8015aea:	1c22      	adds	r2, r4, #0
 8015aec:	701a      	strb	r2, [r3, #0]
 8015aee:	1cbb      	adds	r3, r7, #2
 8015af0:	1c02      	adds	r2, r0, #0
 8015af2:	701a      	strb	r2, [r3, #0]
 8015af4:	003b      	movs	r3, r7
 8015af6:	1c0a      	adds	r2, r1, #0
 8015af8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015afa:	260f      	movs	r6, #15
 8015afc:	19bb      	adds	r3, r7, r6
 8015afe:	2200      	movs	r2, #0
 8015b00:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b02:	250e      	movs	r5, #14
 8015b04:	197b      	adds	r3, r7, r5
 8015b06:	2200      	movs	r2, #0
 8015b08:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015b0a:	687a      	ldr	r2, [r7, #4]
 8015b0c:	23b0      	movs	r3, #176	@ 0xb0
 8015b0e:	009b      	lsls	r3, r3, #2
 8015b10:	58d0      	ldr	r0, [r2, r3]
 8015b12:	19bc      	adds	r4, r7, r6
 8015b14:	1cbb      	adds	r3, r7, #2
 8015b16:	781d      	ldrb	r5, [r3, #0]
 8015b18:	003b      	movs	r3, r7
 8015b1a:	881a      	ldrh	r2, [r3, #0]
 8015b1c:	1cfb      	adds	r3, r7, #3
 8015b1e:	7819      	ldrb	r1, [r3, #0]
 8015b20:	002b      	movs	r3, r5
 8015b22:	f7f7 fb9c 	bl	800d25e <HAL_PCD_EP_Open>
 8015b26:	0003      	movs	r3, r0
 8015b28:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b2a:	250e      	movs	r5, #14
 8015b2c:	197c      	adds	r4, r7, r5
 8015b2e:	19bb      	adds	r3, r7, r6
 8015b30:	781b      	ldrb	r3, [r3, #0]
 8015b32:	0018      	movs	r0, r3
 8015b34:	f000 f985 	bl	8015e42 <USBD_Get_USB_Status>
 8015b38:	0003      	movs	r3, r0
 8015b3a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015b3c:	197b      	adds	r3, r7, r5
 8015b3e:	781b      	ldrb	r3, [r3, #0]
}
 8015b40:	0018      	movs	r0, r3
 8015b42:	46bd      	mov	sp, r7
 8015b44:	b005      	add	sp, #20
 8015b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015b48 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b4a:	b085      	sub	sp, #20
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
 8015b50:	000a      	movs	r2, r1
 8015b52:	1cfb      	adds	r3, r7, #3
 8015b54:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b56:	210f      	movs	r1, #15
 8015b58:	187b      	adds	r3, r7, r1
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b5e:	260e      	movs	r6, #14
 8015b60:	19bb      	adds	r3, r7, r6
 8015b62:	2200      	movs	r2, #0
 8015b64:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015b66:	687a      	ldr	r2, [r7, #4]
 8015b68:	23b0      	movs	r3, #176	@ 0xb0
 8015b6a:	009b      	lsls	r3, r3, #2
 8015b6c:	58d2      	ldr	r2, [r2, r3]
 8015b6e:	000d      	movs	r5, r1
 8015b70:	187c      	adds	r4, r7, r1
 8015b72:	1cfb      	adds	r3, r7, #3
 8015b74:	781b      	ldrb	r3, [r3, #0]
 8015b76:	0019      	movs	r1, r3
 8015b78:	0010      	movs	r0, r2
 8015b7a:	f7f7 fbdf 	bl	800d33c <HAL_PCD_EP_Close>
 8015b7e:	0003      	movs	r3, r0
 8015b80:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b82:	19bc      	adds	r4, r7, r6
 8015b84:	197b      	adds	r3, r7, r5
 8015b86:	781b      	ldrb	r3, [r3, #0]
 8015b88:	0018      	movs	r0, r3
 8015b8a:	f000 f95a 	bl	8015e42 <USBD_Get_USB_Status>
 8015b8e:	0003      	movs	r3, r0
 8015b90:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015b92:	19bb      	adds	r3, r7, r6
 8015b94:	781b      	ldrb	r3, [r3, #0]
}
 8015b96:	0018      	movs	r0, r3
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	b005      	add	sp, #20
 8015b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015b9e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ba0:	b085      	sub	sp, #20
 8015ba2:	af00      	add	r7, sp, #0
 8015ba4:	6078      	str	r0, [r7, #4]
 8015ba6:	000a      	movs	r2, r1
 8015ba8:	1cfb      	adds	r3, r7, #3
 8015baa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bac:	210f      	movs	r1, #15
 8015bae:	187b      	adds	r3, r7, r1
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bb4:	260e      	movs	r6, #14
 8015bb6:	19bb      	adds	r3, r7, r6
 8015bb8:	2200      	movs	r2, #0
 8015bba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015bbc:	687a      	ldr	r2, [r7, #4]
 8015bbe:	23b0      	movs	r3, #176	@ 0xb0
 8015bc0:	009b      	lsls	r3, r3, #2
 8015bc2:	58d2      	ldr	r2, [r2, r3]
 8015bc4:	000d      	movs	r5, r1
 8015bc6:	187c      	adds	r4, r7, r1
 8015bc8:	1cfb      	adds	r3, r7, #3
 8015bca:	781b      	ldrb	r3, [r3, #0]
 8015bcc:	0019      	movs	r1, r3
 8015bce:	0010      	movs	r0, r2
 8015bd0:	f7f7 fc91 	bl	800d4f6 <HAL_PCD_EP_SetStall>
 8015bd4:	0003      	movs	r3, r0
 8015bd6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015bd8:	19bc      	adds	r4, r7, r6
 8015bda:	197b      	adds	r3, r7, r5
 8015bdc:	781b      	ldrb	r3, [r3, #0]
 8015bde:	0018      	movs	r0, r3
 8015be0:	f000 f92f 	bl	8015e42 <USBD_Get_USB_Status>
 8015be4:	0003      	movs	r3, r0
 8015be6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015be8:	19bb      	adds	r3, r7, r6
 8015bea:	781b      	ldrb	r3, [r3, #0]
}
 8015bec:	0018      	movs	r0, r3
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	b005      	add	sp, #20
 8015bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015bf4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bf6:	b085      	sub	sp, #20
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
 8015bfc:	000a      	movs	r2, r1
 8015bfe:	1cfb      	adds	r3, r7, #3
 8015c00:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c02:	210f      	movs	r1, #15
 8015c04:	187b      	adds	r3, r7, r1
 8015c06:	2200      	movs	r2, #0
 8015c08:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c0a:	260e      	movs	r6, #14
 8015c0c:	19bb      	adds	r3, r7, r6
 8015c0e:	2200      	movs	r2, #0
 8015c10:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015c12:	687a      	ldr	r2, [r7, #4]
 8015c14:	23b0      	movs	r3, #176	@ 0xb0
 8015c16:	009b      	lsls	r3, r3, #2
 8015c18:	58d2      	ldr	r2, [r2, r3]
 8015c1a:	000d      	movs	r5, r1
 8015c1c:	187c      	adds	r4, r7, r1
 8015c1e:	1cfb      	adds	r3, r7, #3
 8015c20:	781b      	ldrb	r3, [r3, #0]
 8015c22:	0019      	movs	r1, r3
 8015c24:	0010      	movs	r0, r2
 8015c26:	f7f7 fcc2 	bl	800d5ae <HAL_PCD_EP_ClrStall>
 8015c2a:	0003      	movs	r3, r0
 8015c2c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c2e:	19bc      	adds	r4, r7, r6
 8015c30:	197b      	adds	r3, r7, r5
 8015c32:	781b      	ldrb	r3, [r3, #0]
 8015c34:	0018      	movs	r0, r3
 8015c36:	f000 f904 	bl	8015e42 <USBD_Get_USB_Status>
 8015c3a:	0003      	movs	r3, r0
 8015c3c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015c3e:	19bb      	adds	r3, r7, r6
 8015c40:	781b      	ldrb	r3, [r3, #0]
}
 8015c42:	0018      	movs	r0, r3
 8015c44:	46bd      	mov	sp, r7
 8015c46:	b005      	add	sp, #20
 8015c48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015c4a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c4a:	b580      	push	{r7, lr}
 8015c4c:	b084      	sub	sp, #16
 8015c4e:	af00      	add	r7, sp, #0
 8015c50:	6078      	str	r0, [r7, #4]
 8015c52:	000a      	movs	r2, r1
 8015c54:	1cfb      	adds	r3, r7, #3
 8015c56:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015c58:	687a      	ldr	r2, [r7, #4]
 8015c5a:	23b0      	movs	r3, #176	@ 0xb0
 8015c5c:	009b      	lsls	r3, r3, #2
 8015c5e:	58d3      	ldr	r3, [r2, r3]
 8015c60:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015c62:	1cfb      	adds	r3, r7, #3
 8015c64:	781b      	ldrb	r3, [r3, #0]
 8015c66:	b25b      	sxtb	r3, r3
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	da0d      	bge.n	8015c88 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015c6c:	1cfb      	adds	r3, r7, #3
 8015c6e:	781b      	ldrb	r3, [r3, #0]
 8015c70:	227f      	movs	r2, #127	@ 0x7f
 8015c72:	4013      	ands	r3, r2
 8015c74:	68f9      	ldr	r1, [r7, #12]
 8015c76:	1c5a      	adds	r2, r3, #1
 8015c78:	0013      	movs	r3, r2
 8015c7a:	009b      	lsls	r3, r3, #2
 8015c7c:	189b      	adds	r3, r3, r2
 8015c7e:	00db      	lsls	r3, r3, #3
 8015c80:	18cb      	adds	r3, r1, r3
 8015c82:	3302      	adds	r3, #2
 8015c84:	781b      	ldrb	r3, [r3, #0]
 8015c86:	e00d      	b.n	8015ca4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015c88:	1cfb      	adds	r3, r7, #3
 8015c8a:	781b      	ldrb	r3, [r3, #0]
 8015c8c:	227f      	movs	r2, #127	@ 0x7f
 8015c8e:	401a      	ands	r2, r3
 8015c90:	68f8      	ldr	r0, [r7, #12]
 8015c92:	23b5      	movs	r3, #181	@ 0xb5
 8015c94:	0059      	lsls	r1, r3, #1
 8015c96:	0013      	movs	r3, r2
 8015c98:	009b      	lsls	r3, r3, #2
 8015c9a:	189b      	adds	r3, r3, r2
 8015c9c:	00db      	lsls	r3, r3, #3
 8015c9e:	18c3      	adds	r3, r0, r3
 8015ca0:	185b      	adds	r3, r3, r1
 8015ca2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015ca4:	0018      	movs	r0, r3
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	b004      	add	sp, #16
 8015caa:	bd80      	pop	{r7, pc}

08015cac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cae:	b085      	sub	sp, #20
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
 8015cb4:	000a      	movs	r2, r1
 8015cb6:	1cfb      	adds	r3, r7, #3
 8015cb8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cba:	210f      	movs	r1, #15
 8015cbc:	187b      	adds	r3, r7, r1
 8015cbe:	2200      	movs	r2, #0
 8015cc0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015cc2:	260e      	movs	r6, #14
 8015cc4:	19bb      	adds	r3, r7, r6
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015cca:	687a      	ldr	r2, [r7, #4]
 8015ccc:	23b0      	movs	r3, #176	@ 0xb0
 8015cce:	009b      	lsls	r3, r3, #2
 8015cd0:	58d2      	ldr	r2, [r2, r3]
 8015cd2:	000d      	movs	r5, r1
 8015cd4:	187c      	adds	r4, r7, r1
 8015cd6:	1cfb      	adds	r3, r7, #3
 8015cd8:	781b      	ldrb	r3, [r3, #0]
 8015cda:	0019      	movs	r1, r3
 8015cdc:	0010      	movs	r0, r2
 8015cde:	f7f7 fa93 	bl	800d208 <HAL_PCD_SetAddress>
 8015ce2:	0003      	movs	r3, r0
 8015ce4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ce6:	19bc      	adds	r4, r7, r6
 8015ce8:	197b      	adds	r3, r7, r5
 8015cea:	781b      	ldrb	r3, [r3, #0]
 8015cec:	0018      	movs	r0, r3
 8015cee:	f000 f8a8 	bl	8015e42 <USBD_Get_USB_Status>
 8015cf2:	0003      	movs	r3, r0
 8015cf4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015cf6:	19bb      	adds	r3, r7, r6
 8015cf8:	781b      	ldrb	r3, [r3, #0]
}
 8015cfa:	0018      	movs	r0, r3
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	b005      	add	sp, #20
 8015d00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015d02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015d02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d04:	b087      	sub	sp, #28
 8015d06:	af00      	add	r7, sp, #0
 8015d08:	60f8      	str	r0, [r7, #12]
 8015d0a:	0008      	movs	r0, r1
 8015d0c:	607a      	str	r2, [r7, #4]
 8015d0e:	0019      	movs	r1, r3
 8015d10:	230b      	movs	r3, #11
 8015d12:	18fb      	adds	r3, r7, r3
 8015d14:	1c02      	adds	r2, r0, #0
 8015d16:	701a      	strb	r2, [r3, #0]
 8015d18:	2408      	movs	r4, #8
 8015d1a:	193b      	adds	r3, r7, r4
 8015d1c:	1c0a      	adds	r2, r1, #0
 8015d1e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d20:	2117      	movs	r1, #23
 8015d22:	187b      	adds	r3, r7, r1
 8015d24:	2200      	movs	r2, #0
 8015d26:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d28:	2516      	movs	r5, #22
 8015d2a:	197b      	adds	r3, r7, r5
 8015d2c:	2200      	movs	r2, #0
 8015d2e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015d30:	68fa      	ldr	r2, [r7, #12]
 8015d32:	23b0      	movs	r3, #176	@ 0xb0
 8015d34:	009b      	lsls	r3, r3, #2
 8015d36:	58d0      	ldr	r0, [r2, r3]
 8015d38:	193b      	adds	r3, r7, r4
 8015d3a:	881d      	ldrh	r5, [r3, #0]
 8015d3c:	000e      	movs	r6, r1
 8015d3e:	187c      	adds	r4, r7, r1
 8015d40:	687a      	ldr	r2, [r7, #4]
 8015d42:	230b      	movs	r3, #11
 8015d44:	18fb      	adds	r3, r7, r3
 8015d46:	7819      	ldrb	r1, [r3, #0]
 8015d48:	002b      	movs	r3, r5
 8015d4a:	f7f7 fb98 	bl	800d47e <HAL_PCD_EP_Transmit>
 8015d4e:	0003      	movs	r3, r0
 8015d50:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d52:	2516      	movs	r5, #22
 8015d54:	197c      	adds	r4, r7, r5
 8015d56:	19bb      	adds	r3, r7, r6
 8015d58:	781b      	ldrb	r3, [r3, #0]
 8015d5a:	0018      	movs	r0, r3
 8015d5c:	f000 f871 	bl	8015e42 <USBD_Get_USB_Status>
 8015d60:	0003      	movs	r3, r0
 8015d62:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015d64:	197b      	adds	r3, r7, r5
 8015d66:	781b      	ldrb	r3, [r3, #0]
}
 8015d68:	0018      	movs	r0, r3
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	b007      	add	sp, #28
 8015d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015d70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d72:	b087      	sub	sp, #28
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	60f8      	str	r0, [r7, #12]
 8015d78:	0008      	movs	r0, r1
 8015d7a:	607a      	str	r2, [r7, #4]
 8015d7c:	0019      	movs	r1, r3
 8015d7e:	230b      	movs	r3, #11
 8015d80:	18fb      	adds	r3, r7, r3
 8015d82:	1c02      	adds	r2, r0, #0
 8015d84:	701a      	strb	r2, [r3, #0]
 8015d86:	2408      	movs	r4, #8
 8015d88:	193b      	adds	r3, r7, r4
 8015d8a:	1c0a      	adds	r2, r1, #0
 8015d8c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d8e:	2117      	movs	r1, #23
 8015d90:	187b      	adds	r3, r7, r1
 8015d92:	2200      	movs	r2, #0
 8015d94:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d96:	2516      	movs	r5, #22
 8015d98:	197b      	adds	r3, r7, r5
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015d9e:	68fa      	ldr	r2, [r7, #12]
 8015da0:	23b0      	movs	r3, #176	@ 0xb0
 8015da2:	009b      	lsls	r3, r3, #2
 8015da4:	58d0      	ldr	r0, [r2, r3]
 8015da6:	193b      	adds	r3, r7, r4
 8015da8:	881d      	ldrh	r5, [r3, #0]
 8015daa:	000e      	movs	r6, r1
 8015dac:	187c      	adds	r4, r7, r1
 8015dae:	687a      	ldr	r2, [r7, #4]
 8015db0:	230b      	movs	r3, #11
 8015db2:	18fb      	adds	r3, r7, r3
 8015db4:	7819      	ldrb	r1, [r3, #0]
 8015db6:	002b      	movs	r3, r5
 8015db8:	f7f7 fb11 	bl	800d3de <HAL_PCD_EP_Receive>
 8015dbc:	0003      	movs	r3, r0
 8015dbe:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015dc0:	2516      	movs	r5, #22
 8015dc2:	197c      	adds	r4, r7, r5
 8015dc4:	19bb      	adds	r3, r7, r6
 8015dc6:	781b      	ldrb	r3, [r3, #0]
 8015dc8:	0018      	movs	r0, r3
 8015dca:	f000 f83a 	bl	8015e42 <USBD_Get_USB_Status>
 8015dce:	0003      	movs	r3, r0
 8015dd0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015dd2:	197b      	adds	r3, r7, r5
 8015dd4:	781b      	ldrb	r3, [r3, #0]
}
 8015dd6:	0018      	movs	r0, r3
 8015dd8:	46bd      	mov	sp, r7
 8015dda:	b007      	add	sp, #28
 8015ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015dde <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015dde:	b580      	push	{r7, lr}
 8015de0:	b082      	sub	sp, #8
 8015de2:	af00      	add	r7, sp, #0
 8015de4:	6078      	str	r0, [r7, #4]
 8015de6:	000a      	movs	r2, r1
 8015de8:	1cfb      	adds	r3, r7, #3
 8015dea:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015dec:	687a      	ldr	r2, [r7, #4]
 8015dee:	23b0      	movs	r3, #176	@ 0xb0
 8015df0:	009b      	lsls	r3, r3, #2
 8015df2:	58d2      	ldr	r2, [r2, r3]
 8015df4:	1cfb      	adds	r3, r7, #3
 8015df6:	781b      	ldrb	r3, [r3, #0]
 8015df8:	0019      	movs	r1, r3
 8015dfa:	0010      	movs	r0, r2
 8015dfc:	f7f7 fb26 	bl	800d44c <HAL_PCD_EP_GetRxCount>
 8015e00:	0003      	movs	r3, r0
}
 8015e02:	0018      	movs	r0, r3
 8015e04:	46bd      	mov	sp, r7
 8015e06:	b002      	add	sp, #8
 8015e08:	bd80      	pop	{r7, pc}
	...

08015e0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b082      	sub	sp, #8
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015e14:	4b02      	ldr	r3, [pc, #8]	@ (8015e20 <USBD_static_malloc+0x14>)
}
 8015e16:	0018      	movs	r0, r3
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	b002      	add	sp, #8
 8015e1c:	bd80      	pop	{r7, pc}
 8015e1e:	46c0      	nop			@ (mov r8, r8)
 8015e20:	20004080 	.word	0x20004080

08015e24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b082      	sub	sp, #8
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]

}
 8015e2c:	46c0      	nop			@ (mov r8, r8)
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	b002      	add	sp, #8
 8015e32:	bd80      	pop	{r7, pc}

08015e34 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015e38:	f7ef fe18 	bl	8005a6c <SystemClock_Config>
}
 8015e3c:	46c0      	nop			@ (mov r8, r8)
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bd80      	pop	{r7, pc}

08015e42 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015e42:	b580      	push	{r7, lr}
 8015e44:	b084      	sub	sp, #16
 8015e46:	af00      	add	r7, sp, #0
 8015e48:	0002      	movs	r2, r0
 8015e4a:	1dfb      	adds	r3, r7, #7
 8015e4c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e4e:	230f      	movs	r3, #15
 8015e50:	18fb      	adds	r3, r7, r3
 8015e52:	2200      	movs	r2, #0
 8015e54:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8015e56:	1dfb      	adds	r3, r7, #7
 8015e58:	781b      	ldrb	r3, [r3, #0]
 8015e5a:	2b03      	cmp	r3, #3
 8015e5c:	d017      	beq.n	8015e8e <USBD_Get_USB_Status+0x4c>
 8015e5e:	dc1b      	bgt.n	8015e98 <USBD_Get_USB_Status+0x56>
 8015e60:	2b02      	cmp	r3, #2
 8015e62:	d00f      	beq.n	8015e84 <USBD_Get_USB_Status+0x42>
 8015e64:	dc18      	bgt.n	8015e98 <USBD_Get_USB_Status+0x56>
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d002      	beq.n	8015e70 <USBD_Get_USB_Status+0x2e>
 8015e6a:	2b01      	cmp	r3, #1
 8015e6c:	d005      	beq.n	8015e7a <USBD_Get_USB_Status+0x38>
 8015e6e:	e013      	b.n	8015e98 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015e70:	230f      	movs	r3, #15
 8015e72:	18fb      	adds	r3, r7, r3
 8015e74:	2200      	movs	r2, #0
 8015e76:	701a      	strb	r2, [r3, #0]
    break;
 8015e78:	e013      	b.n	8015ea2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015e7a:	230f      	movs	r3, #15
 8015e7c:	18fb      	adds	r3, r7, r3
 8015e7e:	2202      	movs	r2, #2
 8015e80:	701a      	strb	r2, [r3, #0]
    break;
 8015e82:	e00e      	b.n	8015ea2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015e84:	230f      	movs	r3, #15
 8015e86:	18fb      	adds	r3, r7, r3
 8015e88:	2201      	movs	r2, #1
 8015e8a:	701a      	strb	r2, [r3, #0]
    break;
 8015e8c:	e009      	b.n	8015ea2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015e8e:	230f      	movs	r3, #15
 8015e90:	18fb      	adds	r3, r7, r3
 8015e92:	2202      	movs	r2, #2
 8015e94:	701a      	strb	r2, [r3, #0]
    break;
 8015e96:	e004      	b.n	8015ea2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8015e98:	230f      	movs	r3, #15
 8015e9a:	18fb      	adds	r3, r7, r3
 8015e9c:	2202      	movs	r2, #2
 8015e9e:	701a      	strb	r2, [r3, #0]
    break;
 8015ea0:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8015ea2:	230f      	movs	r3, #15
 8015ea4:	18fb      	adds	r3, r7, r3
 8015ea6:	781b      	ldrb	r3, [r3, #0]
}
 8015ea8:	0018      	movs	r0, r3
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	b004      	add	sp, #16
 8015eae:	bd80      	pop	{r7, pc}

08015eb0 <__cvt>:
 8015eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015eb2:	001f      	movs	r7, r3
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	0016      	movs	r6, r2
 8015eb8:	b08b      	sub	sp, #44	@ 0x2c
 8015eba:	429f      	cmp	r7, r3
 8015ebc:	da04      	bge.n	8015ec8 <__cvt+0x18>
 8015ebe:	2180      	movs	r1, #128	@ 0x80
 8015ec0:	0609      	lsls	r1, r1, #24
 8015ec2:	187b      	adds	r3, r7, r1
 8015ec4:	001f      	movs	r7, r3
 8015ec6:	232d      	movs	r3, #45	@ 0x2d
 8015ec8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015eca:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8015ecc:	7013      	strb	r3, [r2, #0]
 8015ece:	2320      	movs	r3, #32
 8015ed0:	2203      	movs	r2, #3
 8015ed2:	439d      	bics	r5, r3
 8015ed4:	2d46      	cmp	r5, #70	@ 0x46
 8015ed6:	d007      	beq.n	8015ee8 <__cvt+0x38>
 8015ed8:	002b      	movs	r3, r5
 8015eda:	3b45      	subs	r3, #69	@ 0x45
 8015edc:	4259      	negs	r1, r3
 8015ede:	414b      	adcs	r3, r1
 8015ee0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8015ee2:	3a01      	subs	r2, #1
 8015ee4:	18cb      	adds	r3, r1, r3
 8015ee6:	9310      	str	r3, [sp, #64]	@ 0x40
 8015ee8:	ab09      	add	r3, sp, #36	@ 0x24
 8015eea:	9304      	str	r3, [sp, #16]
 8015eec:	ab08      	add	r3, sp, #32
 8015eee:	9303      	str	r3, [sp, #12]
 8015ef0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015ef2:	9200      	str	r2, [sp, #0]
 8015ef4:	9302      	str	r3, [sp, #8]
 8015ef6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015ef8:	0032      	movs	r2, r6
 8015efa:	9301      	str	r3, [sp, #4]
 8015efc:	003b      	movs	r3, r7
 8015efe:	f000 ff05 	bl	8016d0c <_dtoa_r>
 8015f02:	0004      	movs	r4, r0
 8015f04:	2d47      	cmp	r5, #71	@ 0x47
 8015f06:	d11b      	bne.n	8015f40 <__cvt+0x90>
 8015f08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015f0a:	07db      	lsls	r3, r3, #31
 8015f0c:	d511      	bpl.n	8015f32 <__cvt+0x82>
 8015f0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015f10:	18c3      	adds	r3, r0, r3
 8015f12:	9307      	str	r3, [sp, #28]
 8015f14:	2200      	movs	r2, #0
 8015f16:	2300      	movs	r3, #0
 8015f18:	0030      	movs	r0, r6
 8015f1a:	0039      	movs	r1, r7
 8015f1c:	f7ea fa96 	bl	800044c <__aeabi_dcmpeq>
 8015f20:	2800      	cmp	r0, #0
 8015f22:	d001      	beq.n	8015f28 <__cvt+0x78>
 8015f24:	9b07      	ldr	r3, [sp, #28]
 8015f26:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f28:	2230      	movs	r2, #48	@ 0x30
 8015f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f2c:	9907      	ldr	r1, [sp, #28]
 8015f2e:	428b      	cmp	r3, r1
 8015f30:	d320      	bcc.n	8015f74 <__cvt+0xc4>
 8015f32:	0020      	movs	r0, r4
 8015f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f36:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8015f38:	1b1b      	subs	r3, r3, r4
 8015f3a:	6013      	str	r3, [r2, #0]
 8015f3c:	b00b      	add	sp, #44	@ 0x2c
 8015f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015f42:	18c3      	adds	r3, r0, r3
 8015f44:	9307      	str	r3, [sp, #28]
 8015f46:	2d46      	cmp	r5, #70	@ 0x46
 8015f48:	d1e4      	bne.n	8015f14 <__cvt+0x64>
 8015f4a:	7803      	ldrb	r3, [r0, #0]
 8015f4c:	2b30      	cmp	r3, #48	@ 0x30
 8015f4e:	d10c      	bne.n	8015f6a <__cvt+0xba>
 8015f50:	2200      	movs	r2, #0
 8015f52:	2300      	movs	r3, #0
 8015f54:	0030      	movs	r0, r6
 8015f56:	0039      	movs	r1, r7
 8015f58:	f7ea fa78 	bl	800044c <__aeabi_dcmpeq>
 8015f5c:	2800      	cmp	r0, #0
 8015f5e:	d104      	bne.n	8015f6a <__cvt+0xba>
 8015f60:	2301      	movs	r3, #1
 8015f62:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015f64:	1a9b      	subs	r3, r3, r2
 8015f66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015f68:	6013      	str	r3, [r2, #0]
 8015f6a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015f6c:	9a07      	ldr	r2, [sp, #28]
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	18d3      	adds	r3, r2, r3
 8015f72:	e7ce      	b.n	8015f12 <__cvt+0x62>
 8015f74:	1c59      	adds	r1, r3, #1
 8015f76:	9109      	str	r1, [sp, #36]	@ 0x24
 8015f78:	701a      	strb	r2, [r3, #0]
 8015f7a:	e7d6      	b.n	8015f2a <__cvt+0x7a>

08015f7c <__exponent>:
 8015f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f7e:	232b      	movs	r3, #43	@ 0x2b
 8015f80:	0005      	movs	r5, r0
 8015f82:	000c      	movs	r4, r1
 8015f84:	b085      	sub	sp, #20
 8015f86:	7002      	strb	r2, [r0, #0]
 8015f88:	2900      	cmp	r1, #0
 8015f8a:	da01      	bge.n	8015f90 <__exponent+0x14>
 8015f8c:	424c      	negs	r4, r1
 8015f8e:	3302      	adds	r3, #2
 8015f90:	706b      	strb	r3, [r5, #1]
 8015f92:	2c09      	cmp	r4, #9
 8015f94:	dd2c      	ble.n	8015ff0 <__exponent+0x74>
 8015f96:	ab02      	add	r3, sp, #8
 8015f98:	1dde      	adds	r6, r3, #7
 8015f9a:	0020      	movs	r0, r4
 8015f9c:	210a      	movs	r1, #10
 8015f9e:	f7ea fa3f 	bl	8000420 <__aeabi_idivmod>
 8015fa2:	0037      	movs	r7, r6
 8015fa4:	3130      	adds	r1, #48	@ 0x30
 8015fa6:	3e01      	subs	r6, #1
 8015fa8:	0020      	movs	r0, r4
 8015faa:	7031      	strb	r1, [r6, #0]
 8015fac:	210a      	movs	r1, #10
 8015fae:	9401      	str	r4, [sp, #4]
 8015fb0:	f7ea f950 	bl	8000254 <__divsi3>
 8015fb4:	9b01      	ldr	r3, [sp, #4]
 8015fb6:	0004      	movs	r4, r0
 8015fb8:	2b63      	cmp	r3, #99	@ 0x63
 8015fba:	dcee      	bgt.n	8015f9a <__exponent+0x1e>
 8015fbc:	1eba      	subs	r2, r7, #2
 8015fbe:	1ca8      	adds	r0, r5, #2
 8015fc0:	0001      	movs	r1, r0
 8015fc2:	0013      	movs	r3, r2
 8015fc4:	3430      	adds	r4, #48	@ 0x30
 8015fc6:	7014      	strb	r4, [r2, #0]
 8015fc8:	ac02      	add	r4, sp, #8
 8015fca:	3407      	adds	r4, #7
 8015fcc:	429c      	cmp	r4, r3
 8015fce:	d80a      	bhi.n	8015fe6 <__exponent+0x6a>
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	42a2      	cmp	r2, r4
 8015fd4:	d803      	bhi.n	8015fde <__exponent+0x62>
 8015fd6:	3309      	adds	r3, #9
 8015fd8:	aa02      	add	r2, sp, #8
 8015fda:	189b      	adds	r3, r3, r2
 8015fdc:	1bdb      	subs	r3, r3, r7
 8015fde:	18c0      	adds	r0, r0, r3
 8015fe0:	1b40      	subs	r0, r0, r5
 8015fe2:	b005      	add	sp, #20
 8015fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015fe6:	781c      	ldrb	r4, [r3, #0]
 8015fe8:	3301      	adds	r3, #1
 8015fea:	700c      	strb	r4, [r1, #0]
 8015fec:	3101      	adds	r1, #1
 8015fee:	e7eb      	b.n	8015fc8 <__exponent+0x4c>
 8015ff0:	2330      	movs	r3, #48	@ 0x30
 8015ff2:	18e4      	adds	r4, r4, r3
 8015ff4:	70ab      	strb	r3, [r5, #2]
 8015ff6:	1d28      	adds	r0, r5, #4
 8015ff8:	70ec      	strb	r4, [r5, #3]
 8015ffa:	e7f1      	b.n	8015fe0 <__exponent+0x64>

08015ffc <_printf_float>:
 8015ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ffe:	b097      	sub	sp, #92	@ 0x5c
 8016000:	000d      	movs	r5, r1
 8016002:	920a      	str	r2, [sp, #40]	@ 0x28
 8016004:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8016006:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016008:	9009      	str	r0, [sp, #36]	@ 0x24
 801600a:	f000 fd5d 	bl	8016ac8 <_localeconv_r>
 801600e:	6803      	ldr	r3, [r0, #0]
 8016010:	0018      	movs	r0, r3
 8016012:	930d      	str	r3, [sp, #52]	@ 0x34
 8016014:	f7ea f878 	bl	8000108 <strlen>
 8016018:	2300      	movs	r3, #0
 801601a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801601c:	9314      	str	r3, [sp, #80]	@ 0x50
 801601e:	7e2b      	ldrb	r3, [r5, #24]
 8016020:	2207      	movs	r2, #7
 8016022:	930c      	str	r3, [sp, #48]	@ 0x30
 8016024:	682b      	ldr	r3, [r5, #0]
 8016026:	930e      	str	r3, [sp, #56]	@ 0x38
 8016028:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801602a:	6823      	ldr	r3, [r4, #0]
 801602c:	05c9      	lsls	r1, r1, #23
 801602e:	d545      	bpl.n	80160bc <_printf_float+0xc0>
 8016030:	189b      	adds	r3, r3, r2
 8016032:	4393      	bics	r3, r2
 8016034:	001a      	movs	r2, r3
 8016036:	3208      	adds	r2, #8
 8016038:	6022      	str	r2, [r4, #0]
 801603a:	2201      	movs	r2, #1
 801603c:	681e      	ldr	r6, [r3, #0]
 801603e:	685f      	ldr	r7, [r3, #4]
 8016040:	007b      	lsls	r3, r7, #1
 8016042:	085b      	lsrs	r3, r3, #1
 8016044:	9311      	str	r3, [sp, #68]	@ 0x44
 8016046:	9610      	str	r6, [sp, #64]	@ 0x40
 8016048:	64ae      	str	r6, [r5, #72]	@ 0x48
 801604a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801604c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801604e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8016050:	4ba7      	ldr	r3, [pc, #668]	@ (80162f0 <_printf_float+0x2f4>)
 8016052:	4252      	negs	r2, r2
 8016054:	f7ed f8d4 	bl	8003200 <__aeabi_dcmpun>
 8016058:	2800      	cmp	r0, #0
 801605a:	d131      	bne.n	80160c0 <_printf_float+0xc4>
 801605c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801605e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8016060:	2201      	movs	r2, #1
 8016062:	4ba3      	ldr	r3, [pc, #652]	@ (80162f0 <_printf_float+0x2f4>)
 8016064:	4252      	negs	r2, r2
 8016066:	f7ea fa01 	bl	800046c <__aeabi_dcmple>
 801606a:	2800      	cmp	r0, #0
 801606c:	d128      	bne.n	80160c0 <_printf_float+0xc4>
 801606e:	2200      	movs	r2, #0
 8016070:	2300      	movs	r3, #0
 8016072:	0030      	movs	r0, r6
 8016074:	0039      	movs	r1, r7
 8016076:	f7ea f9ef 	bl	8000458 <__aeabi_dcmplt>
 801607a:	2800      	cmp	r0, #0
 801607c:	d003      	beq.n	8016086 <_printf_float+0x8a>
 801607e:	002b      	movs	r3, r5
 8016080:	222d      	movs	r2, #45	@ 0x2d
 8016082:	3343      	adds	r3, #67	@ 0x43
 8016084:	701a      	strb	r2, [r3, #0]
 8016086:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016088:	4f9a      	ldr	r7, [pc, #616]	@ (80162f4 <_printf_float+0x2f8>)
 801608a:	2b47      	cmp	r3, #71	@ 0x47
 801608c:	d900      	bls.n	8016090 <_printf_float+0x94>
 801608e:	4f9a      	ldr	r7, [pc, #616]	@ (80162f8 <_printf_float+0x2fc>)
 8016090:	2303      	movs	r3, #3
 8016092:	2400      	movs	r4, #0
 8016094:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016096:	612b      	str	r3, [r5, #16]
 8016098:	3301      	adds	r3, #1
 801609a:	439a      	bics	r2, r3
 801609c:	602a      	str	r2, [r5, #0]
 801609e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80160a0:	0029      	movs	r1, r5
 80160a2:	9300      	str	r3, [sp, #0]
 80160a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80160a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80160a8:	aa15      	add	r2, sp, #84	@ 0x54
 80160aa:	f000 f9e5 	bl	8016478 <_printf_common>
 80160ae:	3001      	adds	r0, #1
 80160b0:	d000      	beq.n	80160b4 <_printf_float+0xb8>
 80160b2:	e09f      	b.n	80161f4 <_printf_float+0x1f8>
 80160b4:	2001      	movs	r0, #1
 80160b6:	4240      	negs	r0, r0
 80160b8:	b017      	add	sp, #92	@ 0x5c
 80160ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160bc:	3307      	adds	r3, #7
 80160be:	e7b8      	b.n	8016032 <_printf_float+0x36>
 80160c0:	0032      	movs	r2, r6
 80160c2:	003b      	movs	r3, r7
 80160c4:	0030      	movs	r0, r6
 80160c6:	0039      	movs	r1, r7
 80160c8:	f7ed f89a 	bl	8003200 <__aeabi_dcmpun>
 80160cc:	2800      	cmp	r0, #0
 80160ce:	d00b      	beq.n	80160e8 <_printf_float+0xec>
 80160d0:	2f00      	cmp	r7, #0
 80160d2:	da03      	bge.n	80160dc <_printf_float+0xe0>
 80160d4:	002b      	movs	r3, r5
 80160d6:	222d      	movs	r2, #45	@ 0x2d
 80160d8:	3343      	adds	r3, #67	@ 0x43
 80160da:	701a      	strb	r2, [r3, #0]
 80160dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80160de:	4f87      	ldr	r7, [pc, #540]	@ (80162fc <_printf_float+0x300>)
 80160e0:	2b47      	cmp	r3, #71	@ 0x47
 80160e2:	d9d5      	bls.n	8016090 <_printf_float+0x94>
 80160e4:	4f86      	ldr	r7, [pc, #536]	@ (8016300 <_printf_float+0x304>)
 80160e6:	e7d3      	b.n	8016090 <_printf_float+0x94>
 80160e8:	2220      	movs	r2, #32
 80160ea:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80160ec:	686b      	ldr	r3, [r5, #4]
 80160ee:	4394      	bics	r4, r2
 80160f0:	1c5a      	adds	r2, r3, #1
 80160f2:	d146      	bne.n	8016182 <_printf_float+0x186>
 80160f4:	3307      	adds	r3, #7
 80160f6:	606b      	str	r3, [r5, #4]
 80160f8:	2380      	movs	r3, #128	@ 0x80
 80160fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80160fc:	00db      	lsls	r3, r3, #3
 80160fe:	4313      	orrs	r3, r2
 8016100:	2200      	movs	r2, #0
 8016102:	602b      	str	r3, [r5, #0]
 8016104:	9206      	str	r2, [sp, #24]
 8016106:	aa14      	add	r2, sp, #80	@ 0x50
 8016108:	9205      	str	r2, [sp, #20]
 801610a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801610c:	a90a      	add	r1, sp, #40	@ 0x28
 801610e:	9204      	str	r2, [sp, #16]
 8016110:	aa13      	add	r2, sp, #76	@ 0x4c
 8016112:	9203      	str	r2, [sp, #12]
 8016114:	2223      	movs	r2, #35	@ 0x23
 8016116:	1852      	adds	r2, r2, r1
 8016118:	9202      	str	r2, [sp, #8]
 801611a:	9301      	str	r3, [sp, #4]
 801611c:	686b      	ldr	r3, [r5, #4]
 801611e:	0032      	movs	r2, r6
 8016120:	9300      	str	r3, [sp, #0]
 8016122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016124:	003b      	movs	r3, r7
 8016126:	f7ff fec3 	bl	8015eb0 <__cvt>
 801612a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801612c:	0007      	movs	r7, r0
 801612e:	2c47      	cmp	r4, #71	@ 0x47
 8016130:	d12d      	bne.n	801618e <_printf_float+0x192>
 8016132:	1cd3      	adds	r3, r2, #3
 8016134:	db02      	blt.n	801613c <_printf_float+0x140>
 8016136:	686b      	ldr	r3, [r5, #4]
 8016138:	429a      	cmp	r2, r3
 801613a:	dd48      	ble.n	80161ce <_printf_float+0x1d2>
 801613c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801613e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016140:	3b02      	subs	r3, #2
 8016142:	b2db      	uxtb	r3, r3
 8016144:	930c      	str	r3, [sp, #48]	@ 0x30
 8016146:	0028      	movs	r0, r5
 8016148:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801614a:	3901      	subs	r1, #1
 801614c:	3050      	adds	r0, #80	@ 0x50
 801614e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016150:	f7ff ff14 	bl	8015f7c <__exponent>
 8016154:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016156:	0004      	movs	r4, r0
 8016158:	1813      	adds	r3, r2, r0
 801615a:	612b      	str	r3, [r5, #16]
 801615c:	2a01      	cmp	r2, #1
 801615e:	dc02      	bgt.n	8016166 <_printf_float+0x16a>
 8016160:	682a      	ldr	r2, [r5, #0]
 8016162:	07d2      	lsls	r2, r2, #31
 8016164:	d501      	bpl.n	801616a <_printf_float+0x16e>
 8016166:	3301      	adds	r3, #1
 8016168:	612b      	str	r3, [r5, #16]
 801616a:	2323      	movs	r3, #35	@ 0x23
 801616c:	aa0a      	add	r2, sp, #40	@ 0x28
 801616e:	189b      	adds	r3, r3, r2
 8016170:	781b      	ldrb	r3, [r3, #0]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d100      	bne.n	8016178 <_printf_float+0x17c>
 8016176:	e792      	b.n	801609e <_printf_float+0xa2>
 8016178:	002b      	movs	r3, r5
 801617a:	222d      	movs	r2, #45	@ 0x2d
 801617c:	3343      	adds	r3, #67	@ 0x43
 801617e:	701a      	strb	r2, [r3, #0]
 8016180:	e78d      	b.n	801609e <_printf_float+0xa2>
 8016182:	2c47      	cmp	r4, #71	@ 0x47
 8016184:	d1b8      	bne.n	80160f8 <_printf_float+0xfc>
 8016186:	2b00      	cmp	r3, #0
 8016188:	d1b6      	bne.n	80160f8 <_printf_float+0xfc>
 801618a:	3301      	adds	r3, #1
 801618c:	e7b3      	b.n	80160f6 <_printf_float+0xfa>
 801618e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016190:	0011      	movs	r1, r2
 8016192:	2b65      	cmp	r3, #101	@ 0x65
 8016194:	d9d7      	bls.n	8016146 <_printf_float+0x14a>
 8016196:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016198:	2b66      	cmp	r3, #102	@ 0x66
 801619a:	d11a      	bne.n	80161d2 <_printf_float+0x1d6>
 801619c:	686b      	ldr	r3, [r5, #4]
 801619e:	2a00      	cmp	r2, #0
 80161a0:	dd09      	ble.n	80161b6 <_printf_float+0x1ba>
 80161a2:	612a      	str	r2, [r5, #16]
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d102      	bne.n	80161ae <_printf_float+0x1b2>
 80161a8:	6829      	ldr	r1, [r5, #0]
 80161aa:	07c9      	lsls	r1, r1, #31
 80161ac:	d50b      	bpl.n	80161c6 <_printf_float+0x1ca>
 80161ae:	3301      	adds	r3, #1
 80161b0:	189b      	adds	r3, r3, r2
 80161b2:	612b      	str	r3, [r5, #16]
 80161b4:	e007      	b.n	80161c6 <_printf_float+0x1ca>
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d103      	bne.n	80161c2 <_printf_float+0x1c6>
 80161ba:	2201      	movs	r2, #1
 80161bc:	6829      	ldr	r1, [r5, #0]
 80161be:	4211      	tst	r1, r2
 80161c0:	d000      	beq.n	80161c4 <_printf_float+0x1c8>
 80161c2:	1c9a      	adds	r2, r3, #2
 80161c4:	612a      	str	r2, [r5, #16]
 80161c6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80161c8:	2400      	movs	r4, #0
 80161ca:	65ab      	str	r3, [r5, #88]	@ 0x58
 80161cc:	e7cd      	b.n	801616a <_printf_float+0x16e>
 80161ce:	2367      	movs	r3, #103	@ 0x67
 80161d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80161d2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80161d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80161d6:	4299      	cmp	r1, r3
 80161d8:	db06      	blt.n	80161e8 <_printf_float+0x1ec>
 80161da:	682b      	ldr	r3, [r5, #0]
 80161dc:	6129      	str	r1, [r5, #16]
 80161de:	07db      	lsls	r3, r3, #31
 80161e0:	d5f1      	bpl.n	80161c6 <_printf_float+0x1ca>
 80161e2:	3101      	adds	r1, #1
 80161e4:	6129      	str	r1, [r5, #16]
 80161e6:	e7ee      	b.n	80161c6 <_printf_float+0x1ca>
 80161e8:	2201      	movs	r2, #1
 80161ea:	2900      	cmp	r1, #0
 80161ec:	dce0      	bgt.n	80161b0 <_printf_float+0x1b4>
 80161ee:	1892      	adds	r2, r2, r2
 80161f0:	1a52      	subs	r2, r2, r1
 80161f2:	e7dd      	b.n	80161b0 <_printf_float+0x1b4>
 80161f4:	682a      	ldr	r2, [r5, #0]
 80161f6:	0553      	lsls	r3, r2, #21
 80161f8:	d408      	bmi.n	801620c <_printf_float+0x210>
 80161fa:	692b      	ldr	r3, [r5, #16]
 80161fc:	003a      	movs	r2, r7
 80161fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016200:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016202:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016204:	47a0      	blx	r4
 8016206:	3001      	adds	r0, #1
 8016208:	d129      	bne.n	801625e <_printf_float+0x262>
 801620a:	e753      	b.n	80160b4 <_printf_float+0xb8>
 801620c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801620e:	2b65      	cmp	r3, #101	@ 0x65
 8016210:	d800      	bhi.n	8016214 <_printf_float+0x218>
 8016212:	e0da      	b.n	80163ca <_printf_float+0x3ce>
 8016214:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8016216:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8016218:	2200      	movs	r2, #0
 801621a:	2300      	movs	r3, #0
 801621c:	f7ea f916 	bl	800044c <__aeabi_dcmpeq>
 8016220:	2800      	cmp	r0, #0
 8016222:	d033      	beq.n	801628c <_printf_float+0x290>
 8016224:	2301      	movs	r3, #1
 8016226:	4a37      	ldr	r2, [pc, #220]	@ (8016304 <_printf_float+0x308>)
 8016228:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801622a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801622c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801622e:	47a0      	blx	r4
 8016230:	3001      	adds	r0, #1
 8016232:	d100      	bne.n	8016236 <_printf_float+0x23a>
 8016234:	e73e      	b.n	80160b4 <_printf_float+0xb8>
 8016236:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8016238:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801623a:	42b3      	cmp	r3, r6
 801623c:	db02      	blt.n	8016244 <_printf_float+0x248>
 801623e:	682b      	ldr	r3, [r5, #0]
 8016240:	07db      	lsls	r3, r3, #31
 8016242:	d50c      	bpl.n	801625e <_printf_float+0x262>
 8016244:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016246:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016248:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801624a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801624c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801624e:	47a0      	blx	r4
 8016250:	2400      	movs	r4, #0
 8016252:	3001      	adds	r0, #1
 8016254:	d100      	bne.n	8016258 <_printf_float+0x25c>
 8016256:	e72d      	b.n	80160b4 <_printf_float+0xb8>
 8016258:	1e73      	subs	r3, r6, #1
 801625a:	42a3      	cmp	r3, r4
 801625c:	dc0a      	bgt.n	8016274 <_printf_float+0x278>
 801625e:	682b      	ldr	r3, [r5, #0]
 8016260:	079b      	lsls	r3, r3, #30
 8016262:	d500      	bpl.n	8016266 <_printf_float+0x26a>
 8016264:	e105      	b.n	8016472 <_printf_float+0x476>
 8016266:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016268:	68e8      	ldr	r0, [r5, #12]
 801626a:	4298      	cmp	r0, r3
 801626c:	db00      	blt.n	8016270 <_printf_float+0x274>
 801626e:	e723      	b.n	80160b8 <_printf_float+0xbc>
 8016270:	0018      	movs	r0, r3
 8016272:	e721      	b.n	80160b8 <_printf_float+0xbc>
 8016274:	002a      	movs	r2, r5
 8016276:	2301      	movs	r3, #1
 8016278:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801627a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801627c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801627e:	321a      	adds	r2, #26
 8016280:	47b8      	blx	r7
 8016282:	3001      	adds	r0, #1
 8016284:	d100      	bne.n	8016288 <_printf_float+0x28c>
 8016286:	e715      	b.n	80160b4 <_printf_float+0xb8>
 8016288:	3401      	adds	r4, #1
 801628a:	e7e5      	b.n	8016258 <_printf_float+0x25c>
 801628c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801628e:	2b00      	cmp	r3, #0
 8016290:	dc3a      	bgt.n	8016308 <_printf_float+0x30c>
 8016292:	2301      	movs	r3, #1
 8016294:	4a1b      	ldr	r2, [pc, #108]	@ (8016304 <_printf_float+0x308>)
 8016296:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016298:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801629a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801629c:	47a0      	blx	r4
 801629e:	3001      	adds	r0, #1
 80162a0:	d100      	bne.n	80162a4 <_printf_float+0x2a8>
 80162a2:	e707      	b.n	80160b4 <_printf_float+0xb8>
 80162a4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80162a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80162a8:	4333      	orrs	r3, r6
 80162aa:	d102      	bne.n	80162b2 <_printf_float+0x2b6>
 80162ac:	682b      	ldr	r3, [r5, #0]
 80162ae:	07db      	lsls	r3, r3, #31
 80162b0:	d5d5      	bpl.n	801625e <_printf_float+0x262>
 80162b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80162b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80162b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80162b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80162ba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80162bc:	47a0      	blx	r4
 80162be:	2300      	movs	r3, #0
 80162c0:	3001      	adds	r0, #1
 80162c2:	d100      	bne.n	80162c6 <_printf_float+0x2ca>
 80162c4:	e6f6      	b.n	80160b4 <_printf_float+0xb8>
 80162c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80162c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80162ca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80162cc:	425b      	negs	r3, r3
 80162ce:	4293      	cmp	r3, r2
 80162d0:	dc01      	bgt.n	80162d6 <_printf_float+0x2da>
 80162d2:	0033      	movs	r3, r6
 80162d4:	e792      	b.n	80161fc <_printf_float+0x200>
 80162d6:	002a      	movs	r2, r5
 80162d8:	2301      	movs	r3, #1
 80162da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80162dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80162de:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80162e0:	321a      	adds	r2, #26
 80162e2:	47a0      	blx	r4
 80162e4:	3001      	adds	r0, #1
 80162e6:	d100      	bne.n	80162ea <_printf_float+0x2ee>
 80162e8:	e6e4      	b.n	80160b4 <_printf_float+0xb8>
 80162ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80162ec:	3301      	adds	r3, #1
 80162ee:	e7ea      	b.n	80162c6 <_printf_float+0x2ca>
 80162f0:	7fefffff 	.word	0x7fefffff
 80162f4:	0801a56c 	.word	0x0801a56c
 80162f8:	0801a570 	.word	0x0801a570
 80162fc:	0801a574 	.word	0x0801a574
 8016300:	0801a578 	.word	0x0801a578
 8016304:	0801a57c 	.word	0x0801a57c
 8016308:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801630a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801630c:	930c      	str	r3, [sp, #48]	@ 0x30
 801630e:	429e      	cmp	r6, r3
 8016310:	dd00      	ble.n	8016314 <_printf_float+0x318>
 8016312:	001e      	movs	r6, r3
 8016314:	2e00      	cmp	r6, #0
 8016316:	dc31      	bgt.n	801637c <_printf_float+0x380>
 8016318:	43f3      	mvns	r3, r6
 801631a:	2400      	movs	r4, #0
 801631c:	17db      	asrs	r3, r3, #31
 801631e:	4033      	ands	r3, r6
 8016320:	930e      	str	r3, [sp, #56]	@ 0x38
 8016322:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8016324:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016326:	1af3      	subs	r3, r6, r3
 8016328:	42a3      	cmp	r3, r4
 801632a:	dc30      	bgt.n	801638e <_printf_float+0x392>
 801632c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801632e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016330:	429a      	cmp	r2, r3
 8016332:	dc38      	bgt.n	80163a6 <_printf_float+0x3aa>
 8016334:	682b      	ldr	r3, [r5, #0]
 8016336:	07db      	lsls	r3, r3, #31
 8016338:	d435      	bmi.n	80163a6 <_printf_float+0x3aa>
 801633a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801633c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801633e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016340:	1b9b      	subs	r3, r3, r6
 8016342:	1b14      	subs	r4, r2, r4
 8016344:	429c      	cmp	r4, r3
 8016346:	dd00      	ble.n	801634a <_printf_float+0x34e>
 8016348:	001c      	movs	r4, r3
 801634a:	2c00      	cmp	r4, #0
 801634c:	dc34      	bgt.n	80163b8 <_printf_float+0x3bc>
 801634e:	43e3      	mvns	r3, r4
 8016350:	2600      	movs	r6, #0
 8016352:	17db      	asrs	r3, r3, #31
 8016354:	401c      	ands	r4, r3
 8016356:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016358:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801635a:	1ad3      	subs	r3, r2, r3
 801635c:	1b1b      	subs	r3, r3, r4
 801635e:	42b3      	cmp	r3, r6
 8016360:	dc00      	bgt.n	8016364 <_printf_float+0x368>
 8016362:	e77c      	b.n	801625e <_printf_float+0x262>
 8016364:	002a      	movs	r2, r5
 8016366:	2301      	movs	r3, #1
 8016368:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801636a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801636c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801636e:	321a      	adds	r2, #26
 8016370:	47b8      	blx	r7
 8016372:	3001      	adds	r0, #1
 8016374:	d100      	bne.n	8016378 <_printf_float+0x37c>
 8016376:	e69d      	b.n	80160b4 <_printf_float+0xb8>
 8016378:	3601      	adds	r6, #1
 801637a:	e7ec      	b.n	8016356 <_printf_float+0x35a>
 801637c:	0033      	movs	r3, r6
 801637e:	003a      	movs	r2, r7
 8016380:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016384:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016386:	47a0      	blx	r4
 8016388:	3001      	adds	r0, #1
 801638a:	d1c5      	bne.n	8016318 <_printf_float+0x31c>
 801638c:	e692      	b.n	80160b4 <_printf_float+0xb8>
 801638e:	002a      	movs	r2, r5
 8016390:	2301      	movs	r3, #1
 8016392:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016394:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016396:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8016398:	321a      	adds	r2, #26
 801639a:	47b0      	blx	r6
 801639c:	3001      	adds	r0, #1
 801639e:	d100      	bne.n	80163a2 <_printf_float+0x3a6>
 80163a0:	e688      	b.n	80160b4 <_printf_float+0xb8>
 80163a2:	3401      	adds	r4, #1
 80163a4:	e7bd      	b.n	8016322 <_printf_float+0x326>
 80163a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80163a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80163aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80163ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80163ae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80163b0:	47a0      	blx	r4
 80163b2:	3001      	adds	r0, #1
 80163b4:	d1c1      	bne.n	801633a <_printf_float+0x33e>
 80163b6:	e67d      	b.n	80160b4 <_printf_float+0xb8>
 80163b8:	19ba      	adds	r2, r7, r6
 80163ba:	0023      	movs	r3, r4
 80163bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80163be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80163c0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80163c2:	47b0      	blx	r6
 80163c4:	3001      	adds	r0, #1
 80163c6:	d1c2      	bne.n	801634e <_printf_float+0x352>
 80163c8:	e674      	b.n	80160b4 <_printf_float+0xb8>
 80163ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80163cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80163ce:	2b01      	cmp	r3, #1
 80163d0:	dc02      	bgt.n	80163d8 <_printf_float+0x3dc>
 80163d2:	2301      	movs	r3, #1
 80163d4:	421a      	tst	r2, r3
 80163d6:	d039      	beq.n	801644c <_printf_float+0x450>
 80163d8:	2301      	movs	r3, #1
 80163da:	003a      	movs	r2, r7
 80163dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80163de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80163e0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80163e2:	47b0      	blx	r6
 80163e4:	3001      	adds	r0, #1
 80163e6:	d100      	bne.n	80163ea <_printf_float+0x3ee>
 80163e8:	e664      	b.n	80160b4 <_printf_float+0xb8>
 80163ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80163ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80163ee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80163f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80163f2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80163f4:	47b0      	blx	r6
 80163f6:	3001      	adds	r0, #1
 80163f8:	d100      	bne.n	80163fc <_printf_float+0x400>
 80163fa:	e65b      	b.n	80160b4 <_printf_float+0xb8>
 80163fc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80163fe:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8016400:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016402:	2200      	movs	r2, #0
 8016404:	3b01      	subs	r3, #1
 8016406:	930c      	str	r3, [sp, #48]	@ 0x30
 8016408:	2300      	movs	r3, #0
 801640a:	f7ea f81f 	bl	800044c <__aeabi_dcmpeq>
 801640e:	2800      	cmp	r0, #0
 8016410:	d11a      	bne.n	8016448 <_printf_float+0x44c>
 8016412:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016414:	1c7a      	adds	r2, r7, #1
 8016416:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016418:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801641a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801641c:	47b0      	blx	r6
 801641e:	3001      	adds	r0, #1
 8016420:	d10e      	bne.n	8016440 <_printf_float+0x444>
 8016422:	e647      	b.n	80160b4 <_printf_float+0xb8>
 8016424:	002a      	movs	r2, r5
 8016426:	2301      	movs	r3, #1
 8016428:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801642a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801642c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801642e:	321a      	adds	r2, #26
 8016430:	47b8      	blx	r7
 8016432:	3001      	adds	r0, #1
 8016434:	d100      	bne.n	8016438 <_printf_float+0x43c>
 8016436:	e63d      	b.n	80160b4 <_printf_float+0xb8>
 8016438:	3601      	adds	r6, #1
 801643a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801643c:	429e      	cmp	r6, r3
 801643e:	dbf1      	blt.n	8016424 <_printf_float+0x428>
 8016440:	002a      	movs	r2, r5
 8016442:	0023      	movs	r3, r4
 8016444:	3250      	adds	r2, #80	@ 0x50
 8016446:	e6da      	b.n	80161fe <_printf_float+0x202>
 8016448:	2600      	movs	r6, #0
 801644a:	e7f6      	b.n	801643a <_printf_float+0x43e>
 801644c:	003a      	movs	r2, r7
 801644e:	e7e2      	b.n	8016416 <_printf_float+0x41a>
 8016450:	002a      	movs	r2, r5
 8016452:	2301      	movs	r3, #1
 8016454:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016456:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016458:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801645a:	3219      	adds	r2, #25
 801645c:	47b0      	blx	r6
 801645e:	3001      	adds	r0, #1
 8016460:	d100      	bne.n	8016464 <_printf_float+0x468>
 8016462:	e627      	b.n	80160b4 <_printf_float+0xb8>
 8016464:	3401      	adds	r4, #1
 8016466:	68eb      	ldr	r3, [r5, #12]
 8016468:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801646a:	1a9b      	subs	r3, r3, r2
 801646c:	42a3      	cmp	r3, r4
 801646e:	dcef      	bgt.n	8016450 <_printf_float+0x454>
 8016470:	e6f9      	b.n	8016266 <_printf_float+0x26a>
 8016472:	2400      	movs	r4, #0
 8016474:	e7f7      	b.n	8016466 <_printf_float+0x46a>
 8016476:	46c0      	nop			@ (mov r8, r8)

08016478 <_printf_common>:
 8016478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801647a:	0016      	movs	r6, r2
 801647c:	9301      	str	r3, [sp, #4]
 801647e:	688a      	ldr	r2, [r1, #8]
 8016480:	690b      	ldr	r3, [r1, #16]
 8016482:	000c      	movs	r4, r1
 8016484:	9000      	str	r0, [sp, #0]
 8016486:	4293      	cmp	r3, r2
 8016488:	da00      	bge.n	801648c <_printf_common+0x14>
 801648a:	0013      	movs	r3, r2
 801648c:	0022      	movs	r2, r4
 801648e:	6033      	str	r3, [r6, #0]
 8016490:	3243      	adds	r2, #67	@ 0x43
 8016492:	7812      	ldrb	r2, [r2, #0]
 8016494:	2a00      	cmp	r2, #0
 8016496:	d001      	beq.n	801649c <_printf_common+0x24>
 8016498:	3301      	adds	r3, #1
 801649a:	6033      	str	r3, [r6, #0]
 801649c:	6823      	ldr	r3, [r4, #0]
 801649e:	069b      	lsls	r3, r3, #26
 80164a0:	d502      	bpl.n	80164a8 <_printf_common+0x30>
 80164a2:	6833      	ldr	r3, [r6, #0]
 80164a4:	3302      	adds	r3, #2
 80164a6:	6033      	str	r3, [r6, #0]
 80164a8:	6822      	ldr	r2, [r4, #0]
 80164aa:	2306      	movs	r3, #6
 80164ac:	0015      	movs	r5, r2
 80164ae:	401d      	ands	r5, r3
 80164b0:	421a      	tst	r2, r3
 80164b2:	d027      	beq.n	8016504 <_printf_common+0x8c>
 80164b4:	0023      	movs	r3, r4
 80164b6:	3343      	adds	r3, #67	@ 0x43
 80164b8:	781b      	ldrb	r3, [r3, #0]
 80164ba:	1e5a      	subs	r2, r3, #1
 80164bc:	4193      	sbcs	r3, r2
 80164be:	6822      	ldr	r2, [r4, #0]
 80164c0:	0692      	lsls	r2, r2, #26
 80164c2:	d430      	bmi.n	8016526 <_printf_common+0xae>
 80164c4:	0022      	movs	r2, r4
 80164c6:	9901      	ldr	r1, [sp, #4]
 80164c8:	9800      	ldr	r0, [sp, #0]
 80164ca:	9d08      	ldr	r5, [sp, #32]
 80164cc:	3243      	adds	r2, #67	@ 0x43
 80164ce:	47a8      	blx	r5
 80164d0:	3001      	adds	r0, #1
 80164d2:	d025      	beq.n	8016520 <_printf_common+0xa8>
 80164d4:	2206      	movs	r2, #6
 80164d6:	6823      	ldr	r3, [r4, #0]
 80164d8:	2500      	movs	r5, #0
 80164da:	4013      	ands	r3, r2
 80164dc:	2b04      	cmp	r3, #4
 80164de:	d105      	bne.n	80164ec <_printf_common+0x74>
 80164e0:	6833      	ldr	r3, [r6, #0]
 80164e2:	68e5      	ldr	r5, [r4, #12]
 80164e4:	1aed      	subs	r5, r5, r3
 80164e6:	43eb      	mvns	r3, r5
 80164e8:	17db      	asrs	r3, r3, #31
 80164ea:	401d      	ands	r5, r3
 80164ec:	68a3      	ldr	r3, [r4, #8]
 80164ee:	6922      	ldr	r2, [r4, #16]
 80164f0:	4293      	cmp	r3, r2
 80164f2:	dd01      	ble.n	80164f8 <_printf_common+0x80>
 80164f4:	1a9b      	subs	r3, r3, r2
 80164f6:	18ed      	adds	r5, r5, r3
 80164f8:	2600      	movs	r6, #0
 80164fa:	42b5      	cmp	r5, r6
 80164fc:	d120      	bne.n	8016540 <_printf_common+0xc8>
 80164fe:	2000      	movs	r0, #0
 8016500:	e010      	b.n	8016524 <_printf_common+0xac>
 8016502:	3501      	adds	r5, #1
 8016504:	68e3      	ldr	r3, [r4, #12]
 8016506:	6832      	ldr	r2, [r6, #0]
 8016508:	1a9b      	subs	r3, r3, r2
 801650a:	42ab      	cmp	r3, r5
 801650c:	ddd2      	ble.n	80164b4 <_printf_common+0x3c>
 801650e:	0022      	movs	r2, r4
 8016510:	2301      	movs	r3, #1
 8016512:	9901      	ldr	r1, [sp, #4]
 8016514:	9800      	ldr	r0, [sp, #0]
 8016516:	9f08      	ldr	r7, [sp, #32]
 8016518:	3219      	adds	r2, #25
 801651a:	47b8      	blx	r7
 801651c:	3001      	adds	r0, #1
 801651e:	d1f0      	bne.n	8016502 <_printf_common+0x8a>
 8016520:	2001      	movs	r0, #1
 8016522:	4240      	negs	r0, r0
 8016524:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016526:	2030      	movs	r0, #48	@ 0x30
 8016528:	18e1      	adds	r1, r4, r3
 801652a:	3143      	adds	r1, #67	@ 0x43
 801652c:	7008      	strb	r0, [r1, #0]
 801652e:	0021      	movs	r1, r4
 8016530:	1c5a      	adds	r2, r3, #1
 8016532:	3145      	adds	r1, #69	@ 0x45
 8016534:	7809      	ldrb	r1, [r1, #0]
 8016536:	18a2      	adds	r2, r4, r2
 8016538:	3243      	adds	r2, #67	@ 0x43
 801653a:	3302      	adds	r3, #2
 801653c:	7011      	strb	r1, [r2, #0]
 801653e:	e7c1      	b.n	80164c4 <_printf_common+0x4c>
 8016540:	0022      	movs	r2, r4
 8016542:	2301      	movs	r3, #1
 8016544:	9901      	ldr	r1, [sp, #4]
 8016546:	9800      	ldr	r0, [sp, #0]
 8016548:	9f08      	ldr	r7, [sp, #32]
 801654a:	321a      	adds	r2, #26
 801654c:	47b8      	blx	r7
 801654e:	3001      	adds	r0, #1
 8016550:	d0e6      	beq.n	8016520 <_printf_common+0xa8>
 8016552:	3601      	adds	r6, #1
 8016554:	e7d1      	b.n	80164fa <_printf_common+0x82>
	...

08016558 <_printf_i>:
 8016558:	b5f0      	push	{r4, r5, r6, r7, lr}
 801655a:	b08b      	sub	sp, #44	@ 0x2c
 801655c:	9206      	str	r2, [sp, #24]
 801655e:	000a      	movs	r2, r1
 8016560:	3243      	adds	r2, #67	@ 0x43
 8016562:	9307      	str	r3, [sp, #28]
 8016564:	9005      	str	r0, [sp, #20]
 8016566:	9203      	str	r2, [sp, #12]
 8016568:	7e0a      	ldrb	r2, [r1, #24]
 801656a:	000c      	movs	r4, r1
 801656c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801656e:	2a78      	cmp	r2, #120	@ 0x78
 8016570:	d809      	bhi.n	8016586 <_printf_i+0x2e>
 8016572:	2a62      	cmp	r2, #98	@ 0x62
 8016574:	d80b      	bhi.n	801658e <_printf_i+0x36>
 8016576:	2a00      	cmp	r2, #0
 8016578:	d100      	bne.n	801657c <_printf_i+0x24>
 801657a:	e0bc      	b.n	80166f6 <_printf_i+0x19e>
 801657c:	497b      	ldr	r1, [pc, #492]	@ (801676c <_printf_i+0x214>)
 801657e:	9104      	str	r1, [sp, #16]
 8016580:	2a58      	cmp	r2, #88	@ 0x58
 8016582:	d100      	bne.n	8016586 <_printf_i+0x2e>
 8016584:	e090      	b.n	80166a8 <_printf_i+0x150>
 8016586:	0025      	movs	r5, r4
 8016588:	3542      	adds	r5, #66	@ 0x42
 801658a:	702a      	strb	r2, [r5, #0]
 801658c:	e022      	b.n	80165d4 <_printf_i+0x7c>
 801658e:	0010      	movs	r0, r2
 8016590:	3863      	subs	r0, #99	@ 0x63
 8016592:	2815      	cmp	r0, #21
 8016594:	d8f7      	bhi.n	8016586 <_printf_i+0x2e>
 8016596:	f7e9 fdc9 	bl	800012c <__gnu_thumb1_case_shi>
 801659a:	0016      	.short	0x0016
 801659c:	fff6001f 	.word	0xfff6001f
 80165a0:	fff6fff6 	.word	0xfff6fff6
 80165a4:	001ffff6 	.word	0x001ffff6
 80165a8:	fff6fff6 	.word	0xfff6fff6
 80165ac:	fff6fff6 	.word	0xfff6fff6
 80165b0:	003600a1 	.word	0x003600a1
 80165b4:	fff60080 	.word	0xfff60080
 80165b8:	00b2fff6 	.word	0x00b2fff6
 80165bc:	0036fff6 	.word	0x0036fff6
 80165c0:	fff6fff6 	.word	0xfff6fff6
 80165c4:	0084      	.short	0x0084
 80165c6:	0025      	movs	r5, r4
 80165c8:	681a      	ldr	r2, [r3, #0]
 80165ca:	3542      	adds	r5, #66	@ 0x42
 80165cc:	1d11      	adds	r1, r2, #4
 80165ce:	6019      	str	r1, [r3, #0]
 80165d0:	6813      	ldr	r3, [r2, #0]
 80165d2:	702b      	strb	r3, [r5, #0]
 80165d4:	2301      	movs	r3, #1
 80165d6:	e0a0      	b.n	801671a <_printf_i+0x1c2>
 80165d8:	6818      	ldr	r0, [r3, #0]
 80165da:	6809      	ldr	r1, [r1, #0]
 80165dc:	1d02      	adds	r2, r0, #4
 80165de:	060d      	lsls	r5, r1, #24
 80165e0:	d50b      	bpl.n	80165fa <_printf_i+0xa2>
 80165e2:	6806      	ldr	r6, [r0, #0]
 80165e4:	601a      	str	r2, [r3, #0]
 80165e6:	2e00      	cmp	r6, #0
 80165e8:	da03      	bge.n	80165f2 <_printf_i+0x9a>
 80165ea:	232d      	movs	r3, #45	@ 0x2d
 80165ec:	9a03      	ldr	r2, [sp, #12]
 80165ee:	4276      	negs	r6, r6
 80165f0:	7013      	strb	r3, [r2, #0]
 80165f2:	4b5e      	ldr	r3, [pc, #376]	@ (801676c <_printf_i+0x214>)
 80165f4:	270a      	movs	r7, #10
 80165f6:	9304      	str	r3, [sp, #16]
 80165f8:	e018      	b.n	801662c <_printf_i+0xd4>
 80165fa:	6806      	ldr	r6, [r0, #0]
 80165fc:	601a      	str	r2, [r3, #0]
 80165fe:	0649      	lsls	r1, r1, #25
 8016600:	d5f1      	bpl.n	80165e6 <_printf_i+0x8e>
 8016602:	b236      	sxth	r6, r6
 8016604:	e7ef      	b.n	80165e6 <_printf_i+0x8e>
 8016606:	6808      	ldr	r0, [r1, #0]
 8016608:	6819      	ldr	r1, [r3, #0]
 801660a:	c940      	ldmia	r1!, {r6}
 801660c:	0605      	lsls	r5, r0, #24
 801660e:	d402      	bmi.n	8016616 <_printf_i+0xbe>
 8016610:	0640      	lsls	r0, r0, #25
 8016612:	d500      	bpl.n	8016616 <_printf_i+0xbe>
 8016614:	b2b6      	uxth	r6, r6
 8016616:	6019      	str	r1, [r3, #0]
 8016618:	4b54      	ldr	r3, [pc, #336]	@ (801676c <_printf_i+0x214>)
 801661a:	270a      	movs	r7, #10
 801661c:	9304      	str	r3, [sp, #16]
 801661e:	2a6f      	cmp	r2, #111	@ 0x6f
 8016620:	d100      	bne.n	8016624 <_printf_i+0xcc>
 8016622:	3f02      	subs	r7, #2
 8016624:	0023      	movs	r3, r4
 8016626:	2200      	movs	r2, #0
 8016628:	3343      	adds	r3, #67	@ 0x43
 801662a:	701a      	strb	r2, [r3, #0]
 801662c:	6863      	ldr	r3, [r4, #4]
 801662e:	60a3      	str	r3, [r4, #8]
 8016630:	2b00      	cmp	r3, #0
 8016632:	db03      	blt.n	801663c <_printf_i+0xe4>
 8016634:	2104      	movs	r1, #4
 8016636:	6822      	ldr	r2, [r4, #0]
 8016638:	438a      	bics	r2, r1
 801663a:	6022      	str	r2, [r4, #0]
 801663c:	2e00      	cmp	r6, #0
 801663e:	d102      	bne.n	8016646 <_printf_i+0xee>
 8016640:	9d03      	ldr	r5, [sp, #12]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d00c      	beq.n	8016660 <_printf_i+0x108>
 8016646:	9d03      	ldr	r5, [sp, #12]
 8016648:	0030      	movs	r0, r6
 801664a:	0039      	movs	r1, r7
 801664c:	f7e9 fdfe 	bl	800024c <__aeabi_uidivmod>
 8016650:	9b04      	ldr	r3, [sp, #16]
 8016652:	3d01      	subs	r5, #1
 8016654:	5c5b      	ldrb	r3, [r3, r1]
 8016656:	702b      	strb	r3, [r5, #0]
 8016658:	0033      	movs	r3, r6
 801665a:	0006      	movs	r6, r0
 801665c:	429f      	cmp	r7, r3
 801665e:	d9f3      	bls.n	8016648 <_printf_i+0xf0>
 8016660:	2f08      	cmp	r7, #8
 8016662:	d109      	bne.n	8016678 <_printf_i+0x120>
 8016664:	6823      	ldr	r3, [r4, #0]
 8016666:	07db      	lsls	r3, r3, #31
 8016668:	d506      	bpl.n	8016678 <_printf_i+0x120>
 801666a:	6862      	ldr	r2, [r4, #4]
 801666c:	6923      	ldr	r3, [r4, #16]
 801666e:	429a      	cmp	r2, r3
 8016670:	dc02      	bgt.n	8016678 <_printf_i+0x120>
 8016672:	2330      	movs	r3, #48	@ 0x30
 8016674:	3d01      	subs	r5, #1
 8016676:	702b      	strb	r3, [r5, #0]
 8016678:	9b03      	ldr	r3, [sp, #12]
 801667a:	1b5b      	subs	r3, r3, r5
 801667c:	6123      	str	r3, [r4, #16]
 801667e:	9b07      	ldr	r3, [sp, #28]
 8016680:	0021      	movs	r1, r4
 8016682:	9300      	str	r3, [sp, #0]
 8016684:	9805      	ldr	r0, [sp, #20]
 8016686:	9b06      	ldr	r3, [sp, #24]
 8016688:	aa09      	add	r2, sp, #36	@ 0x24
 801668a:	f7ff fef5 	bl	8016478 <_printf_common>
 801668e:	3001      	adds	r0, #1
 8016690:	d148      	bne.n	8016724 <_printf_i+0x1cc>
 8016692:	2001      	movs	r0, #1
 8016694:	4240      	negs	r0, r0
 8016696:	b00b      	add	sp, #44	@ 0x2c
 8016698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801669a:	2220      	movs	r2, #32
 801669c:	6809      	ldr	r1, [r1, #0]
 801669e:	430a      	orrs	r2, r1
 80166a0:	6022      	str	r2, [r4, #0]
 80166a2:	2278      	movs	r2, #120	@ 0x78
 80166a4:	4932      	ldr	r1, [pc, #200]	@ (8016770 <_printf_i+0x218>)
 80166a6:	9104      	str	r1, [sp, #16]
 80166a8:	0021      	movs	r1, r4
 80166aa:	3145      	adds	r1, #69	@ 0x45
 80166ac:	700a      	strb	r2, [r1, #0]
 80166ae:	6819      	ldr	r1, [r3, #0]
 80166b0:	6822      	ldr	r2, [r4, #0]
 80166b2:	c940      	ldmia	r1!, {r6}
 80166b4:	0610      	lsls	r0, r2, #24
 80166b6:	d402      	bmi.n	80166be <_printf_i+0x166>
 80166b8:	0650      	lsls	r0, r2, #25
 80166ba:	d500      	bpl.n	80166be <_printf_i+0x166>
 80166bc:	b2b6      	uxth	r6, r6
 80166be:	6019      	str	r1, [r3, #0]
 80166c0:	07d3      	lsls	r3, r2, #31
 80166c2:	d502      	bpl.n	80166ca <_printf_i+0x172>
 80166c4:	2320      	movs	r3, #32
 80166c6:	4313      	orrs	r3, r2
 80166c8:	6023      	str	r3, [r4, #0]
 80166ca:	2e00      	cmp	r6, #0
 80166cc:	d001      	beq.n	80166d2 <_printf_i+0x17a>
 80166ce:	2710      	movs	r7, #16
 80166d0:	e7a8      	b.n	8016624 <_printf_i+0xcc>
 80166d2:	2220      	movs	r2, #32
 80166d4:	6823      	ldr	r3, [r4, #0]
 80166d6:	4393      	bics	r3, r2
 80166d8:	6023      	str	r3, [r4, #0]
 80166da:	e7f8      	b.n	80166ce <_printf_i+0x176>
 80166dc:	681a      	ldr	r2, [r3, #0]
 80166de:	680d      	ldr	r5, [r1, #0]
 80166e0:	1d10      	adds	r0, r2, #4
 80166e2:	6949      	ldr	r1, [r1, #20]
 80166e4:	6018      	str	r0, [r3, #0]
 80166e6:	6813      	ldr	r3, [r2, #0]
 80166e8:	062e      	lsls	r6, r5, #24
 80166ea:	d501      	bpl.n	80166f0 <_printf_i+0x198>
 80166ec:	6019      	str	r1, [r3, #0]
 80166ee:	e002      	b.n	80166f6 <_printf_i+0x19e>
 80166f0:	066d      	lsls	r5, r5, #25
 80166f2:	d5fb      	bpl.n	80166ec <_printf_i+0x194>
 80166f4:	8019      	strh	r1, [r3, #0]
 80166f6:	2300      	movs	r3, #0
 80166f8:	9d03      	ldr	r5, [sp, #12]
 80166fa:	6123      	str	r3, [r4, #16]
 80166fc:	e7bf      	b.n	801667e <_printf_i+0x126>
 80166fe:	681a      	ldr	r2, [r3, #0]
 8016700:	1d11      	adds	r1, r2, #4
 8016702:	6019      	str	r1, [r3, #0]
 8016704:	6815      	ldr	r5, [r2, #0]
 8016706:	2100      	movs	r1, #0
 8016708:	0028      	movs	r0, r5
 801670a:	6862      	ldr	r2, [r4, #4]
 801670c:	f000 fa5b 	bl	8016bc6 <memchr>
 8016710:	2800      	cmp	r0, #0
 8016712:	d001      	beq.n	8016718 <_printf_i+0x1c0>
 8016714:	1b40      	subs	r0, r0, r5
 8016716:	6060      	str	r0, [r4, #4]
 8016718:	6863      	ldr	r3, [r4, #4]
 801671a:	6123      	str	r3, [r4, #16]
 801671c:	2300      	movs	r3, #0
 801671e:	9a03      	ldr	r2, [sp, #12]
 8016720:	7013      	strb	r3, [r2, #0]
 8016722:	e7ac      	b.n	801667e <_printf_i+0x126>
 8016724:	002a      	movs	r2, r5
 8016726:	6923      	ldr	r3, [r4, #16]
 8016728:	9906      	ldr	r1, [sp, #24]
 801672a:	9805      	ldr	r0, [sp, #20]
 801672c:	9d07      	ldr	r5, [sp, #28]
 801672e:	47a8      	blx	r5
 8016730:	3001      	adds	r0, #1
 8016732:	d0ae      	beq.n	8016692 <_printf_i+0x13a>
 8016734:	6823      	ldr	r3, [r4, #0]
 8016736:	079b      	lsls	r3, r3, #30
 8016738:	d415      	bmi.n	8016766 <_printf_i+0x20e>
 801673a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801673c:	68e0      	ldr	r0, [r4, #12]
 801673e:	4298      	cmp	r0, r3
 8016740:	daa9      	bge.n	8016696 <_printf_i+0x13e>
 8016742:	0018      	movs	r0, r3
 8016744:	e7a7      	b.n	8016696 <_printf_i+0x13e>
 8016746:	0022      	movs	r2, r4
 8016748:	2301      	movs	r3, #1
 801674a:	9906      	ldr	r1, [sp, #24]
 801674c:	9805      	ldr	r0, [sp, #20]
 801674e:	9e07      	ldr	r6, [sp, #28]
 8016750:	3219      	adds	r2, #25
 8016752:	47b0      	blx	r6
 8016754:	3001      	adds	r0, #1
 8016756:	d09c      	beq.n	8016692 <_printf_i+0x13a>
 8016758:	3501      	adds	r5, #1
 801675a:	68e3      	ldr	r3, [r4, #12]
 801675c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801675e:	1a9b      	subs	r3, r3, r2
 8016760:	42ab      	cmp	r3, r5
 8016762:	dcf0      	bgt.n	8016746 <_printf_i+0x1ee>
 8016764:	e7e9      	b.n	801673a <_printf_i+0x1e2>
 8016766:	2500      	movs	r5, #0
 8016768:	e7f7      	b.n	801675a <_printf_i+0x202>
 801676a:	46c0      	nop			@ (mov r8, r8)
 801676c:	0801a57e 	.word	0x0801a57e
 8016770:	0801a58f 	.word	0x0801a58f

08016774 <std>:
 8016774:	2300      	movs	r3, #0
 8016776:	b510      	push	{r4, lr}
 8016778:	0004      	movs	r4, r0
 801677a:	6003      	str	r3, [r0, #0]
 801677c:	6043      	str	r3, [r0, #4]
 801677e:	6083      	str	r3, [r0, #8]
 8016780:	8181      	strh	r1, [r0, #12]
 8016782:	6643      	str	r3, [r0, #100]	@ 0x64
 8016784:	81c2      	strh	r2, [r0, #14]
 8016786:	6103      	str	r3, [r0, #16]
 8016788:	6143      	str	r3, [r0, #20]
 801678a:	6183      	str	r3, [r0, #24]
 801678c:	0019      	movs	r1, r3
 801678e:	2208      	movs	r2, #8
 8016790:	305c      	adds	r0, #92	@ 0x5c
 8016792:	f000 f967 	bl	8016a64 <memset>
 8016796:	4b0b      	ldr	r3, [pc, #44]	@ (80167c4 <std+0x50>)
 8016798:	6224      	str	r4, [r4, #32]
 801679a:	6263      	str	r3, [r4, #36]	@ 0x24
 801679c:	4b0a      	ldr	r3, [pc, #40]	@ (80167c8 <std+0x54>)
 801679e:	62a3      	str	r3, [r4, #40]	@ 0x28
 80167a0:	4b0a      	ldr	r3, [pc, #40]	@ (80167cc <std+0x58>)
 80167a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80167a4:	4b0a      	ldr	r3, [pc, #40]	@ (80167d0 <std+0x5c>)
 80167a6:	6323      	str	r3, [r4, #48]	@ 0x30
 80167a8:	4b0a      	ldr	r3, [pc, #40]	@ (80167d4 <std+0x60>)
 80167aa:	429c      	cmp	r4, r3
 80167ac:	d005      	beq.n	80167ba <std+0x46>
 80167ae:	4b0a      	ldr	r3, [pc, #40]	@ (80167d8 <std+0x64>)
 80167b0:	429c      	cmp	r4, r3
 80167b2:	d002      	beq.n	80167ba <std+0x46>
 80167b4:	4b09      	ldr	r3, [pc, #36]	@ (80167dc <std+0x68>)
 80167b6:	429c      	cmp	r4, r3
 80167b8:	d103      	bne.n	80167c2 <std+0x4e>
 80167ba:	0020      	movs	r0, r4
 80167bc:	3058      	adds	r0, #88	@ 0x58
 80167be:	f000 f9ff 	bl	8016bc0 <__retarget_lock_init_recursive>
 80167c2:	bd10      	pop	{r4, pc}
 80167c4:	0801695d 	.word	0x0801695d
 80167c8:	08016985 	.word	0x08016985
 80167cc:	080169bd 	.word	0x080169bd
 80167d0:	080169e9 	.word	0x080169e9
 80167d4:	200042a0 	.word	0x200042a0
 80167d8:	20004308 	.word	0x20004308
 80167dc:	20004370 	.word	0x20004370

080167e0 <stdio_exit_handler>:
 80167e0:	b510      	push	{r4, lr}
 80167e2:	4a03      	ldr	r2, [pc, #12]	@ (80167f0 <stdio_exit_handler+0x10>)
 80167e4:	4903      	ldr	r1, [pc, #12]	@ (80167f4 <stdio_exit_handler+0x14>)
 80167e6:	4804      	ldr	r0, [pc, #16]	@ (80167f8 <stdio_exit_handler+0x18>)
 80167e8:	f000 f86c 	bl	80168c4 <_fwalk_sglue>
 80167ec:	bd10      	pop	{r4, pc}
 80167ee:	46c0      	nop			@ (mov r8, r8)
 80167f0:	200002c8 	.word	0x200002c8
 80167f4:	08018899 	.word	0x08018899
 80167f8:	200002d8 	.word	0x200002d8

080167fc <cleanup_stdio>:
 80167fc:	6841      	ldr	r1, [r0, #4]
 80167fe:	4b0b      	ldr	r3, [pc, #44]	@ (801682c <cleanup_stdio+0x30>)
 8016800:	b510      	push	{r4, lr}
 8016802:	0004      	movs	r4, r0
 8016804:	4299      	cmp	r1, r3
 8016806:	d001      	beq.n	801680c <cleanup_stdio+0x10>
 8016808:	f002 f846 	bl	8018898 <_fflush_r>
 801680c:	68a1      	ldr	r1, [r4, #8]
 801680e:	4b08      	ldr	r3, [pc, #32]	@ (8016830 <cleanup_stdio+0x34>)
 8016810:	4299      	cmp	r1, r3
 8016812:	d002      	beq.n	801681a <cleanup_stdio+0x1e>
 8016814:	0020      	movs	r0, r4
 8016816:	f002 f83f 	bl	8018898 <_fflush_r>
 801681a:	68e1      	ldr	r1, [r4, #12]
 801681c:	4b05      	ldr	r3, [pc, #20]	@ (8016834 <cleanup_stdio+0x38>)
 801681e:	4299      	cmp	r1, r3
 8016820:	d002      	beq.n	8016828 <cleanup_stdio+0x2c>
 8016822:	0020      	movs	r0, r4
 8016824:	f002 f838 	bl	8018898 <_fflush_r>
 8016828:	bd10      	pop	{r4, pc}
 801682a:	46c0      	nop			@ (mov r8, r8)
 801682c:	200042a0 	.word	0x200042a0
 8016830:	20004308 	.word	0x20004308
 8016834:	20004370 	.word	0x20004370

08016838 <global_stdio_init.part.0>:
 8016838:	b510      	push	{r4, lr}
 801683a:	4b09      	ldr	r3, [pc, #36]	@ (8016860 <global_stdio_init.part.0+0x28>)
 801683c:	4a09      	ldr	r2, [pc, #36]	@ (8016864 <global_stdio_init.part.0+0x2c>)
 801683e:	2104      	movs	r1, #4
 8016840:	601a      	str	r2, [r3, #0]
 8016842:	4809      	ldr	r0, [pc, #36]	@ (8016868 <global_stdio_init.part.0+0x30>)
 8016844:	2200      	movs	r2, #0
 8016846:	f7ff ff95 	bl	8016774 <std>
 801684a:	2201      	movs	r2, #1
 801684c:	2109      	movs	r1, #9
 801684e:	4807      	ldr	r0, [pc, #28]	@ (801686c <global_stdio_init.part.0+0x34>)
 8016850:	f7ff ff90 	bl	8016774 <std>
 8016854:	2202      	movs	r2, #2
 8016856:	2112      	movs	r1, #18
 8016858:	4805      	ldr	r0, [pc, #20]	@ (8016870 <global_stdio_init.part.0+0x38>)
 801685a:	f7ff ff8b 	bl	8016774 <std>
 801685e:	bd10      	pop	{r4, pc}
 8016860:	200043d8 	.word	0x200043d8
 8016864:	080167e1 	.word	0x080167e1
 8016868:	200042a0 	.word	0x200042a0
 801686c:	20004308 	.word	0x20004308
 8016870:	20004370 	.word	0x20004370

08016874 <__sfp_lock_acquire>:
 8016874:	b510      	push	{r4, lr}
 8016876:	4802      	ldr	r0, [pc, #8]	@ (8016880 <__sfp_lock_acquire+0xc>)
 8016878:	f000 f9a3 	bl	8016bc2 <__retarget_lock_acquire_recursive>
 801687c:	bd10      	pop	{r4, pc}
 801687e:	46c0      	nop			@ (mov r8, r8)
 8016880:	200043e1 	.word	0x200043e1

08016884 <__sfp_lock_release>:
 8016884:	b510      	push	{r4, lr}
 8016886:	4802      	ldr	r0, [pc, #8]	@ (8016890 <__sfp_lock_release+0xc>)
 8016888:	f000 f99c 	bl	8016bc4 <__retarget_lock_release_recursive>
 801688c:	bd10      	pop	{r4, pc}
 801688e:	46c0      	nop			@ (mov r8, r8)
 8016890:	200043e1 	.word	0x200043e1

08016894 <__sinit>:
 8016894:	b510      	push	{r4, lr}
 8016896:	0004      	movs	r4, r0
 8016898:	f7ff ffec 	bl	8016874 <__sfp_lock_acquire>
 801689c:	6a23      	ldr	r3, [r4, #32]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d002      	beq.n	80168a8 <__sinit+0x14>
 80168a2:	f7ff ffef 	bl	8016884 <__sfp_lock_release>
 80168a6:	bd10      	pop	{r4, pc}
 80168a8:	4b04      	ldr	r3, [pc, #16]	@ (80168bc <__sinit+0x28>)
 80168aa:	6223      	str	r3, [r4, #32]
 80168ac:	4b04      	ldr	r3, [pc, #16]	@ (80168c0 <__sinit+0x2c>)
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d1f6      	bne.n	80168a2 <__sinit+0xe>
 80168b4:	f7ff ffc0 	bl	8016838 <global_stdio_init.part.0>
 80168b8:	e7f3      	b.n	80168a2 <__sinit+0xe>
 80168ba:	46c0      	nop			@ (mov r8, r8)
 80168bc:	080167fd 	.word	0x080167fd
 80168c0:	200043d8 	.word	0x200043d8

080168c4 <_fwalk_sglue>:
 80168c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80168c6:	0014      	movs	r4, r2
 80168c8:	2600      	movs	r6, #0
 80168ca:	9000      	str	r0, [sp, #0]
 80168cc:	9101      	str	r1, [sp, #4]
 80168ce:	68a5      	ldr	r5, [r4, #8]
 80168d0:	6867      	ldr	r7, [r4, #4]
 80168d2:	3f01      	subs	r7, #1
 80168d4:	d504      	bpl.n	80168e0 <_fwalk_sglue+0x1c>
 80168d6:	6824      	ldr	r4, [r4, #0]
 80168d8:	2c00      	cmp	r4, #0
 80168da:	d1f8      	bne.n	80168ce <_fwalk_sglue+0xa>
 80168dc:	0030      	movs	r0, r6
 80168de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80168e0:	89ab      	ldrh	r3, [r5, #12]
 80168e2:	2b01      	cmp	r3, #1
 80168e4:	d908      	bls.n	80168f8 <_fwalk_sglue+0x34>
 80168e6:	220e      	movs	r2, #14
 80168e8:	5eab      	ldrsh	r3, [r5, r2]
 80168ea:	3301      	adds	r3, #1
 80168ec:	d004      	beq.n	80168f8 <_fwalk_sglue+0x34>
 80168ee:	0029      	movs	r1, r5
 80168f0:	9800      	ldr	r0, [sp, #0]
 80168f2:	9b01      	ldr	r3, [sp, #4]
 80168f4:	4798      	blx	r3
 80168f6:	4306      	orrs	r6, r0
 80168f8:	3568      	adds	r5, #104	@ 0x68
 80168fa:	e7ea      	b.n	80168d2 <_fwalk_sglue+0xe>

080168fc <iprintf>:
 80168fc:	b40f      	push	{r0, r1, r2, r3}
 80168fe:	b507      	push	{r0, r1, r2, lr}
 8016900:	4905      	ldr	r1, [pc, #20]	@ (8016918 <iprintf+0x1c>)
 8016902:	ab04      	add	r3, sp, #16
 8016904:	6808      	ldr	r0, [r1, #0]
 8016906:	cb04      	ldmia	r3!, {r2}
 8016908:	6881      	ldr	r1, [r0, #8]
 801690a:	9301      	str	r3, [sp, #4]
 801690c:	f001 fe22 	bl	8018554 <_vfiprintf_r>
 8016910:	b003      	add	sp, #12
 8016912:	bc08      	pop	{r3}
 8016914:	b004      	add	sp, #16
 8016916:	4718      	bx	r3
 8016918:	200002d4 	.word	0x200002d4

0801691c <siprintf>:
 801691c:	b40e      	push	{r1, r2, r3}
 801691e:	b500      	push	{lr}
 8016920:	490b      	ldr	r1, [pc, #44]	@ (8016950 <siprintf+0x34>)
 8016922:	b09c      	sub	sp, #112	@ 0x70
 8016924:	ab1d      	add	r3, sp, #116	@ 0x74
 8016926:	9002      	str	r0, [sp, #8]
 8016928:	9006      	str	r0, [sp, #24]
 801692a:	9107      	str	r1, [sp, #28]
 801692c:	9104      	str	r1, [sp, #16]
 801692e:	4809      	ldr	r0, [pc, #36]	@ (8016954 <siprintf+0x38>)
 8016930:	4909      	ldr	r1, [pc, #36]	@ (8016958 <siprintf+0x3c>)
 8016932:	cb04      	ldmia	r3!, {r2}
 8016934:	9105      	str	r1, [sp, #20]
 8016936:	6800      	ldr	r0, [r0, #0]
 8016938:	a902      	add	r1, sp, #8
 801693a:	9301      	str	r3, [sp, #4]
 801693c:	f001 fce4 	bl	8018308 <_svfiprintf_r>
 8016940:	2200      	movs	r2, #0
 8016942:	9b02      	ldr	r3, [sp, #8]
 8016944:	701a      	strb	r2, [r3, #0]
 8016946:	b01c      	add	sp, #112	@ 0x70
 8016948:	bc08      	pop	{r3}
 801694a:	b003      	add	sp, #12
 801694c:	4718      	bx	r3
 801694e:	46c0      	nop			@ (mov r8, r8)
 8016950:	7fffffff 	.word	0x7fffffff
 8016954:	200002d4 	.word	0x200002d4
 8016958:	ffff0208 	.word	0xffff0208

0801695c <__sread>:
 801695c:	b570      	push	{r4, r5, r6, lr}
 801695e:	000c      	movs	r4, r1
 8016960:	250e      	movs	r5, #14
 8016962:	5f49      	ldrsh	r1, [r1, r5]
 8016964:	f000 f8da 	bl	8016b1c <_read_r>
 8016968:	2800      	cmp	r0, #0
 801696a:	db03      	blt.n	8016974 <__sread+0x18>
 801696c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801696e:	181b      	adds	r3, r3, r0
 8016970:	6563      	str	r3, [r4, #84]	@ 0x54
 8016972:	bd70      	pop	{r4, r5, r6, pc}
 8016974:	89a3      	ldrh	r3, [r4, #12]
 8016976:	4a02      	ldr	r2, [pc, #8]	@ (8016980 <__sread+0x24>)
 8016978:	4013      	ands	r3, r2
 801697a:	81a3      	strh	r3, [r4, #12]
 801697c:	e7f9      	b.n	8016972 <__sread+0x16>
 801697e:	46c0      	nop			@ (mov r8, r8)
 8016980:	ffffefff 	.word	0xffffefff

08016984 <__swrite>:
 8016984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016986:	001f      	movs	r7, r3
 8016988:	898b      	ldrh	r3, [r1, #12]
 801698a:	0005      	movs	r5, r0
 801698c:	000c      	movs	r4, r1
 801698e:	0016      	movs	r6, r2
 8016990:	05db      	lsls	r3, r3, #23
 8016992:	d505      	bpl.n	80169a0 <__swrite+0x1c>
 8016994:	230e      	movs	r3, #14
 8016996:	5ec9      	ldrsh	r1, [r1, r3]
 8016998:	2200      	movs	r2, #0
 801699a:	2302      	movs	r3, #2
 801699c:	f000 f8aa 	bl	8016af4 <_lseek_r>
 80169a0:	89a3      	ldrh	r3, [r4, #12]
 80169a2:	4a05      	ldr	r2, [pc, #20]	@ (80169b8 <__swrite+0x34>)
 80169a4:	0028      	movs	r0, r5
 80169a6:	4013      	ands	r3, r2
 80169a8:	81a3      	strh	r3, [r4, #12]
 80169aa:	0032      	movs	r2, r6
 80169ac:	230e      	movs	r3, #14
 80169ae:	5ee1      	ldrsh	r1, [r4, r3]
 80169b0:	003b      	movs	r3, r7
 80169b2:	f000 f8c7 	bl	8016b44 <_write_r>
 80169b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169b8:	ffffefff 	.word	0xffffefff

080169bc <__sseek>:
 80169bc:	b570      	push	{r4, r5, r6, lr}
 80169be:	000c      	movs	r4, r1
 80169c0:	250e      	movs	r5, #14
 80169c2:	5f49      	ldrsh	r1, [r1, r5]
 80169c4:	f000 f896 	bl	8016af4 <_lseek_r>
 80169c8:	89a3      	ldrh	r3, [r4, #12]
 80169ca:	1c42      	adds	r2, r0, #1
 80169cc:	d103      	bne.n	80169d6 <__sseek+0x1a>
 80169ce:	4a05      	ldr	r2, [pc, #20]	@ (80169e4 <__sseek+0x28>)
 80169d0:	4013      	ands	r3, r2
 80169d2:	81a3      	strh	r3, [r4, #12]
 80169d4:	bd70      	pop	{r4, r5, r6, pc}
 80169d6:	2280      	movs	r2, #128	@ 0x80
 80169d8:	0152      	lsls	r2, r2, #5
 80169da:	4313      	orrs	r3, r2
 80169dc:	81a3      	strh	r3, [r4, #12]
 80169de:	6560      	str	r0, [r4, #84]	@ 0x54
 80169e0:	e7f8      	b.n	80169d4 <__sseek+0x18>
 80169e2:	46c0      	nop			@ (mov r8, r8)
 80169e4:	ffffefff 	.word	0xffffefff

080169e8 <__sclose>:
 80169e8:	b510      	push	{r4, lr}
 80169ea:	230e      	movs	r3, #14
 80169ec:	5ec9      	ldrsh	r1, [r1, r3]
 80169ee:	f000 f86f 	bl	8016ad0 <_close_r>
 80169f2:	bd10      	pop	{r4, pc}

080169f4 <_vsniprintf_r>:
 80169f4:	b530      	push	{r4, r5, lr}
 80169f6:	0014      	movs	r4, r2
 80169f8:	0005      	movs	r5, r0
 80169fa:	001a      	movs	r2, r3
 80169fc:	b09b      	sub	sp, #108	@ 0x6c
 80169fe:	2c00      	cmp	r4, #0
 8016a00:	da05      	bge.n	8016a0e <_vsniprintf_r+0x1a>
 8016a02:	238b      	movs	r3, #139	@ 0x8b
 8016a04:	6003      	str	r3, [r0, #0]
 8016a06:	2001      	movs	r0, #1
 8016a08:	4240      	negs	r0, r0
 8016a0a:	b01b      	add	sp, #108	@ 0x6c
 8016a0c:	bd30      	pop	{r4, r5, pc}
 8016a0e:	2382      	movs	r3, #130	@ 0x82
 8016a10:	4668      	mov	r0, sp
 8016a12:	009b      	lsls	r3, r3, #2
 8016a14:	8183      	strh	r3, [r0, #12]
 8016a16:	2300      	movs	r3, #0
 8016a18:	9100      	str	r1, [sp, #0]
 8016a1a:	9104      	str	r1, [sp, #16]
 8016a1c:	429c      	cmp	r4, r3
 8016a1e:	d000      	beq.n	8016a22 <_vsniprintf_r+0x2e>
 8016a20:	1e63      	subs	r3, r4, #1
 8016a22:	9302      	str	r3, [sp, #8]
 8016a24:	9305      	str	r3, [sp, #20]
 8016a26:	2301      	movs	r3, #1
 8016a28:	4669      	mov	r1, sp
 8016a2a:	425b      	negs	r3, r3
 8016a2c:	81cb      	strh	r3, [r1, #14]
 8016a2e:	0028      	movs	r0, r5
 8016a30:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016a32:	f001 fc69 	bl	8018308 <_svfiprintf_r>
 8016a36:	1c43      	adds	r3, r0, #1
 8016a38:	da01      	bge.n	8016a3e <_vsniprintf_r+0x4a>
 8016a3a:	238b      	movs	r3, #139	@ 0x8b
 8016a3c:	602b      	str	r3, [r5, #0]
 8016a3e:	2c00      	cmp	r4, #0
 8016a40:	d0e3      	beq.n	8016a0a <_vsniprintf_r+0x16>
 8016a42:	2200      	movs	r2, #0
 8016a44:	9b00      	ldr	r3, [sp, #0]
 8016a46:	701a      	strb	r2, [r3, #0]
 8016a48:	e7df      	b.n	8016a0a <_vsniprintf_r+0x16>
	...

08016a4c <vsniprintf>:
 8016a4c:	b513      	push	{r0, r1, r4, lr}
 8016a4e:	4c04      	ldr	r4, [pc, #16]	@ (8016a60 <vsniprintf+0x14>)
 8016a50:	9300      	str	r3, [sp, #0]
 8016a52:	0013      	movs	r3, r2
 8016a54:	000a      	movs	r2, r1
 8016a56:	0001      	movs	r1, r0
 8016a58:	6820      	ldr	r0, [r4, #0]
 8016a5a:	f7ff ffcb 	bl	80169f4 <_vsniprintf_r>
 8016a5e:	bd16      	pop	{r1, r2, r4, pc}
 8016a60:	200002d4 	.word	0x200002d4

08016a64 <memset>:
 8016a64:	0003      	movs	r3, r0
 8016a66:	1882      	adds	r2, r0, r2
 8016a68:	4293      	cmp	r3, r2
 8016a6a:	d100      	bne.n	8016a6e <memset+0xa>
 8016a6c:	4770      	bx	lr
 8016a6e:	7019      	strb	r1, [r3, #0]
 8016a70:	3301      	adds	r3, #1
 8016a72:	e7f9      	b.n	8016a68 <memset+0x4>

08016a74 <strncpy>:
 8016a74:	0003      	movs	r3, r0
 8016a76:	b530      	push	{r4, r5, lr}
 8016a78:	001d      	movs	r5, r3
 8016a7a:	2a00      	cmp	r2, #0
 8016a7c:	d006      	beq.n	8016a8c <strncpy+0x18>
 8016a7e:	780c      	ldrb	r4, [r1, #0]
 8016a80:	3a01      	subs	r2, #1
 8016a82:	3301      	adds	r3, #1
 8016a84:	702c      	strb	r4, [r5, #0]
 8016a86:	3101      	adds	r1, #1
 8016a88:	2c00      	cmp	r4, #0
 8016a8a:	d1f5      	bne.n	8016a78 <strncpy+0x4>
 8016a8c:	2100      	movs	r1, #0
 8016a8e:	189a      	adds	r2, r3, r2
 8016a90:	4293      	cmp	r3, r2
 8016a92:	d100      	bne.n	8016a96 <strncpy+0x22>
 8016a94:	bd30      	pop	{r4, r5, pc}
 8016a96:	7019      	strb	r1, [r3, #0]
 8016a98:	3301      	adds	r3, #1
 8016a9a:	e7f9      	b.n	8016a90 <strncpy+0x1c>

08016a9c <strstr>:
 8016a9c:	780a      	ldrb	r2, [r1, #0]
 8016a9e:	b530      	push	{r4, r5, lr}
 8016aa0:	2a00      	cmp	r2, #0
 8016aa2:	d10c      	bne.n	8016abe <strstr+0x22>
 8016aa4:	bd30      	pop	{r4, r5, pc}
 8016aa6:	429a      	cmp	r2, r3
 8016aa8:	d108      	bne.n	8016abc <strstr+0x20>
 8016aaa:	2301      	movs	r3, #1
 8016aac:	5ccc      	ldrb	r4, [r1, r3]
 8016aae:	2c00      	cmp	r4, #0
 8016ab0:	d0f8      	beq.n	8016aa4 <strstr+0x8>
 8016ab2:	5cc5      	ldrb	r5, [r0, r3]
 8016ab4:	42a5      	cmp	r5, r4
 8016ab6:	d101      	bne.n	8016abc <strstr+0x20>
 8016ab8:	3301      	adds	r3, #1
 8016aba:	e7f7      	b.n	8016aac <strstr+0x10>
 8016abc:	3001      	adds	r0, #1
 8016abe:	7803      	ldrb	r3, [r0, #0]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d1f0      	bne.n	8016aa6 <strstr+0xa>
 8016ac4:	0018      	movs	r0, r3
 8016ac6:	e7ed      	b.n	8016aa4 <strstr+0x8>

08016ac8 <_localeconv_r>:
 8016ac8:	4800      	ldr	r0, [pc, #0]	@ (8016acc <_localeconv_r+0x4>)
 8016aca:	4770      	bx	lr
 8016acc:	20000414 	.word	0x20000414

08016ad0 <_close_r>:
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	b570      	push	{r4, r5, r6, lr}
 8016ad4:	4d06      	ldr	r5, [pc, #24]	@ (8016af0 <_close_r+0x20>)
 8016ad6:	0004      	movs	r4, r0
 8016ad8:	0008      	movs	r0, r1
 8016ada:	602b      	str	r3, [r5, #0]
 8016adc:	f7f1 fc64 	bl	80083a8 <_close>
 8016ae0:	1c43      	adds	r3, r0, #1
 8016ae2:	d103      	bne.n	8016aec <_close_r+0x1c>
 8016ae4:	682b      	ldr	r3, [r5, #0]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d000      	beq.n	8016aec <_close_r+0x1c>
 8016aea:	6023      	str	r3, [r4, #0]
 8016aec:	bd70      	pop	{r4, r5, r6, pc}
 8016aee:	46c0      	nop			@ (mov r8, r8)
 8016af0:	200043dc 	.word	0x200043dc

08016af4 <_lseek_r>:
 8016af4:	b570      	push	{r4, r5, r6, lr}
 8016af6:	0004      	movs	r4, r0
 8016af8:	0008      	movs	r0, r1
 8016afa:	0011      	movs	r1, r2
 8016afc:	001a      	movs	r2, r3
 8016afe:	2300      	movs	r3, #0
 8016b00:	4d05      	ldr	r5, [pc, #20]	@ (8016b18 <_lseek_r+0x24>)
 8016b02:	602b      	str	r3, [r5, #0]
 8016b04:	f7f1 fc71 	bl	80083ea <_lseek>
 8016b08:	1c43      	adds	r3, r0, #1
 8016b0a:	d103      	bne.n	8016b14 <_lseek_r+0x20>
 8016b0c:	682b      	ldr	r3, [r5, #0]
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d000      	beq.n	8016b14 <_lseek_r+0x20>
 8016b12:	6023      	str	r3, [r4, #0]
 8016b14:	bd70      	pop	{r4, r5, r6, pc}
 8016b16:	46c0      	nop			@ (mov r8, r8)
 8016b18:	200043dc 	.word	0x200043dc

08016b1c <_read_r>:
 8016b1c:	b570      	push	{r4, r5, r6, lr}
 8016b1e:	0004      	movs	r4, r0
 8016b20:	0008      	movs	r0, r1
 8016b22:	0011      	movs	r1, r2
 8016b24:	001a      	movs	r2, r3
 8016b26:	2300      	movs	r3, #0
 8016b28:	4d05      	ldr	r5, [pc, #20]	@ (8016b40 <_read_r+0x24>)
 8016b2a:	602b      	str	r3, [r5, #0]
 8016b2c:	f7f1 fc1f 	bl	800836e <_read>
 8016b30:	1c43      	adds	r3, r0, #1
 8016b32:	d103      	bne.n	8016b3c <_read_r+0x20>
 8016b34:	682b      	ldr	r3, [r5, #0]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d000      	beq.n	8016b3c <_read_r+0x20>
 8016b3a:	6023      	str	r3, [r4, #0]
 8016b3c:	bd70      	pop	{r4, r5, r6, pc}
 8016b3e:	46c0      	nop			@ (mov r8, r8)
 8016b40:	200043dc 	.word	0x200043dc

08016b44 <_write_r>:
 8016b44:	b570      	push	{r4, r5, r6, lr}
 8016b46:	0004      	movs	r4, r0
 8016b48:	0008      	movs	r0, r1
 8016b4a:	0011      	movs	r1, r2
 8016b4c:	001a      	movs	r2, r3
 8016b4e:	2300      	movs	r3, #0
 8016b50:	4d05      	ldr	r5, [pc, #20]	@ (8016b68 <_write_r+0x24>)
 8016b52:	602b      	str	r3, [r5, #0]
 8016b54:	f7f2 f82e 	bl	8008bb4 <_write>
 8016b58:	1c43      	adds	r3, r0, #1
 8016b5a:	d103      	bne.n	8016b64 <_write_r+0x20>
 8016b5c:	682b      	ldr	r3, [r5, #0]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d000      	beq.n	8016b64 <_write_r+0x20>
 8016b62:	6023      	str	r3, [r4, #0]
 8016b64:	bd70      	pop	{r4, r5, r6, pc}
 8016b66:	46c0      	nop			@ (mov r8, r8)
 8016b68:	200043dc 	.word	0x200043dc

08016b6c <__errno>:
 8016b6c:	4b01      	ldr	r3, [pc, #4]	@ (8016b74 <__errno+0x8>)
 8016b6e:	6818      	ldr	r0, [r3, #0]
 8016b70:	4770      	bx	lr
 8016b72:	46c0      	nop			@ (mov r8, r8)
 8016b74:	200002d4 	.word	0x200002d4

08016b78 <__libc_init_array>:
 8016b78:	b570      	push	{r4, r5, r6, lr}
 8016b7a:	2600      	movs	r6, #0
 8016b7c:	4c0c      	ldr	r4, [pc, #48]	@ (8016bb0 <__libc_init_array+0x38>)
 8016b7e:	4d0d      	ldr	r5, [pc, #52]	@ (8016bb4 <__libc_init_array+0x3c>)
 8016b80:	1b64      	subs	r4, r4, r5
 8016b82:	10a4      	asrs	r4, r4, #2
 8016b84:	42a6      	cmp	r6, r4
 8016b86:	d109      	bne.n	8016b9c <__libc_init_array+0x24>
 8016b88:	2600      	movs	r6, #0
 8016b8a:	f002 fe57 	bl	801983c <_init>
 8016b8e:	4c0a      	ldr	r4, [pc, #40]	@ (8016bb8 <__libc_init_array+0x40>)
 8016b90:	4d0a      	ldr	r5, [pc, #40]	@ (8016bbc <__libc_init_array+0x44>)
 8016b92:	1b64      	subs	r4, r4, r5
 8016b94:	10a4      	asrs	r4, r4, #2
 8016b96:	42a6      	cmp	r6, r4
 8016b98:	d105      	bne.n	8016ba6 <__libc_init_array+0x2e>
 8016b9a:	bd70      	pop	{r4, r5, r6, pc}
 8016b9c:	00b3      	lsls	r3, r6, #2
 8016b9e:	58eb      	ldr	r3, [r5, r3]
 8016ba0:	4798      	blx	r3
 8016ba2:	3601      	adds	r6, #1
 8016ba4:	e7ee      	b.n	8016b84 <__libc_init_array+0xc>
 8016ba6:	00b3      	lsls	r3, r6, #2
 8016ba8:	58eb      	ldr	r3, [r5, r3]
 8016baa:	4798      	blx	r3
 8016bac:	3601      	adds	r6, #1
 8016bae:	e7f2      	b.n	8016b96 <__libc_init_array+0x1e>
 8016bb0:	0801a900 	.word	0x0801a900
 8016bb4:	0801a900 	.word	0x0801a900
 8016bb8:	0801a904 	.word	0x0801a904
 8016bbc:	0801a900 	.word	0x0801a900

08016bc0 <__retarget_lock_init_recursive>:
 8016bc0:	4770      	bx	lr

08016bc2 <__retarget_lock_acquire_recursive>:
 8016bc2:	4770      	bx	lr

08016bc4 <__retarget_lock_release_recursive>:
 8016bc4:	4770      	bx	lr

08016bc6 <memchr>:
 8016bc6:	b2c9      	uxtb	r1, r1
 8016bc8:	1882      	adds	r2, r0, r2
 8016bca:	4290      	cmp	r0, r2
 8016bcc:	d101      	bne.n	8016bd2 <memchr+0xc>
 8016bce:	2000      	movs	r0, #0
 8016bd0:	4770      	bx	lr
 8016bd2:	7803      	ldrb	r3, [r0, #0]
 8016bd4:	428b      	cmp	r3, r1
 8016bd6:	d0fb      	beq.n	8016bd0 <memchr+0xa>
 8016bd8:	3001      	adds	r0, #1
 8016bda:	e7f6      	b.n	8016bca <memchr+0x4>

08016bdc <memcpy>:
 8016bdc:	2300      	movs	r3, #0
 8016bde:	b510      	push	{r4, lr}
 8016be0:	429a      	cmp	r2, r3
 8016be2:	d100      	bne.n	8016be6 <memcpy+0xa>
 8016be4:	bd10      	pop	{r4, pc}
 8016be6:	5ccc      	ldrb	r4, [r1, r3]
 8016be8:	54c4      	strb	r4, [r0, r3]
 8016bea:	3301      	adds	r3, #1
 8016bec:	e7f8      	b.n	8016be0 <memcpy+0x4>

08016bee <quorem>:
 8016bee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bf0:	6902      	ldr	r2, [r0, #16]
 8016bf2:	690f      	ldr	r7, [r1, #16]
 8016bf4:	b087      	sub	sp, #28
 8016bf6:	0006      	movs	r6, r0
 8016bf8:	000b      	movs	r3, r1
 8016bfa:	2000      	movs	r0, #0
 8016bfc:	9102      	str	r1, [sp, #8]
 8016bfe:	42ba      	cmp	r2, r7
 8016c00:	db6d      	blt.n	8016cde <quorem+0xf0>
 8016c02:	3f01      	subs	r7, #1
 8016c04:	00bc      	lsls	r4, r7, #2
 8016c06:	3314      	adds	r3, #20
 8016c08:	9305      	str	r3, [sp, #20]
 8016c0a:	191b      	adds	r3, r3, r4
 8016c0c:	9303      	str	r3, [sp, #12]
 8016c0e:	0033      	movs	r3, r6
 8016c10:	3314      	adds	r3, #20
 8016c12:	191c      	adds	r4, r3, r4
 8016c14:	9301      	str	r3, [sp, #4]
 8016c16:	6823      	ldr	r3, [r4, #0]
 8016c18:	9304      	str	r3, [sp, #16]
 8016c1a:	9b03      	ldr	r3, [sp, #12]
 8016c1c:	9804      	ldr	r0, [sp, #16]
 8016c1e:	681d      	ldr	r5, [r3, #0]
 8016c20:	3501      	adds	r5, #1
 8016c22:	0029      	movs	r1, r5
 8016c24:	f7e9 fa8c 	bl	8000140 <__udivsi3>
 8016c28:	9b04      	ldr	r3, [sp, #16]
 8016c2a:	9000      	str	r0, [sp, #0]
 8016c2c:	42ab      	cmp	r3, r5
 8016c2e:	d32b      	bcc.n	8016c88 <quorem+0x9a>
 8016c30:	9b05      	ldr	r3, [sp, #20]
 8016c32:	9d01      	ldr	r5, [sp, #4]
 8016c34:	469c      	mov	ip, r3
 8016c36:	2300      	movs	r3, #0
 8016c38:	9305      	str	r3, [sp, #20]
 8016c3a:	9304      	str	r3, [sp, #16]
 8016c3c:	4662      	mov	r2, ip
 8016c3e:	ca08      	ldmia	r2!, {r3}
 8016c40:	6828      	ldr	r0, [r5, #0]
 8016c42:	4694      	mov	ip, r2
 8016c44:	9a00      	ldr	r2, [sp, #0]
 8016c46:	b299      	uxth	r1, r3
 8016c48:	4351      	muls	r1, r2
 8016c4a:	9a05      	ldr	r2, [sp, #20]
 8016c4c:	0c1b      	lsrs	r3, r3, #16
 8016c4e:	1889      	adds	r1, r1, r2
 8016c50:	9a00      	ldr	r2, [sp, #0]
 8016c52:	4353      	muls	r3, r2
 8016c54:	0c0a      	lsrs	r2, r1, #16
 8016c56:	189b      	adds	r3, r3, r2
 8016c58:	0c1a      	lsrs	r2, r3, #16
 8016c5a:	b289      	uxth	r1, r1
 8016c5c:	9205      	str	r2, [sp, #20]
 8016c5e:	b282      	uxth	r2, r0
 8016c60:	1a52      	subs	r2, r2, r1
 8016c62:	9904      	ldr	r1, [sp, #16]
 8016c64:	0c00      	lsrs	r0, r0, #16
 8016c66:	1852      	adds	r2, r2, r1
 8016c68:	b29b      	uxth	r3, r3
 8016c6a:	1411      	asrs	r1, r2, #16
 8016c6c:	1ac3      	subs	r3, r0, r3
 8016c6e:	185b      	adds	r3, r3, r1
 8016c70:	1419      	asrs	r1, r3, #16
 8016c72:	b292      	uxth	r2, r2
 8016c74:	041b      	lsls	r3, r3, #16
 8016c76:	431a      	orrs	r2, r3
 8016c78:	9b03      	ldr	r3, [sp, #12]
 8016c7a:	9104      	str	r1, [sp, #16]
 8016c7c:	c504      	stmia	r5!, {r2}
 8016c7e:	4563      	cmp	r3, ip
 8016c80:	d2dc      	bcs.n	8016c3c <quorem+0x4e>
 8016c82:	6823      	ldr	r3, [r4, #0]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d030      	beq.n	8016cea <quorem+0xfc>
 8016c88:	0030      	movs	r0, r6
 8016c8a:	9902      	ldr	r1, [sp, #8]
 8016c8c:	f001 f9c6 	bl	801801c <__mcmp>
 8016c90:	2800      	cmp	r0, #0
 8016c92:	db23      	blt.n	8016cdc <quorem+0xee>
 8016c94:	0034      	movs	r4, r6
 8016c96:	2500      	movs	r5, #0
 8016c98:	9902      	ldr	r1, [sp, #8]
 8016c9a:	3414      	adds	r4, #20
 8016c9c:	3114      	adds	r1, #20
 8016c9e:	6823      	ldr	r3, [r4, #0]
 8016ca0:	c901      	ldmia	r1!, {r0}
 8016ca2:	9302      	str	r3, [sp, #8]
 8016ca4:	466b      	mov	r3, sp
 8016ca6:	891b      	ldrh	r3, [r3, #8]
 8016ca8:	b282      	uxth	r2, r0
 8016caa:	1a9a      	subs	r2, r3, r2
 8016cac:	9b02      	ldr	r3, [sp, #8]
 8016cae:	1952      	adds	r2, r2, r5
 8016cb0:	0c00      	lsrs	r0, r0, #16
 8016cb2:	0c1b      	lsrs	r3, r3, #16
 8016cb4:	1a1b      	subs	r3, r3, r0
 8016cb6:	1410      	asrs	r0, r2, #16
 8016cb8:	181b      	adds	r3, r3, r0
 8016cba:	141d      	asrs	r5, r3, #16
 8016cbc:	b292      	uxth	r2, r2
 8016cbe:	041b      	lsls	r3, r3, #16
 8016cc0:	431a      	orrs	r2, r3
 8016cc2:	9b03      	ldr	r3, [sp, #12]
 8016cc4:	c404      	stmia	r4!, {r2}
 8016cc6:	428b      	cmp	r3, r1
 8016cc8:	d2e9      	bcs.n	8016c9e <quorem+0xb0>
 8016cca:	9a01      	ldr	r2, [sp, #4]
 8016ccc:	00bb      	lsls	r3, r7, #2
 8016cce:	18d3      	adds	r3, r2, r3
 8016cd0:	681a      	ldr	r2, [r3, #0]
 8016cd2:	2a00      	cmp	r2, #0
 8016cd4:	d013      	beq.n	8016cfe <quorem+0x110>
 8016cd6:	9b00      	ldr	r3, [sp, #0]
 8016cd8:	3301      	adds	r3, #1
 8016cda:	9300      	str	r3, [sp, #0]
 8016cdc:	9800      	ldr	r0, [sp, #0]
 8016cde:	b007      	add	sp, #28
 8016ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ce2:	6823      	ldr	r3, [r4, #0]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d104      	bne.n	8016cf2 <quorem+0x104>
 8016ce8:	3f01      	subs	r7, #1
 8016cea:	9b01      	ldr	r3, [sp, #4]
 8016cec:	3c04      	subs	r4, #4
 8016cee:	42a3      	cmp	r3, r4
 8016cf0:	d3f7      	bcc.n	8016ce2 <quorem+0xf4>
 8016cf2:	6137      	str	r7, [r6, #16]
 8016cf4:	e7c8      	b.n	8016c88 <quorem+0x9a>
 8016cf6:	681a      	ldr	r2, [r3, #0]
 8016cf8:	2a00      	cmp	r2, #0
 8016cfa:	d104      	bne.n	8016d06 <quorem+0x118>
 8016cfc:	3f01      	subs	r7, #1
 8016cfe:	9a01      	ldr	r2, [sp, #4]
 8016d00:	3b04      	subs	r3, #4
 8016d02:	429a      	cmp	r2, r3
 8016d04:	d3f7      	bcc.n	8016cf6 <quorem+0x108>
 8016d06:	6137      	str	r7, [r6, #16]
 8016d08:	e7e5      	b.n	8016cd6 <quorem+0xe8>
	...

08016d0c <_dtoa_r>:
 8016d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d0e:	0014      	movs	r4, r2
 8016d10:	001d      	movs	r5, r3
 8016d12:	69c6      	ldr	r6, [r0, #28]
 8016d14:	b09d      	sub	sp, #116	@ 0x74
 8016d16:	940a      	str	r4, [sp, #40]	@ 0x28
 8016d18:	950b      	str	r5, [sp, #44]	@ 0x2c
 8016d1a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8016d1c:	9003      	str	r0, [sp, #12]
 8016d1e:	2e00      	cmp	r6, #0
 8016d20:	d10f      	bne.n	8016d42 <_dtoa_r+0x36>
 8016d22:	2010      	movs	r0, #16
 8016d24:	f000 fe30 	bl	8017988 <malloc>
 8016d28:	9b03      	ldr	r3, [sp, #12]
 8016d2a:	1e02      	subs	r2, r0, #0
 8016d2c:	61d8      	str	r0, [r3, #28]
 8016d2e:	d104      	bne.n	8016d3a <_dtoa_r+0x2e>
 8016d30:	21ef      	movs	r1, #239	@ 0xef
 8016d32:	4bc7      	ldr	r3, [pc, #796]	@ (8017050 <_dtoa_r+0x344>)
 8016d34:	48c7      	ldr	r0, [pc, #796]	@ (8017054 <_dtoa_r+0x348>)
 8016d36:	f001 fea1 	bl	8018a7c <__assert_func>
 8016d3a:	6046      	str	r6, [r0, #4]
 8016d3c:	6086      	str	r6, [r0, #8]
 8016d3e:	6006      	str	r6, [r0, #0]
 8016d40:	60c6      	str	r6, [r0, #12]
 8016d42:	9b03      	ldr	r3, [sp, #12]
 8016d44:	69db      	ldr	r3, [r3, #28]
 8016d46:	6819      	ldr	r1, [r3, #0]
 8016d48:	2900      	cmp	r1, #0
 8016d4a:	d00b      	beq.n	8016d64 <_dtoa_r+0x58>
 8016d4c:	685a      	ldr	r2, [r3, #4]
 8016d4e:	2301      	movs	r3, #1
 8016d50:	4093      	lsls	r3, r2
 8016d52:	604a      	str	r2, [r1, #4]
 8016d54:	608b      	str	r3, [r1, #8]
 8016d56:	9803      	ldr	r0, [sp, #12]
 8016d58:	f000 ff16 	bl	8017b88 <_Bfree>
 8016d5c:	2200      	movs	r2, #0
 8016d5e:	9b03      	ldr	r3, [sp, #12]
 8016d60:	69db      	ldr	r3, [r3, #28]
 8016d62:	601a      	str	r2, [r3, #0]
 8016d64:	2d00      	cmp	r5, #0
 8016d66:	da1e      	bge.n	8016da6 <_dtoa_r+0x9a>
 8016d68:	2301      	movs	r3, #1
 8016d6a:	603b      	str	r3, [r7, #0]
 8016d6c:	006b      	lsls	r3, r5, #1
 8016d6e:	085b      	lsrs	r3, r3, #1
 8016d70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016d72:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016d74:	4bb8      	ldr	r3, [pc, #736]	@ (8017058 <_dtoa_r+0x34c>)
 8016d76:	4ab8      	ldr	r2, [pc, #736]	@ (8017058 <_dtoa_r+0x34c>)
 8016d78:	403b      	ands	r3, r7
 8016d7a:	4293      	cmp	r3, r2
 8016d7c:	d116      	bne.n	8016dac <_dtoa_r+0xa0>
 8016d7e:	4bb7      	ldr	r3, [pc, #732]	@ (801705c <_dtoa_r+0x350>)
 8016d80:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8016d82:	6013      	str	r3, [r2, #0]
 8016d84:	033b      	lsls	r3, r7, #12
 8016d86:	0b1b      	lsrs	r3, r3, #12
 8016d88:	4323      	orrs	r3, r4
 8016d8a:	d101      	bne.n	8016d90 <_dtoa_r+0x84>
 8016d8c:	f000 fd83 	bl	8017896 <_dtoa_r+0xb8a>
 8016d90:	4bb3      	ldr	r3, [pc, #716]	@ (8017060 <_dtoa_r+0x354>)
 8016d92:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8016d94:	9308      	str	r3, [sp, #32]
 8016d96:	2a00      	cmp	r2, #0
 8016d98:	d002      	beq.n	8016da0 <_dtoa_r+0x94>
 8016d9a:	4bb2      	ldr	r3, [pc, #712]	@ (8017064 <_dtoa_r+0x358>)
 8016d9c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8016d9e:	6013      	str	r3, [r2, #0]
 8016da0:	9808      	ldr	r0, [sp, #32]
 8016da2:	b01d      	add	sp, #116	@ 0x74
 8016da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016da6:	2300      	movs	r3, #0
 8016da8:	603b      	str	r3, [r7, #0]
 8016daa:	e7e2      	b.n	8016d72 <_dtoa_r+0x66>
 8016dac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016dae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016db0:	9212      	str	r2, [sp, #72]	@ 0x48
 8016db2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016db4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016db6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016db8:	2200      	movs	r2, #0
 8016dba:	2300      	movs	r3, #0
 8016dbc:	f7e9 fb46 	bl	800044c <__aeabi_dcmpeq>
 8016dc0:	1e06      	subs	r6, r0, #0
 8016dc2:	d00b      	beq.n	8016ddc <_dtoa_r+0xd0>
 8016dc4:	2301      	movs	r3, #1
 8016dc6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8016dc8:	6013      	str	r3, [r2, #0]
 8016dca:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d002      	beq.n	8016dd6 <_dtoa_r+0xca>
 8016dd0:	4ba5      	ldr	r3, [pc, #660]	@ (8017068 <_dtoa_r+0x35c>)
 8016dd2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8016dd4:	6013      	str	r3, [r2, #0]
 8016dd6:	4ba5      	ldr	r3, [pc, #660]	@ (801706c <_dtoa_r+0x360>)
 8016dd8:	9308      	str	r3, [sp, #32]
 8016dda:	e7e1      	b.n	8016da0 <_dtoa_r+0x94>
 8016ddc:	ab1a      	add	r3, sp, #104	@ 0x68
 8016dde:	9301      	str	r3, [sp, #4]
 8016de0:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016de2:	9300      	str	r3, [sp, #0]
 8016de4:	9803      	ldr	r0, [sp, #12]
 8016de6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016de8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016dea:	f001 f9cd 	bl	8018188 <__d2b>
 8016dee:	007a      	lsls	r2, r7, #1
 8016df0:	9005      	str	r0, [sp, #20]
 8016df2:	0d52      	lsrs	r2, r2, #21
 8016df4:	d100      	bne.n	8016df8 <_dtoa_r+0xec>
 8016df6:	e07b      	b.n	8016ef0 <_dtoa_r+0x1e4>
 8016df8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016dfa:	9618      	str	r6, [sp, #96]	@ 0x60
 8016dfc:	0319      	lsls	r1, r3, #12
 8016dfe:	4b9c      	ldr	r3, [pc, #624]	@ (8017070 <_dtoa_r+0x364>)
 8016e00:	0b09      	lsrs	r1, r1, #12
 8016e02:	430b      	orrs	r3, r1
 8016e04:	499b      	ldr	r1, [pc, #620]	@ (8017074 <_dtoa_r+0x368>)
 8016e06:	1857      	adds	r7, r2, r1
 8016e08:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016e0a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016e0c:	0019      	movs	r1, r3
 8016e0e:	2200      	movs	r2, #0
 8016e10:	4b99      	ldr	r3, [pc, #612]	@ (8017078 <_dtoa_r+0x36c>)
 8016e12:	f7eb fe59 	bl	8002ac8 <__aeabi_dsub>
 8016e16:	4a99      	ldr	r2, [pc, #612]	@ (801707c <_dtoa_r+0x370>)
 8016e18:	4b99      	ldr	r3, [pc, #612]	@ (8017080 <_dtoa_r+0x374>)
 8016e1a:	f7eb fb8d 	bl	8002538 <__aeabi_dmul>
 8016e1e:	4a99      	ldr	r2, [pc, #612]	@ (8017084 <_dtoa_r+0x378>)
 8016e20:	4b99      	ldr	r3, [pc, #612]	@ (8017088 <_dtoa_r+0x37c>)
 8016e22:	f7ea fbe1 	bl	80015e8 <__aeabi_dadd>
 8016e26:	0004      	movs	r4, r0
 8016e28:	0038      	movs	r0, r7
 8016e2a:	000d      	movs	r5, r1
 8016e2c:	f7ec fa46 	bl	80032bc <__aeabi_i2d>
 8016e30:	4a96      	ldr	r2, [pc, #600]	@ (801708c <_dtoa_r+0x380>)
 8016e32:	4b97      	ldr	r3, [pc, #604]	@ (8017090 <_dtoa_r+0x384>)
 8016e34:	f7eb fb80 	bl	8002538 <__aeabi_dmul>
 8016e38:	0002      	movs	r2, r0
 8016e3a:	000b      	movs	r3, r1
 8016e3c:	0020      	movs	r0, r4
 8016e3e:	0029      	movs	r1, r5
 8016e40:	f7ea fbd2 	bl	80015e8 <__aeabi_dadd>
 8016e44:	0004      	movs	r4, r0
 8016e46:	000d      	movs	r5, r1
 8016e48:	f7ec f9fc 	bl	8003244 <__aeabi_d2iz>
 8016e4c:	2200      	movs	r2, #0
 8016e4e:	9004      	str	r0, [sp, #16]
 8016e50:	2300      	movs	r3, #0
 8016e52:	0020      	movs	r0, r4
 8016e54:	0029      	movs	r1, r5
 8016e56:	f7e9 faff 	bl	8000458 <__aeabi_dcmplt>
 8016e5a:	2800      	cmp	r0, #0
 8016e5c:	d00b      	beq.n	8016e76 <_dtoa_r+0x16a>
 8016e5e:	9804      	ldr	r0, [sp, #16]
 8016e60:	f7ec fa2c 	bl	80032bc <__aeabi_i2d>
 8016e64:	002b      	movs	r3, r5
 8016e66:	0022      	movs	r2, r4
 8016e68:	f7e9 faf0 	bl	800044c <__aeabi_dcmpeq>
 8016e6c:	4243      	negs	r3, r0
 8016e6e:	4158      	adcs	r0, r3
 8016e70:	9b04      	ldr	r3, [sp, #16]
 8016e72:	1a1b      	subs	r3, r3, r0
 8016e74:	9304      	str	r3, [sp, #16]
 8016e76:	2301      	movs	r3, #1
 8016e78:	9315      	str	r3, [sp, #84]	@ 0x54
 8016e7a:	9b04      	ldr	r3, [sp, #16]
 8016e7c:	2b16      	cmp	r3, #22
 8016e7e:	d810      	bhi.n	8016ea2 <_dtoa_r+0x196>
 8016e80:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016e82:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016e84:	9a04      	ldr	r2, [sp, #16]
 8016e86:	4b83      	ldr	r3, [pc, #524]	@ (8017094 <_dtoa_r+0x388>)
 8016e88:	00d2      	lsls	r2, r2, #3
 8016e8a:	189b      	adds	r3, r3, r2
 8016e8c:	681a      	ldr	r2, [r3, #0]
 8016e8e:	685b      	ldr	r3, [r3, #4]
 8016e90:	f7e9 fae2 	bl	8000458 <__aeabi_dcmplt>
 8016e94:	2800      	cmp	r0, #0
 8016e96:	d047      	beq.n	8016f28 <_dtoa_r+0x21c>
 8016e98:	9b04      	ldr	r3, [sp, #16]
 8016e9a:	3b01      	subs	r3, #1
 8016e9c:	9304      	str	r3, [sp, #16]
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	9315      	str	r3, [sp, #84]	@ 0x54
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8016ea6:	9206      	str	r2, [sp, #24]
 8016ea8:	1bdb      	subs	r3, r3, r7
 8016eaa:	1e5a      	subs	r2, r3, #1
 8016eac:	d53e      	bpl.n	8016f2c <_dtoa_r+0x220>
 8016eae:	2201      	movs	r2, #1
 8016eb0:	1ad3      	subs	r3, r2, r3
 8016eb2:	9306      	str	r3, [sp, #24]
 8016eb4:	2300      	movs	r3, #0
 8016eb6:	930d      	str	r3, [sp, #52]	@ 0x34
 8016eb8:	9b04      	ldr	r3, [sp, #16]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	db38      	blt.n	8016f30 <_dtoa_r+0x224>
 8016ebe:	9a04      	ldr	r2, [sp, #16]
 8016ec0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016ec2:	4694      	mov	ip, r2
 8016ec4:	4463      	add	r3, ip
 8016ec6:	930d      	str	r3, [sp, #52]	@ 0x34
 8016ec8:	2300      	movs	r3, #0
 8016eca:	9214      	str	r2, [sp, #80]	@ 0x50
 8016ecc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016ece:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8016ed0:	2401      	movs	r4, #1
 8016ed2:	2b09      	cmp	r3, #9
 8016ed4:	d867      	bhi.n	8016fa6 <_dtoa_r+0x29a>
 8016ed6:	2b05      	cmp	r3, #5
 8016ed8:	dd02      	ble.n	8016ee0 <_dtoa_r+0x1d4>
 8016eda:	2400      	movs	r4, #0
 8016edc:	3b04      	subs	r3, #4
 8016ede:	9322      	str	r3, [sp, #136]	@ 0x88
 8016ee0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8016ee2:	1e98      	subs	r0, r3, #2
 8016ee4:	2803      	cmp	r0, #3
 8016ee6:	d867      	bhi.n	8016fb8 <_dtoa_r+0x2ac>
 8016ee8:	f7e9 f916 	bl	8000118 <__gnu_thumb1_case_uqi>
 8016eec:	5b383a2b 	.word	0x5b383a2b
 8016ef0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016ef2:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8016ef4:	18f6      	adds	r6, r6, r3
 8016ef6:	4b68      	ldr	r3, [pc, #416]	@ (8017098 <_dtoa_r+0x38c>)
 8016ef8:	18f2      	adds	r2, r6, r3
 8016efa:	2a20      	cmp	r2, #32
 8016efc:	dd0f      	ble.n	8016f1e <_dtoa_r+0x212>
 8016efe:	2340      	movs	r3, #64	@ 0x40
 8016f00:	1a9b      	subs	r3, r3, r2
 8016f02:	409f      	lsls	r7, r3
 8016f04:	4b65      	ldr	r3, [pc, #404]	@ (801709c <_dtoa_r+0x390>)
 8016f06:	0038      	movs	r0, r7
 8016f08:	18f3      	adds	r3, r6, r3
 8016f0a:	40dc      	lsrs	r4, r3
 8016f0c:	4320      	orrs	r0, r4
 8016f0e:	f7ec fa03 	bl	8003318 <__aeabi_ui2d>
 8016f12:	2201      	movs	r2, #1
 8016f14:	4b62      	ldr	r3, [pc, #392]	@ (80170a0 <_dtoa_r+0x394>)
 8016f16:	1e77      	subs	r7, r6, #1
 8016f18:	18cb      	adds	r3, r1, r3
 8016f1a:	9218      	str	r2, [sp, #96]	@ 0x60
 8016f1c:	e776      	b.n	8016e0c <_dtoa_r+0x100>
 8016f1e:	2320      	movs	r3, #32
 8016f20:	0020      	movs	r0, r4
 8016f22:	1a9b      	subs	r3, r3, r2
 8016f24:	4098      	lsls	r0, r3
 8016f26:	e7f2      	b.n	8016f0e <_dtoa_r+0x202>
 8016f28:	9015      	str	r0, [sp, #84]	@ 0x54
 8016f2a:	e7ba      	b.n	8016ea2 <_dtoa_r+0x196>
 8016f2c:	920d      	str	r2, [sp, #52]	@ 0x34
 8016f2e:	e7c3      	b.n	8016eb8 <_dtoa_r+0x1ac>
 8016f30:	9b06      	ldr	r3, [sp, #24]
 8016f32:	9a04      	ldr	r2, [sp, #16]
 8016f34:	1a9b      	subs	r3, r3, r2
 8016f36:	9306      	str	r3, [sp, #24]
 8016f38:	4253      	negs	r3, r2
 8016f3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	9314      	str	r3, [sp, #80]	@ 0x50
 8016f40:	e7c5      	b.n	8016ece <_dtoa_r+0x1c2>
 8016f42:	2300      	movs	r3, #0
 8016f44:	9310      	str	r3, [sp, #64]	@ 0x40
 8016f46:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016f48:	930e      	str	r3, [sp, #56]	@ 0x38
 8016f4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	dc13      	bgt.n	8016f78 <_dtoa_r+0x26c>
 8016f50:	2301      	movs	r3, #1
 8016f52:	001a      	movs	r2, r3
 8016f54:	930e      	str	r3, [sp, #56]	@ 0x38
 8016f56:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f58:	9223      	str	r2, [sp, #140]	@ 0x8c
 8016f5a:	e00d      	b.n	8016f78 <_dtoa_r+0x26c>
 8016f5c:	2301      	movs	r3, #1
 8016f5e:	e7f1      	b.n	8016f44 <_dtoa_r+0x238>
 8016f60:	2300      	movs	r3, #0
 8016f62:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8016f64:	9310      	str	r3, [sp, #64]	@ 0x40
 8016f66:	4694      	mov	ip, r2
 8016f68:	9b04      	ldr	r3, [sp, #16]
 8016f6a:	4463      	add	r3, ip
 8016f6c:	930e      	str	r3, [sp, #56]	@ 0x38
 8016f6e:	3301      	adds	r3, #1
 8016f70:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	dc00      	bgt.n	8016f78 <_dtoa_r+0x26c>
 8016f76:	2301      	movs	r3, #1
 8016f78:	9a03      	ldr	r2, [sp, #12]
 8016f7a:	2100      	movs	r1, #0
 8016f7c:	69d0      	ldr	r0, [r2, #28]
 8016f7e:	2204      	movs	r2, #4
 8016f80:	0015      	movs	r5, r2
 8016f82:	3514      	adds	r5, #20
 8016f84:	429d      	cmp	r5, r3
 8016f86:	d91b      	bls.n	8016fc0 <_dtoa_r+0x2b4>
 8016f88:	6041      	str	r1, [r0, #4]
 8016f8a:	9803      	ldr	r0, [sp, #12]
 8016f8c:	f000 fdb8 	bl	8017b00 <_Balloc>
 8016f90:	9008      	str	r0, [sp, #32]
 8016f92:	2800      	cmp	r0, #0
 8016f94:	d117      	bne.n	8016fc6 <_dtoa_r+0x2ba>
 8016f96:	21b0      	movs	r1, #176	@ 0xb0
 8016f98:	4b42      	ldr	r3, [pc, #264]	@ (80170a4 <_dtoa_r+0x398>)
 8016f9a:	482e      	ldr	r0, [pc, #184]	@ (8017054 <_dtoa_r+0x348>)
 8016f9c:	9a08      	ldr	r2, [sp, #32]
 8016f9e:	31ff      	adds	r1, #255	@ 0xff
 8016fa0:	e6c9      	b.n	8016d36 <_dtoa_r+0x2a>
 8016fa2:	2301      	movs	r3, #1
 8016fa4:	e7dd      	b.n	8016f62 <_dtoa_r+0x256>
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	9410      	str	r4, [sp, #64]	@ 0x40
 8016faa:	9322      	str	r3, [sp, #136]	@ 0x88
 8016fac:	3b01      	subs	r3, #1
 8016fae:	930e      	str	r3, [sp, #56]	@ 0x38
 8016fb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8016fb2:	2200      	movs	r2, #0
 8016fb4:	3313      	adds	r3, #19
 8016fb6:	e7cf      	b.n	8016f58 <_dtoa_r+0x24c>
 8016fb8:	2301      	movs	r3, #1
 8016fba:	9310      	str	r3, [sp, #64]	@ 0x40
 8016fbc:	3b02      	subs	r3, #2
 8016fbe:	e7f6      	b.n	8016fae <_dtoa_r+0x2a2>
 8016fc0:	3101      	adds	r1, #1
 8016fc2:	0052      	lsls	r2, r2, #1
 8016fc4:	e7dc      	b.n	8016f80 <_dtoa_r+0x274>
 8016fc6:	9b03      	ldr	r3, [sp, #12]
 8016fc8:	9a08      	ldr	r2, [sp, #32]
 8016fca:	69db      	ldr	r3, [r3, #28]
 8016fcc:	601a      	str	r2, [r3, #0]
 8016fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016fd0:	2b0e      	cmp	r3, #14
 8016fd2:	d900      	bls.n	8016fd6 <_dtoa_r+0x2ca>
 8016fd4:	e0d9      	b.n	801718a <_dtoa_r+0x47e>
 8016fd6:	2c00      	cmp	r4, #0
 8016fd8:	d100      	bne.n	8016fdc <_dtoa_r+0x2d0>
 8016fda:	e0d6      	b.n	801718a <_dtoa_r+0x47e>
 8016fdc:	9b04      	ldr	r3, [sp, #16]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	dd64      	ble.n	80170ac <_dtoa_r+0x3a0>
 8016fe2:	210f      	movs	r1, #15
 8016fe4:	9a04      	ldr	r2, [sp, #16]
 8016fe6:	4b2b      	ldr	r3, [pc, #172]	@ (8017094 <_dtoa_r+0x388>)
 8016fe8:	400a      	ands	r2, r1
 8016fea:	00d2      	lsls	r2, r2, #3
 8016fec:	189b      	adds	r3, r3, r2
 8016fee:	681e      	ldr	r6, [r3, #0]
 8016ff0:	685f      	ldr	r7, [r3, #4]
 8016ff2:	9b04      	ldr	r3, [sp, #16]
 8016ff4:	2402      	movs	r4, #2
 8016ff6:	111d      	asrs	r5, r3, #4
 8016ff8:	05db      	lsls	r3, r3, #23
 8016ffa:	d50a      	bpl.n	8017012 <_dtoa_r+0x306>
 8016ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80170a8 <_dtoa_r+0x39c>)
 8016ffe:	400d      	ands	r5, r1
 8017000:	6a1a      	ldr	r2, [r3, #32]
 8017002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017004:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8017006:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017008:	f7ea fe52 	bl	8001cb0 <__aeabi_ddiv>
 801700c:	900a      	str	r0, [sp, #40]	@ 0x28
 801700e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017010:	3401      	adds	r4, #1
 8017012:	4b25      	ldr	r3, [pc, #148]	@ (80170a8 <_dtoa_r+0x39c>)
 8017014:	930c      	str	r3, [sp, #48]	@ 0x30
 8017016:	2d00      	cmp	r5, #0
 8017018:	d108      	bne.n	801702c <_dtoa_r+0x320>
 801701a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801701c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801701e:	0032      	movs	r2, r6
 8017020:	003b      	movs	r3, r7
 8017022:	f7ea fe45 	bl	8001cb0 <__aeabi_ddiv>
 8017026:	900a      	str	r0, [sp, #40]	@ 0x28
 8017028:	910b      	str	r1, [sp, #44]	@ 0x2c
 801702a:	e05a      	b.n	80170e2 <_dtoa_r+0x3d6>
 801702c:	2301      	movs	r3, #1
 801702e:	421d      	tst	r5, r3
 8017030:	d009      	beq.n	8017046 <_dtoa_r+0x33a>
 8017032:	18e4      	adds	r4, r4, r3
 8017034:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017036:	0030      	movs	r0, r6
 8017038:	681a      	ldr	r2, [r3, #0]
 801703a:	685b      	ldr	r3, [r3, #4]
 801703c:	0039      	movs	r1, r7
 801703e:	f7eb fa7b 	bl	8002538 <__aeabi_dmul>
 8017042:	0006      	movs	r6, r0
 8017044:	000f      	movs	r7, r1
 8017046:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017048:	106d      	asrs	r5, r5, #1
 801704a:	3308      	adds	r3, #8
 801704c:	e7e2      	b.n	8017014 <_dtoa_r+0x308>
 801704e:	46c0      	nop			@ (mov r8, r8)
 8017050:	0801a5ad 	.word	0x0801a5ad
 8017054:	0801a5c4 	.word	0x0801a5c4
 8017058:	7ff00000 	.word	0x7ff00000
 801705c:	0000270f 	.word	0x0000270f
 8017060:	0801a5a9 	.word	0x0801a5a9
 8017064:	0801a5ac 	.word	0x0801a5ac
 8017068:	0801a57d 	.word	0x0801a57d
 801706c:	0801a57c 	.word	0x0801a57c
 8017070:	3ff00000 	.word	0x3ff00000
 8017074:	fffffc01 	.word	0xfffffc01
 8017078:	3ff80000 	.word	0x3ff80000
 801707c:	636f4361 	.word	0x636f4361
 8017080:	3fd287a7 	.word	0x3fd287a7
 8017084:	8b60c8b3 	.word	0x8b60c8b3
 8017088:	3fc68a28 	.word	0x3fc68a28
 801708c:	509f79fb 	.word	0x509f79fb
 8017090:	3fd34413 	.word	0x3fd34413
 8017094:	0801a6c0 	.word	0x0801a6c0
 8017098:	00000432 	.word	0x00000432
 801709c:	00000412 	.word	0x00000412
 80170a0:	fe100000 	.word	0xfe100000
 80170a4:	0801a61c 	.word	0x0801a61c
 80170a8:	0801a698 	.word	0x0801a698
 80170ac:	9b04      	ldr	r3, [sp, #16]
 80170ae:	2402      	movs	r4, #2
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d016      	beq.n	80170e2 <_dtoa_r+0x3d6>
 80170b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80170b6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80170b8:	220f      	movs	r2, #15
 80170ba:	425d      	negs	r5, r3
 80170bc:	402a      	ands	r2, r5
 80170be:	4bd7      	ldr	r3, [pc, #860]	@ (801741c <_dtoa_r+0x710>)
 80170c0:	00d2      	lsls	r2, r2, #3
 80170c2:	189b      	adds	r3, r3, r2
 80170c4:	681a      	ldr	r2, [r3, #0]
 80170c6:	685b      	ldr	r3, [r3, #4]
 80170c8:	f7eb fa36 	bl	8002538 <__aeabi_dmul>
 80170cc:	2701      	movs	r7, #1
 80170ce:	2300      	movs	r3, #0
 80170d0:	900a      	str	r0, [sp, #40]	@ 0x28
 80170d2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80170d4:	4ed2      	ldr	r6, [pc, #840]	@ (8017420 <_dtoa_r+0x714>)
 80170d6:	112d      	asrs	r5, r5, #4
 80170d8:	2d00      	cmp	r5, #0
 80170da:	d000      	beq.n	80170de <_dtoa_r+0x3d2>
 80170dc:	e0ba      	b.n	8017254 <_dtoa_r+0x548>
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d1a1      	bne.n	8017026 <_dtoa_r+0x31a>
 80170e2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80170e4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80170e6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d100      	bne.n	80170ee <_dtoa_r+0x3e2>
 80170ec:	e0bd      	b.n	801726a <_dtoa_r+0x55e>
 80170ee:	2200      	movs	r2, #0
 80170f0:	0030      	movs	r0, r6
 80170f2:	0039      	movs	r1, r7
 80170f4:	4bcb      	ldr	r3, [pc, #812]	@ (8017424 <_dtoa_r+0x718>)
 80170f6:	f7e9 f9af 	bl	8000458 <__aeabi_dcmplt>
 80170fa:	2800      	cmp	r0, #0
 80170fc:	d100      	bne.n	8017100 <_dtoa_r+0x3f4>
 80170fe:	e0b4      	b.n	801726a <_dtoa_r+0x55e>
 8017100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017102:	2b00      	cmp	r3, #0
 8017104:	d100      	bne.n	8017108 <_dtoa_r+0x3fc>
 8017106:	e0b0      	b.n	801726a <_dtoa_r+0x55e>
 8017108:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801710a:	2b00      	cmp	r3, #0
 801710c:	dd39      	ble.n	8017182 <_dtoa_r+0x476>
 801710e:	9b04      	ldr	r3, [sp, #16]
 8017110:	2200      	movs	r2, #0
 8017112:	3b01      	subs	r3, #1
 8017114:	930c      	str	r3, [sp, #48]	@ 0x30
 8017116:	0030      	movs	r0, r6
 8017118:	4bc3      	ldr	r3, [pc, #780]	@ (8017428 <_dtoa_r+0x71c>)
 801711a:	0039      	movs	r1, r7
 801711c:	f7eb fa0c 	bl	8002538 <__aeabi_dmul>
 8017120:	900a      	str	r0, [sp, #40]	@ 0x28
 8017122:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017126:	3401      	adds	r4, #1
 8017128:	0020      	movs	r0, r4
 801712a:	9311      	str	r3, [sp, #68]	@ 0x44
 801712c:	f7ec f8c6 	bl	80032bc <__aeabi_i2d>
 8017130:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017134:	f7eb fa00 	bl	8002538 <__aeabi_dmul>
 8017138:	4bbc      	ldr	r3, [pc, #752]	@ (801742c <_dtoa_r+0x720>)
 801713a:	2200      	movs	r2, #0
 801713c:	f7ea fa54 	bl	80015e8 <__aeabi_dadd>
 8017140:	4bbb      	ldr	r3, [pc, #748]	@ (8017430 <_dtoa_r+0x724>)
 8017142:	0006      	movs	r6, r0
 8017144:	18cf      	adds	r7, r1, r3
 8017146:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017148:	2b00      	cmp	r3, #0
 801714a:	d000      	beq.n	801714e <_dtoa_r+0x442>
 801714c:	e091      	b.n	8017272 <_dtoa_r+0x566>
 801714e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017150:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017152:	2200      	movs	r2, #0
 8017154:	4bb7      	ldr	r3, [pc, #732]	@ (8017434 <_dtoa_r+0x728>)
 8017156:	f7eb fcb7 	bl	8002ac8 <__aeabi_dsub>
 801715a:	0032      	movs	r2, r6
 801715c:	003b      	movs	r3, r7
 801715e:	0004      	movs	r4, r0
 8017160:	000d      	movs	r5, r1
 8017162:	f7e9 f98d 	bl	8000480 <__aeabi_dcmpgt>
 8017166:	2800      	cmp	r0, #0
 8017168:	d000      	beq.n	801716c <_dtoa_r+0x460>
 801716a:	e29d      	b.n	80176a8 <_dtoa_r+0x99c>
 801716c:	2180      	movs	r1, #128	@ 0x80
 801716e:	0609      	lsls	r1, r1, #24
 8017170:	187b      	adds	r3, r7, r1
 8017172:	0032      	movs	r2, r6
 8017174:	0020      	movs	r0, r4
 8017176:	0029      	movs	r1, r5
 8017178:	f7e9 f96e 	bl	8000458 <__aeabi_dcmplt>
 801717c:	2800      	cmp	r0, #0
 801717e:	d000      	beq.n	8017182 <_dtoa_r+0x476>
 8017180:	e130      	b.n	80173e4 <_dtoa_r+0x6d8>
 8017182:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017184:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8017186:	930a      	str	r3, [sp, #40]	@ 0x28
 8017188:	940b      	str	r4, [sp, #44]	@ 0x2c
 801718a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801718c:	2b00      	cmp	r3, #0
 801718e:	da00      	bge.n	8017192 <_dtoa_r+0x486>
 8017190:	e177      	b.n	8017482 <_dtoa_r+0x776>
 8017192:	9a04      	ldr	r2, [sp, #16]
 8017194:	2a0e      	cmp	r2, #14
 8017196:	dd00      	ble.n	801719a <_dtoa_r+0x48e>
 8017198:	e173      	b.n	8017482 <_dtoa_r+0x776>
 801719a:	4ba0      	ldr	r3, [pc, #640]	@ (801741c <_dtoa_r+0x710>)
 801719c:	00d2      	lsls	r2, r2, #3
 801719e:	189b      	adds	r3, r3, r2
 80171a0:	685c      	ldr	r4, [r3, #4]
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	9306      	str	r3, [sp, #24]
 80171a6:	9407      	str	r4, [sp, #28]
 80171a8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	da03      	bge.n	80171b6 <_dtoa_r+0x4aa>
 80171ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	dc00      	bgt.n	80171b6 <_dtoa_r+0x4aa>
 80171b4:	e106      	b.n	80173c4 <_dtoa_r+0x6b8>
 80171b6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80171b8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80171ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171bc:	9d08      	ldr	r5, [sp, #32]
 80171be:	3b01      	subs	r3, #1
 80171c0:	195b      	adds	r3, r3, r5
 80171c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80171c4:	9a06      	ldr	r2, [sp, #24]
 80171c6:	9b07      	ldr	r3, [sp, #28]
 80171c8:	0030      	movs	r0, r6
 80171ca:	0039      	movs	r1, r7
 80171cc:	f7ea fd70 	bl	8001cb0 <__aeabi_ddiv>
 80171d0:	f7ec f838 	bl	8003244 <__aeabi_d2iz>
 80171d4:	9009      	str	r0, [sp, #36]	@ 0x24
 80171d6:	f7ec f871 	bl	80032bc <__aeabi_i2d>
 80171da:	9a06      	ldr	r2, [sp, #24]
 80171dc:	9b07      	ldr	r3, [sp, #28]
 80171de:	f7eb f9ab 	bl	8002538 <__aeabi_dmul>
 80171e2:	0002      	movs	r2, r0
 80171e4:	000b      	movs	r3, r1
 80171e6:	0030      	movs	r0, r6
 80171e8:	0039      	movs	r1, r7
 80171ea:	f7eb fc6d 	bl	8002ac8 <__aeabi_dsub>
 80171ee:	002b      	movs	r3, r5
 80171f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171f2:	3501      	adds	r5, #1
 80171f4:	3230      	adds	r2, #48	@ 0x30
 80171f6:	701a      	strb	r2, [r3, #0]
 80171f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80171fa:	002c      	movs	r4, r5
 80171fc:	429a      	cmp	r2, r3
 80171fe:	d000      	beq.n	8017202 <_dtoa_r+0x4f6>
 8017200:	e131      	b.n	8017466 <_dtoa_r+0x75a>
 8017202:	0002      	movs	r2, r0
 8017204:	000b      	movs	r3, r1
 8017206:	f7ea f9ef 	bl	80015e8 <__aeabi_dadd>
 801720a:	9a06      	ldr	r2, [sp, #24]
 801720c:	9b07      	ldr	r3, [sp, #28]
 801720e:	0006      	movs	r6, r0
 8017210:	000f      	movs	r7, r1
 8017212:	f7e9 f935 	bl	8000480 <__aeabi_dcmpgt>
 8017216:	2800      	cmp	r0, #0
 8017218:	d000      	beq.n	801721c <_dtoa_r+0x510>
 801721a:	e10f      	b.n	801743c <_dtoa_r+0x730>
 801721c:	9a06      	ldr	r2, [sp, #24]
 801721e:	9b07      	ldr	r3, [sp, #28]
 8017220:	0030      	movs	r0, r6
 8017222:	0039      	movs	r1, r7
 8017224:	f7e9 f912 	bl	800044c <__aeabi_dcmpeq>
 8017228:	2800      	cmp	r0, #0
 801722a:	d003      	beq.n	8017234 <_dtoa_r+0x528>
 801722c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801722e:	07dd      	lsls	r5, r3, #31
 8017230:	d500      	bpl.n	8017234 <_dtoa_r+0x528>
 8017232:	e103      	b.n	801743c <_dtoa_r+0x730>
 8017234:	9905      	ldr	r1, [sp, #20]
 8017236:	9803      	ldr	r0, [sp, #12]
 8017238:	f000 fca6 	bl	8017b88 <_Bfree>
 801723c:	2300      	movs	r3, #0
 801723e:	7023      	strb	r3, [r4, #0]
 8017240:	9b04      	ldr	r3, [sp, #16]
 8017242:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8017244:	3301      	adds	r3, #1
 8017246:	6013      	str	r3, [r2, #0]
 8017248:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801724a:	2b00      	cmp	r3, #0
 801724c:	d100      	bne.n	8017250 <_dtoa_r+0x544>
 801724e:	e5a7      	b.n	8016da0 <_dtoa_r+0x94>
 8017250:	601c      	str	r4, [r3, #0]
 8017252:	e5a5      	b.n	8016da0 <_dtoa_r+0x94>
 8017254:	423d      	tst	r5, r7
 8017256:	d005      	beq.n	8017264 <_dtoa_r+0x558>
 8017258:	6832      	ldr	r2, [r6, #0]
 801725a:	6873      	ldr	r3, [r6, #4]
 801725c:	f7eb f96c 	bl	8002538 <__aeabi_dmul>
 8017260:	003b      	movs	r3, r7
 8017262:	3401      	adds	r4, #1
 8017264:	106d      	asrs	r5, r5, #1
 8017266:	3608      	adds	r6, #8
 8017268:	e736      	b.n	80170d8 <_dtoa_r+0x3cc>
 801726a:	9b04      	ldr	r3, [sp, #16]
 801726c:	930c      	str	r3, [sp, #48]	@ 0x30
 801726e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017270:	e75a      	b.n	8017128 <_dtoa_r+0x41c>
 8017272:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017274:	4b69      	ldr	r3, [pc, #420]	@ (801741c <_dtoa_r+0x710>)
 8017276:	3a01      	subs	r2, #1
 8017278:	00d2      	lsls	r2, r2, #3
 801727a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801727c:	189b      	adds	r3, r3, r2
 801727e:	681a      	ldr	r2, [r3, #0]
 8017280:	685b      	ldr	r3, [r3, #4]
 8017282:	2900      	cmp	r1, #0
 8017284:	d04c      	beq.n	8017320 <_dtoa_r+0x614>
 8017286:	2000      	movs	r0, #0
 8017288:	496b      	ldr	r1, [pc, #428]	@ (8017438 <_dtoa_r+0x72c>)
 801728a:	f7ea fd11 	bl	8001cb0 <__aeabi_ddiv>
 801728e:	0032      	movs	r2, r6
 8017290:	003b      	movs	r3, r7
 8017292:	f7eb fc19 	bl	8002ac8 <__aeabi_dsub>
 8017296:	9a08      	ldr	r2, [sp, #32]
 8017298:	0006      	movs	r6, r0
 801729a:	4694      	mov	ip, r2
 801729c:	000f      	movs	r7, r1
 801729e:	9b08      	ldr	r3, [sp, #32]
 80172a0:	9316      	str	r3, [sp, #88]	@ 0x58
 80172a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80172a4:	4463      	add	r3, ip
 80172a6:	9311      	str	r3, [sp, #68]	@ 0x44
 80172a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80172aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80172ac:	f7eb ffca 	bl	8003244 <__aeabi_d2iz>
 80172b0:	0005      	movs	r5, r0
 80172b2:	f7ec f803 	bl	80032bc <__aeabi_i2d>
 80172b6:	0002      	movs	r2, r0
 80172b8:	000b      	movs	r3, r1
 80172ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80172bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80172be:	f7eb fc03 	bl	8002ac8 <__aeabi_dsub>
 80172c2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80172c4:	3530      	adds	r5, #48	@ 0x30
 80172c6:	1c5c      	adds	r4, r3, #1
 80172c8:	701d      	strb	r5, [r3, #0]
 80172ca:	0032      	movs	r2, r6
 80172cc:	003b      	movs	r3, r7
 80172ce:	900a      	str	r0, [sp, #40]	@ 0x28
 80172d0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80172d2:	f7e9 f8c1 	bl	8000458 <__aeabi_dcmplt>
 80172d6:	2800      	cmp	r0, #0
 80172d8:	d16a      	bne.n	80173b0 <_dtoa_r+0x6a4>
 80172da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80172dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80172de:	2000      	movs	r0, #0
 80172e0:	4950      	ldr	r1, [pc, #320]	@ (8017424 <_dtoa_r+0x718>)
 80172e2:	f7eb fbf1 	bl	8002ac8 <__aeabi_dsub>
 80172e6:	0032      	movs	r2, r6
 80172e8:	003b      	movs	r3, r7
 80172ea:	f7e9 f8b5 	bl	8000458 <__aeabi_dcmplt>
 80172ee:	2800      	cmp	r0, #0
 80172f0:	d000      	beq.n	80172f4 <_dtoa_r+0x5e8>
 80172f2:	e0a5      	b.n	8017440 <_dtoa_r+0x734>
 80172f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80172f6:	42a3      	cmp	r3, r4
 80172f8:	d100      	bne.n	80172fc <_dtoa_r+0x5f0>
 80172fa:	e742      	b.n	8017182 <_dtoa_r+0x476>
 80172fc:	2200      	movs	r2, #0
 80172fe:	0030      	movs	r0, r6
 8017300:	0039      	movs	r1, r7
 8017302:	4b49      	ldr	r3, [pc, #292]	@ (8017428 <_dtoa_r+0x71c>)
 8017304:	f7eb f918 	bl	8002538 <__aeabi_dmul>
 8017308:	2200      	movs	r2, #0
 801730a:	0006      	movs	r6, r0
 801730c:	000f      	movs	r7, r1
 801730e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017310:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017312:	4b45      	ldr	r3, [pc, #276]	@ (8017428 <_dtoa_r+0x71c>)
 8017314:	f7eb f910 	bl	8002538 <__aeabi_dmul>
 8017318:	9416      	str	r4, [sp, #88]	@ 0x58
 801731a:	900a      	str	r0, [sp, #40]	@ 0x28
 801731c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801731e:	e7c3      	b.n	80172a8 <_dtoa_r+0x59c>
 8017320:	0030      	movs	r0, r6
 8017322:	0039      	movs	r1, r7
 8017324:	f7eb f908 	bl	8002538 <__aeabi_dmul>
 8017328:	9d08      	ldr	r5, [sp, #32]
 801732a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801732c:	002b      	movs	r3, r5
 801732e:	4694      	mov	ip, r2
 8017330:	9016      	str	r0, [sp, #88]	@ 0x58
 8017332:	9117      	str	r1, [sp, #92]	@ 0x5c
 8017334:	4463      	add	r3, ip
 8017336:	9319      	str	r3, [sp, #100]	@ 0x64
 8017338:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801733a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801733c:	f7eb ff82 	bl	8003244 <__aeabi_d2iz>
 8017340:	0004      	movs	r4, r0
 8017342:	f7eb ffbb 	bl	80032bc <__aeabi_i2d>
 8017346:	000b      	movs	r3, r1
 8017348:	0002      	movs	r2, r0
 801734a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801734c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801734e:	f7eb fbbb 	bl	8002ac8 <__aeabi_dsub>
 8017352:	3430      	adds	r4, #48	@ 0x30
 8017354:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017356:	702c      	strb	r4, [r5, #0]
 8017358:	3501      	adds	r5, #1
 801735a:	0006      	movs	r6, r0
 801735c:	000f      	movs	r7, r1
 801735e:	42ab      	cmp	r3, r5
 8017360:	d129      	bne.n	80173b6 <_dtoa_r+0x6aa>
 8017362:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8017364:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8017366:	9b08      	ldr	r3, [sp, #32]
 8017368:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801736a:	469c      	mov	ip, r3
 801736c:	2200      	movs	r2, #0
 801736e:	4b32      	ldr	r3, [pc, #200]	@ (8017438 <_dtoa_r+0x72c>)
 8017370:	4464      	add	r4, ip
 8017372:	f7ea f939 	bl	80015e8 <__aeabi_dadd>
 8017376:	0002      	movs	r2, r0
 8017378:	000b      	movs	r3, r1
 801737a:	0030      	movs	r0, r6
 801737c:	0039      	movs	r1, r7
 801737e:	f7e9 f87f 	bl	8000480 <__aeabi_dcmpgt>
 8017382:	2800      	cmp	r0, #0
 8017384:	d15c      	bne.n	8017440 <_dtoa_r+0x734>
 8017386:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8017388:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801738a:	2000      	movs	r0, #0
 801738c:	492a      	ldr	r1, [pc, #168]	@ (8017438 <_dtoa_r+0x72c>)
 801738e:	f7eb fb9b 	bl	8002ac8 <__aeabi_dsub>
 8017392:	0002      	movs	r2, r0
 8017394:	000b      	movs	r3, r1
 8017396:	0030      	movs	r0, r6
 8017398:	0039      	movs	r1, r7
 801739a:	f7e9 f85d 	bl	8000458 <__aeabi_dcmplt>
 801739e:	2800      	cmp	r0, #0
 80173a0:	d100      	bne.n	80173a4 <_dtoa_r+0x698>
 80173a2:	e6ee      	b.n	8017182 <_dtoa_r+0x476>
 80173a4:	0023      	movs	r3, r4
 80173a6:	3c01      	subs	r4, #1
 80173a8:	7822      	ldrb	r2, [r4, #0]
 80173aa:	2a30      	cmp	r2, #48	@ 0x30
 80173ac:	d0fa      	beq.n	80173a4 <_dtoa_r+0x698>
 80173ae:	001c      	movs	r4, r3
 80173b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80173b2:	9304      	str	r3, [sp, #16]
 80173b4:	e73e      	b.n	8017234 <_dtoa_r+0x528>
 80173b6:	2200      	movs	r2, #0
 80173b8:	4b1b      	ldr	r3, [pc, #108]	@ (8017428 <_dtoa_r+0x71c>)
 80173ba:	f7eb f8bd 	bl	8002538 <__aeabi_dmul>
 80173be:	900a      	str	r0, [sp, #40]	@ 0x28
 80173c0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80173c2:	e7b9      	b.n	8017338 <_dtoa_r+0x62c>
 80173c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d10c      	bne.n	80173e4 <_dtoa_r+0x6d8>
 80173ca:	9806      	ldr	r0, [sp, #24]
 80173cc:	9907      	ldr	r1, [sp, #28]
 80173ce:	2200      	movs	r2, #0
 80173d0:	4b18      	ldr	r3, [pc, #96]	@ (8017434 <_dtoa_r+0x728>)
 80173d2:	f7eb f8b1 	bl	8002538 <__aeabi_dmul>
 80173d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80173d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80173da:	f7e9 f85b 	bl	8000494 <__aeabi_dcmpge>
 80173de:	2800      	cmp	r0, #0
 80173e0:	d100      	bne.n	80173e4 <_dtoa_r+0x6d8>
 80173e2:	e164      	b.n	80176ae <_dtoa_r+0x9a2>
 80173e4:	2600      	movs	r6, #0
 80173e6:	0037      	movs	r7, r6
 80173e8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80173ea:	9c08      	ldr	r4, [sp, #32]
 80173ec:	43db      	mvns	r3, r3
 80173ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80173f0:	2300      	movs	r3, #0
 80173f2:	9304      	str	r3, [sp, #16]
 80173f4:	0031      	movs	r1, r6
 80173f6:	9803      	ldr	r0, [sp, #12]
 80173f8:	f000 fbc6 	bl	8017b88 <_Bfree>
 80173fc:	2f00      	cmp	r7, #0
 80173fe:	d0d7      	beq.n	80173b0 <_dtoa_r+0x6a4>
 8017400:	9b04      	ldr	r3, [sp, #16]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d005      	beq.n	8017412 <_dtoa_r+0x706>
 8017406:	42bb      	cmp	r3, r7
 8017408:	d003      	beq.n	8017412 <_dtoa_r+0x706>
 801740a:	0019      	movs	r1, r3
 801740c:	9803      	ldr	r0, [sp, #12]
 801740e:	f000 fbbb 	bl	8017b88 <_Bfree>
 8017412:	0039      	movs	r1, r7
 8017414:	9803      	ldr	r0, [sp, #12]
 8017416:	f000 fbb7 	bl	8017b88 <_Bfree>
 801741a:	e7c9      	b.n	80173b0 <_dtoa_r+0x6a4>
 801741c:	0801a6c0 	.word	0x0801a6c0
 8017420:	0801a698 	.word	0x0801a698
 8017424:	3ff00000 	.word	0x3ff00000
 8017428:	40240000 	.word	0x40240000
 801742c:	401c0000 	.word	0x401c0000
 8017430:	fcc00000 	.word	0xfcc00000
 8017434:	40140000 	.word	0x40140000
 8017438:	3fe00000 	.word	0x3fe00000
 801743c:	9b04      	ldr	r3, [sp, #16]
 801743e:	930c      	str	r3, [sp, #48]	@ 0x30
 8017440:	0023      	movs	r3, r4
 8017442:	001c      	movs	r4, r3
 8017444:	3b01      	subs	r3, #1
 8017446:	781a      	ldrb	r2, [r3, #0]
 8017448:	2a39      	cmp	r2, #57	@ 0x39
 801744a:	d108      	bne.n	801745e <_dtoa_r+0x752>
 801744c:	9a08      	ldr	r2, [sp, #32]
 801744e:	429a      	cmp	r2, r3
 8017450:	d1f7      	bne.n	8017442 <_dtoa_r+0x736>
 8017452:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017454:	9908      	ldr	r1, [sp, #32]
 8017456:	3201      	adds	r2, #1
 8017458:	920c      	str	r2, [sp, #48]	@ 0x30
 801745a:	2230      	movs	r2, #48	@ 0x30
 801745c:	700a      	strb	r2, [r1, #0]
 801745e:	781a      	ldrb	r2, [r3, #0]
 8017460:	3201      	adds	r2, #1
 8017462:	701a      	strb	r2, [r3, #0]
 8017464:	e7a4      	b.n	80173b0 <_dtoa_r+0x6a4>
 8017466:	2200      	movs	r2, #0
 8017468:	4bc6      	ldr	r3, [pc, #792]	@ (8017784 <_dtoa_r+0xa78>)
 801746a:	f7eb f865 	bl	8002538 <__aeabi_dmul>
 801746e:	2200      	movs	r2, #0
 8017470:	2300      	movs	r3, #0
 8017472:	0006      	movs	r6, r0
 8017474:	000f      	movs	r7, r1
 8017476:	f7e8 ffe9 	bl	800044c <__aeabi_dcmpeq>
 801747a:	2800      	cmp	r0, #0
 801747c:	d100      	bne.n	8017480 <_dtoa_r+0x774>
 801747e:	e6a1      	b.n	80171c4 <_dtoa_r+0x4b8>
 8017480:	e6d8      	b.n	8017234 <_dtoa_r+0x528>
 8017482:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8017484:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8017486:	9c06      	ldr	r4, [sp, #24]
 8017488:	2f00      	cmp	r7, #0
 801748a:	d014      	beq.n	80174b6 <_dtoa_r+0x7aa>
 801748c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801748e:	2a01      	cmp	r2, #1
 8017490:	dd00      	ble.n	8017494 <_dtoa_r+0x788>
 8017492:	e0c8      	b.n	8017626 <_dtoa_r+0x91a>
 8017494:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017496:	2a00      	cmp	r2, #0
 8017498:	d100      	bne.n	801749c <_dtoa_r+0x790>
 801749a:	e0be      	b.n	801761a <_dtoa_r+0x90e>
 801749c:	4aba      	ldr	r2, [pc, #744]	@ (8017788 <_dtoa_r+0xa7c>)
 801749e:	189b      	adds	r3, r3, r2
 80174a0:	9a06      	ldr	r2, [sp, #24]
 80174a2:	2101      	movs	r1, #1
 80174a4:	18d2      	adds	r2, r2, r3
 80174a6:	9206      	str	r2, [sp, #24]
 80174a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80174aa:	9803      	ldr	r0, [sp, #12]
 80174ac:	18d3      	adds	r3, r2, r3
 80174ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80174b0:	f000 fc22 	bl	8017cf8 <__i2b>
 80174b4:	0007      	movs	r7, r0
 80174b6:	2c00      	cmp	r4, #0
 80174b8:	d00e      	beq.n	80174d8 <_dtoa_r+0x7cc>
 80174ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80174bc:	2b00      	cmp	r3, #0
 80174be:	dd0b      	ble.n	80174d8 <_dtoa_r+0x7cc>
 80174c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80174c2:	0023      	movs	r3, r4
 80174c4:	4294      	cmp	r4, r2
 80174c6:	dd00      	ble.n	80174ca <_dtoa_r+0x7be>
 80174c8:	0013      	movs	r3, r2
 80174ca:	9a06      	ldr	r2, [sp, #24]
 80174cc:	1ae4      	subs	r4, r4, r3
 80174ce:	1ad2      	subs	r2, r2, r3
 80174d0:	9206      	str	r2, [sp, #24]
 80174d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80174d4:	1ad3      	subs	r3, r2, r3
 80174d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80174d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d01f      	beq.n	801751e <_dtoa_r+0x812>
 80174de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d100      	bne.n	80174e6 <_dtoa_r+0x7da>
 80174e4:	e0b5      	b.n	8017652 <_dtoa_r+0x946>
 80174e6:	2d00      	cmp	r5, #0
 80174e8:	d010      	beq.n	801750c <_dtoa_r+0x800>
 80174ea:	0039      	movs	r1, r7
 80174ec:	002a      	movs	r2, r5
 80174ee:	9803      	ldr	r0, [sp, #12]
 80174f0:	f000 fccc 	bl	8017e8c <__pow5mult>
 80174f4:	9a05      	ldr	r2, [sp, #20]
 80174f6:	0001      	movs	r1, r0
 80174f8:	0007      	movs	r7, r0
 80174fa:	9803      	ldr	r0, [sp, #12]
 80174fc:	f000 fc14 	bl	8017d28 <__multiply>
 8017500:	0006      	movs	r6, r0
 8017502:	9905      	ldr	r1, [sp, #20]
 8017504:	9803      	ldr	r0, [sp, #12]
 8017506:	f000 fb3f 	bl	8017b88 <_Bfree>
 801750a:	9605      	str	r6, [sp, #20]
 801750c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801750e:	1b5a      	subs	r2, r3, r5
 8017510:	42ab      	cmp	r3, r5
 8017512:	d004      	beq.n	801751e <_dtoa_r+0x812>
 8017514:	9905      	ldr	r1, [sp, #20]
 8017516:	9803      	ldr	r0, [sp, #12]
 8017518:	f000 fcb8 	bl	8017e8c <__pow5mult>
 801751c:	9005      	str	r0, [sp, #20]
 801751e:	2101      	movs	r1, #1
 8017520:	9803      	ldr	r0, [sp, #12]
 8017522:	f000 fbe9 	bl	8017cf8 <__i2b>
 8017526:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017528:	0006      	movs	r6, r0
 801752a:	2b00      	cmp	r3, #0
 801752c:	d100      	bne.n	8017530 <_dtoa_r+0x824>
 801752e:	e1bc      	b.n	80178aa <_dtoa_r+0xb9e>
 8017530:	001a      	movs	r2, r3
 8017532:	0001      	movs	r1, r0
 8017534:	9803      	ldr	r0, [sp, #12]
 8017536:	f000 fca9 	bl	8017e8c <__pow5mult>
 801753a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801753c:	0006      	movs	r6, r0
 801753e:	2500      	movs	r5, #0
 8017540:	2b01      	cmp	r3, #1
 8017542:	dc16      	bgt.n	8017572 <_dtoa_r+0x866>
 8017544:	2500      	movs	r5, #0
 8017546:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017548:	42ab      	cmp	r3, r5
 801754a:	d10e      	bne.n	801756a <_dtoa_r+0x85e>
 801754c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801754e:	031b      	lsls	r3, r3, #12
 8017550:	42ab      	cmp	r3, r5
 8017552:	d10a      	bne.n	801756a <_dtoa_r+0x85e>
 8017554:	4b8d      	ldr	r3, [pc, #564]	@ (801778c <_dtoa_r+0xa80>)
 8017556:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017558:	4213      	tst	r3, r2
 801755a:	d006      	beq.n	801756a <_dtoa_r+0x85e>
 801755c:	9b06      	ldr	r3, [sp, #24]
 801755e:	3501      	adds	r5, #1
 8017560:	3301      	adds	r3, #1
 8017562:	9306      	str	r3, [sp, #24]
 8017564:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017566:	3301      	adds	r3, #1
 8017568:	930d      	str	r3, [sp, #52]	@ 0x34
 801756a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801756c:	2001      	movs	r0, #1
 801756e:	2b00      	cmp	r3, #0
 8017570:	d008      	beq.n	8017584 <_dtoa_r+0x878>
 8017572:	6933      	ldr	r3, [r6, #16]
 8017574:	3303      	adds	r3, #3
 8017576:	009b      	lsls	r3, r3, #2
 8017578:	18f3      	adds	r3, r6, r3
 801757a:	6858      	ldr	r0, [r3, #4]
 801757c:	f000 fb6c 	bl	8017c58 <__hi0bits>
 8017580:	2320      	movs	r3, #32
 8017582:	1a18      	subs	r0, r3, r0
 8017584:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017586:	1818      	adds	r0, r3, r0
 8017588:	0002      	movs	r2, r0
 801758a:	231f      	movs	r3, #31
 801758c:	401a      	ands	r2, r3
 801758e:	4218      	tst	r0, r3
 8017590:	d065      	beq.n	801765e <_dtoa_r+0x952>
 8017592:	3301      	adds	r3, #1
 8017594:	1a9b      	subs	r3, r3, r2
 8017596:	2b04      	cmp	r3, #4
 8017598:	dd5d      	ble.n	8017656 <_dtoa_r+0x94a>
 801759a:	231c      	movs	r3, #28
 801759c:	1a9b      	subs	r3, r3, r2
 801759e:	9a06      	ldr	r2, [sp, #24]
 80175a0:	18e4      	adds	r4, r4, r3
 80175a2:	18d2      	adds	r2, r2, r3
 80175a4:	9206      	str	r2, [sp, #24]
 80175a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80175a8:	18d3      	adds	r3, r2, r3
 80175aa:	930d      	str	r3, [sp, #52]	@ 0x34
 80175ac:	9b06      	ldr	r3, [sp, #24]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	dd05      	ble.n	80175be <_dtoa_r+0x8b2>
 80175b2:	001a      	movs	r2, r3
 80175b4:	9905      	ldr	r1, [sp, #20]
 80175b6:	9803      	ldr	r0, [sp, #12]
 80175b8:	f000 fcc4 	bl	8017f44 <__lshift>
 80175bc:	9005      	str	r0, [sp, #20]
 80175be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	dd05      	ble.n	80175d0 <_dtoa_r+0x8c4>
 80175c4:	0031      	movs	r1, r6
 80175c6:	001a      	movs	r2, r3
 80175c8:	9803      	ldr	r0, [sp, #12]
 80175ca:	f000 fcbb 	bl	8017f44 <__lshift>
 80175ce:	0006      	movs	r6, r0
 80175d0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d045      	beq.n	8017662 <_dtoa_r+0x956>
 80175d6:	0031      	movs	r1, r6
 80175d8:	9805      	ldr	r0, [sp, #20]
 80175da:	f000 fd1f 	bl	801801c <__mcmp>
 80175de:	2800      	cmp	r0, #0
 80175e0:	da3f      	bge.n	8017662 <_dtoa_r+0x956>
 80175e2:	9b04      	ldr	r3, [sp, #16]
 80175e4:	220a      	movs	r2, #10
 80175e6:	3b01      	subs	r3, #1
 80175e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80175ea:	9905      	ldr	r1, [sp, #20]
 80175ec:	2300      	movs	r3, #0
 80175ee:	9803      	ldr	r0, [sp, #12]
 80175f0:	f000 faee 	bl	8017bd0 <__multadd>
 80175f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80175f6:	9005      	str	r0, [sp, #20]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d100      	bne.n	80175fe <_dtoa_r+0x8f2>
 80175fc:	e15c      	b.n	80178b8 <_dtoa_r+0xbac>
 80175fe:	2300      	movs	r3, #0
 8017600:	0039      	movs	r1, r7
 8017602:	220a      	movs	r2, #10
 8017604:	9803      	ldr	r0, [sp, #12]
 8017606:	f000 fae3 	bl	8017bd0 <__multadd>
 801760a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801760c:	0007      	movs	r7, r0
 801760e:	2b00      	cmp	r3, #0
 8017610:	dc55      	bgt.n	80176be <_dtoa_r+0x9b2>
 8017612:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8017614:	2b02      	cmp	r3, #2
 8017616:	dc2d      	bgt.n	8017674 <_dtoa_r+0x968>
 8017618:	e051      	b.n	80176be <_dtoa_r+0x9b2>
 801761a:	2336      	movs	r3, #54	@ 0x36
 801761c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801761e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8017620:	9c06      	ldr	r4, [sp, #24]
 8017622:	1a9b      	subs	r3, r3, r2
 8017624:	e73c      	b.n	80174a0 <_dtoa_r+0x794>
 8017626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017628:	1e5d      	subs	r5, r3, #1
 801762a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801762c:	42ab      	cmp	r3, r5
 801762e:	db08      	blt.n	8017642 <_dtoa_r+0x936>
 8017630:	1b5d      	subs	r5, r3, r5
 8017632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017634:	9c06      	ldr	r4, [sp, #24]
 8017636:	2b00      	cmp	r3, #0
 8017638:	db00      	blt.n	801763c <_dtoa_r+0x930>
 801763a:	e731      	b.n	80174a0 <_dtoa_r+0x794>
 801763c:	1ae4      	subs	r4, r4, r3
 801763e:	2300      	movs	r3, #0
 8017640:	e72e      	b.n	80174a0 <_dtoa_r+0x794>
 8017642:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017644:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017646:	1aeb      	subs	r3, r5, r3
 8017648:	18d3      	adds	r3, r2, r3
 801764a:	950f      	str	r5, [sp, #60]	@ 0x3c
 801764c:	9314      	str	r3, [sp, #80]	@ 0x50
 801764e:	2500      	movs	r5, #0
 8017650:	e7ef      	b.n	8017632 <_dtoa_r+0x926>
 8017652:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017654:	e75e      	b.n	8017514 <_dtoa_r+0x808>
 8017656:	2b04      	cmp	r3, #4
 8017658:	d0a8      	beq.n	80175ac <_dtoa_r+0x8a0>
 801765a:	331c      	adds	r3, #28
 801765c:	e79f      	b.n	801759e <_dtoa_r+0x892>
 801765e:	0013      	movs	r3, r2
 8017660:	e7fb      	b.n	801765a <_dtoa_r+0x94e>
 8017662:	9b04      	ldr	r3, [sp, #16]
 8017664:	930c      	str	r3, [sp, #48]	@ 0x30
 8017666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017668:	930e      	str	r3, [sp, #56]	@ 0x38
 801766a:	2b00      	cmp	r3, #0
 801766c:	dc23      	bgt.n	80176b6 <_dtoa_r+0x9aa>
 801766e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8017670:	2b02      	cmp	r3, #2
 8017672:	dd20      	ble.n	80176b6 <_dtoa_r+0x9aa>
 8017674:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017676:	2b00      	cmp	r3, #0
 8017678:	d000      	beq.n	801767c <_dtoa_r+0x970>
 801767a:	e6b5      	b.n	80173e8 <_dtoa_r+0x6dc>
 801767c:	0031      	movs	r1, r6
 801767e:	2205      	movs	r2, #5
 8017680:	9803      	ldr	r0, [sp, #12]
 8017682:	f000 faa5 	bl	8017bd0 <__multadd>
 8017686:	0006      	movs	r6, r0
 8017688:	0001      	movs	r1, r0
 801768a:	9805      	ldr	r0, [sp, #20]
 801768c:	f000 fcc6 	bl	801801c <__mcmp>
 8017690:	2800      	cmp	r0, #0
 8017692:	dc00      	bgt.n	8017696 <_dtoa_r+0x98a>
 8017694:	e6a8      	b.n	80173e8 <_dtoa_r+0x6dc>
 8017696:	9b08      	ldr	r3, [sp, #32]
 8017698:	9a08      	ldr	r2, [sp, #32]
 801769a:	1c5c      	adds	r4, r3, #1
 801769c:	2331      	movs	r3, #49	@ 0x31
 801769e:	7013      	strb	r3, [r2, #0]
 80176a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80176a2:	3301      	adds	r3, #1
 80176a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80176a6:	e6a3      	b.n	80173f0 <_dtoa_r+0x6e4>
 80176a8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80176aa:	0037      	movs	r7, r6
 80176ac:	e7f3      	b.n	8017696 <_dtoa_r+0x98a>
 80176ae:	9b04      	ldr	r3, [sp, #16]
 80176b0:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80176b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80176b4:	e7f9      	b.n	80176aa <_dtoa_r+0x99e>
 80176b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d100      	bne.n	80176be <_dtoa_r+0x9b2>
 80176bc:	e100      	b.n	80178c0 <_dtoa_r+0xbb4>
 80176be:	2c00      	cmp	r4, #0
 80176c0:	dd05      	ble.n	80176ce <_dtoa_r+0x9c2>
 80176c2:	0039      	movs	r1, r7
 80176c4:	0022      	movs	r2, r4
 80176c6:	9803      	ldr	r0, [sp, #12]
 80176c8:	f000 fc3c 	bl	8017f44 <__lshift>
 80176cc:	0007      	movs	r7, r0
 80176ce:	0038      	movs	r0, r7
 80176d0:	2d00      	cmp	r5, #0
 80176d2:	d018      	beq.n	8017706 <_dtoa_r+0x9fa>
 80176d4:	6879      	ldr	r1, [r7, #4]
 80176d6:	9803      	ldr	r0, [sp, #12]
 80176d8:	f000 fa12 	bl	8017b00 <_Balloc>
 80176dc:	1e04      	subs	r4, r0, #0
 80176de:	d105      	bne.n	80176ec <_dtoa_r+0x9e0>
 80176e0:	0022      	movs	r2, r4
 80176e2:	4b2b      	ldr	r3, [pc, #172]	@ (8017790 <_dtoa_r+0xa84>)
 80176e4:	482b      	ldr	r0, [pc, #172]	@ (8017794 <_dtoa_r+0xa88>)
 80176e6:	492c      	ldr	r1, [pc, #176]	@ (8017798 <_dtoa_r+0xa8c>)
 80176e8:	f7ff fb25 	bl	8016d36 <_dtoa_r+0x2a>
 80176ec:	0039      	movs	r1, r7
 80176ee:	693a      	ldr	r2, [r7, #16]
 80176f0:	310c      	adds	r1, #12
 80176f2:	3202      	adds	r2, #2
 80176f4:	0092      	lsls	r2, r2, #2
 80176f6:	300c      	adds	r0, #12
 80176f8:	f7ff fa70 	bl	8016bdc <memcpy>
 80176fc:	2201      	movs	r2, #1
 80176fe:	0021      	movs	r1, r4
 8017700:	9803      	ldr	r0, [sp, #12]
 8017702:	f000 fc1f 	bl	8017f44 <__lshift>
 8017706:	9b08      	ldr	r3, [sp, #32]
 8017708:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801770a:	9306      	str	r3, [sp, #24]
 801770c:	3b01      	subs	r3, #1
 801770e:	189b      	adds	r3, r3, r2
 8017710:	2201      	movs	r2, #1
 8017712:	9704      	str	r7, [sp, #16]
 8017714:	0007      	movs	r7, r0
 8017716:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801771a:	4013      	ands	r3, r2
 801771c:	930e      	str	r3, [sp, #56]	@ 0x38
 801771e:	0031      	movs	r1, r6
 8017720:	9805      	ldr	r0, [sp, #20]
 8017722:	f7ff fa64 	bl	8016bee <quorem>
 8017726:	9904      	ldr	r1, [sp, #16]
 8017728:	0005      	movs	r5, r0
 801772a:	900a      	str	r0, [sp, #40]	@ 0x28
 801772c:	9805      	ldr	r0, [sp, #20]
 801772e:	f000 fc75 	bl	801801c <__mcmp>
 8017732:	003a      	movs	r2, r7
 8017734:	900d      	str	r0, [sp, #52]	@ 0x34
 8017736:	0031      	movs	r1, r6
 8017738:	9803      	ldr	r0, [sp, #12]
 801773a:	f000 fc8b 	bl	8018054 <__mdiff>
 801773e:	2201      	movs	r2, #1
 8017740:	68c3      	ldr	r3, [r0, #12]
 8017742:	0004      	movs	r4, r0
 8017744:	3530      	adds	r5, #48	@ 0x30
 8017746:	9209      	str	r2, [sp, #36]	@ 0x24
 8017748:	2b00      	cmp	r3, #0
 801774a:	d104      	bne.n	8017756 <_dtoa_r+0xa4a>
 801774c:	0001      	movs	r1, r0
 801774e:	9805      	ldr	r0, [sp, #20]
 8017750:	f000 fc64 	bl	801801c <__mcmp>
 8017754:	9009      	str	r0, [sp, #36]	@ 0x24
 8017756:	0021      	movs	r1, r4
 8017758:	9803      	ldr	r0, [sp, #12]
 801775a:	f000 fa15 	bl	8017b88 <_Bfree>
 801775e:	9b06      	ldr	r3, [sp, #24]
 8017760:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017762:	1c5c      	adds	r4, r3, #1
 8017764:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8017766:	4313      	orrs	r3, r2
 8017768:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801776a:	4313      	orrs	r3, r2
 801776c:	d116      	bne.n	801779c <_dtoa_r+0xa90>
 801776e:	2d39      	cmp	r5, #57	@ 0x39
 8017770:	d02f      	beq.n	80177d2 <_dtoa_r+0xac6>
 8017772:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017774:	2b00      	cmp	r3, #0
 8017776:	dd01      	ble.n	801777c <_dtoa_r+0xa70>
 8017778:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801777a:	3531      	adds	r5, #49	@ 0x31
 801777c:	9b06      	ldr	r3, [sp, #24]
 801777e:	701d      	strb	r5, [r3, #0]
 8017780:	e638      	b.n	80173f4 <_dtoa_r+0x6e8>
 8017782:	46c0      	nop			@ (mov r8, r8)
 8017784:	40240000 	.word	0x40240000
 8017788:	00000433 	.word	0x00000433
 801778c:	7ff00000 	.word	0x7ff00000
 8017790:	0801a61c 	.word	0x0801a61c
 8017794:	0801a5c4 	.word	0x0801a5c4
 8017798:	000002ef 	.word	0x000002ef
 801779c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801779e:	2b00      	cmp	r3, #0
 80177a0:	db04      	blt.n	80177ac <_dtoa_r+0xaa0>
 80177a2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80177a4:	4313      	orrs	r3, r2
 80177a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80177a8:	4313      	orrs	r3, r2
 80177aa:	d11e      	bne.n	80177ea <_dtoa_r+0xade>
 80177ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	dde4      	ble.n	801777c <_dtoa_r+0xa70>
 80177b2:	9905      	ldr	r1, [sp, #20]
 80177b4:	2201      	movs	r2, #1
 80177b6:	9803      	ldr	r0, [sp, #12]
 80177b8:	f000 fbc4 	bl	8017f44 <__lshift>
 80177bc:	0031      	movs	r1, r6
 80177be:	9005      	str	r0, [sp, #20]
 80177c0:	f000 fc2c 	bl	801801c <__mcmp>
 80177c4:	2800      	cmp	r0, #0
 80177c6:	dc02      	bgt.n	80177ce <_dtoa_r+0xac2>
 80177c8:	d1d8      	bne.n	801777c <_dtoa_r+0xa70>
 80177ca:	07eb      	lsls	r3, r5, #31
 80177cc:	d5d6      	bpl.n	801777c <_dtoa_r+0xa70>
 80177ce:	2d39      	cmp	r5, #57	@ 0x39
 80177d0:	d1d2      	bne.n	8017778 <_dtoa_r+0xa6c>
 80177d2:	2339      	movs	r3, #57	@ 0x39
 80177d4:	9a06      	ldr	r2, [sp, #24]
 80177d6:	7013      	strb	r3, [r2, #0]
 80177d8:	0023      	movs	r3, r4
 80177da:	001c      	movs	r4, r3
 80177dc:	3b01      	subs	r3, #1
 80177de:	781a      	ldrb	r2, [r3, #0]
 80177e0:	2a39      	cmp	r2, #57	@ 0x39
 80177e2:	d04f      	beq.n	8017884 <_dtoa_r+0xb78>
 80177e4:	3201      	adds	r2, #1
 80177e6:	701a      	strb	r2, [r3, #0]
 80177e8:	e604      	b.n	80173f4 <_dtoa_r+0x6e8>
 80177ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	dd03      	ble.n	80177f8 <_dtoa_r+0xaec>
 80177f0:	2d39      	cmp	r5, #57	@ 0x39
 80177f2:	d0ee      	beq.n	80177d2 <_dtoa_r+0xac6>
 80177f4:	3501      	adds	r5, #1
 80177f6:	e7c1      	b.n	801777c <_dtoa_r+0xa70>
 80177f8:	9b06      	ldr	r3, [sp, #24]
 80177fa:	9a06      	ldr	r2, [sp, #24]
 80177fc:	701d      	strb	r5, [r3, #0]
 80177fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017800:	4293      	cmp	r3, r2
 8017802:	d02a      	beq.n	801785a <_dtoa_r+0xb4e>
 8017804:	2300      	movs	r3, #0
 8017806:	220a      	movs	r2, #10
 8017808:	9905      	ldr	r1, [sp, #20]
 801780a:	9803      	ldr	r0, [sp, #12]
 801780c:	f000 f9e0 	bl	8017bd0 <__multadd>
 8017810:	9b04      	ldr	r3, [sp, #16]
 8017812:	9005      	str	r0, [sp, #20]
 8017814:	42bb      	cmp	r3, r7
 8017816:	d109      	bne.n	801782c <_dtoa_r+0xb20>
 8017818:	2300      	movs	r3, #0
 801781a:	220a      	movs	r2, #10
 801781c:	9904      	ldr	r1, [sp, #16]
 801781e:	9803      	ldr	r0, [sp, #12]
 8017820:	f000 f9d6 	bl	8017bd0 <__multadd>
 8017824:	9004      	str	r0, [sp, #16]
 8017826:	0007      	movs	r7, r0
 8017828:	9406      	str	r4, [sp, #24]
 801782a:	e778      	b.n	801771e <_dtoa_r+0xa12>
 801782c:	9904      	ldr	r1, [sp, #16]
 801782e:	2300      	movs	r3, #0
 8017830:	220a      	movs	r2, #10
 8017832:	9803      	ldr	r0, [sp, #12]
 8017834:	f000 f9cc 	bl	8017bd0 <__multadd>
 8017838:	2300      	movs	r3, #0
 801783a:	9004      	str	r0, [sp, #16]
 801783c:	220a      	movs	r2, #10
 801783e:	0039      	movs	r1, r7
 8017840:	9803      	ldr	r0, [sp, #12]
 8017842:	f000 f9c5 	bl	8017bd0 <__multadd>
 8017846:	e7ee      	b.n	8017826 <_dtoa_r+0xb1a>
 8017848:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801784a:	2401      	movs	r4, #1
 801784c:	2b00      	cmp	r3, #0
 801784e:	dd00      	ble.n	8017852 <_dtoa_r+0xb46>
 8017850:	001c      	movs	r4, r3
 8017852:	9b08      	ldr	r3, [sp, #32]
 8017854:	191c      	adds	r4, r3, r4
 8017856:	2300      	movs	r3, #0
 8017858:	9304      	str	r3, [sp, #16]
 801785a:	9905      	ldr	r1, [sp, #20]
 801785c:	2201      	movs	r2, #1
 801785e:	9803      	ldr	r0, [sp, #12]
 8017860:	f000 fb70 	bl	8017f44 <__lshift>
 8017864:	0031      	movs	r1, r6
 8017866:	9005      	str	r0, [sp, #20]
 8017868:	f000 fbd8 	bl	801801c <__mcmp>
 801786c:	2800      	cmp	r0, #0
 801786e:	dcb3      	bgt.n	80177d8 <_dtoa_r+0xacc>
 8017870:	d101      	bne.n	8017876 <_dtoa_r+0xb6a>
 8017872:	07ed      	lsls	r5, r5, #31
 8017874:	d4b0      	bmi.n	80177d8 <_dtoa_r+0xacc>
 8017876:	0023      	movs	r3, r4
 8017878:	001c      	movs	r4, r3
 801787a:	3b01      	subs	r3, #1
 801787c:	781a      	ldrb	r2, [r3, #0]
 801787e:	2a30      	cmp	r2, #48	@ 0x30
 8017880:	d0fa      	beq.n	8017878 <_dtoa_r+0xb6c>
 8017882:	e5b7      	b.n	80173f4 <_dtoa_r+0x6e8>
 8017884:	9a08      	ldr	r2, [sp, #32]
 8017886:	429a      	cmp	r2, r3
 8017888:	d1a7      	bne.n	80177da <_dtoa_r+0xace>
 801788a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801788c:	3301      	adds	r3, #1
 801788e:	930c      	str	r3, [sp, #48]	@ 0x30
 8017890:	2331      	movs	r3, #49	@ 0x31
 8017892:	7013      	strb	r3, [r2, #0]
 8017894:	e5ae      	b.n	80173f4 <_dtoa_r+0x6e8>
 8017896:	4b15      	ldr	r3, [pc, #84]	@ (80178ec <_dtoa_r+0xbe0>)
 8017898:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801789a:	9308      	str	r3, [sp, #32]
 801789c:	4b14      	ldr	r3, [pc, #80]	@ (80178f0 <_dtoa_r+0xbe4>)
 801789e:	2a00      	cmp	r2, #0
 80178a0:	d001      	beq.n	80178a6 <_dtoa_r+0xb9a>
 80178a2:	f7ff fa7b 	bl	8016d9c <_dtoa_r+0x90>
 80178a6:	f7ff fa7b 	bl	8016da0 <_dtoa_r+0x94>
 80178aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80178ac:	2b01      	cmp	r3, #1
 80178ae:	dc00      	bgt.n	80178b2 <_dtoa_r+0xba6>
 80178b0:	e648      	b.n	8017544 <_dtoa_r+0x838>
 80178b2:	2001      	movs	r0, #1
 80178b4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80178b6:	e665      	b.n	8017584 <_dtoa_r+0x878>
 80178b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	dc00      	bgt.n	80178c0 <_dtoa_r+0xbb4>
 80178be:	e6d6      	b.n	801766e <_dtoa_r+0x962>
 80178c0:	2400      	movs	r4, #0
 80178c2:	0031      	movs	r1, r6
 80178c4:	9805      	ldr	r0, [sp, #20]
 80178c6:	f7ff f992 	bl	8016bee <quorem>
 80178ca:	9b08      	ldr	r3, [sp, #32]
 80178cc:	3030      	adds	r0, #48	@ 0x30
 80178ce:	5518      	strb	r0, [r3, r4]
 80178d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80178d2:	3401      	adds	r4, #1
 80178d4:	0005      	movs	r5, r0
 80178d6:	429c      	cmp	r4, r3
 80178d8:	dab6      	bge.n	8017848 <_dtoa_r+0xb3c>
 80178da:	2300      	movs	r3, #0
 80178dc:	220a      	movs	r2, #10
 80178de:	9905      	ldr	r1, [sp, #20]
 80178e0:	9803      	ldr	r0, [sp, #12]
 80178e2:	f000 f975 	bl	8017bd0 <__multadd>
 80178e6:	9005      	str	r0, [sp, #20]
 80178e8:	e7eb      	b.n	80178c2 <_dtoa_r+0xbb6>
 80178ea:	46c0      	nop			@ (mov r8, r8)
 80178ec:	0801a5a0 	.word	0x0801a5a0
 80178f0:	0801a5a8 	.word	0x0801a5a8

080178f4 <_free_r>:
 80178f4:	b570      	push	{r4, r5, r6, lr}
 80178f6:	0005      	movs	r5, r0
 80178f8:	1e0c      	subs	r4, r1, #0
 80178fa:	d010      	beq.n	801791e <_free_r+0x2a>
 80178fc:	3c04      	subs	r4, #4
 80178fe:	6823      	ldr	r3, [r4, #0]
 8017900:	2b00      	cmp	r3, #0
 8017902:	da00      	bge.n	8017906 <_free_r+0x12>
 8017904:	18e4      	adds	r4, r4, r3
 8017906:	0028      	movs	r0, r5
 8017908:	f000 f8ea 	bl	8017ae0 <__malloc_lock>
 801790c:	4a1d      	ldr	r2, [pc, #116]	@ (8017984 <_free_r+0x90>)
 801790e:	6813      	ldr	r3, [r2, #0]
 8017910:	2b00      	cmp	r3, #0
 8017912:	d105      	bne.n	8017920 <_free_r+0x2c>
 8017914:	6063      	str	r3, [r4, #4]
 8017916:	6014      	str	r4, [r2, #0]
 8017918:	0028      	movs	r0, r5
 801791a:	f000 f8e9 	bl	8017af0 <__malloc_unlock>
 801791e:	bd70      	pop	{r4, r5, r6, pc}
 8017920:	42a3      	cmp	r3, r4
 8017922:	d908      	bls.n	8017936 <_free_r+0x42>
 8017924:	6820      	ldr	r0, [r4, #0]
 8017926:	1821      	adds	r1, r4, r0
 8017928:	428b      	cmp	r3, r1
 801792a:	d1f3      	bne.n	8017914 <_free_r+0x20>
 801792c:	6819      	ldr	r1, [r3, #0]
 801792e:	685b      	ldr	r3, [r3, #4]
 8017930:	1809      	adds	r1, r1, r0
 8017932:	6021      	str	r1, [r4, #0]
 8017934:	e7ee      	b.n	8017914 <_free_r+0x20>
 8017936:	001a      	movs	r2, r3
 8017938:	685b      	ldr	r3, [r3, #4]
 801793a:	2b00      	cmp	r3, #0
 801793c:	d001      	beq.n	8017942 <_free_r+0x4e>
 801793e:	42a3      	cmp	r3, r4
 8017940:	d9f9      	bls.n	8017936 <_free_r+0x42>
 8017942:	6811      	ldr	r1, [r2, #0]
 8017944:	1850      	adds	r0, r2, r1
 8017946:	42a0      	cmp	r0, r4
 8017948:	d10b      	bne.n	8017962 <_free_r+0x6e>
 801794a:	6820      	ldr	r0, [r4, #0]
 801794c:	1809      	adds	r1, r1, r0
 801794e:	1850      	adds	r0, r2, r1
 8017950:	6011      	str	r1, [r2, #0]
 8017952:	4283      	cmp	r3, r0
 8017954:	d1e0      	bne.n	8017918 <_free_r+0x24>
 8017956:	6818      	ldr	r0, [r3, #0]
 8017958:	685b      	ldr	r3, [r3, #4]
 801795a:	1841      	adds	r1, r0, r1
 801795c:	6011      	str	r1, [r2, #0]
 801795e:	6053      	str	r3, [r2, #4]
 8017960:	e7da      	b.n	8017918 <_free_r+0x24>
 8017962:	42a0      	cmp	r0, r4
 8017964:	d902      	bls.n	801796c <_free_r+0x78>
 8017966:	230c      	movs	r3, #12
 8017968:	602b      	str	r3, [r5, #0]
 801796a:	e7d5      	b.n	8017918 <_free_r+0x24>
 801796c:	6820      	ldr	r0, [r4, #0]
 801796e:	1821      	adds	r1, r4, r0
 8017970:	428b      	cmp	r3, r1
 8017972:	d103      	bne.n	801797c <_free_r+0x88>
 8017974:	6819      	ldr	r1, [r3, #0]
 8017976:	685b      	ldr	r3, [r3, #4]
 8017978:	1809      	adds	r1, r1, r0
 801797a:	6021      	str	r1, [r4, #0]
 801797c:	6063      	str	r3, [r4, #4]
 801797e:	6054      	str	r4, [r2, #4]
 8017980:	e7ca      	b.n	8017918 <_free_r+0x24>
 8017982:	46c0      	nop			@ (mov r8, r8)
 8017984:	200043e8 	.word	0x200043e8

08017988 <malloc>:
 8017988:	b510      	push	{r4, lr}
 801798a:	4b03      	ldr	r3, [pc, #12]	@ (8017998 <malloc+0x10>)
 801798c:	0001      	movs	r1, r0
 801798e:	6818      	ldr	r0, [r3, #0]
 8017990:	f000 f826 	bl	80179e0 <_malloc_r>
 8017994:	bd10      	pop	{r4, pc}
 8017996:	46c0      	nop			@ (mov r8, r8)
 8017998:	200002d4 	.word	0x200002d4

0801799c <sbrk_aligned>:
 801799c:	b570      	push	{r4, r5, r6, lr}
 801799e:	4e0f      	ldr	r6, [pc, #60]	@ (80179dc <sbrk_aligned+0x40>)
 80179a0:	000d      	movs	r5, r1
 80179a2:	6831      	ldr	r1, [r6, #0]
 80179a4:	0004      	movs	r4, r0
 80179a6:	2900      	cmp	r1, #0
 80179a8:	d102      	bne.n	80179b0 <sbrk_aligned+0x14>
 80179aa:	f001 f855 	bl	8018a58 <_sbrk_r>
 80179ae:	6030      	str	r0, [r6, #0]
 80179b0:	0029      	movs	r1, r5
 80179b2:	0020      	movs	r0, r4
 80179b4:	f001 f850 	bl	8018a58 <_sbrk_r>
 80179b8:	1c43      	adds	r3, r0, #1
 80179ba:	d103      	bne.n	80179c4 <sbrk_aligned+0x28>
 80179bc:	2501      	movs	r5, #1
 80179be:	426d      	negs	r5, r5
 80179c0:	0028      	movs	r0, r5
 80179c2:	bd70      	pop	{r4, r5, r6, pc}
 80179c4:	2303      	movs	r3, #3
 80179c6:	1cc5      	adds	r5, r0, #3
 80179c8:	439d      	bics	r5, r3
 80179ca:	42a8      	cmp	r0, r5
 80179cc:	d0f8      	beq.n	80179c0 <sbrk_aligned+0x24>
 80179ce:	1a29      	subs	r1, r5, r0
 80179d0:	0020      	movs	r0, r4
 80179d2:	f001 f841 	bl	8018a58 <_sbrk_r>
 80179d6:	3001      	adds	r0, #1
 80179d8:	d1f2      	bne.n	80179c0 <sbrk_aligned+0x24>
 80179da:	e7ef      	b.n	80179bc <sbrk_aligned+0x20>
 80179dc:	200043e4 	.word	0x200043e4

080179e0 <_malloc_r>:
 80179e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80179e2:	2203      	movs	r2, #3
 80179e4:	1ccb      	adds	r3, r1, #3
 80179e6:	4393      	bics	r3, r2
 80179e8:	3308      	adds	r3, #8
 80179ea:	0005      	movs	r5, r0
 80179ec:	001f      	movs	r7, r3
 80179ee:	2b0c      	cmp	r3, #12
 80179f0:	d234      	bcs.n	8017a5c <_malloc_r+0x7c>
 80179f2:	270c      	movs	r7, #12
 80179f4:	42b9      	cmp	r1, r7
 80179f6:	d833      	bhi.n	8017a60 <_malloc_r+0x80>
 80179f8:	0028      	movs	r0, r5
 80179fa:	f000 f871 	bl	8017ae0 <__malloc_lock>
 80179fe:	4e37      	ldr	r6, [pc, #220]	@ (8017adc <_malloc_r+0xfc>)
 8017a00:	6833      	ldr	r3, [r6, #0]
 8017a02:	001c      	movs	r4, r3
 8017a04:	2c00      	cmp	r4, #0
 8017a06:	d12f      	bne.n	8017a68 <_malloc_r+0x88>
 8017a08:	0039      	movs	r1, r7
 8017a0a:	0028      	movs	r0, r5
 8017a0c:	f7ff ffc6 	bl	801799c <sbrk_aligned>
 8017a10:	0004      	movs	r4, r0
 8017a12:	1c43      	adds	r3, r0, #1
 8017a14:	d15f      	bne.n	8017ad6 <_malloc_r+0xf6>
 8017a16:	6834      	ldr	r4, [r6, #0]
 8017a18:	9400      	str	r4, [sp, #0]
 8017a1a:	9b00      	ldr	r3, [sp, #0]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d14a      	bne.n	8017ab6 <_malloc_r+0xd6>
 8017a20:	2c00      	cmp	r4, #0
 8017a22:	d052      	beq.n	8017aca <_malloc_r+0xea>
 8017a24:	6823      	ldr	r3, [r4, #0]
 8017a26:	0028      	movs	r0, r5
 8017a28:	18e3      	adds	r3, r4, r3
 8017a2a:	9900      	ldr	r1, [sp, #0]
 8017a2c:	9301      	str	r3, [sp, #4]
 8017a2e:	f001 f813 	bl	8018a58 <_sbrk_r>
 8017a32:	9b01      	ldr	r3, [sp, #4]
 8017a34:	4283      	cmp	r3, r0
 8017a36:	d148      	bne.n	8017aca <_malloc_r+0xea>
 8017a38:	6823      	ldr	r3, [r4, #0]
 8017a3a:	0028      	movs	r0, r5
 8017a3c:	1aff      	subs	r7, r7, r3
 8017a3e:	0039      	movs	r1, r7
 8017a40:	f7ff ffac 	bl	801799c <sbrk_aligned>
 8017a44:	3001      	adds	r0, #1
 8017a46:	d040      	beq.n	8017aca <_malloc_r+0xea>
 8017a48:	6823      	ldr	r3, [r4, #0]
 8017a4a:	19db      	adds	r3, r3, r7
 8017a4c:	6023      	str	r3, [r4, #0]
 8017a4e:	6833      	ldr	r3, [r6, #0]
 8017a50:	685a      	ldr	r2, [r3, #4]
 8017a52:	2a00      	cmp	r2, #0
 8017a54:	d133      	bne.n	8017abe <_malloc_r+0xde>
 8017a56:	9b00      	ldr	r3, [sp, #0]
 8017a58:	6033      	str	r3, [r6, #0]
 8017a5a:	e019      	b.n	8017a90 <_malloc_r+0xb0>
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	dac9      	bge.n	80179f4 <_malloc_r+0x14>
 8017a60:	230c      	movs	r3, #12
 8017a62:	602b      	str	r3, [r5, #0]
 8017a64:	2000      	movs	r0, #0
 8017a66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017a68:	6821      	ldr	r1, [r4, #0]
 8017a6a:	1bc9      	subs	r1, r1, r7
 8017a6c:	d420      	bmi.n	8017ab0 <_malloc_r+0xd0>
 8017a6e:	290b      	cmp	r1, #11
 8017a70:	d90a      	bls.n	8017a88 <_malloc_r+0xa8>
 8017a72:	19e2      	adds	r2, r4, r7
 8017a74:	6027      	str	r7, [r4, #0]
 8017a76:	42a3      	cmp	r3, r4
 8017a78:	d104      	bne.n	8017a84 <_malloc_r+0xa4>
 8017a7a:	6032      	str	r2, [r6, #0]
 8017a7c:	6863      	ldr	r3, [r4, #4]
 8017a7e:	6011      	str	r1, [r2, #0]
 8017a80:	6053      	str	r3, [r2, #4]
 8017a82:	e005      	b.n	8017a90 <_malloc_r+0xb0>
 8017a84:	605a      	str	r2, [r3, #4]
 8017a86:	e7f9      	b.n	8017a7c <_malloc_r+0x9c>
 8017a88:	6862      	ldr	r2, [r4, #4]
 8017a8a:	42a3      	cmp	r3, r4
 8017a8c:	d10e      	bne.n	8017aac <_malloc_r+0xcc>
 8017a8e:	6032      	str	r2, [r6, #0]
 8017a90:	0028      	movs	r0, r5
 8017a92:	f000 f82d 	bl	8017af0 <__malloc_unlock>
 8017a96:	0020      	movs	r0, r4
 8017a98:	2207      	movs	r2, #7
 8017a9a:	300b      	adds	r0, #11
 8017a9c:	1d23      	adds	r3, r4, #4
 8017a9e:	4390      	bics	r0, r2
 8017aa0:	1ac2      	subs	r2, r0, r3
 8017aa2:	4298      	cmp	r0, r3
 8017aa4:	d0df      	beq.n	8017a66 <_malloc_r+0x86>
 8017aa6:	1a1b      	subs	r3, r3, r0
 8017aa8:	50a3      	str	r3, [r4, r2]
 8017aaa:	e7dc      	b.n	8017a66 <_malloc_r+0x86>
 8017aac:	605a      	str	r2, [r3, #4]
 8017aae:	e7ef      	b.n	8017a90 <_malloc_r+0xb0>
 8017ab0:	0023      	movs	r3, r4
 8017ab2:	6864      	ldr	r4, [r4, #4]
 8017ab4:	e7a6      	b.n	8017a04 <_malloc_r+0x24>
 8017ab6:	9c00      	ldr	r4, [sp, #0]
 8017ab8:	6863      	ldr	r3, [r4, #4]
 8017aba:	9300      	str	r3, [sp, #0]
 8017abc:	e7ad      	b.n	8017a1a <_malloc_r+0x3a>
 8017abe:	001a      	movs	r2, r3
 8017ac0:	685b      	ldr	r3, [r3, #4]
 8017ac2:	42a3      	cmp	r3, r4
 8017ac4:	d1fb      	bne.n	8017abe <_malloc_r+0xde>
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	e7da      	b.n	8017a80 <_malloc_r+0xa0>
 8017aca:	230c      	movs	r3, #12
 8017acc:	0028      	movs	r0, r5
 8017ace:	602b      	str	r3, [r5, #0]
 8017ad0:	f000 f80e 	bl	8017af0 <__malloc_unlock>
 8017ad4:	e7c6      	b.n	8017a64 <_malloc_r+0x84>
 8017ad6:	6007      	str	r7, [r0, #0]
 8017ad8:	e7da      	b.n	8017a90 <_malloc_r+0xb0>
 8017ada:	46c0      	nop			@ (mov r8, r8)
 8017adc:	200043e8 	.word	0x200043e8

08017ae0 <__malloc_lock>:
 8017ae0:	b510      	push	{r4, lr}
 8017ae2:	4802      	ldr	r0, [pc, #8]	@ (8017aec <__malloc_lock+0xc>)
 8017ae4:	f7ff f86d 	bl	8016bc2 <__retarget_lock_acquire_recursive>
 8017ae8:	bd10      	pop	{r4, pc}
 8017aea:	46c0      	nop			@ (mov r8, r8)
 8017aec:	200043e0 	.word	0x200043e0

08017af0 <__malloc_unlock>:
 8017af0:	b510      	push	{r4, lr}
 8017af2:	4802      	ldr	r0, [pc, #8]	@ (8017afc <__malloc_unlock+0xc>)
 8017af4:	f7ff f866 	bl	8016bc4 <__retarget_lock_release_recursive>
 8017af8:	bd10      	pop	{r4, pc}
 8017afa:	46c0      	nop			@ (mov r8, r8)
 8017afc:	200043e0 	.word	0x200043e0

08017b00 <_Balloc>:
 8017b00:	b570      	push	{r4, r5, r6, lr}
 8017b02:	69c5      	ldr	r5, [r0, #28]
 8017b04:	0006      	movs	r6, r0
 8017b06:	000c      	movs	r4, r1
 8017b08:	2d00      	cmp	r5, #0
 8017b0a:	d10e      	bne.n	8017b2a <_Balloc+0x2a>
 8017b0c:	2010      	movs	r0, #16
 8017b0e:	f7ff ff3b 	bl	8017988 <malloc>
 8017b12:	1e02      	subs	r2, r0, #0
 8017b14:	61f0      	str	r0, [r6, #28]
 8017b16:	d104      	bne.n	8017b22 <_Balloc+0x22>
 8017b18:	216b      	movs	r1, #107	@ 0x6b
 8017b1a:	4b19      	ldr	r3, [pc, #100]	@ (8017b80 <_Balloc+0x80>)
 8017b1c:	4819      	ldr	r0, [pc, #100]	@ (8017b84 <_Balloc+0x84>)
 8017b1e:	f000 ffad 	bl	8018a7c <__assert_func>
 8017b22:	6045      	str	r5, [r0, #4]
 8017b24:	6085      	str	r5, [r0, #8]
 8017b26:	6005      	str	r5, [r0, #0]
 8017b28:	60c5      	str	r5, [r0, #12]
 8017b2a:	69f5      	ldr	r5, [r6, #28]
 8017b2c:	68eb      	ldr	r3, [r5, #12]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d013      	beq.n	8017b5a <_Balloc+0x5a>
 8017b32:	69f3      	ldr	r3, [r6, #28]
 8017b34:	00a2      	lsls	r2, r4, #2
 8017b36:	68db      	ldr	r3, [r3, #12]
 8017b38:	189b      	adds	r3, r3, r2
 8017b3a:	6818      	ldr	r0, [r3, #0]
 8017b3c:	2800      	cmp	r0, #0
 8017b3e:	d118      	bne.n	8017b72 <_Balloc+0x72>
 8017b40:	2101      	movs	r1, #1
 8017b42:	000d      	movs	r5, r1
 8017b44:	40a5      	lsls	r5, r4
 8017b46:	1d6a      	adds	r2, r5, #5
 8017b48:	0030      	movs	r0, r6
 8017b4a:	0092      	lsls	r2, r2, #2
 8017b4c:	f000 ffb4 	bl	8018ab8 <_calloc_r>
 8017b50:	2800      	cmp	r0, #0
 8017b52:	d00c      	beq.n	8017b6e <_Balloc+0x6e>
 8017b54:	6044      	str	r4, [r0, #4]
 8017b56:	6085      	str	r5, [r0, #8]
 8017b58:	e00d      	b.n	8017b76 <_Balloc+0x76>
 8017b5a:	2221      	movs	r2, #33	@ 0x21
 8017b5c:	2104      	movs	r1, #4
 8017b5e:	0030      	movs	r0, r6
 8017b60:	f000 ffaa 	bl	8018ab8 <_calloc_r>
 8017b64:	69f3      	ldr	r3, [r6, #28]
 8017b66:	60e8      	str	r0, [r5, #12]
 8017b68:	68db      	ldr	r3, [r3, #12]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d1e1      	bne.n	8017b32 <_Balloc+0x32>
 8017b6e:	2000      	movs	r0, #0
 8017b70:	bd70      	pop	{r4, r5, r6, pc}
 8017b72:	6802      	ldr	r2, [r0, #0]
 8017b74:	601a      	str	r2, [r3, #0]
 8017b76:	2300      	movs	r3, #0
 8017b78:	6103      	str	r3, [r0, #16]
 8017b7a:	60c3      	str	r3, [r0, #12]
 8017b7c:	e7f8      	b.n	8017b70 <_Balloc+0x70>
 8017b7e:	46c0      	nop			@ (mov r8, r8)
 8017b80:	0801a5ad 	.word	0x0801a5ad
 8017b84:	0801a62d 	.word	0x0801a62d

08017b88 <_Bfree>:
 8017b88:	b570      	push	{r4, r5, r6, lr}
 8017b8a:	69c6      	ldr	r6, [r0, #28]
 8017b8c:	0005      	movs	r5, r0
 8017b8e:	000c      	movs	r4, r1
 8017b90:	2e00      	cmp	r6, #0
 8017b92:	d10e      	bne.n	8017bb2 <_Bfree+0x2a>
 8017b94:	2010      	movs	r0, #16
 8017b96:	f7ff fef7 	bl	8017988 <malloc>
 8017b9a:	1e02      	subs	r2, r0, #0
 8017b9c:	61e8      	str	r0, [r5, #28]
 8017b9e:	d104      	bne.n	8017baa <_Bfree+0x22>
 8017ba0:	218f      	movs	r1, #143	@ 0x8f
 8017ba2:	4b09      	ldr	r3, [pc, #36]	@ (8017bc8 <_Bfree+0x40>)
 8017ba4:	4809      	ldr	r0, [pc, #36]	@ (8017bcc <_Bfree+0x44>)
 8017ba6:	f000 ff69 	bl	8018a7c <__assert_func>
 8017baa:	6046      	str	r6, [r0, #4]
 8017bac:	6086      	str	r6, [r0, #8]
 8017bae:	6006      	str	r6, [r0, #0]
 8017bb0:	60c6      	str	r6, [r0, #12]
 8017bb2:	2c00      	cmp	r4, #0
 8017bb4:	d007      	beq.n	8017bc6 <_Bfree+0x3e>
 8017bb6:	69eb      	ldr	r3, [r5, #28]
 8017bb8:	6862      	ldr	r2, [r4, #4]
 8017bba:	68db      	ldr	r3, [r3, #12]
 8017bbc:	0092      	lsls	r2, r2, #2
 8017bbe:	189b      	adds	r3, r3, r2
 8017bc0:	681a      	ldr	r2, [r3, #0]
 8017bc2:	6022      	str	r2, [r4, #0]
 8017bc4:	601c      	str	r4, [r3, #0]
 8017bc6:	bd70      	pop	{r4, r5, r6, pc}
 8017bc8:	0801a5ad 	.word	0x0801a5ad
 8017bcc:	0801a62d 	.word	0x0801a62d

08017bd0 <__multadd>:
 8017bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017bd2:	000f      	movs	r7, r1
 8017bd4:	9001      	str	r0, [sp, #4]
 8017bd6:	000c      	movs	r4, r1
 8017bd8:	001e      	movs	r6, r3
 8017bda:	2000      	movs	r0, #0
 8017bdc:	690d      	ldr	r5, [r1, #16]
 8017bde:	3714      	adds	r7, #20
 8017be0:	683b      	ldr	r3, [r7, #0]
 8017be2:	3001      	adds	r0, #1
 8017be4:	b299      	uxth	r1, r3
 8017be6:	4351      	muls	r1, r2
 8017be8:	0c1b      	lsrs	r3, r3, #16
 8017bea:	4353      	muls	r3, r2
 8017bec:	1989      	adds	r1, r1, r6
 8017bee:	0c0e      	lsrs	r6, r1, #16
 8017bf0:	199b      	adds	r3, r3, r6
 8017bf2:	0c1e      	lsrs	r6, r3, #16
 8017bf4:	b289      	uxth	r1, r1
 8017bf6:	041b      	lsls	r3, r3, #16
 8017bf8:	185b      	adds	r3, r3, r1
 8017bfa:	c708      	stmia	r7!, {r3}
 8017bfc:	4285      	cmp	r5, r0
 8017bfe:	dcef      	bgt.n	8017be0 <__multadd+0x10>
 8017c00:	2e00      	cmp	r6, #0
 8017c02:	d022      	beq.n	8017c4a <__multadd+0x7a>
 8017c04:	68a3      	ldr	r3, [r4, #8]
 8017c06:	42ab      	cmp	r3, r5
 8017c08:	dc19      	bgt.n	8017c3e <__multadd+0x6e>
 8017c0a:	6861      	ldr	r1, [r4, #4]
 8017c0c:	9801      	ldr	r0, [sp, #4]
 8017c0e:	3101      	adds	r1, #1
 8017c10:	f7ff ff76 	bl	8017b00 <_Balloc>
 8017c14:	1e07      	subs	r7, r0, #0
 8017c16:	d105      	bne.n	8017c24 <__multadd+0x54>
 8017c18:	003a      	movs	r2, r7
 8017c1a:	21ba      	movs	r1, #186	@ 0xba
 8017c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8017c50 <__multadd+0x80>)
 8017c1e:	480d      	ldr	r0, [pc, #52]	@ (8017c54 <__multadd+0x84>)
 8017c20:	f000 ff2c 	bl	8018a7c <__assert_func>
 8017c24:	0021      	movs	r1, r4
 8017c26:	6922      	ldr	r2, [r4, #16]
 8017c28:	310c      	adds	r1, #12
 8017c2a:	3202      	adds	r2, #2
 8017c2c:	0092      	lsls	r2, r2, #2
 8017c2e:	300c      	adds	r0, #12
 8017c30:	f7fe ffd4 	bl	8016bdc <memcpy>
 8017c34:	0021      	movs	r1, r4
 8017c36:	9801      	ldr	r0, [sp, #4]
 8017c38:	f7ff ffa6 	bl	8017b88 <_Bfree>
 8017c3c:	003c      	movs	r4, r7
 8017c3e:	1d2b      	adds	r3, r5, #4
 8017c40:	009b      	lsls	r3, r3, #2
 8017c42:	18e3      	adds	r3, r4, r3
 8017c44:	3501      	adds	r5, #1
 8017c46:	605e      	str	r6, [r3, #4]
 8017c48:	6125      	str	r5, [r4, #16]
 8017c4a:	0020      	movs	r0, r4
 8017c4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017c4e:	46c0      	nop			@ (mov r8, r8)
 8017c50:	0801a61c 	.word	0x0801a61c
 8017c54:	0801a62d 	.word	0x0801a62d

08017c58 <__hi0bits>:
 8017c58:	2280      	movs	r2, #128	@ 0x80
 8017c5a:	0003      	movs	r3, r0
 8017c5c:	0252      	lsls	r2, r2, #9
 8017c5e:	2000      	movs	r0, #0
 8017c60:	4293      	cmp	r3, r2
 8017c62:	d201      	bcs.n	8017c68 <__hi0bits+0x10>
 8017c64:	041b      	lsls	r3, r3, #16
 8017c66:	3010      	adds	r0, #16
 8017c68:	2280      	movs	r2, #128	@ 0x80
 8017c6a:	0452      	lsls	r2, r2, #17
 8017c6c:	4293      	cmp	r3, r2
 8017c6e:	d201      	bcs.n	8017c74 <__hi0bits+0x1c>
 8017c70:	3008      	adds	r0, #8
 8017c72:	021b      	lsls	r3, r3, #8
 8017c74:	2280      	movs	r2, #128	@ 0x80
 8017c76:	0552      	lsls	r2, r2, #21
 8017c78:	4293      	cmp	r3, r2
 8017c7a:	d201      	bcs.n	8017c80 <__hi0bits+0x28>
 8017c7c:	3004      	adds	r0, #4
 8017c7e:	011b      	lsls	r3, r3, #4
 8017c80:	2280      	movs	r2, #128	@ 0x80
 8017c82:	05d2      	lsls	r2, r2, #23
 8017c84:	4293      	cmp	r3, r2
 8017c86:	d201      	bcs.n	8017c8c <__hi0bits+0x34>
 8017c88:	3002      	adds	r0, #2
 8017c8a:	009b      	lsls	r3, r3, #2
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	db03      	blt.n	8017c98 <__hi0bits+0x40>
 8017c90:	3001      	adds	r0, #1
 8017c92:	4213      	tst	r3, r2
 8017c94:	d100      	bne.n	8017c98 <__hi0bits+0x40>
 8017c96:	2020      	movs	r0, #32
 8017c98:	4770      	bx	lr

08017c9a <__lo0bits>:
 8017c9a:	6803      	ldr	r3, [r0, #0]
 8017c9c:	0001      	movs	r1, r0
 8017c9e:	2207      	movs	r2, #7
 8017ca0:	0018      	movs	r0, r3
 8017ca2:	4010      	ands	r0, r2
 8017ca4:	4213      	tst	r3, r2
 8017ca6:	d00d      	beq.n	8017cc4 <__lo0bits+0x2a>
 8017ca8:	3a06      	subs	r2, #6
 8017caa:	2000      	movs	r0, #0
 8017cac:	4213      	tst	r3, r2
 8017cae:	d105      	bne.n	8017cbc <__lo0bits+0x22>
 8017cb0:	3002      	adds	r0, #2
 8017cb2:	4203      	tst	r3, r0
 8017cb4:	d003      	beq.n	8017cbe <__lo0bits+0x24>
 8017cb6:	40d3      	lsrs	r3, r2
 8017cb8:	0010      	movs	r0, r2
 8017cba:	600b      	str	r3, [r1, #0]
 8017cbc:	4770      	bx	lr
 8017cbe:	089b      	lsrs	r3, r3, #2
 8017cc0:	600b      	str	r3, [r1, #0]
 8017cc2:	e7fb      	b.n	8017cbc <__lo0bits+0x22>
 8017cc4:	b29a      	uxth	r2, r3
 8017cc6:	2a00      	cmp	r2, #0
 8017cc8:	d101      	bne.n	8017cce <__lo0bits+0x34>
 8017cca:	2010      	movs	r0, #16
 8017ccc:	0c1b      	lsrs	r3, r3, #16
 8017cce:	b2da      	uxtb	r2, r3
 8017cd0:	2a00      	cmp	r2, #0
 8017cd2:	d101      	bne.n	8017cd8 <__lo0bits+0x3e>
 8017cd4:	3008      	adds	r0, #8
 8017cd6:	0a1b      	lsrs	r3, r3, #8
 8017cd8:	071a      	lsls	r2, r3, #28
 8017cda:	d101      	bne.n	8017ce0 <__lo0bits+0x46>
 8017cdc:	3004      	adds	r0, #4
 8017cde:	091b      	lsrs	r3, r3, #4
 8017ce0:	079a      	lsls	r2, r3, #30
 8017ce2:	d101      	bne.n	8017ce8 <__lo0bits+0x4e>
 8017ce4:	3002      	adds	r0, #2
 8017ce6:	089b      	lsrs	r3, r3, #2
 8017ce8:	07da      	lsls	r2, r3, #31
 8017cea:	d4e9      	bmi.n	8017cc0 <__lo0bits+0x26>
 8017cec:	3001      	adds	r0, #1
 8017cee:	085b      	lsrs	r3, r3, #1
 8017cf0:	d1e6      	bne.n	8017cc0 <__lo0bits+0x26>
 8017cf2:	2020      	movs	r0, #32
 8017cf4:	e7e2      	b.n	8017cbc <__lo0bits+0x22>
	...

08017cf8 <__i2b>:
 8017cf8:	b510      	push	{r4, lr}
 8017cfa:	000c      	movs	r4, r1
 8017cfc:	2101      	movs	r1, #1
 8017cfe:	f7ff feff 	bl	8017b00 <_Balloc>
 8017d02:	2800      	cmp	r0, #0
 8017d04:	d107      	bne.n	8017d16 <__i2b+0x1e>
 8017d06:	2146      	movs	r1, #70	@ 0x46
 8017d08:	4c05      	ldr	r4, [pc, #20]	@ (8017d20 <__i2b+0x28>)
 8017d0a:	0002      	movs	r2, r0
 8017d0c:	4b05      	ldr	r3, [pc, #20]	@ (8017d24 <__i2b+0x2c>)
 8017d0e:	0020      	movs	r0, r4
 8017d10:	31ff      	adds	r1, #255	@ 0xff
 8017d12:	f000 feb3 	bl	8018a7c <__assert_func>
 8017d16:	2301      	movs	r3, #1
 8017d18:	6144      	str	r4, [r0, #20]
 8017d1a:	6103      	str	r3, [r0, #16]
 8017d1c:	bd10      	pop	{r4, pc}
 8017d1e:	46c0      	nop			@ (mov r8, r8)
 8017d20:	0801a62d 	.word	0x0801a62d
 8017d24:	0801a61c 	.word	0x0801a61c

08017d28 <__multiply>:
 8017d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d2a:	0014      	movs	r4, r2
 8017d2c:	690a      	ldr	r2, [r1, #16]
 8017d2e:	6923      	ldr	r3, [r4, #16]
 8017d30:	000d      	movs	r5, r1
 8017d32:	b08b      	sub	sp, #44	@ 0x2c
 8017d34:	429a      	cmp	r2, r3
 8017d36:	db02      	blt.n	8017d3e <__multiply+0x16>
 8017d38:	0023      	movs	r3, r4
 8017d3a:	000c      	movs	r4, r1
 8017d3c:	001d      	movs	r5, r3
 8017d3e:	6927      	ldr	r7, [r4, #16]
 8017d40:	692e      	ldr	r6, [r5, #16]
 8017d42:	6861      	ldr	r1, [r4, #4]
 8017d44:	19bb      	adds	r3, r7, r6
 8017d46:	9303      	str	r3, [sp, #12]
 8017d48:	68a3      	ldr	r3, [r4, #8]
 8017d4a:	19ba      	adds	r2, r7, r6
 8017d4c:	4293      	cmp	r3, r2
 8017d4e:	da00      	bge.n	8017d52 <__multiply+0x2a>
 8017d50:	3101      	adds	r1, #1
 8017d52:	f7ff fed5 	bl	8017b00 <_Balloc>
 8017d56:	9002      	str	r0, [sp, #8]
 8017d58:	2800      	cmp	r0, #0
 8017d5a:	d106      	bne.n	8017d6a <__multiply+0x42>
 8017d5c:	21b1      	movs	r1, #177	@ 0xb1
 8017d5e:	4b49      	ldr	r3, [pc, #292]	@ (8017e84 <__multiply+0x15c>)
 8017d60:	4849      	ldr	r0, [pc, #292]	@ (8017e88 <__multiply+0x160>)
 8017d62:	9a02      	ldr	r2, [sp, #8]
 8017d64:	0049      	lsls	r1, r1, #1
 8017d66:	f000 fe89 	bl	8018a7c <__assert_func>
 8017d6a:	9b02      	ldr	r3, [sp, #8]
 8017d6c:	2200      	movs	r2, #0
 8017d6e:	3314      	adds	r3, #20
 8017d70:	469c      	mov	ip, r3
 8017d72:	19bb      	adds	r3, r7, r6
 8017d74:	009b      	lsls	r3, r3, #2
 8017d76:	4463      	add	r3, ip
 8017d78:	9304      	str	r3, [sp, #16]
 8017d7a:	4663      	mov	r3, ip
 8017d7c:	9904      	ldr	r1, [sp, #16]
 8017d7e:	428b      	cmp	r3, r1
 8017d80:	d32a      	bcc.n	8017dd8 <__multiply+0xb0>
 8017d82:	0023      	movs	r3, r4
 8017d84:	00bf      	lsls	r7, r7, #2
 8017d86:	3314      	adds	r3, #20
 8017d88:	3514      	adds	r5, #20
 8017d8a:	9308      	str	r3, [sp, #32]
 8017d8c:	00b6      	lsls	r6, r6, #2
 8017d8e:	19db      	adds	r3, r3, r7
 8017d90:	9305      	str	r3, [sp, #20]
 8017d92:	19ab      	adds	r3, r5, r6
 8017d94:	9309      	str	r3, [sp, #36]	@ 0x24
 8017d96:	2304      	movs	r3, #4
 8017d98:	9306      	str	r3, [sp, #24]
 8017d9a:	0023      	movs	r3, r4
 8017d9c:	9a05      	ldr	r2, [sp, #20]
 8017d9e:	3315      	adds	r3, #21
 8017da0:	9501      	str	r5, [sp, #4]
 8017da2:	429a      	cmp	r2, r3
 8017da4:	d305      	bcc.n	8017db2 <__multiply+0x8a>
 8017da6:	1b13      	subs	r3, r2, r4
 8017da8:	3b15      	subs	r3, #21
 8017daa:	089b      	lsrs	r3, r3, #2
 8017dac:	3301      	adds	r3, #1
 8017dae:	009b      	lsls	r3, r3, #2
 8017db0:	9306      	str	r3, [sp, #24]
 8017db2:	9b01      	ldr	r3, [sp, #4]
 8017db4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017db6:	4293      	cmp	r3, r2
 8017db8:	d310      	bcc.n	8017ddc <__multiply+0xb4>
 8017dba:	9b03      	ldr	r3, [sp, #12]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	dd05      	ble.n	8017dcc <__multiply+0xa4>
 8017dc0:	9b04      	ldr	r3, [sp, #16]
 8017dc2:	3b04      	subs	r3, #4
 8017dc4:	9304      	str	r3, [sp, #16]
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d056      	beq.n	8017e7a <__multiply+0x152>
 8017dcc:	9b02      	ldr	r3, [sp, #8]
 8017dce:	9a03      	ldr	r2, [sp, #12]
 8017dd0:	0018      	movs	r0, r3
 8017dd2:	611a      	str	r2, [r3, #16]
 8017dd4:	b00b      	add	sp, #44	@ 0x2c
 8017dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017dd8:	c304      	stmia	r3!, {r2}
 8017dda:	e7cf      	b.n	8017d7c <__multiply+0x54>
 8017ddc:	9b01      	ldr	r3, [sp, #4]
 8017dde:	6818      	ldr	r0, [r3, #0]
 8017de0:	b280      	uxth	r0, r0
 8017de2:	2800      	cmp	r0, #0
 8017de4:	d01e      	beq.n	8017e24 <__multiply+0xfc>
 8017de6:	4667      	mov	r7, ip
 8017de8:	2500      	movs	r5, #0
 8017dea:	9e08      	ldr	r6, [sp, #32]
 8017dec:	ce02      	ldmia	r6!, {r1}
 8017dee:	683b      	ldr	r3, [r7, #0]
 8017df0:	9307      	str	r3, [sp, #28]
 8017df2:	b28b      	uxth	r3, r1
 8017df4:	4343      	muls	r3, r0
 8017df6:	001a      	movs	r2, r3
 8017df8:	466b      	mov	r3, sp
 8017dfa:	0c09      	lsrs	r1, r1, #16
 8017dfc:	8b9b      	ldrh	r3, [r3, #28]
 8017dfe:	4341      	muls	r1, r0
 8017e00:	18d3      	adds	r3, r2, r3
 8017e02:	9a07      	ldr	r2, [sp, #28]
 8017e04:	195b      	adds	r3, r3, r5
 8017e06:	0c12      	lsrs	r2, r2, #16
 8017e08:	1889      	adds	r1, r1, r2
 8017e0a:	0c1a      	lsrs	r2, r3, #16
 8017e0c:	188a      	adds	r2, r1, r2
 8017e0e:	b29b      	uxth	r3, r3
 8017e10:	0c15      	lsrs	r5, r2, #16
 8017e12:	0412      	lsls	r2, r2, #16
 8017e14:	431a      	orrs	r2, r3
 8017e16:	9b05      	ldr	r3, [sp, #20]
 8017e18:	c704      	stmia	r7!, {r2}
 8017e1a:	42b3      	cmp	r3, r6
 8017e1c:	d8e6      	bhi.n	8017dec <__multiply+0xc4>
 8017e1e:	4663      	mov	r3, ip
 8017e20:	9a06      	ldr	r2, [sp, #24]
 8017e22:	509d      	str	r5, [r3, r2]
 8017e24:	9b01      	ldr	r3, [sp, #4]
 8017e26:	6818      	ldr	r0, [r3, #0]
 8017e28:	0c00      	lsrs	r0, r0, #16
 8017e2a:	d020      	beq.n	8017e6e <__multiply+0x146>
 8017e2c:	4663      	mov	r3, ip
 8017e2e:	0025      	movs	r5, r4
 8017e30:	4661      	mov	r1, ip
 8017e32:	2700      	movs	r7, #0
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	3514      	adds	r5, #20
 8017e38:	682a      	ldr	r2, [r5, #0]
 8017e3a:	680e      	ldr	r6, [r1, #0]
 8017e3c:	b292      	uxth	r2, r2
 8017e3e:	4342      	muls	r2, r0
 8017e40:	0c36      	lsrs	r6, r6, #16
 8017e42:	1992      	adds	r2, r2, r6
 8017e44:	19d2      	adds	r2, r2, r7
 8017e46:	0416      	lsls	r6, r2, #16
 8017e48:	b29b      	uxth	r3, r3
 8017e4a:	431e      	orrs	r6, r3
 8017e4c:	600e      	str	r6, [r1, #0]
 8017e4e:	cd40      	ldmia	r5!, {r6}
 8017e50:	684b      	ldr	r3, [r1, #4]
 8017e52:	0c36      	lsrs	r6, r6, #16
 8017e54:	4346      	muls	r6, r0
 8017e56:	b29b      	uxth	r3, r3
 8017e58:	0c12      	lsrs	r2, r2, #16
 8017e5a:	18f3      	adds	r3, r6, r3
 8017e5c:	189b      	adds	r3, r3, r2
 8017e5e:	9a05      	ldr	r2, [sp, #20]
 8017e60:	0c1f      	lsrs	r7, r3, #16
 8017e62:	3104      	adds	r1, #4
 8017e64:	42aa      	cmp	r2, r5
 8017e66:	d8e7      	bhi.n	8017e38 <__multiply+0x110>
 8017e68:	4662      	mov	r2, ip
 8017e6a:	9906      	ldr	r1, [sp, #24]
 8017e6c:	5053      	str	r3, [r2, r1]
 8017e6e:	9b01      	ldr	r3, [sp, #4]
 8017e70:	3304      	adds	r3, #4
 8017e72:	9301      	str	r3, [sp, #4]
 8017e74:	2304      	movs	r3, #4
 8017e76:	449c      	add	ip, r3
 8017e78:	e79b      	b.n	8017db2 <__multiply+0x8a>
 8017e7a:	9b03      	ldr	r3, [sp, #12]
 8017e7c:	3b01      	subs	r3, #1
 8017e7e:	9303      	str	r3, [sp, #12]
 8017e80:	e79b      	b.n	8017dba <__multiply+0x92>
 8017e82:	46c0      	nop			@ (mov r8, r8)
 8017e84:	0801a61c 	.word	0x0801a61c
 8017e88:	0801a62d 	.word	0x0801a62d

08017e8c <__pow5mult>:
 8017e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e8e:	2303      	movs	r3, #3
 8017e90:	0015      	movs	r5, r2
 8017e92:	0007      	movs	r7, r0
 8017e94:	000e      	movs	r6, r1
 8017e96:	401a      	ands	r2, r3
 8017e98:	421d      	tst	r5, r3
 8017e9a:	d008      	beq.n	8017eae <__pow5mult+0x22>
 8017e9c:	4925      	ldr	r1, [pc, #148]	@ (8017f34 <__pow5mult+0xa8>)
 8017e9e:	3a01      	subs	r2, #1
 8017ea0:	0092      	lsls	r2, r2, #2
 8017ea2:	5852      	ldr	r2, [r2, r1]
 8017ea4:	2300      	movs	r3, #0
 8017ea6:	0031      	movs	r1, r6
 8017ea8:	f7ff fe92 	bl	8017bd0 <__multadd>
 8017eac:	0006      	movs	r6, r0
 8017eae:	10ad      	asrs	r5, r5, #2
 8017eb0:	d03d      	beq.n	8017f2e <__pow5mult+0xa2>
 8017eb2:	69fc      	ldr	r4, [r7, #28]
 8017eb4:	2c00      	cmp	r4, #0
 8017eb6:	d10f      	bne.n	8017ed8 <__pow5mult+0x4c>
 8017eb8:	2010      	movs	r0, #16
 8017eba:	f7ff fd65 	bl	8017988 <malloc>
 8017ebe:	1e02      	subs	r2, r0, #0
 8017ec0:	61f8      	str	r0, [r7, #28]
 8017ec2:	d105      	bne.n	8017ed0 <__pow5mult+0x44>
 8017ec4:	21b4      	movs	r1, #180	@ 0xb4
 8017ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8017f38 <__pow5mult+0xac>)
 8017ec8:	481c      	ldr	r0, [pc, #112]	@ (8017f3c <__pow5mult+0xb0>)
 8017eca:	31ff      	adds	r1, #255	@ 0xff
 8017ecc:	f000 fdd6 	bl	8018a7c <__assert_func>
 8017ed0:	6044      	str	r4, [r0, #4]
 8017ed2:	6084      	str	r4, [r0, #8]
 8017ed4:	6004      	str	r4, [r0, #0]
 8017ed6:	60c4      	str	r4, [r0, #12]
 8017ed8:	69fb      	ldr	r3, [r7, #28]
 8017eda:	689c      	ldr	r4, [r3, #8]
 8017edc:	9301      	str	r3, [sp, #4]
 8017ede:	2c00      	cmp	r4, #0
 8017ee0:	d108      	bne.n	8017ef4 <__pow5mult+0x68>
 8017ee2:	0038      	movs	r0, r7
 8017ee4:	4916      	ldr	r1, [pc, #88]	@ (8017f40 <__pow5mult+0xb4>)
 8017ee6:	f7ff ff07 	bl	8017cf8 <__i2b>
 8017eea:	9b01      	ldr	r3, [sp, #4]
 8017eec:	0004      	movs	r4, r0
 8017eee:	6098      	str	r0, [r3, #8]
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	6003      	str	r3, [r0, #0]
 8017ef4:	2301      	movs	r3, #1
 8017ef6:	421d      	tst	r5, r3
 8017ef8:	d00a      	beq.n	8017f10 <__pow5mult+0x84>
 8017efa:	0031      	movs	r1, r6
 8017efc:	0022      	movs	r2, r4
 8017efe:	0038      	movs	r0, r7
 8017f00:	f7ff ff12 	bl	8017d28 <__multiply>
 8017f04:	0031      	movs	r1, r6
 8017f06:	9001      	str	r0, [sp, #4]
 8017f08:	0038      	movs	r0, r7
 8017f0a:	f7ff fe3d 	bl	8017b88 <_Bfree>
 8017f0e:	9e01      	ldr	r6, [sp, #4]
 8017f10:	106d      	asrs	r5, r5, #1
 8017f12:	d00c      	beq.n	8017f2e <__pow5mult+0xa2>
 8017f14:	6820      	ldr	r0, [r4, #0]
 8017f16:	2800      	cmp	r0, #0
 8017f18:	d107      	bne.n	8017f2a <__pow5mult+0x9e>
 8017f1a:	0022      	movs	r2, r4
 8017f1c:	0021      	movs	r1, r4
 8017f1e:	0038      	movs	r0, r7
 8017f20:	f7ff ff02 	bl	8017d28 <__multiply>
 8017f24:	2300      	movs	r3, #0
 8017f26:	6020      	str	r0, [r4, #0]
 8017f28:	6003      	str	r3, [r0, #0]
 8017f2a:	0004      	movs	r4, r0
 8017f2c:	e7e2      	b.n	8017ef4 <__pow5mult+0x68>
 8017f2e:	0030      	movs	r0, r6
 8017f30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017f32:	46c0      	nop			@ (mov r8, r8)
 8017f34:	0801a688 	.word	0x0801a688
 8017f38:	0801a5ad 	.word	0x0801a5ad
 8017f3c:	0801a62d 	.word	0x0801a62d
 8017f40:	00000271 	.word	0x00000271

08017f44 <__lshift>:
 8017f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f46:	000c      	movs	r4, r1
 8017f48:	0016      	movs	r6, r2
 8017f4a:	6923      	ldr	r3, [r4, #16]
 8017f4c:	1157      	asrs	r7, r2, #5
 8017f4e:	b085      	sub	sp, #20
 8017f50:	18fb      	adds	r3, r7, r3
 8017f52:	9301      	str	r3, [sp, #4]
 8017f54:	3301      	adds	r3, #1
 8017f56:	9300      	str	r3, [sp, #0]
 8017f58:	6849      	ldr	r1, [r1, #4]
 8017f5a:	68a3      	ldr	r3, [r4, #8]
 8017f5c:	9002      	str	r0, [sp, #8]
 8017f5e:	9a00      	ldr	r2, [sp, #0]
 8017f60:	4293      	cmp	r3, r2
 8017f62:	db10      	blt.n	8017f86 <__lshift+0x42>
 8017f64:	9802      	ldr	r0, [sp, #8]
 8017f66:	f7ff fdcb 	bl	8017b00 <_Balloc>
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	0001      	movs	r1, r0
 8017f6e:	0005      	movs	r5, r0
 8017f70:	001a      	movs	r2, r3
 8017f72:	3114      	adds	r1, #20
 8017f74:	4298      	cmp	r0, r3
 8017f76:	d10c      	bne.n	8017f92 <__lshift+0x4e>
 8017f78:	21ef      	movs	r1, #239	@ 0xef
 8017f7a:	002a      	movs	r2, r5
 8017f7c:	4b25      	ldr	r3, [pc, #148]	@ (8018014 <__lshift+0xd0>)
 8017f7e:	4826      	ldr	r0, [pc, #152]	@ (8018018 <__lshift+0xd4>)
 8017f80:	0049      	lsls	r1, r1, #1
 8017f82:	f000 fd7b 	bl	8018a7c <__assert_func>
 8017f86:	3101      	adds	r1, #1
 8017f88:	005b      	lsls	r3, r3, #1
 8017f8a:	e7e8      	b.n	8017f5e <__lshift+0x1a>
 8017f8c:	0098      	lsls	r0, r3, #2
 8017f8e:	500a      	str	r2, [r1, r0]
 8017f90:	3301      	adds	r3, #1
 8017f92:	42bb      	cmp	r3, r7
 8017f94:	dbfa      	blt.n	8017f8c <__lshift+0x48>
 8017f96:	43fb      	mvns	r3, r7
 8017f98:	17db      	asrs	r3, r3, #31
 8017f9a:	401f      	ands	r7, r3
 8017f9c:	00bf      	lsls	r7, r7, #2
 8017f9e:	0023      	movs	r3, r4
 8017fa0:	201f      	movs	r0, #31
 8017fa2:	19c9      	adds	r1, r1, r7
 8017fa4:	0037      	movs	r7, r6
 8017fa6:	6922      	ldr	r2, [r4, #16]
 8017fa8:	3314      	adds	r3, #20
 8017faa:	0092      	lsls	r2, r2, #2
 8017fac:	189a      	adds	r2, r3, r2
 8017fae:	4007      	ands	r7, r0
 8017fb0:	4206      	tst	r6, r0
 8017fb2:	d029      	beq.n	8018008 <__lshift+0xc4>
 8017fb4:	3001      	adds	r0, #1
 8017fb6:	1bc0      	subs	r0, r0, r7
 8017fb8:	9003      	str	r0, [sp, #12]
 8017fba:	468c      	mov	ip, r1
 8017fbc:	2000      	movs	r0, #0
 8017fbe:	681e      	ldr	r6, [r3, #0]
 8017fc0:	40be      	lsls	r6, r7
 8017fc2:	4306      	orrs	r6, r0
 8017fc4:	4660      	mov	r0, ip
 8017fc6:	c040      	stmia	r0!, {r6}
 8017fc8:	4684      	mov	ip, r0
 8017fca:	9e03      	ldr	r6, [sp, #12]
 8017fcc:	cb01      	ldmia	r3!, {r0}
 8017fce:	40f0      	lsrs	r0, r6
 8017fd0:	429a      	cmp	r2, r3
 8017fd2:	d8f4      	bhi.n	8017fbe <__lshift+0x7a>
 8017fd4:	0026      	movs	r6, r4
 8017fd6:	3615      	adds	r6, #21
 8017fd8:	2304      	movs	r3, #4
 8017fda:	42b2      	cmp	r2, r6
 8017fdc:	d304      	bcc.n	8017fe8 <__lshift+0xa4>
 8017fde:	1b13      	subs	r3, r2, r4
 8017fe0:	3b15      	subs	r3, #21
 8017fe2:	089b      	lsrs	r3, r3, #2
 8017fe4:	3301      	adds	r3, #1
 8017fe6:	009b      	lsls	r3, r3, #2
 8017fe8:	50c8      	str	r0, [r1, r3]
 8017fea:	2800      	cmp	r0, #0
 8017fec:	d002      	beq.n	8017ff4 <__lshift+0xb0>
 8017fee:	9b01      	ldr	r3, [sp, #4]
 8017ff0:	3302      	adds	r3, #2
 8017ff2:	9300      	str	r3, [sp, #0]
 8017ff4:	9b00      	ldr	r3, [sp, #0]
 8017ff6:	9802      	ldr	r0, [sp, #8]
 8017ff8:	3b01      	subs	r3, #1
 8017ffa:	0021      	movs	r1, r4
 8017ffc:	612b      	str	r3, [r5, #16]
 8017ffe:	f7ff fdc3 	bl	8017b88 <_Bfree>
 8018002:	0028      	movs	r0, r5
 8018004:	b005      	add	sp, #20
 8018006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018008:	cb01      	ldmia	r3!, {r0}
 801800a:	c101      	stmia	r1!, {r0}
 801800c:	429a      	cmp	r2, r3
 801800e:	d8fb      	bhi.n	8018008 <__lshift+0xc4>
 8018010:	e7f0      	b.n	8017ff4 <__lshift+0xb0>
 8018012:	46c0      	nop			@ (mov r8, r8)
 8018014:	0801a61c 	.word	0x0801a61c
 8018018:	0801a62d 	.word	0x0801a62d

0801801c <__mcmp>:
 801801c:	b530      	push	{r4, r5, lr}
 801801e:	690b      	ldr	r3, [r1, #16]
 8018020:	6904      	ldr	r4, [r0, #16]
 8018022:	0002      	movs	r2, r0
 8018024:	1ae0      	subs	r0, r4, r3
 8018026:	429c      	cmp	r4, r3
 8018028:	d10f      	bne.n	801804a <__mcmp+0x2e>
 801802a:	3214      	adds	r2, #20
 801802c:	009b      	lsls	r3, r3, #2
 801802e:	3114      	adds	r1, #20
 8018030:	0014      	movs	r4, r2
 8018032:	18c9      	adds	r1, r1, r3
 8018034:	18d2      	adds	r2, r2, r3
 8018036:	3a04      	subs	r2, #4
 8018038:	3904      	subs	r1, #4
 801803a:	6815      	ldr	r5, [r2, #0]
 801803c:	680b      	ldr	r3, [r1, #0]
 801803e:	429d      	cmp	r5, r3
 8018040:	d004      	beq.n	801804c <__mcmp+0x30>
 8018042:	2001      	movs	r0, #1
 8018044:	429d      	cmp	r5, r3
 8018046:	d200      	bcs.n	801804a <__mcmp+0x2e>
 8018048:	3802      	subs	r0, #2
 801804a:	bd30      	pop	{r4, r5, pc}
 801804c:	4294      	cmp	r4, r2
 801804e:	d3f2      	bcc.n	8018036 <__mcmp+0x1a>
 8018050:	e7fb      	b.n	801804a <__mcmp+0x2e>
	...

08018054 <__mdiff>:
 8018054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018056:	000c      	movs	r4, r1
 8018058:	b087      	sub	sp, #28
 801805a:	9000      	str	r0, [sp, #0]
 801805c:	0011      	movs	r1, r2
 801805e:	0020      	movs	r0, r4
 8018060:	0017      	movs	r7, r2
 8018062:	f7ff ffdb 	bl	801801c <__mcmp>
 8018066:	1e05      	subs	r5, r0, #0
 8018068:	d110      	bne.n	801808c <__mdiff+0x38>
 801806a:	0001      	movs	r1, r0
 801806c:	9800      	ldr	r0, [sp, #0]
 801806e:	f7ff fd47 	bl	8017b00 <_Balloc>
 8018072:	1e02      	subs	r2, r0, #0
 8018074:	d104      	bne.n	8018080 <__mdiff+0x2c>
 8018076:	4b40      	ldr	r3, [pc, #256]	@ (8018178 <__mdiff+0x124>)
 8018078:	4840      	ldr	r0, [pc, #256]	@ (801817c <__mdiff+0x128>)
 801807a:	4941      	ldr	r1, [pc, #260]	@ (8018180 <__mdiff+0x12c>)
 801807c:	f000 fcfe 	bl	8018a7c <__assert_func>
 8018080:	2301      	movs	r3, #1
 8018082:	6145      	str	r5, [r0, #20]
 8018084:	6103      	str	r3, [r0, #16]
 8018086:	0010      	movs	r0, r2
 8018088:	b007      	add	sp, #28
 801808a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801808c:	2600      	movs	r6, #0
 801808e:	42b0      	cmp	r0, r6
 8018090:	da03      	bge.n	801809a <__mdiff+0x46>
 8018092:	0023      	movs	r3, r4
 8018094:	003c      	movs	r4, r7
 8018096:	001f      	movs	r7, r3
 8018098:	3601      	adds	r6, #1
 801809a:	6861      	ldr	r1, [r4, #4]
 801809c:	9800      	ldr	r0, [sp, #0]
 801809e:	f7ff fd2f 	bl	8017b00 <_Balloc>
 80180a2:	1e02      	subs	r2, r0, #0
 80180a4:	d103      	bne.n	80180ae <__mdiff+0x5a>
 80180a6:	4b34      	ldr	r3, [pc, #208]	@ (8018178 <__mdiff+0x124>)
 80180a8:	4834      	ldr	r0, [pc, #208]	@ (801817c <__mdiff+0x128>)
 80180aa:	4936      	ldr	r1, [pc, #216]	@ (8018184 <__mdiff+0x130>)
 80180ac:	e7e6      	b.n	801807c <__mdiff+0x28>
 80180ae:	6923      	ldr	r3, [r4, #16]
 80180b0:	3414      	adds	r4, #20
 80180b2:	9300      	str	r3, [sp, #0]
 80180b4:	009b      	lsls	r3, r3, #2
 80180b6:	18e3      	adds	r3, r4, r3
 80180b8:	0021      	movs	r1, r4
 80180ba:	9401      	str	r4, [sp, #4]
 80180bc:	003c      	movs	r4, r7
 80180be:	9302      	str	r3, [sp, #8]
 80180c0:	693b      	ldr	r3, [r7, #16]
 80180c2:	3414      	adds	r4, #20
 80180c4:	009b      	lsls	r3, r3, #2
 80180c6:	18e3      	adds	r3, r4, r3
 80180c8:	9303      	str	r3, [sp, #12]
 80180ca:	0003      	movs	r3, r0
 80180cc:	60c6      	str	r6, [r0, #12]
 80180ce:	468c      	mov	ip, r1
 80180d0:	2000      	movs	r0, #0
 80180d2:	3314      	adds	r3, #20
 80180d4:	9304      	str	r3, [sp, #16]
 80180d6:	9305      	str	r3, [sp, #20]
 80180d8:	4663      	mov	r3, ip
 80180da:	cb20      	ldmia	r3!, {r5}
 80180dc:	b2a9      	uxth	r1, r5
 80180de:	000e      	movs	r6, r1
 80180e0:	469c      	mov	ip, r3
 80180e2:	cc08      	ldmia	r4!, {r3}
 80180e4:	0c2d      	lsrs	r5, r5, #16
 80180e6:	b299      	uxth	r1, r3
 80180e8:	1a71      	subs	r1, r6, r1
 80180ea:	1809      	adds	r1, r1, r0
 80180ec:	0c1b      	lsrs	r3, r3, #16
 80180ee:	1408      	asrs	r0, r1, #16
 80180f0:	1aeb      	subs	r3, r5, r3
 80180f2:	181b      	adds	r3, r3, r0
 80180f4:	1418      	asrs	r0, r3, #16
 80180f6:	b289      	uxth	r1, r1
 80180f8:	041b      	lsls	r3, r3, #16
 80180fa:	4319      	orrs	r1, r3
 80180fc:	9b05      	ldr	r3, [sp, #20]
 80180fe:	c302      	stmia	r3!, {r1}
 8018100:	9305      	str	r3, [sp, #20]
 8018102:	9b03      	ldr	r3, [sp, #12]
 8018104:	42a3      	cmp	r3, r4
 8018106:	d8e7      	bhi.n	80180d8 <__mdiff+0x84>
 8018108:	0039      	movs	r1, r7
 801810a:	9c03      	ldr	r4, [sp, #12]
 801810c:	3115      	adds	r1, #21
 801810e:	2304      	movs	r3, #4
 8018110:	428c      	cmp	r4, r1
 8018112:	d304      	bcc.n	801811e <__mdiff+0xca>
 8018114:	1be3      	subs	r3, r4, r7
 8018116:	3b15      	subs	r3, #21
 8018118:	089b      	lsrs	r3, r3, #2
 801811a:	3301      	adds	r3, #1
 801811c:	009b      	lsls	r3, r3, #2
 801811e:	9901      	ldr	r1, [sp, #4]
 8018120:	18cd      	adds	r5, r1, r3
 8018122:	9904      	ldr	r1, [sp, #16]
 8018124:	002e      	movs	r6, r5
 8018126:	18cb      	adds	r3, r1, r3
 8018128:	001f      	movs	r7, r3
 801812a:	9902      	ldr	r1, [sp, #8]
 801812c:	428e      	cmp	r6, r1
 801812e:	d311      	bcc.n	8018154 <__mdiff+0x100>
 8018130:	9c02      	ldr	r4, [sp, #8]
 8018132:	1ee9      	subs	r1, r5, #3
 8018134:	2000      	movs	r0, #0
 8018136:	428c      	cmp	r4, r1
 8018138:	d304      	bcc.n	8018144 <__mdiff+0xf0>
 801813a:	0021      	movs	r1, r4
 801813c:	3103      	adds	r1, #3
 801813e:	1b49      	subs	r1, r1, r5
 8018140:	0889      	lsrs	r1, r1, #2
 8018142:	0088      	lsls	r0, r1, #2
 8018144:	181b      	adds	r3, r3, r0
 8018146:	3b04      	subs	r3, #4
 8018148:	6819      	ldr	r1, [r3, #0]
 801814a:	2900      	cmp	r1, #0
 801814c:	d010      	beq.n	8018170 <__mdiff+0x11c>
 801814e:	9b00      	ldr	r3, [sp, #0]
 8018150:	6113      	str	r3, [r2, #16]
 8018152:	e798      	b.n	8018086 <__mdiff+0x32>
 8018154:	4684      	mov	ip, r0
 8018156:	ce02      	ldmia	r6!, {r1}
 8018158:	b288      	uxth	r0, r1
 801815a:	4460      	add	r0, ip
 801815c:	1400      	asrs	r0, r0, #16
 801815e:	0c0c      	lsrs	r4, r1, #16
 8018160:	1904      	adds	r4, r0, r4
 8018162:	4461      	add	r1, ip
 8018164:	1420      	asrs	r0, r4, #16
 8018166:	b289      	uxth	r1, r1
 8018168:	0424      	lsls	r4, r4, #16
 801816a:	4321      	orrs	r1, r4
 801816c:	c702      	stmia	r7!, {r1}
 801816e:	e7dc      	b.n	801812a <__mdiff+0xd6>
 8018170:	9900      	ldr	r1, [sp, #0]
 8018172:	3901      	subs	r1, #1
 8018174:	9100      	str	r1, [sp, #0]
 8018176:	e7e6      	b.n	8018146 <__mdiff+0xf2>
 8018178:	0801a61c 	.word	0x0801a61c
 801817c:	0801a62d 	.word	0x0801a62d
 8018180:	00000237 	.word	0x00000237
 8018184:	00000245 	.word	0x00000245

08018188 <__d2b>:
 8018188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801818a:	2101      	movs	r1, #1
 801818c:	0016      	movs	r6, r2
 801818e:	001f      	movs	r7, r3
 8018190:	f7ff fcb6 	bl	8017b00 <_Balloc>
 8018194:	1e04      	subs	r4, r0, #0
 8018196:	d105      	bne.n	80181a4 <__d2b+0x1c>
 8018198:	0022      	movs	r2, r4
 801819a:	4b25      	ldr	r3, [pc, #148]	@ (8018230 <__d2b+0xa8>)
 801819c:	4825      	ldr	r0, [pc, #148]	@ (8018234 <__d2b+0xac>)
 801819e:	4926      	ldr	r1, [pc, #152]	@ (8018238 <__d2b+0xb0>)
 80181a0:	f000 fc6c 	bl	8018a7c <__assert_func>
 80181a4:	033b      	lsls	r3, r7, #12
 80181a6:	007d      	lsls	r5, r7, #1
 80181a8:	0b1b      	lsrs	r3, r3, #12
 80181aa:	0d6d      	lsrs	r5, r5, #21
 80181ac:	d002      	beq.n	80181b4 <__d2b+0x2c>
 80181ae:	2280      	movs	r2, #128	@ 0x80
 80181b0:	0352      	lsls	r2, r2, #13
 80181b2:	4313      	orrs	r3, r2
 80181b4:	9301      	str	r3, [sp, #4]
 80181b6:	2e00      	cmp	r6, #0
 80181b8:	d025      	beq.n	8018206 <__d2b+0x7e>
 80181ba:	4668      	mov	r0, sp
 80181bc:	9600      	str	r6, [sp, #0]
 80181be:	f7ff fd6c 	bl	8017c9a <__lo0bits>
 80181c2:	9b01      	ldr	r3, [sp, #4]
 80181c4:	9900      	ldr	r1, [sp, #0]
 80181c6:	2800      	cmp	r0, #0
 80181c8:	d01b      	beq.n	8018202 <__d2b+0x7a>
 80181ca:	2220      	movs	r2, #32
 80181cc:	001e      	movs	r6, r3
 80181ce:	1a12      	subs	r2, r2, r0
 80181d0:	4096      	lsls	r6, r2
 80181d2:	0032      	movs	r2, r6
 80181d4:	40c3      	lsrs	r3, r0
 80181d6:	430a      	orrs	r2, r1
 80181d8:	6162      	str	r2, [r4, #20]
 80181da:	9301      	str	r3, [sp, #4]
 80181dc:	9e01      	ldr	r6, [sp, #4]
 80181de:	61a6      	str	r6, [r4, #24]
 80181e0:	1e73      	subs	r3, r6, #1
 80181e2:	419e      	sbcs	r6, r3
 80181e4:	3601      	adds	r6, #1
 80181e6:	6126      	str	r6, [r4, #16]
 80181e8:	2d00      	cmp	r5, #0
 80181ea:	d014      	beq.n	8018216 <__d2b+0x8e>
 80181ec:	2635      	movs	r6, #53	@ 0x35
 80181ee:	4b13      	ldr	r3, [pc, #76]	@ (801823c <__d2b+0xb4>)
 80181f0:	18ed      	adds	r5, r5, r3
 80181f2:	9b08      	ldr	r3, [sp, #32]
 80181f4:	182d      	adds	r5, r5, r0
 80181f6:	601d      	str	r5, [r3, #0]
 80181f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80181fa:	1a36      	subs	r6, r6, r0
 80181fc:	601e      	str	r6, [r3, #0]
 80181fe:	0020      	movs	r0, r4
 8018200:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018202:	6161      	str	r1, [r4, #20]
 8018204:	e7ea      	b.n	80181dc <__d2b+0x54>
 8018206:	a801      	add	r0, sp, #4
 8018208:	f7ff fd47 	bl	8017c9a <__lo0bits>
 801820c:	9b01      	ldr	r3, [sp, #4]
 801820e:	2601      	movs	r6, #1
 8018210:	6163      	str	r3, [r4, #20]
 8018212:	3020      	adds	r0, #32
 8018214:	e7e7      	b.n	80181e6 <__d2b+0x5e>
 8018216:	4b0a      	ldr	r3, [pc, #40]	@ (8018240 <__d2b+0xb8>)
 8018218:	18c0      	adds	r0, r0, r3
 801821a:	9b08      	ldr	r3, [sp, #32]
 801821c:	6018      	str	r0, [r3, #0]
 801821e:	4b09      	ldr	r3, [pc, #36]	@ (8018244 <__d2b+0xbc>)
 8018220:	18f3      	adds	r3, r6, r3
 8018222:	009b      	lsls	r3, r3, #2
 8018224:	18e3      	adds	r3, r4, r3
 8018226:	6958      	ldr	r0, [r3, #20]
 8018228:	f7ff fd16 	bl	8017c58 <__hi0bits>
 801822c:	0176      	lsls	r6, r6, #5
 801822e:	e7e3      	b.n	80181f8 <__d2b+0x70>
 8018230:	0801a61c 	.word	0x0801a61c
 8018234:	0801a62d 	.word	0x0801a62d
 8018238:	0000030f 	.word	0x0000030f
 801823c:	fffffbcd 	.word	0xfffffbcd
 8018240:	fffffbce 	.word	0xfffffbce
 8018244:	3fffffff 	.word	0x3fffffff

08018248 <__ssputs_r>:
 8018248:	b5f0      	push	{r4, r5, r6, r7, lr}
 801824a:	688e      	ldr	r6, [r1, #8]
 801824c:	b085      	sub	sp, #20
 801824e:	001f      	movs	r7, r3
 8018250:	000c      	movs	r4, r1
 8018252:	680b      	ldr	r3, [r1, #0]
 8018254:	9002      	str	r0, [sp, #8]
 8018256:	9203      	str	r2, [sp, #12]
 8018258:	42be      	cmp	r6, r7
 801825a:	d830      	bhi.n	80182be <__ssputs_r+0x76>
 801825c:	210c      	movs	r1, #12
 801825e:	5e62      	ldrsh	r2, [r4, r1]
 8018260:	2190      	movs	r1, #144	@ 0x90
 8018262:	00c9      	lsls	r1, r1, #3
 8018264:	420a      	tst	r2, r1
 8018266:	d028      	beq.n	80182ba <__ssputs_r+0x72>
 8018268:	2003      	movs	r0, #3
 801826a:	6921      	ldr	r1, [r4, #16]
 801826c:	1a5b      	subs	r3, r3, r1
 801826e:	9301      	str	r3, [sp, #4]
 8018270:	6963      	ldr	r3, [r4, #20]
 8018272:	4343      	muls	r3, r0
 8018274:	9801      	ldr	r0, [sp, #4]
 8018276:	0fdd      	lsrs	r5, r3, #31
 8018278:	18ed      	adds	r5, r5, r3
 801827a:	1c7b      	adds	r3, r7, #1
 801827c:	181b      	adds	r3, r3, r0
 801827e:	106d      	asrs	r5, r5, #1
 8018280:	42ab      	cmp	r3, r5
 8018282:	d900      	bls.n	8018286 <__ssputs_r+0x3e>
 8018284:	001d      	movs	r5, r3
 8018286:	0552      	lsls	r2, r2, #21
 8018288:	d528      	bpl.n	80182dc <__ssputs_r+0x94>
 801828a:	0029      	movs	r1, r5
 801828c:	9802      	ldr	r0, [sp, #8]
 801828e:	f7ff fba7 	bl	80179e0 <_malloc_r>
 8018292:	1e06      	subs	r6, r0, #0
 8018294:	d02c      	beq.n	80182f0 <__ssputs_r+0xa8>
 8018296:	9a01      	ldr	r2, [sp, #4]
 8018298:	6921      	ldr	r1, [r4, #16]
 801829a:	f7fe fc9f 	bl	8016bdc <memcpy>
 801829e:	89a2      	ldrh	r2, [r4, #12]
 80182a0:	4b18      	ldr	r3, [pc, #96]	@ (8018304 <__ssputs_r+0xbc>)
 80182a2:	401a      	ands	r2, r3
 80182a4:	2380      	movs	r3, #128	@ 0x80
 80182a6:	4313      	orrs	r3, r2
 80182a8:	81a3      	strh	r3, [r4, #12]
 80182aa:	9b01      	ldr	r3, [sp, #4]
 80182ac:	6126      	str	r6, [r4, #16]
 80182ae:	18f6      	adds	r6, r6, r3
 80182b0:	6026      	str	r6, [r4, #0]
 80182b2:	003e      	movs	r6, r7
 80182b4:	6165      	str	r5, [r4, #20]
 80182b6:	1aed      	subs	r5, r5, r3
 80182b8:	60a5      	str	r5, [r4, #8]
 80182ba:	42be      	cmp	r6, r7
 80182bc:	d900      	bls.n	80182c0 <__ssputs_r+0x78>
 80182be:	003e      	movs	r6, r7
 80182c0:	0032      	movs	r2, r6
 80182c2:	9903      	ldr	r1, [sp, #12]
 80182c4:	6820      	ldr	r0, [r4, #0]
 80182c6:	f000 fbb3 	bl	8018a30 <memmove>
 80182ca:	2000      	movs	r0, #0
 80182cc:	68a3      	ldr	r3, [r4, #8]
 80182ce:	1b9b      	subs	r3, r3, r6
 80182d0:	60a3      	str	r3, [r4, #8]
 80182d2:	6823      	ldr	r3, [r4, #0]
 80182d4:	199b      	adds	r3, r3, r6
 80182d6:	6023      	str	r3, [r4, #0]
 80182d8:	b005      	add	sp, #20
 80182da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182dc:	002a      	movs	r2, r5
 80182de:	9802      	ldr	r0, [sp, #8]
 80182e0:	f000 fc29 	bl	8018b36 <_realloc_r>
 80182e4:	1e06      	subs	r6, r0, #0
 80182e6:	d1e0      	bne.n	80182aa <__ssputs_r+0x62>
 80182e8:	6921      	ldr	r1, [r4, #16]
 80182ea:	9802      	ldr	r0, [sp, #8]
 80182ec:	f7ff fb02 	bl	80178f4 <_free_r>
 80182f0:	230c      	movs	r3, #12
 80182f2:	2001      	movs	r0, #1
 80182f4:	9a02      	ldr	r2, [sp, #8]
 80182f6:	4240      	negs	r0, r0
 80182f8:	6013      	str	r3, [r2, #0]
 80182fa:	89a2      	ldrh	r2, [r4, #12]
 80182fc:	3334      	adds	r3, #52	@ 0x34
 80182fe:	4313      	orrs	r3, r2
 8018300:	81a3      	strh	r3, [r4, #12]
 8018302:	e7e9      	b.n	80182d8 <__ssputs_r+0x90>
 8018304:	fffffb7f 	.word	0xfffffb7f

08018308 <_svfiprintf_r>:
 8018308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801830a:	b0a1      	sub	sp, #132	@ 0x84
 801830c:	9003      	str	r0, [sp, #12]
 801830e:	001d      	movs	r5, r3
 8018310:	898b      	ldrh	r3, [r1, #12]
 8018312:	000f      	movs	r7, r1
 8018314:	0016      	movs	r6, r2
 8018316:	061b      	lsls	r3, r3, #24
 8018318:	d511      	bpl.n	801833e <_svfiprintf_r+0x36>
 801831a:	690b      	ldr	r3, [r1, #16]
 801831c:	2b00      	cmp	r3, #0
 801831e:	d10e      	bne.n	801833e <_svfiprintf_r+0x36>
 8018320:	2140      	movs	r1, #64	@ 0x40
 8018322:	f7ff fb5d 	bl	80179e0 <_malloc_r>
 8018326:	6038      	str	r0, [r7, #0]
 8018328:	6138      	str	r0, [r7, #16]
 801832a:	2800      	cmp	r0, #0
 801832c:	d105      	bne.n	801833a <_svfiprintf_r+0x32>
 801832e:	230c      	movs	r3, #12
 8018330:	9a03      	ldr	r2, [sp, #12]
 8018332:	6013      	str	r3, [r2, #0]
 8018334:	2001      	movs	r0, #1
 8018336:	4240      	negs	r0, r0
 8018338:	e0cf      	b.n	80184da <_svfiprintf_r+0x1d2>
 801833a:	2340      	movs	r3, #64	@ 0x40
 801833c:	617b      	str	r3, [r7, #20]
 801833e:	2300      	movs	r3, #0
 8018340:	ac08      	add	r4, sp, #32
 8018342:	6163      	str	r3, [r4, #20]
 8018344:	3320      	adds	r3, #32
 8018346:	7663      	strb	r3, [r4, #25]
 8018348:	3310      	adds	r3, #16
 801834a:	76a3      	strb	r3, [r4, #26]
 801834c:	9507      	str	r5, [sp, #28]
 801834e:	0035      	movs	r5, r6
 8018350:	782b      	ldrb	r3, [r5, #0]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d001      	beq.n	801835a <_svfiprintf_r+0x52>
 8018356:	2b25      	cmp	r3, #37	@ 0x25
 8018358:	d148      	bne.n	80183ec <_svfiprintf_r+0xe4>
 801835a:	1bab      	subs	r3, r5, r6
 801835c:	9305      	str	r3, [sp, #20]
 801835e:	42b5      	cmp	r5, r6
 8018360:	d00b      	beq.n	801837a <_svfiprintf_r+0x72>
 8018362:	0032      	movs	r2, r6
 8018364:	0039      	movs	r1, r7
 8018366:	9803      	ldr	r0, [sp, #12]
 8018368:	f7ff ff6e 	bl	8018248 <__ssputs_r>
 801836c:	3001      	adds	r0, #1
 801836e:	d100      	bne.n	8018372 <_svfiprintf_r+0x6a>
 8018370:	e0ae      	b.n	80184d0 <_svfiprintf_r+0x1c8>
 8018372:	6963      	ldr	r3, [r4, #20]
 8018374:	9a05      	ldr	r2, [sp, #20]
 8018376:	189b      	adds	r3, r3, r2
 8018378:	6163      	str	r3, [r4, #20]
 801837a:	782b      	ldrb	r3, [r5, #0]
 801837c:	2b00      	cmp	r3, #0
 801837e:	d100      	bne.n	8018382 <_svfiprintf_r+0x7a>
 8018380:	e0a6      	b.n	80184d0 <_svfiprintf_r+0x1c8>
 8018382:	2201      	movs	r2, #1
 8018384:	2300      	movs	r3, #0
 8018386:	4252      	negs	r2, r2
 8018388:	6062      	str	r2, [r4, #4]
 801838a:	a904      	add	r1, sp, #16
 801838c:	3254      	adds	r2, #84	@ 0x54
 801838e:	1852      	adds	r2, r2, r1
 8018390:	1c6e      	adds	r6, r5, #1
 8018392:	6023      	str	r3, [r4, #0]
 8018394:	60e3      	str	r3, [r4, #12]
 8018396:	60a3      	str	r3, [r4, #8]
 8018398:	7013      	strb	r3, [r2, #0]
 801839a:	65a3      	str	r3, [r4, #88]	@ 0x58
 801839c:	4b54      	ldr	r3, [pc, #336]	@ (80184f0 <_svfiprintf_r+0x1e8>)
 801839e:	2205      	movs	r2, #5
 80183a0:	0018      	movs	r0, r3
 80183a2:	7831      	ldrb	r1, [r6, #0]
 80183a4:	9305      	str	r3, [sp, #20]
 80183a6:	f7fe fc0e 	bl	8016bc6 <memchr>
 80183aa:	1c75      	adds	r5, r6, #1
 80183ac:	2800      	cmp	r0, #0
 80183ae:	d11f      	bne.n	80183f0 <_svfiprintf_r+0xe8>
 80183b0:	6822      	ldr	r2, [r4, #0]
 80183b2:	06d3      	lsls	r3, r2, #27
 80183b4:	d504      	bpl.n	80183c0 <_svfiprintf_r+0xb8>
 80183b6:	2353      	movs	r3, #83	@ 0x53
 80183b8:	a904      	add	r1, sp, #16
 80183ba:	185b      	adds	r3, r3, r1
 80183bc:	2120      	movs	r1, #32
 80183be:	7019      	strb	r1, [r3, #0]
 80183c0:	0713      	lsls	r3, r2, #28
 80183c2:	d504      	bpl.n	80183ce <_svfiprintf_r+0xc6>
 80183c4:	2353      	movs	r3, #83	@ 0x53
 80183c6:	a904      	add	r1, sp, #16
 80183c8:	185b      	adds	r3, r3, r1
 80183ca:	212b      	movs	r1, #43	@ 0x2b
 80183cc:	7019      	strb	r1, [r3, #0]
 80183ce:	7833      	ldrb	r3, [r6, #0]
 80183d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80183d2:	d016      	beq.n	8018402 <_svfiprintf_r+0xfa>
 80183d4:	0035      	movs	r5, r6
 80183d6:	2100      	movs	r1, #0
 80183d8:	200a      	movs	r0, #10
 80183da:	68e3      	ldr	r3, [r4, #12]
 80183dc:	782a      	ldrb	r2, [r5, #0]
 80183de:	1c6e      	adds	r6, r5, #1
 80183e0:	3a30      	subs	r2, #48	@ 0x30
 80183e2:	2a09      	cmp	r2, #9
 80183e4:	d950      	bls.n	8018488 <_svfiprintf_r+0x180>
 80183e6:	2900      	cmp	r1, #0
 80183e8:	d111      	bne.n	801840e <_svfiprintf_r+0x106>
 80183ea:	e017      	b.n	801841c <_svfiprintf_r+0x114>
 80183ec:	3501      	adds	r5, #1
 80183ee:	e7af      	b.n	8018350 <_svfiprintf_r+0x48>
 80183f0:	9b05      	ldr	r3, [sp, #20]
 80183f2:	6822      	ldr	r2, [r4, #0]
 80183f4:	1ac0      	subs	r0, r0, r3
 80183f6:	2301      	movs	r3, #1
 80183f8:	4083      	lsls	r3, r0
 80183fa:	4313      	orrs	r3, r2
 80183fc:	002e      	movs	r6, r5
 80183fe:	6023      	str	r3, [r4, #0]
 8018400:	e7cc      	b.n	801839c <_svfiprintf_r+0x94>
 8018402:	9b07      	ldr	r3, [sp, #28]
 8018404:	1d19      	adds	r1, r3, #4
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	9107      	str	r1, [sp, #28]
 801840a:	2b00      	cmp	r3, #0
 801840c:	db01      	blt.n	8018412 <_svfiprintf_r+0x10a>
 801840e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018410:	e004      	b.n	801841c <_svfiprintf_r+0x114>
 8018412:	425b      	negs	r3, r3
 8018414:	60e3      	str	r3, [r4, #12]
 8018416:	2302      	movs	r3, #2
 8018418:	4313      	orrs	r3, r2
 801841a:	6023      	str	r3, [r4, #0]
 801841c:	782b      	ldrb	r3, [r5, #0]
 801841e:	2b2e      	cmp	r3, #46	@ 0x2e
 8018420:	d10c      	bne.n	801843c <_svfiprintf_r+0x134>
 8018422:	786b      	ldrb	r3, [r5, #1]
 8018424:	2b2a      	cmp	r3, #42	@ 0x2a
 8018426:	d134      	bne.n	8018492 <_svfiprintf_r+0x18a>
 8018428:	9b07      	ldr	r3, [sp, #28]
 801842a:	3502      	adds	r5, #2
 801842c:	1d1a      	adds	r2, r3, #4
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	9207      	str	r2, [sp, #28]
 8018432:	2b00      	cmp	r3, #0
 8018434:	da01      	bge.n	801843a <_svfiprintf_r+0x132>
 8018436:	2301      	movs	r3, #1
 8018438:	425b      	negs	r3, r3
 801843a:	9309      	str	r3, [sp, #36]	@ 0x24
 801843c:	4e2d      	ldr	r6, [pc, #180]	@ (80184f4 <_svfiprintf_r+0x1ec>)
 801843e:	2203      	movs	r2, #3
 8018440:	0030      	movs	r0, r6
 8018442:	7829      	ldrb	r1, [r5, #0]
 8018444:	f7fe fbbf 	bl	8016bc6 <memchr>
 8018448:	2800      	cmp	r0, #0
 801844a:	d006      	beq.n	801845a <_svfiprintf_r+0x152>
 801844c:	2340      	movs	r3, #64	@ 0x40
 801844e:	1b80      	subs	r0, r0, r6
 8018450:	4083      	lsls	r3, r0
 8018452:	6822      	ldr	r2, [r4, #0]
 8018454:	3501      	adds	r5, #1
 8018456:	4313      	orrs	r3, r2
 8018458:	6023      	str	r3, [r4, #0]
 801845a:	7829      	ldrb	r1, [r5, #0]
 801845c:	2206      	movs	r2, #6
 801845e:	4826      	ldr	r0, [pc, #152]	@ (80184f8 <_svfiprintf_r+0x1f0>)
 8018460:	1c6e      	adds	r6, r5, #1
 8018462:	7621      	strb	r1, [r4, #24]
 8018464:	f7fe fbaf 	bl	8016bc6 <memchr>
 8018468:	2800      	cmp	r0, #0
 801846a:	d038      	beq.n	80184de <_svfiprintf_r+0x1d6>
 801846c:	4b23      	ldr	r3, [pc, #140]	@ (80184fc <_svfiprintf_r+0x1f4>)
 801846e:	2b00      	cmp	r3, #0
 8018470:	d122      	bne.n	80184b8 <_svfiprintf_r+0x1b0>
 8018472:	2207      	movs	r2, #7
 8018474:	9b07      	ldr	r3, [sp, #28]
 8018476:	3307      	adds	r3, #7
 8018478:	4393      	bics	r3, r2
 801847a:	3308      	adds	r3, #8
 801847c:	9307      	str	r3, [sp, #28]
 801847e:	6963      	ldr	r3, [r4, #20]
 8018480:	9a04      	ldr	r2, [sp, #16]
 8018482:	189b      	adds	r3, r3, r2
 8018484:	6163      	str	r3, [r4, #20]
 8018486:	e762      	b.n	801834e <_svfiprintf_r+0x46>
 8018488:	4343      	muls	r3, r0
 801848a:	0035      	movs	r5, r6
 801848c:	2101      	movs	r1, #1
 801848e:	189b      	adds	r3, r3, r2
 8018490:	e7a4      	b.n	80183dc <_svfiprintf_r+0xd4>
 8018492:	2300      	movs	r3, #0
 8018494:	200a      	movs	r0, #10
 8018496:	0019      	movs	r1, r3
 8018498:	3501      	adds	r5, #1
 801849a:	6063      	str	r3, [r4, #4]
 801849c:	782a      	ldrb	r2, [r5, #0]
 801849e:	1c6e      	adds	r6, r5, #1
 80184a0:	3a30      	subs	r2, #48	@ 0x30
 80184a2:	2a09      	cmp	r2, #9
 80184a4:	d903      	bls.n	80184ae <_svfiprintf_r+0x1a6>
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d0c8      	beq.n	801843c <_svfiprintf_r+0x134>
 80184aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80184ac:	e7c6      	b.n	801843c <_svfiprintf_r+0x134>
 80184ae:	4341      	muls	r1, r0
 80184b0:	0035      	movs	r5, r6
 80184b2:	2301      	movs	r3, #1
 80184b4:	1889      	adds	r1, r1, r2
 80184b6:	e7f1      	b.n	801849c <_svfiprintf_r+0x194>
 80184b8:	aa07      	add	r2, sp, #28
 80184ba:	9200      	str	r2, [sp, #0]
 80184bc:	0021      	movs	r1, r4
 80184be:	003a      	movs	r2, r7
 80184c0:	4b0f      	ldr	r3, [pc, #60]	@ (8018500 <_svfiprintf_r+0x1f8>)
 80184c2:	9803      	ldr	r0, [sp, #12]
 80184c4:	f7fd fd9a 	bl	8015ffc <_printf_float>
 80184c8:	9004      	str	r0, [sp, #16]
 80184ca:	9b04      	ldr	r3, [sp, #16]
 80184cc:	3301      	adds	r3, #1
 80184ce:	d1d6      	bne.n	801847e <_svfiprintf_r+0x176>
 80184d0:	89bb      	ldrh	r3, [r7, #12]
 80184d2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80184d4:	065b      	lsls	r3, r3, #25
 80184d6:	d500      	bpl.n	80184da <_svfiprintf_r+0x1d2>
 80184d8:	e72c      	b.n	8018334 <_svfiprintf_r+0x2c>
 80184da:	b021      	add	sp, #132	@ 0x84
 80184dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184de:	aa07      	add	r2, sp, #28
 80184e0:	9200      	str	r2, [sp, #0]
 80184e2:	0021      	movs	r1, r4
 80184e4:	003a      	movs	r2, r7
 80184e6:	4b06      	ldr	r3, [pc, #24]	@ (8018500 <_svfiprintf_r+0x1f8>)
 80184e8:	9803      	ldr	r0, [sp, #12]
 80184ea:	f7fe f835 	bl	8016558 <_printf_i>
 80184ee:	e7eb      	b.n	80184c8 <_svfiprintf_r+0x1c0>
 80184f0:	0801a788 	.word	0x0801a788
 80184f4:	0801a78e 	.word	0x0801a78e
 80184f8:	0801a792 	.word	0x0801a792
 80184fc:	08015ffd 	.word	0x08015ffd
 8018500:	08018249 	.word	0x08018249

08018504 <__sfputc_r>:
 8018504:	6893      	ldr	r3, [r2, #8]
 8018506:	b510      	push	{r4, lr}
 8018508:	3b01      	subs	r3, #1
 801850a:	6093      	str	r3, [r2, #8]
 801850c:	2b00      	cmp	r3, #0
 801850e:	da04      	bge.n	801851a <__sfputc_r+0x16>
 8018510:	6994      	ldr	r4, [r2, #24]
 8018512:	42a3      	cmp	r3, r4
 8018514:	db07      	blt.n	8018526 <__sfputc_r+0x22>
 8018516:	290a      	cmp	r1, #10
 8018518:	d005      	beq.n	8018526 <__sfputc_r+0x22>
 801851a:	6813      	ldr	r3, [r2, #0]
 801851c:	1c58      	adds	r0, r3, #1
 801851e:	6010      	str	r0, [r2, #0]
 8018520:	7019      	strb	r1, [r3, #0]
 8018522:	0008      	movs	r0, r1
 8018524:	bd10      	pop	{r4, pc}
 8018526:	f000 f9e2 	bl	80188ee <__swbuf_r>
 801852a:	0001      	movs	r1, r0
 801852c:	e7f9      	b.n	8018522 <__sfputc_r+0x1e>

0801852e <__sfputs_r>:
 801852e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018530:	0006      	movs	r6, r0
 8018532:	000f      	movs	r7, r1
 8018534:	0014      	movs	r4, r2
 8018536:	18d5      	adds	r5, r2, r3
 8018538:	42ac      	cmp	r4, r5
 801853a:	d101      	bne.n	8018540 <__sfputs_r+0x12>
 801853c:	2000      	movs	r0, #0
 801853e:	e007      	b.n	8018550 <__sfputs_r+0x22>
 8018540:	7821      	ldrb	r1, [r4, #0]
 8018542:	003a      	movs	r2, r7
 8018544:	0030      	movs	r0, r6
 8018546:	f7ff ffdd 	bl	8018504 <__sfputc_r>
 801854a:	3401      	adds	r4, #1
 801854c:	1c43      	adds	r3, r0, #1
 801854e:	d1f3      	bne.n	8018538 <__sfputs_r+0xa>
 8018550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018554 <_vfiprintf_r>:
 8018554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018556:	b0a1      	sub	sp, #132	@ 0x84
 8018558:	000f      	movs	r7, r1
 801855a:	0015      	movs	r5, r2
 801855c:	001e      	movs	r6, r3
 801855e:	9003      	str	r0, [sp, #12]
 8018560:	2800      	cmp	r0, #0
 8018562:	d004      	beq.n	801856e <_vfiprintf_r+0x1a>
 8018564:	6a03      	ldr	r3, [r0, #32]
 8018566:	2b00      	cmp	r3, #0
 8018568:	d101      	bne.n	801856e <_vfiprintf_r+0x1a>
 801856a:	f7fe f993 	bl	8016894 <__sinit>
 801856e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018570:	07db      	lsls	r3, r3, #31
 8018572:	d405      	bmi.n	8018580 <_vfiprintf_r+0x2c>
 8018574:	89bb      	ldrh	r3, [r7, #12]
 8018576:	059b      	lsls	r3, r3, #22
 8018578:	d402      	bmi.n	8018580 <_vfiprintf_r+0x2c>
 801857a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801857c:	f7fe fb21 	bl	8016bc2 <__retarget_lock_acquire_recursive>
 8018580:	89bb      	ldrh	r3, [r7, #12]
 8018582:	071b      	lsls	r3, r3, #28
 8018584:	d502      	bpl.n	801858c <_vfiprintf_r+0x38>
 8018586:	693b      	ldr	r3, [r7, #16]
 8018588:	2b00      	cmp	r3, #0
 801858a:	d113      	bne.n	80185b4 <_vfiprintf_r+0x60>
 801858c:	0039      	movs	r1, r7
 801858e:	9803      	ldr	r0, [sp, #12]
 8018590:	f000 f9f0 	bl	8018974 <__swsetup_r>
 8018594:	2800      	cmp	r0, #0
 8018596:	d00d      	beq.n	80185b4 <_vfiprintf_r+0x60>
 8018598:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801859a:	07db      	lsls	r3, r3, #31
 801859c:	d503      	bpl.n	80185a6 <_vfiprintf_r+0x52>
 801859e:	2001      	movs	r0, #1
 80185a0:	4240      	negs	r0, r0
 80185a2:	b021      	add	sp, #132	@ 0x84
 80185a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185a6:	89bb      	ldrh	r3, [r7, #12]
 80185a8:	059b      	lsls	r3, r3, #22
 80185aa:	d4f8      	bmi.n	801859e <_vfiprintf_r+0x4a>
 80185ac:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80185ae:	f7fe fb09 	bl	8016bc4 <__retarget_lock_release_recursive>
 80185b2:	e7f4      	b.n	801859e <_vfiprintf_r+0x4a>
 80185b4:	2300      	movs	r3, #0
 80185b6:	ac08      	add	r4, sp, #32
 80185b8:	6163      	str	r3, [r4, #20]
 80185ba:	3320      	adds	r3, #32
 80185bc:	7663      	strb	r3, [r4, #25]
 80185be:	3310      	adds	r3, #16
 80185c0:	76a3      	strb	r3, [r4, #26]
 80185c2:	9607      	str	r6, [sp, #28]
 80185c4:	002e      	movs	r6, r5
 80185c6:	7833      	ldrb	r3, [r6, #0]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d001      	beq.n	80185d0 <_vfiprintf_r+0x7c>
 80185cc:	2b25      	cmp	r3, #37	@ 0x25
 80185ce:	d148      	bne.n	8018662 <_vfiprintf_r+0x10e>
 80185d0:	1b73      	subs	r3, r6, r5
 80185d2:	9305      	str	r3, [sp, #20]
 80185d4:	42ae      	cmp	r6, r5
 80185d6:	d00b      	beq.n	80185f0 <_vfiprintf_r+0x9c>
 80185d8:	002a      	movs	r2, r5
 80185da:	0039      	movs	r1, r7
 80185dc:	9803      	ldr	r0, [sp, #12]
 80185de:	f7ff ffa6 	bl	801852e <__sfputs_r>
 80185e2:	3001      	adds	r0, #1
 80185e4:	d100      	bne.n	80185e8 <_vfiprintf_r+0x94>
 80185e6:	e0ae      	b.n	8018746 <_vfiprintf_r+0x1f2>
 80185e8:	6963      	ldr	r3, [r4, #20]
 80185ea:	9a05      	ldr	r2, [sp, #20]
 80185ec:	189b      	adds	r3, r3, r2
 80185ee:	6163      	str	r3, [r4, #20]
 80185f0:	7833      	ldrb	r3, [r6, #0]
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d100      	bne.n	80185f8 <_vfiprintf_r+0xa4>
 80185f6:	e0a6      	b.n	8018746 <_vfiprintf_r+0x1f2>
 80185f8:	2201      	movs	r2, #1
 80185fa:	2300      	movs	r3, #0
 80185fc:	4252      	negs	r2, r2
 80185fe:	6062      	str	r2, [r4, #4]
 8018600:	a904      	add	r1, sp, #16
 8018602:	3254      	adds	r2, #84	@ 0x54
 8018604:	1852      	adds	r2, r2, r1
 8018606:	1c75      	adds	r5, r6, #1
 8018608:	6023      	str	r3, [r4, #0]
 801860a:	60e3      	str	r3, [r4, #12]
 801860c:	60a3      	str	r3, [r4, #8]
 801860e:	7013      	strb	r3, [r2, #0]
 8018610:	65a3      	str	r3, [r4, #88]	@ 0x58
 8018612:	4b59      	ldr	r3, [pc, #356]	@ (8018778 <_vfiprintf_r+0x224>)
 8018614:	2205      	movs	r2, #5
 8018616:	0018      	movs	r0, r3
 8018618:	7829      	ldrb	r1, [r5, #0]
 801861a:	9305      	str	r3, [sp, #20]
 801861c:	f7fe fad3 	bl	8016bc6 <memchr>
 8018620:	1c6e      	adds	r6, r5, #1
 8018622:	2800      	cmp	r0, #0
 8018624:	d11f      	bne.n	8018666 <_vfiprintf_r+0x112>
 8018626:	6822      	ldr	r2, [r4, #0]
 8018628:	06d3      	lsls	r3, r2, #27
 801862a:	d504      	bpl.n	8018636 <_vfiprintf_r+0xe2>
 801862c:	2353      	movs	r3, #83	@ 0x53
 801862e:	a904      	add	r1, sp, #16
 8018630:	185b      	adds	r3, r3, r1
 8018632:	2120      	movs	r1, #32
 8018634:	7019      	strb	r1, [r3, #0]
 8018636:	0713      	lsls	r3, r2, #28
 8018638:	d504      	bpl.n	8018644 <_vfiprintf_r+0xf0>
 801863a:	2353      	movs	r3, #83	@ 0x53
 801863c:	a904      	add	r1, sp, #16
 801863e:	185b      	adds	r3, r3, r1
 8018640:	212b      	movs	r1, #43	@ 0x2b
 8018642:	7019      	strb	r1, [r3, #0]
 8018644:	782b      	ldrb	r3, [r5, #0]
 8018646:	2b2a      	cmp	r3, #42	@ 0x2a
 8018648:	d016      	beq.n	8018678 <_vfiprintf_r+0x124>
 801864a:	002e      	movs	r6, r5
 801864c:	2100      	movs	r1, #0
 801864e:	200a      	movs	r0, #10
 8018650:	68e3      	ldr	r3, [r4, #12]
 8018652:	7832      	ldrb	r2, [r6, #0]
 8018654:	1c75      	adds	r5, r6, #1
 8018656:	3a30      	subs	r2, #48	@ 0x30
 8018658:	2a09      	cmp	r2, #9
 801865a:	d950      	bls.n	80186fe <_vfiprintf_r+0x1aa>
 801865c:	2900      	cmp	r1, #0
 801865e:	d111      	bne.n	8018684 <_vfiprintf_r+0x130>
 8018660:	e017      	b.n	8018692 <_vfiprintf_r+0x13e>
 8018662:	3601      	adds	r6, #1
 8018664:	e7af      	b.n	80185c6 <_vfiprintf_r+0x72>
 8018666:	9b05      	ldr	r3, [sp, #20]
 8018668:	6822      	ldr	r2, [r4, #0]
 801866a:	1ac0      	subs	r0, r0, r3
 801866c:	2301      	movs	r3, #1
 801866e:	4083      	lsls	r3, r0
 8018670:	4313      	orrs	r3, r2
 8018672:	0035      	movs	r5, r6
 8018674:	6023      	str	r3, [r4, #0]
 8018676:	e7cc      	b.n	8018612 <_vfiprintf_r+0xbe>
 8018678:	9b07      	ldr	r3, [sp, #28]
 801867a:	1d19      	adds	r1, r3, #4
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	9107      	str	r1, [sp, #28]
 8018680:	2b00      	cmp	r3, #0
 8018682:	db01      	blt.n	8018688 <_vfiprintf_r+0x134>
 8018684:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018686:	e004      	b.n	8018692 <_vfiprintf_r+0x13e>
 8018688:	425b      	negs	r3, r3
 801868a:	60e3      	str	r3, [r4, #12]
 801868c:	2302      	movs	r3, #2
 801868e:	4313      	orrs	r3, r2
 8018690:	6023      	str	r3, [r4, #0]
 8018692:	7833      	ldrb	r3, [r6, #0]
 8018694:	2b2e      	cmp	r3, #46	@ 0x2e
 8018696:	d10c      	bne.n	80186b2 <_vfiprintf_r+0x15e>
 8018698:	7873      	ldrb	r3, [r6, #1]
 801869a:	2b2a      	cmp	r3, #42	@ 0x2a
 801869c:	d134      	bne.n	8018708 <_vfiprintf_r+0x1b4>
 801869e:	9b07      	ldr	r3, [sp, #28]
 80186a0:	3602      	adds	r6, #2
 80186a2:	1d1a      	adds	r2, r3, #4
 80186a4:	681b      	ldr	r3, [r3, #0]
 80186a6:	9207      	str	r2, [sp, #28]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	da01      	bge.n	80186b0 <_vfiprintf_r+0x15c>
 80186ac:	2301      	movs	r3, #1
 80186ae:	425b      	negs	r3, r3
 80186b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80186b2:	4d32      	ldr	r5, [pc, #200]	@ (801877c <_vfiprintf_r+0x228>)
 80186b4:	2203      	movs	r2, #3
 80186b6:	0028      	movs	r0, r5
 80186b8:	7831      	ldrb	r1, [r6, #0]
 80186ba:	f7fe fa84 	bl	8016bc6 <memchr>
 80186be:	2800      	cmp	r0, #0
 80186c0:	d006      	beq.n	80186d0 <_vfiprintf_r+0x17c>
 80186c2:	2340      	movs	r3, #64	@ 0x40
 80186c4:	1b40      	subs	r0, r0, r5
 80186c6:	4083      	lsls	r3, r0
 80186c8:	6822      	ldr	r2, [r4, #0]
 80186ca:	3601      	adds	r6, #1
 80186cc:	4313      	orrs	r3, r2
 80186ce:	6023      	str	r3, [r4, #0]
 80186d0:	7831      	ldrb	r1, [r6, #0]
 80186d2:	2206      	movs	r2, #6
 80186d4:	482a      	ldr	r0, [pc, #168]	@ (8018780 <_vfiprintf_r+0x22c>)
 80186d6:	1c75      	adds	r5, r6, #1
 80186d8:	7621      	strb	r1, [r4, #24]
 80186da:	f7fe fa74 	bl	8016bc6 <memchr>
 80186de:	2800      	cmp	r0, #0
 80186e0:	d040      	beq.n	8018764 <_vfiprintf_r+0x210>
 80186e2:	4b28      	ldr	r3, [pc, #160]	@ (8018784 <_vfiprintf_r+0x230>)
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d122      	bne.n	801872e <_vfiprintf_r+0x1da>
 80186e8:	2207      	movs	r2, #7
 80186ea:	9b07      	ldr	r3, [sp, #28]
 80186ec:	3307      	adds	r3, #7
 80186ee:	4393      	bics	r3, r2
 80186f0:	3308      	adds	r3, #8
 80186f2:	9307      	str	r3, [sp, #28]
 80186f4:	6963      	ldr	r3, [r4, #20]
 80186f6:	9a04      	ldr	r2, [sp, #16]
 80186f8:	189b      	adds	r3, r3, r2
 80186fa:	6163      	str	r3, [r4, #20]
 80186fc:	e762      	b.n	80185c4 <_vfiprintf_r+0x70>
 80186fe:	4343      	muls	r3, r0
 8018700:	002e      	movs	r6, r5
 8018702:	2101      	movs	r1, #1
 8018704:	189b      	adds	r3, r3, r2
 8018706:	e7a4      	b.n	8018652 <_vfiprintf_r+0xfe>
 8018708:	2300      	movs	r3, #0
 801870a:	200a      	movs	r0, #10
 801870c:	0019      	movs	r1, r3
 801870e:	3601      	adds	r6, #1
 8018710:	6063      	str	r3, [r4, #4]
 8018712:	7832      	ldrb	r2, [r6, #0]
 8018714:	1c75      	adds	r5, r6, #1
 8018716:	3a30      	subs	r2, #48	@ 0x30
 8018718:	2a09      	cmp	r2, #9
 801871a:	d903      	bls.n	8018724 <_vfiprintf_r+0x1d0>
 801871c:	2b00      	cmp	r3, #0
 801871e:	d0c8      	beq.n	80186b2 <_vfiprintf_r+0x15e>
 8018720:	9109      	str	r1, [sp, #36]	@ 0x24
 8018722:	e7c6      	b.n	80186b2 <_vfiprintf_r+0x15e>
 8018724:	4341      	muls	r1, r0
 8018726:	002e      	movs	r6, r5
 8018728:	2301      	movs	r3, #1
 801872a:	1889      	adds	r1, r1, r2
 801872c:	e7f1      	b.n	8018712 <_vfiprintf_r+0x1be>
 801872e:	aa07      	add	r2, sp, #28
 8018730:	9200      	str	r2, [sp, #0]
 8018732:	0021      	movs	r1, r4
 8018734:	003a      	movs	r2, r7
 8018736:	4b14      	ldr	r3, [pc, #80]	@ (8018788 <_vfiprintf_r+0x234>)
 8018738:	9803      	ldr	r0, [sp, #12]
 801873a:	f7fd fc5f 	bl	8015ffc <_printf_float>
 801873e:	9004      	str	r0, [sp, #16]
 8018740:	9b04      	ldr	r3, [sp, #16]
 8018742:	3301      	adds	r3, #1
 8018744:	d1d6      	bne.n	80186f4 <_vfiprintf_r+0x1a0>
 8018746:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018748:	07db      	lsls	r3, r3, #31
 801874a:	d405      	bmi.n	8018758 <_vfiprintf_r+0x204>
 801874c:	89bb      	ldrh	r3, [r7, #12]
 801874e:	059b      	lsls	r3, r3, #22
 8018750:	d402      	bmi.n	8018758 <_vfiprintf_r+0x204>
 8018752:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8018754:	f7fe fa36 	bl	8016bc4 <__retarget_lock_release_recursive>
 8018758:	89bb      	ldrh	r3, [r7, #12]
 801875a:	065b      	lsls	r3, r3, #25
 801875c:	d500      	bpl.n	8018760 <_vfiprintf_r+0x20c>
 801875e:	e71e      	b.n	801859e <_vfiprintf_r+0x4a>
 8018760:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8018762:	e71e      	b.n	80185a2 <_vfiprintf_r+0x4e>
 8018764:	aa07      	add	r2, sp, #28
 8018766:	9200      	str	r2, [sp, #0]
 8018768:	0021      	movs	r1, r4
 801876a:	003a      	movs	r2, r7
 801876c:	4b06      	ldr	r3, [pc, #24]	@ (8018788 <_vfiprintf_r+0x234>)
 801876e:	9803      	ldr	r0, [sp, #12]
 8018770:	f7fd fef2 	bl	8016558 <_printf_i>
 8018774:	e7e3      	b.n	801873e <_vfiprintf_r+0x1ea>
 8018776:	46c0      	nop			@ (mov r8, r8)
 8018778:	0801a788 	.word	0x0801a788
 801877c:	0801a78e 	.word	0x0801a78e
 8018780:	0801a792 	.word	0x0801a792
 8018784:	08015ffd 	.word	0x08015ffd
 8018788:	0801852f 	.word	0x0801852f

0801878c <__sflush_r>:
 801878c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801878e:	220c      	movs	r2, #12
 8018790:	5e8b      	ldrsh	r3, [r1, r2]
 8018792:	0005      	movs	r5, r0
 8018794:	000c      	movs	r4, r1
 8018796:	071a      	lsls	r2, r3, #28
 8018798:	d456      	bmi.n	8018848 <__sflush_r+0xbc>
 801879a:	684a      	ldr	r2, [r1, #4]
 801879c:	2a00      	cmp	r2, #0
 801879e:	dc02      	bgt.n	80187a6 <__sflush_r+0x1a>
 80187a0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80187a2:	2a00      	cmp	r2, #0
 80187a4:	dd4e      	ble.n	8018844 <__sflush_r+0xb8>
 80187a6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80187a8:	2f00      	cmp	r7, #0
 80187aa:	d04b      	beq.n	8018844 <__sflush_r+0xb8>
 80187ac:	2200      	movs	r2, #0
 80187ae:	2080      	movs	r0, #128	@ 0x80
 80187b0:	682e      	ldr	r6, [r5, #0]
 80187b2:	602a      	str	r2, [r5, #0]
 80187b4:	001a      	movs	r2, r3
 80187b6:	0140      	lsls	r0, r0, #5
 80187b8:	6a21      	ldr	r1, [r4, #32]
 80187ba:	4002      	ands	r2, r0
 80187bc:	4203      	tst	r3, r0
 80187be:	d033      	beq.n	8018828 <__sflush_r+0x9c>
 80187c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80187c2:	89a3      	ldrh	r3, [r4, #12]
 80187c4:	075b      	lsls	r3, r3, #29
 80187c6:	d506      	bpl.n	80187d6 <__sflush_r+0x4a>
 80187c8:	6863      	ldr	r3, [r4, #4]
 80187ca:	1ad2      	subs	r2, r2, r3
 80187cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d001      	beq.n	80187d6 <__sflush_r+0x4a>
 80187d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80187d4:	1ad2      	subs	r2, r2, r3
 80187d6:	2300      	movs	r3, #0
 80187d8:	0028      	movs	r0, r5
 80187da:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80187dc:	6a21      	ldr	r1, [r4, #32]
 80187de:	47b8      	blx	r7
 80187e0:	89a2      	ldrh	r2, [r4, #12]
 80187e2:	1c43      	adds	r3, r0, #1
 80187e4:	d106      	bne.n	80187f4 <__sflush_r+0x68>
 80187e6:	6829      	ldr	r1, [r5, #0]
 80187e8:	291d      	cmp	r1, #29
 80187ea:	d846      	bhi.n	801887a <__sflush_r+0xee>
 80187ec:	4b29      	ldr	r3, [pc, #164]	@ (8018894 <__sflush_r+0x108>)
 80187ee:	410b      	asrs	r3, r1
 80187f0:	07db      	lsls	r3, r3, #31
 80187f2:	d442      	bmi.n	801887a <__sflush_r+0xee>
 80187f4:	2300      	movs	r3, #0
 80187f6:	6063      	str	r3, [r4, #4]
 80187f8:	6923      	ldr	r3, [r4, #16]
 80187fa:	6023      	str	r3, [r4, #0]
 80187fc:	04d2      	lsls	r2, r2, #19
 80187fe:	d505      	bpl.n	801880c <__sflush_r+0x80>
 8018800:	1c43      	adds	r3, r0, #1
 8018802:	d102      	bne.n	801880a <__sflush_r+0x7e>
 8018804:	682b      	ldr	r3, [r5, #0]
 8018806:	2b00      	cmp	r3, #0
 8018808:	d100      	bne.n	801880c <__sflush_r+0x80>
 801880a:	6560      	str	r0, [r4, #84]	@ 0x54
 801880c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801880e:	602e      	str	r6, [r5, #0]
 8018810:	2900      	cmp	r1, #0
 8018812:	d017      	beq.n	8018844 <__sflush_r+0xb8>
 8018814:	0023      	movs	r3, r4
 8018816:	3344      	adds	r3, #68	@ 0x44
 8018818:	4299      	cmp	r1, r3
 801881a:	d002      	beq.n	8018822 <__sflush_r+0x96>
 801881c:	0028      	movs	r0, r5
 801881e:	f7ff f869 	bl	80178f4 <_free_r>
 8018822:	2300      	movs	r3, #0
 8018824:	6363      	str	r3, [r4, #52]	@ 0x34
 8018826:	e00d      	b.n	8018844 <__sflush_r+0xb8>
 8018828:	2301      	movs	r3, #1
 801882a:	0028      	movs	r0, r5
 801882c:	47b8      	blx	r7
 801882e:	0002      	movs	r2, r0
 8018830:	1c43      	adds	r3, r0, #1
 8018832:	d1c6      	bne.n	80187c2 <__sflush_r+0x36>
 8018834:	682b      	ldr	r3, [r5, #0]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d0c3      	beq.n	80187c2 <__sflush_r+0x36>
 801883a:	2b1d      	cmp	r3, #29
 801883c:	d001      	beq.n	8018842 <__sflush_r+0xb6>
 801883e:	2b16      	cmp	r3, #22
 8018840:	d11a      	bne.n	8018878 <__sflush_r+0xec>
 8018842:	602e      	str	r6, [r5, #0]
 8018844:	2000      	movs	r0, #0
 8018846:	e01e      	b.n	8018886 <__sflush_r+0xfa>
 8018848:	690e      	ldr	r6, [r1, #16]
 801884a:	2e00      	cmp	r6, #0
 801884c:	d0fa      	beq.n	8018844 <__sflush_r+0xb8>
 801884e:	680f      	ldr	r7, [r1, #0]
 8018850:	600e      	str	r6, [r1, #0]
 8018852:	1bba      	subs	r2, r7, r6
 8018854:	9201      	str	r2, [sp, #4]
 8018856:	2200      	movs	r2, #0
 8018858:	079b      	lsls	r3, r3, #30
 801885a:	d100      	bne.n	801885e <__sflush_r+0xd2>
 801885c:	694a      	ldr	r2, [r1, #20]
 801885e:	60a2      	str	r2, [r4, #8]
 8018860:	9b01      	ldr	r3, [sp, #4]
 8018862:	2b00      	cmp	r3, #0
 8018864:	ddee      	ble.n	8018844 <__sflush_r+0xb8>
 8018866:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8018868:	0032      	movs	r2, r6
 801886a:	001f      	movs	r7, r3
 801886c:	0028      	movs	r0, r5
 801886e:	9b01      	ldr	r3, [sp, #4]
 8018870:	6a21      	ldr	r1, [r4, #32]
 8018872:	47b8      	blx	r7
 8018874:	2800      	cmp	r0, #0
 8018876:	dc07      	bgt.n	8018888 <__sflush_r+0xfc>
 8018878:	89a2      	ldrh	r2, [r4, #12]
 801887a:	2340      	movs	r3, #64	@ 0x40
 801887c:	2001      	movs	r0, #1
 801887e:	4313      	orrs	r3, r2
 8018880:	b21b      	sxth	r3, r3
 8018882:	81a3      	strh	r3, [r4, #12]
 8018884:	4240      	negs	r0, r0
 8018886:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018888:	9b01      	ldr	r3, [sp, #4]
 801888a:	1836      	adds	r6, r6, r0
 801888c:	1a1b      	subs	r3, r3, r0
 801888e:	9301      	str	r3, [sp, #4]
 8018890:	e7e6      	b.n	8018860 <__sflush_r+0xd4>
 8018892:	46c0      	nop			@ (mov r8, r8)
 8018894:	dfbffffe 	.word	0xdfbffffe

08018898 <_fflush_r>:
 8018898:	690b      	ldr	r3, [r1, #16]
 801889a:	b570      	push	{r4, r5, r6, lr}
 801889c:	0005      	movs	r5, r0
 801889e:	000c      	movs	r4, r1
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d102      	bne.n	80188aa <_fflush_r+0x12>
 80188a4:	2500      	movs	r5, #0
 80188a6:	0028      	movs	r0, r5
 80188a8:	bd70      	pop	{r4, r5, r6, pc}
 80188aa:	2800      	cmp	r0, #0
 80188ac:	d004      	beq.n	80188b8 <_fflush_r+0x20>
 80188ae:	6a03      	ldr	r3, [r0, #32]
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d101      	bne.n	80188b8 <_fflush_r+0x20>
 80188b4:	f7fd ffee 	bl	8016894 <__sinit>
 80188b8:	220c      	movs	r2, #12
 80188ba:	5ea3      	ldrsh	r3, [r4, r2]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d0f1      	beq.n	80188a4 <_fflush_r+0xc>
 80188c0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80188c2:	07d2      	lsls	r2, r2, #31
 80188c4:	d404      	bmi.n	80188d0 <_fflush_r+0x38>
 80188c6:	059b      	lsls	r3, r3, #22
 80188c8:	d402      	bmi.n	80188d0 <_fflush_r+0x38>
 80188ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80188cc:	f7fe f979 	bl	8016bc2 <__retarget_lock_acquire_recursive>
 80188d0:	0028      	movs	r0, r5
 80188d2:	0021      	movs	r1, r4
 80188d4:	f7ff ff5a 	bl	801878c <__sflush_r>
 80188d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80188da:	0005      	movs	r5, r0
 80188dc:	07db      	lsls	r3, r3, #31
 80188de:	d4e2      	bmi.n	80188a6 <_fflush_r+0xe>
 80188e0:	89a3      	ldrh	r3, [r4, #12]
 80188e2:	059b      	lsls	r3, r3, #22
 80188e4:	d4df      	bmi.n	80188a6 <_fflush_r+0xe>
 80188e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80188e8:	f7fe f96c 	bl	8016bc4 <__retarget_lock_release_recursive>
 80188ec:	e7db      	b.n	80188a6 <_fflush_r+0xe>

080188ee <__swbuf_r>:
 80188ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188f0:	0006      	movs	r6, r0
 80188f2:	000d      	movs	r5, r1
 80188f4:	0014      	movs	r4, r2
 80188f6:	2800      	cmp	r0, #0
 80188f8:	d004      	beq.n	8018904 <__swbuf_r+0x16>
 80188fa:	6a03      	ldr	r3, [r0, #32]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d101      	bne.n	8018904 <__swbuf_r+0x16>
 8018900:	f7fd ffc8 	bl	8016894 <__sinit>
 8018904:	69a3      	ldr	r3, [r4, #24]
 8018906:	60a3      	str	r3, [r4, #8]
 8018908:	89a3      	ldrh	r3, [r4, #12]
 801890a:	071b      	lsls	r3, r3, #28
 801890c:	d502      	bpl.n	8018914 <__swbuf_r+0x26>
 801890e:	6923      	ldr	r3, [r4, #16]
 8018910:	2b00      	cmp	r3, #0
 8018912:	d109      	bne.n	8018928 <__swbuf_r+0x3a>
 8018914:	0021      	movs	r1, r4
 8018916:	0030      	movs	r0, r6
 8018918:	f000 f82c 	bl	8018974 <__swsetup_r>
 801891c:	2800      	cmp	r0, #0
 801891e:	d003      	beq.n	8018928 <__swbuf_r+0x3a>
 8018920:	2501      	movs	r5, #1
 8018922:	426d      	negs	r5, r5
 8018924:	0028      	movs	r0, r5
 8018926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018928:	6923      	ldr	r3, [r4, #16]
 801892a:	6820      	ldr	r0, [r4, #0]
 801892c:	b2ef      	uxtb	r7, r5
 801892e:	1ac0      	subs	r0, r0, r3
 8018930:	6963      	ldr	r3, [r4, #20]
 8018932:	b2ed      	uxtb	r5, r5
 8018934:	4283      	cmp	r3, r0
 8018936:	dc05      	bgt.n	8018944 <__swbuf_r+0x56>
 8018938:	0021      	movs	r1, r4
 801893a:	0030      	movs	r0, r6
 801893c:	f7ff ffac 	bl	8018898 <_fflush_r>
 8018940:	2800      	cmp	r0, #0
 8018942:	d1ed      	bne.n	8018920 <__swbuf_r+0x32>
 8018944:	68a3      	ldr	r3, [r4, #8]
 8018946:	3001      	adds	r0, #1
 8018948:	3b01      	subs	r3, #1
 801894a:	60a3      	str	r3, [r4, #8]
 801894c:	6823      	ldr	r3, [r4, #0]
 801894e:	1c5a      	adds	r2, r3, #1
 8018950:	6022      	str	r2, [r4, #0]
 8018952:	701f      	strb	r7, [r3, #0]
 8018954:	6963      	ldr	r3, [r4, #20]
 8018956:	4283      	cmp	r3, r0
 8018958:	d004      	beq.n	8018964 <__swbuf_r+0x76>
 801895a:	89a3      	ldrh	r3, [r4, #12]
 801895c:	07db      	lsls	r3, r3, #31
 801895e:	d5e1      	bpl.n	8018924 <__swbuf_r+0x36>
 8018960:	2d0a      	cmp	r5, #10
 8018962:	d1df      	bne.n	8018924 <__swbuf_r+0x36>
 8018964:	0021      	movs	r1, r4
 8018966:	0030      	movs	r0, r6
 8018968:	f7ff ff96 	bl	8018898 <_fflush_r>
 801896c:	2800      	cmp	r0, #0
 801896e:	d0d9      	beq.n	8018924 <__swbuf_r+0x36>
 8018970:	e7d6      	b.n	8018920 <__swbuf_r+0x32>
	...

08018974 <__swsetup_r>:
 8018974:	4b2d      	ldr	r3, [pc, #180]	@ (8018a2c <__swsetup_r+0xb8>)
 8018976:	b570      	push	{r4, r5, r6, lr}
 8018978:	0005      	movs	r5, r0
 801897a:	6818      	ldr	r0, [r3, #0]
 801897c:	000c      	movs	r4, r1
 801897e:	2800      	cmp	r0, #0
 8018980:	d004      	beq.n	801898c <__swsetup_r+0x18>
 8018982:	6a03      	ldr	r3, [r0, #32]
 8018984:	2b00      	cmp	r3, #0
 8018986:	d101      	bne.n	801898c <__swsetup_r+0x18>
 8018988:	f7fd ff84 	bl	8016894 <__sinit>
 801898c:	230c      	movs	r3, #12
 801898e:	5ee2      	ldrsh	r2, [r4, r3]
 8018990:	0713      	lsls	r3, r2, #28
 8018992:	d423      	bmi.n	80189dc <__swsetup_r+0x68>
 8018994:	06d3      	lsls	r3, r2, #27
 8018996:	d407      	bmi.n	80189a8 <__swsetup_r+0x34>
 8018998:	2309      	movs	r3, #9
 801899a:	602b      	str	r3, [r5, #0]
 801899c:	2340      	movs	r3, #64	@ 0x40
 801899e:	2001      	movs	r0, #1
 80189a0:	4313      	orrs	r3, r2
 80189a2:	81a3      	strh	r3, [r4, #12]
 80189a4:	4240      	negs	r0, r0
 80189a6:	e03a      	b.n	8018a1e <__swsetup_r+0xaa>
 80189a8:	0752      	lsls	r2, r2, #29
 80189aa:	d513      	bpl.n	80189d4 <__swsetup_r+0x60>
 80189ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80189ae:	2900      	cmp	r1, #0
 80189b0:	d008      	beq.n	80189c4 <__swsetup_r+0x50>
 80189b2:	0023      	movs	r3, r4
 80189b4:	3344      	adds	r3, #68	@ 0x44
 80189b6:	4299      	cmp	r1, r3
 80189b8:	d002      	beq.n	80189c0 <__swsetup_r+0x4c>
 80189ba:	0028      	movs	r0, r5
 80189bc:	f7fe ff9a 	bl	80178f4 <_free_r>
 80189c0:	2300      	movs	r3, #0
 80189c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80189c4:	2224      	movs	r2, #36	@ 0x24
 80189c6:	89a3      	ldrh	r3, [r4, #12]
 80189c8:	4393      	bics	r3, r2
 80189ca:	81a3      	strh	r3, [r4, #12]
 80189cc:	2300      	movs	r3, #0
 80189ce:	6063      	str	r3, [r4, #4]
 80189d0:	6923      	ldr	r3, [r4, #16]
 80189d2:	6023      	str	r3, [r4, #0]
 80189d4:	2308      	movs	r3, #8
 80189d6:	89a2      	ldrh	r2, [r4, #12]
 80189d8:	4313      	orrs	r3, r2
 80189da:	81a3      	strh	r3, [r4, #12]
 80189dc:	6923      	ldr	r3, [r4, #16]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d10b      	bne.n	80189fa <__swsetup_r+0x86>
 80189e2:	21a0      	movs	r1, #160	@ 0xa0
 80189e4:	2280      	movs	r2, #128	@ 0x80
 80189e6:	89a3      	ldrh	r3, [r4, #12]
 80189e8:	0089      	lsls	r1, r1, #2
 80189ea:	0092      	lsls	r2, r2, #2
 80189ec:	400b      	ands	r3, r1
 80189ee:	4293      	cmp	r3, r2
 80189f0:	d003      	beq.n	80189fa <__swsetup_r+0x86>
 80189f2:	0021      	movs	r1, r4
 80189f4:	0028      	movs	r0, r5
 80189f6:	f000 f915 	bl	8018c24 <__smakebuf_r>
 80189fa:	230c      	movs	r3, #12
 80189fc:	5ee2      	ldrsh	r2, [r4, r3]
 80189fe:	2101      	movs	r1, #1
 8018a00:	0013      	movs	r3, r2
 8018a02:	400b      	ands	r3, r1
 8018a04:	420a      	tst	r2, r1
 8018a06:	d00b      	beq.n	8018a20 <__swsetup_r+0xac>
 8018a08:	2300      	movs	r3, #0
 8018a0a:	60a3      	str	r3, [r4, #8]
 8018a0c:	6963      	ldr	r3, [r4, #20]
 8018a0e:	425b      	negs	r3, r3
 8018a10:	61a3      	str	r3, [r4, #24]
 8018a12:	2000      	movs	r0, #0
 8018a14:	6923      	ldr	r3, [r4, #16]
 8018a16:	4283      	cmp	r3, r0
 8018a18:	d101      	bne.n	8018a1e <__swsetup_r+0xaa>
 8018a1a:	0613      	lsls	r3, r2, #24
 8018a1c:	d4be      	bmi.n	801899c <__swsetup_r+0x28>
 8018a1e:	bd70      	pop	{r4, r5, r6, pc}
 8018a20:	0791      	lsls	r1, r2, #30
 8018a22:	d400      	bmi.n	8018a26 <__swsetup_r+0xb2>
 8018a24:	6963      	ldr	r3, [r4, #20]
 8018a26:	60a3      	str	r3, [r4, #8]
 8018a28:	e7f3      	b.n	8018a12 <__swsetup_r+0x9e>
 8018a2a:	46c0      	nop			@ (mov r8, r8)
 8018a2c:	200002d4 	.word	0x200002d4

08018a30 <memmove>:
 8018a30:	b510      	push	{r4, lr}
 8018a32:	4288      	cmp	r0, r1
 8018a34:	d806      	bhi.n	8018a44 <memmove+0x14>
 8018a36:	2300      	movs	r3, #0
 8018a38:	429a      	cmp	r2, r3
 8018a3a:	d008      	beq.n	8018a4e <memmove+0x1e>
 8018a3c:	5ccc      	ldrb	r4, [r1, r3]
 8018a3e:	54c4      	strb	r4, [r0, r3]
 8018a40:	3301      	adds	r3, #1
 8018a42:	e7f9      	b.n	8018a38 <memmove+0x8>
 8018a44:	188b      	adds	r3, r1, r2
 8018a46:	4298      	cmp	r0, r3
 8018a48:	d2f5      	bcs.n	8018a36 <memmove+0x6>
 8018a4a:	3a01      	subs	r2, #1
 8018a4c:	d200      	bcs.n	8018a50 <memmove+0x20>
 8018a4e:	bd10      	pop	{r4, pc}
 8018a50:	5c8b      	ldrb	r3, [r1, r2]
 8018a52:	5483      	strb	r3, [r0, r2]
 8018a54:	e7f9      	b.n	8018a4a <memmove+0x1a>
	...

08018a58 <_sbrk_r>:
 8018a58:	2300      	movs	r3, #0
 8018a5a:	b570      	push	{r4, r5, r6, lr}
 8018a5c:	4d06      	ldr	r5, [pc, #24]	@ (8018a78 <_sbrk_r+0x20>)
 8018a5e:	0004      	movs	r4, r0
 8018a60:	0008      	movs	r0, r1
 8018a62:	602b      	str	r3, [r5, #0]
 8018a64:	f7ef fccc 	bl	8008400 <_sbrk>
 8018a68:	1c43      	adds	r3, r0, #1
 8018a6a:	d103      	bne.n	8018a74 <_sbrk_r+0x1c>
 8018a6c:	682b      	ldr	r3, [r5, #0]
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d000      	beq.n	8018a74 <_sbrk_r+0x1c>
 8018a72:	6023      	str	r3, [r4, #0]
 8018a74:	bd70      	pop	{r4, r5, r6, pc}
 8018a76:	46c0      	nop			@ (mov r8, r8)
 8018a78:	200043dc 	.word	0x200043dc

08018a7c <__assert_func>:
 8018a7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8018a7e:	0014      	movs	r4, r2
 8018a80:	001a      	movs	r2, r3
 8018a82:	4b09      	ldr	r3, [pc, #36]	@ (8018aa8 <__assert_func+0x2c>)
 8018a84:	0005      	movs	r5, r0
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	000e      	movs	r6, r1
 8018a8a:	68d8      	ldr	r0, [r3, #12]
 8018a8c:	4b07      	ldr	r3, [pc, #28]	@ (8018aac <__assert_func+0x30>)
 8018a8e:	2c00      	cmp	r4, #0
 8018a90:	d101      	bne.n	8018a96 <__assert_func+0x1a>
 8018a92:	4b07      	ldr	r3, [pc, #28]	@ (8018ab0 <__assert_func+0x34>)
 8018a94:	001c      	movs	r4, r3
 8018a96:	4907      	ldr	r1, [pc, #28]	@ (8018ab4 <__assert_func+0x38>)
 8018a98:	9301      	str	r3, [sp, #4]
 8018a9a:	9402      	str	r4, [sp, #8]
 8018a9c:	002b      	movs	r3, r5
 8018a9e:	9600      	str	r6, [sp, #0]
 8018aa0:	f000 f886 	bl	8018bb0 <fiprintf>
 8018aa4:	f000 f924 	bl	8018cf0 <abort>
 8018aa8:	200002d4 	.word	0x200002d4
 8018aac:	0801a7a3 	.word	0x0801a7a3
 8018ab0:	0801a7de 	.word	0x0801a7de
 8018ab4:	0801a7b0 	.word	0x0801a7b0

08018ab8 <_calloc_r>:
 8018ab8:	b570      	push	{r4, r5, r6, lr}
 8018aba:	0c0b      	lsrs	r3, r1, #16
 8018abc:	0c15      	lsrs	r5, r2, #16
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d11e      	bne.n	8018b00 <_calloc_r+0x48>
 8018ac2:	2d00      	cmp	r5, #0
 8018ac4:	d10c      	bne.n	8018ae0 <_calloc_r+0x28>
 8018ac6:	b289      	uxth	r1, r1
 8018ac8:	b294      	uxth	r4, r2
 8018aca:	434c      	muls	r4, r1
 8018acc:	0021      	movs	r1, r4
 8018ace:	f7fe ff87 	bl	80179e0 <_malloc_r>
 8018ad2:	1e05      	subs	r5, r0, #0
 8018ad4:	d01a      	beq.n	8018b0c <_calloc_r+0x54>
 8018ad6:	0022      	movs	r2, r4
 8018ad8:	2100      	movs	r1, #0
 8018ada:	f7fd ffc3 	bl	8016a64 <memset>
 8018ade:	e016      	b.n	8018b0e <_calloc_r+0x56>
 8018ae0:	1c2b      	adds	r3, r5, #0
 8018ae2:	1c0c      	adds	r4, r1, #0
 8018ae4:	b289      	uxth	r1, r1
 8018ae6:	b292      	uxth	r2, r2
 8018ae8:	434a      	muls	r2, r1
 8018aea:	b29b      	uxth	r3, r3
 8018aec:	b2a1      	uxth	r1, r4
 8018aee:	4359      	muls	r1, r3
 8018af0:	0c14      	lsrs	r4, r2, #16
 8018af2:	190c      	adds	r4, r1, r4
 8018af4:	0c23      	lsrs	r3, r4, #16
 8018af6:	d107      	bne.n	8018b08 <_calloc_r+0x50>
 8018af8:	0424      	lsls	r4, r4, #16
 8018afa:	b292      	uxth	r2, r2
 8018afc:	4314      	orrs	r4, r2
 8018afe:	e7e5      	b.n	8018acc <_calloc_r+0x14>
 8018b00:	2d00      	cmp	r5, #0
 8018b02:	d101      	bne.n	8018b08 <_calloc_r+0x50>
 8018b04:	1c14      	adds	r4, r2, #0
 8018b06:	e7ed      	b.n	8018ae4 <_calloc_r+0x2c>
 8018b08:	230c      	movs	r3, #12
 8018b0a:	6003      	str	r3, [r0, #0]
 8018b0c:	2500      	movs	r5, #0
 8018b0e:	0028      	movs	r0, r5
 8018b10:	bd70      	pop	{r4, r5, r6, pc}

08018b12 <__ascii_mbtowc>:
 8018b12:	b082      	sub	sp, #8
 8018b14:	2900      	cmp	r1, #0
 8018b16:	d100      	bne.n	8018b1a <__ascii_mbtowc+0x8>
 8018b18:	a901      	add	r1, sp, #4
 8018b1a:	1e10      	subs	r0, r2, #0
 8018b1c:	d006      	beq.n	8018b2c <__ascii_mbtowc+0x1a>
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d006      	beq.n	8018b30 <__ascii_mbtowc+0x1e>
 8018b22:	7813      	ldrb	r3, [r2, #0]
 8018b24:	600b      	str	r3, [r1, #0]
 8018b26:	7810      	ldrb	r0, [r2, #0]
 8018b28:	1e43      	subs	r3, r0, #1
 8018b2a:	4198      	sbcs	r0, r3
 8018b2c:	b002      	add	sp, #8
 8018b2e:	4770      	bx	lr
 8018b30:	2002      	movs	r0, #2
 8018b32:	4240      	negs	r0, r0
 8018b34:	e7fa      	b.n	8018b2c <__ascii_mbtowc+0x1a>

08018b36 <_realloc_r>:
 8018b36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018b38:	0006      	movs	r6, r0
 8018b3a:	000c      	movs	r4, r1
 8018b3c:	0015      	movs	r5, r2
 8018b3e:	2900      	cmp	r1, #0
 8018b40:	d105      	bne.n	8018b4e <_realloc_r+0x18>
 8018b42:	0011      	movs	r1, r2
 8018b44:	f7fe ff4c 	bl	80179e0 <_malloc_r>
 8018b48:	0004      	movs	r4, r0
 8018b4a:	0020      	movs	r0, r4
 8018b4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018b4e:	2a00      	cmp	r2, #0
 8018b50:	d103      	bne.n	8018b5a <_realloc_r+0x24>
 8018b52:	f7fe fecf 	bl	80178f4 <_free_r>
 8018b56:	2400      	movs	r4, #0
 8018b58:	e7f7      	b.n	8018b4a <_realloc_r+0x14>
 8018b5a:	f000 f8d0 	bl	8018cfe <_malloc_usable_size_r>
 8018b5e:	0007      	movs	r7, r0
 8018b60:	4285      	cmp	r5, r0
 8018b62:	d802      	bhi.n	8018b6a <_realloc_r+0x34>
 8018b64:	0843      	lsrs	r3, r0, #1
 8018b66:	42ab      	cmp	r3, r5
 8018b68:	d3ef      	bcc.n	8018b4a <_realloc_r+0x14>
 8018b6a:	0029      	movs	r1, r5
 8018b6c:	0030      	movs	r0, r6
 8018b6e:	f7fe ff37 	bl	80179e0 <_malloc_r>
 8018b72:	9001      	str	r0, [sp, #4]
 8018b74:	2800      	cmp	r0, #0
 8018b76:	d0ee      	beq.n	8018b56 <_realloc_r+0x20>
 8018b78:	002a      	movs	r2, r5
 8018b7a:	42bd      	cmp	r5, r7
 8018b7c:	d900      	bls.n	8018b80 <_realloc_r+0x4a>
 8018b7e:	003a      	movs	r2, r7
 8018b80:	0021      	movs	r1, r4
 8018b82:	9801      	ldr	r0, [sp, #4]
 8018b84:	f7fe f82a 	bl	8016bdc <memcpy>
 8018b88:	0021      	movs	r1, r4
 8018b8a:	0030      	movs	r0, r6
 8018b8c:	f7fe feb2 	bl	80178f4 <_free_r>
 8018b90:	9c01      	ldr	r4, [sp, #4]
 8018b92:	e7da      	b.n	8018b4a <_realloc_r+0x14>

08018b94 <__ascii_wctomb>:
 8018b94:	0003      	movs	r3, r0
 8018b96:	1e08      	subs	r0, r1, #0
 8018b98:	d005      	beq.n	8018ba6 <__ascii_wctomb+0x12>
 8018b9a:	2aff      	cmp	r2, #255	@ 0xff
 8018b9c:	d904      	bls.n	8018ba8 <__ascii_wctomb+0x14>
 8018b9e:	228a      	movs	r2, #138	@ 0x8a
 8018ba0:	2001      	movs	r0, #1
 8018ba2:	601a      	str	r2, [r3, #0]
 8018ba4:	4240      	negs	r0, r0
 8018ba6:	4770      	bx	lr
 8018ba8:	2001      	movs	r0, #1
 8018baa:	700a      	strb	r2, [r1, #0]
 8018bac:	e7fb      	b.n	8018ba6 <__ascii_wctomb+0x12>
	...

08018bb0 <fiprintf>:
 8018bb0:	b40e      	push	{r1, r2, r3}
 8018bb2:	b517      	push	{r0, r1, r2, r4, lr}
 8018bb4:	4c05      	ldr	r4, [pc, #20]	@ (8018bcc <fiprintf+0x1c>)
 8018bb6:	ab05      	add	r3, sp, #20
 8018bb8:	cb04      	ldmia	r3!, {r2}
 8018bba:	0001      	movs	r1, r0
 8018bbc:	6820      	ldr	r0, [r4, #0]
 8018bbe:	9301      	str	r3, [sp, #4]
 8018bc0:	f7ff fcc8 	bl	8018554 <_vfiprintf_r>
 8018bc4:	bc1e      	pop	{r1, r2, r3, r4}
 8018bc6:	bc08      	pop	{r3}
 8018bc8:	b003      	add	sp, #12
 8018bca:	4718      	bx	r3
 8018bcc:	200002d4 	.word	0x200002d4

08018bd0 <__swhatbuf_r>:
 8018bd0:	b570      	push	{r4, r5, r6, lr}
 8018bd2:	000e      	movs	r6, r1
 8018bd4:	001d      	movs	r5, r3
 8018bd6:	230e      	movs	r3, #14
 8018bd8:	5ec9      	ldrsh	r1, [r1, r3]
 8018bda:	0014      	movs	r4, r2
 8018bdc:	b096      	sub	sp, #88	@ 0x58
 8018bde:	2900      	cmp	r1, #0
 8018be0:	da0c      	bge.n	8018bfc <__swhatbuf_r+0x2c>
 8018be2:	89b2      	ldrh	r2, [r6, #12]
 8018be4:	2380      	movs	r3, #128	@ 0x80
 8018be6:	0011      	movs	r1, r2
 8018be8:	4019      	ands	r1, r3
 8018bea:	421a      	tst	r2, r3
 8018bec:	d114      	bne.n	8018c18 <__swhatbuf_r+0x48>
 8018bee:	2380      	movs	r3, #128	@ 0x80
 8018bf0:	00db      	lsls	r3, r3, #3
 8018bf2:	2000      	movs	r0, #0
 8018bf4:	6029      	str	r1, [r5, #0]
 8018bf6:	6023      	str	r3, [r4, #0]
 8018bf8:	b016      	add	sp, #88	@ 0x58
 8018bfa:	bd70      	pop	{r4, r5, r6, pc}
 8018bfc:	466a      	mov	r2, sp
 8018bfe:	f000 f853 	bl	8018ca8 <_fstat_r>
 8018c02:	2800      	cmp	r0, #0
 8018c04:	dbed      	blt.n	8018be2 <__swhatbuf_r+0x12>
 8018c06:	23f0      	movs	r3, #240	@ 0xf0
 8018c08:	9901      	ldr	r1, [sp, #4]
 8018c0a:	021b      	lsls	r3, r3, #8
 8018c0c:	4019      	ands	r1, r3
 8018c0e:	4b04      	ldr	r3, [pc, #16]	@ (8018c20 <__swhatbuf_r+0x50>)
 8018c10:	18c9      	adds	r1, r1, r3
 8018c12:	424b      	negs	r3, r1
 8018c14:	4159      	adcs	r1, r3
 8018c16:	e7ea      	b.n	8018bee <__swhatbuf_r+0x1e>
 8018c18:	2100      	movs	r1, #0
 8018c1a:	2340      	movs	r3, #64	@ 0x40
 8018c1c:	e7e9      	b.n	8018bf2 <__swhatbuf_r+0x22>
 8018c1e:	46c0      	nop			@ (mov r8, r8)
 8018c20:	ffffe000 	.word	0xffffe000

08018c24 <__smakebuf_r>:
 8018c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c26:	2602      	movs	r6, #2
 8018c28:	898b      	ldrh	r3, [r1, #12]
 8018c2a:	0005      	movs	r5, r0
 8018c2c:	000c      	movs	r4, r1
 8018c2e:	b085      	sub	sp, #20
 8018c30:	4233      	tst	r3, r6
 8018c32:	d007      	beq.n	8018c44 <__smakebuf_r+0x20>
 8018c34:	0023      	movs	r3, r4
 8018c36:	3347      	adds	r3, #71	@ 0x47
 8018c38:	6023      	str	r3, [r4, #0]
 8018c3a:	6123      	str	r3, [r4, #16]
 8018c3c:	2301      	movs	r3, #1
 8018c3e:	6163      	str	r3, [r4, #20]
 8018c40:	b005      	add	sp, #20
 8018c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c44:	ab03      	add	r3, sp, #12
 8018c46:	aa02      	add	r2, sp, #8
 8018c48:	f7ff ffc2 	bl	8018bd0 <__swhatbuf_r>
 8018c4c:	9f02      	ldr	r7, [sp, #8]
 8018c4e:	9001      	str	r0, [sp, #4]
 8018c50:	0039      	movs	r1, r7
 8018c52:	0028      	movs	r0, r5
 8018c54:	f7fe fec4 	bl	80179e0 <_malloc_r>
 8018c58:	2800      	cmp	r0, #0
 8018c5a:	d108      	bne.n	8018c6e <__smakebuf_r+0x4a>
 8018c5c:	220c      	movs	r2, #12
 8018c5e:	5ea3      	ldrsh	r3, [r4, r2]
 8018c60:	059a      	lsls	r2, r3, #22
 8018c62:	d4ed      	bmi.n	8018c40 <__smakebuf_r+0x1c>
 8018c64:	2203      	movs	r2, #3
 8018c66:	4393      	bics	r3, r2
 8018c68:	431e      	orrs	r6, r3
 8018c6a:	81a6      	strh	r6, [r4, #12]
 8018c6c:	e7e2      	b.n	8018c34 <__smakebuf_r+0x10>
 8018c6e:	2380      	movs	r3, #128	@ 0x80
 8018c70:	89a2      	ldrh	r2, [r4, #12]
 8018c72:	6020      	str	r0, [r4, #0]
 8018c74:	4313      	orrs	r3, r2
 8018c76:	81a3      	strh	r3, [r4, #12]
 8018c78:	9b03      	ldr	r3, [sp, #12]
 8018c7a:	6120      	str	r0, [r4, #16]
 8018c7c:	6167      	str	r7, [r4, #20]
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d00c      	beq.n	8018c9c <__smakebuf_r+0x78>
 8018c82:	0028      	movs	r0, r5
 8018c84:	230e      	movs	r3, #14
 8018c86:	5ee1      	ldrsh	r1, [r4, r3]
 8018c88:	f000 f820 	bl	8018ccc <_isatty_r>
 8018c8c:	2800      	cmp	r0, #0
 8018c8e:	d005      	beq.n	8018c9c <__smakebuf_r+0x78>
 8018c90:	2303      	movs	r3, #3
 8018c92:	89a2      	ldrh	r2, [r4, #12]
 8018c94:	439a      	bics	r2, r3
 8018c96:	3b02      	subs	r3, #2
 8018c98:	4313      	orrs	r3, r2
 8018c9a:	81a3      	strh	r3, [r4, #12]
 8018c9c:	89a3      	ldrh	r3, [r4, #12]
 8018c9e:	9a01      	ldr	r2, [sp, #4]
 8018ca0:	4313      	orrs	r3, r2
 8018ca2:	81a3      	strh	r3, [r4, #12]
 8018ca4:	e7cc      	b.n	8018c40 <__smakebuf_r+0x1c>
	...

08018ca8 <_fstat_r>:
 8018ca8:	2300      	movs	r3, #0
 8018caa:	b570      	push	{r4, r5, r6, lr}
 8018cac:	4d06      	ldr	r5, [pc, #24]	@ (8018cc8 <_fstat_r+0x20>)
 8018cae:	0004      	movs	r4, r0
 8018cb0:	0008      	movs	r0, r1
 8018cb2:	0011      	movs	r1, r2
 8018cb4:	602b      	str	r3, [r5, #0]
 8018cb6:	f7ef fb81 	bl	80083bc <_fstat>
 8018cba:	1c43      	adds	r3, r0, #1
 8018cbc:	d103      	bne.n	8018cc6 <_fstat_r+0x1e>
 8018cbe:	682b      	ldr	r3, [r5, #0]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d000      	beq.n	8018cc6 <_fstat_r+0x1e>
 8018cc4:	6023      	str	r3, [r4, #0]
 8018cc6:	bd70      	pop	{r4, r5, r6, pc}
 8018cc8:	200043dc 	.word	0x200043dc

08018ccc <_isatty_r>:
 8018ccc:	2300      	movs	r3, #0
 8018cce:	b570      	push	{r4, r5, r6, lr}
 8018cd0:	4d06      	ldr	r5, [pc, #24]	@ (8018cec <_isatty_r+0x20>)
 8018cd2:	0004      	movs	r4, r0
 8018cd4:	0008      	movs	r0, r1
 8018cd6:	602b      	str	r3, [r5, #0]
 8018cd8:	f7ef fb7e 	bl	80083d8 <_isatty>
 8018cdc:	1c43      	adds	r3, r0, #1
 8018cde:	d103      	bne.n	8018ce8 <_isatty_r+0x1c>
 8018ce0:	682b      	ldr	r3, [r5, #0]
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d000      	beq.n	8018ce8 <_isatty_r+0x1c>
 8018ce6:	6023      	str	r3, [r4, #0]
 8018ce8:	bd70      	pop	{r4, r5, r6, pc}
 8018cea:	46c0      	nop			@ (mov r8, r8)
 8018cec:	200043dc 	.word	0x200043dc

08018cf0 <abort>:
 8018cf0:	2006      	movs	r0, #6
 8018cf2:	b510      	push	{r4, lr}
 8018cf4:	f000 f834 	bl	8018d60 <raise>
 8018cf8:	2001      	movs	r0, #1
 8018cfa:	f7ef fb2b 	bl	8008354 <_exit>

08018cfe <_malloc_usable_size_r>:
 8018cfe:	1f0b      	subs	r3, r1, #4
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	1f18      	subs	r0, r3, #4
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	da01      	bge.n	8018d0c <_malloc_usable_size_r+0xe>
 8018d08:	580b      	ldr	r3, [r1, r0]
 8018d0a:	18c0      	adds	r0, r0, r3
 8018d0c:	4770      	bx	lr

08018d0e <_raise_r>:
 8018d0e:	b570      	push	{r4, r5, r6, lr}
 8018d10:	0004      	movs	r4, r0
 8018d12:	000d      	movs	r5, r1
 8018d14:	291f      	cmp	r1, #31
 8018d16:	d904      	bls.n	8018d22 <_raise_r+0x14>
 8018d18:	2316      	movs	r3, #22
 8018d1a:	6003      	str	r3, [r0, #0]
 8018d1c:	2001      	movs	r0, #1
 8018d1e:	4240      	negs	r0, r0
 8018d20:	bd70      	pop	{r4, r5, r6, pc}
 8018d22:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	d004      	beq.n	8018d32 <_raise_r+0x24>
 8018d28:	008a      	lsls	r2, r1, #2
 8018d2a:	189b      	adds	r3, r3, r2
 8018d2c:	681a      	ldr	r2, [r3, #0]
 8018d2e:	2a00      	cmp	r2, #0
 8018d30:	d108      	bne.n	8018d44 <_raise_r+0x36>
 8018d32:	0020      	movs	r0, r4
 8018d34:	f000 f830 	bl	8018d98 <_getpid_r>
 8018d38:	002a      	movs	r2, r5
 8018d3a:	0001      	movs	r1, r0
 8018d3c:	0020      	movs	r0, r4
 8018d3e:	f000 f819 	bl	8018d74 <_kill_r>
 8018d42:	e7ed      	b.n	8018d20 <_raise_r+0x12>
 8018d44:	2a01      	cmp	r2, #1
 8018d46:	d009      	beq.n	8018d5c <_raise_r+0x4e>
 8018d48:	1c51      	adds	r1, r2, #1
 8018d4a:	d103      	bne.n	8018d54 <_raise_r+0x46>
 8018d4c:	2316      	movs	r3, #22
 8018d4e:	6003      	str	r3, [r0, #0]
 8018d50:	2001      	movs	r0, #1
 8018d52:	e7e5      	b.n	8018d20 <_raise_r+0x12>
 8018d54:	2100      	movs	r1, #0
 8018d56:	0028      	movs	r0, r5
 8018d58:	6019      	str	r1, [r3, #0]
 8018d5a:	4790      	blx	r2
 8018d5c:	2000      	movs	r0, #0
 8018d5e:	e7df      	b.n	8018d20 <_raise_r+0x12>

08018d60 <raise>:
 8018d60:	b510      	push	{r4, lr}
 8018d62:	4b03      	ldr	r3, [pc, #12]	@ (8018d70 <raise+0x10>)
 8018d64:	0001      	movs	r1, r0
 8018d66:	6818      	ldr	r0, [r3, #0]
 8018d68:	f7ff ffd1 	bl	8018d0e <_raise_r>
 8018d6c:	bd10      	pop	{r4, pc}
 8018d6e:	46c0      	nop			@ (mov r8, r8)
 8018d70:	200002d4 	.word	0x200002d4

08018d74 <_kill_r>:
 8018d74:	2300      	movs	r3, #0
 8018d76:	b570      	push	{r4, r5, r6, lr}
 8018d78:	4d06      	ldr	r5, [pc, #24]	@ (8018d94 <_kill_r+0x20>)
 8018d7a:	0004      	movs	r4, r0
 8018d7c:	0008      	movs	r0, r1
 8018d7e:	0011      	movs	r1, r2
 8018d80:	602b      	str	r3, [r5, #0]
 8018d82:	f7ef fad7 	bl	8008334 <_kill>
 8018d86:	1c43      	adds	r3, r0, #1
 8018d88:	d103      	bne.n	8018d92 <_kill_r+0x1e>
 8018d8a:	682b      	ldr	r3, [r5, #0]
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d000      	beq.n	8018d92 <_kill_r+0x1e>
 8018d90:	6023      	str	r3, [r4, #0]
 8018d92:	bd70      	pop	{r4, r5, r6, pc}
 8018d94:	200043dc 	.word	0x200043dc

08018d98 <_getpid_r>:
 8018d98:	b510      	push	{r4, lr}
 8018d9a:	f7ef fac5 	bl	8008328 <_getpid>
 8018d9e:	bd10      	pop	{r4, pc}

08018da0 <log10>:
 8018da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018da2:	0004      	movs	r4, r0
 8018da4:	000d      	movs	r5, r1
 8018da6:	f000 fa0b 	bl	80191c0 <__ieee754_log10>
 8018daa:	0022      	movs	r2, r4
 8018dac:	0006      	movs	r6, r0
 8018dae:	000f      	movs	r7, r1
 8018db0:	002b      	movs	r3, r5
 8018db2:	0020      	movs	r0, r4
 8018db4:	0029      	movs	r1, r5
 8018db6:	f7ea fa23 	bl	8003200 <__aeabi_dcmpun>
 8018dba:	2800      	cmp	r0, #0
 8018dbc:	d115      	bne.n	8018dea <log10+0x4a>
 8018dbe:	2200      	movs	r2, #0
 8018dc0:	2300      	movs	r3, #0
 8018dc2:	0020      	movs	r0, r4
 8018dc4:	0029      	movs	r1, r5
 8018dc6:	f7e7 fb51 	bl	800046c <__aeabi_dcmple>
 8018dca:	2800      	cmp	r0, #0
 8018dcc:	d00d      	beq.n	8018dea <log10+0x4a>
 8018dce:	2200      	movs	r2, #0
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	0020      	movs	r0, r4
 8018dd4:	0029      	movs	r1, r5
 8018dd6:	f7e7 fb39 	bl	800044c <__aeabi_dcmpeq>
 8018dda:	2800      	cmp	r0, #0
 8018ddc:	d008      	beq.n	8018df0 <log10+0x50>
 8018dde:	f7fd fec5 	bl	8016b6c <__errno>
 8018de2:	2322      	movs	r3, #34	@ 0x22
 8018de4:	2600      	movs	r6, #0
 8018de6:	4f07      	ldr	r7, [pc, #28]	@ (8018e04 <log10+0x64>)
 8018de8:	6003      	str	r3, [r0, #0]
 8018dea:	0030      	movs	r0, r6
 8018dec:	0039      	movs	r1, r7
 8018dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018df0:	f7fd febc 	bl	8016b6c <__errno>
 8018df4:	2321      	movs	r3, #33	@ 0x21
 8018df6:	6003      	str	r3, [r0, #0]
 8018df8:	4803      	ldr	r0, [pc, #12]	@ (8018e08 <log10+0x68>)
 8018dfa:	f000 f871 	bl	8018ee0 <nan>
 8018dfe:	0006      	movs	r6, r0
 8018e00:	000f      	movs	r7, r1
 8018e02:	e7f2      	b.n	8018dea <log10+0x4a>
 8018e04:	fff00000 	.word	0xfff00000
 8018e08:	0801a7de 	.word	0x0801a7de

08018e0c <sqrt>:
 8018e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e0e:	0004      	movs	r4, r0
 8018e10:	000d      	movs	r5, r1
 8018e12:	f000 f875 	bl	8018f00 <__ieee754_sqrt>
 8018e16:	0022      	movs	r2, r4
 8018e18:	0006      	movs	r6, r0
 8018e1a:	000f      	movs	r7, r1
 8018e1c:	002b      	movs	r3, r5
 8018e1e:	0020      	movs	r0, r4
 8018e20:	0029      	movs	r1, r5
 8018e22:	f7ea f9ed 	bl	8003200 <__aeabi_dcmpun>
 8018e26:	2800      	cmp	r0, #0
 8018e28:	d113      	bne.n	8018e52 <sqrt+0x46>
 8018e2a:	2200      	movs	r2, #0
 8018e2c:	2300      	movs	r3, #0
 8018e2e:	0020      	movs	r0, r4
 8018e30:	0029      	movs	r1, r5
 8018e32:	f7e7 fb11 	bl	8000458 <__aeabi_dcmplt>
 8018e36:	2800      	cmp	r0, #0
 8018e38:	d00b      	beq.n	8018e52 <sqrt+0x46>
 8018e3a:	f7fd fe97 	bl	8016b6c <__errno>
 8018e3e:	2321      	movs	r3, #33	@ 0x21
 8018e40:	2200      	movs	r2, #0
 8018e42:	6003      	str	r3, [r0, #0]
 8018e44:	2300      	movs	r3, #0
 8018e46:	0010      	movs	r0, r2
 8018e48:	0019      	movs	r1, r3
 8018e4a:	f7e8 ff31 	bl	8001cb0 <__aeabi_ddiv>
 8018e4e:	0006      	movs	r6, r0
 8018e50:	000f      	movs	r7, r1
 8018e52:	0030      	movs	r0, r6
 8018e54:	0039      	movs	r1, r7
 8018e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018e58 <expf>:
 8018e58:	b570      	push	{r4, r5, r6, lr}
 8018e5a:	1c04      	adds	r4, r0, #0
 8018e5c:	f000 fa2a 	bl	80192b4 <__ieee754_expf>
 8018e60:	1c05      	adds	r5, r0, #0
 8018e62:	1c20      	adds	r0, r4, #0
 8018e64:	f000 f842 	bl	8018eec <finitef>
 8018e68:	2800      	cmp	r0, #0
 8018e6a:	d00b      	beq.n	8018e84 <expf+0x2c>
 8018e6c:	490c      	ldr	r1, [pc, #48]	@ (8018ea0 <expf+0x48>)
 8018e6e:	1c20      	adds	r0, r4, #0
 8018e70:	f7e7 fb40 	bl	80004f4 <__aeabi_fcmpgt>
 8018e74:	2800      	cmp	r0, #0
 8018e76:	d007      	beq.n	8018e88 <expf+0x30>
 8018e78:	f7fd fe78 	bl	8016b6c <__errno>
 8018e7c:	25ff      	movs	r5, #255	@ 0xff
 8018e7e:	2322      	movs	r3, #34	@ 0x22
 8018e80:	05ed      	lsls	r5, r5, #23
 8018e82:	6003      	str	r3, [r0, #0]
 8018e84:	1c28      	adds	r0, r5, #0
 8018e86:	bd70      	pop	{r4, r5, r6, pc}
 8018e88:	4906      	ldr	r1, [pc, #24]	@ (8018ea4 <expf+0x4c>)
 8018e8a:	1c20      	adds	r0, r4, #0
 8018e8c:	f7e7 fb1e 	bl	80004cc <__aeabi_fcmplt>
 8018e90:	2800      	cmp	r0, #0
 8018e92:	d0f7      	beq.n	8018e84 <expf+0x2c>
 8018e94:	f7fd fe6a 	bl	8016b6c <__errno>
 8018e98:	2322      	movs	r3, #34	@ 0x22
 8018e9a:	2500      	movs	r5, #0
 8018e9c:	6003      	str	r3, [r0, #0]
 8018e9e:	e7f1      	b.n	8018e84 <expf+0x2c>
 8018ea0:	42b17217 	.word	0x42b17217
 8018ea4:	c2cff1b5 	.word	0xc2cff1b5

08018ea8 <sqrtf>:
 8018ea8:	b570      	push	{r4, r5, r6, lr}
 8018eaa:	1c05      	adds	r5, r0, #0
 8018eac:	f000 f910 	bl	80190d0 <__ieee754_sqrtf>
 8018eb0:	1c29      	adds	r1, r5, #0
 8018eb2:	1c04      	adds	r4, r0, #0
 8018eb4:	1c28      	adds	r0, r5, #0
 8018eb6:	f7e8 fad3 	bl	8001460 <__aeabi_fcmpun>
 8018eba:	2800      	cmp	r0, #0
 8018ebc:	d10e      	bne.n	8018edc <sqrtf+0x34>
 8018ebe:	2100      	movs	r1, #0
 8018ec0:	1c28      	adds	r0, r5, #0
 8018ec2:	f7e7 fb03 	bl	80004cc <__aeabi_fcmplt>
 8018ec6:	2800      	cmp	r0, #0
 8018ec8:	d008      	beq.n	8018edc <sqrtf+0x34>
 8018eca:	f7fd fe4f 	bl	8016b6c <__errno>
 8018ece:	2321      	movs	r3, #33	@ 0x21
 8018ed0:	2100      	movs	r1, #0
 8018ed2:	6003      	str	r3, [r0, #0]
 8018ed4:	1c08      	adds	r0, r1, #0
 8018ed6:	f7e7 fdfb 	bl	8000ad0 <__aeabi_fdiv>
 8018eda:	1c04      	adds	r4, r0, #0
 8018edc:	1c20      	adds	r0, r4, #0
 8018ede:	bd70      	pop	{r4, r5, r6, pc}

08018ee0 <nan>:
 8018ee0:	2000      	movs	r0, #0
 8018ee2:	4901      	ldr	r1, [pc, #4]	@ (8018ee8 <nan+0x8>)
 8018ee4:	4770      	bx	lr
 8018ee6:	46c0      	nop			@ (mov r8, r8)
 8018ee8:	7ff80000 	.word	0x7ff80000

08018eec <finitef>:
 8018eec:	22ff      	movs	r2, #255	@ 0xff
 8018eee:	0043      	lsls	r3, r0, #1
 8018ef0:	085b      	lsrs	r3, r3, #1
 8018ef2:	2001      	movs	r0, #1
 8018ef4:	05d2      	lsls	r2, r2, #23
 8018ef6:	4293      	cmp	r3, r2
 8018ef8:	db00      	blt.n	8018efc <finitef+0x10>
 8018efa:	2000      	movs	r0, #0
 8018efc:	4770      	bx	lr
	...

08018f00 <__ieee754_sqrt>:
 8018f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f02:	000a      	movs	r2, r1
 8018f04:	000d      	movs	r5, r1
 8018f06:	496d      	ldr	r1, [pc, #436]	@ (80190bc <__ieee754_sqrt+0x1bc>)
 8018f08:	0004      	movs	r4, r0
 8018f0a:	0003      	movs	r3, r0
 8018f0c:	0008      	movs	r0, r1
 8018f0e:	b087      	sub	sp, #28
 8018f10:	4028      	ands	r0, r5
 8018f12:	4288      	cmp	r0, r1
 8018f14:	d111      	bne.n	8018f3a <__ieee754_sqrt+0x3a>
 8018f16:	0022      	movs	r2, r4
 8018f18:	002b      	movs	r3, r5
 8018f1a:	0020      	movs	r0, r4
 8018f1c:	0029      	movs	r1, r5
 8018f1e:	f7e9 fb0b 	bl	8002538 <__aeabi_dmul>
 8018f22:	0002      	movs	r2, r0
 8018f24:	000b      	movs	r3, r1
 8018f26:	0020      	movs	r0, r4
 8018f28:	0029      	movs	r1, r5
 8018f2a:	f7e8 fb5d 	bl	80015e8 <__aeabi_dadd>
 8018f2e:	0004      	movs	r4, r0
 8018f30:	000d      	movs	r5, r1
 8018f32:	0020      	movs	r0, r4
 8018f34:	0029      	movs	r1, r5
 8018f36:	b007      	add	sp, #28
 8018f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f3a:	2d00      	cmp	r5, #0
 8018f3c:	dc11      	bgt.n	8018f62 <__ieee754_sqrt+0x62>
 8018f3e:	0069      	lsls	r1, r5, #1
 8018f40:	0849      	lsrs	r1, r1, #1
 8018f42:	4321      	orrs	r1, r4
 8018f44:	d0f5      	beq.n	8018f32 <__ieee754_sqrt+0x32>
 8018f46:	2000      	movs	r0, #0
 8018f48:	4285      	cmp	r5, r0
 8018f4a:	d010      	beq.n	8018f6e <__ieee754_sqrt+0x6e>
 8018f4c:	0022      	movs	r2, r4
 8018f4e:	002b      	movs	r3, r5
 8018f50:	0020      	movs	r0, r4
 8018f52:	0029      	movs	r1, r5
 8018f54:	f7e9 fdb8 	bl	8002ac8 <__aeabi_dsub>
 8018f58:	0002      	movs	r2, r0
 8018f5a:	000b      	movs	r3, r1
 8018f5c:	f7e8 fea8 	bl	8001cb0 <__aeabi_ddiv>
 8018f60:	e7e5      	b.n	8018f2e <__ieee754_sqrt+0x2e>
 8018f62:	1528      	asrs	r0, r5, #20
 8018f64:	d115      	bne.n	8018f92 <__ieee754_sqrt+0x92>
 8018f66:	2480      	movs	r4, #128	@ 0x80
 8018f68:	2100      	movs	r1, #0
 8018f6a:	0364      	lsls	r4, r4, #13
 8018f6c:	e007      	b.n	8018f7e <__ieee754_sqrt+0x7e>
 8018f6e:	0ada      	lsrs	r2, r3, #11
 8018f70:	3815      	subs	r0, #21
 8018f72:	055b      	lsls	r3, r3, #21
 8018f74:	2a00      	cmp	r2, #0
 8018f76:	d0fa      	beq.n	8018f6e <__ieee754_sqrt+0x6e>
 8018f78:	e7f5      	b.n	8018f66 <__ieee754_sqrt+0x66>
 8018f7a:	0052      	lsls	r2, r2, #1
 8018f7c:	3101      	adds	r1, #1
 8018f7e:	4222      	tst	r2, r4
 8018f80:	d0fb      	beq.n	8018f7a <__ieee754_sqrt+0x7a>
 8018f82:	1e4c      	subs	r4, r1, #1
 8018f84:	1b00      	subs	r0, r0, r4
 8018f86:	2420      	movs	r4, #32
 8018f88:	001d      	movs	r5, r3
 8018f8a:	1a64      	subs	r4, r4, r1
 8018f8c:	40e5      	lsrs	r5, r4
 8018f8e:	408b      	lsls	r3, r1
 8018f90:	432a      	orrs	r2, r5
 8018f92:	494b      	ldr	r1, [pc, #300]	@ (80190c0 <__ieee754_sqrt+0x1c0>)
 8018f94:	0312      	lsls	r2, r2, #12
 8018f96:	1844      	adds	r4, r0, r1
 8018f98:	2180      	movs	r1, #128	@ 0x80
 8018f9a:	0b12      	lsrs	r2, r2, #12
 8018f9c:	0349      	lsls	r1, r1, #13
 8018f9e:	4311      	orrs	r1, r2
 8018fa0:	07c0      	lsls	r0, r0, #31
 8018fa2:	d403      	bmi.n	8018fac <__ieee754_sqrt+0xac>
 8018fa4:	0fda      	lsrs	r2, r3, #31
 8018fa6:	0049      	lsls	r1, r1, #1
 8018fa8:	1851      	adds	r1, r2, r1
 8018faa:	005b      	lsls	r3, r3, #1
 8018fac:	2500      	movs	r5, #0
 8018fae:	1062      	asrs	r2, r4, #1
 8018fb0:	0049      	lsls	r1, r1, #1
 8018fb2:	2480      	movs	r4, #128	@ 0x80
 8018fb4:	9205      	str	r2, [sp, #20]
 8018fb6:	0fda      	lsrs	r2, r3, #31
 8018fb8:	1852      	adds	r2, r2, r1
 8018fba:	2016      	movs	r0, #22
 8018fbc:	0029      	movs	r1, r5
 8018fbe:	005b      	lsls	r3, r3, #1
 8018fc0:	03a4      	lsls	r4, r4, #14
 8018fc2:	190e      	adds	r6, r1, r4
 8018fc4:	4296      	cmp	r6, r2
 8018fc6:	dc02      	bgt.n	8018fce <__ieee754_sqrt+0xce>
 8018fc8:	1931      	adds	r1, r6, r4
 8018fca:	1b92      	subs	r2, r2, r6
 8018fcc:	192d      	adds	r5, r5, r4
 8018fce:	0fde      	lsrs	r6, r3, #31
 8018fd0:	0052      	lsls	r2, r2, #1
 8018fd2:	3801      	subs	r0, #1
 8018fd4:	1992      	adds	r2, r2, r6
 8018fd6:	005b      	lsls	r3, r3, #1
 8018fd8:	0864      	lsrs	r4, r4, #1
 8018fda:	2800      	cmp	r0, #0
 8018fdc:	d1f1      	bne.n	8018fc2 <__ieee754_sqrt+0xc2>
 8018fde:	2620      	movs	r6, #32
 8018fe0:	2780      	movs	r7, #128	@ 0x80
 8018fe2:	0004      	movs	r4, r0
 8018fe4:	9604      	str	r6, [sp, #16]
 8018fe6:	063f      	lsls	r7, r7, #24
 8018fe8:	19c6      	adds	r6, r0, r7
 8018fea:	46b4      	mov	ip, r6
 8018fec:	4291      	cmp	r1, r2
 8018fee:	db02      	blt.n	8018ff6 <__ieee754_sqrt+0xf6>
 8018ff0:	d114      	bne.n	801901c <__ieee754_sqrt+0x11c>
 8018ff2:	429e      	cmp	r6, r3
 8018ff4:	d812      	bhi.n	801901c <__ieee754_sqrt+0x11c>
 8018ff6:	4660      	mov	r0, ip
 8018ff8:	4666      	mov	r6, ip
 8018ffa:	19c0      	adds	r0, r0, r7
 8018ffc:	9100      	str	r1, [sp, #0]
 8018ffe:	2e00      	cmp	r6, #0
 8019000:	da03      	bge.n	801900a <__ieee754_sqrt+0x10a>
 8019002:	43c6      	mvns	r6, r0
 8019004:	0ff6      	lsrs	r6, r6, #31
 8019006:	198e      	adds	r6, r1, r6
 8019008:	9600      	str	r6, [sp, #0]
 801900a:	1a52      	subs	r2, r2, r1
 801900c:	4563      	cmp	r3, ip
 801900e:	4189      	sbcs	r1, r1
 8019010:	4249      	negs	r1, r1
 8019012:	1a52      	subs	r2, r2, r1
 8019014:	4661      	mov	r1, ip
 8019016:	1a5b      	subs	r3, r3, r1
 8019018:	9900      	ldr	r1, [sp, #0]
 801901a:	19e4      	adds	r4, r4, r7
 801901c:	0fde      	lsrs	r6, r3, #31
 801901e:	0052      	lsls	r2, r2, #1
 8019020:	1992      	adds	r2, r2, r6
 8019022:	9e04      	ldr	r6, [sp, #16]
 8019024:	005b      	lsls	r3, r3, #1
 8019026:	3e01      	subs	r6, #1
 8019028:	087f      	lsrs	r7, r7, #1
 801902a:	9604      	str	r6, [sp, #16]
 801902c:	2e00      	cmp	r6, #0
 801902e:	d1db      	bne.n	8018fe8 <__ieee754_sqrt+0xe8>
 8019030:	431a      	orrs	r2, r3
 8019032:	d01f      	beq.n	8019074 <__ieee754_sqrt+0x174>
 8019034:	4e23      	ldr	r6, [pc, #140]	@ (80190c4 <__ieee754_sqrt+0x1c4>)
 8019036:	4f24      	ldr	r7, [pc, #144]	@ (80190c8 <__ieee754_sqrt+0x1c8>)
 8019038:	6830      	ldr	r0, [r6, #0]
 801903a:	6871      	ldr	r1, [r6, #4]
 801903c:	683a      	ldr	r2, [r7, #0]
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	9200      	str	r2, [sp, #0]
 8019042:	9301      	str	r3, [sp, #4]
 8019044:	6832      	ldr	r2, [r6, #0]
 8019046:	6873      	ldr	r3, [r6, #4]
 8019048:	9202      	str	r2, [sp, #8]
 801904a:	9303      	str	r3, [sp, #12]
 801904c:	9a00      	ldr	r2, [sp, #0]
 801904e:	9b01      	ldr	r3, [sp, #4]
 8019050:	f7e9 fd3a 	bl	8002ac8 <__aeabi_dsub>
 8019054:	0002      	movs	r2, r0
 8019056:	000b      	movs	r3, r1
 8019058:	9802      	ldr	r0, [sp, #8]
 801905a:	9903      	ldr	r1, [sp, #12]
 801905c:	f7e7 fa06 	bl	800046c <__aeabi_dcmple>
 8019060:	2800      	cmp	r0, #0
 8019062:	d007      	beq.n	8019074 <__ieee754_sqrt+0x174>
 8019064:	6830      	ldr	r0, [r6, #0]
 8019066:	6871      	ldr	r1, [r6, #4]
 8019068:	683a      	ldr	r2, [r7, #0]
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	1c67      	adds	r7, r4, #1
 801906e:	d10f      	bne.n	8019090 <__ieee754_sqrt+0x190>
 8019070:	9c04      	ldr	r4, [sp, #16]
 8019072:	3501      	adds	r5, #1
 8019074:	4b15      	ldr	r3, [pc, #84]	@ (80190cc <__ieee754_sqrt+0x1cc>)
 8019076:	106a      	asrs	r2, r5, #1
 8019078:	18d2      	adds	r2, r2, r3
 801907a:	0863      	lsrs	r3, r4, #1
 801907c:	07ed      	lsls	r5, r5, #31
 801907e:	d502      	bpl.n	8019086 <__ieee754_sqrt+0x186>
 8019080:	2180      	movs	r1, #128	@ 0x80
 8019082:	0609      	lsls	r1, r1, #24
 8019084:	430b      	orrs	r3, r1
 8019086:	9905      	ldr	r1, [sp, #20]
 8019088:	001c      	movs	r4, r3
 801908a:	0509      	lsls	r1, r1, #20
 801908c:	188d      	adds	r5, r1, r2
 801908e:	e750      	b.n	8018f32 <__ieee754_sqrt+0x32>
 8019090:	f7e8 faaa 	bl	80015e8 <__aeabi_dadd>
 8019094:	6877      	ldr	r7, [r6, #4]
 8019096:	6836      	ldr	r6, [r6, #0]
 8019098:	0002      	movs	r2, r0
 801909a:	000b      	movs	r3, r1
 801909c:	0030      	movs	r0, r6
 801909e:	0039      	movs	r1, r7
 80190a0:	f7e7 f9da 	bl	8000458 <__aeabi_dcmplt>
 80190a4:	2800      	cmp	r0, #0
 80190a6:	d004      	beq.n	80190b2 <__ieee754_sqrt+0x1b2>
 80190a8:	3402      	adds	r4, #2
 80190aa:	4263      	negs	r3, r4
 80190ac:	4163      	adcs	r3, r4
 80190ae:	18ed      	adds	r5, r5, r3
 80190b0:	e7e0      	b.n	8019074 <__ieee754_sqrt+0x174>
 80190b2:	2301      	movs	r3, #1
 80190b4:	3401      	adds	r4, #1
 80190b6:	439c      	bics	r4, r3
 80190b8:	e7dc      	b.n	8019074 <__ieee754_sqrt+0x174>
 80190ba:	46c0      	nop			@ (mov r8, r8)
 80190bc:	7ff00000 	.word	0x7ff00000
 80190c0:	fffffc01 	.word	0xfffffc01
 80190c4:	20000498 	.word	0x20000498
 80190c8:	20000490 	.word	0x20000490
 80190cc:	3fe00000 	.word	0x3fe00000

080190d0 <__ieee754_sqrtf>:
 80190d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80190d2:	0003      	movs	r3, r0
 80190d4:	0042      	lsls	r2, r0, #1
 80190d6:	1c04      	adds	r4, r0, #0
 80190d8:	20ff      	movs	r0, #255	@ 0xff
 80190da:	0852      	lsrs	r2, r2, #1
 80190dc:	05c0      	lsls	r0, r0, #23
 80190de:	4282      	cmp	r2, r0
 80190e0:	d30a      	bcc.n	80190f8 <__ieee754_sqrtf+0x28>
 80190e2:	1c21      	adds	r1, r4, #0
 80190e4:	1c20      	adds	r0, r4, #0
 80190e6:	f7e7 fed9 	bl	8000e9c <__aeabi_fmul>
 80190ea:	1c01      	adds	r1, r0, #0
 80190ec:	1c20      	adds	r0, r4, #0
 80190ee:	f7e7 fb65 	bl	80007bc <__aeabi_fadd>
 80190f2:	1c04      	adds	r4, r0, #0
 80190f4:	1c20      	adds	r0, r4, #0
 80190f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80190f8:	2a00      	cmp	r2, #0
 80190fa:	d0fb      	beq.n	80190f4 <__ieee754_sqrtf+0x24>
 80190fc:	2c00      	cmp	r4, #0
 80190fe:	da07      	bge.n	8019110 <__ieee754_sqrtf+0x40>
 8019100:	1c21      	adds	r1, r4, #0
 8019102:	1c20      	adds	r0, r4, #0
 8019104:	f7e8 f808 	bl	8001118 <__aeabi_fsub>
 8019108:	1c01      	adds	r1, r0, #0
 801910a:	f7e7 fce1 	bl	8000ad0 <__aeabi_fdiv>
 801910e:	e7f0      	b.n	80190f2 <__ieee754_sqrtf+0x22>
 8019110:	0022      	movs	r2, r4
 8019112:	15e1      	asrs	r1, r4, #23
 8019114:	4002      	ands	r2, r0
 8019116:	4204      	tst	r4, r0
 8019118:	d046      	beq.n	80191a8 <__ieee754_sqrtf+0xd8>
 801911a:	2280      	movs	r2, #128	@ 0x80
 801911c:	000f      	movs	r7, r1
 801911e:	025b      	lsls	r3, r3, #9
 8019120:	0a5b      	lsrs	r3, r3, #9
 8019122:	0412      	lsls	r2, r2, #16
 8019124:	3f7f      	subs	r7, #127	@ 0x7f
 8019126:	4313      	orrs	r3, r2
 8019128:	07c9      	lsls	r1, r1, #31
 801912a:	d400      	bmi.n	801912e <__ieee754_sqrtf+0x5e>
 801912c:	005b      	lsls	r3, r3, #1
 801912e:	2400      	movs	r4, #0
 8019130:	2180      	movs	r1, #128	@ 0x80
 8019132:	2019      	movs	r0, #25
 8019134:	0026      	movs	r6, r4
 8019136:	107f      	asrs	r7, r7, #1
 8019138:	005b      	lsls	r3, r3, #1
 801913a:	0449      	lsls	r1, r1, #17
 801913c:	1875      	adds	r5, r6, r1
 801913e:	001a      	movs	r2, r3
 8019140:	429d      	cmp	r5, r3
 8019142:	dc02      	bgt.n	801914a <__ieee754_sqrtf+0x7a>
 8019144:	186e      	adds	r6, r5, r1
 8019146:	1b5a      	subs	r2, r3, r5
 8019148:	1864      	adds	r4, r4, r1
 801914a:	3801      	subs	r0, #1
 801914c:	0053      	lsls	r3, r2, #1
 801914e:	0849      	lsrs	r1, r1, #1
 8019150:	2800      	cmp	r0, #0
 8019152:	d1f3      	bne.n	801913c <__ieee754_sqrtf+0x6c>
 8019154:	2a00      	cmp	r2, #0
 8019156:	d019      	beq.n	801918c <__ieee754_sqrtf+0xbc>
 8019158:	4d17      	ldr	r5, [pc, #92]	@ (80191b8 <__ieee754_sqrtf+0xe8>)
 801915a:	4e18      	ldr	r6, [pc, #96]	@ (80191bc <__ieee754_sqrtf+0xec>)
 801915c:	6828      	ldr	r0, [r5, #0]
 801915e:	6831      	ldr	r1, [r6, #0]
 8019160:	682b      	ldr	r3, [r5, #0]
 8019162:	9301      	str	r3, [sp, #4]
 8019164:	f7e7 ffd8 	bl	8001118 <__aeabi_fsub>
 8019168:	1c01      	adds	r1, r0, #0
 801916a:	9801      	ldr	r0, [sp, #4]
 801916c:	f7e7 f9b8 	bl	80004e0 <__aeabi_fcmple>
 8019170:	2800      	cmp	r0, #0
 8019172:	d00b      	beq.n	801918c <__ieee754_sqrtf+0xbc>
 8019174:	6828      	ldr	r0, [r5, #0]
 8019176:	6831      	ldr	r1, [r6, #0]
 8019178:	f7e7 fb20 	bl	80007bc <__aeabi_fadd>
 801917c:	682d      	ldr	r5, [r5, #0]
 801917e:	1c01      	adds	r1, r0, #0
 8019180:	1c28      	adds	r0, r5, #0
 8019182:	f7e7 f9a3 	bl	80004cc <__aeabi_fcmplt>
 8019186:	2800      	cmp	r0, #0
 8019188:	d011      	beq.n	80191ae <__ieee754_sqrtf+0xde>
 801918a:	3402      	adds	r4, #2
 801918c:	23fc      	movs	r3, #252	@ 0xfc
 801918e:	1064      	asrs	r4, r4, #1
 8019190:	059b      	lsls	r3, r3, #22
 8019192:	18e3      	adds	r3, r4, r3
 8019194:	05fc      	lsls	r4, r7, #23
 8019196:	18e4      	adds	r4, r4, r3
 8019198:	e7ac      	b.n	80190f4 <__ieee754_sqrtf+0x24>
 801919a:	005b      	lsls	r3, r3, #1
 801919c:	3201      	adds	r2, #1
 801919e:	4203      	tst	r3, r0
 80191a0:	d0fb      	beq.n	801919a <__ieee754_sqrtf+0xca>
 80191a2:	3a01      	subs	r2, #1
 80191a4:	1a89      	subs	r1, r1, r2
 80191a6:	e7b8      	b.n	801911a <__ieee754_sqrtf+0x4a>
 80191a8:	2080      	movs	r0, #128	@ 0x80
 80191aa:	0400      	lsls	r0, r0, #16
 80191ac:	e7f7      	b.n	801919e <__ieee754_sqrtf+0xce>
 80191ae:	2301      	movs	r3, #1
 80191b0:	3401      	adds	r4, #1
 80191b2:	439c      	bics	r4, r3
 80191b4:	e7ea      	b.n	801918c <__ieee754_sqrtf+0xbc>
 80191b6:	46c0      	nop			@ (mov r8, r8)
 80191b8:	200004a4 	.word	0x200004a4
 80191bc:	200004a0 	.word	0x200004a0

080191c0 <__ieee754_log10>:
 80191c0:	2280      	movs	r2, #128	@ 0x80
 80191c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191c4:	000b      	movs	r3, r1
 80191c6:	0004      	movs	r4, r0
 80191c8:	000d      	movs	r5, r1
 80191ca:	b085      	sub	sp, #20
 80191cc:	0352      	lsls	r2, r2, #13
 80191ce:	4291      	cmp	r1, r2
 80191d0:	da26      	bge.n	8019220 <__ieee754_log10+0x60>
 80191d2:	004a      	lsls	r2, r1, #1
 80191d4:	0852      	lsrs	r2, r2, #1
 80191d6:	4302      	orrs	r2, r0
 80191d8:	d107      	bne.n	80191ea <__ieee754_log10+0x2a>
 80191da:	2200      	movs	r2, #0
 80191dc:	2300      	movs	r3, #0
 80191de:	2000      	movs	r0, #0
 80191e0:	4929      	ldr	r1, [pc, #164]	@ (8019288 <__ieee754_log10+0xc8>)
 80191e2:	f7e8 fd65 	bl	8001cb0 <__aeabi_ddiv>
 80191e6:	b005      	add	sp, #20
 80191e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191ea:	2900      	cmp	r1, #0
 80191ec:	da05      	bge.n	80191fa <__ieee754_log10+0x3a>
 80191ee:	0002      	movs	r2, r0
 80191f0:	f7e9 fc6a 	bl	8002ac8 <__aeabi_dsub>
 80191f4:	2200      	movs	r2, #0
 80191f6:	2300      	movs	r3, #0
 80191f8:	e7f3      	b.n	80191e2 <__ieee754_log10+0x22>
 80191fa:	2200      	movs	r2, #0
 80191fc:	4b23      	ldr	r3, [pc, #140]	@ (801928c <__ieee754_log10+0xcc>)
 80191fe:	f7e9 f99b 	bl	8002538 <__aeabi_dmul>
 8019202:	2236      	movs	r2, #54	@ 0x36
 8019204:	0004      	movs	r4, r0
 8019206:	000d      	movs	r5, r1
 8019208:	000b      	movs	r3, r1
 801920a:	4252      	negs	r2, r2
 801920c:	4920      	ldr	r1, [pc, #128]	@ (8019290 <__ieee754_log10+0xd0>)
 801920e:	428b      	cmp	r3, r1
 8019210:	dd08      	ble.n	8019224 <__ieee754_log10+0x64>
 8019212:	0022      	movs	r2, r4
 8019214:	002b      	movs	r3, r5
 8019216:	0020      	movs	r0, r4
 8019218:	0029      	movs	r1, r5
 801921a:	f7e8 f9e5 	bl	80015e8 <__aeabi_dadd>
 801921e:	e7e2      	b.n	80191e6 <__ieee754_log10+0x26>
 8019220:	2200      	movs	r2, #0
 8019222:	e7f3      	b.n	801920c <__ieee754_log10+0x4c>
 8019224:	491b      	ldr	r1, [pc, #108]	@ (8019294 <__ieee754_log10+0xd4>)
 8019226:	1518      	asrs	r0, r3, #20
 8019228:	1840      	adds	r0, r0, r1
 801922a:	1880      	adds	r0, r0, r2
 801922c:	0fc2      	lsrs	r2, r0, #31
 801922e:	031b      	lsls	r3, r3, #12
 8019230:	0b1b      	lsrs	r3, r3, #12
 8019232:	1880      	adds	r0, r0, r2
 8019234:	9203      	str	r2, [sp, #12]
 8019236:	9300      	str	r3, [sp, #0]
 8019238:	f7ea f840 	bl	80032bc <__aeabi_i2d>
 801923c:	9a03      	ldr	r2, [sp, #12]
 801923e:	4b16      	ldr	r3, [pc, #88]	@ (8019298 <__ieee754_log10+0xd8>)
 8019240:	0006      	movs	r6, r0
 8019242:	1a9b      	subs	r3, r3, r2
 8019244:	9a00      	ldr	r2, [sp, #0]
 8019246:	051b      	lsls	r3, r3, #20
 8019248:	431a      	orrs	r2, r3
 801924a:	0015      	movs	r5, r2
 801924c:	4b13      	ldr	r3, [pc, #76]	@ (801929c <__ieee754_log10+0xdc>)
 801924e:	4a14      	ldr	r2, [pc, #80]	@ (80192a0 <__ieee754_log10+0xe0>)
 8019250:	000f      	movs	r7, r1
 8019252:	f7e9 f971 	bl	8002538 <__aeabi_dmul>
 8019256:	9000      	str	r0, [sp, #0]
 8019258:	9101      	str	r1, [sp, #4]
 801925a:	0020      	movs	r0, r4
 801925c:	0029      	movs	r1, r5
 801925e:	f000 f93b 	bl	80194d8 <__ieee754_log>
 8019262:	4a10      	ldr	r2, [pc, #64]	@ (80192a4 <__ieee754_log10+0xe4>)
 8019264:	4b10      	ldr	r3, [pc, #64]	@ (80192a8 <__ieee754_log10+0xe8>)
 8019266:	f7e9 f967 	bl	8002538 <__aeabi_dmul>
 801926a:	9a00      	ldr	r2, [sp, #0]
 801926c:	9b01      	ldr	r3, [sp, #4]
 801926e:	f7e8 f9bb 	bl	80015e8 <__aeabi_dadd>
 8019272:	4a0e      	ldr	r2, [pc, #56]	@ (80192ac <__ieee754_log10+0xec>)
 8019274:	4b0e      	ldr	r3, [pc, #56]	@ (80192b0 <__ieee754_log10+0xf0>)
 8019276:	0004      	movs	r4, r0
 8019278:	000d      	movs	r5, r1
 801927a:	0030      	movs	r0, r6
 801927c:	0039      	movs	r1, r7
 801927e:	f7e9 f95b 	bl	8002538 <__aeabi_dmul>
 8019282:	0002      	movs	r2, r0
 8019284:	000b      	movs	r3, r1
 8019286:	e7c6      	b.n	8019216 <__ieee754_log10+0x56>
 8019288:	c3500000 	.word	0xc3500000
 801928c:	43500000 	.word	0x43500000
 8019290:	7fefffff 	.word	0x7fefffff
 8019294:	fffffc01 	.word	0xfffffc01
 8019298:	000003ff 	.word	0x000003ff
 801929c:	3d59fef3 	.word	0x3d59fef3
 80192a0:	11f12b36 	.word	0x11f12b36
 80192a4:	1526e50e 	.word	0x1526e50e
 80192a8:	3fdbcb7b 	.word	0x3fdbcb7b
 80192ac:	509f6000 	.word	0x509f6000
 80192b0:	3fd34413 	.word	0x3fd34413

080192b4 <__ieee754_expf>:
 80192b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80192b6:	21ff      	movs	r1, #255	@ 0xff
 80192b8:	0043      	lsls	r3, r0, #1
 80192ba:	1c04      	adds	r4, r0, #0
 80192bc:	085b      	lsrs	r3, r3, #1
 80192be:	05c9      	lsls	r1, r1, #23
 80192c0:	428b      	cmp	r3, r1
 80192c2:	d904      	bls.n	80192ce <__ieee754_expf+0x1a>
 80192c4:	1c01      	adds	r1, r0, #0
 80192c6:	1c20      	adds	r0, r4, #0
 80192c8:	f7e7 fa78 	bl	80007bc <__aeabi_fadd>
 80192cc:	e00d      	b.n	80192ea <__ieee754_expf+0x36>
 80192ce:	0fc6      	lsrs	r6, r0, #31
 80192d0:	428b      	cmp	r3, r1
 80192d2:	d104      	bne.n	80192de <__ieee754_expf+0x2a>
 80192d4:	2e00      	cmp	r6, #0
 80192d6:	d000      	beq.n	80192da <__ieee754_expf+0x26>
 80192d8:	e0ba      	b.n	8019450 <__ieee754_expf+0x19c>
 80192da:	1c20      	adds	r0, r4, #0
 80192dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80192de:	495d      	ldr	r1, [pc, #372]	@ (8019454 <__ieee754_expf+0x1a0>)
 80192e0:	4288      	cmp	r0, r1
 80192e2:	dd04      	ble.n	80192ee <__ieee754_expf+0x3a>
 80192e4:	2000      	movs	r0, #0
 80192e6:	f000 f8f1 	bl	80194cc <__math_oflowf>
 80192ea:	1c04      	adds	r4, r0, #0
 80192ec:	e7f5      	b.n	80192da <__ieee754_expf+0x26>
 80192ee:	2800      	cmp	r0, #0
 80192f0:	da06      	bge.n	8019300 <__ieee754_expf+0x4c>
 80192f2:	4a59      	ldr	r2, [pc, #356]	@ (8019458 <__ieee754_expf+0x1a4>)
 80192f4:	4293      	cmp	r3, r2
 80192f6:	d903      	bls.n	8019300 <__ieee754_expf+0x4c>
 80192f8:	2000      	movs	r0, #0
 80192fa:	f000 f8e1 	bl	80194c0 <__math_uflowf>
 80192fe:	e7f4      	b.n	80192ea <__ieee754_expf+0x36>
 8019300:	4a56      	ldr	r2, [pc, #344]	@ (801945c <__ieee754_expf+0x1a8>)
 8019302:	4293      	cmp	r3, r2
 8019304:	d96e      	bls.n	80193e4 <__ieee754_expf+0x130>
 8019306:	4a56      	ldr	r2, [pc, #344]	@ (8019460 <__ieee754_expf+0x1ac>)
 8019308:	00b5      	lsls	r5, r6, #2
 801930a:	4293      	cmp	r3, r2
 801930c:	d84e      	bhi.n	80193ac <__ieee754_expf+0xf8>
 801930e:	4b55      	ldr	r3, [pc, #340]	@ (8019464 <__ieee754_expf+0x1b0>)
 8019310:	1c20      	adds	r0, r4, #0
 8019312:	5959      	ldr	r1, [r3, r5]
 8019314:	f7e7 ff00 	bl	8001118 <__aeabi_fsub>
 8019318:	4b53      	ldr	r3, [pc, #332]	@ (8019468 <__ieee754_expf+0x1b4>)
 801931a:	1c07      	adds	r7, r0, #0
 801931c:	595b      	ldr	r3, [r3, r5]
 801931e:	2501      	movs	r5, #1
 8019320:	1bad      	subs	r5, r5, r6
 8019322:	9300      	str	r3, [sp, #0]
 8019324:	1bad      	subs	r5, r5, r6
 8019326:	9900      	ldr	r1, [sp, #0]
 8019328:	1c38      	adds	r0, r7, #0
 801932a:	f7e7 fef5 	bl	8001118 <__aeabi_fsub>
 801932e:	1c04      	adds	r4, r0, #0
 8019330:	1c21      	adds	r1, r4, #0
 8019332:	1c20      	adds	r0, r4, #0
 8019334:	f7e7 fdb2 	bl	8000e9c <__aeabi_fmul>
 8019338:	494c      	ldr	r1, [pc, #304]	@ (801946c <__ieee754_expf+0x1b8>)
 801933a:	1c06      	adds	r6, r0, #0
 801933c:	f7e7 fdae 	bl	8000e9c <__aeabi_fmul>
 8019340:	494b      	ldr	r1, [pc, #300]	@ (8019470 <__ieee754_expf+0x1bc>)
 8019342:	f7e7 fee9 	bl	8001118 <__aeabi_fsub>
 8019346:	1c31      	adds	r1, r6, #0
 8019348:	f7e7 fda8 	bl	8000e9c <__aeabi_fmul>
 801934c:	4949      	ldr	r1, [pc, #292]	@ (8019474 <__ieee754_expf+0x1c0>)
 801934e:	f7e7 fa35 	bl	80007bc <__aeabi_fadd>
 8019352:	1c31      	adds	r1, r6, #0
 8019354:	f7e7 fda2 	bl	8000e9c <__aeabi_fmul>
 8019358:	4947      	ldr	r1, [pc, #284]	@ (8019478 <__ieee754_expf+0x1c4>)
 801935a:	f7e7 fedd 	bl	8001118 <__aeabi_fsub>
 801935e:	1c31      	adds	r1, r6, #0
 8019360:	f7e7 fd9c 	bl	8000e9c <__aeabi_fmul>
 8019364:	4945      	ldr	r1, [pc, #276]	@ (801947c <__ieee754_expf+0x1c8>)
 8019366:	f7e7 fa29 	bl	80007bc <__aeabi_fadd>
 801936a:	1c31      	adds	r1, r6, #0
 801936c:	f7e7 fd96 	bl	8000e9c <__aeabi_fmul>
 8019370:	1c01      	adds	r1, r0, #0
 8019372:	1c20      	adds	r0, r4, #0
 8019374:	f7e7 fed0 	bl	8001118 <__aeabi_fsub>
 8019378:	1c01      	adds	r1, r0, #0
 801937a:	1c06      	adds	r6, r0, #0
 801937c:	1c20      	adds	r0, r4, #0
 801937e:	f7e7 fd8d 	bl	8000e9c <__aeabi_fmul>
 8019382:	9001      	str	r0, [sp, #4]
 8019384:	2d00      	cmp	r5, #0
 8019386:	d140      	bne.n	801940a <__ieee754_expf+0x156>
 8019388:	2180      	movs	r1, #128	@ 0x80
 801938a:	1c30      	adds	r0, r6, #0
 801938c:	05c9      	lsls	r1, r1, #23
 801938e:	f7e7 fec3 	bl	8001118 <__aeabi_fsub>
 8019392:	1c01      	adds	r1, r0, #0
 8019394:	9801      	ldr	r0, [sp, #4]
 8019396:	f7e7 fb9b 	bl	8000ad0 <__aeabi_fdiv>
 801939a:	1c21      	adds	r1, r4, #0
 801939c:	f7e7 febc 	bl	8001118 <__aeabi_fsub>
 80193a0:	1c01      	adds	r1, r0, #0
 80193a2:	20fe      	movs	r0, #254	@ 0xfe
 80193a4:	0580      	lsls	r0, r0, #22
 80193a6:	f7e7 feb7 	bl	8001118 <__aeabi_fsub>
 80193aa:	e79e      	b.n	80192ea <__ieee754_expf+0x36>
 80193ac:	4934      	ldr	r1, [pc, #208]	@ (8019480 <__ieee754_expf+0x1cc>)
 80193ae:	1c20      	adds	r0, r4, #0
 80193b0:	f7e7 fd74 	bl	8000e9c <__aeabi_fmul>
 80193b4:	4b33      	ldr	r3, [pc, #204]	@ (8019484 <__ieee754_expf+0x1d0>)
 80193b6:	5959      	ldr	r1, [r3, r5]
 80193b8:	f7e7 fa00 	bl	80007bc <__aeabi_fadd>
 80193bc:	f7e8 f866 	bl	800148c <__aeabi_f2iz>
 80193c0:	0005      	movs	r5, r0
 80193c2:	f7e8 f883 	bl	80014cc <__aeabi_i2f>
 80193c6:	4930      	ldr	r1, [pc, #192]	@ (8019488 <__ieee754_expf+0x1d4>)
 80193c8:	1c06      	adds	r6, r0, #0
 80193ca:	f7e7 fd67 	bl	8000e9c <__aeabi_fmul>
 80193ce:	1c01      	adds	r1, r0, #0
 80193d0:	1c20      	adds	r0, r4, #0
 80193d2:	f7e7 fea1 	bl	8001118 <__aeabi_fsub>
 80193d6:	492d      	ldr	r1, [pc, #180]	@ (801948c <__ieee754_expf+0x1d8>)
 80193d8:	1c07      	adds	r7, r0, #0
 80193da:	1c30      	adds	r0, r6, #0
 80193dc:	f7e7 fd5e 	bl	8000e9c <__aeabi_fmul>
 80193e0:	9000      	str	r0, [sp, #0]
 80193e2:	e7a0      	b.n	8019326 <__ieee754_expf+0x72>
 80193e4:	22d0      	movs	r2, #208	@ 0xd0
 80193e6:	0592      	lsls	r2, r2, #22
 80193e8:	4293      	cmp	r3, r2
 80193ea:	d20c      	bcs.n	8019406 <__ieee754_expf+0x152>
 80193ec:	4928      	ldr	r1, [pc, #160]	@ (8019490 <__ieee754_expf+0x1dc>)
 80193ee:	1c20      	adds	r0, r4, #0
 80193f0:	f7e7 f9e4 	bl	80007bc <__aeabi_fadd>
 80193f4:	21fe      	movs	r1, #254	@ 0xfe
 80193f6:	0589      	lsls	r1, r1, #22
 80193f8:	f7e7 f87c 	bl	80004f4 <__aeabi_fcmpgt>
 80193fc:	1e05      	subs	r5, r0, #0
 80193fe:	d097      	beq.n	8019330 <__ieee754_expf+0x7c>
 8019400:	21fe      	movs	r1, #254	@ 0xfe
 8019402:	0589      	lsls	r1, r1, #22
 8019404:	e75f      	b.n	80192c6 <__ieee754_expf+0x12>
 8019406:	2500      	movs	r5, #0
 8019408:	e792      	b.n	8019330 <__ieee754_expf+0x7c>
 801940a:	2080      	movs	r0, #128	@ 0x80
 801940c:	1c31      	adds	r1, r6, #0
 801940e:	05c0      	lsls	r0, r0, #23
 8019410:	f7e7 fe82 	bl	8001118 <__aeabi_fsub>
 8019414:	1c01      	adds	r1, r0, #0
 8019416:	9801      	ldr	r0, [sp, #4]
 8019418:	f7e7 fb5a 	bl	8000ad0 <__aeabi_fdiv>
 801941c:	1c01      	adds	r1, r0, #0
 801941e:	9800      	ldr	r0, [sp, #0]
 8019420:	f7e7 fe7a 	bl	8001118 <__aeabi_fsub>
 8019424:	1c39      	adds	r1, r7, #0
 8019426:	f7e7 fe77 	bl	8001118 <__aeabi_fsub>
 801942a:	1c01      	adds	r1, r0, #0
 801942c:	20fe      	movs	r0, #254	@ 0xfe
 801942e:	0580      	lsls	r0, r0, #22
 8019430:	f7e7 fe72 	bl	8001118 <__aeabi_fsub>
 8019434:	002b      	movs	r3, r5
 8019436:	337d      	adds	r3, #125	@ 0x7d
 8019438:	db02      	blt.n	8019440 <__ieee754_expf+0x18c>
 801943a:	05ec      	lsls	r4, r5, #23
 801943c:	1824      	adds	r4, r4, r0
 801943e:	e74c      	b.n	80192da <__ieee754_expf+0x26>
 8019440:	21d8      	movs	r1, #216	@ 0xd8
 8019442:	3564      	adds	r5, #100	@ 0x64
 8019444:	05ed      	lsls	r5, r5, #23
 8019446:	1828      	adds	r0, r5, r0
 8019448:	0509      	lsls	r1, r1, #20
 801944a:	f7e7 fd27 	bl	8000e9c <__aeabi_fmul>
 801944e:	e74c      	b.n	80192ea <__ieee754_expf+0x36>
 8019450:	2400      	movs	r4, #0
 8019452:	e742      	b.n	80192da <__ieee754_expf+0x26>
 8019454:	42b17217 	.word	0x42b17217
 8019458:	42cff1b5 	.word	0x42cff1b5
 801945c:	3eb17218 	.word	0x3eb17218
 8019460:	3f851591 	.word	0x3f851591
 8019464:	0801a8e8 	.word	0x0801a8e8
 8019468:	0801a8e0 	.word	0x0801a8e0
 801946c:	3331bb4c 	.word	0x3331bb4c
 8019470:	35ddea0e 	.word	0x35ddea0e
 8019474:	388ab355 	.word	0x388ab355
 8019478:	3b360b61 	.word	0x3b360b61
 801947c:	3e2aaaab 	.word	0x3e2aaaab
 8019480:	3fb8aa3b 	.word	0x3fb8aa3b
 8019484:	0801a8f0 	.word	0x0801a8f0
 8019488:	3f317180 	.word	0x3f317180
 801948c:	3717f7d1 	.word	0x3717f7d1
 8019490:	7149f2ca 	.word	0x7149f2ca

08019494 <with_errnof>:
 8019494:	b570      	push	{r4, r5, r6, lr}
 8019496:	000d      	movs	r5, r1
 8019498:	1c04      	adds	r4, r0, #0
 801949a:	f7fd fb67 	bl	8016b6c <__errno>
 801949e:	6005      	str	r5, [r0, #0]
 80194a0:	1c20      	adds	r0, r4, #0
 80194a2:	bd70      	pop	{r4, r5, r6, pc}

080194a4 <xflowf>:
 80194a4:	b510      	push	{r4, lr}
 80194a6:	1c0b      	adds	r3, r1, #0
 80194a8:	2800      	cmp	r0, #0
 80194aa:	d002      	beq.n	80194b2 <xflowf+0xe>
 80194ac:	2380      	movs	r3, #128	@ 0x80
 80194ae:	061b      	lsls	r3, r3, #24
 80194b0:	18cb      	adds	r3, r1, r3
 80194b2:	1c18      	adds	r0, r3, #0
 80194b4:	f7e7 fcf2 	bl	8000e9c <__aeabi_fmul>
 80194b8:	2122      	movs	r1, #34	@ 0x22
 80194ba:	f7ff ffeb 	bl	8019494 <with_errnof>
 80194be:	bd10      	pop	{r4, pc}

080194c0 <__math_uflowf>:
 80194c0:	2180      	movs	r1, #128	@ 0x80
 80194c2:	b510      	push	{r4, lr}
 80194c4:	0549      	lsls	r1, r1, #21
 80194c6:	f7ff ffed 	bl	80194a4 <xflowf>
 80194ca:	bd10      	pop	{r4, pc}

080194cc <__math_oflowf>:
 80194cc:	21e0      	movs	r1, #224	@ 0xe0
 80194ce:	b510      	push	{r4, lr}
 80194d0:	05c9      	lsls	r1, r1, #23
 80194d2:	f7ff ffe7 	bl	80194a4 <xflowf>
 80194d6:	bd10      	pop	{r4, pc}

080194d8 <__ieee754_log>:
 80194d8:	2380      	movs	r3, #128	@ 0x80
 80194da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194dc:	035b      	lsls	r3, r3, #13
 80194de:	000e      	movs	r6, r1
 80194e0:	b08d      	sub	sp, #52	@ 0x34
 80194e2:	4299      	cmp	r1, r3
 80194e4:	da23      	bge.n	801952e <__ieee754_log+0x56>
 80194e6:	004b      	lsls	r3, r1, #1
 80194e8:	085b      	lsrs	r3, r3, #1
 80194ea:	4303      	orrs	r3, r0
 80194ec:	d107      	bne.n	80194fe <__ieee754_log+0x26>
 80194ee:	2200      	movs	r2, #0
 80194f0:	2300      	movs	r3, #0
 80194f2:	2000      	movs	r0, #0
 80194f4:	49b4      	ldr	r1, [pc, #720]	@ (80197c8 <__ieee754_log+0x2f0>)
 80194f6:	f7e8 fbdb 	bl	8001cb0 <__aeabi_ddiv>
 80194fa:	b00d      	add	sp, #52	@ 0x34
 80194fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80194fe:	2900      	cmp	r1, #0
 8019500:	da06      	bge.n	8019510 <__ieee754_log+0x38>
 8019502:	0002      	movs	r2, r0
 8019504:	000b      	movs	r3, r1
 8019506:	f7e9 fadf 	bl	8002ac8 <__aeabi_dsub>
 801950a:	2200      	movs	r2, #0
 801950c:	2300      	movs	r3, #0
 801950e:	e7f2      	b.n	80194f6 <__ieee754_log+0x1e>
 8019510:	4bae      	ldr	r3, [pc, #696]	@ (80197cc <__ieee754_log+0x2f4>)
 8019512:	2200      	movs	r2, #0
 8019514:	f7e9 f810 	bl	8002538 <__aeabi_dmul>
 8019518:	2336      	movs	r3, #54	@ 0x36
 801951a:	000e      	movs	r6, r1
 801951c:	425b      	negs	r3, r3
 801951e:	4aac      	ldr	r2, [pc, #688]	@ (80197d0 <__ieee754_log+0x2f8>)
 8019520:	4296      	cmp	r6, r2
 8019522:	dd06      	ble.n	8019532 <__ieee754_log+0x5a>
 8019524:	0002      	movs	r2, r0
 8019526:	000b      	movs	r3, r1
 8019528:	f7e8 f85e 	bl	80015e8 <__aeabi_dadd>
 801952c:	e7e5      	b.n	80194fa <__ieee754_log+0x22>
 801952e:	2300      	movs	r3, #0
 8019530:	e7f5      	b.n	801951e <__ieee754_log+0x46>
 8019532:	4ca8      	ldr	r4, [pc, #672]	@ (80197d4 <__ieee754_log+0x2fc>)
 8019534:	1532      	asrs	r2, r6, #20
 8019536:	1912      	adds	r2, r2, r4
 8019538:	0336      	lsls	r6, r6, #12
 801953a:	4ca7      	ldr	r4, [pc, #668]	@ (80197d8 <__ieee754_log+0x300>)
 801953c:	18d2      	adds	r2, r2, r3
 801953e:	0b33      	lsrs	r3, r6, #12
 8019540:	9302      	str	r3, [sp, #8]
 8019542:	191b      	adds	r3, r3, r4
 8019544:	2480      	movs	r4, #128	@ 0x80
 8019546:	0364      	lsls	r4, r4, #13
 8019548:	4023      	ands	r3, r4
 801954a:	4ca4      	ldr	r4, [pc, #656]	@ (80197dc <__ieee754_log+0x304>)
 801954c:	9d02      	ldr	r5, [sp, #8]
 801954e:	405c      	eors	r4, r3
 8019550:	151b      	asrs	r3, r3, #20
 8019552:	189b      	adds	r3, r3, r2
 8019554:	4325      	orrs	r5, r4
 8019556:	2200      	movs	r2, #0
 8019558:	9300      	str	r3, [sp, #0]
 801955a:	0029      	movs	r1, r5
 801955c:	4b9f      	ldr	r3, [pc, #636]	@ (80197dc <__ieee754_log+0x304>)
 801955e:	f7e9 fab3 	bl	8002ac8 <__aeabi_dsub>
 8019562:	9b02      	ldr	r3, [sp, #8]
 8019564:	0006      	movs	r6, r0
 8019566:	3302      	adds	r3, #2
 8019568:	031b      	lsls	r3, r3, #12
 801956a:	000f      	movs	r7, r1
 801956c:	2200      	movs	r2, #0
 801956e:	0b1b      	lsrs	r3, r3, #12
 8019570:	2b02      	cmp	r3, #2
 8019572:	dc64      	bgt.n	801963e <__ieee754_log+0x166>
 8019574:	2300      	movs	r3, #0
 8019576:	f7e6 ff69 	bl	800044c <__aeabi_dcmpeq>
 801957a:	2800      	cmp	r0, #0
 801957c:	d019      	beq.n	80195b2 <__ieee754_log+0xda>
 801957e:	9b00      	ldr	r3, [sp, #0]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d100      	bne.n	8019586 <__ieee754_log+0xae>
 8019584:	e11c      	b.n	80197c0 <__ieee754_log+0x2e8>
 8019586:	0018      	movs	r0, r3
 8019588:	f7e9 fe98 	bl	80032bc <__aeabi_i2d>
 801958c:	4a94      	ldr	r2, [pc, #592]	@ (80197e0 <__ieee754_log+0x308>)
 801958e:	4b95      	ldr	r3, [pc, #596]	@ (80197e4 <__ieee754_log+0x30c>)
 8019590:	0004      	movs	r4, r0
 8019592:	000d      	movs	r5, r1
 8019594:	f7e8 ffd0 	bl	8002538 <__aeabi_dmul>
 8019598:	4a93      	ldr	r2, [pc, #588]	@ (80197e8 <__ieee754_log+0x310>)
 801959a:	0006      	movs	r6, r0
 801959c:	000f      	movs	r7, r1
 801959e:	4b93      	ldr	r3, [pc, #588]	@ (80197ec <__ieee754_log+0x314>)
 80195a0:	0020      	movs	r0, r4
 80195a2:	0029      	movs	r1, r5
 80195a4:	f7e8 ffc8 	bl	8002538 <__aeabi_dmul>
 80195a8:	0002      	movs	r2, r0
 80195aa:	000b      	movs	r3, r1
 80195ac:	0030      	movs	r0, r6
 80195ae:	0039      	movs	r1, r7
 80195b0:	e7ba      	b.n	8019528 <__ieee754_log+0x50>
 80195b2:	4a8f      	ldr	r2, [pc, #572]	@ (80197f0 <__ieee754_log+0x318>)
 80195b4:	4b8f      	ldr	r3, [pc, #572]	@ (80197f4 <__ieee754_log+0x31c>)
 80195b6:	0030      	movs	r0, r6
 80195b8:	0039      	movs	r1, r7
 80195ba:	f7e8 ffbd 	bl	8002538 <__aeabi_dmul>
 80195be:	0002      	movs	r2, r0
 80195c0:	000b      	movs	r3, r1
 80195c2:	2000      	movs	r0, #0
 80195c4:	498c      	ldr	r1, [pc, #560]	@ (80197f8 <__ieee754_log+0x320>)
 80195c6:	f7e9 fa7f 	bl	8002ac8 <__aeabi_dsub>
 80195ca:	0032      	movs	r2, r6
 80195cc:	0004      	movs	r4, r0
 80195ce:	000d      	movs	r5, r1
 80195d0:	003b      	movs	r3, r7
 80195d2:	0030      	movs	r0, r6
 80195d4:	0039      	movs	r1, r7
 80195d6:	f7e8 ffaf 	bl	8002538 <__aeabi_dmul>
 80195da:	000b      	movs	r3, r1
 80195dc:	0002      	movs	r2, r0
 80195de:	0029      	movs	r1, r5
 80195e0:	0020      	movs	r0, r4
 80195e2:	f7e8 ffa9 	bl	8002538 <__aeabi_dmul>
 80195e6:	9b00      	ldr	r3, [sp, #0]
 80195e8:	9002      	str	r0, [sp, #8]
 80195ea:	9103      	str	r1, [sp, #12]
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d106      	bne.n	80195fe <__ieee754_log+0x126>
 80195f0:	0002      	movs	r2, r0
 80195f2:	000b      	movs	r3, r1
 80195f4:	0030      	movs	r0, r6
 80195f6:	0039      	movs	r1, r7
 80195f8:	f7e9 fa66 	bl	8002ac8 <__aeabi_dsub>
 80195fc:	e77d      	b.n	80194fa <__ieee754_log+0x22>
 80195fe:	9800      	ldr	r0, [sp, #0]
 8019600:	f7e9 fe5c 	bl	80032bc <__aeabi_i2d>
 8019604:	4a76      	ldr	r2, [pc, #472]	@ (80197e0 <__ieee754_log+0x308>)
 8019606:	4b77      	ldr	r3, [pc, #476]	@ (80197e4 <__ieee754_log+0x30c>)
 8019608:	0004      	movs	r4, r0
 801960a:	000d      	movs	r5, r1
 801960c:	f7e8 ff94 	bl	8002538 <__aeabi_dmul>
 8019610:	4a75      	ldr	r2, [pc, #468]	@ (80197e8 <__ieee754_log+0x310>)
 8019612:	9000      	str	r0, [sp, #0]
 8019614:	9101      	str	r1, [sp, #4]
 8019616:	4b75      	ldr	r3, [pc, #468]	@ (80197ec <__ieee754_log+0x314>)
 8019618:	0020      	movs	r0, r4
 801961a:	0029      	movs	r1, r5
 801961c:	f7e8 ff8c 	bl	8002538 <__aeabi_dmul>
 8019620:	0002      	movs	r2, r0
 8019622:	000b      	movs	r3, r1
 8019624:	9802      	ldr	r0, [sp, #8]
 8019626:	9903      	ldr	r1, [sp, #12]
 8019628:	f7e9 fa4e 	bl	8002ac8 <__aeabi_dsub>
 801962c:	0032      	movs	r2, r6
 801962e:	003b      	movs	r3, r7
 8019630:	f7e9 fa4a 	bl	8002ac8 <__aeabi_dsub>
 8019634:	0002      	movs	r2, r0
 8019636:	000b      	movs	r3, r1
 8019638:	9800      	ldr	r0, [sp, #0]
 801963a:	9901      	ldr	r1, [sp, #4]
 801963c:	e7dc      	b.n	80195f8 <__ieee754_log+0x120>
 801963e:	2380      	movs	r3, #128	@ 0x80
 8019640:	05db      	lsls	r3, r3, #23
 8019642:	f7e7 ffd1 	bl	80015e8 <__aeabi_dadd>
 8019646:	0002      	movs	r2, r0
 8019648:	000b      	movs	r3, r1
 801964a:	0030      	movs	r0, r6
 801964c:	0039      	movs	r1, r7
 801964e:	f7e8 fb2f 	bl	8001cb0 <__aeabi_ddiv>
 8019652:	9004      	str	r0, [sp, #16]
 8019654:	9105      	str	r1, [sp, #20]
 8019656:	9800      	ldr	r0, [sp, #0]
 8019658:	f7e9 fe30 	bl	80032bc <__aeabi_i2d>
 801965c:	9a04      	ldr	r2, [sp, #16]
 801965e:	9b05      	ldr	r3, [sp, #20]
 8019660:	9006      	str	r0, [sp, #24]
 8019662:	9107      	str	r1, [sp, #28]
 8019664:	0010      	movs	r0, r2
 8019666:	0019      	movs	r1, r3
 8019668:	f7e8 ff66 	bl	8002538 <__aeabi_dmul>
 801966c:	4a63      	ldr	r2, [pc, #396]	@ (80197fc <__ieee754_log+0x324>)
 801966e:	9b02      	ldr	r3, [sp, #8]
 8019670:	4694      	mov	ip, r2
 8019672:	4463      	add	r3, ip
 8019674:	0002      	movs	r2, r0
 8019676:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019678:	000b      	movs	r3, r1
 801967a:	9008      	str	r0, [sp, #32]
 801967c:	9109      	str	r1, [sp, #36]	@ 0x24
 801967e:	f7e8 ff5b 	bl	8002538 <__aeabi_dmul>
 8019682:	0004      	movs	r4, r0
 8019684:	000d      	movs	r5, r1
 8019686:	4a5e      	ldr	r2, [pc, #376]	@ (8019800 <__ieee754_log+0x328>)
 8019688:	4b5e      	ldr	r3, [pc, #376]	@ (8019804 <__ieee754_log+0x32c>)
 801968a:	f7e8 ff55 	bl	8002538 <__aeabi_dmul>
 801968e:	4a5e      	ldr	r2, [pc, #376]	@ (8019808 <__ieee754_log+0x330>)
 8019690:	4b5e      	ldr	r3, [pc, #376]	@ (801980c <__ieee754_log+0x334>)
 8019692:	f7e7 ffa9 	bl	80015e8 <__aeabi_dadd>
 8019696:	0022      	movs	r2, r4
 8019698:	002b      	movs	r3, r5
 801969a:	f7e8 ff4d 	bl	8002538 <__aeabi_dmul>
 801969e:	4a5c      	ldr	r2, [pc, #368]	@ (8019810 <__ieee754_log+0x338>)
 80196a0:	4b5c      	ldr	r3, [pc, #368]	@ (8019814 <__ieee754_log+0x33c>)
 80196a2:	f7e7 ffa1 	bl	80015e8 <__aeabi_dadd>
 80196a6:	0022      	movs	r2, r4
 80196a8:	002b      	movs	r3, r5
 80196aa:	f7e8 ff45 	bl	8002538 <__aeabi_dmul>
 80196ae:	4a5a      	ldr	r2, [pc, #360]	@ (8019818 <__ieee754_log+0x340>)
 80196b0:	4b5a      	ldr	r3, [pc, #360]	@ (801981c <__ieee754_log+0x344>)
 80196b2:	f7e7 ff99 	bl	80015e8 <__aeabi_dadd>
 80196b6:	9a08      	ldr	r2, [sp, #32]
 80196b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80196ba:	f7e8 ff3d 	bl	8002538 <__aeabi_dmul>
 80196be:	4a58      	ldr	r2, [pc, #352]	@ (8019820 <__ieee754_log+0x348>)
 80196c0:	9008      	str	r0, [sp, #32]
 80196c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80196c4:	4b57      	ldr	r3, [pc, #348]	@ (8019824 <__ieee754_log+0x34c>)
 80196c6:	0020      	movs	r0, r4
 80196c8:	0029      	movs	r1, r5
 80196ca:	f7e8 ff35 	bl	8002538 <__aeabi_dmul>
 80196ce:	4a56      	ldr	r2, [pc, #344]	@ (8019828 <__ieee754_log+0x350>)
 80196d0:	4b56      	ldr	r3, [pc, #344]	@ (801982c <__ieee754_log+0x354>)
 80196d2:	f7e7 ff89 	bl	80015e8 <__aeabi_dadd>
 80196d6:	0022      	movs	r2, r4
 80196d8:	002b      	movs	r3, r5
 80196da:	f7e8 ff2d 	bl	8002538 <__aeabi_dmul>
 80196de:	4a54      	ldr	r2, [pc, #336]	@ (8019830 <__ieee754_log+0x358>)
 80196e0:	4b54      	ldr	r3, [pc, #336]	@ (8019834 <__ieee754_log+0x35c>)
 80196e2:	f7e7 ff81 	bl	80015e8 <__aeabi_dadd>
 80196e6:	0022      	movs	r2, r4
 80196e8:	002b      	movs	r3, r5
 80196ea:	f7e8 ff25 	bl	8002538 <__aeabi_dmul>
 80196ee:	0002      	movs	r2, r0
 80196f0:	000b      	movs	r3, r1
 80196f2:	9808      	ldr	r0, [sp, #32]
 80196f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80196f6:	f7e7 ff77 	bl	80015e8 <__aeabi_dadd>
 80196fa:	9a02      	ldr	r2, [sp, #8]
 80196fc:	4b4e      	ldr	r3, [pc, #312]	@ (8019838 <__ieee754_log+0x360>)
 80196fe:	0004      	movs	r4, r0
 8019700:	1a9b      	subs	r3, r3, r2
 8019702:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019704:	000d      	movs	r5, r1
 8019706:	4313      	orrs	r3, r2
 8019708:	2b00      	cmp	r3, #0
 801970a:	dd34      	ble.n	8019776 <__ieee754_log+0x29e>
 801970c:	2200      	movs	r2, #0
 801970e:	4b3a      	ldr	r3, [pc, #232]	@ (80197f8 <__ieee754_log+0x320>)
 8019710:	0030      	movs	r0, r6
 8019712:	0039      	movs	r1, r7
 8019714:	f7e8 ff10 	bl	8002538 <__aeabi_dmul>
 8019718:	0032      	movs	r2, r6
 801971a:	003b      	movs	r3, r7
 801971c:	f7e8 ff0c 	bl	8002538 <__aeabi_dmul>
 8019720:	0002      	movs	r2, r0
 8019722:	000b      	movs	r3, r1
 8019724:	9002      	str	r0, [sp, #8]
 8019726:	9103      	str	r1, [sp, #12]
 8019728:	0020      	movs	r0, r4
 801972a:	0029      	movs	r1, r5
 801972c:	f7e7 ff5c 	bl	80015e8 <__aeabi_dadd>
 8019730:	9a04      	ldr	r2, [sp, #16]
 8019732:	9b05      	ldr	r3, [sp, #20]
 8019734:	f7e8 ff00 	bl	8002538 <__aeabi_dmul>
 8019738:	9b00      	ldr	r3, [sp, #0]
 801973a:	0004      	movs	r4, r0
 801973c:	000d      	movs	r5, r1
 801973e:	2b00      	cmp	r3, #0
 8019740:	d106      	bne.n	8019750 <__ieee754_log+0x278>
 8019742:	0002      	movs	r2, r0
 8019744:	000b      	movs	r3, r1
 8019746:	9802      	ldr	r0, [sp, #8]
 8019748:	9903      	ldr	r1, [sp, #12]
 801974a:	f7e9 f9bd 	bl	8002ac8 <__aeabi_dsub>
 801974e:	e74f      	b.n	80195f0 <__ieee754_log+0x118>
 8019750:	4a23      	ldr	r2, [pc, #140]	@ (80197e0 <__ieee754_log+0x308>)
 8019752:	4b24      	ldr	r3, [pc, #144]	@ (80197e4 <__ieee754_log+0x30c>)
 8019754:	9806      	ldr	r0, [sp, #24]
 8019756:	9907      	ldr	r1, [sp, #28]
 8019758:	f7e8 feee 	bl	8002538 <__aeabi_dmul>
 801975c:	4a22      	ldr	r2, [pc, #136]	@ (80197e8 <__ieee754_log+0x310>)
 801975e:	9000      	str	r0, [sp, #0]
 8019760:	9101      	str	r1, [sp, #4]
 8019762:	9806      	ldr	r0, [sp, #24]
 8019764:	9907      	ldr	r1, [sp, #28]
 8019766:	4b21      	ldr	r3, [pc, #132]	@ (80197ec <__ieee754_log+0x314>)
 8019768:	f7e8 fee6 	bl	8002538 <__aeabi_dmul>
 801976c:	0022      	movs	r2, r4
 801976e:	002b      	movs	r3, r5
 8019770:	f7e7 ff3a 	bl	80015e8 <__aeabi_dadd>
 8019774:	e754      	b.n	8019620 <__ieee754_log+0x148>
 8019776:	0002      	movs	r2, r0
 8019778:	000b      	movs	r3, r1
 801977a:	0030      	movs	r0, r6
 801977c:	0039      	movs	r1, r7
 801977e:	f7e9 f9a3 	bl	8002ac8 <__aeabi_dsub>
 8019782:	9a04      	ldr	r2, [sp, #16]
 8019784:	9b05      	ldr	r3, [sp, #20]
 8019786:	f7e8 fed7 	bl	8002538 <__aeabi_dmul>
 801978a:	9b00      	ldr	r3, [sp, #0]
 801978c:	0004      	movs	r4, r0
 801978e:	000d      	movs	r5, r1
 8019790:	2b00      	cmp	r3, #0
 8019792:	d102      	bne.n	801979a <__ieee754_log+0x2c2>
 8019794:	0002      	movs	r2, r0
 8019796:	000b      	movs	r3, r1
 8019798:	e72c      	b.n	80195f4 <__ieee754_log+0x11c>
 801979a:	4a11      	ldr	r2, [pc, #68]	@ (80197e0 <__ieee754_log+0x308>)
 801979c:	4b11      	ldr	r3, [pc, #68]	@ (80197e4 <__ieee754_log+0x30c>)
 801979e:	9806      	ldr	r0, [sp, #24]
 80197a0:	9907      	ldr	r1, [sp, #28]
 80197a2:	f7e8 fec9 	bl	8002538 <__aeabi_dmul>
 80197a6:	4a10      	ldr	r2, [pc, #64]	@ (80197e8 <__ieee754_log+0x310>)
 80197a8:	9000      	str	r0, [sp, #0]
 80197aa:	9101      	str	r1, [sp, #4]
 80197ac:	9806      	ldr	r0, [sp, #24]
 80197ae:	9907      	ldr	r1, [sp, #28]
 80197b0:	4b0e      	ldr	r3, [pc, #56]	@ (80197ec <__ieee754_log+0x314>)
 80197b2:	f7e8 fec1 	bl	8002538 <__aeabi_dmul>
 80197b6:	0002      	movs	r2, r0
 80197b8:	000b      	movs	r3, r1
 80197ba:	0020      	movs	r0, r4
 80197bc:	0029      	movs	r1, r5
 80197be:	e733      	b.n	8019628 <__ieee754_log+0x150>
 80197c0:	2000      	movs	r0, #0
 80197c2:	2100      	movs	r1, #0
 80197c4:	e699      	b.n	80194fa <__ieee754_log+0x22>
 80197c6:	46c0      	nop			@ (mov r8, r8)
 80197c8:	c3500000 	.word	0xc3500000
 80197cc:	43500000 	.word	0x43500000
 80197d0:	7fefffff 	.word	0x7fefffff
 80197d4:	fffffc01 	.word	0xfffffc01
 80197d8:	00095f64 	.word	0x00095f64
 80197dc:	3ff00000 	.word	0x3ff00000
 80197e0:	fee00000 	.word	0xfee00000
 80197e4:	3fe62e42 	.word	0x3fe62e42
 80197e8:	35793c76 	.word	0x35793c76
 80197ec:	3dea39ef 	.word	0x3dea39ef
 80197f0:	55555555 	.word	0x55555555
 80197f4:	3fd55555 	.word	0x3fd55555
 80197f8:	3fe00000 	.word	0x3fe00000
 80197fc:	fff9eb86 	.word	0xfff9eb86
 8019800:	df3e5244 	.word	0xdf3e5244
 8019804:	3fc2f112 	.word	0x3fc2f112
 8019808:	96cb03de 	.word	0x96cb03de
 801980c:	3fc74664 	.word	0x3fc74664
 8019810:	94229359 	.word	0x94229359
 8019814:	3fd24924 	.word	0x3fd24924
 8019818:	55555593 	.word	0x55555593
 801981c:	3fe55555 	.word	0x3fe55555
 8019820:	d078c69f 	.word	0xd078c69f
 8019824:	3fc39a09 	.word	0x3fc39a09
 8019828:	1d8e78af 	.word	0x1d8e78af
 801982c:	3fcc71c5 	.word	0x3fcc71c5
 8019830:	9997fa04 	.word	0x9997fa04
 8019834:	3fd99999 	.word	0x3fd99999
 8019838:	0006b851 	.word	0x0006b851

0801983c <_init>:
 801983c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801983e:	46c0      	nop			@ (mov r8, r8)
 8019840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019842:	bc08      	pop	{r3}
 8019844:	469e      	mov	lr, r3
 8019846:	4770      	bx	lr

08019848 <_fini>:
 8019848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801984a:	46c0      	nop			@ (mov r8, r8)
 801984c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801984e:	bc08      	pop	{r3}
 8019850:	469e      	mov	lr, r3
 8019852:	4770      	bx	lr
