
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000195dc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001058  080196a0  080196a0  0001a6a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a6f8  0801a6f8  0001c4a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a6f8  0801a6f8  0001b6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a700  0801a700  0001c4a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a700  0801a700  0001b700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a704  0801a704  0001b704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004a8  20000000  0801a708  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f08  200004a8  0801abb0  0001c4a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200043b0  0801abb0  0001d3b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001c4a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000267e5  00000000  00000000  0001c4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ba5  00000000  00000000  00042cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ef8  00000000  00000000  00049860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000178c  00000000  00000000  0004b758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dea8  00000000  00000000  0004cee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000301e0  00000000  00000000  0006ad8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095a20  00000000  00000000  0009af6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013098c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008370  00000000  00000000  001309d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00138d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004a8 	.word	0x200004a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08019684 	.word	0x08019684

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004ac 	.word	0x200004ac
 8000104:	08019684 	.word	0x08019684

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	0801a0b8 	.word	0x0801a0b8
 8000d08:	0801a0f8 	.word	0x0801a0f8
 8000d0c:	f7ffffff 	.word	0xf7ffffff

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	0801a134 	.word	0x0801a134
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <batteryInit>:
static ADC_HandleTypeDef* ADC_Handler = NULL;
float Charge = 0;
float Solar = 0;
uint16_t Vref = 3;

void batteryInit(ADC_HandleTypeDef* ADC_HANDLER){
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  ADC_Handler = ADC_HANDLER;
 8003554:	4b03      	ldr	r3, [pc, #12]	@ (8003564 <batteryInit+0x18>)
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	601a      	str	r2, [r3, #0]
}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b002      	add	sp, #8
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	200004c4 	.word	0x200004c4

08003568 <checkCharges>:

void checkCharges(){
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	af00      	add	r7, sp, #0
  HAL_ADC_Start(ADC_Handler);
 800356c:	4b41      	ldr	r3, [pc, #260]	@ (8003674 <checkCharges+0x10c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	0018      	movs	r0, r3
 8003572:	f005 ff93 	bl	800949c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(ADC_Handler, 1);
 8003576:	4b3f      	ldr	r3, [pc, #252]	@ (8003674 <checkCharges+0x10c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2101      	movs	r1, #1
 800357c:	0018      	movs	r0, r3
 800357e:	f005 ffe1 	bl	8009544 <HAL_ADC_PollForConversion>
  Charge = ((float)HAL_ADC_GetValue(ADC_Handler)/4095.0)*Vref*2;
 8003582:	4b3c      	ldr	r3, [pc, #240]	@ (8003674 <checkCharges+0x10c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	0018      	movs	r0, r3
 8003588:	f006 f878 	bl	800967c <HAL_ADC_GetValue>
 800358c:	0003      	movs	r3, r0
 800358e:	0018      	movs	r0, r3
 8003590:	f7fd ffe8 	bl	8001564 <__aeabi_ui2f>
 8003594:	1c03      	adds	r3, r0, #0
 8003596:	1c18      	adds	r0, r3, #0
 8003598:	f7ff fee2 	bl	8003360 <__aeabi_f2d>
 800359c:	2200      	movs	r2, #0
 800359e:	4b36      	ldr	r3, [pc, #216]	@ (8003678 <checkCharges+0x110>)
 80035a0:	f7fe fb86 	bl	8001cb0 <__aeabi_ddiv>
 80035a4:	0002      	movs	r2, r0
 80035a6:	000b      	movs	r3, r1
 80035a8:	0014      	movs	r4, r2
 80035aa:	001d      	movs	r5, r3
 80035ac:	4b33      	ldr	r3, [pc, #204]	@ (800367c <checkCharges+0x114>)
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f7ff fe83 	bl	80032bc <__aeabi_i2d>
 80035b6:	0002      	movs	r2, r0
 80035b8:	000b      	movs	r3, r1
 80035ba:	0020      	movs	r0, r4
 80035bc:	0029      	movs	r1, r5
 80035be:	f7fe ffbb 	bl	8002538 <__aeabi_dmul>
 80035c2:	0002      	movs	r2, r0
 80035c4:	000b      	movs	r3, r1
 80035c6:	0010      	movs	r0, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	0002      	movs	r2, r0
 80035cc:	000b      	movs	r3, r1
 80035ce:	f7fe f80b 	bl	80015e8 <__aeabi_dadd>
 80035d2:	0002      	movs	r2, r0
 80035d4:	000b      	movs	r3, r1
 80035d6:	0010      	movs	r0, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	f7ff ff09 	bl	80033f0 <__aeabi_d2f>
 80035de:	1c02      	adds	r2, r0, #0
 80035e0:	4b27      	ldr	r3, [pc, #156]	@ (8003680 <checkCharges+0x118>)
 80035e2:	601a      	str	r2, [r3, #0]
  HAL_ADC_Start(ADC_Handler);
 80035e4:	4b23      	ldr	r3, [pc, #140]	@ (8003674 <checkCharges+0x10c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f005 ff57 	bl	800949c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(ADC_Handler, 1);
 80035ee:	4b21      	ldr	r3, [pc, #132]	@ (8003674 <checkCharges+0x10c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2101      	movs	r1, #1
 80035f4:	0018      	movs	r0, r3
 80035f6:	f005 ffa5 	bl	8009544 <HAL_ADC_PollForConversion>
  Solar = ((float)HAL_ADC_GetValue(ADC_Handler)/4095.0)*Vref*2;
 80035fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003674 <checkCharges+0x10c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	0018      	movs	r0, r3
 8003600:	f006 f83c 	bl	800967c <HAL_ADC_GetValue>
 8003604:	0003      	movs	r3, r0
 8003606:	0018      	movs	r0, r3
 8003608:	f7fd ffac 	bl	8001564 <__aeabi_ui2f>
 800360c:	1c03      	adds	r3, r0, #0
 800360e:	1c18      	adds	r0, r3, #0
 8003610:	f7ff fea6 	bl	8003360 <__aeabi_f2d>
 8003614:	2200      	movs	r2, #0
 8003616:	4b18      	ldr	r3, [pc, #96]	@ (8003678 <checkCharges+0x110>)
 8003618:	f7fe fb4a 	bl	8001cb0 <__aeabi_ddiv>
 800361c:	0002      	movs	r2, r0
 800361e:	000b      	movs	r3, r1
 8003620:	0014      	movs	r4, r2
 8003622:	001d      	movs	r5, r3
 8003624:	4b15      	ldr	r3, [pc, #84]	@ (800367c <checkCharges+0x114>)
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	0018      	movs	r0, r3
 800362a:	f7ff fe47 	bl	80032bc <__aeabi_i2d>
 800362e:	0002      	movs	r2, r0
 8003630:	000b      	movs	r3, r1
 8003632:	0020      	movs	r0, r4
 8003634:	0029      	movs	r1, r5
 8003636:	f7fe ff7f 	bl	8002538 <__aeabi_dmul>
 800363a:	0002      	movs	r2, r0
 800363c:	000b      	movs	r3, r1
 800363e:	0010      	movs	r0, r2
 8003640:	0019      	movs	r1, r3
 8003642:	0002      	movs	r2, r0
 8003644:	000b      	movs	r3, r1
 8003646:	f7fd ffcf 	bl	80015e8 <__aeabi_dadd>
 800364a:	0002      	movs	r2, r0
 800364c:	000b      	movs	r3, r1
 800364e:	0010      	movs	r0, r2
 8003650:	0019      	movs	r1, r3
 8003652:	f7ff fecd 	bl	80033f0 <__aeabi_d2f>
 8003656:	1c02      	adds	r2, r0, #0
 8003658:	4b0a      	ldr	r3, [pc, #40]	@ (8003684 <checkCharges+0x11c>)
 800365a:	601a      	str	r2, [r3, #0]
  setCharges(Charge, Solar);
 800365c:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <checkCharges+0x118>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b08      	ldr	r3, [pc, #32]	@ (8003684 <checkCharges+0x11c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	1c19      	adds	r1, r3, #0
 8003666:	1c10      	adds	r0, r2, #0
 8003668:	f000 f80e 	bl	8003688 <setCharges>
}
 800366c:	46c0      	nop			@ (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	bdb0      	pop	{r4, r5, r7, pc}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	200004c4 	.word	0x200004c4
 8003678:	40affe00 	.word	0x40affe00
 800367c:	20000000 	.word	0x20000000
 8003680:	200004c8 	.word	0x200004c8
 8003684:	200004cc 	.word	0x200004cc

08003688 <setCharges>:

typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;
void setCharges(float battery, float solar){
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  batteryCharge = battery;
 8003692:	4b05      	ldr	r3, [pc, #20]	@ (80036a8 <setCharges+0x20>)
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	601a      	str	r2, [r3, #0]
  solarCharge = solar;
 8003698:	4b04      	ldr	r3, [pc, #16]	@ (80036ac <setCharges+0x24>)
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	601a      	str	r2, [r3, #0]
}
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b002      	add	sp, #8
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	200005e4 	.word	0x200005e4
 80036ac:	200005e8 	.word	0x200005e8

080036b0 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	1dbb      	adds	r3, r7, #6
 80036bc:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80036be:	4b07      	ldr	r3, [pc, #28]	@ (80036dc <setMeasurement+0x2c>)
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80036c4:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <setMeasurement+0x30>)
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80036ca:	4b06      	ldr	r3, [pc, #24]	@ (80036e4 <setMeasurement+0x34>)
 80036cc:	1dba      	adds	r2, r7, #6
 80036ce:	8812      	ldrh	r2, [r2, #0]
 80036d0:	801a      	strh	r2, [r3, #0]
}
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b004      	add	sp, #16
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	200005dc 	.word	0x200005dc
 80036e0:	200005e0 	.word	0x200005e0
 80036e4:	200005ec 	.word	0x200005ec

080036e8 <setMic>:
void setMic(float dB){
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  dBC = dB;
 80036f0:	4b03      	ldr	r3, [pc, #12]	@ (8003700 <setMic+0x18>)
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	601a      	str	r2, [r3, #0]
}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b002      	add	sp, #8
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	200005f0 	.word	0x200005f0

08003704 <ESP_Init>:
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.


void ESP_Init(UART_HandleTypeDef* espUart) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 800370c:	4b04      	ldr	r3, [pc, #16]	@ (8003720 <ESP_Init+0x1c>)
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003712:	4b04      	ldr	r3, [pc, #16]	@ (8003724 <ESP_Init+0x20>)
 8003714:	2202      	movs	r2, #2
 8003716:	701a      	strb	r2, [r3, #0]
}
 8003718:	46c0      	nop			@ (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	b002      	add	sp, #8
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200004d0 	.word	0x200004d0
 8003724:	20000102 	.word	0x20000102

08003728 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003728:	b5b0      	push	{r4, r5, r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	000a      	movs	r2, r1
 8003732:	1cbb      	adds	r3, r7, #2
 8003734:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003736:	4b0e      	ldr	r3, [pc, #56]	@ (8003770 <ESP_Send+0x48>)
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	250f      	movs	r5, #15
 800373c:	197c      	adds	r4, r7, r5
 800373e:	1cbb      	adds	r3, r7, #2
 8003740:	881a      	ldrh	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	0019      	movs	r1, r3
 8003746:	f00c fc5f 	bl	8010008 <HAL_UART_Transmit_DMA>
 800374a:	0003      	movs	r3, r0
 800374c:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 800374e:	197b      	adds	r3, r7, r5
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d007      	beq.n	8003766 <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 8003756:	4a07      	ldr	r2, [pc, #28]	@ (8003774 <ESP_Send+0x4c>)
 8003758:	4b07      	ldr	r3, [pc, #28]	@ (8003778 <ESP_Send+0x50>)
 800375a:	0019      	movs	r1, r3
 800375c:	2003      	movs	r0, #3
 800375e:	f005 f903 	bl	8008968 <CreateLine>
    return false;
 8003762:	2300      	movs	r3, #0
 8003764:	e000      	b.n	8003768 <ESP_Send+0x40>
  }
  return true;
 8003766:	2301      	movs	r3, #1
}
 8003768:	0018      	movs	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	b004      	add	sp, #16
 800376e:	bdb0      	pop	{r4, r5, r7, pc}
 8003770:	200004d0 	.word	0x200004d0
 8003774:	080196a0 	.word	0x080196a0
 8003778:	080196c0 	.word	0x080196c0

0800377c <ESP_Receive>:

static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 800377c:	b5b0      	push	{r4, r5, r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	000a      	movs	r2, r1
 8003786:	1cfb      	adds	r3, r7, #3
 8003788:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 800378a:	4b12      	ldr	r3, [pc, #72]	@ (80037d4 <ESP_Receive+0x58>)
 800378c:	2200      	movs	r2, #0
 800378e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003790:	4b11      	ldr	r3, [pc, #68]	@ (80037d8 <ESP_Receive+0x5c>)
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	1cfb      	adds	r3, r7, #3
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	b29a      	uxth	r2, r3
 800379a:	250f      	movs	r5, #15
 800379c:	197c      	adds	r4, r7, r5
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	0019      	movs	r1, r3
 80037a2:	f00c fcc1 	bl	8010128 <HAL_UART_Receive_DMA>
 80037a6:	0003      	movs	r3, r0
 80037a8:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037aa:	197b      	adds	r3, r7, r5
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 80037b2:	4a0a      	ldr	r2, [pc, #40]	@ (80037dc <ESP_Receive+0x60>)
 80037b4:	4b0a      	ldr	r3, [pc, #40]	@ (80037e0 <ESP_Receive+0x64>)
 80037b6:	0019      	movs	r1, r3
 80037b8:	2003      	movs	r0, #3
 80037ba:	f005 f8d5 	bl	8008968 <CreateLine>
    RxComplete = true;
 80037be:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <ESP_Receive+0x58>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	701a      	strb	r2, [r3, #0]
    return false;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e000      	b.n	80037ca <ESP_Receive+0x4e>
  }
  return true;
 80037c8:	2301      	movs	r3, #1
}
 80037ca:	0018      	movs	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b004      	add	sp, #16
 80037d0:	bdb0      	pop	{r4, r5, r7, pc}
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	200004d4 	.word	0x200004d4
 80037d8:	200004d0 	.word	0x200004d0
 80037dc:	080196c4 	.word	0x080196c4
 80037e0:	080196c0 	.word	0x080196c0

080037e4 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 80037ec:	4b08      	ldr	r3, [pc, #32]	@ (8003810 <HAL_UART_RxCpltCallback+0x2c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d108      	bne.n	8003808 <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 80037f6:	4b07      	ldr	r3, [pc, #28]	@ (8003814 <HAL_UART_RxCpltCallback+0x30>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 80037fc:	4a06      	ldr	r2, [pc, #24]	@ (8003818 <HAL_UART_RxCpltCallback+0x34>)
 80037fe:	4b07      	ldr	r3, [pc, #28]	@ (800381c <HAL_UART_RxCpltCallback+0x38>)
 8003800:	0019      	movs	r1, r3
 8003802:	2003      	movs	r0, #3
 8003804:	f005 f8b0 	bl	8008968 <CreateLine>
  }
}
 8003808:	46c0      	nop			@ (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	b002      	add	sp, #8
 800380e:	bd80      	pop	{r7, pc}
 8003810:	200004d0 	.word	0x200004d0
 8003814:	200004d4 	.word	0x200004d4
 8003818:	080196e4 	.word	0x080196e4
 800381c:	080196c0 	.word	0x080196c0

08003820 <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003828:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <HAL_UART_ErrorCallback+0x20>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	429a      	cmp	r2, r3
 8003830:	d102      	bne.n	8003838 <HAL_UART_ErrorCallback+0x18>
    // Handle error
    EspState = ESP_STATE_ERROR;
 8003832:	4b04      	ldr	r3, [pc, #16]	@ (8003844 <HAL_UART_ErrorCallback+0x24>)
 8003834:	2207      	movs	r2, #7
 8003836:	701a      	strb	r2, [r3, #0]
  }
}
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b002      	add	sp, #8
 800383e:	bd80      	pop	{r7, pc}
 8003840:	200004d0 	.word	0x200004d0
 8003844:	20000102 	.word	0x20000102

08003848 <CreateMessage>:
uint16_t CreateMessage(){
 8003848:	b590      	push	{r4, r7, lr}
 800384a:	b085      	sub	sp, #20
 800384c:	af02      	add	r7, sp, #8
  uint16_t messageLength = 0;
 800384e:	1dbb      	adds	r3, r7, #6
 8003850:	2200      	movs	r2, #0
 8003852:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart1, "\"name\":\"temp\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"graden\"", sensorID1, Temperature);
 8003854:	4b42      	ldr	r3, [pc, #264]	@ (8003960 <CreateMessage+0x118>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	1c18      	adds	r0, r3, #0
 800385a:	f7ff fd81 	bl	8003360 <__aeabi_f2d>
 800385e:	0002      	movs	r2, r0
 8003860:	000b      	movs	r3, r1
 8003862:	4c40      	ldr	r4, [pc, #256]	@ (8003964 <CreateMessage+0x11c>)
 8003864:	4940      	ldr	r1, [pc, #256]	@ (8003968 <CreateMessage+0x120>)
 8003866:	4841      	ldr	r0, [pc, #260]	@ (800396c <CreateMessage+0x124>)
 8003868:	9200      	str	r2, [sp, #0]
 800386a:	9301      	str	r3, [sp, #4]
 800386c:	0022      	movs	r2, r4
 800386e:	f012 ff79 	bl	8016764 <siprintf>
  messageLength += strlen(messagePart1);
 8003872:	4b3e      	ldr	r3, [pc, #248]	@ (800396c <CreateMessage+0x124>)
 8003874:	0018      	movs	r0, r3
 8003876:	f7fc fc47 	bl	8000108 <strlen>
 800387a:	0003      	movs	r3, r0
 800387c:	b299      	uxth	r1, r3
 800387e:	1dbb      	adds	r3, r7, #6
 8003880:	1dba      	adds	r2, r7, #6
 8003882:	8812      	ldrh	r2, [r2, #0]
 8003884:	188a      	adds	r2, r1, r2
 8003886:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart2, "\"name\":\"humid\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"%%\"", sensorID2, Humidity);
 8003888:	4b39      	ldr	r3, [pc, #228]	@ (8003970 <CreateMessage+0x128>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	1c18      	adds	r0, r3, #0
 800388e:	f7ff fd67 	bl	8003360 <__aeabi_f2d>
 8003892:	0002      	movs	r2, r0
 8003894:	000b      	movs	r3, r1
 8003896:	4c37      	ldr	r4, [pc, #220]	@ (8003974 <CreateMessage+0x12c>)
 8003898:	4937      	ldr	r1, [pc, #220]	@ (8003978 <CreateMessage+0x130>)
 800389a:	4838      	ldr	r0, [pc, #224]	@ (800397c <CreateMessage+0x134>)
 800389c:	9200      	str	r2, [sp, #0]
 800389e:	9301      	str	r3, [sp, #4]
 80038a0:	0022      	movs	r2, r4
 80038a2:	f012 ff5f 	bl	8016764 <siprintf>
  messageLength += strlen(messagePart2);
 80038a6:	4b35      	ldr	r3, [pc, #212]	@ (800397c <CreateMessage+0x134>)
 80038a8:	0018      	movs	r0, r3
 80038aa:	f7fc fc2d 	bl	8000108 <strlen>
 80038ae:	0003      	movs	r3, r0
 80038b0:	b299      	uxth	r1, r3
 80038b2:	1dbb      	adds	r3, r7, #6
 80038b4:	1dba      	adds	r2, r7, #6
 80038b6:	8812      	ldrh	r2, [r2, #0]
 80038b8:	188a      	adds	r2, r1, r2
 80038ba:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart3, "\"name\":\"Sound\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"dBC\"", sensorID3, dBC);
 80038bc:	4b30      	ldr	r3, [pc, #192]	@ (8003980 <CreateMessage+0x138>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	1c18      	adds	r0, r3, #0
 80038c2:	f7ff fd4d 	bl	8003360 <__aeabi_f2d>
 80038c6:	0002      	movs	r2, r0
 80038c8:	000b      	movs	r3, r1
 80038ca:	4c2e      	ldr	r4, [pc, #184]	@ (8003984 <CreateMessage+0x13c>)
 80038cc:	492e      	ldr	r1, [pc, #184]	@ (8003988 <CreateMessage+0x140>)
 80038ce:	482f      	ldr	r0, [pc, #188]	@ (800398c <CreateMessage+0x144>)
 80038d0:	9200      	str	r2, [sp, #0]
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	0022      	movs	r2, r4
 80038d6:	f012 ff45 	bl	8016764 <siprintf>
  messageLength += strlen(messagePart3);
 80038da:	4b2c      	ldr	r3, [pc, #176]	@ (800398c <CreateMessage+0x144>)
 80038dc:	0018      	movs	r0, r3
 80038de:	f7fc fc13 	bl	8000108 <strlen>
 80038e2:	0003      	movs	r3, r0
 80038e4:	b299      	uxth	r1, r3
 80038e6:	1dbb      	adds	r3, r7, #6
 80038e8:	1dba      	adds	r2, r7, #6
 80038ea:	8812      	ldrh	r2, [r2, #0]
 80038ec:	188a      	adds	r2, r1, r2
 80038ee:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart4, "\"name\":\"voc\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%d, \"unit\": \"VOC index\"", sensorID4, VOCIndex);
 80038f0:	4b27      	ldr	r3, [pc, #156]	@ (8003990 <CreateMessage+0x148>)
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	4a27      	ldr	r2, [pc, #156]	@ (8003994 <CreateMessage+0x14c>)
 80038f6:	4928      	ldr	r1, [pc, #160]	@ (8003998 <CreateMessage+0x150>)
 80038f8:	4828      	ldr	r0, [pc, #160]	@ (800399c <CreateMessage+0x154>)
 80038fa:	f012 ff33 	bl	8016764 <siprintf>
  messageLength += strlen(messagePart4);
 80038fe:	4b27      	ldr	r3, [pc, #156]	@ (800399c <CreateMessage+0x154>)
 8003900:	0018      	movs	r0, r3
 8003902:	f7fc fc01 	bl	8000108 <strlen>
 8003906:	0003      	movs	r3, r0
 8003908:	b299      	uxth	r1, r3
 800390a:	1dbb      	adds	r3, r7, #6
 800390c:	1dba      	adds	r2, r7, #6
 800390e:	8812      	ldrh	r2, [r2, #0]
 8003910:	188a      	adds	r2, r1, r2
 8003912:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart5, "\"name\":\"battery\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"Volt\"", sensorID5, batteryCharge);
 8003914:	4b22      	ldr	r3, [pc, #136]	@ (80039a0 <CreateMessage+0x158>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	1c18      	adds	r0, r3, #0
 800391a:	f7ff fd21 	bl	8003360 <__aeabi_f2d>
 800391e:	0002      	movs	r2, r0
 8003920:	000b      	movs	r3, r1
 8003922:	4c20      	ldr	r4, [pc, #128]	@ (80039a4 <CreateMessage+0x15c>)
 8003924:	4920      	ldr	r1, [pc, #128]	@ (80039a8 <CreateMessage+0x160>)
 8003926:	4821      	ldr	r0, [pc, #132]	@ (80039ac <CreateMessage+0x164>)
 8003928:	9200      	str	r2, [sp, #0]
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	0022      	movs	r2, r4
 800392e:	f012 ff19 	bl	8016764 <siprintf>
  messageLength += strlen(messagePart5);
 8003932:	4b1e      	ldr	r3, [pc, #120]	@ (80039ac <CreateMessage+0x164>)
 8003934:	0018      	movs	r0, r3
 8003936:	f7fc fbe7 	bl	8000108 <strlen>
 800393a:	0003      	movs	r3, r0
 800393c:	b299      	uxth	r1, r3
 800393e:	1dbb      	adds	r3, r7, #6
 8003940:	1dba      	adds	r2, r7, #6
 8003942:	8812      	ldrh	r2, [r2, #0]
 8003944:	188a      	adds	r2, r1, r2
 8003946:	801a      	strh	r2, [r3, #0]
  messageLength += 20;
 8003948:	1dbb      	adds	r3, r7, #6
 800394a:	1dba      	adds	r2, r7, #6
 800394c:	8812      	ldrh	r2, [r2, #0]
 800394e:	3214      	adds	r2, #20
 8003950:	801a      	strh	r2, [r3, #0]
  return(messageLength);
 8003952:	1dbb      	adds	r3, r7, #6
 8003954:	881b      	ldrh	r3, [r3, #0]
}
 8003956:	0018      	movs	r0, r3
 8003958:	46bd      	mov	sp, r7
 800395a:	b003      	add	sp, #12
 800395c:	bd90      	pop	{r4, r7, pc}
 800395e:	46c0      	nop			@ (mov r8, r8)
 8003960:	200005dc 	.word	0x200005dc
 8003964:	20000064 	.word	0x20000064
 8003968:	080196f0 	.word	0x080196f0
 800396c:	200005f4 	.word	0x200005f4
 8003970:	200005e0 	.word	0x200005e0
 8003974:	20000080 	.word	0x20000080
 8003978:	08019748 	.word	0x08019748
 800397c:	20000674 	.word	0x20000674
 8003980:	200005f0 	.word	0x200005f0
 8003984:	2000009c 	.word	0x2000009c
 8003988:	0801979c 	.word	0x0801979c
 800398c:	200006f4 	.word	0x200006f4
 8003990:	200005ec 	.word	0x200005ec
 8003994:	200000b8 	.word	0x200000b8
 8003998:	080197f4 	.word	0x080197f4
 800399c:	20000774 	.word	0x20000774
 80039a0:	200005e4 	.word	0x200005e4
 80039a4:	200000d4 	.word	0x200000d4
 80039a8:	0801984c 	.word	0x0801984c
 80039ac:	200007f4 	.word	0x200007f4

080039b0 <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
 80039b8:	2380      	movs	r3, #128	@ 0x80
 80039ba:	009a      	lsls	r2, r3, #2
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <SetCommandBuffer+0x24>)
 80039c0:	0018      	movs	r0, r3
 80039c2:	f012 ff7b 	bl	80168bc <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 80039c6:	4b04      	ldr	r3, [pc, #16]	@ (80039d8 <SetCommandBuffer+0x28>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
}
 80039cc:	46c0      	nop			@ (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b002      	add	sp, #8
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000888 	.word	0x20000888
 80039d8:	20000a88 	.word	0x20000a88

080039dc <StartProg>:
void StartProg(){
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  HAL_Delay(1000);
 80039e0:	23fa      	movs	r3, #250	@ 0xfa
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	0018      	movs	r0, r3
 80039e6:	f005 fbc1 	bl	800916c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80039ea:	4b15      	ldr	r3, [pc, #84]	@ (8003a40 <StartProg+0x64>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	2101      	movs	r1, #1
 80039f0:	0018      	movs	r0, r3
 80039f2:	f006 fd47 	bl	800a484 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80039f6:	2064      	movs	r0, #100	@ 0x64
 80039f8:	f005 fbb8 	bl	800916c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80039fc:	4b10      	ldr	r3, [pc, #64]	@ (8003a40 <StartProg+0x64>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	2102      	movs	r1, #2
 8003a02:	0018      	movs	r0, r3
 8003a04:	f006 fd3e 	bl	800a484 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a08:	23fa      	movs	r3, #250	@ 0xfa
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f005 fbad 	bl	800916c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003a12:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <StartProg+0x64>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	2101      	movs	r1, #1
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f006 fd33 	bl	800a484 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a1e:	23fa      	movs	r3, #250	@ 0xfa
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	0018      	movs	r0, r3
 8003a24:	f005 fba2 	bl	800916c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003a28:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <StartProg+0x64>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	2102      	movs	r1, #2
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f006 fd28 	bl	800a484 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003a34:	2028      	movs	r0, #40	@ 0x28
 8003a36:	f005 fb99 	bl	800916c <HAL_Delay>
}
 8003a3a:	46c0      	nop			@ (mov r8, r8)
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	50001c00 	.word	0x50001c00

08003a44 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a46:	46c6      	mov	lr, r8
 8003a48:	b500      	push	{lr}
 8003a4a:	b09a      	sub	sp, #104	@ 0x68
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	61f8      	str	r0, [r7, #28]
 8003a50:	0008      	movs	r0, r1
 8003a52:	0011      	movs	r1, r2
 8003a54:	261a      	movs	r6, #26
 8003a56:	19bb      	adds	r3, r7, r6
 8003a58:	1c02      	adds	r2, r0, #0
 8003a5a:	801a      	strh	r2, [r3, #0]
 8003a5c:	2319      	movs	r3, #25
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	1c0a      	adds	r2, r1, #0
 8003a62:	701a      	strb	r2, [r3, #0]
 8003a64:	466b      	mov	r3, sp
 8003a66:	4698      	mov	r8, r3
  char tempBuf[len+1];
 8003a68:	19bb      	adds	r3, r7, r6
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	1e5a      	subs	r2, r3, #1
 8003a70:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003a72:	001a      	movs	r2, r3
 8003a74:	60ba      	str	r2, [r7, #8]
 8003a76:	2200      	movs	r2, #0
 8003a78:	60fa      	str	r2, [r7, #12]
 8003a7a:	68b8      	ldr	r0, [r7, #8]
 8003a7c:	68f9      	ldr	r1, [r7, #12]
 8003a7e:	0002      	movs	r2, r0
 8003a80:	0f52      	lsrs	r2, r2, #29
 8003a82:	000e      	movs	r6, r1
 8003a84:	00f6      	lsls	r6, r6, #3
 8003a86:	617e      	str	r6, [r7, #20]
 8003a88:	697e      	ldr	r6, [r7, #20]
 8003a8a:	4316      	orrs	r6, r2
 8003a8c:	617e      	str	r6, [r7, #20]
 8003a8e:	0002      	movs	r2, r0
 8003a90:	00d2      	lsls	r2, r2, #3
 8003a92:	613a      	str	r2, [r7, #16]
 8003a94:	001a      	movs	r2, r3
 8003a96:	603a      	str	r2, [r7, #0]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	6838      	ldr	r0, [r7, #0]
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	0002      	movs	r2, r0
 8003aa2:	0f52      	lsrs	r2, r2, #29
 8003aa4:	000e      	movs	r6, r1
 8003aa6:	00f5      	lsls	r5, r6, #3
 8003aa8:	4315      	orrs	r5, r2
 8003aaa:	0002      	movs	r2, r0
 8003aac:	00d4      	lsls	r4, r2, #3
 8003aae:	3307      	adds	r3, #7
 8003ab0:	08db      	lsrs	r3, r3, #3
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	466a      	mov	r2, sp
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	469d      	mov	sp, r3
 8003aba:	466b      	mov	r3, sp
 8003abc:	3300      	adds	r3, #0
 8003abe:	65bb      	str	r3, [r7, #88]	@ 0x58
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003ac0:	234f      	movs	r3, #79	@ 0x4f
 8003ac2:	2118      	movs	r1, #24
 8003ac4:	185b      	adds	r3, r3, r1
 8003ac6:	19db      	adds	r3, r3, r7
 8003ac8:	2203      	movs	r2, #3
 8003aca:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003acc:	234c      	movs	r3, #76	@ 0x4c
 8003ace:	185b      	adds	r3, r3, r1
 8003ad0:	19db      	adds	r3, r3, r7
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	801a      	strh	r2, [r3, #0]
 8003ad6:	e013      	b.n	8003b00 <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 8003ad8:	204c      	movs	r0, #76	@ 0x4c
 8003ada:	2418      	movs	r4, #24
 8003adc:	1903      	adds	r3, r0, r4
 8003ade:	19db      	adds	r3, r3, r7
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	18d2      	adds	r2, r2, r3
 8003ae6:	1903      	adds	r3, r0, r4
 8003ae8:	19db      	adds	r3, r3, r7
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	7811      	ldrb	r1, [r2, #0]
 8003aee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003af0:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003af2:	1903      	adds	r3, r0, r4
 8003af4:	19db      	adds	r3, r3, r7
 8003af6:	881a      	ldrh	r2, [r3, #0]
 8003af8:	1903      	adds	r3, r0, r4
 8003afa:	19db      	adds	r3, r3, r7
 8003afc:	3201      	adds	r2, #1
 8003afe:	801a      	strh	r2, [r3, #0]
 8003b00:	234c      	movs	r3, #76	@ 0x4c
 8003b02:	2018      	movs	r0, #24
 8003b04:	181b      	adds	r3, r3, r0
 8003b06:	19da      	adds	r2, r3, r7
 8003b08:	211a      	movs	r1, #26
 8003b0a:	187b      	adds	r3, r7, r1
 8003b0c:	8812      	ldrh	r2, [r2, #0]
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d3e1      	bcc.n	8003ad8 <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 8003b14:	187b      	adds	r3, r7, r1
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 8003b1e:	233f      	movs	r3, #63	@ 0x3f
 8003b20:	0006      	movs	r6, r0
 8003b22:	199b      	adds	r3, r3, r6
 8003b24:	19db      	adds	r3, r3, r7
 8003b26:	224e      	movs	r2, #78	@ 0x4e
 8003b28:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  char * ParsePoint3;
  const char OK[] = AT_RESPONSE_OK;
 8003b2a:	2530      	movs	r5, #48	@ 0x30
 8003b2c:	19ab      	adds	r3, r5, r6
 8003b2e:	19db      	adds	r3, r3, r7
 8003b30:	4a60      	ldr	r2, [pc, #384]	@ (8003cb4 <ParseBuffer+0x270>)
 8003b32:	8811      	ldrh	r1, [r2, #0]
 8003b34:	8019      	strh	r1, [r3, #0]
 8003b36:	7892      	ldrb	r2, [r2, #2]
 8003b38:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003b3a:	2328      	movs	r3, #40	@ 0x28
 8003b3c:	199b      	adds	r3, r3, r6
 8003b3e:	19db      	adds	r3, r3, r7
 8003b40:	4a5d      	ldr	r2, [pc, #372]	@ (8003cb8 <ParseBuffer+0x274>)
 8003b42:	6811      	ldr	r1, [r2, #0]
 8003b44:	6019      	str	r1, [r3, #0]
 8003b46:	8892      	ldrh	r2, [r2, #4]
 8003b48:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	199b      	adds	r3, r3, r6
 8003b4e:	19db      	adds	r3, r3, r7
 8003b50:	4a5a      	ldr	r2, [pc, #360]	@ (8003cbc <ParseBuffer+0x278>)
 8003b52:	6811      	ldr	r1, [r2, #0]
 8003b54:	6019      	str	r1, [r3, #0]
 8003b56:	8892      	ldrh	r2, [r2, #4]
 8003b58:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003b5a:	231c      	movs	r3, #28
 8003b5c:	199b      	adds	r3, r3, r6
 8003b5e:	19db      	adds	r3, r3, r7
 8003b60:	223e      	movs	r2, #62	@ 0x3e
 8003b62:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003b64:	230c      	movs	r3, #12
 8003b66:	199b      	adds	r3, r3, r6
 8003b68:	19db      	adds	r3, r3, r7
 8003b6a:	4a55      	ldr	r2, [pc, #340]	@ (8003cc0 <ParseBuffer+0x27c>)
 8003b6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003b6e:	c313      	stmia	r3!, {r0, r1, r4}
 8003b70:	8811      	ldrh	r1, [r2, #0]
 8003b72:	8019      	strh	r1, [r3, #0]
 8003b74:	7892      	ldrb	r2, [r2, #2]
 8003b76:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003b78:	2319      	movs	r3, #25
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d108      	bne.n	8003b94 <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 8003b82:	19ab      	adds	r3, r5, r6
 8003b84:	19da      	adds	r2, r3, r7
 8003b86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b88:	0011      	movs	r1, r2
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f012 feaa 	bl	80168e4 <strstr>
 8003b90:	0003      	movs	r3, r0
 8003b92:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003b94:	2319      	movs	r3, #25
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d10a      	bne.n	8003bb4 <ParseBuffer+0x170>
    ParsePoint = strstr(tempBuf, ready);
 8003b9e:	2320      	movs	r3, #32
 8003ba0:	2218      	movs	r2, #24
 8003ba2:	189b      	adds	r3, r3, r2
 8003ba4:	19da      	adds	r2, r3, r7
 8003ba6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ba8:	0011      	movs	r1, r2
 8003baa:	0018      	movs	r0, r3
 8003bac:	f012 fe9a 	bl	80168e4 <strstr>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003bb4:	2319      	movs	r3, #25
 8003bb6:	18fb      	adds	r3, r7, r3
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d10a      	bne.n	8003bd4 <ParseBuffer+0x190>
    ParsePoint = strstr(tempBuf, start);
 8003bbe:	231c      	movs	r3, #28
 8003bc0:	2218      	movs	r2, #24
 8003bc2:	189b      	adds	r3, r3, r2
 8003bc4:	19da      	adds	r2, r3, r7
 8003bc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bc8:	0011      	movs	r1, r2
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f012 fe8a 	bl	80168e4 <strstr>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003bd4:	2328      	movs	r3, #40	@ 0x28
 8003bd6:	2418      	movs	r4, #24
 8003bd8:	191b      	adds	r3, r3, r4
 8003bda:	19da      	adds	r2, r3, r7
 8003bdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bde:	0011      	movs	r1, r2
 8003be0:	0018      	movs	r0, r3
 8003be2:	f012 fe7f 	bl	80168e4 <strstr>
 8003be6:	0003      	movs	r3, r0
 8003be8:	653b      	str	r3, [r7, #80]	@ 0x50
  ParsePoint3 = strstr(tempBuf, WIFI);
 8003bea:	230c      	movs	r3, #12
 8003bec:	191b      	adds	r3, r3, r4
 8003bee:	19da      	adds	r2, r3, r7
 8003bf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bf2:	0011      	movs	r1, r2
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f012 fe75 	bl	80168e4 <strstr>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if(len > 1 ){
 8003bfe:	231a      	movs	r3, #26
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d948      	bls.n	8003c9a <ParseBuffer+0x256>
    TestChar = *ParsePoint;
 8003c08:	213f      	movs	r1, #63	@ 0x3f
 8003c0a:	190b      	adds	r3, r1, r4
 8003c0c:	19db      	adds	r3, r3, r7
 8003c0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c10:	7812      	ldrb	r2, [r2, #0]
 8003c12:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003c14:	190b      	adds	r3, r1, r4
 8003c16:	19db      	adds	r3, r3, r7
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b4f      	cmp	r3, #79	@ 0x4f
 8003c1c:	d104      	bne.n	8003c28 <ParseBuffer+0x1e4>
      status = RECEIVE_STATUS_OK;
 8003c1e:	234f      	movs	r3, #79	@ 0x4f
 8003c20:	191b      	adds	r3, r3, r4
 8003c22:	19db      	adds	r3, r3, r7
 8003c24:	2200      	movs	r2, #0
 8003c26:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003c28:	233f      	movs	r3, #63	@ 0x3f
 8003c2a:	2218      	movs	r2, #24
 8003c2c:	189b      	adds	r3, r3, r2
 8003c2e:	19db      	adds	r3, r3, r7
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b72      	cmp	r3, #114	@ 0x72
 8003c34:	d104      	bne.n	8003c40 <ParseBuffer+0x1fc>
      status = RECEIVE_STATUS_READY;
 8003c36:	234f      	movs	r3, #79	@ 0x4f
 8003c38:	189b      	adds	r3, r3, r2
 8003c3a:	19db      	adds	r3, r3, r7
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003c40:	233f      	movs	r3, #63	@ 0x3f
 8003c42:	2218      	movs	r2, #24
 8003c44:	189b      	adds	r3, r3, r2
 8003c46:	19db      	adds	r3, r3, r7
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c4c:	d104      	bne.n	8003c58 <ParseBuffer+0x214>
      status = RECEIVE_STATUS_START;
 8003c4e:	234f      	movs	r3, #79	@ 0x4f
 8003c50:	189b      	adds	r3, r3, r2
 8003c52:	19db      	adds	r3, r3, r7
 8003c54:	2205      	movs	r2, #5
 8003c56:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003c58:	213f      	movs	r1, #63	@ 0x3f
 8003c5a:	2018      	movs	r0, #24
 8003c5c:	180b      	adds	r3, r1, r0
 8003c5e:	19db      	adds	r3, r3, r7
 8003c60:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003c62:	7812      	ldrb	r2, [r2, #0]
 8003c64:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003c66:	0002      	movs	r2, r0
 8003c68:	188b      	adds	r3, r1, r2
 8003c6a:	19db      	adds	r3, r3, r7
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b45      	cmp	r3, #69	@ 0x45
 8003c70:	d104      	bne.n	8003c7c <ParseBuffer+0x238>
      status = RECEIVE_STATUS_ERROR;
 8003c72:	234f      	movs	r3, #79	@ 0x4f
 8003c74:	189b      	adds	r3, r3, r2
 8003c76:	19db      	adds	r3, r3, r7
 8003c78:	2201      	movs	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint3;
 8003c7c:	213f      	movs	r1, #63	@ 0x3f
 8003c7e:	2018      	movs	r0, #24
 8003c80:	180b      	adds	r3, r1, r0
 8003c82:	19db      	adds	r3, r3, r7
 8003c84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c86:	7812      	ldrb	r2, [r2, #0]
 8003c88:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'W'){
 8003c8a:	180b      	adds	r3, r1, r0
 8003c8c:	19db      	adds	r3, r3, r7
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b57      	cmp	r3, #87	@ 0x57
 8003c92:	d102      	bne.n	8003c9a <ParseBuffer+0x256>
      ConnectionMade = true;
 8003c94:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc4 <ParseBuffer+0x280>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003c9a:	234f      	movs	r3, #79	@ 0x4f
 8003c9c:	2218      	movs	r2, #24
 8003c9e:	189b      	adds	r3, r3, r2
 8003ca0:	19db      	adds	r3, r3, r7
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	46c5      	mov	sp, r8

}
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b01a      	add	sp, #104	@ 0x68
 8003cac:	bc80      	pop	{r7}
 8003cae:	46b8      	mov	r8, r7
 8003cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cb2:	46c0      	nop			@ (mov r8, r8)
 8003cb4:	080198a4 	.word	0x080198a4
 8003cb8:	080198a8 	.word	0x080198a8
 8003cbc:	080198b0 	.word	0x080198b0
 8003cc0:	080198b8 	.word	0x080198b8
 8003cc4:	200005da 	.word	0x200005da

08003cc8 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003cce:	4b0d      	ldr	r3, [pc, #52]	@ (8003d04 <PollAwake+0x3c>)
 8003cd0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7ff fe6b 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f7fc fa13 	bl	8000108 <strlen>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	0011      	movs	r1, r2
 8003cea:	0018      	movs	r0, r3
 8003cec:	f7ff fd1c 	bl	8003728 <ESP_Send>
 8003cf0:	1e03      	subs	r3, r0, #0
 8003cf2:	d001      	beq.n	8003cf8 <PollAwake+0x30>
    return true;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <PollAwake+0x32>
  }
  else{
    return false;
 8003cf8:	2300      	movs	r3, #0
  }
}
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b002      	add	sp, #8
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	080198c8 	.word	0x080198c8

08003d08 <RFPower>:
bool RFPower(){
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d44 <RFPower+0x3c>)
 8003d10:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7ff fe4b 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f7fc f9f3 	bl	8000108 <strlen>
 8003d22:	0003      	movs	r3, r0
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	0011      	movs	r1, r2
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7ff fcfc 	bl	8003728 <ESP_Send>
 8003d30:	1e03      	subs	r3, r0, #0
 8003d32:	d001      	beq.n	8003d38 <RFPower+0x30>
    return true;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <RFPower+0x32>
  }
  else{
    return false;
 8003d38:	2300      	movs	r3, #0
  }
}
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b002      	add	sp, #8
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	46c0      	nop			@ (mov r8, r8)
 8003d44:	080198d0 	.word	0x080198d0

08003d48 <CheckRFPower>:
bool CheckRFPower(){
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d84 <CheckRFPower+0x3c>)
 8003d50:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	0018      	movs	r0, r3
 8003d56:	f7ff fe2b 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f7fc f9d3 	bl	8000108 <strlen>
 8003d62:	0003      	movs	r3, r0
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	0011      	movs	r1, r2
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7ff fcdc 	bl	8003728 <ESP_Send>
 8003d70:	1e03      	subs	r3, r0, #0
 8003d72:	d001      	beq.n	8003d78 <CheckRFPower+0x30>
    return true;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <CheckRFPower+0x32>
  }
  else{
    return false;
 8003d78:	2300      	movs	r3, #0
  }
}
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b002      	add	sp, #8
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	46c0      	nop			@ (mov r8, r8)
 8003d84:	080198e0 	.word	0x080198e0

08003d88 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc4 <ATRestore+0x3c>)
 8003d90:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7ff fe0b 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f7fc f9b3 	bl	8000108 <strlen>
 8003da2:	0003      	movs	r3, r0
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	0011      	movs	r1, r2
 8003daa:	0018      	movs	r0, r3
 8003dac:	f7ff fcbc 	bl	8003728 <ESP_Send>
 8003db0:	1e03      	subs	r3, r0, #0
 8003db2:	d001      	beq.n	8003db8 <ATRestore+0x30>
    return true;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e000      	b.n	8003dba <ATRestore+0x32>
  }
  else{
    return false;
 8003db8:	2300      	movs	r3, #0
  }
}
 8003dba:	0018      	movs	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b002      	add	sp, #8
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	46c0      	nop			@ (mov r8, r8)
 8003dc4:	080198f0 	.word	0x080198f0

08003dc8 <CWINIT>:
bool CWINIT(){
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8003dce:	4b0d      	ldr	r3, [pc, #52]	@ (8003e04 <CWINIT+0x3c>)
 8003dd0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f7ff fdeb 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f7fc f993 	bl	8000108 <strlen>
 8003de2:	0003      	movs	r3, r0
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	0011      	movs	r1, r2
 8003dea:	0018      	movs	r0, r3
 8003dec:	f7ff fc9c 	bl	8003728 <ESP_Send>
 8003df0:	1e03      	subs	r3, r0, #0
 8003df2:	d001      	beq.n	8003df8 <CWINIT+0x30>
    return true;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <CWINIT+0x32>
  }
  else{
    return false;
 8003df8:	2300      	movs	r3, #0
  }
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b002      	add	sp, #8
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			@ (mov r8, r8)
 8003e04:	08019900 	.word	0x08019900

08003e08 <CWMODE1>:
bool CWMODE1(){
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8003e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e44 <CWMODE1+0x3c>)
 8003e10:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	0018      	movs	r0, r3
 8003e16:	f7ff fdcb 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f7fc f973 	bl	8000108 <strlen>
 8003e22:	0003      	movs	r3, r0
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0011      	movs	r1, r2
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f7ff fc7c 	bl	8003728 <ESP_Send>
 8003e30:	1e03      	subs	r3, r0, #0
 8003e32:	d001      	beq.n	8003e38 <CWMODE1+0x30>
    return true;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <CWMODE1+0x32>
  }
  else{
    return false;
 8003e38:	2300      	movs	r3, #0
  }
}
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b002      	add	sp, #8
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			@ (mov r8, r8)
 8003e44:	08019910 	.word	0x08019910

08003e48 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e84 <CWAUTOCONN+0x3c>)
 8003e50:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	0018      	movs	r0, r3
 8003e56:	f7ff fdab 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f7fc f953 	bl	8000108 <strlen>
 8003e62:	0003      	movs	r3, r0
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	0011      	movs	r1, r2
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f7ff fc5c 	bl	8003728 <ESP_Send>
 8003e70:	1e03      	subs	r3, r0, #0
 8003e72:	d001      	beq.n	8003e78 <CWAUTOCONN+0x30>
    return true;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <CWAUTOCONN+0x32>
  }
  else{
    return false;
 8003e78:	2300      	movs	r3, #0
  }
}
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b002      	add	sp, #8
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	08019920 	.word	0x08019920

08003e88 <CWJAP>:
bool CWJAP(){
 8003e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e8a:	46c6      	mov	lr, r8
 8003e8c:	b500      	push	{lr}
 8003e8e:	b0a2      	sub	sp, #136	@ 0x88
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	466b      	mov	r3, sp
 8003e94:	4698      	mov	r8, r3
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8003e96:	2618      	movs	r6, #24
 8003e98:	19bb      	adds	r3, r7, r6
 8003e9a:	2264      	movs	r2, #100	@ 0x64
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f012 fd04 	bl	80168ac <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8003ea4:	4b35      	ldr	r3, [pc, #212]	@ (8003f7c <CWJAP+0xf4>)
 8003ea6:	4a36      	ldr	r2, [pc, #216]	@ (8003f80 <CWJAP+0xf8>)
 8003ea8:	4936      	ldr	r1, [pc, #216]	@ (8003f84 <CWJAP+0xfc>)
 8003eaa:	19b8      	adds	r0, r7, r6
 8003eac:	f012 fc5a 	bl	8016764 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8003eb0:	19bb      	adds	r3, r7, r6
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f7fc f928 	bl	8000108 <strlen>
 8003eb8:	0002      	movs	r2, r0
 8003eba:	216f      	movs	r1, #111	@ 0x6f
 8003ebc:	0030      	movs	r0, r6
 8003ebe:	180b      	adds	r3, r1, r0
 8003ec0:	19db      	adds	r3, r3, r7
 8003ec2:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8003ec4:	180b      	adds	r3, r1, r0
 8003ec6:	19db      	adds	r3, r3, r7
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	1e5a      	subs	r2, r3, #1
 8003ece:	2180      	movs	r1, #128	@ 0x80
 8003ed0:	1879      	adds	r1, r7, r1
 8003ed2:	600a      	str	r2, [r1, #0]
 8003ed4:	001a      	movs	r2, r3
 8003ed6:	60ba      	str	r2, [r7, #8]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	60fa      	str	r2, [r7, #12]
 8003edc:	68b8      	ldr	r0, [r7, #8]
 8003ede:	68f9      	ldr	r1, [r7, #12]
 8003ee0:	0002      	movs	r2, r0
 8003ee2:	0f52      	lsrs	r2, r2, #29
 8003ee4:	000e      	movs	r6, r1
 8003ee6:	00f6      	lsls	r6, r6, #3
 8003ee8:	617e      	str	r6, [r7, #20]
 8003eea:	697e      	ldr	r6, [r7, #20]
 8003eec:	4316      	orrs	r6, r2
 8003eee:	617e      	str	r6, [r7, #20]
 8003ef0:	0002      	movs	r2, r0
 8003ef2:	00d2      	lsls	r2, r2, #3
 8003ef4:	613a      	str	r2, [r7, #16]
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	603a      	str	r2, [r7, #0]
 8003efa:	2200      	movs	r2, #0
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	6838      	ldr	r0, [r7, #0]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	0002      	movs	r2, r0
 8003f04:	0f52      	lsrs	r2, r2, #29
 8003f06:	000e      	movs	r6, r1
 8003f08:	00f5      	lsls	r5, r6, #3
 8003f0a:	4315      	orrs	r5, r2
 8003f0c:	0002      	movs	r2, r0
 8003f0e:	00d4      	lsls	r4, r2, #3
 8003f10:	3307      	adds	r3, #7
 8003f12:	08db      	lsrs	r3, r3, #3
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	466a      	mov	r2, sp
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	469d      	mov	sp, r3
 8003f1c:	466b      	mov	r3, sp
 8003f1e:	3300      	adds	r3, #0
 8003f20:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8003f22:	246f      	movs	r4, #111	@ 0x6f
 8003f24:	2518      	movs	r5, #24
 8003f26:	1963      	adds	r3, r4, r5
 8003f28:	19db      	adds	r3, r3, r7
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	001a      	movs	r2, r3
 8003f30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f32:	2100      	movs	r1, #0
 8003f34:	0018      	movs	r0, r3
 8003f36:	f012 fcb9 	bl	80168ac <memset>
  strncpy(atCommand, atCommandBuff, len);
 8003f3a:	1963      	adds	r3, r4, r5
 8003f3c:	19db      	adds	r3, r3, r7
 8003f3e:	781a      	ldrb	r2, [r3, #0]
 8003f40:	1979      	adds	r1, r7, r5
 8003f42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f44:	0018      	movs	r0, r3
 8003f46:	f012 fcb9 	bl	80168bc <strncpy>
  SetCommandBuffer(atCommand);
 8003f4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f7ff fd2f 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8003f52:	1963      	adds	r3, r4, r5
 8003f54:	19db      	adds	r3, r3, r7
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f5c:	0011      	movs	r1, r2
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f7ff fbe2 	bl	8003728 <ESP_Send>
 8003f64:	1e03      	subs	r3, r0, #0
 8003f66:	d001      	beq.n	8003f6c <CWJAP+0xe4>
    return true;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <CWJAP+0xe6>
  }
  else{
    return false;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	46c5      	mov	sp, r8
  }
}
 8003f70:	0018      	movs	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b022      	add	sp, #136	@ 0x88
 8003f76:	bc80      	pop	{r7}
 8003f78:	46b8      	mov	r8, r7
 8003f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f7c:	20000010 	.word	0x20000010
 8003f80:	20000004 	.word	0x20000004
 8003f84:	08019934 	.word	0x08019934

08003f88 <CWMODE3>:
bool CWMODE3(){
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc4 <CWMODE3+0x3c>)
 8003f90:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	0018      	movs	r0, r3
 8003f96:	f7ff fd0b 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7fc f8b3 	bl	8000108 <strlen>
 8003fa2:	0003      	movs	r3, r0
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	0011      	movs	r1, r2
 8003faa:	0018      	movs	r0, r3
 8003fac:	f7ff fbbc 	bl	8003728 <ESP_Send>
 8003fb0:	1e03      	subs	r3, r0, #0
 8003fb2:	d001      	beq.n	8003fb8 <CWMODE3+0x30>
    return true;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <CWMODE3+0x32>
  }
  else{
    return false;
 8003fb8:	2300      	movs	r3, #0
  }
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b002      	add	sp, #8
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	0801994c 	.word	0x0801994c

08003fc8 <CWSAP>:
bool CWSAP(){
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8003fce:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <CWSAP+0x3c>)
 8003fd0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f7ff fceb 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7fc f893 	bl	8000108 <strlen>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0011      	movs	r1, r2
 8003fea:	0018      	movs	r0, r3
 8003fec:	f7ff fb9c 	bl	8003728 <ESP_Send>
 8003ff0:	1e03      	subs	r3, r0, #0
 8003ff2:	d001      	beq.n	8003ff8 <CWSAP+0x30>
    return true;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e000      	b.n	8003ffa <CWSAP+0x32>
  }
  else{
    return false;
 8003ff8:	2300      	movs	r3, #0
  }
}
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	b002      	add	sp, #8
 8004000:	bd80      	pop	{r7, pc}
 8004002:	46c0      	nop			@ (mov r8, r8)
 8004004:	0801995c 	.word	0x0801995c

08004008 <CIPMUX>:
bool CIPMUX(){
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800400e:	4b0d      	ldr	r3, [pc, #52]	@ (8004044 <CIPMUX+0x3c>)
 8004010:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	0018      	movs	r0, r3
 8004016:	f7ff fccb 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f7fc f873 	bl	8000108 <strlen>
 8004022:	0003      	movs	r3, r0
 8004024:	b29a      	uxth	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	0011      	movs	r1, r2
 800402a:	0018      	movs	r0, r3
 800402c:	f7ff fb7c 	bl	8003728 <ESP_Send>
 8004030:	1e03      	subs	r3, r0, #0
 8004032:	d001      	beq.n	8004038 <CIPMUX+0x30>
    return true;
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <CIPMUX+0x32>
  }
  else{
    return false;
 8004038:	2300      	movs	r3, #0
  }
}
 800403a:	0018      	movs	r0, r3
 800403c:	46bd      	mov	sp, r7
 800403e:	b002      	add	sp, #8
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	08019980 	.word	0x08019980

08004048 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800404e:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <WEBSERVER+0x3c>)
 8004050:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	0018      	movs	r0, r3
 8004056:	f7ff fcab 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	0018      	movs	r0, r3
 800405e:	f7fc f853 	bl	8000108 <strlen>
 8004062:	0003      	movs	r3, r0
 8004064:	b29a      	uxth	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0011      	movs	r1, r2
 800406a:	0018      	movs	r0, r3
 800406c:	f7ff fb5c 	bl	8003728 <ESP_Send>
 8004070:	1e03      	subs	r3, r0, #0
 8004072:	d001      	beq.n	8004078 <WEBSERVER+0x30>
    return true;
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <WEBSERVER+0x32>
  }
  else{
    return false;
 8004078:	2300      	movs	r3, #0
  }
}
 800407a:	0018      	movs	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	b002      	add	sp, #8
 8004080:	bd80      	pop	{r7, pc}
 8004082:	46c0      	nop			@ (mov r8, r8)
 8004084:	08019990 	.word	0x08019990

08004088 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408a:	46c6      	mov	lr, r8
 800408c:	b500      	push	{lr}
 800408e:	4c47      	ldr	r4, [pc, #284]	@ (80041ac <HTTPCPOST+0x124>)
 8004090:	44a5      	add	sp, r4
 8004092:	af00      	add	r7, sp, #0
 8004094:	466b      	mov	r3, sp
 8004096:	4698      	mov	r8, r3
  char atCommandBuff[600];
  uint16_t length = CreateMessage();
 8004098:	4b45      	ldr	r3, [pc, #276]	@ (80041b0 <HTTPCPOST+0x128>)
 800409a:	2218      	movs	r2, #24
 800409c:	189b      	adds	r3, r3, r2
 800409e:	19dc      	adds	r4, r3, r7
 80040a0:	f7ff fbd2 	bl	8003848 <CreateMessage>
 80040a4:	0003      	movs	r3, r0
 80040a6:	8023      	strh	r3, [r4, #0]
  sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 80040a8:	4b41      	ldr	r3, [pc, #260]	@ (80041b0 <HTTPCPOST+0x128>)
 80040aa:	2218      	movs	r2, #24
 80040ac:	189b      	adds	r3, r3, r2
 80040ae:	19db      	adds	r3, r3, r7
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	4a40      	ldr	r2, [pc, #256]	@ (80041b4 <HTTPCPOST+0x12c>)
 80040b4:	4940      	ldr	r1, [pc, #256]	@ (80041b8 <HTTPCPOST+0x130>)
 80040b6:	201c      	movs	r0, #28
 80040b8:	1838      	adds	r0, r7, r0
 80040ba:	f012 fb53 	bl	8016764 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80040be:	231c      	movs	r3, #28
 80040c0:	18fb      	adds	r3, r7, r3
 80040c2:	0018      	movs	r0, r3
 80040c4:	f7fc f820 	bl	8000108 <strlen>
 80040c8:	0002      	movs	r2, r0
 80040ca:	4c3c      	ldr	r4, [pc, #240]	@ (80041bc <HTTPCPOST+0x134>)
 80040cc:	2318      	movs	r3, #24
 80040ce:	18e3      	adds	r3, r4, r3
 80040d0:	19db      	adds	r3, r3, r7
 80040d2:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80040d4:	2318      	movs	r3, #24
 80040d6:	18e3      	adds	r3, r4, r3
 80040d8:	19db      	adds	r3, r3, r7
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	1e5a      	subs	r2, r3, #1
 80040e0:	2198      	movs	r1, #152	@ 0x98
 80040e2:	0089      	lsls	r1, r1, #2
 80040e4:	2018      	movs	r0, #24
 80040e6:	1809      	adds	r1, r1, r0
 80040e8:	19c9      	adds	r1, r1, r7
 80040ea:	600a      	str	r2, [r1, #0]
 80040ec:	001a      	movs	r2, r3
 80040ee:	0015      	movs	r5, r2
 80040f0:	2200      	movs	r2, #0
 80040f2:	0016      	movs	r6, r2
 80040f4:	0028      	movs	r0, r5
 80040f6:	0031      	movs	r1, r6
 80040f8:	0002      	movs	r2, r0
 80040fa:	0f52      	lsrs	r2, r2, #29
 80040fc:	000d      	movs	r5, r1
 80040fe:	00ed      	lsls	r5, r5, #3
 8004100:	617d      	str	r5, [r7, #20]
 8004102:	697d      	ldr	r5, [r7, #20]
 8004104:	4315      	orrs	r5, r2
 8004106:	617d      	str	r5, [r7, #20]
 8004108:	0002      	movs	r2, r0
 800410a:	00d2      	lsls	r2, r2, #3
 800410c:	613a      	str	r2, [r7, #16]
 800410e:	001a      	movs	r2, r3
 8004110:	603a      	str	r2, [r7, #0]
 8004112:	2200      	movs	r2, #0
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	6838      	ldr	r0, [r7, #0]
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	0002      	movs	r2, r0
 800411c:	0f52      	lsrs	r2, r2, #29
 800411e:	000d      	movs	r5, r1
 8004120:	00ed      	lsls	r5, r5, #3
 8004122:	60fd      	str	r5, [r7, #12]
 8004124:	68fd      	ldr	r5, [r7, #12]
 8004126:	4315      	orrs	r5, r2
 8004128:	60fd      	str	r5, [r7, #12]
 800412a:	0002      	movs	r2, r0
 800412c:	00d2      	lsls	r2, r2, #3
 800412e:	60ba      	str	r2, [r7, #8]
 8004130:	3307      	adds	r3, #7
 8004132:	08db      	lsrs	r3, r3, #3
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	466a      	mov	r2, sp
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	469d      	mov	sp, r3
 800413c:	466b      	mov	r3, sp
 800413e:	3300      	adds	r3, #0
 8004140:	2597      	movs	r5, #151	@ 0x97
 8004142:	00ad      	lsls	r5, r5, #2
 8004144:	2218      	movs	r2, #24
 8004146:	18aa      	adds	r2, r5, r2
 8004148:	19d2      	adds	r2, r2, r7
 800414a:	6013      	str	r3, [r2, #0]
  strncpy(atCommand, atCommandBuff, len);
 800414c:	2318      	movs	r3, #24
 800414e:	18e3      	adds	r3, r4, r3
 8004150:	19db      	adds	r3, r3, r7
 8004152:	781a      	ldrb	r2, [r3, #0]
 8004154:	231c      	movs	r3, #28
 8004156:	18f9      	adds	r1, r7, r3
 8004158:	2318      	movs	r3, #24
 800415a:	18eb      	adds	r3, r5, r3
 800415c:	19db      	adds	r3, r3, r7
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	0018      	movs	r0, r3
 8004162:	f012 fbab 	bl	80168bc <strncpy>
  SetCommandBuffer(atCommand);
 8004166:	2318      	movs	r3, #24
 8004168:	18eb      	adds	r3, r5, r3
 800416a:	19db      	adds	r3, r3, r7
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	0018      	movs	r0, r3
 8004170:	f7ff fc1e 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)){
 8004174:	2318      	movs	r3, #24
 8004176:	18e3      	adds	r3, r4, r3
 8004178:	19db      	adds	r3, r3, r7
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	b29a      	uxth	r2, r3
 800417e:	2318      	movs	r3, #24
 8004180:	18eb      	adds	r3, r5, r3
 8004182:	19db      	adds	r3, r3, r7
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	0011      	movs	r1, r2
 8004188:	0018      	movs	r0, r3
 800418a:	f7ff facd 	bl	8003728 <ESP_Send>
 800418e:	1e03      	subs	r3, r0, #0
 8004190:	d001      	beq.n	8004196 <HTTPCPOST+0x10e>
    return true;
 8004192:	2301      	movs	r3, #1
 8004194:	e000      	b.n	8004198 <HTTPCPOST+0x110>
  }
  else{
    return false;
 8004196:	2300      	movs	r3, #0
 8004198:	46c5      	mov	sp, r8
  }
}
 800419a:	0018      	movs	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	23a0      	movs	r3, #160	@ 0xa0
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	449d      	add	sp, r3
 80041a4:	bc80      	pop	{r7}
 80041a6:	46b8      	mov	r8, r7
 80041a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041aa:	46c0      	nop			@ (mov r8, r8)
 80041ac:	fffffd80 	.word	0xfffffd80
 80041b0:	00000266 	.word	0x00000266
 80041b4:	20000028 	.word	0x20000028
 80041b8:	080199a8 	.word	0x080199a8
 80041bc:	00000265 	.word	0x00000265

080041c0 <SENDDATA>:
bool SENDDATA(){
 80041c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c2:	46c6      	mov	lr, r8
 80041c4:	b500      	push	{lr}
 80041c6:	4c4c      	ldr	r4, [pc, #304]	@ (80042f8 <SENDDATA+0x138>)
 80041c8:	44a5      	add	sp, r4
 80041ca:	af04      	add	r7, sp, #16
 80041cc:	466b      	mov	r3, sp
 80041ce:	4698      	mov	r8, r3
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 80041d0:	23a4      	movs	r3, #164	@ 0xa4
 80041d2:	009a      	lsls	r2, r3, #2
 80041d4:	261c      	movs	r6, #28
 80041d6:	19bb      	adds	r3, r7, r6
 80041d8:	2100      	movs	r1, #0
 80041da:	0018      	movs	r0, r3
 80041dc:	f012 fb66 	bl	80168ac <memset>
  sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
 80041e0:	4a46      	ldr	r2, [pc, #280]	@ (80042fc <SENDDATA+0x13c>)
 80041e2:	4947      	ldr	r1, [pc, #284]	@ (8004300 <SENDDATA+0x140>)
 80041e4:	4847      	ldr	r0, [pc, #284]	@ (8004304 <SENDDATA+0x144>)
 80041e6:	19be      	adds	r6, r7, r6
 80041e8:	4b47      	ldr	r3, [pc, #284]	@ (8004308 <SENDDATA+0x148>)
 80041ea:	9302      	str	r3, [sp, #8]
 80041ec:	4b47      	ldr	r3, [pc, #284]	@ (800430c <SENDDATA+0x14c>)
 80041ee:	9301      	str	r3, [sp, #4]
 80041f0:	4b47      	ldr	r3, [pc, #284]	@ (8004310 <SENDDATA+0x150>)
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	0013      	movs	r3, r2
 80041f6:	000a      	movs	r2, r1
 80041f8:	0001      	movs	r1, r0
 80041fa:	0030      	movs	r0, r6
 80041fc:	f012 fab2 	bl	8016764 <siprintf>
  uint16_t len = strlen(atCommandBuff);
 8004200:	231c      	movs	r3, #28
 8004202:	18fb      	adds	r3, r7, r3
 8004204:	0018      	movs	r0, r3
 8004206:	f7fb ff7f 	bl	8000108 <strlen>
 800420a:	0002      	movs	r2, r0
 800420c:	4e41      	ldr	r6, [pc, #260]	@ (8004314 <SENDDATA+0x154>)
 800420e:	2018      	movs	r0, #24
 8004210:	1831      	adds	r1, r6, r0
 8004212:	19cb      	adds	r3, r1, r7
 8004214:	801a      	strh	r2, [r3, #0]
  char atCommand[len+1];
 8004216:	1832      	adds	r2, r6, r0
 8004218:	19d3      	adds	r3, r2, r7
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	3301      	adds	r3, #1
 800421e:	1e5a      	subs	r2, r3, #1
 8004220:	21a6      	movs	r1, #166	@ 0xa6
 8004222:	0089      	lsls	r1, r1, #2
 8004224:	1809      	adds	r1, r1, r0
 8004226:	19c9      	adds	r1, r1, r7
 8004228:	600a      	str	r2, [r1, #0]
 800422a:	001a      	movs	r2, r3
 800422c:	60ba      	str	r2, [r7, #8]
 800422e:	2200      	movs	r2, #0
 8004230:	60fa      	str	r2, [r7, #12]
 8004232:	68b8      	ldr	r0, [r7, #8]
 8004234:	68f9      	ldr	r1, [r7, #12]
 8004236:	0002      	movs	r2, r0
 8004238:	0f52      	lsrs	r2, r2, #29
 800423a:	000e      	movs	r6, r1
 800423c:	00f6      	lsls	r6, r6, #3
 800423e:	617e      	str	r6, [r7, #20]
 8004240:	697e      	ldr	r6, [r7, #20]
 8004242:	4316      	orrs	r6, r2
 8004244:	617e      	str	r6, [r7, #20]
 8004246:	0002      	movs	r2, r0
 8004248:	00d2      	lsls	r2, r2, #3
 800424a:	613a      	str	r2, [r7, #16]
 800424c:	001a      	movs	r2, r3
 800424e:	603a      	str	r2, [r7, #0]
 8004250:	2200      	movs	r2, #0
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	6838      	ldr	r0, [r7, #0]
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	0002      	movs	r2, r0
 800425a:	0f52      	lsrs	r2, r2, #29
 800425c:	000e      	movs	r6, r1
 800425e:	00f5      	lsls	r5, r6, #3
 8004260:	4315      	orrs	r5, r2
 8004262:	0002      	movs	r2, r0
 8004264:	00d4      	lsls	r4, r2, #3
 8004266:	3307      	adds	r3, #7
 8004268:	08db      	lsrs	r3, r3, #3
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	466a      	mov	r2, sp
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	469d      	mov	sp, r3
 8004272:	ab04      	add	r3, sp, #16
 8004274:	3300      	adds	r3, #0
 8004276:	21a5      	movs	r1, #165	@ 0xa5
 8004278:	0089      	lsls	r1, r1, #2
 800427a:	2018      	movs	r0, #24
 800427c:	180a      	adds	r2, r1, r0
 800427e:	19d2      	adds	r2, r2, r7
 8004280:	6013      	str	r3, [r2, #0]
  memset(atCommand, '\0', len+1);
 8004282:	4e24      	ldr	r6, [pc, #144]	@ (8004314 <SENDDATA+0x154>)
 8004284:	1832      	adds	r2, r6, r0
 8004286:	19d3      	adds	r3, r2, r7
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	3301      	adds	r3, #1
 800428c:	001a      	movs	r2, r3
 800428e:	000c      	movs	r4, r1
 8004290:	0005      	movs	r5, r0
 8004292:	1821      	adds	r1, r4, r0
 8004294:	19cb      	adds	r3, r1, r7
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2100      	movs	r1, #0
 800429a:	0018      	movs	r0, r3
 800429c:	f012 fb06 	bl	80168ac <memset>
  strncpy(atCommand, atCommandBuff, len);
 80042a0:	0028      	movs	r0, r5
 80042a2:	1832      	adds	r2, r6, r0
 80042a4:	19d3      	adds	r3, r2, r7
 80042a6:	881a      	ldrh	r2, [r3, #0]
 80042a8:	231c      	movs	r3, #28
 80042aa:	18f9      	adds	r1, r7, r3
 80042ac:	0005      	movs	r5, r0
 80042ae:	1963      	adds	r3, r4, r5
 80042b0:	19db      	adds	r3, r3, r7
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	0018      	movs	r0, r3
 80042b6:	f012 fb01 	bl	80168bc <strncpy>
  SetCommandBuffer(atCommand);
 80042ba:	1963      	adds	r3, r4, r5
 80042bc:	19db      	adds	r3, r3, r7
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	0018      	movs	r0, r3
 80042c2:	f7ff fb75 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80042c6:	0028      	movs	r0, r5
 80042c8:	1833      	adds	r3, r6, r0
 80042ca:	19db      	adds	r3, r3, r7
 80042cc:	881a      	ldrh	r2, [r3, #0]
 80042ce:	1823      	adds	r3, r4, r0
 80042d0:	19db      	adds	r3, r3, r7
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	0011      	movs	r1, r2
 80042d6:	0018      	movs	r0, r3
 80042d8:	f7ff fa26 	bl	8003728 <ESP_Send>
 80042dc:	1e03      	subs	r3, r0, #0
 80042de:	d001      	beq.n	80042e4 <SENDDATA+0x124>
    return true;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <SENDDATA+0x126>
  }
  else{
    return false;
 80042e4:	2300      	movs	r3, #0
 80042e6:	46c5      	mov	sp, r8
  }
}
 80042e8:	0018      	movs	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	23ae      	movs	r3, #174	@ 0xae
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	449d      	add	sp, r3
 80042f2:	bc80      	pop	{r7}
 80042f4:	46b8      	mov	r8, r7
 80042f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f8:	fffffd38 	.word	0xfffffd38
 80042fc:	20000674 	.word	0x20000674
 8004300:	200005f4 	.word	0x200005f4
 8004304:	080199e0 	.word	0x080199e0
 8004308:	200007f4 	.word	0x200007f4
 800430c:	20000774 	.word	0x20000774
 8004310:	200006f4 	.word	0x200006f4
 8004314:	0000029e 	.word	0x0000029e

08004318 <SLEEP>:
bool SLEEP(){
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 800431e:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <SLEEP+0x3c>)
 8004320:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	0018      	movs	r0, r3
 8004326:	f7ff fb43 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	0018      	movs	r0, r3
 800432e:	f7fb feeb 	bl	8000108 <strlen>
 8004332:	0003      	movs	r3, r0
 8004334:	b29a      	uxth	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	0011      	movs	r1, r2
 800433a:	0018      	movs	r0, r3
 800433c:	f7ff f9f4 	bl	8003728 <ESP_Send>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d001      	beq.n	8004348 <SLEEP+0x30>
    return true;
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <SLEEP+0x32>
  }
  else{
    return false;
 8004348:	2300      	movs	r3, #0
  }
}
 800434a:	0018      	movs	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	b002      	add	sp, #8
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			@ (mov r8, r8)
 8004354:	08019a00 	.word	0x08019a00

08004358 <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 8004358:	b5b0      	push	{r4, r5, r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	0002      	movs	r2, r0
 8004360:	1dfb      	adds	r3, r7, #7
 8004362:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004364:	4b4c      	ldr	r3, [pc, #304]	@ (8004498 <DMA_ProcessBuffer+0x140>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	b2da      	uxtb	r2, r3
 800436c:	210e      	movs	r1, #14
 800436e:	187b      	adds	r3, r7, r1
 8004370:	43d2      	mvns	r2, r2
 8004372:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 8004374:	200f      	movs	r0, #15
 8004376:	183b      	adds	r3, r7, r0
 8004378:	2203      	movs	r2, #3
 800437a:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 800437c:	4b47      	ldr	r3, [pc, #284]	@ (800449c <DMA_ProcessBuffer+0x144>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	187a      	adds	r2, r7, r1
 8004384:	7812      	ldrb	r2, [r2, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d129      	bne.n	80043de <DMA_ProcessBuffer+0x86>
      if(retry >4){
 800438a:	4b45      	ldr	r3, [pc, #276]	@ (80044a0 <DMA_ProcessBuffer+0x148>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b04      	cmp	r3, #4
 8004390:	d913      	bls.n	80043ba <DMA_ProcessBuffer+0x62>
        retry = 0;
 8004392:	4b43      	ldr	r3, [pc, #268]	@ (80044a0 <DMA_ProcessBuffer+0x148>)
 8004394:	2200      	movs	r2, #0
 8004396:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004398:	4b42      	ldr	r3, [pc, #264]	@ (80044a4 <DMA_ProcessBuffer+0x14c>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d107      	bne.n	80043b0 <DMA_ProcessBuffer+0x58>
 80043a0:	4b41      	ldr	r3, [pc, #260]	@ (80044a8 <DMA_ProcessBuffer+0x150>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <DMA_ProcessBuffer+0x58>
          status = RECEIVE_STATUS_UNPROGGED;
 80043a8:	183b      	adds	r3, r7, r0
 80043aa:	2207      	movs	r2, #7
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	e016      	b.n	80043de <DMA_ProcessBuffer+0x86>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 80043b0:	230f      	movs	r3, #15
 80043b2:	18fb      	adds	r3, r7, r3
 80043b4:	2206      	movs	r2, #6
 80043b6:	701a      	strb	r2, [r3, #0]
 80043b8:	e011      	b.n	80043de <DMA_ProcessBuffer+0x86>
        }
      }
     else{
       retry ++;
 80043ba:	4b39      	ldr	r3, [pc, #228]	@ (80044a0 <DMA_ProcessBuffer+0x148>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	3301      	adds	r3, #1
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	4b37      	ldr	r3, [pc, #220]	@ (80044a0 <DMA_ProcessBuffer+0x148>)
 80043c4:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80043c6:	f004 fec7 	bl	8009158 <HAL_GetTick>
 80043ca:	0003      	movs	r3, r0
 80043cc:	33f5      	adds	r3, #245	@ 0xf5
 80043ce:	33ff      	adds	r3, #255	@ 0xff
 80043d0:	001a      	movs	r2, r3
 80043d2:	4b36      	ldr	r3, [pc, #216]	@ (80044ac <DMA_ProcessBuffer+0x154>)
 80043d4:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 80043d6:	230f      	movs	r3, #15
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	2204      	movs	r2, #4
 80043dc:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 80043de:	4b2f      	ldr	r3, [pc, #188]	@ (800449c <DMA_ProcessBuffer+0x144>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	210e      	movs	r1, #14
 80043e6:	187a      	adds	r2, r7, r1
 80043e8:	7812      	ldrb	r2, [r2, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d048      	beq.n	8004480 <DMA_ProcessBuffer+0x128>
      retry = 0;
 80043ee:	4b2c      	ldr	r3, [pc, #176]	@ (80044a0 <DMA_ProcessBuffer+0x148>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 80043f4:	4b29      	ldr	r3, [pc, #164]	@ (800449c <DMA_ProcessBuffer+0x144>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	187a      	adds	r2, r7, r1
 80043fc:	7812      	ldrb	r2, [r2, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d917      	bls.n	8004432 <DMA_ProcessBuffer+0xda>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004402:	4b26      	ldr	r3, [pc, #152]	@ (800449c <DMA_ProcessBuffer+0x144>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	001a      	movs	r2, r3
 800440a:	4b29      	ldr	r3, [pc, #164]	@ (80044b0 <DMA_ProcessBuffer+0x158>)
 800440c:	18d0      	adds	r0, r2, r3
 800440e:	187b      	adds	r3, r7, r1
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	b29b      	uxth	r3, r3
 8004414:	4a21      	ldr	r2, [pc, #132]	@ (800449c <DMA_ProcessBuffer+0x144>)
 8004416:	7812      	ldrb	r2, [r2, #0]
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	b299      	uxth	r1, r3
 800441e:	230f      	movs	r3, #15
 8004420:	18fc      	adds	r4, r7, r3
 8004422:	1dfb      	adds	r3, r7, #7
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	001a      	movs	r2, r3
 8004428:	f7ff fb0c 	bl	8003a44 <ParseBuffer>
 800442c:	0003      	movs	r3, r0
 800442e:	7023      	strb	r3, [r4, #0]
 8004430:	e026      	b.n	8004480 <DMA_ProcessBuffer+0x128>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004432:	4b1a      	ldr	r3, [pc, #104]	@ (800449c <DMA_ProcessBuffer+0x144>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	001a      	movs	r2, r3
 800443a:	4b1d      	ldr	r3, [pc, #116]	@ (80044b0 <DMA_ProcessBuffer+0x158>)
 800443c:	18d0      	adds	r0, r2, r3
 800443e:	4b17      	ldr	r3, [pc, #92]	@ (800449c <DMA_ProcessBuffer+0x144>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	001a      	movs	r2, r3
 8004446:	23ff      	movs	r3, #255	@ 0xff
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	b299      	uxth	r1, r3
 800444c:	250f      	movs	r5, #15
 800444e:	197c      	adds	r4, r7, r5
 8004450:	1dfb      	adds	r3, r7, #7
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	001a      	movs	r2, r3
 8004456:	f7ff faf5 	bl	8003a44 <ParseBuffer>
 800445a:	0003      	movs	r3, r0
 800445c:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 800445e:	220e      	movs	r2, #14
 8004460:	18bb      	adds	r3, r7, r2
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00b      	beq.n	8004480 <DMA_ProcessBuffer+0x128>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004468:	18bb      	adds	r3, r7, r2
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b299      	uxth	r1, r3
 800446e:	197c      	adds	r4, r7, r5
 8004470:	1dfb      	adds	r3, r7, #7
 8004472:	781a      	ldrb	r2, [r3, #0]
 8004474:	4b0e      	ldr	r3, [pc, #56]	@ (80044b0 <DMA_ProcessBuffer+0x158>)
 8004476:	0018      	movs	r0, r3
 8004478:	f7ff fae4 	bl	8003a44 <ParseBuffer>
 800447c:	0003      	movs	r3, r0
 800447e:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 8004480:	4b06      	ldr	r3, [pc, #24]	@ (800449c <DMA_ProcessBuffer+0x144>)
 8004482:	220e      	movs	r2, #14
 8004484:	18ba      	adds	r2, r7, r2
 8004486:	7812      	ldrb	r2, [r2, #0]
 8004488:	701a      	strb	r2, [r3, #0]
    return status;
 800448a:	230f      	movs	r3, #15
 800448c:	18fb      	adds	r3, r7, r3
 800448e:	781b      	ldrb	r3, [r3, #0]
}
 8004490:	0018      	movs	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	b004      	add	sp, #16
 8004496:	bdb0      	pop	{r4, r5, r7, pc}
 8004498:	200027d8 	.word	0x200027d8
 800449c:	2000087f 	.word	0x2000087f
 80044a0:	20000884 	.word	0x20000884
 80044a4:	20000a8a 	.word	0x20000a8a
 80044a8:	20000002 	.word	0x20000002
 80044ac:	20000880 	.word	0x20000880
 80044b0:	200004d8 	.word	0x200004d8

080044b4 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	0002      	movs	r2, r0
 80044bc:	1dfb      	adds	r3, r7, #7
 80044be:	701a      	strb	r2, [r3, #0]
 80044c0:	1dbb      	adds	r3, r7, #6
 80044c2:	1c0a      	adds	r2, r1, #0
 80044c4:	701a      	strb	r2, [r3, #0]
  bool value = false;
 80044c6:	210f      	movs	r1, #15
 80044c8:	187b      	adds	r3, r7, r1
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 80044ce:	1dbb      	adds	r3, r7, #6
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d105      	bne.n	80044e2 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 80044d6:	187b      	adds	r3, r7, r1
 80044d8:	1dfa      	adds	r2, r7, #7
 80044da:	7812      	ldrb	r2, [r2, #0]
 80044dc:	4251      	negs	r1, r2
 80044de:	414a      	adcs	r2, r1
 80044e0:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 80044e2:	1dbb      	adds	r3, r7, #6
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d107      	bne.n	80044fa <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 80044ea:	230f      	movs	r3, #15
 80044ec:	18fb      	adds	r3, r7, r3
 80044ee:	1dfa      	adds	r2, r7, #7
 80044f0:	7812      	ldrb	r2, [r2, #0]
 80044f2:	3a02      	subs	r2, #2
 80044f4:	4251      	negs	r1, r2
 80044f6:	414a      	adcs	r2, r1
 80044f8:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 80044fa:	1dbb      	adds	r3, r7, #6
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d107      	bne.n	8004512 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004502:	230f      	movs	r3, #15
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	1dfa      	adds	r2, r7, #7
 8004508:	7812      	ldrb	r2, [r2, #0]
 800450a:	3a05      	subs	r2, #5
 800450c:	4251      	negs	r1, r2
 800450e:	414a      	adcs	r2, r1
 8004510:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004512:	230f      	movs	r3, #15
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	781b      	ldrb	r3, [r3, #0]
}
 8004518:	0018      	movs	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	b004      	add	sp, #16
 800451e:	bd80      	pop	{r7, pc}

08004520 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004520:	b590      	push	{r4, r7, lr}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	0002      	movs	r2, r0
 8004528:	1dfb      	adds	r3, r7, #7
 800452a:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 800452c:	230f      	movs	r3, #15
 800452e:	18fb      	adds	r3, r7, r3
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004534:	1dfb      	adds	r3, r7, #7
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b0e      	cmp	r3, #14
 800453a:	d900      	bls.n	800453e <AT_Send+0x1e>
 800453c:	e136      	b.n	80047ac <AT_Send+0x28c>
 800453e:	009a      	lsls	r2, r3, #2
 8004540:	4b9e      	ldr	r3, [pc, #632]	@ (80047bc <AT_Send+0x29c>)
 8004542:	18d3      	adds	r3, r2, r3
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004548:	4b9d      	ldr	r3, [pc, #628]	@ (80047c0 <AT_Send+0x2a0>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0018      	movs	r0, r3
 800454e:	f004 f9b5 	bl	80088bc <TimestampIsReached>
 8004552:	1e03      	subs	r3, r0, #0
 8004554:	d100      	bne.n	8004558 <AT_Send+0x38>
 8004556:	e128      	b.n	80047aa <AT_Send+0x28a>
    ATCommandSend = PollAwake();
 8004558:	230f      	movs	r3, #15
 800455a:	18fc      	adds	r4, r7, r3
 800455c:	f7ff fbb4 	bl	8003cc8 <PollAwake>
 8004560:	0003      	movs	r3, r0
 8004562:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004564:	f004 fdf8 	bl	8009158 <HAL_GetTick>
 8004568:	0003      	movs	r3, r0
 800456a:	3332      	adds	r3, #50	@ 0x32
 800456c:	001a      	movs	r2, r3
 800456e:	4b94      	ldr	r3, [pc, #592]	@ (80047c0 <AT_Send+0x2a0>)
 8004570:	601a      	str	r2, [r3, #0]
  }
  break;
 8004572:	e11a      	b.n	80047aa <AT_Send+0x28a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004574:	4a93      	ldr	r2, [pc, #588]	@ (80047c4 <AT_Send+0x2a4>)
 8004576:	4b94      	ldr	r3, [pc, #592]	@ (80047c8 <AT_Send+0x2a8>)
 8004578:	0019      	movs	r1, r3
 800457a:	2003      	movs	r0, #3
 800457c:	f004 f9f4 	bl	8008968 <CreateLine>
    ATCommandSend = RFPower();
 8004580:	230f      	movs	r3, #15
 8004582:	18fc      	adds	r4, r7, r3
 8004584:	f7ff fbc0 	bl	8003d08 <RFPower>
 8004588:	0003      	movs	r3, r0
 800458a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800458c:	f004 fde4 	bl	8009158 <HAL_GetTick>
 8004590:	0003      	movs	r3, r0
 8004592:	330a      	adds	r3, #10
 8004594:	001a      	movs	r2, r3
 8004596:	4b8a      	ldr	r3, [pc, #552]	@ (80047c0 <AT_Send+0x2a0>)
 8004598:	601a      	str	r2, [r3, #0]
    break;
 800459a:	e107      	b.n	80047ac <AT_Send+0x28c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 800459c:	4a8b      	ldr	r2, [pc, #556]	@ (80047cc <AT_Send+0x2ac>)
 800459e:	4b8a      	ldr	r3, [pc, #552]	@ (80047c8 <AT_Send+0x2a8>)
 80045a0:	0019      	movs	r1, r3
 80045a2:	2003      	movs	r0, #3
 80045a4:	f004 f9e0 	bl	8008968 <CreateLine>
    ATCommandSend = CheckRFPower();
 80045a8:	230f      	movs	r3, #15
 80045aa:	18fc      	adds	r4, r7, r3
 80045ac:	f7ff fbcc 	bl	8003d48 <CheckRFPower>
 80045b0:	0003      	movs	r3, r0
 80045b2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80045b4:	f004 fdd0 	bl	8009158 <HAL_GetTick>
 80045b8:	0003      	movs	r3, r0
 80045ba:	330a      	adds	r3, #10
 80045bc:	001a      	movs	r2, r3
 80045be:	4b80      	ldr	r3, [pc, #512]	@ (80047c0 <AT_Send+0x2a0>)
 80045c0:	601a      	str	r2, [r3, #0]
    break;
 80045c2:	e0f3      	b.n	80047ac <AT_Send+0x28c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 80045c4:	4a82      	ldr	r2, [pc, #520]	@ (80047d0 <AT_Send+0x2b0>)
 80045c6:	4b80      	ldr	r3, [pc, #512]	@ (80047c8 <AT_Send+0x2a8>)
 80045c8:	0019      	movs	r1, r3
 80045ca:	2003      	movs	r0, #3
 80045cc:	f004 f9cc 	bl	8008968 <CreateLine>
    ATCommandSend = ATRestore();
 80045d0:	230f      	movs	r3, #15
 80045d2:	18fc      	adds	r4, r7, r3
 80045d4:	f7ff fbd8 	bl	8003d88 <ATRestore>
 80045d8:	0003      	movs	r3, r0
 80045da:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80045dc:	f004 fdbc 	bl	8009158 <HAL_GetTick>
 80045e0:	0003      	movs	r3, r0
 80045e2:	3332      	adds	r3, #50	@ 0x32
 80045e4:	001a      	movs	r2, r3
 80045e6:	4b76      	ldr	r3, [pc, #472]	@ (80047c0 <AT_Send+0x2a0>)
 80045e8:	601a      	str	r2, [r3, #0]
    break;
 80045ea:	e0df      	b.n	80047ac <AT_Send+0x28c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 80045ec:	4a79      	ldr	r2, [pc, #484]	@ (80047d4 <AT_Send+0x2b4>)
 80045ee:	4b76      	ldr	r3, [pc, #472]	@ (80047c8 <AT_Send+0x2a8>)
 80045f0:	0019      	movs	r1, r3
 80045f2:	2003      	movs	r0, #3
 80045f4:	f004 f9b8 	bl	8008968 <CreateLine>
    ATCommandSend = CWINIT();
 80045f8:	230f      	movs	r3, #15
 80045fa:	18fc      	adds	r4, r7, r3
 80045fc:	f7ff fbe4 	bl	8003dc8 <CWINIT>
 8004600:	0003      	movs	r3, r0
 8004602:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004604:	f004 fda8 	bl	8009158 <HAL_GetTick>
 8004608:	0003      	movs	r3, r0
 800460a:	33f5      	adds	r3, #245	@ 0xf5
 800460c:	33ff      	adds	r3, #255	@ 0xff
 800460e:	001a      	movs	r2, r3
 8004610:	4b6b      	ldr	r3, [pc, #428]	@ (80047c0 <AT_Send+0x2a0>)
 8004612:	601a      	str	r2, [r3, #0]
    break;
 8004614:	e0ca      	b.n	80047ac <AT_Send+0x28c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004616:	4a70      	ldr	r2, [pc, #448]	@ (80047d8 <AT_Send+0x2b8>)
 8004618:	4b6b      	ldr	r3, [pc, #428]	@ (80047c8 <AT_Send+0x2a8>)
 800461a:	0019      	movs	r1, r3
 800461c:	2003      	movs	r0, #3
 800461e:	f004 f9a3 	bl	8008968 <CreateLine>
    ATCommandSend = CWMODE1();
 8004622:	230f      	movs	r3, #15
 8004624:	18fc      	adds	r4, r7, r3
 8004626:	f7ff fbef 	bl	8003e08 <CWMODE1>
 800462a:	0003      	movs	r3, r0
 800462c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800462e:	f004 fd93 	bl	8009158 <HAL_GetTick>
 8004632:	0003      	movs	r3, r0
 8004634:	330a      	adds	r3, #10
 8004636:	001a      	movs	r2, r3
 8004638:	4b61      	ldr	r3, [pc, #388]	@ (80047c0 <AT_Send+0x2a0>)
 800463a:	601a      	str	r2, [r3, #0]
    break;
 800463c:	e0b6      	b.n	80047ac <AT_Send+0x28c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 800463e:	4a67      	ldr	r2, [pc, #412]	@ (80047dc <AT_Send+0x2bc>)
 8004640:	4b61      	ldr	r3, [pc, #388]	@ (80047c8 <AT_Send+0x2a8>)
 8004642:	0019      	movs	r1, r3
 8004644:	2003      	movs	r0, #3
 8004646:	f004 f98f 	bl	8008968 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800464a:	230f      	movs	r3, #15
 800464c:	18fc      	adds	r4, r7, r3
 800464e:	f7ff fbfb 	bl	8003e48 <CWAUTOCONN>
 8004652:	0003      	movs	r3, r0
 8004654:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004656:	f004 fd7f 	bl	8009158 <HAL_GetTick>
 800465a:	0003      	movs	r3, r0
 800465c:	330a      	adds	r3, #10
 800465e:	001a      	movs	r2, r3
 8004660:	4b57      	ldr	r3, [pc, #348]	@ (80047c0 <AT_Send+0x2a0>)
 8004662:	601a      	str	r2, [r3, #0]
    break;
 8004664:	e0a2      	b.n	80047ac <AT_Send+0x28c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004666:	4a5e      	ldr	r2, [pc, #376]	@ (80047e0 <AT_Send+0x2c0>)
 8004668:	4b57      	ldr	r3, [pc, #348]	@ (80047c8 <AT_Send+0x2a8>)
 800466a:	0019      	movs	r1, r3
 800466c:	2003      	movs	r0, #3
 800466e:	f004 f97b 	bl	8008968 <CreateLine>
    ATCommandSend = CWJAP();
 8004672:	230f      	movs	r3, #15
 8004674:	18fc      	adds	r4, r7, r3
 8004676:	f7ff fc07 	bl	8003e88 <CWJAP>
 800467a:	0003      	movs	r3, r0
 800467c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800467e:	f004 fd6b 	bl	8009158 <HAL_GetTick>
 8004682:	0003      	movs	r3, r0
 8004684:	3332      	adds	r3, #50	@ 0x32
 8004686:	001a      	movs	r2, r3
 8004688:	4b4d      	ldr	r3, [pc, #308]	@ (80047c0 <AT_Send+0x2a0>)
 800468a:	601a      	str	r2, [r3, #0]
    break;
 800468c:	e08e      	b.n	80047ac <AT_Send+0x28c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 800468e:	4a55      	ldr	r2, [pc, #340]	@ (80047e4 <AT_Send+0x2c4>)
 8004690:	4b4d      	ldr	r3, [pc, #308]	@ (80047c8 <AT_Send+0x2a8>)
 8004692:	0019      	movs	r1, r3
 8004694:	2003      	movs	r0, #3
 8004696:	f004 f967 	bl	8008968 <CreateLine>
    ATCommandSend = CWMODE3();
 800469a:	230f      	movs	r3, #15
 800469c:	18fc      	adds	r4, r7, r3
 800469e:	f7ff fc73 	bl	8003f88 <CWMODE3>
 80046a2:	0003      	movs	r3, r0
 80046a4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046a6:	f004 fd57 	bl	8009158 <HAL_GetTick>
 80046aa:	0003      	movs	r3, r0
 80046ac:	330a      	adds	r3, #10
 80046ae:	001a      	movs	r2, r3
 80046b0:	4b43      	ldr	r3, [pc, #268]	@ (80047c0 <AT_Send+0x2a0>)
 80046b2:	601a      	str	r2, [r3, #0]
    break;
 80046b4:	e07a      	b.n	80047ac <AT_Send+0x28c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80046b6:	4a4c      	ldr	r2, [pc, #304]	@ (80047e8 <AT_Send+0x2c8>)
 80046b8:	4b43      	ldr	r3, [pc, #268]	@ (80047c8 <AT_Send+0x2a8>)
 80046ba:	0019      	movs	r1, r3
 80046bc:	2003      	movs	r0, #3
 80046be:	f004 f953 	bl	8008968 <CreateLine>
    ATCommandSend = CWSAP();
 80046c2:	230f      	movs	r3, #15
 80046c4:	18fc      	adds	r4, r7, r3
 80046c6:	f7ff fc7f 	bl	8003fc8 <CWSAP>
 80046ca:	0003      	movs	r3, r0
 80046cc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046ce:	f004 fd43 	bl	8009158 <HAL_GetTick>
 80046d2:	0003      	movs	r3, r0
 80046d4:	330a      	adds	r3, #10
 80046d6:	001a      	movs	r2, r3
 80046d8:	4b39      	ldr	r3, [pc, #228]	@ (80047c0 <AT_Send+0x2a0>)
 80046da:	601a      	str	r2, [r3, #0]
    break;
 80046dc:	e066      	b.n	80047ac <AT_Send+0x28c>

  case AT_CIPMUX:
    Debug("SET multiple communication channels");
 80046de:	4a43      	ldr	r2, [pc, #268]	@ (80047ec <AT_Send+0x2cc>)
 80046e0:	4b39      	ldr	r3, [pc, #228]	@ (80047c8 <AT_Send+0x2a8>)
 80046e2:	0019      	movs	r1, r3
 80046e4:	2003      	movs	r0, #3
 80046e6:	f004 f93f 	bl	8008968 <CreateLine>
    ATCommandSend = CIPMUX();
 80046ea:	230f      	movs	r3, #15
 80046ec:	18fc      	adds	r4, r7, r3
 80046ee:	f7ff fc8b 	bl	8004008 <CIPMUX>
 80046f2:	0003      	movs	r3, r0
 80046f4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046f6:	f004 fd2f 	bl	8009158 <HAL_GetTick>
 80046fa:	0003      	movs	r3, r0
 80046fc:	330a      	adds	r3, #10
 80046fe:	001a      	movs	r2, r3
 8004700:	4b2f      	ldr	r3, [pc, #188]	@ (80047c0 <AT_Send+0x2a0>)
 8004702:	601a      	str	r2, [r3, #0]
    break;
 8004704:	e052      	b.n	80047ac <AT_Send+0x28c>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 8004706:	4a37      	ldr	r2, [pc, #220]	@ (80047e4 <AT_Send+0x2c4>)
 8004708:	4b2f      	ldr	r3, [pc, #188]	@ (80047c8 <AT_Send+0x2a8>)
 800470a:	0019      	movs	r1, r3
 800470c:	2003      	movs	r0, #3
 800470e:	f004 f92b 	bl	8008968 <CreateLine>
    ATCommandSend = WEBSERVER();
 8004712:	230f      	movs	r3, #15
 8004714:	18fc      	adds	r4, r7, r3
 8004716:	f7ff fc97 	bl	8004048 <WEBSERVER>
 800471a:	0003      	movs	r3, r0
 800471c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800471e:	f004 fd1b 	bl	8009158 <HAL_GetTick>
 8004722:	0003      	movs	r3, r0
 8004724:	330a      	adds	r3, #10
 8004726:	001a      	movs	r2, r3
 8004728:	4b25      	ldr	r3, [pc, #148]	@ (80047c0 <AT_Send+0x2a0>)
 800472a:	601a      	str	r2, [r3, #0]
    break;
 800472c:	e03e      	b.n	80047ac <AT_Send+0x28c>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 800472e:	4a2d      	ldr	r2, [pc, #180]	@ (80047e4 <AT_Send+0x2c4>)
 8004730:	4b25      	ldr	r3, [pc, #148]	@ (80047c8 <AT_Send+0x2a8>)
 8004732:	0019      	movs	r1, r3
 8004734:	2003      	movs	r0, #3
 8004736:	f004 f917 	bl	8008968 <CreateLine>
    ATCommandSend = HTTPCPOST();
 800473a:	230f      	movs	r3, #15
 800473c:	18fc      	adds	r4, r7, r3
 800473e:	f7ff fca3 	bl	8004088 <HTTPCPOST>
 8004742:	0003      	movs	r3, r0
 8004744:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004746:	f004 fd07 	bl	8009158 <HAL_GetTick>
 800474a:	0003      	movs	r3, r0
 800474c:	33f5      	adds	r3, #245	@ 0xf5
 800474e:	33ff      	adds	r3, #255	@ 0xff
 8004750:	001a      	movs	r2, r3
 8004752:	4b1b      	ldr	r3, [pc, #108]	@ (80047c0 <AT_Send+0x2a0>)
 8004754:	601a      	str	r2, [r3, #0]
    break;
 8004756:	e029      	b.n	80047ac <AT_Send+0x28c>

  case AT_SENDDATA:
    Debug("Send the data");
 8004758:	4a25      	ldr	r2, [pc, #148]	@ (80047f0 <AT_Send+0x2d0>)
 800475a:	4b1b      	ldr	r3, [pc, #108]	@ (80047c8 <AT_Send+0x2a8>)
 800475c:	0019      	movs	r1, r3
 800475e:	2003      	movs	r0, #3
 8004760:	f004 f902 	bl	8008968 <CreateLine>
    ATCommandSend = SENDDATA();
 8004764:	230f      	movs	r3, #15
 8004766:	18fc      	adds	r4, r7, r3
 8004768:	f7ff fd2a 	bl	80041c0 <SENDDATA>
 800476c:	0003      	movs	r3, r0
 800476e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004770:	f004 fcf2 	bl	8009158 <HAL_GetTick>
 8004774:	0003      	movs	r3, r0
 8004776:	33f5      	adds	r3, #245	@ 0xf5
 8004778:	33ff      	adds	r3, #255	@ 0xff
 800477a:	001a      	movs	r2, r3
 800477c:	4b10      	ldr	r3, [pc, #64]	@ (80047c0 <AT_Send+0x2a0>)
 800477e:	601a      	str	r2, [r3, #0]
    break;
 8004780:	e014      	b.n	80047ac <AT_Send+0x28c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004782:	4a1c      	ldr	r2, [pc, #112]	@ (80047f4 <AT_Send+0x2d4>)
 8004784:	4b10      	ldr	r3, [pc, #64]	@ (80047c8 <AT_Send+0x2a8>)
 8004786:	0019      	movs	r1, r3
 8004788:	2003      	movs	r0, #3
 800478a:	f004 f8ed 	bl	8008968 <CreateLine>
    ATCommandSend = SLEEP();
 800478e:	230f      	movs	r3, #15
 8004790:	18fc      	adds	r4, r7, r3
 8004792:	f7ff fdc1 	bl	8004318 <SLEEP>
 8004796:	0003      	movs	r3, r0
 8004798:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800479a:	f004 fcdd 	bl	8009158 <HAL_GetTick>
 800479e:	0003      	movs	r3, r0
 80047a0:	330a      	adds	r3, #10
 80047a2:	001a      	movs	r2, r3
 80047a4:	4b06      	ldr	r3, [pc, #24]	@ (80047c0 <AT_Send+0x2a0>)
 80047a6:	601a      	str	r2, [r3, #0]
    break;
 80047a8:	e000      	b.n	80047ac <AT_Send+0x28c>
  break;
 80047aa:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80047ac:	230f      	movs	r3, #15
 80047ae:	18fb      	adds	r3, r7, r3
 80047b0:	781b      	ldrb	r3, [r3, #0]
}
 80047b2:	0018      	movs	r0, r3
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b005      	add	sp, #20
 80047b8:	bd90      	pop	{r4, r7, pc}
 80047ba:	46c0      	nop			@ (mov r8, r8)
 80047bc:	0801a174 	.word	0x0801a174
 80047c0:	20000880 	.word	0x20000880
 80047c4:	08019a10 	.word	0x08019a10
 80047c8:	080196c0 	.word	0x080196c0
 80047cc:	08019a24 	.word	0x08019a24
 80047d0:	08019a38 	.word	0x08019a38
 80047d4:	08019a48 	.word	0x08019a48
 80047d8:	08019a5c 	.word	0x08019a5c
 80047dc:	08019a74 	.word	0x08019a74
 80047e0:	08019a8c 	.word	0x08019a8c
 80047e4:	08019aa0 	.word	0x08019aa0
 80047e8:	08019abc 	.word	0x08019abc
 80047ec:	08019ad8 	.word	0x08019ad8
 80047f0:	08019afc 	.word	0x08019afc
 80047f4:	08019b0c 	.word	0x08019b0c

080047f8 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80047f8:	b590      	push	{r4, r7, lr}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80047fe:	1dfb      	adds	r3, r7, #7
 8004800:	2200      	movs	r2, #0
 8004802:	701a      	strb	r2, [r3, #0]
  static RECEIVE_STATUS ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004804:	4b79      	ldr	r3, [pc, #484]	@ (80049ec <ESP_WakeTest+0x1f4>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b05      	cmp	r3, #5
 800480a:	d900      	bls.n	800480e <ESP_WakeTest+0x16>
 800480c:	e0e9      	b.n	80049e2 <ESP_WakeTest+0x1ea>
 800480e:	009a      	lsls	r2, r3, #2
 8004810:	4b77      	ldr	r3, [pc, #476]	@ (80049f0 <ESP_WakeTest+0x1f8>)
 8004812:	18d3      	adds	r3, r2, r3
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8004818:	4b76      	ldr	r3, [pc, #472]	@ (80049f4 <ESP_WakeTest+0x1fc>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2201      	movs	r2, #1
 800481e:	4053      	eors	r3, r2
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d03a      	beq.n	800489c <ESP_WakeTest+0xa4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004826:	2380      	movs	r3, #128	@ 0x80
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	4873      	ldr	r0, [pc, #460]	@ (80049f8 <ESP_WakeTest+0x200>)
 800482c:	2200      	movs	r2, #0
 800482e:	0019      	movs	r1, r3
 8004830:	f005 fe28 	bl	800a484 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8004834:	23fa      	movs	r3, #250	@ 0xfa
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	0018      	movs	r0, r3
 800483a:	f004 fc97 	bl	800916c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800483e:	2380      	movs	r3, #128	@ 0x80
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	486d      	ldr	r0, [pc, #436]	@ (80049f8 <ESP_WakeTest+0x200>)
 8004844:	2201      	movs	r2, #1
 8004846:	0019      	movs	r1, r3
 8004848:	f005 fe1c 	bl	800a484 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 800484c:	23fa      	movs	r3, #250	@ 0xfa
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	0018      	movs	r0, r3
 8004852:	f004 fc8b 	bl	800916c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004856:	4b69      	ldr	r3, [pc, #420]	@ (80049fc <ESP_WakeTest+0x204>)
 8004858:	2200      	movs	r2, #0
 800485a:	2101      	movs	r1, #1
 800485c:	0018      	movs	r0, r3
 800485e:	f005 fe11 	bl	800a484 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8004862:	2064      	movs	r0, #100	@ 0x64
 8004864:	f004 fc82 	bl	800916c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004868:	4b64      	ldr	r3, [pc, #400]	@ (80049fc <ESP_WakeTest+0x204>)
 800486a:	2201      	movs	r2, #1
 800486c:	2102      	movs	r1, #2
 800486e:	0018      	movs	r0, r3
 8004870:	f005 fe08 	bl	800a484 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8004874:	2064      	movs	r0, #100	@ 0x64
 8004876:	f004 fc79 	bl	800916c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800487a:	4b60      	ldr	r3, [pc, #384]	@ (80049fc <ESP_WakeTest+0x204>)
 800487c:	2201      	movs	r2, #1
 800487e:	2101      	movs	r1, #1
 8004880:	0018      	movs	r0, r3
 8004882:	f005 fdff 	bl	800a484 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004886:	f004 fc67 	bl	8009158 <HAL_GetTick>
 800488a:	0003      	movs	r3, r0
 800488c:	22af      	movs	r2, #175	@ 0xaf
 800488e:	0092      	lsls	r2, r2, #2
 8004890:	189a      	adds	r2, r3, r2
 8004892:	4b5b      	ldr	r3, [pc, #364]	@ (8004a00 <ESP_WakeTest+0x208>)
 8004894:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004896:	4b57      	ldr	r3, [pc, #348]	@ (80049f4 <ESP_WakeTest+0x1fc>)
 8004898:	2201      	movs	r2, #1
 800489a:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800489c:	4b59      	ldr	r3, [pc, #356]	@ (8004a04 <ESP_WakeTest+0x20c>)
 800489e:	21ff      	movs	r1, #255	@ 0xff
 80048a0:	0018      	movs	r0, r3
 80048a2:	f7fe ff6b 	bl	800377c <ESP_Receive>
 80048a6:	1e03      	subs	r3, r0, #0
 80048a8:	d100      	bne.n	80048ac <ESP_WakeTest+0xb4>
 80048aa:	e095      	b.n	80049d8 <ESP_WakeTest+0x1e0>
        TestState = ESP_TEST_SEND;
 80048ac:	4b4f      	ldr	r3, [pc, #316]	@ (80049ec <ESP_WakeTest+0x1f4>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80048b2:	e091      	b.n	80049d8 <ESP_WakeTest+0x1e0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 80048b4:	4b52      	ldr	r3, [pc, #328]	@ (8004a00 <ESP_WakeTest+0x208>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	0018      	movs	r0, r3
 80048ba:	f003 ffff 	bl	80088bc <TimestampIsReached>
 80048be:	1e03      	subs	r3, r0, #0
 80048c0:	d100      	bne.n	80048c4 <ESP_WakeTest+0xcc>
 80048c2:	e08b      	b.n	80049dc <ESP_WakeTest+0x1e4>
        ATSend = AT_Send(ATCommand);
 80048c4:	4b50      	ldr	r3, [pc, #320]	@ (8004a08 <ESP_WakeTest+0x210>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	1dfc      	adds	r4, r7, #7
 80048ca:	0018      	movs	r0, r3
 80048cc:	f7ff fe28 	bl	8004520 <AT_Send>
 80048d0:	0003      	movs	r3, r0
 80048d2:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80048d4:	1dfb      	adds	r3, r7, #7
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d100      	bne.n	80048de <ESP_WakeTest+0xe6>
 80048dc:	e07e      	b.n	80049dc <ESP_WakeTest+0x1e4>
          TestState = ESP_TEST_RECEIVE;
 80048de:	4b43      	ldr	r3, [pc, #268]	@ (80049ec <ESP_WakeTest+0x1f4>)
 80048e0:	2202      	movs	r2, #2
 80048e2:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80048e4:	e07a      	b.n	80049dc <ESP_WakeTest+0x1e4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 80048e6:	4b46      	ldr	r3, [pc, #280]	@ (8004a00 <ESP_WakeTest+0x208>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	0018      	movs	r0, r3
 80048ec:	f003 ffe6 	bl	80088bc <TimestampIsReached>
 80048f0:	1e03      	subs	r3, r0, #0
 80048f2:	d100      	bne.n	80048f6 <ESP_WakeTest+0xfe>
 80048f4:	e074      	b.n	80049e0 <ESP_WakeTest+0x1e8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80048f6:	4b45      	ldr	r3, [pc, #276]	@ (8004a0c <ESP_WakeTest+0x214>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	0018      	movs	r0, r3
 80048fc:	f7ff fd2c 	bl	8004358 <DMA_ProcessBuffer>
 8004900:	0003      	movs	r3, r0
 8004902:	001a      	movs	r2, r3
 8004904:	4b42      	ldr	r3, [pc, #264]	@ (8004a10 <ESP_WakeTest+0x218>)
 8004906:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004908:	4b41      	ldr	r3, [pc, #260]	@ (8004a10 <ESP_WakeTest+0x218>)
 800490a:	781a      	ldrb	r2, [r3, #0]
 800490c:	4b3f      	ldr	r3, [pc, #252]	@ (8004a0c <ESP_WakeTest+0x214>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	1dbc      	adds	r4, r7, #6
 8004912:	0019      	movs	r1, r3
 8004914:	0010      	movs	r0, r2
 8004916:	f7ff fdcd 	bl	80044b4 <ATCompare>
 800491a:	0003      	movs	r3, r0
 800491c:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 800491e:	4b3c      	ldr	r3, [pc, #240]	@ (8004a10 <ESP_WakeTest+0x218>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d102      	bne.n	800492c <ESP_WakeTest+0x134>
          TestState = ESP_TEST_SEND;
 8004926:	4b31      	ldr	r3, [pc, #196]	@ (80049ec <ESP_WakeTest+0x1f4>)
 8004928:	2201      	movs	r2, #1
 800492a:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 800492c:	4b38      	ldr	r3, [pc, #224]	@ (8004a10 <ESP_WakeTest+0x218>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b07      	cmp	r3, #7
 8004932:	d104      	bne.n	800493e <ESP_WakeTest+0x146>
          StartProg();
 8004934:	f7ff f852 	bl	80039dc <StartProg>
          TestState = ESP_TEST_BOOT;
 8004938:	4b2c      	ldr	r3, [pc, #176]	@ (80049ec <ESP_WakeTest+0x1f4>)
 800493a:	2205      	movs	r2, #5
 800493c:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800493e:	4b34      	ldr	r3, [pc, #208]	@ (8004a10 <ESP_WakeTest+0x218>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b03      	cmp	r3, #3
 8004944:	d109      	bne.n	800495a <ESP_WakeTest+0x162>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004946:	f004 fc07 	bl	8009158 <HAL_GetTick>
 800494a:	0003      	movs	r3, r0
 800494c:	3332      	adds	r3, #50	@ 0x32
 800494e:	001a      	movs	r2, r3
 8004950:	4b2b      	ldr	r3, [pc, #172]	@ (8004a00 <ESP_WakeTest+0x208>)
 8004952:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004954:	4b25      	ldr	r3, [pc, #148]	@ (80049ec <ESP_WakeTest+0x1f4>)
 8004956:	2201      	movs	r2, #1
 8004958:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 800495a:	1dbb      	adds	r3, r7, #6
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d03e      	beq.n	80049e0 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_VALIDATE;
 8004962:	4b22      	ldr	r3, [pc, #136]	@ (80049ec <ESP_WakeTest+0x1f4>)
 8004964:	2203      	movs	r2, #3
 8004966:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004968:	e03a      	b.n	80049e0 <ESP_WakeTest+0x1e8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = 4000;
 800496a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a14 <ESP_WakeTest+0x21c>)
 800496c:	22fa      	movs	r2, #250	@ 0xfa
 800496e:	0112      	lsls	r2, r2, #4
 8004970:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 0;
 8004972:	4b28      	ldr	r3, [pc, #160]	@ (8004a14 <ESP_WakeTest+0x21c>)
 8004974:	2200      	movs	r2, #0
 8004976:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8004978:	4b26      	ldr	r3, [pc, #152]	@ (8004a14 <ESP_WakeTest+0x21c>)
 800497a:	22fa      	movs	r2, #250	@ 0xfa
 800497c:	0112      	lsls	r2, r2, #4
 800497e:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8004980:	4b1a      	ldr	r3, [pc, #104]	@ (80049ec <ESP_WakeTest+0x1f4>)
 8004982:	2204      	movs	r2, #4
 8004984:	701a      	strb	r2, [r3, #0]

      break;
 8004986:	e02c      	b.n	80049e2 <ESP_WakeTest+0x1ea>

    case ESP_TEST_DEINIT:
      testRound = false;
 8004988:	4b23      	ldr	r3, [pc, #140]	@ (8004a18 <ESP_WakeTest+0x220>)
 800498a:	2200      	movs	r2, #0
 800498c:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800498e:	4b19      	ldr	r3, [pc, #100]	@ (80049f4 <ESP_WakeTest+0x1fc>)
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004994:	4b19      	ldr	r3, [pc, #100]	@ (80049fc <ESP_WakeTest+0x204>)
 8004996:	2200      	movs	r2, #0
 8004998:	2101      	movs	r1, #1
 800499a:	0018      	movs	r0, r3
 800499c:	f005 fd72 	bl	800a484 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80049a0:	2380      	movs	r3, #128	@ 0x80
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	4814      	ldr	r0, [pc, #80]	@ (80049f8 <ESP_WakeTest+0x200>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	0019      	movs	r1, r3
 80049aa:	f005 fd6b 	bl	800a484 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80049ae:	4b13      	ldr	r3, [pc, #76]	@ (80049fc <ESP_WakeTest+0x204>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	2102      	movs	r1, #2
 80049b4:	0018      	movs	r0, r3
 80049b6:	f005 fd65 	bl	800a484 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 80049ba:	f001 fbf1 	bl	80061a0 <SetESPMeasurementDone>

      break;
 80049be:	e010      	b.n	80049e2 <ESP_WakeTest+0x1ea>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 80049c0:	4b14      	ldr	r3, [pc, #80]	@ (8004a14 <ESP_WakeTest+0x21c>)
 80049c2:	22fa      	movs	r2, #250	@ 0xfa
 80049c4:	0112      	lsls	r2, r2, #4
 80049c6:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 80049c8:	4b12      	ldr	r3, [pc, #72]	@ (8004a14 <ESP_WakeTest+0x21c>)
 80049ca:	22fa      	movs	r2, #250	@ 0xfa
 80049cc:	0112      	lsls	r2, r2, #4
 80049ce:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 80049d0:	4b10      	ldr	r3, [pc, #64]	@ (8004a14 <ESP_WakeTest+0x21c>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 80049d6:	e004      	b.n	80049e2 <ESP_WakeTest+0x1ea>
      break;
 80049d8:	46c0      	nop			@ (mov r8, r8)
 80049da:	e002      	b.n	80049e2 <ESP_WakeTest+0x1ea>
      break;
 80049dc:	46c0      	nop			@ (mov r8, r8)
 80049de:	e000      	b.n	80049e2 <ESP_WakeTest+0x1ea>
      break;
 80049e0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80049e2:	46c0      	nop			@ (mov r8, r8)
 80049e4:	46bd      	mov	sp, r7
 80049e6:	b003      	add	sp, #12
 80049e8:	bd90      	pop	{r4, r7, pc}
 80049ea:	46c0      	nop			@ (mov r8, r8)
 80049ec:	20000a8c 	.word	0x20000a8c
 80049f0:	0801a1b0 	.word	0x0801a1b0
 80049f4:	200005d7 	.word	0x200005d7
 80049f8:	50000800 	.word	0x50000800
 80049fc:	50001c00 	.word	0x50001c00
 8004a00:	20000880 	.word	0x20000880
 8004a04:	200004d8 	.word	0x200004d8
 8004a08:	20000a8a 	.word	0x20000a8a
 8004a0c:	20000a89 	.word	0x20000a89
 8004a10:	20000103 	.word	0x20000103
 8004a14:	40000400 	.word	0x40000400
 8004a18:	20000002 	.word	0x20000002

08004a1c <ESP_Upkeep>:

void ESP_Upkeep(void) {
 8004a1c:	b590      	push	{r4, r7, lr}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004a22:	1dfb      	adds	r3, r7, #7
 8004a24:	2200      	movs	r2, #0
 8004a26:	701a      	strb	r2, [r3, #0]
  static RECEIVE_STATUS ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (EspState) {
 8004a28:	4be0      	ldr	r3, [pc, #896]	@ (8004dac <ESP_Upkeep+0x390>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b0b      	cmp	r3, #11
 8004a2e:	d900      	bls.n	8004a32 <ESP_Upkeep+0x16>
 8004a30:	e1b5      	b.n	8004d9e <ESP_Upkeep+0x382>
 8004a32:	009a      	lsls	r2, r3, #2
 8004a34:	4bde      	ldr	r3, [pc, #888]	@ (8004db0 <ESP_Upkeep+0x394>)
 8004a36:	18d3      	adds	r3, r2, r3
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004a3c:	4bdb      	ldr	r3, [pc, #876]	@ (8004dac <ESP_Upkeep+0x390>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	701a      	strb	r2, [r3, #0]
      break;
 8004a42:	e1ee      	b.n	8004e22 <ESP_Upkeep+0x406>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8004a44:	4bdb      	ldr	r3, [pc, #876]	@ (8004db4 <ESP_Upkeep+0x398>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	4053      	eors	r3, r2
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d03a      	beq.n	8004ac8 <ESP_Upkeep+0xac>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004a52:	2380      	movs	r3, #128	@ 0x80
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	48d8      	ldr	r0, [pc, #864]	@ (8004db8 <ESP_Upkeep+0x39c>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	0019      	movs	r1, r3
 8004a5c:	f005 fd12 	bl	800a484 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8004a60:	23fa      	movs	r3, #250	@ 0xfa
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	0018      	movs	r0, r3
 8004a66:	f004 fb81 	bl	800916c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004a6a:	2380      	movs	r3, #128	@ 0x80
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	48d2      	ldr	r0, [pc, #840]	@ (8004db8 <ESP_Upkeep+0x39c>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	0019      	movs	r1, r3
 8004a74:	f005 fd06 	bl	800a484 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8004a78:	23fa      	movs	r3, #250	@ 0xfa
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f004 fb75 	bl	800916c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004a82:	4bce      	ldr	r3, [pc, #824]	@ (8004dbc <ESP_Upkeep+0x3a0>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	2101      	movs	r1, #1
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f005 fcfb 	bl	800a484 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8004a8e:	2064      	movs	r0, #100	@ 0x64
 8004a90:	f004 fb6c 	bl	800916c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004a94:	4bc9      	ldr	r3, [pc, #804]	@ (8004dbc <ESP_Upkeep+0x3a0>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	2102      	movs	r1, #2
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f005 fcf2 	bl	800a484 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8004aa0:	2064      	movs	r0, #100	@ 0x64
 8004aa2:	f004 fb63 	bl	800916c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004aa6:	4bc5      	ldr	r3, [pc, #788]	@ (8004dbc <ESP_Upkeep+0x3a0>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	2101      	movs	r1, #1
 8004aac:	0018      	movs	r0, r3
 8004aae:	f005 fce9 	bl	800a484 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004ab2:	f004 fb51 	bl	8009158 <HAL_GetTick>
 8004ab6:	0003      	movs	r3, r0
 8004ab8:	22af      	movs	r2, #175	@ 0xaf
 8004aba:	0092      	lsls	r2, r2, #2
 8004abc:	189a      	adds	r2, r3, r2
 8004abe:	4bc0      	ldr	r3, [pc, #768]	@ (8004dc0 <ESP_Upkeep+0x3a4>)
 8004ac0:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004ac2:	4bbc      	ldr	r3, [pc, #752]	@ (8004db4 <ESP_Upkeep+0x398>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004ac8:	4bbe      	ldr	r3, [pc, #760]	@ (8004dc4 <ESP_Upkeep+0x3a8>)
 8004aca:	21ff      	movs	r1, #255	@ 0xff
 8004acc:	0018      	movs	r0, r3
 8004ace:	f7fe fe55 	bl	800377c <ESP_Receive>
 8004ad2:	1e03      	subs	r3, r0, #0
 8004ad4:	d100      	bne.n	8004ad8 <ESP_Upkeep+0xbc>
 8004ad6:	e199      	b.n	8004e0c <ESP_Upkeep+0x3f0>
        EspState = ESP_STATE_MODE_SELECT;
 8004ad8:	4bb4      	ldr	r3, [pc, #720]	@ (8004dac <ESP_Upkeep+0x390>)
 8004ada:	220b      	movs	r2, #11
 8004adc:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004ade:	e195      	b.n	8004e0c <ESP_Upkeep+0x3f0>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 10);
 8004ae0:	4bb9      	ldr	r3, [pc, #740]	@ (8004dc8 <ESP_Upkeep+0x3ac>)
 8004ae2:	220a      	movs	r2, #10
 8004ae4:	210f      	movs	r1, #15
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f011 fee0 	bl	80168ac <memset>
      if(!InitIsDone || WifiReset){
 8004aec:	4bb7      	ldr	r3, [pc, #732]	@ (8004dcc <ESP_Upkeep+0x3b0>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2201      	movs	r2, #1
 8004af2:	4053      	eors	r3, r2
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d103      	bne.n	8004b02 <ESP_Upkeep+0xe6>
 8004afa:	4bb5      	ldr	r3, [pc, #724]	@ (8004dd0 <ESP_Upkeep+0x3b4>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d016      	beq.n	8004b30 <ESP_Upkeep+0x114>
        memcpy(ATCommandArray, AT_INIT, 8);
 8004b02:	4bb1      	ldr	r3, [pc, #708]	@ (8004dc8 <ESP_Upkeep+0x3ac>)
 8004b04:	4ab3      	ldr	r2, [pc, #716]	@ (8004dd4 <ESP_Upkeep+0x3b8>)
 8004b06:	ca03      	ldmia	r2!, {r0, r1}
 8004b08:	c303      	stmia	r3!, {r0, r1}
        EspState = ESP_STATE_SEND;
 8004b0a:	4ba8      	ldr	r3, [pc, #672]	@ (8004dac <ESP_Upkeep+0x390>)
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004b10:	4bb1      	ldr	r3, [pc, #708]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8004b16:	4bb1      	ldr	r3, [pc, #708]	@ (8004ddc <ESP_Upkeep+0x3c0>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004b1c:	4bae      	ldr	r3, [pc, #696]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	001a      	movs	r2, r3
 8004b22:	4ba9      	ldr	r3, [pc, #676]	@ (8004dc8 <ESP_Upkeep+0x3ac>)
 8004b24:	5c9a      	ldrb	r2, [r3, r2]
 8004b26:	4bae      	ldr	r3, [pc, #696]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004b28:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004b2a:	4bae      	ldr	r3, [pc, #696]	@ (8004de4 <ESP_Upkeep+0x3c8>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8004b30:	4ba6      	ldr	r3, [pc, #664]	@ (8004dcc <ESP_Upkeep+0x3b0>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01f      	beq.n	8004b78 <ESP_Upkeep+0x15c>
 8004b38:	4bab      	ldr	r3, [pc, #684]	@ (8004de8 <ESP_Upkeep+0x3cc>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	4053      	eors	r3, r2
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d018      	beq.n	8004b78 <ESP_Upkeep+0x15c>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8004b46:	4ba0      	ldr	r3, [pc, #640]	@ (8004dc8 <ESP_Upkeep+0x3ac>)
 8004b48:	4aa8      	ldr	r2, [pc, #672]	@ (8004dec <ESP_Upkeep+0x3d0>)
 8004b4a:	6811      	ldr	r1, [r2, #0]
 8004b4c:	6019      	str	r1, [r3, #0]
 8004b4e:	8892      	ldrh	r2, [r2, #4]
 8004b50:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004b52:	4b96      	ldr	r3, [pc, #600]	@ (8004dac <ESP_Upkeep+0x390>)
 8004b54:	2204      	movs	r2, #4
 8004b56:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004b58:	4b9f      	ldr	r3, [pc, #636]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8004b5e:	4b9f      	ldr	r3, [pc, #636]	@ (8004ddc <ESP_Upkeep+0x3c0>)
 8004b60:	2201      	movs	r2, #1
 8004b62:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004b64:	4b9c      	ldr	r3, [pc, #624]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	001a      	movs	r2, r3
 8004b6a:	4b97      	ldr	r3, [pc, #604]	@ (8004dc8 <ESP_Upkeep+0x3ac>)
 8004b6c:	5c9a      	ldrb	r2, [r3, r2]
 8004b6e:	4b9c      	ldr	r3, [pc, #624]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004b70:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004b72:	4b9c      	ldr	r3, [pc, #624]	@ (8004de4 <ESP_Upkeep+0x3c8>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !WifiReset){
 8004b78:	4b94      	ldr	r3, [pc, #592]	@ (8004dcc <ESP_Upkeep+0x3b0>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d100      	bne.n	8004b82 <ESP_Upkeep+0x166>
 8004b80:	e146      	b.n	8004e10 <ESP_Upkeep+0x3f4>
 8004b82:	4b99      	ldr	r3, [pc, #612]	@ (8004de8 <ESP_Upkeep+0x3cc>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d100      	bne.n	8004b8c <ESP_Upkeep+0x170>
 8004b8a:	e141      	b.n	8004e10 <ESP_Upkeep+0x3f4>
 8004b8c:	4b90      	ldr	r3, [pc, #576]	@ (8004dd0 <ESP_Upkeep+0x3b4>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2201      	movs	r2, #1
 8004b92:	4053      	eors	r3, r2
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d100      	bne.n	8004b9c <ESP_Upkeep+0x180>
 8004b9a:	e139      	b.n	8004e10 <ESP_Upkeep+0x3f4>
        memcpy(ATCommandArray, AT_SEND, 3);
 8004b9c:	4b8a      	ldr	r3, [pc, #552]	@ (8004dc8 <ESP_Upkeep+0x3ac>)
 8004b9e:	4a94      	ldr	r2, [pc, #592]	@ (8004df0 <ESP_Upkeep+0x3d4>)
 8004ba0:	8811      	ldrh	r1, [r2, #0]
 8004ba2:	8019      	strh	r1, [r3, #0]
 8004ba4:	7892      	ldrb	r2, [r2, #2]
 8004ba6:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8004ba8:	4b80      	ldr	r3, [pc, #512]	@ (8004dac <ESP_Upkeep+0x390>)
 8004baa:	2204      	movs	r2, #4
 8004bac:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004bae:	4b8a      	ldr	r3, [pc, #552]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8004bb4:	4b89      	ldr	r3, [pc, #548]	@ (8004ddc <ESP_Upkeep+0x3c0>)
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	701a      	strb	r2, [r3, #0]
        TIM2 -> CCR1 = 40000;
 8004bba:	2380      	movs	r3, #128	@ 0x80
 8004bbc:	05db      	lsls	r3, r3, #23
 8004bbe:	4a8d      	ldr	r2, [pc, #564]	@ (8004df4 <ESP_Upkeep+0x3d8>)
 8004bc0:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM2 -> CCR3 = 40000;
 8004bc2:	2380      	movs	r3, #128	@ 0x80
 8004bc4:	05db      	lsls	r3, r3, #23
 8004bc6:	4a8b      	ldr	r2, [pc, #556]	@ (8004df4 <ESP_Upkeep+0x3d8>)
 8004bc8:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM2 -> CCR4 = 20000;
 8004bca:	2380      	movs	r3, #128	@ 0x80
 8004bcc:	05db      	lsls	r3, r3, #23
 8004bce:	4a8a      	ldr	r2, [pc, #552]	@ (8004df8 <ESP_Upkeep+0x3dc>)
 8004bd0:	641a      	str	r2, [r3, #64]	@ 0x40
        ATCommand = ATCommandArray[ATCounter];
 8004bd2:	4b81      	ldr	r3, [pc, #516]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	001a      	movs	r2, r3
 8004bd8:	4b7b      	ldr	r3, [pc, #492]	@ (8004dc8 <ESP_Upkeep+0x3ac>)
 8004bda:	5c9a      	ldrb	r2, [r3, r2]
 8004bdc:	4b80      	ldr	r3, [pc, #512]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004bde:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004be0:	4b80      	ldr	r3, [pc, #512]	@ (8004de4 <ESP_Upkeep+0x3c8>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	701a      	strb	r2, [r3, #0]
      }

    break;
 8004be6:	e113      	b.n	8004e10 <ESP_Upkeep+0x3f4>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8004be8:	4b7d      	ldr	r3, [pc, #500]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	1dfc      	adds	r4, r7, #7
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f7ff fc96 	bl	8004520 <AT_Send>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004bf8:	1dfb      	adds	r3, r7, #7
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d100      	bne.n	8004c02 <ESP_Upkeep+0x1e6>
 8004c00:	e108      	b.n	8004e14 <ESP_Upkeep+0x3f8>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8004c02:	4b6a      	ldr	r3, [pc, #424]	@ (8004dac <ESP_Upkeep+0x390>)
 8004c04:	2203      	movs	r2, #3
 8004c06:	701a      	strb	r2, [r3, #0]
        }
         break;
 8004c08:	e104      	b.n	8004e14 <ESP_Upkeep+0x3f8>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8004dc0 <ESP_Upkeep+0x3a4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f003 fe54 	bl	80088bc <TimestampIsReached>
 8004c14:	1e03      	subs	r3, r0, #0
 8004c16:	d100      	bne.n	8004c1a <ESP_Upkeep+0x1fe>
 8004c18:	e0fe      	b.n	8004e18 <ESP_Upkeep+0x3fc>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004c1a:	4b72      	ldr	r3, [pc, #456]	@ (8004de4 <ESP_Upkeep+0x3c8>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f7ff fb9a 	bl	8004358 <DMA_ProcessBuffer>
 8004c24:	0003      	movs	r3, r0
 8004c26:	001a      	movs	r2, r3
 8004c28:	4b74      	ldr	r3, [pc, #464]	@ (8004dfc <ESP_Upkeep+0x3e0>)
 8004c2a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004c2c:	4b73      	ldr	r3, [pc, #460]	@ (8004dfc <ESP_Upkeep+0x3e0>)
 8004c2e:	781a      	ldrb	r2, [r3, #0]
 8004c30:	4b6c      	ldr	r3, [pc, #432]	@ (8004de4 <ESP_Upkeep+0x3c8>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	1dbc      	adds	r4, r7, #6
 8004c36:	0019      	movs	r1, r3
 8004c38:	0010      	movs	r0, r2
 8004c3a:	f7ff fc3b 	bl	80044b4 <ATCompare>
 8004c3e:	0003      	movs	r3, r0
 8004c40:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004c42:	4b6e      	ldr	r3, [pc, #440]	@ (8004dfc <ESP_Upkeep+0x3e0>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d102      	bne.n	8004c50 <ESP_Upkeep+0x234>
          EspState = ESP_STATE_SEND;
 8004c4a:	4b58      	ldr	r3, [pc, #352]	@ (8004dac <ESP_Upkeep+0x390>)
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004c50:	4b6a      	ldr	r3, [pc, #424]	@ (8004dfc <ESP_Upkeep+0x3e0>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d106      	bne.n	8004c66 <ESP_Upkeep+0x24a>
          ESPTimeStamp = HAL_GetTick() + 10;
 8004c58:	f004 fa7e 	bl	8009158 <HAL_GetTick>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	330a      	adds	r3, #10
 8004c60:	001a      	movs	r2, r3
 8004c62:	4b57      	ldr	r3, [pc, #348]	@ (8004dc0 <ESP_Upkeep+0x3a4>)
 8004c64:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8004c66:	4b65      	ldr	r3, [pc, #404]	@ (8004dfc <ESP_Upkeep+0x3e0>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b06      	cmp	r3, #6
 8004c6c:	d116      	bne.n	8004c9c <ESP_Upkeep+0x280>
          if(ATCommand != AT_SENDDATA){
 8004c6e:	4b5c      	ldr	r3, [pc, #368]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b0d      	cmp	r3, #13
 8004c74:	d003      	beq.n	8004c7e <ESP_Upkeep+0x262>
            EspState = ESP_STATE_SEND;
 8004c76:	4b4d      	ldr	r3, [pc, #308]	@ (8004dac <ESP_Upkeep+0x390>)
 8004c78:	2204      	movs	r2, #4
 8004c7a:	701a      	strb	r2, [r3, #0]
 8004c7c:	e00e      	b.n	8004c9c <ESP_Upkeep+0x280>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8004c7e:	4b58      	ldr	r3, [pc, #352]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004c80:	220c      	movs	r2, #12
 8004c82:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8004c84:	4b54      	ldr	r3, [pc, #336]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	4b52      	ldr	r3, [pc, #328]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004c8e:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004c90:	4b54      	ldr	r3, [pc, #336]	@ (8004de4 <ESP_Upkeep+0x3c8>)
 8004c92:	2202      	movs	r2, #2
 8004c94:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8004c96:	4b45      	ldr	r3, [pc, #276]	@ (8004dac <ESP_Upkeep+0x390>)
 8004c98:	2204      	movs	r2, #4
 8004c9a:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8004c9c:	1dbb      	adds	r3, r7, #6
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d100      	bne.n	8004ca6 <ESP_Upkeep+0x28a>
 8004ca4:	e0b8      	b.n	8004e18 <ESP_Upkeep+0x3fc>
          EspState = ESP_STATE_NEXT_AT;
 8004ca6:	4b41      	ldr	r3, [pc, #260]	@ (8004dac <ESP_Upkeep+0x390>)
 8004ca8:	2205      	movs	r2, #5
 8004caa:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004cac:	e0b4      	b.n	8004e18 <ESP_Upkeep+0x3fc>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8004cae:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	4b48      	ldr	r3, [pc, #288]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004cb8:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8004cba:	4b47      	ldr	r3, [pc, #284]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	001a      	movs	r2, r3
 8004cc0:	4b41      	ldr	r3, [pc, #260]	@ (8004dc8 <ESP_Upkeep+0x3ac>)
 8004cc2:	5c9a      	ldrb	r2, [r3, r2]
 8004cc4:	4b46      	ldr	r3, [pc, #280]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004cc6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8004cc8:	4b45      	ldr	r3, [pc, #276]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d102      	bne.n	8004cd6 <ESP_Upkeep+0x2ba>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8004cd0:	4b44      	ldr	r3, [pc, #272]	@ (8004de4 <ESP_Upkeep+0x3c8>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8004cd6:	4b42      	ldr	r3, [pc, #264]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	2b0c      	cmp	r3, #12
 8004cdc:	d102      	bne.n	8004ce4 <ESP_Upkeep+0x2c8>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8004cde:	4b41      	ldr	r3, [pc, #260]	@ (8004de4 <ESP_Upkeep+0x3c8>)
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8004ce4:	4b3e      	ldr	r3, [pc, #248]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b0c      	cmp	r3, #12
 8004cea:	d006      	beq.n	8004cfa <ESP_Upkeep+0x2de>
 8004cec:	4b3c      	ldr	r3, [pc, #240]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d002      	beq.n	8004cfa <ESP_Upkeep+0x2de>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8004de4 <ESP_Upkeep+0x3c8>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8004cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8004dac <ESP_Upkeep+0x390>)
 8004cfc:	2204      	movs	r2, #4
 8004cfe:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8004d00:	4b37      	ldr	r3, [pc, #220]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b0f      	cmp	r3, #15
 8004d06:	d000      	beq.n	8004d0a <ESP_Upkeep+0x2ee>
 8004d08:	e088      	b.n	8004e1c <ESP_Upkeep+0x400>
        if(Mode == AT_MODE_SEND){
 8004d0a:	4b34      	ldr	r3, [pc, #208]	@ (8004ddc <ESP_Upkeep+0x3c0>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d112      	bne.n	8004d38 <ESP_Upkeep+0x31c>
          ESPTimeStamp = HAL_GetTick() + 300000;
 8004d12:	f004 fa21 	bl	8009158 <HAL_GetTick>
 8004d16:	0003      	movs	r3, r0
 8004d18:	4a39      	ldr	r2, [pc, #228]	@ (8004e00 <ESP_Upkeep+0x3e4>)
 8004d1a:	189a      	adds	r2, r3, r2
 8004d1c:	4b28      	ldr	r3, [pc, #160]	@ (8004dc0 <ESP_Upkeep+0x3a4>)
 8004d1e:	601a      	str	r2, [r3, #0]
          TIM2 -> CCR1 = 40000;
 8004d20:	2380      	movs	r3, #128	@ 0x80
 8004d22:	05db      	lsls	r3, r3, #23
 8004d24:	4a33      	ldr	r2, [pc, #204]	@ (8004df4 <ESP_Upkeep+0x3d8>)
 8004d26:	635a      	str	r2, [r3, #52]	@ 0x34
          TIM2 -> CCR3 = 0;
 8004d28:	2380      	movs	r3, #128	@ 0x80
 8004d2a:	05db      	lsls	r3, r3, #23
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	63da      	str	r2, [r3, #60]	@ 0x3c
          TIM2 -> CCR4 = 40000;
 8004d30:	2380      	movs	r3, #128	@ 0x80
 8004d32:	05db      	lsls	r3, r3, #23
 8004d34:	4a2f      	ldr	r2, [pc, #188]	@ (8004df4 <ESP_Upkeep+0x3d8>)
 8004d36:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        EspState = ESP_STATE_RESET;
 8004d38:	4b1c      	ldr	r3, [pc, #112]	@ (8004dac <ESP_Upkeep+0x390>)
 8004d3a:	2209      	movs	r2, #9
 8004d3c:	701a      	strb	r2, [r3, #0]
      }
    break;
 8004d3e:	e06d      	b.n	8004e1c <ESP_Upkeep+0x400>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp)){
 8004d40:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc0 <ESP_Upkeep+0x3a4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	0018      	movs	r0, r3
 8004d46:	f003 fdb9 	bl	80088bc <TimestampIsReached>
 8004d4a:	1e03      	subs	r3, r0, #0
 8004d4c:	d068      	beq.n	8004e20 <ESP_Upkeep+0x404>
        if(Mode == AT_MODE_INIT){
 8004d4e:	4b23      	ldr	r3, [pc, #140]	@ (8004ddc <ESP_Upkeep+0x3c0>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d102      	bne.n	8004d5c <ESP_Upkeep+0x340>
          InitIsDone = true;
 8004d56:	4b1d      	ldr	r3, [pc, #116]	@ (8004dcc <ESP_Upkeep+0x3b0>)
 8004d58:	2201      	movs	r2, #1
 8004d5a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8004d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8004ddc <ESP_Upkeep+0x3c0>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d102      	bne.n	8004d6a <ESP_Upkeep+0x34e>
          ConnectionMade = true;
 8004d64:	4b20      	ldr	r3, [pc, #128]	@ (8004de8 <ESP_Upkeep+0x3cc>)
 8004d66:	2201      	movs	r2, #1
 8004d68:	701a      	strb	r2, [r3, #0]
        }
        TIM2 -> CCR1 = 40000;
 8004d6a:	2380      	movs	r3, #128	@ 0x80
 8004d6c:	05db      	lsls	r3, r3, #23
 8004d6e:	4a21      	ldr	r2, [pc, #132]	@ (8004df4 <ESP_Upkeep+0x3d8>)
 8004d70:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM2 -> CCR3 = 40000;
 8004d72:	2380      	movs	r3, #128	@ 0x80
 8004d74:	05db      	lsls	r3, r3, #23
 8004d76:	4a1f      	ldr	r2, [pc, #124]	@ (8004df4 <ESP_Upkeep+0x3d8>)
 8004d78:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM2 -> CCR4 = 40000;
 8004d7a:	2380      	movs	r3, #128	@ 0x80
 8004d7c:	05db      	lsls	r3, r3, #23
 8004d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8004df4 <ESP_Upkeep+0x3d8>)
 8004d80:	641a      	str	r2, [r3, #64]	@ 0x40
        EspState = ESP_STATE_MODE_SELECT;
 8004d82:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <ESP_Upkeep+0x390>)
 8004d84:	220b      	movs	r2, #11
 8004d86:	701a      	strb	r2, [r3, #0]
      }

      break;
 8004d88:	e04a      	b.n	8004e20 <ESP_Upkeep+0x404>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8004d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e04 <ESP_Upkeep+0x3e8>)
 8004d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8004e08 <ESP_Upkeep+0x3ec>)
 8004d8e:	0019      	movs	r1, r3
 8004d90:	2003      	movs	r0, #3
 8004d92:	f003 fde9 	bl	8008968 <CreateLine>
      EspState = ESP_STATE_INIT;
 8004d96:	4b05      	ldr	r3, [pc, #20]	@ (8004dac <ESP_Upkeep+0x390>)
 8004d98:	2202      	movs	r2, #2
 8004d9a:	701a      	strb	r2, [r3, #0]
      break;
 8004d9c:	e041      	b.n	8004e22 <ESP_Upkeep+0x406>

    default:
      // Handle unexpected state
      EspState = ESP_STATE_ERROR;
 8004d9e:	4b03      	ldr	r3, [pc, #12]	@ (8004dac <ESP_Upkeep+0x390>)
 8004da0:	2207      	movs	r2, #7
 8004da2:	701a      	strb	r2, [r3, #0]
      break;
 8004da4:	e03d      	b.n	8004e22 <ESP_Upkeep+0x406>
      break;
 8004da6:	46c0      	nop			@ (mov r8, r8)
 8004da8:	e03b      	b.n	8004e22 <ESP_Upkeep+0x406>
 8004daa:	46c0      	nop			@ (mov r8, r8)
 8004dac:	20000102 	.word	0x20000102
 8004db0:	0801a1c8 	.word	0x0801a1c8
 8004db4:	200005d7 	.word	0x200005d7
 8004db8:	50000800 	.word	0x50000800
 8004dbc:	50001c00 	.word	0x50001c00
 8004dc0:	20000880 	.word	0x20000880
 8004dc4:	200004d8 	.word	0x200004d8
 8004dc8:	20000874 	.word	0x20000874
 8004dcc:	200005d8 	.word	0x200005d8
 8004dd0:	200005d9 	.word	0x200005d9
 8004dd4:	200000f0 	.word	0x200000f0
 8004dd8:	2000087e 	.word	0x2000087e
 8004ddc:	20000a8b 	.word	0x20000a8b
 8004de0:	20000a8a 	.word	0x20000a8a
 8004de4:	20000a89 	.word	0x20000a89
 8004de8:	200005da 	.word	0x200005da
 8004dec:	200000fc 	.word	0x200000fc
 8004df0:	200000f8 	.word	0x200000f8
 8004df4:	00009c40 	.word	0x00009c40
 8004df8:	00004e20 	.word	0x00004e20
 8004dfc:	20000104 	.word	0x20000104
 8004e00:	000493e0 	.word	0x000493e0
 8004e04:	08019b30 	.word	0x08019b30
 8004e08:	080196c0 	.word	0x080196c0
      break;
 8004e0c:	46c0      	nop			@ (mov r8, r8)
 8004e0e:	e008      	b.n	8004e22 <ESP_Upkeep+0x406>
    break;
 8004e10:	46c0      	nop			@ (mov r8, r8)
 8004e12:	e006      	b.n	8004e22 <ESP_Upkeep+0x406>
         break;
 8004e14:	46c0      	nop			@ (mov r8, r8)
 8004e16:	e004      	b.n	8004e22 <ESP_Upkeep+0x406>
      break;
 8004e18:	46c0      	nop			@ (mov r8, r8)
 8004e1a:	e002      	b.n	8004e22 <ESP_Upkeep+0x406>
    break;
 8004e1c:	46c0      	nop			@ (mov r8, r8)
 8004e1e:	e000      	b.n	8004e22 <ESP_Upkeep+0x406>
      break;
 8004e20:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004e22:	46c0      	nop			@ (mov r8, r8)
 8004e24:	46bd      	mov	sp, r7
 8004e26:	b003      	add	sp, #12
 8004e28:	bd90      	pop	{r4, r7, pc}
 8004e2a:	46c0      	nop			@ (mov r8, r8)

08004e2c <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8004e34:	4b09      	ldr	r3, [pc, #36]	@ (8004e5c <I2CSensors_Init+0x30>)
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8004e3a:	4a09      	ldr	r2, [pc, #36]	@ (8004e60 <I2CSensors_Init+0x34>)
 8004e3c:	4b09      	ldr	r3, [pc, #36]	@ (8004e64 <I2CSensors_Init+0x38>)
 8004e3e:	0011      	movs	r1, r2
 8004e40:	0018      	movs	r0, r3
 8004e42:	f000 fae7 	bl	8005414 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8004e46:	4a06      	ldr	r2, [pc, #24]	@ (8004e60 <I2CSensors_Init+0x34>)
 8004e48:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <I2CSensors_Init+0x38>)
 8004e4a:	0011      	movs	r1, r2
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f000 f96b 	bl	8005128 <Gas_Init>
}
 8004e52:	46c0      	nop			@ (mov r8, r8)
 8004e54:	46bd      	mov	sp, r7
 8004e56:	b002      	add	sp, #8
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	46c0      	nop			@ (mov r8, r8)
 8004e5c:	20000a90 	.word	0x20000a90
 8004e60:	08004ebd 	.word	0x08004ebd
 8004e64:	08004e69 	.word	0x08004e69

08004e68 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004e68:	b5b0      	push	{r4, r5, r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6039      	str	r1, [r7, #0]
 8004e70:	0011      	movs	r1, r2
 8004e72:	1dfb      	adds	r3, r7, #7
 8004e74:	1c02      	adds	r2, r0, #0
 8004e76:	701a      	strb	r2, [r3, #0]
 8004e78:	1dbb      	adds	r3, r7, #6
 8004e7a:	1c0a      	adds	r2, r1, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb8 <ReadI2C+0x50>)
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	1dfb      	adds	r3, r7, #7
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	18db      	adds	r3, r3, r3
 8004e8a:	b299      	uxth	r1, r3
 8004e8c:	1dbb      	adds	r3, r7, #6
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	250f      	movs	r5, #15
 8004e94:	197c      	adds	r4, r7, r5
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	f005 fcae 	bl	800a7f8 <HAL_I2C_Master_Receive_DMA>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004ea0:	197b      	adds	r3, r7, r5
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <ReadI2C+0x44>
        return false;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	e000      	b.n	8004eae <ReadI2C+0x46>
    }
    return true;
 8004eac:	2301      	movs	r3, #1
}
 8004eae:	0018      	movs	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b004      	add	sp, #16
 8004eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8004eb6:	46c0      	nop			@ (mov r8, r8)
 8004eb8:	20000a90 	.word	0x20000a90

08004ebc <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004ebc:	b5b0      	push	{r4, r5, r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6039      	str	r1, [r7, #0]
 8004ec4:	0011      	movs	r1, r2
 8004ec6:	1dfb      	adds	r3, r7, #7
 8004ec8:	1c02      	adds	r2, r0, #0
 8004eca:	701a      	strb	r2, [r3, #0]
 8004ecc:	1dbb      	adds	r3, r7, #6
 8004ece:	1c0a      	adds	r2, r1, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8004f0c <WriteI2C+0x50>)
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	1dfb      	adds	r3, r7, #7
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	18db      	adds	r3, r3, r3
 8004ede:	b299      	uxth	r1, r3
 8004ee0:	1dbb      	adds	r3, r7, #6
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	250f      	movs	r5, #15
 8004ee8:	197c      	adds	r4, r7, r5
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	f005 fb7e 	bl	800a5ec <HAL_I2C_Master_Transmit_DMA>
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004ef4:	197b      	adds	r3, r7, r5
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <WriteI2C+0x44>
        return false;
 8004efc:	2300      	movs	r3, #0
 8004efe:	e000      	b.n	8004f02 <WriteI2C+0x46>
    }
    return true;
 8004f00:	2301      	movs	r3, #1
}
 8004f02:	0018      	movs	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b004      	add	sp, #16
 8004f08:	bdb0      	pop	{r4, r5, r7, pc}
 8004f0a:	46c0      	nop			@ (mov r8, r8)
 8004f0c:	20000a90 	.word	0x20000a90

08004f10 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004f16:	003b      	movs	r3, r7
 8004f18:	0018      	movs	r0, r3
 8004f1a:	2308      	movs	r3, #8
 8004f1c:	001a      	movs	r2, r3
 8004f1e:	2100      	movs	r1, #0
 8004f20:	f011 fcc4 	bl	80168ac <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004f24:	4b30      	ldr	r3, [pc, #192]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f26:	4a31      	ldr	r2, [pc, #196]	@ (8004fec <MX_ADC_Init+0xdc>)
 8004f28:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8004f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004f30:	4b2d      	ldr	r3, [pc, #180]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f32:	22c0      	movs	r2, #192	@ 0xc0
 8004f34:	0612      	lsls	r2, r2, #24
 8004f36:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004f38:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004f44:	4b28      	ldr	r3, [pc, #160]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f46:	2201      	movs	r2, #1
 8004f48:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f4a:	4b27      	ldr	r3, [pc, #156]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004f50:	4b25      	ldr	r3, [pc, #148]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f52:	2220      	movs	r2, #32
 8004f54:	2100      	movs	r1, #0
 8004f56:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8004f58:	4b23      	ldr	r3, [pc, #140]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f5a:	2221      	movs	r2, #33	@ 0x21
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f60:	4b21      	ldr	r3, [pc, #132]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f66:	4b20      	ldr	r3, [pc, #128]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f68:	22c2      	movs	r2, #194	@ 0xc2
 8004f6a:	32ff      	adds	r2, #255	@ 0xff
 8004f6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f70:	222c      	movs	r2, #44	@ 0x2c
 8004f72:	2100      	movs	r1, #0
 8004f74:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004f76:	4b1c      	ldr	r3, [pc, #112]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f78:	2204      	movs	r2, #4
 8004f7a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004f82:	4b19      	ldr	r3, [pc, #100]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004f88:	4b17      	ldr	r3, [pc, #92]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004f8e:	4b16      	ldr	r3, [pc, #88]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004f94:	4b14      	ldr	r3, [pc, #80]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f96:	0018      	movs	r0, r3
 8004f98:	f004 f90c 	bl	80091b4 <HAL_ADC_Init>
 8004f9c:	1e03      	subs	r3, r0, #0
 8004f9e:	d001      	beq.n	8004fa4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8004fa0:	f000 fdb8 	bl	8005b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004fa4:	003b      	movs	r3, r7
 8004fa6:	4a12      	ldr	r2, [pc, #72]	@ (8004ff0 <MX_ADC_Init+0xe0>)
 8004fa8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004faa:	003b      	movs	r3, r7
 8004fac:	2280      	movs	r2, #128	@ 0x80
 8004fae:	0152      	lsls	r2, r2, #5
 8004fb0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004fb2:	003a      	movs	r2, r7
 8004fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004fb6:	0011      	movs	r1, r2
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f004 fb6b 	bl	8009694 <HAL_ADC_ConfigChannel>
 8004fbe:	1e03      	subs	r3, r0, #0
 8004fc0:	d001      	beq.n	8004fc6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8004fc2:	f000 fda7 	bl	8005b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004fc6:	003b      	movs	r3, r7
 8004fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8004ff4 <MX_ADC_Init+0xe4>)
 8004fca:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004fcc:	003a      	movs	r2, r7
 8004fce:	4b06      	ldr	r3, [pc, #24]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004fd0:	0011      	movs	r1, r2
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f004 fb5e 	bl	8009694 <HAL_ADC_ConfigChannel>
 8004fd8:	1e03      	subs	r3, r0, #0
 8004fda:	d001      	beq.n	8004fe0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8004fdc:	f000 fd9a 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004fe0:	46c0      	nop			@ (mov r8, r8)
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	b002      	add	sp, #8
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	20000a94 	.word	0x20000a94
 8004fec:	40012400 	.word	0x40012400
 8004ff0:	38004000 	.word	0x38004000
 8004ff4:	3c008000 	.word	0x3c008000

08004ff8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b089      	sub	sp, #36	@ 0x24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005000:	240c      	movs	r4, #12
 8005002:	193b      	adds	r3, r7, r4
 8005004:	0018      	movs	r0, r3
 8005006:	2314      	movs	r3, #20
 8005008:	001a      	movs	r2, r3
 800500a:	2100      	movs	r1, #0
 800500c:	f011 fc4e 	bl	80168ac <memset>
  if(adcHandle->Instance==ADC1)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a14      	ldr	r2, [pc, #80]	@ (8005068 <HAL_ADC_MspInit+0x70>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d121      	bne.n	800505e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800501a:	4b14      	ldr	r3, [pc, #80]	@ (800506c <HAL_ADC_MspInit+0x74>)
 800501c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800501e:	4b13      	ldr	r3, [pc, #76]	@ (800506c <HAL_ADC_MspInit+0x74>)
 8005020:	2180      	movs	r1, #128	@ 0x80
 8005022:	0089      	lsls	r1, r1, #2
 8005024:	430a      	orrs	r2, r1
 8005026:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005028:	4b10      	ldr	r3, [pc, #64]	@ (800506c <HAL_ADC_MspInit+0x74>)
 800502a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800502c:	4b0f      	ldr	r3, [pc, #60]	@ (800506c <HAL_ADC_MspInit+0x74>)
 800502e:	2104      	movs	r1, #4
 8005030:	430a      	orrs	r2, r1
 8005032:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005034:	4b0d      	ldr	r3, [pc, #52]	@ (800506c <HAL_ADC_MspInit+0x74>)
 8005036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005038:	2204      	movs	r2, #4
 800503a:	4013      	ands	r3, r2
 800503c:	60bb      	str	r3, [r7, #8]
 800503e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8005040:	193b      	adds	r3, r7, r4
 8005042:	2230      	movs	r2, #48	@ 0x30
 8005044:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005046:	193b      	adds	r3, r7, r4
 8005048:	2203      	movs	r2, #3
 800504a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504c:	193b      	adds	r3, r7, r4
 800504e:	2200      	movs	r2, #0
 8005050:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005052:	193b      	adds	r3, r7, r4
 8005054:	4a06      	ldr	r2, [pc, #24]	@ (8005070 <HAL_ADC_MspInit+0x78>)
 8005056:	0019      	movs	r1, r3
 8005058:	0010      	movs	r0, r2
 800505a:	f004 ffb3 	bl	8009fc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800505e:	46c0      	nop			@ (mov r8, r8)
 8005060:	46bd      	mov	sp, r7
 8005062:	b009      	add	sp, #36	@ 0x24
 8005064:	bd90      	pop	{r4, r7, pc}
 8005066:	46c0      	nop			@ (mov r8, r8)
 8005068:	40012400 	.word	0x40012400
 800506c:	40021000 	.word	0x40021000
 8005070:	50000800 	.word	0x50000800

08005074 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800507a:	4b10      	ldr	r3, [pc, #64]	@ (80050bc <MX_DMA_Init+0x48>)
 800507c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800507e:	4b0f      	ldr	r3, [pc, #60]	@ (80050bc <MX_DMA_Init+0x48>)
 8005080:	2101      	movs	r1, #1
 8005082:	430a      	orrs	r2, r1
 8005084:	631a      	str	r2, [r3, #48]	@ 0x30
 8005086:	4b0d      	ldr	r3, [pc, #52]	@ (80050bc <MX_DMA_Init+0x48>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508a:	2201      	movs	r2, #1
 800508c:	4013      	ands	r3, r2
 800508e:	607b      	str	r3, [r7, #4]
 8005090:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8005092:	2200      	movs	r2, #0
 8005094:	2100      	movs	r1, #0
 8005096:	200a      	movs	r0, #10
 8005098:	f004 fcb6 	bl	8009a08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800509c:	200a      	movs	r0, #10
 800509e:	f004 fcc8 	bl	8009a32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 80050a2:	2200      	movs	r2, #0
 80050a4:	2103      	movs	r1, #3
 80050a6:	200b      	movs	r0, #11
 80050a8:	f004 fcae 	bl	8009a08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80050ac:	200b      	movs	r0, #11
 80050ae:	f004 fcc0 	bl	8009a32 <HAL_NVIC_EnableIRQ>

}
 80050b2:	46c0      	nop			@ (mov r8, r8)
 80050b4:	46bd      	mov	sp, r7
 80050b6:	b002      	add	sp, #8
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	46c0      	nop			@ (mov r8, r8)
 80050bc:	40021000 	.word	0x40021000

080050c0 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 80050ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005100 <Gadget_Init+0x40>)
 80050d0:	6818      	ldr	r0, [r3, #0]
 80050d2:	f000 ffc1 	bl	8006058 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	0018      	movs	r0, r3
 80050de:	f000 fd8d 	bl	8005bfc <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	0018      	movs	r0, r3
 80050e6:	f7fe fb0d 	bl	8003704 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 80050ea:	4a06      	ldr	r2, [pc, #24]	@ (8005104 <Gadget_Init+0x44>)
 80050ec:	4b06      	ldr	r3, [pc, #24]	@ (8005108 <Gadget_Init+0x48>)
 80050ee:	0019      	movs	r1, r3
 80050f0:	2003      	movs	r0, #3
 80050f2:	f003 fc39 	bl	8008968 <CreateLine>
}
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	46bd      	mov	sp, r7
 80050fa:	b004      	add	sp, #16
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	46c0      	nop			@ (mov r8, r8)
 8005100:	20000108 	.word	0x20000108
 8005104:	08019b44 	.word	0x08019b44
 8005108:	08019b58 	.word	0x08019b58

0800510c <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  Meas_Test();
 8005110:	f000 fff0 	bl	80060f4 <Meas_Test>
}
 8005114:	46c0      	nop			@ (mov r8, r8)
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <UpkeepGadget>:

void UpkeepGadget() {
 800511a:	b580      	push	{r7, lr}
 800511c:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 800511e:	f000 ff27 	bl	8005f70 <Meas_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	0011      	movs	r1, r2
 8005138:	0018      	movs	r0, r3
 800513a:	f002 fb23 	bl	8007784 <SGP_Init>
}
 800513e:	46c0      	nop			@ (mov r8, r8)
 8005140:	46bd      	mov	sp, r7
 8005142:	b002      	add	sp, #8
 8005144:	bd80      	pop	{r7, pc}

08005146 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8005146:	b580      	push	{r7, lr}
 8005148:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 800514a:	f002 fb35 	bl	80077b8 <SGP_StartMeasurement>
}
 800514e:	46c0      	nop			@ (mov r8, r8)
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	0018      	movs	r0, r3
 8005160:	f002 fb9a 	bl	8007898 <SGP_GetMeasurementValues>
 8005164:	0003      	movs	r3, r0
}
 8005166:	0018      	movs	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	b002      	add	sp, #8
 800516c:	bd80      	pop	{r7, pc}

0800516e <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 800516e:	b580      	push	{r7, lr}
 8005170:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8005172:	f002 fdaf 	bl	8007cd4 <SGP_DeviceConnected>
 8005176:	0003      	movs	r3, r0
}
 8005178:	0018      	movs	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8005180:	b590      	push	{r4, r7, lr}
 8005182:	b08b      	sub	sp, #44	@ 0x2c
 8005184:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005186:	2414      	movs	r4, #20
 8005188:	193b      	adds	r3, r7, r4
 800518a:	0018      	movs	r0, r3
 800518c:	2314      	movs	r3, #20
 800518e:	001a      	movs	r2, r3
 8005190:	2100      	movs	r1, #0
 8005192:	f011 fb8b 	bl	80168ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005196:	4b70      	ldr	r3, [pc, #448]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 8005198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800519a:	4b6f      	ldr	r3, [pc, #444]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 800519c:	2104      	movs	r1, #4
 800519e:	430a      	orrs	r2, r1
 80051a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a6:	2204      	movs	r2, #4
 80051a8:	4013      	ands	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80051ae:	4b6a      	ldr	r3, [pc, #424]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051b2:	4b69      	ldr	r3, [pc, #420]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051b4:	2180      	movs	r1, #128	@ 0x80
 80051b6:	430a      	orrs	r2, r1
 80051b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051ba:	4b67      	ldr	r3, [pc, #412]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051be:	2280      	movs	r2, #128	@ 0x80
 80051c0:	4013      	ands	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051c6:	4b64      	ldr	r3, [pc, #400]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ca:	4b63      	ldr	r3, [pc, #396]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051cc:	2101      	movs	r1, #1
 80051ce:	430a      	orrs	r2, r1
 80051d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051d2:	4b61      	ldr	r3, [pc, #388]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d6:	2201      	movs	r2, #1
 80051d8:	4013      	ands	r3, r2
 80051da:	60bb      	str	r3, [r7, #8]
 80051dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80051de:	4b5e      	ldr	r3, [pc, #376]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e2:	4b5d      	ldr	r3, [pc, #372]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051e4:	2102      	movs	r1, #2
 80051e6:	430a      	orrs	r2, r1
 80051e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ee:	2202      	movs	r2, #2
 80051f0:	4013      	ands	r3, r2
 80051f2:	607b      	str	r3, [r7, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80051f6:	4b58      	ldr	r3, [pc, #352]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051fa:	4b57      	ldr	r3, [pc, #348]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051fc:	2108      	movs	r1, #8
 80051fe:	430a      	orrs	r2, r1
 8005200:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005202:	4b55      	ldr	r3, [pc, #340]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 8005204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005206:	2208      	movs	r2, #8
 8005208:	4013      	ands	r3, r2
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800520e:	4b53      	ldr	r3, [pc, #332]	@ (800535c <MX_GPIO_Init+0x1dc>)
 8005210:	2201      	movs	r2, #1
 8005212:	2101      	movs	r1, #1
 8005214:	0018      	movs	r0, r3
 8005216:	f005 f935 	bl	800a484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800521a:	4b50      	ldr	r3, [pc, #320]	@ (800535c <MX_GPIO_Init+0x1dc>)
 800521c:	2200      	movs	r2, #0
 800521e:	2102      	movs	r1, #2
 8005220:	0018      	movs	r0, r3
 8005222:	f005 f92f 	bl	800a484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8005226:	494e      	ldr	r1, [pc, #312]	@ (8005360 <MX_GPIO_Init+0x1e0>)
 8005228:	4b4e      	ldr	r3, [pc, #312]	@ (8005364 <MX_GPIO_Init+0x1e4>)
 800522a:	2201      	movs	r2, #1
 800522c:	0018      	movs	r0, r3
 800522e:	f005 f929 	bl	800a484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005232:	2380      	movs	r3, #128	@ 0x80
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	484c      	ldr	r0, [pc, #304]	@ (8005368 <MX_GPIO_Init+0x1e8>)
 8005238:	2201      	movs	r2, #1
 800523a:	0019      	movs	r1, r3
 800523c:	f005 f922 	bl	800a484 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8005240:	193b      	adds	r3, r7, r4
 8005242:	4a4a      	ldr	r2, [pc, #296]	@ (800536c <MX_GPIO_Init+0x1ec>)
 8005244:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005246:	193b      	adds	r3, r7, r4
 8005248:	2203      	movs	r2, #3
 800524a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524c:	193b      	adds	r3, r7, r4
 800524e:	2200      	movs	r2, #0
 8005250:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005252:	193b      	adds	r3, r7, r4
 8005254:	4a44      	ldr	r2, [pc, #272]	@ (8005368 <MX_GPIO_Init+0x1e8>)
 8005256:	0019      	movs	r1, r3
 8005258:	0010      	movs	r0, r2
 800525a:	f004 feb3 	bl	8009fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800525e:	193b      	adds	r3, r7, r4
 8005260:	2203      	movs	r2, #3
 8005262:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005264:	193b      	adds	r3, r7, r4
 8005266:	2201      	movs	r2, #1
 8005268:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526a:	193b      	adds	r3, r7, r4
 800526c:	2200      	movs	r2, #0
 800526e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005270:	193b      	adds	r3, r7, r4
 8005272:	2200      	movs	r2, #0
 8005274:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005276:	193b      	adds	r3, r7, r4
 8005278:	4a38      	ldr	r2, [pc, #224]	@ (800535c <MX_GPIO_Init+0x1dc>)
 800527a:	0019      	movs	r1, r3
 800527c:	0010      	movs	r0, r2
 800527e:	f004 fea1 	bl	8009fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8005282:	193b      	adds	r3, r7, r4
 8005284:	4a3a      	ldr	r2, [pc, #232]	@ (8005370 <MX_GPIO_Init+0x1f0>)
 8005286:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005288:	193b      	adds	r3, r7, r4
 800528a:	2203      	movs	r2, #3
 800528c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528e:	193b      	adds	r3, r7, r4
 8005290:	2200      	movs	r2, #0
 8005292:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005294:	193a      	adds	r2, r7, r4
 8005296:	23a0      	movs	r3, #160	@ 0xa0
 8005298:	05db      	lsls	r3, r3, #23
 800529a:	0011      	movs	r1, r2
 800529c:	0018      	movs	r0, r3
 800529e:	f004 fe91 	bl	8009fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 80052a2:	193b      	adds	r3, r7, r4
 80052a4:	22c0      	movs	r2, #192	@ 0xc0
 80052a6:	0052      	lsls	r2, r2, #1
 80052a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052aa:	193b      	adds	r3, r7, r4
 80052ac:	2200      	movs	r2, #0
 80052ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b0:	193b      	adds	r3, r7, r4
 80052b2:	2200      	movs	r2, #0
 80052b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052b6:	193a      	adds	r2, r7, r4
 80052b8:	23a0      	movs	r3, #160	@ 0xa0
 80052ba:	05db      	lsls	r3, r3, #23
 80052bc:	0011      	movs	r1, r2
 80052be:	0018      	movs	r0, r3
 80052c0:	f004 fe80 	bl	8009fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80052c4:	193b      	adds	r3, r7, r4
 80052c6:	4a26      	ldr	r2, [pc, #152]	@ (8005360 <MX_GPIO_Init+0x1e0>)
 80052c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052ca:	193b      	adds	r3, r7, r4
 80052cc:	2201      	movs	r2, #1
 80052ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d0:	193b      	adds	r3, r7, r4
 80052d2:	2200      	movs	r2, #0
 80052d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d6:	193b      	adds	r3, r7, r4
 80052d8:	2200      	movs	r2, #0
 80052da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052dc:	193b      	adds	r3, r7, r4
 80052de:	4a21      	ldr	r2, [pc, #132]	@ (8005364 <MX_GPIO_Init+0x1e4>)
 80052e0:	0019      	movs	r1, r3
 80052e2:	0010      	movs	r0, r2
 80052e4:	f004 fe6e 	bl	8009fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80052e8:	193b      	adds	r3, r7, r4
 80052ea:	4a22      	ldr	r2, [pc, #136]	@ (8005374 <MX_GPIO_Init+0x1f4>)
 80052ec:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052ee:	193b      	adds	r3, r7, r4
 80052f0:	2203      	movs	r2, #3
 80052f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f4:	193b      	adds	r3, r7, r4
 80052f6:	2200      	movs	r2, #0
 80052f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052fa:	193b      	adds	r3, r7, r4
 80052fc:	4a19      	ldr	r2, [pc, #100]	@ (8005364 <MX_GPIO_Init+0x1e4>)
 80052fe:	0019      	movs	r1, r3
 8005300:	0010      	movs	r0, r2
 8005302:	f004 fe5f 	bl	8009fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin;
 8005306:	0021      	movs	r1, r4
 8005308:	187b      	adds	r3, r7, r1
 800530a:	2280      	movs	r2, #128	@ 0x80
 800530c:	0112      	lsls	r2, r2, #4
 800530e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005310:	000c      	movs	r4, r1
 8005312:	193b      	adds	r3, r7, r4
 8005314:	2201      	movs	r2, #1
 8005316:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005318:	193b      	adds	r3, r7, r4
 800531a:	2200      	movs	r2, #0
 800531c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800531e:	193b      	adds	r3, r7, r4
 8005320:	2200      	movs	r2, #0
 8005322:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Wireless_PSU_EN_GPIO_Port, &GPIO_InitStruct);
 8005324:	193b      	adds	r3, r7, r4
 8005326:	4a10      	ldr	r2, [pc, #64]	@ (8005368 <MX_GPIO_Init+0x1e8>)
 8005328:	0019      	movs	r1, r3
 800532a:	0010      	movs	r0, r2
 800532c:	f004 fe4a 	bl	8009fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8005330:	0021      	movs	r1, r4
 8005332:	187b      	adds	r3, r7, r1
 8005334:	2204      	movs	r2, #4
 8005336:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005338:	187b      	adds	r3, r7, r1
 800533a:	2200      	movs	r2, #0
 800533c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533e:	187b      	adds	r3, r7, r1
 8005340:	2200      	movs	r2, #0
 8005342:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8005344:	187b      	adds	r3, r7, r1
 8005346:	4a0c      	ldr	r2, [pc, #48]	@ (8005378 <MX_GPIO_Init+0x1f8>)
 8005348:	0019      	movs	r1, r3
 800534a:	0010      	movs	r0, r2
 800534c:	f004 fe3a 	bl	8009fc4 <HAL_GPIO_Init>

}
 8005350:	46c0      	nop			@ (mov r8, r8)
 8005352:	46bd      	mov	sp, r7
 8005354:	b00b      	add	sp, #44	@ 0x2c
 8005356:	bd90      	pop	{r4, r7, pc}
 8005358:	40021000 	.word	0x40021000
 800535c:	50001c00 	.word	0x50001c00
 8005360:	00000301 	.word	0x00000301
 8005364:	50000400 	.word	0x50000400
 8005368:	50000800 	.word	0x50000800
 800536c:	0000320f 	.word	0x0000320f
 8005370:	00008070 	.word	0x00008070
 8005374:	0000403e 	.word	0x0000403e
 8005378:	50000c00 	.word	0x50000c00

0800537c <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2100      	movs	r1, #0
 800538a:	0018      	movs	r0, r3
 800538c:	f00a f9dc 	bl	800f748 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2108      	movs	r1, #8
 8005394:	0018      	movs	r0, r3
 8005396:	f00a f9d7 	bl	800f748 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	210c      	movs	r1, #12
 800539e:	0018      	movs	r0, r3
 80053a0:	f00a f9d2 	bl	800f748 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 40000;
 80053a4:	2380      	movs	r3, #128	@ 0x80
 80053a6:	05db      	lsls	r3, r3, #23
 80053a8:	4a18      	ldr	r2, [pc, #96]	@ (800540c <GPIO_InitPWMLEDs+0x90>)
 80053aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 40000;
 80053ac:	2380      	movs	r3, #128	@ 0x80
 80053ae:	05db      	lsls	r3, r3, #23
 80053b0:	4a16      	ldr	r2, [pc, #88]	@ (800540c <GPIO_InitPWMLEDs+0x90>)
 80053b2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 40000;
 80053b4:	2380      	movs	r3, #128	@ 0x80
 80053b6:	05db      	lsls	r3, r3, #23
 80053b8:	4a14      	ldr	r2, [pc, #80]	@ (800540c <GPIO_InitPWMLEDs+0x90>)
 80053ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 40000;
 80053bc:	2380      	movs	r3, #128	@ 0x80
 80053be:	05db      	lsls	r3, r3, #23
 80053c0:	4a12      	ldr	r2, [pc, #72]	@ (800540c <GPIO_InitPWMLEDs+0x90>)
 80053c2:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2100      	movs	r1, #0
 80053c8:	0018      	movs	r0, r3
 80053ca:	f00a f9bd 	bl	800f748 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2104      	movs	r1, #4
 80053d2:	0018      	movs	r0, r3
 80053d4:	f00a f9b8 	bl	800f748 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2108      	movs	r1, #8
 80053dc:	0018      	movs	r0, r3
 80053de:	f00a f9b3 	bl	800f748 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 80053e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005410 <GPIO_InitPWMLEDs+0x94>)
 80053e4:	22fa      	movs	r2, #250	@ 0xfa
 80053e6:	0112      	lsls	r2, r2, #4
 80053e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 80053ea:	4b09      	ldr	r3, [pc, #36]	@ (8005410 <GPIO_InitPWMLEDs+0x94>)
 80053ec:	22fa      	movs	r2, #250	@ 0xfa
 80053ee:	0112      	lsls	r2, r2, #4
 80053f0:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 80053f2:	4b07      	ldr	r3, [pc, #28]	@ (8005410 <GPIO_InitPWMLEDs+0x94>)
 80053f4:	22fa      	movs	r2, #250	@ 0xfa
 80053f6:	0112      	lsls	r2, r2, #4
 80053f8:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 80053fa:	4b05      	ldr	r3, [pc, #20]	@ (8005410 <GPIO_InitPWMLEDs+0x94>)
 80053fc:	22fa      	movs	r2, #250	@ 0xfa
 80053fe:	0112      	lsls	r2, r2, #4
 8005400:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005402:	46c0      	nop			@ (mov r8, r8)
 8005404:	46bd      	mov	sp, r7
 8005406:	b002      	add	sp, #8
 8005408:	bd80      	pop	{r7, pc}
 800540a:	46c0      	nop			@ (mov r8, r8)
 800540c:	00009c40 	.word	0x00009c40
 8005410:	40000400 	.word	0x40000400

08005414 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	0011      	movs	r1, r2
 8005424:	0018      	movs	r0, r3
 8005426:	f003 fbf7 	bl	8008c18 <HIDS_Init>
}
 800542a:	46c0      	nop			@ (mov r8, r8)
 800542c:	46bd      	mov	sp, r7
 800542e:	b002      	add	sp, #8
 8005430:	bd80      	pop	{r7, pc}

08005432 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8005432:	b580      	push	{r7, lr}
 8005434:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8005436:	f003 fc11 	bl	8008c5c <HIDS_StartMeasurement>
}
 800543a:	46c0      	nop			@ (mov r8, r8)
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	0011      	movs	r1, r2
 8005450:	0018      	movs	r0, r3
 8005452:	f003 fcdf 	bl	8008e14 <HIDS_GetMeasurementValues>
 8005456:	0003      	movs	r3, r0
}
 8005458:	0018      	movs	r0, r3
 800545a:	46bd      	mov	sp, r7
 800545c:	b002      	add	sp, #8
 800545e:	bd80      	pop	{r7, pc}

08005460 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8005464:	f003 fc7a 	bl	8008d5c <HIDS_DeviceConnected>
 8005468:	0003      	movs	r3, r0
}
 800546a:	0018      	movs	r0, r3
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005474:	4b1b      	ldr	r3, [pc, #108]	@ (80054e4 <MX_I2C1_Init+0x74>)
 8005476:	4a1c      	ldr	r2, [pc, #112]	@ (80054e8 <MX_I2C1_Init+0x78>)
 8005478:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800547a:	4b1a      	ldr	r3, [pc, #104]	@ (80054e4 <MX_I2C1_Init+0x74>)
 800547c:	4a1b      	ldr	r2, [pc, #108]	@ (80054ec <MX_I2C1_Init+0x7c>)
 800547e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005480:	4b18      	ldr	r3, [pc, #96]	@ (80054e4 <MX_I2C1_Init+0x74>)
 8005482:	2200      	movs	r2, #0
 8005484:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005486:	4b17      	ldr	r3, [pc, #92]	@ (80054e4 <MX_I2C1_Init+0x74>)
 8005488:	2201      	movs	r2, #1
 800548a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800548c:	4b15      	ldr	r3, [pc, #84]	@ (80054e4 <MX_I2C1_Init+0x74>)
 800548e:	2200      	movs	r2, #0
 8005490:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005492:	4b14      	ldr	r3, [pc, #80]	@ (80054e4 <MX_I2C1_Init+0x74>)
 8005494:	2200      	movs	r2, #0
 8005496:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005498:	4b12      	ldr	r3, [pc, #72]	@ (80054e4 <MX_I2C1_Init+0x74>)
 800549a:	2200      	movs	r2, #0
 800549c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800549e:	4b11      	ldr	r3, [pc, #68]	@ (80054e4 <MX_I2C1_Init+0x74>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80054a4:	4b0f      	ldr	r3, [pc, #60]	@ (80054e4 <MX_I2C1_Init+0x74>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80054aa:	4b0e      	ldr	r3, [pc, #56]	@ (80054e4 <MX_I2C1_Init+0x74>)
 80054ac:	0018      	movs	r0, r3
 80054ae:	f005 f807 	bl	800a4c0 <HAL_I2C_Init>
 80054b2:	1e03      	subs	r3, r0, #0
 80054b4:	d001      	beq.n	80054ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80054b6:	f000 fb2d 	bl	8005b14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80054ba:	4b0a      	ldr	r3, [pc, #40]	@ (80054e4 <MX_I2C1_Init+0x74>)
 80054bc:	2100      	movs	r1, #0
 80054be:	0018      	movs	r0, r3
 80054c0:	f006 ff76 	bl	800c3b0 <HAL_I2CEx_ConfigAnalogFilter>
 80054c4:	1e03      	subs	r3, r0, #0
 80054c6:	d001      	beq.n	80054cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80054c8:	f000 fb24 	bl	8005b14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80054cc:	4b05      	ldr	r3, [pc, #20]	@ (80054e4 <MX_I2C1_Init+0x74>)
 80054ce:	2100      	movs	r1, #0
 80054d0:	0018      	movs	r0, r3
 80054d2:	f006 ffb9 	bl	800c448 <HAL_I2CEx_ConfigDigitalFilter>
 80054d6:	1e03      	subs	r3, r0, #0
 80054d8:	d001      	beq.n	80054de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80054da:	f000 fb1b 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80054de:	46c0      	nop			@ (mov r8, r8)
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	20000af0 	.word	0x20000af0
 80054e8:	40005400 	.word	0x40005400
 80054ec:	00503d58 	.word	0x00503d58

080054f0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80054f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005564 <MX_I2C2_Init+0x74>)
 80054f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005568 <MX_I2C2_Init+0x78>)
 80054f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80054fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005564 <MX_I2C2_Init+0x74>)
 80054fc:	4a1b      	ldr	r2, [pc, #108]	@ (800556c <MX_I2C2_Init+0x7c>)
 80054fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005500:	4b18      	ldr	r3, [pc, #96]	@ (8005564 <MX_I2C2_Init+0x74>)
 8005502:	2200      	movs	r2, #0
 8005504:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005506:	4b17      	ldr	r3, [pc, #92]	@ (8005564 <MX_I2C2_Init+0x74>)
 8005508:	2201      	movs	r2, #1
 800550a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800550c:	4b15      	ldr	r3, [pc, #84]	@ (8005564 <MX_I2C2_Init+0x74>)
 800550e:	2200      	movs	r2, #0
 8005510:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005512:	4b14      	ldr	r3, [pc, #80]	@ (8005564 <MX_I2C2_Init+0x74>)
 8005514:	2200      	movs	r2, #0
 8005516:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005518:	4b12      	ldr	r3, [pc, #72]	@ (8005564 <MX_I2C2_Init+0x74>)
 800551a:	2200      	movs	r2, #0
 800551c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800551e:	4b11      	ldr	r3, [pc, #68]	@ (8005564 <MX_I2C2_Init+0x74>)
 8005520:	2200      	movs	r2, #0
 8005522:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005524:	4b0f      	ldr	r3, [pc, #60]	@ (8005564 <MX_I2C2_Init+0x74>)
 8005526:	2200      	movs	r2, #0
 8005528:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800552a:	4b0e      	ldr	r3, [pc, #56]	@ (8005564 <MX_I2C2_Init+0x74>)
 800552c:	0018      	movs	r0, r3
 800552e:	f004 ffc7 	bl	800a4c0 <HAL_I2C_Init>
 8005532:	1e03      	subs	r3, r0, #0
 8005534:	d001      	beq.n	800553a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005536:	f000 faed 	bl	8005b14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800553a:	4b0a      	ldr	r3, [pc, #40]	@ (8005564 <MX_I2C2_Init+0x74>)
 800553c:	2100      	movs	r1, #0
 800553e:	0018      	movs	r0, r3
 8005540:	f006 ff36 	bl	800c3b0 <HAL_I2CEx_ConfigAnalogFilter>
 8005544:	1e03      	subs	r3, r0, #0
 8005546:	d001      	beq.n	800554c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005548:	f000 fae4 	bl	8005b14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800554c:	4b05      	ldr	r3, [pc, #20]	@ (8005564 <MX_I2C2_Init+0x74>)
 800554e:	2100      	movs	r1, #0
 8005550:	0018      	movs	r0, r3
 8005552:	f006 ff79 	bl	800c448 <HAL_I2CEx_ConfigDigitalFilter>
 8005556:	1e03      	subs	r3, r0, #0
 8005558:	d001      	beq.n	800555e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800555a:	f000 fadb 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800555e:	46c0      	nop			@ (mov r8, r8)
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20000b44 	.word	0x20000b44
 8005568:	40005800 	.word	0x40005800
 800556c:	00503d58 	.word	0x00503d58

08005570 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005570:	b590      	push	{r4, r7, lr}
 8005572:	b08b      	sub	sp, #44	@ 0x2c
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005578:	2414      	movs	r4, #20
 800557a:	193b      	adds	r3, r7, r4
 800557c:	0018      	movs	r0, r3
 800557e:	2314      	movs	r3, #20
 8005580:	001a      	movs	r2, r3
 8005582:	2100      	movs	r1, #0
 8005584:	f011 f992 	bl	80168ac <memset>
  if(i2cHandle->Instance==I2C1)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a5d      	ldr	r2, [pc, #372]	@ (8005704 <HAL_I2C_MspInit+0x194>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d000      	beq.n	8005594 <HAL_I2C_MspInit+0x24>
 8005592:	e083      	b.n	800569c <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005594:	4b5c      	ldr	r3, [pc, #368]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 8005596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005598:	4b5b      	ldr	r3, [pc, #364]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 800559a:	2102      	movs	r1, #2
 800559c:	430a      	orrs	r2, r1
 800559e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80055a0:	4b59      	ldr	r3, [pc, #356]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 80055a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a4:	2202      	movs	r2, #2
 80055a6:	4013      	ands	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]
 80055aa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80055ac:	0021      	movs	r1, r4
 80055ae:	187b      	adds	r3, r7, r1
 80055b0:	22c0      	movs	r2, #192	@ 0xc0
 80055b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055b4:	187b      	adds	r3, r7, r1
 80055b6:	2212      	movs	r2, #18
 80055b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ba:	187b      	adds	r3, r7, r1
 80055bc:	2200      	movs	r2, #0
 80055be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055c0:	187b      	adds	r3, r7, r1
 80055c2:	2203      	movs	r2, #3
 80055c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80055c6:	187b      	adds	r3, r7, r1
 80055c8:	2201      	movs	r2, #1
 80055ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055cc:	187b      	adds	r3, r7, r1
 80055ce:	4a4f      	ldr	r2, [pc, #316]	@ (800570c <HAL_I2C_MspInit+0x19c>)
 80055d0:	0019      	movs	r1, r3
 80055d2:	0010      	movs	r0, r2
 80055d4:	f004 fcf6 	bl	8009fc4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80055d8:	4b4b      	ldr	r3, [pc, #300]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 80055da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055dc:	4b4a      	ldr	r3, [pc, #296]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 80055de:	2180      	movs	r1, #128	@ 0x80
 80055e0:	0389      	lsls	r1, r1, #14
 80055e2:	430a      	orrs	r2, r1
 80055e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80055e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 80055e8:	4a4a      	ldr	r2, [pc, #296]	@ (8005714 <HAL_I2C_MspInit+0x1a4>)
 80055ea:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 80055ec:	4b48      	ldr	r3, [pc, #288]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 80055ee:	2206      	movs	r2, #6
 80055f0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055f2:	4b47      	ldr	r3, [pc, #284]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055f8:	4b45      	ldr	r3, [pc, #276]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055fe:	4b44      	ldr	r3, [pc, #272]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 8005600:	2280      	movs	r2, #128	@ 0x80
 8005602:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005604:	4b42      	ldr	r3, [pc, #264]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 8005606:	2200      	movs	r2, #0
 8005608:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800560a:	4b41      	ldr	r3, [pc, #260]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 800560c:	2200      	movs	r2, #0
 800560e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005610:	4b3f      	ldr	r3, [pc, #252]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 8005612:	2200      	movs	r2, #0
 8005614:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005616:	4b3e      	ldr	r3, [pc, #248]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 8005618:	2200      	movs	r2, #0
 800561a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800561c:	4b3c      	ldr	r3, [pc, #240]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 800561e:	0018      	movs	r0, r3
 8005620:	f004 fa24 	bl	8009a6c <HAL_DMA_Init>
 8005624:	1e03      	subs	r3, r0, #0
 8005626:	d001      	beq.n	800562c <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8005628:	f000 fa74 	bl	8005b14 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a38      	ldr	r2, [pc, #224]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 8005630:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005632:	4b37      	ldr	r3, [pc, #220]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8005638:	4b37      	ldr	r3, [pc, #220]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 800563a:	4a38      	ldr	r2, [pc, #224]	@ (800571c <HAL_I2C_MspInit+0x1ac>)
 800563c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800563e:	4b36      	ldr	r3, [pc, #216]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 8005640:	2206      	movs	r2, #6
 8005642:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005644:	4b34      	ldr	r3, [pc, #208]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 8005646:	2210      	movs	r2, #16
 8005648:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800564a:	4b33      	ldr	r3, [pc, #204]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 800564c:	2200      	movs	r2, #0
 800564e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005650:	4b31      	ldr	r3, [pc, #196]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 8005652:	2280      	movs	r2, #128	@ 0x80
 8005654:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005656:	4b30      	ldr	r3, [pc, #192]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 8005658:	2200      	movs	r2, #0
 800565a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800565c:	4b2e      	ldr	r3, [pc, #184]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 800565e:	2200      	movs	r2, #0
 8005660:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005662:	4b2d      	ldr	r3, [pc, #180]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 8005664:	2200      	movs	r2, #0
 8005666:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005668:	4b2b      	ldr	r3, [pc, #172]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 800566a:	2200      	movs	r2, #0
 800566c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800566e:	4b2a      	ldr	r3, [pc, #168]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 8005670:	0018      	movs	r0, r3
 8005672:	f004 f9fb 	bl	8009a6c <HAL_DMA_Init>
 8005676:	1e03      	subs	r3, r0, #0
 8005678:	d001      	beq.n	800567e <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800567a:	f000 fa4b 	bl	8005b14 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a25      	ldr	r2, [pc, #148]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 8005682:	639a      	str	r2, [r3, #56]	@ 0x38
 8005684:	4b24      	ldr	r3, [pc, #144]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800568a:	2200      	movs	r2, #0
 800568c:	2100      	movs	r1, #0
 800568e:	2017      	movs	r0, #23
 8005690:	f004 f9ba 	bl	8009a08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8005694:	2017      	movs	r0, #23
 8005696:	f004 f9cc 	bl	8009a32 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800569a:	e02e      	b.n	80056fa <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005720 <HAL_I2C_MspInit+0x1b0>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d129      	bne.n	80056fa <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056a6:	4b18      	ldr	r3, [pc, #96]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 80056a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056aa:	4b17      	ldr	r3, [pc, #92]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 80056ac:	2102      	movs	r1, #2
 80056ae:	430a      	orrs	r2, r1
 80056b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80056b2:	4b15      	ldr	r3, [pc, #84]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 80056b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b6:	2202      	movs	r2, #2
 80056b8:	4013      	ands	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80056be:	2114      	movs	r1, #20
 80056c0:	187b      	adds	r3, r7, r1
 80056c2:	22c0      	movs	r2, #192	@ 0xc0
 80056c4:	0112      	lsls	r2, r2, #4
 80056c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056c8:	187b      	adds	r3, r7, r1
 80056ca:	2212      	movs	r2, #18
 80056cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ce:	187b      	adds	r3, r7, r1
 80056d0:	2200      	movs	r2, #0
 80056d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056d4:	187b      	adds	r3, r7, r1
 80056d6:	2203      	movs	r2, #3
 80056d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80056da:	187b      	adds	r3, r7, r1
 80056dc:	2206      	movs	r2, #6
 80056de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056e0:	187b      	adds	r3, r7, r1
 80056e2:	4a0a      	ldr	r2, [pc, #40]	@ (800570c <HAL_I2C_MspInit+0x19c>)
 80056e4:	0019      	movs	r1, r3
 80056e6:	0010      	movs	r0, r2
 80056e8:	f004 fc6c 	bl	8009fc4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80056ec:	4b06      	ldr	r3, [pc, #24]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 80056ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056f0:	4b05      	ldr	r3, [pc, #20]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 80056f2:	2180      	movs	r1, #128	@ 0x80
 80056f4:	03c9      	lsls	r1, r1, #15
 80056f6:	430a      	orrs	r2, r1
 80056f8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80056fa:	46c0      	nop			@ (mov r8, r8)
 80056fc:	46bd      	mov	sp, r7
 80056fe:	b00b      	add	sp, #44	@ 0x2c
 8005700:	bd90      	pop	{r4, r7, pc}
 8005702:	46c0      	nop			@ (mov r8, r8)
 8005704:	40005400 	.word	0x40005400
 8005708:	40021000 	.word	0x40021000
 800570c:	50000400 	.word	0x50000400
 8005710:	20000b98 	.word	0x20000b98
 8005714:	40020030 	.word	0x40020030
 8005718:	20000be0 	.word	0x20000be0
 800571c:	4002001c 	.word	0x4002001c
 8005720:	40005800 	.word	0x40005800

08005724 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8005728:	4b10      	ldr	r3, [pc, #64]	@ (800576c <MX_I2S2_Init+0x48>)
 800572a:	4a11      	ldr	r2, [pc, #68]	@ (8005770 <MX_I2S2_Init+0x4c>)
 800572c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800572e:	4b0f      	ldr	r3, [pc, #60]	@ (800576c <MX_I2S2_Init+0x48>)
 8005730:	22c0      	movs	r2, #192	@ 0xc0
 8005732:	0092      	lsls	r2, r2, #2
 8005734:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8005736:	4b0d      	ldr	r3, [pc, #52]	@ (800576c <MX_I2S2_Init+0x48>)
 8005738:	2210      	movs	r2, #16
 800573a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 800573c:	4b0b      	ldr	r3, [pc, #44]	@ (800576c <MX_I2S2_Init+0x48>)
 800573e:	2205      	movs	r2, #5
 8005740:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8005742:	4b0a      	ldr	r3, [pc, #40]	@ (800576c <MX_I2S2_Init+0x48>)
 8005744:	2200      	movs	r2, #0
 8005746:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8005748:	4b08      	ldr	r3, [pc, #32]	@ (800576c <MX_I2S2_Init+0x48>)
 800574a:	22fa      	movs	r2, #250	@ 0xfa
 800574c:	0152      	lsls	r2, r2, #5
 800574e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8005750:	4b06      	ldr	r3, [pc, #24]	@ (800576c <MX_I2S2_Init+0x48>)
 8005752:	2208      	movs	r2, #8
 8005754:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8005756:	4b05      	ldr	r3, [pc, #20]	@ (800576c <MX_I2S2_Init+0x48>)
 8005758:	0018      	movs	r0, r3
 800575a:	f006 fec1 	bl	800c4e0 <HAL_I2S_Init>
 800575e:	1e03      	subs	r3, r0, #0
 8005760:	d001      	beq.n	8005766 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8005762:	f000 f9d7 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8005766:	46c0      	nop			@ (mov r8, r8)
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20000c28 	.word	0x20000c28
 8005770:	40003800 	.word	0x40003800

08005774 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8005774:	b590      	push	{r4, r7, lr}
 8005776:	b089      	sub	sp, #36	@ 0x24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800577c:	240c      	movs	r4, #12
 800577e:	193b      	adds	r3, r7, r4
 8005780:	0018      	movs	r0, r3
 8005782:	2314      	movs	r3, #20
 8005784:	001a      	movs	r2, r3
 8005786:	2100      	movs	r1, #0
 8005788:	f011 f890 	bl	80168ac <memset>
  if(i2sHandle->Instance==SPI2)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a2d      	ldr	r2, [pc, #180]	@ (8005848 <HAL_I2S_MspInit+0xd4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d154      	bne.n	8005840 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005796:	4b2d      	ldr	r3, [pc, #180]	@ (800584c <HAL_I2S_MspInit+0xd8>)
 8005798:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800579a:	4b2c      	ldr	r3, [pc, #176]	@ (800584c <HAL_I2S_MspInit+0xd8>)
 800579c:	2180      	movs	r1, #128	@ 0x80
 800579e:	01c9      	lsls	r1, r1, #7
 80057a0:	430a      	orrs	r2, r1
 80057a2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057a4:	4b29      	ldr	r3, [pc, #164]	@ (800584c <HAL_I2S_MspInit+0xd8>)
 80057a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a8:	4b28      	ldr	r3, [pc, #160]	@ (800584c <HAL_I2S_MspInit+0xd8>)
 80057aa:	2102      	movs	r1, #2
 80057ac:	430a      	orrs	r2, r1
 80057ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80057b0:	4b26      	ldr	r3, [pc, #152]	@ (800584c <HAL_I2S_MspInit+0xd8>)
 80057b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b4:	2202      	movs	r2, #2
 80057b6:	4013      	ands	r3, r2
 80057b8:	60bb      	str	r3, [r7, #8]
 80057ba:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80057bc:	193b      	adds	r3, r7, r4
 80057be:	22b0      	movs	r2, #176	@ 0xb0
 80057c0:	0212      	lsls	r2, r2, #8
 80057c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057c4:	0021      	movs	r1, r4
 80057c6:	187b      	adds	r3, r7, r1
 80057c8:	2202      	movs	r2, #2
 80057ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057cc:	187b      	adds	r3, r7, r1
 80057ce:	2200      	movs	r2, #0
 80057d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057d2:	187b      	adds	r3, r7, r1
 80057d4:	2200      	movs	r2, #0
 80057d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80057d8:	187b      	adds	r3, r7, r1
 80057da:	2200      	movs	r2, #0
 80057dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057de:	187b      	adds	r3, r7, r1
 80057e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005850 <HAL_I2S_MspInit+0xdc>)
 80057e2:	0019      	movs	r1, r3
 80057e4:	0010      	movs	r0, r2
 80057e6:	f004 fbed 	bl	8009fc4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80057ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 80057ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005858 <HAL_I2S_MspInit+0xe4>)
 80057ee:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 80057f0:	4b18      	ldr	r3, [pc, #96]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 80057f2:	2202      	movs	r2, #2
 80057f4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057f6:	4b17      	ldr	r3, [pc, #92]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057fc:	4b15      	ldr	r3, [pc, #84]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 80057fe:	2200      	movs	r2, #0
 8005800:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005802:	4b14      	ldr	r3, [pc, #80]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 8005804:	2280      	movs	r2, #128	@ 0x80
 8005806:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005808:	4b12      	ldr	r3, [pc, #72]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 800580a:	2280      	movs	r2, #128	@ 0x80
 800580c:	0052      	lsls	r2, r2, #1
 800580e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005810:	4b10      	ldr	r3, [pc, #64]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 8005812:	2280      	movs	r2, #128	@ 0x80
 8005814:	00d2      	lsls	r2, r2, #3
 8005816:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8005818:	4b0e      	ldr	r3, [pc, #56]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 800581a:	2220      	movs	r2, #32
 800581c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800581e:	4b0d      	ldr	r3, [pc, #52]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 8005820:	2200      	movs	r2, #0
 8005822:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005824:	4b0b      	ldr	r3, [pc, #44]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 8005826:	0018      	movs	r0, r3
 8005828:	f004 f920 	bl	8009a6c <HAL_DMA_Init>
 800582c:	1e03      	subs	r3, r0, #0
 800582e:	d001      	beq.n	8005834 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8005830:	f000 f970 	bl	8005b14 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a07      	ldr	r2, [pc, #28]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 8005838:	631a      	str	r2, [r3, #48]	@ 0x30
 800583a:	4b06      	ldr	r3, [pc, #24]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005840:	46c0      	nop			@ (mov r8, r8)
 8005842:	46bd      	mov	sp, r7
 8005844:	b009      	add	sp, #36	@ 0x24
 8005846:	bd90      	pop	{r4, r7, pc}
 8005848:	40003800 	.word	0x40003800
 800584c:	40021000 	.word	0x40021000
 8005850:	50000400 	.word	0x50000400
 8005854:	20000c64 	.word	0x20000c64
 8005858:	40020044 	.word	0x40020044

0800585c <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a0c      	ldr	r2, [pc, #48]	@ (800589c <HAL_I2S_MspDeInit+0x40>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d111      	bne.n	8005892 <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800586e:	4b0c      	ldr	r3, [pc, #48]	@ (80058a0 <HAL_I2S_MspDeInit+0x44>)
 8005870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005872:	4b0b      	ldr	r3, [pc, #44]	@ (80058a0 <HAL_I2S_MspDeInit+0x44>)
 8005874:	490b      	ldr	r1, [pc, #44]	@ (80058a4 <HAL_I2S_MspDeInit+0x48>)
 8005876:	400a      	ands	r2, r1
 8005878:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 800587a:	23b0      	movs	r3, #176	@ 0xb0
 800587c:	021b      	lsls	r3, r3, #8
 800587e:	4a0a      	ldr	r2, [pc, #40]	@ (80058a8 <HAL_I2S_MspDeInit+0x4c>)
 8005880:	0019      	movs	r1, r3
 8005882:	0010      	movs	r0, r2
 8005884:	f004 fd1c 	bl	800a2c0 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588c:	0018      	movs	r0, r3
 800588e:	f004 f965 	bl	8009b5c <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 8005892:	46c0      	nop			@ (mov r8, r8)
 8005894:	46bd      	mov	sp, r7
 8005896:	b002      	add	sp, #8
 8005898:	bd80      	pop	{r7, pc}
 800589a:	46c0      	nop			@ (mov r8, r8)
 800589c:	40003800 	.word	0x40003800
 80058a0:	40021000 	.word	0x40021000
 80058a4:	ffffbfff 	.word	0xffffbfff
 80058a8:	50000400 	.word	0x50000400

080058ac <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  testDone = true;
 80058b0:	4b33      	ldr	r3, [pc, #204]	@ (8005980 <SetTestDone+0xd4>)
 80058b2:	2201      	movs	r2, #1
 80058b4:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 80058b6:	23fa      	movs	r3, #250	@ 0xfa
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	0018      	movs	r0, r3
 80058bc:	f003 fc56 	bl	800916c <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 80058c0:	4b30      	ldr	r3, [pc, #192]	@ (8005984 <SetTestDone+0xd8>)
 80058c2:	2201      	movs	r2, #1
 80058c4:	2101      	movs	r1, #1
 80058c6:	0018      	movs	r0, r3
 80058c8:	f004 fddc 	bl	800a484 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80058cc:	2380      	movs	r3, #128	@ 0x80
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	482c      	ldr	r0, [pc, #176]	@ (8005984 <SetTestDone+0xd8>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	0019      	movs	r1, r3
 80058d6:	f004 fdd5 	bl	800a484 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 80058da:	2380      	movs	r3, #128	@ 0x80
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4829      	ldr	r0, [pc, #164]	@ (8005984 <SetTestDone+0xd8>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	0019      	movs	r1, r3
 80058e4:	f004 fdce 	bl	800a484 <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 40000;
 80058e8:	2380      	movs	r3, #128	@ 0x80
 80058ea:	05db      	lsls	r3, r3, #23
 80058ec:	4a26      	ldr	r2, [pc, #152]	@ (8005988 <SetTestDone+0xdc>)
 80058ee:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 40000;
 80058f0:	2380      	movs	r3, #128	@ 0x80
 80058f2:	05db      	lsls	r3, r3, #23
 80058f4:	4a24      	ldr	r2, [pc, #144]	@ (8005988 <SetTestDone+0xdc>)
 80058f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 0;
 80058f8:	2380      	movs	r3, #128	@ 0x80
 80058fa:	05db      	lsls	r3, r3, #23
 80058fc:	2200      	movs	r2, #0
 80058fe:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 8005900:	4b22      	ldr	r3, [pc, #136]	@ (800598c <SetTestDone+0xe0>)
 8005902:	22fa      	movs	r2, #250	@ 0xfa
 8005904:	0112      	lsls	r2, r2, #4
 8005906:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8005908:	4b20      	ldr	r3, [pc, #128]	@ (800598c <SetTestDone+0xe0>)
 800590a:	22fa      	movs	r2, #250	@ 0xfa
 800590c:	0112      	lsls	r2, r2, #4
 800590e:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 0;
 8005910:	4b1e      	ldr	r3, [pc, #120]	@ (800598c <SetTestDone+0xe0>)
 8005912:	2200      	movs	r2, #0
 8005914:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(1000);
 8005916:	23fa      	movs	r3, #250	@ 0xfa
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	0018      	movs	r0, r3
 800591c:	f003 fc26 	bl	800916c <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8005920:	4b18      	ldr	r3, [pc, #96]	@ (8005984 <SetTestDone+0xd8>)
 8005922:	2201      	movs	r2, #1
 8005924:	2101      	movs	r1, #1
 8005926:	0018      	movs	r0, r3
 8005928:	f004 fdac 	bl	800a484 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800592c:	2380      	movs	r3, #128	@ 0x80
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	4814      	ldr	r0, [pc, #80]	@ (8005984 <SetTestDone+0xd8>)
 8005932:	2201      	movs	r2, #1
 8005934:	0019      	movs	r1, r3
 8005936:	f004 fda5 	bl	800a484 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800593a:	2380      	movs	r3, #128	@ 0x80
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4811      	ldr	r0, [pc, #68]	@ (8005984 <SetTestDone+0xd8>)
 8005940:	2201      	movs	r2, #1
 8005942:	0019      	movs	r1, r3
 8005944:	f004 fd9e 	bl	800a484 <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 40000;
 8005948:	2380      	movs	r3, #128	@ 0x80
 800594a:	05db      	lsls	r3, r3, #23
 800594c:	4a0e      	ldr	r2, [pc, #56]	@ (8005988 <SetTestDone+0xdc>)
 800594e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 40000;
 8005950:	2380      	movs	r3, #128	@ 0x80
 8005952:	05db      	lsls	r3, r3, #23
 8005954:	4a0c      	ldr	r2, [pc, #48]	@ (8005988 <SetTestDone+0xdc>)
 8005956:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 40000;
 8005958:	2380      	movs	r3, #128	@ 0x80
 800595a:	05db      	lsls	r3, r3, #23
 800595c:	4a0a      	ldr	r2, [pc, #40]	@ (8005988 <SetTestDone+0xdc>)
 800595e:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 8005960:	4b0a      	ldr	r3, [pc, #40]	@ (800598c <SetTestDone+0xe0>)
 8005962:	22fa      	movs	r2, #250	@ 0xfa
 8005964:	0112      	lsls	r2, r2, #4
 8005966:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8005968:	4b08      	ldr	r3, [pc, #32]	@ (800598c <SetTestDone+0xe0>)
 800596a:	22fa      	movs	r2, #250	@ 0xfa
 800596c:	0112      	lsls	r2, r2, #4
 800596e:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8005970:	4b06      	ldr	r3, [pc, #24]	@ (800598c <SetTestDone+0xe0>)
 8005972:	22fa      	movs	r2, #250	@ 0xfa
 8005974:	0112      	lsls	r2, r2, #4
 8005976:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 8005978:	46c0      	nop			@ (mov r8, r8)
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	46c0      	nop			@ (mov r8, r8)
 8005980:	20000cac 	.word	0x20000cac
 8005984:	50000400 	.word	0x50000400
 8005988:	00009c40 	.word	0x00009c40
 800598c:	40000400 	.word	0x40000400

08005990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005996:	f003 fb79 	bl	800908c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800599a:	f000 f849 	bl	8005a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800599e:	f7ff fbef 	bl	8005180 <MX_GPIO_Init>
  MX_DMA_Init();
 80059a2:	f7ff fb67 	bl	8005074 <MX_DMA_Init>
  MX_I2C1_Init();
 80059a6:	f7ff fd63 	bl	8005470 <MX_I2C1_Init>
  MX_I2S2_Init();
 80059aa:	f7ff febb 	bl	8005724 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80059ae:	f002 fe23 	bl	80085f8 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80059b2:	f7ff fd9d 	bl	80054f0 <MX_I2C2_Init>
  MX_TIM2_Init();
 80059b6:	f002 fca1 	bl	80082fc <MX_TIM2_Init>
  MX_TIM3_Init();
 80059ba:	f002 fd13 	bl	80083e4 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 80059be:	f002 fe4f 	bl	8008660 <MX_USART4_UART_Init>
  MX_ADC_Init();
 80059c2:	f7ff faa5 	bl	8004f10 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 80059c6:	f00f fc8f 	bl	80152e8 <MX_USB_DEVICE_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 80059ca:	4a12      	ldr	r2, [pc, #72]	@ (8005a14 <main+0x84>)
 80059cc:	4b12      	ldr	r3, [pc, #72]	@ (8005a18 <main+0x88>)
 80059ce:	0011      	movs	r1, r2
 80059d0:	0018      	movs	r0, r3
 80059d2:	f7ff fcd3 	bl	800537c <GPIO_InitPWMLEDs>
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 80059d6:	f003 fbbf 	bl	8009158 <HAL_GetTick>
 80059da:	0003      	movs	r3, r0
 80059dc:	22fa      	movs	r2, #250	@ 0xfa
 80059de:	0092      	lsls	r2, r2, #2
 80059e0:	4694      	mov	ip, r2
 80059e2:	4463      	add	r3, ip
 80059e4:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 80059e6:	2003      	movs	r0, #3
 80059e8:	f003 f83a 	bl	8008a60 <SetVerboseLevel>
  BinaryReleaseInfo();
 80059ec:	f003 f850 	bl	8008a90 <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 80059f0:	4b0a      	ldr	r3, [pc, #40]	@ (8005a1c <main+0x8c>)
 80059f2:	4a0b      	ldr	r2, [pc, #44]	@ (8005a20 <main+0x90>)
 80059f4:	490b      	ldr	r1, [pc, #44]	@ (8005a24 <main+0x94>)
 80059f6:	480c      	ldr	r0, [pc, #48]	@ (8005a28 <main+0x98>)
 80059f8:	f7ff fb62 	bl	80050c0 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone){
 80059fc:	4b0b      	ldr	r3, [pc, #44]	@ (8005a2c <main+0x9c>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d004      	beq.n	8005a0e <main+0x7e>
      UpkeepGadget();
 8005a04:	f7ff fb89 	bl	800511a <UpkeepGadget>
      ESP_Upkeep();
 8005a08:	f7ff f808 	bl	8004a1c <ESP_Upkeep>
 8005a0c:	e7f6      	b.n	80059fc <main+0x6c>
    }
    else{
      Gadget_Test();
 8005a0e:	f7ff fb7d 	bl	800510c <Gadget_Test>
    if(testDone){
 8005a12:	e7f3      	b.n	80059fc <main+0x6c>
 8005a14:	20002628 	.word	0x20002628
 8005a18:	200025e8 	.word	0x200025e8
 8005a1c:	20000a94 	.word	0x20000a94
 8005a20:	20002720 	.word	0x20002720
 8005a24:	20000c28 	.word	0x20000c28
 8005a28:	20000af0 	.word	0x20000af0
 8005a2c:	20000cac 	.word	0x20000cac

08005a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a30:	b590      	push	{r4, r7, lr}
 8005a32:	b09d      	sub	sp, #116	@ 0x74
 8005a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a36:	2438      	movs	r4, #56	@ 0x38
 8005a38:	193b      	adds	r3, r7, r4
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	2338      	movs	r3, #56	@ 0x38
 8005a3e:	001a      	movs	r2, r3
 8005a40:	2100      	movs	r1, #0
 8005a42:	f010 ff33 	bl	80168ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a46:	2324      	movs	r3, #36	@ 0x24
 8005a48:	18fb      	adds	r3, r7, r3
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	2314      	movs	r3, #20
 8005a4e:	001a      	movs	r2, r3
 8005a50:	2100      	movs	r1, #0
 8005a52:	f010 ff2b 	bl	80168ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a56:	003b      	movs	r3, r7
 8005a58:	0018      	movs	r0, r3
 8005a5a:	2324      	movs	r3, #36	@ 0x24
 8005a5c:	001a      	movs	r2, r3
 8005a5e:	2100      	movs	r1, #0
 8005a60:	f010 ff24 	bl	80168ac <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a64:	4b29      	ldr	r3, [pc, #164]	@ (8005b0c <SystemClock_Config+0xdc>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a29      	ldr	r2, [pc, #164]	@ (8005b10 <SystemClock_Config+0xe0>)
 8005a6a:	401a      	ands	r2, r3
 8005a6c:	4b27      	ldr	r3, [pc, #156]	@ (8005b0c <SystemClock_Config+0xdc>)
 8005a6e:	2180      	movs	r1, #128	@ 0x80
 8005a70:	0109      	lsls	r1, r1, #4
 8005a72:	430a      	orrs	r2, r1
 8005a74:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8005a76:	0021      	movs	r1, r4
 8005a78:	187b      	adds	r3, r7, r1
 8005a7a:	2222      	movs	r2, #34	@ 0x22
 8005a7c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a7e:	187b      	adds	r3, r7, r1
 8005a80:	2201      	movs	r2, #1
 8005a82:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005a84:	187b      	adds	r3, r7, r1
 8005a86:	2210      	movs	r2, #16
 8005a88:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005a8a:	187b      	adds	r3, r7, r1
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005a90:	187b      	adds	r3, r7, r1
 8005a92:	2200      	movs	r2, #0
 8005a94:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a96:	187b      	adds	r3, r7, r1
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f008 fec1 	bl	800e820 <HAL_RCC_OscConfig>
 8005a9e:	1e03      	subs	r3, r0, #0
 8005aa0:	d001      	beq.n	8005aa6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8005aa2:	f000 f837 	bl	8005b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005aa6:	2124      	movs	r1, #36	@ 0x24
 8005aa8:	187b      	adds	r3, r7, r1
 8005aaa:	220f      	movs	r2, #15
 8005aac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005aae:	187b      	adds	r3, r7, r1
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ab4:	187b      	adds	r3, r7, r1
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005aba:	187b      	adds	r3, r7, r1
 8005abc:	2200      	movs	r2, #0
 8005abe:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ac0:	187b      	adds	r3, r7, r1
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005ac6:	187b      	adds	r3, r7, r1
 8005ac8:	2100      	movs	r1, #0
 8005aca:	0018      	movs	r0, r3
 8005acc:	f009 fa7c 	bl	800efc8 <HAL_RCC_ClockConfig>
 8005ad0:	1e03      	subs	r3, r0, #0
 8005ad2:	d001      	beq.n	8005ad8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8005ad4:	f000 f81e 	bl	8005b14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8005ad8:	003b      	movs	r3, r7
 8005ada:	2249      	movs	r2, #73	@ 0x49
 8005adc:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005ade:	003b      	movs	r3, r7
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005ae4:	003b      	movs	r3, r7
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	615a      	str	r2, [r3, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8005aea:	003b      	movs	r3, r7
 8005aec:	2280      	movs	r2, #128	@ 0x80
 8005aee:	04d2      	lsls	r2, r2, #19
 8005af0:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005af2:	003b      	movs	r3, r7
 8005af4:	0018      	movs	r0, r3
 8005af6:	f009 fc8b 	bl	800f410 <HAL_RCCEx_PeriphCLKConfig>
 8005afa:	1e03      	subs	r3, r0, #0
 8005afc:	d001      	beq.n	8005b02 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8005afe:	f000 f809 	bl	8005b14 <Error_Handler>
  }
}
 8005b02:	46c0      	nop			@ (mov r8, r8)
 8005b04:	46bd      	mov	sp, r7
 8005b06:	b01d      	add	sp, #116	@ 0x74
 8005b08:	bd90      	pop	{r4, r7, pc}
 8005b0a:	46c0      	nop			@ (mov r8, r8)
 8005b0c:	40007000 	.word	0x40007000
 8005b10:	ffffe7ff 	.word	0xffffe7ff

08005b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b18:	b672      	cpsid	i
}
 8005b1a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b1c:	46c0      	nop			@ (mov r8, r8)
 8005b1e:	e7fd      	b.n	8005b1c <Error_Handler+0x8>

08005b20 <HT_StartMeasurementWrapper>:
static EnabledMeasurements MeasEnabled;
static MeasurementTested MeasTest;
static MeasurementState MeasState = MEAS_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;

static void HT_StartMeasurementWrapper(void) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8005b24:	f7ff fc85 	bl	8005432 <HT_StartMeasurement>
}
 8005b28:	46c0      	nop			@ (mov r8, r8)
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8005b34:	4a04      	ldr	r2, [pc, #16]	@ (8005b48 <HT_IsMeasurementDoneWrapper+0x18>)
 8005b36:	4b05      	ldr	r3, [pc, #20]	@ (8005b4c <HT_IsMeasurementDoneWrapper+0x1c>)
 8005b38:	0011      	movs	r1, r2
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f7ff fc80 	bl	8005440 <HT_GetMeasurementValues>
 8005b40:	0003      	movs	r3, r0
}
 8005b42:	0018      	movs	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20000cb4 	.word	0x20000cb4
 8005b4c:	20000cb0 	.word	0x20000cb0

08005b50 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8005b54:	f7ff faf7 	bl	8005146 <Gas_StartMeasurement>
}
 8005b58:	46c0      	nop			@ (mov r8, r8)
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8005b64:	4b03      	ldr	r3, [pc, #12]	@ (8005b74 <VOC_IsMeasurementDoneWrapper+0x14>)
 8005b66:	0018      	movs	r0, r3
 8005b68:	f7ff faf4 	bl	8005154 <Gas_GetMeasurementValues>
 8005b6c:	0003      	movs	r3, r0
}
 8005b6e:	0018      	movs	r0, r3
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20000cb8 	.word	0x20000cb8

08005b78 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
}
 8005b7c:	46c0      	nop			@ (mov r8, r8)
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8005b82:	b580      	push	{r7, lr}
 8005b84:	af00      	add	r7, sp, #0
  return true;
 8005b86:	2301      	movs	r3, #1
}
 8005b88:	0018      	movs	r0, r3
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128); // Dont init like this.
 8005b92:	23fa      	movs	r3, #250	@ 0xfa
 8005b94:	015b      	lsls	r3, r3, #5
 8005b96:	2180      	movs	r1, #128	@ 0x80
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f000 fb7f 	bl	800629c <MIC_Start>
}
 8005b9e:	46c0      	nop			@ (mov r8, r8)
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 8005ba8:	f000 fdf4 	bl	8006794 <MIC_MeasurementDone>
 8005bac:	0003      	movs	r3, r0
}
 8005bae:	0018      	movs	r0, r3
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <Meas_TestStart>:
void Meas_TestStart(){
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  MIC_StartMeasurementWrapper();
 8005bb8:	f7ff ffe9 	bl	8005b8e <MIC_StartMeasurementWrapper>
}
 8005bbc:	46c0      	nop			@ (mov r8, r8)
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <MIC_IsTestMeasurementDoneWrapper>:
static bool MIC_IsTestMeasurementDoneWrapper(void) {
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8005bc6:	f000 fe03 	bl	80067d0 <MIC_TestMeasurementDone>
 8005bca:	0003      	movs	r3, r0
}
 8005bcc:	0018      	movs	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <testInit>:
void testInit(){
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8005bd8:	4b07      	ldr	r3, [pc, #28]	@ (8005bf8 <testInit+0x24>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 8005bde:	4b06      	ldr	r3, [pc, #24]	@ (8005bf8 <testInit+0x24>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 8005be4:	4b04      	ldr	r3, [pc, #16]	@ (8005bf8 <testInit+0x24>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 8005bea:	4b03      	ldr	r3, [pc, #12]	@ (8005bf8 <testInit+0x24>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	705a      	strb	r2, [r3, #1]
}
 8005bf0:	46c0      	nop			@ (mov r8, r8)
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	46c0      	nop			@ (mov r8, r8)
 8005bf8:	20000d04 	.word	0x20000d04

08005bfc <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8005bfc:	b5b0      	push	{r4, r5, r7, lr}
 8005bfe:	b096      	sub	sp, #88	@ 0x58
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 8005c08:	4b84      	ldr	r3, [pc, #528]	@ (8005e1c <Meas_Init+0x220>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	701a      	strb	r2, [r3, #0]
  testInit();
 8005c0e:	f7ff ffe1 	bl	8005bd4 <testInit>
  batteryInit(ADC_HANDLER);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	0018      	movs	r0, r3
 8005c16:	f7fd fc99 	bl	800354c <batteryInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8005c1a:	4b81      	ldr	r3, [pc, #516]	@ (8005e20 <Meas_Init+0x224>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d103      	bne.n	8005c2a <Meas_Init+0x2e>
 8005c22:	4b7f      	ldr	r3, [pc, #508]	@ (8005e20 <Meas_Init+0x224>)
 8005c24:	785b      	ldrb	r3, [r3, #1]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d072      	beq.n	8005d10 <Meas_Init+0x114>
    I2CSensors_Init(sensorI2C);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f7ff f8fd 	bl	8004e2c <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8005c32:	f7ff fc15 	bl	8005460 <HT_DeviceConnected>
 8005c36:	0003      	movs	r3, r0
 8005c38:	001a      	movs	r2, r3
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	4053      	eors	r3, r2
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00c      	beq.n	8005c5e <Meas_Init+0x62>
       Error("Humidity / Temperature sensor NOT connected!");
 8005c44:	4a77      	ldr	r2, [pc, #476]	@ (8005e24 <Meas_Init+0x228>)
 8005c46:	4b78      	ldr	r3, [pc, #480]	@ (8005e28 <Meas_Init+0x22c>)
 8005c48:	0019      	movs	r1, r3
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	f002 fe8c 	bl	8008968 <CreateLine>
       MeasTest.HT_Tested = false;
 8005c50:	4b76      	ldr	r3, [pc, #472]	@ (8005e2c <Meas_Init+0x230>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 8005c56:	4b72      	ldr	r3, [pc, #456]	@ (8005e20 <Meas_Init+0x224>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	e008      	b.n	8005c70 <Meas_Init+0x74>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
      MeasTest.HT_Tested = true;
 8005c5e:	4b73      	ldr	r3, [pc, #460]	@ (8005e2c <Meas_Init+0x230>)
 8005c60:	2201      	movs	r2, #1
 8005c62:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8005c64:	4a72      	ldr	r2, [pc, #456]	@ (8005e30 <Meas_Init+0x234>)
 8005c66:	4b73      	ldr	r3, [pc, #460]	@ (8005e34 <Meas_Init+0x238>)
 8005c68:	0019      	movs	r1, r3
 8005c6a:	2003      	movs	r0, #3
 8005c6c:	f002 fe7c 	bl	8008968 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 8005c70:	f7ff fa7d 	bl	800516e <Gas_DeviceConnected>
 8005c74:	0003      	movs	r3, r0
 8005c76:	001a      	movs	r2, r3
 8005c78:	2301      	movs	r3, #1
 8005c7a:	4053      	eors	r3, r2
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00c      	beq.n	8005c9c <Meas_Init+0xa0>
      MeasTest.VOC_Tested = false;
 8005c82:	4b6a      	ldr	r3, [pc, #424]	@ (8005e2c <Meas_Init+0x230>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8005c88:	4a6b      	ldr	r2, [pc, #428]	@ (8005e38 <Meas_Init+0x23c>)
 8005c8a:	4b67      	ldr	r3, [pc, #412]	@ (8005e28 <Meas_Init+0x22c>)
 8005c8c:	0019      	movs	r1, r3
 8005c8e:	2001      	movs	r0, #1
 8005c90:	f002 fe6a 	bl	8008968 <CreateLine>
       // SGP Device is NOT connected, turning led on RED.
//       HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
//       HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//       HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
       MeasEnabled.VOC_measurementEnabled = false;
 8005c94:	4b62      	ldr	r3, [pc, #392]	@ (8005e20 <Meas_Init+0x224>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	705a      	strb	r2, [r3, #1]
 8005c9a:	e008      	b.n	8005cae <Meas_Init+0xb2>
    }else{
      MeasTest.VOC_Tested = true;
 8005c9c:	4b63      	ldr	r3, [pc, #396]	@ (8005e2c <Meas_Init+0x230>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8005ca2:	4a66      	ldr	r2, [pc, #408]	@ (8005e3c <Meas_Init+0x240>)
 8005ca4:	4b63      	ldr	r3, [pc, #396]	@ (8005e34 <Meas_Init+0x238>)
 8005ca6:	0019      	movs	r1, r3
 8005ca8:	2003      	movs	r0, #3
 8005caa:	f002 fe5d 	bl	8008968 <CreateLine>
      // HT Device is connected, turning led on GREEN.
//      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
//      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8005cae:	4b5f      	ldr	r3, [pc, #380]	@ (8005e2c <Meas_Init+0x230>)
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d018      	beq.n	8005ce8 <Meas_Init+0xec>
 8005cb6:	4b5d      	ldr	r3, [pc, #372]	@ (8005e2c <Meas_Init+0x230>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d014      	beq.n	8005ce8 <Meas_Init+0xec>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8005cbe:	4b60      	ldr	r3, [pc, #384]	@ (8005e40 <Meas_Init+0x244>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	0018      	movs	r0, r3
 8005cc6:	f004 fbdd 	bl	800a484 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8005cca:	2380      	movs	r3, #128	@ 0x80
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	485c      	ldr	r0, [pc, #368]	@ (8005e40 <Meas_Init+0x244>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	0019      	movs	r1, r3
 8005cd4:	f004 fbd6 	bl	800a484 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005cd8:	2380      	movs	r3, #128	@ 0x80
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4858      	ldr	r0, [pc, #352]	@ (8005e40 <Meas_Init+0x244>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	0019      	movs	r1, r3
 8005ce2:	f004 fbcf 	bl	800a484 <HAL_GPIO_WritePin>
 8005ce6:	e013      	b.n	8005d10 <Meas_Init+0x114>
    }
    else{
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8005ce8:	4b55      	ldr	r3, [pc, #340]	@ (8005e40 <Meas_Init+0x244>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	2101      	movs	r1, #1
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f004 fbc8 	bl	800a484 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8005cf4:	2380      	movs	r3, #128	@ 0x80
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	4851      	ldr	r0, [pc, #324]	@ (8005e40 <Meas_Init+0x244>)
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	f004 fbc1 	bl	800a484 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005d02:	2380      	movs	r3, #128	@ 0x80
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	484e      	ldr	r0, [pc, #312]	@ (8005e40 <Meas_Init+0x244>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	0019      	movs	r1, r3
 8005d0c:	f004 fbba 	bl	800a484 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8005d10:	4b43      	ldr	r3, [pc, #268]	@ (8005e20 <Meas_Init+0x224>)
 8005d12:	78db      	ldrb	r3, [r3, #3]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <Meas_Init+0x128>
    MIC_Init(micI2s);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f000 fa4a 	bl	80061b4 <MIC_Init>
    Meas_TestStart();
 8005d20:	f7ff ff48 	bl	8005bb4 <Meas_TestStart>
  }
  uint8_t offset = 0;
 8005d24:	2557      	movs	r5, #87	@ 0x57
 8005d26:	197b      	adds	r3, r7, r5
 8005d28:	2200      	movs	r2, #0
 8005d2a:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8005d2c:	197b      	adds	r3, r7, r5
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	197a      	adds	r2, r7, r5
 8005d32:	1c59      	adds	r1, r3, #1
 8005d34:	7011      	strb	r1, [r2, #0]
 8005d36:	4a3a      	ldr	r2, [pc, #232]	@ (8005e20 <Meas_Init+0x224>)
 8005d38:	7814      	ldrb	r4, [r2, #0]
 8005d3a:	4a42      	ldr	r2, [pc, #264]	@ (8005e44 <Meas_Init+0x248>)
 8005d3c:	0119      	lsls	r1, r3, #4
 8005d3e:	4842      	ldr	r0, [pc, #264]	@ (8005e48 <Meas_Init+0x24c>)
 8005d40:	5088      	str	r0, [r1, r2]
 8005d42:	4940      	ldr	r1, [pc, #256]	@ (8005e44 <Meas_Init+0x248>)
 8005d44:	011a      	lsls	r2, r3, #4
 8005d46:	188a      	adds	r2, r1, r2
 8005d48:	3204      	adds	r2, #4
 8005d4a:	4940      	ldr	r1, [pc, #256]	@ (8005e4c <Meas_Init+0x250>)
 8005d4c:	6011      	str	r1, [r2, #0]
 8005d4e:	493d      	ldr	r1, [pc, #244]	@ (8005e44 <Meas_Init+0x248>)
 8005d50:	011a      	lsls	r2, r3, #4
 8005d52:	188a      	adds	r2, r1, r2
 8005d54:	3208      	adds	r2, #8
 8005d56:	493e      	ldr	r1, [pc, #248]	@ (8005e50 <Meas_Init+0x254>)
 8005d58:	6011      	str	r1, [r2, #0]
 8005d5a:	4a3a      	ldr	r2, [pc, #232]	@ (8005e44 <Meas_Init+0x248>)
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	18d3      	adds	r3, r2, r3
 8005d60:	330c      	adds	r3, #12
 8005d62:	1c22      	adds	r2, r4, #0
 8005d64:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8005d66:	197b      	adds	r3, r7, r5
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	197a      	adds	r2, r7, r5
 8005d6c:	1c59      	adds	r1, r3, #1
 8005d6e:	7011      	strb	r1, [r2, #0]
 8005d70:	4a2b      	ldr	r2, [pc, #172]	@ (8005e20 <Meas_Init+0x224>)
 8005d72:	7854      	ldrb	r4, [r2, #1]
 8005d74:	4a33      	ldr	r2, [pc, #204]	@ (8005e44 <Meas_Init+0x248>)
 8005d76:	0119      	lsls	r1, r3, #4
 8005d78:	4836      	ldr	r0, [pc, #216]	@ (8005e54 <Meas_Init+0x258>)
 8005d7a:	5088      	str	r0, [r1, r2]
 8005d7c:	4931      	ldr	r1, [pc, #196]	@ (8005e44 <Meas_Init+0x248>)
 8005d7e:	011a      	lsls	r2, r3, #4
 8005d80:	188a      	adds	r2, r1, r2
 8005d82:	3204      	adds	r2, #4
 8005d84:	4934      	ldr	r1, [pc, #208]	@ (8005e58 <Meas_Init+0x25c>)
 8005d86:	6011      	str	r1, [r2, #0]
 8005d88:	492e      	ldr	r1, [pc, #184]	@ (8005e44 <Meas_Init+0x248>)
 8005d8a:	011a      	lsls	r2, r3, #4
 8005d8c:	188a      	adds	r2, r1, r2
 8005d8e:	3208      	adds	r2, #8
 8005d90:	4932      	ldr	r1, [pc, #200]	@ (8005e5c <Meas_Init+0x260>)
 8005d92:	6011      	str	r1, [r2, #0]
 8005d94:	4a2b      	ldr	r2, [pc, #172]	@ (8005e44 <Meas_Init+0x248>)
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	18d3      	adds	r3, r2, r3
 8005d9a:	330c      	adds	r3, #12
 8005d9c:	1c22      	adds	r2, r4, #0
 8005d9e:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8005da0:	197b      	adds	r3, r7, r5
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	197a      	adds	r2, r7, r5
 8005da6:	1c59      	adds	r1, r3, #1
 8005da8:	7011      	strb	r1, [r2, #0]
 8005daa:	4a1d      	ldr	r2, [pc, #116]	@ (8005e20 <Meas_Init+0x224>)
 8005dac:	7894      	ldrb	r4, [r2, #2]
 8005dae:	4a25      	ldr	r2, [pc, #148]	@ (8005e44 <Meas_Init+0x248>)
 8005db0:	0119      	lsls	r1, r3, #4
 8005db2:	482b      	ldr	r0, [pc, #172]	@ (8005e60 <Meas_Init+0x264>)
 8005db4:	5088      	str	r0, [r1, r2]
 8005db6:	4923      	ldr	r1, [pc, #140]	@ (8005e44 <Meas_Init+0x248>)
 8005db8:	011a      	lsls	r2, r3, #4
 8005dba:	188a      	adds	r2, r1, r2
 8005dbc:	3204      	adds	r2, #4
 8005dbe:	4929      	ldr	r1, [pc, #164]	@ (8005e64 <Meas_Init+0x268>)
 8005dc0:	6011      	str	r1, [r2, #0]
 8005dc2:	4920      	ldr	r1, [pc, #128]	@ (8005e44 <Meas_Init+0x248>)
 8005dc4:	011a      	lsls	r2, r3, #4
 8005dc6:	188a      	adds	r2, r1, r2
 8005dc8:	3208      	adds	r2, #8
 8005dca:	4927      	ldr	r1, [pc, #156]	@ (8005e68 <Meas_Init+0x26c>)
 8005dcc:	6011      	str	r1, [r2, #0]
 8005dce:	4a1d      	ldr	r2, [pc, #116]	@ (8005e44 <Meas_Init+0x248>)
 8005dd0:	011b      	lsls	r3, r3, #4
 8005dd2:	18d3      	adds	r3, r2, r3
 8005dd4:	330c      	adds	r3, #12
 8005dd6:	1c22      	adds	r2, r4, #0
 8005dd8:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
 8005dda:	197b      	adds	r3, r7, r5
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	197a      	adds	r2, r7, r5
 8005de0:	1c59      	adds	r1, r3, #1
 8005de2:	7011      	strb	r1, [r2, #0]
 8005de4:	4a0e      	ldr	r2, [pc, #56]	@ (8005e20 <Meas_Init+0x224>)
 8005de6:	78d4      	ldrb	r4, [r2, #3]
 8005de8:	4a16      	ldr	r2, [pc, #88]	@ (8005e44 <Meas_Init+0x248>)
 8005dea:	0119      	lsls	r1, r3, #4
 8005dec:	481f      	ldr	r0, [pc, #124]	@ (8005e6c <Meas_Init+0x270>)
 8005dee:	5088      	str	r0, [r1, r2]
 8005df0:	4914      	ldr	r1, [pc, #80]	@ (8005e44 <Meas_Init+0x248>)
 8005df2:	011a      	lsls	r2, r3, #4
 8005df4:	188a      	adds	r2, r1, r2
 8005df6:	3204      	adds	r2, #4
 8005df8:	491d      	ldr	r1, [pc, #116]	@ (8005e70 <Meas_Init+0x274>)
 8005dfa:	6011      	str	r1, [r2, #0]
 8005dfc:	4911      	ldr	r1, [pc, #68]	@ (8005e44 <Meas_Init+0x248>)
 8005dfe:	011a      	lsls	r2, r3, #4
 8005e00:	188a      	adds	r2, r1, r2
 8005e02:	3208      	adds	r2, #8
 8005e04:	491b      	ldr	r1, [pc, #108]	@ (8005e74 <Meas_Init+0x278>)
 8005e06:	6011      	str	r1, [r2, #0]
 8005e08:	4a0e      	ldr	r2, [pc, #56]	@ (8005e44 <Meas_Init+0x248>)
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	18d3      	adds	r3, r2, r3
 8005e0e:	330c      	adds	r3, #12
 8005e10:	1c22      	adds	r2, r4, #0
 8005e12:	701a      	strb	r2, [r3, #0]
}
 8005e14:	46c0      	nop			@ (mov r8, r8)
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b016      	add	sp, #88	@ 0x58
 8005e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e1c:	20000d08 	.word	0x20000d08
 8005e20:	20000d00 	.word	0x20000d00
 8005e24:	08019b5c 	.word	0x08019b5c
 8005e28:	08019b8c 	.word	0x08019b8c
 8005e2c:	20000d04 	.word	0x20000d04
 8005e30:	08019b90 	.word	0x08019b90
 8005e34:	08019bbc 	.word	0x08019bbc
 8005e38:	08019bc0 	.word	0x08019bc0
 8005e3c:	08019bdc 	.word	0x08019bdc
 8005e40:	50000400 	.word	0x50000400
 8005e44:	20000cc0 	.word	0x20000cc0
 8005e48:	08005b21 	.word	0x08005b21
 8005e4c:	08005b31 	.word	0x08005b31
 8005e50:	20000cbc 	.word	0x20000cbc
 8005e54:	08005b51 	.word	0x08005b51
 8005e58:	08005b61 	.word	0x08005b61
 8005e5c:	20000cbd 	.word	0x20000cbd
 8005e60:	08005b79 	.word	0x08005b79
 8005e64:	08005b83 	.word	0x08005b83
 8005e68:	20000cbe 	.word	0x20000cbe
 8005e6c:	08005b8f 	.word	0x08005b8f
 8005e70:	08005ba5 	.word	0x08005ba5
 8005e74:	20000cbf 	.word	0x20000cbf

08005e78 <StartMeasurements>:

void StartMeasurements(void) {
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005e7c:	4b10      	ldr	r3, [pc, #64]	@ (8005ec0 <StartMeasurements+0x48>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	e015      	b.n	8005eb0 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8005e84:	4b0e      	ldr	r3, [pc, #56]	@ (8005ec0 <StartMeasurements+0x48>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	4a0e      	ldr	r2, [pc, #56]	@ (8005ec4 <StartMeasurements+0x4c>)
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	18d3      	adds	r3, r2, r3
 8005e8e:	330c      	adds	r3, #12
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d006      	beq.n	8005ea4 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8005e96:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec0 <StartMeasurements+0x48>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	001a      	movs	r2, r3
 8005e9c:	4b09      	ldr	r3, [pc, #36]	@ (8005ec4 <StartMeasurements+0x4c>)
 8005e9e:	0112      	lsls	r2, r2, #4
 8005ea0:	58d3      	ldr	r3, [r2, r3]
 8005ea2:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005ea4:	4b06      	ldr	r3, [pc, #24]	@ (8005ec0 <StartMeasurements+0x48>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	4b04      	ldr	r3, [pc, #16]	@ (8005ec0 <StartMeasurements+0x48>)
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	4b03      	ldr	r3, [pc, #12]	@ (8005ec0 <StartMeasurements+0x48>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d9e5      	bls.n	8005e84 <StartMeasurements+0xc>
    }
  }
}
 8005eb8:	46c0      	nop			@ (mov r8, r8)
 8005eba:	46c0      	nop			@ (mov r8, r8)
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	20000d09 	.word	0x20000d09
 8005ec4:	20000cc0 	.word	0x20000cc0

08005ec8 <ResetMeasurements>:

void ResetMeasurements(void) {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8005ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8005efc <ResetMeasurements+0x34>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8005efc <ResetMeasurements+0x34>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8005ed8:	4b08      	ldr	r3, [pc, #32]	@ (8005efc <ResetMeasurements+0x34>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8005ede:	4b07      	ldr	r3, [pc, #28]	@ (8005efc <ResetMeasurements+0x34>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8005ee4:	4b05      	ldr	r3, [pc, #20]	@ (8005efc <ResetMeasurements+0x34>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8005eea:	4b04      	ldr	r3, [pc, #16]	@ (8005efc <ResetMeasurements+0x34>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8005ef0:	4b02      	ldr	r3, [pc, #8]	@ (8005efc <ResetMeasurements+0x34>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	73da      	strb	r2, [r3, #15]
}
 8005ef6:	46c0      	nop			@ (mov r8, r8)
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	20000cb0 	.word	0x20000cb0

08005f00 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005f04:	4b18      	ldr	r3, [pc, #96]	@ (8005f68 <MeasurementsCompleted+0x68>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	e024      	b.n	8005f56 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8005f0c:	4b16      	ldr	r3, [pc, #88]	@ (8005f68 <MeasurementsCompleted+0x68>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	4a16      	ldr	r2, [pc, #88]	@ (8005f6c <MeasurementsCompleted+0x6c>)
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	18d3      	adds	r3, r2, r3
 8005f16:	330c      	adds	r3, #12
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d015      	beq.n	8005f4a <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8005f1e:	4b12      	ldr	r3, [pc, #72]	@ (8005f68 <MeasurementsCompleted+0x68>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	4a12      	ldr	r2, [pc, #72]	@ (8005f6c <MeasurementsCompleted+0x6c>)
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	18d3      	adds	r3, r2, r3
 8005f28:	3304      	adds	r3, #4
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4798      	blx	r3
 8005f2e:	1e03      	subs	r3, r0, #0
 8005f30:	d009      	beq.n	8005f46 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8005f32:	4b0d      	ldr	r3, [pc, #52]	@ (8005f68 <MeasurementsCompleted+0x68>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	4a0d      	ldr	r2, [pc, #52]	@ (8005f6c <MeasurementsCompleted+0x6c>)
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	18d3      	adds	r3, r2, r3
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2201      	movs	r2, #1
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	e001      	b.n	8005f4a <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8005f46:	2300      	movs	r3, #0
 8005f48:	e00a      	b.n	8005f60 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005f4a:	4b07      	ldr	r3, [pc, #28]	@ (8005f68 <MeasurementsCompleted+0x68>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	4b05      	ldr	r3, [pc, #20]	@ (8005f68 <MeasurementsCompleted+0x68>)
 8005f54:	701a      	strb	r2, [r3, #0]
 8005f56:	4b04      	ldr	r3, [pc, #16]	@ (8005f68 <MeasurementsCompleted+0x68>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d9d6      	bls.n	8005f0c <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8005f5e:	2301      	movs	r3, #1
}
 8005f60:	0018      	movs	r0, r3
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	46c0      	nop			@ (mov r8, r8)
 8005f68:	20000d09 	.word	0x20000d09
 8005f6c:	20000cc0 	.word	0x20000cc0

08005f70 <Meas_Upkeep>:

void Meas_Upkeep(void) {
 8005f70:	b5b0      	push	{r4, r5, r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af04      	add	r7, sp, #16
  switch(MeasState) {
 8005f76:	4b30      	ldr	r3, [pc, #192]	@ (8006038 <Meas_Upkeep+0xc8>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b05      	cmp	r3, #5
 8005f7c:	d854      	bhi.n	8006028 <Meas_Upkeep+0xb8>
 8005f7e:	009a      	lsls	r2, r3, #2
 8005f80:	4b2e      	ldr	r3, [pc, #184]	@ (800603c <Meas_Upkeep+0xcc>)
 8005f82:	18d3      	adds	r3, r2, r3
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:
    Debug("Measurements are turned off.");
 8005f88:	4a2d      	ldr	r2, [pc, #180]	@ (8006040 <Meas_Upkeep+0xd0>)
 8005f8a:	4b2e      	ldr	r3, [pc, #184]	@ (8006044 <Meas_Upkeep+0xd4>)
 8005f8c:	0019      	movs	r1, r3
 8005f8e:	2003      	movs	r0, #3
 8005f90:	f002 fcea 	bl	8008968 <CreateLine>
    break;
 8005f94:	e04d      	b.n	8006032 <Meas_Upkeep+0xc2>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8005f96:	f7ff ff97 	bl	8005ec8 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8005f9a:	4b27      	ldr	r3, [pc, #156]	@ (8006038 <Meas_Upkeep+0xc8>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	701a      	strb	r2, [r3, #0]
    break;
 8005fa0:	e047      	b.n	8006032 <Meas_Upkeep+0xc2>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8005fa2:	f7ff ff69 	bl	8005e78 <StartMeasurements>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8005fa6:	4b24      	ldr	r3, [pc, #144]	@ (8006038 <Meas_Upkeep+0xc8>)
 8005fa8:	2202      	movs	r2, #2
 8005faa:	701a      	strb	r2, [r3, #0]
   break;
 8005fac:	e041      	b.n	8006032 <Meas_Upkeep+0xc2>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8005fae:	f7ff ffa7 	bl	8005f00 <MeasurementsCompleted>
 8005fb2:	1e03      	subs	r3, r0, #0
 8005fb4:	d03c      	beq.n	8006030 <Meas_Upkeep+0xc0>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8005fb6:	4b20      	ldr	r3, [pc, #128]	@ (8006038 <Meas_Upkeep+0xc8>)
 8005fb8:	2203      	movs	r2, #3
 8005fba:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005fbc:	e038      	b.n	8006030 <Meas_Upkeep+0xc0>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8005fbe:	4a22      	ldr	r2, [pc, #136]	@ (8006048 <Meas_Upkeep+0xd8>)
 8005fc0:	4b20      	ldr	r3, [pc, #128]	@ (8006044 <Meas_Upkeep+0xd4>)
 8005fc2:	0019      	movs	r1, r3
 8005fc4:	2003      	movs	r0, #3
 8005fc6:	f002 fccf 	bl	8008968 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8005fca:	4b20      	ldr	r3, [pc, #128]	@ (800604c <Meas_Upkeep+0xdc>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	4a20      	ldr	r2, [pc, #128]	@ (8006050 <Meas_Upkeep+0xe0>)
 8005fd0:	491c      	ldr	r1, [pc, #112]	@ (8006044 <Meas_Upkeep+0xd4>)
 8005fd2:	2003      	movs	r0, #3
 8005fd4:	f002 fcc8 	bl	8008968 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8005fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800604c <Meas_Upkeep+0xdc>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	1c18      	adds	r0, r3, #0
 8005fde:	f7fd f9bf 	bl	8003360 <__aeabi_f2d>
 8005fe2:	0004      	movs	r4, r0
 8005fe4:	000d      	movs	r5, r1
 8005fe6:	4b19      	ldr	r3, [pc, #100]	@ (800604c <Meas_Upkeep+0xdc>)
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	1c18      	adds	r0, r3, #0
 8005fec:	f7fd f9b8 	bl	8003360 <__aeabi_f2d>
 8005ff0:	0002      	movs	r2, r0
 8005ff2:	000b      	movs	r3, r1
 8005ff4:	4817      	ldr	r0, [pc, #92]	@ (8006054 <Meas_Upkeep+0xe4>)
 8005ff6:	4913      	ldr	r1, [pc, #76]	@ (8006044 <Meas_Upkeep+0xd4>)
 8005ff8:	9202      	str	r2, [sp, #8]
 8005ffa:	9303      	str	r3, [sp, #12]
 8005ffc:	9400      	str	r4, [sp, #0]
 8005ffe:	9501      	str	r5, [sp, #4]
 8006000:	0002      	movs	r2, r0
 8006002:	2003      	movs	r0, #3
 8006004:	f002 fcb0 	bl	8008968 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8006008:	4b10      	ldr	r3, [pc, #64]	@ (800604c <Meas_Upkeep+0xdc>)
 800600a:	6858      	ldr	r0, [r3, #4]
 800600c:	4b0f      	ldr	r3, [pc, #60]	@ (800604c <Meas_Upkeep+0xdc>)
 800600e:	6819      	ldr	r1, [r3, #0]
 8006010:	4b0e      	ldr	r3, [pc, #56]	@ (800604c <Meas_Upkeep+0xdc>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	b29b      	uxth	r3, r3
 8006016:	001a      	movs	r2, r3
 8006018:	f7fd fb4a 	bl	80036b0 <setMeasurement>
    checkCharges();
 800601c:	f7fd faa4 	bl	8003568 <checkCharges>
    //setStamp
    MeasState = MEAS_STATE_INIT;
 8006020:	4b05      	ldr	r3, [pc, #20]	@ (8006038 <Meas_Upkeep+0xc8>)
 8006022:	2200      	movs	r2, #0
 8006024:	701a      	strb	r2, [r3, #0]
    break;
 8006026:	e004      	b.n	8006032 <Meas_Upkeep+0xc2>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8006028:	4b03      	ldr	r3, [pc, #12]	@ (8006038 <Meas_Upkeep+0xc8>)
 800602a:	2200      	movs	r2, #0
 800602c:	701a      	strb	r2, [r3, #0]
    break;
 800602e:	e000      	b.n	8006032 <Meas_Upkeep+0xc2>
    break;
 8006030:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006032:	46c0      	nop			@ (mov r8, r8)
 8006034:	46bd      	mov	sp, r7
 8006036:	bdb0      	pop	{r4, r5, r7, pc}
 8006038:	20000d08 	.word	0x20000d08
 800603c:	0801a1f8 	.word	0x0801a1f8
 8006040:	08019bf4 	.word	0x08019bf4
 8006044:	08019bbc 	.word	0x08019bbc
 8006048:	08019c14 	.word	0x08019c14
 800604c:	20000cb0 	.word	0x20000cb0
 8006050:	08019c28 	.word	0x08019c28
 8006054:	08019c40 	.word	0x08019c40

08006058 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8006058:	b590      	push	{r4, r7, lr}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	1d3b      	adds	r3, r7, #4
 8006060:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8006062:	240f      	movs	r4, #15
 8006064:	193b      	adds	r3, r7, r4
 8006066:	2200      	movs	r2, #0
 8006068:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 800606a:	4b20      	ldr	r3, [pc, #128]	@ (80060ec <Meas_SetEnabledSensors+0x94>)
 800606c:	1d3a      	adds	r2, r7, #4
 800606e:	6812      	ldr	r2, [r2, #0]
 8006070:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8006072:	193b      	adds	r3, r7, r4
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	193a      	adds	r2, r7, r4
 8006078:	1c59      	adds	r1, r3, #1
 800607a:	7011      	strb	r1, [r2, #0]
 800607c:	0018      	movs	r0, r3
 800607e:	1d3b      	adds	r3, r7, #4
 8006080:	7819      	ldrb	r1, [r3, #0]
 8006082:	4a1b      	ldr	r2, [pc, #108]	@ (80060f0 <Meas_SetEnabledSensors+0x98>)
 8006084:	0103      	lsls	r3, r0, #4
 8006086:	18d3      	adds	r3, r2, r3
 8006088:	330c      	adds	r3, #12
 800608a:	1c0a      	adds	r2, r1, #0
 800608c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 800608e:	193b      	adds	r3, r7, r4
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	193a      	adds	r2, r7, r4
 8006094:	1c59      	adds	r1, r3, #1
 8006096:	7011      	strb	r1, [r2, #0]
 8006098:	0018      	movs	r0, r3
 800609a:	1d3b      	adds	r3, r7, #4
 800609c:	7859      	ldrb	r1, [r3, #1]
 800609e:	4a14      	ldr	r2, [pc, #80]	@ (80060f0 <Meas_SetEnabledSensors+0x98>)
 80060a0:	0103      	lsls	r3, r0, #4
 80060a2:	18d3      	adds	r3, r2, r3
 80060a4:	330c      	adds	r3, #12
 80060a6:	1c0a      	adds	r2, r1, #0
 80060a8:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 80060aa:	193b      	adds	r3, r7, r4
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	193a      	adds	r2, r7, r4
 80060b0:	1c59      	adds	r1, r3, #1
 80060b2:	7011      	strb	r1, [r2, #0]
 80060b4:	0018      	movs	r0, r3
 80060b6:	1d3b      	adds	r3, r7, #4
 80060b8:	7899      	ldrb	r1, [r3, #2]
 80060ba:	4a0d      	ldr	r2, [pc, #52]	@ (80060f0 <Meas_SetEnabledSensors+0x98>)
 80060bc:	0103      	lsls	r3, r0, #4
 80060be:	18d3      	adds	r3, r2, r3
 80060c0:	330c      	adds	r3, #12
 80060c2:	1c0a      	adds	r2, r1, #0
 80060c4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 80060c6:	193b      	adds	r3, r7, r4
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	193a      	adds	r2, r7, r4
 80060cc:	1c59      	adds	r1, r3, #1
 80060ce:	7011      	strb	r1, [r2, #0]
 80060d0:	0018      	movs	r0, r3
 80060d2:	1d3b      	adds	r3, r7, #4
 80060d4:	78d9      	ldrb	r1, [r3, #3]
 80060d6:	4a06      	ldr	r2, [pc, #24]	@ (80060f0 <Meas_SetEnabledSensors+0x98>)
 80060d8:	0103      	lsls	r3, r0, #4
 80060da:	18d3      	adds	r3, r2, r3
 80060dc:	330c      	adds	r3, #12
 80060de:	1c0a      	adds	r2, r1, #0
 80060e0:	701a      	strb	r2, [r3, #0]
}
 80060e2:	46c0      	nop			@ (mov r8, r8)
 80060e4:	46bd      	mov	sp, r7
 80060e6:	b005      	add	sp, #20
 80060e8:	bd90      	pop	{r4, r7, pc}
 80060ea:	46c0      	nop			@ (mov r8, r8)
 80060ec:	20000d00 	.word	0x20000d00
 80060f0:	20000cc0 	.word	0x20000cc0

080060f4 <Meas_Test>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}


void Meas_Test(){
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 80060f8:	4b25      	ldr	r3, [pc, #148]	@ (8006190 <Meas_Test+0x9c>)
 80060fa:	78db      	ldrb	r3, [r3, #3]
 80060fc:	2201      	movs	r2, #1
 80060fe:	4053      	eors	r3, r2
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <Meas_Test+0x16>
    ESP_WakeTest();
 8006106:	f7fe fb77 	bl	80047f8 <ESP_WakeTest>
  }
  if(!MeasTest.MIC_Tested){
 800610a:	4b21      	ldr	r3, [pc, #132]	@ (8006190 <Meas_Test+0x9c>)
 800610c:	789b      	ldrb	r3, [r3, #2]
 800610e:	2201      	movs	r2, #1
 8006110:	4053      	eors	r3, r2
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	d01f      	beq.n	8006158 <Meas_Test+0x64>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8006118:	f7ff fd53 	bl	8005bc2 <MIC_IsTestMeasurementDoneWrapper>
 800611c:	1e03      	subs	r3, r0, #0
 800611e:	d00f      	beq.n	8006140 <Meas_Test+0x4c>
      MeasTest.MIC_Tested = true;
 8006120:	4b1b      	ldr	r3, [pc, #108]	@ (8006190 <Meas_Test+0x9c>)
 8006122:	2201      	movs	r2, #1
 8006124:	709a      	strb	r2, [r3, #2]
      TIM2 -> CCR1 = 40000;
 8006126:	2380      	movs	r3, #128	@ 0x80
 8006128:	05db      	lsls	r3, r3, #23
 800612a:	4a1a      	ldr	r2, [pc, #104]	@ (8006194 <Meas_Test+0xa0>)
 800612c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 0;
 800612e:	2380      	movs	r3, #128	@ 0x80
 8006130:	05db      	lsls	r3, r3, #23
 8006132:	2200      	movs	r2, #0
 8006134:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 40000;
 8006136:	2380      	movs	r3, #128	@ 0x80
 8006138:	05db      	lsls	r3, r3, #23
 800613a:	4a16      	ldr	r2, [pc, #88]	@ (8006194 <Meas_Test+0xa0>)
 800613c:	641a      	str	r2, [r3, #64]	@ 0x40
 800613e:	e00b      	b.n	8006158 <Meas_Test+0x64>
    }
    else{
      TIM2 -> CCR1 = 0;
 8006140:	2380      	movs	r3, #128	@ 0x80
 8006142:	05db      	lsls	r3, r3, #23
 8006144:	2200      	movs	r2, #0
 8006146:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 40000;
 8006148:	2380      	movs	r3, #128	@ 0x80
 800614a:	05db      	lsls	r3, r3, #23
 800614c:	4a11      	ldr	r2, [pc, #68]	@ (8006194 <Meas_Test+0xa0>)
 800614e:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 40000;
 8006150:	2380      	movs	r3, #128	@ 0x80
 8006152:	05db      	lsls	r3, r3, #23
 8006154:	4a0f      	ldr	r2, [pc, #60]	@ (8006194 <Meas_Test+0xa0>)
 8006156:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 8006158:	4b0d      	ldr	r3, [pc, #52]	@ (8006190 <Meas_Test+0x9c>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d013      	beq.n	8006188 <Meas_Test+0x94>
 8006160:	4b0b      	ldr	r3, [pc, #44]	@ (8006190 <Meas_Test+0x9c>)
 8006162:	785b      	ldrb	r3, [r3, #1]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00f      	beq.n	8006188 <Meas_Test+0x94>
 8006168:	4b09      	ldr	r3, [pc, #36]	@ (8006190 <Meas_Test+0x9c>)
 800616a:	78db      	ldrb	r3, [r3, #3]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00b      	beq.n	8006188 <Meas_Test+0x94>
 8006170:	4b07      	ldr	r3, [pc, #28]	@ (8006190 <Meas_Test+0x9c>)
 8006172:	789b      	ldrb	r3, [r3, #2]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <Meas_Test+0x94>
    Debug("Test completed");
 8006178:	4a07      	ldr	r2, [pc, #28]	@ (8006198 <Meas_Test+0xa4>)
 800617a:	4b08      	ldr	r3, [pc, #32]	@ (800619c <Meas_Test+0xa8>)
 800617c:	0019      	movs	r1, r3
 800617e:	2003      	movs	r0, #3
 8006180:	f002 fbf2 	bl	8008968 <CreateLine>
    SetTestDone();
 8006184:	f7ff fb92 	bl	80058ac <SetTestDone>
  }
}
 8006188:	46c0      	nop			@ (mov r8, r8)
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	46c0      	nop			@ (mov r8, r8)
 8006190:	20000d04 	.word	0x20000d04
 8006194:	00009c40 	.word	0x00009c40
 8006198:	08019c74 	.word	0x08019c74
 800619c:	08019bbc 	.word	0x08019bbc

080061a0 <SetESPMeasurementDone>:

void SetESPMeasurementDone(){
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 80061a4:	4b02      	ldr	r3, [pc, #8]	@ (80061b0 <SetESPMeasurementDone+0x10>)
 80061a6:	2201      	movs	r2, #1
 80061a8:	70da      	strb	r2, [r3, #3]
}
 80061aa:	46c0      	nop			@ (mov r8, r8)
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20000d04 	.word	0x20000d04

080061b4 <MIC_Init>:
float sample[NUMBER_OF_SAMPLES];




void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	4b03      	ldr	r3, [pc, #12]	@ (80061cc <MIC_Init+0x18>)
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	46c0      	nop			@ (mov r8, r8)
 80061c4:	46bd      	mov	sp, r7
 80061c6:	b002      	add	sp, #8
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	46c0      	nop			@ (mov r8, r8)
 80061cc:	20000d0c 	.word	0x20000d0c

080061d0 <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 80061d8:	4b0c      	ldr	r3, [pc, #48]	@ (800620c <UpdateSampleRate+0x3c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d00e      	beq.n	8006202 <UpdateSampleRate+0x32>
    return;
  }

  HAL_I2S_DeInit(I2SHandle);
 80061e4:	4b09      	ldr	r3, [pc, #36]	@ (800620c <UpdateSampleRate+0x3c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	0018      	movs	r0, r3
 80061ea:	f006 fa6b 	bl	800c6c4 <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 80061ee:	4b07      	ldr	r3, [pc, #28]	@ (800620c <UpdateSampleRate+0x3c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 80061f6:	4b05      	ldr	r3, [pc, #20]	@ (800620c <UpdateSampleRate+0x3c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	0018      	movs	r0, r3
 80061fc:	f006 f970 	bl	800c4e0 <HAL_I2S_Init>
 8006200:	e000      	b.n	8006204 <UpdateSampleRate+0x34>
    return;
 8006202:	46c0      	nop			@ (mov r8, r8)
}
 8006204:	46bd      	mov	sp, r7
 8006206:	b002      	add	sp, #8
 8006208:	bd80      	pop	{r7, pc}
 800620a:	46c0      	nop			@ (mov r8, r8)
 800620c:	20000d0c 	.word	0x20000d0c

08006210 <ConvertAudio>:

static float ConvertAudio(uint16_t* data) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b08a      	sub	sp, #40	@ 0x28
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t MSP;
  uint32_t LSP;
  int32_t signedAudioValue;
  float Division = 8388607.0; //Reference?
 8006218:	4b1e      	ldr	r3, [pc, #120]	@ (8006294 <ConvertAudio+0x84>)
 800621a:	623b      	str	r3, [r7, #32]
  float adjustedAudioValue = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	61fb      	str	r3, [r7, #28]
  uint32_t audioValue = 0;
 8006220:	2300      	movs	r3, #0
 8006222:	627b      	str	r3, [r7, #36]	@ 0x24

  int32_t value = 12345;
 8006224:	4b1c      	ldr	r3, [pc, #112]	@ (8006298 <ConvertAudio+0x88>)
 8006226:	61bb      	str	r3, [r7, #24]
  uint16_t msb=(value & 0x0FFFFFF)>>9;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	125b      	asrs	r3, r3, #9
 800622c:	b29a      	uxth	r2, r3
 800622e:	2316      	movs	r3, #22
 8006230:	18fb      	adds	r3, r7, r3
 8006232:	0452      	lsls	r2, r2, #17
 8006234:	0c52      	lsrs	r2, r2, #17
 8006236:	801a      	strh	r2, [r3, #0]
  uint16_t lsb=(value & 0x1FF)<<7;
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	01da      	lsls	r2, r3, #7
 800623c:	2314      	movs	r3, #20
 800623e:	18fb      	adds	r3, r7, r3
 8006240:	801a      	strh	r2, [r3, #0]
  MSP = data[0]<<9;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	025b      	lsls	r3, r3, #9
 8006248:	613b      	str	r3, [r7, #16]
  LSP = (data[1]&0xFF80)>>7;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3302      	adds	r3, #2
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	09db      	lsrs	r3, r3, #7
 8006252:	b29b      	uxth	r3, r3
 8006254:	60fb      	str	r3, [r7, #12]
  audioValue = MSP | LSP;
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	627b      	str	r3, [r7, #36]	@ 0x24
  if((0x800000 & audioValue) != 0){
 800625e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006260:	2380      	movs	r3, #128	@ 0x80
 8006262:	041b      	lsls	r3, r3, #16
 8006264:	4013      	ands	r3, r2
 8006266:	d004      	beq.n	8006272 <ConvertAudio+0x62>
    audioValue = 0xFF000000 | audioValue;
 8006268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626a:	22ff      	movs	r2, #255	@ 0xff
 800626c:	0612      	lsls	r2, r2, #24
 800626e:	4313      	orrs	r3, r2
 8006270:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  signedAudioValue = (int32_t)audioValue;
 8006272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006274:	60bb      	str	r3, [r7, #8]
  adjustedAudioValue = ((float)signedAudioValue/Division);
 8006276:	68b8      	ldr	r0, [r7, #8]
 8006278:	f7fb f928 	bl	80014cc <__aeabi_i2f>
 800627c:	1c03      	adds	r3, r0, #0
 800627e:	6a39      	ldr	r1, [r7, #32]
 8006280:	1c18      	adds	r0, r3, #0
 8006282:	f7fa fc25 	bl	8000ad0 <__aeabi_fdiv>
 8006286:	1c03      	adds	r3, r0, #0
 8006288:	61fb      	str	r3, [r7, #28]
//  if(audioValue < 0){
//    audioValue = 0xFFFFFFFF-audioValue;
//  }
//  dB = 20 * log10(audioValue / Division);

  return adjustedAudioValue;
 800628a:	69fb      	ldr	r3, [r7, #28]
}
 800628c:	1c18      	adds	r0, r3, #0
 800628e:	46bd      	mov	sp, r7
 8006290:	b00a      	add	sp, #40	@ 0x28
 8006292:	bd80      	pop	{r7, pc}
 8006294:	4afffffe 	.word	0x4afffffe
 8006298:	00003039 	.word	0x00003039

0800629c <MIC_Start>:
//  arm_rfft_q15(&fft_instance, sample, output);
//  arm_abs_q15(output, output, NUMBER_OF_SAMPLES);
//  GetAllOctaves();
//}

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 800629c:	b5b0      	push	{r4, r5, r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	000a      	movs	r2, r1
 80062a6:	1cbb      	adds	r3, r7, #2
 80062a8:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 80062aa:	4b20      	ldr	r3, [pc, #128]	@ (800632c <MIC_Start+0x90>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d106      	bne.n	80062c0 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 80062b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006330 <MIC_Start+0x94>)
 80062b4:	4b1f      	ldr	r3, [pc, #124]	@ (8006334 <MIC_Start+0x98>)
 80062b6:	0019      	movs	r1, r3
 80062b8:	2001      	movs	r0, #1
 80062ba:	f002 fb55 	bl	8008968 <CreateLine>
    return;
 80062be:	e031      	b.n	8006324 <MIC_Start+0x88>
  }
  Debug("In mic start");
 80062c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006338 <MIC_Start+0x9c>)
 80062c2:	4b1e      	ldr	r3, [pc, #120]	@ (800633c <MIC_Start+0xa0>)
 80062c4:	0019      	movs	r1, r3
 80062c6:	2003      	movs	r0, #3
 80062c8:	f002 fb4e 	bl	8008968 <CreateLine>
  UpdateSampleRate(sampleRate);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	0018      	movs	r0, r3
 80062d0:	f7ff ff7e 	bl	80061d0 <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 80062d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006340 <MIC_Start+0xa4>)
 80062d6:	1cba      	adds	r2, r7, #2
 80062d8:	8812      	ldrh	r2, [r2, #0]
 80062da:	801a      	strh	r2, [r3, #0]

  StartTime = GetCurrentHalTicks();
 80062dc:	f002 fbd0 	bl	8008a80 <GetCurrentHalTicks>
 80062e0:	0002      	movs	r2, r0
 80062e2:	4b18      	ldr	r3, [pc, #96]	@ (8006344 <MIC_Start+0xa8>)
 80062e4:	601a      	str	r2, [r3, #0]
  StartupDoneTime = StartTime + 20;
 80062e6:	4b17      	ldr	r3, [pc, #92]	@ (8006344 <MIC_Start+0xa8>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3314      	adds	r3, #20
 80062ec:	001a      	movs	r2, r3
 80062ee:	4b16      	ldr	r3, [pc, #88]	@ (8006348 <MIC_Start+0xac>)
 80062f0:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 80062f2:	4b16      	ldr	r3, [pc, #88]	@ (800634c <MIC_Start+0xb0>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 80062f8:	4b15      	ldr	r3, [pc, #84]	@ (8006350 <MIC_Start+0xb4>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, NUMBER_OF_SAMPLES*2);
 80062fe:	4b0b      	ldr	r3, [pc, #44]	@ (800632c <MIC_Start+0x90>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	250f      	movs	r5, #15
 8006304:	197c      	adds	r4, r7, r5
 8006306:	2280      	movs	r2, #128	@ 0x80
 8006308:	00d2      	lsls	r2, r2, #3
 800630a:	4912      	ldr	r1, [pc, #72]	@ (8006354 <MIC_Start+0xb8>)
 800630c:	0018      	movs	r0, r3
 800630e:	f006 fa05 	bl	800c71c <HAL_I2S_Receive_DMA>
 8006312:	0003      	movs	r3, r0
 8006314:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

  Info("Status %d", status);
 8006316:	197b      	adds	r3, r7, r5
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	4a0f      	ldr	r2, [pc, #60]	@ (8006358 <MIC_Start+0xbc>)
 800631c:	490f      	ldr	r1, [pc, #60]	@ (800635c <MIC_Start+0xc0>)
 800631e:	2002      	movs	r0, #2
 8006320:	f002 fb22 	bl	8008968 <CreateLine>
}
 8006324:	46bd      	mov	sp, r7
 8006326:	b004      	add	sp, #16
 8006328:	bdb0      	pop	{r4, r5, r7, pc}
 800632a:	46c0      	nop			@ (mov r8, r8)
 800632c:	20000d0c 	.word	0x20000d0c
 8006330:	08019c84 	.word	0x08019c84
 8006334:	08019ca4 	.word	0x08019ca4
 8006338:	08019ca8 	.word	0x08019ca8
 800633c:	08019cb8 	.word	0x08019cb8
 8006340:	2000010c 	.word	0x2000010c
 8006344:	20001d10 	.word	0x20001d10
 8006348:	20001d14 	.word	0x20001d14
 800634c:	20001d18 	.word	0x20001d18
 8006350:	20001d19 	.word	0x20001d19
 8006354:	20000d10 	.word	0x20000d10
 8006358:	08019cbc 	.word	0x08019cbc
 800635c:	08019cc8 	.word	0x08019cc8

08006360 <MinimalValue>:

float MinimalValue(uint16_t length){
 8006360:	b590      	push	{r4, r7, lr}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	0002      	movs	r2, r0
 8006368:	1dbb      	adds	r3, r7, #6
 800636a:	801a      	strh	r2, [r3, #0]
  float MinVal = 1;
 800636c:	23fe      	movs	r3, #254	@ 0xfe
 800636e:	059b      	lsls	r3, r3, #22
 8006370:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006372:	230a      	movs	r3, #10
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	2200      	movs	r2, #0
 8006378:	801a      	strh	r2, [r3, #0]
 800637a:	e01c      	b.n	80063b6 <MinimalValue+0x56>
    if(sample[i] < MinVal){
 800637c:	240a      	movs	r4, #10
 800637e:	193b      	adds	r3, r7, r4
 8006380:	2200      	movs	r2, #0
 8006382:	5e9a      	ldrsh	r2, [r3, r2]
 8006384:	4b12      	ldr	r3, [pc, #72]	@ (80063d0 <MinimalValue+0x70>)
 8006386:	0092      	lsls	r2, r2, #2
 8006388:	58d3      	ldr	r3, [r2, r3]
 800638a:	1c19      	adds	r1, r3, #0
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f7fa f8b1 	bl	80004f4 <__aeabi_fcmpgt>
 8006392:	1e03      	subs	r3, r0, #0
 8006394:	d006      	beq.n	80063a4 <MinimalValue+0x44>
      MinVal = sample[i];
 8006396:	193b      	adds	r3, r7, r4
 8006398:	2200      	movs	r2, #0
 800639a:	5e9a      	ldrsh	r2, [r3, r2]
 800639c:	4b0c      	ldr	r3, [pc, #48]	@ (80063d0 <MinimalValue+0x70>)
 800639e:	0092      	lsls	r2, r2, #2
 80063a0:	58d3      	ldr	r3, [r2, r3]
 80063a2:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 80063a4:	210a      	movs	r1, #10
 80063a6:	187b      	adds	r3, r7, r1
 80063a8:	2200      	movs	r2, #0
 80063aa:	5e9b      	ldrsh	r3, [r3, r2]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3301      	adds	r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	187b      	adds	r3, r7, r1
 80063b4:	801a      	strh	r2, [r3, #0]
 80063b6:	230a      	movs	r3, #10
 80063b8:	18fb      	adds	r3, r7, r3
 80063ba:	2200      	movs	r2, #0
 80063bc:	5e9a      	ldrsh	r2, [r3, r2]
 80063be:	1dbb      	adds	r3, r7, #6
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	dbda      	blt.n	800637c <MinimalValue+0x1c>
    }
  }
  return(MinVal);
 80063c6:	68fb      	ldr	r3, [r7, #12]
}
 80063c8:	1c18      	adds	r0, r3, #0
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b005      	add	sp, #20
 80063ce:	bd90      	pop	{r4, r7, pc}
 80063d0:	20001d20 	.word	0x20001d20

080063d4 <MaximalValue>:

float MaximalValue(uint16_t length){
 80063d4:	b590      	push	{r4, r7, lr}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	0002      	movs	r2, r0
 80063dc:	1dbb      	adds	r3, r7, #6
 80063de:	801a      	strh	r2, [r3, #0]
  float MaxVal = -1;
 80063e0:	4b18      	ldr	r3, [pc, #96]	@ (8006444 <MaximalValue+0x70>)
 80063e2:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 80063e4:	230a      	movs	r3, #10
 80063e6:	18fb      	adds	r3, r7, r3
 80063e8:	2200      	movs	r2, #0
 80063ea:	801a      	strh	r2, [r3, #0]
 80063ec:	e01c      	b.n	8006428 <MaximalValue+0x54>
    if(sample[i] > MaxVal){
 80063ee:	240a      	movs	r4, #10
 80063f0:	193b      	adds	r3, r7, r4
 80063f2:	2200      	movs	r2, #0
 80063f4:	5e9a      	ldrsh	r2, [r3, r2]
 80063f6:	4b14      	ldr	r3, [pc, #80]	@ (8006448 <MaximalValue+0x74>)
 80063f8:	0092      	lsls	r2, r2, #2
 80063fa:	58d3      	ldr	r3, [r2, r3]
 80063fc:	1c19      	adds	r1, r3, #0
 80063fe:	68f8      	ldr	r0, [r7, #12]
 8006400:	f7fa f864 	bl	80004cc <__aeabi_fcmplt>
 8006404:	1e03      	subs	r3, r0, #0
 8006406:	d006      	beq.n	8006416 <MaximalValue+0x42>
      MaxVal = sample[i];
 8006408:	193b      	adds	r3, r7, r4
 800640a:	2200      	movs	r2, #0
 800640c:	5e9a      	ldrsh	r2, [r3, r2]
 800640e:	4b0e      	ldr	r3, [pc, #56]	@ (8006448 <MaximalValue+0x74>)
 8006410:	0092      	lsls	r2, r2, #2
 8006412:	58d3      	ldr	r3, [r2, r3]
 8006414:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006416:	210a      	movs	r1, #10
 8006418:	187b      	adds	r3, r7, r1
 800641a:	2200      	movs	r2, #0
 800641c:	5e9b      	ldrsh	r3, [r3, r2]
 800641e:	b29b      	uxth	r3, r3
 8006420:	3301      	adds	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	187b      	adds	r3, r7, r1
 8006426:	801a      	strh	r2, [r3, #0]
 8006428:	230a      	movs	r3, #10
 800642a:	18fb      	adds	r3, r7, r3
 800642c:	2200      	movs	r2, #0
 800642e:	5e9a      	ldrsh	r2, [r3, r2]
 8006430:	1dbb      	adds	r3, r7, #6
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	429a      	cmp	r2, r3
 8006436:	dbda      	blt.n	80063ee <MaximalValue+0x1a>
    }
  }
  return(MaxVal);
 8006438:	68fb      	ldr	r3, [r7, #12]
}
 800643a:	1c18      	adds	r0, r3, #0
 800643c:	46bd      	mov	sp, r7
 800643e:	b005      	add	sp, #20
 8006440:	bd90      	pop	{r4, r7, pc}
 8006442:	46c0      	nop			@ (mov r8, r8)
 8006444:	bf800000 	.word	0xbf800000
 8006448:	20001d20 	.word	0x20001d20

0800644c <MIC_Check>:
bool MIC_Check(void) {
 800644c:	b5b0      	push	{r4, r5, r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 8006452:	4a25      	ldr	r2, [pc, #148]	@ (80064e8 <MIC_Check+0x9c>)
 8006454:	4b25      	ldr	r3, [pc, #148]	@ (80064ec <MIC_Check+0xa0>)
 8006456:	0019      	movs	r1, r3
 8006458:	2002      	movs	r0, #2
 800645a:	f002 fa85 	bl	8008968 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 800645e:	230e      	movs	r3, #14
 8006460:	18fb      	adds	r3, r7, r3
 8006462:	2200      	movs	r2, #0
 8006464:	801a      	strh	r2, [r3, #0]
 8006466:	e016      	b.n	8006496 <MIC_Check+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006468:	210e      	movs	r1, #14
 800646a:	187b      	adds	r3, r7, r1
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	3302      	adds	r3, #2
 8006472:	005a      	lsls	r2, r3, #1
 8006474:	4b1e      	ldr	r3, [pc, #120]	@ (80064f0 <MIC_Check+0xa4>)
 8006476:	18d2      	adds	r2, r2, r3
 8006478:	000d      	movs	r5, r1
 800647a:	187b      	adds	r3, r7, r1
 800647c:	881c      	ldrh	r4, [r3, #0]
 800647e:	0010      	movs	r0, r2
 8006480:	f7ff fec6 	bl	8006210 <ConvertAudio>
 8006484:	1c01      	adds	r1, r0, #0
 8006486:	4b1b      	ldr	r3, [pc, #108]	@ (80064f4 <MIC_Check+0xa8>)
 8006488:	00a2      	lsls	r2, r4, #2
 800648a:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 800648c:	197b      	adds	r3, r7, r5
 800648e:	197a      	adds	r2, r7, r5
 8006490:	8812      	ldrh	r2, [r2, #0]
 8006492:	3201      	adds	r2, #1
 8006494:	801a      	strh	r2, [r3, #0]
 8006496:	230e      	movs	r3, #14
 8006498:	18fb      	adds	r3, r7, r3
 800649a:	881a      	ldrh	r2, [r3, #0]
 800649c:	2380      	movs	r3, #128	@ 0x80
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d3e1      	bcc.n	8006468 <MIC_Check+0x1c>
    //Info("0x%08x", sample);
  }
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 80064a4:	2380      	movs	r3, #128	@ 0x80
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	0018      	movs	r0, r3
 80064aa:	f7ff ff93 	bl	80063d4 <MaximalValue>
 80064ae:	1c03      	adds	r3, r0, #0
 80064b0:	60bb      	str	r3, [r7, #8]
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 80064b2:	2380      	movs	r3, #128	@ 0x80
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	0018      	movs	r0, r3
 80064b8:	f7ff ff52 	bl	8006360 <MinimalValue>
 80064bc:	1c03      	adds	r3, r0, #0
 80064be:	607b      	str	r3, [r7, #4]
  if(Max > 0.0 || Min < 0.0){
 80064c0:	2100      	movs	r1, #0
 80064c2:	68b8      	ldr	r0, [r7, #8]
 80064c4:	f7fa f816 	bl	80004f4 <__aeabi_fcmpgt>
 80064c8:	1e03      	subs	r3, r0, #0
 80064ca:	d105      	bne.n	80064d8 <MIC_Check+0x8c>
 80064cc:	2100      	movs	r1, #0
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7f9 fffc 	bl	80004cc <__aeabi_fcmplt>
 80064d4:	1e03      	subs	r3, r0, #0
 80064d6:	d001      	beq.n	80064dc <MIC_Check+0x90>
    return(true);
 80064d8:	2301      	movs	r3, #1
 80064da:	e000      	b.n	80064de <MIC_Check+0x92>
  }
  return(false);
 80064dc:	2300      	movs	r3, #0
}
 80064de:	0018      	movs	r0, r3
 80064e0:	46bd      	mov	sp, r7
 80064e2:	b004      	add	sp, #16
 80064e4:	bdb0      	pop	{r4, r5, r7, pc}
 80064e6:	46c0      	nop			@ (mov r8, r8)
 80064e8:	08019ccc 	.word	0x08019ccc
 80064ec:	08019cc8 	.word	0x08019cc8
 80064f0:	20000d10 	.word	0x20000d10
 80064f4:	20001d20 	.word	0x20001d20

080064f8 <MIC_Print>:
void MIC_Print(void) {
 80064f8:	b5b0      	push	{r4, r5, r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 80064fe:	4a99      	ldr	r2, [pc, #612]	@ (8006764 <MIC_Print+0x26c>)
 8006500:	4b99      	ldr	r3, [pc, #612]	@ (8006768 <MIC_Print+0x270>)
 8006502:	0019      	movs	r1, r3
 8006504:	2002      	movs	r0, #2
 8006506:	f002 fa2f 	bl	8008968 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 800650a:	230e      	movs	r3, #14
 800650c:	18fb      	adds	r3, r7, r3
 800650e:	2200      	movs	r2, #0
 8006510:	801a      	strh	r2, [r3, #0]
 8006512:	e016      	b.n	8006542 <MIC_Print+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006514:	210e      	movs	r1, #14
 8006516:	187b      	adds	r3, r7, r1
 8006518:	881b      	ldrh	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	3302      	adds	r3, #2
 800651e:	005a      	lsls	r2, r3, #1
 8006520:	4b92      	ldr	r3, [pc, #584]	@ (800676c <MIC_Print+0x274>)
 8006522:	18d2      	adds	r2, r2, r3
 8006524:	000d      	movs	r5, r1
 8006526:	187b      	adds	r3, r7, r1
 8006528:	881c      	ldrh	r4, [r3, #0]
 800652a:	0010      	movs	r0, r2
 800652c:	f7ff fe70 	bl	8006210 <ConvertAudio>
 8006530:	1c01      	adds	r1, r0, #0
 8006532:	4b8f      	ldr	r3, [pc, #572]	@ (8006770 <MIC_Print+0x278>)
 8006534:	00a2      	lsls	r2, r4, #2
 8006536:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006538:	197b      	adds	r3, r7, r5
 800653a:	197a      	adds	r2, r7, r5
 800653c:	8812      	ldrh	r2, [r2, #0]
 800653e:	3201      	adds	r2, #1
 8006540:	801a      	strh	r2, [r3, #0]
 8006542:	230e      	movs	r3, #14
 8006544:	18fb      	adds	r3, r7, r3
 8006546:	881a      	ldrh	r2, [r3, #0]
 8006548:	2380      	movs	r3, #128	@ 0x80
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	429a      	cmp	r2, r3
 800654e:	d3e1      	bcc.n	8006514 <MIC_Print+0x1c>
    //Info("0x%08x", sample);
  }
  //filter();
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 8006550:	2380      	movs	r3, #128	@ 0x80
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	0018      	movs	r0, r3
 8006556:	f7ff ff03 	bl	8006360 <MinimalValue>
 800655a:	1c03      	adds	r3, r0, #0
 800655c:	60bb      	str	r3, [r7, #8]
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 800655e:	2380      	movs	r3, #128	@ 0x80
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	0018      	movs	r0, r3
 8006564:	f7ff ff36 	bl	80063d4 <MaximalValue>
 8006568:	1c03      	adds	r3, r0, #0
 800656a:	607b      	str	r3, [r7, #4]
  dBc = MIC_GetDB();
 800656c:	f000 f976 	bl	800685c <MIC_GetDB>
 8006570:	1c02      	adds	r2, r0, #0
 8006572:	4b80      	ldr	r3, [pc, #512]	@ (8006774 <MIC_Print+0x27c>)
 8006574:	601a      	str	r2, [r3, #0]
  setMic(dBc);
 8006576:	4b7f      	ldr	r3, [pc, #508]	@ (8006774 <MIC_Print+0x27c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	1c18      	adds	r0, r3, #0
 800657c:	f7fd f8b4 	bl	80036e8 <setMic>
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc > 85){ //white
 8006580:	4b7c      	ldr	r3, [pc, #496]	@ (8006774 <MIC_Print+0x27c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	497c      	ldr	r1, [pc, #496]	@ (8006778 <MIC_Print+0x280>)
 8006586:	1c18      	adds	r0, r3, #0
 8006588:	f7f9 ffb4 	bl	80004f4 <__aeabi_fcmpgt>
 800658c:	1e03      	subs	r3, r0, #0
 800658e:	d013      	beq.n	80065b8 <MIC_Print+0xc0>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006590:	4b7a      	ldr	r3, [pc, #488]	@ (800677c <MIC_Print+0x284>)
 8006592:	2200      	movs	r2, #0
 8006594:	2101      	movs	r1, #1
 8006596:	0018      	movs	r0, r3
 8006598:	f003 ff74 	bl	800a484 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 800659c:	2380      	movs	r3, #128	@ 0x80
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	4876      	ldr	r0, [pc, #472]	@ (800677c <MIC_Print+0x284>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	0019      	movs	r1, r3
 80065a6:	f003 ff6d 	bl	800a484 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 80065aa:	2380      	movs	r3, #128	@ 0x80
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4873      	ldr	r0, [pc, #460]	@ (800677c <MIC_Print+0x284>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	0019      	movs	r1, r3
 80065b4:	f003 ff66 	bl	800a484 <HAL_GPIO_WritePin>
  }
  if(dBc < 85 && dBc >= 80){ //red
 80065b8:	4b6e      	ldr	r3, [pc, #440]	@ (8006774 <MIC_Print+0x27c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	496e      	ldr	r1, [pc, #440]	@ (8006778 <MIC_Print+0x280>)
 80065be:	1c18      	adds	r0, r3, #0
 80065c0:	f7f9 ff84 	bl	80004cc <__aeabi_fcmplt>
 80065c4:	1e03      	subs	r3, r0, #0
 80065c6:	d01b      	beq.n	8006600 <MIC_Print+0x108>
 80065c8:	4b6a      	ldr	r3, [pc, #424]	@ (8006774 <MIC_Print+0x27c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	496c      	ldr	r1, [pc, #432]	@ (8006780 <MIC_Print+0x288>)
 80065ce:	1c18      	adds	r0, r3, #0
 80065d0:	f7f9 ff9a 	bl	8000508 <__aeabi_fcmpge>
 80065d4:	1e03      	subs	r3, r0, #0
 80065d6:	d013      	beq.n	8006600 <MIC_Print+0x108>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80065d8:	4b68      	ldr	r3, [pc, #416]	@ (800677c <MIC_Print+0x284>)
 80065da:	2200      	movs	r2, #0
 80065dc:	2101      	movs	r1, #1
 80065de:	0018      	movs	r0, r3
 80065e0:	f003 ff50 	bl	800a484 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80065e4:	2380      	movs	r3, #128	@ 0x80
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	4864      	ldr	r0, [pc, #400]	@ (800677c <MIC_Print+0x284>)
 80065ea:	2201      	movs	r2, #1
 80065ec:	0019      	movs	r1, r3
 80065ee:	f003 ff49 	bl	800a484 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80065f2:	2380      	movs	r3, #128	@ 0x80
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4861      	ldr	r0, [pc, #388]	@ (800677c <MIC_Print+0x284>)
 80065f8:	2201      	movs	r2, #1
 80065fa:	0019      	movs	r1, r3
 80065fc:	f003 ff42 	bl	800a484 <HAL_GPIO_WritePin>
  }
  if(dBc < 80 && dBc >= 75){//purple
 8006600:	4b5c      	ldr	r3, [pc, #368]	@ (8006774 <MIC_Print+0x27c>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	495e      	ldr	r1, [pc, #376]	@ (8006780 <MIC_Print+0x288>)
 8006606:	1c18      	adds	r0, r3, #0
 8006608:	f7f9 ff60 	bl	80004cc <__aeabi_fcmplt>
 800660c:	1e03      	subs	r3, r0, #0
 800660e:	d01b      	beq.n	8006648 <MIC_Print+0x150>
 8006610:	4b58      	ldr	r3, [pc, #352]	@ (8006774 <MIC_Print+0x27c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	495b      	ldr	r1, [pc, #364]	@ (8006784 <MIC_Print+0x28c>)
 8006616:	1c18      	adds	r0, r3, #0
 8006618:	f7f9 ff76 	bl	8000508 <__aeabi_fcmpge>
 800661c:	1e03      	subs	r3, r0, #0
 800661e:	d013      	beq.n	8006648 <MIC_Print+0x150>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006620:	4b56      	ldr	r3, [pc, #344]	@ (800677c <MIC_Print+0x284>)
 8006622:	2200      	movs	r2, #0
 8006624:	2101      	movs	r1, #1
 8006626:	0018      	movs	r0, r3
 8006628:	f003 ff2c 	bl	800a484 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800662c:	2380      	movs	r3, #128	@ 0x80
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	4852      	ldr	r0, [pc, #328]	@ (800677c <MIC_Print+0x284>)
 8006632:	2201      	movs	r2, #1
 8006634:	0019      	movs	r1, r3
 8006636:	f003 ff25 	bl	800a484 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 800663a:	2380      	movs	r3, #128	@ 0x80
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	484f      	ldr	r0, [pc, #316]	@ (800677c <MIC_Print+0x284>)
 8006640:	2200      	movs	r2, #0
 8006642:	0019      	movs	r1, r3
 8006644:	f003 ff1e 	bl	800a484 <HAL_GPIO_WritePin>
  }
  if(dBc < 75 && dBc >= 70){//yellow
 8006648:	4b4a      	ldr	r3, [pc, #296]	@ (8006774 <MIC_Print+0x27c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	494d      	ldr	r1, [pc, #308]	@ (8006784 <MIC_Print+0x28c>)
 800664e:	1c18      	adds	r0, r3, #0
 8006650:	f7f9 ff3c 	bl	80004cc <__aeabi_fcmplt>
 8006654:	1e03      	subs	r3, r0, #0
 8006656:	d01b      	beq.n	8006690 <MIC_Print+0x198>
 8006658:	4b46      	ldr	r3, [pc, #280]	@ (8006774 <MIC_Print+0x27c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	494a      	ldr	r1, [pc, #296]	@ (8006788 <MIC_Print+0x290>)
 800665e:	1c18      	adds	r0, r3, #0
 8006660:	f7f9 ff52 	bl	8000508 <__aeabi_fcmpge>
 8006664:	1e03      	subs	r3, r0, #0
 8006666:	d013      	beq.n	8006690 <MIC_Print+0x198>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006668:	4b44      	ldr	r3, [pc, #272]	@ (800677c <MIC_Print+0x284>)
 800666a:	2200      	movs	r2, #0
 800666c:	2101      	movs	r1, #1
 800666e:	0018      	movs	r0, r3
 8006670:	f003 ff08 	bl	800a484 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8006674:	2380      	movs	r3, #128	@ 0x80
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	4840      	ldr	r0, [pc, #256]	@ (800677c <MIC_Print+0x284>)
 800667a:	2200      	movs	r2, #0
 800667c:	0019      	movs	r1, r3
 800667e:	f003 ff01 	bl	800a484 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006682:	2380      	movs	r3, #128	@ 0x80
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	483d      	ldr	r0, [pc, #244]	@ (800677c <MIC_Print+0x284>)
 8006688:	2201      	movs	r2, #1
 800668a:	0019      	movs	r1, r3
 800668c:	f003 fefa 	bl	800a484 <HAL_GPIO_WritePin>
  }
  if(dBc < 70 && dBc >= 65){//Green
 8006690:	4b38      	ldr	r3, [pc, #224]	@ (8006774 <MIC_Print+0x27c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	493c      	ldr	r1, [pc, #240]	@ (8006788 <MIC_Print+0x290>)
 8006696:	1c18      	adds	r0, r3, #0
 8006698:	f7f9 ff18 	bl	80004cc <__aeabi_fcmplt>
 800669c:	1e03      	subs	r3, r0, #0
 800669e:	d01b      	beq.n	80066d8 <MIC_Print+0x1e0>
 80066a0:	4b34      	ldr	r3, [pc, #208]	@ (8006774 <MIC_Print+0x27c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4939      	ldr	r1, [pc, #228]	@ (800678c <MIC_Print+0x294>)
 80066a6:	1c18      	adds	r0, r3, #0
 80066a8:	f7f9 ff2e 	bl	8000508 <__aeabi_fcmpge>
 80066ac:	1e03      	subs	r3, r0, #0
 80066ae:	d013      	beq.n	80066d8 <MIC_Print+0x1e0>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 80066b0:	4b32      	ldr	r3, [pc, #200]	@ (800677c <MIC_Print+0x284>)
 80066b2:	2201      	movs	r2, #1
 80066b4:	2101      	movs	r1, #1
 80066b6:	0018      	movs	r0, r3
 80066b8:	f003 fee4 	bl	800a484 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 80066bc:	2380      	movs	r3, #128	@ 0x80
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	482e      	ldr	r0, [pc, #184]	@ (800677c <MIC_Print+0x284>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	0019      	movs	r1, r3
 80066c6:	f003 fedd 	bl	800a484 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80066ca:	2380      	movs	r3, #128	@ 0x80
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	482b      	ldr	r0, [pc, #172]	@ (800677c <MIC_Print+0x284>)
 80066d0:	2201      	movs	r2, #1
 80066d2:	0019      	movs	r1, r3
 80066d4:	f003 fed6 	bl	800a484 <HAL_GPIO_WritePin>
  }
  if(dBc < 65 && dBc >= 60){//blue
 80066d8:	4b26      	ldr	r3, [pc, #152]	@ (8006774 <MIC_Print+0x27c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	492b      	ldr	r1, [pc, #172]	@ (800678c <MIC_Print+0x294>)
 80066de:	1c18      	adds	r0, r3, #0
 80066e0:	f7f9 fef4 	bl	80004cc <__aeabi_fcmplt>
 80066e4:	1e03      	subs	r3, r0, #0
 80066e6:	d01b      	beq.n	8006720 <MIC_Print+0x228>
 80066e8:	4b22      	ldr	r3, [pc, #136]	@ (8006774 <MIC_Print+0x27c>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4928      	ldr	r1, [pc, #160]	@ (8006790 <MIC_Print+0x298>)
 80066ee:	1c18      	adds	r0, r3, #0
 80066f0:	f7f9 ff0a 	bl	8000508 <__aeabi_fcmpge>
 80066f4:	1e03      	subs	r3, r0, #0
 80066f6:	d013      	beq.n	8006720 <MIC_Print+0x228>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 80066f8:	4b20      	ldr	r3, [pc, #128]	@ (800677c <MIC_Print+0x284>)
 80066fa:	2201      	movs	r2, #1
 80066fc:	2101      	movs	r1, #1
 80066fe:	0018      	movs	r0, r3
 8006700:	f003 fec0 	bl	800a484 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006704:	2380      	movs	r3, #128	@ 0x80
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	481c      	ldr	r0, [pc, #112]	@ (800677c <MIC_Print+0x284>)
 800670a:	2201      	movs	r2, #1
 800670c:	0019      	movs	r1, r3
 800670e:	f003 feb9 	bl	800a484 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8006712:	2380      	movs	r3, #128	@ 0x80
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4819      	ldr	r0, [pc, #100]	@ (800677c <MIC_Print+0x284>)
 8006718:	2200      	movs	r2, #0
 800671a:	0019      	movs	r1, r3
 800671c:	f003 feb2 	bl	800a484 <HAL_GPIO_WritePin>
  }
  if(dBc < 60){//light blue
 8006720:	4b14      	ldr	r3, [pc, #80]	@ (8006774 <MIC_Print+0x27c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	491a      	ldr	r1, [pc, #104]	@ (8006790 <MIC_Print+0x298>)
 8006726:	1c18      	adds	r0, r3, #0
 8006728:	f7f9 fed0 	bl	80004cc <__aeabi_fcmplt>
 800672c:	1e03      	subs	r3, r0, #0
 800672e:	d100      	bne.n	8006732 <MIC_Print+0x23a>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
  }


  //FFT();
}
 8006730:	e013      	b.n	800675a <MIC_Print+0x262>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8006732:	4b12      	ldr	r3, [pc, #72]	@ (800677c <MIC_Print+0x284>)
 8006734:	2201      	movs	r2, #1
 8006736:	2101      	movs	r1, #1
 8006738:	0018      	movs	r0, r3
 800673a:	f003 fea3 	bl	800a484 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 800673e:	2380      	movs	r3, #128	@ 0x80
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	480e      	ldr	r0, [pc, #56]	@ (800677c <MIC_Print+0x284>)
 8006744:	2200      	movs	r2, #0
 8006746:	0019      	movs	r1, r3
 8006748:	f003 fe9c 	bl	800a484 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 800674c:	2380      	movs	r3, #128	@ 0x80
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	480a      	ldr	r0, [pc, #40]	@ (800677c <MIC_Print+0x284>)
 8006752:	2200      	movs	r2, #0
 8006754:	0019      	movs	r1, r3
 8006756:	f003 fe95 	bl	800a484 <HAL_GPIO_WritePin>
}
 800675a:	46c0      	nop			@ (mov r8, r8)
 800675c:	46bd      	mov	sp, r7
 800675e:	b004      	add	sp, #16
 8006760:	bdb0      	pop	{r4, r5, r7, pc}
 8006762:	46c0      	nop			@ (mov r8, r8)
 8006764:	08019ccc 	.word	0x08019ccc
 8006768:	08019cc8 	.word	0x08019cc8
 800676c:	20000d10 	.word	0x20000d10
 8006770:	20001d20 	.word	0x20001d20
 8006774:	20001d1c 	.word	0x20001d1c
 8006778:	42aa0000 	.word	0x42aa0000
 800677c:	50000400 	.word	0x50000400
 8006780:	42a00000 	.word	0x42a00000
 8006784:	42960000 	.word	0x42960000
 8006788:	428c0000 	.word	0x428c0000
 800678c:	42820000 	.word	0x42820000
 8006790:	42700000 	.word	0x42700000

08006794 <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
  if(DataReady) {
 8006798:	4b09      	ldr	r3, [pc, #36]	@ (80067c0 <MIC_MeasurementDone+0x2c>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <MIC_MeasurementDone+0x24>
    MIC_Print();
 80067a2:	f7ff fea9 	bl	80064f8 <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples);
 80067a6:	4b07      	ldr	r3, [pc, #28]	@ (80067c4 <MIC_MeasurementDone+0x30>)
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	4a07      	ldr	r2, [pc, #28]	@ (80067c8 <MIC_MeasurementDone+0x34>)
 80067ac:	4907      	ldr	r1, [pc, #28]	@ (80067cc <MIC_MeasurementDone+0x38>)
 80067ae:	2003      	movs	r0, #3
 80067b0:	f002 f8da 	bl	8008968 <CreateLine>
    return true;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e000      	b.n	80067ba <MIC_MeasurementDone+0x26>
  }
  return false;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	0018      	movs	r0, r3
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	20001d19 	.word	0x20001d19
 80067c4:	2000010c 	.word	0x2000010c
 80067c8:	08019cd8 	.word	0x08019cd8
 80067cc:	08019cb8 	.word	0x08019cb8

080067d0 <MIC_TestMeasurementDone>:
bool MIC_TestMeasurementDone(void) {
 80067d0:	b590      	push	{r4, r7, lr}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
  bool Check;
  if(DataReady) {
 80067d6:	4b09      	ldr	r3, [pc, #36]	@ (80067fc <MIC_TestMeasurementDone+0x2c>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d007      	beq.n	80067f0 <MIC_TestMeasurementDone+0x20>
    Check = MIC_Check();
 80067e0:	1dfc      	adds	r4, r7, #7
 80067e2:	f7ff fe33 	bl	800644c <MIC_Check>
 80067e6:	0003      	movs	r3, r0
 80067e8:	7023      	strb	r3, [r4, #0]
    return Check;
 80067ea:	1dfb      	adds	r3, r7, #7
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	e000      	b.n	80067f2 <MIC_TestMeasurementDone+0x22>
  }
  return false;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	0018      	movs	r0, r3
 80067f4:	46bd      	mov	sp, r7
 80067f6:	b003      	add	sp, #12
 80067f8:	bd90      	pop	{r4, r7, pc}
 80067fa:	46c0      	nop			@ (mov r8, r8)
 80067fc:	20001d19 	.word	0x20001d19

08006800 <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 8006808:	4b10      	ldr	r3, [pc, #64]	@ (800684c <HAL_I2S_RxCpltCallback+0x4c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	429a      	cmp	r2, r3
 8006810:	d118      	bne.n	8006844 <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 8006812:	4b0f      	ldr	r3, [pc, #60]	@ (8006850 <HAL_I2S_RxCpltCallback+0x50>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	d008      	beq.n	800682e <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 800681c:	4b0b      	ldr	r3, [pc, #44]	@ (800684c <HAL_I2S_RxCpltCallback+0x4c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	0018      	movs	r0, r3
 8006822:	f006 f83d 	bl	800c8a0 <HAL_I2S_DMAStop>
    DataReady = true;
 8006826:	4b0b      	ldr	r3, [pc, #44]	@ (8006854 <HAL_I2S_RxCpltCallback+0x54>)
 8006828:	2201      	movs	r2, #1
 800682a:	701a      	strb	r2, [r3, #0]
 800682c:	e00b      	b.n	8006846 <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 800682e:	4b0a      	ldr	r3, [pc, #40]	@ (8006858 <HAL_I2S_RxCpltCallback+0x58>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	0018      	movs	r0, r3
 8006834:	f002 f842 	bl	80088bc <TimestampIsReached>
 8006838:	1e03      	subs	r3, r0, #0
 800683a:	d004      	beq.n	8006846 <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 800683c:	4b04      	ldr	r3, [pc, #16]	@ (8006850 <HAL_I2S_RxCpltCallback+0x50>)
 800683e:	2201      	movs	r2, #1
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	e000      	b.n	8006846 <HAL_I2S_RxCpltCallback+0x46>
    return;
 8006844:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 8006846:	46bd      	mov	sp, r7
 8006848:	b002      	add	sp, #8
 800684a:	bd80      	pop	{r7, pc}
 800684c:	20000d0c 	.word	0x20000d0c
 8006850:	20001d18 	.word	0x20001d18
 8006854:	20001d19 	.word	0x20001d19
 8006858:	20001d14 	.word	0x20001d14

0800685c <MIC_GetDB>:

float MIC_GetDB(void) {
 800685c:	b590      	push	{r4, r7, lr}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
    float sum = 0.0f;
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
    float dBValue = 0.0f;
 8006866:	2300      	movs	r3, #0
 8006868:	607b      	str	r3, [r7, #4]

    // Calculate the sum of the magnitudes in FFTResult
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 800686a:	230a      	movs	r3, #10
 800686c:	18fb      	adds	r3, r7, r3
 800686e:	2280      	movs	r2, #128	@ 0x80
 8006870:	0052      	lsls	r2, r2, #1
 8006872:	801a      	strh	r2, [r3, #0]
 8006874:	e019      	b.n	80068aa <MIC_GetDB+0x4e>
      // Sum of squares of magnitudes
      sum += sample[i]*sample[i];
 8006876:	240a      	movs	r4, #10
 8006878:	193b      	adds	r3, r7, r4
 800687a:	881a      	ldrh	r2, [r3, #0]
 800687c:	4b2b      	ldr	r3, [pc, #172]	@ (800692c <MIC_GetDB+0xd0>)
 800687e:	0092      	lsls	r2, r2, #2
 8006880:	58d0      	ldr	r0, [r2, r3]
 8006882:	193b      	adds	r3, r7, r4
 8006884:	881a      	ldrh	r2, [r3, #0]
 8006886:	4b29      	ldr	r3, [pc, #164]	@ (800692c <MIC_GetDB+0xd0>)
 8006888:	0092      	lsls	r2, r2, #2
 800688a:	58d3      	ldr	r3, [r2, r3]
 800688c:	1c19      	adds	r1, r3, #0
 800688e:	f7fa fb05 	bl	8000e9c <__aeabi_fmul>
 8006892:	1c03      	adds	r3, r0, #0
 8006894:	1c19      	adds	r1, r3, #0
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f7f9 ff90 	bl	80007bc <__aeabi_fadd>
 800689c:	1c03      	adds	r3, r0, #0
 800689e:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 80068a0:	193b      	adds	r3, r7, r4
 80068a2:	881a      	ldrh	r2, [r3, #0]
 80068a4:	193b      	adds	r3, r7, r4
 80068a6:	3201      	adds	r2, #1
 80068a8:	801a      	strh	r2, [r3, #0]
 80068aa:	230a      	movs	r3, #10
 80068ac:	18fb      	adds	r3, r7, r3
 80068ae:	881a      	ldrh	r2, [r3, #0]
 80068b0:	2380      	movs	r3, #128	@ 0x80
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d3de      	bcc.n	8006876 <MIC_GetDB+0x1a>
    }

    // Calculate the root mean square (RMS)
    float rms = sqrt(sum/(float)(NUMBER_OF_SAMPLES/2));
 80068b8:	2187      	movs	r1, #135	@ 0x87
 80068ba:	05c9      	lsls	r1, r1, #23
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f7fa f907 	bl	8000ad0 <__aeabi_fdiv>
 80068c2:	1c03      	adds	r3, r0, #0
 80068c4:	1c18      	adds	r0, r3, #0
 80068c6:	f7fc fd4b 	bl	8003360 <__aeabi_f2d>
 80068ca:	0002      	movs	r2, r0
 80068cc:	000b      	movs	r3, r1
 80068ce:	0010      	movs	r0, r2
 80068d0:	0019      	movs	r1, r3
 80068d2:	f012 f9bf 	bl	8018c54 <sqrt>
 80068d6:	0002      	movs	r2, r0
 80068d8:	000b      	movs	r3, r1
 80068da:	0010      	movs	r0, r2
 80068dc:	0019      	movs	r1, r3
 80068de:	f7fc fd87 	bl	80033f0 <__aeabi_d2f>
 80068e2:	1c03      	adds	r3, r0, #0
 80068e4:	603b      	str	r3, [r7, #0]

    // Convert the RMS value to dB
    dBValue = 20.0f * log10(rms) +120.0;
 80068e6:	6838      	ldr	r0, [r7, #0]
 80068e8:	f7fc fd3a 	bl	8003360 <__aeabi_f2d>
 80068ec:	0002      	movs	r2, r0
 80068ee:	000b      	movs	r3, r1
 80068f0:	0010      	movs	r0, r2
 80068f2:	0019      	movs	r1, r3
 80068f4:	f012 f978 	bl	8018be8 <log10>
 80068f8:	2200      	movs	r2, #0
 80068fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006930 <MIC_GetDB+0xd4>)
 80068fc:	f7fb fe1c 	bl	8002538 <__aeabi_dmul>
 8006900:	0002      	movs	r2, r0
 8006902:	000b      	movs	r3, r1
 8006904:	0010      	movs	r0, r2
 8006906:	0019      	movs	r1, r3
 8006908:	2200      	movs	r2, #0
 800690a:	4b0a      	ldr	r3, [pc, #40]	@ (8006934 <MIC_GetDB+0xd8>)
 800690c:	f7fa fe6c 	bl	80015e8 <__aeabi_dadd>
 8006910:	0002      	movs	r2, r0
 8006912:	000b      	movs	r3, r1
 8006914:	0010      	movs	r0, r2
 8006916:	0019      	movs	r1, r3
 8006918:	f7fc fd6a 	bl	80033f0 <__aeabi_d2f>
 800691c:	1c03      	adds	r3, r0, #0
 800691e:	607b      	str	r3, [r7, #4]

    return dBValue;
 8006920:	687b      	ldr	r3, [r7, #4]
}
 8006922:	1c18      	adds	r0, r3, #0
 8006924:	46bd      	mov	sp, r7
 8006926:	b005      	add	sp, #20
 8006928:	bd90      	pop	{r4, r7, pc}
 800692a:	46c0      	nop			@ (mov r8, r8)
 800692c:	20001d20 	.word	0x20001d20
 8006930:	40340000 	.word	0x40340000
 8006934:	405e0000 	.word	0x405e0000

08006938 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d113      	bne.n	800697e <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	22fe      	movs	r2, #254	@ 0xfe
 800695a:	0592      	lsls	r2, r2, #22
 800695c:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4a1a      	ldr	r2, [pc, #104]	@ (80069cc <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8006962:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4a1a      	ldr	r2, [pc, #104]	@ (80069d0 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8006968:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4a19      	ldr	r2, [pc, #100]	@ (80069d4 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800696e:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4a19      	ldr	r2, [pc, #100]	@ (80069d8 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8006974:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4a18      	ldr	r2, [pc, #96]	@ (80069dc <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800697a:	61da      	str	r2, [r3, #28]
 800697c:	e011      	b.n	80069a2 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4a17      	ldr	r2, [pc, #92]	@ (80069e0 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8006982:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4a17      	ldr	r2, [pc, #92]	@ (80069e4 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8006988:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4a16      	ldr	r2, [pc, #88]	@ (80069e8 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800698e:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4a16      	ldr	r2, [pc, #88]	@ (80069ec <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8006994:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4a15      	ldr	r2, [pc, #84]	@ (80069f0 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800699a:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4a15      	ldr	r2, [pc, #84]	@ (80069f4 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 80069a0:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4a14      	ldr	r2, [pc, #80]	@ (80069f8 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 80069a6:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4a14      	ldr	r2, [pc, #80]	@ (80069fc <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80069ac:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4a12      	ldr	r2, [pc, #72]	@ (80069fc <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80069b2:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4a12      	ldr	r2, [pc, #72]	@ (8006a00 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 80069b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	0018      	movs	r0, r3
 80069be:	f000 f831 	bl	8006a24 <GasIndexAlgorithm_reset>
}
 80069c2:	46c0      	nop			@ (mov r8, r8)
 80069c4:	46bd      	mov	sp, r7
 80069c6:	b004      	add	sp, #16
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	46c0      	nop			@ (mov r8, r8)
 80069cc:	00002710 	.word	0x00002710
 80069d0:	44340000 	.word	0x44340000
 80069d4:	46859800 	.word	0x46859800
 80069d8:	46a05000 	.word	0x46a05000
 80069dc:	41f00000 	.word	0x41f00000
 80069e0:	42c80000 	.word	0x42c80000
 80069e4:	00004e20 	.word	0x00004e20
 80069e8:	43340000 	.word	0x43340000
 80069ec:	4528c000 	.word	0x4528c000
 80069f0:	45a32000 	.word	0x45a32000
 80069f4:	43aa0000 	.word	0x43aa0000
 80069f8:	43660000 	.word	0x43660000
 80069fc:	41400000 	.word	0x41400000
 8006a00:	42480000 	.word	0x42480000

08006a04 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8006a0e:	22fe      	movs	r2, #254	@ 0xfe
 8006a10:	0592      	lsls	r2, r2, #22
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	0018      	movs	r0, r3
 8006a18:	f7ff ff8e 	bl	8006938 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8006a1c:	46c0      	nop			@ (mov r8, r8)
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	b002      	add	sp, #8
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	0018      	movs	r0, r3
 8006a42:	f000 f805 	bl	8006a50 <GasIndexAlgorithm__init_instances>
}
 8006a46:	46c0      	nop			@ (mov r8, r8)
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	b002      	add	sp, #8
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f000 f8e8 	bl	8006c30 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	0018      	movs	r0, r3
 8006a64:	f000 f9a6 	bl	8006db4 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8006a68:	1c04      	adds	r4, r0, #0
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	f000 f9ab 	bl	8006dc8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8006a72:	1c02      	adds	r2, r0, #0
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	1c21      	adds	r1, r4, #0
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f000 fc3b 	bl	80072f4 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d107      	bne.n	8006a96 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8006a86:	23fe      	movs	r3, #254	@ 0xfe
 8006a88:	059b      	lsls	r3, r3, #22
 8006a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8006ab4 <GasIndexAlgorithm__init_instances+0x64>)
 8006a8c:	490a      	ldr	r1, [pc, #40]	@ (8006ab8 <GasIndexAlgorithm__init_instances+0x68>)
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fc86 	bl	80073a0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8006a94:	e005      	b.n	8006aa2 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8006a96:	4b09      	ldr	r3, [pc, #36]	@ (8006abc <GasIndexAlgorithm__init_instances+0x6c>)
 8006a98:	4a09      	ldr	r2, [pc, #36]	@ (8006ac0 <GasIndexAlgorithm__init_instances+0x70>)
 8006a9a:	490a      	ldr	r1, [pc, #40]	@ (8006ac4 <GasIndexAlgorithm__init_instances+0x74>)
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fc7f 	bl	80073a0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	f000 fd35 	bl	8007514 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8006aaa:	46c0      	nop			@ (mov r8, r8)
 8006aac:	46bd      	mov	sp, r7
 8006aae:	b003      	add	sp, #12
 8006ab0:	bd90      	pop	{r4, r7, pc}
 8006ab2:	46c0      	nop			@ (mov r8, r8)
 8006ab4:	bc257a78 	.word	0xbc257a78
 8006ab8:	44198000 	.word	0x44198000
 8006abc:	42c80000 	.word	0x42c80000
 8006ac0:	bbd4fdf4 	.word	0xbbd4fdf4
 8006ac4:	43550000 	.word	0x43550000

08006ac8 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8006ac8:	b590      	push	{r4, r7, lr}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad8:	4952      	ldr	r1, [pc, #328]	@ (8006c24 <GasIndexAlgorithm_process+0x15c>)
 8006ada:	1c18      	adds	r0, r3, #0
 8006adc:	f7f9 fd00 	bl	80004e0 <__aeabi_fcmple>
 8006ae0:	1e03      	subs	r3, r0, #0
 8006ae2:	d00c      	beq.n	8006afe <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	1c19      	adds	r1, r3, #0
 8006aee:	1c10      	adds	r0, r2, #0
 8006af0:	f7f9 fe64 	bl	80007bc <__aeabi_fadd>
 8006af4:	1c03      	adds	r3, r0, #0
 8006af6:	1c1a      	adds	r2, r3, #0
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	631a      	str	r2, [r3, #48]	@ 0x30
 8006afc:	e080      	b.n	8006c00 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	dd25      	ble.n	8006b50 <GasIndexAlgorithm_process+0x88>
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	4a48      	ldr	r2, [pc, #288]	@ (8006c28 <GasIndexAlgorithm_process+0x160>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	dc21      	bgt.n	8006b50 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	dc04      	bgt.n	8006b20 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	60bb      	str	r3, [r7, #8]
 8006b1e:	e00d      	b.n	8006b3c <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	4a41      	ldr	r2, [pc, #260]	@ (8006c2c <GasIndexAlgorithm_process+0x164>)
 8006b26:	4694      	mov	ip, r2
 8006b28:	4463      	add	r3, ip
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	dd05      	ble.n	8006b3c <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	4a3d      	ldr	r2, [pc, #244]	@ (8006c2c <GasIndexAlgorithm_process+0x164>)
 8006b36:	4694      	mov	ip, r2
 8006b38:	4463      	add	r3, ip
 8006b3a:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	0018      	movs	r0, r3
 8006b46:	f7fa fcc1 	bl	80014cc <__aeabi_i2f>
 8006b4a:	1c02      	adds	r2, r0, #0
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	f000 f945 	bl	8006dea <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8006b60:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8006b62:	d014      	beq.n	8006b8e <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	1c11      	adds	r1, r2, #0
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f000 fbd1 	bl	8007314 <GasIndexAlgorithm__mox_model__process>
 8006b72:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	1c11      	adds	r1, r2, #0
 8006b80:	0018      	movs	r0, r3
 8006b82:	f000 fc25 	bl	80073d0 <GasIndexAlgorithm__sigmoid_scaled__process>
 8006b86:	1c02      	adds	r2, r0, #0
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b8c:	e003      	b.n	8006b96 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	1c11      	adds	r1, r2, #0
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f000 fcec 	bl	800757c <GasIndexAlgorithm__adaptive_lowpass__process>
 8006ba4:	1c02      	adds	r2, r0, #0
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bae:	21fc      	movs	r1, #252	@ 0xfc
 8006bb0:	0589      	lsls	r1, r1, #22
 8006bb2:	1c18      	adds	r0, r3, #0
 8006bb4:	f7f9 fc8a 	bl	80004cc <__aeabi_fcmplt>
 8006bb8:	1e03      	subs	r3, r0, #0
 8006bba:	d003      	beq.n	8006bc4 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	22fc      	movs	r2, #252	@ 0xfc
 8006bc0:	0592      	lsls	r2, r2, #22
 8006bc2:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bc8:	2100      	movs	r1, #0
 8006bca:	1c18      	adds	r0, r3, #0
 8006bcc:	f7f9 fc92 	bl	80004f4 <__aeabi_fcmpgt>
 8006bd0:	1e03      	subs	r3, r0, #0
 8006bd2:	d015      	beq.n	8006c00 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	1c11      	adds	r1, r2, #0
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f000 fa4f 	bl	8007080 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	0018      	movs	r0, r3
 8006be6:	f000 f8e5 	bl	8006db4 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8006bea:	1c04      	adds	r4, r0, #0
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	0018      	movs	r0, r3
 8006bf0:	f000 f8ea 	bl	8006dc8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8006bf4:	1c02      	adds	r2, r0, #0
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	1c21      	adds	r1, r4, #0
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	f000 fb7a 	bl	80072f4 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c04:	21fc      	movs	r1, #252	@ 0xfc
 8006c06:	0589      	lsls	r1, r1, #22
 8006c08:	1c18      	adds	r0, r3, #0
 8006c0a:	f7f9 fdd7 	bl	80007bc <__aeabi_fadd>
 8006c0e:	1c03      	adds	r3, r0, #0
 8006c10:	1c18      	adds	r0, r3, #0
 8006c12:	f7fa fc3b 	bl	800148c <__aeabi_f2iz>
 8006c16:	0002      	movs	r2, r0
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	601a      	str	r2, [r3, #0]
    return;
 8006c1c:	46c0      	nop			@ (mov r8, r8)
}
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	b005      	add	sp, #20
 8006c22:	bd90      	pop	{r4, r7, pc}
 8006c24:	42340000 	.word	0x42340000
 8006c28:	0000fde7 	.word	0x0000fde7
 8006c2c:	00007fff 	.word	0x00007fff

08006c30 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8006c30:	b5b0      	push	{r4, r5, r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	223c      	movs	r2, #60	@ 0x3c
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	4952      	ldr	r1, [pc, #328]	@ (8006da4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006c5a:	1c18      	adds	r0, r3, #0
 8006c5c:	f7f9 ff38 	bl	8000ad0 <__aeabi_fdiv>
 8006c60:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006c62:	2188      	movs	r1, #136	@ 0x88
 8006c64:	05c9      	lsls	r1, r1, #23
 8006c66:	1c18      	adds	r0, r3, #0
 8006c68:	f7fa f918 	bl	8000e9c <__aeabi_fmul>
 8006c6c:	1c03      	adds	r3, r0, #0
 8006c6e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	494a      	ldr	r1, [pc, #296]	@ (8006da4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006c7a:	1c18      	adds	r0, r3, #0
 8006c7c:	f7f9 ff28 	bl	8000ad0 <__aeabi_fdiv>
 8006c80:	1c03      	adds	r3, r0, #0
 8006c82:	1c19      	adds	r1, r3, #0
 8006c84:	1c20      	adds	r0, r4, #0
 8006c86:	f7f9 fd99 	bl	80007bc <__aeabi_fadd>
 8006c8a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8006c8c:	1c19      	adds	r1, r3, #0
 8006c8e:	1c28      	adds	r0, r5, #0
 8006c90:	f7f9 ff1e 	bl	8000ad0 <__aeabi_fdiv>
 8006c94:	1c03      	adds	r3, r0, #0
 8006c96:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	4940      	ldr	r1, [pc, #256]	@ (8006da4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006ca2:	1c18      	adds	r0, r3, #0
 8006ca4:	f7f9 ff14 	bl	8000ad0 <__aeabi_fdiv>
 8006ca8:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006caa:	2185      	movs	r1, #133	@ 0x85
 8006cac:	05c9      	lsls	r1, r1, #23
 8006cae:	1c18      	adds	r0, r3, #0
 8006cb0:	f7fa f8f4 	bl	8000e9c <__aeabi_fmul>
 8006cb4:	1c03      	adds	r3, r0, #0
 8006cb6:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	4938      	ldr	r1, [pc, #224]	@ (8006da4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006cc2:	1c18      	adds	r0, r3, #0
 8006cc4:	f7f9 ff04 	bl	8000ad0 <__aeabi_fdiv>
 8006cc8:	1c03      	adds	r3, r0, #0
 8006cca:	1c19      	adds	r1, r3, #0
 8006ccc:	1c20      	adds	r0, r4, #0
 8006cce:	f7f9 fd75 	bl	80007bc <__aeabi_fadd>
 8006cd2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8006cd4:	1c19      	adds	r1, r3, #0
 8006cd6:	1c28      	adds	r0, r5, #0
 8006cd8:	f7f9 fefa 	bl	8000ad0 <__aeabi_fdiv>
 8006cdc:	1c03      	adds	r3, r0, #0
 8006cde:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d118      	bne.n	8006d1e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006cf0:	2188      	movs	r1, #136	@ 0x88
 8006cf2:	05c9      	lsls	r1, r1, #23
 8006cf4:	1c18      	adds	r0, r3, #0
 8006cf6:	f7fa f8d1 	bl	8000e9c <__aeabi_fmul>
 8006cfa:	1c03      	adds	r3, r0, #0
 8006cfc:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8006d02:	4929      	ldr	r1, [pc, #164]	@ (8006da8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8006d04:	1c18      	adds	r0, r3, #0
 8006d06:	f7f9 fd59 	bl	80007bc <__aeabi_fadd>
 8006d0a:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8006d0c:	1c19      	adds	r1, r3, #0
 8006d0e:	1c20      	adds	r0, r4, #0
 8006d10:	f7f9 fede 	bl	8000ad0 <__aeabi_fdiv>
 8006d14:	1c03      	adds	r3, r0, #0
 8006d16:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	655a      	str	r2, [r3, #84]	@ 0x54
 8006d1c:	e017      	b.n	8006d4e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006d22:	2188      	movs	r1, #136	@ 0x88
 8006d24:	05c9      	lsls	r1, r1, #23
 8006d26:	1c18      	adds	r0, r3, #0
 8006d28:	f7fa f8b8 	bl	8000e9c <__aeabi_fmul>
 8006d2c:	1c03      	adds	r3, r0, #0
 8006d2e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8006d34:	491d      	ldr	r1, [pc, #116]	@ (8006dac <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8006d36:	1c18      	adds	r0, r3, #0
 8006d38:	f7f9 fd40 	bl	80007bc <__aeabi_fadd>
 8006d3c:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8006d3e:	1c19      	adds	r1, r3, #0
 8006d40:	1c20      	adds	r0, r4, #0
 8006d42:	f7f9 fec5 	bl	8000ad0 <__aeabi_fdiv>
 8006d46:	1c03      	adds	r3, r0, #0
 8006d48:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006d52:	2185      	movs	r1, #133	@ 0x85
 8006d54:	05c9      	lsls	r1, r1, #23
 8006d56:	1c18      	adds	r0, r3, #0
 8006d58:	f7fa f8a0 	bl	8000e9c <__aeabi_fmul>
 8006d5c:	1c03      	adds	r3, r0, #0
 8006d5e:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	4912      	ldr	r1, [pc, #72]	@ (8006db0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8006d66:	1c18      	adds	r0, r3, #0
 8006d68:	f7f9 fd28 	bl	80007bc <__aeabi_fadd>
 8006d6c:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8006d6e:	1c19      	adds	r1, r3, #0
 8006d70:	1c20      	adds	r0, r4, #0
 8006d72:	f7f9 fead 	bl	8000ad0 <__aeabi_fdiv>
 8006d76:	1c03      	adds	r3, r0, #0
 8006d78:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8006d9c:	46c0      	nop			@ (mov r8, r8)
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	b002      	add	sp, #8
 8006da2:	bdb0      	pop	{r4, r5, r7, pc}
 8006da4:	45610000 	.word	0x45610000
 8006da8:	44960000 	.word	0x44960000
 8006dac:	41a00000 	.word	0x41a00000
 8006db0:	451c4000 	.word	0x451c4000

08006db4 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8006dc0:	1c18      	adds	r0, r3, #0
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	b002      	add	sp, #8
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8006dd8:	1c19      	adds	r1, r3, #0
 8006dda:	1c10      	adds	r0, r2, #0
 8006ddc:	f7f9 fcee 	bl	80007bc <__aeabi_fadd>
 8006de0:	1c03      	adds	r3, r0, #0
}
 8006de2:	1c18      	adds	r0, r3, #0
 8006de4:	46bd      	mov	sp, r7
 8006de6:	b002      	add	sp, #8
 8006de8:	bd80      	pop	{r7, pc}

08006dea <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b082      	sub	sp, #8
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	223c      	movs	r2, #60	@ 0x3c
 8006df6:	5c9b      	ldrb	r3, [r3, r2]
}
 8006df8:	0018      	movs	r0, r3
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	b002      	add	sp, #8
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8006e00:	b5b0      	push	{r4, r5, r7, lr}
 8006e02:	b08c      	sub	sp, #48	@ 0x30
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8006e0c:	1c19      	adds	r1, r3, #0
 8006e0e:	4895      	ldr	r0, [pc, #596]	@ (8007064 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8006e10:	f7fa f982 	bl	8001118 <__aeabi_fsub>
 8006e14:	1c03      	adds	r3, r0, #0
 8006e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e1c:	1c19      	adds	r1, r3, #0
 8006e1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e20:	f7f9 fb68 	bl	80004f4 <__aeabi_fcmpgt>
 8006e24:	1e03      	subs	r3, r0, #0
 8006e26:	d00b      	beq.n	8006e40 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8006e30:	1c19      	adds	r1, r3, #0
 8006e32:	1c10      	adds	r0, r2, #0
 8006e34:	f7f9 fcc2 	bl	80007bc <__aeabi_fadd>
 8006e38:	1c03      	adds	r3, r0, #0
 8006e3a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e44:	1c19      	adds	r1, r3, #0
 8006e46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e48:	f7f9 fb54 	bl	80004f4 <__aeabi_fcmpgt>
 8006e4c:	1e03      	subs	r3, r0, #0
 8006e4e:	d00b      	beq.n	8006e68 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8006e58:	1c19      	adds	r1, r3, #0
 8006e5a:	1c10      	adds	r0, r2, #0
 8006e5c:	f7f9 fcae 	bl	80007bc <__aeabi_fadd>
 8006e60:	1c03      	adds	r3, r0, #0
 8006e62:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6959      	ldr	r1, [r3, #20]
 8006e6c:	4a7e      	ldr	r2, [pc, #504]	@ (8007068 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	0018      	movs	r0, r3
 8006e72:	f000 f9f1 	bl	8007258 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	1c11      	adds	r1, r2, #0
 8006e7e:	0018      	movs	r0, r3
 8006e80:	f000 f9fa 	bl	8007278 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006e84:	1c03      	adds	r3, r0, #0
 8006e86:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8006e94:	1c19      	adds	r1, r3, #0
 8006e96:	1c10      	adds	r0, r2, #0
 8006e98:	f7fa f93e 	bl	8001118 <__aeabi_fsub>
 8006e9c:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8006e9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ea0:	1c18      	adds	r0, r3, #0
 8006ea2:	f7f9 fffb 	bl	8000e9c <__aeabi_fmul>
 8006ea6:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8006ea8:	1c19      	adds	r1, r3, #0
 8006eaa:	1c20      	adds	r0, r4, #0
 8006eac:	f7f9 fc86 	bl	80007bc <__aeabi_fadd>
 8006eb0:	1c03      	adds	r3, r0, #0
 8006eb2:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8006ebc:	1c19      	adds	r1, r3, #0
 8006ebe:	486b      	ldr	r0, [pc, #428]	@ (800706c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8006ec0:	f7fa f92a 	bl	8001118 <__aeabi_fsub>
 8006ec4:	1c03      	adds	r3, r0, #0
 8006ec6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	1c11      	adds	r1, r2, #0
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	f000 f9d1 	bl	8007278 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006ed6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8006ed8:	1c19      	adds	r1, r3, #0
 8006eda:	1c28      	adds	r0, r5, #0
 8006edc:	f7f9 ffde 	bl	8000e9c <__aeabi_fmul>
 8006ee0:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8006ee2:	1c19      	adds	r1, r3, #0
 8006ee4:	1c20      	adds	r0, r4, #0
 8006ee6:	f7f9 fc69 	bl	80007bc <__aeabi_fadd>
 8006eea:	1c03      	adds	r3, r0, #0
 8006eec:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006eee:	4a60      	ldr	r2, [pc, #384]	@ (8007070 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8006ef0:	6a39      	ldr	r1, [r7, #32]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	f000 f9af 	bl	8007258 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	1c11      	adds	r1, r2, #0
 8006f02:	0018      	movs	r0, r3
 8006f04:	f000 f9b8 	bl	8007278 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006f08:	1c03      	adds	r3, r0, #0
 8006f0a:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8006f0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f0e:	69f8      	ldr	r0, [r7, #28]
 8006f10:	f7f9 ffc4 	bl	8000e9c <__aeabi_fmul>
 8006f14:	1c03      	adds	r3, r0, #0
 8006f16:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6999      	ldr	r1, [r3, #24]
 8006f20:	4a51      	ldr	r2, [pc, #324]	@ (8007068 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	0018      	movs	r0, r3
 8006f26:	f000 f997 	bl	8007258 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	1c11      	adds	r1, r2, #0
 8006f32:	0018      	movs	r0, r3
 8006f34:	f000 f9a0 	bl	8007278 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006f38:	1c03      	adds	r3, r0, #0
 8006f3a:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8006f48:	1c19      	adds	r1, r3, #0
 8006f4a:	1c10      	adds	r0, r2, #0
 8006f4c:	f7fa f8e4 	bl	8001118 <__aeabi_fsub>
 8006f50:	1c03      	adds	r3, r0, #0
 8006f52:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8006f54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f56:	69b8      	ldr	r0, [r7, #24]
 8006f58:	f7fa f8de 	bl	8001118 <__aeabi_fsub>
 8006f5c:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8006f5e:	1c19      	adds	r1, r3, #0
 8006f60:	1c28      	adds	r0, r5, #0
 8006f62:	f7f9 ff9b 	bl	8000e9c <__aeabi_fmul>
 8006f66:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8006f68:	1c19      	adds	r1, r3, #0
 8006f6a:	1c20      	adds	r0, r4, #0
 8006f6c:	f7f9 fc26 	bl	80007bc <__aeabi_fadd>
 8006f70:	1c03      	adds	r3, r0, #0
 8006f72:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8006f7c:	1c19      	adds	r1, r3, #0
 8006f7e:	483b      	ldr	r0, [pc, #236]	@ (800706c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8006f80:	f7fa f8ca 	bl	8001118 <__aeabi_fsub>
 8006f84:	1c03      	adds	r3, r0, #0
 8006f86:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	1c11      	adds	r1, r2, #0
 8006f90:	0018      	movs	r0, r3
 8006f92:	f000 f971 	bl	8007278 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006f96:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8006f98:	1c19      	adds	r1, r3, #0
 8006f9a:	1c28      	adds	r0, r5, #0
 8006f9c:	f7f9 ff7e 	bl	8000e9c <__aeabi_fmul>
 8006fa0:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8006fa2:	1c19      	adds	r1, r3, #0
 8006fa4:	1c20      	adds	r0, r4, #0
 8006fa6:	f7f9 fc09 	bl	80007bc <__aeabi_fadd>
 8006faa:	1c03      	adds	r3, r0, #0
 8006fac:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006fae:	4a30      	ldr	r2, [pc, #192]	@ (8007070 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8006fb0:	6939      	ldr	r1, [r7, #16]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	0018      	movs	r0, r3
 8006fb6:	f000 f94f 	bl	8007258 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	1c11      	adds	r1, r2, #0
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	f000 f958 	bl	8007278 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006fc8:	1c03      	adds	r3, r0, #0
 8006fca:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8006fcc:	6979      	ldr	r1, [r7, #20]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f7f9 ff64 	bl	8000e9c <__aeabi_fmul>
 8006fd4:	1c03      	adds	r3, r0, #0
 8006fd6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	4923      	ldr	r1, [pc, #140]	@ (8007074 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8006fe6:	1c18      	adds	r0, r3, #0
 8006fe8:	f7f9 fd72 	bl	8000ad0 <__aeabi_fdiv>
 8006fec:	1c03      	adds	r3, r0, #0
 8006fee:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8006ff0:	69f9      	ldr	r1, [r7, #28]
 8006ff2:	20fe      	movs	r0, #254	@ 0xfe
 8006ff4:	0580      	lsls	r0, r0, #22
 8006ff6:	f7fa f88f 	bl	8001118 <__aeabi_fsub>
 8006ffa:	1c03      	adds	r3, r0, #0
 8006ffc:	491e      	ldr	r1, [pc, #120]	@ (8007078 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8006ffe:	1c18      	adds	r0, r3, #0
 8007000:	f7f9 ff4c 	bl	8000e9c <__aeabi_fmul>
 8007004:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8007006:	491d      	ldr	r1, [pc, #116]	@ (800707c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8007008:	1c18      	adds	r0, r3, #0
 800700a:	f7fa f885 	bl	8001118 <__aeabi_fsub>
 800700e:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8007010:	1c19      	adds	r1, r3, #0
 8007012:	1c28      	adds	r0, r5, #0
 8007014:	f7f9 ff42 	bl	8000e9c <__aeabi_fmul>
 8007018:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800701a:	1c19      	adds	r1, r3, #0
 800701c:	1c20      	adds	r0, r4, #0
 800701e:	f7f9 fbcd 	bl	80007bc <__aeabi_fadd>
 8007022:	1c03      	adds	r3, r0, #0
 8007024:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800702e:	2100      	movs	r1, #0
 8007030:	1c18      	adds	r0, r3, #0
 8007032:	f7f9 fa4b 	bl	80004cc <__aeabi_fcmplt>
 8007036:	1e03      	subs	r3, r0, #0
 8007038:	d002      	beq.n	8007040 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007048:	1c19      	adds	r1, r3, #0
 800704a:	1c10      	adds	r0, r2, #0
 800704c:	f7f9 fa52 	bl	80004f4 <__aeabi_fcmpgt>
 8007050:	1e03      	subs	r3, r0, #0
 8007052:	d100      	bne.n	8007056 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8007054:	e002      	b.n	800705c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800705c:	46c0      	nop			@ (mov r8, r8)
 800705e:	46bd      	mov	sp, r7
 8007060:	b00c      	add	sp, #48	@ 0x30
 8007062:	bdb0      	pop	{r4, r5, r7, pc}
 8007064:	46fffe00 	.word	0x46fffe00
 8007068:	3c23d70a 	.word	0x3c23d70a
 800706c:	43ff0000 	.word	0x43ff0000
 8007070:	3db851ec 	.word	0x3db851ec
 8007074:	42700000 	.word	0x42700000
 8007078:	3fa66666 	.word	0x3fa66666
 800707c:	3e99999a 	.word	0x3e99999a

08007080 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8007080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	223c      	movs	r2, #60	@ 0x3c
 800708e:	5c9b      	ldrb	r3, [r3, r2]
 8007090:	2201      	movs	r2, #1
 8007092:	4053      	eors	r3, r2
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00a      	beq.n	80070b0 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	223c      	movs	r2, #60	@ 0x3c
 800709e:	2101      	movs	r1, #1
 80070a0:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 80070ae:	e0c8      	b.n	8007242 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b4:	4965      	ldr	r1, [pc, #404]	@ (800724c <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 80070b6:	1c18      	adds	r0, r3, #0
 80070b8:	f7f9 fa26 	bl	8000508 <__aeabi_fcmpge>
 80070bc:	1e03      	subs	r3, r0, #0
 80070be:	d107      	bne.n	80070d0 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 80070c4:	4962      	ldr	r1, [pc, #392]	@ (8007250 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 80070c6:	1c18      	adds	r0, r3, #0
 80070c8:	f7f9 fa0a 	bl	80004e0 <__aeabi_fcmple>
 80070cc:	1e03      	subs	r3, r0, #0
 80070ce:	d00e      	beq.n	80070ee <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 80070d8:	1c19      	adds	r1, r3, #0
 80070da:	1c10      	adds	r0, r2, #0
 80070dc:	f7f9 fb6e 	bl	80007bc <__aeabi_fadd>
 80070e0:	1c03      	adds	r3, r0, #0
 80070e2:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070f2:	1c19      	adds	r1, r3, #0
 80070f4:	6838      	ldr	r0, [r7, #0]
 80070f6:	f7fa f80f 	bl	8001118 <__aeabi_fsub>
 80070fa:	1c03      	adds	r3, r0, #0
 80070fc:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	0018      	movs	r0, r3
 8007102:	f7ff fe7d 	bl	8006e00 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710a:	1c19      	adds	r1, r3, #0
 800710c:	6838      	ldr	r0, [r7, #0]
 800710e:	f7fa f803 	bl	8001118 <__aeabi_fsub>
 8007112:	1c03      	adds	r3, r0, #0
 8007114:	2185      	movs	r1, #133	@ 0x85
 8007116:	05c9      	lsls	r1, r1, #23
 8007118:	1c18      	adds	r0, r3, #0
 800711a:	f7f9 fcd9 	bl	8000ad0 <__aeabi_fdiv>
 800711e:	1c03      	adds	r3, r0, #0
 8007120:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8007122:	2100      	movs	r1, #0
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f7f9 f9d1 	bl	80004cc <__aeabi_fcmplt>
 800712a:	1e03      	subs	r3, r0, #0
 800712c:	d008      	beq.n	8007140 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007132:	68f9      	ldr	r1, [r7, #12]
 8007134:	1c18      	adds	r0, r3, #0
 8007136:	f7f9 ffef 	bl	8001118 <__aeabi_fsub>
 800713a:	1c03      	adds	r3, r0, #0
 800713c:	617b      	str	r3, [r7, #20]
 800713e:	e007      	b.n	8007150 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007144:	1c19      	adds	r1, r3, #0
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f7f9 fb38 	bl	80007bc <__aeabi_fadd>
 800714c:	1c03      	adds	r3, r0, #0
 800714e:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8007150:	23fe      	movs	r3, #254	@ 0xfe
 8007152:	059b      	lsls	r3, r3, #22
 8007154:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8007156:	493f      	ldr	r1, [pc, #252]	@ (8007254 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007158:	6978      	ldr	r0, [r7, #20]
 800715a:	f7f9 f9cb 	bl	80004f4 <__aeabi_fcmpgt>
 800715e:	1e03      	subs	r3, r0, #0
 8007160:	d010      	beq.n	8007184 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8007162:	493c      	ldr	r1, [pc, #240]	@ (8007254 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007164:	6978      	ldr	r0, [r7, #20]
 8007166:	f7f9 fcb3 	bl	8000ad0 <__aeabi_fdiv>
 800716a:	1c03      	adds	r3, r0, #0
 800716c:	1c1c      	adds	r4, r3, #0
 800716e:	4939      	ldr	r1, [pc, #228]	@ (8007254 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007170:	6978      	ldr	r0, [r7, #20]
 8007172:	f7f9 fcad 	bl	8000ad0 <__aeabi_fdiv>
 8007176:	1c03      	adds	r3, r0, #0
 8007178:	1c19      	adds	r1, r3, #0
 800717a:	1c20      	adds	r0, r4, #0
 800717c:	f7f9 fe8e 	bl	8000e9c <__aeabi_fmul>
 8007180:	1c03      	adds	r3, r0, #0
 8007182:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8007188:	1c19      	adds	r1, r3, #0
 800718a:	2085      	movs	r0, #133	@ 0x85
 800718c:	05c0      	lsls	r0, r0, #23
 800718e:	f7f9 ffc3 	bl	8001118 <__aeabi_fsub>
 8007192:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8007194:	6939      	ldr	r1, [r7, #16]
 8007196:	1c18      	adds	r0, r3, #0
 8007198:	f7f9 fe80 	bl	8000e9c <__aeabi_fmul>
 800719c:	1c03      	adds	r3, r0, #0
 800719e:	1c18      	adds	r0, r3, #0
 80071a0:	f011 fda6 	bl	8018cf0 <sqrtf>
 80071a4:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80071ae:	2185      	movs	r1, #133	@ 0x85
 80071b0:	05c9      	lsls	r1, r1, #23
 80071b2:	6938      	ldr	r0, [r7, #16]
 80071b4:	f7f9 fe72 	bl	8000e9c <__aeabi_fmul>
 80071b8:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 80071ba:	1c19      	adds	r1, r3, #0
 80071bc:	1c28      	adds	r0, r5, #0
 80071be:	f7f9 fc87 	bl	8000ad0 <__aeabi_fdiv>
 80071c2:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 80071c4:	1c19      	adds	r1, r3, #0
 80071c6:	1c20      	adds	r0, r4, #0
 80071c8:	f7f9 fe68 	bl	8000e9c <__aeabi_fmul>
 80071cc:	1c03      	adds	r3, r0, #0
 80071ce:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071d4:	68f9      	ldr	r1, [r7, #12]
 80071d6:	1c18      	adds	r0, r3, #0
 80071d8:	f7f9 fe60 	bl	8000e9c <__aeabi_fmul>
 80071dc:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 80071de:	6939      	ldr	r1, [r7, #16]
 80071e0:	1c18      	adds	r0, r3, #0
 80071e2:	f7f9 fc75 	bl	8000ad0 <__aeabi_fdiv>
 80071e6:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 80071e8:	68f9      	ldr	r1, [r7, #12]
 80071ea:	1c18      	adds	r0, r3, #0
 80071ec:	f7f9 fe56 	bl	8000e9c <__aeabi_fmul>
 80071f0:	1c03      	adds	r3, r0, #0
             sqrtf(
 80071f2:	1c19      	adds	r1, r3, #0
 80071f4:	1c20      	adds	r0, r4, #0
 80071f6:	f7f9 fae1 	bl	80007bc <__aeabi_fadd>
 80071fa:	1c03      	adds	r3, r0, #0
 80071fc:	1c18      	adds	r0, r3, #0
 80071fe:	f011 fd77 	bl	8018cf0 <sqrtf>
 8007202:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007204:	1c19      	adds	r1, r3, #0
 8007206:	1c30      	adds	r0, r6, #0
 8007208:	f7f9 fe48 	bl	8000e9c <__aeabi_fmul>
 800720c:	1c03      	adds	r3, r0, #0
 800720e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800721c:	68f9      	ldr	r1, [r7, #12]
 800721e:	1c18      	adds	r0, r3, #0
 8007220:	f7f9 fe3c 	bl	8000e9c <__aeabi_fmul>
 8007224:	1c03      	adds	r3, r0, #0
 8007226:	2182      	movs	r1, #130	@ 0x82
 8007228:	05c9      	lsls	r1, r1, #23
 800722a:	1c18      	adds	r0, r3, #0
 800722c:	f7f9 fc50 	bl	8000ad0 <__aeabi_fdiv>
 8007230:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8007232:	1c19      	adds	r1, r3, #0
 8007234:	1c20      	adds	r0, r4, #0
 8007236:	f7f9 fac1 	bl	80007bc <__aeabi_fadd>
 800723a:	1c03      	adds	r3, r0, #0
 800723c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007242:	46c0      	nop			@ (mov r8, r8)
 8007244:	46bd      	mov	sp, r7
 8007246:	b007      	add	sp, #28
 8007248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800724a:	46c0      	nop			@ (mov r8, r8)
 800724c:	42c80000 	.word	0x42c80000
 8007250:	c2c80000 	.word	0xc2c80000
 8007254:	44b40000 	.word	0x44b40000

08007258 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007270:	46c0      	nop			@ (mov r8, r8)
 8007272:	46bd      	mov	sp, r7
 8007274:	b004      	add	sp, #16
 8007276:	bd80      	pop	{r7, pc}

08007278 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8007278:	b590      	push	{r4, r7, lr}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800728a:	1c19      	adds	r1, r3, #0
 800728c:	6838      	ldr	r0, [r7, #0]
 800728e:	f7f9 ff43 	bl	8001118 <__aeabi_fsub>
 8007292:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007294:	1c19      	adds	r1, r3, #0
 8007296:	1c20      	adds	r0, r4, #0
 8007298:	f7f9 fe00 	bl	8000e9c <__aeabi_fmul>
 800729c:	1c03      	adds	r3, r0, #0
 800729e:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 80072a0:	4912      	ldr	r1, [pc, #72]	@ (80072ec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f7f9 f912 	bl	80004cc <__aeabi_fcmplt>
 80072a8:	1e03      	subs	r3, r0, #0
 80072aa:	d002      	beq.n	80072b2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 80072ac:	23fe      	movs	r3, #254	@ 0xfe
 80072ae:	059b      	lsls	r3, r3, #22
 80072b0:	e018      	b.n	80072e4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 80072b2:	490f      	ldr	r1, [pc, #60]	@ (80072f0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f7f9 f91d 	bl	80004f4 <__aeabi_fcmpgt>
 80072ba:	1e03      	subs	r3, r0, #0
 80072bc:	d001      	beq.n	80072c2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 80072be:	2300      	movs	r3, #0
 80072c0:	e010      	b.n	80072e4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	1c18      	adds	r0, r3, #0
 80072c6:	f011 fceb 	bl	8018ca0 <expf>
 80072ca:	1c03      	adds	r3, r0, #0
 80072cc:	21fe      	movs	r1, #254	@ 0xfe
 80072ce:	0589      	lsls	r1, r1, #22
 80072d0:	1c18      	adds	r0, r3, #0
 80072d2:	f7f9 fa73 	bl	80007bc <__aeabi_fadd>
 80072d6:	1c03      	adds	r3, r0, #0
 80072d8:	1c19      	adds	r1, r3, #0
 80072da:	20fe      	movs	r0, #254	@ 0xfe
 80072dc:	0580      	lsls	r0, r0, #22
 80072de:	f7f9 fbf7 	bl	8000ad0 <__aeabi_fdiv>
 80072e2:	1c03      	adds	r3, r0, #0
    }
}
 80072e4:	1c18      	adds	r0, r3, #0
 80072e6:	46bd      	mov	sp, r7
 80072e8:	b005      	add	sp, #20
 80072ea:	bd90      	pop	{r4, r7, pc}
 80072ec:	c2480000 	.word	0xc2480000
 80072f0:	42480000 	.word	0x42480000

080072f4 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800730c:	46c0      	nop			@ (mov r8, r8)
 800730e:	46bd      	mov	sp, r7
 8007310:	b004      	add	sp, #16
 8007312:	bd80      	pop	{r7, pc}

08007314 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8007314:	b590      	push	{r4, r7, lr}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d114      	bne.n	8007350 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800732a:	1c19      	adds	r1, r3, #0
 800732c:	6838      	ldr	r0, [r7, #0]
 800732e:	f7f9 fef3 	bl	8001118 <__aeabi_fsub>
 8007332:	1c03      	adds	r3, r0, #0
 8007334:	4918      	ldr	r1, [pc, #96]	@ (8007398 <GasIndexAlgorithm__mox_model__process+0x84>)
 8007336:	1c18      	adds	r0, r3, #0
 8007338:	f7f9 fbca 	bl	8000ad0 <__aeabi_fdiv>
 800733c:	1c03      	adds	r3, r0, #0
 800733e:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8007344:	1c19      	adds	r1, r3, #0
 8007346:	1c10      	adds	r0, r2, #0
 8007348:	f7f9 fda8 	bl	8000e9c <__aeabi_fmul>
 800734c:	1c03      	adds	r3, r0, #0
 800734e:	e01f      	b.n	8007390 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007354:	1c19      	adds	r1, r3, #0
 8007356:	6838      	ldr	r0, [r7, #0]
 8007358:	f7f9 fede 	bl	8001118 <__aeabi_fsub>
 800735c:	1c03      	adds	r3, r0, #0
 800735e:	1c1a      	adds	r2, r3, #0
 8007360:	2380      	movs	r3, #128	@ 0x80
 8007362:	061b      	lsls	r3, r3, #24
 8007364:	4053      	eors	r3, r2
 8007366:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800736c:	490b      	ldr	r1, [pc, #44]	@ (800739c <GasIndexAlgorithm__mox_model__process+0x88>)
 800736e:	1c18      	adds	r0, r3, #0
 8007370:	f7f9 fa24 	bl	80007bc <__aeabi_fadd>
 8007374:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007376:	1c19      	adds	r1, r3, #0
 8007378:	1c20      	adds	r0, r4, #0
 800737a:	f7f9 fba9 	bl	8000ad0 <__aeabi_fdiv>
 800737e:	1c03      	adds	r3, r0, #0
 8007380:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8007386:	1c19      	adds	r1, r3, #0
 8007388:	1c10      	adds	r0, r2, #0
 800738a:	f7f9 fd87 	bl	8000e9c <__aeabi_fmul>
 800738e:	1c03      	adds	r3, r0, #0
    }
}
 8007390:	1c18      	adds	r0, r3, #0
 8007392:	46bd      	mov	sp, r7
 8007394:	b003      	add	sp, #12
 8007396:	bd90      	pop	{r4, r7, pc}
 8007398:	44fa0000 	.word	0x44fa0000
 800739c:	435c0000 	.word	0x435c0000

080073a0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
 80073ac:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2180      	movs	r1, #128	@ 0x80
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2184      	movs	r1, #132	@ 0x84
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2188      	movs	r1, #136	@ 0x88
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	505a      	str	r2, [r3, r1]
}
 80073c6:	46c0      	nop			@ (mov r8, r8)
 80073c8:	46bd      	mov	sp, r7
 80073ca:	b004      	add	sp, #16
 80073cc:	bd80      	pop	{r7, pc}
	...

080073d0 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 80073d0:	b590      	push	{r4, r7, lr}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2280      	movs	r2, #128	@ 0x80
 80073de:	589c      	ldr	r4, [r3, r2]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2284      	movs	r2, #132	@ 0x84
 80073e4:	589b      	ldr	r3, [r3, r2]
 80073e6:	1c19      	adds	r1, r3, #0
 80073e8:	6838      	ldr	r0, [r7, #0]
 80073ea:	f7f9 fe95 	bl	8001118 <__aeabi_fsub>
 80073ee:	1c03      	adds	r3, r0, #0
 80073f0:	1c19      	adds	r1, r3, #0
 80073f2:	1c20      	adds	r0, r4, #0
 80073f4:	f7f9 fd52 	bl	8000e9c <__aeabi_fmul>
 80073f8:	1c03      	adds	r3, r0, #0
 80073fa:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 80073fc:	4940      	ldr	r1, [pc, #256]	@ (8007500 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 80073fe:	68b8      	ldr	r0, [r7, #8]
 8007400:	f7f9 f864 	bl	80004cc <__aeabi_fcmplt>
 8007404:	1e03      	subs	r3, r0, #0
 8007406:	d001      	beq.n	800740c <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8007408:	4b3e      	ldr	r3, [pc, #248]	@ (8007504 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800740a:	e075      	b.n	80074f8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800740c:	493e      	ldr	r1, [pc, #248]	@ (8007508 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800740e:	68b8      	ldr	r0, [r7, #8]
 8007410:	f7f9 f870 	bl	80004f4 <__aeabi_fcmpgt>
 8007414:	1e03      	subs	r3, r0, #0
 8007416:	d001      	beq.n	800741c <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8007418:	2300      	movs	r3, #0
 800741a:	e06d      	b.n	80074f8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800741c:	2100      	movs	r1, #0
 800741e:	6838      	ldr	r0, [r7, #0]
 8007420:	f7f9 f872 	bl	8000508 <__aeabi_fcmpge>
 8007424:	1e03      	subs	r3, r0, #0
 8007426:	d047      	beq.n	80074b8 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2288      	movs	r2, #136	@ 0x88
 800742c:	589b      	ldr	r3, [r3, r2]
 800742e:	21fe      	movs	r1, #254	@ 0xfe
 8007430:	0589      	lsls	r1, r1, #22
 8007432:	1c18      	adds	r0, r3, #0
 8007434:	f7f9 f844 	bl	80004c0 <__aeabi_fcmpeq>
 8007438:	1e03      	subs	r3, r0, #0
 800743a:	d00e      	beq.n	800745a <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	1c19      	adds	r1, r3, #0
 8007442:	20fe      	movs	r0, #254	@ 0xfe
 8007444:	0580      	lsls	r0, r0, #22
 8007446:	f7f9 fe67 	bl	8001118 <__aeabi_fsub>
 800744a:	1c03      	adds	r3, r0, #0
 800744c:	492f      	ldr	r1, [pc, #188]	@ (800750c <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800744e:	1c18      	adds	r0, r3, #0
 8007450:	f7f9 fd24 	bl	8000e9c <__aeabi_fmul>
 8007454:	1c03      	adds	r3, r0, #0
 8007456:	60fb      	str	r3, [r7, #12]
 8007458:	e012      	b.n	8007480 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	492c      	ldr	r1, [pc, #176]	@ (8007510 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8007460:	1c18      	adds	r0, r3, #0
 8007462:	f7f9 fd1b 	bl	8000e9c <__aeabi_fmul>
 8007466:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8007468:	1c19      	adds	r1, r3, #0
 800746a:	4826      	ldr	r0, [pc, #152]	@ (8007504 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800746c:	f7f9 fe54 	bl	8001118 <__aeabi_fsub>
 8007470:	1c03      	adds	r3, r0, #0
 8007472:	2181      	movs	r1, #129	@ 0x81
 8007474:	05c9      	lsls	r1, r1, #23
 8007476:	1c18      	adds	r0, r3, #0
 8007478:	f7f9 fb2a 	bl	8000ad0 <__aeabi_fdiv>
 800747c:	1c03      	adds	r3, r0, #0
 800747e:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8007480:	4920      	ldr	r1, [pc, #128]	@ (8007504 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f7f9 f99a 	bl	80007bc <__aeabi_fadd>
 8007488:	1c03      	adds	r3, r0, #0
 800748a:	1c1c      	adds	r4, r3, #0
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	1c18      	adds	r0, r3, #0
 8007490:	f011 fc06 	bl	8018ca0 <expf>
 8007494:	1c03      	adds	r3, r0, #0
 8007496:	21fe      	movs	r1, #254	@ 0xfe
 8007498:	0589      	lsls	r1, r1, #22
 800749a:	1c18      	adds	r0, r3, #0
 800749c:	f7f9 f98e 	bl	80007bc <__aeabi_fadd>
 80074a0:	1c03      	adds	r3, r0, #0
 80074a2:	1c19      	adds	r1, r3, #0
 80074a4:	1c20      	adds	r0, r4, #0
 80074a6:	f7f9 fb13 	bl	8000ad0 <__aeabi_fdiv>
 80074aa:	1c03      	adds	r3, r0, #0
 80074ac:	68f9      	ldr	r1, [r7, #12]
 80074ae:	1c18      	adds	r0, r3, #0
 80074b0:	f7f9 fe32 	bl	8001118 <__aeabi_fsub>
 80074b4:	1c03      	adds	r3, r0, #0
 80074b6:	e01f      	b.n	80074f8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2188      	movs	r1, #136	@ 0x88
 80074c0:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 80074c2:	1c19      	adds	r1, r3, #0
 80074c4:	1c10      	adds	r0, r2, #0
 80074c6:	f7f9 fb03 	bl	8000ad0 <__aeabi_fdiv>
 80074ca:	1c03      	adds	r3, r0, #0
 80074cc:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	1c18      	adds	r0, r3, #0
 80074d2:	f011 fbe5 	bl	8018ca0 <expf>
 80074d6:	1c03      	adds	r3, r0, #0
 80074d8:	21fe      	movs	r1, #254	@ 0xfe
 80074da:	0589      	lsls	r1, r1, #22
 80074dc:	1c18      	adds	r0, r3, #0
 80074de:	f7f9 f96d 	bl	80007bc <__aeabi_fadd>
 80074e2:	1c03      	adds	r3, r0, #0
 80074e4:	1c19      	adds	r1, r3, #0
 80074e6:	4807      	ldr	r0, [pc, #28]	@ (8007504 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80074e8:	f7f9 faf2 	bl	8000ad0 <__aeabi_fdiv>
 80074ec:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 80074ee:	1c19      	adds	r1, r3, #0
 80074f0:	1c20      	adds	r0, r4, #0
 80074f2:	f7f9 fcd3 	bl	8000e9c <__aeabi_fmul>
 80074f6:	1c03      	adds	r3, r0, #0
        }
    }
}
 80074f8:	1c18      	adds	r0, r3, #0
 80074fa:	46bd      	mov	sp, r7
 80074fc:	b005      	add	sp, #20
 80074fe:	bd90      	pop	{r4, r7, pc}
 8007500:	c2480000 	.word	0xc2480000
 8007504:	43fa0000 	.word	0x43fa0000
 8007508:	42480000 	.word	0x42480000
 800750c:	3f8041ab 	.word	0x3f8041ab
 8007510:	40a00000 	.word	0x40a00000

08007514 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8007514:	b590      	push	{r4, r7, lr}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	4913      	ldr	r1, [pc, #76]	@ (8007574 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8007526:	1c18      	adds	r0, r3, #0
 8007528:	f7f9 f948 	bl	80007bc <__aeabi_fadd>
 800752c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800752e:	1c19      	adds	r1, r3, #0
 8007530:	1c20      	adds	r0, r4, #0
 8007532:	f7f9 facd 	bl	8000ad0 <__aeabi_fdiv>
 8007536:	1c03      	adds	r3, r0, #0
 8007538:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	228c      	movs	r2, #140	@ 0x8c
 800753e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	490b      	ldr	r1, [pc, #44]	@ (8007578 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800754a:	1c18      	adds	r0, r3, #0
 800754c:	f7f9 f936 	bl	80007bc <__aeabi_fadd>
 8007550:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8007552:	1c19      	adds	r1, r3, #0
 8007554:	1c20      	adds	r0, r4, #0
 8007556:	f7f9 fabb 	bl	8000ad0 <__aeabi_fdiv>
 800755a:	1c03      	adds	r3, r0, #0
 800755c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2290      	movs	r2, #144	@ 0x90
 8007562:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2294      	movs	r2, #148	@ 0x94
 8007568:	2100      	movs	r1, #0
 800756a:	5499      	strb	r1, [r3, r2]
}
 800756c:	46c0      	nop			@ (mov r8, r8)
 800756e:	46bd      	mov	sp, r7
 8007570:	b003      	add	sp, #12
 8007572:	bd90      	pop	{r4, r7, pc}
 8007574:	41a00000 	.word	0x41a00000
 8007578:	43fa0000 	.word	0x43fa0000

0800757c <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800757c:	b590      	push	{r4, r7, lr}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2294      	movs	r2, #148	@ 0x94
 800758a:	5c9b      	ldrb	r3, [r3, r2]
 800758c:	2201      	movs	r2, #1
 800758e:	4053      	eors	r3, r2
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00f      	beq.n	80075b6 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2198      	movs	r1, #152	@ 0x98
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	219c      	movs	r1, #156	@ 0x9c
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	21a0      	movs	r1, #160	@ 0xa0
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2294      	movs	r2, #148	@ 0x94
 80075b2:	2101      	movs	r1, #1
 80075b4:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	228c      	movs	r2, #140	@ 0x8c
 80075ba:	589b      	ldr	r3, [r3, r2]
 80075bc:	1c19      	adds	r1, r3, #0
 80075be:	20fe      	movs	r0, #254	@ 0xfe
 80075c0:	0580      	lsls	r0, r0, #22
 80075c2:	f7f9 fda9 	bl	8001118 <__aeabi_fsub>
 80075c6:	1c03      	adds	r3, r0, #0
 80075c8:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2298      	movs	r2, #152	@ 0x98
 80075ce:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 80075d0:	1c19      	adds	r1, r3, #0
 80075d2:	f7f9 fc63 	bl	8000e9c <__aeabi_fmul>
 80075d6:	1c03      	adds	r3, r0, #0
 80075d8:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	228c      	movs	r2, #140	@ 0x8c
 80075de:	589b      	ldr	r3, [r3, r2]
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	1c18      	adds	r0, r3, #0
 80075e4:	f7f9 fc5a 	bl	8000e9c <__aeabi_fmul>
 80075e8:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 80075ea:	1c19      	adds	r1, r3, #0
 80075ec:	1c20      	adds	r0, r4, #0
 80075ee:	f7f9 f8e5 	bl	80007bc <__aeabi_fadd>
 80075f2:	1c03      	adds	r3, r0, #0
 80075f4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2298      	movs	r2, #152	@ 0x98
 80075fa:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2290      	movs	r2, #144	@ 0x90
 8007600:	589b      	ldr	r3, [r3, r2]
 8007602:	1c19      	adds	r1, r3, #0
 8007604:	20fe      	movs	r0, #254	@ 0xfe
 8007606:	0580      	lsls	r0, r0, #22
 8007608:	f7f9 fd86 	bl	8001118 <__aeabi_fsub>
 800760c:	1c03      	adds	r3, r0, #0
 800760e:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	229c      	movs	r2, #156	@ 0x9c
 8007614:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8007616:	1c19      	adds	r1, r3, #0
 8007618:	f7f9 fc40 	bl	8000e9c <__aeabi_fmul>
 800761c:	1c03      	adds	r3, r0, #0
 800761e:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2290      	movs	r2, #144	@ 0x90
 8007624:	589b      	ldr	r3, [r3, r2]
 8007626:	6839      	ldr	r1, [r7, #0]
 8007628:	1c18      	adds	r0, r3, #0
 800762a:	f7f9 fc37 	bl	8000e9c <__aeabi_fmul>
 800762e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8007630:	1c19      	adds	r1, r3, #0
 8007632:	1c20      	adds	r0, r4, #0
 8007634:	f7f9 f8c2 	bl	80007bc <__aeabi_fadd>
 8007638:	1c03      	adds	r3, r0, #0
 800763a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	229c      	movs	r2, #156	@ 0x9c
 8007640:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2298      	movs	r2, #152	@ 0x98
 8007646:	589a      	ldr	r2, [r3, r2]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	219c      	movs	r1, #156	@ 0x9c
 800764c:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800764e:	1c19      	adds	r1, r3, #0
 8007650:	1c10      	adds	r0, r2, #0
 8007652:	f7f9 fd61 	bl	8001118 <__aeabi_fsub>
 8007656:	1c03      	adds	r3, r0, #0
 8007658:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800765a:	2100      	movs	r1, #0
 800765c:	6978      	ldr	r0, [r7, #20]
 800765e:	f7f8 ff35 	bl	80004cc <__aeabi_fcmplt>
 8007662:	1e03      	subs	r3, r0, #0
 8007664:	d004      	beq.n	8007670 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2280      	movs	r2, #128	@ 0x80
 800766a:	0612      	lsls	r2, r2, #24
 800766c:	4053      	eors	r3, r2
 800766e:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8007670:	4923      	ldr	r1, [pc, #140]	@ (8007700 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8007672:	6978      	ldr	r0, [r7, #20]
 8007674:	f7f9 fc12 	bl	8000e9c <__aeabi_fmul>
 8007678:	1c03      	adds	r3, r0, #0
 800767a:	1c18      	adds	r0, r3, #0
 800767c:	f011 fb10 	bl	8018ca0 <expf>
 8007680:	1c03      	adds	r3, r0, #0
 8007682:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8007684:	491f      	ldr	r1, [pc, #124]	@ (8007704 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8007686:	6938      	ldr	r0, [r7, #16]
 8007688:	f7f9 fc08 	bl	8000e9c <__aeabi_fmul>
 800768c:	1c03      	adds	r3, r0, #0
 800768e:	491e      	ldr	r1, [pc, #120]	@ (8007708 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8007690:	1c18      	adds	r0, r3, #0
 8007692:	f7f9 f893 	bl	80007bc <__aeabi_fadd>
 8007696:	1c03      	adds	r3, r0, #0
 8007698:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685c      	ldr	r4, [r3, #4]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	68f9      	ldr	r1, [r7, #12]
 80076a4:	1c18      	adds	r0, r3, #0
 80076a6:	f7f9 f889 	bl	80007bc <__aeabi_fadd>
 80076aa:	1c03      	adds	r3, r0, #0
 80076ac:	1c19      	adds	r1, r3, #0
 80076ae:	1c20      	adds	r0, r4, #0
 80076b0:	f7f9 fa0e 	bl	8000ad0 <__aeabi_fdiv>
 80076b4:	1c03      	adds	r3, r0, #0
 80076b6:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 80076b8:	68b9      	ldr	r1, [r7, #8]
 80076ba:	20fe      	movs	r0, #254	@ 0xfe
 80076bc:	0580      	lsls	r0, r0, #22
 80076be:	f7f9 fd2b 	bl	8001118 <__aeabi_fsub>
 80076c2:	1c03      	adds	r3, r0, #0
 80076c4:	1c18      	adds	r0, r3, #0
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	22a0      	movs	r2, #160	@ 0xa0
 80076ca:	589b      	ldr	r3, [r3, r2]
 80076cc:	1c19      	adds	r1, r3, #0
 80076ce:	f7f9 fbe5 	bl	8000e9c <__aeabi_fmul>
 80076d2:	1c03      	adds	r3, r0, #0
 80076d4:	1c1c      	adds	r4, r3, #0
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	68b8      	ldr	r0, [r7, #8]
 80076da:	f7f9 fbdf 	bl	8000e9c <__aeabi_fmul>
 80076de:	1c03      	adds	r3, r0, #0
 80076e0:	1c19      	adds	r1, r3, #0
 80076e2:	1c20      	adds	r0, r4, #0
 80076e4:	f7f9 f86a 	bl	80007bc <__aeabi_fadd>
 80076e8:	1c03      	adds	r3, r0, #0
 80076ea:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	22a0      	movs	r2, #160	@ 0xa0
 80076f0:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	22a0      	movs	r2, #160	@ 0xa0
 80076f6:	589b      	ldr	r3, [r3, r2]
}
 80076f8:	1c18      	adds	r0, r3, #0
 80076fa:	46bd      	mov	sp, r7
 80076fc:	b007      	add	sp, #28
 80076fe:	bd90      	pop	{r4, r7, pc}
 8007700:	be4ccccd 	.word	0xbe4ccccd
 8007704:	43f00000 	.word	0x43f00000
 8007708:	41a00000 	.word	0x41a00000

0800770c <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800770c:	b590      	push	{r4, r7, lr}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6039      	str	r1, [r7, #0]
 8007714:	0011      	movs	r1, r2
 8007716:	1dfb      	adds	r3, r7, #7
 8007718:	1c02      	adds	r2, r0, #0
 800771a:	701a      	strb	r2, [r3, #0]
 800771c:	1dbb      	adds	r3, r7, #6
 800771e:	1c0a      	adds	r2, r1, #0
 8007720:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8007722:	4b08      	ldr	r3, [pc, #32]	@ (8007744 <ReadRegister+0x38>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d008      	beq.n	800773c <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800772a:	4b06      	ldr	r3, [pc, #24]	@ (8007744 <ReadRegister+0x38>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	1dba      	adds	r2, r7, #6
 8007730:	7814      	ldrb	r4, [r2, #0]
 8007732:	6839      	ldr	r1, [r7, #0]
 8007734:	1dfa      	adds	r2, r7, #7
 8007736:	7810      	ldrb	r0, [r2, #0]
 8007738:	0022      	movs	r2, r4
 800773a:	4798      	blx	r3
  }
}
 800773c:	46c0      	nop			@ (mov r8, r8)
 800773e:	46bd      	mov	sp, r7
 8007740:	b003      	add	sp, #12
 8007742:	bd90      	pop	{r4, r7, pc}
 8007744:	20002520 	.word	0x20002520

08007748 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8007748:	b590      	push	{r4, r7, lr}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6039      	str	r1, [r7, #0]
 8007750:	0011      	movs	r1, r2
 8007752:	1dfb      	adds	r3, r7, #7
 8007754:	1c02      	adds	r2, r0, #0
 8007756:	701a      	strb	r2, [r3, #0]
 8007758:	1dbb      	adds	r3, r7, #6
 800775a:	1c0a      	adds	r2, r1, #0
 800775c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800775e:	4b08      	ldr	r3, [pc, #32]	@ (8007780 <WriteRegister+0x38>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d008      	beq.n	8007778 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8007766:	4b06      	ldr	r3, [pc, #24]	@ (8007780 <WriteRegister+0x38>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	1dba      	adds	r2, r7, #6
 800776c:	7814      	ldrb	r4, [r2, #0]
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	1dfa      	adds	r2, r7, #7
 8007772:	7810      	ldrb	r0, [r2, #0]
 8007774:	0022      	movs	r2, r4
 8007776:	4798      	blx	r3
  }
}
 8007778:	46c0      	nop			@ (mov r8, r8)
 800777a:	46bd      	mov	sp, r7
 800777c:	b003      	add	sp, #12
 800777e:	bd90      	pop	{r4, r7, pc}
 8007780:	20002524 	.word	0x20002524

08007784 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800778e:	4b07      	ldr	r3, [pc, #28]	@ (80077ac <SGP_Init+0x28>)
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8007794:	4b06      	ldr	r3, [pc, #24]	@ (80077b0 <SGP_Init+0x2c>)
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800779a:	4b06      	ldr	r3, [pc, #24]	@ (80077b4 <SGP_Init+0x30>)
 800779c:	2100      	movs	r1, #0
 800779e:	0018      	movs	r0, r3
 80077a0:	f7ff f930 	bl	8006a04 <GasIndexAlgorithm_init>
}
 80077a4:	46c0      	nop			@ (mov r8, r8)
 80077a6:	46bd      	mov	sp, r7
 80077a8:	b002      	add	sp, #8
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	20002520 	.word	0x20002520
 80077b0:	20002524 	.word	0x20002524
 80077b4:	20002534 	.word	0x20002534

080077b8 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 80077bc:	4b13      	ldr	r3, [pc, #76]	@ (800780c <SGP_StartMeasurement+0x54>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00d      	beq.n	80077e0 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80077c4:	4b12      	ldr	r3, [pc, #72]	@ (8007810 <SGP_StartMeasurement+0x58>)
 80077c6:	2208      	movs	r2, #8
 80077c8:	0019      	movs	r1, r3
 80077ca:	2059      	movs	r0, #89	@ 0x59
 80077cc:	f7ff ffbc 	bl	8007748 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80077d0:	f001 f956 	bl	8008a80 <GetCurrentHalTicks>
 80077d4:	0003      	movs	r3, r0
 80077d6:	331e      	adds	r3, #30
 80077d8:	001a      	movs	r2, r3
 80077da:	4b0e      	ldr	r3, [pc, #56]	@ (8007814 <SGP_StartMeasurement+0x5c>)
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	e00c      	b.n	80077fa <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80077e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007818 <SGP_StartMeasurement+0x60>)
 80077e2:	2208      	movs	r2, #8
 80077e4:	0019      	movs	r1, r3
 80077e6:	2059      	movs	r0, #89	@ 0x59
 80077e8:	f7ff ffae 	bl	8007748 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 80077ec:	f001 f948 	bl	8008a80 <GetCurrentHalTicks>
 80077f0:	0003      	movs	r3, r0
 80077f2:	33aa      	adds	r3, #170	@ 0xaa
 80077f4:	001a      	movs	r2, r3
 80077f6:	4b09      	ldr	r3, [pc, #36]	@ (800781c <SGP_StartMeasurement+0x64>)
 80077f8:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 80077fa:	4b09      	ldr	r3, [pc, #36]	@ (8007820 <SGP_StartMeasurement+0x68>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8007800:	4b08      	ldr	r3, [pc, #32]	@ (8007824 <SGP_StartMeasurement+0x6c>)
 8007802:	2200      	movs	r2, #0
 8007804:	701a      	strb	r2, [r3, #0]
}
 8007806:	46c0      	nop			@ (mov r8, r8)
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	200025dc 	.word	0x200025dc
 8007810:	20000120 	.word	0x20000120
 8007814:	20000134 	.word	0x20000134
 8007818:	20000118 	.word	0x20000118
 800781c:	2000012c 	.word	0x2000012c
 8007820:	20002532 	.word	0x20002532
 8007824:	20002533 	.word	0x20002533

08007828 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
 800782c:	4b04      	ldr	r3, [pc, #16]	@ (8007840 <SGP_HeatedUp+0x18>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	0018      	movs	r0, r3
 8007832:	f001 f843 	bl	80088bc <TimestampIsReached>
 8007836:	0003      	movs	r3, r0
 8007838:	0018      	movs	r0, r3
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	46c0      	nop			@ (mov r8, r8)
 8007840:	2000012c 	.word	0x2000012c

08007844 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8007848:	4b04      	ldr	r3, [pc, #16]	@ (800785c <SGP_MeasurementReady+0x18>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	0018      	movs	r0, r3
 800784e:	f001 f835 	bl	80088bc <TimestampIsReached>
 8007852:	0003      	movs	r3, r0
}
 8007854:	0018      	movs	r0, r3
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	46c0      	nop			@ (mov r8, r8)
 800785c:	20000134 	.word	0x20000134

08007860 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8007860:	b580      	push	{r7, lr}
 8007862:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8007864:	4b04      	ldr	r3, [pc, #16]	@ (8007878 <SGP_MeasurementDone+0x18>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	0018      	movs	r0, r3
 800786a:	f001 f827 	bl	80088bc <TimestampIsReached>
 800786e:	0003      	movs	r3, r0
}
 8007870:	0018      	movs	r0, r3
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	46c0      	nop			@ (mov r8, r8)
 8007878:	20000130 	.word	0x20000130

0800787c <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800787c:	b580      	push	{r7, lr}
 800787e:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8007880:	4b04      	ldr	r3, [pc, #16]	@ (8007894 <SGP_TurnHeaterOff+0x18>)
 8007882:	2202      	movs	r2, #2
 8007884:	0019      	movs	r1, r3
 8007886:	2059      	movs	r0, #89	@ 0x59
 8007888:	f7ff ff5e 	bl	8007748 <WriteRegister>
}
 800788c:	46c0      	nop			@ (mov r8, r8)
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	46c0      	nop			@ (mov r8, r8)
 8007894:	20000110 	.word	0x20000110

08007898 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8007898:	b5b0      	push	{r4, r5, r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af02      	add	r7, sp, #8
 800789e:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 80078a0:	f7ff ffc2 	bl	8007828 <SGP_HeatedUp>
 80078a4:	1e03      	subs	r3, r0, #0
 80078a6:	d038      	beq.n	800791a <SGP_GetMeasurementValues+0x82>
 80078a8:	4bd8      	ldr	r3, [pc, #864]	@ (8007c0c <SGP_GetMeasurementValues+0x374>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	2201      	movs	r2, #1
 80078ae:	4053      	eors	r3, r2
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d031      	beq.n	800791a <SGP_GetMeasurementValues+0x82>
 80078b6:	4bd6      	ldr	r3, [pc, #856]	@ (8007c10 <SGP_GetMeasurementValues+0x378>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	2201      	movs	r2, #1
 80078bc:	4053      	eors	r3, r2
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d02a      	beq.n	800791a <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 80078c4:	4ad3      	ldr	r2, [pc, #844]	@ (8007c14 <SGP_GetMeasurementValues+0x37c>)
 80078c6:	4bd4      	ldr	r3, [pc, #848]	@ (8007c18 <SGP_GetMeasurementValues+0x380>)
 80078c8:	0019      	movs	r1, r3
 80078ca:	2003      	movs	r0, #3
 80078cc:	f001 f84c 	bl	8008968 <CreateLine>
    HeatUpIsDone = true;
 80078d0:	4bce      	ldr	r3, [pc, #824]	@ (8007c0c <SGP_GetMeasurementValues+0x374>)
 80078d2:	2201      	movs	r2, #1
 80078d4:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 80078d6:	4bd1      	ldr	r3, [pc, #836]	@ (8007c1c <SGP_GetMeasurementValues+0x384>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00d      	beq.n	80078fa <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80078de:	4bd0      	ldr	r3, [pc, #832]	@ (8007c20 <SGP_GetMeasurementValues+0x388>)
 80078e0:	2208      	movs	r2, #8
 80078e2:	0019      	movs	r1, r3
 80078e4:	2059      	movs	r0, #89	@ 0x59
 80078e6:	f7ff ff2f 	bl	8007748 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80078ea:	f001 f8c9 	bl	8008a80 <GetCurrentHalTicks>
 80078ee:	0003      	movs	r3, r0
 80078f0:	331e      	adds	r3, #30
 80078f2:	001a      	movs	r2, r3
 80078f4:	4bcb      	ldr	r3, [pc, #812]	@ (8007c24 <SGP_GetMeasurementValues+0x38c>)
 80078f6:	601a      	str	r2, [r3, #0]
 80078f8:	e00c      	b.n	8007914 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80078fa:	4bcb      	ldr	r3, [pc, #812]	@ (8007c28 <SGP_GetMeasurementValues+0x390>)
 80078fc:	2208      	movs	r2, #8
 80078fe:	0019      	movs	r1, r3
 8007900:	2059      	movs	r0, #89	@ 0x59
 8007902:	f7ff ff21 	bl	8007748 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8007906:	f001 f8bb 	bl	8008a80 <GetCurrentHalTicks>
 800790a:	0003      	movs	r3, r0
 800790c:	331e      	adds	r3, #30
 800790e:	001a      	movs	r2, r3
 8007910:	4bc4      	ldr	r3, [pc, #784]	@ (8007c24 <SGP_GetMeasurementValues+0x38c>)
 8007912:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8007914:	4bbe      	ldr	r3, [pc, #760]	@ (8007c10 <SGP_GetMeasurementValues+0x378>)
 8007916:	2201      	movs	r2, #1
 8007918:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800791a:	4bbc      	ldr	r3, [pc, #752]	@ (8007c0c <SGP_GetMeasurementValues+0x374>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d100      	bne.n	8007924 <SGP_GetMeasurementValues+0x8c>
 8007922:	e1b1      	b.n	8007c88 <SGP_GetMeasurementValues+0x3f0>
 8007924:	f7ff ff8e 	bl	8007844 <SGP_MeasurementReady>
 8007928:	1e03      	subs	r3, r0, #0
 800792a:	d100      	bne.n	800792e <SGP_GetMeasurementValues+0x96>
 800792c:	e1ac      	b.n	8007c88 <SGP_GetMeasurementValues+0x3f0>
 800792e:	4bbf      	ldr	r3, [pc, #764]	@ (8007c2c <SGP_GetMeasurementValues+0x394>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	2201      	movs	r2, #1
 8007934:	4053      	eors	r3, r2
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	d100      	bne.n	800793e <SGP_GetMeasurementValues+0xa6>
 800793c:	e1a4      	b.n	8007c88 <SGP_GetMeasurementValues+0x3f0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 800793e:	4bbc      	ldr	r3, [pc, #752]	@ (8007c30 <SGP_GetMeasurementValues+0x398>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	3301      	adds	r3, #1
 8007944:	4abb      	ldr	r2, [pc, #748]	@ (8007c34 <SGP_GetMeasurementValues+0x39c>)
 8007946:	49b4      	ldr	r1, [pc, #720]	@ (8007c18 <SGP_GetMeasurementValues+0x380>)
 8007948:	2003      	movs	r0, #3
 800794a:	f001 f80d 	bl	8008968 <CreateLine>
    MeasurementIsReady = true;
 800794e:	4bb7      	ldr	r3, [pc, #732]	@ (8007c2c <SGP_GetMeasurementValues+0x394>)
 8007950:	2201      	movs	r2, #1
 8007952:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8007954:	4bb8      	ldr	r3, [pc, #736]	@ (8007c38 <SGP_GetMeasurementValues+0x3a0>)
 8007956:	2203      	movs	r2, #3
 8007958:	0019      	movs	r1, r3
 800795a:	2059      	movs	r0, #89	@ 0x59
 800795c:	f7ff fed6 	bl	800770c <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8007960:	4bb5      	ldr	r3, [pc, #724]	@ (8007c38 <SGP_GetMeasurementValues+0x3a0>)
 8007962:	2203      	movs	r2, #3
 8007964:	2103      	movs	r1, #3
 8007966:	0018      	movs	r0, r3
 8007968:	f000 f9f4 	bl	8007d54 <CheckCRC>
 800796c:	0003      	movs	r3, r0
 800796e:	001a      	movs	r2, r3
 8007970:	2301      	movs	r3, #1
 8007972:	4053      	eors	r3, r2
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d02a      	beq.n	80079d0 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 800797a:	4ab0      	ldr	r2, [pc, #704]	@ (8007c3c <SGP_GetMeasurementValues+0x3a4>)
 800797c:	4bb0      	ldr	r3, [pc, #704]	@ (8007c40 <SGP_GetMeasurementValues+0x3a8>)
 800797e:	0019      	movs	r1, r3
 8007980:	2001      	movs	r0, #1
 8007982:	f000 fff1 	bl	8008968 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8007986:	4aaf      	ldr	r2, [pc, #700]	@ (8007c44 <SGP_GetMeasurementValues+0x3ac>)
 8007988:	4baf      	ldr	r3, [pc, #700]	@ (8007c48 <SGP_GetMeasurementValues+0x3b0>)
 800798a:	0019      	movs	r1, r3
 800798c:	2002      	movs	r0, #2
 800798e:	f000 ffeb 	bl	8008968 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8007992:	230f      	movs	r3, #15
 8007994:	18fb      	adds	r3, r7, r3
 8007996:	2200      	movs	r2, #0
 8007998:	701a      	strb	r2, [r3, #0]
 800799a:	e012      	b.n	80079c2 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800799c:	240f      	movs	r4, #15
 800799e:	193b      	adds	r3, r7, r4
 80079a0:	7818      	ldrb	r0, [r3, #0]
 80079a2:	193b      	adds	r3, r7, r4
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	4aa4      	ldr	r2, [pc, #656]	@ (8007c38 <SGP_GetMeasurementValues+0x3a0>)
 80079a8:	5cd3      	ldrb	r3, [r2, r3]
 80079aa:	4aa8      	ldr	r2, [pc, #672]	@ (8007c4c <SGP_GetMeasurementValues+0x3b4>)
 80079ac:	499a      	ldr	r1, [pc, #616]	@ (8007c18 <SGP_GetMeasurementValues+0x380>)
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	0003      	movs	r3, r0
 80079b2:	2003      	movs	r0, #3
 80079b4:	f000 ffd8 	bl	8008968 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80079b8:	193b      	adds	r3, r7, r4
 80079ba:	781a      	ldrb	r2, [r3, #0]
 80079bc:	193b      	adds	r3, r7, r4
 80079be:	3201      	adds	r2, #1
 80079c0:	701a      	strb	r2, [r3, #0]
 80079c2:	230f      	movs	r3, #15
 80079c4:	18fb      	adds	r3, r7, r3
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d9e7      	bls.n	800799c <SGP_GetMeasurementValues+0x104>
      }
      return false;
 80079cc:	2300      	movs	r3, #0
 80079ce:	e173      	b.n	8007cb8 <SGP_GetMeasurementValues+0x420>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 80079d0:	f001 f856 	bl	8008a80 <GetCurrentHalTicks>
 80079d4:	0003      	movs	r3, r0
 80079d6:	22fa      	movs	r2, #250	@ 0xfa
 80079d8:	0092      	lsls	r2, r2, #2
 80079da:	189a      	adds	r2, r3, r2
 80079dc:	4b9c      	ldr	r3, [pc, #624]	@ (8007c50 <SGP_GetMeasurementValues+0x3b8>)
 80079de:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 80079e0:	f7ff ff4c 	bl	800787c <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 80079e4:	4b92      	ldr	r3, [pc, #584]	@ (8007c30 <SGP_GetMeasurementValues+0x398>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	3301      	adds	r3, #1
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	4b90      	ldr	r3, [pc, #576]	@ (8007c30 <SGP_GetMeasurementValues+0x398>)
 80079ee:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 80079f0:	4b8f      	ldr	r3, [pc, #572]	@ (8007c30 <SGP_GetMeasurementValues+0x398>)
 80079f2:	781a      	ldrb	r2, [r3, #0]
 80079f4:	4b97      	ldr	r3, [pc, #604]	@ (8007c54 <SGP_GetMeasurementValues+0x3bc>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d200      	bcs.n	80079fe <SGP_GetMeasurementValues+0x166>
 80079fc:	e144      	b.n	8007c88 <SGP_GetMeasurementValues+0x3f0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 80079fe:	4b8e      	ldr	r3, [pc, #568]	@ (8007c38 <SGP_GetMeasurementValues+0x3a0>)
 8007a00:	785b      	ldrb	r3, [r3, #1]
 8007a02:	021b      	lsls	r3, r3, #8
 8007a04:	b21a      	sxth	r2, r3
 8007a06:	4b8c      	ldr	r3, [pc, #560]	@ (8007c38 <SGP_GetMeasurementValues+0x3a0>)
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	b21b      	sxth	r3, r3
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	b21a      	sxth	r2, r3
 8007a10:	240c      	movs	r4, #12
 8007a12:	193b      	adds	r3, r7, r4
 8007a14:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8007a16:	193b      	adds	r3, r7, r4
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	4a8f      	ldr	r2, [pc, #572]	@ (8007c58 <SGP_GetMeasurementValues+0x3c0>)
 8007a1c:	497e      	ldr	r1, [pc, #504]	@ (8007c18 <SGP_GetMeasurementValues+0x380>)
 8007a1e:	2003      	movs	r0, #3
 8007a20:	f000 ffa2 	bl	8008968 <CreateLine>
      int32_t tempVocIndex = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8007a28:	193b      	adds	r3, r7, r4
 8007a2a:	8819      	ldrh	r1, [r3, #0]
 8007a2c:	2308      	movs	r3, #8
 8007a2e:	18fa      	adds	r2, r7, r3
 8007a30:	4b8a      	ldr	r3, [pc, #552]	@ (8007c5c <SGP_GetMeasurementValues+0x3c4>)
 8007a32:	0018      	movs	r0, r3
 8007a34:	f7ff f848 	bl	8006ac8 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	4a89      	ldr	r2, [pc, #548]	@ (8007c60 <SGP_GetMeasurementValues+0x3c8>)
 8007a3c:	4976      	ldr	r1, [pc, #472]	@ (8007c18 <SGP_GetMeasurementValues+0x380>)
 8007a3e:	2003      	movs	r0, #3
 8007a40:	f000 ff92 	bl	8008968 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	dd5d      	ble.n	8007b0e <SGP_GetMeasurementValues+0x276>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b64      	cmp	r3, #100	@ 0x64
 8007a58:	dc59      	bgt.n	8007b0e <SGP_GetMeasurementValues+0x276>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	0018      	movs	r0, r3
 8007a60:	f7fb fc2c 	bl	80032bc <__aeabi_i2d>
 8007a64:	2200      	movs	r2, #0
 8007a66:	4b7f      	ldr	r3, [pc, #508]	@ (8007c64 <SGP_GetMeasurementValues+0x3cc>)
 8007a68:	f7fa f922 	bl	8001cb0 <__aeabi_ddiv>
 8007a6c:	0002      	movs	r2, r0
 8007a6e:	000b      	movs	r3, r1
 8007a70:	2000      	movs	r0, #0
 8007a72:	497d      	ldr	r1, [pc, #500]	@ (8007c68 <SGP_GetMeasurementValues+0x3d0>)
 8007a74:	f7fb f828 	bl	8002ac8 <__aeabi_dsub>
 8007a78:	0002      	movs	r2, r0
 8007a7a:	000b      	movs	r3, r1
 8007a7c:	0014      	movs	r4, r2
 8007a7e:	001d      	movs	r5, r3
 8007a80:	4b7a      	ldr	r3, [pc, #488]	@ (8007c6c <SGP_GetMeasurementValues+0x3d4>)
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	0018      	movs	r0, r3
 8007a86:	f7fb fc19 	bl	80032bc <__aeabi_i2d>
 8007a8a:	0002      	movs	r2, r0
 8007a8c:	000b      	movs	r3, r1
 8007a8e:	0020      	movs	r0, r4
 8007a90:	0029      	movs	r1, r5
 8007a92:	f7fa fd51 	bl	8002538 <__aeabi_dmul>
 8007a96:	0002      	movs	r2, r0
 8007a98:	000b      	movs	r3, r1
 8007a9a:	0010      	movs	r0, r2
 8007a9c:	0019      	movs	r1, r3
 8007a9e:	f7f8 fda3 	bl	80005e8 <__aeabi_d2uiz>
 8007aa2:	0003      	movs	r3, r0
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	4b72      	ldr	r3, [pc, #456]	@ (8007c70 <SGP_GetMeasurementValues+0x3d8>)
 8007aa8:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	0018      	movs	r0, r3
 8007ab0:	f7fb fc04 	bl	80032bc <__aeabi_i2d>
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	4b6b      	ldr	r3, [pc, #428]	@ (8007c64 <SGP_GetMeasurementValues+0x3cc>)
 8007ab8:	f7fa f8fa 	bl	8001cb0 <__aeabi_ddiv>
 8007abc:	0002      	movs	r2, r0
 8007abe:	000b      	movs	r3, r1
 8007ac0:	0014      	movs	r4, r2
 8007ac2:	001d      	movs	r5, r3
 8007ac4:	4b69      	ldr	r3, [pc, #420]	@ (8007c6c <SGP_GetMeasurementValues+0x3d4>)
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	0018      	movs	r0, r3
 8007aca:	f7fb fbf7 	bl	80032bc <__aeabi_i2d>
 8007ace:	0002      	movs	r2, r0
 8007ad0:	000b      	movs	r3, r1
 8007ad2:	0020      	movs	r0, r4
 8007ad4:	0029      	movs	r1, r5
 8007ad6:	f7fa fd2f 	bl	8002538 <__aeabi_dmul>
 8007ada:	0002      	movs	r2, r0
 8007adc:	000b      	movs	r3, r1
 8007ade:	0010      	movs	r0, r2
 8007ae0:	0019      	movs	r1, r3
 8007ae2:	f7f8 fd81 	bl	80005e8 <__aeabi_d2uiz>
 8007ae6:	0003      	movs	r3, r0
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	4b62      	ldr	r3, [pc, #392]	@ (8007c74 <SGP_GetMeasurementValues+0x3dc>)
 8007aec:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 8007aee:	4b5f      	ldr	r3, [pc, #380]	@ (8007c6c <SGP_GetMeasurementValues+0x3d4>)
 8007af0:	881a      	ldrh	r2, [r3, #0]
 8007af2:	4b61      	ldr	r3, [pc, #388]	@ (8007c78 <SGP_GetMeasurementValues+0x3e0>)
 8007af4:	801a      	strh	r2, [r3, #0]
      TIM3->CCR1 = Red;
 8007af6:	4b60      	ldr	r3, [pc, #384]	@ (8007c78 <SGP_GetMeasurementValues+0x3e0>)
 8007af8:	881a      	ldrh	r2, [r3, #0]
 8007afa:	4b60      	ldr	r3, [pc, #384]	@ (8007c7c <SGP_GetMeasurementValues+0x3e4>)
 8007afc:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3->CCR2 = Green;
 8007afe:	4b5c      	ldr	r3, [pc, #368]	@ (8007c70 <SGP_GetMeasurementValues+0x3d8>)
 8007b00:	881a      	ldrh	r2, [r3, #0]
 8007b02:	4b5e      	ldr	r3, [pc, #376]	@ (8007c7c <SGP_GetMeasurementValues+0x3e4>)
 8007b04:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3->CCR3 = Blue;
 8007b06:	4b5b      	ldr	r3, [pc, #364]	@ (8007c74 <SGP_GetMeasurementValues+0x3dc>)
 8007b08:	881a      	ldrh	r2, [r3, #0]
 8007b0a:	4b5c      	ldr	r3, [pc, #368]	@ (8007c7c <SGP_GetMeasurementValues+0x3e4>)
 8007b0c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      if(*vocIndex > 100){
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b64      	cmp	r3, #100	@ 0x64
 8007b14:	dd69      	ble.n	8007bea <SGP_GetMeasurementValues+0x352>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	f7fb fbce 	bl	80032bc <__aeabi_i2d>
 8007b20:	2200      	movs	r2, #0
 8007b22:	4b50      	ldr	r3, [pc, #320]	@ (8007c64 <SGP_GetMeasurementValues+0x3cc>)
 8007b24:	f7fa ffd0 	bl	8002ac8 <__aeabi_dsub>
 8007b28:	0002      	movs	r2, r0
 8007b2a:	000b      	movs	r3, r1
 8007b2c:	0010      	movs	r0, r2
 8007b2e:	0019      	movs	r1, r3
 8007b30:	2200      	movs	r2, #0
 8007b32:	4b53      	ldr	r3, [pc, #332]	@ (8007c80 <SGP_GetMeasurementValues+0x3e8>)
 8007b34:	f7fa f8bc 	bl	8001cb0 <__aeabi_ddiv>
 8007b38:	0002      	movs	r2, r0
 8007b3a:	000b      	movs	r3, r1
 8007b3c:	0014      	movs	r4, r2
 8007b3e:	001d      	movs	r5, r3
 8007b40:	4b4a      	ldr	r3, [pc, #296]	@ (8007c6c <SGP_GetMeasurementValues+0x3d4>)
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	0018      	movs	r0, r3
 8007b46:	f7fb fbb9 	bl	80032bc <__aeabi_i2d>
 8007b4a:	0002      	movs	r2, r0
 8007b4c:	000b      	movs	r3, r1
 8007b4e:	0020      	movs	r0, r4
 8007b50:	0029      	movs	r1, r5
 8007b52:	f7fa fcf1 	bl	8002538 <__aeabi_dmul>
 8007b56:	0002      	movs	r2, r0
 8007b58:	000b      	movs	r3, r1
 8007b5a:	0010      	movs	r0, r2
 8007b5c:	0019      	movs	r1, r3
 8007b5e:	f7f8 fd43 	bl	80005e8 <__aeabi_d2uiz>
 8007b62:	0003      	movs	r3, r0
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	4b42      	ldr	r3, [pc, #264]	@ (8007c70 <SGP_GetMeasurementValues+0x3d8>)
 8007b68:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	0018      	movs	r0, r3
 8007b70:	f7fb fba4 	bl	80032bc <__aeabi_i2d>
 8007b74:	2200      	movs	r2, #0
 8007b76:	4b3b      	ldr	r3, [pc, #236]	@ (8007c64 <SGP_GetMeasurementValues+0x3cc>)
 8007b78:	f7fa ffa6 	bl	8002ac8 <__aeabi_dsub>
 8007b7c:	0002      	movs	r2, r0
 8007b7e:	000b      	movs	r3, r1
 8007b80:	0010      	movs	r0, r2
 8007b82:	0019      	movs	r1, r3
 8007b84:	2200      	movs	r2, #0
 8007b86:	4b3e      	ldr	r3, [pc, #248]	@ (8007c80 <SGP_GetMeasurementValues+0x3e8>)
 8007b88:	f7fa f892 	bl	8001cb0 <__aeabi_ddiv>
 8007b8c:	0002      	movs	r2, r0
 8007b8e:	000b      	movs	r3, r1
 8007b90:	2000      	movs	r0, #0
 8007b92:	4935      	ldr	r1, [pc, #212]	@ (8007c68 <SGP_GetMeasurementValues+0x3d0>)
 8007b94:	f7fa ff98 	bl	8002ac8 <__aeabi_dsub>
 8007b98:	0002      	movs	r2, r0
 8007b9a:	000b      	movs	r3, r1
 8007b9c:	0014      	movs	r4, r2
 8007b9e:	001d      	movs	r5, r3
 8007ba0:	4b32      	ldr	r3, [pc, #200]	@ (8007c6c <SGP_GetMeasurementValues+0x3d4>)
 8007ba2:	881b      	ldrh	r3, [r3, #0]
 8007ba4:	0018      	movs	r0, r3
 8007ba6:	f7fb fb89 	bl	80032bc <__aeabi_i2d>
 8007baa:	0002      	movs	r2, r0
 8007bac:	000b      	movs	r3, r1
 8007bae:	0020      	movs	r0, r4
 8007bb0:	0029      	movs	r1, r5
 8007bb2:	f7fa fcc1 	bl	8002538 <__aeabi_dmul>
 8007bb6:	0002      	movs	r2, r0
 8007bb8:	000b      	movs	r3, r1
 8007bba:	0010      	movs	r0, r2
 8007bbc:	0019      	movs	r1, r3
 8007bbe:	f7f8 fd13 	bl	80005e8 <__aeabi_d2uiz>
 8007bc2:	0003      	movs	r3, r0
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	4b2c      	ldr	r3, [pc, #176]	@ (8007c78 <SGP_GetMeasurementValues+0x3e0>)
 8007bc8:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 8007bca:	4b28      	ldr	r3, [pc, #160]	@ (8007c6c <SGP_GetMeasurementValues+0x3d4>)
 8007bcc:	881a      	ldrh	r2, [r3, #0]
 8007bce:	4b29      	ldr	r3, [pc, #164]	@ (8007c74 <SGP_GetMeasurementValues+0x3dc>)
 8007bd0:	801a      	strh	r2, [r3, #0]
        TIM3->CCR1 = Red;
 8007bd2:	4b29      	ldr	r3, [pc, #164]	@ (8007c78 <SGP_GetMeasurementValues+0x3e0>)
 8007bd4:	881a      	ldrh	r2, [r3, #0]
 8007bd6:	4b29      	ldr	r3, [pc, #164]	@ (8007c7c <SGP_GetMeasurementValues+0x3e4>)
 8007bd8:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR2 = Green;
 8007bda:	4b25      	ldr	r3, [pc, #148]	@ (8007c70 <SGP_GetMeasurementValues+0x3d8>)
 8007bdc:	881a      	ldrh	r2, [r3, #0]
 8007bde:	4b27      	ldr	r3, [pc, #156]	@ (8007c7c <SGP_GetMeasurementValues+0x3e4>)
 8007be0:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR3 = Blue;
 8007be2:	4b24      	ldr	r3, [pc, #144]	@ (8007c74 <SGP_GetMeasurementValues+0x3dc>)
 8007be4:	881a      	ldrh	r2, [r3, #0]
 8007be6:	4b25      	ldr	r3, [pc, #148]	@ (8007c7c <SGP_GetMeasurementValues+0x3e4>)
 8007be8:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      SGP_AmountOfSamplesDone = 0;
 8007bea:	4b11      	ldr	r3, [pc, #68]	@ (8007c30 <SGP_GetMeasurementValues+0x398>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8007bf0:	4a24      	ldr	r2, [pc, #144]	@ (8007c84 <SGP_GetMeasurementValues+0x3ec>)
 8007bf2:	4b09      	ldr	r3, [pc, #36]	@ (8007c18 <SGP_GetMeasurementValues+0x380>)
 8007bf4:	0019      	movs	r1, r3
 8007bf6:	2003      	movs	r0, #3
 8007bf8:	f000 feb6 	bl	8008968 <CreateLine>
      HT_MeasurementReceived = false;
 8007bfc:	4b07      	ldr	r3, [pc, #28]	@ (8007c1c <SGP_GetMeasurementValues+0x384>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8007c02:	4b03      	ldr	r3, [pc, #12]	@ (8007c10 <SGP_GetMeasurementValues+0x378>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e055      	b.n	8007cb8 <SGP_GetMeasurementValues+0x420>
 8007c0c:	20002532 	.word	0x20002532
 8007c10:	200025dd 	.word	0x200025dd
 8007c14:	08019d04 	.word	0x08019d04
 8007c18:	08019d30 	.word	0x08019d30
 8007c1c:	200025dc 	.word	0x200025dc
 8007c20:	20000120 	.word	0x20000120
 8007c24:	20000134 	.word	0x20000134
 8007c28:	20000118 	.word	0x20000118
 8007c2c:	20002533 	.word	0x20002533
 8007c30:	20002531 	.word	0x20002531
 8007c34:	08019d34 	.word	0x08019d34
 8007c38:	20002528 	.word	0x20002528
 8007c3c:	08019d64 	.word	0x08019d64
 8007c40:	08019d88 	.word	0x08019d88
 8007c44:	08019d8c 	.word	0x08019d8c
 8007c48:	08019dac 	.word	0x08019dac
 8007c4c:	08019db0 	.word	0x08019db0
 8007c50:	20000130 	.word	0x20000130
 8007c54:	20000128 	.word	0x20000128
 8007c58:	08019dd0 	.word	0x08019dd0
 8007c5c:	20002534 	.word	0x20002534
 8007c60:	08019de4 	.word	0x08019de4
 8007c64:	40590000 	.word	0x40590000
 8007c68:	3ff00000 	.word	0x3ff00000
 8007c6c:	20000138 	.word	0x20000138
 8007c70:	200025e2 	.word	0x200025e2
 8007c74:	200025e0 	.word	0x200025e0
 8007c78:	200025de 	.word	0x200025de
 8007c7c:	40000400 	.word	0x40000400
 8007c80:	40790000 	.word	0x40790000
 8007c84:	08019df8 	.word	0x08019df8
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8007c88:	f7ff fdea 	bl	8007860 <SGP_MeasurementDone>
 8007c8c:	1e03      	subs	r3, r0, #0
 8007c8e:	d012      	beq.n	8007cb6 <SGP_GetMeasurementValues+0x41e>
 8007c90:	4b0b      	ldr	r3, [pc, #44]	@ (8007cc0 <SGP_GetMeasurementValues+0x428>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00e      	beq.n	8007cb6 <SGP_GetMeasurementValues+0x41e>
 8007c98:	4b0a      	ldr	r3, [pc, #40]	@ (8007cc4 <SGP_GetMeasurementValues+0x42c>)
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <SGP_GetMeasurementValues+0x41e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8007ca0:	4a09      	ldr	r2, [pc, #36]	@ (8007cc8 <SGP_GetMeasurementValues+0x430>)
 8007ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8007ccc <SGP_GetMeasurementValues+0x434>)
 8007ca4:	0019      	movs	r1, r3
 8007ca6:	2003      	movs	r0, #3
 8007ca8:	f000 fe5e 	bl	8008968 <CreateLine>
    SGP_StartMeasurement();
 8007cac:	f7ff fd84 	bl	80077b8 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8007cb0:	4b07      	ldr	r3, [pc, #28]	@ (8007cd0 <SGP_GetMeasurementValues+0x438>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	0018      	movs	r0, r3
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	b004      	add	sp, #16
 8007cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8007cc0:	20002532 	.word	0x20002532
 8007cc4:	20002533 	.word	0x20002533
 8007cc8:	08019e1c 	.word	0x08019e1c
 8007ccc:	08019d30 	.word	0x08019d30
 8007cd0:	200025dd 	.word	0x200025dd

08007cd4 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8007cda:	4b1a      	ldr	r3, [pc, #104]	@ (8007d44 <SGP_DeviceConnected+0x70>)
 8007cdc:	2202      	movs	r2, #2
 8007cde:	0019      	movs	r1, r3
 8007ce0:	2059      	movs	r0, #89	@ 0x59
 8007ce2:	f7ff fd31 	bl	8007748 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8007ce6:	2001      	movs	r0, #1
 8007ce8:	f001 fa40 	bl	800916c <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8007cec:	4b16      	ldr	r3, [pc, #88]	@ (8007d48 <SGP_DeviceConnected+0x74>)
 8007cee:	2209      	movs	r2, #9
 8007cf0:	0019      	movs	r1, r3
 8007cf2:	2059      	movs	r0, #89	@ 0x59
 8007cf4:	f7ff fd0a 	bl	800770c <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8007cf8:	1dfb      	adds	r3, r7, #7
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	701a      	strb	r2, [r3, #0]
 8007cfe:	e011      	b.n	8007d24 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8007d00:	1dfb      	adds	r3, r7, #7
 8007d02:	7818      	ldrb	r0, [r3, #0]
 8007d04:	1dfb      	adds	r3, r7, #7
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	4a0f      	ldr	r2, [pc, #60]	@ (8007d48 <SGP_DeviceConnected+0x74>)
 8007d0a:	5cd3      	ldrb	r3, [r2, r3]
 8007d0c:	4a0f      	ldr	r2, [pc, #60]	@ (8007d4c <SGP_DeviceConnected+0x78>)
 8007d0e:	4910      	ldr	r1, [pc, #64]	@ (8007d50 <SGP_DeviceConnected+0x7c>)
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	0003      	movs	r3, r0
 8007d14:	2002      	movs	r0, #2
 8007d16:	f000 fe27 	bl	8008968 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8007d1a:	1dfb      	adds	r3, r7, #7
 8007d1c:	781a      	ldrb	r2, [r3, #0]
 8007d1e:	1dfb      	adds	r3, r7, #7
 8007d20:	3201      	adds	r2, #1
 8007d22:	701a      	strb	r2, [r3, #0]
 8007d24:	1dfb      	adds	r3, r7, #7
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	2b08      	cmp	r3, #8
 8007d2a:	d9e9      	bls.n	8007d00 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8007d2c:	4b06      	ldr	r3, [pc, #24]	@ (8007d48 <SGP_DeviceConnected+0x74>)
 8007d2e:	2203      	movs	r2, #3
 8007d30:	2109      	movs	r1, #9
 8007d32:	0018      	movs	r0, r3
 8007d34:	f000 f80e 	bl	8007d54 <CheckCRC>
 8007d38:	0003      	movs	r3, r0
}
 8007d3a:	0018      	movs	r0, r3
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	b002      	add	sp, #8
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	46c0      	nop			@ (mov r8, r8)
 8007d44:	20000114 	.word	0x20000114
 8007d48:	20002528 	.word	0x20002528
 8007d4c:	08019e3c 	.word	0x08019e3c
 8007d50:	08019dac 	.word	0x08019dac

08007d54 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8007d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d56:	b08f      	sub	sp, #60	@ 0x3c
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6278      	str	r0, [r7, #36]	@ 0x24
 8007d5c:	0008      	movs	r0, r1
 8007d5e:	0011      	movs	r1, r2
 8007d60:	2323      	movs	r3, #35	@ 0x23
 8007d62:	18fb      	adds	r3, r7, r3
 8007d64:	1c02      	adds	r2, r0, #0
 8007d66:	701a      	strb	r2, [r3, #0]
 8007d68:	2322      	movs	r3, #34	@ 0x22
 8007d6a:	18fb      	adds	r3, r7, r3
 8007d6c:	1c0a      	adds	r2, r1, #0
 8007d6e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8007d70:	2317      	movs	r3, #23
 8007d72:	2220      	movs	r2, #32
 8007d74:	189b      	adds	r3, r3, r2
 8007d76:	19db      	adds	r3, r3, r7
 8007d78:	2200      	movs	r2, #0
 8007d7a:	701a      	strb	r2, [r3, #0]
 8007d7c:	e09f      	b.n	8007ebe <CheckCRC+0x16a>
 8007d7e:	466b      	mov	r3, sp
 8007d80:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8007d82:	2322      	movs	r3, #34	@ 0x22
 8007d84:	18fb      	adds	r3, r7, r3
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	001a      	movs	r2, r3
 8007d8a:	3a01      	subs	r2, #1
 8007d8c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d8e:	60bb      	str	r3, [r7, #8]
 8007d90:	2200      	movs	r2, #0
 8007d92:	60fa      	str	r2, [r7, #12]
 8007d94:	68b8      	ldr	r0, [r7, #8]
 8007d96:	68f9      	ldr	r1, [r7, #12]
 8007d98:	0002      	movs	r2, r0
 8007d9a:	0f52      	lsrs	r2, r2, #29
 8007d9c:	000c      	movs	r4, r1
 8007d9e:	00e4      	lsls	r4, r4, #3
 8007da0:	61fc      	str	r4, [r7, #28]
 8007da2:	69fc      	ldr	r4, [r7, #28]
 8007da4:	4314      	orrs	r4, r2
 8007da6:	61fc      	str	r4, [r7, #28]
 8007da8:	0002      	movs	r2, r0
 8007daa:	00d2      	lsls	r2, r2, #3
 8007dac:	61ba      	str	r2, [r7, #24]
 8007dae:	603b      	str	r3, [r7, #0]
 8007db0:	2200      	movs	r2, #0
 8007db2:	607a      	str	r2, [r7, #4]
 8007db4:	6838      	ldr	r0, [r7, #0]
 8007db6:	6879      	ldr	r1, [r7, #4]
 8007db8:	0002      	movs	r2, r0
 8007dba:	0f52      	lsrs	r2, r2, #29
 8007dbc:	000c      	movs	r4, r1
 8007dbe:	00e4      	lsls	r4, r4, #3
 8007dc0:	617c      	str	r4, [r7, #20]
 8007dc2:	697c      	ldr	r4, [r7, #20]
 8007dc4:	4314      	orrs	r4, r2
 8007dc6:	617c      	str	r4, [r7, #20]
 8007dc8:	0002      	movs	r2, r0
 8007dca:	00d2      	lsls	r2, r2, #3
 8007dcc:	613a      	str	r2, [r7, #16]
 8007dce:	3307      	adds	r3, #7
 8007dd0:	08db      	lsrs	r3, r3, #3
 8007dd2:	00db      	lsls	r3, r3, #3
 8007dd4:	466a      	mov	r2, sp
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	469d      	mov	sp, r3
 8007dda:	466b      	mov	r3, sp
 8007ddc:	3300      	adds	r3, #0
 8007dde:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8007de0:	2316      	movs	r3, #22
 8007de2:	2220      	movs	r2, #32
 8007de4:	189b      	adds	r3, r3, r2
 8007de6:	19db      	adds	r3, r3, r7
 8007de8:	2200      	movs	r2, #0
 8007dea:	701a      	strb	r2, [r3, #0]
 8007dec:	e01e      	b.n	8007e2c <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8007dee:	2317      	movs	r3, #23
 8007df0:	2220      	movs	r2, #32
 8007df2:	189b      	adds	r3, r3, r2
 8007df4:	19db      	adds	r3, r3, r7
 8007df6:	781a      	ldrb	r2, [r3, #0]
 8007df8:	2116      	movs	r1, #22
 8007dfa:	2320      	movs	r3, #32
 8007dfc:	18cb      	adds	r3, r1, r3
 8007dfe:	19db      	adds	r3, r3, r7
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	18d3      	adds	r3, r2, r3
 8007e04:	001a      	movs	r2, r3
 8007e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e08:	189a      	adds	r2, r3, r2
 8007e0a:	0008      	movs	r0, r1
 8007e0c:	2320      	movs	r3, #32
 8007e0e:	18cb      	adds	r3, r1, r3
 8007e10:	19db      	adds	r3, r3, r7
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	7811      	ldrb	r1, [r2, #0]
 8007e16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e18:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8007e1a:	2320      	movs	r3, #32
 8007e1c:	18c3      	adds	r3, r0, r3
 8007e1e:	19db      	adds	r3, r3, r7
 8007e20:	781a      	ldrb	r2, [r3, #0]
 8007e22:	2320      	movs	r3, #32
 8007e24:	18c3      	adds	r3, r0, r3
 8007e26:	19db      	adds	r3, r3, r7
 8007e28:	3201      	adds	r2, #1
 8007e2a:	701a      	strb	r2, [r3, #0]
 8007e2c:	2316      	movs	r3, #22
 8007e2e:	2220      	movs	r2, #32
 8007e30:	189b      	adds	r3, r3, r2
 8007e32:	19da      	adds	r2, r3, r7
 8007e34:	2322      	movs	r3, #34	@ 0x22
 8007e36:	18fb      	adds	r3, r7, r3
 8007e38:	7812      	ldrb	r2, [r2, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d3d6      	bcc.n	8007dee <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8007e40:	2417      	movs	r4, #23
 8007e42:	2320      	movs	r3, #32
 8007e44:	18e3      	adds	r3, r4, r3
 8007e46:	19db      	adds	r3, r3, r7
 8007e48:	781a      	ldrb	r2, [r3, #0]
 8007e4a:	2322      	movs	r3, #34	@ 0x22
 8007e4c:	18fb      	adds	r3, r7, r3
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	18d3      	adds	r3, r2, r3
 8007e52:	3b01      	subs	r3, #1
 8007e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e56:	18d2      	adds	r2, r2, r3
 8007e58:	250b      	movs	r5, #11
 8007e5a:	2320      	movs	r3, #32
 8007e5c:	18eb      	adds	r3, r5, r3
 8007e5e:	19db      	adds	r3, r3, r7
 8007e60:	7812      	ldrb	r2, [r2, #0]
 8007e62:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8007e64:	2322      	movs	r3, #34	@ 0x22
 8007e66:	18fb      	adds	r3, r7, r3
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e70:	0011      	movs	r1, r2
 8007e72:	0018      	movs	r0, r3
 8007e74:	f000 f838 	bl	8007ee8 <CalculateCRC>
 8007e78:	0003      	movs	r3, r0
 8007e7a:	001a      	movs	r2, r3
 8007e7c:	2320      	movs	r3, #32
 8007e7e:	18eb      	adds	r3, r5, r3
 8007e80:	19db      	adds	r3, r3, r7
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d00c      	beq.n	8007ea2 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8007e88:	2320      	movs	r3, #32
 8007e8a:	18e3      	adds	r3, r4, r3
 8007e8c:	19db      	adds	r3, r3, r7
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	3301      	adds	r3, #1
 8007e92:	4a13      	ldr	r2, [pc, #76]	@ (8007ee0 <CheckCRC+0x18c>)
 8007e94:	4913      	ldr	r1, [pc, #76]	@ (8007ee4 <CheckCRC+0x190>)
 8007e96:	2001      	movs	r0, #1
 8007e98:	f000 fd66 	bl	8008968 <CreateLine>
      return false;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	46b5      	mov	sp, r6
 8007ea0:	e019      	b.n	8007ed6 <CheckCRC+0x182>
 8007ea2:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8007ea4:	2217      	movs	r2, #23
 8007ea6:	2320      	movs	r3, #32
 8007ea8:	18d3      	adds	r3, r2, r3
 8007eaa:	19db      	adds	r3, r3, r7
 8007eac:	2120      	movs	r1, #32
 8007eae:	1852      	adds	r2, r2, r1
 8007eb0:	19d1      	adds	r1, r2, r7
 8007eb2:	2222      	movs	r2, #34	@ 0x22
 8007eb4:	18ba      	adds	r2, r7, r2
 8007eb6:	7809      	ldrb	r1, [r1, #0]
 8007eb8:	7812      	ldrb	r2, [r2, #0]
 8007eba:	188a      	adds	r2, r1, r2
 8007ebc:	701a      	strb	r2, [r3, #0]
 8007ebe:	2317      	movs	r3, #23
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	189b      	adds	r3, r3, r2
 8007ec4:	19da      	adds	r2, r3, r7
 8007ec6:	2323      	movs	r3, #35	@ 0x23
 8007ec8:	18fb      	adds	r3, r7, r3
 8007eca:	7812      	ldrb	r2, [r2, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d200      	bcs.n	8007ed4 <CheckCRC+0x180>
 8007ed2:	e754      	b.n	8007d7e <CheckCRC+0x2a>
    }
  }
  return true;
 8007ed4:	2301      	movs	r3, #1
}
 8007ed6:	0018      	movs	r0, r3
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	b00f      	add	sp, #60	@ 0x3c
 8007edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ede:	46c0      	nop			@ (mov r8, r8)
 8007ee0:	08019e5c 	.word	0x08019e5c
 8007ee4:	08019d88 	.word	0x08019d88

08007ee8 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	000a      	movs	r2, r1
 8007ef2:	1cfb      	adds	r3, r7, #3
 8007ef4:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8007ef6:	230f      	movs	r3, #15
 8007ef8:	18fb      	adds	r3, r7, r3
 8007efa:	22ff      	movs	r2, #255	@ 0xff
 8007efc:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8007efe:	230e      	movs	r3, #14
 8007f00:	18fb      	adds	r3, r7, r3
 8007f02:	2200      	movs	r2, #0
 8007f04:	701a      	strb	r2, [r3, #0]
 8007f06:	e037      	b.n	8007f78 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8007f08:	230e      	movs	r3, #14
 8007f0a:	18fb      	adds	r3, r7, r3
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	18d3      	adds	r3, r2, r3
 8007f12:	7819      	ldrb	r1, [r3, #0]
 8007f14:	220f      	movs	r2, #15
 8007f16:	18bb      	adds	r3, r7, r2
 8007f18:	18ba      	adds	r2, r7, r2
 8007f1a:	7812      	ldrb	r2, [r2, #0]
 8007f1c:	404a      	eors	r2, r1
 8007f1e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8007f20:	230d      	movs	r3, #13
 8007f22:	18fb      	adds	r3, r7, r3
 8007f24:	2200      	movs	r2, #0
 8007f26:	701a      	strb	r2, [r3, #0]
 8007f28:	e01b      	b.n	8007f62 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8007f2a:	210f      	movs	r1, #15
 8007f2c:	187b      	adds	r3, r7, r1
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	b25b      	sxtb	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	da09      	bge.n	8007f4a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8007f36:	187b      	adds	r3, r7, r1
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	005b      	lsls	r3, r3, #1
 8007f3c:	b25b      	sxtb	r3, r3
 8007f3e:	2231      	movs	r2, #49	@ 0x31
 8007f40:	4053      	eors	r3, r2
 8007f42:	b25a      	sxtb	r2, r3
 8007f44:	187b      	adds	r3, r7, r1
 8007f46:	701a      	strb	r2, [r3, #0]
 8007f48:	e005      	b.n	8007f56 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8007f4a:	230f      	movs	r3, #15
 8007f4c:	18fa      	adds	r2, r7, r3
 8007f4e:	18fb      	adds	r3, r7, r3
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	18db      	adds	r3, r3, r3
 8007f54:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8007f56:	210d      	movs	r1, #13
 8007f58:	187b      	adds	r3, r7, r1
 8007f5a:	781a      	ldrb	r2, [r3, #0]
 8007f5c:	187b      	adds	r3, r7, r1
 8007f5e:	3201      	adds	r2, #1
 8007f60:	701a      	strb	r2, [r3, #0]
 8007f62:	230d      	movs	r3, #13
 8007f64:	18fb      	adds	r3, r7, r3
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	2b07      	cmp	r3, #7
 8007f6a:	d9de      	bls.n	8007f2a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8007f6c:	210e      	movs	r1, #14
 8007f6e:	187b      	adds	r3, r7, r1
 8007f70:	781a      	ldrb	r2, [r3, #0]
 8007f72:	187b      	adds	r3, r7, r1
 8007f74:	3201      	adds	r2, #1
 8007f76:	701a      	strb	r2, [r3, #0]
 8007f78:	230e      	movs	r3, #14
 8007f7a:	18fa      	adds	r2, r7, r3
 8007f7c:	1cfb      	adds	r3, r7, #3
 8007f7e:	7812      	ldrb	r2, [r2, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d3c0      	bcc.n	8007f08 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8007f86:	230f      	movs	r3, #15
 8007f88:	18fb      	adds	r3, r7, r3
 8007f8a:	781b      	ldrb	r3, [r3, #0]
}
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	b004      	add	sp, #16
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4936      	ldr	r1, [pc, #216]	@ (800807c <SGP_GetHT+0xe8>)
 8007fa4:	1c18      	adds	r0, r3, #0
 8007fa6:	f7f8 fc09 	bl	80007bc <__aeabi_fadd>
 8007faa:	1c03      	adds	r3, r0, #0
 8007fac:	4934      	ldr	r1, [pc, #208]	@ (8008080 <SGP_GetHT+0xec>)
 8007fae:	1c18      	adds	r0, r3, #0
 8007fb0:	f7f8 fd8e 	bl	8000ad0 <__aeabi_fdiv>
 8007fb4:	1c03      	adds	r3, r0, #0
 8007fb6:	4933      	ldr	r1, [pc, #204]	@ (8008084 <SGP_GetHT+0xf0>)
 8007fb8:	1c18      	adds	r0, r3, #0
 8007fba:	f7f8 ff6f 	bl	8000e9c <__aeabi_fmul>
 8007fbe:	1c03      	adds	r3, r0, #0
 8007fc0:	1c18      	adds	r0, r3, #0
 8007fc2:	f7f8 faf9 	bl	80005b8 <__aeabi_f2uiz>
 8007fc6:	0003      	movs	r3, r0
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	4b2f      	ldr	r3, [pc, #188]	@ (8008088 <SGP_GetHT+0xf4>)
 8007fcc:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	492e      	ldr	r1, [pc, #184]	@ (800808c <SGP_GetHT+0xf8>)
 8007fd4:	1c18      	adds	r0, r3, #0
 8007fd6:	f7f8 fd7b 	bl	8000ad0 <__aeabi_fdiv>
 8007fda:	1c03      	adds	r3, r0, #0
 8007fdc:	4929      	ldr	r1, [pc, #164]	@ (8008084 <SGP_GetHT+0xf0>)
 8007fde:	1c18      	adds	r0, r3, #0
 8007fe0:	f7f8 ff5c 	bl	8000e9c <__aeabi_fmul>
 8007fe4:	1c03      	adds	r3, r0, #0
 8007fe6:	1c18      	adds	r0, r3, #0
 8007fe8:	f7f8 fae6 	bl	80005b8 <__aeabi_f2uiz>
 8007fec:	0003      	movs	r3, r0
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	4b27      	ldr	r3, [pc, #156]	@ (8008090 <SGP_GetHT+0xfc>)
 8007ff2:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8007ff4:	4b26      	ldr	r3, [pc, #152]	@ (8008090 <SGP_GetHT+0xfc>)
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	0a1b      	lsrs	r3, r3, #8
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	4b25      	ldr	r3, [pc, #148]	@ (8008094 <SGP_GetHT+0x100>)
 8008000:	709a      	strb	r2, [r3, #2]
 8008002:	4b24      	ldr	r3, [pc, #144]	@ (8008094 <SGP_GetHT+0x100>)
 8008004:	789a      	ldrb	r2, [r3, #2]
 8008006:	210c      	movs	r1, #12
 8008008:	187b      	adds	r3, r7, r1
 800800a:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800800c:	4b20      	ldr	r3, [pc, #128]	@ (8008090 <SGP_GetHT+0xfc>)
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	b2da      	uxtb	r2, r3
 8008012:	4b20      	ldr	r3, [pc, #128]	@ (8008094 <SGP_GetHT+0x100>)
 8008014:	70da      	strb	r2, [r3, #3]
 8008016:	4b1f      	ldr	r3, [pc, #124]	@ (8008094 <SGP_GetHT+0x100>)
 8008018:	78da      	ldrb	r2, [r3, #3]
 800801a:	187b      	adds	r3, r7, r1
 800801c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800801e:	187b      	adds	r3, r7, r1
 8008020:	2102      	movs	r1, #2
 8008022:	0018      	movs	r0, r3
 8008024:	f7ff ff60 	bl	8007ee8 <CalculateCRC>
 8008028:	0003      	movs	r3, r0
 800802a:	001a      	movs	r2, r3
 800802c:	4b19      	ldr	r3, [pc, #100]	@ (8008094 <SGP_GetHT+0x100>)
 800802e:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8008030:	4b15      	ldr	r3, [pc, #84]	@ (8008088 <SGP_GetHT+0xf4>)
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	0a1b      	lsrs	r3, r3, #8
 8008036:	b29b      	uxth	r3, r3
 8008038:	b2da      	uxtb	r2, r3
 800803a:	4b16      	ldr	r3, [pc, #88]	@ (8008094 <SGP_GetHT+0x100>)
 800803c:	715a      	strb	r2, [r3, #5]
 800803e:	4b15      	ldr	r3, [pc, #84]	@ (8008094 <SGP_GetHT+0x100>)
 8008040:	795a      	ldrb	r2, [r3, #5]
 8008042:	2108      	movs	r1, #8
 8008044:	187b      	adds	r3, r7, r1
 8008046:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8008048:	4b0f      	ldr	r3, [pc, #60]	@ (8008088 <SGP_GetHT+0xf4>)
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	b2da      	uxtb	r2, r3
 800804e:	4b11      	ldr	r3, [pc, #68]	@ (8008094 <SGP_GetHT+0x100>)
 8008050:	719a      	strb	r2, [r3, #6]
 8008052:	4b10      	ldr	r3, [pc, #64]	@ (8008094 <SGP_GetHT+0x100>)
 8008054:	799a      	ldrb	r2, [r3, #6]
 8008056:	187b      	adds	r3, r7, r1
 8008058:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800805a:	187b      	adds	r3, r7, r1
 800805c:	2102      	movs	r1, #2
 800805e:	0018      	movs	r0, r3
 8008060:	f7ff ff42 	bl	8007ee8 <CalculateCRC>
 8008064:	0003      	movs	r3, r0
 8008066:	001a      	movs	r2, r3
 8008068:	4b0a      	ldr	r3, [pc, #40]	@ (8008094 <SGP_GetHT+0x100>)
 800806a:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800806c:	4b0a      	ldr	r3, [pc, #40]	@ (8008098 <SGP_GetHT+0x104>)
 800806e:	2201      	movs	r2, #1
 8008070:	701a      	strb	r2, [r3, #0]
}
 8008072:	46c0      	nop			@ (mov r8, r8)
 8008074:	46bd      	mov	sp, r7
 8008076:	b004      	add	sp, #16
 8008078:	bd80      	pop	{r7, pc}
 800807a:	46c0      	nop			@ (mov r8, r8)
 800807c:	42340000 	.word	0x42340000
 8008080:	432f0000 	.word	0x432f0000
 8008084:	477fff00 	.word	0x477fff00
 8008088:	200025da 	.word	0x200025da
 800808c:	42c80000 	.word	0x42c80000
 8008090:	200025d8 	.word	0x200025d8
 8008094:	20000120 	.word	0x20000120
 8008098:	200025dc 	.word	0x200025dc

0800809c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080a0:	4b07      	ldr	r3, [pc, #28]	@ (80080c0 <HAL_MspInit+0x24>)
 80080a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080a4:	4b06      	ldr	r3, [pc, #24]	@ (80080c0 <HAL_MspInit+0x24>)
 80080a6:	2101      	movs	r1, #1
 80080a8:	430a      	orrs	r2, r1
 80080aa:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80080ac:	4b04      	ldr	r3, [pc, #16]	@ (80080c0 <HAL_MspInit+0x24>)
 80080ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080b0:	4b03      	ldr	r3, [pc, #12]	@ (80080c0 <HAL_MspInit+0x24>)
 80080b2:	2180      	movs	r1, #128	@ 0x80
 80080b4:	0549      	lsls	r1, r1, #21
 80080b6:	430a      	orrs	r2, r1
 80080b8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80080ba:	46c0      	nop			@ (mov r8, r8)
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	40021000 	.word	0x40021000

080080c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80080c8:	46c0      	nop			@ (mov r8, r8)
 80080ca:	e7fd      	b.n	80080c8 <NMI_Handler+0x4>

080080cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80080d0:	46c0      	nop			@ (mov r8, r8)
 80080d2:	e7fd      	b.n	80080d0 <HardFault_Handler+0x4>

080080d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80080d8:	46c0      	nop			@ (mov r8, r8)
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80080e2:	46c0      	nop			@ (mov r8, r8)
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80080ec:	f001 f822 	bl	8009134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80080f0:	46c0      	nop			@ (mov r8, r8)
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
	...

080080f8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80080fc:	4b05      	ldr	r3, [pc, #20]	@ (8008114 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80080fe:	0018      	movs	r0, r3
 8008100:	f001 fe77 	bl	8009df2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8008104:	4b04      	ldr	r3, [pc, #16]	@ (8008118 <DMA1_Channel2_3_IRQHandler+0x20>)
 8008106:	0018      	movs	r0, r3
 8008108:	f001 fe73 	bl	8009df2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800810c:	46c0      	nop			@ (mov r8, r8)
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	46c0      	nop			@ (mov r8, r8)
 8008114:	20000be0 	.word	0x20000be0
 8008118:	20000b98 	.word	0x20000b98

0800811c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8008120:	4b07      	ldr	r3, [pc, #28]	@ (8008140 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8008122:	0018      	movs	r0, r3
 8008124:	f001 fe65 	bl	8009df2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8008128:	4b06      	ldr	r3, [pc, #24]	@ (8008144 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800812a:	0018      	movs	r0, r3
 800812c:	f001 fe61 	bl	8009df2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8008130:	4b05      	ldr	r3, [pc, #20]	@ (8008148 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8008132:	0018      	movs	r0, r3
 8008134:	f001 fe5d 	bl	8009df2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8008138:	46c0      	nop			@ (mov r8, r8)
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	46c0      	nop			@ (mov r8, r8)
 8008140:	20000c64 	.word	0x20000c64
 8008144:	200027d8 	.word	0x200027d8
 8008148:	20002820 	.word	0x20002820

0800814c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8008150:	4b03      	ldr	r3, [pc, #12]	@ (8008160 <USART4_5_IRQHandler+0x14>)
 8008152:	0018      	movs	r0, r3
 8008154:	f008 f846 	bl	80101e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8008158:	46c0      	nop			@ (mov r8, r8)
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	46c0      	nop			@ (mov r8, r8)
 8008160:	20002720 	.word	0x20002720

08008164 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8008168:	4b09      	ldr	r3, [pc, #36]	@ (8008190 <I2C1_IRQHandler+0x2c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	699a      	ldr	r2, [r3, #24]
 800816e:	23e0      	movs	r3, #224	@ 0xe0
 8008170:	00db      	lsls	r3, r3, #3
 8008172:	4013      	ands	r3, r2
 8008174:	d004      	beq.n	8008180 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8008176:	4b06      	ldr	r3, [pc, #24]	@ (8008190 <I2C1_IRQHandler+0x2c>)
 8008178:	0018      	movs	r0, r3
 800817a:	f002 fc5d 	bl	800aa38 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800817e:	e003      	b.n	8008188 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8008180:	4b03      	ldr	r3, [pc, #12]	@ (8008190 <I2C1_IRQHandler+0x2c>)
 8008182:	0018      	movs	r0, r3
 8008184:	f002 fc3e 	bl	800aa04 <HAL_I2C_EV_IRQHandler>
}
 8008188:	46c0      	nop			@ (mov r8, r8)
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	46c0      	nop			@ (mov r8, r8)
 8008190:	20000af0 	.word	0x20000af0

08008194 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008198:	4b03      	ldr	r3, [pc, #12]	@ (80081a8 <USB_IRQHandler+0x14>)
 800819a:	0018      	movs	r0, r3
 800819c:	f004 fe14 	bl	800cdc8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80081a0:	46c0      	nop			@ (mov r8, r8)
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	46c0      	nop			@ (mov r8, r8)
 80081a8:	20003d50 	.word	0x20003d50

080081ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
  return 1;
 80081b0:	2301      	movs	r3, #1
}
 80081b2:	0018      	movs	r0, r3
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <_kill>:

int _kill(int pid, int sig)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80081c2:	f00e fbf7 	bl	80169b4 <__errno>
 80081c6:	0003      	movs	r3, r0
 80081c8:	2216      	movs	r2, #22
 80081ca:	601a      	str	r2, [r3, #0]
  return -1;
 80081cc:	2301      	movs	r3, #1
 80081ce:	425b      	negs	r3, r3
}
 80081d0:	0018      	movs	r0, r3
 80081d2:	46bd      	mov	sp, r7
 80081d4:	b002      	add	sp, #8
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <_exit>:

void _exit (int status)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80081e0:	2301      	movs	r3, #1
 80081e2:	425a      	negs	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	0011      	movs	r1, r2
 80081e8:	0018      	movs	r0, r3
 80081ea:	f7ff ffe5 	bl	80081b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80081ee:	46c0      	nop			@ (mov r8, r8)
 80081f0:	e7fd      	b.n	80081ee <_exit+0x16>

080081f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b086      	sub	sp, #24
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	60b9      	str	r1, [r7, #8]
 80081fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081fe:	2300      	movs	r3, #0
 8008200:	617b      	str	r3, [r7, #20]
 8008202:	e00a      	b.n	800821a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008204:	e000      	b.n	8008208 <_read+0x16>
 8008206:	bf00      	nop
 8008208:	0001      	movs	r1, r0
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	1c5a      	adds	r2, r3, #1
 800820e:	60ba      	str	r2, [r7, #8]
 8008210:	b2ca      	uxtb	r2, r1
 8008212:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	3301      	adds	r3, #1
 8008218:	617b      	str	r3, [r7, #20]
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	429a      	cmp	r2, r3
 8008220:	dbf0      	blt.n	8008204 <_read+0x12>
  }

  return len;
 8008222:	687b      	ldr	r3, [r7, #4]
}
 8008224:	0018      	movs	r0, r3
 8008226:	46bd      	mov	sp, r7
 8008228:	b006      	add	sp, #24
 800822a:	bd80      	pop	{r7, pc}

0800822c <_close>:
  }
  return len;
}

int _close(int file)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008234:	2301      	movs	r3, #1
 8008236:	425b      	negs	r3, r3
}
 8008238:	0018      	movs	r0, r3
 800823a:	46bd      	mov	sp, r7
 800823c:	b002      	add	sp, #8
 800823e:	bd80      	pop	{r7, pc}

08008240 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2280      	movs	r2, #128	@ 0x80
 800824e:	0192      	lsls	r2, r2, #6
 8008250:	605a      	str	r2, [r3, #4]
  return 0;
 8008252:	2300      	movs	r3, #0
}
 8008254:	0018      	movs	r0, r3
 8008256:	46bd      	mov	sp, r7
 8008258:	b002      	add	sp, #8
 800825a:	bd80      	pop	{r7, pc}

0800825c <_isatty>:

int _isatty(int file)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008264:	2301      	movs	r3, #1
}
 8008266:	0018      	movs	r0, r3
 8008268:	46bd      	mov	sp, r7
 800826a:	b002      	add	sp, #8
 800826c:	bd80      	pop	{r7, pc}

0800826e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	60f8      	str	r0, [r7, #12]
 8008276:	60b9      	str	r1, [r7, #8]
 8008278:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800827a:	2300      	movs	r3, #0
}
 800827c:	0018      	movs	r0, r3
 800827e:	46bd      	mov	sp, r7
 8008280:	b004      	add	sp, #16
 8008282:	bd80      	pop	{r7, pc}

08008284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800828c:	4a14      	ldr	r2, [pc, #80]	@ (80082e0 <_sbrk+0x5c>)
 800828e:	4b15      	ldr	r3, [pc, #84]	@ (80082e4 <_sbrk+0x60>)
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008298:	4b13      	ldr	r3, [pc, #76]	@ (80082e8 <_sbrk+0x64>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d102      	bne.n	80082a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80082a0:	4b11      	ldr	r3, [pc, #68]	@ (80082e8 <_sbrk+0x64>)
 80082a2:	4a12      	ldr	r2, [pc, #72]	@ (80082ec <_sbrk+0x68>)
 80082a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80082a6:	4b10      	ldr	r3, [pc, #64]	@ (80082e8 <_sbrk+0x64>)
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	18d3      	adds	r3, r2, r3
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d207      	bcs.n	80082c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80082b4:	f00e fb7e 	bl	80169b4 <__errno>
 80082b8:	0003      	movs	r3, r0
 80082ba:	220c      	movs	r2, #12
 80082bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80082be:	2301      	movs	r3, #1
 80082c0:	425b      	negs	r3, r3
 80082c2:	e009      	b.n	80082d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80082c4:	4b08      	ldr	r3, [pc, #32]	@ (80082e8 <_sbrk+0x64>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80082ca:	4b07      	ldr	r3, [pc, #28]	@ (80082e8 <_sbrk+0x64>)
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	18d2      	adds	r2, r2, r3
 80082d2:	4b05      	ldr	r3, [pc, #20]	@ (80082e8 <_sbrk+0x64>)
 80082d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80082d6:	68fb      	ldr	r3, [r7, #12]
}
 80082d8:	0018      	movs	r0, r3
 80082da:	46bd      	mov	sp, r7
 80082dc:	b006      	add	sp, #24
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	20005000 	.word	0x20005000
 80082e4:	00000400 	.word	0x00000400
 80082e8:	200025e4 	.word	0x200025e4
 80082ec:	200043b0 	.word	0x200043b0

080082f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80082f4:	46c0      	nop			@ (mov r8, r8)
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008302:	2310      	movs	r3, #16
 8008304:	18fb      	adds	r3, r7, r3
 8008306:	0018      	movs	r0, r3
 8008308:	2308      	movs	r3, #8
 800830a:	001a      	movs	r2, r3
 800830c:	2100      	movs	r1, #0
 800830e:	f00e facd 	bl	80168ac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008312:	003b      	movs	r3, r7
 8008314:	0018      	movs	r0, r3
 8008316:	2310      	movs	r3, #16
 8008318:	001a      	movs	r2, r3
 800831a:	2100      	movs	r1, #0
 800831c:	f00e fac6 	bl	80168ac <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008320:	4b2e      	ldr	r3, [pc, #184]	@ (80083dc <MX_TIM2_Init+0xe0>)
 8008322:	2280      	movs	r2, #128	@ 0x80
 8008324:	05d2      	lsls	r2, r2, #23
 8008326:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008328:	4b2c      	ldr	r3, [pc, #176]	@ (80083dc <MX_TIM2_Init+0xe0>)
 800832a:	2200      	movs	r2, #0
 800832c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800832e:	4b2b      	ldr	r3, [pc, #172]	@ (80083dc <MX_TIM2_Init+0xe0>)
 8008330:	2200      	movs	r2, #0
 8008332:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8008334:	4b29      	ldr	r3, [pc, #164]	@ (80083dc <MX_TIM2_Init+0xe0>)
 8008336:	4a2a      	ldr	r2, [pc, #168]	@ (80083e0 <MX_TIM2_Init+0xe4>)
 8008338:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800833a:	4b28      	ldr	r3, [pc, #160]	@ (80083dc <MX_TIM2_Init+0xe0>)
 800833c:	2200      	movs	r2, #0
 800833e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008340:	4b26      	ldr	r3, [pc, #152]	@ (80083dc <MX_TIM2_Init+0xe0>)
 8008342:	2200      	movs	r2, #0
 8008344:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008346:	4b25      	ldr	r3, [pc, #148]	@ (80083dc <MX_TIM2_Init+0xe0>)
 8008348:	0018      	movs	r0, r3
 800834a:	f007 f9bd 	bl	800f6c8 <HAL_TIM_PWM_Init>
 800834e:	1e03      	subs	r3, r0, #0
 8008350:	d001      	beq.n	8008356 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8008352:	f7fd fbdf 	bl	8005b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008356:	2110      	movs	r1, #16
 8008358:	187b      	adds	r3, r7, r1
 800835a:	2200      	movs	r2, #0
 800835c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800835e:	187b      	adds	r3, r7, r1
 8008360:	2200      	movs	r2, #0
 8008362:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008364:	187a      	adds	r2, r7, r1
 8008366:	4b1d      	ldr	r3, [pc, #116]	@ (80083dc <MX_TIM2_Init+0xe0>)
 8008368:	0011      	movs	r1, r2
 800836a:	0018      	movs	r0, r3
 800836c:	f007 fcca 	bl	800fd04 <HAL_TIMEx_MasterConfigSynchronization>
 8008370:	1e03      	subs	r3, r0, #0
 8008372:	d001      	beq.n	8008378 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8008374:	f7fd fbce 	bl	8005b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008378:	003b      	movs	r3, r7
 800837a:	2260      	movs	r2, #96	@ 0x60
 800837c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800837e:	003b      	movs	r3, r7
 8008380:	2200      	movs	r2, #0
 8008382:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008384:	003b      	movs	r3, r7
 8008386:	2200      	movs	r2, #0
 8008388:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800838a:	003b      	movs	r3, r7
 800838c:	2200      	movs	r2, #0
 800838e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008390:	0039      	movs	r1, r7
 8008392:	4b12      	ldr	r3, [pc, #72]	@ (80083dc <MX_TIM2_Init+0xe0>)
 8008394:	2200      	movs	r2, #0
 8008396:	0018      	movs	r0, r3
 8008398:	f007 fa68 	bl	800f86c <HAL_TIM_PWM_ConfigChannel>
 800839c:	1e03      	subs	r3, r0, #0
 800839e:	d001      	beq.n	80083a4 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80083a0:	f7fd fbb8 	bl	8005b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80083a4:	0039      	movs	r1, r7
 80083a6:	4b0d      	ldr	r3, [pc, #52]	@ (80083dc <MX_TIM2_Init+0xe0>)
 80083a8:	2208      	movs	r2, #8
 80083aa:	0018      	movs	r0, r3
 80083ac:	f007 fa5e 	bl	800f86c <HAL_TIM_PWM_ConfigChannel>
 80083b0:	1e03      	subs	r3, r0, #0
 80083b2:	d001      	beq.n	80083b8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80083b4:	f7fd fbae 	bl	8005b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80083b8:	0039      	movs	r1, r7
 80083ba:	4b08      	ldr	r3, [pc, #32]	@ (80083dc <MX_TIM2_Init+0xe0>)
 80083bc:	220c      	movs	r2, #12
 80083be:	0018      	movs	r0, r3
 80083c0:	f007 fa54 	bl	800f86c <HAL_TIM_PWM_ConfigChannel>
 80083c4:	1e03      	subs	r3, r0, #0
 80083c6:	d001      	beq.n	80083cc <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80083c8:	f7fd fba4 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80083cc:	4b03      	ldr	r3, [pc, #12]	@ (80083dc <MX_TIM2_Init+0xe0>)
 80083ce:	0018      	movs	r0, r3
 80083d0:	f000 f8aa 	bl	8008528 <HAL_TIM_MspPostInit>

}
 80083d4:	46c0      	nop			@ (mov r8, r8)
 80083d6:	46bd      	mov	sp, r7
 80083d8:	b006      	add	sp, #24
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	200025e8 	.word	0x200025e8
 80083e0:	0000ffff 	.word	0x0000ffff

080083e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80083ea:	2310      	movs	r3, #16
 80083ec:	18fb      	adds	r3, r7, r3
 80083ee:	0018      	movs	r0, r3
 80083f0:	2308      	movs	r3, #8
 80083f2:	001a      	movs	r2, r3
 80083f4:	2100      	movs	r1, #0
 80083f6:	f00e fa59 	bl	80168ac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80083fa:	003b      	movs	r3, r7
 80083fc:	0018      	movs	r0, r3
 80083fe:	2310      	movs	r3, #16
 8008400:	001a      	movs	r2, r3
 8008402:	2100      	movs	r1, #0
 8008404:	f00e fa52 	bl	80168ac <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008408:	4b32      	ldr	r3, [pc, #200]	@ (80084d4 <MX_TIM3_Init+0xf0>)
 800840a:	4a33      	ldr	r2, [pc, #204]	@ (80084d8 <MX_TIM3_Init+0xf4>)
 800840c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800840e:	4b31      	ldr	r3, [pc, #196]	@ (80084d4 <MX_TIM3_Init+0xf0>)
 8008410:	2200      	movs	r2, #0
 8008412:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008414:	4b2f      	ldr	r3, [pc, #188]	@ (80084d4 <MX_TIM3_Init+0xf0>)
 8008416:	2200      	movs	r2, #0
 8008418:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800841a:	4b2e      	ldr	r3, [pc, #184]	@ (80084d4 <MX_TIM3_Init+0xf0>)
 800841c:	4a2f      	ldr	r2, [pc, #188]	@ (80084dc <MX_TIM3_Init+0xf8>)
 800841e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008420:	4b2c      	ldr	r3, [pc, #176]	@ (80084d4 <MX_TIM3_Init+0xf0>)
 8008422:	2200      	movs	r2, #0
 8008424:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008426:	4b2b      	ldr	r3, [pc, #172]	@ (80084d4 <MX_TIM3_Init+0xf0>)
 8008428:	2200      	movs	r2, #0
 800842a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800842c:	4b29      	ldr	r3, [pc, #164]	@ (80084d4 <MX_TIM3_Init+0xf0>)
 800842e:	0018      	movs	r0, r3
 8008430:	f007 f94a 	bl	800f6c8 <HAL_TIM_PWM_Init>
 8008434:	1e03      	subs	r3, r0, #0
 8008436:	d001      	beq.n	800843c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8008438:	f7fd fb6c 	bl	8005b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800843c:	2110      	movs	r1, #16
 800843e:	187b      	adds	r3, r7, r1
 8008440:	2200      	movs	r2, #0
 8008442:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008444:	187b      	adds	r3, r7, r1
 8008446:	2200      	movs	r2, #0
 8008448:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800844a:	187a      	adds	r2, r7, r1
 800844c:	4b21      	ldr	r3, [pc, #132]	@ (80084d4 <MX_TIM3_Init+0xf0>)
 800844e:	0011      	movs	r1, r2
 8008450:	0018      	movs	r0, r3
 8008452:	f007 fc57 	bl	800fd04 <HAL_TIMEx_MasterConfigSynchronization>
 8008456:	1e03      	subs	r3, r0, #0
 8008458:	d001      	beq.n	800845e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800845a:	f7fd fb5b 	bl	8005b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800845e:	003b      	movs	r3, r7
 8008460:	2260      	movs	r2, #96	@ 0x60
 8008462:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8008464:	003b      	movs	r3, r7
 8008466:	2200      	movs	r2, #0
 8008468:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800846a:	003b      	movs	r3, r7
 800846c:	2200      	movs	r2, #0
 800846e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008470:	003b      	movs	r3, r7
 8008472:	2200      	movs	r2, #0
 8008474:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008476:	0039      	movs	r1, r7
 8008478:	4b16      	ldr	r3, [pc, #88]	@ (80084d4 <MX_TIM3_Init+0xf0>)
 800847a:	2200      	movs	r2, #0
 800847c:	0018      	movs	r0, r3
 800847e:	f007 f9f5 	bl	800f86c <HAL_TIM_PWM_ConfigChannel>
 8008482:	1e03      	subs	r3, r0, #0
 8008484:	d001      	beq.n	800848a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8008486:	f7fd fb45 	bl	8005b14 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800848a:	4b12      	ldr	r3, [pc, #72]	@ (80084d4 <MX_TIM3_Init+0xf0>)
 800848c:	2104      	movs	r1, #4
 800848e:	0018      	movs	r0, r3
 8008490:	f007 fc96 	bl	800fdc0 <HAL_TIMEx_RemapConfig>
 8008494:	1e03      	subs	r3, r0, #0
 8008496:	d001      	beq.n	800849c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8008498:	f7fd fb3c 	bl	8005b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800849c:	0039      	movs	r1, r7
 800849e:	4b0d      	ldr	r3, [pc, #52]	@ (80084d4 <MX_TIM3_Init+0xf0>)
 80084a0:	2204      	movs	r2, #4
 80084a2:	0018      	movs	r0, r3
 80084a4:	f007 f9e2 	bl	800f86c <HAL_TIM_PWM_ConfigChannel>
 80084a8:	1e03      	subs	r3, r0, #0
 80084aa:	d001      	beq.n	80084b0 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 80084ac:	f7fd fb32 	bl	8005b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80084b0:	0039      	movs	r1, r7
 80084b2:	4b08      	ldr	r3, [pc, #32]	@ (80084d4 <MX_TIM3_Init+0xf0>)
 80084b4:	2208      	movs	r2, #8
 80084b6:	0018      	movs	r0, r3
 80084b8:	f007 f9d8 	bl	800f86c <HAL_TIM_PWM_ConfigChannel>
 80084bc:	1e03      	subs	r3, r0, #0
 80084be:	d001      	beq.n	80084c4 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80084c0:	f7fd fb28 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80084c4:	4b03      	ldr	r3, [pc, #12]	@ (80084d4 <MX_TIM3_Init+0xf0>)
 80084c6:	0018      	movs	r0, r3
 80084c8:	f000 f82e 	bl	8008528 <HAL_TIM_MspPostInit>

}
 80084cc:	46c0      	nop			@ (mov r8, r8)
 80084ce:	46bd      	mov	sp, r7
 80084d0:	b006      	add	sp, #24
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	20002628 	.word	0x20002628
 80084d8:	40000400 	.word	0x40000400
 80084dc:	0000ffff 	.word	0x0000ffff

080084e0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	2380      	movs	r3, #128	@ 0x80
 80084ee:	05db      	lsls	r3, r3, #23
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d106      	bne.n	8008502 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80084f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008520 <HAL_TIM_PWM_MspInit+0x40>)
 80084f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084f8:	4b09      	ldr	r3, [pc, #36]	@ (8008520 <HAL_TIM_PWM_MspInit+0x40>)
 80084fa:	2101      	movs	r1, #1
 80084fc:	430a      	orrs	r2, r1
 80084fe:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008500:	e00a      	b.n	8008518 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a07      	ldr	r2, [pc, #28]	@ (8008524 <HAL_TIM_PWM_MspInit+0x44>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d105      	bne.n	8008518 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800850c:	4b04      	ldr	r3, [pc, #16]	@ (8008520 <HAL_TIM_PWM_MspInit+0x40>)
 800850e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008510:	4b03      	ldr	r3, [pc, #12]	@ (8008520 <HAL_TIM_PWM_MspInit+0x40>)
 8008512:	2102      	movs	r1, #2
 8008514:	430a      	orrs	r2, r1
 8008516:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008518:	46c0      	nop			@ (mov r8, r8)
 800851a:	46bd      	mov	sp, r7
 800851c:	b002      	add	sp, #8
 800851e:	bd80      	pop	{r7, pc}
 8008520:	40021000 	.word	0x40021000
 8008524:	40000400 	.word	0x40000400

08008528 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008528:	b590      	push	{r4, r7, lr}
 800852a:	b08b      	sub	sp, #44	@ 0x2c
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008530:	2414      	movs	r4, #20
 8008532:	193b      	adds	r3, r7, r4
 8008534:	0018      	movs	r0, r3
 8008536:	2314      	movs	r3, #20
 8008538:	001a      	movs	r2, r3
 800853a:	2100      	movs	r1, #0
 800853c:	f00e f9b6 	bl	80168ac <memset>
  if(timHandle->Instance==TIM2)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	2380      	movs	r3, #128	@ 0x80
 8008546:	05db      	lsls	r3, r3, #23
 8008548:	429a      	cmp	r2, r3
 800854a:	d123      	bne.n	8008594 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800854c:	4b27      	ldr	r3, [pc, #156]	@ (80085ec <HAL_TIM_MspPostInit+0xc4>)
 800854e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008550:	4b26      	ldr	r3, [pc, #152]	@ (80085ec <HAL_TIM_MspPostInit+0xc4>)
 8008552:	2101      	movs	r1, #1
 8008554:	430a      	orrs	r2, r1
 8008556:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008558:	4b24      	ldr	r3, [pc, #144]	@ (80085ec <HAL_TIM_MspPostInit+0xc4>)
 800855a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855c:	2201      	movs	r2, #1
 800855e:	4013      	ands	r3, r2
 8008560:	613b      	str	r3, [r7, #16]
 8008562:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8008564:	0021      	movs	r1, r4
 8008566:	187b      	adds	r3, r7, r1
 8008568:	220d      	movs	r2, #13
 800856a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800856c:	187b      	adds	r3, r7, r1
 800856e:	2202      	movs	r2, #2
 8008570:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008572:	187b      	adds	r3, r7, r1
 8008574:	2200      	movs	r2, #0
 8008576:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008578:	187b      	adds	r3, r7, r1
 800857a:	2200      	movs	r2, #0
 800857c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800857e:	187b      	adds	r3, r7, r1
 8008580:	2202      	movs	r2, #2
 8008582:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008584:	187a      	adds	r2, r7, r1
 8008586:	23a0      	movs	r3, #160	@ 0xa0
 8008588:	05db      	lsls	r3, r3, #23
 800858a:	0011      	movs	r1, r2
 800858c:	0018      	movs	r0, r3
 800858e:	f001 fd19 	bl	8009fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008592:	e027      	b.n	80085e4 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a15      	ldr	r2, [pc, #84]	@ (80085f0 <HAL_TIM_MspPostInit+0xc8>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d122      	bne.n	80085e4 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800859e:	4b13      	ldr	r3, [pc, #76]	@ (80085ec <HAL_TIM_MspPostInit+0xc4>)
 80085a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085a2:	4b12      	ldr	r3, [pc, #72]	@ (80085ec <HAL_TIM_MspPostInit+0xc4>)
 80085a4:	2104      	movs	r1, #4
 80085a6:	430a      	orrs	r2, r1
 80085a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80085aa:	4b10      	ldr	r3, [pc, #64]	@ (80085ec <HAL_TIM_MspPostInit+0xc4>)
 80085ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ae:	2204      	movs	r2, #4
 80085b0:	4013      	ands	r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]
 80085b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80085b6:	2114      	movs	r1, #20
 80085b8:	187b      	adds	r3, r7, r1
 80085ba:	22e0      	movs	r2, #224	@ 0xe0
 80085bc:	0052      	lsls	r2, r2, #1
 80085be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085c0:	187b      	adds	r3, r7, r1
 80085c2:	2202      	movs	r2, #2
 80085c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085c6:	187b      	adds	r3, r7, r1
 80085c8:	2200      	movs	r2, #0
 80085ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085cc:	187b      	adds	r3, r7, r1
 80085ce:	2200      	movs	r2, #0
 80085d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80085d2:	187b      	adds	r3, r7, r1
 80085d4:	2202      	movs	r2, #2
 80085d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085d8:	187b      	adds	r3, r7, r1
 80085da:	4a06      	ldr	r2, [pc, #24]	@ (80085f4 <HAL_TIM_MspPostInit+0xcc>)
 80085dc:	0019      	movs	r1, r3
 80085de:	0010      	movs	r0, r2
 80085e0:	f001 fcf0 	bl	8009fc4 <HAL_GPIO_Init>
}
 80085e4:	46c0      	nop			@ (mov r8, r8)
 80085e6:	46bd      	mov	sp, r7
 80085e8:	b00b      	add	sp, #44	@ 0x2c
 80085ea:	bd90      	pop	{r4, r7, pc}
 80085ec:	40021000 	.word	0x40021000
 80085f0:	40000400 	.word	0x40000400
 80085f4:	50000800 	.word	0x50000800

080085f8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80085fc:	4b16      	ldr	r3, [pc, #88]	@ (8008658 <MX_USART1_UART_Init+0x60>)
 80085fe:	4a17      	ldr	r2, [pc, #92]	@ (800865c <MX_USART1_UART_Init+0x64>)
 8008600:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008602:	4b15      	ldr	r3, [pc, #84]	@ (8008658 <MX_USART1_UART_Init+0x60>)
 8008604:	22e1      	movs	r2, #225	@ 0xe1
 8008606:	0252      	lsls	r2, r2, #9
 8008608:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800860a:	4b13      	ldr	r3, [pc, #76]	@ (8008658 <MX_USART1_UART_Init+0x60>)
 800860c:	2200      	movs	r2, #0
 800860e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008610:	4b11      	ldr	r3, [pc, #68]	@ (8008658 <MX_USART1_UART_Init+0x60>)
 8008612:	2200      	movs	r2, #0
 8008614:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008616:	4b10      	ldr	r3, [pc, #64]	@ (8008658 <MX_USART1_UART_Init+0x60>)
 8008618:	2200      	movs	r2, #0
 800861a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800861c:	4b0e      	ldr	r3, [pc, #56]	@ (8008658 <MX_USART1_UART_Init+0x60>)
 800861e:	220c      	movs	r2, #12
 8008620:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008622:	4b0d      	ldr	r3, [pc, #52]	@ (8008658 <MX_USART1_UART_Init+0x60>)
 8008624:	2200      	movs	r2, #0
 8008626:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008628:	4b0b      	ldr	r3, [pc, #44]	@ (8008658 <MX_USART1_UART_Init+0x60>)
 800862a:	2200      	movs	r2, #0
 800862c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800862e:	4b0a      	ldr	r3, [pc, #40]	@ (8008658 <MX_USART1_UART_Init+0x60>)
 8008630:	2200      	movs	r2, #0
 8008632:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8008634:	4b08      	ldr	r3, [pc, #32]	@ (8008658 <MX_USART1_UART_Init+0x60>)
 8008636:	2208      	movs	r2, #8
 8008638:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800863a:	4b07      	ldr	r3, [pc, #28]	@ (8008658 <MX_USART1_UART_Init+0x60>)
 800863c:	2280      	movs	r2, #128	@ 0x80
 800863e:	0212      	lsls	r2, r2, #8
 8008640:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008642:	4b05      	ldr	r3, [pc, #20]	@ (8008658 <MX_USART1_UART_Init+0x60>)
 8008644:	0018      	movs	r0, r3
 8008646:	f007 fbd9 	bl	800fdfc <HAL_UART_Init>
 800864a:	1e03      	subs	r3, r0, #0
 800864c:	d001      	beq.n	8008652 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800864e:	f7fd fa61 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008652:	46c0      	nop			@ (mov r8, r8)
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	20002668 	.word	0x20002668
 800865c:	40013800 	.word	0x40013800

08008660 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8008664:	4b14      	ldr	r3, [pc, #80]	@ (80086b8 <MX_USART4_UART_Init+0x58>)
 8008666:	4a15      	ldr	r2, [pc, #84]	@ (80086bc <MX_USART4_UART_Init+0x5c>)
 8008668:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800866a:	4b13      	ldr	r3, [pc, #76]	@ (80086b8 <MX_USART4_UART_Init+0x58>)
 800866c:	22e1      	movs	r2, #225	@ 0xe1
 800866e:	0252      	lsls	r2, r2, #9
 8008670:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8008672:	4b11      	ldr	r3, [pc, #68]	@ (80086b8 <MX_USART4_UART_Init+0x58>)
 8008674:	2200      	movs	r2, #0
 8008676:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8008678:	4b0f      	ldr	r3, [pc, #60]	@ (80086b8 <MX_USART4_UART_Init+0x58>)
 800867a:	2200      	movs	r2, #0
 800867c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800867e:	4b0e      	ldr	r3, [pc, #56]	@ (80086b8 <MX_USART4_UART_Init+0x58>)
 8008680:	2200      	movs	r2, #0
 8008682:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8008684:	4b0c      	ldr	r3, [pc, #48]	@ (80086b8 <MX_USART4_UART_Init+0x58>)
 8008686:	220c      	movs	r2, #12
 8008688:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800868a:	4b0b      	ldr	r3, [pc, #44]	@ (80086b8 <MX_USART4_UART_Init+0x58>)
 800868c:	2200      	movs	r2, #0
 800868e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008690:	4b09      	ldr	r3, [pc, #36]	@ (80086b8 <MX_USART4_UART_Init+0x58>)
 8008692:	2200      	movs	r2, #0
 8008694:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008696:	4b08      	ldr	r3, [pc, #32]	@ (80086b8 <MX_USART4_UART_Init+0x58>)
 8008698:	2200      	movs	r2, #0
 800869a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800869c:	4b06      	ldr	r3, [pc, #24]	@ (80086b8 <MX_USART4_UART_Init+0x58>)
 800869e:	2200      	movs	r2, #0
 80086a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80086a2:	4b05      	ldr	r3, [pc, #20]	@ (80086b8 <MX_USART4_UART_Init+0x58>)
 80086a4:	0018      	movs	r0, r3
 80086a6:	f007 fba9 	bl	800fdfc <HAL_UART_Init>
 80086aa:	1e03      	subs	r3, r0, #0
 80086ac:	d001      	beq.n	80086b2 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80086ae:	f7fd fa31 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80086b2:	46c0      	nop			@ (mov r8, r8)
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	20002720 	.word	0x20002720
 80086bc:	40004c00 	.word	0x40004c00

080086c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80086c0:	b590      	push	{r4, r7, lr}
 80086c2:	b08b      	sub	sp, #44	@ 0x2c
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086c8:	2414      	movs	r4, #20
 80086ca:	193b      	adds	r3, r7, r4
 80086cc:	0018      	movs	r0, r3
 80086ce:	2314      	movs	r3, #20
 80086d0:	001a      	movs	r2, r3
 80086d2:	2100      	movs	r1, #0
 80086d4:	f00e f8ea 	bl	80168ac <memset>
  if(uartHandle->Instance==USART1)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a6f      	ldr	r2, [pc, #444]	@ (800889c <HAL_UART_MspInit+0x1dc>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d12b      	bne.n	800873a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80086e2:	4b6f      	ldr	r3, [pc, #444]	@ (80088a0 <HAL_UART_MspInit+0x1e0>)
 80086e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086e6:	4b6e      	ldr	r3, [pc, #440]	@ (80088a0 <HAL_UART_MspInit+0x1e0>)
 80086e8:	2180      	movs	r1, #128	@ 0x80
 80086ea:	01c9      	lsls	r1, r1, #7
 80086ec:	430a      	orrs	r2, r1
 80086ee:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086f0:	4b6b      	ldr	r3, [pc, #428]	@ (80088a0 <HAL_UART_MspInit+0x1e0>)
 80086f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086f4:	4b6a      	ldr	r3, [pc, #424]	@ (80088a0 <HAL_UART_MspInit+0x1e0>)
 80086f6:	2101      	movs	r1, #1
 80086f8:	430a      	orrs	r2, r1
 80086fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80086fc:	4b68      	ldr	r3, [pc, #416]	@ (80088a0 <HAL_UART_MspInit+0x1e0>)
 80086fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008700:	2201      	movs	r2, #1
 8008702:	4013      	ands	r3, r2
 8008704:	613b      	str	r3, [r7, #16]
 8008706:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008708:	193b      	adds	r3, r7, r4
 800870a:	22c0      	movs	r2, #192	@ 0xc0
 800870c:	00d2      	lsls	r2, r2, #3
 800870e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008710:	0021      	movs	r1, r4
 8008712:	187b      	adds	r3, r7, r1
 8008714:	2202      	movs	r2, #2
 8008716:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008718:	187b      	adds	r3, r7, r1
 800871a:	2200      	movs	r2, #0
 800871c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800871e:	187b      	adds	r3, r7, r1
 8008720:	2203      	movs	r2, #3
 8008722:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8008724:	187b      	adds	r3, r7, r1
 8008726:	2204      	movs	r2, #4
 8008728:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800872a:	187a      	adds	r2, r7, r1
 800872c:	23a0      	movs	r3, #160	@ 0xa0
 800872e:	05db      	lsls	r3, r3, #23
 8008730:	0011      	movs	r1, r2
 8008732:	0018      	movs	r0, r3
 8008734:	f001 fc46 	bl	8009fc4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8008738:	e0ac      	b.n	8008894 <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==USART4)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a59      	ldr	r2, [pc, #356]	@ (80088a4 <HAL_UART_MspInit+0x1e4>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d000      	beq.n	8008746 <HAL_UART_MspInit+0x86>
 8008744:	e0a6      	b.n	8008894 <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART4_CLK_ENABLE();
 8008746:	4b56      	ldr	r3, [pc, #344]	@ (80088a0 <HAL_UART_MspInit+0x1e0>)
 8008748:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800874a:	4b55      	ldr	r3, [pc, #340]	@ (80088a0 <HAL_UART_MspInit+0x1e0>)
 800874c:	2180      	movs	r1, #128	@ 0x80
 800874e:	0309      	lsls	r1, r1, #12
 8008750:	430a      	orrs	r2, r1
 8008752:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008754:	4b52      	ldr	r3, [pc, #328]	@ (80088a0 <HAL_UART_MspInit+0x1e0>)
 8008756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008758:	4b51      	ldr	r3, [pc, #324]	@ (80088a0 <HAL_UART_MspInit+0x1e0>)
 800875a:	2101      	movs	r1, #1
 800875c:	430a      	orrs	r2, r1
 800875e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008760:	4b4f      	ldr	r3, [pc, #316]	@ (80088a0 <HAL_UART_MspInit+0x1e0>)
 8008762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008764:	2201      	movs	r2, #1
 8008766:	4013      	ands	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800876c:	4b4c      	ldr	r3, [pc, #304]	@ (80088a0 <HAL_UART_MspInit+0x1e0>)
 800876e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008770:	4b4b      	ldr	r3, [pc, #300]	@ (80088a0 <HAL_UART_MspInit+0x1e0>)
 8008772:	2104      	movs	r1, #4
 8008774:	430a      	orrs	r2, r1
 8008776:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008778:	4b49      	ldr	r3, [pc, #292]	@ (80088a0 <HAL_UART_MspInit+0x1e0>)
 800877a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877c:	2204      	movs	r2, #4
 800877e:	4013      	ands	r3, r2
 8008780:	60bb      	str	r3, [r7, #8]
 8008782:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008784:	2414      	movs	r4, #20
 8008786:	193b      	adds	r3, r7, r4
 8008788:	2202      	movs	r2, #2
 800878a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800878c:	193b      	adds	r3, r7, r4
 800878e:	2202      	movs	r2, #2
 8008790:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008792:	193b      	adds	r3, r7, r4
 8008794:	2200      	movs	r2, #0
 8008796:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008798:	193b      	adds	r3, r7, r4
 800879a:	2203      	movs	r2, #3
 800879c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800879e:	193b      	adds	r3, r7, r4
 80087a0:	2206      	movs	r2, #6
 80087a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087a4:	193a      	adds	r2, r7, r4
 80087a6:	23a0      	movs	r3, #160	@ 0xa0
 80087a8:	05db      	lsls	r3, r3, #23
 80087aa:	0011      	movs	r1, r2
 80087ac:	0018      	movs	r0, r3
 80087ae:	f001 fc09 	bl	8009fc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80087b2:	0021      	movs	r1, r4
 80087b4:	187b      	adds	r3, r7, r1
 80087b6:	2280      	movs	r2, #128	@ 0x80
 80087b8:	00d2      	lsls	r2, r2, #3
 80087ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087bc:	187b      	adds	r3, r7, r1
 80087be:	2202      	movs	r2, #2
 80087c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087c2:	187b      	adds	r3, r7, r1
 80087c4:	2200      	movs	r2, #0
 80087c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087c8:	187b      	adds	r3, r7, r1
 80087ca:	2203      	movs	r2, #3
 80087cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80087ce:	187b      	adds	r3, r7, r1
 80087d0:	2206      	movs	r2, #6
 80087d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087d4:	187b      	adds	r3, r7, r1
 80087d6:	4a34      	ldr	r2, [pc, #208]	@ (80088a8 <HAL_UART_MspInit+0x1e8>)
 80087d8:	0019      	movs	r1, r3
 80087da:	0010      	movs	r0, r2
 80087dc:	f001 fbf2 	bl	8009fc4 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 80087e0:	4b32      	ldr	r3, [pc, #200]	@ (80088ac <HAL_UART_MspInit+0x1ec>)
 80087e2:	4a33      	ldr	r2, [pc, #204]	@ (80088b0 <HAL_UART_MspInit+0x1f0>)
 80087e4:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 80087e6:	4b31      	ldr	r3, [pc, #196]	@ (80088ac <HAL_UART_MspInit+0x1ec>)
 80087e8:	220c      	movs	r2, #12
 80087ea:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80087ec:	4b2f      	ldr	r3, [pc, #188]	@ (80088ac <HAL_UART_MspInit+0x1ec>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80087f2:	4b2e      	ldr	r3, [pc, #184]	@ (80088ac <HAL_UART_MspInit+0x1ec>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80087f8:	4b2c      	ldr	r3, [pc, #176]	@ (80088ac <HAL_UART_MspInit+0x1ec>)
 80087fa:	2280      	movs	r2, #128	@ 0x80
 80087fc:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80087fe:	4b2b      	ldr	r3, [pc, #172]	@ (80088ac <HAL_UART_MspInit+0x1ec>)
 8008800:	2200      	movs	r2, #0
 8008802:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008804:	4b29      	ldr	r3, [pc, #164]	@ (80088ac <HAL_UART_MspInit+0x1ec>)
 8008806:	2200      	movs	r2, #0
 8008808:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800880a:	4b28      	ldr	r3, [pc, #160]	@ (80088ac <HAL_UART_MspInit+0x1ec>)
 800880c:	2220      	movs	r2, #32
 800880e:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008810:	4b26      	ldr	r3, [pc, #152]	@ (80088ac <HAL_UART_MspInit+0x1ec>)
 8008812:	2200      	movs	r2, #0
 8008814:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8008816:	4b25      	ldr	r3, [pc, #148]	@ (80088ac <HAL_UART_MspInit+0x1ec>)
 8008818:	0018      	movs	r0, r3
 800881a:	f001 f927 	bl	8009a6c <HAL_DMA_Init>
 800881e:	1e03      	subs	r3, r0, #0
 8008820:	d001      	beq.n	8008826 <HAL_UART_MspInit+0x166>
      Error_Handler();
 8008822:	f7fd f977 	bl	8005b14 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a20      	ldr	r2, [pc, #128]	@ (80088ac <HAL_UART_MspInit+0x1ec>)
 800882a:	675a      	str	r2, [r3, #116]	@ 0x74
 800882c:	4b1f      	ldr	r3, [pc, #124]	@ (80088ac <HAL_UART_MspInit+0x1ec>)
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8008832:	4b20      	ldr	r3, [pc, #128]	@ (80088b4 <HAL_UART_MspInit+0x1f4>)
 8008834:	4a20      	ldr	r2, [pc, #128]	@ (80088b8 <HAL_UART_MspInit+0x1f8>)
 8008836:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8008838:	4b1e      	ldr	r3, [pc, #120]	@ (80088b4 <HAL_UART_MspInit+0x1f4>)
 800883a:	220c      	movs	r2, #12
 800883c:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800883e:	4b1d      	ldr	r3, [pc, #116]	@ (80088b4 <HAL_UART_MspInit+0x1f4>)
 8008840:	2210      	movs	r2, #16
 8008842:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008844:	4b1b      	ldr	r3, [pc, #108]	@ (80088b4 <HAL_UART_MspInit+0x1f4>)
 8008846:	2200      	movs	r2, #0
 8008848:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800884a:	4b1a      	ldr	r3, [pc, #104]	@ (80088b4 <HAL_UART_MspInit+0x1f4>)
 800884c:	2280      	movs	r2, #128	@ 0x80
 800884e:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008850:	4b18      	ldr	r3, [pc, #96]	@ (80088b4 <HAL_UART_MspInit+0x1f4>)
 8008852:	2200      	movs	r2, #0
 8008854:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008856:	4b17      	ldr	r3, [pc, #92]	@ (80088b4 <HAL_UART_MspInit+0x1f4>)
 8008858:	2200      	movs	r2, #0
 800885a:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800885c:	4b15      	ldr	r3, [pc, #84]	@ (80088b4 <HAL_UART_MspInit+0x1f4>)
 800885e:	2200      	movs	r2, #0
 8008860:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008862:	4b14      	ldr	r3, [pc, #80]	@ (80088b4 <HAL_UART_MspInit+0x1f4>)
 8008864:	2200      	movs	r2, #0
 8008866:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8008868:	4b12      	ldr	r3, [pc, #72]	@ (80088b4 <HAL_UART_MspInit+0x1f4>)
 800886a:	0018      	movs	r0, r3
 800886c:	f001 f8fe 	bl	8009a6c <HAL_DMA_Init>
 8008870:	1e03      	subs	r3, r0, #0
 8008872:	d001      	beq.n	8008878 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8008874:	f7fd f94e 	bl	8005b14 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a0e      	ldr	r2, [pc, #56]	@ (80088b4 <HAL_UART_MspInit+0x1f4>)
 800887c:	671a      	str	r2, [r3, #112]	@ 0x70
 800887e:	4b0d      	ldr	r3, [pc, #52]	@ (80088b4 <HAL_UART_MspInit+0x1f4>)
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8008884:	2200      	movs	r2, #0
 8008886:	2100      	movs	r1, #0
 8008888:	200e      	movs	r0, #14
 800888a:	f001 f8bd 	bl	8009a08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800888e:	200e      	movs	r0, #14
 8008890:	f001 f8cf 	bl	8009a32 <HAL_NVIC_EnableIRQ>
}
 8008894:	46c0      	nop			@ (mov r8, r8)
 8008896:	46bd      	mov	sp, r7
 8008898:	b00b      	add	sp, #44	@ 0x2c
 800889a:	bd90      	pop	{r4, r7, pc}
 800889c:	40013800 	.word	0x40013800
 80088a0:	40021000 	.word	0x40021000
 80088a4:	40004c00 	.word	0x40004c00
 80088a8:	50000800 	.word	0x50000800
 80088ac:	200027d8 	.word	0x200027d8
 80088b0:	4002006c 	.word	0x4002006c
 80088b4:	20002820 	.word	0x20002820
 80088b8:	40020080 	.word	0x40020080

080088bc <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 80088c4:	f000 fc48 	bl	8009158 <HAL_GetTick>
 80088c8:	0003      	movs	r3, r0
 80088ca:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 80088cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008940 <TimestampIsReached+0x84>)
 80088ce:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 80088d0:	697a      	ldr	r2, [r7, #20]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d307      	bcc.n	80088e8 <TimestampIsReached+0x2c>
 80088d8:	697a      	ldr	r2, [r7, #20]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	693a      	ldr	r2, [r7, #16]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d901      	bls.n	80088e8 <TimestampIsReached+0x2c>
 80088e4:	2201      	movs	r2, #1
 80088e6:	e000      	b.n	80088ea <TimestampIsReached+0x2e>
 80088e8:	2200      	movs	r2, #0
 80088ea:	230f      	movs	r3, #15
 80088ec:	18fb      	adds	r3, r7, r3
 80088ee:	701a      	strb	r2, [r3, #0]
 80088f0:	781a      	ldrb	r2, [r3, #0]
 80088f2:	2101      	movs	r1, #1
 80088f4:	400a      	ands	r2, r1
 80088f6:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 80088f8:	697a      	ldr	r2, [r7, #20]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d207      	bcs.n	8008910 <TimestampIsReached+0x54>
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	429a      	cmp	r2, r3
 800890a:	d201      	bcs.n	8008910 <TimestampIsReached+0x54>
 800890c:	2201      	movs	r2, #1
 800890e:	e000      	b.n	8008912 <TimestampIsReached+0x56>
 8008910:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8008912:	200e      	movs	r0, #14
 8008914:	183b      	adds	r3, r7, r0
 8008916:	701a      	strb	r2, [r3, #0]
 8008918:	781a      	ldrb	r2, [r3, #0]
 800891a:	2101      	movs	r1, #1
 800891c:	400a      	ands	r2, r1
 800891e:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8008920:	230f      	movs	r3, #15
 8008922:	18fb      	adds	r3, r7, r3
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d103      	bne.n	8008932 <TimestampIsReached+0x76>
 800892a:	183b      	adds	r3, r7, r0
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d001      	beq.n	8008936 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8008932:	2301      	movs	r3, #1
 8008934:	e000      	b.n	8008938 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8008936:	2300      	movs	r3, #0
}
 8008938:	0018      	movs	r0, r3
 800893a:	46bd      	mov	sp, r7
 800893c:	b006      	add	sp, #24
 800893e:	bd80      	pop	{r7, pc}
 8008940:	7fffffff 	.word	0x7fffffff

08008944 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800894c:	f000 fc04 	bl	8009158 <HAL_GetTick>
 8008950:	0002      	movs	r2, r0
 8008952:	4904      	ldr	r1, [pc, #16]	@ (8008964 <AddTimestamp+0x20>)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	0018      	movs	r0, r3
 8008958:	f00d ff04 	bl	8016764 <siprintf>
}
 800895c:	46c0      	nop			@ (mov r8, r8)
 800895e:	46bd      	mov	sp, r7
 8008960:	b002      	add	sp, #8
 8008962:	bd80      	pop	{r7, pc}
 8008964:	08019f04 	.word	0x08019f04

08008968 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8008968:	b40c      	push	{r2, r3}
 800896a:	b5b0      	push	{r4, r5, r7, lr}
 800896c:	4c2b      	ldr	r4, [pc, #172]	@ (8008a1c <CreateLine+0xb4>)
 800896e:	44a5      	add	sp, r4
 8008970:	af00      	add	r7, sp, #0
 8008972:	0002      	movs	r2, r0
 8008974:	6039      	str	r1, [r7, #0]
 8008976:	4b2a      	ldr	r3, [pc, #168]	@ (8008a20 <CreateLine+0xb8>)
 8008978:	2182      	movs	r1, #130	@ 0x82
 800897a:	00c9      	lsls	r1, r1, #3
 800897c:	185b      	adds	r3, r3, r1
 800897e:	19db      	adds	r3, r3, r7
 8008980:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8008982:	4b28      	ldr	r3, [pc, #160]	@ (8008a24 <CreateLine+0xbc>)
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	4a26      	ldr	r2, [pc, #152]	@ (8008a20 <CreateLine+0xb8>)
 8008988:	1852      	adds	r2, r2, r1
 800898a:	19d2      	adds	r2, r2, r7
 800898c:	7812      	ldrb	r2, [r2, #0]
 800898e:	429a      	cmp	r2, r3
 8008990:	d83b      	bhi.n	8008a0a <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	4924      	ldr	r1, [pc, #144]	@ (8008a28 <CreateLine+0xc0>)
 8008996:	240c      	movs	r4, #12
 8008998:	193b      	adds	r3, r7, r4
 800899a:	0018      	movs	r0, r3
 800899c:	f00d fee2 	bl	8016764 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 80089a0:	4b20      	ldr	r3, [pc, #128]	@ (8008a24 <CreateLine+0xbc>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d909      	bls.n	80089bc <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 80089a8:	193b      	adds	r3, r7, r4
 80089aa:	0018      	movs	r0, r3
 80089ac:	f7f7 fbac 	bl	8000108 <strlen>
 80089b0:	0002      	movs	r2, r0
 80089b2:	193b      	adds	r3, r7, r4
 80089b4:	189b      	adds	r3, r3, r2
 80089b6:	0018      	movs	r0, r3
 80089b8:	f7ff ffc4 	bl	8008944 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 80089bc:	240c      	movs	r4, #12
 80089be:	193b      	adds	r3, r7, r4
 80089c0:	0018      	movs	r0, r3
 80089c2:	f7f7 fba1 	bl	8000108 <strlen>
 80089c6:	0003      	movs	r3, r0
 80089c8:	4918      	ldr	r1, [pc, #96]	@ (8008a2c <CreateLine+0xc4>)
 80089ca:	187a      	adds	r2, r7, r1
 80089cc:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 80089ce:	4b18      	ldr	r3, [pc, #96]	@ (8008a30 <CreateLine+0xc8>)
 80089d0:	2508      	movs	r5, #8
 80089d2:	195b      	adds	r3, r3, r5
 80089d4:	19db      	adds	r3, r3, r7
 80089d6:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 80089d8:	193a      	adds	r2, r7, r4
 80089da:	187b      	adds	r3, r7, r1
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	18d0      	adds	r0, r2, r3
 80089e0:	187b      	adds	r3, r7, r1
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2280      	movs	r2, #128	@ 0x80
 80089e6:	00d2      	lsls	r2, r2, #3
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	0019      	movs	r1, r3
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2283      	movs	r2, #131	@ 0x83
 80089f0:	00d2      	lsls	r2, r2, #3
 80089f2:	1952      	adds	r2, r2, r5
 80089f4:	19d2      	adds	r2, r2, r7
 80089f6:	6812      	ldr	r2, [r2, #0]
 80089f8:	f00d ff4c 	bl	8016894 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 80089fc:	193a      	adds	r2, r7, r4
 80089fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008a34 <CreateLine+0xcc>)
 8008a00:	0011      	movs	r1, r2
 8008a02:	0018      	movs	r0, r3
 8008a04:	f00d fe9e 	bl	8016744 <iprintf>
 8008a08:	e000      	b.n	8008a0c <CreateLine+0xa4>
    return;
 8008a0a:	46c0      	nop			@ (mov r8, r8)
}
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	2382      	movs	r3, #130	@ 0x82
 8008a10:	00db      	lsls	r3, r3, #3
 8008a12:	449d      	add	sp, r3
 8008a14:	bcb0      	pop	{r4, r5, r7}
 8008a16:	bc08      	pop	{r3}
 8008a18:	b002      	add	sp, #8
 8008a1a:	4718      	bx	r3
 8008a1c:	fffffbf0 	.word	0xfffffbf0
 8008a20:	fffffbf7 	.word	0xfffffbf7
 8008a24:	20000140 	.word	0x20000140
 8008a28:	08019f10 	.word	0x08019f10
 8008a2c:	0000040c 	.word	0x0000040c
 8008a30:	0000041c 	.word	0x0000041c
 8008a34:	08019f14 	.word	0x08019f14

08008a38 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	68b9      	ldr	r1, [r7, #8]
 8008a4a:	4804      	ldr	r0, [pc, #16]	@ (8008a5c <_write+0x24>)
 8008a4c:	2364      	movs	r3, #100	@ 0x64
 8008a4e:	f007 fa3b 	bl	800fec8 <HAL_UART_Transmit>
  return count;
 8008a52:	687b      	ldr	r3, [r7, #4]
}
 8008a54:	0018      	movs	r0, r3
 8008a56:	46bd      	mov	sp, r7
 8008a58:	b004      	add	sp, #16
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	20002668 	.word	0x20002668

08008a60 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	0002      	movs	r2, r0
 8008a68:	1dfb      	adds	r3, r7, #7
 8008a6a:	701a      	strb	r2, [r3, #0]
 8008a6c:	4b03      	ldr	r3, [pc, #12]	@ (8008a7c <SetVerboseLevel+0x1c>)
 8008a6e:	1dfa      	adds	r2, r7, #7
 8008a70:	7812      	ldrb	r2, [r2, #0]
 8008a72:	701a      	strb	r2, [r3, #0]
 8008a74:	46c0      	nop			@ (mov r8, r8)
 8008a76:	46bd      	mov	sp, r7
 8008a78:	b002      	add	sp, #8
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	20000140 	.word	0x20000140

08008a80 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8008a80:	b580      	push	{r7, lr}
 8008a82:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008a84:	f000 fb68 	bl	8009158 <HAL_GetTick>
 8008a88:	0003      	movs	r3, r0
}
 8008a8a:	0018      	movs	r0, r3
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8008a96:	4a0f      	ldr	r2, [pc, #60]	@ (8008ad4 <BinaryReleaseInfo+0x44>)
 8008a98:	4b0f      	ldr	r3, [pc, #60]	@ (8008ad8 <BinaryReleaseInfo+0x48>)
 8008a9a:	0019      	movs	r1, r3
 8008a9c:	2002      	movs	r0, #2
 8008a9e:	f7ff ff63 	bl	8008968 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8008aa2:	480e      	ldr	r0, [pc, #56]	@ (8008adc <BinaryReleaseInfo+0x4c>)
 8008aa4:	4a0e      	ldr	r2, [pc, #56]	@ (8008ae0 <BinaryReleaseInfo+0x50>)
 8008aa6:	490c      	ldr	r1, [pc, #48]	@ (8008ad8 <BinaryReleaseInfo+0x48>)
 8008aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae4 <BinaryReleaseInfo+0x54>)
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	0003      	movs	r3, r0
 8008aae:	2002      	movs	r0, #2
 8008ab0:	f7ff ff5a 	bl	8008968 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8008ab4:	4a0c      	ldr	r2, [pc, #48]	@ (8008ae8 <BinaryReleaseInfo+0x58>)
 8008ab6:	4b08      	ldr	r3, [pc, #32]	@ (8008ad8 <BinaryReleaseInfo+0x48>)
 8008ab8:	0019      	movs	r1, r3
 8008aba:	2002      	movs	r0, #2
 8008abc:	f7ff ff54 	bl	8008968 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8008ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8008aec <BinaryReleaseInfo+0x5c>)
 8008ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8008af0 <BinaryReleaseInfo+0x60>)
 8008ac4:	4904      	ldr	r1, [pc, #16]	@ (8008ad8 <BinaryReleaseInfo+0x48>)
 8008ac6:	2002      	movs	r0, #2
 8008ac8:	f7ff ff4e 	bl	8008968 <CreateLine>
}
 8008acc:	46c0      	nop			@ (mov r8, r8)
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	46c0      	nop			@ (mov r8, r8)
 8008ad4:	08019f1c 	.word	0x08019f1c
 8008ad8:	08019f48 	.word	0x08019f48
 8008adc:	08019f4c 	.word	0x08019f4c
 8008ae0:	08019f58 	.word	0x08019f58
 8008ae4:	08019f6c 	.word	0x08019f6c
 8008ae8:	08019f78 	.word	0x08019f78
 8008aec:	08019f84 	.word	0x08019f84
 8008af0:	08019f8c 	.word	0x08019f8c

08008af4 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008af4:	b590      	push	{r4, r7, lr}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6039      	str	r1, [r7, #0]
 8008afc:	0011      	movs	r1, r2
 8008afe:	1dfb      	adds	r3, r7, #7
 8008b00:	1c02      	adds	r2, r0, #0
 8008b02:	701a      	strb	r2, [r3, #0]
 8008b04:	1dbb      	adds	r3, r7, #6
 8008b06:	1c0a      	adds	r2, r1, #0
 8008b08:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8008b0a:	4b08      	ldr	r3, [pc, #32]	@ (8008b2c <ReadRegister+0x38>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d008      	beq.n	8008b24 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 8008b12:	4b06      	ldr	r3, [pc, #24]	@ (8008b2c <ReadRegister+0x38>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	1dba      	adds	r2, r7, #6
 8008b18:	7814      	ldrb	r4, [r2, #0]
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	1dfa      	adds	r2, r7, #7
 8008b1e:	7810      	ldrb	r0, [r2, #0]
 8008b20:	0022      	movs	r2, r4
 8008b22:	4798      	blx	r3
	}
}
 8008b24:	46c0      	nop			@ (mov r8, r8)
 8008b26:	46bd      	mov	sp, r7
 8008b28:	b003      	add	sp, #12
 8008b2a:	bd90      	pop	{r4, r7, pc}
 8008b2c:	20002868 	.word	0x20002868

08008b30 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008b30:	b590      	push	{r4, r7, lr}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6039      	str	r1, [r7, #0]
 8008b38:	0011      	movs	r1, r2
 8008b3a:	1dfb      	adds	r3, r7, #7
 8008b3c:	1c02      	adds	r2, r0, #0
 8008b3e:	701a      	strb	r2, [r3, #0]
 8008b40:	1dbb      	adds	r3, r7, #6
 8008b42:	1c0a      	adds	r2, r1, #0
 8008b44:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8008b46:	4b08      	ldr	r3, [pc, #32]	@ (8008b68 <WriteRegister+0x38>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d008      	beq.n	8008b60 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8008b4e:	4b06      	ldr	r3, [pc, #24]	@ (8008b68 <WriteRegister+0x38>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	1dba      	adds	r2, r7, #6
 8008b54:	7814      	ldrb	r4, [r2, #0]
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	1dfa      	adds	r2, r7, #7
 8008b5a:	7810      	ldrb	r0, [r2, #0]
 8008b5c:	0022      	movs	r2, r4
 8008b5e:	4798      	blx	r3
  }
}
 8008b60:	46c0      	nop			@ (mov r8, r8)
 8008b62:	46bd      	mov	sp, r7
 8008b64:	b003      	add	sp, #12
 8008b66:	bd90      	pop	{r4, r7, pc}
 8008b68:	2000286c 	.word	0x2000286c

08008b6c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	000a      	movs	r2, r1
 8008b76:	1cfb      	adds	r3, r7, #3
 8008b78:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8008b7a:	230f      	movs	r3, #15
 8008b7c:	18fb      	adds	r3, r7, r3
 8008b7e:	22ff      	movs	r2, #255	@ 0xff
 8008b80:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008b82:	230e      	movs	r3, #14
 8008b84:	18fb      	adds	r3, r7, r3
 8008b86:	2200      	movs	r2, #0
 8008b88:	701a      	strb	r2, [r3, #0]
 8008b8a:	e037      	b.n	8008bfc <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008b8c:	230e      	movs	r3, #14
 8008b8e:	18fb      	adds	r3, r7, r3
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	18d3      	adds	r3, r2, r3
 8008b96:	7819      	ldrb	r1, [r3, #0]
 8008b98:	220f      	movs	r2, #15
 8008b9a:	18bb      	adds	r3, r7, r2
 8008b9c:	18ba      	adds	r2, r7, r2
 8008b9e:	7812      	ldrb	r2, [r2, #0]
 8008ba0:	404a      	eors	r2, r1
 8008ba2:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008ba4:	230d      	movs	r3, #13
 8008ba6:	18fb      	adds	r3, r7, r3
 8008ba8:	2200      	movs	r2, #0
 8008baa:	701a      	strb	r2, [r3, #0]
 8008bac:	e01b      	b.n	8008be6 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8008bae:	210f      	movs	r1, #15
 8008bb0:	187b      	adds	r3, r7, r1
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	b25b      	sxtb	r3, r3
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	da09      	bge.n	8008bce <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8008bba:	187b      	adds	r3, r7, r1
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	005b      	lsls	r3, r3, #1
 8008bc0:	b25b      	sxtb	r3, r3
 8008bc2:	2231      	movs	r2, #49	@ 0x31
 8008bc4:	4053      	eors	r3, r2
 8008bc6:	b25a      	sxtb	r2, r3
 8008bc8:	187b      	adds	r3, r7, r1
 8008bca:	701a      	strb	r2, [r3, #0]
 8008bcc:	e005      	b.n	8008bda <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8008bce:	230f      	movs	r3, #15
 8008bd0:	18fa      	adds	r2, r7, r3
 8008bd2:	18fb      	adds	r3, r7, r3
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	18db      	adds	r3, r3, r3
 8008bd8:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008bda:	210d      	movs	r1, #13
 8008bdc:	187b      	adds	r3, r7, r1
 8008bde:	781a      	ldrb	r2, [r3, #0]
 8008be0:	187b      	adds	r3, r7, r1
 8008be2:	3201      	adds	r2, #1
 8008be4:	701a      	strb	r2, [r3, #0]
 8008be6:	230d      	movs	r3, #13
 8008be8:	18fb      	adds	r3, r7, r3
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2b07      	cmp	r3, #7
 8008bee:	d9de      	bls.n	8008bae <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008bf0:	210e      	movs	r1, #14
 8008bf2:	187b      	adds	r3, r7, r1
 8008bf4:	781a      	ldrb	r2, [r3, #0]
 8008bf6:	187b      	adds	r3, r7, r1
 8008bf8:	3201      	adds	r2, #1
 8008bfa:	701a      	strb	r2, [r3, #0]
 8008bfc:	230e      	movs	r3, #14
 8008bfe:	18fa      	adds	r2, r7, r3
 8008c00:	1cfb      	adds	r3, r7, #3
 8008c02:	7812      	ldrb	r2, [r2, #0]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d3c0      	bcc.n	8008b8c <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8008c0a:	230f      	movs	r3, #15
 8008c0c:	18fb      	adds	r3, r7, r3
 8008c0e:	781b      	ldrb	r3, [r3, #0]
}
 8008c10:	0018      	movs	r0, r3
 8008c12:	46bd      	mov	sp, r7
 8008c14:	b004      	add	sp, #16
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8008c22:	4b0a      	ldr	r3, [pc, #40]	@ (8008c4c <HIDS_Init+0x34>)
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8008c28:	4b09      	ldr	r3, [pc, #36]	@ (8008c50 <HIDS_Init+0x38>)
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8008c2e:	4b09      	ldr	r3, [pc, #36]	@ (8008c54 <HIDS_Init+0x3c>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	0018      	movs	r0, r3
 8008c34:	f000 f8d0 	bl	8008dd8 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8008c38:	4b07      	ldr	r3, [pc, #28]	@ (8008c58 <HIDS_Init+0x40>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	0018      	movs	r0, r3
 8008c3e:	f000 f82b 	bl	8008c98 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8008c42:	46c0      	nop			@ (mov r8, r8)
 8008c44:	46bd      	mov	sp, r7
 8008c46:	b002      	add	sp, #8
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	46c0      	nop			@ (mov r8, r8)
 8008c4c:	20002868 	.word	0x20002868
 8008c50:	2000286c 	.word	0x2000286c
 8008c54:	20000142 	.word	0x20000142
 8008c58:	20000141 	.word	0x20000141

08008c5c <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8008c60:	f7ff ff0e 	bl	8008a80 <GetCurrentHalTicks>
 8008c64:	0002      	movs	r2, r0
 8008c66:	4b08      	ldr	r3, [pc, #32]	@ (8008c88 <HIDS_StartMeasurement+0x2c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	18d2      	adds	r2, r2, r3
 8008c6c:	4b07      	ldr	r3, [pc, #28]	@ (8008c8c <HIDS_StartMeasurement+0x30>)
 8008c6e:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8008c70:	4b07      	ldr	r3, [pc, #28]	@ (8008c90 <HIDS_StartMeasurement+0x34>)
 8008c72:	2201      	movs	r2, #1
 8008c74:	0019      	movs	r1, r3
 8008c76:	2044      	movs	r0, #68	@ 0x44
 8008c78:	f7ff ff5a 	bl	8008b30 <WriteRegister>
  MeasurementDone = false;
 8008c7c:	4b05      	ldr	r3, [pc, #20]	@ (8008c94 <HIDS_StartMeasurement+0x38>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	701a      	strb	r2, [r3, #0]
}
 8008c82:	46c0      	nop			@ (mov r8, r8)
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	20000148 	.word	0x20000148
 8008c8c:	20000144 	.word	0x20000144
 8008c90:	20000142 	.word	0x20000142
 8008c94:	2000287e 	.word	0x2000287e

08008c98 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	0002      	movs	r2, r0
 8008ca0:	1dfb      	adds	r3, r7, #7
 8008ca2:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8008ca4:	4b03      	ldr	r3, [pc, #12]	@ (8008cb4 <HIDS_SetHeaterMode+0x1c>)
 8008ca6:	1dfa      	adds	r2, r7, #7
 8008ca8:	7812      	ldrb	r2, [r2, #0]
 8008caa:	701a      	strb	r2, [r3, #0]
}
 8008cac:	46c0      	nop			@ (mov r8, r8)
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	b002      	add	sp, #8
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	20000141 	.word	0x20000141

08008cb8 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8008cb8:	b590      	push	{r4, r7, lr}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	781a      	ldrb	r2, [r3, #0]
 8008cc4:	210c      	movs	r1, #12
 8008cc6:	187b      	adds	r3, r7, r1
 8008cc8:	701a      	strb	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	785a      	ldrb	r2, [r3, #1]
 8008cce:	187b      	adds	r3, r7, r1
 8008cd0:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8008cd2:	240f      	movs	r4, #15
 8008cd4:	193b      	adds	r3, r7, r4
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	7892      	ldrb	r2, [r2, #2]
 8008cda:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8008cdc:	187b      	adds	r3, r7, r1
 8008cde:	2102      	movs	r1, #2
 8008ce0:	0018      	movs	r0, r3
 8008ce2:	f7ff ff43 	bl	8008b6c <CalculateCRC>
 8008ce6:	0003      	movs	r3, r0
 8008ce8:	001a      	movs	r2, r3
 8008cea:	193b      	adds	r3, r7, r4
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d007      	beq.n	8008d02 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8008cf2:	4a17      	ldr	r2, [pc, #92]	@ (8008d50 <CheckCRC+0x98>)
 8008cf4:	4b17      	ldr	r3, [pc, #92]	@ (8008d54 <CheckCRC+0x9c>)
 8008cf6:	0019      	movs	r1, r3
 8008cf8:	2001      	movs	r0, #1
 8008cfa:	f7ff fe35 	bl	8008968 <CreateLine>
		return false;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	e021      	b.n	8008d46 <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	78da      	ldrb	r2, [r3, #3]
 8008d06:	2108      	movs	r1, #8
 8008d08:	187b      	adds	r3, r7, r1
 8008d0a:	701a      	strb	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	791a      	ldrb	r2, [r3, #4]
 8008d10:	187b      	adds	r3, r7, r1
 8008d12:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8008d14:	240e      	movs	r4, #14
 8008d16:	193b      	adds	r3, r7, r4
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	7952      	ldrb	r2, [r2, #5]
 8008d1c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8008d1e:	187b      	adds	r3, r7, r1
 8008d20:	2102      	movs	r1, #2
 8008d22:	0018      	movs	r0, r3
 8008d24:	f7ff ff22 	bl	8008b6c <CalculateCRC>
 8008d28:	0003      	movs	r3, r0
 8008d2a:	001a      	movs	r2, r3
 8008d2c:	193b      	adds	r3, r7, r4
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d007      	beq.n	8008d44 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8008d34:	4a08      	ldr	r2, [pc, #32]	@ (8008d58 <CheckCRC+0xa0>)
 8008d36:	4b07      	ldr	r3, [pc, #28]	@ (8008d54 <CheckCRC+0x9c>)
 8008d38:	0019      	movs	r1, r3
 8008d3a:	2001      	movs	r0, #1
 8008d3c:	f7ff fe14 	bl	8008968 <CreateLine>
		return false;
 8008d40:	2300      	movs	r3, #0
 8008d42:	e000      	b.n	8008d46 <CheckCRC+0x8e>
	}
	return true;
 8008d44:	2301      	movs	r3, #1
}
 8008d46:	0018      	movs	r0, r3
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	b005      	add	sp, #20
 8008d4c:	bd90      	pop	{r4, r7, pc}
 8008d4e:	46c0      	nop			@ (mov r8, r8)
 8008d50:	08019fc8 	.word	0x08019fc8
 8008d54:	08019ff0 	.word	0x08019ff0
 8008d58:	08019ff4 	.word	0x08019ff4

08008d5c <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8008d62:	1dbb      	adds	r3, r7, #6
 8008d64:	2289      	movs	r2, #137	@ 0x89
 8008d66:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8008d68:	1dbb      	adds	r3, r7, #6
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	0019      	movs	r1, r3
 8008d6e:	2044      	movs	r0, #68	@ 0x44
 8008d70:	f7ff fede 	bl	8008b30 <WriteRegister>
	HAL_Delay(30);
 8008d74:	201e      	movs	r0, #30
 8008d76:	f000 f9f9 	bl	800916c <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8008d7a:	4b14      	ldr	r3, [pc, #80]	@ (8008dcc <HIDS_DeviceConnected+0x70>)
 8008d7c:	2206      	movs	r2, #6
 8008d7e:	0019      	movs	r1, r3
 8008d80:	2044      	movs	r0, #68	@ 0x44
 8008d82:	f7ff feb7 	bl	8008af4 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8008d86:	1dfb      	adds	r3, r7, #7
 8008d88:	2200      	movs	r2, #0
 8008d8a:	701a      	strb	r2, [r3, #0]
 8008d8c:	e011      	b.n	8008db2 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8008d8e:	1dfb      	adds	r3, r7, #7
 8008d90:	7818      	ldrb	r0, [r3, #0]
 8008d92:	1dfb      	adds	r3, r7, #7
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	4a0d      	ldr	r2, [pc, #52]	@ (8008dcc <HIDS_DeviceConnected+0x70>)
 8008d98:	5cd3      	ldrb	r3, [r2, r3]
 8008d9a:	4a0d      	ldr	r2, [pc, #52]	@ (8008dd0 <HIDS_DeviceConnected+0x74>)
 8008d9c:	490d      	ldr	r1, [pc, #52]	@ (8008dd4 <HIDS_DeviceConnected+0x78>)
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	0003      	movs	r3, r0
 8008da2:	2002      	movs	r0, #2
 8008da4:	f7ff fde0 	bl	8008968 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8008da8:	1dfb      	adds	r3, r7, #7
 8008daa:	781a      	ldrb	r2, [r3, #0]
 8008dac:	1dfb      	adds	r3, r7, #7
 8008dae:	3201      	adds	r2, #1
 8008db0:	701a      	strb	r2, [r3, #0]
 8008db2:	1dfb      	adds	r3, r7, #7
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	2b05      	cmp	r3, #5
 8008db8:	d9e9      	bls.n	8008d8e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8008dba:	4b04      	ldr	r3, [pc, #16]	@ (8008dcc <HIDS_DeviceConnected+0x70>)
 8008dbc:	0018      	movs	r0, r3
 8008dbe:	f7ff ff7b 	bl	8008cb8 <CheckCRC>
 8008dc2:	0003      	movs	r3, r0
}
 8008dc4:	0018      	movs	r0, r3
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	b002      	add	sp, #8
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	20002870 	.word	0x20002870
 8008dd0:	0801a020 	.word	0x0801a020
 8008dd4:	08019fc4 	.word	0x08019fc4

08008dd8 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	0002      	movs	r2, r0
 8008de0:	1dfb      	adds	r3, r7, #7
 8008de2:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8008de4:	4b03      	ldr	r3, [pc, #12]	@ (8008df4 <HIDS_SetMeasurementMode+0x1c>)
 8008de6:	1dfa      	adds	r2, r7, #7
 8008de8:	7812      	ldrb	r2, [r2, #0]
 8008dea:	701a      	strb	r2, [r3, #0]
}
 8008dec:	46c0      	nop			@ (mov r8, r8)
 8008dee:	46bd      	mov	sp, r7
 8008df0:	b002      	add	sp, #8
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	20000142 	.word	0x20000142

08008df8 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8008dfc:	4b04      	ldr	r3, [pc, #16]	@ (8008e10 <HIDS_MeasurementReady+0x18>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	0018      	movs	r0, r3
 8008e02:	f7ff fd5b 	bl	80088bc <TimestampIsReached>
 8008e06:	0003      	movs	r3, r0
}
 8008e08:	0018      	movs	r0, r3
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	46c0      	nop			@ (mov r8, r8)
 8008e10:	20000144 	.word	0x20000144

08008e14 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08c      	sub	sp, #48	@ 0x30
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 8008e1e:	4b7a      	ldr	r3, [pc, #488]	@ (8009008 <HIDS_GetMeasurementValues+0x1f4>)
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <HIDS_GetMeasurementValues+0x16>
 8008e26:	2301      	movs	r3, #1
 8008e28:	e0ea      	b.n	8009000 <HIDS_GetMeasurementValues+0x1ec>
  if(!HIDS_MeasurementReady()) return false;
 8008e2a:	f7ff ffe5 	bl	8008df8 <HIDS_MeasurementReady>
 8008e2e:	0003      	movs	r3, r0
 8008e30:	001a      	movs	r2, r3
 8008e32:	2301      	movs	r3, #1
 8008e34:	4053      	eors	r3, r2
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <HIDS_GetMeasurementValues+0x2c>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	e0df      	b.n	8009000 <HIDS_GetMeasurementValues+0x1ec>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8008e40:	4b72      	ldr	r3, [pc, #456]	@ (800900c <HIDS_GetMeasurementValues+0x1f8>)
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	4b72      	ldr	r3, [pc, #456]	@ (8009010 <HIDS_GetMeasurementValues+0x1fc>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	0019      	movs	r1, r3
 8008e4a:	0010      	movs	r0, r2
 8008e4c:	f7f7 f978 	bl	8000140 <__udivsi3>
 8008e50:	0003      	movs	r3, r0
 8008e52:	617b      	str	r3, [r7, #20]
  float currentTemperature;
  float currentHumidity;
  static float temperatures[HIDS_MAX_MEASUREMENTS];
  static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 8008e54:	4b6f      	ldr	r3, [pc, #444]	@ (8009014 <HIDS_GetMeasurementValues+0x200>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	1c58      	adds	r0, r3, #1
 8008e5a:	4a6f      	ldr	r2, [pc, #444]	@ (8009018 <HIDS_GetMeasurementValues+0x204>)
 8008e5c:	496f      	ldr	r1, [pc, #444]	@ (800901c <HIDS_GetMeasurementValues+0x208>)
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	9300      	str	r3, [sp, #0]
 8008e62:	0003      	movs	r3, r0
 8008e64:	2003      	movs	r0, #3
 8008e66:	f7ff fd7f 	bl	8008968 <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 8008e6a:	4b6d      	ldr	r3, [pc, #436]	@ (8009020 <HIDS_GetMeasurementValues+0x20c>)
 8008e6c:	2206      	movs	r2, #6
 8008e6e:	0019      	movs	r1, r3
 8008e70:	2044      	movs	r0, #68	@ 0x44
 8008e72:	f7ff fe3f 	bl	8008af4 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 8008e76:	4b6a      	ldr	r3, [pc, #424]	@ (8009020 <HIDS_GetMeasurementValues+0x20c>)
 8008e78:	0018      	movs	r0, r3
 8008e7a:	f7ff ff1d 	bl	8008cb8 <CheckCRC>
 8008e7e:	0003      	movs	r3, r0
 8008e80:	001a      	movs	r2, r3
 8008e82:	2301      	movs	r3, #1
 8008e84:	4053      	eors	r3, r2
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d011      	beq.n	8008eb0 <HIDS_GetMeasurementValues+0x9c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8008e8c:	2327      	movs	r3, #39	@ 0x27
 8008e8e:	18fb      	adds	r3, r7, r3
 8008e90:	2200      	movs	r2, #0
 8008e92:	701a      	strb	r2, [r3, #0]
 8008e94:	e005      	b.n	8008ea2 <HIDS_GetMeasurementValues+0x8e>
 8008e96:	2127      	movs	r1, #39	@ 0x27
 8008e98:	187b      	adds	r3, r7, r1
 8008e9a:	781a      	ldrb	r2, [r3, #0]
 8008e9c:	187b      	adds	r3, r7, r1
 8008e9e:	3201      	adds	r2, #1
 8008ea0:	701a      	strb	r2, [r3, #0]
 8008ea2:	2327      	movs	r3, #39	@ 0x27
 8008ea4:	18fb      	adds	r3, r7, r3
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	2b05      	cmp	r3, #5
 8008eaa:	d9f4      	bls.n	8008e96 <HIDS_GetMeasurementValues+0x82>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 8008eac:	2300      	movs	r3, #0
 8008eae:	e0a7      	b.n	8009000 <HIDS_GetMeasurementValues+0x1ec>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 8008eb0:	4b5b      	ldr	r3, [pc, #364]	@ (8009020 <HIDS_GetMeasurementValues+0x20c>)
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	021b      	lsls	r3, r3, #8
 8008eb6:	22af      	movs	r2, #175	@ 0xaf
 8008eb8:	4353      	muls	r3, r2
 8008eba:	4a59      	ldr	r2, [pc, #356]	@ (8009020 <HIDS_GetMeasurementValues+0x20c>)
 8008ebc:	7852      	ldrb	r2, [r2, #1]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	0018      	movs	r0, r3
 8008ec2:	f7fa f9fb 	bl	80032bc <__aeabi_i2d>
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	4b56      	ldr	r3, [pc, #344]	@ (8009024 <HIDS_GetMeasurementValues+0x210>)
 8008eca:	f7f8 fef1 	bl	8001cb0 <__aeabi_ddiv>
 8008ece:	0002      	movs	r2, r0
 8008ed0:	000b      	movs	r3, r1
 8008ed2:	0010      	movs	r0, r2
 8008ed4:	0019      	movs	r1, r3
 8008ed6:	f7fa fa8b 	bl	80033f0 <__aeabi_d2f>
 8008eda:	1c03      	adds	r3, r0, #0
 8008edc:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 8008ede:	4952      	ldr	r1, [pc, #328]	@ (8009028 <HIDS_GetMeasurementValues+0x214>)
 8008ee0:	6938      	ldr	r0, [r7, #16]
 8008ee2:	f7f8 f919 	bl	8001118 <__aeabi_fsub>
 8008ee6:	1c03      	adds	r3, r0, #0
 8008ee8:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8008eea:	4b4d      	ldr	r3, [pc, #308]	@ (8009020 <HIDS_GetMeasurementValues+0x20c>)
 8008eec:	78db      	ldrb	r3, [r3, #3]
 8008eee:	021b      	lsls	r3, r3, #8
 8008ef0:	4a4b      	ldr	r2, [pc, #300]	@ (8009020 <HIDS_GetMeasurementValues+0x20c>)
 8008ef2:	7912      	ldrb	r2, [r2, #4]
 8008ef4:	431a      	orrs	r2, r3
 8008ef6:	0013      	movs	r3, r2
 8008ef8:	015b      	lsls	r3, r3, #5
 8008efa:	1a9b      	subs	r3, r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	189b      	adds	r3, r3, r2
 8008f00:	0018      	movs	r0, r3
 8008f02:	f7fa f9db 	bl	80032bc <__aeabi_i2d>
 8008f06:	2200      	movs	r2, #0
 8008f08:	4b46      	ldr	r3, [pc, #280]	@ (8009024 <HIDS_GetMeasurementValues+0x210>)
 8008f0a:	f7f8 fed1 	bl	8001cb0 <__aeabi_ddiv>
 8008f0e:	0002      	movs	r2, r0
 8008f10:	000b      	movs	r3, r1
 8008f12:	0010      	movs	r0, r2
 8008f14:	0019      	movs	r1, r3
 8008f16:	f7fa fa6b 	bl	80033f0 <__aeabi_d2f>
 8008f1a:	1c03      	adds	r3, r0, #0
 8008f1c:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 8008f1e:	4943      	ldr	r1, [pc, #268]	@ (800902c <HIDS_GetMeasurementValues+0x218>)
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f7f8 f8f9 	bl	8001118 <__aeabi_fsub>
 8008f26:	1c03      	adds	r3, r0, #0
 8008f28:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 8008f2a:	4b3a      	ldr	r3, [pc, #232]	@ (8009014 <HIDS_GetMeasurementValues+0x200>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d910      	bls.n	8008f56 <HIDS_GetMeasurementValues+0x142>
	  temperatures[measurements] = currentTemperature;
 8008f34:	4b37      	ldr	r3, [pc, #220]	@ (8009014 <HIDS_GetMeasurementValues+0x200>)
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	4b3d      	ldr	r3, [pc, #244]	@ (8009030 <HIDS_GetMeasurementValues+0x21c>)
 8008f3a:	0092      	lsls	r2, r2, #2
 8008f3c:	6939      	ldr	r1, [r7, #16]
 8008f3e:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 8008f40:	4b34      	ldr	r3, [pc, #208]	@ (8009014 <HIDS_GetMeasurementValues+0x200>)
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	4b3b      	ldr	r3, [pc, #236]	@ (8009034 <HIDS_GetMeasurementValues+0x220>)
 8008f46:	0092      	lsls	r2, r2, #2
 8008f48:	68f9      	ldr	r1, [r7, #12]
 8008f4a:	50d1      	str	r1, [r2, r3]
	  measurements++;
 8008f4c:	4b31      	ldr	r3, [pc, #196]	@ (8009014 <HIDS_GetMeasurementValues+0x200>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	1c5a      	adds	r2, r3, #1
 8008f52:	4b30      	ldr	r3, [pc, #192]	@ (8009014 <HIDS_GetMeasurementValues+0x200>)
 8008f54:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 8008f56:	4b2f      	ldr	r3, [pc, #188]	@ (8009014 <HIDS_GetMeasurementValues+0x200>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	697a      	ldr	r2, [r7, #20]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d84c      	bhi.n	8008ffa <HIDS_GetMeasurementValues+0x1e6>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 8008f60:	2300      	movs	r3, #0
 8008f62:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 8008f64:	2300      	movs	r3, #0
 8008f66:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8008f68:	2300      	movs	r3, #0
 8008f6a:	61bb      	str	r3, [r7, #24]
 8008f6c:	e016      	b.n	8008f9c <HIDS_GetMeasurementValues+0x188>
        sumTemperature += temperatures[i];
 8008f6e:	4b30      	ldr	r3, [pc, #192]	@ (8009030 <HIDS_GetMeasurementValues+0x21c>)
 8008f70:	69ba      	ldr	r2, [r7, #24]
 8008f72:	0092      	lsls	r2, r2, #2
 8008f74:	58d3      	ldr	r3, [r2, r3]
 8008f76:	1c19      	adds	r1, r3, #0
 8008f78:	6a38      	ldr	r0, [r7, #32]
 8008f7a:	f7f7 fc1f 	bl	80007bc <__aeabi_fadd>
 8008f7e:	1c03      	adds	r3, r0, #0
 8008f80:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 8008f82:	4b2c      	ldr	r3, [pc, #176]	@ (8009034 <HIDS_GetMeasurementValues+0x220>)
 8008f84:	69ba      	ldr	r2, [r7, #24]
 8008f86:	0092      	lsls	r2, r2, #2
 8008f88:	58d3      	ldr	r3, [r2, r3]
 8008f8a:	1c19      	adds	r1, r3, #0
 8008f8c:	69f8      	ldr	r0, [r7, #28]
 8008f8e:	f7f7 fc15 	bl	80007bc <__aeabi_fadd>
 8008f92:	1c03      	adds	r3, r0, #0
 8008f94:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	61bb      	str	r3, [r7, #24]
 8008f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8009014 <HIDS_GetMeasurementValues+0x200>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	69ba      	ldr	r2, [r7, #24]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d3e3      	bcc.n	8008f6e <HIDS_GetMeasurementValues+0x15a>
    }

    *temperature = sumTemperature / measurements;
 8008fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8009014 <HIDS_GetMeasurementValues+0x200>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	0018      	movs	r0, r3
 8008fac:	f7f8 fada 	bl	8001564 <__aeabi_ui2f>
 8008fb0:	1c03      	adds	r3, r0, #0
 8008fb2:	1c19      	adds	r1, r3, #0
 8008fb4:	6a38      	ldr	r0, [r7, #32]
 8008fb6:	f7f7 fd8b 	bl	8000ad0 <__aeabi_fdiv>
 8008fba:	1c03      	adds	r3, r0, #0
 8008fbc:	1c1a      	adds	r2, r3, #0
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 8008fc2:	4b14      	ldr	r3, [pc, #80]	@ (8009014 <HIDS_GetMeasurementValues+0x200>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	0018      	movs	r0, r3
 8008fc8:	f7f8 facc 	bl	8001564 <__aeabi_ui2f>
 8008fcc:	1c03      	adds	r3, r0, #0
 8008fce:	1c19      	adds	r1, r3, #0
 8008fd0:	69f8      	ldr	r0, [r7, #28]
 8008fd2:	f7f7 fd7d 	bl	8000ad0 <__aeabi_fdiv>
 8008fd6:	1c03      	adds	r3, r0, #0
 8008fd8:	1c1a      	adds	r2, r3, #0
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	601a      	str	r2, [r3, #0]

    SGP_GetHT(temperature, humidity);
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	0011      	movs	r1, r2
 8008fe4:	0018      	movs	r0, r3
 8008fe6:	f7fe ffd5 	bl	8007f94 <SGP_GetHT>

    measurements = 0;
 8008fea:	4b0a      	ldr	r3, [pc, #40]	@ (8009014 <HIDS_GetMeasurementValues+0x200>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 8008ff0:	4b05      	ldr	r3, [pc, #20]	@ (8009008 <HIDS_GetMeasurementValues+0x1f4>)
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	701a      	strb	r2, [r3, #0]
    //Debug("HIDS measurement is done.");
    return true;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e002      	b.n	8009000 <HIDS_GetMeasurementValues+0x1ec>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 8008ffa:	f7ff fe2f 	bl	8008c5c <HIDS_StartMeasurement>
	return false;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	0018      	movs	r0, r3
 8009002:	46bd      	mov	sp, r7
 8009004:	b00a      	add	sp, #40	@ 0x28
 8009006:	bd80      	pop	{r7, pc}
 8009008:	2000287e 	.word	0x2000287e
 800900c:	2000014c 	.word	0x2000014c
 8009010:	20000148 	.word	0x20000148
 8009014:	20002880 	.word	0x20002880
 8009018:	0801a040 	.word	0x0801a040
 800901c:	0801a06c 	.word	0x0801a06c
 8009020:	20002878 	.word	0x20002878
 8009024:	40efffe0 	.word	0x40efffe0
 8009028:	42340000 	.word	0x42340000
 800902c:	40c00000 	.word	0x40c00000
 8009030:	20002884 	.word	0x20002884
 8009034:	20002c84 	.word	0x20002c84

08009038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8009038:	480d      	ldr	r0, [pc, #52]	@ (8009070 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800903a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800903c:	f7ff f958 	bl	80082f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009040:	480c      	ldr	r0, [pc, #48]	@ (8009074 <LoopForever+0x6>)
  ldr r1, =_edata
 8009042:	490d      	ldr	r1, [pc, #52]	@ (8009078 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009044:	4a0d      	ldr	r2, [pc, #52]	@ (800907c <LoopForever+0xe>)
  movs r3, #0
 8009046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009048:	e002      	b.n	8009050 <LoopCopyDataInit>

0800904a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800904a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800904c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800904e:	3304      	adds	r3, #4

08009050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009054:	d3f9      	bcc.n	800904a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009056:	4a0a      	ldr	r2, [pc, #40]	@ (8009080 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009058:	4c0a      	ldr	r4, [pc, #40]	@ (8009084 <LoopForever+0x16>)
  movs r3, #0
 800905a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800905c:	e001      	b.n	8009062 <LoopFillZerobss>

0800905e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800905e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009060:	3204      	adds	r2, #4

08009062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009064:	d3fb      	bcc.n	800905e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009066:	f00d fcab 	bl	80169c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800906a:	f7fc fc91 	bl	8005990 <main>

0800906e <LoopForever>:

LoopForever:
    b LoopForever
 800906e:	e7fe      	b.n	800906e <LoopForever>
   ldr   r0, =_estack
 8009070:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8009074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009078:	200004a8 	.word	0x200004a8
  ldr r2, =_sidata
 800907c:	0801a708 	.word	0x0801a708
  ldr r2, =_sbss
 8009080:	200004a8 	.word	0x200004a8
  ldr r4, =_ebss
 8009084:	200043b0 	.word	0x200043b0

08009088 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009088:	e7fe      	b.n	8009088 <ADC1_COMP_IRQHandler>
	...

0800908c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009092:	1dfb      	adds	r3, r7, #7
 8009094:	2200      	movs	r2, #0
 8009096:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8009098:	4b0b      	ldr	r3, [pc, #44]	@ (80090c8 <HAL_Init+0x3c>)
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	4b0a      	ldr	r3, [pc, #40]	@ (80090c8 <HAL_Init+0x3c>)
 800909e:	2140      	movs	r1, #64	@ 0x40
 80090a0:	430a      	orrs	r2, r1
 80090a2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80090a4:	2003      	movs	r0, #3
 80090a6:	f000 f811 	bl	80090cc <HAL_InitTick>
 80090aa:	1e03      	subs	r3, r0, #0
 80090ac:	d003      	beq.n	80090b6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80090ae:	1dfb      	adds	r3, r7, #7
 80090b0:	2201      	movs	r2, #1
 80090b2:	701a      	strb	r2, [r3, #0]
 80090b4:	e001      	b.n	80090ba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80090b6:	f7fe fff1 	bl	800809c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80090ba:	1dfb      	adds	r3, r7, #7
 80090bc:	781b      	ldrb	r3, [r3, #0]
}
 80090be:	0018      	movs	r0, r3
 80090c0:	46bd      	mov	sp, r7
 80090c2:	b002      	add	sp, #8
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	46c0      	nop			@ (mov r8, r8)
 80090c8:	40022000 	.word	0x40022000

080090cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80090cc:	b590      	push	{r4, r7, lr}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80090d4:	4b14      	ldr	r3, [pc, #80]	@ (8009128 <HAL_InitTick+0x5c>)
 80090d6:	681c      	ldr	r4, [r3, #0]
 80090d8:	4b14      	ldr	r3, [pc, #80]	@ (800912c <HAL_InitTick+0x60>)
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	0019      	movs	r1, r3
 80090de:	23fa      	movs	r3, #250	@ 0xfa
 80090e0:	0098      	lsls	r0, r3, #2
 80090e2:	f7f7 f82d 	bl	8000140 <__udivsi3>
 80090e6:	0003      	movs	r3, r0
 80090e8:	0019      	movs	r1, r3
 80090ea:	0020      	movs	r0, r4
 80090ec:	f7f7 f828 	bl	8000140 <__udivsi3>
 80090f0:	0003      	movs	r3, r0
 80090f2:	0018      	movs	r0, r3
 80090f4:	f000 fcad 	bl	8009a52 <HAL_SYSTICK_Config>
 80090f8:	1e03      	subs	r3, r0, #0
 80090fa:	d001      	beq.n	8009100 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e00f      	b.n	8009120 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b03      	cmp	r3, #3
 8009104:	d80b      	bhi.n	800911e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009106:	6879      	ldr	r1, [r7, #4]
 8009108:	2301      	movs	r3, #1
 800910a:	425b      	negs	r3, r3
 800910c:	2200      	movs	r2, #0
 800910e:	0018      	movs	r0, r3
 8009110:	f000 fc7a 	bl	8009a08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009114:	4b06      	ldr	r3, [pc, #24]	@ (8009130 <HAL_InitTick+0x64>)
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	e000      	b.n	8009120 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
}
 8009120:	0018      	movs	r0, r3
 8009122:	46bd      	mov	sp, r7
 8009124:	b003      	add	sp, #12
 8009126:	bd90      	pop	{r4, r7, pc}
 8009128:	2000013c 	.word	0x2000013c
 800912c:	20000154 	.word	0x20000154
 8009130:	20000150 	.word	0x20000150

08009134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009138:	4b05      	ldr	r3, [pc, #20]	@ (8009150 <HAL_IncTick+0x1c>)
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	001a      	movs	r2, r3
 800913e:	4b05      	ldr	r3, [pc, #20]	@ (8009154 <HAL_IncTick+0x20>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	18d2      	adds	r2, r2, r3
 8009144:	4b03      	ldr	r3, [pc, #12]	@ (8009154 <HAL_IncTick+0x20>)
 8009146:	601a      	str	r2, [r3, #0]
}
 8009148:	46c0      	nop			@ (mov r8, r8)
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	46c0      	nop			@ (mov r8, r8)
 8009150:	20000154 	.word	0x20000154
 8009154:	20003084 	.word	0x20003084

08009158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	af00      	add	r7, sp, #0
  return uwTick;
 800915c:	4b02      	ldr	r3, [pc, #8]	@ (8009168 <HAL_GetTick+0x10>)
 800915e:	681b      	ldr	r3, [r3, #0]
}
 8009160:	0018      	movs	r0, r3
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	46c0      	nop			@ (mov r8, r8)
 8009168:	20003084 	.word	0x20003084

0800916c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009174:	f7ff fff0 	bl	8009158 <HAL_GetTick>
 8009178:	0003      	movs	r3, r0
 800917a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	3301      	adds	r3, #1
 8009184:	d005      	beq.n	8009192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009186:	4b0a      	ldr	r3, [pc, #40]	@ (80091b0 <HAL_Delay+0x44>)
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	001a      	movs	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	189b      	adds	r3, r3, r2
 8009190:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009192:	46c0      	nop			@ (mov r8, r8)
 8009194:	f7ff ffe0 	bl	8009158 <HAL_GetTick>
 8009198:	0002      	movs	r2, r0
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d8f7      	bhi.n	8009194 <HAL_Delay+0x28>
  {
  }
}
 80091a4:	46c0      	nop			@ (mov r8, r8)
 80091a6:	46c0      	nop			@ (mov r8, r8)
 80091a8:	46bd      	mov	sp, r7
 80091aa:	b004      	add	sp, #16
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	46c0      	nop			@ (mov r8, r8)
 80091b0:	20000154 	.word	0x20000154

080091b4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e159      	b.n	800947a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10a      	bne.n	80091e4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2250      	movs	r2, #80	@ 0x50
 80091d8:	2100      	movs	r1, #0
 80091da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	0018      	movs	r0, r3
 80091e0:	f7fb ff0a 	bl	8004ff8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091e8:	2210      	movs	r2, #16
 80091ea:	4013      	ands	r3, r2
 80091ec:	2b10      	cmp	r3, #16
 80091ee:	d005      	beq.n	80091fc <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	2204      	movs	r2, #4
 80091f8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80091fa:	d00b      	beq.n	8009214 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009200:	2210      	movs	r2, #16
 8009202:	431a      	orrs	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2250      	movs	r2, #80	@ 0x50
 800920c:	2100      	movs	r1, #0
 800920e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e132      	b.n	800947a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009218:	4a9a      	ldr	r2, [pc, #616]	@ (8009484 <HAL_ADC_Init+0x2d0>)
 800921a:	4013      	ands	r3, r2
 800921c:	2202      	movs	r2, #2
 800921e:	431a      	orrs	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	2203      	movs	r2, #3
 800922c:	4013      	ands	r3, r2
 800922e:	2b01      	cmp	r3, #1
 8009230:	d108      	bne.n	8009244 <HAL_ADC_Init+0x90>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2201      	movs	r2, #1
 800923a:	4013      	ands	r3, r2
 800923c:	2b01      	cmp	r3, #1
 800923e:	d101      	bne.n	8009244 <HAL_ADC_Init+0x90>
 8009240:	2301      	movs	r3, #1
 8009242:	e000      	b.n	8009246 <HAL_ADC_Init+0x92>
 8009244:	2300      	movs	r3, #0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d149      	bne.n	80092de <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	685a      	ldr	r2, [r3, #4]
 800924e:	23c0      	movs	r3, #192	@ 0xc0
 8009250:	061b      	lsls	r3, r3, #24
 8009252:	429a      	cmp	r2, r3
 8009254:	d00b      	beq.n	800926e <HAL_ADC_Init+0xba>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	685a      	ldr	r2, [r3, #4]
 800925a:	2380      	movs	r3, #128	@ 0x80
 800925c:	05db      	lsls	r3, r3, #23
 800925e:	429a      	cmp	r2, r3
 8009260:	d005      	beq.n	800926e <HAL_ADC_Init+0xba>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	685a      	ldr	r2, [r3, #4]
 8009266:	2380      	movs	r3, #128	@ 0x80
 8009268:	061b      	lsls	r3, r3, #24
 800926a:	429a      	cmp	r2, r3
 800926c:	d111      	bne.n	8009292 <HAL_ADC_Init+0xde>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	691a      	ldr	r2, [r3, #16]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	0092      	lsls	r2, r2, #2
 800927a:	0892      	lsrs	r2, r2, #2
 800927c:	611a      	str	r2, [r3, #16]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	6919      	ldr	r1, [r3, #16]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	430a      	orrs	r2, r1
 800928e:	611a      	str	r2, [r3, #16]
 8009290:	e014      	b.n	80092bc <HAL_ADC_Init+0x108>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	691a      	ldr	r2, [r3, #16]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	0092      	lsls	r2, r2, #2
 800929e:	0892      	lsrs	r2, r2, #2
 80092a0:	611a      	str	r2, [r3, #16]
 80092a2:	4b79      	ldr	r3, [pc, #484]	@ (8009488 <HAL_ADC_Init+0x2d4>)
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	4b78      	ldr	r3, [pc, #480]	@ (8009488 <HAL_ADC_Init+0x2d4>)
 80092a8:	4978      	ldr	r1, [pc, #480]	@ (800948c <HAL_ADC_Init+0x2d8>)
 80092aa:	400a      	ands	r2, r1
 80092ac:	601a      	str	r2, [r3, #0]
 80092ae:	4b76      	ldr	r3, [pc, #472]	@ (8009488 <HAL_ADC_Init+0x2d4>)
 80092b0:	6819      	ldr	r1, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	4b74      	ldr	r3, [pc, #464]	@ (8009488 <HAL_ADC_Init+0x2d4>)
 80092b8:	430a      	orrs	r2, r1
 80092ba:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68da      	ldr	r2, [r3, #12]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2118      	movs	r1, #24
 80092c8:	438a      	bics	r2, r1
 80092ca:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68d9      	ldr	r1, [r3, #12]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	689a      	ldr	r2, [r3, #8]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	430a      	orrs	r2, r1
 80092dc:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80092de:	4b6a      	ldr	r3, [pc, #424]	@ (8009488 <HAL_ADC_Init+0x2d4>)
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	4b69      	ldr	r3, [pc, #420]	@ (8009488 <HAL_ADC_Init+0x2d4>)
 80092e4:	496a      	ldr	r1, [pc, #424]	@ (8009490 <HAL_ADC_Init+0x2dc>)
 80092e6:	400a      	ands	r2, r1
 80092e8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80092ea:	4b67      	ldr	r3, [pc, #412]	@ (8009488 <HAL_ADC_Init+0x2d4>)
 80092ec:	6819      	ldr	r1, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092f2:	065a      	lsls	r2, r3, #25
 80092f4:	4b64      	ldr	r3, [pc, #400]	@ (8009488 <HAL_ADC_Init+0x2d4>)
 80092f6:	430a      	orrs	r2, r1
 80092f8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689a      	ldr	r2, [r3, #8]
 8009300:	2380      	movs	r3, #128	@ 0x80
 8009302:	055b      	lsls	r3, r3, #21
 8009304:	4013      	ands	r3, r2
 8009306:	d108      	bne.n	800931a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689a      	ldr	r2, [r3, #8]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2180      	movs	r1, #128	@ 0x80
 8009314:	0549      	lsls	r1, r1, #21
 8009316:	430a      	orrs	r2, r1
 8009318:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68da      	ldr	r2, [r3, #12]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	495b      	ldr	r1, [pc, #364]	@ (8009494 <HAL_ADC_Init+0x2e0>)
 8009326:	400a      	ands	r2, r1
 8009328:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68d9      	ldr	r1, [r3, #12]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	2b02      	cmp	r3, #2
 800933a:	d101      	bne.n	8009340 <HAL_ADC_Init+0x18c>
 800933c:	2304      	movs	r3, #4
 800933e:	e000      	b.n	8009342 <HAL_ADC_Init+0x18e>
 8009340:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8009342:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2020      	movs	r0, #32
 8009348:	5c1b      	ldrb	r3, [r3, r0]
 800934a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800934c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	202c      	movs	r0, #44	@ 0x2c
 8009352:	5c1b      	ldrb	r3, [r3, r0]
 8009354:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8009356:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800935c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8009364:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	69db      	ldr	r3, [r3, #28]
 800936a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800936c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	430a      	orrs	r2, r1
 8009374:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800937a:	23c2      	movs	r3, #194	@ 0xc2
 800937c:	33ff      	adds	r3, #255	@ 0xff
 800937e:	429a      	cmp	r2, r3
 8009380:	d00b      	beq.n	800939a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68d9      	ldr	r1, [r3, #12]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8009390:	431a      	orrs	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	430a      	orrs	r2, r1
 8009398:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2221      	movs	r2, #33	@ 0x21
 800939e:	5c9b      	ldrb	r3, [r3, r2]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d11a      	bne.n	80093da <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2220      	movs	r2, #32
 80093a8:	5c9b      	ldrb	r3, [r3, r2]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d109      	bne.n	80093c2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68da      	ldr	r2, [r3, #12]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2180      	movs	r1, #128	@ 0x80
 80093ba:	0249      	lsls	r1, r1, #9
 80093bc:	430a      	orrs	r2, r1
 80093be:	60da      	str	r2, [r3, #12]
 80093c0:	e00b      	b.n	80093da <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093c6:	2220      	movs	r2, #32
 80093c8:	431a      	orrs	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093d2:	2201      	movs	r2, #1
 80093d4:	431a      	orrs	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d11f      	bne.n	8009422 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	691a      	ldr	r2, [r3, #16]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	492a      	ldr	r1, [pc, #168]	@ (8009498 <HAL_ADC_Init+0x2e4>)
 80093ee:	400a      	ands	r2, r1
 80093f0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6919      	ldr	r1, [r3, #16]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8009400:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8009406:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	430a      	orrs	r2, r1
 800940e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	691a      	ldr	r2, [r3, #16]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2101      	movs	r1, #1
 800941c:	430a      	orrs	r2, r1
 800941e:	611a      	str	r2, [r3, #16]
 8009420:	e00e      	b.n	8009440 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	2201      	movs	r2, #1
 800942a:	4013      	ands	r3, r2
 800942c:	2b01      	cmp	r3, #1
 800942e:	d107      	bne.n	8009440 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	691a      	ldr	r2, [r3, #16]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2101      	movs	r1, #1
 800943c:	438a      	bics	r2, r1
 800943e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	695a      	ldr	r2, [r3, #20]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2107      	movs	r1, #7
 800944c:	438a      	bics	r2, r1
 800944e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6959      	ldr	r1, [r3, #20]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	430a      	orrs	r2, r1
 8009460:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2200      	movs	r2, #0
 8009466:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800946c:	2203      	movs	r2, #3
 800946e:	4393      	bics	r3, r2
 8009470:	2201      	movs	r2, #1
 8009472:	431a      	orrs	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	0018      	movs	r0, r3
 800947c:	46bd      	mov	sp, r7
 800947e:	b002      	add	sp, #8
 8009480:	bd80      	pop	{r7, pc}
 8009482:	46c0      	nop			@ (mov r8, r8)
 8009484:	fffffefd 	.word	0xfffffefd
 8009488:	40012708 	.word	0x40012708
 800948c:	ffc3ffff 	.word	0xffc3ffff
 8009490:	fdffffff 	.word	0xfdffffff
 8009494:	fffe0219 	.word	0xfffe0219
 8009498:	fffffc03 	.word	0xfffffc03

0800949c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800949c:	b590      	push	{r4, r7, lr}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80094a4:	230f      	movs	r3, #15
 80094a6:	18fb      	adds	r3, r7, r3
 80094a8:	2200      	movs	r2, #0
 80094aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	2204      	movs	r2, #4
 80094b4:	4013      	ands	r3, r2
 80094b6:	d138      	bne.n	800952a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2250      	movs	r2, #80	@ 0x50
 80094bc:	5c9b      	ldrb	r3, [r3, r2]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d101      	bne.n	80094c6 <HAL_ADC_Start+0x2a>
 80094c2:	2302      	movs	r3, #2
 80094c4:	e038      	b.n	8009538 <HAL_ADC_Start+0x9c>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2250      	movs	r2, #80	@ 0x50
 80094ca:	2101      	movs	r1, #1
 80094cc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	69db      	ldr	r3, [r3, #28]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d007      	beq.n	80094e6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80094d6:	230f      	movs	r3, #15
 80094d8:	18fc      	adds	r4, r7, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	0018      	movs	r0, r3
 80094de:	f000 f95f 	bl	80097a0 <ADC_Enable>
 80094e2:	0003      	movs	r3, r0
 80094e4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80094e6:	230f      	movs	r3, #15
 80094e8:	18fb      	adds	r3, r7, r3
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d120      	bne.n	8009532 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094f4:	4a12      	ldr	r2, [pc, #72]	@ (8009540 <HAL_ADC_Start+0xa4>)
 80094f6:	4013      	ands	r3, r2
 80094f8:	2280      	movs	r2, #128	@ 0x80
 80094fa:	0052      	lsls	r2, r2, #1
 80094fc:	431a      	orrs	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2250      	movs	r2, #80	@ 0x50
 800950c:	2100      	movs	r1, #0
 800950e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	221c      	movs	r2, #28
 8009516:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689a      	ldr	r2, [r3, #8]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2104      	movs	r1, #4
 8009524:	430a      	orrs	r2, r1
 8009526:	609a      	str	r2, [r3, #8]
 8009528:	e003      	b.n	8009532 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800952a:	230f      	movs	r3, #15
 800952c:	18fb      	adds	r3, r7, r3
 800952e:	2202      	movs	r2, #2
 8009530:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8009532:	230f      	movs	r3, #15
 8009534:	18fb      	adds	r3, r7, r3
 8009536:	781b      	ldrb	r3, [r3, #0]
}
 8009538:	0018      	movs	r0, r3
 800953a:	46bd      	mov	sp, r7
 800953c:	b005      	add	sp, #20
 800953e:	bd90      	pop	{r4, r7, pc}
 8009540:	fffff0fe 	.word	0xfffff0fe

08009544 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8009552:	2300      	movs	r3, #0
 8009554:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	695b      	ldr	r3, [r3, #20]
 800955a:	2b08      	cmp	r3, #8
 800955c:	d102      	bne.n	8009564 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800955e:	2308      	movs	r3, #8
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	e014      	b.n	800958e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	2201      	movs	r2, #1
 800956c:	4013      	ands	r3, r2
 800956e:	2b01      	cmp	r3, #1
 8009570:	d10b      	bne.n	800958a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009576:	2220      	movs	r2, #32
 8009578:	431a      	orrs	r2, r3
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2250      	movs	r2, #80	@ 0x50
 8009582:	2100      	movs	r1, #0
 8009584:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e072      	b.n	8009670 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800958a:	230c      	movs	r3, #12
 800958c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800958e:	f7ff fde3 	bl	8009158 <HAL_GetTick>
 8009592:	0003      	movs	r3, r0
 8009594:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8009596:	e01f      	b.n	80095d8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	3301      	adds	r3, #1
 800959c:	d01c      	beq.n	80095d8 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d007      	beq.n	80095b4 <HAL_ADC_PollForConversion+0x70>
 80095a4:	f7ff fdd8 	bl	8009158 <HAL_GetTick>
 80095a8:	0002      	movs	r2, r0
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d211      	bcs.n	80095d8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	4013      	ands	r3, r2
 80095be:	d10b      	bne.n	80095d8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095c4:	2204      	movs	r2, #4
 80095c6:	431a      	orrs	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2250      	movs	r2, #80	@ 0x50
 80095d0:	2100      	movs	r1, #0
 80095d2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	e04b      	b.n	8009670 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	4013      	ands	r3, r2
 80095e2:	d0d9      	beq.n	8009598 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095e8:	2280      	movs	r2, #128	@ 0x80
 80095ea:	0092      	lsls	r2, r2, #2
 80095ec:	431a      	orrs	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68da      	ldr	r2, [r3, #12]
 80095f8:	23c0      	movs	r3, #192	@ 0xc0
 80095fa:	011b      	lsls	r3, r3, #4
 80095fc:	4013      	ands	r3, r2
 80095fe:	d12e      	bne.n	800965e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2220      	movs	r2, #32
 8009604:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8009606:	2b00      	cmp	r3, #0
 8009608:	d129      	bne.n	800965e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2208      	movs	r2, #8
 8009612:	4013      	ands	r3, r2
 8009614:	2b08      	cmp	r3, #8
 8009616:	d122      	bne.n	800965e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	2204      	movs	r2, #4
 8009620:	4013      	ands	r3, r2
 8009622:	d110      	bne.n	8009646 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685a      	ldr	r2, [r3, #4]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	210c      	movs	r1, #12
 8009630:	438a      	bics	r2, r1
 8009632:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009638:	4a0f      	ldr	r2, [pc, #60]	@ (8009678 <HAL_ADC_PollForConversion+0x134>)
 800963a:	4013      	ands	r3, r2
 800963c:	2201      	movs	r2, #1
 800963e:	431a      	orrs	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	655a      	str	r2, [r3, #84]	@ 0x54
 8009644:	e00b      	b.n	800965e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800964a:	2220      	movs	r2, #32
 800964c:	431a      	orrs	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009656:	2201      	movs	r2, #1
 8009658:	431a      	orrs	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d103      	bne.n	800966e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	220c      	movs	r2, #12
 800966c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	0018      	movs	r0, r3
 8009672:	46bd      	mov	sp, r7
 8009674:	b004      	add	sp, #16
 8009676:	bd80      	pop	{r7, pc}
 8009678:	fffffefe 	.word	0xfffffefe

0800967c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800968a:	0018      	movs	r0, r3
 800968c:	46bd      	mov	sp, r7
 800968e:	b002      	add	sp, #8
 8009690:	bd80      	pop	{r7, pc}
	...

08009694 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2250      	movs	r2, #80	@ 0x50
 80096a2:	5c9b      	ldrb	r3, [r3, r2]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d101      	bne.n	80096ac <HAL_ADC_ConfigChannel+0x18>
 80096a8:	2302      	movs	r3, #2
 80096aa:	e06c      	b.n	8009786 <HAL_ADC_ConfigChannel+0xf2>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2250      	movs	r2, #80	@ 0x50
 80096b0:	2101      	movs	r1, #1
 80096b2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	2204      	movs	r2, #4
 80096bc:	4013      	ands	r3, r2
 80096be:	d00b      	beq.n	80096d8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096c4:	2220      	movs	r2, #32
 80096c6:	431a      	orrs	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2250      	movs	r2, #80	@ 0x50
 80096d0:	2100      	movs	r1, #0
 80096d2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	e056      	b.n	8009786 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	4a2c      	ldr	r2, [pc, #176]	@ (8009790 <HAL_ADC_ConfigChannel+0xfc>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d028      	beq.n	8009734 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	035b      	lsls	r3, r3, #13
 80096ee:	0b5a      	lsrs	r2, r3, #13
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	430a      	orrs	r2, r1
 80096f6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	2380      	movs	r3, #128	@ 0x80
 80096fe:	02db      	lsls	r3, r3, #11
 8009700:	4013      	ands	r3, r2
 8009702:	d009      	beq.n	8009718 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8009704:	4b23      	ldr	r3, [pc, #140]	@ (8009794 <HAL_ADC_ConfigChannel+0x100>)
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	4b22      	ldr	r3, [pc, #136]	@ (8009794 <HAL_ADC_ConfigChannel+0x100>)
 800970a:	2180      	movs	r1, #128	@ 0x80
 800970c:	0409      	lsls	r1, r1, #16
 800970e:	430a      	orrs	r2, r1
 8009710:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8009712:	200a      	movs	r0, #10
 8009714:	f000 f8ac 	bl	8009870 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	2380      	movs	r3, #128	@ 0x80
 800971e:	029b      	lsls	r3, r3, #10
 8009720:	4013      	ands	r3, r2
 8009722:	d02b      	beq.n	800977c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8009724:	4b1b      	ldr	r3, [pc, #108]	@ (8009794 <HAL_ADC_ConfigChannel+0x100>)
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	4b1a      	ldr	r3, [pc, #104]	@ (8009794 <HAL_ADC_ConfigChannel+0x100>)
 800972a:	2180      	movs	r1, #128	@ 0x80
 800972c:	03c9      	lsls	r1, r1, #15
 800972e:	430a      	orrs	r2, r1
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	e023      	b.n	800977c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	035b      	lsls	r3, r3, #13
 8009740:	0b5b      	lsrs	r3, r3, #13
 8009742:	43d9      	mvns	r1, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	400a      	ands	r2, r1
 800974a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	2380      	movs	r3, #128	@ 0x80
 8009752:	02db      	lsls	r3, r3, #11
 8009754:	4013      	ands	r3, r2
 8009756:	d005      	beq.n	8009764 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8009758:	4b0e      	ldr	r3, [pc, #56]	@ (8009794 <HAL_ADC_ConfigChannel+0x100>)
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	4b0d      	ldr	r3, [pc, #52]	@ (8009794 <HAL_ADC_ConfigChannel+0x100>)
 800975e:	490e      	ldr	r1, [pc, #56]	@ (8009798 <HAL_ADC_ConfigChannel+0x104>)
 8009760:	400a      	ands	r2, r1
 8009762:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	2380      	movs	r3, #128	@ 0x80
 800976a:	029b      	lsls	r3, r3, #10
 800976c:	4013      	ands	r3, r2
 800976e:	d005      	beq.n	800977c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8009770:	4b08      	ldr	r3, [pc, #32]	@ (8009794 <HAL_ADC_ConfigChannel+0x100>)
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	4b07      	ldr	r3, [pc, #28]	@ (8009794 <HAL_ADC_ConfigChannel+0x100>)
 8009776:	4909      	ldr	r1, [pc, #36]	@ (800979c <HAL_ADC_ConfigChannel+0x108>)
 8009778:	400a      	ands	r2, r1
 800977a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2250      	movs	r2, #80	@ 0x50
 8009780:	2100      	movs	r1, #0
 8009782:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	0018      	movs	r0, r3
 8009788:	46bd      	mov	sp, r7
 800978a:	b002      	add	sp, #8
 800978c:	bd80      	pop	{r7, pc}
 800978e:	46c0      	nop			@ (mov r8, r8)
 8009790:	00001001 	.word	0x00001001
 8009794:	40012708 	.word	0x40012708
 8009798:	ff7fffff 	.word	0xff7fffff
 800979c:	ffbfffff 	.word	0xffbfffff

080097a0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80097a8:	2300      	movs	r3, #0
 80097aa:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	2203      	movs	r2, #3
 80097b4:	4013      	ands	r3, r2
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d108      	bne.n	80097cc <ADC_Enable+0x2c>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2201      	movs	r2, #1
 80097c2:	4013      	ands	r3, r2
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d101      	bne.n	80097cc <ADC_Enable+0x2c>
 80097c8:	2301      	movs	r3, #1
 80097ca:	e000      	b.n	80097ce <ADC_Enable+0x2e>
 80097cc:	2300      	movs	r3, #0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d146      	bne.n	8009860 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	4a24      	ldr	r2, [pc, #144]	@ (800986c <ADC_Enable+0xcc>)
 80097da:	4013      	ands	r3, r2
 80097dc:	d00d      	beq.n	80097fa <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097e2:	2210      	movs	r2, #16
 80097e4:	431a      	orrs	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097ee:	2201      	movs	r2, #1
 80097f0:	431a      	orrs	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e033      	b.n	8009862 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	689a      	ldr	r2, [r3, #8]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2101      	movs	r1, #1
 8009806:	430a      	orrs	r2, r1
 8009808:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800980a:	2001      	movs	r0, #1
 800980c:	f000 f830 	bl	8009870 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8009810:	f7ff fca2 	bl	8009158 <HAL_GetTick>
 8009814:	0003      	movs	r3, r0
 8009816:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009818:	e01b      	b.n	8009852 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800981a:	f7ff fc9d 	bl	8009158 <HAL_GetTick>
 800981e:	0002      	movs	r2, r0
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	1ad3      	subs	r3, r2, r3
 8009824:	2b0a      	cmp	r3, #10
 8009826:	d914      	bls.n	8009852 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2201      	movs	r2, #1
 8009830:	4013      	ands	r3, r2
 8009832:	2b01      	cmp	r3, #1
 8009834:	d00d      	beq.n	8009852 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800983a:	2210      	movs	r2, #16
 800983c:	431a      	orrs	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009846:	2201      	movs	r2, #1
 8009848:	431a      	orrs	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e007      	b.n	8009862 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2201      	movs	r2, #1
 800985a:	4013      	ands	r3, r2
 800985c:	2b01      	cmp	r3, #1
 800985e:	d1dc      	bne.n	800981a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	0018      	movs	r0, r3
 8009864:	46bd      	mov	sp, r7
 8009866:	b004      	add	sp, #16
 8009868:	bd80      	pop	{r7, pc}
 800986a:	46c0      	nop			@ (mov r8, r8)
 800986c:	80000017 	.word	0x80000017

08009870 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8009878:	4b0b      	ldr	r3, [pc, #44]	@ (80098a8 <ADC_DelayMicroSecond+0x38>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	490b      	ldr	r1, [pc, #44]	@ (80098ac <ADC_DelayMicroSecond+0x3c>)
 800987e:	0018      	movs	r0, r3
 8009880:	f7f6 fc5e 	bl	8000140 <__udivsi3>
 8009884:	0003      	movs	r3, r0
 8009886:	001a      	movs	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4353      	muls	r3, r2
 800988c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800988e:	e002      	b.n	8009896 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	3b01      	subs	r3, #1
 8009894:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1f9      	bne.n	8009890 <ADC_DelayMicroSecond+0x20>
  }
}
 800989c:	46c0      	nop			@ (mov r8, r8)
 800989e:	46c0      	nop			@ (mov r8, r8)
 80098a0:	46bd      	mov	sp, r7
 80098a2:	b004      	add	sp, #16
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	46c0      	nop			@ (mov r8, r8)
 80098a8:	2000013c 	.word	0x2000013c
 80098ac:	000f4240 	.word	0x000f4240

080098b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	0002      	movs	r2, r0
 80098b8:	1dfb      	adds	r3, r7, #7
 80098ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80098bc:	1dfb      	adds	r3, r7, #7
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80098c2:	d809      	bhi.n	80098d8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098c4:	1dfb      	adds	r3, r7, #7
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	001a      	movs	r2, r3
 80098ca:	231f      	movs	r3, #31
 80098cc:	401a      	ands	r2, r3
 80098ce:	4b04      	ldr	r3, [pc, #16]	@ (80098e0 <__NVIC_EnableIRQ+0x30>)
 80098d0:	2101      	movs	r1, #1
 80098d2:	4091      	lsls	r1, r2
 80098d4:	000a      	movs	r2, r1
 80098d6:	601a      	str	r2, [r3, #0]
  }
}
 80098d8:	46c0      	nop			@ (mov r8, r8)
 80098da:	46bd      	mov	sp, r7
 80098dc:	b002      	add	sp, #8
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	e000e100 	.word	0xe000e100

080098e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80098e4:	b590      	push	{r4, r7, lr}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	0002      	movs	r2, r0
 80098ec:	6039      	str	r1, [r7, #0]
 80098ee:	1dfb      	adds	r3, r7, #7
 80098f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80098f2:	1dfb      	adds	r3, r7, #7
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80098f8:	d828      	bhi.n	800994c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80098fa:	4a2f      	ldr	r2, [pc, #188]	@ (80099b8 <__NVIC_SetPriority+0xd4>)
 80098fc:	1dfb      	adds	r3, r7, #7
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	b25b      	sxtb	r3, r3
 8009902:	089b      	lsrs	r3, r3, #2
 8009904:	33c0      	adds	r3, #192	@ 0xc0
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	589b      	ldr	r3, [r3, r2]
 800990a:	1dfa      	adds	r2, r7, #7
 800990c:	7812      	ldrb	r2, [r2, #0]
 800990e:	0011      	movs	r1, r2
 8009910:	2203      	movs	r2, #3
 8009912:	400a      	ands	r2, r1
 8009914:	00d2      	lsls	r2, r2, #3
 8009916:	21ff      	movs	r1, #255	@ 0xff
 8009918:	4091      	lsls	r1, r2
 800991a:	000a      	movs	r2, r1
 800991c:	43d2      	mvns	r2, r2
 800991e:	401a      	ands	r2, r3
 8009920:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	019b      	lsls	r3, r3, #6
 8009926:	22ff      	movs	r2, #255	@ 0xff
 8009928:	401a      	ands	r2, r3
 800992a:	1dfb      	adds	r3, r7, #7
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	0018      	movs	r0, r3
 8009930:	2303      	movs	r3, #3
 8009932:	4003      	ands	r3, r0
 8009934:	00db      	lsls	r3, r3, #3
 8009936:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009938:	481f      	ldr	r0, [pc, #124]	@ (80099b8 <__NVIC_SetPriority+0xd4>)
 800993a:	1dfb      	adds	r3, r7, #7
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	b25b      	sxtb	r3, r3
 8009940:	089b      	lsrs	r3, r3, #2
 8009942:	430a      	orrs	r2, r1
 8009944:	33c0      	adds	r3, #192	@ 0xc0
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800994a:	e031      	b.n	80099b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800994c:	4a1b      	ldr	r2, [pc, #108]	@ (80099bc <__NVIC_SetPriority+0xd8>)
 800994e:	1dfb      	adds	r3, r7, #7
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	0019      	movs	r1, r3
 8009954:	230f      	movs	r3, #15
 8009956:	400b      	ands	r3, r1
 8009958:	3b08      	subs	r3, #8
 800995a:	089b      	lsrs	r3, r3, #2
 800995c:	3306      	adds	r3, #6
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	18d3      	adds	r3, r2, r3
 8009962:	3304      	adds	r3, #4
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	1dfa      	adds	r2, r7, #7
 8009968:	7812      	ldrb	r2, [r2, #0]
 800996a:	0011      	movs	r1, r2
 800996c:	2203      	movs	r2, #3
 800996e:	400a      	ands	r2, r1
 8009970:	00d2      	lsls	r2, r2, #3
 8009972:	21ff      	movs	r1, #255	@ 0xff
 8009974:	4091      	lsls	r1, r2
 8009976:	000a      	movs	r2, r1
 8009978:	43d2      	mvns	r2, r2
 800997a:	401a      	ands	r2, r3
 800997c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	019b      	lsls	r3, r3, #6
 8009982:	22ff      	movs	r2, #255	@ 0xff
 8009984:	401a      	ands	r2, r3
 8009986:	1dfb      	adds	r3, r7, #7
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	0018      	movs	r0, r3
 800998c:	2303      	movs	r3, #3
 800998e:	4003      	ands	r3, r0
 8009990:	00db      	lsls	r3, r3, #3
 8009992:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009994:	4809      	ldr	r0, [pc, #36]	@ (80099bc <__NVIC_SetPriority+0xd8>)
 8009996:	1dfb      	adds	r3, r7, #7
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	001c      	movs	r4, r3
 800999c:	230f      	movs	r3, #15
 800999e:	4023      	ands	r3, r4
 80099a0:	3b08      	subs	r3, #8
 80099a2:	089b      	lsrs	r3, r3, #2
 80099a4:	430a      	orrs	r2, r1
 80099a6:	3306      	adds	r3, #6
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	18c3      	adds	r3, r0, r3
 80099ac:	3304      	adds	r3, #4
 80099ae:	601a      	str	r2, [r3, #0]
}
 80099b0:	46c0      	nop			@ (mov r8, r8)
 80099b2:	46bd      	mov	sp, r7
 80099b4:	b003      	add	sp, #12
 80099b6:	bd90      	pop	{r4, r7, pc}
 80099b8:	e000e100 	.word	0xe000e100
 80099bc:	e000ed00 	.word	0xe000ed00

080099c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	1e5a      	subs	r2, r3, #1
 80099cc:	2380      	movs	r3, #128	@ 0x80
 80099ce:	045b      	lsls	r3, r3, #17
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d301      	bcc.n	80099d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80099d4:	2301      	movs	r3, #1
 80099d6:	e010      	b.n	80099fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80099d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009a04 <SysTick_Config+0x44>)
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	3a01      	subs	r2, #1
 80099de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80099e0:	2301      	movs	r3, #1
 80099e2:	425b      	negs	r3, r3
 80099e4:	2103      	movs	r1, #3
 80099e6:	0018      	movs	r0, r3
 80099e8:	f7ff ff7c 	bl	80098e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80099ec:	4b05      	ldr	r3, [pc, #20]	@ (8009a04 <SysTick_Config+0x44>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80099f2:	4b04      	ldr	r3, [pc, #16]	@ (8009a04 <SysTick_Config+0x44>)
 80099f4:	2207      	movs	r2, #7
 80099f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	0018      	movs	r0, r3
 80099fc:	46bd      	mov	sp, r7
 80099fe:	b002      	add	sp, #8
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	46c0      	nop			@ (mov r8, r8)
 8009a04:	e000e010 	.word	0xe000e010

08009a08 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60b9      	str	r1, [r7, #8]
 8009a10:	607a      	str	r2, [r7, #4]
 8009a12:	210f      	movs	r1, #15
 8009a14:	187b      	adds	r3, r7, r1
 8009a16:	1c02      	adds	r2, r0, #0
 8009a18:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	187b      	adds	r3, r7, r1
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	b25b      	sxtb	r3, r3
 8009a22:	0011      	movs	r1, r2
 8009a24:	0018      	movs	r0, r3
 8009a26:	f7ff ff5d 	bl	80098e4 <__NVIC_SetPriority>
}
 8009a2a:	46c0      	nop			@ (mov r8, r8)
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	b004      	add	sp, #16
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b082      	sub	sp, #8
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	0002      	movs	r2, r0
 8009a3a:	1dfb      	adds	r3, r7, #7
 8009a3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009a3e:	1dfb      	adds	r3, r7, #7
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	b25b      	sxtb	r3, r3
 8009a44:	0018      	movs	r0, r3
 8009a46:	f7ff ff33 	bl	80098b0 <__NVIC_EnableIRQ>
}
 8009a4a:	46c0      	nop			@ (mov r8, r8)
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	b002      	add	sp, #8
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b082      	sub	sp, #8
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	0018      	movs	r0, r3
 8009a5e:	f7ff ffaf 	bl	80099c0 <SysTick_Config>
 8009a62:	0003      	movs	r3, r0
}
 8009a64:	0018      	movs	r0, r3
 8009a66:	46bd      	mov	sp, r7
 8009a68:	b002      	add	sp, #8
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d101      	bne.n	8009a7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e061      	b.n	8009b42 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a32      	ldr	r2, [pc, #200]	@ (8009b4c <HAL_DMA_Init+0xe0>)
 8009a84:	4694      	mov	ip, r2
 8009a86:	4463      	add	r3, ip
 8009a88:	2114      	movs	r1, #20
 8009a8a:	0018      	movs	r0, r3
 8009a8c:	f7f6 fb58 	bl	8000140 <__udivsi3>
 8009a90:	0003      	movs	r3, r0
 8009a92:	009a      	lsls	r2, r3, #2
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a2d      	ldr	r2, [pc, #180]	@ (8009b50 <HAL_DMA_Init+0xe4>)
 8009a9c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2225      	movs	r2, #37	@ 0x25
 8009aa2:	2102      	movs	r1, #2
 8009aa4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	4a28      	ldr	r2, [pc, #160]	@ (8009b54 <HAL_DMA_Init+0xe8>)
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009ad6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6a1b      	ldr	r3, [r3, #32]
 8009adc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	689a      	ldr	r2, [r3, #8]
 8009af0:	2380      	movs	r3, #128	@ 0x80
 8009af2:	01db      	lsls	r3, r3, #7
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d018      	beq.n	8009b2a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009af8:	4b17      	ldr	r3, [pc, #92]	@ (8009b58 <HAL_DMA_Init+0xec>)
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b00:	211c      	movs	r1, #28
 8009b02:	400b      	ands	r3, r1
 8009b04:	210f      	movs	r1, #15
 8009b06:	4099      	lsls	r1, r3
 8009b08:	000b      	movs	r3, r1
 8009b0a:	43d9      	mvns	r1, r3
 8009b0c:	4b12      	ldr	r3, [pc, #72]	@ (8009b58 <HAL_DMA_Init+0xec>)
 8009b0e:	400a      	ands	r2, r1
 8009b10:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009b12:	4b11      	ldr	r3, [pc, #68]	@ (8009b58 <HAL_DMA_Init+0xec>)
 8009b14:	6819      	ldr	r1, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b1e:	201c      	movs	r0, #28
 8009b20:	4003      	ands	r3, r0
 8009b22:	409a      	lsls	r2, r3
 8009b24:	4b0c      	ldr	r3, [pc, #48]	@ (8009b58 <HAL_DMA_Init+0xec>)
 8009b26:	430a      	orrs	r2, r1
 8009b28:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2225      	movs	r2, #37	@ 0x25
 8009b34:	2101      	movs	r1, #1
 8009b36:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2224      	movs	r2, #36	@ 0x24
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	0018      	movs	r0, r3
 8009b44:	46bd      	mov	sp, r7
 8009b46:	b004      	add	sp, #16
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	46c0      	nop			@ (mov r8, r8)
 8009b4c:	bffdfff8 	.word	0xbffdfff8
 8009b50:	40020000 	.word	0x40020000
 8009b54:	ffff800f 	.word	0xffff800f
 8009b58:	400200a8 	.word	0x400200a8

08009b5c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d101      	bne.n	8009b6e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e04a      	b.n	8009c04 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2101      	movs	r1, #1
 8009b7a:	438a      	bics	r2, r1
 8009b7c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a22      	ldr	r2, [pc, #136]	@ (8009c0c <HAL_DMA_DeInit+0xb0>)
 8009b84:	4694      	mov	ip, r2
 8009b86:	4463      	add	r3, ip
 8009b88:	2114      	movs	r1, #20
 8009b8a:	0018      	movs	r0, r3
 8009b8c:	f7f6 fad8 	bl	8000140 <__udivsi3>
 8009b90:	0003      	movs	r3, r0
 8009b92:	009a      	lsls	r2, r3, #2
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8009c10 <HAL_DMA_DeInit+0xb4>)
 8009b9c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009baa:	221c      	movs	r2, #28
 8009bac:	401a      	ands	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bb2:	2101      	movs	r1, #1
 8009bb4:	4091      	lsls	r1, r2
 8009bb6:	000a      	movs	r2, r1
 8009bb8:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009bba:	4b16      	ldr	r3, [pc, #88]	@ (8009c14 <HAL_DMA_DeInit+0xb8>)
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bc2:	211c      	movs	r1, #28
 8009bc4:	400b      	ands	r3, r1
 8009bc6:	210f      	movs	r1, #15
 8009bc8:	4099      	lsls	r1, r3
 8009bca:	000b      	movs	r3, r1
 8009bcc:	43d9      	mvns	r1, r3
 8009bce:	4b11      	ldr	r3, [pc, #68]	@ (8009c14 <HAL_DMA_DeInit+0xb8>)
 8009bd0:	400a      	ands	r2, r1
 8009bd2:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2225      	movs	r2, #37	@ 0x25
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2224      	movs	r2, #36	@ 0x24
 8009bfe:	2100      	movs	r1, #0
 8009c00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	0018      	movs	r0, r3
 8009c06:	46bd      	mov	sp, r7
 8009c08:	b002      	add	sp, #8
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	bffdfff8 	.word	0xbffdfff8
 8009c10:	40020000 	.word	0x40020000
 8009c14:	400200a8 	.word	0x400200a8

08009c18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	607a      	str	r2, [r7, #4]
 8009c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c26:	2317      	movs	r3, #23
 8009c28:	18fb      	adds	r3, r7, r3
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2224      	movs	r2, #36	@ 0x24
 8009c32:	5c9b      	ldrb	r3, [r3, r2]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d101      	bne.n	8009c3c <HAL_DMA_Start_IT+0x24>
 8009c38:	2302      	movs	r3, #2
 8009c3a:	e04f      	b.n	8009cdc <HAL_DMA_Start_IT+0xc4>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2224      	movs	r2, #36	@ 0x24
 8009c40:	2101      	movs	r1, #1
 8009c42:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2225      	movs	r2, #37	@ 0x25
 8009c48:	5c9b      	ldrb	r3, [r3, r2]
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d13a      	bne.n	8009cc6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2225      	movs	r2, #37	@ 0x25
 8009c54:	2102      	movs	r1, #2
 8009c56:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2101      	movs	r1, #1
 8009c6a:	438a      	bics	r2, r1
 8009c6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	68b9      	ldr	r1, [r7, #8]
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f000 f976 	bl	8009f66 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d008      	beq.n	8009c94 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	210e      	movs	r1, #14
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	e00f      	b.n	8009cb4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2104      	movs	r1, #4
 8009ca0:	438a      	bics	r2, r1
 8009ca2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	210a      	movs	r1, #10
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2101      	movs	r1, #1
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	e007      	b.n	8009cd6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2224      	movs	r2, #36	@ 0x24
 8009cca:	2100      	movs	r1, #0
 8009ccc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8009cce:	2317      	movs	r3, #23
 8009cd0:	18fb      	adds	r3, r7, r3
 8009cd2:	2202      	movs	r2, #2
 8009cd4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8009cd6:	2317      	movs	r3, #23
 8009cd8:	18fb      	adds	r3, r7, r3
 8009cda:	781b      	ldrb	r3, [r3, #0]
}
 8009cdc:	0018      	movs	r0, r3
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	b006      	add	sp, #24
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cec:	230f      	movs	r3, #15
 8009cee:	18fb      	adds	r3, r7, r3
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2225      	movs	r2, #37	@ 0x25
 8009cf8:	5c9b      	ldrb	r3, [r3, r2]
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d008      	beq.n	8009d12 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2204      	movs	r2, #4
 8009d04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2224      	movs	r2, #36	@ 0x24
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e024      	b.n	8009d5c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	210e      	movs	r1, #14
 8009d1e:	438a      	bics	r2, r1
 8009d20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2101      	movs	r1, #1
 8009d2e:	438a      	bics	r2, r1
 8009d30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d36:	221c      	movs	r2, #28
 8009d38:	401a      	ands	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d3e:	2101      	movs	r1, #1
 8009d40:	4091      	lsls	r1, r2
 8009d42:	000a      	movs	r2, r1
 8009d44:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2225      	movs	r2, #37	@ 0x25
 8009d4a:	2101      	movs	r1, #1
 8009d4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2224      	movs	r2, #36	@ 0x24
 8009d52:	2100      	movs	r1, #0
 8009d54:	5499      	strb	r1, [r3, r2]

    return status;
 8009d56:	230f      	movs	r3, #15
 8009d58:	18fb      	adds	r3, r7, r3
 8009d5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d5c:	0018      	movs	r0, r3
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	b004      	add	sp, #16
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d6c:	210f      	movs	r1, #15
 8009d6e:	187b      	adds	r3, r7, r1
 8009d70:	2200      	movs	r2, #0
 8009d72:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2225      	movs	r2, #37	@ 0x25
 8009d78:	5c9b      	ldrb	r3, [r3, r2]
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d006      	beq.n	8009d8e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2204      	movs	r2, #4
 8009d84:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8009d86:	187b      	adds	r3, r7, r1
 8009d88:	2201      	movs	r2, #1
 8009d8a:	701a      	strb	r2, [r3, #0]
 8009d8c:	e02a      	b.n	8009de4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	210e      	movs	r1, #14
 8009d9a:	438a      	bics	r2, r1
 8009d9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2101      	movs	r1, #1
 8009daa:	438a      	bics	r2, r1
 8009dac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009db2:	221c      	movs	r2, #28
 8009db4:	401a      	ands	r2, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dba:	2101      	movs	r1, #1
 8009dbc:	4091      	lsls	r1, r2
 8009dbe:	000a      	movs	r2, r1
 8009dc0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2225      	movs	r2, #37	@ 0x25
 8009dc6:	2101      	movs	r1, #1
 8009dc8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2224      	movs	r2, #36	@ 0x24
 8009dce:	2100      	movs	r1, #0
 8009dd0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d004      	beq.n	8009de4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	0010      	movs	r0, r2
 8009de2:	4798      	blx	r3
    }
  }
  return status;
 8009de4:	230f      	movs	r3, #15
 8009de6:	18fb      	adds	r3, r7, r3
 8009de8:	781b      	ldrb	r3, [r3, #0]
}
 8009dea:	0018      	movs	r0, r3
 8009dec:	46bd      	mov	sp, r7
 8009dee:	b004      	add	sp, #16
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b084      	sub	sp, #16
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e0e:	221c      	movs	r2, #28
 8009e10:	4013      	ands	r3, r2
 8009e12:	2204      	movs	r2, #4
 8009e14:	409a      	lsls	r2, r3
 8009e16:	0013      	movs	r3, r2
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	d026      	beq.n	8009e6c <HAL_DMA_IRQHandler+0x7a>
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	2204      	movs	r2, #4
 8009e22:	4013      	ands	r3, r2
 8009e24:	d022      	beq.n	8009e6c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2220      	movs	r2, #32
 8009e2e:	4013      	ands	r3, r2
 8009e30:	d107      	bne.n	8009e42 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2104      	movs	r1, #4
 8009e3e:	438a      	bics	r2, r1
 8009e40:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e46:	221c      	movs	r2, #28
 8009e48:	401a      	ands	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e4e:	2104      	movs	r1, #4
 8009e50:	4091      	lsls	r1, r2
 8009e52:	000a      	movs	r2, r1
 8009e54:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d100      	bne.n	8009e60 <HAL_DMA_IRQHandler+0x6e>
 8009e5e:	e071      	b.n	8009f44 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	0010      	movs	r0, r2
 8009e68:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8009e6a:	e06b      	b.n	8009f44 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e70:	221c      	movs	r2, #28
 8009e72:	4013      	ands	r3, r2
 8009e74:	2202      	movs	r2, #2
 8009e76:	409a      	lsls	r2, r3
 8009e78:	0013      	movs	r3, r2
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	d02d      	beq.n	8009edc <HAL_DMA_IRQHandler+0xea>
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2202      	movs	r2, #2
 8009e84:	4013      	ands	r3, r2
 8009e86:	d029      	beq.n	8009edc <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2220      	movs	r2, #32
 8009e90:	4013      	ands	r3, r2
 8009e92:	d10b      	bne.n	8009eac <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	210a      	movs	r1, #10
 8009ea0:	438a      	bics	r2, r1
 8009ea2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2225      	movs	r2, #37	@ 0x25
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eb0:	221c      	movs	r2, #28
 8009eb2:	401a      	ands	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eb8:	2102      	movs	r1, #2
 8009eba:	4091      	lsls	r1, r2
 8009ebc:	000a      	movs	r2, r1
 8009ebe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2224      	movs	r2, #36	@ 0x24
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d039      	beq.n	8009f44 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	0010      	movs	r0, r2
 8009ed8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009eda:	e033      	b.n	8009f44 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ee0:	221c      	movs	r2, #28
 8009ee2:	4013      	ands	r3, r2
 8009ee4:	2208      	movs	r2, #8
 8009ee6:	409a      	lsls	r2, r3
 8009ee8:	0013      	movs	r3, r2
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	4013      	ands	r3, r2
 8009eee:	d02a      	beq.n	8009f46 <HAL_DMA_IRQHandler+0x154>
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	2208      	movs	r2, #8
 8009ef4:	4013      	ands	r3, r2
 8009ef6:	d026      	beq.n	8009f46 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	210e      	movs	r1, #14
 8009f04:	438a      	bics	r2, r1
 8009f06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f0c:	221c      	movs	r2, #28
 8009f0e:	401a      	ands	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f14:	2101      	movs	r1, #1
 8009f16:	4091      	lsls	r1, r2
 8009f18:	000a      	movs	r2, r1
 8009f1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2225      	movs	r2, #37	@ 0x25
 8009f26:	2101      	movs	r1, #1
 8009f28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2224      	movs	r2, #36	@ 0x24
 8009f2e:	2100      	movs	r1, #0
 8009f30:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d005      	beq.n	8009f46 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	0010      	movs	r0, r2
 8009f42:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009f44:	46c0      	nop			@ (mov r8, r8)
 8009f46:	46c0      	nop			@ (mov r8, r8)
}
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	b004      	add	sp, #16
 8009f4c:	bd80      	pop	{r7, pc}

08009f4e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b082      	sub	sp, #8
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2225      	movs	r2, #37	@ 0x25
 8009f5a:	5c9b      	ldrb	r3, [r3, r2]
 8009f5c:	b2db      	uxtb	r3, r3
}
 8009f5e:	0018      	movs	r0, r3
 8009f60:	46bd      	mov	sp, r7
 8009f62:	b002      	add	sp, #8
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b084      	sub	sp, #16
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	60f8      	str	r0, [r7, #12]
 8009f6e:	60b9      	str	r1, [r7, #8]
 8009f70:	607a      	str	r2, [r7, #4]
 8009f72:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f78:	221c      	movs	r2, #28
 8009f7a:	401a      	ands	r2, r3
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f80:	2101      	movs	r1, #1
 8009f82:	4091      	lsls	r1, r2
 8009f84:	000a      	movs	r2, r1
 8009f86:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	2b10      	cmp	r3, #16
 8009f96:	d108      	bne.n	8009faa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009fa8:	e007      	b.n	8009fba <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	60da      	str	r2, [r3, #12]
}
 8009fba:	46c0      	nop			@ (mov r8, r8)
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	b004      	add	sp, #16
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b086      	sub	sp, #24
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8009fda:	e155      	b.n	800a288 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	4091      	lsls	r1, r2
 8009fe6:	000a      	movs	r2, r1
 8009fe8:	4013      	ands	r3, r2
 8009fea:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d100      	bne.n	8009ff4 <HAL_GPIO_Init+0x30>
 8009ff2:	e146      	b.n	800a282 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	2203      	movs	r2, #3
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d005      	beq.n	800a00c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	2203      	movs	r2, #3
 800a006:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d130      	bne.n	800a06e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	005b      	lsls	r3, r3, #1
 800a016:	2203      	movs	r2, #3
 800a018:	409a      	lsls	r2, r3
 800a01a:	0013      	movs	r3, r2
 800a01c:	43da      	mvns	r2, r3
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	4013      	ands	r3, r2
 800a022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	68da      	ldr	r2, [r3, #12]
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	005b      	lsls	r3, r3, #1
 800a02c:	409a      	lsls	r2, r3
 800a02e:	0013      	movs	r3, r2
 800a030:	693a      	ldr	r2, [r7, #16]
 800a032:	4313      	orrs	r3, r2
 800a034:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a042:	2201      	movs	r2, #1
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	409a      	lsls	r2, r3
 800a048:	0013      	movs	r3, r2
 800a04a:	43da      	mvns	r2, r3
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	4013      	ands	r3, r2
 800a050:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	091b      	lsrs	r3, r3, #4
 800a058:	2201      	movs	r2, #1
 800a05a:	401a      	ands	r2, r3
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	409a      	lsls	r2, r3
 800a060:	0013      	movs	r3, r2
 800a062:	693a      	ldr	r2, [r7, #16]
 800a064:	4313      	orrs	r3, r2
 800a066:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	693a      	ldr	r2, [r7, #16]
 800a06c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	2203      	movs	r2, #3
 800a074:	4013      	ands	r3, r2
 800a076:	2b03      	cmp	r3, #3
 800a078:	d017      	beq.n	800a0aa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	005b      	lsls	r3, r3, #1
 800a084:	2203      	movs	r2, #3
 800a086:	409a      	lsls	r2, r3
 800a088:	0013      	movs	r3, r2
 800a08a:	43da      	mvns	r2, r3
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	4013      	ands	r3, r2
 800a090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	689a      	ldr	r2, [r3, #8]
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	005b      	lsls	r3, r3, #1
 800a09a:	409a      	lsls	r2, r3
 800a09c:	0013      	movs	r3, r2
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	2203      	movs	r2, #3
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d123      	bne.n	800a0fe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	08da      	lsrs	r2, r3, #3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	3208      	adds	r2, #8
 800a0be:	0092      	lsls	r2, r2, #2
 800a0c0:	58d3      	ldr	r3, [r2, r3]
 800a0c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	2207      	movs	r2, #7
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	220f      	movs	r2, #15
 800a0ce:	409a      	lsls	r2, r3
 800a0d0:	0013      	movs	r3, r2
 800a0d2:	43da      	mvns	r2, r3
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	4013      	ands	r3, r2
 800a0d8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	691a      	ldr	r2, [r3, #16]
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	2107      	movs	r1, #7
 800a0e2:	400b      	ands	r3, r1
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	409a      	lsls	r2, r3
 800a0e8:	0013      	movs	r3, r2
 800a0ea:	693a      	ldr	r2, [r7, #16]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	08da      	lsrs	r2, r3, #3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	3208      	adds	r2, #8
 800a0f8:	0092      	lsls	r2, r2, #2
 800a0fa:	6939      	ldr	r1, [r7, #16]
 800a0fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	005b      	lsls	r3, r3, #1
 800a108:	2203      	movs	r2, #3
 800a10a:	409a      	lsls	r2, r3
 800a10c:	0013      	movs	r3, r2
 800a10e:	43da      	mvns	r2, r3
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	4013      	ands	r3, r2
 800a114:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	2203      	movs	r2, #3
 800a11c:	401a      	ands	r2, r3
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	005b      	lsls	r3, r3, #1
 800a122:	409a      	lsls	r2, r3
 800a124:	0013      	movs	r3, r2
 800a126:	693a      	ldr	r2, [r7, #16]
 800a128:	4313      	orrs	r3, r2
 800a12a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	693a      	ldr	r2, [r7, #16]
 800a130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	23c0      	movs	r3, #192	@ 0xc0
 800a138:	029b      	lsls	r3, r3, #10
 800a13a:	4013      	ands	r3, r2
 800a13c:	d100      	bne.n	800a140 <HAL_GPIO_Init+0x17c>
 800a13e:	e0a0      	b.n	800a282 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a140:	4b57      	ldr	r3, [pc, #348]	@ (800a2a0 <HAL_GPIO_Init+0x2dc>)
 800a142:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a144:	4b56      	ldr	r3, [pc, #344]	@ (800a2a0 <HAL_GPIO_Init+0x2dc>)
 800a146:	2101      	movs	r1, #1
 800a148:	430a      	orrs	r2, r1
 800a14a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800a14c:	4a55      	ldr	r2, [pc, #340]	@ (800a2a4 <HAL_GPIO_Init+0x2e0>)
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	089b      	lsrs	r3, r3, #2
 800a152:	3302      	adds	r3, #2
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	589b      	ldr	r3, [r3, r2]
 800a158:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2203      	movs	r2, #3
 800a15e:	4013      	ands	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	220f      	movs	r2, #15
 800a164:	409a      	lsls	r2, r3
 800a166:	0013      	movs	r3, r2
 800a168:	43da      	mvns	r2, r3
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	4013      	ands	r3, r2
 800a16e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	23a0      	movs	r3, #160	@ 0xa0
 800a174:	05db      	lsls	r3, r3, #23
 800a176:	429a      	cmp	r2, r3
 800a178:	d01f      	beq.n	800a1ba <HAL_GPIO_Init+0x1f6>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4a4a      	ldr	r2, [pc, #296]	@ (800a2a8 <HAL_GPIO_Init+0x2e4>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d019      	beq.n	800a1b6 <HAL_GPIO_Init+0x1f2>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a49      	ldr	r2, [pc, #292]	@ (800a2ac <HAL_GPIO_Init+0x2e8>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d013      	beq.n	800a1b2 <HAL_GPIO_Init+0x1ee>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a48      	ldr	r2, [pc, #288]	@ (800a2b0 <HAL_GPIO_Init+0x2ec>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d00d      	beq.n	800a1ae <HAL_GPIO_Init+0x1ea>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a47      	ldr	r2, [pc, #284]	@ (800a2b4 <HAL_GPIO_Init+0x2f0>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d007      	beq.n	800a1aa <HAL_GPIO_Init+0x1e6>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a46      	ldr	r2, [pc, #280]	@ (800a2b8 <HAL_GPIO_Init+0x2f4>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d101      	bne.n	800a1a6 <HAL_GPIO_Init+0x1e2>
 800a1a2:	2305      	movs	r3, #5
 800a1a4:	e00a      	b.n	800a1bc <HAL_GPIO_Init+0x1f8>
 800a1a6:	2306      	movs	r3, #6
 800a1a8:	e008      	b.n	800a1bc <HAL_GPIO_Init+0x1f8>
 800a1aa:	2304      	movs	r3, #4
 800a1ac:	e006      	b.n	800a1bc <HAL_GPIO_Init+0x1f8>
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e004      	b.n	800a1bc <HAL_GPIO_Init+0x1f8>
 800a1b2:	2302      	movs	r3, #2
 800a1b4:	e002      	b.n	800a1bc <HAL_GPIO_Init+0x1f8>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e000      	b.n	800a1bc <HAL_GPIO_Init+0x1f8>
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	2103      	movs	r1, #3
 800a1c0:	400a      	ands	r2, r1
 800a1c2:	0092      	lsls	r2, r2, #2
 800a1c4:	4093      	lsls	r3, r2
 800a1c6:	693a      	ldr	r2, [r7, #16]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a1cc:	4935      	ldr	r1, [pc, #212]	@ (800a2a4 <HAL_GPIO_Init+0x2e0>)
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	089b      	lsrs	r3, r3, #2
 800a1d2:	3302      	adds	r3, #2
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a1da:	4b38      	ldr	r3, [pc, #224]	@ (800a2bc <HAL_GPIO_Init+0x2f8>)
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	43da      	mvns	r2, r3
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	685a      	ldr	r2, [r3, #4]
 800a1ee:	2380      	movs	r3, #128	@ 0x80
 800a1f0:	035b      	lsls	r3, r3, #13
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	d003      	beq.n	800a1fe <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800a1fe:	4b2f      	ldr	r3, [pc, #188]	@ (800a2bc <HAL_GPIO_Init+0x2f8>)
 800a200:	693a      	ldr	r2, [r7, #16]
 800a202:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800a204:	4b2d      	ldr	r3, [pc, #180]	@ (800a2bc <HAL_GPIO_Init+0x2f8>)
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	43da      	mvns	r2, r3
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	4013      	ands	r3, r2
 800a212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	685a      	ldr	r2, [r3, #4]
 800a218:	2380      	movs	r3, #128	@ 0x80
 800a21a:	039b      	lsls	r3, r3, #14
 800a21c:	4013      	ands	r3, r2
 800a21e:	d003      	beq.n	800a228 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800a220:	693a      	ldr	r2, [r7, #16]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	4313      	orrs	r3, r2
 800a226:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800a228:	4b24      	ldr	r3, [pc, #144]	@ (800a2bc <HAL_GPIO_Init+0x2f8>)
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800a22e:	4b23      	ldr	r3, [pc, #140]	@ (800a2bc <HAL_GPIO_Init+0x2f8>)
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	43da      	mvns	r2, r3
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	4013      	ands	r3, r2
 800a23c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	685a      	ldr	r2, [r3, #4]
 800a242:	2380      	movs	r3, #128	@ 0x80
 800a244:	029b      	lsls	r3, r3, #10
 800a246:	4013      	ands	r3, r2
 800a248:	d003      	beq.n	800a252 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800a24a:	693a      	ldr	r2, [r7, #16]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4313      	orrs	r3, r2
 800a250:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800a252:	4b1a      	ldr	r3, [pc, #104]	@ (800a2bc <HAL_GPIO_Init+0x2f8>)
 800a254:	693a      	ldr	r2, [r7, #16]
 800a256:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a258:	4b18      	ldr	r3, [pc, #96]	@ (800a2bc <HAL_GPIO_Init+0x2f8>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	43da      	mvns	r2, r3
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	4013      	ands	r3, r2
 800a266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	2380      	movs	r3, #128	@ 0x80
 800a26e:	025b      	lsls	r3, r3, #9
 800a270:	4013      	ands	r3, r2
 800a272:	d003      	beq.n	800a27c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	4313      	orrs	r3, r2
 800a27a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800a27c:	4b0f      	ldr	r3, [pc, #60]	@ (800a2bc <HAL_GPIO_Init+0x2f8>)
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	3301      	adds	r3, #1
 800a286:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	40da      	lsrs	r2, r3
 800a290:	1e13      	subs	r3, r2, #0
 800a292:	d000      	beq.n	800a296 <HAL_GPIO_Init+0x2d2>
 800a294:	e6a2      	b.n	8009fdc <HAL_GPIO_Init+0x18>
  }
}
 800a296:	46c0      	nop			@ (mov r8, r8)
 800a298:	46c0      	nop			@ (mov r8, r8)
 800a29a:	46bd      	mov	sp, r7
 800a29c:	b006      	add	sp, #24
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	40021000 	.word	0x40021000
 800a2a4:	40010000 	.word	0x40010000
 800a2a8:	50000400 	.word	0x50000400
 800a2ac:	50000800 	.word	0x50000800
 800a2b0:	50000c00 	.word	0x50000c00
 800a2b4:	50001000 	.word	0x50001000
 800a2b8:	50001c00 	.word	0x50001c00
 800a2bc:	40010400 	.word	0x40010400

0800a2c0 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800a2d6:	e0bc      	b.n	800a452 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800a2d8:	2201      	movs	r2, #1
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	409a      	lsls	r2, r3
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d100      	bne.n	800a2ec <HAL_GPIO_DeInit+0x2c>
 800a2ea:	e0af      	b.n	800a44c <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800a2ec:	4a5e      	ldr	r2, [pc, #376]	@ (800a468 <HAL_GPIO_DeInit+0x1a8>)
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	089b      	lsrs	r3, r3, #2
 800a2f2:	3302      	adds	r3, #2
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	589b      	ldr	r3, [r3, r2]
 800a2f8:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	2203      	movs	r2, #3
 800a2fe:	4013      	ands	r3, r2
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	220f      	movs	r2, #15
 800a304:	409a      	lsls	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	4013      	ands	r3, r2
 800a30a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	23a0      	movs	r3, #160	@ 0xa0
 800a310:	05db      	lsls	r3, r3, #23
 800a312:	429a      	cmp	r2, r3
 800a314:	d01f      	beq.n	800a356 <HAL_GPIO_DeInit+0x96>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a54      	ldr	r2, [pc, #336]	@ (800a46c <HAL_GPIO_DeInit+0x1ac>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d019      	beq.n	800a352 <HAL_GPIO_DeInit+0x92>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a53      	ldr	r2, [pc, #332]	@ (800a470 <HAL_GPIO_DeInit+0x1b0>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d013      	beq.n	800a34e <HAL_GPIO_DeInit+0x8e>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4a52      	ldr	r2, [pc, #328]	@ (800a474 <HAL_GPIO_DeInit+0x1b4>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d00d      	beq.n	800a34a <HAL_GPIO_DeInit+0x8a>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a51      	ldr	r2, [pc, #324]	@ (800a478 <HAL_GPIO_DeInit+0x1b8>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d007      	beq.n	800a346 <HAL_GPIO_DeInit+0x86>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a50      	ldr	r2, [pc, #320]	@ (800a47c <HAL_GPIO_DeInit+0x1bc>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d101      	bne.n	800a342 <HAL_GPIO_DeInit+0x82>
 800a33e:	2305      	movs	r3, #5
 800a340:	e00a      	b.n	800a358 <HAL_GPIO_DeInit+0x98>
 800a342:	2306      	movs	r3, #6
 800a344:	e008      	b.n	800a358 <HAL_GPIO_DeInit+0x98>
 800a346:	2304      	movs	r3, #4
 800a348:	e006      	b.n	800a358 <HAL_GPIO_DeInit+0x98>
 800a34a:	2303      	movs	r3, #3
 800a34c:	e004      	b.n	800a358 <HAL_GPIO_DeInit+0x98>
 800a34e:	2302      	movs	r3, #2
 800a350:	e002      	b.n	800a358 <HAL_GPIO_DeInit+0x98>
 800a352:	2301      	movs	r3, #1
 800a354:	e000      	b.n	800a358 <HAL_GPIO_DeInit+0x98>
 800a356:	2300      	movs	r3, #0
 800a358:	697a      	ldr	r2, [r7, #20]
 800a35a:	2103      	movs	r1, #3
 800a35c:	400a      	ands	r2, r1
 800a35e:	0092      	lsls	r2, r2, #2
 800a360:	4093      	lsls	r3, r2
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	429a      	cmp	r2, r3
 800a366:	d132      	bne.n	800a3ce <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a368:	4b45      	ldr	r3, [pc, #276]	@ (800a480 <HAL_GPIO_DeInit+0x1c0>)
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	43d9      	mvns	r1, r3
 800a370:	4b43      	ldr	r3, [pc, #268]	@ (800a480 <HAL_GPIO_DeInit+0x1c0>)
 800a372:	400a      	ands	r2, r1
 800a374:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a376:	4b42      	ldr	r3, [pc, #264]	@ (800a480 <HAL_GPIO_DeInit+0x1c0>)
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	43d9      	mvns	r1, r3
 800a37e:	4b40      	ldr	r3, [pc, #256]	@ (800a480 <HAL_GPIO_DeInit+0x1c0>)
 800a380:	400a      	ands	r2, r1
 800a382:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a384:	4b3e      	ldr	r3, [pc, #248]	@ (800a480 <HAL_GPIO_DeInit+0x1c0>)
 800a386:	68da      	ldr	r2, [r3, #12]
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	43d9      	mvns	r1, r3
 800a38c:	4b3c      	ldr	r3, [pc, #240]	@ (800a480 <HAL_GPIO_DeInit+0x1c0>)
 800a38e:	400a      	ands	r2, r1
 800a390:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a392:	4b3b      	ldr	r3, [pc, #236]	@ (800a480 <HAL_GPIO_DeInit+0x1c0>)
 800a394:	689a      	ldr	r2, [r3, #8]
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	43d9      	mvns	r1, r3
 800a39a:	4b39      	ldr	r3, [pc, #228]	@ (800a480 <HAL_GPIO_DeInit+0x1c0>)
 800a39c:	400a      	ands	r2, r1
 800a39e:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	2203      	movs	r2, #3
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	220f      	movs	r2, #15
 800a3aa:	409a      	lsls	r2, r3
 800a3ac:	0013      	movs	r3, r2
 800a3ae:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a3b0:	4a2d      	ldr	r2, [pc, #180]	@ (800a468 <HAL_GPIO_DeInit+0x1a8>)
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	089b      	lsrs	r3, r3, #2
 800a3b6:	3302      	adds	r3, #2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	589a      	ldr	r2, [r3, r2]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	43d9      	mvns	r1, r3
 800a3c0:	4829      	ldr	r0, [pc, #164]	@ (800a468 <HAL_GPIO_DeInit+0x1a8>)
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	089b      	lsrs	r3, r3, #2
 800a3c6:	400a      	ands	r2, r1
 800a3c8:	3302      	adds	r3, #2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	005b      	lsls	r3, r3, #1
 800a3d6:	2103      	movs	r1, #3
 800a3d8:	4099      	lsls	r1, r3
 800a3da:	000b      	movs	r3, r1
 800a3dc:	431a      	orrs	r2, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	08da      	lsrs	r2, r3, #3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3208      	adds	r2, #8
 800a3ea:	0092      	lsls	r2, r2, #2
 800a3ec:	58d3      	ldr	r3, [r2, r3]
 800a3ee:	697a      	ldr	r2, [r7, #20]
 800a3f0:	2107      	movs	r1, #7
 800a3f2:	400a      	ands	r2, r1
 800a3f4:	0092      	lsls	r2, r2, #2
 800a3f6:	210f      	movs	r1, #15
 800a3f8:	4091      	lsls	r1, r2
 800a3fa:	000a      	movs	r2, r1
 800a3fc:	43d1      	mvns	r1, r2
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	08d2      	lsrs	r2, r2, #3
 800a402:	4019      	ands	r1, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	3208      	adds	r2, #8
 800a408:	0092      	lsls	r2, r2, #2
 800a40a:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	697a      	ldr	r2, [r7, #20]
 800a412:	0052      	lsls	r2, r2, #1
 800a414:	2103      	movs	r1, #3
 800a416:	4091      	lsls	r1, r2
 800a418:	000a      	movs	r2, r1
 800a41a:	43d2      	mvns	r2, r2
 800a41c:	401a      	ands	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	2101      	movs	r1, #1
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	4091      	lsls	r1, r2
 800a42c:	000a      	movs	r2, r1
 800a42e:	43d2      	mvns	r2, r2
 800a430:	401a      	ands	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	697a      	ldr	r2, [r7, #20]
 800a43c:	0052      	lsls	r2, r2, #1
 800a43e:	2103      	movs	r1, #3
 800a440:	4091      	lsls	r1, r2
 800a442:	000a      	movs	r2, r1
 800a444:	43d2      	mvns	r2, r2
 800a446:	401a      	ands	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	609a      	str	r2, [r3, #8]
    }
    position++;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	3301      	adds	r3, #1
 800a450:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800a452:	683a      	ldr	r2, [r7, #0]
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	40da      	lsrs	r2, r3
 800a458:	1e13      	subs	r3, r2, #0
 800a45a:	d000      	beq.n	800a45e <HAL_GPIO_DeInit+0x19e>
 800a45c:	e73c      	b.n	800a2d8 <HAL_GPIO_DeInit+0x18>
  }
}
 800a45e:	46c0      	nop			@ (mov r8, r8)
 800a460:	46c0      	nop			@ (mov r8, r8)
 800a462:	46bd      	mov	sp, r7
 800a464:	b006      	add	sp, #24
 800a466:	bd80      	pop	{r7, pc}
 800a468:	40010000 	.word	0x40010000
 800a46c:	50000400 	.word	0x50000400
 800a470:	50000800 	.word	0x50000800
 800a474:	50000c00 	.word	0x50000c00
 800a478:	50001000 	.word	0x50001000
 800a47c:	50001c00 	.word	0x50001c00
 800a480:	40010400 	.word	0x40010400

0800a484 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	0008      	movs	r0, r1
 800a48e:	0011      	movs	r1, r2
 800a490:	1cbb      	adds	r3, r7, #2
 800a492:	1c02      	adds	r2, r0, #0
 800a494:	801a      	strh	r2, [r3, #0]
 800a496:	1c7b      	adds	r3, r7, #1
 800a498:	1c0a      	adds	r2, r1, #0
 800a49a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a49c:	1c7b      	adds	r3, r7, #1
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d004      	beq.n	800a4ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a4a4:	1cbb      	adds	r3, r7, #2
 800a4a6:	881a      	ldrh	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800a4ac:	e003      	b.n	800a4b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800a4ae:	1cbb      	adds	r3, r7, #2
 800a4b0:	881a      	ldrh	r2, [r3, #0]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a4b6:	46c0      	nop			@ (mov r8, r8)
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	b002      	add	sp, #8
 800a4bc:	bd80      	pop	{r7, pc}
	...

0800a4c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d101      	bne.n	800a4d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e082      	b.n	800a5d8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2241      	movs	r2, #65	@ 0x41
 800a4d6:	5c9b      	ldrb	r3, [r3, r2]
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d107      	bne.n	800a4ee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2240      	movs	r2, #64	@ 0x40
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	f7fb f841 	bl	8005570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2241      	movs	r2, #65	@ 0x41
 800a4f2:	2124      	movs	r1, #36	@ 0x24
 800a4f4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2101      	movs	r1, #1
 800a502:	438a      	bics	r2, r1
 800a504:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4934      	ldr	r1, [pc, #208]	@ (800a5e0 <HAL_I2C_Init+0x120>)
 800a510:	400a      	ands	r2, r1
 800a512:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	689a      	ldr	r2, [r3, #8]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4931      	ldr	r1, [pc, #196]	@ (800a5e4 <HAL_I2C_Init+0x124>)
 800a520:	400a      	ands	r2, r1
 800a522:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d108      	bne.n	800a53e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	689a      	ldr	r2, [r3, #8]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2180      	movs	r1, #128	@ 0x80
 800a536:	0209      	lsls	r1, r1, #8
 800a538:	430a      	orrs	r2, r1
 800a53a:	609a      	str	r2, [r3, #8]
 800a53c:	e007      	b.n	800a54e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	689a      	ldr	r2, [r3, #8]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2184      	movs	r1, #132	@ 0x84
 800a548:	0209      	lsls	r1, r1, #8
 800a54a:	430a      	orrs	r2, r1
 800a54c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	2b02      	cmp	r3, #2
 800a554:	d104      	bne.n	800a560 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2280      	movs	r2, #128	@ 0x80
 800a55c:	0112      	lsls	r2, r2, #4
 800a55e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	685a      	ldr	r2, [r3, #4]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	491f      	ldr	r1, [pc, #124]	@ (800a5e8 <HAL_I2C_Init+0x128>)
 800a56c:	430a      	orrs	r2, r1
 800a56e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68da      	ldr	r2, [r3, #12]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	491a      	ldr	r1, [pc, #104]	@ (800a5e4 <HAL_I2C_Init+0x124>)
 800a57c:	400a      	ands	r2, r1
 800a57e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	691a      	ldr	r2, [r3, #16]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	695b      	ldr	r3, [r3, #20]
 800a588:	431a      	orrs	r2, r3
 800a58a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	699b      	ldr	r3, [r3, #24]
 800a590:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	430a      	orrs	r2, r1
 800a598:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	69d9      	ldr	r1, [r3, #28]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a1a      	ldr	r2, [r3, #32]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2101      	movs	r1, #1
 800a5b6:	430a      	orrs	r2, r1
 800a5b8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2241      	movs	r2, #65	@ 0x41
 800a5c4:	2120      	movs	r1, #32
 800a5c6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2242      	movs	r2, #66	@ 0x42
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	0018      	movs	r0, r3
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	b002      	add	sp, #8
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	f0ffffff 	.word	0xf0ffffff
 800a5e4:	ffff7fff 	.word	0xffff7fff
 800a5e8:	02008000 	.word	0x02008000

0800a5ec <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800a5ec:	b5b0      	push	{r4, r5, r7, lr}
 800a5ee:	b088      	sub	sp, #32
 800a5f0:	af02      	add	r7, sp, #8
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	0008      	movs	r0, r1
 800a5f6:	607a      	str	r2, [r7, #4]
 800a5f8:	0019      	movs	r1, r3
 800a5fa:	230a      	movs	r3, #10
 800a5fc:	18fb      	adds	r3, r7, r3
 800a5fe:	1c02      	adds	r2, r0, #0
 800a600:	801a      	strh	r2, [r3, #0]
 800a602:	2308      	movs	r3, #8
 800a604:	18fb      	adds	r3, r7, r3
 800a606:	1c0a      	adds	r2, r1, #0
 800a608:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2241      	movs	r2, #65	@ 0x41
 800a60e:	5c9b      	ldrb	r3, [r3, r2]
 800a610:	b2db      	uxtb	r3, r3
 800a612:	2b20      	cmp	r3, #32
 800a614:	d000      	beq.n	800a618 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800a616:	e0dd      	b.n	800a7d4 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	699a      	ldr	r2, [r3, #24]
 800a61e:	2380      	movs	r3, #128	@ 0x80
 800a620:	021b      	lsls	r3, r3, #8
 800a622:	401a      	ands	r2, r3
 800a624:	2380      	movs	r3, #128	@ 0x80
 800a626:	021b      	lsls	r3, r3, #8
 800a628:	429a      	cmp	r2, r3
 800a62a:	d101      	bne.n	800a630 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800a62c:	2302      	movs	r3, #2
 800a62e:	e0d2      	b.n	800a7d6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2240      	movs	r2, #64	@ 0x40
 800a634:	5c9b      	ldrb	r3, [r3, r2]
 800a636:	2b01      	cmp	r3, #1
 800a638:	d101      	bne.n	800a63e <HAL_I2C_Master_Transmit_DMA+0x52>
 800a63a:	2302      	movs	r3, #2
 800a63c:	e0cb      	b.n	800a7d6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2240      	movs	r2, #64	@ 0x40
 800a642:	2101      	movs	r1, #1
 800a644:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2241      	movs	r2, #65	@ 0x41
 800a64a:	2121      	movs	r1, #33	@ 0x21
 800a64c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2242      	movs	r2, #66	@ 0x42
 800a652:	2110      	movs	r1, #16
 800a654:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2208      	movs	r2, #8
 800a666:	18ba      	adds	r2, r7, r2
 800a668:	8812      	ldrh	r2, [r2, #0]
 800a66a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	4a5c      	ldr	r2, [pc, #368]	@ (800a7e0 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800a670:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	4a5b      	ldr	r2, [pc, #364]	@ (800a7e4 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800a676:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	2bff      	cmp	r3, #255	@ 0xff
 800a680:	d906      	bls.n	800a690 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	22ff      	movs	r2, #255	@ 0xff
 800a686:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a688:	2380      	movs	r3, #128	@ 0x80
 800a68a:	045b      	lsls	r3, r3, #17
 800a68c:	617b      	str	r3, [r7, #20]
 800a68e:	e007      	b.n	800a6a0 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a694:	b29a      	uxth	r2, r3
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a69a:	2380      	movs	r3, #128	@ 0x80
 800a69c:	049b      	lsls	r3, r3, #18
 800a69e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d100      	bne.n	800a6aa <HAL_I2C_Master_Transmit_DMA+0xbe>
 800a6a8:	e078      	b.n	800a79c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d023      	beq.n	800a6fa <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b6:	4a4c      	ldr	r2, [pc, #304]	@ (800a7e8 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800a6b8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6be:	4a4b      	ldr	r2, [pc, #300]	@ (800a7ec <HAL_I2C_Master_Transmit_DMA+0x200>)
 800a6c0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a6d6:	6879      	ldr	r1, [r7, #4]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	3328      	adds	r3, #40	@ 0x28
 800a6de:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800a6e4:	2513      	movs	r5, #19
 800a6e6:	197c      	adds	r4, r7, r5
 800a6e8:	f7ff fa96 	bl	8009c18 <HAL_DMA_Start_IT>
 800a6ec:	0003      	movs	r3, r0
 800a6ee:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a6f0:	197b      	adds	r3, r7, r5
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d13d      	bne.n	800a774 <HAL_I2C_Master_Transmit_DMA+0x188>
 800a6f8:	e013      	b.n	800a722 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2241      	movs	r2, #65	@ 0x41
 800a6fe:	2120      	movs	r1, #32
 800a700:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2242      	movs	r2, #66	@ 0x42
 800a706:	2100      	movs	r1, #0
 800a708:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a70e:	2280      	movs	r2, #128	@ 0x80
 800a710:	431a      	orrs	r2, r3
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2240      	movs	r2, #64	@ 0x40
 800a71a:	2100      	movs	r1, #0
 800a71c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	e059      	b.n	800a7d6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a726:	b2da      	uxtb	r2, r3
 800a728:	697c      	ldr	r4, [r7, #20]
 800a72a:	230a      	movs	r3, #10
 800a72c:	18fb      	adds	r3, r7, r3
 800a72e:	8819      	ldrh	r1, [r3, #0]
 800a730:	68f8      	ldr	r0, [r7, #12]
 800a732:	4b2f      	ldr	r3, [pc, #188]	@ (800a7f0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	0023      	movs	r3, r4
 800a738:	f001 fd0e 	bl	800c158 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a740:	b29a      	uxth	r2, r3
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a746:	1ad3      	subs	r3, r2, r3
 800a748:	b29a      	uxth	r2, r3
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2240      	movs	r2, #64	@ 0x40
 800a752:	2100      	movs	r1, #0
 800a754:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2110      	movs	r1, #16
 800a75a:	0018      	movs	r0, r3
 800a75c:	f001 fd36 	bl	800c1cc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	2180      	movs	r1, #128	@ 0x80
 800a76c:	01c9      	lsls	r1, r1, #7
 800a76e:	430a      	orrs	r2, r1
 800a770:	601a      	str	r2, [r3, #0]
 800a772:	e02d      	b.n	800a7d0 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2241      	movs	r2, #65	@ 0x41
 800a778:	2120      	movs	r1, #32
 800a77a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2242      	movs	r2, #66	@ 0x42
 800a780:	2100      	movs	r1, #0
 800a782:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a788:	2210      	movs	r2, #16
 800a78a:	431a      	orrs	r2, r3
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2240      	movs	r2, #64	@ 0x40
 800a794:	2100      	movs	r1, #0
 800a796:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	e01c      	b.n	800a7d6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	4a15      	ldr	r2, [pc, #84]	@ (800a7f4 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800a7a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7a6:	b2da      	uxtb	r2, r3
 800a7a8:	2380      	movs	r3, #128	@ 0x80
 800a7aa:	049c      	lsls	r4, r3, #18
 800a7ac:	230a      	movs	r3, #10
 800a7ae:	18fb      	adds	r3, r7, r3
 800a7b0:	8819      	ldrh	r1, [r3, #0]
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a7f0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	0023      	movs	r3, r4
 800a7ba:	f001 fccd 	bl	800c158 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2240      	movs	r2, #64	@ 0x40
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2101      	movs	r1, #1
 800a7ca:	0018      	movs	r0, r3
 800a7cc:	f001 fcfe 	bl	800c1cc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	e000      	b.n	800a7d6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a7d4:	2302      	movs	r3, #2
  }
}
 800a7d6:	0018      	movs	r0, r3
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	b006      	add	sp, #24
 800a7dc:	bdb0      	pop	{r4, r5, r7, pc}
 800a7de:	46c0      	nop			@ (mov r8, r8)
 800a7e0:	ffff0000 	.word	0xffff0000
 800a7e4:	0800aff1 	.word	0x0800aff1
 800a7e8:	0800bfa9 	.word	0x0800bfa9
 800a7ec:	0800c0e9 	.word	0x0800c0e9
 800a7f0:	80002000 	.word	0x80002000
 800a7f4:	0800ab9d 	.word	0x0800ab9d

0800a7f8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800a7f8:	b5b0      	push	{r4, r5, r7, lr}
 800a7fa:	b088      	sub	sp, #32
 800a7fc:	af02      	add	r7, sp, #8
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	0008      	movs	r0, r1
 800a802:	607a      	str	r2, [r7, #4]
 800a804:	0019      	movs	r1, r3
 800a806:	230a      	movs	r3, #10
 800a808:	18fb      	adds	r3, r7, r3
 800a80a:	1c02      	adds	r2, r0, #0
 800a80c:	801a      	strh	r2, [r3, #0]
 800a80e:	2308      	movs	r3, #8
 800a810:	18fb      	adds	r3, r7, r3
 800a812:	1c0a      	adds	r2, r1, #0
 800a814:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2241      	movs	r2, #65	@ 0x41
 800a81a:	5c9b      	ldrb	r3, [r3, r2]
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	2b20      	cmp	r3, #32
 800a820:	d000      	beq.n	800a824 <HAL_I2C_Master_Receive_DMA+0x2c>
 800a822:	e0dd      	b.n	800a9e0 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	699a      	ldr	r2, [r3, #24]
 800a82a:	2380      	movs	r3, #128	@ 0x80
 800a82c:	021b      	lsls	r3, r3, #8
 800a82e:	401a      	ands	r2, r3
 800a830:	2380      	movs	r3, #128	@ 0x80
 800a832:	021b      	lsls	r3, r3, #8
 800a834:	429a      	cmp	r2, r3
 800a836:	d101      	bne.n	800a83c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800a838:	2302      	movs	r3, #2
 800a83a:	e0d2      	b.n	800a9e2 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2240      	movs	r2, #64	@ 0x40
 800a840:	5c9b      	ldrb	r3, [r3, r2]
 800a842:	2b01      	cmp	r3, #1
 800a844:	d101      	bne.n	800a84a <HAL_I2C_Master_Receive_DMA+0x52>
 800a846:	2302      	movs	r3, #2
 800a848:	e0cb      	b.n	800a9e2 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2240      	movs	r2, #64	@ 0x40
 800a84e:	2101      	movs	r1, #1
 800a850:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2241      	movs	r2, #65	@ 0x41
 800a856:	2122      	movs	r1, #34	@ 0x22
 800a858:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2242      	movs	r2, #66	@ 0x42
 800a85e:	2110      	movs	r1, #16
 800a860:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2200      	movs	r2, #0
 800a866:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2208      	movs	r2, #8
 800a872:	18ba      	adds	r2, r7, r2
 800a874:	8812      	ldrh	r2, [r2, #0]
 800a876:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	4a5c      	ldr	r2, [pc, #368]	@ (800a9ec <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800a87c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	4a5b      	ldr	r2, [pc, #364]	@ (800a9f0 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800a882:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a888:	b29b      	uxth	r3, r3
 800a88a:	2bff      	cmp	r3, #255	@ 0xff
 800a88c:	d906      	bls.n	800a89c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	22ff      	movs	r2, #255	@ 0xff
 800a892:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a894:	2380      	movs	r3, #128	@ 0x80
 800a896:	045b      	lsls	r3, r3, #17
 800a898:	617b      	str	r3, [r7, #20]
 800a89a:	e007      	b.n	800a8ac <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8a0:	b29a      	uxth	r2, r3
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a8a6:	2380      	movs	r3, #128	@ 0x80
 800a8a8:	049b      	lsls	r3, r3, #18
 800a8aa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d100      	bne.n	800a8b6 <HAL_I2C_Master_Receive_DMA+0xbe>
 800a8b4:	e078      	b.n	800a9a8 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d023      	beq.n	800a906 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8c2:	4a4c      	ldr	r2, [pc, #304]	@ (800a9f4 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800a8c4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8ca:	4a4b      	ldr	r2, [pc, #300]	@ (800a9f8 <HAL_I2C_Master_Receive_DMA+0x200>)
 800a8cc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8da:	2200      	movs	r2, #0
 800a8dc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	3324      	adds	r3, #36	@ 0x24
 800a8e8:	0019      	movs	r1, r3
 800a8ea:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800a8f0:	2513      	movs	r5, #19
 800a8f2:	197c      	adds	r4, r7, r5
 800a8f4:	f7ff f990 	bl	8009c18 <HAL_DMA_Start_IT>
 800a8f8:	0003      	movs	r3, r0
 800a8fa:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a8fc:	197b      	adds	r3, r7, r5
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d13d      	bne.n	800a980 <HAL_I2C_Master_Receive_DMA+0x188>
 800a904:	e013      	b.n	800a92e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2241      	movs	r2, #65	@ 0x41
 800a90a:	2120      	movs	r1, #32
 800a90c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2242      	movs	r2, #66	@ 0x42
 800a912:	2100      	movs	r1, #0
 800a914:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a91a:	2280      	movs	r2, #128	@ 0x80
 800a91c:	431a      	orrs	r2, r3
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2240      	movs	r2, #64	@ 0x40
 800a926:	2100      	movs	r1, #0
 800a928:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e059      	b.n	800a9e2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a932:	b2da      	uxtb	r2, r3
 800a934:	697c      	ldr	r4, [r7, #20]
 800a936:	230a      	movs	r3, #10
 800a938:	18fb      	adds	r3, r7, r3
 800a93a:	8819      	ldrh	r1, [r3, #0]
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	4b2f      	ldr	r3, [pc, #188]	@ (800a9fc <HAL_I2C_Master_Receive_DMA+0x204>)
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	0023      	movs	r3, r4
 800a944:	f001 fc08 	bl	800c158 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a952:	1ad3      	subs	r3, r2, r3
 800a954:	b29a      	uxth	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2240      	movs	r2, #64	@ 0x40
 800a95e:	2100      	movs	r1, #0
 800a960:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2110      	movs	r1, #16
 800a966:	0018      	movs	r0, r3
 800a968:	f001 fc30 	bl	800c1cc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2180      	movs	r1, #128	@ 0x80
 800a978:	0209      	lsls	r1, r1, #8
 800a97a:	430a      	orrs	r2, r1
 800a97c:	601a      	str	r2, [r3, #0]
 800a97e:	e02d      	b.n	800a9dc <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2241      	movs	r2, #65	@ 0x41
 800a984:	2120      	movs	r1, #32
 800a986:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2242      	movs	r2, #66	@ 0x42
 800a98c:	2100      	movs	r1, #0
 800a98e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a994:	2210      	movs	r2, #16
 800a996:	431a      	orrs	r2, r3
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2240      	movs	r2, #64	@ 0x40
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e01c      	b.n	800a9e2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	4a15      	ldr	r2, [pc, #84]	@ (800aa00 <HAL_I2C_Master_Receive_DMA+0x208>)
 800a9ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	2380      	movs	r3, #128	@ 0x80
 800a9b6:	049c      	lsls	r4, r3, #18
 800a9b8:	230a      	movs	r3, #10
 800a9ba:	18fb      	adds	r3, r7, r3
 800a9bc:	8819      	ldrh	r1, [r3, #0]
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	4b0e      	ldr	r3, [pc, #56]	@ (800a9fc <HAL_I2C_Master_Receive_DMA+0x204>)
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	0023      	movs	r3, r4
 800a9c6:	f001 fbc7 	bl	800c158 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2240      	movs	r2, #64	@ 0x40
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2101      	movs	r1, #1
 800a9d6:	0018      	movs	r0, r3
 800a9d8:	f001 fbf8 	bl	800c1cc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	e000      	b.n	800a9e2 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a9e0:	2302      	movs	r3, #2
  }
}
 800a9e2:	0018      	movs	r0, r3
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	b006      	add	sp, #24
 800a9e8:	bdb0      	pop	{r4, r5, r7, pc}
 800a9ea:	46c0      	nop			@ (mov r8, r8)
 800a9ec:	ffff0000 	.word	0xffff0000
 800a9f0:	0800aff1 	.word	0x0800aff1
 800a9f4:	0800c049 	.word	0x0800c049
 800a9f8:	0800c0e9 	.word	0x0800c0e9
 800a9fc:	80002400 	.word	0x80002400
 800aa00:	0800ab9d 	.word	0x0800ab9d

0800aa04 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d005      	beq.n	800aa30 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	68f9      	ldr	r1, [r7, #12]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	4798      	blx	r3
  }
}
 800aa30:	46c0      	nop			@ (mov r8, r8)
 800aa32:	46bd      	mov	sp, r7
 800aa34:	b004      	add	sp, #16
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	699b      	ldr	r3, [r3, #24]
 800aa46:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	2380      	movs	r3, #128	@ 0x80
 800aa54:	005b      	lsls	r3, r3, #1
 800aa56:	4013      	ands	r3, r2
 800aa58:	d00e      	beq.n	800aa78 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	2280      	movs	r2, #128	@ 0x80
 800aa5e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800aa60:	d00a      	beq.n	800aa78 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa66:	2201      	movs	r2, #1
 800aa68:	431a      	orrs	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	2280      	movs	r2, #128	@ 0x80
 800aa74:	0052      	lsls	r2, r2, #1
 800aa76:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	2380      	movs	r3, #128	@ 0x80
 800aa7c:	00db      	lsls	r3, r3, #3
 800aa7e:	4013      	ands	r3, r2
 800aa80:	d00e      	beq.n	800aaa0 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	2280      	movs	r2, #128	@ 0x80
 800aa86:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800aa88:	d00a      	beq.n	800aaa0 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa8e:	2208      	movs	r2, #8
 800aa90:	431a      	orrs	r2, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2280      	movs	r2, #128	@ 0x80
 800aa9c:	00d2      	lsls	r2, r2, #3
 800aa9e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800aaa0:	697a      	ldr	r2, [r7, #20]
 800aaa2:	2380      	movs	r3, #128	@ 0x80
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	d00e      	beq.n	800aac8 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	2280      	movs	r2, #128	@ 0x80
 800aaae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800aab0:	d00a      	beq.n	800aac8 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aab6:	2202      	movs	r2, #2
 800aab8:	431a      	orrs	r2, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2280      	movs	r2, #128	@ 0x80
 800aac4:	0092      	lsls	r2, r2, #2
 800aac6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aacc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	220b      	movs	r2, #11
 800aad2:	4013      	ands	r3, r2
 800aad4:	d005      	beq.n	800aae2 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	0011      	movs	r1, r2
 800aadc:	0018      	movs	r0, r3
 800aade:	f001 f915 	bl	800bd0c <I2C_ITError>
  }
}
 800aae2:	46c0      	nop			@ (mov r8, r8)
 800aae4:	46bd      	mov	sp, r7
 800aae6:	b006      	add	sp, #24
 800aae8:	bd80      	pop	{r7, pc}

0800aaea <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b082      	sub	sp, #8
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800aaf2:	46c0      	nop			@ (mov r8, r8)
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	b002      	add	sp, #8
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b082      	sub	sp, #8
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ab02:	46c0      	nop			@ (mov r8, r8)
 800ab04:	46bd      	mov	sp, r7
 800ab06:	b002      	add	sp, #8
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b082      	sub	sp, #8
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ab12:	46c0      	nop			@ (mov r8, r8)
 800ab14:	46bd      	mov	sp, r7
 800ab16:	b002      	add	sp, #8
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b082      	sub	sp, #8
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ab22:	46c0      	nop			@ (mov r8, r8)
 800ab24:	46bd      	mov	sp, r7
 800ab26:	b002      	add	sp, #8
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b082      	sub	sp, #8
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
 800ab32:	0008      	movs	r0, r1
 800ab34:	0011      	movs	r1, r2
 800ab36:	1cfb      	adds	r3, r7, #3
 800ab38:	1c02      	adds	r2, r0, #0
 800ab3a:	701a      	strb	r2, [r3, #0]
 800ab3c:	003b      	movs	r3, r7
 800ab3e:	1c0a      	adds	r2, r1, #0
 800ab40:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ab42:	46c0      	nop			@ (mov r8, r8)
 800ab44:	46bd      	mov	sp, r7
 800ab46:	b002      	add	sp, #8
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b082      	sub	sp, #8
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ab52:	46c0      	nop			@ (mov r8, r8)
 800ab54:	46bd      	mov	sp, r7
 800ab56:	b002      	add	sp, #8
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b082      	sub	sp, #8
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ab62:	46c0      	nop			@ (mov r8, r8)
 800ab64:	46bd      	mov	sp, r7
 800ab66:	b002      	add	sp, #8
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b082      	sub	sp, #8
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800ab72:	46c0      	nop			@ (mov r8, r8)
 800ab74:	46bd      	mov	sp, r7
 800ab76:	b002      	add	sp, #8
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b082      	sub	sp, #8
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ab82:	46c0      	nop			@ (mov r8, r8)
 800ab84:	46bd      	mov	sp, r7
 800ab86:	b002      	add	sp, #8
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b082      	sub	sp, #8
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ab92:	46c0      	nop			@ (mov r8, r8)
 800ab94:	46bd      	mov	sp, r7
 800ab96:	b002      	add	sp, #8
 800ab98:	bd80      	pop	{r7, pc}
	...

0800ab9c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800ab9c:	b590      	push	{r4, r7, lr}
 800ab9e:	b089      	sub	sp, #36	@ 0x24
 800aba0:	af02      	add	r7, sp, #8
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2240      	movs	r2, #64	@ 0x40
 800abb0:	5c9b      	ldrb	r3, [r3, r2]
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d101      	bne.n	800abba <I2C_Master_ISR_IT+0x1e>
 800abb6:	2302      	movs	r3, #2
 800abb8:	e113      	b.n	800ade2 <I2C_Master_ISR_IT+0x246>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2240      	movs	r2, #64	@ 0x40
 800abbe:	2101      	movs	r1, #1
 800abc0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	2210      	movs	r2, #16
 800abc6:	4013      	ands	r3, r2
 800abc8:	d012      	beq.n	800abf0 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2210      	movs	r2, #16
 800abce:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800abd0:	d00e      	beq.n	800abf0 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2210      	movs	r2, #16
 800abd8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abde:	2204      	movs	r2, #4
 800abe0:	431a      	orrs	r2, r3
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	0018      	movs	r0, r3
 800abea:	f001 f9ba 	bl	800bf62 <I2C_Flush_TXDR>
 800abee:	e0e5      	b.n	800adbc <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	2204      	movs	r2, #4
 800abf4:	4013      	ands	r3, r2
 800abf6:	d021      	beq.n	800ac3c <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2204      	movs	r2, #4
 800abfc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800abfe:	d01d      	beq.n	800ac3c <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	2204      	movs	r2, #4
 800ac04:	4393      	bics	r3, r2
 800ac06:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac12:	b2d2      	uxtb	r2, r2
 800ac14:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac1a:	1c5a      	adds	r2, r3, #1
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac24:	3b01      	subs	r3, #1
 800ac26:	b29a      	uxth	r2, r3
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	3b01      	subs	r3, #1
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ac3a:	e0bf      	b.n	800adbc <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	2202      	movs	r2, #2
 800ac40:	4013      	ands	r3, r2
 800ac42:	d01c      	beq.n	800ac7e <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2202      	movs	r2, #2
 800ac48:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ac4a:	d018      	beq.n	800ac7e <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac50:	781a      	ldrb	r2, [r3, #0]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac5c:	1c5a      	adds	r2, r3, #1
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac66:	3b01      	subs	r3, #1
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	3b01      	subs	r3, #1
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ac7c:	e09e      	b.n	800adbc <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	2280      	movs	r2, #128	@ 0x80
 800ac82:	4013      	ands	r3, r2
 800ac84:	d100      	bne.n	800ac88 <I2C_Master_ISR_IT+0xec>
 800ac86:	e069      	b.n	800ad5c <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2240      	movs	r2, #64	@ 0x40
 800ac8c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ac8e:	d065      	beq.n	800ad5c <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d04a      	beq.n	800ad30 <I2C_Master_ISR_IT+0x194>
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d146      	bne.n	800ad30 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	2112      	movs	r1, #18
 800acac:	187b      	adds	r3, r7, r1
 800acae:	0592      	lsls	r2, r2, #22
 800acb0:	0d92      	lsrs	r2, r2, #22
 800acb2:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acb8:	b29b      	uxth	r3, r3
 800acba:	2bff      	cmp	r3, #255	@ 0xff
 800acbc:	d910      	bls.n	800ace0 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	22ff      	movs	r2, #255	@ 0xff
 800acc2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acc8:	b2da      	uxtb	r2, r3
 800acca:	2380      	movs	r3, #128	@ 0x80
 800accc:	045c      	lsls	r4, r3, #17
 800acce:	187b      	adds	r3, r7, r1
 800acd0:	8819      	ldrh	r1, [r3, #0]
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	2300      	movs	r3, #0
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	0023      	movs	r3, r4
 800acda:	f001 fa3d 	bl	800c158 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800acde:	e03c      	b.n	800ad5a <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ace4:	b29a      	uxth	r2, r3
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acee:	4a3f      	ldr	r2, [pc, #252]	@ (800adec <I2C_Master_ISR_IT+0x250>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d00e      	beq.n	800ad12 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acf8:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800acfe:	2312      	movs	r3, #18
 800ad00:	18fb      	adds	r3, r7, r3
 800ad02:	8819      	ldrh	r1, [r3, #0]
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	2300      	movs	r3, #0
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	0023      	movs	r3, r4
 800ad0c:	f001 fa24 	bl	800c158 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ad10:	e023      	b.n	800ad5a <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad16:	b2da      	uxtb	r2, r3
 800ad18:	2380      	movs	r3, #128	@ 0x80
 800ad1a:	049c      	lsls	r4, r3, #18
 800ad1c:	2312      	movs	r3, #18
 800ad1e:	18fb      	adds	r3, r7, r3
 800ad20:	8819      	ldrh	r1, [r3, #0]
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	2300      	movs	r3, #0
 800ad26:	9300      	str	r3, [sp, #0]
 800ad28:	0023      	movs	r3, r4
 800ad2a:	f001 fa15 	bl	800c158 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ad2e:	e014      	b.n	800ad5a <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	2380      	movs	r3, #128	@ 0x80
 800ad38:	049b      	lsls	r3, r3, #18
 800ad3a:	401a      	ands	r2, r3
 800ad3c:	2380      	movs	r3, #128	@ 0x80
 800ad3e:	049b      	lsls	r3, r3, #18
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d004      	beq.n	800ad4e <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	0018      	movs	r0, r3
 800ad48:	f000 fcf4 	bl	800b734 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ad4c:	e036      	b.n	800adbc <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2140      	movs	r1, #64	@ 0x40
 800ad52:	0018      	movs	r0, r3
 800ad54:	f000 ffda 	bl	800bd0c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ad58:	e030      	b.n	800adbc <I2C_Master_ISR_IT+0x220>
 800ad5a:	e02f      	b.n	800adbc <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	2240      	movs	r2, #64	@ 0x40
 800ad60:	4013      	ands	r3, r2
 800ad62:	d02b      	beq.n	800adbc <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2240      	movs	r2, #64	@ 0x40
 800ad68:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ad6a:	d027      	beq.n	800adbc <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d11d      	bne.n	800adb2 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	2380      	movs	r3, #128	@ 0x80
 800ad7e:	049b      	lsls	r3, r3, #18
 800ad80:	401a      	ands	r2, r3
 800ad82:	2380      	movs	r3, #128	@ 0x80
 800ad84:	049b      	lsls	r3, r3, #18
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d018      	beq.n	800adbc <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad8e:	4a17      	ldr	r2, [pc, #92]	@ (800adec <I2C_Master_ISR_IT+0x250>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d109      	bne.n	800ada8 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	685a      	ldr	r2, [r3, #4]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2180      	movs	r1, #128	@ 0x80
 800ada0:	01c9      	lsls	r1, r1, #7
 800ada2:	430a      	orrs	r2, r1
 800ada4:	605a      	str	r2, [r3, #4]
 800ada6:	e009      	b.n	800adbc <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	0018      	movs	r0, r3
 800adac:	f000 fcc2 	bl	800b734 <I2C_ITMasterSeqCplt>
 800adb0:	e004      	b.n	800adbc <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2140      	movs	r1, #64	@ 0x40
 800adb6:	0018      	movs	r0, r3
 800adb8:	f000 ffa8 	bl	800bd0c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	2220      	movs	r2, #32
 800adc0:	4013      	ands	r3, r2
 800adc2:	d009      	beq.n	800add8 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2220      	movs	r2, #32
 800adc8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800adca:	d005      	beq.n	800add8 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800adcc:	697a      	ldr	r2, [r7, #20]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	0011      	movs	r1, r2
 800add2:	0018      	movs	r0, r3
 800add4:	f000 fd54 	bl	800b880 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2240      	movs	r2, #64	@ 0x40
 800addc:	2100      	movs	r1, #0
 800adde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	0018      	movs	r0, r3
 800ade4:	46bd      	mov	sp, r7
 800ade6:	b007      	add	sp, #28
 800ade8:	bd90      	pop	{r4, r7, pc}
 800adea:	46c0      	nop			@ (mov r8, r8)
 800adec:	ffff0000 	.word	0xffff0000

0800adf0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b086      	sub	sp, #24
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae00:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2240      	movs	r2, #64	@ 0x40
 800ae0a:	5c9b      	ldrb	r3, [r3, r2]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d101      	bne.n	800ae14 <I2C_Slave_ISR_IT+0x24>
 800ae10:	2302      	movs	r3, #2
 800ae12:	e0e6      	b.n	800afe2 <I2C_Slave_ISR_IT+0x1f2>
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2240      	movs	r2, #64	@ 0x40
 800ae18:	2101      	movs	r1, #1
 800ae1a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	2220      	movs	r2, #32
 800ae20:	4013      	ands	r3, r2
 800ae22:	d009      	beq.n	800ae38 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2220      	movs	r2, #32
 800ae28:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ae2a:	d005      	beq.n	800ae38 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800ae2c:	693a      	ldr	r2, [r7, #16]
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	0011      	movs	r1, r2
 800ae32:	0018      	movs	r0, r3
 800ae34:	f000 fdf2 	bl	800ba1c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	2210      	movs	r2, #16
 800ae3c:	4013      	ands	r3, r2
 800ae3e:	d052      	beq.n	800aee6 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2210      	movs	r2, #16
 800ae44:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ae46:	d04e      	beq.n	800aee6 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d12d      	bne.n	800aeae <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2241      	movs	r2, #65	@ 0x41
 800ae56:	5c9b      	ldrb	r3, [r3, r2]
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	2b28      	cmp	r3, #40	@ 0x28
 800ae5c:	d10b      	bne.n	800ae76 <I2C_Slave_ISR_IT+0x86>
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	2380      	movs	r3, #128	@ 0x80
 800ae62:	049b      	lsls	r3, r3, #18
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d106      	bne.n	800ae76 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ae68:	693a      	ldr	r2, [r7, #16]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	0011      	movs	r1, r2
 800ae6e:	0018      	movs	r0, r3
 800ae70:	f000 fef4 	bl	800bc5c <I2C_ITListenCplt>
 800ae74:	e036      	b.n	800aee4 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2241      	movs	r2, #65	@ 0x41
 800ae7a:	5c9b      	ldrb	r3, [r3, r2]
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	2b29      	cmp	r3, #41	@ 0x29
 800ae80:	d110      	bne.n	800aea4 <I2C_Slave_ISR_IT+0xb4>
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	4a59      	ldr	r2, [pc, #356]	@ (800afec <I2C_Slave_ISR_IT+0x1fc>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d00c      	beq.n	800aea4 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2210      	movs	r2, #16
 800ae90:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	0018      	movs	r0, r3
 800ae96:	f001 f864 	bl	800bf62 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	0018      	movs	r0, r3
 800ae9e:	f000 fc8b 	bl	800b7b8 <I2C_ITSlaveSeqCplt>
 800aea2:	e01f      	b.n	800aee4 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2210      	movs	r2, #16
 800aeaa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800aeac:	e091      	b.n	800afd2 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2210      	movs	r2, #16
 800aeb4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aeba:	2204      	movs	r2, #4
 800aebc:	431a      	orrs	r2, r3
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d005      	beq.n	800aed4 <I2C_Slave_ISR_IT+0xe4>
 800aec8:	697a      	ldr	r2, [r7, #20]
 800aeca:	2380      	movs	r3, #128	@ 0x80
 800aecc:	045b      	lsls	r3, r3, #17
 800aece:	429a      	cmp	r2, r3
 800aed0:	d000      	beq.n	800aed4 <I2C_Slave_ISR_IT+0xe4>
 800aed2:	e07e      	b.n	800afd2 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	0011      	movs	r1, r2
 800aedc:	0018      	movs	r0, r3
 800aede:	f000 ff15 	bl	800bd0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800aee2:	e076      	b.n	800afd2 <I2C_Slave_ISR_IT+0x1e2>
 800aee4:	e075      	b.n	800afd2 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	2204      	movs	r2, #4
 800aeea:	4013      	ands	r3, r2
 800aeec:	d02f      	beq.n	800af4e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2204      	movs	r2, #4
 800aef2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800aef4:	d02b      	beq.n	800af4e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d018      	beq.n	800af32 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af0a:	b2d2      	uxtb	r2, r2
 800af0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af12:	1c5a      	adds	r2, r3, #1
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af1c:	3b01      	subs	r3, #1
 800af1e:	b29a      	uxth	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af28:	b29b      	uxth	r3, r3
 800af2a:	3b01      	subs	r3, #1
 800af2c:	b29a      	uxth	r2, r3
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af36:	b29b      	uxth	r3, r3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d14c      	bne.n	800afd6 <I2C_Slave_ISR_IT+0x1e6>
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	4a2b      	ldr	r2, [pc, #172]	@ (800afec <I2C_Slave_ISR_IT+0x1fc>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d048      	beq.n	800afd6 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	0018      	movs	r0, r3
 800af48:	f000 fc36 	bl	800b7b8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800af4c:	e043      	b.n	800afd6 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	2208      	movs	r2, #8
 800af52:	4013      	ands	r3, r2
 800af54:	d00a      	beq.n	800af6c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2208      	movs	r2, #8
 800af5a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800af5c:	d006      	beq.n	800af6c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	0011      	movs	r1, r2
 800af64:	0018      	movs	r0, r3
 800af66:	f000 fb41 	bl	800b5ec <I2C_ITAddrCplt>
 800af6a:	e035      	b.n	800afd8 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	2202      	movs	r2, #2
 800af70:	4013      	ands	r3, r2
 800af72:	d031      	beq.n	800afd8 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2202      	movs	r2, #2
 800af78:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800af7a:	d02d      	beq.n	800afd8 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af80:	b29b      	uxth	r3, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	d018      	beq.n	800afb8 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af8a:	781a      	ldrb	r2, [r3, #0]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af96:	1c5a      	adds	r2, r3, #1
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	3b01      	subs	r3, #1
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afae:	3b01      	subs	r3, #1
 800afb0:	b29a      	uxth	r2, r3
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800afb6:	e00f      	b.n	800afd8 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800afb8:	697a      	ldr	r2, [r7, #20]
 800afba:	2380      	movs	r3, #128	@ 0x80
 800afbc:	045b      	lsls	r3, r3, #17
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d002      	beq.n	800afc8 <I2C_Slave_ISR_IT+0x1d8>
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d107      	bne.n	800afd8 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	0018      	movs	r0, r3
 800afcc:	f000 fbf4 	bl	800b7b8 <I2C_ITSlaveSeqCplt>
 800afd0:	e002      	b.n	800afd8 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800afd2:	46c0      	nop			@ (mov r8, r8)
 800afd4:	e000      	b.n	800afd8 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800afd6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2240      	movs	r2, #64	@ 0x40
 800afdc:	2100      	movs	r1, #0
 800afde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800afe0:	2300      	movs	r3, #0
}
 800afe2:	0018      	movs	r0, r3
 800afe4:	46bd      	mov	sp, r7
 800afe6:	b006      	add	sp, #24
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	46c0      	nop			@ (mov r8, r8)
 800afec:	ffff0000 	.word	0xffff0000

0800aff0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800aff0:	b590      	push	{r4, r7, lr}
 800aff2:	b089      	sub	sp, #36	@ 0x24
 800aff4:	af02      	add	r7, sp, #8
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2240      	movs	r2, #64	@ 0x40
 800b000:	5c9b      	ldrb	r3, [r3, r2]
 800b002:	2b01      	cmp	r3, #1
 800b004:	d101      	bne.n	800b00a <I2C_Master_ISR_DMA+0x1a>
 800b006:	2302      	movs	r3, #2
 800b008:	e0e7      	b.n	800b1da <I2C_Master_ISR_DMA+0x1ea>
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2240      	movs	r2, #64	@ 0x40
 800b00e:	2101      	movs	r1, #1
 800b010:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	2210      	movs	r2, #16
 800b016:	4013      	ands	r3, r2
 800b018:	d017      	beq.n	800b04a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2210      	movs	r2, #16
 800b01e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b020:	d013      	beq.n	800b04a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2210      	movs	r2, #16
 800b028:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b02e:	2204      	movs	r2, #4
 800b030:	431a      	orrs	r2, r3
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2120      	movs	r1, #32
 800b03a:	0018      	movs	r0, r3
 800b03c:	f001 f8c6 	bl	800c1cc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	0018      	movs	r0, r3
 800b044:	f000 ff8d 	bl	800bf62 <I2C_Flush_TXDR>
 800b048:	e0c2      	b.n	800b1d0 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	2280      	movs	r2, #128	@ 0x80
 800b04e:	4013      	ands	r3, r2
 800b050:	d100      	bne.n	800b054 <I2C_Master_ISR_DMA+0x64>
 800b052:	e07c      	b.n	800b14e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2240      	movs	r2, #64	@ 0x40
 800b058:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b05a:	d100      	bne.n	800b05e <I2C_Master_ISR_DMA+0x6e>
 800b05c:	e077      	b.n	800b14e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2140      	movs	r1, #64	@ 0x40
 800b06a:	438a      	bics	r2, r1
 800b06c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b072:	b29b      	uxth	r3, r3
 800b074:	2b00      	cmp	r3, #0
 800b076:	d055      	beq.n	800b124 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	b29a      	uxth	r2, r3
 800b080:	2312      	movs	r3, #18
 800b082:	18fb      	adds	r3, r7, r3
 800b084:	0592      	lsls	r2, r2, #22
 800b086:	0d92      	lsrs	r2, r2, #22
 800b088:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b08e:	b29b      	uxth	r3, r3
 800b090:	2bff      	cmp	r3, #255	@ 0xff
 800b092:	d906      	bls.n	800b0a2 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	22ff      	movs	r2, #255	@ 0xff
 800b098:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800b09a:	2380      	movs	r3, #128	@ 0x80
 800b09c:	045b      	lsls	r3, r3, #17
 800b09e:	617b      	str	r3, [r7, #20]
 800b0a0:	e010      	b.n	800b0c4 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b0:	4a4c      	ldr	r2, [pc, #304]	@ (800b1e4 <I2C_Master_ISR_DMA+0x1f4>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d003      	beq.n	800b0be <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ba:	617b      	str	r3, [r7, #20]
 800b0bc:	e002      	b.n	800b0c4 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800b0be:	2380      	movs	r3, #128	@ 0x80
 800b0c0:	049b      	lsls	r3, r3, #18
 800b0c2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0c8:	b2da      	uxtb	r2, r3
 800b0ca:	697c      	ldr	r4, [r7, #20]
 800b0cc:	2312      	movs	r3, #18
 800b0ce:	18fb      	adds	r3, r7, r3
 800b0d0:	8819      	ldrh	r1, [r3, #0]
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	0023      	movs	r3, r4
 800b0da:	f001 f83d 	bl	800c158 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0e2:	b29a      	uxth	r2, r3
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0e8:	1ad3      	subs	r3, r2, r3
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2241      	movs	r2, #65	@ 0x41
 800b0f4:	5c9b      	ldrb	r3, [r3, r2]
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	2b22      	cmp	r3, #34	@ 0x22
 800b0fa:	d109      	bne.n	800b110 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2180      	movs	r1, #128	@ 0x80
 800b108:	0209      	lsls	r1, r1, #8
 800b10a:	430a      	orrs	r2, r1
 800b10c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b10e:	e05f      	b.n	800b1d0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2180      	movs	r1, #128	@ 0x80
 800b11c:	01c9      	lsls	r1, r1, #7
 800b11e:	430a      	orrs	r2, r1
 800b120:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b122:	e055      	b.n	800b1d0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	685a      	ldr	r2, [r3, #4]
 800b12a:	2380      	movs	r3, #128	@ 0x80
 800b12c:	049b      	lsls	r3, r3, #18
 800b12e:	401a      	ands	r2, r3
 800b130:	2380      	movs	r3, #128	@ 0x80
 800b132:	049b      	lsls	r3, r3, #18
 800b134:	429a      	cmp	r2, r3
 800b136:	d004      	beq.n	800b142 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	0018      	movs	r0, r3
 800b13c:	f000 fafa 	bl	800b734 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800b140:	e046      	b.n	800b1d0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2140      	movs	r1, #64	@ 0x40
 800b146:	0018      	movs	r0, r3
 800b148:	f000 fde0 	bl	800bd0c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b14c:	e040      	b.n	800b1d0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	2240      	movs	r2, #64	@ 0x40
 800b152:	4013      	ands	r3, r2
 800b154:	d02c      	beq.n	800b1b0 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2240      	movs	r2, #64	@ 0x40
 800b15a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b15c:	d028      	beq.n	800b1b0 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b162:	b29b      	uxth	r3, r3
 800b164:	2b00      	cmp	r3, #0
 800b166:	d11d      	bne.n	800b1a4 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	685a      	ldr	r2, [r3, #4]
 800b16e:	2380      	movs	r3, #128	@ 0x80
 800b170:	049b      	lsls	r3, r3, #18
 800b172:	401a      	ands	r2, r3
 800b174:	2380      	movs	r3, #128	@ 0x80
 800b176:	049b      	lsls	r3, r3, #18
 800b178:	429a      	cmp	r2, r3
 800b17a:	d028      	beq.n	800b1ce <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b180:	4a18      	ldr	r2, [pc, #96]	@ (800b1e4 <I2C_Master_ISR_DMA+0x1f4>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d109      	bne.n	800b19a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	685a      	ldr	r2, [r3, #4]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2180      	movs	r1, #128	@ 0x80
 800b192:	01c9      	lsls	r1, r1, #7
 800b194:	430a      	orrs	r2, r1
 800b196:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800b198:	e019      	b.n	800b1ce <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	0018      	movs	r0, r3
 800b19e:	f000 fac9 	bl	800b734 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800b1a2:	e014      	b.n	800b1ce <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2140      	movs	r1, #64	@ 0x40
 800b1a8:	0018      	movs	r0, r3
 800b1aa:	f000 fdaf 	bl	800bd0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b1ae:	e00e      	b.n	800b1ce <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	2220      	movs	r2, #32
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	d00b      	beq.n	800b1d0 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2220      	movs	r2, #32
 800b1bc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b1be:	d007      	beq.n	800b1d0 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b1c0:	68ba      	ldr	r2, [r7, #8]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	0011      	movs	r1, r2
 800b1c6:	0018      	movs	r0, r3
 800b1c8:	f000 fb5a 	bl	800b880 <I2C_ITMasterCplt>
 800b1cc:	e000      	b.n	800b1d0 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800b1ce:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2240      	movs	r2, #64	@ 0x40
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	0018      	movs	r0, r3
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	b007      	add	sp, #28
 800b1e0:	bd90      	pop	{r4, r7, pc}
 800b1e2:	46c0      	nop			@ (mov r8, r8)
 800b1e4:	ffff0000 	.word	0xffff0000

0800b1e8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800b1e8:	b590      	push	{r4, r7, lr}
 800b1ea:	b089      	sub	sp, #36	@ 0x24
 800b1ec:	af02      	add	r7, sp, #8
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800b1f4:	4b88      	ldr	r3, [pc, #544]	@ (800b418 <I2C_Mem_ISR_DMA+0x230>)
 800b1f6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2240      	movs	r2, #64	@ 0x40
 800b1fc:	5c9b      	ldrb	r3, [r3, r2]
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d101      	bne.n	800b206 <I2C_Mem_ISR_DMA+0x1e>
 800b202:	2302      	movs	r3, #2
 800b204:	e104      	b.n	800b410 <I2C_Mem_ISR_DMA+0x228>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2240      	movs	r2, #64	@ 0x40
 800b20a:	2101      	movs	r1, #1
 800b20c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	2210      	movs	r2, #16
 800b212:	4013      	ands	r3, r2
 800b214:	d017      	beq.n	800b246 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2210      	movs	r2, #16
 800b21a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b21c:	d013      	beq.n	800b246 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2210      	movs	r2, #16
 800b224:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b22a:	2204      	movs	r2, #4
 800b22c:	431a      	orrs	r2, r3
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2120      	movs	r1, #32
 800b236:	0018      	movs	r0, r3
 800b238:	f000 ffc8 	bl	800c1cc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	0018      	movs	r0, r3
 800b240:	f000 fe8f 	bl	800bf62 <I2C_Flush_TXDR>
 800b244:	e0df      	b.n	800b406 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	2202      	movs	r2, #2
 800b24a:	4013      	ands	r3, r2
 800b24c:	d00d      	beq.n	800b26a <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2202      	movs	r2, #2
 800b252:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b254:	d009      	beq.n	800b26a <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b25e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2201      	movs	r2, #1
 800b264:	4252      	negs	r2, r2
 800b266:	651a      	str	r2, [r3, #80]	@ 0x50
 800b268:	e0cd      	b.n	800b406 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	2280      	movs	r2, #128	@ 0x80
 800b26e:	4013      	ands	r3, r2
 800b270:	d05e      	beq.n	800b330 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2240      	movs	r2, #64	@ 0x40
 800b276:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b278:	d05a      	beq.n	800b330 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2110      	movs	r1, #16
 800b27e:	0018      	movs	r0, r3
 800b280:	f000 ffa4 	bl	800c1cc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b288:	b29b      	uxth	r3, r3
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d04a      	beq.n	800b324 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b292:	b29b      	uxth	r3, r3
 800b294:	2bff      	cmp	r3, #255	@ 0xff
 800b296:	d910      	bls.n	800b2ba <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	22ff      	movs	r2, #255	@ 0xff
 800b29c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2a2:	b299      	uxth	r1, r3
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2a8:	b2da      	uxtb	r2, r3
 800b2aa:	2380      	movs	r3, #128	@ 0x80
 800b2ac:	045b      	lsls	r3, r3, #17
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	2400      	movs	r4, #0
 800b2b2:	9400      	str	r4, [sp, #0]
 800b2b4:	f000 ff50 	bl	800c158 <I2C_TransferConfig>
 800b2b8:	e011      	b.n	800b2de <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2c8:	b299      	uxth	r1, r3
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2ce:	b2da      	uxtb	r2, r3
 800b2d0:	2380      	movs	r3, #128	@ 0x80
 800b2d2:	049b      	lsls	r3, r3, #18
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	2400      	movs	r4, #0
 800b2d8:	9400      	str	r4, [sp, #0]
 800b2da:	f000 ff3d 	bl	800c158 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2241      	movs	r2, #65	@ 0x41
 800b2f4:	5c9b      	ldrb	r3, [r3, r2]
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	2b22      	cmp	r3, #34	@ 0x22
 800b2fa:	d109      	bne.n	800b310 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2180      	movs	r1, #128	@ 0x80
 800b308:	0209      	lsls	r1, r1, #8
 800b30a:	430a      	orrs	r2, r1
 800b30c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b30e:	e07a      	b.n	800b406 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2180      	movs	r1, #128	@ 0x80
 800b31c:	01c9      	lsls	r1, r1, #7
 800b31e:	430a      	orrs	r2, r1
 800b320:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b322:	e070      	b.n	800b406 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2140      	movs	r1, #64	@ 0x40
 800b328:	0018      	movs	r0, r3
 800b32a:	f000 fcef 	bl	800bd0c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b32e:	e06a      	b.n	800b406 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	2240      	movs	r2, #64	@ 0x40
 800b334:	4013      	ands	r3, r2
 800b336:	d058      	beq.n	800b3ea <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2240      	movs	r2, #64	@ 0x40
 800b33c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b33e:	d054      	beq.n	800b3ea <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2241      	movs	r2, #65	@ 0x41
 800b344:	5c9b      	ldrb	r3, [r3, r2]
 800b346:	b2db      	uxtb	r3, r3
 800b348:	2b22      	cmp	r3, #34	@ 0x22
 800b34a:	d101      	bne.n	800b350 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800b34c:	4b33      	ldr	r3, [pc, #204]	@ (800b41c <I2C_Mem_ISR_DMA+0x234>)
 800b34e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b354:	b29b      	uxth	r3, r3
 800b356:	2bff      	cmp	r3, #255	@ 0xff
 800b358:	d911      	bls.n	800b37e <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	22ff      	movs	r2, #255	@ 0xff
 800b35e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b364:	b299      	uxth	r1, r3
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b36a:	b2da      	uxtb	r2, r3
 800b36c:	2380      	movs	r3, #128	@ 0x80
 800b36e:	045c      	lsls	r4, r3, #17
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	0023      	movs	r3, r4
 800b378:	f000 feee 	bl	800c158 <I2C_TransferConfig>
 800b37c:	e012      	b.n	800b3a4 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b382:	b29a      	uxth	r2, r3
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b38c:	b299      	uxth	r1, r3
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b392:	b2da      	uxtb	r2, r3
 800b394:	2380      	movs	r3, #128	@ 0x80
 800b396:	049c      	lsls	r4, r3, #18
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	0023      	movs	r3, r4
 800b3a0:	f000 feda 	bl	800c158 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3ae:	1ad3      	subs	r3, r2, r3
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2241      	movs	r2, #65	@ 0x41
 800b3ba:	5c9b      	ldrb	r3, [r3, r2]
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	2b22      	cmp	r3, #34	@ 0x22
 800b3c0:	d109      	bne.n	800b3d6 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2180      	movs	r1, #128	@ 0x80
 800b3ce:	0209      	lsls	r1, r1, #8
 800b3d0:	430a      	orrs	r2, r1
 800b3d2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b3d4:	e017      	b.n	800b406 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2180      	movs	r1, #128	@ 0x80
 800b3e2:	01c9      	lsls	r1, r1, #7
 800b3e4:	430a      	orrs	r2, r1
 800b3e6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b3e8:	e00d      	b.n	800b406 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	2220      	movs	r2, #32
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	d009      	beq.n	800b406 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2220      	movs	r2, #32
 800b3f6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b3f8:	d005      	beq.n	800b406 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b3fa:	68ba      	ldr	r2, [r7, #8]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	0011      	movs	r1, r2
 800b400:	0018      	movs	r0, r3
 800b402:	f000 fa3d 	bl	800b880 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2240      	movs	r2, #64	@ 0x40
 800b40a:	2100      	movs	r1, #0
 800b40c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	0018      	movs	r0, r3
 800b412:	46bd      	mov	sp, r7
 800b414:	b007      	add	sp, #28
 800b416:	bd90      	pop	{r4, r7, pc}
 800b418:	80002000 	.word	0x80002000
 800b41c:	80002400 	.word	0x80002400

0800b420 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b088      	sub	sp, #32
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b430:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800b432:	2300      	movs	r3, #0
 800b434:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2240      	movs	r2, #64	@ 0x40
 800b43a:	5c9b      	ldrb	r3, [r3, r2]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d101      	bne.n	800b444 <I2C_Slave_ISR_DMA+0x24>
 800b440:	2302      	movs	r3, #2
 800b442:	e0cd      	b.n	800b5e0 <I2C_Slave_ISR_DMA+0x1c0>
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2240      	movs	r2, #64	@ 0x40
 800b448:	2101      	movs	r1, #1
 800b44a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	2220      	movs	r2, #32
 800b450:	4013      	ands	r3, r2
 800b452:	d009      	beq.n	800b468 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2220      	movs	r2, #32
 800b458:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b45a:	d005      	beq.n	800b468 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	0011      	movs	r1, r2
 800b462:	0018      	movs	r0, r3
 800b464:	f000 fada 	bl	800ba1c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	2210      	movs	r2, #16
 800b46c:	4013      	ands	r3, r2
 800b46e:	d100      	bne.n	800b472 <I2C_Slave_ISR_DMA+0x52>
 800b470:	e0a3      	b.n	800b5ba <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2210      	movs	r2, #16
 800b476:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b478:	d100      	bne.n	800b47c <I2C_Slave_ISR_DMA+0x5c>
 800b47a:	e09e      	b.n	800b5ba <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	2380      	movs	r3, #128	@ 0x80
 800b480:	01db      	lsls	r3, r3, #7
 800b482:	4013      	ands	r3, r2
 800b484:	d105      	bne.n	800b492 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	2380      	movs	r3, #128	@ 0x80
 800b48a:	021b      	lsls	r3, r3, #8
 800b48c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b48e:	d100      	bne.n	800b492 <I2C_Slave_ISR_DMA+0x72>
 800b490:	e08c      	b.n	800b5ac <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00c      	beq.n	800b4b4 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	2380      	movs	r3, #128	@ 0x80
 800b49e:	021b      	lsls	r3, r3, #8
 800b4a0:	4013      	ands	r3, r2
 800b4a2:	d007      	beq.n	800b4b4 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d101      	bne.n	800b4b4 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00c      	beq.n	800b4d6 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	2380      	movs	r3, #128	@ 0x80
 800b4c0:	01db      	lsls	r3, r3, #7
 800b4c2:	4013      	ands	r3, r2
 800b4c4:	d007      	beq.n	800b4d6 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d101      	bne.n	800b4d6 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d12d      	bne.n	800b538 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2241      	movs	r2, #65	@ 0x41
 800b4e0:	5c9b      	ldrb	r3, [r3, r2]
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	2b28      	cmp	r3, #40	@ 0x28
 800b4e6:	d10b      	bne.n	800b500 <I2C_Slave_ISR_DMA+0xe0>
 800b4e8:	69ba      	ldr	r2, [r7, #24]
 800b4ea:	2380      	movs	r3, #128	@ 0x80
 800b4ec:	049b      	lsls	r3, r3, #18
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d106      	bne.n	800b500 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800b4f2:	68ba      	ldr	r2, [r7, #8]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	0011      	movs	r1, r2
 800b4f8:	0018      	movs	r0, r3
 800b4fa:	f000 fbaf 	bl	800bc5c <I2C_ITListenCplt>
 800b4fe:	e054      	b.n	800b5aa <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2241      	movs	r2, #65	@ 0x41
 800b504:	5c9b      	ldrb	r3, [r3, r2]
 800b506:	b2db      	uxtb	r3, r3
 800b508:	2b29      	cmp	r3, #41	@ 0x29
 800b50a:	d110      	bne.n	800b52e <I2C_Slave_ISR_DMA+0x10e>
 800b50c:	69bb      	ldr	r3, [r7, #24]
 800b50e:	4a36      	ldr	r2, [pc, #216]	@ (800b5e8 <I2C_Slave_ISR_DMA+0x1c8>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d00c      	beq.n	800b52e <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2210      	movs	r2, #16
 800b51a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	0018      	movs	r0, r3
 800b520:	f000 fd1f 	bl	800bf62 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	0018      	movs	r0, r3
 800b528:	f000 f946 	bl	800b7b8 <I2C_ITSlaveSeqCplt>
 800b52c:	e03d      	b.n	800b5aa <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2210      	movs	r2, #16
 800b534:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800b536:	e03e      	b.n	800b5b6 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2210      	movs	r2, #16
 800b53e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b544:	2204      	movs	r2, #4
 800b546:	431a      	orrs	r2, r3
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800b54c:	2317      	movs	r3, #23
 800b54e:	18fb      	adds	r3, r7, r3
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	2141      	movs	r1, #65	@ 0x41
 800b554:	5c52      	ldrb	r2, [r2, r1]
 800b556:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d004      	beq.n	800b568 <I2C_Slave_ISR_DMA+0x148>
 800b55e:	69ba      	ldr	r2, [r7, #24]
 800b560:	2380      	movs	r3, #128	@ 0x80
 800b562:	045b      	lsls	r3, r3, #17
 800b564:	429a      	cmp	r2, r3
 800b566:	d126      	bne.n	800b5b6 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b568:	2217      	movs	r2, #23
 800b56a:	18bb      	adds	r3, r7, r2
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	2b21      	cmp	r3, #33	@ 0x21
 800b570:	d003      	beq.n	800b57a <I2C_Slave_ISR_DMA+0x15a>
 800b572:	18bb      	adds	r3, r7, r2
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	2b29      	cmp	r3, #41	@ 0x29
 800b578:	d103      	bne.n	800b582 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2221      	movs	r2, #33	@ 0x21
 800b57e:	631a      	str	r2, [r3, #48]	@ 0x30
 800b580:	e00b      	b.n	800b59a <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b582:	2217      	movs	r2, #23
 800b584:	18bb      	adds	r3, r7, r2
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	2b22      	cmp	r3, #34	@ 0x22
 800b58a:	d003      	beq.n	800b594 <I2C_Slave_ISR_DMA+0x174>
 800b58c:	18bb      	adds	r3, r7, r2
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	2b2a      	cmp	r3, #42	@ 0x2a
 800b592:	d102      	bne.n	800b59a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2222      	movs	r2, #34	@ 0x22
 800b598:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	0011      	movs	r1, r2
 800b5a2:	0018      	movs	r0, r3
 800b5a4:	f000 fbb2 	bl	800bd0c <I2C_ITError>
      if (treatdmanack == 1U)
 800b5a8:	e005      	b.n	800b5b6 <I2C_Slave_ISR_DMA+0x196>
 800b5aa:	e004      	b.n	800b5b6 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2210      	movs	r2, #16
 800b5b2:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b5b4:	e00f      	b.n	800b5d6 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800b5b6:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b5b8:	e00d      	b.n	800b5d6 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	2208      	movs	r2, #8
 800b5be:	4013      	ands	r3, r2
 800b5c0:	d009      	beq.n	800b5d6 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2208      	movs	r2, #8
 800b5c6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b5c8:	d005      	beq.n	800b5d6 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	0011      	movs	r1, r2
 800b5d0:	0018      	movs	r0, r3
 800b5d2:	f000 f80b 	bl	800b5ec <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2240      	movs	r2, #64	@ 0x40
 800b5da:	2100      	movs	r1, #0
 800b5dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	0018      	movs	r0, r3
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	b008      	add	sp, #32
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	ffff0000 	.word	0xffff0000

0800b5ec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b5ec:	b5b0      	push	{r4, r5, r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2241      	movs	r2, #65	@ 0x41
 800b5fa:	5c9b      	ldrb	r3, [r3, r2]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	001a      	movs	r2, r3
 800b600:	2328      	movs	r3, #40	@ 0x28
 800b602:	4013      	ands	r3, r2
 800b604:	2b28      	cmp	r3, #40	@ 0x28
 800b606:	d000      	beq.n	800b60a <I2C_ITAddrCplt+0x1e>
 800b608:	e088      	b.n	800b71c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	699b      	ldr	r3, [r3, #24]
 800b610:	0c1b      	lsrs	r3, r3, #16
 800b612:	b2da      	uxtb	r2, r3
 800b614:	250f      	movs	r5, #15
 800b616:	197b      	adds	r3, r7, r5
 800b618:	2101      	movs	r1, #1
 800b61a:	400a      	ands	r2, r1
 800b61c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	699b      	ldr	r3, [r3, #24]
 800b624:	0c1b      	lsrs	r3, r3, #16
 800b626:	b29a      	uxth	r2, r3
 800b628:	200c      	movs	r0, #12
 800b62a:	183b      	adds	r3, r7, r0
 800b62c:	21fe      	movs	r1, #254	@ 0xfe
 800b62e:	400a      	ands	r2, r1
 800b630:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	b29a      	uxth	r2, r3
 800b63a:	240a      	movs	r4, #10
 800b63c:	193b      	adds	r3, r7, r4
 800b63e:	0592      	lsls	r2, r2, #22
 800b640:	0d92      	lsrs	r2, r2, #22
 800b642:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68db      	ldr	r3, [r3, #12]
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	2308      	movs	r3, #8
 800b64e:	18fb      	adds	r3, r7, r3
 800b650:	21fe      	movs	r1, #254	@ 0xfe
 800b652:	400a      	ands	r2, r1
 800b654:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	2b02      	cmp	r3, #2
 800b65c:	d148      	bne.n	800b6f0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b65e:	0021      	movs	r1, r4
 800b660:	187b      	adds	r3, r7, r1
 800b662:	881b      	ldrh	r3, [r3, #0]
 800b664:	09db      	lsrs	r3, r3, #7
 800b666:	b29a      	uxth	r2, r3
 800b668:	183b      	adds	r3, r7, r0
 800b66a:	881b      	ldrh	r3, [r3, #0]
 800b66c:	4053      	eors	r3, r2
 800b66e:	b29b      	uxth	r3, r3
 800b670:	001a      	movs	r2, r3
 800b672:	2306      	movs	r3, #6
 800b674:	4013      	ands	r3, r2
 800b676:	d120      	bne.n	800b6ba <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800b678:	183b      	adds	r3, r7, r0
 800b67a:	187a      	adds	r2, r7, r1
 800b67c:	8812      	ldrh	r2, [r2, #0]
 800b67e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b684:	1c5a      	adds	r2, r3, #1
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b68e:	2b02      	cmp	r3, #2
 800b690:	d14c      	bne.n	800b72c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2200      	movs	r2, #0
 800b696:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2208      	movs	r2, #8
 800b69e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2240      	movs	r2, #64	@ 0x40
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b6a8:	183b      	adds	r3, r7, r0
 800b6aa:	881a      	ldrh	r2, [r3, #0]
 800b6ac:	197b      	adds	r3, r7, r5
 800b6ae:	7819      	ldrb	r1, [r3, #0]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	0018      	movs	r0, r3
 800b6b4:	f7ff fa39 	bl	800ab2a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b6b8:	e038      	b.n	800b72c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800b6ba:	240c      	movs	r4, #12
 800b6bc:	193b      	adds	r3, r7, r4
 800b6be:	2208      	movs	r2, #8
 800b6c0:	18ba      	adds	r2, r7, r2
 800b6c2:	8812      	ldrh	r2, [r2, #0]
 800b6c4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b6c6:	2380      	movs	r3, #128	@ 0x80
 800b6c8:	021a      	lsls	r2, r3, #8
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	0011      	movs	r1, r2
 800b6ce:	0018      	movs	r0, r3
 800b6d0:	f000 fe0a 	bl	800c2e8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2240      	movs	r2, #64	@ 0x40
 800b6d8:	2100      	movs	r1, #0
 800b6da:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b6dc:	193b      	adds	r3, r7, r4
 800b6de:	881a      	ldrh	r2, [r3, #0]
 800b6e0:	230f      	movs	r3, #15
 800b6e2:	18fb      	adds	r3, r7, r3
 800b6e4:	7819      	ldrb	r1, [r3, #0]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	0018      	movs	r0, r3
 800b6ea:	f7ff fa1e 	bl	800ab2a <HAL_I2C_AddrCallback>
}
 800b6ee:	e01d      	b.n	800b72c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b6f0:	2380      	movs	r3, #128	@ 0x80
 800b6f2:	021a      	lsls	r2, r3, #8
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	0011      	movs	r1, r2
 800b6f8:	0018      	movs	r0, r3
 800b6fa:	f000 fdf5 	bl	800c2e8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2240      	movs	r2, #64	@ 0x40
 800b702:	2100      	movs	r1, #0
 800b704:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b706:	230c      	movs	r3, #12
 800b708:	18fb      	adds	r3, r7, r3
 800b70a:	881a      	ldrh	r2, [r3, #0]
 800b70c:	230f      	movs	r3, #15
 800b70e:	18fb      	adds	r3, r7, r3
 800b710:	7819      	ldrb	r1, [r3, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	0018      	movs	r0, r3
 800b716:	f7ff fa08 	bl	800ab2a <HAL_I2C_AddrCallback>
}
 800b71a:	e007      	b.n	800b72c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2208      	movs	r2, #8
 800b722:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2240      	movs	r2, #64	@ 0x40
 800b728:	2100      	movs	r1, #0
 800b72a:	5499      	strb	r1, [r3, r2]
}
 800b72c:	46c0      	nop			@ (mov r8, r8)
 800b72e:	46bd      	mov	sp, r7
 800b730:	b004      	add	sp, #16
 800b732:	bdb0      	pop	{r4, r5, r7, pc}

0800b734 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2242      	movs	r2, #66	@ 0x42
 800b740:	2100      	movs	r1, #0
 800b742:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2241      	movs	r2, #65	@ 0x41
 800b748:	5c9b      	ldrb	r3, [r3, r2]
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	2b21      	cmp	r3, #33	@ 0x21
 800b74e:	d117      	bne.n	800b780 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2241      	movs	r2, #65	@ 0x41
 800b754:	2120      	movs	r1, #32
 800b756:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2211      	movs	r2, #17
 800b75c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2101      	movs	r1, #1
 800b768:	0018      	movs	r0, r3
 800b76a:	f000 fdbd 	bl	800c2e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2240      	movs	r2, #64	@ 0x40
 800b772:	2100      	movs	r1, #0
 800b774:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	0018      	movs	r0, r3
 800b77a:	f7ff f9b6 	bl	800aaea <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b77e:	e016      	b.n	800b7ae <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2241      	movs	r2, #65	@ 0x41
 800b784:	2120      	movs	r1, #32
 800b786:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2212      	movs	r2, #18
 800b78c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2102      	movs	r1, #2
 800b798:	0018      	movs	r0, r3
 800b79a:	f000 fda5 	bl	800c2e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2240      	movs	r2, #64	@ 0x40
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	0018      	movs	r0, r3
 800b7aa:	f7ff f9a6 	bl	800aafa <HAL_I2C_MasterRxCpltCallback>
}
 800b7ae:	46c0      	nop			@ (mov r8, r8)
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	b002      	add	sp, #8
 800b7b4:	bd80      	pop	{r7, pc}
	...

0800b7b8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2242      	movs	r2, #66	@ 0x42
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b7d0:	68fa      	ldr	r2, [r7, #12]
 800b7d2:	2380      	movs	r3, #128	@ 0x80
 800b7d4:	01db      	lsls	r3, r3, #7
 800b7d6:	4013      	ands	r3, r2
 800b7d8:	d008      	beq.n	800b7ec <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4924      	ldr	r1, [pc, #144]	@ (800b878 <I2C_ITSlaveSeqCplt+0xc0>)
 800b7e6:	400a      	ands	r2, r1
 800b7e8:	601a      	str	r2, [r3, #0]
 800b7ea:	e00c      	b.n	800b806 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	2380      	movs	r3, #128	@ 0x80
 800b7f0:	021b      	lsls	r3, r3, #8
 800b7f2:	4013      	ands	r3, r2
 800b7f4:	d007      	beq.n	800b806 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	491e      	ldr	r1, [pc, #120]	@ (800b87c <I2C_ITSlaveSeqCplt+0xc4>)
 800b802:	400a      	ands	r2, r1
 800b804:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2241      	movs	r2, #65	@ 0x41
 800b80a:	5c9b      	ldrb	r3, [r3, r2]
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	2b29      	cmp	r3, #41	@ 0x29
 800b810:	d114      	bne.n	800b83c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2241      	movs	r2, #65	@ 0x41
 800b816:	2128      	movs	r1, #40	@ 0x28
 800b818:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2221      	movs	r2, #33	@ 0x21
 800b81e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2101      	movs	r1, #1
 800b824:	0018      	movs	r0, r3
 800b826:	f000 fd5f 	bl	800c2e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2240      	movs	r2, #64	@ 0x40
 800b82e:	2100      	movs	r1, #0
 800b830:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	0018      	movs	r0, r3
 800b836:	f7ff f968 	bl	800ab0a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b83a:	e019      	b.n	800b870 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2241      	movs	r2, #65	@ 0x41
 800b840:	5c9b      	ldrb	r3, [r3, r2]
 800b842:	b2db      	uxtb	r3, r3
 800b844:	2b2a      	cmp	r3, #42	@ 0x2a
 800b846:	d113      	bne.n	800b870 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2241      	movs	r2, #65	@ 0x41
 800b84c:	2128      	movs	r1, #40	@ 0x28
 800b84e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2222      	movs	r2, #34	@ 0x22
 800b854:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2102      	movs	r1, #2
 800b85a:	0018      	movs	r0, r3
 800b85c:	f000 fd44 	bl	800c2e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2240      	movs	r2, #64	@ 0x40
 800b864:	2100      	movs	r1, #0
 800b866:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	0018      	movs	r0, r3
 800b86c:	f7ff f955 	bl	800ab1a <HAL_I2C_SlaveRxCpltCallback>
}
 800b870:	46c0      	nop			@ (mov r8, r8)
 800b872:	46bd      	mov	sp, r7
 800b874:	b004      	add	sp, #16
 800b876:	bd80      	pop	{r7, pc}
 800b878:	ffffbfff 	.word	0xffffbfff
 800b87c:	ffff7fff 	.word	0xffff7fff

0800b880 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2220      	movs	r2, #32
 800b894:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2241      	movs	r2, #65	@ 0x41
 800b89a:	5c9b      	ldrb	r3, [r3, r2]
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	2b21      	cmp	r3, #33	@ 0x21
 800b8a0:	d108      	bne.n	800b8b4 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2101      	movs	r1, #1
 800b8a6:	0018      	movs	r0, r3
 800b8a8:	f000 fd1e 	bl	800c2e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2211      	movs	r2, #17
 800b8b0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b8b2:	e00d      	b.n	800b8d0 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2241      	movs	r2, #65	@ 0x41
 800b8b8:	5c9b      	ldrb	r3, [r3, r2]
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	2b22      	cmp	r3, #34	@ 0x22
 800b8be:	d107      	bne.n	800b8d0 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2102      	movs	r1, #2
 800b8c4:	0018      	movs	r0, r3
 800b8c6:	f000 fd0f 	bl	800c2e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2212      	movs	r2, #18
 800b8ce:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	685a      	ldr	r2, [r3, #4]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	494e      	ldr	r1, [pc, #312]	@ (800ba14 <I2C_ITMasterCplt+0x194>)
 800b8dc:	400a      	ands	r2, r1
 800b8de:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	4a4b      	ldr	r2, [pc, #300]	@ (800ba18 <I2C_ITMasterCplt+0x198>)
 800b8ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	2210      	movs	r2, #16
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	d009      	beq.n	800b908 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2210      	movs	r2, #16
 800b8fa:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b900:	2204      	movs	r2, #4
 800b902:	431a      	orrs	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2241      	movs	r2, #65	@ 0x41
 800b90c:	5c9b      	ldrb	r3, [r3, r2]
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	2b60      	cmp	r3, #96	@ 0x60
 800b912:	d109      	bne.n	800b928 <I2C_ITMasterCplt+0xa8>
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	2204      	movs	r2, #4
 800b918:	4013      	ands	r3, r2
 800b91a:	d005      	beq.n	800b928 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b922:	b2db      	uxtb	r3, r3
 800b924:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800b926:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	0018      	movs	r0, r3
 800b92c:	f000 fb19 	bl	800bf62 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b934:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2241      	movs	r2, #65	@ 0x41
 800b93a:	5c9b      	ldrb	r3, [r3, r2]
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	2b60      	cmp	r3, #96	@ 0x60
 800b940:	d002      	beq.n	800b948 <I2C_ITMasterCplt+0xc8>
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d007      	beq.n	800b958 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	0011      	movs	r1, r2
 800b950:	0018      	movs	r0, r3
 800b952:	f000 f9db 	bl	800bd0c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b956:	e058      	b.n	800ba0a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2241      	movs	r2, #65	@ 0x41
 800b95c:	5c9b      	ldrb	r3, [r3, r2]
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	2b21      	cmp	r3, #33	@ 0x21
 800b962:	d126      	bne.n	800b9b2 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2241      	movs	r2, #65	@ 0x41
 800b968:	2120      	movs	r1, #32
 800b96a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2242      	movs	r2, #66	@ 0x42
 800b976:	5c9b      	ldrb	r3, [r3, r2]
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	2b40      	cmp	r3, #64	@ 0x40
 800b97c:	d10c      	bne.n	800b998 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2242      	movs	r2, #66	@ 0x42
 800b982:	2100      	movs	r1, #0
 800b984:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2240      	movs	r2, #64	@ 0x40
 800b98a:	2100      	movs	r1, #0
 800b98c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	0018      	movs	r0, r3
 800b992:	f7ff f8e2 	bl	800ab5a <HAL_I2C_MemTxCpltCallback>
}
 800b996:	e038      	b.n	800ba0a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2242      	movs	r2, #66	@ 0x42
 800b99c:	2100      	movs	r1, #0
 800b99e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2240      	movs	r2, #64	@ 0x40
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	0018      	movs	r0, r3
 800b9ac:	f7ff f89d 	bl	800aaea <HAL_I2C_MasterTxCpltCallback>
}
 800b9b0:	e02b      	b.n	800ba0a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2241      	movs	r2, #65	@ 0x41
 800b9b6:	5c9b      	ldrb	r3, [r3, r2]
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b22      	cmp	r3, #34	@ 0x22
 800b9bc:	d125      	bne.n	800ba0a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2241      	movs	r2, #65	@ 0x41
 800b9c2:	2120      	movs	r1, #32
 800b9c4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2242      	movs	r2, #66	@ 0x42
 800b9d0:	5c9b      	ldrb	r3, [r3, r2]
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	2b40      	cmp	r3, #64	@ 0x40
 800b9d6:	d10c      	bne.n	800b9f2 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2242      	movs	r2, #66	@ 0x42
 800b9dc:	2100      	movs	r1, #0
 800b9de:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2240      	movs	r2, #64	@ 0x40
 800b9e4:	2100      	movs	r1, #0
 800b9e6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	0018      	movs	r0, r3
 800b9ec:	f7ff f8bd 	bl	800ab6a <HAL_I2C_MemRxCpltCallback>
}
 800b9f0:	e00b      	b.n	800ba0a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2242      	movs	r2, #66	@ 0x42
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2240      	movs	r2, #64	@ 0x40
 800b9fe:	2100      	movs	r1, #0
 800ba00:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	0018      	movs	r0, r3
 800ba06:	f7ff f878 	bl	800aafa <HAL_I2C_MasterRxCpltCallback>
}
 800ba0a:	46c0      	nop			@ (mov r8, r8)
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	b006      	add	sp, #24
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	46c0      	nop			@ (mov r8, r8)
 800ba14:	fe00e800 	.word	0xfe00e800
 800ba18:	ffff0000 	.word	0xffff0000

0800ba1c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b086      	sub	sp, #24
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ba32:	200f      	movs	r0, #15
 800ba34:	183b      	adds	r3, r7, r0
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	2141      	movs	r1, #65	@ 0x41
 800ba3a:	5c52      	ldrb	r2, [r2, r1]
 800ba3c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2220      	movs	r2, #32
 800ba44:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ba46:	183b      	adds	r3, r7, r0
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	2b21      	cmp	r3, #33	@ 0x21
 800ba4c:	d003      	beq.n	800ba56 <I2C_ITSlaveCplt+0x3a>
 800ba4e:	183b      	adds	r3, r7, r0
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	2b29      	cmp	r3, #41	@ 0x29
 800ba54:	d109      	bne.n	800ba6a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800ba56:	4a7b      	ldr	r2, [pc, #492]	@ (800bc44 <I2C_ITSlaveCplt+0x228>)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	0011      	movs	r1, r2
 800ba5c:	0018      	movs	r0, r3
 800ba5e:	f000 fc43 	bl	800c2e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2221      	movs	r2, #33	@ 0x21
 800ba66:	631a      	str	r2, [r3, #48]	@ 0x30
 800ba68:	e011      	b.n	800ba8e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ba6a:	220f      	movs	r2, #15
 800ba6c:	18bb      	adds	r3, r7, r2
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	2b22      	cmp	r3, #34	@ 0x22
 800ba72:	d003      	beq.n	800ba7c <I2C_ITSlaveCplt+0x60>
 800ba74:	18bb      	adds	r3, r7, r2
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba7a:	d108      	bne.n	800ba8e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800ba7c:	4a72      	ldr	r2, [pc, #456]	@ (800bc48 <I2C_ITSlaveCplt+0x22c>)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	0011      	movs	r1, r2
 800ba82:	0018      	movs	r0, r3
 800ba84:	f000 fc30 	bl	800c2e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2222      	movs	r2, #34	@ 0x22
 800ba8c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	685a      	ldr	r2, [r3, #4]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2180      	movs	r1, #128	@ 0x80
 800ba9a:	0209      	lsls	r1, r1, #8
 800ba9c:	430a      	orrs	r2, r1
 800ba9e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	685a      	ldr	r2, [r3, #4]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4968      	ldr	r1, [pc, #416]	@ (800bc4c <I2C_ITSlaveCplt+0x230>)
 800baac:	400a      	ands	r2, r1
 800baae:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	0018      	movs	r0, r3
 800bab4:	f000 fa55 	bl	800bf62 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bab8:	693a      	ldr	r2, [r7, #16]
 800baba:	2380      	movs	r3, #128	@ 0x80
 800babc:	01db      	lsls	r3, r3, #7
 800babe:	4013      	ands	r3, r2
 800bac0:	d013      	beq.n	800baea <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4960      	ldr	r1, [pc, #384]	@ (800bc50 <I2C_ITSlaveCplt+0x234>)
 800bace:	400a      	ands	r2, r1
 800bad0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d01f      	beq.n	800bb1a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bae8:	e017      	b.n	800bb1a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800baea:	693a      	ldr	r2, [r7, #16]
 800baec:	2380      	movs	r3, #128	@ 0x80
 800baee:	021b      	lsls	r3, r3, #8
 800baf0:	4013      	ands	r3, r2
 800baf2:	d012      	beq.n	800bb1a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	4955      	ldr	r1, [pc, #340]	@ (800bc54 <I2C_ITSlaveCplt+0x238>)
 800bb00:	400a      	ands	r2, r1
 800bb02:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d006      	beq.n	800bb1a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	b29a      	uxth	r2, r3
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	2204      	movs	r2, #4
 800bb1e:	4013      	ands	r3, r2
 800bb20:	d020      	beq.n	800bb64 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	2204      	movs	r2, #4
 800bb26:	4393      	bics	r3, r2
 800bb28:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb34:	b2d2      	uxtb	r2, r2
 800bb36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb3c:	1c5a      	adds	r2, r3, #1
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00c      	beq.n	800bb64 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	b29a      	uxth	r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	b29a      	uxth	r2, r3
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d005      	beq.n	800bb7a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb72:	2204      	movs	r2, #4
 800bb74:	431a      	orrs	r2, r3
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2242      	movs	r2, #66	@ 0x42
 800bb7e:	2100      	movs	r1, #0
 800bb80:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d013      	beq.n	800bbb8 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	0011      	movs	r1, r2
 800bb98:	0018      	movs	r0, r3
 800bb9a:	f000 f8b7 	bl	800bd0c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2241      	movs	r2, #65	@ 0x41
 800bba2:	5c9b      	ldrb	r3, [r3, r2]
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	2b28      	cmp	r3, #40	@ 0x28
 800bba8:	d147      	bne.n	800bc3a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800bbaa:	697a      	ldr	r2, [r7, #20]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	0011      	movs	r1, r2
 800bbb0:	0018      	movs	r0, r3
 800bbb2:	f000 f853 	bl	800bc5c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bbb6:	e040      	b.n	800bc3a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbbc:	4a26      	ldr	r2, [pc, #152]	@ (800bc58 <I2C_ITSlaveCplt+0x23c>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d016      	beq.n	800bbf0 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	0018      	movs	r0, r3
 800bbc6:	f7ff fdf7 	bl	800b7b8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	4a22      	ldr	r2, [pc, #136]	@ (800bc58 <I2C_ITSlaveCplt+0x23c>)
 800bbce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2241      	movs	r2, #65	@ 0x41
 800bbd4:	2120      	movs	r1, #32
 800bbd6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2240      	movs	r2, #64	@ 0x40
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	0018      	movs	r0, r3
 800bbea:	f7fe ffae 	bl	800ab4a <HAL_I2C_ListenCpltCallback>
}
 800bbee:	e024      	b.n	800bc3a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2241      	movs	r2, #65	@ 0x41
 800bbf4:	5c9b      	ldrb	r3, [r3, r2]
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b22      	cmp	r3, #34	@ 0x22
 800bbfa:	d10f      	bne.n	800bc1c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2241      	movs	r2, #65	@ 0x41
 800bc00:	2120      	movs	r1, #32
 800bc02:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2240      	movs	r2, #64	@ 0x40
 800bc0e:	2100      	movs	r1, #0
 800bc10:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	0018      	movs	r0, r3
 800bc16:	f7fe ff80 	bl	800ab1a <HAL_I2C_SlaveRxCpltCallback>
}
 800bc1a:	e00e      	b.n	800bc3a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2241      	movs	r2, #65	@ 0x41
 800bc20:	2120      	movs	r1, #32
 800bc22:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2240      	movs	r2, #64	@ 0x40
 800bc2e:	2100      	movs	r1, #0
 800bc30:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	0018      	movs	r0, r3
 800bc36:	f7fe ff68 	bl	800ab0a <HAL_I2C_SlaveTxCpltCallback>
}
 800bc3a:	46c0      	nop			@ (mov r8, r8)
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	b006      	add	sp, #24
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	46c0      	nop			@ (mov r8, r8)
 800bc44:	00008001 	.word	0x00008001
 800bc48:	00008002 	.word	0x00008002
 800bc4c:	fe00e800 	.word	0xfe00e800
 800bc50:	ffffbfff 	.word	0xffffbfff
 800bc54:	ffff7fff 	.word	0xffff7fff
 800bc58:	ffff0000 	.word	0xffff0000

0800bc5c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	4a26      	ldr	r2, [pc, #152]	@ (800bd04 <I2C_ITListenCplt+0xa8>)
 800bc6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2241      	movs	r2, #65	@ 0x41
 800bc76:	2120      	movs	r1, #32
 800bc78:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2242      	movs	r2, #66	@ 0x42
 800bc7e:	2100      	movs	r1, #0
 800bc80:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	2204      	movs	r2, #4
 800bc8c:	4013      	ands	r3, r2
 800bc8e:	d022      	beq.n	800bcd6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc9a:	b2d2      	uxtb	r2, r2
 800bc9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bca2:	1c5a      	adds	r2, r3, #1
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d012      	beq.n	800bcd6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	3b01      	subs	r3, #1
 800bcc4:	b29a      	uxth	r2, r3
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcce:	2204      	movs	r2, #4
 800bcd0:	431a      	orrs	r2, r3
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bcd6:	4a0c      	ldr	r2, [pc, #48]	@ (800bd08 <I2C_ITListenCplt+0xac>)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	0011      	movs	r1, r2
 800bcdc:	0018      	movs	r0, r3
 800bcde:	f000 fb03 	bl	800c2e8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2210      	movs	r2, #16
 800bce8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2240      	movs	r2, #64	@ 0x40
 800bcee:	2100      	movs	r1, #0
 800bcf0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	0018      	movs	r0, r3
 800bcf6:	f7fe ff28 	bl	800ab4a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800bcfa:	46c0      	nop			@ (mov r8, r8)
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	b002      	add	sp, #8
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	46c0      	nop			@ (mov r8, r8)
 800bd04:	ffff0000 	.word	0xffff0000
 800bd08:	00008003 	.word	0x00008003

0800bd0c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bd16:	200f      	movs	r0, #15
 800bd18:	183b      	adds	r3, r7, r0
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	2141      	movs	r1, #65	@ 0x41
 800bd1e:	5c52      	ldrb	r2, [r2, r1]
 800bd20:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2242      	movs	r2, #66	@ 0x42
 800bd26:	2100      	movs	r1, #0
 800bd28:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4a72      	ldr	r2, [pc, #456]	@ (800bef8 <I2C_ITError+0x1ec>)
 800bd2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	431a      	orrs	r2, r3
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800bd42:	183b      	adds	r3, r7, r0
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	2b28      	cmp	r3, #40	@ 0x28
 800bd48:	d007      	beq.n	800bd5a <I2C_ITError+0x4e>
 800bd4a:	183b      	adds	r3, r7, r0
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	2b29      	cmp	r3, #41	@ 0x29
 800bd50:	d003      	beq.n	800bd5a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800bd52:	183b      	adds	r3, r7, r0
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd58:	d10c      	bne.n	800bd74 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2103      	movs	r1, #3
 800bd5e:	0018      	movs	r0, r3
 800bd60:	f000 fac2 	bl	800c2e8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2241      	movs	r2, #65	@ 0x41
 800bd68:	2128      	movs	r1, #40	@ 0x28
 800bd6a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4a63      	ldr	r2, [pc, #396]	@ (800befc <I2C_ITError+0x1f0>)
 800bd70:	635a      	str	r2, [r3, #52]	@ 0x34
 800bd72:	e032      	b.n	800bdda <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bd74:	4a62      	ldr	r2, [pc, #392]	@ (800bf00 <I2C_ITError+0x1f4>)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	0011      	movs	r1, r2
 800bd7a:	0018      	movs	r0, r3
 800bd7c:	f000 fab4 	bl	800c2e8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	0018      	movs	r0, r3
 800bd84:	f000 f8ed 	bl	800bf62 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2241      	movs	r2, #65	@ 0x41
 800bd8c:	5c9b      	ldrb	r3, [r3, r2]
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	2b60      	cmp	r3, #96	@ 0x60
 800bd92:	d01f      	beq.n	800bdd4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2241      	movs	r2, #65	@ 0x41
 800bd98:	2120      	movs	r1, #32
 800bd9a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	699b      	ldr	r3, [r3, #24]
 800bda2:	2220      	movs	r2, #32
 800bda4:	4013      	ands	r3, r2
 800bda6:	2b20      	cmp	r3, #32
 800bda8:	d114      	bne.n	800bdd4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	699b      	ldr	r3, [r3, #24]
 800bdb0:	2210      	movs	r2, #16
 800bdb2:	4013      	ands	r3, r2
 800bdb4:	2b10      	cmp	r3, #16
 800bdb6:	d109      	bne.n	800bdcc <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	2210      	movs	r2, #16
 800bdbe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdc4:	2204      	movs	r2, #4
 800bdc6:	431a      	orrs	r2, r3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	2220      	movs	r2, #32
 800bdd2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdde:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d03b      	beq.n	800be60 <I2C_ITError+0x154>
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	2b11      	cmp	r3, #17
 800bdec:	d002      	beq.n	800bdf4 <I2C_ITError+0xe8>
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	2b21      	cmp	r3, #33	@ 0x21
 800bdf2:	d135      	bne.n	800be60 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	2380      	movs	r3, #128	@ 0x80
 800bdfc:	01db      	lsls	r3, r3, #7
 800bdfe:	401a      	ands	r2, r3
 800be00:	2380      	movs	r3, #128	@ 0x80
 800be02:	01db      	lsls	r3, r3, #7
 800be04:	429a      	cmp	r2, r3
 800be06:	d107      	bne.n	800be18 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	493c      	ldr	r1, [pc, #240]	@ (800bf04 <I2C_ITError+0x1f8>)
 800be14:	400a      	ands	r2, r1
 800be16:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be1c:	0018      	movs	r0, r3
 800be1e:	f7fe f896 	bl	8009f4e <HAL_DMA_GetState>
 800be22:	0003      	movs	r3, r0
 800be24:	2b01      	cmp	r3, #1
 800be26:	d016      	beq.n	800be56 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be2c:	4a36      	ldr	r2, [pc, #216]	@ (800bf08 <I2C_ITError+0x1fc>)
 800be2e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2240      	movs	r2, #64	@ 0x40
 800be34:	2100      	movs	r1, #0
 800be36:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be3c:	0018      	movs	r0, r3
 800be3e:	f7fd ff91 	bl	8009d64 <HAL_DMA_Abort_IT>
 800be42:	1e03      	subs	r3, r0, #0
 800be44:	d051      	beq.n	800beea <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be50:	0018      	movs	r0, r3
 800be52:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800be54:	e049      	b.n	800beea <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	0018      	movs	r0, r3
 800be5a:	f000 f859 	bl	800bf10 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800be5e:	e044      	b.n	800beea <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be64:	2b00      	cmp	r3, #0
 800be66:	d03b      	beq.n	800bee0 <I2C_ITError+0x1d4>
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	2b12      	cmp	r3, #18
 800be6c:	d002      	beq.n	800be74 <I2C_ITError+0x168>
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	2b22      	cmp	r3, #34	@ 0x22
 800be72:	d135      	bne.n	800bee0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	2380      	movs	r3, #128	@ 0x80
 800be7c:	021b      	lsls	r3, r3, #8
 800be7e:	401a      	ands	r2, r3
 800be80:	2380      	movs	r3, #128	@ 0x80
 800be82:	021b      	lsls	r3, r3, #8
 800be84:	429a      	cmp	r2, r3
 800be86:	d107      	bne.n	800be98 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	491e      	ldr	r1, [pc, #120]	@ (800bf0c <I2C_ITError+0x200>)
 800be94:	400a      	ands	r2, r1
 800be96:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be9c:	0018      	movs	r0, r3
 800be9e:	f7fe f856 	bl	8009f4e <HAL_DMA_GetState>
 800bea2:	0003      	movs	r3, r0
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d016      	beq.n	800bed6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beac:	4a16      	ldr	r2, [pc, #88]	@ (800bf08 <I2C_ITError+0x1fc>)
 800beae:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2240      	movs	r2, #64	@ 0x40
 800beb4:	2100      	movs	r1, #0
 800beb6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bebc:	0018      	movs	r0, r3
 800bebe:	f7fd ff51 	bl	8009d64 <HAL_DMA_Abort_IT>
 800bec2:	1e03      	subs	r3, r0, #0
 800bec4:	d013      	beq.n	800beee <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bed0:	0018      	movs	r0, r3
 800bed2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bed4:	e00b      	b.n	800beee <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	0018      	movs	r0, r3
 800beda:	f000 f819 	bl	800bf10 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bede:	e006      	b.n	800beee <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	0018      	movs	r0, r3
 800bee4:	f000 f814 	bl	800bf10 <I2C_TreatErrorCallback>
  }
}
 800bee8:	e002      	b.n	800bef0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800beea:	46c0      	nop			@ (mov r8, r8)
 800beec:	e000      	b.n	800bef0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800beee:	46c0      	nop			@ (mov r8, r8)
}
 800bef0:	46c0      	nop			@ (mov r8, r8)
 800bef2:	46bd      	mov	sp, r7
 800bef4:	b004      	add	sp, #16
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	ffff0000 	.word	0xffff0000
 800befc:	0800adf1 	.word	0x0800adf1
 800bf00:	00008003 	.word	0x00008003
 800bf04:	ffffbfff 	.word	0xffffbfff
 800bf08:	0800c11b 	.word	0x0800c11b
 800bf0c:	ffff7fff 	.word	0xffff7fff

0800bf10 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b082      	sub	sp, #8
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2241      	movs	r2, #65	@ 0x41
 800bf1c:	5c9b      	ldrb	r3, [r3, r2]
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	2b60      	cmp	r3, #96	@ 0x60
 800bf22:	d10f      	bne.n	800bf44 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2241      	movs	r2, #65	@ 0x41
 800bf28:	2120      	movs	r1, #32
 800bf2a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2240      	movs	r2, #64	@ 0x40
 800bf36:	2100      	movs	r1, #0
 800bf38:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	0018      	movs	r0, r3
 800bf3e:	f7fe fe24 	bl	800ab8a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bf42:	e00a      	b.n	800bf5a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2240      	movs	r2, #64	@ 0x40
 800bf4e:	2100      	movs	r1, #0
 800bf50:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	0018      	movs	r0, r3
 800bf56:	f7fe fe10 	bl	800ab7a <HAL_I2C_ErrorCallback>
}
 800bf5a:	46c0      	nop			@ (mov r8, r8)
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	b002      	add	sp, #8
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b082      	sub	sp, #8
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	699b      	ldr	r3, [r3, #24]
 800bf70:	2202      	movs	r2, #2
 800bf72:	4013      	ands	r3, r2
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d103      	bne.n	800bf80 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	699b      	ldr	r3, [r3, #24]
 800bf86:	2201      	movs	r2, #1
 800bf88:	4013      	ands	r3, r2
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d007      	beq.n	800bf9e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	699a      	ldr	r2, [r3, #24]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2101      	movs	r1, #1
 800bf9a:	430a      	orrs	r2, r1
 800bf9c:	619a      	str	r2, [r3, #24]
  }
}
 800bf9e:	46c0      	nop			@ (mov r8, r8)
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	b002      	add	sp, #8
 800bfa4:	bd80      	pop	{r7, pc}
	...

0800bfa8 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b084      	sub	sp, #16
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfb4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4920      	ldr	r1, [pc, #128]	@ (800c044 <I2C_DMAMasterTransmitCplt+0x9c>)
 800bfc2:	400a      	ands	r2, r1
 800bfc4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d105      	bne.n	800bfdc <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	2120      	movs	r1, #32
 800bfd4:	0018      	movs	r0, r3
 800bfd6:	f000 f8f9 	bl	800c1cc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800bfda:	e02e      	b.n	800c03a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800bfe4:	189a      	adds	r2, r3, r2
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	2bff      	cmp	r3, #255	@ 0xff
 800bff2:	d903      	bls.n	800bffc <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	22ff      	movs	r2, #255	@ 0xff
 800bff8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800bffa:	e004      	b.n	800c006 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c000:	b29a      	uxth	r2, r3
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c00e:	0019      	movs	r1, r3
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	3328      	adds	r3, #40	@ 0x28
 800c016:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800c01c:	f7fd fdfc 	bl	8009c18 <HAL_DMA_Start_IT>
 800c020:	1e03      	subs	r3, r0, #0
 800c022:	d005      	beq.n	800c030 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2110      	movs	r1, #16
 800c028:	0018      	movs	r0, r3
 800c02a:	f7ff fe6f 	bl	800bd0c <I2C_ITError>
}
 800c02e:	e004      	b.n	800c03a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2140      	movs	r1, #64	@ 0x40
 800c034:	0018      	movs	r0, r3
 800c036:	f000 f8c9 	bl	800c1cc <I2C_Enable_IRQ>
}
 800c03a:	46c0      	nop			@ (mov r8, r8)
 800c03c:	46bd      	mov	sp, r7
 800c03e:	b004      	add	sp, #16
 800c040:	bd80      	pop	{r7, pc}
 800c042:	46c0      	nop			@ (mov r8, r8)
 800c044:	ffffbfff 	.word	0xffffbfff

0800c048 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c054:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4920      	ldr	r1, [pc, #128]	@ (800c0e4 <I2C_DMAMasterReceiveCplt+0x9c>)
 800c062:	400a      	ands	r2, r1
 800c064:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d105      	bne.n	800c07c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2120      	movs	r1, #32
 800c074:	0018      	movs	r0, r3
 800c076:	f000 f8a9 	bl	800c1cc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800c07a:	e02e      	b.n	800c0da <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c080:	68fa      	ldr	r2, [r7, #12]
 800c082:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c084:	189a      	adds	r2, r3, r2
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c08e:	b29b      	uxth	r3, r3
 800c090:	2bff      	cmp	r3, #255	@ 0xff
 800c092:	d903      	bls.n	800c09c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	22ff      	movs	r2, #255	@ 0xff
 800c098:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c09a:	e004      	b.n	800c0a6 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0a0:	b29a      	uxth	r2, r3
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	3324      	adds	r3, #36	@ 0x24
 800c0b0:	0019      	movs	r1, r3
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0b6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800c0bc:	f7fd fdac 	bl	8009c18 <HAL_DMA_Start_IT>
 800c0c0:	1e03      	subs	r3, r0, #0
 800c0c2:	d005      	beq.n	800c0d0 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2110      	movs	r1, #16
 800c0c8:	0018      	movs	r0, r3
 800c0ca:	f7ff fe1f 	bl	800bd0c <I2C_ITError>
}
 800c0ce:	e004      	b.n	800c0da <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2140      	movs	r1, #64	@ 0x40
 800c0d4:	0018      	movs	r0, r3
 800c0d6:	f000 f879 	bl	800c1cc <I2C_Enable_IRQ>
}
 800c0da:	46c0      	nop			@ (mov r8, r8)
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	b004      	add	sp, #16
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	46c0      	nop			@ (mov r8, r8)
 800c0e4:	ffff7fff 	.word	0xffff7fff

0800c0e8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0f4:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	685a      	ldr	r2, [r3, #4]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2180      	movs	r1, #128	@ 0x80
 800c102:	0209      	lsls	r1, r1, #8
 800c104:	430a      	orrs	r2, r1
 800c106:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2110      	movs	r1, #16
 800c10c:	0018      	movs	r0, r3
 800c10e:	f7ff fdfd 	bl	800bd0c <I2C_ITError>
}
 800c112:	46c0      	nop			@ (mov r8, r8)
 800c114:	46bd      	mov	sp, r7
 800c116:	b004      	add	sp, #16
 800c118:	bd80      	pop	{r7, pc}

0800c11a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b084      	sub	sp, #16
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c126:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d003      	beq.n	800c138 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c134:	2200      	movs	r2, #0
 800c136:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d003      	beq.n	800c148 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c144:	2200      	movs	r2, #0
 800c146:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	0018      	movs	r0, r3
 800c14c:	f7ff fee0 	bl	800bf10 <I2C_TreatErrorCallback>
}
 800c150:	46c0      	nop			@ (mov r8, r8)
 800c152:	46bd      	mov	sp, r7
 800c154:	b004      	add	sp, #16
 800c156:	bd80      	pop	{r7, pc}

0800c158 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c158:	b590      	push	{r4, r7, lr}
 800c15a:	b087      	sub	sp, #28
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	60f8      	str	r0, [r7, #12]
 800c160:	0008      	movs	r0, r1
 800c162:	0011      	movs	r1, r2
 800c164:	607b      	str	r3, [r7, #4]
 800c166:	240a      	movs	r4, #10
 800c168:	193b      	adds	r3, r7, r4
 800c16a:	1c02      	adds	r2, r0, #0
 800c16c:	801a      	strh	r2, [r3, #0]
 800c16e:	2009      	movs	r0, #9
 800c170:	183b      	adds	r3, r7, r0
 800c172:	1c0a      	adds	r2, r1, #0
 800c174:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c176:	193b      	adds	r3, r7, r4
 800c178:	881b      	ldrh	r3, [r3, #0]
 800c17a:	059b      	lsls	r3, r3, #22
 800c17c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c17e:	183b      	adds	r3, r7, r0
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	0419      	lsls	r1, r3, #16
 800c184:	23ff      	movs	r3, #255	@ 0xff
 800c186:	041b      	lsls	r3, r3, #16
 800c188:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c18a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c192:	4313      	orrs	r3, r2
 800c194:	005b      	lsls	r3, r3, #1
 800c196:	085b      	lsrs	r3, r3, #1
 800c198:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1a2:	0d51      	lsrs	r1, r2, #21
 800c1a4:	2280      	movs	r2, #128	@ 0x80
 800c1a6:	00d2      	lsls	r2, r2, #3
 800c1a8:	400a      	ands	r2, r1
 800c1aa:	4907      	ldr	r1, [pc, #28]	@ (800c1c8 <I2C_TransferConfig+0x70>)
 800c1ac:	430a      	orrs	r2, r1
 800c1ae:	43d2      	mvns	r2, r2
 800c1b0:	401a      	ands	r2, r3
 800c1b2:	0011      	movs	r1, r2
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	697a      	ldr	r2, [r7, #20]
 800c1ba:	430a      	orrs	r2, r1
 800c1bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c1be:	46c0      	nop			@ (mov r8, r8)
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	b007      	add	sp, #28
 800c1c4:	bd90      	pop	{r4, r7, pc}
 800c1c6:	46c0      	nop			@ (mov r8, r8)
 800c1c8:	03ff63ff 	.word	0x03ff63ff

0800c1cc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	000a      	movs	r2, r1
 800c1d6:	1cbb      	adds	r3, r7, #2
 800c1d8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1e2:	4b3e      	ldr	r3, [pc, #248]	@ (800c2dc <I2C_Enable_IRQ+0x110>)
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d035      	beq.n	800c254 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800c1ec:	4b3c      	ldr	r3, [pc, #240]	@ (800c2e0 <I2C_Enable_IRQ+0x114>)
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d030      	beq.n	800c254 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800c1f6:	4b3b      	ldr	r3, [pc, #236]	@ (800c2e4 <I2C_Enable_IRQ+0x118>)
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d02b      	beq.n	800c254 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c1fc:	1cbb      	adds	r3, r7, #2
 800c1fe:	2200      	movs	r2, #0
 800c200:	5e9b      	ldrsh	r3, [r3, r2]
 800c202:	2b00      	cmp	r3, #0
 800c204:	da03      	bge.n	800c20e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	22b8      	movs	r2, #184	@ 0xb8
 800c20a:	4313      	orrs	r3, r2
 800c20c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c20e:	1cbb      	adds	r3, r7, #2
 800c210:	881b      	ldrh	r3, [r3, #0]
 800c212:	2201      	movs	r2, #1
 800c214:	4013      	ands	r3, r2
 800c216:	d003      	beq.n	800c220 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	22f2      	movs	r2, #242	@ 0xf2
 800c21c:	4313      	orrs	r3, r2
 800c21e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c220:	1cbb      	adds	r3, r7, #2
 800c222:	881b      	ldrh	r3, [r3, #0]
 800c224:	2202      	movs	r2, #2
 800c226:	4013      	ands	r3, r2
 800c228:	d003      	beq.n	800c232 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	22f4      	movs	r2, #244	@ 0xf4
 800c22e:	4313      	orrs	r3, r2
 800c230:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c232:	1cbb      	adds	r3, r7, #2
 800c234:	881b      	ldrh	r3, [r3, #0]
 800c236:	2b10      	cmp	r3, #16
 800c238:	d103      	bne.n	800c242 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2290      	movs	r2, #144	@ 0x90
 800c23e:	4313      	orrs	r3, r2
 800c240:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c242:	1cbb      	adds	r3, r7, #2
 800c244:	881b      	ldrh	r3, [r3, #0]
 800c246:	2b20      	cmp	r3, #32
 800c248:	d13c      	bne.n	800c2c4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2220      	movs	r2, #32
 800c24e:	4313      	orrs	r3, r2
 800c250:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c252:	e037      	b.n	800c2c4 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c254:	1cbb      	adds	r3, r7, #2
 800c256:	2200      	movs	r2, #0
 800c258:	5e9b      	ldrsh	r3, [r3, r2]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	da03      	bge.n	800c266 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	22b8      	movs	r2, #184	@ 0xb8
 800c262:	4313      	orrs	r3, r2
 800c264:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c266:	1cbb      	adds	r3, r7, #2
 800c268:	881b      	ldrh	r3, [r3, #0]
 800c26a:	2201      	movs	r2, #1
 800c26c:	4013      	ands	r3, r2
 800c26e:	d003      	beq.n	800c278 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	22f2      	movs	r2, #242	@ 0xf2
 800c274:	4313      	orrs	r3, r2
 800c276:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c278:	1cbb      	adds	r3, r7, #2
 800c27a:	881b      	ldrh	r3, [r3, #0]
 800c27c:	2202      	movs	r2, #2
 800c27e:	4013      	ands	r3, r2
 800c280:	d003      	beq.n	800c28a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	22f4      	movs	r2, #244	@ 0xf4
 800c286:	4313      	orrs	r3, r2
 800c288:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c28a:	1cbb      	adds	r3, r7, #2
 800c28c:	881b      	ldrh	r3, [r3, #0]
 800c28e:	2b10      	cmp	r3, #16
 800c290:	d103      	bne.n	800c29a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2290      	movs	r2, #144	@ 0x90
 800c296:	4313      	orrs	r3, r2
 800c298:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c29a:	1cbb      	adds	r3, r7, #2
 800c29c:	881b      	ldrh	r3, [r3, #0]
 800c29e:	2b20      	cmp	r3, #32
 800c2a0:	d103      	bne.n	800c2aa <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2260      	movs	r2, #96	@ 0x60
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2ae:	4b0d      	ldr	r3, [pc, #52]	@ (800c2e4 <I2C_Enable_IRQ+0x118>)
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d007      	beq.n	800c2c4 <I2C_Enable_IRQ+0xf8>
 800c2b4:	1cbb      	adds	r3, r7, #2
 800c2b6:	881b      	ldrh	r3, [r3, #0]
 800c2b8:	2b40      	cmp	r3, #64	@ 0x40
 800c2ba:	d103      	bne.n	800c2c4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2240      	movs	r2, #64	@ 0x40
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	6819      	ldr	r1, [r3, #0]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	430a      	orrs	r2, r1
 800c2d2:	601a      	str	r2, [r3, #0]
}
 800c2d4:	46c0      	nop			@ (mov r8, r8)
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	b004      	add	sp, #16
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	0800aff1 	.word	0x0800aff1
 800c2e0:	0800b421 	.word	0x0800b421
 800c2e4:	0800b1e9 	.word	0x0800b1e9

0800c2e8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	000a      	movs	r2, r1
 800c2f2:	1cbb      	adds	r3, r7, #2
 800c2f4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c2fa:	1cbb      	adds	r3, r7, #2
 800c2fc:	881b      	ldrh	r3, [r3, #0]
 800c2fe:	2201      	movs	r2, #1
 800c300:	4013      	ands	r3, r2
 800c302:	d010      	beq.n	800c326 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2242      	movs	r2, #66	@ 0x42
 800c308:	4313      	orrs	r3, r2
 800c30a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2241      	movs	r2, #65	@ 0x41
 800c310:	5c9b      	ldrb	r3, [r3, r2]
 800c312:	b2db      	uxtb	r3, r3
 800c314:	001a      	movs	r2, r3
 800c316:	2328      	movs	r3, #40	@ 0x28
 800c318:	4013      	ands	r3, r2
 800c31a:	2b28      	cmp	r3, #40	@ 0x28
 800c31c:	d003      	beq.n	800c326 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	22b0      	movs	r2, #176	@ 0xb0
 800c322:	4313      	orrs	r3, r2
 800c324:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c326:	1cbb      	adds	r3, r7, #2
 800c328:	881b      	ldrh	r3, [r3, #0]
 800c32a:	2202      	movs	r2, #2
 800c32c:	4013      	ands	r3, r2
 800c32e:	d010      	beq.n	800c352 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2244      	movs	r2, #68	@ 0x44
 800c334:	4313      	orrs	r3, r2
 800c336:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2241      	movs	r2, #65	@ 0x41
 800c33c:	5c9b      	ldrb	r3, [r3, r2]
 800c33e:	b2db      	uxtb	r3, r3
 800c340:	001a      	movs	r2, r3
 800c342:	2328      	movs	r3, #40	@ 0x28
 800c344:	4013      	ands	r3, r2
 800c346:	2b28      	cmp	r3, #40	@ 0x28
 800c348:	d003      	beq.n	800c352 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	22b0      	movs	r2, #176	@ 0xb0
 800c34e:	4313      	orrs	r3, r2
 800c350:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c352:	1cbb      	adds	r3, r7, #2
 800c354:	2200      	movs	r2, #0
 800c356:	5e9b      	ldrsh	r3, [r3, r2]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	da03      	bge.n	800c364 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	22b8      	movs	r2, #184	@ 0xb8
 800c360:	4313      	orrs	r3, r2
 800c362:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c364:	1cbb      	adds	r3, r7, #2
 800c366:	881b      	ldrh	r3, [r3, #0]
 800c368:	2b10      	cmp	r3, #16
 800c36a:	d103      	bne.n	800c374 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2290      	movs	r2, #144	@ 0x90
 800c370:	4313      	orrs	r3, r2
 800c372:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c374:	1cbb      	adds	r3, r7, #2
 800c376:	881b      	ldrh	r3, [r3, #0]
 800c378:	2b20      	cmp	r3, #32
 800c37a:	d103      	bne.n	800c384 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2220      	movs	r2, #32
 800c380:	4313      	orrs	r3, r2
 800c382:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c384:	1cbb      	adds	r3, r7, #2
 800c386:	881b      	ldrh	r3, [r3, #0]
 800c388:	2b40      	cmp	r3, #64	@ 0x40
 800c38a:	d103      	bne.n	800c394 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2240      	movs	r2, #64	@ 0x40
 800c390:	4313      	orrs	r3, r2
 800c392:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	43d9      	mvns	r1, r3
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	400a      	ands	r2, r1
 800c3a4:	601a      	str	r2, [r3, #0]
}
 800c3a6:	46c0      	nop			@ (mov r8, r8)
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	b004      	add	sp, #16
 800c3ac:	bd80      	pop	{r7, pc}
	...

0800c3b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2241      	movs	r2, #65	@ 0x41
 800c3be:	5c9b      	ldrb	r3, [r3, r2]
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	2b20      	cmp	r3, #32
 800c3c4:	d138      	bne.n	800c438 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2240      	movs	r2, #64	@ 0x40
 800c3ca:	5c9b      	ldrb	r3, [r3, r2]
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d101      	bne.n	800c3d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	e032      	b.n	800c43a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2240      	movs	r2, #64	@ 0x40
 800c3d8:	2101      	movs	r1, #1
 800c3da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2241      	movs	r2, #65	@ 0x41
 800c3e0:	2124      	movs	r1, #36	@ 0x24
 800c3e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	2101      	movs	r1, #1
 800c3f0:	438a      	bics	r2, r1
 800c3f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4911      	ldr	r1, [pc, #68]	@ (800c444 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800c400:	400a      	ands	r2, r1
 800c402:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	6819      	ldr	r1, [r3, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	683a      	ldr	r2, [r7, #0]
 800c410:	430a      	orrs	r2, r1
 800c412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2101      	movs	r1, #1
 800c420:	430a      	orrs	r2, r1
 800c422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2241      	movs	r2, #65	@ 0x41
 800c428:	2120      	movs	r1, #32
 800c42a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2240      	movs	r2, #64	@ 0x40
 800c430:	2100      	movs	r1, #0
 800c432:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c434:	2300      	movs	r3, #0
 800c436:	e000      	b.n	800c43a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c438:	2302      	movs	r3, #2
  }
}
 800c43a:	0018      	movs	r0, r3
 800c43c:	46bd      	mov	sp, r7
 800c43e:	b002      	add	sp, #8
 800c440:	bd80      	pop	{r7, pc}
 800c442:	46c0      	nop			@ (mov r8, r8)
 800c444:	ffffefff 	.word	0xffffefff

0800c448 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2241      	movs	r2, #65	@ 0x41
 800c456:	5c9b      	ldrb	r3, [r3, r2]
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	2b20      	cmp	r3, #32
 800c45c:	d139      	bne.n	800c4d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2240      	movs	r2, #64	@ 0x40
 800c462:	5c9b      	ldrb	r3, [r3, r2]
 800c464:	2b01      	cmp	r3, #1
 800c466:	d101      	bne.n	800c46c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c468:	2302      	movs	r3, #2
 800c46a:	e033      	b.n	800c4d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2240      	movs	r2, #64	@ 0x40
 800c470:	2101      	movs	r1, #1
 800c472:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2241      	movs	r2, #65	@ 0x41
 800c478:	2124      	movs	r1, #36	@ 0x24
 800c47a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2101      	movs	r1, #1
 800c488:	438a      	bics	r2, r1
 800c48a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	4a11      	ldr	r2, [pc, #68]	@ (800c4dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800c498:	4013      	ands	r3, r2
 800c49a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	021b      	lsls	r3, r3, #8
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2101      	movs	r1, #1
 800c4ba:	430a      	orrs	r2, r1
 800c4bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2241      	movs	r2, #65	@ 0x41
 800c4c2:	2120      	movs	r1, #32
 800c4c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2240      	movs	r2, #64	@ 0x40
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	e000      	b.n	800c4d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c4d2:	2302      	movs	r3, #2
  }
}
 800c4d4:	0018      	movs	r0, r3
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	b004      	add	sp, #16
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	fffff0ff 	.word	0xfffff0ff

0800c4e0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b088      	sub	sp, #32
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d101      	bne.n	800c4f2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e0e1      	b.n	800c6b6 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2235      	movs	r2, #53	@ 0x35
 800c4f6:	5c9b      	ldrb	r3, [r3, r2]
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d107      	bne.n	800c50e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2234      	movs	r2, #52	@ 0x34
 800c502:	2100      	movs	r1, #0
 800c504:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	0018      	movs	r0, r3
 800c50a:	f7f9 f933 	bl	8005774 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2235      	movs	r2, #53	@ 0x35
 800c512:	2102      	movs	r1, #2
 800c514:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	69da      	ldr	r2, [r3, #28]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4967      	ldr	r1, [pc, #412]	@ (800c6c0 <HAL_I2S_Init+0x1e0>)
 800c522:	400a      	ands	r2, r1
 800c524:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	2202      	movs	r2, #2
 800c52c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	695b      	ldr	r3, [r3, #20]
 800c532:	2b02      	cmp	r3, #2
 800c534:	d073      	beq.n	800c61e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d102      	bne.n	800c544 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800c53e:	2310      	movs	r3, #16
 800c540:	617b      	str	r3, [r7, #20]
 800c542:	e001      	b.n	800c548 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800c544:	2320      	movs	r3, #32
 800c546:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	2b20      	cmp	r3, #32
 800c54e:	d802      	bhi.n	800c556 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	005b      	lsls	r3, r3, #1
 800c554:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800c556:	f002 fe7f 	bl	800f258 <HAL_RCC_GetSysClockFreq>
 800c55a:	0003      	movs	r3, r0
 800c55c:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	691a      	ldr	r2, [r3, #16]
 800c562:	2380      	movs	r3, #128	@ 0x80
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	429a      	cmp	r2, r3
 800c568:	d131      	bne.n	800c5ce <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d016      	beq.n	800c5a0 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	0019      	movs	r1, r3
 800c578:	68f8      	ldr	r0, [r7, #12]
 800c57a:	f7f3 fde1 	bl	8000140 <__udivsi3>
 800c57e:	0003      	movs	r3, r0
 800c580:	001a      	movs	r2, r3
 800c582:	0013      	movs	r3, r2
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	189b      	adds	r3, r3, r2
 800c588:	005b      	lsls	r3, r3, #1
 800c58a:	001a      	movs	r2, r3
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	695b      	ldr	r3, [r3, #20]
 800c590:	0019      	movs	r1, r3
 800c592:	0010      	movs	r0, r2
 800c594:	f7f3 fdd4 	bl	8000140 <__udivsi3>
 800c598:	0003      	movs	r3, r0
 800c59a:	3305      	adds	r3, #5
 800c59c:	613b      	str	r3, [r7, #16]
 800c59e:	e02a      	b.n	800c5f6 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	00db      	lsls	r3, r3, #3
 800c5a4:	0019      	movs	r1, r3
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	f7f3 fdca 	bl	8000140 <__udivsi3>
 800c5ac:	0003      	movs	r3, r0
 800c5ae:	001a      	movs	r2, r3
 800c5b0:	0013      	movs	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	189b      	adds	r3, r3, r2
 800c5b6:	005b      	lsls	r3, r3, #1
 800c5b8:	001a      	movs	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	695b      	ldr	r3, [r3, #20]
 800c5be:	0019      	movs	r1, r3
 800c5c0:	0010      	movs	r0, r2
 800c5c2:	f7f3 fdbd 	bl	8000140 <__udivsi3>
 800c5c6:	0003      	movs	r3, r0
 800c5c8:	3305      	adds	r3, #5
 800c5ca:	613b      	str	r3, [r7, #16]
 800c5cc:	e013      	b.n	800c5f6 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c5ce:	6979      	ldr	r1, [r7, #20]
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f7f3 fdb5 	bl	8000140 <__udivsi3>
 800c5d6:	0003      	movs	r3, r0
 800c5d8:	001a      	movs	r2, r3
 800c5da:	0013      	movs	r3, r2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	189b      	adds	r3, r3, r2
 800c5e0:	005b      	lsls	r3, r3, #1
 800c5e2:	001a      	movs	r2, r3
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	695b      	ldr	r3, [r3, #20]
 800c5e8:	0019      	movs	r1, r3
 800c5ea:	0010      	movs	r0, r2
 800c5ec:	f7f3 fda8 	bl	8000140 <__udivsi3>
 800c5f0:	0003      	movs	r3, r0
 800c5f2:	3305      	adds	r3, #5
 800c5f4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	210a      	movs	r1, #10
 800c5fa:	0018      	movs	r0, r3
 800c5fc:	f7f3 fda0 	bl	8000140 <__udivsi3>
 800c600:	0003      	movs	r3, r0
 800c602:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	2201      	movs	r2, #1
 800c608:	4013      	ands	r3, r2
 800c60a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800c60c:	693a      	ldr	r2, [r7, #16]
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	085b      	lsrs	r3, r3, #1
 800c614:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800c616:	69bb      	ldr	r3, [r7, #24]
 800c618:	021b      	lsls	r3, r3, #8
 800c61a:	61bb      	str	r3, [r7, #24]
 800c61c:	e003      	b.n	800c626 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800c61e:	2302      	movs	r3, #2
 800c620:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800c622:	2300      	movs	r3, #0
 800c624:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800c626:	69fb      	ldr	r3, [r7, #28]
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d902      	bls.n	800c632 <HAL_I2S_Init+0x152>
 800c62c:	69fb      	ldr	r3, [r7, #28]
 800c62e:	2bff      	cmp	r3, #255	@ 0xff
 800c630:	d907      	bls.n	800c642 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c636:	2210      	movs	r2, #16
 800c638:	431a      	orrs	r2, r3
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800c63e:	2301      	movs	r3, #1
 800c640:	e039      	b.n	800c6b6 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	691a      	ldr	r2, [r3, #16]
 800c646:	69bb      	ldr	r3, [r7, #24]
 800c648:	431a      	orrs	r2, r3
 800c64a:	0011      	movs	r1, r2
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	69fa      	ldr	r2, [r7, #28]
 800c652:	430a      	orrs	r2, r1
 800c654:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	69db      	ldr	r3, [r3, #28]
 800c65c:	4a18      	ldr	r2, [pc, #96]	@ (800c6c0 <HAL_I2S_Init+0x1e0>)
 800c65e:	401a      	ands	r2, r3
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6859      	ldr	r1, [r3, #4]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	689b      	ldr	r3, [r3, #8]
 800c668:	4319      	orrs	r1, r3
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	4319      	orrs	r1, r3
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	699b      	ldr	r3, [r3, #24]
 800c674:	430b      	orrs	r3, r1
 800c676:	431a      	orrs	r2, r3
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2180      	movs	r1, #128	@ 0x80
 800c67e:	0109      	lsls	r1, r1, #4
 800c680:	430a      	orrs	r2, r1
 800c682:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	689b      	ldr	r3, [r3, #8]
 800c688:	2b30      	cmp	r3, #48	@ 0x30
 800c68a:	d003      	beq.n	800c694 <HAL_I2S_Init+0x1b4>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	2bb0      	cmp	r3, #176	@ 0xb0
 800c692:	d108      	bne.n	800c6a6 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	69da      	ldr	r2, [r3, #28]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2180      	movs	r1, #128	@ 0x80
 800c6a0:	0149      	lsls	r1, r1, #5
 800c6a2:	430a      	orrs	r2, r1
 800c6a4:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2235      	movs	r2, #53	@ 0x35
 800c6b0:	2101      	movs	r1, #1
 800c6b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c6b4:	2300      	movs	r3, #0
}
 800c6b6:	0018      	movs	r0, r3
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	b008      	add	sp, #32
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	46c0      	nop			@ (mov r8, r8)
 800c6c0:	fffff040 	.word	0xfffff040

0800c6c4 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d101      	bne.n	800c6d6 <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	e01b      	b.n	800c70e <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2235      	movs	r2, #53	@ 0x35
 800c6da:	2102      	movs	r1, #2
 800c6dc:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	69da      	ldr	r2, [r3, #28]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	490b      	ldr	r1, [pc, #44]	@ (800c718 <HAL_I2S_DeInit+0x54>)
 800c6ea:	400a      	ands	r2, r1
 800c6ec:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	0018      	movs	r0, r3
 800c6f2:	f7f9 f8b3 	bl	800585c <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2235      	movs	r2, #53	@ 0x35
 800c700:	2100      	movs	r1, #0
 800c702:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2234      	movs	r2, #52	@ 0x34
 800c708:	2100      	movs	r1, #0
 800c70a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c70c:	2300      	movs	r3, #0
}
 800c70e:	0018      	movs	r0, r3
 800c710:	46bd      	mov	sp, r7
 800c712:	b002      	add	sp, #8
 800c714:	bd80      	pop	{r7, pc}
 800c716:	46c0      	nop			@ (mov r8, r8)
 800c718:	fffffbff 	.word	0xfffffbff

0800c71c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b086      	sub	sp, #24
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	1dbb      	adds	r3, r7, #6
 800c728:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d003      	beq.n	800c738 <HAL_I2S_Receive_DMA+0x1c>
 800c730:	1dbb      	adds	r3, r7, #6
 800c732:	881b      	ldrh	r3, [r3, #0]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	e0a6      	b.n	800c88a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	2234      	movs	r2, #52	@ 0x34
 800c740:	5c9b      	ldrb	r3, [r3, r2]
 800c742:	b2db      	uxtb	r3, r3
 800c744:	2b01      	cmp	r3, #1
 800c746:	d101      	bne.n	800c74c <HAL_I2S_Receive_DMA+0x30>
 800c748:	2302      	movs	r3, #2
 800c74a:	e09e      	b.n	800c88a <HAL_I2S_Receive_DMA+0x16e>
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2234      	movs	r2, #52	@ 0x34
 800c750:	2101      	movs	r1, #1
 800c752:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2235      	movs	r2, #53	@ 0x35
 800c758:	5c9b      	ldrb	r3, [r3, r2]
 800c75a:	b2db      	uxtb	r3, r3
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d005      	beq.n	800c76c <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2234      	movs	r2, #52	@ 0x34
 800c764:	2100      	movs	r1, #0
 800c766:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800c768:	2302      	movs	r3, #2
 800c76a:	e08e      	b.n	800c88a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2235      	movs	r2, #53	@ 0x35
 800c770:	2104      	movs	r1, #4
 800c772:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2200      	movs	r2, #0
 800c778:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	69db      	ldr	r3, [r3, #28]
 800c786:	2207      	movs	r2, #7
 800c788:	4013      	ands	r3, r2
 800c78a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	2b03      	cmp	r3, #3
 800c790:	d002      	beq.n	800c798 <HAL_I2S_Receive_DMA+0x7c>
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	2b05      	cmp	r3, #5
 800c796:	d10c      	bne.n	800c7b2 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800c798:	1dbb      	adds	r3, r7, #6
 800c79a:	881b      	ldrh	r3, [r3, #0]
 800c79c:	18db      	adds	r3, r3, r3
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800c7a4:	1dbb      	adds	r3, r7, #6
 800c7a6:	881b      	ldrh	r3, [r3, #0]
 800c7a8:	18db      	adds	r3, r3, r3
 800c7aa:	b29a      	uxth	r2, r3
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c7b0:	e007      	b.n	800c7c2 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	1dba      	adds	r2, r7, #6
 800c7b6:	8812      	ldrh	r2, [r2, #0]
 800c7b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	1dba      	adds	r2, r7, #6
 800c7be:	8812      	ldrh	r2, [r2, #0]
 800c7c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7c6:	4a33      	ldr	r2, [pc, #204]	@ (800c894 <HAL_I2S_Receive_DMA+0x178>)
 800c7c8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7ce:	4a32      	ldr	r2, [pc, #200]	@ (800c898 <HAL_I2S_Receive_DMA+0x17c>)
 800c7d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7d6:	4a31      	ldr	r2, [pc, #196]	@ (800c89c <HAL_I2S_Receive_DMA+0x180>)
 800c7d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	69da      	ldr	r2, [r3, #28]
 800c7e0:	23c0      	movs	r3, #192	@ 0xc0
 800c7e2:	009b      	lsls	r3, r3, #2
 800c7e4:	401a      	ands	r2, r3
 800c7e6:	23c0      	movs	r3, #192	@ 0xc0
 800c7e8:	009b      	lsls	r3, r3, #2
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d10a      	bne.n	800c804 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	613b      	str	r3, [r7, #16]
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	613b      	str	r3, [r7, #16]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	613b      	str	r3, [r7, #16]
 800c802:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	330c      	adds	r3, #12
 800c80e:	0019      	movs	r1, r3
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c814:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c81a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800c81c:	f7fd f9fc 	bl	8009c18 <HAL_DMA_Start_IT>
 800c820:	1e03      	subs	r3, r0, #0
 800c822:	d00f      	beq.n	800c844 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c828:	2208      	movs	r2, #8
 800c82a:	431a      	orrs	r2, r3
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2235      	movs	r2, #53	@ 0x35
 800c834:	2101      	movs	r1, #1
 800c836:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2234      	movs	r2, #52	@ 0x34
 800c83c:	2100      	movs	r1, #0
 800c83e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800c840:	2301      	movs	r3, #1
 800c842:	e022      	b.n	800c88a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	69da      	ldr	r2, [r3, #28]
 800c84a:	2380      	movs	r3, #128	@ 0x80
 800c84c:	00db      	lsls	r3, r3, #3
 800c84e:	4013      	ands	r3, r2
 800c850:	d108      	bne.n	800c864 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	69da      	ldr	r2, [r3, #28]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	2180      	movs	r1, #128	@ 0x80
 800c85e:	00c9      	lsls	r1, r1, #3
 800c860:	430a      	orrs	r2, r1
 800c862:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	2201      	movs	r2, #1
 800c86c:	4013      	ands	r3, r2
 800c86e:	d107      	bne.n	800c880 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	685a      	ldr	r2, [r3, #4]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2101      	movs	r1, #1
 800c87c:	430a      	orrs	r2, r1
 800c87e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2234      	movs	r2, #52	@ 0x34
 800c884:	2100      	movs	r1, #0
 800c886:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800c888:	2300      	movs	r3, #0
}
 800c88a:	0018      	movs	r0, r3
 800c88c:	46bd      	mov	sp, r7
 800c88e:	b006      	add	sp, #24
 800c890:	bd80      	pop	{r7, pc}
 800c892:	46c0      	nop			@ (mov r8, r8)
 800c894:	0800ca9d 	.word	0x0800ca9d
 800c898:	0800ca59 	.word	0x0800ca59
 800c89c:	0800cabb 	.word	0x0800cabb

0800c8a0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b086      	sub	sp, #24
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c8a8:	2317      	movs	r3, #23
 800c8aa:	18fb      	adds	r3, r7, r3
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	685a      	ldr	r2, [r3, #4]
 800c8b4:	2380      	movs	r3, #128	@ 0x80
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d003      	beq.n	800c8c4 <HAL_I2S_DMAStop+0x24>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d158      	bne.n	800c976 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d010      	beq.n	800c8ee <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8d0:	0018      	movs	r0, r3
 800c8d2:	f7fd fa07 	bl	8009ce4 <HAL_DMA_Abort>
 800c8d6:	1e03      	subs	r3, r0, #0
 800c8d8:	d009      	beq.n	800c8ee <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8de:	2208      	movs	r2, #8
 800c8e0:	431a      	orrs	r2, r3
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800c8e6:	2317      	movs	r3, #23
 800c8e8:	18fb      	adds	r3, r7, r3
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	2364      	movs	r3, #100	@ 0x64
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	2102      	movs	r1, #2
 800c8f6:	f000 f907 	bl	800cb08 <I2S_WaitFlagStateUntilTimeout>
 800c8fa:	1e03      	subs	r3, r0, #0
 800c8fc:	d00d      	beq.n	800c91a <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c902:	2201      	movs	r2, #1
 800c904:	431a      	orrs	r2, r3
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2235      	movs	r2, #53	@ 0x35
 800c90e:	2101      	movs	r1, #1
 800c910:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800c912:	2317      	movs	r3, #23
 800c914:	18fb      	adds	r3, r7, r3
 800c916:	2201      	movs	r2, #1
 800c918:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	2364      	movs	r3, #100	@ 0x64
 800c91e:	2200      	movs	r2, #0
 800c920:	2180      	movs	r1, #128	@ 0x80
 800c922:	f000 f8f1 	bl	800cb08 <I2S_WaitFlagStateUntilTimeout>
 800c926:	1e03      	subs	r3, r0, #0
 800c928:	d00d      	beq.n	800c946 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c92e:	2201      	movs	r2, #1
 800c930:	431a      	orrs	r2, r3
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2235      	movs	r2, #53	@ 0x35
 800c93a:	2101      	movs	r1, #1
 800c93c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800c93e:	2317      	movs	r3, #23
 800c940:	18fb      	adds	r3, r7, r3
 800c942:	2201      	movs	r2, #1
 800c944:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	69da      	ldr	r2, [r3, #28]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4938      	ldr	r1, [pc, #224]	@ (800ca34 <HAL_I2S_DMAStop+0x194>)
 800c952:	400a      	ands	r2, r1
 800c954:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800c956:	2300      	movs	r3, #0
 800c958:	613b      	str	r3, [r7, #16]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	613b      	str	r3, [r7, #16]
 800c962:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	685a      	ldr	r2, [r3, #4]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	2102      	movs	r1, #2
 800c970:	438a      	bics	r2, r1
 800c972:	605a      	str	r2, [r3, #4]
 800c974:	e053      	b.n	800ca1e <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	685a      	ldr	r2, [r3, #4]
 800c97a:	23c0      	movs	r3, #192	@ 0xc0
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	429a      	cmp	r2, r3
 800c980:	d005      	beq.n	800c98e <HAL_I2S_DMAStop+0xee>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	685a      	ldr	r2, [r3, #4]
 800c986:	2380      	movs	r3, #128	@ 0x80
 800c988:	005b      	lsls	r3, r3, #1
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d147      	bne.n	800ca1e <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c992:	2b00      	cmp	r3, #0
 800c994:	d010      	beq.n	800c9b8 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c99a:	0018      	movs	r0, r3
 800c99c:	f7fd f9a2 	bl	8009ce4 <HAL_DMA_Abort>
 800c9a0:	1e03      	subs	r3, r0, #0
 800c9a2:	d009      	beq.n	800c9b8 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9a8:	2208      	movs	r2, #8
 800c9aa:	431a      	orrs	r2, r3
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800c9b0:	2317      	movs	r3, #23
 800c9b2:	18fb      	adds	r3, r7, r3
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	69da      	ldr	r2, [r3, #28]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	491c      	ldr	r1, [pc, #112]	@ (800ca34 <HAL_I2S_DMAStop+0x194>)
 800c9c4:	400a      	ands	r2, r1
 800c9c6:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	60fb      	str	r3, [r7, #12]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	68db      	ldr	r3, [r3, #12]
 800c9d2:	60fb      	str	r3, [r7, #12]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	60fb      	str	r3, [r7, #12]
 800c9dc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	2101      	movs	r1, #1
 800c9ea:	438a      	bics	r2, r1
 800c9ec:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	685a      	ldr	r2, [r3, #4]
 800c9f2:	2380      	movs	r3, #128	@ 0x80
 800c9f4:	005b      	lsls	r3, r3, #1
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d10e      	bne.n	800ca18 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9fe:	2240      	movs	r2, #64	@ 0x40
 800ca00:	431a      	orrs	r2, r3
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2235      	movs	r2, #53	@ 0x35
 800ca0a:	2101      	movs	r1, #1
 800ca0c:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800ca0e:	2317      	movs	r3, #23
 800ca10:	18fb      	adds	r3, r7, r3
 800ca12:	2201      	movs	r2, #1
 800ca14:	701a      	strb	r2, [r3, #0]
 800ca16:	e002      	b.n	800ca1e <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2235      	movs	r2, #53	@ 0x35
 800ca22:	2101      	movs	r1, #1
 800ca24:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800ca26:	2317      	movs	r3, #23
 800ca28:	18fb      	adds	r3, r7, r3
 800ca2a:	781b      	ldrb	r3, [r3, #0]
}
 800ca2c:	0018      	movs	r0, r3
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	b006      	add	sp, #24
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	fffffbff 	.word	0xfffffbff

0800ca38 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ca40:	46c0      	nop			@ (mov r8, r8)
 800ca42:	46bd      	mov	sp, r7
 800ca44:	b002      	add	sp, #8
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800ca50:	46c0      	nop			@ (mov r8, r8)
 800ca52:	46bd      	mov	sp, r7
 800ca54:	b002      	add	sp, #8
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca64:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	69db      	ldr	r3, [r3, #28]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d10e      	bne.n	800ca8c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	685a      	ldr	r2, [r3, #4]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	2101      	movs	r1, #1
 800ca7a:	438a      	bics	r2, r1
 800ca7c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2200      	movs	r2, #0
 800ca82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2235      	movs	r2, #53	@ 0x35
 800ca88:	2101      	movs	r1, #1
 800ca8a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	0018      	movs	r0, r3
 800ca90:	f7f9 feb6 	bl	8006800 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800ca94:	46c0      	nop			@ (mov r8, r8)
 800ca96:	46bd      	mov	sp, r7
 800ca98:	b004      	add	sp, #16
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caa8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	0018      	movs	r0, r3
 800caae:	f7ff ffc3 	bl	800ca38 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800cab2:	46c0      	nop			@ (mov r8, r8)
 800cab4:	46bd      	mov	sp, r7
 800cab6:	b004      	add	sp, #16
 800cab8:	bd80      	pop	{r7, pc}

0800caba <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b084      	sub	sp, #16
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cac6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	685a      	ldr	r2, [r3, #4]
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	2103      	movs	r1, #3
 800cad4:	438a      	bics	r2, r1
 800cad6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2200      	movs	r2, #0
 800cadc:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2200      	movs	r2, #0
 800cae2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2235      	movs	r2, #53	@ 0x35
 800cae8:	2101      	movs	r1, #1
 800caea:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caf0:	2208      	movs	r2, #8
 800caf2:	431a      	orrs	r2, r3
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	0018      	movs	r0, r3
 800cafc:	f7ff ffa4 	bl	800ca48 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800cb00:	46c0      	nop			@ (mov r8, r8)
 800cb02:	46bd      	mov	sp, r7
 800cb04:	b004      	add	sp, #16
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	603b      	str	r3, [r7, #0]
 800cb14:	1dfb      	adds	r3, r7, #7
 800cb16:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800cb18:	f7fc fb1e 	bl	8009158 <HAL_GetTick>
 800cb1c:	0003      	movs	r3, r0
 800cb1e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800cb20:	e017      	b.n	800cb52 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	3301      	adds	r3, #1
 800cb26:	d014      	beq.n	800cb52 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800cb28:	f7fc fb16 	bl	8009158 <HAL_GetTick>
 800cb2c:	0002      	movs	r2, r0
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	1ad3      	subs	r3, r2, r3
 800cb32:	683a      	ldr	r2, [r7, #0]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d902      	bls.n	800cb3e <I2S_WaitFlagStateUntilTimeout+0x36>
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d109      	bne.n	800cb52 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2235      	movs	r2, #53	@ 0x35
 800cb42:	2101      	movs	r1, #1
 800cb44:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2234      	movs	r2, #52	@ 0x34
 800cb4a:	2100      	movs	r1, #0
 800cb4c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800cb4e:	2303      	movs	r3, #3
 800cb50:	e00f      	b.n	800cb72 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	68ba      	ldr	r2, [r7, #8]
 800cb5a:	4013      	ands	r3, r2
 800cb5c:	68ba      	ldr	r2, [r7, #8]
 800cb5e:	1ad3      	subs	r3, r2, r3
 800cb60:	425a      	negs	r2, r3
 800cb62:	4153      	adcs	r3, r2
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	001a      	movs	r2, r3
 800cb68:	1dfb      	adds	r3, r7, #7
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d1d8      	bne.n	800cb22 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	0018      	movs	r0, r3
 800cb74:	46bd      	mov	sp, r7
 800cb76:	b006      	add	sp, #24
 800cb78:	bd80      	pop	{r7, pc}
	...

0800cb7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800cb7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb7e:	b08b      	sub	sp, #44	@ 0x2c
 800cb80:	af06      	add	r7, sp, #24
 800cb82:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d101      	bne.n	800cb8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e0f0      	b.n	800cd70 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a79      	ldr	r2, [pc, #484]	@ (800cd78 <HAL_PCD_Init+0x1fc>)
 800cb92:	5c9b      	ldrb	r3, [r3, r2]
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d108      	bne.n	800cbac <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	23aa      	movs	r3, #170	@ 0xaa
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	2100      	movs	r1, #0
 800cba2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	0018      	movs	r0, r3
 800cba8:	f008 fd50 	bl	801564c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	4a72      	ldr	r2, [pc, #456]	@ (800cd78 <HAL_PCD_Init+0x1fc>)
 800cbb0:	2103      	movs	r1, #3
 800cbb2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	0018      	movs	r0, r3
 800cbba:	f004 fdd1 	bl	8011760 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cbbe:	230f      	movs	r3, #15
 800cbc0:	18fb      	adds	r3, r7, r3
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	701a      	strb	r2, [r3, #0]
 800cbc6:	e049      	b.n	800cc5c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800cbc8:	200f      	movs	r0, #15
 800cbca:	183b      	adds	r3, r7, r0
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	6879      	ldr	r1, [r7, #4]
 800cbd0:	1c5a      	adds	r2, r3, #1
 800cbd2:	0013      	movs	r3, r2
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	189b      	adds	r3, r3, r2
 800cbd8:	00db      	lsls	r3, r3, #3
 800cbda:	18cb      	adds	r3, r1, r3
 800cbdc:	3301      	adds	r3, #1
 800cbde:	2201      	movs	r2, #1
 800cbe0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800cbe2:	183b      	adds	r3, r7, r0
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	6879      	ldr	r1, [r7, #4]
 800cbe8:	1c5a      	adds	r2, r3, #1
 800cbea:	0013      	movs	r3, r2
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	189b      	adds	r3, r3, r2
 800cbf0:	00db      	lsls	r3, r3, #3
 800cbf2:	183a      	adds	r2, r7, r0
 800cbf4:	7812      	ldrb	r2, [r2, #0]
 800cbf6:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cbf8:	183b      	adds	r3, r7, r0
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	6879      	ldr	r1, [r7, #4]
 800cbfe:	1c5a      	adds	r2, r3, #1
 800cc00:	0013      	movs	r3, r2
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	189b      	adds	r3, r3, r2
 800cc06:	00db      	lsls	r3, r3, #3
 800cc08:	18cb      	adds	r3, r1, r3
 800cc0a:	3303      	adds	r3, #3
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800cc10:	183b      	adds	r3, r7, r0
 800cc12:	781a      	ldrb	r2, [r3, #0]
 800cc14:	6879      	ldr	r1, [r7, #4]
 800cc16:	0013      	movs	r3, r2
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	189b      	adds	r3, r3, r2
 800cc1c:	00db      	lsls	r3, r3, #3
 800cc1e:	18cb      	adds	r3, r1, r3
 800cc20:	3338      	adds	r3, #56	@ 0x38
 800cc22:	2200      	movs	r2, #0
 800cc24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800cc26:	183b      	adds	r3, r7, r0
 800cc28:	781a      	ldrb	r2, [r3, #0]
 800cc2a:	6879      	ldr	r1, [r7, #4]
 800cc2c:	0013      	movs	r3, r2
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	189b      	adds	r3, r3, r2
 800cc32:	00db      	lsls	r3, r3, #3
 800cc34:	18cb      	adds	r3, r1, r3
 800cc36:	333c      	adds	r3, #60	@ 0x3c
 800cc38:	2200      	movs	r2, #0
 800cc3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800cc3c:	183b      	adds	r3, r7, r0
 800cc3e:	781a      	ldrb	r2, [r3, #0]
 800cc40:	6879      	ldr	r1, [r7, #4]
 800cc42:	0013      	movs	r3, r2
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	189b      	adds	r3, r3, r2
 800cc48:	00db      	lsls	r3, r3, #3
 800cc4a:	18cb      	adds	r3, r1, r3
 800cc4c:	3340      	adds	r3, #64	@ 0x40
 800cc4e:	2200      	movs	r2, #0
 800cc50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cc52:	183b      	adds	r3, r7, r0
 800cc54:	781a      	ldrb	r2, [r3, #0]
 800cc56:	183b      	adds	r3, r7, r0
 800cc58:	3201      	adds	r2, #1
 800cc5a:	701a      	strb	r2, [r3, #0]
 800cc5c:	210f      	movs	r1, #15
 800cc5e:	187b      	adds	r3, r7, r1
 800cc60:	781a      	ldrb	r2, [r3, #0]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d3ae      	bcc.n	800cbc8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cc6a:	187b      	adds	r3, r7, r1
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	701a      	strb	r2, [r3, #0]
 800cc70:	e056      	b.n	800cd20 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800cc72:	240f      	movs	r4, #15
 800cc74:	193b      	adds	r3, r7, r4
 800cc76:	781a      	ldrb	r2, [r3, #0]
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	236a      	movs	r3, #106	@ 0x6a
 800cc7c:	33ff      	adds	r3, #255	@ 0xff
 800cc7e:	0019      	movs	r1, r3
 800cc80:	0013      	movs	r3, r2
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	189b      	adds	r3, r3, r2
 800cc86:	00db      	lsls	r3, r3, #3
 800cc88:	18c3      	adds	r3, r0, r3
 800cc8a:	185b      	adds	r3, r3, r1
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800cc90:	193b      	adds	r3, r7, r4
 800cc92:	781a      	ldrb	r2, [r3, #0]
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	23b4      	movs	r3, #180	@ 0xb4
 800cc98:	0059      	lsls	r1, r3, #1
 800cc9a:	0013      	movs	r3, r2
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	189b      	adds	r3, r3, r2
 800cca0:	00db      	lsls	r3, r3, #3
 800cca2:	18c3      	adds	r3, r0, r3
 800cca4:	185b      	adds	r3, r3, r1
 800cca6:	193a      	adds	r2, r7, r4
 800cca8:	7812      	ldrb	r2, [r2, #0]
 800ccaa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ccac:	193b      	adds	r3, r7, r4
 800ccae:	781a      	ldrb	r2, [r3, #0]
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	236c      	movs	r3, #108	@ 0x6c
 800ccb4:	33ff      	adds	r3, #255	@ 0xff
 800ccb6:	0019      	movs	r1, r3
 800ccb8:	0013      	movs	r3, r2
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	189b      	adds	r3, r3, r2
 800ccbe:	00db      	lsls	r3, r3, #3
 800ccc0:	18c3      	adds	r3, r0, r3
 800ccc2:	185b      	adds	r3, r3, r1
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ccc8:	193b      	adds	r3, r7, r4
 800ccca:	781a      	ldrb	r2, [r3, #0]
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	23bc      	movs	r3, #188	@ 0xbc
 800ccd0:	0059      	lsls	r1, r3, #1
 800ccd2:	0013      	movs	r3, r2
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	189b      	adds	r3, r3, r2
 800ccd8:	00db      	lsls	r3, r3, #3
 800ccda:	18c3      	adds	r3, r0, r3
 800ccdc:	185b      	adds	r3, r3, r1
 800ccde:	2200      	movs	r2, #0
 800cce0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cce2:	193b      	adds	r3, r7, r4
 800cce4:	781a      	ldrb	r2, [r3, #0]
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	23be      	movs	r3, #190	@ 0xbe
 800ccea:	0059      	lsls	r1, r3, #1
 800ccec:	0013      	movs	r3, r2
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	189b      	adds	r3, r3, r2
 800ccf2:	00db      	lsls	r3, r3, #3
 800ccf4:	18c3      	adds	r3, r0, r3
 800ccf6:	185b      	adds	r3, r3, r1
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ccfc:	193b      	adds	r3, r7, r4
 800ccfe:	781a      	ldrb	r2, [r3, #0]
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	23c0      	movs	r3, #192	@ 0xc0
 800cd04:	0059      	lsls	r1, r3, #1
 800cd06:	0013      	movs	r3, r2
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	189b      	adds	r3, r3, r2
 800cd0c:	00db      	lsls	r3, r3, #3
 800cd0e:	18c3      	adds	r3, r0, r3
 800cd10:	185b      	adds	r3, r3, r1
 800cd12:	2200      	movs	r2, #0
 800cd14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cd16:	193b      	adds	r3, r7, r4
 800cd18:	781a      	ldrb	r2, [r3, #0]
 800cd1a:	193b      	adds	r3, r7, r4
 800cd1c:	3201      	adds	r2, #1
 800cd1e:	701a      	strb	r2, [r3, #0]
 800cd20:	230f      	movs	r3, #15
 800cd22:	18fb      	adds	r3, r7, r3
 800cd24:	781a      	ldrb	r2, [r3, #0]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d3a1      	bcc.n	800cc72 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6818      	ldr	r0, [r3, #0]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	466a      	mov	r2, sp
 800cd36:	0011      	movs	r1, r2
 800cd38:	001a      	movs	r2, r3
 800cd3a:	3210      	adds	r2, #16
 800cd3c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800cd3e:	c170      	stmia	r1!, {r4, r5, r6}
 800cd40:	ca30      	ldmia	r2!, {r4, r5}
 800cd42:	c130      	stmia	r1!, {r4, r5}
 800cd44:	6859      	ldr	r1, [r3, #4]
 800cd46:	689a      	ldr	r2, [r3, #8]
 800cd48:	68db      	ldr	r3, [r3, #12]
 800cd4a:	f004 fd23 	bl	8011794 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2224      	movs	r2, #36	@ 0x24
 800cd52:	2100      	movs	r1, #0
 800cd54:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4a07      	ldr	r2, [pc, #28]	@ (800cd78 <HAL_PCD_Init+0x1fc>)
 800cd5a:	2101      	movs	r1, #1
 800cd5c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	69db      	ldr	r3, [r3, #28]
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d103      	bne.n	800cd6e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	0018      	movs	r0, r3
 800cd6a:	f001 fd23 	bl	800e7b4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800cd6e:	2300      	movs	r3, #0
}
 800cd70:	0018      	movs	r0, r3
 800cd72:	46bd      	mov	sp, r7
 800cd74:	b005      	add	sp, #20
 800cd76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd78:	000002a9 	.word	0x000002a9

0800cd7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b082      	sub	sp, #8
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	23aa      	movs	r3, #170	@ 0xaa
 800cd88:	009b      	lsls	r3, r3, #2
 800cd8a:	5cd3      	ldrb	r3, [r2, r3]
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d101      	bne.n	800cd94 <HAL_PCD_Start+0x18>
 800cd90:	2302      	movs	r3, #2
 800cd92:	e014      	b.n	800cdbe <HAL_PCD_Start+0x42>
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	23aa      	movs	r3, #170	@ 0xaa
 800cd98:	009b      	lsls	r3, r3, #2
 800cd9a:	2101      	movs	r1, #1
 800cd9c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	0018      	movs	r0, r3
 800cda4:	f004 fcc6 	bl	8011734 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	0018      	movs	r0, r3
 800cdae:	f006 fcc9 	bl	8013744 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	23aa      	movs	r3, #170	@ 0xaa
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	2100      	movs	r1, #0
 800cdba:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800cdbc:	2300      	movs	r3, #0
}
 800cdbe:	0018      	movs	r0, r3
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	b002      	add	sp, #8
 800cdc4:	bd80      	pop	{r7, pc}
	...

0800cdc8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	0018      	movs	r0, r3
 800cdd6:	f006 fccb 	bl	8013770 <USB_ReadInterrupts>
 800cdda:	0003      	movs	r3, r0
 800cddc:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	2380      	movs	r3, #128	@ 0x80
 800cde2:	021b      	lsls	r3, r3, #8
 800cde4:	4013      	ands	r3, r2
 800cde6:	d004      	beq.n	800cdf2 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	0018      	movs	r0, r3
 800cdec:	f000 fb62 	bl	800d4b4 <PCD_EP_ISR_Handler>

    return;
 800cdf0:	e11d      	b.n	800d02e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800cdf2:	68fa      	ldr	r2, [r7, #12]
 800cdf4:	2380      	movs	r3, #128	@ 0x80
 800cdf6:	00db      	lsls	r3, r3, #3
 800cdf8:	4013      	ands	r3, r2
 800cdfa:	d015      	beq.n	800ce28 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	2244      	movs	r2, #68	@ 0x44
 800ce02:	5a9b      	ldrh	r3, [r3, r2]
 800ce04:	b29a      	uxth	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	498a      	ldr	r1, [pc, #552]	@ (800d034 <HAL_PCD_IRQHandler+0x26c>)
 800ce0c:	400a      	ands	r2, r1
 800ce0e:	b291      	uxth	r1, r2
 800ce10:	2244      	movs	r2, #68	@ 0x44
 800ce12:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	0018      	movs	r0, r3
 800ce18:	f008 fc9b 	bl	8015752 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2100      	movs	r1, #0
 800ce20:	0018      	movs	r0, r3
 800ce22:	f000 f915 	bl	800d050 <HAL_PCD_SetAddress>

    return;
 800ce26:	e102      	b.n	800d02e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	2380      	movs	r3, #128	@ 0x80
 800ce2c:	01db      	lsls	r3, r3, #7
 800ce2e:	4013      	ands	r3, r2
 800ce30:	d00c      	beq.n	800ce4c <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	2244      	movs	r2, #68	@ 0x44
 800ce38:	5a9b      	ldrh	r3, [r3, r2]
 800ce3a:	b29a      	uxth	r2, r3
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	497d      	ldr	r1, [pc, #500]	@ (800d038 <HAL_PCD_IRQHandler+0x270>)
 800ce42:	400a      	ands	r2, r1
 800ce44:	b291      	uxth	r1, r2
 800ce46:	2244      	movs	r2, #68	@ 0x44
 800ce48:	5299      	strh	r1, [r3, r2]

    return;
 800ce4a:	e0f0      	b.n	800d02e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800ce4c:	68fa      	ldr	r2, [r7, #12]
 800ce4e:	2380      	movs	r3, #128	@ 0x80
 800ce50:	019b      	lsls	r3, r3, #6
 800ce52:	4013      	ands	r3, r2
 800ce54:	d00c      	beq.n	800ce70 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2244      	movs	r2, #68	@ 0x44
 800ce5c:	5a9b      	ldrh	r3, [r3, r2]
 800ce5e:	b29a      	uxth	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4975      	ldr	r1, [pc, #468]	@ (800d03c <HAL_PCD_IRQHandler+0x274>)
 800ce66:	400a      	ands	r2, r1
 800ce68:	b291      	uxth	r1, r2
 800ce6a:	2244      	movs	r2, #68	@ 0x44
 800ce6c:	5299      	strh	r1, [r3, r2]

    return;
 800ce6e:	e0de      	b.n	800d02e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800ce70:	68fa      	ldr	r2, [r7, #12]
 800ce72:	2380      	movs	r3, #128	@ 0x80
 800ce74:	015b      	lsls	r3, r3, #5
 800ce76:	4013      	ands	r3, r2
 800ce78:	d038      	beq.n	800ceec <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	2240      	movs	r2, #64	@ 0x40
 800ce80:	5a9b      	ldrh	r3, [r3, r2]
 800ce82:	b29a      	uxth	r2, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2104      	movs	r1, #4
 800ce8a:	438a      	bics	r2, r1
 800ce8c:	b291      	uxth	r1, r2
 800ce8e:	2240      	movs	r2, #64	@ 0x40
 800ce90:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2240      	movs	r2, #64	@ 0x40
 800ce98:	5a9b      	ldrh	r3, [r3, r2]
 800ce9a:	b29a      	uxth	r2, r3
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2108      	movs	r1, #8
 800cea2:	438a      	bics	r2, r1
 800cea4:	b291      	uxth	r1, r2
 800cea6:	2240      	movs	r2, #64	@ 0x40
 800cea8:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	23b8      	movs	r3, #184	@ 0xb8
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	5cd3      	ldrb	r3, [r2, r3]
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d109      	bne.n	800ceca <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	23b8      	movs	r3, #184	@ 0xb8
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	2100      	movs	r1, #0
 800cebe:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2100      	movs	r1, #0
 800cec4:	0018      	movs	r0, r3
 800cec6:	f001 fc9f 	bl	800e808 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	0018      	movs	r0, r3
 800cece:	f008 fc81 	bl	80157d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2244      	movs	r2, #68	@ 0x44
 800ced8:	5a9b      	ldrh	r3, [r3, r2]
 800ceda:	b29a      	uxth	r2, r3
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4957      	ldr	r1, [pc, #348]	@ (800d040 <HAL_PCD_IRQHandler+0x278>)
 800cee2:	400a      	ands	r2, r1
 800cee4:	b291      	uxth	r1, r2
 800cee6:	2244      	movs	r2, #68	@ 0x44
 800cee8:	5299      	strh	r1, [r3, r2]

    return;
 800ceea:	e0a0      	b.n	800d02e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	2380      	movs	r3, #128	@ 0x80
 800cef0:	011b      	lsls	r3, r3, #4
 800cef2:	4013      	ands	r3, r2
 800cef4:	d028      	beq.n	800cf48 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	2240      	movs	r2, #64	@ 0x40
 800cefc:	5a9b      	ldrh	r3, [r3, r2]
 800cefe:	b29a      	uxth	r2, r3
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	2108      	movs	r1, #8
 800cf06:	430a      	orrs	r2, r1
 800cf08:	b291      	uxth	r1, r2
 800cf0a:	2240      	movs	r2, #64	@ 0x40
 800cf0c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	2244      	movs	r2, #68	@ 0x44
 800cf14:	5a9b      	ldrh	r3, [r3, r2]
 800cf16:	b29a      	uxth	r2, r3
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4949      	ldr	r1, [pc, #292]	@ (800d044 <HAL_PCD_IRQHandler+0x27c>)
 800cf1e:	400a      	ands	r2, r1
 800cf20:	b291      	uxth	r1, r2
 800cf22:	2244      	movs	r2, #68	@ 0x44
 800cf24:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2240      	movs	r2, #64	@ 0x40
 800cf2c:	5a9b      	ldrh	r3, [r3, r2]
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2104      	movs	r1, #4
 800cf36:	430a      	orrs	r2, r1
 800cf38:	b291      	uxth	r1, r2
 800cf3a:	2240      	movs	r2, #64	@ 0x40
 800cf3c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	0018      	movs	r0, r3
 800cf42:	f008 fc2b 	bl	801579c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800cf46:	e072      	b.n	800d02e <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2280      	movs	r2, #128	@ 0x80
 800cf4c:	4013      	ands	r3, r2
 800cf4e:	d046      	beq.n	800cfde <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2244      	movs	r2, #68	@ 0x44
 800cf56:	5a9b      	ldrh	r3, [r3, r2]
 800cf58:	b29a      	uxth	r2, r3
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	2180      	movs	r1, #128	@ 0x80
 800cf60:	438a      	bics	r2, r1
 800cf62:	b291      	uxth	r1, r2
 800cf64:	2244      	movs	r2, #68	@ 0x44
 800cf66:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	23b8      	movs	r3, #184	@ 0xb8
 800cf6c:	009b      	lsls	r3, r3, #2
 800cf6e:	5cd3      	ldrb	r3, [r2, r3]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d12f      	bne.n	800cfd4 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2240      	movs	r2, #64	@ 0x40
 800cf7a:	5a9b      	ldrh	r3, [r3, r2]
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	2104      	movs	r1, #4
 800cf84:	430a      	orrs	r2, r1
 800cf86:	b291      	uxth	r1, r2
 800cf88:	2240      	movs	r2, #64	@ 0x40
 800cf8a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2240      	movs	r2, #64	@ 0x40
 800cf92:	5a9b      	ldrh	r3, [r3, r2]
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2108      	movs	r1, #8
 800cf9c:	430a      	orrs	r2, r1
 800cf9e:	b291      	uxth	r1, r2
 800cfa0:	2240      	movs	r2, #64	@ 0x40
 800cfa2:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	23b8      	movs	r3, #184	@ 0xb8
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	2101      	movs	r1, #1
 800cfac:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2254      	movs	r2, #84	@ 0x54
 800cfb4:	5a9b      	ldrh	r3, [r3, r2]
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	089b      	lsrs	r3, r3, #2
 800cfba:	223c      	movs	r2, #60	@ 0x3c
 800cfbc:	4013      	ands	r3, r2
 800cfbe:	0019      	movs	r1, r3
 800cfc0:	687a      	ldr	r2, [r7, #4]
 800cfc2:	23b9      	movs	r3, #185	@ 0xb9
 800cfc4:	009b      	lsls	r3, r3, #2
 800cfc6:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2101      	movs	r1, #1
 800cfcc:	0018      	movs	r0, r3
 800cfce:	f001 fc1b 	bl	800e808 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800cfd2:	e02c      	b.n	800d02e <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	0018      	movs	r0, r3
 800cfd8:	f008 fbe0 	bl	801579c <HAL_PCD_SuspendCallback>
    return;
 800cfdc:	e027      	b.n	800d02e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800cfde:	68fa      	ldr	r2, [r7, #12]
 800cfe0:	2380      	movs	r3, #128	@ 0x80
 800cfe2:	009b      	lsls	r3, r3, #2
 800cfe4:	4013      	ands	r3, r2
 800cfe6:	d010      	beq.n	800d00a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	2244      	movs	r2, #68	@ 0x44
 800cfee:	5a9b      	ldrh	r3, [r3, r2]
 800cff0:	b29a      	uxth	r2, r3
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4914      	ldr	r1, [pc, #80]	@ (800d048 <HAL_PCD_IRQHandler+0x280>)
 800cff8:	400a      	ands	r2, r1
 800cffa:	b291      	uxth	r1, r2
 800cffc:	2244      	movs	r2, #68	@ 0x44
 800cffe:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	0018      	movs	r0, r3
 800d004:	f008 fb96 	bl	8015734 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800d008:	e011      	b.n	800d02e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800d00a:	68fa      	ldr	r2, [r7, #12]
 800d00c:	2380      	movs	r3, #128	@ 0x80
 800d00e:	005b      	lsls	r3, r3, #1
 800d010:	4013      	ands	r3, r2
 800d012:	d00c      	beq.n	800d02e <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2244      	movs	r2, #68	@ 0x44
 800d01a:	5a9b      	ldrh	r3, [r3, r2]
 800d01c:	b29a      	uxth	r2, r3
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	490a      	ldr	r1, [pc, #40]	@ (800d04c <HAL_PCD_IRQHandler+0x284>)
 800d024:	400a      	ands	r2, r1
 800d026:	b291      	uxth	r1, r2
 800d028:	2244      	movs	r2, #68	@ 0x44
 800d02a:	5299      	strh	r1, [r3, r2]

    return;
 800d02c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d02e:	46bd      	mov	sp, r7
 800d030:	b004      	add	sp, #16
 800d032:	bd80      	pop	{r7, pc}
 800d034:	fffffbff 	.word	0xfffffbff
 800d038:	ffffbfff 	.word	0xffffbfff
 800d03c:	ffffdfff 	.word	0xffffdfff
 800d040:	ffffefff 	.word	0xffffefff
 800d044:	fffff7ff 	.word	0xfffff7ff
 800d048:	fffffdff 	.word	0xfffffdff
 800d04c:	fffffeff 	.word	0xfffffeff

0800d050 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
 800d058:	000a      	movs	r2, r1
 800d05a:	1cfb      	adds	r3, r7, #3
 800d05c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	23aa      	movs	r3, #170	@ 0xaa
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	5cd3      	ldrb	r3, [r2, r3]
 800d066:	2b01      	cmp	r3, #1
 800d068:	d101      	bne.n	800d06e <HAL_PCD_SetAddress+0x1e>
 800d06a:	2302      	movs	r3, #2
 800d06c:	e017      	b.n	800d09e <HAL_PCD_SetAddress+0x4e>
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	23aa      	movs	r3, #170	@ 0xaa
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	2101      	movs	r1, #1
 800d076:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	1cfa      	adds	r2, r7, #3
 800d07c:	2124      	movs	r1, #36	@ 0x24
 800d07e:	7812      	ldrb	r2, [r2, #0]
 800d080:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	1cfb      	adds	r3, r7, #3
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	0019      	movs	r1, r3
 800d08c:	0010      	movs	r0, r2
 800d08e:	f006 fb45 	bl	801371c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	23aa      	movs	r3, #170	@ 0xaa
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	2100      	movs	r1, #0
 800d09a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800d09c:	2300      	movs	r3, #0
}
 800d09e:	0018      	movs	r0, r3
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	b002      	add	sp, #8
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d0a6:	b590      	push	{r4, r7, lr}
 800d0a8:	b085      	sub	sp, #20
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
 800d0ae:	000c      	movs	r4, r1
 800d0b0:	0010      	movs	r0, r2
 800d0b2:	0019      	movs	r1, r3
 800d0b4:	1cfb      	adds	r3, r7, #3
 800d0b6:	1c22      	adds	r2, r4, #0
 800d0b8:	701a      	strb	r2, [r3, #0]
 800d0ba:	003b      	movs	r3, r7
 800d0bc:	1c02      	adds	r2, r0, #0
 800d0be:	801a      	strh	r2, [r3, #0]
 800d0c0:	1cbb      	adds	r3, r7, #2
 800d0c2:	1c0a      	adds	r2, r1, #0
 800d0c4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800d0c6:	230b      	movs	r3, #11
 800d0c8:	18fb      	adds	r3, r7, r3
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d0ce:	1cfb      	adds	r3, r7, #3
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	b25b      	sxtb	r3, r3
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	da0f      	bge.n	800d0f8 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d0d8:	1cfb      	adds	r3, r7, #3
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	2207      	movs	r2, #7
 800d0de:	4013      	ands	r3, r2
 800d0e0:	1c5a      	adds	r2, r3, #1
 800d0e2:	0013      	movs	r3, r2
 800d0e4:	009b      	lsls	r3, r3, #2
 800d0e6:	189b      	adds	r3, r3, r2
 800d0e8:	00db      	lsls	r3, r3, #3
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	18d3      	adds	r3, r2, r3
 800d0ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	705a      	strb	r2, [r3, #1]
 800d0f6:	e00f      	b.n	800d118 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d0f8:	1cfb      	adds	r3, r7, #3
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	2207      	movs	r2, #7
 800d0fe:	401a      	ands	r2, r3
 800d100:	0013      	movs	r3, r2
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	189b      	adds	r3, r3, r2
 800d106:	00db      	lsls	r3, r3, #3
 800d108:	3369      	adds	r3, #105	@ 0x69
 800d10a:	33ff      	adds	r3, #255	@ 0xff
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	18d3      	adds	r3, r2, r3
 800d110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2200      	movs	r2, #0
 800d116:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d118:	1cfb      	adds	r3, r7, #3
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	2207      	movs	r2, #7
 800d11e:	4013      	ands	r3, r2
 800d120:	b2da      	uxtb	r2, r3
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800d126:	003b      	movs	r3, r7
 800d128:	881a      	ldrh	r2, [r3, #0]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	1cba      	adds	r2, r7, #2
 800d132:	7812      	ldrb	r2, [r2, #0]
 800d134:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d136:	1cbb      	adds	r3, r7, #2
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	2b02      	cmp	r3, #2
 800d13c:	d102      	bne.n	800d144 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2200      	movs	r2, #0
 800d142:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	23aa      	movs	r3, #170	@ 0xaa
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	5cd3      	ldrb	r3, [r2, r3]
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d101      	bne.n	800d154 <HAL_PCD_EP_Open+0xae>
 800d150:	2302      	movs	r3, #2
 800d152:	e013      	b.n	800d17c <HAL_PCD_EP_Open+0xd6>
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	23aa      	movs	r3, #170	@ 0xaa
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	2101      	movs	r1, #1
 800d15c:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	68fa      	ldr	r2, [r7, #12]
 800d164:	0011      	movs	r1, r2
 800d166:	0018      	movs	r0, r3
 800d168:	f004 fb3c 	bl	80117e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	23aa      	movs	r3, #170	@ 0xaa
 800d170:	009b      	lsls	r3, r3, #2
 800d172:	2100      	movs	r1, #0
 800d174:	54d1      	strb	r1, [r2, r3]

  return ret;
 800d176:	230b      	movs	r3, #11
 800d178:	18fb      	adds	r3, r7, r3
 800d17a:	781b      	ldrb	r3, [r3, #0]
}
 800d17c:	0018      	movs	r0, r3
 800d17e:	46bd      	mov	sp, r7
 800d180:	b005      	add	sp, #20
 800d182:	bd90      	pop	{r4, r7, pc}

0800d184 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b084      	sub	sp, #16
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	000a      	movs	r2, r1
 800d18e:	1cfb      	adds	r3, r7, #3
 800d190:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d192:	1cfb      	adds	r3, r7, #3
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	b25b      	sxtb	r3, r3
 800d198:	2b00      	cmp	r3, #0
 800d19a:	da0f      	bge.n	800d1bc <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d19c:	1cfb      	adds	r3, r7, #3
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	2207      	movs	r2, #7
 800d1a2:	4013      	ands	r3, r2
 800d1a4:	1c5a      	adds	r2, r3, #1
 800d1a6:	0013      	movs	r3, r2
 800d1a8:	009b      	lsls	r3, r3, #2
 800d1aa:	189b      	adds	r3, r3, r2
 800d1ac:	00db      	lsls	r3, r3, #3
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	18d3      	adds	r3, r2, r3
 800d1b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	705a      	strb	r2, [r3, #1]
 800d1ba:	e00f      	b.n	800d1dc <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d1bc:	1cfb      	adds	r3, r7, #3
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	2207      	movs	r2, #7
 800d1c2:	401a      	ands	r2, r3
 800d1c4:	0013      	movs	r3, r2
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	189b      	adds	r3, r3, r2
 800d1ca:	00db      	lsls	r3, r3, #3
 800d1cc:	3369      	adds	r3, #105	@ 0x69
 800d1ce:	33ff      	adds	r3, #255	@ 0xff
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	18d3      	adds	r3, r2, r3
 800d1d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800d1dc:	1cfb      	adds	r3, r7, #3
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	2207      	movs	r2, #7
 800d1e2:	4013      	ands	r3, r2
 800d1e4:	b2da      	uxtb	r2, r3
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d1ea:	687a      	ldr	r2, [r7, #4]
 800d1ec:	23aa      	movs	r3, #170	@ 0xaa
 800d1ee:	009b      	lsls	r3, r3, #2
 800d1f0:	5cd3      	ldrb	r3, [r2, r3]
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d101      	bne.n	800d1fa <HAL_PCD_EP_Close+0x76>
 800d1f6:	2302      	movs	r3, #2
 800d1f8:	e011      	b.n	800d21e <HAL_PCD_EP_Close+0x9a>
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	23aa      	movs	r3, #170	@ 0xaa
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	2101      	movs	r1, #1
 800d202:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	0011      	movs	r1, r2
 800d20c:	0018      	movs	r0, r3
 800d20e:	f004 fe8b 	bl	8011f28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	23aa      	movs	r3, #170	@ 0xaa
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	2100      	movs	r1, #0
 800d21a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	0018      	movs	r0, r3
 800d220:	46bd      	mov	sp, r7
 800d222:	b004      	add	sp, #16
 800d224:	bd80      	pop	{r7, pc}

0800d226 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d226:	b580      	push	{r7, lr}
 800d228:	b086      	sub	sp, #24
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	60f8      	str	r0, [r7, #12]
 800d22e:	607a      	str	r2, [r7, #4]
 800d230:	603b      	str	r3, [r7, #0]
 800d232:	200b      	movs	r0, #11
 800d234:	183b      	adds	r3, r7, r0
 800d236:	1c0a      	adds	r2, r1, #0
 800d238:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d23a:	0001      	movs	r1, r0
 800d23c:	187b      	adds	r3, r7, r1
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	2207      	movs	r2, #7
 800d242:	401a      	ands	r2, r3
 800d244:	0013      	movs	r3, r2
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	189b      	adds	r3, r3, r2
 800d24a:	00db      	lsls	r3, r3, #3
 800d24c:	3369      	adds	r3, #105	@ 0x69
 800d24e:	33ff      	adds	r3, #255	@ 0xff
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	18d3      	adds	r3, r2, r3
 800d254:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	683a      	ldr	r2, [r7, #0]
 800d260:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	2200      	movs	r2, #0
 800d266:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	2200      	movs	r2, #0
 800d26c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d26e:	187b      	adds	r3, r7, r1
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	2207      	movs	r2, #7
 800d274:	4013      	ands	r3, r2
 800d276:	b2da      	uxtb	r2, r3
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	697a      	ldr	r2, [r7, #20]
 800d282:	0011      	movs	r1, r2
 800d284:	0018      	movs	r0, r3
 800d286:	f005 f80f 	bl	80122a8 <USB_EPStartXfer>

  return HAL_OK;
 800d28a:	2300      	movs	r3, #0
}
 800d28c:	0018      	movs	r0, r3
 800d28e:	46bd      	mov	sp, r7
 800d290:	b006      	add	sp, #24
 800d292:	bd80      	pop	{r7, pc}

0800d294 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	000a      	movs	r2, r1
 800d29e:	1cfb      	adds	r3, r7, #3
 800d2a0:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d2a2:	1cfb      	adds	r3, r7, #3
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	2207      	movs	r2, #7
 800d2a8:	401a      	ands	r2, r3
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	23c2      	movs	r3, #194	@ 0xc2
 800d2ae:	0059      	lsls	r1, r3, #1
 800d2b0:	0013      	movs	r3, r2
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	189b      	adds	r3, r3, r2
 800d2b6:	00db      	lsls	r3, r3, #3
 800d2b8:	18c3      	adds	r3, r0, r3
 800d2ba:	185b      	adds	r3, r3, r1
 800d2bc:	681b      	ldr	r3, [r3, #0]
}
 800d2be:	0018      	movs	r0, r3
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	b002      	add	sp, #8
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b086      	sub	sp, #24
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	60f8      	str	r0, [r7, #12]
 800d2ce:	607a      	str	r2, [r7, #4]
 800d2d0:	603b      	str	r3, [r7, #0]
 800d2d2:	200b      	movs	r0, #11
 800d2d4:	183b      	adds	r3, r7, r0
 800d2d6:	1c0a      	adds	r2, r1, #0
 800d2d8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d2da:	183b      	adds	r3, r7, r0
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	2207      	movs	r2, #7
 800d2e0:	4013      	ands	r3, r2
 800d2e2:	1c5a      	adds	r2, r3, #1
 800d2e4:	0013      	movs	r3, r2
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	189b      	adds	r3, r3, r2
 800d2ea:	00db      	lsls	r3, r3, #3
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	18d3      	adds	r3, r2, r3
 800d2f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	683a      	ldr	r2, [r7, #0]
 800d2fc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	2224      	movs	r2, #36	@ 0x24
 800d302:	2101      	movs	r1, #1
 800d304:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	683a      	ldr	r2, [r7, #0]
 800d30a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800d30c:	697b      	ldr	r3, [r7, #20]
 800d30e:	2200      	movs	r2, #0
 800d310:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	2201      	movs	r2, #1
 800d316:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d318:	183b      	adds	r3, r7, r0
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	2207      	movs	r2, #7
 800d31e:	4013      	ands	r3, r2
 800d320:	b2da      	uxtb	r2, r3
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	697a      	ldr	r2, [r7, #20]
 800d32c:	0011      	movs	r1, r2
 800d32e:	0018      	movs	r0, r3
 800d330:	f004 ffba 	bl	80122a8 <USB_EPStartXfer>

  return HAL_OK;
 800d334:	2300      	movs	r3, #0
}
 800d336:	0018      	movs	r0, r3
 800d338:	46bd      	mov	sp, r7
 800d33a:	b006      	add	sp, #24
 800d33c:	bd80      	pop	{r7, pc}

0800d33e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d33e:	b580      	push	{r7, lr}
 800d340:	b084      	sub	sp, #16
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
 800d346:	000a      	movs	r2, r1
 800d348:	1cfb      	adds	r3, r7, #3
 800d34a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d34c:	1cfb      	adds	r3, r7, #3
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	2207      	movs	r2, #7
 800d352:	401a      	ands	r2, r3
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	685b      	ldr	r3, [r3, #4]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d901      	bls.n	800d360 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800d35c:	2301      	movs	r3, #1
 800d35e:	e046      	b.n	800d3ee <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d360:	1cfb      	adds	r3, r7, #3
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	b25b      	sxtb	r3, r3
 800d366:	2b00      	cmp	r3, #0
 800d368:	da0f      	bge.n	800d38a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d36a:	1cfb      	adds	r3, r7, #3
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	2207      	movs	r2, #7
 800d370:	4013      	ands	r3, r2
 800d372:	1c5a      	adds	r2, r3, #1
 800d374:	0013      	movs	r3, r2
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	189b      	adds	r3, r3, r2
 800d37a:	00db      	lsls	r3, r3, #3
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	18d3      	adds	r3, r2, r3
 800d380:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	2201      	movs	r2, #1
 800d386:	705a      	strb	r2, [r3, #1]
 800d388:	e00d      	b.n	800d3a6 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d38a:	1cfb      	adds	r3, r7, #3
 800d38c:	781a      	ldrb	r2, [r3, #0]
 800d38e:	0013      	movs	r3, r2
 800d390:	009b      	lsls	r3, r3, #2
 800d392:	189b      	adds	r3, r3, r2
 800d394:	00db      	lsls	r3, r3, #3
 800d396:	3369      	adds	r3, #105	@ 0x69
 800d398:	33ff      	adds	r3, #255	@ 0xff
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	18d3      	adds	r3, r2, r3
 800d39e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d3ac:	1cfb      	adds	r3, r7, #3
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	2207      	movs	r2, #7
 800d3b2:	4013      	ands	r3, r2
 800d3b4:	b2da      	uxtb	r2, r3
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d3ba:	687a      	ldr	r2, [r7, #4]
 800d3bc:	23aa      	movs	r3, #170	@ 0xaa
 800d3be:	009b      	lsls	r3, r3, #2
 800d3c0:	5cd3      	ldrb	r3, [r2, r3]
 800d3c2:	2b01      	cmp	r3, #1
 800d3c4:	d101      	bne.n	800d3ca <HAL_PCD_EP_SetStall+0x8c>
 800d3c6:	2302      	movs	r3, #2
 800d3c8:	e011      	b.n	800d3ee <HAL_PCD_EP_SetStall+0xb0>
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	23aa      	movs	r3, #170	@ 0xaa
 800d3ce:	009b      	lsls	r3, r3, #2
 800d3d0:	2101      	movs	r1, #1
 800d3d2:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	68fa      	ldr	r2, [r7, #12]
 800d3da:	0011      	movs	r1, r2
 800d3dc:	0018      	movs	r0, r3
 800d3de:	f006 f89b 	bl	8013518 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800d3e2:	687a      	ldr	r2, [r7, #4]
 800d3e4:	23aa      	movs	r3, #170	@ 0xaa
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	2100      	movs	r1, #0
 800d3ea:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800d3ec:	2300      	movs	r3, #0
}
 800d3ee:	0018      	movs	r0, r3
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	b004      	add	sp, #16
 800d3f4:	bd80      	pop	{r7, pc}

0800d3f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d3f6:	b580      	push	{r7, lr}
 800d3f8:	b084      	sub	sp, #16
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
 800d3fe:	000a      	movs	r2, r1
 800d400:	1cfb      	adds	r3, r7, #3
 800d402:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d404:	1cfb      	adds	r3, r7, #3
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	220f      	movs	r2, #15
 800d40a:	401a      	ands	r2, r3
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	429a      	cmp	r2, r3
 800d412:	d901      	bls.n	800d418 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800d414:	2301      	movs	r3, #1
 800d416:	e048      	b.n	800d4aa <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d418:	1cfb      	adds	r3, r7, #3
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	b25b      	sxtb	r3, r3
 800d41e:	2b00      	cmp	r3, #0
 800d420:	da0f      	bge.n	800d442 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d422:	1cfb      	adds	r3, r7, #3
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	2207      	movs	r2, #7
 800d428:	4013      	ands	r3, r2
 800d42a:	1c5a      	adds	r2, r3, #1
 800d42c:	0013      	movs	r3, r2
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	189b      	adds	r3, r3, r2
 800d432:	00db      	lsls	r3, r3, #3
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	18d3      	adds	r3, r2, r3
 800d438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2201      	movs	r2, #1
 800d43e:	705a      	strb	r2, [r3, #1]
 800d440:	e00f      	b.n	800d462 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d442:	1cfb      	adds	r3, r7, #3
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	2207      	movs	r2, #7
 800d448:	401a      	ands	r2, r3
 800d44a:	0013      	movs	r3, r2
 800d44c:	009b      	lsls	r3, r3, #2
 800d44e:	189b      	adds	r3, r3, r2
 800d450:	00db      	lsls	r3, r3, #3
 800d452:	3369      	adds	r3, #105	@ 0x69
 800d454:	33ff      	adds	r3, #255	@ 0xff
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	18d3      	adds	r3, r2, r3
 800d45a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2200      	movs	r2, #0
 800d460:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2200      	movs	r2, #0
 800d466:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d468:	1cfb      	adds	r3, r7, #3
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	2207      	movs	r2, #7
 800d46e:	4013      	ands	r3, r2
 800d470:	b2da      	uxtb	r2, r3
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	23aa      	movs	r3, #170	@ 0xaa
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	5cd3      	ldrb	r3, [r2, r3]
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d101      	bne.n	800d486 <HAL_PCD_EP_ClrStall+0x90>
 800d482:	2302      	movs	r3, #2
 800d484:	e011      	b.n	800d4aa <HAL_PCD_EP_ClrStall+0xb4>
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	23aa      	movs	r3, #170	@ 0xaa
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	2101      	movs	r1, #1
 800d48e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	68fa      	ldr	r2, [r7, #12]
 800d496:	0011      	movs	r1, r2
 800d498:	0018      	movs	r0, r3
 800d49a:	f006 f88d 	bl	80135b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	23aa      	movs	r3, #170	@ 0xaa
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800d4a8:	2300      	movs	r3, #0
}
 800d4aa:	0018      	movs	r0, r3
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	b004      	add	sp, #16
 800d4b0:	bd80      	pop	{r7, pc}
	...

0800d4b4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800d4b4:	b5b0      	push	{r4, r5, r7, lr}
 800d4b6:	b096      	sub	sp, #88	@ 0x58
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800d4bc:	f000 fbec 	bl	800dc98 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	204e      	movs	r0, #78	@ 0x4e
 800d4c6:	183b      	adds	r3, r7, r0
 800d4c8:	2144      	movs	r1, #68	@ 0x44
 800d4ca:	5a52      	ldrh	r2, [r2, r1]
 800d4cc:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800d4ce:	183b      	adds	r3, r7, r0
 800d4d0:	881b      	ldrh	r3, [r3, #0]
 800d4d2:	b2da      	uxtb	r2, r3
 800d4d4:	244d      	movs	r4, #77	@ 0x4d
 800d4d6:	193b      	adds	r3, r7, r4
 800d4d8:	210f      	movs	r1, #15
 800d4da:	400a      	ands	r2, r1
 800d4dc:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800d4de:	193b      	adds	r3, r7, r4
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d000      	beq.n	800d4e8 <PCD_EP_ISR_Handler+0x34>
 800d4e6:	e18f      	b.n	800d808 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800d4e8:	183b      	adds	r3, r7, r0
 800d4ea:	881b      	ldrh	r3, [r3, #0]
 800d4ec:	2210      	movs	r2, #16
 800d4ee:	4013      	ands	r3, r2
 800d4f0:	d155      	bne.n	800d59e <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	881b      	ldrh	r3, [r3, #0]
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	200e      	movs	r0, #14
 800d4fc:	183b      	adds	r3, r7, r0
 800d4fe:	49bb      	ldr	r1, [pc, #748]	@ (800d7ec <PCD_EP_ISR_Handler+0x338>)
 800d500:	400a      	ands	r2, r1
 800d502:	801a      	strh	r2, [r3, #0]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	183a      	adds	r2, r7, r0
 800d50a:	8812      	ldrh	r2, [r2, #0]
 800d50c:	49b8      	ldr	r1, [pc, #736]	@ (800d7f0 <PCD_EP_ISR_Handler+0x33c>)
 800d50e:	430a      	orrs	r2, r1
 800d510:	b292      	uxth	r2, r2
 800d512:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	3328      	adds	r3, #40	@ 0x28
 800d518:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2250      	movs	r2, #80	@ 0x50
 800d520:	5a9b      	ldrh	r3, [r3, r2]
 800d522:	b29b      	uxth	r3, r3
 800d524:	001a      	movs	r2, r3
 800d526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	00db      	lsls	r3, r3, #3
 800d52c:	18d2      	adds	r2, r2, r3
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	18d3      	adds	r3, r2, r3
 800d534:	4aaf      	ldr	r2, [pc, #700]	@ (800d7f4 <PCD_EP_ISR_Handler+0x340>)
 800d536:	4694      	mov	ip, r2
 800d538:	4463      	add	r3, ip
 800d53a:	881b      	ldrh	r3, [r3, #0]
 800d53c:	059b      	lsls	r3, r3, #22
 800d53e:	0d9a      	lsrs	r2, r3, #22
 800d540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d542:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800d544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d546:	695a      	ldr	r2, [r3, #20]
 800d548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d54a:	69db      	ldr	r3, [r3, #28]
 800d54c:	18d2      	adds	r2, r2, r3
 800d54e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d550:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2100      	movs	r1, #0
 800d556:	0018      	movs	r0, r3
 800d558:	f008 f8ce 	bl	80156f8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2224      	movs	r2, #36	@ 0x24
 800d560:	5c9b      	ldrb	r3, [r3, r2]
 800d562:	b2db      	uxtb	r3, r3
 800d564:	2b00      	cmp	r3, #0
 800d566:	d101      	bne.n	800d56c <PCD_EP_ISR_Handler+0xb8>
 800d568:	f000 fb96 	bl	800dc98 <PCD_EP_ISR_Handler+0x7e4>
 800d56c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d56e:	699b      	ldr	r3, [r3, #24]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d001      	beq.n	800d578 <PCD_EP_ISR_Handler+0xc4>
 800d574:	f000 fb90 	bl	800dc98 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2224      	movs	r2, #36	@ 0x24
 800d57c:	5c9b      	ldrb	r3, [r3, r2]
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	2280      	movs	r2, #128	@ 0x80
 800d582:	4252      	negs	r2, r2
 800d584:	4313      	orrs	r3, r2
 800d586:	b2da      	uxtb	r2, r3
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	0011      	movs	r1, r2
 800d58e:	224c      	movs	r2, #76	@ 0x4c
 800d590:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2224      	movs	r2, #36	@ 0x24
 800d596:	2100      	movs	r1, #0
 800d598:	5499      	strb	r1, [r3, r2]
 800d59a:	f000 fb7d 	bl	800dc98 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	3369      	adds	r3, #105	@ 0x69
 800d5a2:	33ff      	adds	r3, #255	@ 0xff
 800d5a4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681a      	ldr	r2, [r3, #0]
 800d5aa:	214a      	movs	r1, #74	@ 0x4a
 800d5ac:	187b      	adds	r3, r7, r1
 800d5ae:	8812      	ldrh	r2, [r2, #0]
 800d5b0:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800d5b2:	187b      	adds	r3, r7, r1
 800d5b4:	881a      	ldrh	r2, [r3, #0]
 800d5b6:	2380      	movs	r3, #128	@ 0x80
 800d5b8:	011b      	lsls	r3, r3, #4
 800d5ba:	4013      	ands	r3, r2
 800d5bc:	d037      	beq.n	800d62e <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	2250      	movs	r2, #80	@ 0x50
 800d5c4:	5a9b      	ldrh	r3, [r3, r2]
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	001a      	movs	r2, r3
 800d5ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	00db      	lsls	r3, r3, #3
 800d5d0:	18d2      	adds	r2, r2, r3
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	18d3      	adds	r3, r2, r3
 800d5d8:	4a87      	ldr	r2, [pc, #540]	@ (800d7f8 <PCD_EP_ISR_Handler+0x344>)
 800d5da:	4694      	mov	ip, r2
 800d5dc:	4463      	add	r3, ip
 800d5de:	881b      	ldrh	r3, [r3, #0]
 800d5e0:	059b      	lsls	r3, r3, #22
 800d5e2:	0d9a      	lsrs	r2, r3, #22
 800d5e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5e6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6818      	ldr	r0, [r3, #0]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	22ac      	movs	r2, #172	@ 0xac
 800d5f0:	0092      	lsls	r2, r2, #2
 800d5f2:	1899      	adds	r1, r3, r2
 800d5f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5f6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800d5f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5fa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	f006 f90e 	bl	801381e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	881b      	ldrh	r3, [r3, #0]
 800d608:	b29a      	uxth	r2, r3
 800d60a:	2010      	movs	r0, #16
 800d60c:	183b      	adds	r3, r7, r0
 800d60e:	497b      	ldr	r1, [pc, #492]	@ (800d7fc <PCD_EP_ISR_Handler+0x348>)
 800d610:	400a      	ands	r2, r1
 800d612:	801a      	strh	r2, [r3, #0]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	183a      	adds	r2, r7, r0
 800d61a:	8812      	ldrh	r2, [r2, #0]
 800d61c:	2180      	movs	r1, #128	@ 0x80
 800d61e:	430a      	orrs	r2, r1
 800d620:	b292      	uxth	r2, r2
 800d622:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	0018      	movs	r0, r3
 800d628:	f008 f830 	bl	801568c <HAL_PCD_SetupStageCallback>
 800d62c:	e334      	b.n	800dc98 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d62e:	234a      	movs	r3, #74	@ 0x4a
 800d630:	18fb      	adds	r3, r7, r3
 800d632:	2200      	movs	r2, #0
 800d634:	5e9b      	ldrsh	r3, [r3, r2]
 800d636:	2b00      	cmp	r3, #0
 800d638:	db00      	blt.n	800d63c <PCD_EP_ISR_Handler+0x188>
 800d63a:	e32d      	b.n	800dc98 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	881b      	ldrh	r3, [r3, #0]
 800d642:	b29a      	uxth	r2, r3
 800d644:	201e      	movs	r0, #30
 800d646:	183b      	adds	r3, r7, r0
 800d648:	496c      	ldr	r1, [pc, #432]	@ (800d7fc <PCD_EP_ISR_Handler+0x348>)
 800d64a:	400a      	ands	r2, r1
 800d64c:	801a      	strh	r2, [r3, #0]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	183a      	adds	r2, r7, r0
 800d654:	8812      	ldrh	r2, [r2, #0]
 800d656:	2180      	movs	r1, #128	@ 0x80
 800d658:	430a      	orrs	r2, r1
 800d65a:	b292      	uxth	r2, r2
 800d65c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2250      	movs	r2, #80	@ 0x50
 800d664:	5a9b      	ldrh	r3, [r3, r2]
 800d666:	b29b      	uxth	r3, r3
 800d668:	001a      	movs	r2, r3
 800d66a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	00db      	lsls	r3, r3, #3
 800d670:	18d2      	adds	r2, r2, r3
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	18d3      	adds	r3, r2, r3
 800d678:	4a5f      	ldr	r2, [pc, #380]	@ (800d7f8 <PCD_EP_ISR_Handler+0x344>)
 800d67a:	4694      	mov	ip, r2
 800d67c:	4463      	add	r3, ip
 800d67e:	881b      	ldrh	r3, [r3, #0]
 800d680:	059b      	lsls	r3, r3, #22
 800d682:	0d9a      	lsrs	r2, r3, #22
 800d684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d686:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800d688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d68a:	69db      	ldr	r3, [r3, #28]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d01a      	beq.n	800d6c6 <PCD_EP_ISR_Handler+0x212>
 800d690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d692:	695b      	ldr	r3, [r3, #20]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d016      	beq.n	800d6c6 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6818      	ldr	r0, [r3, #0]
 800d69c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d69e:	6959      	ldr	r1, [r3, #20]
 800d6a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6a2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800d6a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6a6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	f006 f8b8 	bl	801381e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800d6ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6b0:	695a      	ldr	r2, [r3, #20]
 800d6b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6b4:	69db      	ldr	r3, [r3, #28]
 800d6b6:	18d2      	adds	r2, r2, r3
 800d6b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6ba:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2100      	movs	r1, #0
 800d6c0:	0018      	movs	r0, r3
 800d6c2:	f007 fff8 	bl	80156b6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	214a      	movs	r1, #74	@ 0x4a
 800d6cc:	187b      	adds	r3, r7, r1
 800d6ce:	8812      	ldrh	r2, [r2, #0]
 800d6d0:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800d6d2:	187b      	adds	r3, r7, r1
 800d6d4:	881a      	ldrh	r2, [r3, #0]
 800d6d6:	2380      	movs	r3, #128	@ 0x80
 800d6d8:	011b      	lsls	r3, r3, #4
 800d6da:	4013      	ands	r3, r2
 800d6dc:	d000      	beq.n	800d6e0 <PCD_EP_ISR_Handler+0x22c>
 800d6de:	e2db      	b.n	800dc98 <PCD_EP_ISR_Handler+0x7e4>
 800d6e0:	187b      	adds	r3, r7, r1
 800d6e2:	881a      	ldrh	r2, [r3, #0]
 800d6e4:	23c0      	movs	r3, #192	@ 0xc0
 800d6e6:	019b      	lsls	r3, r3, #6
 800d6e8:	401a      	ands	r2, r3
 800d6ea:	23c0      	movs	r3, #192	@ 0xc0
 800d6ec:	019b      	lsls	r3, r3, #6
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d100      	bne.n	800d6f4 <PCD_EP_ISR_Handler+0x240>
 800d6f2:	e2d1      	b.n	800dc98 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	61bb      	str	r3, [r7, #24]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2250      	movs	r2, #80	@ 0x50
 800d700:	5a9b      	ldrh	r3, [r3, r2]
 800d702:	b29b      	uxth	r3, r3
 800d704:	001a      	movs	r2, r3
 800d706:	69bb      	ldr	r3, [r7, #24]
 800d708:	189b      	adds	r3, r3, r2
 800d70a:	61bb      	str	r3, [r7, #24]
 800d70c:	69bb      	ldr	r3, [r7, #24]
 800d70e:	4a3a      	ldr	r2, [pc, #232]	@ (800d7f8 <PCD_EP_ISR_Handler+0x344>)
 800d710:	4694      	mov	ip, r2
 800d712:	4463      	add	r3, ip
 800d714:	617b      	str	r3, [r7, #20]
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	881b      	ldrh	r3, [r3, #0]
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	059b      	lsls	r3, r3, #22
 800d71e:	0d9b      	lsrs	r3, r3, #22
 800d720:	b29a      	uxth	r2, r3
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	801a      	strh	r2, [r3, #0]
 800d726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d728:	691b      	ldr	r3, [r3, #16]
 800d72a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d72c:	d91a      	bls.n	800d764 <PCD_EP_ISR_Handler+0x2b0>
 800d72e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d730:	691b      	ldr	r3, [r3, #16]
 800d732:	095b      	lsrs	r3, r3, #5
 800d734:	647b      	str	r3, [r7, #68]	@ 0x44
 800d736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d738:	691b      	ldr	r3, [r3, #16]
 800d73a:	221f      	movs	r2, #31
 800d73c:	4013      	ands	r3, r2
 800d73e:	d102      	bne.n	800d746 <PCD_EP_ISR_Handler+0x292>
 800d740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d742:	3b01      	subs	r3, #1
 800d744:	647b      	str	r3, [r7, #68]	@ 0x44
 800d746:	697b      	ldr	r3, [r7, #20]
 800d748:	881b      	ldrh	r3, [r3, #0]
 800d74a:	b29a      	uxth	r2, r3
 800d74c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d74e:	b29b      	uxth	r3, r3
 800d750:	029b      	lsls	r3, r3, #10
 800d752:	b29b      	uxth	r3, r3
 800d754:	4313      	orrs	r3, r2
 800d756:	b29b      	uxth	r3, r3
 800d758:	4a25      	ldr	r2, [pc, #148]	@ (800d7f0 <PCD_EP_ISR_Handler+0x33c>)
 800d75a:	4313      	orrs	r3, r2
 800d75c:	b29a      	uxth	r2, r3
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	801a      	strh	r2, [r3, #0]
 800d762:	e023      	b.n	800d7ac <PCD_EP_ISR_Handler+0x2f8>
 800d764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d766:	691b      	ldr	r3, [r3, #16]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d108      	bne.n	800d77e <PCD_EP_ISR_Handler+0x2ca>
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	881b      	ldrh	r3, [r3, #0]
 800d770:	b29b      	uxth	r3, r3
 800d772:	4a1f      	ldr	r2, [pc, #124]	@ (800d7f0 <PCD_EP_ISR_Handler+0x33c>)
 800d774:	4313      	orrs	r3, r2
 800d776:	b29a      	uxth	r2, r3
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	801a      	strh	r2, [r3, #0]
 800d77c:	e016      	b.n	800d7ac <PCD_EP_ISR_Handler+0x2f8>
 800d77e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d780:	691b      	ldr	r3, [r3, #16]
 800d782:	085b      	lsrs	r3, r3, #1
 800d784:	647b      	str	r3, [r7, #68]	@ 0x44
 800d786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d788:	691b      	ldr	r3, [r3, #16]
 800d78a:	2201      	movs	r2, #1
 800d78c:	4013      	ands	r3, r2
 800d78e:	d002      	beq.n	800d796 <PCD_EP_ISR_Handler+0x2e2>
 800d790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d792:	3301      	adds	r3, #1
 800d794:	647b      	str	r3, [r7, #68]	@ 0x44
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	881b      	ldrh	r3, [r3, #0]
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	029b      	lsls	r3, r3, #10
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	b29a      	uxth	r2, r3
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	881b      	ldrh	r3, [r3, #0]
 800d7b2:	b29a      	uxth	r2, r3
 800d7b4:	2012      	movs	r0, #18
 800d7b6:	183b      	adds	r3, r7, r0
 800d7b8:	4911      	ldr	r1, [pc, #68]	@ (800d800 <PCD_EP_ISR_Handler+0x34c>)
 800d7ba:	400a      	ands	r2, r1
 800d7bc:	801a      	strh	r2, [r3, #0]
 800d7be:	183b      	adds	r3, r7, r0
 800d7c0:	183a      	adds	r2, r7, r0
 800d7c2:	8812      	ldrh	r2, [r2, #0]
 800d7c4:	2180      	movs	r1, #128	@ 0x80
 800d7c6:	0149      	lsls	r1, r1, #5
 800d7c8:	404a      	eors	r2, r1
 800d7ca:	801a      	strh	r2, [r3, #0]
 800d7cc:	183b      	adds	r3, r7, r0
 800d7ce:	183a      	adds	r2, r7, r0
 800d7d0:	8812      	ldrh	r2, [r2, #0]
 800d7d2:	2180      	movs	r1, #128	@ 0x80
 800d7d4:	0189      	lsls	r1, r1, #6
 800d7d6:	404a      	eors	r2, r1
 800d7d8:	801a      	strh	r2, [r3, #0]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	183a      	adds	r2, r7, r0
 800d7e0:	8812      	ldrh	r2, [r2, #0]
 800d7e2:	4908      	ldr	r1, [pc, #32]	@ (800d804 <PCD_EP_ISR_Handler+0x350>)
 800d7e4:	430a      	orrs	r2, r1
 800d7e6:	b292      	uxth	r2, r2
 800d7e8:	801a      	strh	r2, [r3, #0]
 800d7ea:	e255      	b.n	800dc98 <PCD_EP_ISR_Handler+0x7e4>
 800d7ec:	ffff8f0f 	.word	0xffff8f0f
 800d7f0:	ffff8000 	.word	0xffff8000
 800d7f4:	00000402 	.word	0x00000402
 800d7f8:	00000406 	.word	0x00000406
 800d7fc:	00000f8f 	.word	0x00000f8f
 800d800:	ffffbf8f 	.word	0xffffbf8f
 800d804:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	001a      	movs	r2, r3
 800d80e:	204d      	movs	r0, #77	@ 0x4d
 800d810:	183b      	adds	r3, r7, r0
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	009b      	lsls	r3, r3, #2
 800d816:	18d2      	adds	r2, r2, r3
 800d818:	214a      	movs	r1, #74	@ 0x4a
 800d81a:	187b      	adds	r3, r7, r1
 800d81c:	8812      	ldrh	r2, [r2, #0]
 800d81e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d820:	187b      	adds	r3, r7, r1
 800d822:	2200      	movs	r2, #0
 800d824:	5e9b      	ldrsh	r3, [r3, r2]
 800d826:	2b00      	cmp	r3, #0
 800d828:	db00      	blt.n	800d82c <PCD_EP_ISR_Handler+0x378>
 800d82a:	e0fa      	b.n	800da22 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	001a      	movs	r2, r3
 800d832:	183b      	adds	r3, r7, r0
 800d834:	781b      	ldrb	r3, [r3, #0]
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	18d3      	adds	r3, r2, r3
 800d83a:	881b      	ldrh	r3, [r3, #0]
 800d83c:	b29a      	uxth	r2, r3
 800d83e:	2448      	movs	r4, #72	@ 0x48
 800d840:	193b      	adds	r3, r7, r4
 800d842:	49d1      	ldr	r1, [pc, #836]	@ (800db88 <PCD_EP_ISR_Handler+0x6d4>)
 800d844:	400a      	ands	r2, r1
 800d846:	801a      	strh	r2, [r3, #0]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	001a      	movs	r2, r3
 800d84e:	183b      	adds	r3, r7, r0
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	009b      	lsls	r3, r3, #2
 800d854:	18d3      	adds	r3, r2, r3
 800d856:	193a      	adds	r2, r7, r4
 800d858:	8812      	ldrh	r2, [r2, #0]
 800d85a:	2180      	movs	r1, #128	@ 0x80
 800d85c:	430a      	orrs	r2, r1
 800d85e:	b292      	uxth	r2, r2
 800d860:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800d862:	183b      	adds	r3, r7, r0
 800d864:	781a      	ldrb	r2, [r3, #0]
 800d866:	0013      	movs	r3, r2
 800d868:	009b      	lsls	r3, r3, #2
 800d86a:	189b      	adds	r3, r3, r2
 800d86c:	00db      	lsls	r3, r3, #3
 800d86e:	3369      	adds	r3, #105	@ 0x69
 800d870:	33ff      	adds	r3, #255	@ 0xff
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	18d3      	adds	r3, r2, r3
 800d876:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800d878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d87a:	7b1b      	ldrb	r3, [r3, #12]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d125      	bne.n	800d8cc <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	2250      	movs	r2, #80	@ 0x50
 800d886:	5a9b      	ldrh	r3, [r3, r2]
 800d888:	b29b      	uxth	r3, r3
 800d88a:	001a      	movs	r2, r3
 800d88c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	00db      	lsls	r3, r3, #3
 800d892:	18d2      	adds	r2, r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	18d3      	adds	r3, r2, r3
 800d89a:	4abc      	ldr	r2, [pc, #752]	@ (800db8c <PCD_EP_ISR_Handler+0x6d8>)
 800d89c:	4694      	mov	ip, r2
 800d89e:	4463      	add	r3, ip
 800d8a0:	881a      	ldrh	r2, [r3, #0]
 800d8a2:	2450      	movs	r4, #80	@ 0x50
 800d8a4:	193b      	adds	r3, r7, r4
 800d8a6:	0592      	lsls	r2, r2, #22
 800d8a8:	0d92      	lsrs	r2, r2, #22
 800d8aa:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800d8ac:	193b      	adds	r3, r7, r4
 800d8ae:	881b      	ldrh	r3, [r3, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d100      	bne.n	800d8b6 <PCD_EP_ISR_Handler+0x402>
 800d8b4:	e08d      	b.n	800d9d2 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6818      	ldr	r0, [r3, #0]
 800d8ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8bc:	6959      	ldr	r1, [r3, #20]
 800d8be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8c0:	88da      	ldrh	r2, [r3, #6]
 800d8c2:	193b      	adds	r3, r7, r4
 800d8c4:	881b      	ldrh	r3, [r3, #0]
 800d8c6:	f005 ffaa 	bl	801381e <USB_ReadPMA>
 800d8ca:	e082      	b.n	800d9d2 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800d8cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8ce:	78db      	ldrb	r3, [r3, #3]
 800d8d0:	2b02      	cmp	r3, #2
 800d8d2:	d10c      	bne.n	800d8ee <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800d8d4:	2350      	movs	r3, #80	@ 0x50
 800d8d6:	18fc      	adds	r4, r7, r3
 800d8d8:	234a      	movs	r3, #74	@ 0x4a
 800d8da:	18fb      	adds	r3, r7, r3
 800d8dc:	881a      	ldrh	r2, [r3, #0]
 800d8de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	0018      	movs	r0, r3
 800d8e4:	f000 f9ec 	bl	800dcc0 <HAL_PCD_EP_DB_Receive>
 800d8e8:	0003      	movs	r3, r0
 800d8ea:	8023      	strh	r3, [r4, #0]
 800d8ec:	e071      	b.n	800d9d2 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	001a      	movs	r2, r3
 800d8f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	009b      	lsls	r3, r3, #2
 800d8fa:	18d3      	adds	r3, r2, r3
 800d8fc:	881b      	ldrh	r3, [r3, #0]
 800d8fe:	b29a      	uxth	r2, r3
 800d900:	2052      	movs	r0, #82	@ 0x52
 800d902:	183b      	adds	r3, r7, r0
 800d904:	49a2      	ldr	r1, [pc, #648]	@ (800db90 <PCD_EP_ISR_Handler+0x6dc>)
 800d906:	400a      	ands	r2, r1
 800d908:	801a      	strh	r2, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	001a      	movs	r2, r3
 800d910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	009b      	lsls	r3, r3, #2
 800d916:	18d3      	adds	r3, r2, r3
 800d918:	183a      	adds	r2, r7, r0
 800d91a:	8812      	ldrh	r2, [r2, #0]
 800d91c:	499d      	ldr	r1, [pc, #628]	@ (800db94 <PCD_EP_ISR_Handler+0x6e0>)
 800d91e:	430a      	orrs	r2, r1
 800d920:	b292      	uxth	r2, r2
 800d922:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	001a      	movs	r2, r3
 800d92a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	009b      	lsls	r3, r3, #2
 800d930:	18d3      	adds	r3, r2, r3
 800d932:	881b      	ldrh	r3, [r3, #0]
 800d934:	b29b      	uxth	r3, r3
 800d936:	001a      	movs	r2, r3
 800d938:	2380      	movs	r3, #128	@ 0x80
 800d93a:	01db      	lsls	r3, r3, #7
 800d93c:	4013      	ands	r3, r2
 800d93e:	d024      	beq.n	800d98a <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	2250      	movs	r2, #80	@ 0x50
 800d946:	5a9b      	ldrh	r3, [r3, r2]
 800d948:	b29b      	uxth	r3, r3
 800d94a:	001a      	movs	r2, r3
 800d94c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d94e:	781b      	ldrb	r3, [r3, #0]
 800d950:	00db      	lsls	r3, r3, #3
 800d952:	18d2      	adds	r2, r2, r3
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	18d3      	adds	r3, r2, r3
 800d95a:	4a8f      	ldr	r2, [pc, #572]	@ (800db98 <PCD_EP_ISR_Handler+0x6e4>)
 800d95c:	4694      	mov	ip, r2
 800d95e:	4463      	add	r3, ip
 800d960:	881a      	ldrh	r2, [r3, #0]
 800d962:	2450      	movs	r4, #80	@ 0x50
 800d964:	193b      	adds	r3, r7, r4
 800d966:	0592      	lsls	r2, r2, #22
 800d968:	0d92      	lsrs	r2, r2, #22
 800d96a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800d96c:	193b      	adds	r3, r7, r4
 800d96e:	881b      	ldrh	r3, [r3, #0]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d02e      	beq.n	800d9d2 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6818      	ldr	r0, [r3, #0]
 800d978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d97a:	6959      	ldr	r1, [r3, #20]
 800d97c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d97e:	891a      	ldrh	r2, [r3, #8]
 800d980:	193b      	adds	r3, r7, r4
 800d982:	881b      	ldrh	r3, [r3, #0]
 800d984:	f005 ff4b 	bl	801381e <USB_ReadPMA>
 800d988:	e023      	b.n	800d9d2 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	2250      	movs	r2, #80	@ 0x50
 800d990:	5a9b      	ldrh	r3, [r3, r2]
 800d992:	b29b      	uxth	r3, r3
 800d994:	001a      	movs	r2, r3
 800d996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	00db      	lsls	r3, r3, #3
 800d99c:	18d2      	adds	r2, r2, r3
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	18d3      	adds	r3, r2, r3
 800d9a4:	4a79      	ldr	r2, [pc, #484]	@ (800db8c <PCD_EP_ISR_Handler+0x6d8>)
 800d9a6:	4694      	mov	ip, r2
 800d9a8:	4463      	add	r3, ip
 800d9aa:	881a      	ldrh	r2, [r3, #0]
 800d9ac:	2450      	movs	r4, #80	@ 0x50
 800d9ae:	193b      	adds	r3, r7, r4
 800d9b0:	0592      	lsls	r2, r2, #22
 800d9b2:	0d92      	lsrs	r2, r2, #22
 800d9b4:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800d9b6:	193b      	adds	r3, r7, r4
 800d9b8:	881b      	ldrh	r3, [r3, #0]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d009      	beq.n	800d9d2 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6818      	ldr	r0, [r3, #0]
 800d9c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9c4:	6959      	ldr	r1, [r3, #20]
 800d9c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9c8:	895a      	ldrh	r2, [r3, #10]
 800d9ca:	193b      	adds	r3, r7, r4
 800d9cc:	881b      	ldrh	r3, [r3, #0]
 800d9ce:	f005 ff26 	bl	801381e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800d9d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9d4:	69da      	ldr	r2, [r3, #28]
 800d9d6:	2150      	movs	r1, #80	@ 0x50
 800d9d8:	187b      	adds	r3, r7, r1
 800d9da:	881b      	ldrh	r3, [r3, #0]
 800d9dc:	18d2      	adds	r2, r2, r3
 800d9de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800d9e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9e4:	695a      	ldr	r2, [r3, #20]
 800d9e6:	187b      	adds	r3, r7, r1
 800d9e8:	881b      	ldrh	r3, [r3, #0]
 800d9ea:	18d2      	adds	r2, r2, r3
 800d9ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9ee:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800d9f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9f2:	699b      	ldr	r3, [r3, #24]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d005      	beq.n	800da04 <PCD_EP_ISR_Handler+0x550>
 800d9f8:	187b      	adds	r3, r7, r1
 800d9fa:	881a      	ldrh	r2, [r3, #0]
 800d9fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9fe:	691b      	ldr	r3, [r3, #16]
 800da00:	429a      	cmp	r2, r3
 800da02:	d207      	bcs.n	800da14 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800da04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da06:	781a      	ldrb	r2, [r3, #0]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	0011      	movs	r1, r2
 800da0c:	0018      	movs	r0, r3
 800da0e:	f007 fe52 	bl	80156b6 <HAL_PCD_DataOutStageCallback>
 800da12:	e006      	b.n	800da22 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800da1a:	0011      	movs	r1, r2
 800da1c:	0018      	movs	r0, r3
 800da1e:	f004 fc43 	bl	80122a8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800da22:	244a      	movs	r4, #74	@ 0x4a
 800da24:	193b      	adds	r3, r7, r4
 800da26:	881b      	ldrh	r3, [r3, #0]
 800da28:	2280      	movs	r2, #128	@ 0x80
 800da2a:	4013      	ands	r3, r2
 800da2c:	d100      	bne.n	800da30 <PCD_EP_ISR_Handler+0x57c>
 800da2e:	e133      	b.n	800dc98 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800da30:	204d      	movs	r0, #77	@ 0x4d
 800da32:	183b      	adds	r3, r7, r0
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	1c5a      	adds	r2, r3, #1
 800da38:	0013      	movs	r3, r2
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	189b      	adds	r3, r3, r2
 800da3e:	00db      	lsls	r3, r3, #3
 800da40:	687a      	ldr	r2, [r7, #4]
 800da42:	18d3      	adds	r3, r2, r3
 800da44:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	001a      	movs	r2, r3
 800da4c:	183b      	adds	r3, r7, r0
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	009b      	lsls	r3, r3, #2
 800da52:	18d3      	adds	r3, r2, r3
 800da54:	881b      	ldrh	r3, [r3, #0]
 800da56:	b29a      	uxth	r2, r3
 800da58:	2542      	movs	r5, #66	@ 0x42
 800da5a:	197b      	adds	r3, r7, r5
 800da5c:	494f      	ldr	r1, [pc, #316]	@ (800db9c <PCD_EP_ISR_Handler+0x6e8>)
 800da5e:	400a      	ands	r2, r1
 800da60:	801a      	strh	r2, [r3, #0]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	001a      	movs	r2, r3
 800da68:	183b      	adds	r3, r7, r0
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	009b      	lsls	r3, r3, #2
 800da6e:	18d3      	adds	r3, r2, r3
 800da70:	197a      	adds	r2, r7, r5
 800da72:	8812      	ldrh	r2, [r2, #0]
 800da74:	494a      	ldr	r1, [pc, #296]	@ (800dba0 <PCD_EP_ISR_Handler+0x6ec>)
 800da76:	430a      	orrs	r2, r1
 800da78:	b292      	uxth	r2, r2
 800da7a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800da7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da7e:	78db      	ldrb	r3, [r3, #3]
 800da80:	2b01      	cmp	r3, #1
 800da82:	d000      	beq.n	800da86 <PCD_EP_ISR_Handler+0x5d2>
 800da84:	e0af      	b.n	800dbe6 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800da86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da88:	2200      	movs	r2, #0
 800da8a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800da8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da8e:	7b1b      	ldrb	r3, [r3, #12]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d100      	bne.n	800da96 <PCD_EP_ISR_Handler+0x5e2>
 800da94:	e09f      	b.n	800dbd6 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800da96:	193b      	adds	r3, r7, r4
 800da98:	881b      	ldrh	r3, [r3, #0]
 800da9a:	2240      	movs	r2, #64	@ 0x40
 800da9c:	4013      	ands	r3, r2
 800da9e:	d046      	beq.n	800db2e <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800daa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daa2:	785b      	ldrb	r3, [r3, #1]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d125      	bne.n	800daf4 <PCD_EP_ISR_Handler+0x640>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	627b      	str	r3, [r7, #36]	@ 0x24
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2250      	movs	r2, #80	@ 0x50
 800dab4:	5a9b      	ldrh	r3, [r3, r2]
 800dab6:	b29b      	uxth	r3, r3
 800dab8:	001a      	movs	r2, r3
 800daba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dabc:	189b      	adds	r3, r3, r2
 800dabe:	627b      	str	r3, [r7, #36]	@ 0x24
 800dac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	00da      	lsls	r2, r3, #3
 800dac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac8:	18d3      	adds	r3, r2, r3
 800daca:	4a33      	ldr	r2, [pc, #204]	@ (800db98 <PCD_EP_ISR_Handler+0x6e4>)
 800dacc:	4694      	mov	ip, r2
 800dace:	4463      	add	r3, ip
 800dad0:	623b      	str	r3, [r7, #32]
 800dad2:	6a3b      	ldr	r3, [r7, #32]
 800dad4:	881b      	ldrh	r3, [r3, #0]
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	059b      	lsls	r3, r3, #22
 800dada:	0d9b      	lsrs	r3, r3, #22
 800dadc:	b29a      	uxth	r2, r3
 800dade:	6a3b      	ldr	r3, [r7, #32]
 800dae0:	801a      	strh	r2, [r3, #0]
 800dae2:	6a3b      	ldr	r3, [r7, #32]
 800dae4:	881b      	ldrh	r3, [r3, #0]
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	4a2d      	ldr	r2, [pc, #180]	@ (800dba0 <PCD_EP_ISR_Handler+0x6ec>)
 800daea:	4313      	orrs	r3, r2
 800daec:	b29a      	uxth	r2, r3
 800daee:	6a3b      	ldr	r3, [r7, #32]
 800daf0:	801a      	strh	r2, [r3, #0]
 800daf2:	e070      	b.n	800dbd6 <PCD_EP_ISR_Handler+0x722>
 800daf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daf6:	785b      	ldrb	r3, [r3, #1]
 800daf8:	2b01      	cmp	r3, #1
 800dafa:	d16c      	bne.n	800dbd6 <PCD_EP_ISR_Handler+0x722>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	2250      	movs	r2, #80	@ 0x50
 800db08:	5a9b      	ldrh	r3, [r3, r2]
 800db0a:	b29b      	uxth	r3, r3
 800db0c:	001a      	movs	r2, r3
 800db0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db10:	189b      	adds	r3, r3, r2
 800db12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	00da      	lsls	r2, r3, #3
 800db1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db1c:	18d3      	adds	r3, r2, r3
 800db1e:	4a1e      	ldr	r2, [pc, #120]	@ (800db98 <PCD_EP_ISR_Handler+0x6e4>)
 800db20:	4694      	mov	ip, r2
 800db22:	4463      	add	r3, ip
 800db24:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db28:	2200      	movs	r2, #0
 800db2a:	801a      	strh	r2, [r3, #0]
 800db2c:	e053      	b.n	800dbd6 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db36:	785b      	ldrb	r3, [r3, #1]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d133      	bne.n	800dba4 <PCD_EP_ISR_Handler+0x6f0>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	637b      	str	r3, [r7, #52]	@ 0x34
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	2250      	movs	r2, #80	@ 0x50
 800db48:	5a9b      	ldrh	r3, [r3, r2]
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	001a      	movs	r2, r3
 800db4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db50:	189b      	adds	r3, r3, r2
 800db52:	637b      	str	r3, [r7, #52]	@ 0x34
 800db54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	00da      	lsls	r2, r3, #3
 800db5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db5c:	18d3      	adds	r3, r2, r3
 800db5e:	4a0b      	ldr	r2, [pc, #44]	@ (800db8c <PCD_EP_ISR_Handler+0x6d8>)
 800db60:	4694      	mov	ip, r2
 800db62:	4463      	add	r3, ip
 800db64:	633b      	str	r3, [r7, #48]	@ 0x30
 800db66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db68:	881b      	ldrh	r3, [r3, #0]
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	059b      	lsls	r3, r3, #22
 800db6e:	0d9b      	lsrs	r3, r3, #22
 800db70:	b29a      	uxth	r2, r3
 800db72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db74:	801a      	strh	r2, [r3, #0]
 800db76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db78:	881b      	ldrh	r3, [r3, #0]
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	4a08      	ldr	r2, [pc, #32]	@ (800dba0 <PCD_EP_ISR_Handler+0x6ec>)
 800db7e:	4313      	orrs	r3, r2
 800db80:	b29a      	uxth	r2, r3
 800db82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db84:	801a      	strh	r2, [r3, #0]
 800db86:	e026      	b.n	800dbd6 <PCD_EP_ISR_Handler+0x722>
 800db88:	00000f8f 	.word	0x00000f8f
 800db8c:	00000406 	.word	0x00000406
 800db90:	ffff8f8f 	.word	0xffff8f8f
 800db94:	ffff80c0 	.word	0xffff80c0
 800db98:	00000402 	.word	0x00000402
 800db9c:	ffff8f0f 	.word	0xffff8f0f
 800dba0:	ffff8000 	.word	0xffff8000
 800dba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dba6:	785b      	ldrb	r3, [r3, #1]
 800dba8:	2b01      	cmp	r3, #1
 800dbaa:	d114      	bne.n	800dbd6 <PCD_EP_ISR_Handler+0x722>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2250      	movs	r2, #80	@ 0x50
 800dbb2:	5a9b      	ldrh	r3, [r3, r2]
 800dbb4:	b29b      	uxth	r3, r3
 800dbb6:	001a      	movs	r2, r3
 800dbb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbba:	189b      	adds	r3, r3, r2
 800dbbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dbbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	00da      	lsls	r2, r3, #3
 800dbc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbc6:	18d3      	adds	r3, r2, r3
 800dbc8:	4a3b      	ldr	r2, [pc, #236]	@ (800dcb8 <PCD_EP_ISR_Handler+0x804>)
 800dbca:	4694      	mov	ip, r2
 800dbcc:	4463      	add	r3, ip
 800dbce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dbd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800dbd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbd8:	781a      	ldrb	r2, [r3, #0]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	0011      	movs	r1, r2
 800dbde:	0018      	movs	r0, r3
 800dbe0:	f007 fd8a 	bl	80156f8 <HAL_PCD_DataInStageCallback>
 800dbe4:	e058      	b.n	800dc98 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800dbe6:	234a      	movs	r3, #74	@ 0x4a
 800dbe8:	18fb      	adds	r3, r7, r3
 800dbea:	881a      	ldrh	r2, [r3, #0]
 800dbec:	2380      	movs	r3, #128	@ 0x80
 800dbee:	005b      	lsls	r3, r3, #1
 800dbf0:	4013      	ands	r3, r2
 800dbf2:	d149      	bne.n	800dc88 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2250      	movs	r2, #80	@ 0x50
 800dbfa:	5a9b      	ldrh	r3, [r3, r2]
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	001a      	movs	r2, r3
 800dc00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	00db      	lsls	r3, r3, #3
 800dc06:	18d2      	adds	r2, r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	18d3      	adds	r3, r2, r3
 800dc0e:	4a2b      	ldr	r2, [pc, #172]	@ (800dcbc <PCD_EP_ISR_Handler+0x808>)
 800dc10:	4694      	mov	ip, r2
 800dc12:	4463      	add	r3, ip
 800dc14:	881a      	ldrh	r2, [r3, #0]
 800dc16:	2140      	movs	r1, #64	@ 0x40
 800dc18:	187b      	adds	r3, r7, r1
 800dc1a:	0592      	lsls	r2, r2, #22
 800dc1c:	0d92      	lsrs	r2, r2, #22
 800dc1e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800dc20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc22:	699a      	ldr	r2, [r3, #24]
 800dc24:	187b      	adds	r3, r7, r1
 800dc26:	881b      	ldrh	r3, [r3, #0]
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d907      	bls.n	800dc3c <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 800dc2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc2e:	699a      	ldr	r2, [r3, #24]
 800dc30:	187b      	adds	r3, r7, r1
 800dc32:	881b      	ldrh	r3, [r3, #0]
 800dc34:	1ad2      	subs	r2, r2, r3
 800dc36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc38:	619a      	str	r2, [r3, #24]
 800dc3a:	e002      	b.n	800dc42 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 800dc3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc3e:	2200      	movs	r2, #0
 800dc40:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800dc42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc44:	699b      	ldr	r3, [r3, #24]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d107      	bne.n	800dc5a <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800dc4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc4c:	781a      	ldrb	r2, [r3, #0]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	0011      	movs	r1, r2
 800dc52:	0018      	movs	r0, r3
 800dc54:	f007 fd50 	bl	80156f8 <HAL_PCD_DataInStageCallback>
 800dc58:	e01e      	b.n	800dc98 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800dc5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc5c:	695a      	ldr	r2, [r3, #20]
 800dc5e:	2140      	movs	r1, #64	@ 0x40
 800dc60:	187b      	adds	r3, r7, r1
 800dc62:	881b      	ldrh	r3, [r3, #0]
 800dc64:	18d2      	adds	r2, r2, r3
 800dc66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc68:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800dc6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc6c:	69da      	ldr	r2, [r3, #28]
 800dc6e:	187b      	adds	r3, r7, r1
 800dc70:	881b      	ldrh	r3, [r3, #0]
 800dc72:	18d2      	adds	r2, r2, r3
 800dc74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc76:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dc7e:	0011      	movs	r1, r2
 800dc80:	0018      	movs	r0, r3
 800dc82:	f004 fb11 	bl	80122a8 <USB_EPStartXfer>
 800dc86:	e007      	b.n	800dc98 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800dc88:	234a      	movs	r3, #74	@ 0x4a
 800dc8a:	18fb      	adds	r3, r7, r3
 800dc8c:	881a      	ldrh	r2, [r3, #0]
 800dc8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	0018      	movs	r0, r3
 800dc94:	f000 f930 	bl	800def8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	2244      	movs	r2, #68	@ 0x44
 800dc9e:	5a9b      	ldrh	r3, [r3, r2]
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	b21b      	sxth	r3, r3
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	da01      	bge.n	800dcac <PCD_EP_ISR_Handler+0x7f8>
 800dca8:	f7ff fc0a 	bl	800d4c0 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800dcac:	2300      	movs	r3, #0
}
 800dcae:	0018      	movs	r0, r3
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	b016      	add	sp, #88	@ 0x58
 800dcb4:	bdb0      	pop	{r4, r5, r7, pc}
 800dcb6:	46c0      	nop			@ (mov r8, r8)
 800dcb8:	00000406 	.word	0x00000406
 800dcbc:	00000402 	.word	0x00000402

0800dcc0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800dcc0:	b590      	push	{r4, r7, lr}
 800dcc2:	b089      	sub	sp, #36	@ 0x24
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	60f8      	str	r0, [r7, #12]
 800dcc8:	60b9      	str	r1, [r7, #8]
 800dcca:	1dbb      	adds	r3, r7, #6
 800dccc:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800dcce:	1dbb      	adds	r3, r7, #6
 800dcd0:	881a      	ldrh	r2, [r3, #0]
 800dcd2:	2380      	movs	r3, #128	@ 0x80
 800dcd4:	01db      	lsls	r3, r3, #7
 800dcd6:	4013      	ands	r3, r2
 800dcd8:	d100      	bne.n	800dcdc <HAL_PCD_EP_DB_Receive+0x1c>
 800dcda:	e07d      	b.n	800ddd8 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2250      	movs	r2, #80	@ 0x50
 800dce2:	5a9b      	ldrh	r3, [r3, r2]
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	001a      	movs	r2, r3
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	00db      	lsls	r3, r3, #3
 800dcee:	18d2      	adds	r2, r2, r3
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	18d3      	adds	r3, r2, r3
 800dcf6:	4a7a      	ldr	r2, [pc, #488]	@ (800dee0 <HAL_PCD_EP_DB_Receive+0x220>)
 800dcf8:	4694      	mov	ip, r2
 800dcfa:	4463      	add	r3, ip
 800dcfc:	881a      	ldrh	r2, [r3, #0]
 800dcfe:	211a      	movs	r1, #26
 800dd00:	187b      	adds	r3, r7, r1
 800dd02:	0592      	lsls	r2, r2, #22
 800dd04:	0d92      	lsrs	r2, r2, #22
 800dd06:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	699a      	ldr	r2, [r3, #24]
 800dd0c:	187b      	adds	r3, r7, r1
 800dd0e:	881b      	ldrh	r3, [r3, #0]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d307      	bcc.n	800dd24 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	699a      	ldr	r2, [r3, #24]
 800dd18:	187b      	adds	r3, r7, r1
 800dd1a:	881b      	ldrh	r3, [r3, #0]
 800dd1c:	1ad2      	subs	r2, r2, r3
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	619a      	str	r2, [r3, #24]
 800dd22:	e002      	b.n	800dd2a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	2200      	movs	r2, #0
 800dd28:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	699b      	ldr	r3, [r3, #24]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d121      	bne.n	800dd76 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	001a      	movs	r2, r3
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	18d3      	adds	r3, r2, r3
 800dd40:	881b      	ldrh	r3, [r3, #0]
 800dd42:	b29a      	uxth	r2, r3
 800dd44:	2018      	movs	r0, #24
 800dd46:	183b      	adds	r3, r7, r0
 800dd48:	4966      	ldr	r1, [pc, #408]	@ (800dee4 <HAL_PCD_EP_DB_Receive+0x224>)
 800dd4a:	400a      	ands	r2, r1
 800dd4c:	801a      	strh	r2, [r3, #0]
 800dd4e:	183b      	adds	r3, r7, r0
 800dd50:	183a      	adds	r2, r7, r0
 800dd52:	8812      	ldrh	r2, [r2, #0]
 800dd54:	2180      	movs	r1, #128	@ 0x80
 800dd56:	0189      	lsls	r1, r1, #6
 800dd58:	404a      	eors	r2, r1
 800dd5a:	801a      	strh	r2, [r3, #0]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	001a      	movs	r2, r3
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	009b      	lsls	r3, r3, #2
 800dd68:	18d3      	adds	r3, r2, r3
 800dd6a:	183a      	adds	r2, r7, r0
 800dd6c:	8812      	ldrh	r2, [r2, #0]
 800dd6e:	495e      	ldr	r1, [pc, #376]	@ (800dee8 <HAL_PCD_EP_DB_Receive+0x228>)
 800dd70:	430a      	orrs	r2, r1
 800dd72:	b292      	uxth	r2, r2
 800dd74:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800dd76:	1dbb      	adds	r3, r7, #6
 800dd78:	881b      	ldrh	r3, [r3, #0]
 800dd7a:	2240      	movs	r2, #64	@ 0x40
 800dd7c:	4013      	ands	r3, r2
 800dd7e:	d01a      	beq.n	800ddb6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	001a      	movs	r2, r3
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	009b      	lsls	r3, r3, #2
 800dd8c:	18d3      	adds	r3, r2, r3
 800dd8e:	881b      	ldrh	r3, [r3, #0]
 800dd90:	b29a      	uxth	r2, r3
 800dd92:	2016      	movs	r0, #22
 800dd94:	183b      	adds	r3, r7, r0
 800dd96:	4955      	ldr	r1, [pc, #340]	@ (800deec <HAL_PCD_EP_DB_Receive+0x22c>)
 800dd98:	400a      	ands	r2, r1
 800dd9a:	801a      	strh	r2, [r3, #0]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	001a      	movs	r2, r3
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	009b      	lsls	r3, r3, #2
 800dda8:	18d3      	adds	r3, r2, r3
 800ddaa:	183a      	adds	r2, r7, r0
 800ddac:	8812      	ldrh	r2, [r2, #0]
 800ddae:	4950      	ldr	r1, [pc, #320]	@ (800def0 <HAL_PCD_EP_DB_Receive+0x230>)
 800ddb0:	430a      	orrs	r2, r1
 800ddb2:	b292      	uxth	r2, r2
 800ddb4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800ddb6:	241a      	movs	r4, #26
 800ddb8:	193b      	adds	r3, r7, r4
 800ddba:	881b      	ldrh	r3, [r3, #0]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d100      	bne.n	800ddc2 <HAL_PCD_EP_DB_Receive+0x102>
 800ddc0:	e086      	b.n	800ded0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	6818      	ldr	r0, [r3, #0]
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	6959      	ldr	r1, [r3, #20]
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	891a      	ldrh	r2, [r3, #8]
 800ddce:	193b      	adds	r3, r7, r4
 800ddd0:	881b      	ldrh	r3, [r3, #0]
 800ddd2:	f005 fd24 	bl	801381e <USB_ReadPMA>
 800ddd6:	e07b      	b.n	800ded0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	2250      	movs	r2, #80	@ 0x50
 800ddde:	5a9b      	ldrh	r3, [r3, r2]
 800dde0:	b29b      	uxth	r3, r3
 800dde2:	001a      	movs	r2, r3
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	00db      	lsls	r3, r3, #3
 800ddea:	18d2      	adds	r2, r2, r3
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	18d3      	adds	r3, r2, r3
 800ddf2:	4a40      	ldr	r2, [pc, #256]	@ (800def4 <HAL_PCD_EP_DB_Receive+0x234>)
 800ddf4:	4694      	mov	ip, r2
 800ddf6:	4463      	add	r3, ip
 800ddf8:	881a      	ldrh	r2, [r3, #0]
 800ddfa:	211a      	movs	r1, #26
 800ddfc:	187b      	adds	r3, r7, r1
 800ddfe:	0592      	lsls	r2, r2, #22
 800de00:	0d92      	lsrs	r2, r2, #22
 800de02:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	699a      	ldr	r2, [r3, #24]
 800de08:	187b      	adds	r3, r7, r1
 800de0a:	881b      	ldrh	r3, [r3, #0]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d307      	bcc.n	800de20 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	699a      	ldr	r2, [r3, #24]
 800de14:	187b      	adds	r3, r7, r1
 800de16:	881b      	ldrh	r3, [r3, #0]
 800de18:	1ad2      	subs	r2, r2, r3
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	619a      	str	r2, [r3, #24]
 800de1e:	e002      	b.n	800de26 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	2200      	movs	r2, #0
 800de24:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	699b      	ldr	r3, [r3, #24]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d121      	bne.n	800de72 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	001a      	movs	r2, r3
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	18d3      	adds	r3, r2, r3
 800de3c:	881b      	ldrh	r3, [r3, #0]
 800de3e:	b29a      	uxth	r2, r3
 800de40:	201e      	movs	r0, #30
 800de42:	183b      	adds	r3, r7, r0
 800de44:	4927      	ldr	r1, [pc, #156]	@ (800dee4 <HAL_PCD_EP_DB_Receive+0x224>)
 800de46:	400a      	ands	r2, r1
 800de48:	801a      	strh	r2, [r3, #0]
 800de4a:	183b      	adds	r3, r7, r0
 800de4c:	183a      	adds	r2, r7, r0
 800de4e:	8812      	ldrh	r2, [r2, #0]
 800de50:	2180      	movs	r1, #128	@ 0x80
 800de52:	0189      	lsls	r1, r1, #6
 800de54:	404a      	eors	r2, r1
 800de56:	801a      	strh	r2, [r3, #0]
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	001a      	movs	r2, r3
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	009b      	lsls	r3, r3, #2
 800de64:	18d3      	adds	r3, r2, r3
 800de66:	183a      	adds	r2, r7, r0
 800de68:	8812      	ldrh	r2, [r2, #0]
 800de6a:	491f      	ldr	r1, [pc, #124]	@ (800dee8 <HAL_PCD_EP_DB_Receive+0x228>)
 800de6c:	430a      	orrs	r2, r1
 800de6e:	b292      	uxth	r2, r2
 800de70:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800de72:	1dbb      	adds	r3, r7, #6
 800de74:	881b      	ldrh	r3, [r3, #0]
 800de76:	2240      	movs	r2, #64	@ 0x40
 800de78:	4013      	ands	r3, r2
 800de7a:	d11a      	bne.n	800deb2 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	001a      	movs	r2, r3
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	009b      	lsls	r3, r3, #2
 800de88:	18d3      	adds	r3, r2, r3
 800de8a:	881b      	ldrh	r3, [r3, #0]
 800de8c:	b29a      	uxth	r2, r3
 800de8e:	201c      	movs	r0, #28
 800de90:	183b      	adds	r3, r7, r0
 800de92:	4916      	ldr	r1, [pc, #88]	@ (800deec <HAL_PCD_EP_DB_Receive+0x22c>)
 800de94:	400a      	ands	r2, r1
 800de96:	801a      	strh	r2, [r3, #0]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	001a      	movs	r2, r3
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	009b      	lsls	r3, r3, #2
 800dea4:	18d3      	adds	r3, r2, r3
 800dea6:	183a      	adds	r2, r7, r0
 800dea8:	8812      	ldrh	r2, [r2, #0]
 800deaa:	4911      	ldr	r1, [pc, #68]	@ (800def0 <HAL_PCD_EP_DB_Receive+0x230>)
 800deac:	430a      	orrs	r2, r1
 800deae:	b292      	uxth	r2, r2
 800deb0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800deb2:	241a      	movs	r4, #26
 800deb4:	193b      	adds	r3, r7, r4
 800deb6:	881b      	ldrh	r3, [r3, #0]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d009      	beq.n	800ded0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6818      	ldr	r0, [r3, #0]
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	6959      	ldr	r1, [r3, #20]
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	895a      	ldrh	r2, [r3, #10]
 800dec8:	193b      	adds	r3, r7, r4
 800deca:	881b      	ldrh	r3, [r3, #0]
 800decc:	f005 fca7 	bl	801381e <USB_ReadPMA>
    }
  }

  return count;
 800ded0:	231a      	movs	r3, #26
 800ded2:	18fb      	adds	r3, r7, r3
 800ded4:	881b      	ldrh	r3, [r3, #0]
}
 800ded6:	0018      	movs	r0, r3
 800ded8:	46bd      	mov	sp, r7
 800deda:	b009      	add	sp, #36	@ 0x24
 800dedc:	bd90      	pop	{r4, r7, pc}
 800dede:	46c0      	nop			@ (mov r8, r8)
 800dee0:	00000402 	.word	0x00000402
 800dee4:	ffffbf8f 	.word	0xffffbf8f
 800dee8:	ffff8080 	.word	0xffff8080
 800deec:	ffff8f8f 	.word	0xffff8f8f
 800def0:	ffff80c0 	.word	0xffff80c0
 800def4:	00000406 	.word	0x00000406

0800def8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b0a4      	sub	sp, #144	@ 0x90
 800defc:	af00      	add	r7, sp, #0
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	1dbb      	adds	r3, r7, #6
 800df04:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800df06:	1dbb      	adds	r3, r7, #6
 800df08:	881b      	ldrh	r3, [r3, #0]
 800df0a:	2240      	movs	r2, #64	@ 0x40
 800df0c:	4013      	ands	r3, r2
 800df0e:	d100      	bne.n	800df12 <HAL_PCD_EP_DB_Transmit+0x1a>
 800df10:	e1e4      	b.n	800e2dc <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2250      	movs	r2, #80	@ 0x50
 800df18:	5a9b      	ldrh	r3, [r3, r2]
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	001a      	movs	r2, r3
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	00db      	lsls	r3, r3, #3
 800df24:	18d2      	adds	r2, r2, r3
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	18d3      	adds	r3, r2, r3
 800df2c:	4ad0      	ldr	r2, [pc, #832]	@ (800e270 <HAL_PCD_EP_DB_Transmit+0x378>)
 800df2e:	4694      	mov	ip, r2
 800df30:	4463      	add	r3, ip
 800df32:	881a      	ldrh	r2, [r3, #0]
 800df34:	2186      	movs	r1, #134	@ 0x86
 800df36:	187b      	adds	r3, r7, r1
 800df38:	0592      	lsls	r2, r2, #22
 800df3a:	0d92      	lsrs	r2, r2, #22
 800df3c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	699a      	ldr	r2, [r3, #24]
 800df42:	187b      	adds	r3, r7, r1
 800df44:	881b      	ldrh	r3, [r3, #0]
 800df46:	429a      	cmp	r2, r3
 800df48:	d907      	bls.n	800df5a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	699a      	ldr	r2, [r3, #24]
 800df4e:	187b      	adds	r3, r7, r1
 800df50:	881b      	ldrh	r3, [r3, #0]
 800df52:	1ad2      	subs	r2, r2, r3
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	619a      	str	r2, [r3, #24]
 800df58:	e002      	b.n	800df60 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	2200      	movs	r2, #0
 800df5e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	699b      	ldr	r3, [r3, #24]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d000      	beq.n	800df6a <HAL_PCD_EP_DB_Transmit+0x72>
 800df68:	e0b5      	b.n	800e0d6 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	785b      	ldrb	r3, [r3, #1]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d125      	bne.n	800dfbe <HAL_PCD_EP_DB_Transmit+0xc6>
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2250      	movs	r2, #80	@ 0x50
 800df7e:	5a9b      	ldrh	r3, [r3, r2]
 800df80:	b29b      	uxth	r3, r3
 800df82:	001a      	movs	r2, r3
 800df84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df86:	189b      	adds	r3, r3, r2
 800df88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	00da      	lsls	r2, r3, #3
 800df90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df92:	18d3      	adds	r3, r2, r3
 800df94:	4ab6      	ldr	r2, [pc, #728]	@ (800e270 <HAL_PCD_EP_DB_Transmit+0x378>)
 800df96:	4694      	mov	ip, r2
 800df98:	4463      	add	r3, ip
 800df9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800df9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df9e:	881b      	ldrh	r3, [r3, #0]
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	059b      	lsls	r3, r3, #22
 800dfa4:	0d9b      	lsrs	r3, r3, #22
 800dfa6:	b29a      	uxth	r2, r3
 800dfa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfaa:	801a      	strh	r2, [r3, #0]
 800dfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfae:	881b      	ldrh	r3, [r3, #0]
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	4ab0      	ldr	r2, [pc, #704]	@ (800e274 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	b29a      	uxth	r2, r3
 800dfb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfba:	801a      	strh	r2, [r3, #0]
 800dfbc:	e01b      	b.n	800dff6 <HAL_PCD_EP_DB_Transmit+0xfe>
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	785b      	ldrb	r3, [r3, #1]
 800dfc2:	2b01      	cmp	r3, #1
 800dfc4:	d117      	bne.n	800dff6 <HAL_PCD_EP_DB_Transmit+0xfe>
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	2250      	movs	r2, #80	@ 0x50
 800dfd2:	5a9b      	ldrh	r3, [r3, r2]
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	001a      	movs	r2, r3
 800dfd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfda:	189b      	adds	r3, r3, r2
 800dfdc:	637b      	str	r3, [r7, #52]	@ 0x34
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	00da      	lsls	r2, r3, #3
 800dfe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfe6:	18d3      	adds	r3, r2, r3
 800dfe8:	4aa1      	ldr	r2, [pc, #644]	@ (800e270 <HAL_PCD_EP_DB_Transmit+0x378>)
 800dfea:	4694      	mov	ip, r2
 800dfec:	4463      	add	r3, ip
 800dfee:	633b      	str	r3, [r7, #48]	@ 0x30
 800dff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff2:	2200      	movs	r2, #0
 800dff4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	627b      	str	r3, [r7, #36]	@ 0x24
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	785b      	ldrb	r3, [r3, #1]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d125      	bne.n	800e050 <HAL_PCD_EP_DB_Transmit+0x158>
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	61fb      	str	r3, [r7, #28]
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2250      	movs	r2, #80	@ 0x50
 800e010:	5a9b      	ldrh	r3, [r3, r2]
 800e012:	b29b      	uxth	r3, r3
 800e014:	001a      	movs	r2, r3
 800e016:	69fb      	ldr	r3, [r7, #28]
 800e018:	189b      	adds	r3, r3, r2
 800e01a:	61fb      	str	r3, [r7, #28]
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	00da      	lsls	r2, r3, #3
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	18d3      	adds	r3, r2, r3
 800e026:	4a94      	ldr	r2, [pc, #592]	@ (800e278 <HAL_PCD_EP_DB_Transmit+0x380>)
 800e028:	4694      	mov	ip, r2
 800e02a:	4463      	add	r3, ip
 800e02c:	61bb      	str	r3, [r7, #24]
 800e02e:	69bb      	ldr	r3, [r7, #24]
 800e030:	881b      	ldrh	r3, [r3, #0]
 800e032:	b29b      	uxth	r3, r3
 800e034:	059b      	lsls	r3, r3, #22
 800e036:	0d9b      	lsrs	r3, r3, #22
 800e038:	b29a      	uxth	r2, r3
 800e03a:	69bb      	ldr	r3, [r7, #24]
 800e03c:	801a      	strh	r2, [r3, #0]
 800e03e:	69bb      	ldr	r3, [r7, #24]
 800e040:	881b      	ldrh	r3, [r3, #0]
 800e042:	b29b      	uxth	r3, r3
 800e044:	4a8b      	ldr	r2, [pc, #556]	@ (800e274 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e046:	4313      	orrs	r3, r2
 800e048:	b29a      	uxth	r2, r3
 800e04a:	69bb      	ldr	r3, [r7, #24]
 800e04c:	801a      	strh	r2, [r3, #0]
 800e04e:	e018      	b.n	800e082 <HAL_PCD_EP_DB_Transmit+0x18a>
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	785b      	ldrb	r3, [r3, #1]
 800e054:	2b01      	cmp	r3, #1
 800e056:	d114      	bne.n	800e082 <HAL_PCD_EP_DB_Transmit+0x18a>
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2250      	movs	r2, #80	@ 0x50
 800e05e:	5a9b      	ldrh	r3, [r3, r2]
 800e060:	b29b      	uxth	r3, r3
 800e062:	001a      	movs	r2, r3
 800e064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e066:	189b      	adds	r3, r3, r2
 800e068:	627b      	str	r3, [r7, #36]	@ 0x24
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	00da      	lsls	r2, r3, #3
 800e070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e072:	18d3      	adds	r3, r2, r3
 800e074:	4a80      	ldr	r2, [pc, #512]	@ (800e278 <HAL_PCD_EP_DB_Transmit+0x380>)
 800e076:	4694      	mov	ip, r2
 800e078:	4463      	add	r3, ip
 800e07a:	623b      	str	r3, [r7, #32]
 800e07c:	6a3b      	ldr	r3, [r7, #32]
 800e07e:	2200      	movs	r2, #0
 800e080:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	781a      	ldrb	r2, [r3, #0]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	0011      	movs	r1, r2
 800e08a:	0018      	movs	r0, r3
 800e08c:	f007 fb34 	bl	80156f8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800e090:	1dbb      	adds	r3, r7, #6
 800e092:	881a      	ldrh	r2, [r3, #0]
 800e094:	2380      	movs	r3, #128	@ 0x80
 800e096:	01db      	lsls	r3, r3, #7
 800e098:	4013      	ands	r3, r2
 800e09a:	d100      	bne.n	800e09e <HAL_PCD_EP_DB_Transmit+0x1a6>
 800e09c:	e309      	b.n	800e6b2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	001a      	movs	r2, r3
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	18d3      	adds	r3, r2, r3
 800e0ac:	881b      	ldrh	r3, [r3, #0]
 800e0ae:	b29a      	uxth	r2, r3
 800e0b0:	2016      	movs	r0, #22
 800e0b2:	183b      	adds	r3, r7, r0
 800e0b4:	4971      	ldr	r1, [pc, #452]	@ (800e27c <HAL_PCD_EP_DB_Transmit+0x384>)
 800e0b6:	400a      	ands	r2, r1
 800e0b8:	801a      	strh	r2, [r3, #0]
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	001a      	movs	r2, r3
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	18d3      	adds	r3, r2, r3
 800e0c8:	183a      	adds	r2, r7, r0
 800e0ca:	8812      	ldrh	r2, [r2, #0]
 800e0cc:	496c      	ldr	r1, [pc, #432]	@ (800e280 <HAL_PCD_EP_DB_Transmit+0x388>)
 800e0ce:	430a      	orrs	r2, r1
 800e0d0:	b292      	uxth	r2, r2
 800e0d2:	801a      	strh	r2, [r3, #0]
 800e0d4:	e2ed      	b.n	800e6b2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800e0d6:	1dbb      	adds	r3, r7, #6
 800e0d8:	881a      	ldrh	r2, [r3, #0]
 800e0da:	2380      	movs	r3, #128	@ 0x80
 800e0dc:	01db      	lsls	r3, r3, #7
 800e0de:	4013      	ands	r3, r2
 800e0e0:	d01a      	beq.n	800e118 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	001a      	movs	r2, r3
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	18d3      	adds	r3, r2, r3
 800e0f0:	881b      	ldrh	r3, [r3, #0]
 800e0f2:	b29a      	uxth	r2, r3
 800e0f4:	208a      	movs	r0, #138	@ 0x8a
 800e0f6:	183b      	adds	r3, r7, r0
 800e0f8:	4960      	ldr	r1, [pc, #384]	@ (800e27c <HAL_PCD_EP_DB_Transmit+0x384>)
 800e0fa:	400a      	ands	r2, r1
 800e0fc:	801a      	strh	r2, [r3, #0]
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	001a      	movs	r2, r3
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	009b      	lsls	r3, r3, #2
 800e10a:	18d3      	adds	r3, r2, r3
 800e10c:	183a      	adds	r2, r7, r0
 800e10e:	8812      	ldrh	r2, [r2, #0]
 800e110:	495b      	ldr	r1, [pc, #364]	@ (800e280 <HAL_PCD_EP_DB_Transmit+0x388>)
 800e112:	430a      	orrs	r2, r1
 800e114:	b292      	uxth	r2, r2
 800e116:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	2224      	movs	r2, #36	@ 0x24
 800e11c:	5c9b      	ldrb	r3, [r3, r2]
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d000      	beq.n	800e124 <HAL_PCD_EP_DB_Transmit+0x22c>
 800e122:	e2c6      	b.n	800e6b2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	695a      	ldr	r2, [r3, #20]
 800e128:	2186      	movs	r1, #134	@ 0x86
 800e12a:	187b      	adds	r3, r7, r1
 800e12c:	881b      	ldrh	r3, [r3, #0]
 800e12e:	18d2      	adds	r2, r2, r3
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	69da      	ldr	r2, [r3, #28]
 800e138:	187b      	adds	r3, r7, r1
 800e13a:	881b      	ldrh	r3, [r3, #0]
 800e13c:	18d2      	adds	r2, r2, r3
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	6a1a      	ldr	r2, [r3, #32]
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	691b      	ldr	r3, [r3, #16]
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d30c      	bcc.n	800e168 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	691b      	ldr	r3, [r3, #16]
 800e152:	218c      	movs	r1, #140	@ 0x8c
 800e154:	187a      	adds	r2, r7, r1
 800e156:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	6a1a      	ldr	r2, [r3, #32]
 800e15c:	187b      	adds	r3, r7, r1
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	1ad2      	subs	r2, r2, r3
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	621a      	str	r2, [r3, #32]
 800e166:	e01a      	b.n	800e19e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	6a1b      	ldr	r3, [r3, #32]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d10a      	bne.n	800e186 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800e170:	2386      	movs	r3, #134	@ 0x86
 800e172:	18fb      	adds	r3, r7, r3
 800e174:	881b      	ldrh	r3, [r3, #0]
 800e176:	228c      	movs	r2, #140	@ 0x8c
 800e178:	18ba      	adds	r2, r7, r2
 800e17a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	2224      	movs	r2, #36	@ 0x24
 800e180:	2100      	movs	r1, #0
 800e182:	5499      	strb	r1, [r3, r2]
 800e184:	e00b      	b.n	800e19e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	2224      	movs	r2, #36	@ 0x24
 800e18a:	2100      	movs	r1, #0
 800e18c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	6a1b      	ldr	r3, [r3, #32]
 800e192:	228c      	movs	r2, #140	@ 0x8c
 800e194:	18ba      	adds	r2, r7, r2
 800e196:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	2200      	movs	r2, #0
 800e19c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	785b      	ldrb	r3, [r3, #1]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d000      	beq.n	800e1a8 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800e1a6:	e06d      	b.n	800e284 <HAL_PCD_EP_DB_Transmit+0x38c>
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2250      	movs	r2, #80	@ 0x50
 800e1b4:	5a9b      	ldrh	r3, [r3, r2]
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	001a      	movs	r2, r3
 800e1ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1bc:	189b      	adds	r3, r3, r2
 800e1be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	00da      	lsls	r2, r3, #3
 800e1c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1c8:	18d3      	adds	r3, r2, r3
 800e1ca:	4a29      	ldr	r2, [pc, #164]	@ (800e270 <HAL_PCD_EP_DB_Transmit+0x378>)
 800e1cc:	4694      	mov	ip, r2
 800e1ce:	4463      	add	r3, ip
 800e1d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1d4:	881b      	ldrh	r3, [r3, #0]
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	059b      	lsls	r3, r3, #22
 800e1da:	0d9b      	lsrs	r3, r3, #22
 800e1dc:	b29a      	uxth	r2, r3
 800e1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1e0:	801a      	strh	r2, [r3, #0]
 800e1e2:	228c      	movs	r2, #140	@ 0x8c
 800e1e4:	18bb      	adds	r3, r7, r2
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2b3e      	cmp	r3, #62	@ 0x3e
 800e1ea:	d91a      	bls.n	800e222 <HAL_PCD_EP_DB_Transmit+0x32a>
 800e1ec:	18bb      	adds	r3, r7, r2
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	095b      	lsrs	r3, r3, #5
 800e1f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e1f4:	18bb      	adds	r3, r7, r2
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	221f      	movs	r2, #31
 800e1fa:	4013      	ands	r3, r2
 800e1fc:	d102      	bne.n	800e204 <HAL_PCD_EP_DB_Transmit+0x30c>
 800e1fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e200:	3b01      	subs	r3, #1
 800e202:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e206:	881b      	ldrh	r3, [r3, #0]
 800e208:	b29a      	uxth	r2, r3
 800e20a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e20c:	b29b      	uxth	r3, r3
 800e20e:	029b      	lsls	r3, r3, #10
 800e210:	b29b      	uxth	r3, r3
 800e212:	4313      	orrs	r3, r2
 800e214:	b29b      	uxth	r3, r3
 800e216:	4a17      	ldr	r2, [pc, #92]	@ (800e274 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e218:	4313      	orrs	r3, r2
 800e21a:	b29a      	uxth	r2, r3
 800e21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e21e:	801a      	strh	r2, [r3, #0]
 800e220:	e04f      	b.n	800e2c2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e222:	238c      	movs	r3, #140	@ 0x8c
 800e224:	18fb      	adds	r3, r7, r3
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d108      	bne.n	800e23e <HAL_PCD_EP_DB_Transmit+0x346>
 800e22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e22e:	881b      	ldrh	r3, [r3, #0]
 800e230:	b29b      	uxth	r3, r3
 800e232:	4a10      	ldr	r2, [pc, #64]	@ (800e274 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e234:	4313      	orrs	r3, r2
 800e236:	b29a      	uxth	r2, r3
 800e238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e23a:	801a      	strh	r2, [r3, #0]
 800e23c:	e041      	b.n	800e2c2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e23e:	228c      	movs	r2, #140	@ 0x8c
 800e240:	18bb      	adds	r3, r7, r2
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	085b      	lsrs	r3, r3, #1
 800e246:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e248:	18bb      	adds	r3, r7, r2
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2201      	movs	r2, #1
 800e24e:	4013      	ands	r3, r2
 800e250:	d002      	beq.n	800e258 <HAL_PCD_EP_DB_Transmit+0x360>
 800e252:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e254:	3301      	adds	r3, #1
 800e256:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e25a:	881b      	ldrh	r3, [r3, #0]
 800e25c:	b29a      	uxth	r2, r3
 800e25e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e260:	b29b      	uxth	r3, r3
 800e262:	029b      	lsls	r3, r3, #10
 800e264:	b29b      	uxth	r3, r3
 800e266:	4313      	orrs	r3, r2
 800e268:	b29a      	uxth	r2, r3
 800e26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e26c:	801a      	strh	r2, [r3, #0]
 800e26e:	e028      	b.n	800e2c2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e270:	00000402 	.word	0x00000402
 800e274:	ffff8000 	.word	0xffff8000
 800e278:	00000406 	.word	0x00000406
 800e27c:	ffff8f8f 	.word	0xffff8f8f
 800e280:	ffffc080 	.word	0xffffc080
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	785b      	ldrb	r3, [r3, #1]
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d11a      	bne.n	800e2c2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	647b      	str	r3, [r7, #68]	@ 0x44
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2250      	movs	r2, #80	@ 0x50
 800e298:	5a9b      	ldrh	r3, [r3, r2]
 800e29a:	b29b      	uxth	r3, r3
 800e29c:	001a      	movs	r2, r3
 800e29e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2a0:	189b      	adds	r3, r3, r2
 800e2a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	00da      	lsls	r2, r3, #3
 800e2aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2ac:	18d3      	adds	r3, r2, r3
 800e2ae:	4adb      	ldr	r2, [pc, #876]	@ (800e61c <HAL_PCD_EP_DB_Transmit+0x724>)
 800e2b0:	4694      	mov	ip, r2
 800e2b2:	4463      	add	r3, ip
 800e2b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800e2b6:	238c      	movs	r3, #140	@ 0x8c
 800e2b8:	18fb      	adds	r3, r7, r3
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	b29a      	uxth	r2, r3
 800e2be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2c0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	6818      	ldr	r0, [r3, #0]
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	6959      	ldr	r1, [r3, #20]
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	891a      	ldrh	r2, [r3, #8]
 800e2ce:	238c      	movs	r3, #140	@ 0x8c
 800e2d0:	18fb      	adds	r3, r7, r3
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	f005 fa59 	bl	801378c <USB_WritePMA>
 800e2da:	e1ea      	b.n	800e6b2 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	2250      	movs	r2, #80	@ 0x50
 800e2e2:	5a9b      	ldrh	r3, [r3, r2]
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	001a      	movs	r2, r3
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	00db      	lsls	r3, r3, #3
 800e2ee:	18d2      	adds	r2, r2, r3
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	18d3      	adds	r3, r2, r3
 800e2f6:	4aca      	ldr	r2, [pc, #808]	@ (800e620 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e2f8:	4694      	mov	ip, r2
 800e2fa:	4463      	add	r3, ip
 800e2fc:	881a      	ldrh	r2, [r3, #0]
 800e2fe:	2186      	movs	r1, #134	@ 0x86
 800e300:	187b      	adds	r3, r7, r1
 800e302:	0592      	lsls	r2, r2, #22
 800e304:	0d92      	lsrs	r2, r2, #22
 800e306:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	699a      	ldr	r2, [r3, #24]
 800e30c:	187b      	adds	r3, r7, r1
 800e30e:	881b      	ldrh	r3, [r3, #0]
 800e310:	429a      	cmp	r2, r3
 800e312:	d307      	bcc.n	800e324 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	699a      	ldr	r2, [r3, #24]
 800e318:	187b      	adds	r3, r7, r1
 800e31a:	881b      	ldrh	r3, [r3, #0]
 800e31c:	1ad2      	subs	r2, r2, r3
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	619a      	str	r2, [r3, #24]
 800e322:	e002      	b.n	800e32a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	2200      	movs	r2, #0
 800e328:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	699b      	ldr	r3, [r3, #24]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d000      	beq.n	800e334 <HAL_PCD_EP_DB_Transmit+0x43c>
 800e332:	e0bb      	b.n	800e4ac <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	785b      	ldrb	r3, [r3, #1]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d125      	bne.n	800e388 <HAL_PCD_EP_DB_Transmit+0x490>
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	2250      	movs	r2, #80	@ 0x50
 800e348:	5a9b      	ldrh	r3, [r3, r2]
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	001a      	movs	r2, r3
 800e34e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e350:	189b      	adds	r3, r3, r2
 800e352:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	00da      	lsls	r2, r3, #3
 800e35a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e35c:	18d3      	adds	r3, r2, r3
 800e35e:	4aaf      	ldr	r2, [pc, #700]	@ (800e61c <HAL_PCD_EP_DB_Transmit+0x724>)
 800e360:	4694      	mov	ip, r2
 800e362:	4463      	add	r3, ip
 800e364:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e366:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e368:	881b      	ldrh	r3, [r3, #0]
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	059b      	lsls	r3, r3, #22
 800e36e:	0d9b      	lsrs	r3, r3, #22
 800e370:	b29a      	uxth	r2, r3
 800e372:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e374:	801a      	strh	r2, [r3, #0]
 800e376:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e378:	881b      	ldrh	r3, [r3, #0]
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	4aa9      	ldr	r2, [pc, #676]	@ (800e624 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e37e:	4313      	orrs	r3, r2
 800e380:	b29a      	uxth	r2, r3
 800e382:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e384:	801a      	strh	r2, [r3, #0]
 800e386:	e01b      	b.n	800e3c0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	785b      	ldrb	r3, [r3, #1]
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	d117      	bne.n	800e3c0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	667b      	str	r3, [r7, #100]	@ 0x64
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	2250      	movs	r2, #80	@ 0x50
 800e39c:	5a9b      	ldrh	r3, [r3, r2]
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	001a      	movs	r2, r3
 800e3a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e3a4:	189b      	adds	r3, r3, r2
 800e3a6:	667b      	str	r3, [r7, #100]	@ 0x64
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	00da      	lsls	r2, r3, #3
 800e3ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e3b0:	18d3      	adds	r3, r2, r3
 800e3b2:	4a9a      	ldr	r2, [pc, #616]	@ (800e61c <HAL_PCD_EP_DB_Transmit+0x724>)
 800e3b4:	4694      	mov	ip, r2
 800e3b6:	4463      	add	r3, ip
 800e3b8:	663b      	str	r3, [r7, #96]	@ 0x60
 800e3ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e3bc:	2200      	movs	r2, #0
 800e3be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	677b      	str	r3, [r7, #116]	@ 0x74
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	785b      	ldrb	r3, [r3, #1]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d12b      	bne.n	800e426 <HAL_PCD_EP_DB_Transmit+0x52e>
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	2250      	movs	r2, #80	@ 0x50
 800e3da:	5a9b      	ldrh	r3, [r3, r2]
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	001a      	movs	r2, r3
 800e3e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e3e2:	189b      	adds	r3, r3, r2
 800e3e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	00da      	lsls	r2, r3, #3
 800e3ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e3ee:	18d3      	adds	r3, r2, r3
 800e3f0:	4a8b      	ldr	r2, [pc, #556]	@ (800e620 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e3f2:	4694      	mov	ip, r2
 800e3f4:	4463      	add	r3, ip
 800e3f6:	2180      	movs	r1, #128	@ 0x80
 800e3f8:	187a      	adds	r2, r7, r1
 800e3fa:	6013      	str	r3, [r2, #0]
 800e3fc:	187b      	adds	r3, r7, r1
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	881b      	ldrh	r3, [r3, #0]
 800e402:	b29b      	uxth	r3, r3
 800e404:	059b      	lsls	r3, r3, #22
 800e406:	0d9b      	lsrs	r3, r3, #22
 800e408:	b29a      	uxth	r2, r3
 800e40a:	187b      	adds	r3, r7, r1
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	801a      	strh	r2, [r3, #0]
 800e410:	187b      	adds	r3, r7, r1
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	881b      	ldrh	r3, [r3, #0]
 800e416:	b29b      	uxth	r3, r3
 800e418:	4a82      	ldr	r2, [pc, #520]	@ (800e624 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e41a:	4313      	orrs	r3, r2
 800e41c:	b29a      	uxth	r2, r3
 800e41e:	187b      	adds	r3, r7, r1
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	801a      	strh	r2, [r3, #0]
 800e424:	e018      	b.n	800e458 <HAL_PCD_EP_DB_Transmit+0x560>
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	785b      	ldrb	r3, [r3, #1]
 800e42a:	2b01      	cmp	r3, #1
 800e42c:	d114      	bne.n	800e458 <HAL_PCD_EP_DB_Transmit+0x560>
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	2250      	movs	r2, #80	@ 0x50
 800e434:	5a9b      	ldrh	r3, [r3, r2]
 800e436:	b29b      	uxth	r3, r3
 800e438:	001a      	movs	r2, r3
 800e43a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e43c:	189b      	adds	r3, r3, r2
 800e43e:	677b      	str	r3, [r7, #116]	@ 0x74
 800e440:	68bb      	ldr	r3, [r7, #8]
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	00da      	lsls	r2, r3, #3
 800e446:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e448:	18d3      	adds	r3, r2, r3
 800e44a:	4a75      	ldr	r2, [pc, #468]	@ (800e620 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e44c:	4694      	mov	ip, r2
 800e44e:	4463      	add	r3, ip
 800e450:	673b      	str	r3, [r7, #112]	@ 0x70
 800e452:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e454:	2200      	movs	r2, #0
 800e456:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	781a      	ldrb	r2, [r3, #0]
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	0011      	movs	r1, r2
 800e460:	0018      	movs	r0, r3
 800e462:	f007 f949 	bl	80156f8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800e466:	1dbb      	adds	r3, r7, #6
 800e468:	881a      	ldrh	r2, [r3, #0]
 800e46a:	2380      	movs	r3, #128	@ 0x80
 800e46c:	01db      	lsls	r3, r3, #7
 800e46e:	4013      	ands	r3, r2
 800e470:	d000      	beq.n	800e474 <HAL_PCD_EP_DB_Transmit+0x57c>
 800e472:	e11e      	b.n	800e6b2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	001a      	movs	r2, r3
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	781b      	ldrb	r3, [r3, #0]
 800e47e:	009b      	lsls	r3, r3, #2
 800e480:	18d3      	adds	r3, r2, r3
 800e482:	881b      	ldrh	r3, [r3, #0]
 800e484:	b29a      	uxth	r2, r3
 800e486:	2088      	movs	r0, #136	@ 0x88
 800e488:	183b      	adds	r3, r7, r0
 800e48a:	4967      	ldr	r1, [pc, #412]	@ (800e628 <HAL_PCD_EP_DB_Transmit+0x730>)
 800e48c:	400a      	ands	r2, r1
 800e48e:	801a      	strh	r2, [r3, #0]
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	001a      	movs	r2, r3
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	009b      	lsls	r3, r3, #2
 800e49c:	18d3      	adds	r3, r2, r3
 800e49e:	183a      	adds	r2, r7, r0
 800e4a0:	8812      	ldrh	r2, [r2, #0]
 800e4a2:	4962      	ldr	r1, [pc, #392]	@ (800e62c <HAL_PCD_EP_DB_Transmit+0x734>)
 800e4a4:	430a      	orrs	r2, r1
 800e4a6:	b292      	uxth	r2, r2
 800e4a8:	801a      	strh	r2, [r3, #0]
 800e4aa:	e102      	b.n	800e6b2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800e4ac:	1dbb      	adds	r3, r7, #6
 800e4ae:	881a      	ldrh	r2, [r3, #0]
 800e4b0:	2380      	movs	r3, #128	@ 0x80
 800e4b2:	01db      	lsls	r3, r3, #7
 800e4b4:	4013      	ands	r3, r2
 800e4b6:	d11a      	bne.n	800e4ee <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	001a      	movs	r2, r3
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	18d3      	adds	r3, r2, r3
 800e4c6:	881b      	ldrh	r3, [r3, #0]
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	204e      	movs	r0, #78	@ 0x4e
 800e4cc:	183b      	adds	r3, r7, r0
 800e4ce:	4956      	ldr	r1, [pc, #344]	@ (800e628 <HAL_PCD_EP_DB_Transmit+0x730>)
 800e4d0:	400a      	ands	r2, r1
 800e4d2:	801a      	strh	r2, [r3, #0]
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	001a      	movs	r2, r3
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	18d3      	adds	r3, r2, r3
 800e4e2:	183a      	adds	r2, r7, r0
 800e4e4:	8812      	ldrh	r2, [r2, #0]
 800e4e6:	4951      	ldr	r1, [pc, #324]	@ (800e62c <HAL_PCD_EP_DB_Transmit+0x734>)
 800e4e8:	430a      	orrs	r2, r1
 800e4ea:	b292      	uxth	r2, r2
 800e4ec:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	2224      	movs	r2, #36	@ 0x24
 800e4f2:	5c9b      	ldrb	r3, [r3, r2]
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	d000      	beq.n	800e4fa <HAL_PCD_EP_DB_Transmit+0x602>
 800e4f8:	e0db      	b.n	800e6b2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	695a      	ldr	r2, [r3, #20]
 800e4fe:	2186      	movs	r1, #134	@ 0x86
 800e500:	187b      	adds	r3, r7, r1
 800e502:	881b      	ldrh	r3, [r3, #0]
 800e504:	18d2      	adds	r2, r2, r3
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	69da      	ldr	r2, [r3, #28]
 800e50e:	187b      	adds	r3, r7, r1
 800e510:	881b      	ldrh	r3, [r3, #0]
 800e512:	18d2      	adds	r2, r2, r3
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	6a1a      	ldr	r2, [r3, #32]
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	691b      	ldr	r3, [r3, #16]
 800e520:	429a      	cmp	r2, r3
 800e522:	d30c      	bcc.n	800e53e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	691b      	ldr	r3, [r3, #16]
 800e528:	218c      	movs	r1, #140	@ 0x8c
 800e52a:	187a      	adds	r2, r7, r1
 800e52c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	6a1a      	ldr	r2, [r3, #32]
 800e532:	187b      	adds	r3, r7, r1
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	1ad2      	subs	r2, r2, r3
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	621a      	str	r2, [r3, #32]
 800e53c:	e01a      	b.n	800e574 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	6a1b      	ldr	r3, [r3, #32]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d10a      	bne.n	800e55c <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800e546:	2386      	movs	r3, #134	@ 0x86
 800e548:	18fb      	adds	r3, r7, r3
 800e54a:	881b      	ldrh	r3, [r3, #0]
 800e54c:	228c      	movs	r2, #140	@ 0x8c
 800e54e:	18ba      	adds	r2, r7, r2
 800e550:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	2224      	movs	r2, #36	@ 0x24
 800e556:	2100      	movs	r1, #0
 800e558:	5499      	strb	r1, [r3, r2]
 800e55a:	e00b      	b.n	800e574 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	6a1b      	ldr	r3, [r3, #32]
 800e560:	228c      	movs	r2, #140	@ 0x8c
 800e562:	18ba      	adds	r2, r7, r2
 800e564:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	2200      	movs	r2, #0
 800e56a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	2224      	movs	r2, #36	@ 0x24
 800e570:	2100      	movs	r1, #0
 800e572:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	657b      	str	r3, [r7, #84]	@ 0x54
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	785b      	ldrb	r3, [r3, #1]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d000      	beq.n	800e584 <HAL_PCD_EP_DB_Transmit+0x68c>
 800e582:	e06e      	b.n	800e662 <HAL_PCD_EP_DB_Transmit+0x76a>
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	2250      	movs	r2, #80	@ 0x50
 800e590:	5a9b      	ldrh	r3, [r3, r2]
 800e592:	b29b      	uxth	r3, r3
 800e594:	001a      	movs	r2, r3
 800e596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e598:	189b      	adds	r3, r3, r2
 800e59a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	00da      	lsls	r2, r3, #3
 800e5a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5a4:	18d3      	adds	r3, r2, r3
 800e5a6:	4a1e      	ldr	r2, [pc, #120]	@ (800e620 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e5a8:	4694      	mov	ip, r2
 800e5aa:	4463      	add	r3, ip
 800e5ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e5ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e5b0:	881b      	ldrh	r3, [r3, #0]
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	059b      	lsls	r3, r3, #22
 800e5b6:	0d9b      	lsrs	r3, r3, #22
 800e5b8:	b29a      	uxth	r2, r3
 800e5ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e5bc:	801a      	strh	r2, [r3, #0]
 800e5be:	228c      	movs	r2, #140	@ 0x8c
 800e5c0:	18bb      	adds	r3, r7, r2
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2b3e      	cmp	r3, #62	@ 0x3e
 800e5c6:	d91a      	bls.n	800e5fe <HAL_PCD_EP_DB_Transmit+0x706>
 800e5c8:	18bb      	adds	r3, r7, r2
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	095b      	lsrs	r3, r3, #5
 800e5ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e5d0:	18bb      	adds	r3, r7, r2
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	221f      	movs	r2, #31
 800e5d6:	4013      	ands	r3, r2
 800e5d8:	d102      	bne.n	800e5e0 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800e5da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e5dc:	3b01      	subs	r3, #1
 800e5de:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e5e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e5e2:	881b      	ldrh	r3, [r3, #0]
 800e5e4:	b29a      	uxth	r2, r3
 800e5e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e5e8:	b29b      	uxth	r3, r3
 800e5ea:	029b      	lsls	r3, r3, #10
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	4313      	orrs	r3, r2
 800e5f0:	b29b      	uxth	r3, r3
 800e5f2:	4a0c      	ldr	r2, [pc, #48]	@ (800e624 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e5f4:	4313      	orrs	r3, r2
 800e5f6:	b29a      	uxth	r2, r3
 800e5f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e5fa:	801a      	strh	r2, [r3, #0]
 800e5fc:	e04d      	b.n	800e69a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e5fe:	238c      	movs	r3, #140	@ 0x8c
 800e600:	18fb      	adds	r3, r7, r3
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d113      	bne.n	800e630 <HAL_PCD_EP_DB_Transmit+0x738>
 800e608:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e60a:	881b      	ldrh	r3, [r3, #0]
 800e60c:	b29b      	uxth	r3, r3
 800e60e:	4a05      	ldr	r2, [pc, #20]	@ (800e624 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e610:	4313      	orrs	r3, r2
 800e612:	b29a      	uxth	r2, r3
 800e614:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e616:	801a      	strh	r2, [r3, #0]
 800e618:	e03f      	b.n	800e69a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e61a:	46c0      	nop			@ (mov r8, r8)
 800e61c:	00000402 	.word	0x00000402
 800e620:	00000406 	.word	0x00000406
 800e624:	ffff8000 	.word	0xffff8000
 800e628:	ffff8f8f 	.word	0xffff8f8f
 800e62c:	ffffc080 	.word	0xffffc080
 800e630:	228c      	movs	r2, #140	@ 0x8c
 800e632:	18bb      	adds	r3, r7, r2
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	085b      	lsrs	r3, r3, #1
 800e638:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e63a:	18bb      	adds	r3, r7, r2
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2201      	movs	r2, #1
 800e640:	4013      	ands	r3, r2
 800e642:	d002      	beq.n	800e64a <HAL_PCD_EP_DB_Transmit+0x752>
 800e644:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e646:	3301      	adds	r3, #1
 800e648:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e64a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e64c:	881b      	ldrh	r3, [r3, #0]
 800e64e:	b29a      	uxth	r2, r3
 800e650:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e652:	b29b      	uxth	r3, r3
 800e654:	029b      	lsls	r3, r3, #10
 800e656:	b29b      	uxth	r3, r3
 800e658:	4313      	orrs	r3, r2
 800e65a:	b29a      	uxth	r2, r3
 800e65c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e65e:	801a      	strh	r2, [r3, #0]
 800e660:	e01b      	b.n	800e69a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	785b      	ldrb	r3, [r3, #1]
 800e666:	2b01      	cmp	r3, #1
 800e668:	d117      	bne.n	800e69a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2250      	movs	r2, #80	@ 0x50
 800e670:	5a9b      	ldrh	r3, [r3, r2]
 800e672:	b29b      	uxth	r3, r3
 800e674:	001a      	movs	r2, r3
 800e676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e678:	189b      	adds	r3, r3, r2
 800e67a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	00da      	lsls	r2, r3, #3
 800e682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e684:	18d3      	adds	r3, r2, r3
 800e686:	4a21      	ldr	r2, [pc, #132]	@ (800e70c <HAL_PCD_EP_DB_Transmit+0x814>)
 800e688:	4694      	mov	ip, r2
 800e68a:	4463      	add	r3, ip
 800e68c:	653b      	str	r3, [r7, #80]	@ 0x50
 800e68e:	238c      	movs	r3, #140	@ 0x8c
 800e690:	18fb      	adds	r3, r7, r3
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	b29a      	uxth	r2, r3
 800e696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e698:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	6818      	ldr	r0, [r3, #0]
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	6959      	ldr	r1, [r3, #20]
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	895a      	ldrh	r2, [r3, #10]
 800e6a6:	238c      	movs	r3, #140	@ 0x8c
 800e6a8:	18fb      	adds	r3, r7, r3
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	f005 f86d 	bl	801378c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	001a      	movs	r2, r3
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	009b      	lsls	r3, r3, #2
 800e6be:	18d3      	adds	r3, r2, r3
 800e6c0:	881b      	ldrh	r3, [r3, #0]
 800e6c2:	b29a      	uxth	r2, r3
 800e6c4:	2014      	movs	r0, #20
 800e6c6:	183b      	adds	r3, r7, r0
 800e6c8:	4911      	ldr	r1, [pc, #68]	@ (800e710 <HAL_PCD_EP_DB_Transmit+0x818>)
 800e6ca:	400a      	ands	r2, r1
 800e6cc:	801a      	strh	r2, [r3, #0]
 800e6ce:	183b      	adds	r3, r7, r0
 800e6d0:	183a      	adds	r2, r7, r0
 800e6d2:	8812      	ldrh	r2, [r2, #0]
 800e6d4:	2110      	movs	r1, #16
 800e6d6:	404a      	eors	r2, r1
 800e6d8:	801a      	strh	r2, [r3, #0]
 800e6da:	183b      	adds	r3, r7, r0
 800e6dc:	183a      	adds	r2, r7, r0
 800e6de:	8812      	ldrh	r2, [r2, #0]
 800e6e0:	2120      	movs	r1, #32
 800e6e2:	404a      	eors	r2, r1
 800e6e4:	801a      	strh	r2, [r3, #0]
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	001a      	movs	r2, r3
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	781b      	ldrb	r3, [r3, #0]
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	18d3      	adds	r3, r2, r3
 800e6f4:	183a      	adds	r2, r7, r0
 800e6f6:	8812      	ldrh	r2, [r2, #0]
 800e6f8:	4906      	ldr	r1, [pc, #24]	@ (800e714 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800e6fa:	430a      	orrs	r2, r1
 800e6fc:	b292      	uxth	r2, r2
 800e6fe:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800e700:	2300      	movs	r3, #0
}
 800e702:	0018      	movs	r0, r3
 800e704:	46bd      	mov	sp, r7
 800e706:	b024      	add	sp, #144	@ 0x90
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	46c0      	nop			@ (mov r8, r8)
 800e70c:	00000406 	.word	0x00000406
 800e710:	ffff8fbf 	.word	0xffff8fbf
 800e714:	ffff8080 	.word	0xffff8080

0800e718 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800e718:	b590      	push	{r4, r7, lr}
 800e71a:	b087      	sub	sp, #28
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	0008      	movs	r0, r1
 800e722:	0011      	movs	r1, r2
 800e724:	607b      	str	r3, [r7, #4]
 800e726:	240a      	movs	r4, #10
 800e728:	193b      	adds	r3, r7, r4
 800e72a:	1c02      	adds	r2, r0, #0
 800e72c:	801a      	strh	r2, [r3, #0]
 800e72e:	2308      	movs	r3, #8
 800e730:	18fb      	adds	r3, r7, r3
 800e732:	1c0a      	adds	r2, r1, #0
 800e734:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800e736:	0021      	movs	r1, r4
 800e738:	187b      	adds	r3, r7, r1
 800e73a:	881b      	ldrh	r3, [r3, #0]
 800e73c:	2280      	movs	r2, #128	@ 0x80
 800e73e:	4013      	ands	r3, r2
 800e740:	b29b      	uxth	r3, r3
 800e742:	2b00      	cmp	r3, #0
 800e744:	d00c      	beq.n	800e760 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e746:	187b      	adds	r3, r7, r1
 800e748:	881b      	ldrh	r3, [r3, #0]
 800e74a:	2207      	movs	r2, #7
 800e74c:	4013      	ands	r3, r2
 800e74e:	1c5a      	adds	r2, r3, #1
 800e750:	0013      	movs	r3, r2
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	189b      	adds	r3, r3, r2
 800e756:	00db      	lsls	r3, r3, #3
 800e758:	68fa      	ldr	r2, [r7, #12]
 800e75a:	18d3      	adds	r3, r2, r3
 800e75c:	617b      	str	r3, [r7, #20]
 800e75e:	e00b      	b.n	800e778 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e760:	230a      	movs	r3, #10
 800e762:	18fb      	adds	r3, r7, r3
 800e764:	881a      	ldrh	r2, [r3, #0]
 800e766:	0013      	movs	r3, r2
 800e768:	009b      	lsls	r3, r3, #2
 800e76a:	189b      	adds	r3, r3, r2
 800e76c:	00db      	lsls	r3, r3, #3
 800e76e:	3369      	adds	r3, #105	@ 0x69
 800e770:	33ff      	adds	r3, #255	@ 0xff
 800e772:	68fa      	ldr	r2, [r7, #12]
 800e774:	18d3      	adds	r3, r2, r3
 800e776:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800e778:	2308      	movs	r3, #8
 800e77a:	18fb      	adds	r3, r7, r3
 800e77c:	881b      	ldrh	r3, [r3, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d107      	bne.n	800e792 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	2200      	movs	r2, #0
 800e786:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	b29a      	uxth	r2, r3
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	80da      	strh	r2, [r3, #6]
 800e790:	e00b      	b.n	800e7aa <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	2201      	movs	r2, #1
 800e796:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	b29a      	uxth	r2, r3
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	0c1b      	lsrs	r3, r3, #16
 800e7a4:	b29a      	uxth	r2, r3
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e7aa:	2300      	movs	r3, #0
}
 800e7ac:	0018      	movs	r0, r3
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	b007      	add	sp, #28
 800e7b2:	bd90      	pop	{r4, r7, pc}

0800e7b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b084      	sub	sp, #16
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	23ba      	movs	r3, #186	@ 0xba
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	2101      	movs	r1, #1
 800e7ca:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800e7cc:	687a      	ldr	r2, [r7, #4]
 800e7ce:	23b8      	movs	r3, #184	@ 0xb8
 800e7d0:	009b      	lsls	r3, r3, #2
 800e7d2:	2100      	movs	r1, #0
 800e7d4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2254      	movs	r2, #84	@ 0x54
 800e7da:	5a9b      	ldrh	r3, [r3, r2]
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	2201      	movs	r2, #1
 800e7e0:	4313      	orrs	r3, r2
 800e7e2:	b299      	uxth	r1, r3
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	2254      	movs	r2, #84	@ 0x54
 800e7e8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2254      	movs	r2, #84	@ 0x54
 800e7ee:	5a9b      	ldrh	r3, [r3, r2]
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	2202      	movs	r2, #2
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	b299      	uxth	r1, r3
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2254      	movs	r2, #84	@ 0x54
 800e7fc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800e7fe:	2300      	movs	r3, #0
}
 800e800:	0018      	movs	r0, r3
 800e802:	46bd      	mov	sp, r7
 800e804:	b004      	add	sp, #16
 800e806:	bd80      	pop	{r7, pc}

0800e808 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	000a      	movs	r2, r1
 800e812:	1cfb      	adds	r3, r7, #3
 800e814:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800e816:	46c0      	nop			@ (mov r8, r8)
 800e818:	46bd      	mov	sp, r7
 800e81a:	b002      	add	sp, #8
 800e81c:	bd80      	pop	{r7, pc}
	...

0800e820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e820:	b5b0      	push	{r4, r5, r7, lr}
 800e822:	b08a      	sub	sp, #40	@ 0x28
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d102      	bne.n	800e834 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800e82e:	2301      	movs	r3, #1
 800e830:	f000 fbbf 	bl	800efb2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e834:	4bc9      	ldr	r3, [pc, #804]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e836:	68db      	ldr	r3, [r3, #12]
 800e838:	220c      	movs	r2, #12
 800e83a:	4013      	ands	r3, r2
 800e83c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e83e:	4bc7      	ldr	r3, [pc, #796]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e840:	68da      	ldr	r2, [r3, #12]
 800e842:	2380      	movs	r3, #128	@ 0x80
 800e844:	025b      	lsls	r3, r3, #9
 800e846:	4013      	ands	r3, r2
 800e848:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2201      	movs	r2, #1
 800e850:	4013      	ands	r3, r2
 800e852:	d100      	bne.n	800e856 <HAL_RCC_OscConfig+0x36>
 800e854:	e07e      	b.n	800e954 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e856:	69fb      	ldr	r3, [r7, #28]
 800e858:	2b08      	cmp	r3, #8
 800e85a:	d007      	beq.n	800e86c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800e85c:	69fb      	ldr	r3, [r7, #28]
 800e85e:	2b0c      	cmp	r3, #12
 800e860:	d112      	bne.n	800e888 <HAL_RCC_OscConfig+0x68>
 800e862:	69ba      	ldr	r2, [r7, #24]
 800e864:	2380      	movs	r3, #128	@ 0x80
 800e866:	025b      	lsls	r3, r3, #9
 800e868:	429a      	cmp	r2, r3
 800e86a:	d10d      	bne.n	800e888 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e86c:	4bbb      	ldr	r3, [pc, #748]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e86e:	681a      	ldr	r2, [r3, #0]
 800e870:	2380      	movs	r3, #128	@ 0x80
 800e872:	029b      	lsls	r3, r3, #10
 800e874:	4013      	ands	r3, r2
 800e876:	d100      	bne.n	800e87a <HAL_RCC_OscConfig+0x5a>
 800e878:	e06b      	b.n	800e952 <HAL_RCC_OscConfig+0x132>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d167      	bne.n	800e952 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800e882:	2301      	movs	r3, #1
 800e884:	f000 fb95 	bl	800efb2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	685a      	ldr	r2, [r3, #4]
 800e88c:	2380      	movs	r3, #128	@ 0x80
 800e88e:	025b      	lsls	r3, r3, #9
 800e890:	429a      	cmp	r2, r3
 800e892:	d107      	bne.n	800e8a4 <HAL_RCC_OscConfig+0x84>
 800e894:	4bb1      	ldr	r3, [pc, #708]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	4bb0      	ldr	r3, [pc, #704]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e89a:	2180      	movs	r1, #128	@ 0x80
 800e89c:	0249      	lsls	r1, r1, #9
 800e89e:	430a      	orrs	r2, r1
 800e8a0:	601a      	str	r2, [r3, #0]
 800e8a2:	e027      	b.n	800e8f4 <HAL_RCC_OscConfig+0xd4>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	685a      	ldr	r2, [r3, #4]
 800e8a8:	23a0      	movs	r3, #160	@ 0xa0
 800e8aa:	02db      	lsls	r3, r3, #11
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d10e      	bne.n	800e8ce <HAL_RCC_OscConfig+0xae>
 800e8b0:	4baa      	ldr	r3, [pc, #680]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	4ba9      	ldr	r3, [pc, #676]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e8b6:	2180      	movs	r1, #128	@ 0x80
 800e8b8:	02c9      	lsls	r1, r1, #11
 800e8ba:	430a      	orrs	r2, r1
 800e8bc:	601a      	str	r2, [r3, #0]
 800e8be:	4ba7      	ldr	r3, [pc, #668]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e8c0:	681a      	ldr	r2, [r3, #0]
 800e8c2:	4ba6      	ldr	r3, [pc, #664]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e8c4:	2180      	movs	r1, #128	@ 0x80
 800e8c6:	0249      	lsls	r1, r1, #9
 800e8c8:	430a      	orrs	r2, r1
 800e8ca:	601a      	str	r2, [r3, #0]
 800e8cc:	e012      	b.n	800e8f4 <HAL_RCC_OscConfig+0xd4>
 800e8ce:	4ba3      	ldr	r3, [pc, #652]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	4ba2      	ldr	r3, [pc, #648]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e8d4:	49a2      	ldr	r1, [pc, #648]	@ (800eb60 <HAL_RCC_OscConfig+0x340>)
 800e8d6:	400a      	ands	r2, r1
 800e8d8:	601a      	str	r2, [r3, #0]
 800e8da:	4ba0      	ldr	r3, [pc, #640]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e8dc:	681a      	ldr	r2, [r3, #0]
 800e8de:	2380      	movs	r3, #128	@ 0x80
 800e8e0:	025b      	lsls	r3, r3, #9
 800e8e2:	4013      	ands	r3, r2
 800e8e4:	60fb      	str	r3, [r7, #12]
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	4b9c      	ldr	r3, [pc, #624]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	4b9b      	ldr	r3, [pc, #620]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e8ee:	499d      	ldr	r1, [pc, #628]	@ (800eb64 <HAL_RCC_OscConfig+0x344>)
 800e8f0:	400a      	ands	r2, r1
 800e8f2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d015      	beq.n	800e928 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e8fc:	f7fa fc2c 	bl	8009158 <HAL_GetTick>
 800e900:	0003      	movs	r3, r0
 800e902:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e904:	e009      	b.n	800e91a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e906:	f7fa fc27 	bl	8009158 <HAL_GetTick>
 800e90a:	0002      	movs	r2, r0
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	1ad3      	subs	r3, r2, r3
 800e910:	2b64      	cmp	r3, #100	@ 0x64
 800e912:	d902      	bls.n	800e91a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e914:	2303      	movs	r3, #3
 800e916:	f000 fb4c 	bl	800efb2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e91a:	4b90      	ldr	r3, [pc, #576]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e91c:	681a      	ldr	r2, [r3, #0]
 800e91e:	2380      	movs	r3, #128	@ 0x80
 800e920:	029b      	lsls	r3, r3, #10
 800e922:	4013      	ands	r3, r2
 800e924:	d0ef      	beq.n	800e906 <HAL_RCC_OscConfig+0xe6>
 800e926:	e015      	b.n	800e954 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e928:	f7fa fc16 	bl	8009158 <HAL_GetTick>
 800e92c:	0003      	movs	r3, r0
 800e92e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e930:	e008      	b.n	800e944 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e932:	f7fa fc11 	bl	8009158 <HAL_GetTick>
 800e936:	0002      	movs	r2, r0
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	2b64      	cmp	r3, #100	@ 0x64
 800e93e:	d901      	bls.n	800e944 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800e940:	2303      	movs	r3, #3
 800e942:	e336      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e944:	4b85      	ldr	r3, [pc, #532]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e946:	681a      	ldr	r2, [r3, #0]
 800e948:	2380      	movs	r3, #128	@ 0x80
 800e94a:	029b      	lsls	r3, r3, #10
 800e94c:	4013      	ands	r3, r2
 800e94e:	d1f0      	bne.n	800e932 <HAL_RCC_OscConfig+0x112>
 800e950:	e000      	b.n	800e954 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e952:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	2202      	movs	r2, #2
 800e95a:	4013      	ands	r3, r2
 800e95c:	d100      	bne.n	800e960 <HAL_RCC_OscConfig+0x140>
 800e95e:	e099      	b.n	800ea94 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800e966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e968:	2220      	movs	r2, #32
 800e96a:	4013      	ands	r3, r2
 800e96c:	d009      	beq.n	800e982 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800e96e:	4b7b      	ldr	r3, [pc, #492]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e970:	681a      	ldr	r2, [r3, #0]
 800e972:	4b7a      	ldr	r3, [pc, #488]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e974:	2120      	movs	r1, #32
 800e976:	430a      	orrs	r2, r1
 800e978:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800e97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e97c:	2220      	movs	r2, #32
 800e97e:	4393      	bics	r3, r2
 800e980:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	2b04      	cmp	r3, #4
 800e986:	d005      	beq.n	800e994 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800e988:	69fb      	ldr	r3, [r7, #28]
 800e98a:	2b0c      	cmp	r3, #12
 800e98c:	d13e      	bne.n	800ea0c <HAL_RCC_OscConfig+0x1ec>
 800e98e:	69bb      	ldr	r3, [r7, #24]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d13b      	bne.n	800ea0c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800e994:	4b71      	ldr	r3, [pc, #452]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	2204      	movs	r2, #4
 800e99a:	4013      	ands	r3, r2
 800e99c:	d004      	beq.n	800e9a8 <HAL_RCC_OscConfig+0x188>
 800e99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d101      	bne.n	800e9a8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	e304      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e9a8:	4b6c      	ldr	r3, [pc, #432]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e9aa:	685b      	ldr	r3, [r3, #4]
 800e9ac:	4a6e      	ldr	r2, [pc, #440]	@ (800eb68 <HAL_RCC_OscConfig+0x348>)
 800e9ae:	4013      	ands	r3, r2
 800e9b0:	0019      	movs	r1, r3
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	691b      	ldr	r3, [r3, #16]
 800e9b6:	021a      	lsls	r2, r3, #8
 800e9b8:	4b68      	ldr	r3, [pc, #416]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e9ba:	430a      	orrs	r2, r1
 800e9bc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800e9be:	4b67      	ldr	r3, [pc, #412]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	2209      	movs	r2, #9
 800e9c4:	4393      	bics	r3, r2
 800e9c6:	0019      	movs	r1, r3
 800e9c8:	4b64      	ldr	r3, [pc, #400]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e9ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9cc:	430a      	orrs	r2, r1
 800e9ce:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e9d0:	f000 fc42 	bl	800f258 <HAL_RCC_GetSysClockFreq>
 800e9d4:	0001      	movs	r1, r0
 800e9d6:	4b61      	ldr	r3, [pc, #388]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800e9d8:	68db      	ldr	r3, [r3, #12]
 800e9da:	091b      	lsrs	r3, r3, #4
 800e9dc:	220f      	movs	r2, #15
 800e9de:	4013      	ands	r3, r2
 800e9e0:	4a62      	ldr	r2, [pc, #392]	@ (800eb6c <HAL_RCC_OscConfig+0x34c>)
 800e9e2:	5cd3      	ldrb	r3, [r2, r3]
 800e9e4:	000a      	movs	r2, r1
 800e9e6:	40da      	lsrs	r2, r3
 800e9e8:	4b61      	ldr	r3, [pc, #388]	@ (800eb70 <HAL_RCC_OscConfig+0x350>)
 800e9ea:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800e9ec:	4b61      	ldr	r3, [pc, #388]	@ (800eb74 <HAL_RCC_OscConfig+0x354>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	2513      	movs	r5, #19
 800e9f2:	197c      	adds	r4, r7, r5
 800e9f4:	0018      	movs	r0, r3
 800e9f6:	f7fa fb69 	bl	80090cc <HAL_InitTick>
 800e9fa:	0003      	movs	r3, r0
 800e9fc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800e9fe:	197b      	adds	r3, r7, r5
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d046      	beq.n	800ea94 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800ea06:	197b      	adds	r3, r7, r5
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	e2d2      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800ea0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d027      	beq.n	800ea62 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800ea12:	4b52      	ldr	r3, [pc, #328]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	2209      	movs	r2, #9
 800ea18:	4393      	bics	r3, r2
 800ea1a:	0019      	movs	r1, r3
 800ea1c:	4b4f      	ldr	r3, [pc, #316]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800ea1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea20:	430a      	orrs	r2, r1
 800ea22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea24:	f7fa fb98 	bl	8009158 <HAL_GetTick>
 800ea28:	0003      	movs	r3, r0
 800ea2a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ea2c:	e008      	b.n	800ea40 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ea2e:	f7fa fb93 	bl	8009158 <HAL_GetTick>
 800ea32:	0002      	movs	r2, r0
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	1ad3      	subs	r3, r2, r3
 800ea38:	2b02      	cmp	r3, #2
 800ea3a:	d901      	bls.n	800ea40 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800ea3c:	2303      	movs	r3, #3
 800ea3e:	e2b8      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ea40:	4b46      	ldr	r3, [pc, #280]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2204      	movs	r2, #4
 800ea46:	4013      	ands	r3, r2
 800ea48:	d0f1      	beq.n	800ea2e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea4a:	4b44      	ldr	r3, [pc, #272]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	4a46      	ldr	r2, [pc, #280]	@ (800eb68 <HAL_RCC_OscConfig+0x348>)
 800ea50:	4013      	ands	r3, r2
 800ea52:	0019      	movs	r1, r3
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	691b      	ldr	r3, [r3, #16]
 800ea58:	021a      	lsls	r2, r3, #8
 800ea5a:	4b40      	ldr	r3, [pc, #256]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800ea5c:	430a      	orrs	r2, r1
 800ea5e:	605a      	str	r2, [r3, #4]
 800ea60:	e018      	b.n	800ea94 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ea62:	4b3e      	ldr	r3, [pc, #248]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	4b3d      	ldr	r3, [pc, #244]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800ea68:	2101      	movs	r1, #1
 800ea6a:	438a      	bics	r2, r1
 800ea6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea6e:	f7fa fb73 	bl	8009158 <HAL_GetTick>
 800ea72:	0003      	movs	r3, r0
 800ea74:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ea76:	e008      	b.n	800ea8a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ea78:	f7fa fb6e 	bl	8009158 <HAL_GetTick>
 800ea7c:	0002      	movs	r2, r0
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	1ad3      	subs	r3, r2, r3
 800ea82:	2b02      	cmp	r3, #2
 800ea84:	d901      	bls.n	800ea8a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800ea86:	2303      	movs	r3, #3
 800ea88:	e293      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ea8a:	4b34      	ldr	r3, [pc, #208]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	2204      	movs	r2, #4
 800ea90:	4013      	ands	r3, r2
 800ea92:	d1f1      	bne.n	800ea78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	2210      	movs	r2, #16
 800ea9a:	4013      	ands	r3, r2
 800ea9c:	d100      	bne.n	800eaa0 <HAL_RCC_OscConfig+0x280>
 800ea9e:	e0a2      	b.n	800ebe6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d140      	bne.n	800eb28 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800eaa6:	4b2d      	ldr	r3, [pc, #180]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800eaa8:	681a      	ldr	r2, [r3, #0]
 800eaaa:	2380      	movs	r3, #128	@ 0x80
 800eaac:	009b      	lsls	r3, r3, #2
 800eaae:	4013      	ands	r3, r2
 800eab0:	d005      	beq.n	800eabe <HAL_RCC_OscConfig+0x29e>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	69db      	ldr	r3, [r3, #28]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d101      	bne.n	800eabe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800eaba:	2301      	movs	r3, #1
 800eabc:	e279      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800eabe:	4b27      	ldr	r3, [pc, #156]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	4a2d      	ldr	r2, [pc, #180]	@ (800eb78 <HAL_RCC_OscConfig+0x358>)
 800eac4:	4013      	ands	r3, r2
 800eac6:	0019      	movs	r1, r3
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eacc:	4b23      	ldr	r3, [pc, #140]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800eace:	430a      	orrs	r2, r1
 800ead0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ead2:	4b22      	ldr	r3, [pc, #136]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	021b      	lsls	r3, r3, #8
 800ead8:	0a19      	lsrs	r1, r3, #8
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6a1b      	ldr	r3, [r3, #32]
 800eade:	061a      	lsls	r2, r3, #24
 800eae0:	4b1e      	ldr	r3, [pc, #120]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800eae2:	430a      	orrs	r2, r1
 800eae4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaea:	0b5b      	lsrs	r3, r3, #13
 800eaec:	3301      	adds	r3, #1
 800eaee:	2280      	movs	r2, #128	@ 0x80
 800eaf0:	0212      	lsls	r2, r2, #8
 800eaf2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800eaf4:	4b19      	ldr	r3, [pc, #100]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	091b      	lsrs	r3, r3, #4
 800eafa:	210f      	movs	r1, #15
 800eafc:	400b      	ands	r3, r1
 800eafe:	491b      	ldr	r1, [pc, #108]	@ (800eb6c <HAL_RCC_OscConfig+0x34c>)
 800eb00:	5ccb      	ldrb	r3, [r1, r3]
 800eb02:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800eb04:	4b1a      	ldr	r3, [pc, #104]	@ (800eb70 <HAL_RCC_OscConfig+0x350>)
 800eb06:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800eb08:	4b1a      	ldr	r3, [pc, #104]	@ (800eb74 <HAL_RCC_OscConfig+0x354>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	2513      	movs	r5, #19
 800eb0e:	197c      	adds	r4, r7, r5
 800eb10:	0018      	movs	r0, r3
 800eb12:	f7fa fadb 	bl	80090cc <HAL_InitTick>
 800eb16:	0003      	movs	r3, r0
 800eb18:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800eb1a:	197b      	adds	r3, r7, r5
 800eb1c:	781b      	ldrb	r3, [r3, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d061      	beq.n	800ebe6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800eb22:	197b      	adds	r3, r7, r5
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	e244      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	69db      	ldr	r3, [r3, #28]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d040      	beq.n	800ebb2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800eb30:	4b0a      	ldr	r3, [pc, #40]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800eb32:	681a      	ldr	r2, [r3, #0]
 800eb34:	4b09      	ldr	r3, [pc, #36]	@ (800eb5c <HAL_RCC_OscConfig+0x33c>)
 800eb36:	2180      	movs	r1, #128	@ 0x80
 800eb38:	0049      	lsls	r1, r1, #1
 800eb3a:	430a      	orrs	r2, r1
 800eb3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb3e:	f7fa fb0b 	bl	8009158 <HAL_GetTick>
 800eb42:	0003      	movs	r3, r0
 800eb44:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800eb46:	e019      	b.n	800eb7c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800eb48:	f7fa fb06 	bl	8009158 <HAL_GetTick>
 800eb4c:	0002      	movs	r2, r0
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	1ad3      	subs	r3, r2, r3
 800eb52:	2b02      	cmp	r3, #2
 800eb54:	d912      	bls.n	800eb7c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800eb56:	2303      	movs	r3, #3
 800eb58:	e22b      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
 800eb5a:	46c0      	nop			@ (mov r8, r8)
 800eb5c:	40021000 	.word	0x40021000
 800eb60:	fffeffff 	.word	0xfffeffff
 800eb64:	fffbffff 	.word	0xfffbffff
 800eb68:	ffffe0ff 	.word	0xffffe0ff
 800eb6c:	0801a210 	.word	0x0801a210
 800eb70:	2000013c 	.word	0x2000013c
 800eb74:	20000150 	.word	0x20000150
 800eb78:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800eb7c:	4bca      	ldr	r3, [pc, #808]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800eb7e:	681a      	ldr	r2, [r3, #0]
 800eb80:	2380      	movs	r3, #128	@ 0x80
 800eb82:	009b      	lsls	r3, r3, #2
 800eb84:	4013      	ands	r3, r2
 800eb86:	d0df      	beq.n	800eb48 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800eb88:	4bc7      	ldr	r3, [pc, #796]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800eb8a:	685b      	ldr	r3, [r3, #4]
 800eb8c:	4ac7      	ldr	r2, [pc, #796]	@ (800eeac <HAL_RCC_OscConfig+0x68c>)
 800eb8e:	4013      	ands	r3, r2
 800eb90:	0019      	movs	r1, r3
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eb96:	4bc4      	ldr	r3, [pc, #784]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800eb98:	430a      	orrs	r2, r1
 800eb9a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800eb9c:	4bc2      	ldr	r3, [pc, #776]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	021b      	lsls	r3, r3, #8
 800eba2:	0a19      	lsrs	r1, r3, #8
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6a1b      	ldr	r3, [r3, #32]
 800eba8:	061a      	lsls	r2, r3, #24
 800ebaa:	4bbf      	ldr	r3, [pc, #764]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ebac:	430a      	orrs	r2, r1
 800ebae:	605a      	str	r2, [r3, #4]
 800ebb0:	e019      	b.n	800ebe6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ebb2:	4bbd      	ldr	r3, [pc, #756]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ebb4:	681a      	ldr	r2, [r3, #0]
 800ebb6:	4bbc      	ldr	r3, [pc, #752]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ebb8:	49bd      	ldr	r1, [pc, #756]	@ (800eeb0 <HAL_RCC_OscConfig+0x690>)
 800ebba:	400a      	ands	r2, r1
 800ebbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ebbe:	f7fa facb 	bl	8009158 <HAL_GetTick>
 800ebc2:	0003      	movs	r3, r0
 800ebc4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800ebc6:	e008      	b.n	800ebda <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ebc8:	f7fa fac6 	bl	8009158 <HAL_GetTick>
 800ebcc:	0002      	movs	r2, r0
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	1ad3      	subs	r3, r2, r3
 800ebd2:	2b02      	cmp	r3, #2
 800ebd4:	d901      	bls.n	800ebda <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800ebd6:	2303      	movs	r3, #3
 800ebd8:	e1eb      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800ebda:	4bb3      	ldr	r3, [pc, #716]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	2380      	movs	r3, #128	@ 0x80
 800ebe0:	009b      	lsls	r3, r3, #2
 800ebe2:	4013      	ands	r3, r2
 800ebe4:	d1f0      	bne.n	800ebc8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	2208      	movs	r2, #8
 800ebec:	4013      	ands	r3, r2
 800ebee:	d036      	beq.n	800ec5e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	695b      	ldr	r3, [r3, #20]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d019      	beq.n	800ec2c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ebf8:	4bab      	ldr	r3, [pc, #684]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ebfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ebfc:	4baa      	ldr	r3, [pc, #680]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ebfe:	2101      	movs	r1, #1
 800ec00:	430a      	orrs	r2, r1
 800ec02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ec04:	f7fa faa8 	bl	8009158 <HAL_GetTick>
 800ec08:	0003      	movs	r3, r0
 800ec0a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ec0c:	e008      	b.n	800ec20 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ec0e:	f7fa faa3 	bl	8009158 <HAL_GetTick>
 800ec12:	0002      	movs	r2, r0
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	1ad3      	subs	r3, r2, r3
 800ec18:	2b02      	cmp	r3, #2
 800ec1a:	d901      	bls.n	800ec20 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800ec1c:	2303      	movs	r3, #3
 800ec1e:	e1c8      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ec20:	4ba1      	ldr	r3, [pc, #644]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ec22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec24:	2202      	movs	r2, #2
 800ec26:	4013      	ands	r3, r2
 800ec28:	d0f1      	beq.n	800ec0e <HAL_RCC_OscConfig+0x3ee>
 800ec2a:	e018      	b.n	800ec5e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ec2c:	4b9e      	ldr	r3, [pc, #632]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ec2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec30:	4b9d      	ldr	r3, [pc, #628]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ec32:	2101      	movs	r1, #1
 800ec34:	438a      	bics	r2, r1
 800ec36:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ec38:	f7fa fa8e 	bl	8009158 <HAL_GetTick>
 800ec3c:	0003      	movs	r3, r0
 800ec3e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ec40:	e008      	b.n	800ec54 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ec42:	f7fa fa89 	bl	8009158 <HAL_GetTick>
 800ec46:	0002      	movs	r2, r0
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	1ad3      	subs	r3, r2, r3
 800ec4c:	2b02      	cmp	r3, #2
 800ec4e:	d901      	bls.n	800ec54 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800ec50:	2303      	movs	r3, #3
 800ec52:	e1ae      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ec54:	4b94      	ldr	r3, [pc, #592]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ec56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec58:	2202      	movs	r2, #2
 800ec5a:	4013      	ands	r3, r2
 800ec5c:	d1f1      	bne.n	800ec42 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	2204      	movs	r2, #4
 800ec64:	4013      	ands	r3, r2
 800ec66:	d100      	bne.n	800ec6a <HAL_RCC_OscConfig+0x44a>
 800ec68:	e0ae      	b.n	800edc8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ec6a:	2023      	movs	r0, #35	@ 0x23
 800ec6c:	183b      	adds	r3, r7, r0
 800ec6e:	2200      	movs	r2, #0
 800ec70:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ec72:	4b8d      	ldr	r3, [pc, #564]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ec74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec76:	2380      	movs	r3, #128	@ 0x80
 800ec78:	055b      	lsls	r3, r3, #21
 800ec7a:	4013      	ands	r3, r2
 800ec7c:	d109      	bne.n	800ec92 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ec7e:	4b8a      	ldr	r3, [pc, #552]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ec80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec82:	4b89      	ldr	r3, [pc, #548]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ec84:	2180      	movs	r1, #128	@ 0x80
 800ec86:	0549      	lsls	r1, r1, #21
 800ec88:	430a      	orrs	r2, r1
 800ec8a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800ec8c:	183b      	adds	r3, r7, r0
 800ec8e:	2201      	movs	r2, #1
 800ec90:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ec92:	4b88      	ldr	r3, [pc, #544]	@ (800eeb4 <HAL_RCC_OscConfig+0x694>)
 800ec94:	681a      	ldr	r2, [r3, #0]
 800ec96:	2380      	movs	r3, #128	@ 0x80
 800ec98:	005b      	lsls	r3, r3, #1
 800ec9a:	4013      	ands	r3, r2
 800ec9c:	d11a      	bne.n	800ecd4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ec9e:	4b85      	ldr	r3, [pc, #532]	@ (800eeb4 <HAL_RCC_OscConfig+0x694>)
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	4b84      	ldr	r3, [pc, #528]	@ (800eeb4 <HAL_RCC_OscConfig+0x694>)
 800eca4:	2180      	movs	r1, #128	@ 0x80
 800eca6:	0049      	lsls	r1, r1, #1
 800eca8:	430a      	orrs	r2, r1
 800ecaa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ecac:	f7fa fa54 	bl	8009158 <HAL_GetTick>
 800ecb0:	0003      	movs	r3, r0
 800ecb2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ecb4:	e008      	b.n	800ecc8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ecb6:	f7fa fa4f 	bl	8009158 <HAL_GetTick>
 800ecba:	0002      	movs	r2, r0
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	1ad3      	subs	r3, r2, r3
 800ecc0:	2b64      	cmp	r3, #100	@ 0x64
 800ecc2:	d901      	bls.n	800ecc8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800ecc4:	2303      	movs	r3, #3
 800ecc6:	e174      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ecc8:	4b7a      	ldr	r3, [pc, #488]	@ (800eeb4 <HAL_RCC_OscConfig+0x694>)
 800ecca:	681a      	ldr	r2, [r3, #0]
 800eccc:	2380      	movs	r3, #128	@ 0x80
 800ecce:	005b      	lsls	r3, r3, #1
 800ecd0:	4013      	ands	r3, r2
 800ecd2:	d0f0      	beq.n	800ecb6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	689a      	ldr	r2, [r3, #8]
 800ecd8:	2380      	movs	r3, #128	@ 0x80
 800ecda:	005b      	lsls	r3, r3, #1
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d107      	bne.n	800ecf0 <HAL_RCC_OscConfig+0x4d0>
 800ece0:	4b71      	ldr	r3, [pc, #452]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ece2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ece4:	4b70      	ldr	r3, [pc, #448]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ece6:	2180      	movs	r1, #128	@ 0x80
 800ece8:	0049      	lsls	r1, r1, #1
 800ecea:	430a      	orrs	r2, r1
 800ecec:	651a      	str	r2, [r3, #80]	@ 0x50
 800ecee:	e031      	b.n	800ed54 <HAL_RCC_OscConfig+0x534>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	689b      	ldr	r3, [r3, #8]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d10c      	bne.n	800ed12 <HAL_RCC_OscConfig+0x4f2>
 800ecf8:	4b6b      	ldr	r3, [pc, #428]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ecfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ecfc:	4b6a      	ldr	r3, [pc, #424]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ecfe:	496c      	ldr	r1, [pc, #432]	@ (800eeb0 <HAL_RCC_OscConfig+0x690>)
 800ed00:	400a      	ands	r2, r1
 800ed02:	651a      	str	r2, [r3, #80]	@ 0x50
 800ed04:	4b68      	ldr	r3, [pc, #416]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ed06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ed08:	4b67      	ldr	r3, [pc, #412]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ed0a:	496b      	ldr	r1, [pc, #428]	@ (800eeb8 <HAL_RCC_OscConfig+0x698>)
 800ed0c:	400a      	ands	r2, r1
 800ed0e:	651a      	str	r2, [r3, #80]	@ 0x50
 800ed10:	e020      	b.n	800ed54 <HAL_RCC_OscConfig+0x534>
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	689a      	ldr	r2, [r3, #8]
 800ed16:	23a0      	movs	r3, #160	@ 0xa0
 800ed18:	00db      	lsls	r3, r3, #3
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d10e      	bne.n	800ed3c <HAL_RCC_OscConfig+0x51c>
 800ed1e:	4b62      	ldr	r3, [pc, #392]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ed20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ed22:	4b61      	ldr	r3, [pc, #388]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ed24:	2180      	movs	r1, #128	@ 0x80
 800ed26:	00c9      	lsls	r1, r1, #3
 800ed28:	430a      	orrs	r2, r1
 800ed2a:	651a      	str	r2, [r3, #80]	@ 0x50
 800ed2c:	4b5e      	ldr	r3, [pc, #376]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ed2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ed30:	4b5d      	ldr	r3, [pc, #372]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ed32:	2180      	movs	r1, #128	@ 0x80
 800ed34:	0049      	lsls	r1, r1, #1
 800ed36:	430a      	orrs	r2, r1
 800ed38:	651a      	str	r2, [r3, #80]	@ 0x50
 800ed3a:	e00b      	b.n	800ed54 <HAL_RCC_OscConfig+0x534>
 800ed3c:	4b5a      	ldr	r3, [pc, #360]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ed3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ed40:	4b59      	ldr	r3, [pc, #356]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ed42:	495b      	ldr	r1, [pc, #364]	@ (800eeb0 <HAL_RCC_OscConfig+0x690>)
 800ed44:	400a      	ands	r2, r1
 800ed46:	651a      	str	r2, [r3, #80]	@ 0x50
 800ed48:	4b57      	ldr	r3, [pc, #348]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ed4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ed4c:	4b56      	ldr	r3, [pc, #344]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ed4e:	495a      	ldr	r1, [pc, #360]	@ (800eeb8 <HAL_RCC_OscConfig+0x698>)
 800ed50:	400a      	ands	r2, r1
 800ed52:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	689b      	ldr	r3, [r3, #8]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d015      	beq.n	800ed88 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ed5c:	f7fa f9fc 	bl	8009158 <HAL_GetTick>
 800ed60:	0003      	movs	r3, r0
 800ed62:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ed64:	e009      	b.n	800ed7a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ed66:	f7fa f9f7 	bl	8009158 <HAL_GetTick>
 800ed6a:	0002      	movs	r2, r0
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	1ad3      	subs	r3, r2, r3
 800ed70:	4a52      	ldr	r2, [pc, #328]	@ (800eebc <HAL_RCC_OscConfig+0x69c>)
 800ed72:	4293      	cmp	r3, r2
 800ed74:	d901      	bls.n	800ed7a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800ed76:	2303      	movs	r3, #3
 800ed78:	e11b      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ed7a:	4b4b      	ldr	r3, [pc, #300]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ed7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ed7e:	2380      	movs	r3, #128	@ 0x80
 800ed80:	009b      	lsls	r3, r3, #2
 800ed82:	4013      	ands	r3, r2
 800ed84:	d0ef      	beq.n	800ed66 <HAL_RCC_OscConfig+0x546>
 800ed86:	e014      	b.n	800edb2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ed88:	f7fa f9e6 	bl	8009158 <HAL_GetTick>
 800ed8c:	0003      	movs	r3, r0
 800ed8e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ed90:	e009      	b.n	800eda6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ed92:	f7fa f9e1 	bl	8009158 <HAL_GetTick>
 800ed96:	0002      	movs	r2, r0
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	1ad3      	subs	r3, r2, r3
 800ed9c:	4a47      	ldr	r2, [pc, #284]	@ (800eebc <HAL_RCC_OscConfig+0x69c>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d901      	bls.n	800eda6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800eda2:	2303      	movs	r3, #3
 800eda4:	e105      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800eda6:	4b40      	ldr	r3, [pc, #256]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800eda8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800edaa:	2380      	movs	r3, #128	@ 0x80
 800edac:	009b      	lsls	r3, r3, #2
 800edae:	4013      	ands	r3, r2
 800edb0:	d1ef      	bne.n	800ed92 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800edb2:	2323      	movs	r3, #35	@ 0x23
 800edb4:	18fb      	adds	r3, r7, r3
 800edb6:	781b      	ldrb	r3, [r3, #0]
 800edb8:	2b01      	cmp	r3, #1
 800edba:	d105      	bne.n	800edc8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800edbc:	4b3a      	ldr	r3, [pc, #232]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800edbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800edc0:	4b39      	ldr	r3, [pc, #228]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800edc2:	493f      	ldr	r1, [pc, #252]	@ (800eec0 <HAL_RCC_OscConfig+0x6a0>)
 800edc4:	400a      	ands	r2, r1
 800edc6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	2220      	movs	r2, #32
 800edce:	4013      	ands	r3, r2
 800edd0:	d049      	beq.n	800ee66 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	699b      	ldr	r3, [r3, #24]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d026      	beq.n	800ee28 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800edda:	4b33      	ldr	r3, [pc, #204]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800eddc:	689a      	ldr	r2, [r3, #8]
 800edde:	4b32      	ldr	r3, [pc, #200]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ede0:	2101      	movs	r1, #1
 800ede2:	430a      	orrs	r2, r1
 800ede4:	609a      	str	r2, [r3, #8]
 800ede6:	4b30      	ldr	r3, [pc, #192]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ede8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800edea:	4b2f      	ldr	r3, [pc, #188]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800edec:	2101      	movs	r1, #1
 800edee:	430a      	orrs	r2, r1
 800edf0:	635a      	str	r2, [r3, #52]	@ 0x34
 800edf2:	4b34      	ldr	r3, [pc, #208]	@ (800eec4 <HAL_RCC_OscConfig+0x6a4>)
 800edf4:	6a1a      	ldr	r2, [r3, #32]
 800edf6:	4b33      	ldr	r3, [pc, #204]	@ (800eec4 <HAL_RCC_OscConfig+0x6a4>)
 800edf8:	2180      	movs	r1, #128	@ 0x80
 800edfa:	0189      	lsls	r1, r1, #6
 800edfc:	430a      	orrs	r2, r1
 800edfe:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee00:	f7fa f9aa 	bl	8009158 <HAL_GetTick>
 800ee04:	0003      	movs	r3, r0
 800ee06:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ee08:	e008      	b.n	800ee1c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ee0a:	f7fa f9a5 	bl	8009158 <HAL_GetTick>
 800ee0e:	0002      	movs	r2, r0
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	1ad3      	subs	r3, r2, r3
 800ee14:	2b02      	cmp	r3, #2
 800ee16:	d901      	bls.n	800ee1c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800ee18:	2303      	movs	r3, #3
 800ee1a:	e0ca      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ee1c:	4b22      	ldr	r3, [pc, #136]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ee1e:	689b      	ldr	r3, [r3, #8]
 800ee20:	2202      	movs	r2, #2
 800ee22:	4013      	ands	r3, r2
 800ee24:	d0f1      	beq.n	800ee0a <HAL_RCC_OscConfig+0x5ea>
 800ee26:	e01e      	b.n	800ee66 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800ee28:	4b1f      	ldr	r3, [pc, #124]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ee2a:	689a      	ldr	r2, [r3, #8]
 800ee2c:	4b1e      	ldr	r3, [pc, #120]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ee2e:	2101      	movs	r1, #1
 800ee30:	438a      	bics	r2, r1
 800ee32:	609a      	str	r2, [r3, #8]
 800ee34:	4b23      	ldr	r3, [pc, #140]	@ (800eec4 <HAL_RCC_OscConfig+0x6a4>)
 800ee36:	6a1a      	ldr	r2, [r3, #32]
 800ee38:	4b22      	ldr	r3, [pc, #136]	@ (800eec4 <HAL_RCC_OscConfig+0x6a4>)
 800ee3a:	4923      	ldr	r1, [pc, #140]	@ (800eec8 <HAL_RCC_OscConfig+0x6a8>)
 800ee3c:	400a      	ands	r2, r1
 800ee3e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee40:	f7fa f98a 	bl	8009158 <HAL_GetTick>
 800ee44:	0003      	movs	r3, r0
 800ee46:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ee48:	e008      	b.n	800ee5c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ee4a:	f7fa f985 	bl	8009158 <HAL_GetTick>
 800ee4e:	0002      	movs	r2, r0
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	1ad3      	subs	r3, r2, r3
 800ee54:	2b02      	cmp	r3, #2
 800ee56:	d901      	bls.n	800ee5c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800ee58:	2303      	movs	r3, #3
 800ee5a:	e0aa      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ee5c:	4b12      	ldr	r3, [pc, #72]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	2202      	movs	r2, #2
 800ee62:	4013      	ands	r3, r2
 800ee64:	d1f1      	bne.n	800ee4a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d100      	bne.n	800ee70 <HAL_RCC_OscConfig+0x650>
 800ee6e:	e09f      	b.n	800efb0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ee70:	69fb      	ldr	r3, [r7, #28]
 800ee72:	2b0c      	cmp	r3, #12
 800ee74:	d100      	bne.n	800ee78 <HAL_RCC_OscConfig+0x658>
 800ee76:	e078      	b.n	800ef6a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee7c:	2b02      	cmp	r3, #2
 800ee7e:	d159      	bne.n	800ef34 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ee80:	4b09      	ldr	r3, [pc, #36]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ee82:	681a      	ldr	r2, [r3, #0]
 800ee84:	4b08      	ldr	r3, [pc, #32]	@ (800eea8 <HAL_RCC_OscConfig+0x688>)
 800ee86:	4911      	ldr	r1, [pc, #68]	@ (800eecc <HAL_RCC_OscConfig+0x6ac>)
 800ee88:	400a      	ands	r2, r1
 800ee8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee8c:	f7fa f964 	bl	8009158 <HAL_GetTick>
 800ee90:	0003      	movs	r3, r0
 800ee92:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ee94:	e01c      	b.n	800eed0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ee96:	f7fa f95f 	bl	8009158 <HAL_GetTick>
 800ee9a:	0002      	movs	r2, r0
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	1ad3      	subs	r3, r2, r3
 800eea0:	2b02      	cmp	r3, #2
 800eea2:	d915      	bls.n	800eed0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800eea4:	2303      	movs	r3, #3
 800eea6:	e084      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
 800eea8:	40021000 	.word	0x40021000
 800eeac:	ffff1fff 	.word	0xffff1fff
 800eeb0:	fffffeff 	.word	0xfffffeff
 800eeb4:	40007000 	.word	0x40007000
 800eeb8:	fffffbff 	.word	0xfffffbff
 800eebc:	00001388 	.word	0x00001388
 800eec0:	efffffff 	.word	0xefffffff
 800eec4:	40010000 	.word	0x40010000
 800eec8:	ffffdfff 	.word	0xffffdfff
 800eecc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800eed0:	4b3a      	ldr	r3, [pc, #232]	@ (800efbc <HAL_RCC_OscConfig+0x79c>)
 800eed2:	681a      	ldr	r2, [r3, #0]
 800eed4:	2380      	movs	r3, #128	@ 0x80
 800eed6:	049b      	lsls	r3, r3, #18
 800eed8:	4013      	ands	r3, r2
 800eeda:	d1dc      	bne.n	800ee96 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800eedc:	4b37      	ldr	r3, [pc, #220]	@ (800efbc <HAL_RCC_OscConfig+0x79c>)
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	4a37      	ldr	r2, [pc, #220]	@ (800efc0 <HAL_RCC_OscConfig+0x7a0>)
 800eee2:	4013      	ands	r3, r2
 800eee4:	0019      	movs	r1, r3
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eeee:	431a      	orrs	r2, r3
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eef4:	431a      	orrs	r2, r3
 800eef6:	4b31      	ldr	r3, [pc, #196]	@ (800efbc <HAL_RCC_OscConfig+0x79c>)
 800eef8:	430a      	orrs	r2, r1
 800eefa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800eefc:	4b2f      	ldr	r3, [pc, #188]	@ (800efbc <HAL_RCC_OscConfig+0x79c>)
 800eefe:	681a      	ldr	r2, [r3, #0]
 800ef00:	4b2e      	ldr	r3, [pc, #184]	@ (800efbc <HAL_RCC_OscConfig+0x79c>)
 800ef02:	2180      	movs	r1, #128	@ 0x80
 800ef04:	0449      	lsls	r1, r1, #17
 800ef06:	430a      	orrs	r2, r1
 800ef08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef0a:	f7fa f925 	bl	8009158 <HAL_GetTick>
 800ef0e:	0003      	movs	r3, r0
 800ef10:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800ef12:	e008      	b.n	800ef26 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ef14:	f7fa f920 	bl	8009158 <HAL_GetTick>
 800ef18:	0002      	movs	r2, r0
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	1ad3      	subs	r3, r2, r3
 800ef1e:	2b02      	cmp	r3, #2
 800ef20:	d901      	bls.n	800ef26 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800ef22:	2303      	movs	r3, #3
 800ef24:	e045      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800ef26:	4b25      	ldr	r3, [pc, #148]	@ (800efbc <HAL_RCC_OscConfig+0x79c>)
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	2380      	movs	r3, #128	@ 0x80
 800ef2c:	049b      	lsls	r3, r3, #18
 800ef2e:	4013      	ands	r3, r2
 800ef30:	d0f0      	beq.n	800ef14 <HAL_RCC_OscConfig+0x6f4>
 800ef32:	e03d      	b.n	800efb0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ef34:	4b21      	ldr	r3, [pc, #132]	@ (800efbc <HAL_RCC_OscConfig+0x79c>)
 800ef36:	681a      	ldr	r2, [r3, #0]
 800ef38:	4b20      	ldr	r3, [pc, #128]	@ (800efbc <HAL_RCC_OscConfig+0x79c>)
 800ef3a:	4922      	ldr	r1, [pc, #136]	@ (800efc4 <HAL_RCC_OscConfig+0x7a4>)
 800ef3c:	400a      	ands	r2, r1
 800ef3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef40:	f7fa f90a 	bl	8009158 <HAL_GetTick>
 800ef44:	0003      	movs	r3, r0
 800ef46:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ef48:	e008      	b.n	800ef5c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ef4a:	f7fa f905 	bl	8009158 <HAL_GetTick>
 800ef4e:	0002      	movs	r2, r0
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	1ad3      	subs	r3, r2, r3
 800ef54:	2b02      	cmp	r3, #2
 800ef56:	d901      	bls.n	800ef5c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800ef58:	2303      	movs	r3, #3
 800ef5a:	e02a      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ef5c:	4b17      	ldr	r3, [pc, #92]	@ (800efbc <HAL_RCC_OscConfig+0x79c>)
 800ef5e:	681a      	ldr	r2, [r3, #0]
 800ef60:	2380      	movs	r3, #128	@ 0x80
 800ef62:	049b      	lsls	r3, r3, #18
 800ef64:	4013      	ands	r3, r2
 800ef66:	d1f0      	bne.n	800ef4a <HAL_RCC_OscConfig+0x72a>
 800ef68:	e022      	b.n	800efb0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef6e:	2b01      	cmp	r3, #1
 800ef70:	d101      	bne.n	800ef76 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800ef72:	2301      	movs	r3, #1
 800ef74:	e01d      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ef76:	4b11      	ldr	r3, [pc, #68]	@ (800efbc <HAL_RCC_OscConfig+0x79c>)
 800ef78:	68db      	ldr	r3, [r3, #12]
 800ef7a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ef7c:	69ba      	ldr	r2, [r7, #24]
 800ef7e:	2380      	movs	r3, #128	@ 0x80
 800ef80:	025b      	lsls	r3, r3, #9
 800ef82:	401a      	ands	r2, r3
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d10f      	bne.n	800efac <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ef8c:	69ba      	ldr	r2, [r7, #24]
 800ef8e:	23f0      	movs	r3, #240	@ 0xf0
 800ef90:	039b      	lsls	r3, r3, #14
 800ef92:	401a      	ands	r2, r3
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d107      	bne.n	800efac <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800ef9c:	69ba      	ldr	r2, [r7, #24]
 800ef9e:	23c0      	movs	r3, #192	@ 0xc0
 800efa0:	041b      	lsls	r3, r3, #16
 800efa2:	401a      	ands	r2, r3
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d001      	beq.n	800efb0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800efac:	2301      	movs	r3, #1
 800efae:	e000      	b.n	800efb2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800efb0:	2300      	movs	r3, #0
}
 800efb2:	0018      	movs	r0, r3
 800efb4:	46bd      	mov	sp, r7
 800efb6:	b00a      	add	sp, #40	@ 0x28
 800efb8:	bdb0      	pop	{r4, r5, r7, pc}
 800efba:	46c0      	nop			@ (mov r8, r8)
 800efbc:	40021000 	.word	0x40021000
 800efc0:	ff02ffff 	.word	0xff02ffff
 800efc4:	feffffff 	.word	0xfeffffff

0800efc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800efc8:	b5b0      	push	{r4, r5, r7, lr}
 800efca:	b084      	sub	sp, #16
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d101      	bne.n	800efdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800efd8:	2301      	movs	r3, #1
 800efda:	e128      	b.n	800f22e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800efdc:	4b96      	ldr	r3, [pc, #600]	@ (800f238 <HAL_RCC_ClockConfig+0x270>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	2201      	movs	r2, #1
 800efe2:	4013      	ands	r3, r2
 800efe4:	683a      	ldr	r2, [r7, #0]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d91e      	bls.n	800f028 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800efea:	4b93      	ldr	r3, [pc, #588]	@ (800f238 <HAL_RCC_ClockConfig+0x270>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	2201      	movs	r2, #1
 800eff0:	4393      	bics	r3, r2
 800eff2:	0019      	movs	r1, r3
 800eff4:	4b90      	ldr	r3, [pc, #576]	@ (800f238 <HAL_RCC_ClockConfig+0x270>)
 800eff6:	683a      	ldr	r2, [r7, #0]
 800eff8:	430a      	orrs	r2, r1
 800effa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800effc:	f7fa f8ac 	bl	8009158 <HAL_GetTick>
 800f000:	0003      	movs	r3, r0
 800f002:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f004:	e009      	b.n	800f01a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f006:	f7fa f8a7 	bl	8009158 <HAL_GetTick>
 800f00a:	0002      	movs	r2, r0
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	1ad3      	subs	r3, r2, r3
 800f010:	4a8a      	ldr	r2, [pc, #552]	@ (800f23c <HAL_RCC_ClockConfig+0x274>)
 800f012:	4293      	cmp	r3, r2
 800f014:	d901      	bls.n	800f01a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800f016:	2303      	movs	r3, #3
 800f018:	e109      	b.n	800f22e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f01a:	4b87      	ldr	r3, [pc, #540]	@ (800f238 <HAL_RCC_ClockConfig+0x270>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	2201      	movs	r2, #1
 800f020:	4013      	ands	r3, r2
 800f022:	683a      	ldr	r2, [r7, #0]
 800f024:	429a      	cmp	r2, r3
 800f026:	d1ee      	bne.n	800f006 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	2202      	movs	r2, #2
 800f02e:	4013      	ands	r3, r2
 800f030:	d009      	beq.n	800f046 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f032:	4b83      	ldr	r3, [pc, #524]	@ (800f240 <HAL_RCC_ClockConfig+0x278>)
 800f034:	68db      	ldr	r3, [r3, #12]
 800f036:	22f0      	movs	r2, #240	@ 0xf0
 800f038:	4393      	bics	r3, r2
 800f03a:	0019      	movs	r1, r3
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	689a      	ldr	r2, [r3, #8]
 800f040:	4b7f      	ldr	r3, [pc, #508]	@ (800f240 <HAL_RCC_ClockConfig+0x278>)
 800f042:	430a      	orrs	r2, r1
 800f044:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2201      	movs	r2, #1
 800f04c:	4013      	ands	r3, r2
 800f04e:	d100      	bne.n	800f052 <HAL_RCC_ClockConfig+0x8a>
 800f050:	e089      	b.n	800f166 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	2b02      	cmp	r3, #2
 800f058:	d107      	bne.n	800f06a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f05a:	4b79      	ldr	r3, [pc, #484]	@ (800f240 <HAL_RCC_ClockConfig+0x278>)
 800f05c:	681a      	ldr	r2, [r3, #0]
 800f05e:	2380      	movs	r3, #128	@ 0x80
 800f060:	029b      	lsls	r3, r3, #10
 800f062:	4013      	ands	r3, r2
 800f064:	d120      	bne.n	800f0a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800f066:	2301      	movs	r3, #1
 800f068:	e0e1      	b.n	800f22e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	685b      	ldr	r3, [r3, #4]
 800f06e:	2b03      	cmp	r3, #3
 800f070:	d107      	bne.n	800f082 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f072:	4b73      	ldr	r3, [pc, #460]	@ (800f240 <HAL_RCC_ClockConfig+0x278>)
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	2380      	movs	r3, #128	@ 0x80
 800f078:	049b      	lsls	r3, r3, #18
 800f07a:	4013      	ands	r3, r2
 800f07c:	d114      	bne.n	800f0a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800f07e:	2301      	movs	r3, #1
 800f080:	e0d5      	b.n	800f22e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	685b      	ldr	r3, [r3, #4]
 800f086:	2b01      	cmp	r3, #1
 800f088:	d106      	bne.n	800f098 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f08a:	4b6d      	ldr	r3, [pc, #436]	@ (800f240 <HAL_RCC_ClockConfig+0x278>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	2204      	movs	r2, #4
 800f090:	4013      	ands	r3, r2
 800f092:	d109      	bne.n	800f0a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800f094:	2301      	movs	r3, #1
 800f096:	e0ca      	b.n	800f22e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800f098:	4b69      	ldr	r3, [pc, #420]	@ (800f240 <HAL_RCC_ClockConfig+0x278>)
 800f09a:	681a      	ldr	r2, [r3, #0]
 800f09c:	2380      	movs	r3, #128	@ 0x80
 800f09e:	009b      	lsls	r3, r3, #2
 800f0a0:	4013      	ands	r3, r2
 800f0a2:	d101      	bne.n	800f0a8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	e0c2      	b.n	800f22e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f0a8:	4b65      	ldr	r3, [pc, #404]	@ (800f240 <HAL_RCC_ClockConfig+0x278>)
 800f0aa:	68db      	ldr	r3, [r3, #12]
 800f0ac:	2203      	movs	r2, #3
 800f0ae:	4393      	bics	r3, r2
 800f0b0:	0019      	movs	r1, r3
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	685a      	ldr	r2, [r3, #4]
 800f0b6:	4b62      	ldr	r3, [pc, #392]	@ (800f240 <HAL_RCC_ClockConfig+0x278>)
 800f0b8:	430a      	orrs	r2, r1
 800f0ba:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f0bc:	f7fa f84c 	bl	8009158 <HAL_GetTick>
 800f0c0:	0003      	movs	r3, r0
 800f0c2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	2b02      	cmp	r3, #2
 800f0ca:	d111      	bne.n	800f0f0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800f0cc:	e009      	b.n	800f0e2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f0ce:	f7fa f843 	bl	8009158 <HAL_GetTick>
 800f0d2:	0002      	movs	r2, r0
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	1ad3      	subs	r3, r2, r3
 800f0d8:	4a58      	ldr	r2, [pc, #352]	@ (800f23c <HAL_RCC_ClockConfig+0x274>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d901      	bls.n	800f0e2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800f0de:	2303      	movs	r3, #3
 800f0e0:	e0a5      	b.n	800f22e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800f0e2:	4b57      	ldr	r3, [pc, #348]	@ (800f240 <HAL_RCC_ClockConfig+0x278>)
 800f0e4:	68db      	ldr	r3, [r3, #12]
 800f0e6:	220c      	movs	r2, #12
 800f0e8:	4013      	ands	r3, r2
 800f0ea:	2b08      	cmp	r3, #8
 800f0ec:	d1ef      	bne.n	800f0ce <HAL_RCC_ClockConfig+0x106>
 800f0ee:	e03a      	b.n	800f166 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	2b03      	cmp	r3, #3
 800f0f6:	d111      	bne.n	800f11c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f0f8:	e009      	b.n	800f10e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f0fa:	f7fa f82d 	bl	8009158 <HAL_GetTick>
 800f0fe:	0002      	movs	r2, r0
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	1ad3      	subs	r3, r2, r3
 800f104:	4a4d      	ldr	r2, [pc, #308]	@ (800f23c <HAL_RCC_ClockConfig+0x274>)
 800f106:	4293      	cmp	r3, r2
 800f108:	d901      	bls.n	800f10e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800f10a:	2303      	movs	r3, #3
 800f10c:	e08f      	b.n	800f22e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f10e:	4b4c      	ldr	r3, [pc, #304]	@ (800f240 <HAL_RCC_ClockConfig+0x278>)
 800f110:	68db      	ldr	r3, [r3, #12]
 800f112:	220c      	movs	r2, #12
 800f114:	4013      	ands	r3, r2
 800f116:	2b0c      	cmp	r3, #12
 800f118:	d1ef      	bne.n	800f0fa <HAL_RCC_ClockConfig+0x132>
 800f11a:	e024      	b.n	800f166 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	2b01      	cmp	r3, #1
 800f122:	d11b      	bne.n	800f15c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800f124:	e009      	b.n	800f13a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f126:	f7fa f817 	bl	8009158 <HAL_GetTick>
 800f12a:	0002      	movs	r2, r0
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	1ad3      	subs	r3, r2, r3
 800f130:	4a42      	ldr	r2, [pc, #264]	@ (800f23c <HAL_RCC_ClockConfig+0x274>)
 800f132:	4293      	cmp	r3, r2
 800f134:	d901      	bls.n	800f13a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800f136:	2303      	movs	r3, #3
 800f138:	e079      	b.n	800f22e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800f13a:	4b41      	ldr	r3, [pc, #260]	@ (800f240 <HAL_RCC_ClockConfig+0x278>)
 800f13c:	68db      	ldr	r3, [r3, #12]
 800f13e:	220c      	movs	r2, #12
 800f140:	4013      	ands	r3, r2
 800f142:	2b04      	cmp	r3, #4
 800f144:	d1ef      	bne.n	800f126 <HAL_RCC_ClockConfig+0x15e>
 800f146:	e00e      	b.n	800f166 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f148:	f7fa f806 	bl	8009158 <HAL_GetTick>
 800f14c:	0002      	movs	r2, r0
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	1ad3      	subs	r3, r2, r3
 800f152:	4a3a      	ldr	r2, [pc, #232]	@ (800f23c <HAL_RCC_ClockConfig+0x274>)
 800f154:	4293      	cmp	r3, r2
 800f156:	d901      	bls.n	800f15c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800f158:	2303      	movs	r3, #3
 800f15a:	e068      	b.n	800f22e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800f15c:	4b38      	ldr	r3, [pc, #224]	@ (800f240 <HAL_RCC_ClockConfig+0x278>)
 800f15e:	68db      	ldr	r3, [r3, #12]
 800f160:	220c      	movs	r2, #12
 800f162:	4013      	ands	r3, r2
 800f164:	d1f0      	bne.n	800f148 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f166:	4b34      	ldr	r3, [pc, #208]	@ (800f238 <HAL_RCC_ClockConfig+0x270>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	2201      	movs	r2, #1
 800f16c:	4013      	ands	r3, r2
 800f16e:	683a      	ldr	r2, [r7, #0]
 800f170:	429a      	cmp	r2, r3
 800f172:	d21e      	bcs.n	800f1b2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f174:	4b30      	ldr	r3, [pc, #192]	@ (800f238 <HAL_RCC_ClockConfig+0x270>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	2201      	movs	r2, #1
 800f17a:	4393      	bics	r3, r2
 800f17c:	0019      	movs	r1, r3
 800f17e:	4b2e      	ldr	r3, [pc, #184]	@ (800f238 <HAL_RCC_ClockConfig+0x270>)
 800f180:	683a      	ldr	r2, [r7, #0]
 800f182:	430a      	orrs	r2, r1
 800f184:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800f186:	f7f9 ffe7 	bl	8009158 <HAL_GetTick>
 800f18a:	0003      	movs	r3, r0
 800f18c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f18e:	e009      	b.n	800f1a4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f190:	f7f9 ffe2 	bl	8009158 <HAL_GetTick>
 800f194:	0002      	movs	r2, r0
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	1ad3      	subs	r3, r2, r3
 800f19a:	4a28      	ldr	r2, [pc, #160]	@ (800f23c <HAL_RCC_ClockConfig+0x274>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d901      	bls.n	800f1a4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800f1a0:	2303      	movs	r3, #3
 800f1a2:	e044      	b.n	800f22e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f1a4:	4b24      	ldr	r3, [pc, #144]	@ (800f238 <HAL_RCC_ClockConfig+0x270>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	4013      	ands	r3, r2
 800f1ac:	683a      	ldr	r2, [r7, #0]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d1ee      	bne.n	800f190 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	2204      	movs	r2, #4
 800f1b8:	4013      	ands	r3, r2
 800f1ba:	d009      	beq.n	800f1d0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f1bc:	4b20      	ldr	r3, [pc, #128]	@ (800f240 <HAL_RCC_ClockConfig+0x278>)
 800f1be:	68db      	ldr	r3, [r3, #12]
 800f1c0:	4a20      	ldr	r2, [pc, #128]	@ (800f244 <HAL_RCC_ClockConfig+0x27c>)
 800f1c2:	4013      	ands	r3, r2
 800f1c4:	0019      	movs	r1, r3
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	68da      	ldr	r2, [r3, #12]
 800f1ca:	4b1d      	ldr	r3, [pc, #116]	@ (800f240 <HAL_RCC_ClockConfig+0x278>)
 800f1cc:	430a      	orrs	r2, r1
 800f1ce:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2208      	movs	r2, #8
 800f1d6:	4013      	ands	r3, r2
 800f1d8:	d00a      	beq.n	800f1f0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800f1da:	4b19      	ldr	r3, [pc, #100]	@ (800f240 <HAL_RCC_ClockConfig+0x278>)
 800f1dc:	68db      	ldr	r3, [r3, #12]
 800f1de:	4a1a      	ldr	r2, [pc, #104]	@ (800f248 <HAL_RCC_ClockConfig+0x280>)
 800f1e0:	4013      	ands	r3, r2
 800f1e2:	0019      	movs	r1, r3
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	691b      	ldr	r3, [r3, #16]
 800f1e8:	00da      	lsls	r2, r3, #3
 800f1ea:	4b15      	ldr	r3, [pc, #84]	@ (800f240 <HAL_RCC_ClockConfig+0x278>)
 800f1ec:	430a      	orrs	r2, r1
 800f1ee:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f1f0:	f000 f832 	bl	800f258 <HAL_RCC_GetSysClockFreq>
 800f1f4:	0001      	movs	r1, r0
 800f1f6:	4b12      	ldr	r3, [pc, #72]	@ (800f240 <HAL_RCC_ClockConfig+0x278>)
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	091b      	lsrs	r3, r3, #4
 800f1fc:	220f      	movs	r2, #15
 800f1fe:	4013      	ands	r3, r2
 800f200:	4a12      	ldr	r2, [pc, #72]	@ (800f24c <HAL_RCC_ClockConfig+0x284>)
 800f202:	5cd3      	ldrb	r3, [r2, r3]
 800f204:	000a      	movs	r2, r1
 800f206:	40da      	lsrs	r2, r3
 800f208:	4b11      	ldr	r3, [pc, #68]	@ (800f250 <HAL_RCC_ClockConfig+0x288>)
 800f20a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800f20c:	4b11      	ldr	r3, [pc, #68]	@ (800f254 <HAL_RCC_ClockConfig+0x28c>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	250b      	movs	r5, #11
 800f212:	197c      	adds	r4, r7, r5
 800f214:	0018      	movs	r0, r3
 800f216:	f7f9 ff59 	bl	80090cc <HAL_InitTick>
 800f21a:	0003      	movs	r3, r0
 800f21c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800f21e:	197b      	adds	r3, r7, r5
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d002      	beq.n	800f22c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800f226:	197b      	adds	r3, r7, r5
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	e000      	b.n	800f22e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800f22c:	2300      	movs	r3, #0
}
 800f22e:	0018      	movs	r0, r3
 800f230:	46bd      	mov	sp, r7
 800f232:	b004      	add	sp, #16
 800f234:	bdb0      	pop	{r4, r5, r7, pc}
 800f236:	46c0      	nop			@ (mov r8, r8)
 800f238:	40022000 	.word	0x40022000
 800f23c:	00001388 	.word	0x00001388
 800f240:	40021000 	.word	0x40021000
 800f244:	fffff8ff 	.word	0xfffff8ff
 800f248:	ffffc7ff 	.word	0xffffc7ff
 800f24c:	0801a210 	.word	0x0801a210
 800f250:	2000013c 	.word	0x2000013c
 800f254:	20000150 	.word	0x20000150

0800f258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f258:	b5b0      	push	{r4, r5, r7, lr}
 800f25a:	b08e      	sub	sp, #56	@ 0x38
 800f25c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800f25e:	4b4c      	ldr	r3, [pc, #304]	@ (800f390 <HAL_RCC_GetSysClockFreq+0x138>)
 800f260:	68db      	ldr	r3, [r3, #12]
 800f262:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800f264:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f266:	230c      	movs	r3, #12
 800f268:	4013      	ands	r3, r2
 800f26a:	2b0c      	cmp	r3, #12
 800f26c:	d014      	beq.n	800f298 <HAL_RCC_GetSysClockFreq+0x40>
 800f26e:	d900      	bls.n	800f272 <HAL_RCC_GetSysClockFreq+0x1a>
 800f270:	e07b      	b.n	800f36a <HAL_RCC_GetSysClockFreq+0x112>
 800f272:	2b04      	cmp	r3, #4
 800f274:	d002      	beq.n	800f27c <HAL_RCC_GetSysClockFreq+0x24>
 800f276:	2b08      	cmp	r3, #8
 800f278:	d00b      	beq.n	800f292 <HAL_RCC_GetSysClockFreq+0x3a>
 800f27a:	e076      	b.n	800f36a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800f27c:	4b44      	ldr	r3, [pc, #272]	@ (800f390 <HAL_RCC_GetSysClockFreq+0x138>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2210      	movs	r2, #16
 800f282:	4013      	ands	r3, r2
 800f284:	d002      	beq.n	800f28c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800f286:	4b43      	ldr	r3, [pc, #268]	@ (800f394 <HAL_RCC_GetSysClockFreq+0x13c>)
 800f288:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800f28a:	e07c      	b.n	800f386 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800f28c:	4b42      	ldr	r3, [pc, #264]	@ (800f398 <HAL_RCC_GetSysClockFreq+0x140>)
 800f28e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f290:	e079      	b.n	800f386 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800f292:	4b42      	ldr	r3, [pc, #264]	@ (800f39c <HAL_RCC_GetSysClockFreq+0x144>)
 800f294:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f296:	e076      	b.n	800f386 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800f298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f29a:	0c9a      	lsrs	r2, r3, #18
 800f29c:	230f      	movs	r3, #15
 800f29e:	401a      	ands	r2, r3
 800f2a0:	4b3f      	ldr	r3, [pc, #252]	@ (800f3a0 <HAL_RCC_GetSysClockFreq+0x148>)
 800f2a2:	5c9b      	ldrb	r3, [r3, r2]
 800f2a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800f2a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2a8:	0d9a      	lsrs	r2, r3, #22
 800f2aa:	2303      	movs	r3, #3
 800f2ac:	4013      	ands	r3, r2
 800f2ae:	3301      	adds	r3, #1
 800f2b0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f2b2:	4b37      	ldr	r3, [pc, #220]	@ (800f390 <HAL_RCC_GetSysClockFreq+0x138>)
 800f2b4:	68da      	ldr	r2, [r3, #12]
 800f2b6:	2380      	movs	r3, #128	@ 0x80
 800f2b8:	025b      	lsls	r3, r3, #9
 800f2ba:	4013      	ands	r3, r2
 800f2bc:	d01a      	beq.n	800f2f4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800f2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2c0:	61bb      	str	r3, [r7, #24]
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	61fb      	str	r3, [r7, #28]
 800f2c6:	4a35      	ldr	r2, [pc, #212]	@ (800f39c <HAL_RCC_GetSysClockFreq+0x144>)
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	69b8      	ldr	r0, [r7, #24]
 800f2cc:	69f9      	ldr	r1, [r7, #28]
 800f2ce:	f7f1 f945 	bl	800055c <__aeabi_lmul>
 800f2d2:	0002      	movs	r2, r0
 800f2d4:	000b      	movs	r3, r1
 800f2d6:	0010      	movs	r0, r2
 800f2d8:	0019      	movs	r1, r3
 800f2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2dc:	613b      	str	r3, [r7, #16]
 800f2de:	2300      	movs	r3, #0
 800f2e0:	617b      	str	r3, [r7, #20]
 800f2e2:	693a      	ldr	r2, [r7, #16]
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	f7f1 f919 	bl	800051c <__aeabi_uldivmod>
 800f2ea:	0002      	movs	r2, r0
 800f2ec:	000b      	movs	r3, r1
 800f2ee:	0013      	movs	r3, r2
 800f2f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f2f2:	e037      	b.n	800f364 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800f2f4:	4b26      	ldr	r3, [pc, #152]	@ (800f390 <HAL_RCC_GetSysClockFreq+0x138>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	2210      	movs	r2, #16
 800f2fa:	4013      	ands	r3, r2
 800f2fc:	d01a      	beq.n	800f334 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800f2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f300:	60bb      	str	r3, [r7, #8]
 800f302:	2300      	movs	r3, #0
 800f304:	60fb      	str	r3, [r7, #12]
 800f306:	4a23      	ldr	r2, [pc, #140]	@ (800f394 <HAL_RCC_GetSysClockFreq+0x13c>)
 800f308:	2300      	movs	r3, #0
 800f30a:	68b8      	ldr	r0, [r7, #8]
 800f30c:	68f9      	ldr	r1, [r7, #12]
 800f30e:	f7f1 f925 	bl	800055c <__aeabi_lmul>
 800f312:	0002      	movs	r2, r0
 800f314:	000b      	movs	r3, r1
 800f316:	0010      	movs	r0, r2
 800f318:	0019      	movs	r1, r3
 800f31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f31c:	603b      	str	r3, [r7, #0]
 800f31e:	2300      	movs	r3, #0
 800f320:	607b      	str	r3, [r7, #4]
 800f322:	683a      	ldr	r2, [r7, #0]
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f7f1 f8f9 	bl	800051c <__aeabi_uldivmod>
 800f32a:	0002      	movs	r2, r0
 800f32c:	000b      	movs	r3, r1
 800f32e:	0013      	movs	r3, r2
 800f330:	637b      	str	r3, [r7, #52]	@ 0x34
 800f332:	e017      	b.n	800f364 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800f334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f336:	0018      	movs	r0, r3
 800f338:	2300      	movs	r3, #0
 800f33a:	0019      	movs	r1, r3
 800f33c:	4a16      	ldr	r2, [pc, #88]	@ (800f398 <HAL_RCC_GetSysClockFreq+0x140>)
 800f33e:	2300      	movs	r3, #0
 800f340:	f7f1 f90c 	bl	800055c <__aeabi_lmul>
 800f344:	0002      	movs	r2, r0
 800f346:	000b      	movs	r3, r1
 800f348:	0010      	movs	r0, r2
 800f34a:	0019      	movs	r1, r3
 800f34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f34e:	001c      	movs	r4, r3
 800f350:	2300      	movs	r3, #0
 800f352:	001d      	movs	r5, r3
 800f354:	0022      	movs	r2, r4
 800f356:	002b      	movs	r3, r5
 800f358:	f7f1 f8e0 	bl	800051c <__aeabi_uldivmod>
 800f35c:	0002      	movs	r2, r0
 800f35e:	000b      	movs	r3, r1
 800f360:	0013      	movs	r3, r2
 800f362:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800f364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f366:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f368:	e00d      	b.n	800f386 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800f36a:	4b09      	ldr	r3, [pc, #36]	@ (800f390 <HAL_RCC_GetSysClockFreq+0x138>)
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	0b5b      	lsrs	r3, r3, #13
 800f370:	2207      	movs	r2, #7
 800f372:	4013      	ands	r3, r2
 800f374:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800f376:	6a3b      	ldr	r3, [r7, #32]
 800f378:	3301      	adds	r3, #1
 800f37a:	2280      	movs	r2, #128	@ 0x80
 800f37c:	0212      	lsls	r2, r2, #8
 800f37e:	409a      	lsls	r2, r3
 800f380:	0013      	movs	r3, r2
 800f382:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f384:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800f386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800f388:	0018      	movs	r0, r3
 800f38a:	46bd      	mov	sp, r7
 800f38c:	b00e      	add	sp, #56	@ 0x38
 800f38e:	bdb0      	pop	{r4, r5, r7, pc}
 800f390:	40021000 	.word	0x40021000
 800f394:	003d0900 	.word	0x003d0900
 800f398:	00f42400 	.word	0x00f42400
 800f39c:	007a1200 	.word	0x007a1200
 800f3a0:	0801a228 	.word	0x0801a228

0800f3a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f3a8:	4b02      	ldr	r3, [pc, #8]	@ (800f3b4 <HAL_RCC_GetHCLKFreq+0x10>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
}
 800f3ac:	0018      	movs	r0, r3
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
 800f3b2:	46c0      	nop			@ (mov r8, r8)
 800f3b4:	2000013c 	.word	0x2000013c

0800f3b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f3bc:	f7ff fff2 	bl	800f3a4 <HAL_RCC_GetHCLKFreq>
 800f3c0:	0001      	movs	r1, r0
 800f3c2:	4b06      	ldr	r3, [pc, #24]	@ (800f3dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800f3c4:	68db      	ldr	r3, [r3, #12]
 800f3c6:	0a1b      	lsrs	r3, r3, #8
 800f3c8:	2207      	movs	r2, #7
 800f3ca:	4013      	ands	r3, r2
 800f3cc:	4a04      	ldr	r2, [pc, #16]	@ (800f3e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f3ce:	5cd3      	ldrb	r3, [r2, r3]
 800f3d0:	40d9      	lsrs	r1, r3
 800f3d2:	000b      	movs	r3, r1
}
 800f3d4:	0018      	movs	r0, r3
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
 800f3da:	46c0      	nop			@ (mov r8, r8)
 800f3dc:	40021000 	.word	0x40021000
 800f3e0:	0801a220 	.word	0x0801a220

0800f3e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f3e8:	f7ff ffdc 	bl	800f3a4 <HAL_RCC_GetHCLKFreq>
 800f3ec:	0001      	movs	r1, r0
 800f3ee:	4b06      	ldr	r3, [pc, #24]	@ (800f408 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f3f0:	68db      	ldr	r3, [r3, #12]
 800f3f2:	0adb      	lsrs	r3, r3, #11
 800f3f4:	2207      	movs	r2, #7
 800f3f6:	4013      	ands	r3, r2
 800f3f8:	4a04      	ldr	r2, [pc, #16]	@ (800f40c <HAL_RCC_GetPCLK2Freq+0x28>)
 800f3fa:	5cd3      	ldrb	r3, [r2, r3]
 800f3fc:	40d9      	lsrs	r1, r3
 800f3fe:	000b      	movs	r3, r1
}
 800f400:	0018      	movs	r0, r3
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
 800f406:	46c0      	nop			@ (mov r8, r8)
 800f408:	40021000 	.word	0x40021000
 800f40c:	0801a220 	.word	0x0801a220

0800f410 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b086      	sub	sp, #24
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800f418:	2017      	movs	r0, #23
 800f41a:	183b      	adds	r3, r7, r0
 800f41c:	2200      	movs	r2, #0
 800f41e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	2220      	movs	r2, #32
 800f426:	4013      	ands	r3, r2
 800f428:	d100      	bne.n	800f42c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800f42a:	e0c7      	b.n	800f5bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f42c:	4b9b      	ldr	r3, [pc, #620]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f42e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f430:	2380      	movs	r3, #128	@ 0x80
 800f432:	055b      	lsls	r3, r3, #21
 800f434:	4013      	ands	r3, r2
 800f436:	d109      	bne.n	800f44c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f438:	4b98      	ldr	r3, [pc, #608]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f43a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f43c:	4b97      	ldr	r3, [pc, #604]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f43e:	2180      	movs	r1, #128	@ 0x80
 800f440:	0549      	lsls	r1, r1, #21
 800f442:	430a      	orrs	r2, r1
 800f444:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800f446:	183b      	adds	r3, r7, r0
 800f448:	2201      	movs	r2, #1
 800f44a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f44c:	4b94      	ldr	r3, [pc, #592]	@ (800f6a0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f44e:	681a      	ldr	r2, [r3, #0]
 800f450:	2380      	movs	r3, #128	@ 0x80
 800f452:	005b      	lsls	r3, r3, #1
 800f454:	4013      	ands	r3, r2
 800f456:	d11a      	bne.n	800f48e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f458:	4b91      	ldr	r3, [pc, #580]	@ (800f6a0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f45a:	681a      	ldr	r2, [r3, #0]
 800f45c:	4b90      	ldr	r3, [pc, #576]	@ (800f6a0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f45e:	2180      	movs	r1, #128	@ 0x80
 800f460:	0049      	lsls	r1, r1, #1
 800f462:	430a      	orrs	r2, r1
 800f464:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f466:	f7f9 fe77 	bl	8009158 <HAL_GetTick>
 800f46a:	0003      	movs	r3, r0
 800f46c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f46e:	e008      	b.n	800f482 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f470:	f7f9 fe72 	bl	8009158 <HAL_GetTick>
 800f474:	0002      	movs	r2, r0
 800f476:	693b      	ldr	r3, [r7, #16]
 800f478:	1ad3      	subs	r3, r2, r3
 800f47a:	2b64      	cmp	r3, #100	@ 0x64
 800f47c:	d901      	bls.n	800f482 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800f47e:	2303      	movs	r3, #3
 800f480:	e107      	b.n	800f692 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f482:	4b87      	ldr	r3, [pc, #540]	@ (800f6a0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f484:	681a      	ldr	r2, [r3, #0]
 800f486:	2380      	movs	r3, #128	@ 0x80
 800f488:	005b      	lsls	r3, r3, #1
 800f48a:	4013      	ands	r3, r2
 800f48c:	d0f0      	beq.n	800f470 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800f48e:	4b83      	ldr	r3, [pc, #524]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f490:	681a      	ldr	r2, [r3, #0]
 800f492:	23c0      	movs	r3, #192	@ 0xc0
 800f494:	039b      	lsls	r3, r3, #14
 800f496:	4013      	ands	r3, r2
 800f498:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	685a      	ldr	r2, [r3, #4]
 800f49e:	23c0      	movs	r3, #192	@ 0xc0
 800f4a0:	039b      	lsls	r3, r3, #14
 800f4a2:	4013      	ands	r3, r2
 800f4a4:	68fa      	ldr	r2, [r7, #12]
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d013      	beq.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	685a      	ldr	r2, [r3, #4]
 800f4ae:	23c0      	movs	r3, #192	@ 0xc0
 800f4b0:	029b      	lsls	r3, r3, #10
 800f4b2:	401a      	ands	r2, r3
 800f4b4:	23c0      	movs	r3, #192	@ 0xc0
 800f4b6:	029b      	lsls	r3, r3, #10
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d10a      	bne.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f4bc:	4b77      	ldr	r3, [pc, #476]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	2380      	movs	r3, #128	@ 0x80
 800f4c2:	029b      	lsls	r3, r3, #10
 800f4c4:	401a      	ands	r2, r3
 800f4c6:	2380      	movs	r3, #128	@ 0x80
 800f4c8:	029b      	lsls	r3, r3, #10
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d101      	bne.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	e0df      	b.n	800f692 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800f4d2:	4b72      	ldr	r3, [pc, #456]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f4d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f4d6:	23c0      	movs	r3, #192	@ 0xc0
 800f4d8:	029b      	lsls	r3, r3, #10
 800f4da:	4013      	ands	r3, r2
 800f4dc:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d03b      	beq.n	800f55c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	685a      	ldr	r2, [r3, #4]
 800f4e8:	23c0      	movs	r3, #192	@ 0xc0
 800f4ea:	029b      	lsls	r3, r3, #10
 800f4ec:	4013      	ands	r3, r2
 800f4ee:	68fa      	ldr	r2, [r7, #12]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d033      	beq.n	800f55c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	2220      	movs	r2, #32
 800f4fa:	4013      	ands	r3, r2
 800f4fc:	d02e      	beq.n	800f55c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800f4fe:	4b67      	ldr	r3, [pc, #412]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f502:	4a68      	ldr	r2, [pc, #416]	@ (800f6a4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800f504:	4013      	ands	r3, r2
 800f506:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f508:	4b64      	ldr	r3, [pc, #400]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f50a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f50c:	4b63      	ldr	r3, [pc, #396]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f50e:	2180      	movs	r1, #128	@ 0x80
 800f510:	0309      	lsls	r1, r1, #12
 800f512:	430a      	orrs	r2, r1
 800f514:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f516:	4b61      	ldr	r3, [pc, #388]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f518:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f51a:	4b60      	ldr	r3, [pc, #384]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f51c:	4962      	ldr	r1, [pc, #392]	@ (800f6a8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800f51e:	400a      	ands	r2, r1
 800f520:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800f522:	4b5e      	ldr	r3, [pc, #376]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f524:	68fa      	ldr	r2, [r7, #12]
 800f526:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800f528:	68fa      	ldr	r2, [r7, #12]
 800f52a:	2380      	movs	r3, #128	@ 0x80
 800f52c:	005b      	lsls	r3, r3, #1
 800f52e:	4013      	ands	r3, r2
 800f530:	d014      	beq.n	800f55c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f532:	f7f9 fe11 	bl	8009158 <HAL_GetTick>
 800f536:	0003      	movs	r3, r0
 800f538:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f53a:	e009      	b.n	800f550 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f53c:	f7f9 fe0c 	bl	8009158 <HAL_GetTick>
 800f540:	0002      	movs	r2, r0
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	1ad3      	subs	r3, r2, r3
 800f546:	4a59      	ldr	r2, [pc, #356]	@ (800f6ac <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d901      	bls.n	800f550 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800f54c:	2303      	movs	r3, #3
 800f54e:	e0a0      	b.n	800f692 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f550:	4b52      	ldr	r3, [pc, #328]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f552:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f554:	2380      	movs	r3, #128	@ 0x80
 800f556:	009b      	lsls	r3, r3, #2
 800f558:	4013      	ands	r3, r2
 800f55a:	d0ef      	beq.n	800f53c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	2220      	movs	r2, #32
 800f562:	4013      	ands	r3, r2
 800f564:	d01f      	beq.n	800f5a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	685a      	ldr	r2, [r3, #4]
 800f56a:	23c0      	movs	r3, #192	@ 0xc0
 800f56c:	029b      	lsls	r3, r3, #10
 800f56e:	401a      	ands	r2, r3
 800f570:	23c0      	movs	r3, #192	@ 0xc0
 800f572:	029b      	lsls	r3, r3, #10
 800f574:	429a      	cmp	r2, r3
 800f576:	d10c      	bne.n	800f592 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800f578:	4b48      	ldr	r3, [pc, #288]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	4a4c      	ldr	r2, [pc, #304]	@ (800f6b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800f57e:	4013      	ands	r3, r2
 800f580:	0019      	movs	r1, r3
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	685a      	ldr	r2, [r3, #4]
 800f586:	23c0      	movs	r3, #192	@ 0xc0
 800f588:	039b      	lsls	r3, r3, #14
 800f58a:	401a      	ands	r2, r3
 800f58c:	4b43      	ldr	r3, [pc, #268]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f58e:	430a      	orrs	r2, r1
 800f590:	601a      	str	r2, [r3, #0]
 800f592:	4b42      	ldr	r3, [pc, #264]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f594:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	685a      	ldr	r2, [r3, #4]
 800f59a:	23c0      	movs	r3, #192	@ 0xc0
 800f59c:	029b      	lsls	r3, r3, #10
 800f59e:	401a      	ands	r2, r3
 800f5a0:	4b3e      	ldr	r3, [pc, #248]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f5a2:	430a      	orrs	r2, r1
 800f5a4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800f5a6:	2317      	movs	r3, #23
 800f5a8:	18fb      	adds	r3, r7, r3
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	2b01      	cmp	r3, #1
 800f5ae:	d105      	bne.n	800f5bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f5b0:	4b3a      	ldr	r3, [pc, #232]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f5b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f5b4:	4b39      	ldr	r3, [pc, #228]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f5b6:	493f      	ldr	r1, [pc, #252]	@ (800f6b4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800f5b8:	400a      	ands	r2, r1
 800f5ba:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	2201      	movs	r2, #1
 800f5c2:	4013      	ands	r3, r2
 800f5c4:	d009      	beq.n	800f5da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f5c6:	4b35      	ldr	r3, [pc, #212]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f5c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f5ca:	2203      	movs	r2, #3
 800f5cc:	4393      	bics	r3, r2
 800f5ce:	0019      	movs	r1, r3
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	689a      	ldr	r2, [r3, #8]
 800f5d4:	4b31      	ldr	r3, [pc, #196]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f5d6:	430a      	orrs	r2, r1
 800f5d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2202      	movs	r2, #2
 800f5e0:	4013      	ands	r3, r2
 800f5e2:	d009      	beq.n	800f5f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f5e4:	4b2d      	ldr	r3, [pc, #180]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f5e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f5e8:	220c      	movs	r2, #12
 800f5ea:	4393      	bics	r3, r2
 800f5ec:	0019      	movs	r1, r3
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	68da      	ldr	r2, [r3, #12]
 800f5f2:	4b2a      	ldr	r3, [pc, #168]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f5f4:	430a      	orrs	r2, r1
 800f5f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	2204      	movs	r2, #4
 800f5fe:	4013      	ands	r3, r2
 800f600:	d009      	beq.n	800f616 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f602:	4b26      	ldr	r3, [pc, #152]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f606:	4a2c      	ldr	r2, [pc, #176]	@ (800f6b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800f608:	4013      	ands	r3, r2
 800f60a:	0019      	movs	r1, r3
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	691a      	ldr	r2, [r3, #16]
 800f610:	4b22      	ldr	r3, [pc, #136]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f612:	430a      	orrs	r2, r1
 800f614:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	2208      	movs	r2, #8
 800f61c:	4013      	ands	r3, r2
 800f61e:	d009      	beq.n	800f634 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f620:	4b1e      	ldr	r3, [pc, #120]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f624:	4a25      	ldr	r2, [pc, #148]	@ (800f6bc <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800f626:	4013      	ands	r3, r2
 800f628:	0019      	movs	r1, r3
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	695a      	ldr	r2, [r3, #20]
 800f62e:	4b1b      	ldr	r3, [pc, #108]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f630:	430a      	orrs	r2, r1
 800f632:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681a      	ldr	r2, [r3, #0]
 800f638:	2380      	movs	r3, #128	@ 0x80
 800f63a:	005b      	lsls	r3, r3, #1
 800f63c:	4013      	ands	r3, r2
 800f63e:	d009      	beq.n	800f654 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f640:	4b16      	ldr	r3, [pc, #88]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f644:	4a17      	ldr	r2, [pc, #92]	@ (800f6a4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800f646:	4013      	ands	r3, r2
 800f648:	0019      	movs	r1, r3
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	699a      	ldr	r2, [r3, #24]
 800f64e:	4b13      	ldr	r3, [pc, #76]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f650:	430a      	orrs	r2, r1
 800f652:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	2240      	movs	r2, #64	@ 0x40
 800f65a:	4013      	ands	r3, r2
 800f65c:	d009      	beq.n	800f672 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f65e:	4b0f      	ldr	r3, [pc, #60]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f662:	4a17      	ldr	r2, [pc, #92]	@ (800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800f664:	4013      	ands	r3, r2
 800f666:	0019      	movs	r1, r3
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6a1a      	ldr	r2, [r3, #32]
 800f66c:	4b0b      	ldr	r3, [pc, #44]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f66e:	430a      	orrs	r2, r1
 800f670:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	2280      	movs	r2, #128	@ 0x80
 800f678:	4013      	ands	r3, r2
 800f67a:	d009      	beq.n	800f690 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800f67c:	4b07      	ldr	r3, [pc, #28]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f67e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f680:	4a10      	ldr	r2, [pc, #64]	@ (800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800f682:	4013      	ands	r3, r2
 800f684:	0019      	movs	r1, r3
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	69da      	ldr	r2, [r3, #28]
 800f68a:	4b04      	ldr	r3, [pc, #16]	@ (800f69c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f68c:	430a      	orrs	r2, r1
 800f68e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f690:	2300      	movs	r3, #0
}
 800f692:	0018      	movs	r0, r3
 800f694:	46bd      	mov	sp, r7
 800f696:	b006      	add	sp, #24
 800f698:	bd80      	pop	{r7, pc}
 800f69a:	46c0      	nop			@ (mov r8, r8)
 800f69c:	40021000 	.word	0x40021000
 800f6a0:	40007000 	.word	0x40007000
 800f6a4:	fffcffff 	.word	0xfffcffff
 800f6a8:	fff7ffff 	.word	0xfff7ffff
 800f6ac:	00001388 	.word	0x00001388
 800f6b0:	ffcfffff 	.word	0xffcfffff
 800f6b4:	efffffff 	.word	0xefffffff
 800f6b8:	fffff3ff 	.word	0xfffff3ff
 800f6bc:	ffffcfff 	.word	0xffffcfff
 800f6c0:	fbffffff 	.word	0xfbffffff
 800f6c4:	fff3ffff 	.word	0xfff3ffff

0800f6c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b082      	sub	sp, #8
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d101      	bne.n	800f6da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	e032      	b.n	800f740 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2239      	movs	r2, #57	@ 0x39
 800f6de:	5c9b      	ldrb	r3, [r3, r2]
 800f6e0:	b2db      	uxtb	r3, r3
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d107      	bne.n	800f6f6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2238      	movs	r2, #56	@ 0x38
 800f6ea:	2100      	movs	r1, #0
 800f6ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	0018      	movs	r0, r3
 800f6f2:	f7f8 fef5 	bl	80084e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2239      	movs	r2, #57	@ 0x39
 800f6fa:	2102      	movs	r1, #2
 800f6fc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681a      	ldr	r2, [r3, #0]
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	3304      	adds	r3, #4
 800f706:	0019      	movs	r1, r3
 800f708:	0010      	movs	r0, r2
 800f70a:	f000 f975 	bl	800f9f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	223e      	movs	r2, #62	@ 0x3e
 800f712:	2101      	movs	r1, #1
 800f714:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	223a      	movs	r2, #58	@ 0x3a
 800f71a:	2101      	movs	r1, #1
 800f71c:	5499      	strb	r1, [r3, r2]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	223b      	movs	r2, #59	@ 0x3b
 800f722:	2101      	movs	r1, #1
 800f724:	5499      	strb	r1, [r3, r2]
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	223c      	movs	r2, #60	@ 0x3c
 800f72a:	2101      	movs	r1, #1
 800f72c:	5499      	strb	r1, [r3, r2]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	223d      	movs	r2, #61	@ 0x3d
 800f732:	2101      	movs	r1, #1
 800f734:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2239      	movs	r2, #57	@ 0x39
 800f73a:	2101      	movs	r1, #1
 800f73c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f73e:	2300      	movs	r3, #0
}
 800f740:	0018      	movs	r0, r3
 800f742:	46bd      	mov	sp, r7
 800f744:	b002      	add	sp, #8
 800f746:	bd80      	pop	{r7, pc}

0800f748 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d108      	bne.n	800f76a <HAL_TIM_PWM_Start+0x22>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	223a      	movs	r2, #58	@ 0x3a
 800f75c:	5c9b      	ldrb	r3, [r3, r2]
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	3b01      	subs	r3, #1
 800f762:	1e5a      	subs	r2, r3, #1
 800f764:	4193      	sbcs	r3, r2
 800f766:	b2db      	uxtb	r3, r3
 800f768:	e01f      	b.n	800f7aa <HAL_TIM_PWM_Start+0x62>
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	2b04      	cmp	r3, #4
 800f76e:	d108      	bne.n	800f782 <HAL_TIM_PWM_Start+0x3a>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	223b      	movs	r2, #59	@ 0x3b
 800f774:	5c9b      	ldrb	r3, [r3, r2]
 800f776:	b2db      	uxtb	r3, r3
 800f778:	3b01      	subs	r3, #1
 800f77a:	1e5a      	subs	r2, r3, #1
 800f77c:	4193      	sbcs	r3, r2
 800f77e:	b2db      	uxtb	r3, r3
 800f780:	e013      	b.n	800f7aa <HAL_TIM_PWM_Start+0x62>
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	2b08      	cmp	r3, #8
 800f786:	d108      	bne.n	800f79a <HAL_TIM_PWM_Start+0x52>
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	223c      	movs	r2, #60	@ 0x3c
 800f78c:	5c9b      	ldrb	r3, [r3, r2]
 800f78e:	b2db      	uxtb	r3, r3
 800f790:	3b01      	subs	r3, #1
 800f792:	1e5a      	subs	r2, r3, #1
 800f794:	4193      	sbcs	r3, r2
 800f796:	b2db      	uxtb	r3, r3
 800f798:	e007      	b.n	800f7aa <HAL_TIM_PWM_Start+0x62>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	223d      	movs	r2, #61	@ 0x3d
 800f79e:	5c9b      	ldrb	r3, [r3, r2]
 800f7a0:	b2db      	uxtb	r3, r3
 800f7a2:	3b01      	subs	r3, #1
 800f7a4:	1e5a      	subs	r2, r3, #1
 800f7a6:	4193      	sbcs	r3, r2
 800f7a8:	b2db      	uxtb	r3, r3
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d001      	beq.n	800f7b2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	e052      	b.n	800f858 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d104      	bne.n	800f7c2 <HAL_TIM_PWM_Start+0x7a>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	223a      	movs	r2, #58	@ 0x3a
 800f7bc:	2102      	movs	r1, #2
 800f7be:	5499      	strb	r1, [r3, r2]
 800f7c0:	e013      	b.n	800f7ea <HAL_TIM_PWM_Start+0xa2>
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	2b04      	cmp	r3, #4
 800f7c6:	d104      	bne.n	800f7d2 <HAL_TIM_PWM_Start+0x8a>
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	223b      	movs	r2, #59	@ 0x3b
 800f7cc:	2102      	movs	r1, #2
 800f7ce:	5499      	strb	r1, [r3, r2]
 800f7d0:	e00b      	b.n	800f7ea <HAL_TIM_PWM_Start+0xa2>
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	2b08      	cmp	r3, #8
 800f7d6:	d104      	bne.n	800f7e2 <HAL_TIM_PWM_Start+0x9a>
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	223c      	movs	r2, #60	@ 0x3c
 800f7dc:	2102      	movs	r1, #2
 800f7de:	5499      	strb	r1, [r3, r2]
 800f7e0:	e003      	b.n	800f7ea <HAL_TIM_PWM_Start+0xa2>
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	223d      	movs	r2, #61	@ 0x3d
 800f7e6:	2102      	movs	r1, #2
 800f7e8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	6839      	ldr	r1, [r7, #0]
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	0018      	movs	r0, r3
 800f7f4:	f000 fa62 	bl	800fcbc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	2380      	movs	r3, #128	@ 0x80
 800f7fe:	05db      	lsls	r3, r3, #23
 800f800:	429a      	cmp	r2, r3
 800f802:	d00e      	beq.n	800f822 <HAL_TIM_PWM_Start+0xda>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	4a15      	ldr	r2, [pc, #84]	@ (800f860 <HAL_TIM_PWM_Start+0x118>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d009      	beq.n	800f822 <HAL_TIM_PWM_Start+0xda>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	4a14      	ldr	r2, [pc, #80]	@ (800f864 <HAL_TIM_PWM_Start+0x11c>)
 800f814:	4293      	cmp	r3, r2
 800f816:	d004      	beq.n	800f822 <HAL_TIM_PWM_Start+0xda>
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	4a12      	ldr	r2, [pc, #72]	@ (800f868 <HAL_TIM_PWM_Start+0x120>)
 800f81e:	4293      	cmp	r3, r2
 800f820:	d111      	bne.n	800f846 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	2207      	movs	r2, #7
 800f82a:	4013      	ands	r3, r2
 800f82c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2b06      	cmp	r3, #6
 800f832:	d010      	beq.n	800f856 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	681a      	ldr	r2, [r3, #0]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	2101      	movs	r1, #1
 800f840:	430a      	orrs	r2, r1
 800f842:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f844:	e007      	b.n	800f856 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	681a      	ldr	r2, [r3, #0]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	2101      	movs	r1, #1
 800f852:	430a      	orrs	r2, r1
 800f854:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f856:	2300      	movs	r3, #0
}
 800f858:	0018      	movs	r0, r3
 800f85a:	46bd      	mov	sp, r7
 800f85c:	b004      	add	sp, #16
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	40000400 	.word	0x40000400
 800f864:	40010800 	.word	0x40010800
 800f868:	40011400 	.word	0x40011400

0800f86c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b086      	sub	sp, #24
 800f870:	af00      	add	r7, sp, #0
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f878:	2317      	movs	r3, #23
 800f87a:	18fb      	adds	r3, r7, r3
 800f87c:	2200      	movs	r2, #0
 800f87e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	2238      	movs	r2, #56	@ 0x38
 800f884:	5c9b      	ldrb	r3, [r3, r2]
 800f886:	2b01      	cmp	r3, #1
 800f888:	d101      	bne.n	800f88e <HAL_TIM_PWM_ConfigChannel+0x22>
 800f88a:	2302      	movs	r3, #2
 800f88c:	e0ad      	b.n	800f9ea <HAL_TIM_PWM_ConfigChannel+0x17e>
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	2238      	movs	r2, #56	@ 0x38
 800f892:	2101      	movs	r1, #1
 800f894:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2b0c      	cmp	r3, #12
 800f89a:	d100      	bne.n	800f89e <HAL_TIM_PWM_ConfigChannel+0x32>
 800f89c:	e076      	b.n	800f98c <HAL_TIM_PWM_ConfigChannel+0x120>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2b0c      	cmp	r3, #12
 800f8a2:	d900      	bls.n	800f8a6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 800f8a4:	e095      	b.n	800f9d2 <HAL_TIM_PWM_ConfigChannel+0x166>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2b08      	cmp	r3, #8
 800f8aa:	d04e      	beq.n	800f94a <HAL_TIM_PWM_ConfigChannel+0xde>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2b08      	cmp	r3, #8
 800f8b0:	d900      	bls.n	800f8b4 <HAL_TIM_PWM_ConfigChannel+0x48>
 800f8b2:	e08e      	b.n	800f9d2 <HAL_TIM_PWM_ConfigChannel+0x166>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d003      	beq.n	800f8c2 <HAL_TIM_PWM_ConfigChannel+0x56>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2b04      	cmp	r3, #4
 800f8be:	d021      	beq.n	800f904 <HAL_TIM_PWM_ConfigChannel+0x98>
 800f8c0:	e087      	b.n	800f9d2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	68ba      	ldr	r2, [r7, #8]
 800f8c8:	0011      	movs	r1, r2
 800f8ca:	0018      	movs	r0, r3
 800f8cc:	f000 f8f2 	bl	800fab4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	699a      	ldr	r2, [r3, #24]
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	2108      	movs	r1, #8
 800f8dc:	430a      	orrs	r2, r1
 800f8de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	699a      	ldr	r2, [r3, #24]
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	2104      	movs	r1, #4
 800f8ec:	438a      	bics	r2, r1
 800f8ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	6999      	ldr	r1, [r3, #24]
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	68da      	ldr	r2, [r3, #12]
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	430a      	orrs	r2, r1
 800f900:	619a      	str	r2, [r3, #24]
      break;
 800f902:	e06b      	b.n	800f9dc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	68ba      	ldr	r2, [r7, #8]
 800f90a:	0011      	movs	r1, r2
 800f90c:	0018      	movs	r0, r3
 800f90e:	f000 f90d 	bl	800fb2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	699a      	ldr	r2, [r3, #24]
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	2180      	movs	r1, #128	@ 0x80
 800f91e:	0109      	lsls	r1, r1, #4
 800f920:	430a      	orrs	r2, r1
 800f922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	699a      	ldr	r2, [r3, #24]
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	4931      	ldr	r1, [pc, #196]	@ (800f9f4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800f930:	400a      	ands	r2, r1
 800f932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	6999      	ldr	r1, [r3, #24]
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	68db      	ldr	r3, [r3, #12]
 800f93e:	021a      	lsls	r2, r3, #8
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	430a      	orrs	r2, r1
 800f946:	619a      	str	r2, [r3, #24]
      break;
 800f948:	e048      	b.n	800f9dc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	68ba      	ldr	r2, [r7, #8]
 800f950:	0011      	movs	r1, r2
 800f952:	0018      	movs	r0, r3
 800f954:	f000 f92c 	bl	800fbb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	69da      	ldr	r2, [r3, #28]
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	2108      	movs	r1, #8
 800f964:	430a      	orrs	r2, r1
 800f966:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	69da      	ldr	r2, [r3, #28]
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	2104      	movs	r1, #4
 800f974:	438a      	bics	r2, r1
 800f976:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	69d9      	ldr	r1, [r3, #28]
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	68da      	ldr	r2, [r3, #12]
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	430a      	orrs	r2, r1
 800f988:	61da      	str	r2, [r3, #28]
      break;
 800f98a:	e027      	b.n	800f9dc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	68ba      	ldr	r2, [r7, #8]
 800f992:	0011      	movs	r1, r2
 800f994:	0018      	movs	r0, r3
 800f996:	f000 f94b 	bl	800fc30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	69da      	ldr	r2, [r3, #28]
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	2180      	movs	r1, #128	@ 0x80
 800f9a6:	0109      	lsls	r1, r1, #4
 800f9a8:	430a      	orrs	r2, r1
 800f9aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	69da      	ldr	r2, [r3, #28]
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	490f      	ldr	r1, [pc, #60]	@ (800f9f4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800f9b8:	400a      	ands	r2, r1
 800f9ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	69d9      	ldr	r1, [r3, #28]
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	68db      	ldr	r3, [r3, #12]
 800f9c6:	021a      	lsls	r2, r3, #8
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	430a      	orrs	r2, r1
 800f9ce:	61da      	str	r2, [r3, #28]
      break;
 800f9d0:	e004      	b.n	800f9dc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800f9d2:	2317      	movs	r3, #23
 800f9d4:	18fb      	adds	r3, r7, r3
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	701a      	strb	r2, [r3, #0]
      break;
 800f9da:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2238      	movs	r2, #56	@ 0x38
 800f9e0:	2100      	movs	r1, #0
 800f9e2:	5499      	strb	r1, [r3, r2]

  return status;
 800f9e4:	2317      	movs	r3, #23
 800f9e6:	18fb      	adds	r3, r7, r3
 800f9e8:	781b      	ldrb	r3, [r3, #0]
}
 800f9ea:	0018      	movs	r0, r3
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	b006      	add	sp, #24
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	46c0      	nop			@ (mov r8, r8)
 800f9f4:	fffffbff 	.word	0xfffffbff

0800f9f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b084      	sub	sp, #16
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fa08:	687a      	ldr	r2, [r7, #4]
 800fa0a:	2380      	movs	r3, #128	@ 0x80
 800fa0c:	05db      	lsls	r3, r3, #23
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d00b      	beq.n	800fa2a <TIM_Base_SetConfig+0x32>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	4a23      	ldr	r2, [pc, #140]	@ (800faa4 <TIM_Base_SetConfig+0xac>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d007      	beq.n	800fa2a <TIM_Base_SetConfig+0x32>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	4a22      	ldr	r2, [pc, #136]	@ (800faa8 <TIM_Base_SetConfig+0xb0>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d003      	beq.n	800fa2a <TIM_Base_SetConfig+0x32>
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	4a21      	ldr	r2, [pc, #132]	@ (800faac <TIM_Base_SetConfig+0xb4>)
 800fa26:	4293      	cmp	r3, r2
 800fa28:	d108      	bne.n	800fa3c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	2270      	movs	r2, #112	@ 0x70
 800fa2e:	4393      	bics	r3, r2
 800fa30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fa32:	683b      	ldr	r3, [r7, #0]
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	68fa      	ldr	r2, [r7, #12]
 800fa38:	4313      	orrs	r3, r2
 800fa3a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fa3c:	687a      	ldr	r2, [r7, #4]
 800fa3e:	2380      	movs	r3, #128	@ 0x80
 800fa40:	05db      	lsls	r3, r3, #23
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d00b      	beq.n	800fa5e <TIM_Base_SetConfig+0x66>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	4a16      	ldr	r2, [pc, #88]	@ (800faa4 <TIM_Base_SetConfig+0xac>)
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d007      	beq.n	800fa5e <TIM_Base_SetConfig+0x66>
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	4a15      	ldr	r2, [pc, #84]	@ (800faa8 <TIM_Base_SetConfig+0xb0>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d003      	beq.n	800fa5e <TIM_Base_SetConfig+0x66>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	4a14      	ldr	r2, [pc, #80]	@ (800faac <TIM_Base_SetConfig+0xb4>)
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d108      	bne.n	800fa70 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	4a13      	ldr	r2, [pc, #76]	@ (800fab0 <TIM_Base_SetConfig+0xb8>)
 800fa62:	4013      	ands	r3, r2
 800fa64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	68db      	ldr	r3, [r3, #12]
 800fa6a:	68fa      	ldr	r2, [r7, #12]
 800fa6c:	4313      	orrs	r3, r2
 800fa6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	2280      	movs	r2, #128	@ 0x80
 800fa74:	4393      	bics	r3, r2
 800fa76:	001a      	movs	r2, r3
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	691b      	ldr	r3, [r3, #16]
 800fa7c:	4313      	orrs	r3, r2
 800fa7e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	68fa      	ldr	r2, [r7, #12]
 800fa84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	689a      	ldr	r2, [r3, #8]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	681a      	ldr	r2, [r3, #0]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2201      	movs	r2, #1
 800fa9a:	615a      	str	r2, [r3, #20]
}
 800fa9c:	46c0      	nop			@ (mov r8, r8)
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	b004      	add	sp, #16
 800faa2:	bd80      	pop	{r7, pc}
 800faa4:	40000400 	.word	0x40000400
 800faa8:	40010800 	.word	0x40010800
 800faac:	40011400 	.word	0x40011400
 800fab0:	fffffcff 	.word	0xfffffcff

0800fab4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b086      	sub	sp, #24
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6a1b      	ldr	r3, [r3, #32]
 800fac2:	2201      	movs	r2, #1
 800fac4:	4393      	bics	r3, r2
 800fac6:	001a      	movs	r2, r3
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6a1b      	ldr	r3, [r3, #32]
 800fad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	685b      	ldr	r3, [r3, #4]
 800fad6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	699b      	ldr	r3, [r3, #24]
 800fadc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	2270      	movs	r2, #112	@ 0x70
 800fae2:	4393      	bics	r3, r2
 800fae4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	2203      	movs	r2, #3
 800faea:	4393      	bics	r3, r2
 800faec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	68fa      	ldr	r2, [r7, #12]
 800faf4:	4313      	orrs	r3, r2
 800faf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	2202      	movs	r2, #2
 800fafc:	4393      	bics	r3, r2
 800fafe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	689b      	ldr	r3, [r3, #8]
 800fb04:	697a      	ldr	r2, [r7, #20]
 800fb06:	4313      	orrs	r3, r2
 800fb08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	693a      	ldr	r2, [r7, #16]
 800fb0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	68fa      	ldr	r2, [r7, #12]
 800fb14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	685a      	ldr	r2, [r3, #4]
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	697a      	ldr	r2, [r7, #20]
 800fb22:	621a      	str	r2, [r3, #32]
}
 800fb24:	46c0      	nop			@ (mov r8, r8)
 800fb26:	46bd      	mov	sp, r7
 800fb28:	b006      	add	sp, #24
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b086      	sub	sp, #24
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6a1b      	ldr	r3, [r3, #32]
 800fb3a:	2210      	movs	r2, #16
 800fb3c:	4393      	bics	r3, r2
 800fb3e:	001a      	movs	r2, r3
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	6a1b      	ldr	r3, [r3, #32]
 800fb48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	699b      	ldr	r3, [r3, #24]
 800fb54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	4a13      	ldr	r2, [pc, #76]	@ (800fba8 <TIM_OC2_SetConfig+0x7c>)
 800fb5a:	4013      	ands	r3, r2
 800fb5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	4a12      	ldr	r2, [pc, #72]	@ (800fbac <TIM_OC2_SetConfig+0x80>)
 800fb62:	4013      	ands	r3, r2
 800fb64:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	021b      	lsls	r3, r3, #8
 800fb6c:	68fa      	ldr	r2, [r7, #12]
 800fb6e:	4313      	orrs	r3, r2
 800fb70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	2220      	movs	r2, #32
 800fb76:	4393      	bics	r3, r2
 800fb78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	689b      	ldr	r3, [r3, #8]
 800fb7e:	011b      	lsls	r3, r3, #4
 800fb80:	697a      	ldr	r2, [r7, #20]
 800fb82:	4313      	orrs	r3, r2
 800fb84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	693a      	ldr	r2, [r7, #16]
 800fb8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	68fa      	ldr	r2, [r7, #12]
 800fb90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	685a      	ldr	r2, [r3, #4]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	697a      	ldr	r2, [r7, #20]
 800fb9e:	621a      	str	r2, [r3, #32]
}
 800fba0:	46c0      	nop			@ (mov r8, r8)
 800fba2:	46bd      	mov	sp, r7
 800fba4:	b006      	add	sp, #24
 800fba6:	bd80      	pop	{r7, pc}
 800fba8:	ffff8fff 	.word	0xffff8fff
 800fbac:	fffffcff 	.word	0xfffffcff

0800fbb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b086      	sub	sp, #24
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6a1b      	ldr	r3, [r3, #32]
 800fbbe:	4a1a      	ldr	r2, [pc, #104]	@ (800fc28 <TIM_OC3_SetConfig+0x78>)
 800fbc0:	401a      	ands	r2, r3
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6a1b      	ldr	r3, [r3, #32]
 800fbca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	69db      	ldr	r3, [r3, #28]
 800fbd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	2270      	movs	r2, #112	@ 0x70
 800fbdc:	4393      	bics	r3, r2
 800fbde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	2203      	movs	r2, #3
 800fbe4:	4393      	bics	r3, r2
 800fbe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	68fa      	ldr	r2, [r7, #12]
 800fbee:	4313      	orrs	r3, r2
 800fbf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	4a0d      	ldr	r2, [pc, #52]	@ (800fc2c <TIM_OC3_SetConfig+0x7c>)
 800fbf6:	4013      	ands	r3, r2
 800fbf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	021b      	lsls	r3, r3, #8
 800fc00:	697a      	ldr	r2, [r7, #20]
 800fc02:	4313      	orrs	r3, r2
 800fc04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	693a      	ldr	r2, [r7, #16]
 800fc0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	68fa      	ldr	r2, [r7, #12]
 800fc10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	685a      	ldr	r2, [r3, #4]
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	697a      	ldr	r2, [r7, #20]
 800fc1e:	621a      	str	r2, [r3, #32]
}
 800fc20:	46c0      	nop			@ (mov r8, r8)
 800fc22:	46bd      	mov	sp, r7
 800fc24:	b006      	add	sp, #24
 800fc26:	bd80      	pop	{r7, pc}
 800fc28:	fffffeff 	.word	0xfffffeff
 800fc2c:	fffffdff 	.word	0xfffffdff

0800fc30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b086      	sub	sp, #24
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6a1b      	ldr	r3, [r3, #32]
 800fc3e:	4a1b      	ldr	r2, [pc, #108]	@ (800fcac <TIM_OC4_SetConfig+0x7c>)
 800fc40:	401a      	ands	r2, r3
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6a1b      	ldr	r3, [r3, #32]
 800fc4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	69db      	ldr	r3, [r3, #28]
 800fc56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	4a15      	ldr	r2, [pc, #84]	@ (800fcb0 <TIM_OC4_SetConfig+0x80>)
 800fc5c:	4013      	ands	r3, r2
 800fc5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	4a14      	ldr	r2, [pc, #80]	@ (800fcb4 <TIM_OC4_SetConfig+0x84>)
 800fc64:	4013      	ands	r3, r2
 800fc66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	021b      	lsls	r3, r3, #8
 800fc6e:	68fa      	ldr	r2, [r7, #12]
 800fc70:	4313      	orrs	r3, r2
 800fc72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	4a10      	ldr	r2, [pc, #64]	@ (800fcb8 <TIM_OC4_SetConfig+0x88>)
 800fc78:	4013      	ands	r3, r2
 800fc7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	689b      	ldr	r3, [r3, #8]
 800fc80:	031b      	lsls	r3, r3, #12
 800fc82:	697a      	ldr	r2, [r7, #20]
 800fc84:	4313      	orrs	r3, r2
 800fc86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	693a      	ldr	r2, [r7, #16]
 800fc8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	68fa      	ldr	r2, [r7, #12]
 800fc92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	685a      	ldr	r2, [r3, #4]
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	697a      	ldr	r2, [r7, #20]
 800fca0:	621a      	str	r2, [r3, #32]
}
 800fca2:	46c0      	nop			@ (mov r8, r8)
 800fca4:	46bd      	mov	sp, r7
 800fca6:	b006      	add	sp, #24
 800fca8:	bd80      	pop	{r7, pc}
 800fcaa:	46c0      	nop			@ (mov r8, r8)
 800fcac:	ffffefff 	.word	0xffffefff
 800fcb0:	ffff8fff 	.word	0xffff8fff
 800fcb4:	fffffcff 	.word	0xfffffcff
 800fcb8:	ffffdfff 	.word	0xffffdfff

0800fcbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b086      	sub	sp, #24
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	60f8      	str	r0, [r7, #12]
 800fcc4:	60b9      	str	r1, [r7, #8]
 800fcc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	221f      	movs	r2, #31
 800fccc:	4013      	ands	r3, r2
 800fcce:	2201      	movs	r2, #1
 800fcd0:	409a      	lsls	r2, r3
 800fcd2:	0013      	movs	r3, r2
 800fcd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	6a1b      	ldr	r3, [r3, #32]
 800fcda:	697a      	ldr	r2, [r7, #20]
 800fcdc:	43d2      	mvns	r2, r2
 800fcde:	401a      	ands	r2, r3
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	6a1a      	ldr	r2, [r3, #32]
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	211f      	movs	r1, #31
 800fcec:	400b      	ands	r3, r1
 800fcee:	6879      	ldr	r1, [r7, #4]
 800fcf0:	4099      	lsls	r1, r3
 800fcf2:	000b      	movs	r3, r1
 800fcf4:	431a      	orrs	r2, r3
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	621a      	str	r2, [r3, #32]
}
 800fcfa:	46c0      	nop			@ (mov r8, r8)
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	b006      	add	sp, #24
 800fd00:	bd80      	pop	{r7, pc}
	...

0800fd04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b084      	sub	sp, #16
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	2238      	movs	r2, #56	@ 0x38
 800fd12:	5c9b      	ldrb	r3, [r3, r2]
 800fd14:	2b01      	cmp	r3, #1
 800fd16:	d101      	bne.n	800fd1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fd18:	2302      	movs	r3, #2
 800fd1a:	e047      	b.n	800fdac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2238      	movs	r2, #56	@ 0x38
 800fd20:	2101      	movs	r1, #1
 800fd22:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2239      	movs	r2, #57	@ 0x39
 800fd28:	2102      	movs	r1, #2
 800fd2a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	689b      	ldr	r3, [r3, #8]
 800fd3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2270      	movs	r2, #112	@ 0x70
 800fd40:	4393      	bics	r3, r2
 800fd42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	68fa      	ldr	r2, [r7, #12]
 800fd4a:	4313      	orrs	r3, r2
 800fd4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	68fa      	ldr	r2, [r7, #12]
 800fd54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681a      	ldr	r2, [r3, #0]
 800fd5a:	2380      	movs	r3, #128	@ 0x80
 800fd5c:	05db      	lsls	r3, r3, #23
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d00e      	beq.n	800fd80 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	4a13      	ldr	r2, [pc, #76]	@ (800fdb4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d009      	beq.n	800fd80 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4a11      	ldr	r2, [pc, #68]	@ (800fdb8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d004      	beq.n	800fd80 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4a10      	ldr	r2, [pc, #64]	@ (800fdbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d10c      	bne.n	800fd9a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	2280      	movs	r2, #128	@ 0x80
 800fd84:	4393      	bics	r3, r2
 800fd86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	685b      	ldr	r3, [r3, #4]
 800fd8c:	68ba      	ldr	r2, [r7, #8]
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	68ba      	ldr	r2, [r7, #8]
 800fd98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2239      	movs	r2, #57	@ 0x39
 800fd9e:	2101      	movs	r1, #1
 800fda0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2238      	movs	r2, #56	@ 0x38
 800fda6:	2100      	movs	r1, #0
 800fda8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fdaa:	2300      	movs	r3, #0
}
 800fdac:	0018      	movs	r0, r3
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	b004      	add	sp, #16
 800fdb2:	bd80      	pop	{r7, pc}
 800fdb4:	40000400 	.word	0x40000400
 800fdb8:	40010800 	.word	0x40010800
 800fdbc:	40011400 	.word	0x40011400

0800fdc0 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b082      	sub	sp, #8
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2238      	movs	r2, #56	@ 0x38
 800fdce:	5c9b      	ldrb	r3, [r3, r2]
 800fdd0:	2b01      	cmp	r3, #1
 800fdd2:	d101      	bne.n	800fdd8 <HAL_TIMEx_RemapConfig+0x18>
 800fdd4:	2302      	movs	r3, #2
 800fdd6:	e00c      	b.n	800fdf2 <HAL_TIMEx_RemapConfig+0x32>
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2238      	movs	r2, #56	@ 0x38
 800fddc:	2101      	movs	r1, #1
 800fdde:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	683a      	ldr	r2, [r7, #0]
 800fde6:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2238      	movs	r2, #56	@ 0x38
 800fdec:	2100      	movs	r1, #0
 800fdee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fdf0:	2300      	movs	r3, #0
}
 800fdf2:	0018      	movs	r0, r3
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	b002      	add	sp, #8
 800fdf8:	bd80      	pop	{r7, pc}
	...

0800fdfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b082      	sub	sp, #8
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d101      	bne.n	800fe0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	e053      	b.n	800feb6 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d116      	bne.n	800fe44 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2278      	movs	r2, #120	@ 0x78
 800fe1a:	2100      	movs	r1, #0
 800fe1c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	0018      	movs	r0, r3
 800fe22:	f000 fd07 	bl	8010834 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	22b0      	movs	r2, #176	@ 0xb0
 800fe2a:	589b      	ldr	r3, [r3, r2]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d103      	bne.n	800fe38 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	21b0      	movs	r1, #176	@ 0xb0
 800fe34:	4a22      	ldr	r2, [pc, #136]	@ (800fec0 <HAL_UART_Init+0xc4>)
 800fe36:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	22b0      	movs	r2, #176	@ 0xb0
 800fe3c:	589b      	ldr	r3, [r3, r2]
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	0010      	movs	r0, r2
 800fe42:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	2224      	movs	r2, #36	@ 0x24
 800fe48:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	681a      	ldr	r2, [r3, #0]
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	2101      	movs	r1, #1
 800fe56:	438a      	bics	r2, r1
 800fe58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	0018      	movs	r0, r3
 800fe5e:	f000 fd2d 	bl	80108bc <UART_SetConfig>
 800fe62:	0003      	movs	r3, r0
 800fe64:	2b01      	cmp	r3, #1
 800fe66:	d101      	bne.n	800fe6c <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 800fe68:	2301      	movs	r3, #1
 800fe6a:	e024      	b.n	800feb6 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d003      	beq.n	800fe7c <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	0018      	movs	r0, r3
 800fe78:	f000 ffbe 	bl	8010df8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	685a      	ldr	r2, [r3, #4]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	490f      	ldr	r1, [pc, #60]	@ (800fec4 <HAL_UART_Init+0xc8>)
 800fe88:	400a      	ands	r2, r1
 800fe8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	689a      	ldr	r2, [r3, #8]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	212a      	movs	r1, #42	@ 0x2a
 800fe98:	438a      	bics	r2, r1
 800fe9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	681a      	ldr	r2, [r3, #0]
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	2101      	movs	r1, #1
 800fea8:	430a      	orrs	r2, r1
 800feaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	0018      	movs	r0, r3
 800feb0:	f001 f856 	bl	8010f60 <UART_CheckIdleState>
 800feb4:	0003      	movs	r3, r0
}
 800feb6:	0018      	movs	r0, r3
 800feb8:	46bd      	mov	sp, r7
 800feba:	b002      	add	sp, #8
 800febc:	bd80      	pop	{r7, pc}
 800febe:	46c0      	nop			@ (mov r8, r8)
 800fec0:	080086c1 	.word	0x080086c1
 800fec4:	ffffb7ff 	.word	0xffffb7ff

0800fec8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b08a      	sub	sp, #40	@ 0x28
 800fecc:	af02      	add	r7, sp, #8
 800fece:	60f8      	str	r0, [r7, #12]
 800fed0:	60b9      	str	r1, [r7, #8]
 800fed2:	603b      	str	r3, [r7, #0]
 800fed4:	1dbb      	adds	r3, r7, #6
 800fed6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fedc:	2b20      	cmp	r3, #32
 800fede:	d000      	beq.n	800fee2 <HAL_UART_Transmit+0x1a>
 800fee0:	e08c      	b.n	800fffc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d003      	beq.n	800fef0 <HAL_UART_Transmit+0x28>
 800fee8:	1dbb      	adds	r3, r7, #6
 800feea:	881b      	ldrh	r3, [r3, #0]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d101      	bne.n	800fef4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800fef0:	2301      	movs	r3, #1
 800fef2:	e084      	b.n	800fffe <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	689a      	ldr	r2, [r3, #8]
 800fef8:	2380      	movs	r3, #128	@ 0x80
 800fefa:	015b      	lsls	r3, r3, #5
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d109      	bne.n	800ff14 <HAL_UART_Transmit+0x4c>
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	691b      	ldr	r3, [r3, #16]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d105      	bne.n	800ff14 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	2201      	movs	r2, #1
 800ff0c:	4013      	ands	r3, r2
 800ff0e:	d001      	beq.n	800ff14 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800ff10:	2301      	movs	r3, #1
 800ff12:	e074      	b.n	800fffe <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	2284      	movs	r2, #132	@ 0x84
 800ff18:	2100      	movs	r1, #0
 800ff1a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2221      	movs	r2, #33	@ 0x21
 800ff20:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ff22:	f7f9 f919 	bl	8009158 <HAL_GetTick>
 800ff26:	0003      	movs	r3, r0
 800ff28:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	1dba      	adds	r2, r7, #6
 800ff2e:	2150      	movs	r1, #80	@ 0x50
 800ff30:	8812      	ldrh	r2, [r2, #0]
 800ff32:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	1dba      	adds	r2, r7, #6
 800ff38:	2152      	movs	r1, #82	@ 0x52
 800ff3a:	8812      	ldrh	r2, [r2, #0]
 800ff3c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	689a      	ldr	r2, [r3, #8]
 800ff42:	2380      	movs	r3, #128	@ 0x80
 800ff44:	015b      	lsls	r3, r3, #5
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d108      	bne.n	800ff5c <HAL_UART_Transmit+0x94>
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	691b      	ldr	r3, [r3, #16]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d104      	bne.n	800ff5c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800ff52:	2300      	movs	r3, #0
 800ff54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	61bb      	str	r3, [r7, #24]
 800ff5a:	e003      	b.n	800ff64 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ff60:	2300      	movs	r3, #0
 800ff62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ff64:	e02f      	b.n	800ffc6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ff66:	697a      	ldr	r2, [r7, #20]
 800ff68:	68f8      	ldr	r0, [r7, #12]
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	9300      	str	r3, [sp, #0]
 800ff6e:	0013      	movs	r3, r2
 800ff70:	2200      	movs	r2, #0
 800ff72:	2180      	movs	r1, #128	@ 0x80
 800ff74:	f001 f89c 	bl	80110b0 <UART_WaitOnFlagUntilTimeout>
 800ff78:	1e03      	subs	r3, r0, #0
 800ff7a:	d004      	beq.n	800ff86 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2220      	movs	r2, #32
 800ff80:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800ff82:	2303      	movs	r3, #3
 800ff84:	e03b      	b.n	800fffe <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800ff86:	69fb      	ldr	r3, [r7, #28]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d10b      	bne.n	800ffa4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ff8c:	69bb      	ldr	r3, [r7, #24]
 800ff8e:	881b      	ldrh	r3, [r3, #0]
 800ff90:	001a      	movs	r2, r3
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	05d2      	lsls	r2, r2, #23
 800ff98:	0dd2      	lsrs	r2, r2, #23
 800ff9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ff9c:	69bb      	ldr	r3, [r7, #24]
 800ff9e:	3302      	adds	r3, #2
 800ffa0:	61bb      	str	r3, [r7, #24]
 800ffa2:	e007      	b.n	800ffb4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ffa4:	69fb      	ldr	r3, [r7, #28]
 800ffa6:	781a      	ldrb	r2, [r3, #0]
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ffae:	69fb      	ldr	r3, [r7, #28]
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2252      	movs	r2, #82	@ 0x52
 800ffb8:	5a9b      	ldrh	r3, [r3, r2]
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	3b01      	subs	r3, #1
 800ffbe:	b299      	uxth	r1, r3
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	2252      	movs	r2, #82	@ 0x52
 800ffc4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	2252      	movs	r2, #82	@ 0x52
 800ffca:	5a9b      	ldrh	r3, [r3, r2]
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d1c9      	bne.n	800ff66 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ffd2:	697a      	ldr	r2, [r7, #20]
 800ffd4:	68f8      	ldr	r0, [r7, #12]
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	9300      	str	r3, [sp, #0]
 800ffda:	0013      	movs	r3, r2
 800ffdc:	2200      	movs	r2, #0
 800ffde:	2140      	movs	r1, #64	@ 0x40
 800ffe0:	f001 f866 	bl	80110b0 <UART_WaitOnFlagUntilTimeout>
 800ffe4:	1e03      	subs	r3, r0, #0
 800ffe6:	d004      	beq.n	800fff2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	2220      	movs	r2, #32
 800ffec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800ffee:	2303      	movs	r3, #3
 800fff0:	e005      	b.n	800fffe <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	2220      	movs	r2, #32
 800fff6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800fff8:	2300      	movs	r3, #0
 800fffa:	e000      	b.n	800fffe <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800fffc:	2302      	movs	r3, #2
  }
}
 800fffe:	0018      	movs	r0, r3
 8010000:	46bd      	mov	sp, r7
 8010002:	b008      	add	sp, #32
 8010004:	bd80      	pop	{r7, pc}
	...

08010008 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b088      	sub	sp, #32
 801000c:	af00      	add	r7, sp, #0
 801000e:	60f8      	str	r0, [r7, #12]
 8010010:	60b9      	str	r1, [r7, #8]
 8010012:	1dbb      	adds	r3, r7, #6
 8010014:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801001a:	2b20      	cmp	r3, #32
 801001c:	d000      	beq.n	8010020 <HAL_UART_Transmit_DMA+0x18>
 801001e:	e077      	b.n	8010110 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d003      	beq.n	801002e <HAL_UART_Transmit_DMA+0x26>
 8010026:	1dbb      	adds	r3, r7, #6
 8010028:	881b      	ldrh	r3, [r3, #0]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d101      	bne.n	8010032 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801002e:	2301      	movs	r3, #1
 8010030:	e06f      	b.n	8010112 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	689a      	ldr	r2, [r3, #8]
 8010036:	2380      	movs	r3, #128	@ 0x80
 8010038:	015b      	lsls	r3, r3, #5
 801003a:	429a      	cmp	r2, r3
 801003c:	d109      	bne.n	8010052 <HAL_UART_Transmit_DMA+0x4a>
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	691b      	ldr	r3, [r3, #16]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d105      	bne.n	8010052 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	2201      	movs	r2, #1
 801004a:	4013      	ands	r3, r2
 801004c:	d001      	beq.n	8010052 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801004e:	2301      	movs	r3, #1
 8010050:	e05f      	b.n	8010112 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	68ba      	ldr	r2, [r7, #8]
 8010056:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	1dba      	adds	r2, r7, #6
 801005c:	2150      	movs	r1, #80	@ 0x50
 801005e:	8812      	ldrh	r2, [r2, #0]
 8010060:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	1dba      	adds	r2, r7, #6
 8010066:	2152      	movs	r1, #82	@ 0x52
 8010068:	8812      	ldrh	r2, [r2, #0]
 801006a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	2284      	movs	r2, #132	@ 0x84
 8010070:	2100      	movs	r1, #0
 8010072:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	2221      	movs	r2, #33	@ 0x21
 8010078:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801007e:	2b00      	cmp	r3, #0
 8010080:	d027      	beq.n	80100d2 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010086:	4a25      	ldr	r2, [pc, #148]	@ (801011c <HAL_UART_Transmit_DMA+0x114>)
 8010088:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801008e:	4a24      	ldr	r2, [pc, #144]	@ (8010120 <HAL_UART_Transmit_DMA+0x118>)
 8010090:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010096:	4a23      	ldr	r2, [pc, #140]	@ (8010124 <HAL_UART_Transmit_DMA+0x11c>)
 8010098:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801009e:	2200      	movs	r2, #0
 80100a0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80100aa:	0019      	movs	r1, r3
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	3328      	adds	r3, #40	@ 0x28
 80100b2:	001a      	movs	r2, r3
 80100b4:	1dbb      	adds	r3, r7, #6
 80100b6:	881b      	ldrh	r3, [r3, #0]
 80100b8:	f7f9 fdae 	bl	8009c18 <HAL_DMA_Start_IT>
 80100bc:	1e03      	subs	r3, r0, #0
 80100be:	d008      	beq.n	80100d2 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	2284      	movs	r2, #132	@ 0x84
 80100c4:	2110      	movs	r1, #16
 80100c6:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	2220      	movs	r2, #32
 80100cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80100ce:	2301      	movs	r3, #1
 80100d0:	e01f      	b.n	8010112 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	2240      	movs	r2, #64	@ 0x40
 80100d8:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80100da:	f3ef 8310 	mrs	r3, PRIMASK
 80100de:	613b      	str	r3, [r7, #16]
  return(result);
 80100e0:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80100e2:	61fb      	str	r3, [r7, #28]
 80100e4:	2301      	movs	r3, #1
 80100e6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	f383 8810 	msr	PRIMASK, r3
}
 80100ee:	46c0      	nop			@ (mov r8, r8)
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	689a      	ldr	r2, [r3, #8]
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	2180      	movs	r1, #128	@ 0x80
 80100fc:	430a      	orrs	r2, r1
 80100fe:	609a      	str	r2, [r3, #8]
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010104:	69bb      	ldr	r3, [r7, #24]
 8010106:	f383 8810 	msr	PRIMASK, r3
}
 801010a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801010c:	2300      	movs	r3, #0
 801010e:	e000      	b.n	8010112 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8010110:	2302      	movs	r3, #2
  }
}
 8010112:	0018      	movs	r0, r3
 8010114:	46bd      	mov	sp, r7
 8010116:	b008      	add	sp, #32
 8010118:	bd80      	pop	{r7, pc}
 801011a:	46c0      	nop			@ (mov r8, r8)
 801011c:	080113d5 	.word	0x080113d5
 8010120:	08011471 	.word	0x08011471
 8010124:	08011611 	.word	0x08011611

08010128 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b088      	sub	sp, #32
 801012c:	af00      	add	r7, sp, #0
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	60b9      	str	r1, [r7, #8]
 8010132:	1dbb      	adds	r3, r7, #6
 8010134:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	2280      	movs	r2, #128	@ 0x80
 801013a:	589b      	ldr	r3, [r3, r2]
 801013c:	2b20      	cmp	r3, #32
 801013e:	d14a      	bne.n	80101d6 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d003      	beq.n	801014e <HAL_UART_Receive_DMA+0x26>
 8010146:	1dbb      	adds	r3, r7, #6
 8010148:	881b      	ldrh	r3, [r3, #0]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d101      	bne.n	8010152 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801014e:	2301      	movs	r3, #1
 8010150:	e042      	b.n	80101d8 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	689a      	ldr	r2, [r3, #8]
 8010156:	2380      	movs	r3, #128	@ 0x80
 8010158:	015b      	lsls	r3, r3, #5
 801015a:	429a      	cmp	r2, r3
 801015c:	d109      	bne.n	8010172 <HAL_UART_Receive_DMA+0x4a>
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	691b      	ldr	r3, [r3, #16]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d105      	bne.n	8010172 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	2201      	movs	r2, #1
 801016a:	4013      	ands	r3, r2
 801016c:	d001      	beq.n	8010172 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801016e:	2301      	movs	r3, #1
 8010170:	e032      	b.n	80101d8 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2200      	movs	r2, #0
 8010176:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	4a18      	ldr	r2, [pc, #96]	@ (80101e0 <HAL_UART_Receive_DMA+0xb8>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d020      	beq.n	80101c4 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	685a      	ldr	r2, [r3, #4]
 8010188:	2380      	movs	r3, #128	@ 0x80
 801018a:	041b      	lsls	r3, r3, #16
 801018c:	4013      	ands	r3, r2
 801018e:	d019      	beq.n	80101c4 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010190:	f3ef 8310 	mrs	r3, PRIMASK
 8010194:	613b      	str	r3, [r7, #16]
  return(result);
 8010196:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010198:	61fb      	str	r3, [r7, #28]
 801019a:	2301      	movs	r3, #1
 801019c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	f383 8810 	msr	PRIMASK, r3
}
 80101a4:	46c0      	nop			@ (mov r8, r8)
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	681a      	ldr	r2, [r3, #0]
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	2180      	movs	r1, #128	@ 0x80
 80101b2:	04c9      	lsls	r1, r1, #19
 80101b4:	430a      	orrs	r2, r1
 80101b6:	601a      	str	r2, [r3, #0]
 80101b8:	69fb      	ldr	r3, [r7, #28]
 80101ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80101bc:	69bb      	ldr	r3, [r7, #24]
 80101be:	f383 8810 	msr	PRIMASK, r3
}
 80101c2:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80101c4:	1dbb      	adds	r3, r7, #6
 80101c6:	881a      	ldrh	r2, [r3, #0]
 80101c8:	68b9      	ldr	r1, [r7, #8]
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	0018      	movs	r0, r3
 80101ce:	f000 ffd9 	bl	8011184 <UART_Start_Receive_DMA>
 80101d2:	0003      	movs	r3, r0
 80101d4:	e000      	b.n	80101d8 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80101d6:	2302      	movs	r3, #2
  }
}
 80101d8:	0018      	movs	r0, r3
 80101da:	46bd      	mov	sp, r7
 80101dc:	b008      	add	sp, #32
 80101de:	bd80      	pop	{r7, pc}
 80101e0:	40004800 	.word	0x40004800

080101e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80101e4:	b590      	push	{r4, r7, lr}
 80101e6:	b0ab      	sub	sp, #172	@ 0xac
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	69db      	ldr	r3, [r3, #28]
 80101f2:	22a4      	movs	r2, #164	@ 0xa4
 80101f4:	18b9      	adds	r1, r7, r2
 80101f6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	20a0      	movs	r0, #160	@ 0xa0
 8010200:	1839      	adds	r1, r7, r0
 8010202:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	689b      	ldr	r3, [r3, #8]
 801020a:	219c      	movs	r1, #156	@ 0x9c
 801020c:	1879      	adds	r1, r7, r1
 801020e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010210:	0011      	movs	r1, r2
 8010212:	18bb      	adds	r3, r7, r2
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	4a9c      	ldr	r2, [pc, #624]	@ (8010488 <HAL_UART_IRQHandler+0x2a4>)
 8010218:	4013      	ands	r3, r2
 801021a:	2298      	movs	r2, #152	@ 0x98
 801021c:	18bc      	adds	r4, r7, r2
 801021e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8010220:	18bb      	adds	r3, r7, r2
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d114      	bne.n	8010252 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8010228:	187b      	adds	r3, r7, r1
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	2220      	movs	r2, #32
 801022e:	4013      	ands	r3, r2
 8010230:	d00f      	beq.n	8010252 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010232:	183b      	adds	r3, r7, r0
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	2220      	movs	r2, #32
 8010238:	4013      	ands	r3, r2
 801023a:	d00a      	beq.n	8010252 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010240:	2b00      	cmp	r3, #0
 8010242:	d100      	bne.n	8010246 <HAL_UART_IRQHandler+0x62>
 8010244:	e2aa      	b.n	801079c <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801024a:	687a      	ldr	r2, [r7, #4]
 801024c:	0010      	movs	r0, r2
 801024e:	4798      	blx	r3
      }
      return;
 8010250:	e2a4      	b.n	801079c <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010252:	2398      	movs	r3, #152	@ 0x98
 8010254:	18fb      	adds	r3, r7, r3
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d100      	bne.n	801025e <HAL_UART_IRQHandler+0x7a>
 801025c:	e11a      	b.n	8010494 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801025e:	239c      	movs	r3, #156	@ 0x9c
 8010260:	18fb      	adds	r3, r7, r3
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	2201      	movs	r2, #1
 8010266:	4013      	ands	r3, r2
 8010268:	d106      	bne.n	8010278 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801026a:	23a0      	movs	r3, #160	@ 0xa0
 801026c:	18fb      	adds	r3, r7, r3
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	4a86      	ldr	r2, [pc, #536]	@ (801048c <HAL_UART_IRQHandler+0x2a8>)
 8010272:	4013      	ands	r3, r2
 8010274:	d100      	bne.n	8010278 <HAL_UART_IRQHandler+0x94>
 8010276:	e10d      	b.n	8010494 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010278:	23a4      	movs	r3, #164	@ 0xa4
 801027a:	18fb      	adds	r3, r7, r3
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	2201      	movs	r2, #1
 8010280:	4013      	ands	r3, r2
 8010282:	d012      	beq.n	80102aa <HAL_UART_IRQHandler+0xc6>
 8010284:	23a0      	movs	r3, #160	@ 0xa0
 8010286:	18fb      	adds	r3, r7, r3
 8010288:	681a      	ldr	r2, [r3, #0]
 801028a:	2380      	movs	r3, #128	@ 0x80
 801028c:	005b      	lsls	r3, r3, #1
 801028e:	4013      	ands	r3, r2
 8010290:	d00b      	beq.n	80102aa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	2201      	movs	r2, #1
 8010298:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2284      	movs	r2, #132	@ 0x84
 801029e:	589b      	ldr	r3, [r3, r2]
 80102a0:	2201      	movs	r2, #1
 80102a2:	431a      	orrs	r2, r3
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2184      	movs	r1, #132	@ 0x84
 80102a8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102aa:	23a4      	movs	r3, #164	@ 0xa4
 80102ac:	18fb      	adds	r3, r7, r3
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	2202      	movs	r2, #2
 80102b2:	4013      	ands	r3, r2
 80102b4:	d011      	beq.n	80102da <HAL_UART_IRQHandler+0xf6>
 80102b6:	239c      	movs	r3, #156	@ 0x9c
 80102b8:	18fb      	adds	r3, r7, r3
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	2201      	movs	r2, #1
 80102be:	4013      	ands	r3, r2
 80102c0:	d00b      	beq.n	80102da <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2202      	movs	r2, #2
 80102c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2284      	movs	r2, #132	@ 0x84
 80102ce:	589b      	ldr	r3, [r3, r2]
 80102d0:	2204      	movs	r2, #4
 80102d2:	431a      	orrs	r2, r3
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2184      	movs	r1, #132	@ 0x84
 80102d8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80102da:	23a4      	movs	r3, #164	@ 0xa4
 80102dc:	18fb      	adds	r3, r7, r3
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	2204      	movs	r2, #4
 80102e2:	4013      	ands	r3, r2
 80102e4:	d011      	beq.n	801030a <HAL_UART_IRQHandler+0x126>
 80102e6:	239c      	movs	r3, #156	@ 0x9c
 80102e8:	18fb      	adds	r3, r7, r3
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	2201      	movs	r2, #1
 80102ee:	4013      	ands	r3, r2
 80102f0:	d00b      	beq.n	801030a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	2204      	movs	r2, #4
 80102f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2284      	movs	r2, #132	@ 0x84
 80102fe:	589b      	ldr	r3, [r3, r2]
 8010300:	2202      	movs	r2, #2
 8010302:	431a      	orrs	r2, r3
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2184      	movs	r1, #132	@ 0x84
 8010308:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801030a:	23a4      	movs	r3, #164	@ 0xa4
 801030c:	18fb      	adds	r3, r7, r3
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	2208      	movs	r2, #8
 8010312:	4013      	ands	r3, r2
 8010314:	d017      	beq.n	8010346 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010316:	23a0      	movs	r3, #160	@ 0xa0
 8010318:	18fb      	adds	r3, r7, r3
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	2220      	movs	r2, #32
 801031e:	4013      	ands	r3, r2
 8010320:	d105      	bne.n	801032e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8010322:	239c      	movs	r3, #156	@ 0x9c
 8010324:	18fb      	adds	r3, r7, r3
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	2201      	movs	r2, #1
 801032a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801032c:	d00b      	beq.n	8010346 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	2208      	movs	r2, #8
 8010334:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2284      	movs	r2, #132	@ 0x84
 801033a:	589b      	ldr	r3, [r3, r2]
 801033c:	2208      	movs	r2, #8
 801033e:	431a      	orrs	r2, r3
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2184      	movs	r1, #132	@ 0x84
 8010344:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010346:	23a4      	movs	r3, #164	@ 0xa4
 8010348:	18fb      	adds	r3, r7, r3
 801034a:	681a      	ldr	r2, [r3, #0]
 801034c:	2380      	movs	r3, #128	@ 0x80
 801034e:	011b      	lsls	r3, r3, #4
 8010350:	4013      	ands	r3, r2
 8010352:	d013      	beq.n	801037c <HAL_UART_IRQHandler+0x198>
 8010354:	23a0      	movs	r3, #160	@ 0xa0
 8010356:	18fb      	adds	r3, r7, r3
 8010358:	681a      	ldr	r2, [r3, #0]
 801035a:	2380      	movs	r3, #128	@ 0x80
 801035c:	04db      	lsls	r3, r3, #19
 801035e:	4013      	ands	r3, r2
 8010360:	d00c      	beq.n	801037c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2280      	movs	r2, #128	@ 0x80
 8010368:	0112      	lsls	r2, r2, #4
 801036a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2284      	movs	r2, #132	@ 0x84
 8010370:	589b      	ldr	r3, [r3, r2]
 8010372:	2220      	movs	r2, #32
 8010374:	431a      	orrs	r2, r3
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	2184      	movs	r1, #132	@ 0x84
 801037a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2284      	movs	r2, #132	@ 0x84
 8010380:	589b      	ldr	r3, [r3, r2]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d100      	bne.n	8010388 <HAL_UART_IRQHandler+0x1a4>
 8010386:	e20b      	b.n	80107a0 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8010388:	23a4      	movs	r3, #164	@ 0xa4
 801038a:	18fb      	adds	r3, r7, r3
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	2220      	movs	r2, #32
 8010390:	4013      	ands	r3, r2
 8010392:	d00e      	beq.n	80103b2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010394:	23a0      	movs	r3, #160	@ 0xa0
 8010396:	18fb      	adds	r3, r7, r3
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	2220      	movs	r2, #32
 801039c:	4013      	ands	r3, r2
 801039e:	d008      	beq.n	80103b2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d004      	beq.n	80103b2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80103ac:	687a      	ldr	r2, [r7, #4]
 80103ae:	0010      	movs	r0, r2
 80103b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2284      	movs	r2, #132	@ 0x84
 80103b6:	589b      	ldr	r3, [r3, r2]
 80103b8:	2194      	movs	r1, #148	@ 0x94
 80103ba:	187a      	adds	r2, r7, r1
 80103bc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	689b      	ldr	r3, [r3, #8]
 80103c4:	2240      	movs	r2, #64	@ 0x40
 80103c6:	4013      	ands	r3, r2
 80103c8:	2b40      	cmp	r3, #64	@ 0x40
 80103ca:	d004      	beq.n	80103d6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80103cc:	187b      	adds	r3, r7, r1
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	2228      	movs	r2, #40	@ 0x28
 80103d2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80103d4:	d04b      	beq.n	801046e <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	0018      	movs	r0, r3
 80103da:	f000 ff97 	bl	801130c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	689b      	ldr	r3, [r3, #8]
 80103e4:	2240      	movs	r2, #64	@ 0x40
 80103e6:	4013      	ands	r3, r2
 80103e8:	2b40      	cmp	r3, #64	@ 0x40
 80103ea:	d139      	bne.n	8010460 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103ec:	f3ef 8310 	mrs	r3, PRIMASK
 80103f0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80103f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103f4:	2090      	movs	r0, #144	@ 0x90
 80103f6:	183a      	adds	r2, r7, r0
 80103f8:	6013      	str	r3, [r2, #0]
 80103fa:	2301      	movs	r3, #1
 80103fc:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80103fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010400:	f383 8810 	msr	PRIMASK, r3
}
 8010404:	46c0      	nop			@ (mov r8, r8)
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	689a      	ldr	r2, [r3, #8]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	2140      	movs	r1, #64	@ 0x40
 8010412:	438a      	bics	r2, r1
 8010414:	609a      	str	r2, [r3, #8]
 8010416:	183b      	adds	r3, r7, r0
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801041c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801041e:	f383 8810 	msr	PRIMASK, r3
}
 8010422:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010428:	2b00      	cmp	r3, #0
 801042a:	d012      	beq.n	8010452 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010430:	4a17      	ldr	r2, [pc, #92]	@ (8010490 <HAL_UART_IRQHandler+0x2ac>)
 8010432:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010438:	0018      	movs	r0, r3
 801043a:	f7f9 fc93 	bl	8009d64 <HAL_DMA_Abort_IT>
 801043e:	1e03      	subs	r3, r0, #0
 8010440:	d020      	beq.n	8010484 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010446:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801044c:	0018      	movs	r0, r3
 801044e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010450:	e018      	b.n	8010484 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2298      	movs	r2, #152	@ 0x98
 8010456:	589b      	ldr	r3, [r3, r2]
 8010458:	687a      	ldr	r2, [r7, #4]
 801045a:	0010      	movs	r0, r2
 801045c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801045e:	e011      	b.n	8010484 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2298      	movs	r2, #152	@ 0x98
 8010464:	589b      	ldr	r3, [r3, r2]
 8010466:	687a      	ldr	r2, [r7, #4]
 8010468:	0010      	movs	r0, r2
 801046a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801046c:	e00a      	b.n	8010484 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2298      	movs	r2, #152	@ 0x98
 8010472:	589b      	ldr	r3, [r3, r2]
 8010474:	687a      	ldr	r2, [r7, #4]
 8010476:	0010      	movs	r0, r2
 8010478:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2284      	movs	r2, #132	@ 0x84
 801047e:	2100      	movs	r1, #0
 8010480:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8010482:	e18d      	b.n	80107a0 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010484:	46c0      	nop			@ (mov r8, r8)
    return;
 8010486:	e18b      	b.n	80107a0 <HAL_UART_IRQHandler+0x5bc>
 8010488:	0000080f 	.word	0x0000080f
 801048c:	04000120 	.word	0x04000120
 8010490:	08011699 	.word	0x08011699

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010498:	2b01      	cmp	r3, #1
 801049a:	d000      	beq.n	801049e <HAL_UART_IRQHandler+0x2ba>
 801049c:	e13d      	b.n	801071a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801049e:	23a4      	movs	r3, #164	@ 0xa4
 80104a0:	18fb      	adds	r3, r7, r3
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	2210      	movs	r2, #16
 80104a6:	4013      	ands	r3, r2
 80104a8:	d100      	bne.n	80104ac <HAL_UART_IRQHandler+0x2c8>
 80104aa:	e136      	b.n	801071a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80104ac:	23a0      	movs	r3, #160	@ 0xa0
 80104ae:	18fb      	adds	r3, r7, r3
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	2210      	movs	r2, #16
 80104b4:	4013      	ands	r3, r2
 80104b6:	d100      	bne.n	80104ba <HAL_UART_IRQHandler+0x2d6>
 80104b8:	e12f      	b.n	801071a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	2210      	movs	r2, #16
 80104c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	689b      	ldr	r3, [r3, #8]
 80104c8:	2240      	movs	r2, #64	@ 0x40
 80104ca:	4013      	ands	r3, r2
 80104cc:	2b40      	cmp	r3, #64	@ 0x40
 80104ce:	d000      	beq.n	80104d2 <HAL_UART_IRQHandler+0x2ee>
 80104d0:	e0a2      	b.n	8010618 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	685a      	ldr	r2, [r3, #4]
 80104da:	217e      	movs	r1, #126	@ 0x7e
 80104dc:	187b      	adds	r3, r7, r1
 80104de:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80104e0:	187b      	adds	r3, r7, r1
 80104e2:	881b      	ldrh	r3, [r3, #0]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d100      	bne.n	80104ea <HAL_UART_IRQHandler+0x306>
 80104e8:	e15c      	b.n	80107a4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2258      	movs	r2, #88	@ 0x58
 80104ee:	5a9b      	ldrh	r3, [r3, r2]
 80104f0:	187a      	adds	r2, r7, r1
 80104f2:	8812      	ldrh	r2, [r2, #0]
 80104f4:	429a      	cmp	r2, r3
 80104f6:	d300      	bcc.n	80104fa <HAL_UART_IRQHandler+0x316>
 80104f8:	e154      	b.n	80107a4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	187a      	adds	r2, r7, r1
 80104fe:	215a      	movs	r1, #90	@ 0x5a
 8010500:	8812      	ldrh	r2, [r2, #0]
 8010502:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	2220      	movs	r2, #32
 801050e:	4013      	ands	r3, r2
 8010510:	d16f      	bne.n	80105f2 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010512:	f3ef 8310 	mrs	r3, PRIMASK
 8010516:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8010518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801051a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801051c:	2301      	movs	r3, #1
 801051e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010522:	f383 8810 	msr	PRIMASK, r3
}
 8010526:	46c0      	nop			@ (mov r8, r8)
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	49a0      	ldr	r1, [pc, #640]	@ (80107b4 <HAL_UART_IRQHandler+0x5d0>)
 8010534:	400a      	ands	r2, r1
 8010536:	601a      	str	r2, [r3, #0]
 8010538:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801053a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801053c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801053e:	f383 8810 	msr	PRIMASK, r3
}
 8010542:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010544:	f3ef 8310 	mrs	r3, PRIMASK
 8010548:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801054a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801054c:	677b      	str	r3, [r7, #116]	@ 0x74
 801054e:	2301      	movs	r3, #1
 8010550:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010554:	f383 8810 	msr	PRIMASK, r3
}
 8010558:	46c0      	nop			@ (mov r8, r8)
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	689a      	ldr	r2, [r3, #8]
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	2101      	movs	r1, #1
 8010566:	438a      	bics	r2, r1
 8010568:	609a      	str	r2, [r3, #8]
 801056a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801056c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801056e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010570:	f383 8810 	msr	PRIMASK, r3
}
 8010574:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010576:	f3ef 8310 	mrs	r3, PRIMASK
 801057a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801057c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801057e:	673b      	str	r3, [r7, #112]	@ 0x70
 8010580:	2301      	movs	r3, #1
 8010582:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010586:	f383 8810 	msr	PRIMASK, r3
}
 801058a:	46c0      	nop			@ (mov r8, r8)
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	689a      	ldr	r2, [r3, #8]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	2140      	movs	r1, #64	@ 0x40
 8010598:	438a      	bics	r2, r1
 801059a:	609a      	str	r2, [r3, #8]
 801059c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801059e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80105a2:	f383 8810 	msr	PRIMASK, r3
}
 80105a6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2280      	movs	r2, #128	@ 0x80
 80105ac:	2120      	movs	r1, #32
 80105ae:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2200      	movs	r2, #0
 80105b4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105b6:	f3ef 8310 	mrs	r3, PRIMASK
 80105ba:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80105bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80105c0:	2301      	movs	r3, #1
 80105c2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80105c6:	f383 8810 	msr	PRIMASK, r3
}
 80105ca:	46c0      	nop			@ (mov r8, r8)
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	681a      	ldr	r2, [r3, #0]
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	2110      	movs	r1, #16
 80105d8:	438a      	bics	r2, r1
 80105da:	601a      	str	r2, [r3, #0]
 80105dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80105de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80105e2:	f383 8810 	msr	PRIMASK, r3
}
 80105e6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105ec:	0018      	movs	r0, r3
 80105ee:	f7f9 fb79 	bl	8009ce4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2202      	movs	r2, #2
 80105f6:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	22ac      	movs	r2, #172	@ 0xac
 80105fc:	589b      	ldr	r3, [r3, r2]
 80105fe:	687a      	ldr	r2, [r7, #4]
 8010600:	2158      	movs	r1, #88	@ 0x58
 8010602:	5a51      	ldrh	r1, [r2, r1]
 8010604:	687a      	ldr	r2, [r7, #4]
 8010606:	205a      	movs	r0, #90	@ 0x5a
 8010608:	5a12      	ldrh	r2, [r2, r0]
 801060a:	b292      	uxth	r2, r2
 801060c:	1a8a      	subs	r2, r1, r2
 801060e:	b291      	uxth	r1, r2
 8010610:	687a      	ldr	r2, [r7, #4]
 8010612:	0010      	movs	r0, r2
 8010614:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010616:	e0c5      	b.n	80107a4 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2258      	movs	r2, #88	@ 0x58
 801061c:	5a99      	ldrh	r1, [r3, r2]
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	225a      	movs	r2, #90	@ 0x5a
 8010622:	5a9b      	ldrh	r3, [r3, r2]
 8010624:	b29a      	uxth	r2, r3
 8010626:	208e      	movs	r0, #142	@ 0x8e
 8010628:	183b      	adds	r3, r7, r0
 801062a:	1a8a      	subs	r2, r1, r2
 801062c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	225a      	movs	r2, #90	@ 0x5a
 8010632:	5a9b      	ldrh	r3, [r3, r2]
 8010634:	b29b      	uxth	r3, r3
 8010636:	2b00      	cmp	r3, #0
 8010638:	d100      	bne.n	801063c <HAL_UART_IRQHandler+0x458>
 801063a:	e0b5      	b.n	80107a8 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801063c:	183b      	adds	r3, r7, r0
 801063e:	881b      	ldrh	r3, [r3, #0]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d100      	bne.n	8010646 <HAL_UART_IRQHandler+0x462>
 8010644:	e0b0      	b.n	80107a8 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010646:	f3ef 8310 	mrs	r3, PRIMASK
 801064a:	60fb      	str	r3, [r7, #12]
  return(result);
 801064c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801064e:	2488      	movs	r4, #136	@ 0x88
 8010650:	193a      	adds	r2, r7, r4
 8010652:	6013      	str	r3, [r2, #0]
 8010654:	2301      	movs	r3, #1
 8010656:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	f383 8810 	msr	PRIMASK, r3
}
 801065e:	46c0      	nop			@ (mov r8, r8)
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4953      	ldr	r1, [pc, #332]	@ (80107b8 <HAL_UART_IRQHandler+0x5d4>)
 801066c:	400a      	ands	r2, r1
 801066e:	601a      	str	r2, [r3, #0]
 8010670:	193b      	adds	r3, r7, r4
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	f383 8810 	msr	PRIMASK, r3
}
 801067c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801067e:	f3ef 8310 	mrs	r3, PRIMASK
 8010682:	61bb      	str	r3, [r7, #24]
  return(result);
 8010684:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010686:	2484      	movs	r4, #132	@ 0x84
 8010688:	193a      	adds	r2, r7, r4
 801068a:	6013      	str	r3, [r2, #0]
 801068c:	2301      	movs	r3, #1
 801068e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010690:	69fb      	ldr	r3, [r7, #28]
 8010692:	f383 8810 	msr	PRIMASK, r3
}
 8010696:	46c0      	nop			@ (mov r8, r8)
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	689a      	ldr	r2, [r3, #8]
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	2101      	movs	r1, #1
 80106a4:	438a      	bics	r2, r1
 80106a6:	609a      	str	r2, [r3, #8]
 80106a8:	193b      	adds	r3, r7, r4
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106ae:	6a3b      	ldr	r3, [r7, #32]
 80106b0:	f383 8810 	msr	PRIMASK, r3
}
 80106b4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2280      	movs	r2, #128	@ 0x80
 80106ba:	2120      	movs	r1, #32
 80106bc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2200      	movs	r2, #0
 80106c2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2200      	movs	r2, #0
 80106c8:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106ca:	f3ef 8310 	mrs	r3, PRIMASK
 80106ce:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80106d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106d2:	2480      	movs	r4, #128	@ 0x80
 80106d4:	193a      	adds	r2, r7, r4
 80106d6:	6013      	str	r3, [r2, #0]
 80106d8:	2301      	movs	r3, #1
 80106da:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106de:	f383 8810 	msr	PRIMASK, r3
}
 80106e2:	46c0      	nop			@ (mov r8, r8)
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	681a      	ldr	r2, [r3, #0]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	2110      	movs	r1, #16
 80106f0:	438a      	bics	r2, r1
 80106f2:	601a      	str	r2, [r3, #0]
 80106f4:	193b      	adds	r3, r7, r4
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106fc:	f383 8810 	msr	PRIMASK, r3
}
 8010700:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2202      	movs	r2, #2
 8010706:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	22ac      	movs	r2, #172	@ 0xac
 801070c:	589b      	ldr	r3, [r3, r2]
 801070e:	183a      	adds	r2, r7, r0
 8010710:	8811      	ldrh	r1, [r2, #0]
 8010712:	687a      	ldr	r2, [r7, #4]
 8010714:	0010      	movs	r0, r2
 8010716:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010718:	e046      	b.n	80107a8 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801071a:	23a4      	movs	r3, #164	@ 0xa4
 801071c:	18fb      	adds	r3, r7, r3
 801071e:	681a      	ldr	r2, [r3, #0]
 8010720:	2380      	movs	r3, #128	@ 0x80
 8010722:	035b      	lsls	r3, r3, #13
 8010724:	4013      	ands	r3, r2
 8010726:	d012      	beq.n	801074e <HAL_UART_IRQHandler+0x56a>
 8010728:	239c      	movs	r3, #156	@ 0x9c
 801072a:	18fb      	adds	r3, r7, r3
 801072c:	681a      	ldr	r2, [r3, #0]
 801072e:	2380      	movs	r3, #128	@ 0x80
 8010730:	03db      	lsls	r3, r3, #15
 8010732:	4013      	ands	r3, r2
 8010734:	d00b      	beq.n	801074e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	2280      	movs	r2, #128	@ 0x80
 801073c:	0352      	lsls	r2, r2, #13
 801073e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	22a8      	movs	r2, #168	@ 0xa8
 8010744:	589b      	ldr	r3, [r3, r2]
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	0010      	movs	r0, r2
 801074a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801074c:	e02f      	b.n	80107ae <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801074e:	23a4      	movs	r3, #164	@ 0xa4
 8010750:	18fb      	adds	r3, r7, r3
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	2280      	movs	r2, #128	@ 0x80
 8010756:	4013      	ands	r3, r2
 8010758:	d00f      	beq.n	801077a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801075a:	23a0      	movs	r3, #160	@ 0xa0
 801075c:	18fb      	adds	r3, r7, r3
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	2280      	movs	r2, #128	@ 0x80
 8010762:	4013      	ands	r3, r2
 8010764:	d009      	beq.n	801077a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801076a:	2b00      	cmp	r3, #0
 801076c:	d01e      	beq.n	80107ac <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010772:	687a      	ldr	r2, [r7, #4]
 8010774:	0010      	movs	r0, r2
 8010776:	4798      	blx	r3
    }
    return;
 8010778:	e018      	b.n	80107ac <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801077a:	23a4      	movs	r3, #164	@ 0xa4
 801077c:	18fb      	adds	r3, r7, r3
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	2240      	movs	r2, #64	@ 0x40
 8010782:	4013      	ands	r3, r2
 8010784:	d013      	beq.n	80107ae <HAL_UART_IRQHandler+0x5ca>
 8010786:	23a0      	movs	r3, #160	@ 0xa0
 8010788:	18fb      	adds	r3, r7, r3
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	2240      	movs	r2, #64	@ 0x40
 801078e:	4013      	ands	r3, r2
 8010790:	d00d      	beq.n	80107ae <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	0018      	movs	r0, r3
 8010796:	f000 ff98 	bl	80116ca <UART_EndTransmit_IT>
    return;
 801079a:	e008      	b.n	80107ae <HAL_UART_IRQHandler+0x5ca>
      return;
 801079c:	46c0      	nop			@ (mov r8, r8)
 801079e:	e006      	b.n	80107ae <HAL_UART_IRQHandler+0x5ca>
    return;
 80107a0:	46c0      	nop			@ (mov r8, r8)
 80107a2:	e004      	b.n	80107ae <HAL_UART_IRQHandler+0x5ca>
      return;
 80107a4:	46c0      	nop			@ (mov r8, r8)
 80107a6:	e002      	b.n	80107ae <HAL_UART_IRQHandler+0x5ca>
      return;
 80107a8:	46c0      	nop			@ (mov r8, r8)
 80107aa:	e000      	b.n	80107ae <HAL_UART_IRQHandler+0x5ca>
    return;
 80107ac:	46c0      	nop			@ (mov r8, r8)
  }

}
 80107ae:	46bd      	mov	sp, r7
 80107b0:	b02b      	add	sp, #172	@ 0xac
 80107b2:	bd90      	pop	{r4, r7, pc}
 80107b4:	fffffeff 	.word	0xfffffeff
 80107b8:	fffffedf 	.word	0xfffffedf

080107bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80107c4:	46c0      	nop			@ (mov r8, r8)
 80107c6:	46bd      	mov	sp, r7
 80107c8:	b002      	add	sp, #8
 80107ca:	bd80      	pop	{r7, pc}

080107cc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80107d4:	46c0      	nop			@ (mov r8, r8)
 80107d6:	46bd      	mov	sp, r7
 80107d8:	b002      	add	sp, #8
 80107da:	bd80      	pop	{r7, pc}

080107dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b082      	sub	sp, #8
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80107e4:	46c0      	nop			@ (mov r8, r8)
 80107e6:	46bd      	mov	sp, r7
 80107e8:	b002      	add	sp, #8
 80107ea:	bd80      	pop	{r7, pc}

080107ec <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80107f4:	46c0      	nop			@ (mov r8, r8)
 80107f6:	46bd      	mov	sp, r7
 80107f8:	b002      	add	sp, #8
 80107fa:	bd80      	pop	{r7, pc}

080107fc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b082      	sub	sp, #8
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8010804:	46c0      	nop			@ (mov r8, r8)
 8010806:	46bd      	mov	sp, r7
 8010808:	b002      	add	sp, #8
 801080a:	bd80      	pop	{r7, pc}

0801080c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b082      	sub	sp, #8
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8010814:	46c0      	nop			@ (mov r8, r8)
 8010816:	46bd      	mov	sp, r7
 8010818:	b002      	add	sp, #8
 801081a:	bd80      	pop	{r7, pc}

0801081c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b082      	sub	sp, #8
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	000a      	movs	r2, r1
 8010826:	1cbb      	adds	r3, r7, #2
 8010828:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801082a:	46c0      	nop			@ (mov r8, r8)
 801082c:	46bd      	mov	sp, r7
 801082e:	b002      	add	sp, #8
 8010830:	bd80      	pop	{r7, pc}
	...

08010834 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b082      	sub	sp, #8
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2188      	movs	r1, #136	@ 0x88
 8010840:	4a14      	ldr	r2, [pc, #80]	@ (8010894 <UART_InitCallbacksToDefault+0x60>)
 8010842:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	218c      	movs	r1, #140	@ 0x8c
 8010848:	4a13      	ldr	r2, [pc, #76]	@ (8010898 <UART_InitCallbacksToDefault+0x64>)
 801084a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2190      	movs	r1, #144	@ 0x90
 8010850:	4a12      	ldr	r2, [pc, #72]	@ (801089c <UART_InitCallbacksToDefault+0x68>)
 8010852:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2194      	movs	r1, #148	@ 0x94
 8010858:	4a11      	ldr	r2, [pc, #68]	@ (80108a0 <UART_InitCallbacksToDefault+0x6c>)
 801085a:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2198      	movs	r1, #152	@ 0x98
 8010860:	4a10      	ldr	r2, [pc, #64]	@ (80108a4 <UART_InitCallbacksToDefault+0x70>)
 8010862:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	219c      	movs	r1, #156	@ 0x9c
 8010868:	4a0f      	ldr	r2, [pc, #60]	@ (80108a8 <UART_InitCallbacksToDefault+0x74>)
 801086a:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	21a0      	movs	r1, #160	@ 0xa0
 8010870:	4a0e      	ldr	r2, [pc, #56]	@ (80108ac <UART_InitCallbacksToDefault+0x78>)
 8010872:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	21a4      	movs	r1, #164	@ 0xa4
 8010878:	4a0d      	ldr	r2, [pc, #52]	@ (80108b0 <UART_InitCallbacksToDefault+0x7c>)
 801087a:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	21a8      	movs	r1, #168	@ 0xa8
 8010880:	4a0c      	ldr	r2, [pc, #48]	@ (80108b4 <UART_InitCallbacksToDefault+0x80>)
 8010882:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	21ac      	movs	r1, #172	@ 0xac
 8010888:	4a0b      	ldr	r2, [pc, #44]	@ (80108b8 <UART_InitCallbacksToDefault+0x84>)
 801088a:	505a      	str	r2, [r3, r1]

}
 801088c:	46c0      	nop			@ (mov r8, r8)
 801088e:	46bd      	mov	sp, r7
 8010890:	b002      	add	sp, #8
 8010892:	bd80      	pop	{r7, pc}
 8010894:	080107cd 	.word	0x080107cd
 8010898:	080107bd 	.word	0x080107bd
 801089c:	080107dd 	.word	0x080107dd
 80108a0:	080037e5 	.word	0x080037e5
 80108a4:	08003821 	.word	0x08003821
 80108a8:	080107ed 	.word	0x080107ed
 80108ac:	080107fd 	.word	0x080107fd
 80108b0:	0801080d 	.word	0x0801080d
 80108b4:	08011725 	.word	0x08011725
 80108b8:	0801081d 	.word	0x0801081d

080108bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80108bc:	b5b0      	push	{r4, r5, r7, lr}
 80108be:	b08e      	sub	sp, #56	@ 0x38
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80108c4:	231a      	movs	r3, #26
 80108c6:	2218      	movs	r2, #24
 80108c8:	189b      	adds	r3, r3, r2
 80108ca:	19db      	adds	r3, r3, r7
 80108cc:	2200      	movs	r2, #0
 80108ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80108d0:	69fb      	ldr	r3, [r7, #28]
 80108d2:	689a      	ldr	r2, [r3, #8]
 80108d4:	69fb      	ldr	r3, [r7, #28]
 80108d6:	691b      	ldr	r3, [r3, #16]
 80108d8:	431a      	orrs	r2, r3
 80108da:	69fb      	ldr	r3, [r7, #28]
 80108dc:	695b      	ldr	r3, [r3, #20]
 80108de:	431a      	orrs	r2, r3
 80108e0:	69fb      	ldr	r3, [r7, #28]
 80108e2:	69db      	ldr	r3, [r3, #28]
 80108e4:	4313      	orrs	r3, r2
 80108e6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80108e8:	69fb      	ldr	r3, [r7, #28]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	4ac3      	ldr	r2, [pc, #780]	@ (8010bfc <UART_SetConfig+0x340>)
 80108f0:	4013      	ands	r3, r2
 80108f2:	0019      	movs	r1, r3
 80108f4:	69fb      	ldr	r3, [r7, #28]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80108fa:	430a      	orrs	r2, r1
 80108fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80108fe:	69fb      	ldr	r3, [r7, #28]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	4abe      	ldr	r2, [pc, #760]	@ (8010c00 <UART_SetConfig+0x344>)
 8010906:	4013      	ands	r3, r2
 8010908:	0019      	movs	r1, r3
 801090a:	69fb      	ldr	r3, [r7, #28]
 801090c:	68da      	ldr	r2, [r3, #12]
 801090e:	69fb      	ldr	r3, [r7, #28]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	430a      	orrs	r2, r1
 8010914:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010916:	69fb      	ldr	r3, [r7, #28]
 8010918:	699b      	ldr	r3, [r3, #24]
 801091a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801091c:	69fb      	ldr	r3, [r7, #28]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	4ab8      	ldr	r2, [pc, #736]	@ (8010c04 <UART_SetConfig+0x348>)
 8010922:	4293      	cmp	r3, r2
 8010924:	d004      	beq.n	8010930 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010926:	69fb      	ldr	r3, [r7, #28]
 8010928:	6a1b      	ldr	r3, [r3, #32]
 801092a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801092c:	4313      	orrs	r3, r2
 801092e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010930:	69fb      	ldr	r3, [r7, #28]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	689b      	ldr	r3, [r3, #8]
 8010936:	4ab4      	ldr	r2, [pc, #720]	@ (8010c08 <UART_SetConfig+0x34c>)
 8010938:	4013      	ands	r3, r2
 801093a:	0019      	movs	r1, r3
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010942:	430a      	orrs	r2, r1
 8010944:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010946:	69fb      	ldr	r3, [r7, #28]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	4ab0      	ldr	r2, [pc, #704]	@ (8010c0c <UART_SetConfig+0x350>)
 801094c:	4293      	cmp	r3, r2
 801094e:	d131      	bne.n	80109b4 <UART_SetConfig+0xf8>
 8010950:	4baf      	ldr	r3, [pc, #700]	@ (8010c10 <UART_SetConfig+0x354>)
 8010952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010954:	2203      	movs	r2, #3
 8010956:	4013      	ands	r3, r2
 8010958:	2b03      	cmp	r3, #3
 801095a:	d01d      	beq.n	8010998 <UART_SetConfig+0xdc>
 801095c:	d823      	bhi.n	80109a6 <UART_SetConfig+0xea>
 801095e:	2b02      	cmp	r3, #2
 8010960:	d00c      	beq.n	801097c <UART_SetConfig+0xc0>
 8010962:	d820      	bhi.n	80109a6 <UART_SetConfig+0xea>
 8010964:	2b00      	cmp	r3, #0
 8010966:	d002      	beq.n	801096e <UART_SetConfig+0xb2>
 8010968:	2b01      	cmp	r3, #1
 801096a:	d00e      	beq.n	801098a <UART_SetConfig+0xce>
 801096c:	e01b      	b.n	80109a6 <UART_SetConfig+0xea>
 801096e:	231b      	movs	r3, #27
 8010970:	2218      	movs	r2, #24
 8010972:	189b      	adds	r3, r3, r2
 8010974:	19db      	adds	r3, r3, r7
 8010976:	2201      	movs	r2, #1
 8010978:	701a      	strb	r2, [r3, #0]
 801097a:	e0b4      	b.n	8010ae6 <UART_SetConfig+0x22a>
 801097c:	231b      	movs	r3, #27
 801097e:	2218      	movs	r2, #24
 8010980:	189b      	adds	r3, r3, r2
 8010982:	19db      	adds	r3, r3, r7
 8010984:	2202      	movs	r2, #2
 8010986:	701a      	strb	r2, [r3, #0]
 8010988:	e0ad      	b.n	8010ae6 <UART_SetConfig+0x22a>
 801098a:	231b      	movs	r3, #27
 801098c:	2218      	movs	r2, #24
 801098e:	189b      	adds	r3, r3, r2
 8010990:	19db      	adds	r3, r3, r7
 8010992:	2204      	movs	r2, #4
 8010994:	701a      	strb	r2, [r3, #0]
 8010996:	e0a6      	b.n	8010ae6 <UART_SetConfig+0x22a>
 8010998:	231b      	movs	r3, #27
 801099a:	2218      	movs	r2, #24
 801099c:	189b      	adds	r3, r3, r2
 801099e:	19db      	adds	r3, r3, r7
 80109a0:	2208      	movs	r2, #8
 80109a2:	701a      	strb	r2, [r3, #0]
 80109a4:	e09f      	b.n	8010ae6 <UART_SetConfig+0x22a>
 80109a6:	231b      	movs	r3, #27
 80109a8:	2218      	movs	r2, #24
 80109aa:	189b      	adds	r3, r3, r2
 80109ac:	19db      	adds	r3, r3, r7
 80109ae:	2210      	movs	r2, #16
 80109b0:	701a      	strb	r2, [r3, #0]
 80109b2:	e098      	b.n	8010ae6 <UART_SetConfig+0x22a>
 80109b4:	69fb      	ldr	r3, [r7, #28]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	4a96      	ldr	r2, [pc, #600]	@ (8010c14 <UART_SetConfig+0x358>)
 80109ba:	4293      	cmp	r3, r2
 80109bc:	d131      	bne.n	8010a22 <UART_SetConfig+0x166>
 80109be:	4b94      	ldr	r3, [pc, #592]	@ (8010c10 <UART_SetConfig+0x354>)
 80109c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80109c2:	220c      	movs	r2, #12
 80109c4:	4013      	ands	r3, r2
 80109c6:	2b0c      	cmp	r3, #12
 80109c8:	d01d      	beq.n	8010a06 <UART_SetConfig+0x14a>
 80109ca:	d823      	bhi.n	8010a14 <UART_SetConfig+0x158>
 80109cc:	2b08      	cmp	r3, #8
 80109ce:	d00c      	beq.n	80109ea <UART_SetConfig+0x12e>
 80109d0:	d820      	bhi.n	8010a14 <UART_SetConfig+0x158>
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d002      	beq.n	80109dc <UART_SetConfig+0x120>
 80109d6:	2b04      	cmp	r3, #4
 80109d8:	d00e      	beq.n	80109f8 <UART_SetConfig+0x13c>
 80109da:	e01b      	b.n	8010a14 <UART_SetConfig+0x158>
 80109dc:	231b      	movs	r3, #27
 80109de:	2218      	movs	r2, #24
 80109e0:	189b      	adds	r3, r3, r2
 80109e2:	19db      	adds	r3, r3, r7
 80109e4:	2200      	movs	r2, #0
 80109e6:	701a      	strb	r2, [r3, #0]
 80109e8:	e07d      	b.n	8010ae6 <UART_SetConfig+0x22a>
 80109ea:	231b      	movs	r3, #27
 80109ec:	2218      	movs	r2, #24
 80109ee:	189b      	adds	r3, r3, r2
 80109f0:	19db      	adds	r3, r3, r7
 80109f2:	2202      	movs	r2, #2
 80109f4:	701a      	strb	r2, [r3, #0]
 80109f6:	e076      	b.n	8010ae6 <UART_SetConfig+0x22a>
 80109f8:	231b      	movs	r3, #27
 80109fa:	2218      	movs	r2, #24
 80109fc:	189b      	adds	r3, r3, r2
 80109fe:	19db      	adds	r3, r3, r7
 8010a00:	2204      	movs	r2, #4
 8010a02:	701a      	strb	r2, [r3, #0]
 8010a04:	e06f      	b.n	8010ae6 <UART_SetConfig+0x22a>
 8010a06:	231b      	movs	r3, #27
 8010a08:	2218      	movs	r2, #24
 8010a0a:	189b      	adds	r3, r3, r2
 8010a0c:	19db      	adds	r3, r3, r7
 8010a0e:	2208      	movs	r2, #8
 8010a10:	701a      	strb	r2, [r3, #0]
 8010a12:	e068      	b.n	8010ae6 <UART_SetConfig+0x22a>
 8010a14:	231b      	movs	r3, #27
 8010a16:	2218      	movs	r2, #24
 8010a18:	189b      	adds	r3, r3, r2
 8010a1a:	19db      	adds	r3, r3, r7
 8010a1c:	2210      	movs	r2, #16
 8010a1e:	701a      	strb	r2, [r3, #0]
 8010a20:	e061      	b.n	8010ae6 <UART_SetConfig+0x22a>
 8010a22:	69fb      	ldr	r3, [r7, #28]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	4a7c      	ldr	r2, [pc, #496]	@ (8010c18 <UART_SetConfig+0x35c>)
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	d106      	bne.n	8010a3a <UART_SetConfig+0x17e>
 8010a2c:	231b      	movs	r3, #27
 8010a2e:	2218      	movs	r2, #24
 8010a30:	189b      	adds	r3, r3, r2
 8010a32:	19db      	adds	r3, r3, r7
 8010a34:	2200      	movs	r2, #0
 8010a36:	701a      	strb	r2, [r3, #0]
 8010a38:	e055      	b.n	8010ae6 <UART_SetConfig+0x22a>
 8010a3a:	69fb      	ldr	r3, [r7, #28]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	4a77      	ldr	r2, [pc, #476]	@ (8010c1c <UART_SetConfig+0x360>)
 8010a40:	4293      	cmp	r3, r2
 8010a42:	d106      	bne.n	8010a52 <UART_SetConfig+0x196>
 8010a44:	231b      	movs	r3, #27
 8010a46:	2218      	movs	r2, #24
 8010a48:	189b      	adds	r3, r3, r2
 8010a4a:	19db      	adds	r3, r3, r7
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	701a      	strb	r2, [r3, #0]
 8010a50:	e049      	b.n	8010ae6 <UART_SetConfig+0x22a>
 8010a52:	69fb      	ldr	r3, [r7, #28]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	4a6b      	ldr	r2, [pc, #428]	@ (8010c04 <UART_SetConfig+0x348>)
 8010a58:	4293      	cmp	r3, r2
 8010a5a:	d13e      	bne.n	8010ada <UART_SetConfig+0x21e>
 8010a5c:	4b6c      	ldr	r3, [pc, #432]	@ (8010c10 <UART_SetConfig+0x354>)
 8010a5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010a60:	23c0      	movs	r3, #192	@ 0xc0
 8010a62:	011b      	lsls	r3, r3, #4
 8010a64:	4013      	ands	r3, r2
 8010a66:	22c0      	movs	r2, #192	@ 0xc0
 8010a68:	0112      	lsls	r2, r2, #4
 8010a6a:	4293      	cmp	r3, r2
 8010a6c:	d027      	beq.n	8010abe <UART_SetConfig+0x202>
 8010a6e:	22c0      	movs	r2, #192	@ 0xc0
 8010a70:	0112      	lsls	r2, r2, #4
 8010a72:	4293      	cmp	r3, r2
 8010a74:	d82a      	bhi.n	8010acc <UART_SetConfig+0x210>
 8010a76:	2280      	movs	r2, #128	@ 0x80
 8010a78:	0112      	lsls	r2, r2, #4
 8010a7a:	4293      	cmp	r3, r2
 8010a7c:	d011      	beq.n	8010aa2 <UART_SetConfig+0x1e6>
 8010a7e:	2280      	movs	r2, #128	@ 0x80
 8010a80:	0112      	lsls	r2, r2, #4
 8010a82:	4293      	cmp	r3, r2
 8010a84:	d822      	bhi.n	8010acc <UART_SetConfig+0x210>
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d004      	beq.n	8010a94 <UART_SetConfig+0x1d8>
 8010a8a:	2280      	movs	r2, #128	@ 0x80
 8010a8c:	00d2      	lsls	r2, r2, #3
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	d00e      	beq.n	8010ab0 <UART_SetConfig+0x1f4>
 8010a92:	e01b      	b.n	8010acc <UART_SetConfig+0x210>
 8010a94:	231b      	movs	r3, #27
 8010a96:	2218      	movs	r2, #24
 8010a98:	189b      	adds	r3, r3, r2
 8010a9a:	19db      	adds	r3, r3, r7
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	701a      	strb	r2, [r3, #0]
 8010aa0:	e021      	b.n	8010ae6 <UART_SetConfig+0x22a>
 8010aa2:	231b      	movs	r3, #27
 8010aa4:	2218      	movs	r2, #24
 8010aa6:	189b      	adds	r3, r3, r2
 8010aa8:	19db      	adds	r3, r3, r7
 8010aaa:	2202      	movs	r2, #2
 8010aac:	701a      	strb	r2, [r3, #0]
 8010aae:	e01a      	b.n	8010ae6 <UART_SetConfig+0x22a>
 8010ab0:	231b      	movs	r3, #27
 8010ab2:	2218      	movs	r2, #24
 8010ab4:	189b      	adds	r3, r3, r2
 8010ab6:	19db      	adds	r3, r3, r7
 8010ab8:	2204      	movs	r2, #4
 8010aba:	701a      	strb	r2, [r3, #0]
 8010abc:	e013      	b.n	8010ae6 <UART_SetConfig+0x22a>
 8010abe:	231b      	movs	r3, #27
 8010ac0:	2218      	movs	r2, #24
 8010ac2:	189b      	adds	r3, r3, r2
 8010ac4:	19db      	adds	r3, r3, r7
 8010ac6:	2208      	movs	r2, #8
 8010ac8:	701a      	strb	r2, [r3, #0]
 8010aca:	e00c      	b.n	8010ae6 <UART_SetConfig+0x22a>
 8010acc:	231b      	movs	r3, #27
 8010ace:	2218      	movs	r2, #24
 8010ad0:	189b      	adds	r3, r3, r2
 8010ad2:	19db      	adds	r3, r3, r7
 8010ad4:	2210      	movs	r2, #16
 8010ad6:	701a      	strb	r2, [r3, #0]
 8010ad8:	e005      	b.n	8010ae6 <UART_SetConfig+0x22a>
 8010ada:	231b      	movs	r3, #27
 8010adc:	2218      	movs	r2, #24
 8010ade:	189b      	adds	r3, r3, r2
 8010ae0:	19db      	adds	r3, r3, r7
 8010ae2:	2210      	movs	r2, #16
 8010ae4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010ae6:	69fb      	ldr	r3, [r7, #28]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	4a46      	ldr	r2, [pc, #280]	@ (8010c04 <UART_SetConfig+0x348>)
 8010aec:	4293      	cmp	r3, r2
 8010aee:	d000      	beq.n	8010af2 <UART_SetConfig+0x236>
 8010af0:	e09a      	b.n	8010c28 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010af2:	231b      	movs	r3, #27
 8010af4:	2218      	movs	r2, #24
 8010af6:	189b      	adds	r3, r3, r2
 8010af8:	19db      	adds	r3, r3, r7
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	2b08      	cmp	r3, #8
 8010afe:	d01d      	beq.n	8010b3c <UART_SetConfig+0x280>
 8010b00:	dc20      	bgt.n	8010b44 <UART_SetConfig+0x288>
 8010b02:	2b04      	cmp	r3, #4
 8010b04:	d015      	beq.n	8010b32 <UART_SetConfig+0x276>
 8010b06:	dc1d      	bgt.n	8010b44 <UART_SetConfig+0x288>
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d002      	beq.n	8010b12 <UART_SetConfig+0x256>
 8010b0c:	2b02      	cmp	r3, #2
 8010b0e:	d005      	beq.n	8010b1c <UART_SetConfig+0x260>
 8010b10:	e018      	b.n	8010b44 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010b12:	f7fe fc51 	bl	800f3b8 <HAL_RCC_GetPCLK1Freq>
 8010b16:	0003      	movs	r3, r0
 8010b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010b1a:	e01c      	b.n	8010b56 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b1c:	4b3c      	ldr	r3, [pc, #240]	@ (8010c10 <UART_SetConfig+0x354>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	2210      	movs	r2, #16
 8010b22:	4013      	ands	r3, r2
 8010b24:	d002      	beq.n	8010b2c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8010b26:	4b3e      	ldr	r3, [pc, #248]	@ (8010c20 <UART_SetConfig+0x364>)
 8010b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010b2a:	e014      	b.n	8010b56 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8010b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8010c24 <UART_SetConfig+0x368>)
 8010b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010b30:	e011      	b.n	8010b56 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010b32:	f7fe fb91 	bl	800f258 <HAL_RCC_GetSysClockFreq>
 8010b36:	0003      	movs	r3, r0
 8010b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010b3a:	e00c      	b.n	8010b56 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010b3c:	2380      	movs	r3, #128	@ 0x80
 8010b3e:	021b      	lsls	r3, r3, #8
 8010b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010b42:	e008      	b.n	8010b56 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8010b44:	2300      	movs	r3, #0
 8010b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010b48:	231a      	movs	r3, #26
 8010b4a:	2218      	movs	r2, #24
 8010b4c:	189b      	adds	r3, r3, r2
 8010b4e:	19db      	adds	r3, r3, r7
 8010b50:	2201      	movs	r2, #1
 8010b52:	701a      	strb	r2, [r3, #0]
        break;
 8010b54:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d100      	bne.n	8010b5e <UART_SetConfig+0x2a2>
 8010b5c:	e133      	b.n	8010dc6 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010b5e:	69fb      	ldr	r3, [r7, #28]
 8010b60:	685a      	ldr	r2, [r3, #4]
 8010b62:	0013      	movs	r3, r2
 8010b64:	005b      	lsls	r3, r3, #1
 8010b66:	189b      	adds	r3, r3, r2
 8010b68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d305      	bcc.n	8010b7a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8010b6e:	69fb      	ldr	r3, [r7, #28]
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010b74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d906      	bls.n	8010b88 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8010b7a:	231a      	movs	r3, #26
 8010b7c:	2218      	movs	r2, #24
 8010b7e:	189b      	adds	r3, r3, r2
 8010b80:	19db      	adds	r3, r3, r7
 8010b82:	2201      	movs	r2, #1
 8010b84:	701a      	strb	r2, [r3, #0]
 8010b86:	e11e      	b.n	8010dc6 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8010b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b8a:	613b      	str	r3, [r7, #16]
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	617b      	str	r3, [r7, #20]
 8010b90:	6939      	ldr	r1, [r7, #16]
 8010b92:	697a      	ldr	r2, [r7, #20]
 8010b94:	000b      	movs	r3, r1
 8010b96:	0e1b      	lsrs	r3, r3, #24
 8010b98:	0010      	movs	r0, r2
 8010b9a:	0205      	lsls	r5, r0, #8
 8010b9c:	431d      	orrs	r5, r3
 8010b9e:	000b      	movs	r3, r1
 8010ba0:	021c      	lsls	r4, r3, #8
 8010ba2:	69fb      	ldr	r3, [r7, #28]
 8010ba4:	685b      	ldr	r3, [r3, #4]
 8010ba6:	085b      	lsrs	r3, r3, #1
 8010ba8:	60bb      	str	r3, [r7, #8]
 8010baa:	2300      	movs	r3, #0
 8010bac:	60fb      	str	r3, [r7, #12]
 8010bae:	68b8      	ldr	r0, [r7, #8]
 8010bb0:	68f9      	ldr	r1, [r7, #12]
 8010bb2:	1900      	adds	r0, r0, r4
 8010bb4:	4169      	adcs	r1, r5
 8010bb6:	69fb      	ldr	r3, [r7, #28]
 8010bb8:	685b      	ldr	r3, [r3, #4]
 8010bba:	603b      	str	r3, [r7, #0]
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	607b      	str	r3, [r7, #4]
 8010bc0:	683a      	ldr	r2, [r7, #0]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f7ef fcaa 	bl	800051c <__aeabi_uldivmod>
 8010bc8:	0002      	movs	r2, r0
 8010bca:	000b      	movs	r3, r1
 8010bcc:	0013      	movs	r3, r2
 8010bce:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010bd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010bd2:	23c0      	movs	r3, #192	@ 0xc0
 8010bd4:	009b      	lsls	r3, r3, #2
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	d309      	bcc.n	8010bee <UART_SetConfig+0x332>
 8010bda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010bdc:	2380      	movs	r3, #128	@ 0x80
 8010bde:	035b      	lsls	r3, r3, #13
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d204      	bcs.n	8010bee <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8010be4:	69fb      	ldr	r3, [r7, #28]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010bea:	60da      	str	r2, [r3, #12]
 8010bec:	e0eb      	b.n	8010dc6 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8010bee:	231a      	movs	r3, #26
 8010bf0:	2218      	movs	r2, #24
 8010bf2:	189b      	adds	r3, r3, r2
 8010bf4:	19db      	adds	r3, r3, r7
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	701a      	strb	r2, [r3, #0]
 8010bfa:	e0e4      	b.n	8010dc6 <UART_SetConfig+0x50a>
 8010bfc:	efff69f3 	.word	0xefff69f3
 8010c00:	ffffcfff 	.word	0xffffcfff
 8010c04:	40004800 	.word	0x40004800
 8010c08:	fffff4ff 	.word	0xfffff4ff
 8010c0c:	40013800 	.word	0x40013800
 8010c10:	40021000 	.word	0x40021000
 8010c14:	40004400 	.word	0x40004400
 8010c18:	40004c00 	.word	0x40004c00
 8010c1c:	40005000 	.word	0x40005000
 8010c20:	003d0900 	.word	0x003d0900
 8010c24:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010c28:	69fb      	ldr	r3, [r7, #28]
 8010c2a:	69da      	ldr	r2, [r3, #28]
 8010c2c:	2380      	movs	r3, #128	@ 0x80
 8010c2e:	021b      	lsls	r3, r3, #8
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d000      	beq.n	8010c36 <UART_SetConfig+0x37a>
 8010c34:	e070      	b.n	8010d18 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8010c36:	231b      	movs	r3, #27
 8010c38:	2218      	movs	r2, #24
 8010c3a:	189b      	adds	r3, r3, r2
 8010c3c:	19db      	adds	r3, r3, r7
 8010c3e:	781b      	ldrb	r3, [r3, #0]
 8010c40:	2b08      	cmp	r3, #8
 8010c42:	d822      	bhi.n	8010c8a <UART_SetConfig+0x3ce>
 8010c44:	009a      	lsls	r2, r3, #2
 8010c46:	4b67      	ldr	r3, [pc, #412]	@ (8010de4 <UART_SetConfig+0x528>)
 8010c48:	18d3      	adds	r3, r2, r3
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c4e:	f7fe fbb3 	bl	800f3b8 <HAL_RCC_GetPCLK1Freq>
 8010c52:	0003      	movs	r3, r0
 8010c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010c56:	e021      	b.n	8010c9c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010c58:	f7fe fbc4 	bl	800f3e4 <HAL_RCC_GetPCLK2Freq>
 8010c5c:	0003      	movs	r3, r0
 8010c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010c60:	e01c      	b.n	8010c9c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010c62:	4b61      	ldr	r3, [pc, #388]	@ (8010de8 <UART_SetConfig+0x52c>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	2210      	movs	r2, #16
 8010c68:	4013      	ands	r3, r2
 8010c6a:	d002      	beq.n	8010c72 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8010c6c:	4b5f      	ldr	r3, [pc, #380]	@ (8010dec <UART_SetConfig+0x530>)
 8010c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010c70:	e014      	b.n	8010c9c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8010c72:	4b5f      	ldr	r3, [pc, #380]	@ (8010df0 <UART_SetConfig+0x534>)
 8010c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010c76:	e011      	b.n	8010c9c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010c78:	f7fe faee 	bl	800f258 <HAL_RCC_GetSysClockFreq>
 8010c7c:	0003      	movs	r3, r0
 8010c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010c80:	e00c      	b.n	8010c9c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c82:	2380      	movs	r3, #128	@ 0x80
 8010c84:	021b      	lsls	r3, r3, #8
 8010c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010c88:	e008      	b.n	8010c9c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010c8e:	231a      	movs	r3, #26
 8010c90:	2218      	movs	r2, #24
 8010c92:	189b      	adds	r3, r3, r2
 8010c94:	19db      	adds	r3, r3, r7
 8010c96:	2201      	movs	r2, #1
 8010c98:	701a      	strb	r2, [r3, #0]
        break;
 8010c9a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d100      	bne.n	8010ca4 <UART_SetConfig+0x3e8>
 8010ca2:	e090      	b.n	8010dc6 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ca6:	005a      	lsls	r2, r3, #1
 8010ca8:	69fb      	ldr	r3, [r7, #28]
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	085b      	lsrs	r3, r3, #1
 8010cae:	18d2      	adds	r2, r2, r3
 8010cb0:	69fb      	ldr	r3, [r7, #28]
 8010cb2:	685b      	ldr	r3, [r3, #4]
 8010cb4:	0019      	movs	r1, r3
 8010cb6:	0010      	movs	r0, r2
 8010cb8:	f7ef fa42 	bl	8000140 <__udivsi3>
 8010cbc:	0003      	movs	r3, r0
 8010cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cc2:	2b0f      	cmp	r3, #15
 8010cc4:	d921      	bls.n	8010d0a <UART_SetConfig+0x44e>
 8010cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010cc8:	2380      	movs	r3, #128	@ 0x80
 8010cca:	025b      	lsls	r3, r3, #9
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d21c      	bcs.n	8010d0a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cd2:	b29a      	uxth	r2, r3
 8010cd4:	200e      	movs	r0, #14
 8010cd6:	2418      	movs	r4, #24
 8010cd8:	1903      	adds	r3, r0, r4
 8010cda:	19db      	adds	r3, r3, r7
 8010cdc:	210f      	movs	r1, #15
 8010cde:	438a      	bics	r2, r1
 8010ce0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ce4:	085b      	lsrs	r3, r3, #1
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	2207      	movs	r2, #7
 8010cea:	4013      	ands	r3, r2
 8010cec:	b299      	uxth	r1, r3
 8010cee:	1903      	adds	r3, r0, r4
 8010cf0:	19db      	adds	r3, r3, r7
 8010cf2:	1902      	adds	r2, r0, r4
 8010cf4:	19d2      	adds	r2, r2, r7
 8010cf6:	8812      	ldrh	r2, [r2, #0]
 8010cf8:	430a      	orrs	r2, r1
 8010cfa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8010cfc:	69fb      	ldr	r3, [r7, #28]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	1902      	adds	r2, r0, r4
 8010d02:	19d2      	adds	r2, r2, r7
 8010d04:	8812      	ldrh	r2, [r2, #0]
 8010d06:	60da      	str	r2, [r3, #12]
 8010d08:	e05d      	b.n	8010dc6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8010d0a:	231a      	movs	r3, #26
 8010d0c:	2218      	movs	r2, #24
 8010d0e:	189b      	adds	r3, r3, r2
 8010d10:	19db      	adds	r3, r3, r7
 8010d12:	2201      	movs	r2, #1
 8010d14:	701a      	strb	r2, [r3, #0]
 8010d16:	e056      	b.n	8010dc6 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010d18:	231b      	movs	r3, #27
 8010d1a:	2218      	movs	r2, #24
 8010d1c:	189b      	adds	r3, r3, r2
 8010d1e:	19db      	adds	r3, r3, r7
 8010d20:	781b      	ldrb	r3, [r3, #0]
 8010d22:	2b08      	cmp	r3, #8
 8010d24:	d822      	bhi.n	8010d6c <UART_SetConfig+0x4b0>
 8010d26:	009a      	lsls	r2, r3, #2
 8010d28:	4b32      	ldr	r3, [pc, #200]	@ (8010df4 <UART_SetConfig+0x538>)
 8010d2a:	18d3      	adds	r3, r2, r3
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d30:	f7fe fb42 	bl	800f3b8 <HAL_RCC_GetPCLK1Freq>
 8010d34:	0003      	movs	r3, r0
 8010d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010d38:	e021      	b.n	8010d7e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d3a:	f7fe fb53 	bl	800f3e4 <HAL_RCC_GetPCLK2Freq>
 8010d3e:	0003      	movs	r3, r0
 8010d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010d42:	e01c      	b.n	8010d7e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d44:	4b28      	ldr	r3, [pc, #160]	@ (8010de8 <UART_SetConfig+0x52c>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	2210      	movs	r2, #16
 8010d4a:	4013      	ands	r3, r2
 8010d4c:	d002      	beq.n	8010d54 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8010d4e:	4b27      	ldr	r3, [pc, #156]	@ (8010dec <UART_SetConfig+0x530>)
 8010d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010d52:	e014      	b.n	8010d7e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8010d54:	4b26      	ldr	r3, [pc, #152]	@ (8010df0 <UART_SetConfig+0x534>)
 8010d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010d58:	e011      	b.n	8010d7e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010d5a:	f7fe fa7d 	bl	800f258 <HAL_RCC_GetSysClockFreq>
 8010d5e:	0003      	movs	r3, r0
 8010d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010d62:	e00c      	b.n	8010d7e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d64:	2380      	movs	r3, #128	@ 0x80
 8010d66:	021b      	lsls	r3, r3, #8
 8010d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010d6a:	e008      	b.n	8010d7e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010d70:	231a      	movs	r3, #26
 8010d72:	2218      	movs	r2, #24
 8010d74:	189b      	adds	r3, r3, r2
 8010d76:	19db      	adds	r3, r3, r7
 8010d78:	2201      	movs	r2, #1
 8010d7a:	701a      	strb	r2, [r3, #0]
        break;
 8010d7c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8010d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d020      	beq.n	8010dc6 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010d84:	69fb      	ldr	r3, [r7, #28]
 8010d86:	685b      	ldr	r3, [r3, #4]
 8010d88:	085a      	lsrs	r2, r3, #1
 8010d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d8c:	18d2      	adds	r2, r2, r3
 8010d8e:	69fb      	ldr	r3, [r7, #28]
 8010d90:	685b      	ldr	r3, [r3, #4]
 8010d92:	0019      	movs	r1, r3
 8010d94:	0010      	movs	r0, r2
 8010d96:	f7ef f9d3 	bl	8000140 <__udivsi3>
 8010d9a:	0003      	movs	r3, r0
 8010d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010da0:	2b0f      	cmp	r3, #15
 8010da2:	d90a      	bls.n	8010dba <UART_SetConfig+0x4fe>
 8010da4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010da6:	2380      	movs	r3, #128	@ 0x80
 8010da8:	025b      	lsls	r3, r3, #9
 8010daa:	429a      	cmp	r2, r3
 8010dac:	d205      	bcs.n	8010dba <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010db0:	b29a      	uxth	r2, r3
 8010db2:	69fb      	ldr	r3, [r7, #28]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	60da      	str	r2, [r3, #12]
 8010db8:	e005      	b.n	8010dc6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8010dba:	231a      	movs	r3, #26
 8010dbc:	2218      	movs	r2, #24
 8010dbe:	189b      	adds	r3, r3, r2
 8010dc0:	19db      	adds	r3, r3, r7
 8010dc2:	2201      	movs	r2, #1
 8010dc4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010dc6:	69fb      	ldr	r3, [r7, #28]
 8010dc8:	2200      	movs	r2, #0
 8010dca:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8010dcc:	69fb      	ldr	r3, [r7, #28]
 8010dce:	2200      	movs	r2, #0
 8010dd0:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8010dd2:	231a      	movs	r3, #26
 8010dd4:	2218      	movs	r2, #24
 8010dd6:	189b      	adds	r3, r3, r2
 8010dd8:	19db      	adds	r3, r3, r7
 8010dda:	781b      	ldrb	r3, [r3, #0]
}
 8010ddc:	0018      	movs	r0, r3
 8010dde:	46bd      	mov	sp, r7
 8010de0:	b00e      	add	sp, #56	@ 0x38
 8010de2:	bdb0      	pop	{r4, r5, r7, pc}
 8010de4:	0801a234 	.word	0x0801a234
 8010de8:	40021000 	.word	0x40021000
 8010dec:	003d0900 	.word	0x003d0900
 8010df0:	00f42400 	.word	0x00f42400
 8010df4:	0801a258 	.word	0x0801a258

08010df8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b082      	sub	sp, #8
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e04:	2201      	movs	r2, #1
 8010e06:	4013      	ands	r3, r2
 8010e08:	d00b      	beq.n	8010e22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	685b      	ldr	r3, [r3, #4]
 8010e10:	4a4a      	ldr	r2, [pc, #296]	@ (8010f3c <UART_AdvFeatureConfig+0x144>)
 8010e12:	4013      	ands	r3, r2
 8010e14:	0019      	movs	r1, r3
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	430a      	orrs	r2, r1
 8010e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e26:	2202      	movs	r2, #2
 8010e28:	4013      	ands	r3, r2
 8010e2a:	d00b      	beq.n	8010e44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	685b      	ldr	r3, [r3, #4]
 8010e32:	4a43      	ldr	r2, [pc, #268]	@ (8010f40 <UART_AdvFeatureConfig+0x148>)
 8010e34:	4013      	ands	r3, r2
 8010e36:	0019      	movs	r1, r3
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	430a      	orrs	r2, r1
 8010e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e48:	2204      	movs	r2, #4
 8010e4a:	4013      	ands	r3, r2
 8010e4c:	d00b      	beq.n	8010e66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	685b      	ldr	r3, [r3, #4]
 8010e54:	4a3b      	ldr	r2, [pc, #236]	@ (8010f44 <UART_AdvFeatureConfig+0x14c>)
 8010e56:	4013      	ands	r3, r2
 8010e58:	0019      	movs	r1, r3
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	430a      	orrs	r2, r1
 8010e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e6a:	2208      	movs	r2, #8
 8010e6c:	4013      	ands	r3, r2
 8010e6e:	d00b      	beq.n	8010e88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	685b      	ldr	r3, [r3, #4]
 8010e76:	4a34      	ldr	r2, [pc, #208]	@ (8010f48 <UART_AdvFeatureConfig+0x150>)
 8010e78:	4013      	ands	r3, r2
 8010e7a:	0019      	movs	r1, r3
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	430a      	orrs	r2, r1
 8010e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e8c:	2210      	movs	r2, #16
 8010e8e:	4013      	ands	r3, r2
 8010e90:	d00b      	beq.n	8010eaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	689b      	ldr	r3, [r3, #8]
 8010e98:	4a2c      	ldr	r2, [pc, #176]	@ (8010f4c <UART_AdvFeatureConfig+0x154>)
 8010e9a:	4013      	ands	r3, r2
 8010e9c:	0019      	movs	r1, r3
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	430a      	orrs	r2, r1
 8010ea8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010eae:	2220      	movs	r2, #32
 8010eb0:	4013      	ands	r3, r2
 8010eb2:	d00b      	beq.n	8010ecc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	689b      	ldr	r3, [r3, #8]
 8010eba:	4a25      	ldr	r2, [pc, #148]	@ (8010f50 <UART_AdvFeatureConfig+0x158>)
 8010ebc:	4013      	ands	r3, r2
 8010ebe:	0019      	movs	r1, r3
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	430a      	orrs	r2, r1
 8010eca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ed0:	2240      	movs	r2, #64	@ 0x40
 8010ed2:	4013      	ands	r3, r2
 8010ed4:	d01d      	beq.n	8010f12 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	4a1d      	ldr	r2, [pc, #116]	@ (8010f54 <UART_AdvFeatureConfig+0x15c>)
 8010ede:	4013      	ands	r3, r2
 8010ee0:	0019      	movs	r1, r3
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	430a      	orrs	r2, r1
 8010eec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010ef2:	2380      	movs	r3, #128	@ 0x80
 8010ef4:	035b      	lsls	r3, r3, #13
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d10b      	bne.n	8010f12 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	685b      	ldr	r3, [r3, #4]
 8010f00:	4a15      	ldr	r2, [pc, #84]	@ (8010f58 <UART_AdvFeatureConfig+0x160>)
 8010f02:	4013      	ands	r3, r2
 8010f04:	0019      	movs	r1, r3
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	430a      	orrs	r2, r1
 8010f10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f16:	2280      	movs	r2, #128	@ 0x80
 8010f18:	4013      	ands	r3, r2
 8010f1a:	d00b      	beq.n	8010f34 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	685b      	ldr	r3, [r3, #4]
 8010f22:	4a0e      	ldr	r2, [pc, #56]	@ (8010f5c <UART_AdvFeatureConfig+0x164>)
 8010f24:	4013      	ands	r3, r2
 8010f26:	0019      	movs	r1, r3
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	430a      	orrs	r2, r1
 8010f32:	605a      	str	r2, [r3, #4]
  }
}
 8010f34:	46c0      	nop			@ (mov r8, r8)
 8010f36:	46bd      	mov	sp, r7
 8010f38:	b002      	add	sp, #8
 8010f3a:	bd80      	pop	{r7, pc}
 8010f3c:	fffdffff 	.word	0xfffdffff
 8010f40:	fffeffff 	.word	0xfffeffff
 8010f44:	fffbffff 	.word	0xfffbffff
 8010f48:	ffff7fff 	.word	0xffff7fff
 8010f4c:	ffffefff 	.word	0xffffefff
 8010f50:	ffffdfff 	.word	0xffffdfff
 8010f54:	ffefffff 	.word	0xffefffff
 8010f58:	ff9fffff 	.word	0xff9fffff
 8010f5c:	fff7ffff 	.word	0xfff7ffff

08010f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b092      	sub	sp, #72	@ 0x48
 8010f64:	af02      	add	r7, sp, #8
 8010f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2284      	movs	r2, #132	@ 0x84
 8010f6c:	2100      	movs	r1, #0
 8010f6e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010f70:	f7f8 f8f2 	bl	8009158 <HAL_GetTick>
 8010f74:	0003      	movs	r3, r0
 8010f76:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	2208      	movs	r2, #8
 8010f80:	4013      	ands	r3, r2
 8010f82:	2b08      	cmp	r3, #8
 8010f84:	d12c      	bne.n	8010fe0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f88:	2280      	movs	r2, #128	@ 0x80
 8010f8a:	0391      	lsls	r1, r2, #14
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	4a46      	ldr	r2, [pc, #280]	@ (80110a8 <UART_CheckIdleState+0x148>)
 8010f90:	9200      	str	r2, [sp, #0]
 8010f92:	2200      	movs	r2, #0
 8010f94:	f000 f88c 	bl	80110b0 <UART_WaitOnFlagUntilTimeout>
 8010f98:	1e03      	subs	r3, r0, #0
 8010f9a:	d021      	beq.n	8010fe0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8010fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8010fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8010fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fac:	f383 8810 	msr	PRIMASK, r3
}
 8010fb0:	46c0      	nop			@ (mov r8, r8)
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	681a      	ldr	r2, [r3, #0]
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	2180      	movs	r1, #128	@ 0x80
 8010fbe:	438a      	bics	r2, r1
 8010fc0:	601a      	str	r2, [r3, #0]
 8010fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fc8:	f383 8810 	msr	PRIMASK, r3
}
 8010fcc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2220      	movs	r2, #32
 8010fd2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2278      	movs	r2, #120	@ 0x78
 8010fd8:	2100      	movs	r1, #0
 8010fda:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010fdc:	2303      	movs	r3, #3
 8010fde:	e05f      	b.n	80110a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	2204      	movs	r2, #4
 8010fe8:	4013      	ands	r3, r2
 8010fea:	2b04      	cmp	r3, #4
 8010fec:	d146      	bne.n	801107c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ff0:	2280      	movs	r2, #128	@ 0x80
 8010ff2:	03d1      	lsls	r1, r2, #15
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	4a2c      	ldr	r2, [pc, #176]	@ (80110a8 <UART_CheckIdleState+0x148>)
 8010ff8:	9200      	str	r2, [sp, #0]
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	f000 f858 	bl	80110b0 <UART_WaitOnFlagUntilTimeout>
 8011000:	1e03      	subs	r3, r0, #0
 8011002:	d03b      	beq.n	801107c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011004:	f3ef 8310 	mrs	r3, PRIMASK
 8011008:	60fb      	str	r3, [r7, #12]
  return(result);
 801100a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801100c:	637b      	str	r3, [r7, #52]	@ 0x34
 801100e:	2301      	movs	r3, #1
 8011010:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011012:	693b      	ldr	r3, [r7, #16]
 8011014:	f383 8810 	msr	PRIMASK, r3
}
 8011018:	46c0      	nop			@ (mov r8, r8)
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	681a      	ldr	r2, [r3, #0]
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	4921      	ldr	r1, [pc, #132]	@ (80110ac <UART_CheckIdleState+0x14c>)
 8011026:	400a      	ands	r2, r1
 8011028:	601a      	str	r2, [r3, #0]
 801102a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801102c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	f383 8810 	msr	PRIMASK, r3
}
 8011034:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011036:	f3ef 8310 	mrs	r3, PRIMASK
 801103a:	61bb      	str	r3, [r7, #24]
  return(result);
 801103c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801103e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011040:	2301      	movs	r3, #1
 8011042:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011044:	69fb      	ldr	r3, [r7, #28]
 8011046:	f383 8810 	msr	PRIMASK, r3
}
 801104a:	46c0      	nop			@ (mov r8, r8)
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	689a      	ldr	r2, [r3, #8]
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	2101      	movs	r1, #1
 8011058:	438a      	bics	r2, r1
 801105a:	609a      	str	r2, [r3, #8]
 801105c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801105e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011060:	6a3b      	ldr	r3, [r7, #32]
 8011062:	f383 8810 	msr	PRIMASK, r3
}
 8011066:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2280      	movs	r2, #128	@ 0x80
 801106c:	2120      	movs	r1, #32
 801106e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2278      	movs	r2, #120	@ 0x78
 8011074:	2100      	movs	r1, #0
 8011076:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011078:	2303      	movs	r3, #3
 801107a:	e011      	b.n	80110a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	2220      	movs	r2, #32
 8011080:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2280      	movs	r2, #128	@ 0x80
 8011086:	2120      	movs	r1, #32
 8011088:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2200      	movs	r2, #0
 801108e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2200      	movs	r2, #0
 8011094:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	2278      	movs	r2, #120	@ 0x78
 801109a:	2100      	movs	r1, #0
 801109c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801109e:	2300      	movs	r3, #0
}
 80110a0:	0018      	movs	r0, r3
 80110a2:	46bd      	mov	sp, r7
 80110a4:	b010      	add	sp, #64	@ 0x40
 80110a6:	bd80      	pop	{r7, pc}
 80110a8:	01ffffff 	.word	0x01ffffff
 80110ac:	fffffedf 	.word	0xfffffedf

080110b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b084      	sub	sp, #16
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	60f8      	str	r0, [r7, #12]
 80110b8:	60b9      	str	r1, [r7, #8]
 80110ba:	603b      	str	r3, [r7, #0]
 80110bc:	1dfb      	adds	r3, r7, #7
 80110be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80110c0:	e04b      	b.n	801115a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80110c2:	69bb      	ldr	r3, [r7, #24]
 80110c4:	3301      	adds	r3, #1
 80110c6:	d048      	beq.n	801115a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80110c8:	f7f8 f846 	bl	8009158 <HAL_GetTick>
 80110cc:	0002      	movs	r2, r0
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	1ad3      	subs	r3, r2, r3
 80110d2:	69ba      	ldr	r2, [r7, #24]
 80110d4:	429a      	cmp	r2, r3
 80110d6:	d302      	bcc.n	80110de <UART_WaitOnFlagUntilTimeout+0x2e>
 80110d8:	69bb      	ldr	r3, [r7, #24]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d101      	bne.n	80110e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80110de:	2303      	movs	r3, #3
 80110e0:	e04b      	b.n	801117a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	2204      	movs	r2, #4
 80110ea:	4013      	ands	r3, r2
 80110ec:	d035      	beq.n	801115a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	69db      	ldr	r3, [r3, #28]
 80110f4:	2208      	movs	r2, #8
 80110f6:	4013      	ands	r3, r2
 80110f8:	2b08      	cmp	r3, #8
 80110fa:	d111      	bne.n	8011120 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	2208      	movs	r2, #8
 8011102:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	0018      	movs	r0, r3
 8011108:	f000 f900 	bl	801130c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	2284      	movs	r2, #132	@ 0x84
 8011110:	2108      	movs	r1, #8
 8011112:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2278      	movs	r2, #120	@ 0x78
 8011118:	2100      	movs	r1, #0
 801111a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801111c:	2301      	movs	r3, #1
 801111e:	e02c      	b.n	801117a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	69da      	ldr	r2, [r3, #28]
 8011126:	2380      	movs	r3, #128	@ 0x80
 8011128:	011b      	lsls	r3, r3, #4
 801112a:	401a      	ands	r2, r3
 801112c:	2380      	movs	r3, #128	@ 0x80
 801112e:	011b      	lsls	r3, r3, #4
 8011130:	429a      	cmp	r2, r3
 8011132:	d112      	bne.n	801115a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	2280      	movs	r2, #128	@ 0x80
 801113a:	0112      	lsls	r2, r2, #4
 801113c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	0018      	movs	r0, r3
 8011142:	f000 f8e3 	bl	801130c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	2284      	movs	r2, #132	@ 0x84
 801114a:	2120      	movs	r1, #32
 801114c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	2278      	movs	r2, #120	@ 0x78
 8011152:	2100      	movs	r1, #0
 8011154:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8011156:	2303      	movs	r3, #3
 8011158:	e00f      	b.n	801117a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	69db      	ldr	r3, [r3, #28]
 8011160:	68ba      	ldr	r2, [r7, #8]
 8011162:	4013      	ands	r3, r2
 8011164:	68ba      	ldr	r2, [r7, #8]
 8011166:	1ad3      	subs	r3, r2, r3
 8011168:	425a      	negs	r2, r3
 801116a:	4153      	adcs	r3, r2
 801116c:	b2db      	uxtb	r3, r3
 801116e:	001a      	movs	r2, r3
 8011170:	1dfb      	adds	r3, r7, #7
 8011172:	781b      	ldrb	r3, [r3, #0]
 8011174:	429a      	cmp	r2, r3
 8011176:	d0a4      	beq.n	80110c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011178:	2300      	movs	r3, #0
}
 801117a:	0018      	movs	r0, r3
 801117c:	46bd      	mov	sp, r7
 801117e:	b004      	add	sp, #16
 8011180:	bd80      	pop	{r7, pc}
	...

08011184 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b090      	sub	sp, #64	@ 0x40
 8011188:	af00      	add	r7, sp, #0
 801118a:	60f8      	str	r0, [r7, #12]
 801118c:	60b9      	str	r1, [r7, #8]
 801118e:	1dbb      	adds	r3, r7, #6
 8011190:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	68ba      	ldr	r2, [r7, #8]
 8011196:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	1dba      	adds	r2, r7, #6
 801119c:	2158      	movs	r1, #88	@ 0x58
 801119e:	8812      	ldrh	r2, [r2, #0]
 80111a0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	2284      	movs	r2, #132	@ 0x84
 80111a6:	2100      	movs	r1, #0
 80111a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	2280      	movs	r2, #128	@ 0x80
 80111ae:	2122      	movs	r1, #34	@ 0x22
 80111b0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d028      	beq.n	801120c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80111be:	4a3e      	ldr	r2, [pc, #248]	@ (80112b8 <UART_Start_Receive_DMA+0x134>)
 80111c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80111c6:	4a3d      	ldr	r2, [pc, #244]	@ (80112bc <UART_Start_Receive_DMA+0x138>)
 80111c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80111ce:	4a3c      	ldr	r2, [pc, #240]	@ (80112c0 <UART_Start_Receive_DMA+0x13c>)
 80111d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80111d6:	2200      	movs	r2, #0
 80111d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	3324      	adds	r3, #36	@ 0x24
 80111e4:	0019      	movs	r1, r3
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80111ea:	001a      	movs	r2, r3
 80111ec:	1dbb      	adds	r3, r7, #6
 80111ee:	881b      	ldrh	r3, [r3, #0]
 80111f0:	f7f8 fd12 	bl	8009c18 <HAL_DMA_Start_IT>
 80111f4:	1e03      	subs	r3, r0, #0
 80111f6:	d009      	beq.n	801120c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	2284      	movs	r2, #132	@ 0x84
 80111fc:	2110      	movs	r1, #16
 80111fe:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	2280      	movs	r2, #128	@ 0x80
 8011204:	2120      	movs	r1, #32
 8011206:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8011208:	2301      	movs	r3, #1
 801120a:	e050      	b.n	80112ae <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	691b      	ldr	r3, [r3, #16]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d019      	beq.n	8011248 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011214:	f3ef 8310 	mrs	r3, PRIMASK
 8011218:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801121a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801121c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801121e:	2301      	movs	r3, #1
 8011220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011224:	f383 8810 	msr	PRIMASK, r3
}
 8011228:	46c0      	nop			@ (mov r8, r8)
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	681a      	ldr	r2, [r3, #0]
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	2180      	movs	r1, #128	@ 0x80
 8011236:	0049      	lsls	r1, r1, #1
 8011238:	430a      	orrs	r2, r1
 801123a:	601a      	str	r2, [r3, #0]
 801123c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801123e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011242:	f383 8810 	msr	PRIMASK, r3
}
 8011246:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011248:	f3ef 8310 	mrs	r3, PRIMASK
 801124c:	613b      	str	r3, [r7, #16]
  return(result);
 801124e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011250:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011252:	2301      	movs	r3, #1
 8011254:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011256:	697b      	ldr	r3, [r7, #20]
 8011258:	f383 8810 	msr	PRIMASK, r3
}
 801125c:	46c0      	nop			@ (mov r8, r8)
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	689a      	ldr	r2, [r3, #8]
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	2101      	movs	r1, #1
 801126a:	430a      	orrs	r2, r1
 801126c:	609a      	str	r2, [r3, #8]
 801126e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011270:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011272:	69bb      	ldr	r3, [r7, #24]
 8011274:	f383 8810 	msr	PRIMASK, r3
}
 8011278:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801127a:	f3ef 8310 	mrs	r3, PRIMASK
 801127e:	61fb      	str	r3, [r7, #28]
  return(result);
 8011280:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011282:	637b      	str	r3, [r7, #52]	@ 0x34
 8011284:	2301      	movs	r3, #1
 8011286:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011288:	6a3b      	ldr	r3, [r7, #32]
 801128a:	f383 8810 	msr	PRIMASK, r3
}
 801128e:	46c0      	nop			@ (mov r8, r8)
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	689a      	ldr	r2, [r3, #8]
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	2140      	movs	r1, #64	@ 0x40
 801129c:	430a      	orrs	r2, r1
 801129e:	609a      	str	r2, [r3, #8]
 80112a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80112a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112a6:	f383 8810 	msr	PRIMASK, r3
}
 80112aa:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80112ac:	2300      	movs	r3, #0
}
 80112ae:	0018      	movs	r0, r3
 80112b0:	46bd      	mov	sp, r7
 80112b2:	b010      	add	sp, #64	@ 0x40
 80112b4:	bd80      	pop	{r7, pc}
 80112b6:	46c0      	nop			@ (mov r8, r8)
 80112b8:	08011495 	.word	0x08011495
 80112bc:	080115c9 	.word	0x080115c9
 80112c0:	08011611 	.word	0x08011611

080112c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b086      	sub	sp, #24
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80112cc:	f3ef 8310 	mrs	r3, PRIMASK
 80112d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80112d2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80112d4:	617b      	str	r3, [r7, #20]
 80112d6:	2301      	movs	r3, #1
 80112d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	f383 8810 	msr	PRIMASK, r3
}
 80112e0:	46c0      	nop			@ (mov r8, r8)
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	681a      	ldr	r2, [r3, #0]
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	21c0      	movs	r1, #192	@ 0xc0
 80112ee:	438a      	bics	r2, r1
 80112f0:	601a      	str	r2, [r3, #0]
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80112f6:	693b      	ldr	r3, [r7, #16]
 80112f8:	f383 8810 	msr	PRIMASK, r3
}
 80112fc:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2220      	movs	r2, #32
 8011302:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8011304:	46c0      	nop			@ (mov r8, r8)
 8011306:	46bd      	mov	sp, r7
 8011308:	b006      	add	sp, #24
 801130a:	bd80      	pop	{r7, pc}

0801130c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b08e      	sub	sp, #56	@ 0x38
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011314:	f3ef 8310 	mrs	r3, PRIMASK
 8011318:	617b      	str	r3, [r7, #20]
  return(result);
 801131a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801131c:	637b      	str	r3, [r7, #52]	@ 0x34
 801131e:	2301      	movs	r3, #1
 8011320:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011322:	69bb      	ldr	r3, [r7, #24]
 8011324:	f383 8810 	msr	PRIMASK, r3
}
 8011328:	46c0      	nop			@ (mov r8, r8)
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	681a      	ldr	r2, [r3, #0]
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	4926      	ldr	r1, [pc, #152]	@ (80113d0 <UART_EndRxTransfer+0xc4>)
 8011336:	400a      	ands	r2, r1
 8011338:	601a      	str	r2, [r3, #0]
 801133a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801133c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801133e:	69fb      	ldr	r3, [r7, #28]
 8011340:	f383 8810 	msr	PRIMASK, r3
}
 8011344:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011346:	f3ef 8310 	mrs	r3, PRIMASK
 801134a:	623b      	str	r3, [r7, #32]
  return(result);
 801134c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801134e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011350:	2301      	movs	r3, #1
 8011352:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011356:	f383 8810 	msr	PRIMASK, r3
}
 801135a:	46c0      	nop			@ (mov r8, r8)
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	689a      	ldr	r2, [r3, #8]
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	2101      	movs	r1, #1
 8011368:	438a      	bics	r2, r1
 801136a:	609a      	str	r2, [r3, #8]
 801136c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801136e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011372:	f383 8810 	msr	PRIMASK, r3
}
 8011376:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801137c:	2b01      	cmp	r3, #1
 801137e:	d118      	bne.n	80113b2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011380:	f3ef 8310 	mrs	r3, PRIMASK
 8011384:	60bb      	str	r3, [r7, #8]
  return(result);
 8011386:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801138a:	2301      	movs	r3, #1
 801138c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	f383 8810 	msr	PRIMASK, r3
}
 8011394:	46c0      	nop			@ (mov r8, r8)
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	681a      	ldr	r2, [r3, #0]
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	2110      	movs	r1, #16
 80113a2:	438a      	bics	r2, r1
 80113a4:	601a      	str	r2, [r3, #0]
 80113a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	f383 8810 	msr	PRIMASK, r3
}
 80113b0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2280      	movs	r2, #128	@ 0x80
 80113b6:	2120      	movs	r1, #32
 80113b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2200      	movs	r2, #0
 80113be:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2200      	movs	r2, #0
 80113c4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80113c6:	46c0      	nop			@ (mov r8, r8)
 80113c8:	46bd      	mov	sp, r7
 80113ca:	b00e      	add	sp, #56	@ 0x38
 80113cc:	bd80      	pop	{r7, pc}
 80113ce:	46c0      	nop			@ (mov r8, r8)
 80113d0:	fffffedf 	.word	0xfffffedf

080113d4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b08c      	sub	sp, #48	@ 0x30
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	2220      	movs	r2, #32
 80113ea:	4013      	ands	r3, r2
 80113ec:	d135      	bne.n	801145a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80113ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113f0:	2252      	movs	r2, #82	@ 0x52
 80113f2:	2100      	movs	r1, #0
 80113f4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113f6:	f3ef 8310 	mrs	r3, PRIMASK
 80113fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80113fc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80113fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011400:	2301      	movs	r3, #1
 8011402:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011404:	693b      	ldr	r3, [r7, #16]
 8011406:	f383 8810 	msr	PRIMASK, r3
}
 801140a:	46c0      	nop			@ (mov r8, r8)
 801140c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	689a      	ldr	r2, [r3, #8]
 8011412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	2180      	movs	r1, #128	@ 0x80
 8011418:	438a      	bics	r2, r1
 801141a:	609a      	str	r2, [r3, #8]
 801141c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801141e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011420:	697b      	ldr	r3, [r7, #20]
 8011422:	f383 8810 	msr	PRIMASK, r3
}
 8011426:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011428:	f3ef 8310 	mrs	r3, PRIMASK
 801142c:	61bb      	str	r3, [r7, #24]
  return(result);
 801142e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011430:	627b      	str	r3, [r7, #36]	@ 0x24
 8011432:	2301      	movs	r3, #1
 8011434:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011436:	69fb      	ldr	r3, [r7, #28]
 8011438:	f383 8810 	msr	PRIMASK, r3
}
 801143c:	46c0      	nop			@ (mov r8, r8)
 801143e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	681a      	ldr	r2, [r3, #0]
 8011444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	2140      	movs	r1, #64	@ 0x40
 801144a:	430a      	orrs	r2, r1
 801144c:	601a      	str	r2, [r3, #0]
 801144e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011450:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011452:	6a3b      	ldr	r3, [r7, #32]
 8011454:	f383 8810 	msr	PRIMASK, r3
}
 8011458:	e006      	b.n	8011468 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801145a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801145c:	228c      	movs	r2, #140	@ 0x8c
 801145e:	589b      	ldr	r3, [r3, r2]
 8011460:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011462:	0010      	movs	r0, r2
 8011464:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011466:	46c0      	nop			@ (mov r8, r8)
 8011468:	46c0      	nop			@ (mov r8, r8)
 801146a:	46bd      	mov	sp, r7
 801146c:	b00c      	add	sp, #48	@ 0x30
 801146e:	bd80      	pop	{r7, pc}

08011470 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b084      	sub	sp, #16
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801147c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	2288      	movs	r2, #136	@ 0x88
 8011482:	589b      	ldr	r3, [r3, r2]
 8011484:	68fa      	ldr	r2, [r7, #12]
 8011486:	0010      	movs	r0, r2
 8011488:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801148a:	46c0      	nop			@ (mov r8, r8)
 801148c:	46bd      	mov	sp, r7
 801148e:	b004      	add	sp, #16
 8011490:	bd80      	pop	{r7, pc}
	...

08011494 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b094      	sub	sp, #80	@ 0x50
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	2220      	movs	r2, #32
 80114aa:	4013      	ands	r3, r2
 80114ac:	d16f      	bne.n	801158e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80114ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114b0:	225a      	movs	r2, #90	@ 0x5a
 80114b2:	2100      	movs	r1, #0
 80114b4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114b6:	f3ef 8310 	mrs	r3, PRIMASK
 80114ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80114bc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80114be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80114c0:	2301      	movs	r3, #1
 80114c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114c4:	69fb      	ldr	r3, [r7, #28]
 80114c6:	f383 8810 	msr	PRIMASK, r3
}
 80114ca:	46c0      	nop			@ (mov r8, r8)
 80114cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	681a      	ldr	r2, [r3, #0]
 80114d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	493b      	ldr	r1, [pc, #236]	@ (80115c4 <UART_DMAReceiveCplt+0x130>)
 80114d8:	400a      	ands	r2, r1
 80114da:	601a      	str	r2, [r3, #0]
 80114dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80114de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114e0:	6a3b      	ldr	r3, [r7, #32]
 80114e2:	f383 8810 	msr	PRIMASK, r3
}
 80114e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114e8:	f3ef 8310 	mrs	r3, PRIMASK
 80114ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80114ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80114f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80114f2:	2301      	movs	r3, #1
 80114f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114f8:	f383 8810 	msr	PRIMASK, r3
}
 80114fc:	46c0      	nop			@ (mov r8, r8)
 80114fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	689a      	ldr	r2, [r3, #8]
 8011504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	2101      	movs	r1, #1
 801150a:	438a      	bics	r2, r1
 801150c:	609a      	str	r2, [r3, #8]
 801150e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011510:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011514:	f383 8810 	msr	PRIMASK, r3
}
 8011518:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801151a:	f3ef 8310 	mrs	r3, PRIMASK
 801151e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8011520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011522:	643b      	str	r3, [r7, #64]	@ 0x40
 8011524:	2301      	movs	r3, #1
 8011526:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801152a:	f383 8810 	msr	PRIMASK, r3
}
 801152e:	46c0      	nop			@ (mov r8, r8)
 8011530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	689a      	ldr	r2, [r3, #8]
 8011536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	2140      	movs	r1, #64	@ 0x40
 801153c:	438a      	bics	r2, r1
 801153e:	609a      	str	r2, [r3, #8]
 8011540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011542:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011546:	f383 8810 	msr	PRIMASK, r3
}
 801154a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801154c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801154e:	2280      	movs	r2, #128	@ 0x80
 8011550:	2120      	movs	r1, #32
 8011552:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011554:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011558:	2b01      	cmp	r3, #1
 801155a:	d118      	bne.n	801158e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801155c:	f3ef 8310 	mrs	r3, PRIMASK
 8011560:	60fb      	str	r3, [r7, #12]
  return(result);
 8011562:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011564:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011566:	2301      	movs	r3, #1
 8011568:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801156a:	693b      	ldr	r3, [r7, #16]
 801156c:	f383 8810 	msr	PRIMASK, r3
}
 8011570:	46c0      	nop			@ (mov r8, r8)
 8011572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	681a      	ldr	r2, [r3, #0]
 8011578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	2110      	movs	r1, #16
 801157e:	438a      	bics	r2, r1
 8011580:	601a      	str	r2, [r3, #0]
 8011582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011584:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	f383 8810 	msr	PRIMASK, r3
}
 801158c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801158e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011590:	2200      	movs	r2, #0
 8011592:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011598:	2b01      	cmp	r3, #1
 801159a:	d109      	bne.n	80115b0 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801159c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801159e:	22ac      	movs	r2, #172	@ 0xac
 80115a0:	589b      	ldr	r3, [r3, r2]
 80115a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80115a4:	2158      	movs	r1, #88	@ 0x58
 80115a6:	5a51      	ldrh	r1, [r2, r1]
 80115a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80115aa:	0010      	movs	r0, r2
 80115ac:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80115ae:	e005      	b.n	80115bc <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 80115b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115b2:	2294      	movs	r2, #148	@ 0x94
 80115b4:	589b      	ldr	r3, [r3, r2]
 80115b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80115b8:	0010      	movs	r0, r2
 80115ba:	4798      	blx	r3
}
 80115bc:	46c0      	nop			@ (mov r8, r8)
 80115be:	46bd      	mov	sp, r7
 80115c0:	b014      	add	sp, #80	@ 0x50
 80115c2:	bd80      	pop	{r7, pc}
 80115c4:	fffffeff 	.word	0xfffffeff

080115c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b084      	sub	sp, #16
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115d4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	2201      	movs	r2, #1
 80115da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80115e0:	2b01      	cmp	r3, #1
 80115e2:	d10b      	bne.n	80115fc <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	22ac      	movs	r2, #172	@ 0xac
 80115e8:	589b      	ldr	r3, [r3, r2]
 80115ea:	68fa      	ldr	r2, [r7, #12]
 80115ec:	2158      	movs	r1, #88	@ 0x58
 80115ee:	5a52      	ldrh	r2, [r2, r1]
 80115f0:	0852      	lsrs	r2, r2, #1
 80115f2:	b291      	uxth	r1, r2
 80115f4:	68fa      	ldr	r2, [r7, #12]
 80115f6:	0010      	movs	r0, r2
 80115f8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80115fa:	e005      	b.n	8011608 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	2290      	movs	r2, #144	@ 0x90
 8011600:	589b      	ldr	r3, [r3, r2]
 8011602:	68fa      	ldr	r2, [r7, #12]
 8011604:	0010      	movs	r0, r2
 8011606:	4798      	blx	r3
}
 8011608:	46c0      	nop			@ (mov r8, r8)
 801160a:	46bd      	mov	sp, r7
 801160c:	b004      	add	sp, #16
 801160e:	bd80      	pop	{r7, pc}

08011610 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b086      	sub	sp, #24
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801161c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011622:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011624:	697b      	ldr	r3, [r7, #20]
 8011626:	2280      	movs	r2, #128	@ 0x80
 8011628:	589b      	ldr	r3, [r3, r2]
 801162a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	689b      	ldr	r3, [r3, #8]
 8011632:	2280      	movs	r2, #128	@ 0x80
 8011634:	4013      	ands	r3, r2
 8011636:	2b80      	cmp	r3, #128	@ 0x80
 8011638:	d10a      	bne.n	8011650 <UART_DMAError+0x40>
 801163a:	693b      	ldr	r3, [r7, #16]
 801163c:	2b21      	cmp	r3, #33	@ 0x21
 801163e:	d107      	bne.n	8011650 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	2252      	movs	r2, #82	@ 0x52
 8011644:	2100      	movs	r1, #0
 8011646:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	0018      	movs	r0, r3
 801164c:	f7ff fe3a 	bl	80112c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	689b      	ldr	r3, [r3, #8]
 8011656:	2240      	movs	r2, #64	@ 0x40
 8011658:	4013      	ands	r3, r2
 801165a:	2b40      	cmp	r3, #64	@ 0x40
 801165c:	d10a      	bne.n	8011674 <UART_DMAError+0x64>
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	2b22      	cmp	r3, #34	@ 0x22
 8011662:	d107      	bne.n	8011674 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	225a      	movs	r2, #90	@ 0x5a
 8011668:	2100      	movs	r1, #0
 801166a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	0018      	movs	r0, r3
 8011670:	f7ff fe4c 	bl	801130c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	2284      	movs	r2, #132	@ 0x84
 8011678:	589b      	ldr	r3, [r3, r2]
 801167a:	2210      	movs	r2, #16
 801167c:	431a      	orrs	r2, r3
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	2184      	movs	r1, #132	@ 0x84
 8011682:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	2298      	movs	r2, #152	@ 0x98
 8011688:	589b      	ldr	r3, [r3, r2]
 801168a:	697a      	ldr	r2, [r7, #20]
 801168c:	0010      	movs	r0, r2
 801168e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011690:	46c0      	nop			@ (mov r8, r8)
 8011692:	46bd      	mov	sp, r7
 8011694:	b006      	add	sp, #24
 8011696:	bd80      	pop	{r7, pc}

08011698 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b084      	sub	sp, #16
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	225a      	movs	r2, #90	@ 0x5a
 80116aa:	2100      	movs	r1, #0
 80116ac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	2252      	movs	r2, #82	@ 0x52
 80116b2:	2100      	movs	r1, #0
 80116b4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	2298      	movs	r2, #152	@ 0x98
 80116ba:	589b      	ldr	r3, [r3, r2]
 80116bc:	68fa      	ldr	r2, [r7, #12]
 80116be:	0010      	movs	r0, r2
 80116c0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80116c2:	46c0      	nop			@ (mov r8, r8)
 80116c4:	46bd      	mov	sp, r7
 80116c6:	b004      	add	sp, #16
 80116c8:	bd80      	pop	{r7, pc}

080116ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80116ca:	b580      	push	{r7, lr}
 80116cc:	b086      	sub	sp, #24
 80116ce:	af00      	add	r7, sp, #0
 80116d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80116d2:	f3ef 8310 	mrs	r3, PRIMASK
 80116d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80116d8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80116da:	617b      	str	r3, [r7, #20]
 80116dc:	2301      	movs	r3, #1
 80116de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	f383 8810 	msr	PRIMASK, r3
}
 80116e6:	46c0      	nop			@ (mov r8, r8)
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	681a      	ldr	r2, [r3, #0]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	2140      	movs	r1, #64	@ 0x40
 80116f4:	438a      	bics	r2, r1
 80116f6:	601a      	str	r2, [r3, #0]
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80116fc:	693b      	ldr	r3, [r7, #16]
 80116fe:	f383 8810 	msr	PRIMASK, r3
}
 8011702:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2220      	movs	r2, #32
 8011708:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	2200      	movs	r2, #0
 801170e:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	228c      	movs	r2, #140	@ 0x8c
 8011714:	589b      	ldr	r3, [r3, r2]
 8011716:	687a      	ldr	r2, [r7, #4]
 8011718:	0010      	movs	r0, r2
 801171a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801171c:	46c0      	nop			@ (mov r8, r8)
 801171e:	46bd      	mov	sp, r7
 8011720:	b006      	add	sp, #24
 8011722:	bd80      	pop	{r7, pc}

08011724 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b082      	sub	sp, #8
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801172c:	46c0      	nop			@ (mov r8, r8)
 801172e:	46bd      	mov	sp, r7
 8011730:	b002      	add	sp, #8
 8011732:	bd80      	pop	{r7, pc}

08011734 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b084      	sub	sp, #16
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2244      	movs	r2, #68	@ 0x44
 8011740:	2100      	movs	r1, #0
 8011742:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011744:	4b05      	ldr	r3, [pc, #20]	@ (801175c <USB_EnableGlobalInt+0x28>)
 8011746:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	b299      	uxth	r1, r3
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2240      	movs	r2, #64	@ 0x40
 8011750:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8011752:	2300      	movs	r3, #0
}
 8011754:	0018      	movs	r0, r3
 8011756:	46bd      	mov	sp, r7
 8011758:	b004      	add	sp, #16
 801175a:	bd80      	pop	{r7, pc}
 801175c:	0000bf80 	.word	0x0000bf80

08011760 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b084      	sub	sp, #16
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011768:	4b09      	ldr	r3, [pc, #36]	@ (8011790 <USB_DisableGlobalInt+0x30>)
 801176a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	2240      	movs	r2, #64	@ 0x40
 8011770:	5a9b      	ldrh	r3, [r3, r2]
 8011772:	b29b      	uxth	r3, r3
 8011774:	68fa      	ldr	r2, [r7, #12]
 8011776:	b292      	uxth	r2, r2
 8011778:	43d2      	mvns	r2, r2
 801177a:	b292      	uxth	r2, r2
 801177c:	4013      	ands	r3, r2
 801177e:	b299      	uxth	r1, r3
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2240      	movs	r2, #64	@ 0x40
 8011784:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8011786:	2300      	movs	r3, #0
}
 8011788:	0018      	movs	r0, r3
 801178a:	46bd      	mov	sp, r7
 801178c:	b004      	add	sp, #16
 801178e:	bd80      	pop	{r7, pc}
 8011790:	0000bf80 	.word	0x0000bf80

08011794 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8011794:	b084      	sub	sp, #16
 8011796:	b590      	push	{r4, r7, lr}
 8011798:	b083      	sub	sp, #12
 801179a:	af00      	add	r7, sp, #0
 801179c:	6078      	str	r0, [r7, #4]
 801179e:	2004      	movs	r0, #4
 80117a0:	2410      	movs	r4, #16
 80117a2:	1900      	adds	r0, r0, r4
 80117a4:	2408      	movs	r4, #8
 80117a6:	46a4      	mov	ip, r4
 80117a8:	44bc      	add	ip, r7
 80117aa:	4460      	add	r0, ip
 80117ac:	6001      	str	r1, [r0, #0]
 80117ae:	6042      	str	r2, [r0, #4]
 80117b0:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	2240      	movs	r2, #64	@ 0x40
 80117b6:	2101      	movs	r1, #1
 80117b8:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2240      	movs	r2, #64	@ 0x40
 80117be:	2100      	movs	r1, #0
 80117c0:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	2244      	movs	r2, #68	@ 0x44
 80117c6:	2100      	movs	r1, #0
 80117c8:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2250      	movs	r2, #80	@ 0x50
 80117ce:	2100      	movs	r1, #0
 80117d0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80117d2:	2300      	movs	r3, #0
}
 80117d4:	0018      	movs	r0, r3
 80117d6:	46bd      	mov	sp, r7
 80117d8:	b003      	add	sp, #12
 80117da:	bc90      	pop	{r4, r7}
 80117dc:	bc08      	pop	{r3}
 80117de:	b004      	add	sp, #16
 80117e0:	4718      	bx	r3
	...

080117e4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b09c      	sub	sp, #112	@ 0x70
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
 80117ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80117ee:	236f      	movs	r3, #111	@ 0x6f
 80117f0:	18fb      	adds	r3, r7, r3
 80117f2:	2200      	movs	r2, #0
 80117f4:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80117f6:	687a      	ldr	r2, [r7, #4]
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	009b      	lsls	r3, r3, #2
 80117fe:	18d3      	adds	r3, r2, r3
 8011800:	881b      	ldrh	r3, [r3, #0]
 8011802:	b29a      	uxth	r2, r3
 8011804:	236c      	movs	r3, #108	@ 0x6c
 8011806:	18fb      	adds	r3, r7, r3
 8011808:	49a3      	ldr	r1, [pc, #652]	@ (8011a98 <USB_ActivateEndpoint+0x2b4>)
 801180a:	400a      	ands	r2, r1
 801180c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801180e:	683b      	ldr	r3, [r7, #0]
 8011810:	78db      	ldrb	r3, [r3, #3]
 8011812:	2b03      	cmp	r3, #3
 8011814:	d017      	beq.n	8011846 <USB_ActivateEndpoint+0x62>
 8011816:	dc28      	bgt.n	801186a <USB_ActivateEndpoint+0x86>
 8011818:	2b02      	cmp	r3, #2
 801181a:	d00e      	beq.n	801183a <USB_ActivateEndpoint+0x56>
 801181c:	dc25      	bgt.n	801186a <USB_ActivateEndpoint+0x86>
 801181e:	2b00      	cmp	r3, #0
 8011820:	d002      	beq.n	8011828 <USB_ActivateEndpoint+0x44>
 8011822:	2b01      	cmp	r3, #1
 8011824:	d018      	beq.n	8011858 <USB_ActivateEndpoint+0x74>
 8011826:	e020      	b.n	801186a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8011828:	226c      	movs	r2, #108	@ 0x6c
 801182a:	18bb      	adds	r3, r7, r2
 801182c:	18ba      	adds	r2, r7, r2
 801182e:	8812      	ldrh	r2, [r2, #0]
 8011830:	2180      	movs	r1, #128	@ 0x80
 8011832:	0089      	lsls	r1, r1, #2
 8011834:	430a      	orrs	r2, r1
 8011836:	801a      	strh	r2, [r3, #0]
      break;
 8011838:	e01c      	b.n	8011874 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801183a:	226c      	movs	r2, #108	@ 0x6c
 801183c:	18bb      	adds	r3, r7, r2
 801183e:	18ba      	adds	r2, r7, r2
 8011840:	8812      	ldrh	r2, [r2, #0]
 8011842:	801a      	strh	r2, [r3, #0]
      break;
 8011844:	e016      	b.n	8011874 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8011846:	226c      	movs	r2, #108	@ 0x6c
 8011848:	18bb      	adds	r3, r7, r2
 801184a:	18ba      	adds	r2, r7, r2
 801184c:	8812      	ldrh	r2, [r2, #0]
 801184e:	21c0      	movs	r1, #192	@ 0xc0
 8011850:	00c9      	lsls	r1, r1, #3
 8011852:	430a      	orrs	r2, r1
 8011854:	801a      	strh	r2, [r3, #0]
      break;
 8011856:	e00d      	b.n	8011874 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8011858:	226c      	movs	r2, #108	@ 0x6c
 801185a:	18bb      	adds	r3, r7, r2
 801185c:	18ba      	adds	r2, r7, r2
 801185e:	8812      	ldrh	r2, [r2, #0]
 8011860:	2180      	movs	r1, #128	@ 0x80
 8011862:	00c9      	lsls	r1, r1, #3
 8011864:	430a      	orrs	r2, r1
 8011866:	801a      	strh	r2, [r3, #0]
      break;
 8011868:	e004      	b.n	8011874 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801186a:	236f      	movs	r3, #111	@ 0x6f
 801186c:	18fb      	adds	r3, r7, r3
 801186e:	2201      	movs	r2, #1
 8011870:	701a      	strb	r2, [r3, #0]
      break;
 8011872:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8011874:	687a      	ldr	r2, [r7, #4]
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	781b      	ldrb	r3, [r3, #0]
 801187a:	009b      	lsls	r3, r3, #2
 801187c:	18d3      	adds	r3, r2, r3
 801187e:	226c      	movs	r2, #108	@ 0x6c
 8011880:	18ba      	adds	r2, r7, r2
 8011882:	8812      	ldrh	r2, [r2, #0]
 8011884:	4985      	ldr	r1, [pc, #532]	@ (8011a9c <USB_ActivateEndpoint+0x2b8>)
 8011886:	430a      	orrs	r2, r1
 8011888:	b292      	uxth	r2, r2
 801188a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801188c:	687a      	ldr	r2, [r7, #4]
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	009b      	lsls	r3, r3, #2
 8011894:	18d3      	adds	r3, r2, r3
 8011896:	881b      	ldrh	r3, [r3, #0]
 8011898:	b29b      	uxth	r3, r3
 801189a:	b21b      	sxth	r3, r3
 801189c:	4a80      	ldr	r2, [pc, #512]	@ (8011aa0 <USB_ActivateEndpoint+0x2bc>)
 801189e:	4013      	ands	r3, r2
 80118a0:	b21a      	sxth	r2, r3
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	b21b      	sxth	r3, r3
 80118a8:	4313      	orrs	r3, r2
 80118aa:	b21a      	sxth	r2, r3
 80118ac:	2166      	movs	r1, #102	@ 0x66
 80118ae:	187b      	adds	r3, r7, r1
 80118b0:	801a      	strh	r2, [r3, #0]
 80118b2:	687a      	ldr	r2, [r7, #4]
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	781b      	ldrb	r3, [r3, #0]
 80118b8:	009b      	lsls	r3, r3, #2
 80118ba:	18d3      	adds	r3, r2, r3
 80118bc:	187a      	adds	r2, r7, r1
 80118be:	8812      	ldrh	r2, [r2, #0]
 80118c0:	4976      	ldr	r1, [pc, #472]	@ (8011a9c <USB_ActivateEndpoint+0x2b8>)
 80118c2:	430a      	orrs	r2, r1
 80118c4:	b292      	uxth	r2, r2
 80118c6:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	7b1b      	ldrb	r3, [r3, #12]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d000      	beq.n	80118d2 <USB_ActivateEndpoint+0xee>
 80118d0:	e178      	b.n	8011bc4 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	785b      	ldrb	r3, [r3, #1]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d100      	bne.n	80118dc <USB_ActivateEndpoint+0xf8>
 80118da:	e07a      	b.n	80119d2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	61bb      	str	r3, [r7, #24]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2250      	movs	r2, #80	@ 0x50
 80118e4:	5a9b      	ldrh	r3, [r3, r2]
 80118e6:	b29b      	uxth	r3, r3
 80118e8:	001a      	movs	r2, r3
 80118ea:	69bb      	ldr	r3, [r7, #24]
 80118ec:	189b      	adds	r3, r3, r2
 80118ee:	61bb      	str	r3, [r7, #24]
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	00da      	lsls	r2, r3, #3
 80118f6:	69bb      	ldr	r3, [r7, #24]
 80118f8:	18d3      	adds	r3, r2, r3
 80118fa:	2280      	movs	r2, #128	@ 0x80
 80118fc:	00d2      	lsls	r2, r2, #3
 80118fe:	4694      	mov	ip, r2
 8011900:	4463      	add	r3, ip
 8011902:	617b      	str	r3, [r7, #20]
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	88db      	ldrh	r3, [r3, #6]
 8011908:	085b      	lsrs	r3, r3, #1
 801190a:	b29b      	uxth	r3, r3
 801190c:	18db      	adds	r3, r3, r3
 801190e:	b29a      	uxth	r2, r3
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011914:	687a      	ldr	r2, [r7, #4]
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	781b      	ldrb	r3, [r3, #0]
 801191a:	009b      	lsls	r3, r3, #2
 801191c:	18d2      	adds	r2, r2, r3
 801191e:	2112      	movs	r1, #18
 8011920:	187b      	adds	r3, r7, r1
 8011922:	8812      	ldrh	r2, [r2, #0]
 8011924:	801a      	strh	r2, [r3, #0]
 8011926:	187b      	adds	r3, r7, r1
 8011928:	881b      	ldrh	r3, [r3, #0]
 801192a:	2240      	movs	r2, #64	@ 0x40
 801192c:	4013      	ands	r3, r2
 801192e:	d016      	beq.n	801195e <USB_ActivateEndpoint+0x17a>
 8011930:	687a      	ldr	r2, [r7, #4]
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	009b      	lsls	r3, r3, #2
 8011938:	18d3      	adds	r3, r2, r3
 801193a:	881b      	ldrh	r3, [r3, #0]
 801193c:	b29a      	uxth	r2, r3
 801193e:	2010      	movs	r0, #16
 8011940:	183b      	adds	r3, r7, r0
 8011942:	4957      	ldr	r1, [pc, #348]	@ (8011aa0 <USB_ActivateEndpoint+0x2bc>)
 8011944:	400a      	ands	r2, r1
 8011946:	801a      	strh	r2, [r3, #0]
 8011948:	687a      	ldr	r2, [r7, #4]
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	009b      	lsls	r3, r3, #2
 8011950:	18d3      	adds	r3, r2, r3
 8011952:	183a      	adds	r2, r7, r0
 8011954:	8812      	ldrh	r2, [r2, #0]
 8011956:	4953      	ldr	r1, [pc, #332]	@ (8011aa4 <USB_ActivateEndpoint+0x2c0>)
 8011958:	430a      	orrs	r2, r1
 801195a:	b292      	uxth	r2, r2
 801195c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	78db      	ldrb	r3, [r3, #3]
 8011962:	2b01      	cmp	r3, #1
 8011964:	d01d      	beq.n	80119a2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011966:	687a      	ldr	r2, [r7, #4]
 8011968:	683b      	ldr	r3, [r7, #0]
 801196a:	781b      	ldrb	r3, [r3, #0]
 801196c:	009b      	lsls	r3, r3, #2
 801196e:	18d3      	adds	r3, r2, r3
 8011970:	881b      	ldrh	r3, [r3, #0]
 8011972:	b29a      	uxth	r2, r3
 8011974:	200c      	movs	r0, #12
 8011976:	183b      	adds	r3, r7, r0
 8011978:	494b      	ldr	r1, [pc, #300]	@ (8011aa8 <USB_ActivateEndpoint+0x2c4>)
 801197a:	400a      	ands	r2, r1
 801197c:	801a      	strh	r2, [r3, #0]
 801197e:	183b      	adds	r3, r7, r0
 8011980:	183a      	adds	r2, r7, r0
 8011982:	8812      	ldrh	r2, [r2, #0]
 8011984:	2120      	movs	r1, #32
 8011986:	404a      	eors	r2, r1
 8011988:	801a      	strh	r2, [r3, #0]
 801198a:	687a      	ldr	r2, [r7, #4]
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	781b      	ldrb	r3, [r3, #0]
 8011990:	009b      	lsls	r3, r3, #2
 8011992:	18d3      	adds	r3, r2, r3
 8011994:	183a      	adds	r2, r7, r0
 8011996:	8812      	ldrh	r2, [r2, #0]
 8011998:	4940      	ldr	r1, [pc, #256]	@ (8011a9c <USB_ActivateEndpoint+0x2b8>)
 801199a:	430a      	orrs	r2, r1
 801199c:	b292      	uxth	r2, r2
 801199e:	801a      	strh	r2, [r3, #0]
 80119a0:	e2b4      	b.n	8011f0c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80119a2:	687a      	ldr	r2, [r7, #4]
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	781b      	ldrb	r3, [r3, #0]
 80119a8:	009b      	lsls	r3, r3, #2
 80119aa:	18d3      	adds	r3, r2, r3
 80119ac:	881b      	ldrh	r3, [r3, #0]
 80119ae:	b29a      	uxth	r2, r3
 80119b0:	200e      	movs	r0, #14
 80119b2:	183b      	adds	r3, r7, r0
 80119b4:	493c      	ldr	r1, [pc, #240]	@ (8011aa8 <USB_ActivateEndpoint+0x2c4>)
 80119b6:	400a      	ands	r2, r1
 80119b8:	801a      	strh	r2, [r3, #0]
 80119ba:	687a      	ldr	r2, [r7, #4]
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	781b      	ldrb	r3, [r3, #0]
 80119c0:	009b      	lsls	r3, r3, #2
 80119c2:	18d3      	adds	r3, r2, r3
 80119c4:	183a      	adds	r2, r7, r0
 80119c6:	8812      	ldrh	r2, [r2, #0]
 80119c8:	4934      	ldr	r1, [pc, #208]	@ (8011a9c <USB_ActivateEndpoint+0x2b8>)
 80119ca:	430a      	orrs	r2, r1
 80119cc:	b292      	uxth	r2, r2
 80119ce:	801a      	strh	r2, [r3, #0]
 80119d0:	e29c      	b.n	8011f0c <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2250      	movs	r2, #80	@ 0x50
 80119da:	5a9b      	ldrh	r3, [r3, r2]
 80119dc:	b29b      	uxth	r3, r3
 80119de:	001a      	movs	r2, r3
 80119e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119e2:	189b      	adds	r3, r3, r2
 80119e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	781b      	ldrb	r3, [r3, #0]
 80119ea:	00da      	lsls	r2, r3, #3
 80119ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119ee:	18d3      	adds	r3, r2, r3
 80119f0:	4a2e      	ldr	r2, [pc, #184]	@ (8011aac <USB_ActivateEndpoint+0x2c8>)
 80119f2:	4694      	mov	ip, r2
 80119f4:	4463      	add	r3, ip
 80119f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80119f8:	683b      	ldr	r3, [r7, #0]
 80119fa:	88db      	ldrh	r3, [r3, #6]
 80119fc:	085b      	lsrs	r3, r3, #1
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	18db      	adds	r3, r3, r3
 8011a02:	b29a      	uxth	r2, r3
 8011a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a06:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2250      	movs	r2, #80	@ 0x50
 8011a10:	5a9b      	ldrh	r3, [r3, r2]
 8011a12:	b29b      	uxth	r3, r3
 8011a14:	001a      	movs	r2, r3
 8011a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a18:	189b      	adds	r3, r3, r2
 8011a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	781b      	ldrb	r3, [r3, #0]
 8011a20:	00da      	lsls	r2, r3, #3
 8011a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a24:	18d3      	adds	r3, r2, r3
 8011a26:	4a22      	ldr	r2, [pc, #136]	@ (8011ab0 <USB_ActivateEndpoint+0x2cc>)
 8011a28:	4694      	mov	ip, r2
 8011a2a:	4463      	add	r3, ip
 8011a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8011a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a30:	881b      	ldrh	r3, [r3, #0]
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	059b      	lsls	r3, r3, #22
 8011a36:	0d9b      	lsrs	r3, r3, #22
 8011a38:	b29a      	uxth	r2, r3
 8011a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a3c:	801a      	strh	r2, [r3, #0]
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	691b      	ldr	r3, [r3, #16]
 8011a42:	2b3e      	cmp	r3, #62	@ 0x3e
 8011a44:	d91a      	bls.n	8011a7c <USB_ActivateEndpoint+0x298>
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	691b      	ldr	r3, [r3, #16]
 8011a4a:	095b      	lsrs	r3, r3, #5
 8011a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011a4e:	683b      	ldr	r3, [r7, #0]
 8011a50:	691b      	ldr	r3, [r3, #16]
 8011a52:	221f      	movs	r2, #31
 8011a54:	4013      	ands	r3, r2
 8011a56:	d102      	bne.n	8011a5e <USB_ActivateEndpoint+0x27a>
 8011a58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011a5a:	3b01      	subs	r3, #1
 8011a5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a60:	881b      	ldrh	r3, [r3, #0]
 8011a62:	b29a      	uxth	r2, r3
 8011a64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011a66:	b29b      	uxth	r3, r3
 8011a68:	029b      	lsls	r3, r3, #10
 8011a6a:	b29b      	uxth	r3, r3
 8011a6c:	4313      	orrs	r3, r2
 8011a6e:	b29b      	uxth	r3, r3
 8011a70:	4a10      	ldr	r2, [pc, #64]	@ (8011ab4 <USB_ActivateEndpoint+0x2d0>)
 8011a72:	4313      	orrs	r3, r2
 8011a74:	b29a      	uxth	r2, r3
 8011a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a78:	801a      	strh	r2, [r3, #0]
 8011a7a:	e034      	b.n	8011ae6 <USB_ActivateEndpoint+0x302>
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	691b      	ldr	r3, [r3, #16]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d119      	bne.n	8011ab8 <USB_ActivateEndpoint+0x2d4>
 8011a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a86:	881b      	ldrh	r3, [r3, #0]
 8011a88:	b29b      	uxth	r3, r3
 8011a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8011ab4 <USB_ActivateEndpoint+0x2d0>)
 8011a8c:	4313      	orrs	r3, r2
 8011a8e:	b29a      	uxth	r2, r3
 8011a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a92:	801a      	strh	r2, [r3, #0]
 8011a94:	e027      	b.n	8011ae6 <USB_ActivateEndpoint+0x302>
 8011a96:	46c0      	nop			@ (mov r8, r8)
 8011a98:	ffff898f 	.word	0xffff898f
 8011a9c:	ffff8080 	.word	0xffff8080
 8011aa0:	ffff8f8f 	.word	0xffff8f8f
 8011aa4:	ffff80c0 	.word	0xffff80c0
 8011aa8:	ffff8fbf 	.word	0xffff8fbf
 8011aac:	00000404 	.word	0x00000404
 8011ab0:	00000406 	.word	0x00000406
 8011ab4:	ffff8000 	.word	0xffff8000
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	691b      	ldr	r3, [r3, #16]
 8011abc:	085b      	lsrs	r3, r3, #1
 8011abe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	691b      	ldr	r3, [r3, #16]
 8011ac4:	2201      	movs	r2, #1
 8011ac6:	4013      	ands	r3, r2
 8011ac8:	d002      	beq.n	8011ad0 <USB_ActivateEndpoint+0x2ec>
 8011aca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011acc:	3301      	adds	r3, #1
 8011ace:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ad2:	881b      	ldrh	r3, [r3, #0]
 8011ad4:	b29a      	uxth	r2, r3
 8011ad6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011ad8:	b29b      	uxth	r3, r3
 8011ada:	029b      	lsls	r3, r3, #10
 8011adc:	b29b      	uxth	r3, r3
 8011ade:	4313      	orrs	r3, r2
 8011ae0:	b29a      	uxth	r2, r3
 8011ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ae4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011ae6:	687a      	ldr	r2, [r7, #4]
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	781b      	ldrb	r3, [r3, #0]
 8011aec:	009b      	lsls	r3, r3, #2
 8011aee:	18d2      	adds	r2, r2, r3
 8011af0:	2122      	movs	r1, #34	@ 0x22
 8011af2:	187b      	adds	r3, r7, r1
 8011af4:	8812      	ldrh	r2, [r2, #0]
 8011af6:	801a      	strh	r2, [r3, #0]
 8011af8:	187b      	adds	r3, r7, r1
 8011afa:	881a      	ldrh	r2, [r3, #0]
 8011afc:	2380      	movs	r3, #128	@ 0x80
 8011afe:	01db      	lsls	r3, r3, #7
 8011b00:	4013      	ands	r3, r2
 8011b02:	d016      	beq.n	8011b32 <USB_ActivateEndpoint+0x34e>
 8011b04:	687a      	ldr	r2, [r7, #4]
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	781b      	ldrb	r3, [r3, #0]
 8011b0a:	009b      	lsls	r3, r3, #2
 8011b0c:	18d3      	adds	r3, r2, r3
 8011b0e:	881b      	ldrh	r3, [r3, #0]
 8011b10:	b29a      	uxth	r2, r3
 8011b12:	2020      	movs	r0, #32
 8011b14:	183b      	adds	r3, r7, r0
 8011b16:	49dd      	ldr	r1, [pc, #884]	@ (8011e8c <USB_ActivateEndpoint+0x6a8>)
 8011b18:	400a      	ands	r2, r1
 8011b1a:	801a      	strh	r2, [r3, #0]
 8011b1c:	687a      	ldr	r2, [r7, #4]
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	781b      	ldrb	r3, [r3, #0]
 8011b22:	009b      	lsls	r3, r3, #2
 8011b24:	18d3      	adds	r3, r2, r3
 8011b26:	183a      	adds	r2, r7, r0
 8011b28:	8812      	ldrh	r2, [r2, #0]
 8011b2a:	49d9      	ldr	r1, [pc, #868]	@ (8011e90 <USB_ActivateEndpoint+0x6ac>)
 8011b2c:	430a      	orrs	r2, r1
 8011b2e:	b292      	uxth	r2, r2
 8011b30:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	781b      	ldrb	r3, [r3, #0]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d125      	bne.n	8011b86 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011b3a:	687a      	ldr	r2, [r7, #4]
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	781b      	ldrb	r3, [r3, #0]
 8011b40:	009b      	lsls	r3, r3, #2
 8011b42:	18d3      	adds	r3, r2, r3
 8011b44:	881b      	ldrh	r3, [r3, #0]
 8011b46:	b29a      	uxth	r2, r3
 8011b48:	201c      	movs	r0, #28
 8011b4a:	183b      	adds	r3, r7, r0
 8011b4c:	49d1      	ldr	r1, [pc, #836]	@ (8011e94 <USB_ActivateEndpoint+0x6b0>)
 8011b4e:	400a      	ands	r2, r1
 8011b50:	801a      	strh	r2, [r3, #0]
 8011b52:	183b      	adds	r3, r7, r0
 8011b54:	183a      	adds	r2, r7, r0
 8011b56:	8812      	ldrh	r2, [r2, #0]
 8011b58:	2180      	movs	r1, #128	@ 0x80
 8011b5a:	0149      	lsls	r1, r1, #5
 8011b5c:	404a      	eors	r2, r1
 8011b5e:	801a      	strh	r2, [r3, #0]
 8011b60:	183b      	adds	r3, r7, r0
 8011b62:	183a      	adds	r2, r7, r0
 8011b64:	8812      	ldrh	r2, [r2, #0]
 8011b66:	2180      	movs	r1, #128	@ 0x80
 8011b68:	0189      	lsls	r1, r1, #6
 8011b6a:	404a      	eors	r2, r1
 8011b6c:	801a      	strh	r2, [r3, #0]
 8011b6e:	687a      	ldr	r2, [r7, #4]
 8011b70:	683b      	ldr	r3, [r7, #0]
 8011b72:	781b      	ldrb	r3, [r3, #0]
 8011b74:	009b      	lsls	r3, r3, #2
 8011b76:	18d3      	adds	r3, r2, r3
 8011b78:	183a      	adds	r2, r7, r0
 8011b7a:	8812      	ldrh	r2, [r2, #0]
 8011b7c:	49c6      	ldr	r1, [pc, #792]	@ (8011e98 <USB_ActivateEndpoint+0x6b4>)
 8011b7e:	430a      	orrs	r2, r1
 8011b80:	b292      	uxth	r2, r2
 8011b82:	801a      	strh	r2, [r3, #0]
 8011b84:	e1c2      	b.n	8011f0c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8011b86:	687a      	ldr	r2, [r7, #4]
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	781b      	ldrb	r3, [r3, #0]
 8011b8c:	009b      	lsls	r3, r3, #2
 8011b8e:	18d3      	adds	r3, r2, r3
 8011b90:	881b      	ldrh	r3, [r3, #0]
 8011b92:	b29a      	uxth	r2, r3
 8011b94:	201e      	movs	r0, #30
 8011b96:	183b      	adds	r3, r7, r0
 8011b98:	49be      	ldr	r1, [pc, #760]	@ (8011e94 <USB_ActivateEndpoint+0x6b0>)
 8011b9a:	400a      	ands	r2, r1
 8011b9c:	801a      	strh	r2, [r3, #0]
 8011b9e:	183b      	adds	r3, r7, r0
 8011ba0:	183a      	adds	r2, r7, r0
 8011ba2:	8812      	ldrh	r2, [r2, #0]
 8011ba4:	2180      	movs	r1, #128	@ 0x80
 8011ba6:	0189      	lsls	r1, r1, #6
 8011ba8:	404a      	eors	r2, r1
 8011baa:	801a      	strh	r2, [r3, #0]
 8011bac:	687a      	ldr	r2, [r7, #4]
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	781b      	ldrb	r3, [r3, #0]
 8011bb2:	009b      	lsls	r3, r3, #2
 8011bb4:	18d3      	adds	r3, r2, r3
 8011bb6:	183a      	adds	r2, r7, r0
 8011bb8:	8812      	ldrh	r2, [r2, #0]
 8011bba:	49b7      	ldr	r1, [pc, #732]	@ (8011e98 <USB_ActivateEndpoint+0x6b4>)
 8011bbc:	430a      	orrs	r2, r1
 8011bbe:	b292      	uxth	r2, r2
 8011bc0:	801a      	strh	r2, [r3, #0]
 8011bc2:	e1a3      	b.n	8011f0c <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	78db      	ldrb	r3, [r3, #3]
 8011bc8:	2b02      	cmp	r3, #2
 8011bca:	d117      	bne.n	8011bfc <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011bcc:	687a      	ldr	r2, [r7, #4]
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	009b      	lsls	r3, r3, #2
 8011bd4:	18d3      	adds	r3, r2, r3
 8011bd6:	881b      	ldrh	r3, [r3, #0]
 8011bd8:	b29a      	uxth	r2, r3
 8011bda:	2062      	movs	r0, #98	@ 0x62
 8011bdc:	183b      	adds	r3, r7, r0
 8011bde:	49ab      	ldr	r1, [pc, #684]	@ (8011e8c <USB_ActivateEndpoint+0x6a8>)
 8011be0:	400a      	ands	r2, r1
 8011be2:	801a      	strh	r2, [r3, #0]
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	009b      	lsls	r3, r3, #2
 8011bec:	18d3      	adds	r3, r2, r3
 8011bee:	183a      	adds	r2, r7, r0
 8011bf0:	8812      	ldrh	r2, [r2, #0]
 8011bf2:	49aa      	ldr	r1, [pc, #680]	@ (8011e9c <USB_ActivateEndpoint+0x6b8>)
 8011bf4:	430a      	orrs	r2, r1
 8011bf6:	b292      	uxth	r2, r2
 8011bf8:	801a      	strh	r2, [r3, #0]
 8011bfa:	e016      	b.n	8011c2a <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011bfc:	687a      	ldr	r2, [r7, #4]
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	009b      	lsls	r3, r3, #2
 8011c04:	18d3      	adds	r3, r2, r3
 8011c06:	881b      	ldrh	r3, [r3, #0]
 8011c08:	b29a      	uxth	r2, r3
 8011c0a:	2064      	movs	r0, #100	@ 0x64
 8011c0c:	183b      	adds	r3, r7, r0
 8011c0e:	49a4      	ldr	r1, [pc, #656]	@ (8011ea0 <USB_ActivateEndpoint+0x6bc>)
 8011c10:	400a      	ands	r2, r1
 8011c12:	801a      	strh	r2, [r3, #0]
 8011c14:	687a      	ldr	r2, [r7, #4]
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	781b      	ldrb	r3, [r3, #0]
 8011c1a:	009b      	lsls	r3, r3, #2
 8011c1c:	18d3      	adds	r3, r2, r3
 8011c1e:	183a      	adds	r2, r7, r0
 8011c20:	8812      	ldrh	r2, [r2, #0]
 8011c22:	499d      	ldr	r1, [pc, #628]	@ (8011e98 <USB_ActivateEndpoint+0x6b4>)
 8011c24:	430a      	orrs	r2, r1
 8011c26:	b292      	uxth	r2, r2
 8011c28:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2250      	movs	r2, #80	@ 0x50
 8011c32:	5a9b      	ldrh	r3, [r3, r2]
 8011c34:	b29b      	uxth	r3, r3
 8011c36:	001a      	movs	r2, r3
 8011c38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c3a:	189b      	adds	r3, r3, r2
 8011c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	781b      	ldrb	r3, [r3, #0]
 8011c42:	00da      	lsls	r2, r3, #3
 8011c44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c46:	18d3      	adds	r3, r2, r3
 8011c48:	2280      	movs	r2, #128	@ 0x80
 8011c4a:	00d2      	lsls	r2, r2, #3
 8011c4c:	4694      	mov	ip, r2
 8011c4e:	4463      	add	r3, ip
 8011c50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	891b      	ldrh	r3, [r3, #8]
 8011c56:	085b      	lsrs	r3, r3, #1
 8011c58:	b29b      	uxth	r3, r3
 8011c5a:	18db      	adds	r3, r3, r3
 8011c5c:	b29a      	uxth	r2, r3
 8011c5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011c60:	801a      	strh	r2, [r3, #0]
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	657b      	str	r3, [r7, #84]	@ 0x54
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2250      	movs	r2, #80	@ 0x50
 8011c6a:	5a9b      	ldrh	r3, [r3, r2]
 8011c6c:	b29b      	uxth	r3, r3
 8011c6e:	001a      	movs	r2, r3
 8011c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c72:	189b      	adds	r3, r3, r2
 8011c74:	657b      	str	r3, [r7, #84]	@ 0x54
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	781b      	ldrb	r3, [r3, #0]
 8011c7a:	00da      	lsls	r2, r3, #3
 8011c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c7e:	18d3      	adds	r3, r2, r3
 8011c80:	4a88      	ldr	r2, [pc, #544]	@ (8011ea4 <USB_ActivateEndpoint+0x6c0>)
 8011c82:	4694      	mov	ip, r2
 8011c84:	4463      	add	r3, ip
 8011c86:	653b      	str	r3, [r7, #80]	@ 0x50
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	895b      	ldrh	r3, [r3, #10]
 8011c8c:	085b      	lsrs	r3, r3, #1
 8011c8e:	b29b      	uxth	r3, r3
 8011c90:	18db      	adds	r3, r3, r3
 8011c92:	b29a      	uxth	r2, r3
 8011c94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c96:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	785b      	ldrb	r3, [r3, #1]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d000      	beq.n	8011ca2 <USB_ActivateEndpoint+0x4be>
 8011ca0:	e087      	b.n	8011db2 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011ca2:	687a      	ldr	r2, [r7, #4]
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	781b      	ldrb	r3, [r3, #0]
 8011ca8:	009b      	lsls	r3, r3, #2
 8011caa:	18d2      	adds	r2, r2, r3
 8011cac:	2140      	movs	r1, #64	@ 0x40
 8011cae:	187b      	adds	r3, r7, r1
 8011cb0:	8812      	ldrh	r2, [r2, #0]
 8011cb2:	801a      	strh	r2, [r3, #0]
 8011cb4:	187b      	adds	r3, r7, r1
 8011cb6:	881a      	ldrh	r2, [r3, #0]
 8011cb8:	2380      	movs	r3, #128	@ 0x80
 8011cba:	01db      	lsls	r3, r3, #7
 8011cbc:	4013      	ands	r3, r2
 8011cbe:	d016      	beq.n	8011cee <USB_ActivateEndpoint+0x50a>
 8011cc0:	687a      	ldr	r2, [r7, #4]
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	781b      	ldrb	r3, [r3, #0]
 8011cc6:	009b      	lsls	r3, r3, #2
 8011cc8:	18d3      	adds	r3, r2, r3
 8011cca:	881b      	ldrh	r3, [r3, #0]
 8011ccc:	b29a      	uxth	r2, r3
 8011cce:	203e      	movs	r0, #62	@ 0x3e
 8011cd0:	183b      	adds	r3, r7, r0
 8011cd2:	496e      	ldr	r1, [pc, #440]	@ (8011e8c <USB_ActivateEndpoint+0x6a8>)
 8011cd4:	400a      	ands	r2, r1
 8011cd6:	801a      	strh	r2, [r3, #0]
 8011cd8:	687a      	ldr	r2, [r7, #4]
 8011cda:	683b      	ldr	r3, [r7, #0]
 8011cdc:	781b      	ldrb	r3, [r3, #0]
 8011cde:	009b      	lsls	r3, r3, #2
 8011ce0:	18d3      	adds	r3, r2, r3
 8011ce2:	183a      	adds	r2, r7, r0
 8011ce4:	8812      	ldrh	r2, [r2, #0]
 8011ce6:	496a      	ldr	r1, [pc, #424]	@ (8011e90 <USB_ActivateEndpoint+0x6ac>)
 8011ce8:	430a      	orrs	r2, r1
 8011cea:	b292      	uxth	r2, r2
 8011cec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011cee:	687a      	ldr	r2, [r7, #4]
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	781b      	ldrb	r3, [r3, #0]
 8011cf4:	009b      	lsls	r3, r3, #2
 8011cf6:	18d2      	adds	r2, r2, r3
 8011cf8:	213c      	movs	r1, #60	@ 0x3c
 8011cfa:	187b      	adds	r3, r7, r1
 8011cfc:	8812      	ldrh	r2, [r2, #0]
 8011cfe:	801a      	strh	r2, [r3, #0]
 8011d00:	187b      	adds	r3, r7, r1
 8011d02:	881b      	ldrh	r3, [r3, #0]
 8011d04:	2240      	movs	r2, #64	@ 0x40
 8011d06:	4013      	ands	r3, r2
 8011d08:	d016      	beq.n	8011d38 <USB_ActivateEndpoint+0x554>
 8011d0a:	687a      	ldr	r2, [r7, #4]
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	009b      	lsls	r3, r3, #2
 8011d12:	18d3      	adds	r3, r2, r3
 8011d14:	881b      	ldrh	r3, [r3, #0]
 8011d16:	b29a      	uxth	r2, r3
 8011d18:	203a      	movs	r0, #58	@ 0x3a
 8011d1a:	183b      	adds	r3, r7, r0
 8011d1c:	495b      	ldr	r1, [pc, #364]	@ (8011e8c <USB_ActivateEndpoint+0x6a8>)
 8011d1e:	400a      	ands	r2, r1
 8011d20:	801a      	strh	r2, [r3, #0]
 8011d22:	687a      	ldr	r2, [r7, #4]
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	009b      	lsls	r3, r3, #2
 8011d2a:	18d3      	adds	r3, r2, r3
 8011d2c:	183a      	adds	r2, r7, r0
 8011d2e:	8812      	ldrh	r2, [r2, #0]
 8011d30:	495d      	ldr	r1, [pc, #372]	@ (8011ea8 <USB_ActivateEndpoint+0x6c4>)
 8011d32:	430a      	orrs	r2, r1
 8011d34:	b292      	uxth	r2, r2
 8011d36:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011d38:	687a      	ldr	r2, [r7, #4]
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	781b      	ldrb	r3, [r3, #0]
 8011d3e:	009b      	lsls	r3, r3, #2
 8011d40:	18d3      	adds	r3, r2, r3
 8011d42:	881b      	ldrh	r3, [r3, #0]
 8011d44:	b29a      	uxth	r2, r3
 8011d46:	2038      	movs	r0, #56	@ 0x38
 8011d48:	183b      	adds	r3, r7, r0
 8011d4a:	4952      	ldr	r1, [pc, #328]	@ (8011e94 <USB_ActivateEndpoint+0x6b0>)
 8011d4c:	400a      	ands	r2, r1
 8011d4e:	801a      	strh	r2, [r3, #0]
 8011d50:	183b      	adds	r3, r7, r0
 8011d52:	183a      	adds	r2, r7, r0
 8011d54:	8812      	ldrh	r2, [r2, #0]
 8011d56:	2180      	movs	r1, #128	@ 0x80
 8011d58:	0149      	lsls	r1, r1, #5
 8011d5a:	404a      	eors	r2, r1
 8011d5c:	801a      	strh	r2, [r3, #0]
 8011d5e:	183b      	adds	r3, r7, r0
 8011d60:	183a      	adds	r2, r7, r0
 8011d62:	8812      	ldrh	r2, [r2, #0]
 8011d64:	2180      	movs	r1, #128	@ 0x80
 8011d66:	0189      	lsls	r1, r1, #6
 8011d68:	404a      	eors	r2, r1
 8011d6a:	801a      	strh	r2, [r3, #0]
 8011d6c:	687a      	ldr	r2, [r7, #4]
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	781b      	ldrb	r3, [r3, #0]
 8011d72:	009b      	lsls	r3, r3, #2
 8011d74:	18d3      	adds	r3, r2, r3
 8011d76:	183a      	adds	r2, r7, r0
 8011d78:	8812      	ldrh	r2, [r2, #0]
 8011d7a:	4947      	ldr	r1, [pc, #284]	@ (8011e98 <USB_ActivateEndpoint+0x6b4>)
 8011d7c:	430a      	orrs	r2, r1
 8011d7e:	b292      	uxth	r2, r2
 8011d80:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011d82:	687a      	ldr	r2, [r7, #4]
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	009b      	lsls	r3, r3, #2
 8011d8a:	18d3      	adds	r3, r2, r3
 8011d8c:	881b      	ldrh	r3, [r3, #0]
 8011d8e:	b29a      	uxth	r2, r3
 8011d90:	2036      	movs	r0, #54	@ 0x36
 8011d92:	183b      	adds	r3, r7, r0
 8011d94:	4945      	ldr	r1, [pc, #276]	@ (8011eac <USB_ActivateEndpoint+0x6c8>)
 8011d96:	400a      	ands	r2, r1
 8011d98:	801a      	strh	r2, [r3, #0]
 8011d9a:	687a      	ldr	r2, [r7, #4]
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	009b      	lsls	r3, r3, #2
 8011da2:	18d3      	adds	r3, r2, r3
 8011da4:	183a      	adds	r2, r7, r0
 8011da6:	8812      	ldrh	r2, [r2, #0]
 8011da8:	493b      	ldr	r1, [pc, #236]	@ (8011e98 <USB_ActivateEndpoint+0x6b4>)
 8011daa:	430a      	orrs	r2, r1
 8011dac:	b292      	uxth	r2, r2
 8011dae:	801a      	strh	r2, [r3, #0]
 8011db0:	e0ac      	b.n	8011f0c <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011db2:	687a      	ldr	r2, [r7, #4]
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	781b      	ldrb	r3, [r3, #0]
 8011db8:	009b      	lsls	r3, r3, #2
 8011dba:	18d2      	adds	r2, r2, r3
 8011dbc:	214e      	movs	r1, #78	@ 0x4e
 8011dbe:	187b      	adds	r3, r7, r1
 8011dc0:	8812      	ldrh	r2, [r2, #0]
 8011dc2:	801a      	strh	r2, [r3, #0]
 8011dc4:	187b      	adds	r3, r7, r1
 8011dc6:	881a      	ldrh	r2, [r3, #0]
 8011dc8:	2380      	movs	r3, #128	@ 0x80
 8011dca:	01db      	lsls	r3, r3, #7
 8011dcc:	4013      	ands	r3, r2
 8011dce:	d016      	beq.n	8011dfe <USB_ActivateEndpoint+0x61a>
 8011dd0:	687a      	ldr	r2, [r7, #4]
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	781b      	ldrb	r3, [r3, #0]
 8011dd6:	009b      	lsls	r3, r3, #2
 8011dd8:	18d3      	adds	r3, r2, r3
 8011dda:	881b      	ldrh	r3, [r3, #0]
 8011ddc:	b29a      	uxth	r2, r3
 8011dde:	204c      	movs	r0, #76	@ 0x4c
 8011de0:	183b      	adds	r3, r7, r0
 8011de2:	492a      	ldr	r1, [pc, #168]	@ (8011e8c <USB_ActivateEndpoint+0x6a8>)
 8011de4:	400a      	ands	r2, r1
 8011de6:	801a      	strh	r2, [r3, #0]
 8011de8:	687a      	ldr	r2, [r7, #4]
 8011dea:	683b      	ldr	r3, [r7, #0]
 8011dec:	781b      	ldrb	r3, [r3, #0]
 8011dee:	009b      	lsls	r3, r3, #2
 8011df0:	18d3      	adds	r3, r2, r3
 8011df2:	183a      	adds	r2, r7, r0
 8011df4:	8812      	ldrh	r2, [r2, #0]
 8011df6:	4926      	ldr	r1, [pc, #152]	@ (8011e90 <USB_ActivateEndpoint+0x6ac>)
 8011df8:	430a      	orrs	r2, r1
 8011dfa:	b292      	uxth	r2, r2
 8011dfc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011dfe:	687a      	ldr	r2, [r7, #4]
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	781b      	ldrb	r3, [r3, #0]
 8011e04:	009b      	lsls	r3, r3, #2
 8011e06:	18d2      	adds	r2, r2, r3
 8011e08:	214a      	movs	r1, #74	@ 0x4a
 8011e0a:	187b      	adds	r3, r7, r1
 8011e0c:	8812      	ldrh	r2, [r2, #0]
 8011e0e:	801a      	strh	r2, [r3, #0]
 8011e10:	187b      	adds	r3, r7, r1
 8011e12:	881b      	ldrh	r3, [r3, #0]
 8011e14:	2240      	movs	r2, #64	@ 0x40
 8011e16:	4013      	ands	r3, r2
 8011e18:	d016      	beq.n	8011e48 <USB_ActivateEndpoint+0x664>
 8011e1a:	687a      	ldr	r2, [r7, #4]
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	009b      	lsls	r3, r3, #2
 8011e22:	18d3      	adds	r3, r2, r3
 8011e24:	881b      	ldrh	r3, [r3, #0]
 8011e26:	b29a      	uxth	r2, r3
 8011e28:	2048      	movs	r0, #72	@ 0x48
 8011e2a:	183b      	adds	r3, r7, r0
 8011e2c:	4917      	ldr	r1, [pc, #92]	@ (8011e8c <USB_ActivateEndpoint+0x6a8>)
 8011e2e:	400a      	ands	r2, r1
 8011e30:	801a      	strh	r2, [r3, #0]
 8011e32:	687a      	ldr	r2, [r7, #4]
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	009b      	lsls	r3, r3, #2
 8011e3a:	18d3      	adds	r3, r2, r3
 8011e3c:	183a      	adds	r2, r7, r0
 8011e3e:	8812      	ldrh	r2, [r2, #0]
 8011e40:	4919      	ldr	r1, [pc, #100]	@ (8011ea8 <USB_ActivateEndpoint+0x6c4>)
 8011e42:	430a      	orrs	r2, r1
 8011e44:	b292      	uxth	r2, r2
 8011e46:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	78db      	ldrb	r3, [r3, #3]
 8011e4c:	2b01      	cmp	r3, #1
 8011e4e:	d02f      	beq.n	8011eb0 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011e50:	687a      	ldr	r2, [r7, #4]
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	781b      	ldrb	r3, [r3, #0]
 8011e56:	009b      	lsls	r3, r3, #2
 8011e58:	18d3      	adds	r3, r2, r3
 8011e5a:	881b      	ldrh	r3, [r3, #0]
 8011e5c:	b29a      	uxth	r2, r3
 8011e5e:	2044      	movs	r0, #68	@ 0x44
 8011e60:	183b      	adds	r3, r7, r0
 8011e62:	4912      	ldr	r1, [pc, #72]	@ (8011eac <USB_ActivateEndpoint+0x6c8>)
 8011e64:	400a      	ands	r2, r1
 8011e66:	801a      	strh	r2, [r3, #0]
 8011e68:	183b      	adds	r3, r7, r0
 8011e6a:	183a      	adds	r2, r7, r0
 8011e6c:	8812      	ldrh	r2, [r2, #0]
 8011e6e:	2120      	movs	r1, #32
 8011e70:	404a      	eors	r2, r1
 8011e72:	801a      	strh	r2, [r3, #0]
 8011e74:	687a      	ldr	r2, [r7, #4]
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	781b      	ldrb	r3, [r3, #0]
 8011e7a:	009b      	lsls	r3, r3, #2
 8011e7c:	18d3      	adds	r3, r2, r3
 8011e7e:	183a      	adds	r2, r7, r0
 8011e80:	8812      	ldrh	r2, [r2, #0]
 8011e82:	4905      	ldr	r1, [pc, #20]	@ (8011e98 <USB_ActivateEndpoint+0x6b4>)
 8011e84:	430a      	orrs	r2, r1
 8011e86:	b292      	uxth	r2, r2
 8011e88:	801a      	strh	r2, [r3, #0]
 8011e8a:	e028      	b.n	8011ede <USB_ActivateEndpoint+0x6fa>
 8011e8c:	ffff8f8f 	.word	0xffff8f8f
 8011e90:	ffffc080 	.word	0xffffc080
 8011e94:	ffffbf8f 	.word	0xffffbf8f
 8011e98:	ffff8080 	.word	0xffff8080
 8011e9c:	ffff8180 	.word	0xffff8180
 8011ea0:	ffff8e8f 	.word	0xffff8e8f
 8011ea4:	00000404 	.word	0x00000404
 8011ea8:	ffff80c0 	.word	0xffff80c0
 8011eac:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011eb0:	687a      	ldr	r2, [r7, #4]
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	781b      	ldrb	r3, [r3, #0]
 8011eb6:	009b      	lsls	r3, r3, #2
 8011eb8:	18d3      	adds	r3, r2, r3
 8011eba:	881b      	ldrh	r3, [r3, #0]
 8011ebc:	b29a      	uxth	r2, r3
 8011ebe:	2046      	movs	r0, #70	@ 0x46
 8011ec0:	183b      	adds	r3, r7, r0
 8011ec2:	4916      	ldr	r1, [pc, #88]	@ (8011f1c <USB_ActivateEndpoint+0x738>)
 8011ec4:	400a      	ands	r2, r1
 8011ec6:	801a      	strh	r2, [r3, #0]
 8011ec8:	687a      	ldr	r2, [r7, #4]
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	781b      	ldrb	r3, [r3, #0]
 8011ece:	009b      	lsls	r3, r3, #2
 8011ed0:	18d3      	adds	r3, r2, r3
 8011ed2:	183a      	adds	r2, r7, r0
 8011ed4:	8812      	ldrh	r2, [r2, #0]
 8011ed6:	4912      	ldr	r1, [pc, #72]	@ (8011f20 <USB_ActivateEndpoint+0x73c>)
 8011ed8:	430a      	orrs	r2, r1
 8011eda:	b292      	uxth	r2, r2
 8011edc:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011ede:	687a      	ldr	r2, [r7, #4]
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	009b      	lsls	r3, r3, #2
 8011ee6:	18d3      	adds	r3, r2, r3
 8011ee8:	881b      	ldrh	r3, [r3, #0]
 8011eea:	b29a      	uxth	r2, r3
 8011eec:	2042      	movs	r0, #66	@ 0x42
 8011eee:	183b      	adds	r3, r7, r0
 8011ef0:	490c      	ldr	r1, [pc, #48]	@ (8011f24 <USB_ActivateEndpoint+0x740>)
 8011ef2:	400a      	ands	r2, r1
 8011ef4:	801a      	strh	r2, [r3, #0]
 8011ef6:	687a      	ldr	r2, [r7, #4]
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	781b      	ldrb	r3, [r3, #0]
 8011efc:	009b      	lsls	r3, r3, #2
 8011efe:	18d3      	adds	r3, r2, r3
 8011f00:	183a      	adds	r2, r7, r0
 8011f02:	8812      	ldrh	r2, [r2, #0]
 8011f04:	4906      	ldr	r1, [pc, #24]	@ (8011f20 <USB_ActivateEndpoint+0x73c>)
 8011f06:	430a      	orrs	r2, r1
 8011f08:	b292      	uxth	r2, r2
 8011f0a:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011f0c:	236f      	movs	r3, #111	@ 0x6f
 8011f0e:	18fb      	adds	r3, r7, r3
 8011f10:	781b      	ldrb	r3, [r3, #0]
}
 8011f12:	0018      	movs	r0, r3
 8011f14:	46bd      	mov	sp, r7
 8011f16:	b01c      	add	sp, #112	@ 0x70
 8011f18:	bd80      	pop	{r7, pc}
 8011f1a:	46c0      	nop			@ (mov r8, r8)
 8011f1c:	ffff8fbf 	.word	0xffff8fbf
 8011f20:	ffff8080 	.word	0xffff8080
 8011f24:	ffffbf8f 	.word	0xffffbf8f

08011f28 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b08c      	sub	sp, #48	@ 0x30
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011f32:	683b      	ldr	r3, [r7, #0]
 8011f34:	7b1b      	ldrb	r3, [r3, #12]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d000      	beq.n	8011f3c <USB_DeactivateEndpoint+0x14>
 8011f3a:	e07e      	b.n	801203a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	785b      	ldrb	r3, [r3, #1]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d03c      	beq.n	8011fbe <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011f44:	687a      	ldr	r2, [r7, #4]
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	781b      	ldrb	r3, [r3, #0]
 8011f4a:	009b      	lsls	r3, r3, #2
 8011f4c:	18d2      	adds	r2, r2, r3
 8011f4e:	210c      	movs	r1, #12
 8011f50:	187b      	adds	r3, r7, r1
 8011f52:	8812      	ldrh	r2, [r2, #0]
 8011f54:	801a      	strh	r2, [r3, #0]
 8011f56:	187b      	adds	r3, r7, r1
 8011f58:	881b      	ldrh	r3, [r3, #0]
 8011f5a:	2240      	movs	r2, #64	@ 0x40
 8011f5c:	4013      	ands	r3, r2
 8011f5e:	d016      	beq.n	8011f8e <USB_DeactivateEndpoint+0x66>
 8011f60:	687a      	ldr	r2, [r7, #4]
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	781b      	ldrb	r3, [r3, #0]
 8011f66:	009b      	lsls	r3, r3, #2
 8011f68:	18d3      	adds	r3, r2, r3
 8011f6a:	881b      	ldrh	r3, [r3, #0]
 8011f6c:	b29a      	uxth	r2, r3
 8011f6e:	200a      	movs	r0, #10
 8011f70:	183b      	adds	r3, r7, r0
 8011f72:	49c7      	ldr	r1, [pc, #796]	@ (8012290 <USB_DeactivateEndpoint+0x368>)
 8011f74:	400a      	ands	r2, r1
 8011f76:	801a      	strh	r2, [r3, #0]
 8011f78:	687a      	ldr	r2, [r7, #4]
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	781b      	ldrb	r3, [r3, #0]
 8011f7e:	009b      	lsls	r3, r3, #2
 8011f80:	18d3      	adds	r3, r2, r3
 8011f82:	183a      	adds	r2, r7, r0
 8011f84:	8812      	ldrh	r2, [r2, #0]
 8011f86:	49c3      	ldr	r1, [pc, #780]	@ (8012294 <USB_DeactivateEndpoint+0x36c>)
 8011f88:	430a      	orrs	r2, r1
 8011f8a:	b292      	uxth	r2, r2
 8011f8c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011f8e:	687a      	ldr	r2, [r7, #4]
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	781b      	ldrb	r3, [r3, #0]
 8011f94:	009b      	lsls	r3, r3, #2
 8011f96:	18d3      	adds	r3, r2, r3
 8011f98:	881b      	ldrh	r3, [r3, #0]
 8011f9a:	b29a      	uxth	r2, r3
 8011f9c:	2008      	movs	r0, #8
 8011f9e:	183b      	adds	r3, r7, r0
 8011fa0:	49bd      	ldr	r1, [pc, #756]	@ (8012298 <USB_DeactivateEndpoint+0x370>)
 8011fa2:	400a      	ands	r2, r1
 8011fa4:	801a      	strh	r2, [r3, #0]
 8011fa6:	687a      	ldr	r2, [r7, #4]
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	781b      	ldrb	r3, [r3, #0]
 8011fac:	009b      	lsls	r3, r3, #2
 8011fae:	18d3      	adds	r3, r2, r3
 8011fb0:	183a      	adds	r2, r7, r0
 8011fb2:	8812      	ldrh	r2, [r2, #0]
 8011fb4:	49b9      	ldr	r1, [pc, #740]	@ (801229c <USB_DeactivateEndpoint+0x374>)
 8011fb6:	430a      	orrs	r2, r1
 8011fb8:	b292      	uxth	r2, r2
 8011fba:	801a      	strh	r2, [r3, #0]
 8011fbc:	e163      	b.n	8012286 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011fbe:	687a      	ldr	r2, [r7, #4]
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	781b      	ldrb	r3, [r3, #0]
 8011fc4:	009b      	lsls	r3, r3, #2
 8011fc6:	18d2      	adds	r2, r2, r3
 8011fc8:	2112      	movs	r1, #18
 8011fca:	187b      	adds	r3, r7, r1
 8011fcc:	8812      	ldrh	r2, [r2, #0]
 8011fce:	801a      	strh	r2, [r3, #0]
 8011fd0:	187b      	adds	r3, r7, r1
 8011fd2:	881a      	ldrh	r2, [r3, #0]
 8011fd4:	2380      	movs	r3, #128	@ 0x80
 8011fd6:	01db      	lsls	r3, r3, #7
 8011fd8:	4013      	ands	r3, r2
 8011fda:	d016      	beq.n	801200a <USB_DeactivateEndpoint+0xe2>
 8011fdc:	687a      	ldr	r2, [r7, #4]
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	009b      	lsls	r3, r3, #2
 8011fe4:	18d3      	adds	r3, r2, r3
 8011fe6:	881b      	ldrh	r3, [r3, #0]
 8011fe8:	b29a      	uxth	r2, r3
 8011fea:	2010      	movs	r0, #16
 8011fec:	183b      	adds	r3, r7, r0
 8011fee:	49a8      	ldr	r1, [pc, #672]	@ (8012290 <USB_DeactivateEndpoint+0x368>)
 8011ff0:	400a      	ands	r2, r1
 8011ff2:	801a      	strh	r2, [r3, #0]
 8011ff4:	687a      	ldr	r2, [r7, #4]
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	781b      	ldrb	r3, [r3, #0]
 8011ffa:	009b      	lsls	r3, r3, #2
 8011ffc:	18d3      	adds	r3, r2, r3
 8011ffe:	183a      	adds	r2, r7, r0
 8012000:	8812      	ldrh	r2, [r2, #0]
 8012002:	49a7      	ldr	r1, [pc, #668]	@ (80122a0 <USB_DeactivateEndpoint+0x378>)
 8012004:	430a      	orrs	r2, r1
 8012006:	b292      	uxth	r2, r2
 8012008:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801200a:	687a      	ldr	r2, [r7, #4]
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	009b      	lsls	r3, r3, #2
 8012012:	18d3      	adds	r3, r2, r3
 8012014:	881b      	ldrh	r3, [r3, #0]
 8012016:	b29a      	uxth	r2, r3
 8012018:	200e      	movs	r0, #14
 801201a:	183b      	adds	r3, r7, r0
 801201c:	49a1      	ldr	r1, [pc, #644]	@ (80122a4 <USB_DeactivateEndpoint+0x37c>)
 801201e:	400a      	ands	r2, r1
 8012020:	801a      	strh	r2, [r3, #0]
 8012022:	687a      	ldr	r2, [r7, #4]
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	781b      	ldrb	r3, [r3, #0]
 8012028:	009b      	lsls	r3, r3, #2
 801202a:	18d3      	adds	r3, r2, r3
 801202c:	183a      	adds	r2, r7, r0
 801202e:	8812      	ldrh	r2, [r2, #0]
 8012030:	499a      	ldr	r1, [pc, #616]	@ (801229c <USB_DeactivateEndpoint+0x374>)
 8012032:	430a      	orrs	r2, r1
 8012034:	b292      	uxth	r2, r2
 8012036:	801a      	strh	r2, [r3, #0]
 8012038:	e125      	b.n	8012286 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	785b      	ldrb	r3, [r3, #1]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d000      	beq.n	8012044 <USB_DeactivateEndpoint+0x11c>
 8012042:	e090      	b.n	8012166 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012044:	687a      	ldr	r2, [r7, #4]
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	009b      	lsls	r3, r3, #2
 801204c:	18d2      	adds	r2, r2, r3
 801204e:	2120      	movs	r1, #32
 8012050:	187b      	adds	r3, r7, r1
 8012052:	8812      	ldrh	r2, [r2, #0]
 8012054:	801a      	strh	r2, [r3, #0]
 8012056:	187b      	adds	r3, r7, r1
 8012058:	881a      	ldrh	r2, [r3, #0]
 801205a:	2380      	movs	r3, #128	@ 0x80
 801205c:	01db      	lsls	r3, r3, #7
 801205e:	4013      	ands	r3, r2
 8012060:	d016      	beq.n	8012090 <USB_DeactivateEndpoint+0x168>
 8012062:	687a      	ldr	r2, [r7, #4]
 8012064:	683b      	ldr	r3, [r7, #0]
 8012066:	781b      	ldrb	r3, [r3, #0]
 8012068:	009b      	lsls	r3, r3, #2
 801206a:	18d3      	adds	r3, r2, r3
 801206c:	881b      	ldrh	r3, [r3, #0]
 801206e:	b29a      	uxth	r2, r3
 8012070:	201e      	movs	r0, #30
 8012072:	183b      	adds	r3, r7, r0
 8012074:	4986      	ldr	r1, [pc, #536]	@ (8012290 <USB_DeactivateEndpoint+0x368>)
 8012076:	400a      	ands	r2, r1
 8012078:	801a      	strh	r2, [r3, #0]
 801207a:	687a      	ldr	r2, [r7, #4]
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	781b      	ldrb	r3, [r3, #0]
 8012080:	009b      	lsls	r3, r3, #2
 8012082:	18d3      	adds	r3, r2, r3
 8012084:	183a      	adds	r2, r7, r0
 8012086:	8812      	ldrh	r2, [r2, #0]
 8012088:	4985      	ldr	r1, [pc, #532]	@ (80122a0 <USB_DeactivateEndpoint+0x378>)
 801208a:	430a      	orrs	r2, r1
 801208c:	b292      	uxth	r2, r2
 801208e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012090:	687a      	ldr	r2, [r7, #4]
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	781b      	ldrb	r3, [r3, #0]
 8012096:	009b      	lsls	r3, r3, #2
 8012098:	18d2      	adds	r2, r2, r3
 801209a:	211c      	movs	r1, #28
 801209c:	187b      	adds	r3, r7, r1
 801209e:	8812      	ldrh	r2, [r2, #0]
 80120a0:	801a      	strh	r2, [r3, #0]
 80120a2:	187b      	adds	r3, r7, r1
 80120a4:	881b      	ldrh	r3, [r3, #0]
 80120a6:	2240      	movs	r2, #64	@ 0x40
 80120a8:	4013      	ands	r3, r2
 80120aa:	d016      	beq.n	80120da <USB_DeactivateEndpoint+0x1b2>
 80120ac:	687a      	ldr	r2, [r7, #4]
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	781b      	ldrb	r3, [r3, #0]
 80120b2:	009b      	lsls	r3, r3, #2
 80120b4:	18d3      	adds	r3, r2, r3
 80120b6:	881b      	ldrh	r3, [r3, #0]
 80120b8:	b29a      	uxth	r2, r3
 80120ba:	201a      	movs	r0, #26
 80120bc:	183b      	adds	r3, r7, r0
 80120be:	4974      	ldr	r1, [pc, #464]	@ (8012290 <USB_DeactivateEndpoint+0x368>)
 80120c0:	400a      	ands	r2, r1
 80120c2:	801a      	strh	r2, [r3, #0]
 80120c4:	687a      	ldr	r2, [r7, #4]
 80120c6:	683b      	ldr	r3, [r7, #0]
 80120c8:	781b      	ldrb	r3, [r3, #0]
 80120ca:	009b      	lsls	r3, r3, #2
 80120cc:	18d3      	adds	r3, r2, r3
 80120ce:	183a      	adds	r2, r7, r0
 80120d0:	8812      	ldrh	r2, [r2, #0]
 80120d2:	4970      	ldr	r1, [pc, #448]	@ (8012294 <USB_DeactivateEndpoint+0x36c>)
 80120d4:	430a      	orrs	r2, r1
 80120d6:	b292      	uxth	r2, r2
 80120d8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80120da:	687a      	ldr	r2, [r7, #4]
 80120dc:	683b      	ldr	r3, [r7, #0]
 80120de:	781b      	ldrb	r3, [r3, #0]
 80120e0:	009b      	lsls	r3, r3, #2
 80120e2:	18d3      	adds	r3, r2, r3
 80120e4:	881b      	ldrh	r3, [r3, #0]
 80120e6:	b29a      	uxth	r2, r3
 80120e8:	2018      	movs	r0, #24
 80120ea:	183b      	adds	r3, r7, r0
 80120ec:	4968      	ldr	r1, [pc, #416]	@ (8012290 <USB_DeactivateEndpoint+0x368>)
 80120ee:	400a      	ands	r2, r1
 80120f0:	801a      	strh	r2, [r3, #0]
 80120f2:	687a      	ldr	r2, [r7, #4]
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	009b      	lsls	r3, r3, #2
 80120fa:	18d3      	adds	r3, r2, r3
 80120fc:	183a      	adds	r2, r7, r0
 80120fe:	8812      	ldrh	r2, [r2, #0]
 8012100:	4964      	ldr	r1, [pc, #400]	@ (8012294 <USB_DeactivateEndpoint+0x36c>)
 8012102:	430a      	orrs	r2, r1
 8012104:	b292      	uxth	r2, r2
 8012106:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012108:	687a      	ldr	r2, [r7, #4]
 801210a:	683b      	ldr	r3, [r7, #0]
 801210c:	781b      	ldrb	r3, [r3, #0]
 801210e:	009b      	lsls	r3, r3, #2
 8012110:	18d3      	adds	r3, r2, r3
 8012112:	881b      	ldrh	r3, [r3, #0]
 8012114:	b29a      	uxth	r2, r3
 8012116:	2016      	movs	r0, #22
 8012118:	183b      	adds	r3, r7, r0
 801211a:	4962      	ldr	r1, [pc, #392]	@ (80122a4 <USB_DeactivateEndpoint+0x37c>)
 801211c:	400a      	ands	r2, r1
 801211e:	801a      	strh	r2, [r3, #0]
 8012120:	687a      	ldr	r2, [r7, #4]
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	009b      	lsls	r3, r3, #2
 8012128:	18d3      	adds	r3, r2, r3
 801212a:	183a      	adds	r2, r7, r0
 801212c:	8812      	ldrh	r2, [r2, #0]
 801212e:	495b      	ldr	r1, [pc, #364]	@ (801229c <USB_DeactivateEndpoint+0x374>)
 8012130:	430a      	orrs	r2, r1
 8012132:	b292      	uxth	r2, r2
 8012134:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012136:	687a      	ldr	r2, [r7, #4]
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	009b      	lsls	r3, r3, #2
 801213e:	18d3      	adds	r3, r2, r3
 8012140:	881b      	ldrh	r3, [r3, #0]
 8012142:	b29a      	uxth	r2, r3
 8012144:	2014      	movs	r0, #20
 8012146:	183b      	adds	r3, r7, r0
 8012148:	4953      	ldr	r1, [pc, #332]	@ (8012298 <USB_DeactivateEndpoint+0x370>)
 801214a:	400a      	ands	r2, r1
 801214c:	801a      	strh	r2, [r3, #0]
 801214e:	687a      	ldr	r2, [r7, #4]
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	009b      	lsls	r3, r3, #2
 8012156:	18d3      	adds	r3, r2, r3
 8012158:	183a      	adds	r2, r7, r0
 801215a:	8812      	ldrh	r2, [r2, #0]
 801215c:	494f      	ldr	r1, [pc, #316]	@ (801229c <USB_DeactivateEndpoint+0x374>)
 801215e:	430a      	orrs	r2, r1
 8012160:	b292      	uxth	r2, r2
 8012162:	801a      	strh	r2, [r3, #0]
 8012164:	e08f      	b.n	8012286 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012166:	687a      	ldr	r2, [r7, #4]
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	781b      	ldrb	r3, [r3, #0]
 801216c:	009b      	lsls	r3, r3, #2
 801216e:	18d2      	adds	r2, r2, r3
 8012170:	212e      	movs	r1, #46	@ 0x2e
 8012172:	187b      	adds	r3, r7, r1
 8012174:	8812      	ldrh	r2, [r2, #0]
 8012176:	801a      	strh	r2, [r3, #0]
 8012178:	187b      	adds	r3, r7, r1
 801217a:	881a      	ldrh	r2, [r3, #0]
 801217c:	2380      	movs	r3, #128	@ 0x80
 801217e:	01db      	lsls	r3, r3, #7
 8012180:	4013      	ands	r3, r2
 8012182:	d016      	beq.n	80121b2 <USB_DeactivateEndpoint+0x28a>
 8012184:	687a      	ldr	r2, [r7, #4]
 8012186:	683b      	ldr	r3, [r7, #0]
 8012188:	781b      	ldrb	r3, [r3, #0]
 801218a:	009b      	lsls	r3, r3, #2
 801218c:	18d3      	adds	r3, r2, r3
 801218e:	881b      	ldrh	r3, [r3, #0]
 8012190:	b29a      	uxth	r2, r3
 8012192:	202c      	movs	r0, #44	@ 0x2c
 8012194:	183b      	adds	r3, r7, r0
 8012196:	493e      	ldr	r1, [pc, #248]	@ (8012290 <USB_DeactivateEndpoint+0x368>)
 8012198:	400a      	ands	r2, r1
 801219a:	801a      	strh	r2, [r3, #0]
 801219c:	687a      	ldr	r2, [r7, #4]
 801219e:	683b      	ldr	r3, [r7, #0]
 80121a0:	781b      	ldrb	r3, [r3, #0]
 80121a2:	009b      	lsls	r3, r3, #2
 80121a4:	18d3      	adds	r3, r2, r3
 80121a6:	183a      	adds	r2, r7, r0
 80121a8:	8812      	ldrh	r2, [r2, #0]
 80121aa:	493d      	ldr	r1, [pc, #244]	@ (80122a0 <USB_DeactivateEndpoint+0x378>)
 80121ac:	430a      	orrs	r2, r1
 80121ae:	b292      	uxth	r2, r2
 80121b0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80121b2:	687a      	ldr	r2, [r7, #4]
 80121b4:	683b      	ldr	r3, [r7, #0]
 80121b6:	781b      	ldrb	r3, [r3, #0]
 80121b8:	009b      	lsls	r3, r3, #2
 80121ba:	18d2      	adds	r2, r2, r3
 80121bc:	212a      	movs	r1, #42	@ 0x2a
 80121be:	187b      	adds	r3, r7, r1
 80121c0:	8812      	ldrh	r2, [r2, #0]
 80121c2:	801a      	strh	r2, [r3, #0]
 80121c4:	187b      	adds	r3, r7, r1
 80121c6:	881b      	ldrh	r3, [r3, #0]
 80121c8:	2240      	movs	r2, #64	@ 0x40
 80121ca:	4013      	ands	r3, r2
 80121cc:	d016      	beq.n	80121fc <USB_DeactivateEndpoint+0x2d4>
 80121ce:	687a      	ldr	r2, [r7, #4]
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	781b      	ldrb	r3, [r3, #0]
 80121d4:	009b      	lsls	r3, r3, #2
 80121d6:	18d3      	adds	r3, r2, r3
 80121d8:	881b      	ldrh	r3, [r3, #0]
 80121da:	b29a      	uxth	r2, r3
 80121dc:	2028      	movs	r0, #40	@ 0x28
 80121de:	183b      	adds	r3, r7, r0
 80121e0:	492b      	ldr	r1, [pc, #172]	@ (8012290 <USB_DeactivateEndpoint+0x368>)
 80121e2:	400a      	ands	r2, r1
 80121e4:	801a      	strh	r2, [r3, #0]
 80121e6:	687a      	ldr	r2, [r7, #4]
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	781b      	ldrb	r3, [r3, #0]
 80121ec:	009b      	lsls	r3, r3, #2
 80121ee:	18d3      	adds	r3, r2, r3
 80121f0:	183a      	adds	r2, r7, r0
 80121f2:	8812      	ldrh	r2, [r2, #0]
 80121f4:	4927      	ldr	r1, [pc, #156]	@ (8012294 <USB_DeactivateEndpoint+0x36c>)
 80121f6:	430a      	orrs	r2, r1
 80121f8:	b292      	uxth	r2, r2
 80121fa:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80121fc:	687a      	ldr	r2, [r7, #4]
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	009b      	lsls	r3, r3, #2
 8012204:	18d3      	adds	r3, r2, r3
 8012206:	881b      	ldrh	r3, [r3, #0]
 8012208:	b29a      	uxth	r2, r3
 801220a:	2026      	movs	r0, #38	@ 0x26
 801220c:	183b      	adds	r3, r7, r0
 801220e:	4920      	ldr	r1, [pc, #128]	@ (8012290 <USB_DeactivateEndpoint+0x368>)
 8012210:	400a      	ands	r2, r1
 8012212:	801a      	strh	r2, [r3, #0]
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	781b      	ldrb	r3, [r3, #0]
 801221a:	009b      	lsls	r3, r3, #2
 801221c:	18d3      	adds	r3, r2, r3
 801221e:	183a      	adds	r2, r7, r0
 8012220:	8812      	ldrh	r2, [r2, #0]
 8012222:	491f      	ldr	r1, [pc, #124]	@ (80122a0 <USB_DeactivateEndpoint+0x378>)
 8012224:	430a      	orrs	r2, r1
 8012226:	b292      	uxth	r2, r2
 8012228:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801222a:	687a      	ldr	r2, [r7, #4]
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	781b      	ldrb	r3, [r3, #0]
 8012230:	009b      	lsls	r3, r3, #2
 8012232:	18d3      	adds	r3, r2, r3
 8012234:	881b      	ldrh	r3, [r3, #0]
 8012236:	b29a      	uxth	r2, r3
 8012238:	2024      	movs	r0, #36	@ 0x24
 801223a:	183b      	adds	r3, r7, r0
 801223c:	4916      	ldr	r1, [pc, #88]	@ (8012298 <USB_DeactivateEndpoint+0x370>)
 801223e:	400a      	ands	r2, r1
 8012240:	801a      	strh	r2, [r3, #0]
 8012242:	687a      	ldr	r2, [r7, #4]
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	781b      	ldrb	r3, [r3, #0]
 8012248:	009b      	lsls	r3, r3, #2
 801224a:	18d3      	adds	r3, r2, r3
 801224c:	183a      	adds	r2, r7, r0
 801224e:	8812      	ldrh	r2, [r2, #0]
 8012250:	4912      	ldr	r1, [pc, #72]	@ (801229c <USB_DeactivateEndpoint+0x374>)
 8012252:	430a      	orrs	r2, r1
 8012254:	b292      	uxth	r2, r2
 8012256:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012258:	687a      	ldr	r2, [r7, #4]
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	781b      	ldrb	r3, [r3, #0]
 801225e:	009b      	lsls	r3, r3, #2
 8012260:	18d3      	adds	r3, r2, r3
 8012262:	881b      	ldrh	r3, [r3, #0]
 8012264:	b29a      	uxth	r2, r3
 8012266:	2022      	movs	r0, #34	@ 0x22
 8012268:	183b      	adds	r3, r7, r0
 801226a:	490e      	ldr	r1, [pc, #56]	@ (80122a4 <USB_DeactivateEndpoint+0x37c>)
 801226c:	400a      	ands	r2, r1
 801226e:	801a      	strh	r2, [r3, #0]
 8012270:	687a      	ldr	r2, [r7, #4]
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	781b      	ldrb	r3, [r3, #0]
 8012276:	009b      	lsls	r3, r3, #2
 8012278:	18d3      	adds	r3, r2, r3
 801227a:	183a      	adds	r2, r7, r0
 801227c:	8812      	ldrh	r2, [r2, #0]
 801227e:	4907      	ldr	r1, [pc, #28]	@ (801229c <USB_DeactivateEndpoint+0x374>)
 8012280:	430a      	orrs	r2, r1
 8012282:	b292      	uxth	r2, r2
 8012284:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8012286:	2300      	movs	r3, #0
}
 8012288:	0018      	movs	r0, r3
 801228a:	46bd      	mov	sp, r7
 801228c:	b00c      	add	sp, #48	@ 0x30
 801228e:	bd80      	pop	{r7, pc}
 8012290:	ffff8f8f 	.word	0xffff8f8f
 8012294:	ffff80c0 	.word	0xffff80c0
 8012298:	ffff8fbf 	.word	0xffff8fbf
 801229c:	ffff8080 	.word	0xffff8080
 80122a0:	ffffc080 	.word	0xffffc080
 80122a4:	ffffbf8f 	.word	0xffffbf8f

080122a8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80122a8:	b590      	push	{r4, r7, lr}
 80122aa:	b0c3      	sub	sp, #268	@ 0x10c
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	785b      	ldrb	r3, [r3, #1]
 80122b6:	2b01      	cmp	r3, #1
 80122b8:	d001      	beq.n	80122be <USB_EPStartXfer+0x16>
 80122ba:	f000 fd2d 	bl	8012d18 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	699a      	ldr	r2, [r3, #24]
 80122c2:	683b      	ldr	r3, [r7, #0]
 80122c4:	691b      	ldr	r3, [r3, #16]
 80122c6:	429a      	cmp	r2, r3
 80122c8:	d905      	bls.n	80122d6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80122ca:	683b      	ldr	r3, [r7, #0]
 80122cc:	691b      	ldr	r3, [r3, #16]
 80122ce:	1d7a      	adds	r2, r7, #5
 80122d0:	32ff      	adds	r2, #255	@ 0xff
 80122d2:	6013      	str	r3, [r2, #0]
 80122d4:	e004      	b.n	80122e0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	699b      	ldr	r3, [r3, #24]
 80122da:	1d7a      	adds	r2, r7, #5
 80122dc:	32ff      	adds	r2, #255	@ 0xff
 80122de:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	7b1b      	ldrb	r3, [r3, #12]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d125      	bne.n	8012334 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	6959      	ldr	r1, [r3, #20]
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	88da      	ldrh	r2, [r3, #6]
 80122f0:	1d7b      	adds	r3, r7, #5
 80122f2:	33ff      	adds	r3, #255	@ 0xff
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	b29b      	uxth	r3, r3
 80122f8:	6878      	ldr	r0, [r7, #4]
 80122fa:	f001 fa47 	bl	801378c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	613b      	str	r3, [r7, #16]
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	2250      	movs	r2, #80	@ 0x50
 8012306:	5a9b      	ldrh	r3, [r3, r2]
 8012308:	b29b      	uxth	r3, r3
 801230a:	001a      	movs	r2, r3
 801230c:	693b      	ldr	r3, [r7, #16]
 801230e:	189b      	adds	r3, r3, r2
 8012310:	613b      	str	r3, [r7, #16]
 8012312:	683b      	ldr	r3, [r7, #0]
 8012314:	781b      	ldrb	r3, [r3, #0]
 8012316:	00da      	lsls	r2, r3, #3
 8012318:	693b      	ldr	r3, [r7, #16]
 801231a:	18d3      	adds	r3, r2, r3
 801231c:	4ad7      	ldr	r2, [pc, #860]	@ (801267c <USB_EPStartXfer+0x3d4>)
 801231e:	4694      	mov	ip, r2
 8012320:	4463      	add	r3, ip
 8012322:	60fb      	str	r3, [r7, #12]
 8012324:	1d7b      	adds	r3, r7, #5
 8012326:	33ff      	adds	r3, #255	@ 0xff
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	b29a      	uxth	r2, r3
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	801a      	strh	r2, [r3, #0]
 8012330:	f000 fccd 	bl	8012cce <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	78db      	ldrb	r3, [r3, #3]
 8012338:	2b02      	cmp	r3, #2
 801233a:	d000      	beq.n	801233e <USB_EPStartXfer+0x96>
 801233c:	e362      	b.n	8012a04 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	6a1a      	ldr	r2, [r3, #32]
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	691b      	ldr	r3, [r3, #16]
 8012346:	429a      	cmp	r2, r3
 8012348:	d800      	bhi.n	801234c <USB_EPStartXfer+0xa4>
 801234a:	e309      	b.n	8012960 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801234c:	687a      	ldr	r2, [r7, #4]
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	781b      	ldrb	r3, [r3, #0]
 8012352:	009b      	lsls	r3, r3, #2
 8012354:	18d3      	adds	r3, r2, r3
 8012356:	881b      	ldrh	r3, [r3, #0]
 8012358:	b29a      	uxth	r2, r3
 801235a:	2056      	movs	r0, #86	@ 0x56
 801235c:	183b      	adds	r3, r7, r0
 801235e:	49c8      	ldr	r1, [pc, #800]	@ (8012680 <USB_EPStartXfer+0x3d8>)
 8012360:	400a      	ands	r2, r1
 8012362:	801a      	strh	r2, [r3, #0]
 8012364:	687a      	ldr	r2, [r7, #4]
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	009b      	lsls	r3, r3, #2
 801236c:	18d3      	adds	r3, r2, r3
 801236e:	183a      	adds	r2, r7, r0
 8012370:	8812      	ldrh	r2, [r2, #0]
 8012372:	49c4      	ldr	r1, [pc, #784]	@ (8012684 <USB_EPStartXfer+0x3dc>)
 8012374:	430a      	orrs	r2, r1
 8012376:	b292      	uxth	r2, r2
 8012378:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	6a1a      	ldr	r2, [r3, #32]
 801237e:	1d7b      	adds	r3, r7, #5
 8012380:	33ff      	adds	r3, #255	@ 0xff
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	1ad2      	subs	r2, r2, r3
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801238a:	687a      	ldr	r2, [r7, #4]
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	781b      	ldrb	r3, [r3, #0]
 8012390:	009b      	lsls	r3, r3, #2
 8012392:	18d3      	adds	r3, r2, r3
 8012394:	881b      	ldrh	r3, [r3, #0]
 8012396:	b29b      	uxth	r3, r3
 8012398:	001a      	movs	r2, r3
 801239a:	2340      	movs	r3, #64	@ 0x40
 801239c:	4013      	ands	r3, r2
 801239e:	d100      	bne.n	80123a2 <USB_EPStartXfer+0xfa>
 80123a0:	e176      	b.n	8012690 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	785b      	ldrb	r3, [r3, #1]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d000      	beq.n	80123b0 <USB_EPStartXfer+0x108>
 80123ae:	e074      	b.n	801249a <USB_EPStartXfer+0x1f2>
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2250      	movs	r2, #80	@ 0x50
 80123b8:	5a9b      	ldrh	r3, [r3, r2]
 80123ba:	b29b      	uxth	r3, r3
 80123bc:	001a      	movs	r2, r3
 80123be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123c0:	189b      	adds	r3, r3, r2
 80123c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	781b      	ldrb	r3, [r3, #0]
 80123c8:	00da      	lsls	r2, r3, #3
 80123ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123cc:	18d3      	adds	r3, r2, r3
 80123ce:	4aae      	ldr	r2, [pc, #696]	@ (8012688 <USB_EPStartXfer+0x3e0>)
 80123d0:	4694      	mov	ip, r2
 80123d2:	4463      	add	r3, ip
 80123d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80123d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123d8:	881b      	ldrh	r3, [r3, #0]
 80123da:	b29b      	uxth	r3, r3
 80123dc:	059b      	lsls	r3, r3, #22
 80123de:	0d9b      	lsrs	r3, r3, #22
 80123e0:	b29a      	uxth	r2, r3
 80123e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123e4:	801a      	strh	r2, [r3, #0]
 80123e6:	1d7b      	adds	r3, r7, #5
 80123e8:	33ff      	adds	r3, #255	@ 0xff
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80123ee:	d924      	bls.n	801243a <USB_EPStartXfer+0x192>
 80123f0:	1d7b      	adds	r3, r7, #5
 80123f2:	33ff      	adds	r3, #255	@ 0xff
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	095b      	lsrs	r3, r3, #5
 80123f8:	1c7a      	adds	r2, r7, #1
 80123fa:	32ff      	adds	r2, #255	@ 0xff
 80123fc:	6013      	str	r3, [r2, #0]
 80123fe:	1d7b      	adds	r3, r7, #5
 8012400:	33ff      	adds	r3, #255	@ 0xff
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	221f      	movs	r2, #31
 8012406:	4013      	ands	r3, r2
 8012408:	d106      	bne.n	8012418 <USB_EPStartXfer+0x170>
 801240a:	1c7b      	adds	r3, r7, #1
 801240c:	33ff      	adds	r3, #255	@ 0xff
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	3b01      	subs	r3, #1
 8012412:	1c7a      	adds	r2, r7, #1
 8012414:	32ff      	adds	r2, #255	@ 0xff
 8012416:	6013      	str	r3, [r2, #0]
 8012418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801241a:	881b      	ldrh	r3, [r3, #0]
 801241c:	b29a      	uxth	r2, r3
 801241e:	1c7b      	adds	r3, r7, #1
 8012420:	33ff      	adds	r3, #255	@ 0xff
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	b29b      	uxth	r3, r3
 8012426:	029b      	lsls	r3, r3, #10
 8012428:	b29b      	uxth	r3, r3
 801242a:	4313      	orrs	r3, r2
 801242c:	b29b      	uxth	r3, r3
 801242e:	4a97      	ldr	r2, [pc, #604]	@ (801268c <USB_EPStartXfer+0x3e4>)
 8012430:	4313      	orrs	r3, r2
 8012432:	b29a      	uxth	r2, r3
 8012434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012436:	801a      	strh	r2, [r3, #0]
 8012438:	e04a      	b.n	80124d0 <USB_EPStartXfer+0x228>
 801243a:	1d7b      	adds	r3, r7, #5
 801243c:	33ff      	adds	r3, #255	@ 0xff
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d108      	bne.n	8012456 <USB_EPStartXfer+0x1ae>
 8012444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012446:	881b      	ldrh	r3, [r3, #0]
 8012448:	b29b      	uxth	r3, r3
 801244a:	4a90      	ldr	r2, [pc, #576]	@ (801268c <USB_EPStartXfer+0x3e4>)
 801244c:	4313      	orrs	r3, r2
 801244e:	b29a      	uxth	r2, r3
 8012450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012452:	801a      	strh	r2, [r3, #0]
 8012454:	e03c      	b.n	80124d0 <USB_EPStartXfer+0x228>
 8012456:	1d7b      	adds	r3, r7, #5
 8012458:	33ff      	adds	r3, #255	@ 0xff
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	085b      	lsrs	r3, r3, #1
 801245e:	1c7a      	adds	r2, r7, #1
 8012460:	32ff      	adds	r2, #255	@ 0xff
 8012462:	6013      	str	r3, [r2, #0]
 8012464:	1d7b      	adds	r3, r7, #5
 8012466:	33ff      	adds	r3, #255	@ 0xff
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	2201      	movs	r2, #1
 801246c:	4013      	ands	r3, r2
 801246e:	d006      	beq.n	801247e <USB_EPStartXfer+0x1d6>
 8012470:	1c7b      	adds	r3, r7, #1
 8012472:	33ff      	adds	r3, #255	@ 0xff
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	3301      	adds	r3, #1
 8012478:	1c7a      	adds	r2, r7, #1
 801247a:	32ff      	adds	r2, #255	@ 0xff
 801247c:	6013      	str	r3, [r2, #0]
 801247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012480:	881b      	ldrh	r3, [r3, #0]
 8012482:	b29a      	uxth	r2, r3
 8012484:	1c7b      	adds	r3, r7, #1
 8012486:	33ff      	adds	r3, #255	@ 0xff
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	b29b      	uxth	r3, r3
 801248c:	029b      	lsls	r3, r3, #10
 801248e:	b29b      	uxth	r3, r3
 8012490:	4313      	orrs	r3, r2
 8012492:	b29a      	uxth	r2, r3
 8012494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012496:	801a      	strh	r2, [r3, #0]
 8012498:	e01a      	b.n	80124d0 <USB_EPStartXfer+0x228>
 801249a:	683b      	ldr	r3, [r7, #0]
 801249c:	785b      	ldrb	r3, [r3, #1]
 801249e:	2b01      	cmp	r3, #1
 80124a0:	d116      	bne.n	80124d0 <USB_EPStartXfer+0x228>
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	2250      	movs	r2, #80	@ 0x50
 80124a6:	5a9b      	ldrh	r3, [r3, r2]
 80124a8:	b29b      	uxth	r3, r3
 80124aa:	001a      	movs	r2, r3
 80124ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124ae:	189b      	adds	r3, r3, r2
 80124b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	781b      	ldrb	r3, [r3, #0]
 80124b6:	00da      	lsls	r2, r3, #3
 80124b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124ba:	18d3      	adds	r3, r2, r3
 80124bc:	4a72      	ldr	r2, [pc, #456]	@ (8012688 <USB_EPStartXfer+0x3e0>)
 80124be:	4694      	mov	ip, r2
 80124c0:	4463      	add	r3, ip
 80124c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80124c4:	1d7b      	adds	r3, r7, #5
 80124c6:	33ff      	adds	r3, #255	@ 0xff
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	b29a      	uxth	r2, r3
 80124cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80124d0:	2076      	movs	r0, #118	@ 0x76
 80124d2:	183b      	adds	r3, r7, r0
 80124d4:	683a      	ldr	r2, [r7, #0]
 80124d6:	8952      	ldrh	r2, [r2, #10]
 80124d8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	6959      	ldr	r1, [r3, #20]
 80124de:	1d7b      	adds	r3, r7, #5
 80124e0:	33ff      	adds	r3, #255	@ 0xff
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	b29c      	uxth	r4, r3
 80124e6:	183b      	adds	r3, r7, r0
 80124e8:	881a      	ldrh	r2, [r3, #0]
 80124ea:	6878      	ldr	r0, [r7, #4]
 80124ec:	0023      	movs	r3, r4
 80124ee:	f001 f94d 	bl	801378c <USB_WritePMA>
            ep->xfer_buff += len;
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	695a      	ldr	r2, [r3, #20]
 80124f6:	1d7b      	adds	r3, r7, #5
 80124f8:	33ff      	adds	r3, #255	@ 0xff
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	18d2      	adds	r2, r2, r3
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	6a1a      	ldr	r2, [r3, #32]
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	691b      	ldr	r3, [r3, #16]
 801250a:	429a      	cmp	r2, r3
 801250c:	d908      	bls.n	8012520 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	6a1a      	ldr	r2, [r3, #32]
 8012512:	1d7b      	adds	r3, r7, #5
 8012514:	33ff      	adds	r3, #255	@ 0xff
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	1ad2      	subs	r2, r2, r3
 801251a:	683b      	ldr	r3, [r7, #0]
 801251c:	621a      	str	r2, [r3, #32]
 801251e:	e007      	b.n	8012530 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8012520:	683b      	ldr	r3, [r7, #0]
 8012522:	6a1b      	ldr	r3, [r3, #32]
 8012524:	1d7a      	adds	r2, r7, #5
 8012526:	32ff      	adds	r2, #255	@ 0xff
 8012528:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	2200      	movs	r2, #0
 801252e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	785b      	ldrb	r3, [r3, #1]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d000      	beq.n	801253a <USB_EPStartXfer+0x292>
 8012538:	e070      	b.n	801261c <USB_EPStartXfer+0x374>
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	61bb      	str	r3, [r7, #24]
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	2250      	movs	r2, #80	@ 0x50
 8012542:	5a9b      	ldrh	r3, [r3, r2]
 8012544:	b29b      	uxth	r3, r3
 8012546:	001a      	movs	r2, r3
 8012548:	69bb      	ldr	r3, [r7, #24]
 801254a:	189b      	adds	r3, r3, r2
 801254c:	61bb      	str	r3, [r7, #24]
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	00da      	lsls	r2, r3, #3
 8012554:	69bb      	ldr	r3, [r7, #24]
 8012556:	18d3      	adds	r3, r2, r3
 8012558:	4a48      	ldr	r2, [pc, #288]	@ (801267c <USB_EPStartXfer+0x3d4>)
 801255a:	4694      	mov	ip, r2
 801255c:	4463      	add	r3, ip
 801255e:	617b      	str	r3, [r7, #20]
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	881b      	ldrh	r3, [r3, #0]
 8012564:	b29b      	uxth	r3, r3
 8012566:	059b      	lsls	r3, r3, #22
 8012568:	0d9b      	lsrs	r3, r3, #22
 801256a:	b29a      	uxth	r2, r3
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	801a      	strh	r2, [r3, #0]
 8012570:	1d7b      	adds	r3, r7, #5
 8012572:	33ff      	adds	r3, #255	@ 0xff
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	2b3e      	cmp	r3, #62	@ 0x3e
 8012578:	d922      	bls.n	80125c0 <USB_EPStartXfer+0x318>
 801257a:	1d7b      	adds	r3, r7, #5
 801257c:	33ff      	adds	r3, #255	@ 0xff
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	095b      	lsrs	r3, r3, #5
 8012582:	21fc      	movs	r1, #252	@ 0xfc
 8012584:	187a      	adds	r2, r7, r1
 8012586:	6013      	str	r3, [r2, #0]
 8012588:	1d7b      	adds	r3, r7, #5
 801258a:	33ff      	adds	r3, #255	@ 0xff
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	221f      	movs	r2, #31
 8012590:	4013      	ands	r3, r2
 8012592:	d104      	bne.n	801259e <USB_EPStartXfer+0x2f6>
 8012594:	187b      	adds	r3, r7, r1
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	3b01      	subs	r3, #1
 801259a:	187a      	adds	r2, r7, r1
 801259c:	6013      	str	r3, [r2, #0]
 801259e:	697b      	ldr	r3, [r7, #20]
 80125a0:	881b      	ldrh	r3, [r3, #0]
 80125a2:	b29a      	uxth	r2, r3
 80125a4:	23fc      	movs	r3, #252	@ 0xfc
 80125a6:	18fb      	adds	r3, r7, r3
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	b29b      	uxth	r3, r3
 80125ac:	029b      	lsls	r3, r3, #10
 80125ae:	b29b      	uxth	r3, r3
 80125b0:	4313      	orrs	r3, r2
 80125b2:	b29b      	uxth	r3, r3
 80125b4:	4a35      	ldr	r2, [pc, #212]	@ (801268c <USB_EPStartXfer+0x3e4>)
 80125b6:	4313      	orrs	r3, r2
 80125b8:	b29a      	uxth	r2, r3
 80125ba:	697b      	ldr	r3, [r7, #20]
 80125bc:	801a      	strh	r2, [r3, #0]
 80125be:	e04a      	b.n	8012656 <USB_EPStartXfer+0x3ae>
 80125c0:	1d7b      	adds	r3, r7, #5
 80125c2:	33ff      	adds	r3, #255	@ 0xff
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d108      	bne.n	80125dc <USB_EPStartXfer+0x334>
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	881b      	ldrh	r3, [r3, #0]
 80125ce:	b29b      	uxth	r3, r3
 80125d0:	4a2e      	ldr	r2, [pc, #184]	@ (801268c <USB_EPStartXfer+0x3e4>)
 80125d2:	4313      	orrs	r3, r2
 80125d4:	b29a      	uxth	r2, r3
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	801a      	strh	r2, [r3, #0]
 80125da:	e03c      	b.n	8012656 <USB_EPStartXfer+0x3ae>
 80125dc:	1d7b      	adds	r3, r7, #5
 80125de:	33ff      	adds	r3, #255	@ 0xff
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	085b      	lsrs	r3, r3, #1
 80125e4:	21fc      	movs	r1, #252	@ 0xfc
 80125e6:	187a      	adds	r2, r7, r1
 80125e8:	6013      	str	r3, [r2, #0]
 80125ea:	1d7b      	adds	r3, r7, #5
 80125ec:	33ff      	adds	r3, #255	@ 0xff
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	2201      	movs	r2, #1
 80125f2:	4013      	ands	r3, r2
 80125f4:	d004      	beq.n	8012600 <USB_EPStartXfer+0x358>
 80125f6:	187b      	adds	r3, r7, r1
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	3301      	adds	r3, #1
 80125fc:	187a      	adds	r2, r7, r1
 80125fe:	6013      	str	r3, [r2, #0]
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	881b      	ldrh	r3, [r3, #0]
 8012604:	b29a      	uxth	r2, r3
 8012606:	23fc      	movs	r3, #252	@ 0xfc
 8012608:	18fb      	adds	r3, r7, r3
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	b29b      	uxth	r3, r3
 801260e:	029b      	lsls	r3, r3, #10
 8012610:	b29b      	uxth	r3, r3
 8012612:	4313      	orrs	r3, r2
 8012614:	b29a      	uxth	r2, r3
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	801a      	strh	r2, [r3, #0]
 801261a:	e01c      	b.n	8012656 <USB_EPStartXfer+0x3ae>
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	785b      	ldrb	r3, [r3, #1]
 8012620:	2b01      	cmp	r3, #1
 8012622:	d118      	bne.n	8012656 <USB_EPStartXfer+0x3ae>
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	623b      	str	r3, [r7, #32]
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2250      	movs	r2, #80	@ 0x50
 801262c:	5a9b      	ldrh	r3, [r3, r2]
 801262e:	b29b      	uxth	r3, r3
 8012630:	001a      	movs	r2, r3
 8012632:	6a3b      	ldr	r3, [r7, #32]
 8012634:	189b      	adds	r3, r3, r2
 8012636:	623b      	str	r3, [r7, #32]
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	00da      	lsls	r2, r3, #3
 801263e:	6a3b      	ldr	r3, [r7, #32]
 8012640:	18d3      	adds	r3, r2, r3
 8012642:	4a0e      	ldr	r2, [pc, #56]	@ (801267c <USB_EPStartXfer+0x3d4>)
 8012644:	4694      	mov	ip, r2
 8012646:	4463      	add	r3, ip
 8012648:	61fb      	str	r3, [r7, #28]
 801264a:	1d7b      	adds	r3, r7, #5
 801264c:	33ff      	adds	r3, #255	@ 0xff
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	b29a      	uxth	r2, r3
 8012652:	69fb      	ldr	r3, [r7, #28]
 8012654:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012656:	2076      	movs	r0, #118	@ 0x76
 8012658:	183b      	adds	r3, r7, r0
 801265a:	683a      	ldr	r2, [r7, #0]
 801265c:	8912      	ldrh	r2, [r2, #8]
 801265e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	6959      	ldr	r1, [r3, #20]
 8012664:	1d7b      	adds	r3, r7, #5
 8012666:	33ff      	adds	r3, #255	@ 0xff
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	b29c      	uxth	r4, r3
 801266c:	183b      	adds	r3, r7, r0
 801266e:	881a      	ldrh	r2, [r3, #0]
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	0023      	movs	r3, r4
 8012674:	f001 f88a 	bl	801378c <USB_WritePMA>
 8012678:	e329      	b.n	8012cce <USB_EPStartXfer+0xa26>
 801267a:	46c0      	nop			@ (mov r8, r8)
 801267c:	00000402 	.word	0x00000402
 8012680:	ffff8f8f 	.word	0xffff8f8f
 8012684:	ffff8180 	.word	0xffff8180
 8012688:	00000406 	.word	0x00000406
 801268c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	785b      	ldrb	r3, [r3, #1]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d000      	beq.n	801269a <USB_EPStartXfer+0x3f2>
 8012698:	e070      	b.n	801277c <USB_EPStartXfer+0x4d4>
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	2250      	movs	r2, #80	@ 0x50
 80126a2:	5a9b      	ldrh	r3, [r3, r2]
 80126a4:	b29b      	uxth	r3, r3
 80126a6:	001a      	movs	r2, r3
 80126a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80126aa:	189b      	adds	r3, r3, r2
 80126ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	781b      	ldrb	r3, [r3, #0]
 80126b2:	00da      	lsls	r2, r3, #3
 80126b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80126b6:	18d3      	adds	r3, r2, r3
 80126b8:	4acd      	ldr	r2, [pc, #820]	@ (80129f0 <USB_EPStartXfer+0x748>)
 80126ba:	4694      	mov	ip, r2
 80126bc:	4463      	add	r3, ip
 80126be:	647b      	str	r3, [r7, #68]	@ 0x44
 80126c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80126c2:	881b      	ldrh	r3, [r3, #0]
 80126c4:	b29b      	uxth	r3, r3
 80126c6:	059b      	lsls	r3, r3, #22
 80126c8:	0d9b      	lsrs	r3, r3, #22
 80126ca:	b29a      	uxth	r2, r3
 80126cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80126ce:	801a      	strh	r2, [r3, #0]
 80126d0:	1d7b      	adds	r3, r7, #5
 80126d2:	33ff      	adds	r3, #255	@ 0xff
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	2b3e      	cmp	r3, #62	@ 0x3e
 80126d8:	d922      	bls.n	8012720 <USB_EPStartXfer+0x478>
 80126da:	1d7b      	adds	r3, r7, #5
 80126dc:	33ff      	adds	r3, #255	@ 0xff
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	095b      	lsrs	r3, r3, #5
 80126e2:	21f8      	movs	r1, #248	@ 0xf8
 80126e4:	187a      	adds	r2, r7, r1
 80126e6:	6013      	str	r3, [r2, #0]
 80126e8:	1d7b      	adds	r3, r7, #5
 80126ea:	33ff      	adds	r3, #255	@ 0xff
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	221f      	movs	r2, #31
 80126f0:	4013      	ands	r3, r2
 80126f2:	d104      	bne.n	80126fe <USB_EPStartXfer+0x456>
 80126f4:	187b      	adds	r3, r7, r1
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	3b01      	subs	r3, #1
 80126fa:	187a      	adds	r2, r7, r1
 80126fc:	6013      	str	r3, [r2, #0]
 80126fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012700:	881b      	ldrh	r3, [r3, #0]
 8012702:	b29a      	uxth	r2, r3
 8012704:	23f8      	movs	r3, #248	@ 0xf8
 8012706:	18fb      	adds	r3, r7, r3
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	b29b      	uxth	r3, r3
 801270c:	029b      	lsls	r3, r3, #10
 801270e:	b29b      	uxth	r3, r3
 8012710:	4313      	orrs	r3, r2
 8012712:	b29b      	uxth	r3, r3
 8012714:	4ab7      	ldr	r2, [pc, #732]	@ (80129f4 <USB_EPStartXfer+0x74c>)
 8012716:	4313      	orrs	r3, r2
 8012718:	b29a      	uxth	r2, r3
 801271a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801271c:	801a      	strh	r2, [r3, #0]
 801271e:	e04a      	b.n	80127b6 <USB_EPStartXfer+0x50e>
 8012720:	1d7b      	adds	r3, r7, #5
 8012722:	33ff      	adds	r3, #255	@ 0xff
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d108      	bne.n	801273c <USB_EPStartXfer+0x494>
 801272a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801272c:	881b      	ldrh	r3, [r3, #0]
 801272e:	b29b      	uxth	r3, r3
 8012730:	4ab0      	ldr	r2, [pc, #704]	@ (80129f4 <USB_EPStartXfer+0x74c>)
 8012732:	4313      	orrs	r3, r2
 8012734:	b29a      	uxth	r2, r3
 8012736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012738:	801a      	strh	r2, [r3, #0]
 801273a:	e03c      	b.n	80127b6 <USB_EPStartXfer+0x50e>
 801273c:	1d7b      	adds	r3, r7, #5
 801273e:	33ff      	adds	r3, #255	@ 0xff
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	085b      	lsrs	r3, r3, #1
 8012744:	21f8      	movs	r1, #248	@ 0xf8
 8012746:	187a      	adds	r2, r7, r1
 8012748:	6013      	str	r3, [r2, #0]
 801274a:	1d7b      	adds	r3, r7, #5
 801274c:	33ff      	adds	r3, #255	@ 0xff
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	2201      	movs	r2, #1
 8012752:	4013      	ands	r3, r2
 8012754:	d004      	beq.n	8012760 <USB_EPStartXfer+0x4b8>
 8012756:	187b      	adds	r3, r7, r1
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	3301      	adds	r3, #1
 801275c:	187a      	adds	r2, r7, r1
 801275e:	6013      	str	r3, [r2, #0]
 8012760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012762:	881b      	ldrh	r3, [r3, #0]
 8012764:	b29a      	uxth	r2, r3
 8012766:	23f8      	movs	r3, #248	@ 0xf8
 8012768:	18fb      	adds	r3, r7, r3
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	b29b      	uxth	r3, r3
 801276e:	029b      	lsls	r3, r3, #10
 8012770:	b29b      	uxth	r3, r3
 8012772:	4313      	orrs	r3, r2
 8012774:	b29a      	uxth	r2, r3
 8012776:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012778:	801a      	strh	r2, [r3, #0]
 801277a:	e01c      	b.n	80127b6 <USB_EPStartXfer+0x50e>
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	785b      	ldrb	r3, [r3, #1]
 8012780:	2b01      	cmp	r3, #1
 8012782:	d118      	bne.n	80127b6 <USB_EPStartXfer+0x50e>
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	653b      	str	r3, [r7, #80]	@ 0x50
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2250      	movs	r2, #80	@ 0x50
 801278c:	5a9b      	ldrh	r3, [r3, r2]
 801278e:	b29b      	uxth	r3, r3
 8012790:	001a      	movs	r2, r3
 8012792:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012794:	189b      	adds	r3, r3, r2
 8012796:	653b      	str	r3, [r7, #80]	@ 0x50
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	781b      	ldrb	r3, [r3, #0]
 801279c:	00da      	lsls	r2, r3, #3
 801279e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127a0:	18d3      	adds	r3, r2, r3
 80127a2:	4a93      	ldr	r2, [pc, #588]	@ (80129f0 <USB_EPStartXfer+0x748>)
 80127a4:	4694      	mov	ip, r2
 80127a6:	4463      	add	r3, ip
 80127a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80127aa:	1d7b      	adds	r3, r7, #5
 80127ac:	33ff      	adds	r3, #255	@ 0xff
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	b29a      	uxth	r2, r3
 80127b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80127b6:	2076      	movs	r0, #118	@ 0x76
 80127b8:	183b      	adds	r3, r7, r0
 80127ba:	683a      	ldr	r2, [r7, #0]
 80127bc:	8912      	ldrh	r2, [r2, #8]
 80127be:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	6959      	ldr	r1, [r3, #20]
 80127c4:	1d7b      	adds	r3, r7, #5
 80127c6:	33ff      	adds	r3, #255	@ 0xff
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	b29c      	uxth	r4, r3
 80127cc:	183b      	adds	r3, r7, r0
 80127ce:	881a      	ldrh	r2, [r3, #0]
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	0023      	movs	r3, r4
 80127d4:	f000 ffda 	bl	801378c <USB_WritePMA>
            ep->xfer_buff += len;
 80127d8:	683b      	ldr	r3, [r7, #0]
 80127da:	695a      	ldr	r2, [r3, #20]
 80127dc:	1d7b      	adds	r3, r7, #5
 80127de:	33ff      	adds	r3, #255	@ 0xff
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	18d2      	adds	r2, r2, r3
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	6a1a      	ldr	r2, [r3, #32]
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	691b      	ldr	r3, [r3, #16]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d908      	bls.n	8012806 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	6a1a      	ldr	r2, [r3, #32]
 80127f8:	1d7b      	adds	r3, r7, #5
 80127fa:	33ff      	adds	r3, #255	@ 0xff
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	1ad2      	subs	r2, r2, r3
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	621a      	str	r2, [r3, #32]
 8012804:	e007      	b.n	8012816 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8012806:	683b      	ldr	r3, [r7, #0]
 8012808:	6a1b      	ldr	r3, [r3, #32]
 801280a:	1d7a      	adds	r2, r7, #5
 801280c:	32ff      	adds	r2, #255	@ 0xff
 801280e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	2200      	movs	r2, #0
 8012814:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	643b      	str	r3, [r7, #64]	@ 0x40
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	785b      	ldrb	r3, [r3, #1]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d000      	beq.n	8012824 <USB_EPStartXfer+0x57c>
 8012822:	e070      	b.n	8012906 <USB_EPStartXfer+0x65e>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	2250      	movs	r2, #80	@ 0x50
 801282c:	5a9b      	ldrh	r3, [r3, r2]
 801282e:	b29b      	uxth	r3, r3
 8012830:	001a      	movs	r2, r3
 8012832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012834:	189b      	adds	r3, r3, r2
 8012836:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	781b      	ldrb	r3, [r3, #0]
 801283c:	00da      	lsls	r2, r3, #3
 801283e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012840:	18d3      	adds	r3, r2, r3
 8012842:	4a6d      	ldr	r2, [pc, #436]	@ (80129f8 <USB_EPStartXfer+0x750>)
 8012844:	4694      	mov	ip, r2
 8012846:	4463      	add	r3, ip
 8012848:	637b      	str	r3, [r7, #52]	@ 0x34
 801284a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801284c:	881b      	ldrh	r3, [r3, #0]
 801284e:	b29b      	uxth	r3, r3
 8012850:	059b      	lsls	r3, r3, #22
 8012852:	0d9b      	lsrs	r3, r3, #22
 8012854:	b29a      	uxth	r2, r3
 8012856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012858:	801a      	strh	r2, [r3, #0]
 801285a:	1d7b      	adds	r3, r7, #5
 801285c:	33ff      	adds	r3, #255	@ 0xff
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	2b3e      	cmp	r3, #62	@ 0x3e
 8012862:	d922      	bls.n	80128aa <USB_EPStartXfer+0x602>
 8012864:	1d7b      	adds	r3, r7, #5
 8012866:	33ff      	adds	r3, #255	@ 0xff
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	095b      	lsrs	r3, r3, #5
 801286c:	21f4      	movs	r1, #244	@ 0xf4
 801286e:	187a      	adds	r2, r7, r1
 8012870:	6013      	str	r3, [r2, #0]
 8012872:	1d7b      	adds	r3, r7, #5
 8012874:	33ff      	adds	r3, #255	@ 0xff
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	221f      	movs	r2, #31
 801287a:	4013      	ands	r3, r2
 801287c:	d104      	bne.n	8012888 <USB_EPStartXfer+0x5e0>
 801287e:	187b      	adds	r3, r7, r1
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	3b01      	subs	r3, #1
 8012884:	187a      	adds	r2, r7, r1
 8012886:	6013      	str	r3, [r2, #0]
 8012888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801288a:	881b      	ldrh	r3, [r3, #0]
 801288c:	b29a      	uxth	r2, r3
 801288e:	23f4      	movs	r3, #244	@ 0xf4
 8012890:	18fb      	adds	r3, r7, r3
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	b29b      	uxth	r3, r3
 8012896:	029b      	lsls	r3, r3, #10
 8012898:	b29b      	uxth	r3, r3
 801289a:	4313      	orrs	r3, r2
 801289c:	b29b      	uxth	r3, r3
 801289e:	4a55      	ldr	r2, [pc, #340]	@ (80129f4 <USB_EPStartXfer+0x74c>)
 80128a0:	4313      	orrs	r3, r2
 80128a2:	b29a      	uxth	r2, r3
 80128a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128a6:	801a      	strh	r2, [r3, #0]
 80128a8:	e048      	b.n	801293c <USB_EPStartXfer+0x694>
 80128aa:	1d7b      	adds	r3, r7, #5
 80128ac:	33ff      	adds	r3, #255	@ 0xff
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d108      	bne.n	80128c6 <USB_EPStartXfer+0x61e>
 80128b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128b6:	881b      	ldrh	r3, [r3, #0]
 80128b8:	b29b      	uxth	r3, r3
 80128ba:	4a4e      	ldr	r2, [pc, #312]	@ (80129f4 <USB_EPStartXfer+0x74c>)
 80128bc:	4313      	orrs	r3, r2
 80128be:	b29a      	uxth	r2, r3
 80128c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128c2:	801a      	strh	r2, [r3, #0]
 80128c4:	e03a      	b.n	801293c <USB_EPStartXfer+0x694>
 80128c6:	1d7b      	adds	r3, r7, #5
 80128c8:	33ff      	adds	r3, #255	@ 0xff
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	085b      	lsrs	r3, r3, #1
 80128ce:	21f4      	movs	r1, #244	@ 0xf4
 80128d0:	187a      	adds	r2, r7, r1
 80128d2:	6013      	str	r3, [r2, #0]
 80128d4:	1d7b      	adds	r3, r7, #5
 80128d6:	33ff      	adds	r3, #255	@ 0xff
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	2201      	movs	r2, #1
 80128dc:	4013      	ands	r3, r2
 80128de:	d004      	beq.n	80128ea <USB_EPStartXfer+0x642>
 80128e0:	187b      	adds	r3, r7, r1
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	3301      	adds	r3, #1
 80128e6:	187a      	adds	r2, r7, r1
 80128e8:	6013      	str	r3, [r2, #0]
 80128ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128ec:	881b      	ldrh	r3, [r3, #0]
 80128ee:	b29a      	uxth	r2, r3
 80128f0:	23f4      	movs	r3, #244	@ 0xf4
 80128f2:	18fb      	adds	r3, r7, r3
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	029b      	lsls	r3, r3, #10
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	4313      	orrs	r3, r2
 80128fe:	b29a      	uxth	r2, r3
 8012900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012902:	801a      	strh	r2, [r3, #0]
 8012904:	e01a      	b.n	801293c <USB_EPStartXfer+0x694>
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	785b      	ldrb	r3, [r3, #1]
 801290a:	2b01      	cmp	r3, #1
 801290c:	d116      	bne.n	801293c <USB_EPStartXfer+0x694>
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	2250      	movs	r2, #80	@ 0x50
 8012912:	5a9b      	ldrh	r3, [r3, r2]
 8012914:	b29b      	uxth	r3, r3
 8012916:	001a      	movs	r2, r3
 8012918:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801291a:	189b      	adds	r3, r3, r2
 801291c:	643b      	str	r3, [r7, #64]	@ 0x40
 801291e:	683b      	ldr	r3, [r7, #0]
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	00da      	lsls	r2, r3, #3
 8012924:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012926:	18d3      	adds	r3, r2, r3
 8012928:	4a33      	ldr	r2, [pc, #204]	@ (80129f8 <USB_EPStartXfer+0x750>)
 801292a:	4694      	mov	ip, r2
 801292c:	4463      	add	r3, ip
 801292e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012930:	1d7b      	adds	r3, r7, #5
 8012932:	33ff      	adds	r3, #255	@ 0xff
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	b29a      	uxth	r2, r3
 8012938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801293a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801293c:	2076      	movs	r0, #118	@ 0x76
 801293e:	183b      	adds	r3, r7, r0
 8012940:	683a      	ldr	r2, [r7, #0]
 8012942:	8952      	ldrh	r2, [r2, #10]
 8012944:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	6959      	ldr	r1, [r3, #20]
 801294a:	1d7b      	adds	r3, r7, #5
 801294c:	33ff      	adds	r3, #255	@ 0xff
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	b29c      	uxth	r4, r3
 8012952:	183b      	adds	r3, r7, r0
 8012954:	881a      	ldrh	r2, [r3, #0]
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	0023      	movs	r3, r4
 801295a:	f000 ff17 	bl	801378c <USB_WritePMA>
 801295e:	e1b6      	b.n	8012cce <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012960:	683b      	ldr	r3, [r7, #0]
 8012962:	6a1b      	ldr	r3, [r3, #32]
 8012964:	1d7a      	adds	r2, r7, #5
 8012966:	32ff      	adds	r2, #255	@ 0xff
 8012968:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801296a:	687a      	ldr	r2, [r7, #4]
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	781b      	ldrb	r3, [r3, #0]
 8012970:	009b      	lsls	r3, r3, #2
 8012972:	18d3      	adds	r3, r2, r3
 8012974:	881b      	ldrh	r3, [r3, #0]
 8012976:	b29a      	uxth	r2, r3
 8012978:	2062      	movs	r0, #98	@ 0x62
 801297a:	183b      	adds	r3, r7, r0
 801297c:	491f      	ldr	r1, [pc, #124]	@ (80129fc <USB_EPStartXfer+0x754>)
 801297e:	400a      	ands	r2, r1
 8012980:	801a      	strh	r2, [r3, #0]
 8012982:	687a      	ldr	r2, [r7, #4]
 8012984:	683b      	ldr	r3, [r7, #0]
 8012986:	781b      	ldrb	r3, [r3, #0]
 8012988:	009b      	lsls	r3, r3, #2
 801298a:	18d3      	adds	r3, r2, r3
 801298c:	183a      	adds	r2, r7, r0
 801298e:	8812      	ldrh	r2, [r2, #0]
 8012990:	491b      	ldr	r1, [pc, #108]	@ (8012a00 <USB_EPStartXfer+0x758>)
 8012992:	430a      	orrs	r2, r1
 8012994:	b292      	uxth	r2, r2
 8012996:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	2250      	movs	r2, #80	@ 0x50
 80129a0:	5a9b      	ldrh	r3, [r3, r2]
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	001a      	movs	r2, r3
 80129a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80129a8:	189b      	adds	r3, r3, r2
 80129aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	781b      	ldrb	r3, [r3, #0]
 80129b0:	00da      	lsls	r2, r3, #3
 80129b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80129b4:	18d3      	adds	r3, r2, r3
 80129b6:	4a0e      	ldr	r2, [pc, #56]	@ (80129f0 <USB_EPStartXfer+0x748>)
 80129b8:	4694      	mov	ip, r2
 80129ba:	4463      	add	r3, ip
 80129bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80129be:	1d7b      	adds	r3, r7, #5
 80129c0:	33ff      	adds	r3, #255	@ 0xff
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	b29a      	uxth	r2, r3
 80129c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80129c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80129ca:	2076      	movs	r0, #118	@ 0x76
 80129cc:	183b      	adds	r3, r7, r0
 80129ce:	683a      	ldr	r2, [r7, #0]
 80129d0:	8912      	ldrh	r2, [r2, #8]
 80129d2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80129d4:	683b      	ldr	r3, [r7, #0]
 80129d6:	6959      	ldr	r1, [r3, #20]
 80129d8:	1d7b      	adds	r3, r7, #5
 80129da:	33ff      	adds	r3, #255	@ 0xff
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	b29c      	uxth	r4, r3
 80129e0:	183b      	adds	r3, r7, r0
 80129e2:	881a      	ldrh	r2, [r3, #0]
 80129e4:	6878      	ldr	r0, [r7, #4]
 80129e6:	0023      	movs	r3, r4
 80129e8:	f000 fed0 	bl	801378c <USB_WritePMA>
 80129ec:	e16f      	b.n	8012cce <USB_EPStartXfer+0xa26>
 80129ee:	46c0      	nop			@ (mov r8, r8)
 80129f0:	00000402 	.word	0x00000402
 80129f4:	ffff8000 	.word	0xffff8000
 80129f8:	00000406 	.word	0x00000406
 80129fc:	ffff8e8f 	.word	0xffff8e8f
 8012a00:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012a04:	683b      	ldr	r3, [r7, #0]
 8012a06:	6a1a      	ldr	r2, [r3, #32]
 8012a08:	1d7b      	adds	r3, r7, #5
 8012a0a:	33ff      	adds	r3, #255	@ 0xff
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	1ad2      	subs	r2, r2, r3
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012a14:	687a      	ldr	r2, [r7, #4]
 8012a16:	683b      	ldr	r3, [r7, #0]
 8012a18:	781b      	ldrb	r3, [r3, #0]
 8012a1a:	009b      	lsls	r3, r3, #2
 8012a1c:	18d3      	adds	r3, r2, r3
 8012a1e:	881b      	ldrh	r3, [r3, #0]
 8012a20:	b29b      	uxth	r3, r3
 8012a22:	001a      	movs	r2, r3
 8012a24:	2340      	movs	r3, #64	@ 0x40
 8012a26:	4013      	ands	r3, r2
 8012a28:	d100      	bne.n	8012a2c <USB_EPStartXfer+0x784>
 8012a2a:	e0a4      	b.n	8012b76 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	785b      	ldrb	r3, [r3, #1]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d000      	beq.n	8012a3a <USB_EPStartXfer+0x792>
 8012a38:	e070      	b.n	8012b1c <USB_EPStartXfer+0x874>
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	2250      	movs	r2, #80	@ 0x50
 8012a42:	5a9b      	ldrh	r3, [r3, r2]
 8012a44:	b29b      	uxth	r3, r3
 8012a46:	001a      	movs	r2, r3
 8012a48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012a4a:	189b      	adds	r3, r3, r2
 8012a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	781b      	ldrb	r3, [r3, #0]
 8012a52:	00da      	lsls	r2, r3, #3
 8012a54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012a56:	18d3      	adds	r3, r2, r3
 8012a58:	4abc      	ldr	r2, [pc, #752]	@ (8012d4c <USB_EPStartXfer+0xaa4>)
 8012a5a:	4694      	mov	ip, r2
 8012a5c:	4463      	add	r3, ip
 8012a5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8012a60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012a62:	881b      	ldrh	r3, [r3, #0]
 8012a64:	b29b      	uxth	r3, r3
 8012a66:	059b      	lsls	r3, r3, #22
 8012a68:	0d9b      	lsrs	r3, r3, #22
 8012a6a:	b29a      	uxth	r2, r3
 8012a6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012a6e:	801a      	strh	r2, [r3, #0]
 8012a70:	1d7b      	adds	r3, r7, #5
 8012a72:	33ff      	adds	r3, #255	@ 0xff
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	2b3e      	cmp	r3, #62	@ 0x3e
 8012a78:	d922      	bls.n	8012ac0 <USB_EPStartXfer+0x818>
 8012a7a:	1d7b      	adds	r3, r7, #5
 8012a7c:	33ff      	adds	r3, #255	@ 0xff
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	095b      	lsrs	r3, r3, #5
 8012a82:	21f0      	movs	r1, #240	@ 0xf0
 8012a84:	187a      	adds	r2, r7, r1
 8012a86:	6013      	str	r3, [r2, #0]
 8012a88:	1d7b      	adds	r3, r7, #5
 8012a8a:	33ff      	adds	r3, #255	@ 0xff
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	221f      	movs	r2, #31
 8012a90:	4013      	ands	r3, r2
 8012a92:	d104      	bne.n	8012a9e <USB_EPStartXfer+0x7f6>
 8012a94:	187b      	adds	r3, r7, r1
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	3b01      	subs	r3, #1
 8012a9a:	187a      	adds	r2, r7, r1
 8012a9c:	6013      	str	r3, [r2, #0]
 8012a9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012aa0:	881b      	ldrh	r3, [r3, #0]
 8012aa2:	b29a      	uxth	r2, r3
 8012aa4:	23f0      	movs	r3, #240	@ 0xf0
 8012aa6:	18fb      	adds	r3, r7, r3
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	b29b      	uxth	r3, r3
 8012aac:	029b      	lsls	r3, r3, #10
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	4313      	orrs	r3, r2
 8012ab2:	b29b      	uxth	r3, r3
 8012ab4:	4aa6      	ldr	r2, [pc, #664]	@ (8012d50 <USB_EPStartXfer+0xaa8>)
 8012ab6:	4313      	orrs	r3, r2
 8012ab8:	b29a      	uxth	r2, r3
 8012aba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012abc:	801a      	strh	r2, [r3, #0]
 8012abe:	e048      	b.n	8012b52 <USB_EPStartXfer+0x8aa>
 8012ac0:	1d7b      	adds	r3, r7, #5
 8012ac2:	33ff      	adds	r3, #255	@ 0xff
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d108      	bne.n	8012adc <USB_EPStartXfer+0x834>
 8012aca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012acc:	881b      	ldrh	r3, [r3, #0]
 8012ace:	b29b      	uxth	r3, r3
 8012ad0:	4a9f      	ldr	r2, [pc, #636]	@ (8012d50 <USB_EPStartXfer+0xaa8>)
 8012ad2:	4313      	orrs	r3, r2
 8012ad4:	b29a      	uxth	r2, r3
 8012ad6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012ad8:	801a      	strh	r2, [r3, #0]
 8012ada:	e03a      	b.n	8012b52 <USB_EPStartXfer+0x8aa>
 8012adc:	1d7b      	adds	r3, r7, #5
 8012ade:	33ff      	adds	r3, #255	@ 0xff
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	085b      	lsrs	r3, r3, #1
 8012ae4:	21f0      	movs	r1, #240	@ 0xf0
 8012ae6:	187a      	adds	r2, r7, r1
 8012ae8:	6013      	str	r3, [r2, #0]
 8012aea:	1d7b      	adds	r3, r7, #5
 8012aec:	33ff      	adds	r3, #255	@ 0xff
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	2201      	movs	r2, #1
 8012af2:	4013      	ands	r3, r2
 8012af4:	d004      	beq.n	8012b00 <USB_EPStartXfer+0x858>
 8012af6:	187b      	adds	r3, r7, r1
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	3301      	adds	r3, #1
 8012afc:	187a      	adds	r2, r7, r1
 8012afe:	6013      	str	r3, [r2, #0]
 8012b00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012b02:	881b      	ldrh	r3, [r3, #0]
 8012b04:	b29a      	uxth	r2, r3
 8012b06:	23f0      	movs	r3, #240	@ 0xf0
 8012b08:	18fb      	adds	r3, r7, r3
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	b29b      	uxth	r3, r3
 8012b0e:	029b      	lsls	r3, r3, #10
 8012b10:	b29b      	uxth	r3, r3
 8012b12:	4313      	orrs	r3, r2
 8012b14:	b29a      	uxth	r2, r3
 8012b16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012b18:	801a      	strh	r2, [r3, #0]
 8012b1a:	e01a      	b.n	8012b52 <USB_EPStartXfer+0x8aa>
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	785b      	ldrb	r3, [r3, #1]
 8012b20:	2b01      	cmp	r3, #1
 8012b22:	d116      	bne.n	8012b52 <USB_EPStartXfer+0x8aa>
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2250      	movs	r2, #80	@ 0x50
 8012b28:	5a9b      	ldrh	r3, [r3, r2]
 8012b2a:	b29b      	uxth	r3, r3
 8012b2c:	001a      	movs	r2, r3
 8012b2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012b30:	189b      	adds	r3, r3, r2
 8012b32:	673b      	str	r3, [r7, #112]	@ 0x70
 8012b34:	683b      	ldr	r3, [r7, #0]
 8012b36:	781b      	ldrb	r3, [r3, #0]
 8012b38:	00da      	lsls	r2, r3, #3
 8012b3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012b3c:	18d3      	adds	r3, r2, r3
 8012b3e:	4a83      	ldr	r2, [pc, #524]	@ (8012d4c <USB_EPStartXfer+0xaa4>)
 8012b40:	4694      	mov	ip, r2
 8012b42:	4463      	add	r3, ip
 8012b44:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012b46:	1d7b      	adds	r3, r7, #5
 8012b48:	33ff      	adds	r3, #255	@ 0xff
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	b29a      	uxth	r2, r3
 8012b4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012b50:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8012b52:	2076      	movs	r0, #118	@ 0x76
 8012b54:	183b      	adds	r3, r7, r0
 8012b56:	683a      	ldr	r2, [r7, #0]
 8012b58:	8952      	ldrh	r2, [r2, #10]
 8012b5a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	6959      	ldr	r1, [r3, #20]
 8012b60:	1d7b      	adds	r3, r7, #5
 8012b62:	33ff      	adds	r3, #255	@ 0xff
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	b29c      	uxth	r4, r3
 8012b68:	183b      	adds	r3, r7, r0
 8012b6a:	881a      	ldrh	r2, [r3, #0]
 8012b6c:	6878      	ldr	r0, [r7, #4]
 8012b6e:	0023      	movs	r3, r4
 8012b70:	f000 fe0c 	bl	801378c <USB_WritePMA>
 8012b74:	e0ab      	b.n	8012cce <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	785b      	ldrb	r3, [r3, #1]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d000      	beq.n	8012b80 <USB_EPStartXfer+0x8d8>
 8012b7e:	e070      	b.n	8012c62 <USB_EPStartXfer+0x9ba>
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2250      	movs	r2, #80	@ 0x50
 8012b88:	5a9b      	ldrh	r3, [r3, r2]
 8012b8a:	b29b      	uxth	r3, r3
 8012b8c:	001a      	movs	r2, r3
 8012b8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012b90:	189b      	adds	r3, r3, r2
 8012b92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	00da      	lsls	r2, r3, #3
 8012b9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012b9c:	18d3      	adds	r3, r2, r3
 8012b9e:	4a6d      	ldr	r2, [pc, #436]	@ (8012d54 <USB_EPStartXfer+0xaac>)
 8012ba0:	4694      	mov	ip, r2
 8012ba2:	4463      	add	r3, ip
 8012ba4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012ba6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012ba8:	881b      	ldrh	r3, [r3, #0]
 8012baa:	b29b      	uxth	r3, r3
 8012bac:	059b      	lsls	r3, r3, #22
 8012bae:	0d9b      	lsrs	r3, r3, #22
 8012bb0:	b29a      	uxth	r2, r3
 8012bb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012bb4:	801a      	strh	r2, [r3, #0]
 8012bb6:	1d7b      	adds	r3, r7, #5
 8012bb8:	33ff      	adds	r3, #255	@ 0xff
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8012bbe:	d922      	bls.n	8012c06 <USB_EPStartXfer+0x95e>
 8012bc0:	1d7b      	adds	r3, r7, #5
 8012bc2:	33ff      	adds	r3, #255	@ 0xff
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	095b      	lsrs	r3, r3, #5
 8012bc8:	21ec      	movs	r1, #236	@ 0xec
 8012bca:	187a      	adds	r2, r7, r1
 8012bcc:	6013      	str	r3, [r2, #0]
 8012bce:	1d7b      	adds	r3, r7, #5
 8012bd0:	33ff      	adds	r3, #255	@ 0xff
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	221f      	movs	r2, #31
 8012bd6:	4013      	ands	r3, r2
 8012bd8:	d104      	bne.n	8012be4 <USB_EPStartXfer+0x93c>
 8012bda:	187b      	adds	r3, r7, r1
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	3b01      	subs	r3, #1
 8012be0:	187a      	adds	r2, r7, r1
 8012be2:	6013      	str	r3, [r2, #0]
 8012be4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012be6:	881b      	ldrh	r3, [r3, #0]
 8012be8:	b29a      	uxth	r2, r3
 8012bea:	23ec      	movs	r3, #236	@ 0xec
 8012bec:	18fb      	adds	r3, r7, r3
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	029b      	lsls	r3, r3, #10
 8012bf4:	b29b      	uxth	r3, r3
 8012bf6:	4313      	orrs	r3, r2
 8012bf8:	b29b      	uxth	r3, r3
 8012bfa:	4a55      	ldr	r2, [pc, #340]	@ (8012d50 <USB_EPStartXfer+0xaa8>)
 8012bfc:	4313      	orrs	r3, r2
 8012bfe:	b29a      	uxth	r2, r3
 8012c00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012c02:	801a      	strh	r2, [r3, #0]
 8012c04:	e052      	b.n	8012cac <USB_EPStartXfer+0xa04>
 8012c06:	1d7b      	adds	r3, r7, #5
 8012c08:	33ff      	adds	r3, #255	@ 0xff
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d108      	bne.n	8012c22 <USB_EPStartXfer+0x97a>
 8012c10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012c12:	881b      	ldrh	r3, [r3, #0]
 8012c14:	b29b      	uxth	r3, r3
 8012c16:	4a4e      	ldr	r2, [pc, #312]	@ (8012d50 <USB_EPStartXfer+0xaa8>)
 8012c18:	4313      	orrs	r3, r2
 8012c1a:	b29a      	uxth	r2, r3
 8012c1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012c1e:	801a      	strh	r2, [r3, #0]
 8012c20:	e044      	b.n	8012cac <USB_EPStartXfer+0xa04>
 8012c22:	1d7b      	adds	r3, r7, #5
 8012c24:	33ff      	adds	r3, #255	@ 0xff
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	085b      	lsrs	r3, r3, #1
 8012c2a:	21ec      	movs	r1, #236	@ 0xec
 8012c2c:	187a      	adds	r2, r7, r1
 8012c2e:	6013      	str	r3, [r2, #0]
 8012c30:	1d7b      	adds	r3, r7, #5
 8012c32:	33ff      	adds	r3, #255	@ 0xff
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	2201      	movs	r2, #1
 8012c38:	4013      	ands	r3, r2
 8012c3a:	d004      	beq.n	8012c46 <USB_EPStartXfer+0x99e>
 8012c3c:	187b      	adds	r3, r7, r1
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	3301      	adds	r3, #1
 8012c42:	187a      	adds	r2, r7, r1
 8012c44:	6013      	str	r3, [r2, #0]
 8012c46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012c48:	881b      	ldrh	r3, [r3, #0]
 8012c4a:	b29a      	uxth	r2, r3
 8012c4c:	23ec      	movs	r3, #236	@ 0xec
 8012c4e:	18fb      	adds	r3, r7, r3
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	b29b      	uxth	r3, r3
 8012c54:	029b      	lsls	r3, r3, #10
 8012c56:	b29b      	uxth	r3, r3
 8012c58:	4313      	orrs	r3, r2
 8012c5a:	b29a      	uxth	r2, r3
 8012c5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012c5e:	801a      	strh	r2, [r3, #0]
 8012c60:	e024      	b.n	8012cac <USB_EPStartXfer+0xa04>
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	785b      	ldrb	r3, [r3, #1]
 8012c66:	2b01      	cmp	r3, #1
 8012c68:	d120      	bne.n	8012cac <USB_EPStartXfer+0xa04>
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	2184      	movs	r1, #132	@ 0x84
 8012c6e:	187a      	adds	r2, r7, r1
 8012c70:	6013      	str	r3, [r2, #0]
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	2250      	movs	r2, #80	@ 0x50
 8012c76:	5a9b      	ldrh	r3, [r3, r2]
 8012c78:	b29b      	uxth	r3, r3
 8012c7a:	001a      	movs	r2, r3
 8012c7c:	187b      	adds	r3, r7, r1
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	189b      	adds	r3, r3, r2
 8012c82:	187a      	adds	r2, r7, r1
 8012c84:	6013      	str	r3, [r2, #0]
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	781b      	ldrb	r3, [r3, #0]
 8012c8a:	00da      	lsls	r2, r3, #3
 8012c8c:	187b      	adds	r3, r7, r1
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	18d3      	adds	r3, r2, r3
 8012c92:	4a30      	ldr	r2, [pc, #192]	@ (8012d54 <USB_EPStartXfer+0xaac>)
 8012c94:	4694      	mov	ip, r2
 8012c96:	4463      	add	r3, ip
 8012c98:	2180      	movs	r1, #128	@ 0x80
 8012c9a:	187a      	adds	r2, r7, r1
 8012c9c:	6013      	str	r3, [r2, #0]
 8012c9e:	1d7b      	adds	r3, r7, #5
 8012ca0:	33ff      	adds	r3, #255	@ 0xff
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	b29a      	uxth	r2, r3
 8012ca6:	187b      	adds	r3, r7, r1
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012cac:	2076      	movs	r0, #118	@ 0x76
 8012cae:	183b      	adds	r3, r7, r0
 8012cb0:	683a      	ldr	r2, [r7, #0]
 8012cb2:	8912      	ldrh	r2, [r2, #8]
 8012cb4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012cb6:	683b      	ldr	r3, [r7, #0]
 8012cb8:	6959      	ldr	r1, [r3, #20]
 8012cba:	1d7b      	adds	r3, r7, #5
 8012cbc:	33ff      	adds	r3, #255	@ 0xff
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	b29c      	uxth	r4, r3
 8012cc2:	183b      	adds	r3, r7, r0
 8012cc4:	881a      	ldrh	r2, [r3, #0]
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	0023      	movs	r3, r4
 8012cca:	f000 fd5f 	bl	801378c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012cce:	687a      	ldr	r2, [r7, #4]
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	781b      	ldrb	r3, [r3, #0]
 8012cd4:	009b      	lsls	r3, r3, #2
 8012cd6:	18d3      	adds	r3, r2, r3
 8012cd8:	881b      	ldrh	r3, [r3, #0]
 8012cda:	b29a      	uxth	r2, r3
 8012cdc:	200a      	movs	r0, #10
 8012cde:	183b      	adds	r3, r7, r0
 8012ce0:	491d      	ldr	r1, [pc, #116]	@ (8012d58 <USB_EPStartXfer+0xab0>)
 8012ce2:	400a      	ands	r2, r1
 8012ce4:	801a      	strh	r2, [r3, #0]
 8012ce6:	183b      	adds	r3, r7, r0
 8012ce8:	183a      	adds	r2, r7, r0
 8012cea:	8812      	ldrh	r2, [r2, #0]
 8012cec:	2110      	movs	r1, #16
 8012cee:	404a      	eors	r2, r1
 8012cf0:	801a      	strh	r2, [r3, #0]
 8012cf2:	183b      	adds	r3, r7, r0
 8012cf4:	183a      	adds	r2, r7, r0
 8012cf6:	8812      	ldrh	r2, [r2, #0]
 8012cf8:	2120      	movs	r1, #32
 8012cfa:	404a      	eors	r2, r1
 8012cfc:	801a      	strh	r2, [r3, #0]
 8012cfe:	687a      	ldr	r2, [r7, #4]
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	781b      	ldrb	r3, [r3, #0]
 8012d04:	009b      	lsls	r3, r3, #2
 8012d06:	18d3      	adds	r3, r2, r3
 8012d08:	183a      	adds	r2, r7, r0
 8012d0a:	8812      	ldrh	r2, [r2, #0]
 8012d0c:	4913      	ldr	r1, [pc, #76]	@ (8012d5c <USB_EPStartXfer+0xab4>)
 8012d0e:	430a      	orrs	r2, r1
 8012d10:	b292      	uxth	r2, r2
 8012d12:	801a      	strh	r2, [r3, #0]
 8012d14:	f000 fbf4 	bl	8013500 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	7b1b      	ldrb	r3, [r3, #12]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d000      	beq.n	8012d22 <USB_EPStartXfer+0xa7a>
 8012d20:	e0a9      	b.n	8012e76 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012d22:	683b      	ldr	r3, [r7, #0]
 8012d24:	699a      	ldr	r2, [r3, #24]
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	691b      	ldr	r3, [r3, #16]
 8012d2a:	429a      	cmp	r2, r3
 8012d2c:	d918      	bls.n	8012d60 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8012d2e:	683b      	ldr	r3, [r7, #0]
 8012d30:	691b      	ldr	r3, [r3, #16]
 8012d32:	1d7a      	adds	r2, r7, #5
 8012d34:	32ff      	adds	r2, #255	@ 0xff
 8012d36:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	699a      	ldr	r2, [r3, #24]
 8012d3c:	1d7b      	adds	r3, r7, #5
 8012d3e:	33ff      	adds	r3, #255	@ 0xff
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	1ad2      	subs	r2, r2, r3
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	619a      	str	r2, [r3, #24]
 8012d48:	e012      	b.n	8012d70 <USB_EPStartXfer+0xac8>
 8012d4a:	46c0      	nop			@ (mov r8, r8)
 8012d4c:	00000406 	.word	0x00000406
 8012d50:	ffff8000 	.word	0xffff8000
 8012d54:	00000402 	.word	0x00000402
 8012d58:	ffff8fbf 	.word	0xffff8fbf
 8012d5c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	699b      	ldr	r3, [r3, #24]
 8012d64:	1d7a      	adds	r2, r7, #5
 8012d66:	32ff      	adds	r2, #255	@ 0xff
 8012d68:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	2190      	movs	r1, #144	@ 0x90
 8012d74:	187a      	adds	r2, r7, r1
 8012d76:	6013      	str	r3, [r2, #0]
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	2250      	movs	r2, #80	@ 0x50
 8012d7c:	5a9b      	ldrh	r3, [r3, r2]
 8012d7e:	b29b      	uxth	r3, r3
 8012d80:	001a      	movs	r2, r3
 8012d82:	187b      	adds	r3, r7, r1
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	189b      	adds	r3, r3, r2
 8012d88:	187a      	adds	r2, r7, r1
 8012d8a:	6013      	str	r3, [r2, #0]
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	781b      	ldrb	r3, [r3, #0]
 8012d90:	00da      	lsls	r2, r3, #3
 8012d92:	187b      	adds	r3, r7, r1
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	18d3      	adds	r3, r2, r3
 8012d98:	4acf      	ldr	r2, [pc, #828]	@ (80130d8 <USB_EPStartXfer+0xe30>)
 8012d9a:	4694      	mov	ip, r2
 8012d9c:	4463      	add	r3, ip
 8012d9e:	218c      	movs	r1, #140	@ 0x8c
 8012da0:	187a      	adds	r2, r7, r1
 8012da2:	6013      	str	r3, [r2, #0]
 8012da4:	187b      	adds	r3, r7, r1
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	881b      	ldrh	r3, [r3, #0]
 8012daa:	b29b      	uxth	r3, r3
 8012dac:	059b      	lsls	r3, r3, #22
 8012dae:	0d9b      	lsrs	r3, r3, #22
 8012db0:	b29a      	uxth	r2, r3
 8012db2:	187b      	adds	r3, r7, r1
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	801a      	strh	r2, [r3, #0]
 8012db8:	1d7b      	adds	r3, r7, #5
 8012dba:	33ff      	adds	r3, #255	@ 0xff
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8012dc0:	d925      	bls.n	8012e0e <USB_EPStartXfer+0xb66>
 8012dc2:	1d7b      	adds	r3, r7, #5
 8012dc4:	33ff      	adds	r3, #255	@ 0xff
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	095b      	lsrs	r3, r3, #5
 8012dca:	21e8      	movs	r1, #232	@ 0xe8
 8012dcc:	187a      	adds	r2, r7, r1
 8012dce:	6013      	str	r3, [r2, #0]
 8012dd0:	1d7b      	adds	r3, r7, #5
 8012dd2:	33ff      	adds	r3, #255	@ 0xff
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	221f      	movs	r2, #31
 8012dd8:	4013      	ands	r3, r2
 8012dda:	d104      	bne.n	8012de6 <USB_EPStartXfer+0xb3e>
 8012ddc:	187b      	adds	r3, r7, r1
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	3b01      	subs	r3, #1
 8012de2:	187a      	adds	r2, r7, r1
 8012de4:	6013      	str	r3, [r2, #0]
 8012de6:	218c      	movs	r1, #140	@ 0x8c
 8012de8:	187b      	adds	r3, r7, r1
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	881b      	ldrh	r3, [r3, #0]
 8012dee:	b29a      	uxth	r2, r3
 8012df0:	23e8      	movs	r3, #232	@ 0xe8
 8012df2:	18fb      	adds	r3, r7, r3
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	b29b      	uxth	r3, r3
 8012df8:	029b      	lsls	r3, r3, #10
 8012dfa:	b29b      	uxth	r3, r3
 8012dfc:	4313      	orrs	r3, r2
 8012dfe:	b29b      	uxth	r3, r3
 8012e00:	4ab6      	ldr	r2, [pc, #728]	@ (80130dc <USB_EPStartXfer+0xe34>)
 8012e02:	4313      	orrs	r3, r2
 8012e04:	b29a      	uxth	r2, r3
 8012e06:	187b      	adds	r3, r7, r1
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	801a      	strh	r2, [r3, #0]
 8012e0c:	e353      	b.n	80134b6 <USB_EPStartXfer+0x120e>
 8012e0e:	1d7b      	adds	r3, r7, #5
 8012e10:	33ff      	adds	r3, #255	@ 0xff
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d10b      	bne.n	8012e30 <USB_EPStartXfer+0xb88>
 8012e18:	218c      	movs	r1, #140	@ 0x8c
 8012e1a:	187b      	adds	r3, r7, r1
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	881b      	ldrh	r3, [r3, #0]
 8012e20:	b29b      	uxth	r3, r3
 8012e22:	4aae      	ldr	r2, [pc, #696]	@ (80130dc <USB_EPStartXfer+0xe34>)
 8012e24:	4313      	orrs	r3, r2
 8012e26:	b29a      	uxth	r2, r3
 8012e28:	187b      	adds	r3, r7, r1
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	801a      	strh	r2, [r3, #0]
 8012e2e:	e342      	b.n	80134b6 <USB_EPStartXfer+0x120e>
 8012e30:	1d7b      	adds	r3, r7, #5
 8012e32:	33ff      	adds	r3, #255	@ 0xff
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	085b      	lsrs	r3, r3, #1
 8012e38:	21e8      	movs	r1, #232	@ 0xe8
 8012e3a:	187a      	adds	r2, r7, r1
 8012e3c:	6013      	str	r3, [r2, #0]
 8012e3e:	1d7b      	adds	r3, r7, #5
 8012e40:	33ff      	adds	r3, #255	@ 0xff
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	2201      	movs	r2, #1
 8012e46:	4013      	ands	r3, r2
 8012e48:	d004      	beq.n	8012e54 <USB_EPStartXfer+0xbac>
 8012e4a:	187b      	adds	r3, r7, r1
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	3301      	adds	r3, #1
 8012e50:	187a      	adds	r2, r7, r1
 8012e52:	6013      	str	r3, [r2, #0]
 8012e54:	218c      	movs	r1, #140	@ 0x8c
 8012e56:	187b      	adds	r3, r7, r1
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	881b      	ldrh	r3, [r3, #0]
 8012e5c:	b29a      	uxth	r2, r3
 8012e5e:	23e8      	movs	r3, #232	@ 0xe8
 8012e60:	18fb      	adds	r3, r7, r3
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	b29b      	uxth	r3, r3
 8012e66:	029b      	lsls	r3, r3, #10
 8012e68:	b29b      	uxth	r3, r3
 8012e6a:	4313      	orrs	r3, r2
 8012e6c:	b29a      	uxth	r2, r3
 8012e6e:	187b      	adds	r3, r7, r1
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	801a      	strh	r2, [r3, #0]
 8012e74:	e31f      	b.n	80134b6 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	78db      	ldrb	r3, [r3, #3]
 8012e7a:	2b02      	cmp	r3, #2
 8012e7c:	d000      	beq.n	8012e80 <USB_EPStartXfer+0xbd8>
 8012e7e:	e191      	b.n	80131a4 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	785b      	ldrb	r3, [r3, #1]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d000      	beq.n	8012e8a <USB_EPStartXfer+0xbe2>
 8012e88:	e07c      	b.n	8012f84 <USB_EPStartXfer+0xcdc>
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	21ac      	movs	r1, #172	@ 0xac
 8012e8e:	187a      	adds	r2, r7, r1
 8012e90:	6013      	str	r3, [r2, #0]
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	2250      	movs	r2, #80	@ 0x50
 8012e96:	5a9b      	ldrh	r3, [r3, r2]
 8012e98:	b29b      	uxth	r3, r3
 8012e9a:	001a      	movs	r2, r3
 8012e9c:	187b      	adds	r3, r7, r1
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	189b      	adds	r3, r3, r2
 8012ea2:	187a      	adds	r2, r7, r1
 8012ea4:	6013      	str	r3, [r2, #0]
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	781b      	ldrb	r3, [r3, #0]
 8012eaa:	00da      	lsls	r2, r3, #3
 8012eac:	187b      	adds	r3, r7, r1
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	18d3      	adds	r3, r2, r3
 8012eb2:	4a8b      	ldr	r2, [pc, #556]	@ (80130e0 <USB_EPStartXfer+0xe38>)
 8012eb4:	4694      	mov	ip, r2
 8012eb6:	4463      	add	r3, ip
 8012eb8:	21a8      	movs	r1, #168	@ 0xa8
 8012eba:	187a      	adds	r2, r7, r1
 8012ebc:	6013      	str	r3, [r2, #0]
 8012ebe:	187b      	adds	r3, r7, r1
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	881b      	ldrh	r3, [r3, #0]
 8012ec4:	b29b      	uxth	r3, r3
 8012ec6:	059b      	lsls	r3, r3, #22
 8012ec8:	0d9b      	lsrs	r3, r3, #22
 8012eca:	b29a      	uxth	r2, r3
 8012ecc:	187b      	adds	r3, r7, r1
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	801a      	strh	r2, [r3, #0]
 8012ed2:	683b      	ldr	r3, [r7, #0]
 8012ed4:	691b      	ldr	r3, [r3, #16]
 8012ed6:	2b3e      	cmp	r3, #62	@ 0x3e
 8012ed8:	d923      	bls.n	8012f22 <USB_EPStartXfer+0xc7a>
 8012eda:	683b      	ldr	r3, [r7, #0]
 8012edc:	691b      	ldr	r3, [r3, #16]
 8012ede:	095b      	lsrs	r3, r3, #5
 8012ee0:	21e4      	movs	r1, #228	@ 0xe4
 8012ee2:	187a      	adds	r2, r7, r1
 8012ee4:	6013      	str	r3, [r2, #0]
 8012ee6:	683b      	ldr	r3, [r7, #0]
 8012ee8:	691b      	ldr	r3, [r3, #16]
 8012eea:	221f      	movs	r2, #31
 8012eec:	4013      	ands	r3, r2
 8012eee:	d104      	bne.n	8012efa <USB_EPStartXfer+0xc52>
 8012ef0:	187b      	adds	r3, r7, r1
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	3b01      	subs	r3, #1
 8012ef6:	187a      	adds	r2, r7, r1
 8012ef8:	6013      	str	r3, [r2, #0]
 8012efa:	21a8      	movs	r1, #168	@ 0xa8
 8012efc:	187b      	adds	r3, r7, r1
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	881b      	ldrh	r3, [r3, #0]
 8012f02:	b29a      	uxth	r2, r3
 8012f04:	23e4      	movs	r3, #228	@ 0xe4
 8012f06:	18fb      	adds	r3, r7, r3
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	b29b      	uxth	r3, r3
 8012f0c:	029b      	lsls	r3, r3, #10
 8012f0e:	b29b      	uxth	r3, r3
 8012f10:	4313      	orrs	r3, r2
 8012f12:	b29b      	uxth	r3, r3
 8012f14:	4a71      	ldr	r2, [pc, #452]	@ (80130dc <USB_EPStartXfer+0xe34>)
 8012f16:	4313      	orrs	r3, r2
 8012f18:	b29a      	uxth	r2, r3
 8012f1a:	187b      	adds	r3, r7, r1
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	801a      	strh	r2, [r3, #0]
 8012f20:	e054      	b.n	8012fcc <USB_EPStartXfer+0xd24>
 8012f22:	683b      	ldr	r3, [r7, #0]
 8012f24:	691b      	ldr	r3, [r3, #16]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d10b      	bne.n	8012f42 <USB_EPStartXfer+0xc9a>
 8012f2a:	21a8      	movs	r1, #168	@ 0xa8
 8012f2c:	187b      	adds	r3, r7, r1
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	881b      	ldrh	r3, [r3, #0]
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	4a69      	ldr	r2, [pc, #420]	@ (80130dc <USB_EPStartXfer+0xe34>)
 8012f36:	4313      	orrs	r3, r2
 8012f38:	b29a      	uxth	r2, r3
 8012f3a:	187b      	adds	r3, r7, r1
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	801a      	strh	r2, [r3, #0]
 8012f40:	e044      	b.n	8012fcc <USB_EPStartXfer+0xd24>
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	691b      	ldr	r3, [r3, #16]
 8012f46:	085b      	lsrs	r3, r3, #1
 8012f48:	21e4      	movs	r1, #228	@ 0xe4
 8012f4a:	187a      	adds	r2, r7, r1
 8012f4c:	6013      	str	r3, [r2, #0]
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	691b      	ldr	r3, [r3, #16]
 8012f52:	2201      	movs	r2, #1
 8012f54:	4013      	ands	r3, r2
 8012f56:	d004      	beq.n	8012f62 <USB_EPStartXfer+0xcba>
 8012f58:	187b      	adds	r3, r7, r1
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	3301      	adds	r3, #1
 8012f5e:	187a      	adds	r2, r7, r1
 8012f60:	6013      	str	r3, [r2, #0]
 8012f62:	21a8      	movs	r1, #168	@ 0xa8
 8012f64:	187b      	adds	r3, r7, r1
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	881b      	ldrh	r3, [r3, #0]
 8012f6a:	b29a      	uxth	r2, r3
 8012f6c:	23e4      	movs	r3, #228	@ 0xe4
 8012f6e:	18fb      	adds	r3, r7, r3
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	b29b      	uxth	r3, r3
 8012f74:	029b      	lsls	r3, r3, #10
 8012f76:	b29b      	uxth	r3, r3
 8012f78:	4313      	orrs	r3, r2
 8012f7a:	b29a      	uxth	r2, r3
 8012f7c:	187b      	adds	r3, r7, r1
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	801a      	strh	r2, [r3, #0]
 8012f82:	e023      	b.n	8012fcc <USB_EPStartXfer+0xd24>
 8012f84:	683b      	ldr	r3, [r7, #0]
 8012f86:	785b      	ldrb	r3, [r3, #1]
 8012f88:	2b01      	cmp	r3, #1
 8012f8a:	d11f      	bne.n	8012fcc <USB_EPStartXfer+0xd24>
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	21b4      	movs	r1, #180	@ 0xb4
 8012f90:	187a      	adds	r2, r7, r1
 8012f92:	6013      	str	r3, [r2, #0]
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	2250      	movs	r2, #80	@ 0x50
 8012f98:	5a9b      	ldrh	r3, [r3, r2]
 8012f9a:	b29b      	uxth	r3, r3
 8012f9c:	001a      	movs	r2, r3
 8012f9e:	187b      	adds	r3, r7, r1
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	189b      	adds	r3, r3, r2
 8012fa4:	187a      	adds	r2, r7, r1
 8012fa6:	6013      	str	r3, [r2, #0]
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	00da      	lsls	r2, r3, #3
 8012fae:	187b      	adds	r3, r7, r1
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	18d3      	adds	r3, r2, r3
 8012fb4:	4a4a      	ldr	r2, [pc, #296]	@ (80130e0 <USB_EPStartXfer+0xe38>)
 8012fb6:	4694      	mov	ip, r2
 8012fb8:	4463      	add	r3, ip
 8012fba:	21b0      	movs	r1, #176	@ 0xb0
 8012fbc:	187a      	adds	r2, r7, r1
 8012fbe:	6013      	str	r3, [r2, #0]
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	691b      	ldr	r3, [r3, #16]
 8012fc4:	b29a      	uxth	r2, r3
 8012fc6:	187b      	adds	r3, r7, r1
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	801a      	strh	r2, [r3, #0]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	22a4      	movs	r2, #164	@ 0xa4
 8012fd0:	18ba      	adds	r2, r7, r2
 8012fd2:	6013      	str	r3, [r2, #0]
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	785b      	ldrb	r3, [r3, #1]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d000      	beq.n	8012fde <USB_EPStartXfer+0xd36>
 8012fdc:	e082      	b.n	80130e4 <USB_EPStartXfer+0xe3c>
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	219c      	movs	r1, #156	@ 0x9c
 8012fe2:	187a      	adds	r2, r7, r1
 8012fe4:	6013      	str	r3, [r2, #0]
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	2250      	movs	r2, #80	@ 0x50
 8012fea:	5a9b      	ldrh	r3, [r3, r2]
 8012fec:	b29b      	uxth	r3, r3
 8012fee:	001a      	movs	r2, r3
 8012ff0:	187b      	adds	r3, r7, r1
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	189b      	adds	r3, r3, r2
 8012ff6:	187a      	adds	r2, r7, r1
 8012ff8:	6013      	str	r3, [r2, #0]
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	781b      	ldrb	r3, [r3, #0]
 8012ffe:	00da      	lsls	r2, r3, #3
 8013000:	187b      	adds	r3, r7, r1
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	18d3      	adds	r3, r2, r3
 8013006:	4a34      	ldr	r2, [pc, #208]	@ (80130d8 <USB_EPStartXfer+0xe30>)
 8013008:	4694      	mov	ip, r2
 801300a:	4463      	add	r3, ip
 801300c:	2198      	movs	r1, #152	@ 0x98
 801300e:	187a      	adds	r2, r7, r1
 8013010:	6013      	str	r3, [r2, #0]
 8013012:	187b      	adds	r3, r7, r1
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	881b      	ldrh	r3, [r3, #0]
 8013018:	b29b      	uxth	r3, r3
 801301a:	059b      	lsls	r3, r3, #22
 801301c:	0d9b      	lsrs	r3, r3, #22
 801301e:	b29a      	uxth	r2, r3
 8013020:	187b      	adds	r3, r7, r1
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	801a      	strh	r2, [r3, #0]
 8013026:	683b      	ldr	r3, [r7, #0]
 8013028:	691b      	ldr	r3, [r3, #16]
 801302a:	2b3e      	cmp	r3, #62	@ 0x3e
 801302c:	d923      	bls.n	8013076 <USB_EPStartXfer+0xdce>
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	691b      	ldr	r3, [r3, #16]
 8013032:	095b      	lsrs	r3, r3, #5
 8013034:	21e0      	movs	r1, #224	@ 0xe0
 8013036:	187a      	adds	r2, r7, r1
 8013038:	6013      	str	r3, [r2, #0]
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	691b      	ldr	r3, [r3, #16]
 801303e:	221f      	movs	r2, #31
 8013040:	4013      	ands	r3, r2
 8013042:	d104      	bne.n	801304e <USB_EPStartXfer+0xda6>
 8013044:	187b      	adds	r3, r7, r1
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	3b01      	subs	r3, #1
 801304a:	187a      	adds	r2, r7, r1
 801304c:	6013      	str	r3, [r2, #0]
 801304e:	2198      	movs	r1, #152	@ 0x98
 8013050:	187b      	adds	r3, r7, r1
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	881b      	ldrh	r3, [r3, #0]
 8013056:	b29a      	uxth	r2, r3
 8013058:	23e0      	movs	r3, #224	@ 0xe0
 801305a:	18fb      	adds	r3, r7, r3
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	b29b      	uxth	r3, r3
 8013060:	029b      	lsls	r3, r3, #10
 8013062:	b29b      	uxth	r3, r3
 8013064:	4313      	orrs	r3, r2
 8013066:	b29b      	uxth	r3, r3
 8013068:	4a1c      	ldr	r2, [pc, #112]	@ (80130dc <USB_EPStartXfer+0xe34>)
 801306a:	4313      	orrs	r3, r2
 801306c:	b29a      	uxth	r2, r3
 801306e:	187b      	adds	r3, r7, r1
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	801a      	strh	r2, [r3, #0]
 8013074:	e057      	b.n	8013126 <USB_EPStartXfer+0xe7e>
 8013076:	683b      	ldr	r3, [r7, #0]
 8013078:	691b      	ldr	r3, [r3, #16]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d10b      	bne.n	8013096 <USB_EPStartXfer+0xdee>
 801307e:	2198      	movs	r1, #152	@ 0x98
 8013080:	187b      	adds	r3, r7, r1
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	881b      	ldrh	r3, [r3, #0]
 8013086:	b29b      	uxth	r3, r3
 8013088:	4a14      	ldr	r2, [pc, #80]	@ (80130dc <USB_EPStartXfer+0xe34>)
 801308a:	4313      	orrs	r3, r2
 801308c:	b29a      	uxth	r2, r3
 801308e:	187b      	adds	r3, r7, r1
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	801a      	strh	r2, [r3, #0]
 8013094:	e047      	b.n	8013126 <USB_EPStartXfer+0xe7e>
 8013096:	683b      	ldr	r3, [r7, #0]
 8013098:	691b      	ldr	r3, [r3, #16]
 801309a:	085b      	lsrs	r3, r3, #1
 801309c:	21e0      	movs	r1, #224	@ 0xe0
 801309e:	187a      	adds	r2, r7, r1
 80130a0:	6013      	str	r3, [r2, #0]
 80130a2:	683b      	ldr	r3, [r7, #0]
 80130a4:	691b      	ldr	r3, [r3, #16]
 80130a6:	2201      	movs	r2, #1
 80130a8:	4013      	ands	r3, r2
 80130aa:	d004      	beq.n	80130b6 <USB_EPStartXfer+0xe0e>
 80130ac:	187b      	adds	r3, r7, r1
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	3301      	adds	r3, #1
 80130b2:	187a      	adds	r2, r7, r1
 80130b4:	6013      	str	r3, [r2, #0]
 80130b6:	2198      	movs	r1, #152	@ 0x98
 80130b8:	187b      	adds	r3, r7, r1
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	881b      	ldrh	r3, [r3, #0]
 80130be:	b29a      	uxth	r2, r3
 80130c0:	23e0      	movs	r3, #224	@ 0xe0
 80130c2:	18fb      	adds	r3, r7, r3
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	b29b      	uxth	r3, r3
 80130c8:	029b      	lsls	r3, r3, #10
 80130ca:	b29b      	uxth	r3, r3
 80130cc:	4313      	orrs	r3, r2
 80130ce:	b29a      	uxth	r2, r3
 80130d0:	187b      	adds	r3, r7, r1
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	801a      	strh	r2, [r3, #0]
 80130d6:	e026      	b.n	8013126 <USB_EPStartXfer+0xe7e>
 80130d8:	00000406 	.word	0x00000406
 80130dc:	ffff8000 	.word	0xffff8000
 80130e0:	00000402 	.word	0x00000402
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	785b      	ldrb	r3, [r3, #1]
 80130e8:	2b01      	cmp	r3, #1
 80130ea:	d11c      	bne.n	8013126 <USB_EPStartXfer+0xe7e>
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2250      	movs	r2, #80	@ 0x50
 80130f0:	5a9b      	ldrh	r3, [r3, r2]
 80130f2:	b29b      	uxth	r3, r3
 80130f4:	001a      	movs	r2, r3
 80130f6:	21a4      	movs	r1, #164	@ 0xa4
 80130f8:	187b      	adds	r3, r7, r1
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	189b      	adds	r3, r3, r2
 80130fe:	187a      	adds	r2, r7, r1
 8013100:	6013      	str	r3, [r2, #0]
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	00da      	lsls	r2, r3, #3
 8013108:	187b      	adds	r3, r7, r1
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	18d3      	adds	r3, r2, r3
 801310e:	4ad2      	ldr	r2, [pc, #840]	@ (8013458 <USB_EPStartXfer+0x11b0>)
 8013110:	4694      	mov	ip, r2
 8013112:	4463      	add	r3, ip
 8013114:	21a0      	movs	r1, #160	@ 0xa0
 8013116:	187a      	adds	r2, r7, r1
 8013118:	6013      	str	r3, [r2, #0]
 801311a:	683b      	ldr	r3, [r7, #0]
 801311c:	691b      	ldr	r3, [r3, #16]
 801311e:	b29a      	uxth	r2, r3
 8013120:	187b      	adds	r3, r7, r1
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	69db      	ldr	r3, [r3, #28]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d100      	bne.n	8013130 <USB_EPStartXfer+0xe88>
 801312e:	e1c2      	b.n	80134b6 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8013130:	687a      	ldr	r2, [r7, #4]
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	009b      	lsls	r3, r3, #2
 8013138:	18d2      	adds	r2, r2, r3
 801313a:	2196      	movs	r1, #150	@ 0x96
 801313c:	187b      	adds	r3, r7, r1
 801313e:	8812      	ldrh	r2, [r2, #0]
 8013140:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013142:	187b      	adds	r3, r7, r1
 8013144:	881a      	ldrh	r2, [r3, #0]
 8013146:	2380      	movs	r3, #128	@ 0x80
 8013148:	01db      	lsls	r3, r3, #7
 801314a:	4013      	ands	r3, r2
 801314c:	d004      	beq.n	8013158 <USB_EPStartXfer+0xeb0>
 801314e:	187b      	adds	r3, r7, r1
 8013150:	881b      	ldrh	r3, [r3, #0]
 8013152:	2240      	movs	r2, #64	@ 0x40
 8013154:	4013      	ands	r3, r2
 8013156:	d10d      	bne.n	8013174 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8013158:	2196      	movs	r1, #150	@ 0x96
 801315a:	187b      	adds	r3, r7, r1
 801315c:	881a      	ldrh	r2, [r3, #0]
 801315e:	2380      	movs	r3, #128	@ 0x80
 8013160:	01db      	lsls	r3, r3, #7
 8013162:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013164:	d000      	beq.n	8013168 <USB_EPStartXfer+0xec0>
 8013166:	e1a6      	b.n	80134b6 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8013168:	187b      	adds	r3, r7, r1
 801316a:	881b      	ldrh	r3, [r3, #0]
 801316c:	2240      	movs	r2, #64	@ 0x40
 801316e:	4013      	ands	r3, r2
 8013170:	d000      	beq.n	8013174 <USB_EPStartXfer+0xecc>
 8013172:	e1a0      	b.n	80134b6 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8013174:	687a      	ldr	r2, [r7, #4]
 8013176:	683b      	ldr	r3, [r7, #0]
 8013178:	781b      	ldrb	r3, [r3, #0]
 801317a:	009b      	lsls	r3, r3, #2
 801317c:	18d3      	adds	r3, r2, r3
 801317e:	881b      	ldrh	r3, [r3, #0]
 8013180:	b29a      	uxth	r2, r3
 8013182:	2094      	movs	r0, #148	@ 0x94
 8013184:	183b      	adds	r3, r7, r0
 8013186:	49b5      	ldr	r1, [pc, #724]	@ (801345c <USB_EPStartXfer+0x11b4>)
 8013188:	400a      	ands	r2, r1
 801318a:	801a      	strh	r2, [r3, #0]
 801318c:	687a      	ldr	r2, [r7, #4]
 801318e:	683b      	ldr	r3, [r7, #0]
 8013190:	781b      	ldrb	r3, [r3, #0]
 8013192:	009b      	lsls	r3, r3, #2
 8013194:	18d3      	adds	r3, r2, r3
 8013196:	183a      	adds	r2, r7, r0
 8013198:	8812      	ldrh	r2, [r2, #0]
 801319a:	49b1      	ldr	r1, [pc, #708]	@ (8013460 <USB_EPStartXfer+0x11b8>)
 801319c:	430a      	orrs	r2, r1
 801319e:	b292      	uxth	r2, r2
 80131a0:	801a      	strh	r2, [r3, #0]
 80131a2:	e188      	b.n	80134b6 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	78db      	ldrb	r3, [r3, #3]
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	d000      	beq.n	80131ae <USB_EPStartXfer+0xf06>
 80131ac:	e181      	b.n	80134b2 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	699a      	ldr	r2, [r3, #24]
 80131b2:	683b      	ldr	r3, [r7, #0]
 80131b4:	691b      	ldr	r3, [r3, #16]
 80131b6:	429a      	cmp	r2, r3
 80131b8:	d90d      	bls.n	80131d6 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	691b      	ldr	r3, [r3, #16]
 80131be:	1d7a      	adds	r2, r7, #5
 80131c0:	32ff      	adds	r2, #255	@ 0xff
 80131c2:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	699a      	ldr	r2, [r3, #24]
 80131c8:	1d7b      	adds	r3, r7, #5
 80131ca:	33ff      	adds	r3, #255	@ 0xff
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	1ad2      	subs	r2, r2, r3
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	619a      	str	r2, [r3, #24]
 80131d4:	e007      	b.n	80131e6 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	699b      	ldr	r3, [r3, #24]
 80131da:	1d7a      	adds	r2, r7, #5
 80131dc:	32ff      	adds	r2, #255	@ 0xff
 80131de:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80131e0:	683b      	ldr	r3, [r7, #0]
 80131e2:	2200      	movs	r2, #0
 80131e4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	785b      	ldrb	r3, [r3, #1]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d000      	beq.n	80131f0 <USB_EPStartXfer+0xf48>
 80131ee:	e082      	b.n	80132f6 <USB_EPStartXfer+0x104e>
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	21cc      	movs	r1, #204	@ 0xcc
 80131f4:	187a      	adds	r2, r7, r1
 80131f6:	6013      	str	r3, [r2, #0]
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2250      	movs	r2, #80	@ 0x50
 80131fc:	5a9b      	ldrh	r3, [r3, r2]
 80131fe:	b29b      	uxth	r3, r3
 8013200:	001a      	movs	r2, r3
 8013202:	187b      	adds	r3, r7, r1
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	189b      	adds	r3, r3, r2
 8013208:	187a      	adds	r2, r7, r1
 801320a:	6013      	str	r3, [r2, #0]
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	781b      	ldrb	r3, [r3, #0]
 8013210:	00da      	lsls	r2, r3, #3
 8013212:	187b      	adds	r3, r7, r1
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	18d3      	adds	r3, r2, r3
 8013218:	4a92      	ldr	r2, [pc, #584]	@ (8013464 <USB_EPStartXfer+0x11bc>)
 801321a:	4694      	mov	ip, r2
 801321c:	4463      	add	r3, ip
 801321e:	21c8      	movs	r1, #200	@ 0xc8
 8013220:	187a      	adds	r2, r7, r1
 8013222:	6013      	str	r3, [r2, #0]
 8013224:	187b      	adds	r3, r7, r1
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	881b      	ldrh	r3, [r3, #0]
 801322a:	b29b      	uxth	r3, r3
 801322c:	059b      	lsls	r3, r3, #22
 801322e:	0d9b      	lsrs	r3, r3, #22
 8013230:	b29a      	uxth	r2, r3
 8013232:	187b      	adds	r3, r7, r1
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	801a      	strh	r2, [r3, #0]
 8013238:	1d7b      	adds	r3, r7, #5
 801323a:	33ff      	adds	r3, #255	@ 0xff
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	2b3e      	cmp	r3, #62	@ 0x3e
 8013240:	d925      	bls.n	801328e <USB_EPStartXfer+0xfe6>
 8013242:	1d7b      	adds	r3, r7, #5
 8013244:	33ff      	adds	r3, #255	@ 0xff
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	095b      	lsrs	r3, r3, #5
 801324a:	21dc      	movs	r1, #220	@ 0xdc
 801324c:	187a      	adds	r2, r7, r1
 801324e:	6013      	str	r3, [r2, #0]
 8013250:	1d7b      	adds	r3, r7, #5
 8013252:	33ff      	adds	r3, #255	@ 0xff
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	221f      	movs	r2, #31
 8013258:	4013      	ands	r3, r2
 801325a:	d104      	bne.n	8013266 <USB_EPStartXfer+0xfbe>
 801325c:	187b      	adds	r3, r7, r1
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	3b01      	subs	r3, #1
 8013262:	187a      	adds	r2, r7, r1
 8013264:	6013      	str	r3, [r2, #0]
 8013266:	21c8      	movs	r1, #200	@ 0xc8
 8013268:	187b      	adds	r3, r7, r1
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	881b      	ldrh	r3, [r3, #0]
 801326e:	b29a      	uxth	r2, r3
 8013270:	23dc      	movs	r3, #220	@ 0xdc
 8013272:	18fb      	adds	r3, r7, r3
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	b29b      	uxth	r3, r3
 8013278:	029b      	lsls	r3, r3, #10
 801327a:	b29b      	uxth	r3, r3
 801327c:	4313      	orrs	r3, r2
 801327e:	b29b      	uxth	r3, r3
 8013280:	4a79      	ldr	r2, [pc, #484]	@ (8013468 <USB_EPStartXfer+0x11c0>)
 8013282:	4313      	orrs	r3, r2
 8013284:	b29a      	uxth	r2, r3
 8013286:	187b      	adds	r3, r7, r1
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	801a      	strh	r2, [r3, #0]
 801328c:	e058      	b.n	8013340 <USB_EPStartXfer+0x1098>
 801328e:	1d7b      	adds	r3, r7, #5
 8013290:	33ff      	adds	r3, #255	@ 0xff
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d10b      	bne.n	80132b0 <USB_EPStartXfer+0x1008>
 8013298:	21c8      	movs	r1, #200	@ 0xc8
 801329a:	187b      	adds	r3, r7, r1
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	881b      	ldrh	r3, [r3, #0]
 80132a0:	b29b      	uxth	r3, r3
 80132a2:	4a71      	ldr	r2, [pc, #452]	@ (8013468 <USB_EPStartXfer+0x11c0>)
 80132a4:	4313      	orrs	r3, r2
 80132a6:	b29a      	uxth	r2, r3
 80132a8:	187b      	adds	r3, r7, r1
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	801a      	strh	r2, [r3, #0]
 80132ae:	e047      	b.n	8013340 <USB_EPStartXfer+0x1098>
 80132b0:	1d7b      	adds	r3, r7, #5
 80132b2:	33ff      	adds	r3, #255	@ 0xff
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	085b      	lsrs	r3, r3, #1
 80132b8:	21dc      	movs	r1, #220	@ 0xdc
 80132ba:	187a      	adds	r2, r7, r1
 80132bc:	6013      	str	r3, [r2, #0]
 80132be:	1d7b      	adds	r3, r7, #5
 80132c0:	33ff      	adds	r3, #255	@ 0xff
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	2201      	movs	r2, #1
 80132c6:	4013      	ands	r3, r2
 80132c8:	d004      	beq.n	80132d4 <USB_EPStartXfer+0x102c>
 80132ca:	187b      	adds	r3, r7, r1
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	3301      	adds	r3, #1
 80132d0:	187a      	adds	r2, r7, r1
 80132d2:	6013      	str	r3, [r2, #0]
 80132d4:	21c8      	movs	r1, #200	@ 0xc8
 80132d6:	187b      	adds	r3, r7, r1
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	881b      	ldrh	r3, [r3, #0]
 80132dc:	b29a      	uxth	r2, r3
 80132de:	23dc      	movs	r3, #220	@ 0xdc
 80132e0:	18fb      	adds	r3, r7, r3
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	b29b      	uxth	r3, r3
 80132e6:	029b      	lsls	r3, r3, #10
 80132e8:	b29b      	uxth	r3, r3
 80132ea:	4313      	orrs	r3, r2
 80132ec:	b29a      	uxth	r2, r3
 80132ee:	187b      	adds	r3, r7, r1
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	801a      	strh	r2, [r3, #0]
 80132f4:	e024      	b.n	8013340 <USB_EPStartXfer+0x1098>
 80132f6:	683b      	ldr	r3, [r7, #0]
 80132f8:	785b      	ldrb	r3, [r3, #1]
 80132fa:	2b01      	cmp	r3, #1
 80132fc:	d120      	bne.n	8013340 <USB_EPStartXfer+0x1098>
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	21d4      	movs	r1, #212	@ 0xd4
 8013302:	187a      	adds	r2, r7, r1
 8013304:	6013      	str	r3, [r2, #0]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	2250      	movs	r2, #80	@ 0x50
 801330a:	5a9b      	ldrh	r3, [r3, r2]
 801330c:	b29b      	uxth	r3, r3
 801330e:	001a      	movs	r2, r3
 8013310:	187b      	adds	r3, r7, r1
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	189b      	adds	r3, r3, r2
 8013316:	187a      	adds	r2, r7, r1
 8013318:	6013      	str	r3, [r2, #0]
 801331a:	683b      	ldr	r3, [r7, #0]
 801331c:	781b      	ldrb	r3, [r3, #0]
 801331e:	00da      	lsls	r2, r3, #3
 8013320:	187b      	adds	r3, r7, r1
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	18d3      	adds	r3, r2, r3
 8013326:	4a4f      	ldr	r2, [pc, #316]	@ (8013464 <USB_EPStartXfer+0x11bc>)
 8013328:	4694      	mov	ip, r2
 801332a:	4463      	add	r3, ip
 801332c:	21d0      	movs	r1, #208	@ 0xd0
 801332e:	187a      	adds	r2, r7, r1
 8013330:	6013      	str	r3, [r2, #0]
 8013332:	1d7b      	adds	r3, r7, #5
 8013334:	33ff      	adds	r3, #255	@ 0xff
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	b29a      	uxth	r2, r3
 801333a:	187b      	adds	r3, r7, r1
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	801a      	strh	r2, [r3, #0]
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	22c4      	movs	r2, #196	@ 0xc4
 8013344:	18ba      	adds	r2, r7, r2
 8013346:	6013      	str	r3, [r2, #0]
 8013348:	683b      	ldr	r3, [r7, #0]
 801334a:	785b      	ldrb	r3, [r3, #1]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d000      	beq.n	8013352 <USB_EPStartXfer+0x10aa>
 8013350:	e08c      	b.n	801346c <USB_EPStartXfer+0x11c4>
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	21bc      	movs	r1, #188	@ 0xbc
 8013356:	187a      	adds	r2, r7, r1
 8013358:	6013      	str	r3, [r2, #0]
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	2250      	movs	r2, #80	@ 0x50
 801335e:	5a9b      	ldrh	r3, [r3, r2]
 8013360:	b29b      	uxth	r3, r3
 8013362:	001a      	movs	r2, r3
 8013364:	187b      	adds	r3, r7, r1
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	189b      	adds	r3, r3, r2
 801336a:	187a      	adds	r2, r7, r1
 801336c:	6013      	str	r3, [r2, #0]
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	781b      	ldrb	r3, [r3, #0]
 8013372:	00da      	lsls	r2, r3, #3
 8013374:	187b      	adds	r3, r7, r1
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	18d3      	adds	r3, r2, r3
 801337a:	4a37      	ldr	r2, [pc, #220]	@ (8013458 <USB_EPStartXfer+0x11b0>)
 801337c:	4694      	mov	ip, r2
 801337e:	4463      	add	r3, ip
 8013380:	21b8      	movs	r1, #184	@ 0xb8
 8013382:	187a      	adds	r2, r7, r1
 8013384:	6013      	str	r3, [r2, #0]
 8013386:	187b      	adds	r3, r7, r1
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	881b      	ldrh	r3, [r3, #0]
 801338c:	b29b      	uxth	r3, r3
 801338e:	059b      	lsls	r3, r3, #22
 8013390:	0d9b      	lsrs	r3, r3, #22
 8013392:	b29a      	uxth	r2, r3
 8013394:	187b      	adds	r3, r7, r1
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	801a      	strh	r2, [r3, #0]
 801339a:	1d7b      	adds	r3, r7, #5
 801339c:	33ff      	adds	r3, #255	@ 0xff
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80133a2:	d925      	bls.n	80133f0 <USB_EPStartXfer+0x1148>
 80133a4:	1d7b      	adds	r3, r7, #5
 80133a6:	33ff      	adds	r3, #255	@ 0xff
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	095b      	lsrs	r3, r3, #5
 80133ac:	21d8      	movs	r1, #216	@ 0xd8
 80133ae:	187a      	adds	r2, r7, r1
 80133b0:	6013      	str	r3, [r2, #0]
 80133b2:	1d7b      	adds	r3, r7, #5
 80133b4:	33ff      	adds	r3, #255	@ 0xff
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	221f      	movs	r2, #31
 80133ba:	4013      	ands	r3, r2
 80133bc:	d104      	bne.n	80133c8 <USB_EPStartXfer+0x1120>
 80133be:	187b      	adds	r3, r7, r1
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	3b01      	subs	r3, #1
 80133c4:	187a      	adds	r2, r7, r1
 80133c6:	6013      	str	r3, [r2, #0]
 80133c8:	21b8      	movs	r1, #184	@ 0xb8
 80133ca:	187b      	adds	r3, r7, r1
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	881b      	ldrh	r3, [r3, #0]
 80133d0:	b29a      	uxth	r2, r3
 80133d2:	23d8      	movs	r3, #216	@ 0xd8
 80133d4:	18fb      	adds	r3, r7, r3
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	b29b      	uxth	r3, r3
 80133da:	029b      	lsls	r3, r3, #10
 80133dc:	b29b      	uxth	r3, r3
 80133de:	4313      	orrs	r3, r2
 80133e0:	b29b      	uxth	r3, r3
 80133e2:	4a21      	ldr	r2, [pc, #132]	@ (8013468 <USB_EPStartXfer+0x11c0>)
 80133e4:	4313      	orrs	r3, r2
 80133e6:	b29a      	uxth	r2, r3
 80133e8:	187b      	adds	r3, r7, r1
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	801a      	strh	r2, [r3, #0]
 80133ee:	e062      	b.n	80134b6 <USB_EPStartXfer+0x120e>
 80133f0:	1d7b      	adds	r3, r7, #5
 80133f2:	33ff      	adds	r3, #255	@ 0xff
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d10b      	bne.n	8013412 <USB_EPStartXfer+0x116a>
 80133fa:	21b8      	movs	r1, #184	@ 0xb8
 80133fc:	187b      	adds	r3, r7, r1
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	881b      	ldrh	r3, [r3, #0]
 8013402:	b29b      	uxth	r3, r3
 8013404:	4a18      	ldr	r2, [pc, #96]	@ (8013468 <USB_EPStartXfer+0x11c0>)
 8013406:	4313      	orrs	r3, r2
 8013408:	b29a      	uxth	r2, r3
 801340a:	187b      	adds	r3, r7, r1
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	801a      	strh	r2, [r3, #0]
 8013410:	e051      	b.n	80134b6 <USB_EPStartXfer+0x120e>
 8013412:	1d7b      	adds	r3, r7, #5
 8013414:	33ff      	adds	r3, #255	@ 0xff
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	085b      	lsrs	r3, r3, #1
 801341a:	21d8      	movs	r1, #216	@ 0xd8
 801341c:	187a      	adds	r2, r7, r1
 801341e:	6013      	str	r3, [r2, #0]
 8013420:	1d7b      	adds	r3, r7, #5
 8013422:	33ff      	adds	r3, #255	@ 0xff
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	2201      	movs	r2, #1
 8013428:	4013      	ands	r3, r2
 801342a:	d004      	beq.n	8013436 <USB_EPStartXfer+0x118e>
 801342c:	187b      	adds	r3, r7, r1
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	3301      	adds	r3, #1
 8013432:	187a      	adds	r2, r7, r1
 8013434:	6013      	str	r3, [r2, #0]
 8013436:	21b8      	movs	r1, #184	@ 0xb8
 8013438:	187b      	adds	r3, r7, r1
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	881b      	ldrh	r3, [r3, #0]
 801343e:	b29a      	uxth	r2, r3
 8013440:	23d8      	movs	r3, #216	@ 0xd8
 8013442:	18fb      	adds	r3, r7, r3
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	b29b      	uxth	r3, r3
 8013448:	029b      	lsls	r3, r3, #10
 801344a:	b29b      	uxth	r3, r3
 801344c:	4313      	orrs	r3, r2
 801344e:	b29a      	uxth	r2, r3
 8013450:	187b      	adds	r3, r7, r1
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	801a      	strh	r2, [r3, #0]
 8013456:	e02e      	b.n	80134b6 <USB_EPStartXfer+0x120e>
 8013458:	00000406 	.word	0x00000406
 801345c:	ffff8f8f 	.word	0xffff8f8f
 8013460:	ffff80c0 	.word	0xffff80c0
 8013464:	00000402 	.word	0x00000402
 8013468:	ffff8000 	.word	0xffff8000
 801346c:	683b      	ldr	r3, [r7, #0]
 801346e:	785b      	ldrb	r3, [r3, #1]
 8013470:	2b01      	cmp	r3, #1
 8013472:	d120      	bne.n	80134b6 <USB_EPStartXfer+0x120e>
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	2250      	movs	r2, #80	@ 0x50
 8013478:	5a9b      	ldrh	r3, [r3, r2]
 801347a:	b29b      	uxth	r3, r3
 801347c:	001a      	movs	r2, r3
 801347e:	21c4      	movs	r1, #196	@ 0xc4
 8013480:	187b      	adds	r3, r7, r1
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	189b      	adds	r3, r3, r2
 8013486:	187a      	adds	r2, r7, r1
 8013488:	6013      	str	r3, [r2, #0]
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	781b      	ldrb	r3, [r3, #0]
 801348e:	00da      	lsls	r2, r3, #3
 8013490:	187b      	adds	r3, r7, r1
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	18d3      	adds	r3, r2, r3
 8013496:	4a1d      	ldr	r2, [pc, #116]	@ (801350c <USB_EPStartXfer+0x1264>)
 8013498:	4694      	mov	ip, r2
 801349a:	4463      	add	r3, ip
 801349c:	21c0      	movs	r1, #192	@ 0xc0
 801349e:	187a      	adds	r2, r7, r1
 80134a0:	6013      	str	r3, [r2, #0]
 80134a2:	1d7b      	adds	r3, r7, #5
 80134a4:	33ff      	adds	r3, #255	@ 0xff
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	b29a      	uxth	r2, r3
 80134aa:	187b      	adds	r3, r7, r1
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	801a      	strh	r2, [r3, #0]
 80134b0:	e001      	b.n	80134b6 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80134b2:	2301      	movs	r3, #1
 80134b4:	e025      	b.n	8013502 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	683b      	ldr	r3, [r7, #0]
 80134ba:	781b      	ldrb	r3, [r3, #0]
 80134bc:	009b      	lsls	r3, r3, #2
 80134be:	18d3      	adds	r3, r2, r3
 80134c0:	881b      	ldrh	r3, [r3, #0]
 80134c2:	b29a      	uxth	r2, r3
 80134c4:	208a      	movs	r0, #138	@ 0x8a
 80134c6:	183b      	adds	r3, r7, r0
 80134c8:	4911      	ldr	r1, [pc, #68]	@ (8013510 <USB_EPStartXfer+0x1268>)
 80134ca:	400a      	ands	r2, r1
 80134cc:	801a      	strh	r2, [r3, #0]
 80134ce:	183b      	adds	r3, r7, r0
 80134d0:	183a      	adds	r2, r7, r0
 80134d2:	8812      	ldrh	r2, [r2, #0]
 80134d4:	2180      	movs	r1, #128	@ 0x80
 80134d6:	0149      	lsls	r1, r1, #5
 80134d8:	404a      	eors	r2, r1
 80134da:	801a      	strh	r2, [r3, #0]
 80134dc:	183b      	adds	r3, r7, r0
 80134de:	183a      	adds	r2, r7, r0
 80134e0:	8812      	ldrh	r2, [r2, #0]
 80134e2:	2180      	movs	r1, #128	@ 0x80
 80134e4:	0189      	lsls	r1, r1, #6
 80134e6:	404a      	eors	r2, r1
 80134e8:	801a      	strh	r2, [r3, #0]
 80134ea:	687a      	ldr	r2, [r7, #4]
 80134ec:	683b      	ldr	r3, [r7, #0]
 80134ee:	781b      	ldrb	r3, [r3, #0]
 80134f0:	009b      	lsls	r3, r3, #2
 80134f2:	18d3      	adds	r3, r2, r3
 80134f4:	183a      	adds	r2, r7, r0
 80134f6:	8812      	ldrh	r2, [r2, #0]
 80134f8:	4906      	ldr	r1, [pc, #24]	@ (8013514 <USB_EPStartXfer+0x126c>)
 80134fa:	430a      	orrs	r2, r1
 80134fc:	b292      	uxth	r2, r2
 80134fe:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8013500:	2300      	movs	r3, #0
}
 8013502:	0018      	movs	r0, r3
 8013504:	46bd      	mov	sp, r7
 8013506:	b043      	add	sp, #268	@ 0x10c
 8013508:	bd90      	pop	{r4, r7, pc}
 801350a:	46c0      	nop			@ (mov r8, r8)
 801350c:	00000406 	.word	0x00000406
 8013510:	ffffbf8f 	.word	0xffffbf8f
 8013514:	ffff8080 	.word	0xffff8080

08013518 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b084      	sub	sp, #16
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
 8013520:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8013522:	683b      	ldr	r3, [r7, #0]
 8013524:	785b      	ldrb	r3, [r3, #1]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d01d      	beq.n	8013566 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801352a:	687a      	ldr	r2, [r7, #4]
 801352c:	683b      	ldr	r3, [r7, #0]
 801352e:	781b      	ldrb	r3, [r3, #0]
 8013530:	009b      	lsls	r3, r3, #2
 8013532:	18d3      	adds	r3, r2, r3
 8013534:	881b      	ldrh	r3, [r3, #0]
 8013536:	b29a      	uxth	r2, r3
 8013538:	200c      	movs	r0, #12
 801353a:	183b      	adds	r3, r7, r0
 801353c:	491b      	ldr	r1, [pc, #108]	@ (80135ac <USB_EPSetStall+0x94>)
 801353e:	400a      	ands	r2, r1
 8013540:	801a      	strh	r2, [r3, #0]
 8013542:	183b      	adds	r3, r7, r0
 8013544:	183a      	adds	r2, r7, r0
 8013546:	8812      	ldrh	r2, [r2, #0]
 8013548:	2110      	movs	r1, #16
 801354a:	404a      	eors	r2, r1
 801354c:	801a      	strh	r2, [r3, #0]
 801354e:	687a      	ldr	r2, [r7, #4]
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	781b      	ldrb	r3, [r3, #0]
 8013554:	009b      	lsls	r3, r3, #2
 8013556:	18d3      	adds	r3, r2, r3
 8013558:	183a      	adds	r2, r7, r0
 801355a:	8812      	ldrh	r2, [r2, #0]
 801355c:	4914      	ldr	r1, [pc, #80]	@ (80135b0 <USB_EPSetStall+0x98>)
 801355e:	430a      	orrs	r2, r1
 8013560:	b292      	uxth	r2, r2
 8013562:	801a      	strh	r2, [r3, #0]
 8013564:	e01d      	b.n	80135a2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8013566:	687a      	ldr	r2, [r7, #4]
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	781b      	ldrb	r3, [r3, #0]
 801356c:	009b      	lsls	r3, r3, #2
 801356e:	18d3      	adds	r3, r2, r3
 8013570:	881b      	ldrh	r3, [r3, #0]
 8013572:	b29a      	uxth	r2, r3
 8013574:	200e      	movs	r0, #14
 8013576:	183b      	adds	r3, r7, r0
 8013578:	490e      	ldr	r1, [pc, #56]	@ (80135b4 <USB_EPSetStall+0x9c>)
 801357a:	400a      	ands	r2, r1
 801357c:	801a      	strh	r2, [r3, #0]
 801357e:	183b      	adds	r3, r7, r0
 8013580:	183a      	adds	r2, r7, r0
 8013582:	8812      	ldrh	r2, [r2, #0]
 8013584:	2180      	movs	r1, #128	@ 0x80
 8013586:	0149      	lsls	r1, r1, #5
 8013588:	404a      	eors	r2, r1
 801358a:	801a      	strh	r2, [r3, #0]
 801358c:	687a      	ldr	r2, [r7, #4]
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	781b      	ldrb	r3, [r3, #0]
 8013592:	009b      	lsls	r3, r3, #2
 8013594:	18d3      	adds	r3, r2, r3
 8013596:	183a      	adds	r2, r7, r0
 8013598:	8812      	ldrh	r2, [r2, #0]
 801359a:	4905      	ldr	r1, [pc, #20]	@ (80135b0 <USB_EPSetStall+0x98>)
 801359c:	430a      	orrs	r2, r1
 801359e:	b292      	uxth	r2, r2
 80135a0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80135a2:	2300      	movs	r3, #0
}
 80135a4:	0018      	movs	r0, r3
 80135a6:	46bd      	mov	sp, r7
 80135a8:	b004      	add	sp, #16
 80135aa:	bd80      	pop	{r7, pc}
 80135ac:	ffff8fbf 	.word	0xffff8fbf
 80135b0:	ffff8080 	.word	0xffff8080
 80135b4:	ffffbf8f 	.word	0xffffbf8f

080135b8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b086      	sub	sp, #24
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
 80135c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	7b1b      	ldrb	r3, [r3, #12]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d000      	beq.n	80135cc <USB_EPClearStall+0x14>
 80135ca:	e095      	b.n	80136f8 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	785b      	ldrb	r3, [r3, #1]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d046      	beq.n	8013662 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80135d4:	687a      	ldr	r2, [r7, #4]
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	781b      	ldrb	r3, [r3, #0]
 80135da:	009b      	lsls	r3, r3, #2
 80135dc:	18d2      	adds	r2, r2, r3
 80135de:	2110      	movs	r1, #16
 80135e0:	187b      	adds	r3, r7, r1
 80135e2:	8812      	ldrh	r2, [r2, #0]
 80135e4:	801a      	strh	r2, [r3, #0]
 80135e6:	187b      	adds	r3, r7, r1
 80135e8:	881b      	ldrh	r3, [r3, #0]
 80135ea:	2240      	movs	r2, #64	@ 0x40
 80135ec:	4013      	ands	r3, r2
 80135ee:	d016      	beq.n	801361e <USB_EPClearStall+0x66>
 80135f0:	687a      	ldr	r2, [r7, #4]
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	781b      	ldrb	r3, [r3, #0]
 80135f6:	009b      	lsls	r3, r3, #2
 80135f8:	18d3      	adds	r3, r2, r3
 80135fa:	881b      	ldrh	r3, [r3, #0]
 80135fc:	b29a      	uxth	r2, r3
 80135fe:	200e      	movs	r0, #14
 8013600:	183b      	adds	r3, r7, r0
 8013602:	4940      	ldr	r1, [pc, #256]	@ (8013704 <USB_EPClearStall+0x14c>)
 8013604:	400a      	ands	r2, r1
 8013606:	801a      	strh	r2, [r3, #0]
 8013608:	687a      	ldr	r2, [r7, #4]
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	781b      	ldrb	r3, [r3, #0]
 801360e:	009b      	lsls	r3, r3, #2
 8013610:	18d3      	adds	r3, r2, r3
 8013612:	183a      	adds	r2, r7, r0
 8013614:	8812      	ldrh	r2, [r2, #0]
 8013616:	493c      	ldr	r1, [pc, #240]	@ (8013708 <USB_EPClearStall+0x150>)
 8013618:	430a      	orrs	r2, r1
 801361a:	b292      	uxth	r2, r2
 801361c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	78db      	ldrb	r3, [r3, #3]
 8013622:	2b01      	cmp	r3, #1
 8013624:	d068      	beq.n	80136f8 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013626:	687a      	ldr	r2, [r7, #4]
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	781b      	ldrb	r3, [r3, #0]
 801362c:	009b      	lsls	r3, r3, #2
 801362e:	18d3      	adds	r3, r2, r3
 8013630:	881b      	ldrh	r3, [r3, #0]
 8013632:	b29a      	uxth	r2, r3
 8013634:	200c      	movs	r0, #12
 8013636:	183b      	adds	r3, r7, r0
 8013638:	4934      	ldr	r1, [pc, #208]	@ (801370c <USB_EPClearStall+0x154>)
 801363a:	400a      	ands	r2, r1
 801363c:	801a      	strh	r2, [r3, #0]
 801363e:	183b      	adds	r3, r7, r0
 8013640:	183a      	adds	r2, r7, r0
 8013642:	8812      	ldrh	r2, [r2, #0]
 8013644:	2120      	movs	r1, #32
 8013646:	404a      	eors	r2, r1
 8013648:	801a      	strh	r2, [r3, #0]
 801364a:	687a      	ldr	r2, [r7, #4]
 801364c:	683b      	ldr	r3, [r7, #0]
 801364e:	781b      	ldrb	r3, [r3, #0]
 8013650:	009b      	lsls	r3, r3, #2
 8013652:	18d3      	adds	r3, r2, r3
 8013654:	183a      	adds	r2, r7, r0
 8013656:	8812      	ldrh	r2, [r2, #0]
 8013658:	492d      	ldr	r1, [pc, #180]	@ (8013710 <USB_EPClearStall+0x158>)
 801365a:	430a      	orrs	r2, r1
 801365c:	b292      	uxth	r2, r2
 801365e:	801a      	strh	r2, [r3, #0]
 8013660:	e04a      	b.n	80136f8 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013662:	687a      	ldr	r2, [r7, #4]
 8013664:	683b      	ldr	r3, [r7, #0]
 8013666:	781b      	ldrb	r3, [r3, #0]
 8013668:	009b      	lsls	r3, r3, #2
 801366a:	18d2      	adds	r2, r2, r3
 801366c:	2116      	movs	r1, #22
 801366e:	187b      	adds	r3, r7, r1
 8013670:	8812      	ldrh	r2, [r2, #0]
 8013672:	801a      	strh	r2, [r3, #0]
 8013674:	187b      	adds	r3, r7, r1
 8013676:	881a      	ldrh	r2, [r3, #0]
 8013678:	2380      	movs	r3, #128	@ 0x80
 801367a:	01db      	lsls	r3, r3, #7
 801367c:	4013      	ands	r3, r2
 801367e:	d016      	beq.n	80136ae <USB_EPClearStall+0xf6>
 8013680:	687a      	ldr	r2, [r7, #4]
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	781b      	ldrb	r3, [r3, #0]
 8013686:	009b      	lsls	r3, r3, #2
 8013688:	18d3      	adds	r3, r2, r3
 801368a:	881b      	ldrh	r3, [r3, #0]
 801368c:	b29a      	uxth	r2, r3
 801368e:	2014      	movs	r0, #20
 8013690:	183b      	adds	r3, r7, r0
 8013692:	491c      	ldr	r1, [pc, #112]	@ (8013704 <USB_EPClearStall+0x14c>)
 8013694:	400a      	ands	r2, r1
 8013696:	801a      	strh	r2, [r3, #0]
 8013698:	687a      	ldr	r2, [r7, #4]
 801369a:	683b      	ldr	r3, [r7, #0]
 801369c:	781b      	ldrb	r3, [r3, #0]
 801369e:	009b      	lsls	r3, r3, #2
 80136a0:	18d3      	adds	r3, r2, r3
 80136a2:	183a      	adds	r2, r7, r0
 80136a4:	8812      	ldrh	r2, [r2, #0]
 80136a6:	491b      	ldr	r1, [pc, #108]	@ (8013714 <USB_EPClearStall+0x15c>)
 80136a8:	430a      	orrs	r2, r1
 80136aa:	b292      	uxth	r2, r2
 80136ac:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80136ae:	687a      	ldr	r2, [r7, #4]
 80136b0:	683b      	ldr	r3, [r7, #0]
 80136b2:	781b      	ldrb	r3, [r3, #0]
 80136b4:	009b      	lsls	r3, r3, #2
 80136b6:	18d3      	adds	r3, r2, r3
 80136b8:	881b      	ldrh	r3, [r3, #0]
 80136ba:	b29a      	uxth	r2, r3
 80136bc:	2012      	movs	r0, #18
 80136be:	183b      	adds	r3, r7, r0
 80136c0:	4915      	ldr	r1, [pc, #84]	@ (8013718 <USB_EPClearStall+0x160>)
 80136c2:	400a      	ands	r2, r1
 80136c4:	801a      	strh	r2, [r3, #0]
 80136c6:	183b      	adds	r3, r7, r0
 80136c8:	183a      	adds	r2, r7, r0
 80136ca:	8812      	ldrh	r2, [r2, #0]
 80136cc:	2180      	movs	r1, #128	@ 0x80
 80136ce:	0149      	lsls	r1, r1, #5
 80136d0:	404a      	eors	r2, r1
 80136d2:	801a      	strh	r2, [r3, #0]
 80136d4:	183b      	adds	r3, r7, r0
 80136d6:	183a      	adds	r2, r7, r0
 80136d8:	8812      	ldrh	r2, [r2, #0]
 80136da:	2180      	movs	r1, #128	@ 0x80
 80136dc:	0189      	lsls	r1, r1, #6
 80136de:	404a      	eors	r2, r1
 80136e0:	801a      	strh	r2, [r3, #0]
 80136e2:	687a      	ldr	r2, [r7, #4]
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	781b      	ldrb	r3, [r3, #0]
 80136e8:	009b      	lsls	r3, r3, #2
 80136ea:	18d3      	adds	r3, r2, r3
 80136ec:	183a      	adds	r2, r7, r0
 80136ee:	8812      	ldrh	r2, [r2, #0]
 80136f0:	4907      	ldr	r1, [pc, #28]	@ (8013710 <USB_EPClearStall+0x158>)
 80136f2:	430a      	orrs	r2, r1
 80136f4:	b292      	uxth	r2, r2
 80136f6:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80136f8:	2300      	movs	r3, #0
}
 80136fa:	0018      	movs	r0, r3
 80136fc:	46bd      	mov	sp, r7
 80136fe:	b006      	add	sp, #24
 8013700:	bd80      	pop	{r7, pc}
 8013702:	46c0      	nop			@ (mov r8, r8)
 8013704:	ffff8f8f 	.word	0xffff8f8f
 8013708:	ffff80c0 	.word	0xffff80c0
 801370c:	ffff8fbf 	.word	0xffff8fbf
 8013710:	ffff8080 	.word	0xffff8080
 8013714:	ffffc080 	.word	0xffffc080
 8013718:	ffffbf8f 	.word	0xffffbf8f

0801371c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b082      	sub	sp, #8
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
 8013724:	000a      	movs	r2, r1
 8013726:	1cfb      	adds	r3, r7, #3
 8013728:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801372a:	1cfb      	adds	r3, r7, #3
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d103      	bne.n	801373a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	224c      	movs	r2, #76	@ 0x4c
 8013736:	2180      	movs	r1, #128	@ 0x80
 8013738:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801373a:	2300      	movs	r3, #0
}
 801373c:	0018      	movs	r0, r3
 801373e:	46bd      	mov	sp, r7
 8013740:	b002      	add	sp, #8
 8013742:	bd80      	pop	{r7, pc}

08013744 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b082      	sub	sp, #8
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	2258      	movs	r2, #88	@ 0x58
 8013750:	5a9b      	ldrh	r3, [r3, r2]
 8013752:	b29b      	uxth	r3, r3
 8013754:	4a05      	ldr	r2, [pc, #20]	@ (801376c <USB_DevConnect+0x28>)
 8013756:	4313      	orrs	r3, r2
 8013758:	b299      	uxth	r1, r3
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	2258      	movs	r2, #88	@ 0x58
 801375e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8013760:	2300      	movs	r3, #0
}
 8013762:	0018      	movs	r0, r3
 8013764:	46bd      	mov	sp, r7
 8013766:	b002      	add	sp, #8
 8013768:	bd80      	pop	{r7, pc}
 801376a:	46c0      	nop			@ (mov r8, r8)
 801376c:	ffff8000 	.word	0xffff8000

08013770 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b084      	sub	sp, #16
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	2244      	movs	r2, #68	@ 0x44
 801377c:	5a9b      	ldrh	r3, [r3, r2]
 801377e:	b29b      	uxth	r3, r3
 8013780:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8013782:	68fb      	ldr	r3, [r7, #12]
}
 8013784:	0018      	movs	r0, r3
 8013786:	46bd      	mov	sp, r7
 8013788:	b004      	add	sp, #16
 801378a:	bd80      	pop	{r7, pc}

0801378c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b08a      	sub	sp, #40	@ 0x28
 8013790:	af00      	add	r7, sp, #0
 8013792:	60f8      	str	r0, [r7, #12]
 8013794:	60b9      	str	r1, [r7, #8]
 8013796:	0019      	movs	r1, r3
 8013798:	1dbb      	adds	r3, r7, #6
 801379a:	801a      	strh	r2, [r3, #0]
 801379c:	1d3b      	adds	r3, r7, #4
 801379e:	1c0a      	adds	r2, r1, #0
 80137a0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80137a2:	1d3b      	adds	r3, r7, #4
 80137a4:	881b      	ldrh	r3, [r3, #0]
 80137a6:	3301      	adds	r3, #1
 80137a8:	085b      	lsrs	r3, r3, #1
 80137aa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80137b4:	1dbb      	adds	r3, r7, #6
 80137b6:	881a      	ldrh	r2, [r3, #0]
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	18d3      	adds	r3, r2, r3
 80137bc:	2280      	movs	r2, #128	@ 0x80
 80137be:	00d2      	lsls	r2, r2, #3
 80137c0:	4694      	mov	ip, r2
 80137c2:	4463      	add	r3, ip
 80137c4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80137c6:	69bb      	ldr	r3, [r7, #24]
 80137c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80137ca:	e020      	b.n	801380e <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 80137cc:	69fb      	ldr	r3, [r7, #28]
 80137ce:	781a      	ldrb	r2, [r3, #0]
 80137d0:	2112      	movs	r1, #18
 80137d2:	187b      	adds	r3, r7, r1
 80137d4:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80137d6:	69fb      	ldr	r3, [r7, #28]
 80137d8:	3301      	adds	r3, #1
 80137da:	781b      	ldrb	r3, [r3, #0]
 80137dc:	021b      	lsls	r3, r3, #8
 80137de:	b21a      	sxth	r2, r3
 80137e0:	187b      	adds	r3, r7, r1
 80137e2:	2000      	movs	r0, #0
 80137e4:	5e1b      	ldrsh	r3, [r3, r0]
 80137e6:	4313      	orrs	r3, r2
 80137e8:	b21a      	sxth	r2, r3
 80137ea:	187b      	adds	r3, r7, r1
 80137ec:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80137ee:	6a3b      	ldr	r3, [r7, #32]
 80137f0:	187a      	adds	r2, r7, r1
 80137f2:	8812      	ldrh	r2, [r2, #0]
 80137f4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80137f6:	6a3b      	ldr	r3, [r7, #32]
 80137f8:	3302      	adds	r3, #2
 80137fa:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80137fc:	69fb      	ldr	r3, [r7, #28]
 80137fe:	3301      	adds	r3, #1
 8013800:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8013802:	69fb      	ldr	r3, [r7, #28]
 8013804:	3301      	adds	r3, #1
 8013806:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8013808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801380a:	3b01      	subs	r3, #1
 801380c:	627b      	str	r3, [r7, #36]	@ 0x24
 801380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013810:	2b00      	cmp	r3, #0
 8013812:	d1db      	bne.n	80137cc <USB_WritePMA+0x40>
  }
}
 8013814:	46c0      	nop			@ (mov r8, r8)
 8013816:	46c0      	nop			@ (mov r8, r8)
 8013818:	46bd      	mov	sp, r7
 801381a:	b00a      	add	sp, #40	@ 0x28
 801381c:	bd80      	pop	{r7, pc}

0801381e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801381e:	b580      	push	{r7, lr}
 8013820:	b08a      	sub	sp, #40	@ 0x28
 8013822:	af00      	add	r7, sp, #0
 8013824:	60f8      	str	r0, [r7, #12]
 8013826:	60b9      	str	r1, [r7, #8]
 8013828:	0019      	movs	r1, r3
 801382a:	1dbb      	adds	r3, r7, #6
 801382c:	801a      	strh	r2, [r3, #0]
 801382e:	1d3b      	adds	r3, r7, #4
 8013830:	1c0a      	adds	r2, r1, #0
 8013832:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8013834:	1d3b      	adds	r3, r7, #4
 8013836:	881b      	ldrh	r3, [r3, #0]
 8013838:	085b      	lsrs	r3, r3, #1
 801383a:	b29b      	uxth	r3, r3
 801383c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8013846:	1dbb      	adds	r3, r7, #6
 8013848:	881a      	ldrh	r2, [r3, #0]
 801384a:	697b      	ldr	r3, [r7, #20]
 801384c:	18d3      	adds	r3, r2, r3
 801384e:	2280      	movs	r2, #128	@ 0x80
 8013850:	00d2      	lsls	r2, r2, #3
 8013852:	4694      	mov	ip, r2
 8013854:	4463      	add	r3, ip
 8013856:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8013858:	69bb      	ldr	r3, [r7, #24]
 801385a:	627b      	str	r3, [r7, #36]	@ 0x24
 801385c:	e018      	b.n	8013890 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801385e:	6a3b      	ldr	r3, [r7, #32]
 8013860:	881b      	ldrh	r3, [r3, #0]
 8013862:	b29b      	uxth	r3, r3
 8013864:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8013866:	6a3b      	ldr	r3, [r7, #32]
 8013868:	3302      	adds	r3, #2
 801386a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801386c:	693b      	ldr	r3, [r7, #16]
 801386e:	b2da      	uxtb	r2, r3
 8013870:	69fb      	ldr	r3, [r7, #28]
 8013872:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8013874:	69fb      	ldr	r3, [r7, #28]
 8013876:	3301      	adds	r3, #1
 8013878:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801387a:	693b      	ldr	r3, [r7, #16]
 801387c:	0a1b      	lsrs	r3, r3, #8
 801387e:	b2da      	uxtb	r2, r3
 8013880:	69fb      	ldr	r3, [r7, #28]
 8013882:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8013884:	69fb      	ldr	r3, [r7, #28]
 8013886:	3301      	adds	r3, #1
 8013888:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801388a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801388c:	3b01      	subs	r3, #1
 801388e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013892:	2b00      	cmp	r3, #0
 8013894:	d1e3      	bne.n	801385e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8013896:	1d3b      	adds	r3, r7, #4
 8013898:	881b      	ldrh	r3, [r3, #0]
 801389a:	2201      	movs	r2, #1
 801389c:	4013      	ands	r3, r2
 801389e:	b29b      	uxth	r3, r3
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d007      	beq.n	80138b4 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80138a4:	6a3b      	ldr	r3, [r7, #32]
 80138a6:	881b      	ldrh	r3, [r3, #0]
 80138a8:	b29b      	uxth	r3, r3
 80138aa:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80138ac:	693b      	ldr	r3, [r7, #16]
 80138ae:	b2da      	uxtb	r2, r3
 80138b0:	69fb      	ldr	r3, [r7, #28]
 80138b2:	701a      	strb	r2, [r3, #0]
  }
}
 80138b4:	46c0      	nop			@ (mov r8, r8)
 80138b6:	46bd      	mov	sp, r7
 80138b8:	b00a      	add	sp, #40	@ 0x28
 80138ba:	bd80      	pop	{r7, pc}

080138bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b084      	sub	sp, #16
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
 80138c4:	000a      	movs	r2, r1
 80138c6:	1cfb      	adds	r3, r7, #3
 80138c8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80138ca:	230f      	movs	r3, #15
 80138cc:	18fb      	adds	r3, r7, r3
 80138ce:	2200      	movs	r2, #0
 80138d0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	7c1b      	ldrb	r3, [r3, #16]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d116      	bne.n	8013908 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80138da:	2380      	movs	r3, #128	@ 0x80
 80138dc:	009b      	lsls	r3, r3, #2
 80138de:	6878      	ldr	r0, [r7, #4]
 80138e0:	2202      	movs	r2, #2
 80138e2:	2181      	movs	r1, #129	@ 0x81
 80138e4:	f002 f81d 	bl	8015922 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	2201      	movs	r2, #1
 80138ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80138ee:	2380      	movs	r3, #128	@ 0x80
 80138f0:	009b      	lsls	r3, r3, #2
 80138f2:	6878      	ldr	r0, [r7, #4]
 80138f4:	2202      	movs	r2, #2
 80138f6:	2101      	movs	r1, #1
 80138f8:	f002 f813 	bl	8015922 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80138fc:	687a      	ldr	r2, [r7, #4]
 80138fe:	23b6      	movs	r3, #182	@ 0xb6
 8013900:	005b      	lsls	r3, r3, #1
 8013902:	2101      	movs	r1, #1
 8013904:	50d1      	str	r1, [r2, r3]
 8013906:	e013      	b.n	8013930 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	2340      	movs	r3, #64	@ 0x40
 801390c:	2202      	movs	r2, #2
 801390e:	2181      	movs	r1, #129	@ 0x81
 8013910:	f002 f807 	bl	8015922 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	2201      	movs	r2, #1
 8013918:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	2340      	movs	r3, #64	@ 0x40
 801391e:	2202      	movs	r2, #2
 8013920:	2101      	movs	r1, #1
 8013922:	f001 fffe 	bl	8015922 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013926:	687a      	ldr	r2, [r7, #4]
 8013928:	23b6      	movs	r3, #182	@ 0xb6
 801392a:	005b      	lsls	r3, r3, #1
 801392c:	2101      	movs	r1, #1
 801392e:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	2308      	movs	r3, #8
 8013934:	2203      	movs	r2, #3
 8013936:	2182      	movs	r1, #130	@ 0x82
 8013938:	f001 fff3 	bl	8015922 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2201      	movs	r2, #1
 8013940:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013942:	2387      	movs	r3, #135	@ 0x87
 8013944:	009b      	lsls	r3, r3, #2
 8013946:	0018      	movs	r0, r3
 8013948:	f002 f984 	bl	8015c54 <USBD_static_malloc>
 801394c:	0001      	movs	r1, r0
 801394e:	687a      	ldr	r2, [r7, #4]
 8013950:	23ae      	movs	r3, #174	@ 0xae
 8013952:	009b      	lsls	r3, r3, #2
 8013954:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8013956:	687a      	ldr	r2, [r7, #4]
 8013958:	23ae      	movs	r3, #174	@ 0xae
 801395a:	009b      	lsls	r3, r3, #2
 801395c:	58d3      	ldr	r3, [r2, r3]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d104      	bne.n	801396c <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8013962:	230f      	movs	r3, #15
 8013964:	18fb      	adds	r3, r7, r3
 8013966:	2201      	movs	r2, #1
 8013968:	701a      	strb	r2, [r3, #0]
 801396a:	e02c      	b.n	80139c6 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801396c:	687a      	ldr	r2, [r7, #4]
 801396e:	23ae      	movs	r3, #174	@ 0xae
 8013970:	009b      	lsls	r3, r3, #2
 8013972:	58d3      	ldr	r3, [r2, r3]
 8013974:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013976:	687a      	ldr	r2, [r7, #4]
 8013978:	23af      	movs	r3, #175	@ 0xaf
 801397a:	009b      	lsls	r3, r3, #2
 801397c:	58d3      	ldr	r3, [r2, r3]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8013982:	68ba      	ldr	r2, [r7, #8]
 8013984:	2385      	movs	r3, #133	@ 0x85
 8013986:	009b      	lsls	r3, r3, #2
 8013988:	2100      	movs	r1, #0
 801398a:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801398c:	68ba      	ldr	r2, [r7, #8]
 801398e:	2386      	movs	r3, #134	@ 0x86
 8013990:	009b      	lsls	r3, r3, #2
 8013992:	2100      	movs	r1, #0
 8013994:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	7c1b      	ldrb	r3, [r3, #16]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d10a      	bne.n	80139b4 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801399e:	68ba      	ldr	r2, [r7, #8]
 80139a0:	2381      	movs	r3, #129	@ 0x81
 80139a2:	009b      	lsls	r3, r3, #2
 80139a4:	58d2      	ldr	r2, [r2, r3]
 80139a6:	2380      	movs	r3, #128	@ 0x80
 80139a8:	009b      	lsls	r3, r3, #2
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	2101      	movs	r1, #1
 80139ae:	f002 f903 	bl	8015bb8 <USBD_LL_PrepareReceive>
 80139b2:	e008      	b.n	80139c6 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80139b4:	68ba      	ldr	r2, [r7, #8]
 80139b6:	2381      	movs	r3, #129	@ 0x81
 80139b8:	009b      	lsls	r3, r3, #2
 80139ba:	58d2      	ldr	r2, [r2, r3]
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	2340      	movs	r3, #64	@ 0x40
 80139c0:	2101      	movs	r1, #1
 80139c2:	f002 f8f9 	bl	8015bb8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80139c6:	230f      	movs	r3, #15
 80139c8:	18fb      	adds	r3, r7, r3
 80139ca:	781b      	ldrb	r3, [r3, #0]
}
 80139cc:	0018      	movs	r0, r3
 80139ce:	46bd      	mov	sp, r7
 80139d0:	b004      	add	sp, #16
 80139d2:	bd80      	pop	{r7, pc}

080139d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b084      	sub	sp, #16
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
 80139dc:	000a      	movs	r2, r1
 80139de:	1cfb      	adds	r3, r7, #3
 80139e0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80139e2:	230f      	movs	r3, #15
 80139e4:	18fb      	adds	r3, r7, r3
 80139e6:	2200      	movs	r2, #0
 80139e8:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	2181      	movs	r1, #129	@ 0x81
 80139ee:	0018      	movs	r0, r3
 80139f0:	f001 ffce 	bl	8015990 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2200      	movs	r2, #0
 80139f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	2101      	movs	r1, #1
 80139fe:	0018      	movs	r0, r3
 8013a00:	f001 ffc6 	bl	8015990 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013a04:	687a      	ldr	r2, [r7, #4]
 8013a06:	23b6      	movs	r3, #182	@ 0xb6
 8013a08:	005b      	lsls	r3, r3, #1
 8013a0a:	2100      	movs	r1, #0
 8013a0c:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2182      	movs	r1, #130	@ 0x82
 8013a12:	0018      	movs	r0, r3
 8013a14:	f001 ffbc 	bl	8015990 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013a1e:	687a      	ldr	r2, [r7, #4]
 8013a20:	23ae      	movs	r3, #174	@ 0xae
 8013a22:	009b      	lsls	r3, r3, #2
 8013a24:	58d3      	ldr	r3, [r2, r3]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d011      	beq.n	8013a4e <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013a2a:	687a      	ldr	r2, [r7, #4]
 8013a2c:	23af      	movs	r3, #175	@ 0xaf
 8013a2e:	009b      	lsls	r3, r3, #2
 8013a30:	58d3      	ldr	r3, [r2, r3]
 8013a32:	685b      	ldr	r3, [r3, #4]
 8013a34:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8013a36:	687a      	ldr	r2, [r7, #4]
 8013a38:	23ae      	movs	r3, #174	@ 0xae
 8013a3a:	009b      	lsls	r3, r3, #2
 8013a3c:	58d3      	ldr	r3, [r2, r3]
 8013a3e:	0018      	movs	r0, r3
 8013a40:	f002 f914 	bl	8015c6c <USBD_static_free>
    pdev->pClassData = NULL;
 8013a44:	687a      	ldr	r2, [r7, #4]
 8013a46:	23ae      	movs	r3, #174	@ 0xae
 8013a48:	009b      	lsls	r3, r3, #2
 8013a4a:	2100      	movs	r1, #0
 8013a4c:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8013a4e:	230f      	movs	r3, #15
 8013a50:	18fb      	adds	r3, r7, r3
 8013a52:	781b      	ldrb	r3, [r3, #0]
}
 8013a54:	0018      	movs	r0, r3
 8013a56:	46bd      	mov	sp, r7
 8013a58:	b004      	add	sp, #16
 8013a5a:	bd80      	pop	{r7, pc}

08013a5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b086      	sub	sp, #24
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	6078      	str	r0, [r7, #4]
 8013a64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013a66:	687a      	ldr	r2, [r7, #4]
 8013a68:	23ae      	movs	r3, #174	@ 0xae
 8013a6a:	009b      	lsls	r3, r3, #2
 8013a6c:	58d3      	ldr	r3, [r2, r3]
 8013a6e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8013a70:	230f      	movs	r3, #15
 8013a72:	18fb      	adds	r3, r7, r3
 8013a74:	2200      	movs	r2, #0
 8013a76:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8013a78:	230c      	movs	r3, #12
 8013a7a:	18fb      	adds	r3, r7, r3
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8013a80:	2317      	movs	r3, #23
 8013a82:	18fb      	adds	r3, r7, r3
 8013a84:	2200      	movs	r2, #0
 8013a86:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013a88:	683b      	ldr	r3, [r7, #0]
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	001a      	movs	r2, r3
 8013a8e:	2360      	movs	r3, #96	@ 0x60
 8013a90:	4013      	ands	r3, r2
 8013a92:	d03d      	beq.n	8013b10 <USBD_CDC_Setup+0xb4>
 8013a94:	2b20      	cmp	r3, #32
 8013a96:	d000      	beq.n	8013a9a <USBD_CDC_Setup+0x3e>
 8013a98:	e094      	b.n	8013bc4 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8013a9a:	683b      	ldr	r3, [r7, #0]
 8013a9c:	88db      	ldrh	r3, [r3, #6]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d02b      	beq.n	8013afa <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	781b      	ldrb	r3, [r3, #0]
 8013aa6:	b25b      	sxtb	r3, r3
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	da12      	bge.n	8013ad2 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013aac:	687a      	ldr	r2, [r7, #4]
 8013aae:	23af      	movs	r3, #175	@ 0xaf
 8013ab0:	009b      	lsls	r3, r3, #2
 8013ab2:	58d3      	ldr	r3, [r2, r3]
 8013ab4:	689b      	ldr	r3, [r3, #8]
 8013ab6:	683a      	ldr	r2, [r7, #0]
 8013ab8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8013aba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013abc:	683a      	ldr	r2, [r7, #0]
 8013abe:	88d2      	ldrh	r2, [r2, #6]
 8013ac0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8013ac2:	6939      	ldr	r1, [r7, #16]
 8013ac4:	683b      	ldr	r3, [r7, #0]
 8013ac6:	88da      	ldrh	r2, [r3, #6]
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	0018      	movs	r0, r3
 8013acc:	f001 fb79 	bl	80151c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8013ad0:	e083      	b.n	8013bda <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8013ad2:	683b      	ldr	r3, [r7, #0]
 8013ad4:	7859      	ldrb	r1, [r3, #1]
 8013ad6:	693a      	ldr	r2, [r7, #16]
 8013ad8:	2380      	movs	r3, #128	@ 0x80
 8013ada:	009b      	lsls	r3, r3, #2
 8013adc:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8013ade:	683b      	ldr	r3, [r7, #0]
 8013ae0:	88db      	ldrh	r3, [r3, #6]
 8013ae2:	b2d9      	uxtb	r1, r3
 8013ae4:	693b      	ldr	r3, [r7, #16]
 8013ae6:	4a40      	ldr	r2, [pc, #256]	@ (8013be8 <USBD_CDC_Setup+0x18c>)
 8013ae8:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8013aea:	6939      	ldr	r1, [r7, #16]
 8013aec:	683b      	ldr	r3, [r7, #0]
 8013aee:	88da      	ldrh	r2, [r3, #6]
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	0018      	movs	r0, r3
 8013af4:	f001 fb98 	bl	8015228 <USBD_CtlPrepareRx>
      break;
 8013af8:	e06f      	b.n	8013bda <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013afa:	687a      	ldr	r2, [r7, #4]
 8013afc:	23af      	movs	r3, #175	@ 0xaf
 8013afe:	009b      	lsls	r3, r3, #2
 8013b00:	58d3      	ldr	r3, [r2, r3]
 8013b02:	689b      	ldr	r3, [r3, #8]
 8013b04:	683a      	ldr	r2, [r7, #0]
 8013b06:	7850      	ldrb	r0, [r2, #1]
 8013b08:	6839      	ldr	r1, [r7, #0]
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	4798      	blx	r3
      break;
 8013b0e:	e064      	b.n	8013bda <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013b10:	683b      	ldr	r3, [r7, #0]
 8013b12:	785b      	ldrb	r3, [r3, #1]
 8013b14:	2b0b      	cmp	r3, #11
 8013b16:	d037      	beq.n	8013b88 <USBD_CDC_Setup+0x12c>
 8013b18:	dc47      	bgt.n	8013baa <USBD_CDC_Setup+0x14e>
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d002      	beq.n	8013b24 <USBD_CDC_Setup+0xc8>
 8013b1e:	2b0a      	cmp	r3, #10
 8013b20:	d019      	beq.n	8013b56 <USBD_CDC_Setup+0xfa>
 8013b22:	e042      	b.n	8013baa <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b24:	687a      	ldr	r2, [r7, #4]
 8013b26:	23a7      	movs	r3, #167	@ 0xa7
 8013b28:	009b      	lsls	r3, r3, #2
 8013b2a:	5cd3      	ldrb	r3, [r2, r3]
 8013b2c:	2b03      	cmp	r3, #3
 8013b2e:	d107      	bne.n	8013b40 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8013b30:	230c      	movs	r3, #12
 8013b32:	18f9      	adds	r1, r7, r3
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	2202      	movs	r2, #2
 8013b38:	0018      	movs	r0, r3
 8013b3a:	f001 fb42 	bl	80151c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013b3e:	e040      	b.n	8013bc2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8013b40:	683a      	ldr	r2, [r7, #0]
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	0011      	movs	r1, r2
 8013b46:	0018      	movs	r0, r3
 8013b48:	f001 fabd 	bl	80150c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8013b4c:	2317      	movs	r3, #23
 8013b4e:	18fb      	adds	r3, r7, r3
 8013b50:	2202      	movs	r2, #2
 8013b52:	701a      	strb	r2, [r3, #0]
          break;
 8013b54:	e035      	b.n	8013bc2 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b56:	687a      	ldr	r2, [r7, #4]
 8013b58:	23a7      	movs	r3, #167	@ 0xa7
 8013b5a:	009b      	lsls	r3, r3, #2
 8013b5c:	5cd3      	ldrb	r3, [r2, r3]
 8013b5e:	2b03      	cmp	r3, #3
 8013b60:	d107      	bne.n	8013b72 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8013b62:	230f      	movs	r3, #15
 8013b64:	18f9      	adds	r1, r7, r3
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2201      	movs	r2, #1
 8013b6a:	0018      	movs	r0, r3
 8013b6c:	f001 fb29 	bl	80151c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013b70:	e027      	b.n	8013bc2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8013b72:	683a      	ldr	r2, [r7, #0]
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	0011      	movs	r1, r2
 8013b78:	0018      	movs	r0, r3
 8013b7a:	f001 faa4 	bl	80150c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8013b7e:	2317      	movs	r3, #23
 8013b80:	18fb      	adds	r3, r7, r3
 8013b82:	2202      	movs	r2, #2
 8013b84:	701a      	strb	r2, [r3, #0]
          break;
 8013b86:	e01c      	b.n	8013bc2 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013b88:	687a      	ldr	r2, [r7, #4]
 8013b8a:	23a7      	movs	r3, #167	@ 0xa7
 8013b8c:	009b      	lsls	r3, r3, #2
 8013b8e:	5cd3      	ldrb	r3, [r2, r3]
 8013b90:	2b03      	cmp	r3, #3
 8013b92:	d015      	beq.n	8013bc0 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8013b94:	683a      	ldr	r2, [r7, #0]
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	0011      	movs	r1, r2
 8013b9a:	0018      	movs	r0, r3
 8013b9c:	f001 fa93 	bl	80150c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8013ba0:	2317      	movs	r3, #23
 8013ba2:	18fb      	adds	r3, r7, r3
 8013ba4:	2202      	movs	r2, #2
 8013ba6:	701a      	strb	r2, [r3, #0]
          }
          break;
 8013ba8:	e00a      	b.n	8013bc0 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8013baa:	683a      	ldr	r2, [r7, #0]
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	0011      	movs	r1, r2
 8013bb0:	0018      	movs	r0, r3
 8013bb2:	f001 fa88 	bl	80150c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8013bb6:	2317      	movs	r3, #23
 8013bb8:	18fb      	adds	r3, r7, r3
 8013bba:	2202      	movs	r2, #2
 8013bbc:	701a      	strb	r2, [r3, #0]
          break;
 8013bbe:	e000      	b.n	8013bc2 <USBD_CDC_Setup+0x166>
          break;
 8013bc0:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8013bc2:	e00a      	b.n	8013bda <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8013bc4:	683a      	ldr	r2, [r7, #0]
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	0011      	movs	r1, r2
 8013bca:	0018      	movs	r0, r3
 8013bcc:	f001 fa7b 	bl	80150c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8013bd0:	2317      	movs	r3, #23
 8013bd2:	18fb      	adds	r3, r7, r3
 8013bd4:	2202      	movs	r2, #2
 8013bd6:	701a      	strb	r2, [r3, #0]
      break;
 8013bd8:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8013bda:	2317      	movs	r3, #23
 8013bdc:	18fb      	adds	r3, r7, r3
 8013bde:	781b      	ldrb	r3, [r3, #0]
}
 8013be0:	0018      	movs	r0, r3
 8013be2:	46bd      	mov	sp, r7
 8013be4:	b006      	add	sp, #24
 8013be6:	bd80      	pop	{r7, pc}
 8013be8:	00000201 	.word	0x00000201

08013bec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b084      	sub	sp, #16
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
 8013bf4:	000a      	movs	r2, r1
 8013bf6:	1cfb      	adds	r3, r7, #3
 8013bf8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013bfa:	687a      	ldr	r2, [r7, #4]
 8013bfc:	23ae      	movs	r3, #174	@ 0xae
 8013bfe:	009b      	lsls	r3, r3, #2
 8013c00:	58d3      	ldr	r3, [r2, r3]
 8013c02:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8013c04:	687a      	ldr	r2, [r7, #4]
 8013c06:	23b0      	movs	r3, #176	@ 0xb0
 8013c08:	009b      	lsls	r3, r3, #2
 8013c0a:	58d3      	ldr	r3, [r2, r3]
 8013c0c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8013c0e:	687a      	ldr	r2, [r7, #4]
 8013c10:	23ae      	movs	r3, #174	@ 0xae
 8013c12:	009b      	lsls	r3, r3, #2
 8013c14:	58d3      	ldr	r3, [r2, r3]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d03e      	beq.n	8013c98 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013c1a:	1cfb      	adds	r3, r7, #3
 8013c1c:	781a      	ldrb	r2, [r3, #0]
 8013c1e:	6879      	ldr	r1, [r7, #4]
 8013c20:	0013      	movs	r3, r2
 8013c22:	009b      	lsls	r3, r3, #2
 8013c24:	189b      	adds	r3, r3, r2
 8013c26:	009b      	lsls	r3, r3, #2
 8013c28:	18cb      	adds	r3, r1, r3
 8013c2a:	331c      	adds	r3, #28
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d02b      	beq.n	8013c8a <USBD_CDC_DataIn+0x9e>
 8013c32:	1cfb      	adds	r3, r7, #3
 8013c34:	781a      	ldrb	r2, [r3, #0]
 8013c36:	6879      	ldr	r1, [r7, #4]
 8013c38:	0013      	movs	r3, r2
 8013c3a:	009b      	lsls	r3, r3, #2
 8013c3c:	189b      	adds	r3, r3, r2
 8013c3e:	009b      	lsls	r3, r3, #2
 8013c40:	18cb      	adds	r3, r1, r3
 8013c42:	331c      	adds	r3, #28
 8013c44:	6818      	ldr	r0, [r3, #0]
 8013c46:	1cfb      	adds	r3, r7, #3
 8013c48:	781a      	ldrb	r2, [r3, #0]
 8013c4a:	68b9      	ldr	r1, [r7, #8]
 8013c4c:	0013      	movs	r3, r2
 8013c4e:	009b      	lsls	r3, r3, #2
 8013c50:	189b      	adds	r3, r3, r2
 8013c52:	00db      	lsls	r3, r3, #3
 8013c54:	18cb      	adds	r3, r1, r3
 8013c56:	3338      	adds	r3, #56	@ 0x38
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	0019      	movs	r1, r3
 8013c5c:	f7ec faf6 	bl	800024c <__aeabi_uidivmod>
 8013c60:	1e0b      	subs	r3, r1, #0
 8013c62:	d112      	bne.n	8013c8a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8013c64:	1cfb      	adds	r3, r7, #3
 8013c66:	781a      	ldrb	r2, [r3, #0]
 8013c68:	6879      	ldr	r1, [r7, #4]
 8013c6a:	0013      	movs	r3, r2
 8013c6c:	009b      	lsls	r3, r3, #2
 8013c6e:	189b      	adds	r3, r3, r2
 8013c70:	009b      	lsls	r3, r3, #2
 8013c72:	18cb      	adds	r3, r1, r3
 8013c74:	331c      	adds	r3, #28
 8013c76:	2200      	movs	r2, #0
 8013c78:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013c7a:	1cfb      	adds	r3, r7, #3
 8013c7c:	7819      	ldrb	r1, [r3, #0]
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	2300      	movs	r3, #0
 8013c82:	2200      	movs	r2, #0
 8013c84:	f001 ff61 	bl	8015b4a <USBD_LL_Transmit>
 8013c88:	e004      	b.n	8013c94 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8013c8a:	68fa      	ldr	r2, [r7, #12]
 8013c8c:	2385      	movs	r3, #133	@ 0x85
 8013c8e:	009b      	lsls	r3, r3, #2
 8013c90:	2100      	movs	r1, #0
 8013c92:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8013c94:	2300      	movs	r3, #0
 8013c96:	e000      	b.n	8013c9a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8013c98:	2302      	movs	r3, #2
  }
}
 8013c9a:	0018      	movs	r0, r3
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	b004      	add	sp, #16
 8013ca0:	bd80      	pop	{r7, pc}

08013ca2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013ca2:	b580      	push	{r7, lr}
 8013ca4:	b084      	sub	sp, #16
 8013ca6:	af00      	add	r7, sp, #0
 8013ca8:	6078      	str	r0, [r7, #4]
 8013caa:	000a      	movs	r2, r1
 8013cac:	1cfb      	adds	r3, r7, #3
 8013cae:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013cb0:	687a      	ldr	r2, [r7, #4]
 8013cb2:	23ae      	movs	r3, #174	@ 0xae
 8013cb4:	009b      	lsls	r3, r3, #2
 8013cb6:	58d3      	ldr	r3, [r2, r3]
 8013cb8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013cba:	1cfb      	adds	r3, r7, #3
 8013cbc:	781a      	ldrb	r2, [r3, #0]
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	0011      	movs	r1, r2
 8013cc2:	0018      	movs	r0, r3
 8013cc4:	f001 ffaf 	bl	8015c26 <USBD_LL_GetRxDataSize>
 8013cc8:	0001      	movs	r1, r0
 8013cca:	68fa      	ldr	r2, [r7, #12]
 8013ccc:	2383      	movs	r3, #131	@ 0x83
 8013cce:	009b      	lsls	r3, r3, #2
 8013cd0:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8013cd2:	687a      	ldr	r2, [r7, #4]
 8013cd4:	23ae      	movs	r3, #174	@ 0xae
 8013cd6:	009b      	lsls	r3, r3, #2
 8013cd8:	58d3      	ldr	r3, [r2, r3]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d011      	beq.n	8013d02 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013cde:	687a      	ldr	r2, [r7, #4]
 8013ce0:	23af      	movs	r3, #175	@ 0xaf
 8013ce2:	009b      	lsls	r3, r3, #2
 8013ce4:	58d3      	ldr	r3, [r2, r3]
 8013ce6:	68da      	ldr	r2, [r3, #12]
 8013ce8:	68f9      	ldr	r1, [r7, #12]
 8013cea:	2381      	movs	r3, #129	@ 0x81
 8013cec:	009b      	lsls	r3, r3, #2
 8013cee:	58c8      	ldr	r0, [r1, r3]
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	2183      	movs	r1, #131	@ 0x83
 8013cf4:	0089      	lsls	r1, r1, #2
 8013cf6:	468c      	mov	ip, r1
 8013cf8:	4463      	add	r3, ip
 8013cfa:	0019      	movs	r1, r3
 8013cfc:	4790      	blx	r2

    return USBD_OK;
 8013cfe:	2300      	movs	r3, #0
 8013d00:	e000      	b.n	8013d04 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8013d02:	2302      	movs	r3, #2
  }
}
 8013d04:	0018      	movs	r0, r3
 8013d06:	46bd      	mov	sp, r7
 8013d08:	b004      	add	sp, #16
 8013d0a:	bd80      	pop	{r7, pc}

08013d0c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013d0c:	b590      	push	{r4, r7, lr}
 8013d0e:	b085      	sub	sp, #20
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013d14:	687a      	ldr	r2, [r7, #4]
 8013d16:	23ae      	movs	r3, #174	@ 0xae
 8013d18:	009b      	lsls	r3, r3, #2
 8013d1a:	58d3      	ldr	r3, [r2, r3]
 8013d1c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013d1e:	687a      	ldr	r2, [r7, #4]
 8013d20:	23af      	movs	r3, #175	@ 0xaf
 8013d22:	009b      	lsls	r3, r3, #2
 8013d24:	58d3      	ldr	r3, [r2, r3]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d018      	beq.n	8013d5c <USBD_CDC_EP0_RxReady+0x50>
 8013d2a:	68fa      	ldr	r2, [r7, #12]
 8013d2c:	2380      	movs	r3, #128	@ 0x80
 8013d2e:	009b      	lsls	r3, r3, #2
 8013d30:	5cd3      	ldrb	r3, [r2, r3]
 8013d32:	2bff      	cmp	r3, #255	@ 0xff
 8013d34:	d012      	beq.n	8013d5c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013d36:	687a      	ldr	r2, [r7, #4]
 8013d38:	23af      	movs	r3, #175	@ 0xaf
 8013d3a:	009b      	lsls	r3, r3, #2
 8013d3c:	58d3      	ldr	r3, [r2, r3]
 8013d3e:	689b      	ldr	r3, [r3, #8]
 8013d40:	68f9      	ldr	r1, [r7, #12]
 8013d42:	2280      	movs	r2, #128	@ 0x80
 8013d44:	0092      	lsls	r2, r2, #2
 8013d46:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8013d48:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8013d4a:	68fa      	ldr	r2, [r7, #12]
 8013d4c:	4c06      	ldr	r4, [pc, #24]	@ (8013d68 <USBD_CDC_EP0_RxReady+0x5c>)
 8013d4e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013d50:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013d52:	68fa      	ldr	r2, [r7, #12]
 8013d54:	2380      	movs	r3, #128	@ 0x80
 8013d56:	009b      	lsls	r3, r3, #2
 8013d58:	21ff      	movs	r1, #255	@ 0xff
 8013d5a:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8013d5c:	2300      	movs	r3, #0
}
 8013d5e:	0018      	movs	r0, r3
 8013d60:	46bd      	mov	sp, r7
 8013d62:	b005      	add	sp, #20
 8013d64:	bd90      	pop	{r4, r7, pc}
 8013d66:	46c0      	nop			@ (mov r8, r8)
 8013d68:	00000201 	.word	0x00000201

08013d6c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b082      	sub	sp, #8
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2243      	movs	r2, #67	@ 0x43
 8013d78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8013d7a:	4b02      	ldr	r3, [pc, #8]	@ (8013d84 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8013d7c:	0018      	movs	r0, r3
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	b002      	add	sp, #8
 8013d82:	bd80      	pop	{r7, pc}
 8013d84:	200001e0 	.word	0x200001e0

08013d88 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b082      	sub	sp, #8
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	2243      	movs	r2, #67	@ 0x43
 8013d94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8013d96:	4b02      	ldr	r3, [pc, #8]	@ (8013da0 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8013d98:	0018      	movs	r0, r3
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	b002      	add	sp, #8
 8013d9e:	bd80      	pop	{r7, pc}
 8013da0:	2000019c 	.word	0x2000019c

08013da4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b082      	sub	sp, #8
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	2243      	movs	r2, #67	@ 0x43
 8013db0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8013db2:	4b02      	ldr	r3, [pc, #8]	@ (8013dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8013db4:	0018      	movs	r0, r3
 8013db6:	46bd      	mov	sp, r7
 8013db8:	b002      	add	sp, #8
 8013dba:	bd80      	pop	{r7, pc}
 8013dbc:	20000224 	.word	0x20000224

08013dc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b082      	sub	sp, #8
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	220a      	movs	r2, #10
 8013dcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8013dce:	4b02      	ldr	r3, [pc, #8]	@ (8013dd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8013dd0:	0018      	movs	r0, r3
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	b002      	add	sp, #8
 8013dd6:	bd80      	pop	{r7, pc}
 8013dd8:	20000158 	.word	0x20000158

08013ddc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b084      	sub	sp, #16
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
 8013de4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8013de6:	200f      	movs	r0, #15
 8013de8:	183b      	adds	r3, r7, r0
 8013dea:	2202      	movs	r2, #2
 8013dec:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8013dee:	683b      	ldr	r3, [r7, #0]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d007      	beq.n	8013e04 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8013df4:	687a      	ldr	r2, [r7, #4]
 8013df6:	23af      	movs	r3, #175	@ 0xaf
 8013df8:	009b      	lsls	r3, r3, #2
 8013dfa:	6839      	ldr	r1, [r7, #0]
 8013dfc:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8013dfe:	183b      	adds	r3, r7, r0
 8013e00:	2200      	movs	r2, #0
 8013e02:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8013e04:	230f      	movs	r3, #15
 8013e06:	18fb      	adds	r3, r7, r3
 8013e08:	781b      	ldrb	r3, [r3, #0]
}
 8013e0a:	0018      	movs	r0, r3
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	b004      	add	sp, #16
 8013e10:	bd80      	pop	{r7, pc}

08013e12 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8013e12:	b580      	push	{r7, lr}
 8013e14:	b086      	sub	sp, #24
 8013e16:	af00      	add	r7, sp, #0
 8013e18:	60f8      	str	r0, [r7, #12]
 8013e1a:	60b9      	str	r1, [r7, #8]
 8013e1c:	1dbb      	adds	r3, r7, #6
 8013e1e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013e20:	68fa      	ldr	r2, [r7, #12]
 8013e22:	23ae      	movs	r3, #174	@ 0xae
 8013e24:	009b      	lsls	r3, r3, #2
 8013e26:	58d3      	ldr	r3, [r2, r3]
 8013e28:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8013e2a:	697a      	ldr	r2, [r7, #20]
 8013e2c:	2382      	movs	r3, #130	@ 0x82
 8013e2e:	009b      	lsls	r3, r3, #2
 8013e30:	68b9      	ldr	r1, [r7, #8]
 8013e32:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8013e34:	1dbb      	adds	r3, r7, #6
 8013e36:	8819      	ldrh	r1, [r3, #0]
 8013e38:	697a      	ldr	r2, [r7, #20]
 8013e3a:	2384      	movs	r3, #132	@ 0x84
 8013e3c:	009b      	lsls	r3, r3, #2
 8013e3e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8013e40:	2300      	movs	r3, #0
}
 8013e42:	0018      	movs	r0, r3
 8013e44:	46bd      	mov	sp, r7
 8013e46:	b006      	add	sp, #24
 8013e48:	bd80      	pop	{r7, pc}

08013e4a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8013e4a:	b580      	push	{r7, lr}
 8013e4c:	b084      	sub	sp, #16
 8013e4e:	af00      	add	r7, sp, #0
 8013e50:	6078      	str	r0, [r7, #4]
 8013e52:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013e54:	687a      	ldr	r2, [r7, #4]
 8013e56:	23ae      	movs	r3, #174	@ 0xae
 8013e58:	009b      	lsls	r3, r3, #2
 8013e5a:	58d3      	ldr	r3, [r2, r3]
 8013e5c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8013e5e:	68fa      	ldr	r2, [r7, #12]
 8013e60:	2381      	movs	r3, #129	@ 0x81
 8013e62:	009b      	lsls	r3, r3, #2
 8013e64:	6839      	ldr	r1, [r7, #0]
 8013e66:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8013e68:	2300      	movs	r3, #0
}
 8013e6a:	0018      	movs	r0, r3
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	b004      	add	sp, #16
 8013e70:	bd80      	pop	{r7, pc}

08013e72 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013e72:	b580      	push	{r7, lr}
 8013e74:	b084      	sub	sp, #16
 8013e76:	af00      	add	r7, sp, #0
 8013e78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013e7a:	687a      	ldr	r2, [r7, #4]
 8013e7c:	23ae      	movs	r3, #174	@ 0xae
 8013e7e:	009b      	lsls	r3, r3, #2
 8013e80:	58d3      	ldr	r3, [r2, r3]
 8013e82:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8013e84:	687a      	ldr	r2, [r7, #4]
 8013e86:	23ae      	movs	r3, #174	@ 0xae
 8013e88:	009b      	lsls	r3, r3, #2
 8013e8a:	58d3      	ldr	r3, [r2, r3]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d019      	beq.n	8013ec4 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	7c1b      	ldrb	r3, [r3, #16]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d10a      	bne.n	8013eae <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8013e98:	68fa      	ldr	r2, [r7, #12]
 8013e9a:	2381      	movs	r3, #129	@ 0x81
 8013e9c:	009b      	lsls	r3, r3, #2
 8013e9e:	58d2      	ldr	r2, [r2, r3]
 8013ea0:	2380      	movs	r3, #128	@ 0x80
 8013ea2:	009b      	lsls	r3, r3, #2
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	2101      	movs	r1, #1
 8013ea8:	f001 fe86 	bl	8015bb8 <USBD_LL_PrepareReceive>
 8013eac:	e008      	b.n	8013ec0 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8013eae:	68fa      	ldr	r2, [r7, #12]
 8013eb0:	2381      	movs	r3, #129	@ 0x81
 8013eb2:	009b      	lsls	r3, r3, #2
 8013eb4:	58d2      	ldr	r2, [r2, r3]
 8013eb6:	6878      	ldr	r0, [r7, #4]
 8013eb8:	2340      	movs	r3, #64	@ 0x40
 8013eba:	2101      	movs	r1, #1
 8013ebc:	f001 fe7c 	bl	8015bb8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	e000      	b.n	8013ec6 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8013ec4:	2302      	movs	r3, #2
  }
}
 8013ec6:	0018      	movs	r0, r3
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	b004      	add	sp, #16
 8013ecc:	bd80      	pop	{r7, pc}

08013ece <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013ece:	b580      	push	{r7, lr}
 8013ed0:	b084      	sub	sp, #16
 8013ed2:	af00      	add	r7, sp, #0
 8013ed4:	60f8      	str	r0, [r7, #12]
 8013ed6:	60b9      	str	r1, [r7, #8]
 8013ed8:	1dfb      	adds	r3, r7, #7
 8013eda:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d101      	bne.n	8013ee6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013ee2:	2302      	movs	r3, #2
 8013ee4:	e020      	b.n	8013f28 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8013ee6:	68fa      	ldr	r2, [r7, #12]
 8013ee8:	23ad      	movs	r3, #173	@ 0xad
 8013eea:	009b      	lsls	r3, r3, #2
 8013eec:	58d3      	ldr	r3, [r2, r3]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d004      	beq.n	8013efc <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8013ef2:	68fa      	ldr	r2, [r7, #12]
 8013ef4:	23ad      	movs	r3, #173	@ 0xad
 8013ef6:	009b      	lsls	r3, r3, #2
 8013ef8:	2100      	movs	r1, #0
 8013efa:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013efc:	68bb      	ldr	r3, [r7, #8]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d004      	beq.n	8013f0c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013f02:	68fa      	ldr	r2, [r7, #12]
 8013f04:	23ac      	movs	r3, #172	@ 0xac
 8013f06:	009b      	lsls	r3, r3, #2
 8013f08:	68b9      	ldr	r1, [r7, #8]
 8013f0a:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013f0c:	68fa      	ldr	r2, [r7, #12]
 8013f0e:	23a7      	movs	r3, #167	@ 0xa7
 8013f10:	009b      	lsls	r3, r3, #2
 8013f12:	2101      	movs	r1, #1
 8013f14:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	1dfa      	adds	r2, r7, #7
 8013f1a:	7812      	ldrb	r2, [r2, #0]
 8013f1c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	0018      	movs	r0, r3
 8013f22:	f001 fc75 	bl	8015810 <USBD_LL_Init>

  return USBD_OK;
 8013f26:	2300      	movs	r3, #0
}
 8013f28:	0018      	movs	r0, r3
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	b004      	add	sp, #16
 8013f2e:	bd80      	pop	{r7, pc}

08013f30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b084      	sub	sp, #16
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
 8013f38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8013f3a:	200f      	movs	r0, #15
 8013f3c:	183b      	adds	r3, r7, r0
 8013f3e:	2200      	movs	r2, #0
 8013f40:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8013f42:	683b      	ldr	r3, [r7, #0]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d008      	beq.n	8013f5a <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8013f48:	687a      	ldr	r2, [r7, #4]
 8013f4a:	23ad      	movs	r3, #173	@ 0xad
 8013f4c:	009b      	lsls	r3, r3, #2
 8013f4e:	6839      	ldr	r1, [r7, #0]
 8013f50:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8013f52:	183b      	adds	r3, r7, r0
 8013f54:	2200      	movs	r2, #0
 8013f56:	701a      	strb	r2, [r3, #0]
 8013f58:	e003      	b.n	8013f62 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8013f5a:	230f      	movs	r3, #15
 8013f5c:	18fb      	adds	r3, r7, r3
 8013f5e:	2202      	movs	r2, #2
 8013f60:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8013f62:	230f      	movs	r3, #15
 8013f64:	18fb      	adds	r3, r7, r3
 8013f66:	781b      	ldrb	r3, [r3, #0]
}
 8013f68:	0018      	movs	r0, r3
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	b004      	add	sp, #16
 8013f6e:	bd80      	pop	{r7, pc}

08013f70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b082      	sub	sp, #8
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	0018      	movs	r0, r3
 8013f7c:	f001 fcac 	bl	80158d8 <USBD_LL_Start>

  return USBD_OK;
 8013f80:	2300      	movs	r3, #0
}
 8013f82:	0018      	movs	r0, r3
 8013f84:	46bd      	mov	sp, r7
 8013f86:	b002      	add	sp, #8
 8013f88:	bd80      	pop	{r7, pc}

08013f8a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013f8a:	b580      	push	{r7, lr}
 8013f8c:	b082      	sub	sp, #8
 8013f8e:	af00      	add	r7, sp, #0
 8013f90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013f92:	2300      	movs	r3, #0
}
 8013f94:	0018      	movs	r0, r3
 8013f96:	46bd      	mov	sp, r7
 8013f98:	b002      	add	sp, #8
 8013f9a:	bd80      	pop	{r7, pc}

08013f9c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013f9c:	b590      	push	{r4, r7, lr}
 8013f9e:	b085      	sub	sp, #20
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
 8013fa4:	000a      	movs	r2, r1
 8013fa6:	1cfb      	adds	r3, r7, #3
 8013fa8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013faa:	240f      	movs	r4, #15
 8013fac:	193b      	adds	r3, r7, r4
 8013fae:	2202      	movs	r2, #2
 8013fb0:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8013fb2:	687a      	ldr	r2, [r7, #4]
 8013fb4:	23ad      	movs	r3, #173	@ 0xad
 8013fb6:	009b      	lsls	r3, r3, #2
 8013fb8:	58d3      	ldr	r3, [r2, r3]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d00e      	beq.n	8013fdc <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8013fbe:	687a      	ldr	r2, [r7, #4]
 8013fc0:	23ad      	movs	r3, #173	@ 0xad
 8013fc2:	009b      	lsls	r3, r3, #2
 8013fc4:	58d3      	ldr	r3, [r2, r3]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	1cfa      	adds	r2, r7, #3
 8013fca:	7811      	ldrb	r1, [r2, #0]
 8013fcc:	687a      	ldr	r2, [r7, #4]
 8013fce:	0010      	movs	r0, r2
 8013fd0:	4798      	blx	r3
 8013fd2:	1e03      	subs	r3, r0, #0
 8013fd4:	d102      	bne.n	8013fdc <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8013fd6:	193b      	adds	r3, r7, r4
 8013fd8:	2200      	movs	r2, #0
 8013fda:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8013fdc:	230f      	movs	r3, #15
 8013fde:	18fb      	adds	r3, r7, r3
 8013fe0:	781b      	ldrb	r3, [r3, #0]
}
 8013fe2:	0018      	movs	r0, r3
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	b005      	add	sp, #20
 8013fe8:	bd90      	pop	{r4, r7, pc}

08013fea <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013fea:	b580      	push	{r7, lr}
 8013fec:	b082      	sub	sp, #8
 8013fee:	af00      	add	r7, sp, #0
 8013ff0:	6078      	str	r0, [r7, #4]
 8013ff2:	000a      	movs	r2, r1
 8013ff4:	1cfb      	adds	r3, r7, #3
 8013ff6:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8013ff8:	687a      	ldr	r2, [r7, #4]
 8013ffa:	23ad      	movs	r3, #173	@ 0xad
 8013ffc:	009b      	lsls	r3, r3, #2
 8013ffe:	58d3      	ldr	r3, [r2, r3]
 8014000:	685b      	ldr	r3, [r3, #4]
 8014002:	1cfa      	adds	r2, r7, #3
 8014004:	7811      	ldrb	r1, [r2, #0]
 8014006:	687a      	ldr	r2, [r7, #4]
 8014008:	0010      	movs	r0, r2
 801400a:	4798      	blx	r3

  return USBD_OK;
 801400c:	2300      	movs	r3, #0
}
 801400e:	0018      	movs	r0, r3
 8014010:	46bd      	mov	sp, r7
 8014012:	b002      	add	sp, #8
 8014014:	bd80      	pop	{r7, pc}
	...

08014018 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b082      	sub	sp, #8
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
 8014020:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	22aa      	movs	r2, #170	@ 0xaa
 8014026:	0092      	lsls	r2, r2, #2
 8014028:	4694      	mov	ip, r2
 801402a:	4463      	add	r3, ip
 801402c:	683a      	ldr	r2, [r7, #0]
 801402e:	0011      	movs	r1, r2
 8014030:	0018      	movs	r0, r3
 8014032:	f001 f810 	bl	8015056 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014036:	687a      	ldr	r2, [r7, #4]
 8014038:	23a5      	movs	r3, #165	@ 0xa5
 801403a:	009b      	lsls	r3, r3, #2
 801403c:	2101      	movs	r1, #1
 801403e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	4a23      	ldr	r2, [pc, #140]	@ (80140d0 <USBD_LL_SetupStage+0xb8>)
 8014044:	5a9b      	ldrh	r3, [r3, r2]
 8014046:	0019      	movs	r1, r3
 8014048:	687a      	ldr	r2, [r7, #4]
 801404a:	23a6      	movs	r3, #166	@ 0xa6
 801404c:	009b      	lsls	r3, r3, #2
 801404e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8014050:	687a      	ldr	r2, [r7, #4]
 8014052:	23aa      	movs	r3, #170	@ 0xaa
 8014054:	009b      	lsls	r3, r3, #2
 8014056:	5cd3      	ldrb	r3, [r2, r3]
 8014058:	001a      	movs	r2, r3
 801405a:	231f      	movs	r3, #31
 801405c:	4013      	ands	r3, r2
 801405e:	2b02      	cmp	r3, #2
 8014060:	d019      	beq.n	8014096 <USBD_LL_SetupStage+0x7e>
 8014062:	d822      	bhi.n	80140aa <USBD_LL_SetupStage+0x92>
 8014064:	2b00      	cmp	r3, #0
 8014066:	d002      	beq.n	801406e <USBD_LL_SetupStage+0x56>
 8014068:	2b01      	cmp	r3, #1
 801406a:	d00a      	beq.n	8014082 <USBD_LL_SetupStage+0x6a>
 801406c:	e01d      	b.n	80140aa <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	22aa      	movs	r2, #170	@ 0xaa
 8014072:	0092      	lsls	r2, r2, #2
 8014074:	189a      	adds	r2, r3, r2
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	0011      	movs	r1, r2
 801407a:	0018      	movs	r0, r3
 801407c:	f000 fa10 	bl	80144a0 <USBD_StdDevReq>
      break;
 8014080:	e020      	b.n	80140c4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	22aa      	movs	r2, #170	@ 0xaa
 8014086:	0092      	lsls	r2, r2, #2
 8014088:	189a      	adds	r2, r3, r2
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	0011      	movs	r1, r2
 801408e:	0018      	movs	r0, r3
 8014090:	f000 fa78 	bl	8014584 <USBD_StdItfReq>
      break;
 8014094:	e016      	b.n	80140c4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	22aa      	movs	r2, #170	@ 0xaa
 801409a:	0092      	lsls	r2, r2, #2
 801409c:	189a      	adds	r2, r3, r2
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	0011      	movs	r1, r2
 80140a2:	0018      	movs	r0, r3
 80140a4:	f000 fac5 	bl	8014632 <USBD_StdEPReq>
      break;
 80140a8:	e00c      	b.n	80140c4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80140aa:	687a      	ldr	r2, [r7, #4]
 80140ac:	23aa      	movs	r3, #170	@ 0xaa
 80140ae:	009b      	lsls	r3, r3, #2
 80140b0:	5cd3      	ldrb	r3, [r2, r3]
 80140b2:	227f      	movs	r2, #127	@ 0x7f
 80140b4:	4393      	bics	r3, r2
 80140b6:	b2da      	uxtb	r2, r3
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	0011      	movs	r1, r2
 80140bc:	0018      	movs	r0, r3
 80140be:	f001 fc92 	bl	80159e6 <USBD_LL_StallEP>
      break;
 80140c2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80140c4:	2300      	movs	r3, #0
}
 80140c6:	0018      	movs	r0, r3
 80140c8:	46bd      	mov	sp, r7
 80140ca:	b002      	add	sp, #8
 80140cc:	bd80      	pop	{r7, pc}
 80140ce:	46c0      	nop			@ (mov r8, r8)
 80140d0:	000002ae 	.word	0x000002ae

080140d4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b086      	sub	sp, #24
 80140d8:	af00      	add	r7, sp, #0
 80140da:	60f8      	str	r0, [r7, #12]
 80140dc:	607a      	str	r2, [r7, #4]
 80140de:	200b      	movs	r0, #11
 80140e0:	183b      	adds	r3, r7, r0
 80140e2:	1c0a      	adds	r2, r1, #0
 80140e4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80140e6:	183b      	adds	r3, r7, r0
 80140e8:	781b      	ldrb	r3, [r3, #0]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d154      	bne.n	8014198 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	3355      	adds	r3, #85	@ 0x55
 80140f2:	33ff      	adds	r3, #255	@ 0xff
 80140f4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80140f6:	68fa      	ldr	r2, [r7, #12]
 80140f8:	23a5      	movs	r3, #165	@ 0xa5
 80140fa:	009b      	lsls	r3, r3, #2
 80140fc:	58d3      	ldr	r3, [r2, r3]
 80140fe:	2b03      	cmp	r3, #3
 8014100:	d139      	bne.n	8014176 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8014102:	697b      	ldr	r3, [r7, #20]
 8014104:	68da      	ldr	r2, [r3, #12]
 8014106:	697b      	ldr	r3, [r7, #20]
 8014108:	691b      	ldr	r3, [r3, #16]
 801410a:	429a      	cmp	r2, r3
 801410c:	d919      	bls.n	8014142 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801410e:	697b      	ldr	r3, [r7, #20]
 8014110:	68da      	ldr	r2, [r3, #12]
 8014112:	697b      	ldr	r3, [r7, #20]
 8014114:	691b      	ldr	r3, [r3, #16]
 8014116:	1ad2      	subs	r2, r2, r3
 8014118:	697b      	ldr	r3, [r7, #20]
 801411a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	68da      	ldr	r2, [r3, #12]
 8014120:	697b      	ldr	r3, [r7, #20]
 8014122:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8014124:	429a      	cmp	r2, r3
 8014126:	d203      	bcs.n	8014130 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8014128:	697b      	ldr	r3, [r7, #20]
 801412a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801412c:	b29b      	uxth	r3, r3
 801412e:	e002      	b.n	8014136 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8014130:	697b      	ldr	r3, [r7, #20]
 8014132:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8014134:	b29b      	uxth	r3, r3
 8014136:	6879      	ldr	r1, [r7, #4]
 8014138:	68f8      	ldr	r0, [r7, #12]
 801413a:	001a      	movs	r2, r3
 801413c:	f001 f898 	bl	8015270 <USBD_CtlContinueRx>
 8014140:	e045      	b.n	80141ce <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014142:	68fa      	ldr	r2, [r7, #12]
 8014144:	23ad      	movs	r3, #173	@ 0xad
 8014146:	009b      	lsls	r3, r3, #2
 8014148:	58d3      	ldr	r3, [r2, r3]
 801414a:	691b      	ldr	r3, [r3, #16]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d00d      	beq.n	801416c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014150:	68fa      	ldr	r2, [r7, #12]
 8014152:	23a7      	movs	r3, #167	@ 0xa7
 8014154:	009b      	lsls	r3, r3, #2
 8014156:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014158:	2b03      	cmp	r3, #3
 801415a:	d107      	bne.n	801416c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801415c:	68fa      	ldr	r2, [r7, #12]
 801415e:	23ad      	movs	r3, #173	@ 0xad
 8014160:	009b      	lsls	r3, r3, #2
 8014162:	58d3      	ldr	r3, [r2, r3]
 8014164:	691b      	ldr	r3, [r3, #16]
 8014166:	68fa      	ldr	r2, [r7, #12]
 8014168:	0010      	movs	r0, r2
 801416a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	0018      	movs	r0, r3
 8014170:	f001 f891 	bl	8015296 <USBD_CtlSendStatus>
 8014174:	e02b      	b.n	80141ce <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8014176:	68fa      	ldr	r2, [r7, #12]
 8014178:	23a5      	movs	r3, #165	@ 0xa5
 801417a:	009b      	lsls	r3, r3, #2
 801417c:	58d3      	ldr	r3, [r2, r3]
 801417e:	2b05      	cmp	r3, #5
 8014180:	d125      	bne.n	80141ce <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8014182:	68fa      	ldr	r2, [r7, #12]
 8014184:	23a5      	movs	r3, #165	@ 0xa5
 8014186:	009b      	lsls	r3, r3, #2
 8014188:	2100      	movs	r1, #0
 801418a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	2100      	movs	r1, #0
 8014190:	0018      	movs	r0, r3
 8014192:	f001 fc28 	bl	80159e6 <USBD_LL_StallEP>
 8014196:	e01a      	b.n	80141ce <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8014198:	68fa      	ldr	r2, [r7, #12]
 801419a:	23ad      	movs	r3, #173	@ 0xad
 801419c:	009b      	lsls	r3, r3, #2
 801419e:	58d3      	ldr	r3, [r2, r3]
 80141a0:	699b      	ldr	r3, [r3, #24]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d011      	beq.n	80141ca <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80141a6:	68fa      	ldr	r2, [r7, #12]
 80141a8:	23a7      	movs	r3, #167	@ 0xa7
 80141aa:	009b      	lsls	r3, r3, #2
 80141ac:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80141ae:	2b03      	cmp	r3, #3
 80141b0:	d10b      	bne.n	80141ca <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80141b2:	68fa      	ldr	r2, [r7, #12]
 80141b4:	23ad      	movs	r3, #173	@ 0xad
 80141b6:	009b      	lsls	r3, r3, #2
 80141b8:	58d3      	ldr	r3, [r2, r3]
 80141ba:	699b      	ldr	r3, [r3, #24]
 80141bc:	220b      	movs	r2, #11
 80141be:	18ba      	adds	r2, r7, r2
 80141c0:	7811      	ldrb	r1, [r2, #0]
 80141c2:	68fa      	ldr	r2, [r7, #12]
 80141c4:	0010      	movs	r0, r2
 80141c6:	4798      	blx	r3
 80141c8:	e001      	b.n	80141ce <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80141ca:	2302      	movs	r3, #2
 80141cc:	e000      	b.n	80141d0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80141ce:	2300      	movs	r3, #0
}
 80141d0:	0018      	movs	r0, r3
 80141d2:	46bd      	mov	sp, r7
 80141d4:	b006      	add	sp, #24
 80141d6:	bd80      	pop	{r7, pc}

080141d8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b086      	sub	sp, #24
 80141dc:	af00      	add	r7, sp, #0
 80141de:	60f8      	str	r0, [r7, #12]
 80141e0:	607a      	str	r2, [r7, #4]
 80141e2:	200b      	movs	r0, #11
 80141e4:	183b      	adds	r3, r7, r0
 80141e6:	1c0a      	adds	r2, r1, #0
 80141e8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80141ea:	183b      	adds	r3, r7, r0
 80141ec:	781b      	ldrb	r3, [r3, #0]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d000      	beq.n	80141f4 <USBD_LL_DataInStage+0x1c>
 80141f2:	e08e      	b.n	8014312 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	3314      	adds	r3, #20
 80141f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80141fa:	68fa      	ldr	r2, [r7, #12]
 80141fc:	23a5      	movs	r3, #165	@ 0xa5
 80141fe:	009b      	lsls	r3, r3, #2
 8014200:	58d3      	ldr	r3, [r2, r3]
 8014202:	2b02      	cmp	r3, #2
 8014204:	d164      	bne.n	80142d0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	68da      	ldr	r2, [r3, #12]
 801420a:	697b      	ldr	r3, [r7, #20]
 801420c:	691b      	ldr	r3, [r3, #16]
 801420e:	429a      	cmp	r2, r3
 8014210:	d915      	bls.n	801423e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8014212:	697b      	ldr	r3, [r7, #20]
 8014214:	68da      	ldr	r2, [r3, #12]
 8014216:	697b      	ldr	r3, [r7, #20]
 8014218:	691b      	ldr	r3, [r3, #16]
 801421a:	1ad2      	subs	r2, r2, r3
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	68db      	ldr	r3, [r3, #12]
 8014224:	b29a      	uxth	r2, r3
 8014226:	6879      	ldr	r1, [r7, #4]
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	0018      	movs	r0, r3
 801422c:	f000 ffe9 	bl	8015202 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014230:	68f8      	ldr	r0, [r7, #12]
 8014232:	2300      	movs	r3, #0
 8014234:	2200      	movs	r2, #0
 8014236:	2100      	movs	r1, #0
 8014238:	f001 fcbe 	bl	8015bb8 <USBD_LL_PrepareReceive>
 801423c:	e059      	b.n	80142f2 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801423e:	697b      	ldr	r3, [r7, #20]
 8014240:	689a      	ldr	r2, [r3, #8]
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	691b      	ldr	r3, [r3, #16]
 8014246:	0019      	movs	r1, r3
 8014248:	0010      	movs	r0, r2
 801424a:	f7eb ffff 	bl	800024c <__aeabi_uidivmod>
 801424e:	1e0b      	subs	r3, r1, #0
 8014250:	d11f      	bne.n	8014292 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8014252:	697b      	ldr	r3, [r7, #20]
 8014254:	689a      	ldr	r2, [r3, #8]
 8014256:	697b      	ldr	r3, [r7, #20]
 8014258:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801425a:	429a      	cmp	r2, r3
 801425c:	d319      	bcc.n	8014292 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801425e:	697b      	ldr	r3, [r7, #20]
 8014260:	689a      	ldr	r2, [r3, #8]
 8014262:	68f9      	ldr	r1, [r7, #12]
 8014264:	23a6      	movs	r3, #166	@ 0xa6
 8014266:	009b      	lsls	r3, r3, #2
 8014268:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801426a:	429a      	cmp	r2, r3
 801426c:	d211      	bcs.n	8014292 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	2200      	movs	r2, #0
 8014272:	2100      	movs	r1, #0
 8014274:	0018      	movs	r0, r3
 8014276:	f000 ffc4 	bl	8015202 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801427a:	68fa      	ldr	r2, [r7, #12]
 801427c:	23a6      	movs	r3, #166	@ 0xa6
 801427e:	009b      	lsls	r3, r3, #2
 8014280:	2100      	movs	r1, #0
 8014282:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014284:	68f8      	ldr	r0, [r7, #12]
 8014286:	2300      	movs	r3, #0
 8014288:	2200      	movs	r2, #0
 801428a:	2100      	movs	r1, #0
 801428c:	f001 fc94 	bl	8015bb8 <USBD_LL_PrepareReceive>
 8014290:	e02f      	b.n	80142f2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014292:	68fa      	ldr	r2, [r7, #12]
 8014294:	23ad      	movs	r3, #173	@ 0xad
 8014296:	009b      	lsls	r3, r3, #2
 8014298:	58d3      	ldr	r3, [r2, r3]
 801429a:	68db      	ldr	r3, [r3, #12]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d00d      	beq.n	80142bc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80142a0:	68fa      	ldr	r2, [r7, #12]
 80142a2:	23a7      	movs	r3, #167	@ 0xa7
 80142a4:	009b      	lsls	r3, r3, #2
 80142a6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80142a8:	2b03      	cmp	r3, #3
 80142aa:	d107      	bne.n	80142bc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80142ac:	68fa      	ldr	r2, [r7, #12]
 80142ae:	23ad      	movs	r3, #173	@ 0xad
 80142b0:	009b      	lsls	r3, r3, #2
 80142b2:	58d3      	ldr	r3, [r2, r3]
 80142b4:	68db      	ldr	r3, [r3, #12]
 80142b6:	68fa      	ldr	r2, [r7, #12]
 80142b8:	0010      	movs	r0, r2
 80142ba:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	2180      	movs	r1, #128	@ 0x80
 80142c0:	0018      	movs	r0, r3
 80142c2:	f001 fb90 	bl	80159e6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	0018      	movs	r0, r3
 80142ca:	f000 fff8 	bl	80152be <USBD_CtlReceiveStatus>
 80142ce:	e010      	b.n	80142f2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80142d0:	68fa      	ldr	r2, [r7, #12]
 80142d2:	23a5      	movs	r3, #165	@ 0xa5
 80142d4:	009b      	lsls	r3, r3, #2
 80142d6:	58d3      	ldr	r3, [r2, r3]
 80142d8:	2b04      	cmp	r3, #4
 80142da:	d005      	beq.n	80142e8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80142dc:	68fa      	ldr	r2, [r7, #12]
 80142de:	23a5      	movs	r3, #165	@ 0xa5
 80142e0:	009b      	lsls	r3, r3, #2
 80142e2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d104      	bne.n	80142f2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	2180      	movs	r1, #128	@ 0x80
 80142ec:	0018      	movs	r0, r3
 80142ee:	f001 fb7a 	bl	80159e6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80142f2:	68fa      	ldr	r2, [r7, #12]
 80142f4:	23a8      	movs	r3, #168	@ 0xa8
 80142f6:	009b      	lsls	r3, r3, #2
 80142f8:	5cd3      	ldrb	r3, [r2, r3]
 80142fa:	2b01      	cmp	r3, #1
 80142fc:	d124      	bne.n	8014348 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	0018      	movs	r0, r3
 8014302:	f7ff fe42 	bl	8013f8a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014306:	68fa      	ldr	r2, [r7, #12]
 8014308:	23a8      	movs	r3, #168	@ 0xa8
 801430a:	009b      	lsls	r3, r3, #2
 801430c:	2100      	movs	r1, #0
 801430e:	54d1      	strb	r1, [r2, r3]
 8014310:	e01a      	b.n	8014348 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8014312:	68fa      	ldr	r2, [r7, #12]
 8014314:	23ad      	movs	r3, #173	@ 0xad
 8014316:	009b      	lsls	r3, r3, #2
 8014318:	58d3      	ldr	r3, [r2, r3]
 801431a:	695b      	ldr	r3, [r3, #20]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d011      	beq.n	8014344 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014320:	68fa      	ldr	r2, [r7, #12]
 8014322:	23a7      	movs	r3, #167	@ 0xa7
 8014324:	009b      	lsls	r3, r3, #2
 8014326:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8014328:	2b03      	cmp	r3, #3
 801432a:	d10b      	bne.n	8014344 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801432c:	68fa      	ldr	r2, [r7, #12]
 801432e:	23ad      	movs	r3, #173	@ 0xad
 8014330:	009b      	lsls	r3, r3, #2
 8014332:	58d3      	ldr	r3, [r2, r3]
 8014334:	695b      	ldr	r3, [r3, #20]
 8014336:	220b      	movs	r2, #11
 8014338:	18ba      	adds	r2, r7, r2
 801433a:	7811      	ldrb	r1, [r2, #0]
 801433c:	68fa      	ldr	r2, [r7, #12]
 801433e:	0010      	movs	r0, r2
 8014340:	4798      	blx	r3
 8014342:	e001      	b.n	8014348 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8014344:	2302      	movs	r3, #2
 8014346:	e000      	b.n	801434a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8014348:	2300      	movs	r3, #0
}
 801434a:	0018      	movs	r0, r3
 801434c:	46bd      	mov	sp, r7
 801434e:	b006      	add	sp, #24
 8014350:	bd80      	pop	{r7, pc}

08014352 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014352:	b580      	push	{r7, lr}
 8014354:	b082      	sub	sp, #8
 8014356:	af00      	add	r7, sp, #0
 8014358:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801435a:	6878      	ldr	r0, [r7, #4]
 801435c:	2340      	movs	r3, #64	@ 0x40
 801435e:	2200      	movs	r2, #0
 8014360:	2100      	movs	r1, #0
 8014362:	f001 fade 	bl	8015922 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014366:	687a      	ldr	r2, [r7, #4]
 8014368:	23ac      	movs	r3, #172	@ 0xac
 801436a:	005b      	lsls	r3, r3, #1
 801436c:	2101      	movs	r1, #1
 801436e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014370:	687a      	ldr	r2, [r7, #4]
 8014372:	23b2      	movs	r3, #178	@ 0xb2
 8014374:	005b      	lsls	r3, r3, #1
 8014376:	2140      	movs	r1, #64	@ 0x40
 8014378:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801437a:	6878      	ldr	r0, [r7, #4]
 801437c:	2340      	movs	r3, #64	@ 0x40
 801437e:	2200      	movs	r2, #0
 8014380:	2180      	movs	r1, #128	@ 0x80
 8014382:	f001 face 	bl	8015922 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	2201      	movs	r2, #1
 801438a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	2240      	movs	r2, #64	@ 0x40
 8014390:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014392:	687a      	ldr	r2, [r7, #4]
 8014394:	23a7      	movs	r3, #167	@ 0xa7
 8014396:	009b      	lsls	r3, r3, #2
 8014398:	2101      	movs	r1, #1
 801439a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801439c:	687a      	ldr	r2, [r7, #4]
 801439e:	23a5      	movs	r3, #165	@ 0xa5
 80143a0:	009b      	lsls	r3, r3, #2
 80143a2:	2100      	movs	r1, #0
 80143a4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	2200      	movs	r2, #0
 80143aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80143ac:	687a      	ldr	r2, [r7, #4]
 80143ae:	23a9      	movs	r3, #169	@ 0xa9
 80143b0:	009b      	lsls	r3, r3, #2
 80143b2:	2100      	movs	r1, #0
 80143b4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80143b6:	687a      	ldr	r2, [r7, #4]
 80143b8:	23ae      	movs	r3, #174	@ 0xae
 80143ba:	009b      	lsls	r3, r3, #2
 80143bc:	58d3      	ldr	r3, [r2, r3]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d00a      	beq.n	80143d8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80143c2:	687a      	ldr	r2, [r7, #4]
 80143c4:	23ad      	movs	r3, #173	@ 0xad
 80143c6:	009b      	lsls	r3, r3, #2
 80143c8:	58d3      	ldr	r3, [r2, r3]
 80143ca:	685a      	ldr	r2, [r3, #4]
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	685b      	ldr	r3, [r3, #4]
 80143d0:	b2d9      	uxtb	r1, r3
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	0018      	movs	r0, r3
 80143d6:	4790      	blx	r2
  }

  return USBD_OK;
 80143d8:	2300      	movs	r3, #0
}
 80143da:	0018      	movs	r0, r3
 80143dc:	46bd      	mov	sp, r7
 80143de:	b002      	add	sp, #8
 80143e0:	bd80      	pop	{r7, pc}

080143e2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80143e2:	b580      	push	{r7, lr}
 80143e4:	b082      	sub	sp, #8
 80143e6:	af00      	add	r7, sp, #0
 80143e8:	6078      	str	r0, [r7, #4]
 80143ea:	000a      	movs	r2, r1
 80143ec:	1cfb      	adds	r3, r7, #3
 80143ee:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	1cfa      	adds	r2, r7, #3
 80143f4:	7812      	ldrb	r2, [r2, #0]
 80143f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80143f8:	2300      	movs	r3, #0
}
 80143fa:	0018      	movs	r0, r3
 80143fc:	46bd      	mov	sp, r7
 80143fe:	b002      	add	sp, #8
 8014400:	bd80      	pop	{r7, pc}
	...

08014404 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b082      	sub	sp, #8
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801440c:	687a      	ldr	r2, [r7, #4]
 801440e:	23a7      	movs	r3, #167	@ 0xa7
 8014410:	009b      	lsls	r3, r3, #2
 8014412:	5cd1      	ldrb	r1, [r2, r3]
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	4a06      	ldr	r2, [pc, #24]	@ (8014430 <USBD_LL_Suspend+0x2c>)
 8014418:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801441a:	687a      	ldr	r2, [r7, #4]
 801441c:	23a7      	movs	r3, #167	@ 0xa7
 801441e:	009b      	lsls	r3, r3, #2
 8014420:	2104      	movs	r1, #4
 8014422:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8014424:	2300      	movs	r3, #0
}
 8014426:	0018      	movs	r0, r3
 8014428:	46bd      	mov	sp, r7
 801442a:	b002      	add	sp, #8
 801442c:	bd80      	pop	{r7, pc}
 801442e:	46c0      	nop			@ (mov r8, r8)
 8014430:	0000029d 	.word	0x0000029d

08014434 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b082      	sub	sp, #8
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801443c:	687a      	ldr	r2, [r7, #4]
 801443e:	23a7      	movs	r3, #167	@ 0xa7
 8014440:	009b      	lsls	r3, r3, #2
 8014442:	5cd3      	ldrb	r3, [r2, r3]
 8014444:	2b04      	cmp	r3, #4
 8014446:	d106      	bne.n	8014456 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	4a05      	ldr	r2, [pc, #20]	@ (8014460 <USBD_LL_Resume+0x2c>)
 801444c:	5c99      	ldrb	r1, [r3, r2]
 801444e:	687a      	ldr	r2, [r7, #4]
 8014450:	23a7      	movs	r3, #167	@ 0xa7
 8014452:	009b      	lsls	r3, r3, #2
 8014454:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8014456:	2300      	movs	r3, #0
}
 8014458:	0018      	movs	r0, r3
 801445a:	46bd      	mov	sp, r7
 801445c:	b002      	add	sp, #8
 801445e:	bd80      	pop	{r7, pc}
 8014460:	0000029d 	.word	0x0000029d

08014464 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b082      	sub	sp, #8
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801446c:	687a      	ldr	r2, [r7, #4]
 801446e:	23a7      	movs	r3, #167	@ 0xa7
 8014470:	009b      	lsls	r3, r3, #2
 8014472:	5cd3      	ldrb	r3, [r2, r3]
 8014474:	2b03      	cmp	r3, #3
 8014476:	d10e      	bne.n	8014496 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8014478:	687a      	ldr	r2, [r7, #4]
 801447a:	23ad      	movs	r3, #173	@ 0xad
 801447c:	009b      	lsls	r3, r3, #2
 801447e:	58d3      	ldr	r3, [r2, r3]
 8014480:	69db      	ldr	r3, [r3, #28]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d007      	beq.n	8014496 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8014486:	687a      	ldr	r2, [r7, #4]
 8014488:	23ad      	movs	r3, #173	@ 0xad
 801448a:	009b      	lsls	r3, r3, #2
 801448c:	58d3      	ldr	r3, [r2, r3]
 801448e:	69db      	ldr	r3, [r3, #28]
 8014490:	687a      	ldr	r2, [r7, #4]
 8014492:	0010      	movs	r0, r2
 8014494:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014496:	2300      	movs	r3, #0
}
 8014498:	0018      	movs	r0, r3
 801449a:	46bd      	mov	sp, r7
 801449c:	b002      	add	sp, #8
 801449e:	bd80      	pop	{r7, pc}

080144a0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b084      	sub	sp, #16
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80144aa:	230f      	movs	r3, #15
 80144ac:	18fb      	adds	r3, r7, r3
 80144ae:	2200      	movs	r2, #0
 80144b0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80144b2:	683b      	ldr	r3, [r7, #0]
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	001a      	movs	r2, r3
 80144b8:	2360      	movs	r3, #96	@ 0x60
 80144ba:	4013      	ands	r3, r2
 80144bc:	2b40      	cmp	r3, #64	@ 0x40
 80144be:	d004      	beq.n	80144ca <USBD_StdDevReq+0x2a>
 80144c0:	d84f      	bhi.n	8014562 <USBD_StdDevReq+0xc2>
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d00b      	beq.n	80144de <USBD_StdDevReq+0x3e>
 80144c6:	2b20      	cmp	r3, #32
 80144c8:	d14b      	bne.n	8014562 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80144ca:	687a      	ldr	r2, [r7, #4]
 80144cc:	23ad      	movs	r3, #173	@ 0xad
 80144ce:	009b      	lsls	r3, r3, #2
 80144d0:	58d3      	ldr	r3, [r2, r3]
 80144d2:	689b      	ldr	r3, [r3, #8]
 80144d4:	6839      	ldr	r1, [r7, #0]
 80144d6:	687a      	ldr	r2, [r7, #4]
 80144d8:	0010      	movs	r0, r2
 80144da:	4798      	blx	r3
      break;
 80144dc:	e048      	b.n	8014570 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80144de:	683b      	ldr	r3, [r7, #0]
 80144e0:	785b      	ldrb	r3, [r3, #1]
 80144e2:	2b09      	cmp	r3, #9
 80144e4:	d835      	bhi.n	8014552 <USBD_StdDevReq+0xb2>
 80144e6:	009a      	lsls	r2, r3, #2
 80144e8:	4b25      	ldr	r3, [pc, #148]	@ (8014580 <USBD_StdDevReq+0xe0>)
 80144ea:	18d3      	adds	r3, r2, r3
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80144f0:	683a      	ldr	r2, [r7, #0]
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	0011      	movs	r1, r2
 80144f6:	0018      	movs	r0, r3
 80144f8:	f000 fa52 	bl	80149a0 <USBD_GetDescriptor>
          break;
 80144fc:	e030      	b.n	8014560 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80144fe:	683a      	ldr	r2, [r7, #0]
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	0011      	movs	r1, r2
 8014504:	0018      	movs	r0, r3
 8014506:	f000 fbfd 	bl	8014d04 <USBD_SetAddress>
          break;
 801450a:	e029      	b.n	8014560 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801450c:	683a      	ldr	r2, [r7, #0]
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	0011      	movs	r1, r2
 8014512:	0018      	movs	r0, r3
 8014514:	f000 fc4a 	bl	8014dac <USBD_SetConfig>
          break;
 8014518:	e022      	b.n	8014560 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801451a:	683a      	ldr	r2, [r7, #0]
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	0011      	movs	r1, r2
 8014520:	0018      	movs	r0, r3
 8014522:	f000 fce7 	bl	8014ef4 <USBD_GetConfig>
          break;
 8014526:	e01b      	b.n	8014560 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014528:	683a      	ldr	r2, [r7, #0]
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	0011      	movs	r1, r2
 801452e:	0018      	movs	r0, r3
 8014530:	f000 fd1b 	bl	8014f6a <USBD_GetStatus>
          break;
 8014534:	e014      	b.n	8014560 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014536:	683a      	ldr	r2, [r7, #0]
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	0011      	movs	r1, r2
 801453c:	0018      	movs	r0, r3
 801453e:	f000 fd4e 	bl	8014fde <USBD_SetFeature>
          break;
 8014542:	e00d      	b.n	8014560 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014544:	683a      	ldr	r2, [r7, #0]
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	0011      	movs	r1, r2
 801454a:	0018      	movs	r0, r3
 801454c:	f000 fd5d 	bl	801500a <USBD_ClrFeature>
          break;
 8014550:	e006      	b.n	8014560 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014552:	683a      	ldr	r2, [r7, #0]
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	0011      	movs	r1, r2
 8014558:	0018      	movs	r0, r3
 801455a:	f000 fdb4 	bl	80150c6 <USBD_CtlError>
          break;
 801455e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014560:	e006      	b.n	8014570 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8014562:	683a      	ldr	r2, [r7, #0]
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	0011      	movs	r1, r2
 8014568:	0018      	movs	r0, r3
 801456a:	f000 fdac 	bl	80150c6 <USBD_CtlError>
      break;
 801456e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8014570:	230f      	movs	r3, #15
 8014572:	18fb      	adds	r3, r7, r3
 8014574:	781b      	ldrb	r3, [r3, #0]
}
 8014576:	0018      	movs	r0, r3
 8014578:	46bd      	mov	sp, r7
 801457a:	b004      	add	sp, #16
 801457c:	bd80      	pop	{r7, pc}
 801457e:	46c0      	nop			@ (mov r8, r8)
 8014580:	0801a27c 	.word	0x0801a27c

08014584 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8014584:	b5b0      	push	{r4, r5, r7, lr}
 8014586:	b084      	sub	sp, #16
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
 801458c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801458e:	230f      	movs	r3, #15
 8014590:	18fb      	adds	r3, r7, r3
 8014592:	2200      	movs	r2, #0
 8014594:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014596:	683b      	ldr	r3, [r7, #0]
 8014598:	781b      	ldrb	r3, [r3, #0]
 801459a:	001a      	movs	r2, r3
 801459c:	2360      	movs	r3, #96	@ 0x60
 801459e:	4013      	ands	r3, r2
 80145a0:	2b40      	cmp	r3, #64	@ 0x40
 80145a2:	d004      	beq.n	80145ae <USBD_StdItfReq+0x2a>
 80145a4:	d839      	bhi.n	801461a <USBD_StdItfReq+0x96>
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d001      	beq.n	80145ae <USBD_StdItfReq+0x2a>
 80145aa:	2b20      	cmp	r3, #32
 80145ac:	d135      	bne.n	801461a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80145ae:	687a      	ldr	r2, [r7, #4]
 80145b0:	23a7      	movs	r3, #167	@ 0xa7
 80145b2:	009b      	lsls	r3, r3, #2
 80145b4:	5cd3      	ldrb	r3, [r2, r3]
 80145b6:	3b01      	subs	r3, #1
 80145b8:	2b02      	cmp	r3, #2
 80145ba:	d825      	bhi.n	8014608 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	889b      	ldrh	r3, [r3, #4]
 80145c0:	b2db      	uxtb	r3, r3
 80145c2:	2b01      	cmp	r3, #1
 80145c4:	d819      	bhi.n	80145fa <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80145c6:	687a      	ldr	r2, [r7, #4]
 80145c8:	23ad      	movs	r3, #173	@ 0xad
 80145ca:	009b      	lsls	r3, r3, #2
 80145cc:	58d3      	ldr	r3, [r2, r3]
 80145ce:	689b      	ldr	r3, [r3, #8]
 80145d0:	250f      	movs	r5, #15
 80145d2:	197c      	adds	r4, r7, r5
 80145d4:	6839      	ldr	r1, [r7, #0]
 80145d6:	687a      	ldr	r2, [r7, #4]
 80145d8:	0010      	movs	r0, r2
 80145da:	4798      	blx	r3
 80145dc:	0003      	movs	r3, r0
 80145de:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80145e0:	683b      	ldr	r3, [r7, #0]
 80145e2:	88db      	ldrh	r3, [r3, #6]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d116      	bne.n	8014616 <USBD_StdItfReq+0x92>
 80145e8:	197b      	adds	r3, r7, r5
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d112      	bne.n	8014616 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	0018      	movs	r0, r3
 80145f4:	f000 fe4f 	bl	8015296 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80145f8:	e00d      	b.n	8014616 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80145fa:	683a      	ldr	r2, [r7, #0]
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	0011      	movs	r1, r2
 8014600:	0018      	movs	r0, r3
 8014602:	f000 fd60 	bl	80150c6 <USBD_CtlError>
          break;
 8014606:	e006      	b.n	8014616 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8014608:	683a      	ldr	r2, [r7, #0]
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	0011      	movs	r1, r2
 801460e:	0018      	movs	r0, r3
 8014610:	f000 fd59 	bl	80150c6 <USBD_CtlError>
          break;
 8014614:	e000      	b.n	8014618 <USBD_StdItfReq+0x94>
          break;
 8014616:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014618:	e006      	b.n	8014628 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801461a:	683a      	ldr	r2, [r7, #0]
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	0011      	movs	r1, r2
 8014620:	0018      	movs	r0, r3
 8014622:	f000 fd50 	bl	80150c6 <USBD_CtlError>
      break;
 8014626:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8014628:	2300      	movs	r3, #0
}
 801462a:	0018      	movs	r0, r3
 801462c:	46bd      	mov	sp, r7
 801462e:	b004      	add	sp, #16
 8014630:	bdb0      	pop	{r4, r5, r7, pc}

08014632 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8014632:	b5b0      	push	{r4, r5, r7, lr}
 8014634:	b084      	sub	sp, #16
 8014636:	af00      	add	r7, sp, #0
 8014638:	6078      	str	r0, [r7, #4]
 801463a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801463c:	230f      	movs	r3, #15
 801463e:	18fb      	adds	r3, r7, r3
 8014640:	2200      	movs	r2, #0
 8014642:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8014644:	683b      	ldr	r3, [r7, #0]
 8014646:	889a      	ldrh	r2, [r3, #4]
 8014648:	230e      	movs	r3, #14
 801464a:	18fb      	adds	r3, r7, r3
 801464c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801464e:	683b      	ldr	r3, [r7, #0]
 8014650:	781b      	ldrb	r3, [r3, #0]
 8014652:	001a      	movs	r2, r3
 8014654:	2360      	movs	r3, #96	@ 0x60
 8014656:	4013      	ands	r3, r2
 8014658:	2b40      	cmp	r3, #64	@ 0x40
 801465a:	d006      	beq.n	801466a <USBD_StdEPReq+0x38>
 801465c:	d900      	bls.n	8014660 <USBD_StdEPReq+0x2e>
 801465e:	e190      	b.n	8014982 <USBD_StdEPReq+0x350>
 8014660:	2b00      	cmp	r3, #0
 8014662:	d00c      	beq.n	801467e <USBD_StdEPReq+0x4c>
 8014664:	2b20      	cmp	r3, #32
 8014666:	d000      	beq.n	801466a <USBD_StdEPReq+0x38>
 8014668:	e18b      	b.n	8014982 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801466a:	687a      	ldr	r2, [r7, #4]
 801466c:	23ad      	movs	r3, #173	@ 0xad
 801466e:	009b      	lsls	r3, r3, #2
 8014670:	58d3      	ldr	r3, [r2, r3]
 8014672:	689b      	ldr	r3, [r3, #8]
 8014674:	6839      	ldr	r1, [r7, #0]
 8014676:	687a      	ldr	r2, [r7, #4]
 8014678:	0010      	movs	r0, r2
 801467a:	4798      	blx	r3
      break;
 801467c:	e188      	b.n	8014990 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801467e:	683b      	ldr	r3, [r7, #0]
 8014680:	781b      	ldrb	r3, [r3, #0]
 8014682:	001a      	movs	r2, r3
 8014684:	2360      	movs	r3, #96	@ 0x60
 8014686:	4013      	ands	r3, r2
 8014688:	2b20      	cmp	r3, #32
 801468a:	d10f      	bne.n	80146ac <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801468c:	687a      	ldr	r2, [r7, #4]
 801468e:	23ad      	movs	r3, #173	@ 0xad
 8014690:	009b      	lsls	r3, r3, #2
 8014692:	58d3      	ldr	r3, [r2, r3]
 8014694:	689b      	ldr	r3, [r3, #8]
 8014696:	250f      	movs	r5, #15
 8014698:	197c      	adds	r4, r7, r5
 801469a:	6839      	ldr	r1, [r7, #0]
 801469c:	687a      	ldr	r2, [r7, #4]
 801469e:	0010      	movs	r0, r2
 80146a0:	4798      	blx	r3
 80146a2:	0003      	movs	r3, r0
 80146a4:	7023      	strb	r3, [r4, #0]

        return ret;
 80146a6:	197b      	adds	r3, r7, r5
 80146a8:	781b      	ldrb	r3, [r3, #0]
 80146aa:	e174      	b.n	8014996 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80146ac:	683b      	ldr	r3, [r7, #0]
 80146ae:	785b      	ldrb	r3, [r3, #1]
 80146b0:	2b03      	cmp	r3, #3
 80146b2:	d007      	beq.n	80146c4 <USBD_StdEPReq+0x92>
 80146b4:	dd00      	ble.n	80146b8 <USBD_StdEPReq+0x86>
 80146b6:	e15c      	b.n	8014972 <USBD_StdEPReq+0x340>
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d100      	bne.n	80146be <USBD_StdEPReq+0x8c>
 80146bc:	e092      	b.n	80147e4 <USBD_StdEPReq+0x1b2>
 80146be:	2b01      	cmp	r3, #1
 80146c0:	d04b      	beq.n	801475a <USBD_StdEPReq+0x128>
 80146c2:	e156      	b.n	8014972 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80146c4:	687a      	ldr	r2, [r7, #4]
 80146c6:	23a7      	movs	r3, #167	@ 0xa7
 80146c8:	009b      	lsls	r3, r3, #2
 80146ca:	5cd3      	ldrb	r3, [r2, r3]
 80146cc:	2b02      	cmp	r3, #2
 80146ce:	d002      	beq.n	80146d6 <USBD_StdEPReq+0xa4>
 80146d0:	2b03      	cmp	r3, #3
 80146d2:	d01d      	beq.n	8014710 <USBD_StdEPReq+0xde>
 80146d4:	e039      	b.n	801474a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80146d6:	220e      	movs	r2, #14
 80146d8:	18bb      	adds	r3, r7, r2
 80146da:	781b      	ldrb	r3, [r3, #0]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d010      	beq.n	8014702 <USBD_StdEPReq+0xd0>
 80146e0:	18bb      	adds	r3, r7, r2
 80146e2:	781b      	ldrb	r3, [r3, #0]
 80146e4:	2b80      	cmp	r3, #128	@ 0x80
 80146e6:	d00c      	beq.n	8014702 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80146e8:	18bb      	adds	r3, r7, r2
 80146ea:	781a      	ldrb	r2, [r3, #0]
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	0011      	movs	r1, r2
 80146f0:	0018      	movs	r0, r3
 80146f2:	f001 f978 	bl	80159e6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	2180      	movs	r1, #128	@ 0x80
 80146fa:	0018      	movs	r0, r3
 80146fc:	f001 f973 	bl	80159e6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014700:	e02a      	b.n	8014758 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8014702:	683a      	ldr	r2, [r7, #0]
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	0011      	movs	r1, r2
 8014708:	0018      	movs	r0, r3
 801470a:	f000 fcdc 	bl	80150c6 <USBD_CtlError>
              break;
 801470e:	e023      	b.n	8014758 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014710:	683b      	ldr	r3, [r7, #0]
 8014712:	885b      	ldrh	r3, [r3, #2]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d113      	bne.n	8014740 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8014718:	220e      	movs	r2, #14
 801471a:	18bb      	adds	r3, r7, r2
 801471c:	781b      	ldrb	r3, [r3, #0]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d00e      	beq.n	8014740 <USBD_StdEPReq+0x10e>
 8014722:	18bb      	adds	r3, r7, r2
 8014724:	781b      	ldrb	r3, [r3, #0]
 8014726:	2b80      	cmp	r3, #128	@ 0x80
 8014728:	d00a      	beq.n	8014740 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801472a:	683b      	ldr	r3, [r7, #0]
 801472c:	88db      	ldrh	r3, [r3, #6]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d106      	bne.n	8014740 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8014732:	18bb      	adds	r3, r7, r2
 8014734:	781a      	ldrb	r2, [r3, #0]
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	0011      	movs	r1, r2
 801473a:	0018      	movs	r0, r3
 801473c:	f001 f953 	bl	80159e6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	0018      	movs	r0, r3
 8014744:	f000 fda7 	bl	8015296 <USBD_CtlSendStatus>

              break;
 8014748:	e006      	b.n	8014758 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801474a:	683a      	ldr	r2, [r7, #0]
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	0011      	movs	r1, r2
 8014750:	0018      	movs	r0, r3
 8014752:	f000 fcb8 	bl	80150c6 <USBD_CtlError>
              break;
 8014756:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8014758:	e112      	b.n	8014980 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801475a:	687a      	ldr	r2, [r7, #4]
 801475c:	23a7      	movs	r3, #167	@ 0xa7
 801475e:	009b      	lsls	r3, r3, #2
 8014760:	5cd3      	ldrb	r3, [r2, r3]
 8014762:	2b02      	cmp	r3, #2
 8014764:	d002      	beq.n	801476c <USBD_StdEPReq+0x13a>
 8014766:	2b03      	cmp	r3, #3
 8014768:	d01d      	beq.n	80147a6 <USBD_StdEPReq+0x174>
 801476a:	e032      	b.n	80147d2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801476c:	220e      	movs	r2, #14
 801476e:	18bb      	adds	r3, r7, r2
 8014770:	781b      	ldrb	r3, [r3, #0]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d010      	beq.n	8014798 <USBD_StdEPReq+0x166>
 8014776:	18bb      	adds	r3, r7, r2
 8014778:	781b      	ldrb	r3, [r3, #0]
 801477a:	2b80      	cmp	r3, #128	@ 0x80
 801477c:	d00c      	beq.n	8014798 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801477e:	18bb      	adds	r3, r7, r2
 8014780:	781a      	ldrb	r2, [r3, #0]
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	0011      	movs	r1, r2
 8014786:	0018      	movs	r0, r3
 8014788:	f001 f92d 	bl	80159e6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	2180      	movs	r1, #128	@ 0x80
 8014790:	0018      	movs	r0, r3
 8014792:	f001 f928 	bl	80159e6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014796:	e024      	b.n	80147e2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8014798:	683a      	ldr	r2, [r7, #0]
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	0011      	movs	r1, r2
 801479e:	0018      	movs	r0, r3
 80147a0:	f000 fc91 	bl	80150c6 <USBD_CtlError>
              break;
 80147a4:	e01d      	b.n	80147e2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80147a6:	683b      	ldr	r3, [r7, #0]
 80147a8:	885b      	ldrh	r3, [r3, #2]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d118      	bne.n	80147e0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80147ae:	210e      	movs	r1, #14
 80147b0:	187b      	adds	r3, r7, r1
 80147b2:	781b      	ldrb	r3, [r3, #0]
 80147b4:	227f      	movs	r2, #127	@ 0x7f
 80147b6:	4013      	ands	r3, r2
 80147b8:	d006      	beq.n	80147c8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80147ba:	187b      	adds	r3, r7, r1
 80147bc:	781a      	ldrb	r2, [r3, #0]
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	0011      	movs	r1, r2
 80147c2:	0018      	movs	r0, r3
 80147c4:	f001 f93a 	bl	8015a3c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	0018      	movs	r0, r3
 80147cc:	f000 fd63 	bl	8015296 <USBD_CtlSendStatus>
              }
              break;
 80147d0:	e006      	b.n	80147e0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80147d2:	683a      	ldr	r2, [r7, #0]
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	0011      	movs	r1, r2
 80147d8:	0018      	movs	r0, r3
 80147da:	f000 fc74 	bl	80150c6 <USBD_CtlError>
              break;
 80147de:	e000      	b.n	80147e2 <USBD_StdEPReq+0x1b0>
              break;
 80147e0:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80147e2:	e0cd      	b.n	8014980 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80147e4:	687a      	ldr	r2, [r7, #4]
 80147e6:	23a7      	movs	r3, #167	@ 0xa7
 80147e8:	009b      	lsls	r3, r3, #2
 80147ea:	5cd3      	ldrb	r3, [r2, r3]
 80147ec:	2b02      	cmp	r3, #2
 80147ee:	d002      	beq.n	80147f6 <USBD_StdEPReq+0x1c4>
 80147f0:	2b03      	cmp	r3, #3
 80147f2:	d03c      	beq.n	801486e <USBD_StdEPReq+0x23c>
 80147f4:	e0b5      	b.n	8014962 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80147f6:	220e      	movs	r2, #14
 80147f8:	18bb      	adds	r3, r7, r2
 80147fa:	781b      	ldrb	r3, [r3, #0]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d00a      	beq.n	8014816 <USBD_StdEPReq+0x1e4>
 8014800:	18bb      	adds	r3, r7, r2
 8014802:	781b      	ldrb	r3, [r3, #0]
 8014804:	2b80      	cmp	r3, #128	@ 0x80
 8014806:	d006      	beq.n	8014816 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8014808:	683a      	ldr	r2, [r7, #0]
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	0011      	movs	r1, r2
 801480e:	0018      	movs	r0, r3
 8014810:	f000 fc59 	bl	80150c6 <USBD_CtlError>
                break;
 8014814:	e0ac      	b.n	8014970 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014816:	220e      	movs	r2, #14
 8014818:	18bb      	adds	r3, r7, r2
 801481a:	781b      	ldrb	r3, [r3, #0]
 801481c:	b25b      	sxtb	r3, r3
 801481e:	2b00      	cmp	r3, #0
 8014820:	da0c      	bge.n	801483c <USBD_StdEPReq+0x20a>
 8014822:	18bb      	adds	r3, r7, r2
 8014824:	781b      	ldrb	r3, [r3, #0]
 8014826:	227f      	movs	r2, #127	@ 0x7f
 8014828:	401a      	ands	r2, r3
 801482a:	0013      	movs	r3, r2
 801482c:	009b      	lsls	r3, r3, #2
 801482e:	189b      	adds	r3, r3, r2
 8014830:	009b      	lsls	r3, r3, #2
 8014832:	3310      	adds	r3, #16
 8014834:	687a      	ldr	r2, [r7, #4]
 8014836:	18d3      	adds	r3, r2, r3
 8014838:	3304      	adds	r3, #4
 801483a:	e00d      	b.n	8014858 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801483c:	230e      	movs	r3, #14
 801483e:	18fb      	adds	r3, r7, r3
 8014840:	781b      	ldrb	r3, [r3, #0]
 8014842:	227f      	movs	r2, #127	@ 0x7f
 8014844:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014846:	0013      	movs	r3, r2
 8014848:	009b      	lsls	r3, r3, #2
 801484a:	189b      	adds	r3, r3, r2
 801484c:	009b      	lsls	r3, r3, #2
 801484e:	3351      	adds	r3, #81	@ 0x51
 8014850:	33ff      	adds	r3, #255	@ 0xff
 8014852:	687a      	ldr	r2, [r7, #4]
 8014854:	18d3      	adds	r3, r2, r3
 8014856:	3304      	adds	r3, #4
 8014858:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801485a:	68bb      	ldr	r3, [r7, #8]
 801485c:	2200      	movs	r2, #0
 801485e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014860:	68b9      	ldr	r1, [r7, #8]
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2202      	movs	r2, #2
 8014866:	0018      	movs	r0, r3
 8014868:	f000 fcab 	bl	80151c2 <USBD_CtlSendData>
              break;
 801486c:	e080      	b.n	8014970 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801486e:	220e      	movs	r2, #14
 8014870:	18bb      	adds	r3, r7, r2
 8014872:	781b      	ldrb	r3, [r3, #0]
 8014874:	b25b      	sxtb	r3, r3
 8014876:	2b00      	cmp	r3, #0
 8014878:	da14      	bge.n	80148a4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801487a:	18bb      	adds	r3, r7, r2
 801487c:	781b      	ldrb	r3, [r3, #0]
 801487e:	220f      	movs	r2, #15
 8014880:	401a      	ands	r2, r3
 8014882:	6879      	ldr	r1, [r7, #4]
 8014884:	0013      	movs	r3, r2
 8014886:	009b      	lsls	r3, r3, #2
 8014888:	189b      	adds	r3, r3, r2
 801488a:	009b      	lsls	r3, r3, #2
 801488c:	18cb      	adds	r3, r1, r3
 801488e:	3318      	adds	r3, #24
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d11e      	bne.n	80148d4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8014896:	683a      	ldr	r2, [r7, #0]
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	0011      	movs	r1, r2
 801489c:	0018      	movs	r0, r3
 801489e:	f000 fc12 	bl	80150c6 <USBD_CtlError>
                  break;
 80148a2:	e065      	b.n	8014970 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80148a4:	230e      	movs	r3, #14
 80148a6:	18fb      	adds	r3, r7, r3
 80148a8:	781b      	ldrb	r3, [r3, #0]
 80148aa:	220f      	movs	r2, #15
 80148ac:	401a      	ands	r2, r3
 80148ae:	6878      	ldr	r0, [r7, #4]
 80148b0:	23ac      	movs	r3, #172	@ 0xac
 80148b2:	0059      	lsls	r1, r3, #1
 80148b4:	0013      	movs	r3, r2
 80148b6:	009b      	lsls	r3, r3, #2
 80148b8:	189b      	adds	r3, r3, r2
 80148ba:	009b      	lsls	r3, r3, #2
 80148bc:	18c3      	adds	r3, r0, r3
 80148be:	185b      	adds	r3, r3, r1
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d106      	bne.n	80148d4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80148c6:	683a      	ldr	r2, [r7, #0]
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	0011      	movs	r1, r2
 80148cc:	0018      	movs	r0, r3
 80148ce:	f000 fbfa 	bl	80150c6 <USBD_CtlError>
                  break;
 80148d2:	e04d      	b.n	8014970 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80148d4:	220e      	movs	r2, #14
 80148d6:	18bb      	adds	r3, r7, r2
 80148d8:	781b      	ldrb	r3, [r3, #0]
 80148da:	b25b      	sxtb	r3, r3
 80148dc:	2b00      	cmp	r3, #0
 80148de:	da0c      	bge.n	80148fa <USBD_StdEPReq+0x2c8>
 80148e0:	18bb      	adds	r3, r7, r2
 80148e2:	781b      	ldrb	r3, [r3, #0]
 80148e4:	227f      	movs	r2, #127	@ 0x7f
 80148e6:	401a      	ands	r2, r3
 80148e8:	0013      	movs	r3, r2
 80148ea:	009b      	lsls	r3, r3, #2
 80148ec:	189b      	adds	r3, r3, r2
 80148ee:	009b      	lsls	r3, r3, #2
 80148f0:	3310      	adds	r3, #16
 80148f2:	687a      	ldr	r2, [r7, #4]
 80148f4:	18d3      	adds	r3, r2, r3
 80148f6:	3304      	adds	r3, #4
 80148f8:	e00d      	b.n	8014916 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80148fa:	230e      	movs	r3, #14
 80148fc:	18fb      	adds	r3, r7, r3
 80148fe:	781b      	ldrb	r3, [r3, #0]
 8014900:	227f      	movs	r2, #127	@ 0x7f
 8014902:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014904:	0013      	movs	r3, r2
 8014906:	009b      	lsls	r3, r3, #2
 8014908:	189b      	adds	r3, r3, r2
 801490a:	009b      	lsls	r3, r3, #2
 801490c:	3351      	adds	r3, #81	@ 0x51
 801490e:	33ff      	adds	r3, #255	@ 0xff
 8014910:	687a      	ldr	r2, [r7, #4]
 8014912:	18d3      	adds	r3, r2, r3
 8014914:	3304      	adds	r3, #4
 8014916:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014918:	220e      	movs	r2, #14
 801491a:	18bb      	adds	r3, r7, r2
 801491c:	781b      	ldrb	r3, [r3, #0]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d003      	beq.n	801492a <USBD_StdEPReq+0x2f8>
 8014922:	18bb      	adds	r3, r7, r2
 8014924:	781b      	ldrb	r3, [r3, #0]
 8014926:	2b80      	cmp	r3, #128	@ 0x80
 8014928:	d103      	bne.n	8014932 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801492a:	68bb      	ldr	r3, [r7, #8]
 801492c:	2200      	movs	r2, #0
 801492e:	601a      	str	r2, [r3, #0]
 8014930:	e010      	b.n	8014954 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8014932:	230e      	movs	r3, #14
 8014934:	18fb      	adds	r3, r7, r3
 8014936:	781a      	ldrb	r2, [r3, #0]
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	0011      	movs	r1, r2
 801493c:	0018      	movs	r0, r3
 801493e:	f001 f8a8 	bl	8015a92 <USBD_LL_IsStallEP>
 8014942:	1e03      	subs	r3, r0, #0
 8014944:	d003      	beq.n	801494e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8014946:	68bb      	ldr	r3, [r7, #8]
 8014948:	2201      	movs	r2, #1
 801494a:	601a      	str	r2, [r3, #0]
 801494c:	e002      	b.n	8014954 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	2200      	movs	r2, #0
 8014952:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014954:	68b9      	ldr	r1, [r7, #8]
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	2202      	movs	r2, #2
 801495a:	0018      	movs	r0, r3
 801495c:	f000 fc31 	bl	80151c2 <USBD_CtlSendData>
              break;
 8014960:	e006      	b.n	8014970 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8014962:	683a      	ldr	r2, [r7, #0]
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	0011      	movs	r1, r2
 8014968:	0018      	movs	r0, r3
 801496a:	f000 fbac 	bl	80150c6 <USBD_CtlError>
              break;
 801496e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8014970:	e006      	b.n	8014980 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8014972:	683a      	ldr	r2, [r7, #0]
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	0011      	movs	r1, r2
 8014978:	0018      	movs	r0, r3
 801497a:	f000 fba4 	bl	80150c6 <USBD_CtlError>
          break;
 801497e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014980:	e006      	b.n	8014990 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8014982:	683a      	ldr	r2, [r7, #0]
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	0011      	movs	r1, r2
 8014988:	0018      	movs	r0, r3
 801498a:	f000 fb9c 	bl	80150c6 <USBD_CtlError>
      break;
 801498e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8014990:	230f      	movs	r3, #15
 8014992:	18fb      	adds	r3, r7, r3
 8014994:	781b      	ldrb	r3, [r3, #0]
}
 8014996:	0018      	movs	r0, r3
 8014998:	46bd      	mov	sp, r7
 801499a:	b004      	add	sp, #16
 801499c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080149a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b084      	sub	sp, #16
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
 80149a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80149aa:	2308      	movs	r3, #8
 80149ac:	18fb      	adds	r3, r7, r3
 80149ae:	2200      	movs	r2, #0
 80149b0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80149b2:	2300      	movs	r3, #0
 80149b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80149b6:	230b      	movs	r3, #11
 80149b8:	18fb      	adds	r3, r7, r3
 80149ba:	2200      	movs	r2, #0
 80149bc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80149be:	683b      	ldr	r3, [r7, #0]
 80149c0:	885b      	ldrh	r3, [r3, #2]
 80149c2:	0a1b      	lsrs	r3, r3, #8
 80149c4:	b29b      	uxth	r3, r3
 80149c6:	2b07      	cmp	r3, #7
 80149c8:	d900      	bls.n	80149cc <USBD_GetDescriptor+0x2c>
 80149ca:	e159      	b.n	8014c80 <USBD_GetDescriptor+0x2e0>
 80149cc:	009a      	lsls	r2, r3, #2
 80149ce:	4bcb      	ldr	r3, [pc, #812]	@ (8014cfc <USBD_GetDescriptor+0x35c>)
 80149d0:	18d3      	adds	r3, r2, r3
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80149d6:	687a      	ldr	r2, [r7, #4]
 80149d8:	23ac      	movs	r3, #172	@ 0xac
 80149da:	009b      	lsls	r3, r3, #2
 80149dc:	58d3      	ldr	r3, [r2, r3]
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	687a      	ldr	r2, [r7, #4]
 80149e2:	7c12      	ldrb	r2, [r2, #16]
 80149e4:	2108      	movs	r1, #8
 80149e6:	1879      	adds	r1, r7, r1
 80149e8:	0010      	movs	r0, r2
 80149ea:	4798      	blx	r3
 80149ec:	0003      	movs	r3, r0
 80149ee:	60fb      	str	r3, [r7, #12]
      break;
 80149f0:	e153      	b.n	8014c9a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	7c1b      	ldrb	r3, [r3, #16]
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d10f      	bne.n	8014a1a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80149fa:	687a      	ldr	r2, [r7, #4]
 80149fc:	23ad      	movs	r3, #173	@ 0xad
 80149fe:	009b      	lsls	r3, r3, #2
 8014a00:	58d3      	ldr	r3, [r2, r3]
 8014a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a04:	2208      	movs	r2, #8
 8014a06:	18ba      	adds	r2, r7, r2
 8014a08:	0010      	movs	r0, r2
 8014a0a:	4798      	blx	r3
 8014a0c:	0003      	movs	r3, r0
 8014a0e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	3301      	adds	r3, #1
 8014a14:	2202      	movs	r2, #2
 8014a16:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014a18:	e13f      	b.n	8014c9a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014a1a:	687a      	ldr	r2, [r7, #4]
 8014a1c:	23ad      	movs	r3, #173	@ 0xad
 8014a1e:	009b      	lsls	r3, r3, #2
 8014a20:	58d3      	ldr	r3, [r2, r3]
 8014a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a24:	2208      	movs	r2, #8
 8014a26:	18ba      	adds	r2, r7, r2
 8014a28:	0010      	movs	r0, r2
 8014a2a:	4798      	blx	r3
 8014a2c:	0003      	movs	r3, r0
 8014a2e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	3301      	adds	r3, #1
 8014a34:	2202      	movs	r2, #2
 8014a36:	701a      	strb	r2, [r3, #0]
      break;
 8014a38:	e12f      	b.n	8014c9a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014a3a:	683b      	ldr	r3, [r7, #0]
 8014a3c:	885b      	ldrh	r3, [r3, #2]
 8014a3e:	b2db      	uxtb	r3, r3
 8014a40:	2b05      	cmp	r3, #5
 8014a42:	d900      	bls.n	8014a46 <USBD_GetDescriptor+0xa6>
 8014a44:	e0d0      	b.n	8014be8 <USBD_GetDescriptor+0x248>
 8014a46:	009a      	lsls	r2, r3, #2
 8014a48:	4bad      	ldr	r3, [pc, #692]	@ (8014d00 <USBD_GetDescriptor+0x360>)
 8014a4a:	18d3      	adds	r3, r2, r3
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014a50:	687a      	ldr	r2, [r7, #4]
 8014a52:	23ac      	movs	r3, #172	@ 0xac
 8014a54:	009b      	lsls	r3, r3, #2
 8014a56:	58d3      	ldr	r3, [r2, r3]
 8014a58:	685b      	ldr	r3, [r3, #4]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d00d      	beq.n	8014a7a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014a5e:	687a      	ldr	r2, [r7, #4]
 8014a60:	23ac      	movs	r3, #172	@ 0xac
 8014a62:	009b      	lsls	r3, r3, #2
 8014a64:	58d3      	ldr	r3, [r2, r3]
 8014a66:	685b      	ldr	r3, [r3, #4]
 8014a68:	687a      	ldr	r2, [r7, #4]
 8014a6a:	7c12      	ldrb	r2, [r2, #16]
 8014a6c:	2108      	movs	r1, #8
 8014a6e:	1879      	adds	r1, r7, r1
 8014a70:	0010      	movs	r0, r2
 8014a72:	4798      	blx	r3
 8014a74:	0003      	movs	r3, r0
 8014a76:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a78:	e0c3      	b.n	8014c02 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014a7a:	683a      	ldr	r2, [r7, #0]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	0011      	movs	r1, r2
 8014a80:	0018      	movs	r0, r3
 8014a82:	f000 fb20 	bl	80150c6 <USBD_CtlError>
            err++;
 8014a86:	210b      	movs	r1, #11
 8014a88:	187b      	adds	r3, r7, r1
 8014a8a:	781a      	ldrb	r2, [r3, #0]
 8014a8c:	187b      	adds	r3, r7, r1
 8014a8e:	3201      	adds	r2, #1
 8014a90:	701a      	strb	r2, [r3, #0]
          break;
 8014a92:	e0b6      	b.n	8014c02 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014a94:	687a      	ldr	r2, [r7, #4]
 8014a96:	23ac      	movs	r3, #172	@ 0xac
 8014a98:	009b      	lsls	r3, r3, #2
 8014a9a:	58d3      	ldr	r3, [r2, r3]
 8014a9c:	689b      	ldr	r3, [r3, #8]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d00d      	beq.n	8014abe <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014aa2:	687a      	ldr	r2, [r7, #4]
 8014aa4:	23ac      	movs	r3, #172	@ 0xac
 8014aa6:	009b      	lsls	r3, r3, #2
 8014aa8:	58d3      	ldr	r3, [r2, r3]
 8014aaa:	689b      	ldr	r3, [r3, #8]
 8014aac:	687a      	ldr	r2, [r7, #4]
 8014aae:	7c12      	ldrb	r2, [r2, #16]
 8014ab0:	2108      	movs	r1, #8
 8014ab2:	1879      	adds	r1, r7, r1
 8014ab4:	0010      	movs	r0, r2
 8014ab6:	4798      	blx	r3
 8014ab8:	0003      	movs	r3, r0
 8014aba:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014abc:	e0a1      	b.n	8014c02 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014abe:	683a      	ldr	r2, [r7, #0]
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	0011      	movs	r1, r2
 8014ac4:	0018      	movs	r0, r3
 8014ac6:	f000 fafe 	bl	80150c6 <USBD_CtlError>
            err++;
 8014aca:	210b      	movs	r1, #11
 8014acc:	187b      	adds	r3, r7, r1
 8014ace:	781a      	ldrb	r2, [r3, #0]
 8014ad0:	187b      	adds	r3, r7, r1
 8014ad2:	3201      	adds	r2, #1
 8014ad4:	701a      	strb	r2, [r3, #0]
          break;
 8014ad6:	e094      	b.n	8014c02 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014ad8:	687a      	ldr	r2, [r7, #4]
 8014ada:	23ac      	movs	r3, #172	@ 0xac
 8014adc:	009b      	lsls	r3, r3, #2
 8014ade:	58d3      	ldr	r3, [r2, r3]
 8014ae0:	68db      	ldr	r3, [r3, #12]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d00d      	beq.n	8014b02 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014ae6:	687a      	ldr	r2, [r7, #4]
 8014ae8:	23ac      	movs	r3, #172	@ 0xac
 8014aea:	009b      	lsls	r3, r3, #2
 8014aec:	58d3      	ldr	r3, [r2, r3]
 8014aee:	68db      	ldr	r3, [r3, #12]
 8014af0:	687a      	ldr	r2, [r7, #4]
 8014af2:	7c12      	ldrb	r2, [r2, #16]
 8014af4:	2108      	movs	r1, #8
 8014af6:	1879      	adds	r1, r7, r1
 8014af8:	0010      	movs	r0, r2
 8014afa:	4798      	blx	r3
 8014afc:	0003      	movs	r3, r0
 8014afe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b00:	e07f      	b.n	8014c02 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014b02:	683a      	ldr	r2, [r7, #0]
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	0011      	movs	r1, r2
 8014b08:	0018      	movs	r0, r3
 8014b0a:	f000 fadc 	bl	80150c6 <USBD_CtlError>
            err++;
 8014b0e:	210b      	movs	r1, #11
 8014b10:	187b      	adds	r3, r7, r1
 8014b12:	781a      	ldrb	r2, [r3, #0]
 8014b14:	187b      	adds	r3, r7, r1
 8014b16:	3201      	adds	r2, #1
 8014b18:	701a      	strb	r2, [r3, #0]
          break;
 8014b1a:	e072      	b.n	8014c02 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014b1c:	687a      	ldr	r2, [r7, #4]
 8014b1e:	23ac      	movs	r3, #172	@ 0xac
 8014b20:	009b      	lsls	r3, r3, #2
 8014b22:	58d3      	ldr	r3, [r2, r3]
 8014b24:	691b      	ldr	r3, [r3, #16]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d00d      	beq.n	8014b46 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014b2a:	687a      	ldr	r2, [r7, #4]
 8014b2c:	23ac      	movs	r3, #172	@ 0xac
 8014b2e:	009b      	lsls	r3, r3, #2
 8014b30:	58d3      	ldr	r3, [r2, r3]
 8014b32:	691b      	ldr	r3, [r3, #16]
 8014b34:	687a      	ldr	r2, [r7, #4]
 8014b36:	7c12      	ldrb	r2, [r2, #16]
 8014b38:	2108      	movs	r1, #8
 8014b3a:	1879      	adds	r1, r7, r1
 8014b3c:	0010      	movs	r0, r2
 8014b3e:	4798      	blx	r3
 8014b40:	0003      	movs	r3, r0
 8014b42:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b44:	e05d      	b.n	8014c02 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014b46:	683a      	ldr	r2, [r7, #0]
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	0011      	movs	r1, r2
 8014b4c:	0018      	movs	r0, r3
 8014b4e:	f000 faba 	bl	80150c6 <USBD_CtlError>
            err++;
 8014b52:	210b      	movs	r1, #11
 8014b54:	187b      	adds	r3, r7, r1
 8014b56:	781a      	ldrb	r2, [r3, #0]
 8014b58:	187b      	adds	r3, r7, r1
 8014b5a:	3201      	adds	r2, #1
 8014b5c:	701a      	strb	r2, [r3, #0]
          break;
 8014b5e:	e050      	b.n	8014c02 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014b60:	687a      	ldr	r2, [r7, #4]
 8014b62:	23ac      	movs	r3, #172	@ 0xac
 8014b64:	009b      	lsls	r3, r3, #2
 8014b66:	58d3      	ldr	r3, [r2, r3]
 8014b68:	695b      	ldr	r3, [r3, #20]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d00d      	beq.n	8014b8a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014b6e:	687a      	ldr	r2, [r7, #4]
 8014b70:	23ac      	movs	r3, #172	@ 0xac
 8014b72:	009b      	lsls	r3, r3, #2
 8014b74:	58d3      	ldr	r3, [r2, r3]
 8014b76:	695b      	ldr	r3, [r3, #20]
 8014b78:	687a      	ldr	r2, [r7, #4]
 8014b7a:	7c12      	ldrb	r2, [r2, #16]
 8014b7c:	2108      	movs	r1, #8
 8014b7e:	1879      	adds	r1, r7, r1
 8014b80:	0010      	movs	r0, r2
 8014b82:	4798      	blx	r3
 8014b84:	0003      	movs	r3, r0
 8014b86:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b88:	e03b      	b.n	8014c02 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014b8a:	683a      	ldr	r2, [r7, #0]
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	0011      	movs	r1, r2
 8014b90:	0018      	movs	r0, r3
 8014b92:	f000 fa98 	bl	80150c6 <USBD_CtlError>
            err++;
 8014b96:	210b      	movs	r1, #11
 8014b98:	187b      	adds	r3, r7, r1
 8014b9a:	781a      	ldrb	r2, [r3, #0]
 8014b9c:	187b      	adds	r3, r7, r1
 8014b9e:	3201      	adds	r2, #1
 8014ba0:	701a      	strb	r2, [r3, #0]
          break;
 8014ba2:	e02e      	b.n	8014c02 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014ba4:	687a      	ldr	r2, [r7, #4]
 8014ba6:	23ac      	movs	r3, #172	@ 0xac
 8014ba8:	009b      	lsls	r3, r3, #2
 8014baa:	58d3      	ldr	r3, [r2, r3]
 8014bac:	699b      	ldr	r3, [r3, #24]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d00d      	beq.n	8014bce <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014bb2:	687a      	ldr	r2, [r7, #4]
 8014bb4:	23ac      	movs	r3, #172	@ 0xac
 8014bb6:	009b      	lsls	r3, r3, #2
 8014bb8:	58d3      	ldr	r3, [r2, r3]
 8014bba:	699b      	ldr	r3, [r3, #24]
 8014bbc:	687a      	ldr	r2, [r7, #4]
 8014bbe:	7c12      	ldrb	r2, [r2, #16]
 8014bc0:	2108      	movs	r1, #8
 8014bc2:	1879      	adds	r1, r7, r1
 8014bc4:	0010      	movs	r0, r2
 8014bc6:	4798      	blx	r3
 8014bc8:	0003      	movs	r3, r0
 8014bca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014bcc:	e019      	b.n	8014c02 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014bce:	683a      	ldr	r2, [r7, #0]
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	0011      	movs	r1, r2
 8014bd4:	0018      	movs	r0, r3
 8014bd6:	f000 fa76 	bl	80150c6 <USBD_CtlError>
            err++;
 8014bda:	210b      	movs	r1, #11
 8014bdc:	187b      	adds	r3, r7, r1
 8014bde:	781a      	ldrb	r2, [r3, #0]
 8014be0:	187b      	adds	r3, r7, r1
 8014be2:	3201      	adds	r2, #1
 8014be4:	701a      	strb	r2, [r3, #0]
          break;
 8014be6:	e00c      	b.n	8014c02 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8014be8:	683a      	ldr	r2, [r7, #0]
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	0011      	movs	r1, r2
 8014bee:	0018      	movs	r0, r3
 8014bf0:	f000 fa69 	bl	80150c6 <USBD_CtlError>
          err++;
 8014bf4:	210b      	movs	r1, #11
 8014bf6:	187b      	adds	r3, r7, r1
 8014bf8:	781a      	ldrb	r2, [r3, #0]
 8014bfa:	187b      	adds	r3, r7, r1
 8014bfc:	3201      	adds	r2, #1
 8014bfe:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8014c00:	e04b      	b.n	8014c9a <USBD_GetDescriptor+0x2fa>
 8014c02:	e04a      	b.n	8014c9a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	7c1b      	ldrb	r3, [r3, #16]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d10b      	bne.n	8014c24 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014c0c:	687a      	ldr	r2, [r7, #4]
 8014c0e:	23ad      	movs	r3, #173	@ 0xad
 8014c10:	009b      	lsls	r3, r3, #2
 8014c12:	58d3      	ldr	r3, [r2, r3]
 8014c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c16:	2208      	movs	r2, #8
 8014c18:	18ba      	adds	r2, r7, r2
 8014c1a:	0010      	movs	r0, r2
 8014c1c:	4798      	blx	r3
 8014c1e:	0003      	movs	r3, r0
 8014c20:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014c22:	e03a      	b.n	8014c9a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8014c24:	683a      	ldr	r2, [r7, #0]
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	0011      	movs	r1, r2
 8014c2a:	0018      	movs	r0, r3
 8014c2c:	f000 fa4b 	bl	80150c6 <USBD_CtlError>
        err++;
 8014c30:	210b      	movs	r1, #11
 8014c32:	187b      	adds	r3, r7, r1
 8014c34:	781a      	ldrb	r2, [r3, #0]
 8014c36:	187b      	adds	r3, r7, r1
 8014c38:	3201      	adds	r2, #1
 8014c3a:	701a      	strb	r2, [r3, #0]
      break;
 8014c3c:	e02d      	b.n	8014c9a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	7c1b      	ldrb	r3, [r3, #16]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d10f      	bne.n	8014c66 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014c46:	687a      	ldr	r2, [r7, #4]
 8014c48:	23ad      	movs	r3, #173	@ 0xad
 8014c4a:	009b      	lsls	r3, r3, #2
 8014c4c:	58d3      	ldr	r3, [r2, r3]
 8014c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c50:	2208      	movs	r2, #8
 8014c52:	18ba      	adds	r2, r7, r2
 8014c54:	0010      	movs	r0, r2
 8014c56:	4798      	blx	r3
 8014c58:	0003      	movs	r3, r0
 8014c5a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	3301      	adds	r3, #1
 8014c60:	2207      	movs	r2, #7
 8014c62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014c64:	e019      	b.n	8014c9a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8014c66:	683a      	ldr	r2, [r7, #0]
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	0011      	movs	r1, r2
 8014c6c:	0018      	movs	r0, r3
 8014c6e:	f000 fa2a 	bl	80150c6 <USBD_CtlError>
        err++;
 8014c72:	210b      	movs	r1, #11
 8014c74:	187b      	adds	r3, r7, r1
 8014c76:	781a      	ldrb	r2, [r3, #0]
 8014c78:	187b      	adds	r3, r7, r1
 8014c7a:	3201      	adds	r2, #1
 8014c7c:	701a      	strb	r2, [r3, #0]
      break;
 8014c7e:	e00c      	b.n	8014c9a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8014c80:	683a      	ldr	r2, [r7, #0]
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	0011      	movs	r1, r2
 8014c86:	0018      	movs	r0, r3
 8014c88:	f000 fa1d 	bl	80150c6 <USBD_CtlError>
      err++;
 8014c8c:	210b      	movs	r1, #11
 8014c8e:	187b      	adds	r3, r7, r1
 8014c90:	781a      	ldrb	r2, [r3, #0]
 8014c92:	187b      	adds	r3, r7, r1
 8014c94:	3201      	adds	r2, #1
 8014c96:	701a      	strb	r2, [r3, #0]
      break;
 8014c98:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8014c9a:	230b      	movs	r3, #11
 8014c9c:	18fb      	adds	r3, r7, r3
 8014c9e:	781b      	ldrb	r3, [r3, #0]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d127      	bne.n	8014cf4 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8014ca4:	2108      	movs	r1, #8
 8014ca6:	187b      	adds	r3, r7, r1
 8014ca8:	881b      	ldrh	r3, [r3, #0]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d019      	beq.n	8014ce2 <USBD_GetDescriptor+0x342>
 8014cae:	683b      	ldr	r3, [r7, #0]
 8014cb0:	88db      	ldrh	r3, [r3, #6]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d015      	beq.n	8014ce2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8014cb6:	683b      	ldr	r3, [r7, #0]
 8014cb8:	88da      	ldrh	r2, [r3, #6]
 8014cba:	187b      	adds	r3, r7, r1
 8014cbc:	881b      	ldrh	r3, [r3, #0]
 8014cbe:	1c18      	adds	r0, r3, #0
 8014cc0:	1c11      	adds	r1, r2, #0
 8014cc2:	b28a      	uxth	r2, r1
 8014cc4:	b283      	uxth	r3, r0
 8014cc6:	429a      	cmp	r2, r3
 8014cc8:	d900      	bls.n	8014ccc <USBD_GetDescriptor+0x32c>
 8014cca:	1c01      	adds	r1, r0, #0
 8014ccc:	b28a      	uxth	r2, r1
 8014cce:	2108      	movs	r1, #8
 8014cd0:	187b      	adds	r3, r7, r1
 8014cd2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014cd4:	187b      	adds	r3, r7, r1
 8014cd6:	881a      	ldrh	r2, [r3, #0]
 8014cd8:	68f9      	ldr	r1, [r7, #12]
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	0018      	movs	r0, r3
 8014cde:	f000 fa70 	bl	80151c2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8014ce2:	683b      	ldr	r3, [r7, #0]
 8014ce4:	88db      	ldrh	r3, [r3, #6]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d105      	bne.n	8014cf6 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	0018      	movs	r0, r3
 8014cee:	f000 fad2 	bl	8015296 <USBD_CtlSendStatus>
 8014cf2:	e000      	b.n	8014cf6 <USBD_GetDescriptor+0x356>
    return;
 8014cf4:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	b004      	add	sp, #16
 8014cfa:	bd80      	pop	{r7, pc}
 8014cfc:	0801a2a4 	.word	0x0801a2a4
 8014d00:	0801a2c4 	.word	0x0801a2c4

08014d04 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014d04:	b590      	push	{r4, r7, lr}
 8014d06:	b085      	sub	sp, #20
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	6078      	str	r0, [r7, #4]
 8014d0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014d0e:	683b      	ldr	r3, [r7, #0]
 8014d10:	889b      	ldrh	r3, [r3, #4]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d13d      	bne.n	8014d92 <USBD_SetAddress+0x8e>
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	88db      	ldrh	r3, [r3, #6]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d139      	bne.n	8014d92 <USBD_SetAddress+0x8e>
 8014d1e:	683b      	ldr	r3, [r7, #0]
 8014d20:	885b      	ldrh	r3, [r3, #2]
 8014d22:	2b7f      	cmp	r3, #127	@ 0x7f
 8014d24:	d835      	bhi.n	8014d92 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014d26:	683b      	ldr	r3, [r7, #0]
 8014d28:	885b      	ldrh	r3, [r3, #2]
 8014d2a:	b2da      	uxtb	r2, r3
 8014d2c:	230f      	movs	r3, #15
 8014d2e:	18fb      	adds	r3, r7, r3
 8014d30:	217f      	movs	r1, #127	@ 0x7f
 8014d32:	400a      	ands	r2, r1
 8014d34:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d36:	687a      	ldr	r2, [r7, #4]
 8014d38:	23a7      	movs	r3, #167	@ 0xa7
 8014d3a:	009b      	lsls	r3, r3, #2
 8014d3c:	5cd3      	ldrb	r3, [r2, r3]
 8014d3e:	2b03      	cmp	r3, #3
 8014d40:	d106      	bne.n	8014d50 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8014d42:	683a      	ldr	r2, [r7, #0]
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	0011      	movs	r1, r2
 8014d48:	0018      	movs	r0, r3
 8014d4a:	f000 f9bc 	bl	80150c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d4e:	e027      	b.n	8014da0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	240f      	movs	r4, #15
 8014d54:	193a      	adds	r2, r7, r4
 8014d56:	4914      	ldr	r1, [pc, #80]	@ (8014da8 <USBD_SetAddress+0xa4>)
 8014d58:	7812      	ldrb	r2, [r2, #0]
 8014d5a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014d5c:	193b      	adds	r3, r7, r4
 8014d5e:	781a      	ldrb	r2, [r3, #0]
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	0011      	movs	r1, r2
 8014d64:	0018      	movs	r0, r3
 8014d66:	f000 fec5 	bl	8015af4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	0018      	movs	r0, r3
 8014d6e:	f000 fa92 	bl	8015296 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014d72:	193b      	adds	r3, r7, r4
 8014d74:	781b      	ldrb	r3, [r3, #0]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d005      	beq.n	8014d86 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014d7a:	687a      	ldr	r2, [r7, #4]
 8014d7c:	23a7      	movs	r3, #167	@ 0xa7
 8014d7e:	009b      	lsls	r3, r3, #2
 8014d80:	2102      	movs	r1, #2
 8014d82:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d84:	e00c      	b.n	8014da0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014d86:	687a      	ldr	r2, [r7, #4]
 8014d88:	23a7      	movs	r3, #167	@ 0xa7
 8014d8a:	009b      	lsls	r3, r3, #2
 8014d8c:	2101      	movs	r1, #1
 8014d8e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d90:	e006      	b.n	8014da0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014d92:	683a      	ldr	r2, [r7, #0]
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	0011      	movs	r1, r2
 8014d98:	0018      	movs	r0, r3
 8014d9a:	f000 f994 	bl	80150c6 <USBD_CtlError>
  }
}
 8014d9e:	46c0      	nop			@ (mov r8, r8)
 8014da0:	46c0      	nop			@ (mov r8, r8)
 8014da2:	46bd      	mov	sp, r7
 8014da4:	b005      	add	sp, #20
 8014da6:	bd90      	pop	{r4, r7, pc}
 8014da8:	0000029e 	.word	0x0000029e

08014dac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b082      	sub	sp, #8
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
 8014db4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014db6:	683b      	ldr	r3, [r7, #0]
 8014db8:	885b      	ldrh	r3, [r3, #2]
 8014dba:	b2da      	uxtb	r2, r3
 8014dbc:	4b4c      	ldr	r3, [pc, #304]	@ (8014ef0 <USBD_SetConfig+0x144>)
 8014dbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8014ef0 <USBD_SetConfig+0x144>)
 8014dc2:	781b      	ldrb	r3, [r3, #0]
 8014dc4:	2b01      	cmp	r3, #1
 8014dc6:	d906      	bls.n	8014dd6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8014dc8:	683a      	ldr	r2, [r7, #0]
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	0011      	movs	r1, r2
 8014dce:	0018      	movs	r0, r3
 8014dd0:	f000 f979 	bl	80150c6 <USBD_CtlError>
 8014dd4:	e088      	b.n	8014ee8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8014dd6:	687a      	ldr	r2, [r7, #4]
 8014dd8:	23a7      	movs	r3, #167	@ 0xa7
 8014dda:	009b      	lsls	r3, r3, #2
 8014ddc:	5cd3      	ldrb	r3, [r2, r3]
 8014dde:	2b02      	cmp	r3, #2
 8014de0:	d002      	beq.n	8014de8 <USBD_SetConfig+0x3c>
 8014de2:	2b03      	cmp	r3, #3
 8014de4:	d029      	beq.n	8014e3a <USBD_SetConfig+0x8e>
 8014de6:	e071      	b.n	8014ecc <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8014de8:	4b41      	ldr	r3, [pc, #260]	@ (8014ef0 <USBD_SetConfig+0x144>)
 8014dea:	781b      	ldrb	r3, [r3, #0]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d01f      	beq.n	8014e30 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8014df0:	4b3f      	ldr	r3, [pc, #252]	@ (8014ef0 <USBD_SetConfig+0x144>)
 8014df2:	781b      	ldrb	r3, [r3, #0]
 8014df4:	001a      	movs	r2, r3
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014dfa:	687a      	ldr	r2, [r7, #4]
 8014dfc:	23a7      	movs	r3, #167	@ 0xa7
 8014dfe:	009b      	lsls	r3, r3, #2
 8014e00:	2103      	movs	r1, #3
 8014e02:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014e04:	4b3a      	ldr	r3, [pc, #232]	@ (8014ef0 <USBD_SetConfig+0x144>)
 8014e06:	781a      	ldrb	r2, [r3, #0]
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	0011      	movs	r1, r2
 8014e0c:	0018      	movs	r0, r3
 8014e0e:	f7ff f8c5 	bl	8013f9c <USBD_SetClassConfig>
 8014e12:	0003      	movs	r3, r0
 8014e14:	2b02      	cmp	r3, #2
 8014e16:	d106      	bne.n	8014e26 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8014e18:	683a      	ldr	r2, [r7, #0]
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	0011      	movs	r1, r2
 8014e1e:	0018      	movs	r0, r3
 8014e20:	f000 f951 	bl	80150c6 <USBD_CtlError>
            return;
 8014e24:	e060      	b.n	8014ee8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	0018      	movs	r0, r3
 8014e2a:	f000 fa34 	bl	8015296 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014e2e:	e05b      	b.n	8014ee8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	0018      	movs	r0, r3
 8014e34:	f000 fa2f 	bl	8015296 <USBD_CtlSendStatus>
        break;
 8014e38:	e056      	b.n	8014ee8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8014e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8014ef0 <USBD_SetConfig+0x144>)
 8014e3c:	781b      	ldrb	r3, [r3, #0]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d115      	bne.n	8014e6e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014e42:	687a      	ldr	r2, [r7, #4]
 8014e44:	23a7      	movs	r3, #167	@ 0xa7
 8014e46:	009b      	lsls	r3, r3, #2
 8014e48:	2102      	movs	r1, #2
 8014e4a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8014e4c:	4b28      	ldr	r3, [pc, #160]	@ (8014ef0 <USBD_SetConfig+0x144>)
 8014e4e:	781b      	ldrb	r3, [r3, #0]
 8014e50:	001a      	movs	r2, r3
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8014e56:	4b26      	ldr	r3, [pc, #152]	@ (8014ef0 <USBD_SetConfig+0x144>)
 8014e58:	781a      	ldrb	r2, [r3, #0]
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	0011      	movs	r1, r2
 8014e5e:	0018      	movs	r0, r3
 8014e60:	f7ff f8c3 	bl	8013fea <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	0018      	movs	r0, r3
 8014e68:	f000 fa15 	bl	8015296 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014e6c:	e03c      	b.n	8014ee8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8014e6e:	4b20      	ldr	r3, [pc, #128]	@ (8014ef0 <USBD_SetConfig+0x144>)
 8014e70:	781b      	ldrb	r3, [r3, #0]
 8014e72:	001a      	movs	r2, r3
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	685b      	ldr	r3, [r3, #4]
 8014e78:	429a      	cmp	r2, r3
 8014e7a:	d022      	beq.n	8014ec2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	685b      	ldr	r3, [r3, #4]
 8014e80:	b2da      	uxtb	r2, r3
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	0011      	movs	r1, r2
 8014e86:	0018      	movs	r0, r3
 8014e88:	f7ff f8af 	bl	8013fea <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8014e8c:	4b18      	ldr	r3, [pc, #96]	@ (8014ef0 <USBD_SetConfig+0x144>)
 8014e8e:	781b      	ldrb	r3, [r3, #0]
 8014e90:	001a      	movs	r2, r3
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014e96:	4b16      	ldr	r3, [pc, #88]	@ (8014ef0 <USBD_SetConfig+0x144>)
 8014e98:	781a      	ldrb	r2, [r3, #0]
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	0011      	movs	r1, r2
 8014e9e:	0018      	movs	r0, r3
 8014ea0:	f7ff f87c 	bl	8013f9c <USBD_SetClassConfig>
 8014ea4:	0003      	movs	r3, r0
 8014ea6:	2b02      	cmp	r3, #2
 8014ea8:	d106      	bne.n	8014eb8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8014eaa:	683a      	ldr	r2, [r7, #0]
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	0011      	movs	r1, r2
 8014eb0:	0018      	movs	r0, r3
 8014eb2:	f000 f908 	bl	80150c6 <USBD_CtlError>
            return;
 8014eb6:	e017      	b.n	8014ee8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	0018      	movs	r0, r3
 8014ebc:	f000 f9eb 	bl	8015296 <USBD_CtlSendStatus>
        break;
 8014ec0:	e012      	b.n	8014ee8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	0018      	movs	r0, r3
 8014ec6:	f000 f9e6 	bl	8015296 <USBD_CtlSendStatus>
        break;
 8014eca:	e00d      	b.n	8014ee8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8014ecc:	683a      	ldr	r2, [r7, #0]
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	0011      	movs	r1, r2
 8014ed2:	0018      	movs	r0, r3
 8014ed4:	f000 f8f7 	bl	80150c6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8014ed8:	4b05      	ldr	r3, [pc, #20]	@ (8014ef0 <USBD_SetConfig+0x144>)
 8014eda:	781a      	ldrb	r2, [r3, #0]
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	0011      	movs	r1, r2
 8014ee0:	0018      	movs	r0, r3
 8014ee2:	f7ff f882 	bl	8013fea <USBD_ClrClassConfig>
        break;
 8014ee6:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	b002      	add	sp, #8
 8014eec:	bd80      	pop	{r7, pc}
 8014eee:	46c0      	nop			@ (mov r8, r8)
 8014ef0:	20003088 	.word	0x20003088

08014ef4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b082      	sub	sp, #8
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014efe:	683b      	ldr	r3, [r7, #0]
 8014f00:	88db      	ldrh	r3, [r3, #6]
 8014f02:	2b01      	cmp	r3, #1
 8014f04:	d006      	beq.n	8014f14 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8014f06:	683a      	ldr	r2, [r7, #0]
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	0011      	movs	r1, r2
 8014f0c:	0018      	movs	r0, r3
 8014f0e:	f000 f8da 	bl	80150c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014f12:	e026      	b.n	8014f62 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8014f14:	687a      	ldr	r2, [r7, #4]
 8014f16:	23a7      	movs	r3, #167	@ 0xa7
 8014f18:	009b      	lsls	r3, r3, #2
 8014f1a:	5cd3      	ldrb	r3, [r2, r3]
 8014f1c:	2b02      	cmp	r3, #2
 8014f1e:	dc02      	bgt.n	8014f26 <USBD_GetConfig+0x32>
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	dc03      	bgt.n	8014f2c <USBD_GetConfig+0x38>
 8014f24:	e016      	b.n	8014f54 <USBD_GetConfig+0x60>
 8014f26:	2b03      	cmp	r3, #3
 8014f28:	d00c      	beq.n	8014f44 <USBD_GetConfig+0x50>
 8014f2a:	e013      	b.n	8014f54 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	2200      	movs	r2, #0
 8014f30:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	3308      	adds	r3, #8
 8014f36:	0019      	movs	r1, r3
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2201      	movs	r2, #1
 8014f3c:	0018      	movs	r0, r3
 8014f3e:	f000 f940 	bl	80151c2 <USBD_CtlSendData>
        break;
 8014f42:	e00e      	b.n	8014f62 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	1d19      	adds	r1, r3, #4
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	2201      	movs	r2, #1
 8014f4c:	0018      	movs	r0, r3
 8014f4e:	f000 f938 	bl	80151c2 <USBD_CtlSendData>
        break;
 8014f52:	e006      	b.n	8014f62 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8014f54:	683a      	ldr	r2, [r7, #0]
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	0011      	movs	r1, r2
 8014f5a:	0018      	movs	r0, r3
 8014f5c:	f000 f8b3 	bl	80150c6 <USBD_CtlError>
        break;
 8014f60:	46c0      	nop			@ (mov r8, r8)
}
 8014f62:	46c0      	nop			@ (mov r8, r8)
 8014f64:	46bd      	mov	sp, r7
 8014f66:	b002      	add	sp, #8
 8014f68:	bd80      	pop	{r7, pc}

08014f6a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f6a:	b580      	push	{r7, lr}
 8014f6c:	b082      	sub	sp, #8
 8014f6e:	af00      	add	r7, sp, #0
 8014f70:	6078      	str	r0, [r7, #4]
 8014f72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014f74:	687a      	ldr	r2, [r7, #4]
 8014f76:	23a7      	movs	r3, #167	@ 0xa7
 8014f78:	009b      	lsls	r3, r3, #2
 8014f7a:	5cd3      	ldrb	r3, [r2, r3]
 8014f7c:	3b01      	subs	r3, #1
 8014f7e:	2b02      	cmp	r3, #2
 8014f80:	d822      	bhi.n	8014fc8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014f82:	683b      	ldr	r3, [r7, #0]
 8014f84:	88db      	ldrh	r3, [r3, #6]
 8014f86:	2b02      	cmp	r3, #2
 8014f88:	d006      	beq.n	8014f98 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8014f8a:	683a      	ldr	r2, [r7, #0]
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	0011      	movs	r1, r2
 8014f90:	0018      	movs	r0, r3
 8014f92:	f000 f898 	bl	80150c6 <USBD_CtlError>
        break;
 8014f96:	e01e      	b.n	8014fd6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	2201      	movs	r2, #1
 8014f9c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8014f9e:	687a      	ldr	r2, [r7, #4]
 8014fa0:	23a9      	movs	r3, #169	@ 0xa9
 8014fa2:	009b      	lsls	r3, r3, #2
 8014fa4:	58d3      	ldr	r3, [r2, r3]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d005      	beq.n	8014fb6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	68db      	ldr	r3, [r3, #12]
 8014fae:	2202      	movs	r2, #2
 8014fb0:	431a      	orrs	r2, r3
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	330c      	adds	r3, #12
 8014fba:	0019      	movs	r1, r3
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	2202      	movs	r2, #2
 8014fc0:	0018      	movs	r0, r3
 8014fc2:	f000 f8fe 	bl	80151c2 <USBD_CtlSendData>
      break;
 8014fc6:	e006      	b.n	8014fd6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8014fc8:	683a      	ldr	r2, [r7, #0]
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	0011      	movs	r1, r2
 8014fce:	0018      	movs	r0, r3
 8014fd0:	f000 f879 	bl	80150c6 <USBD_CtlError>
      break;
 8014fd4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8014fd6:	46c0      	nop			@ (mov r8, r8)
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	b002      	add	sp, #8
 8014fdc:	bd80      	pop	{r7, pc}

08014fde <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014fde:	b580      	push	{r7, lr}
 8014fe0:	b082      	sub	sp, #8
 8014fe2:	af00      	add	r7, sp, #0
 8014fe4:	6078      	str	r0, [r7, #4]
 8014fe6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014fe8:	683b      	ldr	r3, [r7, #0]
 8014fea:	885b      	ldrh	r3, [r3, #2]
 8014fec:	2b01      	cmp	r3, #1
 8014fee:	d108      	bne.n	8015002 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8014ff0:	687a      	ldr	r2, [r7, #4]
 8014ff2:	23a9      	movs	r3, #169	@ 0xa9
 8014ff4:	009b      	lsls	r3, r3, #2
 8014ff6:	2101      	movs	r1, #1
 8014ff8:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	0018      	movs	r0, r3
 8014ffe:	f000 f94a 	bl	8015296 <USBD_CtlSendStatus>
  }
}
 8015002:	46c0      	nop			@ (mov r8, r8)
 8015004:	46bd      	mov	sp, r7
 8015006:	b002      	add	sp, #8
 8015008:	bd80      	pop	{r7, pc}

0801500a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801500a:	b580      	push	{r7, lr}
 801500c:	b082      	sub	sp, #8
 801500e:	af00      	add	r7, sp, #0
 8015010:	6078      	str	r0, [r7, #4]
 8015012:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015014:	687a      	ldr	r2, [r7, #4]
 8015016:	23a7      	movs	r3, #167	@ 0xa7
 8015018:	009b      	lsls	r3, r3, #2
 801501a:	5cd3      	ldrb	r3, [r2, r3]
 801501c:	3b01      	subs	r3, #1
 801501e:	2b02      	cmp	r3, #2
 8015020:	d80d      	bhi.n	801503e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015022:	683b      	ldr	r3, [r7, #0]
 8015024:	885b      	ldrh	r3, [r3, #2]
 8015026:	2b01      	cmp	r3, #1
 8015028:	d110      	bne.n	801504c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801502a:	687a      	ldr	r2, [r7, #4]
 801502c:	23a9      	movs	r3, #169	@ 0xa9
 801502e:	009b      	lsls	r3, r3, #2
 8015030:	2100      	movs	r1, #0
 8015032:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	0018      	movs	r0, r3
 8015038:	f000 f92d 	bl	8015296 <USBD_CtlSendStatus>
      }
      break;
 801503c:	e006      	b.n	801504c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801503e:	683a      	ldr	r2, [r7, #0]
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	0011      	movs	r1, r2
 8015044:	0018      	movs	r0, r3
 8015046:	f000 f83e 	bl	80150c6 <USBD_CtlError>
      break;
 801504a:	e000      	b.n	801504e <USBD_ClrFeature+0x44>
      break;
 801504c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801504e:	46c0      	nop			@ (mov r8, r8)
 8015050:	46bd      	mov	sp, r7
 8015052:	b002      	add	sp, #8
 8015054:	bd80      	pop	{r7, pc}

08015056 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015056:	b580      	push	{r7, lr}
 8015058:	b082      	sub	sp, #8
 801505a:	af00      	add	r7, sp, #0
 801505c:	6078      	str	r0, [r7, #4]
 801505e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8015060:	683b      	ldr	r3, [r7, #0]
 8015062:	781a      	ldrb	r2, [r3, #0]
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8015068:	683b      	ldr	r3, [r7, #0]
 801506a:	785a      	ldrb	r2, [r3, #1]
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8015070:	683b      	ldr	r3, [r7, #0]
 8015072:	3302      	adds	r3, #2
 8015074:	781b      	ldrb	r3, [r3, #0]
 8015076:	001a      	movs	r2, r3
 8015078:	683b      	ldr	r3, [r7, #0]
 801507a:	3303      	adds	r3, #3
 801507c:	781b      	ldrb	r3, [r3, #0]
 801507e:	021b      	lsls	r3, r3, #8
 8015080:	b29b      	uxth	r3, r3
 8015082:	18d3      	adds	r3, r2, r3
 8015084:	b29a      	uxth	r2, r3
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801508a:	683b      	ldr	r3, [r7, #0]
 801508c:	3304      	adds	r3, #4
 801508e:	781b      	ldrb	r3, [r3, #0]
 8015090:	001a      	movs	r2, r3
 8015092:	683b      	ldr	r3, [r7, #0]
 8015094:	3305      	adds	r3, #5
 8015096:	781b      	ldrb	r3, [r3, #0]
 8015098:	021b      	lsls	r3, r3, #8
 801509a:	b29b      	uxth	r3, r3
 801509c:	18d3      	adds	r3, r2, r3
 801509e:	b29a      	uxth	r2, r3
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80150a4:	683b      	ldr	r3, [r7, #0]
 80150a6:	3306      	adds	r3, #6
 80150a8:	781b      	ldrb	r3, [r3, #0]
 80150aa:	001a      	movs	r2, r3
 80150ac:	683b      	ldr	r3, [r7, #0]
 80150ae:	3307      	adds	r3, #7
 80150b0:	781b      	ldrb	r3, [r3, #0]
 80150b2:	021b      	lsls	r3, r3, #8
 80150b4:	b29b      	uxth	r3, r3
 80150b6:	18d3      	adds	r3, r2, r3
 80150b8:	b29a      	uxth	r2, r3
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	80da      	strh	r2, [r3, #6]

}
 80150be:	46c0      	nop			@ (mov r8, r8)
 80150c0:	46bd      	mov	sp, r7
 80150c2:	b002      	add	sp, #8
 80150c4:	bd80      	pop	{r7, pc}

080150c6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80150c6:	b580      	push	{r7, lr}
 80150c8:	b082      	sub	sp, #8
 80150ca:	af00      	add	r7, sp, #0
 80150cc:	6078      	str	r0, [r7, #4]
 80150ce:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	2180      	movs	r1, #128	@ 0x80
 80150d4:	0018      	movs	r0, r3
 80150d6:	f000 fc86 	bl	80159e6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	2100      	movs	r1, #0
 80150de:	0018      	movs	r0, r3
 80150e0:	f000 fc81 	bl	80159e6 <USBD_LL_StallEP>
}
 80150e4:	46c0      	nop			@ (mov r8, r8)
 80150e6:	46bd      	mov	sp, r7
 80150e8:	b002      	add	sp, #8
 80150ea:	bd80      	pop	{r7, pc}

080150ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80150ec:	b590      	push	{r4, r7, lr}
 80150ee:	b087      	sub	sp, #28
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	60f8      	str	r0, [r7, #12]
 80150f4:	60b9      	str	r1, [r7, #8]
 80150f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80150f8:	2417      	movs	r4, #23
 80150fa:	193b      	adds	r3, r7, r4
 80150fc:	2200      	movs	r2, #0
 80150fe:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d03c      	beq.n	8015180 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	0018      	movs	r0, r3
 801510a:	f000 f83d 	bl	8015188 <USBD_GetLen>
 801510e:	0003      	movs	r3, r0
 8015110:	3301      	adds	r3, #1
 8015112:	b29b      	uxth	r3, r3
 8015114:	18db      	adds	r3, r3, r3
 8015116:	b29a      	uxth	r2, r3
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801511c:	193b      	adds	r3, r7, r4
 801511e:	781b      	ldrb	r3, [r3, #0]
 8015120:	193a      	adds	r2, r7, r4
 8015122:	1c59      	adds	r1, r3, #1
 8015124:	7011      	strb	r1, [r2, #0]
 8015126:	001a      	movs	r2, r3
 8015128:	68bb      	ldr	r3, [r7, #8]
 801512a:	189b      	adds	r3, r3, r2
 801512c:	687a      	ldr	r2, [r7, #4]
 801512e:	7812      	ldrb	r2, [r2, #0]
 8015130:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8015132:	193b      	adds	r3, r7, r4
 8015134:	781b      	ldrb	r3, [r3, #0]
 8015136:	193a      	adds	r2, r7, r4
 8015138:	1c59      	adds	r1, r3, #1
 801513a:	7011      	strb	r1, [r2, #0]
 801513c:	001a      	movs	r2, r3
 801513e:	68bb      	ldr	r3, [r7, #8]
 8015140:	189b      	adds	r3, r3, r2
 8015142:	2203      	movs	r2, #3
 8015144:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8015146:	e017      	b.n	8015178 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	1c5a      	adds	r2, r3, #1
 801514c:	60fa      	str	r2, [r7, #12]
 801514e:	2417      	movs	r4, #23
 8015150:	193a      	adds	r2, r7, r4
 8015152:	7812      	ldrb	r2, [r2, #0]
 8015154:	1939      	adds	r1, r7, r4
 8015156:	1c50      	adds	r0, r2, #1
 8015158:	7008      	strb	r0, [r1, #0]
 801515a:	0011      	movs	r1, r2
 801515c:	68ba      	ldr	r2, [r7, #8]
 801515e:	1852      	adds	r2, r2, r1
 8015160:	781b      	ldrb	r3, [r3, #0]
 8015162:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8015164:	193b      	adds	r3, r7, r4
 8015166:	781b      	ldrb	r3, [r3, #0]
 8015168:	193a      	adds	r2, r7, r4
 801516a:	1c59      	adds	r1, r3, #1
 801516c:	7011      	strb	r1, [r2, #0]
 801516e:	001a      	movs	r2, r3
 8015170:	68bb      	ldr	r3, [r7, #8]
 8015172:	189b      	adds	r3, r3, r2
 8015174:	2200      	movs	r2, #0
 8015176:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	781b      	ldrb	r3, [r3, #0]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d1e3      	bne.n	8015148 <USBD_GetString+0x5c>
    }
  }
}
 8015180:	46c0      	nop			@ (mov r8, r8)
 8015182:	46bd      	mov	sp, r7
 8015184:	b007      	add	sp, #28
 8015186:	bd90      	pop	{r4, r7, pc}

08015188 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b084      	sub	sp, #16
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015190:	230f      	movs	r3, #15
 8015192:	18fb      	adds	r3, r7, r3
 8015194:	2200      	movs	r2, #0
 8015196:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8015198:	e008      	b.n	80151ac <USBD_GetLen+0x24>
  {
    len++;
 801519a:	210f      	movs	r1, #15
 801519c:	187b      	adds	r3, r7, r1
 801519e:	781a      	ldrb	r2, [r3, #0]
 80151a0:	187b      	adds	r3, r7, r1
 80151a2:	3201      	adds	r2, #1
 80151a4:	701a      	strb	r2, [r3, #0]
    buf++;
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	3301      	adds	r3, #1
 80151aa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	781b      	ldrb	r3, [r3, #0]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d1f2      	bne.n	801519a <USBD_GetLen+0x12>
  }

  return len;
 80151b4:	230f      	movs	r3, #15
 80151b6:	18fb      	adds	r3, r7, r3
 80151b8:	781b      	ldrb	r3, [r3, #0]
}
 80151ba:	0018      	movs	r0, r3
 80151bc:	46bd      	mov	sp, r7
 80151be:	b004      	add	sp, #16
 80151c0:	bd80      	pop	{r7, pc}

080151c2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80151c2:	b580      	push	{r7, lr}
 80151c4:	b084      	sub	sp, #16
 80151c6:	af00      	add	r7, sp, #0
 80151c8:	60f8      	str	r0, [r7, #12]
 80151ca:	60b9      	str	r1, [r7, #8]
 80151cc:	1dbb      	adds	r3, r7, #6
 80151ce:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80151d0:	68fa      	ldr	r2, [r7, #12]
 80151d2:	23a5      	movs	r3, #165	@ 0xa5
 80151d4:	009b      	lsls	r3, r3, #2
 80151d6:	2102      	movs	r1, #2
 80151d8:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80151da:	1dbb      	adds	r3, r7, #6
 80151dc:	881a      	ldrh	r2, [r3, #0]
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80151e2:	1dbb      	adds	r3, r7, #6
 80151e4:	881a      	ldrh	r2, [r3, #0]
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80151ea:	1dbb      	adds	r3, r7, #6
 80151ec:	881b      	ldrh	r3, [r3, #0]
 80151ee:	68ba      	ldr	r2, [r7, #8]
 80151f0:	68f8      	ldr	r0, [r7, #12]
 80151f2:	2100      	movs	r1, #0
 80151f4:	f000 fca9 	bl	8015b4a <USBD_LL_Transmit>

  return USBD_OK;
 80151f8:	2300      	movs	r3, #0
}
 80151fa:	0018      	movs	r0, r3
 80151fc:	46bd      	mov	sp, r7
 80151fe:	b004      	add	sp, #16
 8015200:	bd80      	pop	{r7, pc}

08015202 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8015202:	b580      	push	{r7, lr}
 8015204:	b084      	sub	sp, #16
 8015206:	af00      	add	r7, sp, #0
 8015208:	60f8      	str	r0, [r7, #12]
 801520a:	60b9      	str	r1, [r7, #8]
 801520c:	1dbb      	adds	r3, r7, #6
 801520e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015210:	1dbb      	adds	r3, r7, #6
 8015212:	881b      	ldrh	r3, [r3, #0]
 8015214:	68ba      	ldr	r2, [r7, #8]
 8015216:	68f8      	ldr	r0, [r7, #12]
 8015218:	2100      	movs	r1, #0
 801521a:	f000 fc96 	bl	8015b4a <USBD_LL_Transmit>

  return USBD_OK;
 801521e:	2300      	movs	r3, #0
}
 8015220:	0018      	movs	r0, r3
 8015222:	46bd      	mov	sp, r7
 8015224:	b004      	add	sp, #16
 8015226:	bd80      	pop	{r7, pc}

08015228 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b084      	sub	sp, #16
 801522c:	af00      	add	r7, sp, #0
 801522e:	60f8      	str	r0, [r7, #12]
 8015230:	60b9      	str	r1, [r7, #8]
 8015232:	1dbb      	adds	r3, r7, #6
 8015234:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015236:	68fa      	ldr	r2, [r7, #12]
 8015238:	23a5      	movs	r3, #165	@ 0xa5
 801523a:	009b      	lsls	r3, r3, #2
 801523c:	2103      	movs	r1, #3
 801523e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8015240:	1dbb      	adds	r3, r7, #6
 8015242:	8819      	ldrh	r1, [r3, #0]
 8015244:	68fa      	ldr	r2, [r7, #12]
 8015246:	23ae      	movs	r3, #174	@ 0xae
 8015248:	005b      	lsls	r3, r3, #1
 801524a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801524c:	1dbb      	adds	r3, r7, #6
 801524e:	8819      	ldrh	r1, [r3, #0]
 8015250:	68fa      	ldr	r2, [r7, #12]
 8015252:	23b0      	movs	r3, #176	@ 0xb0
 8015254:	005b      	lsls	r3, r3, #1
 8015256:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015258:	1dbb      	adds	r3, r7, #6
 801525a:	881b      	ldrh	r3, [r3, #0]
 801525c:	68ba      	ldr	r2, [r7, #8]
 801525e:	68f8      	ldr	r0, [r7, #12]
 8015260:	2100      	movs	r1, #0
 8015262:	f000 fca9 	bl	8015bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015266:	2300      	movs	r3, #0
}
 8015268:	0018      	movs	r0, r3
 801526a:	46bd      	mov	sp, r7
 801526c:	b004      	add	sp, #16
 801526e:	bd80      	pop	{r7, pc}

08015270 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b084      	sub	sp, #16
 8015274:	af00      	add	r7, sp, #0
 8015276:	60f8      	str	r0, [r7, #12]
 8015278:	60b9      	str	r1, [r7, #8]
 801527a:	1dbb      	adds	r3, r7, #6
 801527c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801527e:	1dbb      	adds	r3, r7, #6
 8015280:	881b      	ldrh	r3, [r3, #0]
 8015282:	68ba      	ldr	r2, [r7, #8]
 8015284:	68f8      	ldr	r0, [r7, #12]
 8015286:	2100      	movs	r1, #0
 8015288:	f000 fc96 	bl	8015bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801528c:	2300      	movs	r3, #0
}
 801528e:	0018      	movs	r0, r3
 8015290:	46bd      	mov	sp, r7
 8015292:	b004      	add	sp, #16
 8015294:	bd80      	pop	{r7, pc}

08015296 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015296:	b580      	push	{r7, lr}
 8015298:	b082      	sub	sp, #8
 801529a:	af00      	add	r7, sp, #0
 801529c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801529e:	687a      	ldr	r2, [r7, #4]
 80152a0:	23a5      	movs	r3, #165	@ 0xa5
 80152a2:	009b      	lsls	r3, r3, #2
 80152a4:	2104      	movs	r1, #4
 80152a6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80152a8:	6878      	ldr	r0, [r7, #4]
 80152aa:	2300      	movs	r3, #0
 80152ac:	2200      	movs	r2, #0
 80152ae:	2100      	movs	r1, #0
 80152b0:	f000 fc4b 	bl	8015b4a <USBD_LL_Transmit>

  return USBD_OK;
 80152b4:	2300      	movs	r3, #0
}
 80152b6:	0018      	movs	r0, r3
 80152b8:	46bd      	mov	sp, r7
 80152ba:	b002      	add	sp, #8
 80152bc:	bd80      	pop	{r7, pc}

080152be <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80152be:	b580      	push	{r7, lr}
 80152c0:	b082      	sub	sp, #8
 80152c2:	af00      	add	r7, sp, #0
 80152c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80152c6:	687a      	ldr	r2, [r7, #4]
 80152c8:	23a5      	movs	r3, #165	@ 0xa5
 80152ca:	009b      	lsls	r3, r3, #2
 80152cc:	2105      	movs	r1, #5
 80152ce:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80152d0:	6878      	ldr	r0, [r7, #4]
 80152d2:	2300      	movs	r3, #0
 80152d4:	2200      	movs	r2, #0
 80152d6:	2100      	movs	r1, #0
 80152d8:	f000 fc6e 	bl	8015bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80152dc:	2300      	movs	r3, #0
}
 80152de:	0018      	movs	r0, r3
 80152e0:	46bd      	mov	sp, r7
 80152e2:	b002      	add	sp, #8
 80152e4:	bd80      	pop	{r7, pc}
	...

080152e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80152ec:	4914      	ldr	r1, [pc, #80]	@ (8015340 <MX_USB_DEVICE_Init+0x58>)
 80152ee:	4b15      	ldr	r3, [pc, #84]	@ (8015344 <MX_USB_DEVICE_Init+0x5c>)
 80152f0:	2200      	movs	r2, #0
 80152f2:	0018      	movs	r0, r3
 80152f4:	f7fe fdeb 	bl	8013ece <USBD_Init>
 80152f8:	1e03      	subs	r3, r0, #0
 80152fa:	d001      	beq.n	8015300 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80152fc:	f7f0 fc0a 	bl	8005b14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015300:	4a11      	ldr	r2, [pc, #68]	@ (8015348 <MX_USB_DEVICE_Init+0x60>)
 8015302:	4b10      	ldr	r3, [pc, #64]	@ (8015344 <MX_USB_DEVICE_Init+0x5c>)
 8015304:	0011      	movs	r1, r2
 8015306:	0018      	movs	r0, r3
 8015308:	f7fe fe12 	bl	8013f30 <USBD_RegisterClass>
 801530c:	1e03      	subs	r3, r0, #0
 801530e:	d001      	beq.n	8015314 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8015310:	f7f0 fc00 	bl	8005b14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015314:	4a0d      	ldr	r2, [pc, #52]	@ (801534c <MX_USB_DEVICE_Init+0x64>)
 8015316:	4b0b      	ldr	r3, [pc, #44]	@ (8015344 <MX_USB_DEVICE_Init+0x5c>)
 8015318:	0011      	movs	r1, r2
 801531a:	0018      	movs	r0, r3
 801531c:	f7fe fd5e 	bl	8013ddc <USBD_CDC_RegisterInterface>
 8015320:	1e03      	subs	r3, r0, #0
 8015322:	d001      	beq.n	8015328 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8015324:	f7f0 fbf6 	bl	8005b14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015328:	4b06      	ldr	r3, [pc, #24]	@ (8015344 <MX_USB_DEVICE_Init+0x5c>)
 801532a:	0018      	movs	r0, r3
 801532c:	f7fe fe20 	bl	8013f70 <USBD_Start>
 8015330:	1e03      	subs	r3, r0, #0
 8015332:	d001      	beq.n	8015338 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8015334:	f7f0 fbee 	bl	8005b14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015338:	46c0      	nop			@ (mov r8, r8)
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}
 801533e:	46c0      	nop			@ (mov r8, r8)
 8015340:	20000278 	.word	0x20000278
 8015344:	2000308c 	.word	0x2000308c
 8015348:	20000164 	.word	0x20000164
 801534c:	20000268 	.word	0x20000268

08015350 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015350:	b580      	push	{r7, lr}
 8015352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015354:	4907      	ldr	r1, [pc, #28]	@ (8015374 <CDC_Init_FS+0x24>)
 8015356:	4b08      	ldr	r3, [pc, #32]	@ (8015378 <CDC_Init_FS+0x28>)
 8015358:	2200      	movs	r2, #0
 801535a:	0018      	movs	r0, r3
 801535c:	f7fe fd59 	bl	8013e12 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015360:	4a06      	ldr	r2, [pc, #24]	@ (801537c <CDC_Init_FS+0x2c>)
 8015362:	4b05      	ldr	r3, [pc, #20]	@ (8015378 <CDC_Init_FS+0x28>)
 8015364:	0011      	movs	r1, r2
 8015366:	0018      	movs	r0, r3
 8015368:	f7fe fd6f 	bl	8013e4a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801536c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801536e:	0018      	movs	r0, r3
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}
 8015374:	20003750 	.word	0x20003750
 8015378:	2000308c 	.word	0x2000308c
 801537c:	20003350 	.word	0x20003350

08015380 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015384:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015386:	0018      	movs	r0, r3
 8015388:	46bd      	mov	sp, r7
 801538a:	bd80      	pop	{r7, pc}

0801538c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b082      	sub	sp, #8
 8015390:	af00      	add	r7, sp, #0
 8015392:	6039      	str	r1, [r7, #0]
 8015394:	0011      	movs	r1, r2
 8015396:	1dfb      	adds	r3, r7, #7
 8015398:	1c02      	adds	r2, r0, #0
 801539a:	701a      	strb	r2, [r3, #0]
 801539c:	1d3b      	adds	r3, r7, #4
 801539e:	1c0a      	adds	r2, r1, #0
 80153a0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80153a2:	1dfb      	adds	r3, r7, #7
 80153a4:	781b      	ldrb	r3, [r3, #0]
 80153a6:	2b23      	cmp	r3, #35	@ 0x23
 80153a8:	d804      	bhi.n	80153b4 <CDC_Control_FS+0x28>
 80153aa:	009a      	lsls	r2, r3, #2
 80153ac:	4b04      	ldr	r3, [pc, #16]	@ (80153c0 <CDC_Control_FS+0x34>)
 80153ae:	18d3      	adds	r3, r2, r3
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80153b4:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 80153b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80153b8:	0018      	movs	r0, r3
 80153ba:	46bd      	mov	sp, r7
 80153bc:	b002      	add	sp, #8
 80153be:	bd80      	pop	{r7, pc}
 80153c0:	0801a2dc 	.word	0x0801a2dc

080153c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b082      	sub	sp, #8
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
 80153cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80153ce:	687a      	ldr	r2, [r7, #4]
 80153d0:	4b06      	ldr	r3, [pc, #24]	@ (80153ec <CDC_Receive_FS+0x28>)
 80153d2:	0011      	movs	r1, r2
 80153d4:	0018      	movs	r0, r3
 80153d6:	f7fe fd38 	bl	8013e4a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80153da:	4b04      	ldr	r3, [pc, #16]	@ (80153ec <CDC_Receive_FS+0x28>)
 80153dc:	0018      	movs	r0, r3
 80153de:	f7fe fd48 	bl	8013e72 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80153e2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80153e4:	0018      	movs	r0, r3
 80153e6:	46bd      	mov	sp, r7
 80153e8:	b002      	add	sp, #8
 80153ea:	bd80      	pop	{r7, pc}
 80153ec:	2000308c 	.word	0x2000308c

080153f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b082      	sub	sp, #8
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	0002      	movs	r2, r0
 80153f8:	6039      	str	r1, [r7, #0]
 80153fa:	1dfb      	adds	r3, r7, #7
 80153fc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80153fe:	683b      	ldr	r3, [r7, #0]
 8015400:	2212      	movs	r2, #18
 8015402:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015404:	4b02      	ldr	r3, [pc, #8]	@ (8015410 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015406:	0018      	movs	r0, r3
 8015408:	46bd      	mov	sp, r7
 801540a:	b002      	add	sp, #8
 801540c:	bd80      	pop	{r7, pc}
 801540e:	46c0      	nop			@ (mov r8, r8)
 8015410:	20000294 	.word	0x20000294

08015414 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b082      	sub	sp, #8
 8015418:	af00      	add	r7, sp, #0
 801541a:	0002      	movs	r2, r0
 801541c:	6039      	str	r1, [r7, #0]
 801541e:	1dfb      	adds	r3, r7, #7
 8015420:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015422:	683b      	ldr	r3, [r7, #0]
 8015424:	2204      	movs	r2, #4
 8015426:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015428:	4b02      	ldr	r3, [pc, #8]	@ (8015434 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801542a:	0018      	movs	r0, r3
 801542c:	46bd      	mov	sp, r7
 801542e:	b002      	add	sp, #8
 8015430:	bd80      	pop	{r7, pc}
 8015432:	46c0      	nop			@ (mov r8, r8)
 8015434:	200002a8 	.word	0x200002a8

08015438 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b082      	sub	sp, #8
 801543c:	af00      	add	r7, sp, #0
 801543e:	0002      	movs	r2, r0
 8015440:	6039      	str	r1, [r7, #0]
 8015442:	1dfb      	adds	r3, r7, #7
 8015444:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8015446:	1dfb      	adds	r3, r7, #7
 8015448:	781b      	ldrb	r3, [r3, #0]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d106      	bne.n	801545c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801544e:	683a      	ldr	r2, [r7, #0]
 8015450:	4908      	ldr	r1, [pc, #32]	@ (8015474 <USBD_FS_ProductStrDescriptor+0x3c>)
 8015452:	4b09      	ldr	r3, [pc, #36]	@ (8015478 <USBD_FS_ProductStrDescriptor+0x40>)
 8015454:	0018      	movs	r0, r3
 8015456:	f7ff fe49 	bl	80150ec <USBD_GetString>
 801545a:	e005      	b.n	8015468 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801545c:	683a      	ldr	r2, [r7, #0]
 801545e:	4905      	ldr	r1, [pc, #20]	@ (8015474 <USBD_FS_ProductStrDescriptor+0x3c>)
 8015460:	4b05      	ldr	r3, [pc, #20]	@ (8015478 <USBD_FS_ProductStrDescriptor+0x40>)
 8015462:	0018      	movs	r0, r3
 8015464:	f7ff fe42 	bl	80150ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8015468:	4b02      	ldr	r3, [pc, #8]	@ (8015474 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801546a:	0018      	movs	r0, r3
 801546c:	46bd      	mov	sp, r7
 801546e:	b002      	add	sp, #8
 8015470:	bd80      	pop	{r7, pc}
 8015472:	46c0      	nop			@ (mov r8, r8)
 8015474:	20003b50 	.word	0x20003b50
 8015478:	0801a070 	.word	0x0801a070

0801547c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b082      	sub	sp, #8
 8015480:	af00      	add	r7, sp, #0
 8015482:	0002      	movs	r2, r0
 8015484:	6039      	str	r1, [r7, #0]
 8015486:	1dfb      	adds	r3, r7, #7
 8015488:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801548a:	683a      	ldr	r2, [r7, #0]
 801548c:	4904      	ldr	r1, [pc, #16]	@ (80154a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801548e:	4b05      	ldr	r3, [pc, #20]	@ (80154a4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8015490:	0018      	movs	r0, r3
 8015492:	f7ff fe2b 	bl	80150ec <USBD_GetString>
  return USBD_StrDesc;
 8015496:	4b02      	ldr	r3, [pc, #8]	@ (80154a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8015498:	0018      	movs	r0, r3
 801549a:	46bd      	mov	sp, r7
 801549c:	b002      	add	sp, #8
 801549e:	bd80      	pop	{r7, pc}
 80154a0:	20003b50 	.word	0x20003b50
 80154a4:	0801a088 	.word	0x0801a088

080154a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b082      	sub	sp, #8
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	0002      	movs	r2, r0
 80154b0:	6039      	str	r1, [r7, #0]
 80154b2:	1dfb      	adds	r3, r7, #7
 80154b4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80154b6:	683b      	ldr	r3, [r7, #0]
 80154b8:	221a      	movs	r2, #26
 80154ba:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80154bc:	f000 f84c 	bl	8015558 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80154c0:	4b02      	ldr	r3, [pc, #8]	@ (80154cc <USBD_FS_SerialStrDescriptor+0x24>)
}
 80154c2:	0018      	movs	r0, r3
 80154c4:	46bd      	mov	sp, r7
 80154c6:	b002      	add	sp, #8
 80154c8:	bd80      	pop	{r7, pc}
 80154ca:	46c0      	nop			@ (mov r8, r8)
 80154cc:	200002ac 	.word	0x200002ac

080154d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b082      	sub	sp, #8
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	0002      	movs	r2, r0
 80154d8:	6039      	str	r1, [r7, #0]
 80154da:	1dfb      	adds	r3, r7, #7
 80154dc:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80154de:	1dfb      	adds	r3, r7, #7
 80154e0:	781b      	ldrb	r3, [r3, #0]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d106      	bne.n	80154f4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80154e6:	683a      	ldr	r2, [r7, #0]
 80154e8:	4908      	ldr	r1, [pc, #32]	@ (801550c <USBD_FS_ConfigStrDescriptor+0x3c>)
 80154ea:	4b09      	ldr	r3, [pc, #36]	@ (8015510 <USBD_FS_ConfigStrDescriptor+0x40>)
 80154ec:	0018      	movs	r0, r3
 80154ee:	f7ff fdfd 	bl	80150ec <USBD_GetString>
 80154f2:	e005      	b.n	8015500 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80154f4:	683a      	ldr	r2, [r7, #0]
 80154f6:	4905      	ldr	r1, [pc, #20]	@ (801550c <USBD_FS_ConfigStrDescriptor+0x3c>)
 80154f8:	4b05      	ldr	r3, [pc, #20]	@ (8015510 <USBD_FS_ConfigStrDescriptor+0x40>)
 80154fa:	0018      	movs	r0, r3
 80154fc:	f7ff fdf6 	bl	80150ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8015500:	4b02      	ldr	r3, [pc, #8]	@ (801550c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8015502:	0018      	movs	r0, r3
 8015504:	46bd      	mov	sp, r7
 8015506:	b002      	add	sp, #8
 8015508:	bd80      	pop	{r7, pc}
 801550a:	46c0      	nop			@ (mov r8, r8)
 801550c:	20003b50 	.word	0x20003b50
 8015510:	0801a09c 	.word	0x0801a09c

08015514 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015514:	b580      	push	{r7, lr}
 8015516:	b082      	sub	sp, #8
 8015518:	af00      	add	r7, sp, #0
 801551a:	0002      	movs	r2, r0
 801551c:	6039      	str	r1, [r7, #0]
 801551e:	1dfb      	adds	r3, r7, #7
 8015520:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8015522:	1dfb      	adds	r3, r7, #7
 8015524:	781b      	ldrb	r3, [r3, #0]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d106      	bne.n	8015538 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801552a:	683a      	ldr	r2, [r7, #0]
 801552c:	4908      	ldr	r1, [pc, #32]	@ (8015550 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801552e:	4b09      	ldr	r3, [pc, #36]	@ (8015554 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8015530:	0018      	movs	r0, r3
 8015532:	f7ff fddb 	bl	80150ec <USBD_GetString>
 8015536:	e005      	b.n	8015544 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015538:	683a      	ldr	r2, [r7, #0]
 801553a:	4905      	ldr	r1, [pc, #20]	@ (8015550 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801553c:	4b05      	ldr	r3, [pc, #20]	@ (8015554 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801553e:	0018      	movs	r0, r3
 8015540:	f7ff fdd4 	bl	80150ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8015544:	4b02      	ldr	r3, [pc, #8]	@ (8015550 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8015546:	0018      	movs	r0, r3
 8015548:	46bd      	mov	sp, r7
 801554a:	b002      	add	sp, #8
 801554c:	bd80      	pop	{r7, pc}
 801554e:	46c0      	nop			@ (mov r8, r8)
 8015550:	20003b50 	.word	0x20003b50
 8015554:	0801a0a8 	.word	0x0801a0a8

08015558 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b084      	sub	sp, #16
 801555c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801555e:	4b10      	ldr	r3, [pc, #64]	@ (80155a0 <Get_SerialNum+0x48>)
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015564:	4b0f      	ldr	r3, [pc, #60]	@ (80155a4 <Get_SerialNum+0x4c>)
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801556a:	4b0f      	ldr	r3, [pc, #60]	@ (80155a8 <Get_SerialNum+0x50>)
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015570:	68fa      	ldr	r2, [r7, #12]
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	18d3      	adds	r3, r2, r3
 8015576:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d00b      	beq.n	8015596 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801557e:	490b      	ldr	r1, [pc, #44]	@ (80155ac <Get_SerialNum+0x54>)
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	2208      	movs	r2, #8
 8015584:	0018      	movs	r0, r3
 8015586:	f000 f815 	bl	80155b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801558a:	4909      	ldr	r1, [pc, #36]	@ (80155b0 <Get_SerialNum+0x58>)
 801558c:	68bb      	ldr	r3, [r7, #8]
 801558e:	2204      	movs	r2, #4
 8015590:	0018      	movs	r0, r3
 8015592:	f000 f80f 	bl	80155b4 <IntToUnicode>
  }
}
 8015596:	46c0      	nop			@ (mov r8, r8)
 8015598:	46bd      	mov	sp, r7
 801559a:	b004      	add	sp, #16
 801559c:	bd80      	pop	{r7, pc}
 801559e:	46c0      	nop			@ (mov r8, r8)
 80155a0:	1ff80050 	.word	0x1ff80050
 80155a4:	1ff80054 	.word	0x1ff80054
 80155a8:	1ff80058 	.word	0x1ff80058
 80155ac:	200002ae 	.word	0x200002ae
 80155b0:	200002be 	.word	0x200002be

080155b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b086      	sub	sp, #24
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	60f8      	str	r0, [r7, #12]
 80155bc:	60b9      	str	r1, [r7, #8]
 80155be:	1dfb      	adds	r3, r7, #7
 80155c0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80155c2:	2117      	movs	r1, #23
 80155c4:	187b      	adds	r3, r7, r1
 80155c6:	2200      	movs	r2, #0
 80155c8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80155ca:	187b      	adds	r3, r7, r1
 80155cc:	2200      	movs	r2, #0
 80155ce:	701a      	strb	r2, [r3, #0]
 80155d0:	e02f      	b.n	8015632 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	0f1b      	lsrs	r3, r3, #28
 80155d6:	2b09      	cmp	r3, #9
 80155d8:	d80d      	bhi.n	80155f6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	0f1b      	lsrs	r3, r3, #28
 80155de:	b2da      	uxtb	r2, r3
 80155e0:	2317      	movs	r3, #23
 80155e2:	18fb      	adds	r3, r7, r3
 80155e4:	781b      	ldrb	r3, [r3, #0]
 80155e6:	005b      	lsls	r3, r3, #1
 80155e8:	0019      	movs	r1, r3
 80155ea:	68bb      	ldr	r3, [r7, #8]
 80155ec:	185b      	adds	r3, r3, r1
 80155ee:	3230      	adds	r2, #48	@ 0x30
 80155f0:	b2d2      	uxtb	r2, r2
 80155f2:	701a      	strb	r2, [r3, #0]
 80155f4:	e00c      	b.n	8015610 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	0f1b      	lsrs	r3, r3, #28
 80155fa:	b2da      	uxtb	r2, r3
 80155fc:	2317      	movs	r3, #23
 80155fe:	18fb      	adds	r3, r7, r3
 8015600:	781b      	ldrb	r3, [r3, #0]
 8015602:	005b      	lsls	r3, r3, #1
 8015604:	0019      	movs	r1, r3
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	185b      	adds	r3, r3, r1
 801560a:	3237      	adds	r2, #55	@ 0x37
 801560c:	b2d2      	uxtb	r2, r2
 801560e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	011b      	lsls	r3, r3, #4
 8015614:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015616:	2117      	movs	r1, #23
 8015618:	187b      	adds	r3, r7, r1
 801561a:	781b      	ldrb	r3, [r3, #0]
 801561c:	005b      	lsls	r3, r3, #1
 801561e:	3301      	adds	r3, #1
 8015620:	68ba      	ldr	r2, [r7, #8]
 8015622:	18d3      	adds	r3, r2, r3
 8015624:	2200      	movs	r2, #0
 8015626:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015628:	187b      	adds	r3, r7, r1
 801562a:	781a      	ldrb	r2, [r3, #0]
 801562c:	187b      	adds	r3, r7, r1
 801562e:	3201      	adds	r2, #1
 8015630:	701a      	strb	r2, [r3, #0]
 8015632:	2317      	movs	r3, #23
 8015634:	18fa      	adds	r2, r7, r3
 8015636:	1dfb      	adds	r3, r7, #7
 8015638:	7812      	ldrb	r2, [r2, #0]
 801563a:	781b      	ldrb	r3, [r3, #0]
 801563c:	429a      	cmp	r2, r3
 801563e:	d3c8      	bcc.n	80155d2 <IntToUnicode+0x1e>
  }
}
 8015640:	46c0      	nop			@ (mov r8, r8)
 8015642:	46c0      	nop			@ (mov r8, r8)
 8015644:	46bd      	mov	sp, r7
 8015646:	b006      	add	sp, #24
 8015648:	bd80      	pop	{r7, pc}
	...

0801564c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801564c:	b580      	push	{r7, lr}
 801564e:	b082      	sub	sp, #8
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	4a0a      	ldr	r2, [pc, #40]	@ (8015684 <HAL_PCD_MspInit+0x38>)
 801565a:	4293      	cmp	r3, r2
 801565c:	d10e      	bne.n	801567c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801565e:	4b0a      	ldr	r3, [pc, #40]	@ (8015688 <HAL_PCD_MspInit+0x3c>)
 8015660:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015662:	4b09      	ldr	r3, [pc, #36]	@ (8015688 <HAL_PCD_MspInit+0x3c>)
 8015664:	2180      	movs	r1, #128	@ 0x80
 8015666:	0409      	lsls	r1, r1, #16
 8015668:	430a      	orrs	r2, r1
 801566a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801566c:	2200      	movs	r2, #0
 801566e:	2100      	movs	r1, #0
 8015670:	201f      	movs	r0, #31
 8015672:	f7f4 f9c9 	bl	8009a08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8015676:	201f      	movs	r0, #31
 8015678:	f7f4 f9db 	bl	8009a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801567c:	46c0      	nop			@ (mov r8, r8)
 801567e:	46bd      	mov	sp, r7
 8015680:	b002      	add	sp, #8
 8015682:	bd80      	pop	{r7, pc}
 8015684:	40005c00 	.word	0x40005c00
 8015688:	40021000 	.word	0x40021000

0801568c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b082      	sub	sp, #8
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015694:	687a      	ldr	r2, [r7, #4]
 8015696:	23bc      	movs	r3, #188	@ 0xbc
 8015698:	009b      	lsls	r3, r3, #2
 801569a:	58d2      	ldr	r2, [r2, r3]
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	21ac      	movs	r1, #172	@ 0xac
 80156a0:	0089      	lsls	r1, r1, #2
 80156a2:	468c      	mov	ip, r1
 80156a4:	4463      	add	r3, ip
 80156a6:	0019      	movs	r1, r3
 80156a8:	0010      	movs	r0, r2
 80156aa:	f7fe fcb5 	bl	8014018 <USBD_LL_SetupStage>
}
 80156ae:	46c0      	nop			@ (mov r8, r8)
 80156b0:	46bd      	mov	sp, r7
 80156b2:	b002      	add	sp, #8
 80156b4:	bd80      	pop	{r7, pc}

080156b6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156b6:	b590      	push	{r4, r7, lr}
 80156b8:	b083      	sub	sp, #12
 80156ba:	af00      	add	r7, sp, #0
 80156bc:	6078      	str	r0, [r7, #4]
 80156be:	000a      	movs	r2, r1
 80156c0:	1cfb      	adds	r3, r7, #3
 80156c2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80156c4:	687a      	ldr	r2, [r7, #4]
 80156c6:	23bc      	movs	r3, #188	@ 0xbc
 80156c8:	009b      	lsls	r3, r3, #2
 80156ca:	58d4      	ldr	r4, [r2, r3]
 80156cc:	1cfb      	adds	r3, r7, #3
 80156ce:	781a      	ldrb	r2, [r3, #0]
 80156d0:	6878      	ldr	r0, [r7, #4]
 80156d2:	23be      	movs	r3, #190	@ 0xbe
 80156d4:	0059      	lsls	r1, r3, #1
 80156d6:	0013      	movs	r3, r2
 80156d8:	009b      	lsls	r3, r3, #2
 80156da:	189b      	adds	r3, r3, r2
 80156dc:	00db      	lsls	r3, r3, #3
 80156de:	18c3      	adds	r3, r0, r3
 80156e0:	185b      	adds	r3, r3, r1
 80156e2:	681a      	ldr	r2, [r3, #0]
 80156e4:	1cfb      	adds	r3, r7, #3
 80156e6:	781b      	ldrb	r3, [r3, #0]
 80156e8:	0019      	movs	r1, r3
 80156ea:	0020      	movs	r0, r4
 80156ec:	f7fe fcf2 	bl	80140d4 <USBD_LL_DataOutStage>
}
 80156f0:	46c0      	nop			@ (mov r8, r8)
 80156f2:	46bd      	mov	sp, r7
 80156f4:	b003      	add	sp, #12
 80156f6:	bd90      	pop	{r4, r7, pc}

080156f8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b082      	sub	sp, #8
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
 8015700:	000a      	movs	r2, r1
 8015702:	1cfb      	adds	r3, r7, #3
 8015704:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015706:	687a      	ldr	r2, [r7, #4]
 8015708:	23bc      	movs	r3, #188	@ 0xbc
 801570a:	009b      	lsls	r3, r3, #2
 801570c:	58d0      	ldr	r0, [r2, r3]
 801570e:	1cfb      	adds	r3, r7, #3
 8015710:	781a      	ldrb	r2, [r3, #0]
 8015712:	6879      	ldr	r1, [r7, #4]
 8015714:	0013      	movs	r3, r2
 8015716:	009b      	lsls	r3, r3, #2
 8015718:	189b      	adds	r3, r3, r2
 801571a:	00db      	lsls	r3, r3, #3
 801571c:	18cb      	adds	r3, r1, r3
 801571e:	333c      	adds	r3, #60	@ 0x3c
 8015720:	681a      	ldr	r2, [r3, #0]
 8015722:	1cfb      	adds	r3, r7, #3
 8015724:	781b      	ldrb	r3, [r3, #0]
 8015726:	0019      	movs	r1, r3
 8015728:	f7fe fd56 	bl	80141d8 <USBD_LL_DataInStage>
}
 801572c:	46c0      	nop			@ (mov r8, r8)
 801572e:	46bd      	mov	sp, r7
 8015730:	b002      	add	sp, #8
 8015732:	bd80      	pop	{r7, pc}

08015734 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b082      	sub	sp, #8
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801573c:	687a      	ldr	r2, [r7, #4]
 801573e:	23bc      	movs	r3, #188	@ 0xbc
 8015740:	009b      	lsls	r3, r3, #2
 8015742:	58d3      	ldr	r3, [r2, r3]
 8015744:	0018      	movs	r0, r3
 8015746:	f7fe fe8d 	bl	8014464 <USBD_LL_SOF>
}
 801574a:	46c0      	nop			@ (mov r8, r8)
 801574c:	46bd      	mov	sp, r7
 801574e:	b002      	add	sp, #8
 8015750:	bd80      	pop	{r7, pc}

08015752 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015752:	b580      	push	{r7, lr}
 8015754:	b084      	sub	sp, #16
 8015756:	af00      	add	r7, sp, #0
 8015758:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801575a:	230f      	movs	r3, #15
 801575c:	18fb      	adds	r3, r7, r3
 801575e:	2201      	movs	r2, #1
 8015760:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	689b      	ldr	r3, [r3, #8]
 8015766:	2b02      	cmp	r3, #2
 8015768:	d001      	beq.n	801576e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801576a:	f7f0 f9d3 	bl	8005b14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801576e:	687a      	ldr	r2, [r7, #4]
 8015770:	23bc      	movs	r3, #188	@ 0xbc
 8015772:	009b      	lsls	r3, r3, #2
 8015774:	58d2      	ldr	r2, [r2, r3]
 8015776:	230f      	movs	r3, #15
 8015778:	18fb      	adds	r3, r7, r3
 801577a:	781b      	ldrb	r3, [r3, #0]
 801577c:	0019      	movs	r1, r3
 801577e:	0010      	movs	r0, r2
 8015780:	f7fe fe2f 	bl	80143e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015784:	687a      	ldr	r2, [r7, #4]
 8015786:	23bc      	movs	r3, #188	@ 0xbc
 8015788:	009b      	lsls	r3, r3, #2
 801578a:	58d3      	ldr	r3, [r2, r3]
 801578c:	0018      	movs	r0, r3
 801578e:	f7fe fde0 	bl	8014352 <USBD_LL_Reset>
}
 8015792:	46c0      	nop			@ (mov r8, r8)
 8015794:	46bd      	mov	sp, r7
 8015796:	b004      	add	sp, #16
 8015798:	bd80      	pop	{r7, pc}
	...

0801579c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b082      	sub	sp, #8
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80157a4:	687a      	ldr	r2, [r7, #4]
 80157a6:	23bc      	movs	r3, #188	@ 0xbc
 80157a8:	009b      	lsls	r3, r3, #2
 80157aa:	58d3      	ldr	r3, [r2, r3]
 80157ac:	0018      	movs	r0, r3
 80157ae:	f7fe fe29 	bl	8014404 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	699b      	ldr	r3, [r3, #24]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d005      	beq.n	80157c6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80157ba:	4b05      	ldr	r3, [pc, #20]	@ (80157d0 <HAL_PCD_SuspendCallback+0x34>)
 80157bc:	691a      	ldr	r2, [r3, #16]
 80157be:	4b04      	ldr	r3, [pc, #16]	@ (80157d0 <HAL_PCD_SuspendCallback+0x34>)
 80157c0:	2106      	movs	r1, #6
 80157c2:	430a      	orrs	r2, r1
 80157c4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80157c6:	46c0      	nop			@ (mov r8, r8)
 80157c8:	46bd      	mov	sp, r7
 80157ca:	b002      	add	sp, #8
 80157cc:	bd80      	pop	{r7, pc}
 80157ce:	46c0      	nop			@ (mov r8, r8)
 80157d0:	e000ed00 	.word	0xe000ed00

080157d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b082      	sub	sp, #8
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	699b      	ldr	r3, [r3, #24]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d007      	beq.n	80157f4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80157e4:	4b09      	ldr	r3, [pc, #36]	@ (801580c <HAL_PCD_ResumeCallback+0x38>)
 80157e6:	691a      	ldr	r2, [r3, #16]
 80157e8:	4b08      	ldr	r3, [pc, #32]	@ (801580c <HAL_PCD_ResumeCallback+0x38>)
 80157ea:	2106      	movs	r1, #6
 80157ec:	438a      	bics	r2, r1
 80157ee:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80157f0:	f000 fa44 	bl	8015c7c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80157f4:	687a      	ldr	r2, [r7, #4]
 80157f6:	23bc      	movs	r3, #188	@ 0xbc
 80157f8:	009b      	lsls	r3, r3, #2
 80157fa:	58d3      	ldr	r3, [r2, r3]
 80157fc:	0018      	movs	r0, r3
 80157fe:	f7fe fe19 	bl	8014434 <USBD_LL_Resume>
}
 8015802:	46c0      	nop			@ (mov r8, r8)
 8015804:	46bd      	mov	sp, r7
 8015806:	b002      	add	sp, #8
 8015808:	bd80      	pop	{r7, pc}
 801580a:	46c0      	nop			@ (mov r8, r8)
 801580c:	e000ed00 	.word	0xe000ed00

08015810 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b082      	sub	sp, #8
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8015818:	4a2d      	ldr	r2, [pc, #180]	@ (80158d0 <USBD_LL_Init+0xc0>)
 801581a:	23bc      	movs	r3, #188	@ 0xbc
 801581c:	009b      	lsls	r3, r3, #2
 801581e:	6879      	ldr	r1, [r7, #4]
 8015820:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8015822:	687a      	ldr	r2, [r7, #4]
 8015824:	23b0      	movs	r3, #176	@ 0xb0
 8015826:	009b      	lsls	r3, r3, #2
 8015828:	4929      	ldr	r1, [pc, #164]	@ (80158d0 <USBD_LL_Init+0xc0>)
 801582a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801582c:	4b28      	ldr	r3, [pc, #160]	@ (80158d0 <USBD_LL_Init+0xc0>)
 801582e:	4a29      	ldr	r2, [pc, #164]	@ (80158d4 <USBD_LL_Init+0xc4>)
 8015830:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8015832:	4b27      	ldr	r3, [pc, #156]	@ (80158d0 <USBD_LL_Init+0xc0>)
 8015834:	2208      	movs	r2, #8
 8015836:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8015838:	4b25      	ldr	r3, [pc, #148]	@ (80158d0 <USBD_LL_Init+0xc0>)
 801583a:	2202      	movs	r2, #2
 801583c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801583e:	4b24      	ldr	r3, [pc, #144]	@ (80158d0 <USBD_LL_Init+0xc0>)
 8015840:	2202      	movs	r2, #2
 8015842:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8015844:	4b22      	ldr	r3, [pc, #136]	@ (80158d0 <USBD_LL_Init+0xc0>)
 8015846:	2200      	movs	r2, #0
 8015848:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801584a:	4b21      	ldr	r3, [pc, #132]	@ (80158d0 <USBD_LL_Init+0xc0>)
 801584c:	2200      	movs	r2, #0
 801584e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015850:	4b1f      	ldr	r3, [pc, #124]	@ (80158d0 <USBD_LL_Init+0xc0>)
 8015852:	2200      	movs	r2, #0
 8015854:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015856:	4b1e      	ldr	r3, [pc, #120]	@ (80158d0 <USBD_LL_Init+0xc0>)
 8015858:	0018      	movs	r0, r3
 801585a:	f7f7 f98f 	bl	800cb7c <HAL_PCD_Init>
 801585e:	1e03      	subs	r3, r0, #0
 8015860:	d001      	beq.n	8015866 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8015862:	f7f0 f957 	bl	8005b14 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015866:	687a      	ldr	r2, [r7, #4]
 8015868:	23b0      	movs	r3, #176	@ 0xb0
 801586a:	009b      	lsls	r3, r3, #2
 801586c:	58d0      	ldr	r0, [r2, r3]
 801586e:	2318      	movs	r3, #24
 8015870:	2200      	movs	r2, #0
 8015872:	2100      	movs	r1, #0
 8015874:	f7f8 ff50 	bl	800e718 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015878:	687a      	ldr	r2, [r7, #4]
 801587a:	23b0      	movs	r3, #176	@ 0xb0
 801587c:	009b      	lsls	r3, r3, #2
 801587e:	58d0      	ldr	r0, [r2, r3]
 8015880:	2358      	movs	r3, #88	@ 0x58
 8015882:	2200      	movs	r2, #0
 8015884:	2180      	movs	r1, #128	@ 0x80
 8015886:	f7f8 ff47 	bl	800e718 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801588a:	687a      	ldr	r2, [r7, #4]
 801588c:	23b0      	movs	r3, #176	@ 0xb0
 801588e:	009b      	lsls	r3, r3, #2
 8015890:	58d0      	ldr	r0, [r2, r3]
 8015892:	23c0      	movs	r3, #192	@ 0xc0
 8015894:	2200      	movs	r2, #0
 8015896:	2181      	movs	r1, #129	@ 0x81
 8015898:	f7f8 ff3e 	bl	800e718 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801589c:	687a      	ldr	r2, [r7, #4]
 801589e:	23b0      	movs	r3, #176	@ 0xb0
 80158a0:	009b      	lsls	r3, r3, #2
 80158a2:	58d0      	ldr	r0, [r2, r3]
 80158a4:	2388      	movs	r3, #136	@ 0x88
 80158a6:	005b      	lsls	r3, r3, #1
 80158a8:	2200      	movs	r2, #0
 80158aa:	2101      	movs	r1, #1
 80158ac:	f7f8 ff34 	bl	800e718 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80158b0:	687a      	ldr	r2, [r7, #4]
 80158b2:	23b0      	movs	r3, #176	@ 0xb0
 80158b4:	009b      	lsls	r3, r3, #2
 80158b6:	58d0      	ldr	r0, [r2, r3]
 80158b8:	2380      	movs	r3, #128	@ 0x80
 80158ba:	005b      	lsls	r3, r3, #1
 80158bc:	2200      	movs	r2, #0
 80158be:	2182      	movs	r1, #130	@ 0x82
 80158c0:	f7f8 ff2a 	bl	800e718 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80158c4:	2300      	movs	r3, #0
}
 80158c6:	0018      	movs	r0, r3
 80158c8:	46bd      	mov	sp, r7
 80158ca:	b002      	add	sp, #8
 80158cc:	bd80      	pop	{r7, pc}
 80158ce:	46c0      	nop			@ (mov r8, r8)
 80158d0:	20003d50 	.word	0x20003d50
 80158d4:	40005c00 	.word	0x40005c00

080158d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80158d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158da:	b085      	sub	sp, #20
 80158dc:	af00      	add	r7, sp, #0
 80158de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158e0:	210f      	movs	r1, #15
 80158e2:	187b      	adds	r3, r7, r1
 80158e4:	2200      	movs	r2, #0
 80158e6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158e8:	260e      	movs	r6, #14
 80158ea:	19bb      	adds	r3, r7, r6
 80158ec:	2200      	movs	r2, #0
 80158ee:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80158f0:	687a      	ldr	r2, [r7, #4]
 80158f2:	23b0      	movs	r3, #176	@ 0xb0
 80158f4:	009b      	lsls	r3, r3, #2
 80158f6:	58d3      	ldr	r3, [r2, r3]
 80158f8:	000d      	movs	r5, r1
 80158fa:	187c      	adds	r4, r7, r1
 80158fc:	0018      	movs	r0, r3
 80158fe:	f7f7 fa3d 	bl	800cd7c <HAL_PCD_Start>
 8015902:	0003      	movs	r3, r0
 8015904:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015906:	19bc      	adds	r4, r7, r6
 8015908:	197b      	adds	r3, r7, r5
 801590a:	781b      	ldrb	r3, [r3, #0]
 801590c:	0018      	movs	r0, r3
 801590e:	f000 f9bc 	bl	8015c8a <USBD_Get_USB_Status>
 8015912:	0003      	movs	r3, r0
 8015914:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015916:	19bb      	adds	r3, r7, r6
 8015918:	781b      	ldrb	r3, [r3, #0]
}
 801591a:	0018      	movs	r0, r3
 801591c:	46bd      	mov	sp, r7
 801591e:	b005      	add	sp, #20
 8015920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015922 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015924:	b085      	sub	sp, #20
 8015926:	af00      	add	r7, sp, #0
 8015928:	6078      	str	r0, [r7, #4]
 801592a:	000c      	movs	r4, r1
 801592c:	0010      	movs	r0, r2
 801592e:	0019      	movs	r1, r3
 8015930:	1cfb      	adds	r3, r7, #3
 8015932:	1c22      	adds	r2, r4, #0
 8015934:	701a      	strb	r2, [r3, #0]
 8015936:	1cbb      	adds	r3, r7, #2
 8015938:	1c02      	adds	r2, r0, #0
 801593a:	701a      	strb	r2, [r3, #0]
 801593c:	003b      	movs	r3, r7
 801593e:	1c0a      	adds	r2, r1, #0
 8015940:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015942:	260f      	movs	r6, #15
 8015944:	19bb      	adds	r3, r7, r6
 8015946:	2200      	movs	r2, #0
 8015948:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801594a:	250e      	movs	r5, #14
 801594c:	197b      	adds	r3, r7, r5
 801594e:	2200      	movs	r2, #0
 8015950:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015952:	687a      	ldr	r2, [r7, #4]
 8015954:	23b0      	movs	r3, #176	@ 0xb0
 8015956:	009b      	lsls	r3, r3, #2
 8015958:	58d0      	ldr	r0, [r2, r3]
 801595a:	19bc      	adds	r4, r7, r6
 801595c:	1cbb      	adds	r3, r7, #2
 801595e:	781d      	ldrb	r5, [r3, #0]
 8015960:	003b      	movs	r3, r7
 8015962:	881a      	ldrh	r2, [r3, #0]
 8015964:	1cfb      	adds	r3, r7, #3
 8015966:	7819      	ldrb	r1, [r3, #0]
 8015968:	002b      	movs	r3, r5
 801596a:	f7f7 fb9c 	bl	800d0a6 <HAL_PCD_EP_Open>
 801596e:	0003      	movs	r3, r0
 8015970:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015972:	250e      	movs	r5, #14
 8015974:	197c      	adds	r4, r7, r5
 8015976:	19bb      	adds	r3, r7, r6
 8015978:	781b      	ldrb	r3, [r3, #0]
 801597a:	0018      	movs	r0, r3
 801597c:	f000 f985 	bl	8015c8a <USBD_Get_USB_Status>
 8015980:	0003      	movs	r3, r0
 8015982:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015984:	197b      	adds	r3, r7, r5
 8015986:	781b      	ldrb	r3, [r3, #0]
}
 8015988:	0018      	movs	r0, r3
 801598a:	46bd      	mov	sp, r7
 801598c:	b005      	add	sp, #20
 801598e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015990 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015992:	b085      	sub	sp, #20
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
 8015998:	000a      	movs	r2, r1
 801599a:	1cfb      	adds	r3, r7, #3
 801599c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801599e:	210f      	movs	r1, #15
 80159a0:	187b      	adds	r3, r7, r1
 80159a2:	2200      	movs	r2, #0
 80159a4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159a6:	260e      	movs	r6, #14
 80159a8:	19bb      	adds	r3, r7, r6
 80159aa:	2200      	movs	r2, #0
 80159ac:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80159ae:	687a      	ldr	r2, [r7, #4]
 80159b0:	23b0      	movs	r3, #176	@ 0xb0
 80159b2:	009b      	lsls	r3, r3, #2
 80159b4:	58d2      	ldr	r2, [r2, r3]
 80159b6:	000d      	movs	r5, r1
 80159b8:	187c      	adds	r4, r7, r1
 80159ba:	1cfb      	adds	r3, r7, #3
 80159bc:	781b      	ldrb	r3, [r3, #0]
 80159be:	0019      	movs	r1, r3
 80159c0:	0010      	movs	r0, r2
 80159c2:	f7f7 fbdf 	bl	800d184 <HAL_PCD_EP_Close>
 80159c6:	0003      	movs	r3, r0
 80159c8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159ca:	19bc      	adds	r4, r7, r6
 80159cc:	197b      	adds	r3, r7, r5
 80159ce:	781b      	ldrb	r3, [r3, #0]
 80159d0:	0018      	movs	r0, r3
 80159d2:	f000 f95a 	bl	8015c8a <USBD_Get_USB_Status>
 80159d6:	0003      	movs	r3, r0
 80159d8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80159da:	19bb      	adds	r3, r7, r6
 80159dc:	781b      	ldrb	r3, [r3, #0]
}
 80159de:	0018      	movs	r0, r3
 80159e0:	46bd      	mov	sp, r7
 80159e2:	b005      	add	sp, #20
 80159e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080159e6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159e8:	b085      	sub	sp, #20
 80159ea:	af00      	add	r7, sp, #0
 80159ec:	6078      	str	r0, [r7, #4]
 80159ee:	000a      	movs	r2, r1
 80159f0:	1cfb      	adds	r3, r7, #3
 80159f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159f4:	210f      	movs	r1, #15
 80159f6:	187b      	adds	r3, r7, r1
 80159f8:	2200      	movs	r2, #0
 80159fa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159fc:	260e      	movs	r6, #14
 80159fe:	19bb      	adds	r3, r7, r6
 8015a00:	2200      	movs	r2, #0
 8015a02:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015a04:	687a      	ldr	r2, [r7, #4]
 8015a06:	23b0      	movs	r3, #176	@ 0xb0
 8015a08:	009b      	lsls	r3, r3, #2
 8015a0a:	58d2      	ldr	r2, [r2, r3]
 8015a0c:	000d      	movs	r5, r1
 8015a0e:	187c      	adds	r4, r7, r1
 8015a10:	1cfb      	adds	r3, r7, #3
 8015a12:	781b      	ldrb	r3, [r3, #0]
 8015a14:	0019      	movs	r1, r3
 8015a16:	0010      	movs	r0, r2
 8015a18:	f7f7 fc91 	bl	800d33e <HAL_PCD_EP_SetStall>
 8015a1c:	0003      	movs	r3, r0
 8015a1e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a20:	19bc      	adds	r4, r7, r6
 8015a22:	197b      	adds	r3, r7, r5
 8015a24:	781b      	ldrb	r3, [r3, #0]
 8015a26:	0018      	movs	r0, r3
 8015a28:	f000 f92f 	bl	8015c8a <USBD_Get_USB_Status>
 8015a2c:	0003      	movs	r3, r0
 8015a2e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015a30:	19bb      	adds	r3, r7, r6
 8015a32:	781b      	ldrb	r3, [r3, #0]
}
 8015a34:	0018      	movs	r0, r3
 8015a36:	46bd      	mov	sp, r7
 8015a38:	b005      	add	sp, #20
 8015a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015a3c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a3e:	b085      	sub	sp, #20
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
 8015a44:	000a      	movs	r2, r1
 8015a46:	1cfb      	adds	r3, r7, #3
 8015a48:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a4a:	210f      	movs	r1, #15
 8015a4c:	187b      	adds	r3, r7, r1
 8015a4e:	2200      	movs	r2, #0
 8015a50:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a52:	260e      	movs	r6, #14
 8015a54:	19bb      	adds	r3, r7, r6
 8015a56:	2200      	movs	r2, #0
 8015a58:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015a5a:	687a      	ldr	r2, [r7, #4]
 8015a5c:	23b0      	movs	r3, #176	@ 0xb0
 8015a5e:	009b      	lsls	r3, r3, #2
 8015a60:	58d2      	ldr	r2, [r2, r3]
 8015a62:	000d      	movs	r5, r1
 8015a64:	187c      	adds	r4, r7, r1
 8015a66:	1cfb      	adds	r3, r7, #3
 8015a68:	781b      	ldrb	r3, [r3, #0]
 8015a6a:	0019      	movs	r1, r3
 8015a6c:	0010      	movs	r0, r2
 8015a6e:	f7f7 fcc2 	bl	800d3f6 <HAL_PCD_EP_ClrStall>
 8015a72:	0003      	movs	r3, r0
 8015a74:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a76:	19bc      	adds	r4, r7, r6
 8015a78:	197b      	adds	r3, r7, r5
 8015a7a:	781b      	ldrb	r3, [r3, #0]
 8015a7c:	0018      	movs	r0, r3
 8015a7e:	f000 f904 	bl	8015c8a <USBD_Get_USB_Status>
 8015a82:	0003      	movs	r3, r0
 8015a84:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015a86:	19bb      	adds	r3, r7, r6
 8015a88:	781b      	ldrb	r3, [r3, #0]
}
 8015a8a:	0018      	movs	r0, r3
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	b005      	add	sp, #20
 8015a90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015a92 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a92:	b580      	push	{r7, lr}
 8015a94:	b084      	sub	sp, #16
 8015a96:	af00      	add	r7, sp, #0
 8015a98:	6078      	str	r0, [r7, #4]
 8015a9a:	000a      	movs	r2, r1
 8015a9c:	1cfb      	adds	r3, r7, #3
 8015a9e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015aa0:	687a      	ldr	r2, [r7, #4]
 8015aa2:	23b0      	movs	r3, #176	@ 0xb0
 8015aa4:	009b      	lsls	r3, r3, #2
 8015aa6:	58d3      	ldr	r3, [r2, r3]
 8015aa8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015aaa:	1cfb      	adds	r3, r7, #3
 8015aac:	781b      	ldrb	r3, [r3, #0]
 8015aae:	b25b      	sxtb	r3, r3
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	da0d      	bge.n	8015ad0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015ab4:	1cfb      	adds	r3, r7, #3
 8015ab6:	781b      	ldrb	r3, [r3, #0]
 8015ab8:	227f      	movs	r2, #127	@ 0x7f
 8015aba:	4013      	ands	r3, r2
 8015abc:	68f9      	ldr	r1, [r7, #12]
 8015abe:	1c5a      	adds	r2, r3, #1
 8015ac0:	0013      	movs	r3, r2
 8015ac2:	009b      	lsls	r3, r3, #2
 8015ac4:	189b      	adds	r3, r3, r2
 8015ac6:	00db      	lsls	r3, r3, #3
 8015ac8:	18cb      	adds	r3, r1, r3
 8015aca:	3302      	adds	r3, #2
 8015acc:	781b      	ldrb	r3, [r3, #0]
 8015ace:	e00d      	b.n	8015aec <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015ad0:	1cfb      	adds	r3, r7, #3
 8015ad2:	781b      	ldrb	r3, [r3, #0]
 8015ad4:	227f      	movs	r2, #127	@ 0x7f
 8015ad6:	401a      	ands	r2, r3
 8015ad8:	68f8      	ldr	r0, [r7, #12]
 8015ada:	23b5      	movs	r3, #181	@ 0xb5
 8015adc:	0059      	lsls	r1, r3, #1
 8015ade:	0013      	movs	r3, r2
 8015ae0:	009b      	lsls	r3, r3, #2
 8015ae2:	189b      	adds	r3, r3, r2
 8015ae4:	00db      	lsls	r3, r3, #3
 8015ae6:	18c3      	adds	r3, r0, r3
 8015ae8:	185b      	adds	r3, r3, r1
 8015aea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015aec:	0018      	movs	r0, r3
 8015aee:	46bd      	mov	sp, r7
 8015af0:	b004      	add	sp, #16
 8015af2:	bd80      	pop	{r7, pc}

08015af4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015af6:	b085      	sub	sp, #20
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
 8015afc:	000a      	movs	r2, r1
 8015afe:	1cfb      	adds	r3, r7, #3
 8015b00:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b02:	210f      	movs	r1, #15
 8015b04:	187b      	adds	r3, r7, r1
 8015b06:	2200      	movs	r2, #0
 8015b08:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b0a:	260e      	movs	r6, #14
 8015b0c:	19bb      	adds	r3, r7, r6
 8015b0e:	2200      	movs	r2, #0
 8015b10:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015b12:	687a      	ldr	r2, [r7, #4]
 8015b14:	23b0      	movs	r3, #176	@ 0xb0
 8015b16:	009b      	lsls	r3, r3, #2
 8015b18:	58d2      	ldr	r2, [r2, r3]
 8015b1a:	000d      	movs	r5, r1
 8015b1c:	187c      	adds	r4, r7, r1
 8015b1e:	1cfb      	adds	r3, r7, #3
 8015b20:	781b      	ldrb	r3, [r3, #0]
 8015b22:	0019      	movs	r1, r3
 8015b24:	0010      	movs	r0, r2
 8015b26:	f7f7 fa93 	bl	800d050 <HAL_PCD_SetAddress>
 8015b2a:	0003      	movs	r3, r0
 8015b2c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b2e:	19bc      	adds	r4, r7, r6
 8015b30:	197b      	adds	r3, r7, r5
 8015b32:	781b      	ldrb	r3, [r3, #0]
 8015b34:	0018      	movs	r0, r3
 8015b36:	f000 f8a8 	bl	8015c8a <USBD_Get_USB_Status>
 8015b3a:	0003      	movs	r3, r0
 8015b3c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015b3e:	19bb      	adds	r3, r7, r6
 8015b40:	781b      	ldrb	r3, [r3, #0]
}
 8015b42:	0018      	movs	r0, r3
 8015b44:	46bd      	mov	sp, r7
 8015b46:	b005      	add	sp, #20
 8015b48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015b4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b4c:	b087      	sub	sp, #28
 8015b4e:	af00      	add	r7, sp, #0
 8015b50:	60f8      	str	r0, [r7, #12]
 8015b52:	0008      	movs	r0, r1
 8015b54:	607a      	str	r2, [r7, #4]
 8015b56:	0019      	movs	r1, r3
 8015b58:	230b      	movs	r3, #11
 8015b5a:	18fb      	adds	r3, r7, r3
 8015b5c:	1c02      	adds	r2, r0, #0
 8015b5e:	701a      	strb	r2, [r3, #0]
 8015b60:	2408      	movs	r4, #8
 8015b62:	193b      	adds	r3, r7, r4
 8015b64:	1c0a      	adds	r2, r1, #0
 8015b66:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b68:	2117      	movs	r1, #23
 8015b6a:	187b      	adds	r3, r7, r1
 8015b6c:	2200      	movs	r2, #0
 8015b6e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b70:	2516      	movs	r5, #22
 8015b72:	197b      	adds	r3, r7, r5
 8015b74:	2200      	movs	r2, #0
 8015b76:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015b78:	68fa      	ldr	r2, [r7, #12]
 8015b7a:	23b0      	movs	r3, #176	@ 0xb0
 8015b7c:	009b      	lsls	r3, r3, #2
 8015b7e:	58d0      	ldr	r0, [r2, r3]
 8015b80:	193b      	adds	r3, r7, r4
 8015b82:	881d      	ldrh	r5, [r3, #0]
 8015b84:	000e      	movs	r6, r1
 8015b86:	187c      	adds	r4, r7, r1
 8015b88:	687a      	ldr	r2, [r7, #4]
 8015b8a:	230b      	movs	r3, #11
 8015b8c:	18fb      	adds	r3, r7, r3
 8015b8e:	7819      	ldrb	r1, [r3, #0]
 8015b90:	002b      	movs	r3, r5
 8015b92:	f7f7 fb98 	bl	800d2c6 <HAL_PCD_EP_Transmit>
 8015b96:	0003      	movs	r3, r0
 8015b98:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b9a:	2516      	movs	r5, #22
 8015b9c:	197c      	adds	r4, r7, r5
 8015b9e:	19bb      	adds	r3, r7, r6
 8015ba0:	781b      	ldrb	r3, [r3, #0]
 8015ba2:	0018      	movs	r0, r3
 8015ba4:	f000 f871 	bl	8015c8a <USBD_Get_USB_Status>
 8015ba8:	0003      	movs	r3, r0
 8015baa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015bac:	197b      	adds	r3, r7, r5
 8015bae:	781b      	ldrb	r3, [r3, #0]
}
 8015bb0:	0018      	movs	r0, r3
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	b007      	add	sp, #28
 8015bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015bb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bba:	b087      	sub	sp, #28
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	60f8      	str	r0, [r7, #12]
 8015bc0:	0008      	movs	r0, r1
 8015bc2:	607a      	str	r2, [r7, #4]
 8015bc4:	0019      	movs	r1, r3
 8015bc6:	230b      	movs	r3, #11
 8015bc8:	18fb      	adds	r3, r7, r3
 8015bca:	1c02      	adds	r2, r0, #0
 8015bcc:	701a      	strb	r2, [r3, #0]
 8015bce:	2408      	movs	r4, #8
 8015bd0:	193b      	adds	r3, r7, r4
 8015bd2:	1c0a      	adds	r2, r1, #0
 8015bd4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bd6:	2117      	movs	r1, #23
 8015bd8:	187b      	adds	r3, r7, r1
 8015bda:	2200      	movs	r2, #0
 8015bdc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015bde:	2516      	movs	r5, #22
 8015be0:	197b      	adds	r3, r7, r5
 8015be2:	2200      	movs	r2, #0
 8015be4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015be6:	68fa      	ldr	r2, [r7, #12]
 8015be8:	23b0      	movs	r3, #176	@ 0xb0
 8015bea:	009b      	lsls	r3, r3, #2
 8015bec:	58d0      	ldr	r0, [r2, r3]
 8015bee:	193b      	adds	r3, r7, r4
 8015bf0:	881d      	ldrh	r5, [r3, #0]
 8015bf2:	000e      	movs	r6, r1
 8015bf4:	187c      	adds	r4, r7, r1
 8015bf6:	687a      	ldr	r2, [r7, #4]
 8015bf8:	230b      	movs	r3, #11
 8015bfa:	18fb      	adds	r3, r7, r3
 8015bfc:	7819      	ldrb	r1, [r3, #0]
 8015bfe:	002b      	movs	r3, r5
 8015c00:	f7f7 fb11 	bl	800d226 <HAL_PCD_EP_Receive>
 8015c04:	0003      	movs	r3, r0
 8015c06:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c08:	2516      	movs	r5, #22
 8015c0a:	197c      	adds	r4, r7, r5
 8015c0c:	19bb      	adds	r3, r7, r6
 8015c0e:	781b      	ldrb	r3, [r3, #0]
 8015c10:	0018      	movs	r0, r3
 8015c12:	f000 f83a 	bl	8015c8a <USBD_Get_USB_Status>
 8015c16:	0003      	movs	r3, r0
 8015c18:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015c1a:	197b      	adds	r3, r7, r5
 8015c1c:	781b      	ldrb	r3, [r3, #0]
}
 8015c1e:	0018      	movs	r0, r3
 8015c20:	46bd      	mov	sp, r7
 8015c22:	b007      	add	sp, #28
 8015c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015c26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015c26:	b580      	push	{r7, lr}
 8015c28:	b082      	sub	sp, #8
 8015c2a:	af00      	add	r7, sp, #0
 8015c2c:	6078      	str	r0, [r7, #4]
 8015c2e:	000a      	movs	r2, r1
 8015c30:	1cfb      	adds	r3, r7, #3
 8015c32:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015c34:	687a      	ldr	r2, [r7, #4]
 8015c36:	23b0      	movs	r3, #176	@ 0xb0
 8015c38:	009b      	lsls	r3, r3, #2
 8015c3a:	58d2      	ldr	r2, [r2, r3]
 8015c3c:	1cfb      	adds	r3, r7, #3
 8015c3e:	781b      	ldrb	r3, [r3, #0]
 8015c40:	0019      	movs	r1, r3
 8015c42:	0010      	movs	r0, r2
 8015c44:	f7f7 fb26 	bl	800d294 <HAL_PCD_EP_GetRxCount>
 8015c48:	0003      	movs	r3, r0
}
 8015c4a:	0018      	movs	r0, r3
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	b002      	add	sp, #8
 8015c50:	bd80      	pop	{r7, pc}
	...

08015c54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b082      	sub	sp, #8
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015c5c:	4b02      	ldr	r3, [pc, #8]	@ (8015c68 <USBD_static_malloc+0x14>)
}
 8015c5e:	0018      	movs	r0, r3
 8015c60:	46bd      	mov	sp, r7
 8015c62:	b002      	add	sp, #8
 8015c64:	bd80      	pop	{r7, pc}
 8015c66:	46c0      	nop			@ (mov r8, r8)
 8015c68:	20004044 	.word	0x20004044

08015c6c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b082      	sub	sp, #8
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]

}
 8015c74:	46c0      	nop			@ (mov r8, r8)
 8015c76:	46bd      	mov	sp, r7
 8015c78:	b002      	add	sp, #8
 8015c7a:	bd80      	pop	{r7, pc}

08015c7c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015c80:	f7ef fed6 	bl	8005a30 <SystemClock_Config>
}
 8015c84:	46c0      	nop			@ (mov r8, r8)
 8015c86:	46bd      	mov	sp, r7
 8015c88:	bd80      	pop	{r7, pc}

08015c8a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015c8a:	b580      	push	{r7, lr}
 8015c8c:	b084      	sub	sp, #16
 8015c8e:	af00      	add	r7, sp, #0
 8015c90:	0002      	movs	r2, r0
 8015c92:	1dfb      	adds	r3, r7, #7
 8015c94:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c96:	230f      	movs	r3, #15
 8015c98:	18fb      	adds	r3, r7, r3
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8015c9e:	1dfb      	adds	r3, r7, #7
 8015ca0:	781b      	ldrb	r3, [r3, #0]
 8015ca2:	2b03      	cmp	r3, #3
 8015ca4:	d017      	beq.n	8015cd6 <USBD_Get_USB_Status+0x4c>
 8015ca6:	dc1b      	bgt.n	8015ce0 <USBD_Get_USB_Status+0x56>
 8015ca8:	2b02      	cmp	r3, #2
 8015caa:	d00f      	beq.n	8015ccc <USBD_Get_USB_Status+0x42>
 8015cac:	dc18      	bgt.n	8015ce0 <USBD_Get_USB_Status+0x56>
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d002      	beq.n	8015cb8 <USBD_Get_USB_Status+0x2e>
 8015cb2:	2b01      	cmp	r3, #1
 8015cb4:	d005      	beq.n	8015cc2 <USBD_Get_USB_Status+0x38>
 8015cb6:	e013      	b.n	8015ce0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015cb8:	230f      	movs	r3, #15
 8015cba:	18fb      	adds	r3, r7, r3
 8015cbc:	2200      	movs	r2, #0
 8015cbe:	701a      	strb	r2, [r3, #0]
    break;
 8015cc0:	e013      	b.n	8015cea <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015cc2:	230f      	movs	r3, #15
 8015cc4:	18fb      	adds	r3, r7, r3
 8015cc6:	2202      	movs	r2, #2
 8015cc8:	701a      	strb	r2, [r3, #0]
    break;
 8015cca:	e00e      	b.n	8015cea <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015ccc:	230f      	movs	r3, #15
 8015cce:	18fb      	adds	r3, r7, r3
 8015cd0:	2201      	movs	r2, #1
 8015cd2:	701a      	strb	r2, [r3, #0]
    break;
 8015cd4:	e009      	b.n	8015cea <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015cd6:	230f      	movs	r3, #15
 8015cd8:	18fb      	adds	r3, r7, r3
 8015cda:	2202      	movs	r2, #2
 8015cdc:	701a      	strb	r2, [r3, #0]
    break;
 8015cde:	e004      	b.n	8015cea <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8015ce0:	230f      	movs	r3, #15
 8015ce2:	18fb      	adds	r3, r7, r3
 8015ce4:	2202      	movs	r2, #2
 8015ce6:	701a      	strb	r2, [r3, #0]
    break;
 8015ce8:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8015cea:	230f      	movs	r3, #15
 8015cec:	18fb      	adds	r3, r7, r3
 8015cee:	781b      	ldrb	r3, [r3, #0]
}
 8015cf0:	0018      	movs	r0, r3
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	b004      	add	sp, #16
 8015cf6:	bd80      	pop	{r7, pc}

08015cf8 <__cvt>:
 8015cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cfa:	001f      	movs	r7, r3
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	0016      	movs	r6, r2
 8015d00:	b08b      	sub	sp, #44	@ 0x2c
 8015d02:	429f      	cmp	r7, r3
 8015d04:	da04      	bge.n	8015d10 <__cvt+0x18>
 8015d06:	2180      	movs	r1, #128	@ 0x80
 8015d08:	0609      	lsls	r1, r1, #24
 8015d0a:	187b      	adds	r3, r7, r1
 8015d0c:	001f      	movs	r7, r3
 8015d0e:	232d      	movs	r3, #45	@ 0x2d
 8015d10:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015d12:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8015d14:	7013      	strb	r3, [r2, #0]
 8015d16:	2320      	movs	r3, #32
 8015d18:	2203      	movs	r2, #3
 8015d1a:	439d      	bics	r5, r3
 8015d1c:	2d46      	cmp	r5, #70	@ 0x46
 8015d1e:	d007      	beq.n	8015d30 <__cvt+0x38>
 8015d20:	002b      	movs	r3, r5
 8015d22:	3b45      	subs	r3, #69	@ 0x45
 8015d24:	4259      	negs	r1, r3
 8015d26:	414b      	adcs	r3, r1
 8015d28:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8015d2a:	3a01      	subs	r2, #1
 8015d2c:	18cb      	adds	r3, r1, r3
 8015d2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8015d30:	ab09      	add	r3, sp, #36	@ 0x24
 8015d32:	9304      	str	r3, [sp, #16]
 8015d34:	ab08      	add	r3, sp, #32
 8015d36:	9303      	str	r3, [sp, #12]
 8015d38:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015d3a:	9200      	str	r2, [sp, #0]
 8015d3c:	9302      	str	r3, [sp, #8]
 8015d3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015d40:	0032      	movs	r2, r6
 8015d42:	9301      	str	r3, [sp, #4]
 8015d44:	003b      	movs	r3, r7
 8015d46:	f000 ff05 	bl	8016b54 <_dtoa_r>
 8015d4a:	0004      	movs	r4, r0
 8015d4c:	2d47      	cmp	r5, #71	@ 0x47
 8015d4e:	d11b      	bne.n	8015d88 <__cvt+0x90>
 8015d50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015d52:	07db      	lsls	r3, r3, #31
 8015d54:	d511      	bpl.n	8015d7a <__cvt+0x82>
 8015d56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015d58:	18c3      	adds	r3, r0, r3
 8015d5a:	9307      	str	r3, [sp, #28]
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	2300      	movs	r3, #0
 8015d60:	0030      	movs	r0, r6
 8015d62:	0039      	movs	r1, r7
 8015d64:	f7ea fb72 	bl	800044c <__aeabi_dcmpeq>
 8015d68:	2800      	cmp	r0, #0
 8015d6a:	d001      	beq.n	8015d70 <__cvt+0x78>
 8015d6c:	9b07      	ldr	r3, [sp, #28]
 8015d6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d70:	2230      	movs	r2, #48	@ 0x30
 8015d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d74:	9907      	ldr	r1, [sp, #28]
 8015d76:	428b      	cmp	r3, r1
 8015d78:	d320      	bcc.n	8015dbc <__cvt+0xc4>
 8015d7a:	0020      	movs	r0, r4
 8015d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d7e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8015d80:	1b1b      	subs	r3, r3, r4
 8015d82:	6013      	str	r3, [r2, #0]
 8015d84:	b00b      	add	sp, #44	@ 0x2c
 8015d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015d8a:	18c3      	adds	r3, r0, r3
 8015d8c:	9307      	str	r3, [sp, #28]
 8015d8e:	2d46      	cmp	r5, #70	@ 0x46
 8015d90:	d1e4      	bne.n	8015d5c <__cvt+0x64>
 8015d92:	7803      	ldrb	r3, [r0, #0]
 8015d94:	2b30      	cmp	r3, #48	@ 0x30
 8015d96:	d10c      	bne.n	8015db2 <__cvt+0xba>
 8015d98:	2200      	movs	r2, #0
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	0030      	movs	r0, r6
 8015d9e:	0039      	movs	r1, r7
 8015da0:	f7ea fb54 	bl	800044c <__aeabi_dcmpeq>
 8015da4:	2800      	cmp	r0, #0
 8015da6:	d104      	bne.n	8015db2 <__cvt+0xba>
 8015da8:	2301      	movs	r3, #1
 8015daa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015dac:	1a9b      	subs	r3, r3, r2
 8015dae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015db0:	6013      	str	r3, [r2, #0]
 8015db2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015db4:	9a07      	ldr	r2, [sp, #28]
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	18d3      	adds	r3, r2, r3
 8015dba:	e7ce      	b.n	8015d5a <__cvt+0x62>
 8015dbc:	1c59      	adds	r1, r3, #1
 8015dbe:	9109      	str	r1, [sp, #36]	@ 0x24
 8015dc0:	701a      	strb	r2, [r3, #0]
 8015dc2:	e7d6      	b.n	8015d72 <__cvt+0x7a>

08015dc4 <__exponent>:
 8015dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015dc6:	232b      	movs	r3, #43	@ 0x2b
 8015dc8:	0005      	movs	r5, r0
 8015dca:	000c      	movs	r4, r1
 8015dcc:	b085      	sub	sp, #20
 8015dce:	7002      	strb	r2, [r0, #0]
 8015dd0:	2900      	cmp	r1, #0
 8015dd2:	da01      	bge.n	8015dd8 <__exponent+0x14>
 8015dd4:	424c      	negs	r4, r1
 8015dd6:	3302      	adds	r3, #2
 8015dd8:	706b      	strb	r3, [r5, #1]
 8015dda:	2c09      	cmp	r4, #9
 8015ddc:	dd2c      	ble.n	8015e38 <__exponent+0x74>
 8015dde:	ab02      	add	r3, sp, #8
 8015de0:	1dde      	adds	r6, r3, #7
 8015de2:	0020      	movs	r0, r4
 8015de4:	210a      	movs	r1, #10
 8015de6:	f7ea fb1b 	bl	8000420 <__aeabi_idivmod>
 8015dea:	0037      	movs	r7, r6
 8015dec:	3130      	adds	r1, #48	@ 0x30
 8015dee:	3e01      	subs	r6, #1
 8015df0:	0020      	movs	r0, r4
 8015df2:	7031      	strb	r1, [r6, #0]
 8015df4:	210a      	movs	r1, #10
 8015df6:	9401      	str	r4, [sp, #4]
 8015df8:	f7ea fa2c 	bl	8000254 <__divsi3>
 8015dfc:	9b01      	ldr	r3, [sp, #4]
 8015dfe:	0004      	movs	r4, r0
 8015e00:	2b63      	cmp	r3, #99	@ 0x63
 8015e02:	dcee      	bgt.n	8015de2 <__exponent+0x1e>
 8015e04:	1eba      	subs	r2, r7, #2
 8015e06:	1ca8      	adds	r0, r5, #2
 8015e08:	0001      	movs	r1, r0
 8015e0a:	0013      	movs	r3, r2
 8015e0c:	3430      	adds	r4, #48	@ 0x30
 8015e0e:	7014      	strb	r4, [r2, #0]
 8015e10:	ac02      	add	r4, sp, #8
 8015e12:	3407      	adds	r4, #7
 8015e14:	429c      	cmp	r4, r3
 8015e16:	d80a      	bhi.n	8015e2e <__exponent+0x6a>
 8015e18:	2300      	movs	r3, #0
 8015e1a:	42a2      	cmp	r2, r4
 8015e1c:	d803      	bhi.n	8015e26 <__exponent+0x62>
 8015e1e:	3309      	adds	r3, #9
 8015e20:	aa02      	add	r2, sp, #8
 8015e22:	189b      	adds	r3, r3, r2
 8015e24:	1bdb      	subs	r3, r3, r7
 8015e26:	18c0      	adds	r0, r0, r3
 8015e28:	1b40      	subs	r0, r0, r5
 8015e2a:	b005      	add	sp, #20
 8015e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e2e:	781c      	ldrb	r4, [r3, #0]
 8015e30:	3301      	adds	r3, #1
 8015e32:	700c      	strb	r4, [r1, #0]
 8015e34:	3101      	adds	r1, #1
 8015e36:	e7eb      	b.n	8015e10 <__exponent+0x4c>
 8015e38:	2330      	movs	r3, #48	@ 0x30
 8015e3a:	18e4      	adds	r4, r4, r3
 8015e3c:	70ab      	strb	r3, [r5, #2]
 8015e3e:	1d28      	adds	r0, r5, #4
 8015e40:	70ec      	strb	r4, [r5, #3]
 8015e42:	e7f1      	b.n	8015e28 <__exponent+0x64>

08015e44 <_printf_float>:
 8015e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e46:	b097      	sub	sp, #92	@ 0x5c
 8015e48:	000d      	movs	r5, r1
 8015e4a:	920a      	str	r2, [sp, #40]	@ 0x28
 8015e4c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8015e4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015e50:	9009      	str	r0, [sp, #36]	@ 0x24
 8015e52:	f000 fd5d 	bl	8016910 <_localeconv_r>
 8015e56:	6803      	ldr	r3, [r0, #0]
 8015e58:	0018      	movs	r0, r3
 8015e5a:	930d      	str	r3, [sp, #52]	@ 0x34
 8015e5c:	f7ea f954 	bl	8000108 <strlen>
 8015e60:	2300      	movs	r3, #0
 8015e62:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015e64:	9314      	str	r3, [sp, #80]	@ 0x50
 8015e66:	7e2b      	ldrb	r3, [r5, #24]
 8015e68:	2207      	movs	r2, #7
 8015e6a:	930c      	str	r3, [sp, #48]	@ 0x30
 8015e6c:	682b      	ldr	r3, [r5, #0]
 8015e6e:	930e      	str	r3, [sp, #56]	@ 0x38
 8015e70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015e72:	6823      	ldr	r3, [r4, #0]
 8015e74:	05c9      	lsls	r1, r1, #23
 8015e76:	d545      	bpl.n	8015f04 <_printf_float+0xc0>
 8015e78:	189b      	adds	r3, r3, r2
 8015e7a:	4393      	bics	r3, r2
 8015e7c:	001a      	movs	r2, r3
 8015e7e:	3208      	adds	r2, #8
 8015e80:	6022      	str	r2, [r4, #0]
 8015e82:	2201      	movs	r2, #1
 8015e84:	681e      	ldr	r6, [r3, #0]
 8015e86:	685f      	ldr	r7, [r3, #4]
 8015e88:	007b      	lsls	r3, r7, #1
 8015e8a:	085b      	lsrs	r3, r3, #1
 8015e8c:	9311      	str	r3, [sp, #68]	@ 0x44
 8015e8e:	9610      	str	r6, [sp, #64]	@ 0x40
 8015e90:	64ae      	str	r6, [r5, #72]	@ 0x48
 8015e92:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8015e94:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015e96:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015e98:	4ba7      	ldr	r3, [pc, #668]	@ (8016138 <_printf_float+0x2f4>)
 8015e9a:	4252      	negs	r2, r2
 8015e9c:	f7ed f9b0 	bl	8003200 <__aeabi_dcmpun>
 8015ea0:	2800      	cmp	r0, #0
 8015ea2:	d131      	bne.n	8015f08 <_printf_float+0xc4>
 8015ea4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015ea6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015ea8:	2201      	movs	r2, #1
 8015eaa:	4ba3      	ldr	r3, [pc, #652]	@ (8016138 <_printf_float+0x2f4>)
 8015eac:	4252      	negs	r2, r2
 8015eae:	f7ea fadd 	bl	800046c <__aeabi_dcmple>
 8015eb2:	2800      	cmp	r0, #0
 8015eb4:	d128      	bne.n	8015f08 <_printf_float+0xc4>
 8015eb6:	2200      	movs	r2, #0
 8015eb8:	2300      	movs	r3, #0
 8015eba:	0030      	movs	r0, r6
 8015ebc:	0039      	movs	r1, r7
 8015ebe:	f7ea facb 	bl	8000458 <__aeabi_dcmplt>
 8015ec2:	2800      	cmp	r0, #0
 8015ec4:	d003      	beq.n	8015ece <_printf_float+0x8a>
 8015ec6:	002b      	movs	r3, r5
 8015ec8:	222d      	movs	r2, #45	@ 0x2d
 8015eca:	3343      	adds	r3, #67	@ 0x43
 8015ecc:	701a      	strb	r2, [r3, #0]
 8015ece:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015ed0:	4f9a      	ldr	r7, [pc, #616]	@ (801613c <_printf_float+0x2f8>)
 8015ed2:	2b47      	cmp	r3, #71	@ 0x47
 8015ed4:	d900      	bls.n	8015ed8 <_printf_float+0x94>
 8015ed6:	4f9a      	ldr	r7, [pc, #616]	@ (8016140 <_printf_float+0x2fc>)
 8015ed8:	2303      	movs	r3, #3
 8015eda:	2400      	movs	r4, #0
 8015edc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015ede:	612b      	str	r3, [r5, #16]
 8015ee0:	3301      	adds	r3, #1
 8015ee2:	439a      	bics	r2, r3
 8015ee4:	602a      	str	r2, [r5, #0]
 8015ee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015ee8:	0029      	movs	r1, r5
 8015eea:	9300      	str	r3, [sp, #0]
 8015eec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015eee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015ef0:	aa15      	add	r2, sp, #84	@ 0x54
 8015ef2:	f000 f9e5 	bl	80162c0 <_printf_common>
 8015ef6:	3001      	adds	r0, #1
 8015ef8:	d000      	beq.n	8015efc <_printf_float+0xb8>
 8015efa:	e09f      	b.n	801603c <_printf_float+0x1f8>
 8015efc:	2001      	movs	r0, #1
 8015efe:	4240      	negs	r0, r0
 8015f00:	b017      	add	sp, #92	@ 0x5c
 8015f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f04:	3307      	adds	r3, #7
 8015f06:	e7b8      	b.n	8015e7a <_printf_float+0x36>
 8015f08:	0032      	movs	r2, r6
 8015f0a:	003b      	movs	r3, r7
 8015f0c:	0030      	movs	r0, r6
 8015f0e:	0039      	movs	r1, r7
 8015f10:	f7ed f976 	bl	8003200 <__aeabi_dcmpun>
 8015f14:	2800      	cmp	r0, #0
 8015f16:	d00b      	beq.n	8015f30 <_printf_float+0xec>
 8015f18:	2f00      	cmp	r7, #0
 8015f1a:	da03      	bge.n	8015f24 <_printf_float+0xe0>
 8015f1c:	002b      	movs	r3, r5
 8015f1e:	222d      	movs	r2, #45	@ 0x2d
 8015f20:	3343      	adds	r3, #67	@ 0x43
 8015f22:	701a      	strb	r2, [r3, #0]
 8015f24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015f26:	4f87      	ldr	r7, [pc, #540]	@ (8016144 <_printf_float+0x300>)
 8015f28:	2b47      	cmp	r3, #71	@ 0x47
 8015f2a:	d9d5      	bls.n	8015ed8 <_printf_float+0x94>
 8015f2c:	4f86      	ldr	r7, [pc, #536]	@ (8016148 <_printf_float+0x304>)
 8015f2e:	e7d3      	b.n	8015ed8 <_printf_float+0x94>
 8015f30:	2220      	movs	r2, #32
 8015f32:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8015f34:	686b      	ldr	r3, [r5, #4]
 8015f36:	4394      	bics	r4, r2
 8015f38:	1c5a      	adds	r2, r3, #1
 8015f3a:	d146      	bne.n	8015fca <_printf_float+0x186>
 8015f3c:	3307      	adds	r3, #7
 8015f3e:	606b      	str	r3, [r5, #4]
 8015f40:	2380      	movs	r3, #128	@ 0x80
 8015f42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015f44:	00db      	lsls	r3, r3, #3
 8015f46:	4313      	orrs	r3, r2
 8015f48:	2200      	movs	r2, #0
 8015f4a:	602b      	str	r3, [r5, #0]
 8015f4c:	9206      	str	r2, [sp, #24]
 8015f4e:	aa14      	add	r2, sp, #80	@ 0x50
 8015f50:	9205      	str	r2, [sp, #20]
 8015f52:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015f54:	a90a      	add	r1, sp, #40	@ 0x28
 8015f56:	9204      	str	r2, [sp, #16]
 8015f58:	aa13      	add	r2, sp, #76	@ 0x4c
 8015f5a:	9203      	str	r2, [sp, #12]
 8015f5c:	2223      	movs	r2, #35	@ 0x23
 8015f5e:	1852      	adds	r2, r2, r1
 8015f60:	9202      	str	r2, [sp, #8]
 8015f62:	9301      	str	r3, [sp, #4]
 8015f64:	686b      	ldr	r3, [r5, #4]
 8015f66:	0032      	movs	r2, r6
 8015f68:	9300      	str	r3, [sp, #0]
 8015f6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015f6c:	003b      	movs	r3, r7
 8015f6e:	f7ff fec3 	bl	8015cf8 <__cvt>
 8015f72:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015f74:	0007      	movs	r7, r0
 8015f76:	2c47      	cmp	r4, #71	@ 0x47
 8015f78:	d12d      	bne.n	8015fd6 <_printf_float+0x192>
 8015f7a:	1cd3      	adds	r3, r2, #3
 8015f7c:	db02      	blt.n	8015f84 <_printf_float+0x140>
 8015f7e:	686b      	ldr	r3, [r5, #4]
 8015f80:	429a      	cmp	r2, r3
 8015f82:	dd48      	ble.n	8016016 <_printf_float+0x1d2>
 8015f84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015f86:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8015f88:	3b02      	subs	r3, #2
 8015f8a:	b2db      	uxtb	r3, r3
 8015f8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8015f8e:	0028      	movs	r0, r5
 8015f90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015f92:	3901      	subs	r1, #1
 8015f94:	3050      	adds	r0, #80	@ 0x50
 8015f96:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015f98:	f7ff ff14 	bl	8015dc4 <__exponent>
 8015f9c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015f9e:	0004      	movs	r4, r0
 8015fa0:	1813      	adds	r3, r2, r0
 8015fa2:	612b      	str	r3, [r5, #16]
 8015fa4:	2a01      	cmp	r2, #1
 8015fa6:	dc02      	bgt.n	8015fae <_printf_float+0x16a>
 8015fa8:	682a      	ldr	r2, [r5, #0]
 8015faa:	07d2      	lsls	r2, r2, #31
 8015fac:	d501      	bpl.n	8015fb2 <_printf_float+0x16e>
 8015fae:	3301      	adds	r3, #1
 8015fb0:	612b      	str	r3, [r5, #16]
 8015fb2:	2323      	movs	r3, #35	@ 0x23
 8015fb4:	aa0a      	add	r2, sp, #40	@ 0x28
 8015fb6:	189b      	adds	r3, r3, r2
 8015fb8:	781b      	ldrb	r3, [r3, #0]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d100      	bne.n	8015fc0 <_printf_float+0x17c>
 8015fbe:	e792      	b.n	8015ee6 <_printf_float+0xa2>
 8015fc0:	002b      	movs	r3, r5
 8015fc2:	222d      	movs	r2, #45	@ 0x2d
 8015fc4:	3343      	adds	r3, #67	@ 0x43
 8015fc6:	701a      	strb	r2, [r3, #0]
 8015fc8:	e78d      	b.n	8015ee6 <_printf_float+0xa2>
 8015fca:	2c47      	cmp	r4, #71	@ 0x47
 8015fcc:	d1b8      	bne.n	8015f40 <_printf_float+0xfc>
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d1b6      	bne.n	8015f40 <_printf_float+0xfc>
 8015fd2:	3301      	adds	r3, #1
 8015fd4:	e7b3      	b.n	8015f3e <_printf_float+0xfa>
 8015fd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015fd8:	0011      	movs	r1, r2
 8015fda:	2b65      	cmp	r3, #101	@ 0x65
 8015fdc:	d9d7      	bls.n	8015f8e <_printf_float+0x14a>
 8015fde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015fe0:	2b66      	cmp	r3, #102	@ 0x66
 8015fe2:	d11a      	bne.n	801601a <_printf_float+0x1d6>
 8015fe4:	686b      	ldr	r3, [r5, #4]
 8015fe6:	2a00      	cmp	r2, #0
 8015fe8:	dd09      	ble.n	8015ffe <_printf_float+0x1ba>
 8015fea:	612a      	str	r2, [r5, #16]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d102      	bne.n	8015ff6 <_printf_float+0x1b2>
 8015ff0:	6829      	ldr	r1, [r5, #0]
 8015ff2:	07c9      	lsls	r1, r1, #31
 8015ff4:	d50b      	bpl.n	801600e <_printf_float+0x1ca>
 8015ff6:	3301      	adds	r3, #1
 8015ff8:	189b      	adds	r3, r3, r2
 8015ffa:	612b      	str	r3, [r5, #16]
 8015ffc:	e007      	b.n	801600e <_printf_float+0x1ca>
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d103      	bne.n	801600a <_printf_float+0x1c6>
 8016002:	2201      	movs	r2, #1
 8016004:	6829      	ldr	r1, [r5, #0]
 8016006:	4211      	tst	r1, r2
 8016008:	d000      	beq.n	801600c <_printf_float+0x1c8>
 801600a:	1c9a      	adds	r2, r3, #2
 801600c:	612a      	str	r2, [r5, #16]
 801600e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016010:	2400      	movs	r4, #0
 8016012:	65ab      	str	r3, [r5, #88]	@ 0x58
 8016014:	e7cd      	b.n	8015fb2 <_printf_float+0x16e>
 8016016:	2367      	movs	r3, #103	@ 0x67
 8016018:	930c      	str	r3, [sp, #48]	@ 0x30
 801601a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801601c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801601e:	4299      	cmp	r1, r3
 8016020:	db06      	blt.n	8016030 <_printf_float+0x1ec>
 8016022:	682b      	ldr	r3, [r5, #0]
 8016024:	6129      	str	r1, [r5, #16]
 8016026:	07db      	lsls	r3, r3, #31
 8016028:	d5f1      	bpl.n	801600e <_printf_float+0x1ca>
 801602a:	3101      	adds	r1, #1
 801602c:	6129      	str	r1, [r5, #16]
 801602e:	e7ee      	b.n	801600e <_printf_float+0x1ca>
 8016030:	2201      	movs	r2, #1
 8016032:	2900      	cmp	r1, #0
 8016034:	dce0      	bgt.n	8015ff8 <_printf_float+0x1b4>
 8016036:	1892      	adds	r2, r2, r2
 8016038:	1a52      	subs	r2, r2, r1
 801603a:	e7dd      	b.n	8015ff8 <_printf_float+0x1b4>
 801603c:	682a      	ldr	r2, [r5, #0]
 801603e:	0553      	lsls	r3, r2, #21
 8016040:	d408      	bmi.n	8016054 <_printf_float+0x210>
 8016042:	692b      	ldr	r3, [r5, #16]
 8016044:	003a      	movs	r2, r7
 8016046:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016048:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801604a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801604c:	47a0      	blx	r4
 801604e:	3001      	adds	r0, #1
 8016050:	d129      	bne.n	80160a6 <_printf_float+0x262>
 8016052:	e753      	b.n	8015efc <_printf_float+0xb8>
 8016054:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016056:	2b65      	cmp	r3, #101	@ 0x65
 8016058:	d800      	bhi.n	801605c <_printf_float+0x218>
 801605a:	e0da      	b.n	8016212 <_printf_float+0x3ce>
 801605c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801605e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8016060:	2200      	movs	r2, #0
 8016062:	2300      	movs	r3, #0
 8016064:	f7ea f9f2 	bl	800044c <__aeabi_dcmpeq>
 8016068:	2800      	cmp	r0, #0
 801606a:	d033      	beq.n	80160d4 <_printf_float+0x290>
 801606c:	2301      	movs	r3, #1
 801606e:	4a37      	ldr	r2, [pc, #220]	@ (801614c <_printf_float+0x308>)
 8016070:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016072:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016074:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016076:	47a0      	blx	r4
 8016078:	3001      	adds	r0, #1
 801607a:	d100      	bne.n	801607e <_printf_float+0x23a>
 801607c:	e73e      	b.n	8015efc <_printf_float+0xb8>
 801607e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8016080:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016082:	42b3      	cmp	r3, r6
 8016084:	db02      	blt.n	801608c <_printf_float+0x248>
 8016086:	682b      	ldr	r3, [r5, #0]
 8016088:	07db      	lsls	r3, r3, #31
 801608a:	d50c      	bpl.n	80160a6 <_printf_float+0x262>
 801608c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801608e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016090:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016092:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016094:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016096:	47a0      	blx	r4
 8016098:	2400      	movs	r4, #0
 801609a:	3001      	adds	r0, #1
 801609c:	d100      	bne.n	80160a0 <_printf_float+0x25c>
 801609e:	e72d      	b.n	8015efc <_printf_float+0xb8>
 80160a0:	1e73      	subs	r3, r6, #1
 80160a2:	42a3      	cmp	r3, r4
 80160a4:	dc0a      	bgt.n	80160bc <_printf_float+0x278>
 80160a6:	682b      	ldr	r3, [r5, #0]
 80160a8:	079b      	lsls	r3, r3, #30
 80160aa:	d500      	bpl.n	80160ae <_printf_float+0x26a>
 80160ac:	e105      	b.n	80162ba <_printf_float+0x476>
 80160ae:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80160b0:	68e8      	ldr	r0, [r5, #12]
 80160b2:	4298      	cmp	r0, r3
 80160b4:	db00      	blt.n	80160b8 <_printf_float+0x274>
 80160b6:	e723      	b.n	8015f00 <_printf_float+0xbc>
 80160b8:	0018      	movs	r0, r3
 80160ba:	e721      	b.n	8015f00 <_printf_float+0xbc>
 80160bc:	002a      	movs	r2, r5
 80160be:	2301      	movs	r3, #1
 80160c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80160c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80160c4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80160c6:	321a      	adds	r2, #26
 80160c8:	47b8      	blx	r7
 80160ca:	3001      	adds	r0, #1
 80160cc:	d100      	bne.n	80160d0 <_printf_float+0x28c>
 80160ce:	e715      	b.n	8015efc <_printf_float+0xb8>
 80160d0:	3401      	adds	r4, #1
 80160d2:	e7e5      	b.n	80160a0 <_printf_float+0x25c>
 80160d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	dc3a      	bgt.n	8016150 <_printf_float+0x30c>
 80160da:	2301      	movs	r3, #1
 80160dc:	4a1b      	ldr	r2, [pc, #108]	@ (801614c <_printf_float+0x308>)
 80160de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80160e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80160e2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80160e4:	47a0      	blx	r4
 80160e6:	3001      	adds	r0, #1
 80160e8:	d100      	bne.n	80160ec <_printf_float+0x2a8>
 80160ea:	e707      	b.n	8015efc <_printf_float+0xb8>
 80160ec:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80160ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80160f0:	4333      	orrs	r3, r6
 80160f2:	d102      	bne.n	80160fa <_printf_float+0x2b6>
 80160f4:	682b      	ldr	r3, [r5, #0]
 80160f6:	07db      	lsls	r3, r3, #31
 80160f8:	d5d5      	bpl.n	80160a6 <_printf_float+0x262>
 80160fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80160fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80160fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016100:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016102:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016104:	47a0      	blx	r4
 8016106:	2300      	movs	r3, #0
 8016108:	3001      	adds	r0, #1
 801610a:	d100      	bne.n	801610e <_printf_float+0x2ca>
 801610c:	e6f6      	b.n	8015efc <_printf_float+0xb8>
 801610e:	930c      	str	r3, [sp, #48]	@ 0x30
 8016110:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016112:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016114:	425b      	negs	r3, r3
 8016116:	4293      	cmp	r3, r2
 8016118:	dc01      	bgt.n	801611e <_printf_float+0x2da>
 801611a:	0033      	movs	r3, r6
 801611c:	e792      	b.n	8016044 <_printf_float+0x200>
 801611e:	002a      	movs	r2, r5
 8016120:	2301      	movs	r3, #1
 8016122:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016124:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016126:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016128:	321a      	adds	r2, #26
 801612a:	47a0      	blx	r4
 801612c:	3001      	adds	r0, #1
 801612e:	d100      	bne.n	8016132 <_printf_float+0x2ee>
 8016130:	e6e4      	b.n	8015efc <_printf_float+0xb8>
 8016132:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016134:	3301      	adds	r3, #1
 8016136:	e7ea      	b.n	801610e <_printf_float+0x2ca>
 8016138:	7fefffff 	.word	0x7fefffff
 801613c:	0801a36c 	.word	0x0801a36c
 8016140:	0801a370 	.word	0x0801a370
 8016144:	0801a374 	.word	0x0801a374
 8016148:	0801a378 	.word	0x0801a378
 801614c:	0801a37c 	.word	0x0801a37c
 8016150:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016152:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8016154:	930c      	str	r3, [sp, #48]	@ 0x30
 8016156:	429e      	cmp	r6, r3
 8016158:	dd00      	ble.n	801615c <_printf_float+0x318>
 801615a:	001e      	movs	r6, r3
 801615c:	2e00      	cmp	r6, #0
 801615e:	dc31      	bgt.n	80161c4 <_printf_float+0x380>
 8016160:	43f3      	mvns	r3, r6
 8016162:	2400      	movs	r4, #0
 8016164:	17db      	asrs	r3, r3, #31
 8016166:	4033      	ands	r3, r6
 8016168:	930e      	str	r3, [sp, #56]	@ 0x38
 801616a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801616c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801616e:	1af3      	subs	r3, r6, r3
 8016170:	42a3      	cmp	r3, r4
 8016172:	dc30      	bgt.n	80161d6 <_printf_float+0x392>
 8016174:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016176:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016178:	429a      	cmp	r2, r3
 801617a:	dc38      	bgt.n	80161ee <_printf_float+0x3aa>
 801617c:	682b      	ldr	r3, [r5, #0]
 801617e:	07db      	lsls	r3, r3, #31
 8016180:	d435      	bmi.n	80161ee <_printf_float+0x3aa>
 8016182:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8016184:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016186:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016188:	1b9b      	subs	r3, r3, r6
 801618a:	1b14      	subs	r4, r2, r4
 801618c:	429c      	cmp	r4, r3
 801618e:	dd00      	ble.n	8016192 <_printf_float+0x34e>
 8016190:	001c      	movs	r4, r3
 8016192:	2c00      	cmp	r4, #0
 8016194:	dc34      	bgt.n	8016200 <_printf_float+0x3bc>
 8016196:	43e3      	mvns	r3, r4
 8016198:	2600      	movs	r6, #0
 801619a:	17db      	asrs	r3, r3, #31
 801619c:	401c      	ands	r4, r3
 801619e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80161a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80161a2:	1ad3      	subs	r3, r2, r3
 80161a4:	1b1b      	subs	r3, r3, r4
 80161a6:	42b3      	cmp	r3, r6
 80161a8:	dc00      	bgt.n	80161ac <_printf_float+0x368>
 80161aa:	e77c      	b.n	80160a6 <_printf_float+0x262>
 80161ac:	002a      	movs	r2, r5
 80161ae:	2301      	movs	r3, #1
 80161b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80161b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80161b4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80161b6:	321a      	adds	r2, #26
 80161b8:	47b8      	blx	r7
 80161ba:	3001      	adds	r0, #1
 80161bc:	d100      	bne.n	80161c0 <_printf_float+0x37c>
 80161be:	e69d      	b.n	8015efc <_printf_float+0xb8>
 80161c0:	3601      	adds	r6, #1
 80161c2:	e7ec      	b.n	801619e <_printf_float+0x35a>
 80161c4:	0033      	movs	r3, r6
 80161c6:	003a      	movs	r2, r7
 80161c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80161ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80161cc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80161ce:	47a0      	blx	r4
 80161d0:	3001      	adds	r0, #1
 80161d2:	d1c5      	bne.n	8016160 <_printf_float+0x31c>
 80161d4:	e692      	b.n	8015efc <_printf_float+0xb8>
 80161d6:	002a      	movs	r2, r5
 80161d8:	2301      	movs	r3, #1
 80161da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80161dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80161de:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80161e0:	321a      	adds	r2, #26
 80161e2:	47b0      	blx	r6
 80161e4:	3001      	adds	r0, #1
 80161e6:	d100      	bne.n	80161ea <_printf_float+0x3a6>
 80161e8:	e688      	b.n	8015efc <_printf_float+0xb8>
 80161ea:	3401      	adds	r4, #1
 80161ec:	e7bd      	b.n	801616a <_printf_float+0x326>
 80161ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80161f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80161f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80161f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80161f6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80161f8:	47a0      	blx	r4
 80161fa:	3001      	adds	r0, #1
 80161fc:	d1c1      	bne.n	8016182 <_printf_float+0x33e>
 80161fe:	e67d      	b.n	8015efc <_printf_float+0xb8>
 8016200:	19ba      	adds	r2, r7, r6
 8016202:	0023      	movs	r3, r4
 8016204:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016206:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016208:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801620a:	47b0      	blx	r6
 801620c:	3001      	adds	r0, #1
 801620e:	d1c2      	bne.n	8016196 <_printf_float+0x352>
 8016210:	e674      	b.n	8015efc <_printf_float+0xb8>
 8016212:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016214:	930c      	str	r3, [sp, #48]	@ 0x30
 8016216:	2b01      	cmp	r3, #1
 8016218:	dc02      	bgt.n	8016220 <_printf_float+0x3dc>
 801621a:	2301      	movs	r3, #1
 801621c:	421a      	tst	r2, r3
 801621e:	d039      	beq.n	8016294 <_printf_float+0x450>
 8016220:	2301      	movs	r3, #1
 8016222:	003a      	movs	r2, r7
 8016224:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016228:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801622a:	47b0      	blx	r6
 801622c:	3001      	adds	r0, #1
 801622e:	d100      	bne.n	8016232 <_printf_float+0x3ee>
 8016230:	e664      	b.n	8015efc <_printf_float+0xb8>
 8016232:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016234:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016236:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016238:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801623a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801623c:	47b0      	blx	r6
 801623e:	3001      	adds	r0, #1
 8016240:	d100      	bne.n	8016244 <_printf_float+0x400>
 8016242:	e65b      	b.n	8015efc <_printf_float+0xb8>
 8016244:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8016246:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8016248:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801624a:	2200      	movs	r2, #0
 801624c:	3b01      	subs	r3, #1
 801624e:	930c      	str	r3, [sp, #48]	@ 0x30
 8016250:	2300      	movs	r3, #0
 8016252:	f7ea f8fb 	bl	800044c <__aeabi_dcmpeq>
 8016256:	2800      	cmp	r0, #0
 8016258:	d11a      	bne.n	8016290 <_printf_float+0x44c>
 801625a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801625c:	1c7a      	adds	r2, r7, #1
 801625e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016260:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016262:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8016264:	47b0      	blx	r6
 8016266:	3001      	adds	r0, #1
 8016268:	d10e      	bne.n	8016288 <_printf_float+0x444>
 801626a:	e647      	b.n	8015efc <_printf_float+0xb8>
 801626c:	002a      	movs	r2, r5
 801626e:	2301      	movs	r3, #1
 8016270:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016272:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016274:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016276:	321a      	adds	r2, #26
 8016278:	47b8      	blx	r7
 801627a:	3001      	adds	r0, #1
 801627c:	d100      	bne.n	8016280 <_printf_float+0x43c>
 801627e:	e63d      	b.n	8015efc <_printf_float+0xb8>
 8016280:	3601      	adds	r6, #1
 8016282:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016284:	429e      	cmp	r6, r3
 8016286:	dbf1      	blt.n	801626c <_printf_float+0x428>
 8016288:	002a      	movs	r2, r5
 801628a:	0023      	movs	r3, r4
 801628c:	3250      	adds	r2, #80	@ 0x50
 801628e:	e6da      	b.n	8016046 <_printf_float+0x202>
 8016290:	2600      	movs	r6, #0
 8016292:	e7f6      	b.n	8016282 <_printf_float+0x43e>
 8016294:	003a      	movs	r2, r7
 8016296:	e7e2      	b.n	801625e <_printf_float+0x41a>
 8016298:	002a      	movs	r2, r5
 801629a:	2301      	movs	r3, #1
 801629c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801629e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80162a0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80162a2:	3219      	adds	r2, #25
 80162a4:	47b0      	blx	r6
 80162a6:	3001      	adds	r0, #1
 80162a8:	d100      	bne.n	80162ac <_printf_float+0x468>
 80162aa:	e627      	b.n	8015efc <_printf_float+0xb8>
 80162ac:	3401      	adds	r4, #1
 80162ae:	68eb      	ldr	r3, [r5, #12]
 80162b0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80162b2:	1a9b      	subs	r3, r3, r2
 80162b4:	42a3      	cmp	r3, r4
 80162b6:	dcef      	bgt.n	8016298 <_printf_float+0x454>
 80162b8:	e6f9      	b.n	80160ae <_printf_float+0x26a>
 80162ba:	2400      	movs	r4, #0
 80162bc:	e7f7      	b.n	80162ae <_printf_float+0x46a>
 80162be:	46c0      	nop			@ (mov r8, r8)

080162c0 <_printf_common>:
 80162c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80162c2:	0016      	movs	r6, r2
 80162c4:	9301      	str	r3, [sp, #4]
 80162c6:	688a      	ldr	r2, [r1, #8]
 80162c8:	690b      	ldr	r3, [r1, #16]
 80162ca:	000c      	movs	r4, r1
 80162cc:	9000      	str	r0, [sp, #0]
 80162ce:	4293      	cmp	r3, r2
 80162d0:	da00      	bge.n	80162d4 <_printf_common+0x14>
 80162d2:	0013      	movs	r3, r2
 80162d4:	0022      	movs	r2, r4
 80162d6:	6033      	str	r3, [r6, #0]
 80162d8:	3243      	adds	r2, #67	@ 0x43
 80162da:	7812      	ldrb	r2, [r2, #0]
 80162dc:	2a00      	cmp	r2, #0
 80162de:	d001      	beq.n	80162e4 <_printf_common+0x24>
 80162e0:	3301      	adds	r3, #1
 80162e2:	6033      	str	r3, [r6, #0]
 80162e4:	6823      	ldr	r3, [r4, #0]
 80162e6:	069b      	lsls	r3, r3, #26
 80162e8:	d502      	bpl.n	80162f0 <_printf_common+0x30>
 80162ea:	6833      	ldr	r3, [r6, #0]
 80162ec:	3302      	adds	r3, #2
 80162ee:	6033      	str	r3, [r6, #0]
 80162f0:	6822      	ldr	r2, [r4, #0]
 80162f2:	2306      	movs	r3, #6
 80162f4:	0015      	movs	r5, r2
 80162f6:	401d      	ands	r5, r3
 80162f8:	421a      	tst	r2, r3
 80162fa:	d027      	beq.n	801634c <_printf_common+0x8c>
 80162fc:	0023      	movs	r3, r4
 80162fe:	3343      	adds	r3, #67	@ 0x43
 8016300:	781b      	ldrb	r3, [r3, #0]
 8016302:	1e5a      	subs	r2, r3, #1
 8016304:	4193      	sbcs	r3, r2
 8016306:	6822      	ldr	r2, [r4, #0]
 8016308:	0692      	lsls	r2, r2, #26
 801630a:	d430      	bmi.n	801636e <_printf_common+0xae>
 801630c:	0022      	movs	r2, r4
 801630e:	9901      	ldr	r1, [sp, #4]
 8016310:	9800      	ldr	r0, [sp, #0]
 8016312:	9d08      	ldr	r5, [sp, #32]
 8016314:	3243      	adds	r2, #67	@ 0x43
 8016316:	47a8      	blx	r5
 8016318:	3001      	adds	r0, #1
 801631a:	d025      	beq.n	8016368 <_printf_common+0xa8>
 801631c:	2206      	movs	r2, #6
 801631e:	6823      	ldr	r3, [r4, #0]
 8016320:	2500      	movs	r5, #0
 8016322:	4013      	ands	r3, r2
 8016324:	2b04      	cmp	r3, #4
 8016326:	d105      	bne.n	8016334 <_printf_common+0x74>
 8016328:	6833      	ldr	r3, [r6, #0]
 801632a:	68e5      	ldr	r5, [r4, #12]
 801632c:	1aed      	subs	r5, r5, r3
 801632e:	43eb      	mvns	r3, r5
 8016330:	17db      	asrs	r3, r3, #31
 8016332:	401d      	ands	r5, r3
 8016334:	68a3      	ldr	r3, [r4, #8]
 8016336:	6922      	ldr	r2, [r4, #16]
 8016338:	4293      	cmp	r3, r2
 801633a:	dd01      	ble.n	8016340 <_printf_common+0x80>
 801633c:	1a9b      	subs	r3, r3, r2
 801633e:	18ed      	adds	r5, r5, r3
 8016340:	2600      	movs	r6, #0
 8016342:	42b5      	cmp	r5, r6
 8016344:	d120      	bne.n	8016388 <_printf_common+0xc8>
 8016346:	2000      	movs	r0, #0
 8016348:	e010      	b.n	801636c <_printf_common+0xac>
 801634a:	3501      	adds	r5, #1
 801634c:	68e3      	ldr	r3, [r4, #12]
 801634e:	6832      	ldr	r2, [r6, #0]
 8016350:	1a9b      	subs	r3, r3, r2
 8016352:	42ab      	cmp	r3, r5
 8016354:	ddd2      	ble.n	80162fc <_printf_common+0x3c>
 8016356:	0022      	movs	r2, r4
 8016358:	2301      	movs	r3, #1
 801635a:	9901      	ldr	r1, [sp, #4]
 801635c:	9800      	ldr	r0, [sp, #0]
 801635e:	9f08      	ldr	r7, [sp, #32]
 8016360:	3219      	adds	r2, #25
 8016362:	47b8      	blx	r7
 8016364:	3001      	adds	r0, #1
 8016366:	d1f0      	bne.n	801634a <_printf_common+0x8a>
 8016368:	2001      	movs	r0, #1
 801636a:	4240      	negs	r0, r0
 801636c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801636e:	2030      	movs	r0, #48	@ 0x30
 8016370:	18e1      	adds	r1, r4, r3
 8016372:	3143      	adds	r1, #67	@ 0x43
 8016374:	7008      	strb	r0, [r1, #0]
 8016376:	0021      	movs	r1, r4
 8016378:	1c5a      	adds	r2, r3, #1
 801637a:	3145      	adds	r1, #69	@ 0x45
 801637c:	7809      	ldrb	r1, [r1, #0]
 801637e:	18a2      	adds	r2, r4, r2
 8016380:	3243      	adds	r2, #67	@ 0x43
 8016382:	3302      	adds	r3, #2
 8016384:	7011      	strb	r1, [r2, #0]
 8016386:	e7c1      	b.n	801630c <_printf_common+0x4c>
 8016388:	0022      	movs	r2, r4
 801638a:	2301      	movs	r3, #1
 801638c:	9901      	ldr	r1, [sp, #4]
 801638e:	9800      	ldr	r0, [sp, #0]
 8016390:	9f08      	ldr	r7, [sp, #32]
 8016392:	321a      	adds	r2, #26
 8016394:	47b8      	blx	r7
 8016396:	3001      	adds	r0, #1
 8016398:	d0e6      	beq.n	8016368 <_printf_common+0xa8>
 801639a:	3601      	adds	r6, #1
 801639c:	e7d1      	b.n	8016342 <_printf_common+0x82>
	...

080163a0 <_printf_i>:
 80163a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163a2:	b08b      	sub	sp, #44	@ 0x2c
 80163a4:	9206      	str	r2, [sp, #24]
 80163a6:	000a      	movs	r2, r1
 80163a8:	3243      	adds	r2, #67	@ 0x43
 80163aa:	9307      	str	r3, [sp, #28]
 80163ac:	9005      	str	r0, [sp, #20]
 80163ae:	9203      	str	r2, [sp, #12]
 80163b0:	7e0a      	ldrb	r2, [r1, #24]
 80163b2:	000c      	movs	r4, r1
 80163b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80163b6:	2a78      	cmp	r2, #120	@ 0x78
 80163b8:	d809      	bhi.n	80163ce <_printf_i+0x2e>
 80163ba:	2a62      	cmp	r2, #98	@ 0x62
 80163bc:	d80b      	bhi.n	80163d6 <_printf_i+0x36>
 80163be:	2a00      	cmp	r2, #0
 80163c0:	d100      	bne.n	80163c4 <_printf_i+0x24>
 80163c2:	e0bc      	b.n	801653e <_printf_i+0x19e>
 80163c4:	497b      	ldr	r1, [pc, #492]	@ (80165b4 <_printf_i+0x214>)
 80163c6:	9104      	str	r1, [sp, #16]
 80163c8:	2a58      	cmp	r2, #88	@ 0x58
 80163ca:	d100      	bne.n	80163ce <_printf_i+0x2e>
 80163cc:	e090      	b.n	80164f0 <_printf_i+0x150>
 80163ce:	0025      	movs	r5, r4
 80163d0:	3542      	adds	r5, #66	@ 0x42
 80163d2:	702a      	strb	r2, [r5, #0]
 80163d4:	e022      	b.n	801641c <_printf_i+0x7c>
 80163d6:	0010      	movs	r0, r2
 80163d8:	3863      	subs	r0, #99	@ 0x63
 80163da:	2815      	cmp	r0, #21
 80163dc:	d8f7      	bhi.n	80163ce <_printf_i+0x2e>
 80163de:	f7e9 fea5 	bl	800012c <__gnu_thumb1_case_shi>
 80163e2:	0016      	.short	0x0016
 80163e4:	fff6001f 	.word	0xfff6001f
 80163e8:	fff6fff6 	.word	0xfff6fff6
 80163ec:	001ffff6 	.word	0x001ffff6
 80163f0:	fff6fff6 	.word	0xfff6fff6
 80163f4:	fff6fff6 	.word	0xfff6fff6
 80163f8:	003600a1 	.word	0x003600a1
 80163fc:	fff60080 	.word	0xfff60080
 8016400:	00b2fff6 	.word	0x00b2fff6
 8016404:	0036fff6 	.word	0x0036fff6
 8016408:	fff6fff6 	.word	0xfff6fff6
 801640c:	0084      	.short	0x0084
 801640e:	0025      	movs	r5, r4
 8016410:	681a      	ldr	r2, [r3, #0]
 8016412:	3542      	adds	r5, #66	@ 0x42
 8016414:	1d11      	adds	r1, r2, #4
 8016416:	6019      	str	r1, [r3, #0]
 8016418:	6813      	ldr	r3, [r2, #0]
 801641a:	702b      	strb	r3, [r5, #0]
 801641c:	2301      	movs	r3, #1
 801641e:	e0a0      	b.n	8016562 <_printf_i+0x1c2>
 8016420:	6818      	ldr	r0, [r3, #0]
 8016422:	6809      	ldr	r1, [r1, #0]
 8016424:	1d02      	adds	r2, r0, #4
 8016426:	060d      	lsls	r5, r1, #24
 8016428:	d50b      	bpl.n	8016442 <_printf_i+0xa2>
 801642a:	6806      	ldr	r6, [r0, #0]
 801642c:	601a      	str	r2, [r3, #0]
 801642e:	2e00      	cmp	r6, #0
 8016430:	da03      	bge.n	801643a <_printf_i+0x9a>
 8016432:	232d      	movs	r3, #45	@ 0x2d
 8016434:	9a03      	ldr	r2, [sp, #12]
 8016436:	4276      	negs	r6, r6
 8016438:	7013      	strb	r3, [r2, #0]
 801643a:	4b5e      	ldr	r3, [pc, #376]	@ (80165b4 <_printf_i+0x214>)
 801643c:	270a      	movs	r7, #10
 801643e:	9304      	str	r3, [sp, #16]
 8016440:	e018      	b.n	8016474 <_printf_i+0xd4>
 8016442:	6806      	ldr	r6, [r0, #0]
 8016444:	601a      	str	r2, [r3, #0]
 8016446:	0649      	lsls	r1, r1, #25
 8016448:	d5f1      	bpl.n	801642e <_printf_i+0x8e>
 801644a:	b236      	sxth	r6, r6
 801644c:	e7ef      	b.n	801642e <_printf_i+0x8e>
 801644e:	6808      	ldr	r0, [r1, #0]
 8016450:	6819      	ldr	r1, [r3, #0]
 8016452:	c940      	ldmia	r1!, {r6}
 8016454:	0605      	lsls	r5, r0, #24
 8016456:	d402      	bmi.n	801645e <_printf_i+0xbe>
 8016458:	0640      	lsls	r0, r0, #25
 801645a:	d500      	bpl.n	801645e <_printf_i+0xbe>
 801645c:	b2b6      	uxth	r6, r6
 801645e:	6019      	str	r1, [r3, #0]
 8016460:	4b54      	ldr	r3, [pc, #336]	@ (80165b4 <_printf_i+0x214>)
 8016462:	270a      	movs	r7, #10
 8016464:	9304      	str	r3, [sp, #16]
 8016466:	2a6f      	cmp	r2, #111	@ 0x6f
 8016468:	d100      	bne.n	801646c <_printf_i+0xcc>
 801646a:	3f02      	subs	r7, #2
 801646c:	0023      	movs	r3, r4
 801646e:	2200      	movs	r2, #0
 8016470:	3343      	adds	r3, #67	@ 0x43
 8016472:	701a      	strb	r2, [r3, #0]
 8016474:	6863      	ldr	r3, [r4, #4]
 8016476:	60a3      	str	r3, [r4, #8]
 8016478:	2b00      	cmp	r3, #0
 801647a:	db03      	blt.n	8016484 <_printf_i+0xe4>
 801647c:	2104      	movs	r1, #4
 801647e:	6822      	ldr	r2, [r4, #0]
 8016480:	438a      	bics	r2, r1
 8016482:	6022      	str	r2, [r4, #0]
 8016484:	2e00      	cmp	r6, #0
 8016486:	d102      	bne.n	801648e <_printf_i+0xee>
 8016488:	9d03      	ldr	r5, [sp, #12]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d00c      	beq.n	80164a8 <_printf_i+0x108>
 801648e:	9d03      	ldr	r5, [sp, #12]
 8016490:	0030      	movs	r0, r6
 8016492:	0039      	movs	r1, r7
 8016494:	f7e9 feda 	bl	800024c <__aeabi_uidivmod>
 8016498:	9b04      	ldr	r3, [sp, #16]
 801649a:	3d01      	subs	r5, #1
 801649c:	5c5b      	ldrb	r3, [r3, r1]
 801649e:	702b      	strb	r3, [r5, #0]
 80164a0:	0033      	movs	r3, r6
 80164a2:	0006      	movs	r6, r0
 80164a4:	429f      	cmp	r7, r3
 80164a6:	d9f3      	bls.n	8016490 <_printf_i+0xf0>
 80164a8:	2f08      	cmp	r7, #8
 80164aa:	d109      	bne.n	80164c0 <_printf_i+0x120>
 80164ac:	6823      	ldr	r3, [r4, #0]
 80164ae:	07db      	lsls	r3, r3, #31
 80164b0:	d506      	bpl.n	80164c0 <_printf_i+0x120>
 80164b2:	6862      	ldr	r2, [r4, #4]
 80164b4:	6923      	ldr	r3, [r4, #16]
 80164b6:	429a      	cmp	r2, r3
 80164b8:	dc02      	bgt.n	80164c0 <_printf_i+0x120>
 80164ba:	2330      	movs	r3, #48	@ 0x30
 80164bc:	3d01      	subs	r5, #1
 80164be:	702b      	strb	r3, [r5, #0]
 80164c0:	9b03      	ldr	r3, [sp, #12]
 80164c2:	1b5b      	subs	r3, r3, r5
 80164c4:	6123      	str	r3, [r4, #16]
 80164c6:	9b07      	ldr	r3, [sp, #28]
 80164c8:	0021      	movs	r1, r4
 80164ca:	9300      	str	r3, [sp, #0]
 80164cc:	9805      	ldr	r0, [sp, #20]
 80164ce:	9b06      	ldr	r3, [sp, #24]
 80164d0:	aa09      	add	r2, sp, #36	@ 0x24
 80164d2:	f7ff fef5 	bl	80162c0 <_printf_common>
 80164d6:	3001      	adds	r0, #1
 80164d8:	d148      	bne.n	801656c <_printf_i+0x1cc>
 80164da:	2001      	movs	r0, #1
 80164dc:	4240      	negs	r0, r0
 80164de:	b00b      	add	sp, #44	@ 0x2c
 80164e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164e2:	2220      	movs	r2, #32
 80164e4:	6809      	ldr	r1, [r1, #0]
 80164e6:	430a      	orrs	r2, r1
 80164e8:	6022      	str	r2, [r4, #0]
 80164ea:	2278      	movs	r2, #120	@ 0x78
 80164ec:	4932      	ldr	r1, [pc, #200]	@ (80165b8 <_printf_i+0x218>)
 80164ee:	9104      	str	r1, [sp, #16]
 80164f0:	0021      	movs	r1, r4
 80164f2:	3145      	adds	r1, #69	@ 0x45
 80164f4:	700a      	strb	r2, [r1, #0]
 80164f6:	6819      	ldr	r1, [r3, #0]
 80164f8:	6822      	ldr	r2, [r4, #0]
 80164fa:	c940      	ldmia	r1!, {r6}
 80164fc:	0610      	lsls	r0, r2, #24
 80164fe:	d402      	bmi.n	8016506 <_printf_i+0x166>
 8016500:	0650      	lsls	r0, r2, #25
 8016502:	d500      	bpl.n	8016506 <_printf_i+0x166>
 8016504:	b2b6      	uxth	r6, r6
 8016506:	6019      	str	r1, [r3, #0]
 8016508:	07d3      	lsls	r3, r2, #31
 801650a:	d502      	bpl.n	8016512 <_printf_i+0x172>
 801650c:	2320      	movs	r3, #32
 801650e:	4313      	orrs	r3, r2
 8016510:	6023      	str	r3, [r4, #0]
 8016512:	2e00      	cmp	r6, #0
 8016514:	d001      	beq.n	801651a <_printf_i+0x17a>
 8016516:	2710      	movs	r7, #16
 8016518:	e7a8      	b.n	801646c <_printf_i+0xcc>
 801651a:	2220      	movs	r2, #32
 801651c:	6823      	ldr	r3, [r4, #0]
 801651e:	4393      	bics	r3, r2
 8016520:	6023      	str	r3, [r4, #0]
 8016522:	e7f8      	b.n	8016516 <_printf_i+0x176>
 8016524:	681a      	ldr	r2, [r3, #0]
 8016526:	680d      	ldr	r5, [r1, #0]
 8016528:	1d10      	adds	r0, r2, #4
 801652a:	6949      	ldr	r1, [r1, #20]
 801652c:	6018      	str	r0, [r3, #0]
 801652e:	6813      	ldr	r3, [r2, #0]
 8016530:	062e      	lsls	r6, r5, #24
 8016532:	d501      	bpl.n	8016538 <_printf_i+0x198>
 8016534:	6019      	str	r1, [r3, #0]
 8016536:	e002      	b.n	801653e <_printf_i+0x19e>
 8016538:	066d      	lsls	r5, r5, #25
 801653a:	d5fb      	bpl.n	8016534 <_printf_i+0x194>
 801653c:	8019      	strh	r1, [r3, #0]
 801653e:	2300      	movs	r3, #0
 8016540:	9d03      	ldr	r5, [sp, #12]
 8016542:	6123      	str	r3, [r4, #16]
 8016544:	e7bf      	b.n	80164c6 <_printf_i+0x126>
 8016546:	681a      	ldr	r2, [r3, #0]
 8016548:	1d11      	adds	r1, r2, #4
 801654a:	6019      	str	r1, [r3, #0]
 801654c:	6815      	ldr	r5, [r2, #0]
 801654e:	2100      	movs	r1, #0
 8016550:	0028      	movs	r0, r5
 8016552:	6862      	ldr	r2, [r4, #4]
 8016554:	f000 fa5b 	bl	8016a0e <memchr>
 8016558:	2800      	cmp	r0, #0
 801655a:	d001      	beq.n	8016560 <_printf_i+0x1c0>
 801655c:	1b40      	subs	r0, r0, r5
 801655e:	6060      	str	r0, [r4, #4]
 8016560:	6863      	ldr	r3, [r4, #4]
 8016562:	6123      	str	r3, [r4, #16]
 8016564:	2300      	movs	r3, #0
 8016566:	9a03      	ldr	r2, [sp, #12]
 8016568:	7013      	strb	r3, [r2, #0]
 801656a:	e7ac      	b.n	80164c6 <_printf_i+0x126>
 801656c:	002a      	movs	r2, r5
 801656e:	6923      	ldr	r3, [r4, #16]
 8016570:	9906      	ldr	r1, [sp, #24]
 8016572:	9805      	ldr	r0, [sp, #20]
 8016574:	9d07      	ldr	r5, [sp, #28]
 8016576:	47a8      	blx	r5
 8016578:	3001      	adds	r0, #1
 801657a:	d0ae      	beq.n	80164da <_printf_i+0x13a>
 801657c:	6823      	ldr	r3, [r4, #0]
 801657e:	079b      	lsls	r3, r3, #30
 8016580:	d415      	bmi.n	80165ae <_printf_i+0x20e>
 8016582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016584:	68e0      	ldr	r0, [r4, #12]
 8016586:	4298      	cmp	r0, r3
 8016588:	daa9      	bge.n	80164de <_printf_i+0x13e>
 801658a:	0018      	movs	r0, r3
 801658c:	e7a7      	b.n	80164de <_printf_i+0x13e>
 801658e:	0022      	movs	r2, r4
 8016590:	2301      	movs	r3, #1
 8016592:	9906      	ldr	r1, [sp, #24]
 8016594:	9805      	ldr	r0, [sp, #20]
 8016596:	9e07      	ldr	r6, [sp, #28]
 8016598:	3219      	adds	r2, #25
 801659a:	47b0      	blx	r6
 801659c:	3001      	adds	r0, #1
 801659e:	d09c      	beq.n	80164da <_printf_i+0x13a>
 80165a0:	3501      	adds	r5, #1
 80165a2:	68e3      	ldr	r3, [r4, #12]
 80165a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80165a6:	1a9b      	subs	r3, r3, r2
 80165a8:	42ab      	cmp	r3, r5
 80165aa:	dcf0      	bgt.n	801658e <_printf_i+0x1ee>
 80165ac:	e7e9      	b.n	8016582 <_printf_i+0x1e2>
 80165ae:	2500      	movs	r5, #0
 80165b0:	e7f7      	b.n	80165a2 <_printf_i+0x202>
 80165b2:	46c0      	nop			@ (mov r8, r8)
 80165b4:	0801a37e 	.word	0x0801a37e
 80165b8:	0801a38f 	.word	0x0801a38f

080165bc <std>:
 80165bc:	2300      	movs	r3, #0
 80165be:	b510      	push	{r4, lr}
 80165c0:	0004      	movs	r4, r0
 80165c2:	6003      	str	r3, [r0, #0]
 80165c4:	6043      	str	r3, [r0, #4]
 80165c6:	6083      	str	r3, [r0, #8]
 80165c8:	8181      	strh	r1, [r0, #12]
 80165ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80165cc:	81c2      	strh	r2, [r0, #14]
 80165ce:	6103      	str	r3, [r0, #16]
 80165d0:	6143      	str	r3, [r0, #20]
 80165d2:	6183      	str	r3, [r0, #24]
 80165d4:	0019      	movs	r1, r3
 80165d6:	2208      	movs	r2, #8
 80165d8:	305c      	adds	r0, #92	@ 0x5c
 80165da:	f000 f967 	bl	80168ac <memset>
 80165de:	4b0b      	ldr	r3, [pc, #44]	@ (801660c <std+0x50>)
 80165e0:	6224      	str	r4, [r4, #32]
 80165e2:	6263      	str	r3, [r4, #36]	@ 0x24
 80165e4:	4b0a      	ldr	r3, [pc, #40]	@ (8016610 <std+0x54>)
 80165e6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80165e8:	4b0a      	ldr	r3, [pc, #40]	@ (8016614 <std+0x58>)
 80165ea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80165ec:	4b0a      	ldr	r3, [pc, #40]	@ (8016618 <std+0x5c>)
 80165ee:	6323      	str	r3, [r4, #48]	@ 0x30
 80165f0:	4b0a      	ldr	r3, [pc, #40]	@ (801661c <std+0x60>)
 80165f2:	429c      	cmp	r4, r3
 80165f4:	d005      	beq.n	8016602 <std+0x46>
 80165f6:	4b0a      	ldr	r3, [pc, #40]	@ (8016620 <std+0x64>)
 80165f8:	429c      	cmp	r4, r3
 80165fa:	d002      	beq.n	8016602 <std+0x46>
 80165fc:	4b09      	ldr	r3, [pc, #36]	@ (8016624 <std+0x68>)
 80165fe:	429c      	cmp	r4, r3
 8016600:	d103      	bne.n	801660a <std+0x4e>
 8016602:	0020      	movs	r0, r4
 8016604:	3058      	adds	r0, #88	@ 0x58
 8016606:	f000 f9ff 	bl	8016a08 <__retarget_lock_init_recursive>
 801660a:	bd10      	pop	{r4, pc}
 801660c:	080167a5 	.word	0x080167a5
 8016610:	080167cd 	.word	0x080167cd
 8016614:	08016805 	.word	0x08016805
 8016618:	08016831 	.word	0x08016831
 801661c:	20004264 	.word	0x20004264
 8016620:	200042cc 	.word	0x200042cc
 8016624:	20004334 	.word	0x20004334

08016628 <stdio_exit_handler>:
 8016628:	b510      	push	{r4, lr}
 801662a:	4a03      	ldr	r2, [pc, #12]	@ (8016638 <stdio_exit_handler+0x10>)
 801662c:	4903      	ldr	r1, [pc, #12]	@ (801663c <stdio_exit_handler+0x14>)
 801662e:	4804      	ldr	r0, [pc, #16]	@ (8016640 <stdio_exit_handler+0x18>)
 8016630:	f000 f86c 	bl	801670c <_fwalk_sglue>
 8016634:	bd10      	pop	{r4, pc}
 8016636:	46c0      	nop			@ (mov r8, r8)
 8016638:	200002c8 	.word	0x200002c8
 801663c:	080186e1 	.word	0x080186e1
 8016640:	200002d8 	.word	0x200002d8

08016644 <cleanup_stdio>:
 8016644:	6841      	ldr	r1, [r0, #4]
 8016646:	4b0b      	ldr	r3, [pc, #44]	@ (8016674 <cleanup_stdio+0x30>)
 8016648:	b510      	push	{r4, lr}
 801664a:	0004      	movs	r4, r0
 801664c:	4299      	cmp	r1, r3
 801664e:	d001      	beq.n	8016654 <cleanup_stdio+0x10>
 8016650:	f002 f846 	bl	80186e0 <_fflush_r>
 8016654:	68a1      	ldr	r1, [r4, #8]
 8016656:	4b08      	ldr	r3, [pc, #32]	@ (8016678 <cleanup_stdio+0x34>)
 8016658:	4299      	cmp	r1, r3
 801665a:	d002      	beq.n	8016662 <cleanup_stdio+0x1e>
 801665c:	0020      	movs	r0, r4
 801665e:	f002 f83f 	bl	80186e0 <_fflush_r>
 8016662:	68e1      	ldr	r1, [r4, #12]
 8016664:	4b05      	ldr	r3, [pc, #20]	@ (801667c <cleanup_stdio+0x38>)
 8016666:	4299      	cmp	r1, r3
 8016668:	d002      	beq.n	8016670 <cleanup_stdio+0x2c>
 801666a:	0020      	movs	r0, r4
 801666c:	f002 f838 	bl	80186e0 <_fflush_r>
 8016670:	bd10      	pop	{r4, pc}
 8016672:	46c0      	nop			@ (mov r8, r8)
 8016674:	20004264 	.word	0x20004264
 8016678:	200042cc 	.word	0x200042cc
 801667c:	20004334 	.word	0x20004334

08016680 <global_stdio_init.part.0>:
 8016680:	b510      	push	{r4, lr}
 8016682:	4b09      	ldr	r3, [pc, #36]	@ (80166a8 <global_stdio_init.part.0+0x28>)
 8016684:	4a09      	ldr	r2, [pc, #36]	@ (80166ac <global_stdio_init.part.0+0x2c>)
 8016686:	2104      	movs	r1, #4
 8016688:	601a      	str	r2, [r3, #0]
 801668a:	4809      	ldr	r0, [pc, #36]	@ (80166b0 <global_stdio_init.part.0+0x30>)
 801668c:	2200      	movs	r2, #0
 801668e:	f7ff ff95 	bl	80165bc <std>
 8016692:	2201      	movs	r2, #1
 8016694:	2109      	movs	r1, #9
 8016696:	4807      	ldr	r0, [pc, #28]	@ (80166b4 <global_stdio_init.part.0+0x34>)
 8016698:	f7ff ff90 	bl	80165bc <std>
 801669c:	2202      	movs	r2, #2
 801669e:	2112      	movs	r1, #18
 80166a0:	4805      	ldr	r0, [pc, #20]	@ (80166b8 <global_stdio_init.part.0+0x38>)
 80166a2:	f7ff ff8b 	bl	80165bc <std>
 80166a6:	bd10      	pop	{r4, pc}
 80166a8:	2000439c 	.word	0x2000439c
 80166ac:	08016629 	.word	0x08016629
 80166b0:	20004264 	.word	0x20004264
 80166b4:	200042cc 	.word	0x200042cc
 80166b8:	20004334 	.word	0x20004334

080166bc <__sfp_lock_acquire>:
 80166bc:	b510      	push	{r4, lr}
 80166be:	4802      	ldr	r0, [pc, #8]	@ (80166c8 <__sfp_lock_acquire+0xc>)
 80166c0:	f000 f9a3 	bl	8016a0a <__retarget_lock_acquire_recursive>
 80166c4:	bd10      	pop	{r4, pc}
 80166c6:	46c0      	nop			@ (mov r8, r8)
 80166c8:	200043a5 	.word	0x200043a5

080166cc <__sfp_lock_release>:
 80166cc:	b510      	push	{r4, lr}
 80166ce:	4802      	ldr	r0, [pc, #8]	@ (80166d8 <__sfp_lock_release+0xc>)
 80166d0:	f000 f99c 	bl	8016a0c <__retarget_lock_release_recursive>
 80166d4:	bd10      	pop	{r4, pc}
 80166d6:	46c0      	nop			@ (mov r8, r8)
 80166d8:	200043a5 	.word	0x200043a5

080166dc <__sinit>:
 80166dc:	b510      	push	{r4, lr}
 80166de:	0004      	movs	r4, r0
 80166e0:	f7ff ffec 	bl	80166bc <__sfp_lock_acquire>
 80166e4:	6a23      	ldr	r3, [r4, #32]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d002      	beq.n	80166f0 <__sinit+0x14>
 80166ea:	f7ff ffef 	bl	80166cc <__sfp_lock_release>
 80166ee:	bd10      	pop	{r4, pc}
 80166f0:	4b04      	ldr	r3, [pc, #16]	@ (8016704 <__sinit+0x28>)
 80166f2:	6223      	str	r3, [r4, #32]
 80166f4:	4b04      	ldr	r3, [pc, #16]	@ (8016708 <__sinit+0x2c>)
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d1f6      	bne.n	80166ea <__sinit+0xe>
 80166fc:	f7ff ffc0 	bl	8016680 <global_stdio_init.part.0>
 8016700:	e7f3      	b.n	80166ea <__sinit+0xe>
 8016702:	46c0      	nop			@ (mov r8, r8)
 8016704:	08016645 	.word	0x08016645
 8016708:	2000439c 	.word	0x2000439c

0801670c <_fwalk_sglue>:
 801670c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801670e:	0014      	movs	r4, r2
 8016710:	2600      	movs	r6, #0
 8016712:	9000      	str	r0, [sp, #0]
 8016714:	9101      	str	r1, [sp, #4]
 8016716:	68a5      	ldr	r5, [r4, #8]
 8016718:	6867      	ldr	r7, [r4, #4]
 801671a:	3f01      	subs	r7, #1
 801671c:	d504      	bpl.n	8016728 <_fwalk_sglue+0x1c>
 801671e:	6824      	ldr	r4, [r4, #0]
 8016720:	2c00      	cmp	r4, #0
 8016722:	d1f8      	bne.n	8016716 <_fwalk_sglue+0xa>
 8016724:	0030      	movs	r0, r6
 8016726:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016728:	89ab      	ldrh	r3, [r5, #12]
 801672a:	2b01      	cmp	r3, #1
 801672c:	d908      	bls.n	8016740 <_fwalk_sglue+0x34>
 801672e:	220e      	movs	r2, #14
 8016730:	5eab      	ldrsh	r3, [r5, r2]
 8016732:	3301      	adds	r3, #1
 8016734:	d004      	beq.n	8016740 <_fwalk_sglue+0x34>
 8016736:	0029      	movs	r1, r5
 8016738:	9800      	ldr	r0, [sp, #0]
 801673a:	9b01      	ldr	r3, [sp, #4]
 801673c:	4798      	blx	r3
 801673e:	4306      	orrs	r6, r0
 8016740:	3568      	adds	r5, #104	@ 0x68
 8016742:	e7ea      	b.n	801671a <_fwalk_sglue+0xe>

08016744 <iprintf>:
 8016744:	b40f      	push	{r0, r1, r2, r3}
 8016746:	b507      	push	{r0, r1, r2, lr}
 8016748:	4905      	ldr	r1, [pc, #20]	@ (8016760 <iprintf+0x1c>)
 801674a:	ab04      	add	r3, sp, #16
 801674c:	6808      	ldr	r0, [r1, #0]
 801674e:	cb04      	ldmia	r3!, {r2}
 8016750:	6881      	ldr	r1, [r0, #8]
 8016752:	9301      	str	r3, [sp, #4]
 8016754:	f001 fe22 	bl	801839c <_vfiprintf_r>
 8016758:	b003      	add	sp, #12
 801675a:	bc08      	pop	{r3}
 801675c:	b004      	add	sp, #16
 801675e:	4718      	bx	r3
 8016760:	200002d4 	.word	0x200002d4

08016764 <siprintf>:
 8016764:	b40e      	push	{r1, r2, r3}
 8016766:	b500      	push	{lr}
 8016768:	490b      	ldr	r1, [pc, #44]	@ (8016798 <siprintf+0x34>)
 801676a:	b09c      	sub	sp, #112	@ 0x70
 801676c:	ab1d      	add	r3, sp, #116	@ 0x74
 801676e:	9002      	str	r0, [sp, #8]
 8016770:	9006      	str	r0, [sp, #24]
 8016772:	9107      	str	r1, [sp, #28]
 8016774:	9104      	str	r1, [sp, #16]
 8016776:	4809      	ldr	r0, [pc, #36]	@ (801679c <siprintf+0x38>)
 8016778:	4909      	ldr	r1, [pc, #36]	@ (80167a0 <siprintf+0x3c>)
 801677a:	cb04      	ldmia	r3!, {r2}
 801677c:	9105      	str	r1, [sp, #20]
 801677e:	6800      	ldr	r0, [r0, #0]
 8016780:	a902      	add	r1, sp, #8
 8016782:	9301      	str	r3, [sp, #4]
 8016784:	f001 fce4 	bl	8018150 <_svfiprintf_r>
 8016788:	2200      	movs	r2, #0
 801678a:	9b02      	ldr	r3, [sp, #8]
 801678c:	701a      	strb	r2, [r3, #0]
 801678e:	b01c      	add	sp, #112	@ 0x70
 8016790:	bc08      	pop	{r3}
 8016792:	b003      	add	sp, #12
 8016794:	4718      	bx	r3
 8016796:	46c0      	nop			@ (mov r8, r8)
 8016798:	7fffffff 	.word	0x7fffffff
 801679c:	200002d4 	.word	0x200002d4
 80167a0:	ffff0208 	.word	0xffff0208

080167a4 <__sread>:
 80167a4:	b570      	push	{r4, r5, r6, lr}
 80167a6:	000c      	movs	r4, r1
 80167a8:	250e      	movs	r5, #14
 80167aa:	5f49      	ldrsh	r1, [r1, r5]
 80167ac:	f000 f8da 	bl	8016964 <_read_r>
 80167b0:	2800      	cmp	r0, #0
 80167b2:	db03      	blt.n	80167bc <__sread+0x18>
 80167b4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80167b6:	181b      	adds	r3, r3, r0
 80167b8:	6563      	str	r3, [r4, #84]	@ 0x54
 80167ba:	bd70      	pop	{r4, r5, r6, pc}
 80167bc:	89a3      	ldrh	r3, [r4, #12]
 80167be:	4a02      	ldr	r2, [pc, #8]	@ (80167c8 <__sread+0x24>)
 80167c0:	4013      	ands	r3, r2
 80167c2:	81a3      	strh	r3, [r4, #12]
 80167c4:	e7f9      	b.n	80167ba <__sread+0x16>
 80167c6:	46c0      	nop			@ (mov r8, r8)
 80167c8:	ffffefff 	.word	0xffffefff

080167cc <__swrite>:
 80167cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ce:	001f      	movs	r7, r3
 80167d0:	898b      	ldrh	r3, [r1, #12]
 80167d2:	0005      	movs	r5, r0
 80167d4:	000c      	movs	r4, r1
 80167d6:	0016      	movs	r6, r2
 80167d8:	05db      	lsls	r3, r3, #23
 80167da:	d505      	bpl.n	80167e8 <__swrite+0x1c>
 80167dc:	230e      	movs	r3, #14
 80167de:	5ec9      	ldrsh	r1, [r1, r3]
 80167e0:	2200      	movs	r2, #0
 80167e2:	2302      	movs	r3, #2
 80167e4:	f000 f8aa 	bl	801693c <_lseek_r>
 80167e8:	89a3      	ldrh	r3, [r4, #12]
 80167ea:	4a05      	ldr	r2, [pc, #20]	@ (8016800 <__swrite+0x34>)
 80167ec:	0028      	movs	r0, r5
 80167ee:	4013      	ands	r3, r2
 80167f0:	81a3      	strh	r3, [r4, #12]
 80167f2:	0032      	movs	r2, r6
 80167f4:	230e      	movs	r3, #14
 80167f6:	5ee1      	ldrsh	r1, [r4, r3]
 80167f8:	003b      	movs	r3, r7
 80167fa:	f000 f8c7 	bl	801698c <_write_r>
 80167fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016800:	ffffefff 	.word	0xffffefff

08016804 <__sseek>:
 8016804:	b570      	push	{r4, r5, r6, lr}
 8016806:	000c      	movs	r4, r1
 8016808:	250e      	movs	r5, #14
 801680a:	5f49      	ldrsh	r1, [r1, r5]
 801680c:	f000 f896 	bl	801693c <_lseek_r>
 8016810:	89a3      	ldrh	r3, [r4, #12]
 8016812:	1c42      	adds	r2, r0, #1
 8016814:	d103      	bne.n	801681e <__sseek+0x1a>
 8016816:	4a05      	ldr	r2, [pc, #20]	@ (801682c <__sseek+0x28>)
 8016818:	4013      	ands	r3, r2
 801681a:	81a3      	strh	r3, [r4, #12]
 801681c:	bd70      	pop	{r4, r5, r6, pc}
 801681e:	2280      	movs	r2, #128	@ 0x80
 8016820:	0152      	lsls	r2, r2, #5
 8016822:	4313      	orrs	r3, r2
 8016824:	81a3      	strh	r3, [r4, #12]
 8016826:	6560      	str	r0, [r4, #84]	@ 0x54
 8016828:	e7f8      	b.n	801681c <__sseek+0x18>
 801682a:	46c0      	nop			@ (mov r8, r8)
 801682c:	ffffefff 	.word	0xffffefff

08016830 <__sclose>:
 8016830:	b510      	push	{r4, lr}
 8016832:	230e      	movs	r3, #14
 8016834:	5ec9      	ldrsh	r1, [r1, r3]
 8016836:	f000 f86f 	bl	8016918 <_close_r>
 801683a:	bd10      	pop	{r4, pc}

0801683c <_vsniprintf_r>:
 801683c:	b530      	push	{r4, r5, lr}
 801683e:	0014      	movs	r4, r2
 8016840:	0005      	movs	r5, r0
 8016842:	001a      	movs	r2, r3
 8016844:	b09b      	sub	sp, #108	@ 0x6c
 8016846:	2c00      	cmp	r4, #0
 8016848:	da05      	bge.n	8016856 <_vsniprintf_r+0x1a>
 801684a:	238b      	movs	r3, #139	@ 0x8b
 801684c:	6003      	str	r3, [r0, #0]
 801684e:	2001      	movs	r0, #1
 8016850:	4240      	negs	r0, r0
 8016852:	b01b      	add	sp, #108	@ 0x6c
 8016854:	bd30      	pop	{r4, r5, pc}
 8016856:	2382      	movs	r3, #130	@ 0x82
 8016858:	4668      	mov	r0, sp
 801685a:	009b      	lsls	r3, r3, #2
 801685c:	8183      	strh	r3, [r0, #12]
 801685e:	2300      	movs	r3, #0
 8016860:	9100      	str	r1, [sp, #0]
 8016862:	9104      	str	r1, [sp, #16]
 8016864:	429c      	cmp	r4, r3
 8016866:	d000      	beq.n	801686a <_vsniprintf_r+0x2e>
 8016868:	1e63      	subs	r3, r4, #1
 801686a:	9302      	str	r3, [sp, #8]
 801686c:	9305      	str	r3, [sp, #20]
 801686e:	2301      	movs	r3, #1
 8016870:	4669      	mov	r1, sp
 8016872:	425b      	negs	r3, r3
 8016874:	81cb      	strh	r3, [r1, #14]
 8016876:	0028      	movs	r0, r5
 8016878:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801687a:	f001 fc69 	bl	8018150 <_svfiprintf_r>
 801687e:	1c43      	adds	r3, r0, #1
 8016880:	da01      	bge.n	8016886 <_vsniprintf_r+0x4a>
 8016882:	238b      	movs	r3, #139	@ 0x8b
 8016884:	602b      	str	r3, [r5, #0]
 8016886:	2c00      	cmp	r4, #0
 8016888:	d0e3      	beq.n	8016852 <_vsniprintf_r+0x16>
 801688a:	2200      	movs	r2, #0
 801688c:	9b00      	ldr	r3, [sp, #0]
 801688e:	701a      	strb	r2, [r3, #0]
 8016890:	e7df      	b.n	8016852 <_vsniprintf_r+0x16>
	...

08016894 <vsniprintf>:
 8016894:	b513      	push	{r0, r1, r4, lr}
 8016896:	4c04      	ldr	r4, [pc, #16]	@ (80168a8 <vsniprintf+0x14>)
 8016898:	9300      	str	r3, [sp, #0]
 801689a:	0013      	movs	r3, r2
 801689c:	000a      	movs	r2, r1
 801689e:	0001      	movs	r1, r0
 80168a0:	6820      	ldr	r0, [r4, #0]
 80168a2:	f7ff ffcb 	bl	801683c <_vsniprintf_r>
 80168a6:	bd16      	pop	{r1, r2, r4, pc}
 80168a8:	200002d4 	.word	0x200002d4

080168ac <memset>:
 80168ac:	0003      	movs	r3, r0
 80168ae:	1882      	adds	r2, r0, r2
 80168b0:	4293      	cmp	r3, r2
 80168b2:	d100      	bne.n	80168b6 <memset+0xa>
 80168b4:	4770      	bx	lr
 80168b6:	7019      	strb	r1, [r3, #0]
 80168b8:	3301      	adds	r3, #1
 80168ba:	e7f9      	b.n	80168b0 <memset+0x4>

080168bc <strncpy>:
 80168bc:	0003      	movs	r3, r0
 80168be:	b530      	push	{r4, r5, lr}
 80168c0:	001d      	movs	r5, r3
 80168c2:	2a00      	cmp	r2, #0
 80168c4:	d006      	beq.n	80168d4 <strncpy+0x18>
 80168c6:	780c      	ldrb	r4, [r1, #0]
 80168c8:	3a01      	subs	r2, #1
 80168ca:	3301      	adds	r3, #1
 80168cc:	702c      	strb	r4, [r5, #0]
 80168ce:	3101      	adds	r1, #1
 80168d0:	2c00      	cmp	r4, #0
 80168d2:	d1f5      	bne.n	80168c0 <strncpy+0x4>
 80168d4:	2100      	movs	r1, #0
 80168d6:	189a      	adds	r2, r3, r2
 80168d8:	4293      	cmp	r3, r2
 80168da:	d100      	bne.n	80168de <strncpy+0x22>
 80168dc:	bd30      	pop	{r4, r5, pc}
 80168de:	7019      	strb	r1, [r3, #0]
 80168e0:	3301      	adds	r3, #1
 80168e2:	e7f9      	b.n	80168d8 <strncpy+0x1c>

080168e4 <strstr>:
 80168e4:	780a      	ldrb	r2, [r1, #0]
 80168e6:	b530      	push	{r4, r5, lr}
 80168e8:	2a00      	cmp	r2, #0
 80168ea:	d10c      	bne.n	8016906 <strstr+0x22>
 80168ec:	bd30      	pop	{r4, r5, pc}
 80168ee:	429a      	cmp	r2, r3
 80168f0:	d108      	bne.n	8016904 <strstr+0x20>
 80168f2:	2301      	movs	r3, #1
 80168f4:	5ccc      	ldrb	r4, [r1, r3]
 80168f6:	2c00      	cmp	r4, #0
 80168f8:	d0f8      	beq.n	80168ec <strstr+0x8>
 80168fa:	5cc5      	ldrb	r5, [r0, r3]
 80168fc:	42a5      	cmp	r5, r4
 80168fe:	d101      	bne.n	8016904 <strstr+0x20>
 8016900:	3301      	adds	r3, #1
 8016902:	e7f7      	b.n	80168f4 <strstr+0x10>
 8016904:	3001      	adds	r0, #1
 8016906:	7803      	ldrb	r3, [r0, #0]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d1f0      	bne.n	80168ee <strstr+0xa>
 801690c:	0018      	movs	r0, r3
 801690e:	e7ed      	b.n	80168ec <strstr+0x8>

08016910 <_localeconv_r>:
 8016910:	4800      	ldr	r0, [pc, #0]	@ (8016914 <_localeconv_r+0x4>)
 8016912:	4770      	bx	lr
 8016914:	20000414 	.word	0x20000414

08016918 <_close_r>:
 8016918:	2300      	movs	r3, #0
 801691a:	b570      	push	{r4, r5, r6, lr}
 801691c:	4d06      	ldr	r5, [pc, #24]	@ (8016938 <_close_r+0x20>)
 801691e:	0004      	movs	r4, r0
 8016920:	0008      	movs	r0, r1
 8016922:	602b      	str	r3, [r5, #0]
 8016924:	f7f1 fc82 	bl	800822c <_close>
 8016928:	1c43      	adds	r3, r0, #1
 801692a:	d103      	bne.n	8016934 <_close_r+0x1c>
 801692c:	682b      	ldr	r3, [r5, #0]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d000      	beq.n	8016934 <_close_r+0x1c>
 8016932:	6023      	str	r3, [r4, #0]
 8016934:	bd70      	pop	{r4, r5, r6, pc}
 8016936:	46c0      	nop			@ (mov r8, r8)
 8016938:	200043a0 	.word	0x200043a0

0801693c <_lseek_r>:
 801693c:	b570      	push	{r4, r5, r6, lr}
 801693e:	0004      	movs	r4, r0
 8016940:	0008      	movs	r0, r1
 8016942:	0011      	movs	r1, r2
 8016944:	001a      	movs	r2, r3
 8016946:	2300      	movs	r3, #0
 8016948:	4d05      	ldr	r5, [pc, #20]	@ (8016960 <_lseek_r+0x24>)
 801694a:	602b      	str	r3, [r5, #0]
 801694c:	f7f1 fc8f 	bl	800826e <_lseek>
 8016950:	1c43      	adds	r3, r0, #1
 8016952:	d103      	bne.n	801695c <_lseek_r+0x20>
 8016954:	682b      	ldr	r3, [r5, #0]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d000      	beq.n	801695c <_lseek_r+0x20>
 801695a:	6023      	str	r3, [r4, #0]
 801695c:	bd70      	pop	{r4, r5, r6, pc}
 801695e:	46c0      	nop			@ (mov r8, r8)
 8016960:	200043a0 	.word	0x200043a0

08016964 <_read_r>:
 8016964:	b570      	push	{r4, r5, r6, lr}
 8016966:	0004      	movs	r4, r0
 8016968:	0008      	movs	r0, r1
 801696a:	0011      	movs	r1, r2
 801696c:	001a      	movs	r2, r3
 801696e:	2300      	movs	r3, #0
 8016970:	4d05      	ldr	r5, [pc, #20]	@ (8016988 <_read_r+0x24>)
 8016972:	602b      	str	r3, [r5, #0]
 8016974:	f7f1 fc3d 	bl	80081f2 <_read>
 8016978:	1c43      	adds	r3, r0, #1
 801697a:	d103      	bne.n	8016984 <_read_r+0x20>
 801697c:	682b      	ldr	r3, [r5, #0]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d000      	beq.n	8016984 <_read_r+0x20>
 8016982:	6023      	str	r3, [r4, #0]
 8016984:	bd70      	pop	{r4, r5, r6, pc}
 8016986:	46c0      	nop			@ (mov r8, r8)
 8016988:	200043a0 	.word	0x200043a0

0801698c <_write_r>:
 801698c:	b570      	push	{r4, r5, r6, lr}
 801698e:	0004      	movs	r4, r0
 8016990:	0008      	movs	r0, r1
 8016992:	0011      	movs	r1, r2
 8016994:	001a      	movs	r2, r3
 8016996:	2300      	movs	r3, #0
 8016998:	4d05      	ldr	r5, [pc, #20]	@ (80169b0 <_write_r+0x24>)
 801699a:	602b      	str	r3, [r5, #0]
 801699c:	f7f2 f84c 	bl	8008a38 <_write>
 80169a0:	1c43      	adds	r3, r0, #1
 80169a2:	d103      	bne.n	80169ac <_write_r+0x20>
 80169a4:	682b      	ldr	r3, [r5, #0]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d000      	beq.n	80169ac <_write_r+0x20>
 80169aa:	6023      	str	r3, [r4, #0]
 80169ac:	bd70      	pop	{r4, r5, r6, pc}
 80169ae:	46c0      	nop			@ (mov r8, r8)
 80169b0:	200043a0 	.word	0x200043a0

080169b4 <__errno>:
 80169b4:	4b01      	ldr	r3, [pc, #4]	@ (80169bc <__errno+0x8>)
 80169b6:	6818      	ldr	r0, [r3, #0]
 80169b8:	4770      	bx	lr
 80169ba:	46c0      	nop			@ (mov r8, r8)
 80169bc:	200002d4 	.word	0x200002d4

080169c0 <__libc_init_array>:
 80169c0:	b570      	push	{r4, r5, r6, lr}
 80169c2:	2600      	movs	r6, #0
 80169c4:	4c0c      	ldr	r4, [pc, #48]	@ (80169f8 <__libc_init_array+0x38>)
 80169c6:	4d0d      	ldr	r5, [pc, #52]	@ (80169fc <__libc_init_array+0x3c>)
 80169c8:	1b64      	subs	r4, r4, r5
 80169ca:	10a4      	asrs	r4, r4, #2
 80169cc:	42a6      	cmp	r6, r4
 80169ce:	d109      	bne.n	80169e4 <__libc_init_array+0x24>
 80169d0:	2600      	movs	r6, #0
 80169d2:	f002 fe57 	bl	8019684 <_init>
 80169d6:	4c0a      	ldr	r4, [pc, #40]	@ (8016a00 <__libc_init_array+0x40>)
 80169d8:	4d0a      	ldr	r5, [pc, #40]	@ (8016a04 <__libc_init_array+0x44>)
 80169da:	1b64      	subs	r4, r4, r5
 80169dc:	10a4      	asrs	r4, r4, #2
 80169de:	42a6      	cmp	r6, r4
 80169e0:	d105      	bne.n	80169ee <__libc_init_array+0x2e>
 80169e2:	bd70      	pop	{r4, r5, r6, pc}
 80169e4:	00b3      	lsls	r3, r6, #2
 80169e6:	58eb      	ldr	r3, [r5, r3]
 80169e8:	4798      	blx	r3
 80169ea:	3601      	adds	r6, #1
 80169ec:	e7ee      	b.n	80169cc <__libc_init_array+0xc>
 80169ee:	00b3      	lsls	r3, r6, #2
 80169f0:	58eb      	ldr	r3, [r5, r3]
 80169f2:	4798      	blx	r3
 80169f4:	3601      	adds	r6, #1
 80169f6:	e7f2      	b.n	80169de <__libc_init_array+0x1e>
 80169f8:	0801a700 	.word	0x0801a700
 80169fc:	0801a700 	.word	0x0801a700
 8016a00:	0801a704 	.word	0x0801a704
 8016a04:	0801a700 	.word	0x0801a700

08016a08 <__retarget_lock_init_recursive>:
 8016a08:	4770      	bx	lr

08016a0a <__retarget_lock_acquire_recursive>:
 8016a0a:	4770      	bx	lr

08016a0c <__retarget_lock_release_recursive>:
 8016a0c:	4770      	bx	lr

08016a0e <memchr>:
 8016a0e:	b2c9      	uxtb	r1, r1
 8016a10:	1882      	adds	r2, r0, r2
 8016a12:	4290      	cmp	r0, r2
 8016a14:	d101      	bne.n	8016a1a <memchr+0xc>
 8016a16:	2000      	movs	r0, #0
 8016a18:	4770      	bx	lr
 8016a1a:	7803      	ldrb	r3, [r0, #0]
 8016a1c:	428b      	cmp	r3, r1
 8016a1e:	d0fb      	beq.n	8016a18 <memchr+0xa>
 8016a20:	3001      	adds	r0, #1
 8016a22:	e7f6      	b.n	8016a12 <memchr+0x4>

08016a24 <memcpy>:
 8016a24:	2300      	movs	r3, #0
 8016a26:	b510      	push	{r4, lr}
 8016a28:	429a      	cmp	r2, r3
 8016a2a:	d100      	bne.n	8016a2e <memcpy+0xa>
 8016a2c:	bd10      	pop	{r4, pc}
 8016a2e:	5ccc      	ldrb	r4, [r1, r3]
 8016a30:	54c4      	strb	r4, [r0, r3]
 8016a32:	3301      	adds	r3, #1
 8016a34:	e7f8      	b.n	8016a28 <memcpy+0x4>

08016a36 <quorem>:
 8016a36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a38:	6902      	ldr	r2, [r0, #16]
 8016a3a:	690f      	ldr	r7, [r1, #16]
 8016a3c:	b087      	sub	sp, #28
 8016a3e:	0006      	movs	r6, r0
 8016a40:	000b      	movs	r3, r1
 8016a42:	2000      	movs	r0, #0
 8016a44:	9102      	str	r1, [sp, #8]
 8016a46:	42ba      	cmp	r2, r7
 8016a48:	db6d      	blt.n	8016b26 <quorem+0xf0>
 8016a4a:	3f01      	subs	r7, #1
 8016a4c:	00bc      	lsls	r4, r7, #2
 8016a4e:	3314      	adds	r3, #20
 8016a50:	9305      	str	r3, [sp, #20]
 8016a52:	191b      	adds	r3, r3, r4
 8016a54:	9303      	str	r3, [sp, #12]
 8016a56:	0033      	movs	r3, r6
 8016a58:	3314      	adds	r3, #20
 8016a5a:	191c      	adds	r4, r3, r4
 8016a5c:	9301      	str	r3, [sp, #4]
 8016a5e:	6823      	ldr	r3, [r4, #0]
 8016a60:	9304      	str	r3, [sp, #16]
 8016a62:	9b03      	ldr	r3, [sp, #12]
 8016a64:	9804      	ldr	r0, [sp, #16]
 8016a66:	681d      	ldr	r5, [r3, #0]
 8016a68:	3501      	adds	r5, #1
 8016a6a:	0029      	movs	r1, r5
 8016a6c:	f7e9 fb68 	bl	8000140 <__udivsi3>
 8016a70:	9b04      	ldr	r3, [sp, #16]
 8016a72:	9000      	str	r0, [sp, #0]
 8016a74:	42ab      	cmp	r3, r5
 8016a76:	d32b      	bcc.n	8016ad0 <quorem+0x9a>
 8016a78:	9b05      	ldr	r3, [sp, #20]
 8016a7a:	9d01      	ldr	r5, [sp, #4]
 8016a7c:	469c      	mov	ip, r3
 8016a7e:	2300      	movs	r3, #0
 8016a80:	9305      	str	r3, [sp, #20]
 8016a82:	9304      	str	r3, [sp, #16]
 8016a84:	4662      	mov	r2, ip
 8016a86:	ca08      	ldmia	r2!, {r3}
 8016a88:	6828      	ldr	r0, [r5, #0]
 8016a8a:	4694      	mov	ip, r2
 8016a8c:	9a00      	ldr	r2, [sp, #0]
 8016a8e:	b299      	uxth	r1, r3
 8016a90:	4351      	muls	r1, r2
 8016a92:	9a05      	ldr	r2, [sp, #20]
 8016a94:	0c1b      	lsrs	r3, r3, #16
 8016a96:	1889      	adds	r1, r1, r2
 8016a98:	9a00      	ldr	r2, [sp, #0]
 8016a9a:	4353      	muls	r3, r2
 8016a9c:	0c0a      	lsrs	r2, r1, #16
 8016a9e:	189b      	adds	r3, r3, r2
 8016aa0:	0c1a      	lsrs	r2, r3, #16
 8016aa2:	b289      	uxth	r1, r1
 8016aa4:	9205      	str	r2, [sp, #20]
 8016aa6:	b282      	uxth	r2, r0
 8016aa8:	1a52      	subs	r2, r2, r1
 8016aaa:	9904      	ldr	r1, [sp, #16]
 8016aac:	0c00      	lsrs	r0, r0, #16
 8016aae:	1852      	adds	r2, r2, r1
 8016ab0:	b29b      	uxth	r3, r3
 8016ab2:	1411      	asrs	r1, r2, #16
 8016ab4:	1ac3      	subs	r3, r0, r3
 8016ab6:	185b      	adds	r3, r3, r1
 8016ab8:	1419      	asrs	r1, r3, #16
 8016aba:	b292      	uxth	r2, r2
 8016abc:	041b      	lsls	r3, r3, #16
 8016abe:	431a      	orrs	r2, r3
 8016ac0:	9b03      	ldr	r3, [sp, #12]
 8016ac2:	9104      	str	r1, [sp, #16]
 8016ac4:	c504      	stmia	r5!, {r2}
 8016ac6:	4563      	cmp	r3, ip
 8016ac8:	d2dc      	bcs.n	8016a84 <quorem+0x4e>
 8016aca:	6823      	ldr	r3, [r4, #0]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d030      	beq.n	8016b32 <quorem+0xfc>
 8016ad0:	0030      	movs	r0, r6
 8016ad2:	9902      	ldr	r1, [sp, #8]
 8016ad4:	f001 f9c6 	bl	8017e64 <__mcmp>
 8016ad8:	2800      	cmp	r0, #0
 8016ada:	db23      	blt.n	8016b24 <quorem+0xee>
 8016adc:	0034      	movs	r4, r6
 8016ade:	2500      	movs	r5, #0
 8016ae0:	9902      	ldr	r1, [sp, #8]
 8016ae2:	3414      	adds	r4, #20
 8016ae4:	3114      	adds	r1, #20
 8016ae6:	6823      	ldr	r3, [r4, #0]
 8016ae8:	c901      	ldmia	r1!, {r0}
 8016aea:	9302      	str	r3, [sp, #8]
 8016aec:	466b      	mov	r3, sp
 8016aee:	891b      	ldrh	r3, [r3, #8]
 8016af0:	b282      	uxth	r2, r0
 8016af2:	1a9a      	subs	r2, r3, r2
 8016af4:	9b02      	ldr	r3, [sp, #8]
 8016af6:	1952      	adds	r2, r2, r5
 8016af8:	0c00      	lsrs	r0, r0, #16
 8016afa:	0c1b      	lsrs	r3, r3, #16
 8016afc:	1a1b      	subs	r3, r3, r0
 8016afe:	1410      	asrs	r0, r2, #16
 8016b00:	181b      	adds	r3, r3, r0
 8016b02:	141d      	asrs	r5, r3, #16
 8016b04:	b292      	uxth	r2, r2
 8016b06:	041b      	lsls	r3, r3, #16
 8016b08:	431a      	orrs	r2, r3
 8016b0a:	9b03      	ldr	r3, [sp, #12]
 8016b0c:	c404      	stmia	r4!, {r2}
 8016b0e:	428b      	cmp	r3, r1
 8016b10:	d2e9      	bcs.n	8016ae6 <quorem+0xb0>
 8016b12:	9a01      	ldr	r2, [sp, #4]
 8016b14:	00bb      	lsls	r3, r7, #2
 8016b16:	18d3      	adds	r3, r2, r3
 8016b18:	681a      	ldr	r2, [r3, #0]
 8016b1a:	2a00      	cmp	r2, #0
 8016b1c:	d013      	beq.n	8016b46 <quorem+0x110>
 8016b1e:	9b00      	ldr	r3, [sp, #0]
 8016b20:	3301      	adds	r3, #1
 8016b22:	9300      	str	r3, [sp, #0]
 8016b24:	9800      	ldr	r0, [sp, #0]
 8016b26:	b007      	add	sp, #28
 8016b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b2a:	6823      	ldr	r3, [r4, #0]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d104      	bne.n	8016b3a <quorem+0x104>
 8016b30:	3f01      	subs	r7, #1
 8016b32:	9b01      	ldr	r3, [sp, #4]
 8016b34:	3c04      	subs	r4, #4
 8016b36:	42a3      	cmp	r3, r4
 8016b38:	d3f7      	bcc.n	8016b2a <quorem+0xf4>
 8016b3a:	6137      	str	r7, [r6, #16]
 8016b3c:	e7c8      	b.n	8016ad0 <quorem+0x9a>
 8016b3e:	681a      	ldr	r2, [r3, #0]
 8016b40:	2a00      	cmp	r2, #0
 8016b42:	d104      	bne.n	8016b4e <quorem+0x118>
 8016b44:	3f01      	subs	r7, #1
 8016b46:	9a01      	ldr	r2, [sp, #4]
 8016b48:	3b04      	subs	r3, #4
 8016b4a:	429a      	cmp	r2, r3
 8016b4c:	d3f7      	bcc.n	8016b3e <quorem+0x108>
 8016b4e:	6137      	str	r7, [r6, #16]
 8016b50:	e7e5      	b.n	8016b1e <quorem+0xe8>
	...

08016b54 <_dtoa_r>:
 8016b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b56:	0014      	movs	r4, r2
 8016b58:	001d      	movs	r5, r3
 8016b5a:	69c6      	ldr	r6, [r0, #28]
 8016b5c:	b09d      	sub	sp, #116	@ 0x74
 8016b5e:	940a      	str	r4, [sp, #40]	@ 0x28
 8016b60:	950b      	str	r5, [sp, #44]	@ 0x2c
 8016b62:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8016b64:	9003      	str	r0, [sp, #12]
 8016b66:	2e00      	cmp	r6, #0
 8016b68:	d10f      	bne.n	8016b8a <_dtoa_r+0x36>
 8016b6a:	2010      	movs	r0, #16
 8016b6c:	f000 fe30 	bl	80177d0 <malloc>
 8016b70:	9b03      	ldr	r3, [sp, #12]
 8016b72:	1e02      	subs	r2, r0, #0
 8016b74:	61d8      	str	r0, [r3, #28]
 8016b76:	d104      	bne.n	8016b82 <_dtoa_r+0x2e>
 8016b78:	21ef      	movs	r1, #239	@ 0xef
 8016b7a:	4bc7      	ldr	r3, [pc, #796]	@ (8016e98 <_dtoa_r+0x344>)
 8016b7c:	48c7      	ldr	r0, [pc, #796]	@ (8016e9c <_dtoa_r+0x348>)
 8016b7e:	f001 fea1 	bl	80188c4 <__assert_func>
 8016b82:	6046      	str	r6, [r0, #4]
 8016b84:	6086      	str	r6, [r0, #8]
 8016b86:	6006      	str	r6, [r0, #0]
 8016b88:	60c6      	str	r6, [r0, #12]
 8016b8a:	9b03      	ldr	r3, [sp, #12]
 8016b8c:	69db      	ldr	r3, [r3, #28]
 8016b8e:	6819      	ldr	r1, [r3, #0]
 8016b90:	2900      	cmp	r1, #0
 8016b92:	d00b      	beq.n	8016bac <_dtoa_r+0x58>
 8016b94:	685a      	ldr	r2, [r3, #4]
 8016b96:	2301      	movs	r3, #1
 8016b98:	4093      	lsls	r3, r2
 8016b9a:	604a      	str	r2, [r1, #4]
 8016b9c:	608b      	str	r3, [r1, #8]
 8016b9e:	9803      	ldr	r0, [sp, #12]
 8016ba0:	f000 ff16 	bl	80179d0 <_Bfree>
 8016ba4:	2200      	movs	r2, #0
 8016ba6:	9b03      	ldr	r3, [sp, #12]
 8016ba8:	69db      	ldr	r3, [r3, #28]
 8016baa:	601a      	str	r2, [r3, #0]
 8016bac:	2d00      	cmp	r5, #0
 8016bae:	da1e      	bge.n	8016bee <_dtoa_r+0x9a>
 8016bb0:	2301      	movs	r3, #1
 8016bb2:	603b      	str	r3, [r7, #0]
 8016bb4:	006b      	lsls	r3, r5, #1
 8016bb6:	085b      	lsrs	r3, r3, #1
 8016bb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016bba:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016bbc:	4bb8      	ldr	r3, [pc, #736]	@ (8016ea0 <_dtoa_r+0x34c>)
 8016bbe:	4ab8      	ldr	r2, [pc, #736]	@ (8016ea0 <_dtoa_r+0x34c>)
 8016bc0:	403b      	ands	r3, r7
 8016bc2:	4293      	cmp	r3, r2
 8016bc4:	d116      	bne.n	8016bf4 <_dtoa_r+0xa0>
 8016bc6:	4bb7      	ldr	r3, [pc, #732]	@ (8016ea4 <_dtoa_r+0x350>)
 8016bc8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8016bca:	6013      	str	r3, [r2, #0]
 8016bcc:	033b      	lsls	r3, r7, #12
 8016bce:	0b1b      	lsrs	r3, r3, #12
 8016bd0:	4323      	orrs	r3, r4
 8016bd2:	d101      	bne.n	8016bd8 <_dtoa_r+0x84>
 8016bd4:	f000 fd83 	bl	80176de <_dtoa_r+0xb8a>
 8016bd8:	4bb3      	ldr	r3, [pc, #716]	@ (8016ea8 <_dtoa_r+0x354>)
 8016bda:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8016bdc:	9308      	str	r3, [sp, #32]
 8016bde:	2a00      	cmp	r2, #0
 8016be0:	d002      	beq.n	8016be8 <_dtoa_r+0x94>
 8016be2:	4bb2      	ldr	r3, [pc, #712]	@ (8016eac <_dtoa_r+0x358>)
 8016be4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8016be6:	6013      	str	r3, [r2, #0]
 8016be8:	9808      	ldr	r0, [sp, #32]
 8016bea:	b01d      	add	sp, #116	@ 0x74
 8016bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016bee:	2300      	movs	r3, #0
 8016bf0:	603b      	str	r3, [r7, #0]
 8016bf2:	e7e2      	b.n	8016bba <_dtoa_r+0x66>
 8016bf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016bf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016bf8:	9212      	str	r2, [sp, #72]	@ 0x48
 8016bfa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016bfc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016bfe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016c00:	2200      	movs	r2, #0
 8016c02:	2300      	movs	r3, #0
 8016c04:	f7e9 fc22 	bl	800044c <__aeabi_dcmpeq>
 8016c08:	1e06      	subs	r6, r0, #0
 8016c0a:	d00b      	beq.n	8016c24 <_dtoa_r+0xd0>
 8016c0c:	2301      	movs	r3, #1
 8016c0e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8016c10:	6013      	str	r3, [r2, #0]
 8016c12:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d002      	beq.n	8016c1e <_dtoa_r+0xca>
 8016c18:	4ba5      	ldr	r3, [pc, #660]	@ (8016eb0 <_dtoa_r+0x35c>)
 8016c1a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8016c1c:	6013      	str	r3, [r2, #0]
 8016c1e:	4ba5      	ldr	r3, [pc, #660]	@ (8016eb4 <_dtoa_r+0x360>)
 8016c20:	9308      	str	r3, [sp, #32]
 8016c22:	e7e1      	b.n	8016be8 <_dtoa_r+0x94>
 8016c24:	ab1a      	add	r3, sp, #104	@ 0x68
 8016c26:	9301      	str	r3, [sp, #4]
 8016c28:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016c2a:	9300      	str	r3, [sp, #0]
 8016c2c:	9803      	ldr	r0, [sp, #12]
 8016c2e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016c30:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016c32:	f001 f9cd 	bl	8017fd0 <__d2b>
 8016c36:	007a      	lsls	r2, r7, #1
 8016c38:	9005      	str	r0, [sp, #20]
 8016c3a:	0d52      	lsrs	r2, r2, #21
 8016c3c:	d100      	bne.n	8016c40 <_dtoa_r+0xec>
 8016c3e:	e07b      	b.n	8016d38 <_dtoa_r+0x1e4>
 8016c40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016c42:	9618      	str	r6, [sp, #96]	@ 0x60
 8016c44:	0319      	lsls	r1, r3, #12
 8016c46:	4b9c      	ldr	r3, [pc, #624]	@ (8016eb8 <_dtoa_r+0x364>)
 8016c48:	0b09      	lsrs	r1, r1, #12
 8016c4a:	430b      	orrs	r3, r1
 8016c4c:	499b      	ldr	r1, [pc, #620]	@ (8016ebc <_dtoa_r+0x368>)
 8016c4e:	1857      	adds	r7, r2, r1
 8016c50:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016c52:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016c54:	0019      	movs	r1, r3
 8016c56:	2200      	movs	r2, #0
 8016c58:	4b99      	ldr	r3, [pc, #612]	@ (8016ec0 <_dtoa_r+0x36c>)
 8016c5a:	f7eb ff35 	bl	8002ac8 <__aeabi_dsub>
 8016c5e:	4a99      	ldr	r2, [pc, #612]	@ (8016ec4 <_dtoa_r+0x370>)
 8016c60:	4b99      	ldr	r3, [pc, #612]	@ (8016ec8 <_dtoa_r+0x374>)
 8016c62:	f7eb fc69 	bl	8002538 <__aeabi_dmul>
 8016c66:	4a99      	ldr	r2, [pc, #612]	@ (8016ecc <_dtoa_r+0x378>)
 8016c68:	4b99      	ldr	r3, [pc, #612]	@ (8016ed0 <_dtoa_r+0x37c>)
 8016c6a:	f7ea fcbd 	bl	80015e8 <__aeabi_dadd>
 8016c6e:	0004      	movs	r4, r0
 8016c70:	0038      	movs	r0, r7
 8016c72:	000d      	movs	r5, r1
 8016c74:	f7ec fb22 	bl	80032bc <__aeabi_i2d>
 8016c78:	4a96      	ldr	r2, [pc, #600]	@ (8016ed4 <_dtoa_r+0x380>)
 8016c7a:	4b97      	ldr	r3, [pc, #604]	@ (8016ed8 <_dtoa_r+0x384>)
 8016c7c:	f7eb fc5c 	bl	8002538 <__aeabi_dmul>
 8016c80:	0002      	movs	r2, r0
 8016c82:	000b      	movs	r3, r1
 8016c84:	0020      	movs	r0, r4
 8016c86:	0029      	movs	r1, r5
 8016c88:	f7ea fcae 	bl	80015e8 <__aeabi_dadd>
 8016c8c:	0004      	movs	r4, r0
 8016c8e:	000d      	movs	r5, r1
 8016c90:	f7ec fad8 	bl	8003244 <__aeabi_d2iz>
 8016c94:	2200      	movs	r2, #0
 8016c96:	9004      	str	r0, [sp, #16]
 8016c98:	2300      	movs	r3, #0
 8016c9a:	0020      	movs	r0, r4
 8016c9c:	0029      	movs	r1, r5
 8016c9e:	f7e9 fbdb 	bl	8000458 <__aeabi_dcmplt>
 8016ca2:	2800      	cmp	r0, #0
 8016ca4:	d00b      	beq.n	8016cbe <_dtoa_r+0x16a>
 8016ca6:	9804      	ldr	r0, [sp, #16]
 8016ca8:	f7ec fb08 	bl	80032bc <__aeabi_i2d>
 8016cac:	002b      	movs	r3, r5
 8016cae:	0022      	movs	r2, r4
 8016cb0:	f7e9 fbcc 	bl	800044c <__aeabi_dcmpeq>
 8016cb4:	4243      	negs	r3, r0
 8016cb6:	4158      	adcs	r0, r3
 8016cb8:	9b04      	ldr	r3, [sp, #16]
 8016cba:	1a1b      	subs	r3, r3, r0
 8016cbc:	9304      	str	r3, [sp, #16]
 8016cbe:	2301      	movs	r3, #1
 8016cc0:	9315      	str	r3, [sp, #84]	@ 0x54
 8016cc2:	9b04      	ldr	r3, [sp, #16]
 8016cc4:	2b16      	cmp	r3, #22
 8016cc6:	d810      	bhi.n	8016cea <_dtoa_r+0x196>
 8016cc8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016cca:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016ccc:	9a04      	ldr	r2, [sp, #16]
 8016cce:	4b83      	ldr	r3, [pc, #524]	@ (8016edc <_dtoa_r+0x388>)
 8016cd0:	00d2      	lsls	r2, r2, #3
 8016cd2:	189b      	adds	r3, r3, r2
 8016cd4:	681a      	ldr	r2, [r3, #0]
 8016cd6:	685b      	ldr	r3, [r3, #4]
 8016cd8:	f7e9 fbbe 	bl	8000458 <__aeabi_dcmplt>
 8016cdc:	2800      	cmp	r0, #0
 8016cde:	d047      	beq.n	8016d70 <_dtoa_r+0x21c>
 8016ce0:	9b04      	ldr	r3, [sp, #16]
 8016ce2:	3b01      	subs	r3, #1
 8016ce4:	9304      	str	r3, [sp, #16]
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	9315      	str	r3, [sp, #84]	@ 0x54
 8016cea:	2200      	movs	r2, #0
 8016cec:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8016cee:	9206      	str	r2, [sp, #24]
 8016cf0:	1bdb      	subs	r3, r3, r7
 8016cf2:	1e5a      	subs	r2, r3, #1
 8016cf4:	d53e      	bpl.n	8016d74 <_dtoa_r+0x220>
 8016cf6:	2201      	movs	r2, #1
 8016cf8:	1ad3      	subs	r3, r2, r3
 8016cfa:	9306      	str	r3, [sp, #24]
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	930d      	str	r3, [sp, #52]	@ 0x34
 8016d00:	9b04      	ldr	r3, [sp, #16]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	db38      	blt.n	8016d78 <_dtoa_r+0x224>
 8016d06:	9a04      	ldr	r2, [sp, #16]
 8016d08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016d0a:	4694      	mov	ip, r2
 8016d0c:	4463      	add	r3, ip
 8016d0e:	930d      	str	r3, [sp, #52]	@ 0x34
 8016d10:	2300      	movs	r3, #0
 8016d12:	9214      	str	r2, [sp, #80]	@ 0x50
 8016d14:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016d16:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8016d18:	2401      	movs	r4, #1
 8016d1a:	2b09      	cmp	r3, #9
 8016d1c:	d867      	bhi.n	8016dee <_dtoa_r+0x29a>
 8016d1e:	2b05      	cmp	r3, #5
 8016d20:	dd02      	ble.n	8016d28 <_dtoa_r+0x1d4>
 8016d22:	2400      	movs	r4, #0
 8016d24:	3b04      	subs	r3, #4
 8016d26:	9322      	str	r3, [sp, #136]	@ 0x88
 8016d28:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8016d2a:	1e98      	subs	r0, r3, #2
 8016d2c:	2803      	cmp	r0, #3
 8016d2e:	d867      	bhi.n	8016e00 <_dtoa_r+0x2ac>
 8016d30:	f7e9 f9f2 	bl	8000118 <__gnu_thumb1_case_uqi>
 8016d34:	5b383a2b 	.word	0x5b383a2b
 8016d38:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016d3a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8016d3c:	18f6      	adds	r6, r6, r3
 8016d3e:	4b68      	ldr	r3, [pc, #416]	@ (8016ee0 <_dtoa_r+0x38c>)
 8016d40:	18f2      	adds	r2, r6, r3
 8016d42:	2a20      	cmp	r2, #32
 8016d44:	dd0f      	ble.n	8016d66 <_dtoa_r+0x212>
 8016d46:	2340      	movs	r3, #64	@ 0x40
 8016d48:	1a9b      	subs	r3, r3, r2
 8016d4a:	409f      	lsls	r7, r3
 8016d4c:	4b65      	ldr	r3, [pc, #404]	@ (8016ee4 <_dtoa_r+0x390>)
 8016d4e:	0038      	movs	r0, r7
 8016d50:	18f3      	adds	r3, r6, r3
 8016d52:	40dc      	lsrs	r4, r3
 8016d54:	4320      	orrs	r0, r4
 8016d56:	f7ec fadf 	bl	8003318 <__aeabi_ui2d>
 8016d5a:	2201      	movs	r2, #1
 8016d5c:	4b62      	ldr	r3, [pc, #392]	@ (8016ee8 <_dtoa_r+0x394>)
 8016d5e:	1e77      	subs	r7, r6, #1
 8016d60:	18cb      	adds	r3, r1, r3
 8016d62:	9218      	str	r2, [sp, #96]	@ 0x60
 8016d64:	e776      	b.n	8016c54 <_dtoa_r+0x100>
 8016d66:	2320      	movs	r3, #32
 8016d68:	0020      	movs	r0, r4
 8016d6a:	1a9b      	subs	r3, r3, r2
 8016d6c:	4098      	lsls	r0, r3
 8016d6e:	e7f2      	b.n	8016d56 <_dtoa_r+0x202>
 8016d70:	9015      	str	r0, [sp, #84]	@ 0x54
 8016d72:	e7ba      	b.n	8016cea <_dtoa_r+0x196>
 8016d74:	920d      	str	r2, [sp, #52]	@ 0x34
 8016d76:	e7c3      	b.n	8016d00 <_dtoa_r+0x1ac>
 8016d78:	9b06      	ldr	r3, [sp, #24]
 8016d7a:	9a04      	ldr	r2, [sp, #16]
 8016d7c:	1a9b      	subs	r3, r3, r2
 8016d7e:	9306      	str	r3, [sp, #24]
 8016d80:	4253      	negs	r3, r2
 8016d82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016d84:	2300      	movs	r3, #0
 8016d86:	9314      	str	r3, [sp, #80]	@ 0x50
 8016d88:	e7c5      	b.n	8016d16 <_dtoa_r+0x1c2>
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	9310      	str	r3, [sp, #64]	@ 0x40
 8016d8e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016d90:	930e      	str	r3, [sp, #56]	@ 0x38
 8016d92:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	dc13      	bgt.n	8016dc0 <_dtoa_r+0x26c>
 8016d98:	2301      	movs	r3, #1
 8016d9a:	001a      	movs	r2, r3
 8016d9c:	930e      	str	r3, [sp, #56]	@ 0x38
 8016d9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016da0:	9223      	str	r2, [sp, #140]	@ 0x8c
 8016da2:	e00d      	b.n	8016dc0 <_dtoa_r+0x26c>
 8016da4:	2301      	movs	r3, #1
 8016da6:	e7f1      	b.n	8016d8c <_dtoa_r+0x238>
 8016da8:	2300      	movs	r3, #0
 8016daa:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8016dac:	9310      	str	r3, [sp, #64]	@ 0x40
 8016dae:	4694      	mov	ip, r2
 8016db0:	9b04      	ldr	r3, [sp, #16]
 8016db2:	4463      	add	r3, ip
 8016db4:	930e      	str	r3, [sp, #56]	@ 0x38
 8016db6:	3301      	adds	r3, #1
 8016db8:	9309      	str	r3, [sp, #36]	@ 0x24
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	dc00      	bgt.n	8016dc0 <_dtoa_r+0x26c>
 8016dbe:	2301      	movs	r3, #1
 8016dc0:	9a03      	ldr	r2, [sp, #12]
 8016dc2:	2100      	movs	r1, #0
 8016dc4:	69d0      	ldr	r0, [r2, #28]
 8016dc6:	2204      	movs	r2, #4
 8016dc8:	0015      	movs	r5, r2
 8016dca:	3514      	adds	r5, #20
 8016dcc:	429d      	cmp	r5, r3
 8016dce:	d91b      	bls.n	8016e08 <_dtoa_r+0x2b4>
 8016dd0:	6041      	str	r1, [r0, #4]
 8016dd2:	9803      	ldr	r0, [sp, #12]
 8016dd4:	f000 fdb8 	bl	8017948 <_Balloc>
 8016dd8:	9008      	str	r0, [sp, #32]
 8016dda:	2800      	cmp	r0, #0
 8016ddc:	d117      	bne.n	8016e0e <_dtoa_r+0x2ba>
 8016dde:	21b0      	movs	r1, #176	@ 0xb0
 8016de0:	4b42      	ldr	r3, [pc, #264]	@ (8016eec <_dtoa_r+0x398>)
 8016de2:	482e      	ldr	r0, [pc, #184]	@ (8016e9c <_dtoa_r+0x348>)
 8016de4:	9a08      	ldr	r2, [sp, #32]
 8016de6:	31ff      	adds	r1, #255	@ 0xff
 8016de8:	e6c9      	b.n	8016b7e <_dtoa_r+0x2a>
 8016dea:	2301      	movs	r3, #1
 8016dec:	e7dd      	b.n	8016daa <_dtoa_r+0x256>
 8016dee:	2300      	movs	r3, #0
 8016df0:	9410      	str	r4, [sp, #64]	@ 0x40
 8016df2:	9322      	str	r3, [sp, #136]	@ 0x88
 8016df4:	3b01      	subs	r3, #1
 8016df6:	930e      	str	r3, [sp, #56]	@ 0x38
 8016df8:	9309      	str	r3, [sp, #36]	@ 0x24
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	3313      	adds	r3, #19
 8016dfe:	e7cf      	b.n	8016da0 <_dtoa_r+0x24c>
 8016e00:	2301      	movs	r3, #1
 8016e02:	9310      	str	r3, [sp, #64]	@ 0x40
 8016e04:	3b02      	subs	r3, #2
 8016e06:	e7f6      	b.n	8016df6 <_dtoa_r+0x2a2>
 8016e08:	3101      	adds	r1, #1
 8016e0a:	0052      	lsls	r2, r2, #1
 8016e0c:	e7dc      	b.n	8016dc8 <_dtoa_r+0x274>
 8016e0e:	9b03      	ldr	r3, [sp, #12]
 8016e10:	9a08      	ldr	r2, [sp, #32]
 8016e12:	69db      	ldr	r3, [r3, #28]
 8016e14:	601a      	str	r2, [r3, #0]
 8016e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e18:	2b0e      	cmp	r3, #14
 8016e1a:	d900      	bls.n	8016e1e <_dtoa_r+0x2ca>
 8016e1c:	e0d9      	b.n	8016fd2 <_dtoa_r+0x47e>
 8016e1e:	2c00      	cmp	r4, #0
 8016e20:	d100      	bne.n	8016e24 <_dtoa_r+0x2d0>
 8016e22:	e0d6      	b.n	8016fd2 <_dtoa_r+0x47e>
 8016e24:	9b04      	ldr	r3, [sp, #16]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	dd64      	ble.n	8016ef4 <_dtoa_r+0x3a0>
 8016e2a:	210f      	movs	r1, #15
 8016e2c:	9a04      	ldr	r2, [sp, #16]
 8016e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8016edc <_dtoa_r+0x388>)
 8016e30:	400a      	ands	r2, r1
 8016e32:	00d2      	lsls	r2, r2, #3
 8016e34:	189b      	adds	r3, r3, r2
 8016e36:	681e      	ldr	r6, [r3, #0]
 8016e38:	685f      	ldr	r7, [r3, #4]
 8016e3a:	9b04      	ldr	r3, [sp, #16]
 8016e3c:	2402      	movs	r4, #2
 8016e3e:	111d      	asrs	r5, r3, #4
 8016e40:	05db      	lsls	r3, r3, #23
 8016e42:	d50a      	bpl.n	8016e5a <_dtoa_r+0x306>
 8016e44:	4b2a      	ldr	r3, [pc, #168]	@ (8016ef0 <_dtoa_r+0x39c>)
 8016e46:	400d      	ands	r5, r1
 8016e48:	6a1a      	ldr	r2, [r3, #32]
 8016e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e4c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016e4e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016e50:	f7ea ff2e 	bl	8001cb0 <__aeabi_ddiv>
 8016e54:	900a      	str	r0, [sp, #40]	@ 0x28
 8016e56:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016e58:	3401      	adds	r4, #1
 8016e5a:	4b25      	ldr	r3, [pc, #148]	@ (8016ef0 <_dtoa_r+0x39c>)
 8016e5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8016e5e:	2d00      	cmp	r5, #0
 8016e60:	d108      	bne.n	8016e74 <_dtoa_r+0x320>
 8016e62:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016e64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016e66:	0032      	movs	r2, r6
 8016e68:	003b      	movs	r3, r7
 8016e6a:	f7ea ff21 	bl	8001cb0 <__aeabi_ddiv>
 8016e6e:	900a      	str	r0, [sp, #40]	@ 0x28
 8016e70:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016e72:	e05a      	b.n	8016f2a <_dtoa_r+0x3d6>
 8016e74:	2301      	movs	r3, #1
 8016e76:	421d      	tst	r5, r3
 8016e78:	d009      	beq.n	8016e8e <_dtoa_r+0x33a>
 8016e7a:	18e4      	adds	r4, r4, r3
 8016e7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016e7e:	0030      	movs	r0, r6
 8016e80:	681a      	ldr	r2, [r3, #0]
 8016e82:	685b      	ldr	r3, [r3, #4]
 8016e84:	0039      	movs	r1, r7
 8016e86:	f7eb fb57 	bl	8002538 <__aeabi_dmul>
 8016e8a:	0006      	movs	r6, r0
 8016e8c:	000f      	movs	r7, r1
 8016e8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016e90:	106d      	asrs	r5, r5, #1
 8016e92:	3308      	adds	r3, #8
 8016e94:	e7e2      	b.n	8016e5c <_dtoa_r+0x308>
 8016e96:	46c0      	nop			@ (mov r8, r8)
 8016e98:	0801a3ad 	.word	0x0801a3ad
 8016e9c:	0801a3c4 	.word	0x0801a3c4
 8016ea0:	7ff00000 	.word	0x7ff00000
 8016ea4:	0000270f 	.word	0x0000270f
 8016ea8:	0801a3a9 	.word	0x0801a3a9
 8016eac:	0801a3ac 	.word	0x0801a3ac
 8016eb0:	0801a37d 	.word	0x0801a37d
 8016eb4:	0801a37c 	.word	0x0801a37c
 8016eb8:	3ff00000 	.word	0x3ff00000
 8016ebc:	fffffc01 	.word	0xfffffc01
 8016ec0:	3ff80000 	.word	0x3ff80000
 8016ec4:	636f4361 	.word	0x636f4361
 8016ec8:	3fd287a7 	.word	0x3fd287a7
 8016ecc:	8b60c8b3 	.word	0x8b60c8b3
 8016ed0:	3fc68a28 	.word	0x3fc68a28
 8016ed4:	509f79fb 	.word	0x509f79fb
 8016ed8:	3fd34413 	.word	0x3fd34413
 8016edc:	0801a4c0 	.word	0x0801a4c0
 8016ee0:	00000432 	.word	0x00000432
 8016ee4:	00000412 	.word	0x00000412
 8016ee8:	fe100000 	.word	0xfe100000
 8016eec:	0801a41c 	.word	0x0801a41c
 8016ef0:	0801a498 	.word	0x0801a498
 8016ef4:	9b04      	ldr	r3, [sp, #16]
 8016ef6:	2402      	movs	r4, #2
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d016      	beq.n	8016f2a <_dtoa_r+0x3d6>
 8016efc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016efe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016f00:	220f      	movs	r2, #15
 8016f02:	425d      	negs	r5, r3
 8016f04:	402a      	ands	r2, r5
 8016f06:	4bd7      	ldr	r3, [pc, #860]	@ (8017264 <_dtoa_r+0x710>)
 8016f08:	00d2      	lsls	r2, r2, #3
 8016f0a:	189b      	adds	r3, r3, r2
 8016f0c:	681a      	ldr	r2, [r3, #0]
 8016f0e:	685b      	ldr	r3, [r3, #4]
 8016f10:	f7eb fb12 	bl	8002538 <__aeabi_dmul>
 8016f14:	2701      	movs	r7, #1
 8016f16:	2300      	movs	r3, #0
 8016f18:	900a      	str	r0, [sp, #40]	@ 0x28
 8016f1a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016f1c:	4ed2      	ldr	r6, [pc, #840]	@ (8017268 <_dtoa_r+0x714>)
 8016f1e:	112d      	asrs	r5, r5, #4
 8016f20:	2d00      	cmp	r5, #0
 8016f22:	d000      	beq.n	8016f26 <_dtoa_r+0x3d2>
 8016f24:	e0ba      	b.n	801709c <_dtoa_r+0x548>
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d1a1      	bne.n	8016e6e <_dtoa_r+0x31a>
 8016f2a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8016f2c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016f2e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d100      	bne.n	8016f36 <_dtoa_r+0x3e2>
 8016f34:	e0bd      	b.n	80170b2 <_dtoa_r+0x55e>
 8016f36:	2200      	movs	r2, #0
 8016f38:	0030      	movs	r0, r6
 8016f3a:	0039      	movs	r1, r7
 8016f3c:	4bcb      	ldr	r3, [pc, #812]	@ (801726c <_dtoa_r+0x718>)
 8016f3e:	f7e9 fa8b 	bl	8000458 <__aeabi_dcmplt>
 8016f42:	2800      	cmp	r0, #0
 8016f44:	d100      	bne.n	8016f48 <_dtoa_r+0x3f4>
 8016f46:	e0b4      	b.n	80170b2 <_dtoa_r+0x55e>
 8016f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d100      	bne.n	8016f50 <_dtoa_r+0x3fc>
 8016f4e:	e0b0      	b.n	80170b2 <_dtoa_r+0x55e>
 8016f50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	dd39      	ble.n	8016fca <_dtoa_r+0x476>
 8016f56:	9b04      	ldr	r3, [sp, #16]
 8016f58:	2200      	movs	r2, #0
 8016f5a:	3b01      	subs	r3, #1
 8016f5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8016f5e:	0030      	movs	r0, r6
 8016f60:	4bc3      	ldr	r3, [pc, #780]	@ (8017270 <_dtoa_r+0x71c>)
 8016f62:	0039      	movs	r1, r7
 8016f64:	f7eb fae8 	bl	8002538 <__aeabi_dmul>
 8016f68:	900a      	str	r0, [sp, #40]	@ 0x28
 8016f6a:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016f6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016f6e:	3401      	adds	r4, #1
 8016f70:	0020      	movs	r0, r4
 8016f72:	9311      	str	r3, [sp, #68]	@ 0x44
 8016f74:	f7ec f9a2 	bl	80032bc <__aeabi_i2d>
 8016f78:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016f7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016f7c:	f7eb fadc 	bl	8002538 <__aeabi_dmul>
 8016f80:	4bbc      	ldr	r3, [pc, #752]	@ (8017274 <_dtoa_r+0x720>)
 8016f82:	2200      	movs	r2, #0
 8016f84:	f7ea fb30 	bl	80015e8 <__aeabi_dadd>
 8016f88:	4bbb      	ldr	r3, [pc, #748]	@ (8017278 <_dtoa_r+0x724>)
 8016f8a:	0006      	movs	r6, r0
 8016f8c:	18cf      	adds	r7, r1, r3
 8016f8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d000      	beq.n	8016f96 <_dtoa_r+0x442>
 8016f94:	e091      	b.n	80170ba <_dtoa_r+0x566>
 8016f96:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016f98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	4bb7      	ldr	r3, [pc, #732]	@ (801727c <_dtoa_r+0x728>)
 8016f9e:	f7eb fd93 	bl	8002ac8 <__aeabi_dsub>
 8016fa2:	0032      	movs	r2, r6
 8016fa4:	003b      	movs	r3, r7
 8016fa6:	0004      	movs	r4, r0
 8016fa8:	000d      	movs	r5, r1
 8016faa:	f7e9 fa69 	bl	8000480 <__aeabi_dcmpgt>
 8016fae:	2800      	cmp	r0, #0
 8016fb0:	d000      	beq.n	8016fb4 <_dtoa_r+0x460>
 8016fb2:	e29d      	b.n	80174f0 <_dtoa_r+0x99c>
 8016fb4:	2180      	movs	r1, #128	@ 0x80
 8016fb6:	0609      	lsls	r1, r1, #24
 8016fb8:	187b      	adds	r3, r7, r1
 8016fba:	0032      	movs	r2, r6
 8016fbc:	0020      	movs	r0, r4
 8016fbe:	0029      	movs	r1, r5
 8016fc0:	f7e9 fa4a 	bl	8000458 <__aeabi_dcmplt>
 8016fc4:	2800      	cmp	r0, #0
 8016fc6:	d000      	beq.n	8016fca <_dtoa_r+0x476>
 8016fc8:	e130      	b.n	801722c <_dtoa_r+0x6d8>
 8016fca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016fcc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8016fce:	930a      	str	r3, [sp, #40]	@ 0x28
 8016fd0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016fd2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	da00      	bge.n	8016fda <_dtoa_r+0x486>
 8016fd8:	e177      	b.n	80172ca <_dtoa_r+0x776>
 8016fda:	9a04      	ldr	r2, [sp, #16]
 8016fdc:	2a0e      	cmp	r2, #14
 8016fde:	dd00      	ble.n	8016fe2 <_dtoa_r+0x48e>
 8016fe0:	e173      	b.n	80172ca <_dtoa_r+0x776>
 8016fe2:	4ba0      	ldr	r3, [pc, #640]	@ (8017264 <_dtoa_r+0x710>)
 8016fe4:	00d2      	lsls	r2, r2, #3
 8016fe6:	189b      	adds	r3, r3, r2
 8016fe8:	685c      	ldr	r4, [r3, #4]
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	9306      	str	r3, [sp, #24]
 8016fee:	9407      	str	r4, [sp, #28]
 8016ff0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	da03      	bge.n	8016ffe <_dtoa_r+0x4aa>
 8016ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	dc00      	bgt.n	8016ffe <_dtoa_r+0x4aa>
 8016ffc:	e106      	b.n	801720c <_dtoa_r+0x6b8>
 8016ffe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8017000:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017004:	9d08      	ldr	r5, [sp, #32]
 8017006:	3b01      	subs	r3, #1
 8017008:	195b      	adds	r3, r3, r5
 801700a:	930a      	str	r3, [sp, #40]	@ 0x28
 801700c:	9a06      	ldr	r2, [sp, #24]
 801700e:	9b07      	ldr	r3, [sp, #28]
 8017010:	0030      	movs	r0, r6
 8017012:	0039      	movs	r1, r7
 8017014:	f7ea fe4c 	bl	8001cb0 <__aeabi_ddiv>
 8017018:	f7ec f914 	bl	8003244 <__aeabi_d2iz>
 801701c:	9009      	str	r0, [sp, #36]	@ 0x24
 801701e:	f7ec f94d 	bl	80032bc <__aeabi_i2d>
 8017022:	9a06      	ldr	r2, [sp, #24]
 8017024:	9b07      	ldr	r3, [sp, #28]
 8017026:	f7eb fa87 	bl	8002538 <__aeabi_dmul>
 801702a:	0002      	movs	r2, r0
 801702c:	000b      	movs	r3, r1
 801702e:	0030      	movs	r0, r6
 8017030:	0039      	movs	r1, r7
 8017032:	f7eb fd49 	bl	8002ac8 <__aeabi_dsub>
 8017036:	002b      	movs	r3, r5
 8017038:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801703a:	3501      	adds	r5, #1
 801703c:	3230      	adds	r2, #48	@ 0x30
 801703e:	701a      	strb	r2, [r3, #0]
 8017040:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017042:	002c      	movs	r4, r5
 8017044:	429a      	cmp	r2, r3
 8017046:	d000      	beq.n	801704a <_dtoa_r+0x4f6>
 8017048:	e131      	b.n	80172ae <_dtoa_r+0x75a>
 801704a:	0002      	movs	r2, r0
 801704c:	000b      	movs	r3, r1
 801704e:	f7ea facb 	bl	80015e8 <__aeabi_dadd>
 8017052:	9a06      	ldr	r2, [sp, #24]
 8017054:	9b07      	ldr	r3, [sp, #28]
 8017056:	0006      	movs	r6, r0
 8017058:	000f      	movs	r7, r1
 801705a:	f7e9 fa11 	bl	8000480 <__aeabi_dcmpgt>
 801705e:	2800      	cmp	r0, #0
 8017060:	d000      	beq.n	8017064 <_dtoa_r+0x510>
 8017062:	e10f      	b.n	8017284 <_dtoa_r+0x730>
 8017064:	9a06      	ldr	r2, [sp, #24]
 8017066:	9b07      	ldr	r3, [sp, #28]
 8017068:	0030      	movs	r0, r6
 801706a:	0039      	movs	r1, r7
 801706c:	f7e9 f9ee 	bl	800044c <__aeabi_dcmpeq>
 8017070:	2800      	cmp	r0, #0
 8017072:	d003      	beq.n	801707c <_dtoa_r+0x528>
 8017074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017076:	07dd      	lsls	r5, r3, #31
 8017078:	d500      	bpl.n	801707c <_dtoa_r+0x528>
 801707a:	e103      	b.n	8017284 <_dtoa_r+0x730>
 801707c:	9905      	ldr	r1, [sp, #20]
 801707e:	9803      	ldr	r0, [sp, #12]
 8017080:	f000 fca6 	bl	80179d0 <_Bfree>
 8017084:	2300      	movs	r3, #0
 8017086:	7023      	strb	r3, [r4, #0]
 8017088:	9b04      	ldr	r3, [sp, #16]
 801708a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801708c:	3301      	adds	r3, #1
 801708e:	6013      	str	r3, [r2, #0]
 8017090:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8017092:	2b00      	cmp	r3, #0
 8017094:	d100      	bne.n	8017098 <_dtoa_r+0x544>
 8017096:	e5a7      	b.n	8016be8 <_dtoa_r+0x94>
 8017098:	601c      	str	r4, [r3, #0]
 801709a:	e5a5      	b.n	8016be8 <_dtoa_r+0x94>
 801709c:	423d      	tst	r5, r7
 801709e:	d005      	beq.n	80170ac <_dtoa_r+0x558>
 80170a0:	6832      	ldr	r2, [r6, #0]
 80170a2:	6873      	ldr	r3, [r6, #4]
 80170a4:	f7eb fa48 	bl	8002538 <__aeabi_dmul>
 80170a8:	003b      	movs	r3, r7
 80170aa:	3401      	adds	r4, #1
 80170ac:	106d      	asrs	r5, r5, #1
 80170ae:	3608      	adds	r6, #8
 80170b0:	e736      	b.n	8016f20 <_dtoa_r+0x3cc>
 80170b2:	9b04      	ldr	r3, [sp, #16]
 80170b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80170b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80170b8:	e75a      	b.n	8016f70 <_dtoa_r+0x41c>
 80170ba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80170bc:	4b69      	ldr	r3, [pc, #420]	@ (8017264 <_dtoa_r+0x710>)
 80170be:	3a01      	subs	r2, #1
 80170c0:	00d2      	lsls	r2, r2, #3
 80170c2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80170c4:	189b      	adds	r3, r3, r2
 80170c6:	681a      	ldr	r2, [r3, #0]
 80170c8:	685b      	ldr	r3, [r3, #4]
 80170ca:	2900      	cmp	r1, #0
 80170cc:	d04c      	beq.n	8017168 <_dtoa_r+0x614>
 80170ce:	2000      	movs	r0, #0
 80170d0:	496b      	ldr	r1, [pc, #428]	@ (8017280 <_dtoa_r+0x72c>)
 80170d2:	f7ea fded 	bl	8001cb0 <__aeabi_ddiv>
 80170d6:	0032      	movs	r2, r6
 80170d8:	003b      	movs	r3, r7
 80170da:	f7eb fcf5 	bl	8002ac8 <__aeabi_dsub>
 80170de:	9a08      	ldr	r2, [sp, #32]
 80170e0:	0006      	movs	r6, r0
 80170e2:	4694      	mov	ip, r2
 80170e4:	000f      	movs	r7, r1
 80170e6:	9b08      	ldr	r3, [sp, #32]
 80170e8:	9316      	str	r3, [sp, #88]	@ 0x58
 80170ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80170ec:	4463      	add	r3, ip
 80170ee:	9311      	str	r3, [sp, #68]	@ 0x44
 80170f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80170f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80170f4:	f7ec f8a6 	bl	8003244 <__aeabi_d2iz>
 80170f8:	0005      	movs	r5, r0
 80170fa:	f7ec f8df 	bl	80032bc <__aeabi_i2d>
 80170fe:	0002      	movs	r2, r0
 8017100:	000b      	movs	r3, r1
 8017102:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017104:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017106:	f7eb fcdf 	bl	8002ac8 <__aeabi_dsub>
 801710a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801710c:	3530      	adds	r5, #48	@ 0x30
 801710e:	1c5c      	adds	r4, r3, #1
 8017110:	701d      	strb	r5, [r3, #0]
 8017112:	0032      	movs	r2, r6
 8017114:	003b      	movs	r3, r7
 8017116:	900a      	str	r0, [sp, #40]	@ 0x28
 8017118:	910b      	str	r1, [sp, #44]	@ 0x2c
 801711a:	f7e9 f99d 	bl	8000458 <__aeabi_dcmplt>
 801711e:	2800      	cmp	r0, #0
 8017120:	d16a      	bne.n	80171f8 <_dtoa_r+0x6a4>
 8017122:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017124:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017126:	2000      	movs	r0, #0
 8017128:	4950      	ldr	r1, [pc, #320]	@ (801726c <_dtoa_r+0x718>)
 801712a:	f7eb fccd 	bl	8002ac8 <__aeabi_dsub>
 801712e:	0032      	movs	r2, r6
 8017130:	003b      	movs	r3, r7
 8017132:	f7e9 f991 	bl	8000458 <__aeabi_dcmplt>
 8017136:	2800      	cmp	r0, #0
 8017138:	d000      	beq.n	801713c <_dtoa_r+0x5e8>
 801713a:	e0a5      	b.n	8017288 <_dtoa_r+0x734>
 801713c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801713e:	42a3      	cmp	r3, r4
 8017140:	d100      	bne.n	8017144 <_dtoa_r+0x5f0>
 8017142:	e742      	b.n	8016fca <_dtoa_r+0x476>
 8017144:	2200      	movs	r2, #0
 8017146:	0030      	movs	r0, r6
 8017148:	0039      	movs	r1, r7
 801714a:	4b49      	ldr	r3, [pc, #292]	@ (8017270 <_dtoa_r+0x71c>)
 801714c:	f7eb f9f4 	bl	8002538 <__aeabi_dmul>
 8017150:	2200      	movs	r2, #0
 8017152:	0006      	movs	r6, r0
 8017154:	000f      	movs	r7, r1
 8017156:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017158:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801715a:	4b45      	ldr	r3, [pc, #276]	@ (8017270 <_dtoa_r+0x71c>)
 801715c:	f7eb f9ec 	bl	8002538 <__aeabi_dmul>
 8017160:	9416      	str	r4, [sp, #88]	@ 0x58
 8017162:	900a      	str	r0, [sp, #40]	@ 0x28
 8017164:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017166:	e7c3      	b.n	80170f0 <_dtoa_r+0x59c>
 8017168:	0030      	movs	r0, r6
 801716a:	0039      	movs	r1, r7
 801716c:	f7eb f9e4 	bl	8002538 <__aeabi_dmul>
 8017170:	9d08      	ldr	r5, [sp, #32]
 8017172:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017174:	002b      	movs	r3, r5
 8017176:	4694      	mov	ip, r2
 8017178:	9016      	str	r0, [sp, #88]	@ 0x58
 801717a:	9117      	str	r1, [sp, #92]	@ 0x5c
 801717c:	4463      	add	r3, ip
 801717e:	9319      	str	r3, [sp, #100]	@ 0x64
 8017180:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017182:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017184:	f7ec f85e 	bl	8003244 <__aeabi_d2iz>
 8017188:	0004      	movs	r4, r0
 801718a:	f7ec f897 	bl	80032bc <__aeabi_i2d>
 801718e:	000b      	movs	r3, r1
 8017190:	0002      	movs	r2, r0
 8017192:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017194:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017196:	f7eb fc97 	bl	8002ac8 <__aeabi_dsub>
 801719a:	3430      	adds	r4, #48	@ 0x30
 801719c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801719e:	702c      	strb	r4, [r5, #0]
 80171a0:	3501      	adds	r5, #1
 80171a2:	0006      	movs	r6, r0
 80171a4:	000f      	movs	r7, r1
 80171a6:	42ab      	cmp	r3, r5
 80171a8:	d129      	bne.n	80171fe <_dtoa_r+0x6aa>
 80171aa:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80171ac:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80171ae:	9b08      	ldr	r3, [sp, #32]
 80171b0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80171b2:	469c      	mov	ip, r3
 80171b4:	2200      	movs	r2, #0
 80171b6:	4b32      	ldr	r3, [pc, #200]	@ (8017280 <_dtoa_r+0x72c>)
 80171b8:	4464      	add	r4, ip
 80171ba:	f7ea fa15 	bl	80015e8 <__aeabi_dadd>
 80171be:	0002      	movs	r2, r0
 80171c0:	000b      	movs	r3, r1
 80171c2:	0030      	movs	r0, r6
 80171c4:	0039      	movs	r1, r7
 80171c6:	f7e9 f95b 	bl	8000480 <__aeabi_dcmpgt>
 80171ca:	2800      	cmp	r0, #0
 80171cc:	d15c      	bne.n	8017288 <_dtoa_r+0x734>
 80171ce:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80171d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80171d2:	2000      	movs	r0, #0
 80171d4:	492a      	ldr	r1, [pc, #168]	@ (8017280 <_dtoa_r+0x72c>)
 80171d6:	f7eb fc77 	bl	8002ac8 <__aeabi_dsub>
 80171da:	0002      	movs	r2, r0
 80171dc:	000b      	movs	r3, r1
 80171de:	0030      	movs	r0, r6
 80171e0:	0039      	movs	r1, r7
 80171e2:	f7e9 f939 	bl	8000458 <__aeabi_dcmplt>
 80171e6:	2800      	cmp	r0, #0
 80171e8:	d100      	bne.n	80171ec <_dtoa_r+0x698>
 80171ea:	e6ee      	b.n	8016fca <_dtoa_r+0x476>
 80171ec:	0023      	movs	r3, r4
 80171ee:	3c01      	subs	r4, #1
 80171f0:	7822      	ldrb	r2, [r4, #0]
 80171f2:	2a30      	cmp	r2, #48	@ 0x30
 80171f4:	d0fa      	beq.n	80171ec <_dtoa_r+0x698>
 80171f6:	001c      	movs	r4, r3
 80171f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80171fa:	9304      	str	r3, [sp, #16]
 80171fc:	e73e      	b.n	801707c <_dtoa_r+0x528>
 80171fe:	2200      	movs	r2, #0
 8017200:	4b1b      	ldr	r3, [pc, #108]	@ (8017270 <_dtoa_r+0x71c>)
 8017202:	f7eb f999 	bl	8002538 <__aeabi_dmul>
 8017206:	900a      	str	r0, [sp, #40]	@ 0x28
 8017208:	910b      	str	r1, [sp, #44]	@ 0x2c
 801720a:	e7b9      	b.n	8017180 <_dtoa_r+0x62c>
 801720c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801720e:	2b00      	cmp	r3, #0
 8017210:	d10c      	bne.n	801722c <_dtoa_r+0x6d8>
 8017212:	9806      	ldr	r0, [sp, #24]
 8017214:	9907      	ldr	r1, [sp, #28]
 8017216:	2200      	movs	r2, #0
 8017218:	4b18      	ldr	r3, [pc, #96]	@ (801727c <_dtoa_r+0x728>)
 801721a:	f7eb f98d 	bl	8002538 <__aeabi_dmul>
 801721e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017220:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017222:	f7e9 f937 	bl	8000494 <__aeabi_dcmpge>
 8017226:	2800      	cmp	r0, #0
 8017228:	d100      	bne.n	801722c <_dtoa_r+0x6d8>
 801722a:	e164      	b.n	80174f6 <_dtoa_r+0x9a2>
 801722c:	2600      	movs	r6, #0
 801722e:	0037      	movs	r7, r6
 8017230:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017232:	9c08      	ldr	r4, [sp, #32]
 8017234:	43db      	mvns	r3, r3
 8017236:	930c      	str	r3, [sp, #48]	@ 0x30
 8017238:	2300      	movs	r3, #0
 801723a:	9304      	str	r3, [sp, #16]
 801723c:	0031      	movs	r1, r6
 801723e:	9803      	ldr	r0, [sp, #12]
 8017240:	f000 fbc6 	bl	80179d0 <_Bfree>
 8017244:	2f00      	cmp	r7, #0
 8017246:	d0d7      	beq.n	80171f8 <_dtoa_r+0x6a4>
 8017248:	9b04      	ldr	r3, [sp, #16]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d005      	beq.n	801725a <_dtoa_r+0x706>
 801724e:	42bb      	cmp	r3, r7
 8017250:	d003      	beq.n	801725a <_dtoa_r+0x706>
 8017252:	0019      	movs	r1, r3
 8017254:	9803      	ldr	r0, [sp, #12]
 8017256:	f000 fbbb 	bl	80179d0 <_Bfree>
 801725a:	0039      	movs	r1, r7
 801725c:	9803      	ldr	r0, [sp, #12]
 801725e:	f000 fbb7 	bl	80179d0 <_Bfree>
 8017262:	e7c9      	b.n	80171f8 <_dtoa_r+0x6a4>
 8017264:	0801a4c0 	.word	0x0801a4c0
 8017268:	0801a498 	.word	0x0801a498
 801726c:	3ff00000 	.word	0x3ff00000
 8017270:	40240000 	.word	0x40240000
 8017274:	401c0000 	.word	0x401c0000
 8017278:	fcc00000 	.word	0xfcc00000
 801727c:	40140000 	.word	0x40140000
 8017280:	3fe00000 	.word	0x3fe00000
 8017284:	9b04      	ldr	r3, [sp, #16]
 8017286:	930c      	str	r3, [sp, #48]	@ 0x30
 8017288:	0023      	movs	r3, r4
 801728a:	001c      	movs	r4, r3
 801728c:	3b01      	subs	r3, #1
 801728e:	781a      	ldrb	r2, [r3, #0]
 8017290:	2a39      	cmp	r2, #57	@ 0x39
 8017292:	d108      	bne.n	80172a6 <_dtoa_r+0x752>
 8017294:	9a08      	ldr	r2, [sp, #32]
 8017296:	429a      	cmp	r2, r3
 8017298:	d1f7      	bne.n	801728a <_dtoa_r+0x736>
 801729a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801729c:	9908      	ldr	r1, [sp, #32]
 801729e:	3201      	adds	r2, #1
 80172a0:	920c      	str	r2, [sp, #48]	@ 0x30
 80172a2:	2230      	movs	r2, #48	@ 0x30
 80172a4:	700a      	strb	r2, [r1, #0]
 80172a6:	781a      	ldrb	r2, [r3, #0]
 80172a8:	3201      	adds	r2, #1
 80172aa:	701a      	strb	r2, [r3, #0]
 80172ac:	e7a4      	b.n	80171f8 <_dtoa_r+0x6a4>
 80172ae:	2200      	movs	r2, #0
 80172b0:	4bc6      	ldr	r3, [pc, #792]	@ (80175cc <_dtoa_r+0xa78>)
 80172b2:	f7eb f941 	bl	8002538 <__aeabi_dmul>
 80172b6:	2200      	movs	r2, #0
 80172b8:	2300      	movs	r3, #0
 80172ba:	0006      	movs	r6, r0
 80172bc:	000f      	movs	r7, r1
 80172be:	f7e9 f8c5 	bl	800044c <__aeabi_dcmpeq>
 80172c2:	2800      	cmp	r0, #0
 80172c4:	d100      	bne.n	80172c8 <_dtoa_r+0x774>
 80172c6:	e6a1      	b.n	801700c <_dtoa_r+0x4b8>
 80172c8:	e6d8      	b.n	801707c <_dtoa_r+0x528>
 80172ca:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80172cc:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80172ce:	9c06      	ldr	r4, [sp, #24]
 80172d0:	2f00      	cmp	r7, #0
 80172d2:	d014      	beq.n	80172fe <_dtoa_r+0x7aa>
 80172d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80172d6:	2a01      	cmp	r2, #1
 80172d8:	dd00      	ble.n	80172dc <_dtoa_r+0x788>
 80172da:	e0c8      	b.n	801746e <_dtoa_r+0x91a>
 80172dc:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80172de:	2a00      	cmp	r2, #0
 80172e0:	d100      	bne.n	80172e4 <_dtoa_r+0x790>
 80172e2:	e0be      	b.n	8017462 <_dtoa_r+0x90e>
 80172e4:	4aba      	ldr	r2, [pc, #744]	@ (80175d0 <_dtoa_r+0xa7c>)
 80172e6:	189b      	adds	r3, r3, r2
 80172e8:	9a06      	ldr	r2, [sp, #24]
 80172ea:	2101      	movs	r1, #1
 80172ec:	18d2      	adds	r2, r2, r3
 80172ee:	9206      	str	r2, [sp, #24]
 80172f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80172f2:	9803      	ldr	r0, [sp, #12]
 80172f4:	18d3      	adds	r3, r2, r3
 80172f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80172f8:	f000 fc22 	bl	8017b40 <__i2b>
 80172fc:	0007      	movs	r7, r0
 80172fe:	2c00      	cmp	r4, #0
 8017300:	d00e      	beq.n	8017320 <_dtoa_r+0x7cc>
 8017302:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017304:	2b00      	cmp	r3, #0
 8017306:	dd0b      	ble.n	8017320 <_dtoa_r+0x7cc>
 8017308:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801730a:	0023      	movs	r3, r4
 801730c:	4294      	cmp	r4, r2
 801730e:	dd00      	ble.n	8017312 <_dtoa_r+0x7be>
 8017310:	0013      	movs	r3, r2
 8017312:	9a06      	ldr	r2, [sp, #24]
 8017314:	1ae4      	subs	r4, r4, r3
 8017316:	1ad2      	subs	r2, r2, r3
 8017318:	9206      	str	r2, [sp, #24]
 801731a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801731c:	1ad3      	subs	r3, r2, r3
 801731e:	930d      	str	r3, [sp, #52]	@ 0x34
 8017320:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017322:	2b00      	cmp	r3, #0
 8017324:	d01f      	beq.n	8017366 <_dtoa_r+0x812>
 8017326:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017328:	2b00      	cmp	r3, #0
 801732a:	d100      	bne.n	801732e <_dtoa_r+0x7da>
 801732c:	e0b5      	b.n	801749a <_dtoa_r+0x946>
 801732e:	2d00      	cmp	r5, #0
 8017330:	d010      	beq.n	8017354 <_dtoa_r+0x800>
 8017332:	0039      	movs	r1, r7
 8017334:	002a      	movs	r2, r5
 8017336:	9803      	ldr	r0, [sp, #12]
 8017338:	f000 fccc 	bl	8017cd4 <__pow5mult>
 801733c:	9a05      	ldr	r2, [sp, #20]
 801733e:	0001      	movs	r1, r0
 8017340:	0007      	movs	r7, r0
 8017342:	9803      	ldr	r0, [sp, #12]
 8017344:	f000 fc14 	bl	8017b70 <__multiply>
 8017348:	0006      	movs	r6, r0
 801734a:	9905      	ldr	r1, [sp, #20]
 801734c:	9803      	ldr	r0, [sp, #12]
 801734e:	f000 fb3f 	bl	80179d0 <_Bfree>
 8017352:	9605      	str	r6, [sp, #20]
 8017354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017356:	1b5a      	subs	r2, r3, r5
 8017358:	42ab      	cmp	r3, r5
 801735a:	d004      	beq.n	8017366 <_dtoa_r+0x812>
 801735c:	9905      	ldr	r1, [sp, #20]
 801735e:	9803      	ldr	r0, [sp, #12]
 8017360:	f000 fcb8 	bl	8017cd4 <__pow5mult>
 8017364:	9005      	str	r0, [sp, #20]
 8017366:	2101      	movs	r1, #1
 8017368:	9803      	ldr	r0, [sp, #12]
 801736a:	f000 fbe9 	bl	8017b40 <__i2b>
 801736e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017370:	0006      	movs	r6, r0
 8017372:	2b00      	cmp	r3, #0
 8017374:	d100      	bne.n	8017378 <_dtoa_r+0x824>
 8017376:	e1bc      	b.n	80176f2 <_dtoa_r+0xb9e>
 8017378:	001a      	movs	r2, r3
 801737a:	0001      	movs	r1, r0
 801737c:	9803      	ldr	r0, [sp, #12]
 801737e:	f000 fca9 	bl	8017cd4 <__pow5mult>
 8017382:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8017384:	0006      	movs	r6, r0
 8017386:	2500      	movs	r5, #0
 8017388:	2b01      	cmp	r3, #1
 801738a:	dc16      	bgt.n	80173ba <_dtoa_r+0x866>
 801738c:	2500      	movs	r5, #0
 801738e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017390:	42ab      	cmp	r3, r5
 8017392:	d10e      	bne.n	80173b2 <_dtoa_r+0x85e>
 8017394:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017396:	031b      	lsls	r3, r3, #12
 8017398:	42ab      	cmp	r3, r5
 801739a:	d10a      	bne.n	80173b2 <_dtoa_r+0x85e>
 801739c:	4b8d      	ldr	r3, [pc, #564]	@ (80175d4 <_dtoa_r+0xa80>)
 801739e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80173a0:	4213      	tst	r3, r2
 80173a2:	d006      	beq.n	80173b2 <_dtoa_r+0x85e>
 80173a4:	9b06      	ldr	r3, [sp, #24]
 80173a6:	3501      	adds	r5, #1
 80173a8:	3301      	adds	r3, #1
 80173aa:	9306      	str	r3, [sp, #24]
 80173ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80173ae:	3301      	adds	r3, #1
 80173b0:	930d      	str	r3, [sp, #52]	@ 0x34
 80173b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80173b4:	2001      	movs	r0, #1
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d008      	beq.n	80173cc <_dtoa_r+0x878>
 80173ba:	6933      	ldr	r3, [r6, #16]
 80173bc:	3303      	adds	r3, #3
 80173be:	009b      	lsls	r3, r3, #2
 80173c0:	18f3      	adds	r3, r6, r3
 80173c2:	6858      	ldr	r0, [r3, #4]
 80173c4:	f000 fb6c 	bl	8017aa0 <__hi0bits>
 80173c8:	2320      	movs	r3, #32
 80173ca:	1a18      	subs	r0, r3, r0
 80173cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80173ce:	1818      	adds	r0, r3, r0
 80173d0:	0002      	movs	r2, r0
 80173d2:	231f      	movs	r3, #31
 80173d4:	401a      	ands	r2, r3
 80173d6:	4218      	tst	r0, r3
 80173d8:	d065      	beq.n	80174a6 <_dtoa_r+0x952>
 80173da:	3301      	adds	r3, #1
 80173dc:	1a9b      	subs	r3, r3, r2
 80173de:	2b04      	cmp	r3, #4
 80173e0:	dd5d      	ble.n	801749e <_dtoa_r+0x94a>
 80173e2:	231c      	movs	r3, #28
 80173e4:	1a9b      	subs	r3, r3, r2
 80173e6:	9a06      	ldr	r2, [sp, #24]
 80173e8:	18e4      	adds	r4, r4, r3
 80173ea:	18d2      	adds	r2, r2, r3
 80173ec:	9206      	str	r2, [sp, #24]
 80173ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80173f0:	18d3      	adds	r3, r2, r3
 80173f2:	930d      	str	r3, [sp, #52]	@ 0x34
 80173f4:	9b06      	ldr	r3, [sp, #24]
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	dd05      	ble.n	8017406 <_dtoa_r+0x8b2>
 80173fa:	001a      	movs	r2, r3
 80173fc:	9905      	ldr	r1, [sp, #20]
 80173fe:	9803      	ldr	r0, [sp, #12]
 8017400:	f000 fcc4 	bl	8017d8c <__lshift>
 8017404:	9005      	str	r0, [sp, #20]
 8017406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017408:	2b00      	cmp	r3, #0
 801740a:	dd05      	ble.n	8017418 <_dtoa_r+0x8c4>
 801740c:	0031      	movs	r1, r6
 801740e:	001a      	movs	r2, r3
 8017410:	9803      	ldr	r0, [sp, #12]
 8017412:	f000 fcbb 	bl	8017d8c <__lshift>
 8017416:	0006      	movs	r6, r0
 8017418:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801741a:	2b00      	cmp	r3, #0
 801741c:	d045      	beq.n	80174aa <_dtoa_r+0x956>
 801741e:	0031      	movs	r1, r6
 8017420:	9805      	ldr	r0, [sp, #20]
 8017422:	f000 fd1f 	bl	8017e64 <__mcmp>
 8017426:	2800      	cmp	r0, #0
 8017428:	da3f      	bge.n	80174aa <_dtoa_r+0x956>
 801742a:	9b04      	ldr	r3, [sp, #16]
 801742c:	220a      	movs	r2, #10
 801742e:	3b01      	subs	r3, #1
 8017430:	930c      	str	r3, [sp, #48]	@ 0x30
 8017432:	9905      	ldr	r1, [sp, #20]
 8017434:	2300      	movs	r3, #0
 8017436:	9803      	ldr	r0, [sp, #12]
 8017438:	f000 faee 	bl	8017a18 <__multadd>
 801743c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801743e:	9005      	str	r0, [sp, #20]
 8017440:	2b00      	cmp	r3, #0
 8017442:	d100      	bne.n	8017446 <_dtoa_r+0x8f2>
 8017444:	e15c      	b.n	8017700 <_dtoa_r+0xbac>
 8017446:	2300      	movs	r3, #0
 8017448:	0039      	movs	r1, r7
 801744a:	220a      	movs	r2, #10
 801744c:	9803      	ldr	r0, [sp, #12]
 801744e:	f000 fae3 	bl	8017a18 <__multadd>
 8017452:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017454:	0007      	movs	r7, r0
 8017456:	2b00      	cmp	r3, #0
 8017458:	dc55      	bgt.n	8017506 <_dtoa_r+0x9b2>
 801745a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801745c:	2b02      	cmp	r3, #2
 801745e:	dc2d      	bgt.n	80174bc <_dtoa_r+0x968>
 8017460:	e051      	b.n	8017506 <_dtoa_r+0x9b2>
 8017462:	2336      	movs	r3, #54	@ 0x36
 8017464:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8017466:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8017468:	9c06      	ldr	r4, [sp, #24]
 801746a:	1a9b      	subs	r3, r3, r2
 801746c:	e73c      	b.n	80172e8 <_dtoa_r+0x794>
 801746e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017470:	1e5d      	subs	r5, r3, #1
 8017472:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017474:	42ab      	cmp	r3, r5
 8017476:	db08      	blt.n	801748a <_dtoa_r+0x936>
 8017478:	1b5d      	subs	r5, r3, r5
 801747a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801747c:	9c06      	ldr	r4, [sp, #24]
 801747e:	2b00      	cmp	r3, #0
 8017480:	db00      	blt.n	8017484 <_dtoa_r+0x930>
 8017482:	e731      	b.n	80172e8 <_dtoa_r+0x794>
 8017484:	1ae4      	subs	r4, r4, r3
 8017486:	2300      	movs	r3, #0
 8017488:	e72e      	b.n	80172e8 <_dtoa_r+0x794>
 801748a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801748c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801748e:	1aeb      	subs	r3, r5, r3
 8017490:	18d3      	adds	r3, r2, r3
 8017492:	950f      	str	r5, [sp, #60]	@ 0x3c
 8017494:	9314      	str	r3, [sp, #80]	@ 0x50
 8017496:	2500      	movs	r5, #0
 8017498:	e7ef      	b.n	801747a <_dtoa_r+0x926>
 801749a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801749c:	e75e      	b.n	801735c <_dtoa_r+0x808>
 801749e:	2b04      	cmp	r3, #4
 80174a0:	d0a8      	beq.n	80173f4 <_dtoa_r+0x8a0>
 80174a2:	331c      	adds	r3, #28
 80174a4:	e79f      	b.n	80173e6 <_dtoa_r+0x892>
 80174a6:	0013      	movs	r3, r2
 80174a8:	e7fb      	b.n	80174a2 <_dtoa_r+0x94e>
 80174aa:	9b04      	ldr	r3, [sp, #16]
 80174ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80174ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80174b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	dc23      	bgt.n	80174fe <_dtoa_r+0x9aa>
 80174b6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80174b8:	2b02      	cmp	r3, #2
 80174ba:	dd20      	ble.n	80174fe <_dtoa_r+0x9aa>
 80174bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d000      	beq.n	80174c4 <_dtoa_r+0x970>
 80174c2:	e6b5      	b.n	8017230 <_dtoa_r+0x6dc>
 80174c4:	0031      	movs	r1, r6
 80174c6:	2205      	movs	r2, #5
 80174c8:	9803      	ldr	r0, [sp, #12]
 80174ca:	f000 faa5 	bl	8017a18 <__multadd>
 80174ce:	0006      	movs	r6, r0
 80174d0:	0001      	movs	r1, r0
 80174d2:	9805      	ldr	r0, [sp, #20]
 80174d4:	f000 fcc6 	bl	8017e64 <__mcmp>
 80174d8:	2800      	cmp	r0, #0
 80174da:	dc00      	bgt.n	80174de <_dtoa_r+0x98a>
 80174dc:	e6a8      	b.n	8017230 <_dtoa_r+0x6dc>
 80174de:	9b08      	ldr	r3, [sp, #32]
 80174e0:	9a08      	ldr	r2, [sp, #32]
 80174e2:	1c5c      	adds	r4, r3, #1
 80174e4:	2331      	movs	r3, #49	@ 0x31
 80174e6:	7013      	strb	r3, [r2, #0]
 80174e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80174ea:	3301      	adds	r3, #1
 80174ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80174ee:	e6a3      	b.n	8017238 <_dtoa_r+0x6e4>
 80174f0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80174f2:	0037      	movs	r7, r6
 80174f4:	e7f3      	b.n	80174de <_dtoa_r+0x98a>
 80174f6:	9b04      	ldr	r3, [sp, #16]
 80174f8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80174fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80174fc:	e7f9      	b.n	80174f2 <_dtoa_r+0x99e>
 80174fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017500:	2b00      	cmp	r3, #0
 8017502:	d100      	bne.n	8017506 <_dtoa_r+0x9b2>
 8017504:	e100      	b.n	8017708 <_dtoa_r+0xbb4>
 8017506:	2c00      	cmp	r4, #0
 8017508:	dd05      	ble.n	8017516 <_dtoa_r+0x9c2>
 801750a:	0039      	movs	r1, r7
 801750c:	0022      	movs	r2, r4
 801750e:	9803      	ldr	r0, [sp, #12]
 8017510:	f000 fc3c 	bl	8017d8c <__lshift>
 8017514:	0007      	movs	r7, r0
 8017516:	0038      	movs	r0, r7
 8017518:	2d00      	cmp	r5, #0
 801751a:	d018      	beq.n	801754e <_dtoa_r+0x9fa>
 801751c:	6879      	ldr	r1, [r7, #4]
 801751e:	9803      	ldr	r0, [sp, #12]
 8017520:	f000 fa12 	bl	8017948 <_Balloc>
 8017524:	1e04      	subs	r4, r0, #0
 8017526:	d105      	bne.n	8017534 <_dtoa_r+0x9e0>
 8017528:	0022      	movs	r2, r4
 801752a:	4b2b      	ldr	r3, [pc, #172]	@ (80175d8 <_dtoa_r+0xa84>)
 801752c:	482b      	ldr	r0, [pc, #172]	@ (80175dc <_dtoa_r+0xa88>)
 801752e:	492c      	ldr	r1, [pc, #176]	@ (80175e0 <_dtoa_r+0xa8c>)
 8017530:	f7ff fb25 	bl	8016b7e <_dtoa_r+0x2a>
 8017534:	0039      	movs	r1, r7
 8017536:	693a      	ldr	r2, [r7, #16]
 8017538:	310c      	adds	r1, #12
 801753a:	3202      	adds	r2, #2
 801753c:	0092      	lsls	r2, r2, #2
 801753e:	300c      	adds	r0, #12
 8017540:	f7ff fa70 	bl	8016a24 <memcpy>
 8017544:	2201      	movs	r2, #1
 8017546:	0021      	movs	r1, r4
 8017548:	9803      	ldr	r0, [sp, #12]
 801754a:	f000 fc1f 	bl	8017d8c <__lshift>
 801754e:	9b08      	ldr	r3, [sp, #32]
 8017550:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017552:	9306      	str	r3, [sp, #24]
 8017554:	3b01      	subs	r3, #1
 8017556:	189b      	adds	r3, r3, r2
 8017558:	2201      	movs	r2, #1
 801755a:	9704      	str	r7, [sp, #16]
 801755c:	0007      	movs	r7, r0
 801755e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017560:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017562:	4013      	ands	r3, r2
 8017564:	930e      	str	r3, [sp, #56]	@ 0x38
 8017566:	0031      	movs	r1, r6
 8017568:	9805      	ldr	r0, [sp, #20]
 801756a:	f7ff fa64 	bl	8016a36 <quorem>
 801756e:	9904      	ldr	r1, [sp, #16]
 8017570:	0005      	movs	r5, r0
 8017572:	900a      	str	r0, [sp, #40]	@ 0x28
 8017574:	9805      	ldr	r0, [sp, #20]
 8017576:	f000 fc75 	bl	8017e64 <__mcmp>
 801757a:	003a      	movs	r2, r7
 801757c:	900d      	str	r0, [sp, #52]	@ 0x34
 801757e:	0031      	movs	r1, r6
 8017580:	9803      	ldr	r0, [sp, #12]
 8017582:	f000 fc8b 	bl	8017e9c <__mdiff>
 8017586:	2201      	movs	r2, #1
 8017588:	68c3      	ldr	r3, [r0, #12]
 801758a:	0004      	movs	r4, r0
 801758c:	3530      	adds	r5, #48	@ 0x30
 801758e:	9209      	str	r2, [sp, #36]	@ 0x24
 8017590:	2b00      	cmp	r3, #0
 8017592:	d104      	bne.n	801759e <_dtoa_r+0xa4a>
 8017594:	0001      	movs	r1, r0
 8017596:	9805      	ldr	r0, [sp, #20]
 8017598:	f000 fc64 	bl	8017e64 <__mcmp>
 801759c:	9009      	str	r0, [sp, #36]	@ 0x24
 801759e:	0021      	movs	r1, r4
 80175a0:	9803      	ldr	r0, [sp, #12]
 80175a2:	f000 fa15 	bl	80179d0 <_Bfree>
 80175a6:	9b06      	ldr	r3, [sp, #24]
 80175a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80175aa:	1c5c      	adds	r4, r3, #1
 80175ac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80175ae:	4313      	orrs	r3, r2
 80175b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80175b2:	4313      	orrs	r3, r2
 80175b4:	d116      	bne.n	80175e4 <_dtoa_r+0xa90>
 80175b6:	2d39      	cmp	r5, #57	@ 0x39
 80175b8:	d02f      	beq.n	801761a <_dtoa_r+0xac6>
 80175ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80175bc:	2b00      	cmp	r3, #0
 80175be:	dd01      	ble.n	80175c4 <_dtoa_r+0xa70>
 80175c0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80175c2:	3531      	adds	r5, #49	@ 0x31
 80175c4:	9b06      	ldr	r3, [sp, #24]
 80175c6:	701d      	strb	r5, [r3, #0]
 80175c8:	e638      	b.n	801723c <_dtoa_r+0x6e8>
 80175ca:	46c0      	nop			@ (mov r8, r8)
 80175cc:	40240000 	.word	0x40240000
 80175d0:	00000433 	.word	0x00000433
 80175d4:	7ff00000 	.word	0x7ff00000
 80175d8:	0801a41c 	.word	0x0801a41c
 80175dc:	0801a3c4 	.word	0x0801a3c4
 80175e0:	000002ef 	.word	0x000002ef
 80175e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	db04      	blt.n	80175f4 <_dtoa_r+0xaa0>
 80175ea:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80175ec:	4313      	orrs	r3, r2
 80175ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80175f0:	4313      	orrs	r3, r2
 80175f2:	d11e      	bne.n	8017632 <_dtoa_r+0xade>
 80175f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	dde4      	ble.n	80175c4 <_dtoa_r+0xa70>
 80175fa:	9905      	ldr	r1, [sp, #20]
 80175fc:	2201      	movs	r2, #1
 80175fe:	9803      	ldr	r0, [sp, #12]
 8017600:	f000 fbc4 	bl	8017d8c <__lshift>
 8017604:	0031      	movs	r1, r6
 8017606:	9005      	str	r0, [sp, #20]
 8017608:	f000 fc2c 	bl	8017e64 <__mcmp>
 801760c:	2800      	cmp	r0, #0
 801760e:	dc02      	bgt.n	8017616 <_dtoa_r+0xac2>
 8017610:	d1d8      	bne.n	80175c4 <_dtoa_r+0xa70>
 8017612:	07eb      	lsls	r3, r5, #31
 8017614:	d5d6      	bpl.n	80175c4 <_dtoa_r+0xa70>
 8017616:	2d39      	cmp	r5, #57	@ 0x39
 8017618:	d1d2      	bne.n	80175c0 <_dtoa_r+0xa6c>
 801761a:	2339      	movs	r3, #57	@ 0x39
 801761c:	9a06      	ldr	r2, [sp, #24]
 801761e:	7013      	strb	r3, [r2, #0]
 8017620:	0023      	movs	r3, r4
 8017622:	001c      	movs	r4, r3
 8017624:	3b01      	subs	r3, #1
 8017626:	781a      	ldrb	r2, [r3, #0]
 8017628:	2a39      	cmp	r2, #57	@ 0x39
 801762a:	d04f      	beq.n	80176cc <_dtoa_r+0xb78>
 801762c:	3201      	adds	r2, #1
 801762e:	701a      	strb	r2, [r3, #0]
 8017630:	e604      	b.n	801723c <_dtoa_r+0x6e8>
 8017632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017634:	2b00      	cmp	r3, #0
 8017636:	dd03      	ble.n	8017640 <_dtoa_r+0xaec>
 8017638:	2d39      	cmp	r5, #57	@ 0x39
 801763a:	d0ee      	beq.n	801761a <_dtoa_r+0xac6>
 801763c:	3501      	adds	r5, #1
 801763e:	e7c1      	b.n	80175c4 <_dtoa_r+0xa70>
 8017640:	9b06      	ldr	r3, [sp, #24]
 8017642:	9a06      	ldr	r2, [sp, #24]
 8017644:	701d      	strb	r5, [r3, #0]
 8017646:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017648:	4293      	cmp	r3, r2
 801764a:	d02a      	beq.n	80176a2 <_dtoa_r+0xb4e>
 801764c:	2300      	movs	r3, #0
 801764e:	220a      	movs	r2, #10
 8017650:	9905      	ldr	r1, [sp, #20]
 8017652:	9803      	ldr	r0, [sp, #12]
 8017654:	f000 f9e0 	bl	8017a18 <__multadd>
 8017658:	9b04      	ldr	r3, [sp, #16]
 801765a:	9005      	str	r0, [sp, #20]
 801765c:	42bb      	cmp	r3, r7
 801765e:	d109      	bne.n	8017674 <_dtoa_r+0xb20>
 8017660:	2300      	movs	r3, #0
 8017662:	220a      	movs	r2, #10
 8017664:	9904      	ldr	r1, [sp, #16]
 8017666:	9803      	ldr	r0, [sp, #12]
 8017668:	f000 f9d6 	bl	8017a18 <__multadd>
 801766c:	9004      	str	r0, [sp, #16]
 801766e:	0007      	movs	r7, r0
 8017670:	9406      	str	r4, [sp, #24]
 8017672:	e778      	b.n	8017566 <_dtoa_r+0xa12>
 8017674:	9904      	ldr	r1, [sp, #16]
 8017676:	2300      	movs	r3, #0
 8017678:	220a      	movs	r2, #10
 801767a:	9803      	ldr	r0, [sp, #12]
 801767c:	f000 f9cc 	bl	8017a18 <__multadd>
 8017680:	2300      	movs	r3, #0
 8017682:	9004      	str	r0, [sp, #16]
 8017684:	220a      	movs	r2, #10
 8017686:	0039      	movs	r1, r7
 8017688:	9803      	ldr	r0, [sp, #12]
 801768a:	f000 f9c5 	bl	8017a18 <__multadd>
 801768e:	e7ee      	b.n	801766e <_dtoa_r+0xb1a>
 8017690:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017692:	2401      	movs	r4, #1
 8017694:	2b00      	cmp	r3, #0
 8017696:	dd00      	ble.n	801769a <_dtoa_r+0xb46>
 8017698:	001c      	movs	r4, r3
 801769a:	9b08      	ldr	r3, [sp, #32]
 801769c:	191c      	adds	r4, r3, r4
 801769e:	2300      	movs	r3, #0
 80176a0:	9304      	str	r3, [sp, #16]
 80176a2:	9905      	ldr	r1, [sp, #20]
 80176a4:	2201      	movs	r2, #1
 80176a6:	9803      	ldr	r0, [sp, #12]
 80176a8:	f000 fb70 	bl	8017d8c <__lshift>
 80176ac:	0031      	movs	r1, r6
 80176ae:	9005      	str	r0, [sp, #20]
 80176b0:	f000 fbd8 	bl	8017e64 <__mcmp>
 80176b4:	2800      	cmp	r0, #0
 80176b6:	dcb3      	bgt.n	8017620 <_dtoa_r+0xacc>
 80176b8:	d101      	bne.n	80176be <_dtoa_r+0xb6a>
 80176ba:	07ed      	lsls	r5, r5, #31
 80176bc:	d4b0      	bmi.n	8017620 <_dtoa_r+0xacc>
 80176be:	0023      	movs	r3, r4
 80176c0:	001c      	movs	r4, r3
 80176c2:	3b01      	subs	r3, #1
 80176c4:	781a      	ldrb	r2, [r3, #0]
 80176c6:	2a30      	cmp	r2, #48	@ 0x30
 80176c8:	d0fa      	beq.n	80176c0 <_dtoa_r+0xb6c>
 80176ca:	e5b7      	b.n	801723c <_dtoa_r+0x6e8>
 80176cc:	9a08      	ldr	r2, [sp, #32]
 80176ce:	429a      	cmp	r2, r3
 80176d0:	d1a7      	bne.n	8017622 <_dtoa_r+0xace>
 80176d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80176d4:	3301      	adds	r3, #1
 80176d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80176d8:	2331      	movs	r3, #49	@ 0x31
 80176da:	7013      	strb	r3, [r2, #0]
 80176dc:	e5ae      	b.n	801723c <_dtoa_r+0x6e8>
 80176de:	4b15      	ldr	r3, [pc, #84]	@ (8017734 <_dtoa_r+0xbe0>)
 80176e0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80176e2:	9308      	str	r3, [sp, #32]
 80176e4:	4b14      	ldr	r3, [pc, #80]	@ (8017738 <_dtoa_r+0xbe4>)
 80176e6:	2a00      	cmp	r2, #0
 80176e8:	d001      	beq.n	80176ee <_dtoa_r+0xb9a>
 80176ea:	f7ff fa7b 	bl	8016be4 <_dtoa_r+0x90>
 80176ee:	f7ff fa7b 	bl	8016be8 <_dtoa_r+0x94>
 80176f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80176f4:	2b01      	cmp	r3, #1
 80176f6:	dc00      	bgt.n	80176fa <_dtoa_r+0xba6>
 80176f8:	e648      	b.n	801738c <_dtoa_r+0x838>
 80176fa:	2001      	movs	r0, #1
 80176fc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80176fe:	e665      	b.n	80173cc <_dtoa_r+0x878>
 8017700:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017702:	2b00      	cmp	r3, #0
 8017704:	dc00      	bgt.n	8017708 <_dtoa_r+0xbb4>
 8017706:	e6d6      	b.n	80174b6 <_dtoa_r+0x962>
 8017708:	2400      	movs	r4, #0
 801770a:	0031      	movs	r1, r6
 801770c:	9805      	ldr	r0, [sp, #20]
 801770e:	f7ff f992 	bl	8016a36 <quorem>
 8017712:	9b08      	ldr	r3, [sp, #32]
 8017714:	3030      	adds	r0, #48	@ 0x30
 8017716:	5518      	strb	r0, [r3, r4]
 8017718:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801771a:	3401      	adds	r4, #1
 801771c:	0005      	movs	r5, r0
 801771e:	429c      	cmp	r4, r3
 8017720:	dab6      	bge.n	8017690 <_dtoa_r+0xb3c>
 8017722:	2300      	movs	r3, #0
 8017724:	220a      	movs	r2, #10
 8017726:	9905      	ldr	r1, [sp, #20]
 8017728:	9803      	ldr	r0, [sp, #12]
 801772a:	f000 f975 	bl	8017a18 <__multadd>
 801772e:	9005      	str	r0, [sp, #20]
 8017730:	e7eb      	b.n	801770a <_dtoa_r+0xbb6>
 8017732:	46c0      	nop			@ (mov r8, r8)
 8017734:	0801a3a0 	.word	0x0801a3a0
 8017738:	0801a3a8 	.word	0x0801a3a8

0801773c <_free_r>:
 801773c:	b570      	push	{r4, r5, r6, lr}
 801773e:	0005      	movs	r5, r0
 8017740:	1e0c      	subs	r4, r1, #0
 8017742:	d010      	beq.n	8017766 <_free_r+0x2a>
 8017744:	3c04      	subs	r4, #4
 8017746:	6823      	ldr	r3, [r4, #0]
 8017748:	2b00      	cmp	r3, #0
 801774a:	da00      	bge.n	801774e <_free_r+0x12>
 801774c:	18e4      	adds	r4, r4, r3
 801774e:	0028      	movs	r0, r5
 8017750:	f000 f8ea 	bl	8017928 <__malloc_lock>
 8017754:	4a1d      	ldr	r2, [pc, #116]	@ (80177cc <_free_r+0x90>)
 8017756:	6813      	ldr	r3, [r2, #0]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d105      	bne.n	8017768 <_free_r+0x2c>
 801775c:	6063      	str	r3, [r4, #4]
 801775e:	6014      	str	r4, [r2, #0]
 8017760:	0028      	movs	r0, r5
 8017762:	f000 f8e9 	bl	8017938 <__malloc_unlock>
 8017766:	bd70      	pop	{r4, r5, r6, pc}
 8017768:	42a3      	cmp	r3, r4
 801776a:	d908      	bls.n	801777e <_free_r+0x42>
 801776c:	6820      	ldr	r0, [r4, #0]
 801776e:	1821      	adds	r1, r4, r0
 8017770:	428b      	cmp	r3, r1
 8017772:	d1f3      	bne.n	801775c <_free_r+0x20>
 8017774:	6819      	ldr	r1, [r3, #0]
 8017776:	685b      	ldr	r3, [r3, #4]
 8017778:	1809      	adds	r1, r1, r0
 801777a:	6021      	str	r1, [r4, #0]
 801777c:	e7ee      	b.n	801775c <_free_r+0x20>
 801777e:	001a      	movs	r2, r3
 8017780:	685b      	ldr	r3, [r3, #4]
 8017782:	2b00      	cmp	r3, #0
 8017784:	d001      	beq.n	801778a <_free_r+0x4e>
 8017786:	42a3      	cmp	r3, r4
 8017788:	d9f9      	bls.n	801777e <_free_r+0x42>
 801778a:	6811      	ldr	r1, [r2, #0]
 801778c:	1850      	adds	r0, r2, r1
 801778e:	42a0      	cmp	r0, r4
 8017790:	d10b      	bne.n	80177aa <_free_r+0x6e>
 8017792:	6820      	ldr	r0, [r4, #0]
 8017794:	1809      	adds	r1, r1, r0
 8017796:	1850      	adds	r0, r2, r1
 8017798:	6011      	str	r1, [r2, #0]
 801779a:	4283      	cmp	r3, r0
 801779c:	d1e0      	bne.n	8017760 <_free_r+0x24>
 801779e:	6818      	ldr	r0, [r3, #0]
 80177a0:	685b      	ldr	r3, [r3, #4]
 80177a2:	1841      	adds	r1, r0, r1
 80177a4:	6011      	str	r1, [r2, #0]
 80177a6:	6053      	str	r3, [r2, #4]
 80177a8:	e7da      	b.n	8017760 <_free_r+0x24>
 80177aa:	42a0      	cmp	r0, r4
 80177ac:	d902      	bls.n	80177b4 <_free_r+0x78>
 80177ae:	230c      	movs	r3, #12
 80177b0:	602b      	str	r3, [r5, #0]
 80177b2:	e7d5      	b.n	8017760 <_free_r+0x24>
 80177b4:	6820      	ldr	r0, [r4, #0]
 80177b6:	1821      	adds	r1, r4, r0
 80177b8:	428b      	cmp	r3, r1
 80177ba:	d103      	bne.n	80177c4 <_free_r+0x88>
 80177bc:	6819      	ldr	r1, [r3, #0]
 80177be:	685b      	ldr	r3, [r3, #4]
 80177c0:	1809      	adds	r1, r1, r0
 80177c2:	6021      	str	r1, [r4, #0]
 80177c4:	6063      	str	r3, [r4, #4]
 80177c6:	6054      	str	r4, [r2, #4]
 80177c8:	e7ca      	b.n	8017760 <_free_r+0x24>
 80177ca:	46c0      	nop			@ (mov r8, r8)
 80177cc:	200043ac 	.word	0x200043ac

080177d0 <malloc>:
 80177d0:	b510      	push	{r4, lr}
 80177d2:	4b03      	ldr	r3, [pc, #12]	@ (80177e0 <malloc+0x10>)
 80177d4:	0001      	movs	r1, r0
 80177d6:	6818      	ldr	r0, [r3, #0]
 80177d8:	f000 f826 	bl	8017828 <_malloc_r>
 80177dc:	bd10      	pop	{r4, pc}
 80177de:	46c0      	nop			@ (mov r8, r8)
 80177e0:	200002d4 	.word	0x200002d4

080177e4 <sbrk_aligned>:
 80177e4:	b570      	push	{r4, r5, r6, lr}
 80177e6:	4e0f      	ldr	r6, [pc, #60]	@ (8017824 <sbrk_aligned+0x40>)
 80177e8:	000d      	movs	r5, r1
 80177ea:	6831      	ldr	r1, [r6, #0]
 80177ec:	0004      	movs	r4, r0
 80177ee:	2900      	cmp	r1, #0
 80177f0:	d102      	bne.n	80177f8 <sbrk_aligned+0x14>
 80177f2:	f001 f855 	bl	80188a0 <_sbrk_r>
 80177f6:	6030      	str	r0, [r6, #0]
 80177f8:	0029      	movs	r1, r5
 80177fa:	0020      	movs	r0, r4
 80177fc:	f001 f850 	bl	80188a0 <_sbrk_r>
 8017800:	1c43      	adds	r3, r0, #1
 8017802:	d103      	bne.n	801780c <sbrk_aligned+0x28>
 8017804:	2501      	movs	r5, #1
 8017806:	426d      	negs	r5, r5
 8017808:	0028      	movs	r0, r5
 801780a:	bd70      	pop	{r4, r5, r6, pc}
 801780c:	2303      	movs	r3, #3
 801780e:	1cc5      	adds	r5, r0, #3
 8017810:	439d      	bics	r5, r3
 8017812:	42a8      	cmp	r0, r5
 8017814:	d0f8      	beq.n	8017808 <sbrk_aligned+0x24>
 8017816:	1a29      	subs	r1, r5, r0
 8017818:	0020      	movs	r0, r4
 801781a:	f001 f841 	bl	80188a0 <_sbrk_r>
 801781e:	3001      	adds	r0, #1
 8017820:	d1f2      	bne.n	8017808 <sbrk_aligned+0x24>
 8017822:	e7ef      	b.n	8017804 <sbrk_aligned+0x20>
 8017824:	200043a8 	.word	0x200043a8

08017828 <_malloc_r>:
 8017828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801782a:	2203      	movs	r2, #3
 801782c:	1ccb      	adds	r3, r1, #3
 801782e:	4393      	bics	r3, r2
 8017830:	3308      	adds	r3, #8
 8017832:	0005      	movs	r5, r0
 8017834:	001f      	movs	r7, r3
 8017836:	2b0c      	cmp	r3, #12
 8017838:	d234      	bcs.n	80178a4 <_malloc_r+0x7c>
 801783a:	270c      	movs	r7, #12
 801783c:	42b9      	cmp	r1, r7
 801783e:	d833      	bhi.n	80178a8 <_malloc_r+0x80>
 8017840:	0028      	movs	r0, r5
 8017842:	f000 f871 	bl	8017928 <__malloc_lock>
 8017846:	4e37      	ldr	r6, [pc, #220]	@ (8017924 <_malloc_r+0xfc>)
 8017848:	6833      	ldr	r3, [r6, #0]
 801784a:	001c      	movs	r4, r3
 801784c:	2c00      	cmp	r4, #0
 801784e:	d12f      	bne.n	80178b0 <_malloc_r+0x88>
 8017850:	0039      	movs	r1, r7
 8017852:	0028      	movs	r0, r5
 8017854:	f7ff ffc6 	bl	80177e4 <sbrk_aligned>
 8017858:	0004      	movs	r4, r0
 801785a:	1c43      	adds	r3, r0, #1
 801785c:	d15f      	bne.n	801791e <_malloc_r+0xf6>
 801785e:	6834      	ldr	r4, [r6, #0]
 8017860:	9400      	str	r4, [sp, #0]
 8017862:	9b00      	ldr	r3, [sp, #0]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d14a      	bne.n	80178fe <_malloc_r+0xd6>
 8017868:	2c00      	cmp	r4, #0
 801786a:	d052      	beq.n	8017912 <_malloc_r+0xea>
 801786c:	6823      	ldr	r3, [r4, #0]
 801786e:	0028      	movs	r0, r5
 8017870:	18e3      	adds	r3, r4, r3
 8017872:	9900      	ldr	r1, [sp, #0]
 8017874:	9301      	str	r3, [sp, #4]
 8017876:	f001 f813 	bl	80188a0 <_sbrk_r>
 801787a:	9b01      	ldr	r3, [sp, #4]
 801787c:	4283      	cmp	r3, r0
 801787e:	d148      	bne.n	8017912 <_malloc_r+0xea>
 8017880:	6823      	ldr	r3, [r4, #0]
 8017882:	0028      	movs	r0, r5
 8017884:	1aff      	subs	r7, r7, r3
 8017886:	0039      	movs	r1, r7
 8017888:	f7ff ffac 	bl	80177e4 <sbrk_aligned>
 801788c:	3001      	adds	r0, #1
 801788e:	d040      	beq.n	8017912 <_malloc_r+0xea>
 8017890:	6823      	ldr	r3, [r4, #0]
 8017892:	19db      	adds	r3, r3, r7
 8017894:	6023      	str	r3, [r4, #0]
 8017896:	6833      	ldr	r3, [r6, #0]
 8017898:	685a      	ldr	r2, [r3, #4]
 801789a:	2a00      	cmp	r2, #0
 801789c:	d133      	bne.n	8017906 <_malloc_r+0xde>
 801789e:	9b00      	ldr	r3, [sp, #0]
 80178a0:	6033      	str	r3, [r6, #0]
 80178a2:	e019      	b.n	80178d8 <_malloc_r+0xb0>
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	dac9      	bge.n	801783c <_malloc_r+0x14>
 80178a8:	230c      	movs	r3, #12
 80178aa:	602b      	str	r3, [r5, #0]
 80178ac:	2000      	movs	r0, #0
 80178ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80178b0:	6821      	ldr	r1, [r4, #0]
 80178b2:	1bc9      	subs	r1, r1, r7
 80178b4:	d420      	bmi.n	80178f8 <_malloc_r+0xd0>
 80178b6:	290b      	cmp	r1, #11
 80178b8:	d90a      	bls.n	80178d0 <_malloc_r+0xa8>
 80178ba:	19e2      	adds	r2, r4, r7
 80178bc:	6027      	str	r7, [r4, #0]
 80178be:	42a3      	cmp	r3, r4
 80178c0:	d104      	bne.n	80178cc <_malloc_r+0xa4>
 80178c2:	6032      	str	r2, [r6, #0]
 80178c4:	6863      	ldr	r3, [r4, #4]
 80178c6:	6011      	str	r1, [r2, #0]
 80178c8:	6053      	str	r3, [r2, #4]
 80178ca:	e005      	b.n	80178d8 <_malloc_r+0xb0>
 80178cc:	605a      	str	r2, [r3, #4]
 80178ce:	e7f9      	b.n	80178c4 <_malloc_r+0x9c>
 80178d0:	6862      	ldr	r2, [r4, #4]
 80178d2:	42a3      	cmp	r3, r4
 80178d4:	d10e      	bne.n	80178f4 <_malloc_r+0xcc>
 80178d6:	6032      	str	r2, [r6, #0]
 80178d8:	0028      	movs	r0, r5
 80178da:	f000 f82d 	bl	8017938 <__malloc_unlock>
 80178de:	0020      	movs	r0, r4
 80178e0:	2207      	movs	r2, #7
 80178e2:	300b      	adds	r0, #11
 80178e4:	1d23      	adds	r3, r4, #4
 80178e6:	4390      	bics	r0, r2
 80178e8:	1ac2      	subs	r2, r0, r3
 80178ea:	4298      	cmp	r0, r3
 80178ec:	d0df      	beq.n	80178ae <_malloc_r+0x86>
 80178ee:	1a1b      	subs	r3, r3, r0
 80178f0:	50a3      	str	r3, [r4, r2]
 80178f2:	e7dc      	b.n	80178ae <_malloc_r+0x86>
 80178f4:	605a      	str	r2, [r3, #4]
 80178f6:	e7ef      	b.n	80178d8 <_malloc_r+0xb0>
 80178f8:	0023      	movs	r3, r4
 80178fa:	6864      	ldr	r4, [r4, #4]
 80178fc:	e7a6      	b.n	801784c <_malloc_r+0x24>
 80178fe:	9c00      	ldr	r4, [sp, #0]
 8017900:	6863      	ldr	r3, [r4, #4]
 8017902:	9300      	str	r3, [sp, #0]
 8017904:	e7ad      	b.n	8017862 <_malloc_r+0x3a>
 8017906:	001a      	movs	r2, r3
 8017908:	685b      	ldr	r3, [r3, #4]
 801790a:	42a3      	cmp	r3, r4
 801790c:	d1fb      	bne.n	8017906 <_malloc_r+0xde>
 801790e:	2300      	movs	r3, #0
 8017910:	e7da      	b.n	80178c8 <_malloc_r+0xa0>
 8017912:	230c      	movs	r3, #12
 8017914:	0028      	movs	r0, r5
 8017916:	602b      	str	r3, [r5, #0]
 8017918:	f000 f80e 	bl	8017938 <__malloc_unlock>
 801791c:	e7c6      	b.n	80178ac <_malloc_r+0x84>
 801791e:	6007      	str	r7, [r0, #0]
 8017920:	e7da      	b.n	80178d8 <_malloc_r+0xb0>
 8017922:	46c0      	nop			@ (mov r8, r8)
 8017924:	200043ac 	.word	0x200043ac

08017928 <__malloc_lock>:
 8017928:	b510      	push	{r4, lr}
 801792a:	4802      	ldr	r0, [pc, #8]	@ (8017934 <__malloc_lock+0xc>)
 801792c:	f7ff f86d 	bl	8016a0a <__retarget_lock_acquire_recursive>
 8017930:	bd10      	pop	{r4, pc}
 8017932:	46c0      	nop			@ (mov r8, r8)
 8017934:	200043a4 	.word	0x200043a4

08017938 <__malloc_unlock>:
 8017938:	b510      	push	{r4, lr}
 801793a:	4802      	ldr	r0, [pc, #8]	@ (8017944 <__malloc_unlock+0xc>)
 801793c:	f7ff f866 	bl	8016a0c <__retarget_lock_release_recursive>
 8017940:	bd10      	pop	{r4, pc}
 8017942:	46c0      	nop			@ (mov r8, r8)
 8017944:	200043a4 	.word	0x200043a4

08017948 <_Balloc>:
 8017948:	b570      	push	{r4, r5, r6, lr}
 801794a:	69c5      	ldr	r5, [r0, #28]
 801794c:	0006      	movs	r6, r0
 801794e:	000c      	movs	r4, r1
 8017950:	2d00      	cmp	r5, #0
 8017952:	d10e      	bne.n	8017972 <_Balloc+0x2a>
 8017954:	2010      	movs	r0, #16
 8017956:	f7ff ff3b 	bl	80177d0 <malloc>
 801795a:	1e02      	subs	r2, r0, #0
 801795c:	61f0      	str	r0, [r6, #28]
 801795e:	d104      	bne.n	801796a <_Balloc+0x22>
 8017960:	216b      	movs	r1, #107	@ 0x6b
 8017962:	4b19      	ldr	r3, [pc, #100]	@ (80179c8 <_Balloc+0x80>)
 8017964:	4819      	ldr	r0, [pc, #100]	@ (80179cc <_Balloc+0x84>)
 8017966:	f000 ffad 	bl	80188c4 <__assert_func>
 801796a:	6045      	str	r5, [r0, #4]
 801796c:	6085      	str	r5, [r0, #8]
 801796e:	6005      	str	r5, [r0, #0]
 8017970:	60c5      	str	r5, [r0, #12]
 8017972:	69f5      	ldr	r5, [r6, #28]
 8017974:	68eb      	ldr	r3, [r5, #12]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d013      	beq.n	80179a2 <_Balloc+0x5a>
 801797a:	69f3      	ldr	r3, [r6, #28]
 801797c:	00a2      	lsls	r2, r4, #2
 801797e:	68db      	ldr	r3, [r3, #12]
 8017980:	189b      	adds	r3, r3, r2
 8017982:	6818      	ldr	r0, [r3, #0]
 8017984:	2800      	cmp	r0, #0
 8017986:	d118      	bne.n	80179ba <_Balloc+0x72>
 8017988:	2101      	movs	r1, #1
 801798a:	000d      	movs	r5, r1
 801798c:	40a5      	lsls	r5, r4
 801798e:	1d6a      	adds	r2, r5, #5
 8017990:	0030      	movs	r0, r6
 8017992:	0092      	lsls	r2, r2, #2
 8017994:	f000 ffb4 	bl	8018900 <_calloc_r>
 8017998:	2800      	cmp	r0, #0
 801799a:	d00c      	beq.n	80179b6 <_Balloc+0x6e>
 801799c:	6044      	str	r4, [r0, #4]
 801799e:	6085      	str	r5, [r0, #8]
 80179a0:	e00d      	b.n	80179be <_Balloc+0x76>
 80179a2:	2221      	movs	r2, #33	@ 0x21
 80179a4:	2104      	movs	r1, #4
 80179a6:	0030      	movs	r0, r6
 80179a8:	f000 ffaa 	bl	8018900 <_calloc_r>
 80179ac:	69f3      	ldr	r3, [r6, #28]
 80179ae:	60e8      	str	r0, [r5, #12]
 80179b0:	68db      	ldr	r3, [r3, #12]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d1e1      	bne.n	801797a <_Balloc+0x32>
 80179b6:	2000      	movs	r0, #0
 80179b8:	bd70      	pop	{r4, r5, r6, pc}
 80179ba:	6802      	ldr	r2, [r0, #0]
 80179bc:	601a      	str	r2, [r3, #0]
 80179be:	2300      	movs	r3, #0
 80179c0:	6103      	str	r3, [r0, #16]
 80179c2:	60c3      	str	r3, [r0, #12]
 80179c4:	e7f8      	b.n	80179b8 <_Balloc+0x70>
 80179c6:	46c0      	nop			@ (mov r8, r8)
 80179c8:	0801a3ad 	.word	0x0801a3ad
 80179cc:	0801a42d 	.word	0x0801a42d

080179d0 <_Bfree>:
 80179d0:	b570      	push	{r4, r5, r6, lr}
 80179d2:	69c6      	ldr	r6, [r0, #28]
 80179d4:	0005      	movs	r5, r0
 80179d6:	000c      	movs	r4, r1
 80179d8:	2e00      	cmp	r6, #0
 80179da:	d10e      	bne.n	80179fa <_Bfree+0x2a>
 80179dc:	2010      	movs	r0, #16
 80179de:	f7ff fef7 	bl	80177d0 <malloc>
 80179e2:	1e02      	subs	r2, r0, #0
 80179e4:	61e8      	str	r0, [r5, #28]
 80179e6:	d104      	bne.n	80179f2 <_Bfree+0x22>
 80179e8:	218f      	movs	r1, #143	@ 0x8f
 80179ea:	4b09      	ldr	r3, [pc, #36]	@ (8017a10 <_Bfree+0x40>)
 80179ec:	4809      	ldr	r0, [pc, #36]	@ (8017a14 <_Bfree+0x44>)
 80179ee:	f000 ff69 	bl	80188c4 <__assert_func>
 80179f2:	6046      	str	r6, [r0, #4]
 80179f4:	6086      	str	r6, [r0, #8]
 80179f6:	6006      	str	r6, [r0, #0]
 80179f8:	60c6      	str	r6, [r0, #12]
 80179fa:	2c00      	cmp	r4, #0
 80179fc:	d007      	beq.n	8017a0e <_Bfree+0x3e>
 80179fe:	69eb      	ldr	r3, [r5, #28]
 8017a00:	6862      	ldr	r2, [r4, #4]
 8017a02:	68db      	ldr	r3, [r3, #12]
 8017a04:	0092      	lsls	r2, r2, #2
 8017a06:	189b      	adds	r3, r3, r2
 8017a08:	681a      	ldr	r2, [r3, #0]
 8017a0a:	6022      	str	r2, [r4, #0]
 8017a0c:	601c      	str	r4, [r3, #0]
 8017a0e:	bd70      	pop	{r4, r5, r6, pc}
 8017a10:	0801a3ad 	.word	0x0801a3ad
 8017a14:	0801a42d 	.word	0x0801a42d

08017a18 <__multadd>:
 8017a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017a1a:	000f      	movs	r7, r1
 8017a1c:	9001      	str	r0, [sp, #4]
 8017a1e:	000c      	movs	r4, r1
 8017a20:	001e      	movs	r6, r3
 8017a22:	2000      	movs	r0, #0
 8017a24:	690d      	ldr	r5, [r1, #16]
 8017a26:	3714      	adds	r7, #20
 8017a28:	683b      	ldr	r3, [r7, #0]
 8017a2a:	3001      	adds	r0, #1
 8017a2c:	b299      	uxth	r1, r3
 8017a2e:	4351      	muls	r1, r2
 8017a30:	0c1b      	lsrs	r3, r3, #16
 8017a32:	4353      	muls	r3, r2
 8017a34:	1989      	adds	r1, r1, r6
 8017a36:	0c0e      	lsrs	r6, r1, #16
 8017a38:	199b      	adds	r3, r3, r6
 8017a3a:	0c1e      	lsrs	r6, r3, #16
 8017a3c:	b289      	uxth	r1, r1
 8017a3e:	041b      	lsls	r3, r3, #16
 8017a40:	185b      	adds	r3, r3, r1
 8017a42:	c708      	stmia	r7!, {r3}
 8017a44:	4285      	cmp	r5, r0
 8017a46:	dcef      	bgt.n	8017a28 <__multadd+0x10>
 8017a48:	2e00      	cmp	r6, #0
 8017a4a:	d022      	beq.n	8017a92 <__multadd+0x7a>
 8017a4c:	68a3      	ldr	r3, [r4, #8]
 8017a4e:	42ab      	cmp	r3, r5
 8017a50:	dc19      	bgt.n	8017a86 <__multadd+0x6e>
 8017a52:	6861      	ldr	r1, [r4, #4]
 8017a54:	9801      	ldr	r0, [sp, #4]
 8017a56:	3101      	adds	r1, #1
 8017a58:	f7ff ff76 	bl	8017948 <_Balloc>
 8017a5c:	1e07      	subs	r7, r0, #0
 8017a5e:	d105      	bne.n	8017a6c <__multadd+0x54>
 8017a60:	003a      	movs	r2, r7
 8017a62:	21ba      	movs	r1, #186	@ 0xba
 8017a64:	4b0c      	ldr	r3, [pc, #48]	@ (8017a98 <__multadd+0x80>)
 8017a66:	480d      	ldr	r0, [pc, #52]	@ (8017a9c <__multadd+0x84>)
 8017a68:	f000 ff2c 	bl	80188c4 <__assert_func>
 8017a6c:	0021      	movs	r1, r4
 8017a6e:	6922      	ldr	r2, [r4, #16]
 8017a70:	310c      	adds	r1, #12
 8017a72:	3202      	adds	r2, #2
 8017a74:	0092      	lsls	r2, r2, #2
 8017a76:	300c      	adds	r0, #12
 8017a78:	f7fe ffd4 	bl	8016a24 <memcpy>
 8017a7c:	0021      	movs	r1, r4
 8017a7e:	9801      	ldr	r0, [sp, #4]
 8017a80:	f7ff ffa6 	bl	80179d0 <_Bfree>
 8017a84:	003c      	movs	r4, r7
 8017a86:	1d2b      	adds	r3, r5, #4
 8017a88:	009b      	lsls	r3, r3, #2
 8017a8a:	18e3      	adds	r3, r4, r3
 8017a8c:	3501      	adds	r5, #1
 8017a8e:	605e      	str	r6, [r3, #4]
 8017a90:	6125      	str	r5, [r4, #16]
 8017a92:	0020      	movs	r0, r4
 8017a94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017a96:	46c0      	nop			@ (mov r8, r8)
 8017a98:	0801a41c 	.word	0x0801a41c
 8017a9c:	0801a42d 	.word	0x0801a42d

08017aa0 <__hi0bits>:
 8017aa0:	2280      	movs	r2, #128	@ 0x80
 8017aa2:	0003      	movs	r3, r0
 8017aa4:	0252      	lsls	r2, r2, #9
 8017aa6:	2000      	movs	r0, #0
 8017aa8:	4293      	cmp	r3, r2
 8017aaa:	d201      	bcs.n	8017ab0 <__hi0bits+0x10>
 8017aac:	041b      	lsls	r3, r3, #16
 8017aae:	3010      	adds	r0, #16
 8017ab0:	2280      	movs	r2, #128	@ 0x80
 8017ab2:	0452      	lsls	r2, r2, #17
 8017ab4:	4293      	cmp	r3, r2
 8017ab6:	d201      	bcs.n	8017abc <__hi0bits+0x1c>
 8017ab8:	3008      	adds	r0, #8
 8017aba:	021b      	lsls	r3, r3, #8
 8017abc:	2280      	movs	r2, #128	@ 0x80
 8017abe:	0552      	lsls	r2, r2, #21
 8017ac0:	4293      	cmp	r3, r2
 8017ac2:	d201      	bcs.n	8017ac8 <__hi0bits+0x28>
 8017ac4:	3004      	adds	r0, #4
 8017ac6:	011b      	lsls	r3, r3, #4
 8017ac8:	2280      	movs	r2, #128	@ 0x80
 8017aca:	05d2      	lsls	r2, r2, #23
 8017acc:	4293      	cmp	r3, r2
 8017ace:	d201      	bcs.n	8017ad4 <__hi0bits+0x34>
 8017ad0:	3002      	adds	r0, #2
 8017ad2:	009b      	lsls	r3, r3, #2
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	db03      	blt.n	8017ae0 <__hi0bits+0x40>
 8017ad8:	3001      	adds	r0, #1
 8017ada:	4213      	tst	r3, r2
 8017adc:	d100      	bne.n	8017ae0 <__hi0bits+0x40>
 8017ade:	2020      	movs	r0, #32
 8017ae0:	4770      	bx	lr

08017ae2 <__lo0bits>:
 8017ae2:	6803      	ldr	r3, [r0, #0]
 8017ae4:	0001      	movs	r1, r0
 8017ae6:	2207      	movs	r2, #7
 8017ae8:	0018      	movs	r0, r3
 8017aea:	4010      	ands	r0, r2
 8017aec:	4213      	tst	r3, r2
 8017aee:	d00d      	beq.n	8017b0c <__lo0bits+0x2a>
 8017af0:	3a06      	subs	r2, #6
 8017af2:	2000      	movs	r0, #0
 8017af4:	4213      	tst	r3, r2
 8017af6:	d105      	bne.n	8017b04 <__lo0bits+0x22>
 8017af8:	3002      	adds	r0, #2
 8017afa:	4203      	tst	r3, r0
 8017afc:	d003      	beq.n	8017b06 <__lo0bits+0x24>
 8017afe:	40d3      	lsrs	r3, r2
 8017b00:	0010      	movs	r0, r2
 8017b02:	600b      	str	r3, [r1, #0]
 8017b04:	4770      	bx	lr
 8017b06:	089b      	lsrs	r3, r3, #2
 8017b08:	600b      	str	r3, [r1, #0]
 8017b0a:	e7fb      	b.n	8017b04 <__lo0bits+0x22>
 8017b0c:	b29a      	uxth	r2, r3
 8017b0e:	2a00      	cmp	r2, #0
 8017b10:	d101      	bne.n	8017b16 <__lo0bits+0x34>
 8017b12:	2010      	movs	r0, #16
 8017b14:	0c1b      	lsrs	r3, r3, #16
 8017b16:	b2da      	uxtb	r2, r3
 8017b18:	2a00      	cmp	r2, #0
 8017b1a:	d101      	bne.n	8017b20 <__lo0bits+0x3e>
 8017b1c:	3008      	adds	r0, #8
 8017b1e:	0a1b      	lsrs	r3, r3, #8
 8017b20:	071a      	lsls	r2, r3, #28
 8017b22:	d101      	bne.n	8017b28 <__lo0bits+0x46>
 8017b24:	3004      	adds	r0, #4
 8017b26:	091b      	lsrs	r3, r3, #4
 8017b28:	079a      	lsls	r2, r3, #30
 8017b2a:	d101      	bne.n	8017b30 <__lo0bits+0x4e>
 8017b2c:	3002      	adds	r0, #2
 8017b2e:	089b      	lsrs	r3, r3, #2
 8017b30:	07da      	lsls	r2, r3, #31
 8017b32:	d4e9      	bmi.n	8017b08 <__lo0bits+0x26>
 8017b34:	3001      	adds	r0, #1
 8017b36:	085b      	lsrs	r3, r3, #1
 8017b38:	d1e6      	bne.n	8017b08 <__lo0bits+0x26>
 8017b3a:	2020      	movs	r0, #32
 8017b3c:	e7e2      	b.n	8017b04 <__lo0bits+0x22>
	...

08017b40 <__i2b>:
 8017b40:	b510      	push	{r4, lr}
 8017b42:	000c      	movs	r4, r1
 8017b44:	2101      	movs	r1, #1
 8017b46:	f7ff feff 	bl	8017948 <_Balloc>
 8017b4a:	2800      	cmp	r0, #0
 8017b4c:	d107      	bne.n	8017b5e <__i2b+0x1e>
 8017b4e:	2146      	movs	r1, #70	@ 0x46
 8017b50:	4c05      	ldr	r4, [pc, #20]	@ (8017b68 <__i2b+0x28>)
 8017b52:	0002      	movs	r2, r0
 8017b54:	4b05      	ldr	r3, [pc, #20]	@ (8017b6c <__i2b+0x2c>)
 8017b56:	0020      	movs	r0, r4
 8017b58:	31ff      	adds	r1, #255	@ 0xff
 8017b5a:	f000 feb3 	bl	80188c4 <__assert_func>
 8017b5e:	2301      	movs	r3, #1
 8017b60:	6144      	str	r4, [r0, #20]
 8017b62:	6103      	str	r3, [r0, #16]
 8017b64:	bd10      	pop	{r4, pc}
 8017b66:	46c0      	nop			@ (mov r8, r8)
 8017b68:	0801a42d 	.word	0x0801a42d
 8017b6c:	0801a41c 	.word	0x0801a41c

08017b70 <__multiply>:
 8017b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b72:	0014      	movs	r4, r2
 8017b74:	690a      	ldr	r2, [r1, #16]
 8017b76:	6923      	ldr	r3, [r4, #16]
 8017b78:	000d      	movs	r5, r1
 8017b7a:	b08b      	sub	sp, #44	@ 0x2c
 8017b7c:	429a      	cmp	r2, r3
 8017b7e:	db02      	blt.n	8017b86 <__multiply+0x16>
 8017b80:	0023      	movs	r3, r4
 8017b82:	000c      	movs	r4, r1
 8017b84:	001d      	movs	r5, r3
 8017b86:	6927      	ldr	r7, [r4, #16]
 8017b88:	692e      	ldr	r6, [r5, #16]
 8017b8a:	6861      	ldr	r1, [r4, #4]
 8017b8c:	19bb      	adds	r3, r7, r6
 8017b8e:	9303      	str	r3, [sp, #12]
 8017b90:	68a3      	ldr	r3, [r4, #8]
 8017b92:	19ba      	adds	r2, r7, r6
 8017b94:	4293      	cmp	r3, r2
 8017b96:	da00      	bge.n	8017b9a <__multiply+0x2a>
 8017b98:	3101      	adds	r1, #1
 8017b9a:	f7ff fed5 	bl	8017948 <_Balloc>
 8017b9e:	9002      	str	r0, [sp, #8]
 8017ba0:	2800      	cmp	r0, #0
 8017ba2:	d106      	bne.n	8017bb2 <__multiply+0x42>
 8017ba4:	21b1      	movs	r1, #177	@ 0xb1
 8017ba6:	4b49      	ldr	r3, [pc, #292]	@ (8017ccc <__multiply+0x15c>)
 8017ba8:	4849      	ldr	r0, [pc, #292]	@ (8017cd0 <__multiply+0x160>)
 8017baa:	9a02      	ldr	r2, [sp, #8]
 8017bac:	0049      	lsls	r1, r1, #1
 8017bae:	f000 fe89 	bl	80188c4 <__assert_func>
 8017bb2:	9b02      	ldr	r3, [sp, #8]
 8017bb4:	2200      	movs	r2, #0
 8017bb6:	3314      	adds	r3, #20
 8017bb8:	469c      	mov	ip, r3
 8017bba:	19bb      	adds	r3, r7, r6
 8017bbc:	009b      	lsls	r3, r3, #2
 8017bbe:	4463      	add	r3, ip
 8017bc0:	9304      	str	r3, [sp, #16]
 8017bc2:	4663      	mov	r3, ip
 8017bc4:	9904      	ldr	r1, [sp, #16]
 8017bc6:	428b      	cmp	r3, r1
 8017bc8:	d32a      	bcc.n	8017c20 <__multiply+0xb0>
 8017bca:	0023      	movs	r3, r4
 8017bcc:	00bf      	lsls	r7, r7, #2
 8017bce:	3314      	adds	r3, #20
 8017bd0:	3514      	adds	r5, #20
 8017bd2:	9308      	str	r3, [sp, #32]
 8017bd4:	00b6      	lsls	r6, r6, #2
 8017bd6:	19db      	adds	r3, r3, r7
 8017bd8:	9305      	str	r3, [sp, #20]
 8017bda:	19ab      	adds	r3, r5, r6
 8017bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8017bde:	2304      	movs	r3, #4
 8017be0:	9306      	str	r3, [sp, #24]
 8017be2:	0023      	movs	r3, r4
 8017be4:	9a05      	ldr	r2, [sp, #20]
 8017be6:	3315      	adds	r3, #21
 8017be8:	9501      	str	r5, [sp, #4]
 8017bea:	429a      	cmp	r2, r3
 8017bec:	d305      	bcc.n	8017bfa <__multiply+0x8a>
 8017bee:	1b13      	subs	r3, r2, r4
 8017bf0:	3b15      	subs	r3, #21
 8017bf2:	089b      	lsrs	r3, r3, #2
 8017bf4:	3301      	adds	r3, #1
 8017bf6:	009b      	lsls	r3, r3, #2
 8017bf8:	9306      	str	r3, [sp, #24]
 8017bfa:	9b01      	ldr	r3, [sp, #4]
 8017bfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017bfe:	4293      	cmp	r3, r2
 8017c00:	d310      	bcc.n	8017c24 <__multiply+0xb4>
 8017c02:	9b03      	ldr	r3, [sp, #12]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	dd05      	ble.n	8017c14 <__multiply+0xa4>
 8017c08:	9b04      	ldr	r3, [sp, #16]
 8017c0a:	3b04      	subs	r3, #4
 8017c0c:	9304      	str	r3, [sp, #16]
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d056      	beq.n	8017cc2 <__multiply+0x152>
 8017c14:	9b02      	ldr	r3, [sp, #8]
 8017c16:	9a03      	ldr	r2, [sp, #12]
 8017c18:	0018      	movs	r0, r3
 8017c1a:	611a      	str	r2, [r3, #16]
 8017c1c:	b00b      	add	sp, #44	@ 0x2c
 8017c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c20:	c304      	stmia	r3!, {r2}
 8017c22:	e7cf      	b.n	8017bc4 <__multiply+0x54>
 8017c24:	9b01      	ldr	r3, [sp, #4]
 8017c26:	6818      	ldr	r0, [r3, #0]
 8017c28:	b280      	uxth	r0, r0
 8017c2a:	2800      	cmp	r0, #0
 8017c2c:	d01e      	beq.n	8017c6c <__multiply+0xfc>
 8017c2e:	4667      	mov	r7, ip
 8017c30:	2500      	movs	r5, #0
 8017c32:	9e08      	ldr	r6, [sp, #32]
 8017c34:	ce02      	ldmia	r6!, {r1}
 8017c36:	683b      	ldr	r3, [r7, #0]
 8017c38:	9307      	str	r3, [sp, #28]
 8017c3a:	b28b      	uxth	r3, r1
 8017c3c:	4343      	muls	r3, r0
 8017c3e:	001a      	movs	r2, r3
 8017c40:	466b      	mov	r3, sp
 8017c42:	0c09      	lsrs	r1, r1, #16
 8017c44:	8b9b      	ldrh	r3, [r3, #28]
 8017c46:	4341      	muls	r1, r0
 8017c48:	18d3      	adds	r3, r2, r3
 8017c4a:	9a07      	ldr	r2, [sp, #28]
 8017c4c:	195b      	adds	r3, r3, r5
 8017c4e:	0c12      	lsrs	r2, r2, #16
 8017c50:	1889      	adds	r1, r1, r2
 8017c52:	0c1a      	lsrs	r2, r3, #16
 8017c54:	188a      	adds	r2, r1, r2
 8017c56:	b29b      	uxth	r3, r3
 8017c58:	0c15      	lsrs	r5, r2, #16
 8017c5a:	0412      	lsls	r2, r2, #16
 8017c5c:	431a      	orrs	r2, r3
 8017c5e:	9b05      	ldr	r3, [sp, #20]
 8017c60:	c704      	stmia	r7!, {r2}
 8017c62:	42b3      	cmp	r3, r6
 8017c64:	d8e6      	bhi.n	8017c34 <__multiply+0xc4>
 8017c66:	4663      	mov	r3, ip
 8017c68:	9a06      	ldr	r2, [sp, #24]
 8017c6a:	509d      	str	r5, [r3, r2]
 8017c6c:	9b01      	ldr	r3, [sp, #4]
 8017c6e:	6818      	ldr	r0, [r3, #0]
 8017c70:	0c00      	lsrs	r0, r0, #16
 8017c72:	d020      	beq.n	8017cb6 <__multiply+0x146>
 8017c74:	4663      	mov	r3, ip
 8017c76:	0025      	movs	r5, r4
 8017c78:	4661      	mov	r1, ip
 8017c7a:	2700      	movs	r7, #0
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	3514      	adds	r5, #20
 8017c80:	682a      	ldr	r2, [r5, #0]
 8017c82:	680e      	ldr	r6, [r1, #0]
 8017c84:	b292      	uxth	r2, r2
 8017c86:	4342      	muls	r2, r0
 8017c88:	0c36      	lsrs	r6, r6, #16
 8017c8a:	1992      	adds	r2, r2, r6
 8017c8c:	19d2      	adds	r2, r2, r7
 8017c8e:	0416      	lsls	r6, r2, #16
 8017c90:	b29b      	uxth	r3, r3
 8017c92:	431e      	orrs	r6, r3
 8017c94:	600e      	str	r6, [r1, #0]
 8017c96:	cd40      	ldmia	r5!, {r6}
 8017c98:	684b      	ldr	r3, [r1, #4]
 8017c9a:	0c36      	lsrs	r6, r6, #16
 8017c9c:	4346      	muls	r6, r0
 8017c9e:	b29b      	uxth	r3, r3
 8017ca0:	0c12      	lsrs	r2, r2, #16
 8017ca2:	18f3      	adds	r3, r6, r3
 8017ca4:	189b      	adds	r3, r3, r2
 8017ca6:	9a05      	ldr	r2, [sp, #20]
 8017ca8:	0c1f      	lsrs	r7, r3, #16
 8017caa:	3104      	adds	r1, #4
 8017cac:	42aa      	cmp	r2, r5
 8017cae:	d8e7      	bhi.n	8017c80 <__multiply+0x110>
 8017cb0:	4662      	mov	r2, ip
 8017cb2:	9906      	ldr	r1, [sp, #24]
 8017cb4:	5053      	str	r3, [r2, r1]
 8017cb6:	9b01      	ldr	r3, [sp, #4]
 8017cb8:	3304      	adds	r3, #4
 8017cba:	9301      	str	r3, [sp, #4]
 8017cbc:	2304      	movs	r3, #4
 8017cbe:	449c      	add	ip, r3
 8017cc0:	e79b      	b.n	8017bfa <__multiply+0x8a>
 8017cc2:	9b03      	ldr	r3, [sp, #12]
 8017cc4:	3b01      	subs	r3, #1
 8017cc6:	9303      	str	r3, [sp, #12]
 8017cc8:	e79b      	b.n	8017c02 <__multiply+0x92>
 8017cca:	46c0      	nop			@ (mov r8, r8)
 8017ccc:	0801a41c 	.word	0x0801a41c
 8017cd0:	0801a42d 	.word	0x0801a42d

08017cd4 <__pow5mult>:
 8017cd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017cd6:	2303      	movs	r3, #3
 8017cd8:	0015      	movs	r5, r2
 8017cda:	0007      	movs	r7, r0
 8017cdc:	000e      	movs	r6, r1
 8017cde:	401a      	ands	r2, r3
 8017ce0:	421d      	tst	r5, r3
 8017ce2:	d008      	beq.n	8017cf6 <__pow5mult+0x22>
 8017ce4:	4925      	ldr	r1, [pc, #148]	@ (8017d7c <__pow5mult+0xa8>)
 8017ce6:	3a01      	subs	r2, #1
 8017ce8:	0092      	lsls	r2, r2, #2
 8017cea:	5852      	ldr	r2, [r2, r1]
 8017cec:	2300      	movs	r3, #0
 8017cee:	0031      	movs	r1, r6
 8017cf0:	f7ff fe92 	bl	8017a18 <__multadd>
 8017cf4:	0006      	movs	r6, r0
 8017cf6:	10ad      	asrs	r5, r5, #2
 8017cf8:	d03d      	beq.n	8017d76 <__pow5mult+0xa2>
 8017cfa:	69fc      	ldr	r4, [r7, #28]
 8017cfc:	2c00      	cmp	r4, #0
 8017cfe:	d10f      	bne.n	8017d20 <__pow5mult+0x4c>
 8017d00:	2010      	movs	r0, #16
 8017d02:	f7ff fd65 	bl	80177d0 <malloc>
 8017d06:	1e02      	subs	r2, r0, #0
 8017d08:	61f8      	str	r0, [r7, #28]
 8017d0a:	d105      	bne.n	8017d18 <__pow5mult+0x44>
 8017d0c:	21b4      	movs	r1, #180	@ 0xb4
 8017d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8017d80 <__pow5mult+0xac>)
 8017d10:	481c      	ldr	r0, [pc, #112]	@ (8017d84 <__pow5mult+0xb0>)
 8017d12:	31ff      	adds	r1, #255	@ 0xff
 8017d14:	f000 fdd6 	bl	80188c4 <__assert_func>
 8017d18:	6044      	str	r4, [r0, #4]
 8017d1a:	6084      	str	r4, [r0, #8]
 8017d1c:	6004      	str	r4, [r0, #0]
 8017d1e:	60c4      	str	r4, [r0, #12]
 8017d20:	69fb      	ldr	r3, [r7, #28]
 8017d22:	689c      	ldr	r4, [r3, #8]
 8017d24:	9301      	str	r3, [sp, #4]
 8017d26:	2c00      	cmp	r4, #0
 8017d28:	d108      	bne.n	8017d3c <__pow5mult+0x68>
 8017d2a:	0038      	movs	r0, r7
 8017d2c:	4916      	ldr	r1, [pc, #88]	@ (8017d88 <__pow5mult+0xb4>)
 8017d2e:	f7ff ff07 	bl	8017b40 <__i2b>
 8017d32:	9b01      	ldr	r3, [sp, #4]
 8017d34:	0004      	movs	r4, r0
 8017d36:	6098      	str	r0, [r3, #8]
 8017d38:	2300      	movs	r3, #0
 8017d3a:	6003      	str	r3, [r0, #0]
 8017d3c:	2301      	movs	r3, #1
 8017d3e:	421d      	tst	r5, r3
 8017d40:	d00a      	beq.n	8017d58 <__pow5mult+0x84>
 8017d42:	0031      	movs	r1, r6
 8017d44:	0022      	movs	r2, r4
 8017d46:	0038      	movs	r0, r7
 8017d48:	f7ff ff12 	bl	8017b70 <__multiply>
 8017d4c:	0031      	movs	r1, r6
 8017d4e:	9001      	str	r0, [sp, #4]
 8017d50:	0038      	movs	r0, r7
 8017d52:	f7ff fe3d 	bl	80179d0 <_Bfree>
 8017d56:	9e01      	ldr	r6, [sp, #4]
 8017d58:	106d      	asrs	r5, r5, #1
 8017d5a:	d00c      	beq.n	8017d76 <__pow5mult+0xa2>
 8017d5c:	6820      	ldr	r0, [r4, #0]
 8017d5e:	2800      	cmp	r0, #0
 8017d60:	d107      	bne.n	8017d72 <__pow5mult+0x9e>
 8017d62:	0022      	movs	r2, r4
 8017d64:	0021      	movs	r1, r4
 8017d66:	0038      	movs	r0, r7
 8017d68:	f7ff ff02 	bl	8017b70 <__multiply>
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	6020      	str	r0, [r4, #0]
 8017d70:	6003      	str	r3, [r0, #0]
 8017d72:	0004      	movs	r4, r0
 8017d74:	e7e2      	b.n	8017d3c <__pow5mult+0x68>
 8017d76:	0030      	movs	r0, r6
 8017d78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017d7a:	46c0      	nop			@ (mov r8, r8)
 8017d7c:	0801a488 	.word	0x0801a488
 8017d80:	0801a3ad 	.word	0x0801a3ad
 8017d84:	0801a42d 	.word	0x0801a42d
 8017d88:	00000271 	.word	0x00000271

08017d8c <__lshift>:
 8017d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d8e:	000c      	movs	r4, r1
 8017d90:	0016      	movs	r6, r2
 8017d92:	6923      	ldr	r3, [r4, #16]
 8017d94:	1157      	asrs	r7, r2, #5
 8017d96:	b085      	sub	sp, #20
 8017d98:	18fb      	adds	r3, r7, r3
 8017d9a:	9301      	str	r3, [sp, #4]
 8017d9c:	3301      	adds	r3, #1
 8017d9e:	9300      	str	r3, [sp, #0]
 8017da0:	6849      	ldr	r1, [r1, #4]
 8017da2:	68a3      	ldr	r3, [r4, #8]
 8017da4:	9002      	str	r0, [sp, #8]
 8017da6:	9a00      	ldr	r2, [sp, #0]
 8017da8:	4293      	cmp	r3, r2
 8017daa:	db10      	blt.n	8017dce <__lshift+0x42>
 8017dac:	9802      	ldr	r0, [sp, #8]
 8017dae:	f7ff fdcb 	bl	8017948 <_Balloc>
 8017db2:	2300      	movs	r3, #0
 8017db4:	0001      	movs	r1, r0
 8017db6:	0005      	movs	r5, r0
 8017db8:	001a      	movs	r2, r3
 8017dba:	3114      	adds	r1, #20
 8017dbc:	4298      	cmp	r0, r3
 8017dbe:	d10c      	bne.n	8017dda <__lshift+0x4e>
 8017dc0:	21ef      	movs	r1, #239	@ 0xef
 8017dc2:	002a      	movs	r2, r5
 8017dc4:	4b25      	ldr	r3, [pc, #148]	@ (8017e5c <__lshift+0xd0>)
 8017dc6:	4826      	ldr	r0, [pc, #152]	@ (8017e60 <__lshift+0xd4>)
 8017dc8:	0049      	lsls	r1, r1, #1
 8017dca:	f000 fd7b 	bl	80188c4 <__assert_func>
 8017dce:	3101      	adds	r1, #1
 8017dd0:	005b      	lsls	r3, r3, #1
 8017dd2:	e7e8      	b.n	8017da6 <__lshift+0x1a>
 8017dd4:	0098      	lsls	r0, r3, #2
 8017dd6:	500a      	str	r2, [r1, r0]
 8017dd8:	3301      	adds	r3, #1
 8017dda:	42bb      	cmp	r3, r7
 8017ddc:	dbfa      	blt.n	8017dd4 <__lshift+0x48>
 8017dde:	43fb      	mvns	r3, r7
 8017de0:	17db      	asrs	r3, r3, #31
 8017de2:	401f      	ands	r7, r3
 8017de4:	00bf      	lsls	r7, r7, #2
 8017de6:	0023      	movs	r3, r4
 8017de8:	201f      	movs	r0, #31
 8017dea:	19c9      	adds	r1, r1, r7
 8017dec:	0037      	movs	r7, r6
 8017dee:	6922      	ldr	r2, [r4, #16]
 8017df0:	3314      	adds	r3, #20
 8017df2:	0092      	lsls	r2, r2, #2
 8017df4:	189a      	adds	r2, r3, r2
 8017df6:	4007      	ands	r7, r0
 8017df8:	4206      	tst	r6, r0
 8017dfa:	d029      	beq.n	8017e50 <__lshift+0xc4>
 8017dfc:	3001      	adds	r0, #1
 8017dfe:	1bc0      	subs	r0, r0, r7
 8017e00:	9003      	str	r0, [sp, #12]
 8017e02:	468c      	mov	ip, r1
 8017e04:	2000      	movs	r0, #0
 8017e06:	681e      	ldr	r6, [r3, #0]
 8017e08:	40be      	lsls	r6, r7
 8017e0a:	4306      	orrs	r6, r0
 8017e0c:	4660      	mov	r0, ip
 8017e0e:	c040      	stmia	r0!, {r6}
 8017e10:	4684      	mov	ip, r0
 8017e12:	9e03      	ldr	r6, [sp, #12]
 8017e14:	cb01      	ldmia	r3!, {r0}
 8017e16:	40f0      	lsrs	r0, r6
 8017e18:	429a      	cmp	r2, r3
 8017e1a:	d8f4      	bhi.n	8017e06 <__lshift+0x7a>
 8017e1c:	0026      	movs	r6, r4
 8017e1e:	3615      	adds	r6, #21
 8017e20:	2304      	movs	r3, #4
 8017e22:	42b2      	cmp	r2, r6
 8017e24:	d304      	bcc.n	8017e30 <__lshift+0xa4>
 8017e26:	1b13      	subs	r3, r2, r4
 8017e28:	3b15      	subs	r3, #21
 8017e2a:	089b      	lsrs	r3, r3, #2
 8017e2c:	3301      	adds	r3, #1
 8017e2e:	009b      	lsls	r3, r3, #2
 8017e30:	50c8      	str	r0, [r1, r3]
 8017e32:	2800      	cmp	r0, #0
 8017e34:	d002      	beq.n	8017e3c <__lshift+0xb0>
 8017e36:	9b01      	ldr	r3, [sp, #4]
 8017e38:	3302      	adds	r3, #2
 8017e3a:	9300      	str	r3, [sp, #0]
 8017e3c:	9b00      	ldr	r3, [sp, #0]
 8017e3e:	9802      	ldr	r0, [sp, #8]
 8017e40:	3b01      	subs	r3, #1
 8017e42:	0021      	movs	r1, r4
 8017e44:	612b      	str	r3, [r5, #16]
 8017e46:	f7ff fdc3 	bl	80179d0 <_Bfree>
 8017e4a:	0028      	movs	r0, r5
 8017e4c:	b005      	add	sp, #20
 8017e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e50:	cb01      	ldmia	r3!, {r0}
 8017e52:	c101      	stmia	r1!, {r0}
 8017e54:	429a      	cmp	r2, r3
 8017e56:	d8fb      	bhi.n	8017e50 <__lshift+0xc4>
 8017e58:	e7f0      	b.n	8017e3c <__lshift+0xb0>
 8017e5a:	46c0      	nop			@ (mov r8, r8)
 8017e5c:	0801a41c 	.word	0x0801a41c
 8017e60:	0801a42d 	.word	0x0801a42d

08017e64 <__mcmp>:
 8017e64:	b530      	push	{r4, r5, lr}
 8017e66:	690b      	ldr	r3, [r1, #16]
 8017e68:	6904      	ldr	r4, [r0, #16]
 8017e6a:	0002      	movs	r2, r0
 8017e6c:	1ae0      	subs	r0, r4, r3
 8017e6e:	429c      	cmp	r4, r3
 8017e70:	d10f      	bne.n	8017e92 <__mcmp+0x2e>
 8017e72:	3214      	adds	r2, #20
 8017e74:	009b      	lsls	r3, r3, #2
 8017e76:	3114      	adds	r1, #20
 8017e78:	0014      	movs	r4, r2
 8017e7a:	18c9      	adds	r1, r1, r3
 8017e7c:	18d2      	adds	r2, r2, r3
 8017e7e:	3a04      	subs	r2, #4
 8017e80:	3904      	subs	r1, #4
 8017e82:	6815      	ldr	r5, [r2, #0]
 8017e84:	680b      	ldr	r3, [r1, #0]
 8017e86:	429d      	cmp	r5, r3
 8017e88:	d004      	beq.n	8017e94 <__mcmp+0x30>
 8017e8a:	2001      	movs	r0, #1
 8017e8c:	429d      	cmp	r5, r3
 8017e8e:	d200      	bcs.n	8017e92 <__mcmp+0x2e>
 8017e90:	3802      	subs	r0, #2
 8017e92:	bd30      	pop	{r4, r5, pc}
 8017e94:	4294      	cmp	r4, r2
 8017e96:	d3f2      	bcc.n	8017e7e <__mcmp+0x1a>
 8017e98:	e7fb      	b.n	8017e92 <__mcmp+0x2e>
	...

08017e9c <__mdiff>:
 8017e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e9e:	000c      	movs	r4, r1
 8017ea0:	b087      	sub	sp, #28
 8017ea2:	9000      	str	r0, [sp, #0]
 8017ea4:	0011      	movs	r1, r2
 8017ea6:	0020      	movs	r0, r4
 8017ea8:	0017      	movs	r7, r2
 8017eaa:	f7ff ffdb 	bl	8017e64 <__mcmp>
 8017eae:	1e05      	subs	r5, r0, #0
 8017eb0:	d110      	bne.n	8017ed4 <__mdiff+0x38>
 8017eb2:	0001      	movs	r1, r0
 8017eb4:	9800      	ldr	r0, [sp, #0]
 8017eb6:	f7ff fd47 	bl	8017948 <_Balloc>
 8017eba:	1e02      	subs	r2, r0, #0
 8017ebc:	d104      	bne.n	8017ec8 <__mdiff+0x2c>
 8017ebe:	4b40      	ldr	r3, [pc, #256]	@ (8017fc0 <__mdiff+0x124>)
 8017ec0:	4840      	ldr	r0, [pc, #256]	@ (8017fc4 <__mdiff+0x128>)
 8017ec2:	4941      	ldr	r1, [pc, #260]	@ (8017fc8 <__mdiff+0x12c>)
 8017ec4:	f000 fcfe 	bl	80188c4 <__assert_func>
 8017ec8:	2301      	movs	r3, #1
 8017eca:	6145      	str	r5, [r0, #20]
 8017ecc:	6103      	str	r3, [r0, #16]
 8017ece:	0010      	movs	r0, r2
 8017ed0:	b007      	add	sp, #28
 8017ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ed4:	2600      	movs	r6, #0
 8017ed6:	42b0      	cmp	r0, r6
 8017ed8:	da03      	bge.n	8017ee2 <__mdiff+0x46>
 8017eda:	0023      	movs	r3, r4
 8017edc:	003c      	movs	r4, r7
 8017ede:	001f      	movs	r7, r3
 8017ee0:	3601      	adds	r6, #1
 8017ee2:	6861      	ldr	r1, [r4, #4]
 8017ee4:	9800      	ldr	r0, [sp, #0]
 8017ee6:	f7ff fd2f 	bl	8017948 <_Balloc>
 8017eea:	1e02      	subs	r2, r0, #0
 8017eec:	d103      	bne.n	8017ef6 <__mdiff+0x5a>
 8017eee:	4b34      	ldr	r3, [pc, #208]	@ (8017fc0 <__mdiff+0x124>)
 8017ef0:	4834      	ldr	r0, [pc, #208]	@ (8017fc4 <__mdiff+0x128>)
 8017ef2:	4936      	ldr	r1, [pc, #216]	@ (8017fcc <__mdiff+0x130>)
 8017ef4:	e7e6      	b.n	8017ec4 <__mdiff+0x28>
 8017ef6:	6923      	ldr	r3, [r4, #16]
 8017ef8:	3414      	adds	r4, #20
 8017efa:	9300      	str	r3, [sp, #0]
 8017efc:	009b      	lsls	r3, r3, #2
 8017efe:	18e3      	adds	r3, r4, r3
 8017f00:	0021      	movs	r1, r4
 8017f02:	9401      	str	r4, [sp, #4]
 8017f04:	003c      	movs	r4, r7
 8017f06:	9302      	str	r3, [sp, #8]
 8017f08:	693b      	ldr	r3, [r7, #16]
 8017f0a:	3414      	adds	r4, #20
 8017f0c:	009b      	lsls	r3, r3, #2
 8017f0e:	18e3      	adds	r3, r4, r3
 8017f10:	9303      	str	r3, [sp, #12]
 8017f12:	0003      	movs	r3, r0
 8017f14:	60c6      	str	r6, [r0, #12]
 8017f16:	468c      	mov	ip, r1
 8017f18:	2000      	movs	r0, #0
 8017f1a:	3314      	adds	r3, #20
 8017f1c:	9304      	str	r3, [sp, #16]
 8017f1e:	9305      	str	r3, [sp, #20]
 8017f20:	4663      	mov	r3, ip
 8017f22:	cb20      	ldmia	r3!, {r5}
 8017f24:	b2a9      	uxth	r1, r5
 8017f26:	000e      	movs	r6, r1
 8017f28:	469c      	mov	ip, r3
 8017f2a:	cc08      	ldmia	r4!, {r3}
 8017f2c:	0c2d      	lsrs	r5, r5, #16
 8017f2e:	b299      	uxth	r1, r3
 8017f30:	1a71      	subs	r1, r6, r1
 8017f32:	1809      	adds	r1, r1, r0
 8017f34:	0c1b      	lsrs	r3, r3, #16
 8017f36:	1408      	asrs	r0, r1, #16
 8017f38:	1aeb      	subs	r3, r5, r3
 8017f3a:	181b      	adds	r3, r3, r0
 8017f3c:	1418      	asrs	r0, r3, #16
 8017f3e:	b289      	uxth	r1, r1
 8017f40:	041b      	lsls	r3, r3, #16
 8017f42:	4319      	orrs	r1, r3
 8017f44:	9b05      	ldr	r3, [sp, #20]
 8017f46:	c302      	stmia	r3!, {r1}
 8017f48:	9305      	str	r3, [sp, #20]
 8017f4a:	9b03      	ldr	r3, [sp, #12]
 8017f4c:	42a3      	cmp	r3, r4
 8017f4e:	d8e7      	bhi.n	8017f20 <__mdiff+0x84>
 8017f50:	0039      	movs	r1, r7
 8017f52:	9c03      	ldr	r4, [sp, #12]
 8017f54:	3115      	adds	r1, #21
 8017f56:	2304      	movs	r3, #4
 8017f58:	428c      	cmp	r4, r1
 8017f5a:	d304      	bcc.n	8017f66 <__mdiff+0xca>
 8017f5c:	1be3      	subs	r3, r4, r7
 8017f5e:	3b15      	subs	r3, #21
 8017f60:	089b      	lsrs	r3, r3, #2
 8017f62:	3301      	adds	r3, #1
 8017f64:	009b      	lsls	r3, r3, #2
 8017f66:	9901      	ldr	r1, [sp, #4]
 8017f68:	18cd      	adds	r5, r1, r3
 8017f6a:	9904      	ldr	r1, [sp, #16]
 8017f6c:	002e      	movs	r6, r5
 8017f6e:	18cb      	adds	r3, r1, r3
 8017f70:	001f      	movs	r7, r3
 8017f72:	9902      	ldr	r1, [sp, #8]
 8017f74:	428e      	cmp	r6, r1
 8017f76:	d311      	bcc.n	8017f9c <__mdiff+0x100>
 8017f78:	9c02      	ldr	r4, [sp, #8]
 8017f7a:	1ee9      	subs	r1, r5, #3
 8017f7c:	2000      	movs	r0, #0
 8017f7e:	428c      	cmp	r4, r1
 8017f80:	d304      	bcc.n	8017f8c <__mdiff+0xf0>
 8017f82:	0021      	movs	r1, r4
 8017f84:	3103      	adds	r1, #3
 8017f86:	1b49      	subs	r1, r1, r5
 8017f88:	0889      	lsrs	r1, r1, #2
 8017f8a:	0088      	lsls	r0, r1, #2
 8017f8c:	181b      	adds	r3, r3, r0
 8017f8e:	3b04      	subs	r3, #4
 8017f90:	6819      	ldr	r1, [r3, #0]
 8017f92:	2900      	cmp	r1, #0
 8017f94:	d010      	beq.n	8017fb8 <__mdiff+0x11c>
 8017f96:	9b00      	ldr	r3, [sp, #0]
 8017f98:	6113      	str	r3, [r2, #16]
 8017f9a:	e798      	b.n	8017ece <__mdiff+0x32>
 8017f9c:	4684      	mov	ip, r0
 8017f9e:	ce02      	ldmia	r6!, {r1}
 8017fa0:	b288      	uxth	r0, r1
 8017fa2:	4460      	add	r0, ip
 8017fa4:	1400      	asrs	r0, r0, #16
 8017fa6:	0c0c      	lsrs	r4, r1, #16
 8017fa8:	1904      	adds	r4, r0, r4
 8017faa:	4461      	add	r1, ip
 8017fac:	1420      	asrs	r0, r4, #16
 8017fae:	b289      	uxth	r1, r1
 8017fb0:	0424      	lsls	r4, r4, #16
 8017fb2:	4321      	orrs	r1, r4
 8017fb4:	c702      	stmia	r7!, {r1}
 8017fb6:	e7dc      	b.n	8017f72 <__mdiff+0xd6>
 8017fb8:	9900      	ldr	r1, [sp, #0]
 8017fba:	3901      	subs	r1, #1
 8017fbc:	9100      	str	r1, [sp, #0]
 8017fbe:	e7e6      	b.n	8017f8e <__mdiff+0xf2>
 8017fc0:	0801a41c 	.word	0x0801a41c
 8017fc4:	0801a42d 	.word	0x0801a42d
 8017fc8:	00000237 	.word	0x00000237
 8017fcc:	00000245 	.word	0x00000245

08017fd0 <__d2b>:
 8017fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017fd2:	2101      	movs	r1, #1
 8017fd4:	0016      	movs	r6, r2
 8017fd6:	001f      	movs	r7, r3
 8017fd8:	f7ff fcb6 	bl	8017948 <_Balloc>
 8017fdc:	1e04      	subs	r4, r0, #0
 8017fde:	d105      	bne.n	8017fec <__d2b+0x1c>
 8017fe0:	0022      	movs	r2, r4
 8017fe2:	4b25      	ldr	r3, [pc, #148]	@ (8018078 <__d2b+0xa8>)
 8017fe4:	4825      	ldr	r0, [pc, #148]	@ (801807c <__d2b+0xac>)
 8017fe6:	4926      	ldr	r1, [pc, #152]	@ (8018080 <__d2b+0xb0>)
 8017fe8:	f000 fc6c 	bl	80188c4 <__assert_func>
 8017fec:	033b      	lsls	r3, r7, #12
 8017fee:	007d      	lsls	r5, r7, #1
 8017ff0:	0b1b      	lsrs	r3, r3, #12
 8017ff2:	0d6d      	lsrs	r5, r5, #21
 8017ff4:	d002      	beq.n	8017ffc <__d2b+0x2c>
 8017ff6:	2280      	movs	r2, #128	@ 0x80
 8017ff8:	0352      	lsls	r2, r2, #13
 8017ffa:	4313      	orrs	r3, r2
 8017ffc:	9301      	str	r3, [sp, #4]
 8017ffe:	2e00      	cmp	r6, #0
 8018000:	d025      	beq.n	801804e <__d2b+0x7e>
 8018002:	4668      	mov	r0, sp
 8018004:	9600      	str	r6, [sp, #0]
 8018006:	f7ff fd6c 	bl	8017ae2 <__lo0bits>
 801800a:	9b01      	ldr	r3, [sp, #4]
 801800c:	9900      	ldr	r1, [sp, #0]
 801800e:	2800      	cmp	r0, #0
 8018010:	d01b      	beq.n	801804a <__d2b+0x7a>
 8018012:	2220      	movs	r2, #32
 8018014:	001e      	movs	r6, r3
 8018016:	1a12      	subs	r2, r2, r0
 8018018:	4096      	lsls	r6, r2
 801801a:	0032      	movs	r2, r6
 801801c:	40c3      	lsrs	r3, r0
 801801e:	430a      	orrs	r2, r1
 8018020:	6162      	str	r2, [r4, #20]
 8018022:	9301      	str	r3, [sp, #4]
 8018024:	9e01      	ldr	r6, [sp, #4]
 8018026:	61a6      	str	r6, [r4, #24]
 8018028:	1e73      	subs	r3, r6, #1
 801802a:	419e      	sbcs	r6, r3
 801802c:	3601      	adds	r6, #1
 801802e:	6126      	str	r6, [r4, #16]
 8018030:	2d00      	cmp	r5, #0
 8018032:	d014      	beq.n	801805e <__d2b+0x8e>
 8018034:	2635      	movs	r6, #53	@ 0x35
 8018036:	4b13      	ldr	r3, [pc, #76]	@ (8018084 <__d2b+0xb4>)
 8018038:	18ed      	adds	r5, r5, r3
 801803a:	9b08      	ldr	r3, [sp, #32]
 801803c:	182d      	adds	r5, r5, r0
 801803e:	601d      	str	r5, [r3, #0]
 8018040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018042:	1a36      	subs	r6, r6, r0
 8018044:	601e      	str	r6, [r3, #0]
 8018046:	0020      	movs	r0, r4
 8018048:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801804a:	6161      	str	r1, [r4, #20]
 801804c:	e7ea      	b.n	8018024 <__d2b+0x54>
 801804e:	a801      	add	r0, sp, #4
 8018050:	f7ff fd47 	bl	8017ae2 <__lo0bits>
 8018054:	9b01      	ldr	r3, [sp, #4]
 8018056:	2601      	movs	r6, #1
 8018058:	6163      	str	r3, [r4, #20]
 801805a:	3020      	adds	r0, #32
 801805c:	e7e7      	b.n	801802e <__d2b+0x5e>
 801805e:	4b0a      	ldr	r3, [pc, #40]	@ (8018088 <__d2b+0xb8>)
 8018060:	18c0      	adds	r0, r0, r3
 8018062:	9b08      	ldr	r3, [sp, #32]
 8018064:	6018      	str	r0, [r3, #0]
 8018066:	4b09      	ldr	r3, [pc, #36]	@ (801808c <__d2b+0xbc>)
 8018068:	18f3      	adds	r3, r6, r3
 801806a:	009b      	lsls	r3, r3, #2
 801806c:	18e3      	adds	r3, r4, r3
 801806e:	6958      	ldr	r0, [r3, #20]
 8018070:	f7ff fd16 	bl	8017aa0 <__hi0bits>
 8018074:	0176      	lsls	r6, r6, #5
 8018076:	e7e3      	b.n	8018040 <__d2b+0x70>
 8018078:	0801a41c 	.word	0x0801a41c
 801807c:	0801a42d 	.word	0x0801a42d
 8018080:	0000030f 	.word	0x0000030f
 8018084:	fffffbcd 	.word	0xfffffbcd
 8018088:	fffffbce 	.word	0xfffffbce
 801808c:	3fffffff 	.word	0x3fffffff

08018090 <__ssputs_r>:
 8018090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018092:	688e      	ldr	r6, [r1, #8]
 8018094:	b085      	sub	sp, #20
 8018096:	001f      	movs	r7, r3
 8018098:	000c      	movs	r4, r1
 801809a:	680b      	ldr	r3, [r1, #0]
 801809c:	9002      	str	r0, [sp, #8]
 801809e:	9203      	str	r2, [sp, #12]
 80180a0:	42be      	cmp	r6, r7
 80180a2:	d830      	bhi.n	8018106 <__ssputs_r+0x76>
 80180a4:	210c      	movs	r1, #12
 80180a6:	5e62      	ldrsh	r2, [r4, r1]
 80180a8:	2190      	movs	r1, #144	@ 0x90
 80180aa:	00c9      	lsls	r1, r1, #3
 80180ac:	420a      	tst	r2, r1
 80180ae:	d028      	beq.n	8018102 <__ssputs_r+0x72>
 80180b0:	2003      	movs	r0, #3
 80180b2:	6921      	ldr	r1, [r4, #16]
 80180b4:	1a5b      	subs	r3, r3, r1
 80180b6:	9301      	str	r3, [sp, #4]
 80180b8:	6963      	ldr	r3, [r4, #20]
 80180ba:	4343      	muls	r3, r0
 80180bc:	9801      	ldr	r0, [sp, #4]
 80180be:	0fdd      	lsrs	r5, r3, #31
 80180c0:	18ed      	adds	r5, r5, r3
 80180c2:	1c7b      	adds	r3, r7, #1
 80180c4:	181b      	adds	r3, r3, r0
 80180c6:	106d      	asrs	r5, r5, #1
 80180c8:	42ab      	cmp	r3, r5
 80180ca:	d900      	bls.n	80180ce <__ssputs_r+0x3e>
 80180cc:	001d      	movs	r5, r3
 80180ce:	0552      	lsls	r2, r2, #21
 80180d0:	d528      	bpl.n	8018124 <__ssputs_r+0x94>
 80180d2:	0029      	movs	r1, r5
 80180d4:	9802      	ldr	r0, [sp, #8]
 80180d6:	f7ff fba7 	bl	8017828 <_malloc_r>
 80180da:	1e06      	subs	r6, r0, #0
 80180dc:	d02c      	beq.n	8018138 <__ssputs_r+0xa8>
 80180de:	9a01      	ldr	r2, [sp, #4]
 80180e0:	6921      	ldr	r1, [r4, #16]
 80180e2:	f7fe fc9f 	bl	8016a24 <memcpy>
 80180e6:	89a2      	ldrh	r2, [r4, #12]
 80180e8:	4b18      	ldr	r3, [pc, #96]	@ (801814c <__ssputs_r+0xbc>)
 80180ea:	401a      	ands	r2, r3
 80180ec:	2380      	movs	r3, #128	@ 0x80
 80180ee:	4313      	orrs	r3, r2
 80180f0:	81a3      	strh	r3, [r4, #12]
 80180f2:	9b01      	ldr	r3, [sp, #4]
 80180f4:	6126      	str	r6, [r4, #16]
 80180f6:	18f6      	adds	r6, r6, r3
 80180f8:	6026      	str	r6, [r4, #0]
 80180fa:	003e      	movs	r6, r7
 80180fc:	6165      	str	r5, [r4, #20]
 80180fe:	1aed      	subs	r5, r5, r3
 8018100:	60a5      	str	r5, [r4, #8]
 8018102:	42be      	cmp	r6, r7
 8018104:	d900      	bls.n	8018108 <__ssputs_r+0x78>
 8018106:	003e      	movs	r6, r7
 8018108:	0032      	movs	r2, r6
 801810a:	9903      	ldr	r1, [sp, #12]
 801810c:	6820      	ldr	r0, [r4, #0]
 801810e:	f000 fbb3 	bl	8018878 <memmove>
 8018112:	2000      	movs	r0, #0
 8018114:	68a3      	ldr	r3, [r4, #8]
 8018116:	1b9b      	subs	r3, r3, r6
 8018118:	60a3      	str	r3, [r4, #8]
 801811a:	6823      	ldr	r3, [r4, #0]
 801811c:	199b      	adds	r3, r3, r6
 801811e:	6023      	str	r3, [r4, #0]
 8018120:	b005      	add	sp, #20
 8018122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018124:	002a      	movs	r2, r5
 8018126:	9802      	ldr	r0, [sp, #8]
 8018128:	f000 fc29 	bl	801897e <_realloc_r>
 801812c:	1e06      	subs	r6, r0, #0
 801812e:	d1e0      	bne.n	80180f2 <__ssputs_r+0x62>
 8018130:	6921      	ldr	r1, [r4, #16]
 8018132:	9802      	ldr	r0, [sp, #8]
 8018134:	f7ff fb02 	bl	801773c <_free_r>
 8018138:	230c      	movs	r3, #12
 801813a:	2001      	movs	r0, #1
 801813c:	9a02      	ldr	r2, [sp, #8]
 801813e:	4240      	negs	r0, r0
 8018140:	6013      	str	r3, [r2, #0]
 8018142:	89a2      	ldrh	r2, [r4, #12]
 8018144:	3334      	adds	r3, #52	@ 0x34
 8018146:	4313      	orrs	r3, r2
 8018148:	81a3      	strh	r3, [r4, #12]
 801814a:	e7e9      	b.n	8018120 <__ssputs_r+0x90>
 801814c:	fffffb7f 	.word	0xfffffb7f

08018150 <_svfiprintf_r>:
 8018150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018152:	b0a1      	sub	sp, #132	@ 0x84
 8018154:	9003      	str	r0, [sp, #12]
 8018156:	001d      	movs	r5, r3
 8018158:	898b      	ldrh	r3, [r1, #12]
 801815a:	000f      	movs	r7, r1
 801815c:	0016      	movs	r6, r2
 801815e:	061b      	lsls	r3, r3, #24
 8018160:	d511      	bpl.n	8018186 <_svfiprintf_r+0x36>
 8018162:	690b      	ldr	r3, [r1, #16]
 8018164:	2b00      	cmp	r3, #0
 8018166:	d10e      	bne.n	8018186 <_svfiprintf_r+0x36>
 8018168:	2140      	movs	r1, #64	@ 0x40
 801816a:	f7ff fb5d 	bl	8017828 <_malloc_r>
 801816e:	6038      	str	r0, [r7, #0]
 8018170:	6138      	str	r0, [r7, #16]
 8018172:	2800      	cmp	r0, #0
 8018174:	d105      	bne.n	8018182 <_svfiprintf_r+0x32>
 8018176:	230c      	movs	r3, #12
 8018178:	9a03      	ldr	r2, [sp, #12]
 801817a:	6013      	str	r3, [r2, #0]
 801817c:	2001      	movs	r0, #1
 801817e:	4240      	negs	r0, r0
 8018180:	e0cf      	b.n	8018322 <_svfiprintf_r+0x1d2>
 8018182:	2340      	movs	r3, #64	@ 0x40
 8018184:	617b      	str	r3, [r7, #20]
 8018186:	2300      	movs	r3, #0
 8018188:	ac08      	add	r4, sp, #32
 801818a:	6163      	str	r3, [r4, #20]
 801818c:	3320      	adds	r3, #32
 801818e:	7663      	strb	r3, [r4, #25]
 8018190:	3310      	adds	r3, #16
 8018192:	76a3      	strb	r3, [r4, #26]
 8018194:	9507      	str	r5, [sp, #28]
 8018196:	0035      	movs	r5, r6
 8018198:	782b      	ldrb	r3, [r5, #0]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d001      	beq.n	80181a2 <_svfiprintf_r+0x52>
 801819e:	2b25      	cmp	r3, #37	@ 0x25
 80181a0:	d148      	bne.n	8018234 <_svfiprintf_r+0xe4>
 80181a2:	1bab      	subs	r3, r5, r6
 80181a4:	9305      	str	r3, [sp, #20]
 80181a6:	42b5      	cmp	r5, r6
 80181a8:	d00b      	beq.n	80181c2 <_svfiprintf_r+0x72>
 80181aa:	0032      	movs	r2, r6
 80181ac:	0039      	movs	r1, r7
 80181ae:	9803      	ldr	r0, [sp, #12]
 80181b0:	f7ff ff6e 	bl	8018090 <__ssputs_r>
 80181b4:	3001      	adds	r0, #1
 80181b6:	d100      	bne.n	80181ba <_svfiprintf_r+0x6a>
 80181b8:	e0ae      	b.n	8018318 <_svfiprintf_r+0x1c8>
 80181ba:	6963      	ldr	r3, [r4, #20]
 80181bc:	9a05      	ldr	r2, [sp, #20]
 80181be:	189b      	adds	r3, r3, r2
 80181c0:	6163      	str	r3, [r4, #20]
 80181c2:	782b      	ldrb	r3, [r5, #0]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d100      	bne.n	80181ca <_svfiprintf_r+0x7a>
 80181c8:	e0a6      	b.n	8018318 <_svfiprintf_r+0x1c8>
 80181ca:	2201      	movs	r2, #1
 80181cc:	2300      	movs	r3, #0
 80181ce:	4252      	negs	r2, r2
 80181d0:	6062      	str	r2, [r4, #4]
 80181d2:	a904      	add	r1, sp, #16
 80181d4:	3254      	adds	r2, #84	@ 0x54
 80181d6:	1852      	adds	r2, r2, r1
 80181d8:	1c6e      	adds	r6, r5, #1
 80181da:	6023      	str	r3, [r4, #0]
 80181dc:	60e3      	str	r3, [r4, #12]
 80181de:	60a3      	str	r3, [r4, #8]
 80181e0:	7013      	strb	r3, [r2, #0]
 80181e2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80181e4:	4b54      	ldr	r3, [pc, #336]	@ (8018338 <_svfiprintf_r+0x1e8>)
 80181e6:	2205      	movs	r2, #5
 80181e8:	0018      	movs	r0, r3
 80181ea:	7831      	ldrb	r1, [r6, #0]
 80181ec:	9305      	str	r3, [sp, #20]
 80181ee:	f7fe fc0e 	bl	8016a0e <memchr>
 80181f2:	1c75      	adds	r5, r6, #1
 80181f4:	2800      	cmp	r0, #0
 80181f6:	d11f      	bne.n	8018238 <_svfiprintf_r+0xe8>
 80181f8:	6822      	ldr	r2, [r4, #0]
 80181fa:	06d3      	lsls	r3, r2, #27
 80181fc:	d504      	bpl.n	8018208 <_svfiprintf_r+0xb8>
 80181fe:	2353      	movs	r3, #83	@ 0x53
 8018200:	a904      	add	r1, sp, #16
 8018202:	185b      	adds	r3, r3, r1
 8018204:	2120      	movs	r1, #32
 8018206:	7019      	strb	r1, [r3, #0]
 8018208:	0713      	lsls	r3, r2, #28
 801820a:	d504      	bpl.n	8018216 <_svfiprintf_r+0xc6>
 801820c:	2353      	movs	r3, #83	@ 0x53
 801820e:	a904      	add	r1, sp, #16
 8018210:	185b      	adds	r3, r3, r1
 8018212:	212b      	movs	r1, #43	@ 0x2b
 8018214:	7019      	strb	r1, [r3, #0]
 8018216:	7833      	ldrb	r3, [r6, #0]
 8018218:	2b2a      	cmp	r3, #42	@ 0x2a
 801821a:	d016      	beq.n	801824a <_svfiprintf_r+0xfa>
 801821c:	0035      	movs	r5, r6
 801821e:	2100      	movs	r1, #0
 8018220:	200a      	movs	r0, #10
 8018222:	68e3      	ldr	r3, [r4, #12]
 8018224:	782a      	ldrb	r2, [r5, #0]
 8018226:	1c6e      	adds	r6, r5, #1
 8018228:	3a30      	subs	r2, #48	@ 0x30
 801822a:	2a09      	cmp	r2, #9
 801822c:	d950      	bls.n	80182d0 <_svfiprintf_r+0x180>
 801822e:	2900      	cmp	r1, #0
 8018230:	d111      	bne.n	8018256 <_svfiprintf_r+0x106>
 8018232:	e017      	b.n	8018264 <_svfiprintf_r+0x114>
 8018234:	3501      	adds	r5, #1
 8018236:	e7af      	b.n	8018198 <_svfiprintf_r+0x48>
 8018238:	9b05      	ldr	r3, [sp, #20]
 801823a:	6822      	ldr	r2, [r4, #0]
 801823c:	1ac0      	subs	r0, r0, r3
 801823e:	2301      	movs	r3, #1
 8018240:	4083      	lsls	r3, r0
 8018242:	4313      	orrs	r3, r2
 8018244:	002e      	movs	r6, r5
 8018246:	6023      	str	r3, [r4, #0]
 8018248:	e7cc      	b.n	80181e4 <_svfiprintf_r+0x94>
 801824a:	9b07      	ldr	r3, [sp, #28]
 801824c:	1d19      	adds	r1, r3, #4
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	9107      	str	r1, [sp, #28]
 8018252:	2b00      	cmp	r3, #0
 8018254:	db01      	blt.n	801825a <_svfiprintf_r+0x10a>
 8018256:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018258:	e004      	b.n	8018264 <_svfiprintf_r+0x114>
 801825a:	425b      	negs	r3, r3
 801825c:	60e3      	str	r3, [r4, #12]
 801825e:	2302      	movs	r3, #2
 8018260:	4313      	orrs	r3, r2
 8018262:	6023      	str	r3, [r4, #0]
 8018264:	782b      	ldrb	r3, [r5, #0]
 8018266:	2b2e      	cmp	r3, #46	@ 0x2e
 8018268:	d10c      	bne.n	8018284 <_svfiprintf_r+0x134>
 801826a:	786b      	ldrb	r3, [r5, #1]
 801826c:	2b2a      	cmp	r3, #42	@ 0x2a
 801826e:	d134      	bne.n	80182da <_svfiprintf_r+0x18a>
 8018270:	9b07      	ldr	r3, [sp, #28]
 8018272:	3502      	adds	r5, #2
 8018274:	1d1a      	adds	r2, r3, #4
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	9207      	str	r2, [sp, #28]
 801827a:	2b00      	cmp	r3, #0
 801827c:	da01      	bge.n	8018282 <_svfiprintf_r+0x132>
 801827e:	2301      	movs	r3, #1
 8018280:	425b      	negs	r3, r3
 8018282:	9309      	str	r3, [sp, #36]	@ 0x24
 8018284:	4e2d      	ldr	r6, [pc, #180]	@ (801833c <_svfiprintf_r+0x1ec>)
 8018286:	2203      	movs	r2, #3
 8018288:	0030      	movs	r0, r6
 801828a:	7829      	ldrb	r1, [r5, #0]
 801828c:	f7fe fbbf 	bl	8016a0e <memchr>
 8018290:	2800      	cmp	r0, #0
 8018292:	d006      	beq.n	80182a2 <_svfiprintf_r+0x152>
 8018294:	2340      	movs	r3, #64	@ 0x40
 8018296:	1b80      	subs	r0, r0, r6
 8018298:	4083      	lsls	r3, r0
 801829a:	6822      	ldr	r2, [r4, #0]
 801829c:	3501      	adds	r5, #1
 801829e:	4313      	orrs	r3, r2
 80182a0:	6023      	str	r3, [r4, #0]
 80182a2:	7829      	ldrb	r1, [r5, #0]
 80182a4:	2206      	movs	r2, #6
 80182a6:	4826      	ldr	r0, [pc, #152]	@ (8018340 <_svfiprintf_r+0x1f0>)
 80182a8:	1c6e      	adds	r6, r5, #1
 80182aa:	7621      	strb	r1, [r4, #24]
 80182ac:	f7fe fbaf 	bl	8016a0e <memchr>
 80182b0:	2800      	cmp	r0, #0
 80182b2:	d038      	beq.n	8018326 <_svfiprintf_r+0x1d6>
 80182b4:	4b23      	ldr	r3, [pc, #140]	@ (8018344 <_svfiprintf_r+0x1f4>)
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d122      	bne.n	8018300 <_svfiprintf_r+0x1b0>
 80182ba:	2207      	movs	r2, #7
 80182bc:	9b07      	ldr	r3, [sp, #28]
 80182be:	3307      	adds	r3, #7
 80182c0:	4393      	bics	r3, r2
 80182c2:	3308      	adds	r3, #8
 80182c4:	9307      	str	r3, [sp, #28]
 80182c6:	6963      	ldr	r3, [r4, #20]
 80182c8:	9a04      	ldr	r2, [sp, #16]
 80182ca:	189b      	adds	r3, r3, r2
 80182cc:	6163      	str	r3, [r4, #20]
 80182ce:	e762      	b.n	8018196 <_svfiprintf_r+0x46>
 80182d0:	4343      	muls	r3, r0
 80182d2:	0035      	movs	r5, r6
 80182d4:	2101      	movs	r1, #1
 80182d6:	189b      	adds	r3, r3, r2
 80182d8:	e7a4      	b.n	8018224 <_svfiprintf_r+0xd4>
 80182da:	2300      	movs	r3, #0
 80182dc:	200a      	movs	r0, #10
 80182de:	0019      	movs	r1, r3
 80182e0:	3501      	adds	r5, #1
 80182e2:	6063      	str	r3, [r4, #4]
 80182e4:	782a      	ldrb	r2, [r5, #0]
 80182e6:	1c6e      	adds	r6, r5, #1
 80182e8:	3a30      	subs	r2, #48	@ 0x30
 80182ea:	2a09      	cmp	r2, #9
 80182ec:	d903      	bls.n	80182f6 <_svfiprintf_r+0x1a6>
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d0c8      	beq.n	8018284 <_svfiprintf_r+0x134>
 80182f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80182f4:	e7c6      	b.n	8018284 <_svfiprintf_r+0x134>
 80182f6:	4341      	muls	r1, r0
 80182f8:	0035      	movs	r5, r6
 80182fa:	2301      	movs	r3, #1
 80182fc:	1889      	adds	r1, r1, r2
 80182fe:	e7f1      	b.n	80182e4 <_svfiprintf_r+0x194>
 8018300:	aa07      	add	r2, sp, #28
 8018302:	9200      	str	r2, [sp, #0]
 8018304:	0021      	movs	r1, r4
 8018306:	003a      	movs	r2, r7
 8018308:	4b0f      	ldr	r3, [pc, #60]	@ (8018348 <_svfiprintf_r+0x1f8>)
 801830a:	9803      	ldr	r0, [sp, #12]
 801830c:	f7fd fd9a 	bl	8015e44 <_printf_float>
 8018310:	9004      	str	r0, [sp, #16]
 8018312:	9b04      	ldr	r3, [sp, #16]
 8018314:	3301      	adds	r3, #1
 8018316:	d1d6      	bne.n	80182c6 <_svfiprintf_r+0x176>
 8018318:	89bb      	ldrh	r3, [r7, #12]
 801831a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801831c:	065b      	lsls	r3, r3, #25
 801831e:	d500      	bpl.n	8018322 <_svfiprintf_r+0x1d2>
 8018320:	e72c      	b.n	801817c <_svfiprintf_r+0x2c>
 8018322:	b021      	add	sp, #132	@ 0x84
 8018324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018326:	aa07      	add	r2, sp, #28
 8018328:	9200      	str	r2, [sp, #0]
 801832a:	0021      	movs	r1, r4
 801832c:	003a      	movs	r2, r7
 801832e:	4b06      	ldr	r3, [pc, #24]	@ (8018348 <_svfiprintf_r+0x1f8>)
 8018330:	9803      	ldr	r0, [sp, #12]
 8018332:	f7fe f835 	bl	80163a0 <_printf_i>
 8018336:	e7eb      	b.n	8018310 <_svfiprintf_r+0x1c0>
 8018338:	0801a588 	.word	0x0801a588
 801833c:	0801a58e 	.word	0x0801a58e
 8018340:	0801a592 	.word	0x0801a592
 8018344:	08015e45 	.word	0x08015e45
 8018348:	08018091 	.word	0x08018091

0801834c <__sfputc_r>:
 801834c:	6893      	ldr	r3, [r2, #8]
 801834e:	b510      	push	{r4, lr}
 8018350:	3b01      	subs	r3, #1
 8018352:	6093      	str	r3, [r2, #8]
 8018354:	2b00      	cmp	r3, #0
 8018356:	da04      	bge.n	8018362 <__sfputc_r+0x16>
 8018358:	6994      	ldr	r4, [r2, #24]
 801835a:	42a3      	cmp	r3, r4
 801835c:	db07      	blt.n	801836e <__sfputc_r+0x22>
 801835e:	290a      	cmp	r1, #10
 8018360:	d005      	beq.n	801836e <__sfputc_r+0x22>
 8018362:	6813      	ldr	r3, [r2, #0]
 8018364:	1c58      	adds	r0, r3, #1
 8018366:	6010      	str	r0, [r2, #0]
 8018368:	7019      	strb	r1, [r3, #0]
 801836a:	0008      	movs	r0, r1
 801836c:	bd10      	pop	{r4, pc}
 801836e:	f000 f9e2 	bl	8018736 <__swbuf_r>
 8018372:	0001      	movs	r1, r0
 8018374:	e7f9      	b.n	801836a <__sfputc_r+0x1e>

08018376 <__sfputs_r>:
 8018376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018378:	0006      	movs	r6, r0
 801837a:	000f      	movs	r7, r1
 801837c:	0014      	movs	r4, r2
 801837e:	18d5      	adds	r5, r2, r3
 8018380:	42ac      	cmp	r4, r5
 8018382:	d101      	bne.n	8018388 <__sfputs_r+0x12>
 8018384:	2000      	movs	r0, #0
 8018386:	e007      	b.n	8018398 <__sfputs_r+0x22>
 8018388:	7821      	ldrb	r1, [r4, #0]
 801838a:	003a      	movs	r2, r7
 801838c:	0030      	movs	r0, r6
 801838e:	f7ff ffdd 	bl	801834c <__sfputc_r>
 8018392:	3401      	adds	r4, #1
 8018394:	1c43      	adds	r3, r0, #1
 8018396:	d1f3      	bne.n	8018380 <__sfputs_r+0xa>
 8018398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801839c <_vfiprintf_r>:
 801839c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801839e:	b0a1      	sub	sp, #132	@ 0x84
 80183a0:	000f      	movs	r7, r1
 80183a2:	0015      	movs	r5, r2
 80183a4:	001e      	movs	r6, r3
 80183a6:	9003      	str	r0, [sp, #12]
 80183a8:	2800      	cmp	r0, #0
 80183aa:	d004      	beq.n	80183b6 <_vfiprintf_r+0x1a>
 80183ac:	6a03      	ldr	r3, [r0, #32]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d101      	bne.n	80183b6 <_vfiprintf_r+0x1a>
 80183b2:	f7fe f993 	bl	80166dc <__sinit>
 80183b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80183b8:	07db      	lsls	r3, r3, #31
 80183ba:	d405      	bmi.n	80183c8 <_vfiprintf_r+0x2c>
 80183bc:	89bb      	ldrh	r3, [r7, #12]
 80183be:	059b      	lsls	r3, r3, #22
 80183c0:	d402      	bmi.n	80183c8 <_vfiprintf_r+0x2c>
 80183c2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80183c4:	f7fe fb21 	bl	8016a0a <__retarget_lock_acquire_recursive>
 80183c8:	89bb      	ldrh	r3, [r7, #12]
 80183ca:	071b      	lsls	r3, r3, #28
 80183cc:	d502      	bpl.n	80183d4 <_vfiprintf_r+0x38>
 80183ce:	693b      	ldr	r3, [r7, #16]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d113      	bne.n	80183fc <_vfiprintf_r+0x60>
 80183d4:	0039      	movs	r1, r7
 80183d6:	9803      	ldr	r0, [sp, #12]
 80183d8:	f000 f9f0 	bl	80187bc <__swsetup_r>
 80183dc:	2800      	cmp	r0, #0
 80183de:	d00d      	beq.n	80183fc <_vfiprintf_r+0x60>
 80183e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80183e2:	07db      	lsls	r3, r3, #31
 80183e4:	d503      	bpl.n	80183ee <_vfiprintf_r+0x52>
 80183e6:	2001      	movs	r0, #1
 80183e8:	4240      	negs	r0, r0
 80183ea:	b021      	add	sp, #132	@ 0x84
 80183ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183ee:	89bb      	ldrh	r3, [r7, #12]
 80183f0:	059b      	lsls	r3, r3, #22
 80183f2:	d4f8      	bmi.n	80183e6 <_vfiprintf_r+0x4a>
 80183f4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80183f6:	f7fe fb09 	bl	8016a0c <__retarget_lock_release_recursive>
 80183fa:	e7f4      	b.n	80183e6 <_vfiprintf_r+0x4a>
 80183fc:	2300      	movs	r3, #0
 80183fe:	ac08      	add	r4, sp, #32
 8018400:	6163      	str	r3, [r4, #20]
 8018402:	3320      	adds	r3, #32
 8018404:	7663      	strb	r3, [r4, #25]
 8018406:	3310      	adds	r3, #16
 8018408:	76a3      	strb	r3, [r4, #26]
 801840a:	9607      	str	r6, [sp, #28]
 801840c:	002e      	movs	r6, r5
 801840e:	7833      	ldrb	r3, [r6, #0]
 8018410:	2b00      	cmp	r3, #0
 8018412:	d001      	beq.n	8018418 <_vfiprintf_r+0x7c>
 8018414:	2b25      	cmp	r3, #37	@ 0x25
 8018416:	d148      	bne.n	80184aa <_vfiprintf_r+0x10e>
 8018418:	1b73      	subs	r3, r6, r5
 801841a:	9305      	str	r3, [sp, #20]
 801841c:	42ae      	cmp	r6, r5
 801841e:	d00b      	beq.n	8018438 <_vfiprintf_r+0x9c>
 8018420:	002a      	movs	r2, r5
 8018422:	0039      	movs	r1, r7
 8018424:	9803      	ldr	r0, [sp, #12]
 8018426:	f7ff ffa6 	bl	8018376 <__sfputs_r>
 801842a:	3001      	adds	r0, #1
 801842c:	d100      	bne.n	8018430 <_vfiprintf_r+0x94>
 801842e:	e0ae      	b.n	801858e <_vfiprintf_r+0x1f2>
 8018430:	6963      	ldr	r3, [r4, #20]
 8018432:	9a05      	ldr	r2, [sp, #20]
 8018434:	189b      	adds	r3, r3, r2
 8018436:	6163      	str	r3, [r4, #20]
 8018438:	7833      	ldrb	r3, [r6, #0]
 801843a:	2b00      	cmp	r3, #0
 801843c:	d100      	bne.n	8018440 <_vfiprintf_r+0xa4>
 801843e:	e0a6      	b.n	801858e <_vfiprintf_r+0x1f2>
 8018440:	2201      	movs	r2, #1
 8018442:	2300      	movs	r3, #0
 8018444:	4252      	negs	r2, r2
 8018446:	6062      	str	r2, [r4, #4]
 8018448:	a904      	add	r1, sp, #16
 801844a:	3254      	adds	r2, #84	@ 0x54
 801844c:	1852      	adds	r2, r2, r1
 801844e:	1c75      	adds	r5, r6, #1
 8018450:	6023      	str	r3, [r4, #0]
 8018452:	60e3      	str	r3, [r4, #12]
 8018454:	60a3      	str	r3, [r4, #8]
 8018456:	7013      	strb	r3, [r2, #0]
 8018458:	65a3      	str	r3, [r4, #88]	@ 0x58
 801845a:	4b59      	ldr	r3, [pc, #356]	@ (80185c0 <_vfiprintf_r+0x224>)
 801845c:	2205      	movs	r2, #5
 801845e:	0018      	movs	r0, r3
 8018460:	7829      	ldrb	r1, [r5, #0]
 8018462:	9305      	str	r3, [sp, #20]
 8018464:	f7fe fad3 	bl	8016a0e <memchr>
 8018468:	1c6e      	adds	r6, r5, #1
 801846a:	2800      	cmp	r0, #0
 801846c:	d11f      	bne.n	80184ae <_vfiprintf_r+0x112>
 801846e:	6822      	ldr	r2, [r4, #0]
 8018470:	06d3      	lsls	r3, r2, #27
 8018472:	d504      	bpl.n	801847e <_vfiprintf_r+0xe2>
 8018474:	2353      	movs	r3, #83	@ 0x53
 8018476:	a904      	add	r1, sp, #16
 8018478:	185b      	adds	r3, r3, r1
 801847a:	2120      	movs	r1, #32
 801847c:	7019      	strb	r1, [r3, #0]
 801847e:	0713      	lsls	r3, r2, #28
 8018480:	d504      	bpl.n	801848c <_vfiprintf_r+0xf0>
 8018482:	2353      	movs	r3, #83	@ 0x53
 8018484:	a904      	add	r1, sp, #16
 8018486:	185b      	adds	r3, r3, r1
 8018488:	212b      	movs	r1, #43	@ 0x2b
 801848a:	7019      	strb	r1, [r3, #0]
 801848c:	782b      	ldrb	r3, [r5, #0]
 801848e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018490:	d016      	beq.n	80184c0 <_vfiprintf_r+0x124>
 8018492:	002e      	movs	r6, r5
 8018494:	2100      	movs	r1, #0
 8018496:	200a      	movs	r0, #10
 8018498:	68e3      	ldr	r3, [r4, #12]
 801849a:	7832      	ldrb	r2, [r6, #0]
 801849c:	1c75      	adds	r5, r6, #1
 801849e:	3a30      	subs	r2, #48	@ 0x30
 80184a0:	2a09      	cmp	r2, #9
 80184a2:	d950      	bls.n	8018546 <_vfiprintf_r+0x1aa>
 80184a4:	2900      	cmp	r1, #0
 80184a6:	d111      	bne.n	80184cc <_vfiprintf_r+0x130>
 80184a8:	e017      	b.n	80184da <_vfiprintf_r+0x13e>
 80184aa:	3601      	adds	r6, #1
 80184ac:	e7af      	b.n	801840e <_vfiprintf_r+0x72>
 80184ae:	9b05      	ldr	r3, [sp, #20]
 80184b0:	6822      	ldr	r2, [r4, #0]
 80184b2:	1ac0      	subs	r0, r0, r3
 80184b4:	2301      	movs	r3, #1
 80184b6:	4083      	lsls	r3, r0
 80184b8:	4313      	orrs	r3, r2
 80184ba:	0035      	movs	r5, r6
 80184bc:	6023      	str	r3, [r4, #0]
 80184be:	e7cc      	b.n	801845a <_vfiprintf_r+0xbe>
 80184c0:	9b07      	ldr	r3, [sp, #28]
 80184c2:	1d19      	adds	r1, r3, #4
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	9107      	str	r1, [sp, #28]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	db01      	blt.n	80184d0 <_vfiprintf_r+0x134>
 80184cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80184ce:	e004      	b.n	80184da <_vfiprintf_r+0x13e>
 80184d0:	425b      	negs	r3, r3
 80184d2:	60e3      	str	r3, [r4, #12]
 80184d4:	2302      	movs	r3, #2
 80184d6:	4313      	orrs	r3, r2
 80184d8:	6023      	str	r3, [r4, #0]
 80184da:	7833      	ldrb	r3, [r6, #0]
 80184dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80184de:	d10c      	bne.n	80184fa <_vfiprintf_r+0x15e>
 80184e0:	7873      	ldrb	r3, [r6, #1]
 80184e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80184e4:	d134      	bne.n	8018550 <_vfiprintf_r+0x1b4>
 80184e6:	9b07      	ldr	r3, [sp, #28]
 80184e8:	3602      	adds	r6, #2
 80184ea:	1d1a      	adds	r2, r3, #4
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	9207      	str	r2, [sp, #28]
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	da01      	bge.n	80184f8 <_vfiprintf_r+0x15c>
 80184f4:	2301      	movs	r3, #1
 80184f6:	425b      	negs	r3, r3
 80184f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80184fa:	4d32      	ldr	r5, [pc, #200]	@ (80185c4 <_vfiprintf_r+0x228>)
 80184fc:	2203      	movs	r2, #3
 80184fe:	0028      	movs	r0, r5
 8018500:	7831      	ldrb	r1, [r6, #0]
 8018502:	f7fe fa84 	bl	8016a0e <memchr>
 8018506:	2800      	cmp	r0, #0
 8018508:	d006      	beq.n	8018518 <_vfiprintf_r+0x17c>
 801850a:	2340      	movs	r3, #64	@ 0x40
 801850c:	1b40      	subs	r0, r0, r5
 801850e:	4083      	lsls	r3, r0
 8018510:	6822      	ldr	r2, [r4, #0]
 8018512:	3601      	adds	r6, #1
 8018514:	4313      	orrs	r3, r2
 8018516:	6023      	str	r3, [r4, #0]
 8018518:	7831      	ldrb	r1, [r6, #0]
 801851a:	2206      	movs	r2, #6
 801851c:	482a      	ldr	r0, [pc, #168]	@ (80185c8 <_vfiprintf_r+0x22c>)
 801851e:	1c75      	adds	r5, r6, #1
 8018520:	7621      	strb	r1, [r4, #24]
 8018522:	f7fe fa74 	bl	8016a0e <memchr>
 8018526:	2800      	cmp	r0, #0
 8018528:	d040      	beq.n	80185ac <_vfiprintf_r+0x210>
 801852a:	4b28      	ldr	r3, [pc, #160]	@ (80185cc <_vfiprintf_r+0x230>)
 801852c:	2b00      	cmp	r3, #0
 801852e:	d122      	bne.n	8018576 <_vfiprintf_r+0x1da>
 8018530:	2207      	movs	r2, #7
 8018532:	9b07      	ldr	r3, [sp, #28]
 8018534:	3307      	adds	r3, #7
 8018536:	4393      	bics	r3, r2
 8018538:	3308      	adds	r3, #8
 801853a:	9307      	str	r3, [sp, #28]
 801853c:	6963      	ldr	r3, [r4, #20]
 801853e:	9a04      	ldr	r2, [sp, #16]
 8018540:	189b      	adds	r3, r3, r2
 8018542:	6163      	str	r3, [r4, #20]
 8018544:	e762      	b.n	801840c <_vfiprintf_r+0x70>
 8018546:	4343      	muls	r3, r0
 8018548:	002e      	movs	r6, r5
 801854a:	2101      	movs	r1, #1
 801854c:	189b      	adds	r3, r3, r2
 801854e:	e7a4      	b.n	801849a <_vfiprintf_r+0xfe>
 8018550:	2300      	movs	r3, #0
 8018552:	200a      	movs	r0, #10
 8018554:	0019      	movs	r1, r3
 8018556:	3601      	adds	r6, #1
 8018558:	6063      	str	r3, [r4, #4]
 801855a:	7832      	ldrb	r2, [r6, #0]
 801855c:	1c75      	adds	r5, r6, #1
 801855e:	3a30      	subs	r2, #48	@ 0x30
 8018560:	2a09      	cmp	r2, #9
 8018562:	d903      	bls.n	801856c <_vfiprintf_r+0x1d0>
 8018564:	2b00      	cmp	r3, #0
 8018566:	d0c8      	beq.n	80184fa <_vfiprintf_r+0x15e>
 8018568:	9109      	str	r1, [sp, #36]	@ 0x24
 801856a:	e7c6      	b.n	80184fa <_vfiprintf_r+0x15e>
 801856c:	4341      	muls	r1, r0
 801856e:	002e      	movs	r6, r5
 8018570:	2301      	movs	r3, #1
 8018572:	1889      	adds	r1, r1, r2
 8018574:	e7f1      	b.n	801855a <_vfiprintf_r+0x1be>
 8018576:	aa07      	add	r2, sp, #28
 8018578:	9200      	str	r2, [sp, #0]
 801857a:	0021      	movs	r1, r4
 801857c:	003a      	movs	r2, r7
 801857e:	4b14      	ldr	r3, [pc, #80]	@ (80185d0 <_vfiprintf_r+0x234>)
 8018580:	9803      	ldr	r0, [sp, #12]
 8018582:	f7fd fc5f 	bl	8015e44 <_printf_float>
 8018586:	9004      	str	r0, [sp, #16]
 8018588:	9b04      	ldr	r3, [sp, #16]
 801858a:	3301      	adds	r3, #1
 801858c:	d1d6      	bne.n	801853c <_vfiprintf_r+0x1a0>
 801858e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018590:	07db      	lsls	r3, r3, #31
 8018592:	d405      	bmi.n	80185a0 <_vfiprintf_r+0x204>
 8018594:	89bb      	ldrh	r3, [r7, #12]
 8018596:	059b      	lsls	r3, r3, #22
 8018598:	d402      	bmi.n	80185a0 <_vfiprintf_r+0x204>
 801859a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801859c:	f7fe fa36 	bl	8016a0c <__retarget_lock_release_recursive>
 80185a0:	89bb      	ldrh	r3, [r7, #12]
 80185a2:	065b      	lsls	r3, r3, #25
 80185a4:	d500      	bpl.n	80185a8 <_vfiprintf_r+0x20c>
 80185a6:	e71e      	b.n	80183e6 <_vfiprintf_r+0x4a>
 80185a8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80185aa:	e71e      	b.n	80183ea <_vfiprintf_r+0x4e>
 80185ac:	aa07      	add	r2, sp, #28
 80185ae:	9200      	str	r2, [sp, #0]
 80185b0:	0021      	movs	r1, r4
 80185b2:	003a      	movs	r2, r7
 80185b4:	4b06      	ldr	r3, [pc, #24]	@ (80185d0 <_vfiprintf_r+0x234>)
 80185b6:	9803      	ldr	r0, [sp, #12]
 80185b8:	f7fd fef2 	bl	80163a0 <_printf_i>
 80185bc:	e7e3      	b.n	8018586 <_vfiprintf_r+0x1ea>
 80185be:	46c0      	nop			@ (mov r8, r8)
 80185c0:	0801a588 	.word	0x0801a588
 80185c4:	0801a58e 	.word	0x0801a58e
 80185c8:	0801a592 	.word	0x0801a592
 80185cc:	08015e45 	.word	0x08015e45
 80185d0:	08018377 	.word	0x08018377

080185d4 <__sflush_r>:
 80185d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80185d6:	220c      	movs	r2, #12
 80185d8:	5e8b      	ldrsh	r3, [r1, r2]
 80185da:	0005      	movs	r5, r0
 80185dc:	000c      	movs	r4, r1
 80185de:	071a      	lsls	r2, r3, #28
 80185e0:	d456      	bmi.n	8018690 <__sflush_r+0xbc>
 80185e2:	684a      	ldr	r2, [r1, #4]
 80185e4:	2a00      	cmp	r2, #0
 80185e6:	dc02      	bgt.n	80185ee <__sflush_r+0x1a>
 80185e8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80185ea:	2a00      	cmp	r2, #0
 80185ec:	dd4e      	ble.n	801868c <__sflush_r+0xb8>
 80185ee:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80185f0:	2f00      	cmp	r7, #0
 80185f2:	d04b      	beq.n	801868c <__sflush_r+0xb8>
 80185f4:	2200      	movs	r2, #0
 80185f6:	2080      	movs	r0, #128	@ 0x80
 80185f8:	682e      	ldr	r6, [r5, #0]
 80185fa:	602a      	str	r2, [r5, #0]
 80185fc:	001a      	movs	r2, r3
 80185fe:	0140      	lsls	r0, r0, #5
 8018600:	6a21      	ldr	r1, [r4, #32]
 8018602:	4002      	ands	r2, r0
 8018604:	4203      	tst	r3, r0
 8018606:	d033      	beq.n	8018670 <__sflush_r+0x9c>
 8018608:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801860a:	89a3      	ldrh	r3, [r4, #12]
 801860c:	075b      	lsls	r3, r3, #29
 801860e:	d506      	bpl.n	801861e <__sflush_r+0x4a>
 8018610:	6863      	ldr	r3, [r4, #4]
 8018612:	1ad2      	subs	r2, r2, r3
 8018614:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018616:	2b00      	cmp	r3, #0
 8018618:	d001      	beq.n	801861e <__sflush_r+0x4a>
 801861a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801861c:	1ad2      	subs	r2, r2, r3
 801861e:	2300      	movs	r3, #0
 8018620:	0028      	movs	r0, r5
 8018622:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8018624:	6a21      	ldr	r1, [r4, #32]
 8018626:	47b8      	blx	r7
 8018628:	89a2      	ldrh	r2, [r4, #12]
 801862a:	1c43      	adds	r3, r0, #1
 801862c:	d106      	bne.n	801863c <__sflush_r+0x68>
 801862e:	6829      	ldr	r1, [r5, #0]
 8018630:	291d      	cmp	r1, #29
 8018632:	d846      	bhi.n	80186c2 <__sflush_r+0xee>
 8018634:	4b29      	ldr	r3, [pc, #164]	@ (80186dc <__sflush_r+0x108>)
 8018636:	410b      	asrs	r3, r1
 8018638:	07db      	lsls	r3, r3, #31
 801863a:	d442      	bmi.n	80186c2 <__sflush_r+0xee>
 801863c:	2300      	movs	r3, #0
 801863e:	6063      	str	r3, [r4, #4]
 8018640:	6923      	ldr	r3, [r4, #16]
 8018642:	6023      	str	r3, [r4, #0]
 8018644:	04d2      	lsls	r2, r2, #19
 8018646:	d505      	bpl.n	8018654 <__sflush_r+0x80>
 8018648:	1c43      	adds	r3, r0, #1
 801864a:	d102      	bne.n	8018652 <__sflush_r+0x7e>
 801864c:	682b      	ldr	r3, [r5, #0]
 801864e:	2b00      	cmp	r3, #0
 8018650:	d100      	bne.n	8018654 <__sflush_r+0x80>
 8018652:	6560      	str	r0, [r4, #84]	@ 0x54
 8018654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018656:	602e      	str	r6, [r5, #0]
 8018658:	2900      	cmp	r1, #0
 801865a:	d017      	beq.n	801868c <__sflush_r+0xb8>
 801865c:	0023      	movs	r3, r4
 801865e:	3344      	adds	r3, #68	@ 0x44
 8018660:	4299      	cmp	r1, r3
 8018662:	d002      	beq.n	801866a <__sflush_r+0x96>
 8018664:	0028      	movs	r0, r5
 8018666:	f7ff f869 	bl	801773c <_free_r>
 801866a:	2300      	movs	r3, #0
 801866c:	6363      	str	r3, [r4, #52]	@ 0x34
 801866e:	e00d      	b.n	801868c <__sflush_r+0xb8>
 8018670:	2301      	movs	r3, #1
 8018672:	0028      	movs	r0, r5
 8018674:	47b8      	blx	r7
 8018676:	0002      	movs	r2, r0
 8018678:	1c43      	adds	r3, r0, #1
 801867a:	d1c6      	bne.n	801860a <__sflush_r+0x36>
 801867c:	682b      	ldr	r3, [r5, #0]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d0c3      	beq.n	801860a <__sflush_r+0x36>
 8018682:	2b1d      	cmp	r3, #29
 8018684:	d001      	beq.n	801868a <__sflush_r+0xb6>
 8018686:	2b16      	cmp	r3, #22
 8018688:	d11a      	bne.n	80186c0 <__sflush_r+0xec>
 801868a:	602e      	str	r6, [r5, #0]
 801868c:	2000      	movs	r0, #0
 801868e:	e01e      	b.n	80186ce <__sflush_r+0xfa>
 8018690:	690e      	ldr	r6, [r1, #16]
 8018692:	2e00      	cmp	r6, #0
 8018694:	d0fa      	beq.n	801868c <__sflush_r+0xb8>
 8018696:	680f      	ldr	r7, [r1, #0]
 8018698:	600e      	str	r6, [r1, #0]
 801869a:	1bba      	subs	r2, r7, r6
 801869c:	9201      	str	r2, [sp, #4]
 801869e:	2200      	movs	r2, #0
 80186a0:	079b      	lsls	r3, r3, #30
 80186a2:	d100      	bne.n	80186a6 <__sflush_r+0xd2>
 80186a4:	694a      	ldr	r2, [r1, #20]
 80186a6:	60a2      	str	r2, [r4, #8]
 80186a8:	9b01      	ldr	r3, [sp, #4]
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	ddee      	ble.n	801868c <__sflush_r+0xb8>
 80186ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80186b0:	0032      	movs	r2, r6
 80186b2:	001f      	movs	r7, r3
 80186b4:	0028      	movs	r0, r5
 80186b6:	9b01      	ldr	r3, [sp, #4]
 80186b8:	6a21      	ldr	r1, [r4, #32]
 80186ba:	47b8      	blx	r7
 80186bc:	2800      	cmp	r0, #0
 80186be:	dc07      	bgt.n	80186d0 <__sflush_r+0xfc>
 80186c0:	89a2      	ldrh	r2, [r4, #12]
 80186c2:	2340      	movs	r3, #64	@ 0x40
 80186c4:	2001      	movs	r0, #1
 80186c6:	4313      	orrs	r3, r2
 80186c8:	b21b      	sxth	r3, r3
 80186ca:	81a3      	strh	r3, [r4, #12]
 80186cc:	4240      	negs	r0, r0
 80186ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80186d0:	9b01      	ldr	r3, [sp, #4]
 80186d2:	1836      	adds	r6, r6, r0
 80186d4:	1a1b      	subs	r3, r3, r0
 80186d6:	9301      	str	r3, [sp, #4]
 80186d8:	e7e6      	b.n	80186a8 <__sflush_r+0xd4>
 80186da:	46c0      	nop			@ (mov r8, r8)
 80186dc:	dfbffffe 	.word	0xdfbffffe

080186e0 <_fflush_r>:
 80186e0:	690b      	ldr	r3, [r1, #16]
 80186e2:	b570      	push	{r4, r5, r6, lr}
 80186e4:	0005      	movs	r5, r0
 80186e6:	000c      	movs	r4, r1
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d102      	bne.n	80186f2 <_fflush_r+0x12>
 80186ec:	2500      	movs	r5, #0
 80186ee:	0028      	movs	r0, r5
 80186f0:	bd70      	pop	{r4, r5, r6, pc}
 80186f2:	2800      	cmp	r0, #0
 80186f4:	d004      	beq.n	8018700 <_fflush_r+0x20>
 80186f6:	6a03      	ldr	r3, [r0, #32]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d101      	bne.n	8018700 <_fflush_r+0x20>
 80186fc:	f7fd ffee 	bl	80166dc <__sinit>
 8018700:	220c      	movs	r2, #12
 8018702:	5ea3      	ldrsh	r3, [r4, r2]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d0f1      	beq.n	80186ec <_fflush_r+0xc>
 8018708:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801870a:	07d2      	lsls	r2, r2, #31
 801870c:	d404      	bmi.n	8018718 <_fflush_r+0x38>
 801870e:	059b      	lsls	r3, r3, #22
 8018710:	d402      	bmi.n	8018718 <_fflush_r+0x38>
 8018712:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018714:	f7fe f979 	bl	8016a0a <__retarget_lock_acquire_recursive>
 8018718:	0028      	movs	r0, r5
 801871a:	0021      	movs	r1, r4
 801871c:	f7ff ff5a 	bl	80185d4 <__sflush_r>
 8018720:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018722:	0005      	movs	r5, r0
 8018724:	07db      	lsls	r3, r3, #31
 8018726:	d4e2      	bmi.n	80186ee <_fflush_r+0xe>
 8018728:	89a3      	ldrh	r3, [r4, #12]
 801872a:	059b      	lsls	r3, r3, #22
 801872c:	d4df      	bmi.n	80186ee <_fflush_r+0xe>
 801872e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018730:	f7fe f96c 	bl	8016a0c <__retarget_lock_release_recursive>
 8018734:	e7db      	b.n	80186ee <_fflush_r+0xe>

08018736 <__swbuf_r>:
 8018736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018738:	0006      	movs	r6, r0
 801873a:	000d      	movs	r5, r1
 801873c:	0014      	movs	r4, r2
 801873e:	2800      	cmp	r0, #0
 8018740:	d004      	beq.n	801874c <__swbuf_r+0x16>
 8018742:	6a03      	ldr	r3, [r0, #32]
 8018744:	2b00      	cmp	r3, #0
 8018746:	d101      	bne.n	801874c <__swbuf_r+0x16>
 8018748:	f7fd ffc8 	bl	80166dc <__sinit>
 801874c:	69a3      	ldr	r3, [r4, #24]
 801874e:	60a3      	str	r3, [r4, #8]
 8018750:	89a3      	ldrh	r3, [r4, #12]
 8018752:	071b      	lsls	r3, r3, #28
 8018754:	d502      	bpl.n	801875c <__swbuf_r+0x26>
 8018756:	6923      	ldr	r3, [r4, #16]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d109      	bne.n	8018770 <__swbuf_r+0x3a>
 801875c:	0021      	movs	r1, r4
 801875e:	0030      	movs	r0, r6
 8018760:	f000 f82c 	bl	80187bc <__swsetup_r>
 8018764:	2800      	cmp	r0, #0
 8018766:	d003      	beq.n	8018770 <__swbuf_r+0x3a>
 8018768:	2501      	movs	r5, #1
 801876a:	426d      	negs	r5, r5
 801876c:	0028      	movs	r0, r5
 801876e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018770:	6923      	ldr	r3, [r4, #16]
 8018772:	6820      	ldr	r0, [r4, #0]
 8018774:	b2ef      	uxtb	r7, r5
 8018776:	1ac0      	subs	r0, r0, r3
 8018778:	6963      	ldr	r3, [r4, #20]
 801877a:	b2ed      	uxtb	r5, r5
 801877c:	4283      	cmp	r3, r0
 801877e:	dc05      	bgt.n	801878c <__swbuf_r+0x56>
 8018780:	0021      	movs	r1, r4
 8018782:	0030      	movs	r0, r6
 8018784:	f7ff ffac 	bl	80186e0 <_fflush_r>
 8018788:	2800      	cmp	r0, #0
 801878a:	d1ed      	bne.n	8018768 <__swbuf_r+0x32>
 801878c:	68a3      	ldr	r3, [r4, #8]
 801878e:	3001      	adds	r0, #1
 8018790:	3b01      	subs	r3, #1
 8018792:	60a3      	str	r3, [r4, #8]
 8018794:	6823      	ldr	r3, [r4, #0]
 8018796:	1c5a      	adds	r2, r3, #1
 8018798:	6022      	str	r2, [r4, #0]
 801879a:	701f      	strb	r7, [r3, #0]
 801879c:	6963      	ldr	r3, [r4, #20]
 801879e:	4283      	cmp	r3, r0
 80187a0:	d004      	beq.n	80187ac <__swbuf_r+0x76>
 80187a2:	89a3      	ldrh	r3, [r4, #12]
 80187a4:	07db      	lsls	r3, r3, #31
 80187a6:	d5e1      	bpl.n	801876c <__swbuf_r+0x36>
 80187a8:	2d0a      	cmp	r5, #10
 80187aa:	d1df      	bne.n	801876c <__swbuf_r+0x36>
 80187ac:	0021      	movs	r1, r4
 80187ae:	0030      	movs	r0, r6
 80187b0:	f7ff ff96 	bl	80186e0 <_fflush_r>
 80187b4:	2800      	cmp	r0, #0
 80187b6:	d0d9      	beq.n	801876c <__swbuf_r+0x36>
 80187b8:	e7d6      	b.n	8018768 <__swbuf_r+0x32>
	...

080187bc <__swsetup_r>:
 80187bc:	4b2d      	ldr	r3, [pc, #180]	@ (8018874 <__swsetup_r+0xb8>)
 80187be:	b570      	push	{r4, r5, r6, lr}
 80187c0:	0005      	movs	r5, r0
 80187c2:	6818      	ldr	r0, [r3, #0]
 80187c4:	000c      	movs	r4, r1
 80187c6:	2800      	cmp	r0, #0
 80187c8:	d004      	beq.n	80187d4 <__swsetup_r+0x18>
 80187ca:	6a03      	ldr	r3, [r0, #32]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d101      	bne.n	80187d4 <__swsetup_r+0x18>
 80187d0:	f7fd ff84 	bl	80166dc <__sinit>
 80187d4:	230c      	movs	r3, #12
 80187d6:	5ee2      	ldrsh	r2, [r4, r3]
 80187d8:	0713      	lsls	r3, r2, #28
 80187da:	d423      	bmi.n	8018824 <__swsetup_r+0x68>
 80187dc:	06d3      	lsls	r3, r2, #27
 80187de:	d407      	bmi.n	80187f0 <__swsetup_r+0x34>
 80187e0:	2309      	movs	r3, #9
 80187e2:	602b      	str	r3, [r5, #0]
 80187e4:	2340      	movs	r3, #64	@ 0x40
 80187e6:	2001      	movs	r0, #1
 80187e8:	4313      	orrs	r3, r2
 80187ea:	81a3      	strh	r3, [r4, #12]
 80187ec:	4240      	negs	r0, r0
 80187ee:	e03a      	b.n	8018866 <__swsetup_r+0xaa>
 80187f0:	0752      	lsls	r2, r2, #29
 80187f2:	d513      	bpl.n	801881c <__swsetup_r+0x60>
 80187f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80187f6:	2900      	cmp	r1, #0
 80187f8:	d008      	beq.n	801880c <__swsetup_r+0x50>
 80187fa:	0023      	movs	r3, r4
 80187fc:	3344      	adds	r3, #68	@ 0x44
 80187fe:	4299      	cmp	r1, r3
 8018800:	d002      	beq.n	8018808 <__swsetup_r+0x4c>
 8018802:	0028      	movs	r0, r5
 8018804:	f7fe ff9a 	bl	801773c <_free_r>
 8018808:	2300      	movs	r3, #0
 801880a:	6363      	str	r3, [r4, #52]	@ 0x34
 801880c:	2224      	movs	r2, #36	@ 0x24
 801880e:	89a3      	ldrh	r3, [r4, #12]
 8018810:	4393      	bics	r3, r2
 8018812:	81a3      	strh	r3, [r4, #12]
 8018814:	2300      	movs	r3, #0
 8018816:	6063      	str	r3, [r4, #4]
 8018818:	6923      	ldr	r3, [r4, #16]
 801881a:	6023      	str	r3, [r4, #0]
 801881c:	2308      	movs	r3, #8
 801881e:	89a2      	ldrh	r2, [r4, #12]
 8018820:	4313      	orrs	r3, r2
 8018822:	81a3      	strh	r3, [r4, #12]
 8018824:	6923      	ldr	r3, [r4, #16]
 8018826:	2b00      	cmp	r3, #0
 8018828:	d10b      	bne.n	8018842 <__swsetup_r+0x86>
 801882a:	21a0      	movs	r1, #160	@ 0xa0
 801882c:	2280      	movs	r2, #128	@ 0x80
 801882e:	89a3      	ldrh	r3, [r4, #12]
 8018830:	0089      	lsls	r1, r1, #2
 8018832:	0092      	lsls	r2, r2, #2
 8018834:	400b      	ands	r3, r1
 8018836:	4293      	cmp	r3, r2
 8018838:	d003      	beq.n	8018842 <__swsetup_r+0x86>
 801883a:	0021      	movs	r1, r4
 801883c:	0028      	movs	r0, r5
 801883e:	f000 f915 	bl	8018a6c <__smakebuf_r>
 8018842:	230c      	movs	r3, #12
 8018844:	5ee2      	ldrsh	r2, [r4, r3]
 8018846:	2101      	movs	r1, #1
 8018848:	0013      	movs	r3, r2
 801884a:	400b      	ands	r3, r1
 801884c:	420a      	tst	r2, r1
 801884e:	d00b      	beq.n	8018868 <__swsetup_r+0xac>
 8018850:	2300      	movs	r3, #0
 8018852:	60a3      	str	r3, [r4, #8]
 8018854:	6963      	ldr	r3, [r4, #20]
 8018856:	425b      	negs	r3, r3
 8018858:	61a3      	str	r3, [r4, #24]
 801885a:	2000      	movs	r0, #0
 801885c:	6923      	ldr	r3, [r4, #16]
 801885e:	4283      	cmp	r3, r0
 8018860:	d101      	bne.n	8018866 <__swsetup_r+0xaa>
 8018862:	0613      	lsls	r3, r2, #24
 8018864:	d4be      	bmi.n	80187e4 <__swsetup_r+0x28>
 8018866:	bd70      	pop	{r4, r5, r6, pc}
 8018868:	0791      	lsls	r1, r2, #30
 801886a:	d400      	bmi.n	801886e <__swsetup_r+0xb2>
 801886c:	6963      	ldr	r3, [r4, #20]
 801886e:	60a3      	str	r3, [r4, #8]
 8018870:	e7f3      	b.n	801885a <__swsetup_r+0x9e>
 8018872:	46c0      	nop			@ (mov r8, r8)
 8018874:	200002d4 	.word	0x200002d4

08018878 <memmove>:
 8018878:	b510      	push	{r4, lr}
 801887a:	4288      	cmp	r0, r1
 801887c:	d806      	bhi.n	801888c <memmove+0x14>
 801887e:	2300      	movs	r3, #0
 8018880:	429a      	cmp	r2, r3
 8018882:	d008      	beq.n	8018896 <memmove+0x1e>
 8018884:	5ccc      	ldrb	r4, [r1, r3]
 8018886:	54c4      	strb	r4, [r0, r3]
 8018888:	3301      	adds	r3, #1
 801888a:	e7f9      	b.n	8018880 <memmove+0x8>
 801888c:	188b      	adds	r3, r1, r2
 801888e:	4298      	cmp	r0, r3
 8018890:	d2f5      	bcs.n	801887e <memmove+0x6>
 8018892:	3a01      	subs	r2, #1
 8018894:	d200      	bcs.n	8018898 <memmove+0x20>
 8018896:	bd10      	pop	{r4, pc}
 8018898:	5c8b      	ldrb	r3, [r1, r2]
 801889a:	5483      	strb	r3, [r0, r2]
 801889c:	e7f9      	b.n	8018892 <memmove+0x1a>
	...

080188a0 <_sbrk_r>:
 80188a0:	2300      	movs	r3, #0
 80188a2:	b570      	push	{r4, r5, r6, lr}
 80188a4:	4d06      	ldr	r5, [pc, #24]	@ (80188c0 <_sbrk_r+0x20>)
 80188a6:	0004      	movs	r4, r0
 80188a8:	0008      	movs	r0, r1
 80188aa:	602b      	str	r3, [r5, #0]
 80188ac:	f7ef fcea 	bl	8008284 <_sbrk>
 80188b0:	1c43      	adds	r3, r0, #1
 80188b2:	d103      	bne.n	80188bc <_sbrk_r+0x1c>
 80188b4:	682b      	ldr	r3, [r5, #0]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d000      	beq.n	80188bc <_sbrk_r+0x1c>
 80188ba:	6023      	str	r3, [r4, #0]
 80188bc:	bd70      	pop	{r4, r5, r6, pc}
 80188be:	46c0      	nop			@ (mov r8, r8)
 80188c0:	200043a0 	.word	0x200043a0

080188c4 <__assert_func>:
 80188c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80188c6:	0014      	movs	r4, r2
 80188c8:	001a      	movs	r2, r3
 80188ca:	4b09      	ldr	r3, [pc, #36]	@ (80188f0 <__assert_func+0x2c>)
 80188cc:	0005      	movs	r5, r0
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	000e      	movs	r6, r1
 80188d2:	68d8      	ldr	r0, [r3, #12]
 80188d4:	4b07      	ldr	r3, [pc, #28]	@ (80188f4 <__assert_func+0x30>)
 80188d6:	2c00      	cmp	r4, #0
 80188d8:	d101      	bne.n	80188de <__assert_func+0x1a>
 80188da:	4b07      	ldr	r3, [pc, #28]	@ (80188f8 <__assert_func+0x34>)
 80188dc:	001c      	movs	r4, r3
 80188de:	4907      	ldr	r1, [pc, #28]	@ (80188fc <__assert_func+0x38>)
 80188e0:	9301      	str	r3, [sp, #4]
 80188e2:	9402      	str	r4, [sp, #8]
 80188e4:	002b      	movs	r3, r5
 80188e6:	9600      	str	r6, [sp, #0]
 80188e8:	f000 f886 	bl	80189f8 <fiprintf>
 80188ec:	f000 f924 	bl	8018b38 <abort>
 80188f0:	200002d4 	.word	0x200002d4
 80188f4:	0801a5a3 	.word	0x0801a5a3
 80188f8:	0801a5de 	.word	0x0801a5de
 80188fc:	0801a5b0 	.word	0x0801a5b0

08018900 <_calloc_r>:
 8018900:	b570      	push	{r4, r5, r6, lr}
 8018902:	0c0b      	lsrs	r3, r1, #16
 8018904:	0c15      	lsrs	r5, r2, #16
 8018906:	2b00      	cmp	r3, #0
 8018908:	d11e      	bne.n	8018948 <_calloc_r+0x48>
 801890a:	2d00      	cmp	r5, #0
 801890c:	d10c      	bne.n	8018928 <_calloc_r+0x28>
 801890e:	b289      	uxth	r1, r1
 8018910:	b294      	uxth	r4, r2
 8018912:	434c      	muls	r4, r1
 8018914:	0021      	movs	r1, r4
 8018916:	f7fe ff87 	bl	8017828 <_malloc_r>
 801891a:	1e05      	subs	r5, r0, #0
 801891c:	d01a      	beq.n	8018954 <_calloc_r+0x54>
 801891e:	0022      	movs	r2, r4
 8018920:	2100      	movs	r1, #0
 8018922:	f7fd ffc3 	bl	80168ac <memset>
 8018926:	e016      	b.n	8018956 <_calloc_r+0x56>
 8018928:	1c2b      	adds	r3, r5, #0
 801892a:	1c0c      	adds	r4, r1, #0
 801892c:	b289      	uxth	r1, r1
 801892e:	b292      	uxth	r2, r2
 8018930:	434a      	muls	r2, r1
 8018932:	b29b      	uxth	r3, r3
 8018934:	b2a1      	uxth	r1, r4
 8018936:	4359      	muls	r1, r3
 8018938:	0c14      	lsrs	r4, r2, #16
 801893a:	190c      	adds	r4, r1, r4
 801893c:	0c23      	lsrs	r3, r4, #16
 801893e:	d107      	bne.n	8018950 <_calloc_r+0x50>
 8018940:	0424      	lsls	r4, r4, #16
 8018942:	b292      	uxth	r2, r2
 8018944:	4314      	orrs	r4, r2
 8018946:	e7e5      	b.n	8018914 <_calloc_r+0x14>
 8018948:	2d00      	cmp	r5, #0
 801894a:	d101      	bne.n	8018950 <_calloc_r+0x50>
 801894c:	1c14      	adds	r4, r2, #0
 801894e:	e7ed      	b.n	801892c <_calloc_r+0x2c>
 8018950:	230c      	movs	r3, #12
 8018952:	6003      	str	r3, [r0, #0]
 8018954:	2500      	movs	r5, #0
 8018956:	0028      	movs	r0, r5
 8018958:	bd70      	pop	{r4, r5, r6, pc}

0801895a <__ascii_mbtowc>:
 801895a:	b082      	sub	sp, #8
 801895c:	2900      	cmp	r1, #0
 801895e:	d100      	bne.n	8018962 <__ascii_mbtowc+0x8>
 8018960:	a901      	add	r1, sp, #4
 8018962:	1e10      	subs	r0, r2, #0
 8018964:	d006      	beq.n	8018974 <__ascii_mbtowc+0x1a>
 8018966:	2b00      	cmp	r3, #0
 8018968:	d006      	beq.n	8018978 <__ascii_mbtowc+0x1e>
 801896a:	7813      	ldrb	r3, [r2, #0]
 801896c:	600b      	str	r3, [r1, #0]
 801896e:	7810      	ldrb	r0, [r2, #0]
 8018970:	1e43      	subs	r3, r0, #1
 8018972:	4198      	sbcs	r0, r3
 8018974:	b002      	add	sp, #8
 8018976:	4770      	bx	lr
 8018978:	2002      	movs	r0, #2
 801897a:	4240      	negs	r0, r0
 801897c:	e7fa      	b.n	8018974 <__ascii_mbtowc+0x1a>

0801897e <_realloc_r>:
 801897e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018980:	0006      	movs	r6, r0
 8018982:	000c      	movs	r4, r1
 8018984:	0015      	movs	r5, r2
 8018986:	2900      	cmp	r1, #0
 8018988:	d105      	bne.n	8018996 <_realloc_r+0x18>
 801898a:	0011      	movs	r1, r2
 801898c:	f7fe ff4c 	bl	8017828 <_malloc_r>
 8018990:	0004      	movs	r4, r0
 8018992:	0020      	movs	r0, r4
 8018994:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018996:	2a00      	cmp	r2, #0
 8018998:	d103      	bne.n	80189a2 <_realloc_r+0x24>
 801899a:	f7fe fecf 	bl	801773c <_free_r>
 801899e:	2400      	movs	r4, #0
 80189a0:	e7f7      	b.n	8018992 <_realloc_r+0x14>
 80189a2:	f000 f8d0 	bl	8018b46 <_malloc_usable_size_r>
 80189a6:	0007      	movs	r7, r0
 80189a8:	4285      	cmp	r5, r0
 80189aa:	d802      	bhi.n	80189b2 <_realloc_r+0x34>
 80189ac:	0843      	lsrs	r3, r0, #1
 80189ae:	42ab      	cmp	r3, r5
 80189b0:	d3ef      	bcc.n	8018992 <_realloc_r+0x14>
 80189b2:	0029      	movs	r1, r5
 80189b4:	0030      	movs	r0, r6
 80189b6:	f7fe ff37 	bl	8017828 <_malloc_r>
 80189ba:	9001      	str	r0, [sp, #4]
 80189bc:	2800      	cmp	r0, #0
 80189be:	d0ee      	beq.n	801899e <_realloc_r+0x20>
 80189c0:	002a      	movs	r2, r5
 80189c2:	42bd      	cmp	r5, r7
 80189c4:	d900      	bls.n	80189c8 <_realloc_r+0x4a>
 80189c6:	003a      	movs	r2, r7
 80189c8:	0021      	movs	r1, r4
 80189ca:	9801      	ldr	r0, [sp, #4]
 80189cc:	f7fe f82a 	bl	8016a24 <memcpy>
 80189d0:	0021      	movs	r1, r4
 80189d2:	0030      	movs	r0, r6
 80189d4:	f7fe feb2 	bl	801773c <_free_r>
 80189d8:	9c01      	ldr	r4, [sp, #4]
 80189da:	e7da      	b.n	8018992 <_realloc_r+0x14>

080189dc <__ascii_wctomb>:
 80189dc:	0003      	movs	r3, r0
 80189de:	1e08      	subs	r0, r1, #0
 80189e0:	d005      	beq.n	80189ee <__ascii_wctomb+0x12>
 80189e2:	2aff      	cmp	r2, #255	@ 0xff
 80189e4:	d904      	bls.n	80189f0 <__ascii_wctomb+0x14>
 80189e6:	228a      	movs	r2, #138	@ 0x8a
 80189e8:	2001      	movs	r0, #1
 80189ea:	601a      	str	r2, [r3, #0]
 80189ec:	4240      	negs	r0, r0
 80189ee:	4770      	bx	lr
 80189f0:	2001      	movs	r0, #1
 80189f2:	700a      	strb	r2, [r1, #0]
 80189f4:	e7fb      	b.n	80189ee <__ascii_wctomb+0x12>
	...

080189f8 <fiprintf>:
 80189f8:	b40e      	push	{r1, r2, r3}
 80189fa:	b517      	push	{r0, r1, r2, r4, lr}
 80189fc:	4c05      	ldr	r4, [pc, #20]	@ (8018a14 <fiprintf+0x1c>)
 80189fe:	ab05      	add	r3, sp, #20
 8018a00:	cb04      	ldmia	r3!, {r2}
 8018a02:	0001      	movs	r1, r0
 8018a04:	6820      	ldr	r0, [r4, #0]
 8018a06:	9301      	str	r3, [sp, #4]
 8018a08:	f7ff fcc8 	bl	801839c <_vfiprintf_r>
 8018a0c:	bc1e      	pop	{r1, r2, r3, r4}
 8018a0e:	bc08      	pop	{r3}
 8018a10:	b003      	add	sp, #12
 8018a12:	4718      	bx	r3
 8018a14:	200002d4 	.word	0x200002d4

08018a18 <__swhatbuf_r>:
 8018a18:	b570      	push	{r4, r5, r6, lr}
 8018a1a:	000e      	movs	r6, r1
 8018a1c:	001d      	movs	r5, r3
 8018a1e:	230e      	movs	r3, #14
 8018a20:	5ec9      	ldrsh	r1, [r1, r3]
 8018a22:	0014      	movs	r4, r2
 8018a24:	b096      	sub	sp, #88	@ 0x58
 8018a26:	2900      	cmp	r1, #0
 8018a28:	da0c      	bge.n	8018a44 <__swhatbuf_r+0x2c>
 8018a2a:	89b2      	ldrh	r2, [r6, #12]
 8018a2c:	2380      	movs	r3, #128	@ 0x80
 8018a2e:	0011      	movs	r1, r2
 8018a30:	4019      	ands	r1, r3
 8018a32:	421a      	tst	r2, r3
 8018a34:	d114      	bne.n	8018a60 <__swhatbuf_r+0x48>
 8018a36:	2380      	movs	r3, #128	@ 0x80
 8018a38:	00db      	lsls	r3, r3, #3
 8018a3a:	2000      	movs	r0, #0
 8018a3c:	6029      	str	r1, [r5, #0]
 8018a3e:	6023      	str	r3, [r4, #0]
 8018a40:	b016      	add	sp, #88	@ 0x58
 8018a42:	bd70      	pop	{r4, r5, r6, pc}
 8018a44:	466a      	mov	r2, sp
 8018a46:	f000 f853 	bl	8018af0 <_fstat_r>
 8018a4a:	2800      	cmp	r0, #0
 8018a4c:	dbed      	blt.n	8018a2a <__swhatbuf_r+0x12>
 8018a4e:	23f0      	movs	r3, #240	@ 0xf0
 8018a50:	9901      	ldr	r1, [sp, #4]
 8018a52:	021b      	lsls	r3, r3, #8
 8018a54:	4019      	ands	r1, r3
 8018a56:	4b04      	ldr	r3, [pc, #16]	@ (8018a68 <__swhatbuf_r+0x50>)
 8018a58:	18c9      	adds	r1, r1, r3
 8018a5a:	424b      	negs	r3, r1
 8018a5c:	4159      	adcs	r1, r3
 8018a5e:	e7ea      	b.n	8018a36 <__swhatbuf_r+0x1e>
 8018a60:	2100      	movs	r1, #0
 8018a62:	2340      	movs	r3, #64	@ 0x40
 8018a64:	e7e9      	b.n	8018a3a <__swhatbuf_r+0x22>
 8018a66:	46c0      	nop			@ (mov r8, r8)
 8018a68:	ffffe000 	.word	0xffffe000

08018a6c <__smakebuf_r>:
 8018a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a6e:	2602      	movs	r6, #2
 8018a70:	898b      	ldrh	r3, [r1, #12]
 8018a72:	0005      	movs	r5, r0
 8018a74:	000c      	movs	r4, r1
 8018a76:	b085      	sub	sp, #20
 8018a78:	4233      	tst	r3, r6
 8018a7a:	d007      	beq.n	8018a8c <__smakebuf_r+0x20>
 8018a7c:	0023      	movs	r3, r4
 8018a7e:	3347      	adds	r3, #71	@ 0x47
 8018a80:	6023      	str	r3, [r4, #0]
 8018a82:	6123      	str	r3, [r4, #16]
 8018a84:	2301      	movs	r3, #1
 8018a86:	6163      	str	r3, [r4, #20]
 8018a88:	b005      	add	sp, #20
 8018a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a8c:	ab03      	add	r3, sp, #12
 8018a8e:	aa02      	add	r2, sp, #8
 8018a90:	f7ff ffc2 	bl	8018a18 <__swhatbuf_r>
 8018a94:	9f02      	ldr	r7, [sp, #8]
 8018a96:	9001      	str	r0, [sp, #4]
 8018a98:	0039      	movs	r1, r7
 8018a9a:	0028      	movs	r0, r5
 8018a9c:	f7fe fec4 	bl	8017828 <_malloc_r>
 8018aa0:	2800      	cmp	r0, #0
 8018aa2:	d108      	bne.n	8018ab6 <__smakebuf_r+0x4a>
 8018aa4:	220c      	movs	r2, #12
 8018aa6:	5ea3      	ldrsh	r3, [r4, r2]
 8018aa8:	059a      	lsls	r2, r3, #22
 8018aaa:	d4ed      	bmi.n	8018a88 <__smakebuf_r+0x1c>
 8018aac:	2203      	movs	r2, #3
 8018aae:	4393      	bics	r3, r2
 8018ab0:	431e      	orrs	r6, r3
 8018ab2:	81a6      	strh	r6, [r4, #12]
 8018ab4:	e7e2      	b.n	8018a7c <__smakebuf_r+0x10>
 8018ab6:	2380      	movs	r3, #128	@ 0x80
 8018ab8:	89a2      	ldrh	r2, [r4, #12]
 8018aba:	6020      	str	r0, [r4, #0]
 8018abc:	4313      	orrs	r3, r2
 8018abe:	81a3      	strh	r3, [r4, #12]
 8018ac0:	9b03      	ldr	r3, [sp, #12]
 8018ac2:	6120      	str	r0, [r4, #16]
 8018ac4:	6167      	str	r7, [r4, #20]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d00c      	beq.n	8018ae4 <__smakebuf_r+0x78>
 8018aca:	0028      	movs	r0, r5
 8018acc:	230e      	movs	r3, #14
 8018ace:	5ee1      	ldrsh	r1, [r4, r3]
 8018ad0:	f000 f820 	bl	8018b14 <_isatty_r>
 8018ad4:	2800      	cmp	r0, #0
 8018ad6:	d005      	beq.n	8018ae4 <__smakebuf_r+0x78>
 8018ad8:	2303      	movs	r3, #3
 8018ada:	89a2      	ldrh	r2, [r4, #12]
 8018adc:	439a      	bics	r2, r3
 8018ade:	3b02      	subs	r3, #2
 8018ae0:	4313      	orrs	r3, r2
 8018ae2:	81a3      	strh	r3, [r4, #12]
 8018ae4:	89a3      	ldrh	r3, [r4, #12]
 8018ae6:	9a01      	ldr	r2, [sp, #4]
 8018ae8:	4313      	orrs	r3, r2
 8018aea:	81a3      	strh	r3, [r4, #12]
 8018aec:	e7cc      	b.n	8018a88 <__smakebuf_r+0x1c>
	...

08018af0 <_fstat_r>:
 8018af0:	2300      	movs	r3, #0
 8018af2:	b570      	push	{r4, r5, r6, lr}
 8018af4:	4d06      	ldr	r5, [pc, #24]	@ (8018b10 <_fstat_r+0x20>)
 8018af6:	0004      	movs	r4, r0
 8018af8:	0008      	movs	r0, r1
 8018afa:	0011      	movs	r1, r2
 8018afc:	602b      	str	r3, [r5, #0]
 8018afe:	f7ef fb9f 	bl	8008240 <_fstat>
 8018b02:	1c43      	adds	r3, r0, #1
 8018b04:	d103      	bne.n	8018b0e <_fstat_r+0x1e>
 8018b06:	682b      	ldr	r3, [r5, #0]
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d000      	beq.n	8018b0e <_fstat_r+0x1e>
 8018b0c:	6023      	str	r3, [r4, #0]
 8018b0e:	bd70      	pop	{r4, r5, r6, pc}
 8018b10:	200043a0 	.word	0x200043a0

08018b14 <_isatty_r>:
 8018b14:	2300      	movs	r3, #0
 8018b16:	b570      	push	{r4, r5, r6, lr}
 8018b18:	4d06      	ldr	r5, [pc, #24]	@ (8018b34 <_isatty_r+0x20>)
 8018b1a:	0004      	movs	r4, r0
 8018b1c:	0008      	movs	r0, r1
 8018b1e:	602b      	str	r3, [r5, #0]
 8018b20:	f7ef fb9c 	bl	800825c <_isatty>
 8018b24:	1c43      	adds	r3, r0, #1
 8018b26:	d103      	bne.n	8018b30 <_isatty_r+0x1c>
 8018b28:	682b      	ldr	r3, [r5, #0]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d000      	beq.n	8018b30 <_isatty_r+0x1c>
 8018b2e:	6023      	str	r3, [r4, #0]
 8018b30:	bd70      	pop	{r4, r5, r6, pc}
 8018b32:	46c0      	nop			@ (mov r8, r8)
 8018b34:	200043a0 	.word	0x200043a0

08018b38 <abort>:
 8018b38:	2006      	movs	r0, #6
 8018b3a:	b510      	push	{r4, lr}
 8018b3c:	f000 f834 	bl	8018ba8 <raise>
 8018b40:	2001      	movs	r0, #1
 8018b42:	f7ef fb49 	bl	80081d8 <_exit>

08018b46 <_malloc_usable_size_r>:
 8018b46:	1f0b      	subs	r3, r1, #4
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	1f18      	subs	r0, r3, #4
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	da01      	bge.n	8018b54 <_malloc_usable_size_r+0xe>
 8018b50:	580b      	ldr	r3, [r1, r0]
 8018b52:	18c0      	adds	r0, r0, r3
 8018b54:	4770      	bx	lr

08018b56 <_raise_r>:
 8018b56:	b570      	push	{r4, r5, r6, lr}
 8018b58:	0004      	movs	r4, r0
 8018b5a:	000d      	movs	r5, r1
 8018b5c:	291f      	cmp	r1, #31
 8018b5e:	d904      	bls.n	8018b6a <_raise_r+0x14>
 8018b60:	2316      	movs	r3, #22
 8018b62:	6003      	str	r3, [r0, #0]
 8018b64:	2001      	movs	r0, #1
 8018b66:	4240      	negs	r0, r0
 8018b68:	bd70      	pop	{r4, r5, r6, pc}
 8018b6a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d004      	beq.n	8018b7a <_raise_r+0x24>
 8018b70:	008a      	lsls	r2, r1, #2
 8018b72:	189b      	adds	r3, r3, r2
 8018b74:	681a      	ldr	r2, [r3, #0]
 8018b76:	2a00      	cmp	r2, #0
 8018b78:	d108      	bne.n	8018b8c <_raise_r+0x36>
 8018b7a:	0020      	movs	r0, r4
 8018b7c:	f000 f830 	bl	8018be0 <_getpid_r>
 8018b80:	002a      	movs	r2, r5
 8018b82:	0001      	movs	r1, r0
 8018b84:	0020      	movs	r0, r4
 8018b86:	f000 f819 	bl	8018bbc <_kill_r>
 8018b8a:	e7ed      	b.n	8018b68 <_raise_r+0x12>
 8018b8c:	2a01      	cmp	r2, #1
 8018b8e:	d009      	beq.n	8018ba4 <_raise_r+0x4e>
 8018b90:	1c51      	adds	r1, r2, #1
 8018b92:	d103      	bne.n	8018b9c <_raise_r+0x46>
 8018b94:	2316      	movs	r3, #22
 8018b96:	6003      	str	r3, [r0, #0]
 8018b98:	2001      	movs	r0, #1
 8018b9a:	e7e5      	b.n	8018b68 <_raise_r+0x12>
 8018b9c:	2100      	movs	r1, #0
 8018b9e:	0028      	movs	r0, r5
 8018ba0:	6019      	str	r1, [r3, #0]
 8018ba2:	4790      	blx	r2
 8018ba4:	2000      	movs	r0, #0
 8018ba6:	e7df      	b.n	8018b68 <_raise_r+0x12>

08018ba8 <raise>:
 8018ba8:	b510      	push	{r4, lr}
 8018baa:	4b03      	ldr	r3, [pc, #12]	@ (8018bb8 <raise+0x10>)
 8018bac:	0001      	movs	r1, r0
 8018bae:	6818      	ldr	r0, [r3, #0]
 8018bb0:	f7ff ffd1 	bl	8018b56 <_raise_r>
 8018bb4:	bd10      	pop	{r4, pc}
 8018bb6:	46c0      	nop			@ (mov r8, r8)
 8018bb8:	200002d4 	.word	0x200002d4

08018bbc <_kill_r>:
 8018bbc:	2300      	movs	r3, #0
 8018bbe:	b570      	push	{r4, r5, r6, lr}
 8018bc0:	4d06      	ldr	r5, [pc, #24]	@ (8018bdc <_kill_r+0x20>)
 8018bc2:	0004      	movs	r4, r0
 8018bc4:	0008      	movs	r0, r1
 8018bc6:	0011      	movs	r1, r2
 8018bc8:	602b      	str	r3, [r5, #0]
 8018bca:	f7ef faf5 	bl	80081b8 <_kill>
 8018bce:	1c43      	adds	r3, r0, #1
 8018bd0:	d103      	bne.n	8018bda <_kill_r+0x1e>
 8018bd2:	682b      	ldr	r3, [r5, #0]
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d000      	beq.n	8018bda <_kill_r+0x1e>
 8018bd8:	6023      	str	r3, [r4, #0]
 8018bda:	bd70      	pop	{r4, r5, r6, pc}
 8018bdc:	200043a0 	.word	0x200043a0

08018be0 <_getpid_r>:
 8018be0:	b510      	push	{r4, lr}
 8018be2:	f7ef fae3 	bl	80081ac <_getpid>
 8018be6:	bd10      	pop	{r4, pc}

08018be8 <log10>:
 8018be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018bea:	0004      	movs	r4, r0
 8018bec:	000d      	movs	r5, r1
 8018bee:	f000 fa0b 	bl	8019008 <__ieee754_log10>
 8018bf2:	0022      	movs	r2, r4
 8018bf4:	0006      	movs	r6, r0
 8018bf6:	000f      	movs	r7, r1
 8018bf8:	002b      	movs	r3, r5
 8018bfa:	0020      	movs	r0, r4
 8018bfc:	0029      	movs	r1, r5
 8018bfe:	f7ea faff 	bl	8003200 <__aeabi_dcmpun>
 8018c02:	2800      	cmp	r0, #0
 8018c04:	d115      	bne.n	8018c32 <log10+0x4a>
 8018c06:	2200      	movs	r2, #0
 8018c08:	2300      	movs	r3, #0
 8018c0a:	0020      	movs	r0, r4
 8018c0c:	0029      	movs	r1, r5
 8018c0e:	f7e7 fc2d 	bl	800046c <__aeabi_dcmple>
 8018c12:	2800      	cmp	r0, #0
 8018c14:	d00d      	beq.n	8018c32 <log10+0x4a>
 8018c16:	2200      	movs	r2, #0
 8018c18:	2300      	movs	r3, #0
 8018c1a:	0020      	movs	r0, r4
 8018c1c:	0029      	movs	r1, r5
 8018c1e:	f7e7 fc15 	bl	800044c <__aeabi_dcmpeq>
 8018c22:	2800      	cmp	r0, #0
 8018c24:	d008      	beq.n	8018c38 <log10+0x50>
 8018c26:	f7fd fec5 	bl	80169b4 <__errno>
 8018c2a:	2322      	movs	r3, #34	@ 0x22
 8018c2c:	2600      	movs	r6, #0
 8018c2e:	4f07      	ldr	r7, [pc, #28]	@ (8018c4c <log10+0x64>)
 8018c30:	6003      	str	r3, [r0, #0]
 8018c32:	0030      	movs	r0, r6
 8018c34:	0039      	movs	r1, r7
 8018c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c38:	f7fd febc 	bl	80169b4 <__errno>
 8018c3c:	2321      	movs	r3, #33	@ 0x21
 8018c3e:	6003      	str	r3, [r0, #0]
 8018c40:	4803      	ldr	r0, [pc, #12]	@ (8018c50 <log10+0x68>)
 8018c42:	f000 f871 	bl	8018d28 <nan>
 8018c46:	0006      	movs	r6, r0
 8018c48:	000f      	movs	r7, r1
 8018c4a:	e7f2      	b.n	8018c32 <log10+0x4a>
 8018c4c:	fff00000 	.word	0xfff00000
 8018c50:	0801a5de 	.word	0x0801a5de

08018c54 <sqrt>:
 8018c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c56:	0004      	movs	r4, r0
 8018c58:	000d      	movs	r5, r1
 8018c5a:	f000 f875 	bl	8018d48 <__ieee754_sqrt>
 8018c5e:	0022      	movs	r2, r4
 8018c60:	0006      	movs	r6, r0
 8018c62:	000f      	movs	r7, r1
 8018c64:	002b      	movs	r3, r5
 8018c66:	0020      	movs	r0, r4
 8018c68:	0029      	movs	r1, r5
 8018c6a:	f7ea fac9 	bl	8003200 <__aeabi_dcmpun>
 8018c6e:	2800      	cmp	r0, #0
 8018c70:	d113      	bne.n	8018c9a <sqrt+0x46>
 8018c72:	2200      	movs	r2, #0
 8018c74:	2300      	movs	r3, #0
 8018c76:	0020      	movs	r0, r4
 8018c78:	0029      	movs	r1, r5
 8018c7a:	f7e7 fbed 	bl	8000458 <__aeabi_dcmplt>
 8018c7e:	2800      	cmp	r0, #0
 8018c80:	d00b      	beq.n	8018c9a <sqrt+0x46>
 8018c82:	f7fd fe97 	bl	80169b4 <__errno>
 8018c86:	2321      	movs	r3, #33	@ 0x21
 8018c88:	2200      	movs	r2, #0
 8018c8a:	6003      	str	r3, [r0, #0]
 8018c8c:	2300      	movs	r3, #0
 8018c8e:	0010      	movs	r0, r2
 8018c90:	0019      	movs	r1, r3
 8018c92:	f7e9 f80d 	bl	8001cb0 <__aeabi_ddiv>
 8018c96:	0006      	movs	r6, r0
 8018c98:	000f      	movs	r7, r1
 8018c9a:	0030      	movs	r0, r6
 8018c9c:	0039      	movs	r1, r7
 8018c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018ca0 <expf>:
 8018ca0:	b570      	push	{r4, r5, r6, lr}
 8018ca2:	1c04      	adds	r4, r0, #0
 8018ca4:	f000 fa2a 	bl	80190fc <__ieee754_expf>
 8018ca8:	1c05      	adds	r5, r0, #0
 8018caa:	1c20      	adds	r0, r4, #0
 8018cac:	f000 f842 	bl	8018d34 <finitef>
 8018cb0:	2800      	cmp	r0, #0
 8018cb2:	d00b      	beq.n	8018ccc <expf+0x2c>
 8018cb4:	490c      	ldr	r1, [pc, #48]	@ (8018ce8 <expf+0x48>)
 8018cb6:	1c20      	adds	r0, r4, #0
 8018cb8:	f7e7 fc1c 	bl	80004f4 <__aeabi_fcmpgt>
 8018cbc:	2800      	cmp	r0, #0
 8018cbe:	d007      	beq.n	8018cd0 <expf+0x30>
 8018cc0:	f7fd fe78 	bl	80169b4 <__errno>
 8018cc4:	25ff      	movs	r5, #255	@ 0xff
 8018cc6:	2322      	movs	r3, #34	@ 0x22
 8018cc8:	05ed      	lsls	r5, r5, #23
 8018cca:	6003      	str	r3, [r0, #0]
 8018ccc:	1c28      	adds	r0, r5, #0
 8018cce:	bd70      	pop	{r4, r5, r6, pc}
 8018cd0:	4906      	ldr	r1, [pc, #24]	@ (8018cec <expf+0x4c>)
 8018cd2:	1c20      	adds	r0, r4, #0
 8018cd4:	f7e7 fbfa 	bl	80004cc <__aeabi_fcmplt>
 8018cd8:	2800      	cmp	r0, #0
 8018cda:	d0f7      	beq.n	8018ccc <expf+0x2c>
 8018cdc:	f7fd fe6a 	bl	80169b4 <__errno>
 8018ce0:	2322      	movs	r3, #34	@ 0x22
 8018ce2:	2500      	movs	r5, #0
 8018ce4:	6003      	str	r3, [r0, #0]
 8018ce6:	e7f1      	b.n	8018ccc <expf+0x2c>
 8018ce8:	42b17217 	.word	0x42b17217
 8018cec:	c2cff1b5 	.word	0xc2cff1b5

08018cf0 <sqrtf>:
 8018cf0:	b570      	push	{r4, r5, r6, lr}
 8018cf2:	1c05      	adds	r5, r0, #0
 8018cf4:	f000 f910 	bl	8018f18 <__ieee754_sqrtf>
 8018cf8:	1c29      	adds	r1, r5, #0
 8018cfa:	1c04      	adds	r4, r0, #0
 8018cfc:	1c28      	adds	r0, r5, #0
 8018cfe:	f7e8 fbaf 	bl	8001460 <__aeabi_fcmpun>
 8018d02:	2800      	cmp	r0, #0
 8018d04:	d10e      	bne.n	8018d24 <sqrtf+0x34>
 8018d06:	2100      	movs	r1, #0
 8018d08:	1c28      	adds	r0, r5, #0
 8018d0a:	f7e7 fbdf 	bl	80004cc <__aeabi_fcmplt>
 8018d0e:	2800      	cmp	r0, #0
 8018d10:	d008      	beq.n	8018d24 <sqrtf+0x34>
 8018d12:	f7fd fe4f 	bl	80169b4 <__errno>
 8018d16:	2321      	movs	r3, #33	@ 0x21
 8018d18:	2100      	movs	r1, #0
 8018d1a:	6003      	str	r3, [r0, #0]
 8018d1c:	1c08      	adds	r0, r1, #0
 8018d1e:	f7e7 fed7 	bl	8000ad0 <__aeabi_fdiv>
 8018d22:	1c04      	adds	r4, r0, #0
 8018d24:	1c20      	adds	r0, r4, #0
 8018d26:	bd70      	pop	{r4, r5, r6, pc}

08018d28 <nan>:
 8018d28:	2000      	movs	r0, #0
 8018d2a:	4901      	ldr	r1, [pc, #4]	@ (8018d30 <nan+0x8>)
 8018d2c:	4770      	bx	lr
 8018d2e:	46c0      	nop			@ (mov r8, r8)
 8018d30:	7ff80000 	.word	0x7ff80000

08018d34 <finitef>:
 8018d34:	22ff      	movs	r2, #255	@ 0xff
 8018d36:	0043      	lsls	r3, r0, #1
 8018d38:	085b      	lsrs	r3, r3, #1
 8018d3a:	2001      	movs	r0, #1
 8018d3c:	05d2      	lsls	r2, r2, #23
 8018d3e:	4293      	cmp	r3, r2
 8018d40:	db00      	blt.n	8018d44 <finitef+0x10>
 8018d42:	2000      	movs	r0, #0
 8018d44:	4770      	bx	lr
	...

08018d48 <__ieee754_sqrt>:
 8018d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d4a:	000a      	movs	r2, r1
 8018d4c:	000d      	movs	r5, r1
 8018d4e:	496d      	ldr	r1, [pc, #436]	@ (8018f04 <__ieee754_sqrt+0x1bc>)
 8018d50:	0004      	movs	r4, r0
 8018d52:	0003      	movs	r3, r0
 8018d54:	0008      	movs	r0, r1
 8018d56:	b087      	sub	sp, #28
 8018d58:	4028      	ands	r0, r5
 8018d5a:	4288      	cmp	r0, r1
 8018d5c:	d111      	bne.n	8018d82 <__ieee754_sqrt+0x3a>
 8018d5e:	0022      	movs	r2, r4
 8018d60:	002b      	movs	r3, r5
 8018d62:	0020      	movs	r0, r4
 8018d64:	0029      	movs	r1, r5
 8018d66:	f7e9 fbe7 	bl	8002538 <__aeabi_dmul>
 8018d6a:	0002      	movs	r2, r0
 8018d6c:	000b      	movs	r3, r1
 8018d6e:	0020      	movs	r0, r4
 8018d70:	0029      	movs	r1, r5
 8018d72:	f7e8 fc39 	bl	80015e8 <__aeabi_dadd>
 8018d76:	0004      	movs	r4, r0
 8018d78:	000d      	movs	r5, r1
 8018d7a:	0020      	movs	r0, r4
 8018d7c:	0029      	movs	r1, r5
 8018d7e:	b007      	add	sp, #28
 8018d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d82:	2d00      	cmp	r5, #0
 8018d84:	dc11      	bgt.n	8018daa <__ieee754_sqrt+0x62>
 8018d86:	0069      	lsls	r1, r5, #1
 8018d88:	0849      	lsrs	r1, r1, #1
 8018d8a:	4321      	orrs	r1, r4
 8018d8c:	d0f5      	beq.n	8018d7a <__ieee754_sqrt+0x32>
 8018d8e:	2000      	movs	r0, #0
 8018d90:	4285      	cmp	r5, r0
 8018d92:	d010      	beq.n	8018db6 <__ieee754_sqrt+0x6e>
 8018d94:	0022      	movs	r2, r4
 8018d96:	002b      	movs	r3, r5
 8018d98:	0020      	movs	r0, r4
 8018d9a:	0029      	movs	r1, r5
 8018d9c:	f7e9 fe94 	bl	8002ac8 <__aeabi_dsub>
 8018da0:	0002      	movs	r2, r0
 8018da2:	000b      	movs	r3, r1
 8018da4:	f7e8 ff84 	bl	8001cb0 <__aeabi_ddiv>
 8018da8:	e7e5      	b.n	8018d76 <__ieee754_sqrt+0x2e>
 8018daa:	1528      	asrs	r0, r5, #20
 8018dac:	d115      	bne.n	8018dda <__ieee754_sqrt+0x92>
 8018dae:	2480      	movs	r4, #128	@ 0x80
 8018db0:	2100      	movs	r1, #0
 8018db2:	0364      	lsls	r4, r4, #13
 8018db4:	e007      	b.n	8018dc6 <__ieee754_sqrt+0x7e>
 8018db6:	0ada      	lsrs	r2, r3, #11
 8018db8:	3815      	subs	r0, #21
 8018dba:	055b      	lsls	r3, r3, #21
 8018dbc:	2a00      	cmp	r2, #0
 8018dbe:	d0fa      	beq.n	8018db6 <__ieee754_sqrt+0x6e>
 8018dc0:	e7f5      	b.n	8018dae <__ieee754_sqrt+0x66>
 8018dc2:	0052      	lsls	r2, r2, #1
 8018dc4:	3101      	adds	r1, #1
 8018dc6:	4222      	tst	r2, r4
 8018dc8:	d0fb      	beq.n	8018dc2 <__ieee754_sqrt+0x7a>
 8018dca:	1e4c      	subs	r4, r1, #1
 8018dcc:	1b00      	subs	r0, r0, r4
 8018dce:	2420      	movs	r4, #32
 8018dd0:	001d      	movs	r5, r3
 8018dd2:	1a64      	subs	r4, r4, r1
 8018dd4:	40e5      	lsrs	r5, r4
 8018dd6:	408b      	lsls	r3, r1
 8018dd8:	432a      	orrs	r2, r5
 8018dda:	494b      	ldr	r1, [pc, #300]	@ (8018f08 <__ieee754_sqrt+0x1c0>)
 8018ddc:	0312      	lsls	r2, r2, #12
 8018dde:	1844      	adds	r4, r0, r1
 8018de0:	2180      	movs	r1, #128	@ 0x80
 8018de2:	0b12      	lsrs	r2, r2, #12
 8018de4:	0349      	lsls	r1, r1, #13
 8018de6:	4311      	orrs	r1, r2
 8018de8:	07c0      	lsls	r0, r0, #31
 8018dea:	d403      	bmi.n	8018df4 <__ieee754_sqrt+0xac>
 8018dec:	0fda      	lsrs	r2, r3, #31
 8018dee:	0049      	lsls	r1, r1, #1
 8018df0:	1851      	adds	r1, r2, r1
 8018df2:	005b      	lsls	r3, r3, #1
 8018df4:	2500      	movs	r5, #0
 8018df6:	1062      	asrs	r2, r4, #1
 8018df8:	0049      	lsls	r1, r1, #1
 8018dfa:	2480      	movs	r4, #128	@ 0x80
 8018dfc:	9205      	str	r2, [sp, #20]
 8018dfe:	0fda      	lsrs	r2, r3, #31
 8018e00:	1852      	adds	r2, r2, r1
 8018e02:	2016      	movs	r0, #22
 8018e04:	0029      	movs	r1, r5
 8018e06:	005b      	lsls	r3, r3, #1
 8018e08:	03a4      	lsls	r4, r4, #14
 8018e0a:	190e      	adds	r6, r1, r4
 8018e0c:	4296      	cmp	r6, r2
 8018e0e:	dc02      	bgt.n	8018e16 <__ieee754_sqrt+0xce>
 8018e10:	1931      	adds	r1, r6, r4
 8018e12:	1b92      	subs	r2, r2, r6
 8018e14:	192d      	adds	r5, r5, r4
 8018e16:	0fde      	lsrs	r6, r3, #31
 8018e18:	0052      	lsls	r2, r2, #1
 8018e1a:	3801      	subs	r0, #1
 8018e1c:	1992      	adds	r2, r2, r6
 8018e1e:	005b      	lsls	r3, r3, #1
 8018e20:	0864      	lsrs	r4, r4, #1
 8018e22:	2800      	cmp	r0, #0
 8018e24:	d1f1      	bne.n	8018e0a <__ieee754_sqrt+0xc2>
 8018e26:	2620      	movs	r6, #32
 8018e28:	2780      	movs	r7, #128	@ 0x80
 8018e2a:	0004      	movs	r4, r0
 8018e2c:	9604      	str	r6, [sp, #16]
 8018e2e:	063f      	lsls	r7, r7, #24
 8018e30:	19c6      	adds	r6, r0, r7
 8018e32:	46b4      	mov	ip, r6
 8018e34:	4291      	cmp	r1, r2
 8018e36:	db02      	blt.n	8018e3e <__ieee754_sqrt+0xf6>
 8018e38:	d114      	bne.n	8018e64 <__ieee754_sqrt+0x11c>
 8018e3a:	429e      	cmp	r6, r3
 8018e3c:	d812      	bhi.n	8018e64 <__ieee754_sqrt+0x11c>
 8018e3e:	4660      	mov	r0, ip
 8018e40:	4666      	mov	r6, ip
 8018e42:	19c0      	adds	r0, r0, r7
 8018e44:	9100      	str	r1, [sp, #0]
 8018e46:	2e00      	cmp	r6, #0
 8018e48:	da03      	bge.n	8018e52 <__ieee754_sqrt+0x10a>
 8018e4a:	43c6      	mvns	r6, r0
 8018e4c:	0ff6      	lsrs	r6, r6, #31
 8018e4e:	198e      	adds	r6, r1, r6
 8018e50:	9600      	str	r6, [sp, #0]
 8018e52:	1a52      	subs	r2, r2, r1
 8018e54:	4563      	cmp	r3, ip
 8018e56:	4189      	sbcs	r1, r1
 8018e58:	4249      	negs	r1, r1
 8018e5a:	1a52      	subs	r2, r2, r1
 8018e5c:	4661      	mov	r1, ip
 8018e5e:	1a5b      	subs	r3, r3, r1
 8018e60:	9900      	ldr	r1, [sp, #0]
 8018e62:	19e4      	adds	r4, r4, r7
 8018e64:	0fde      	lsrs	r6, r3, #31
 8018e66:	0052      	lsls	r2, r2, #1
 8018e68:	1992      	adds	r2, r2, r6
 8018e6a:	9e04      	ldr	r6, [sp, #16]
 8018e6c:	005b      	lsls	r3, r3, #1
 8018e6e:	3e01      	subs	r6, #1
 8018e70:	087f      	lsrs	r7, r7, #1
 8018e72:	9604      	str	r6, [sp, #16]
 8018e74:	2e00      	cmp	r6, #0
 8018e76:	d1db      	bne.n	8018e30 <__ieee754_sqrt+0xe8>
 8018e78:	431a      	orrs	r2, r3
 8018e7a:	d01f      	beq.n	8018ebc <__ieee754_sqrt+0x174>
 8018e7c:	4e23      	ldr	r6, [pc, #140]	@ (8018f0c <__ieee754_sqrt+0x1c4>)
 8018e7e:	4f24      	ldr	r7, [pc, #144]	@ (8018f10 <__ieee754_sqrt+0x1c8>)
 8018e80:	6830      	ldr	r0, [r6, #0]
 8018e82:	6871      	ldr	r1, [r6, #4]
 8018e84:	683a      	ldr	r2, [r7, #0]
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	9200      	str	r2, [sp, #0]
 8018e8a:	9301      	str	r3, [sp, #4]
 8018e8c:	6832      	ldr	r2, [r6, #0]
 8018e8e:	6873      	ldr	r3, [r6, #4]
 8018e90:	9202      	str	r2, [sp, #8]
 8018e92:	9303      	str	r3, [sp, #12]
 8018e94:	9a00      	ldr	r2, [sp, #0]
 8018e96:	9b01      	ldr	r3, [sp, #4]
 8018e98:	f7e9 fe16 	bl	8002ac8 <__aeabi_dsub>
 8018e9c:	0002      	movs	r2, r0
 8018e9e:	000b      	movs	r3, r1
 8018ea0:	9802      	ldr	r0, [sp, #8]
 8018ea2:	9903      	ldr	r1, [sp, #12]
 8018ea4:	f7e7 fae2 	bl	800046c <__aeabi_dcmple>
 8018ea8:	2800      	cmp	r0, #0
 8018eaa:	d007      	beq.n	8018ebc <__ieee754_sqrt+0x174>
 8018eac:	6830      	ldr	r0, [r6, #0]
 8018eae:	6871      	ldr	r1, [r6, #4]
 8018eb0:	683a      	ldr	r2, [r7, #0]
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	1c67      	adds	r7, r4, #1
 8018eb6:	d10f      	bne.n	8018ed8 <__ieee754_sqrt+0x190>
 8018eb8:	9c04      	ldr	r4, [sp, #16]
 8018eba:	3501      	adds	r5, #1
 8018ebc:	4b15      	ldr	r3, [pc, #84]	@ (8018f14 <__ieee754_sqrt+0x1cc>)
 8018ebe:	106a      	asrs	r2, r5, #1
 8018ec0:	18d2      	adds	r2, r2, r3
 8018ec2:	0863      	lsrs	r3, r4, #1
 8018ec4:	07ed      	lsls	r5, r5, #31
 8018ec6:	d502      	bpl.n	8018ece <__ieee754_sqrt+0x186>
 8018ec8:	2180      	movs	r1, #128	@ 0x80
 8018eca:	0609      	lsls	r1, r1, #24
 8018ecc:	430b      	orrs	r3, r1
 8018ece:	9905      	ldr	r1, [sp, #20]
 8018ed0:	001c      	movs	r4, r3
 8018ed2:	0509      	lsls	r1, r1, #20
 8018ed4:	188d      	adds	r5, r1, r2
 8018ed6:	e750      	b.n	8018d7a <__ieee754_sqrt+0x32>
 8018ed8:	f7e8 fb86 	bl	80015e8 <__aeabi_dadd>
 8018edc:	6877      	ldr	r7, [r6, #4]
 8018ede:	6836      	ldr	r6, [r6, #0]
 8018ee0:	0002      	movs	r2, r0
 8018ee2:	000b      	movs	r3, r1
 8018ee4:	0030      	movs	r0, r6
 8018ee6:	0039      	movs	r1, r7
 8018ee8:	f7e7 fab6 	bl	8000458 <__aeabi_dcmplt>
 8018eec:	2800      	cmp	r0, #0
 8018eee:	d004      	beq.n	8018efa <__ieee754_sqrt+0x1b2>
 8018ef0:	3402      	adds	r4, #2
 8018ef2:	4263      	negs	r3, r4
 8018ef4:	4163      	adcs	r3, r4
 8018ef6:	18ed      	adds	r5, r5, r3
 8018ef8:	e7e0      	b.n	8018ebc <__ieee754_sqrt+0x174>
 8018efa:	2301      	movs	r3, #1
 8018efc:	3401      	adds	r4, #1
 8018efe:	439c      	bics	r4, r3
 8018f00:	e7dc      	b.n	8018ebc <__ieee754_sqrt+0x174>
 8018f02:	46c0      	nop			@ (mov r8, r8)
 8018f04:	7ff00000 	.word	0x7ff00000
 8018f08:	fffffc01 	.word	0xfffffc01
 8018f0c:	20000498 	.word	0x20000498
 8018f10:	20000490 	.word	0x20000490
 8018f14:	3fe00000 	.word	0x3fe00000

08018f18 <__ieee754_sqrtf>:
 8018f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018f1a:	0003      	movs	r3, r0
 8018f1c:	0042      	lsls	r2, r0, #1
 8018f1e:	1c04      	adds	r4, r0, #0
 8018f20:	20ff      	movs	r0, #255	@ 0xff
 8018f22:	0852      	lsrs	r2, r2, #1
 8018f24:	05c0      	lsls	r0, r0, #23
 8018f26:	4282      	cmp	r2, r0
 8018f28:	d30a      	bcc.n	8018f40 <__ieee754_sqrtf+0x28>
 8018f2a:	1c21      	adds	r1, r4, #0
 8018f2c:	1c20      	adds	r0, r4, #0
 8018f2e:	f7e7 ffb5 	bl	8000e9c <__aeabi_fmul>
 8018f32:	1c01      	adds	r1, r0, #0
 8018f34:	1c20      	adds	r0, r4, #0
 8018f36:	f7e7 fc41 	bl	80007bc <__aeabi_fadd>
 8018f3a:	1c04      	adds	r4, r0, #0
 8018f3c:	1c20      	adds	r0, r4, #0
 8018f3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018f40:	2a00      	cmp	r2, #0
 8018f42:	d0fb      	beq.n	8018f3c <__ieee754_sqrtf+0x24>
 8018f44:	2c00      	cmp	r4, #0
 8018f46:	da07      	bge.n	8018f58 <__ieee754_sqrtf+0x40>
 8018f48:	1c21      	adds	r1, r4, #0
 8018f4a:	1c20      	adds	r0, r4, #0
 8018f4c:	f7e8 f8e4 	bl	8001118 <__aeabi_fsub>
 8018f50:	1c01      	adds	r1, r0, #0
 8018f52:	f7e7 fdbd 	bl	8000ad0 <__aeabi_fdiv>
 8018f56:	e7f0      	b.n	8018f3a <__ieee754_sqrtf+0x22>
 8018f58:	0022      	movs	r2, r4
 8018f5a:	15e1      	asrs	r1, r4, #23
 8018f5c:	4002      	ands	r2, r0
 8018f5e:	4204      	tst	r4, r0
 8018f60:	d046      	beq.n	8018ff0 <__ieee754_sqrtf+0xd8>
 8018f62:	2280      	movs	r2, #128	@ 0x80
 8018f64:	000f      	movs	r7, r1
 8018f66:	025b      	lsls	r3, r3, #9
 8018f68:	0a5b      	lsrs	r3, r3, #9
 8018f6a:	0412      	lsls	r2, r2, #16
 8018f6c:	3f7f      	subs	r7, #127	@ 0x7f
 8018f6e:	4313      	orrs	r3, r2
 8018f70:	07c9      	lsls	r1, r1, #31
 8018f72:	d400      	bmi.n	8018f76 <__ieee754_sqrtf+0x5e>
 8018f74:	005b      	lsls	r3, r3, #1
 8018f76:	2400      	movs	r4, #0
 8018f78:	2180      	movs	r1, #128	@ 0x80
 8018f7a:	2019      	movs	r0, #25
 8018f7c:	0026      	movs	r6, r4
 8018f7e:	107f      	asrs	r7, r7, #1
 8018f80:	005b      	lsls	r3, r3, #1
 8018f82:	0449      	lsls	r1, r1, #17
 8018f84:	1875      	adds	r5, r6, r1
 8018f86:	001a      	movs	r2, r3
 8018f88:	429d      	cmp	r5, r3
 8018f8a:	dc02      	bgt.n	8018f92 <__ieee754_sqrtf+0x7a>
 8018f8c:	186e      	adds	r6, r5, r1
 8018f8e:	1b5a      	subs	r2, r3, r5
 8018f90:	1864      	adds	r4, r4, r1
 8018f92:	3801      	subs	r0, #1
 8018f94:	0053      	lsls	r3, r2, #1
 8018f96:	0849      	lsrs	r1, r1, #1
 8018f98:	2800      	cmp	r0, #0
 8018f9a:	d1f3      	bne.n	8018f84 <__ieee754_sqrtf+0x6c>
 8018f9c:	2a00      	cmp	r2, #0
 8018f9e:	d019      	beq.n	8018fd4 <__ieee754_sqrtf+0xbc>
 8018fa0:	4d17      	ldr	r5, [pc, #92]	@ (8019000 <__ieee754_sqrtf+0xe8>)
 8018fa2:	4e18      	ldr	r6, [pc, #96]	@ (8019004 <__ieee754_sqrtf+0xec>)
 8018fa4:	6828      	ldr	r0, [r5, #0]
 8018fa6:	6831      	ldr	r1, [r6, #0]
 8018fa8:	682b      	ldr	r3, [r5, #0]
 8018faa:	9301      	str	r3, [sp, #4]
 8018fac:	f7e8 f8b4 	bl	8001118 <__aeabi_fsub>
 8018fb0:	1c01      	adds	r1, r0, #0
 8018fb2:	9801      	ldr	r0, [sp, #4]
 8018fb4:	f7e7 fa94 	bl	80004e0 <__aeabi_fcmple>
 8018fb8:	2800      	cmp	r0, #0
 8018fba:	d00b      	beq.n	8018fd4 <__ieee754_sqrtf+0xbc>
 8018fbc:	6828      	ldr	r0, [r5, #0]
 8018fbe:	6831      	ldr	r1, [r6, #0]
 8018fc0:	f7e7 fbfc 	bl	80007bc <__aeabi_fadd>
 8018fc4:	682d      	ldr	r5, [r5, #0]
 8018fc6:	1c01      	adds	r1, r0, #0
 8018fc8:	1c28      	adds	r0, r5, #0
 8018fca:	f7e7 fa7f 	bl	80004cc <__aeabi_fcmplt>
 8018fce:	2800      	cmp	r0, #0
 8018fd0:	d011      	beq.n	8018ff6 <__ieee754_sqrtf+0xde>
 8018fd2:	3402      	adds	r4, #2
 8018fd4:	23fc      	movs	r3, #252	@ 0xfc
 8018fd6:	1064      	asrs	r4, r4, #1
 8018fd8:	059b      	lsls	r3, r3, #22
 8018fda:	18e3      	adds	r3, r4, r3
 8018fdc:	05fc      	lsls	r4, r7, #23
 8018fde:	18e4      	adds	r4, r4, r3
 8018fe0:	e7ac      	b.n	8018f3c <__ieee754_sqrtf+0x24>
 8018fe2:	005b      	lsls	r3, r3, #1
 8018fe4:	3201      	adds	r2, #1
 8018fe6:	4203      	tst	r3, r0
 8018fe8:	d0fb      	beq.n	8018fe2 <__ieee754_sqrtf+0xca>
 8018fea:	3a01      	subs	r2, #1
 8018fec:	1a89      	subs	r1, r1, r2
 8018fee:	e7b8      	b.n	8018f62 <__ieee754_sqrtf+0x4a>
 8018ff0:	2080      	movs	r0, #128	@ 0x80
 8018ff2:	0400      	lsls	r0, r0, #16
 8018ff4:	e7f7      	b.n	8018fe6 <__ieee754_sqrtf+0xce>
 8018ff6:	2301      	movs	r3, #1
 8018ff8:	3401      	adds	r4, #1
 8018ffa:	439c      	bics	r4, r3
 8018ffc:	e7ea      	b.n	8018fd4 <__ieee754_sqrtf+0xbc>
 8018ffe:	46c0      	nop			@ (mov r8, r8)
 8019000:	200004a4 	.word	0x200004a4
 8019004:	200004a0 	.word	0x200004a0

08019008 <__ieee754_log10>:
 8019008:	2280      	movs	r2, #128	@ 0x80
 801900a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801900c:	000b      	movs	r3, r1
 801900e:	0004      	movs	r4, r0
 8019010:	000d      	movs	r5, r1
 8019012:	b085      	sub	sp, #20
 8019014:	0352      	lsls	r2, r2, #13
 8019016:	4291      	cmp	r1, r2
 8019018:	da26      	bge.n	8019068 <__ieee754_log10+0x60>
 801901a:	004a      	lsls	r2, r1, #1
 801901c:	0852      	lsrs	r2, r2, #1
 801901e:	4302      	orrs	r2, r0
 8019020:	d107      	bne.n	8019032 <__ieee754_log10+0x2a>
 8019022:	2200      	movs	r2, #0
 8019024:	2300      	movs	r3, #0
 8019026:	2000      	movs	r0, #0
 8019028:	4929      	ldr	r1, [pc, #164]	@ (80190d0 <__ieee754_log10+0xc8>)
 801902a:	f7e8 fe41 	bl	8001cb0 <__aeabi_ddiv>
 801902e:	b005      	add	sp, #20
 8019030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019032:	2900      	cmp	r1, #0
 8019034:	da05      	bge.n	8019042 <__ieee754_log10+0x3a>
 8019036:	0002      	movs	r2, r0
 8019038:	f7e9 fd46 	bl	8002ac8 <__aeabi_dsub>
 801903c:	2200      	movs	r2, #0
 801903e:	2300      	movs	r3, #0
 8019040:	e7f3      	b.n	801902a <__ieee754_log10+0x22>
 8019042:	2200      	movs	r2, #0
 8019044:	4b23      	ldr	r3, [pc, #140]	@ (80190d4 <__ieee754_log10+0xcc>)
 8019046:	f7e9 fa77 	bl	8002538 <__aeabi_dmul>
 801904a:	2236      	movs	r2, #54	@ 0x36
 801904c:	0004      	movs	r4, r0
 801904e:	000d      	movs	r5, r1
 8019050:	000b      	movs	r3, r1
 8019052:	4252      	negs	r2, r2
 8019054:	4920      	ldr	r1, [pc, #128]	@ (80190d8 <__ieee754_log10+0xd0>)
 8019056:	428b      	cmp	r3, r1
 8019058:	dd08      	ble.n	801906c <__ieee754_log10+0x64>
 801905a:	0022      	movs	r2, r4
 801905c:	002b      	movs	r3, r5
 801905e:	0020      	movs	r0, r4
 8019060:	0029      	movs	r1, r5
 8019062:	f7e8 fac1 	bl	80015e8 <__aeabi_dadd>
 8019066:	e7e2      	b.n	801902e <__ieee754_log10+0x26>
 8019068:	2200      	movs	r2, #0
 801906a:	e7f3      	b.n	8019054 <__ieee754_log10+0x4c>
 801906c:	491b      	ldr	r1, [pc, #108]	@ (80190dc <__ieee754_log10+0xd4>)
 801906e:	1518      	asrs	r0, r3, #20
 8019070:	1840      	adds	r0, r0, r1
 8019072:	1880      	adds	r0, r0, r2
 8019074:	0fc2      	lsrs	r2, r0, #31
 8019076:	031b      	lsls	r3, r3, #12
 8019078:	0b1b      	lsrs	r3, r3, #12
 801907a:	1880      	adds	r0, r0, r2
 801907c:	9203      	str	r2, [sp, #12]
 801907e:	9300      	str	r3, [sp, #0]
 8019080:	f7ea f91c 	bl	80032bc <__aeabi_i2d>
 8019084:	9a03      	ldr	r2, [sp, #12]
 8019086:	4b16      	ldr	r3, [pc, #88]	@ (80190e0 <__ieee754_log10+0xd8>)
 8019088:	0006      	movs	r6, r0
 801908a:	1a9b      	subs	r3, r3, r2
 801908c:	9a00      	ldr	r2, [sp, #0]
 801908e:	051b      	lsls	r3, r3, #20
 8019090:	431a      	orrs	r2, r3
 8019092:	0015      	movs	r5, r2
 8019094:	4b13      	ldr	r3, [pc, #76]	@ (80190e4 <__ieee754_log10+0xdc>)
 8019096:	4a14      	ldr	r2, [pc, #80]	@ (80190e8 <__ieee754_log10+0xe0>)
 8019098:	000f      	movs	r7, r1
 801909a:	f7e9 fa4d 	bl	8002538 <__aeabi_dmul>
 801909e:	9000      	str	r0, [sp, #0]
 80190a0:	9101      	str	r1, [sp, #4]
 80190a2:	0020      	movs	r0, r4
 80190a4:	0029      	movs	r1, r5
 80190a6:	f000 f93b 	bl	8019320 <__ieee754_log>
 80190aa:	4a10      	ldr	r2, [pc, #64]	@ (80190ec <__ieee754_log10+0xe4>)
 80190ac:	4b10      	ldr	r3, [pc, #64]	@ (80190f0 <__ieee754_log10+0xe8>)
 80190ae:	f7e9 fa43 	bl	8002538 <__aeabi_dmul>
 80190b2:	9a00      	ldr	r2, [sp, #0]
 80190b4:	9b01      	ldr	r3, [sp, #4]
 80190b6:	f7e8 fa97 	bl	80015e8 <__aeabi_dadd>
 80190ba:	4a0e      	ldr	r2, [pc, #56]	@ (80190f4 <__ieee754_log10+0xec>)
 80190bc:	4b0e      	ldr	r3, [pc, #56]	@ (80190f8 <__ieee754_log10+0xf0>)
 80190be:	0004      	movs	r4, r0
 80190c0:	000d      	movs	r5, r1
 80190c2:	0030      	movs	r0, r6
 80190c4:	0039      	movs	r1, r7
 80190c6:	f7e9 fa37 	bl	8002538 <__aeabi_dmul>
 80190ca:	0002      	movs	r2, r0
 80190cc:	000b      	movs	r3, r1
 80190ce:	e7c6      	b.n	801905e <__ieee754_log10+0x56>
 80190d0:	c3500000 	.word	0xc3500000
 80190d4:	43500000 	.word	0x43500000
 80190d8:	7fefffff 	.word	0x7fefffff
 80190dc:	fffffc01 	.word	0xfffffc01
 80190e0:	000003ff 	.word	0x000003ff
 80190e4:	3d59fef3 	.word	0x3d59fef3
 80190e8:	11f12b36 	.word	0x11f12b36
 80190ec:	1526e50e 	.word	0x1526e50e
 80190f0:	3fdbcb7b 	.word	0x3fdbcb7b
 80190f4:	509f6000 	.word	0x509f6000
 80190f8:	3fd34413 	.word	0x3fd34413

080190fc <__ieee754_expf>:
 80190fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80190fe:	21ff      	movs	r1, #255	@ 0xff
 8019100:	0043      	lsls	r3, r0, #1
 8019102:	1c04      	adds	r4, r0, #0
 8019104:	085b      	lsrs	r3, r3, #1
 8019106:	05c9      	lsls	r1, r1, #23
 8019108:	428b      	cmp	r3, r1
 801910a:	d904      	bls.n	8019116 <__ieee754_expf+0x1a>
 801910c:	1c01      	adds	r1, r0, #0
 801910e:	1c20      	adds	r0, r4, #0
 8019110:	f7e7 fb54 	bl	80007bc <__aeabi_fadd>
 8019114:	e00d      	b.n	8019132 <__ieee754_expf+0x36>
 8019116:	0fc6      	lsrs	r6, r0, #31
 8019118:	428b      	cmp	r3, r1
 801911a:	d104      	bne.n	8019126 <__ieee754_expf+0x2a>
 801911c:	2e00      	cmp	r6, #0
 801911e:	d000      	beq.n	8019122 <__ieee754_expf+0x26>
 8019120:	e0ba      	b.n	8019298 <__ieee754_expf+0x19c>
 8019122:	1c20      	adds	r0, r4, #0
 8019124:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019126:	495d      	ldr	r1, [pc, #372]	@ (801929c <__ieee754_expf+0x1a0>)
 8019128:	4288      	cmp	r0, r1
 801912a:	dd04      	ble.n	8019136 <__ieee754_expf+0x3a>
 801912c:	2000      	movs	r0, #0
 801912e:	f000 f8f1 	bl	8019314 <__math_oflowf>
 8019132:	1c04      	adds	r4, r0, #0
 8019134:	e7f5      	b.n	8019122 <__ieee754_expf+0x26>
 8019136:	2800      	cmp	r0, #0
 8019138:	da06      	bge.n	8019148 <__ieee754_expf+0x4c>
 801913a:	4a59      	ldr	r2, [pc, #356]	@ (80192a0 <__ieee754_expf+0x1a4>)
 801913c:	4293      	cmp	r3, r2
 801913e:	d903      	bls.n	8019148 <__ieee754_expf+0x4c>
 8019140:	2000      	movs	r0, #0
 8019142:	f000 f8e1 	bl	8019308 <__math_uflowf>
 8019146:	e7f4      	b.n	8019132 <__ieee754_expf+0x36>
 8019148:	4a56      	ldr	r2, [pc, #344]	@ (80192a4 <__ieee754_expf+0x1a8>)
 801914a:	4293      	cmp	r3, r2
 801914c:	d96e      	bls.n	801922c <__ieee754_expf+0x130>
 801914e:	4a56      	ldr	r2, [pc, #344]	@ (80192a8 <__ieee754_expf+0x1ac>)
 8019150:	00b5      	lsls	r5, r6, #2
 8019152:	4293      	cmp	r3, r2
 8019154:	d84e      	bhi.n	80191f4 <__ieee754_expf+0xf8>
 8019156:	4b55      	ldr	r3, [pc, #340]	@ (80192ac <__ieee754_expf+0x1b0>)
 8019158:	1c20      	adds	r0, r4, #0
 801915a:	5959      	ldr	r1, [r3, r5]
 801915c:	f7e7 ffdc 	bl	8001118 <__aeabi_fsub>
 8019160:	4b53      	ldr	r3, [pc, #332]	@ (80192b0 <__ieee754_expf+0x1b4>)
 8019162:	1c07      	adds	r7, r0, #0
 8019164:	595b      	ldr	r3, [r3, r5]
 8019166:	2501      	movs	r5, #1
 8019168:	1bad      	subs	r5, r5, r6
 801916a:	9300      	str	r3, [sp, #0]
 801916c:	1bad      	subs	r5, r5, r6
 801916e:	9900      	ldr	r1, [sp, #0]
 8019170:	1c38      	adds	r0, r7, #0
 8019172:	f7e7 ffd1 	bl	8001118 <__aeabi_fsub>
 8019176:	1c04      	adds	r4, r0, #0
 8019178:	1c21      	adds	r1, r4, #0
 801917a:	1c20      	adds	r0, r4, #0
 801917c:	f7e7 fe8e 	bl	8000e9c <__aeabi_fmul>
 8019180:	494c      	ldr	r1, [pc, #304]	@ (80192b4 <__ieee754_expf+0x1b8>)
 8019182:	1c06      	adds	r6, r0, #0
 8019184:	f7e7 fe8a 	bl	8000e9c <__aeabi_fmul>
 8019188:	494b      	ldr	r1, [pc, #300]	@ (80192b8 <__ieee754_expf+0x1bc>)
 801918a:	f7e7 ffc5 	bl	8001118 <__aeabi_fsub>
 801918e:	1c31      	adds	r1, r6, #0
 8019190:	f7e7 fe84 	bl	8000e9c <__aeabi_fmul>
 8019194:	4949      	ldr	r1, [pc, #292]	@ (80192bc <__ieee754_expf+0x1c0>)
 8019196:	f7e7 fb11 	bl	80007bc <__aeabi_fadd>
 801919a:	1c31      	adds	r1, r6, #0
 801919c:	f7e7 fe7e 	bl	8000e9c <__aeabi_fmul>
 80191a0:	4947      	ldr	r1, [pc, #284]	@ (80192c0 <__ieee754_expf+0x1c4>)
 80191a2:	f7e7 ffb9 	bl	8001118 <__aeabi_fsub>
 80191a6:	1c31      	adds	r1, r6, #0
 80191a8:	f7e7 fe78 	bl	8000e9c <__aeabi_fmul>
 80191ac:	4945      	ldr	r1, [pc, #276]	@ (80192c4 <__ieee754_expf+0x1c8>)
 80191ae:	f7e7 fb05 	bl	80007bc <__aeabi_fadd>
 80191b2:	1c31      	adds	r1, r6, #0
 80191b4:	f7e7 fe72 	bl	8000e9c <__aeabi_fmul>
 80191b8:	1c01      	adds	r1, r0, #0
 80191ba:	1c20      	adds	r0, r4, #0
 80191bc:	f7e7 ffac 	bl	8001118 <__aeabi_fsub>
 80191c0:	1c01      	adds	r1, r0, #0
 80191c2:	1c06      	adds	r6, r0, #0
 80191c4:	1c20      	adds	r0, r4, #0
 80191c6:	f7e7 fe69 	bl	8000e9c <__aeabi_fmul>
 80191ca:	9001      	str	r0, [sp, #4]
 80191cc:	2d00      	cmp	r5, #0
 80191ce:	d140      	bne.n	8019252 <__ieee754_expf+0x156>
 80191d0:	2180      	movs	r1, #128	@ 0x80
 80191d2:	1c30      	adds	r0, r6, #0
 80191d4:	05c9      	lsls	r1, r1, #23
 80191d6:	f7e7 ff9f 	bl	8001118 <__aeabi_fsub>
 80191da:	1c01      	adds	r1, r0, #0
 80191dc:	9801      	ldr	r0, [sp, #4]
 80191de:	f7e7 fc77 	bl	8000ad0 <__aeabi_fdiv>
 80191e2:	1c21      	adds	r1, r4, #0
 80191e4:	f7e7 ff98 	bl	8001118 <__aeabi_fsub>
 80191e8:	1c01      	adds	r1, r0, #0
 80191ea:	20fe      	movs	r0, #254	@ 0xfe
 80191ec:	0580      	lsls	r0, r0, #22
 80191ee:	f7e7 ff93 	bl	8001118 <__aeabi_fsub>
 80191f2:	e79e      	b.n	8019132 <__ieee754_expf+0x36>
 80191f4:	4934      	ldr	r1, [pc, #208]	@ (80192c8 <__ieee754_expf+0x1cc>)
 80191f6:	1c20      	adds	r0, r4, #0
 80191f8:	f7e7 fe50 	bl	8000e9c <__aeabi_fmul>
 80191fc:	4b33      	ldr	r3, [pc, #204]	@ (80192cc <__ieee754_expf+0x1d0>)
 80191fe:	5959      	ldr	r1, [r3, r5]
 8019200:	f7e7 fadc 	bl	80007bc <__aeabi_fadd>
 8019204:	f7e8 f942 	bl	800148c <__aeabi_f2iz>
 8019208:	0005      	movs	r5, r0
 801920a:	f7e8 f95f 	bl	80014cc <__aeabi_i2f>
 801920e:	4930      	ldr	r1, [pc, #192]	@ (80192d0 <__ieee754_expf+0x1d4>)
 8019210:	1c06      	adds	r6, r0, #0
 8019212:	f7e7 fe43 	bl	8000e9c <__aeabi_fmul>
 8019216:	1c01      	adds	r1, r0, #0
 8019218:	1c20      	adds	r0, r4, #0
 801921a:	f7e7 ff7d 	bl	8001118 <__aeabi_fsub>
 801921e:	492d      	ldr	r1, [pc, #180]	@ (80192d4 <__ieee754_expf+0x1d8>)
 8019220:	1c07      	adds	r7, r0, #0
 8019222:	1c30      	adds	r0, r6, #0
 8019224:	f7e7 fe3a 	bl	8000e9c <__aeabi_fmul>
 8019228:	9000      	str	r0, [sp, #0]
 801922a:	e7a0      	b.n	801916e <__ieee754_expf+0x72>
 801922c:	22d0      	movs	r2, #208	@ 0xd0
 801922e:	0592      	lsls	r2, r2, #22
 8019230:	4293      	cmp	r3, r2
 8019232:	d20c      	bcs.n	801924e <__ieee754_expf+0x152>
 8019234:	4928      	ldr	r1, [pc, #160]	@ (80192d8 <__ieee754_expf+0x1dc>)
 8019236:	1c20      	adds	r0, r4, #0
 8019238:	f7e7 fac0 	bl	80007bc <__aeabi_fadd>
 801923c:	21fe      	movs	r1, #254	@ 0xfe
 801923e:	0589      	lsls	r1, r1, #22
 8019240:	f7e7 f958 	bl	80004f4 <__aeabi_fcmpgt>
 8019244:	1e05      	subs	r5, r0, #0
 8019246:	d097      	beq.n	8019178 <__ieee754_expf+0x7c>
 8019248:	21fe      	movs	r1, #254	@ 0xfe
 801924a:	0589      	lsls	r1, r1, #22
 801924c:	e75f      	b.n	801910e <__ieee754_expf+0x12>
 801924e:	2500      	movs	r5, #0
 8019250:	e792      	b.n	8019178 <__ieee754_expf+0x7c>
 8019252:	2080      	movs	r0, #128	@ 0x80
 8019254:	1c31      	adds	r1, r6, #0
 8019256:	05c0      	lsls	r0, r0, #23
 8019258:	f7e7 ff5e 	bl	8001118 <__aeabi_fsub>
 801925c:	1c01      	adds	r1, r0, #0
 801925e:	9801      	ldr	r0, [sp, #4]
 8019260:	f7e7 fc36 	bl	8000ad0 <__aeabi_fdiv>
 8019264:	1c01      	adds	r1, r0, #0
 8019266:	9800      	ldr	r0, [sp, #0]
 8019268:	f7e7 ff56 	bl	8001118 <__aeabi_fsub>
 801926c:	1c39      	adds	r1, r7, #0
 801926e:	f7e7 ff53 	bl	8001118 <__aeabi_fsub>
 8019272:	1c01      	adds	r1, r0, #0
 8019274:	20fe      	movs	r0, #254	@ 0xfe
 8019276:	0580      	lsls	r0, r0, #22
 8019278:	f7e7 ff4e 	bl	8001118 <__aeabi_fsub>
 801927c:	002b      	movs	r3, r5
 801927e:	337d      	adds	r3, #125	@ 0x7d
 8019280:	db02      	blt.n	8019288 <__ieee754_expf+0x18c>
 8019282:	05ec      	lsls	r4, r5, #23
 8019284:	1824      	adds	r4, r4, r0
 8019286:	e74c      	b.n	8019122 <__ieee754_expf+0x26>
 8019288:	21d8      	movs	r1, #216	@ 0xd8
 801928a:	3564      	adds	r5, #100	@ 0x64
 801928c:	05ed      	lsls	r5, r5, #23
 801928e:	1828      	adds	r0, r5, r0
 8019290:	0509      	lsls	r1, r1, #20
 8019292:	f7e7 fe03 	bl	8000e9c <__aeabi_fmul>
 8019296:	e74c      	b.n	8019132 <__ieee754_expf+0x36>
 8019298:	2400      	movs	r4, #0
 801929a:	e742      	b.n	8019122 <__ieee754_expf+0x26>
 801929c:	42b17217 	.word	0x42b17217
 80192a0:	42cff1b5 	.word	0x42cff1b5
 80192a4:	3eb17218 	.word	0x3eb17218
 80192a8:	3f851591 	.word	0x3f851591
 80192ac:	0801a6e8 	.word	0x0801a6e8
 80192b0:	0801a6e0 	.word	0x0801a6e0
 80192b4:	3331bb4c 	.word	0x3331bb4c
 80192b8:	35ddea0e 	.word	0x35ddea0e
 80192bc:	388ab355 	.word	0x388ab355
 80192c0:	3b360b61 	.word	0x3b360b61
 80192c4:	3e2aaaab 	.word	0x3e2aaaab
 80192c8:	3fb8aa3b 	.word	0x3fb8aa3b
 80192cc:	0801a6f0 	.word	0x0801a6f0
 80192d0:	3f317180 	.word	0x3f317180
 80192d4:	3717f7d1 	.word	0x3717f7d1
 80192d8:	7149f2ca 	.word	0x7149f2ca

080192dc <with_errnof>:
 80192dc:	b570      	push	{r4, r5, r6, lr}
 80192de:	000d      	movs	r5, r1
 80192e0:	1c04      	adds	r4, r0, #0
 80192e2:	f7fd fb67 	bl	80169b4 <__errno>
 80192e6:	6005      	str	r5, [r0, #0]
 80192e8:	1c20      	adds	r0, r4, #0
 80192ea:	bd70      	pop	{r4, r5, r6, pc}

080192ec <xflowf>:
 80192ec:	b510      	push	{r4, lr}
 80192ee:	1c0b      	adds	r3, r1, #0
 80192f0:	2800      	cmp	r0, #0
 80192f2:	d002      	beq.n	80192fa <xflowf+0xe>
 80192f4:	2380      	movs	r3, #128	@ 0x80
 80192f6:	061b      	lsls	r3, r3, #24
 80192f8:	18cb      	adds	r3, r1, r3
 80192fa:	1c18      	adds	r0, r3, #0
 80192fc:	f7e7 fdce 	bl	8000e9c <__aeabi_fmul>
 8019300:	2122      	movs	r1, #34	@ 0x22
 8019302:	f7ff ffeb 	bl	80192dc <with_errnof>
 8019306:	bd10      	pop	{r4, pc}

08019308 <__math_uflowf>:
 8019308:	2180      	movs	r1, #128	@ 0x80
 801930a:	b510      	push	{r4, lr}
 801930c:	0549      	lsls	r1, r1, #21
 801930e:	f7ff ffed 	bl	80192ec <xflowf>
 8019312:	bd10      	pop	{r4, pc}

08019314 <__math_oflowf>:
 8019314:	21e0      	movs	r1, #224	@ 0xe0
 8019316:	b510      	push	{r4, lr}
 8019318:	05c9      	lsls	r1, r1, #23
 801931a:	f7ff ffe7 	bl	80192ec <xflowf>
 801931e:	bd10      	pop	{r4, pc}

08019320 <__ieee754_log>:
 8019320:	2380      	movs	r3, #128	@ 0x80
 8019322:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019324:	035b      	lsls	r3, r3, #13
 8019326:	000e      	movs	r6, r1
 8019328:	b08d      	sub	sp, #52	@ 0x34
 801932a:	4299      	cmp	r1, r3
 801932c:	da23      	bge.n	8019376 <__ieee754_log+0x56>
 801932e:	004b      	lsls	r3, r1, #1
 8019330:	085b      	lsrs	r3, r3, #1
 8019332:	4303      	orrs	r3, r0
 8019334:	d107      	bne.n	8019346 <__ieee754_log+0x26>
 8019336:	2200      	movs	r2, #0
 8019338:	2300      	movs	r3, #0
 801933a:	2000      	movs	r0, #0
 801933c:	49b4      	ldr	r1, [pc, #720]	@ (8019610 <__ieee754_log+0x2f0>)
 801933e:	f7e8 fcb7 	bl	8001cb0 <__aeabi_ddiv>
 8019342:	b00d      	add	sp, #52	@ 0x34
 8019344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019346:	2900      	cmp	r1, #0
 8019348:	da06      	bge.n	8019358 <__ieee754_log+0x38>
 801934a:	0002      	movs	r2, r0
 801934c:	000b      	movs	r3, r1
 801934e:	f7e9 fbbb 	bl	8002ac8 <__aeabi_dsub>
 8019352:	2200      	movs	r2, #0
 8019354:	2300      	movs	r3, #0
 8019356:	e7f2      	b.n	801933e <__ieee754_log+0x1e>
 8019358:	4bae      	ldr	r3, [pc, #696]	@ (8019614 <__ieee754_log+0x2f4>)
 801935a:	2200      	movs	r2, #0
 801935c:	f7e9 f8ec 	bl	8002538 <__aeabi_dmul>
 8019360:	2336      	movs	r3, #54	@ 0x36
 8019362:	000e      	movs	r6, r1
 8019364:	425b      	negs	r3, r3
 8019366:	4aac      	ldr	r2, [pc, #688]	@ (8019618 <__ieee754_log+0x2f8>)
 8019368:	4296      	cmp	r6, r2
 801936a:	dd06      	ble.n	801937a <__ieee754_log+0x5a>
 801936c:	0002      	movs	r2, r0
 801936e:	000b      	movs	r3, r1
 8019370:	f7e8 f93a 	bl	80015e8 <__aeabi_dadd>
 8019374:	e7e5      	b.n	8019342 <__ieee754_log+0x22>
 8019376:	2300      	movs	r3, #0
 8019378:	e7f5      	b.n	8019366 <__ieee754_log+0x46>
 801937a:	4ca8      	ldr	r4, [pc, #672]	@ (801961c <__ieee754_log+0x2fc>)
 801937c:	1532      	asrs	r2, r6, #20
 801937e:	1912      	adds	r2, r2, r4
 8019380:	0336      	lsls	r6, r6, #12
 8019382:	4ca7      	ldr	r4, [pc, #668]	@ (8019620 <__ieee754_log+0x300>)
 8019384:	18d2      	adds	r2, r2, r3
 8019386:	0b33      	lsrs	r3, r6, #12
 8019388:	9302      	str	r3, [sp, #8]
 801938a:	191b      	adds	r3, r3, r4
 801938c:	2480      	movs	r4, #128	@ 0x80
 801938e:	0364      	lsls	r4, r4, #13
 8019390:	4023      	ands	r3, r4
 8019392:	4ca4      	ldr	r4, [pc, #656]	@ (8019624 <__ieee754_log+0x304>)
 8019394:	9d02      	ldr	r5, [sp, #8]
 8019396:	405c      	eors	r4, r3
 8019398:	151b      	asrs	r3, r3, #20
 801939a:	189b      	adds	r3, r3, r2
 801939c:	4325      	orrs	r5, r4
 801939e:	2200      	movs	r2, #0
 80193a0:	9300      	str	r3, [sp, #0]
 80193a2:	0029      	movs	r1, r5
 80193a4:	4b9f      	ldr	r3, [pc, #636]	@ (8019624 <__ieee754_log+0x304>)
 80193a6:	f7e9 fb8f 	bl	8002ac8 <__aeabi_dsub>
 80193aa:	9b02      	ldr	r3, [sp, #8]
 80193ac:	0006      	movs	r6, r0
 80193ae:	3302      	adds	r3, #2
 80193b0:	031b      	lsls	r3, r3, #12
 80193b2:	000f      	movs	r7, r1
 80193b4:	2200      	movs	r2, #0
 80193b6:	0b1b      	lsrs	r3, r3, #12
 80193b8:	2b02      	cmp	r3, #2
 80193ba:	dc64      	bgt.n	8019486 <__ieee754_log+0x166>
 80193bc:	2300      	movs	r3, #0
 80193be:	f7e7 f845 	bl	800044c <__aeabi_dcmpeq>
 80193c2:	2800      	cmp	r0, #0
 80193c4:	d019      	beq.n	80193fa <__ieee754_log+0xda>
 80193c6:	9b00      	ldr	r3, [sp, #0]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d100      	bne.n	80193ce <__ieee754_log+0xae>
 80193cc:	e11c      	b.n	8019608 <__ieee754_log+0x2e8>
 80193ce:	0018      	movs	r0, r3
 80193d0:	f7e9 ff74 	bl	80032bc <__aeabi_i2d>
 80193d4:	4a94      	ldr	r2, [pc, #592]	@ (8019628 <__ieee754_log+0x308>)
 80193d6:	4b95      	ldr	r3, [pc, #596]	@ (801962c <__ieee754_log+0x30c>)
 80193d8:	0004      	movs	r4, r0
 80193da:	000d      	movs	r5, r1
 80193dc:	f7e9 f8ac 	bl	8002538 <__aeabi_dmul>
 80193e0:	4a93      	ldr	r2, [pc, #588]	@ (8019630 <__ieee754_log+0x310>)
 80193e2:	0006      	movs	r6, r0
 80193e4:	000f      	movs	r7, r1
 80193e6:	4b93      	ldr	r3, [pc, #588]	@ (8019634 <__ieee754_log+0x314>)
 80193e8:	0020      	movs	r0, r4
 80193ea:	0029      	movs	r1, r5
 80193ec:	f7e9 f8a4 	bl	8002538 <__aeabi_dmul>
 80193f0:	0002      	movs	r2, r0
 80193f2:	000b      	movs	r3, r1
 80193f4:	0030      	movs	r0, r6
 80193f6:	0039      	movs	r1, r7
 80193f8:	e7ba      	b.n	8019370 <__ieee754_log+0x50>
 80193fa:	4a8f      	ldr	r2, [pc, #572]	@ (8019638 <__ieee754_log+0x318>)
 80193fc:	4b8f      	ldr	r3, [pc, #572]	@ (801963c <__ieee754_log+0x31c>)
 80193fe:	0030      	movs	r0, r6
 8019400:	0039      	movs	r1, r7
 8019402:	f7e9 f899 	bl	8002538 <__aeabi_dmul>
 8019406:	0002      	movs	r2, r0
 8019408:	000b      	movs	r3, r1
 801940a:	2000      	movs	r0, #0
 801940c:	498c      	ldr	r1, [pc, #560]	@ (8019640 <__ieee754_log+0x320>)
 801940e:	f7e9 fb5b 	bl	8002ac8 <__aeabi_dsub>
 8019412:	0032      	movs	r2, r6
 8019414:	0004      	movs	r4, r0
 8019416:	000d      	movs	r5, r1
 8019418:	003b      	movs	r3, r7
 801941a:	0030      	movs	r0, r6
 801941c:	0039      	movs	r1, r7
 801941e:	f7e9 f88b 	bl	8002538 <__aeabi_dmul>
 8019422:	000b      	movs	r3, r1
 8019424:	0002      	movs	r2, r0
 8019426:	0029      	movs	r1, r5
 8019428:	0020      	movs	r0, r4
 801942a:	f7e9 f885 	bl	8002538 <__aeabi_dmul>
 801942e:	9b00      	ldr	r3, [sp, #0]
 8019430:	9002      	str	r0, [sp, #8]
 8019432:	9103      	str	r1, [sp, #12]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d106      	bne.n	8019446 <__ieee754_log+0x126>
 8019438:	0002      	movs	r2, r0
 801943a:	000b      	movs	r3, r1
 801943c:	0030      	movs	r0, r6
 801943e:	0039      	movs	r1, r7
 8019440:	f7e9 fb42 	bl	8002ac8 <__aeabi_dsub>
 8019444:	e77d      	b.n	8019342 <__ieee754_log+0x22>
 8019446:	9800      	ldr	r0, [sp, #0]
 8019448:	f7e9 ff38 	bl	80032bc <__aeabi_i2d>
 801944c:	4a76      	ldr	r2, [pc, #472]	@ (8019628 <__ieee754_log+0x308>)
 801944e:	4b77      	ldr	r3, [pc, #476]	@ (801962c <__ieee754_log+0x30c>)
 8019450:	0004      	movs	r4, r0
 8019452:	000d      	movs	r5, r1
 8019454:	f7e9 f870 	bl	8002538 <__aeabi_dmul>
 8019458:	4a75      	ldr	r2, [pc, #468]	@ (8019630 <__ieee754_log+0x310>)
 801945a:	9000      	str	r0, [sp, #0]
 801945c:	9101      	str	r1, [sp, #4]
 801945e:	4b75      	ldr	r3, [pc, #468]	@ (8019634 <__ieee754_log+0x314>)
 8019460:	0020      	movs	r0, r4
 8019462:	0029      	movs	r1, r5
 8019464:	f7e9 f868 	bl	8002538 <__aeabi_dmul>
 8019468:	0002      	movs	r2, r0
 801946a:	000b      	movs	r3, r1
 801946c:	9802      	ldr	r0, [sp, #8]
 801946e:	9903      	ldr	r1, [sp, #12]
 8019470:	f7e9 fb2a 	bl	8002ac8 <__aeabi_dsub>
 8019474:	0032      	movs	r2, r6
 8019476:	003b      	movs	r3, r7
 8019478:	f7e9 fb26 	bl	8002ac8 <__aeabi_dsub>
 801947c:	0002      	movs	r2, r0
 801947e:	000b      	movs	r3, r1
 8019480:	9800      	ldr	r0, [sp, #0]
 8019482:	9901      	ldr	r1, [sp, #4]
 8019484:	e7dc      	b.n	8019440 <__ieee754_log+0x120>
 8019486:	2380      	movs	r3, #128	@ 0x80
 8019488:	05db      	lsls	r3, r3, #23
 801948a:	f7e8 f8ad 	bl	80015e8 <__aeabi_dadd>
 801948e:	0002      	movs	r2, r0
 8019490:	000b      	movs	r3, r1
 8019492:	0030      	movs	r0, r6
 8019494:	0039      	movs	r1, r7
 8019496:	f7e8 fc0b 	bl	8001cb0 <__aeabi_ddiv>
 801949a:	9004      	str	r0, [sp, #16]
 801949c:	9105      	str	r1, [sp, #20]
 801949e:	9800      	ldr	r0, [sp, #0]
 80194a0:	f7e9 ff0c 	bl	80032bc <__aeabi_i2d>
 80194a4:	9a04      	ldr	r2, [sp, #16]
 80194a6:	9b05      	ldr	r3, [sp, #20]
 80194a8:	9006      	str	r0, [sp, #24]
 80194aa:	9107      	str	r1, [sp, #28]
 80194ac:	0010      	movs	r0, r2
 80194ae:	0019      	movs	r1, r3
 80194b0:	f7e9 f842 	bl	8002538 <__aeabi_dmul>
 80194b4:	4a63      	ldr	r2, [pc, #396]	@ (8019644 <__ieee754_log+0x324>)
 80194b6:	9b02      	ldr	r3, [sp, #8]
 80194b8:	4694      	mov	ip, r2
 80194ba:	4463      	add	r3, ip
 80194bc:	0002      	movs	r2, r0
 80194be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80194c0:	000b      	movs	r3, r1
 80194c2:	9008      	str	r0, [sp, #32]
 80194c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80194c6:	f7e9 f837 	bl	8002538 <__aeabi_dmul>
 80194ca:	0004      	movs	r4, r0
 80194cc:	000d      	movs	r5, r1
 80194ce:	4a5e      	ldr	r2, [pc, #376]	@ (8019648 <__ieee754_log+0x328>)
 80194d0:	4b5e      	ldr	r3, [pc, #376]	@ (801964c <__ieee754_log+0x32c>)
 80194d2:	f7e9 f831 	bl	8002538 <__aeabi_dmul>
 80194d6:	4a5e      	ldr	r2, [pc, #376]	@ (8019650 <__ieee754_log+0x330>)
 80194d8:	4b5e      	ldr	r3, [pc, #376]	@ (8019654 <__ieee754_log+0x334>)
 80194da:	f7e8 f885 	bl	80015e8 <__aeabi_dadd>
 80194de:	0022      	movs	r2, r4
 80194e0:	002b      	movs	r3, r5
 80194e2:	f7e9 f829 	bl	8002538 <__aeabi_dmul>
 80194e6:	4a5c      	ldr	r2, [pc, #368]	@ (8019658 <__ieee754_log+0x338>)
 80194e8:	4b5c      	ldr	r3, [pc, #368]	@ (801965c <__ieee754_log+0x33c>)
 80194ea:	f7e8 f87d 	bl	80015e8 <__aeabi_dadd>
 80194ee:	0022      	movs	r2, r4
 80194f0:	002b      	movs	r3, r5
 80194f2:	f7e9 f821 	bl	8002538 <__aeabi_dmul>
 80194f6:	4a5a      	ldr	r2, [pc, #360]	@ (8019660 <__ieee754_log+0x340>)
 80194f8:	4b5a      	ldr	r3, [pc, #360]	@ (8019664 <__ieee754_log+0x344>)
 80194fa:	f7e8 f875 	bl	80015e8 <__aeabi_dadd>
 80194fe:	9a08      	ldr	r2, [sp, #32]
 8019500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019502:	f7e9 f819 	bl	8002538 <__aeabi_dmul>
 8019506:	4a58      	ldr	r2, [pc, #352]	@ (8019668 <__ieee754_log+0x348>)
 8019508:	9008      	str	r0, [sp, #32]
 801950a:	9109      	str	r1, [sp, #36]	@ 0x24
 801950c:	4b57      	ldr	r3, [pc, #348]	@ (801966c <__ieee754_log+0x34c>)
 801950e:	0020      	movs	r0, r4
 8019510:	0029      	movs	r1, r5
 8019512:	f7e9 f811 	bl	8002538 <__aeabi_dmul>
 8019516:	4a56      	ldr	r2, [pc, #344]	@ (8019670 <__ieee754_log+0x350>)
 8019518:	4b56      	ldr	r3, [pc, #344]	@ (8019674 <__ieee754_log+0x354>)
 801951a:	f7e8 f865 	bl	80015e8 <__aeabi_dadd>
 801951e:	0022      	movs	r2, r4
 8019520:	002b      	movs	r3, r5
 8019522:	f7e9 f809 	bl	8002538 <__aeabi_dmul>
 8019526:	4a54      	ldr	r2, [pc, #336]	@ (8019678 <__ieee754_log+0x358>)
 8019528:	4b54      	ldr	r3, [pc, #336]	@ (801967c <__ieee754_log+0x35c>)
 801952a:	f7e8 f85d 	bl	80015e8 <__aeabi_dadd>
 801952e:	0022      	movs	r2, r4
 8019530:	002b      	movs	r3, r5
 8019532:	f7e9 f801 	bl	8002538 <__aeabi_dmul>
 8019536:	0002      	movs	r2, r0
 8019538:	000b      	movs	r3, r1
 801953a:	9808      	ldr	r0, [sp, #32]
 801953c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801953e:	f7e8 f853 	bl	80015e8 <__aeabi_dadd>
 8019542:	9a02      	ldr	r2, [sp, #8]
 8019544:	4b4e      	ldr	r3, [pc, #312]	@ (8019680 <__ieee754_log+0x360>)
 8019546:	0004      	movs	r4, r0
 8019548:	1a9b      	subs	r3, r3, r2
 801954a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801954c:	000d      	movs	r5, r1
 801954e:	4313      	orrs	r3, r2
 8019550:	2b00      	cmp	r3, #0
 8019552:	dd34      	ble.n	80195be <__ieee754_log+0x29e>
 8019554:	2200      	movs	r2, #0
 8019556:	4b3a      	ldr	r3, [pc, #232]	@ (8019640 <__ieee754_log+0x320>)
 8019558:	0030      	movs	r0, r6
 801955a:	0039      	movs	r1, r7
 801955c:	f7e8 ffec 	bl	8002538 <__aeabi_dmul>
 8019560:	0032      	movs	r2, r6
 8019562:	003b      	movs	r3, r7
 8019564:	f7e8 ffe8 	bl	8002538 <__aeabi_dmul>
 8019568:	0002      	movs	r2, r0
 801956a:	000b      	movs	r3, r1
 801956c:	9002      	str	r0, [sp, #8]
 801956e:	9103      	str	r1, [sp, #12]
 8019570:	0020      	movs	r0, r4
 8019572:	0029      	movs	r1, r5
 8019574:	f7e8 f838 	bl	80015e8 <__aeabi_dadd>
 8019578:	9a04      	ldr	r2, [sp, #16]
 801957a:	9b05      	ldr	r3, [sp, #20]
 801957c:	f7e8 ffdc 	bl	8002538 <__aeabi_dmul>
 8019580:	9b00      	ldr	r3, [sp, #0]
 8019582:	0004      	movs	r4, r0
 8019584:	000d      	movs	r5, r1
 8019586:	2b00      	cmp	r3, #0
 8019588:	d106      	bne.n	8019598 <__ieee754_log+0x278>
 801958a:	0002      	movs	r2, r0
 801958c:	000b      	movs	r3, r1
 801958e:	9802      	ldr	r0, [sp, #8]
 8019590:	9903      	ldr	r1, [sp, #12]
 8019592:	f7e9 fa99 	bl	8002ac8 <__aeabi_dsub>
 8019596:	e74f      	b.n	8019438 <__ieee754_log+0x118>
 8019598:	4a23      	ldr	r2, [pc, #140]	@ (8019628 <__ieee754_log+0x308>)
 801959a:	4b24      	ldr	r3, [pc, #144]	@ (801962c <__ieee754_log+0x30c>)
 801959c:	9806      	ldr	r0, [sp, #24]
 801959e:	9907      	ldr	r1, [sp, #28]
 80195a0:	f7e8 ffca 	bl	8002538 <__aeabi_dmul>
 80195a4:	4a22      	ldr	r2, [pc, #136]	@ (8019630 <__ieee754_log+0x310>)
 80195a6:	9000      	str	r0, [sp, #0]
 80195a8:	9101      	str	r1, [sp, #4]
 80195aa:	9806      	ldr	r0, [sp, #24]
 80195ac:	9907      	ldr	r1, [sp, #28]
 80195ae:	4b21      	ldr	r3, [pc, #132]	@ (8019634 <__ieee754_log+0x314>)
 80195b0:	f7e8 ffc2 	bl	8002538 <__aeabi_dmul>
 80195b4:	0022      	movs	r2, r4
 80195b6:	002b      	movs	r3, r5
 80195b8:	f7e8 f816 	bl	80015e8 <__aeabi_dadd>
 80195bc:	e754      	b.n	8019468 <__ieee754_log+0x148>
 80195be:	0002      	movs	r2, r0
 80195c0:	000b      	movs	r3, r1
 80195c2:	0030      	movs	r0, r6
 80195c4:	0039      	movs	r1, r7
 80195c6:	f7e9 fa7f 	bl	8002ac8 <__aeabi_dsub>
 80195ca:	9a04      	ldr	r2, [sp, #16]
 80195cc:	9b05      	ldr	r3, [sp, #20]
 80195ce:	f7e8 ffb3 	bl	8002538 <__aeabi_dmul>
 80195d2:	9b00      	ldr	r3, [sp, #0]
 80195d4:	0004      	movs	r4, r0
 80195d6:	000d      	movs	r5, r1
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d102      	bne.n	80195e2 <__ieee754_log+0x2c2>
 80195dc:	0002      	movs	r2, r0
 80195de:	000b      	movs	r3, r1
 80195e0:	e72c      	b.n	801943c <__ieee754_log+0x11c>
 80195e2:	4a11      	ldr	r2, [pc, #68]	@ (8019628 <__ieee754_log+0x308>)
 80195e4:	4b11      	ldr	r3, [pc, #68]	@ (801962c <__ieee754_log+0x30c>)
 80195e6:	9806      	ldr	r0, [sp, #24]
 80195e8:	9907      	ldr	r1, [sp, #28]
 80195ea:	f7e8 ffa5 	bl	8002538 <__aeabi_dmul>
 80195ee:	4a10      	ldr	r2, [pc, #64]	@ (8019630 <__ieee754_log+0x310>)
 80195f0:	9000      	str	r0, [sp, #0]
 80195f2:	9101      	str	r1, [sp, #4]
 80195f4:	9806      	ldr	r0, [sp, #24]
 80195f6:	9907      	ldr	r1, [sp, #28]
 80195f8:	4b0e      	ldr	r3, [pc, #56]	@ (8019634 <__ieee754_log+0x314>)
 80195fa:	f7e8 ff9d 	bl	8002538 <__aeabi_dmul>
 80195fe:	0002      	movs	r2, r0
 8019600:	000b      	movs	r3, r1
 8019602:	0020      	movs	r0, r4
 8019604:	0029      	movs	r1, r5
 8019606:	e733      	b.n	8019470 <__ieee754_log+0x150>
 8019608:	2000      	movs	r0, #0
 801960a:	2100      	movs	r1, #0
 801960c:	e699      	b.n	8019342 <__ieee754_log+0x22>
 801960e:	46c0      	nop			@ (mov r8, r8)
 8019610:	c3500000 	.word	0xc3500000
 8019614:	43500000 	.word	0x43500000
 8019618:	7fefffff 	.word	0x7fefffff
 801961c:	fffffc01 	.word	0xfffffc01
 8019620:	00095f64 	.word	0x00095f64
 8019624:	3ff00000 	.word	0x3ff00000
 8019628:	fee00000 	.word	0xfee00000
 801962c:	3fe62e42 	.word	0x3fe62e42
 8019630:	35793c76 	.word	0x35793c76
 8019634:	3dea39ef 	.word	0x3dea39ef
 8019638:	55555555 	.word	0x55555555
 801963c:	3fd55555 	.word	0x3fd55555
 8019640:	3fe00000 	.word	0x3fe00000
 8019644:	fff9eb86 	.word	0xfff9eb86
 8019648:	df3e5244 	.word	0xdf3e5244
 801964c:	3fc2f112 	.word	0x3fc2f112
 8019650:	96cb03de 	.word	0x96cb03de
 8019654:	3fc74664 	.word	0x3fc74664
 8019658:	94229359 	.word	0x94229359
 801965c:	3fd24924 	.word	0x3fd24924
 8019660:	55555593 	.word	0x55555593
 8019664:	3fe55555 	.word	0x3fe55555
 8019668:	d078c69f 	.word	0xd078c69f
 801966c:	3fc39a09 	.word	0x3fc39a09
 8019670:	1d8e78af 	.word	0x1d8e78af
 8019674:	3fcc71c5 	.word	0x3fcc71c5
 8019678:	9997fa04 	.word	0x9997fa04
 801967c:	3fd99999 	.word	0x3fd99999
 8019680:	0006b851 	.word	0x0006b851

08019684 <_init>:
 8019684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019686:	46c0      	nop			@ (mov r8, r8)
 8019688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801968a:	bc08      	pop	{r3}
 801968c:	469e      	mov	lr, r3
 801968e:	4770      	bx	lr

08019690 <_fini>:
 8019690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019692:	46c0      	nop			@ (mov r8, r8)
 8019694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019696:	bc08      	pop	{r3}
 8019698:	469e      	mov	lr, r3
 801969a:	4770      	bx	lr
