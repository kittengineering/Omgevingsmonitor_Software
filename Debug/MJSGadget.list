
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcc4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000788  0800bd88  0800bd88  0000cd88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c510  0800c510  0000e1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c510  0800c510  0000d510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c518  0800c518  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c518  0800c518  0000d518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c51c  0800c51c  0000d51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800c520  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c70  200001ec  0800c70c  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20000e5c  0800c70c  0000ee5c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117b0  00000000  00000000  0000e214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003575  00000000  00000000  0001f9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  00022f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5d  00000000  00000000  00023e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e93  00000000  00000000  0002499d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019095  00000000  00000000  0003b830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008107d  00000000  00000000  000548c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5942  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004568  00000000  00000000  000d5988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d9ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bd6c 	.word	0x0800bd6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	0800bd6c 	.word	0x0800bd6c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fd13 	bl	8001e68 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc53 	bl	8001cf8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd05 	bl	8001e68 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fcfb 	bl	8001e68 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc7d 	bl	8001d80 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc73 	bl	8001d80 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	@ (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			@ (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1824      	adds	r4, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	42a3      	cmp	r3, r4
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	@ 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c23      	lsrs	r3, r4, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0424      	lsls	r4, r4, #16
 8000536:	1960      	adds	r0, r4, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f002 fcf0 	bl	8002f48 <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f002 fceb 	bl	8002f48 <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	d434      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057a:	469b      	mov	fp, r3
 800057c:	4653      	mov	r3, sl
 800057e:	465a      	mov	r2, fp
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83b      	bhi.n	8000608 <__udivmoddi4+0xc4>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e079      	b.n	800068a <__udivmoddi4+0x146>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e076      	b.n	8000690 <__udivmoddi4+0x14c>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e029      	b.n	8000610 <__udivmoddi4+0xcc>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	469b      	mov	fp, r3
 80005e8:	2320      	movs	r3, #32
 80005ea:	1a9b      	subs	r3, r3, r2
 80005ec:	4652      	mov	r2, sl
 80005ee:	40da      	lsrs	r2, r3
 80005f0:	4641      	mov	r1, r8
 80005f2:	0013      	movs	r3, r2
 80005f4:	464a      	mov	r2, r9
 80005f6:	408a      	lsls	r2, r1
 80005f8:	0017      	movs	r7, r2
 80005fa:	4642      	mov	r2, r8
 80005fc:	431f      	orrs	r7, r3
 80005fe:	4653      	mov	r3, sl
 8000600:	4093      	lsls	r3, r2
 8000602:	001e      	movs	r6, r3
 8000604:	42af      	cmp	r7, r5
 8000606:	d9c3      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000608:	2200      	movs	r2, #0
 800060a:	2300      	movs	r3, #0
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	4643      	mov	r3, r8
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0d8      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000616:	07fb      	lsls	r3, r7, #31
 8000618:	0872      	lsrs	r2, r6, #1
 800061a:	431a      	orrs	r2, r3
 800061c:	4646      	mov	r6, r8
 800061e:	087b      	lsrs	r3, r7, #1
 8000620:	e00e      	b.n	8000640 <__udivmoddi4+0xfc>
 8000622:	42ab      	cmp	r3, r5
 8000624:	d101      	bne.n	800062a <__udivmoddi4+0xe6>
 8000626:	42a2      	cmp	r2, r4
 8000628:	d80c      	bhi.n	8000644 <__udivmoddi4+0x100>
 800062a:	1aa4      	subs	r4, r4, r2
 800062c:	419d      	sbcs	r5, r3
 800062e:	2001      	movs	r0, #1
 8000630:	1924      	adds	r4, r4, r4
 8000632:	416d      	adcs	r5, r5
 8000634:	2100      	movs	r1, #0
 8000636:	3e01      	subs	r6, #1
 8000638:	1824      	adds	r4, r4, r0
 800063a:	414d      	adcs	r5, r1
 800063c:	2e00      	cmp	r6, #0
 800063e:	d006      	beq.n	800064e <__udivmoddi4+0x10a>
 8000640:	42ab      	cmp	r3, r5
 8000642:	d9ee      	bls.n	8000622 <__udivmoddi4+0xde>
 8000644:	3e01      	subs	r6, #1
 8000646:	1924      	adds	r4, r4, r4
 8000648:	416d      	adcs	r5, r5
 800064a:	2e00      	cmp	r6, #0
 800064c:	d1f8      	bne.n	8000640 <__udivmoddi4+0xfc>
 800064e:	9800      	ldr	r0, [sp, #0]
 8000650:	9901      	ldr	r1, [sp, #4]
 8000652:	465b      	mov	r3, fp
 8000654:	1900      	adds	r0, r0, r4
 8000656:	4169      	adcs	r1, r5
 8000658:	2b00      	cmp	r3, #0
 800065a:	db24      	blt.n	80006a6 <__udivmoddi4+0x162>
 800065c:	002b      	movs	r3, r5
 800065e:	465a      	mov	r2, fp
 8000660:	4644      	mov	r4, r8
 8000662:	40d3      	lsrs	r3, r2
 8000664:	002a      	movs	r2, r5
 8000666:	40e2      	lsrs	r2, r4
 8000668:	001c      	movs	r4, r3
 800066a:	465b      	mov	r3, fp
 800066c:	0015      	movs	r5, r2
 800066e:	2b00      	cmp	r3, #0
 8000670:	db2a      	blt.n	80006c8 <__udivmoddi4+0x184>
 8000672:	0026      	movs	r6, r4
 8000674:	409e      	lsls	r6, r3
 8000676:	0033      	movs	r3, r6
 8000678:	0026      	movs	r6, r4
 800067a:	4647      	mov	r7, r8
 800067c:	40be      	lsls	r6, r7
 800067e:	0032      	movs	r2, r6
 8000680:	1a80      	subs	r0, r0, r2
 8000682:	4199      	sbcs	r1, r3
 8000684:	9000      	str	r0, [sp, #0]
 8000686:	9101      	str	r1, [sp, #4]
 8000688:	e79e      	b.n	80005c8 <__udivmoddi4+0x84>
 800068a:	42a3      	cmp	r3, r4
 800068c:	d8bc      	bhi.n	8000608 <__udivmoddi4+0xc4>
 800068e:	e782      	b.n	8000596 <__udivmoddi4+0x52>
 8000690:	4642      	mov	r2, r8
 8000692:	2320      	movs	r3, #32
 8000694:	2100      	movs	r1, #0
 8000696:	1a9b      	subs	r3, r3, r2
 8000698:	2200      	movs	r2, #0
 800069a:	9100      	str	r1, [sp, #0]
 800069c:	9201      	str	r2, [sp, #4]
 800069e:	2201      	movs	r2, #1
 80006a0:	40da      	lsrs	r2, r3
 80006a2:	9201      	str	r2, [sp, #4]
 80006a4:	e785      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a6:	4642      	mov	r2, r8
 80006a8:	2320      	movs	r3, #32
 80006aa:	1a9b      	subs	r3, r3, r2
 80006ac:	002a      	movs	r2, r5
 80006ae:	4646      	mov	r6, r8
 80006b0:	409a      	lsls	r2, r3
 80006b2:	0023      	movs	r3, r4
 80006b4:	40f3      	lsrs	r3, r6
 80006b6:	4644      	mov	r4, r8
 80006b8:	4313      	orrs	r3, r2
 80006ba:	002a      	movs	r2, r5
 80006bc:	40e2      	lsrs	r2, r4
 80006be:	001c      	movs	r4, r3
 80006c0:	465b      	mov	r3, fp
 80006c2:	0015      	movs	r5, r2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	dad4      	bge.n	8000672 <__udivmoddi4+0x12e>
 80006c8:	4642      	mov	r2, r8
 80006ca:	002f      	movs	r7, r5
 80006cc:	2320      	movs	r3, #32
 80006ce:	0026      	movs	r6, r4
 80006d0:	4097      	lsls	r7, r2
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	40de      	lsrs	r6, r3
 80006d6:	003b      	movs	r3, r7
 80006d8:	4333      	orrs	r3, r6
 80006da:	e7cd      	b.n	8000678 <__udivmoddi4+0x134>

080006dc <__aeabi_fadd>:
 80006dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006de:	46ce      	mov	lr, r9
 80006e0:	4647      	mov	r7, r8
 80006e2:	0243      	lsls	r3, r0, #9
 80006e4:	0a5a      	lsrs	r2, r3, #9
 80006e6:	024e      	lsls	r6, r1, #9
 80006e8:	0045      	lsls	r5, r0, #1
 80006ea:	0fc4      	lsrs	r4, r0, #31
 80006ec:	0048      	lsls	r0, r1, #1
 80006ee:	4691      	mov	r9, r2
 80006f0:	0e2d      	lsrs	r5, r5, #24
 80006f2:	0a72      	lsrs	r2, r6, #9
 80006f4:	0e00      	lsrs	r0, r0, #24
 80006f6:	4694      	mov	ip, r2
 80006f8:	b580      	push	{r7, lr}
 80006fa:	099b      	lsrs	r3, r3, #6
 80006fc:	0fc9      	lsrs	r1, r1, #31
 80006fe:	09b6      	lsrs	r6, r6, #6
 8000700:	1a2a      	subs	r2, r5, r0
 8000702:	428c      	cmp	r4, r1
 8000704:	d021      	beq.n	800074a <__aeabi_fadd+0x6e>
 8000706:	2a00      	cmp	r2, #0
 8000708:	dd0d      	ble.n	8000726 <__aeabi_fadd+0x4a>
 800070a:	2800      	cmp	r0, #0
 800070c:	d12d      	bne.n	800076a <__aeabi_fadd+0x8e>
 800070e:	2e00      	cmp	r6, #0
 8000710:	d100      	bne.n	8000714 <__aeabi_fadd+0x38>
 8000712:	e08d      	b.n	8000830 <__aeabi_fadd+0x154>
 8000714:	1e51      	subs	r1, r2, #1
 8000716:	2a01      	cmp	r2, #1
 8000718:	d100      	bne.n	800071c <__aeabi_fadd+0x40>
 800071a:	e11d      	b.n	8000958 <__aeabi_fadd+0x27c>
 800071c:	2aff      	cmp	r2, #255	@ 0xff
 800071e:	d100      	bne.n	8000722 <__aeabi_fadd+0x46>
 8000720:	e0ab      	b.n	800087a <__aeabi_fadd+0x19e>
 8000722:	000a      	movs	r2, r1
 8000724:	e027      	b.n	8000776 <__aeabi_fadd+0x9a>
 8000726:	2a00      	cmp	r2, #0
 8000728:	d04d      	beq.n	80007c6 <__aeabi_fadd+0xea>
 800072a:	1b42      	subs	r2, r0, r5
 800072c:	2d00      	cmp	r5, #0
 800072e:	d000      	beq.n	8000732 <__aeabi_fadd+0x56>
 8000730:	e0cc      	b.n	80008cc <__aeabi_fadd+0x1f0>
 8000732:	2b00      	cmp	r3, #0
 8000734:	d100      	bne.n	8000738 <__aeabi_fadd+0x5c>
 8000736:	e079      	b.n	800082c <__aeabi_fadd+0x150>
 8000738:	1e54      	subs	r4, r2, #1
 800073a:	2a01      	cmp	r2, #1
 800073c:	d100      	bne.n	8000740 <__aeabi_fadd+0x64>
 800073e:	e128      	b.n	8000992 <__aeabi_fadd+0x2b6>
 8000740:	2aff      	cmp	r2, #255	@ 0xff
 8000742:	d100      	bne.n	8000746 <__aeabi_fadd+0x6a>
 8000744:	e097      	b.n	8000876 <__aeabi_fadd+0x19a>
 8000746:	0022      	movs	r2, r4
 8000748:	e0c5      	b.n	80008d6 <__aeabi_fadd+0x1fa>
 800074a:	2a00      	cmp	r2, #0
 800074c:	dc00      	bgt.n	8000750 <__aeabi_fadd+0x74>
 800074e:	e096      	b.n	800087e <__aeabi_fadd+0x1a2>
 8000750:	2800      	cmp	r0, #0
 8000752:	d04f      	beq.n	80007f4 <__aeabi_fadd+0x118>
 8000754:	2dff      	cmp	r5, #255	@ 0xff
 8000756:	d100      	bne.n	800075a <__aeabi_fadd+0x7e>
 8000758:	e08f      	b.n	800087a <__aeabi_fadd+0x19e>
 800075a:	2180      	movs	r1, #128	@ 0x80
 800075c:	04c9      	lsls	r1, r1, #19
 800075e:	430e      	orrs	r6, r1
 8000760:	2a1b      	cmp	r2, #27
 8000762:	dd51      	ble.n	8000808 <__aeabi_fadd+0x12c>
 8000764:	002a      	movs	r2, r5
 8000766:	3301      	adds	r3, #1
 8000768:	e018      	b.n	800079c <__aeabi_fadd+0xc0>
 800076a:	2dff      	cmp	r5, #255	@ 0xff
 800076c:	d100      	bne.n	8000770 <__aeabi_fadd+0x94>
 800076e:	e084      	b.n	800087a <__aeabi_fadd+0x19e>
 8000770:	2180      	movs	r1, #128	@ 0x80
 8000772:	04c9      	lsls	r1, r1, #19
 8000774:	430e      	orrs	r6, r1
 8000776:	2101      	movs	r1, #1
 8000778:	2a1b      	cmp	r2, #27
 800077a:	dc08      	bgt.n	800078e <__aeabi_fadd+0xb2>
 800077c:	0031      	movs	r1, r6
 800077e:	2020      	movs	r0, #32
 8000780:	40d1      	lsrs	r1, r2
 8000782:	1a82      	subs	r2, r0, r2
 8000784:	4096      	lsls	r6, r2
 8000786:	0032      	movs	r2, r6
 8000788:	1e50      	subs	r0, r2, #1
 800078a:	4182      	sbcs	r2, r0
 800078c:	4311      	orrs	r1, r2
 800078e:	1a5b      	subs	r3, r3, r1
 8000790:	015a      	lsls	r2, r3, #5
 8000792:	d459      	bmi.n	8000848 <__aeabi_fadd+0x16c>
 8000794:	2107      	movs	r1, #7
 8000796:	002a      	movs	r2, r5
 8000798:	4019      	ands	r1, r3
 800079a:	d049      	beq.n	8000830 <__aeabi_fadd+0x154>
 800079c:	210f      	movs	r1, #15
 800079e:	4019      	ands	r1, r3
 80007a0:	2904      	cmp	r1, #4
 80007a2:	d000      	beq.n	80007a6 <__aeabi_fadd+0xca>
 80007a4:	3304      	adds	r3, #4
 80007a6:	0159      	lsls	r1, r3, #5
 80007a8:	d542      	bpl.n	8000830 <__aeabi_fadd+0x154>
 80007aa:	1c50      	adds	r0, r2, #1
 80007ac:	2afe      	cmp	r2, #254	@ 0xfe
 80007ae:	d03a      	beq.n	8000826 <__aeabi_fadd+0x14a>
 80007b0:	019b      	lsls	r3, r3, #6
 80007b2:	b2c0      	uxtb	r0, r0
 80007b4:	0a5b      	lsrs	r3, r3, #9
 80007b6:	05c0      	lsls	r0, r0, #23
 80007b8:	4318      	orrs	r0, r3
 80007ba:	07e4      	lsls	r4, r4, #31
 80007bc:	4320      	orrs	r0, r4
 80007be:	bcc0      	pop	{r6, r7}
 80007c0:	46b9      	mov	r9, r7
 80007c2:	46b0      	mov	r8, r6
 80007c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007c6:	20fe      	movs	r0, #254	@ 0xfe
 80007c8:	4680      	mov	r8, r0
 80007ca:	1c6f      	adds	r7, r5, #1
 80007cc:	0038      	movs	r0, r7
 80007ce:	4647      	mov	r7, r8
 80007d0:	4207      	tst	r7, r0
 80007d2:	d000      	beq.n	80007d6 <__aeabi_fadd+0xfa>
 80007d4:	e08e      	b.n	80008f4 <__aeabi_fadd+0x218>
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	d000      	beq.n	80007dc <__aeabi_fadd+0x100>
 80007da:	e0b4      	b.n	8000946 <__aeabi_fadd+0x26a>
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d100      	bne.n	80007e2 <__aeabi_fadd+0x106>
 80007e0:	e0db      	b.n	800099a <__aeabi_fadd+0x2be>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d06c      	beq.n	80008c0 <__aeabi_fadd+0x1e4>
 80007e6:	1b98      	subs	r0, r3, r6
 80007e8:	0145      	lsls	r5, r0, #5
 80007ea:	d400      	bmi.n	80007ee <__aeabi_fadd+0x112>
 80007ec:	e0f7      	b.n	80009de <__aeabi_fadd+0x302>
 80007ee:	000c      	movs	r4, r1
 80007f0:	1af3      	subs	r3, r6, r3
 80007f2:	e03d      	b.n	8000870 <__aeabi_fadd+0x194>
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d01b      	beq.n	8000830 <__aeabi_fadd+0x154>
 80007f8:	1e51      	subs	r1, r2, #1
 80007fa:	2a01      	cmp	r2, #1
 80007fc:	d100      	bne.n	8000800 <__aeabi_fadd+0x124>
 80007fe:	e082      	b.n	8000906 <__aeabi_fadd+0x22a>
 8000800:	2aff      	cmp	r2, #255	@ 0xff
 8000802:	d03a      	beq.n	800087a <__aeabi_fadd+0x19e>
 8000804:	000a      	movs	r2, r1
 8000806:	e7ab      	b.n	8000760 <__aeabi_fadd+0x84>
 8000808:	0031      	movs	r1, r6
 800080a:	2020      	movs	r0, #32
 800080c:	40d1      	lsrs	r1, r2
 800080e:	1a82      	subs	r2, r0, r2
 8000810:	4096      	lsls	r6, r2
 8000812:	0032      	movs	r2, r6
 8000814:	1e50      	subs	r0, r2, #1
 8000816:	4182      	sbcs	r2, r0
 8000818:	430a      	orrs	r2, r1
 800081a:	189b      	adds	r3, r3, r2
 800081c:	015a      	lsls	r2, r3, #5
 800081e:	d5b9      	bpl.n	8000794 <__aeabi_fadd+0xb8>
 8000820:	1c6a      	adds	r2, r5, #1
 8000822:	2dfe      	cmp	r5, #254	@ 0xfe
 8000824:	d175      	bne.n	8000912 <__aeabi_fadd+0x236>
 8000826:	20ff      	movs	r0, #255	@ 0xff
 8000828:	2300      	movs	r3, #0
 800082a:	e7c4      	b.n	80007b6 <__aeabi_fadd+0xda>
 800082c:	000c      	movs	r4, r1
 800082e:	0033      	movs	r3, r6
 8000830:	08db      	lsrs	r3, r3, #3
 8000832:	2aff      	cmp	r2, #255	@ 0xff
 8000834:	d146      	bne.n	80008c4 <__aeabi_fadd+0x1e8>
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0f5      	beq.n	8000826 <__aeabi_fadd+0x14a>
 800083a:	2280      	movs	r2, #128	@ 0x80
 800083c:	03d2      	lsls	r2, r2, #15
 800083e:	4313      	orrs	r3, r2
 8000840:	025b      	lsls	r3, r3, #9
 8000842:	20ff      	movs	r0, #255	@ 0xff
 8000844:	0a5b      	lsrs	r3, r3, #9
 8000846:	e7b6      	b.n	80007b6 <__aeabi_fadd+0xda>
 8000848:	019f      	lsls	r7, r3, #6
 800084a:	09bf      	lsrs	r7, r7, #6
 800084c:	0038      	movs	r0, r7
 800084e:	f002 fb5d 	bl	8002f0c <__clzsi2>
 8000852:	3805      	subs	r0, #5
 8000854:	4087      	lsls	r7, r0
 8000856:	4285      	cmp	r5, r0
 8000858:	dc24      	bgt.n	80008a4 <__aeabi_fadd+0x1c8>
 800085a:	003b      	movs	r3, r7
 800085c:	2120      	movs	r1, #32
 800085e:	1b42      	subs	r2, r0, r5
 8000860:	3201      	adds	r2, #1
 8000862:	40d3      	lsrs	r3, r2
 8000864:	1a8a      	subs	r2, r1, r2
 8000866:	4097      	lsls	r7, r2
 8000868:	1e7a      	subs	r2, r7, #1
 800086a:	4197      	sbcs	r7, r2
 800086c:	2200      	movs	r2, #0
 800086e:	433b      	orrs	r3, r7
 8000870:	0759      	lsls	r1, r3, #29
 8000872:	d193      	bne.n	800079c <__aeabi_fadd+0xc0>
 8000874:	e797      	b.n	80007a6 <__aeabi_fadd+0xca>
 8000876:	000c      	movs	r4, r1
 8000878:	0033      	movs	r3, r6
 800087a:	08db      	lsrs	r3, r3, #3
 800087c:	e7db      	b.n	8000836 <__aeabi_fadd+0x15a>
 800087e:	2a00      	cmp	r2, #0
 8000880:	d014      	beq.n	80008ac <__aeabi_fadd+0x1d0>
 8000882:	1b42      	subs	r2, r0, r5
 8000884:	2d00      	cmp	r5, #0
 8000886:	d14b      	bne.n	8000920 <__aeabi_fadd+0x244>
 8000888:	2b00      	cmp	r3, #0
 800088a:	d0d0      	beq.n	800082e <__aeabi_fadd+0x152>
 800088c:	1e51      	subs	r1, r2, #1
 800088e:	2a01      	cmp	r2, #1
 8000890:	d100      	bne.n	8000894 <__aeabi_fadd+0x1b8>
 8000892:	e09e      	b.n	80009d2 <__aeabi_fadd+0x2f6>
 8000894:	2aff      	cmp	r2, #255	@ 0xff
 8000896:	d0ef      	beq.n	8000878 <__aeabi_fadd+0x19c>
 8000898:	000a      	movs	r2, r1
 800089a:	2a1b      	cmp	r2, #27
 800089c:	dd5f      	ble.n	800095e <__aeabi_fadd+0x282>
 800089e:	0002      	movs	r2, r0
 80008a0:	1c73      	adds	r3, r6, #1
 80008a2:	e77b      	b.n	800079c <__aeabi_fadd+0xc0>
 80008a4:	4b50      	ldr	r3, [pc, #320]	@ (80009e8 <__aeabi_fadd+0x30c>)
 80008a6:	1a2a      	subs	r2, r5, r0
 80008a8:	403b      	ands	r3, r7
 80008aa:	e7e1      	b.n	8000870 <__aeabi_fadd+0x194>
 80008ac:	21fe      	movs	r1, #254	@ 0xfe
 80008ae:	1c6a      	adds	r2, r5, #1
 80008b0:	4211      	tst	r1, r2
 80008b2:	d13b      	bne.n	800092c <__aeabi_fadd+0x250>
 80008b4:	2d00      	cmp	r5, #0
 80008b6:	d15d      	bne.n	8000974 <__aeabi_fadd+0x298>
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d07f      	beq.n	80009bc <__aeabi_fadd+0x2e0>
 80008bc:	2e00      	cmp	r6, #0
 80008be:	d17f      	bne.n	80009c0 <__aeabi_fadd+0x2e4>
 80008c0:	2200      	movs	r2, #0
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	025b      	lsls	r3, r3, #9
 80008c6:	0a5b      	lsrs	r3, r3, #9
 80008c8:	b2d0      	uxtb	r0, r2
 80008ca:	e774      	b.n	80007b6 <__aeabi_fadd+0xda>
 80008cc:	28ff      	cmp	r0, #255	@ 0xff
 80008ce:	d0d2      	beq.n	8000876 <__aeabi_fadd+0x19a>
 80008d0:	2480      	movs	r4, #128	@ 0x80
 80008d2:	04e4      	lsls	r4, r4, #19
 80008d4:	4323      	orrs	r3, r4
 80008d6:	2401      	movs	r4, #1
 80008d8:	2a1b      	cmp	r2, #27
 80008da:	dc07      	bgt.n	80008ec <__aeabi_fadd+0x210>
 80008dc:	001c      	movs	r4, r3
 80008de:	2520      	movs	r5, #32
 80008e0:	40d4      	lsrs	r4, r2
 80008e2:	1aaa      	subs	r2, r5, r2
 80008e4:	4093      	lsls	r3, r2
 80008e6:	1e5a      	subs	r2, r3, #1
 80008e8:	4193      	sbcs	r3, r2
 80008ea:	431c      	orrs	r4, r3
 80008ec:	1b33      	subs	r3, r6, r4
 80008ee:	0005      	movs	r5, r0
 80008f0:	000c      	movs	r4, r1
 80008f2:	e74d      	b.n	8000790 <__aeabi_fadd+0xb4>
 80008f4:	1b9f      	subs	r7, r3, r6
 80008f6:	017a      	lsls	r2, r7, #5
 80008f8:	d422      	bmi.n	8000940 <__aeabi_fadd+0x264>
 80008fa:	2f00      	cmp	r7, #0
 80008fc:	d1a6      	bne.n	800084c <__aeabi_fadd+0x170>
 80008fe:	2400      	movs	r4, #0
 8000900:	2000      	movs	r0, #0
 8000902:	2300      	movs	r3, #0
 8000904:	e757      	b.n	80007b6 <__aeabi_fadd+0xda>
 8000906:	199b      	adds	r3, r3, r6
 8000908:	2501      	movs	r5, #1
 800090a:	3201      	adds	r2, #1
 800090c:	0159      	lsls	r1, r3, #5
 800090e:	d400      	bmi.n	8000912 <__aeabi_fadd+0x236>
 8000910:	e740      	b.n	8000794 <__aeabi_fadd+0xb8>
 8000912:	2101      	movs	r1, #1
 8000914:	4835      	ldr	r0, [pc, #212]	@ (80009ec <__aeabi_fadd+0x310>)
 8000916:	4019      	ands	r1, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	4003      	ands	r3, r0
 800091c:	430b      	orrs	r3, r1
 800091e:	e7a7      	b.n	8000870 <__aeabi_fadd+0x194>
 8000920:	28ff      	cmp	r0, #255	@ 0xff
 8000922:	d0a9      	beq.n	8000878 <__aeabi_fadd+0x19c>
 8000924:	2180      	movs	r1, #128	@ 0x80
 8000926:	04c9      	lsls	r1, r1, #19
 8000928:	430b      	orrs	r3, r1
 800092a:	e7b6      	b.n	800089a <__aeabi_fadd+0x1be>
 800092c:	2aff      	cmp	r2, #255	@ 0xff
 800092e:	d100      	bne.n	8000932 <__aeabi_fadd+0x256>
 8000930:	e779      	b.n	8000826 <__aeabi_fadd+0x14a>
 8000932:	199b      	adds	r3, r3, r6
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	0759      	lsls	r1, r3, #29
 8000938:	d000      	beq.n	800093c <__aeabi_fadd+0x260>
 800093a:	e72f      	b.n	800079c <__aeabi_fadd+0xc0>
 800093c:	08db      	lsrs	r3, r3, #3
 800093e:	e7c1      	b.n	80008c4 <__aeabi_fadd+0x1e8>
 8000940:	000c      	movs	r4, r1
 8000942:	1af7      	subs	r7, r6, r3
 8000944:	e782      	b.n	800084c <__aeabi_fadd+0x170>
 8000946:	2b00      	cmp	r3, #0
 8000948:	d12c      	bne.n	80009a4 <__aeabi_fadd+0x2c8>
 800094a:	2e00      	cmp	r6, #0
 800094c:	d193      	bne.n	8000876 <__aeabi_fadd+0x19a>
 800094e:	2380      	movs	r3, #128	@ 0x80
 8000950:	2400      	movs	r4, #0
 8000952:	20ff      	movs	r0, #255	@ 0xff
 8000954:	03db      	lsls	r3, r3, #15
 8000956:	e72e      	b.n	80007b6 <__aeabi_fadd+0xda>
 8000958:	2501      	movs	r5, #1
 800095a:	1b9b      	subs	r3, r3, r6
 800095c:	e718      	b.n	8000790 <__aeabi_fadd+0xb4>
 800095e:	0019      	movs	r1, r3
 8000960:	2520      	movs	r5, #32
 8000962:	40d1      	lsrs	r1, r2
 8000964:	1aaa      	subs	r2, r5, r2
 8000966:	4093      	lsls	r3, r2
 8000968:	1e5a      	subs	r2, r3, #1
 800096a:	4193      	sbcs	r3, r2
 800096c:	430b      	orrs	r3, r1
 800096e:	0005      	movs	r5, r0
 8000970:	199b      	adds	r3, r3, r6
 8000972:	e753      	b.n	800081c <__aeabi_fadd+0x140>
 8000974:	2b00      	cmp	r3, #0
 8000976:	d100      	bne.n	800097a <__aeabi_fadd+0x29e>
 8000978:	e77e      	b.n	8000878 <__aeabi_fadd+0x19c>
 800097a:	2e00      	cmp	r6, #0
 800097c:	d100      	bne.n	8000980 <__aeabi_fadd+0x2a4>
 800097e:	e77c      	b.n	800087a <__aeabi_fadd+0x19e>
 8000980:	2280      	movs	r2, #128	@ 0x80
 8000982:	03d2      	lsls	r2, r2, #15
 8000984:	4591      	cmp	r9, r2
 8000986:	d302      	bcc.n	800098e <__aeabi_fadd+0x2b2>
 8000988:	4594      	cmp	ip, r2
 800098a:	d200      	bcs.n	800098e <__aeabi_fadd+0x2b2>
 800098c:	0033      	movs	r3, r6
 800098e:	08db      	lsrs	r3, r3, #3
 8000990:	e753      	b.n	800083a <__aeabi_fadd+0x15e>
 8000992:	000c      	movs	r4, r1
 8000994:	1af3      	subs	r3, r6, r3
 8000996:	3501      	adds	r5, #1
 8000998:	e6fa      	b.n	8000790 <__aeabi_fadd+0xb4>
 800099a:	2e00      	cmp	r6, #0
 800099c:	d0af      	beq.n	80008fe <__aeabi_fadd+0x222>
 800099e:	000c      	movs	r4, r1
 80009a0:	0033      	movs	r3, r6
 80009a2:	e78d      	b.n	80008c0 <__aeabi_fadd+0x1e4>
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d100      	bne.n	80009aa <__aeabi_fadd+0x2ce>
 80009a8:	e767      	b.n	800087a <__aeabi_fadd+0x19e>
 80009aa:	2280      	movs	r2, #128	@ 0x80
 80009ac:	03d2      	lsls	r2, r2, #15
 80009ae:	4591      	cmp	r9, r2
 80009b0:	d3ed      	bcc.n	800098e <__aeabi_fadd+0x2b2>
 80009b2:	4594      	cmp	ip, r2
 80009b4:	d2eb      	bcs.n	800098e <__aeabi_fadd+0x2b2>
 80009b6:	000c      	movs	r4, r1
 80009b8:	0033      	movs	r3, r6
 80009ba:	e7e8      	b.n	800098e <__aeabi_fadd+0x2b2>
 80009bc:	0033      	movs	r3, r6
 80009be:	e77f      	b.n	80008c0 <__aeabi_fadd+0x1e4>
 80009c0:	199b      	adds	r3, r3, r6
 80009c2:	2200      	movs	r2, #0
 80009c4:	0159      	lsls	r1, r3, #5
 80009c6:	d5b9      	bpl.n	800093c <__aeabi_fadd+0x260>
 80009c8:	4a07      	ldr	r2, [pc, #28]	@ (80009e8 <__aeabi_fadd+0x30c>)
 80009ca:	4013      	ands	r3, r2
 80009cc:	08db      	lsrs	r3, r3, #3
 80009ce:	2201      	movs	r2, #1
 80009d0:	e778      	b.n	80008c4 <__aeabi_fadd+0x1e8>
 80009d2:	199b      	adds	r3, r3, r6
 80009d4:	3201      	adds	r2, #1
 80009d6:	3501      	adds	r5, #1
 80009d8:	0159      	lsls	r1, r3, #5
 80009da:	d49a      	bmi.n	8000912 <__aeabi_fadd+0x236>
 80009dc:	e6da      	b.n	8000794 <__aeabi_fadd+0xb8>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d08d      	beq.n	80008fe <__aeabi_fadd+0x222>
 80009e2:	08db      	lsrs	r3, r3, #3
 80009e4:	e76e      	b.n	80008c4 <__aeabi_fadd+0x1e8>
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	fbffffff 	.word	0xfbffffff
 80009ec:	7dffffff 	.word	0x7dffffff

080009f0 <__aeabi_fdiv>:
 80009f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f2:	464f      	mov	r7, r9
 80009f4:	4646      	mov	r6, r8
 80009f6:	46d6      	mov	lr, sl
 80009f8:	0244      	lsls	r4, r0, #9
 80009fa:	b5c0      	push	{r6, r7, lr}
 80009fc:	0047      	lsls	r7, r0, #1
 80009fe:	1c0e      	adds	r6, r1, #0
 8000a00:	0a64      	lsrs	r4, r4, #9
 8000a02:	0e3f      	lsrs	r7, r7, #24
 8000a04:	0fc5      	lsrs	r5, r0, #31
 8000a06:	2f00      	cmp	r7, #0
 8000a08:	d03c      	beq.n	8000a84 <__aeabi_fdiv+0x94>
 8000a0a:	2fff      	cmp	r7, #255	@ 0xff
 8000a0c:	d042      	beq.n	8000a94 <__aeabi_fdiv+0xa4>
 8000a0e:	2300      	movs	r3, #0
 8000a10:	2280      	movs	r2, #128	@ 0x80
 8000a12:	4699      	mov	r9, r3
 8000a14:	469a      	mov	sl, r3
 8000a16:	00e4      	lsls	r4, r4, #3
 8000a18:	04d2      	lsls	r2, r2, #19
 8000a1a:	4314      	orrs	r4, r2
 8000a1c:	3f7f      	subs	r7, #127	@ 0x7f
 8000a1e:	0273      	lsls	r3, r6, #9
 8000a20:	0a5b      	lsrs	r3, r3, #9
 8000a22:	4698      	mov	r8, r3
 8000a24:	0073      	lsls	r3, r6, #1
 8000a26:	0e1b      	lsrs	r3, r3, #24
 8000a28:	0ff6      	lsrs	r6, r6, #31
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d01b      	beq.n	8000a66 <__aeabi_fdiv+0x76>
 8000a2e:	2bff      	cmp	r3, #255	@ 0xff
 8000a30:	d013      	beq.n	8000a5a <__aeabi_fdiv+0x6a>
 8000a32:	4642      	mov	r2, r8
 8000a34:	2180      	movs	r1, #128	@ 0x80
 8000a36:	00d2      	lsls	r2, r2, #3
 8000a38:	04c9      	lsls	r1, r1, #19
 8000a3a:	4311      	orrs	r1, r2
 8000a3c:	4688      	mov	r8, r1
 8000a3e:	2000      	movs	r0, #0
 8000a40:	3b7f      	subs	r3, #127	@ 0x7f
 8000a42:	0029      	movs	r1, r5
 8000a44:	1aff      	subs	r7, r7, r3
 8000a46:	464b      	mov	r3, r9
 8000a48:	4071      	eors	r1, r6
 8000a4a:	b2c9      	uxtb	r1, r1
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d900      	bls.n	8000a52 <__aeabi_fdiv+0x62>
 8000a50:	e0b5      	b.n	8000bbe <__aeabi_fdiv+0x1ce>
 8000a52:	4a74      	ldr	r2, [pc, #464]	@ (8000c24 <__aeabi_fdiv+0x234>)
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	58d3      	ldr	r3, [r2, r3]
 8000a58:	469f      	mov	pc, r3
 8000a5a:	4643      	mov	r3, r8
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d13f      	bne.n	8000ae0 <__aeabi_fdiv+0xf0>
 8000a60:	3fff      	subs	r7, #255	@ 0xff
 8000a62:	3302      	adds	r3, #2
 8000a64:	e003      	b.n	8000a6e <__aeabi_fdiv+0x7e>
 8000a66:	4643      	mov	r3, r8
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d12d      	bne.n	8000ac8 <__aeabi_fdiv+0xd8>
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	0029      	movs	r1, r5
 8000a70:	464a      	mov	r2, r9
 8000a72:	4071      	eors	r1, r6
 8000a74:	b2c9      	uxtb	r1, r1
 8000a76:	431a      	orrs	r2, r3
 8000a78:	2a0e      	cmp	r2, #14
 8000a7a:	d838      	bhi.n	8000aee <__aeabi_fdiv+0xfe>
 8000a7c:	486a      	ldr	r0, [pc, #424]	@ (8000c28 <__aeabi_fdiv+0x238>)
 8000a7e:	0092      	lsls	r2, r2, #2
 8000a80:	5882      	ldr	r2, [r0, r2]
 8000a82:	4697      	mov	pc, r2
 8000a84:	2c00      	cmp	r4, #0
 8000a86:	d113      	bne.n	8000ab0 <__aeabi_fdiv+0xc0>
 8000a88:	2304      	movs	r3, #4
 8000a8a:	4699      	mov	r9, r3
 8000a8c:	3b03      	subs	r3, #3
 8000a8e:	2700      	movs	r7, #0
 8000a90:	469a      	mov	sl, r3
 8000a92:	e7c4      	b.n	8000a1e <__aeabi_fdiv+0x2e>
 8000a94:	2c00      	cmp	r4, #0
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_fdiv+0xb4>
 8000a98:	2308      	movs	r3, #8
 8000a9a:	4699      	mov	r9, r3
 8000a9c:	3b06      	subs	r3, #6
 8000a9e:	27ff      	movs	r7, #255	@ 0xff
 8000aa0:	469a      	mov	sl, r3
 8000aa2:	e7bc      	b.n	8000a1e <__aeabi_fdiv+0x2e>
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	4699      	mov	r9, r3
 8000aa8:	3b09      	subs	r3, #9
 8000aaa:	27ff      	movs	r7, #255	@ 0xff
 8000aac:	469a      	mov	sl, r3
 8000aae:	e7b6      	b.n	8000a1e <__aeabi_fdiv+0x2e>
 8000ab0:	0020      	movs	r0, r4
 8000ab2:	f002 fa2b 	bl	8002f0c <__clzsi2>
 8000ab6:	2776      	movs	r7, #118	@ 0x76
 8000ab8:	1f43      	subs	r3, r0, #5
 8000aba:	409c      	lsls	r4, r3
 8000abc:	2300      	movs	r3, #0
 8000abe:	427f      	negs	r7, r7
 8000ac0:	4699      	mov	r9, r3
 8000ac2:	469a      	mov	sl, r3
 8000ac4:	1a3f      	subs	r7, r7, r0
 8000ac6:	e7aa      	b.n	8000a1e <__aeabi_fdiv+0x2e>
 8000ac8:	4640      	mov	r0, r8
 8000aca:	f002 fa1f 	bl	8002f0c <__clzsi2>
 8000ace:	4642      	mov	r2, r8
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	2376      	movs	r3, #118	@ 0x76
 8000ad6:	425b      	negs	r3, r3
 8000ad8:	1a1b      	subs	r3, r3, r0
 8000ada:	4690      	mov	r8, r2
 8000adc:	2000      	movs	r0, #0
 8000ade:	e7b0      	b.n	8000a42 <__aeabi_fdiv+0x52>
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	464a      	mov	r2, r9
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	4691      	mov	r9, r2
 8000ae8:	2003      	movs	r0, #3
 8000aea:	33fc      	adds	r3, #252	@ 0xfc
 8000aec:	e7a9      	b.n	8000a42 <__aeabi_fdiv+0x52>
 8000aee:	000d      	movs	r5, r1
 8000af0:	20ff      	movs	r0, #255	@ 0xff
 8000af2:	2200      	movs	r2, #0
 8000af4:	05c0      	lsls	r0, r0, #23
 8000af6:	07ed      	lsls	r5, r5, #31
 8000af8:	4310      	orrs	r0, r2
 8000afa:	4328      	orrs	r0, r5
 8000afc:	bce0      	pop	{r5, r6, r7}
 8000afe:	46ba      	mov	sl, r7
 8000b00:	46b1      	mov	r9, r6
 8000b02:	46a8      	mov	r8, r5
 8000b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b06:	000d      	movs	r5, r1
 8000b08:	2000      	movs	r0, #0
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	e7f2      	b.n	8000af4 <__aeabi_fdiv+0x104>
 8000b0e:	4653      	mov	r3, sl
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d0ed      	beq.n	8000af0 <__aeabi_fdiv+0x100>
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	d033      	beq.n	8000b80 <__aeabi_fdiv+0x190>
 8000b18:	46a0      	mov	r8, r4
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d105      	bne.n	8000b2a <__aeabi_fdiv+0x13a>
 8000b1e:	2000      	movs	r0, #0
 8000b20:	2200      	movs	r2, #0
 8000b22:	e7e7      	b.n	8000af4 <__aeabi_fdiv+0x104>
 8000b24:	0035      	movs	r5, r6
 8000b26:	2803      	cmp	r0, #3
 8000b28:	d07a      	beq.n	8000c20 <__aeabi_fdiv+0x230>
 8000b2a:	003b      	movs	r3, r7
 8000b2c:	337f      	adds	r3, #127	@ 0x7f
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	dd2d      	ble.n	8000b8e <__aeabi_fdiv+0x19e>
 8000b32:	4642      	mov	r2, r8
 8000b34:	0752      	lsls	r2, r2, #29
 8000b36:	d007      	beq.n	8000b48 <__aeabi_fdiv+0x158>
 8000b38:	220f      	movs	r2, #15
 8000b3a:	4641      	mov	r1, r8
 8000b3c:	400a      	ands	r2, r1
 8000b3e:	2a04      	cmp	r2, #4
 8000b40:	d002      	beq.n	8000b48 <__aeabi_fdiv+0x158>
 8000b42:	2204      	movs	r2, #4
 8000b44:	4694      	mov	ip, r2
 8000b46:	44e0      	add	r8, ip
 8000b48:	4642      	mov	r2, r8
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	d505      	bpl.n	8000b5a <__aeabi_fdiv+0x16a>
 8000b4e:	4642      	mov	r2, r8
 8000b50:	4b36      	ldr	r3, [pc, #216]	@ (8000c2c <__aeabi_fdiv+0x23c>)
 8000b52:	401a      	ands	r2, r3
 8000b54:	003b      	movs	r3, r7
 8000b56:	4690      	mov	r8, r2
 8000b58:	3380      	adds	r3, #128	@ 0x80
 8000b5a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b5c:	dcc8      	bgt.n	8000af0 <__aeabi_fdiv+0x100>
 8000b5e:	4642      	mov	r2, r8
 8000b60:	0192      	lsls	r2, r2, #6
 8000b62:	0a52      	lsrs	r2, r2, #9
 8000b64:	b2d8      	uxtb	r0, r3
 8000b66:	e7c5      	b.n	8000af4 <__aeabi_fdiv+0x104>
 8000b68:	2280      	movs	r2, #128	@ 0x80
 8000b6a:	2500      	movs	r5, #0
 8000b6c:	20ff      	movs	r0, #255	@ 0xff
 8000b6e:	03d2      	lsls	r2, r2, #15
 8000b70:	e7c0      	b.n	8000af4 <__aeabi_fdiv+0x104>
 8000b72:	2280      	movs	r2, #128	@ 0x80
 8000b74:	03d2      	lsls	r2, r2, #15
 8000b76:	4214      	tst	r4, r2
 8000b78:	d002      	beq.n	8000b80 <__aeabi_fdiv+0x190>
 8000b7a:	4643      	mov	r3, r8
 8000b7c:	4213      	tst	r3, r2
 8000b7e:	d049      	beq.n	8000c14 <__aeabi_fdiv+0x224>
 8000b80:	2280      	movs	r2, #128	@ 0x80
 8000b82:	03d2      	lsls	r2, r2, #15
 8000b84:	4322      	orrs	r2, r4
 8000b86:	0252      	lsls	r2, r2, #9
 8000b88:	20ff      	movs	r0, #255	@ 0xff
 8000b8a:	0a52      	lsrs	r2, r2, #9
 8000b8c:	e7b2      	b.n	8000af4 <__aeabi_fdiv+0x104>
 8000b8e:	2201      	movs	r2, #1
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	2b1b      	cmp	r3, #27
 8000b94:	dcc3      	bgt.n	8000b1e <__aeabi_fdiv+0x12e>
 8000b96:	4642      	mov	r2, r8
 8000b98:	40da      	lsrs	r2, r3
 8000b9a:	4643      	mov	r3, r8
 8000b9c:	379e      	adds	r7, #158	@ 0x9e
 8000b9e:	40bb      	lsls	r3, r7
 8000ba0:	1e59      	subs	r1, r3, #1
 8000ba2:	418b      	sbcs	r3, r1
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	0753      	lsls	r3, r2, #29
 8000ba8:	d004      	beq.n	8000bb4 <__aeabi_fdiv+0x1c4>
 8000baa:	230f      	movs	r3, #15
 8000bac:	4013      	ands	r3, r2
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_fdiv+0x1c4>
 8000bb2:	3204      	adds	r2, #4
 8000bb4:	0153      	lsls	r3, r2, #5
 8000bb6:	d529      	bpl.n	8000c0c <__aeabi_fdiv+0x21c>
 8000bb8:	2001      	movs	r0, #1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	e79a      	b.n	8000af4 <__aeabi_fdiv+0x104>
 8000bbe:	4642      	mov	r2, r8
 8000bc0:	0163      	lsls	r3, r4, #5
 8000bc2:	0155      	lsls	r5, r2, #5
 8000bc4:	42ab      	cmp	r3, r5
 8000bc6:	d215      	bcs.n	8000bf4 <__aeabi_fdiv+0x204>
 8000bc8:	201b      	movs	r0, #27
 8000bca:	2200      	movs	r2, #0
 8000bcc:	3f01      	subs	r7, #1
 8000bce:	2601      	movs	r6, #1
 8000bd0:	001c      	movs	r4, r3
 8000bd2:	0052      	lsls	r2, r2, #1
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	2c00      	cmp	r4, #0
 8000bd8:	db01      	blt.n	8000bde <__aeabi_fdiv+0x1ee>
 8000bda:	429d      	cmp	r5, r3
 8000bdc:	d801      	bhi.n	8000be2 <__aeabi_fdiv+0x1f2>
 8000bde:	1b5b      	subs	r3, r3, r5
 8000be0:	4332      	orrs	r2, r6
 8000be2:	3801      	subs	r0, #1
 8000be4:	2800      	cmp	r0, #0
 8000be6:	d1f3      	bne.n	8000bd0 <__aeabi_fdiv+0x1e0>
 8000be8:	1e58      	subs	r0, r3, #1
 8000bea:	4183      	sbcs	r3, r0
 8000bec:	4313      	orrs	r3, r2
 8000bee:	4698      	mov	r8, r3
 8000bf0:	000d      	movs	r5, r1
 8000bf2:	e79a      	b.n	8000b2a <__aeabi_fdiv+0x13a>
 8000bf4:	201a      	movs	r0, #26
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	1b5b      	subs	r3, r3, r5
 8000bfa:	e7e8      	b.n	8000bce <__aeabi_fdiv+0x1de>
 8000bfc:	3b02      	subs	r3, #2
 8000bfe:	425a      	negs	r2, r3
 8000c00:	4153      	adcs	r3, r2
 8000c02:	425b      	negs	r3, r3
 8000c04:	0035      	movs	r5, r6
 8000c06:	2200      	movs	r2, #0
 8000c08:	b2d8      	uxtb	r0, r3
 8000c0a:	e773      	b.n	8000af4 <__aeabi_fdiv+0x104>
 8000c0c:	0192      	lsls	r2, r2, #6
 8000c0e:	2000      	movs	r0, #0
 8000c10:	0a52      	lsrs	r2, r2, #9
 8000c12:	e76f      	b.n	8000af4 <__aeabi_fdiv+0x104>
 8000c14:	431a      	orrs	r2, r3
 8000c16:	0252      	lsls	r2, r2, #9
 8000c18:	0035      	movs	r5, r6
 8000c1a:	20ff      	movs	r0, #255	@ 0xff
 8000c1c:	0a52      	lsrs	r2, r2, #9
 8000c1e:	e769      	b.n	8000af4 <__aeabi_fdiv+0x104>
 8000c20:	4644      	mov	r4, r8
 8000c22:	e7ad      	b.n	8000b80 <__aeabi_fdiv+0x190>
 8000c24:	0800c078 	.word	0x0800c078
 8000c28:	0800c0b8 	.word	0x0800c0b8
 8000c2c:	f7ffffff 	.word	0xf7ffffff

08000c30 <__aeabi_fsub>:
 8000c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c32:	4647      	mov	r7, r8
 8000c34:	46ce      	mov	lr, r9
 8000c36:	024e      	lsls	r6, r1, #9
 8000c38:	0243      	lsls	r3, r0, #9
 8000c3a:	0045      	lsls	r5, r0, #1
 8000c3c:	0a72      	lsrs	r2, r6, #9
 8000c3e:	0fc4      	lsrs	r4, r0, #31
 8000c40:	0048      	lsls	r0, r1, #1
 8000c42:	b580      	push	{r7, lr}
 8000c44:	4694      	mov	ip, r2
 8000c46:	0a5f      	lsrs	r7, r3, #9
 8000c48:	0e2d      	lsrs	r5, r5, #24
 8000c4a:	099b      	lsrs	r3, r3, #6
 8000c4c:	0e00      	lsrs	r0, r0, #24
 8000c4e:	0fc9      	lsrs	r1, r1, #31
 8000c50:	09b6      	lsrs	r6, r6, #6
 8000c52:	28ff      	cmp	r0, #255	@ 0xff
 8000c54:	d024      	beq.n	8000ca0 <__aeabi_fsub+0x70>
 8000c56:	2201      	movs	r2, #1
 8000c58:	4051      	eors	r1, r2
 8000c5a:	1a2a      	subs	r2, r5, r0
 8000c5c:	428c      	cmp	r4, r1
 8000c5e:	d00f      	beq.n	8000c80 <__aeabi_fsub+0x50>
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	dc00      	bgt.n	8000c66 <__aeabi_fsub+0x36>
 8000c64:	e16a      	b.n	8000f3c <__aeabi_fsub+0x30c>
 8000c66:	2800      	cmp	r0, #0
 8000c68:	d135      	bne.n	8000cd6 <__aeabi_fsub+0xa6>
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_fsub+0x40>
 8000c6e:	e0a2      	b.n	8000db6 <__aeabi_fsub+0x186>
 8000c70:	1e51      	subs	r1, r2, #1
 8000c72:	2a01      	cmp	r2, #1
 8000c74:	d100      	bne.n	8000c78 <__aeabi_fsub+0x48>
 8000c76:	e124      	b.n	8000ec2 <__aeabi_fsub+0x292>
 8000c78:	2aff      	cmp	r2, #255	@ 0xff
 8000c7a:	d021      	beq.n	8000cc0 <__aeabi_fsub+0x90>
 8000c7c:	000a      	movs	r2, r1
 8000c7e:	e02f      	b.n	8000ce0 <__aeabi_fsub+0xb0>
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	dc00      	bgt.n	8000c86 <__aeabi_fsub+0x56>
 8000c84:	e167      	b.n	8000f56 <__aeabi_fsub+0x326>
 8000c86:	2800      	cmp	r0, #0
 8000c88:	d05e      	beq.n	8000d48 <__aeabi_fsub+0x118>
 8000c8a:	2dff      	cmp	r5, #255	@ 0xff
 8000c8c:	d018      	beq.n	8000cc0 <__aeabi_fsub+0x90>
 8000c8e:	2180      	movs	r1, #128	@ 0x80
 8000c90:	04c9      	lsls	r1, r1, #19
 8000c92:	430e      	orrs	r6, r1
 8000c94:	2a1b      	cmp	r2, #27
 8000c96:	dc00      	bgt.n	8000c9a <__aeabi_fsub+0x6a>
 8000c98:	e076      	b.n	8000d88 <__aeabi_fsub+0x158>
 8000c9a:	002a      	movs	r2, r5
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	e032      	b.n	8000d06 <__aeabi_fsub+0xd6>
 8000ca0:	002a      	movs	r2, r5
 8000ca2:	3aff      	subs	r2, #255	@ 0xff
 8000ca4:	4691      	mov	r9, r2
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d042      	beq.n	8000d30 <__aeabi_fsub+0x100>
 8000caa:	428c      	cmp	r4, r1
 8000cac:	d055      	beq.n	8000d5a <__aeabi_fsub+0x12a>
 8000cae:	464a      	mov	r2, r9
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_fsub+0x86>
 8000cb4:	e09c      	b.n	8000df0 <__aeabi_fsub+0x1c0>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_fsub+0x8c>
 8000cba:	e077      	b.n	8000dac <__aeabi_fsub+0x17c>
 8000cbc:	000c      	movs	r4, r1
 8000cbe:	0033      	movs	r3, r6
 8000cc0:	08db      	lsrs	r3, r3, #3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_fsub+0x98>
 8000cc6:	e06e      	b.n	8000da6 <__aeabi_fsub+0x176>
 8000cc8:	2280      	movs	r2, #128	@ 0x80
 8000cca:	03d2      	lsls	r2, r2, #15
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	025b      	lsls	r3, r3, #9
 8000cd0:	20ff      	movs	r0, #255	@ 0xff
 8000cd2:	0a5b      	lsrs	r3, r3, #9
 8000cd4:	e024      	b.n	8000d20 <__aeabi_fsub+0xf0>
 8000cd6:	2dff      	cmp	r5, #255	@ 0xff
 8000cd8:	d0f2      	beq.n	8000cc0 <__aeabi_fsub+0x90>
 8000cda:	2180      	movs	r1, #128	@ 0x80
 8000cdc:	04c9      	lsls	r1, r1, #19
 8000cde:	430e      	orrs	r6, r1
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	2a1b      	cmp	r2, #27
 8000ce4:	dc08      	bgt.n	8000cf8 <__aeabi_fsub+0xc8>
 8000ce6:	0031      	movs	r1, r6
 8000ce8:	2020      	movs	r0, #32
 8000cea:	40d1      	lsrs	r1, r2
 8000cec:	1a82      	subs	r2, r0, r2
 8000cee:	4096      	lsls	r6, r2
 8000cf0:	0032      	movs	r2, r6
 8000cf2:	1e50      	subs	r0, r2, #1
 8000cf4:	4182      	sbcs	r2, r0
 8000cf6:	4311      	orrs	r1, r2
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	015a      	lsls	r2, r3, #5
 8000cfc:	d460      	bmi.n	8000dc0 <__aeabi_fsub+0x190>
 8000cfe:	2107      	movs	r1, #7
 8000d00:	002a      	movs	r2, r5
 8000d02:	4019      	ands	r1, r3
 8000d04:	d057      	beq.n	8000db6 <__aeabi_fsub+0x186>
 8000d06:	210f      	movs	r1, #15
 8000d08:	4019      	ands	r1, r3
 8000d0a:	2904      	cmp	r1, #4
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_fsub+0xe0>
 8000d0e:	3304      	adds	r3, #4
 8000d10:	0159      	lsls	r1, r3, #5
 8000d12:	d550      	bpl.n	8000db6 <__aeabi_fsub+0x186>
 8000d14:	1c50      	adds	r0, r2, #1
 8000d16:	2afe      	cmp	r2, #254	@ 0xfe
 8000d18:	d045      	beq.n	8000da6 <__aeabi_fsub+0x176>
 8000d1a:	019b      	lsls	r3, r3, #6
 8000d1c:	b2c0      	uxtb	r0, r0
 8000d1e:	0a5b      	lsrs	r3, r3, #9
 8000d20:	05c0      	lsls	r0, r0, #23
 8000d22:	4318      	orrs	r0, r3
 8000d24:	07e4      	lsls	r4, r4, #31
 8000d26:	4320      	orrs	r0, r4
 8000d28:	bcc0      	pop	{r6, r7}
 8000d2a:	46b9      	mov	r9, r7
 8000d2c:	46b0      	mov	r8, r6
 8000d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d30:	2201      	movs	r2, #1
 8000d32:	4051      	eors	r1, r2
 8000d34:	428c      	cmp	r4, r1
 8000d36:	d1ba      	bne.n	8000cae <__aeabi_fsub+0x7e>
 8000d38:	464a      	mov	r2, r9
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	d010      	beq.n	8000d60 <__aeabi_fsub+0x130>
 8000d3e:	2d00      	cmp	r5, #0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fsub+0x114>
 8000d42:	e098      	b.n	8000e76 <__aeabi_fsub+0x246>
 8000d44:	2300      	movs	r3, #0
 8000d46:	e7bb      	b.n	8000cc0 <__aeabi_fsub+0x90>
 8000d48:	2e00      	cmp	r6, #0
 8000d4a:	d034      	beq.n	8000db6 <__aeabi_fsub+0x186>
 8000d4c:	1e51      	subs	r1, r2, #1
 8000d4e:	2a01      	cmp	r2, #1
 8000d50:	d06e      	beq.n	8000e30 <__aeabi_fsub+0x200>
 8000d52:	2aff      	cmp	r2, #255	@ 0xff
 8000d54:	d0b4      	beq.n	8000cc0 <__aeabi_fsub+0x90>
 8000d56:	000a      	movs	r2, r1
 8000d58:	e79c      	b.n	8000c94 <__aeabi_fsub+0x64>
 8000d5a:	2a00      	cmp	r2, #0
 8000d5c:	d000      	beq.n	8000d60 <__aeabi_fsub+0x130>
 8000d5e:	e088      	b.n	8000e72 <__aeabi_fsub+0x242>
 8000d60:	20fe      	movs	r0, #254	@ 0xfe
 8000d62:	1c6a      	adds	r2, r5, #1
 8000d64:	4210      	tst	r0, r2
 8000d66:	d000      	beq.n	8000d6a <__aeabi_fsub+0x13a>
 8000d68:	e092      	b.n	8000e90 <__aeabi_fsub+0x260>
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d000      	beq.n	8000d70 <__aeabi_fsub+0x140>
 8000d6e:	e0a4      	b.n	8000eba <__aeabi_fsub+0x28a>
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d100      	bne.n	8000d76 <__aeabi_fsub+0x146>
 8000d74:	e0cb      	b.n	8000f0e <__aeabi_fsub+0x2de>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d000      	beq.n	8000d7c <__aeabi_fsub+0x14c>
 8000d7a:	e0ca      	b.n	8000f12 <__aeabi_fsub+0x2e2>
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	08db      	lsrs	r3, r3, #3
 8000d80:	025b      	lsls	r3, r3, #9
 8000d82:	0a5b      	lsrs	r3, r3, #9
 8000d84:	b2d0      	uxtb	r0, r2
 8000d86:	e7cb      	b.n	8000d20 <__aeabi_fsub+0xf0>
 8000d88:	0031      	movs	r1, r6
 8000d8a:	2020      	movs	r0, #32
 8000d8c:	40d1      	lsrs	r1, r2
 8000d8e:	1a82      	subs	r2, r0, r2
 8000d90:	4096      	lsls	r6, r2
 8000d92:	0032      	movs	r2, r6
 8000d94:	1e50      	subs	r0, r2, #1
 8000d96:	4182      	sbcs	r2, r0
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	189b      	adds	r3, r3, r2
 8000d9c:	015a      	lsls	r2, r3, #5
 8000d9e:	d5ae      	bpl.n	8000cfe <__aeabi_fsub+0xce>
 8000da0:	1c6a      	adds	r2, r5, #1
 8000da2:	2dfe      	cmp	r5, #254	@ 0xfe
 8000da4:	d14a      	bne.n	8000e3c <__aeabi_fsub+0x20c>
 8000da6:	20ff      	movs	r0, #255	@ 0xff
 8000da8:	2300      	movs	r3, #0
 8000daa:	e7b9      	b.n	8000d20 <__aeabi_fsub+0xf0>
 8000dac:	22ff      	movs	r2, #255	@ 0xff
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d14b      	bne.n	8000e4a <__aeabi_fsub+0x21a>
 8000db2:	000c      	movs	r4, r1
 8000db4:	0033      	movs	r3, r6
 8000db6:	08db      	lsrs	r3, r3, #3
 8000db8:	2aff      	cmp	r2, #255	@ 0xff
 8000dba:	d100      	bne.n	8000dbe <__aeabi_fsub+0x18e>
 8000dbc:	e781      	b.n	8000cc2 <__aeabi_fsub+0x92>
 8000dbe:	e7df      	b.n	8000d80 <__aeabi_fsub+0x150>
 8000dc0:	019f      	lsls	r7, r3, #6
 8000dc2:	09bf      	lsrs	r7, r7, #6
 8000dc4:	0038      	movs	r0, r7
 8000dc6:	f002 f8a1 	bl	8002f0c <__clzsi2>
 8000dca:	3805      	subs	r0, #5
 8000dcc:	4087      	lsls	r7, r0
 8000dce:	4285      	cmp	r5, r0
 8000dd0:	dc21      	bgt.n	8000e16 <__aeabi_fsub+0x1e6>
 8000dd2:	003b      	movs	r3, r7
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	1b42      	subs	r2, r0, r5
 8000dd8:	3201      	adds	r2, #1
 8000dda:	40d3      	lsrs	r3, r2
 8000ddc:	1a8a      	subs	r2, r1, r2
 8000dde:	4097      	lsls	r7, r2
 8000de0:	1e7a      	subs	r2, r7, #1
 8000de2:	4197      	sbcs	r7, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	433b      	orrs	r3, r7
 8000de8:	0759      	lsls	r1, r3, #29
 8000dea:	d000      	beq.n	8000dee <__aeabi_fsub+0x1be>
 8000dec:	e78b      	b.n	8000d06 <__aeabi_fsub+0xd6>
 8000dee:	e78f      	b.n	8000d10 <__aeabi_fsub+0xe0>
 8000df0:	20fe      	movs	r0, #254	@ 0xfe
 8000df2:	1c6a      	adds	r2, r5, #1
 8000df4:	4210      	tst	r0, r2
 8000df6:	d112      	bne.n	8000e1e <__aeabi_fsub+0x1ee>
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d152      	bne.n	8000ea2 <__aeabi_fsub+0x272>
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d07c      	beq.n	8000efa <__aeabi_fsub+0x2ca>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d0bb      	beq.n	8000d7c <__aeabi_fsub+0x14c>
 8000e04:	1b9a      	subs	r2, r3, r6
 8000e06:	0150      	lsls	r0, r2, #5
 8000e08:	d400      	bmi.n	8000e0c <__aeabi_fsub+0x1dc>
 8000e0a:	e08b      	b.n	8000f24 <__aeabi_fsub+0x2f4>
 8000e0c:	2401      	movs	r4, #1
 8000e0e:	2200      	movs	r2, #0
 8000e10:	1af3      	subs	r3, r6, r3
 8000e12:	400c      	ands	r4, r1
 8000e14:	e7e8      	b.n	8000de8 <__aeabi_fsub+0x1b8>
 8000e16:	4b56      	ldr	r3, [pc, #344]	@ (8000f70 <__aeabi_fsub+0x340>)
 8000e18:	1a2a      	subs	r2, r5, r0
 8000e1a:	403b      	ands	r3, r7
 8000e1c:	e7e4      	b.n	8000de8 <__aeabi_fsub+0x1b8>
 8000e1e:	1b9f      	subs	r7, r3, r6
 8000e20:	017a      	lsls	r2, r7, #5
 8000e22:	d446      	bmi.n	8000eb2 <__aeabi_fsub+0x282>
 8000e24:	2f00      	cmp	r7, #0
 8000e26:	d1cd      	bne.n	8000dc4 <__aeabi_fsub+0x194>
 8000e28:	2400      	movs	r4, #0
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	e777      	b.n	8000d20 <__aeabi_fsub+0xf0>
 8000e30:	199b      	adds	r3, r3, r6
 8000e32:	2501      	movs	r5, #1
 8000e34:	3201      	adds	r2, #1
 8000e36:	0159      	lsls	r1, r3, #5
 8000e38:	d400      	bmi.n	8000e3c <__aeabi_fsub+0x20c>
 8000e3a:	e760      	b.n	8000cfe <__aeabi_fsub+0xce>
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	484d      	ldr	r0, [pc, #308]	@ (8000f74 <__aeabi_fsub+0x344>)
 8000e40:	4019      	ands	r1, r3
 8000e42:	085b      	lsrs	r3, r3, #1
 8000e44:	4003      	ands	r3, r0
 8000e46:	430b      	orrs	r3, r1
 8000e48:	e7ce      	b.n	8000de8 <__aeabi_fsub+0x1b8>
 8000e4a:	1e57      	subs	r7, r2, #1
 8000e4c:	2a01      	cmp	r2, #1
 8000e4e:	d05a      	beq.n	8000f06 <__aeabi_fsub+0x2d6>
 8000e50:	000c      	movs	r4, r1
 8000e52:	2aff      	cmp	r2, #255	@ 0xff
 8000e54:	d033      	beq.n	8000ebe <__aeabi_fsub+0x28e>
 8000e56:	2201      	movs	r2, #1
 8000e58:	2f1b      	cmp	r7, #27
 8000e5a:	dc07      	bgt.n	8000e6c <__aeabi_fsub+0x23c>
 8000e5c:	2120      	movs	r1, #32
 8000e5e:	1bc9      	subs	r1, r1, r7
 8000e60:	001a      	movs	r2, r3
 8000e62:	408b      	lsls	r3, r1
 8000e64:	40fa      	lsrs	r2, r7
 8000e66:	1e59      	subs	r1, r3, #1
 8000e68:	418b      	sbcs	r3, r1
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	0005      	movs	r5, r0
 8000e6e:	1ab3      	subs	r3, r6, r2
 8000e70:	e743      	b.n	8000cfa <__aeabi_fsub+0xca>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d123      	bne.n	8000ebe <__aeabi_fsub+0x28e>
 8000e76:	22ff      	movs	r2, #255	@ 0xff
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d09b      	beq.n	8000db4 <__aeabi_fsub+0x184>
 8000e7c:	1e51      	subs	r1, r2, #1
 8000e7e:	2a01      	cmp	r2, #1
 8000e80:	d0d6      	beq.n	8000e30 <__aeabi_fsub+0x200>
 8000e82:	2aff      	cmp	r2, #255	@ 0xff
 8000e84:	d01b      	beq.n	8000ebe <__aeabi_fsub+0x28e>
 8000e86:	291b      	cmp	r1, #27
 8000e88:	dd2c      	ble.n	8000ee4 <__aeabi_fsub+0x2b4>
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	1c73      	adds	r3, r6, #1
 8000e8e:	e73a      	b.n	8000d06 <__aeabi_fsub+0xd6>
 8000e90:	2aff      	cmp	r2, #255	@ 0xff
 8000e92:	d088      	beq.n	8000da6 <__aeabi_fsub+0x176>
 8000e94:	199b      	adds	r3, r3, r6
 8000e96:	085b      	lsrs	r3, r3, #1
 8000e98:	0759      	lsls	r1, r3, #29
 8000e9a:	d000      	beq.n	8000e9e <__aeabi_fsub+0x26e>
 8000e9c:	e733      	b.n	8000d06 <__aeabi_fsub+0xd6>
 8000e9e:	08db      	lsrs	r3, r3, #3
 8000ea0:	e76e      	b.n	8000d80 <__aeabi_fsub+0x150>
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d110      	bne.n	8000ec8 <__aeabi_fsub+0x298>
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d043      	beq.n	8000f32 <__aeabi_fsub+0x302>
 8000eaa:	2401      	movs	r4, #1
 8000eac:	0033      	movs	r3, r6
 8000eae:	400c      	ands	r4, r1
 8000eb0:	e706      	b.n	8000cc0 <__aeabi_fsub+0x90>
 8000eb2:	2401      	movs	r4, #1
 8000eb4:	1af7      	subs	r7, r6, r3
 8000eb6:	400c      	ands	r4, r1
 8000eb8:	e784      	b.n	8000dc4 <__aeabi_fsub+0x194>
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d104      	bne.n	8000ec8 <__aeabi_fsub+0x298>
 8000ebe:	0033      	movs	r3, r6
 8000ec0:	e6fe      	b.n	8000cc0 <__aeabi_fsub+0x90>
 8000ec2:	2501      	movs	r5, #1
 8000ec4:	1b9b      	subs	r3, r3, r6
 8000ec6:	e718      	b.n	8000cfa <__aeabi_fsub+0xca>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d100      	bne.n	8000ece <__aeabi_fsub+0x29e>
 8000ecc:	e6f8      	b.n	8000cc0 <__aeabi_fsub+0x90>
 8000ece:	2280      	movs	r2, #128	@ 0x80
 8000ed0:	03d2      	lsls	r2, r2, #15
 8000ed2:	4297      	cmp	r7, r2
 8000ed4:	d304      	bcc.n	8000ee0 <__aeabi_fsub+0x2b0>
 8000ed6:	4594      	cmp	ip, r2
 8000ed8:	d202      	bcs.n	8000ee0 <__aeabi_fsub+0x2b0>
 8000eda:	2401      	movs	r4, #1
 8000edc:	0033      	movs	r3, r6
 8000ede:	400c      	ands	r4, r1
 8000ee0:	08db      	lsrs	r3, r3, #3
 8000ee2:	e6f1      	b.n	8000cc8 <__aeabi_fsub+0x98>
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	2520      	movs	r5, #32
 8000ee8:	40ca      	lsrs	r2, r1
 8000eea:	1a69      	subs	r1, r5, r1
 8000eec:	408b      	lsls	r3, r1
 8000eee:	1e59      	subs	r1, r3, #1
 8000ef0:	418b      	sbcs	r3, r1
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	0005      	movs	r5, r0
 8000ef6:	199b      	adds	r3, r3, r6
 8000ef8:	e750      	b.n	8000d9c <__aeabi_fsub+0x16c>
 8000efa:	2e00      	cmp	r6, #0
 8000efc:	d094      	beq.n	8000e28 <__aeabi_fsub+0x1f8>
 8000efe:	2401      	movs	r4, #1
 8000f00:	0033      	movs	r3, r6
 8000f02:	400c      	ands	r4, r1
 8000f04:	e73a      	b.n	8000d7c <__aeabi_fsub+0x14c>
 8000f06:	000c      	movs	r4, r1
 8000f08:	2501      	movs	r5, #1
 8000f0a:	1af3      	subs	r3, r6, r3
 8000f0c:	e6f5      	b.n	8000cfa <__aeabi_fsub+0xca>
 8000f0e:	0033      	movs	r3, r6
 8000f10:	e734      	b.n	8000d7c <__aeabi_fsub+0x14c>
 8000f12:	199b      	adds	r3, r3, r6
 8000f14:	2200      	movs	r2, #0
 8000f16:	0159      	lsls	r1, r3, #5
 8000f18:	d5c1      	bpl.n	8000e9e <__aeabi_fsub+0x26e>
 8000f1a:	4a15      	ldr	r2, [pc, #84]	@ (8000f70 <__aeabi_fsub+0x340>)
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	08db      	lsrs	r3, r3, #3
 8000f20:	2201      	movs	r2, #1
 8000f22:	e72d      	b.n	8000d80 <__aeabi_fsub+0x150>
 8000f24:	2a00      	cmp	r2, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_fsub+0x2fa>
 8000f28:	e77e      	b.n	8000e28 <__aeabi_fsub+0x1f8>
 8000f2a:	0013      	movs	r3, r2
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	08db      	lsrs	r3, r3, #3
 8000f30:	e726      	b.n	8000d80 <__aeabi_fsub+0x150>
 8000f32:	2380      	movs	r3, #128	@ 0x80
 8000f34:	2400      	movs	r4, #0
 8000f36:	20ff      	movs	r0, #255	@ 0xff
 8000f38:	03db      	lsls	r3, r3, #15
 8000f3a:	e6f1      	b.n	8000d20 <__aeabi_fsub+0xf0>
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_fsub+0x312>
 8000f40:	e756      	b.n	8000df0 <__aeabi_fsub+0x1c0>
 8000f42:	1b47      	subs	r7, r0, r5
 8000f44:	003a      	movs	r2, r7
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fsub+0x31c>
 8000f4a:	e730      	b.n	8000dae <__aeabi_fsub+0x17e>
 8000f4c:	2280      	movs	r2, #128	@ 0x80
 8000f4e:	04d2      	lsls	r2, r2, #19
 8000f50:	000c      	movs	r4, r1
 8000f52:	4313      	orrs	r3, r2
 8000f54:	e77f      	b.n	8000e56 <__aeabi_fsub+0x226>
 8000f56:	2a00      	cmp	r2, #0
 8000f58:	d100      	bne.n	8000f5c <__aeabi_fsub+0x32c>
 8000f5a:	e701      	b.n	8000d60 <__aeabi_fsub+0x130>
 8000f5c:	1b41      	subs	r1, r0, r5
 8000f5e:	2d00      	cmp	r5, #0
 8000f60:	d101      	bne.n	8000f66 <__aeabi_fsub+0x336>
 8000f62:	000a      	movs	r2, r1
 8000f64:	e788      	b.n	8000e78 <__aeabi_fsub+0x248>
 8000f66:	2280      	movs	r2, #128	@ 0x80
 8000f68:	04d2      	lsls	r2, r2, #19
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	e78b      	b.n	8000e86 <__aeabi_fsub+0x256>
 8000f6e:	46c0      	nop			@ (mov r8, r8)
 8000f70:	fbffffff 	.word	0xfbffffff
 8000f74:	7dffffff 	.word	0x7dffffff

08000f78 <__aeabi_ui2f>:
 8000f78:	b570      	push	{r4, r5, r6, lr}
 8000f7a:	1e04      	subs	r4, r0, #0
 8000f7c:	d00e      	beq.n	8000f9c <__aeabi_ui2f+0x24>
 8000f7e:	f001 ffc5 	bl	8002f0c <__clzsi2>
 8000f82:	239e      	movs	r3, #158	@ 0x9e
 8000f84:	0001      	movs	r1, r0
 8000f86:	1a1b      	subs	r3, r3, r0
 8000f88:	2b96      	cmp	r3, #150	@ 0x96
 8000f8a:	dc0c      	bgt.n	8000fa6 <__aeabi_ui2f+0x2e>
 8000f8c:	2808      	cmp	r0, #8
 8000f8e:	d02f      	beq.n	8000ff0 <__aeabi_ui2f+0x78>
 8000f90:	3908      	subs	r1, #8
 8000f92:	408c      	lsls	r4, r1
 8000f94:	0264      	lsls	r4, r4, #9
 8000f96:	0a64      	lsrs	r4, r4, #9
 8000f98:	b2d8      	uxtb	r0, r3
 8000f9a:	e001      	b.n	8000fa0 <__aeabi_ui2f+0x28>
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	2400      	movs	r4, #0
 8000fa0:	05c0      	lsls	r0, r0, #23
 8000fa2:	4320      	orrs	r0, r4
 8000fa4:	bd70      	pop	{r4, r5, r6, pc}
 8000fa6:	2b99      	cmp	r3, #153	@ 0x99
 8000fa8:	dc16      	bgt.n	8000fd8 <__aeabi_ui2f+0x60>
 8000faa:	1f42      	subs	r2, r0, #5
 8000fac:	2805      	cmp	r0, #5
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_ui2f+0x3a>
 8000fb0:	4094      	lsls	r4, r2
 8000fb2:	0022      	movs	r2, r4
 8000fb4:	4810      	ldr	r0, [pc, #64]	@ (8000ff8 <__aeabi_ui2f+0x80>)
 8000fb6:	4002      	ands	r2, r0
 8000fb8:	0765      	lsls	r5, r4, #29
 8000fba:	d009      	beq.n	8000fd0 <__aeabi_ui2f+0x58>
 8000fbc:	250f      	movs	r5, #15
 8000fbe:	402c      	ands	r4, r5
 8000fc0:	2c04      	cmp	r4, #4
 8000fc2:	d005      	beq.n	8000fd0 <__aeabi_ui2f+0x58>
 8000fc4:	3204      	adds	r2, #4
 8000fc6:	0154      	lsls	r4, r2, #5
 8000fc8:	d502      	bpl.n	8000fd0 <__aeabi_ui2f+0x58>
 8000fca:	239f      	movs	r3, #159	@ 0x9f
 8000fcc:	4002      	ands	r2, r0
 8000fce:	1a5b      	subs	r3, r3, r1
 8000fd0:	0192      	lsls	r2, r2, #6
 8000fd2:	0a54      	lsrs	r4, r2, #9
 8000fd4:	b2d8      	uxtb	r0, r3
 8000fd6:	e7e3      	b.n	8000fa0 <__aeabi_ui2f+0x28>
 8000fd8:	0002      	movs	r2, r0
 8000fda:	0020      	movs	r0, r4
 8000fdc:	321b      	adds	r2, #27
 8000fde:	4090      	lsls	r0, r2
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	1e50      	subs	r0, r2, #1
 8000fe4:	4182      	sbcs	r2, r0
 8000fe6:	2005      	movs	r0, #5
 8000fe8:	1a40      	subs	r0, r0, r1
 8000fea:	40c4      	lsrs	r4, r0
 8000fec:	4314      	orrs	r4, r2
 8000fee:	e7e0      	b.n	8000fb2 <__aeabi_ui2f+0x3a>
 8000ff0:	0264      	lsls	r4, r4, #9
 8000ff2:	2096      	movs	r0, #150	@ 0x96
 8000ff4:	0a64      	lsrs	r4, r4, #9
 8000ff6:	e7d3      	b.n	8000fa0 <__aeabi_ui2f+0x28>
 8000ff8:	fbffffff 	.word	0xfbffffff

08000ffc <__aeabi_dadd>:
 8000ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffe:	4657      	mov	r7, sl
 8001000:	464e      	mov	r6, r9
 8001002:	4645      	mov	r5, r8
 8001004:	46de      	mov	lr, fp
 8001006:	b5e0      	push	{r5, r6, r7, lr}
 8001008:	b083      	sub	sp, #12
 800100a:	9000      	str	r0, [sp, #0]
 800100c:	9101      	str	r1, [sp, #4]
 800100e:	030c      	lsls	r4, r1, #12
 8001010:	004f      	lsls	r7, r1, #1
 8001012:	0fce      	lsrs	r6, r1, #31
 8001014:	0a61      	lsrs	r1, r4, #9
 8001016:	9c00      	ldr	r4, [sp, #0]
 8001018:	031d      	lsls	r5, r3, #12
 800101a:	0f64      	lsrs	r4, r4, #29
 800101c:	430c      	orrs	r4, r1
 800101e:	9900      	ldr	r1, [sp, #0]
 8001020:	9200      	str	r2, [sp, #0]
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	00c8      	lsls	r0, r1, #3
 8001026:	0059      	lsls	r1, r3, #1
 8001028:	0d4b      	lsrs	r3, r1, #21
 800102a:	4699      	mov	r9, r3
 800102c:	9a00      	ldr	r2, [sp, #0]
 800102e:	9b01      	ldr	r3, [sp, #4]
 8001030:	0a6d      	lsrs	r5, r5, #9
 8001032:	0fd9      	lsrs	r1, r3, #31
 8001034:	0f53      	lsrs	r3, r2, #29
 8001036:	432b      	orrs	r3, r5
 8001038:	469a      	mov	sl, r3
 800103a:	9b00      	ldr	r3, [sp, #0]
 800103c:	0d7f      	lsrs	r7, r7, #21
 800103e:	00da      	lsls	r2, r3, #3
 8001040:	4694      	mov	ip, r2
 8001042:	464a      	mov	r2, r9
 8001044:	46b0      	mov	r8, r6
 8001046:	1aba      	subs	r2, r7, r2
 8001048:	428e      	cmp	r6, r1
 800104a:	d100      	bne.n	800104e <__aeabi_dadd+0x52>
 800104c:	e0b0      	b.n	80011b0 <__aeabi_dadd+0x1b4>
 800104e:	2a00      	cmp	r2, #0
 8001050:	dc00      	bgt.n	8001054 <__aeabi_dadd+0x58>
 8001052:	e078      	b.n	8001146 <__aeabi_dadd+0x14a>
 8001054:	4649      	mov	r1, r9
 8001056:	2900      	cmp	r1, #0
 8001058:	d100      	bne.n	800105c <__aeabi_dadd+0x60>
 800105a:	e0e9      	b.n	8001230 <__aeabi_dadd+0x234>
 800105c:	49c9      	ldr	r1, [pc, #804]	@ (8001384 <__aeabi_dadd+0x388>)
 800105e:	428f      	cmp	r7, r1
 8001060:	d100      	bne.n	8001064 <__aeabi_dadd+0x68>
 8001062:	e195      	b.n	8001390 <__aeabi_dadd+0x394>
 8001064:	2501      	movs	r5, #1
 8001066:	2a38      	cmp	r2, #56	@ 0x38
 8001068:	dc16      	bgt.n	8001098 <__aeabi_dadd+0x9c>
 800106a:	2180      	movs	r1, #128	@ 0x80
 800106c:	4653      	mov	r3, sl
 800106e:	0409      	lsls	r1, r1, #16
 8001070:	430b      	orrs	r3, r1
 8001072:	469a      	mov	sl, r3
 8001074:	2a1f      	cmp	r2, #31
 8001076:	dd00      	ble.n	800107a <__aeabi_dadd+0x7e>
 8001078:	e1e7      	b.n	800144a <__aeabi_dadd+0x44e>
 800107a:	2120      	movs	r1, #32
 800107c:	4655      	mov	r5, sl
 800107e:	1a8b      	subs	r3, r1, r2
 8001080:	4661      	mov	r1, ip
 8001082:	409d      	lsls	r5, r3
 8001084:	40d1      	lsrs	r1, r2
 8001086:	430d      	orrs	r5, r1
 8001088:	4661      	mov	r1, ip
 800108a:	4099      	lsls	r1, r3
 800108c:	1e4b      	subs	r3, r1, #1
 800108e:	4199      	sbcs	r1, r3
 8001090:	4653      	mov	r3, sl
 8001092:	40d3      	lsrs	r3, r2
 8001094:	430d      	orrs	r5, r1
 8001096:	1ae4      	subs	r4, r4, r3
 8001098:	1b45      	subs	r5, r0, r5
 800109a:	42a8      	cmp	r0, r5
 800109c:	4180      	sbcs	r0, r0
 800109e:	4240      	negs	r0, r0
 80010a0:	1a24      	subs	r4, r4, r0
 80010a2:	0223      	lsls	r3, r4, #8
 80010a4:	d400      	bmi.n	80010a8 <__aeabi_dadd+0xac>
 80010a6:	e10f      	b.n	80012c8 <__aeabi_dadd+0x2cc>
 80010a8:	0264      	lsls	r4, r4, #9
 80010aa:	0a64      	lsrs	r4, r4, #9
 80010ac:	2c00      	cmp	r4, #0
 80010ae:	d100      	bne.n	80010b2 <__aeabi_dadd+0xb6>
 80010b0:	e139      	b.n	8001326 <__aeabi_dadd+0x32a>
 80010b2:	0020      	movs	r0, r4
 80010b4:	f001 ff2a 	bl	8002f0c <__clzsi2>
 80010b8:	0003      	movs	r3, r0
 80010ba:	3b08      	subs	r3, #8
 80010bc:	2120      	movs	r1, #32
 80010be:	0028      	movs	r0, r5
 80010c0:	1aca      	subs	r2, r1, r3
 80010c2:	40d0      	lsrs	r0, r2
 80010c4:	409c      	lsls	r4, r3
 80010c6:	0002      	movs	r2, r0
 80010c8:	409d      	lsls	r5, r3
 80010ca:	4322      	orrs	r2, r4
 80010cc:	429f      	cmp	r7, r3
 80010ce:	dd00      	ble.n	80010d2 <__aeabi_dadd+0xd6>
 80010d0:	e173      	b.n	80013ba <__aeabi_dadd+0x3be>
 80010d2:	1bd8      	subs	r0, r3, r7
 80010d4:	3001      	adds	r0, #1
 80010d6:	1a09      	subs	r1, r1, r0
 80010d8:	002c      	movs	r4, r5
 80010da:	408d      	lsls	r5, r1
 80010dc:	40c4      	lsrs	r4, r0
 80010de:	1e6b      	subs	r3, r5, #1
 80010e0:	419d      	sbcs	r5, r3
 80010e2:	0013      	movs	r3, r2
 80010e4:	40c2      	lsrs	r2, r0
 80010e6:	408b      	lsls	r3, r1
 80010e8:	4325      	orrs	r5, r4
 80010ea:	2700      	movs	r7, #0
 80010ec:	0014      	movs	r4, r2
 80010ee:	431d      	orrs	r5, r3
 80010f0:	076b      	lsls	r3, r5, #29
 80010f2:	d009      	beq.n	8001108 <__aeabi_dadd+0x10c>
 80010f4:	230f      	movs	r3, #15
 80010f6:	402b      	ands	r3, r5
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d005      	beq.n	8001108 <__aeabi_dadd+0x10c>
 80010fc:	1d2b      	adds	r3, r5, #4
 80010fe:	42ab      	cmp	r3, r5
 8001100:	41ad      	sbcs	r5, r5
 8001102:	426d      	negs	r5, r5
 8001104:	1964      	adds	r4, r4, r5
 8001106:	001d      	movs	r5, r3
 8001108:	0223      	lsls	r3, r4, #8
 800110a:	d400      	bmi.n	800110e <__aeabi_dadd+0x112>
 800110c:	e12d      	b.n	800136a <__aeabi_dadd+0x36e>
 800110e:	4a9d      	ldr	r2, [pc, #628]	@ (8001384 <__aeabi_dadd+0x388>)
 8001110:	3701      	adds	r7, #1
 8001112:	4297      	cmp	r7, r2
 8001114:	d100      	bne.n	8001118 <__aeabi_dadd+0x11c>
 8001116:	e0d3      	b.n	80012c0 <__aeabi_dadd+0x2c4>
 8001118:	4646      	mov	r6, r8
 800111a:	499b      	ldr	r1, [pc, #620]	@ (8001388 <__aeabi_dadd+0x38c>)
 800111c:	08ed      	lsrs	r5, r5, #3
 800111e:	4021      	ands	r1, r4
 8001120:	074a      	lsls	r2, r1, #29
 8001122:	432a      	orrs	r2, r5
 8001124:	057c      	lsls	r4, r7, #21
 8001126:	024d      	lsls	r5, r1, #9
 8001128:	0b2d      	lsrs	r5, r5, #12
 800112a:	0d64      	lsrs	r4, r4, #21
 800112c:	0524      	lsls	r4, r4, #20
 800112e:	432c      	orrs	r4, r5
 8001130:	07f6      	lsls	r6, r6, #31
 8001132:	4334      	orrs	r4, r6
 8001134:	0010      	movs	r0, r2
 8001136:	0021      	movs	r1, r4
 8001138:	b003      	add	sp, #12
 800113a:	bcf0      	pop	{r4, r5, r6, r7}
 800113c:	46bb      	mov	fp, r7
 800113e:	46b2      	mov	sl, r6
 8001140:	46a9      	mov	r9, r5
 8001142:	46a0      	mov	r8, r4
 8001144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001146:	2a00      	cmp	r2, #0
 8001148:	d100      	bne.n	800114c <__aeabi_dadd+0x150>
 800114a:	e084      	b.n	8001256 <__aeabi_dadd+0x25a>
 800114c:	464a      	mov	r2, r9
 800114e:	1bd2      	subs	r2, r2, r7
 8001150:	2f00      	cmp	r7, #0
 8001152:	d000      	beq.n	8001156 <__aeabi_dadd+0x15a>
 8001154:	e16d      	b.n	8001432 <__aeabi_dadd+0x436>
 8001156:	0025      	movs	r5, r4
 8001158:	4305      	orrs	r5, r0
 800115a:	d100      	bne.n	800115e <__aeabi_dadd+0x162>
 800115c:	e127      	b.n	80013ae <__aeabi_dadd+0x3b2>
 800115e:	1e56      	subs	r6, r2, #1
 8001160:	2a01      	cmp	r2, #1
 8001162:	d100      	bne.n	8001166 <__aeabi_dadd+0x16a>
 8001164:	e23b      	b.n	80015de <__aeabi_dadd+0x5e2>
 8001166:	4d87      	ldr	r5, [pc, #540]	@ (8001384 <__aeabi_dadd+0x388>)
 8001168:	42aa      	cmp	r2, r5
 800116a:	d100      	bne.n	800116e <__aeabi_dadd+0x172>
 800116c:	e26a      	b.n	8001644 <__aeabi_dadd+0x648>
 800116e:	2501      	movs	r5, #1
 8001170:	2e38      	cmp	r6, #56	@ 0x38
 8001172:	dc12      	bgt.n	800119a <__aeabi_dadd+0x19e>
 8001174:	0032      	movs	r2, r6
 8001176:	2a1f      	cmp	r2, #31
 8001178:	dd00      	ble.n	800117c <__aeabi_dadd+0x180>
 800117a:	e1f8      	b.n	800156e <__aeabi_dadd+0x572>
 800117c:	2620      	movs	r6, #32
 800117e:	0025      	movs	r5, r4
 8001180:	1ab6      	subs	r6, r6, r2
 8001182:	0007      	movs	r7, r0
 8001184:	4653      	mov	r3, sl
 8001186:	40b0      	lsls	r0, r6
 8001188:	40d4      	lsrs	r4, r2
 800118a:	40b5      	lsls	r5, r6
 800118c:	40d7      	lsrs	r7, r2
 800118e:	1e46      	subs	r6, r0, #1
 8001190:	41b0      	sbcs	r0, r6
 8001192:	1b1b      	subs	r3, r3, r4
 8001194:	469a      	mov	sl, r3
 8001196:	433d      	orrs	r5, r7
 8001198:	4305      	orrs	r5, r0
 800119a:	4662      	mov	r2, ip
 800119c:	1b55      	subs	r5, r2, r5
 800119e:	45ac      	cmp	ip, r5
 80011a0:	4192      	sbcs	r2, r2
 80011a2:	4653      	mov	r3, sl
 80011a4:	4252      	negs	r2, r2
 80011a6:	000e      	movs	r6, r1
 80011a8:	464f      	mov	r7, r9
 80011aa:	4688      	mov	r8, r1
 80011ac:	1a9c      	subs	r4, r3, r2
 80011ae:	e778      	b.n	80010a2 <__aeabi_dadd+0xa6>
 80011b0:	2a00      	cmp	r2, #0
 80011b2:	dc00      	bgt.n	80011b6 <__aeabi_dadd+0x1ba>
 80011b4:	e08e      	b.n	80012d4 <__aeabi_dadd+0x2d8>
 80011b6:	4649      	mov	r1, r9
 80011b8:	2900      	cmp	r1, #0
 80011ba:	d175      	bne.n	80012a8 <__aeabi_dadd+0x2ac>
 80011bc:	4661      	mov	r1, ip
 80011be:	4653      	mov	r3, sl
 80011c0:	4319      	orrs	r1, r3
 80011c2:	d100      	bne.n	80011c6 <__aeabi_dadd+0x1ca>
 80011c4:	e0f6      	b.n	80013b4 <__aeabi_dadd+0x3b8>
 80011c6:	1e51      	subs	r1, r2, #1
 80011c8:	2a01      	cmp	r2, #1
 80011ca:	d100      	bne.n	80011ce <__aeabi_dadd+0x1d2>
 80011cc:	e191      	b.n	80014f2 <__aeabi_dadd+0x4f6>
 80011ce:	4d6d      	ldr	r5, [pc, #436]	@ (8001384 <__aeabi_dadd+0x388>)
 80011d0:	42aa      	cmp	r2, r5
 80011d2:	d100      	bne.n	80011d6 <__aeabi_dadd+0x1da>
 80011d4:	e0dc      	b.n	8001390 <__aeabi_dadd+0x394>
 80011d6:	2501      	movs	r5, #1
 80011d8:	2938      	cmp	r1, #56	@ 0x38
 80011da:	dc14      	bgt.n	8001206 <__aeabi_dadd+0x20a>
 80011dc:	000a      	movs	r2, r1
 80011de:	2a1f      	cmp	r2, #31
 80011e0:	dd00      	ble.n	80011e4 <__aeabi_dadd+0x1e8>
 80011e2:	e1a2      	b.n	800152a <__aeabi_dadd+0x52e>
 80011e4:	2120      	movs	r1, #32
 80011e6:	4653      	mov	r3, sl
 80011e8:	1a89      	subs	r1, r1, r2
 80011ea:	408b      	lsls	r3, r1
 80011ec:	001d      	movs	r5, r3
 80011ee:	4663      	mov	r3, ip
 80011f0:	40d3      	lsrs	r3, r2
 80011f2:	431d      	orrs	r5, r3
 80011f4:	4663      	mov	r3, ip
 80011f6:	408b      	lsls	r3, r1
 80011f8:	0019      	movs	r1, r3
 80011fa:	1e4b      	subs	r3, r1, #1
 80011fc:	4199      	sbcs	r1, r3
 80011fe:	4653      	mov	r3, sl
 8001200:	40d3      	lsrs	r3, r2
 8001202:	430d      	orrs	r5, r1
 8001204:	18e4      	adds	r4, r4, r3
 8001206:	182d      	adds	r5, r5, r0
 8001208:	4285      	cmp	r5, r0
 800120a:	4180      	sbcs	r0, r0
 800120c:	4240      	negs	r0, r0
 800120e:	1824      	adds	r4, r4, r0
 8001210:	0223      	lsls	r3, r4, #8
 8001212:	d559      	bpl.n	80012c8 <__aeabi_dadd+0x2cc>
 8001214:	4b5b      	ldr	r3, [pc, #364]	@ (8001384 <__aeabi_dadd+0x388>)
 8001216:	3701      	adds	r7, #1
 8001218:	429f      	cmp	r7, r3
 800121a:	d051      	beq.n	80012c0 <__aeabi_dadd+0x2c4>
 800121c:	2101      	movs	r1, #1
 800121e:	4b5a      	ldr	r3, [pc, #360]	@ (8001388 <__aeabi_dadd+0x38c>)
 8001220:	086a      	lsrs	r2, r5, #1
 8001222:	401c      	ands	r4, r3
 8001224:	4029      	ands	r1, r5
 8001226:	430a      	orrs	r2, r1
 8001228:	07e5      	lsls	r5, r4, #31
 800122a:	4315      	orrs	r5, r2
 800122c:	0864      	lsrs	r4, r4, #1
 800122e:	e75f      	b.n	80010f0 <__aeabi_dadd+0xf4>
 8001230:	4661      	mov	r1, ip
 8001232:	4653      	mov	r3, sl
 8001234:	4319      	orrs	r1, r3
 8001236:	d100      	bne.n	800123a <__aeabi_dadd+0x23e>
 8001238:	e0bc      	b.n	80013b4 <__aeabi_dadd+0x3b8>
 800123a:	1e51      	subs	r1, r2, #1
 800123c:	2a01      	cmp	r2, #1
 800123e:	d100      	bne.n	8001242 <__aeabi_dadd+0x246>
 8001240:	e164      	b.n	800150c <__aeabi_dadd+0x510>
 8001242:	4d50      	ldr	r5, [pc, #320]	@ (8001384 <__aeabi_dadd+0x388>)
 8001244:	42aa      	cmp	r2, r5
 8001246:	d100      	bne.n	800124a <__aeabi_dadd+0x24e>
 8001248:	e16a      	b.n	8001520 <__aeabi_dadd+0x524>
 800124a:	2501      	movs	r5, #1
 800124c:	2938      	cmp	r1, #56	@ 0x38
 800124e:	dd00      	ble.n	8001252 <__aeabi_dadd+0x256>
 8001250:	e722      	b.n	8001098 <__aeabi_dadd+0x9c>
 8001252:	000a      	movs	r2, r1
 8001254:	e70e      	b.n	8001074 <__aeabi_dadd+0x78>
 8001256:	4a4d      	ldr	r2, [pc, #308]	@ (800138c <__aeabi_dadd+0x390>)
 8001258:	1c7d      	adds	r5, r7, #1
 800125a:	4215      	tst	r5, r2
 800125c:	d000      	beq.n	8001260 <__aeabi_dadd+0x264>
 800125e:	e0d0      	b.n	8001402 <__aeabi_dadd+0x406>
 8001260:	0025      	movs	r5, r4
 8001262:	4662      	mov	r2, ip
 8001264:	4653      	mov	r3, sl
 8001266:	4305      	orrs	r5, r0
 8001268:	431a      	orrs	r2, r3
 800126a:	2f00      	cmp	r7, #0
 800126c:	d000      	beq.n	8001270 <__aeabi_dadd+0x274>
 800126e:	e137      	b.n	80014e0 <__aeabi_dadd+0x4e4>
 8001270:	2d00      	cmp	r5, #0
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x27a>
 8001274:	e1a8      	b.n	80015c8 <__aeabi_dadd+0x5cc>
 8001276:	2a00      	cmp	r2, #0
 8001278:	d100      	bne.n	800127c <__aeabi_dadd+0x280>
 800127a:	e16a      	b.n	8001552 <__aeabi_dadd+0x556>
 800127c:	4663      	mov	r3, ip
 800127e:	1ac5      	subs	r5, r0, r3
 8001280:	4653      	mov	r3, sl
 8001282:	1ae2      	subs	r2, r4, r3
 8001284:	42a8      	cmp	r0, r5
 8001286:	419b      	sbcs	r3, r3
 8001288:	425b      	negs	r3, r3
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	021a      	lsls	r2, r3, #8
 800128e:	d400      	bmi.n	8001292 <__aeabi_dadd+0x296>
 8001290:	e203      	b.n	800169a <__aeabi_dadd+0x69e>
 8001292:	4663      	mov	r3, ip
 8001294:	1a1d      	subs	r5, r3, r0
 8001296:	45ac      	cmp	ip, r5
 8001298:	4192      	sbcs	r2, r2
 800129a:	4653      	mov	r3, sl
 800129c:	4252      	negs	r2, r2
 800129e:	1b1c      	subs	r4, r3, r4
 80012a0:	000e      	movs	r6, r1
 80012a2:	4688      	mov	r8, r1
 80012a4:	1aa4      	subs	r4, r4, r2
 80012a6:	e723      	b.n	80010f0 <__aeabi_dadd+0xf4>
 80012a8:	4936      	ldr	r1, [pc, #216]	@ (8001384 <__aeabi_dadd+0x388>)
 80012aa:	428f      	cmp	r7, r1
 80012ac:	d070      	beq.n	8001390 <__aeabi_dadd+0x394>
 80012ae:	2501      	movs	r5, #1
 80012b0:	2a38      	cmp	r2, #56	@ 0x38
 80012b2:	dca8      	bgt.n	8001206 <__aeabi_dadd+0x20a>
 80012b4:	2180      	movs	r1, #128	@ 0x80
 80012b6:	4653      	mov	r3, sl
 80012b8:	0409      	lsls	r1, r1, #16
 80012ba:	430b      	orrs	r3, r1
 80012bc:	469a      	mov	sl, r3
 80012be:	e78e      	b.n	80011de <__aeabi_dadd+0x1e2>
 80012c0:	003c      	movs	r4, r7
 80012c2:	2500      	movs	r5, #0
 80012c4:	2200      	movs	r2, #0
 80012c6:	e731      	b.n	800112c <__aeabi_dadd+0x130>
 80012c8:	2307      	movs	r3, #7
 80012ca:	402b      	ands	r3, r5
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d000      	beq.n	80012d2 <__aeabi_dadd+0x2d6>
 80012d0:	e710      	b.n	80010f4 <__aeabi_dadd+0xf8>
 80012d2:	e093      	b.n	80013fc <__aeabi_dadd+0x400>
 80012d4:	2a00      	cmp	r2, #0
 80012d6:	d074      	beq.n	80013c2 <__aeabi_dadd+0x3c6>
 80012d8:	464a      	mov	r2, r9
 80012da:	1bd2      	subs	r2, r2, r7
 80012dc:	2f00      	cmp	r7, #0
 80012de:	d100      	bne.n	80012e2 <__aeabi_dadd+0x2e6>
 80012e0:	e0c7      	b.n	8001472 <__aeabi_dadd+0x476>
 80012e2:	4928      	ldr	r1, [pc, #160]	@ (8001384 <__aeabi_dadd+0x388>)
 80012e4:	4589      	cmp	r9, r1
 80012e6:	d100      	bne.n	80012ea <__aeabi_dadd+0x2ee>
 80012e8:	e185      	b.n	80015f6 <__aeabi_dadd+0x5fa>
 80012ea:	2501      	movs	r5, #1
 80012ec:	2a38      	cmp	r2, #56	@ 0x38
 80012ee:	dc12      	bgt.n	8001316 <__aeabi_dadd+0x31a>
 80012f0:	2180      	movs	r1, #128	@ 0x80
 80012f2:	0409      	lsls	r1, r1, #16
 80012f4:	430c      	orrs	r4, r1
 80012f6:	2a1f      	cmp	r2, #31
 80012f8:	dd00      	ble.n	80012fc <__aeabi_dadd+0x300>
 80012fa:	e1ab      	b.n	8001654 <__aeabi_dadd+0x658>
 80012fc:	2120      	movs	r1, #32
 80012fe:	0025      	movs	r5, r4
 8001300:	1a89      	subs	r1, r1, r2
 8001302:	0007      	movs	r7, r0
 8001304:	4088      	lsls	r0, r1
 8001306:	408d      	lsls	r5, r1
 8001308:	40d7      	lsrs	r7, r2
 800130a:	1e41      	subs	r1, r0, #1
 800130c:	4188      	sbcs	r0, r1
 800130e:	40d4      	lsrs	r4, r2
 8001310:	433d      	orrs	r5, r7
 8001312:	4305      	orrs	r5, r0
 8001314:	44a2      	add	sl, r4
 8001316:	4465      	add	r5, ip
 8001318:	4565      	cmp	r5, ip
 800131a:	4192      	sbcs	r2, r2
 800131c:	4252      	negs	r2, r2
 800131e:	4452      	add	r2, sl
 8001320:	0014      	movs	r4, r2
 8001322:	464f      	mov	r7, r9
 8001324:	e774      	b.n	8001210 <__aeabi_dadd+0x214>
 8001326:	0028      	movs	r0, r5
 8001328:	f001 fdf0 	bl	8002f0c <__clzsi2>
 800132c:	0003      	movs	r3, r0
 800132e:	3318      	adds	r3, #24
 8001330:	2b1f      	cmp	r3, #31
 8001332:	dc00      	bgt.n	8001336 <__aeabi_dadd+0x33a>
 8001334:	e6c2      	b.n	80010bc <__aeabi_dadd+0xc0>
 8001336:	002a      	movs	r2, r5
 8001338:	3808      	subs	r0, #8
 800133a:	4082      	lsls	r2, r0
 800133c:	429f      	cmp	r7, r3
 800133e:	dd00      	ble.n	8001342 <__aeabi_dadd+0x346>
 8001340:	e0a9      	b.n	8001496 <__aeabi_dadd+0x49a>
 8001342:	1bdb      	subs	r3, r3, r7
 8001344:	1c58      	adds	r0, r3, #1
 8001346:	281f      	cmp	r0, #31
 8001348:	dc00      	bgt.n	800134c <__aeabi_dadd+0x350>
 800134a:	e1ac      	b.n	80016a6 <__aeabi_dadd+0x6aa>
 800134c:	0015      	movs	r5, r2
 800134e:	3b1f      	subs	r3, #31
 8001350:	40dd      	lsrs	r5, r3
 8001352:	2820      	cmp	r0, #32
 8001354:	d005      	beq.n	8001362 <__aeabi_dadd+0x366>
 8001356:	2340      	movs	r3, #64	@ 0x40
 8001358:	1a1b      	subs	r3, r3, r0
 800135a:	409a      	lsls	r2, r3
 800135c:	1e53      	subs	r3, r2, #1
 800135e:	419a      	sbcs	r2, r3
 8001360:	4315      	orrs	r5, r2
 8001362:	2307      	movs	r3, #7
 8001364:	2700      	movs	r7, #0
 8001366:	402b      	ands	r3, r5
 8001368:	e7b0      	b.n	80012cc <__aeabi_dadd+0x2d0>
 800136a:	08ed      	lsrs	r5, r5, #3
 800136c:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <__aeabi_dadd+0x388>)
 800136e:	0762      	lsls	r2, r4, #29
 8001370:	432a      	orrs	r2, r5
 8001372:	08e4      	lsrs	r4, r4, #3
 8001374:	429f      	cmp	r7, r3
 8001376:	d00f      	beq.n	8001398 <__aeabi_dadd+0x39c>
 8001378:	0324      	lsls	r4, r4, #12
 800137a:	0b25      	lsrs	r5, r4, #12
 800137c:	057c      	lsls	r4, r7, #21
 800137e:	0d64      	lsrs	r4, r4, #21
 8001380:	e6d4      	b.n	800112c <__aeabi_dadd+0x130>
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	000007ff 	.word	0x000007ff
 8001388:	ff7fffff 	.word	0xff7fffff
 800138c:	000007fe 	.word	0x000007fe
 8001390:	08c0      	lsrs	r0, r0, #3
 8001392:	0762      	lsls	r2, r4, #29
 8001394:	4302      	orrs	r2, r0
 8001396:	08e4      	lsrs	r4, r4, #3
 8001398:	0013      	movs	r3, r2
 800139a:	4323      	orrs	r3, r4
 800139c:	d100      	bne.n	80013a0 <__aeabi_dadd+0x3a4>
 800139e:	e186      	b.n	80016ae <__aeabi_dadd+0x6b2>
 80013a0:	2580      	movs	r5, #128	@ 0x80
 80013a2:	032d      	lsls	r5, r5, #12
 80013a4:	4325      	orrs	r5, r4
 80013a6:	032d      	lsls	r5, r5, #12
 80013a8:	4cc3      	ldr	r4, [pc, #780]	@ (80016b8 <__aeabi_dadd+0x6bc>)
 80013aa:	0b2d      	lsrs	r5, r5, #12
 80013ac:	e6be      	b.n	800112c <__aeabi_dadd+0x130>
 80013ae:	4660      	mov	r0, ip
 80013b0:	4654      	mov	r4, sl
 80013b2:	000e      	movs	r6, r1
 80013b4:	0017      	movs	r7, r2
 80013b6:	08c5      	lsrs	r5, r0, #3
 80013b8:	e7d8      	b.n	800136c <__aeabi_dadd+0x370>
 80013ba:	4cc0      	ldr	r4, [pc, #768]	@ (80016bc <__aeabi_dadd+0x6c0>)
 80013bc:	1aff      	subs	r7, r7, r3
 80013be:	4014      	ands	r4, r2
 80013c0:	e696      	b.n	80010f0 <__aeabi_dadd+0xf4>
 80013c2:	4abf      	ldr	r2, [pc, #764]	@ (80016c0 <__aeabi_dadd+0x6c4>)
 80013c4:	1c79      	adds	r1, r7, #1
 80013c6:	4211      	tst	r1, r2
 80013c8:	d16b      	bne.n	80014a2 <__aeabi_dadd+0x4a6>
 80013ca:	0022      	movs	r2, r4
 80013cc:	4302      	orrs	r2, r0
 80013ce:	2f00      	cmp	r7, #0
 80013d0:	d000      	beq.n	80013d4 <__aeabi_dadd+0x3d8>
 80013d2:	e0db      	b.n	800158c <__aeabi_dadd+0x590>
 80013d4:	2a00      	cmp	r2, #0
 80013d6:	d100      	bne.n	80013da <__aeabi_dadd+0x3de>
 80013d8:	e12d      	b.n	8001636 <__aeabi_dadd+0x63a>
 80013da:	4662      	mov	r2, ip
 80013dc:	4653      	mov	r3, sl
 80013de:	431a      	orrs	r2, r3
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dadd+0x3e8>
 80013e2:	e0b6      	b.n	8001552 <__aeabi_dadd+0x556>
 80013e4:	4663      	mov	r3, ip
 80013e6:	18c5      	adds	r5, r0, r3
 80013e8:	4285      	cmp	r5, r0
 80013ea:	4180      	sbcs	r0, r0
 80013ec:	4454      	add	r4, sl
 80013ee:	4240      	negs	r0, r0
 80013f0:	1824      	adds	r4, r4, r0
 80013f2:	0223      	lsls	r3, r4, #8
 80013f4:	d502      	bpl.n	80013fc <__aeabi_dadd+0x400>
 80013f6:	000f      	movs	r7, r1
 80013f8:	4bb0      	ldr	r3, [pc, #704]	@ (80016bc <__aeabi_dadd+0x6c0>)
 80013fa:	401c      	ands	r4, r3
 80013fc:	003a      	movs	r2, r7
 80013fe:	0028      	movs	r0, r5
 8001400:	e7d8      	b.n	80013b4 <__aeabi_dadd+0x3b8>
 8001402:	4662      	mov	r2, ip
 8001404:	1a85      	subs	r5, r0, r2
 8001406:	42a8      	cmp	r0, r5
 8001408:	4192      	sbcs	r2, r2
 800140a:	4653      	mov	r3, sl
 800140c:	4252      	negs	r2, r2
 800140e:	4691      	mov	r9, r2
 8001410:	1ae3      	subs	r3, r4, r3
 8001412:	001a      	movs	r2, r3
 8001414:	464b      	mov	r3, r9
 8001416:	1ad2      	subs	r2, r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	4691      	mov	r9, r2
 800141c:	021a      	lsls	r2, r3, #8
 800141e:	d454      	bmi.n	80014ca <__aeabi_dadd+0x4ce>
 8001420:	464a      	mov	r2, r9
 8001422:	464c      	mov	r4, r9
 8001424:	432a      	orrs	r2, r5
 8001426:	d000      	beq.n	800142a <__aeabi_dadd+0x42e>
 8001428:	e640      	b.n	80010ac <__aeabi_dadd+0xb0>
 800142a:	2600      	movs	r6, #0
 800142c:	2400      	movs	r4, #0
 800142e:	2500      	movs	r5, #0
 8001430:	e67c      	b.n	800112c <__aeabi_dadd+0x130>
 8001432:	4da1      	ldr	r5, [pc, #644]	@ (80016b8 <__aeabi_dadd+0x6bc>)
 8001434:	45a9      	cmp	r9, r5
 8001436:	d100      	bne.n	800143a <__aeabi_dadd+0x43e>
 8001438:	e090      	b.n	800155c <__aeabi_dadd+0x560>
 800143a:	2501      	movs	r5, #1
 800143c:	2a38      	cmp	r2, #56	@ 0x38
 800143e:	dd00      	ble.n	8001442 <__aeabi_dadd+0x446>
 8001440:	e6ab      	b.n	800119a <__aeabi_dadd+0x19e>
 8001442:	2580      	movs	r5, #128	@ 0x80
 8001444:	042d      	lsls	r5, r5, #16
 8001446:	432c      	orrs	r4, r5
 8001448:	e695      	b.n	8001176 <__aeabi_dadd+0x17a>
 800144a:	0011      	movs	r1, r2
 800144c:	4655      	mov	r5, sl
 800144e:	3920      	subs	r1, #32
 8001450:	40cd      	lsrs	r5, r1
 8001452:	46a9      	mov	r9, r5
 8001454:	2a20      	cmp	r2, #32
 8001456:	d006      	beq.n	8001466 <__aeabi_dadd+0x46a>
 8001458:	2140      	movs	r1, #64	@ 0x40
 800145a:	4653      	mov	r3, sl
 800145c:	1a8a      	subs	r2, r1, r2
 800145e:	4093      	lsls	r3, r2
 8001460:	4662      	mov	r2, ip
 8001462:	431a      	orrs	r2, r3
 8001464:	4694      	mov	ip, r2
 8001466:	4665      	mov	r5, ip
 8001468:	1e6b      	subs	r3, r5, #1
 800146a:	419d      	sbcs	r5, r3
 800146c:	464b      	mov	r3, r9
 800146e:	431d      	orrs	r5, r3
 8001470:	e612      	b.n	8001098 <__aeabi_dadd+0x9c>
 8001472:	0021      	movs	r1, r4
 8001474:	4301      	orrs	r1, r0
 8001476:	d100      	bne.n	800147a <__aeabi_dadd+0x47e>
 8001478:	e0c4      	b.n	8001604 <__aeabi_dadd+0x608>
 800147a:	1e51      	subs	r1, r2, #1
 800147c:	2a01      	cmp	r2, #1
 800147e:	d100      	bne.n	8001482 <__aeabi_dadd+0x486>
 8001480:	e0fb      	b.n	800167a <__aeabi_dadd+0x67e>
 8001482:	4d8d      	ldr	r5, [pc, #564]	@ (80016b8 <__aeabi_dadd+0x6bc>)
 8001484:	42aa      	cmp	r2, r5
 8001486:	d100      	bne.n	800148a <__aeabi_dadd+0x48e>
 8001488:	e0b5      	b.n	80015f6 <__aeabi_dadd+0x5fa>
 800148a:	2501      	movs	r5, #1
 800148c:	2938      	cmp	r1, #56	@ 0x38
 800148e:	dd00      	ble.n	8001492 <__aeabi_dadd+0x496>
 8001490:	e741      	b.n	8001316 <__aeabi_dadd+0x31a>
 8001492:	000a      	movs	r2, r1
 8001494:	e72f      	b.n	80012f6 <__aeabi_dadd+0x2fa>
 8001496:	4c89      	ldr	r4, [pc, #548]	@ (80016bc <__aeabi_dadd+0x6c0>)
 8001498:	1aff      	subs	r7, r7, r3
 800149a:	4014      	ands	r4, r2
 800149c:	0762      	lsls	r2, r4, #29
 800149e:	08e4      	lsrs	r4, r4, #3
 80014a0:	e76a      	b.n	8001378 <__aeabi_dadd+0x37c>
 80014a2:	4a85      	ldr	r2, [pc, #532]	@ (80016b8 <__aeabi_dadd+0x6bc>)
 80014a4:	4291      	cmp	r1, r2
 80014a6:	d100      	bne.n	80014aa <__aeabi_dadd+0x4ae>
 80014a8:	e0e3      	b.n	8001672 <__aeabi_dadd+0x676>
 80014aa:	4663      	mov	r3, ip
 80014ac:	18c2      	adds	r2, r0, r3
 80014ae:	4282      	cmp	r2, r0
 80014b0:	4180      	sbcs	r0, r0
 80014b2:	0023      	movs	r3, r4
 80014b4:	4240      	negs	r0, r0
 80014b6:	4453      	add	r3, sl
 80014b8:	181b      	adds	r3, r3, r0
 80014ba:	07dd      	lsls	r5, r3, #31
 80014bc:	085c      	lsrs	r4, r3, #1
 80014be:	2307      	movs	r3, #7
 80014c0:	0852      	lsrs	r2, r2, #1
 80014c2:	4315      	orrs	r5, r2
 80014c4:	000f      	movs	r7, r1
 80014c6:	402b      	ands	r3, r5
 80014c8:	e700      	b.n	80012cc <__aeabi_dadd+0x2d0>
 80014ca:	4663      	mov	r3, ip
 80014cc:	1a1d      	subs	r5, r3, r0
 80014ce:	45ac      	cmp	ip, r5
 80014d0:	4192      	sbcs	r2, r2
 80014d2:	4653      	mov	r3, sl
 80014d4:	4252      	negs	r2, r2
 80014d6:	1b1c      	subs	r4, r3, r4
 80014d8:	000e      	movs	r6, r1
 80014da:	4688      	mov	r8, r1
 80014dc:	1aa4      	subs	r4, r4, r2
 80014de:	e5e5      	b.n	80010ac <__aeabi_dadd+0xb0>
 80014e0:	2d00      	cmp	r5, #0
 80014e2:	d000      	beq.n	80014e6 <__aeabi_dadd+0x4ea>
 80014e4:	e091      	b.n	800160a <__aeabi_dadd+0x60e>
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	d138      	bne.n	800155c <__aeabi_dadd+0x560>
 80014ea:	2480      	movs	r4, #128	@ 0x80
 80014ec:	2600      	movs	r6, #0
 80014ee:	0324      	lsls	r4, r4, #12
 80014f0:	e756      	b.n	80013a0 <__aeabi_dadd+0x3a4>
 80014f2:	4663      	mov	r3, ip
 80014f4:	18c5      	adds	r5, r0, r3
 80014f6:	4285      	cmp	r5, r0
 80014f8:	4180      	sbcs	r0, r0
 80014fa:	4454      	add	r4, sl
 80014fc:	4240      	negs	r0, r0
 80014fe:	1824      	adds	r4, r4, r0
 8001500:	2701      	movs	r7, #1
 8001502:	0223      	lsls	r3, r4, #8
 8001504:	d400      	bmi.n	8001508 <__aeabi_dadd+0x50c>
 8001506:	e6df      	b.n	80012c8 <__aeabi_dadd+0x2cc>
 8001508:	2702      	movs	r7, #2
 800150a:	e687      	b.n	800121c <__aeabi_dadd+0x220>
 800150c:	4663      	mov	r3, ip
 800150e:	1ac5      	subs	r5, r0, r3
 8001510:	42a8      	cmp	r0, r5
 8001512:	4180      	sbcs	r0, r0
 8001514:	4653      	mov	r3, sl
 8001516:	4240      	negs	r0, r0
 8001518:	1ae4      	subs	r4, r4, r3
 800151a:	2701      	movs	r7, #1
 800151c:	1a24      	subs	r4, r4, r0
 800151e:	e5c0      	b.n	80010a2 <__aeabi_dadd+0xa6>
 8001520:	0762      	lsls	r2, r4, #29
 8001522:	08c0      	lsrs	r0, r0, #3
 8001524:	4302      	orrs	r2, r0
 8001526:	08e4      	lsrs	r4, r4, #3
 8001528:	e736      	b.n	8001398 <__aeabi_dadd+0x39c>
 800152a:	0011      	movs	r1, r2
 800152c:	4653      	mov	r3, sl
 800152e:	3920      	subs	r1, #32
 8001530:	40cb      	lsrs	r3, r1
 8001532:	4699      	mov	r9, r3
 8001534:	2a20      	cmp	r2, #32
 8001536:	d006      	beq.n	8001546 <__aeabi_dadd+0x54a>
 8001538:	2140      	movs	r1, #64	@ 0x40
 800153a:	4653      	mov	r3, sl
 800153c:	1a8a      	subs	r2, r1, r2
 800153e:	4093      	lsls	r3, r2
 8001540:	4662      	mov	r2, ip
 8001542:	431a      	orrs	r2, r3
 8001544:	4694      	mov	ip, r2
 8001546:	4665      	mov	r5, ip
 8001548:	1e6b      	subs	r3, r5, #1
 800154a:	419d      	sbcs	r5, r3
 800154c:	464b      	mov	r3, r9
 800154e:	431d      	orrs	r5, r3
 8001550:	e659      	b.n	8001206 <__aeabi_dadd+0x20a>
 8001552:	0762      	lsls	r2, r4, #29
 8001554:	08c0      	lsrs	r0, r0, #3
 8001556:	4302      	orrs	r2, r0
 8001558:	08e4      	lsrs	r4, r4, #3
 800155a:	e70d      	b.n	8001378 <__aeabi_dadd+0x37c>
 800155c:	4653      	mov	r3, sl
 800155e:	075a      	lsls	r2, r3, #29
 8001560:	4663      	mov	r3, ip
 8001562:	08d8      	lsrs	r0, r3, #3
 8001564:	4653      	mov	r3, sl
 8001566:	000e      	movs	r6, r1
 8001568:	4302      	orrs	r2, r0
 800156a:	08dc      	lsrs	r4, r3, #3
 800156c:	e714      	b.n	8001398 <__aeabi_dadd+0x39c>
 800156e:	0015      	movs	r5, r2
 8001570:	0026      	movs	r6, r4
 8001572:	3d20      	subs	r5, #32
 8001574:	40ee      	lsrs	r6, r5
 8001576:	2a20      	cmp	r2, #32
 8001578:	d003      	beq.n	8001582 <__aeabi_dadd+0x586>
 800157a:	2540      	movs	r5, #64	@ 0x40
 800157c:	1aaa      	subs	r2, r5, r2
 800157e:	4094      	lsls	r4, r2
 8001580:	4320      	orrs	r0, r4
 8001582:	1e42      	subs	r2, r0, #1
 8001584:	4190      	sbcs	r0, r2
 8001586:	0005      	movs	r5, r0
 8001588:	4335      	orrs	r5, r6
 800158a:	e606      	b.n	800119a <__aeabi_dadd+0x19e>
 800158c:	2a00      	cmp	r2, #0
 800158e:	d07c      	beq.n	800168a <__aeabi_dadd+0x68e>
 8001590:	4662      	mov	r2, ip
 8001592:	4653      	mov	r3, sl
 8001594:	08c0      	lsrs	r0, r0, #3
 8001596:	431a      	orrs	r2, r3
 8001598:	d100      	bne.n	800159c <__aeabi_dadd+0x5a0>
 800159a:	e6fa      	b.n	8001392 <__aeabi_dadd+0x396>
 800159c:	0762      	lsls	r2, r4, #29
 800159e:	4310      	orrs	r0, r2
 80015a0:	2280      	movs	r2, #128	@ 0x80
 80015a2:	08e4      	lsrs	r4, r4, #3
 80015a4:	0312      	lsls	r2, r2, #12
 80015a6:	4214      	tst	r4, r2
 80015a8:	d008      	beq.n	80015bc <__aeabi_dadd+0x5c0>
 80015aa:	08d9      	lsrs	r1, r3, #3
 80015ac:	4211      	tst	r1, r2
 80015ae:	d105      	bne.n	80015bc <__aeabi_dadd+0x5c0>
 80015b0:	4663      	mov	r3, ip
 80015b2:	08d8      	lsrs	r0, r3, #3
 80015b4:	4653      	mov	r3, sl
 80015b6:	000c      	movs	r4, r1
 80015b8:	075b      	lsls	r3, r3, #29
 80015ba:	4318      	orrs	r0, r3
 80015bc:	0f42      	lsrs	r2, r0, #29
 80015be:	00c0      	lsls	r0, r0, #3
 80015c0:	08c0      	lsrs	r0, r0, #3
 80015c2:	0752      	lsls	r2, r2, #29
 80015c4:	4302      	orrs	r2, r0
 80015c6:	e6e7      	b.n	8001398 <__aeabi_dadd+0x39c>
 80015c8:	2a00      	cmp	r2, #0
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x5d2>
 80015cc:	e72d      	b.n	800142a <__aeabi_dadd+0x42e>
 80015ce:	4663      	mov	r3, ip
 80015d0:	08d8      	lsrs	r0, r3, #3
 80015d2:	4653      	mov	r3, sl
 80015d4:	075a      	lsls	r2, r3, #29
 80015d6:	000e      	movs	r6, r1
 80015d8:	4302      	orrs	r2, r0
 80015da:	08dc      	lsrs	r4, r3, #3
 80015dc:	e6cc      	b.n	8001378 <__aeabi_dadd+0x37c>
 80015de:	4663      	mov	r3, ip
 80015e0:	1a1d      	subs	r5, r3, r0
 80015e2:	45ac      	cmp	ip, r5
 80015e4:	4192      	sbcs	r2, r2
 80015e6:	4653      	mov	r3, sl
 80015e8:	4252      	negs	r2, r2
 80015ea:	1b1c      	subs	r4, r3, r4
 80015ec:	000e      	movs	r6, r1
 80015ee:	4688      	mov	r8, r1
 80015f0:	1aa4      	subs	r4, r4, r2
 80015f2:	3701      	adds	r7, #1
 80015f4:	e555      	b.n	80010a2 <__aeabi_dadd+0xa6>
 80015f6:	4663      	mov	r3, ip
 80015f8:	08d9      	lsrs	r1, r3, #3
 80015fa:	4653      	mov	r3, sl
 80015fc:	075a      	lsls	r2, r3, #29
 80015fe:	430a      	orrs	r2, r1
 8001600:	08dc      	lsrs	r4, r3, #3
 8001602:	e6c9      	b.n	8001398 <__aeabi_dadd+0x39c>
 8001604:	4660      	mov	r0, ip
 8001606:	4654      	mov	r4, sl
 8001608:	e6d4      	b.n	80013b4 <__aeabi_dadd+0x3b8>
 800160a:	08c0      	lsrs	r0, r0, #3
 800160c:	2a00      	cmp	r2, #0
 800160e:	d100      	bne.n	8001612 <__aeabi_dadd+0x616>
 8001610:	e6bf      	b.n	8001392 <__aeabi_dadd+0x396>
 8001612:	0762      	lsls	r2, r4, #29
 8001614:	4310      	orrs	r0, r2
 8001616:	2280      	movs	r2, #128	@ 0x80
 8001618:	08e4      	lsrs	r4, r4, #3
 800161a:	0312      	lsls	r2, r2, #12
 800161c:	4214      	tst	r4, r2
 800161e:	d0cd      	beq.n	80015bc <__aeabi_dadd+0x5c0>
 8001620:	08dd      	lsrs	r5, r3, #3
 8001622:	4215      	tst	r5, r2
 8001624:	d1ca      	bne.n	80015bc <__aeabi_dadd+0x5c0>
 8001626:	4663      	mov	r3, ip
 8001628:	08d8      	lsrs	r0, r3, #3
 800162a:	4653      	mov	r3, sl
 800162c:	075b      	lsls	r3, r3, #29
 800162e:	000e      	movs	r6, r1
 8001630:	002c      	movs	r4, r5
 8001632:	4318      	orrs	r0, r3
 8001634:	e7c2      	b.n	80015bc <__aeabi_dadd+0x5c0>
 8001636:	4663      	mov	r3, ip
 8001638:	08d9      	lsrs	r1, r3, #3
 800163a:	4653      	mov	r3, sl
 800163c:	075a      	lsls	r2, r3, #29
 800163e:	430a      	orrs	r2, r1
 8001640:	08dc      	lsrs	r4, r3, #3
 8001642:	e699      	b.n	8001378 <__aeabi_dadd+0x37c>
 8001644:	4663      	mov	r3, ip
 8001646:	08d8      	lsrs	r0, r3, #3
 8001648:	4653      	mov	r3, sl
 800164a:	075a      	lsls	r2, r3, #29
 800164c:	000e      	movs	r6, r1
 800164e:	4302      	orrs	r2, r0
 8001650:	08dc      	lsrs	r4, r3, #3
 8001652:	e6a1      	b.n	8001398 <__aeabi_dadd+0x39c>
 8001654:	0011      	movs	r1, r2
 8001656:	0027      	movs	r7, r4
 8001658:	3920      	subs	r1, #32
 800165a:	40cf      	lsrs	r7, r1
 800165c:	2a20      	cmp	r2, #32
 800165e:	d003      	beq.n	8001668 <__aeabi_dadd+0x66c>
 8001660:	2140      	movs	r1, #64	@ 0x40
 8001662:	1a8a      	subs	r2, r1, r2
 8001664:	4094      	lsls	r4, r2
 8001666:	4320      	orrs	r0, r4
 8001668:	1e42      	subs	r2, r0, #1
 800166a:	4190      	sbcs	r0, r2
 800166c:	0005      	movs	r5, r0
 800166e:	433d      	orrs	r5, r7
 8001670:	e651      	b.n	8001316 <__aeabi_dadd+0x31a>
 8001672:	000c      	movs	r4, r1
 8001674:	2500      	movs	r5, #0
 8001676:	2200      	movs	r2, #0
 8001678:	e558      	b.n	800112c <__aeabi_dadd+0x130>
 800167a:	4460      	add	r0, ip
 800167c:	4560      	cmp	r0, ip
 800167e:	4192      	sbcs	r2, r2
 8001680:	4454      	add	r4, sl
 8001682:	4252      	negs	r2, r2
 8001684:	0005      	movs	r5, r0
 8001686:	18a4      	adds	r4, r4, r2
 8001688:	e73a      	b.n	8001500 <__aeabi_dadd+0x504>
 800168a:	4653      	mov	r3, sl
 800168c:	075a      	lsls	r2, r3, #29
 800168e:	4663      	mov	r3, ip
 8001690:	08d9      	lsrs	r1, r3, #3
 8001692:	4653      	mov	r3, sl
 8001694:	430a      	orrs	r2, r1
 8001696:	08dc      	lsrs	r4, r3, #3
 8001698:	e67e      	b.n	8001398 <__aeabi_dadd+0x39c>
 800169a:	001a      	movs	r2, r3
 800169c:	001c      	movs	r4, r3
 800169e:	432a      	orrs	r2, r5
 80016a0:	d000      	beq.n	80016a4 <__aeabi_dadd+0x6a8>
 80016a2:	e6ab      	b.n	80013fc <__aeabi_dadd+0x400>
 80016a4:	e6c1      	b.n	800142a <__aeabi_dadd+0x42e>
 80016a6:	2120      	movs	r1, #32
 80016a8:	2500      	movs	r5, #0
 80016aa:	1a09      	subs	r1, r1, r0
 80016ac:	e519      	b.n	80010e2 <__aeabi_dadd+0xe6>
 80016ae:	2200      	movs	r2, #0
 80016b0:	2500      	movs	r5, #0
 80016b2:	4c01      	ldr	r4, [pc, #4]	@ (80016b8 <__aeabi_dadd+0x6bc>)
 80016b4:	e53a      	b.n	800112c <__aeabi_dadd+0x130>
 80016b6:	46c0      	nop			@ (mov r8, r8)
 80016b8:	000007ff 	.word	0x000007ff
 80016bc:	ff7fffff 	.word	0xff7fffff
 80016c0:	000007fe 	.word	0x000007fe

080016c4 <__aeabi_ddiv>:
 80016c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c6:	46de      	mov	lr, fp
 80016c8:	4645      	mov	r5, r8
 80016ca:	4657      	mov	r7, sl
 80016cc:	464e      	mov	r6, r9
 80016ce:	b5e0      	push	{r5, r6, r7, lr}
 80016d0:	b087      	sub	sp, #28
 80016d2:	9200      	str	r2, [sp, #0]
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	030b      	lsls	r3, r1, #12
 80016d8:	0b1b      	lsrs	r3, r3, #12
 80016da:	469b      	mov	fp, r3
 80016dc:	0fca      	lsrs	r2, r1, #31
 80016de:	004b      	lsls	r3, r1, #1
 80016e0:	0004      	movs	r4, r0
 80016e2:	4680      	mov	r8, r0
 80016e4:	0d5b      	lsrs	r3, r3, #21
 80016e6:	9202      	str	r2, [sp, #8]
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0x28>
 80016ea:	e16a      	b.n	80019c2 <__aeabi_ddiv+0x2fe>
 80016ec:	4ad4      	ldr	r2, [pc, #848]	@ (8001a40 <__aeabi_ddiv+0x37c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d100      	bne.n	80016f4 <__aeabi_ddiv+0x30>
 80016f2:	e18c      	b.n	8001a0e <__aeabi_ddiv+0x34a>
 80016f4:	4659      	mov	r1, fp
 80016f6:	0f42      	lsrs	r2, r0, #29
 80016f8:	00c9      	lsls	r1, r1, #3
 80016fa:	430a      	orrs	r2, r1
 80016fc:	2180      	movs	r1, #128	@ 0x80
 80016fe:	0409      	lsls	r1, r1, #16
 8001700:	4311      	orrs	r1, r2
 8001702:	00c2      	lsls	r2, r0, #3
 8001704:	4690      	mov	r8, r2
 8001706:	4acf      	ldr	r2, [pc, #828]	@ (8001a44 <__aeabi_ddiv+0x380>)
 8001708:	4689      	mov	r9, r1
 800170a:	4692      	mov	sl, r2
 800170c:	449a      	add	sl, r3
 800170e:	2300      	movs	r3, #0
 8001710:	2400      	movs	r4, #0
 8001712:	9303      	str	r3, [sp, #12]
 8001714:	9e00      	ldr	r6, [sp, #0]
 8001716:	9f01      	ldr	r7, [sp, #4]
 8001718:	033b      	lsls	r3, r7, #12
 800171a:	0b1b      	lsrs	r3, r3, #12
 800171c:	469b      	mov	fp, r3
 800171e:	007b      	lsls	r3, r7, #1
 8001720:	0030      	movs	r0, r6
 8001722:	0d5b      	lsrs	r3, r3, #21
 8001724:	0ffd      	lsrs	r5, r7, #31
 8001726:	2b00      	cmp	r3, #0
 8001728:	d100      	bne.n	800172c <__aeabi_ddiv+0x68>
 800172a:	e128      	b.n	800197e <__aeabi_ddiv+0x2ba>
 800172c:	4ac4      	ldr	r2, [pc, #784]	@ (8001a40 <__aeabi_ddiv+0x37c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d100      	bne.n	8001734 <__aeabi_ddiv+0x70>
 8001732:	e177      	b.n	8001a24 <__aeabi_ddiv+0x360>
 8001734:	4659      	mov	r1, fp
 8001736:	0f72      	lsrs	r2, r6, #29
 8001738:	00c9      	lsls	r1, r1, #3
 800173a:	430a      	orrs	r2, r1
 800173c:	2180      	movs	r1, #128	@ 0x80
 800173e:	0409      	lsls	r1, r1, #16
 8001740:	4311      	orrs	r1, r2
 8001742:	468b      	mov	fp, r1
 8001744:	49bf      	ldr	r1, [pc, #764]	@ (8001a44 <__aeabi_ddiv+0x380>)
 8001746:	00f2      	lsls	r2, r6, #3
 8001748:	468c      	mov	ip, r1
 800174a:	4651      	mov	r1, sl
 800174c:	4463      	add	r3, ip
 800174e:	1acb      	subs	r3, r1, r3
 8001750:	469a      	mov	sl, r3
 8001752:	2300      	movs	r3, #0
 8001754:	9e02      	ldr	r6, [sp, #8]
 8001756:	406e      	eors	r6, r5
 8001758:	2c0f      	cmp	r4, #15
 800175a:	d827      	bhi.n	80017ac <__aeabi_ddiv+0xe8>
 800175c:	49ba      	ldr	r1, [pc, #744]	@ (8001a48 <__aeabi_ddiv+0x384>)
 800175e:	00a4      	lsls	r4, r4, #2
 8001760:	5909      	ldr	r1, [r1, r4]
 8001762:	468f      	mov	pc, r1
 8001764:	46cb      	mov	fp, r9
 8001766:	4642      	mov	r2, r8
 8001768:	9e02      	ldr	r6, [sp, #8]
 800176a:	9b03      	ldr	r3, [sp, #12]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d016      	beq.n	800179e <__aeabi_ddiv+0xda>
 8001770:	2b03      	cmp	r3, #3
 8001772:	d100      	bne.n	8001776 <__aeabi_ddiv+0xb2>
 8001774:	e2a6      	b.n	8001cc4 <__aeabi_ddiv+0x600>
 8001776:	2b01      	cmp	r3, #1
 8001778:	d000      	beq.n	800177c <__aeabi_ddiv+0xb8>
 800177a:	e0df      	b.n	800193c <__aeabi_ddiv+0x278>
 800177c:	2200      	movs	r2, #0
 800177e:	2300      	movs	r3, #0
 8001780:	2400      	movs	r4, #0
 8001782:	4690      	mov	r8, r2
 8001784:	051b      	lsls	r3, r3, #20
 8001786:	4323      	orrs	r3, r4
 8001788:	07f6      	lsls	r6, r6, #31
 800178a:	4333      	orrs	r3, r6
 800178c:	4640      	mov	r0, r8
 800178e:	0019      	movs	r1, r3
 8001790:	b007      	add	sp, #28
 8001792:	bcf0      	pop	{r4, r5, r6, r7}
 8001794:	46bb      	mov	fp, r7
 8001796:	46b2      	mov	sl, r6
 8001798:	46a9      	mov	r9, r5
 800179a:	46a0      	mov	r8, r4
 800179c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800179e:	2200      	movs	r2, #0
 80017a0:	2400      	movs	r4, #0
 80017a2:	4690      	mov	r8, r2
 80017a4:	4ba6      	ldr	r3, [pc, #664]	@ (8001a40 <__aeabi_ddiv+0x37c>)
 80017a6:	e7ed      	b.n	8001784 <__aeabi_ddiv+0xc0>
 80017a8:	002e      	movs	r6, r5
 80017aa:	e7df      	b.n	800176c <__aeabi_ddiv+0xa8>
 80017ac:	45cb      	cmp	fp, r9
 80017ae:	d200      	bcs.n	80017b2 <__aeabi_ddiv+0xee>
 80017b0:	e1d4      	b.n	8001b5c <__aeabi_ddiv+0x498>
 80017b2:	d100      	bne.n	80017b6 <__aeabi_ddiv+0xf2>
 80017b4:	e1cf      	b.n	8001b56 <__aeabi_ddiv+0x492>
 80017b6:	2301      	movs	r3, #1
 80017b8:	425b      	negs	r3, r3
 80017ba:	469c      	mov	ip, r3
 80017bc:	4644      	mov	r4, r8
 80017be:	4648      	mov	r0, r9
 80017c0:	2700      	movs	r7, #0
 80017c2:	44e2      	add	sl, ip
 80017c4:	465b      	mov	r3, fp
 80017c6:	0e15      	lsrs	r5, r2, #24
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	431d      	orrs	r5, r3
 80017cc:	0c19      	lsrs	r1, r3, #16
 80017ce:	042b      	lsls	r3, r5, #16
 80017d0:	0212      	lsls	r2, r2, #8
 80017d2:	9500      	str	r5, [sp, #0]
 80017d4:	0c1d      	lsrs	r5, r3, #16
 80017d6:	4691      	mov	r9, r2
 80017d8:	9102      	str	r1, [sp, #8]
 80017da:	9503      	str	r5, [sp, #12]
 80017dc:	f7fe fd36 	bl	800024c <__aeabi_uidivmod>
 80017e0:	0002      	movs	r2, r0
 80017e2:	436a      	muls	r2, r5
 80017e4:	040b      	lsls	r3, r1, #16
 80017e6:	0c21      	lsrs	r1, r4, #16
 80017e8:	4680      	mov	r8, r0
 80017ea:	4319      	orrs	r1, r3
 80017ec:	428a      	cmp	r2, r1
 80017ee:	d909      	bls.n	8001804 <__aeabi_ddiv+0x140>
 80017f0:	9d00      	ldr	r5, [sp, #0]
 80017f2:	2301      	movs	r3, #1
 80017f4:	46ac      	mov	ip, r5
 80017f6:	425b      	negs	r3, r3
 80017f8:	4461      	add	r1, ip
 80017fa:	469c      	mov	ip, r3
 80017fc:	44e0      	add	r8, ip
 80017fe:	428d      	cmp	r5, r1
 8001800:	d800      	bhi.n	8001804 <__aeabi_ddiv+0x140>
 8001802:	e1fb      	b.n	8001bfc <__aeabi_ddiv+0x538>
 8001804:	1a88      	subs	r0, r1, r2
 8001806:	9902      	ldr	r1, [sp, #8]
 8001808:	f7fe fd20 	bl	800024c <__aeabi_uidivmod>
 800180c:	9a03      	ldr	r2, [sp, #12]
 800180e:	0424      	lsls	r4, r4, #16
 8001810:	4342      	muls	r2, r0
 8001812:	0409      	lsls	r1, r1, #16
 8001814:	0c24      	lsrs	r4, r4, #16
 8001816:	0003      	movs	r3, r0
 8001818:	430c      	orrs	r4, r1
 800181a:	42a2      	cmp	r2, r4
 800181c:	d906      	bls.n	800182c <__aeabi_ddiv+0x168>
 800181e:	9900      	ldr	r1, [sp, #0]
 8001820:	3b01      	subs	r3, #1
 8001822:	468c      	mov	ip, r1
 8001824:	4464      	add	r4, ip
 8001826:	42a1      	cmp	r1, r4
 8001828:	d800      	bhi.n	800182c <__aeabi_ddiv+0x168>
 800182a:	e1e1      	b.n	8001bf0 <__aeabi_ddiv+0x52c>
 800182c:	1aa0      	subs	r0, r4, r2
 800182e:	4642      	mov	r2, r8
 8001830:	0412      	lsls	r2, r2, #16
 8001832:	431a      	orrs	r2, r3
 8001834:	4693      	mov	fp, r2
 8001836:	464b      	mov	r3, r9
 8001838:	4659      	mov	r1, fp
 800183a:	0c1b      	lsrs	r3, r3, #16
 800183c:	001d      	movs	r5, r3
 800183e:	9304      	str	r3, [sp, #16]
 8001840:	040b      	lsls	r3, r1, #16
 8001842:	4649      	mov	r1, r9
 8001844:	0409      	lsls	r1, r1, #16
 8001846:	0c09      	lsrs	r1, r1, #16
 8001848:	000c      	movs	r4, r1
 800184a:	0c1b      	lsrs	r3, r3, #16
 800184c:	435c      	muls	r4, r3
 800184e:	0c12      	lsrs	r2, r2, #16
 8001850:	436b      	muls	r3, r5
 8001852:	4688      	mov	r8, r1
 8001854:	4351      	muls	r1, r2
 8001856:	436a      	muls	r2, r5
 8001858:	0c25      	lsrs	r5, r4, #16
 800185a:	46ac      	mov	ip, r5
 800185c:	185b      	adds	r3, r3, r1
 800185e:	4463      	add	r3, ip
 8001860:	4299      	cmp	r1, r3
 8001862:	d903      	bls.n	800186c <__aeabi_ddiv+0x1a8>
 8001864:	2180      	movs	r1, #128	@ 0x80
 8001866:	0249      	lsls	r1, r1, #9
 8001868:	468c      	mov	ip, r1
 800186a:	4462      	add	r2, ip
 800186c:	0c19      	lsrs	r1, r3, #16
 800186e:	0424      	lsls	r4, r4, #16
 8001870:	041b      	lsls	r3, r3, #16
 8001872:	0c24      	lsrs	r4, r4, #16
 8001874:	188a      	adds	r2, r1, r2
 8001876:	191c      	adds	r4, r3, r4
 8001878:	4290      	cmp	r0, r2
 800187a:	d302      	bcc.n	8001882 <__aeabi_ddiv+0x1be>
 800187c:	d116      	bne.n	80018ac <__aeabi_ddiv+0x1e8>
 800187e:	42a7      	cmp	r7, r4
 8001880:	d214      	bcs.n	80018ac <__aeabi_ddiv+0x1e8>
 8001882:	465b      	mov	r3, fp
 8001884:	9d00      	ldr	r5, [sp, #0]
 8001886:	3b01      	subs	r3, #1
 8001888:	444f      	add	r7, r9
 800188a:	9305      	str	r3, [sp, #20]
 800188c:	454f      	cmp	r7, r9
 800188e:	419b      	sbcs	r3, r3
 8001890:	46ac      	mov	ip, r5
 8001892:	425b      	negs	r3, r3
 8001894:	4463      	add	r3, ip
 8001896:	18c0      	adds	r0, r0, r3
 8001898:	4285      	cmp	r5, r0
 800189a:	d300      	bcc.n	800189e <__aeabi_ddiv+0x1da>
 800189c:	e1a1      	b.n	8001be2 <__aeabi_ddiv+0x51e>
 800189e:	4282      	cmp	r2, r0
 80018a0:	d900      	bls.n	80018a4 <__aeabi_ddiv+0x1e0>
 80018a2:	e1f6      	b.n	8001c92 <__aeabi_ddiv+0x5ce>
 80018a4:	d100      	bne.n	80018a8 <__aeabi_ddiv+0x1e4>
 80018a6:	e1f1      	b.n	8001c8c <__aeabi_ddiv+0x5c8>
 80018a8:	9b05      	ldr	r3, [sp, #20]
 80018aa:	469b      	mov	fp, r3
 80018ac:	1b3c      	subs	r4, r7, r4
 80018ae:	42a7      	cmp	r7, r4
 80018b0:	41bf      	sbcs	r7, r7
 80018b2:	9d00      	ldr	r5, [sp, #0]
 80018b4:	1a80      	subs	r0, r0, r2
 80018b6:	427f      	negs	r7, r7
 80018b8:	1bc0      	subs	r0, r0, r7
 80018ba:	4285      	cmp	r5, r0
 80018bc:	d100      	bne.n	80018c0 <__aeabi_ddiv+0x1fc>
 80018be:	e1d0      	b.n	8001c62 <__aeabi_ddiv+0x59e>
 80018c0:	9902      	ldr	r1, [sp, #8]
 80018c2:	f7fe fcc3 	bl	800024c <__aeabi_uidivmod>
 80018c6:	9a03      	ldr	r2, [sp, #12]
 80018c8:	040b      	lsls	r3, r1, #16
 80018ca:	4342      	muls	r2, r0
 80018cc:	0c21      	lsrs	r1, r4, #16
 80018ce:	0007      	movs	r7, r0
 80018d0:	4319      	orrs	r1, r3
 80018d2:	428a      	cmp	r2, r1
 80018d4:	d900      	bls.n	80018d8 <__aeabi_ddiv+0x214>
 80018d6:	e178      	b.n	8001bca <__aeabi_ddiv+0x506>
 80018d8:	1a88      	subs	r0, r1, r2
 80018da:	9902      	ldr	r1, [sp, #8]
 80018dc:	f7fe fcb6 	bl	800024c <__aeabi_uidivmod>
 80018e0:	9a03      	ldr	r2, [sp, #12]
 80018e2:	0424      	lsls	r4, r4, #16
 80018e4:	4342      	muls	r2, r0
 80018e6:	0409      	lsls	r1, r1, #16
 80018e8:	0c24      	lsrs	r4, r4, #16
 80018ea:	0003      	movs	r3, r0
 80018ec:	430c      	orrs	r4, r1
 80018ee:	42a2      	cmp	r2, r4
 80018f0:	d900      	bls.n	80018f4 <__aeabi_ddiv+0x230>
 80018f2:	e15d      	b.n	8001bb0 <__aeabi_ddiv+0x4ec>
 80018f4:	4641      	mov	r1, r8
 80018f6:	1aa4      	subs	r4, r4, r2
 80018f8:	043a      	lsls	r2, r7, #16
 80018fa:	431a      	orrs	r2, r3
 80018fc:	9d04      	ldr	r5, [sp, #16]
 80018fe:	0413      	lsls	r3, r2, #16
 8001900:	0c1b      	lsrs	r3, r3, #16
 8001902:	4359      	muls	r1, r3
 8001904:	4647      	mov	r7, r8
 8001906:	436b      	muls	r3, r5
 8001908:	469c      	mov	ip, r3
 800190a:	0c10      	lsrs	r0, r2, #16
 800190c:	4347      	muls	r7, r0
 800190e:	0c0b      	lsrs	r3, r1, #16
 8001910:	44bc      	add	ip, r7
 8001912:	4463      	add	r3, ip
 8001914:	4368      	muls	r0, r5
 8001916:	429f      	cmp	r7, r3
 8001918:	d903      	bls.n	8001922 <__aeabi_ddiv+0x25e>
 800191a:	2580      	movs	r5, #128	@ 0x80
 800191c:	026d      	lsls	r5, r5, #9
 800191e:	46ac      	mov	ip, r5
 8001920:	4460      	add	r0, ip
 8001922:	0c1f      	lsrs	r7, r3, #16
 8001924:	0409      	lsls	r1, r1, #16
 8001926:	041b      	lsls	r3, r3, #16
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	183f      	adds	r7, r7, r0
 800192c:	185b      	adds	r3, r3, r1
 800192e:	42bc      	cmp	r4, r7
 8001930:	d200      	bcs.n	8001934 <__aeabi_ddiv+0x270>
 8001932:	e102      	b.n	8001b3a <__aeabi_ddiv+0x476>
 8001934:	d100      	bne.n	8001938 <__aeabi_ddiv+0x274>
 8001936:	e0fd      	b.n	8001b34 <__aeabi_ddiv+0x470>
 8001938:	2301      	movs	r3, #1
 800193a:	431a      	orrs	r2, r3
 800193c:	4b43      	ldr	r3, [pc, #268]	@ (8001a4c <__aeabi_ddiv+0x388>)
 800193e:	4453      	add	r3, sl
 8001940:	2b00      	cmp	r3, #0
 8001942:	dc00      	bgt.n	8001946 <__aeabi_ddiv+0x282>
 8001944:	e0ae      	b.n	8001aa4 <__aeabi_ddiv+0x3e0>
 8001946:	0751      	lsls	r1, r2, #29
 8001948:	d000      	beq.n	800194c <__aeabi_ddiv+0x288>
 800194a:	e198      	b.n	8001c7e <__aeabi_ddiv+0x5ba>
 800194c:	4659      	mov	r1, fp
 800194e:	01c9      	lsls	r1, r1, #7
 8001950:	d506      	bpl.n	8001960 <__aeabi_ddiv+0x29c>
 8001952:	4659      	mov	r1, fp
 8001954:	4b3e      	ldr	r3, [pc, #248]	@ (8001a50 <__aeabi_ddiv+0x38c>)
 8001956:	4019      	ands	r1, r3
 8001958:	2380      	movs	r3, #128	@ 0x80
 800195a:	468b      	mov	fp, r1
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4453      	add	r3, sl
 8001960:	493c      	ldr	r1, [pc, #240]	@ (8001a54 <__aeabi_ddiv+0x390>)
 8001962:	428b      	cmp	r3, r1
 8001964:	dd00      	ble.n	8001968 <__aeabi_ddiv+0x2a4>
 8001966:	e71a      	b.n	800179e <__aeabi_ddiv+0xda>
 8001968:	4659      	mov	r1, fp
 800196a:	08d2      	lsrs	r2, r2, #3
 800196c:	0749      	lsls	r1, r1, #29
 800196e:	4311      	orrs	r1, r2
 8001970:	465a      	mov	r2, fp
 8001972:	055b      	lsls	r3, r3, #21
 8001974:	0254      	lsls	r4, r2, #9
 8001976:	4688      	mov	r8, r1
 8001978:	0b24      	lsrs	r4, r4, #12
 800197a:	0d5b      	lsrs	r3, r3, #21
 800197c:	e702      	b.n	8001784 <__aeabi_ddiv+0xc0>
 800197e:	465a      	mov	r2, fp
 8001980:	9b00      	ldr	r3, [sp, #0]
 8001982:	431a      	orrs	r2, r3
 8001984:	d100      	bne.n	8001988 <__aeabi_ddiv+0x2c4>
 8001986:	e07e      	b.n	8001a86 <__aeabi_ddiv+0x3c2>
 8001988:	465b      	mov	r3, fp
 800198a:	2b00      	cmp	r3, #0
 800198c:	d100      	bne.n	8001990 <__aeabi_ddiv+0x2cc>
 800198e:	e100      	b.n	8001b92 <__aeabi_ddiv+0x4ce>
 8001990:	4658      	mov	r0, fp
 8001992:	f001 fabb 	bl	8002f0c <__clzsi2>
 8001996:	0002      	movs	r2, r0
 8001998:	0003      	movs	r3, r0
 800199a:	3a0b      	subs	r2, #11
 800199c:	271d      	movs	r7, #29
 800199e:	9e00      	ldr	r6, [sp, #0]
 80019a0:	1aba      	subs	r2, r7, r2
 80019a2:	0019      	movs	r1, r3
 80019a4:	4658      	mov	r0, fp
 80019a6:	40d6      	lsrs	r6, r2
 80019a8:	3908      	subs	r1, #8
 80019aa:	4088      	lsls	r0, r1
 80019ac:	0032      	movs	r2, r6
 80019ae:	4302      	orrs	r2, r0
 80019b0:	4693      	mov	fp, r2
 80019b2:	9a00      	ldr	r2, [sp, #0]
 80019b4:	408a      	lsls	r2, r1
 80019b6:	4928      	ldr	r1, [pc, #160]	@ (8001a58 <__aeabi_ddiv+0x394>)
 80019b8:	4453      	add	r3, sl
 80019ba:	468a      	mov	sl, r1
 80019bc:	449a      	add	sl, r3
 80019be:	2300      	movs	r3, #0
 80019c0:	e6c8      	b.n	8001754 <__aeabi_ddiv+0x90>
 80019c2:	465b      	mov	r3, fp
 80019c4:	4303      	orrs	r3, r0
 80019c6:	4699      	mov	r9, r3
 80019c8:	d056      	beq.n	8001a78 <__aeabi_ddiv+0x3b4>
 80019ca:	465b      	mov	r3, fp
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_ddiv+0x30e>
 80019d0:	e0cd      	b.n	8001b6e <__aeabi_ddiv+0x4aa>
 80019d2:	4658      	mov	r0, fp
 80019d4:	f001 fa9a 	bl	8002f0c <__clzsi2>
 80019d8:	230b      	movs	r3, #11
 80019da:	425b      	negs	r3, r3
 80019dc:	469c      	mov	ip, r3
 80019de:	0002      	movs	r2, r0
 80019e0:	4484      	add	ip, r0
 80019e2:	4666      	mov	r6, ip
 80019e4:	231d      	movs	r3, #29
 80019e6:	1b9b      	subs	r3, r3, r6
 80019e8:	0026      	movs	r6, r4
 80019ea:	0011      	movs	r1, r2
 80019ec:	4658      	mov	r0, fp
 80019ee:	40de      	lsrs	r6, r3
 80019f0:	3908      	subs	r1, #8
 80019f2:	4088      	lsls	r0, r1
 80019f4:	0033      	movs	r3, r6
 80019f6:	4303      	orrs	r3, r0
 80019f8:	4699      	mov	r9, r3
 80019fa:	0023      	movs	r3, r4
 80019fc:	408b      	lsls	r3, r1
 80019fe:	4698      	mov	r8, r3
 8001a00:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <__aeabi_ddiv+0x398>)
 8001a02:	2400      	movs	r4, #0
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	469a      	mov	sl, r3
 8001a08:	2300      	movs	r3, #0
 8001a0a:	9303      	str	r3, [sp, #12]
 8001a0c:	e682      	b.n	8001714 <__aeabi_ddiv+0x50>
 8001a0e:	465a      	mov	r2, fp
 8001a10:	4302      	orrs	r2, r0
 8001a12:	4691      	mov	r9, r2
 8001a14:	d12a      	bne.n	8001a6c <__aeabi_ddiv+0x3a8>
 8001a16:	2200      	movs	r2, #0
 8001a18:	469a      	mov	sl, r3
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	4690      	mov	r8, r2
 8001a1e:	2408      	movs	r4, #8
 8001a20:	9303      	str	r3, [sp, #12]
 8001a22:	e677      	b.n	8001714 <__aeabi_ddiv+0x50>
 8001a24:	465a      	mov	r2, fp
 8001a26:	9b00      	ldr	r3, [sp, #0]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <__aeabi_ddiv+0x39c>)
 8001a2c:	469c      	mov	ip, r3
 8001a2e:	44e2      	add	sl, ip
 8001a30:	2a00      	cmp	r2, #0
 8001a32:	d117      	bne.n	8001a64 <__aeabi_ddiv+0x3a0>
 8001a34:	2302      	movs	r3, #2
 8001a36:	431c      	orrs	r4, r3
 8001a38:	2300      	movs	r3, #0
 8001a3a:	469b      	mov	fp, r3
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	e689      	b.n	8001754 <__aeabi_ddiv+0x90>
 8001a40:	000007ff 	.word	0x000007ff
 8001a44:	fffffc01 	.word	0xfffffc01
 8001a48:	0800c0f4 	.word	0x0800c0f4
 8001a4c:	000003ff 	.word	0x000003ff
 8001a50:	feffffff 	.word	0xfeffffff
 8001a54:	000007fe 	.word	0x000007fe
 8001a58:	000003f3 	.word	0x000003f3
 8001a5c:	fffffc0d 	.word	0xfffffc0d
 8001a60:	fffff801 	.word	0xfffff801
 8001a64:	2303      	movs	r3, #3
 8001a66:	0032      	movs	r2, r6
 8001a68:	431c      	orrs	r4, r3
 8001a6a:	e673      	b.n	8001754 <__aeabi_ddiv+0x90>
 8001a6c:	469a      	mov	sl, r3
 8001a6e:	2303      	movs	r3, #3
 8001a70:	46d9      	mov	r9, fp
 8001a72:	240c      	movs	r4, #12
 8001a74:	9303      	str	r3, [sp, #12]
 8001a76:	e64d      	b.n	8001714 <__aeabi_ddiv+0x50>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	4698      	mov	r8, r3
 8001a7c:	469a      	mov	sl, r3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	2404      	movs	r4, #4
 8001a82:	9303      	str	r3, [sp, #12]
 8001a84:	e646      	b.n	8001714 <__aeabi_ddiv+0x50>
 8001a86:	2301      	movs	r3, #1
 8001a88:	431c      	orrs	r4, r3
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	469b      	mov	fp, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	e660      	b.n	8001754 <__aeabi_ddiv+0x90>
 8001a92:	2300      	movs	r3, #0
 8001a94:	2480      	movs	r4, #128	@ 0x80
 8001a96:	4698      	mov	r8, r3
 8001a98:	2600      	movs	r6, #0
 8001a9a:	4b92      	ldr	r3, [pc, #584]	@ (8001ce4 <__aeabi_ddiv+0x620>)
 8001a9c:	0324      	lsls	r4, r4, #12
 8001a9e:	e671      	b.n	8001784 <__aeabi_ddiv+0xc0>
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4252      	negs	r2, r2
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	1ac9      	subs	r1, r1, r3
 8001aa8:	2938      	cmp	r1, #56	@ 0x38
 8001aaa:	dd00      	ble.n	8001aae <__aeabi_ddiv+0x3ea>
 8001aac:	e666      	b.n	800177c <__aeabi_ddiv+0xb8>
 8001aae:	291f      	cmp	r1, #31
 8001ab0:	dc00      	bgt.n	8001ab4 <__aeabi_ddiv+0x3f0>
 8001ab2:	e0ab      	b.n	8001c0c <__aeabi_ddiv+0x548>
 8001ab4:	201f      	movs	r0, #31
 8001ab6:	4240      	negs	r0, r0
 8001ab8:	1ac3      	subs	r3, r0, r3
 8001aba:	4658      	mov	r0, fp
 8001abc:	40d8      	lsrs	r0, r3
 8001abe:	0003      	movs	r3, r0
 8001ac0:	2920      	cmp	r1, #32
 8001ac2:	d004      	beq.n	8001ace <__aeabi_ddiv+0x40a>
 8001ac4:	4658      	mov	r0, fp
 8001ac6:	4988      	ldr	r1, [pc, #544]	@ (8001ce8 <__aeabi_ddiv+0x624>)
 8001ac8:	4451      	add	r1, sl
 8001aca:	4088      	lsls	r0, r1
 8001acc:	4302      	orrs	r2, r0
 8001ace:	1e51      	subs	r1, r2, #1
 8001ad0:	418a      	sbcs	r2, r1
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	2400      	movs	r4, #0
 8001ada:	4011      	ands	r1, r2
 8001adc:	4213      	tst	r3, r2
 8001ade:	d00c      	beq.n	8001afa <__aeabi_ddiv+0x436>
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d100      	bne.n	8001aea <__aeabi_ddiv+0x426>
 8001ae8:	e0f9      	b.n	8001cde <__aeabi_ddiv+0x61a>
 8001aea:	1d11      	adds	r1, r2, #4
 8001aec:	4291      	cmp	r1, r2
 8001aee:	419b      	sbcs	r3, r3
 8001af0:	000a      	movs	r2, r1
 8001af2:	425b      	negs	r3, r3
 8001af4:	0759      	lsls	r1, r3, #29
 8001af6:	025b      	lsls	r3, r3, #9
 8001af8:	0b1c      	lsrs	r4, r3, #12
 8001afa:	08d2      	lsrs	r2, r2, #3
 8001afc:	430a      	orrs	r2, r1
 8001afe:	4690      	mov	r8, r2
 8001b00:	2300      	movs	r3, #0
 8001b02:	e63f      	b.n	8001784 <__aeabi_ddiv+0xc0>
 8001b04:	2480      	movs	r4, #128	@ 0x80
 8001b06:	464b      	mov	r3, r9
 8001b08:	0324      	lsls	r4, r4, #12
 8001b0a:	4223      	tst	r3, r4
 8001b0c:	d009      	beq.n	8001b22 <__aeabi_ddiv+0x45e>
 8001b0e:	465b      	mov	r3, fp
 8001b10:	4223      	tst	r3, r4
 8001b12:	d106      	bne.n	8001b22 <__aeabi_ddiv+0x45e>
 8001b14:	431c      	orrs	r4, r3
 8001b16:	0324      	lsls	r4, r4, #12
 8001b18:	002e      	movs	r6, r5
 8001b1a:	4690      	mov	r8, r2
 8001b1c:	4b71      	ldr	r3, [pc, #452]	@ (8001ce4 <__aeabi_ddiv+0x620>)
 8001b1e:	0b24      	lsrs	r4, r4, #12
 8001b20:	e630      	b.n	8001784 <__aeabi_ddiv+0xc0>
 8001b22:	2480      	movs	r4, #128	@ 0x80
 8001b24:	464b      	mov	r3, r9
 8001b26:	0324      	lsls	r4, r4, #12
 8001b28:	431c      	orrs	r4, r3
 8001b2a:	0324      	lsls	r4, r4, #12
 8001b2c:	9e02      	ldr	r6, [sp, #8]
 8001b2e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ce4 <__aeabi_ddiv+0x620>)
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	e627      	b.n	8001784 <__aeabi_ddiv+0xc0>
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d100      	bne.n	8001b3a <__aeabi_ddiv+0x476>
 8001b38:	e700      	b.n	800193c <__aeabi_ddiv+0x278>
 8001b3a:	9800      	ldr	r0, [sp, #0]
 8001b3c:	1e51      	subs	r1, r2, #1
 8001b3e:	4684      	mov	ip, r0
 8001b40:	4464      	add	r4, ip
 8001b42:	4284      	cmp	r4, r0
 8001b44:	d200      	bcs.n	8001b48 <__aeabi_ddiv+0x484>
 8001b46:	e084      	b.n	8001c52 <__aeabi_ddiv+0x58e>
 8001b48:	42bc      	cmp	r4, r7
 8001b4a:	d200      	bcs.n	8001b4e <__aeabi_ddiv+0x48a>
 8001b4c:	e0ae      	b.n	8001cac <__aeabi_ddiv+0x5e8>
 8001b4e:	d100      	bne.n	8001b52 <__aeabi_ddiv+0x48e>
 8001b50:	e0c1      	b.n	8001cd6 <__aeabi_ddiv+0x612>
 8001b52:	000a      	movs	r2, r1
 8001b54:	e6f0      	b.n	8001938 <__aeabi_ddiv+0x274>
 8001b56:	4542      	cmp	r2, r8
 8001b58:	d900      	bls.n	8001b5c <__aeabi_ddiv+0x498>
 8001b5a:	e62c      	b.n	80017b6 <__aeabi_ddiv+0xf2>
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	07dc      	lsls	r4, r3, #31
 8001b60:	0858      	lsrs	r0, r3, #1
 8001b62:	4643      	mov	r3, r8
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	431c      	orrs	r4, r3
 8001b68:	4643      	mov	r3, r8
 8001b6a:	07df      	lsls	r7, r3, #31
 8001b6c:	e62a      	b.n	80017c4 <__aeabi_ddiv+0x100>
 8001b6e:	f001 f9cd 	bl	8002f0c <__clzsi2>
 8001b72:	2315      	movs	r3, #21
 8001b74:	469c      	mov	ip, r3
 8001b76:	4484      	add	ip, r0
 8001b78:	0002      	movs	r2, r0
 8001b7a:	4663      	mov	r3, ip
 8001b7c:	3220      	adds	r2, #32
 8001b7e:	2b1c      	cmp	r3, #28
 8001b80:	dc00      	bgt.n	8001b84 <__aeabi_ddiv+0x4c0>
 8001b82:	e72e      	b.n	80019e2 <__aeabi_ddiv+0x31e>
 8001b84:	0023      	movs	r3, r4
 8001b86:	3808      	subs	r0, #8
 8001b88:	4083      	lsls	r3, r0
 8001b8a:	4699      	mov	r9, r3
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	4698      	mov	r8, r3
 8001b90:	e736      	b.n	8001a00 <__aeabi_ddiv+0x33c>
 8001b92:	f001 f9bb 	bl	8002f0c <__clzsi2>
 8001b96:	0002      	movs	r2, r0
 8001b98:	0003      	movs	r3, r0
 8001b9a:	3215      	adds	r2, #21
 8001b9c:	3320      	adds	r3, #32
 8001b9e:	2a1c      	cmp	r2, #28
 8001ba0:	dc00      	bgt.n	8001ba4 <__aeabi_ddiv+0x4e0>
 8001ba2:	e6fb      	b.n	800199c <__aeabi_ddiv+0x2d8>
 8001ba4:	9900      	ldr	r1, [sp, #0]
 8001ba6:	3808      	subs	r0, #8
 8001ba8:	4081      	lsls	r1, r0
 8001baa:	2200      	movs	r2, #0
 8001bac:	468b      	mov	fp, r1
 8001bae:	e702      	b.n	80019b6 <__aeabi_ddiv+0x2f2>
 8001bb0:	9900      	ldr	r1, [sp, #0]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	468c      	mov	ip, r1
 8001bb6:	4464      	add	r4, ip
 8001bb8:	42a1      	cmp	r1, r4
 8001bba:	d900      	bls.n	8001bbe <__aeabi_ddiv+0x4fa>
 8001bbc:	e69a      	b.n	80018f4 <__aeabi_ddiv+0x230>
 8001bbe:	42a2      	cmp	r2, r4
 8001bc0:	d800      	bhi.n	8001bc4 <__aeabi_ddiv+0x500>
 8001bc2:	e697      	b.n	80018f4 <__aeabi_ddiv+0x230>
 8001bc4:	1e83      	subs	r3, r0, #2
 8001bc6:	4464      	add	r4, ip
 8001bc8:	e694      	b.n	80018f4 <__aeabi_ddiv+0x230>
 8001bca:	46ac      	mov	ip, r5
 8001bcc:	4461      	add	r1, ip
 8001bce:	3f01      	subs	r7, #1
 8001bd0:	428d      	cmp	r5, r1
 8001bd2:	d900      	bls.n	8001bd6 <__aeabi_ddiv+0x512>
 8001bd4:	e680      	b.n	80018d8 <__aeabi_ddiv+0x214>
 8001bd6:	428a      	cmp	r2, r1
 8001bd8:	d800      	bhi.n	8001bdc <__aeabi_ddiv+0x518>
 8001bda:	e67d      	b.n	80018d8 <__aeabi_ddiv+0x214>
 8001bdc:	1e87      	subs	r7, r0, #2
 8001bde:	4461      	add	r1, ip
 8001be0:	e67a      	b.n	80018d8 <__aeabi_ddiv+0x214>
 8001be2:	4285      	cmp	r5, r0
 8001be4:	d000      	beq.n	8001be8 <__aeabi_ddiv+0x524>
 8001be6:	e65f      	b.n	80018a8 <__aeabi_ddiv+0x1e4>
 8001be8:	45b9      	cmp	r9, r7
 8001bea:	d900      	bls.n	8001bee <__aeabi_ddiv+0x52a>
 8001bec:	e65c      	b.n	80018a8 <__aeabi_ddiv+0x1e4>
 8001bee:	e656      	b.n	800189e <__aeabi_ddiv+0x1da>
 8001bf0:	42a2      	cmp	r2, r4
 8001bf2:	d800      	bhi.n	8001bf6 <__aeabi_ddiv+0x532>
 8001bf4:	e61a      	b.n	800182c <__aeabi_ddiv+0x168>
 8001bf6:	1e83      	subs	r3, r0, #2
 8001bf8:	4464      	add	r4, ip
 8001bfa:	e617      	b.n	800182c <__aeabi_ddiv+0x168>
 8001bfc:	428a      	cmp	r2, r1
 8001bfe:	d800      	bhi.n	8001c02 <__aeabi_ddiv+0x53e>
 8001c00:	e600      	b.n	8001804 <__aeabi_ddiv+0x140>
 8001c02:	46ac      	mov	ip, r5
 8001c04:	1e83      	subs	r3, r0, #2
 8001c06:	4698      	mov	r8, r3
 8001c08:	4461      	add	r1, ip
 8001c0a:	e5fb      	b.n	8001804 <__aeabi_ddiv+0x140>
 8001c0c:	4837      	ldr	r0, [pc, #220]	@ (8001cec <__aeabi_ddiv+0x628>)
 8001c0e:	0014      	movs	r4, r2
 8001c10:	4450      	add	r0, sl
 8001c12:	4082      	lsls	r2, r0
 8001c14:	465b      	mov	r3, fp
 8001c16:	0017      	movs	r7, r2
 8001c18:	4083      	lsls	r3, r0
 8001c1a:	40cc      	lsrs	r4, r1
 8001c1c:	1e7a      	subs	r2, r7, #1
 8001c1e:	4197      	sbcs	r7, r2
 8001c20:	4323      	orrs	r3, r4
 8001c22:	433b      	orrs	r3, r7
 8001c24:	001a      	movs	r2, r3
 8001c26:	465b      	mov	r3, fp
 8001c28:	40cb      	lsrs	r3, r1
 8001c2a:	0751      	lsls	r1, r2, #29
 8001c2c:	d009      	beq.n	8001c42 <__aeabi_ddiv+0x57e>
 8001c2e:	210f      	movs	r1, #15
 8001c30:	4011      	ands	r1, r2
 8001c32:	2904      	cmp	r1, #4
 8001c34:	d005      	beq.n	8001c42 <__aeabi_ddiv+0x57e>
 8001c36:	1d11      	adds	r1, r2, #4
 8001c38:	4291      	cmp	r1, r2
 8001c3a:	4192      	sbcs	r2, r2
 8001c3c:	4252      	negs	r2, r2
 8001c3e:	189b      	adds	r3, r3, r2
 8001c40:	000a      	movs	r2, r1
 8001c42:	0219      	lsls	r1, r3, #8
 8001c44:	d400      	bmi.n	8001c48 <__aeabi_ddiv+0x584>
 8001c46:	e755      	b.n	8001af4 <__aeabi_ddiv+0x430>
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	2400      	movs	r4, #0
 8001c4e:	4690      	mov	r8, r2
 8001c50:	e598      	b.n	8001784 <__aeabi_ddiv+0xc0>
 8001c52:	000a      	movs	r2, r1
 8001c54:	42bc      	cmp	r4, r7
 8001c56:	d000      	beq.n	8001c5a <__aeabi_ddiv+0x596>
 8001c58:	e66e      	b.n	8001938 <__aeabi_ddiv+0x274>
 8001c5a:	454b      	cmp	r3, r9
 8001c5c:	d000      	beq.n	8001c60 <__aeabi_ddiv+0x59c>
 8001c5e:	e66b      	b.n	8001938 <__aeabi_ddiv+0x274>
 8001c60:	e66c      	b.n	800193c <__aeabi_ddiv+0x278>
 8001c62:	4b23      	ldr	r3, [pc, #140]	@ (8001cf0 <__aeabi_ddiv+0x62c>)
 8001c64:	4a23      	ldr	r2, [pc, #140]	@ (8001cf4 <__aeabi_ddiv+0x630>)
 8001c66:	4453      	add	r3, sl
 8001c68:	4592      	cmp	sl, r2
 8001c6a:	da00      	bge.n	8001c6e <__aeabi_ddiv+0x5aa>
 8001c6c:	e718      	b.n	8001aa0 <__aeabi_ddiv+0x3dc>
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4249      	negs	r1, r1
 8001c72:	1d0a      	adds	r2, r1, #4
 8001c74:	428a      	cmp	r2, r1
 8001c76:	4189      	sbcs	r1, r1
 8001c78:	4249      	negs	r1, r1
 8001c7a:	448b      	add	fp, r1
 8001c7c:	e666      	b.n	800194c <__aeabi_ddiv+0x288>
 8001c7e:	210f      	movs	r1, #15
 8001c80:	4011      	ands	r1, r2
 8001c82:	2904      	cmp	r1, #4
 8001c84:	d100      	bne.n	8001c88 <__aeabi_ddiv+0x5c4>
 8001c86:	e661      	b.n	800194c <__aeabi_ddiv+0x288>
 8001c88:	0011      	movs	r1, r2
 8001c8a:	e7f2      	b.n	8001c72 <__aeabi_ddiv+0x5ae>
 8001c8c:	42bc      	cmp	r4, r7
 8001c8e:	d800      	bhi.n	8001c92 <__aeabi_ddiv+0x5ce>
 8001c90:	e60a      	b.n	80018a8 <__aeabi_ddiv+0x1e4>
 8001c92:	2302      	movs	r3, #2
 8001c94:	425b      	negs	r3, r3
 8001c96:	469c      	mov	ip, r3
 8001c98:	9900      	ldr	r1, [sp, #0]
 8001c9a:	444f      	add	r7, r9
 8001c9c:	454f      	cmp	r7, r9
 8001c9e:	419b      	sbcs	r3, r3
 8001ca0:	44e3      	add	fp, ip
 8001ca2:	468c      	mov	ip, r1
 8001ca4:	425b      	negs	r3, r3
 8001ca6:	4463      	add	r3, ip
 8001ca8:	18c0      	adds	r0, r0, r3
 8001caa:	e5ff      	b.n	80018ac <__aeabi_ddiv+0x1e8>
 8001cac:	4649      	mov	r1, r9
 8001cae:	9d00      	ldr	r5, [sp, #0]
 8001cb0:	0048      	lsls	r0, r1, #1
 8001cb2:	4548      	cmp	r0, r9
 8001cb4:	4189      	sbcs	r1, r1
 8001cb6:	46ac      	mov	ip, r5
 8001cb8:	4249      	negs	r1, r1
 8001cba:	4461      	add	r1, ip
 8001cbc:	4681      	mov	r9, r0
 8001cbe:	3a02      	subs	r2, #2
 8001cc0:	1864      	adds	r4, r4, r1
 8001cc2:	e7c7      	b.n	8001c54 <__aeabi_ddiv+0x590>
 8001cc4:	2480      	movs	r4, #128	@ 0x80
 8001cc6:	465b      	mov	r3, fp
 8001cc8:	0324      	lsls	r4, r4, #12
 8001cca:	431c      	orrs	r4, r3
 8001ccc:	0324      	lsls	r4, r4, #12
 8001cce:	4690      	mov	r8, r2
 8001cd0:	4b04      	ldr	r3, [pc, #16]	@ (8001ce4 <__aeabi_ddiv+0x620>)
 8001cd2:	0b24      	lsrs	r4, r4, #12
 8001cd4:	e556      	b.n	8001784 <__aeabi_ddiv+0xc0>
 8001cd6:	4599      	cmp	r9, r3
 8001cd8:	d3e8      	bcc.n	8001cac <__aeabi_ddiv+0x5e8>
 8001cda:	000a      	movs	r2, r1
 8001cdc:	e7bd      	b.n	8001c5a <__aeabi_ddiv+0x596>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e708      	b.n	8001af4 <__aeabi_ddiv+0x430>
 8001ce2:	46c0      	nop			@ (mov r8, r8)
 8001ce4:	000007ff 	.word	0x000007ff
 8001ce8:	0000043e 	.word	0x0000043e
 8001cec:	0000041e 	.word	0x0000041e
 8001cf0:	000003ff 	.word	0x000003ff
 8001cf4:	fffffc02 	.word	0xfffffc02

08001cf8 <__eqdf2>:
 8001cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfa:	4657      	mov	r7, sl
 8001cfc:	46de      	mov	lr, fp
 8001cfe:	464e      	mov	r6, r9
 8001d00:	4645      	mov	r5, r8
 8001d02:	b5e0      	push	{r5, r6, r7, lr}
 8001d04:	000d      	movs	r5, r1
 8001d06:	0004      	movs	r4, r0
 8001d08:	0fe8      	lsrs	r0, r5, #31
 8001d0a:	4683      	mov	fp, r0
 8001d0c:	0309      	lsls	r1, r1, #12
 8001d0e:	0fd8      	lsrs	r0, r3, #31
 8001d10:	0b09      	lsrs	r1, r1, #12
 8001d12:	4682      	mov	sl, r0
 8001d14:	4819      	ldr	r0, [pc, #100]	@ (8001d7c <__eqdf2+0x84>)
 8001d16:	468c      	mov	ip, r1
 8001d18:	031f      	lsls	r7, r3, #12
 8001d1a:	0069      	lsls	r1, r5, #1
 8001d1c:	005e      	lsls	r6, r3, #1
 8001d1e:	0d49      	lsrs	r1, r1, #21
 8001d20:	0b3f      	lsrs	r7, r7, #12
 8001d22:	0d76      	lsrs	r6, r6, #21
 8001d24:	4281      	cmp	r1, r0
 8001d26:	d018      	beq.n	8001d5a <__eqdf2+0x62>
 8001d28:	4286      	cmp	r6, r0
 8001d2a:	d00f      	beq.n	8001d4c <__eqdf2+0x54>
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	42b1      	cmp	r1, r6
 8001d30:	d10d      	bne.n	8001d4e <__eqdf2+0x56>
 8001d32:	45bc      	cmp	ip, r7
 8001d34:	d10b      	bne.n	8001d4e <__eqdf2+0x56>
 8001d36:	4294      	cmp	r4, r2
 8001d38:	d109      	bne.n	8001d4e <__eqdf2+0x56>
 8001d3a:	45d3      	cmp	fp, sl
 8001d3c:	d01c      	beq.n	8001d78 <__eqdf2+0x80>
 8001d3e:	2900      	cmp	r1, #0
 8001d40:	d105      	bne.n	8001d4e <__eqdf2+0x56>
 8001d42:	4660      	mov	r0, ip
 8001d44:	4320      	orrs	r0, r4
 8001d46:	1e43      	subs	r3, r0, #1
 8001d48:	4198      	sbcs	r0, r3
 8001d4a:	e000      	b.n	8001d4e <__eqdf2+0x56>
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d50:	46bb      	mov	fp, r7
 8001d52:	46b2      	mov	sl, r6
 8001d54:	46a9      	mov	r9, r5
 8001d56:	46a0      	mov	r8, r4
 8001d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	428e      	cmp	r6, r1
 8001d5e:	d1f6      	bne.n	8001d4e <__eqdf2+0x56>
 8001d60:	4661      	mov	r1, ip
 8001d62:	4339      	orrs	r1, r7
 8001d64:	000f      	movs	r7, r1
 8001d66:	4317      	orrs	r7, r2
 8001d68:	4327      	orrs	r7, r4
 8001d6a:	d1f0      	bne.n	8001d4e <__eqdf2+0x56>
 8001d6c:	465b      	mov	r3, fp
 8001d6e:	4652      	mov	r2, sl
 8001d70:	1a98      	subs	r0, r3, r2
 8001d72:	1e43      	subs	r3, r0, #1
 8001d74:	4198      	sbcs	r0, r3
 8001d76:	e7ea      	b.n	8001d4e <__eqdf2+0x56>
 8001d78:	2000      	movs	r0, #0
 8001d7a:	e7e8      	b.n	8001d4e <__eqdf2+0x56>
 8001d7c:	000007ff 	.word	0x000007ff

08001d80 <__gedf2>:
 8001d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d82:	4657      	mov	r7, sl
 8001d84:	464e      	mov	r6, r9
 8001d86:	4645      	mov	r5, r8
 8001d88:	46de      	mov	lr, fp
 8001d8a:	b5e0      	push	{r5, r6, r7, lr}
 8001d8c:	000d      	movs	r5, r1
 8001d8e:	030f      	lsls	r7, r1, #12
 8001d90:	0b39      	lsrs	r1, r7, #12
 8001d92:	b083      	sub	sp, #12
 8001d94:	0004      	movs	r4, r0
 8001d96:	4680      	mov	r8, r0
 8001d98:	9101      	str	r1, [sp, #4]
 8001d9a:	0058      	lsls	r0, r3, #1
 8001d9c:	0fe9      	lsrs	r1, r5, #31
 8001d9e:	4f31      	ldr	r7, [pc, #196]	@ (8001e64 <__gedf2+0xe4>)
 8001da0:	0d40      	lsrs	r0, r0, #21
 8001da2:	468c      	mov	ip, r1
 8001da4:	006e      	lsls	r6, r5, #1
 8001da6:	0319      	lsls	r1, r3, #12
 8001da8:	4682      	mov	sl, r0
 8001daa:	4691      	mov	r9, r2
 8001dac:	0d76      	lsrs	r6, r6, #21
 8001dae:	0b09      	lsrs	r1, r1, #12
 8001db0:	0fd8      	lsrs	r0, r3, #31
 8001db2:	42be      	cmp	r6, r7
 8001db4:	d01f      	beq.n	8001df6 <__gedf2+0x76>
 8001db6:	45ba      	cmp	sl, r7
 8001db8:	d00f      	beq.n	8001dda <__gedf2+0x5a>
 8001dba:	2e00      	cmp	r6, #0
 8001dbc:	d12f      	bne.n	8001e1e <__gedf2+0x9e>
 8001dbe:	4655      	mov	r5, sl
 8001dc0:	9e01      	ldr	r6, [sp, #4]
 8001dc2:	4334      	orrs	r4, r6
 8001dc4:	2d00      	cmp	r5, #0
 8001dc6:	d127      	bne.n	8001e18 <__gedf2+0x98>
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	d03a      	beq.n	8001e42 <__gedf2+0xc2>
 8001dcc:	2c00      	cmp	r4, #0
 8001dce:	d145      	bne.n	8001e5c <__gedf2+0xdc>
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	d11a      	bne.n	8001e0a <__gedf2+0x8a>
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	4240      	negs	r0, r0
 8001dd8:	e017      	b.n	8001e0a <__gedf2+0x8a>
 8001dda:	4311      	orrs	r1, r2
 8001ddc:	d13b      	bne.n	8001e56 <__gedf2+0xd6>
 8001dde:	2e00      	cmp	r6, #0
 8001de0:	d102      	bne.n	8001de8 <__gedf2+0x68>
 8001de2:	9f01      	ldr	r7, [sp, #4]
 8001de4:	4327      	orrs	r7, r4
 8001de6:	d0f3      	beq.n	8001dd0 <__gedf2+0x50>
 8001de8:	4584      	cmp	ip, r0
 8001dea:	d109      	bne.n	8001e00 <__gedf2+0x80>
 8001dec:	4663      	mov	r3, ip
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <__gedf2+0x54>
 8001df2:	4660      	mov	r0, ip
 8001df4:	e009      	b.n	8001e0a <__gedf2+0x8a>
 8001df6:	9f01      	ldr	r7, [sp, #4]
 8001df8:	4327      	orrs	r7, r4
 8001dfa:	d12c      	bne.n	8001e56 <__gedf2+0xd6>
 8001dfc:	45b2      	cmp	sl, r6
 8001dfe:	d024      	beq.n	8001e4a <__gedf2+0xca>
 8001e00:	4663      	mov	r3, ip
 8001e02:	2002      	movs	r0, #2
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4018      	ands	r0, r3
 8001e08:	3801      	subs	r0, #1
 8001e0a:	b003      	add	sp, #12
 8001e0c:	bcf0      	pop	{r4, r5, r6, r7}
 8001e0e:	46bb      	mov	fp, r7
 8001e10:	46b2      	mov	sl, r6
 8001e12:	46a9      	mov	r9, r5
 8001e14:	46a0      	mov	r8, r4
 8001e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e18:	2c00      	cmp	r4, #0
 8001e1a:	d0d9      	beq.n	8001dd0 <__gedf2+0x50>
 8001e1c:	e7e4      	b.n	8001de8 <__gedf2+0x68>
 8001e1e:	4654      	mov	r4, sl
 8001e20:	2c00      	cmp	r4, #0
 8001e22:	d0ed      	beq.n	8001e00 <__gedf2+0x80>
 8001e24:	4584      	cmp	ip, r0
 8001e26:	d1eb      	bne.n	8001e00 <__gedf2+0x80>
 8001e28:	4556      	cmp	r6, sl
 8001e2a:	dce9      	bgt.n	8001e00 <__gedf2+0x80>
 8001e2c:	dbde      	blt.n	8001dec <__gedf2+0x6c>
 8001e2e:	9b01      	ldr	r3, [sp, #4]
 8001e30:	428b      	cmp	r3, r1
 8001e32:	d8e5      	bhi.n	8001e00 <__gedf2+0x80>
 8001e34:	d1da      	bne.n	8001dec <__gedf2+0x6c>
 8001e36:	45c8      	cmp	r8, r9
 8001e38:	d8e2      	bhi.n	8001e00 <__gedf2+0x80>
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	45c8      	cmp	r8, r9
 8001e3e:	d2e4      	bcs.n	8001e0a <__gedf2+0x8a>
 8001e40:	e7d4      	b.n	8001dec <__gedf2+0x6c>
 8001e42:	2000      	movs	r0, #0
 8001e44:	2c00      	cmp	r4, #0
 8001e46:	d0e0      	beq.n	8001e0a <__gedf2+0x8a>
 8001e48:	e7da      	b.n	8001e00 <__gedf2+0x80>
 8001e4a:	4311      	orrs	r1, r2
 8001e4c:	d103      	bne.n	8001e56 <__gedf2+0xd6>
 8001e4e:	4584      	cmp	ip, r0
 8001e50:	d1d6      	bne.n	8001e00 <__gedf2+0x80>
 8001e52:	2000      	movs	r0, #0
 8001e54:	e7d9      	b.n	8001e0a <__gedf2+0x8a>
 8001e56:	2002      	movs	r0, #2
 8001e58:	4240      	negs	r0, r0
 8001e5a:	e7d6      	b.n	8001e0a <__gedf2+0x8a>
 8001e5c:	4584      	cmp	ip, r0
 8001e5e:	d0e6      	beq.n	8001e2e <__gedf2+0xae>
 8001e60:	e7ce      	b.n	8001e00 <__gedf2+0x80>
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	000007ff 	.word	0x000007ff

08001e68 <__ledf2>:
 8001e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e6a:	4657      	mov	r7, sl
 8001e6c:	464e      	mov	r6, r9
 8001e6e:	4645      	mov	r5, r8
 8001e70:	46de      	mov	lr, fp
 8001e72:	b5e0      	push	{r5, r6, r7, lr}
 8001e74:	000d      	movs	r5, r1
 8001e76:	030f      	lsls	r7, r1, #12
 8001e78:	0004      	movs	r4, r0
 8001e7a:	4680      	mov	r8, r0
 8001e7c:	0fe8      	lsrs	r0, r5, #31
 8001e7e:	0b39      	lsrs	r1, r7, #12
 8001e80:	4684      	mov	ip, r0
 8001e82:	b083      	sub	sp, #12
 8001e84:	0058      	lsls	r0, r3, #1
 8001e86:	4f30      	ldr	r7, [pc, #192]	@ (8001f48 <__ledf2+0xe0>)
 8001e88:	0d40      	lsrs	r0, r0, #21
 8001e8a:	9101      	str	r1, [sp, #4]
 8001e8c:	031e      	lsls	r6, r3, #12
 8001e8e:	0069      	lsls	r1, r5, #1
 8001e90:	4682      	mov	sl, r0
 8001e92:	4691      	mov	r9, r2
 8001e94:	0d49      	lsrs	r1, r1, #21
 8001e96:	0b36      	lsrs	r6, r6, #12
 8001e98:	0fd8      	lsrs	r0, r3, #31
 8001e9a:	42b9      	cmp	r1, r7
 8001e9c:	d020      	beq.n	8001ee0 <__ledf2+0x78>
 8001e9e:	45ba      	cmp	sl, r7
 8001ea0:	d00f      	beq.n	8001ec2 <__ledf2+0x5a>
 8001ea2:	2900      	cmp	r1, #0
 8001ea4:	d12b      	bne.n	8001efe <__ledf2+0x96>
 8001ea6:	9901      	ldr	r1, [sp, #4]
 8001ea8:	430c      	orrs	r4, r1
 8001eaa:	4651      	mov	r1, sl
 8001eac:	2900      	cmp	r1, #0
 8001eae:	d137      	bne.n	8001f20 <__ledf2+0xb8>
 8001eb0:	4332      	orrs	r2, r6
 8001eb2:	d038      	beq.n	8001f26 <__ledf2+0xbe>
 8001eb4:	2c00      	cmp	r4, #0
 8001eb6:	d144      	bne.n	8001f42 <__ledf2+0xda>
 8001eb8:	2800      	cmp	r0, #0
 8001eba:	d119      	bne.n	8001ef0 <__ledf2+0x88>
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	4240      	negs	r0, r0
 8001ec0:	e016      	b.n	8001ef0 <__ledf2+0x88>
 8001ec2:	4316      	orrs	r6, r2
 8001ec4:	d113      	bne.n	8001eee <__ledf2+0x86>
 8001ec6:	2900      	cmp	r1, #0
 8001ec8:	d102      	bne.n	8001ed0 <__ledf2+0x68>
 8001eca:	9f01      	ldr	r7, [sp, #4]
 8001ecc:	4327      	orrs	r7, r4
 8001ece:	d0f3      	beq.n	8001eb8 <__ledf2+0x50>
 8001ed0:	4584      	cmp	ip, r0
 8001ed2:	d020      	beq.n	8001f16 <__ledf2+0xae>
 8001ed4:	4663      	mov	r3, ip
 8001ed6:	2002      	movs	r0, #2
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	4018      	ands	r0, r3
 8001edc:	3801      	subs	r0, #1
 8001ede:	e007      	b.n	8001ef0 <__ledf2+0x88>
 8001ee0:	9f01      	ldr	r7, [sp, #4]
 8001ee2:	4327      	orrs	r7, r4
 8001ee4:	d103      	bne.n	8001eee <__ledf2+0x86>
 8001ee6:	458a      	cmp	sl, r1
 8001ee8:	d1f4      	bne.n	8001ed4 <__ledf2+0x6c>
 8001eea:	4316      	orrs	r6, r2
 8001eec:	d01f      	beq.n	8001f2e <__ledf2+0xc6>
 8001eee:	2002      	movs	r0, #2
 8001ef0:	b003      	add	sp, #12
 8001ef2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ef4:	46bb      	mov	fp, r7
 8001ef6:	46b2      	mov	sl, r6
 8001ef8:	46a9      	mov	r9, r5
 8001efa:	46a0      	mov	r8, r4
 8001efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001efe:	4654      	mov	r4, sl
 8001f00:	2c00      	cmp	r4, #0
 8001f02:	d0e7      	beq.n	8001ed4 <__ledf2+0x6c>
 8001f04:	4584      	cmp	ip, r0
 8001f06:	d1e5      	bne.n	8001ed4 <__ledf2+0x6c>
 8001f08:	4551      	cmp	r1, sl
 8001f0a:	dce3      	bgt.n	8001ed4 <__ledf2+0x6c>
 8001f0c:	db03      	blt.n	8001f16 <__ledf2+0xae>
 8001f0e:	9b01      	ldr	r3, [sp, #4]
 8001f10:	42b3      	cmp	r3, r6
 8001f12:	d8df      	bhi.n	8001ed4 <__ledf2+0x6c>
 8001f14:	d00f      	beq.n	8001f36 <__ledf2+0xce>
 8001f16:	4663      	mov	r3, ip
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0cf      	beq.n	8001ebc <__ledf2+0x54>
 8001f1c:	4660      	mov	r0, ip
 8001f1e:	e7e7      	b.n	8001ef0 <__ledf2+0x88>
 8001f20:	2c00      	cmp	r4, #0
 8001f22:	d0c9      	beq.n	8001eb8 <__ledf2+0x50>
 8001f24:	e7d4      	b.n	8001ed0 <__ledf2+0x68>
 8001f26:	2000      	movs	r0, #0
 8001f28:	2c00      	cmp	r4, #0
 8001f2a:	d0e1      	beq.n	8001ef0 <__ledf2+0x88>
 8001f2c:	e7d2      	b.n	8001ed4 <__ledf2+0x6c>
 8001f2e:	4584      	cmp	ip, r0
 8001f30:	d1d0      	bne.n	8001ed4 <__ledf2+0x6c>
 8001f32:	2000      	movs	r0, #0
 8001f34:	e7dc      	b.n	8001ef0 <__ledf2+0x88>
 8001f36:	45c8      	cmp	r8, r9
 8001f38:	d8cc      	bhi.n	8001ed4 <__ledf2+0x6c>
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	45c8      	cmp	r8, r9
 8001f3e:	d2d7      	bcs.n	8001ef0 <__ledf2+0x88>
 8001f40:	e7e9      	b.n	8001f16 <__ledf2+0xae>
 8001f42:	4584      	cmp	ip, r0
 8001f44:	d0e3      	beq.n	8001f0e <__ledf2+0xa6>
 8001f46:	e7c5      	b.n	8001ed4 <__ledf2+0x6c>
 8001f48:	000007ff 	.word	0x000007ff

08001f4c <__aeabi_dmul>:
 8001f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4e:	4657      	mov	r7, sl
 8001f50:	46de      	mov	lr, fp
 8001f52:	464e      	mov	r6, r9
 8001f54:	4645      	mov	r5, r8
 8001f56:	b5e0      	push	{r5, r6, r7, lr}
 8001f58:	001f      	movs	r7, r3
 8001f5a:	030b      	lsls	r3, r1, #12
 8001f5c:	0b1b      	lsrs	r3, r3, #12
 8001f5e:	0016      	movs	r6, r2
 8001f60:	469a      	mov	sl, r3
 8001f62:	0fca      	lsrs	r2, r1, #31
 8001f64:	004b      	lsls	r3, r1, #1
 8001f66:	0004      	movs	r4, r0
 8001f68:	4693      	mov	fp, r2
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	0d5b      	lsrs	r3, r3, #21
 8001f6e:	d100      	bne.n	8001f72 <__aeabi_dmul+0x26>
 8001f70:	e0d5      	b.n	800211e <__aeabi_dmul+0x1d2>
 8001f72:	4abb      	ldr	r2, [pc, #748]	@ (8002260 <__aeabi_dmul+0x314>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d100      	bne.n	8001f7a <__aeabi_dmul+0x2e>
 8001f78:	e0f8      	b.n	800216c <__aeabi_dmul+0x220>
 8001f7a:	4651      	mov	r1, sl
 8001f7c:	0f42      	lsrs	r2, r0, #29
 8001f7e:	00c9      	lsls	r1, r1, #3
 8001f80:	430a      	orrs	r2, r1
 8001f82:	2180      	movs	r1, #128	@ 0x80
 8001f84:	0409      	lsls	r1, r1, #16
 8001f86:	4311      	orrs	r1, r2
 8001f88:	00c2      	lsls	r2, r0, #3
 8001f8a:	4691      	mov	r9, r2
 8001f8c:	4ab5      	ldr	r2, [pc, #724]	@ (8002264 <__aeabi_dmul+0x318>)
 8001f8e:	468a      	mov	sl, r1
 8001f90:	189d      	adds	r5, r3, r2
 8001f92:	2300      	movs	r3, #0
 8001f94:	4698      	mov	r8, r3
 8001f96:	9302      	str	r3, [sp, #8]
 8001f98:	033c      	lsls	r4, r7, #12
 8001f9a:	007b      	lsls	r3, r7, #1
 8001f9c:	0ffa      	lsrs	r2, r7, #31
 8001f9e:	0030      	movs	r0, r6
 8001fa0:	0b24      	lsrs	r4, r4, #12
 8001fa2:	0d5b      	lsrs	r3, r3, #21
 8001fa4:	9200      	str	r2, [sp, #0]
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x5e>
 8001fa8:	e096      	b.n	80020d8 <__aeabi_dmul+0x18c>
 8001faa:	4aad      	ldr	r2, [pc, #692]	@ (8002260 <__aeabi_dmul+0x314>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d031      	beq.n	8002014 <__aeabi_dmul+0xc8>
 8001fb0:	0f72      	lsrs	r2, r6, #29
 8001fb2:	00e4      	lsls	r4, r4, #3
 8001fb4:	4322      	orrs	r2, r4
 8001fb6:	2480      	movs	r4, #128	@ 0x80
 8001fb8:	0424      	lsls	r4, r4, #16
 8001fba:	4314      	orrs	r4, r2
 8001fbc:	4aa9      	ldr	r2, [pc, #676]	@ (8002264 <__aeabi_dmul+0x318>)
 8001fbe:	00f0      	lsls	r0, r6, #3
 8001fc0:	4694      	mov	ip, r2
 8001fc2:	4463      	add	r3, ip
 8001fc4:	195b      	adds	r3, r3, r5
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	9201      	str	r2, [sp, #4]
 8001fca:	4642      	mov	r2, r8
 8001fcc:	2600      	movs	r6, #0
 8001fce:	2a0a      	cmp	r2, #10
 8001fd0:	dc42      	bgt.n	8002058 <__aeabi_dmul+0x10c>
 8001fd2:	465a      	mov	r2, fp
 8001fd4:	9900      	ldr	r1, [sp, #0]
 8001fd6:	404a      	eors	r2, r1
 8001fd8:	4693      	mov	fp, r2
 8001fda:	4642      	mov	r2, r8
 8001fdc:	2a02      	cmp	r2, #2
 8001fde:	dc32      	bgt.n	8002046 <__aeabi_dmul+0xfa>
 8001fe0:	3a01      	subs	r2, #1
 8001fe2:	2a01      	cmp	r2, #1
 8001fe4:	d900      	bls.n	8001fe8 <__aeabi_dmul+0x9c>
 8001fe6:	e149      	b.n	800227c <__aeabi_dmul+0x330>
 8001fe8:	2e02      	cmp	r6, #2
 8001fea:	d100      	bne.n	8001fee <__aeabi_dmul+0xa2>
 8001fec:	e0ca      	b.n	8002184 <__aeabi_dmul+0x238>
 8001fee:	2e01      	cmp	r6, #1
 8001ff0:	d13d      	bne.n	800206e <__aeabi_dmul+0x122>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2400      	movs	r4, #0
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	0010      	movs	r0, r2
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	051b      	lsls	r3, r3, #20
 8001ffe:	4323      	orrs	r3, r4
 8002000:	07d2      	lsls	r2, r2, #31
 8002002:	4313      	orrs	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	b007      	add	sp, #28
 8002008:	bcf0      	pop	{r4, r5, r6, r7}
 800200a:	46bb      	mov	fp, r7
 800200c:	46b2      	mov	sl, r6
 800200e:	46a9      	mov	r9, r5
 8002010:	46a0      	mov	r8, r4
 8002012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002014:	4b92      	ldr	r3, [pc, #584]	@ (8002260 <__aeabi_dmul+0x314>)
 8002016:	4326      	orrs	r6, r4
 8002018:	18eb      	adds	r3, r5, r3
 800201a:	2e00      	cmp	r6, #0
 800201c:	d100      	bne.n	8002020 <__aeabi_dmul+0xd4>
 800201e:	e0bb      	b.n	8002198 <__aeabi_dmul+0x24c>
 8002020:	2203      	movs	r2, #3
 8002022:	4641      	mov	r1, r8
 8002024:	4311      	orrs	r1, r2
 8002026:	465a      	mov	r2, fp
 8002028:	4688      	mov	r8, r1
 800202a:	9900      	ldr	r1, [sp, #0]
 800202c:	404a      	eors	r2, r1
 800202e:	2180      	movs	r1, #128	@ 0x80
 8002030:	0109      	lsls	r1, r1, #4
 8002032:	468c      	mov	ip, r1
 8002034:	0029      	movs	r1, r5
 8002036:	4461      	add	r1, ip
 8002038:	9101      	str	r1, [sp, #4]
 800203a:	4641      	mov	r1, r8
 800203c:	290a      	cmp	r1, #10
 800203e:	dd00      	ble.n	8002042 <__aeabi_dmul+0xf6>
 8002040:	e233      	b.n	80024aa <__aeabi_dmul+0x55e>
 8002042:	4693      	mov	fp, r2
 8002044:	2603      	movs	r6, #3
 8002046:	4642      	mov	r2, r8
 8002048:	2701      	movs	r7, #1
 800204a:	4097      	lsls	r7, r2
 800204c:	21a6      	movs	r1, #166	@ 0xa6
 800204e:	003a      	movs	r2, r7
 8002050:	00c9      	lsls	r1, r1, #3
 8002052:	400a      	ands	r2, r1
 8002054:	420f      	tst	r7, r1
 8002056:	d031      	beq.n	80020bc <__aeabi_dmul+0x170>
 8002058:	9e02      	ldr	r6, [sp, #8]
 800205a:	2e02      	cmp	r6, #2
 800205c:	d100      	bne.n	8002060 <__aeabi_dmul+0x114>
 800205e:	e235      	b.n	80024cc <__aeabi_dmul+0x580>
 8002060:	2e03      	cmp	r6, #3
 8002062:	d100      	bne.n	8002066 <__aeabi_dmul+0x11a>
 8002064:	e1d2      	b.n	800240c <__aeabi_dmul+0x4c0>
 8002066:	4654      	mov	r4, sl
 8002068:	4648      	mov	r0, r9
 800206a:	2e01      	cmp	r6, #1
 800206c:	d0c1      	beq.n	8001ff2 <__aeabi_dmul+0xa6>
 800206e:	9a01      	ldr	r2, [sp, #4]
 8002070:	4b7d      	ldr	r3, [pc, #500]	@ (8002268 <__aeabi_dmul+0x31c>)
 8002072:	4694      	mov	ip, r2
 8002074:	4463      	add	r3, ip
 8002076:	2b00      	cmp	r3, #0
 8002078:	dc00      	bgt.n	800207c <__aeabi_dmul+0x130>
 800207a:	e0c0      	b.n	80021fe <__aeabi_dmul+0x2b2>
 800207c:	0742      	lsls	r2, r0, #29
 800207e:	d009      	beq.n	8002094 <__aeabi_dmul+0x148>
 8002080:	220f      	movs	r2, #15
 8002082:	4002      	ands	r2, r0
 8002084:	2a04      	cmp	r2, #4
 8002086:	d005      	beq.n	8002094 <__aeabi_dmul+0x148>
 8002088:	1d02      	adds	r2, r0, #4
 800208a:	4282      	cmp	r2, r0
 800208c:	4180      	sbcs	r0, r0
 800208e:	4240      	negs	r0, r0
 8002090:	1824      	adds	r4, r4, r0
 8002092:	0010      	movs	r0, r2
 8002094:	01e2      	lsls	r2, r4, #7
 8002096:	d506      	bpl.n	80020a6 <__aeabi_dmul+0x15a>
 8002098:	4b74      	ldr	r3, [pc, #464]	@ (800226c <__aeabi_dmul+0x320>)
 800209a:	9a01      	ldr	r2, [sp, #4]
 800209c:	401c      	ands	r4, r3
 800209e:	2380      	movs	r3, #128	@ 0x80
 80020a0:	4694      	mov	ip, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4463      	add	r3, ip
 80020a6:	4a72      	ldr	r2, [pc, #456]	@ (8002270 <__aeabi_dmul+0x324>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	dc6b      	bgt.n	8002184 <__aeabi_dmul+0x238>
 80020ac:	0762      	lsls	r2, r4, #29
 80020ae:	08c0      	lsrs	r0, r0, #3
 80020b0:	0264      	lsls	r4, r4, #9
 80020b2:	055b      	lsls	r3, r3, #21
 80020b4:	4302      	orrs	r2, r0
 80020b6:	0b24      	lsrs	r4, r4, #12
 80020b8:	0d5b      	lsrs	r3, r3, #21
 80020ba:	e79d      	b.n	8001ff8 <__aeabi_dmul+0xac>
 80020bc:	2190      	movs	r1, #144	@ 0x90
 80020be:	0089      	lsls	r1, r1, #2
 80020c0:	420f      	tst	r7, r1
 80020c2:	d163      	bne.n	800218c <__aeabi_dmul+0x240>
 80020c4:	2288      	movs	r2, #136	@ 0x88
 80020c6:	423a      	tst	r2, r7
 80020c8:	d100      	bne.n	80020cc <__aeabi_dmul+0x180>
 80020ca:	e0d7      	b.n	800227c <__aeabi_dmul+0x330>
 80020cc:	9b00      	ldr	r3, [sp, #0]
 80020ce:	46a2      	mov	sl, r4
 80020d0:	469b      	mov	fp, r3
 80020d2:	4681      	mov	r9, r0
 80020d4:	9602      	str	r6, [sp, #8]
 80020d6:	e7bf      	b.n	8002058 <__aeabi_dmul+0x10c>
 80020d8:	0023      	movs	r3, r4
 80020da:	4333      	orrs	r3, r6
 80020dc:	d100      	bne.n	80020e0 <__aeabi_dmul+0x194>
 80020de:	e07f      	b.n	80021e0 <__aeabi_dmul+0x294>
 80020e0:	2c00      	cmp	r4, #0
 80020e2:	d100      	bne.n	80020e6 <__aeabi_dmul+0x19a>
 80020e4:	e1ad      	b.n	8002442 <__aeabi_dmul+0x4f6>
 80020e6:	0020      	movs	r0, r4
 80020e8:	f000 ff10 	bl	8002f0c <__clzsi2>
 80020ec:	0002      	movs	r2, r0
 80020ee:	0003      	movs	r3, r0
 80020f0:	3a0b      	subs	r2, #11
 80020f2:	201d      	movs	r0, #29
 80020f4:	0019      	movs	r1, r3
 80020f6:	1a82      	subs	r2, r0, r2
 80020f8:	0030      	movs	r0, r6
 80020fa:	3908      	subs	r1, #8
 80020fc:	40d0      	lsrs	r0, r2
 80020fe:	408c      	lsls	r4, r1
 8002100:	4304      	orrs	r4, r0
 8002102:	0030      	movs	r0, r6
 8002104:	4088      	lsls	r0, r1
 8002106:	4a5b      	ldr	r2, [pc, #364]	@ (8002274 <__aeabi_dmul+0x328>)
 8002108:	1aeb      	subs	r3, r5, r3
 800210a:	4694      	mov	ip, r2
 800210c:	4463      	add	r3, ip
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	9201      	str	r2, [sp, #4]
 8002112:	4642      	mov	r2, r8
 8002114:	2600      	movs	r6, #0
 8002116:	2a0a      	cmp	r2, #10
 8002118:	dc00      	bgt.n	800211c <__aeabi_dmul+0x1d0>
 800211a:	e75a      	b.n	8001fd2 <__aeabi_dmul+0x86>
 800211c:	e79c      	b.n	8002058 <__aeabi_dmul+0x10c>
 800211e:	4653      	mov	r3, sl
 8002120:	4303      	orrs	r3, r0
 8002122:	4699      	mov	r9, r3
 8002124:	d054      	beq.n	80021d0 <__aeabi_dmul+0x284>
 8002126:	4653      	mov	r3, sl
 8002128:	2b00      	cmp	r3, #0
 800212a:	d100      	bne.n	800212e <__aeabi_dmul+0x1e2>
 800212c:	e177      	b.n	800241e <__aeabi_dmul+0x4d2>
 800212e:	4650      	mov	r0, sl
 8002130:	f000 feec 	bl	8002f0c <__clzsi2>
 8002134:	230b      	movs	r3, #11
 8002136:	425b      	negs	r3, r3
 8002138:	469c      	mov	ip, r3
 800213a:	0002      	movs	r2, r0
 800213c:	4484      	add	ip, r0
 800213e:	0011      	movs	r1, r2
 8002140:	4650      	mov	r0, sl
 8002142:	3908      	subs	r1, #8
 8002144:	4088      	lsls	r0, r1
 8002146:	231d      	movs	r3, #29
 8002148:	4680      	mov	r8, r0
 800214a:	4660      	mov	r0, ip
 800214c:	1a1b      	subs	r3, r3, r0
 800214e:	0020      	movs	r0, r4
 8002150:	40d8      	lsrs	r0, r3
 8002152:	0003      	movs	r3, r0
 8002154:	4640      	mov	r0, r8
 8002156:	4303      	orrs	r3, r0
 8002158:	469a      	mov	sl, r3
 800215a:	0023      	movs	r3, r4
 800215c:	408b      	lsls	r3, r1
 800215e:	4699      	mov	r9, r3
 8002160:	2300      	movs	r3, #0
 8002162:	4d44      	ldr	r5, [pc, #272]	@ (8002274 <__aeabi_dmul+0x328>)
 8002164:	4698      	mov	r8, r3
 8002166:	1aad      	subs	r5, r5, r2
 8002168:	9302      	str	r3, [sp, #8]
 800216a:	e715      	b.n	8001f98 <__aeabi_dmul+0x4c>
 800216c:	4652      	mov	r2, sl
 800216e:	4302      	orrs	r2, r0
 8002170:	4691      	mov	r9, r2
 8002172:	d126      	bne.n	80021c2 <__aeabi_dmul+0x276>
 8002174:	2200      	movs	r2, #0
 8002176:	001d      	movs	r5, r3
 8002178:	2302      	movs	r3, #2
 800217a:	4692      	mov	sl, r2
 800217c:	3208      	adds	r2, #8
 800217e:	4690      	mov	r8, r2
 8002180:	9302      	str	r3, [sp, #8]
 8002182:	e709      	b.n	8001f98 <__aeabi_dmul+0x4c>
 8002184:	2400      	movs	r4, #0
 8002186:	2200      	movs	r2, #0
 8002188:	4b35      	ldr	r3, [pc, #212]	@ (8002260 <__aeabi_dmul+0x314>)
 800218a:	e735      	b.n	8001ff8 <__aeabi_dmul+0xac>
 800218c:	2300      	movs	r3, #0
 800218e:	2480      	movs	r4, #128	@ 0x80
 8002190:	469b      	mov	fp, r3
 8002192:	0324      	lsls	r4, r4, #12
 8002194:	4b32      	ldr	r3, [pc, #200]	@ (8002260 <__aeabi_dmul+0x314>)
 8002196:	e72f      	b.n	8001ff8 <__aeabi_dmul+0xac>
 8002198:	2202      	movs	r2, #2
 800219a:	4641      	mov	r1, r8
 800219c:	4311      	orrs	r1, r2
 800219e:	2280      	movs	r2, #128	@ 0x80
 80021a0:	0112      	lsls	r2, r2, #4
 80021a2:	4694      	mov	ip, r2
 80021a4:	002a      	movs	r2, r5
 80021a6:	4462      	add	r2, ip
 80021a8:	4688      	mov	r8, r1
 80021aa:	9201      	str	r2, [sp, #4]
 80021ac:	290a      	cmp	r1, #10
 80021ae:	dd00      	ble.n	80021b2 <__aeabi_dmul+0x266>
 80021b0:	e752      	b.n	8002058 <__aeabi_dmul+0x10c>
 80021b2:	465a      	mov	r2, fp
 80021b4:	2000      	movs	r0, #0
 80021b6:	9900      	ldr	r1, [sp, #0]
 80021b8:	0004      	movs	r4, r0
 80021ba:	404a      	eors	r2, r1
 80021bc:	4693      	mov	fp, r2
 80021be:	2602      	movs	r6, #2
 80021c0:	e70b      	b.n	8001fda <__aeabi_dmul+0x8e>
 80021c2:	220c      	movs	r2, #12
 80021c4:	001d      	movs	r5, r3
 80021c6:	2303      	movs	r3, #3
 80021c8:	4681      	mov	r9, r0
 80021ca:	4690      	mov	r8, r2
 80021cc:	9302      	str	r3, [sp, #8]
 80021ce:	e6e3      	b.n	8001f98 <__aeabi_dmul+0x4c>
 80021d0:	2300      	movs	r3, #0
 80021d2:	469a      	mov	sl, r3
 80021d4:	3304      	adds	r3, #4
 80021d6:	4698      	mov	r8, r3
 80021d8:	3b03      	subs	r3, #3
 80021da:	2500      	movs	r5, #0
 80021dc:	9302      	str	r3, [sp, #8]
 80021de:	e6db      	b.n	8001f98 <__aeabi_dmul+0x4c>
 80021e0:	4642      	mov	r2, r8
 80021e2:	3301      	adds	r3, #1
 80021e4:	431a      	orrs	r2, r3
 80021e6:	002b      	movs	r3, r5
 80021e8:	4690      	mov	r8, r2
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	9201      	str	r2, [sp, #4]
 80021ee:	4642      	mov	r2, r8
 80021f0:	2400      	movs	r4, #0
 80021f2:	2000      	movs	r0, #0
 80021f4:	2601      	movs	r6, #1
 80021f6:	2a0a      	cmp	r2, #10
 80021f8:	dc00      	bgt.n	80021fc <__aeabi_dmul+0x2b0>
 80021fa:	e6ea      	b.n	8001fd2 <__aeabi_dmul+0x86>
 80021fc:	e72c      	b.n	8002058 <__aeabi_dmul+0x10c>
 80021fe:	2201      	movs	r2, #1
 8002200:	1ad2      	subs	r2, r2, r3
 8002202:	2a38      	cmp	r2, #56	@ 0x38
 8002204:	dd00      	ble.n	8002208 <__aeabi_dmul+0x2bc>
 8002206:	e6f4      	b.n	8001ff2 <__aeabi_dmul+0xa6>
 8002208:	2a1f      	cmp	r2, #31
 800220a:	dc00      	bgt.n	800220e <__aeabi_dmul+0x2c2>
 800220c:	e12a      	b.n	8002464 <__aeabi_dmul+0x518>
 800220e:	211f      	movs	r1, #31
 8002210:	4249      	negs	r1, r1
 8002212:	1acb      	subs	r3, r1, r3
 8002214:	0021      	movs	r1, r4
 8002216:	40d9      	lsrs	r1, r3
 8002218:	000b      	movs	r3, r1
 800221a:	2a20      	cmp	r2, #32
 800221c:	d005      	beq.n	800222a <__aeabi_dmul+0x2de>
 800221e:	4a16      	ldr	r2, [pc, #88]	@ (8002278 <__aeabi_dmul+0x32c>)
 8002220:	9d01      	ldr	r5, [sp, #4]
 8002222:	4694      	mov	ip, r2
 8002224:	4465      	add	r5, ip
 8002226:	40ac      	lsls	r4, r5
 8002228:	4320      	orrs	r0, r4
 800222a:	1e42      	subs	r2, r0, #1
 800222c:	4190      	sbcs	r0, r2
 800222e:	4318      	orrs	r0, r3
 8002230:	2307      	movs	r3, #7
 8002232:	0019      	movs	r1, r3
 8002234:	2400      	movs	r4, #0
 8002236:	4001      	ands	r1, r0
 8002238:	4203      	tst	r3, r0
 800223a:	d00c      	beq.n	8002256 <__aeabi_dmul+0x30a>
 800223c:	230f      	movs	r3, #15
 800223e:	4003      	ands	r3, r0
 8002240:	2b04      	cmp	r3, #4
 8002242:	d100      	bne.n	8002246 <__aeabi_dmul+0x2fa>
 8002244:	e140      	b.n	80024c8 <__aeabi_dmul+0x57c>
 8002246:	1d03      	adds	r3, r0, #4
 8002248:	4283      	cmp	r3, r0
 800224a:	41a4      	sbcs	r4, r4
 800224c:	0018      	movs	r0, r3
 800224e:	4264      	negs	r4, r4
 8002250:	0761      	lsls	r1, r4, #29
 8002252:	0264      	lsls	r4, r4, #9
 8002254:	0b24      	lsrs	r4, r4, #12
 8002256:	08c2      	lsrs	r2, r0, #3
 8002258:	2300      	movs	r3, #0
 800225a:	430a      	orrs	r2, r1
 800225c:	e6cc      	b.n	8001ff8 <__aeabi_dmul+0xac>
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	000007ff 	.word	0x000007ff
 8002264:	fffffc01 	.word	0xfffffc01
 8002268:	000003ff 	.word	0x000003ff
 800226c:	feffffff 	.word	0xfeffffff
 8002270:	000007fe 	.word	0x000007fe
 8002274:	fffffc0d 	.word	0xfffffc0d
 8002278:	0000043e 	.word	0x0000043e
 800227c:	4649      	mov	r1, r9
 800227e:	464a      	mov	r2, r9
 8002280:	0409      	lsls	r1, r1, #16
 8002282:	0c09      	lsrs	r1, r1, #16
 8002284:	000d      	movs	r5, r1
 8002286:	0c16      	lsrs	r6, r2, #16
 8002288:	0c02      	lsrs	r2, r0, #16
 800228a:	0400      	lsls	r0, r0, #16
 800228c:	0c00      	lsrs	r0, r0, #16
 800228e:	4345      	muls	r5, r0
 8002290:	46ac      	mov	ip, r5
 8002292:	0005      	movs	r5, r0
 8002294:	4375      	muls	r5, r6
 8002296:	46a8      	mov	r8, r5
 8002298:	0015      	movs	r5, r2
 800229a:	000f      	movs	r7, r1
 800229c:	4375      	muls	r5, r6
 800229e:	9200      	str	r2, [sp, #0]
 80022a0:	9502      	str	r5, [sp, #8]
 80022a2:	002a      	movs	r2, r5
 80022a4:	9d00      	ldr	r5, [sp, #0]
 80022a6:	436f      	muls	r7, r5
 80022a8:	4665      	mov	r5, ip
 80022aa:	0c2d      	lsrs	r5, r5, #16
 80022ac:	46a9      	mov	r9, r5
 80022ae:	4447      	add	r7, r8
 80022b0:	444f      	add	r7, r9
 80022b2:	45b8      	cmp	r8, r7
 80022b4:	d905      	bls.n	80022c2 <__aeabi_dmul+0x376>
 80022b6:	0015      	movs	r5, r2
 80022b8:	2280      	movs	r2, #128	@ 0x80
 80022ba:	0252      	lsls	r2, r2, #9
 80022bc:	4690      	mov	r8, r2
 80022be:	4445      	add	r5, r8
 80022c0:	9502      	str	r5, [sp, #8]
 80022c2:	0c3d      	lsrs	r5, r7, #16
 80022c4:	9503      	str	r5, [sp, #12]
 80022c6:	4665      	mov	r5, ip
 80022c8:	042d      	lsls	r5, r5, #16
 80022ca:	043f      	lsls	r7, r7, #16
 80022cc:	0c2d      	lsrs	r5, r5, #16
 80022ce:	46ac      	mov	ip, r5
 80022d0:	003d      	movs	r5, r7
 80022d2:	4465      	add	r5, ip
 80022d4:	9504      	str	r5, [sp, #16]
 80022d6:	0c25      	lsrs	r5, r4, #16
 80022d8:	0424      	lsls	r4, r4, #16
 80022da:	0c24      	lsrs	r4, r4, #16
 80022dc:	46ac      	mov	ip, r5
 80022de:	0025      	movs	r5, r4
 80022e0:	4375      	muls	r5, r6
 80022e2:	46a8      	mov	r8, r5
 80022e4:	4665      	mov	r5, ip
 80022e6:	000f      	movs	r7, r1
 80022e8:	4369      	muls	r1, r5
 80022ea:	4441      	add	r1, r8
 80022ec:	4689      	mov	r9, r1
 80022ee:	4367      	muls	r7, r4
 80022f0:	0c39      	lsrs	r1, r7, #16
 80022f2:	4449      	add	r1, r9
 80022f4:	436e      	muls	r6, r5
 80022f6:	4588      	cmp	r8, r1
 80022f8:	d903      	bls.n	8002302 <__aeabi_dmul+0x3b6>
 80022fa:	2280      	movs	r2, #128	@ 0x80
 80022fc:	0252      	lsls	r2, r2, #9
 80022fe:	4690      	mov	r8, r2
 8002300:	4446      	add	r6, r8
 8002302:	0c0d      	lsrs	r5, r1, #16
 8002304:	46a8      	mov	r8, r5
 8002306:	0035      	movs	r5, r6
 8002308:	4445      	add	r5, r8
 800230a:	9505      	str	r5, [sp, #20]
 800230c:	9d03      	ldr	r5, [sp, #12]
 800230e:	043f      	lsls	r7, r7, #16
 8002310:	46a8      	mov	r8, r5
 8002312:	0c3f      	lsrs	r7, r7, #16
 8002314:	0409      	lsls	r1, r1, #16
 8002316:	19c9      	adds	r1, r1, r7
 8002318:	4488      	add	r8, r1
 800231a:	4645      	mov	r5, r8
 800231c:	9503      	str	r5, [sp, #12]
 800231e:	4655      	mov	r5, sl
 8002320:	042e      	lsls	r6, r5, #16
 8002322:	0c36      	lsrs	r6, r6, #16
 8002324:	0c2f      	lsrs	r7, r5, #16
 8002326:	0035      	movs	r5, r6
 8002328:	4345      	muls	r5, r0
 800232a:	4378      	muls	r0, r7
 800232c:	4681      	mov	r9, r0
 800232e:	0038      	movs	r0, r7
 8002330:	46a8      	mov	r8, r5
 8002332:	0c2d      	lsrs	r5, r5, #16
 8002334:	46aa      	mov	sl, r5
 8002336:	9a00      	ldr	r2, [sp, #0]
 8002338:	4350      	muls	r0, r2
 800233a:	4372      	muls	r2, r6
 800233c:	444a      	add	r2, r9
 800233e:	4452      	add	r2, sl
 8002340:	4591      	cmp	r9, r2
 8002342:	d903      	bls.n	800234c <__aeabi_dmul+0x400>
 8002344:	2580      	movs	r5, #128	@ 0x80
 8002346:	026d      	lsls	r5, r5, #9
 8002348:	46a9      	mov	r9, r5
 800234a:	4448      	add	r0, r9
 800234c:	0c15      	lsrs	r5, r2, #16
 800234e:	46a9      	mov	r9, r5
 8002350:	4645      	mov	r5, r8
 8002352:	042d      	lsls	r5, r5, #16
 8002354:	0c2d      	lsrs	r5, r5, #16
 8002356:	46a8      	mov	r8, r5
 8002358:	4665      	mov	r5, ip
 800235a:	437d      	muls	r5, r7
 800235c:	0412      	lsls	r2, r2, #16
 800235e:	4448      	add	r0, r9
 8002360:	4490      	add	r8, r2
 8002362:	46a9      	mov	r9, r5
 8002364:	0032      	movs	r2, r6
 8002366:	4665      	mov	r5, ip
 8002368:	4362      	muls	r2, r4
 800236a:	436e      	muls	r6, r5
 800236c:	437c      	muls	r4, r7
 800236e:	0c17      	lsrs	r7, r2, #16
 8002370:	1936      	adds	r6, r6, r4
 8002372:	19bf      	adds	r7, r7, r6
 8002374:	42bc      	cmp	r4, r7
 8002376:	d903      	bls.n	8002380 <__aeabi_dmul+0x434>
 8002378:	2480      	movs	r4, #128	@ 0x80
 800237a:	0264      	lsls	r4, r4, #9
 800237c:	46a4      	mov	ip, r4
 800237e:	44e1      	add	r9, ip
 8002380:	9c02      	ldr	r4, [sp, #8]
 8002382:	9e03      	ldr	r6, [sp, #12]
 8002384:	46a4      	mov	ip, r4
 8002386:	9d05      	ldr	r5, [sp, #20]
 8002388:	4466      	add	r6, ip
 800238a:	428e      	cmp	r6, r1
 800238c:	4189      	sbcs	r1, r1
 800238e:	46ac      	mov	ip, r5
 8002390:	0412      	lsls	r2, r2, #16
 8002392:	043c      	lsls	r4, r7, #16
 8002394:	0c12      	lsrs	r2, r2, #16
 8002396:	18a2      	adds	r2, r4, r2
 8002398:	4462      	add	r2, ip
 800239a:	4249      	negs	r1, r1
 800239c:	1854      	adds	r4, r2, r1
 800239e:	4446      	add	r6, r8
 80023a0:	46a4      	mov	ip, r4
 80023a2:	4546      	cmp	r6, r8
 80023a4:	41a4      	sbcs	r4, r4
 80023a6:	4682      	mov	sl, r0
 80023a8:	4264      	negs	r4, r4
 80023aa:	46a0      	mov	r8, r4
 80023ac:	42aa      	cmp	r2, r5
 80023ae:	4192      	sbcs	r2, r2
 80023b0:	458c      	cmp	ip, r1
 80023b2:	4189      	sbcs	r1, r1
 80023b4:	44e2      	add	sl, ip
 80023b6:	44d0      	add	r8, sl
 80023b8:	4249      	negs	r1, r1
 80023ba:	4252      	negs	r2, r2
 80023bc:	430a      	orrs	r2, r1
 80023be:	45a0      	cmp	r8, r4
 80023c0:	41a4      	sbcs	r4, r4
 80023c2:	4582      	cmp	sl, r0
 80023c4:	4189      	sbcs	r1, r1
 80023c6:	4264      	negs	r4, r4
 80023c8:	4249      	negs	r1, r1
 80023ca:	430c      	orrs	r4, r1
 80023cc:	4641      	mov	r1, r8
 80023ce:	0c3f      	lsrs	r7, r7, #16
 80023d0:	19d2      	adds	r2, r2, r7
 80023d2:	1912      	adds	r2, r2, r4
 80023d4:	0dcc      	lsrs	r4, r1, #23
 80023d6:	9904      	ldr	r1, [sp, #16]
 80023d8:	0270      	lsls	r0, r6, #9
 80023da:	4308      	orrs	r0, r1
 80023dc:	1e41      	subs	r1, r0, #1
 80023de:	4188      	sbcs	r0, r1
 80023e0:	4641      	mov	r1, r8
 80023e2:	444a      	add	r2, r9
 80023e4:	0df6      	lsrs	r6, r6, #23
 80023e6:	0252      	lsls	r2, r2, #9
 80023e8:	4330      	orrs	r0, r6
 80023ea:	0249      	lsls	r1, r1, #9
 80023ec:	4314      	orrs	r4, r2
 80023ee:	4308      	orrs	r0, r1
 80023f0:	01d2      	lsls	r2, r2, #7
 80023f2:	d535      	bpl.n	8002460 <__aeabi_dmul+0x514>
 80023f4:	2201      	movs	r2, #1
 80023f6:	0843      	lsrs	r3, r0, #1
 80023f8:	4002      	ands	r2, r0
 80023fa:	4313      	orrs	r3, r2
 80023fc:	07e0      	lsls	r0, r4, #31
 80023fe:	4318      	orrs	r0, r3
 8002400:	0864      	lsrs	r4, r4, #1
 8002402:	e634      	b.n	800206e <__aeabi_dmul+0x122>
 8002404:	9b00      	ldr	r3, [sp, #0]
 8002406:	46a2      	mov	sl, r4
 8002408:	469b      	mov	fp, r3
 800240a:	4681      	mov	r9, r0
 800240c:	2480      	movs	r4, #128	@ 0x80
 800240e:	4653      	mov	r3, sl
 8002410:	0324      	lsls	r4, r4, #12
 8002412:	431c      	orrs	r4, r3
 8002414:	0324      	lsls	r4, r4, #12
 8002416:	464a      	mov	r2, r9
 8002418:	4b2e      	ldr	r3, [pc, #184]	@ (80024d4 <__aeabi_dmul+0x588>)
 800241a:	0b24      	lsrs	r4, r4, #12
 800241c:	e5ec      	b.n	8001ff8 <__aeabi_dmul+0xac>
 800241e:	f000 fd75 	bl	8002f0c <__clzsi2>
 8002422:	2315      	movs	r3, #21
 8002424:	469c      	mov	ip, r3
 8002426:	4484      	add	ip, r0
 8002428:	0002      	movs	r2, r0
 800242a:	4663      	mov	r3, ip
 800242c:	3220      	adds	r2, #32
 800242e:	2b1c      	cmp	r3, #28
 8002430:	dc00      	bgt.n	8002434 <__aeabi_dmul+0x4e8>
 8002432:	e684      	b.n	800213e <__aeabi_dmul+0x1f2>
 8002434:	2300      	movs	r3, #0
 8002436:	4699      	mov	r9, r3
 8002438:	0023      	movs	r3, r4
 800243a:	3808      	subs	r0, #8
 800243c:	4083      	lsls	r3, r0
 800243e:	469a      	mov	sl, r3
 8002440:	e68e      	b.n	8002160 <__aeabi_dmul+0x214>
 8002442:	f000 fd63 	bl	8002f0c <__clzsi2>
 8002446:	0002      	movs	r2, r0
 8002448:	0003      	movs	r3, r0
 800244a:	3215      	adds	r2, #21
 800244c:	3320      	adds	r3, #32
 800244e:	2a1c      	cmp	r2, #28
 8002450:	dc00      	bgt.n	8002454 <__aeabi_dmul+0x508>
 8002452:	e64e      	b.n	80020f2 <__aeabi_dmul+0x1a6>
 8002454:	0002      	movs	r2, r0
 8002456:	0034      	movs	r4, r6
 8002458:	3a08      	subs	r2, #8
 800245a:	2000      	movs	r0, #0
 800245c:	4094      	lsls	r4, r2
 800245e:	e652      	b.n	8002106 <__aeabi_dmul+0x1ba>
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	e604      	b.n	800206e <__aeabi_dmul+0x122>
 8002464:	4b1c      	ldr	r3, [pc, #112]	@ (80024d8 <__aeabi_dmul+0x58c>)
 8002466:	0021      	movs	r1, r4
 8002468:	469c      	mov	ip, r3
 800246a:	0003      	movs	r3, r0
 800246c:	9d01      	ldr	r5, [sp, #4]
 800246e:	40d3      	lsrs	r3, r2
 8002470:	4465      	add	r5, ip
 8002472:	40a9      	lsls	r1, r5
 8002474:	4319      	orrs	r1, r3
 8002476:	0003      	movs	r3, r0
 8002478:	40ab      	lsls	r3, r5
 800247a:	1e58      	subs	r0, r3, #1
 800247c:	4183      	sbcs	r3, r0
 800247e:	4319      	orrs	r1, r3
 8002480:	0008      	movs	r0, r1
 8002482:	40d4      	lsrs	r4, r2
 8002484:	074b      	lsls	r3, r1, #29
 8002486:	d009      	beq.n	800249c <__aeabi_dmul+0x550>
 8002488:	230f      	movs	r3, #15
 800248a:	400b      	ands	r3, r1
 800248c:	2b04      	cmp	r3, #4
 800248e:	d005      	beq.n	800249c <__aeabi_dmul+0x550>
 8002490:	1d0b      	adds	r3, r1, #4
 8002492:	428b      	cmp	r3, r1
 8002494:	4180      	sbcs	r0, r0
 8002496:	4240      	negs	r0, r0
 8002498:	1824      	adds	r4, r4, r0
 800249a:	0018      	movs	r0, r3
 800249c:	0223      	lsls	r3, r4, #8
 800249e:	d400      	bmi.n	80024a2 <__aeabi_dmul+0x556>
 80024a0:	e6d6      	b.n	8002250 <__aeabi_dmul+0x304>
 80024a2:	2301      	movs	r3, #1
 80024a4:	2400      	movs	r4, #0
 80024a6:	2200      	movs	r2, #0
 80024a8:	e5a6      	b.n	8001ff8 <__aeabi_dmul+0xac>
 80024aa:	290f      	cmp	r1, #15
 80024ac:	d1aa      	bne.n	8002404 <__aeabi_dmul+0x4b8>
 80024ae:	2380      	movs	r3, #128	@ 0x80
 80024b0:	4652      	mov	r2, sl
 80024b2:	031b      	lsls	r3, r3, #12
 80024b4:	421a      	tst	r2, r3
 80024b6:	d0a9      	beq.n	800240c <__aeabi_dmul+0x4c0>
 80024b8:	421c      	tst	r4, r3
 80024ba:	d1a7      	bne.n	800240c <__aeabi_dmul+0x4c0>
 80024bc:	431c      	orrs	r4, r3
 80024be:	9b00      	ldr	r3, [sp, #0]
 80024c0:	0002      	movs	r2, r0
 80024c2:	469b      	mov	fp, r3
 80024c4:	4b03      	ldr	r3, [pc, #12]	@ (80024d4 <__aeabi_dmul+0x588>)
 80024c6:	e597      	b.n	8001ff8 <__aeabi_dmul+0xac>
 80024c8:	2400      	movs	r4, #0
 80024ca:	e6c1      	b.n	8002250 <__aeabi_dmul+0x304>
 80024cc:	2400      	movs	r4, #0
 80024ce:	4b01      	ldr	r3, [pc, #4]	@ (80024d4 <__aeabi_dmul+0x588>)
 80024d0:	0022      	movs	r2, r4
 80024d2:	e591      	b.n	8001ff8 <__aeabi_dmul+0xac>
 80024d4:	000007ff 	.word	0x000007ff
 80024d8:	0000041e 	.word	0x0000041e

080024dc <__aeabi_dsub>:
 80024dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024de:	464e      	mov	r6, r9
 80024e0:	4645      	mov	r5, r8
 80024e2:	46de      	mov	lr, fp
 80024e4:	4657      	mov	r7, sl
 80024e6:	b5e0      	push	{r5, r6, r7, lr}
 80024e8:	b085      	sub	sp, #20
 80024ea:	9000      	str	r0, [sp, #0]
 80024ec:	9101      	str	r1, [sp, #4]
 80024ee:	030c      	lsls	r4, r1, #12
 80024f0:	004f      	lsls	r7, r1, #1
 80024f2:	0fce      	lsrs	r6, r1, #31
 80024f4:	0a61      	lsrs	r1, r4, #9
 80024f6:	9c00      	ldr	r4, [sp, #0]
 80024f8:	46b0      	mov	r8, r6
 80024fa:	0f64      	lsrs	r4, r4, #29
 80024fc:	430c      	orrs	r4, r1
 80024fe:	9900      	ldr	r1, [sp, #0]
 8002500:	0d7f      	lsrs	r7, r7, #21
 8002502:	00c8      	lsls	r0, r1, #3
 8002504:	0011      	movs	r1, r2
 8002506:	001a      	movs	r2, r3
 8002508:	031b      	lsls	r3, r3, #12
 800250a:	469c      	mov	ip, r3
 800250c:	9100      	str	r1, [sp, #0]
 800250e:	9201      	str	r2, [sp, #4]
 8002510:	0051      	lsls	r1, r2, #1
 8002512:	0d4b      	lsrs	r3, r1, #21
 8002514:	4699      	mov	r9, r3
 8002516:	9b01      	ldr	r3, [sp, #4]
 8002518:	9d00      	ldr	r5, [sp, #0]
 800251a:	0fd9      	lsrs	r1, r3, #31
 800251c:	4663      	mov	r3, ip
 800251e:	0f6a      	lsrs	r2, r5, #29
 8002520:	0a5b      	lsrs	r3, r3, #9
 8002522:	4313      	orrs	r3, r2
 8002524:	00ea      	lsls	r2, r5, #3
 8002526:	4694      	mov	ip, r2
 8002528:	4693      	mov	fp, r2
 800252a:	4ac1      	ldr	r2, [pc, #772]	@ (8002830 <__aeabi_dsub+0x354>)
 800252c:	9003      	str	r0, [sp, #12]
 800252e:	9302      	str	r3, [sp, #8]
 8002530:	4591      	cmp	r9, r2
 8002532:	d100      	bne.n	8002536 <__aeabi_dsub+0x5a>
 8002534:	e0cd      	b.n	80026d2 <__aeabi_dsub+0x1f6>
 8002536:	2501      	movs	r5, #1
 8002538:	4069      	eors	r1, r5
 800253a:	464d      	mov	r5, r9
 800253c:	1b7d      	subs	r5, r7, r5
 800253e:	46aa      	mov	sl, r5
 8002540:	428e      	cmp	r6, r1
 8002542:	d100      	bne.n	8002546 <__aeabi_dsub+0x6a>
 8002544:	e080      	b.n	8002648 <__aeabi_dsub+0x16c>
 8002546:	2d00      	cmp	r5, #0
 8002548:	dc00      	bgt.n	800254c <__aeabi_dsub+0x70>
 800254a:	e335      	b.n	8002bb8 <__aeabi_dsub+0x6dc>
 800254c:	4649      	mov	r1, r9
 800254e:	2900      	cmp	r1, #0
 8002550:	d100      	bne.n	8002554 <__aeabi_dsub+0x78>
 8002552:	e0df      	b.n	8002714 <__aeabi_dsub+0x238>
 8002554:	4297      	cmp	r7, r2
 8002556:	d100      	bne.n	800255a <__aeabi_dsub+0x7e>
 8002558:	e194      	b.n	8002884 <__aeabi_dsub+0x3a8>
 800255a:	4652      	mov	r2, sl
 800255c:	2501      	movs	r5, #1
 800255e:	2a38      	cmp	r2, #56	@ 0x38
 8002560:	dc19      	bgt.n	8002596 <__aeabi_dsub+0xba>
 8002562:	2280      	movs	r2, #128	@ 0x80
 8002564:	9b02      	ldr	r3, [sp, #8]
 8002566:	0412      	lsls	r2, r2, #16
 8002568:	4313      	orrs	r3, r2
 800256a:	9302      	str	r3, [sp, #8]
 800256c:	4652      	mov	r2, sl
 800256e:	2a1f      	cmp	r2, #31
 8002570:	dd00      	ble.n	8002574 <__aeabi_dsub+0x98>
 8002572:	e1e3      	b.n	800293c <__aeabi_dsub+0x460>
 8002574:	4653      	mov	r3, sl
 8002576:	2220      	movs	r2, #32
 8002578:	4661      	mov	r1, ip
 800257a:	9d02      	ldr	r5, [sp, #8]
 800257c:	1ad2      	subs	r2, r2, r3
 800257e:	4095      	lsls	r5, r2
 8002580:	40d9      	lsrs	r1, r3
 8002582:	430d      	orrs	r5, r1
 8002584:	4661      	mov	r1, ip
 8002586:	4091      	lsls	r1, r2
 8002588:	000a      	movs	r2, r1
 800258a:	1e51      	subs	r1, r2, #1
 800258c:	418a      	sbcs	r2, r1
 800258e:	4315      	orrs	r5, r2
 8002590:	9a02      	ldr	r2, [sp, #8]
 8002592:	40da      	lsrs	r2, r3
 8002594:	1aa4      	subs	r4, r4, r2
 8002596:	1b45      	subs	r5, r0, r5
 8002598:	42a8      	cmp	r0, r5
 800259a:	4180      	sbcs	r0, r0
 800259c:	4240      	negs	r0, r0
 800259e:	1a24      	subs	r4, r4, r0
 80025a0:	0223      	lsls	r3, r4, #8
 80025a2:	d400      	bmi.n	80025a6 <__aeabi_dsub+0xca>
 80025a4:	e13d      	b.n	8002822 <__aeabi_dsub+0x346>
 80025a6:	0264      	lsls	r4, r4, #9
 80025a8:	0a64      	lsrs	r4, r4, #9
 80025aa:	2c00      	cmp	r4, #0
 80025ac:	d100      	bne.n	80025b0 <__aeabi_dsub+0xd4>
 80025ae:	e147      	b.n	8002840 <__aeabi_dsub+0x364>
 80025b0:	0020      	movs	r0, r4
 80025b2:	f000 fcab 	bl	8002f0c <__clzsi2>
 80025b6:	0003      	movs	r3, r0
 80025b8:	3b08      	subs	r3, #8
 80025ba:	2120      	movs	r1, #32
 80025bc:	0028      	movs	r0, r5
 80025be:	1aca      	subs	r2, r1, r3
 80025c0:	40d0      	lsrs	r0, r2
 80025c2:	409c      	lsls	r4, r3
 80025c4:	0002      	movs	r2, r0
 80025c6:	409d      	lsls	r5, r3
 80025c8:	4322      	orrs	r2, r4
 80025ca:	429f      	cmp	r7, r3
 80025cc:	dd00      	ble.n	80025d0 <__aeabi_dsub+0xf4>
 80025ce:	e177      	b.n	80028c0 <__aeabi_dsub+0x3e4>
 80025d0:	1bd8      	subs	r0, r3, r7
 80025d2:	3001      	adds	r0, #1
 80025d4:	1a09      	subs	r1, r1, r0
 80025d6:	002c      	movs	r4, r5
 80025d8:	408d      	lsls	r5, r1
 80025da:	40c4      	lsrs	r4, r0
 80025dc:	1e6b      	subs	r3, r5, #1
 80025de:	419d      	sbcs	r5, r3
 80025e0:	0013      	movs	r3, r2
 80025e2:	40c2      	lsrs	r2, r0
 80025e4:	408b      	lsls	r3, r1
 80025e6:	4325      	orrs	r5, r4
 80025e8:	2700      	movs	r7, #0
 80025ea:	0014      	movs	r4, r2
 80025ec:	431d      	orrs	r5, r3
 80025ee:	076b      	lsls	r3, r5, #29
 80025f0:	d009      	beq.n	8002606 <__aeabi_dsub+0x12a>
 80025f2:	230f      	movs	r3, #15
 80025f4:	402b      	ands	r3, r5
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d005      	beq.n	8002606 <__aeabi_dsub+0x12a>
 80025fa:	1d2b      	adds	r3, r5, #4
 80025fc:	42ab      	cmp	r3, r5
 80025fe:	41ad      	sbcs	r5, r5
 8002600:	426d      	negs	r5, r5
 8002602:	1964      	adds	r4, r4, r5
 8002604:	001d      	movs	r5, r3
 8002606:	0223      	lsls	r3, r4, #8
 8002608:	d400      	bmi.n	800260c <__aeabi_dsub+0x130>
 800260a:	e140      	b.n	800288e <__aeabi_dsub+0x3b2>
 800260c:	4a88      	ldr	r2, [pc, #544]	@ (8002830 <__aeabi_dsub+0x354>)
 800260e:	3701      	adds	r7, #1
 8002610:	4297      	cmp	r7, r2
 8002612:	d100      	bne.n	8002616 <__aeabi_dsub+0x13a>
 8002614:	e101      	b.n	800281a <__aeabi_dsub+0x33e>
 8002616:	2601      	movs	r6, #1
 8002618:	4643      	mov	r3, r8
 800261a:	4986      	ldr	r1, [pc, #536]	@ (8002834 <__aeabi_dsub+0x358>)
 800261c:	08ed      	lsrs	r5, r5, #3
 800261e:	4021      	ands	r1, r4
 8002620:	074a      	lsls	r2, r1, #29
 8002622:	432a      	orrs	r2, r5
 8002624:	057c      	lsls	r4, r7, #21
 8002626:	024d      	lsls	r5, r1, #9
 8002628:	0b2d      	lsrs	r5, r5, #12
 800262a:	0d64      	lsrs	r4, r4, #21
 800262c:	401e      	ands	r6, r3
 800262e:	0524      	lsls	r4, r4, #20
 8002630:	432c      	orrs	r4, r5
 8002632:	07f6      	lsls	r6, r6, #31
 8002634:	4334      	orrs	r4, r6
 8002636:	0010      	movs	r0, r2
 8002638:	0021      	movs	r1, r4
 800263a:	b005      	add	sp, #20
 800263c:	bcf0      	pop	{r4, r5, r6, r7}
 800263e:	46bb      	mov	fp, r7
 8002640:	46b2      	mov	sl, r6
 8002642:	46a9      	mov	r9, r5
 8002644:	46a0      	mov	r8, r4
 8002646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002648:	2d00      	cmp	r5, #0
 800264a:	dc00      	bgt.n	800264e <__aeabi_dsub+0x172>
 800264c:	e2d0      	b.n	8002bf0 <__aeabi_dsub+0x714>
 800264e:	4649      	mov	r1, r9
 8002650:	2900      	cmp	r1, #0
 8002652:	d000      	beq.n	8002656 <__aeabi_dsub+0x17a>
 8002654:	e0d4      	b.n	8002800 <__aeabi_dsub+0x324>
 8002656:	4661      	mov	r1, ip
 8002658:	9b02      	ldr	r3, [sp, #8]
 800265a:	4319      	orrs	r1, r3
 800265c:	d100      	bne.n	8002660 <__aeabi_dsub+0x184>
 800265e:	e12b      	b.n	80028b8 <__aeabi_dsub+0x3dc>
 8002660:	1e69      	subs	r1, r5, #1
 8002662:	2d01      	cmp	r5, #1
 8002664:	d100      	bne.n	8002668 <__aeabi_dsub+0x18c>
 8002666:	e1d9      	b.n	8002a1c <__aeabi_dsub+0x540>
 8002668:	4295      	cmp	r5, r2
 800266a:	d100      	bne.n	800266e <__aeabi_dsub+0x192>
 800266c:	e10a      	b.n	8002884 <__aeabi_dsub+0x3a8>
 800266e:	2501      	movs	r5, #1
 8002670:	2938      	cmp	r1, #56	@ 0x38
 8002672:	dc17      	bgt.n	80026a4 <__aeabi_dsub+0x1c8>
 8002674:	468a      	mov	sl, r1
 8002676:	4653      	mov	r3, sl
 8002678:	2b1f      	cmp	r3, #31
 800267a:	dd00      	ble.n	800267e <__aeabi_dsub+0x1a2>
 800267c:	e1e7      	b.n	8002a4e <__aeabi_dsub+0x572>
 800267e:	2220      	movs	r2, #32
 8002680:	1ad2      	subs	r2, r2, r3
 8002682:	9b02      	ldr	r3, [sp, #8]
 8002684:	4661      	mov	r1, ip
 8002686:	4093      	lsls	r3, r2
 8002688:	001d      	movs	r5, r3
 800268a:	4653      	mov	r3, sl
 800268c:	40d9      	lsrs	r1, r3
 800268e:	4663      	mov	r3, ip
 8002690:	4093      	lsls	r3, r2
 8002692:	001a      	movs	r2, r3
 8002694:	430d      	orrs	r5, r1
 8002696:	1e51      	subs	r1, r2, #1
 8002698:	418a      	sbcs	r2, r1
 800269a:	4653      	mov	r3, sl
 800269c:	4315      	orrs	r5, r2
 800269e:	9a02      	ldr	r2, [sp, #8]
 80026a0:	40da      	lsrs	r2, r3
 80026a2:	18a4      	adds	r4, r4, r2
 80026a4:	182d      	adds	r5, r5, r0
 80026a6:	4285      	cmp	r5, r0
 80026a8:	4180      	sbcs	r0, r0
 80026aa:	4240      	negs	r0, r0
 80026ac:	1824      	adds	r4, r4, r0
 80026ae:	0223      	lsls	r3, r4, #8
 80026b0:	d400      	bmi.n	80026b4 <__aeabi_dsub+0x1d8>
 80026b2:	e0b6      	b.n	8002822 <__aeabi_dsub+0x346>
 80026b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002830 <__aeabi_dsub+0x354>)
 80026b6:	3701      	adds	r7, #1
 80026b8:	429f      	cmp	r7, r3
 80026ba:	d100      	bne.n	80026be <__aeabi_dsub+0x1e2>
 80026bc:	e0ad      	b.n	800281a <__aeabi_dsub+0x33e>
 80026be:	2101      	movs	r1, #1
 80026c0:	4b5c      	ldr	r3, [pc, #368]	@ (8002834 <__aeabi_dsub+0x358>)
 80026c2:	086a      	lsrs	r2, r5, #1
 80026c4:	401c      	ands	r4, r3
 80026c6:	4029      	ands	r1, r5
 80026c8:	430a      	orrs	r2, r1
 80026ca:	07e5      	lsls	r5, r4, #31
 80026cc:	4315      	orrs	r5, r2
 80026ce:	0864      	lsrs	r4, r4, #1
 80026d0:	e78d      	b.n	80025ee <__aeabi_dsub+0x112>
 80026d2:	4a59      	ldr	r2, [pc, #356]	@ (8002838 <__aeabi_dsub+0x35c>)
 80026d4:	9b02      	ldr	r3, [sp, #8]
 80026d6:	4692      	mov	sl, r2
 80026d8:	4662      	mov	r2, ip
 80026da:	44ba      	add	sl, r7
 80026dc:	431a      	orrs	r2, r3
 80026de:	d02c      	beq.n	800273a <__aeabi_dsub+0x25e>
 80026e0:	428e      	cmp	r6, r1
 80026e2:	d02e      	beq.n	8002742 <__aeabi_dsub+0x266>
 80026e4:	4652      	mov	r2, sl
 80026e6:	2a00      	cmp	r2, #0
 80026e8:	d060      	beq.n	80027ac <__aeabi_dsub+0x2d0>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x214>
 80026ee:	e0db      	b.n	80028a8 <__aeabi_dsub+0x3cc>
 80026f0:	4663      	mov	r3, ip
 80026f2:	000e      	movs	r6, r1
 80026f4:	9c02      	ldr	r4, [sp, #8]
 80026f6:	08d8      	lsrs	r0, r3, #3
 80026f8:	0762      	lsls	r2, r4, #29
 80026fa:	4302      	orrs	r2, r0
 80026fc:	08e4      	lsrs	r4, r4, #3
 80026fe:	0013      	movs	r3, r2
 8002700:	4323      	orrs	r3, r4
 8002702:	d100      	bne.n	8002706 <__aeabi_dsub+0x22a>
 8002704:	e254      	b.n	8002bb0 <__aeabi_dsub+0x6d4>
 8002706:	2580      	movs	r5, #128	@ 0x80
 8002708:	032d      	lsls	r5, r5, #12
 800270a:	4325      	orrs	r5, r4
 800270c:	032d      	lsls	r5, r5, #12
 800270e:	4c48      	ldr	r4, [pc, #288]	@ (8002830 <__aeabi_dsub+0x354>)
 8002710:	0b2d      	lsrs	r5, r5, #12
 8002712:	e78c      	b.n	800262e <__aeabi_dsub+0x152>
 8002714:	4661      	mov	r1, ip
 8002716:	9b02      	ldr	r3, [sp, #8]
 8002718:	4319      	orrs	r1, r3
 800271a:	d100      	bne.n	800271e <__aeabi_dsub+0x242>
 800271c:	e0cc      	b.n	80028b8 <__aeabi_dsub+0x3dc>
 800271e:	0029      	movs	r1, r5
 8002720:	3901      	subs	r1, #1
 8002722:	2d01      	cmp	r5, #1
 8002724:	d100      	bne.n	8002728 <__aeabi_dsub+0x24c>
 8002726:	e188      	b.n	8002a3a <__aeabi_dsub+0x55e>
 8002728:	4295      	cmp	r5, r2
 800272a:	d100      	bne.n	800272e <__aeabi_dsub+0x252>
 800272c:	e0aa      	b.n	8002884 <__aeabi_dsub+0x3a8>
 800272e:	2501      	movs	r5, #1
 8002730:	2938      	cmp	r1, #56	@ 0x38
 8002732:	dd00      	ble.n	8002736 <__aeabi_dsub+0x25a>
 8002734:	e72f      	b.n	8002596 <__aeabi_dsub+0xba>
 8002736:	468a      	mov	sl, r1
 8002738:	e718      	b.n	800256c <__aeabi_dsub+0x90>
 800273a:	2201      	movs	r2, #1
 800273c:	4051      	eors	r1, r2
 800273e:	428e      	cmp	r6, r1
 8002740:	d1d0      	bne.n	80026e4 <__aeabi_dsub+0x208>
 8002742:	4653      	mov	r3, sl
 8002744:	2b00      	cmp	r3, #0
 8002746:	d100      	bne.n	800274a <__aeabi_dsub+0x26e>
 8002748:	e0be      	b.n	80028c8 <__aeabi_dsub+0x3ec>
 800274a:	2f00      	cmp	r7, #0
 800274c:	d000      	beq.n	8002750 <__aeabi_dsub+0x274>
 800274e:	e138      	b.n	80029c2 <__aeabi_dsub+0x4e6>
 8002750:	46ca      	mov	sl, r9
 8002752:	0022      	movs	r2, r4
 8002754:	4302      	orrs	r2, r0
 8002756:	d100      	bne.n	800275a <__aeabi_dsub+0x27e>
 8002758:	e1e2      	b.n	8002b20 <__aeabi_dsub+0x644>
 800275a:	4653      	mov	r3, sl
 800275c:	1e59      	subs	r1, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d100      	bne.n	8002764 <__aeabi_dsub+0x288>
 8002762:	e20d      	b.n	8002b80 <__aeabi_dsub+0x6a4>
 8002764:	4a32      	ldr	r2, [pc, #200]	@ (8002830 <__aeabi_dsub+0x354>)
 8002766:	4592      	cmp	sl, r2
 8002768:	d100      	bne.n	800276c <__aeabi_dsub+0x290>
 800276a:	e1d2      	b.n	8002b12 <__aeabi_dsub+0x636>
 800276c:	2701      	movs	r7, #1
 800276e:	2938      	cmp	r1, #56	@ 0x38
 8002770:	dc13      	bgt.n	800279a <__aeabi_dsub+0x2be>
 8002772:	291f      	cmp	r1, #31
 8002774:	dd00      	ble.n	8002778 <__aeabi_dsub+0x29c>
 8002776:	e1ee      	b.n	8002b56 <__aeabi_dsub+0x67a>
 8002778:	2220      	movs	r2, #32
 800277a:	9b02      	ldr	r3, [sp, #8]
 800277c:	1a52      	subs	r2, r2, r1
 800277e:	0025      	movs	r5, r4
 8002780:	0007      	movs	r7, r0
 8002782:	469a      	mov	sl, r3
 8002784:	40cc      	lsrs	r4, r1
 8002786:	4090      	lsls	r0, r2
 8002788:	4095      	lsls	r5, r2
 800278a:	40cf      	lsrs	r7, r1
 800278c:	44a2      	add	sl, r4
 800278e:	1e42      	subs	r2, r0, #1
 8002790:	4190      	sbcs	r0, r2
 8002792:	4653      	mov	r3, sl
 8002794:	432f      	orrs	r7, r5
 8002796:	4307      	orrs	r7, r0
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	003d      	movs	r5, r7
 800279c:	4465      	add	r5, ip
 800279e:	4565      	cmp	r5, ip
 80027a0:	4192      	sbcs	r2, r2
 80027a2:	9b02      	ldr	r3, [sp, #8]
 80027a4:	4252      	negs	r2, r2
 80027a6:	464f      	mov	r7, r9
 80027a8:	18d4      	adds	r4, r2, r3
 80027aa:	e780      	b.n	80026ae <__aeabi_dsub+0x1d2>
 80027ac:	4a23      	ldr	r2, [pc, #140]	@ (800283c <__aeabi_dsub+0x360>)
 80027ae:	1c7d      	adds	r5, r7, #1
 80027b0:	4215      	tst	r5, r2
 80027b2:	d000      	beq.n	80027b6 <__aeabi_dsub+0x2da>
 80027b4:	e0aa      	b.n	800290c <__aeabi_dsub+0x430>
 80027b6:	4662      	mov	r2, ip
 80027b8:	0025      	movs	r5, r4
 80027ba:	9b02      	ldr	r3, [sp, #8]
 80027bc:	4305      	orrs	r5, r0
 80027be:	431a      	orrs	r2, r3
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d000      	beq.n	80027c6 <__aeabi_dsub+0x2ea>
 80027c4:	e0f5      	b.n	80029b2 <__aeabi_dsub+0x4d6>
 80027c6:	2d00      	cmp	r5, #0
 80027c8:	d100      	bne.n	80027cc <__aeabi_dsub+0x2f0>
 80027ca:	e16b      	b.n	8002aa4 <__aeabi_dsub+0x5c8>
 80027cc:	2a00      	cmp	r2, #0
 80027ce:	d100      	bne.n	80027d2 <__aeabi_dsub+0x2f6>
 80027d0:	e152      	b.n	8002a78 <__aeabi_dsub+0x59c>
 80027d2:	4663      	mov	r3, ip
 80027d4:	1ac5      	subs	r5, r0, r3
 80027d6:	9b02      	ldr	r3, [sp, #8]
 80027d8:	1ae2      	subs	r2, r4, r3
 80027da:	42a8      	cmp	r0, r5
 80027dc:	419b      	sbcs	r3, r3
 80027de:	425b      	negs	r3, r3
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	021a      	lsls	r2, r3, #8
 80027e4:	d400      	bmi.n	80027e8 <__aeabi_dsub+0x30c>
 80027e6:	e1d5      	b.n	8002b94 <__aeabi_dsub+0x6b8>
 80027e8:	4663      	mov	r3, ip
 80027ea:	1a1d      	subs	r5, r3, r0
 80027ec:	45ac      	cmp	ip, r5
 80027ee:	4192      	sbcs	r2, r2
 80027f0:	2601      	movs	r6, #1
 80027f2:	9b02      	ldr	r3, [sp, #8]
 80027f4:	4252      	negs	r2, r2
 80027f6:	1b1c      	subs	r4, r3, r4
 80027f8:	4688      	mov	r8, r1
 80027fa:	1aa4      	subs	r4, r4, r2
 80027fc:	400e      	ands	r6, r1
 80027fe:	e6f6      	b.n	80025ee <__aeabi_dsub+0x112>
 8002800:	4297      	cmp	r7, r2
 8002802:	d03f      	beq.n	8002884 <__aeabi_dsub+0x3a8>
 8002804:	4652      	mov	r2, sl
 8002806:	2501      	movs	r5, #1
 8002808:	2a38      	cmp	r2, #56	@ 0x38
 800280a:	dd00      	ble.n	800280e <__aeabi_dsub+0x332>
 800280c:	e74a      	b.n	80026a4 <__aeabi_dsub+0x1c8>
 800280e:	2280      	movs	r2, #128	@ 0x80
 8002810:	9b02      	ldr	r3, [sp, #8]
 8002812:	0412      	lsls	r2, r2, #16
 8002814:	4313      	orrs	r3, r2
 8002816:	9302      	str	r3, [sp, #8]
 8002818:	e72d      	b.n	8002676 <__aeabi_dsub+0x19a>
 800281a:	003c      	movs	r4, r7
 800281c:	2500      	movs	r5, #0
 800281e:	2200      	movs	r2, #0
 8002820:	e705      	b.n	800262e <__aeabi_dsub+0x152>
 8002822:	2307      	movs	r3, #7
 8002824:	402b      	ands	r3, r5
 8002826:	2b00      	cmp	r3, #0
 8002828:	d000      	beq.n	800282c <__aeabi_dsub+0x350>
 800282a:	e6e2      	b.n	80025f2 <__aeabi_dsub+0x116>
 800282c:	e06b      	b.n	8002906 <__aeabi_dsub+0x42a>
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	000007ff 	.word	0x000007ff
 8002834:	ff7fffff 	.word	0xff7fffff
 8002838:	fffff801 	.word	0xfffff801
 800283c:	000007fe 	.word	0x000007fe
 8002840:	0028      	movs	r0, r5
 8002842:	f000 fb63 	bl	8002f0c <__clzsi2>
 8002846:	0003      	movs	r3, r0
 8002848:	3318      	adds	r3, #24
 800284a:	2b1f      	cmp	r3, #31
 800284c:	dc00      	bgt.n	8002850 <__aeabi_dsub+0x374>
 800284e:	e6b4      	b.n	80025ba <__aeabi_dsub+0xde>
 8002850:	002a      	movs	r2, r5
 8002852:	3808      	subs	r0, #8
 8002854:	4082      	lsls	r2, r0
 8002856:	429f      	cmp	r7, r3
 8002858:	dd00      	ble.n	800285c <__aeabi_dsub+0x380>
 800285a:	e0b9      	b.n	80029d0 <__aeabi_dsub+0x4f4>
 800285c:	1bdb      	subs	r3, r3, r7
 800285e:	1c58      	adds	r0, r3, #1
 8002860:	281f      	cmp	r0, #31
 8002862:	dc00      	bgt.n	8002866 <__aeabi_dsub+0x38a>
 8002864:	e1a0      	b.n	8002ba8 <__aeabi_dsub+0x6cc>
 8002866:	0015      	movs	r5, r2
 8002868:	3b1f      	subs	r3, #31
 800286a:	40dd      	lsrs	r5, r3
 800286c:	2820      	cmp	r0, #32
 800286e:	d005      	beq.n	800287c <__aeabi_dsub+0x3a0>
 8002870:	2340      	movs	r3, #64	@ 0x40
 8002872:	1a1b      	subs	r3, r3, r0
 8002874:	409a      	lsls	r2, r3
 8002876:	1e53      	subs	r3, r2, #1
 8002878:	419a      	sbcs	r2, r3
 800287a:	4315      	orrs	r5, r2
 800287c:	2307      	movs	r3, #7
 800287e:	2700      	movs	r7, #0
 8002880:	402b      	ands	r3, r5
 8002882:	e7d0      	b.n	8002826 <__aeabi_dsub+0x34a>
 8002884:	08c0      	lsrs	r0, r0, #3
 8002886:	0762      	lsls	r2, r4, #29
 8002888:	4302      	orrs	r2, r0
 800288a:	08e4      	lsrs	r4, r4, #3
 800288c:	e737      	b.n	80026fe <__aeabi_dsub+0x222>
 800288e:	08ea      	lsrs	r2, r5, #3
 8002890:	0763      	lsls	r3, r4, #29
 8002892:	431a      	orrs	r2, r3
 8002894:	4bd3      	ldr	r3, [pc, #844]	@ (8002be4 <__aeabi_dsub+0x708>)
 8002896:	08e4      	lsrs	r4, r4, #3
 8002898:	429f      	cmp	r7, r3
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x3c2>
 800289c:	e72f      	b.n	80026fe <__aeabi_dsub+0x222>
 800289e:	0324      	lsls	r4, r4, #12
 80028a0:	0b25      	lsrs	r5, r4, #12
 80028a2:	057c      	lsls	r4, r7, #21
 80028a4:	0d64      	lsrs	r4, r4, #21
 80028a6:	e6c2      	b.n	800262e <__aeabi_dsub+0x152>
 80028a8:	46ca      	mov	sl, r9
 80028aa:	0022      	movs	r2, r4
 80028ac:	4302      	orrs	r2, r0
 80028ae:	d158      	bne.n	8002962 <__aeabi_dsub+0x486>
 80028b0:	4663      	mov	r3, ip
 80028b2:	000e      	movs	r6, r1
 80028b4:	9c02      	ldr	r4, [sp, #8]
 80028b6:	9303      	str	r3, [sp, #12]
 80028b8:	9b03      	ldr	r3, [sp, #12]
 80028ba:	4657      	mov	r7, sl
 80028bc:	08da      	lsrs	r2, r3, #3
 80028be:	e7e7      	b.n	8002890 <__aeabi_dsub+0x3b4>
 80028c0:	4cc9      	ldr	r4, [pc, #804]	@ (8002be8 <__aeabi_dsub+0x70c>)
 80028c2:	1aff      	subs	r7, r7, r3
 80028c4:	4014      	ands	r4, r2
 80028c6:	e692      	b.n	80025ee <__aeabi_dsub+0x112>
 80028c8:	4dc8      	ldr	r5, [pc, #800]	@ (8002bec <__aeabi_dsub+0x710>)
 80028ca:	1c7a      	adds	r2, r7, #1
 80028cc:	422a      	tst	r2, r5
 80028ce:	d000      	beq.n	80028d2 <__aeabi_dsub+0x3f6>
 80028d0:	e084      	b.n	80029dc <__aeabi_dsub+0x500>
 80028d2:	0022      	movs	r2, r4
 80028d4:	4302      	orrs	r2, r0
 80028d6:	2f00      	cmp	r7, #0
 80028d8:	d000      	beq.n	80028dc <__aeabi_dsub+0x400>
 80028da:	e0ef      	b.n	8002abc <__aeabi_dsub+0x5e0>
 80028dc:	2a00      	cmp	r2, #0
 80028de:	d100      	bne.n	80028e2 <__aeabi_dsub+0x406>
 80028e0:	e0e5      	b.n	8002aae <__aeabi_dsub+0x5d2>
 80028e2:	4662      	mov	r2, ip
 80028e4:	9902      	ldr	r1, [sp, #8]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	d100      	bne.n	80028ec <__aeabi_dsub+0x410>
 80028ea:	e0c5      	b.n	8002a78 <__aeabi_dsub+0x59c>
 80028ec:	4663      	mov	r3, ip
 80028ee:	18c5      	adds	r5, r0, r3
 80028f0:	468c      	mov	ip, r1
 80028f2:	4285      	cmp	r5, r0
 80028f4:	4180      	sbcs	r0, r0
 80028f6:	4464      	add	r4, ip
 80028f8:	4240      	negs	r0, r0
 80028fa:	1824      	adds	r4, r4, r0
 80028fc:	0223      	lsls	r3, r4, #8
 80028fe:	d502      	bpl.n	8002906 <__aeabi_dsub+0x42a>
 8002900:	4bb9      	ldr	r3, [pc, #740]	@ (8002be8 <__aeabi_dsub+0x70c>)
 8002902:	3701      	adds	r7, #1
 8002904:	401c      	ands	r4, r3
 8002906:	46ba      	mov	sl, r7
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	e7d5      	b.n	80028b8 <__aeabi_dsub+0x3dc>
 800290c:	4662      	mov	r2, ip
 800290e:	1a85      	subs	r5, r0, r2
 8002910:	42a8      	cmp	r0, r5
 8002912:	4192      	sbcs	r2, r2
 8002914:	4252      	negs	r2, r2
 8002916:	4691      	mov	r9, r2
 8002918:	9b02      	ldr	r3, [sp, #8]
 800291a:	1ae3      	subs	r3, r4, r3
 800291c:	001a      	movs	r2, r3
 800291e:	464b      	mov	r3, r9
 8002920:	1ad2      	subs	r2, r2, r3
 8002922:	0013      	movs	r3, r2
 8002924:	4691      	mov	r9, r2
 8002926:	021a      	lsls	r2, r3, #8
 8002928:	d46c      	bmi.n	8002a04 <__aeabi_dsub+0x528>
 800292a:	464a      	mov	r2, r9
 800292c:	464c      	mov	r4, r9
 800292e:	432a      	orrs	r2, r5
 8002930:	d000      	beq.n	8002934 <__aeabi_dsub+0x458>
 8002932:	e63a      	b.n	80025aa <__aeabi_dsub+0xce>
 8002934:	2600      	movs	r6, #0
 8002936:	2400      	movs	r4, #0
 8002938:	2500      	movs	r5, #0
 800293a:	e678      	b.n	800262e <__aeabi_dsub+0x152>
 800293c:	9902      	ldr	r1, [sp, #8]
 800293e:	4653      	mov	r3, sl
 8002940:	000d      	movs	r5, r1
 8002942:	3a20      	subs	r2, #32
 8002944:	40d5      	lsrs	r5, r2
 8002946:	2b20      	cmp	r3, #32
 8002948:	d006      	beq.n	8002958 <__aeabi_dsub+0x47c>
 800294a:	2240      	movs	r2, #64	@ 0x40
 800294c:	1ad2      	subs	r2, r2, r3
 800294e:	000b      	movs	r3, r1
 8002950:	4093      	lsls	r3, r2
 8002952:	4662      	mov	r2, ip
 8002954:	431a      	orrs	r2, r3
 8002956:	4693      	mov	fp, r2
 8002958:	465b      	mov	r3, fp
 800295a:	1e5a      	subs	r2, r3, #1
 800295c:	4193      	sbcs	r3, r2
 800295e:	431d      	orrs	r5, r3
 8002960:	e619      	b.n	8002596 <__aeabi_dsub+0xba>
 8002962:	4653      	mov	r3, sl
 8002964:	1e5a      	subs	r2, r3, #1
 8002966:	2b01      	cmp	r3, #1
 8002968:	d100      	bne.n	800296c <__aeabi_dsub+0x490>
 800296a:	e0c6      	b.n	8002afa <__aeabi_dsub+0x61e>
 800296c:	4e9d      	ldr	r6, [pc, #628]	@ (8002be4 <__aeabi_dsub+0x708>)
 800296e:	45b2      	cmp	sl, r6
 8002970:	d100      	bne.n	8002974 <__aeabi_dsub+0x498>
 8002972:	e6bd      	b.n	80026f0 <__aeabi_dsub+0x214>
 8002974:	4688      	mov	r8, r1
 8002976:	000e      	movs	r6, r1
 8002978:	2501      	movs	r5, #1
 800297a:	2a38      	cmp	r2, #56	@ 0x38
 800297c:	dc10      	bgt.n	80029a0 <__aeabi_dsub+0x4c4>
 800297e:	2a1f      	cmp	r2, #31
 8002980:	dc7f      	bgt.n	8002a82 <__aeabi_dsub+0x5a6>
 8002982:	2120      	movs	r1, #32
 8002984:	0025      	movs	r5, r4
 8002986:	1a89      	subs	r1, r1, r2
 8002988:	0007      	movs	r7, r0
 800298a:	4088      	lsls	r0, r1
 800298c:	408d      	lsls	r5, r1
 800298e:	40d7      	lsrs	r7, r2
 8002990:	40d4      	lsrs	r4, r2
 8002992:	1e41      	subs	r1, r0, #1
 8002994:	4188      	sbcs	r0, r1
 8002996:	9b02      	ldr	r3, [sp, #8]
 8002998:	433d      	orrs	r5, r7
 800299a:	1b1b      	subs	r3, r3, r4
 800299c:	4305      	orrs	r5, r0
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	4662      	mov	r2, ip
 80029a2:	1b55      	subs	r5, r2, r5
 80029a4:	45ac      	cmp	ip, r5
 80029a6:	4192      	sbcs	r2, r2
 80029a8:	9b02      	ldr	r3, [sp, #8]
 80029aa:	4252      	negs	r2, r2
 80029ac:	464f      	mov	r7, r9
 80029ae:	1a9c      	subs	r4, r3, r2
 80029b0:	e5f6      	b.n	80025a0 <__aeabi_dsub+0xc4>
 80029b2:	2d00      	cmp	r5, #0
 80029b4:	d000      	beq.n	80029b8 <__aeabi_dsub+0x4dc>
 80029b6:	e0b7      	b.n	8002b28 <__aeabi_dsub+0x64c>
 80029b8:	2a00      	cmp	r2, #0
 80029ba:	d100      	bne.n	80029be <__aeabi_dsub+0x4e2>
 80029bc:	e0f0      	b.n	8002ba0 <__aeabi_dsub+0x6c4>
 80029be:	2601      	movs	r6, #1
 80029c0:	400e      	ands	r6, r1
 80029c2:	4663      	mov	r3, ip
 80029c4:	9802      	ldr	r0, [sp, #8]
 80029c6:	08d9      	lsrs	r1, r3, #3
 80029c8:	0742      	lsls	r2, r0, #29
 80029ca:	430a      	orrs	r2, r1
 80029cc:	08c4      	lsrs	r4, r0, #3
 80029ce:	e696      	b.n	80026fe <__aeabi_dsub+0x222>
 80029d0:	4c85      	ldr	r4, [pc, #532]	@ (8002be8 <__aeabi_dsub+0x70c>)
 80029d2:	1aff      	subs	r7, r7, r3
 80029d4:	4014      	ands	r4, r2
 80029d6:	0762      	lsls	r2, r4, #29
 80029d8:	08e4      	lsrs	r4, r4, #3
 80029da:	e760      	b.n	800289e <__aeabi_dsub+0x3c2>
 80029dc:	4981      	ldr	r1, [pc, #516]	@ (8002be4 <__aeabi_dsub+0x708>)
 80029de:	428a      	cmp	r2, r1
 80029e0:	d100      	bne.n	80029e4 <__aeabi_dsub+0x508>
 80029e2:	e0c9      	b.n	8002b78 <__aeabi_dsub+0x69c>
 80029e4:	4663      	mov	r3, ip
 80029e6:	18c1      	adds	r1, r0, r3
 80029e8:	4281      	cmp	r1, r0
 80029ea:	4180      	sbcs	r0, r0
 80029ec:	9b02      	ldr	r3, [sp, #8]
 80029ee:	4240      	negs	r0, r0
 80029f0:	18e3      	adds	r3, r4, r3
 80029f2:	181b      	adds	r3, r3, r0
 80029f4:	07dd      	lsls	r5, r3, #31
 80029f6:	085c      	lsrs	r4, r3, #1
 80029f8:	2307      	movs	r3, #7
 80029fa:	0849      	lsrs	r1, r1, #1
 80029fc:	430d      	orrs	r5, r1
 80029fe:	0017      	movs	r7, r2
 8002a00:	402b      	ands	r3, r5
 8002a02:	e710      	b.n	8002826 <__aeabi_dsub+0x34a>
 8002a04:	4663      	mov	r3, ip
 8002a06:	1a1d      	subs	r5, r3, r0
 8002a08:	45ac      	cmp	ip, r5
 8002a0a:	4192      	sbcs	r2, r2
 8002a0c:	2601      	movs	r6, #1
 8002a0e:	9b02      	ldr	r3, [sp, #8]
 8002a10:	4252      	negs	r2, r2
 8002a12:	1b1c      	subs	r4, r3, r4
 8002a14:	4688      	mov	r8, r1
 8002a16:	1aa4      	subs	r4, r4, r2
 8002a18:	400e      	ands	r6, r1
 8002a1a:	e5c6      	b.n	80025aa <__aeabi_dsub+0xce>
 8002a1c:	4663      	mov	r3, ip
 8002a1e:	18c5      	adds	r5, r0, r3
 8002a20:	9b02      	ldr	r3, [sp, #8]
 8002a22:	4285      	cmp	r5, r0
 8002a24:	4180      	sbcs	r0, r0
 8002a26:	469c      	mov	ip, r3
 8002a28:	4240      	negs	r0, r0
 8002a2a:	4464      	add	r4, ip
 8002a2c:	1824      	adds	r4, r4, r0
 8002a2e:	2701      	movs	r7, #1
 8002a30:	0223      	lsls	r3, r4, #8
 8002a32:	d400      	bmi.n	8002a36 <__aeabi_dsub+0x55a>
 8002a34:	e6f5      	b.n	8002822 <__aeabi_dsub+0x346>
 8002a36:	2702      	movs	r7, #2
 8002a38:	e641      	b.n	80026be <__aeabi_dsub+0x1e2>
 8002a3a:	4663      	mov	r3, ip
 8002a3c:	1ac5      	subs	r5, r0, r3
 8002a3e:	42a8      	cmp	r0, r5
 8002a40:	4180      	sbcs	r0, r0
 8002a42:	9b02      	ldr	r3, [sp, #8]
 8002a44:	4240      	negs	r0, r0
 8002a46:	1ae4      	subs	r4, r4, r3
 8002a48:	2701      	movs	r7, #1
 8002a4a:	1a24      	subs	r4, r4, r0
 8002a4c:	e5a8      	b.n	80025a0 <__aeabi_dsub+0xc4>
 8002a4e:	9d02      	ldr	r5, [sp, #8]
 8002a50:	4652      	mov	r2, sl
 8002a52:	002b      	movs	r3, r5
 8002a54:	3a20      	subs	r2, #32
 8002a56:	40d3      	lsrs	r3, r2
 8002a58:	0019      	movs	r1, r3
 8002a5a:	4653      	mov	r3, sl
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d006      	beq.n	8002a6e <__aeabi_dsub+0x592>
 8002a60:	2240      	movs	r2, #64	@ 0x40
 8002a62:	1ad2      	subs	r2, r2, r3
 8002a64:	002b      	movs	r3, r5
 8002a66:	4093      	lsls	r3, r2
 8002a68:	4662      	mov	r2, ip
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	4693      	mov	fp, r2
 8002a6e:	465d      	mov	r5, fp
 8002a70:	1e6b      	subs	r3, r5, #1
 8002a72:	419d      	sbcs	r5, r3
 8002a74:	430d      	orrs	r5, r1
 8002a76:	e615      	b.n	80026a4 <__aeabi_dsub+0x1c8>
 8002a78:	0762      	lsls	r2, r4, #29
 8002a7a:	08c0      	lsrs	r0, r0, #3
 8002a7c:	4302      	orrs	r2, r0
 8002a7e:	08e4      	lsrs	r4, r4, #3
 8002a80:	e70d      	b.n	800289e <__aeabi_dsub+0x3c2>
 8002a82:	0011      	movs	r1, r2
 8002a84:	0027      	movs	r7, r4
 8002a86:	3920      	subs	r1, #32
 8002a88:	40cf      	lsrs	r7, r1
 8002a8a:	2a20      	cmp	r2, #32
 8002a8c:	d005      	beq.n	8002a9a <__aeabi_dsub+0x5be>
 8002a8e:	2140      	movs	r1, #64	@ 0x40
 8002a90:	1a8a      	subs	r2, r1, r2
 8002a92:	4094      	lsls	r4, r2
 8002a94:	0025      	movs	r5, r4
 8002a96:	4305      	orrs	r5, r0
 8002a98:	9503      	str	r5, [sp, #12]
 8002a9a:	9d03      	ldr	r5, [sp, #12]
 8002a9c:	1e6a      	subs	r2, r5, #1
 8002a9e:	4195      	sbcs	r5, r2
 8002aa0:	433d      	orrs	r5, r7
 8002aa2:	e77d      	b.n	80029a0 <__aeabi_dsub+0x4c4>
 8002aa4:	2a00      	cmp	r2, #0
 8002aa6:	d100      	bne.n	8002aaa <__aeabi_dsub+0x5ce>
 8002aa8:	e744      	b.n	8002934 <__aeabi_dsub+0x458>
 8002aaa:	2601      	movs	r6, #1
 8002aac:	400e      	ands	r6, r1
 8002aae:	4663      	mov	r3, ip
 8002ab0:	08d9      	lsrs	r1, r3, #3
 8002ab2:	9b02      	ldr	r3, [sp, #8]
 8002ab4:	075a      	lsls	r2, r3, #29
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	08dc      	lsrs	r4, r3, #3
 8002aba:	e6f0      	b.n	800289e <__aeabi_dsub+0x3c2>
 8002abc:	2a00      	cmp	r2, #0
 8002abe:	d028      	beq.n	8002b12 <__aeabi_dsub+0x636>
 8002ac0:	4662      	mov	r2, ip
 8002ac2:	9f02      	ldr	r7, [sp, #8]
 8002ac4:	08c0      	lsrs	r0, r0, #3
 8002ac6:	433a      	orrs	r2, r7
 8002ac8:	d100      	bne.n	8002acc <__aeabi_dsub+0x5f0>
 8002aca:	e6dc      	b.n	8002886 <__aeabi_dsub+0x3aa>
 8002acc:	0762      	lsls	r2, r4, #29
 8002ace:	4310      	orrs	r0, r2
 8002ad0:	2280      	movs	r2, #128	@ 0x80
 8002ad2:	08e4      	lsrs	r4, r4, #3
 8002ad4:	0312      	lsls	r2, r2, #12
 8002ad6:	4214      	tst	r4, r2
 8002ad8:	d009      	beq.n	8002aee <__aeabi_dsub+0x612>
 8002ada:	08fd      	lsrs	r5, r7, #3
 8002adc:	4215      	tst	r5, r2
 8002ade:	d106      	bne.n	8002aee <__aeabi_dsub+0x612>
 8002ae0:	4663      	mov	r3, ip
 8002ae2:	2601      	movs	r6, #1
 8002ae4:	002c      	movs	r4, r5
 8002ae6:	08d8      	lsrs	r0, r3, #3
 8002ae8:	077b      	lsls	r3, r7, #29
 8002aea:	4318      	orrs	r0, r3
 8002aec:	400e      	ands	r6, r1
 8002aee:	0f42      	lsrs	r2, r0, #29
 8002af0:	00c0      	lsls	r0, r0, #3
 8002af2:	08c0      	lsrs	r0, r0, #3
 8002af4:	0752      	lsls	r2, r2, #29
 8002af6:	4302      	orrs	r2, r0
 8002af8:	e601      	b.n	80026fe <__aeabi_dsub+0x222>
 8002afa:	4663      	mov	r3, ip
 8002afc:	1a1d      	subs	r5, r3, r0
 8002afe:	45ac      	cmp	ip, r5
 8002b00:	4192      	sbcs	r2, r2
 8002b02:	9b02      	ldr	r3, [sp, #8]
 8002b04:	4252      	negs	r2, r2
 8002b06:	1b1c      	subs	r4, r3, r4
 8002b08:	000e      	movs	r6, r1
 8002b0a:	4688      	mov	r8, r1
 8002b0c:	2701      	movs	r7, #1
 8002b0e:	1aa4      	subs	r4, r4, r2
 8002b10:	e546      	b.n	80025a0 <__aeabi_dsub+0xc4>
 8002b12:	4663      	mov	r3, ip
 8002b14:	08d9      	lsrs	r1, r3, #3
 8002b16:	9b02      	ldr	r3, [sp, #8]
 8002b18:	075a      	lsls	r2, r3, #29
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	08dc      	lsrs	r4, r3, #3
 8002b1e:	e5ee      	b.n	80026fe <__aeabi_dsub+0x222>
 8002b20:	4663      	mov	r3, ip
 8002b22:	9c02      	ldr	r4, [sp, #8]
 8002b24:	9303      	str	r3, [sp, #12]
 8002b26:	e6c7      	b.n	80028b8 <__aeabi_dsub+0x3dc>
 8002b28:	08c0      	lsrs	r0, r0, #3
 8002b2a:	2a00      	cmp	r2, #0
 8002b2c:	d100      	bne.n	8002b30 <__aeabi_dsub+0x654>
 8002b2e:	e6aa      	b.n	8002886 <__aeabi_dsub+0x3aa>
 8002b30:	0762      	lsls	r2, r4, #29
 8002b32:	4310      	orrs	r0, r2
 8002b34:	2280      	movs	r2, #128	@ 0x80
 8002b36:	08e4      	lsrs	r4, r4, #3
 8002b38:	0312      	lsls	r2, r2, #12
 8002b3a:	4214      	tst	r4, r2
 8002b3c:	d0d7      	beq.n	8002aee <__aeabi_dsub+0x612>
 8002b3e:	9f02      	ldr	r7, [sp, #8]
 8002b40:	08fd      	lsrs	r5, r7, #3
 8002b42:	4215      	tst	r5, r2
 8002b44:	d1d3      	bne.n	8002aee <__aeabi_dsub+0x612>
 8002b46:	4663      	mov	r3, ip
 8002b48:	2601      	movs	r6, #1
 8002b4a:	08d8      	lsrs	r0, r3, #3
 8002b4c:	077b      	lsls	r3, r7, #29
 8002b4e:	002c      	movs	r4, r5
 8002b50:	4318      	orrs	r0, r3
 8002b52:	400e      	ands	r6, r1
 8002b54:	e7cb      	b.n	8002aee <__aeabi_dsub+0x612>
 8002b56:	000a      	movs	r2, r1
 8002b58:	0027      	movs	r7, r4
 8002b5a:	3a20      	subs	r2, #32
 8002b5c:	40d7      	lsrs	r7, r2
 8002b5e:	2920      	cmp	r1, #32
 8002b60:	d005      	beq.n	8002b6e <__aeabi_dsub+0x692>
 8002b62:	2240      	movs	r2, #64	@ 0x40
 8002b64:	1a52      	subs	r2, r2, r1
 8002b66:	4094      	lsls	r4, r2
 8002b68:	0025      	movs	r5, r4
 8002b6a:	4305      	orrs	r5, r0
 8002b6c:	9503      	str	r5, [sp, #12]
 8002b6e:	9d03      	ldr	r5, [sp, #12]
 8002b70:	1e6a      	subs	r2, r5, #1
 8002b72:	4195      	sbcs	r5, r2
 8002b74:	432f      	orrs	r7, r5
 8002b76:	e610      	b.n	800279a <__aeabi_dsub+0x2be>
 8002b78:	0014      	movs	r4, r2
 8002b7a:	2500      	movs	r5, #0
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	e556      	b.n	800262e <__aeabi_dsub+0x152>
 8002b80:	9b02      	ldr	r3, [sp, #8]
 8002b82:	4460      	add	r0, ip
 8002b84:	4699      	mov	r9, r3
 8002b86:	4560      	cmp	r0, ip
 8002b88:	4192      	sbcs	r2, r2
 8002b8a:	444c      	add	r4, r9
 8002b8c:	4252      	negs	r2, r2
 8002b8e:	0005      	movs	r5, r0
 8002b90:	18a4      	adds	r4, r4, r2
 8002b92:	e74c      	b.n	8002a2e <__aeabi_dsub+0x552>
 8002b94:	001a      	movs	r2, r3
 8002b96:	001c      	movs	r4, r3
 8002b98:	432a      	orrs	r2, r5
 8002b9a:	d000      	beq.n	8002b9e <__aeabi_dsub+0x6c2>
 8002b9c:	e6b3      	b.n	8002906 <__aeabi_dsub+0x42a>
 8002b9e:	e6c9      	b.n	8002934 <__aeabi_dsub+0x458>
 8002ba0:	2480      	movs	r4, #128	@ 0x80
 8002ba2:	2600      	movs	r6, #0
 8002ba4:	0324      	lsls	r4, r4, #12
 8002ba6:	e5ae      	b.n	8002706 <__aeabi_dsub+0x22a>
 8002ba8:	2120      	movs	r1, #32
 8002baa:	2500      	movs	r5, #0
 8002bac:	1a09      	subs	r1, r1, r0
 8002bae:	e517      	b.n	80025e0 <__aeabi_dsub+0x104>
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2500      	movs	r5, #0
 8002bb4:	4c0b      	ldr	r4, [pc, #44]	@ (8002be4 <__aeabi_dsub+0x708>)
 8002bb6:	e53a      	b.n	800262e <__aeabi_dsub+0x152>
 8002bb8:	2d00      	cmp	r5, #0
 8002bba:	d100      	bne.n	8002bbe <__aeabi_dsub+0x6e2>
 8002bbc:	e5f6      	b.n	80027ac <__aeabi_dsub+0x2d0>
 8002bbe:	464b      	mov	r3, r9
 8002bc0:	1bda      	subs	r2, r3, r7
 8002bc2:	4692      	mov	sl, r2
 8002bc4:	2f00      	cmp	r7, #0
 8002bc6:	d100      	bne.n	8002bca <__aeabi_dsub+0x6ee>
 8002bc8:	e66f      	b.n	80028aa <__aeabi_dsub+0x3ce>
 8002bca:	2a38      	cmp	r2, #56	@ 0x38
 8002bcc:	dc05      	bgt.n	8002bda <__aeabi_dsub+0x6fe>
 8002bce:	2680      	movs	r6, #128	@ 0x80
 8002bd0:	0436      	lsls	r6, r6, #16
 8002bd2:	4334      	orrs	r4, r6
 8002bd4:	4688      	mov	r8, r1
 8002bd6:	000e      	movs	r6, r1
 8002bd8:	e6d1      	b.n	800297e <__aeabi_dsub+0x4a2>
 8002bda:	4688      	mov	r8, r1
 8002bdc:	000e      	movs	r6, r1
 8002bde:	2501      	movs	r5, #1
 8002be0:	e6de      	b.n	80029a0 <__aeabi_dsub+0x4c4>
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	000007ff 	.word	0x000007ff
 8002be8:	ff7fffff 	.word	0xff7fffff
 8002bec:	000007fe 	.word	0x000007fe
 8002bf0:	2d00      	cmp	r5, #0
 8002bf2:	d100      	bne.n	8002bf6 <__aeabi_dsub+0x71a>
 8002bf4:	e668      	b.n	80028c8 <__aeabi_dsub+0x3ec>
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	1bd9      	subs	r1, r3, r7
 8002bfa:	2f00      	cmp	r7, #0
 8002bfc:	d101      	bne.n	8002c02 <__aeabi_dsub+0x726>
 8002bfe:	468a      	mov	sl, r1
 8002c00:	e5a7      	b.n	8002752 <__aeabi_dsub+0x276>
 8002c02:	2701      	movs	r7, #1
 8002c04:	2938      	cmp	r1, #56	@ 0x38
 8002c06:	dd00      	ble.n	8002c0a <__aeabi_dsub+0x72e>
 8002c08:	e5c7      	b.n	800279a <__aeabi_dsub+0x2be>
 8002c0a:	2280      	movs	r2, #128	@ 0x80
 8002c0c:	0412      	lsls	r2, r2, #16
 8002c0e:	4314      	orrs	r4, r2
 8002c10:	e5af      	b.n	8002772 <__aeabi_dsub+0x296>
 8002c12:	46c0      	nop			@ (mov r8, r8)

08002c14 <__aeabi_dcmpun>:
 8002c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c16:	46c6      	mov	lr, r8
 8002c18:	031e      	lsls	r6, r3, #12
 8002c1a:	0b36      	lsrs	r6, r6, #12
 8002c1c:	46b0      	mov	r8, r6
 8002c1e:	4e0d      	ldr	r6, [pc, #52]	@ (8002c54 <__aeabi_dcmpun+0x40>)
 8002c20:	030c      	lsls	r4, r1, #12
 8002c22:	004d      	lsls	r5, r1, #1
 8002c24:	005f      	lsls	r7, r3, #1
 8002c26:	b500      	push	{lr}
 8002c28:	0b24      	lsrs	r4, r4, #12
 8002c2a:	0d6d      	lsrs	r5, r5, #21
 8002c2c:	0d7f      	lsrs	r7, r7, #21
 8002c2e:	42b5      	cmp	r5, r6
 8002c30:	d00b      	beq.n	8002c4a <__aeabi_dcmpun+0x36>
 8002c32:	4908      	ldr	r1, [pc, #32]	@ (8002c54 <__aeabi_dcmpun+0x40>)
 8002c34:	2000      	movs	r0, #0
 8002c36:	428f      	cmp	r7, r1
 8002c38:	d104      	bne.n	8002c44 <__aeabi_dcmpun+0x30>
 8002c3a:	4646      	mov	r6, r8
 8002c3c:	4316      	orrs	r6, r2
 8002c3e:	0030      	movs	r0, r6
 8002c40:	1e43      	subs	r3, r0, #1
 8002c42:	4198      	sbcs	r0, r3
 8002c44:	bc80      	pop	{r7}
 8002c46:	46b8      	mov	r8, r7
 8002c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c4a:	4304      	orrs	r4, r0
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	2c00      	cmp	r4, #0
 8002c50:	d1f8      	bne.n	8002c44 <__aeabi_dcmpun+0x30>
 8002c52:	e7ee      	b.n	8002c32 <__aeabi_dcmpun+0x1e>
 8002c54:	000007ff 	.word	0x000007ff

08002c58 <__aeabi_d2iz>:
 8002c58:	000b      	movs	r3, r1
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	4d16      	ldr	r5, [pc, #88]	@ (8002cb8 <__aeabi_d2iz+0x60>)
 8002c60:	030c      	lsls	r4, r1, #12
 8002c62:	b082      	sub	sp, #8
 8002c64:	0049      	lsls	r1, r1, #1
 8002c66:	2000      	movs	r0, #0
 8002c68:	9200      	str	r2, [sp, #0]
 8002c6a:	9301      	str	r3, [sp, #4]
 8002c6c:	0b24      	lsrs	r4, r4, #12
 8002c6e:	0d49      	lsrs	r1, r1, #21
 8002c70:	0fde      	lsrs	r6, r3, #31
 8002c72:	42a9      	cmp	r1, r5
 8002c74:	dd04      	ble.n	8002c80 <__aeabi_d2iz+0x28>
 8002c76:	4811      	ldr	r0, [pc, #68]	@ (8002cbc <__aeabi_d2iz+0x64>)
 8002c78:	4281      	cmp	r1, r0
 8002c7a:	dd03      	ble.n	8002c84 <__aeabi_d2iz+0x2c>
 8002c7c:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <__aeabi_d2iz+0x68>)
 8002c7e:	18f0      	adds	r0, r6, r3
 8002c80:	b002      	add	sp, #8
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	2080      	movs	r0, #128	@ 0x80
 8002c86:	0340      	lsls	r0, r0, #13
 8002c88:	4320      	orrs	r0, r4
 8002c8a:	4c0e      	ldr	r4, [pc, #56]	@ (8002cc4 <__aeabi_d2iz+0x6c>)
 8002c8c:	1a64      	subs	r4, r4, r1
 8002c8e:	2c1f      	cmp	r4, #31
 8002c90:	dd08      	ble.n	8002ca4 <__aeabi_d2iz+0x4c>
 8002c92:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <__aeabi_d2iz+0x70>)
 8002c94:	1a5b      	subs	r3, r3, r1
 8002c96:	40d8      	lsrs	r0, r3
 8002c98:	0003      	movs	r3, r0
 8002c9a:	4258      	negs	r0, r3
 8002c9c:	2e00      	cmp	r6, #0
 8002c9e:	d1ef      	bne.n	8002c80 <__aeabi_d2iz+0x28>
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	e7ed      	b.n	8002c80 <__aeabi_d2iz+0x28>
 8002ca4:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <__aeabi_d2iz+0x74>)
 8002ca6:	9a00      	ldr	r2, [sp, #0]
 8002ca8:	469c      	mov	ip, r3
 8002caa:	0003      	movs	r3, r0
 8002cac:	4461      	add	r1, ip
 8002cae:	408b      	lsls	r3, r1
 8002cb0:	40e2      	lsrs	r2, r4
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	e7f1      	b.n	8002c9a <__aeabi_d2iz+0x42>
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	000003fe 	.word	0x000003fe
 8002cbc:	0000041d 	.word	0x0000041d
 8002cc0:	7fffffff 	.word	0x7fffffff
 8002cc4:	00000433 	.word	0x00000433
 8002cc8:	00000413 	.word	0x00000413
 8002ccc:	fffffbed 	.word	0xfffffbed

08002cd0 <__aeabi_i2d>:
 8002cd0:	b570      	push	{r4, r5, r6, lr}
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d016      	beq.n	8002d04 <__aeabi_i2d+0x34>
 8002cd6:	17c3      	asrs	r3, r0, #31
 8002cd8:	18c5      	adds	r5, r0, r3
 8002cda:	405d      	eors	r5, r3
 8002cdc:	0fc4      	lsrs	r4, r0, #31
 8002cde:	0028      	movs	r0, r5
 8002ce0:	f000 f914 	bl	8002f0c <__clzsi2>
 8002ce4:	4b10      	ldr	r3, [pc, #64]	@ (8002d28 <__aeabi_i2d+0x58>)
 8002ce6:	1a1b      	subs	r3, r3, r0
 8002ce8:	055b      	lsls	r3, r3, #21
 8002cea:	0d5b      	lsrs	r3, r3, #21
 8002cec:	280a      	cmp	r0, #10
 8002cee:	dc14      	bgt.n	8002d1a <__aeabi_i2d+0x4a>
 8002cf0:	0002      	movs	r2, r0
 8002cf2:	002e      	movs	r6, r5
 8002cf4:	3215      	adds	r2, #21
 8002cf6:	4096      	lsls	r6, r2
 8002cf8:	220b      	movs	r2, #11
 8002cfa:	1a12      	subs	r2, r2, r0
 8002cfc:	40d5      	lsrs	r5, r2
 8002cfe:	032d      	lsls	r5, r5, #12
 8002d00:	0b2d      	lsrs	r5, r5, #12
 8002d02:	e003      	b.n	8002d0c <__aeabi_i2d+0x3c>
 8002d04:	2400      	movs	r4, #0
 8002d06:	2300      	movs	r3, #0
 8002d08:	2500      	movs	r5, #0
 8002d0a:	2600      	movs	r6, #0
 8002d0c:	051b      	lsls	r3, r3, #20
 8002d0e:	432b      	orrs	r3, r5
 8002d10:	07e4      	lsls	r4, r4, #31
 8002d12:	4323      	orrs	r3, r4
 8002d14:	0030      	movs	r0, r6
 8002d16:	0019      	movs	r1, r3
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	380b      	subs	r0, #11
 8002d1c:	4085      	lsls	r5, r0
 8002d1e:	032d      	lsls	r5, r5, #12
 8002d20:	2600      	movs	r6, #0
 8002d22:	0b2d      	lsrs	r5, r5, #12
 8002d24:	e7f2      	b.n	8002d0c <__aeabi_i2d+0x3c>
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	0000041e 	.word	0x0000041e

08002d2c <__aeabi_ui2d>:
 8002d2c:	b510      	push	{r4, lr}
 8002d2e:	1e04      	subs	r4, r0, #0
 8002d30:	d010      	beq.n	8002d54 <__aeabi_ui2d+0x28>
 8002d32:	f000 f8eb 	bl	8002f0c <__clzsi2>
 8002d36:	4b0e      	ldr	r3, [pc, #56]	@ (8002d70 <__aeabi_ui2d+0x44>)
 8002d38:	1a1b      	subs	r3, r3, r0
 8002d3a:	055b      	lsls	r3, r3, #21
 8002d3c:	0d5b      	lsrs	r3, r3, #21
 8002d3e:	280a      	cmp	r0, #10
 8002d40:	dc0f      	bgt.n	8002d62 <__aeabi_ui2d+0x36>
 8002d42:	220b      	movs	r2, #11
 8002d44:	0021      	movs	r1, r4
 8002d46:	1a12      	subs	r2, r2, r0
 8002d48:	40d1      	lsrs	r1, r2
 8002d4a:	3015      	adds	r0, #21
 8002d4c:	030a      	lsls	r2, r1, #12
 8002d4e:	4084      	lsls	r4, r0
 8002d50:	0b12      	lsrs	r2, r2, #12
 8002d52:	e001      	b.n	8002d58 <__aeabi_ui2d+0x2c>
 8002d54:	2300      	movs	r3, #0
 8002d56:	2200      	movs	r2, #0
 8002d58:	051b      	lsls	r3, r3, #20
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	0020      	movs	r0, r4
 8002d5e:	0019      	movs	r1, r3
 8002d60:	bd10      	pop	{r4, pc}
 8002d62:	0022      	movs	r2, r4
 8002d64:	380b      	subs	r0, #11
 8002d66:	4082      	lsls	r2, r0
 8002d68:	0312      	lsls	r2, r2, #12
 8002d6a:	2400      	movs	r4, #0
 8002d6c:	0b12      	lsrs	r2, r2, #12
 8002d6e:	e7f3      	b.n	8002d58 <__aeabi_ui2d+0x2c>
 8002d70:	0000041e 	.word	0x0000041e

08002d74 <__aeabi_f2d>:
 8002d74:	b570      	push	{r4, r5, r6, lr}
 8002d76:	0242      	lsls	r2, r0, #9
 8002d78:	0043      	lsls	r3, r0, #1
 8002d7a:	0fc4      	lsrs	r4, r0, #31
 8002d7c:	20fe      	movs	r0, #254	@ 0xfe
 8002d7e:	0e1b      	lsrs	r3, r3, #24
 8002d80:	1c59      	adds	r1, r3, #1
 8002d82:	0a55      	lsrs	r5, r2, #9
 8002d84:	4208      	tst	r0, r1
 8002d86:	d00c      	beq.n	8002da2 <__aeabi_f2d+0x2e>
 8002d88:	21e0      	movs	r1, #224	@ 0xe0
 8002d8a:	0089      	lsls	r1, r1, #2
 8002d8c:	468c      	mov	ip, r1
 8002d8e:	076d      	lsls	r5, r5, #29
 8002d90:	0b12      	lsrs	r2, r2, #12
 8002d92:	4463      	add	r3, ip
 8002d94:	051b      	lsls	r3, r3, #20
 8002d96:	4313      	orrs	r3, r2
 8002d98:	07e4      	lsls	r4, r4, #31
 8002d9a:	4323      	orrs	r3, r4
 8002d9c:	0028      	movs	r0, r5
 8002d9e:	0019      	movs	r1, r3
 8002da0:	bd70      	pop	{r4, r5, r6, pc}
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d114      	bne.n	8002dd0 <__aeabi_f2d+0x5c>
 8002da6:	2d00      	cmp	r5, #0
 8002da8:	d01b      	beq.n	8002de2 <__aeabi_f2d+0x6e>
 8002daa:	0028      	movs	r0, r5
 8002dac:	f000 f8ae 	bl	8002f0c <__clzsi2>
 8002db0:	280a      	cmp	r0, #10
 8002db2:	dc1c      	bgt.n	8002dee <__aeabi_f2d+0x7a>
 8002db4:	230b      	movs	r3, #11
 8002db6:	002a      	movs	r2, r5
 8002db8:	1a1b      	subs	r3, r3, r0
 8002dba:	40da      	lsrs	r2, r3
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	3315      	adds	r3, #21
 8002dc0:	409d      	lsls	r5, r3
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <__aeabi_f2d+0x88>)
 8002dc4:	0312      	lsls	r2, r2, #12
 8002dc6:	1a1b      	subs	r3, r3, r0
 8002dc8:	055b      	lsls	r3, r3, #21
 8002dca:	0b12      	lsrs	r2, r2, #12
 8002dcc:	0d5b      	lsrs	r3, r3, #21
 8002dce:	e7e1      	b.n	8002d94 <__aeabi_f2d+0x20>
 8002dd0:	2d00      	cmp	r5, #0
 8002dd2:	d009      	beq.n	8002de8 <__aeabi_f2d+0x74>
 8002dd4:	0b13      	lsrs	r3, r2, #12
 8002dd6:	2280      	movs	r2, #128	@ 0x80
 8002dd8:	0312      	lsls	r2, r2, #12
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	076d      	lsls	r5, r5, #29
 8002dde:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <__aeabi_f2d+0x8c>)
 8002de0:	e7d8      	b.n	8002d94 <__aeabi_f2d+0x20>
 8002de2:	2300      	movs	r3, #0
 8002de4:	2200      	movs	r2, #0
 8002de6:	e7d5      	b.n	8002d94 <__aeabi_f2d+0x20>
 8002de8:	2200      	movs	r2, #0
 8002dea:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <__aeabi_f2d+0x8c>)
 8002dec:	e7d2      	b.n	8002d94 <__aeabi_f2d+0x20>
 8002dee:	0003      	movs	r3, r0
 8002df0:	002a      	movs	r2, r5
 8002df2:	3b0b      	subs	r3, #11
 8002df4:	409a      	lsls	r2, r3
 8002df6:	2500      	movs	r5, #0
 8002df8:	e7e3      	b.n	8002dc2 <__aeabi_f2d+0x4e>
 8002dfa:	46c0      	nop			@ (mov r8, r8)
 8002dfc:	00000389 	.word	0x00000389
 8002e00:	000007ff 	.word	0x000007ff

08002e04 <__aeabi_d2f>:
 8002e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e06:	004b      	lsls	r3, r1, #1
 8002e08:	030f      	lsls	r7, r1, #12
 8002e0a:	0d5b      	lsrs	r3, r3, #21
 8002e0c:	4c3b      	ldr	r4, [pc, #236]	@ (8002efc <__aeabi_d2f+0xf8>)
 8002e0e:	0f45      	lsrs	r5, r0, #29
 8002e10:	b083      	sub	sp, #12
 8002e12:	0a7f      	lsrs	r7, r7, #9
 8002e14:	1c5e      	adds	r6, r3, #1
 8002e16:	432f      	orrs	r7, r5
 8002e18:	9000      	str	r0, [sp, #0]
 8002e1a:	9101      	str	r1, [sp, #4]
 8002e1c:	0fca      	lsrs	r2, r1, #31
 8002e1e:	00c5      	lsls	r5, r0, #3
 8002e20:	4226      	tst	r6, r4
 8002e22:	d00b      	beq.n	8002e3c <__aeabi_d2f+0x38>
 8002e24:	4936      	ldr	r1, [pc, #216]	@ (8002f00 <__aeabi_d2f+0xfc>)
 8002e26:	185c      	adds	r4, r3, r1
 8002e28:	2cfe      	cmp	r4, #254	@ 0xfe
 8002e2a:	dd13      	ble.n	8002e54 <__aeabi_d2f+0x50>
 8002e2c:	20ff      	movs	r0, #255	@ 0xff
 8002e2e:	2300      	movs	r3, #0
 8002e30:	05c0      	lsls	r0, r0, #23
 8002e32:	4318      	orrs	r0, r3
 8002e34:	07d2      	lsls	r2, r2, #31
 8002e36:	4310      	orrs	r0, r2
 8002e38:	b003      	add	sp, #12
 8002e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d102      	bne.n	8002e46 <__aeabi_d2f+0x42>
 8002e40:	2000      	movs	r0, #0
 8002e42:	2300      	movs	r3, #0
 8002e44:	e7f4      	b.n	8002e30 <__aeabi_d2f+0x2c>
 8002e46:	433d      	orrs	r5, r7
 8002e48:	d0f0      	beq.n	8002e2c <__aeabi_d2f+0x28>
 8002e4a:	2380      	movs	r3, #128	@ 0x80
 8002e4c:	03db      	lsls	r3, r3, #15
 8002e4e:	20ff      	movs	r0, #255	@ 0xff
 8002e50:	433b      	orrs	r3, r7
 8002e52:	e7ed      	b.n	8002e30 <__aeabi_d2f+0x2c>
 8002e54:	2c00      	cmp	r4, #0
 8002e56:	dd14      	ble.n	8002e82 <__aeabi_d2f+0x7e>
 8002e58:	9b00      	ldr	r3, [sp, #0]
 8002e5a:	00ff      	lsls	r7, r7, #3
 8002e5c:	019b      	lsls	r3, r3, #6
 8002e5e:	1e58      	subs	r0, r3, #1
 8002e60:	4183      	sbcs	r3, r0
 8002e62:	0f69      	lsrs	r1, r5, #29
 8002e64:	433b      	orrs	r3, r7
 8002e66:	430b      	orrs	r3, r1
 8002e68:	0759      	lsls	r1, r3, #29
 8002e6a:	d041      	beq.n	8002ef0 <__aeabi_d2f+0xec>
 8002e6c:	210f      	movs	r1, #15
 8002e6e:	4019      	ands	r1, r3
 8002e70:	2904      	cmp	r1, #4
 8002e72:	d028      	beq.n	8002ec6 <__aeabi_d2f+0xc2>
 8002e74:	3304      	adds	r3, #4
 8002e76:	0159      	lsls	r1, r3, #5
 8002e78:	d525      	bpl.n	8002ec6 <__aeabi_d2f+0xc2>
 8002e7a:	3401      	adds	r4, #1
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	b2e0      	uxtb	r0, r4
 8002e80:	e7d6      	b.n	8002e30 <__aeabi_d2f+0x2c>
 8002e82:	0021      	movs	r1, r4
 8002e84:	3117      	adds	r1, #23
 8002e86:	dbdb      	blt.n	8002e40 <__aeabi_d2f+0x3c>
 8002e88:	2180      	movs	r1, #128	@ 0x80
 8002e8a:	201e      	movs	r0, #30
 8002e8c:	0409      	lsls	r1, r1, #16
 8002e8e:	4339      	orrs	r1, r7
 8002e90:	1b00      	subs	r0, r0, r4
 8002e92:	281f      	cmp	r0, #31
 8002e94:	dd1b      	ble.n	8002ece <__aeabi_d2f+0xca>
 8002e96:	2602      	movs	r6, #2
 8002e98:	4276      	negs	r6, r6
 8002e9a:	1b34      	subs	r4, r6, r4
 8002e9c:	000e      	movs	r6, r1
 8002e9e:	40e6      	lsrs	r6, r4
 8002ea0:	0034      	movs	r4, r6
 8002ea2:	2820      	cmp	r0, #32
 8002ea4:	d004      	beq.n	8002eb0 <__aeabi_d2f+0xac>
 8002ea6:	4817      	ldr	r0, [pc, #92]	@ (8002f04 <__aeabi_d2f+0x100>)
 8002ea8:	4684      	mov	ip, r0
 8002eaa:	4463      	add	r3, ip
 8002eac:	4099      	lsls	r1, r3
 8002eae:	430d      	orrs	r5, r1
 8002eb0:	002b      	movs	r3, r5
 8002eb2:	1e59      	subs	r1, r3, #1
 8002eb4:	418b      	sbcs	r3, r1
 8002eb6:	4323      	orrs	r3, r4
 8002eb8:	0759      	lsls	r1, r3, #29
 8002eba:	d015      	beq.n	8002ee8 <__aeabi_d2f+0xe4>
 8002ebc:	210f      	movs	r1, #15
 8002ebe:	2400      	movs	r4, #0
 8002ec0:	4019      	ands	r1, r3
 8002ec2:	2904      	cmp	r1, #4
 8002ec4:	d117      	bne.n	8002ef6 <__aeabi_d2f+0xf2>
 8002ec6:	019b      	lsls	r3, r3, #6
 8002ec8:	0a5b      	lsrs	r3, r3, #9
 8002eca:	b2e0      	uxtb	r0, r4
 8002ecc:	e7b0      	b.n	8002e30 <__aeabi_d2f+0x2c>
 8002ece:	4c0e      	ldr	r4, [pc, #56]	@ (8002f08 <__aeabi_d2f+0x104>)
 8002ed0:	191c      	adds	r4, r3, r4
 8002ed2:	002b      	movs	r3, r5
 8002ed4:	40a5      	lsls	r5, r4
 8002ed6:	40c3      	lsrs	r3, r0
 8002ed8:	40a1      	lsls	r1, r4
 8002eda:	1e68      	subs	r0, r5, #1
 8002edc:	4185      	sbcs	r5, r0
 8002ede:	4329      	orrs	r1, r5
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	2400      	movs	r4, #0
 8002ee4:	0759      	lsls	r1, r3, #29
 8002ee6:	d1c1      	bne.n	8002e6c <__aeabi_d2f+0x68>
 8002ee8:	019b      	lsls	r3, r3, #6
 8002eea:	2000      	movs	r0, #0
 8002eec:	0a5b      	lsrs	r3, r3, #9
 8002eee:	e79f      	b.n	8002e30 <__aeabi_d2f+0x2c>
 8002ef0:	08db      	lsrs	r3, r3, #3
 8002ef2:	b2e0      	uxtb	r0, r4
 8002ef4:	e79c      	b.n	8002e30 <__aeabi_d2f+0x2c>
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	e7e5      	b.n	8002ec6 <__aeabi_d2f+0xc2>
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	000007fe 	.word	0x000007fe
 8002f00:	fffffc80 	.word	0xfffffc80
 8002f04:	fffffca2 	.word	0xfffffca2
 8002f08:	fffffc82 	.word	0xfffffc82

08002f0c <__clzsi2>:
 8002f0c:	211c      	movs	r1, #28
 8002f0e:	2301      	movs	r3, #1
 8002f10:	041b      	lsls	r3, r3, #16
 8002f12:	4298      	cmp	r0, r3
 8002f14:	d301      	bcc.n	8002f1a <__clzsi2+0xe>
 8002f16:	0c00      	lsrs	r0, r0, #16
 8002f18:	3910      	subs	r1, #16
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	4298      	cmp	r0, r3
 8002f1e:	d301      	bcc.n	8002f24 <__clzsi2+0x18>
 8002f20:	0a00      	lsrs	r0, r0, #8
 8002f22:	3908      	subs	r1, #8
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	4298      	cmp	r0, r3
 8002f28:	d301      	bcc.n	8002f2e <__clzsi2+0x22>
 8002f2a:	0900      	lsrs	r0, r0, #4
 8002f2c:	3904      	subs	r1, #4
 8002f2e:	a202      	add	r2, pc, #8	@ (adr r2, 8002f38 <__clzsi2+0x2c>)
 8002f30:	5c10      	ldrb	r0, [r2, r0]
 8002f32:	1840      	adds	r0, r0, r1
 8002f34:	4770      	bx	lr
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	02020304 	.word	0x02020304
 8002f3c:	01010101 	.word	0x01010101
	...

08002f48 <__clzdi2>:
 8002f48:	b510      	push	{r4, lr}
 8002f4a:	2900      	cmp	r1, #0
 8002f4c:	d103      	bne.n	8002f56 <__clzdi2+0xe>
 8002f4e:	f7ff ffdd 	bl	8002f0c <__clzsi2>
 8002f52:	3020      	adds	r0, #32
 8002f54:	e002      	b.n	8002f5c <__clzdi2+0x14>
 8002f56:	0008      	movs	r0, r1
 8002f58:	f7ff ffd8 	bl	8002f0c <__clzsi2>
 8002f5c:	bd10      	pop	{r4, pc}
 8002f5e:	46c0      	nop			@ (mov r8, r8)

08002f60 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8002f68:	4b09      	ldr	r3, [pc, #36]	@ (8002f90 <I2CSensors_Init+0x30>)
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8002f6e:	4a09      	ldr	r2, [pc, #36]	@ (8002f94 <I2CSensors_Init+0x34>)
 8002f70:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <I2CSensors_Init+0x38>)
 8002f72:	0011      	movs	r1, r2
 8002f74:	0018      	movs	r0, r3
 8002f76:	f000 f9cd 	bl	8003314 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8002f7a:	4a06      	ldr	r2, [pc, #24]	@ (8002f94 <I2CSensors_Init+0x34>)
 8002f7c:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <I2CSensors_Init+0x38>)
 8002f7e:	0011      	movs	r1, r2
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 f8aa 	bl	80030da <Gas_Init>
}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b002      	add	sp, #8
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	46c0      	nop			@ (mov r8, r8)
 8002f90:	20000208 	.word	0x20000208
 8002f94:	08002ff1 	.word	0x08002ff1
 8002f98:	08002f9d 	.word	0x08002f9d

08002f9c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8002f9c:	b5b0      	push	{r4, r5, r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6039      	str	r1, [r7, #0]
 8002fa4:	0011      	movs	r1, r2
 8002fa6:	1dfb      	adds	r3, r7, #7
 8002fa8:	1c02      	adds	r2, r0, #0
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	1dbb      	adds	r3, r7, #6
 8002fae:	1c0a      	adds	r2, r1, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002fec <ReadI2C+0x50>)
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	18db      	adds	r3, r3, r3
 8002fbe:	b299      	uxth	r1, r3
 8002fc0:	1dbb      	adds	r3, r7, #6
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	250f      	movs	r5, #15
 8002fc8:	197c      	adds	r4, r7, r5
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	f002 fb0a 	bl	80055e4 <HAL_I2C_Master_Receive_DMA>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8002fd4:	197b      	adds	r3, r7, r5
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <ReadI2C+0x44>
        return false;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e000      	b.n	8002fe2 <ReadI2C+0x46>
    }
    return true;
 8002fe0:	2301      	movs	r3, #1
}
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b004      	add	sp, #16
 8002fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fea:	46c0      	nop			@ (mov r8, r8)
 8002fec:	20000208 	.word	0x20000208

08002ff0 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8002ff0:	b5b0      	push	{r4, r5, r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6039      	str	r1, [r7, #0]
 8002ff8:	0011      	movs	r1, r2
 8002ffa:	1dfb      	adds	r3, r7, #7
 8002ffc:	1c02      	adds	r2, r0, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	1dbb      	adds	r3, r7, #6
 8003002:	1c0a      	adds	r2, r1, #0
 8003004:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8003006:	4b0e      	ldr	r3, [pc, #56]	@ (8003040 <WriteI2C+0x50>)
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	1dfb      	adds	r3, r7, #7
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	18db      	adds	r3, r3, r3
 8003012:	b299      	uxth	r1, r3
 8003014:	1dbb      	adds	r3, r7, #6
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	250f      	movs	r5, #15
 800301c:	197c      	adds	r4, r7, r5
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	f002 f9da 	bl	80053d8 <HAL_I2C_Master_Transmit_DMA>
 8003024:	0003      	movs	r3, r0
 8003026:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8003028:	197b      	adds	r3, r7, r5
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <WriteI2C+0x44>
        return false;
 8003030:	2300      	movs	r3, #0
 8003032:	e000      	b.n	8003036 <WriteI2C+0x46>
    }
    return true;
 8003034:	2301      	movs	r3, #1
}
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	b004      	add	sp, #16
 800303c:	bdb0      	pop	{r4, r5, r7, pc}
 800303e:	46c0      	nop			@ (mov r8, r8)
 8003040:	20000208 	.word	0x20000208

08003044 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800304a:	4b10      	ldr	r3, [pc, #64]	@ (800308c <MX_DMA_Init+0x48>)
 800304c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800304e:	4b0f      	ldr	r3, [pc, #60]	@ (800308c <MX_DMA_Init+0x48>)
 8003050:	2101      	movs	r1, #1
 8003052:	430a      	orrs	r2, r1
 8003054:	631a      	str	r2, [r3, #48]	@ 0x30
 8003056:	4b0d      	ldr	r3, [pc, #52]	@ (800308c <MX_DMA_Init+0x48>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	2201      	movs	r2, #1
 800305c:	4013      	ands	r3, r2
 800305e:	607b      	str	r3, [r7, #4]
 8003060:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	200a      	movs	r0, #10
 8003068:	f001 fd2a 	bl	8004ac0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800306c:	200a      	movs	r0, #10
 800306e:	f001 fd3c 	bl	8004aea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8003072:	2200      	movs	r2, #0
 8003074:	2100      	movs	r1, #0
 8003076:	200b      	movs	r0, #11
 8003078:	f001 fd22 	bl	8004ac0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800307c:	200b      	movs	r0, #11
 800307e:	f001 fd34 	bl	8004aea <HAL_NVIC_EnableIRQ>

}
 8003082:	46c0      	nop			@ (mov r8, r8)
 8003084:	46bd      	mov	sp, r7
 8003086:	b002      	add	sp, #8
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			@ (mov r8, r8)
 800308c:	40021000 	.word	0x40021000

08003090 <Gadget_Init>:
    .VOC_measurementEnabled = true,
    .NO_measurementEnabled = false,
    .MIC_measurementEnabled = false
};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  // Check battery power
  // Init sensor + peripherals
  Meas_Init(sensorI2C, micI2s);
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0011      	movs	r1, r2
 80030a0:	0018      	movs	r0, r3
 80030a2:	f000 fbc3 	bl	800382c <Meas_Init>
  Meas_SetInterval(2000);
 80030a6:	23fa      	movs	r3, #250	@ 0xfa
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	0018      	movs	r0, r3
 80030ac:	f000 fd82 	bl	8003bb4 <Meas_SetInterval>
  Info("Gadget initialised.");
 80030b0:	4a04      	ldr	r2, [pc, #16]	@ (80030c4 <Gadget_Init+0x34>)
 80030b2:	4b05      	ldr	r3, [pc, #20]	@ (80030c8 <Gadget_Init+0x38>)
 80030b4:	0019      	movs	r1, r3
 80030b6:	2002      	movs	r0, #2
 80030b8:	f001 f814 	bl	80040e4 <CreateLine>
}
 80030bc:	46c0      	nop			@ (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	b002      	add	sp, #8
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	0800bd88 	.word	0x0800bd88
 80030c8:	0800bd9c 	.word	0x0800bd9c

080030cc <UpkeepGadget>:

void UpkeepGadget() {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
   */
//  if(ShouldSleep()){
//        Sleep();
//        return;
//  }
  Meas_Upkeep();
 80030d0:	f000 fc78 	bl	80039c4 <Meas_Upkeep>
//    Meas_SetEnabledSensors(SensorSetPower);
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }
}
 80030d4:	46c0      	nop			@ (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <Gas_Init>:
#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "sgp41.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	0011      	movs	r1, r2
 80030ea:	0018      	movs	r0, r3
 80030ec:	f000 fd70 	bl	8003bd0 <SGP_Init>
}
 80030f0:	46c0      	nop			@ (mov r8, r8)
 80030f2:	46bd      	mov	sp, r7
 80030f4:	b002      	add	sp, #8
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80030f8:	b590      	push	{r4, r7, lr}
 80030fa:	b08b      	sub	sp, #44	@ 0x2c
 80030fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030fe:	2414      	movs	r4, #20
 8003100:	193b      	adds	r3, r7, r4
 8003102:	0018      	movs	r0, r3
 8003104:	2314      	movs	r3, #20
 8003106:	001a      	movs	r2, r3
 8003108:	2100      	movs	r1, #0
 800310a:	f006 fcbb 	bl	8009a84 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800310e:	4b79      	ldr	r3, [pc, #484]	@ (80032f4 <MX_GPIO_Init+0x1fc>)
 8003110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003112:	4b78      	ldr	r3, [pc, #480]	@ (80032f4 <MX_GPIO_Init+0x1fc>)
 8003114:	2104      	movs	r1, #4
 8003116:	430a      	orrs	r2, r1
 8003118:	62da      	str	r2, [r3, #44]	@ 0x2c
 800311a:	4b76      	ldr	r3, [pc, #472]	@ (80032f4 <MX_GPIO_Init+0x1fc>)
 800311c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311e:	2204      	movs	r2, #4
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003126:	4b73      	ldr	r3, [pc, #460]	@ (80032f4 <MX_GPIO_Init+0x1fc>)
 8003128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800312a:	4b72      	ldr	r3, [pc, #456]	@ (80032f4 <MX_GPIO_Init+0x1fc>)
 800312c:	2180      	movs	r1, #128	@ 0x80
 800312e:	430a      	orrs	r2, r1
 8003130:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003132:	4b70      	ldr	r3, [pc, #448]	@ (80032f4 <MX_GPIO_Init+0x1fc>)
 8003134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003136:	2280      	movs	r2, #128	@ 0x80
 8003138:	4013      	ands	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800313e:	4b6d      	ldr	r3, [pc, #436]	@ (80032f4 <MX_GPIO_Init+0x1fc>)
 8003140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003142:	4b6c      	ldr	r3, [pc, #432]	@ (80032f4 <MX_GPIO_Init+0x1fc>)
 8003144:	2101      	movs	r1, #1
 8003146:	430a      	orrs	r2, r1
 8003148:	62da      	str	r2, [r3, #44]	@ 0x2c
 800314a:	4b6a      	ldr	r3, [pc, #424]	@ (80032f4 <MX_GPIO_Init+0x1fc>)
 800314c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314e:	2201      	movs	r2, #1
 8003150:	4013      	ands	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003156:	4b67      	ldr	r3, [pc, #412]	@ (80032f4 <MX_GPIO_Init+0x1fc>)
 8003158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800315a:	4b66      	ldr	r3, [pc, #408]	@ (80032f4 <MX_GPIO_Init+0x1fc>)
 800315c:	2102      	movs	r1, #2
 800315e:	430a      	orrs	r2, r1
 8003160:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003162:	4b64      	ldr	r3, [pc, #400]	@ (80032f4 <MX_GPIO_Init+0x1fc>)
 8003164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003166:	2202      	movs	r2, #2
 8003168:	4013      	ands	r3, r2
 800316a:	607b      	str	r3, [r7, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800316e:	4b61      	ldr	r3, [pc, #388]	@ (80032f4 <MX_GPIO_Init+0x1fc>)
 8003170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003172:	4b60      	ldr	r3, [pc, #384]	@ (80032f4 <MX_GPIO_Init+0x1fc>)
 8003174:	2108      	movs	r1, #8
 8003176:	430a      	orrs	r2, r1
 8003178:	62da      	str	r2, [r3, #44]	@ 0x2c
 800317a:	4b5e      	ldr	r3, [pc, #376]	@ (80032f4 <MX_GPIO_Init+0x1fc>)
 800317c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317e:	2208      	movs	r2, #8
 8003180:	4013      	ands	r3, r2
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
 8003186:	2380      	movs	r3, #128	@ 0x80
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	485b      	ldr	r0, [pc, #364]	@ (80032f8 <MX_GPIO_Init+0x200>)
 800318c:	2200      	movs	r2, #0
 800318e:	0019      	movs	r1, r3
 8003190:	f002 f854 	bl	800523c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 8003194:	2380      	movs	r3, #128	@ 0x80
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4858      	ldr	r0, [pc, #352]	@ (80032fc <MX_GPIO_Init+0x204>)
 800319a:	2200      	movs	r2, #0
 800319c:	0019      	movs	r1, r3
 800319e:	f002 f84d 	bl	800523c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_EN_GPIO_Port, Wireless_EN_Pin, GPIO_PIN_SET);
 80031a2:	2380      	movs	r3, #128	@ 0x80
 80031a4:	0219      	lsls	r1, r3, #8
 80031a6:	23a0      	movs	r3, #160	@ 0xa0
 80031a8:	05db      	lsls	r3, r3, #23
 80031aa:	2201      	movs	r2, #1
 80031ac:	0018      	movs	r0, r3
 80031ae:	f002 f845 	bl	800523c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC9
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80031b2:	193b      	adds	r3, r7, r4
 80031b4:	4a52      	ldr	r2, [pc, #328]	@ (8003300 <MX_GPIO_Init+0x208>)
 80031b6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031b8:	193b      	adds	r3, r7, r4
 80031ba:	2203      	movs	r2, #3
 80031bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	193b      	adds	r3, r7, r4
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031c4:	193b      	adds	r3, r7, r4
 80031c6:	4a4d      	ldr	r2, [pc, #308]	@ (80032fc <MX_GPIO_Init+0x204>)
 80031c8:	0019      	movs	r1, r3
 80031ca:	0010      	movs	r0, r2
 80031cc:	f001 feb8 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031d0:	193b      	adds	r3, r7, r4
 80031d2:	2203      	movs	r2, #3
 80031d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031d6:	193b      	adds	r3, r7, r4
 80031d8:	2203      	movs	r2, #3
 80031da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	193b      	adds	r3, r7, r4
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80031e2:	193b      	adds	r3, r7, r4
 80031e4:	4a47      	ldr	r2, [pc, #284]	@ (8003304 <MX_GPIO_Init+0x20c>)
 80031e6:	0019      	movs	r1, r3
 80031e8:	0010      	movs	r0, r2
 80031ea:	f001 fea9 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA3 PA4
                           PA5 PA6 PA7 PA8
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80031ee:	193b      	adds	r3, r7, r4
 80031f0:	4a45      	ldr	r2, [pc, #276]	@ (8003308 <MX_GPIO_Init+0x210>)
 80031f2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031f4:	193b      	adds	r3, r7, r4
 80031f6:	2203      	movs	r2, #3
 80031f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fa:	193b      	adds	r3, r7, r4
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003200:	193a      	adds	r2, r7, r4
 8003202:	23a0      	movs	r3, #160	@ 0xa0
 8003204:	05db      	lsls	r3, r3, #23
 8003206:	0011      	movs	r1, r2
 8003208:	0018      	movs	r0, r3
 800320a:	f001 fe99 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11
                           PB14 PB3 PB4 PB5
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 800320e:	193b      	adds	r3, r7, r4
 8003210:	4a3e      	ldr	r2, [pc, #248]	@ (800330c <MX_GPIO_Init+0x214>)
 8003212:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003214:	193b      	adds	r3, r7, r4
 8003216:	2203      	movs	r2, #3
 8003218:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321a:	193b      	adds	r3, r7, r4
 800321c:	2200      	movs	r2, #0
 800321e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003220:	193b      	adds	r3, r7, r4
 8003222:	4a35      	ldr	r2, [pc, #212]	@ (80032f8 <MX_GPIO_Init+0x200>)
 8003224:	0019      	movs	r1, r3
 8003226:	0010      	movs	r0, r2
 8003228:	f001 fe8a 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_Trigger_Pin;
 800322c:	0021      	movs	r1, r4
 800322e:	187b      	adds	r3, r7, r1
 8003230:	2280      	movs	r2, #128	@ 0x80
 8003232:	00d2      	lsls	r2, r2, #3
 8003234:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003236:	000c      	movs	r4, r1
 8003238:	193b      	adds	r3, r7, r4
 800323a:	2201      	movs	r2, #1
 800323c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323e:	193b      	adds	r3, r7, r4
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003244:	193b      	adds	r3, r7, r4
 8003246:	2203      	movs	r2, #3
 8003248:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MIC_Trigger_GPIO_Port, &GPIO_InitStruct);
 800324a:	193b      	adds	r3, r7, r4
 800324c:	4a2a      	ldr	r2, [pc, #168]	@ (80032f8 <MX_GPIO_Init+0x200>)
 800324e:	0019      	movs	r1, r3
 8003250:	0010      	movs	r0, r2
 8003252:	f001 fe75 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8003256:	0021      	movs	r1, r4
 8003258:	187b      	adds	r3, r7, r1
 800325a:	2280      	movs	r2, #128	@ 0x80
 800325c:	0052      	lsls	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003260:	000c      	movs	r4, r1
 8003262:	193b      	adds	r3, r7, r4
 8003264:	2201      	movs	r2, #1
 8003266:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	193b      	adds	r3, r7, r4
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326e:	193b      	adds	r3, r7, r4
 8003270:	2200      	movs	r2, #0
 8003272:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8003274:	193b      	adds	r3, r7, r4
 8003276:	4a21      	ldr	r2, [pc, #132]	@ (80032fc <MX_GPIO_Init+0x204>)
 8003278:	0019      	movs	r1, r3
 800327a:	0010      	movs	r0, r2
 800327c:	f001 fe60 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_EN_Pin;
 8003280:	0021      	movs	r1, r4
 8003282:	187b      	adds	r3, r7, r1
 8003284:	2280      	movs	r2, #128	@ 0x80
 8003286:	0212      	lsls	r2, r2, #8
 8003288:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800328a:	000c      	movs	r4, r1
 800328c:	193b      	adds	r3, r7, r4
 800328e:	2201      	movs	r2, #1
 8003290:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	193b      	adds	r3, r7, r4
 8003294:	2200      	movs	r2, #0
 8003296:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003298:	193b      	adds	r3, r7, r4
 800329a:	2200      	movs	r2, #0
 800329c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Wireless_EN_GPIO_Port, &GPIO_InitStruct);
 800329e:	193a      	adds	r2, r7, r4
 80032a0:	23a0      	movs	r3, #160	@ 0xa0
 80032a2:	05db      	lsls	r3, r3, #23
 80032a4:	0011      	movs	r1, r2
 80032a6:	0018      	movs	r0, r3
 80032a8:	f001 fe4a 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032ac:	193b      	adds	r3, r7, r4
 80032ae:	2204      	movs	r2, #4
 80032b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032b2:	193b      	adds	r3, r7, r4
 80032b4:	2203      	movs	r2, #3
 80032b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	193b      	adds	r3, r7, r4
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032be:	193b      	adds	r3, r7, r4
 80032c0:	4a13      	ldr	r2, [pc, #76]	@ (8003310 <MX_GPIO_Init+0x218>)
 80032c2:	0019      	movs	r1, r3
 80032c4:	0010      	movs	r0, r2
 80032c6:	f001 fe3b 	bl	8004f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_PG_Pin;
 80032ca:	0021      	movs	r1, r4
 80032cc:	187b      	adds	r3, r7, r1
 80032ce:	2280      	movs	r2, #128	@ 0x80
 80032d0:	0052      	lsls	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032d4:	187b      	adds	r3, r7, r1
 80032d6:	2200      	movs	r2, #0
 80032d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032da:	187b      	adds	r3, r7, r1
 80032dc:	2200      	movs	r2, #0
 80032de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Wireless_PG_GPIO_Port, &GPIO_InitStruct);
 80032e0:	187b      	adds	r3, r7, r1
 80032e2:	4a05      	ldr	r2, [pc, #20]	@ (80032f8 <MX_GPIO_Init+0x200>)
 80032e4:	0019      	movs	r1, r3
 80032e6:	0010      	movs	r0, r2
 80032e8:	f001 fe2a 	bl	8004f40 <HAL_GPIO_Init>

}
 80032ec:	46c0      	nop			@ (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b00b      	add	sp, #44	@ 0x2c
 80032f2:	bd90      	pop	{r4, r7, pc}
 80032f4:	40021000 	.word	0x40021000
 80032f8:	50000400 	.word	0x50000400
 80032fc:	50000800 	.word	0x50000800
 8003300:	0000faff 	.word	0x0000faff
 8003304:	50001c00 	.word	0x50001c00
 8003308:	000011fd 	.word	0x000011fd
 800330c:	00004a3f 	.word	0x00004a3f
 8003310:	50000c00 	.word	0x50000c00

08003314 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	0011      	movs	r1, r2
 8003324:	0018      	movs	r0, r3
 8003326:	f001 f803 	bl	8004330 <HIDS_Init>
}
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	46bd      	mov	sp, r7
 800332e:	b002      	add	sp, #8
 8003330:	bd80      	pop	{r7, pc}

08003332 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8003332:	b580      	push	{r7, lr}
 8003334:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8003336:	f001 f82f 	bl	8004398 <HIDS_StartMeasurement>
}
 800333a:	46c0      	nop			@ (mov r8, r8)
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HT_SetMeasurementDuration>:

void HT_SetMeasurementDuration(uint32_t duration) {
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  HIDS_SetMeasurementDuration(duration);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	0018      	movs	r0, r3
 800334c:	f001 f842 	bl	80043d4 <HIDS_SetMeasurementDuration>
}
 8003350:	46c0      	nop			@ (mov r8, r8)
 8003352:	46bd      	mov	sp, r7
 8003354:	b002      	add	sp, #8
 8003356:	bd80      	pop	{r7, pc}

08003358 <HT_GetMeasurementValues>:

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	0011      	movs	r1, r2
 8003368:	0018      	movs	r0, r3
 800336a:	f001 f907 	bl	800457c <HIDS_GetMeasurementValues>
 800336e:	0003      	movs	r3, r0
}
 8003370:	0018      	movs	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	b002      	add	sp, #8
 8003376:	bd80      	pop	{r7, pc}

08003378 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800337c:	4b1b      	ldr	r3, [pc, #108]	@ (80033ec <MX_I2C1_Init+0x74>)
 800337e:	4a1c      	ldr	r2, [pc, #112]	@ (80033f0 <MX_I2C1_Init+0x78>)
 8003380:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8003382:	4b1a      	ldr	r3, [pc, #104]	@ (80033ec <MX_I2C1_Init+0x74>)
 8003384:	4a1b      	ldr	r2, [pc, #108]	@ (80033f4 <MX_I2C1_Init+0x7c>)
 8003386:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003388:	4b18      	ldr	r3, [pc, #96]	@ (80033ec <MX_I2C1_Init+0x74>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800338e:	4b17      	ldr	r3, [pc, #92]	@ (80033ec <MX_I2C1_Init+0x74>)
 8003390:	2201      	movs	r2, #1
 8003392:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003394:	4b15      	ldr	r3, [pc, #84]	@ (80033ec <MX_I2C1_Init+0x74>)
 8003396:	2200      	movs	r2, #0
 8003398:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800339a:	4b14      	ldr	r3, [pc, #80]	@ (80033ec <MX_I2C1_Init+0x74>)
 800339c:	2200      	movs	r2, #0
 800339e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033a0:	4b12      	ldr	r3, [pc, #72]	@ (80033ec <MX_I2C1_Init+0x74>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033a6:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <MX_I2C1_Init+0x74>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033ac:	4b0f      	ldr	r3, [pc, #60]	@ (80033ec <MX_I2C1_Init+0x74>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033b2:	4b0e      	ldr	r3, [pc, #56]	@ (80033ec <MX_I2C1_Init+0x74>)
 80033b4:	0018      	movs	r0, r3
 80033b6:	f001 ff79 	bl	80052ac <HAL_I2C_Init>
 80033ba:	1e03      	subs	r3, r0, #0
 80033bc:	d001      	beq.n	80033c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80033be:	f000 fa0b 	bl	80037d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033c2:	4b0a      	ldr	r3, [pc, #40]	@ (80033ec <MX_I2C1_Init+0x74>)
 80033c4:	2100      	movs	r1, #0
 80033c6:	0018      	movs	r0, r3
 80033c8:	f003 fee8 	bl	800719c <HAL_I2CEx_ConfigAnalogFilter>
 80033cc:	1e03      	subs	r3, r0, #0
 80033ce:	d001      	beq.n	80033d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80033d0:	f000 fa02 	bl	80037d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80033d4:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <MX_I2C1_Init+0x74>)
 80033d6:	2100      	movs	r1, #0
 80033d8:	0018      	movs	r0, r3
 80033da:	f003 ff2b 	bl	8007234 <HAL_I2CEx_ConfigDigitalFilter>
 80033de:	1e03      	subs	r3, r0, #0
 80033e0:	d001      	beq.n	80033e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80033e2:	f000 f9f9 	bl	80037d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	2000020c 	.word	0x2000020c
 80033f0:	40005400 	.word	0x40005400
 80033f4:	00303d5b 	.word	0x00303d5b

080033f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80033f8:	b590      	push	{r4, r7, lr}
 80033fa:	b089      	sub	sp, #36	@ 0x24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003400:	240c      	movs	r4, #12
 8003402:	193b      	adds	r3, r7, r4
 8003404:	0018      	movs	r0, r3
 8003406:	2314      	movs	r3, #20
 8003408:	001a      	movs	r2, r3
 800340a:	2100      	movs	r1, #0
 800340c:	f006 fb3a 	bl	8009a84 <memset>
  if(i2cHandle->Instance==I2C1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a45      	ldr	r2, [pc, #276]	@ (800352c <HAL_I2C_MspInit+0x134>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d000      	beq.n	800341c <HAL_I2C_MspInit+0x24>
 800341a:	e082      	b.n	8003522 <HAL_I2C_MspInit+0x12a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800341c:	4b44      	ldr	r3, [pc, #272]	@ (8003530 <HAL_I2C_MspInit+0x138>)
 800341e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003420:	4b43      	ldr	r3, [pc, #268]	@ (8003530 <HAL_I2C_MspInit+0x138>)
 8003422:	2102      	movs	r1, #2
 8003424:	430a      	orrs	r2, r1
 8003426:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003428:	4b41      	ldr	r3, [pc, #260]	@ (8003530 <HAL_I2C_MspInit+0x138>)
 800342a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342c:	2202      	movs	r2, #2
 800342e:	4013      	ands	r3, r2
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003434:	0021      	movs	r1, r4
 8003436:	187b      	adds	r3, r7, r1
 8003438:	22c0      	movs	r2, #192	@ 0xc0
 800343a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800343c:	187b      	adds	r3, r7, r1
 800343e:	2212      	movs	r2, #18
 8003440:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003442:	187b      	adds	r3, r7, r1
 8003444:	2200      	movs	r2, #0
 8003446:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003448:	187b      	adds	r3, r7, r1
 800344a:	2203      	movs	r2, #3
 800344c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800344e:	187b      	adds	r3, r7, r1
 8003450:	2201      	movs	r2, #1
 8003452:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003454:	187b      	adds	r3, r7, r1
 8003456:	4a37      	ldr	r2, [pc, #220]	@ (8003534 <HAL_I2C_MspInit+0x13c>)
 8003458:	0019      	movs	r1, r3
 800345a:	0010      	movs	r0, r2
 800345c:	f001 fd70 	bl	8004f40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003460:	4b33      	ldr	r3, [pc, #204]	@ (8003530 <HAL_I2C_MspInit+0x138>)
 8003462:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003464:	4b32      	ldr	r3, [pc, #200]	@ (8003530 <HAL_I2C_MspInit+0x138>)
 8003466:	2180      	movs	r1, #128	@ 0x80
 8003468:	0389      	lsls	r1, r1, #14
 800346a:	430a      	orrs	r2, r1
 800346c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800346e:	4b32      	ldr	r3, [pc, #200]	@ (8003538 <HAL_I2C_MspInit+0x140>)
 8003470:	4a32      	ldr	r2, [pc, #200]	@ (800353c <HAL_I2C_MspInit+0x144>)
 8003472:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8003474:	4b30      	ldr	r3, [pc, #192]	@ (8003538 <HAL_I2C_MspInit+0x140>)
 8003476:	2206      	movs	r2, #6
 8003478:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800347a:	4b2f      	ldr	r3, [pc, #188]	@ (8003538 <HAL_I2C_MspInit+0x140>)
 800347c:	2200      	movs	r2, #0
 800347e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003480:	4b2d      	ldr	r3, [pc, #180]	@ (8003538 <HAL_I2C_MspInit+0x140>)
 8003482:	2200      	movs	r2, #0
 8003484:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003486:	4b2c      	ldr	r3, [pc, #176]	@ (8003538 <HAL_I2C_MspInit+0x140>)
 8003488:	2280      	movs	r2, #128	@ 0x80
 800348a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800348c:	4b2a      	ldr	r3, [pc, #168]	@ (8003538 <HAL_I2C_MspInit+0x140>)
 800348e:	2200      	movs	r2, #0
 8003490:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003492:	4b29      	ldr	r3, [pc, #164]	@ (8003538 <HAL_I2C_MspInit+0x140>)
 8003494:	2200      	movs	r2, #0
 8003496:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003498:	4b27      	ldr	r3, [pc, #156]	@ (8003538 <HAL_I2C_MspInit+0x140>)
 800349a:	2200      	movs	r2, #0
 800349c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800349e:	4b26      	ldr	r3, [pc, #152]	@ (8003538 <HAL_I2C_MspInit+0x140>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80034a4:	4b24      	ldr	r3, [pc, #144]	@ (8003538 <HAL_I2C_MspInit+0x140>)
 80034a6:	0018      	movs	r0, r3
 80034a8:	f001 fb3c 	bl	8004b24 <HAL_DMA_Init>
 80034ac:	1e03      	subs	r3, r0, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 80034b0:	f000 f992 	bl	80037d8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a20      	ldr	r2, [pc, #128]	@ (8003538 <HAL_I2C_MspInit+0x140>)
 80034b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80034ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003538 <HAL_I2C_MspInit+0x140>)
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80034c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003540 <HAL_I2C_MspInit+0x148>)
 80034c2:	4a20      	ldr	r2, [pc, #128]	@ (8003544 <HAL_I2C_MspInit+0x14c>)
 80034c4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 80034c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003540 <HAL_I2C_MspInit+0x148>)
 80034c8:	2206      	movs	r2, #6
 80034ca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003540 <HAL_I2C_MspInit+0x148>)
 80034ce:	2210      	movs	r2, #16
 80034d0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003540 <HAL_I2C_MspInit+0x148>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034d8:	4b19      	ldr	r3, [pc, #100]	@ (8003540 <HAL_I2C_MspInit+0x148>)
 80034da:	2280      	movs	r2, #128	@ 0x80
 80034dc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034de:	4b18      	ldr	r3, [pc, #96]	@ (8003540 <HAL_I2C_MspInit+0x148>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034e4:	4b16      	ldr	r3, [pc, #88]	@ (8003540 <HAL_I2C_MspInit+0x148>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80034ea:	4b15      	ldr	r3, [pc, #84]	@ (8003540 <HAL_I2C_MspInit+0x148>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034f0:	4b13      	ldr	r3, [pc, #76]	@ (8003540 <HAL_I2C_MspInit+0x148>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80034f6:	4b12      	ldr	r3, [pc, #72]	@ (8003540 <HAL_I2C_MspInit+0x148>)
 80034f8:	0018      	movs	r0, r3
 80034fa:	f001 fb13 	bl	8004b24 <HAL_DMA_Init>
 80034fe:	1e03      	subs	r3, r0, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8003502:	f000 f969 	bl	80037d8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a0d      	ldr	r2, [pc, #52]	@ (8003540 <HAL_I2C_MspInit+0x148>)
 800350a:	639a      	str	r2, [r3, #56]	@ 0x38
 800350c:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <HAL_I2C_MspInit+0x148>)
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8003512:	2200      	movs	r2, #0
 8003514:	2100      	movs	r1, #0
 8003516:	2017      	movs	r0, #23
 8003518:	f001 fad2 	bl	8004ac0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800351c:	2017      	movs	r0, #23
 800351e:	f001 fae4 	bl	8004aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	b009      	add	sp, #36	@ 0x24
 8003528:	bd90      	pop	{r4, r7, pc}
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	40005400 	.word	0x40005400
 8003530:	40021000 	.word	0x40021000
 8003534:	50000400 	.word	0x50000400
 8003538:	20000260 	.word	0x20000260
 800353c:	40020030 	.word	0x40020030
 8003540:	200002a8 	.word	0x200002a8
 8003544:	4002001c 	.word	0x4002001c

08003548 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800354c:	4b10      	ldr	r3, [pc, #64]	@ (8003590 <MX_I2S2_Init+0x48>)
 800354e:	4a11      	ldr	r2, [pc, #68]	@ (8003594 <MX_I2S2_Init+0x4c>)
 8003550:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8003552:	4b0f      	ldr	r3, [pc, #60]	@ (8003590 <MX_I2S2_Init+0x48>)
 8003554:	22c0      	movs	r2, #192	@ 0xc0
 8003556:	0092      	lsls	r2, r2, #2
 8003558:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 800355a:	4b0d      	ldr	r3, [pc, #52]	@ (8003590 <MX_I2S2_Init+0x48>)
 800355c:	2210      	movs	r2, #16
 800355e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <MX_I2S2_Init+0x48>)
 8003562:	2205      	movs	r2, #5
 8003564:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8003566:	4b0a      	ldr	r3, [pc, #40]	@ (8003590 <MX_I2S2_Init+0x48>)
 8003568:	2200      	movs	r2, #0
 800356a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800356c:	4b08      	ldr	r3, [pc, #32]	@ (8003590 <MX_I2S2_Init+0x48>)
 800356e:	22fa      	movs	r2, #250	@ 0xfa
 8003570:	0152      	lsls	r2, r2, #5
 8003572:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8003574:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <MX_I2S2_Init+0x48>)
 8003576:	2208      	movs	r2, #8
 8003578:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800357a:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <MX_I2S2_Init+0x48>)
 800357c:	0018      	movs	r0, r3
 800357e:	f003 fea5 	bl	80072cc <HAL_I2S_Init>
 8003582:	1e03      	subs	r3, r0, #0
 8003584:	d001      	beq.n	800358a <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8003586:	f000 f927 	bl	80037d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	200002f0 	.word	0x200002f0
 8003594:	40003800 	.word	0x40003800

08003598 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b089      	sub	sp, #36	@ 0x24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a0:	240c      	movs	r4, #12
 80035a2:	193b      	adds	r3, r7, r4
 80035a4:	0018      	movs	r0, r3
 80035a6:	2314      	movs	r3, #20
 80035a8:	001a      	movs	r2, r3
 80035aa:	2100      	movs	r1, #0
 80035ac:	f006 fa6a 	bl	8009a84 <memset>
  if(i2sHandle->Instance==SPI2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a2d      	ldr	r2, [pc, #180]	@ (800366c <HAL_I2S_MspInit+0xd4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d154      	bne.n	8003664 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003670 <HAL_I2S_MspInit+0xd8>)
 80035bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035be:	4b2c      	ldr	r3, [pc, #176]	@ (8003670 <HAL_I2S_MspInit+0xd8>)
 80035c0:	2180      	movs	r1, #128	@ 0x80
 80035c2:	01c9      	lsls	r1, r1, #7
 80035c4:	430a      	orrs	r2, r1
 80035c6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c8:	4b29      	ldr	r3, [pc, #164]	@ (8003670 <HAL_I2S_MspInit+0xd8>)
 80035ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035cc:	4b28      	ldr	r3, [pc, #160]	@ (8003670 <HAL_I2S_MspInit+0xd8>)
 80035ce:	2102      	movs	r1, #2
 80035d0:	430a      	orrs	r2, r1
 80035d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035d4:	4b26      	ldr	r3, [pc, #152]	@ (8003670 <HAL_I2S_MspInit+0xd8>)
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	2202      	movs	r2, #2
 80035da:	4013      	ands	r3, r2
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80035e0:	193b      	adds	r3, r7, r4
 80035e2:	22b0      	movs	r2, #176	@ 0xb0
 80035e4:	0212      	lsls	r2, r2, #8
 80035e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e8:	0021      	movs	r1, r4
 80035ea:	187b      	adds	r3, r7, r1
 80035ec:	2202      	movs	r2, #2
 80035ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	187b      	adds	r3, r7, r1
 80035f2:	2200      	movs	r2, #0
 80035f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f6:	187b      	adds	r3, r7, r1
 80035f8:	2200      	movs	r2, #0
 80035fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	2200      	movs	r2, #0
 8003600:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003602:	187b      	adds	r3, r7, r1
 8003604:	4a1b      	ldr	r2, [pc, #108]	@ (8003674 <HAL_I2S_MspInit+0xdc>)
 8003606:	0019      	movs	r1, r3
 8003608:	0010      	movs	r0, r2
 800360a:	f001 fc99 	bl	8004f40 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800360e:	4b1a      	ldr	r3, [pc, #104]	@ (8003678 <HAL_I2S_MspInit+0xe0>)
 8003610:	4a1a      	ldr	r2, [pc, #104]	@ (800367c <HAL_I2S_MspInit+0xe4>)
 8003612:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8003614:	4b18      	ldr	r3, [pc, #96]	@ (8003678 <HAL_I2S_MspInit+0xe0>)
 8003616:	2202      	movs	r2, #2
 8003618:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800361a:	4b17      	ldr	r3, [pc, #92]	@ (8003678 <HAL_I2S_MspInit+0xe0>)
 800361c:	2200      	movs	r2, #0
 800361e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003620:	4b15      	ldr	r3, [pc, #84]	@ (8003678 <HAL_I2S_MspInit+0xe0>)
 8003622:	2200      	movs	r2, #0
 8003624:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003626:	4b14      	ldr	r3, [pc, #80]	@ (8003678 <HAL_I2S_MspInit+0xe0>)
 8003628:	2280      	movs	r2, #128	@ 0x80
 800362a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800362c:	4b12      	ldr	r3, [pc, #72]	@ (8003678 <HAL_I2S_MspInit+0xe0>)
 800362e:	2280      	movs	r2, #128	@ 0x80
 8003630:	0052      	lsls	r2, r2, #1
 8003632:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003634:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <HAL_I2S_MspInit+0xe0>)
 8003636:	2280      	movs	r2, #128	@ 0x80
 8003638:	00d2      	lsls	r2, r2, #3
 800363a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800363c:	4b0e      	ldr	r3, [pc, #56]	@ (8003678 <HAL_I2S_MspInit+0xe0>)
 800363e:	2220      	movs	r2, #32
 8003640:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003642:	4b0d      	ldr	r3, [pc, #52]	@ (8003678 <HAL_I2S_MspInit+0xe0>)
 8003644:	2200      	movs	r2, #0
 8003646:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003648:	4b0b      	ldr	r3, [pc, #44]	@ (8003678 <HAL_I2S_MspInit+0xe0>)
 800364a:	0018      	movs	r0, r3
 800364c:	f001 fa6a 	bl	8004b24 <HAL_DMA_Init>
 8003650:	1e03      	subs	r3, r0, #0
 8003652:	d001      	beq.n	8003658 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8003654:	f000 f8c0 	bl	80037d8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a07      	ldr	r2, [pc, #28]	@ (8003678 <HAL_I2S_MspInit+0xe0>)
 800365c:	631a      	str	r2, [r3, #48]	@ 0x30
 800365e:	4b06      	ldr	r3, [pc, #24]	@ (8003678 <HAL_I2S_MspInit+0xe0>)
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003664:	46c0      	nop			@ (mov r8, r8)
 8003666:	46bd      	mov	sp, r7
 8003668:	b009      	add	sp, #36	@ 0x24
 800366a:	bd90      	pop	{r4, r7, pc}
 800366c:	40003800 	.word	0x40003800
 8003670:	40021000 	.word	0x40021000
 8003674:	50000400 	.word	0x50000400
 8003678:	2000032c 	.word	0x2000032c
 800367c:	40020044 	.word	0x40020044

08003680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003686:	f001 f8db 	bl	8004840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800368a:	f000 f83b 	bl	8003704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800368e:	f7ff fd33 	bl	80030f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003692:	f7ff fcd7 	bl	8003044 <MX_DMA_Init>
  MX_I2C1_Init();
 8003696:	f7ff fe6f 	bl	8003378 <MX_I2C1_Init>
  MX_I2S2_Init();
 800369a:	f7ff ff55 	bl	8003548 <MX_I2S2_Init>
  MX_USART4_UART_Init();
 800369e:	f000 fbff 	bl	8003ea0 <MX_USART4_UART_Init>
  MX_USART1_UART_Init();
 80036a2:	f000 fbcd 	bl	8003e40 <MX_USART1_UART_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  uint32_t LedBlinkInterval = 500;
 80036a6:	23fa      	movs	r3, #250	@ 0xfa
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	603b      	str	r3, [r7, #0]
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LedBlinkInterval;
 80036ac:	f001 f92e 	bl	800490c <HAL_GetTick>
 80036b0:	0002      	movs	r2, r0
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	189b      	adds	r3, r3, r2
 80036b6:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 80036b8:	2003      	movs	r0, #3
 80036ba:	f000 fd8f 	bl	80041dc <SetVerboseLevel>
  Gadget_Init(&hi2c1, &hi2s2);
 80036be:	4a0e      	ldr	r2, [pc, #56]	@ (80036f8 <main+0x78>)
 80036c0:	4b0e      	ldr	r3, [pc, #56]	@ (80036fc <main+0x7c>)
 80036c2:	0011      	movs	r1, r2
 80036c4:	0018      	movs	r0, r3
 80036c6:	f7ff fce3 	bl	8003090 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    UpkeepGadget();
 80036ca:	f7ff fcff 	bl	80030cc <UpkeepGadget>
    if(TimestampIsReached(LedBlinkTimestamp)) {
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	0018      	movs	r0, r3
 80036d2:	f000 fcb1 	bl	8004038 <TimestampIsReached>
 80036d6:	1e03      	subs	r3, r0, #0
 80036d8:	d0f7      	beq.n	80036ca <main+0x4a>
      HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 80036da:	2380      	movs	r3, #128	@ 0x80
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	4a08      	ldr	r2, [pc, #32]	@ (8003700 <main+0x80>)
 80036e0:	0019      	movs	r1, r3
 80036e2:	0010      	movs	r0, r2
 80036e4:	f001 fdc7 	bl	8005276 <HAL_GPIO_TogglePin>
      LedBlinkTimestamp = HAL_GetTick() + LedBlinkInterval;
 80036e8:	f001 f910 	bl	800490c <HAL_GetTick>
 80036ec:	0002      	movs	r2, r0
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	189b      	adds	r3, r3, r2
 80036f2:	607b      	str	r3, [r7, #4]
    UpkeepGadget();
 80036f4:	e7e9      	b.n	80036ca <main+0x4a>
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	200002f0 	.word	0x200002f0
 80036fc:	2000020c 	.word	0x2000020c
 8003700:	50000800 	.word	0x50000800

08003704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b09d      	sub	sp, #116	@ 0x74
 8003708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800370a:	2438      	movs	r4, #56	@ 0x38
 800370c:	193b      	adds	r3, r7, r4
 800370e:	0018      	movs	r0, r3
 8003710:	2338      	movs	r3, #56	@ 0x38
 8003712:	001a      	movs	r2, r3
 8003714:	2100      	movs	r1, #0
 8003716:	f006 f9b5 	bl	8009a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800371a:	2324      	movs	r3, #36	@ 0x24
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	0018      	movs	r0, r3
 8003720:	2314      	movs	r3, #20
 8003722:	001a      	movs	r2, r3
 8003724:	2100      	movs	r1, #0
 8003726:	f006 f9ad 	bl	8009a84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800372a:	003b      	movs	r3, r7
 800372c:	0018      	movs	r0, r3
 800372e:	2324      	movs	r3, #36	@ 0x24
 8003730:	001a      	movs	r2, r3
 8003732:	2100      	movs	r1, #0
 8003734:	f006 f9a6 	bl	8009a84 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003738:	4b25      	ldr	r3, [pc, #148]	@ (80037d0 <SystemClock_Config+0xcc>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a25      	ldr	r2, [pc, #148]	@ (80037d4 <SystemClock_Config+0xd0>)
 800373e:	401a      	ands	r2, r3
 8003740:	4b23      	ldr	r3, [pc, #140]	@ (80037d0 <SystemClock_Config+0xcc>)
 8003742:	2180      	movs	r1, #128	@ 0x80
 8003744:	0109      	lsls	r1, r1, #4
 8003746:	430a      	orrs	r2, r1
 8003748:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800374a:	0021      	movs	r1, r4
 800374c:	187b      	adds	r3, r7, r1
 800374e:	2202      	movs	r2, #2
 8003750:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003752:	187b      	adds	r3, r7, r1
 8003754:	2201      	movs	r2, #1
 8003756:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003758:	187b      	adds	r3, r7, r1
 800375a:	2210      	movs	r2, #16
 800375c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800375e:	187b      	adds	r3, r7, r1
 8003760:	2200      	movs	r2, #0
 8003762:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003764:	187b      	adds	r3, r7, r1
 8003766:	0018      	movs	r0, r3
 8003768:	f003 fea2 	bl	80074b0 <HAL_RCC_OscConfig>
 800376c:	1e03      	subs	r3, r0, #0
 800376e:	d001      	beq.n	8003774 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8003770:	f000 f832 	bl	80037d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003774:	2124      	movs	r1, #36	@ 0x24
 8003776:	187b      	adds	r3, r7, r1
 8003778:	220f      	movs	r2, #15
 800377a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800377c:	187b      	adds	r3, r7, r1
 800377e:	2201      	movs	r2, #1
 8003780:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003782:	187b      	adds	r3, r7, r1
 8003784:	2200      	movs	r2, #0
 8003786:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003788:	187b      	adds	r3, r7, r1
 800378a:	2200      	movs	r2, #0
 800378c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800378e:	187b      	adds	r3, r7, r1
 8003790:	2200      	movs	r2, #0
 8003792:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003794:	187b      	adds	r3, r7, r1
 8003796:	2100      	movs	r1, #0
 8003798:	0018      	movs	r0, r3
 800379a:	f004 fa5d 	bl	8007c58 <HAL_RCC_ClockConfig>
 800379e:	1e03      	subs	r3, r0, #0
 80037a0:	d001      	beq.n	80037a6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80037a2:	f000 f819 	bl	80037d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80037a6:	003b      	movs	r3, r7
 80037a8:	2209      	movs	r2, #9
 80037aa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80037ac:	003b      	movs	r3, r7
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80037b2:	003b      	movs	r3, r7
 80037b4:	2200      	movs	r2, #0
 80037b6:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037b8:	003b      	movs	r3, r7
 80037ba:	0018      	movs	r0, r3
 80037bc:	f004 fc70 	bl	80080a0 <HAL_RCCEx_PeriphCLKConfig>
 80037c0:	1e03      	subs	r3, r0, #0
 80037c2:	d001      	beq.n	80037c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80037c4:	f000 f808 	bl	80037d8 <Error_Handler>
  }
}
 80037c8:	46c0      	nop			@ (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b01d      	add	sp, #116	@ 0x74
 80037ce:	bd90      	pop	{r4, r7, pc}
 80037d0:	40007000 	.word	0x40007000
 80037d4:	ffffe7ff 	.word	0xffffe7ff

080037d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037dc:	b672      	cpsid	i
}
 80037de:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037e0:	46c0      	nop			@ (mov r8, r8)
 80037e2:	e7fd      	b.n	80037e0 <Error_Handler+0x8>

080037e4 <HT_StartMeasurementWrapper>:
static uint32_t TimeOutInterval = 100;
static uint8_t ErrorCount = 0;
static uint8_t CurrentMeasurementIndex = 0;


static void HT_StartMeasurementWrapper(void) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 80037e8:	f7ff fda3 	bl	8003332 <HT_StartMeasurement>
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
    return HT_GetMeasurementValues(&Measurement.humidityPerc, &Measurement.temperature);
 80037f8:	4a04      	ldr	r2, [pc, #16]	@ (800380c <HT_IsMeasurementDoneWrapper+0x18>)
 80037fa:	4b05      	ldr	r3, [pc, #20]	@ (8003810 <HT_IsMeasurementDoneWrapper+0x1c>)
 80037fc:	0011      	movs	r1, r2
 80037fe:	0018      	movs	r0, r3
 8003800:	f7ff fdaa 	bl	8003358 <HT_GetMeasurementValues>
 8003804:	0003      	movs	r3, r0
}
 8003806:	0018      	movs	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20000378 	.word	0x20000378
 8003810:	20000374 	.word	0x20000374

08003814 <MIC_StartMeasurementWrapper>:

static bool NO_IsMeasurementDoneWrapper(void) {
  return true;
}

static void MIC_StartMeasurementWrapper(void) {
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
//  MIC_Start(SAMPLE_RATE_48K, NR_SAMPLES_128);
}
 8003818:	46c0      	nop			@ (mov r8, r8)
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 800381e:	b580      	push	{r7, lr}
 8003820:	af00      	add	r7, sp, #0
    return true;
 8003822:	2301      	movs	r3, #1
}
 8003824:	0018      	movs	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <Meas_Init>:

void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {
 800382c:	b5b0      	push	{r4, r5, r7, lr}
 800382e:	b094      	sub	sp, #80	@ 0x50
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  // Initialise enabled measurements with standard values
  MeasEnabled.HT_measurementEnabled = true;
 8003836:	4b48      	ldr	r3, [pc, #288]	@ (8003958 <Meas_Init+0x12c>)
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]
  MeasEnabled.VOC_measurementEnabled = false;
 800383c:	4b46      	ldr	r3, [pc, #280]	@ (8003958 <Meas_Init+0x12c>)
 800383e:	2200      	movs	r2, #0
 8003840:	705a      	strb	r2, [r3, #1]
  MeasEnabled.NO_measurementEnabled = false;
 8003842:	4b45      	ldr	r3, [pc, #276]	@ (8003958 <Meas_Init+0x12c>)
 8003844:	2200      	movs	r2, #0
 8003846:	709a      	strb	r2, [r3, #2]
  MeasEnabled.MIC_measurementEnabled = false;
 8003848:	4b43      	ldr	r3, [pc, #268]	@ (8003958 <Meas_Init+0x12c>)
 800384a:	2200      	movs	r2, #0
 800384c:	70da      	strb	r2, [r3, #3]
  I2CSensors_Init(sensorI2C);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	0018      	movs	r0, r3
 8003852:	f7ff fb85 	bl	8002f60 <I2CSensors_Init>
  HT_SetMeasurementDuration(MeasurementDuration);
 8003856:	4b41      	ldr	r3, [pc, #260]	@ (800395c <Meas_Init+0x130>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	0018      	movs	r0, r3
 800385c:	f7ff fd70 	bl	8003340 <HT_SetMeasurementDuration>
  uint8_t offset = 0;
 8003860:	254f      	movs	r5, #79	@ 0x4f
 8003862:	197b      	adds	r3, r7, r5
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
  // TODO: add functionality so that we can set the enabled measurements. This should be done from gadget.c
  Measurements[offset++] = (MeasurementInfo) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &Measurement.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8003868:	197b      	adds	r3, r7, r5
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	197a      	adds	r2, r7, r5
 800386e:	1c59      	adds	r1, r3, #1
 8003870:	7011      	strb	r1, [r2, #0]
 8003872:	4a39      	ldr	r2, [pc, #228]	@ (8003958 <Meas_Init+0x12c>)
 8003874:	7814      	ldrb	r4, [r2, #0]
 8003876:	4a3a      	ldr	r2, [pc, #232]	@ (8003960 <Meas_Init+0x134>)
 8003878:	0119      	lsls	r1, r3, #4
 800387a:	483a      	ldr	r0, [pc, #232]	@ (8003964 <Meas_Init+0x138>)
 800387c:	5088      	str	r0, [r1, r2]
 800387e:	4938      	ldr	r1, [pc, #224]	@ (8003960 <Meas_Init+0x134>)
 8003880:	011a      	lsls	r2, r3, #4
 8003882:	188a      	adds	r2, r1, r2
 8003884:	3204      	adds	r2, #4
 8003886:	4938      	ldr	r1, [pc, #224]	@ (8003968 <Meas_Init+0x13c>)
 8003888:	6011      	str	r1, [r2, #0]
 800388a:	4935      	ldr	r1, [pc, #212]	@ (8003960 <Meas_Init+0x134>)
 800388c:	011a      	lsls	r2, r3, #4
 800388e:	188a      	adds	r2, r1, r2
 8003890:	3208      	adds	r2, #8
 8003892:	4936      	ldr	r1, [pc, #216]	@ (800396c <Meas_Init+0x140>)
 8003894:	6011      	str	r1, [r2, #0]
 8003896:	4a32      	ldr	r2, [pc, #200]	@ (8003960 <Meas_Init+0x134>)
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	18d3      	adds	r3, r2, r3
 800389c:	330c      	adds	r3, #12
 800389e:	1c22      	adds	r2, r4, #0
 80038a0:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementInfo) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &Measurement.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 80038a2:	197b      	adds	r3, r7, r5
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	197a      	adds	r2, r7, r5
 80038a8:	1c59      	adds	r1, r3, #1
 80038aa:	7011      	strb	r1, [r2, #0]
 80038ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003958 <Meas_Init+0x12c>)
 80038ae:	7854      	ldrb	r4, [r2, #1]
 80038b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003960 <Meas_Init+0x134>)
 80038b2:	0119      	lsls	r1, r3, #4
 80038b4:	482b      	ldr	r0, [pc, #172]	@ (8003964 <Meas_Init+0x138>)
 80038b6:	5088      	str	r0, [r1, r2]
 80038b8:	4929      	ldr	r1, [pc, #164]	@ (8003960 <Meas_Init+0x134>)
 80038ba:	011a      	lsls	r2, r3, #4
 80038bc:	188a      	adds	r2, r1, r2
 80038be:	3204      	adds	r2, #4
 80038c0:	4929      	ldr	r1, [pc, #164]	@ (8003968 <Meas_Init+0x13c>)
 80038c2:	6011      	str	r1, [r2, #0]
 80038c4:	4926      	ldr	r1, [pc, #152]	@ (8003960 <Meas_Init+0x134>)
 80038c6:	011a      	lsls	r2, r3, #4
 80038c8:	188a      	adds	r2, r1, r2
 80038ca:	3208      	adds	r2, #8
 80038cc:	4928      	ldr	r1, [pc, #160]	@ (8003970 <Meas_Init+0x144>)
 80038ce:	6011      	str	r1, [r2, #0]
 80038d0:	4a23      	ldr	r2, [pc, #140]	@ (8003960 <Meas_Init+0x134>)
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	18d3      	adds	r3, r2, r3
 80038d6:	330c      	adds	r3, #12
 80038d8:	1c22      	adds	r2, r4, #0
 80038da:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementInfo) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &Measurement.NO_measurementDone, MeasEnabled.NO_measurementEnabled};
 80038dc:	197b      	adds	r3, r7, r5
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	197a      	adds	r2, r7, r5
 80038e2:	1c59      	adds	r1, r3, #1
 80038e4:	7011      	strb	r1, [r2, #0]
 80038e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003958 <Meas_Init+0x12c>)
 80038e8:	7894      	ldrb	r4, [r2, #2]
 80038ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003960 <Meas_Init+0x134>)
 80038ec:	0119      	lsls	r1, r3, #4
 80038ee:	481d      	ldr	r0, [pc, #116]	@ (8003964 <Meas_Init+0x138>)
 80038f0:	5088      	str	r0, [r1, r2]
 80038f2:	491b      	ldr	r1, [pc, #108]	@ (8003960 <Meas_Init+0x134>)
 80038f4:	011a      	lsls	r2, r3, #4
 80038f6:	188a      	adds	r2, r1, r2
 80038f8:	3204      	adds	r2, #4
 80038fa:	491b      	ldr	r1, [pc, #108]	@ (8003968 <Meas_Init+0x13c>)
 80038fc:	6011      	str	r1, [r2, #0]
 80038fe:	4918      	ldr	r1, [pc, #96]	@ (8003960 <Meas_Init+0x134>)
 8003900:	011a      	lsls	r2, r3, #4
 8003902:	188a      	adds	r2, r1, r2
 8003904:	3208      	adds	r2, #8
 8003906:	491b      	ldr	r1, [pc, #108]	@ (8003974 <Meas_Init+0x148>)
 8003908:	6011      	str	r1, [r2, #0]
 800390a:	4a15      	ldr	r2, [pc, #84]	@ (8003960 <Meas_Init+0x134>)
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	18d3      	adds	r3, r2, r3
 8003910:	330c      	adds	r3, #12
 8003912:	1c22      	adds	r2, r4, #0
 8003914:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementInfo){MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &Measurement.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
 8003916:	197b      	adds	r3, r7, r5
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	197a      	adds	r2, r7, r5
 800391c:	1c59      	adds	r1, r3, #1
 800391e:	7011      	strb	r1, [r2, #0]
 8003920:	4a0d      	ldr	r2, [pc, #52]	@ (8003958 <Meas_Init+0x12c>)
 8003922:	78d4      	ldrb	r4, [r2, #3]
 8003924:	4a0e      	ldr	r2, [pc, #56]	@ (8003960 <Meas_Init+0x134>)
 8003926:	0119      	lsls	r1, r3, #4
 8003928:	4813      	ldr	r0, [pc, #76]	@ (8003978 <Meas_Init+0x14c>)
 800392a:	5088      	str	r0, [r1, r2]
 800392c:	490c      	ldr	r1, [pc, #48]	@ (8003960 <Meas_Init+0x134>)
 800392e:	011a      	lsls	r2, r3, #4
 8003930:	188a      	adds	r2, r1, r2
 8003932:	3204      	adds	r2, #4
 8003934:	4911      	ldr	r1, [pc, #68]	@ (800397c <Meas_Init+0x150>)
 8003936:	6011      	str	r1, [r2, #0]
 8003938:	4909      	ldr	r1, [pc, #36]	@ (8003960 <Meas_Init+0x134>)
 800393a:	011a      	lsls	r2, r3, #4
 800393c:	188a      	adds	r2, r1, r2
 800393e:	3208      	adds	r2, #8
 8003940:	490f      	ldr	r1, [pc, #60]	@ (8003980 <Meas_Init+0x154>)
 8003942:	6011      	str	r1, [r2, #0]
 8003944:	4a06      	ldr	r2, [pc, #24]	@ (8003960 <Meas_Init+0x134>)
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	18d3      	adds	r3, r2, r3
 800394a:	330c      	adds	r3, #12
 800394c:	1c22      	adds	r2, r4, #0
 800394e:	701a      	strb	r2, [r3, #0]
  //	MIC_Init(micI2s);
}
 8003950:	46c0      	nop			@ (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	b014      	add	sp, #80	@ 0x50
 8003956:	bdb0      	pop	{r4, r5, r7, pc}
 8003958:	200003c0 	.word	0x200003c0
 800395c:	20000000 	.word	0x20000000
 8003960:	20000380 	.word	0x20000380
 8003964:	080037e5 	.word	0x080037e5
 8003968:	080037f5 	.word	0x080037f5
 800396c:	2000037c 	.word	0x2000037c
 8003970:	2000037d 	.word	0x2000037d
 8003974:	2000037e 	.word	0x2000037e
 8003978:	08003815 	.word	0x08003815
 800397c:	0800381f 	.word	0x0800381f
 8003980:	2000037f 	.word	0x2000037f

08003984 <StartNextMeasurement>:

void StartNextMeasurement(void) {
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  if(Measurements[CurrentMeasurementIndex].enabled) {
 8003988:	4b0c      	ldr	r3, [pc, #48]	@ (80039bc <StartNextMeasurement+0x38>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	4a0c      	ldr	r2, [pc, #48]	@ (80039c0 <StartNextMeasurement+0x3c>)
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	18d3      	adds	r3, r2, r3
 8003992:	330c      	adds	r3, #12
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d006      	beq.n	80039a8 <StartNextMeasurement+0x24>
    Measurements[CurrentMeasurementIndex].startFunc();
 800399a:	4b08      	ldr	r3, [pc, #32]	@ (80039bc <StartNextMeasurement+0x38>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	001a      	movs	r2, r3
 80039a0:	4b07      	ldr	r3, [pc, #28]	@ (80039c0 <StartNextMeasurement+0x3c>)
 80039a2:	0112      	lsls	r2, r2, #4
 80039a4:	58d3      	ldr	r3, [r2, r3]
 80039a6:	4798      	blx	r3
  }
  CurrentMeasurementIndex++;
 80039a8:	4b04      	ldr	r3, [pc, #16]	@ (80039bc <StartNextMeasurement+0x38>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	3301      	adds	r3, #1
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	4b02      	ldr	r3, [pc, #8]	@ (80039bc <StartNextMeasurement+0x38>)
 80039b2:	701a      	strb	r2, [r3, #0]
}
 80039b4:	46c0      	nop			@ (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	200003d1 	.word	0x200003d1
 80039c0:	20000380 	.word	0x20000380

080039c4 <Meas_Upkeep>:

void Meas_Upkeep(void) {
 80039c4:	b5b0      	push	{r4, r5, r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af04      	add	r7, sp, #16
  switch(MeasState) {
 80039ca:	4b68      	ldr	r3, [pc, #416]	@ (8003b6c <Meas_Upkeep+0x1a8>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d100      	bne.n	80039d4 <Meas_Upkeep+0x10>
 80039d2:	e0a1      	b.n	8003b18 <Meas_Upkeep+0x154>
 80039d4:	dd00      	ble.n	80039d8 <Meas_Upkeep+0x14>
 80039d6:	e0c1      	b.n	8003b5c <Meas_Upkeep+0x198>
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d044      	beq.n	8003a66 <Meas_Upkeep+0xa2>
 80039dc:	dd00      	ble.n	80039e0 <Meas_Upkeep+0x1c>
 80039de:	e0bd      	b.n	8003b5c <Meas_Upkeep+0x198>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <Meas_Upkeep+0x26>
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d028      	beq.n	8003a3a <Meas_Upkeep+0x76>
 80039e8:	e0b8      	b.n	8003b5c <Meas_Upkeep+0x198>
  // TODO: Make check if sensor is available and then don't init if sensor is not found.
  // So first we take the temperature, humidity and microphone first, then the voc

  case MEAS_STATE_INIT:
      Measurement.humidityPerc = 0;
 80039ea:	4b61      	ldr	r3, [pc, #388]	@ (8003b70 <Meas_Upkeep+0x1ac>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
      Measurement.temperature = 0;
 80039f0:	4b5f      	ldr	r3, [pc, #380]	@ (8003b70 <Meas_Upkeep+0x1ac>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	605a      	str	r2, [r3, #4]
      Measurement.HT_measurementDone = false;
 80039f6:	4b5e      	ldr	r3, [pc, #376]	@ (8003b70 <Meas_Upkeep+0x1ac>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	721a      	strb	r2, [r3, #8]
      Measurement.VOC_measurementDone = false;
 80039fc:	4b5c      	ldr	r3, [pc, #368]	@ (8003b70 <Meas_Upkeep+0x1ac>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	725a      	strb	r2, [r3, #9]
      Measurement.NO_measurementDone = false;
 8003a02:	4b5b      	ldr	r3, [pc, #364]	@ (8003b70 <Meas_Upkeep+0x1ac>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	729a      	strb	r2, [r3, #10]
      Measurement.MIC_measurementDone = false;
 8003a08:	4b59      	ldr	r3, [pc, #356]	@ (8003b70 <Meas_Upkeep+0x1ac>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	72da      	strb	r2, [r3, #11]
      CurrentMeasurementIndex = 0;
 8003a0e:	4b59      	ldr	r3, [pc, #356]	@ (8003b74 <Meas_Upkeep+0x1b0>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	701a      	strb	r2, [r3, #0]
      Info("Measurements running for: %d ms", MeasurementDuration);
 8003a14:	4b58      	ldr	r3, [pc, #352]	@ (8003b78 <Meas_Upkeep+0x1b4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a58      	ldr	r2, [pc, #352]	@ (8003b7c <Meas_Upkeep+0x1b8>)
 8003a1a:	4959      	ldr	r1, [pc, #356]	@ (8003b80 <Meas_Upkeep+0x1bc>)
 8003a1c:	2002      	movs	r0, #2
 8003a1e:	f000 fb61 	bl	80040e4 <CreateLine>
      MeasurementTimestamp = HAL_GetTick() + MeasurementDuration;
 8003a22:	f000 ff73 	bl	800490c <HAL_GetTick>
 8003a26:	0002      	movs	r2, r0
 8003a28:	4b53      	ldr	r3, [pc, #332]	@ (8003b78 <Meas_Upkeep+0x1b4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	18d2      	adds	r2, r2, r3
 8003a2e:	4b55      	ldr	r3, [pc, #340]	@ (8003b84 <Meas_Upkeep+0x1c0>)
 8003a30:	601a      	str	r2, [r3, #0]
      MeasState = MEAS_STATE_START_NEXT_MEASUREMENT;
 8003a32:	4b4e      	ldr	r3, [pc, #312]	@ (8003b6c <Meas_Upkeep+0x1a8>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	701a      	strb	r2, [r3, #0]
      break;
 8003a38:	e095      	b.n	8003b66 <Meas_Upkeep+0x1a2>

  case MEAS_STATE_START_NEXT_MEASUREMENT:
    if (CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT) {
 8003a3a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b74 <Meas_Upkeep+0x1b0>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d80d      	bhi.n	8003a5e <Meas_Upkeep+0x9a>
       StartNextMeasurement();
 8003a42:	f7ff ff9f 	bl	8003984 <StartNextMeasurement>
       if (CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT) {
 8003a46:	4b4b      	ldr	r3, [pc, #300]	@ (8003b74 <Meas_Upkeep+0x1b0>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d803      	bhi.n	8003a56 <Meas_Upkeep+0x92>
           MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8003a4e:	4b47      	ldr	r3, [pc, #284]	@ (8003b6c <Meas_Upkeep+0x1a8>)
 8003a50:	2202      	movs	r2, #2
 8003a52:	701a      	strb	r2, [r3, #0]
           MeasState = MEAS_STATE_PROCESS_RESULTS;
       }
   } else {
       MeasState = MEAS_STATE_PROCESS_RESULTS;
   }
   break;
 8003a54:	e087      	b.n	8003b66 <Meas_Upkeep+0x1a2>
           MeasState = MEAS_STATE_PROCESS_RESULTS;
 8003a56:	4b45      	ldr	r3, [pc, #276]	@ (8003b6c <Meas_Upkeep+0x1a8>)
 8003a58:	2203      	movs	r2, #3
 8003a5a:	701a      	strb	r2, [r3, #0]
   break;
 8003a5c:	e083      	b.n	8003b66 <Meas_Upkeep+0x1a2>
       MeasState = MEAS_STATE_PROCESS_RESULTS;
 8003a5e:	4b43      	ldr	r3, [pc, #268]	@ (8003b6c <Meas_Upkeep+0x1a8>)
 8003a60:	2203      	movs	r2, #3
 8003a62:	701a      	strb	r2, [r3, #0]
   break;
 8003a64:	e07f      	b.n	8003b66 <Meas_Upkeep+0x1a2>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if (ErrorCount >= MEAS_MAX_RETRY_ATTEMPTS) {
 8003a66:	4b48      	ldr	r3, [pc, #288]	@ (8003b88 <Meas_Upkeep+0x1c4>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d90c      	bls.n	8003a88 <Meas_Upkeep+0xc4>
        Error("Measurements timeout reached, restarting measurements.");
 8003a6e:	4a47      	ldr	r2, [pc, #284]	@ (8003b8c <Meas_Upkeep+0x1c8>)
 8003a70:	4b47      	ldr	r3, [pc, #284]	@ (8003b90 <Meas_Upkeep+0x1cc>)
 8003a72:	0019      	movs	r1, r3
 8003a74:	2001      	movs	r0, #1
 8003a76:	f000 fb35 	bl	80040e4 <CreateLine>
        ErrorCount = 0;
 8003a7a:	4b43      	ldr	r3, [pc, #268]	@ (8003b88 <Meas_Upkeep+0x1c4>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
        MeasState = MEAS_STATE_INIT;
 8003a80:	4b3a      	ldr	r3, [pc, #232]	@ (8003b6c <Meas_Upkeep+0x1a8>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	701a      	strb	r2, [r3, #0]
    } else if (TimestampIsReached(TimeOutTimestamp) && TimestampIsReached(MeasurementTimestamp)) {
        Debug("Measurement %d not done yet after interval. Retrying.", CurrentMeasurementIndex);
        ErrorCount += 1;
        TimeOutTimestamp = HAL_GetTick() + TimeOutInterval;
    }
    break;
 8003a86:	e06d      	b.n	8003b64 <Meas_Upkeep+0x1a0>
    } else if (Measurements[CurrentMeasurementIndex].doneFunc()) {
 8003a88:	4b3a      	ldr	r3, [pc, #232]	@ (8003b74 <Meas_Upkeep+0x1b0>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	4a41      	ldr	r2, [pc, #260]	@ (8003b94 <Meas_Upkeep+0x1d0>)
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	18d3      	adds	r3, r2, r3
 8003a92:	3304      	adds	r3, #4
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4798      	blx	r3
 8003a98:	1e03      	subs	r3, r0, #0
 8003a9a:	d019      	beq.n	8003ad0 <Meas_Upkeep+0x10c>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8003a9c:	4b35      	ldr	r3, [pc, #212]	@ (8003b74 <Meas_Upkeep+0x1b0>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	4a3c      	ldr	r2, [pc, #240]	@ (8003b94 <Meas_Upkeep+0x1d0>)
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	18d3      	adds	r3, r2, r3
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	701a      	strb	r2, [r3, #0]
        Info("Measurement %d completed.", CurrentMeasurementIndex);
 8003aae:	4b31      	ldr	r3, [pc, #196]	@ (8003b74 <Meas_Upkeep+0x1b0>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	4a39      	ldr	r2, [pc, #228]	@ (8003b98 <Meas_Upkeep+0x1d4>)
 8003ab4:	4932      	ldr	r1, [pc, #200]	@ (8003b80 <Meas_Upkeep+0x1bc>)
 8003ab6:	2002      	movs	r0, #2
 8003ab8:	f000 fb14 	bl	80040e4 <CreateLine>
        CurrentMeasurementIndex++;
 8003abc:	4b2d      	ldr	r3, [pc, #180]	@ (8003b74 <Meas_Upkeep+0x1b0>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8003b74 <Meas_Upkeep+0x1b0>)
 8003ac6:	701a      	strb	r2, [r3, #0]
        MeasState = MEAS_STATE_START_NEXT_MEASUREMENT;
 8003ac8:	4b28      	ldr	r3, [pc, #160]	@ (8003b6c <Meas_Upkeep+0x1a8>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	701a      	strb	r2, [r3, #0]
    break;
 8003ace:	e049      	b.n	8003b64 <Meas_Upkeep+0x1a0>
    } else if (TimestampIsReached(TimeOutTimestamp) && TimestampIsReached(MeasurementTimestamp)) {
 8003ad0:	4b32      	ldr	r3, [pc, #200]	@ (8003b9c <Meas_Upkeep+0x1d8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f000 faaf 	bl	8004038 <TimestampIsReached>
 8003ada:	1e03      	subs	r3, r0, #0
 8003adc:	d042      	beq.n	8003b64 <Meas_Upkeep+0x1a0>
 8003ade:	4b29      	ldr	r3, [pc, #164]	@ (8003b84 <Meas_Upkeep+0x1c0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f000 faa8 	bl	8004038 <TimestampIsReached>
 8003ae8:	1e03      	subs	r3, r0, #0
 8003aea:	d03b      	beq.n	8003b64 <Meas_Upkeep+0x1a0>
        Debug("Measurement %d not done yet after interval. Retrying.", CurrentMeasurementIndex);
 8003aec:	4b21      	ldr	r3, [pc, #132]	@ (8003b74 <Meas_Upkeep+0x1b0>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	4a2b      	ldr	r2, [pc, #172]	@ (8003ba0 <Meas_Upkeep+0x1dc>)
 8003af2:	492c      	ldr	r1, [pc, #176]	@ (8003ba4 <Meas_Upkeep+0x1e0>)
 8003af4:	2003      	movs	r0, #3
 8003af6:	f000 faf5 	bl	80040e4 <CreateLine>
        ErrorCount += 1;
 8003afa:	4b23      	ldr	r3, [pc, #140]	@ (8003b88 <Meas_Upkeep+0x1c4>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	3301      	adds	r3, #1
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	4b21      	ldr	r3, [pc, #132]	@ (8003b88 <Meas_Upkeep+0x1c4>)
 8003b04:	701a      	strb	r2, [r3, #0]
        TimeOutTimestamp = HAL_GetTick() + TimeOutInterval;
 8003b06:	f000 ff01 	bl	800490c <HAL_GetTick>
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	4b26      	ldr	r3, [pc, #152]	@ (8003ba8 <Meas_Upkeep+0x1e4>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	18d2      	adds	r2, r2, r3
 8003b12:	4b22      	ldr	r3, [pc, #136]	@ (8003b9c <Meas_Upkeep+0x1d8>)
 8003b14:	601a      	str	r2, [r3, #0]
    break;
 8003b16:	e025      	b.n	8003b64 <Meas_Upkeep+0x1a0>

  case MEAS_STATE_PROCESS_RESULTS:
    Debug("Processing results.");
 8003b18:	4a24      	ldr	r2, [pc, #144]	@ (8003bac <Meas_Upkeep+0x1e8>)
 8003b1a:	4b22      	ldr	r3, [pc, #136]	@ (8003ba4 <Meas_Upkeep+0x1e0>)
 8003b1c:	0019      	movs	r1, r3
 8003b1e:	2003      	movs	r0, #3
 8003b20:	f000 fae0 	bl	80040e4 <CreateLine>
    // TODO: Return values and let gadget handle with too high humidity
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", Measurement.humidityPerc, Measurement.temperature);
 8003b24:	4b12      	ldr	r3, [pc, #72]	@ (8003b70 <Meas_Upkeep+0x1ac>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	1c18      	adds	r0, r3, #0
 8003b2a:	f7ff f923 	bl	8002d74 <__aeabi_f2d>
 8003b2e:	0004      	movs	r4, r0
 8003b30:	000d      	movs	r5, r1
 8003b32:	4b0f      	ldr	r3, [pc, #60]	@ (8003b70 <Meas_Upkeep+0x1ac>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	1c18      	adds	r0, r3, #0
 8003b38:	f7ff f91c 	bl	8002d74 <__aeabi_f2d>
 8003b3c:	0002      	movs	r2, r0
 8003b3e:	000b      	movs	r3, r1
 8003b40:	481b      	ldr	r0, [pc, #108]	@ (8003bb0 <Meas_Upkeep+0x1ec>)
 8003b42:	4918      	ldr	r1, [pc, #96]	@ (8003ba4 <Meas_Upkeep+0x1e0>)
 8003b44:	9202      	str	r2, [sp, #8]
 8003b46:	9303      	str	r3, [sp, #12]
 8003b48:	9400      	str	r4, [sp, #0]
 8003b4a:	9501      	str	r5, [sp, #4]
 8003b4c:	0002      	movs	r2, r0
 8003b4e:	2003      	movs	r0, #3
 8003b50:	f000 fac8 	bl	80040e4 <CreateLine>
    MeasState = MEAS_STATE_INIT;
 8003b54:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <Meas_Upkeep+0x1a8>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	701a      	strb	r2, [r3, #0]
    break;
 8003b5a:	e004      	b.n	8003b66 <Meas_Upkeep+0x1a2>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8003b5c:	4b03      	ldr	r3, [pc, #12]	@ (8003b6c <Meas_Upkeep+0x1a8>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
    break;
 8003b62:	e000      	b.n	8003b66 <Meas_Upkeep+0x1a2>
    break;
 8003b64:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b6c:	200003c4 	.word	0x200003c4
 8003b70:	20000374 	.word	0x20000374
 8003b74:	200003d1 	.word	0x200003d1
 8003b78:	20000000 	.word	0x20000000
 8003b7c:	0800bda0 	.word	0x0800bda0
 8003b80:	0800bdc0 	.word	0x0800bdc0
 8003b84:	200003c8 	.word	0x200003c8
 8003b88:	200003d0 	.word	0x200003d0
 8003b8c:	0800bdc4 	.word	0x0800bdc4
 8003b90:	0800bdfc 	.word	0x0800bdfc
 8003b94:	20000380 	.word	0x20000380
 8003b98:	0800be00 	.word	0x0800be00
 8003b9c:	200003cc 	.word	0x200003cc
 8003ba0:	0800be1c 	.word	0x0800be1c
 8003ba4:	0800be54 	.word	0x0800be54
 8003ba8:	20000004 	.word	0x20000004
 8003bac:	0800be58 	.word	0x0800be58
 8003bb0:	0800be6c 	.word	0x0800be6c

08003bb4 <Meas_SetInterval>:
  Measurements[offset++].enabled = enabled.NO_measurementEnabled;
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;

}

void Meas_SetInterval(uint32_t interval_ms) {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  MeasurementDuration = interval_ms;
 8003bbc:	4b03      	ldr	r3, [pc, #12]	@ (8003bcc <Meas_SetInterval+0x18>)
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	601a      	str	r2, [r3, #0]
}
 8003bc2:	46c0      	nop			@ (mov r8, r8)
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b002      	add	sp, #8
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			@ (mov r8, r8)
 8003bcc:	20000000 	.word	0x20000000

08003bd0 <SGP_Init>:
      WriteFunction(address, buffer, nrBytes);
//      HAL_Delay(SENSOR_WAIT_DELAY);
  }
}

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8003bda:	4b0c      	ldr	r3, [pc, #48]	@ (8003c0c <SGP_Init+0x3c>)
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8003be0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <SGP_Init+0x40>)
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	601a      	str	r2, [r3, #0]
  if(!SGP_DeviceConnected()) {
 8003be6:	f000 f819 	bl	8003c1c <SGP_DeviceConnected>
 8003bea:	0003      	movs	r3, r0
 8003bec:	001a      	movs	r2, r3
 8003bee:	2301      	movs	r3, #1
 8003bf0:	4053      	eors	r3, r2
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d006      	beq.n	8003c06 <SGP_Init+0x36>
    Error("SGP device not connected!");
 8003bf8:	4a06      	ldr	r2, [pc, #24]	@ (8003c14 <SGP_Init+0x44>)
 8003bfa:	4b07      	ldr	r3, [pc, #28]	@ (8003c18 <SGP_Init+0x48>)
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	2001      	movs	r0, #1
 8003c00:	f000 fa70 	bl	80040e4 <CreateLine>
    return;
 8003c04:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b002      	add	sp, #8
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	200003d4 	.word	0x200003d4
 8003c10:	200003d8 	.word	0x200003d8
 8003c14:	0800bea0 	.word	0x0800bea0
 8003c18:	0800bebc 	.word	0x0800bebc

08003c1c <SGP_DeviceConnected>:

void SGP_StartMeasurement(void) {
//  WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalsBuffer, 2);
}

bool SGP_DeviceConnected(void) {
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
//  for (uint8_t i = 0; i < SERIAL_BUFFER_LENGTH; i++) {
//    Info("Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
//  }
//  return CheckCRC(SerialBuffer);
  // TODO: Implement logic to read serial number
  return false;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	0018      	movs	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c2c:	4b07      	ldr	r3, [pc, #28]	@ (8003c4c <HAL_MspInit+0x24>)
 8003c2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c30:	4b06      	ldr	r3, [pc, #24]	@ (8003c4c <HAL_MspInit+0x24>)
 8003c32:	2101      	movs	r1, #1
 8003c34:	430a      	orrs	r2, r1
 8003c36:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c38:	4b04      	ldr	r3, [pc, #16]	@ (8003c4c <HAL_MspInit+0x24>)
 8003c3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c3c:	4b03      	ldr	r3, [pc, #12]	@ (8003c4c <HAL_MspInit+0x24>)
 8003c3e:	2180      	movs	r1, #128	@ 0x80
 8003c40:	0549      	lsls	r1, r1, #21
 8003c42:	430a      	orrs	r2, r1
 8003c44:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40021000 	.word	0x40021000

08003c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c54:	46c0      	nop			@ (mov r8, r8)
 8003c56:	e7fd      	b.n	8003c54 <NMI_Handler+0x4>

08003c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c5c:	46c0      	nop			@ (mov r8, r8)
 8003c5e:	e7fd      	b.n	8003c5c <HardFault_Handler+0x4>

08003c60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003c64:	46c0      	nop			@ (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c6e:	46c0      	nop			@ (mov r8, r8)
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c78:	f000 fe36 	bl	80048e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c7c:	46c0      	nop			@ (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003c88:	4b05      	ldr	r3, [pc, #20]	@ (8003ca0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f001 f86f 	bl	8004d6e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003c90:	4b04      	ldr	r3, [pc, #16]	@ (8003ca4 <DMA1_Channel2_3_IRQHandler+0x20>)
 8003c92:	0018      	movs	r0, r3
 8003c94:	f001 f86b 	bl	8004d6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003c98:	46c0      	nop			@ (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	200002a8 	.word	0x200002a8
 8003ca4:	20000260 	.word	0x20000260

08003ca8 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003cac:	4b03      	ldr	r3, [pc, #12]	@ (8003cbc <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f001 f85d 	bl	8004d6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8003cb4:	46c0      	nop			@ (mov r8, r8)
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	46c0      	nop			@ (mov r8, r8)
 8003cbc:	2000032c 	.word	0x2000032c

08003cc0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8003cc4:	4b09      	ldr	r3, [pc, #36]	@ (8003cec <I2C1_IRQHandler+0x2c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	23e0      	movs	r3, #224	@ 0xe0
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4013      	ands	r3, r2
 8003cd0:	d004      	beq.n	8003cdc <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8003cd2:	4b06      	ldr	r3, [pc, #24]	@ (8003cec <I2C1_IRQHandler+0x2c>)
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f001 fda5 	bl	8005824 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8003cda:	e003      	b.n	8003ce4 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8003cdc:	4b03      	ldr	r3, [pc, #12]	@ (8003cec <I2C1_IRQHandler+0x2c>)
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f001 fd86 	bl	80057f0 <HAL_I2C_EV_IRQHandler>
}
 8003ce4:	46c0      	nop			@ (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	46c0      	nop			@ (mov r8, r8)
 8003cec:	2000020c 	.word	0x2000020c

08003cf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  return 1;
 8003cf4:	2301      	movs	r3, #1
}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <_kill>:

int _kill(int pid, int sig)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d06:	f005 ff17 	bl	8009b38 <__errno>
 8003d0a:	0003      	movs	r3, r0
 8003d0c:	2216      	movs	r2, #22
 8003d0e:	601a      	str	r2, [r3, #0]
  return -1;
 8003d10:	2301      	movs	r3, #1
 8003d12:	425b      	negs	r3, r3
}
 8003d14:	0018      	movs	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b002      	add	sp, #8
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <_exit>:

void _exit (int status)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d24:	2301      	movs	r3, #1
 8003d26:	425a      	negs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	0011      	movs	r1, r2
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7ff ffe5 	bl	8003cfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d32:	46c0      	nop			@ (mov r8, r8)
 8003d34:	e7fd      	b.n	8003d32 <_exit+0x16>

08003d36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b086      	sub	sp, #24
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	e00a      	b.n	8003d5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d48:	e000      	b.n	8003d4c <_read+0x16>
 8003d4a:	bf00      	nop
 8003d4c:	0001      	movs	r1, r0
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	60ba      	str	r2, [r7, #8]
 8003d54:	b2ca      	uxtb	r2, r1
 8003d56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	dbf0      	blt.n	8003d48 <_read+0x12>
  }

  return len;
 8003d66:	687b      	ldr	r3, [r7, #4]
}
 8003d68:	0018      	movs	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b006      	add	sp, #24
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	425b      	negs	r3, r3
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b002      	add	sp, #8
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2280      	movs	r2, #128	@ 0x80
 8003d92:	0192      	lsls	r2, r2, #6
 8003d94:	605a      	str	r2, [r3, #4]
  return 0;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	0018      	movs	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b002      	add	sp, #8
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <_isatty>:

int _isatty(int file)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003da8:	2301      	movs	r3, #1
}
 8003daa:	0018      	movs	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b002      	add	sp, #8
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b004      	add	sp, #16
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dd0:	4a14      	ldr	r2, [pc, #80]	@ (8003e24 <_sbrk+0x5c>)
 8003dd2:	4b15      	ldr	r3, [pc, #84]	@ (8003e28 <_sbrk+0x60>)
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ddc:	4b13      	ldr	r3, [pc, #76]	@ (8003e2c <_sbrk+0x64>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003de4:	4b11      	ldr	r3, [pc, #68]	@ (8003e2c <_sbrk+0x64>)
 8003de6:	4a12      	ldr	r2, [pc, #72]	@ (8003e30 <_sbrk+0x68>)
 8003de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dea:	4b10      	ldr	r3, [pc, #64]	@ (8003e2c <_sbrk+0x64>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	18d3      	adds	r3, r2, r3
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d207      	bcs.n	8003e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003df8:	f005 fe9e 	bl	8009b38 <__errno>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	220c      	movs	r2, #12
 8003e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	425b      	negs	r3, r3
 8003e06:	e009      	b.n	8003e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e08:	4b08      	ldr	r3, [pc, #32]	@ (8003e2c <_sbrk+0x64>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e0e:	4b07      	ldr	r3, [pc, #28]	@ (8003e2c <_sbrk+0x64>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	18d2      	adds	r2, r2, r3
 8003e16:	4b05      	ldr	r3, [pc, #20]	@ (8003e2c <_sbrk+0x64>)
 8003e18:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
}
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b006      	add	sp, #24
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	20005000 	.word	0x20005000
 8003e28:	00000400 	.word	0x00000400
 8003e2c:	200003dc 	.word	0x200003dc
 8003e30:	20000e60 	.word	0x20000e60

08003e34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e38:	46c0      	nop			@ (mov r8, r8)
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart4;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e44:	4b14      	ldr	r3, [pc, #80]	@ (8003e98 <MX_USART1_UART_Init+0x58>)
 8003e46:	4a15      	ldr	r2, [pc, #84]	@ (8003e9c <MX_USART1_UART_Init+0x5c>)
 8003e48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e4a:	4b13      	ldr	r3, [pc, #76]	@ (8003e98 <MX_USART1_UART_Init+0x58>)
 8003e4c:	22e1      	movs	r2, #225	@ 0xe1
 8003e4e:	0252      	lsls	r2, r2, #9
 8003e50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e52:	4b11      	ldr	r3, [pc, #68]	@ (8003e98 <MX_USART1_UART_Init+0x58>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e58:	4b0f      	ldr	r3, [pc, #60]	@ (8003e98 <MX_USART1_UART_Init+0x58>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e98 <MX_USART1_UART_Init+0x58>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e64:	4b0c      	ldr	r3, [pc, #48]	@ (8003e98 <MX_USART1_UART_Init+0x58>)
 8003e66:	220c      	movs	r2, #12
 8003e68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e98 <MX_USART1_UART_Init+0x58>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e70:	4b09      	ldr	r3, [pc, #36]	@ (8003e98 <MX_USART1_UART_Init+0x58>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e76:	4b08      	ldr	r3, [pc, #32]	@ (8003e98 <MX_USART1_UART_Init+0x58>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e7c:	4b06      	ldr	r3, [pc, #24]	@ (8003e98 <MX_USART1_UART_Init+0x58>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e82:	4b05      	ldr	r3, [pc, #20]	@ (8003e98 <MX_USART1_UART_Init+0x58>)
 8003e84:	0018      	movs	r0, r3
 8003e86:	f004 fa67 	bl	8008358 <HAL_UART_Init>
 8003e8a:	1e03      	subs	r3, r0, #0
 8003e8c:	d001      	beq.n	8003e92 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003e8e:	f7ff fca3 	bl	80037d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e92:	46c0      	nop			@ (mov r8, r8)
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	200003e0 	.word	0x200003e0
 8003e9c:	40013800 	.word	0x40013800

08003ea0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8003ea4:	4b14      	ldr	r3, [pc, #80]	@ (8003ef8 <MX_USART4_UART_Init+0x58>)
 8003ea6:	4a15      	ldr	r2, [pc, #84]	@ (8003efc <MX_USART4_UART_Init+0x5c>)
 8003ea8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8003eaa:	4b13      	ldr	r3, [pc, #76]	@ (8003ef8 <MX_USART4_UART_Init+0x58>)
 8003eac:	22e1      	movs	r2, #225	@ 0xe1
 8003eae:	0252      	lsls	r2, r2, #9
 8003eb0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003eb2:	4b11      	ldr	r3, [pc, #68]	@ (8003ef8 <MX_USART4_UART_Init+0x58>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef8 <MX_USART4_UART_Init+0x58>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef8 <MX_USART4_UART_Init+0x58>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef8 <MX_USART4_UART_Init+0x58>)
 8003ec6:	220c      	movs	r2, #12
 8003ec8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eca:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef8 <MX_USART4_UART_Init+0x58>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ed0:	4b09      	ldr	r3, [pc, #36]	@ (8003ef8 <MX_USART4_UART_Init+0x58>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ed6:	4b08      	ldr	r3, [pc, #32]	@ (8003ef8 <MX_USART4_UART_Init+0x58>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003edc:	4b06      	ldr	r3, [pc, #24]	@ (8003ef8 <MX_USART4_UART_Init+0x58>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003ee2:	4b05      	ldr	r3, [pc, #20]	@ (8003ef8 <MX_USART4_UART_Init+0x58>)
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f004 fa37 	bl	8008358 <HAL_UART_Init>
 8003eea:	1e03      	subs	r3, r0, #0
 8003eec:	d001      	beq.n	8003ef2 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8003eee:	f7ff fc73 	bl	80037d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20000468 	.word	0x20000468
 8003efc:	40004c00 	.word	0x40004c00

08003f00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f00:	b590      	push	{r4, r7, lr}
 8003f02:	b08b      	sub	sp, #44	@ 0x2c
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f08:	2414      	movs	r4, #20
 8003f0a:	193b      	adds	r3, r7, r4
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	2314      	movs	r3, #20
 8003f10:	001a      	movs	r2, r3
 8003f12:	2100      	movs	r1, #0
 8003f14:	f005 fdb6 	bl	8009a84 <memset>
  if(uartHandle->Instance==USART1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a42      	ldr	r2, [pc, #264]	@ (8004028 <HAL_UART_MspInit+0x128>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d12b      	bne.n	8003f7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f22:	4b42      	ldr	r3, [pc, #264]	@ (800402c <HAL_UART_MspInit+0x12c>)
 8003f24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f26:	4b41      	ldr	r3, [pc, #260]	@ (800402c <HAL_UART_MspInit+0x12c>)
 8003f28:	2180      	movs	r1, #128	@ 0x80
 8003f2a:	01c9      	lsls	r1, r1, #7
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f30:	4b3e      	ldr	r3, [pc, #248]	@ (800402c <HAL_UART_MspInit+0x12c>)
 8003f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f34:	4b3d      	ldr	r3, [pc, #244]	@ (800402c <HAL_UART_MspInit+0x12c>)
 8003f36:	2101      	movs	r1, #1
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003f3c:	4b3b      	ldr	r3, [pc, #236]	@ (800402c <HAL_UART_MspInit+0x12c>)
 8003f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f40:	2201      	movs	r2, #1
 8003f42:	4013      	ands	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003f48:	193b      	adds	r3, r7, r4
 8003f4a:	22c0      	movs	r2, #192	@ 0xc0
 8003f4c:	00d2      	lsls	r2, r2, #3
 8003f4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f50:	0021      	movs	r1, r4
 8003f52:	187b      	adds	r3, r7, r1
 8003f54:	2202      	movs	r2, #2
 8003f56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f58:	187b      	adds	r3, r7, r1
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f5e:	187b      	adds	r3, r7, r1
 8003f60:	2203      	movs	r2, #3
 8003f62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003f64:	187b      	adds	r3, r7, r1
 8003f66:	2204      	movs	r2, #4
 8003f68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f6a:	187a      	adds	r2, r7, r1
 8003f6c:	23a0      	movs	r3, #160	@ 0xa0
 8003f6e:	05db      	lsls	r3, r3, #23
 8003f70:	0011      	movs	r1, r2
 8003f72:	0018      	movs	r0, r3
 8003f74:	f000 ffe4 	bl	8004f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8003f78:	e051      	b.n	800401e <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART4)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004030 <HAL_UART_MspInit+0x130>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d14c      	bne.n	800401e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART4_CLK_ENABLE();
 8003f84:	4b29      	ldr	r3, [pc, #164]	@ (800402c <HAL_UART_MspInit+0x12c>)
 8003f86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f88:	4b28      	ldr	r3, [pc, #160]	@ (800402c <HAL_UART_MspInit+0x12c>)
 8003f8a:	2180      	movs	r1, #128	@ 0x80
 8003f8c:	0309      	lsls	r1, r1, #12
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f92:	4b26      	ldr	r3, [pc, #152]	@ (800402c <HAL_UART_MspInit+0x12c>)
 8003f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f96:	4b25      	ldr	r3, [pc, #148]	@ (800402c <HAL_UART_MspInit+0x12c>)
 8003f98:	2101      	movs	r1, #1
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003f9e:	4b23      	ldr	r3, [pc, #140]	@ (800402c <HAL_UART_MspInit+0x12c>)
 8003fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003faa:	4b20      	ldr	r3, [pc, #128]	@ (800402c <HAL_UART_MspInit+0x12c>)
 8003fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fae:	4b1f      	ldr	r3, [pc, #124]	@ (800402c <HAL_UART_MspInit+0x12c>)
 8003fb0:	2104      	movs	r1, #4
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800402c <HAL_UART_MspInit+0x12c>)
 8003fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fba:	2204      	movs	r2, #4
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	60bb      	str	r3, [r7, #8]
 8003fc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003fc2:	2414      	movs	r4, #20
 8003fc4:	193b      	adds	r3, r7, r4
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fca:	193b      	adds	r3, r7, r4
 8003fcc:	2202      	movs	r2, #2
 8003fce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd0:	193b      	adds	r3, r7, r4
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd6:	193b      	adds	r3, r7, r4
 8003fd8:	2203      	movs	r2, #3
 8003fda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8003fdc:	193b      	adds	r3, r7, r4
 8003fde:	2206      	movs	r2, #6
 8003fe0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe2:	193a      	adds	r2, r7, r4
 8003fe4:	23a0      	movs	r3, #160	@ 0xa0
 8003fe6:	05db      	lsls	r3, r3, #23
 8003fe8:	0011      	movs	r1, r2
 8003fea:	0018      	movs	r0, r3
 8003fec:	f000 ffa8 	bl	8004f40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ff0:	0021      	movs	r1, r4
 8003ff2:	187b      	adds	r3, r7, r1
 8003ff4:	2280      	movs	r2, #128	@ 0x80
 8003ff6:	00d2      	lsls	r2, r2, #3
 8003ff8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffa:	187b      	adds	r3, r7, r1
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004000:	187b      	adds	r3, r7, r1
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004006:	187b      	adds	r3, r7, r1
 8004008:	2203      	movs	r2, #3
 800400a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800400c:	187b      	adds	r3, r7, r1
 800400e:	2206      	movs	r2, #6
 8004010:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004012:	187b      	adds	r3, r7, r1
 8004014:	4a07      	ldr	r2, [pc, #28]	@ (8004034 <HAL_UART_MspInit+0x134>)
 8004016:	0019      	movs	r1, r3
 8004018:	0010      	movs	r0, r2
 800401a:	f000 ff91 	bl	8004f40 <HAL_GPIO_Init>
}
 800401e:	46c0      	nop			@ (mov r8, r8)
 8004020:	46bd      	mov	sp, r7
 8004022:	b00b      	add	sp, #44	@ 0x2c
 8004024:	bd90      	pop	{r4, r7, pc}
 8004026:	46c0      	nop			@ (mov r8, r8)
 8004028:	40013800 	.word	0x40013800
 800402c:	40021000 	.word	0x40021000
 8004030:	40004c00 	.word	0x40004c00
 8004034:	50000800 	.word	0x50000800

08004038 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8004040:	f000 fc64 	bl	800490c <HAL_GetTick>
 8004044:	0003      	movs	r3, r0
 8004046:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8004048:	4b1c      	ldr	r3, [pc, #112]	@ (80040bc <TimestampIsReached+0x84>)
 800404a:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	429a      	cmp	r2, r3
 8004052:	d307      	bcc.n	8004064 <TimestampIsReached+0x2c>
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	429a      	cmp	r2, r3
 800405e:	d901      	bls.n	8004064 <TimestampIsReached+0x2c>
 8004060:	2201      	movs	r2, #1
 8004062:	e000      	b.n	8004066 <TimestampIsReached+0x2e>
 8004064:	2200      	movs	r2, #0
 8004066:	230f      	movs	r3, #15
 8004068:	18fb      	adds	r3, r7, r3
 800406a:	701a      	strb	r2, [r3, #0]
 800406c:	781a      	ldrb	r2, [r3, #0]
 800406e:	2101      	movs	r1, #1
 8004070:	400a      	ands	r2, r1
 8004072:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	429a      	cmp	r2, r3
 800407a:	d207      	bcs.n	800408c <TimestampIsReached+0x54>
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	429a      	cmp	r2, r3
 8004086:	d201      	bcs.n	800408c <TimestampIsReached+0x54>
 8004088:	2201      	movs	r2, #1
 800408a:	e000      	b.n	800408e <TimestampIsReached+0x56>
 800408c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800408e:	200e      	movs	r0, #14
 8004090:	183b      	adds	r3, r7, r0
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	781a      	ldrb	r2, [r3, #0]
 8004096:	2101      	movs	r1, #1
 8004098:	400a      	ands	r2, r1
 800409a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800409c:	230f      	movs	r3, #15
 800409e:	18fb      	adds	r3, r7, r3
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d103      	bne.n	80040ae <TimestampIsReached+0x76>
 80040a6:	183b      	adds	r3, r7, r0
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	0018      	movs	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b006      	add	sp, #24
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	7fffffff 	.word	0x7fffffff

080040c0 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 80040c8:	f000 fc20 	bl	800490c <HAL_GetTick>
 80040cc:	0002      	movs	r2, r0
 80040ce:	4904      	ldr	r1, [pc, #16]	@ (80040e0 <AddTimestamp+0x20>)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	0018      	movs	r0, r3
 80040d4:	f005 fc32 	bl	800993c <siprintf>
}
 80040d8:	46c0      	nop			@ (mov r8, r8)
 80040da:	46bd      	mov	sp, r7
 80040dc:	b002      	add	sp, #8
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	0800bf04 	.word	0x0800bf04

080040e4 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 80040e4:	b40c      	push	{r2, r3}
 80040e6:	b5b0      	push	{r4, r5, r7, lr}
 80040e8:	4c2b      	ldr	r4, [pc, #172]	@ (8004198 <CreateLine+0xb4>)
 80040ea:	44a5      	add	sp, r4
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	0002      	movs	r2, r0
 80040f0:	6039      	str	r1, [r7, #0]
 80040f2:	4b2a      	ldr	r3, [pc, #168]	@ (800419c <CreateLine+0xb8>)
 80040f4:	2182      	movs	r1, #130	@ 0x82
 80040f6:	00c9      	lsls	r1, r1, #3
 80040f8:	185b      	adds	r3, r3, r1
 80040fa:	19db      	adds	r3, r3, r7
 80040fc:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 80040fe:	4b28      	ldr	r3, [pc, #160]	@ (80041a0 <CreateLine+0xbc>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	4a26      	ldr	r2, [pc, #152]	@ (800419c <CreateLine+0xb8>)
 8004104:	1852      	adds	r2, r2, r1
 8004106:	19d2      	adds	r2, r2, r7
 8004108:	7812      	ldrb	r2, [r2, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d83b      	bhi.n	8004186 <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	4924      	ldr	r1, [pc, #144]	@ (80041a4 <CreateLine+0xc0>)
 8004112:	240c      	movs	r4, #12
 8004114:	193b      	adds	r3, r7, r4
 8004116:	0018      	movs	r0, r3
 8004118:	f005 fc10 	bl	800993c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800411c:	4b20      	ldr	r3, [pc, #128]	@ (80041a0 <CreateLine+0xbc>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d909      	bls.n	8004138 <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8004124:	193b      	adds	r3, r7, r4
 8004126:	0018      	movs	r0, r3
 8004128:	f7fb ffee 	bl	8000108 <strlen>
 800412c:	0002      	movs	r2, r0
 800412e:	193b      	adds	r3, r7, r4
 8004130:	189b      	adds	r3, r3, r2
 8004132:	0018      	movs	r0, r3
 8004134:	f7ff ffc4 	bl	80040c0 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8004138:	240c      	movs	r4, #12
 800413a:	193b      	adds	r3, r7, r4
 800413c:	0018      	movs	r0, r3
 800413e:	f7fb ffe3 	bl	8000108 <strlen>
 8004142:	0003      	movs	r3, r0
 8004144:	4918      	ldr	r1, [pc, #96]	@ (80041a8 <CreateLine+0xc4>)
 8004146:	187a      	adds	r2, r7, r1
 8004148:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800414a:	4b18      	ldr	r3, [pc, #96]	@ (80041ac <CreateLine+0xc8>)
 800414c:	2508      	movs	r5, #8
 800414e:	195b      	adds	r3, r3, r5
 8004150:	19db      	adds	r3, r3, r7
 8004152:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8004154:	193a      	adds	r2, r7, r4
 8004156:	187b      	adds	r3, r7, r1
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	18d0      	adds	r0, r2, r3
 800415c:	187b      	adds	r3, r7, r1
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2280      	movs	r2, #128	@ 0x80
 8004162:	00d2      	lsls	r2, r2, #3
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	0019      	movs	r1, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2283      	movs	r2, #131	@ 0x83
 800416c:	00d2      	lsls	r2, r2, #3
 800416e:	1952      	adds	r2, r2, r5
 8004170:	19d2      	adds	r2, r2, r7
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	f005 fc7a 	bl	8009a6c <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8004178:	193a      	adds	r2, r7, r4
 800417a:	4b0d      	ldr	r3, [pc, #52]	@ (80041b0 <CreateLine+0xcc>)
 800417c:	0011      	movs	r1, r2
 800417e:	0018      	movs	r0, r3
 8004180:	f005 fbcc 	bl	800991c <iprintf>
 8004184:	e000      	b.n	8004188 <CreateLine+0xa4>
    return;
 8004186:	46c0      	nop			@ (mov r8, r8)
}
 8004188:	46bd      	mov	sp, r7
 800418a:	2382      	movs	r3, #130	@ 0x82
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	449d      	add	sp, r3
 8004190:	bcb0      	pop	{r4, r5, r7}
 8004192:	bc08      	pop	{r3}
 8004194:	b002      	add	sp, #8
 8004196:	4718      	bx	r3
 8004198:	fffffbf0 	.word	0xfffffbf0
 800419c:	fffffbf7 	.word	0xfffffbf7
 80041a0:	2000000c 	.word	0x2000000c
 80041a4:	0800bf10 	.word	0x0800bf10
 80041a8:	0000040c 	.word	0x0000040c
 80041ac:	0000041c 	.word	0x0000041c
 80041b0:	0800bf14 	.word	0x0800bf14

080041b4 <_write>:

int _write(int fd, const void *buf, size_t count) {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	4804      	ldr	r0, [pc, #16]	@ (80041d8 <_write+0x24>)
 80041c8:	2364      	movs	r3, #100	@ 0x64
 80041ca:	f004 f919 	bl	8008400 <HAL_UART_Transmit>
  return count;
 80041ce:	687b      	ldr	r3, [r7, #4]
}
 80041d0:	0018      	movs	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	b004      	add	sp, #16
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	200003e0 	.word	0x200003e0

080041dc <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	0002      	movs	r2, r0
 80041e4:	1dfb      	adds	r3, r7, #7
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	4b03      	ldr	r3, [pc, #12]	@ (80041f8 <SetVerboseLevel+0x1c>)
 80041ea:	1dfa      	adds	r2, r7, #7
 80041ec:	7812      	ldrb	r2, [r2, #0]
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	46c0      	nop			@ (mov r8, r8)
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b002      	add	sp, #8
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	2000000c 	.word	0x2000000c

080041fc <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004200:	f000 fb84 	bl	800490c <HAL_GetTick>
 8004204:	0003      	movs	r3, r0
}
 8004206:	0018      	movs	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6039      	str	r1, [r7, #0]
 8004214:	0011      	movs	r1, r2
 8004216:	1dfb      	adds	r3, r7, #7
 8004218:	1c02      	adds	r2, r0, #0
 800421a:	701a      	strb	r2, [r3, #0]
 800421c:	1dbb      	adds	r3, r7, #6
 800421e:	1c0a      	adds	r2, r1, #0
 8004220:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8004222:	4b08      	ldr	r3, [pc, #32]	@ (8004244 <ReadRegister+0x38>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d008      	beq.n	800423c <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 800422a:	4b06      	ldr	r3, [pc, #24]	@ (8004244 <ReadRegister+0x38>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	1dba      	adds	r2, r7, #6
 8004230:	7814      	ldrb	r4, [r2, #0]
 8004232:	6839      	ldr	r1, [r7, #0]
 8004234:	1dfa      	adds	r2, r7, #7
 8004236:	7810      	ldrb	r0, [r2, #0]
 8004238:	0022      	movs	r2, r4
 800423a:	4798      	blx	r3
	}
}
 800423c:	46c0      	nop			@ (mov r8, r8)
 800423e:	46bd      	mov	sp, r7
 8004240:	b003      	add	sp, #12
 8004242:	bd90      	pop	{r4, r7, pc}
 8004244:	200004f0 	.word	0x200004f0

08004248 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004248:	b590      	push	{r4, r7, lr}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6039      	str	r1, [r7, #0]
 8004250:	0011      	movs	r1, r2
 8004252:	1dfb      	adds	r3, r7, #7
 8004254:	1c02      	adds	r2, r0, #0
 8004256:	701a      	strb	r2, [r3, #0]
 8004258:	1dbb      	adds	r3, r7, #6
 800425a:	1c0a      	adds	r2, r1, #0
 800425c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800425e:	4b08      	ldr	r3, [pc, #32]	@ (8004280 <WriteRegister+0x38>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8004266:	4b06      	ldr	r3, [pc, #24]	@ (8004280 <WriteRegister+0x38>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	1dba      	adds	r2, r7, #6
 800426c:	7814      	ldrb	r4, [r2, #0]
 800426e:	6839      	ldr	r1, [r7, #0]
 8004270:	1dfa      	adds	r2, r7, #7
 8004272:	7810      	ldrb	r0, [r2, #0]
 8004274:	0022      	movs	r2, r4
 8004276:	4798      	blx	r3
  }
}
 8004278:	46c0      	nop			@ (mov r8, r8)
 800427a:	46bd      	mov	sp, r7
 800427c:	b003      	add	sp, #12
 800427e:	bd90      	pop	{r4, r7, pc}
 8004280:	200004f4 	.word	0x200004f4

08004284 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	000a      	movs	r2, r1
 800428e:	1cfb      	adds	r3, r7, #3
 8004290:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8004292:	230f      	movs	r3, #15
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	22ff      	movs	r2, #255	@ 0xff
 8004298:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800429a:	230e      	movs	r3, #14
 800429c:	18fb      	adds	r3, r7, r3
 800429e:	2200      	movs	r2, #0
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	e037      	b.n	8004314 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80042a4:	230e      	movs	r3, #14
 80042a6:	18fb      	adds	r3, r7, r3
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	18d3      	adds	r3, r2, r3
 80042ae:	7819      	ldrb	r1, [r3, #0]
 80042b0:	220f      	movs	r2, #15
 80042b2:	18bb      	adds	r3, r7, r2
 80042b4:	18ba      	adds	r2, r7, r2
 80042b6:	7812      	ldrb	r2, [r2, #0]
 80042b8:	404a      	eors	r2, r1
 80042ba:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80042bc:	230d      	movs	r3, #13
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	2200      	movs	r2, #0
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	e01b      	b.n	80042fe <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 80042c6:	210f      	movs	r1, #15
 80042c8:	187b      	adds	r3, r7, r1
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	b25b      	sxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	da09      	bge.n	80042e6 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 80042d2:	187b      	adds	r3, r7, r1
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	b25b      	sxtb	r3, r3
 80042da:	2231      	movs	r2, #49	@ 0x31
 80042dc:	4053      	eors	r3, r2
 80042de:	b25a      	sxtb	r2, r3
 80042e0:	187b      	adds	r3, r7, r1
 80042e2:	701a      	strb	r2, [r3, #0]
 80042e4:	e005      	b.n	80042f2 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 80042e6:	230f      	movs	r3, #15
 80042e8:	18fa      	adds	r2, r7, r3
 80042ea:	18fb      	adds	r3, r7, r3
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	18db      	adds	r3, r3, r3
 80042f0:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80042f2:	210d      	movs	r1, #13
 80042f4:	187b      	adds	r3, r7, r1
 80042f6:	781a      	ldrb	r2, [r3, #0]
 80042f8:	187b      	adds	r3, r7, r1
 80042fa:	3201      	adds	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	230d      	movs	r3, #13
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b07      	cmp	r3, #7
 8004306:	d9de      	bls.n	80042c6 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8004308:	210e      	movs	r1, #14
 800430a:	187b      	adds	r3, r7, r1
 800430c:	781a      	ldrb	r2, [r3, #0]
 800430e:	187b      	adds	r3, r7, r1
 8004310:	3201      	adds	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	230e      	movs	r3, #14
 8004316:	18fa      	adds	r2, r7, r3
 8004318:	1cfb      	adds	r3, r7, #3
 800431a:	7812      	ldrb	r2, [r2, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d3c0      	bcc.n	80042a4 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8004322:	230f      	movs	r3, #15
 8004324:	18fb      	adds	r3, r7, r3
 8004326:	781b      	ldrb	r3, [r3, #0]
}
 8004328:	0018      	movs	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	b004      	add	sp, #16
 800432e:	bd80      	pop	{r7, pc}

08004330 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800433a:	4b11      	ldr	r3, [pc, #68]	@ (8004380 <HIDS_Init+0x50>)
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8004340:	4b10      	ldr	r3, [pc, #64]	@ (8004384 <HIDS_Init+0x54>)
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	601a      	str	r2, [r3, #0]
	if(!HIDS_DeviceConnected()) {
 8004346:	f000 f8b5 	bl	80044b4 <HIDS_DeviceConnected>
 800434a:	0003      	movs	r3, r0
 800434c:	001a      	movs	r2, r3
 800434e:	2301      	movs	r3, #1
 8004350:	4053      	eors	r3, r2
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d006      	beq.n	8004366 <HIDS_Init+0x36>
		Error("HIDS device not connected!");
 8004358:	4a0b      	ldr	r2, [pc, #44]	@ (8004388 <HIDS_Init+0x58>)
 800435a:	4b0c      	ldr	r3, [pc, #48]	@ (800438c <HIDS_Init+0x5c>)
 800435c:	0019      	movs	r1, r3
 800435e:	2001      	movs	r0, #1
 8004360:	f7ff fec0 	bl	80040e4 <CreateLine>
		return;
 8004364:	e009      	b.n	800437a <HIDS_Init+0x4a>
	}
	HIDS_SetMeasurementMode(MeasureMode);
 8004366:	4b0a      	ldr	r3, [pc, #40]	@ (8004390 <HIDS_Init+0x60>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	0018      	movs	r0, r3
 800436c:	f000 f8e0 	bl	8004530 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8004370:	4b08      	ldr	r3, [pc, #32]	@ (8004394 <HIDS_Init+0x64>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	0018      	movs	r0, r3
 8004376:	f000 f83b 	bl	80043f0 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800437a:	46bd      	mov	sp, r7
 800437c:	b002      	add	sp, #8
 800437e:	bd80      	pop	{r7, pc}
 8004380:	200004f0 	.word	0x200004f0
 8004384:	200004f4 	.word	0x200004f4
 8004388:	0800bf40 	.word	0x0800bf40
 800438c:	0800bf5c 	.word	0x0800bf5c
 8004390:	2000000e 	.word	0x2000000e
 8004394:	2000000d 	.word	0x2000000d

08004398 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  HIDSNextRunTime = GetCurrentHalTicks() + HIDSInterval_ms;
 800439c:	f7ff ff2e 	bl	80041fc <GetCurrentHalTicks>
 80043a0:	0002      	movs	r2, r0
 80043a2:	4b08      	ldr	r3, [pc, #32]	@ (80043c4 <HIDS_StartMeasurement+0x2c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	18d2      	adds	r2, r2, r3
 80043a8:	4b07      	ldr	r3, [pc, #28]	@ (80043c8 <HIDS_StartMeasurement+0x30>)
 80043aa:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 80043ac:	4b07      	ldr	r3, [pc, #28]	@ (80043cc <HIDS_StartMeasurement+0x34>)
 80043ae:	2201      	movs	r2, #1
 80043b0:	0019      	movs	r1, r3
 80043b2:	2044      	movs	r0, #68	@ 0x44
 80043b4:	f7ff ff48 	bl	8004248 <WriteRegister>
  MeasurementDone = false;
 80043b8:	4b05      	ldr	r3, [pc, #20]	@ (80043d0 <HIDS_StartMeasurement+0x38>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	701a      	strb	r2, [r3, #0]
}
 80043be:	46c0      	nop			@ (mov r8, r8)
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	20000014 	.word	0x20000014
 80043c8:	20000010 	.word	0x20000010
 80043cc:	2000000e 	.word	0x2000000e
 80043d0:	20000506 	.word	0x20000506

080043d4 <HIDS_SetMeasurementDuration>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  MeasurementDuration = duration;
 80043dc:	4b03      	ldr	r3, [pc, #12]	@ (80043ec <HIDS_SetMeasurementDuration+0x18>)
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	601a      	str	r2, [r3, #0]
}
 80043e2:	46c0      	nop			@ (mov r8, r8)
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b002      	add	sp, #8
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	46c0      	nop			@ (mov r8, r8)
 80043ec:	20000018 	.word	0x20000018

080043f0 <HIDS_SetHeaterMode>:

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	0002      	movs	r2, r0
 80043f8:	1dfb      	adds	r3, r7, #7
 80043fa:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 80043fc:	4b03      	ldr	r3, [pc, #12]	@ (800440c <HIDS_SetHeaterMode+0x1c>)
 80043fe:	1dfa      	adds	r2, r7, #7
 8004400:	7812      	ldrb	r2, [r2, #0]
 8004402:	701a      	strb	r2, [r3, #0]
}
 8004404:	46c0      	nop			@ (mov r8, r8)
 8004406:	46bd      	mov	sp, r7
 8004408:	b002      	add	sp, #8
 800440a:	bd80      	pop	{r7, pc}
 800440c:	2000000d 	.word	0x2000000d

08004410 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8004410:	b590      	push	{r4, r7, lr}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	781a      	ldrb	r2, [r3, #0]
 800441c:	210c      	movs	r1, #12
 800441e:	187b      	adds	r3, r7, r1
 8004420:	701a      	strb	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	785a      	ldrb	r2, [r3, #1]
 8004426:	187b      	adds	r3, r7, r1
 8004428:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800442a:	240f      	movs	r4, #15
 800442c:	193b      	adds	r3, r7, r4
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	7892      	ldrb	r2, [r2, #2]
 8004432:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8004434:	187b      	adds	r3, r7, r1
 8004436:	2102      	movs	r1, #2
 8004438:	0018      	movs	r0, r3
 800443a:	f7ff ff23 	bl	8004284 <CalculateCRC>
 800443e:	0003      	movs	r3, r0
 8004440:	001a      	movs	r2, r3
 8004442:	193b      	adds	r3, r7, r4
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	4293      	cmp	r3, r2
 8004448:	d007      	beq.n	800445a <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800444a:	4a17      	ldr	r2, [pc, #92]	@ (80044a8 <CheckCRC+0x98>)
 800444c:	4b17      	ldr	r3, [pc, #92]	@ (80044ac <CheckCRC+0x9c>)
 800444e:	0019      	movs	r1, r3
 8004450:	2001      	movs	r0, #1
 8004452:	f7ff fe47 	bl	80040e4 <CreateLine>
		return false;
 8004456:	2300      	movs	r3, #0
 8004458:	e021      	b.n	800449e <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	78da      	ldrb	r2, [r3, #3]
 800445e:	2108      	movs	r1, #8
 8004460:	187b      	adds	r3, r7, r1
 8004462:	701a      	strb	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	791a      	ldrb	r2, [r3, #4]
 8004468:	187b      	adds	r3, r7, r1
 800446a:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800446c:	240e      	movs	r4, #14
 800446e:	193b      	adds	r3, r7, r4
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	7952      	ldrb	r2, [r2, #5]
 8004474:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8004476:	187b      	adds	r3, r7, r1
 8004478:	2102      	movs	r1, #2
 800447a:	0018      	movs	r0, r3
 800447c:	f7ff ff02 	bl	8004284 <CalculateCRC>
 8004480:	0003      	movs	r3, r0
 8004482:	001a      	movs	r2, r3
 8004484:	193b      	adds	r3, r7, r4
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	4293      	cmp	r3, r2
 800448a:	d007      	beq.n	800449c <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 800448c:	4a08      	ldr	r2, [pc, #32]	@ (80044b0 <CheckCRC+0xa0>)
 800448e:	4b07      	ldr	r3, [pc, #28]	@ (80044ac <CheckCRC+0x9c>)
 8004490:	0019      	movs	r1, r3
 8004492:	2001      	movs	r0, #1
 8004494:	f7ff fe26 	bl	80040e4 <CreateLine>
		return false;
 8004498:	2300      	movs	r3, #0
 800449a:	e000      	b.n	800449e <CheckCRC+0x8e>
	}
	return true;
 800449c:	2301      	movs	r3, #1
}
 800449e:	0018      	movs	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b005      	add	sp, #20
 80044a4:	bd90      	pop	{r4, r7, pc}
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	0800bf60 	.word	0x0800bf60
 80044ac:	0800bf5c 	.word	0x0800bf5c
 80044b0:	0800bf88 	.word	0x0800bf88

080044b4 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 80044ba:	1dbb      	adds	r3, r7, #6
 80044bc:	2289      	movs	r2, #137	@ 0x89
 80044be:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 80044c0:	1dbb      	adds	r3, r7, #6
 80044c2:	2201      	movs	r2, #1
 80044c4:	0019      	movs	r1, r3
 80044c6:	2044      	movs	r0, #68	@ 0x44
 80044c8:	f7ff febe 	bl	8004248 <WriteRegister>
	HAL_Delay(30);
 80044cc:	201e      	movs	r0, #30
 80044ce:	f000 fa27 	bl	8004920 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 80044d2:	4b14      	ldr	r3, [pc, #80]	@ (8004524 <HIDS_DeviceConnected+0x70>)
 80044d4:	2206      	movs	r2, #6
 80044d6:	0019      	movs	r1, r3
 80044d8:	2044      	movs	r0, #68	@ 0x44
 80044da:	f7ff fe97 	bl	800420c <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80044de:	1dfb      	adds	r3, r7, #7
 80044e0:	2200      	movs	r2, #0
 80044e2:	701a      	strb	r2, [r3, #0]
 80044e4:	e011      	b.n	800450a <HIDS_DeviceConnected+0x56>
		Info("Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 80044e6:	1dfb      	adds	r3, r7, #7
 80044e8:	7818      	ldrb	r0, [r3, #0]
 80044ea:	1dfb      	adds	r3, r7, #7
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	4a0d      	ldr	r2, [pc, #52]	@ (8004524 <HIDS_DeviceConnected+0x70>)
 80044f0:	5cd3      	ldrb	r3, [r2, r3]
 80044f2:	4a0d      	ldr	r2, [pc, #52]	@ (8004528 <HIDS_DeviceConnected+0x74>)
 80044f4:	490d      	ldr	r1, [pc, #52]	@ (800452c <HIDS_DeviceConnected+0x78>)
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	0003      	movs	r3, r0
 80044fa:	2002      	movs	r0, #2
 80044fc:	f7ff fdf2 	bl	80040e4 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8004500:	1dfb      	adds	r3, r7, #7
 8004502:	781a      	ldrb	r2, [r3, #0]
 8004504:	1dfb      	adds	r3, r7, #7
 8004506:	3201      	adds	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	1dfb      	adds	r3, r7, #7
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b05      	cmp	r3, #5
 8004510:	d9e9      	bls.n	80044e6 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8004512:	4b04      	ldr	r3, [pc, #16]	@ (8004524 <HIDS_DeviceConnected+0x70>)
 8004514:	0018      	movs	r0, r3
 8004516:	f7ff ff7b 	bl	8004410 <CheckCRC>
 800451a:	0003      	movs	r3, r0
}
 800451c:	0018      	movs	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	b002      	add	sp, #8
 8004522:	bd80      	pop	{r7, pc}
 8004524:	200004f8 	.word	0x200004f8
 8004528:	0800bfb4 	.word	0x0800bfb4
 800452c:	0800bf3c 	.word	0x0800bf3c

08004530 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	0002      	movs	r2, r0
 8004538:	1dfb      	adds	r3, r7, #7
 800453a:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 800453c:	4b03      	ldr	r3, [pc, #12]	@ (800454c <HIDS_SetMeasurementMode+0x1c>)
 800453e:	1dfa      	adds	r2, r7, #7
 8004540:	7812      	ldrb	r2, [r2, #0]
 8004542:	701a      	strb	r2, [r3, #0]
}
 8004544:	46c0      	nop			@ (mov r8, r8)
 8004546:	46bd      	mov	sp, r7
 8004548:	b002      	add	sp, #8
 800454a:	bd80      	pop	{r7, pc}
 800454c:	2000000e 	.word	0x2000000e

08004550 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  if(!TimestampIsReached(HIDSNextRunTime)){
 8004554:	4b08      	ldr	r3, [pc, #32]	@ (8004578 <HIDS_MeasurementReady+0x28>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	0018      	movs	r0, r3
 800455a:	f7ff fd6d 	bl	8004038 <TimestampIsReached>
 800455e:	0003      	movs	r3, r0
 8004560:	001a      	movs	r2, r3
 8004562:	2301      	movs	r3, #1
 8004564:	4053      	eors	r3, r2
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HIDS_MeasurementReady+0x20>
    return false;
 800456c:	2300      	movs	r3, #0
 800456e:	e000      	b.n	8004572 <HIDS_MeasurementReady+0x22>
  }
  return true;
 8004570:	2301      	movs	r3, #1
}
 8004572:	0018      	movs	r0, r3
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000010 	.word	0x20000010

0800457c <HIDS_GetMeasurementValues>:
void HIDS_SoftReset(void){
  uint8_t resetReg = HIDS_SOFT_RESET_REG;
  WriteRegister(HIDS_I2C_ADDRESS, &resetReg, 1);
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b08d      	sub	sp, #52	@ 0x34
 8004580:	af02      	add	r7, sp, #8
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  if(MeasurementDone){
 8004586:	4b87      	ldr	r3, [pc, #540]	@ (80047a4 <HIDS_GetMeasurementValues+0x228>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HIDS_GetMeasurementValues+0x16>
    return true;
 800458e:	2301      	movs	r3, #1
 8004590:	e103      	b.n	800479a <HIDS_GetMeasurementValues+0x21e>
  }
  if(!HIDS_MeasurementReady()) return false;
 8004592:	f7ff ffdd 	bl	8004550 <HIDS_MeasurementReady>
 8004596:	0003      	movs	r3, r0
 8004598:	001a      	movs	r2, r3
 800459a:	2301      	movs	r3, #1
 800459c:	4053      	eors	r3, r2
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <HIDS_GetMeasurementValues+0x2c>
 80045a4:	2300      	movs	r3, #0
 80045a6:	e0f8      	b.n	800479a <HIDS_GetMeasurementValues+0x21e>
  uint32_t amountOfMeasurements = MeasurementDuration / HIDSInterval_ms;
 80045a8:	4b7f      	ldr	r3, [pc, #508]	@ (80047a8 <HIDS_GetMeasurementValues+0x22c>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	4b7f      	ldr	r3, [pc, #508]	@ (80047ac <HIDS_GetMeasurementValues+0x230>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	0019      	movs	r1, r3
 80045b2:	0010      	movs	r0, r2
 80045b4:	f7fb fdc4 	bl	8000140 <__udivsi3>
 80045b8:	0003      	movs	r3, r0
 80045ba:	617b      	str	r3, [r7, #20]
  float currentTemperature;
  float currentHumidity;
  static float temperatures[HIDS_MAX_MEASUREMENTS];
  static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 80045bc:	4b7c      	ldr	r3, [pc, #496]	@ (80047b0 <HIDS_GetMeasurementValues+0x234>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	1c58      	adds	r0, r3, #1
 80045c2:	4a7c      	ldr	r2, [pc, #496]	@ (80047b4 <HIDS_GetMeasurementValues+0x238>)
 80045c4:	497c      	ldr	r1, [pc, #496]	@ (80047b8 <HIDS_GetMeasurementValues+0x23c>)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	0003      	movs	r3, r0
 80045cc:	2003      	movs	r0, #3
 80045ce:	f7ff fd89 	bl	80040e4 <CreateLine>
//  Info("=-=-=-=New values incoming.=-=-=-=");
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 80045d2:	4b7a      	ldr	r3, [pc, #488]	@ (80047bc <HIDS_GetMeasurementValues+0x240>)
 80045d4:	2206      	movs	r2, #6
 80045d6:	0019      	movs	r1, r3
 80045d8:	2044      	movs	r0, #68	@ 0x44
 80045da:	f7ff fe17 	bl	800420c <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 80045de:	4b77      	ldr	r3, [pc, #476]	@ (80047bc <HIDS_GetMeasurementValues+0x240>)
 80045e0:	0018      	movs	r0, r3
 80045e2:	f7ff ff15 	bl	8004410 <CheckCRC>
 80045e6:	0003      	movs	r3, r0
 80045e8:	001a      	movs	r2, r3
 80045ea:	2301      	movs	r3, #1
 80045ec:	4053      	eors	r3, r2
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d02a      	beq.n	800464a <HIDS_GetMeasurementValues+0xce>
		Error("GetMeasurementValues CRC check failed.");
 80045f4:	4a72      	ldr	r2, [pc, #456]	@ (80047c0 <HIDS_GetMeasurementValues+0x244>)
 80045f6:	4b73      	ldr	r3, [pc, #460]	@ (80047c4 <HIDS_GetMeasurementValues+0x248>)
 80045f8:	0019      	movs	r1, r3
 80045fa:	2001      	movs	r0, #1
 80045fc:	f7ff fd72 	bl	80040e4 <CreateLine>
		Info("Measure buffer structure:");
 8004600:	4a71      	ldr	r2, [pc, #452]	@ (80047c8 <HIDS_GetMeasurementValues+0x24c>)
 8004602:	4b72      	ldr	r3, [pc, #456]	@ (80047cc <HIDS_GetMeasurementValues+0x250>)
 8004604:	0019      	movs	r1, r3
 8004606:	2002      	movs	r0, #2
 8004608:	f7ff fd6c 	bl	80040e4 <CreateLine>
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800460c:	2327      	movs	r3, #39	@ 0x27
 800460e:	18fb      	adds	r3, r7, r3
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]
 8004614:	e012      	b.n	800463c <HIDS_GetMeasurementValues+0xc0>
			Debug("Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
 8004616:	2427      	movs	r4, #39	@ 0x27
 8004618:	193b      	adds	r3, r7, r4
 800461a:	7818      	ldrb	r0, [r3, #0]
 800461c:	193b      	adds	r3, r7, r4
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	4a66      	ldr	r2, [pc, #408]	@ (80047bc <HIDS_GetMeasurementValues+0x240>)
 8004622:	5cd3      	ldrb	r3, [r2, r3]
 8004624:	4a6a      	ldr	r2, [pc, #424]	@ (80047d0 <HIDS_GetMeasurementValues+0x254>)
 8004626:	4964      	ldr	r1, [pc, #400]	@ (80047b8 <HIDS_GetMeasurementValues+0x23c>)
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	0003      	movs	r3, r0
 800462c:	2003      	movs	r0, #3
 800462e:	f7ff fd59 	bl	80040e4 <CreateLine>
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8004632:	193b      	adds	r3, r7, r4
 8004634:	781a      	ldrb	r2, [r3, #0]
 8004636:	193b      	adds	r3, r7, r4
 8004638:	3201      	adds	r2, #1
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	2327      	movs	r3, #39	@ 0x27
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b05      	cmp	r3, #5
 8004644:	d9e7      	bls.n	8004616 <HIDS_GetMeasurementValues+0x9a>
		}
		return false;
 8004646:	2300      	movs	r3, #0
 8004648:	e0a7      	b.n	800479a <HIDS_GetMeasurementValues+0x21e>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 800464a:	4b5c      	ldr	r3, [pc, #368]	@ (80047bc <HIDS_GetMeasurementValues+0x240>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	22af      	movs	r2, #175	@ 0xaf
 8004652:	4353      	muls	r3, r2
 8004654:	4a59      	ldr	r2, [pc, #356]	@ (80047bc <HIDS_GetMeasurementValues+0x240>)
 8004656:	7852      	ldrb	r2, [r2, #1]
 8004658:	4313      	orrs	r3, r2
 800465a:	0018      	movs	r0, r3
 800465c:	f7fe fb38 	bl	8002cd0 <__aeabi_i2d>
 8004660:	2200      	movs	r2, #0
 8004662:	4b5c      	ldr	r3, [pc, #368]	@ (80047d4 <HIDS_GetMeasurementValues+0x258>)
 8004664:	f7fd f82e 	bl	80016c4 <__aeabi_ddiv>
 8004668:	0002      	movs	r2, r0
 800466a:	000b      	movs	r3, r1
 800466c:	0010      	movs	r0, r2
 800466e:	0019      	movs	r1, r3
 8004670:	f7fe fbc8 	bl	8002e04 <__aeabi_d2f>
 8004674:	1c03      	adds	r3, r0, #0
 8004676:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 8004678:	4957      	ldr	r1, [pc, #348]	@ (80047d8 <HIDS_GetMeasurementValues+0x25c>)
 800467a:	6938      	ldr	r0, [r7, #16]
 800467c:	f7fc fad8 	bl	8000c30 <__aeabi_fsub>
 8004680:	1c03      	adds	r3, r0, #0
 8004682:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8004684:	4b4d      	ldr	r3, [pc, #308]	@ (80047bc <HIDS_GetMeasurementValues+0x240>)
 8004686:	78db      	ldrb	r3, [r3, #3]
 8004688:	021b      	lsls	r3, r3, #8
 800468a:	4a4c      	ldr	r2, [pc, #304]	@ (80047bc <HIDS_GetMeasurementValues+0x240>)
 800468c:	7912      	ldrb	r2, [r2, #4]
 800468e:	431a      	orrs	r2, r3
 8004690:	0013      	movs	r3, r2
 8004692:	015b      	lsls	r3, r3, #5
 8004694:	1a9b      	subs	r3, r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	189b      	adds	r3, r3, r2
 800469a:	0018      	movs	r0, r3
 800469c:	f7fe fb18 	bl	8002cd0 <__aeabi_i2d>
 80046a0:	2200      	movs	r2, #0
 80046a2:	4b4c      	ldr	r3, [pc, #304]	@ (80047d4 <HIDS_GetMeasurementValues+0x258>)
 80046a4:	f7fd f80e 	bl	80016c4 <__aeabi_ddiv>
 80046a8:	0002      	movs	r2, r0
 80046aa:	000b      	movs	r3, r1
 80046ac:	0010      	movs	r0, r2
 80046ae:	0019      	movs	r1, r3
 80046b0:	f7fe fba8 	bl	8002e04 <__aeabi_d2f>
 80046b4:	1c03      	adds	r3, r0, #0
 80046b6:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 80046b8:	4948      	ldr	r1, [pc, #288]	@ (80047dc <HIDS_GetMeasurementValues+0x260>)
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f7fc fab8 	bl	8000c30 <__aeabi_fsub>
 80046c0:	1c03      	adds	r3, r0, #0
 80046c2:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 80046c4:	4b3a      	ldr	r3, [pc, #232]	@ (80047b0 <HIDS_GetMeasurementValues+0x234>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d910      	bls.n	80046f0 <HIDS_GetMeasurementValues+0x174>
	  temperatures[measurements] = currentTemperature;
 80046ce:	4b38      	ldr	r3, [pc, #224]	@ (80047b0 <HIDS_GetMeasurementValues+0x234>)
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b43      	ldr	r3, [pc, #268]	@ (80047e0 <HIDS_GetMeasurementValues+0x264>)
 80046d4:	0092      	lsls	r2, r2, #2
 80046d6:	6939      	ldr	r1, [r7, #16]
 80046d8:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 80046da:	4b35      	ldr	r3, [pc, #212]	@ (80047b0 <HIDS_GetMeasurementValues+0x234>)
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	4b41      	ldr	r3, [pc, #260]	@ (80047e4 <HIDS_GetMeasurementValues+0x268>)
 80046e0:	0092      	lsls	r2, r2, #2
 80046e2:	68f9      	ldr	r1, [r7, #12]
 80046e4:	50d1      	str	r1, [r2, r3]
	  measurements++;
 80046e6:	4b32      	ldr	r3, [pc, #200]	@ (80047b0 <HIDS_GetMeasurementValues+0x234>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	4b30      	ldr	r3, [pc, #192]	@ (80047b0 <HIDS_GetMeasurementValues+0x234>)
 80046ee:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 80046f0:	4b2f      	ldr	r3, [pc, #188]	@ (80047b0 <HIDS_GetMeasurementValues+0x234>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d84c      	bhi.n	8004794 <HIDS_GetMeasurementValues+0x218>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8004702:	2300      	movs	r3, #0
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	e016      	b.n	8004736 <HIDS_GetMeasurementValues+0x1ba>
        sumTemperature += temperatures[i];
 8004708:	4b35      	ldr	r3, [pc, #212]	@ (80047e0 <HIDS_GetMeasurementValues+0x264>)
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	0092      	lsls	r2, r2, #2
 800470e:	58d3      	ldr	r3, [r2, r3]
 8004710:	1c19      	adds	r1, r3, #0
 8004712:	6a38      	ldr	r0, [r7, #32]
 8004714:	f7fb ffe2 	bl	80006dc <__aeabi_fadd>
 8004718:	1c03      	adds	r3, r0, #0
 800471a:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 800471c:	4b31      	ldr	r3, [pc, #196]	@ (80047e4 <HIDS_GetMeasurementValues+0x268>)
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	0092      	lsls	r2, r2, #2
 8004722:	58d3      	ldr	r3, [r2, r3]
 8004724:	1c19      	adds	r1, r3, #0
 8004726:	69f8      	ldr	r0, [r7, #28]
 8004728:	f7fb ffd8 	bl	80006dc <__aeabi_fadd>
 800472c:	1c03      	adds	r3, r0, #0
 800472e:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	3301      	adds	r3, #1
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	4b1e      	ldr	r3, [pc, #120]	@ (80047b0 <HIDS_GetMeasurementValues+0x234>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	429a      	cmp	r2, r3
 800473e:	d3e3      	bcc.n	8004708 <HIDS_GetMeasurementValues+0x18c>
    }

    *temperature = sumTemperature / measurements;
 8004740:	4b1b      	ldr	r3, [pc, #108]	@ (80047b0 <HIDS_GetMeasurementValues+0x234>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	0018      	movs	r0, r3
 8004746:	f7fc fc17 	bl	8000f78 <__aeabi_ui2f>
 800474a:	1c03      	adds	r3, r0, #0
 800474c:	1c19      	adds	r1, r3, #0
 800474e:	6a38      	ldr	r0, [r7, #32]
 8004750:	f7fc f94e 	bl	80009f0 <__aeabi_fdiv>
 8004754:	1c03      	adds	r3, r0, #0
 8004756:	1c1a      	adds	r2, r3, #0
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 800475c:	4b14      	ldr	r3, [pc, #80]	@ (80047b0 <HIDS_GetMeasurementValues+0x234>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	0018      	movs	r0, r3
 8004762:	f7fc fc09 	bl	8000f78 <__aeabi_ui2f>
 8004766:	1c03      	adds	r3, r0, #0
 8004768:	1c19      	adds	r1, r3, #0
 800476a:	69f8      	ldr	r0, [r7, #28]
 800476c:	f7fc f940 	bl	80009f0 <__aeabi_fdiv>
 8004770:	1c03      	adds	r3, r0, #0
 8004772:	1c1a      	adds	r2, r3, #0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	601a      	str	r2, [r3, #0]

    measurements = 0;
 8004778:	4b0d      	ldr	r3, [pc, #52]	@ (80047b0 <HIDS_GetMeasurementValues+0x234>)
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 800477e:	4b09      	ldr	r3, [pc, #36]	@ (80047a4 <HIDS_GetMeasurementValues+0x228>)
 8004780:	2201      	movs	r2, #1
 8004782:	701a      	strb	r2, [r3, #0]
    Debug("HT measurement is done.");
 8004784:	4a18      	ldr	r2, [pc, #96]	@ (80047e8 <HIDS_GetMeasurementValues+0x26c>)
 8004786:	4b0c      	ldr	r3, [pc, #48]	@ (80047b8 <HIDS_GetMeasurementValues+0x23c>)
 8004788:	0019      	movs	r1, r3
 800478a:	2003      	movs	r0, #3
 800478c:	f7ff fcaa 	bl	80040e4 <CreateLine>
    return true;
 8004790:	2301      	movs	r3, #1
 8004792:	e002      	b.n	800479a <HIDS_GetMeasurementValues+0x21e>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 8004794:	f7ff fe00 	bl	8004398 <HIDS_StartMeasurement>
	return false;
 8004798:	2300      	movs	r3, #0
}
 800479a:	0018      	movs	r0, r3
 800479c:	46bd      	mov	sp, r7
 800479e:	b00b      	add	sp, #44	@ 0x2c
 80047a0:	bd90      	pop	{r4, r7, pc}
 80047a2:	46c0      	nop			@ (mov r8, r8)
 80047a4:	20000506 	.word	0x20000506
 80047a8:	20000018 	.word	0x20000018
 80047ac:	20000014 	.word	0x20000014
 80047b0:	20000508 	.word	0x20000508
 80047b4:	0800bfd0 	.word	0x0800bfd0
 80047b8:	0800bffc 	.word	0x0800bffc
 80047bc:	20000500 	.word	0x20000500
 80047c0:	0800c000 	.word	0x0800c000
 80047c4:	0800bf5c 	.word	0x0800bf5c
 80047c8:	0800c028 	.word	0x0800c028
 80047cc:	0800bf3c 	.word	0x0800bf3c
 80047d0:	0800c044 	.word	0x0800c044
 80047d4:	40efffe0 	.word	0x40efffe0
 80047d8:	42340000 	.word	0x42340000
 80047dc:	40c00000 	.word	0x40c00000
 80047e0:	2000050c 	.word	0x2000050c
 80047e4:	2000090c 	.word	0x2000090c
 80047e8:	0800c060 	.word	0x0800c060

080047ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80047ec:	480d      	ldr	r0, [pc, #52]	@ (8004824 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80047ee:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80047f0:	f7ff fb20 	bl	8003e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047f4:	480c      	ldr	r0, [pc, #48]	@ (8004828 <LoopForever+0x6>)
  ldr r1, =_edata
 80047f6:	490d      	ldr	r1, [pc, #52]	@ (800482c <LoopForever+0xa>)
  ldr r2, =_sidata
 80047f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004830 <LoopForever+0xe>)
  movs r3, #0
 80047fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047fc:	e002      	b.n	8004804 <LoopCopyDataInit>

080047fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004802:	3304      	adds	r3, #4

08004804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004808:	d3f9      	bcc.n	80047fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800480a:	4a0a      	ldr	r2, [pc, #40]	@ (8004834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800480c:	4c0a      	ldr	r4, [pc, #40]	@ (8004838 <LoopForever+0x16>)
  movs r3, #0
 800480e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004810:	e001      	b.n	8004816 <LoopFillZerobss>

08004812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004814:	3204      	adds	r2, #4

08004816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004818:	d3fb      	bcc.n	8004812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800481a:	f005 f993 	bl	8009b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800481e:	f7fe ff2f 	bl	8003680 <main>

08004822 <LoopForever>:

LoopForever:
    b LoopForever
 8004822:	e7fe      	b.n	8004822 <LoopForever>
   ldr   r0, =_estack
 8004824:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800482c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004830:	0800c520 	.word	0x0800c520
  ldr r2, =_sbss
 8004834:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8004838:	20000e5c 	.word	0x20000e5c

0800483c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800483c:	e7fe      	b.n	800483c <ADC1_COMP_IRQHandler>
	...

08004840 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004846:	1dfb      	adds	r3, r7, #7
 8004848:	2200      	movs	r2, #0
 800484a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800484c:	4b0b      	ldr	r3, [pc, #44]	@ (800487c <HAL_Init+0x3c>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4b0a      	ldr	r3, [pc, #40]	@ (800487c <HAL_Init+0x3c>)
 8004852:	2140      	movs	r1, #64	@ 0x40
 8004854:	430a      	orrs	r2, r1
 8004856:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004858:	2003      	movs	r0, #3
 800485a:	f000 f811 	bl	8004880 <HAL_InitTick>
 800485e:	1e03      	subs	r3, r0, #0
 8004860:	d003      	beq.n	800486a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004862:	1dfb      	adds	r3, r7, #7
 8004864:	2201      	movs	r2, #1
 8004866:	701a      	strb	r2, [r3, #0]
 8004868:	e001      	b.n	800486e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800486a:	f7ff f9dd 	bl	8003c28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800486e:	1dfb      	adds	r3, r7, #7
 8004870:	781b      	ldrb	r3, [r3, #0]
}
 8004872:	0018      	movs	r0, r3
 8004874:	46bd      	mov	sp, r7
 8004876:	b002      	add	sp, #8
 8004878:	bd80      	pop	{r7, pc}
 800487a:	46c0      	nop			@ (mov r8, r8)
 800487c:	40022000 	.word	0x40022000

08004880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004880:	b590      	push	{r4, r7, lr}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004888:	4b14      	ldr	r3, [pc, #80]	@ (80048dc <HAL_InitTick+0x5c>)
 800488a:	681c      	ldr	r4, [r3, #0]
 800488c:	4b14      	ldr	r3, [pc, #80]	@ (80048e0 <HAL_InitTick+0x60>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	0019      	movs	r1, r3
 8004892:	23fa      	movs	r3, #250	@ 0xfa
 8004894:	0098      	lsls	r0, r3, #2
 8004896:	f7fb fc53 	bl	8000140 <__udivsi3>
 800489a:	0003      	movs	r3, r0
 800489c:	0019      	movs	r1, r3
 800489e:	0020      	movs	r0, r4
 80048a0:	f7fb fc4e 	bl	8000140 <__udivsi3>
 80048a4:	0003      	movs	r3, r0
 80048a6:	0018      	movs	r0, r3
 80048a8:	f000 f92f 	bl	8004b0a <HAL_SYSTICK_Config>
 80048ac:	1e03      	subs	r3, r0, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e00f      	b.n	80048d4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d80b      	bhi.n	80048d2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	2301      	movs	r3, #1
 80048be:	425b      	negs	r3, r3
 80048c0:	2200      	movs	r2, #0
 80048c2:	0018      	movs	r0, r3
 80048c4:	f000 f8fc 	bl	8004ac0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048c8:	4b06      	ldr	r3, [pc, #24]	@ (80048e4 <HAL_InitTick+0x64>)
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
}
 80048d4:	0018      	movs	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b003      	add	sp, #12
 80048da:	bd90      	pop	{r4, r7, pc}
 80048dc:	20000008 	.word	0x20000008
 80048e0:	20000020 	.word	0x20000020
 80048e4:	2000001c 	.word	0x2000001c

080048e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048ec:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <HAL_IncTick+0x1c>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	001a      	movs	r2, r3
 80048f2:	4b05      	ldr	r3, [pc, #20]	@ (8004908 <HAL_IncTick+0x20>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	18d2      	adds	r2, r2, r3
 80048f8:	4b03      	ldr	r3, [pc, #12]	@ (8004908 <HAL_IncTick+0x20>)
 80048fa:	601a      	str	r2, [r3, #0]
}
 80048fc:	46c0      	nop			@ (mov r8, r8)
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	46c0      	nop			@ (mov r8, r8)
 8004904:	20000020 	.word	0x20000020
 8004908:	20000d0c 	.word	0x20000d0c

0800490c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  return uwTick;
 8004910:	4b02      	ldr	r3, [pc, #8]	@ (800491c <HAL_GetTick+0x10>)
 8004912:	681b      	ldr	r3, [r3, #0]
}
 8004914:	0018      	movs	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	46c0      	nop			@ (mov r8, r8)
 800491c:	20000d0c 	.word	0x20000d0c

08004920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004928:	f7ff fff0 	bl	800490c <HAL_GetTick>
 800492c:	0003      	movs	r3, r0
 800492e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	3301      	adds	r3, #1
 8004938:	d005      	beq.n	8004946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800493a:	4b0a      	ldr	r3, [pc, #40]	@ (8004964 <HAL_Delay+0x44>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	001a      	movs	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	189b      	adds	r3, r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004946:	46c0      	nop			@ (mov r8, r8)
 8004948:	f7ff ffe0 	bl	800490c <HAL_GetTick>
 800494c:	0002      	movs	r2, r0
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	429a      	cmp	r2, r3
 8004956:	d8f7      	bhi.n	8004948 <HAL_Delay+0x28>
  {
  }
}
 8004958:	46c0      	nop			@ (mov r8, r8)
 800495a:	46c0      	nop			@ (mov r8, r8)
 800495c:	46bd      	mov	sp, r7
 800495e:	b004      	add	sp, #16
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			@ (mov r8, r8)
 8004964:	20000020 	.word	0x20000020

08004968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	0002      	movs	r2, r0
 8004970:	1dfb      	adds	r3, r7, #7
 8004972:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004974:	1dfb      	adds	r3, r7, #7
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b7f      	cmp	r3, #127	@ 0x7f
 800497a:	d809      	bhi.n	8004990 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800497c:	1dfb      	adds	r3, r7, #7
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	001a      	movs	r2, r3
 8004982:	231f      	movs	r3, #31
 8004984:	401a      	ands	r2, r3
 8004986:	4b04      	ldr	r3, [pc, #16]	@ (8004998 <__NVIC_EnableIRQ+0x30>)
 8004988:	2101      	movs	r1, #1
 800498a:	4091      	lsls	r1, r2
 800498c:	000a      	movs	r2, r1
 800498e:	601a      	str	r2, [r3, #0]
  }
}
 8004990:	46c0      	nop			@ (mov r8, r8)
 8004992:	46bd      	mov	sp, r7
 8004994:	b002      	add	sp, #8
 8004996:	bd80      	pop	{r7, pc}
 8004998:	e000e100 	.word	0xe000e100

0800499c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800499c:	b590      	push	{r4, r7, lr}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	0002      	movs	r2, r0
 80049a4:	6039      	str	r1, [r7, #0]
 80049a6:	1dfb      	adds	r3, r7, #7
 80049a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80049aa:	1dfb      	adds	r3, r7, #7
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80049b0:	d828      	bhi.n	8004a04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004a70 <__NVIC_SetPriority+0xd4>)
 80049b4:	1dfb      	adds	r3, r7, #7
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	b25b      	sxtb	r3, r3
 80049ba:	089b      	lsrs	r3, r3, #2
 80049bc:	33c0      	adds	r3, #192	@ 0xc0
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	589b      	ldr	r3, [r3, r2]
 80049c2:	1dfa      	adds	r2, r7, #7
 80049c4:	7812      	ldrb	r2, [r2, #0]
 80049c6:	0011      	movs	r1, r2
 80049c8:	2203      	movs	r2, #3
 80049ca:	400a      	ands	r2, r1
 80049cc:	00d2      	lsls	r2, r2, #3
 80049ce:	21ff      	movs	r1, #255	@ 0xff
 80049d0:	4091      	lsls	r1, r2
 80049d2:	000a      	movs	r2, r1
 80049d4:	43d2      	mvns	r2, r2
 80049d6:	401a      	ands	r2, r3
 80049d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	019b      	lsls	r3, r3, #6
 80049de:	22ff      	movs	r2, #255	@ 0xff
 80049e0:	401a      	ands	r2, r3
 80049e2:	1dfb      	adds	r3, r7, #7
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	0018      	movs	r0, r3
 80049e8:	2303      	movs	r3, #3
 80049ea:	4003      	ands	r3, r0
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049f0:	481f      	ldr	r0, [pc, #124]	@ (8004a70 <__NVIC_SetPriority+0xd4>)
 80049f2:	1dfb      	adds	r3, r7, #7
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	b25b      	sxtb	r3, r3
 80049f8:	089b      	lsrs	r3, r3, #2
 80049fa:	430a      	orrs	r2, r1
 80049fc:	33c0      	adds	r3, #192	@ 0xc0
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004a02:	e031      	b.n	8004a68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a04:	4a1b      	ldr	r2, [pc, #108]	@ (8004a74 <__NVIC_SetPriority+0xd8>)
 8004a06:	1dfb      	adds	r3, r7, #7
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	0019      	movs	r1, r3
 8004a0c:	230f      	movs	r3, #15
 8004a0e:	400b      	ands	r3, r1
 8004a10:	3b08      	subs	r3, #8
 8004a12:	089b      	lsrs	r3, r3, #2
 8004a14:	3306      	adds	r3, #6
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	18d3      	adds	r3, r2, r3
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	1dfa      	adds	r2, r7, #7
 8004a20:	7812      	ldrb	r2, [r2, #0]
 8004a22:	0011      	movs	r1, r2
 8004a24:	2203      	movs	r2, #3
 8004a26:	400a      	ands	r2, r1
 8004a28:	00d2      	lsls	r2, r2, #3
 8004a2a:	21ff      	movs	r1, #255	@ 0xff
 8004a2c:	4091      	lsls	r1, r2
 8004a2e:	000a      	movs	r2, r1
 8004a30:	43d2      	mvns	r2, r2
 8004a32:	401a      	ands	r2, r3
 8004a34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	019b      	lsls	r3, r3, #6
 8004a3a:	22ff      	movs	r2, #255	@ 0xff
 8004a3c:	401a      	ands	r2, r3
 8004a3e:	1dfb      	adds	r3, r7, #7
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	0018      	movs	r0, r3
 8004a44:	2303      	movs	r3, #3
 8004a46:	4003      	ands	r3, r0
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a4c:	4809      	ldr	r0, [pc, #36]	@ (8004a74 <__NVIC_SetPriority+0xd8>)
 8004a4e:	1dfb      	adds	r3, r7, #7
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	001c      	movs	r4, r3
 8004a54:	230f      	movs	r3, #15
 8004a56:	4023      	ands	r3, r4
 8004a58:	3b08      	subs	r3, #8
 8004a5a:	089b      	lsrs	r3, r3, #2
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	3306      	adds	r3, #6
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	18c3      	adds	r3, r0, r3
 8004a64:	3304      	adds	r3, #4
 8004a66:	601a      	str	r2, [r3, #0]
}
 8004a68:	46c0      	nop			@ (mov r8, r8)
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	b003      	add	sp, #12
 8004a6e:	bd90      	pop	{r4, r7, pc}
 8004a70:	e000e100 	.word	0xe000e100
 8004a74:	e000ed00 	.word	0xe000ed00

08004a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	1e5a      	subs	r2, r3, #1
 8004a84:	2380      	movs	r3, #128	@ 0x80
 8004a86:	045b      	lsls	r3, r3, #17
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d301      	bcc.n	8004a90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e010      	b.n	8004ab2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a90:	4b0a      	ldr	r3, [pc, #40]	@ (8004abc <SysTick_Config+0x44>)
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	3a01      	subs	r2, #1
 8004a96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a98:	2301      	movs	r3, #1
 8004a9a:	425b      	negs	r3, r3
 8004a9c:	2103      	movs	r1, #3
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f7ff ff7c 	bl	800499c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004aa4:	4b05      	ldr	r3, [pc, #20]	@ (8004abc <SysTick_Config+0x44>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aaa:	4b04      	ldr	r3, [pc, #16]	@ (8004abc <SysTick_Config+0x44>)
 8004aac:	2207      	movs	r2, #7
 8004aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	b002      	add	sp, #8
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	46c0      	nop			@ (mov r8, r8)
 8004abc:	e000e010 	.word	0xe000e010

08004ac0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
 8004aca:	210f      	movs	r1, #15
 8004acc:	187b      	adds	r3, r7, r1
 8004ace:	1c02      	adds	r2, r0, #0
 8004ad0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	187b      	adds	r3, r7, r1
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	b25b      	sxtb	r3, r3
 8004ada:	0011      	movs	r1, r2
 8004adc:	0018      	movs	r0, r3
 8004ade:	f7ff ff5d 	bl	800499c <__NVIC_SetPriority>
}
 8004ae2:	46c0      	nop			@ (mov r8, r8)
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	b004      	add	sp, #16
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	0002      	movs	r2, r0
 8004af2:	1dfb      	adds	r3, r7, #7
 8004af4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004af6:	1dfb      	adds	r3, r7, #7
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	b25b      	sxtb	r3, r3
 8004afc:	0018      	movs	r0, r3
 8004afe:	f7ff ff33 	bl	8004968 <__NVIC_EnableIRQ>
}
 8004b02:	46c0      	nop			@ (mov r8, r8)
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b002      	add	sp, #8
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	0018      	movs	r0, r3
 8004b16:	f7ff ffaf 	bl	8004a78 <SysTick_Config>
 8004b1a:	0003      	movs	r3, r0
}
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	b002      	add	sp, #8
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e061      	b.n	8004bfa <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a32      	ldr	r2, [pc, #200]	@ (8004c04 <HAL_DMA_Init+0xe0>)
 8004b3c:	4694      	mov	ip, r2
 8004b3e:	4463      	add	r3, ip
 8004b40:	2114      	movs	r1, #20
 8004b42:	0018      	movs	r0, r3
 8004b44:	f7fb fafc 	bl	8000140 <__udivsi3>
 8004b48:	0003      	movs	r3, r0
 8004b4a:	009a      	lsls	r2, r3, #2
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a2d      	ldr	r2, [pc, #180]	@ (8004c08 <HAL_DMA_Init+0xe4>)
 8004b54:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2225      	movs	r2, #37	@ 0x25
 8004b5a:	2102      	movs	r1, #2
 8004b5c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a28      	ldr	r2, [pc, #160]	@ (8004c0c <HAL_DMA_Init+0xe8>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004b76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	2380      	movs	r3, #128	@ 0x80
 8004baa:	01db      	lsls	r3, r3, #7
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d018      	beq.n	8004be2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004bb0:	4b17      	ldr	r3, [pc, #92]	@ (8004c10 <HAL_DMA_Init+0xec>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb8:	211c      	movs	r1, #28
 8004bba:	400b      	ands	r3, r1
 8004bbc:	210f      	movs	r1, #15
 8004bbe:	4099      	lsls	r1, r3
 8004bc0:	000b      	movs	r3, r1
 8004bc2:	43d9      	mvns	r1, r3
 8004bc4:	4b12      	ldr	r3, [pc, #72]	@ (8004c10 <HAL_DMA_Init+0xec>)
 8004bc6:	400a      	ands	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004bca:	4b11      	ldr	r3, [pc, #68]	@ (8004c10 <HAL_DMA_Init+0xec>)
 8004bcc:	6819      	ldr	r1, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd6:	201c      	movs	r0, #28
 8004bd8:	4003      	ands	r3, r0
 8004bda:	409a      	lsls	r2, r3
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8004c10 <HAL_DMA_Init+0xec>)
 8004bde:	430a      	orrs	r2, r1
 8004be0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2225      	movs	r2, #37	@ 0x25
 8004bec:	2101      	movs	r1, #1
 8004bee:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2224      	movs	r2, #36	@ 0x24
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	b004      	add	sp, #16
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	46c0      	nop			@ (mov r8, r8)
 8004c04:	bffdfff8 	.word	0xbffdfff8
 8004c08:	40020000 	.word	0x40020000
 8004c0c:	ffff800f 	.word	0xffff800f
 8004c10:	400200a8 	.word	0x400200a8

08004c14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c22:	2317      	movs	r3, #23
 8004c24:	18fb      	adds	r3, r7, r3
 8004c26:	2200      	movs	r2, #0
 8004c28:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2224      	movs	r2, #36	@ 0x24
 8004c2e:	5c9b      	ldrb	r3, [r3, r2]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_DMA_Start_IT+0x24>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e04f      	b.n	8004cd8 <HAL_DMA_Start_IT+0xc4>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2224      	movs	r2, #36	@ 0x24
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2225      	movs	r2, #37	@ 0x25
 8004c44:	5c9b      	ldrb	r3, [r3, r2]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d13a      	bne.n	8004cc2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2225      	movs	r2, #37	@ 0x25
 8004c50:	2102      	movs	r1, #2
 8004c52:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2101      	movs	r1, #1
 8004c66:	438a      	bics	r2, r1
 8004c68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	68b9      	ldr	r1, [r7, #8]
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f936 	bl	8004ee2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d008      	beq.n	8004c90 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	210e      	movs	r1, #14
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	e00f      	b.n	8004cb0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2104      	movs	r1, #4
 8004c9c:	438a      	bics	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	210a      	movs	r1, #10
 8004cac:	430a      	orrs	r2, r1
 8004cae:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2101      	movs	r1, #1
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	e007      	b.n	8004cd2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2224      	movs	r2, #36	@ 0x24
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004cca:	2317      	movs	r3, #23
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	2202      	movs	r2, #2
 8004cd0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8004cd2:	2317      	movs	r3, #23
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	781b      	ldrb	r3, [r3, #0]
}
 8004cd8:	0018      	movs	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b006      	add	sp, #24
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce8:	210f      	movs	r1, #15
 8004cea:	187b      	adds	r3, r7, r1
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2225      	movs	r2, #37	@ 0x25
 8004cf4:	5c9b      	ldrb	r3, [r3, r2]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d006      	beq.n	8004d0a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2204      	movs	r2, #4
 8004d00:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004d02:	187b      	adds	r3, r7, r1
 8004d04:	2201      	movs	r2, #1
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e02a      	b.n	8004d60 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	210e      	movs	r1, #14
 8004d16:	438a      	bics	r2, r1
 8004d18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2101      	movs	r1, #1
 8004d26:	438a      	bics	r2, r1
 8004d28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2e:	221c      	movs	r2, #28
 8004d30:	401a      	ands	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	2101      	movs	r1, #1
 8004d38:	4091      	lsls	r1, r2
 8004d3a:	000a      	movs	r2, r1
 8004d3c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2225      	movs	r2, #37	@ 0x25
 8004d42:	2101      	movs	r1, #1
 8004d44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2224      	movs	r2, #36	@ 0x24
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d004      	beq.n	8004d60 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	0010      	movs	r0, r2
 8004d5e:	4798      	blx	r3
    }
  }
  return status;
 8004d60:	230f      	movs	r3, #15
 8004d62:	18fb      	adds	r3, r7, r3
 8004d64:	781b      	ldrb	r3, [r3, #0]
}
 8004d66:	0018      	movs	r0, r3
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	b004      	add	sp, #16
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8a:	221c      	movs	r2, #28
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	2204      	movs	r2, #4
 8004d90:	409a      	lsls	r2, r3
 8004d92:	0013      	movs	r3, r2
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4013      	ands	r3, r2
 8004d98:	d026      	beq.n	8004de8 <HAL_DMA_IRQHandler+0x7a>
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2204      	movs	r2, #4
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d022      	beq.n	8004de8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2220      	movs	r2, #32
 8004daa:	4013      	ands	r3, r2
 8004dac:	d107      	bne.n	8004dbe <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2104      	movs	r1, #4
 8004dba:	438a      	bics	r2, r1
 8004dbc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc2:	221c      	movs	r2, #28
 8004dc4:	401a      	ands	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dca:	2104      	movs	r1, #4
 8004dcc:	4091      	lsls	r1, r2
 8004dce:	000a      	movs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d100      	bne.n	8004ddc <HAL_DMA_IRQHandler+0x6e>
 8004dda:	e071      	b.n	8004ec0 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	0010      	movs	r0, r2
 8004de4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8004de6:	e06b      	b.n	8004ec0 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dec:	221c      	movs	r2, #28
 8004dee:	4013      	ands	r3, r2
 8004df0:	2202      	movs	r2, #2
 8004df2:	409a      	lsls	r2, r3
 8004df4:	0013      	movs	r3, r2
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d02d      	beq.n	8004e58 <HAL_DMA_IRQHandler+0xea>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	4013      	ands	r3, r2
 8004e02:	d029      	beq.n	8004e58 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d10b      	bne.n	8004e28 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	210a      	movs	r1, #10
 8004e1c:	438a      	bics	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2225      	movs	r2, #37	@ 0x25
 8004e24:	2101      	movs	r1, #1
 8004e26:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2c:	221c      	movs	r2, #28
 8004e2e:	401a      	ands	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e34:	2102      	movs	r1, #2
 8004e36:	4091      	lsls	r1, r2
 8004e38:	000a      	movs	r2, r1
 8004e3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2224      	movs	r2, #36	@ 0x24
 8004e40:	2100      	movs	r1, #0
 8004e42:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d039      	beq.n	8004ec0 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	0010      	movs	r0, r2
 8004e54:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004e56:	e033      	b.n	8004ec0 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e5c:	221c      	movs	r2, #28
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2208      	movs	r2, #8
 8004e62:	409a      	lsls	r2, r3
 8004e64:	0013      	movs	r3, r2
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d02a      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0x154>
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	2208      	movs	r2, #8
 8004e70:	4013      	ands	r3, r2
 8004e72:	d026      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	210e      	movs	r1, #14
 8004e80:	438a      	bics	r2, r1
 8004e82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e88:	221c      	movs	r2, #28
 8004e8a:	401a      	ands	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e90:	2101      	movs	r1, #1
 8004e92:	4091      	lsls	r1, r2
 8004e94:	000a      	movs	r2, r1
 8004e96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2225      	movs	r2, #37	@ 0x25
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2224      	movs	r2, #36	@ 0x24
 8004eaa:	2100      	movs	r1, #0
 8004eac:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d005      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	0010      	movs	r0, r2
 8004ebe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004ec0:	46c0      	nop			@ (mov r8, r8)
 8004ec2:	46c0      	nop			@ (mov r8, r8)
}
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b004      	add	sp, #16
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2225      	movs	r2, #37	@ 0x25
 8004ed6:	5c9b      	ldrb	r3, [r3, r2]
 8004ed8:	b2db      	uxtb	r3, r3
}
 8004eda:	0018      	movs	r0, r3
 8004edc:	46bd      	mov	sp, r7
 8004ede:	b002      	add	sp, #8
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	60f8      	str	r0, [r7, #12]
 8004eea:	60b9      	str	r1, [r7, #8]
 8004eec:	607a      	str	r2, [r7, #4]
 8004eee:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef4:	221c      	movs	r2, #28
 8004ef6:	401a      	ands	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efc:	2101      	movs	r1, #1
 8004efe:	4091      	lsls	r1, r2
 8004f00:	000a      	movs	r2, r1
 8004f02:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	683a      	ldr	r2, [r7, #0]
 8004f0a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d108      	bne.n	8004f26 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f24:	e007      	b.n	8004f36 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	60da      	str	r2, [r3, #12]
}
 8004f36:	46c0      	nop			@ (mov r8, r8)
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b004      	add	sp, #16
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004f56:	e155      	b.n	8005204 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4091      	lsls	r1, r2
 8004f62:	000a      	movs	r2, r1
 8004f64:	4013      	ands	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d100      	bne.n	8004f70 <HAL_GPIO_Init+0x30>
 8004f6e:	e146      	b.n	80051fe <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2203      	movs	r2, #3
 8004f76:	4013      	ands	r3, r2
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d005      	beq.n	8004f88 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2203      	movs	r2, #3
 8004f82:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d130      	bne.n	8004fea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	2203      	movs	r2, #3
 8004f94:	409a      	lsls	r2, r3
 8004f96:	0013      	movs	r3, r2
 8004f98:	43da      	mvns	r2, r3
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	409a      	lsls	r2, r3
 8004faa:	0013      	movs	r3, r2
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	409a      	lsls	r2, r3
 8004fc4:	0013      	movs	r3, r2
 8004fc6:	43da      	mvns	r2, r3
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	091b      	lsrs	r3, r3, #4
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	401a      	ands	r2, r3
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	409a      	lsls	r2, r3
 8004fdc:	0013      	movs	r3, r2
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2203      	movs	r2, #3
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d017      	beq.n	8005026 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	2203      	movs	r2, #3
 8005002:	409a      	lsls	r2, r3
 8005004:	0013      	movs	r3, r2
 8005006:	43da      	mvns	r2, r3
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	4013      	ands	r3, r2
 800500c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	409a      	lsls	r2, r3
 8005018:	0013      	movs	r3, r2
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2203      	movs	r2, #3
 800502c:	4013      	ands	r3, r2
 800502e:	2b02      	cmp	r3, #2
 8005030:	d123      	bne.n	800507a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	08da      	lsrs	r2, r3, #3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3208      	adds	r2, #8
 800503a:	0092      	lsls	r2, r2, #2
 800503c:	58d3      	ldr	r3, [r2, r3]
 800503e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2207      	movs	r2, #7
 8005044:	4013      	ands	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	220f      	movs	r2, #15
 800504a:	409a      	lsls	r2, r3
 800504c:	0013      	movs	r3, r2
 800504e:	43da      	mvns	r2, r3
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4013      	ands	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2107      	movs	r1, #7
 800505e:	400b      	ands	r3, r1
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	409a      	lsls	r2, r3
 8005064:	0013      	movs	r3, r2
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	08da      	lsrs	r2, r3, #3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3208      	adds	r2, #8
 8005074:	0092      	lsls	r2, r2, #2
 8005076:	6939      	ldr	r1, [r7, #16]
 8005078:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	2203      	movs	r2, #3
 8005086:	409a      	lsls	r2, r3
 8005088:	0013      	movs	r3, r2
 800508a:	43da      	mvns	r2, r3
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	4013      	ands	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2203      	movs	r2, #3
 8005098:	401a      	ands	r2, r3
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	409a      	lsls	r2, r3
 80050a0:	0013      	movs	r3, r2
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	23c0      	movs	r3, #192	@ 0xc0
 80050b4:	029b      	lsls	r3, r3, #10
 80050b6:	4013      	ands	r3, r2
 80050b8:	d100      	bne.n	80050bc <HAL_GPIO_Init+0x17c>
 80050ba:	e0a0      	b.n	80051fe <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050bc:	4b57      	ldr	r3, [pc, #348]	@ (800521c <HAL_GPIO_Init+0x2dc>)
 80050be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050c0:	4b56      	ldr	r3, [pc, #344]	@ (800521c <HAL_GPIO_Init+0x2dc>)
 80050c2:	2101      	movs	r1, #1
 80050c4:	430a      	orrs	r2, r1
 80050c6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80050c8:	4a55      	ldr	r2, [pc, #340]	@ (8005220 <HAL_GPIO_Init+0x2e0>)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	089b      	lsrs	r3, r3, #2
 80050ce:	3302      	adds	r3, #2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	589b      	ldr	r3, [r3, r2]
 80050d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2203      	movs	r2, #3
 80050da:	4013      	ands	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	220f      	movs	r2, #15
 80050e0:	409a      	lsls	r2, r3
 80050e2:	0013      	movs	r3, r2
 80050e4:	43da      	mvns	r2, r3
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	4013      	ands	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	23a0      	movs	r3, #160	@ 0xa0
 80050f0:	05db      	lsls	r3, r3, #23
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d01f      	beq.n	8005136 <HAL_GPIO_Init+0x1f6>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a4a      	ldr	r2, [pc, #296]	@ (8005224 <HAL_GPIO_Init+0x2e4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d019      	beq.n	8005132 <HAL_GPIO_Init+0x1f2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a49      	ldr	r2, [pc, #292]	@ (8005228 <HAL_GPIO_Init+0x2e8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <HAL_GPIO_Init+0x1ee>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a48      	ldr	r2, [pc, #288]	@ (800522c <HAL_GPIO_Init+0x2ec>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00d      	beq.n	800512a <HAL_GPIO_Init+0x1ea>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a47      	ldr	r2, [pc, #284]	@ (8005230 <HAL_GPIO_Init+0x2f0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d007      	beq.n	8005126 <HAL_GPIO_Init+0x1e6>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a46      	ldr	r2, [pc, #280]	@ (8005234 <HAL_GPIO_Init+0x2f4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d101      	bne.n	8005122 <HAL_GPIO_Init+0x1e2>
 800511e:	2305      	movs	r3, #5
 8005120:	e00a      	b.n	8005138 <HAL_GPIO_Init+0x1f8>
 8005122:	2306      	movs	r3, #6
 8005124:	e008      	b.n	8005138 <HAL_GPIO_Init+0x1f8>
 8005126:	2304      	movs	r3, #4
 8005128:	e006      	b.n	8005138 <HAL_GPIO_Init+0x1f8>
 800512a:	2303      	movs	r3, #3
 800512c:	e004      	b.n	8005138 <HAL_GPIO_Init+0x1f8>
 800512e:	2302      	movs	r3, #2
 8005130:	e002      	b.n	8005138 <HAL_GPIO_Init+0x1f8>
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <HAL_GPIO_Init+0x1f8>
 8005136:	2300      	movs	r3, #0
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	2103      	movs	r1, #3
 800513c:	400a      	ands	r2, r1
 800513e:	0092      	lsls	r2, r2, #2
 8005140:	4093      	lsls	r3, r2
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005148:	4935      	ldr	r1, [pc, #212]	@ (8005220 <HAL_GPIO_Init+0x2e0>)
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	089b      	lsrs	r3, r3, #2
 800514e:	3302      	adds	r3, #2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005156:	4b38      	ldr	r3, [pc, #224]	@ (8005238 <HAL_GPIO_Init+0x2f8>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	43da      	mvns	r2, r3
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	4013      	ands	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	2380      	movs	r3, #128	@ 0x80
 800516c:	035b      	lsls	r3, r3, #13
 800516e:	4013      	ands	r3, r2
 8005170:	d003      	beq.n	800517a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800517a:	4b2f      	ldr	r3, [pc, #188]	@ (8005238 <HAL_GPIO_Init+0x2f8>)
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005180:	4b2d      	ldr	r3, [pc, #180]	@ (8005238 <HAL_GPIO_Init+0x2f8>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	43da      	mvns	r2, r3
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	4013      	ands	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	2380      	movs	r3, #128	@ 0x80
 8005196:	039b      	lsls	r3, r3, #14
 8005198:	4013      	ands	r3, r2
 800519a:	d003      	beq.n	80051a4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80051a4:	4b24      	ldr	r3, [pc, #144]	@ (8005238 <HAL_GPIO_Init+0x2f8>)
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80051aa:	4b23      	ldr	r3, [pc, #140]	@ (8005238 <HAL_GPIO_Init+0x2f8>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	43da      	mvns	r2, r3
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4013      	ands	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	2380      	movs	r3, #128	@ 0x80
 80051c0:	029b      	lsls	r3, r3, #10
 80051c2:	4013      	ands	r3, r2
 80051c4:	d003      	beq.n	80051ce <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80051ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005238 <HAL_GPIO_Init+0x2f8>)
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051d4:	4b18      	ldr	r3, [pc, #96]	@ (8005238 <HAL_GPIO_Init+0x2f8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	43da      	mvns	r2, r3
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	4013      	ands	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	2380      	movs	r3, #128	@ 0x80
 80051ea:	025b      	lsls	r3, r3, #9
 80051ec:	4013      	ands	r3, r2
 80051ee:	d003      	beq.n	80051f8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80051f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005238 <HAL_GPIO_Init+0x2f8>)
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	3301      	adds	r3, #1
 8005202:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	40da      	lsrs	r2, r3
 800520c:	1e13      	subs	r3, r2, #0
 800520e:	d000      	beq.n	8005212 <HAL_GPIO_Init+0x2d2>
 8005210:	e6a2      	b.n	8004f58 <HAL_GPIO_Init+0x18>
  }
}
 8005212:	46c0      	nop			@ (mov r8, r8)
 8005214:	46c0      	nop			@ (mov r8, r8)
 8005216:	46bd      	mov	sp, r7
 8005218:	b006      	add	sp, #24
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40021000 	.word	0x40021000
 8005220:	40010000 	.word	0x40010000
 8005224:	50000400 	.word	0x50000400
 8005228:	50000800 	.word	0x50000800
 800522c:	50000c00 	.word	0x50000c00
 8005230:	50001000 	.word	0x50001000
 8005234:	50001c00 	.word	0x50001c00
 8005238:	40010400 	.word	0x40010400

0800523c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	0008      	movs	r0, r1
 8005246:	0011      	movs	r1, r2
 8005248:	1cbb      	adds	r3, r7, #2
 800524a:	1c02      	adds	r2, r0, #0
 800524c:	801a      	strh	r2, [r3, #0]
 800524e:	1c7b      	adds	r3, r7, #1
 8005250:	1c0a      	adds	r2, r1, #0
 8005252:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005254:	1c7b      	adds	r3, r7, #1
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d004      	beq.n	8005266 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800525c:	1cbb      	adds	r3, r7, #2
 800525e:	881a      	ldrh	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005264:	e003      	b.n	800526e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005266:	1cbb      	adds	r3, r7, #2
 8005268:	881a      	ldrh	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800526e:	46c0      	nop			@ (mov r8, r8)
 8005270:	46bd      	mov	sp, r7
 8005272:	b002      	add	sp, #8
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
 800527e:	000a      	movs	r2, r1
 8005280:	1cbb      	adds	r3, r7, #2
 8005282:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800528a:	1cbb      	adds	r3, r7, #2
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4013      	ands	r3, r2
 8005292:	041a      	lsls	r2, r3, #16
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	43db      	mvns	r3, r3
 8005298:	1cb9      	adds	r1, r7, #2
 800529a:	8809      	ldrh	r1, [r1, #0]
 800529c:	400b      	ands	r3, r1
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	619a      	str	r2, [r3, #24]
}
 80052a4:	46c0      	nop			@ (mov r8, r8)
 80052a6:	46bd      	mov	sp, r7
 80052a8:	b004      	add	sp, #16
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e082      	b.n	80053c4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2241      	movs	r2, #65	@ 0x41
 80052c2:	5c9b      	ldrb	r3, [r3, r2]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d107      	bne.n	80052da <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2240      	movs	r2, #64	@ 0x40
 80052ce:	2100      	movs	r1, #0
 80052d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	0018      	movs	r0, r3
 80052d6:	f7fe f88f 	bl	80033f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2241      	movs	r2, #65	@ 0x41
 80052de:	2124      	movs	r1, #36	@ 0x24
 80052e0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2101      	movs	r1, #1
 80052ee:	438a      	bics	r2, r1
 80052f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4934      	ldr	r1, [pc, #208]	@ (80053cc <HAL_I2C_Init+0x120>)
 80052fc:	400a      	ands	r2, r1
 80052fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4931      	ldr	r1, [pc, #196]	@ (80053d0 <HAL_I2C_Init+0x124>)
 800530c:	400a      	ands	r2, r1
 800530e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d108      	bne.n	800532a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2180      	movs	r1, #128	@ 0x80
 8005322:	0209      	lsls	r1, r1, #8
 8005324:	430a      	orrs	r2, r1
 8005326:	609a      	str	r2, [r3, #8]
 8005328:	e007      	b.n	800533a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689a      	ldr	r2, [r3, #8]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2184      	movs	r1, #132	@ 0x84
 8005334:	0209      	lsls	r1, r1, #8
 8005336:	430a      	orrs	r2, r1
 8005338:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	2b02      	cmp	r3, #2
 8005340:	d104      	bne.n	800534c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2280      	movs	r2, #128	@ 0x80
 8005348:	0112      	lsls	r2, r2, #4
 800534a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	491f      	ldr	r1, [pc, #124]	@ (80053d4 <HAL_I2C_Init+0x128>)
 8005358:	430a      	orrs	r2, r1
 800535a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	491a      	ldr	r1, [pc, #104]	@ (80053d0 <HAL_I2C_Init+0x124>)
 8005368:	400a      	ands	r2, r1
 800536a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691a      	ldr	r2, [r3, #16]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	431a      	orrs	r2, r3
 8005376:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69d9      	ldr	r1, [r3, #28]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a1a      	ldr	r2, [r3, #32]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2101      	movs	r1, #1
 80053a2:	430a      	orrs	r2, r1
 80053a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2241      	movs	r2, #65	@ 0x41
 80053b0:	2120      	movs	r1, #32
 80053b2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2242      	movs	r2, #66	@ 0x42
 80053be:	2100      	movs	r1, #0
 80053c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	0018      	movs	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	b002      	add	sp, #8
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	f0ffffff 	.word	0xf0ffffff
 80053d0:	ffff7fff 	.word	0xffff7fff
 80053d4:	02008000 	.word	0x02008000

080053d8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80053d8:	b5b0      	push	{r4, r5, r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af02      	add	r7, sp, #8
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	0008      	movs	r0, r1
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	0019      	movs	r1, r3
 80053e6:	230a      	movs	r3, #10
 80053e8:	18fb      	adds	r3, r7, r3
 80053ea:	1c02      	adds	r2, r0, #0
 80053ec:	801a      	strh	r2, [r3, #0]
 80053ee:	2308      	movs	r3, #8
 80053f0:	18fb      	adds	r3, r7, r3
 80053f2:	1c0a      	adds	r2, r1, #0
 80053f4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2241      	movs	r2, #65	@ 0x41
 80053fa:	5c9b      	ldrb	r3, [r3, r2]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b20      	cmp	r3, #32
 8005400:	d000      	beq.n	8005404 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8005402:	e0dd      	b.n	80055c0 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	2380      	movs	r3, #128	@ 0x80
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	401a      	ands	r2, r3
 8005410:	2380      	movs	r3, #128	@ 0x80
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	429a      	cmp	r2, r3
 8005416:	d101      	bne.n	800541c <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8005418:	2302      	movs	r3, #2
 800541a:	e0d2      	b.n	80055c2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2240      	movs	r2, #64	@ 0x40
 8005420:	5c9b      	ldrb	r3, [r3, r2]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_I2C_Master_Transmit_DMA+0x52>
 8005426:	2302      	movs	r3, #2
 8005428:	e0cb      	b.n	80055c2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2240      	movs	r2, #64	@ 0x40
 800542e:	2101      	movs	r1, #1
 8005430:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2241      	movs	r2, #65	@ 0x41
 8005436:	2121      	movs	r1, #33	@ 0x21
 8005438:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2242      	movs	r2, #66	@ 0x42
 800543e:	2110      	movs	r1, #16
 8005440:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2208      	movs	r2, #8
 8005452:	18ba      	adds	r2, r7, r2
 8005454:	8812      	ldrh	r2, [r2, #0]
 8005456:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4a5c      	ldr	r2, [pc, #368]	@ (80055cc <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800545c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4a5b      	ldr	r2, [pc, #364]	@ (80055d0 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8005462:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005468:	b29b      	uxth	r3, r3
 800546a:	2bff      	cmp	r3, #255	@ 0xff
 800546c:	d906      	bls.n	800547c <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	22ff      	movs	r2, #255	@ 0xff
 8005472:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005474:	2380      	movs	r3, #128	@ 0x80
 8005476:	045b      	lsls	r3, r3, #17
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	e007      	b.n	800548c <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005486:	2380      	movs	r3, #128	@ 0x80
 8005488:	049b      	lsls	r3, r3, #18
 800548a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005490:	2b00      	cmp	r3, #0
 8005492:	d100      	bne.n	8005496 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8005494:	e078      	b.n	8005588 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549a:	2b00      	cmp	r3, #0
 800549c:	d023      	beq.n	80054e6 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a2:	4a4c      	ldr	r2, [pc, #304]	@ (80055d4 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 80054a4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054aa:	4a4b      	ldr	r2, [pc, #300]	@ (80055d8 <HAL_I2C_Master_Transmit_DMA+0x200>)
 80054ac:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b2:	2200      	movs	r2, #0
 80054b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ba:	2200      	movs	r2, #0
 80054bc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3328      	adds	r3, #40	@ 0x28
 80054ca:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80054d0:	2513      	movs	r5, #19
 80054d2:	197c      	adds	r4, r7, r5
 80054d4:	f7ff fb9e 	bl	8004c14 <HAL_DMA_Start_IT>
 80054d8:	0003      	movs	r3, r0
 80054da:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80054dc:	197b      	adds	r3, r7, r5
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d13d      	bne.n	8005560 <HAL_I2C_Master_Transmit_DMA+0x188>
 80054e4:	e013      	b.n	800550e <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2241      	movs	r2, #65	@ 0x41
 80054ea:	2120      	movs	r1, #32
 80054ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2242      	movs	r2, #66	@ 0x42
 80054f2:	2100      	movs	r1, #0
 80054f4:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fa:	2280      	movs	r2, #128	@ 0x80
 80054fc:	431a      	orrs	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2240      	movs	r2, #64	@ 0x40
 8005506:	2100      	movs	r1, #0
 8005508:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e059      	b.n	80055c2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005512:	b2da      	uxtb	r2, r3
 8005514:	697c      	ldr	r4, [r7, #20]
 8005516:	230a      	movs	r3, #10
 8005518:	18fb      	adds	r3, r7, r3
 800551a:	8819      	ldrh	r1, [r3, #0]
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	4b2f      	ldr	r3, [pc, #188]	@ (80055dc <HAL_I2C_Master_Transmit_DMA+0x204>)
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	0023      	movs	r3, r4
 8005524:	f001 fd0e 	bl	8006f44 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2240      	movs	r2, #64	@ 0x40
 800553e:	2100      	movs	r1, #0
 8005540:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2110      	movs	r1, #16
 8005546:	0018      	movs	r0, r3
 8005548:	f001 fd36 	bl	8006fb8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2180      	movs	r1, #128	@ 0x80
 8005558:	01c9      	lsls	r1, r1, #7
 800555a:	430a      	orrs	r2, r1
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e02d      	b.n	80055bc <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2241      	movs	r2, #65	@ 0x41
 8005564:	2120      	movs	r1, #32
 8005566:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2242      	movs	r2, #66	@ 0x42
 800556c:	2100      	movs	r1, #0
 800556e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005574:	2210      	movs	r2, #16
 8005576:	431a      	orrs	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2240      	movs	r2, #64	@ 0x40
 8005580:	2100      	movs	r1, #0
 8005582:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e01c      	b.n	80055c2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4a15      	ldr	r2, [pc, #84]	@ (80055e0 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800558c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005592:	b2da      	uxtb	r2, r3
 8005594:	2380      	movs	r3, #128	@ 0x80
 8005596:	049c      	lsls	r4, r3, #18
 8005598:	230a      	movs	r3, #10
 800559a:	18fb      	adds	r3, r7, r3
 800559c:	8819      	ldrh	r1, [r3, #0]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	4b0e      	ldr	r3, [pc, #56]	@ (80055dc <HAL_I2C_Master_Transmit_DMA+0x204>)
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	0023      	movs	r3, r4
 80055a6:	f001 fccd 	bl	8006f44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2240      	movs	r2, #64	@ 0x40
 80055ae:	2100      	movs	r1, #0
 80055b0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2101      	movs	r1, #1
 80055b6:	0018      	movs	r0, r3
 80055b8:	f001 fcfe 	bl	8006fb8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80055bc:	2300      	movs	r3, #0
 80055be:	e000      	b.n	80055c2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80055c0:	2302      	movs	r3, #2
  }
}
 80055c2:	0018      	movs	r0, r3
 80055c4:	46bd      	mov	sp, r7
 80055c6:	b006      	add	sp, #24
 80055c8:	bdb0      	pop	{r4, r5, r7, pc}
 80055ca:	46c0      	nop			@ (mov r8, r8)
 80055cc:	ffff0000 	.word	0xffff0000
 80055d0:	08005ddd 	.word	0x08005ddd
 80055d4:	08006d95 	.word	0x08006d95
 80055d8:	08006ed5 	.word	0x08006ed5
 80055dc:	80002000 	.word	0x80002000
 80055e0:	08005989 	.word	0x08005989

080055e4 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80055e4:	b5b0      	push	{r4, r5, r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	0008      	movs	r0, r1
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	0019      	movs	r1, r3
 80055f2:	230a      	movs	r3, #10
 80055f4:	18fb      	adds	r3, r7, r3
 80055f6:	1c02      	adds	r2, r0, #0
 80055f8:	801a      	strh	r2, [r3, #0]
 80055fa:	2308      	movs	r3, #8
 80055fc:	18fb      	adds	r3, r7, r3
 80055fe:	1c0a      	adds	r2, r1, #0
 8005600:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2241      	movs	r2, #65	@ 0x41
 8005606:	5c9b      	ldrb	r3, [r3, r2]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b20      	cmp	r3, #32
 800560c:	d000      	beq.n	8005610 <HAL_I2C_Master_Receive_DMA+0x2c>
 800560e:	e0dd      	b.n	80057cc <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	2380      	movs	r3, #128	@ 0x80
 8005618:	021b      	lsls	r3, r3, #8
 800561a:	401a      	ands	r2, r3
 800561c:	2380      	movs	r3, #128	@ 0x80
 800561e:	021b      	lsls	r3, r3, #8
 8005620:	429a      	cmp	r2, r3
 8005622:	d101      	bne.n	8005628 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8005624:	2302      	movs	r3, #2
 8005626:	e0d2      	b.n	80057ce <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2240      	movs	r2, #64	@ 0x40
 800562c:	5c9b      	ldrb	r3, [r3, r2]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_I2C_Master_Receive_DMA+0x52>
 8005632:	2302      	movs	r3, #2
 8005634:	e0cb      	b.n	80057ce <HAL_I2C_Master_Receive_DMA+0x1ea>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2240      	movs	r2, #64	@ 0x40
 800563a:	2101      	movs	r1, #1
 800563c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2241      	movs	r2, #65	@ 0x41
 8005642:	2122      	movs	r1, #34	@ 0x22
 8005644:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2242      	movs	r2, #66	@ 0x42
 800564a:	2110      	movs	r1, #16
 800564c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2208      	movs	r2, #8
 800565e:	18ba      	adds	r2, r7, r2
 8005660:	8812      	ldrh	r2, [r2, #0]
 8005662:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4a5c      	ldr	r2, [pc, #368]	@ (80057d8 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8005668:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4a5b      	ldr	r2, [pc, #364]	@ (80057dc <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800566e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005674:	b29b      	uxth	r3, r3
 8005676:	2bff      	cmp	r3, #255	@ 0xff
 8005678:	d906      	bls.n	8005688 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	22ff      	movs	r2, #255	@ 0xff
 800567e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005680:	2380      	movs	r3, #128	@ 0x80
 8005682:	045b      	lsls	r3, r3, #17
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	e007      	b.n	8005698 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800568c:	b29a      	uxth	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005692:	2380      	movs	r3, #128	@ 0x80
 8005694:	049b      	lsls	r3, r3, #18
 8005696:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800569c:	2b00      	cmp	r3, #0
 800569e:	d100      	bne.n	80056a2 <HAL_I2C_Master_Receive_DMA+0xbe>
 80056a0:	e078      	b.n	8005794 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d023      	beq.n	80056f2 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ae:	4a4c      	ldr	r2, [pc, #304]	@ (80057e0 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80056b0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b6:	4a4b      	ldr	r2, [pc, #300]	@ (80057e4 <HAL_I2C_Master_Receive_DMA+0x200>)
 80056b8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056be:	2200      	movs	r2, #0
 80056c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c6:	2200      	movs	r2, #0
 80056c8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3324      	adds	r3, #36	@ 0x24
 80056d4:	0019      	movs	r1, r3
 80056d6:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80056dc:	2513      	movs	r5, #19
 80056de:	197c      	adds	r4, r7, r5
 80056e0:	f7ff fa98 	bl	8004c14 <HAL_DMA_Start_IT>
 80056e4:	0003      	movs	r3, r0
 80056e6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80056e8:	197b      	adds	r3, r7, r5
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d13d      	bne.n	800576c <HAL_I2C_Master_Receive_DMA+0x188>
 80056f0:	e013      	b.n	800571a <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2241      	movs	r2, #65	@ 0x41
 80056f6:	2120      	movs	r1, #32
 80056f8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2242      	movs	r2, #66	@ 0x42
 80056fe:	2100      	movs	r1, #0
 8005700:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005706:	2280      	movs	r2, #128	@ 0x80
 8005708:	431a      	orrs	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2240      	movs	r2, #64	@ 0x40
 8005712:	2100      	movs	r1, #0
 8005714:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e059      	b.n	80057ce <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800571e:	b2da      	uxtb	r2, r3
 8005720:	697c      	ldr	r4, [r7, #20]
 8005722:	230a      	movs	r3, #10
 8005724:	18fb      	adds	r3, r7, r3
 8005726:	8819      	ldrh	r1, [r3, #0]
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	4b2f      	ldr	r3, [pc, #188]	@ (80057e8 <HAL_I2C_Master_Receive_DMA+0x204>)
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	0023      	movs	r3, r4
 8005730:	f001 fc08 	bl	8006f44 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005738:	b29a      	uxth	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	b29a      	uxth	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2240      	movs	r2, #64	@ 0x40
 800574a:	2100      	movs	r1, #0
 800574c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2110      	movs	r1, #16
 8005752:	0018      	movs	r0, r3
 8005754:	f001 fc30 	bl	8006fb8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2180      	movs	r1, #128	@ 0x80
 8005764:	0209      	lsls	r1, r1, #8
 8005766:	430a      	orrs	r2, r1
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	e02d      	b.n	80057c8 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2241      	movs	r2, #65	@ 0x41
 8005770:	2120      	movs	r1, #32
 8005772:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2242      	movs	r2, #66	@ 0x42
 8005778:	2100      	movs	r1, #0
 800577a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005780:	2210      	movs	r2, #16
 8005782:	431a      	orrs	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2240      	movs	r2, #64	@ 0x40
 800578c:	2100      	movs	r1, #0
 800578e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e01c      	b.n	80057ce <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4a15      	ldr	r2, [pc, #84]	@ (80057ec <HAL_I2C_Master_Receive_DMA+0x208>)
 8005798:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	2380      	movs	r3, #128	@ 0x80
 80057a2:	049c      	lsls	r4, r3, #18
 80057a4:	230a      	movs	r3, #10
 80057a6:	18fb      	adds	r3, r7, r3
 80057a8:	8819      	ldrh	r1, [r3, #0]
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	4b0e      	ldr	r3, [pc, #56]	@ (80057e8 <HAL_I2C_Master_Receive_DMA+0x204>)
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	0023      	movs	r3, r4
 80057b2:	f001 fbc7 	bl	8006f44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2240      	movs	r2, #64	@ 0x40
 80057ba:	2100      	movs	r1, #0
 80057bc:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2101      	movs	r1, #1
 80057c2:	0018      	movs	r0, r3
 80057c4:	f001 fbf8 	bl	8006fb8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80057c8:	2300      	movs	r3, #0
 80057ca:	e000      	b.n	80057ce <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80057cc:	2302      	movs	r3, #2
  }
}
 80057ce:	0018      	movs	r0, r3
 80057d0:	46bd      	mov	sp, r7
 80057d2:	b006      	add	sp, #24
 80057d4:	bdb0      	pop	{r4, r5, r7, pc}
 80057d6:	46c0      	nop			@ (mov r8, r8)
 80057d8:	ffff0000 	.word	0xffff0000
 80057dc:	08005ddd 	.word	0x08005ddd
 80057e0:	08006e35 	.word	0x08006e35
 80057e4:	08006ed5 	.word	0x08006ed5
 80057e8:	80002400 	.word	0x80002400
 80057ec:	08005989 	.word	0x08005989

080057f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	68f9      	ldr	r1, [r7, #12]
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	4798      	blx	r3
  }
}
 800581c:	46c0      	nop			@ (mov r8, r8)
 800581e:	46bd      	mov	sp, r7
 8005820:	b004      	add	sp, #16
 8005822:	bd80      	pop	{r7, pc}

08005824 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	2380      	movs	r3, #128	@ 0x80
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	4013      	ands	r3, r2
 8005844:	d00e      	beq.n	8005864 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2280      	movs	r2, #128	@ 0x80
 800584a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800584c:	d00a      	beq.n	8005864 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005852:	2201      	movs	r2, #1
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2280      	movs	r2, #128	@ 0x80
 8005860:	0052      	lsls	r2, r2, #1
 8005862:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	2380      	movs	r3, #128	@ 0x80
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	4013      	ands	r3, r2
 800586c:	d00e      	beq.n	800588c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2280      	movs	r2, #128	@ 0x80
 8005872:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005874:	d00a      	beq.n	800588c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587a:	2208      	movs	r2, #8
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2280      	movs	r2, #128	@ 0x80
 8005888:	00d2      	lsls	r2, r2, #3
 800588a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	2380      	movs	r3, #128	@ 0x80
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4013      	ands	r3, r2
 8005894:	d00e      	beq.n	80058b4 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	2280      	movs	r2, #128	@ 0x80
 800589a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800589c:	d00a      	beq.n	80058b4 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a2:	2202      	movs	r2, #2
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2280      	movs	r2, #128	@ 0x80
 80058b0:	0092      	lsls	r2, r2, #2
 80058b2:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	220b      	movs	r2, #11
 80058be:	4013      	ands	r3, r2
 80058c0:	d005      	beq.n	80058ce <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	0011      	movs	r1, r2
 80058c8:	0018      	movs	r0, r3
 80058ca:	f001 f915 	bl	8006af8 <I2C_ITError>
  }
}
 80058ce:	46c0      	nop			@ (mov r8, r8)
 80058d0:	46bd      	mov	sp, r7
 80058d2:	b006      	add	sp, #24
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b082      	sub	sp, #8
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80058de:	46c0      	nop			@ (mov r8, r8)
 80058e0:	46bd      	mov	sp, r7
 80058e2:	b002      	add	sp, #8
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80058ee:	46c0      	nop			@ (mov r8, r8)
 80058f0:	46bd      	mov	sp, r7
 80058f2:	b002      	add	sp, #8
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80058fe:	46c0      	nop			@ (mov r8, r8)
 8005900:	46bd      	mov	sp, r7
 8005902:	b002      	add	sp, #8
 8005904:	bd80      	pop	{r7, pc}

08005906 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b082      	sub	sp, #8
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800590e:	46c0      	nop			@ (mov r8, r8)
 8005910:	46bd      	mov	sp, r7
 8005912:	b002      	add	sp, #8
 8005914:	bd80      	pop	{r7, pc}

08005916 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b082      	sub	sp, #8
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	0008      	movs	r0, r1
 8005920:	0011      	movs	r1, r2
 8005922:	1cfb      	adds	r3, r7, #3
 8005924:	1c02      	adds	r2, r0, #0
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	003b      	movs	r3, r7
 800592a:	1c0a      	adds	r2, r1, #0
 800592c:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800592e:	46c0      	nop			@ (mov r8, r8)
 8005930:	46bd      	mov	sp, r7
 8005932:	b002      	add	sp, #8
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800593e:	46c0      	nop			@ (mov r8, r8)
 8005940:	46bd      	mov	sp, r7
 8005942:	b002      	add	sp, #8
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b082      	sub	sp, #8
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800594e:	46c0      	nop			@ (mov r8, r8)
 8005950:	46bd      	mov	sp, r7
 8005952:	b002      	add	sp, #8
 8005954:	bd80      	pop	{r7, pc}

08005956 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b082      	sub	sp, #8
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800595e:	46c0      	nop			@ (mov r8, r8)
 8005960:	46bd      	mov	sp, r7
 8005962:	b002      	add	sp, #8
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800596e:	46c0      	nop			@ (mov r8, r8)
 8005970:	46bd      	mov	sp, r7
 8005972:	b002      	add	sp, #8
 8005974:	bd80      	pop	{r7, pc}

08005976 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b082      	sub	sp, #8
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800597e:	46c0      	nop			@ (mov r8, r8)
 8005980:	46bd      	mov	sp, r7
 8005982:	b002      	add	sp, #8
 8005984:	bd80      	pop	{r7, pc}
	...

08005988 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005988:	b590      	push	{r4, r7, lr}
 800598a:	b089      	sub	sp, #36	@ 0x24
 800598c:	af02      	add	r7, sp, #8
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2240      	movs	r2, #64	@ 0x40
 800599c:	5c9b      	ldrb	r3, [r3, r2]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <I2C_Master_ISR_IT+0x1e>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e113      	b.n	8005bce <I2C_Master_ISR_IT+0x246>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2240      	movs	r2, #64	@ 0x40
 80059aa:	2101      	movs	r1, #1
 80059ac:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2210      	movs	r2, #16
 80059b2:	4013      	ands	r3, r2
 80059b4:	d012      	beq.n	80059dc <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2210      	movs	r2, #16
 80059ba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80059bc:	d00e      	beq.n	80059dc <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2210      	movs	r2, #16
 80059c4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ca:	2204      	movs	r2, #4
 80059cc:	431a      	orrs	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	0018      	movs	r0, r3
 80059d6:	f001 f9ba 	bl	8006d4e <I2C_Flush_TXDR>
 80059da:	e0e5      	b.n	8005ba8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2204      	movs	r2, #4
 80059e0:	4013      	ands	r3, r2
 80059e2:	d021      	beq.n	8005a28 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2204      	movs	r2, #4
 80059e8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80059ea:	d01d      	beq.n	8005a28 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	2204      	movs	r2, #4
 80059f0:	4393      	bics	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a26:	e0bf      	b.n	8005ba8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	d01c      	beq.n	8005a6a <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005a36:	d018      	beq.n	8005a6a <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	781a      	ldrb	r2, [r3, #0]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a68:	e09e      	b.n	8005ba8 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2280      	movs	r2, #128	@ 0x80
 8005a6e:	4013      	ands	r3, r2
 8005a70:	d100      	bne.n	8005a74 <I2C_Master_ISR_IT+0xec>
 8005a72:	e069      	b.n	8005b48 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2240      	movs	r2, #64	@ 0x40
 8005a78:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005a7a:	d065      	beq.n	8005b48 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d04a      	beq.n	8005b1c <I2C_Master_ISR_IT+0x194>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d146      	bne.n	8005b1c <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	2112      	movs	r1, #18
 8005a98:	187b      	adds	r3, r7, r1
 8005a9a:	0592      	lsls	r2, r2, #22
 8005a9c:	0d92      	lsrs	r2, r2, #22
 8005a9e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2bff      	cmp	r3, #255	@ 0xff
 8005aa8:	d910      	bls.n	8005acc <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	22ff      	movs	r2, #255	@ 0xff
 8005aae:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	2380      	movs	r3, #128	@ 0x80
 8005ab8:	045c      	lsls	r4, r3, #17
 8005aba:	187b      	adds	r3, r7, r1
 8005abc:	8819      	ldrh	r1, [r3, #0]
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	0023      	movs	r3, r4
 8005ac6:	f001 fa3d 	bl	8006f44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aca:	e03c      	b.n	8005b46 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ada:	4a3f      	ldr	r2, [pc, #252]	@ (8005bd8 <I2C_Master_ISR_IT+0x250>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00e      	beq.n	8005afe <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae4:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005aea:	2312      	movs	r3, #18
 8005aec:	18fb      	adds	r3, r7, r3
 8005aee:	8819      	ldrh	r1, [r3, #0]
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	2300      	movs	r3, #0
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	0023      	movs	r3, r4
 8005af8:	f001 fa24 	bl	8006f44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005afc:	e023      	b.n	8005b46 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	2380      	movs	r3, #128	@ 0x80
 8005b06:	049c      	lsls	r4, r3, #18
 8005b08:	2312      	movs	r3, #18
 8005b0a:	18fb      	adds	r3, r7, r3
 8005b0c:	8819      	ldrh	r1, [r3, #0]
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	2300      	movs	r3, #0
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	0023      	movs	r3, r4
 8005b16:	f001 fa15 	bl	8006f44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b1a:	e014      	b.n	8005b46 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	2380      	movs	r3, #128	@ 0x80
 8005b24:	049b      	lsls	r3, r3, #18
 8005b26:	401a      	ands	r2, r3
 8005b28:	2380      	movs	r3, #128	@ 0x80
 8005b2a:	049b      	lsls	r3, r3, #18
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d004      	beq.n	8005b3a <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	0018      	movs	r0, r3
 8005b34:	f000 fcf4 	bl	8006520 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b38:	e036      	b.n	8005ba8 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2140      	movs	r1, #64	@ 0x40
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f000 ffda 	bl	8006af8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b44:	e030      	b.n	8005ba8 <I2C_Master_ISR_IT+0x220>
 8005b46:	e02f      	b.n	8005ba8 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2240      	movs	r2, #64	@ 0x40
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d02b      	beq.n	8005ba8 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2240      	movs	r2, #64	@ 0x40
 8005b54:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005b56:	d027      	beq.n	8005ba8 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d11d      	bne.n	8005b9e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	2380      	movs	r3, #128	@ 0x80
 8005b6a:	049b      	lsls	r3, r3, #18
 8005b6c:	401a      	ands	r2, r3
 8005b6e:	2380      	movs	r3, #128	@ 0x80
 8005b70:	049b      	lsls	r3, r3, #18
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d018      	beq.n	8005ba8 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7a:	4a17      	ldr	r2, [pc, #92]	@ (8005bd8 <I2C_Master_ISR_IT+0x250>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d109      	bne.n	8005b94 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2180      	movs	r1, #128	@ 0x80
 8005b8c:	01c9      	lsls	r1, r1, #7
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	605a      	str	r2, [r3, #4]
 8005b92:	e009      	b.n	8005ba8 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	0018      	movs	r0, r3
 8005b98:	f000 fcc2 	bl	8006520 <I2C_ITMasterSeqCplt>
 8005b9c:	e004      	b.n	8005ba8 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2140      	movs	r1, #64	@ 0x40
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	f000 ffa8 	bl	8006af8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	2220      	movs	r2, #32
 8005bac:	4013      	ands	r3, r2
 8005bae:	d009      	beq.n	8005bc4 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005bb6:	d005      	beq.n	8005bc4 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	0011      	movs	r1, r2
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f000 fd54 	bl	800666c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2240      	movs	r2, #64	@ 0x40
 8005bc8:	2100      	movs	r1, #0
 8005bca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	0018      	movs	r0, r3
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	b007      	add	sp, #28
 8005bd4:	bd90      	pop	{r4, r7, pc}
 8005bd6:	46c0      	nop			@ (mov r8, r8)
 8005bd8:	ffff0000 	.word	0xffff0000

08005bdc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bec:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2240      	movs	r2, #64	@ 0x40
 8005bf6:	5c9b      	ldrb	r3, [r3, r2]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <I2C_Slave_ISR_IT+0x24>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e0e6      	b.n	8005dce <I2C_Slave_ISR_IT+0x1f2>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2240      	movs	r2, #64	@ 0x40
 8005c04:	2101      	movs	r1, #1
 8005c06:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	d009      	beq.n	8005c24 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c16:	d005      	beq.n	8005c24 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	0011      	movs	r1, r2
 8005c1e:	0018      	movs	r0, r3
 8005c20:	f000 fdf2 	bl	8006808 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	2210      	movs	r2, #16
 8005c28:	4013      	ands	r3, r2
 8005c2a:	d052      	beq.n	8005cd2 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2210      	movs	r2, #16
 8005c30:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c32:	d04e      	beq.n	8005cd2 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d12d      	bne.n	8005c9a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2241      	movs	r2, #65	@ 0x41
 8005c42:	5c9b      	ldrb	r3, [r3, r2]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b28      	cmp	r3, #40	@ 0x28
 8005c48:	d10b      	bne.n	8005c62 <I2C_Slave_ISR_IT+0x86>
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	2380      	movs	r3, #128	@ 0x80
 8005c4e:	049b      	lsls	r3, r3, #18
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d106      	bne.n	8005c62 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	0011      	movs	r1, r2
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f000 fef4 	bl	8006a48 <I2C_ITListenCplt>
 8005c60:	e036      	b.n	8005cd0 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2241      	movs	r2, #65	@ 0x41
 8005c66:	5c9b      	ldrb	r3, [r3, r2]
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b29      	cmp	r3, #41	@ 0x29
 8005c6c:	d110      	bne.n	8005c90 <I2C_Slave_ISR_IT+0xb4>
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	4a59      	ldr	r2, [pc, #356]	@ (8005dd8 <I2C_Slave_ISR_IT+0x1fc>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00c      	beq.n	8005c90 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2210      	movs	r2, #16
 8005c7c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	0018      	movs	r0, r3
 8005c82:	f001 f864 	bl	8006d4e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f000 fc8b 	bl	80065a4 <I2C_ITSlaveSeqCplt>
 8005c8e:	e01f      	b.n	8005cd0 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2210      	movs	r2, #16
 8005c96:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005c98:	e091      	b.n	8005dbe <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2210      	movs	r2, #16
 8005ca0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca6:	2204      	movs	r2, #4
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <I2C_Slave_ISR_IT+0xe4>
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	2380      	movs	r3, #128	@ 0x80
 8005cb8:	045b      	lsls	r3, r3, #17
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d000      	beq.n	8005cc0 <I2C_Slave_ISR_IT+0xe4>
 8005cbe:	e07e      	b.n	8005dbe <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	0011      	movs	r1, r2
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f000 ff15 	bl	8006af8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005cce:	e076      	b.n	8005dbe <I2C_Slave_ISR_IT+0x1e2>
 8005cd0:	e075      	b.n	8005dbe <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	d02f      	beq.n	8005d3a <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2204      	movs	r2, #4
 8005cde:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005ce0:	d02b      	beq.n	8005d3a <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d018      	beq.n	8005d1e <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf6:	b2d2      	uxtb	r2, r2
 8005cf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	3b01      	subs	r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d14c      	bne.n	8005dc2 <I2C_Slave_ISR_IT+0x1e6>
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	4a2b      	ldr	r2, [pc, #172]	@ (8005dd8 <I2C_Slave_ISR_IT+0x1fc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d048      	beq.n	8005dc2 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	0018      	movs	r0, r3
 8005d34:	f000 fc36 	bl	80065a4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005d38:	e043      	b.n	8005dc2 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	4013      	ands	r3, r2
 8005d40:	d00a      	beq.n	8005d58 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2208      	movs	r2, #8
 8005d46:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005d48:	d006      	beq.n	8005d58 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	0011      	movs	r1, r2
 8005d50:	0018      	movs	r0, r3
 8005d52:	f000 fb41 	bl	80063d8 <I2C_ITAddrCplt>
 8005d56:	e035      	b.n	8005dc4 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	d031      	beq.n	8005dc4 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005d66:	d02d      	beq.n	8005dc4 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d018      	beq.n	8005da4 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d76:	781a      	ldrb	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005da2:	e00f      	b.n	8005dc4 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	2380      	movs	r3, #128	@ 0x80
 8005da8:	045b      	lsls	r3, r3, #17
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d002      	beq.n	8005db4 <I2C_Slave_ISR_IT+0x1d8>
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d107      	bne.n	8005dc4 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	0018      	movs	r0, r3
 8005db8:	f000 fbf4 	bl	80065a4 <I2C_ITSlaveSeqCplt>
 8005dbc:	e002      	b.n	8005dc4 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8005dbe:	46c0      	nop			@ (mov r8, r8)
 8005dc0:	e000      	b.n	8005dc4 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8005dc2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2240      	movs	r2, #64	@ 0x40
 8005dc8:	2100      	movs	r1, #0
 8005dca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	0018      	movs	r0, r3
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	b006      	add	sp, #24
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	46c0      	nop			@ (mov r8, r8)
 8005dd8:	ffff0000 	.word	0xffff0000

08005ddc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005ddc:	b590      	push	{r4, r7, lr}
 8005dde:	b089      	sub	sp, #36	@ 0x24
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2240      	movs	r2, #64	@ 0x40
 8005dec:	5c9b      	ldrb	r3, [r3, r2]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <I2C_Master_ISR_DMA+0x1a>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e0e7      	b.n	8005fc6 <I2C_Master_ISR_DMA+0x1ea>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2240      	movs	r2, #64	@ 0x40
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2210      	movs	r2, #16
 8005e02:	4013      	ands	r3, r2
 8005e04:	d017      	beq.n	8005e36 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2210      	movs	r2, #16
 8005e0a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005e0c:	d013      	beq.n	8005e36 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2210      	movs	r2, #16
 8005e14:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1a:	2204      	movs	r2, #4
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2120      	movs	r1, #32
 8005e26:	0018      	movs	r0, r3
 8005e28:	f001 f8c6 	bl	8006fb8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	0018      	movs	r0, r3
 8005e30:	f000 ff8d 	bl	8006d4e <I2C_Flush_TXDR>
 8005e34:	e0c2      	b.n	8005fbc <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2280      	movs	r2, #128	@ 0x80
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	d100      	bne.n	8005e40 <I2C_Master_ISR_DMA+0x64>
 8005e3e:	e07c      	b.n	8005f3a <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2240      	movs	r2, #64	@ 0x40
 8005e44:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005e46:	d100      	bne.n	8005e4a <I2C_Master_ISR_DMA+0x6e>
 8005e48:	e077      	b.n	8005f3a <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2140      	movs	r1, #64	@ 0x40
 8005e56:	438a      	bics	r2, r1
 8005e58:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d055      	beq.n	8005f10 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	2312      	movs	r3, #18
 8005e6e:	18fb      	adds	r3, r7, r3
 8005e70:	0592      	lsls	r2, r2, #22
 8005e72:	0d92      	lsrs	r2, r2, #22
 8005e74:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2bff      	cmp	r3, #255	@ 0xff
 8005e7e:	d906      	bls.n	8005e8e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	22ff      	movs	r2, #255	@ 0xff
 8005e84:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8005e86:	2380      	movs	r3, #128	@ 0x80
 8005e88:	045b      	lsls	r3, r3, #17
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	e010      	b.n	8005eb0 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9c:	4a4c      	ldr	r2, [pc, #304]	@ (8005fd0 <I2C_Master_ISR_DMA+0x1f4>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d003      	beq.n	8005eaa <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	e002      	b.n	8005eb0 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005eaa:	2380      	movs	r3, #128	@ 0x80
 8005eac:	049b      	lsls	r3, r3, #18
 8005eae:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	697c      	ldr	r4, [r7, #20]
 8005eb8:	2312      	movs	r3, #18
 8005eba:	18fb      	adds	r3, r7, r3
 8005ebc:	8819      	ldrh	r1, [r3, #0]
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	0023      	movs	r3, r4
 8005ec6:	f001 f83d 	bl	8006f44 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2241      	movs	r2, #65	@ 0x41
 8005ee0:	5c9b      	ldrb	r3, [r3, r2]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b22      	cmp	r3, #34	@ 0x22
 8005ee6:	d109      	bne.n	8005efc <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2180      	movs	r1, #128	@ 0x80
 8005ef4:	0209      	lsls	r1, r1, #8
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005efa:	e05f      	b.n	8005fbc <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2180      	movs	r1, #128	@ 0x80
 8005f08:	01c9      	lsls	r1, r1, #7
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005f0e:	e055      	b.n	8005fbc <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	2380      	movs	r3, #128	@ 0x80
 8005f18:	049b      	lsls	r3, r3, #18
 8005f1a:	401a      	ands	r2, r3
 8005f1c:	2380      	movs	r3, #128	@ 0x80
 8005f1e:	049b      	lsls	r3, r3, #18
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d004      	beq.n	8005f2e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	0018      	movs	r0, r3
 8005f28:	f000 fafa 	bl	8006520 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005f2c:	e046      	b.n	8005fbc <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2140      	movs	r1, #64	@ 0x40
 8005f32:	0018      	movs	r0, r3
 8005f34:	f000 fde0 	bl	8006af8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005f38:	e040      	b.n	8005fbc <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2240      	movs	r2, #64	@ 0x40
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d02c      	beq.n	8005f9c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2240      	movs	r2, #64	@ 0x40
 8005f46:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005f48:	d028      	beq.n	8005f9c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d11d      	bne.n	8005f90 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	2380      	movs	r3, #128	@ 0x80
 8005f5c:	049b      	lsls	r3, r3, #18
 8005f5e:	401a      	ands	r2, r3
 8005f60:	2380      	movs	r3, #128	@ 0x80
 8005f62:	049b      	lsls	r3, r3, #18
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d028      	beq.n	8005fba <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6c:	4a18      	ldr	r2, [pc, #96]	@ (8005fd0 <I2C_Master_ISR_DMA+0x1f4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d109      	bne.n	8005f86 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2180      	movs	r1, #128	@ 0x80
 8005f7e:	01c9      	lsls	r1, r1, #7
 8005f80:	430a      	orrs	r2, r1
 8005f82:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005f84:	e019      	b.n	8005fba <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f000 fac9 	bl	8006520 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005f8e:	e014      	b.n	8005fba <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2140      	movs	r1, #64	@ 0x40
 8005f94:	0018      	movs	r0, r3
 8005f96:	f000 fdaf 	bl	8006af8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005f9a:	e00e      	b.n	8005fba <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d00b      	beq.n	8005fbc <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005faa:	d007      	beq.n	8005fbc <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	0011      	movs	r1, r2
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f000 fb5a 	bl	800666c <I2C_ITMasterCplt>
 8005fb8:	e000      	b.n	8005fbc <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8005fba:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2240      	movs	r2, #64	@ 0x40
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	b007      	add	sp, #28
 8005fcc:	bd90      	pop	{r4, r7, pc}
 8005fce:	46c0      	nop			@ (mov r8, r8)
 8005fd0:	ffff0000 	.word	0xffff0000

08005fd4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005fd4:	b590      	push	{r4, r7, lr}
 8005fd6:	b089      	sub	sp, #36	@ 0x24
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005fe0:	4b88      	ldr	r3, [pc, #544]	@ (8006204 <I2C_Mem_ISR_DMA+0x230>)
 8005fe2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2240      	movs	r2, #64	@ 0x40
 8005fe8:	5c9b      	ldrb	r3, [r3, r2]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d101      	bne.n	8005ff2 <I2C_Mem_ISR_DMA+0x1e>
 8005fee:	2302      	movs	r3, #2
 8005ff0:	e104      	b.n	80061fc <I2C_Mem_ISR_DMA+0x228>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2240      	movs	r2, #64	@ 0x40
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2210      	movs	r2, #16
 8005ffe:	4013      	ands	r3, r2
 8006000:	d017      	beq.n	8006032 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2210      	movs	r2, #16
 8006006:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006008:	d013      	beq.n	8006032 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2210      	movs	r2, #16
 8006010:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006016:	2204      	movs	r2, #4
 8006018:	431a      	orrs	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2120      	movs	r1, #32
 8006022:	0018      	movs	r0, r3
 8006024:	f000 ffc8 	bl	8006fb8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	0018      	movs	r0, r3
 800602c:	f000 fe8f 	bl	8006d4e <I2C_Flush_TXDR>
 8006030:	e0df      	b.n	80061f2 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2202      	movs	r2, #2
 8006036:	4013      	ands	r3, r2
 8006038:	d00d      	beq.n	8006056 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2202      	movs	r2, #2
 800603e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006040:	d009      	beq.n	8006056 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800604a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2201      	movs	r2, #1
 8006050:	4252      	negs	r2, r2
 8006052:	651a      	str	r2, [r3, #80]	@ 0x50
 8006054:	e0cd      	b.n	80061f2 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2280      	movs	r2, #128	@ 0x80
 800605a:	4013      	ands	r3, r2
 800605c:	d05e      	beq.n	800611c <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2240      	movs	r2, #64	@ 0x40
 8006062:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006064:	d05a      	beq.n	800611c <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2110      	movs	r1, #16
 800606a:	0018      	movs	r0, r3
 800606c:	f000 ffa4 	bl	8006fb8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d04a      	beq.n	8006110 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800607e:	b29b      	uxth	r3, r3
 8006080:	2bff      	cmp	r3, #255	@ 0xff
 8006082:	d910      	bls.n	80060a6 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	22ff      	movs	r2, #255	@ 0xff
 8006088:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800608e:	b299      	uxth	r1, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006094:	b2da      	uxtb	r2, r3
 8006096:	2380      	movs	r3, #128	@ 0x80
 8006098:	045b      	lsls	r3, r3, #17
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	2400      	movs	r4, #0
 800609e:	9400      	str	r4, [sp, #0]
 80060a0:	f000 ff50 	bl	8006f44 <I2C_TransferConfig>
 80060a4:	e011      	b.n	80060ca <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060b4:	b299      	uxth	r1, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	2380      	movs	r3, #128	@ 0x80
 80060be:	049b      	lsls	r3, r3, #18
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	2400      	movs	r4, #0
 80060c4:	9400      	str	r4, [sp, #0]
 80060c6:	f000 ff3d 	bl	8006f44 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2241      	movs	r2, #65	@ 0x41
 80060e0:	5c9b      	ldrb	r3, [r3, r2]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b22      	cmp	r3, #34	@ 0x22
 80060e6:	d109      	bne.n	80060fc <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2180      	movs	r1, #128	@ 0x80
 80060f4:	0209      	lsls	r1, r1, #8
 80060f6:	430a      	orrs	r2, r1
 80060f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80060fa:	e07a      	b.n	80061f2 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2180      	movs	r1, #128	@ 0x80
 8006108:	01c9      	lsls	r1, r1, #7
 800610a:	430a      	orrs	r2, r1
 800610c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800610e:	e070      	b.n	80061f2 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2140      	movs	r1, #64	@ 0x40
 8006114:	0018      	movs	r0, r3
 8006116:	f000 fcef 	bl	8006af8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800611a:	e06a      	b.n	80061f2 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2240      	movs	r2, #64	@ 0x40
 8006120:	4013      	ands	r3, r2
 8006122:	d058      	beq.n	80061d6 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2240      	movs	r2, #64	@ 0x40
 8006128:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800612a:	d054      	beq.n	80061d6 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2241      	movs	r2, #65	@ 0x41
 8006130:	5c9b      	ldrb	r3, [r3, r2]
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b22      	cmp	r3, #34	@ 0x22
 8006136:	d101      	bne.n	800613c <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8006138:	4b33      	ldr	r3, [pc, #204]	@ (8006208 <I2C_Mem_ISR_DMA+0x234>)
 800613a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006140:	b29b      	uxth	r3, r3
 8006142:	2bff      	cmp	r3, #255	@ 0xff
 8006144:	d911      	bls.n	800616a <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	22ff      	movs	r2, #255	@ 0xff
 800614a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006150:	b299      	uxth	r1, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006156:	b2da      	uxtb	r2, r3
 8006158:	2380      	movs	r3, #128	@ 0x80
 800615a:	045c      	lsls	r4, r3, #17
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	0023      	movs	r3, r4
 8006164:	f000 feee 	bl	8006f44 <I2C_TransferConfig>
 8006168:	e012      	b.n	8006190 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006178:	b299      	uxth	r1, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800617e:	b2da      	uxtb	r2, r3
 8006180:	2380      	movs	r3, #128	@ 0x80
 8006182:	049c      	lsls	r4, r3, #18
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	0023      	movs	r3, r4
 800618c:	f000 feda 	bl	8006f44 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2241      	movs	r2, #65	@ 0x41
 80061a6:	5c9b      	ldrb	r3, [r3, r2]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b22      	cmp	r3, #34	@ 0x22
 80061ac:	d109      	bne.n	80061c2 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2180      	movs	r1, #128	@ 0x80
 80061ba:	0209      	lsls	r1, r1, #8
 80061bc:	430a      	orrs	r2, r1
 80061be:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061c0:	e017      	b.n	80061f2 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2180      	movs	r1, #128	@ 0x80
 80061ce:	01c9      	lsls	r1, r1, #7
 80061d0:	430a      	orrs	r2, r1
 80061d2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061d4:	e00d      	b.n	80061f2 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2220      	movs	r2, #32
 80061da:	4013      	ands	r3, r2
 80061dc:	d009      	beq.n	80061f2 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2220      	movs	r2, #32
 80061e2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80061e4:	d005      	beq.n	80061f2 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	0011      	movs	r1, r2
 80061ec:	0018      	movs	r0, r3
 80061ee:	f000 fa3d 	bl	800666c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2240      	movs	r2, #64	@ 0x40
 80061f6:	2100      	movs	r1, #0
 80061f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	0018      	movs	r0, r3
 80061fe:	46bd      	mov	sp, r7
 8006200:	b007      	add	sp, #28
 8006202:	bd90      	pop	{r4, r7, pc}
 8006204:	80002000 	.word	0x80002000
 8006208:	80002400 	.word	0x80002400

0800620c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2240      	movs	r2, #64	@ 0x40
 8006226:	5c9b      	ldrb	r3, [r3, r2]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <I2C_Slave_ISR_DMA+0x24>
 800622c:	2302      	movs	r3, #2
 800622e:	e0cd      	b.n	80063cc <I2C_Slave_ISR_DMA+0x1c0>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2240      	movs	r2, #64	@ 0x40
 8006234:	2101      	movs	r1, #1
 8006236:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2220      	movs	r2, #32
 800623c:	4013      	ands	r3, r2
 800623e:	d009      	beq.n	8006254 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006246:	d005      	beq.n	8006254 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	0011      	movs	r1, r2
 800624e:	0018      	movs	r0, r3
 8006250:	f000 fada 	bl	8006808 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2210      	movs	r2, #16
 8006258:	4013      	ands	r3, r2
 800625a:	d100      	bne.n	800625e <I2C_Slave_ISR_DMA+0x52>
 800625c:	e0a3      	b.n	80063a6 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2210      	movs	r2, #16
 8006262:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006264:	d100      	bne.n	8006268 <I2C_Slave_ISR_DMA+0x5c>
 8006266:	e09e      	b.n	80063a6 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	2380      	movs	r3, #128	@ 0x80
 800626c:	01db      	lsls	r3, r3, #7
 800626e:	4013      	ands	r3, r2
 8006270:	d105      	bne.n	800627e <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	2380      	movs	r3, #128	@ 0x80
 8006276:	021b      	lsls	r3, r3, #8
 8006278:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800627a:	d100      	bne.n	800627e <I2C_Slave_ISR_DMA+0x72>
 800627c:	e08c      	b.n	8006398 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00c      	beq.n	80062a0 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	2380      	movs	r3, #128	@ 0x80
 800628a:	021b      	lsls	r3, r3, #8
 800628c:	4013      	ands	r3, r2
 800628e:	d007      	beq.n	80062a0 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800629c:	2301      	movs	r3, #1
 800629e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00c      	beq.n	80062c2 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	2380      	movs	r3, #128	@ 0x80
 80062ac:	01db      	lsls	r3, r3, #7
 80062ae:	4013      	ands	r3, r2
 80062b0:	d007      	beq.n	80062c2 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 80062be:	2301      	movs	r3, #1
 80062c0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d12d      	bne.n	8006324 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2241      	movs	r2, #65	@ 0x41
 80062cc:	5c9b      	ldrb	r3, [r3, r2]
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b28      	cmp	r3, #40	@ 0x28
 80062d2:	d10b      	bne.n	80062ec <I2C_Slave_ISR_DMA+0xe0>
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	2380      	movs	r3, #128	@ 0x80
 80062d8:	049b      	lsls	r3, r3, #18
 80062da:	429a      	cmp	r2, r3
 80062dc:	d106      	bne.n	80062ec <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	0011      	movs	r1, r2
 80062e4:	0018      	movs	r0, r3
 80062e6:	f000 fbaf 	bl	8006a48 <I2C_ITListenCplt>
 80062ea:	e054      	b.n	8006396 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2241      	movs	r2, #65	@ 0x41
 80062f0:	5c9b      	ldrb	r3, [r3, r2]
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b29      	cmp	r3, #41	@ 0x29
 80062f6:	d110      	bne.n	800631a <I2C_Slave_ISR_DMA+0x10e>
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	4a36      	ldr	r2, [pc, #216]	@ (80063d4 <I2C_Slave_ISR_DMA+0x1c8>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00c      	beq.n	800631a <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2210      	movs	r2, #16
 8006306:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	0018      	movs	r0, r3
 800630c:	f000 fd1f 	bl	8006d4e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	0018      	movs	r0, r3
 8006314:	f000 f946 	bl	80065a4 <I2C_ITSlaveSeqCplt>
 8006318:	e03d      	b.n	8006396 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2210      	movs	r2, #16
 8006320:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006322:	e03e      	b.n	80063a2 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2210      	movs	r2, #16
 800632a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006330:	2204      	movs	r2, #4
 8006332:	431a      	orrs	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006338:	2317      	movs	r3, #23
 800633a:	18fb      	adds	r3, r7, r3
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	2141      	movs	r1, #65	@ 0x41
 8006340:	5c52      	ldrb	r2, [r2, r1]
 8006342:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d004      	beq.n	8006354 <I2C_Slave_ISR_DMA+0x148>
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	2380      	movs	r3, #128	@ 0x80
 800634e:	045b      	lsls	r3, r3, #17
 8006350:	429a      	cmp	r2, r3
 8006352:	d126      	bne.n	80063a2 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006354:	2217      	movs	r2, #23
 8006356:	18bb      	adds	r3, r7, r2
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b21      	cmp	r3, #33	@ 0x21
 800635c:	d003      	beq.n	8006366 <I2C_Slave_ISR_DMA+0x15a>
 800635e:	18bb      	adds	r3, r7, r2
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b29      	cmp	r3, #41	@ 0x29
 8006364:	d103      	bne.n	800636e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2221      	movs	r2, #33	@ 0x21
 800636a:	631a      	str	r2, [r3, #48]	@ 0x30
 800636c:	e00b      	b.n	8006386 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800636e:	2217      	movs	r2, #23
 8006370:	18bb      	adds	r3, r7, r2
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2b22      	cmp	r3, #34	@ 0x22
 8006376:	d003      	beq.n	8006380 <I2C_Slave_ISR_DMA+0x174>
 8006378:	18bb      	adds	r3, r7, r2
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	2b2a      	cmp	r3, #42	@ 0x2a
 800637e:	d102      	bne.n	8006386 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2222      	movs	r2, #34	@ 0x22
 8006384:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	0011      	movs	r1, r2
 800638e:	0018      	movs	r0, r3
 8006390:	f000 fbb2 	bl	8006af8 <I2C_ITError>
      if (treatdmanack == 1U)
 8006394:	e005      	b.n	80063a2 <I2C_Slave_ISR_DMA+0x196>
 8006396:	e004      	b.n	80063a2 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2210      	movs	r2, #16
 800639e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80063a0:	e00f      	b.n	80063c2 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 80063a2:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80063a4:	e00d      	b.n	80063c2 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2208      	movs	r2, #8
 80063aa:	4013      	ands	r3, r2
 80063ac:	d009      	beq.n	80063c2 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2208      	movs	r2, #8
 80063b2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80063b4:	d005      	beq.n	80063c2 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	0011      	movs	r1, r2
 80063bc:	0018      	movs	r0, r3
 80063be:	f000 f80b 	bl	80063d8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2240      	movs	r2, #64	@ 0x40
 80063c6:	2100      	movs	r1, #0
 80063c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	0018      	movs	r0, r3
 80063ce:	46bd      	mov	sp, r7
 80063d0:	b008      	add	sp, #32
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	ffff0000 	.word	0xffff0000

080063d8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80063d8:	b5b0      	push	{r4, r5, r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2241      	movs	r2, #65	@ 0x41
 80063e6:	5c9b      	ldrb	r3, [r3, r2]
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	001a      	movs	r2, r3
 80063ec:	2328      	movs	r3, #40	@ 0x28
 80063ee:	4013      	ands	r3, r2
 80063f0:	2b28      	cmp	r3, #40	@ 0x28
 80063f2:	d000      	beq.n	80063f6 <I2C_ITAddrCplt+0x1e>
 80063f4:	e088      	b.n	8006508 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	699b      	ldr	r3, [r3, #24]
 80063fc:	0c1b      	lsrs	r3, r3, #16
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	250f      	movs	r5, #15
 8006402:	197b      	adds	r3, r7, r5
 8006404:	2101      	movs	r1, #1
 8006406:	400a      	ands	r2, r1
 8006408:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	0c1b      	lsrs	r3, r3, #16
 8006412:	b29a      	uxth	r2, r3
 8006414:	200c      	movs	r0, #12
 8006416:	183b      	adds	r3, r7, r0
 8006418:	21fe      	movs	r1, #254	@ 0xfe
 800641a:	400a      	ands	r2, r1
 800641c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	b29a      	uxth	r2, r3
 8006426:	240a      	movs	r4, #10
 8006428:	193b      	adds	r3, r7, r4
 800642a:	0592      	lsls	r2, r2, #22
 800642c:	0d92      	lsrs	r2, r2, #22
 800642e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	b29a      	uxth	r2, r3
 8006438:	2308      	movs	r3, #8
 800643a:	18fb      	adds	r3, r7, r3
 800643c:	21fe      	movs	r1, #254	@ 0xfe
 800643e:	400a      	ands	r2, r1
 8006440:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d148      	bne.n	80064dc <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800644a:	0021      	movs	r1, r4
 800644c:	187b      	adds	r3, r7, r1
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	09db      	lsrs	r3, r3, #7
 8006452:	b29a      	uxth	r2, r3
 8006454:	183b      	adds	r3, r7, r0
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	4053      	eors	r3, r2
 800645a:	b29b      	uxth	r3, r3
 800645c:	001a      	movs	r2, r3
 800645e:	2306      	movs	r3, #6
 8006460:	4013      	ands	r3, r2
 8006462:	d120      	bne.n	80064a6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006464:	183b      	adds	r3, r7, r0
 8006466:	187a      	adds	r2, r7, r1
 8006468:	8812      	ldrh	r2, [r2, #0]
 800646a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800647a:	2b02      	cmp	r3, #2
 800647c:	d14c      	bne.n	8006518 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2208      	movs	r2, #8
 800648a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2240      	movs	r2, #64	@ 0x40
 8006490:	2100      	movs	r1, #0
 8006492:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006494:	183b      	adds	r3, r7, r0
 8006496:	881a      	ldrh	r2, [r3, #0]
 8006498:	197b      	adds	r3, r7, r5
 800649a:	7819      	ldrb	r1, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	0018      	movs	r0, r3
 80064a0:	f7ff fa39 	bl	8005916 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80064a4:	e038      	b.n	8006518 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80064a6:	240c      	movs	r4, #12
 80064a8:	193b      	adds	r3, r7, r4
 80064aa:	2208      	movs	r2, #8
 80064ac:	18ba      	adds	r2, r7, r2
 80064ae:	8812      	ldrh	r2, [r2, #0]
 80064b0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80064b2:	2380      	movs	r3, #128	@ 0x80
 80064b4:	021a      	lsls	r2, r3, #8
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	0011      	movs	r1, r2
 80064ba:	0018      	movs	r0, r3
 80064bc:	f000 fe0a 	bl	80070d4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2240      	movs	r2, #64	@ 0x40
 80064c4:	2100      	movs	r1, #0
 80064c6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80064c8:	193b      	adds	r3, r7, r4
 80064ca:	881a      	ldrh	r2, [r3, #0]
 80064cc:	230f      	movs	r3, #15
 80064ce:	18fb      	adds	r3, r7, r3
 80064d0:	7819      	ldrb	r1, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	0018      	movs	r0, r3
 80064d6:	f7ff fa1e 	bl	8005916 <HAL_I2C_AddrCallback>
}
 80064da:	e01d      	b.n	8006518 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80064dc:	2380      	movs	r3, #128	@ 0x80
 80064de:	021a      	lsls	r2, r3, #8
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	0011      	movs	r1, r2
 80064e4:	0018      	movs	r0, r3
 80064e6:	f000 fdf5 	bl	80070d4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2240      	movs	r2, #64	@ 0x40
 80064ee:	2100      	movs	r1, #0
 80064f0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80064f2:	230c      	movs	r3, #12
 80064f4:	18fb      	adds	r3, r7, r3
 80064f6:	881a      	ldrh	r2, [r3, #0]
 80064f8:	230f      	movs	r3, #15
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	7819      	ldrb	r1, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	0018      	movs	r0, r3
 8006502:	f7ff fa08 	bl	8005916 <HAL_I2C_AddrCallback>
}
 8006506:	e007      	b.n	8006518 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2208      	movs	r2, #8
 800650e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2240      	movs	r2, #64	@ 0x40
 8006514:	2100      	movs	r1, #0
 8006516:	5499      	strb	r1, [r3, r2]
}
 8006518:	46c0      	nop			@ (mov r8, r8)
 800651a:	46bd      	mov	sp, r7
 800651c:	b004      	add	sp, #16
 800651e:	bdb0      	pop	{r4, r5, r7, pc}

08006520 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2242      	movs	r2, #66	@ 0x42
 800652c:	2100      	movs	r1, #0
 800652e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2241      	movs	r2, #65	@ 0x41
 8006534:	5c9b      	ldrb	r3, [r3, r2]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b21      	cmp	r3, #33	@ 0x21
 800653a:	d117      	bne.n	800656c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2241      	movs	r2, #65	@ 0x41
 8006540:	2120      	movs	r1, #32
 8006542:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2211      	movs	r2, #17
 8006548:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2101      	movs	r1, #1
 8006554:	0018      	movs	r0, r3
 8006556:	f000 fdbd 	bl	80070d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2240      	movs	r2, #64	@ 0x40
 800655e:	2100      	movs	r1, #0
 8006560:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	0018      	movs	r0, r3
 8006566:	f7ff f9b6 	bl	80058d6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800656a:	e016      	b.n	800659a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2241      	movs	r2, #65	@ 0x41
 8006570:	2120      	movs	r1, #32
 8006572:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2212      	movs	r2, #18
 8006578:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2102      	movs	r1, #2
 8006584:	0018      	movs	r0, r3
 8006586:	f000 fda5 	bl	80070d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2240      	movs	r2, #64	@ 0x40
 800658e:	2100      	movs	r1, #0
 8006590:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	0018      	movs	r0, r3
 8006596:	f7ff f9a6 	bl	80058e6 <HAL_I2C_MasterRxCpltCallback>
}
 800659a:	46c0      	nop			@ (mov r8, r8)
 800659c:	46bd      	mov	sp, r7
 800659e:	b002      	add	sp, #8
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2242      	movs	r2, #66	@ 0x42
 80065b8:	2100      	movs	r1, #0
 80065ba:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	2380      	movs	r3, #128	@ 0x80
 80065c0:	01db      	lsls	r3, r3, #7
 80065c2:	4013      	ands	r3, r2
 80065c4:	d008      	beq.n	80065d8 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4924      	ldr	r1, [pc, #144]	@ (8006664 <I2C_ITSlaveSeqCplt+0xc0>)
 80065d2:	400a      	ands	r2, r1
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	e00c      	b.n	80065f2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	2380      	movs	r3, #128	@ 0x80
 80065dc:	021b      	lsls	r3, r3, #8
 80065de:	4013      	ands	r3, r2
 80065e0:	d007      	beq.n	80065f2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	491e      	ldr	r1, [pc, #120]	@ (8006668 <I2C_ITSlaveSeqCplt+0xc4>)
 80065ee:	400a      	ands	r2, r1
 80065f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2241      	movs	r2, #65	@ 0x41
 80065f6:	5c9b      	ldrb	r3, [r3, r2]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b29      	cmp	r3, #41	@ 0x29
 80065fc:	d114      	bne.n	8006628 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2241      	movs	r2, #65	@ 0x41
 8006602:	2128      	movs	r1, #40	@ 0x28
 8006604:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2221      	movs	r2, #33	@ 0x21
 800660a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2101      	movs	r1, #1
 8006610:	0018      	movs	r0, r3
 8006612:	f000 fd5f 	bl	80070d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2240      	movs	r2, #64	@ 0x40
 800661a:	2100      	movs	r1, #0
 800661c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	0018      	movs	r0, r3
 8006622:	f7ff f968 	bl	80058f6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006626:	e019      	b.n	800665c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2241      	movs	r2, #65	@ 0x41
 800662c:	5c9b      	ldrb	r3, [r3, r2]
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b2a      	cmp	r3, #42	@ 0x2a
 8006632:	d113      	bne.n	800665c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2241      	movs	r2, #65	@ 0x41
 8006638:	2128      	movs	r1, #40	@ 0x28
 800663a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2222      	movs	r2, #34	@ 0x22
 8006640:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2102      	movs	r1, #2
 8006646:	0018      	movs	r0, r3
 8006648:	f000 fd44 	bl	80070d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2240      	movs	r2, #64	@ 0x40
 8006650:	2100      	movs	r1, #0
 8006652:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	0018      	movs	r0, r3
 8006658:	f7ff f955 	bl	8005906 <HAL_I2C_SlaveRxCpltCallback>
}
 800665c:	46c0      	nop			@ (mov r8, r8)
 800665e:	46bd      	mov	sp, r7
 8006660:	b004      	add	sp, #16
 8006662:	bd80      	pop	{r7, pc}
 8006664:	ffffbfff 	.word	0xffffbfff
 8006668:	ffff7fff 	.word	0xffff7fff

0800666c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2220      	movs	r2, #32
 8006680:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2241      	movs	r2, #65	@ 0x41
 8006686:	5c9b      	ldrb	r3, [r3, r2]
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b21      	cmp	r3, #33	@ 0x21
 800668c:	d108      	bne.n	80066a0 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2101      	movs	r1, #1
 8006692:	0018      	movs	r0, r3
 8006694:	f000 fd1e 	bl	80070d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2211      	movs	r2, #17
 800669c:	631a      	str	r2, [r3, #48]	@ 0x30
 800669e:	e00d      	b.n	80066bc <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2241      	movs	r2, #65	@ 0x41
 80066a4:	5c9b      	ldrb	r3, [r3, r2]
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b22      	cmp	r3, #34	@ 0x22
 80066aa:	d107      	bne.n	80066bc <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2102      	movs	r1, #2
 80066b0:	0018      	movs	r0, r3
 80066b2:	f000 fd0f 	bl	80070d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2212      	movs	r2, #18
 80066ba:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	494e      	ldr	r1, [pc, #312]	@ (8006800 <I2C_ITMasterCplt+0x194>)
 80066c8:	400a      	ands	r2, r1
 80066ca:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a4b      	ldr	r2, [pc, #300]	@ (8006804 <I2C_ITMasterCplt+0x198>)
 80066d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	2210      	movs	r2, #16
 80066dc:	4013      	ands	r3, r2
 80066de:	d009      	beq.n	80066f4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2210      	movs	r2, #16
 80066e6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ec:	2204      	movs	r2, #4
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2241      	movs	r2, #65	@ 0x41
 80066f8:	5c9b      	ldrb	r3, [r3, r2]
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b60      	cmp	r3, #96	@ 0x60
 80066fe:	d109      	bne.n	8006714 <I2C_ITMasterCplt+0xa8>
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	2204      	movs	r2, #4
 8006704:	4013      	ands	r3, r2
 8006706:	d005      	beq.n	8006714 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670e:	b2db      	uxtb	r3, r3
 8006710:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006712:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	0018      	movs	r0, r3
 8006718:	f000 fb19 	bl	8006d4e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006720:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2241      	movs	r2, #65	@ 0x41
 8006726:	5c9b      	ldrb	r3, [r3, r2]
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b60      	cmp	r3, #96	@ 0x60
 800672c:	d002      	beq.n	8006734 <I2C_ITMasterCplt+0xc8>
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	0011      	movs	r1, r2
 800673c:	0018      	movs	r0, r3
 800673e:	f000 f9db 	bl	8006af8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006742:	e058      	b.n	80067f6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2241      	movs	r2, #65	@ 0x41
 8006748:	5c9b      	ldrb	r3, [r3, r2]
 800674a:	b2db      	uxtb	r3, r3
 800674c:	2b21      	cmp	r3, #33	@ 0x21
 800674e:	d126      	bne.n	800679e <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2241      	movs	r2, #65	@ 0x41
 8006754:	2120      	movs	r1, #32
 8006756:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2242      	movs	r2, #66	@ 0x42
 8006762:	5c9b      	ldrb	r3, [r3, r2]
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b40      	cmp	r3, #64	@ 0x40
 8006768:	d10c      	bne.n	8006784 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2242      	movs	r2, #66	@ 0x42
 800676e:	2100      	movs	r1, #0
 8006770:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2240      	movs	r2, #64	@ 0x40
 8006776:	2100      	movs	r1, #0
 8006778:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	0018      	movs	r0, r3
 800677e:	f7ff f8e2 	bl	8005946 <HAL_I2C_MemTxCpltCallback>
}
 8006782:	e038      	b.n	80067f6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2242      	movs	r2, #66	@ 0x42
 8006788:	2100      	movs	r1, #0
 800678a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2240      	movs	r2, #64	@ 0x40
 8006790:	2100      	movs	r1, #0
 8006792:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	0018      	movs	r0, r3
 8006798:	f7ff f89d 	bl	80058d6 <HAL_I2C_MasterTxCpltCallback>
}
 800679c:	e02b      	b.n	80067f6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2241      	movs	r2, #65	@ 0x41
 80067a2:	5c9b      	ldrb	r3, [r3, r2]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b22      	cmp	r3, #34	@ 0x22
 80067a8:	d125      	bne.n	80067f6 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2241      	movs	r2, #65	@ 0x41
 80067ae:	2120      	movs	r1, #32
 80067b0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2242      	movs	r2, #66	@ 0x42
 80067bc:	5c9b      	ldrb	r3, [r3, r2]
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b40      	cmp	r3, #64	@ 0x40
 80067c2:	d10c      	bne.n	80067de <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2242      	movs	r2, #66	@ 0x42
 80067c8:	2100      	movs	r1, #0
 80067ca:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2240      	movs	r2, #64	@ 0x40
 80067d0:	2100      	movs	r1, #0
 80067d2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	0018      	movs	r0, r3
 80067d8:	f7ff f8bd 	bl	8005956 <HAL_I2C_MemRxCpltCallback>
}
 80067dc:	e00b      	b.n	80067f6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2242      	movs	r2, #66	@ 0x42
 80067e2:	2100      	movs	r1, #0
 80067e4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2240      	movs	r2, #64	@ 0x40
 80067ea:	2100      	movs	r1, #0
 80067ec:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	0018      	movs	r0, r3
 80067f2:	f7ff f878 	bl	80058e6 <HAL_I2C_MasterRxCpltCallback>
}
 80067f6:	46c0      	nop			@ (mov r8, r8)
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b006      	add	sp, #24
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	46c0      	nop			@ (mov r8, r8)
 8006800:	fe00e800 	.word	0xfe00e800
 8006804:	ffff0000 	.word	0xffff0000

08006808 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800681e:	200f      	movs	r0, #15
 8006820:	183b      	adds	r3, r7, r0
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	2141      	movs	r1, #65	@ 0x41
 8006826:	5c52      	ldrb	r2, [r2, r1]
 8006828:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2220      	movs	r2, #32
 8006830:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006832:	183b      	adds	r3, r7, r0
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b21      	cmp	r3, #33	@ 0x21
 8006838:	d003      	beq.n	8006842 <I2C_ITSlaveCplt+0x3a>
 800683a:	183b      	adds	r3, r7, r0
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b29      	cmp	r3, #41	@ 0x29
 8006840:	d109      	bne.n	8006856 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006842:	4a7b      	ldr	r2, [pc, #492]	@ (8006a30 <I2C_ITSlaveCplt+0x228>)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	0011      	movs	r1, r2
 8006848:	0018      	movs	r0, r3
 800684a:	f000 fc43 	bl	80070d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2221      	movs	r2, #33	@ 0x21
 8006852:	631a      	str	r2, [r3, #48]	@ 0x30
 8006854:	e011      	b.n	800687a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006856:	220f      	movs	r2, #15
 8006858:	18bb      	adds	r3, r7, r2
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b22      	cmp	r3, #34	@ 0x22
 800685e:	d003      	beq.n	8006868 <I2C_ITSlaveCplt+0x60>
 8006860:	18bb      	adds	r3, r7, r2
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b2a      	cmp	r3, #42	@ 0x2a
 8006866:	d108      	bne.n	800687a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006868:	4a72      	ldr	r2, [pc, #456]	@ (8006a34 <I2C_ITSlaveCplt+0x22c>)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	0011      	movs	r1, r2
 800686e:	0018      	movs	r0, r3
 8006870:	f000 fc30 	bl	80070d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2222      	movs	r2, #34	@ 0x22
 8006878:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2180      	movs	r1, #128	@ 0x80
 8006886:	0209      	lsls	r1, r1, #8
 8006888:	430a      	orrs	r2, r1
 800688a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4968      	ldr	r1, [pc, #416]	@ (8006a38 <I2C_ITSlaveCplt+0x230>)
 8006898:	400a      	ands	r2, r1
 800689a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	0018      	movs	r0, r3
 80068a0:	f000 fa55 	bl	8006d4e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	2380      	movs	r3, #128	@ 0x80
 80068a8:	01db      	lsls	r3, r3, #7
 80068aa:	4013      	ands	r3, r2
 80068ac:	d013      	beq.n	80068d6 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4960      	ldr	r1, [pc, #384]	@ (8006a3c <I2C_ITSlaveCplt+0x234>)
 80068ba:	400a      	ands	r2, r1
 80068bc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d01f      	beq.n	8006906 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068d4:	e017      	b.n	8006906 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	2380      	movs	r3, #128	@ 0x80
 80068da:	021b      	lsls	r3, r3, #8
 80068dc:	4013      	ands	r3, r2
 80068de:	d012      	beq.n	8006906 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4955      	ldr	r1, [pc, #340]	@ (8006a40 <I2C_ITSlaveCplt+0x238>)
 80068ec:	400a      	ands	r2, r1
 80068ee:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d006      	beq.n	8006906 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	b29a      	uxth	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2204      	movs	r2, #4
 800690a:	4013      	ands	r3, r2
 800690c:	d020      	beq.n	8006950 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2204      	movs	r2, #4
 8006912:	4393      	bics	r3, r2
 8006914:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00c      	beq.n	8006950 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006946:	b29b      	uxth	r3, r3
 8006948:	3b01      	subs	r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006954:	b29b      	uxth	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d005      	beq.n	8006966 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800695e:	2204      	movs	r2, #4
 8006960:	431a      	orrs	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2242      	movs	r2, #66	@ 0x42
 800696a:	2100      	movs	r1, #0
 800696c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006978:	2b00      	cmp	r3, #0
 800697a:	d013      	beq.n	80069a4 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	0011      	movs	r1, r2
 8006984:	0018      	movs	r0, r3
 8006986:	f000 f8b7 	bl	8006af8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2241      	movs	r2, #65	@ 0x41
 800698e:	5c9b      	ldrb	r3, [r3, r2]
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b28      	cmp	r3, #40	@ 0x28
 8006994:	d147      	bne.n	8006a26 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	0011      	movs	r1, r2
 800699c:	0018      	movs	r0, r3
 800699e:	f000 f853 	bl	8006a48 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80069a2:	e040      	b.n	8006a26 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069a8:	4a26      	ldr	r2, [pc, #152]	@ (8006a44 <I2C_ITSlaveCplt+0x23c>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d016      	beq.n	80069dc <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	0018      	movs	r0, r3
 80069b2:	f7ff fdf7 	bl	80065a4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a22      	ldr	r2, [pc, #136]	@ (8006a44 <I2C_ITSlaveCplt+0x23c>)
 80069ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2241      	movs	r2, #65	@ 0x41
 80069c0:	2120      	movs	r1, #32
 80069c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2240      	movs	r2, #64	@ 0x40
 80069ce:	2100      	movs	r1, #0
 80069d0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	0018      	movs	r0, r3
 80069d6:	f7fe ffae 	bl	8005936 <HAL_I2C_ListenCpltCallback>
}
 80069da:	e024      	b.n	8006a26 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2241      	movs	r2, #65	@ 0x41
 80069e0:	5c9b      	ldrb	r3, [r3, r2]
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b22      	cmp	r3, #34	@ 0x22
 80069e6:	d10f      	bne.n	8006a08 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2241      	movs	r2, #65	@ 0x41
 80069ec:	2120      	movs	r1, #32
 80069ee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2240      	movs	r2, #64	@ 0x40
 80069fa:	2100      	movs	r1, #0
 80069fc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	0018      	movs	r0, r3
 8006a02:	f7fe ff80 	bl	8005906 <HAL_I2C_SlaveRxCpltCallback>
}
 8006a06:	e00e      	b.n	8006a26 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2241      	movs	r2, #65	@ 0x41
 8006a0c:	2120      	movs	r1, #32
 8006a0e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2240      	movs	r2, #64	@ 0x40
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	0018      	movs	r0, r3
 8006a22:	f7fe ff68 	bl	80058f6 <HAL_I2C_SlaveTxCpltCallback>
}
 8006a26:	46c0      	nop			@ (mov r8, r8)
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	b006      	add	sp, #24
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	46c0      	nop			@ (mov r8, r8)
 8006a30:	00008001 	.word	0x00008001
 8006a34:	00008002 	.word	0x00008002
 8006a38:	fe00e800 	.word	0xfe00e800
 8006a3c:	ffffbfff 	.word	0xffffbfff
 8006a40:	ffff7fff 	.word	0xffff7fff
 8006a44:	ffff0000 	.word	0xffff0000

08006a48 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a26      	ldr	r2, [pc, #152]	@ (8006af0 <I2C_ITListenCplt+0xa8>)
 8006a56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2241      	movs	r2, #65	@ 0x41
 8006a62:	2120      	movs	r1, #32
 8006a64:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2242      	movs	r2, #66	@ 0x42
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2204      	movs	r2, #4
 8006a78:	4013      	ands	r3, r2
 8006a7a:	d022      	beq.n	8006ac2 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8e:	1c5a      	adds	r2, r3, #1
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d012      	beq.n	8006ac2 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aba:	2204      	movs	r2, #4
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8006af4 <I2C_ITListenCplt+0xac>)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	0011      	movs	r1, r2
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f000 fb03 	bl	80070d4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2210      	movs	r2, #16
 8006ad4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2240      	movs	r2, #64	@ 0x40
 8006ada:	2100      	movs	r1, #0
 8006adc:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f7fe ff28 	bl	8005936 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006ae6:	46c0      	nop			@ (mov r8, r8)
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	b002      	add	sp, #8
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	46c0      	nop			@ (mov r8, r8)
 8006af0:	ffff0000 	.word	0xffff0000
 8006af4:	00008003 	.word	0x00008003

08006af8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006b02:	200f      	movs	r0, #15
 8006b04:	183b      	adds	r3, r7, r0
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	2141      	movs	r1, #65	@ 0x41
 8006b0a:	5c52      	ldrb	r2, [r2, r1]
 8006b0c:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2242      	movs	r2, #66	@ 0x42
 8006b12:	2100      	movs	r1, #0
 8006b14:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a72      	ldr	r2, [pc, #456]	@ (8006ce4 <I2C_ITError+0x1ec>)
 8006b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006b2e:	183b      	adds	r3, r7, r0
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	2b28      	cmp	r3, #40	@ 0x28
 8006b34:	d007      	beq.n	8006b46 <I2C_ITError+0x4e>
 8006b36:	183b      	adds	r3, r7, r0
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b29      	cmp	r3, #41	@ 0x29
 8006b3c:	d003      	beq.n	8006b46 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006b3e:	183b      	adds	r3, r7, r0
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b44:	d10c      	bne.n	8006b60 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2103      	movs	r1, #3
 8006b4a:	0018      	movs	r0, r3
 8006b4c:	f000 fac2 	bl	80070d4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2241      	movs	r2, #65	@ 0x41
 8006b54:	2128      	movs	r1, #40	@ 0x28
 8006b56:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a63      	ldr	r2, [pc, #396]	@ (8006ce8 <I2C_ITError+0x1f0>)
 8006b5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8006b5e:	e032      	b.n	8006bc6 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006b60:	4a62      	ldr	r2, [pc, #392]	@ (8006cec <I2C_ITError+0x1f4>)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	0011      	movs	r1, r2
 8006b66:	0018      	movs	r0, r3
 8006b68:	f000 fab4 	bl	80070d4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	0018      	movs	r0, r3
 8006b70:	f000 f8ed 	bl	8006d4e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2241      	movs	r2, #65	@ 0x41
 8006b78:	5c9b      	ldrb	r3, [r3, r2]
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b60      	cmp	r3, #96	@ 0x60
 8006b7e:	d01f      	beq.n	8006bc0 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2241      	movs	r2, #65	@ 0x41
 8006b84:	2120      	movs	r1, #32
 8006b86:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	4013      	ands	r3, r2
 8006b92:	2b20      	cmp	r3, #32
 8006b94:	d114      	bne.n	8006bc0 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	2210      	movs	r2, #16
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b10      	cmp	r3, #16
 8006ba2:	d109      	bne.n	8006bb8 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2210      	movs	r2, #16
 8006baa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb0:	2204      	movs	r2, #4
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d03b      	beq.n	8006c4c <I2C_ITError+0x154>
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b11      	cmp	r3, #17
 8006bd8:	d002      	beq.n	8006be0 <I2C_ITError+0xe8>
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2b21      	cmp	r3, #33	@ 0x21
 8006bde:	d135      	bne.n	8006c4c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	2380      	movs	r3, #128	@ 0x80
 8006be8:	01db      	lsls	r3, r3, #7
 8006bea:	401a      	ands	r2, r3
 8006bec:	2380      	movs	r3, #128	@ 0x80
 8006bee:	01db      	lsls	r3, r3, #7
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d107      	bne.n	8006c04 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	493c      	ldr	r1, [pc, #240]	@ (8006cf0 <I2C_ITError+0x1f8>)
 8006c00:	400a      	ands	r2, r1
 8006c02:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c08:	0018      	movs	r0, r3
 8006c0a:	f7fe f95e 	bl	8004eca <HAL_DMA_GetState>
 8006c0e:	0003      	movs	r3, r0
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d016      	beq.n	8006c42 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c18:	4a36      	ldr	r2, [pc, #216]	@ (8006cf4 <I2C_ITError+0x1fc>)
 8006c1a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2240      	movs	r2, #64	@ 0x40
 8006c20:	2100      	movs	r1, #0
 8006c22:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c28:	0018      	movs	r0, r3
 8006c2a:	f7fe f859 	bl	8004ce0 <HAL_DMA_Abort_IT>
 8006c2e:	1e03      	subs	r3, r0, #0
 8006c30:	d051      	beq.n	8006cd6 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006c40:	e049      	b.n	8006cd6 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	0018      	movs	r0, r3
 8006c46:	f000 f859 	bl	8006cfc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006c4a:	e044      	b.n	8006cd6 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d03b      	beq.n	8006ccc <I2C_ITError+0x1d4>
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2b12      	cmp	r3, #18
 8006c58:	d002      	beq.n	8006c60 <I2C_ITError+0x168>
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2b22      	cmp	r3, #34	@ 0x22
 8006c5e:	d135      	bne.n	8006ccc <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	2380      	movs	r3, #128	@ 0x80
 8006c68:	021b      	lsls	r3, r3, #8
 8006c6a:	401a      	ands	r2, r3
 8006c6c:	2380      	movs	r3, #128	@ 0x80
 8006c6e:	021b      	lsls	r3, r3, #8
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d107      	bne.n	8006c84 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	491e      	ldr	r1, [pc, #120]	@ (8006cf8 <I2C_ITError+0x200>)
 8006c80:	400a      	ands	r2, r1
 8006c82:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c88:	0018      	movs	r0, r3
 8006c8a:	f7fe f91e 	bl	8004eca <HAL_DMA_GetState>
 8006c8e:	0003      	movs	r3, r0
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d016      	beq.n	8006cc2 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c98:	4a16      	ldr	r2, [pc, #88]	@ (8006cf4 <I2C_ITError+0x1fc>)
 8006c9a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2240      	movs	r2, #64	@ 0x40
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca8:	0018      	movs	r0, r3
 8006caa:	f7fe f819 	bl	8004ce0 <HAL_DMA_Abort_IT>
 8006cae:	1e03      	subs	r3, r0, #0
 8006cb0:	d013      	beq.n	8006cda <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006cc0:	e00b      	b.n	8006cda <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	f000 f819 	bl	8006cfc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006cca:	e006      	b.n	8006cda <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	0018      	movs	r0, r3
 8006cd0:	f000 f814 	bl	8006cfc <I2C_TreatErrorCallback>
  }
}
 8006cd4:	e002      	b.n	8006cdc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006cd6:	46c0      	nop			@ (mov r8, r8)
 8006cd8:	e000      	b.n	8006cdc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006cda:	46c0      	nop			@ (mov r8, r8)
}
 8006cdc:	46c0      	nop			@ (mov r8, r8)
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	b004      	add	sp, #16
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	ffff0000 	.word	0xffff0000
 8006ce8:	08005bdd 	.word	0x08005bdd
 8006cec:	00008003 	.word	0x00008003
 8006cf0:	ffffbfff 	.word	0xffffbfff
 8006cf4:	08006f07 	.word	0x08006f07
 8006cf8:	ffff7fff 	.word	0xffff7fff

08006cfc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2241      	movs	r2, #65	@ 0x41
 8006d08:	5c9b      	ldrb	r3, [r3, r2]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b60      	cmp	r3, #96	@ 0x60
 8006d0e:	d10f      	bne.n	8006d30 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2241      	movs	r2, #65	@ 0x41
 8006d14:	2120      	movs	r1, #32
 8006d16:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2240      	movs	r2, #64	@ 0x40
 8006d22:	2100      	movs	r1, #0
 8006d24:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	0018      	movs	r0, r3
 8006d2a:	f7fe fe24 	bl	8005976 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d2e:	e00a      	b.n	8006d46 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2240      	movs	r2, #64	@ 0x40
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	0018      	movs	r0, r3
 8006d42:	f7fe fe10 	bl	8005966 <HAL_I2C_ErrorCallback>
}
 8006d46:	46c0      	nop			@ (mov r8, r8)
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	b002      	add	sp, #8
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b082      	sub	sp, #8
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	4013      	ands	r3, r2
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d103      	bne.n	8006d6c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	2201      	movs	r2, #1
 8006d74:	4013      	ands	r3, r2
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d007      	beq.n	8006d8a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	699a      	ldr	r2, [r3, #24]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2101      	movs	r1, #1
 8006d86:	430a      	orrs	r2, r1
 8006d88:	619a      	str	r2, [r3, #24]
  }
}
 8006d8a:	46c0      	nop			@ (mov r8, r8)
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	b002      	add	sp, #8
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4920      	ldr	r1, [pc, #128]	@ (8006e30 <I2C_DMAMasterTransmitCplt+0x9c>)
 8006dae:	400a      	ands	r2, r1
 8006db0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d105      	bne.n	8006dc8 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2120      	movs	r1, #32
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	f000 f8f9 	bl	8006fb8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006dc6:	e02e      	b.n	8006e26 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006dd0:	189a      	adds	r2, r3, r2
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2bff      	cmp	r3, #255	@ 0xff
 8006dde:	d903      	bls.n	8006de8 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	22ff      	movs	r2, #255	@ 0xff
 8006de4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006de6:	e004      	b.n	8006df2 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfa:	0019      	movs	r1, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3328      	adds	r3, #40	@ 0x28
 8006e02:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006e08:	f7fd ff04 	bl	8004c14 <HAL_DMA_Start_IT>
 8006e0c:	1e03      	subs	r3, r0, #0
 8006e0e:	d005      	beq.n	8006e1c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2110      	movs	r1, #16
 8006e14:	0018      	movs	r0, r3
 8006e16:	f7ff fe6f 	bl	8006af8 <I2C_ITError>
}
 8006e1a:	e004      	b.n	8006e26 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2140      	movs	r1, #64	@ 0x40
 8006e20:	0018      	movs	r0, r3
 8006e22:	f000 f8c9 	bl	8006fb8 <I2C_Enable_IRQ>
}
 8006e26:	46c0      	nop			@ (mov r8, r8)
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	b004      	add	sp, #16
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	46c0      	nop			@ (mov r8, r8)
 8006e30:	ffffbfff 	.word	0xffffbfff

08006e34 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e40:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4920      	ldr	r1, [pc, #128]	@ (8006ed0 <I2C_DMAMasterReceiveCplt+0x9c>)
 8006e4e:	400a      	ands	r2, r1
 8006e50:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d105      	bne.n	8006e68 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2120      	movs	r1, #32
 8006e60:	0018      	movs	r0, r3
 8006e62:	f000 f8a9 	bl	8006fb8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006e66:	e02e      	b.n	8006ec6 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006e70:	189a      	adds	r2, r3, r2
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	2bff      	cmp	r3, #255	@ 0xff
 8006e7e:	d903      	bls.n	8006e88 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	22ff      	movs	r2, #255	@ 0xff
 8006e84:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006e86:	e004      	b.n	8006e92 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3324      	adds	r3, #36	@ 0x24
 8006e9c:	0019      	movs	r1, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006ea8:	f7fd feb4 	bl	8004c14 <HAL_DMA_Start_IT>
 8006eac:	1e03      	subs	r3, r0, #0
 8006eae:	d005      	beq.n	8006ebc <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2110      	movs	r1, #16
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	f7ff fe1f 	bl	8006af8 <I2C_ITError>
}
 8006eba:	e004      	b.n	8006ec6 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2140      	movs	r1, #64	@ 0x40
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	f000 f879 	bl	8006fb8 <I2C_Enable_IRQ>
}
 8006ec6:	46c0      	nop			@ (mov r8, r8)
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	b004      	add	sp, #16
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	46c0      	nop			@ (mov r8, r8)
 8006ed0:	ffff7fff 	.word	0xffff7fff

08006ed4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee0:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2180      	movs	r1, #128	@ 0x80
 8006eee:	0209      	lsls	r1, r1, #8
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2110      	movs	r1, #16
 8006ef8:	0018      	movs	r0, r3
 8006efa:	f7ff fdfd 	bl	8006af8 <I2C_ITError>
}
 8006efe:	46c0      	nop			@ (mov r8, r8)
 8006f00:	46bd      	mov	sp, r7
 8006f02:	b004      	add	sp, #16
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f20:	2200      	movs	r2, #0
 8006f22:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d003      	beq.n	8006f34 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f30:	2200      	movs	r2, #0
 8006f32:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	0018      	movs	r0, r3
 8006f38:	f7ff fee0 	bl	8006cfc <I2C_TreatErrorCallback>
}
 8006f3c:	46c0      	nop			@ (mov r8, r8)
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	b004      	add	sp, #16
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006f44:	b590      	push	{r4, r7, lr}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	0008      	movs	r0, r1
 8006f4e:	0011      	movs	r1, r2
 8006f50:	607b      	str	r3, [r7, #4]
 8006f52:	240a      	movs	r4, #10
 8006f54:	193b      	adds	r3, r7, r4
 8006f56:	1c02      	adds	r2, r0, #0
 8006f58:	801a      	strh	r2, [r3, #0]
 8006f5a:	2009      	movs	r0, #9
 8006f5c:	183b      	adds	r3, r7, r0
 8006f5e:	1c0a      	adds	r2, r1, #0
 8006f60:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f62:	193b      	adds	r3, r7, r4
 8006f64:	881b      	ldrh	r3, [r3, #0]
 8006f66:	059b      	lsls	r3, r3, #22
 8006f68:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f6a:	183b      	adds	r3, r7, r0
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	0419      	lsls	r1, r3, #16
 8006f70:	23ff      	movs	r3, #255	@ 0xff
 8006f72:	041b      	lsls	r3, r3, #16
 8006f74:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f76:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	005b      	lsls	r3, r3, #1
 8006f82:	085b      	lsrs	r3, r3, #1
 8006f84:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f8e:	0d51      	lsrs	r1, r2, #21
 8006f90:	2280      	movs	r2, #128	@ 0x80
 8006f92:	00d2      	lsls	r2, r2, #3
 8006f94:	400a      	ands	r2, r1
 8006f96:	4907      	ldr	r1, [pc, #28]	@ (8006fb4 <I2C_TransferConfig+0x70>)
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	43d2      	mvns	r2, r2
 8006f9c:	401a      	ands	r2, r3
 8006f9e:	0011      	movs	r1, r2
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006faa:	46c0      	nop			@ (mov r8, r8)
 8006fac:	46bd      	mov	sp, r7
 8006fae:	b007      	add	sp, #28
 8006fb0:	bd90      	pop	{r4, r7, pc}
 8006fb2:	46c0      	nop			@ (mov r8, r8)
 8006fb4:	03ff63ff 	.word	0x03ff63ff

08006fb8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	000a      	movs	r2, r1
 8006fc2:	1cbb      	adds	r3, r7, #2
 8006fc4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fce:	4b3e      	ldr	r3, [pc, #248]	@ (80070c8 <I2C_Enable_IRQ+0x110>)
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d035      	beq.n	8007040 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006fd8:	4b3c      	ldr	r3, [pc, #240]	@ (80070cc <I2C_Enable_IRQ+0x114>)
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d030      	beq.n	8007040 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80070d0 <I2C_Enable_IRQ+0x118>)
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d02b      	beq.n	8007040 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006fe8:	1cbb      	adds	r3, r7, #2
 8006fea:	2200      	movs	r2, #0
 8006fec:	5e9b      	ldrsh	r3, [r3, r2]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	da03      	bge.n	8006ffa <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	22b8      	movs	r2, #184	@ 0xb8
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006ffa:	1cbb      	adds	r3, r7, #2
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	2201      	movs	r2, #1
 8007000:	4013      	ands	r3, r2
 8007002:	d003      	beq.n	800700c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	22f2      	movs	r2, #242	@ 0xf2
 8007008:	4313      	orrs	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800700c:	1cbb      	adds	r3, r7, #2
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	2202      	movs	r2, #2
 8007012:	4013      	ands	r3, r2
 8007014:	d003      	beq.n	800701e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	22f4      	movs	r2, #244	@ 0xf4
 800701a:	4313      	orrs	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800701e:	1cbb      	adds	r3, r7, #2
 8007020:	881b      	ldrh	r3, [r3, #0]
 8007022:	2b10      	cmp	r3, #16
 8007024:	d103      	bne.n	800702e <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2290      	movs	r2, #144	@ 0x90
 800702a:	4313      	orrs	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800702e:	1cbb      	adds	r3, r7, #2
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	2b20      	cmp	r3, #32
 8007034:	d13c      	bne.n	80070b0 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2220      	movs	r2, #32
 800703a:	4313      	orrs	r3, r2
 800703c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800703e:	e037      	b.n	80070b0 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007040:	1cbb      	adds	r3, r7, #2
 8007042:	2200      	movs	r2, #0
 8007044:	5e9b      	ldrsh	r3, [r3, r2]
 8007046:	2b00      	cmp	r3, #0
 8007048:	da03      	bge.n	8007052 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	22b8      	movs	r2, #184	@ 0xb8
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007052:	1cbb      	adds	r3, r7, #2
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	2201      	movs	r2, #1
 8007058:	4013      	ands	r3, r2
 800705a:	d003      	beq.n	8007064 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	22f2      	movs	r2, #242	@ 0xf2
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007064:	1cbb      	adds	r3, r7, #2
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	2202      	movs	r2, #2
 800706a:	4013      	ands	r3, r2
 800706c:	d003      	beq.n	8007076 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	22f4      	movs	r2, #244	@ 0xf4
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007076:	1cbb      	adds	r3, r7, #2
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	2b10      	cmp	r3, #16
 800707c:	d103      	bne.n	8007086 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2290      	movs	r2, #144	@ 0x90
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007086:	1cbb      	adds	r3, r7, #2
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	2b20      	cmp	r3, #32
 800708c:	d103      	bne.n	8007096 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2260      	movs	r2, #96	@ 0x60
 8007092:	4313      	orrs	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800709a:	4b0d      	ldr	r3, [pc, #52]	@ (80070d0 <I2C_Enable_IRQ+0x118>)
 800709c:	429a      	cmp	r2, r3
 800709e:	d007      	beq.n	80070b0 <I2C_Enable_IRQ+0xf8>
 80070a0:	1cbb      	adds	r3, r7, #2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	2b40      	cmp	r3, #64	@ 0x40
 80070a6:	d103      	bne.n	80070b0 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2240      	movs	r2, #64	@ 0x40
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6819      	ldr	r1, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	430a      	orrs	r2, r1
 80070be:	601a      	str	r2, [r3, #0]
}
 80070c0:	46c0      	nop			@ (mov r8, r8)
 80070c2:	46bd      	mov	sp, r7
 80070c4:	b004      	add	sp, #16
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	08005ddd 	.word	0x08005ddd
 80070cc:	0800620d 	.word	0x0800620d
 80070d0:	08005fd5 	.word	0x08005fd5

080070d4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	000a      	movs	r2, r1
 80070de:	1cbb      	adds	r3, r7, #2
 80070e0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80070e6:	1cbb      	adds	r3, r7, #2
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	2201      	movs	r2, #1
 80070ec:	4013      	ands	r3, r2
 80070ee:	d010      	beq.n	8007112 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2242      	movs	r2, #66	@ 0x42
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2241      	movs	r2, #65	@ 0x41
 80070fc:	5c9b      	ldrb	r3, [r3, r2]
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	001a      	movs	r2, r3
 8007102:	2328      	movs	r3, #40	@ 0x28
 8007104:	4013      	ands	r3, r2
 8007106:	2b28      	cmp	r3, #40	@ 0x28
 8007108:	d003      	beq.n	8007112 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	22b0      	movs	r2, #176	@ 0xb0
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007112:	1cbb      	adds	r3, r7, #2
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	2202      	movs	r2, #2
 8007118:	4013      	ands	r3, r2
 800711a:	d010      	beq.n	800713e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2244      	movs	r2, #68	@ 0x44
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2241      	movs	r2, #65	@ 0x41
 8007128:	5c9b      	ldrb	r3, [r3, r2]
 800712a:	b2db      	uxtb	r3, r3
 800712c:	001a      	movs	r2, r3
 800712e:	2328      	movs	r3, #40	@ 0x28
 8007130:	4013      	ands	r3, r2
 8007132:	2b28      	cmp	r3, #40	@ 0x28
 8007134:	d003      	beq.n	800713e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	22b0      	movs	r2, #176	@ 0xb0
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800713e:	1cbb      	adds	r3, r7, #2
 8007140:	2200      	movs	r2, #0
 8007142:	5e9b      	ldrsh	r3, [r3, r2]
 8007144:	2b00      	cmp	r3, #0
 8007146:	da03      	bge.n	8007150 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	22b8      	movs	r2, #184	@ 0xb8
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007150:	1cbb      	adds	r3, r7, #2
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	2b10      	cmp	r3, #16
 8007156:	d103      	bne.n	8007160 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2290      	movs	r2, #144	@ 0x90
 800715c:	4313      	orrs	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007160:	1cbb      	adds	r3, r7, #2
 8007162:	881b      	ldrh	r3, [r3, #0]
 8007164:	2b20      	cmp	r3, #32
 8007166:	d103      	bne.n	8007170 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2220      	movs	r2, #32
 800716c:	4313      	orrs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007170:	1cbb      	adds	r3, r7, #2
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	2b40      	cmp	r3, #64	@ 0x40
 8007176:	d103      	bne.n	8007180 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2240      	movs	r2, #64	@ 0x40
 800717c:	4313      	orrs	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	43d9      	mvns	r1, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	400a      	ands	r2, r1
 8007190:	601a      	str	r2, [r3, #0]
}
 8007192:	46c0      	nop			@ (mov r8, r8)
 8007194:	46bd      	mov	sp, r7
 8007196:	b004      	add	sp, #16
 8007198:	bd80      	pop	{r7, pc}
	...

0800719c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2241      	movs	r2, #65	@ 0x41
 80071aa:	5c9b      	ldrb	r3, [r3, r2]
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	d138      	bne.n	8007224 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2240      	movs	r2, #64	@ 0x40
 80071b6:	5c9b      	ldrb	r3, [r3, r2]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d101      	bne.n	80071c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80071bc:	2302      	movs	r3, #2
 80071be:	e032      	b.n	8007226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2240      	movs	r2, #64	@ 0x40
 80071c4:	2101      	movs	r1, #1
 80071c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2241      	movs	r2, #65	@ 0x41
 80071cc:	2124      	movs	r1, #36	@ 0x24
 80071ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2101      	movs	r1, #1
 80071dc:	438a      	bics	r2, r1
 80071de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4911      	ldr	r1, [pc, #68]	@ (8007230 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80071ec:	400a      	ands	r2, r1
 80071ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6819      	ldr	r1, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	683a      	ldr	r2, [r7, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2101      	movs	r1, #1
 800720c:	430a      	orrs	r2, r1
 800720e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2241      	movs	r2, #65	@ 0x41
 8007214:	2120      	movs	r1, #32
 8007216:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2240      	movs	r2, #64	@ 0x40
 800721c:	2100      	movs	r1, #0
 800721e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	e000      	b.n	8007226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007224:	2302      	movs	r3, #2
  }
}
 8007226:	0018      	movs	r0, r3
 8007228:	46bd      	mov	sp, r7
 800722a:	b002      	add	sp, #8
 800722c:	bd80      	pop	{r7, pc}
 800722e:	46c0      	nop			@ (mov r8, r8)
 8007230:	ffffefff 	.word	0xffffefff

08007234 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2241      	movs	r2, #65	@ 0x41
 8007242:	5c9b      	ldrb	r3, [r3, r2]
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b20      	cmp	r3, #32
 8007248:	d139      	bne.n	80072be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2240      	movs	r2, #64	@ 0x40
 800724e:	5c9b      	ldrb	r3, [r3, r2]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d101      	bne.n	8007258 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007254:	2302      	movs	r3, #2
 8007256:	e033      	b.n	80072c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2240      	movs	r2, #64	@ 0x40
 800725c:	2101      	movs	r1, #1
 800725e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2241      	movs	r2, #65	@ 0x41
 8007264:	2124      	movs	r1, #36	@ 0x24
 8007266:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2101      	movs	r1, #1
 8007274:	438a      	bics	r2, r1
 8007276:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4a11      	ldr	r2, [pc, #68]	@ (80072c8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007284:	4013      	ands	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	021b      	lsls	r3, r3, #8
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	4313      	orrs	r3, r2
 8007290:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2101      	movs	r1, #1
 80072a6:	430a      	orrs	r2, r1
 80072a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2241      	movs	r2, #65	@ 0x41
 80072ae:	2120      	movs	r1, #32
 80072b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2240      	movs	r2, #64	@ 0x40
 80072b6:	2100      	movs	r1, #0
 80072b8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	e000      	b.n	80072c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80072be:	2302      	movs	r3, #2
  }
}
 80072c0:	0018      	movs	r0, r3
 80072c2:	46bd      	mov	sp, r7
 80072c4:	b004      	add	sp, #16
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	fffff0ff 	.word	0xfffff0ff

080072cc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b088      	sub	sp, #32
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e0e1      	b.n	80074a2 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2235      	movs	r2, #53	@ 0x35
 80072e2:	5c9b      	ldrb	r3, [r3, r2]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d107      	bne.n	80072fa <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2234      	movs	r2, #52	@ 0x34
 80072ee:	2100      	movs	r1, #0
 80072f0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	0018      	movs	r0, r3
 80072f6:	f7fc f94f 	bl	8003598 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2235      	movs	r2, #53	@ 0x35
 80072fe:	2102      	movs	r1, #2
 8007300:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69da      	ldr	r2, [r3, #28]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4967      	ldr	r1, [pc, #412]	@ (80074ac <HAL_I2S_Init+0x1e0>)
 800730e:	400a      	ands	r2, r1
 8007310:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2202      	movs	r2, #2
 8007318:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	2b02      	cmp	r3, #2
 8007320:	d073      	beq.n	800740a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d102      	bne.n	8007330 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800732a:	2310      	movs	r3, #16
 800732c:	617b      	str	r3, [r7, #20]
 800732e:	e001      	b.n	8007334 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8007330:	2320      	movs	r3, #32
 8007332:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	2b20      	cmp	r3, #32
 800733a:	d802      	bhi.n	8007342 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8007342:	f000 fdd1 	bl	8007ee8 <HAL_RCC_GetSysClockFreq>
 8007346:	0003      	movs	r3, r0
 8007348:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691a      	ldr	r2, [r3, #16]
 800734e:	2380      	movs	r3, #128	@ 0x80
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	429a      	cmp	r2, r3
 8007354:	d131      	bne.n	80073ba <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d016      	beq.n	800738c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	0019      	movs	r1, r3
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f7f8 feeb 	bl	8000140 <__udivsi3>
 800736a:	0003      	movs	r3, r0
 800736c:	001a      	movs	r2, r3
 800736e:	0013      	movs	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	189b      	adds	r3, r3, r2
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	001a      	movs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	0019      	movs	r1, r3
 800737e:	0010      	movs	r0, r2
 8007380:	f7f8 fede 	bl	8000140 <__udivsi3>
 8007384:	0003      	movs	r3, r0
 8007386:	3305      	adds	r3, #5
 8007388:	613b      	str	r3, [r7, #16]
 800738a:	e02a      	b.n	80073e2 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	00db      	lsls	r3, r3, #3
 8007390:	0019      	movs	r1, r3
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f7f8 fed4 	bl	8000140 <__udivsi3>
 8007398:	0003      	movs	r3, r0
 800739a:	001a      	movs	r2, r3
 800739c:	0013      	movs	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	189b      	adds	r3, r3, r2
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	001a      	movs	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	0019      	movs	r1, r3
 80073ac:	0010      	movs	r0, r2
 80073ae:	f7f8 fec7 	bl	8000140 <__udivsi3>
 80073b2:	0003      	movs	r3, r0
 80073b4:	3305      	adds	r3, #5
 80073b6:	613b      	str	r3, [r7, #16]
 80073b8:	e013      	b.n	80073e2 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80073ba:	6979      	ldr	r1, [r7, #20]
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f7f8 febf 	bl	8000140 <__udivsi3>
 80073c2:	0003      	movs	r3, r0
 80073c4:	001a      	movs	r2, r3
 80073c6:	0013      	movs	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	189b      	adds	r3, r3, r2
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	001a      	movs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	0019      	movs	r1, r3
 80073d6:	0010      	movs	r0, r2
 80073d8:	f7f8 feb2 	bl	8000140 <__udivsi3>
 80073dc:	0003      	movs	r3, r0
 80073de:	3305      	adds	r3, #5
 80073e0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	210a      	movs	r1, #10
 80073e6:	0018      	movs	r0, r3
 80073e8:	f7f8 feaa 	bl	8000140 <__udivsi3>
 80073ec:	0003      	movs	r3, r0
 80073ee:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	2201      	movs	r2, #1
 80073f4:	4013      	ands	r3, r2
 80073f6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	021b      	lsls	r3, r3, #8
 8007406:	61bb      	str	r3, [r7, #24]
 8007408:	e003      	b.n	8007412 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800740a:	2302      	movs	r3, #2
 800740c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d902      	bls.n	800741e <HAL_I2S_Init+0x152>
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	2bff      	cmp	r3, #255	@ 0xff
 800741c:	d907      	bls.n	800742e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007422:	2210      	movs	r2, #16
 8007424:	431a      	orrs	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e039      	b.n	80074a2 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	691a      	ldr	r2, [r3, #16]
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	431a      	orrs	r2, r3
 8007436:	0011      	movs	r1, r2
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	69fa      	ldr	r2, [r7, #28]
 800743e:	430a      	orrs	r2, r1
 8007440:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	4a18      	ldr	r2, [pc, #96]	@ (80074ac <HAL_I2S_Init+0x1e0>)
 800744a:	401a      	ands	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6859      	ldr	r1, [r3, #4]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	4319      	orrs	r1, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	4319      	orrs	r1, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	430b      	orrs	r3, r1
 8007462:	431a      	orrs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2180      	movs	r1, #128	@ 0x80
 800746a:	0109      	lsls	r1, r1, #4
 800746c:	430a      	orrs	r2, r1
 800746e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	2b30      	cmp	r3, #48	@ 0x30
 8007476:	d003      	beq.n	8007480 <HAL_I2S_Init+0x1b4>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	2bb0      	cmp	r3, #176	@ 0xb0
 800747e:	d108      	bne.n	8007492 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69da      	ldr	r2, [r3, #28]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2180      	movs	r1, #128	@ 0x80
 800748c:	0149      	lsls	r1, r1, #5
 800748e:	430a      	orrs	r2, r1
 8007490:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2235      	movs	r2, #53	@ 0x35
 800749c:	2101      	movs	r1, #1
 800749e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	0018      	movs	r0, r3
 80074a4:	46bd      	mov	sp, r7
 80074a6:	b008      	add	sp, #32
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	46c0      	nop			@ (mov r8, r8)
 80074ac:	fffff040 	.word	0xfffff040

080074b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074b0:	b5b0      	push	{r4, r5, r7, lr}
 80074b2:	b08a      	sub	sp, #40	@ 0x28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d102      	bne.n	80074c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	f000 fbbf 	bl	8007c42 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074c4:	4bc9      	ldr	r3, [pc, #804]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	220c      	movs	r2, #12
 80074ca:	4013      	ands	r3, r2
 80074cc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074ce:	4bc7      	ldr	r3, [pc, #796]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 80074d0:	68da      	ldr	r2, [r3, #12]
 80074d2:	2380      	movs	r3, #128	@ 0x80
 80074d4:	025b      	lsls	r3, r3, #9
 80074d6:	4013      	ands	r3, r2
 80074d8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2201      	movs	r2, #1
 80074e0:	4013      	ands	r3, r2
 80074e2:	d100      	bne.n	80074e6 <HAL_RCC_OscConfig+0x36>
 80074e4:	e07e      	b.n	80075e4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d007      	beq.n	80074fc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	2b0c      	cmp	r3, #12
 80074f0:	d112      	bne.n	8007518 <HAL_RCC_OscConfig+0x68>
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	2380      	movs	r3, #128	@ 0x80
 80074f6:	025b      	lsls	r3, r3, #9
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d10d      	bne.n	8007518 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074fc:	4bbb      	ldr	r3, [pc, #748]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	2380      	movs	r3, #128	@ 0x80
 8007502:	029b      	lsls	r3, r3, #10
 8007504:	4013      	ands	r3, r2
 8007506:	d100      	bne.n	800750a <HAL_RCC_OscConfig+0x5a>
 8007508:	e06b      	b.n	80075e2 <HAL_RCC_OscConfig+0x132>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d167      	bne.n	80075e2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	f000 fb95 	bl	8007c42 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	2380      	movs	r3, #128	@ 0x80
 800751e:	025b      	lsls	r3, r3, #9
 8007520:	429a      	cmp	r2, r3
 8007522:	d107      	bne.n	8007534 <HAL_RCC_OscConfig+0x84>
 8007524:	4bb1      	ldr	r3, [pc, #708]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	4bb0      	ldr	r3, [pc, #704]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 800752a:	2180      	movs	r1, #128	@ 0x80
 800752c:	0249      	lsls	r1, r1, #9
 800752e:	430a      	orrs	r2, r1
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	e027      	b.n	8007584 <HAL_RCC_OscConfig+0xd4>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	23a0      	movs	r3, #160	@ 0xa0
 800753a:	02db      	lsls	r3, r3, #11
 800753c:	429a      	cmp	r2, r3
 800753e:	d10e      	bne.n	800755e <HAL_RCC_OscConfig+0xae>
 8007540:	4baa      	ldr	r3, [pc, #680]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	4ba9      	ldr	r3, [pc, #676]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 8007546:	2180      	movs	r1, #128	@ 0x80
 8007548:	02c9      	lsls	r1, r1, #11
 800754a:	430a      	orrs	r2, r1
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	4ba7      	ldr	r3, [pc, #668]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	4ba6      	ldr	r3, [pc, #664]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 8007554:	2180      	movs	r1, #128	@ 0x80
 8007556:	0249      	lsls	r1, r1, #9
 8007558:	430a      	orrs	r2, r1
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	e012      	b.n	8007584 <HAL_RCC_OscConfig+0xd4>
 800755e:	4ba3      	ldr	r3, [pc, #652]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	4ba2      	ldr	r3, [pc, #648]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 8007564:	49a2      	ldr	r1, [pc, #648]	@ (80077f0 <HAL_RCC_OscConfig+0x340>)
 8007566:	400a      	ands	r2, r1
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	4ba0      	ldr	r3, [pc, #640]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	2380      	movs	r3, #128	@ 0x80
 8007570:	025b      	lsls	r3, r3, #9
 8007572:	4013      	ands	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	4b9c      	ldr	r3, [pc, #624]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	4b9b      	ldr	r3, [pc, #620]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 800757e:	499d      	ldr	r1, [pc, #628]	@ (80077f4 <HAL_RCC_OscConfig+0x344>)
 8007580:	400a      	ands	r2, r1
 8007582:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d015      	beq.n	80075b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800758c:	f7fd f9be 	bl	800490c <HAL_GetTick>
 8007590:	0003      	movs	r3, r0
 8007592:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007594:	e009      	b.n	80075aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007596:	f7fd f9b9 	bl	800490c <HAL_GetTick>
 800759a:	0002      	movs	r2, r0
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b64      	cmp	r3, #100	@ 0x64
 80075a2:	d902      	bls.n	80075aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	f000 fb4c 	bl	8007c42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075aa:	4b90      	ldr	r3, [pc, #576]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	2380      	movs	r3, #128	@ 0x80
 80075b0:	029b      	lsls	r3, r3, #10
 80075b2:	4013      	ands	r3, r2
 80075b4:	d0ef      	beq.n	8007596 <HAL_RCC_OscConfig+0xe6>
 80075b6:	e015      	b.n	80075e4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075b8:	f7fd f9a8 	bl	800490c <HAL_GetTick>
 80075bc:	0003      	movs	r3, r0
 80075be:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80075c0:	e008      	b.n	80075d4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075c2:	f7fd f9a3 	bl	800490c <HAL_GetTick>
 80075c6:	0002      	movs	r2, r0
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	2b64      	cmp	r3, #100	@ 0x64
 80075ce:	d901      	bls.n	80075d4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e336      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80075d4:	4b85      	ldr	r3, [pc, #532]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	2380      	movs	r3, #128	@ 0x80
 80075da:	029b      	lsls	r3, r3, #10
 80075dc:	4013      	ands	r3, r2
 80075de:	d1f0      	bne.n	80075c2 <HAL_RCC_OscConfig+0x112>
 80075e0:	e000      	b.n	80075e4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075e2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2202      	movs	r2, #2
 80075ea:	4013      	ands	r3, r2
 80075ec:	d100      	bne.n	80075f0 <HAL_RCC_OscConfig+0x140>
 80075ee:	e099      	b.n	8007724 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80075f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f8:	2220      	movs	r2, #32
 80075fa:	4013      	ands	r3, r2
 80075fc:	d009      	beq.n	8007612 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80075fe:	4b7b      	ldr	r3, [pc, #492]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	4b7a      	ldr	r3, [pc, #488]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 8007604:	2120      	movs	r1, #32
 8007606:	430a      	orrs	r2, r1
 8007608:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800760a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760c:	2220      	movs	r2, #32
 800760e:	4393      	bics	r3, r2
 8007610:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	2b04      	cmp	r3, #4
 8007616:	d005      	beq.n	8007624 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	2b0c      	cmp	r3, #12
 800761c:	d13e      	bne.n	800769c <HAL_RCC_OscConfig+0x1ec>
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d13b      	bne.n	800769c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8007624:	4b71      	ldr	r3, [pc, #452]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2204      	movs	r2, #4
 800762a:	4013      	ands	r3, r2
 800762c:	d004      	beq.n	8007638 <HAL_RCC_OscConfig+0x188>
 800762e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e304      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007638:	4b6c      	ldr	r3, [pc, #432]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	4a6e      	ldr	r2, [pc, #440]	@ (80077f8 <HAL_RCC_OscConfig+0x348>)
 800763e:	4013      	ands	r3, r2
 8007640:	0019      	movs	r1, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	021a      	lsls	r2, r3, #8
 8007648:	4b68      	ldr	r3, [pc, #416]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 800764a:	430a      	orrs	r2, r1
 800764c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800764e:	4b67      	ldr	r3, [pc, #412]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2209      	movs	r2, #9
 8007654:	4393      	bics	r3, r2
 8007656:	0019      	movs	r1, r3
 8007658:	4b64      	ldr	r3, [pc, #400]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 800765a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800765c:	430a      	orrs	r2, r1
 800765e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007660:	f000 fc42 	bl	8007ee8 <HAL_RCC_GetSysClockFreq>
 8007664:	0001      	movs	r1, r0
 8007666:	4b61      	ldr	r3, [pc, #388]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	091b      	lsrs	r3, r3, #4
 800766c:	220f      	movs	r2, #15
 800766e:	4013      	ands	r3, r2
 8007670:	4a62      	ldr	r2, [pc, #392]	@ (80077fc <HAL_RCC_OscConfig+0x34c>)
 8007672:	5cd3      	ldrb	r3, [r2, r3]
 8007674:	000a      	movs	r2, r1
 8007676:	40da      	lsrs	r2, r3
 8007678:	4b61      	ldr	r3, [pc, #388]	@ (8007800 <HAL_RCC_OscConfig+0x350>)
 800767a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800767c:	4b61      	ldr	r3, [pc, #388]	@ (8007804 <HAL_RCC_OscConfig+0x354>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2513      	movs	r5, #19
 8007682:	197c      	adds	r4, r7, r5
 8007684:	0018      	movs	r0, r3
 8007686:	f7fd f8fb 	bl	8004880 <HAL_InitTick>
 800768a:	0003      	movs	r3, r0
 800768c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800768e:	197b      	adds	r3, r7, r5
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d046      	beq.n	8007724 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8007696:	197b      	adds	r3, r7, r5
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	e2d2      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800769c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d027      	beq.n	80076f2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80076a2:	4b52      	ldr	r3, [pc, #328]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2209      	movs	r2, #9
 80076a8:	4393      	bics	r3, r2
 80076aa:	0019      	movs	r1, r3
 80076ac:	4b4f      	ldr	r3, [pc, #316]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 80076ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076b0:	430a      	orrs	r2, r1
 80076b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076b4:	f7fd f92a 	bl	800490c <HAL_GetTick>
 80076b8:	0003      	movs	r3, r0
 80076ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076bc:	e008      	b.n	80076d0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076be:	f7fd f925 	bl	800490c <HAL_GetTick>
 80076c2:	0002      	movs	r2, r0
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d901      	bls.n	80076d0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e2b8      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80076d0:	4b46      	ldr	r3, [pc, #280]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2204      	movs	r2, #4
 80076d6:	4013      	ands	r3, r2
 80076d8:	d0f1      	beq.n	80076be <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076da:	4b44      	ldr	r3, [pc, #272]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	4a46      	ldr	r2, [pc, #280]	@ (80077f8 <HAL_RCC_OscConfig+0x348>)
 80076e0:	4013      	ands	r3, r2
 80076e2:	0019      	movs	r1, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	021a      	lsls	r2, r3, #8
 80076ea:	4b40      	ldr	r3, [pc, #256]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 80076ec:	430a      	orrs	r2, r1
 80076ee:	605a      	str	r2, [r3, #4]
 80076f0:	e018      	b.n	8007724 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076f2:	4b3e      	ldr	r3, [pc, #248]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	4b3d      	ldr	r3, [pc, #244]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 80076f8:	2101      	movs	r1, #1
 80076fa:	438a      	bics	r2, r1
 80076fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076fe:	f7fd f905 	bl	800490c <HAL_GetTick>
 8007702:	0003      	movs	r3, r0
 8007704:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007706:	e008      	b.n	800771a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007708:	f7fd f900 	bl	800490c <HAL_GetTick>
 800770c:	0002      	movs	r2, r0
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b02      	cmp	r3, #2
 8007714:	d901      	bls.n	800771a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e293      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800771a:	4b34      	ldr	r3, [pc, #208]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2204      	movs	r2, #4
 8007720:	4013      	ands	r3, r2
 8007722:	d1f1      	bne.n	8007708 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2210      	movs	r2, #16
 800772a:	4013      	ands	r3, r2
 800772c:	d100      	bne.n	8007730 <HAL_RCC_OscConfig+0x280>
 800772e:	e0a2      	b.n	8007876 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d140      	bne.n	80077b8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007736:	4b2d      	ldr	r3, [pc, #180]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	2380      	movs	r3, #128	@ 0x80
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4013      	ands	r3, r2
 8007740:	d005      	beq.n	800774e <HAL_RCC_OscConfig+0x29e>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	69db      	ldr	r3, [r3, #28]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e279      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800774e:	4b27      	ldr	r3, [pc, #156]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	4a2d      	ldr	r2, [pc, #180]	@ (8007808 <HAL_RCC_OscConfig+0x358>)
 8007754:	4013      	ands	r3, r2
 8007756:	0019      	movs	r1, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800775c:	4b23      	ldr	r3, [pc, #140]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 800775e:	430a      	orrs	r2, r1
 8007760:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007762:	4b22      	ldr	r3, [pc, #136]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	021b      	lsls	r3, r3, #8
 8007768:	0a19      	lsrs	r1, r3, #8
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	061a      	lsls	r2, r3, #24
 8007770:	4b1e      	ldr	r3, [pc, #120]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 8007772:	430a      	orrs	r2, r1
 8007774:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800777a:	0b5b      	lsrs	r3, r3, #13
 800777c:	3301      	adds	r3, #1
 800777e:	2280      	movs	r2, #128	@ 0x80
 8007780:	0212      	lsls	r2, r2, #8
 8007782:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007784:	4b19      	ldr	r3, [pc, #100]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	091b      	lsrs	r3, r3, #4
 800778a:	210f      	movs	r1, #15
 800778c:	400b      	ands	r3, r1
 800778e:	491b      	ldr	r1, [pc, #108]	@ (80077fc <HAL_RCC_OscConfig+0x34c>)
 8007790:	5ccb      	ldrb	r3, [r1, r3]
 8007792:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007794:	4b1a      	ldr	r3, [pc, #104]	@ (8007800 <HAL_RCC_OscConfig+0x350>)
 8007796:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8007798:	4b1a      	ldr	r3, [pc, #104]	@ (8007804 <HAL_RCC_OscConfig+0x354>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2513      	movs	r5, #19
 800779e:	197c      	adds	r4, r7, r5
 80077a0:	0018      	movs	r0, r3
 80077a2:	f7fd f86d 	bl	8004880 <HAL_InitTick>
 80077a6:	0003      	movs	r3, r0
 80077a8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80077aa:	197b      	adds	r3, r7, r5
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d061      	beq.n	8007876 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80077b2:	197b      	adds	r3, r7, r5
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	e244      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d040      	beq.n	8007842 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80077c0:	4b0a      	ldr	r3, [pc, #40]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	4b09      	ldr	r3, [pc, #36]	@ (80077ec <HAL_RCC_OscConfig+0x33c>)
 80077c6:	2180      	movs	r1, #128	@ 0x80
 80077c8:	0049      	lsls	r1, r1, #1
 80077ca:	430a      	orrs	r2, r1
 80077cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077ce:	f7fd f89d 	bl	800490c <HAL_GetTick>
 80077d2:	0003      	movs	r3, r0
 80077d4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80077d6:	e019      	b.n	800780c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80077d8:	f7fd f898 	bl	800490c <HAL_GetTick>
 80077dc:	0002      	movs	r2, r0
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d912      	bls.n	800780c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e22b      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
 80077ea:	46c0      	nop			@ (mov r8, r8)
 80077ec:	40021000 	.word	0x40021000
 80077f0:	fffeffff 	.word	0xfffeffff
 80077f4:	fffbffff 	.word	0xfffbffff
 80077f8:	ffffe0ff 	.word	0xffffe0ff
 80077fc:	0800c134 	.word	0x0800c134
 8007800:	20000008 	.word	0x20000008
 8007804:	2000001c 	.word	0x2000001c
 8007808:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800780c:	4bca      	ldr	r3, [pc, #808]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	2380      	movs	r3, #128	@ 0x80
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4013      	ands	r3, r2
 8007816:	d0df      	beq.n	80077d8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007818:	4bc7      	ldr	r3, [pc, #796]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	4ac7      	ldr	r2, [pc, #796]	@ (8007b3c <HAL_RCC_OscConfig+0x68c>)
 800781e:	4013      	ands	r3, r2
 8007820:	0019      	movs	r1, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007826:	4bc4      	ldr	r3, [pc, #784]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007828:	430a      	orrs	r2, r1
 800782a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800782c:	4bc2      	ldr	r3, [pc, #776]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	021b      	lsls	r3, r3, #8
 8007832:	0a19      	lsrs	r1, r3, #8
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	061a      	lsls	r2, r3, #24
 800783a:	4bbf      	ldr	r3, [pc, #764]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 800783c:	430a      	orrs	r2, r1
 800783e:	605a      	str	r2, [r3, #4]
 8007840:	e019      	b.n	8007876 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007842:	4bbd      	ldr	r3, [pc, #756]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	4bbc      	ldr	r3, [pc, #752]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007848:	49bd      	ldr	r1, [pc, #756]	@ (8007b40 <HAL_RCC_OscConfig+0x690>)
 800784a:	400a      	ands	r2, r1
 800784c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800784e:	f7fd f85d 	bl	800490c <HAL_GetTick>
 8007852:	0003      	movs	r3, r0
 8007854:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007856:	e008      	b.n	800786a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007858:	f7fd f858 	bl	800490c <HAL_GetTick>
 800785c:	0002      	movs	r2, r0
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	2b02      	cmp	r3, #2
 8007864:	d901      	bls.n	800786a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e1eb      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800786a:	4bb3      	ldr	r3, [pc, #716]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	2380      	movs	r3, #128	@ 0x80
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4013      	ands	r3, r2
 8007874:	d1f0      	bne.n	8007858 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2208      	movs	r2, #8
 800787c:	4013      	ands	r3, r2
 800787e:	d036      	beq.n	80078ee <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d019      	beq.n	80078bc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007888:	4bab      	ldr	r3, [pc, #684]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 800788a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800788c:	4baa      	ldr	r3, [pc, #680]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 800788e:	2101      	movs	r1, #1
 8007890:	430a      	orrs	r2, r1
 8007892:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007894:	f7fd f83a 	bl	800490c <HAL_GetTick>
 8007898:	0003      	movs	r3, r0
 800789a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800789c:	e008      	b.n	80078b0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800789e:	f7fd f835 	bl	800490c <HAL_GetTick>
 80078a2:	0002      	movs	r2, r0
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d901      	bls.n	80078b0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e1c8      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80078b0:	4ba1      	ldr	r3, [pc, #644]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 80078b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b4:	2202      	movs	r2, #2
 80078b6:	4013      	ands	r3, r2
 80078b8:	d0f1      	beq.n	800789e <HAL_RCC_OscConfig+0x3ee>
 80078ba:	e018      	b.n	80078ee <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078bc:	4b9e      	ldr	r3, [pc, #632]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 80078be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80078c0:	4b9d      	ldr	r3, [pc, #628]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 80078c2:	2101      	movs	r1, #1
 80078c4:	438a      	bics	r2, r1
 80078c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078c8:	f7fd f820 	bl	800490c <HAL_GetTick>
 80078cc:	0003      	movs	r3, r0
 80078ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80078d0:	e008      	b.n	80078e4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078d2:	f7fd f81b 	bl	800490c <HAL_GetTick>
 80078d6:	0002      	movs	r2, r0
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d901      	bls.n	80078e4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e1ae      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80078e4:	4b94      	ldr	r3, [pc, #592]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 80078e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078e8:	2202      	movs	r2, #2
 80078ea:	4013      	ands	r3, r2
 80078ec:	d1f1      	bne.n	80078d2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2204      	movs	r2, #4
 80078f4:	4013      	ands	r3, r2
 80078f6:	d100      	bne.n	80078fa <HAL_RCC_OscConfig+0x44a>
 80078f8:	e0ae      	b.n	8007a58 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078fa:	2023      	movs	r0, #35	@ 0x23
 80078fc:	183b      	adds	r3, r7, r0
 80078fe:	2200      	movs	r2, #0
 8007900:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007902:	4b8d      	ldr	r3, [pc, #564]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007906:	2380      	movs	r3, #128	@ 0x80
 8007908:	055b      	lsls	r3, r3, #21
 800790a:	4013      	ands	r3, r2
 800790c:	d109      	bne.n	8007922 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800790e:	4b8a      	ldr	r3, [pc, #552]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007910:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007912:	4b89      	ldr	r3, [pc, #548]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007914:	2180      	movs	r1, #128	@ 0x80
 8007916:	0549      	lsls	r1, r1, #21
 8007918:	430a      	orrs	r2, r1
 800791a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800791c:	183b      	adds	r3, r7, r0
 800791e:	2201      	movs	r2, #1
 8007920:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007922:	4b88      	ldr	r3, [pc, #544]	@ (8007b44 <HAL_RCC_OscConfig+0x694>)
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	2380      	movs	r3, #128	@ 0x80
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	4013      	ands	r3, r2
 800792c:	d11a      	bne.n	8007964 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800792e:	4b85      	ldr	r3, [pc, #532]	@ (8007b44 <HAL_RCC_OscConfig+0x694>)
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	4b84      	ldr	r3, [pc, #528]	@ (8007b44 <HAL_RCC_OscConfig+0x694>)
 8007934:	2180      	movs	r1, #128	@ 0x80
 8007936:	0049      	lsls	r1, r1, #1
 8007938:	430a      	orrs	r2, r1
 800793a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800793c:	f7fc ffe6 	bl	800490c <HAL_GetTick>
 8007940:	0003      	movs	r3, r0
 8007942:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007944:	e008      	b.n	8007958 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007946:	f7fc ffe1 	bl	800490c <HAL_GetTick>
 800794a:	0002      	movs	r2, r0
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	2b64      	cmp	r3, #100	@ 0x64
 8007952:	d901      	bls.n	8007958 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e174      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007958:	4b7a      	ldr	r3, [pc, #488]	@ (8007b44 <HAL_RCC_OscConfig+0x694>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	2380      	movs	r3, #128	@ 0x80
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	4013      	ands	r3, r2
 8007962:	d0f0      	beq.n	8007946 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689a      	ldr	r2, [r3, #8]
 8007968:	2380      	movs	r3, #128	@ 0x80
 800796a:	005b      	lsls	r3, r3, #1
 800796c:	429a      	cmp	r2, r3
 800796e:	d107      	bne.n	8007980 <HAL_RCC_OscConfig+0x4d0>
 8007970:	4b71      	ldr	r3, [pc, #452]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007972:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007974:	4b70      	ldr	r3, [pc, #448]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007976:	2180      	movs	r1, #128	@ 0x80
 8007978:	0049      	lsls	r1, r1, #1
 800797a:	430a      	orrs	r2, r1
 800797c:	651a      	str	r2, [r3, #80]	@ 0x50
 800797e:	e031      	b.n	80079e4 <HAL_RCC_OscConfig+0x534>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10c      	bne.n	80079a2 <HAL_RCC_OscConfig+0x4f2>
 8007988:	4b6b      	ldr	r3, [pc, #428]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 800798a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800798c:	4b6a      	ldr	r3, [pc, #424]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 800798e:	496c      	ldr	r1, [pc, #432]	@ (8007b40 <HAL_RCC_OscConfig+0x690>)
 8007990:	400a      	ands	r2, r1
 8007992:	651a      	str	r2, [r3, #80]	@ 0x50
 8007994:	4b68      	ldr	r3, [pc, #416]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007996:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007998:	4b67      	ldr	r3, [pc, #412]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 800799a:	496b      	ldr	r1, [pc, #428]	@ (8007b48 <HAL_RCC_OscConfig+0x698>)
 800799c:	400a      	ands	r2, r1
 800799e:	651a      	str	r2, [r3, #80]	@ 0x50
 80079a0:	e020      	b.n	80079e4 <HAL_RCC_OscConfig+0x534>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	689a      	ldr	r2, [r3, #8]
 80079a6:	23a0      	movs	r3, #160	@ 0xa0
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d10e      	bne.n	80079cc <HAL_RCC_OscConfig+0x51c>
 80079ae:	4b62      	ldr	r3, [pc, #392]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 80079b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079b2:	4b61      	ldr	r3, [pc, #388]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 80079b4:	2180      	movs	r1, #128	@ 0x80
 80079b6:	00c9      	lsls	r1, r1, #3
 80079b8:	430a      	orrs	r2, r1
 80079ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80079bc:	4b5e      	ldr	r3, [pc, #376]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 80079be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079c0:	4b5d      	ldr	r3, [pc, #372]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 80079c2:	2180      	movs	r1, #128	@ 0x80
 80079c4:	0049      	lsls	r1, r1, #1
 80079c6:	430a      	orrs	r2, r1
 80079c8:	651a      	str	r2, [r3, #80]	@ 0x50
 80079ca:	e00b      	b.n	80079e4 <HAL_RCC_OscConfig+0x534>
 80079cc:	4b5a      	ldr	r3, [pc, #360]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 80079ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079d0:	4b59      	ldr	r3, [pc, #356]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 80079d2:	495b      	ldr	r1, [pc, #364]	@ (8007b40 <HAL_RCC_OscConfig+0x690>)
 80079d4:	400a      	ands	r2, r1
 80079d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80079d8:	4b57      	ldr	r3, [pc, #348]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 80079da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079dc:	4b56      	ldr	r3, [pc, #344]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 80079de:	495a      	ldr	r1, [pc, #360]	@ (8007b48 <HAL_RCC_OscConfig+0x698>)
 80079e0:	400a      	ands	r2, r1
 80079e2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d015      	beq.n	8007a18 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079ec:	f7fc ff8e 	bl	800490c <HAL_GetTick>
 80079f0:	0003      	movs	r3, r0
 80079f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079f4:	e009      	b.n	8007a0a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079f6:	f7fc ff89 	bl	800490c <HAL_GetTick>
 80079fa:	0002      	movs	r2, r0
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	4a52      	ldr	r2, [pc, #328]	@ (8007b4c <HAL_RCC_OscConfig+0x69c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d901      	bls.n	8007a0a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e11b      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a0a:	4b4b      	ldr	r3, [pc, #300]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007a0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a0e:	2380      	movs	r3, #128	@ 0x80
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4013      	ands	r3, r2
 8007a14:	d0ef      	beq.n	80079f6 <HAL_RCC_OscConfig+0x546>
 8007a16:	e014      	b.n	8007a42 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a18:	f7fc ff78 	bl	800490c <HAL_GetTick>
 8007a1c:	0003      	movs	r3, r0
 8007a1e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a20:	e009      	b.n	8007a36 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a22:	f7fc ff73 	bl	800490c <HAL_GetTick>
 8007a26:	0002      	movs	r2, r0
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	4a47      	ldr	r2, [pc, #284]	@ (8007b4c <HAL_RCC_OscConfig+0x69c>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d901      	bls.n	8007a36 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e105      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a36:	4b40      	ldr	r3, [pc, #256]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007a38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a3a:	2380      	movs	r3, #128	@ 0x80
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4013      	ands	r3, r2
 8007a40:	d1ef      	bne.n	8007a22 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007a42:	2323      	movs	r3, #35	@ 0x23
 8007a44:	18fb      	adds	r3, r7, r3
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d105      	bne.n	8007a58 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007a4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a50:	4b39      	ldr	r3, [pc, #228]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007a52:	493f      	ldr	r1, [pc, #252]	@ (8007b50 <HAL_RCC_OscConfig+0x6a0>)
 8007a54:	400a      	ands	r2, r1
 8007a56:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	4013      	ands	r3, r2
 8007a60:	d049      	beq.n	8007af6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d026      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8007a6a:	4b33      	ldr	r3, [pc, #204]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007a6c:	689a      	ldr	r2, [r3, #8]
 8007a6e:	4b32      	ldr	r3, [pc, #200]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007a70:	2101      	movs	r1, #1
 8007a72:	430a      	orrs	r2, r1
 8007a74:	609a      	str	r2, [r3, #8]
 8007a76:	4b30      	ldr	r3, [pc, #192]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a82:	4b34      	ldr	r3, [pc, #208]	@ (8007b54 <HAL_RCC_OscConfig+0x6a4>)
 8007a84:	6a1a      	ldr	r2, [r3, #32]
 8007a86:	4b33      	ldr	r3, [pc, #204]	@ (8007b54 <HAL_RCC_OscConfig+0x6a4>)
 8007a88:	2180      	movs	r1, #128	@ 0x80
 8007a8a:	0189      	lsls	r1, r1, #6
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a90:	f7fc ff3c 	bl	800490c <HAL_GetTick>
 8007a94:	0003      	movs	r3, r0
 8007a96:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a98:	e008      	b.n	8007aac <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a9a:	f7fc ff37 	bl	800490c <HAL_GetTick>
 8007a9e:	0002      	movs	r2, r0
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d901      	bls.n	8007aac <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e0ca      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007aac:	4b22      	ldr	r3, [pc, #136]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	d0f1      	beq.n	8007a9a <HAL_RCC_OscConfig+0x5ea>
 8007ab6:	e01e      	b.n	8007af6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8007ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007aba:	689a      	ldr	r2, [r3, #8]
 8007abc:	4b1e      	ldr	r3, [pc, #120]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007abe:	2101      	movs	r1, #1
 8007ac0:	438a      	bics	r2, r1
 8007ac2:	609a      	str	r2, [r3, #8]
 8007ac4:	4b23      	ldr	r3, [pc, #140]	@ (8007b54 <HAL_RCC_OscConfig+0x6a4>)
 8007ac6:	6a1a      	ldr	r2, [r3, #32]
 8007ac8:	4b22      	ldr	r3, [pc, #136]	@ (8007b54 <HAL_RCC_OscConfig+0x6a4>)
 8007aca:	4923      	ldr	r1, [pc, #140]	@ (8007b58 <HAL_RCC_OscConfig+0x6a8>)
 8007acc:	400a      	ands	r2, r1
 8007ace:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ad0:	f7fc ff1c 	bl	800490c <HAL_GetTick>
 8007ad4:	0003      	movs	r3, r0
 8007ad6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007ad8:	e008      	b.n	8007aec <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ada:	f7fc ff17 	bl	800490c <HAL_GetTick>
 8007ade:	0002      	movs	r2, r0
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d901      	bls.n	8007aec <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e0aa      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007aec:	4b12      	ldr	r3, [pc, #72]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	2202      	movs	r2, #2
 8007af2:	4013      	ands	r3, r2
 8007af4:	d1f1      	bne.n	8007ada <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d100      	bne.n	8007b00 <HAL_RCC_OscConfig+0x650>
 8007afe:	e09f      	b.n	8007c40 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	2b0c      	cmp	r3, #12
 8007b04:	d100      	bne.n	8007b08 <HAL_RCC_OscConfig+0x658>
 8007b06:	e078      	b.n	8007bfa <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d159      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b10:	4b09      	ldr	r3, [pc, #36]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	4b08      	ldr	r3, [pc, #32]	@ (8007b38 <HAL_RCC_OscConfig+0x688>)
 8007b16:	4911      	ldr	r1, [pc, #68]	@ (8007b5c <HAL_RCC_OscConfig+0x6ac>)
 8007b18:	400a      	ands	r2, r1
 8007b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b1c:	f7fc fef6 	bl	800490c <HAL_GetTick>
 8007b20:	0003      	movs	r3, r0
 8007b22:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007b24:	e01c      	b.n	8007b60 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b26:	f7fc fef1 	bl	800490c <HAL_GetTick>
 8007b2a:	0002      	movs	r2, r0
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d915      	bls.n	8007b60 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e084      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
 8007b38:	40021000 	.word	0x40021000
 8007b3c:	ffff1fff 	.word	0xffff1fff
 8007b40:	fffffeff 	.word	0xfffffeff
 8007b44:	40007000 	.word	0x40007000
 8007b48:	fffffbff 	.word	0xfffffbff
 8007b4c:	00001388 	.word	0x00001388
 8007b50:	efffffff 	.word	0xefffffff
 8007b54:	40010000 	.word	0x40010000
 8007b58:	ffffdfff 	.word	0xffffdfff
 8007b5c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007b60:	4b3a      	ldr	r3, [pc, #232]	@ (8007c4c <HAL_RCC_OscConfig+0x79c>)
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	2380      	movs	r3, #128	@ 0x80
 8007b66:	049b      	lsls	r3, r3, #18
 8007b68:	4013      	ands	r3, r2
 8007b6a:	d1dc      	bne.n	8007b26 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b6c:	4b37      	ldr	r3, [pc, #220]	@ (8007c4c <HAL_RCC_OscConfig+0x79c>)
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	4a37      	ldr	r2, [pc, #220]	@ (8007c50 <HAL_RCC_OscConfig+0x7a0>)
 8007b72:	4013      	ands	r3, r2
 8007b74:	0019      	movs	r1, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b84:	431a      	orrs	r2, r3
 8007b86:	4b31      	ldr	r3, [pc, #196]	@ (8007c4c <HAL_RCC_OscConfig+0x79c>)
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8007c4c <HAL_RCC_OscConfig+0x79c>)
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	4b2e      	ldr	r3, [pc, #184]	@ (8007c4c <HAL_RCC_OscConfig+0x79c>)
 8007b92:	2180      	movs	r1, #128	@ 0x80
 8007b94:	0449      	lsls	r1, r1, #17
 8007b96:	430a      	orrs	r2, r1
 8007b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b9a:	f7fc feb7 	bl	800490c <HAL_GetTick>
 8007b9e:	0003      	movs	r3, r0
 8007ba0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ba4:	f7fc feb2 	bl	800490c <HAL_GetTick>
 8007ba8:	0002      	movs	r2, r0
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e045      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007bb6:	4b25      	ldr	r3, [pc, #148]	@ (8007c4c <HAL_RCC_OscConfig+0x79c>)
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	2380      	movs	r3, #128	@ 0x80
 8007bbc:	049b      	lsls	r3, r3, #18
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	d0f0      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x6f4>
 8007bc2:	e03d      	b.n	8007c40 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bc4:	4b21      	ldr	r3, [pc, #132]	@ (8007c4c <HAL_RCC_OscConfig+0x79c>)
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	4b20      	ldr	r3, [pc, #128]	@ (8007c4c <HAL_RCC_OscConfig+0x79c>)
 8007bca:	4922      	ldr	r1, [pc, #136]	@ (8007c54 <HAL_RCC_OscConfig+0x7a4>)
 8007bcc:	400a      	ands	r2, r1
 8007bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bd0:	f7fc fe9c 	bl	800490c <HAL_GetTick>
 8007bd4:	0003      	movs	r3, r0
 8007bd6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007bd8:	e008      	b.n	8007bec <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bda:	f7fc fe97 	bl	800490c <HAL_GetTick>
 8007bde:	0002      	movs	r2, r0
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d901      	bls.n	8007bec <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e02a      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007bec:	4b17      	ldr	r3, [pc, #92]	@ (8007c4c <HAL_RCC_OscConfig+0x79c>)
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	2380      	movs	r3, #128	@ 0x80
 8007bf2:	049b      	lsls	r3, r3, #18
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	d1f0      	bne.n	8007bda <HAL_RCC_OscConfig+0x72a>
 8007bf8:	e022      	b.n	8007c40 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d101      	bne.n	8007c06 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e01d      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007c06:	4b11      	ldr	r3, [pc, #68]	@ (8007c4c <HAL_RCC_OscConfig+0x79c>)
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	2380      	movs	r3, #128	@ 0x80
 8007c10:	025b      	lsls	r3, r3, #9
 8007c12:	401a      	ands	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d10f      	bne.n	8007c3c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	23f0      	movs	r3, #240	@ 0xf0
 8007c20:	039b      	lsls	r3, r3, #14
 8007c22:	401a      	ands	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d107      	bne.n	8007c3c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	23c0      	movs	r3, #192	@ 0xc0
 8007c30:	041b      	lsls	r3, r3, #16
 8007c32:	401a      	ands	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d001      	beq.n	8007c40 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e000      	b.n	8007c42 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	0018      	movs	r0, r3
 8007c44:	46bd      	mov	sp, r7
 8007c46:	b00a      	add	sp, #40	@ 0x28
 8007c48:	bdb0      	pop	{r4, r5, r7, pc}
 8007c4a:	46c0      	nop			@ (mov r8, r8)
 8007c4c:	40021000 	.word	0x40021000
 8007c50:	ff02ffff 	.word	0xff02ffff
 8007c54:	feffffff 	.word	0xfeffffff

08007c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c58:	b5b0      	push	{r4, r5, r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e128      	b.n	8007ebe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c6c:	4b96      	ldr	r3, [pc, #600]	@ (8007ec8 <HAL_RCC_ClockConfig+0x270>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2201      	movs	r2, #1
 8007c72:	4013      	ands	r3, r2
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d91e      	bls.n	8007cb8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c7a:	4b93      	ldr	r3, [pc, #588]	@ (8007ec8 <HAL_RCC_ClockConfig+0x270>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	4393      	bics	r3, r2
 8007c82:	0019      	movs	r1, r3
 8007c84:	4b90      	ldr	r3, [pc, #576]	@ (8007ec8 <HAL_RCC_ClockConfig+0x270>)
 8007c86:	683a      	ldr	r2, [r7, #0]
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007c8c:	f7fc fe3e 	bl	800490c <HAL_GetTick>
 8007c90:	0003      	movs	r3, r0
 8007c92:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c94:	e009      	b.n	8007caa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c96:	f7fc fe39 	bl	800490c <HAL_GetTick>
 8007c9a:	0002      	movs	r2, r0
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	4a8a      	ldr	r2, [pc, #552]	@ (8007ecc <HAL_RCC_ClockConfig+0x274>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d901      	bls.n	8007caa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e109      	b.n	8007ebe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007caa:	4b87      	ldr	r3, [pc, #540]	@ (8007ec8 <HAL_RCC_ClockConfig+0x270>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d1ee      	bne.n	8007c96 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	d009      	beq.n	8007cd6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cc2:	4b83      	ldr	r3, [pc, #524]	@ (8007ed0 <HAL_RCC_ClockConfig+0x278>)
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	22f0      	movs	r2, #240	@ 0xf0
 8007cc8:	4393      	bics	r3, r2
 8007cca:	0019      	movs	r1, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	4b7f      	ldr	r3, [pc, #508]	@ (8007ed0 <HAL_RCC_ClockConfig+0x278>)
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	4013      	ands	r3, r2
 8007cde:	d100      	bne.n	8007ce2 <HAL_RCC_ClockConfig+0x8a>
 8007ce0:	e089      	b.n	8007df6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d107      	bne.n	8007cfa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007cea:	4b79      	ldr	r3, [pc, #484]	@ (8007ed0 <HAL_RCC_ClockConfig+0x278>)
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	2380      	movs	r3, #128	@ 0x80
 8007cf0:	029b      	lsls	r3, r3, #10
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	d120      	bne.n	8007d38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e0e1      	b.n	8007ebe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d107      	bne.n	8007d12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d02:	4b73      	ldr	r3, [pc, #460]	@ (8007ed0 <HAL_RCC_ClockConfig+0x278>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	2380      	movs	r3, #128	@ 0x80
 8007d08:	049b      	lsls	r3, r3, #18
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	d114      	bne.n	8007d38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e0d5      	b.n	8007ebe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d106      	bne.n	8007d28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d1a:	4b6d      	ldr	r3, [pc, #436]	@ (8007ed0 <HAL_RCC_ClockConfig+0x278>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2204      	movs	r2, #4
 8007d20:	4013      	ands	r3, r2
 8007d22:	d109      	bne.n	8007d38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e0ca      	b.n	8007ebe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007d28:	4b69      	ldr	r3, [pc, #420]	@ (8007ed0 <HAL_RCC_ClockConfig+0x278>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	2380      	movs	r3, #128	@ 0x80
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4013      	ands	r3, r2
 8007d32:	d101      	bne.n	8007d38 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e0c2      	b.n	8007ebe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d38:	4b65      	ldr	r3, [pc, #404]	@ (8007ed0 <HAL_RCC_ClockConfig+0x278>)
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	2203      	movs	r2, #3
 8007d3e:	4393      	bics	r3, r2
 8007d40:	0019      	movs	r1, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	4b62      	ldr	r3, [pc, #392]	@ (8007ed0 <HAL_RCC_ClockConfig+0x278>)
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d4c:	f7fc fdde 	bl	800490c <HAL_GetTick>
 8007d50:	0003      	movs	r3, r0
 8007d52:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d111      	bne.n	8007d80 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d5c:	e009      	b.n	8007d72 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d5e:	f7fc fdd5 	bl	800490c <HAL_GetTick>
 8007d62:	0002      	movs	r2, r0
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	4a58      	ldr	r2, [pc, #352]	@ (8007ecc <HAL_RCC_ClockConfig+0x274>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d901      	bls.n	8007d72 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e0a5      	b.n	8007ebe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d72:	4b57      	ldr	r3, [pc, #348]	@ (8007ed0 <HAL_RCC_ClockConfig+0x278>)
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	220c      	movs	r2, #12
 8007d78:	4013      	ands	r3, r2
 8007d7a:	2b08      	cmp	r3, #8
 8007d7c:	d1ef      	bne.n	8007d5e <HAL_RCC_ClockConfig+0x106>
 8007d7e:	e03a      	b.n	8007df6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d111      	bne.n	8007dac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d88:	e009      	b.n	8007d9e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d8a:	f7fc fdbf 	bl	800490c <HAL_GetTick>
 8007d8e:	0002      	movs	r2, r0
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	4a4d      	ldr	r2, [pc, #308]	@ (8007ecc <HAL_RCC_ClockConfig+0x274>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d901      	bls.n	8007d9e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e08f      	b.n	8007ebe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d9e:	4b4c      	ldr	r3, [pc, #304]	@ (8007ed0 <HAL_RCC_ClockConfig+0x278>)
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	220c      	movs	r2, #12
 8007da4:	4013      	ands	r3, r2
 8007da6:	2b0c      	cmp	r3, #12
 8007da8:	d1ef      	bne.n	8007d8a <HAL_RCC_ClockConfig+0x132>
 8007daa:	e024      	b.n	8007df6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d11b      	bne.n	8007dec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007db4:	e009      	b.n	8007dca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007db6:	f7fc fda9 	bl	800490c <HAL_GetTick>
 8007dba:	0002      	movs	r2, r0
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	4a42      	ldr	r2, [pc, #264]	@ (8007ecc <HAL_RCC_ClockConfig+0x274>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d901      	bls.n	8007dca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e079      	b.n	8007ebe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007dca:	4b41      	ldr	r3, [pc, #260]	@ (8007ed0 <HAL_RCC_ClockConfig+0x278>)
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	220c      	movs	r2, #12
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	2b04      	cmp	r3, #4
 8007dd4:	d1ef      	bne.n	8007db6 <HAL_RCC_ClockConfig+0x15e>
 8007dd6:	e00e      	b.n	8007df6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dd8:	f7fc fd98 	bl	800490c <HAL_GetTick>
 8007ddc:	0002      	movs	r2, r0
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	4a3a      	ldr	r2, [pc, #232]	@ (8007ecc <HAL_RCC_ClockConfig+0x274>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d901      	bls.n	8007dec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e068      	b.n	8007ebe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007dec:	4b38      	ldr	r3, [pc, #224]	@ (8007ed0 <HAL_RCC_ClockConfig+0x278>)
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	220c      	movs	r2, #12
 8007df2:	4013      	ands	r3, r2
 8007df4:	d1f0      	bne.n	8007dd8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007df6:	4b34      	ldr	r3, [pc, #208]	@ (8007ec8 <HAL_RCC_ClockConfig+0x270>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d21e      	bcs.n	8007e42 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e04:	4b30      	ldr	r3, [pc, #192]	@ (8007ec8 <HAL_RCC_ClockConfig+0x270>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	4393      	bics	r3, r2
 8007e0c:	0019      	movs	r1, r3
 8007e0e:	4b2e      	ldr	r3, [pc, #184]	@ (8007ec8 <HAL_RCC_ClockConfig+0x270>)
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007e16:	f7fc fd79 	bl	800490c <HAL_GetTick>
 8007e1a:	0003      	movs	r3, r0
 8007e1c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e1e:	e009      	b.n	8007e34 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e20:	f7fc fd74 	bl	800490c <HAL_GetTick>
 8007e24:	0002      	movs	r2, r0
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	4a28      	ldr	r2, [pc, #160]	@ (8007ecc <HAL_RCC_ClockConfig+0x274>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d901      	bls.n	8007e34 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e044      	b.n	8007ebe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e34:	4b24      	ldr	r3, [pc, #144]	@ (8007ec8 <HAL_RCC_ClockConfig+0x270>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d1ee      	bne.n	8007e20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2204      	movs	r2, #4
 8007e48:	4013      	ands	r3, r2
 8007e4a:	d009      	beq.n	8007e60 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e4c:	4b20      	ldr	r3, [pc, #128]	@ (8007ed0 <HAL_RCC_ClockConfig+0x278>)
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	4a20      	ldr	r2, [pc, #128]	@ (8007ed4 <HAL_RCC_ClockConfig+0x27c>)
 8007e52:	4013      	ands	r3, r2
 8007e54:	0019      	movs	r1, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68da      	ldr	r2, [r3, #12]
 8007e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ed0 <HAL_RCC_ClockConfig+0x278>)
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2208      	movs	r2, #8
 8007e66:	4013      	ands	r3, r2
 8007e68:	d00a      	beq.n	8007e80 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007e6a:	4b19      	ldr	r3, [pc, #100]	@ (8007ed0 <HAL_RCC_ClockConfig+0x278>)
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8007ed8 <HAL_RCC_ClockConfig+0x280>)
 8007e70:	4013      	ands	r3, r2
 8007e72:	0019      	movs	r1, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	00da      	lsls	r2, r3, #3
 8007e7a:	4b15      	ldr	r3, [pc, #84]	@ (8007ed0 <HAL_RCC_ClockConfig+0x278>)
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e80:	f000 f832 	bl	8007ee8 <HAL_RCC_GetSysClockFreq>
 8007e84:	0001      	movs	r1, r0
 8007e86:	4b12      	ldr	r3, [pc, #72]	@ (8007ed0 <HAL_RCC_ClockConfig+0x278>)
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	091b      	lsrs	r3, r3, #4
 8007e8c:	220f      	movs	r2, #15
 8007e8e:	4013      	ands	r3, r2
 8007e90:	4a12      	ldr	r2, [pc, #72]	@ (8007edc <HAL_RCC_ClockConfig+0x284>)
 8007e92:	5cd3      	ldrb	r3, [r2, r3]
 8007e94:	000a      	movs	r2, r1
 8007e96:	40da      	lsrs	r2, r3
 8007e98:	4b11      	ldr	r3, [pc, #68]	@ (8007ee0 <HAL_RCC_ClockConfig+0x288>)
 8007e9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007e9c:	4b11      	ldr	r3, [pc, #68]	@ (8007ee4 <HAL_RCC_ClockConfig+0x28c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	250b      	movs	r5, #11
 8007ea2:	197c      	adds	r4, r7, r5
 8007ea4:	0018      	movs	r0, r3
 8007ea6:	f7fc fceb 	bl	8004880 <HAL_InitTick>
 8007eaa:	0003      	movs	r3, r0
 8007eac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8007eae:	197b      	adds	r3, r7, r5
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d002      	beq.n	8007ebc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8007eb6:	197b      	adds	r3, r7, r5
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	e000      	b.n	8007ebe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	b004      	add	sp, #16
 8007ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8007ec6:	46c0      	nop			@ (mov r8, r8)
 8007ec8:	40022000 	.word	0x40022000
 8007ecc:	00001388 	.word	0x00001388
 8007ed0:	40021000 	.word	0x40021000
 8007ed4:	fffff8ff 	.word	0xfffff8ff
 8007ed8:	ffffc7ff 	.word	0xffffc7ff
 8007edc:	0800c134 	.word	0x0800c134
 8007ee0:	20000008 	.word	0x20000008
 8007ee4:	2000001c 	.word	0x2000001c

08007ee8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ee8:	b5b0      	push	{r4, r5, r7, lr}
 8007eea:	b08e      	sub	sp, #56	@ 0x38
 8007eec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8007eee:	4b4c      	ldr	r3, [pc, #304]	@ (8008020 <HAL_RCC_GetSysClockFreq+0x138>)
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ef6:	230c      	movs	r3, #12
 8007ef8:	4013      	ands	r3, r2
 8007efa:	2b0c      	cmp	r3, #12
 8007efc:	d014      	beq.n	8007f28 <HAL_RCC_GetSysClockFreq+0x40>
 8007efe:	d900      	bls.n	8007f02 <HAL_RCC_GetSysClockFreq+0x1a>
 8007f00:	e07b      	b.n	8007ffa <HAL_RCC_GetSysClockFreq+0x112>
 8007f02:	2b04      	cmp	r3, #4
 8007f04:	d002      	beq.n	8007f0c <HAL_RCC_GetSysClockFreq+0x24>
 8007f06:	2b08      	cmp	r3, #8
 8007f08:	d00b      	beq.n	8007f22 <HAL_RCC_GetSysClockFreq+0x3a>
 8007f0a:	e076      	b.n	8007ffa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007f0c:	4b44      	ldr	r3, [pc, #272]	@ (8008020 <HAL_RCC_GetSysClockFreq+0x138>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2210      	movs	r2, #16
 8007f12:	4013      	ands	r3, r2
 8007f14:	d002      	beq.n	8007f1c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8007f16:	4b43      	ldr	r3, [pc, #268]	@ (8008024 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007f18:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8007f1a:	e07c      	b.n	8008016 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8007f1c:	4b42      	ldr	r3, [pc, #264]	@ (8008028 <HAL_RCC_GetSysClockFreq+0x140>)
 8007f1e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007f20:	e079      	b.n	8008016 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007f22:	4b42      	ldr	r3, [pc, #264]	@ (800802c <HAL_RCC_GetSysClockFreq+0x144>)
 8007f24:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007f26:	e076      	b.n	8008016 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f2a:	0c9a      	lsrs	r2, r3, #18
 8007f2c:	230f      	movs	r3, #15
 8007f2e:	401a      	ands	r2, r3
 8007f30:	4b3f      	ldr	r3, [pc, #252]	@ (8008030 <HAL_RCC_GetSysClockFreq+0x148>)
 8007f32:	5c9b      	ldrb	r3, [r3, r2]
 8007f34:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f38:	0d9a      	lsrs	r2, r3, #22
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	3301      	adds	r3, #1
 8007f40:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f42:	4b37      	ldr	r3, [pc, #220]	@ (8008020 <HAL_RCC_GetSysClockFreq+0x138>)
 8007f44:	68da      	ldr	r2, [r3, #12]
 8007f46:	2380      	movs	r3, #128	@ 0x80
 8007f48:	025b      	lsls	r3, r3, #9
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	d01a      	beq.n	8007f84 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f50:	61bb      	str	r3, [r7, #24]
 8007f52:	2300      	movs	r3, #0
 8007f54:	61fb      	str	r3, [r7, #28]
 8007f56:	4a35      	ldr	r2, [pc, #212]	@ (800802c <HAL_RCC_GetSysClockFreq+0x144>)
 8007f58:	2300      	movs	r3, #0
 8007f5a:	69b8      	ldr	r0, [r7, #24]
 8007f5c:	69f9      	ldr	r1, [r7, #28]
 8007f5e:	f7f8 fac3 	bl	80004e8 <__aeabi_lmul>
 8007f62:	0002      	movs	r2, r0
 8007f64:	000b      	movs	r3, r1
 8007f66:	0010      	movs	r0, r2
 8007f68:	0019      	movs	r1, r3
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6c:	613b      	str	r3, [r7, #16]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	617b      	str	r3, [r7, #20]
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f7f8 fa97 	bl	80004a8 <__aeabi_uldivmod>
 8007f7a:	0002      	movs	r2, r0
 8007f7c:	000b      	movs	r3, r1
 8007f7e:	0013      	movs	r3, r2
 8007f80:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f82:	e037      	b.n	8007ff4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007f84:	4b26      	ldr	r3, [pc, #152]	@ (8008020 <HAL_RCC_GetSysClockFreq+0x138>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2210      	movs	r2, #16
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	d01a      	beq.n	8007fc4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8007f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f90:	60bb      	str	r3, [r7, #8]
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]
 8007f96:	4a23      	ldr	r2, [pc, #140]	@ (8008024 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007f98:	2300      	movs	r3, #0
 8007f9a:	68b8      	ldr	r0, [r7, #8]
 8007f9c:	68f9      	ldr	r1, [r7, #12]
 8007f9e:	f7f8 faa3 	bl	80004e8 <__aeabi_lmul>
 8007fa2:	0002      	movs	r2, r0
 8007fa4:	000b      	movs	r3, r1
 8007fa6:	0010      	movs	r0, r2
 8007fa8:	0019      	movs	r1, r3
 8007faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fac:	603b      	str	r3, [r7, #0]
 8007fae:	2300      	movs	r3, #0
 8007fb0:	607b      	str	r3, [r7, #4]
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f7f8 fa77 	bl	80004a8 <__aeabi_uldivmod>
 8007fba:	0002      	movs	r2, r0
 8007fbc:	000b      	movs	r3, r1
 8007fbe:	0013      	movs	r3, r2
 8007fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc2:	e017      	b.n	8007ff4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc6:	0018      	movs	r0, r3
 8007fc8:	2300      	movs	r3, #0
 8007fca:	0019      	movs	r1, r3
 8007fcc:	4a16      	ldr	r2, [pc, #88]	@ (8008028 <HAL_RCC_GetSysClockFreq+0x140>)
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f7f8 fa8a 	bl	80004e8 <__aeabi_lmul>
 8007fd4:	0002      	movs	r2, r0
 8007fd6:	000b      	movs	r3, r1
 8007fd8:	0010      	movs	r0, r2
 8007fda:	0019      	movs	r1, r3
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fde:	001c      	movs	r4, r3
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	001d      	movs	r5, r3
 8007fe4:	0022      	movs	r2, r4
 8007fe6:	002b      	movs	r3, r5
 8007fe8:	f7f8 fa5e 	bl	80004a8 <__aeabi_uldivmod>
 8007fec:	0002      	movs	r2, r0
 8007fee:	000b      	movs	r3, r1
 8007ff0:	0013      	movs	r3, r2
 8007ff2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8007ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ff6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8007ff8:	e00d      	b.n	8008016 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007ffa:	4b09      	ldr	r3, [pc, #36]	@ (8008020 <HAL_RCC_GetSysClockFreq+0x138>)
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	0b5b      	lsrs	r3, r3, #13
 8008000:	2207      	movs	r2, #7
 8008002:	4013      	ands	r3, r2
 8008004:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	3301      	adds	r3, #1
 800800a:	2280      	movs	r2, #128	@ 0x80
 800800c:	0212      	lsls	r2, r2, #8
 800800e:	409a      	lsls	r2, r3
 8008010:	0013      	movs	r3, r2
 8008012:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8008014:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8008018:	0018      	movs	r0, r3
 800801a:	46bd      	mov	sp, r7
 800801c:	b00e      	add	sp, #56	@ 0x38
 800801e:	bdb0      	pop	{r4, r5, r7, pc}
 8008020:	40021000 	.word	0x40021000
 8008024:	003d0900 	.word	0x003d0900
 8008028:	00f42400 	.word	0x00f42400
 800802c:	007a1200 	.word	0x007a1200
 8008030:	0800c14c 	.word	0x0800c14c

08008034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008038:	4b02      	ldr	r3, [pc, #8]	@ (8008044 <HAL_RCC_GetHCLKFreq+0x10>)
 800803a:	681b      	ldr	r3, [r3, #0]
}
 800803c:	0018      	movs	r0, r3
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	46c0      	nop			@ (mov r8, r8)
 8008044:	20000008 	.word	0x20000008

08008048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800804c:	f7ff fff2 	bl	8008034 <HAL_RCC_GetHCLKFreq>
 8008050:	0001      	movs	r1, r0
 8008052:	4b06      	ldr	r3, [pc, #24]	@ (800806c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	0a1b      	lsrs	r3, r3, #8
 8008058:	2207      	movs	r2, #7
 800805a:	4013      	ands	r3, r2
 800805c:	4a04      	ldr	r2, [pc, #16]	@ (8008070 <HAL_RCC_GetPCLK1Freq+0x28>)
 800805e:	5cd3      	ldrb	r3, [r2, r3]
 8008060:	40d9      	lsrs	r1, r3
 8008062:	000b      	movs	r3, r1
}
 8008064:	0018      	movs	r0, r3
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	46c0      	nop			@ (mov r8, r8)
 800806c:	40021000 	.word	0x40021000
 8008070:	0800c144 	.word	0x0800c144

08008074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008078:	f7ff ffdc 	bl	8008034 <HAL_RCC_GetHCLKFreq>
 800807c:	0001      	movs	r1, r0
 800807e:	4b06      	ldr	r3, [pc, #24]	@ (8008098 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	0adb      	lsrs	r3, r3, #11
 8008084:	2207      	movs	r2, #7
 8008086:	4013      	ands	r3, r2
 8008088:	4a04      	ldr	r2, [pc, #16]	@ (800809c <HAL_RCC_GetPCLK2Freq+0x28>)
 800808a:	5cd3      	ldrb	r3, [r2, r3]
 800808c:	40d9      	lsrs	r1, r3
 800808e:	000b      	movs	r3, r1
}
 8008090:	0018      	movs	r0, r3
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	46c0      	nop			@ (mov r8, r8)
 8008098:	40021000 	.word	0x40021000
 800809c:	0800c144 	.word	0x0800c144

080080a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80080a8:	2017      	movs	r0, #23
 80080aa:	183b      	adds	r3, r7, r0
 80080ac:	2200      	movs	r2, #0
 80080ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2220      	movs	r2, #32
 80080b6:	4013      	ands	r3, r2
 80080b8:	d100      	bne.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80080ba:	e0c7      	b.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080bc:	4b9b      	ldr	r3, [pc, #620]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80080be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080c0:	2380      	movs	r3, #128	@ 0x80
 80080c2:	055b      	lsls	r3, r3, #21
 80080c4:	4013      	ands	r3, r2
 80080c6:	d109      	bne.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080c8:	4b98      	ldr	r3, [pc, #608]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80080ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080cc:	4b97      	ldr	r3, [pc, #604]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80080ce:	2180      	movs	r1, #128	@ 0x80
 80080d0:	0549      	lsls	r1, r1, #21
 80080d2:	430a      	orrs	r2, r1
 80080d4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80080d6:	183b      	adds	r3, r7, r0
 80080d8:	2201      	movs	r2, #1
 80080da:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080dc:	4b94      	ldr	r3, [pc, #592]	@ (8008330 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	2380      	movs	r3, #128	@ 0x80
 80080e2:	005b      	lsls	r3, r3, #1
 80080e4:	4013      	ands	r3, r2
 80080e6:	d11a      	bne.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80080e8:	4b91      	ldr	r3, [pc, #580]	@ (8008330 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	4b90      	ldr	r3, [pc, #576]	@ (8008330 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80080ee:	2180      	movs	r1, #128	@ 0x80
 80080f0:	0049      	lsls	r1, r1, #1
 80080f2:	430a      	orrs	r2, r1
 80080f4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080f6:	f7fc fc09 	bl	800490c <HAL_GetTick>
 80080fa:	0003      	movs	r3, r0
 80080fc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80080fe:	e008      	b.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008100:	f7fc fc04 	bl	800490c <HAL_GetTick>
 8008104:	0002      	movs	r2, r0
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	2b64      	cmp	r3, #100	@ 0x64
 800810c:	d901      	bls.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e107      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008112:	4b87      	ldr	r3, [pc, #540]	@ (8008330 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	2380      	movs	r3, #128	@ 0x80
 8008118:	005b      	lsls	r3, r3, #1
 800811a:	4013      	ands	r3, r2
 800811c:	d0f0      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800811e:	4b83      	ldr	r3, [pc, #524]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	23c0      	movs	r3, #192	@ 0xc0
 8008124:	039b      	lsls	r3, r3, #14
 8008126:	4013      	ands	r3, r2
 8008128:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685a      	ldr	r2, [r3, #4]
 800812e:	23c0      	movs	r3, #192	@ 0xc0
 8008130:	039b      	lsls	r3, r3, #14
 8008132:	4013      	ands	r3, r2
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	429a      	cmp	r2, r3
 8008138:	d013      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	23c0      	movs	r3, #192	@ 0xc0
 8008140:	029b      	lsls	r3, r3, #10
 8008142:	401a      	ands	r2, r3
 8008144:	23c0      	movs	r3, #192	@ 0xc0
 8008146:	029b      	lsls	r3, r3, #10
 8008148:	429a      	cmp	r2, r3
 800814a:	d10a      	bne.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800814c:	4b77      	ldr	r3, [pc, #476]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	2380      	movs	r3, #128	@ 0x80
 8008152:	029b      	lsls	r3, r3, #10
 8008154:	401a      	ands	r2, r3
 8008156:	2380      	movs	r3, #128	@ 0x80
 8008158:	029b      	lsls	r3, r3, #10
 800815a:	429a      	cmp	r2, r3
 800815c:	d101      	bne.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e0df      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8008162:	4b72      	ldr	r3, [pc, #456]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008164:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008166:	23c0      	movs	r3, #192	@ 0xc0
 8008168:	029b      	lsls	r3, r3, #10
 800816a:	4013      	ands	r3, r2
 800816c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d03b      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685a      	ldr	r2, [r3, #4]
 8008178:	23c0      	movs	r3, #192	@ 0xc0
 800817a:	029b      	lsls	r3, r3, #10
 800817c:	4013      	ands	r3, r2
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	429a      	cmp	r2, r3
 8008182:	d033      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2220      	movs	r2, #32
 800818a:	4013      	ands	r3, r2
 800818c:	d02e      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800818e:	4b67      	ldr	r3, [pc, #412]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008192:	4a68      	ldr	r2, [pc, #416]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008194:	4013      	ands	r3, r2
 8008196:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008198:	4b64      	ldr	r3, [pc, #400]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800819a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800819c:	4b63      	ldr	r3, [pc, #396]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800819e:	2180      	movs	r1, #128	@ 0x80
 80081a0:	0309      	lsls	r1, r1, #12
 80081a2:	430a      	orrs	r2, r1
 80081a4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80081a6:	4b61      	ldr	r3, [pc, #388]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80081a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081aa:	4b60      	ldr	r3, [pc, #384]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80081ac:	4962      	ldr	r1, [pc, #392]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80081ae:	400a      	ands	r2, r1
 80081b0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80081b2:	4b5e      	ldr	r3, [pc, #376]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	2380      	movs	r3, #128	@ 0x80
 80081bc:	005b      	lsls	r3, r3, #1
 80081be:	4013      	ands	r3, r2
 80081c0:	d014      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081c2:	f7fc fba3 	bl	800490c <HAL_GetTick>
 80081c6:	0003      	movs	r3, r0
 80081c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081ca:	e009      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081cc:	f7fc fb9e 	bl	800490c <HAL_GetTick>
 80081d0:	0002      	movs	r2, r0
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	4a59      	ldr	r2, [pc, #356]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d901      	bls.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e0a0      	b.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80081e0:	4b52      	ldr	r3, [pc, #328]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80081e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80081e4:	2380      	movs	r3, #128	@ 0x80
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4013      	ands	r3, r2
 80081ea:	d0ef      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2220      	movs	r2, #32
 80081f2:	4013      	ands	r3, r2
 80081f4:	d01f      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	23c0      	movs	r3, #192	@ 0xc0
 80081fc:	029b      	lsls	r3, r3, #10
 80081fe:	401a      	ands	r2, r3
 8008200:	23c0      	movs	r3, #192	@ 0xc0
 8008202:	029b      	lsls	r3, r3, #10
 8008204:	429a      	cmp	r2, r3
 8008206:	d10c      	bne.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8008208:	4b48      	ldr	r3, [pc, #288]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a4c      	ldr	r2, [pc, #304]	@ (8008340 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800820e:	4013      	ands	r3, r2
 8008210:	0019      	movs	r1, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	23c0      	movs	r3, #192	@ 0xc0
 8008218:	039b      	lsls	r3, r3, #14
 800821a:	401a      	ands	r2, r3
 800821c:	4b43      	ldr	r3, [pc, #268]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800821e:	430a      	orrs	r2, r1
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	4b42      	ldr	r3, [pc, #264]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008224:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	23c0      	movs	r3, #192	@ 0xc0
 800822c:	029b      	lsls	r3, r3, #10
 800822e:	401a      	ands	r2, r3
 8008230:	4b3e      	ldr	r3, [pc, #248]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008232:	430a      	orrs	r2, r1
 8008234:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008236:	2317      	movs	r3, #23
 8008238:	18fb      	adds	r3, r7, r3
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d105      	bne.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008240:	4b3a      	ldr	r3, [pc, #232]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008242:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008244:	4b39      	ldr	r3, [pc, #228]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008246:	493f      	ldr	r1, [pc, #252]	@ (8008344 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8008248:	400a      	ands	r2, r1
 800824a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2201      	movs	r2, #1
 8008252:	4013      	ands	r3, r2
 8008254:	d009      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008256:	4b35      	ldr	r3, [pc, #212]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800825a:	2203      	movs	r2, #3
 800825c:	4393      	bics	r3, r2
 800825e:	0019      	movs	r1, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689a      	ldr	r2, [r3, #8]
 8008264:	4b31      	ldr	r3, [pc, #196]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008266:	430a      	orrs	r2, r1
 8008268:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2202      	movs	r2, #2
 8008270:	4013      	ands	r3, r2
 8008272:	d009      	beq.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008274:	4b2d      	ldr	r3, [pc, #180]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008278:	220c      	movs	r2, #12
 800827a:	4393      	bics	r3, r2
 800827c:	0019      	movs	r1, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	4b2a      	ldr	r3, [pc, #168]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008284:	430a      	orrs	r2, r1
 8008286:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2204      	movs	r2, #4
 800828e:	4013      	ands	r3, r2
 8008290:	d009      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008292:	4b26      	ldr	r3, [pc, #152]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008296:	4a2c      	ldr	r2, [pc, #176]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008298:	4013      	ands	r3, r2
 800829a:	0019      	movs	r1, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	691a      	ldr	r2, [r3, #16]
 80082a0:	4b22      	ldr	r3, [pc, #136]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80082a2:	430a      	orrs	r2, r1
 80082a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2208      	movs	r2, #8
 80082ac:	4013      	ands	r3, r2
 80082ae:	d009      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80082b0:	4b1e      	ldr	r3, [pc, #120]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80082b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082b4:	4a25      	ldr	r2, [pc, #148]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80082b6:	4013      	ands	r3, r2
 80082b8:	0019      	movs	r1, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	695a      	ldr	r2, [r3, #20]
 80082be:	4b1b      	ldr	r3, [pc, #108]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80082c0:	430a      	orrs	r2, r1
 80082c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	2380      	movs	r3, #128	@ 0x80
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	4013      	ands	r3, r2
 80082ce:	d009      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80082d0:	4b16      	ldr	r3, [pc, #88]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80082d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082d4:	4a17      	ldr	r2, [pc, #92]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80082d6:	4013      	ands	r3, r2
 80082d8:	0019      	movs	r1, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	699a      	ldr	r2, [r3, #24]
 80082de:	4b13      	ldr	r3, [pc, #76]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80082e0:	430a      	orrs	r2, r1
 80082e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2240      	movs	r2, #64	@ 0x40
 80082ea:	4013      	ands	r3, r2
 80082ec:	d009      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082ee:	4b0f      	ldr	r3, [pc, #60]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80082f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082f2:	4a17      	ldr	r2, [pc, #92]	@ (8008350 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80082f4:	4013      	ands	r3, r2
 80082f6:	0019      	movs	r1, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a1a      	ldr	r2, [r3, #32]
 80082fc:	4b0b      	ldr	r3, [pc, #44]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80082fe:	430a      	orrs	r2, r1
 8008300:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2280      	movs	r2, #128	@ 0x80
 8008308:	4013      	ands	r3, r2
 800830a:	d009      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800830c:	4b07      	ldr	r3, [pc, #28]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800830e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008310:	4a10      	ldr	r2, [pc, #64]	@ (8008354 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8008312:	4013      	ands	r3, r2
 8008314:	0019      	movs	r1, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	69da      	ldr	r2, [r3, #28]
 800831a:	4b04      	ldr	r3, [pc, #16]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800831c:	430a      	orrs	r2, r1
 800831e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	0018      	movs	r0, r3
 8008324:	46bd      	mov	sp, r7
 8008326:	b006      	add	sp, #24
 8008328:	bd80      	pop	{r7, pc}
 800832a:	46c0      	nop			@ (mov r8, r8)
 800832c:	40021000 	.word	0x40021000
 8008330:	40007000 	.word	0x40007000
 8008334:	fffcffff 	.word	0xfffcffff
 8008338:	fff7ffff 	.word	0xfff7ffff
 800833c:	00001388 	.word	0x00001388
 8008340:	ffcfffff 	.word	0xffcfffff
 8008344:	efffffff 	.word	0xefffffff
 8008348:	fffff3ff 	.word	0xfffff3ff
 800834c:	ffffcfff 	.word	0xffffcfff
 8008350:	fbffffff 	.word	0xfbffffff
 8008354:	fff3ffff 	.word	0xfff3ffff

08008358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e044      	b.n	80083f4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800836e:	2b00      	cmp	r3, #0
 8008370:	d107      	bne.n	8008382 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2278      	movs	r2, #120	@ 0x78
 8008376:	2100      	movs	r1, #0
 8008378:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	0018      	movs	r0, r3
 800837e:	f7fb fdbf 	bl	8003f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2224      	movs	r2, #36	@ 0x24
 8008386:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2101      	movs	r1, #1
 8008394:	438a      	bics	r2, r1
 8008396:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	0018      	movs	r0, r3
 800839c:	f000 f8d0 	bl	8008540 <UART_SetConfig>
 80083a0:	0003      	movs	r3, r0
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d101      	bne.n	80083aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e024      	b.n	80083f4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	0018      	movs	r0, r3
 80083b6:	f000 fb61 	bl	8008a7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	490d      	ldr	r1, [pc, #52]	@ (80083fc <HAL_UART_Init+0xa4>)
 80083c6:	400a      	ands	r2, r1
 80083c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	689a      	ldr	r2, [r3, #8]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	212a      	movs	r1, #42	@ 0x2a
 80083d6:	438a      	bics	r2, r1
 80083d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2101      	movs	r1, #1
 80083e6:	430a      	orrs	r2, r1
 80083e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	0018      	movs	r0, r3
 80083ee:	f000 fbf9 	bl	8008be4 <UART_CheckIdleState>
 80083f2:	0003      	movs	r3, r0
}
 80083f4:	0018      	movs	r0, r3
 80083f6:	46bd      	mov	sp, r7
 80083f8:	b002      	add	sp, #8
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	ffffb7ff 	.word	0xffffb7ff

08008400 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08a      	sub	sp, #40	@ 0x28
 8008404:	af02      	add	r7, sp, #8
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	603b      	str	r3, [r7, #0]
 800840c:	1dbb      	adds	r3, r7, #6
 800840e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008414:	2b20      	cmp	r3, #32
 8008416:	d000      	beq.n	800841a <HAL_UART_Transmit+0x1a>
 8008418:	e08c      	b.n	8008534 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <HAL_UART_Transmit+0x28>
 8008420:	1dbb      	adds	r3, r7, #6
 8008422:	881b      	ldrh	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e084      	b.n	8008536 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	689a      	ldr	r2, [r3, #8]
 8008430:	2380      	movs	r3, #128	@ 0x80
 8008432:	015b      	lsls	r3, r3, #5
 8008434:	429a      	cmp	r2, r3
 8008436:	d109      	bne.n	800844c <HAL_UART_Transmit+0x4c>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d105      	bne.n	800844c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2201      	movs	r2, #1
 8008444:	4013      	ands	r3, r2
 8008446:	d001      	beq.n	800844c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e074      	b.n	8008536 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2284      	movs	r2, #132	@ 0x84
 8008450:	2100      	movs	r1, #0
 8008452:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2221      	movs	r2, #33	@ 0x21
 8008458:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800845a:	f7fc fa57 	bl	800490c <HAL_GetTick>
 800845e:	0003      	movs	r3, r0
 8008460:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	1dba      	adds	r2, r7, #6
 8008466:	2150      	movs	r1, #80	@ 0x50
 8008468:	8812      	ldrh	r2, [r2, #0]
 800846a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	1dba      	adds	r2, r7, #6
 8008470:	2152      	movs	r1, #82	@ 0x52
 8008472:	8812      	ldrh	r2, [r2, #0]
 8008474:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	689a      	ldr	r2, [r3, #8]
 800847a:	2380      	movs	r3, #128	@ 0x80
 800847c:	015b      	lsls	r3, r3, #5
 800847e:	429a      	cmp	r2, r3
 8008480:	d108      	bne.n	8008494 <HAL_UART_Transmit+0x94>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d104      	bne.n	8008494 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800848a:	2300      	movs	r3, #0
 800848c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	61bb      	str	r3, [r7, #24]
 8008492:	e003      	b.n	800849c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008498:	2300      	movs	r3, #0
 800849a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800849c:	e02f      	b.n	80084fe <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	0013      	movs	r3, r2
 80084a8:	2200      	movs	r2, #0
 80084aa:	2180      	movs	r1, #128	@ 0x80
 80084ac:	f000 fc42 	bl	8008d34 <UART_WaitOnFlagUntilTimeout>
 80084b0:	1e03      	subs	r3, r0, #0
 80084b2:	d004      	beq.n	80084be <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2220      	movs	r2, #32
 80084b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e03b      	b.n	8008536 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10b      	bne.n	80084dc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	001a      	movs	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	05d2      	lsls	r2, r2, #23
 80084d0:	0dd2      	lsrs	r2, r2, #23
 80084d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	3302      	adds	r3, #2
 80084d8:	61bb      	str	r3, [r7, #24]
 80084da:	e007      	b.n	80084ec <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	781a      	ldrb	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	3301      	adds	r3, #1
 80084ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2252      	movs	r2, #82	@ 0x52
 80084f0:	5a9b      	ldrh	r3, [r3, r2]
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	3b01      	subs	r3, #1
 80084f6:	b299      	uxth	r1, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2252      	movs	r2, #82	@ 0x52
 80084fc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2252      	movs	r2, #82	@ 0x52
 8008502:	5a9b      	ldrh	r3, [r3, r2]
 8008504:	b29b      	uxth	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1c9      	bne.n	800849e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	9300      	str	r3, [sp, #0]
 8008512:	0013      	movs	r3, r2
 8008514:	2200      	movs	r2, #0
 8008516:	2140      	movs	r1, #64	@ 0x40
 8008518:	f000 fc0c 	bl	8008d34 <UART_WaitOnFlagUntilTimeout>
 800851c:	1e03      	subs	r3, r0, #0
 800851e:	d004      	beq.n	800852a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2220      	movs	r2, #32
 8008524:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e005      	b.n	8008536 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2220      	movs	r2, #32
 800852e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	e000      	b.n	8008536 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8008534:	2302      	movs	r3, #2
  }
}
 8008536:	0018      	movs	r0, r3
 8008538:	46bd      	mov	sp, r7
 800853a:	b008      	add	sp, #32
 800853c:	bd80      	pop	{r7, pc}
	...

08008540 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008540:	b5b0      	push	{r4, r5, r7, lr}
 8008542:	b08e      	sub	sp, #56	@ 0x38
 8008544:	af00      	add	r7, sp, #0
 8008546:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008548:	231a      	movs	r3, #26
 800854a:	2218      	movs	r2, #24
 800854c:	189b      	adds	r3, r3, r2
 800854e:	19db      	adds	r3, r3, r7
 8008550:	2200      	movs	r2, #0
 8008552:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	431a      	orrs	r2, r3
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	431a      	orrs	r2, r3
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	4313      	orrs	r3, r2
 800856a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4ac3      	ldr	r2, [pc, #780]	@ (8008880 <UART_SetConfig+0x340>)
 8008574:	4013      	ands	r3, r2
 8008576:	0019      	movs	r1, r3
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800857e:	430a      	orrs	r2, r1
 8008580:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	4abe      	ldr	r2, [pc, #760]	@ (8008884 <UART_SetConfig+0x344>)
 800858a:	4013      	ands	r3, r2
 800858c:	0019      	movs	r1, r3
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	68da      	ldr	r2, [r3, #12]
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	430a      	orrs	r2, r1
 8008598:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4ab8      	ldr	r2, [pc, #736]	@ (8008888 <UART_SetConfig+0x348>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d004      	beq.n	80085b4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085b0:	4313      	orrs	r3, r2
 80085b2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	4ab4      	ldr	r2, [pc, #720]	@ (800888c <UART_SetConfig+0x34c>)
 80085bc:	4013      	ands	r3, r2
 80085be:	0019      	movs	r1, r3
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085c6:	430a      	orrs	r2, r1
 80085c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4ab0      	ldr	r2, [pc, #704]	@ (8008890 <UART_SetConfig+0x350>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d131      	bne.n	8008638 <UART_SetConfig+0xf8>
 80085d4:	4baf      	ldr	r3, [pc, #700]	@ (8008894 <UART_SetConfig+0x354>)
 80085d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085d8:	2203      	movs	r2, #3
 80085da:	4013      	ands	r3, r2
 80085dc:	2b03      	cmp	r3, #3
 80085de:	d01d      	beq.n	800861c <UART_SetConfig+0xdc>
 80085e0:	d823      	bhi.n	800862a <UART_SetConfig+0xea>
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d00c      	beq.n	8008600 <UART_SetConfig+0xc0>
 80085e6:	d820      	bhi.n	800862a <UART_SetConfig+0xea>
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d002      	beq.n	80085f2 <UART_SetConfig+0xb2>
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d00e      	beq.n	800860e <UART_SetConfig+0xce>
 80085f0:	e01b      	b.n	800862a <UART_SetConfig+0xea>
 80085f2:	231b      	movs	r3, #27
 80085f4:	2218      	movs	r2, #24
 80085f6:	189b      	adds	r3, r3, r2
 80085f8:	19db      	adds	r3, r3, r7
 80085fa:	2201      	movs	r2, #1
 80085fc:	701a      	strb	r2, [r3, #0]
 80085fe:	e0b4      	b.n	800876a <UART_SetConfig+0x22a>
 8008600:	231b      	movs	r3, #27
 8008602:	2218      	movs	r2, #24
 8008604:	189b      	adds	r3, r3, r2
 8008606:	19db      	adds	r3, r3, r7
 8008608:	2202      	movs	r2, #2
 800860a:	701a      	strb	r2, [r3, #0]
 800860c:	e0ad      	b.n	800876a <UART_SetConfig+0x22a>
 800860e:	231b      	movs	r3, #27
 8008610:	2218      	movs	r2, #24
 8008612:	189b      	adds	r3, r3, r2
 8008614:	19db      	adds	r3, r3, r7
 8008616:	2204      	movs	r2, #4
 8008618:	701a      	strb	r2, [r3, #0]
 800861a:	e0a6      	b.n	800876a <UART_SetConfig+0x22a>
 800861c:	231b      	movs	r3, #27
 800861e:	2218      	movs	r2, #24
 8008620:	189b      	adds	r3, r3, r2
 8008622:	19db      	adds	r3, r3, r7
 8008624:	2208      	movs	r2, #8
 8008626:	701a      	strb	r2, [r3, #0]
 8008628:	e09f      	b.n	800876a <UART_SetConfig+0x22a>
 800862a:	231b      	movs	r3, #27
 800862c:	2218      	movs	r2, #24
 800862e:	189b      	adds	r3, r3, r2
 8008630:	19db      	adds	r3, r3, r7
 8008632:	2210      	movs	r2, #16
 8008634:	701a      	strb	r2, [r3, #0]
 8008636:	e098      	b.n	800876a <UART_SetConfig+0x22a>
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a96      	ldr	r2, [pc, #600]	@ (8008898 <UART_SetConfig+0x358>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d131      	bne.n	80086a6 <UART_SetConfig+0x166>
 8008642:	4b94      	ldr	r3, [pc, #592]	@ (8008894 <UART_SetConfig+0x354>)
 8008644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008646:	220c      	movs	r2, #12
 8008648:	4013      	ands	r3, r2
 800864a:	2b0c      	cmp	r3, #12
 800864c:	d01d      	beq.n	800868a <UART_SetConfig+0x14a>
 800864e:	d823      	bhi.n	8008698 <UART_SetConfig+0x158>
 8008650:	2b08      	cmp	r3, #8
 8008652:	d00c      	beq.n	800866e <UART_SetConfig+0x12e>
 8008654:	d820      	bhi.n	8008698 <UART_SetConfig+0x158>
 8008656:	2b00      	cmp	r3, #0
 8008658:	d002      	beq.n	8008660 <UART_SetConfig+0x120>
 800865a:	2b04      	cmp	r3, #4
 800865c:	d00e      	beq.n	800867c <UART_SetConfig+0x13c>
 800865e:	e01b      	b.n	8008698 <UART_SetConfig+0x158>
 8008660:	231b      	movs	r3, #27
 8008662:	2218      	movs	r2, #24
 8008664:	189b      	adds	r3, r3, r2
 8008666:	19db      	adds	r3, r3, r7
 8008668:	2200      	movs	r2, #0
 800866a:	701a      	strb	r2, [r3, #0]
 800866c:	e07d      	b.n	800876a <UART_SetConfig+0x22a>
 800866e:	231b      	movs	r3, #27
 8008670:	2218      	movs	r2, #24
 8008672:	189b      	adds	r3, r3, r2
 8008674:	19db      	adds	r3, r3, r7
 8008676:	2202      	movs	r2, #2
 8008678:	701a      	strb	r2, [r3, #0]
 800867a:	e076      	b.n	800876a <UART_SetConfig+0x22a>
 800867c:	231b      	movs	r3, #27
 800867e:	2218      	movs	r2, #24
 8008680:	189b      	adds	r3, r3, r2
 8008682:	19db      	adds	r3, r3, r7
 8008684:	2204      	movs	r2, #4
 8008686:	701a      	strb	r2, [r3, #0]
 8008688:	e06f      	b.n	800876a <UART_SetConfig+0x22a>
 800868a:	231b      	movs	r3, #27
 800868c:	2218      	movs	r2, #24
 800868e:	189b      	adds	r3, r3, r2
 8008690:	19db      	adds	r3, r3, r7
 8008692:	2208      	movs	r2, #8
 8008694:	701a      	strb	r2, [r3, #0]
 8008696:	e068      	b.n	800876a <UART_SetConfig+0x22a>
 8008698:	231b      	movs	r3, #27
 800869a:	2218      	movs	r2, #24
 800869c:	189b      	adds	r3, r3, r2
 800869e:	19db      	adds	r3, r3, r7
 80086a0:	2210      	movs	r2, #16
 80086a2:	701a      	strb	r2, [r3, #0]
 80086a4:	e061      	b.n	800876a <UART_SetConfig+0x22a>
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a7c      	ldr	r2, [pc, #496]	@ (800889c <UART_SetConfig+0x35c>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d106      	bne.n	80086be <UART_SetConfig+0x17e>
 80086b0:	231b      	movs	r3, #27
 80086b2:	2218      	movs	r2, #24
 80086b4:	189b      	adds	r3, r3, r2
 80086b6:	19db      	adds	r3, r3, r7
 80086b8:	2200      	movs	r2, #0
 80086ba:	701a      	strb	r2, [r3, #0]
 80086bc:	e055      	b.n	800876a <UART_SetConfig+0x22a>
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a77      	ldr	r2, [pc, #476]	@ (80088a0 <UART_SetConfig+0x360>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d106      	bne.n	80086d6 <UART_SetConfig+0x196>
 80086c8:	231b      	movs	r3, #27
 80086ca:	2218      	movs	r2, #24
 80086cc:	189b      	adds	r3, r3, r2
 80086ce:	19db      	adds	r3, r3, r7
 80086d0:	2200      	movs	r2, #0
 80086d2:	701a      	strb	r2, [r3, #0]
 80086d4:	e049      	b.n	800876a <UART_SetConfig+0x22a>
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a6b      	ldr	r2, [pc, #428]	@ (8008888 <UART_SetConfig+0x348>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d13e      	bne.n	800875e <UART_SetConfig+0x21e>
 80086e0:	4b6c      	ldr	r3, [pc, #432]	@ (8008894 <UART_SetConfig+0x354>)
 80086e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086e4:	23c0      	movs	r3, #192	@ 0xc0
 80086e6:	011b      	lsls	r3, r3, #4
 80086e8:	4013      	ands	r3, r2
 80086ea:	22c0      	movs	r2, #192	@ 0xc0
 80086ec:	0112      	lsls	r2, r2, #4
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d027      	beq.n	8008742 <UART_SetConfig+0x202>
 80086f2:	22c0      	movs	r2, #192	@ 0xc0
 80086f4:	0112      	lsls	r2, r2, #4
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d82a      	bhi.n	8008750 <UART_SetConfig+0x210>
 80086fa:	2280      	movs	r2, #128	@ 0x80
 80086fc:	0112      	lsls	r2, r2, #4
 80086fe:	4293      	cmp	r3, r2
 8008700:	d011      	beq.n	8008726 <UART_SetConfig+0x1e6>
 8008702:	2280      	movs	r2, #128	@ 0x80
 8008704:	0112      	lsls	r2, r2, #4
 8008706:	4293      	cmp	r3, r2
 8008708:	d822      	bhi.n	8008750 <UART_SetConfig+0x210>
 800870a:	2b00      	cmp	r3, #0
 800870c:	d004      	beq.n	8008718 <UART_SetConfig+0x1d8>
 800870e:	2280      	movs	r2, #128	@ 0x80
 8008710:	00d2      	lsls	r2, r2, #3
 8008712:	4293      	cmp	r3, r2
 8008714:	d00e      	beq.n	8008734 <UART_SetConfig+0x1f4>
 8008716:	e01b      	b.n	8008750 <UART_SetConfig+0x210>
 8008718:	231b      	movs	r3, #27
 800871a:	2218      	movs	r2, #24
 800871c:	189b      	adds	r3, r3, r2
 800871e:	19db      	adds	r3, r3, r7
 8008720:	2200      	movs	r2, #0
 8008722:	701a      	strb	r2, [r3, #0]
 8008724:	e021      	b.n	800876a <UART_SetConfig+0x22a>
 8008726:	231b      	movs	r3, #27
 8008728:	2218      	movs	r2, #24
 800872a:	189b      	adds	r3, r3, r2
 800872c:	19db      	adds	r3, r3, r7
 800872e:	2202      	movs	r2, #2
 8008730:	701a      	strb	r2, [r3, #0]
 8008732:	e01a      	b.n	800876a <UART_SetConfig+0x22a>
 8008734:	231b      	movs	r3, #27
 8008736:	2218      	movs	r2, #24
 8008738:	189b      	adds	r3, r3, r2
 800873a:	19db      	adds	r3, r3, r7
 800873c:	2204      	movs	r2, #4
 800873e:	701a      	strb	r2, [r3, #0]
 8008740:	e013      	b.n	800876a <UART_SetConfig+0x22a>
 8008742:	231b      	movs	r3, #27
 8008744:	2218      	movs	r2, #24
 8008746:	189b      	adds	r3, r3, r2
 8008748:	19db      	adds	r3, r3, r7
 800874a:	2208      	movs	r2, #8
 800874c:	701a      	strb	r2, [r3, #0]
 800874e:	e00c      	b.n	800876a <UART_SetConfig+0x22a>
 8008750:	231b      	movs	r3, #27
 8008752:	2218      	movs	r2, #24
 8008754:	189b      	adds	r3, r3, r2
 8008756:	19db      	adds	r3, r3, r7
 8008758:	2210      	movs	r2, #16
 800875a:	701a      	strb	r2, [r3, #0]
 800875c:	e005      	b.n	800876a <UART_SetConfig+0x22a>
 800875e:	231b      	movs	r3, #27
 8008760:	2218      	movs	r2, #24
 8008762:	189b      	adds	r3, r3, r2
 8008764:	19db      	adds	r3, r3, r7
 8008766:	2210      	movs	r2, #16
 8008768:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a46      	ldr	r2, [pc, #280]	@ (8008888 <UART_SetConfig+0x348>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d000      	beq.n	8008776 <UART_SetConfig+0x236>
 8008774:	e09a      	b.n	80088ac <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008776:	231b      	movs	r3, #27
 8008778:	2218      	movs	r2, #24
 800877a:	189b      	adds	r3, r3, r2
 800877c:	19db      	adds	r3, r3, r7
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	2b08      	cmp	r3, #8
 8008782:	d01d      	beq.n	80087c0 <UART_SetConfig+0x280>
 8008784:	dc20      	bgt.n	80087c8 <UART_SetConfig+0x288>
 8008786:	2b04      	cmp	r3, #4
 8008788:	d015      	beq.n	80087b6 <UART_SetConfig+0x276>
 800878a:	dc1d      	bgt.n	80087c8 <UART_SetConfig+0x288>
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <UART_SetConfig+0x256>
 8008790:	2b02      	cmp	r3, #2
 8008792:	d005      	beq.n	80087a0 <UART_SetConfig+0x260>
 8008794:	e018      	b.n	80087c8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008796:	f7ff fc57 	bl	8008048 <HAL_RCC_GetPCLK1Freq>
 800879a:	0003      	movs	r3, r0
 800879c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800879e:	e01c      	b.n	80087da <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087a0:	4b3c      	ldr	r3, [pc, #240]	@ (8008894 <UART_SetConfig+0x354>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2210      	movs	r2, #16
 80087a6:	4013      	ands	r3, r2
 80087a8:	d002      	beq.n	80087b0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80087aa:	4b3e      	ldr	r3, [pc, #248]	@ (80088a4 <UART_SetConfig+0x364>)
 80087ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80087ae:	e014      	b.n	80087da <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80087b0:	4b3d      	ldr	r3, [pc, #244]	@ (80088a8 <UART_SetConfig+0x368>)
 80087b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80087b4:	e011      	b.n	80087da <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087b6:	f7ff fb97 	bl	8007ee8 <HAL_RCC_GetSysClockFreq>
 80087ba:	0003      	movs	r3, r0
 80087bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80087be:	e00c      	b.n	80087da <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087c0:	2380      	movs	r3, #128	@ 0x80
 80087c2:	021b      	lsls	r3, r3, #8
 80087c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80087c6:	e008      	b.n	80087da <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80087cc:	231a      	movs	r3, #26
 80087ce:	2218      	movs	r2, #24
 80087d0:	189b      	adds	r3, r3, r2
 80087d2:	19db      	adds	r3, r3, r7
 80087d4:	2201      	movs	r2, #1
 80087d6:	701a      	strb	r2, [r3, #0]
        break;
 80087d8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d100      	bne.n	80087e2 <UART_SetConfig+0x2a2>
 80087e0:	e133      	b.n	8008a4a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	0013      	movs	r3, r2
 80087e8:	005b      	lsls	r3, r3, #1
 80087ea:	189b      	adds	r3, r3, r2
 80087ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d305      	bcc.n	80087fe <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80087f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d906      	bls.n	800880c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80087fe:	231a      	movs	r3, #26
 8008800:	2218      	movs	r2, #24
 8008802:	189b      	adds	r3, r3, r2
 8008804:	19db      	adds	r3, r3, r7
 8008806:	2201      	movs	r2, #1
 8008808:	701a      	strb	r2, [r3, #0]
 800880a:	e11e      	b.n	8008a4a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800880c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800880e:	613b      	str	r3, [r7, #16]
 8008810:	2300      	movs	r3, #0
 8008812:	617b      	str	r3, [r7, #20]
 8008814:	6939      	ldr	r1, [r7, #16]
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	000b      	movs	r3, r1
 800881a:	0e1b      	lsrs	r3, r3, #24
 800881c:	0010      	movs	r0, r2
 800881e:	0205      	lsls	r5, r0, #8
 8008820:	431d      	orrs	r5, r3
 8008822:	000b      	movs	r3, r1
 8008824:	021c      	lsls	r4, r3, #8
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	085b      	lsrs	r3, r3, #1
 800882c:	60bb      	str	r3, [r7, #8]
 800882e:	2300      	movs	r3, #0
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	68b8      	ldr	r0, [r7, #8]
 8008834:	68f9      	ldr	r1, [r7, #12]
 8008836:	1900      	adds	r0, r0, r4
 8008838:	4169      	adcs	r1, r5
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	603b      	str	r3, [r7, #0]
 8008840:	2300      	movs	r3, #0
 8008842:	607b      	str	r3, [r7, #4]
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f7f7 fe2e 	bl	80004a8 <__aeabi_uldivmod>
 800884c:	0002      	movs	r2, r0
 800884e:	000b      	movs	r3, r1
 8008850:	0013      	movs	r3, r2
 8008852:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008854:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008856:	23c0      	movs	r3, #192	@ 0xc0
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	429a      	cmp	r2, r3
 800885c:	d309      	bcc.n	8008872 <UART_SetConfig+0x332>
 800885e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008860:	2380      	movs	r3, #128	@ 0x80
 8008862:	035b      	lsls	r3, r3, #13
 8008864:	429a      	cmp	r2, r3
 8008866:	d204      	bcs.n	8008872 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800886e:	60da      	str	r2, [r3, #12]
 8008870:	e0eb      	b.n	8008a4a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8008872:	231a      	movs	r3, #26
 8008874:	2218      	movs	r2, #24
 8008876:	189b      	adds	r3, r3, r2
 8008878:	19db      	adds	r3, r3, r7
 800887a:	2201      	movs	r2, #1
 800887c:	701a      	strb	r2, [r3, #0]
 800887e:	e0e4      	b.n	8008a4a <UART_SetConfig+0x50a>
 8008880:	efff69f3 	.word	0xefff69f3
 8008884:	ffffcfff 	.word	0xffffcfff
 8008888:	40004800 	.word	0x40004800
 800888c:	fffff4ff 	.word	0xfffff4ff
 8008890:	40013800 	.word	0x40013800
 8008894:	40021000 	.word	0x40021000
 8008898:	40004400 	.word	0x40004400
 800889c:	40004c00 	.word	0x40004c00
 80088a0:	40005000 	.word	0x40005000
 80088a4:	003d0900 	.word	0x003d0900
 80088a8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	69da      	ldr	r2, [r3, #28]
 80088b0:	2380      	movs	r3, #128	@ 0x80
 80088b2:	021b      	lsls	r3, r3, #8
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d000      	beq.n	80088ba <UART_SetConfig+0x37a>
 80088b8:	e070      	b.n	800899c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80088ba:	231b      	movs	r3, #27
 80088bc:	2218      	movs	r2, #24
 80088be:	189b      	adds	r3, r3, r2
 80088c0:	19db      	adds	r3, r3, r7
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	2b08      	cmp	r3, #8
 80088c6:	d822      	bhi.n	800890e <UART_SetConfig+0x3ce>
 80088c8:	009a      	lsls	r2, r3, #2
 80088ca:	4b67      	ldr	r3, [pc, #412]	@ (8008a68 <UART_SetConfig+0x528>)
 80088cc:	18d3      	adds	r3, r2, r3
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088d2:	f7ff fbb9 	bl	8008048 <HAL_RCC_GetPCLK1Freq>
 80088d6:	0003      	movs	r3, r0
 80088d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80088da:	e021      	b.n	8008920 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088dc:	f7ff fbca 	bl	8008074 <HAL_RCC_GetPCLK2Freq>
 80088e0:	0003      	movs	r3, r0
 80088e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80088e4:	e01c      	b.n	8008920 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088e6:	4b61      	ldr	r3, [pc, #388]	@ (8008a6c <UART_SetConfig+0x52c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2210      	movs	r2, #16
 80088ec:	4013      	ands	r3, r2
 80088ee:	d002      	beq.n	80088f6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80088f0:	4b5f      	ldr	r3, [pc, #380]	@ (8008a70 <UART_SetConfig+0x530>)
 80088f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088f4:	e014      	b.n	8008920 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80088f6:	4b5f      	ldr	r3, [pc, #380]	@ (8008a74 <UART_SetConfig+0x534>)
 80088f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80088fa:	e011      	b.n	8008920 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088fc:	f7ff faf4 	bl	8007ee8 <HAL_RCC_GetSysClockFreq>
 8008900:	0003      	movs	r3, r0
 8008902:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008904:	e00c      	b.n	8008920 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008906:	2380      	movs	r3, #128	@ 0x80
 8008908:	021b      	lsls	r3, r3, #8
 800890a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800890c:	e008      	b.n	8008920 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800890e:	2300      	movs	r3, #0
 8008910:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8008912:	231a      	movs	r3, #26
 8008914:	2218      	movs	r2, #24
 8008916:	189b      	adds	r3, r3, r2
 8008918:	19db      	adds	r3, r3, r7
 800891a:	2201      	movs	r2, #1
 800891c:	701a      	strb	r2, [r3, #0]
        break;
 800891e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008922:	2b00      	cmp	r3, #0
 8008924:	d100      	bne.n	8008928 <UART_SetConfig+0x3e8>
 8008926:	e090      	b.n	8008a4a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892a:	005a      	lsls	r2, r3, #1
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	085b      	lsrs	r3, r3, #1
 8008932:	18d2      	adds	r2, r2, r3
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	0019      	movs	r1, r3
 800893a:	0010      	movs	r0, r2
 800893c:	f7f7 fc00 	bl	8000140 <__udivsi3>
 8008940:	0003      	movs	r3, r0
 8008942:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008946:	2b0f      	cmp	r3, #15
 8008948:	d921      	bls.n	800898e <UART_SetConfig+0x44e>
 800894a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800894c:	2380      	movs	r3, #128	@ 0x80
 800894e:	025b      	lsls	r3, r3, #9
 8008950:	429a      	cmp	r2, r3
 8008952:	d21c      	bcs.n	800898e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008956:	b29a      	uxth	r2, r3
 8008958:	200e      	movs	r0, #14
 800895a:	2418      	movs	r4, #24
 800895c:	1903      	adds	r3, r0, r4
 800895e:	19db      	adds	r3, r3, r7
 8008960:	210f      	movs	r1, #15
 8008962:	438a      	bics	r2, r1
 8008964:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008968:	085b      	lsrs	r3, r3, #1
 800896a:	b29b      	uxth	r3, r3
 800896c:	2207      	movs	r2, #7
 800896e:	4013      	ands	r3, r2
 8008970:	b299      	uxth	r1, r3
 8008972:	1903      	adds	r3, r0, r4
 8008974:	19db      	adds	r3, r3, r7
 8008976:	1902      	adds	r2, r0, r4
 8008978:	19d2      	adds	r2, r2, r7
 800897a:	8812      	ldrh	r2, [r2, #0]
 800897c:	430a      	orrs	r2, r1
 800897e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	1902      	adds	r2, r0, r4
 8008986:	19d2      	adds	r2, r2, r7
 8008988:	8812      	ldrh	r2, [r2, #0]
 800898a:	60da      	str	r2, [r3, #12]
 800898c:	e05d      	b.n	8008a4a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800898e:	231a      	movs	r3, #26
 8008990:	2218      	movs	r2, #24
 8008992:	189b      	adds	r3, r3, r2
 8008994:	19db      	adds	r3, r3, r7
 8008996:	2201      	movs	r2, #1
 8008998:	701a      	strb	r2, [r3, #0]
 800899a:	e056      	b.n	8008a4a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800899c:	231b      	movs	r3, #27
 800899e:	2218      	movs	r2, #24
 80089a0:	189b      	adds	r3, r3, r2
 80089a2:	19db      	adds	r3, r3, r7
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	2b08      	cmp	r3, #8
 80089a8:	d822      	bhi.n	80089f0 <UART_SetConfig+0x4b0>
 80089aa:	009a      	lsls	r2, r3, #2
 80089ac:	4b32      	ldr	r3, [pc, #200]	@ (8008a78 <UART_SetConfig+0x538>)
 80089ae:	18d3      	adds	r3, r2, r3
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089b4:	f7ff fb48 	bl	8008048 <HAL_RCC_GetPCLK1Freq>
 80089b8:	0003      	movs	r3, r0
 80089ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80089bc:	e021      	b.n	8008a02 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089be:	f7ff fb59 	bl	8008074 <HAL_RCC_GetPCLK2Freq>
 80089c2:	0003      	movs	r3, r0
 80089c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80089c6:	e01c      	b.n	8008a02 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089c8:	4b28      	ldr	r3, [pc, #160]	@ (8008a6c <UART_SetConfig+0x52c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2210      	movs	r2, #16
 80089ce:	4013      	ands	r3, r2
 80089d0:	d002      	beq.n	80089d8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80089d2:	4b27      	ldr	r3, [pc, #156]	@ (8008a70 <UART_SetConfig+0x530>)
 80089d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089d6:	e014      	b.n	8008a02 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80089d8:	4b26      	ldr	r3, [pc, #152]	@ (8008a74 <UART_SetConfig+0x534>)
 80089da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80089dc:	e011      	b.n	8008a02 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089de:	f7ff fa83 	bl	8007ee8 <HAL_RCC_GetSysClockFreq>
 80089e2:	0003      	movs	r3, r0
 80089e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80089e6:	e00c      	b.n	8008a02 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089e8:	2380      	movs	r3, #128	@ 0x80
 80089ea:	021b      	lsls	r3, r3, #8
 80089ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80089ee:	e008      	b.n	8008a02 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80089f0:	2300      	movs	r3, #0
 80089f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80089f4:	231a      	movs	r3, #26
 80089f6:	2218      	movs	r2, #24
 80089f8:	189b      	adds	r3, r3, r2
 80089fa:	19db      	adds	r3, r3, r7
 80089fc:	2201      	movs	r2, #1
 80089fe:	701a      	strb	r2, [r3, #0]
        break;
 8008a00:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d020      	beq.n	8008a4a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	085a      	lsrs	r2, r3, #1
 8008a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a10:	18d2      	adds	r2, r2, r3
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	0019      	movs	r1, r3
 8008a18:	0010      	movs	r0, r2
 8008a1a:	f7f7 fb91 	bl	8000140 <__udivsi3>
 8008a1e:	0003      	movs	r3, r0
 8008a20:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a24:	2b0f      	cmp	r3, #15
 8008a26:	d90a      	bls.n	8008a3e <UART_SetConfig+0x4fe>
 8008a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a2a:	2380      	movs	r3, #128	@ 0x80
 8008a2c:	025b      	lsls	r3, r3, #9
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d205      	bcs.n	8008a3e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	60da      	str	r2, [r3, #12]
 8008a3c:	e005      	b.n	8008a4a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8008a3e:	231a      	movs	r3, #26
 8008a40:	2218      	movs	r2, #24
 8008a42:	189b      	adds	r3, r3, r2
 8008a44:	19db      	adds	r3, r3, r7
 8008a46:	2201      	movs	r2, #1
 8008a48:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	2200      	movs	r2, #0
 8008a54:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008a56:	231a      	movs	r3, #26
 8008a58:	2218      	movs	r2, #24
 8008a5a:	189b      	adds	r3, r3, r2
 8008a5c:	19db      	adds	r3, r3, r7
 8008a5e:	781b      	ldrb	r3, [r3, #0]
}
 8008a60:	0018      	movs	r0, r3
 8008a62:	46bd      	mov	sp, r7
 8008a64:	b00e      	add	sp, #56	@ 0x38
 8008a66:	bdb0      	pop	{r4, r5, r7, pc}
 8008a68:	0800c158 	.word	0x0800c158
 8008a6c:	40021000 	.word	0x40021000
 8008a70:	003d0900 	.word	0x003d0900
 8008a74:	00f42400 	.word	0x00f42400
 8008a78:	0800c17c 	.word	0x0800c17c

08008a7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a88:	2201      	movs	r2, #1
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	d00b      	beq.n	8008aa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	4a4a      	ldr	r2, [pc, #296]	@ (8008bc0 <UART_AdvFeatureConfig+0x144>)
 8008a96:	4013      	ands	r3, r2
 8008a98:	0019      	movs	r1, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aaa:	2202      	movs	r2, #2
 8008aac:	4013      	ands	r3, r2
 8008aae:	d00b      	beq.n	8008ac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	4a43      	ldr	r2, [pc, #268]	@ (8008bc4 <UART_AdvFeatureConfig+0x148>)
 8008ab8:	4013      	ands	r3, r2
 8008aba:	0019      	movs	r1, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008acc:	2204      	movs	r2, #4
 8008ace:	4013      	ands	r3, r2
 8008ad0:	d00b      	beq.n	8008aea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	4a3b      	ldr	r2, [pc, #236]	@ (8008bc8 <UART_AdvFeatureConfig+0x14c>)
 8008ada:	4013      	ands	r3, r2
 8008adc:	0019      	movs	r1, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aee:	2208      	movs	r2, #8
 8008af0:	4013      	ands	r3, r2
 8008af2:	d00b      	beq.n	8008b0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	4a34      	ldr	r2, [pc, #208]	@ (8008bcc <UART_AdvFeatureConfig+0x150>)
 8008afc:	4013      	ands	r3, r2
 8008afe:	0019      	movs	r1, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b10:	2210      	movs	r2, #16
 8008b12:	4013      	ands	r3, r2
 8008b14:	d00b      	beq.n	8008b2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	4a2c      	ldr	r2, [pc, #176]	@ (8008bd0 <UART_AdvFeatureConfig+0x154>)
 8008b1e:	4013      	ands	r3, r2
 8008b20:	0019      	movs	r1, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	430a      	orrs	r2, r1
 8008b2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b32:	2220      	movs	r2, #32
 8008b34:	4013      	ands	r3, r2
 8008b36:	d00b      	beq.n	8008b50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	4a25      	ldr	r2, [pc, #148]	@ (8008bd4 <UART_AdvFeatureConfig+0x158>)
 8008b40:	4013      	ands	r3, r2
 8008b42:	0019      	movs	r1, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b54:	2240      	movs	r2, #64	@ 0x40
 8008b56:	4013      	ands	r3, r2
 8008b58:	d01d      	beq.n	8008b96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	4a1d      	ldr	r2, [pc, #116]	@ (8008bd8 <UART_AdvFeatureConfig+0x15c>)
 8008b62:	4013      	ands	r3, r2
 8008b64:	0019      	movs	r1, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b76:	2380      	movs	r3, #128	@ 0x80
 8008b78:	035b      	lsls	r3, r3, #13
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d10b      	bne.n	8008b96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	4a15      	ldr	r2, [pc, #84]	@ (8008bdc <UART_AdvFeatureConfig+0x160>)
 8008b86:	4013      	ands	r3, r2
 8008b88:	0019      	movs	r1, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b9a:	2280      	movs	r2, #128	@ 0x80
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	d00b      	beq.n	8008bb8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8008be0 <UART_AdvFeatureConfig+0x164>)
 8008ba8:	4013      	ands	r3, r2
 8008baa:	0019      	movs	r1, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	430a      	orrs	r2, r1
 8008bb6:	605a      	str	r2, [r3, #4]
  }
}
 8008bb8:	46c0      	nop			@ (mov r8, r8)
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	b002      	add	sp, #8
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	fffdffff 	.word	0xfffdffff
 8008bc4:	fffeffff 	.word	0xfffeffff
 8008bc8:	fffbffff 	.word	0xfffbffff
 8008bcc:	ffff7fff 	.word	0xffff7fff
 8008bd0:	ffffefff 	.word	0xffffefff
 8008bd4:	ffffdfff 	.word	0xffffdfff
 8008bd8:	ffefffff 	.word	0xffefffff
 8008bdc:	ff9fffff 	.word	0xff9fffff
 8008be0:	fff7ffff 	.word	0xfff7ffff

08008be4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b092      	sub	sp, #72	@ 0x48
 8008be8:	af02      	add	r7, sp, #8
 8008bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2284      	movs	r2, #132	@ 0x84
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bf4:	f7fb fe8a 	bl	800490c <HAL_GetTick>
 8008bf8:	0003      	movs	r3, r0
 8008bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2208      	movs	r2, #8
 8008c04:	4013      	ands	r3, r2
 8008c06:	2b08      	cmp	r3, #8
 8008c08:	d12c      	bne.n	8008c64 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c0c:	2280      	movs	r2, #128	@ 0x80
 8008c0e:	0391      	lsls	r1, r2, #14
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	4a46      	ldr	r2, [pc, #280]	@ (8008d2c <UART_CheckIdleState+0x148>)
 8008c14:	9200      	str	r2, [sp, #0]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f000 f88c 	bl	8008d34 <UART_WaitOnFlagUntilTimeout>
 8008c1c:	1e03      	subs	r3, r0, #0
 8008c1e:	d021      	beq.n	8008c64 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c20:	f3ef 8310 	mrs	r3, PRIMASK
 8008c24:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008c28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c30:	f383 8810 	msr	PRIMASK, r3
}
 8008c34:	46c0      	nop			@ (mov r8, r8)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2180      	movs	r1, #128	@ 0x80
 8008c42:	438a      	bics	r2, r1
 8008c44:	601a      	str	r2, [r3, #0]
 8008c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c4c:	f383 8810 	msr	PRIMASK, r3
}
 8008c50:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2220      	movs	r2, #32
 8008c56:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2278      	movs	r2, #120	@ 0x78
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e05f      	b.n	8008d24 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2204      	movs	r2, #4
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	2b04      	cmp	r3, #4
 8008c70:	d146      	bne.n	8008d00 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c74:	2280      	movs	r2, #128	@ 0x80
 8008c76:	03d1      	lsls	r1, r2, #15
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	4a2c      	ldr	r2, [pc, #176]	@ (8008d2c <UART_CheckIdleState+0x148>)
 8008c7c:	9200      	str	r2, [sp, #0]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f000 f858 	bl	8008d34 <UART_WaitOnFlagUntilTimeout>
 8008c84:	1e03      	subs	r3, r0, #0
 8008c86:	d03b      	beq.n	8008d00 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c88:	f3ef 8310 	mrs	r3, PRIMASK
 8008c8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c92:	2301      	movs	r3, #1
 8008c94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	f383 8810 	msr	PRIMASK, r3
}
 8008c9c:	46c0      	nop			@ (mov r8, r8)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4921      	ldr	r1, [pc, #132]	@ (8008d30 <UART_CheckIdleState+0x14c>)
 8008caa:	400a      	ands	r2, r1
 8008cac:	601a      	str	r2, [r3, #0]
 8008cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	f383 8810 	msr	PRIMASK, r3
}
 8008cb8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cba:	f3ef 8310 	mrs	r3, PRIMASK
 8008cbe:	61bb      	str	r3, [r7, #24]
  return(result);
 8008cc0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	f383 8810 	msr	PRIMASK, r3
}
 8008cce:	46c0      	nop			@ (mov r8, r8)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	689a      	ldr	r2, [r3, #8]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2101      	movs	r1, #1
 8008cdc:	438a      	bics	r2, r1
 8008cde:	609a      	str	r2, [r3, #8]
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	f383 8810 	msr	PRIMASK, r3
}
 8008cea:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2280      	movs	r2, #128	@ 0x80
 8008cf0:	2120      	movs	r1, #32
 8008cf2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2278      	movs	r2, #120	@ 0x78
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e011      	b.n	8008d24 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2220      	movs	r2, #32
 8008d04:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2280      	movs	r2, #128	@ 0x80
 8008d0a:	2120      	movs	r1, #32
 8008d0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2278      	movs	r2, #120	@ 0x78
 8008d1e:	2100      	movs	r1, #0
 8008d20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	0018      	movs	r0, r3
 8008d26:	46bd      	mov	sp, r7
 8008d28:	b010      	add	sp, #64	@ 0x40
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	01ffffff 	.word	0x01ffffff
 8008d30:	fffffedf 	.word	0xfffffedf

08008d34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	603b      	str	r3, [r7, #0]
 8008d40:	1dfb      	adds	r3, r7, #7
 8008d42:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d44:	e04b      	b.n	8008dde <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	d048      	beq.n	8008dde <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d4c:	f7fb fdde 	bl	800490c <HAL_GetTick>
 8008d50:	0002      	movs	r2, r0
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d302      	bcc.n	8008d62 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d101      	bne.n	8008d66 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e04b      	b.n	8008dfe <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2204      	movs	r2, #4
 8008d6e:	4013      	ands	r3, r2
 8008d70:	d035      	beq.n	8008dde <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	69db      	ldr	r3, [r3, #28]
 8008d78:	2208      	movs	r2, #8
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	2b08      	cmp	r3, #8
 8008d7e:	d111      	bne.n	8008da4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2208      	movs	r2, #8
 8008d86:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	f000 f83c 	bl	8008e08 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2284      	movs	r2, #132	@ 0x84
 8008d94:	2108      	movs	r1, #8
 8008d96:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2278      	movs	r2, #120	@ 0x78
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	e02c      	b.n	8008dfe <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	69da      	ldr	r2, [r3, #28]
 8008daa:	2380      	movs	r3, #128	@ 0x80
 8008dac:	011b      	lsls	r3, r3, #4
 8008dae:	401a      	ands	r2, r3
 8008db0:	2380      	movs	r3, #128	@ 0x80
 8008db2:	011b      	lsls	r3, r3, #4
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d112      	bne.n	8008dde <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2280      	movs	r2, #128	@ 0x80
 8008dbe:	0112      	lsls	r2, r2, #4
 8008dc0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	0018      	movs	r0, r3
 8008dc6:	f000 f81f 	bl	8008e08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2284      	movs	r2, #132	@ 0x84
 8008dce:	2120      	movs	r1, #32
 8008dd0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2278      	movs	r2, #120	@ 0x78
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e00f      	b.n	8008dfe <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	69db      	ldr	r3, [r3, #28]
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	4013      	ands	r3, r2
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	425a      	negs	r2, r3
 8008dee:	4153      	adcs	r3, r2
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	001a      	movs	r2, r3
 8008df4:	1dfb      	adds	r3, r7, #7
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d0a4      	beq.n	8008d46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	0018      	movs	r0, r3
 8008e00:	46bd      	mov	sp, r7
 8008e02:	b004      	add	sp, #16
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08e      	sub	sp, #56	@ 0x38
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e10:	f3ef 8310 	mrs	r3, PRIMASK
 8008e14:	617b      	str	r3, [r7, #20]
  return(result);
 8008e16:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	f383 8810 	msr	PRIMASK, r3
}
 8008e24:	46c0      	nop			@ (mov r8, r8)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4926      	ldr	r1, [pc, #152]	@ (8008ecc <UART_EndRxTransfer+0xc4>)
 8008e32:	400a      	ands	r2, r1
 8008e34:	601a      	str	r2, [r3, #0]
 8008e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	f383 8810 	msr	PRIMASK, r3
}
 8008e40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e42:	f3ef 8310 	mrs	r3, PRIMASK
 8008e46:	623b      	str	r3, [r7, #32]
  return(result);
 8008e48:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e52:	f383 8810 	msr	PRIMASK, r3
}
 8008e56:	46c0      	nop			@ (mov r8, r8)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	689a      	ldr	r2, [r3, #8]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2101      	movs	r1, #1
 8008e64:	438a      	bics	r2, r1
 8008e66:	609a      	str	r2, [r3, #8]
 8008e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e6e:	f383 8810 	msr	PRIMASK, r3
}
 8008e72:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d118      	bne.n	8008eae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8008e80:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e82:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e86:	2301      	movs	r3, #1
 8008e88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f383 8810 	msr	PRIMASK, r3
}
 8008e90:	46c0      	nop			@ (mov r8, r8)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2110      	movs	r1, #16
 8008e9e:	438a      	bics	r2, r1
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	f383 8810 	msr	PRIMASK, r3
}
 8008eac:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2280      	movs	r2, #128	@ 0x80
 8008eb2:	2120      	movs	r1, #32
 8008eb4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008ec2:	46c0      	nop			@ (mov r8, r8)
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	b00e      	add	sp, #56	@ 0x38
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	46c0      	nop			@ (mov r8, r8)
 8008ecc:	fffffedf 	.word	0xfffffedf

08008ed0 <__cvt>:
 8008ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ed2:	001f      	movs	r7, r3
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	0016      	movs	r6, r2
 8008ed8:	b08b      	sub	sp, #44	@ 0x2c
 8008eda:	429f      	cmp	r7, r3
 8008edc:	da04      	bge.n	8008ee8 <__cvt+0x18>
 8008ede:	2180      	movs	r1, #128	@ 0x80
 8008ee0:	0609      	lsls	r1, r1, #24
 8008ee2:	187b      	adds	r3, r7, r1
 8008ee4:	001f      	movs	r7, r3
 8008ee6:	232d      	movs	r3, #45	@ 0x2d
 8008ee8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008eea:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8008eec:	7013      	strb	r3, [r2, #0]
 8008eee:	2320      	movs	r3, #32
 8008ef0:	2203      	movs	r2, #3
 8008ef2:	439d      	bics	r5, r3
 8008ef4:	2d46      	cmp	r5, #70	@ 0x46
 8008ef6:	d007      	beq.n	8008f08 <__cvt+0x38>
 8008ef8:	002b      	movs	r3, r5
 8008efa:	3b45      	subs	r3, #69	@ 0x45
 8008efc:	4259      	negs	r1, r3
 8008efe:	414b      	adcs	r3, r1
 8008f00:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008f02:	3a01      	subs	r2, #1
 8008f04:	18cb      	adds	r3, r1, r3
 8008f06:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f08:	ab09      	add	r3, sp, #36	@ 0x24
 8008f0a:	9304      	str	r3, [sp, #16]
 8008f0c:	ab08      	add	r3, sp, #32
 8008f0e:	9303      	str	r3, [sp, #12]
 8008f10:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f12:	9200      	str	r2, [sp, #0]
 8008f14:	9302      	str	r3, [sp, #8]
 8008f16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008f18:	0032      	movs	r2, r6
 8008f1a:	9301      	str	r3, [sp, #4]
 8008f1c:	003b      	movs	r3, r7
 8008f1e:	f000 fed1 	bl	8009cc4 <_dtoa_r>
 8008f22:	0004      	movs	r4, r0
 8008f24:	2d47      	cmp	r5, #71	@ 0x47
 8008f26:	d11b      	bne.n	8008f60 <__cvt+0x90>
 8008f28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008f2a:	07db      	lsls	r3, r3, #31
 8008f2c:	d511      	bpl.n	8008f52 <__cvt+0x82>
 8008f2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008f30:	18c3      	adds	r3, r0, r3
 8008f32:	9307      	str	r3, [sp, #28]
 8008f34:	2200      	movs	r2, #0
 8008f36:	2300      	movs	r3, #0
 8008f38:	0030      	movs	r0, r6
 8008f3a:	0039      	movs	r1, r7
 8008f3c:	f7f7 fa86 	bl	800044c <__aeabi_dcmpeq>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d001      	beq.n	8008f48 <__cvt+0x78>
 8008f44:	9b07      	ldr	r3, [sp, #28]
 8008f46:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f48:	2230      	movs	r2, #48	@ 0x30
 8008f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f4c:	9907      	ldr	r1, [sp, #28]
 8008f4e:	428b      	cmp	r3, r1
 8008f50:	d320      	bcc.n	8008f94 <__cvt+0xc4>
 8008f52:	0020      	movs	r0, r4
 8008f54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f56:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008f58:	1b1b      	subs	r3, r3, r4
 8008f5a:	6013      	str	r3, [r2, #0]
 8008f5c:	b00b      	add	sp, #44	@ 0x2c
 8008f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008f62:	18c3      	adds	r3, r0, r3
 8008f64:	9307      	str	r3, [sp, #28]
 8008f66:	2d46      	cmp	r5, #70	@ 0x46
 8008f68:	d1e4      	bne.n	8008f34 <__cvt+0x64>
 8008f6a:	7803      	ldrb	r3, [r0, #0]
 8008f6c:	2b30      	cmp	r3, #48	@ 0x30
 8008f6e:	d10c      	bne.n	8008f8a <__cvt+0xba>
 8008f70:	2200      	movs	r2, #0
 8008f72:	2300      	movs	r3, #0
 8008f74:	0030      	movs	r0, r6
 8008f76:	0039      	movs	r1, r7
 8008f78:	f7f7 fa68 	bl	800044c <__aeabi_dcmpeq>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d104      	bne.n	8008f8a <__cvt+0xba>
 8008f80:	2301      	movs	r3, #1
 8008f82:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008f84:	1a9b      	subs	r3, r3, r2
 8008f86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008f88:	6013      	str	r3, [r2, #0]
 8008f8a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f8c:	9a07      	ldr	r2, [sp, #28]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	18d3      	adds	r3, r2, r3
 8008f92:	e7ce      	b.n	8008f32 <__cvt+0x62>
 8008f94:	1c59      	adds	r1, r3, #1
 8008f96:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f98:	701a      	strb	r2, [r3, #0]
 8008f9a:	e7d6      	b.n	8008f4a <__cvt+0x7a>

08008f9c <__exponent>:
 8008f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f9e:	232b      	movs	r3, #43	@ 0x2b
 8008fa0:	0005      	movs	r5, r0
 8008fa2:	000c      	movs	r4, r1
 8008fa4:	b085      	sub	sp, #20
 8008fa6:	7002      	strb	r2, [r0, #0]
 8008fa8:	2900      	cmp	r1, #0
 8008faa:	da01      	bge.n	8008fb0 <__exponent+0x14>
 8008fac:	424c      	negs	r4, r1
 8008fae:	3302      	adds	r3, #2
 8008fb0:	706b      	strb	r3, [r5, #1]
 8008fb2:	2c09      	cmp	r4, #9
 8008fb4:	dd2c      	ble.n	8009010 <__exponent+0x74>
 8008fb6:	ab02      	add	r3, sp, #8
 8008fb8:	1dde      	adds	r6, r3, #7
 8008fba:	0020      	movs	r0, r4
 8008fbc:	210a      	movs	r1, #10
 8008fbe:	f7f7 fa2f 	bl	8000420 <__aeabi_idivmod>
 8008fc2:	0037      	movs	r7, r6
 8008fc4:	3130      	adds	r1, #48	@ 0x30
 8008fc6:	3e01      	subs	r6, #1
 8008fc8:	0020      	movs	r0, r4
 8008fca:	7031      	strb	r1, [r6, #0]
 8008fcc:	210a      	movs	r1, #10
 8008fce:	9401      	str	r4, [sp, #4]
 8008fd0:	f7f7 f940 	bl	8000254 <__divsi3>
 8008fd4:	9b01      	ldr	r3, [sp, #4]
 8008fd6:	0004      	movs	r4, r0
 8008fd8:	2b63      	cmp	r3, #99	@ 0x63
 8008fda:	dcee      	bgt.n	8008fba <__exponent+0x1e>
 8008fdc:	1eba      	subs	r2, r7, #2
 8008fde:	1ca8      	adds	r0, r5, #2
 8008fe0:	0001      	movs	r1, r0
 8008fe2:	0013      	movs	r3, r2
 8008fe4:	3430      	adds	r4, #48	@ 0x30
 8008fe6:	7014      	strb	r4, [r2, #0]
 8008fe8:	ac02      	add	r4, sp, #8
 8008fea:	3407      	adds	r4, #7
 8008fec:	429c      	cmp	r4, r3
 8008fee:	d80a      	bhi.n	8009006 <__exponent+0x6a>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	42a2      	cmp	r2, r4
 8008ff4:	d803      	bhi.n	8008ffe <__exponent+0x62>
 8008ff6:	3309      	adds	r3, #9
 8008ff8:	aa02      	add	r2, sp, #8
 8008ffa:	189b      	adds	r3, r3, r2
 8008ffc:	1bdb      	subs	r3, r3, r7
 8008ffe:	18c0      	adds	r0, r0, r3
 8009000:	1b40      	subs	r0, r0, r5
 8009002:	b005      	add	sp, #20
 8009004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009006:	781c      	ldrb	r4, [r3, #0]
 8009008:	3301      	adds	r3, #1
 800900a:	700c      	strb	r4, [r1, #0]
 800900c:	3101      	adds	r1, #1
 800900e:	e7eb      	b.n	8008fe8 <__exponent+0x4c>
 8009010:	2330      	movs	r3, #48	@ 0x30
 8009012:	18e4      	adds	r4, r4, r3
 8009014:	70ab      	strb	r3, [r5, #2]
 8009016:	1d28      	adds	r0, r5, #4
 8009018:	70ec      	strb	r4, [r5, #3]
 800901a:	e7f1      	b.n	8009000 <__exponent+0x64>

0800901c <_printf_float>:
 800901c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800901e:	b097      	sub	sp, #92	@ 0x5c
 8009020:	000d      	movs	r5, r1
 8009022:	920a      	str	r2, [sp, #40]	@ 0x28
 8009024:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8009026:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009028:	9009      	str	r0, [sp, #36]	@ 0x24
 800902a:	f000 fd33 	bl	8009a94 <_localeconv_r>
 800902e:	6803      	ldr	r3, [r0, #0]
 8009030:	0018      	movs	r0, r3
 8009032:	930d      	str	r3, [sp, #52]	@ 0x34
 8009034:	f7f7 f868 	bl	8000108 <strlen>
 8009038:	2300      	movs	r3, #0
 800903a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800903c:	9314      	str	r3, [sp, #80]	@ 0x50
 800903e:	7e2b      	ldrb	r3, [r5, #24]
 8009040:	2207      	movs	r2, #7
 8009042:	930c      	str	r3, [sp, #48]	@ 0x30
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	930e      	str	r3, [sp, #56]	@ 0x38
 8009048:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	05c9      	lsls	r1, r1, #23
 800904e:	d545      	bpl.n	80090dc <_printf_float+0xc0>
 8009050:	189b      	adds	r3, r3, r2
 8009052:	4393      	bics	r3, r2
 8009054:	001a      	movs	r2, r3
 8009056:	3208      	adds	r2, #8
 8009058:	6022      	str	r2, [r4, #0]
 800905a:	2201      	movs	r2, #1
 800905c:	681e      	ldr	r6, [r3, #0]
 800905e:	685f      	ldr	r7, [r3, #4]
 8009060:	007b      	lsls	r3, r7, #1
 8009062:	085b      	lsrs	r3, r3, #1
 8009064:	9311      	str	r3, [sp, #68]	@ 0x44
 8009066:	9610      	str	r6, [sp, #64]	@ 0x40
 8009068:	64ae      	str	r6, [r5, #72]	@ 0x48
 800906a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800906c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800906e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009070:	4ba7      	ldr	r3, [pc, #668]	@ (8009310 <_printf_float+0x2f4>)
 8009072:	4252      	negs	r2, r2
 8009074:	f7f9 fdce 	bl	8002c14 <__aeabi_dcmpun>
 8009078:	2800      	cmp	r0, #0
 800907a:	d131      	bne.n	80090e0 <_printf_float+0xc4>
 800907c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800907e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009080:	2201      	movs	r2, #1
 8009082:	4ba3      	ldr	r3, [pc, #652]	@ (8009310 <_printf_float+0x2f4>)
 8009084:	4252      	negs	r2, r2
 8009086:	f7f7 f9f1 	bl	800046c <__aeabi_dcmple>
 800908a:	2800      	cmp	r0, #0
 800908c:	d128      	bne.n	80090e0 <_printf_float+0xc4>
 800908e:	2200      	movs	r2, #0
 8009090:	2300      	movs	r3, #0
 8009092:	0030      	movs	r0, r6
 8009094:	0039      	movs	r1, r7
 8009096:	f7f7 f9df 	bl	8000458 <__aeabi_dcmplt>
 800909a:	2800      	cmp	r0, #0
 800909c:	d003      	beq.n	80090a6 <_printf_float+0x8a>
 800909e:	002b      	movs	r3, r5
 80090a0:	222d      	movs	r2, #45	@ 0x2d
 80090a2:	3343      	adds	r3, #67	@ 0x43
 80090a4:	701a      	strb	r2, [r3, #0]
 80090a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80090a8:	4f9a      	ldr	r7, [pc, #616]	@ (8009314 <_printf_float+0x2f8>)
 80090aa:	2b47      	cmp	r3, #71	@ 0x47
 80090ac:	d900      	bls.n	80090b0 <_printf_float+0x94>
 80090ae:	4f9a      	ldr	r7, [pc, #616]	@ (8009318 <_printf_float+0x2fc>)
 80090b0:	2303      	movs	r3, #3
 80090b2:	2400      	movs	r4, #0
 80090b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090b6:	612b      	str	r3, [r5, #16]
 80090b8:	3301      	adds	r3, #1
 80090ba:	439a      	bics	r2, r3
 80090bc:	602a      	str	r2, [r5, #0]
 80090be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090c0:	0029      	movs	r1, r5
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090c8:	aa15      	add	r2, sp, #84	@ 0x54
 80090ca:	f000 f9e5 	bl	8009498 <_printf_common>
 80090ce:	3001      	adds	r0, #1
 80090d0:	d000      	beq.n	80090d4 <_printf_float+0xb8>
 80090d2:	e09f      	b.n	8009214 <_printf_float+0x1f8>
 80090d4:	2001      	movs	r0, #1
 80090d6:	4240      	negs	r0, r0
 80090d8:	b017      	add	sp, #92	@ 0x5c
 80090da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090dc:	3307      	adds	r3, #7
 80090de:	e7b8      	b.n	8009052 <_printf_float+0x36>
 80090e0:	0032      	movs	r2, r6
 80090e2:	003b      	movs	r3, r7
 80090e4:	0030      	movs	r0, r6
 80090e6:	0039      	movs	r1, r7
 80090e8:	f7f9 fd94 	bl	8002c14 <__aeabi_dcmpun>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	d00b      	beq.n	8009108 <_printf_float+0xec>
 80090f0:	2f00      	cmp	r7, #0
 80090f2:	da03      	bge.n	80090fc <_printf_float+0xe0>
 80090f4:	002b      	movs	r3, r5
 80090f6:	222d      	movs	r2, #45	@ 0x2d
 80090f8:	3343      	adds	r3, #67	@ 0x43
 80090fa:	701a      	strb	r2, [r3, #0]
 80090fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80090fe:	4f87      	ldr	r7, [pc, #540]	@ (800931c <_printf_float+0x300>)
 8009100:	2b47      	cmp	r3, #71	@ 0x47
 8009102:	d9d5      	bls.n	80090b0 <_printf_float+0x94>
 8009104:	4f86      	ldr	r7, [pc, #536]	@ (8009320 <_printf_float+0x304>)
 8009106:	e7d3      	b.n	80090b0 <_printf_float+0x94>
 8009108:	2220      	movs	r2, #32
 800910a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800910c:	686b      	ldr	r3, [r5, #4]
 800910e:	4394      	bics	r4, r2
 8009110:	1c5a      	adds	r2, r3, #1
 8009112:	d146      	bne.n	80091a2 <_printf_float+0x186>
 8009114:	3307      	adds	r3, #7
 8009116:	606b      	str	r3, [r5, #4]
 8009118:	2380      	movs	r3, #128	@ 0x80
 800911a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800911c:	00db      	lsls	r3, r3, #3
 800911e:	4313      	orrs	r3, r2
 8009120:	2200      	movs	r2, #0
 8009122:	602b      	str	r3, [r5, #0]
 8009124:	9206      	str	r2, [sp, #24]
 8009126:	aa14      	add	r2, sp, #80	@ 0x50
 8009128:	9205      	str	r2, [sp, #20]
 800912a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800912c:	a90a      	add	r1, sp, #40	@ 0x28
 800912e:	9204      	str	r2, [sp, #16]
 8009130:	aa13      	add	r2, sp, #76	@ 0x4c
 8009132:	9203      	str	r2, [sp, #12]
 8009134:	2223      	movs	r2, #35	@ 0x23
 8009136:	1852      	adds	r2, r2, r1
 8009138:	9202      	str	r2, [sp, #8]
 800913a:	9301      	str	r3, [sp, #4]
 800913c:	686b      	ldr	r3, [r5, #4]
 800913e:	0032      	movs	r2, r6
 8009140:	9300      	str	r3, [sp, #0]
 8009142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009144:	003b      	movs	r3, r7
 8009146:	f7ff fec3 	bl	8008ed0 <__cvt>
 800914a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800914c:	0007      	movs	r7, r0
 800914e:	2c47      	cmp	r4, #71	@ 0x47
 8009150:	d12d      	bne.n	80091ae <_printf_float+0x192>
 8009152:	1cd3      	adds	r3, r2, #3
 8009154:	db02      	blt.n	800915c <_printf_float+0x140>
 8009156:	686b      	ldr	r3, [r5, #4]
 8009158:	429a      	cmp	r2, r3
 800915a:	dd48      	ble.n	80091ee <_printf_float+0x1d2>
 800915c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800915e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009160:	3b02      	subs	r3, #2
 8009162:	b2db      	uxtb	r3, r3
 8009164:	930c      	str	r3, [sp, #48]	@ 0x30
 8009166:	0028      	movs	r0, r5
 8009168:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800916a:	3901      	subs	r1, #1
 800916c:	3050      	adds	r0, #80	@ 0x50
 800916e:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009170:	f7ff ff14 	bl	8008f9c <__exponent>
 8009174:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009176:	0004      	movs	r4, r0
 8009178:	1813      	adds	r3, r2, r0
 800917a:	612b      	str	r3, [r5, #16]
 800917c:	2a01      	cmp	r2, #1
 800917e:	dc02      	bgt.n	8009186 <_printf_float+0x16a>
 8009180:	682a      	ldr	r2, [r5, #0]
 8009182:	07d2      	lsls	r2, r2, #31
 8009184:	d501      	bpl.n	800918a <_printf_float+0x16e>
 8009186:	3301      	adds	r3, #1
 8009188:	612b      	str	r3, [r5, #16]
 800918a:	2323      	movs	r3, #35	@ 0x23
 800918c:	aa0a      	add	r2, sp, #40	@ 0x28
 800918e:	189b      	adds	r3, r3, r2
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d100      	bne.n	8009198 <_printf_float+0x17c>
 8009196:	e792      	b.n	80090be <_printf_float+0xa2>
 8009198:	002b      	movs	r3, r5
 800919a:	222d      	movs	r2, #45	@ 0x2d
 800919c:	3343      	adds	r3, #67	@ 0x43
 800919e:	701a      	strb	r2, [r3, #0]
 80091a0:	e78d      	b.n	80090be <_printf_float+0xa2>
 80091a2:	2c47      	cmp	r4, #71	@ 0x47
 80091a4:	d1b8      	bne.n	8009118 <_printf_float+0xfc>
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1b6      	bne.n	8009118 <_printf_float+0xfc>
 80091aa:	3301      	adds	r3, #1
 80091ac:	e7b3      	b.n	8009116 <_printf_float+0xfa>
 80091ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091b0:	0011      	movs	r1, r2
 80091b2:	2b65      	cmp	r3, #101	@ 0x65
 80091b4:	d9d7      	bls.n	8009166 <_printf_float+0x14a>
 80091b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091b8:	2b66      	cmp	r3, #102	@ 0x66
 80091ba:	d11a      	bne.n	80091f2 <_printf_float+0x1d6>
 80091bc:	686b      	ldr	r3, [r5, #4]
 80091be:	2a00      	cmp	r2, #0
 80091c0:	dd09      	ble.n	80091d6 <_printf_float+0x1ba>
 80091c2:	612a      	str	r2, [r5, #16]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d102      	bne.n	80091ce <_printf_float+0x1b2>
 80091c8:	6829      	ldr	r1, [r5, #0]
 80091ca:	07c9      	lsls	r1, r1, #31
 80091cc:	d50b      	bpl.n	80091e6 <_printf_float+0x1ca>
 80091ce:	3301      	adds	r3, #1
 80091d0:	189b      	adds	r3, r3, r2
 80091d2:	612b      	str	r3, [r5, #16]
 80091d4:	e007      	b.n	80091e6 <_printf_float+0x1ca>
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d103      	bne.n	80091e2 <_printf_float+0x1c6>
 80091da:	2201      	movs	r2, #1
 80091dc:	6829      	ldr	r1, [r5, #0]
 80091de:	4211      	tst	r1, r2
 80091e0:	d000      	beq.n	80091e4 <_printf_float+0x1c8>
 80091e2:	1c9a      	adds	r2, r3, #2
 80091e4:	612a      	str	r2, [r5, #16]
 80091e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80091e8:	2400      	movs	r4, #0
 80091ea:	65ab      	str	r3, [r5, #88]	@ 0x58
 80091ec:	e7cd      	b.n	800918a <_printf_float+0x16e>
 80091ee:	2367      	movs	r3, #103	@ 0x67
 80091f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80091f2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80091f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80091f6:	4299      	cmp	r1, r3
 80091f8:	db06      	blt.n	8009208 <_printf_float+0x1ec>
 80091fa:	682b      	ldr	r3, [r5, #0]
 80091fc:	6129      	str	r1, [r5, #16]
 80091fe:	07db      	lsls	r3, r3, #31
 8009200:	d5f1      	bpl.n	80091e6 <_printf_float+0x1ca>
 8009202:	3101      	adds	r1, #1
 8009204:	6129      	str	r1, [r5, #16]
 8009206:	e7ee      	b.n	80091e6 <_printf_float+0x1ca>
 8009208:	2201      	movs	r2, #1
 800920a:	2900      	cmp	r1, #0
 800920c:	dce0      	bgt.n	80091d0 <_printf_float+0x1b4>
 800920e:	1892      	adds	r2, r2, r2
 8009210:	1a52      	subs	r2, r2, r1
 8009212:	e7dd      	b.n	80091d0 <_printf_float+0x1b4>
 8009214:	682a      	ldr	r2, [r5, #0]
 8009216:	0553      	lsls	r3, r2, #21
 8009218:	d408      	bmi.n	800922c <_printf_float+0x210>
 800921a:	692b      	ldr	r3, [r5, #16]
 800921c:	003a      	movs	r2, r7
 800921e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009220:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009222:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009224:	47a0      	blx	r4
 8009226:	3001      	adds	r0, #1
 8009228:	d129      	bne.n	800927e <_printf_float+0x262>
 800922a:	e753      	b.n	80090d4 <_printf_float+0xb8>
 800922c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800922e:	2b65      	cmp	r3, #101	@ 0x65
 8009230:	d800      	bhi.n	8009234 <_printf_float+0x218>
 8009232:	e0da      	b.n	80093ea <_printf_float+0x3ce>
 8009234:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8009236:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8009238:	2200      	movs	r2, #0
 800923a:	2300      	movs	r3, #0
 800923c:	f7f7 f906 	bl	800044c <__aeabi_dcmpeq>
 8009240:	2800      	cmp	r0, #0
 8009242:	d033      	beq.n	80092ac <_printf_float+0x290>
 8009244:	2301      	movs	r3, #1
 8009246:	4a37      	ldr	r2, [pc, #220]	@ (8009324 <_printf_float+0x308>)
 8009248:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800924a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800924c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800924e:	47a0      	blx	r4
 8009250:	3001      	adds	r0, #1
 8009252:	d100      	bne.n	8009256 <_printf_float+0x23a>
 8009254:	e73e      	b.n	80090d4 <_printf_float+0xb8>
 8009256:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8009258:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800925a:	42b3      	cmp	r3, r6
 800925c:	db02      	blt.n	8009264 <_printf_float+0x248>
 800925e:	682b      	ldr	r3, [r5, #0]
 8009260:	07db      	lsls	r3, r3, #31
 8009262:	d50c      	bpl.n	800927e <_printf_float+0x262>
 8009264:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009266:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009268:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800926a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800926c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800926e:	47a0      	blx	r4
 8009270:	2400      	movs	r4, #0
 8009272:	3001      	adds	r0, #1
 8009274:	d100      	bne.n	8009278 <_printf_float+0x25c>
 8009276:	e72d      	b.n	80090d4 <_printf_float+0xb8>
 8009278:	1e73      	subs	r3, r6, #1
 800927a:	42a3      	cmp	r3, r4
 800927c:	dc0a      	bgt.n	8009294 <_printf_float+0x278>
 800927e:	682b      	ldr	r3, [r5, #0]
 8009280:	079b      	lsls	r3, r3, #30
 8009282:	d500      	bpl.n	8009286 <_printf_float+0x26a>
 8009284:	e105      	b.n	8009492 <_printf_float+0x476>
 8009286:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009288:	68e8      	ldr	r0, [r5, #12]
 800928a:	4298      	cmp	r0, r3
 800928c:	db00      	blt.n	8009290 <_printf_float+0x274>
 800928e:	e723      	b.n	80090d8 <_printf_float+0xbc>
 8009290:	0018      	movs	r0, r3
 8009292:	e721      	b.n	80090d8 <_printf_float+0xbc>
 8009294:	002a      	movs	r2, r5
 8009296:	2301      	movs	r3, #1
 8009298:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800929a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800929c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800929e:	321a      	adds	r2, #26
 80092a0:	47b8      	blx	r7
 80092a2:	3001      	adds	r0, #1
 80092a4:	d100      	bne.n	80092a8 <_printf_float+0x28c>
 80092a6:	e715      	b.n	80090d4 <_printf_float+0xb8>
 80092a8:	3401      	adds	r4, #1
 80092aa:	e7e5      	b.n	8009278 <_printf_float+0x25c>
 80092ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	dc3a      	bgt.n	8009328 <_printf_float+0x30c>
 80092b2:	2301      	movs	r3, #1
 80092b4:	4a1b      	ldr	r2, [pc, #108]	@ (8009324 <_printf_float+0x308>)
 80092b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092ba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80092bc:	47a0      	blx	r4
 80092be:	3001      	adds	r0, #1
 80092c0:	d100      	bne.n	80092c4 <_printf_float+0x2a8>
 80092c2:	e707      	b.n	80090d4 <_printf_float+0xb8>
 80092c4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80092c6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80092c8:	4333      	orrs	r3, r6
 80092ca:	d102      	bne.n	80092d2 <_printf_float+0x2b6>
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	07db      	lsls	r3, r3, #31
 80092d0:	d5d5      	bpl.n	800927e <_printf_float+0x262>
 80092d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80092d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092da:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80092dc:	47a0      	blx	r4
 80092de:	2300      	movs	r3, #0
 80092e0:	3001      	adds	r0, #1
 80092e2:	d100      	bne.n	80092e6 <_printf_float+0x2ca>
 80092e4:	e6f6      	b.n	80090d4 <_printf_float+0xb8>
 80092e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80092e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80092ea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80092ec:	425b      	negs	r3, r3
 80092ee:	4293      	cmp	r3, r2
 80092f0:	dc01      	bgt.n	80092f6 <_printf_float+0x2da>
 80092f2:	0033      	movs	r3, r6
 80092f4:	e792      	b.n	800921c <_printf_float+0x200>
 80092f6:	002a      	movs	r2, r5
 80092f8:	2301      	movs	r3, #1
 80092fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092fe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009300:	321a      	adds	r2, #26
 8009302:	47a0      	blx	r4
 8009304:	3001      	adds	r0, #1
 8009306:	d100      	bne.n	800930a <_printf_float+0x2ee>
 8009308:	e6e4      	b.n	80090d4 <_printf_float+0xb8>
 800930a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800930c:	3301      	adds	r3, #1
 800930e:	e7ea      	b.n	80092e6 <_printf_float+0x2ca>
 8009310:	7fefffff 	.word	0x7fefffff
 8009314:	0800c1a0 	.word	0x0800c1a0
 8009318:	0800c1a4 	.word	0x0800c1a4
 800931c:	0800c1a8 	.word	0x0800c1a8
 8009320:	0800c1ac 	.word	0x0800c1ac
 8009324:	0800c1b0 	.word	0x0800c1b0
 8009328:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800932a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800932c:	930c      	str	r3, [sp, #48]	@ 0x30
 800932e:	429e      	cmp	r6, r3
 8009330:	dd00      	ble.n	8009334 <_printf_float+0x318>
 8009332:	001e      	movs	r6, r3
 8009334:	2e00      	cmp	r6, #0
 8009336:	dc31      	bgt.n	800939c <_printf_float+0x380>
 8009338:	43f3      	mvns	r3, r6
 800933a:	2400      	movs	r4, #0
 800933c:	17db      	asrs	r3, r3, #31
 800933e:	4033      	ands	r3, r6
 8009340:	930e      	str	r3, [sp, #56]	@ 0x38
 8009342:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8009344:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009346:	1af3      	subs	r3, r6, r3
 8009348:	42a3      	cmp	r3, r4
 800934a:	dc30      	bgt.n	80093ae <_printf_float+0x392>
 800934c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800934e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009350:	429a      	cmp	r2, r3
 8009352:	dc38      	bgt.n	80093c6 <_printf_float+0x3aa>
 8009354:	682b      	ldr	r3, [r5, #0]
 8009356:	07db      	lsls	r3, r3, #31
 8009358:	d435      	bmi.n	80093c6 <_printf_float+0x3aa>
 800935a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800935c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800935e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009360:	1b9b      	subs	r3, r3, r6
 8009362:	1b14      	subs	r4, r2, r4
 8009364:	429c      	cmp	r4, r3
 8009366:	dd00      	ble.n	800936a <_printf_float+0x34e>
 8009368:	001c      	movs	r4, r3
 800936a:	2c00      	cmp	r4, #0
 800936c:	dc34      	bgt.n	80093d8 <_printf_float+0x3bc>
 800936e:	43e3      	mvns	r3, r4
 8009370:	2600      	movs	r6, #0
 8009372:	17db      	asrs	r3, r3, #31
 8009374:	401c      	ands	r4, r3
 8009376:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009378:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800937a:	1ad3      	subs	r3, r2, r3
 800937c:	1b1b      	subs	r3, r3, r4
 800937e:	42b3      	cmp	r3, r6
 8009380:	dc00      	bgt.n	8009384 <_printf_float+0x368>
 8009382:	e77c      	b.n	800927e <_printf_float+0x262>
 8009384:	002a      	movs	r2, r5
 8009386:	2301      	movs	r3, #1
 8009388:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800938a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800938c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800938e:	321a      	adds	r2, #26
 8009390:	47b8      	blx	r7
 8009392:	3001      	adds	r0, #1
 8009394:	d100      	bne.n	8009398 <_printf_float+0x37c>
 8009396:	e69d      	b.n	80090d4 <_printf_float+0xb8>
 8009398:	3601      	adds	r6, #1
 800939a:	e7ec      	b.n	8009376 <_printf_float+0x35a>
 800939c:	0033      	movs	r3, r6
 800939e:	003a      	movs	r2, r7
 80093a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093a4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80093a6:	47a0      	blx	r4
 80093a8:	3001      	adds	r0, #1
 80093aa:	d1c5      	bne.n	8009338 <_printf_float+0x31c>
 80093ac:	e692      	b.n	80090d4 <_printf_float+0xb8>
 80093ae:	002a      	movs	r2, r5
 80093b0:	2301      	movs	r3, #1
 80093b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093b6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80093b8:	321a      	adds	r2, #26
 80093ba:	47b0      	blx	r6
 80093bc:	3001      	adds	r0, #1
 80093be:	d100      	bne.n	80093c2 <_printf_float+0x3a6>
 80093c0:	e688      	b.n	80090d4 <_printf_float+0xb8>
 80093c2:	3401      	adds	r4, #1
 80093c4:	e7bd      	b.n	8009342 <_printf_float+0x326>
 80093c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80093ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093cc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093ce:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80093d0:	47a0      	blx	r4
 80093d2:	3001      	adds	r0, #1
 80093d4:	d1c1      	bne.n	800935a <_printf_float+0x33e>
 80093d6:	e67d      	b.n	80090d4 <_printf_float+0xb8>
 80093d8:	19ba      	adds	r2, r7, r6
 80093da:	0023      	movs	r3, r4
 80093dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093e0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80093e2:	47b0      	blx	r6
 80093e4:	3001      	adds	r0, #1
 80093e6:	d1c2      	bne.n	800936e <_printf_float+0x352>
 80093e8:	e674      	b.n	80090d4 <_printf_float+0xb8>
 80093ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80093ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	dc02      	bgt.n	80093f8 <_printf_float+0x3dc>
 80093f2:	2301      	movs	r3, #1
 80093f4:	421a      	tst	r2, r3
 80093f6:	d039      	beq.n	800946c <_printf_float+0x450>
 80093f8:	2301      	movs	r3, #1
 80093fa:	003a      	movs	r2, r7
 80093fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009400:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009402:	47b0      	blx	r6
 8009404:	3001      	adds	r0, #1
 8009406:	d100      	bne.n	800940a <_printf_float+0x3ee>
 8009408:	e664      	b.n	80090d4 <_printf_float+0xb8>
 800940a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800940c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800940e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009410:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009412:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009414:	47b0      	blx	r6
 8009416:	3001      	adds	r0, #1
 8009418:	d100      	bne.n	800941c <_printf_float+0x400>
 800941a:	e65b      	b.n	80090d4 <_printf_float+0xb8>
 800941c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800941e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8009420:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009422:	2200      	movs	r2, #0
 8009424:	3b01      	subs	r3, #1
 8009426:	930c      	str	r3, [sp, #48]	@ 0x30
 8009428:	2300      	movs	r3, #0
 800942a:	f7f7 f80f 	bl	800044c <__aeabi_dcmpeq>
 800942e:	2800      	cmp	r0, #0
 8009430:	d11a      	bne.n	8009468 <_printf_float+0x44c>
 8009432:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009434:	1c7a      	adds	r2, r7, #1
 8009436:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009438:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800943a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800943c:	47b0      	blx	r6
 800943e:	3001      	adds	r0, #1
 8009440:	d10e      	bne.n	8009460 <_printf_float+0x444>
 8009442:	e647      	b.n	80090d4 <_printf_float+0xb8>
 8009444:	002a      	movs	r2, r5
 8009446:	2301      	movs	r3, #1
 8009448:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800944a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800944c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800944e:	321a      	adds	r2, #26
 8009450:	47b8      	blx	r7
 8009452:	3001      	adds	r0, #1
 8009454:	d100      	bne.n	8009458 <_printf_float+0x43c>
 8009456:	e63d      	b.n	80090d4 <_printf_float+0xb8>
 8009458:	3601      	adds	r6, #1
 800945a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800945c:	429e      	cmp	r6, r3
 800945e:	dbf1      	blt.n	8009444 <_printf_float+0x428>
 8009460:	002a      	movs	r2, r5
 8009462:	0023      	movs	r3, r4
 8009464:	3250      	adds	r2, #80	@ 0x50
 8009466:	e6da      	b.n	800921e <_printf_float+0x202>
 8009468:	2600      	movs	r6, #0
 800946a:	e7f6      	b.n	800945a <_printf_float+0x43e>
 800946c:	003a      	movs	r2, r7
 800946e:	e7e2      	b.n	8009436 <_printf_float+0x41a>
 8009470:	002a      	movs	r2, r5
 8009472:	2301      	movs	r3, #1
 8009474:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009478:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800947a:	3219      	adds	r2, #25
 800947c:	47b0      	blx	r6
 800947e:	3001      	adds	r0, #1
 8009480:	d100      	bne.n	8009484 <_printf_float+0x468>
 8009482:	e627      	b.n	80090d4 <_printf_float+0xb8>
 8009484:	3401      	adds	r4, #1
 8009486:	68eb      	ldr	r3, [r5, #12]
 8009488:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800948a:	1a9b      	subs	r3, r3, r2
 800948c:	42a3      	cmp	r3, r4
 800948e:	dcef      	bgt.n	8009470 <_printf_float+0x454>
 8009490:	e6f9      	b.n	8009286 <_printf_float+0x26a>
 8009492:	2400      	movs	r4, #0
 8009494:	e7f7      	b.n	8009486 <_printf_float+0x46a>
 8009496:	46c0      	nop			@ (mov r8, r8)

08009498 <_printf_common>:
 8009498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800949a:	0016      	movs	r6, r2
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	688a      	ldr	r2, [r1, #8]
 80094a0:	690b      	ldr	r3, [r1, #16]
 80094a2:	000c      	movs	r4, r1
 80094a4:	9000      	str	r0, [sp, #0]
 80094a6:	4293      	cmp	r3, r2
 80094a8:	da00      	bge.n	80094ac <_printf_common+0x14>
 80094aa:	0013      	movs	r3, r2
 80094ac:	0022      	movs	r2, r4
 80094ae:	6033      	str	r3, [r6, #0]
 80094b0:	3243      	adds	r2, #67	@ 0x43
 80094b2:	7812      	ldrb	r2, [r2, #0]
 80094b4:	2a00      	cmp	r2, #0
 80094b6:	d001      	beq.n	80094bc <_printf_common+0x24>
 80094b8:	3301      	adds	r3, #1
 80094ba:	6033      	str	r3, [r6, #0]
 80094bc:	6823      	ldr	r3, [r4, #0]
 80094be:	069b      	lsls	r3, r3, #26
 80094c0:	d502      	bpl.n	80094c8 <_printf_common+0x30>
 80094c2:	6833      	ldr	r3, [r6, #0]
 80094c4:	3302      	adds	r3, #2
 80094c6:	6033      	str	r3, [r6, #0]
 80094c8:	6822      	ldr	r2, [r4, #0]
 80094ca:	2306      	movs	r3, #6
 80094cc:	0015      	movs	r5, r2
 80094ce:	401d      	ands	r5, r3
 80094d0:	421a      	tst	r2, r3
 80094d2:	d027      	beq.n	8009524 <_printf_common+0x8c>
 80094d4:	0023      	movs	r3, r4
 80094d6:	3343      	adds	r3, #67	@ 0x43
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	1e5a      	subs	r2, r3, #1
 80094dc:	4193      	sbcs	r3, r2
 80094de:	6822      	ldr	r2, [r4, #0]
 80094e0:	0692      	lsls	r2, r2, #26
 80094e2:	d430      	bmi.n	8009546 <_printf_common+0xae>
 80094e4:	0022      	movs	r2, r4
 80094e6:	9901      	ldr	r1, [sp, #4]
 80094e8:	9800      	ldr	r0, [sp, #0]
 80094ea:	9d08      	ldr	r5, [sp, #32]
 80094ec:	3243      	adds	r2, #67	@ 0x43
 80094ee:	47a8      	blx	r5
 80094f0:	3001      	adds	r0, #1
 80094f2:	d025      	beq.n	8009540 <_printf_common+0xa8>
 80094f4:	2206      	movs	r2, #6
 80094f6:	6823      	ldr	r3, [r4, #0]
 80094f8:	2500      	movs	r5, #0
 80094fa:	4013      	ands	r3, r2
 80094fc:	2b04      	cmp	r3, #4
 80094fe:	d105      	bne.n	800950c <_printf_common+0x74>
 8009500:	6833      	ldr	r3, [r6, #0]
 8009502:	68e5      	ldr	r5, [r4, #12]
 8009504:	1aed      	subs	r5, r5, r3
 8009506:	43eb      	mvns	r3, r5
 8009508:	17db      	asrs	r3, r3, #31
 800950a:	401d      	ands	r5, r3
 800950c:	68a3      	ldr	r3, [r4, #8]
 800950e:	6922      	ldr	r2, [r4, #16]
 8009510:	4293      	cmp	r3, r2
 8009512:	dd01      	ble.n	8009518 <_printf_common+0x80>
 8009514:	1a9b      	subs	r3, r3, r2
 8009516:	18ed      	adds	r5, r5, r3
 8009518:	2600      	movs	r6, #0
 800951a:	42b5      	cmp	r5, r6
 800951c:	d120      	bne.n	8009560 <_printf_common+0xc8>
 800951e:	2000      	movs	r0, #0
 8009520:	e010      	b.n	8009544 <_printf_common+0xac>
 8009522:	3501      	adds	r5, #1
 8009524:	68e3      	ldr	r3, [r4, #12]
 8009526:	6832      	ldr	r2, [r6, #0]
 8009528:	1a9b      	subs	r3, r3, r2
 800952a:	42ab      	cmp	r3, r5
 800952c:	ddd2      	ble.n	80094d4 <_printf_common+0x3c>
 800952e:	0022      	movs	r2, r4
 8009530:	2301      	movs	r3, #1
 8009532:	9901      	ldr	r1, [sp, #4]
 8009534:	9800      	ldr	r0, [sp, #0]
 8009536:	9f08      	ldr	r7, [sp, #32]
 8009538:	3219      	adds	r2, #25
 800953a:	47b8      	blx	r7
 800953c:	3001      	adds	r0, #1
 800953e:	d1f0      	bne.n	8009522 <_printf_common+0x8a>
 8009540:	2001      	movs	r0, #1
 8009542:	4240      	negs	r0, r0
 8009544:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009546:	2030      	movs	r0, #48	@ 0x30
 8009548:	18e1      	adds	r1, r4, r3
 800954a:	3143      	adds	r1, #67	@ 0x43
 800954c:	7008      	strb	r0, [r1, #0]
 800954e:	0021      	movs	r1, r4
 8009550:	1c5a      	adds	r2, r3, #1
 8009552:	3145      	adds	r1, #69	@ 0x45
 8009554:	7809      	ldrb	r1, [r1, #0]
 8009556:	18a2      	adds	r2, r4, r2
 8009558:	3243      	adds	r2, #67	@ 0x43
 800955a:	3302      	adds	r3, #2
 800955c:	7011      	strb	r1, [r2, #0]
 800955e:	e7c1      	b.n	80094e4 <_printf_common+0x4c>
 8009560:	0022      	movs	r2, r4
 8009562:	2301      	movs	r3, #1
 8009564:	9901      	ldr	r1, [sp, #4]
 8009566:	9800      	ldr	r0, [sp, #0]
 8009568:	9f08      	ldr	r7, [sp, #32]
 800956a:	321a      	adds	r2, #26
 800956c:	47b8      	blx	r7
 800956e:	3001      	adds	r0, #1
 8009570:	d0e6      	beq.n	8009540 <_printf_common+0xa8>
 8009572:	3601      	adds	r6, #1
 8009574:	e7d1      	b.n	800951a <_printf_common+0x82>
	...

08009578 <_printf_i>:
 8009578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800957a:	b08b      	sub	sp, #44	@ 0x2c
 800957c:	9206      	str	r2, [sp, #24]
 800957e:	000a      	movs	r2, r1
 8009580:	3243      	adds	r2, #67	@ 0x43
 8009582:	9307      	str	r3, [sp, #28]
 8009584:	9005      	str	r0, [sp, #20]
 8009586:	9203      	str	r2, [sp, #12]
 8009588:	7e0a      	ldrb	r2, [r1, #24]
 800958a:	000c      	movs	r4, r1
 800958c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800958e:	2a78      	cmp	r2, #120	@ 0x78
 8009590:	d809      	bhi.n	80095a6 <_printf_i+0x2e>
 8009592:	2a62      	cmp	r2, #98	@ 0x62
 8009594:	d80b      	bhi.n	80095ae <_printf_i+0x36>
 8009596:	2a00      	cmp	r2, #0
 8009598:	d100      	bne.n	800959c <_printf_i+0x24>
 800959a:	e0bc      	b.n	8009716 <_printf_i+0x19e>
 800959c:	497b      	ldr	r1, [pc, #492]	@ (800978c <_printf_i+0x214>)
 800959e:	9104      	str	r1, [sp, #16]
 80095a0:	2a58      	cmp	r2, #88	@ 0x58
 80095a2:	d100      	bne.n	80095a6 <_printf_i+0x2e>
 80095a4:	e090      	b.n	80096c8 <_printf_i+0x150>
 80095a6:	0025      	movs	r5, r4
 80095a8:	3542      	adds	r5, #66	@ 0x42
 80095aa:	702a      	strb	r2, [r5, #0]
 80095ac:	e022      	b.n	80095f4 <_printf_i+0x7c>
 80095ae:	0010      	movs	r0, r2
 80095b0:	3863      	subs	r0, #99	@ 0x63
 80095b2:	2815      	cmp	r0, #21
 80095b4:	d8f7      	bhi.n	80095a6 <_printf_i+0x2e>
 80095b6:	f7f6 fdb9 	bl	800012c <__gnu_thumb1_case_shi>
 80095ba:	0016      	.short	0x0016
 80095bc:	fff6001f 	.word	0xfff6001f
 80095c0:	fff6fff6 	.word	0xfff6fff6
 80095c4:	001ffff6 	.word	0x001ffff6
 80095c8:	fff6fff6 	.word	0xfff6fff6
 80095cc:	fff6fff6 	.word	0xfff6fff6
 80095d0:	003600a1 	.word	0x003600a1
 80095d4:	fff60080 	.word	0xfff60080
 80095d8:	00b2fff6 	.word	0x00b2fff6
 80095dc:	0036fff6 	.word	0x0036fff6
 80095e0:	fff6fff6 	.word	0xfff6fff6
 80095e4:	0084      	.short	0x0084
 80095e6:	0025      	movs	r5, r4
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	3542      	adds	r5, #66	@ 0x42
 80095ec:	1d11      	adds	r1, r2, #4
 80095ee:	6019      	str	r1, [r3, #0]
 80095f0:	6813      	ldr	r3, [r2, #0]
 80095f2:	702b      	strb	r3, [r5, #0]
 80095f4:	2301      	movs	r3, #1
 80095f6:	e0a0      	b.n	800973a <_printf_i+0x1c2>
 80095f8:	6818      	ldr	r0, [r3, #0]
 80095fa:	6809      	ldr	r1, [r1, #0]
 80095fc:	1d02      	adds	r2, r0, #4
 80095fe:	060d      	lsls	r5, r1, #24
 8009600:	d50b      	bpl.n	800961a <_printf_i+0xa2>
 8009602:	6806      	ldr	r6, [r0, #0]
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	2e00      	cmp	r6, #0
 8009608:	da03      	bge.n	8009612 <_printf_i+0x9a>
 800960a:	232d      	movs	r3, #45	@ 0x2d
 800960c:	9a03      	ldr	r2, [sp, #12]
 800960e:	4276      	negs	r6, r6
 8009610:	7013      	strb	r3, [r2, #0]
 8009612:	4b5e      	ldr	r3, [pc, #376]	@ (800978c <_printf_i+0x214>)
 8009614:	270a      	movs	r7, #10
 8009616:	9304      	str	r3, [sp, #16]
 8009618:	e018      	b.n	800964c <_printf_i+0xd4>
 800961a:	6806      	ldr	r6, [r0, #0]
 800961c:	601a      	str	r2, [r3, #0]
 800961e:	0649      	lsls	r1, r1, #25
 8009620:	d5f1      	bpl.n	8009606 <_printf_i+0x8e>
 8009622:	b236      	sxth	r6, r6
 8009624:	e7ef      	b.n	8009606 <_printf_i+0x8e>
 8009626:	6808      	ldr	r0, [r1, #0]
 8009628:	6819      	ldr	r1, [r3, #0]
 800962a:	c940      	ldmia	r1!, {r6}
 800962c:	0605      	lsls	r5, r0, #24
 800962e:	d402      	bmi.n	8009636 <_printf_i+0xbe>
 8009630:	0640      	lsls	r0, r0, #25
 8009632:	d500      	bpl.n	8009636 <_printf_i+0xbe>
 8009634:	b2b6      	uxth	r6, r6
 8009636:	6019      	str	r1, [r3, #0]
 8009638:	4b54      	ldr	r3, [pc, #336]	@ (800978c <_printf_i+0x214>)
 800963a:	270a      	movs	r7, #10
 800963c:	9304      	str	r3, [sp, #16]
 800963e:	2a6f      	cmp	r2, #111	@ 0x6f
 8009640:	d100      	bne.n	8009644 <_printf_i+0xcc>
 8009642:	3f02      	subs	r7, #2
 8009644:	0023      	movs	r3, r4
 8009646:	2200      	movs	r2, #0
 8009648:	3343      	adds	r3, #67	@ 0x43
 800964a:	701a      	strb	r2, [r3, #0]
 800964c:	6863      	ldr	r3, [r4, #4]
 800964e:	60a3      	str	r3, [r4, #8]
 8009650:	2b00      	cmp	r3, #0
 8009652:	db03      	blt.n	800965c <_printf_i+0xe4>
 8009654:	2104      	movs	r1, #4
 8009656:	6822      	ldr	r2, [r4, #0]
 8009658:	438a      	bics	r2, r1
 800965a:	6022      	str	r2, [r4, #0]
 800965c:	2e00      	cmp	r6, #0
 800965e:	d102      	bne.n	8009666 <_printf_i+0xee>
 8009660:	9d03      	ldr	r5, [sp, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00c      	beq.n	8009680 <_printf_i+0x108>
 8009666:	9d03      	ldr	r5, [sp, #12]
 8009668:	0030      	movs	r0, r6
 800966a:	0039      	movs	r1, r7
 800966c:	f7f6 fdee 	bl	800024c <__aeabi_uidivmod>
 8009670:	9b04      	ldr	r3, [sp, #16]
 8009672:	3d01      	subs	r5, #1
 8009674:	5c5b      	ldrb	r3, [r3, r1]
 8009676:	702b      	strb	r3, [r5, #0]
 8009678:	0033      	movs	r3, r6
 800967a:	0006      	movs	r6, r0
 800967c:	429f      	cmp	r7, r3
 800967e:	d9f3      	bls.n	8009668 <_printf_i+0xf0>
 8009680:	2f08      	cmp	r7, #8
 8009682:	d109      	bne.n	8009698 <_printf_i+0x120>
 8009684:	6823      	ldr	r3, [r4, #0]
 8009686:	07db      	lsls	r3, r3, #31
 8009688:	d506      	bpl.n	8009698 <_printf_i+0x120>
 800968a:	6862      	ldr	r2, [r4, #4]
 800968c:	6923      	ldr	r3, [r4, #16]
 800968e:	429a      	cmp	r2, r3
 8009690:	dc02      	bgt.n	8009698 <_printf_i+0x120>
 8009692:	2330      	movs	r3, #48	@ 0x30
 8009694:	3d01      	subs	r5, #1
 8009696:	702b      	strb	r3, [r5, #0]
 8009698:	9b03      	ldr	r3, [sp, #12]
 800969a:	1b5b      	subs	r3, r3, r5
 800969c:	6123      	str	r3, [r4, #16]
 800969e:	9b07      	ldr	r3, [sp, #28]
 80096a0:	0021      	movs	r1, r4
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	9805      	ldr	r0, [sp, #20]
 80096a6:	9b06      	ldr	r3, [sp, #24]
 80096a8:	aa09      	add	r2, sp, #36	@ 0x24
 80096aa:	f7ff fef5 	bl	8009498 <_printf_common>
 80096ae:	3001      	adds	r0, #1
 80096b0:	d148      	bne.n	8009744 <_printf_i+0x1cc>
 80096b2:	2001      	movs	r0, #1
 80096b4:	4240      	negs	r0, r0
 80096b6:	b00b      	add	sp, #44	@ 0x2c
 80096b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096ba:	2220      	movs	r2, #32
 80096bc:	6809      	ldr	r1, [r1, #0]
 80096be:	430a      	orrs	r2, r1
 80096c0:	6022      	str	r2, [r4, #0]
 80096c2:	2278      	movs	r2, #120	@ 0x78
 80096c4:	4932      	ldr	r1, [pc, #200]	@ (8009790 <_printf_i+0x218>)
 80096c6:	9104      	str	r1, [sp, #16]
 80096c8:	0021      	movs	r1, r4
 80096ca:	3145      	adds	r1, #69	@ 0x45
 80096cc:	700a      	strb	r2, [r1, #0]
 80096ce:	6819      	ldr	r1, [r3, #0]
 80096d0:	6822      	ldr	r2, [r4, #0]
 80096d2:	c940      	ldmia	r1!, {r6}
 80096d4:	0610      	lsls	r0, r2, #24
 80096d6:	d402      	bmi.n	80096de <_printf_i+0x166>
 80096d8:	0650      	lsls	r0, r2, #25
 80096da:	d500      	bpl.n	80096de <_printf_i+0x166>
 80096dc:	b2b6      	uxth	r6, r6
 80096de:	6019      	str	r1, [r3, #0]
 80096e0:	07d3      	lsls	r3, r2, #31
 80096e2:	d502      	bpl.n	80096ea <_printf_i+0x172>
 80096e4:	2320      	movs	r3, #32
 80096e6:	4313      	orrs	r3, r2
 80096e8:	6023      	str	r3, [r4, #0]
 80096ea:	2e00      	cmp	r6, #0
 80096ec:	d001      	beq.n	80096f2 <_printf_i+0x17a>
 80096ee:	2710      	movs	r7, #16
 80096f0:	e7a8      	b.n	8009644 <_printf_i+0xcc>
 80096f2:	2220      	movs	r2, #32
 80096f4:	6823      	ldr	r3, [r4, #0]
 80096f6:	4393      	bics	r3, r2
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	e7f8      	b.n	80096ee <_printf_i+0x176>
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	680d      	ldr	r5, [r1, #0]
 8009700:	1d10      	adds	r0, r2, #4
 8009702:	6949      	ldr	r1, [r1, #20]
 8009704:	6018      	str	r0, [r3, #0]
 8009706:	6813      	ldr	r3, [r2, #0]
 8009708:	062e      	lsls	r6, r5, #24
 800970a:	d501      	bpl.n	8009710 <_printf_i+0x198>
 800970c:	6019      	str	r1, [r3, #0]
 800970e:	e002      	b.n	8009716 <_printf_i+0x19e>
 8009710:	066d      	lsls	r5, r5, #25
 8009712:	d5fb      	bpl.n	800970c <_printf_i+0x194>
 8009714:	8019      	strh	r1, [r3, #0]
 8009716:	2300      	movs	r3, #0
 8009718:	9d03      	ldr	r5, [sp, #12]
 800971a:	6123      	str	r3, [r4, #16]
 800971c:	e7bf      	b.n	800969e <_printf_i+0x126>
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	1d11      	adds	r1, r2, #4
 8009722:	6019      	str	r1, [r3, #0]
 8009724:	6815      	ldr	r5, [r2, #0]
 8009726:	2100      	movs	r1, #0
 8009728:	0028      	movs	r0, r5
 800972a:	6862      	ldr	r2, [r4, #4]
 800972c:	f000 fa31 	bl	8009b92 <memchr>
 8009730:	2800      	cmp	r0, #0
 8009732:	d001      	beq.n	8009738 <_printf_i+0x1c0>
 8009734:	1b40      	subs	r0, r0, r5
 8009736:	6060      	str	r0, [r4, #4]
 8009738:	6863      	ldr	r3, [r4, #4]
 800973a:	6123      	str	r3, [r4, #16]
 800973c:	2300      	movs	r3, #0
 800973e:	9a03      	ldr	r2, [sp, #12]
 8009740:	7013      	strb	r3, [r2, #0]
 8009742:	e7ac      	b.n	800969e <_printf_i+0x126>
 8009744:	002a      	movs	r2, r5
 8009746:	6923      	ldr	r3, [r4, #16]
 8009748:	9906      	ldr	r1, [sp, #24]
 800974a:	9805      	ldr	r0, [sp, #20]
 800974c:	9d07      	ldr	r5, [sp, #28]
 800974e:	47a8      	blx	r5
 8009750:	3001      	adds	r0, #1
 8009752:	d0ae      	beq.n	80096b2 <_printf_i+0x13a>
 8009754:	6823      	ldr	r3, [r4, #0]
 8009756:	079b      	lsls	r3, r3, #30
 8009758:	d415      	bmi.n	8009786 <_printf_i+0x20e>
 800975a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800975c:	68e0      	ldr	r0, [r4, #12]
 800975e:	4298      	cmp	r0, r3
 8009760:	daa9      	bge.n	80096b6 <_printf_i+0x13e>
 8009762:	0018      	movs	r0, r3
 8009764:	e7a7      	b.n	80096b6 <_printf_i+0x13e>
 8009766:	0022      	movs	r2, r4
 8009768:	2301      	movs	r3, #1
 800976a:	9906      	ldr	r1, [sp, #24]
 800976c:	9805      	ldr	r0, [sp, #20]
 800976e:	9e07      	ldr	r6, [sp, #28]
 8009770:	3219      	adds	r2, #25
 8009772:	47b0      	blx	r6
 8009774:	3001      	adds	r0, #1
 8009776:	d09c      	beq.n	80096b2 <_printf_i+0x13a>
 8009778:	3501      	adds	r5, #1
 800977a:	68e3      	ldr	r3, [r4, #12]
 800977c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800977e:	1a9b      	subs	r3, r3, r2
 8009780:	42ab      	cmp	r3, r5
 8009782:	dcf0      	bgt.n	8009766 <_printf_i+0x1ee>
 8009784:	e7e9      	b.n	800975a <_printf_i+0x1e2>
 8009786:	2500      	movs	r5, #0
 8009788:	e7f7      	b.n	800977a <_printf_i+0x202>
 800978a:	46c0      	nop			@ (mov r8, r8)
 800978c:	0800c1b2 	.word	0x0800c1b2
 8009790:	0800c1c3 	.word	0x0800c1c3

08009794 <std>:
 8009794:	2300      	movs	r3, #0
 8009796:	b510      	push	{r4, lr}
 8009798:	0004      	movs	r4, r0
 800979a:	6003      	str	r3, [r0, #0]
 800979c:	6043      	str	r3, [r0, #4]
 800979e:	6083      	str	r3, [r0, #8]
 80097a0:	8181      	strh	r1, [r0, #12]
 80097a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80097a4:	81c2      	strh	r2, [r0, #14]
 80097a6:	6103      	str	r3, [r0, #16]
 80097a8:	6143      	str	r3, [r0, #20]
 80097aa:	6183      	str	r3, [r0, #24]
 80097ac:	0019      	movs	r1, r3
 80097ae:	2208      	movs	r2, #8
 80097b0:	305c      	adds	r0, #92	@ 0x5c
 80097b2:	f000 f967 	bl	8009a84 <memset>
 80097b6:	4b0b      	ldr	r3, [pc, #44]	@ (80097e4 <std+0x50>)
 80097b8:	6224      	str	r4, [r4, #32]
 80097ba:	6263      	str	r3, [r4, #36]	@ 0x24
 80097bc:	4b0a      	ldr	r3, [pc, #40]	@ (80097e8 <std+0x54>)
 80097be:	62a3      	str	r3, [r4, #40]	@ 0x28
 80097c0:	4b0a      	ldr	r3, [pc, #40]	@ (80097ec <std+0x58>)
 80097c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80097c4:	4b0a      	ldr	r3, [pc, #40]	@ (80097f0 <std+0x5c>)
 80097c6:	6323      	str	r3, [r4, #48]	@ 0x30
 80097c8:	4b0a      	ldr	r3, [pc, #40]	@ (80097f4 <std+0x60>)
 80097ca:	429c      	cmp	r4, r3
 80097cc:	d005      	beq.n	80097da <std+0x46>
 80097ce:	4b0a      	ldr	r3, [pc, #40]	@ (80097f8 <std+0x64>)
 80097d0:	429c      	cmp	r4, r3
 80097d2:	d002      	beq.n	80097da <std+0x46>
 80097d4:	4b09      	ldr	r3, [pc, #36]	@ (80097fc <std+0x68>)
 80097d6:	429c      	cmp	r4, r3
 80097d8:	d103      	bne.n	80097e2 <std+0x4e>
 80097da:	0020      	movs	r0, r4
 80097dc:	3058      	adds	r0, #88	@ 0x58
 80097de:	f000 f9d5 	bl	8009b8c <__retarget_lock_init_recursive>
 80097e2:	bd10      	pop	{r4, pc}
 80097e4:	0800997d 	.word	0x0800997d
 80097e8:	080099a5 	.word	0x080099a5
 80097ec:	080099dd 	.word	0x080099dd
 80097f0:	08009a09 	.word	0x08009a09
 80097f4:	20000d10 	.word	0x20000d10
 80097f8:	20000d78 	.word	0x20000d78
 80097fc:	20000de0 	.word	0x20000de0

08009800 <stdio_exit_handler>:
 8009800:	b510      	push	{r4, lr}
 8009802:	4a03      	ldr	r2, [pc, #12]	@ (8009810 <stdio_exit_handler+0x10>)
 8009804:	4903      	ldr	r1, [pc, #12]	@ (8009814 <stdio_exit_handler+0x14>)
 8009806:	4804      	ldr	r0, [pc, #16]	@ (8009818 <stdio_exit_handler+0x18>)
 8009808:	f000 f86c 	bl	80098e4 <_fwalk_sglue>
 800980c:	bd10      	pop	{r4, pc}
 800980e:	46c0      	nop			@ (mov r8, r8)
 8009810:	20000024 	.word	0x20000024
 8009814:	0800b851 	.word	0x0800b851
 8009818:	20000034 	.word	0x20000034

0800981c <cleanup_stdio>:
 800981c:	6841      	ldr	r1, [r0, #4]
 800981e:	4b0b      	ldr	r3, [pc, #44]	@ (800984c <cleanup_stdio+0x30>)
 8009820:	b510      	push	{r4, lr}
 8009822:	0004      	movs	r4, r0
 8009824:	4299      	cmp	r1, r3
 8009826:	d001      	beq.n	800982c <cleanup_stdio+0x10>
 8009828:	f002 f812 	bl	800b850 <_fflush_r>
 800982c:	68a1      	ldr	r1, [r4, #8]
 800982e:	4b08      	ldr	r3, [pc, #32]	@ (8009850 <cleanup_stdio+0x34>)
 8009830:	4299      	cmp	r1, r3
 8009832:	d002      	beq.n	800983a <cleanup_stdio+0x1e>
 8009834:	0020      	movs	r0, r4
 8009836:	f002 f80b 	bl	800b850 <_fflush_r>
 800983a:	68e1      	ldr	r1, [r4, #12]
 800983c:	4b05      	ldr	r3, [pc, #20]	@ (8009854 <cleanup_stdio+0x38>)
 800983e:	4299      	cmp	r1, r3
 8009840:	d002      	beq.n	8009848 <cleanup_stdio+0x2c>
 8009842:	0020      	movs	r0, r4
 8009844:	f002 f804 	bl	800b850 <_fflush_r>
 8009848:	bd10      	pop	{r4, pc}
 800984a:	46c0      	nop			@ (mov r8, r8)
 800984c:	20000d10 	.word	0x20000d10
 8009850:	20000d78 	.word	0x20000d78
 8009854:	20000de0 	.word	0x20000de0

08009858 <global_stdio_init.part.0>:
 8009858:	b510      	push	{r4, lr}
 800985a:	4b09      	ldr	r3, [pc, #36]	@ (8009880 <global_stdio_init.part.0+0x28>)
 800985c:	4a09      	ldr	r2, [pc, #36]	@ (8009884 <global_stdio_init.part.0+0x2c>)
 800985e:	2104      	movs	r1, #4
 8009860:	601a      	str	r2, [r3, #0]
 8009862:	4809      	ldr	r0, [pc, #36]	@ (8009888 <global_stdio_init.part.0+0x30>)
 8009864:	2200      	movs	r2, #0
 8009866:	f7ff ff95 	bl	8009794 <std>
 800986a:	2201      	movs	r2, #1
 800986c:	2109      	movs	r1, #9
 800986e:	4807      	ldr	r0, [pc, #28]	@ (800988c <global_stdio_init.part.0+0x34>)
 8009870:	f7ff ff90 	bl	8009794 <std>
 8009874:	2202      	movs	r2, #2
 8009876:	2112      	movs	r1, #18
 8009878:	4805      	ldr	r0, [pc, #20]	@ (8009890 <global_stdio_init.part.0+0x38>)
 800987a:	f7ff ff8b 	bl	8009794 <std>
 800987e:	bd10      	pop	{r4, pc}
 8009880:	20000e48 	.word	0x20000e48
 8009884:	08009801 	.word	0x08009801
 8009888:	20000d10 	.word	0x20000d10
 800988c:	20000d78 	.word	0x20000d78
 8009890:	20000de0 	.word	0x20000de0

08009894 <__sfp_lock_acquire>:
 8009894:	b510      	push	{r4, lr}
 8009896:	4802      	ldr	r0, [pc, #8]	@ (80098a0 <__sfp_lock_acquire+0xc>)
 8009898:	f000 f979 	bl	8009b8e <__retarget_lock_acquire_recursive>
 800989c:	bd10      	pop	{r4, pc}
 800989e:	46c0      	nop			@ (mov r8, r8)
 80098a0:	20000e51 	.word	0x20000e51

080098a4 <__sfp_lock_release>:
 80098a4:	b510      	push	{r4, lr}
 80098a6:	4802      	ldr	r0, [pc, #8]	@ (80098b0 <__sfp_lock_release+0xc>)
 80098a8:	f000 f972 	bl	8009b90 <__retarget_lock_release_recursive>
 80098ac:	bd10      	pop	{r4, pc}
 80098ae:	46c0      	nop			@ (mov r8, r8)
 80098b0:	20000e51 	.word	0x20000e51

080098b4 <__sinit>:
 80098b4:	b510      	push	{r4, lr}
 80098b6:	0004      	movs	r4, r0
 80098b8:	f7ff ffec 	bl	8009894 <__sfp_lock_acquire>
 80098bc:	6a23      	ldr	r3, [r4, #32]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d002      	beq.n	80098c8 <__sinit+0x14>
 80098c2:	f7ff ffef 	bl	80098a4 <__sfp_lock_release>
 80098c6:	bd10      	pop	{r4, pc}
 80098c8:	4b04      	ldr	r3, [pc, #16]	@ (80098dc <__sinit+0x28>)
 80098ca:	6223      	str	r3, [r4, #32]
 80098cc:	4b04      	ldr	r3, [pc, #16]	@ (80098e0 <__sinit+0x2c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d1f6      	bne.n	80098c2 <__sinit+0xe>
 80098d4:	f7ff ffc0 	bl	8009858 <global_stdio_init.part.0>
 80098d8:	e7f3      	b.n	80098c2 <__sinit+0xe>
 80098da:	46c0      	nop			@ (mov r8, r8)
 80098dc:	0800981d 	.word	0x0800981d
 80098e0:	20000e48 	.word	0x20000e48

080098e4 <_fwalk_sglue>:
 80098e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098e6:	0014      	movs	r4, r2
 80098e8:	2600      	movs	r6, #0
 80098ea:	9000      	str	r0, [sp, #0]
 80098ec:	9101      	str	r1, [sp, #4]
 80098ee:	68a5      	ldr	r5, [r4, #8]
 80098f0:	6867      	ldr	r7, [r4, #4]
 80098f2:	3f01      	subs	r7, #1
 80098f4:	d504      	bpl.n	8009900 <_fwalk_sglue+0x1c>
 80098f6:	6824      	ldr	r4, [r4, #0]
 80098f8:	2c00      	cmp	r4, #0
 80098fa:	d1f8      	bne.n	80098ee <_fwalk_sglue+0xa>
 80098fc:	0030      	movs	r0, r6
 80098fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009900:	89ab      	ldrh	r3, [r5, #12]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d908      	bls.n	8009918 <_fwalk_sglue+0x34>
 8009906:	220e      	movs	r2, #14
 8009908:	5eab      	ldrsh	r3, [r5, r2]
 800990a:	3301      	adds	r3, #1
 800990c:	d004      	beq.n	8009918 <_fwalk_sglue+0x34>
 800990e:	0029      	movs	r1, r5
 8009910:	9800      	ldr	r0, [sp, #0]
 8009912:	9b01      	ldr	r3, [sp, #4]
 8009914:	4798      	blx	r3
 8009916:	4306      	orrs	r6, r0
 8009918:	3568      	adds	r5, #104	@ 0x68
 800991a:	e7ea      	b.n	80098f2 <_fwalk_sglue+0xe>

0800991c <iprintf>:
 800991c:	b40f      	push	{r0, r1, r2, r3}
 800991e:	b507      	push	{r0, r1, r2, lr}
 8009920:	4905      	ldr	r1, [pc, #20]	@ (8009938 <iprintf+0x1c>)
 8009922:	ab04      	add	r3, sp, #16
 8009924:	6808      	ldr	r0, [r1, #0]
 8009926:	cb04      	ldmia	r3!, {r2}
 8009928:	6881      	ldr	r1, [r0, #8]
 800992a:	9301      	str	r3, [sp, #4]
 800992c:	f001 fdee 	bl	800b50c <_vfiprintf_r>
 8009930:	b003      	add	sp, #12
 8009932:	bc08      	pop	{r3}
 8009934:	b004      	add	sp, #16
 8009936:	4718      	bx	r3
 8009938:	20000030 	.word	0x20000030

0800993c <siprintf>:
 800993c:	b40e      	push	{r1, r2, r3}
 800993e:	b500      	push	{lr}
 8009940:	490b      	ldr	r1, [pc, #44]	@ (8009970 <siprintf+0x34>)
 8009942:	b09c      	sub	sp, #112	@ 0x70
 8009944:	ab1d      	add	r3, sp, #116	@ 0x74
 8009946:	9002      	str	r0, [sp, #8]
 8009948:	9006      	str	r0, [sp, #24]
 800994a:	9107      	str	r1, [sp, #28]
 800994c:	9104      	str	r1, [sp, #16]
 800994e:	4809      	ldr	r0, [pc, #36]	@ (8009974 <siprintf+0x38>)
 8009950:	4909      	ldr	r1, [pc, #36]	@ (8009978 <siprintf+0x3c>)
 8009952:	cb04      	ldmia	r3!, {r2}
 8009954:	9105      	str	r1, [sp, #20]
 8009956:	6800      	ldr	r0, [r0, #0]
 8009958:	a902      	add	r1, sp, #8
 800995a:	9301      	str	r3, [sp, #4]
 800995c:	f001 fcb0 	bl	800b2c0 <_svfiprintf_r>
 8009960:	2200      	movs	r2, #0
 8009962:	9b02      	ldr	r3, [sp, #8]
 8009964:	701a      	strb	r2, [r3, #0]
 8009966:	b01c      	add	sp, #112	@ 0x70
 8009968:	bc08      	pop	{r3}
 800996a:	b003      	add	sp, #12
 800996c:	4718      	bx	r3
 800996e:	46c0      	nop			@ (mov r8, r8)
 8009970:	7fffffff 	.word	0x7fffffff
 8009974:	20000030 	.word	0x20000030
 8009978:	ffff0208 	.word	0xffff0208

0800997c <__sread>:
 800997c:	b570      	push	{r4, r5, r6, lr}
 800997e:	000c      	movs	r4, r1
 8009980:	250e      	movs	r5, #14
 8009982:	5f49      	ldrsh	r1, [r1, r5]
 8009984:	f000 f8b0 	bl	8009ae8 <_read_r>
 8009988:	2800      	cmp	r0, #0
 800998a:	db03      	blt.n	8009994 <__sread+0x18>
 800998c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800998e:	181b      	adds	r3, r3, r0
 8009990:	6563      	str	r3, [r4, #84]	@ 0x54
 8009992:	bd70      	pop	{r4, r5, r6, pc}
 8009994:	89a3      	ldrh	r3, [r4, #12]
 8009996:	4a02      	ldr	r2, [pc, #8]	@ (80099a0 <__sread+0x24>)
 8009998:	4013      	ands	r3, r2
 800999a:	81a3      	strh	r3, [r4, #12]
 800999c:	e7f9      	b.n	8009992 <__sread+0x16>
 800999e:	46c0      	nop			@ (mov r8, r8)
 80099a0:	ffffefff 	.word	0xffffefff

080099a4 <__swrite>:
 80099a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a6:	001f      	movs	r7, r3
 80099a8:	898b      	ldrh	r3, [r1, #12]
 80099aa:	0005      	movs	r5, r0
 80099ac:	000c      	movs	r4, r1
 80099ae:	0016      	movs	r6, r2
 80099b0:	05db      	lsls	r3, r3, #23
 80099b2:	d505      	bpl.n	80099c0 <__swrite+0x1c>
 80099b4:	230e      	movs	r3, #14
 80099b6:	5ec9      	ldrsh	r1, [r1, r3]
 80099b8:	2200      	movs	r2, #0
 80099ba:	2302      	movs	r3, #2
 80099bc:	f000 f880 	bl	8009ac0 <_lseek_r>
 80099c0:	89a3      	ldrh	r3, [r4, #12]
 80099c2:	4a05      	ldr	r2, [pc, #20]	@ (80099d8 <__swrite+0x34>)
 80099c4:	0028      	movs	r0, r5
 80099c6:	4013      	ands	r3, r2
 80099c8:	81a3      	strh	r3, [r4, #12]
 80099ca:	0032      	movs	r2, r6
 80099cc:	230e      	movs	r3, #14
 80099ce:	5ee1      	ldrsh	r1, [r4, r3]
 80099d0:	003b      	movs	r3, r7
 80099d2:	f000 f89d 	bl	8009b10 <_write_r>
 80099d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099d8:	ffffefff 	.word	0xffffefff

080099dc <__sseek>:
 80099dc:	b570      	push	{r4, r5, r6, lr}
 80099de:	000c      	movs	r4, r1
 80099e0:	250e      	movs	r5, #14
 80099e2:	5f49      	ldrsh	r1, [r1, r5]
 80099e4:	f000 f86c 	bl	8009ac0 <_lseek_r>
 80099e8:	89a3      	ldrh	r3, [r4, #12]
 80099ea:	1c42      	adds	r2, r0, #1
 80099ec:	d103      	bne.n	80099f6 <__sseek+0x1a>
 80099ee:	4a05      	ldr	r2, [pc, #20]	@ (8009a04 <__sseek+0x28>)
 80099f0:	4013      	ands	r3, r2
 80099f2:	81a3      	strh	r3, [r4, #12]
 80099f4:	bd70      	pop	{r4, r5, r6, pc}
 80099f6:	2280      	movs	r2, #128	@ 0x80
 80099f8:	0152      	lsls	r2, r2, #5
 80099fa:	4313      	orrs	r3, r2
 80099fc:	81a3      	strh	r3, [r4, #12]
 80099fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a00:	e7f8      	b.n	80099f4 <__sseek+0x18>
 8009a02:	46c0      	nop			@ (mov r8, r8)
 8009a04:	ffffefff 	.word	0xffffefff

08009a08 <__sclose>:
 8009a08:	b510      	push	{r4, lr}
 8009a0a:	230e      	movs	r3, #14
 8009a0c:	5ec9      	ldrsh	r1, [r1, r3]
 8009a0e:	f000 f845 	bl	8009a9c <_close_r>
 8009a12:	bd10      	pop	{r4, pc}

08009a14 <_vsniprintf_r>:
 8009a14:	b530      	push	{r4, r5, lr}
 8009a16:	0014      	movs	r4, r2
 8009a18:	0005      	movs	r5, r0
 8009a1a:	001a      	movs	r2, r3
 8009a1c:	b09b      	sub	sp, #108	@ 0x6c
 8009a1e:	2c00      	cmp	r4, #0
 8009a20:	da05      	bge.n	8009a2e <_vsniprintf_r+0x1a>
 8009a22:	238b      	movs	r3, #139	@ 0x8b
 8009a24:	6003      	str	r3, [r0, #0]
 8009a26:	2001      	movs	r0, #1
 8009a28:	4240      	negs	r0, r0
 8009a2a:	b01b      	add	sp, #108	@ 0x6c
 8009a2c:	bd30      	pop	{r4, r5, pc}
 8009a2e:	2382      	movs	r3, #130	@ 0x82
 8009a30:	4668      	mov	r0, sp
 8009a32:	009b      	lsls	r3, r3, #2
 8009a34:	8183      	strh	r3, [r0, #12]
 8009a36:	2300      	movs	r3, #0
 8009a38:	9100      	str	r1, [sp, #0]
 8009a3a:	9104      	str	r1, [sp, #16]
 8009a3c:	429c      	cmp	r4, r3
 8009a3e:	d000      	beq.n	8009a42 <_vsniprintf_r+0x2e>
 8009a40:	1e63      	subs	r3, r4, #1
 8009a42:	9302      	str	r3, [sp, #8]
 8009a44:	9305      	str	r3, [sp, #20]
 8009a46:	2301      	movs	r3, #1
 8009a48:	4669      	mov	r1, sp
 8009a4a:	425b      	negs	r3, r3
 8009a4c:	81cb      	strh	r3, [r1, #14]
 8009a4e:	0028      	movs	r0, r5
 8009a50:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009a52:	f001 fc35 	bl	800b2c0 <_svfiprintf_r>
 8009a56:	1c43      	adds	r3, r0, #1
 8009a58:	da01      	bge.n	8009a5e <_vsniprintf_r+0x4a>
 8009a5a:	238b      	movs	r3, #139	@ 0x8b
 8009a5c:	602b      	str	r3, [r5, #0]
 8009a5e:	2c00      	cmp	r4, #0
 8009a60:	d0e3      	beq.n	8009a2a <_vsniprintf_r+0x16>
 8009a62:	2200      	movs	r2, #0
 8009a64:	9b00      	ldr	r3, [sp, #0]
 8009a66:	701a      	strb	r2, [r3, #0]
 8009a68:	e7df      	b.n	8009a2a <_vsniprintf_r+0x16>
	...

08009a6c <vsniprintf>:
 8009a6c:	b513      	push	{r0, r1, r4, lr}
 8009a6e:	4c04      	ldr	r4, [pc, #16]	@ (8009a80 <vsniprintf+0x14>)
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	0013      	movs	r3, r2
 8009a74:	000a      	movs	r2, r1
 8009a76:	0001      	movs	r1, r0
 8009a78:	6820      	ldr	r0, [r4, #0]
 8009a7a:	f7ff ffcb 	bl	8009a14 <_vsniprintf_r>
 8009a7e:	bd16      	pop	{r1, r2, r4, pc}
 8009a80:	20000030 	.word	0x20000030

08009a84 <memset>:
 8009a84:	0003      	movs	r3, r0
 8009a86:	1882      	adds	r2, r0, r2
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d100      	bne.n	8009a8e <memset+0xa>
 8009a8c:	4770      	bx	lr
 8009a8e:	7019      	strb	r1, [r3, #0]
 8009a90:	3301      	adds	r3, #1
 8009a92:	e7f9      	b.n	8009a88 <memset+0x4>

08009a94 <_localeconv_r>:
 8009a94:	4800      	ldr	r0, [pc, #0]	@ (8009a98 <_localeconv_r+0x4>)
 8009a96:	4770      	bx	lr
 8009a98:	20000170 	.word	0x20000170

08009a9c <_close_r>:
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	b570      	push	{r4, r5, r6, lr}
 8009aa0:	4d06      	ldr	r5, [pc, #24]	@ (8009abc <_close_r+0x20>)
 8009aa2:	0004      	movs	r4, r0
 8009aa4:	0008      	movs	r0, r1
 8009aa6:	602b      	str	r3, [r5, #0]
 8009aa8:	f7fa f962 	bl	8003d70 <_close>
 8009aac:	1c43      	adds	r3, r0, #1
 8009aae:	d103      	bne.n	8009ab8 <_close_r+0x1c>
 8009ab0:	682b      	ldr	r3, [r5, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d000      	beq.n	8009ab8 <_close_r+0x1c>
 8009ab6:	6023      	str	r3, [r4, #0]
 8009ab8:	bd70      	pop	{r4, r5, r6, pc}
 8009aba:	46c0      	nop			@ (mov r8, r8)
 8009abc:	20000e4c 	.word	0x20000e4c

08009ac0 <_lseek_r>:
 8009ac0:	b570      	push	{r4, r5, r6, lr}
 8009ac2:	0004      	movs	r4, r0
 8009ac4:	0008      	movs	r0, r1
 8009ac6:	0011      	movs	r1, r2
 8009ac8:	001a      	movs	r2, r3
 8009aca:	2300      	movs	r3, #0
 8009acc:	4d05      	ldr	r5, [pc, #20]	@ (8009ae4 <_lseek_r+0x24>)
 8009ace:	602b      	str	r3, [r5, #0]
 8009ad0:	f7fa f96f 	bl	8003db2 <_lseek>
 8009ad4:	1c43      	adds	r3, r0, #1
 8009ad6:	d103      	bne.n	8009ae0 <_lseek_r+0x20>
 8009ad8:	682b      	ldr	r3, [r5, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d000      	beq.n	8009ae0 <_lseek_r+0x20>
 8009ade:	6023      	str	r3, [r4, #0]
 8009ae0:	bd70      	pop	{r4, r5, r6, pc}
 8009ae2:	46c0      	nop			@ (mov r8, r8)
 8009ae4:	20000e4c 	.word	0x20000e4c

08009ae8 <_read_r>:
 8009ae8:	b570      	push	{r4, r5, r6, lr}
 8009aea:	0004      	movs	r4, r0
 8009aec:	0008      	movs	r0, r1
 8009aee:	0011      	movs	r1, r2
 8009af0:	001a      	movs	r2, r3
 8009af2:	2300      	movs	r3, #0
 8009af4:	4d05      	ldr	r5, [pc, #20]	@ (8009b0c <_read_r+0x24>)
 8009af6:	602b      	str	r3, [r5, #0]
 8009af8:	f7fa f91d 	bl	8003d36 <_read>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	d103      	bne.n	8009b08 <_read_r+0x20>
 8009b00:	682b      	ldr	r3, [r5, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d000      	beq.n	8009b08 <_read_r+0x20>
 8009b06:	6023      	str	r3, [r4, #0]
 8009b08:	bd70      	pop	{r4, r5, r6, pc}
 8009b0a:	46c0      	nop			@ (mov r8, r8)
 8009b0c:	20000e4c 	.word	0x20000e4c

08009b10 <_write_r>:
 8009b10:	b570      	push	{r4, r5, r6, lr}
 8009b12:	0004      	movs	r4, r0
 8009b14:	0008      	movs	r0, r1
 8009b16:	0011      	movs	r1, r2
 8009b18:	001a      	movs	r2, r3
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	4d05      	ldr	r5, [pc, #20]	@ (8009b34 <_write_r+0x24>)
 8009b1e:	602b      	str	r3, [r5, #0]
 8009b20:	f7fa fb48 	bl	80041b4 <_write>
 8009b24:	1c43      	adds	r3, r0, #1
 8009b26:	d103      	bne.n	8009b30 <_write_r+0x20>
 8009b28:	682b      	ldr	r3, [r5, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d000      	beq.n	8009b30 <_write_r+0x20>
 8009b2e:	6023      	str	r3, [r4, #0]
 8009b30:	bd70      	pop	{r4, r5, r6, pc}
 8009b32:	46c0      	nop			@ (mov r8, r8)
 8009b34:	20000e4c 	.word	0x20000e4c

08009b38 <__errno>:
 8009b38:	4b01      	ldr	r3, [pc, #4]	@ (8009b40 <__errno+0x8>)
 8009b3a:	6818      	ldr	r0, [r3, #0]
 8009b3c:	4770      	bx	lr
 8009b3e:	46c0      	nop			@ (mov r8, r8)
 8009b40:	20000030 	.word	0x20000030

08009b44 <__libc_init_array>:
 8009b44:	b570      	push	{r4, r5, r6, lr}
 8009b46:	2600      	movs	r6, #0
 8009b48:	4c0c      	ldr	r4, [pc, #48]	@ (8009b7c <__libc_init_array+0x38>)
 8009b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8009b80 <__libc_init_array+0x3c>)
 8009b4c:	1b64      	subs	r4, r4, r5
 8009b4e:	10a4      	asrs	r4, r4, #2
 8009b50:	42a6      	cmp	r6, r4
 8009b52:	d109      	bne.n	8009b68 <__libc_init_array+0x24>
 8009b54:	2600      	movs	r6, #0
 8009b56:	f002 f909 	bl	800bd6c <_init>
 8009b5a:	4c0a      	ldr	r4, [pc, #40]	@ (8009b84 <__libc_init_array+0x40>)
 8009b5c:	4d0a      	ldr	r5, [pc, #40]	@ (8009b88 <__libc_init_array+0x44>)
 8009b5e:	1b64      	subs	r4, r4, r5
 8009b60:	10a4      	asrs	r4, r4, #2
 8009b62:	42a6      	cmp	r6, r4
 8009b64:	d105      	bne.n	8009b72 <__libc_init_array+0x2e>
 8009b66:	bd70      	pop	{r4, r5, r6, pc}
 8009b68:	00b3      	lsls	r3, r6, #2
 8009b6a:	58eb      	ldr	r3, [r5, r3]
 8009b6c:	4798      	blx	r3
 8009b6e:	3601      	adds	r6, #1
 8009b70:	e7ee      	b.n	8009b50 <__libc_init_array+0xc>
 8009b72:	00b3      	lsls	r3, r6, #2
 8009b74:	58eb      	ldr	r3, [r5, r3]
 8009b76:	4798      	blx	r3
 8009b78:	3601      	adds	r6, #1
 8009b7a:	e7f2      	b.n	8009b62 <__libc_init_array+0x1e>
 8009b7c:	0800c518 	.word	0x0800c518
 8009b80:	0800c518 	.word	0x0800c518
 8009b84:	0800c51c 	.word	0x0800c51c
 8009b88:	0800c518 	.word	0x0800c518

08009b8c <__retarget_lock_init_recursive>:
 8009b8c:	4770      	bx	lr

08009b8e <__retarget_lock_acquire_recursive>:
 8009b8e:	4770      	bx	lr

08009b90 <__retarget_lock_release_recursive>:
 8009b90:	4770      	bx	lr

08009b92 <memchr>:
 8009b92:	b2c9      	uxtb	r1, r1
 8009b94:	1882      	adds	r2, r0, r2
 8009b96:	4290      	cmp	r0, r2
 8009b98:	d101      	bne.n	8009b9e <memchr+0xc>
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	4770      	bx	lr
 8009b9e:	7803      	ldrb	r3, [r0, #0]
 8009ba0:	428b      	cmp	r3, r1
 8009ba2:	d0fb      	beq.n	8009b9c <memchr+0xa>
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	e7f6      	b.n	8009b96 <memchr+0x4>

08009ba8 <quorem>:
 8009ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009baa:	6902      	ldr	r2, [r0, #16]
 8009bac:	690f      	ldr	r7, [r1, #16]
 8009bae:	b087      	sub	sp, #28
 8009bb0:	0006      	movs	r6, r0
 8009bb2:	000b      	movs	r3, r1
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	9102      	str	r1, [sp, #8]
 8009bb8:	42ba      	cmp	r2, r7
 8009bba:	db6d      	blt.n	8009c98 <quorem+0xf0>
 8009bbc:	3f01      	subs	r7, #1
 8009bbe:	00bc      	lsls	r4, r7, #2
 8009bc0:	3314      	adds	r3, #20
 8009bc2:	9305      	str	r3, [sp, #20]
 8009bc4:	191b      	adds	r3, r3, r4
 8009bc6:	9303      	str	r3, [sp, #12]
 8009bc8:	0033      	movs	r3, r6
 8009bca:	3314      	adds	r3, #20
 8009bcc:	191c      	adds	r4, r3, r4
 8009bce:	9301      	str	r3, [sp, #4]
 8009bd0:	6823      	ldr	r3, [r4, #0]
 8009bd2:	9304      	str	r3, [sp, #16]
 8009bd4:	9b03      	ldr	r3, [sp, #12]
 8009bd6:	9804      	ldr	r0, [sp, #16]
 8009bd8:	681d      	ldr	r5, [r3, #0]
 8009bda:	3501      	adds	r5, #1
 8009bdc:	0029      	movs	r1, r5
 8009bde:	f7f6 faaf 	bl	8000140 <__udivsi3>
 8009be2:	9b04      	ldr	r3, [sp, #16]
 8009be4:	9000      	str	r0, [sp, #0]
 8009be6:	42ab      	cmp	r3, r5
 8009be8:	d32b      	bcc.n	8009c42 <quorem+0x9a>
 8009bea:	9b05      	ldr	r3, [sp, #20]
 8009bec:	9d01      	ldr	r5, [sp, #4]
 8009bee:	469c      	mov	ip, r3
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	9305      	str	r3, [sp, #20]
 8009bf4:	9304      	str	r3, [sp, #16]
 8009bf6:	4662      	mov	r2, ip
 8009bf8:	ca08      	ldmia	r2!, {r3}
 8009bfa:	6828      	ldr	r0, [r5, #0]
 8009bfc:	4694      	mov	ip, r2
 8009bfe:	9a00      	ldr	r2, [sp, #0]
 8009c00:	b299      	uxth	r1, r3
 8009c02:	4351      	muls	r1, r2
 8009c04:	9a05      	ldr	r2, [sp, #20]
 8009c06:	0c1b      	lsrs	r3, r3, #16
 8009c08:	1889      	adds	r1, r1, r2
 8009c0a:	9a00      	ldr	r2, [sp, #0]
 8009c0c:	4353      	muls	r3, r2
 8009c0e:	0c0a      	lsrs	r2, r1, #16
 8009c10:	189b      	adds	r3, r3, r2
 8009c12:	0c1a      	lsrs	r2, r3, #16
 8009c14:	b289      	uxth	r1, r1
 8009c16:	9205      	str	r2, [sp, #20]
 8009c18:	b282      	uxth	r2, r0
 8009c1a:	1a52      	subs	r2, r2, r1
 8009c1c:	9904      	ldr	r1, [sp, #16]
 8009c1e:	0c00      	lsrs	r0, r0, #16
 8009c20:	1852      	adds	r2, r2, r1
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	1411      	asrs	r1, r2, #16
 8009c26:	1ac3      	subs	r3, r0, r3
 8009c28:	185b      	adds	r3, r3, r1
 8009c2a:	1419      	asrs	r1, r3, #16
 8009c2c:	b292      	uxth	r2, r2
 8009c2e:	041b      	lsls	r3, r3, #16
 8009c30:	431a      	orrs	r2, r3
 8009c32:	9b03      	ldr	r3, [sp, #12]
 8009c34:	9104      	str	r1, [sp, #16]
 8009c36:	c504      	stmia	r5!, {r2}
 8009c38:	4563      	cmp	r3, ip
 8009c3a:	d2dc      	bcs.n	8009bf6 <quorem+0x4e>
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d030      	beq.n	8009ca4 <quorem+0xfc>
 8009c42:	0030      	movs	r0, r6
 8009c44:	9902      	ldr	r1, [sp, #8]
 8009c46:	f001 f9c5 	bl	800afd4 <__mcmp>
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	db23      	blt.n	8009c96 <quorem+0xee>
 8009c4e:	0034      	movs	r4, r6
 8009c50:	2500      	movs	r5, #0
 8009c52:	9902      	ldr	r1, [sp, #8]
 8009c54:	3414      	adds	r4, #20
 8009c56:	3114      	adds	r1, #20
 8009c58:	6823      	ldr	r3, [r4, #0]
 8009c5a:	c901      	ldmia	r1!, {r0}
 8009c5c:	9302      	str	r3, [sp, #8]
 8009c5e:	466b      	mov	r3, sp
 8009c60:	891b      	ldrh	r3, [r3, #8]
 8009c62:	b282      	uxth	r2, r0
 8009c64:	1a9a      	subs	r2, r3, r2
 8009c66:	9b02      	ldr	r3, [sp, #8]
 8009c68:	1952      	adds	r2, r2, r5
 8009c6a:	0c00      	lsrs	r0, r0, #16
 8009c6c:	0c1b      	lsrs	r3, r3, #16
 8009c6e:	1a1b      	subs	r3, r3, r0
 8009c70:	1410      	asrs	r0, r2, #16
 8009c72:	181b      	adds	r3, r3, r0
 8009c74:	141d      	asrs	r5, r3, #16
 8009c76:	b292      	uxth	r2, r2
 8009c78:	041b      	lsls	r3, r3, #16
 8009c7a:	431a      	orrs	r2, r3
 8009c7c:	9b03      	ldr	r3, [sp, #12]
 8009c7e:	c404      	stmia	r4!, {r2}
 8009c80:	428b      	cmp	r3, r1
 8009c82:	d2e9      	bcs.n	8009c58 <quorem+0xb0>
 8009c84:	9a01      	ldr	r2, [sp, #4]
 8009c86:	00bb      	lsls	r3, r7, #2
 8009c88:	18d3      	adds	r3, r2, r3
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	2a00      	cmp	r2, #0
 8009c8e:	d013      	beq.n	8009cb8 <quorem+0x110>
 8009c90:	9b00      	ldr	r3, [sp, #0]
 8009c92:	3301      	adds	r3, #1
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	9800      	ldr	r0, [sp, #0]
 8009c98:	b007      	add	sp, #28
 8009c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d104      	bne.n	8009cac <quorem+0x104>
 8009ca2:	3f01      	subs	r7, #1
 8009ca4:	9b01      	ldr	r3, [sp, #4]
 8009ca6:	3c04      	subs	r4, #4
 8009ca8:	42a3      	cmp	r3, r4
 8009caa:	d3f7      	bcc.n	8009c9c <quorem+0xf4>
 8009cac:	6137      	str	r7, [r6, #16]
 8009cae:	e7c8      	b.n	8009c42 <quorem+0x9a>
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	2a00      	cmp	r2, #0
 8009cb4:	d104      	bne.n	8009cc0 <quorem+0x118>
 8009cb6:	3f01      	subs	r7, #1
 8009cb8:	9a01      	ldr	r2, [sp, #4]
 8009cba:	3b04      	subs	r3, #4
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d3f7      	bcc.n	8009cb0 <quorem+0x108>
 8009cc0:	6137      	str	r7, [r6, #16]
 8009cc2:	e7e5      	b.n	8009c90 <quorem+0xe8>

08009cc4 <_dtoa_r>:
 8009cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cc6:	0014      	movs	r4, r2
 8009cc8:	001d      	movs	r5, r3
 8009cca:	69c6      	ldr	r6, [r0, #28]
 8009ccc:	b09d      	sub	sp, #116	@ 0x74
 8009cce:	940a      	str	r4, [sp, #40]	@ 0x28
 8009cd0:	950b      	str	r5, [sp, #44]	@ 0x2c
 8009cd2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8009cd4:	9003      	str	r0, [sp, #12]
 8009cd6:	2e00      	cmp	r6, #0
 8009cd8:	d10f      	bne.n	8009cfa <_dtoa_r+0x36>
 8009cda:	2010      	movs	r0, #16
 8009cdc:	f000 fe30 	bl	800a940 <malloc>
 8009ce0:	9b03      	ldr	r3, [sp, #12]
 8009ce2:	1e02      	subs	r2, r0, #0
 8009ce4:	61d8      	str	r0, [r3, #28]
 8009ce6:	d104      	bne.n	8009cf2 <_dtoa_r+0x2e>
 8009ce8:	21ef      	movs	r1, #239	@ 0xef
 8009cea:	4bc7      	ldr	r3, [pc, #796]	@ (800a008 <_dtoa_r+0x344>)
 8009cec:	48c7      	ldr	r0, [pc, #796]	@ (800a00c <_dtoa_r+0x348>)
 8009cee:	f001 feab 	bl	800ba48 <__assert_func>
 8009cf2:	6046      	str	r6, [r0, #4]
 8009cf4:	6086      	str	r6, [r0, #8]
 8009cf6:	6006      	str	r6, [r0, #0]
 8009cf8:	60c6      	str	r6, [r0, #12]
 8009cfa:	9b03      	ldr	r3, [sp, #12]
 8009cfc:	69db      	ldr	r3, [r3, #28]
 8009cfe:	6819      	ldr	r1, [r3, #0]
 8009d00:	2900      	cmp	r1, #0
 8009d02:	d00b      	beq.n	8009d1c <_dtoa_r+0x58>
 8009d04:	685a      	ldr	r2, [r3, #4]
 8009d06:	2301      	movs	r3, #1
 8009d08:	4093      	lsls	r3, r2
 8009d0a:	604a      	str	r2, [r1, #4]
 8009d0c:	608b      	str	r3, [r1, #8]
 8009d0e:	9803      	ldr	r0, [sp, #12]
 8009d10:	f000 ff16 	bl	800ab40 <_Bfree>
 8009d14:	2200      	movs	r2, #0
 8009d16:	9b03      	ldr	r3, [sp, #12]
 8009d18:	69db      	ldr	r3, [r3, #28]
 8009d1a:	601a      	str	r2, [r3, #0]
 8009d1c:	2d00      	cmp	r5, #0
 8009d1e:	da1e      	bge.n	8009d5e <_dtoa_r+0x9a>
 8009d20:	2301      	movs	r3, #1
 8009d22:	603b      	str	r3, [r7, #0]
 8009d24:	006b      	lsls	r3, r5, #1
 8009d26:	085b      	lsrs	r3, r3, #1
 8009d28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d2a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009d2c:	4bb8      	ldr	r3, [pc, #736]	@ (800a010 <_dtoa_r+0x34c>)
 8009d2e:	4ab8      	ldr	r2, [pc, #736]	@ (800a010 <_dtoa_r+0x34c>)
 8009d30:	403b      	ands	r3, r7
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d116      	bne.n	8009d64 <_dtoa_r+0xa0>
 8009d36:	4bb7      	ldr	r3, [pc, #732]	@ (800a014 <_dtoa_r+0x350>)
 8009d38:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009d3a:	6013      	str	r3, [r2, #0]
 8009d3c:	033b      	lsls	r3, r7, #12
 8009d3e:	0b1b      	lsrs	r3, r3, #12
 8009d40:	4323      	orrs	r3, r4
 8009d42:	d101      	bne.n	8009d48 <_dtoa_r+0x84>
 8009d44:	f000 fd83 	bl	800a84e <_dtoa_r+0xb8a>
 8009d48:	4bb3      	ldr	r3, [pc, #716]	@ (800a018 <_dtoa_r+0x354>)
 8009d4a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009d4c:	9308      	str	r3, [sp, #32]
 8009d4e:	2a00      	cmp	r2, #0
 8009d50:	d002      	beq.n	8009d58 <_dtoa_r+0x94>
 8009d52:	4bb2      	ldr	r3, [pc, #712]	@ (800a01c <_dtoa_r+0x358>)
 8009d54:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009d56:	6013      	str	r3, [r2, #0]
 8009d58:	9808      	ldr	r0, [sp, #32]
 8009d5a:	b01d      	add	sp, #116	@ 0x74
 8009d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d5e:	2300      	movs	r3, #0
 8009d60:	603b      	str	r3, [r7, #0]
 8009d62:	e7e2      	b.n	8009d2a <_dtoa_r+0x66>
 8009d64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d68:	9212      	str	r2, [sp, #72]	@ 0x48
 8009d6a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d6c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009d6e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009d70:	2200      	movs	r2, #0
 8009d72:	2300      	movs	r3, #0
 8009d74:	f7f6 fb6a 	bl	800044c <__aeabi_dcmpeq>
 8009d78:	1e06      	subs	r6, r0, #0
 8009d7a:	d00b      	beq.n	8009d94 <_dtoa_r+0xd0>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009d80:	6013      	str	r3, [r2, #0]
 8009d82:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <_dtoa_r+0xca>
 8009d88:	4ba5      	ldr	r3, [pc, #660]	@ (800a020 <_dtoa_r+0x35c>)
 8009d8a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009d8c:	6013      	str	r3, [r2, #0]
 8009d8e:	4ba5      	ldr	r3, [pc, #660]	@ (800a024 <_dtoa_r+0x360>)
 8009d90:	9308      	str	r3, [sp, #32]
 8009d92:	e7e1      	b.n	8009d58 <_dtoa_r+0x94>
 8009d94:	ab1a      	add	r3, sp, #104	@ 0x68
 8009d96:	9301      	str	r3, [sp, #4]
 8009d98:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	9803      	ldr	r0, [sp, #12]
 8009d9e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009da0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009da2:	f001 f9cd 	bl	800b140 <__d2b>
 8009da6:	007a      	lsls	r2, r7, #1
 8009da8:	9005      	str	r0, [sp, #20]
 8009daa:	0d52      	lsrs	r2, r2, #21
 8009dac:	d100      	bne.n	8009db0 <_dtoa_r+0xec>
 8009dae:	e07b      	b.n	8009ea8 <_dtoa_r+0x1e4>
 8009db0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009db2:	9618      	str	r6, [sp, #96]	@ 0x60
 8009db4:	0319      	lsls	r1, r3, #12
 8009db6:	4b9c      	ldr	r3, [pc, #624]	@ (800a028 <_dtoa_r+0x364>)
 8009db8:	0b09      	lsrs	r1, r1, #12
 8009dba:	430b      	orrs	r3, r1
 8009dbc:	499b      	ldr	r1, [pc, #620]	@ (800a02c <_dtoa_r+0x368>)
 8009dbe:	1857      	adds	r7, r2, r1
 8009dc0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009dc2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009dc4:	0019      	movs	r1, r3
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	4b99      	ldr	r3, [pc, #612]	@ (800a030 <_dtoa_r+0x36c>)
 8009dca:	f7f8 fb87 	bl	80024dc <__aeabi_dsub>
 8009dce:	4a99      	ldr	r2, [pc, #612]	@ (800a034 <_dtoa_r+0x370>)
 8009dd0:	4b99      	ldr	r3, [pc, #612]	@ (800a038 <_dtoa_r+0x374>)
 8009dd2:	f7f8 f8bb 	bl	8001f4c <__aeabi_dmul>
 8009dd6:	4a99      	ldr	r2, [pc, #612]	@ (800a03c <_dtoa_r+0x378>)
 8009dd8:	4b99      	ldr	r3, [pc, #612]	@ (800a040 <_dtoa_r+0x37c>)
 8009dda:	f7f7 f90f 	bl	8000ffc <__aeabi_dadd>
 8009dde:	0004      	movs	r4, r0
 8009de0:	0038      	movs	r0, r7
 8009de2:	000d      	movs	r5, r1
 8009de4:	f7f8 ff74 	bl	8002cd0 <__aeabi_i2d>
 8009de8:	4a96      	ldr	r2, [pc, #600]	@ (800a044 <_dtoa_r+0x380>)
 8009dea:	4b97      	ldr	r3, [pc, #604]	@ (800a048 <_dtoa_r+0x384>)
 8009dec:	f7f8 f8ae 	bl	8001f4c <__aeabi_dmul>
 8009df0:	0002      	movs	r2, r0
 8009df2:	000b      	movs	r3, r1
 8009df4:	0020      	movs	r0, r4
 8009df6:	0029      	movs	r1, r5
 8009df8:	f7f7 f900 	bl	8000ffc <__aeabi_dadd>
 8009dfc:	0004      	movs	r4, r0
 8009dfe:	000d      	movs	r5, r1
 8009e00:	f7f8 ff2a 	bl	8002c58 <__aeabi_d2iz>
 8009e04:	2200      	movs	r2, #0
 8009e06:	9004      	str	r0, [sp, #16]
 8009e08:	2300      	movs	r3, #0
 8009e0a:	0020      	movs	r0, r4
 8009e0c:	0029      	movs	r1, r5
 8009e0e:	f7f6 fb23 	bl	8000458 <__aeabi_dcmplt>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	d00b      	beq.n	8009e2e <_dtoa_r+0x16a>
 8009e16:	9804      	ldr	r0, [sp, #16]
 8009e18:	f7f8 ff5a 	bl	8002cd0 <__aeabi_i2d>
 8009e1c:	002b      	movs	r3, r5
 8009e1e:	0022      	movs	r2, r4
 8009e20:	f7f6 fb14 	bl	800044c <__aeabi_dcmpeq>
 8009e24:	4243      	negs	r3, r0
 8009e26:	4158      	adcs	r0, r3
 8009e28:	9b04      	ldr	r3, [sp, #16]
 8009e2a:	1a1b      	subs	r3, r3, r0
 8009e2c:	9304      	str	r3, [sp, #16]
 8009e2e:	2301      	movs	r3, #1
 8009e30:	9315      	str	r3, [sp, #84]	@ 0x54
 8009e32:	9b04      	ldr	r3, [sp, #16]
 8009e34:	2b16      	cmp	r3, #22
 8009e36:	d810      	bhi.n	8009e5a <_dtoa_r+0x196>
 8009e38:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009e3a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009e3c:	9a04      	ldr	r2, [sp, #16]
 8009e3e:	4b83      	ldr	r3, [pc, #524]	@ (800a04c <_dtoa_r+0x388>)
 8009e40:	00d2      	lsls	r2, r2, #3
 8009e42:	189b      	adds	r3, r3, r2
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	f7f6 fb06 	bl	8000458 <__aeabi_dcmplt>
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	d047      	beq.n	8009ee0 <_dtoa_r+0x21c>
 8009e50:	9b04      	ldr	r3, [sp, #16]
 8009e52:	3b01      	subs	r3, #1
 8009e54:	9304      	str	r3, [sp, #16]
 8009e56:	2300      	movs	r3, #0
 8009e58:	9315      	str	r3, [sp, #84]	@ 0x54
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009e5e:	9206      	str	r2, [sp, #24]
 8009e60:	1bdb      	subs	r3, r3, r7
 8009e62:	1e5a      	subs	r2, r3, #1
 8009e64:	d53e      	bpl.n	8009ee4 <_dtoa_r+0x220>
 8009e66:	2201      	movs	r2, #1
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	9306      	str	r3, [sp, #24]
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009e70:	9b04      	ldr	r3, [sp, #16]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	db38      	blt.n	8009ee8 <_dtoa_r+0x224>
 8009e76:	9a04      	ldr	r2, [sp, #16]
 8009e78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e7a:	4694      	mov	ip, r2
 8009e7c:	4463      	add	r3, ip
 8009e7e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009e80:	2300      	movs	r3, #0
 8009e82:	9214      	str	r2, [sp, #80]	@ 0x50
 8009e84:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e86:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009e88:	2401      	movs	r4, #1
 8009e8a:	2b09      	cmp	r3, #9
 8009e8c:	d867      	bhi.n	8009f5e <_dtoa_r+0x29a>
 8009e8e:	2b05      	cmp	r3, #5
 8009e90:	dd02      	ble.n	8009e98 <_dtoa_r+0x1d4>
 8009e92:	2400      	movs	r4, #0
 8009e94:	3b04      	subs	r3, #4
 8009e96:	9322      	str	r3, [sp, #136]	@ 0x88
 8009e98:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009e9a:	1e98      	subs	r0, r3, #2
 8009e9c:	2803      	cmp	r0, #3
 8009e9e:	d867      	bhi.n	8009f70 <_dtoa_r+0x2ac>
 8009ea0:	f7f6 f93a 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009ea4:	5b383a2b 	.word	0x5b383a2b
 8009ea8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009eaa:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8009eac:	18f6      	adds	r6, r6, r3
 8009eae:	4b68      	ldr	r3, [pc, #416]	@ (800a050 <_dtoa_r+0x38c>)
 8009eb0:	18f2      	adds	r2, r6, r3
 8009eb2:	2a20      	cmp	r2, #32
 8009eb4:	dd0f      	ble.n	8009ed6 <_dtoa_r+0x212>
 8009eb6:	2340      	movs	r3, #64	@ 0x40
 8009eb8:	1a9b      	subs	r3, r3, r2
 8009eba:	409f      	lsls	r7, r3
 8009ebc:	4b65      	ldr	r3, [pc, #404]	@ (800a054 <_dtoa_r+0x390>)
 8009ebe:	0038      	movs	r0, r7
 8009ec0:	18f3      	adds	r3, r6, r3
 8009ec2:	40dc      	lsrs	r4, r3
 8009ec4:	4320      	orrs	r0, r4
 8009ec6:	f7f8 ff31 	bl	8002d2c <__aeabi_ui2d>
 8009eca:	2201      	movs	r2, #1
 8009ecc:	4b62      	ldr	r3, [pc, #392]	@ (800a058 <_dtoa_r+0x394>)
 8009ece:	1e77      	subs	r7, r6, #1
 8009ed0:	18cb      	adds	r3, r1, r3
 8009ed2:	9218      	str	r2, [sp, #96]	@ 0x60
 8009ed4:	e776      	b.n	8009dc4 <_dtoa_r+0x100>
 8009ed6:	2320      	movs	r3, #32
 8009ed8:	0020      	movs	r0, r4
 8009eda:	1a9b      	subs	r3, r3, r2
 8009edc:	4098      	lsls	r0, r3
 8009ede:	e7f2      	b.n	8009ec6 <_dtoa_r+0x202>
 8009ee0:	9015      	str	r0, [sp, #84]	@ 0x54
 8009ee2:	e7ba      	b.n	8009e5a <_dtoa_r+0x196>
 8009ee4:	920d      	str	r2, [sp, #52]	@ 0x34
 8009ee6:	e7c3      	b.n	8009e70 <_dtoa_r+0x1ac>
 8009ee8:	9b06      	ldr	r3, [sp, #24]
 8009eea:	9a04      	ldr	r2, [sp, #16]
 8009eec:	1a9b      	subs	r3, r3, r2
 8009eee:	9306      	str	r3, [sp, #24]
 8009ef0:	4253      	negs	r3, r2
 8009ef2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	9314      	str	r3, [sp, #80]	@ 0x50
 8009ef8:	e7c5      	b.n	8009e86 <_dtoa_r+0x1c2>
 8009efa:	2300      	movs	r3, #0
 8009efc:	9310      	str	r3, [sp, #64]	@ 0x40
 8009efe:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f00:	930e      	str	r3, [sp, #56]	@ 0x38
 8009f02:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	dc13      	bgt.n	8009f30 <_dtoa_r+0x26c>
 8009f08:	2301      	movs	r3, #1
 8009f0a:	001a      	movs	r2, r3
 8009f0c:	930e      	str	r3, [sp, #56]	@ 0x38
 8009f0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f10:	9223      	str	r2, [sp, #140]	@ 0x8c
 8009f12:	e00d      	b.n	8009f30 <_dtoa_r+0x26c>
 8009f14:	2301      	movs	r3, #1
 8009f16:	e7f1      	b.n	8009efc <_dtoa_r+0x238>
 8009f18:	2300      	movs	r3, #0
 8009f1a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009f1c:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f1e:	4694      	mov	ip, r2
 8009f20:	9b04      	ldr	r3, [sp, #16]
 8009f22:	4463      	add	r3, ip
 8009f24:	930e      	str	r3, [sp, #56]	@ 0x38
 8009f26:	3301      	adds	r3, #1
 8009f28:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	dc00      	bgt.n	8009f30 <_dtoa_r+0x26c>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	9a03      	ldr	r2, [sp, #12]
 8009f32:	2100      	movs	r1, #0
 8009f34:	69d0      	ldr	r0, [r2, #28]
 8009f36:	2204      	movs	r2, #4
 8009f38:	0015      	movs	r5, r2
 8009f3a:	3514      	adds	r5, #20
 8009f3c:	429d      	cmp	r5, r3
 8009f3e:	d91b      	bls.n	8009f78 <_dtoa_r+0x2b4>
 8009f40:	6041      	str	r1, [r0, #4]
 8009f42:	9803      	ldr	r0, [sp, #12]
 8009f44:	f000 fdb8 	bl	800aab8 <_Balloc>
 8009f48:	9008      	str	r0, [sp, #32]
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	d117      	bne.n	8009f7e <_dtoa_r+0x2ba>
 8009f4e:	21b0      	movs	r1, #176	@ 0xb0
 8009f50:	4b42      	ldr	r3, [pc, #264]	@ (800a05c <_dtoa_r+0x398>)
 8009f52:	482e      	ldr	r0, [pc, #184]	@ (800a00c <_dtoa_r+0x348>)
 8009f54:	9a08      	ldr	r2, [sp, #32]
 8009f56:	31ff      	adds	r1, #255	@ 0xff
 8009f58:	e6c9      	b.n	8009cee <_dtoa_r+0x2a>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e7dd      	b.n	8009f1a <_dtoa_r+0x256>
 8009f5e:	2300      	movs	r3, #0
 8009f60:	9410      	str	r4, [sp, #64]	@ 0x40
 8009f62:	9322      	str	r3, [sp, #136]	@ 0x88
 8009f64:	3b01      	subs	r3, #1
 8009f66:	930e      	str	r3, [sp, #56]	@ 0x38
 8009f68:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	3313      	adds	r3, #19
 8009f6e:	e7cf      	b.n	8009f10 <_dtoa_r+0x24c>
 8009f70:	2301      	movs	r3, #1
 8009f72:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f74:	3b02      	subs	r3, #2
 8009f76:	e7f6      	b.n	8009f66 <_dtoa_r+0x2a2>
 8009f78:	3101      	adds	r1, #1
 8009f7a:	0052      	lsls	r2, r2, #1
 8009f7c:	e7dc      	b.n	8009f38 <_dtoa_r+0x274>
 8009f7e:	9b03      	ldr	r3, [sp, #12]
 8009f80:	9a08      	ldr	r2, [sp, #32]
 8009f82:	69db      	ldr	r3, [r3, #28]
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f88:	2b0e      	cmp	r3, #14
 8009f8a:	d900      	bls.n	8009f8e <_dtoa_r+0x2ca>
 8009f8c:	e0d9      	b.n	800a142 <_dtoa_r+0x47e>
 8009f8e:	2c00      	cmp	r4, #0
 8009f90:	d100      	bne.n	8009f94 <_dtoa_r+0x2d0>
 8009f92:	e0d6      	b.n	800a142 <_dtoa_r+0x47e>
 8009f94:	9b04      	ldr	r3, [sp, #16]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	dd64      	ble.n	800a064 <_dtoa_r+0x3a0>
 8009f9a:	210f      	movs	r1, #15
 8009f9c:	9a04      	ldr	r2, [sp, #16]
 8009f9e:	4b2b      	ldr	r3, [pc, #172]	@ (800a04c <_dtoa_r+0x388>)
 8009fa0:	400a      	ands	r2, r1
 8009fa2:	00d2      	lsls	r2, r2, #3
 8009fa4:	189b      	adds	r3, r3, r2
 8009fa6:	681e      	ldr	r6, [r3, #0]
 8009fa8:	685f      	ldr	r7, [r3, #4]
 8009faa:	9b04      	ldr	r3, [sp, #16]
 8009fac:	2402      	movs	r4, #2
 8009fae:	111d      	asrs	r5, r3, #4
 8009fb0:	05db      	lsls	r3, r3, #23
 8009fb2:	d50a      	bpl.n	8009fca <_dtoa_r+0x306>
 8009fb4:	4b2a      	ldr	r3, [pc, #168]	@ (800a060 <_dtoa_r+0x39c>)
 8009fb6:	400d      	ands	r5, r1
 8009fb8:	6a1a      	ldr	r2, [r3, #32]
 8009fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fbc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009fbe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009fc0:	f7f7 fb80 	bl	80016c4 <__aeabi_ddiv>
 8009fc4:	900a      	str	r0, [sp, #40]	@ 0x28
 8009fc6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009fc8:	3401      	adds	r4, #1
 8009fca:	4b25      	ldr	r3, [pc, #148]	@ (800a060 <_dtoa_r+0x39c>)
 8009fcc:	930c      	str	r3, [sp, #48]	@ 0x30
 8009fce:	2d00      	cmp	r5, #0
 8009fd0:	d108      	bne.n	8009fe4 <_dtoa_r+0x320>
 8009fd2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009fd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009fd6:	0032      	movs	r2, r6
 8009fd8:	003b      	movs	r3, r7
 8009fda:	f7f7 fb73 	bl	80016c4 <__aeabi_ddiv>
 8009fde:	900a      	str	r0, [sp, #40]	@ 0x28
 8009fe0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009fe2:	e05a      	b.n	800a09a <_dtoa_r+0x3d6>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	421d      	tst	r5, r3
 8009fe8:	d009      	beq.n	8009ffe <_dtoa_r+0x33a>
 8009fea:	18e4      	adds	r4, r4, r3
 8009fec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009fee:	0030      	movs	r0, r6
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	0039      	movs	r1, r7
 8009ff6:	f7f7 ffa9 	bl	8001f4c <__aeabi_dmul>
 8009ffa:	0006      	movs	r6, r0
 8009ffc:	000f      	movs	r7, r1
 8009ffe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a000:	106d      	asrs	r5, r5, #1
 800a002:	3308      	adds	r3, #8
 800a004:	e7e2      	b.n	8009fcc <_dtoa_r+0x308>
 800a006:	46c0      	nop			@ (mov r8, r8)
 800a008:	0800c1e1 	.word	0x0800c1e1
 800a00c:	0800c1f8 	.word	0x0800c1f8
 800a010:	7ff00000 	.word	0x7ff00000
 800a014:	0000270f 	.word	0x0000270f
 800a018:	0800c1dd 	.word	0x0800c1dd
 800a01c:	0800c1e0 	.word	0x0800c1e0
 800a020:	0800c1b1 	.word	0x0800c1b1
 800a024:	0800c1b0 	.word	0x0800c1b0
 800a028:	3ff00000 	.word	0x3ff00000
 800a02c:	fffffc01 	.word	0xfffffc01
 800a030:	3ff80000 	.word	0x3ff80000
 800a034:	636f4361 	.word	0x636f4361
 800a038:	3fd287a7 	.word	0x3fd287a7
 800a03c:	8b60c8b3 	.word	0x8b60c8b3
 800a040:	3fc68a28 	.word	0x3fc68a28
 800a044:	509f79fb 	.word	0x509f79fb
 800a048:	3fd34413 	.word	0x3fd34413
 800a04c:	0800c2f0 	.word	0x0800c2f0
 800a050:	00000432 	.word	0x00000432
 800a054:	00000412 	.word	0x00000412
 800a058:	fe100000 	.word	0xfe100000
 800a05c:	0800c250 	.word	0x0800c250
 800a060:	0800c2c8 	.word	0x0800c2c8
 800a064:	9b04      	ldr	r3, [sp, #16]
 800a066:	2402      	movs	r4, #2
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d016      	beq.n	800a09a <_dtoa_r+0x3d6>
 800a06c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a06e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a070:	220f      	movs	r2, #15
 800a072:	425d      	negs	r5, r3
 800a074:	402a      	ands	r2, r5
 800a076:	4bd7      	ldr	r3, [pc, #860]	@ (800a3d4 <_dtoa_r+0x710>)
 800a078:	00d2      	lsls	r2, r2, #3
 800a07a:	189b      	adds	r3, r3, r2
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	f7f7 ff64 	bl	8001f4c <__aeabi_dmul>
 800a084:	2701      	movs	r7, #1
 800a086:	2300      	movs	r3, #0
 800a088:	900a      	str	r0, [sp, #40]	@ 0x28
 800a08a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a08c:	4ed2      	ldr	r6, [pc, #840]	@ (800a3d8 <_dtoa_r+0x714>)
 800a08e:	112d      	asrs	r5, r5, #4
 800a090:	2d00      	cmp	r5, #0
 800a092:	d000      	beq.n	800a096 <_dtoa_r+0x3d2>
 800a094:	e0ba      	b.n	800a20c <_dtoa_r+0x548>
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1a1      	bne.n	8009fde <_dtoa_r+0x31a>
 800a09a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a09c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a09e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d100      	bne.n	800a0a6 <_dtoa_r+0x3e2>
 800a0a4:	e0bd      	b.n	800a222 <_dtoa_r+0x55e>
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	0030      	movs	r0, r6
 800a0aa:	0039      	movs	r1, r7
 800a0ac:	4bcb      	ldr	r3, [pc, #812]	@ (800a3dc <_dtoa_r+0x718>)
 800a0ae:	f7f6 f9d3 	bl	8000458 <__aeabi_dcmplt>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d100      	bne.n	800a0b8 <_dtoa_r+0x3f4>
 800a0b6:	e0b4      	b.n	800a222 <_dtoa_r+0x55e>
 800a0b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d100      	bne.n	800a0c0 <_dtoa_r+0x3fc>
 800a0be:	e0b0      	b.n	800a222 <_dtoa_r+0x55e>
 800a0c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	dd39      	ble.n	800a13a <_dtoa_r+0x476>
 800a0c6:	9b04      	ldr	r3, [sp, #16]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a0ce:	0030      	movs	r0, r6
 800a0d0:	4bc3      	ldr	r3, [pc, #780]	@ (800a3e0 <_dtoa_r+0x71c>)
 800a0d2:	0039      	movs	r1, r7
 800a0d4:	f7f7 ff3a 	bl	8001f4c <__aeabi_dmul>
 800a0d8:	900a      	str	r0, [sp, #40]	@ 0x28
 800a0da:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a0dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0de:	3401      	adds	r4, #1
 800a0e0:	0020      	movs	r0, r4
 800a0e2:	9311      	str	r3, [sp, #68]	@ 0x44
 800a0e4:	f7f8 fdf4 	bl	8002cd0 <__aeabi_i2d>
 800a0e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0ec:	f7f7 ff2e 	bl	8001f4c <__aeabi_dmul>
 800a0f0:	4bbc      	ldr	r3, [pc, #752]	@ (800a3e4 <_dtoa_r+0x720>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f7f6 ff82 	bl	8000ffc <__aeabi_dadd>
 800a0f8:	4bbb      	ldr	r3, [pc, #748]	@ (800a3e8 <_dtoa_r+0x724>)
 800a0fa:	0006      	movs	r6, r0
 800a0fc:	18cf      	adds	r7, r1, r3
 800a0fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a100:	2b00      	cmp	r3, #0
 800a102:	d000      	beq.n	800a106 <_dtoa_r+0x442>
 800a104:	e091      	b.n	800a22a <_dtoa_r+0x566>
 800a106:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a108:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a10a:	2200      	movs	r2, #0
 800a10c:	4bb7      	ldr	r3, [pc, #732]	@ (800a3ec <_dtoa_r+0x728>)
 800a10e:	f7f8 f9e5 	bl	80024dc <__aeabi_dsub>
 800a112:	0032      	movs	r2, r6
 800a114:	003b      	movs	r3, r7
 800a116:	0004      	movs	r4, r0
 800a118:	000d      	movs	r5, r1
 800a11a:	f7f6 f9b1 	bl	8000480 <__aeabi_dcmpgt>
 800a11e:	2800      	cmp	r0, #0
 800a120:	d000      	beq.n	800a124 <_dtoa_r+0x460>
 800a122:	e29d      	b.n	800a660 <_dtoa_r+0x99c>
 800a124:	2180      	movs	r1, #128	@ 0x80
 800a126:	0609      	lsls	r1, r1, #24
 800a128:	187b      	adds	r3, r7, r1
 800a12a:	0032      	movs	r2, r6
 800a12c:	0020      	movs	r0, r4
 800a12e:	0029      	movs	r1, r5
 800a130:	f7f6 f992 	bl	8000458 <__aeabi_dcmplt>
 800a134:	2800      	cmp	r0, #0
 800a136:	d000      	beq.n	800a13a <_dtoa_r+0x476>
 800a138:	e130      	b.n	800a39c <_dtoa_r+0x6d8>
 800a13a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a13c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800a13e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a140:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a142:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a144:	2b00      	cmp	r3, #0
 800a146:	da00      	bge.n	800a14a <_dtoa_r+0x486>
 800a148:	e177      	b.n	800a43a <_dtoa_r+0x776>
 800a14a:	9a04      	ldr	r2, [sp, #16]
 800a14c:	2a0e      	cmp	r2, #14
 800a14e:	dd00      	ble.n	800a152 <_dtoa_r+0x48e>
 800a150:	e173      	b.n	800a43a <_dtoa_r+0x776>
 800a152:	4ba0      	ldr	r3, [pc, #640]	@ (800a3d4 <_dtoa_r+0x710>)
 800a154:	00d2      	lsls	r2, r2, #3
 800a156:	189b      	adds	r3, r3, r2
 800a158:	685c      	ldr	r4, [r3, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	9306      	str	r3, [sp, #24]
 800a15e:	9407      	str	r4, [sp, #28]
 800a160:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a162:	2b00      	cmp	r3, #0
 800a164:	da03      	bge.n	800a16e <_dtoa_r+0x4aa>
 800a166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a168:	2b00      	cmp	r3, #0
 800a16a:	dc00      	bgt.n	800a16e <_dtoa_r+0x4aa>
 800a16c:	e106      	b.n	800a37c <_dtoa_r+0x6b8>
 800a16e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a170:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a174:	9d08      	ldr	r5, [sp, #32]
 800a176:	3b01      	subs	r3, #1
 800a178:	195b      	adds	r3, r3, r5
 800a17a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a17c:	9a06      	ldr	r2, [sp, #24]
 800a17e:	9b07      	ldr	r3, [sp, #28]
 800a180:	0030      	movs	r0, r6
 800a182:	0039      	movs	r1, r7
 800a184:	f7f7 fa9e 	bl	80016c4 <__aeabi_ddiv>
 800a188:	f7f8 fd66 	bl	8002c58 <__aeabi_d2iz>
 800a18c:	9009      	str	r0, [sp, #36]	@ 0x24
 800a18e:	f7f8 fd9f 	bl	8002cd0 <__aeabi_i2d>
 800a192:	9a06      	ldr	r2, [sp, #24]
 800a194:	9b07      	ldr	r3, [sp, #28]
 800a196:	f7f7 fed9 	bl	8001f4c <__aeabi_dmul>
 800a19a:	0002      	movs	r2, r0
 800a19c:	000b      	movs	r3, r1
 800a19e:	0030      	movs	r0, r6
 800a1a0:	0039      	movs	r1, r7
 800a1a2:	f7f8 f99b 	bl	80024dc <__aeabi_dsub>
 800a1a6:	002b      	movs	r3, r5
 800a1a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1aa:	3501      	adds	r5, #1
 800a1ac:	3230      	adds	r2, #48	@ 0x30
 800a1ae:	701a      	strb	r2, [r3, #0]
 800a1b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1b2:	002c      	movs	r4, r5
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d000      	beq.n	800a1ba <_dtoa_r+0x4f6>
 800a1b8:	e131      	b.n	800a41e <_dtoa_r+0x75a>
 800a1ba:	0002      	movs	r2, r0
 800a1bc:	000b      	movs	r3, r1
 800a1be:	f7f6 ff1d 	bl	8000ffc <__aeabi_dadd>
 800a1c2:	9a06      	ldr	r2, [sp, #24]
 800a1c4:	9b07      	ldr	r3, [sp, #28]
 800a1c6:	0006      	movs	r6, r0
 800a1c8:	000f      	movs	r7, r1
 800a1ca:	f7f6 f959 	bl	8000480 <__aeabi_dcmpgt>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d000      	beq.n	800a1d4 <_dtoa_r+0x510>
 800a1d2:	e10f      	b.n	800a3f4 <_dtoa_r+0x730>
 800a1d4:	9a06      	ldr	r2, [sp, #24]
 800a1d6:	9b07      	ldr	r3, [sp, #28]
 800a1d8:	0030      	movs	r0, r6
 800a1da:	0039      	movs	r1, r7
 800a1dc:	f7f6 f936 	bl	800044c <__aeabi_dcmpeq>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d003      	beq.n	800a1ec <_dtoa_r+0x528>
 800a1e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1e6:	07dd      	lsls	r5, r3, #31
 800a1e8:	d500      	bpl.n	800a1ec <_dtoa_r+0x528>
 800a1ea:	e103      	b.n	800a3f4 <_dtoa_r+0x730>
 800a1ec:	9905      	ldr	r1, [sp, #20]
 800a1ee:	9803      	ldr	r0, [sp, #12]
 800a1f0:	f000 fca6 	bl	800ab40 <_Bfree>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	7023      	strb	r3, [r4, #0]
 800a1f8:	9b04      	ldr	r3, [sp, #16]
 800a1fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	6013      	str	r3, [r2, #0]
 800a200:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a202:	2b00      	cmp	r3, #0
 800a204:	d100      	bne.n	800a208 <_dtoa_r+0x544>
 800a206:	e5a7      	b.n	8009d58 <_dtoa_r+0x94>
 800a208:	601c      	str	r4, [r3, #0]
 800a20a:	e5a5      	b.n	8009d58 <_dtoa_r+0x94>
 800a20c:	423d      	tst	r5, r7
 800a20e:	d005      	beq.n	800a21c <_dtoa_r+0x558>
 800a210:	6832      	ldr	r2, [r6, #0]
 800a212:	6873      	ldr	r3, [r6, #4]
 800a214:	f7f7 fe9a 	bl	8001f4c <__aeabi_dmul>
 800a218:	003b      	movs	r3, r7
 800a21a:	3401      	adds	r4, #1
 800a21c:	106d      	asrs	r5, r5, #1
 800a21e:	3608      	adds	r6, #8
 800a220:	e736      	b.n	800a090 <_dtoa_r+0x3cc>
 800a222:	9b04      	ldr	r3, [sp, #16]
 800a224:	930c      	str	r3, [sp, #48]	@ 0x30
 800a226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a228:	e75a      	b.n	800a0e0 <_dtoa_r+0x41c>
 800a22a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a22c:	4b69      	ldr	r3, [pc, #420]	@ (800a3d4 <_dtoa_r+0x710>)
 800a22e:	3a01      	subs	r2, #1
 800a230:	00d2      	lsls	r2, r2, #3
 800a232:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a234:	189b      	adds	r3, r3, r2
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	2900      	cmp	r1, #0
 800a23c:	d04c      	beq.n	800a2d8 <_dtoa_r+0x614>
 800a23e:	2000      	movs	r0, #0
 800a240:	496b      	ldr	r1, [pc, #428]	@ (800a3f0 <_dtoa_r+0x72c>)
 800a242:	f7f7 fa3f 	bl	80016c4 <__aeabi_ddiv>
 800a246:	0032      	movs	r2, r6
 800a248:	003b      	movs	r3, r7
 800a24a:	f7f8 f947 	bl	80024dc <__aeabi_dsub>
 800a24e:	9a08      	ldr	r2, [sp, #32]
 800a250:	0006      	movs	r6, r0
 800a252:	4694      	mov	ip, r2
 800a254:	000f      	movs	r7, r1
 800a256:	9b08      	ldr	r3, [sp, #32]
 800a258:	9316      	str	r3, [sp, #88]	@ 0x58
 800a25a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a25c:	4463      	add	r3, ip
 800a25e:	9311      	str	r3, [sp, #68]	@ 0x44
 800a260:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a262:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a264:	f7f8 fcf8 	bl	8002c58 <__aeabi_d2iz>
 800a268:	0005      	movs	r5, r0
 800a26a:	f7f8 fd31 	bl	8002cd0 <__aeabi_i2d>
 800a26e:	0002      	movs	r2, r0
 800a270:	000b      	movs	r3, r1
 800a272:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a274:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a276:	f7f8 f931 	bl	80024dc <__aeabi_dsub>
 800a27a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a27c:	3530      	adds	r5, #48	@ 0x30
 800a27e:	1c5c      	adds	r4, r3, #1
 800a280:	701d      	strb	r5, [r3, #0]
 800a282:	0032      	movs	r2, r6
 800a284:	003b      	movs	r3, r7
 800a286:	900a      	str	r0, [sp, #40]	@ 0x28
 800a288:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a28a:	f7f6 f8e5 	bl	8000458 <__aeabi_dcmplt>
 800a28e:	2800      	cmp	r0, #0
 800a290:	d16a      	bne.n	800a368 <_dtoa_r+0x6a4>
 800a292:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a294:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a296:	2000      	movs	r0, #0
 800a298:	4950      	ldr	r1, [pc, #320]	@ (800a3dc <_dtoa_r+0x718>)
 800a29a:	f7f8 f91f 	bl	80024dc <__aeabi_dsub>
 800a29e:	0032      	movs	r2, r6
 800a2a0:	003b      	movs	r3, r7
 800a2a2:	f7f6 f8d9 	bl	8000458 <__aeabi_dcmplt>
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d000      	beq.n	800a2ac <_dtoa_r+0x5e8>
 800a2aa:	e0a5      	b.n	800a3f8 <_dtoa_r+0x734>
 800a2ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a2ae:	42a3      	cmp	r3, r4
 800a2b0:	d100      	bne.n	800a2b4 <_dtoa_r+0x5f0>
 800a2b2:	e742      	b.n	800a13a <_dtoa_r+0x476>
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	0030      	movs	r0, r6
 800a2b8:	0039      	movs	r1, r7
 800a2ba:	4b49      	ldr	r3, [pc, #292]	@ (800a3e0 <_dtoa_r+0x71c>)
 800a2bc:	f7f7 fe46 	bl	8001f4c <__aeabi_dmul>
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	0006      	movs	r6, r0
 800a2c4:	000f      	movs	r7, r1
 800a2c6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a2c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a2ca:	4b45      	ldr	r3, [pc, #276]	@ (800a3e0 <_dtoa_r+0x71c>)
 800a2cc:	f7f7 fe3e 	bl	8001f4c <__aeabi_dmul>
 800a2d0:	9416      	str	r4, [sp, #88]	@ 0x58
 800a2d2:	900a      	str	r0, [sp, #40]	@ 0x28
 800a2d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a2d6:	e7c3      	b.n	800a260 <_dtoa_r+0x59c>
 800a2d8:	0030      	movs	r0, r6
 800a2da:	0039      	movs	r1, r7
 800a2dc:	f7f7 fe36 	bl	8001f4c <__aeabi_dmul>
 800a2e0:	9d08      	ldr	r5, [sp, #32]
 800a2e2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a2e4:	002b      	movs	r3, r5
 800a2e6:	4694      	mov	ip, r2
 800a2e8:	9016      	str	r0, [sp, #88]	@ 0x58
 800a2ea:	9117      	str	r1, [sp, #92]	@ 0x5c
 800a2ec:	4463      	add	r3, ip
 800a2ee:	9319      	str	r3, [sp, #100]	@ 0x64
 800a2f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a2f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a2f4:	f7f8 fcb0 	bl	8002c58 <__aeabi_d2iz>
 800a2f8:	0004      	movs	r4, r0
 800a2fa:	f7f8 fce9 	bl	8002cd0 <__aeabi_i2d>
 800a2fe:	000b      	movs	r3, r1
 800a300:	0002      	movs	r2, r0
 800a302:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a304:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a306:	f7f8 f8e9 	bl	80024dc <__aeabi_dsub>
 800a30a:	3430      	adds	r4, #48	@ 0x30
 800a30c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a30e:	702c      	strb	r4, [r5, #0]
 800a310:	3501      	adds	r5, #1
 800a312:	0006      	movs	r6, r0
 800a314:	000f      	movs	r7, r1
 800a316:	42ab      	cmp	r3, r5
 800a318:	d129      	bne.n	800a36e <_dtoa_r+0x6aa>
 800a31a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800a31c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800a31e:	9b08      	ldr	r3, [sp, #32]
 800a320:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800a322:	469c      	mov	ip, r3
 800a324:	2200      	movs	r2, #0
 800a326:	4b32      	ldr	r3, [pc, #200]	@ (800a3f0 <_dtoa_r+0x72c>)
 800a328:	4464      	add	r4, ip
 800a32a:	f7f6 fe67 	bl	8000ffc <__aeabi_dadd>
 800a32e:	0002      	movs	r2, r0
 800a330:	000b      	movs	r3, r1
 800a332:	0030      	movs	r0, r6
 800a334:	0039      	movs	r1, r7
 800a336:	f7f6 f8a3 	bl	8000480 <__aeabi_dcmpgt>
 800a33a:	2800      	cmp	r0, #0
 800a33c:	d15c      	bne.n	800a3f8 <_dtoa_r+0x734>
 800a33e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a340:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a342:	2000      	movs	r0, #0
 800a344:	492a      	ldr	r1, [pc, #168]	@ (800a3f0 <_dtoa_r+0x72c>)
 800a346:	f7f8 f8c9 	bl	80024dc <__aeabi_dsub>
 800a34a:	0002      	movs	r2, r0
 800a34c:	000b      	movs	r3, r1
 800a34e:	0030      	movs	r0, r6
 800a350:	0039      	movs	r1, r7
 800a352:	f7f6 f881 	bl	8000458 <__aeabi_dcmplt>
 800a356:	2800      	cmp	r0, #0
 800a358:	d100      	bne.n	800a35c <_dtoa_r+0x698>
 800a35a:	e6ee      	b.n	800a13a <_dtoa_r+0x476>
 800a35c:	0023      	movs	r3, r4
 800a35e:	3c01      	subs	r4, #1
 800a360:	7822      	ldrb	r2, [r4, #0]
 800a362:	2a30      	cmp	r2, #48	@ 0x30
 800a364:	d0fa      	beq.n	800a35c <_dtoa_r+0x698>
 800a366:	001c      	movs	r4, r3
 800a368:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a36a:	9304      	str	r3, [sp, #16]
 800a36c:	e73e      	b.n	800a1ec <_dtoa_r+0x528>
 800a36e:	2200      	movs	r2, #0
 800a370:	4b1b      	ldr	r3, [pc, #108]	@ (800a3e0 <_dtoa_r+0x71c>)
 800a372:	f7f7 fdeb 	bl	8001f4c <__aeabi_dmul>
 800a376:	900a      	str	r0, [sp, #40]	@ 0x28
 800a378:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a37a:	e7b9      	b.n	800a2f0 <_dtoa_r+0x62c>
 800a37c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d10c      	bne.n	800a39c <_dtoa_r+0x6d8>
 800a382:	9806      	ldr	r0, [sp, #24]
 800a384:	9907      	ldr	r1, [sp, #28]
 800a386:	2200      	movs	r2, #0
 800a388:	4b18      	ldr	r3, [pc, #96]	@ (800a3ec <_dtoa_r+0x728>)
 800a38a:	f7f7 fddf 	bl	8001f4c <__aeabi_dmul>
 800a38e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a390:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a392:	f7f6 f87f 	bl	8000494 <__aeabi_dcmpge>
 800a396:	2800      	cmp	r0, #0
 800a398:	d100      	bne.n	800a39c <_dtoa_r+0x6d8>
 800a39a:	e164      	b.n	800a666 <_dtoa_r+0x9a2>
 800a39c:	2600      	movs	r6, #0
 800a39e:	0037      	movs	r7, r6
 800a3a0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a3a2:	9c08      	ldr	r4, [sp, #32]
 800a3a4:	43db      	mvns	r3, r3
 800a3a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	9304      	str	r3, [sp, #16]
 800a3ac:	0031      	movs	r1, r6
 800a3ae:	9803      	ldr	r0, [sp, #12]
 800a3b0:	f000 fbc6 	bl	800ab40 <_Bfree>
 800a3b4:	2f00      	cmp	r7, #0
 800a3b6:	d0d7      	beq.n	800a368 <_dtoa_r+0x6a4>
 800a3b8:	9b04      	ldr	r3, [sp, #16]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d005      	beq.n	800a3ca <_dtoa_r+0x706>
 800a3be:	42bb      	cmp	r3, r7
 800a3c0:	d003      	beq.n	800a3ca <_dtoa_r+0x706>
 800a3c2:	0019      	movs	r1, r3
 800a3c4:	9803      	ldr	r0, [sp, #12]
 800a3c6:	f000 fbbb 	bl	800ab40 <_Bfree>
 800a3ca:	0039      	movs	r1, r7
 800a3cc:	9803      	ldr	r0, [sp, #12]
 800a3ce:	f000 fbb7 	bl	800ab40 <_Bfree>
 800a3d2:	e7c9      	b.n	800a368 <_dtoa_r+0x6a4>
 800a3d4:	0800c2f0 	.word	0x0800c2f0
 800a3d8:	0800c2c8 	.word	0x0800c2c8
 800a3dc:	3ff00000 	.word	0x3ff00000
 800a3e0:	40240000 	.word	0x40240000
 800a3e4:	401c0000 	.word	0x401c0000
 800a3e8:	fcc00000 	.word	0xfcc00000
 800a3ec:	40140000 	.word	0x40140000
 800a3f0:	3fe00000 	.word	0x3fe00000
 800a3f4:	9b04      	ldr	r3, [sp, #16]
 800a3f6:	930c      	str	r3, [sp, #48]	@ 0x30
 800a3f8:	0023      	movs	r3, r4
 800a3fa:	001c      	movs	r4, r3
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	781a      	ldrb	r2, [r3, #0]
 800a400:	2a39      	cmp	r2, #57	@ 0x39
 800a402:	d108      	bne.n	800a416 <_dtoa_r+0x752>
 800a404:	9a08      	ldr	r2, [sp, #32]
 800a406:	429a      	cmp	r2, r3
 800a408:	d1f7      	bne.n	800a3fa <_dtoa_r+0x736>
 800a40a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a40c:	9908      	ldr	r1, [sp, #32]
 800a40e:	3201      	adds	r2, #1
 800a410:	920c      	str	r2, [sp, #48]	@ 0x30
 800a412:	2230      	movs	r2, #48	@ 0x30
 800a414:	700a      	strb	r2, [r1, #0]
 800a416:	781a      	ldrb	r2, [r3, #0]
 800a418:	3201      	adds	r2, #1
 800a41a:	701a      	strb	r2, [r3, #0]
 800a41c:	e7a4      	b.n	800a368 <_dtoa_r+0x6a4>
 800a41e:	2200      	movs	r2, #0
 800a420:	4bc6      	ldr	r3, [pc, #792]	@ (800a73c <_dtoa_r+0xa78>)
 800a422:	f7f7 fd93 	bl	8001f4c <__aeabi_dmul>
 800a426:	2200      	movs	r2, #0
 800a428:	2300      	movs	r3, #0
 800a42a:	0006      	movs	r6, r0
 800a42c:	000f      	movs	r7, r1
 800a42e:	f7f6 f80d 	bl	800044c <__aeabi_dcmpeq>
 800a432:	2800      	cmp	r0, #0
 800a434:	d100      	bne.n	800a438 <_dtoa_r+0x774>
 800a436:	e6a1      	b.n	800a17c <_dtoa_r+0x4b8>
 800a438:	e6d8      	b.n	800a1ec <_dtoa_r+0x528>
 800a43a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800a43c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a43e:	9c06      	ldr	r4, [sp, #24]
 800a440:	2f00      	cmp	r7, #0
 800a442:	d014      	beq.n	800a46e <_dtoa_r+0x7aa>
 800a444:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a446:	2a01      	cmp	r2, #1
 800a448:	dd00      	ble.n	800a44c <_dtoa_r+0x788>
 800a44a:	e0c8      	b.n	800a5de <_dtoa_r+0x91a>
 800a44c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800a44e:	2a00      	cmp	r2, #0
 800a450:	d100      	bne.n	800a454 <_dtoa_r+0x790>
 800a452:	e0be      	b.n	800a5d2 <_dtoa_r+0x90e>
 800a454:	4aba      	ldr	r2, [pc, #744]	@ (800a740 <_dtoa_r+0xa7c>)
 800a456:	189b      	adds	r3, r3, r2
 800a458:	9a06      	ldr	r2, [sp, #24]
 800a45a:	2101      	movs	r1, #1
 800a45c:	18d2      	adds	r2, r2, r3
 800a45e:	9206      	str	r2, [sp, #24]
 800a460:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a462:	9803      	ldr	r0, [sp, #12]
 800a464:	18d3      	adds	r3, r2, r3
 800a466:	930d      	str	r3, [sp, #52]	@ 0x34
 800a468:	f000 fc22 	bl	800acb0 <__i2b>
 800a46c:	0007      	movs	r7, r0
 800a46e:	2c00      	cmp	r4, #0
 800a470:	d00e      	beq.n	800a490 <_dtoa_r+0x7cc>
 800a472:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a474:	2b00      	cmp	r3, #0
 800a476:	dd0b      	ble.n	800a490 <_dtoa_r+0x7cc>
 800a478:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a47a:	0023      	movs	r3, r4
 800a47c:	4294      	cmp	r4, r2
 800a47e:	dd00      	ble.n	800a482 <_dtoa_r+0x7be>
 800a480:	0013      	movs	r3, r2
 800a482:	9a06      	ldr	r2, [sp, #24]
 800a484:	1ae4      	subs	r4, r4, r3
 800a486:	1ad2      	subs	r2, r2, r3
 800a488:	9206      	str	r2, [sp, #24]
 800a48a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a492:	2b00      	cmp	r3, #0
 800a494:	d01f      	beq.n	800a4d6 <_dtoa_r+0x812>
 800a496:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d100      	bne.n	800a49e <_dtoa_r+0x7da>
 800a49c:	e0b5      	b.n	800a60a <_dtoa_r+0x946>
 800a49e:	2d00      	cmp	r5, #0
 800a4a0:	d010      	beq.n	800a4c4 <_dtoa_r+0x800>
 800a4a2:	0039      	movs	r1, r7
 800a4a4:	002a      	movs	r2, r5
 800a4a6:	9803      	ldr	r0, [sp, #12]
 800a4a8:	f000 fccc 	bl	800ae44 <__pow5mult>
 800a4ac:	9a05      	ldr	r2, [sp, #20]
 800a4ae:	0001      	movs	r1, r0
 800a4b0:	0007      	movs	r7, r0
 800a4b2:	9803      	ldr	r0, [sp, #12]
 800a4b4:	f000 fc14 	bl	800ace0 <__multiply>
 800a4b8:	0006      	movs	r6, r0
 800a4ba:	9905      	ldr	r1, [sp, #20]
 800a4bc:	9803      	ldr	r0, [sp, #12]
 800a4be:	f000 fb3f 	bl	800ab40 <_Bfree>
 800a4c2:	9605      	str	r6, [sp, #20]
 800a4c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4c6:	1b5a      	subs	r2, r3, r5
 800a4c8:	42ab      	cmp	r3, r5
 800a4ca:	d004      	beq.n	800a4d6 <_dtoa_r+0x812>
 800a4cc:	9905      	ldr	r1, [sp, #20]
 800a4ce:	9803      	ldr	r0, [sp, #12]
 800a4d0:	f000 fcb8 	bl	800ae44 <__pow5mult>
 800a4d4:	9005      	str	r0, [sp, #20]
 800a4d6:	2101      	movs	r1, #1
 800a4d8:	9803      	ldr	r0, [sp, #12]
 800a4da:	f000 fbe9 	bl	800acb0 <__i2b>
 800a4de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a4e0:	0006      	movs	r6, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d100      	bne.n	800a4e8 <_dtoa_r+0x824>
 800a4e6:	e1bc      	b.n	800a862 <_dtoa_r+0xb9e>
 800a4e8:	001a      	movs	r2, r3
 800a4ea:	0001      	movs	r1, r0
 800a4ec:	9803      	ldr	r0, [sp, #12]
 800a4ee:	f000 fca9 	bl	800ae44 <__pow5mult>
 800a4f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a4f4:	0006      	movs	r6, r0
 800a4f6:	2500      	movs	r5, #0
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	dc16      	bgt.n	800a52a <_dtoa_r+0x866>
 800a4fc:	2500      	movs	r5, #0
 800a4fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a500:	42ab      	cmp	r3, r5
 800a502:	d10e      	bne.n	800a522 <_dtoa_r+0x85e>
 800a504:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a506:	031b      	lsls	r3, r3, #12
 800a508:	42ab      	cmp	r3, r5
 800a50a:	d10a      	bne.n	800a522 <_dtoa_r+0x85e>
 800a50c:	4b8d      	ldr	r3, [pc, #564]	@ (800a744 <_dtoa_r+0xa80>)
 800a50e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a510:	4213      	tst	r3, r2
 800a512:	d006      	beq.n	800a522 <_dtoa_r+0x85e>
 800a514:	9b06      	ldr	r3, [sp, #24]
 800a516:	3501      	adds	r5, #1
 800a518:	3301      	adds	r3, #1
 800a51a:	9306      	str	r3, [sp, #24]
 800a51c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a51e:	3301      	adds	r3, #1
 800a520:	930d      	str	r3, [sp, #52]	@ 0x34
 800a522:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a524:	2001      	movs	r0, #1
 800a526:	2b00      	cmp	r3, #0
 800a528:	d008      	beq.n	800a53c <_dtoa_r+0x878>
 800a52a:	6933      	ldr	r3, [r6, #16]
 800a52c:	3303      	adds	r3, #3
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	18f3      	adds	r3, r6, r3
 800a532:	6858      	ldr	r0, [r3, #4]
 800a534:	f000 fb6c 	bl	800ac10 <__hi0bits>
 800a538:	2320      	movs	r3, #32
 800a53a:	1a18      	subs	r0, r3, r0
 800a53c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a53e:	1818      	adds	r0, r3, r0
 800a540:	0002      	movs	r2, r0
 800a542:	231f      	movs	r3, #31
 800a544:	401a      	ands	r2, r3
 800a546:	4218      	tst	r0, r3
 800a548:	d065      	beq.n	800a616 <_dtoa_r+0x952>
 800a54a:	3301      	adds	r3, #1
 800a54c:	1a9b      	subs	r3, r3, r2
 800a54e:	2b04      	cmp	r3, #4
 800a550:	dd5d      	ble.n	800a60e <_dtoa_r+0x94a>
 800a552:	231c      	movs	r3, #28
 800a554:	1a9b      	subs	r3, r3, r2
 800a556:	9a06      	ldr	r2, [sp, #24]
 800a558:	18e4      	adds	r4, r4, r3
 800a55a:	18d2      	adds	r2, r2, r3
 800a55c:	9206      	str	r2, [sp, #24]
 800a55e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a560:	18d3      	adds	r3, r2, r3
 800a562:	930d      	str	r3, [sp, #52]	@ 0x34
 800a564:	9b06      	ldr	r3, [sp, #24]
 800a566:	2b00      	cmp	r3, #0
 800a568:	dd05      	ble.n	800a576 <_dtoa_r+0x8b2>
 800a56a:	001a      	movs	r2, r3
 800a56c:	9905      	ldr	r1, [sp, #20]
 800a56e:	9803      	ldr	r0, [sp, #12]
 800a570:	f000 fcc4 	bl	800aefc <__lshift>
 800a574:	9005      	str	r0, [sp, #20]
 800a576:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a578:	2b00      	cmp	r3, #0
 800a57a:	dd05      	ble.n	800a588 <_dtoa_r+0x8c4>
 800a57c:	0031      	movs	r1, r6
 800a57e:	001a      	movs	r2, r3
 800a580:	9803      	ldr	r0, [sp, #12]
 800a582:	f000 fcbb 	bl	800aefc <__lshift>
 800a586:	0006      	movs	r6, r0
 800a588:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d045      	beq.n	800a61a <_dtoa_r+0x956>
 800a58e:	0031      	movs	r1, r6
 800a590:	9805      	ldr	r0, [sp, #20]
 800a592:	f000 fd1f 	bl	800afd4 <__mcmp>
 800a596:	2800      	cmp	r0, #0
 800a598:	da3f      	bge.n	800a61a <_dtoa_r+0x956>
 800a59a:	9b04      	ldr	r3, [sp, #16]
 800a59c:	220a      	movs	r2, #10
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	930c      	str	r3, [sp, #48]	@ 0x30
 800a5a2:	9905      	ldr	r1, [sp, #20]
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	9803      	ldr	r0, [sp, #12]
 800a5a8:	f000 faee 	bl	800ab88 <__multadd>
 800a5ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a5ae:	9005      	str	r0, [sp, #20]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d100      	bne.n	800a5b6 <_dtoa_r+0x8f2>
 800a5b4:	e15c      	b.n	800a870 <_dtoa_r+0xbac>
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	0039      	movs	r1, r7
 800a5ba:	220a      	movs	r2, #10
 800a5bc:	9803      	ldr	r0, [sp, #12]
 800a5be:	f000 fae3 	bl	800ab88 <__multadd>
 800a5c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a5c4:	0007      	movs	r7, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	dc55      	bgt.n	800a676 <_dtoa_r+0x9b2>
 800a5ca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a5cc:	2b02      	cmp	r3, #2
 800a5ce:	dc2d      	bgt.n	800a62c <_dtoa_r+0x968>
 800a5d0:	e051      	b.n	800a676 <_dtoa_r+0x9b2>
 800a5d2:	2336      	movs	r3, #54	@ 0x36
 800a5d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a5d6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a5d8:	9c06      	ldr	r4, [sp, #24]
 800a5da:	1a9b      	subs	r3, r3, r2
 800a5dc:	e73c      	b.n	800a458 <_dtoa_r+0x794>
 800a5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5e0:	1e5d      	subs	r5, r3, #1
 800a5e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5e4:	42ab      	cmp	r3, r5
 800a5e6:	db08      	blt.n	800a5fa <_dtoa_r+0x936>
 800a5e8:	1b5d      	subs	r5, r3, r5
 800a5ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ec:	9c06      	ldr	r4, [sp, #24]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	db00      	blt.n	800a5f4 <_dtoa_r+0x930>
 800a5f2:	e731      	b.n	800a458 <_dtoa_r+0x794>
 800a5f4:	1ae4      	subs	r4, r4, r3
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	e72e      	b.n	800a458 <_dtoa_r+0x794>
 800a5fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5fc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a5fe:	1aeb      	subs	r3, r5, r3
 800a600:	18d3      	adds	r3, r2, r3
 800a602:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a604:	9314      	str	r3, [sp, #80]	@ 0x50
 800a606:	2500      	movs	r5, #0
 800a608:	e7ef      	b.n	800a5ea <_dtoa_r+0x926>
 800a60a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a60c:	e75e      	b.n	800a4cc <_dtoa_r+0x808>
 800a60e:	2b04      	cmp	r3, #4
 800a610:	d0a8      	beq.n	800a564 <_dtoa_r+0x8a0>
 800a612:	331c      	adds	r3, #28
 800a614:	e79f      	b.n	800a556 <_dtoa_r+0x892>
 800a616:	0013      	movs	r3, r2
 800a618:	e7fb      	b.n	800a612 <_dtoa_r+0x94e>
 800a61a:	9b04      	ldr	r3, [sp, #16]
 800a61c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a620:	930e      	str	r3, [sp, #56]	@ 0x38
 800a622:	2b00      	cmp	r3, #0
 800a624:	dc23      	bgt.n	800a66e <_dtoa_r+0x9aa>
 800a626:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a628:	2b02      	cmp	r3, #2
 800a62a:	dd20      	ble.n	800a66e <_dtoa_r+0x9aa>
 800a62c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d000      	beq.n	800a634 <_dtoa_r+0x970>
 800a632:	e6b5      	b.n	800a3a0 <_dtoa_r+0x6dc>
 800a634:	0031      	movs	r1, r6
 800a636:	2205      	movs	r2, #5
 800a638:	9803      	ldr	r0, [sp, #12]
 800a63a:	f000 faa5 	bl	800ab88 <__multadd>
 800a63e:	0006      	movs	r6, r0
 800a640:	0001      	movs	r1, r0
 800a642:	9805      	ldr	r0, [sp, #20]
 800a644:	f000 fcc6 	bl	800afd4 <__mcmp>
 800a648:	2800      	cmp	r0, #0
 800a64a:	dc00      	bgt.n	800a64e <_dtoa_r+0x98a>
 800a64c:	e6a8      	b.n	800a3a0 <_dtoa_r+0x6dc>
 800a64e:	9b08      	ldr	r3, [sp, #32]
 800a650:	9a08      	ldr	r2, [sp, #32]
 800a652:	1c5c      	adds	r4, r3, #1
 800a654:	2331      	movs	r3, #49	@ 0x31
 800a656:	7013      	strb	r3, [r2, #0]
 800a658:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a65a:	3301      	adds	r3, #1
 800a65c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a65e:	e6a3      	b.n	800a3a8 <_dtoa_r+0x6e4>
 800a660:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800a662:	0037      	movs	r7, r6
 800a664:	e7f3      	b.n	800a64e <_dtoa_r+0x98a>
 800a666:	9b04      	ldr	r3, [sp, #16]
 800a668:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800a66a:	930c      	str	r3, [sp, #48]	@ 0x30
 800a66c:	e7f9      	b.n	800a662 <_dtoa_r+0x99e>
 800a66e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a670:	2b00      	cmp	r3, #0
 800a672:	d100      	bne.n	800a676 <_dtoa_r+0x9b2>
 800a674:	e100      	b.n	800a878 <_dtoa_r+0xbb4>
 800a676:	2c00      	cmp	r4, #0
 800a678:	dd05      	ble.n	800a686 <_dtoa_r+0x9c2>
 800a67a:	0039      	movs	r1, r7
 800a67c:	0022      	movs	r2, r4
 800a67e:	9803      	ldr	r0, [sp, #12]
 800a680:	f000 fc3c 	bl	800aefc <__lshift>
 800a684:	0007      	movs	r7, r0
 800a686:	0038      	movs	r0, r7
 800a688:	2d00      	cmp	r5, #0
 800a68a:	d018      	beq.n	800a6be <_dtoa_r+0x9fa>
 800a68c:	6879      	ldr	r1, [r7, #4]
 800a68e:	9803      	ldr	r0, [sp, #12]
 800a690:	f000 fa12 	bl	800aab8 <_Balloc>
 800a694:	1e04      	subs	r4, r0, #0
 800a696:	d105      	bne.n	800a6a4 <_dtoa_r+0x9e0>
 800a698:	0022      	movs	r2, r4
 800a69a:	4b2b      	ldr	r3, [pc, #172]	@ (800a748 <_dtoa_r+0xa84>)
 800a69c:	482b      	ldr	r0, [pc, #172]	@ (800a74c <_dtoa_r+0xa88>)
 800a69e:	492c      	ldr	r1, [pc, #176]	@ (800a750 <_dtoa_r+0xa8c>)
 800a6a0:	f7ff fb25 	bl	8009cee <_dtoa_r+0x2a>
 800a6a4:	0039      	movs	r1, r7
 800a6a6:	693a      	ldr	r2, [r7, #16]
 800a6a8:	310c      	adds	r1, #12
 800a6aa:	3202      	adds	r2, #2
 800a6ac:	0092      	lsls	r2, r2, #2
 800a6ae:	300c      	adds	r0, #12
 800a6b0:	f001 f9c0 	bl	800ba34 <memcpy>
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	0021      	movs	r1, r4
 800a6b8:	9803      	ldr	r0, [sp, #12]
 800a6ba:	f000 fc1f 	bl	800aefc <__lshift>
 800a6be:	9b08      	ldr	r3, [sp, #32]
 800a6c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6c2:	9306      	str	r3, [sp, #24]
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	189b      	adds	r3, r3, r2
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	9704      	str	r7, [sp, #16]
 800a6cc:	0007      	movs	r7, r0
 800a6ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a6d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6d2:	4013      	ands	r3, r2
 800a6d4:	930e      	str	r3, [sp, #56]	@ 0x38
 800a6d6:	0031      	movs	r1, r6
 800a6d8:	9805      	ldr	r0, [sp, #20]
 800a6da:	f7ff fa65 	bl	8009ba8 <quorem>
 800a6de:	9904      	ldr	r1, [sp, #16]
 800a6e0:	0005      	movs	r5, r0
 800a6e2:	900a      	str	r0, [sp, #40]	@ 0x28
 800a6e4:	9805      	ldr	r0, [sp, #20]
 800a6e6:	f000 fc75 	bl	800afd4 <__mcmp>
 800a6ea:	003a      	movs	r2, r7
 800a6ec:	900d      	str	r0, [sp, #52]	@ 0x34
 800a6ee:	0031      	movs	r1, r6
 800a6f0:	9803      	ldr	r0, [sp, #12]
 800a6f2:	f000 fc8b 	bl	800b00c <__mdiff>
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	68c3      	ldr	r3, [r0, #12]
 800a6fa:	0004      	movs	r4, r0
 800a6fc:	3530      	adds	r5, #48	@ 0x30
 800a6fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800a700:	2b00      	cmp	r3, #0
 800a702:	d104      	bne.n	800a70e <_dtoa_r+0xa4a>
 800a704:	0001      	movs	r1, r0
 800a706:	9805      	ldr	r0, [sp, #20]
 800a708:	f000 fc64 	bl	800afd4 <__mcmp>
 800a70c:	9009      	str	r0, [sp, #36]	@ 0x24
 800a70e:	0021      	movs	r1, r4
 800a710:	9803      	ldr	r0, [sp, #12]
 800a712:	f000 fa15 	bl	800ab40 <_Bfree>
 800a716:	9b06      	ldr	r3, [sp, #24]
 800a718:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a71a:	1c5c      	adds	r4, r3, #1
 800a71c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a71e:	4313      	orrs	r3, r2
 800a720:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a722:	4313      	orrs	r3, r2
 800a724:	d116      	bne.n	800a754 <_dtoa_r+0xa90>
 800a726:	2d39      	cmp	r5, #57	@ 0x39
 800a728:	d02f      	beq.n	800a78a <_dtoa_r+0xac6>
 800a72a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	dd01      	ble.n	800a734 <_dtoa_r+0xa70>
 800a730:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800a732:	3531      	adds	r5, #49	@ 0x31
 800a734:	9b06      	ldr	r3, [sp, #24]
 800a736:	701d      	strb	r5, [r3, #0]
 800a738:	e638      	b.n	800a3ac <_dtoa_r+0x6e8>
 800a73a:	46c0      	nop			@ (mov r8, r8)
 800a73c:	40240000 	.word	0x40240000
 800a740:	00000433 	.word	0x00000433
 800a744:	7ff00000 	.word	0x7ff00000
 800a748:	0800c250 	.word	0x0800c250
 800a74c:	0800c1f8 	.word	0x0800c1f8
 800a750:	000002ef 	.word	0x000002ef
 800a754:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a756:	2b00      	cmp	r3, #0
 800a758:	db04      	blt.n	800a764 <_dtoa_r+0xaa0>
 800a75a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a75c:	4313      	orrs	r3, r2
 800a75e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a760:	4313      	orrs	r3, r2
 800a762:	d11e      	bne.n	800a7a2 <_dtoa_r+0xade>
 800a764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a766:	2b00      	cmp	r3, #0
 800a768:	dde4      	ble.n	800a734 <_dtoa_r+0xa70>
 800a76a:	9905      	ldr	r1, [sp, #20]
 800a76c:	2201      	movs	r2, #1
 800a76e:	9803      	ldr	r0, [sp, #12]
 800a770:	f000 fbc4 	bl	800aefc <__lshift>
 800a774:	0031      	movs	r1, r6
 800a776:	9005      	str	r0, [sp, #20]
 800a778:	f000 fc2c 	bl	800afd4 <__mcmp>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	dc02      	bgt.n	800a786 <_dtoa_r+0xac2>
 800a780:	d1d8      	bne.n	800a734 <_dtoa_r+0xa70>
 800a782:	07eb      	lsls	r3, r5, #31
 800a784:	d5d6      	bpl.n	800a734 <_dtoa_r+0xa70>
 800a786:	2d39      	cmp	r5, #57	@ 0x39
 800a788:	d1d2      	bne.n	800a730 <_dtoa_r+0xa6c>
 800a78a:	2339      	movs	r3, #57	@ 0x39
 800a78c:	9a06      	ldr	r2, [sp, #24]
 800a78e:	7013      	strb	r3, [r2, #0]
 800a790:	0023      	movs	r3, r4
 800a792:	001c      	movs	r4, r3
 800a794:	3b01      	subs	r3, #1
 800a796:	781a      	ldrb	r2, [r3, #0]
 800a798:	2a39      	cmp	r2, #57	@ 0x39
 800a79a:	d04f      	beq.n	800a83c <_dtoa_r+0xb78>
 800a79c:	3201      	adds	r2, #1
 800a79e:	701a      	strb	r2, [r3, #0]
 800a7a0:	e604      	b.n	800a3ac <_dtoa_r+0x6e8>
 800a7a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dd03      	ble.n	800a7b0 <_dtoa_r+0xaec>
 800a7a8:	2d39      	cmp	r5, #57	@ 0x39
 800a7aa:	d0ee      	beq.n	800a78a <_dtoa_r+0xac6>
 800a7ac:	3501      	adds	r5, #1
 800a7ae:	e7c1      	b.n	800a734 <_dtoa_r+0xa70>
 800a7b0:	9b06      	ldr	r3, [sp, #24]
 800a7b2:	9a06      	ldr	r2, [sp, #24]
 800a7b4:	701d      	strb	r5, [r3, #0]
 800a7b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d02a      	beq.n	800a812 <_dtoa_r+0xb4e>
 800a7bc:	2300      	movs	r3, #0
 800a7be:	220a      	movs	r2, #10
 800a7c0:	9905      	ldr	r1, [sp, #20]
 800a7c2:	9803      	ldr	r0, [sp, #12]
 800a7c4:	f000 f9e0 	bl	800ab88 <__multadd>
 800a7c8:	9b04      	ldr	r3, [sp, #16]
 800a7ca:	9005      	str	r0, [sp, #20]
 800a7cc:	42bb      	cmp	r3, r7
 800a7ce:	d109      	bne.n	800a7e4 <_dtoa_r+0xb20>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	220a      	movs	r2, #10
 800a7d4:	9904      	ldr	r1, [sp, #16]
 800a7d6:	9803      	ldr	r0, [sp, #12]
 800a7d8:	f000 f9d6 	bl	800ab88 <__multadd>
 800a7dc:	9004      	str	r0, [sp, #16]
 800a7de:	0007      	movs	r7, r0
 800a7e0:	9406      	str	r4, [sp, #24]
 800a7e2:	e778      	b.n	800a6d6 <_dtoa_r+0xa12>
 800a7e4:	9904      	ldr	r1, [sp, #16]
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	220a      	movs	r2, #10
 800a7ea:	9803      	ldr	r0, [sp, #12]
 800a7ec:	f000 f9cc 	bl	800ab88 <__multadd>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	9004      	str	r0, [sp, #16]
 800a7f4:	220a      	movs	r2, #10
 800a7f6:	0039      	movs	r1, r7
 800a7f8:	9803      	ldr	r0, [sp, #12]
 800a7fa:	f000 f9c5 	bl	800ab88 <__multadd>
 800a7fe:	e7ee      	b.n	800a7de <_dtoa_r+0xb1a>
 800a800:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a802:	2401      	movs	r4, #1
 800a804:	2b00      	cmp	r3, #0
 800a806:	dd00      	ble.n	800a80a <_dtoa_r+0xb46>
 800a808:	001c      	movs	r4, r3
 800a80a:	9b08      	ldr	r3, [sp, #32]
 800a80c:	191c      	adds	r4, r3, r4
 800a80e:	2300      	movs	r3, #0
 800a810:	9304      	str	r3, [sp, #16]
 800a812:	9905      	ldr	r1, [sp, #20]
 800a814:	2201      	movs	r2, #1
 800a816:	9803      	ldr	r0, [sp, #12]
 800a818:	f000 fb70 	bl	800aefc <__lshift>
 800a81c:	0031      	movs	r1, r6
 800a81e:	9005      	str	r0, [sp, #20]
 800a820:	f000 fbd8 	bl	800afd4 <__mcmp>
 800a824:	2800      	cmp	r0, #0
 800a826:	dcb3      	bgt.n	800a790 <_dtoa_r+0xacc>
 800a828:	d101      	bne.n	800a82e <_dtoa_r+0xb6a>
 800a82a:	07ed      	lsls	r5, r5, #31
 800a82c:	d4b0      	bmi.n	800a790 <_dtoa_r+0xacc>
 800a82e:	0023      	movs	r3, r4
 800a830:	001c      	movs	r4, r3
 800a832:	3b01      	subs	r3, #1
 800a834:	781a      	ldrb	r2, [r3, #0]
 800a836:	2a30      	cmp	r2, #48	@ 0x30
 800a838:	d0fa      	beq.n	800a830 <_dtoa_r+0xb6c>
 800a83a:	e5b7      	b.n	800a3ac <_dtoa_r+0x6e8>
 800a83c:	9a08      	ldr	r2, [sp, #32]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d1a7      	bne.n	800a792 <_dtoa_r+0xace>
 800a842:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a844:	3301      	adds	r3, #1
 800a846:	930c      	str	r3, [sp, #48]	@ 0x30
 800a848:	2331      	movs	r3, #49	@ 0x31
 800a84a:	7013      	strb	r3, [r2, #0]
 800a84c:	e5ae      	b.n	800a3ac <_dtoa_r+0x6e8>
 800a84e:	4b15      	ldr	r3, [pc, #84]	@ (800a8a4 <_dtoa_r+0xbe0>)
 800a850:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a852:	9308      	str	r3, [sp, #32]
 800a854:	4b14      	ldr	r3, [pc, #80]	@ (800a8a8 <_dtoa_r+0xbe4>)
 800a856:	2a00      	cmp	r2, #0
 800a858:	d001      	beq.n	800a85e <_dtoa_r+0xb9a>
 800a85a:	f7ff fa7b 	bl	8009d54 <_dtoa_r+0x90>
 800a85e:	f7ff fa7b 	bl	8009d58 <_dtoa_r+0x94>
 800a862:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a864:	2b01      	cmp	r3, #1
 800a866:	dc00      	bgt.n	800a86a <_dtoa_r+0xba6>
 800a868:	e648      	b.n	800a4fc <_dtoa_r+0x838>
 800a86a:	2001      	movs	r0, #1
 800a86c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a86e:	e665      	b.n	800a53c <_dtoa_r+0x878>
 800a870:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a872:	2b00      	cmp	r3, #0
 800a874:	dc00      	bgt.n	800a878 <_dtoa_r+0xbb4>
 800a876:	e6d6      	b.n	800a626 <_dtoa_r+0x962>
 800a878:	2400      	movs	r4, #0
 800a87a:	0031      	movs	r1, r6
 800a87c:	9805      	ldr	r0, [sp, #20]
 800a87e:	f7ff f993 	bl	8009ba8 <quorem>
 800a882:	9b08      	ldr	r3, [sp, #32]
 800a884:	3030      	adds	r0, #48	@ 0x30
 800a886:	5518      	strb	r0, [r3, r4]
 800a888:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a88a:	3401      	adds	r4, #1
 800a88c:	0005      	movs	r5, r0
 800a88e:	429c      	cmp	r4, r3
 800a890:	dab6      	bge.n	800a800 <_dtoa_r+0xb3c>
 800a892:	2300      	movs	r3, #0
 800a894:	220a      	movs	r2, #10
 800a896:	9905      	ldr	r1, [sp, #20]
 800a898:	9803      	ldr	r0, [sp, #12]
 800a89a:	f000 f975 	bl	800ab88 <__multadd>
 800a89e:	9005      	str	r0, [sp, #20]
 800a8a0:	e7eb      	b.n	800a87a <_dtoa_r+0xbb6>
 800a8a2:	46c0      	nop			@ (mov r8, r8)
 800a8a4:	0800c1d4 	.word	0x0800c1d4
 800a8a8:	0800c1dc 	.word	0x0800c1dc

0800a8ac <_free_r>:
 800a8ac:	b570      	push	{r4, r5, r6, lr}
 800a8ae:	0005      	movs	r5, r0
 800a8b0:	1e0c      	subs	r4, r1, #0
 800a8b2:	d010      	beq.n	800a8d6 <_free_r+0x2a>
 800a8b4:	3c04      	subs	r4, #4
 800a8b6:	6823      	ldr	r3, [r4, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	da00      	bge.n	800a8be <_free_r+0x12>
 800a8bc:	18e4      	adds	r4, r4, r3
 800a8be:	0028      	movs	r0, r5
 800a8c0:	f000 f8ea 	bl	800aa98 <__malloc_lock>
 800a8c4:	4a1d      	ldr	r2, [pc, #116]	@ (800a93c <_free_r+0x90>)
 800a8c6:	6813      	ldr	r3, [r2, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d105      	bne.n	800a8d8 <_free_r+0x2c>
 800a8cc:	6063      	str	r3, [r4, #4]
 800a8ce:	6014      	str	r4, [r2, #0]
 800a8d0:	0028      	movs	r0, r5
 800a8d2:	f000 f8e9 	bl	800aaa8 <__malloc_unlock>
 800a8d6:	bd70      	pop	{r4, r5, r6, pc}
 800a8d8:	42a3      	cmp	r3, r4
 800a8da:	d908      	bls.n	800a8ee <_free_r+0x42>
 800a8dc:	6820      	ldr	r0, [r4, #0]
 800a8de:	1821      	adds	r1, r4, r0
 800a8e0:	428b      	cmp	r3, r1
 800a8e2:	d1f3      	bne.n	800a8cc <_free_r+0x20>
 800a8e4:	6819      	ldr	r1, [r3, #0]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	1809      	adds	r1, r1, r0
 800a8ea:	6021      	str	r1, [r4, #0]
 800a8ec:	e7ee      	b.n	800a8cc <_free_r+0x20>
 800a8ee:	001a      	movs	r2, r3
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d001      	beq.n	800a8fa <_free_r+0x4e>
 800a8f6:	42a3      	cmp	r3, r4
 800a8f8:	d9f9      	bls.n	800a8ee <_free_r+0x42>
 800a8fa:	6811      	ldr	r1, [r2, #0]
 800a8fc:	1850      	adds	r0, r2, r1
 800a8fe:	42a0      	cmp	r0, r4
 800a900:	d10b      	bne.n	800a91a <_free_r+0x6e>
 800a902:	6820      	ldr	r0, [r4, #0]
 800a904:	1809      	adds	r1, r1, r0
 800a906:	1850      	adds	r0, r2, r1
 800a908:	6011      	str	r1, [r2, #0]
 800a90a:	4283      	cmp	r3, r0
 800a90c:	d1e0      	bne.n	800a8d0 <_free_r+0x24>
 800a90e:	6818      	ldr	r0, [r3, #0]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	1841      	adds	r1, r0, r1
 800a914:	6011      	str	r1, [r2, #0]
 800a916:	6053      	str	r3, [r2, #4]
 800a918:	e7da      	b.n	800a8d0 <_free_r+0x24>
 800a91a:	42a0      	cmp	r0, r4
 800a91c:	d902      	bls.n	800a924 <_free_r+0x78>
 800a91e:	230c      	movs	r3, #12
 800a920:	602b      	str	r3, [r5, #0]
 800a922:	e7d5      	b.n	800a8d0 <_free_r+0x24>
 800a924:	6820      	ldr	r0, [r4, #0]
 800a926:	1821      	adds	r1, r4, r0
 800a928:	428b      	cmp	r3, r1
 800a92a:	d103      	bne.n	800a934 <_free_r+0x88>
 800a92c:	6819      	ldr	r1, [r3, #0]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	1809      	adds	r1, r1, r0
 800a932:	6021      	str	r1, [r4, #0]
 800a934:	6063      	str	r3, [r4, #4]
 800a936:	6054      	str	r4, [r2, #4]
 800a938:	e7ca      	b.n	800a8d0 <_free_r+0x24>
 800a93a:	46c0      	nop			@ (mov r8, r8)
 800a93c:	20000e58 	.word	0x20000e58

0800a940 <malloc>:
 800a940:	b510      	push	{r4, lr}
 800a942:	4b03      	ldr	r3, [pc, #12]	@ (800a950 <malloc+0x10>)
 800a944:	0001      	movs	r1, r0
 800a946:	6818      	ldr	r0, [r3, #0]
 800a948:	f000 f826 	bl	800a998 <_malloc_r>
 800a94c:	bd10      	pop	{r4, pc}
 800a94e:	46c0      	nop			@ (mov r8, r8)
 800a950:	20000030 	.word	0x20000030

0800a954 <sbrk_aligned>:
 800a954:	b570      	push	{r4, r5, r6, lr}
 800a956:	4e0f      	ldr	r6, [pc, #60]	@ (800a994 <sbrk_aligned+0x40>)
 800a958:	000d      	movs	r5, r1
 800a95a:	6831      	ldr	r1, [r6, #0]
 800a95c:	0004      	movs	r4, r0
 800a95e:	2900      	cmp	r1, #0
 800a960:	d102      	bne.n	800a968 <sbrk_aligned+0x14>
 800a962:	f001 f855 	bl	800ba10 <_sbrk_r>
 800a966:	6030      	str	r0, [r6, #0]
 800a968:	0029      	movs	r1, r5
 800a96a:	0020      	movs	r0, r4
 800a96c:	f001 f850 	bl	800ba10 <_sbrk_r>
 800a970:	1c43      	adds	r3, r0, #1
 800a972:	d103      	bne.n	800a97c <sbrk_aligned+0x28>
 800a974:	2501      	movs	r5, #1
 800a976:	426d      	negs	r5, r5
 800a978:	0028      	movs	r0, r5
 800a97a:	bd70      	pop	{r4, r5, r6, pc}
 800a97c:	2303      	movs	r3, #3
 800a97e:	1cc5      	adds	r5, r0, #3
 800a980:	439d      	bics	r5, r3
 800a982:	42a8      	cmp	r0, r5
 800a984:	d0f8      	beq.n	800a978 <sbrk_aligned+0x24>
 800a986:	1a29      	subs	r1, r5, r0
 800a988:	0020      	movs	r0, r4
 800a98a:	f001 f841 	bl	800ba10 <_sbrk_r>
 800a98e:	3001      	adds	r0, #1
 800a990:	d1f2      	bne.n	800a978 <sbrk_aligned+0x24>
 800a992:	e7ef      	b.n	800a974 <sbrk_aligned+0x20>
 800a994:	20000e54 	.word	0x20000e54

0800a998 <_malloc_r>:
 800a998:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a99a:	2203      	movs	r2, #3
 800a99c:	1ccb      	adds	r3, r1, #3
 800a99e:	4393      	bics	r3, r2
 800a9a0:	3308      	adds	r3, #8
 800a9a2:	0005      	movs	r5, r0
 800a9a4:	001f      	movs	r7, r3
 800a9a6:	2b0c      	cmp	r3, #12
 800a9a8:	d234      	bcs.n	800aa14 <_malloc_r+0x7c>
 800a9aa:	270c      	movs	r7, #12
 800a9ac:	42b9      	cmp	r1, r7
 800a9ae:	d833      	bhi.n	800aa18 <_malloc_r+0x80>
 800a9b0:	0028      	movs	r0, r5
 800a9b2:	f000 f871 	bl	800aa98 <__malloc_lock>
 800a9b6:	4e37      	ldr	r6, [pc, #220]	@ (800aa94 <_malloc_r+0xfc>)
 800a9b8:	6833      	ldr	r3, [r6, #0]
 800a9ba:	001c      	movs	r4, r3
 800a9bc:	2c00      	cmp	r4, #0
 800a9be:	d12f      	bne.n	800aa20 <_malloc_r+0x88>
 800a9c0:	0039      	movs	r1, r7
 800a9c2:	0028      	movs	r0, r5
 800a9c4:	f7ff ffc6 	bl	800a954 <sbrk_aligned>
 800a9c8:	0004      	movs	r4, r0
 800a9ca:	1c43      	adds	r3, r0, #1
 800a9cc:	d15f      	bne.n	800aa8e <_malloc_r+0xf6>
 800a9ce:	6834      	ldr	r4, [r6, #0]
 800a9d0:	9400      	str	r4, [sp, #0]
 800a9d2:	9b00      	ldr	r3, [sp, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d14a      	bne.n	800aa6e <_malloc_r+0xd6>
 800a9d8:	2c00      	cmp	r4, #0
 800a9da:	d052      	beq.n	800aa82 <_malloc_r+0xea>
 800a9dc:	6823      	ldr	r3, [r4, #0]
 800a9de:	0028      	movs	r0, r5
 800a9e0:	18e3      	adds	r3, r4, r3
 800a9e2:	9900      	ldr	r1, [sp, #0]
 800a9e4:	9301      	str	r3, [sp, #4]
 800a9e6:	f001 f813 	bl	800ba10 <_sbrk_r>
 800a9ea:	9b01      	ldr	r3, [sp, #4]
 800a9ec:	4283      	cmp	r3, r0
 800a9ee:	d148      	bne.n	800aa82 <_malloc_r+0xea>
 800a9f0:	6823      	ldr	r3, [r4, #0]
 800a9f2:	0028      	movs	r0, r5
 800a9f4:	1aff      	subs	r7, r7, r3
 800a9f6:	0039      	movs	r1, r7
 800a9f8:	f7ff ffac 	bl	800a954 <sbrk_aligned>
 800a9fc:	3001      	adds	r0, #1
 800a9fe:	d040      	beq.n	800aa82 <_malloc_r+0xea>
 800aa00:	6823      	ldr	r3, [r4, #0]
 800aa02:	19db      	adds	r3, r3, r7
 800aa04:	6023      	str	r3, [r4, #0]
 800aa06:	6833      	ldr	r3, [r6, #0]
 800aa08:	685a      	ldr	r2, [r3, #4]
 800aa0a:	2a00      	cmp	r2, #0
 800aa0c:	d133      	bne.n	800aa76 <_malloc_r+0xde>
 800aa0e:	9b00      	ldr	r3, [sp, #0]
 800aa10:	6033      	str	r3, [r6, #0]
 800aa12:	e019      	b.n	800aa48 <_malloc_r+0xb0>
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	dac9      	bge.n	800a9ac <_malloc_r+0x14>
 800aa18:	230c      	movs	r3, #12
 800aa1a:	602b      	str	r3, [r5, #0]
 800aa1c:	2000      	movs	r0, #0
 800aa1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aa20:	6821      	ldr	r1, [r4, #0]
 800aa22:	1bc9      	subs	r1, r1, r7
 800aa24:	d420      	bmi.n	800aa68 <_malloc_r+0xd0>
 800aa26:	290b      	cmp	r1, #11
 800aa28:	d90a      	bls.n	800aa40 <_malloc_r+0xa8>
 800aa2a:	19e2      	adds	r2, r4, r7
 800aa2c:	6027      	str	r7, [r4, #0]
 800aa2e:	42a3      	cmp	r3, r4
 800aa30:	d104      	bne.n	800aa3c <_malloc_r+0xa4>
 800aa32:	6032      	str	r2, [r6, #0]
 800aa34:	6863      	ldr	r3, [r4, #4]
 800aa36:	6011      	str	r1, [r2, #0]
 800aa38:	6053      	str	r3, [r2, #4]
 800aa3a:	e005      	b.n	800aa48 <_malloc_r+0xb0>
 800aa3c:	605a      	str	r2, [r3, #4]
 800aa3e:	e7f9      	b.n	800aa34 <_malloc_r+0x9c>
 800aa40:	6862      	ldr	r2, [r4, #4]
 800aa42:	42a3      	cmp	r3, r4
 800aa44:	d10e      	bne.n	800aa64 <_malloc_r+0xcc>
 800aa46:	6032      	str	r2, [r6, #0]
 800aa48:	0028      	movs	r0, r5
 800aa4a:	f000 f82d 	bl	800aaa8 <__malloc_unlock>
 800aa4e:	0020      	movs	r0, r4
 800aa50:	2207      	movs	r2, #7
 800aa52:	300b      	adds	r0, #11
 800aa54:	1d23      	adds	r3, r4, #4
 800aa56:	4390      	bics	r0, r2
 800aa58:	1ac2      	subs	r2, r0, r3
 800aa5a:	4298      	cmp	r0, r3
 800aa5c:	d0df      	beq.n	800aa1e <_malloc_r+0x86>
 800aa5e:	1a1b      	subs	r3, r3, r0
 800aa60:	50a3      	str	r3, [r4, r2]
 800aa62:	e7dc      	b.n	800aa1e <_malloc_r+0x86>
 800aa64:	605a      	str	r2, [r3, #4]
 800aa66:	e7ef      	b.n	800aa48 <_malloc_r+0xb0>
 800aa68:	0023      	movs	r3, r4
 800aa6a:	6864      	ldr	r4, [r4, #4]
 800aa6c:	e7a6      	b.n	800a9bc <_malloc_r+0x24>
 800aa6e:	9c00      	ldr	r4, [sp, #0]
 800aa70:	6863      	ldr	r3, [r4, #4]
 800aa72:	9300      	str	r3, [sp, #0]
 800aa74:	e7ad      	b.n	800a9d2 <_malloc_r+0x3a>
 800aa76:	001a      	movs	r2, r3
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	42a3      	cmp	r3, r4
 800aa7c:	d1fb      	bne.n	800aa76 <_malloc_r+0xde>
 800aa7e:	2300      	movs	r3, #0
 800aa80:	e7da      	b.n	800aa38 <_malloc_r+0xa0>
 800aa82:	230c      	movs	r3, #12
 800aa84:	0028      	movs	r0, r5
 800aa86:	602b      	str	r3, [r5, #0]
 800aa88:	f000 f80e 	bl	800aaa8 <__malloc_unlock>
 800aa8c:	e7c6      	b.n	800aa1c <_malloc_r+0x84>
 800aa8e:	6007      	str	r7, [r0, #0]
 800aa90:	e7da      	b.n	800aa48 <_malloc_r+0xb0>
 800aa92:	46c0      	nop			@ (mov r8, r8)
 800aa94:	20000e58 	.word	0x20000e58

0800aa98 <__malloc_lock>:
 800aa98:	b510      	push	{r4, lr}
 800aa9a:	4802      	ldr	r0, [pc, #8]	@ (800aaa4 <__malloc_lock+0xc>)
 800aa9c:	f7ff f877 	bl	8009b8e <__retarget_lock_acquire_recursive>
 800aaa0:	bd10      	pop	{r4, pc}
 800aaa2:	46c0      	nop			@ (mov r8, r8)
 800aaa4:	20000e50 	.word	0x20000e50

0800aaa8 <__malloc_unlock>:
 800aaa8:	b510      	push	{r4, lr}
 800aaaa:	4802      	ldr	r0, [pc, #8]	@ (800aab4 <__malloc_unlock+0xc>)
 800aaac:	f7ff f870 	bl	8009b90 <__retarget_lock_release_recursive>
 800aab0:	bd10      	pop	{r4, pc}
 800aab2:	46c0      	nop			@ (mov r8, r8)
 800aab4:	20000e50 	.word	0x20000e50

0800aab8 <_Balloc>:
 800aab8:	b570      	push	{r4, r5, r6, lr}
 800aaba:	69c5      	ldr	r5, [r0, #28]
 800aabc:	0006      	movs	r6, r0
 800aabe:	000c      	movs	r4, r1
 800aac0:	2d00      	cmp	r5, #0
 800aac2:	d10e      	bne.n	800aae2 <_Balloc+0x2a>
 800aac4:	2010      	movs	r0, #16
 800aac6:	f7ff ff3b 	bl	800a940 <malloc>
 800aaca:	1e02      	subs	r2, r0, #0
 800aacc:	61f0      	str	r0, [r6, #28]
 800aace:	d104      	bne.n	800aada <_Balloc+0x22>
 800aad0:	216b      	movs	r1, #107	@ 0x6b
 800aad2:	4b19      	ldr	r3, [pc, #100]	@ (800ab38 <_Balloc+0x80>)
 800aad4:	4819      	ldr	r0, [pc, #100]	@ (800ab3c <_Balloc+0x84>)
 800aad6:	f000 ffb7 	bl	800ba48 <__assert_func>
 800aada:	6045      	str	r5, [r0, #4]
 800aadc:	6085      	str	r5, [r0, #8]
 800aade:	6005      	str	r5, [r0, #0]
 800aae0:	60c5      	str	r5, [r0, #12]
 800aae2:	69f5      	ldr	r5, [r6, #28]
 800aae4:	68eb      	ldr	r3, [r5, #12]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d013      	beq.n	800ab12 <_Balloc+0x5a>
 800aaea:	69f3      	ldr	r3, [r6, #28]
 800aaec:	00a2      	lsls	r2, r4, #2
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	189b      	adds	r3, r3, r2
 800aaf2:	6818      	ldr	r0, [r3, #0]
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d118      	bne.n	800ab2a <_Balloc+0x72>
 800aaf8:	2101      	movs	r1, #1
 800aafa:	000d      	movs	r5, r1
 800aafc:	40a5      	lsls	r5, r4
 800aafe:	1d6a      	adds	r2, r5, #5
 800ab00:	0030      	movs	r0, r6
 800ab02:	0092      	lsls	r2, r2, #2
 800ab04:	f000 ffbe 	bl	800ba84 <_calloc_r>
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	d00c      	beq.n	800ab26 <_Balloc+0x6e>
 800ab0c:	6044      	str	r4, [r0, #4]
 800ab0e:	6085      	str	r5, [r0, #8]
 800ab10:	e00d      	b.n	800ab2e <_Balloc+0x76>
 800ab12:	2221      	movs	r2, #33	@ 0x21
 800ab14:	2104      	movs	r1, #4
 800ab16:	0030      	movs	r0, r6
 800ab18:	f000 ffb4 	bl	800ba84 <_calloc_r>
 800ab1c:	69f3      	ldr	r3, [r6, #28]
 800ab1e:	60e8      	str	r0, [r5, #12]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1e1      	bne.n	800aaea <_Balloc+0x32>
 800ab26:	2000      	movs	r0, #0
 800ab28:	bd70      	pop	{r4, r5, r6, pc}
 800ab2a:	6802      	ldr	r2, [r0, #0]
 800ab2c:	601a      	str	r2, [r3, #0]
 800ab2e:	2300      	movs	r3, #0
 800ab30:	6103      	str	r3, [r0, #16]
 800ab32:	60c3      	str	r3, [r0, #12]
 800ab34:	e7f8      	b.n	800ab28 <_Balloc+0x70>
 800ab36:	46c0      	nop			@ (mov r8, r8)
 800ab38:	0800c1e1 	.word	0x0800c1e1
 800ab3c:	0800c261 	.word	0x0800c261

0800ab40 <_Bfree>:
 800ab40:	b570      	push	{r4, r5, r6, lr}
 800ab42:	69c6      	ldr	r6, [r0, #28]
 800ab44:	0005      	movs	r5, r0
 800ab46:	000c      	movs	r4, r1
 800ab48:	2e00      	cmp	r6, #0
 800ab4a:	d10e      	bne.n	800ab6a <_Bfree+0x2a>
 800ab4c:	2010      	movs	r0, #16
 800ab4e:	f7ff fef7 	bl	800a940 <malloc>
 800ab52:	1e02      	subs	r2, r0, #0
 800ab54:	61e8      	str	r0, [r5, #28]
 800ab56:	d104      	bne.n	800ab62 <_Bfree+0x22>
 800ab58:	218f      	movs	r1, #143	@ 0x8f
 800ab5a:	4b09      	ldr	r3, [pc, #36]	@ (800ab80 <_Bfree+0x40>)
 800ab5c:	4809      	ldr	r0, [pc, #36]	@ (800ab84 <_Bfree+0x44>)
 800ab5e:	f000 ff73 	bl	800ba48 <__assert_func>
 800ab62:	6046      	str	r6, [r0, #4]
 800ab64:	6086      	str	r6, [r0, #8]
 800ab66:	6006      	str	r6, [r0, #0]
 800ab68:	60c6      	str	r6, [r0, #12]
 800ab6a:	2c00      	cmp	r4, #0
 800ab6c:	d007      	beq.n	800ab7e <_Bfree+0x3e>
 800ab6e:	69eb      	ldr	r3, [r5, #28]
 800ab70:	6862      	ldr	r2, [r4, #4]
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	0092      	lsls	r2, r2, #2
 800ab76:	189b      	adds	r3, r3, r2
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	6022      	str	r2, [r4, #0]
 800ab7c:	601c      	str	r4, [r3, #0]
 800ab7e:	bd70      	pop	{r4, r5, r6, pc}
 800ab80:	0800c1e1 	.word	0x0800c1e1
 800ab84:	0800c261 	.word	0x0800c261

0800ab88 <__multadd>:
 800ab88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab8a:	000f      	movs	r7, r1
 800ab8c:	9001      	str	r0, [sp, #4]
 800ab8e:	000c      	movs	r4, r1
 800ab90:	001e      	movs	r6, r3
 800ab92:	2000      	movs	r0, #0
 800ab94:	690d      	ldr	r5, [r1, #16]
 800ab96:	3714      	adds	r7, #20
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	3001      	adds	r0, #1
 800ab9c:	b299      	uxth	r1, r3
 800ab9e:	4351      	muls	r1, r2
 800aba0:	0c1b      	lsrs	r3, r3, #16
 800aba2:	4353      	muls	r3, r2
 800aba4:	1989      	adds	r1, r1, r6
 800aba6:	0c0e      	lsrs	r6, r1, #16
 800aba8:	199b      	adds	r3, r3, r6
 800abaa:	0c1e      	lsrs	r6, r3, #16
 800abac:	b289      	uxth	r1, r1
 800abae:	041b      	lsls	r3, r3, #16
 800abb0:	185b      	adds	r3, r3, r1
 800abb2:	c708      	stmia	r7!, {r3}
 800abb4:	4285      	cmp	r5, r0
 800abb6:	dcef      	bgt.n	800ab98 <__multadd+0x10>
 800abb8:	2e00      	cmp	r6, #0
 800abba:	d022      	beq.n	800ac02 <__multadd+0x7a>
 800abbc:	68a3      	ldr	r3, [r4, #8]
 800abbe:	42ab      	cmp	r3, r5
 800abc0:	dc19      	bgt.n	800abf6 <__multadd+0x6e>
 800abc2:	6861      	ldr	r1, [r4, #4]
 800abc4:	9801      	ldr	r0, [sp, #4]
 800abc6:	3101      	adds	r1, #1
 800abc8:	f7ff ff76 	bl	800aab8 <_Balloc>
 800abcc:	1e07      	subs	r7, r0, #0
 800abce:	d105      	bne.n	800abdc <__multadd+0x54>
 800abd0:	003a      	movs	r2, r7
 800abd2:	21ba      	movs	r1, #186	@ 0xba
 800abd4:	4b0c      	ldr	r3, [pc, #48]	@ (800ac08 <__multadd+0x80>)
 800abd6:	480d      	ldr	r0, [pc, #52]	@ (800ac0c <__multadd+0x84>)
 800abd8:	f000 ff36 	bl	800ba48 <__assert_func>
 800abdc:	0021      	movs	r1, r4
 800abde:	6922      	ldr	r2, [r4, #16]
 800abe0:	310c      	adds	r1, #12
 800abe2:	3202      	adds	r2, #2
 800abe4:	0092      	lsls	r2, r2, #2
 800abe6:	300c      	adds	r0, #12
 800abe8:	f000 ff24 	bl	800ba34 <memcpy>
 800abec:	0021      	movs	r1, r4
 800abee:	9801      	ldr	r0, [sp, #4]
 800abf0:	f7ff ffa6 	bl	800ab40 <_Bfree>
 800abf4:	003c      	movs	r4, r7
 800abf6:	1d2b      	adds	r3, r5, #4
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	18e3      	adds	r3, r4, r3
 800abfc:	3501      	adds	r5, #1
 800abfe:	605e      	str	r6, [r3, #4]
 800ac00:	6125      	str	r5, [r4, #16]
 800ac02:	0020      	movs	r0, r4
 800ac04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac06:	46c0      	nop			@ (mov r8, r8)
 800ac08:	0800c250 	.word	0x0800c250
 800ac0c:	0800c261 	.word	0x0800c261

0800ac10 <__hi0bits>:
 800ac10:	2280      	movs	r2, #128	@ 0x80
 800ac12:	0003      	movs	r3, r0
 800ac14:	0252      	lsls	r2, r2, #9
 800ac16:	2000      	movs	r0, #0
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d201      	bcs.n	800ac20 <__hi0bits+0x10>
 800ac1c:	041b      	lsls	r3, r3, #16
 800ac1e:	3010      	adds	r0, #16
 800ac20:	2280      	movs	r2, #128	@ 0x80
 800ac22:	0452      	lsls	r2, r2, #17
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d201      	bcs.n	800ac2c <__hi0bits+0x1c>
 800ac28:	3008      	adds	r0, #8
 800ac2a:	021b      	lsls	r3, r3, #8
 800ac2c:	2280      	movs	r2, #128	@ 0x80
 800ac2e:	0552      	lsls	r2, r2, #21
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d201      	bcs.n	800ac38 <__hi0bits+0x28>
 800ac34:	3004      	adds	r0, #4
 800ac36:	011b      	lsls	r3, r3, #4
 800ac38:	2280      	movs	r2, #128	@ 0x80
 800ac3a:	05d2      	lsls	r2, r2, #23
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d201      	bcs.n	800ac44 <__hi0bits+0x34>
 800ac40:	3002      	adds	r0, #2
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	db03      	blt.n	800ac50 <__hi0bits+0x40>
 800ac48:	3001      	adds	r0, #1
 800ac4a:	4213      	tst	r3, r2
 800ac4c:	d100      	bne.n	800ac50 <__hi0bits+0x40>
 800ac4e:	2020      	movs	r0, #32
 800ac50:	4770      	bx	lr

0800ac52 <__lo0bits>:
 800ac52:	6803      	ldr	r3, [r0, #0]
 800ac54:	0001      	movs	r1, r0
 800ac56:	2207      	movs	r2, #7
 800ac58:	0018      	movs	r0, r3
 800ac5a:	4010      	ands	r0, r2
 800ac5c:	4213      	tst	r3, r2
 800ac5e:	d00d      	beq.n	800ac7c <__lo0bits+0x2a>
 800ac60:	3a06      	subs	r2, #6
 800ac62:	2000      	movs	r0, #0
 800ac64:	4213      	tst	r3, r2
 800ac66:	d105      	bne.n	800ac74 <__lo0bits+0x22>
 800ac68:	3002      	adds	r0, #2
 800ac6a:	4203      	tst	r3, r0
 800ac6c:	d003      	beq.n	800ac76 <__lo0bits+0x24>
 800ac6e:	40d3      	lsrs	r3, r2
 800ac70:	0010      	movs	r0, r2
 800ac72:	600b      	str	r3, [r1, #0]
 800ac74:	4770      	bx	lr
 800ac76:	089b      	lsrs	r3, r3, #2
 800ac78:	600b      	str	r3, [r1, #0]
 800ac7a:	e7fb      	b.n	800ac74 <__lo0bits+0x22>
 800ac7c:	b29a      	uxth	r2, r3
 800ac7e:	2a00      	cmp	r2, #0
 800ac80:	d101      	bne.n	800ac86 <__lo0bits+0x34>
 800ac82:	2010      	movs	r0, #16
 800ac84:	0c1b      	lsrs	r3, r3, #16
 800ac86:	b2da      	uxtb	r2, r3
 800ac88:	2a00      	cmp	r2, #0
 800ac8a:	d101      	bne.n	800ac90 <__lo0bits+0x3e>
 800ac8c:	3008      	adds	r0, #8
 800ac8e:	0a1b      	lsrs	r3, r3, #8
 800ac90:	071a      	lsls	r2, r3, #28
 800ac92:	d101      	bne.n	800ac98 <__lo0bits+0x46>
 800ac94:	3004      	adds	r0, #4
 800ac96:	091b      	lsrs	r3, r3, #4
 800ac98:	079a      	lsls	r2, r3, #30
 800ac9a:	d101      	bne.n	800aca0 <__lo0bits+0x4e>
 800ac9c:	3002      	adds	r0, #2
 800ac9e:	089b      	lsrs	r3, r3, #2
 800aca0:	07da      	lsls	r2, r3, #31
 800aca2:	d4e9      	bmi.n	800ac78 <__lo0bits+0x26>
 800aca4:	3001      	adds	r0, #1
 800aca6:	085b      	lsrs	r3, r3, #1
 800aca8:	d1e6      	bne.n	800ac78 <__lo0bits+0x26>
 800acaa:	2020      	movs	r0, #32
 800acac:	e7e2      	b.n	800ac74 <__lo0bits+0x22>
	...

0800acb0 <__i2b>:
 800acb0:	b510      	push	{r4, lr}
 800acb2:	000c      	movs	r4, r1
 800acb4:	2101      	movs	r1, #1
 800acb6:	f7ff feff 	bl	800aab8 <_Balloc>
 800acba:	2800      	cmp	r0, #0
 800acbc:	d107      	bne.n	800acce <__i2b+0x1e>
 800acbe:	2146      	movs	r1, #70	@ 0x46
 800acc0:	4c05      	ldr	r4, [pc, #20]	@ (800acd8 <__i2b+0x28>)
 800acc2:	0002      	movs	r2, r0
 800acc4:	4b05      	ldr	r3, [pc, #20]	@ (800acdc <__i2b+0x2c>)
 800acc6:	0020      	movs	r0, r4
 800acc8:	31ff      	adds	r1, #255	@ 0xff
 800acca:	f000 febd 	bl	800ba48 <__assert_func>
 800acce:	2301      	movs	r3, #1
 800acd0:	6144      	str	r4, [r0, #20]
 800acd2:	6103      	str	r3, [r0, #16]
 800acd4:	bd10      	pop	{r4, pc}
 800acd6:	46c0      	nop			@ (mov r8, r8)
 800acd8:	0800c261 	.word	0x0800c261
 800acdc:	0800c250 	.word	0x0800c250

0800ace0 <__multiply>:
 800ace0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ace2:	0014      	movs	r4, r2
 800ace4:	690a      	ldr	r2, [r1, #16]
 800ace6:	6923      	ldr	r3, [r4, #16]
 800ace8:	000d      	movs	r5, r1
 800acea:	b08b      	sub	sp, #44	@ 0x2c
 800acec:	429a      	cmp	r2, r3
 800acee:	db02      	blt.n	800acf6 <__multiply+0x16>
 800acf0:	0023      	movs	r3, r4
 800acf2:	000c      	movs	r4, r1
 800acf4:	001d      	movs	r5, r3
 800acf6:	6927      	ldr	r7, [r4, #16]
 800acf8:	692e      	ldr	r6, [r5, #16]
 800acfa:	6861      	ldr	r1, [r4, #4]
 800acfc:	19bb      	adds	r3, r7, r6
 800acfe:	9303      	str	r3, [sp, #12]
 800ad00:	68a3      	ldr	r3, [r4, #8]
 800ad02:	19ba      	adds	r2, r7, r6
 800ad04:	4293      	cmp	r3, r2
 800ad06:	da00      	bge.n	800ad0a <__multiply+0x2a>
 800ad08:	3101      	adds	r1, #1
 800ad0a:	f7ff fed5 	bl	800aab8 <_Balloc>
 800ad0e:	9002      	str	r0, [sp, #8]
 800ad10:	2800      	cmp	r0, #0
 800ad12:	d106      	bne.n	800ad22 <__multiply+0x42>
 800ad14:	21b1      	movs	r1, #177	@ 0xb1
 800ad16:	4b49      	ldr	r3, [pc, #292]	@ (800ae3c <__multiply+0x15c>)
 800ad18:	4849      	ldr	r0, [pc, #292]	@ (800ae40 <__multiply+0x160>)
 800ad1a:	9a02      	ldr	r2, [sp, #8]
 800ad1c:	0049      	lsls	r1, r1, #1
 800ad1e:	f000 fe93 	bl	800ba48 <__assert_func>
 800ad22:	9b02      	ldr	r3, [sp, #8]
 800ad24:	2200      	movs	r2, #0
 800ad26:	3314      	adds	r3, #20
 800ad28:	469c      	mov	ip, r3
 800ad2a:	19bb      	adds	r3, r7, r6
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	4463      	add	r3, ip
 800ad30:	9304      	str	r3, [sp, #16]
 800ad32:	4663      	mov	r3, ip
 800ad34:	9904      	ldr	r1, [sp, #16]
 800ad36:	428b      	cmp	r3, r1
 800ad38:	d32a      	bcc.n	800ad90 <__multiply+0xb0>
 800ad3a:	0023      	movs	r3, r4
 800ad3c:	00bf      	lsls	r7, r7, #2
 800ad3e:	3314      	adds	r3, #20
 800ad40:	3514      	adds	r5, #20
 800ad42:	9308      	str	r3, [sp, #32]
 800ad44:	00b6      	lsls	r6, r6, #2
 800ad46:	19db      	adds	r3, r3, r7
 800ad48:	9305      	str	r3, [sp, #20]
 800ad4a:	19ab      	adds	r3, r5, r6
 800ad4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad4e:	2304      	movs	r3, #4
 800ad50:	9306      	str	r3, [sp, #24]
 800ad52:	0023      	movs	r3, r4
 800ad54:	9a05      	ldr	r2, [sp, #20]
 800ad56:	3315      	adds	r3, #21
 800ad58:	9501      	str	r5, [sp, #4]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d305      	bcc.n	800ad6a <__multiply+0x8a>
 800ad5e:	1b13      	subs	r3, r2, r4
 800ad60:	3b15      	subs	r3, #21
 800ad62:	089b      	lsrs	r3, r3, #2
 800ad64:	3301      	adds	r3, #1
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	9306      	str	r3, [sp, #24]
 800ad6a:	9b01      	ldr	r3, [sp, #4]
 800ad6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d310      	bcc.n	800ad94 <__multiply+0xb4>
 800ad72:	9b03      	ldr	r3, [sp, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	dd05      	ble.n	800ad84 <__multiply+0xa4>
 800ad78:	9b04      	ldr	r3, [sp, #16]
 800ad7a:	3b04      	subs	r3, #4
 800ad7c:	9304      	str	r3, [sp, #16]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d056      	beq.n	800ae32 <__multiply+0x152>
 800ad84:	9b02      	ldr	r3, [sp, #8]
 800ad86:	9a03      	ldr	r2, [sp, #12]
 800ad88:	0018      	movs	r0, r3
 800ad8a:	611a      	str	r2, [r3, #16]
 800ad8c:	b00b      	add	sp, #44	@ 0x2c
 800ad8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad90:	c304      	stmia	r3!, {r2}
 800ad92:	e7cf      	b.n	800ad34 <__multiply+0x54>
 800ad94:	9b01      	ldr	r3, [sp, #4]
 800ad96:	6818      	ldr	r0, [r3, #0]
 800ad98:	b280      	uxth	r0, r0
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	d01e      	beq.n	800addc <__multiply+0xfc>
 800ad9e:	4667      	mov	r7, ip
 800ada0:	2500      	movs	r5, #0
 800ada2:	9e08      	ldr	r6, [sp, #32]
 800ada4:	ce02      	ldmia	r6!, {r1}
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	9307      	str	r3, [sp, #28]
 800adaa:	b28b      	uxth	r3, r1
 800adac:	4343      	muls	r3, r0
 800adae:	001a      	movs	r2, r3
 800adb0:	466b      	mov	r3, sp
 800adb2:	0c09      	lsrs	r1, r1, #16
 800adb4:	8b9b      	ldrh	r3, [r3, #28]
 800adb6:	4341      	muls	r1, r0
 800adb8:	18d3      	adds	r3, r2, r3
 800adba:	9a07      	ldr	r2, [sp, #28]
 800adbc:	195b      	adds	r3, r3, r5
 800adbe:	0c12      	lsrs	r2, r2, #16
 800adc0:	1889      	adds	r1, r1, r2
 800adc2:	0c1a      	lsrs	r2, r3, #16
 800adc4:	188a      	adds	r2, r1, r2
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	0c15      	lsrs	r5, r2, #16
 800adca:	0412      	lsls	r2, r2, #16
 800adcc:	431a      	orrs	r2, r3
 800adce:	9b05      	ldr	r3, [sp, #20]
 800add0:	c704      	stmia	r7!, {r2}
 800add2:	42b3      	cmp	r3, r6
 800add4:	d8e6      	bhi.n	800ada4 <__multiply+0xc4>
 800add6:	4663      	mov	r3, ip
 800add8:	9a06      	ldr	r2, [sp, #24]
 800adda:	509d      	str	r5, [r3, r2]
 800addc:	9b01      	ldr	r3, [sp, #4]
 800adde:	6818      	ldr	r0, [r3, #0]
 800ade0:	0c00      	lsrs	r0, r0, #16
 800ade2:	d020      	beq.n	800ae26 <__multiply+0x146>
 800ade4:	4663      	mov	r3, ip
 800ade6:	0025      	movs	r5, r4
 800ade8:	4661      	mov	r1, ip
 800adea:	2700      	movs	r7, #0
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	3514      	adds	r5, #20
 800adf0:	682a      	ldr	r2, [r5, #0]
 800adf2:	680e      	ldr	r6, [r1, #0]
 800adf4:	b292      	uxth	r2, r2
 800adf6:	4342      	muls	r2, r0
 800adf8:	0c36      	lsrs	r6, r6, #16
 800adfa:	1992      	adds	r2, r2, r6
 800adfc:	19d2      	adds	r2, r2, r7
 800adfe:	0416      	lsls	r6, r2, #16
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	431e      	orrs	r6, r3
 800ae04:	600e      	str	r6, [r1, #0]
 800ae06:	cd40      	ldmia	r5!, {r6}
 800ae08:	684b      	ldr	r3, [r1, #4]
 800ae0a:	0c36      	lsrs	r6, r6, #16
 800ae0c:	4346      	muls	r6, r0
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	0c12      	lsrs	r2, r2, #16
 800ae12:	18f3      	adds	r3, r6, r3
 800ae14:	189b      	adds	r3, r3, r2
 800ae16:	9a05      	ldr	r2, [sp, #20]
 800ae18:	0c1f      	lsrs	r7, r3, #16
 800ae1a:	3104      	adds	r1, #4
 800ae1c:	42aa      	cmp	r2, r5
 800ae1e:	d8e7      	bhi.n	800adf0 <__multiply+0x110>
 800ae20:	4662      	mov	r2, ip
 800ae22:	9906      	ldr	r1, [sp, #24]
 800ae24:	5053      	str	r3, [r2, r1]
 800ae26:	9b01      	ldr	r3, [sp, #4]
 800ae28:	3304      	adds	r3, #4
 800ae2a:	9301      	str	r3, [sp, #4]
 800ae2c:	2304      	movs	r3, #4
 800ae2e:	449c      	add	ip, r3
 800ae30:	e79b      	b.n	800ad6a <__multiply+0x8a>
 800ae32:	9b03      	ldr	r3, [sp, #12]
 800ae34:	3b01      	subs	r3, #1
 800ae36:	9303      	str	r3, [sp, #12]
 800ae38:	e79b      	b.n	800ad72 <__multiply+0x92>
 800ae3a:	46c0      	nop			@ (mov r8, r8)
 800ae3c:	0800c250 	.word	0x0800c250
 800ae40:	0800c261 	.word	0x0800c261

0800ae44 <__pow5mult>:
 800ae44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae46:	2303      	movs	r3, #3
 800ae48:	0015      	movs	r5, r2
 800ae4a:	0007      	movs	r7, r0
 800ae4c:	000e      	movs	r6, r1
 800ae4e:	401a      	ands	r2, r3
 800ae50:	421d      	tst	r5, r3
 800ae52:	d008      	beq.n	800ae66 <__pow5mult+0x22>
 800ae54:	4925      	ldr	r1, [pc, #148]	@ (800aeec <__pow5mult+0xa8>)
 800ae56:	3a01      	subs	r2, #1
 800ae58:	0092      	lsls	r2, r2, #2
 800ae5a:	5852      	ldr	r2, [r2, r1]
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	0031      	movs	r1, r6
 800ae60:	f7ff fe92 	bl	800ab88 <__multadd>
 800ae64:	0006      	movs	r6, r0
 800ae66:	10ad      	asrs	r5, r5, #2
 800ae68:	d03d      	beq.n	800aee6 <__pow5mult+0xa2>
 800ae6a:	69fc      	ldr	r4, [r7, #28]
 800ae6c:	2c00      	cmp	r4, #0
 800ae6e:	d10f      	bne.n	800ae90 <__pow5mult+0x4c>
 800ae70:	2010      	movs	r0, #16
 800ae72:	f7ff fd65 	bl	800a940 <malloc>
 800ae76:	1e02      	subs	r2, r0, #0
 800ae78:	61f8      	str	r0, [r7, #28]
 800ae7a:	d105      	bne.n	800ae88 <__pow5mult+0x44>
 800ae7c:	21b4      	movs	r1, #180	@ 0xb4
 800ae7e:	4b1c      	ldr	r3, [pc, #112]	@ (800aef0 <__pow5mult+0xac>)
 800ae80:	481c      	ldr	r0, [pc, #112]	@ (800aef4 <__pow5mult+0xb0>)
 800ae82:	31ff      	adds	r1, #255	@ 0xff
 800ae84:	f000 fde0 	bl	800ba48 <__assert_func>
 800ae88:	6044      	str	r4, [r0, #4]
 800ae8a:	6084      	str	r4, [r0, #8]
 800ae8c:	6004      	str	r4, [r0, #0]
 800ae8e:	60c4      	str	r4, [r0, #12]
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	689c      	ldr	r4, [r3, #8]
 800ae94:	9301      	str	r3, [sp, #4]
 800ae96:	2c00      	cmp	r4, #0
 800ae98:	d108      	bne.n	800aeac <__pow5mult+0x68>
 800ae9a:	0038      	movs	r0, r7
 800ae9c:	4916      	ldr	r1, [pc, #88]	@ (800aef8 <__pow5mult+0xb4>)
 800ae9e:	f7ff ff07 	bl	800acb0 <__i2b>
 800aea2:	9b01      	ldr	r3, [sp, #4]
 800aea4:	0004      	movs	r4, r0
 800aea6:	6098      	str	r0, [r3, #8]
 800aea8:	2300      	movs	r3, #0
 800aeaa:	6003      	str	r3, [r0, #0]
 800aeac:	2301      	movs	r3, #1
 800aeae:	421d      	tst	r5, r3
 800aeb0:	d00a      	beq.n	800aec8 <__pow5mult+0x84>
 800aeb2:	0031      	movs	r1, r6
 800aeb4:	0022      	movs	r2, r4
 800aeb6:	0038      	movs	r0, r7
 800aeb8:	f7ff ff12 	bl	800ace0 <__multiply>
 800aebc:	0031      	movs	r1, r6
 800aebe:	9001      	str	r0, [sp, #4]
 800aec0:	0038      	movs	r0, r7
 800aec2:	f7ff fe3d 	bl	800ab40 <_Bfree>
 800aec6:	9e01      	ldr	r6, [sp, #4]
 800aec8:	106d      	asrs	r5, r5, #1
 800aeca:	d00c      	beq.n	800aee6 <__pow5mult+0xa2>
 800aecc:	6820      	ldr	r0, [r4, #0]
 800aece:	2800      	cmp	r0, #0
 800aed0:	d107      	bne.n	800aee2 <__pow5mult+0x9e>
 800aed2:	0022      	movs	r2, r4
 800aed4:	0021      	movs	r1, r4
 800aed6:	0038      	movs	r0, r7
 800aed8:	f7ff ff02 	bl	800ace0 <__multiply>
 800aedc:	2300      	movs	r3, #0
 800aede:	6020      	str	r0, [r4, #0]
 800aee0:	6003      	str	r3, [r0, #0]
 800aee2:	0004      	movs	r4, r0
 800aee4:	e7e2      	b.n	800aeac <__pow5mult+0x68>
 800aee6:	0030      	movs	r0, r6
 800aee8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aeea:	46c0      	nop			@ (mov r8, r8)
 800aeec:	0800c2bc 	.word	0x0800c2bc
 800aef0:	0800c1e1 	.word	0x0800c1e1
 800aef4:	0800c261 	.word	0x0800c261
 800aef8:	00000271 	.word	0x00000271

0800aefc <__lshift>:
 800aefc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aefe:	000c      	movs	r4, r1
 800af00:	0016      	movs	r6, r2
 800af02:	6923      	ldr	r3, [r4, #16]
 800af04:	1157      	asrs	r7, r2, #5
 800af06:	b085      	sub	sp, #20
 800af08:	18fb      	adds	r3, r7, r3
 800af0a:	9301      	str	r3, [sp, #4]
 800af0c:	3301      	adds	r3, #1
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	6849      	ldr	r1, [r1, #4]
 800af12:	68a3      	ldr	r3, [r4, #8]
 800af14:	9002      	str	r0, [sp, #8]
 800af16:	9a00      	ldr	r2, [sp, #0]
 800af18:	4293      	cmp	r3, r2
 800af1a:	db10      	blt.n	800af3e <__lshift+0x42>
 800af1c:	9802      	ldr	r0, [sp, #8]
 800af1e:	f7ff fdcb 	bl	800aab8 <_Balloc>
 800af22:	2300      	movs	r3, #0
 800af24:	0001      	movs	r1, r0
 800af26:	0005      	movs	r5, r0
 800af28:	001a      	movs	r2, r3
 800af2a:	3114      	adds	r1, #20
 800af2c:	4298      	cmp	r0, r3
 800af2e:	d10c      	bne.n	800af4a <__lshift+0x4e>
 800af30:	21ef      	movs	r1, #239	@ 0xef
 800af32:	002a      	movs	r2, r5
 800af34:	4b25      	ldr	r3, [pc, #148]	@ (800afcc <__lshift+0xd0>)
 800af36:	4826      	ldr	r0, [pc, #152]	@ (800afd0 <__lshift+0xd4>)
 800af38:	0049      	lsls	r1, r1, #1
 800af3a:	f000 fd85 	bl	800ba48 <__assert_func>
 800af3e:	3101      	adds	r1, #1
 800af40:	005b      	lsls	r3, r3, #1
 800af42:	e7e8      	b.n	800af16 <__lshift+0x1a>
 800af44:	0098      	lsls	r0, r3, #2
 800af46:	500a      	str	r2, [r1, r0]
 800af48:	3301      	adds	r3, #1
 800af4a:	42bb      	cmp	r3, r7
 800af4c:	dbfa      	blt.n	800af44 <__lshift+0x48>
 800af4e:	43fb      	mvns	r3, r7
 800af50:	17db      	asrs	r3, r3, #31
 800af52:	401f      	ands	r7, r3
 800af54:	00bf      	lsls	r7, r7, #2
 800af56:	0023      	movs	r3, r4
 800af58:	201f      	movs	r0, #31
 800af5a:	19c9      	adds	r1, r1, r7
 800af5c:	0037      	movs	r7, r6
 800af5e:	6922      	ldr	r2, [r4, #16]
 800af60:	3314      	adds	r3, #20
 800af62:	0092      	lsls	r2, r2, #2
 800af64:	189a      	adds	r2, r3, r2
 800af66:	4007      	ands	r7, r0
 800af68:	4206      	tst	r6, r0
 800af6a:	d029      	beq.n	800afc0 <__lshift+0xc4>
 800af6c:	3001      	adds	r0, #1
 800af6e:	1bc0      	subs	r0, r0, r7
 800af70:	9003      	str	r0, [sp, #12]
 800af72:	468c      	mov	ip, r1
 800af74:	2000      	movs	r0, #0
 800af76:	681e      	ldr	r6, [r3, #0]
 800af78:	40be      	lsls	r6, r7
 800af7a:	4306      	orrs	r6, r0
 800af7c:	4660      	mov	r0, ip
 800af7e:	c040      	stmia	r0!, {r6}
 800af80:	4684      	mov	ip, r0
 800af82:	9e03      	ldr	r6, [sp, #12]
 800af84:	cb01      	ldmia	r3!, {r0}
 800af86:	40f0      	lsrs	r0, r6
 800af88:	429a      	cmp	r2, r3
 800af8a:	d8f4      	bhi.n	800af76 <__lshift+0x7a>
 800af8c:	0026      	movs	r6, r4
 800af8e:	3615      	adds	r6, #21
 800af90:	2304      	movs	r3, #4
 800af92:	42b2      	cmp	r2, r6
 800af94:	d304      	bcc.n	800afa0 <__lshift+0xa4>
 800af96:	1b13      	subs	r3, r2, r4
 800af98:	3b15      	subs	r3, #21
 800af9a:	089b      	lsrs	r3, r3, #2
 800af9c:	3301      	adds	r3, #1
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	50c8      	str	r0, [r1, r3]
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d002      	beq.n	800afac <__lshift+0xb0>
 800afa6:	9b01      	ldr	r3, [sp, #4]
 800afa8:	3302      	adds	r3, #2
 800afaa:	9300      	str	r3, [sp, #0]
 800afac:	9b00      	ldr	r3, [sp, #0]
 800afae:	9802      	ldr	r0, [sp, #8]
 800afb0:	3b01      	subs	r3, #1
 800afb2:	0021      	movs	r1, r4
 800afb4:	612b      	str	r3, [r5, #16]
 800afb6:	f7ff fdc3 	bl	800ab40 <_Bfree>
 800afba:	0028      	movs	r0, r5
 800afbc:	b005      	add	sp, #20
 800afbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afc0:	cb01      	ldmia	r3!, {r0}
 800afc2:	c101      	stmia	r1!, {r0}
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d8fb      	bhi.n	800afc0 <__lshift+0xc4>
 800afc8:	e7f0      	b.n	800afac <__lshift+0xb0>
 800afca:	46c0      	nop			@ (mov r8, r8)
 800afcc:	0800c250 	.word	0x0800c250
 800afd0:	0800c261 	.word	0x0800c261

0800afd4 <__mcmp>:
 800afd4:	b530      	push	{r4, r5, lr}
 800afd6:	690b      	ldr	r3, [r1, #16]
 800afd8:	6904      	ldr	r4, [r0, #16]
 800afda:	0002      	movs	r2, r0
 800afdc:	1ae0      	subs	r0, r4, r3
 800afde:	429c      	cmp	r4, r3
 800afe0:	d10f      	bne.n	800b002 <__mcmp+0x2e>
 800afe2:	3214      	adds	r2, #20
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	3114      	adds	r1, #20
 800afe8:	0014      	movs	r4, r2
 800afea:	18c9      	adds	r1, r1, r3
 800afec:	18d2      	adds	r2, r2, r3
 800afee:	3a04      	subs	r2, #4
 800aff0:	3904      	subs	r1, #4
 800aff2:	6815      	ldr	r5, [r2, #0]
 800aff4:	680b      	ldr	r3, [r1, #0]
 800aff6:	429d      	cmp	r5, r3
 800aff8:	d004      	beq.n	800b004 <__mcmp+0x30>
 800affa:	2001      	movs	r0, #1
 800affc:	429d      	cmp	r5, r3
 800affe:	d200      	bcs.n	800b002 <__mcmp+0x2e>
 800b000:	3802      	subs	r0, #2
 800b002:	bd30      	pop	{r4, r5, pc}
 800b004:	4294      	cmp	r4, r2
 800b006:	d3f2      	bcc.n	800afee <__mcmp+0x1a>
 800b008:	e7fb      	b.n	800b002 <__mcmp+0x2e>
	...

0800b00c <__mdiff>:
 800b00c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b00e:	000c      	movs	r4, r1
 800b010:	b087      	sub	sp, #28
 800b012:	9000      	str	r0, [sp, #0]
 800b014:	0011      	movs	r1, r2
 800b016:	0020      	movs	r0, r4
 800b018:	0017      	movs	r7, r2
 800b01a:	f7ff ffdb 	bl	800afd4 <__mcmp>
 800b01e:	1e05      	subs	r5, r0, #0
 800b020:	d110      	bne.n	800b044 <__mdiff+0x38>
 800b022:	0001      	movs	r1, r0
 800b024:	9800      	ldr	r0, [sp, #0]
 800b026:	f7ff fd47 	bl	800aab8 <_Balloc>
 800b02a:	1e02      	subs	r2, r0, #0
 800b02c:	d104      	bne.n	800b038 <__mdiff+0x2c>
 800b02e:	4b40      	ldr	r3, [pc, #256]	@ (800b130 <__mdiff+0x124>)
 800b030:	4840      	ldr	r0, [pc, #256]	@ (800b134 <__mdiff+0x128>)
 800b032:	4941      	ldr	r1, [pc, #260]	@ (800b138 <__mdiff+0x12c>)
 800b034:	f000 fd08 	bl	800ba48 <__assert_func>
 800b038:	2301      	movs	r3, #1
 800b03a:	6145      	str	r5, [r0, #20]
 800b03c:	6103      	str	r3, [r0, #16]
 800b03e:	0010      	movs	r0, r2
 800b040:	b007      	add	sp, #28
 800b042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b044:	2600      	movs	r6, #0
 800b046:	42b0      	cmp	r0, r6
 800b048:	da03      	bge.n	800b052 <__mdiff+0x46>
 800b04a:	0023      	movs	r3, r4
 800b04c:	003c      	movs	r4, r7
 800b04e:	001f      	movs	r7, r3
 800b050:	3601      	adds	r6, #1
 800b052:	6861      	ldr	r1, [r4, #4]
 800b054:	9800      	ldr	r0, [sp, #0]
 800b056:	f7ff fd2f 	bl	800aab8 <_Balloc>
 800b05a:	1e02      	subs	r2, r0, #0
 800b05c:	d103      	bne.n	800b066 <__mdiff+0x5a>
 800b05e:	4b34      	ldr	r3, [pc, #208]	@ (800b130 <__mdiff+0x124>)
 800b060:	4834      	ldr	r0, [pc, #208]	@ (800b134 <__mdiff+0x128>)
 800b062:	4936      	ldr	r1, [pc, #216]	@ (800b13c <__mdiff+0x130>)
 800b064:	e7e6      	b.n	800b034 <__mdiff+0x28>
 800b066:	6923      	ldr	r3, [r4, #16]
 800b068:	3414      	adds	r4, #20
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	18e3      	adds	r3, r4, r3
 800b070:	0021      	movs	r1, r4
 800b072:	9401      	str	r4, [sp, #4]
 800b074:	003c      	movs	r4, r7
 800b076:	9302      	str	r3, [sp, #8]
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	3414      	adds	r4, #20
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	18e3      	adds	r3, r4, r3
 800b080:	9303      	str	r3, [sp, #12]
 800b082:	0003      	movs	r3, r0
 800b084:	60c6      	str	r6, [r0, #12]
 800b086:	468c      	mov	ip, r1
 800b088:	2000      	movs	r0, #0
 800b08a:	3314      	adds	r3, #20
 800b08c:	9304      	str	r3, [sp, #16]
 800b08e:	9305      	str	r3, [sp, #20]
 800b090:	4663      	mov	r3, ip
 800b092:	cb20      	ldmia	r3!, {r5}
 800b094:	b2a9      	uxth	r1, r5
 800b096:	000e      	movs	r6, r1
 800b098:	469c      	mov	ip, r3
 800b09a:	cc08      	ldmia	r4!, {r3}
 800b09c:	0c2d      	lsrs	r5, r5, #16
 800b09e:	b299      	uxth	r1, r3
 800b0a0:	1a71      	subs	r1, r6, r1
 800b0a2:	1809      	adds	r1, r1, r0
 800b0a4:	0c1b      	lsrs	r3, r3, #16
 800b0a6:	1408      	asrs	r0, r1, #16
 800b0a8:	1aeb      	subs	r3, r5, r3
 800b0aa:	181b      	adds	r3, r3, r0
 800b0ac:	1418      	asrs	r0, r3, #16
 800b0ae:	b289      	uxth	r1, r1
 800b0b0:	041b      	lsls	r3, r3, #16
 800b0b2:	4319      	orrs	r1, r3
 800b0b4:	9b05      	ldr	r3, [sp, #20]
 800b0b6:	c302      	stmia	r3!, {r1}
 800b0b8:	9305      	str	r3, [sp, #20]
 800b0ba:	9b03      	ldr	r3, [sp, #12]
 800b0bc:	42a3      	cmp	r3, r4
 800b0be:	d8e7      	bhi.n	800b090 <__mdiff+0x84>
 800b0c0:	0039      	movs	r1, r7
 800b0c2:	9c03      	ldr	r4, [sp, #12]
 800b0c4:	3115      	adds	r1, #21
 800b0c6:	2304      	movs	r3, #4
 800b0c8:	428c      	cmp	r4, r1
 800b0ca:	d304      	bcc.n	800b0d6 <__mdiff+0xca>
 800b0cc:	1be3      	subs	r3, r4, r7
 800b0ce:	3b15      	subs	r3, #21
 800b0d0:	089b      	lsrs	r3, r3, #2
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	9901      	ldr	r1, [sp, #4]
 800b0d8:	18cd      	adds	r5, r1, r3
 800b0da:	9904      	ldr	r1, [sp, #16]
 800b0dc:	002e      	movs	r6, r5
 800b0de:	18cb      	adds	r3, r1, r3
 800b0e0:	001f      	movs	r7, r3
 800b0e2:	9902      	ldr	r1, [sp, #8]
 800b0e4:	428e      	cmp	r6, r1
 800b0e6:	d311      	bcc.n	800b10c <__mdiff+0x100>
 800b0e8:	9c02      	ldr	r4, [sp, #8]
 800b0ea:	1ee9      	subs	r1, r5, #3
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	428c      	cmp	r4, r1
 800b0f0:	d304      	bcc.n	800b0fc <__mdiff+0xf0>
 800b0f2:	0021      	movs	r1, r4
 800b0f4:	3103      	adds	r1, #3
 800b0f6:	1b49      	subs	r1, r1, r5
 800b0f8:	0889      	lsrs	r1, r1, #2
 800b0fa:	0088      	lsls	r0, r1, #2
 800b0fc:	181b      	adds	r3, r3, r0
 800b0fe:	3b04      	subs	r3, #4
 800b100:	6819      	ldr	r1, [r3, #0]
 800b102:	2900      	cmp	r1, #0
 800b104:	d010      	beq.n	800b128 <__mdiff+0x11c>
 800b106:	9b00      	ldr	r3, [sp, #0]
 800b108:	6113      	str	r3, [r2, #16]
 800b10a:	e798      	b.n	800b03e <__mdiff+0x32>
 800b10c:	4684      	mov	ip, r0
 800b10e:	ce02      	ldmia	r6!, {r1}
 800b110:	b288      	uxth	r0, r1
 800b112:	4460      	add	r0, ip
 800b114:	1400      	asrs	r0, r0, #16
 800b116:	0c0c      	lsrs	r4, r1, #16
 800b118:	1904      	adds	r4, r0, r4
 800b11a:	4461      	add	r1, ip
 800b11c:	1420      	asrs	r0, r4, #16
 800b11e:	b289      	uxth	r1, r1
 800b120:	0424      	lsls	r4, r4, #16
 800b122:	4321      	orrs	r1, r4
 800b124:	c702      	stmia	r7!, {r1}
 800b126:	e7dc      	b.n	800b0e2 <__mdiff+0xd6>
 800b128:	9900      	ldr	r1, [sp, #0]
 800b12a:	3901      	subs	r1, #1
 800b12c:	9100      	str	r1, [sp, #0]
 800b12e:	e7e6      	b.n	800b0fe <__mdiff+0xf2>
 800b130:	0800c250 	.word	0x0800c250
 800b134:	0800c261 	.word	0x0800c261
 800b138:	00000237 	.word	0x00000237
 800b13c:	00000245 	.word	0x00000245

0800b140 <__d2b>:
 800b140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b142:	2101      	movs	r1, #1
 800b144:	0016      	movs	r6, r2
 800b146:	001f      	movs	r7, r3
 800b148:	f7ff fcb6 	bl	800aab8 <_Balloc>
 800b14c:	1e04      	subs	r4, r0, #0
 800b14e:	d105      	bne.n	800b15c <__d2b+0x1c>
 800b150:	0022      	movs	r2, r4
 800b152:	4b25      	ldr	r3, [pc, #148]	@ (800b1e8 <__d2b+0xa8>)
 800b154:	4825      	ldr	r0, [pc, #148]	@ (800b1ec <__d2b+0xac>)
 800b156:	4926      	ldr	r1, [pc, #152]	@ (800b1f0 <__d2b+0xb0>)
 800b158:	f000 fc76 	bl	800ba48 <__assert_func>
 800b15c:	033b      	lsls	r3, r7, #12
 800b15e:	007d      	lsls	r5, r7, #1
 800b160:	0b1b      	lsrs	r3, r3, #12
 800b162:	0d6d      	lsrs	r5, r5, #21
 800b164:	d002      	beq.n	800b16c <__d2b+0x2c>
 800b166:	2280      	movs	r2, #128	@ 0x80
 800b168:	0352      	lsls	r2, r2, #13
 800b16a:	4313      	orrs	r3, r2
 800b16c:	9301      	str	r3, [sp, #4]
 800b16e:	2e00      	cmp	r6, #0
 800b170:	d025      	beq.n	800b1be <__d2b+0x7e>
 800b172:	4668      	mov	r0, sp
 800b174:	9600      	str	r6, [sp, #0]
 800b176:	f7ff fd6c 	bl	800ac52 <__lo0bits>
 800b17a:	9b01      	ldr	r3, [sp, #4]
 800b17c:	9900      	ldr	r1, [sp, #0]
 800b17e:	2800      	cmp	r0, #0
 800b180:	d01b      	beq.n	800b1ba <__d2b+0x7a>
 800b182:	2220      	movs	r2, #32
 800b184:	001e      	movs	r6, r3
 800b186:	1a12      	subs	r2, r2, r0
 800b188:	4096      	lsls	r6, r2
 800b18a:	0032      	movs	r2, r6
 800b18c:	40c3      	lsrs	r3, r0
 800b18e:	430a      	orrs	r2, r1
 800b190:	6162      	str	r2, [r4, #20]
 800b192:	9301      	str	r3, [sp, #4]
 800b194:	9e01      	ldr	r6, [sp, #4]
 800b196:	61a6      	str	r6, [r4, #24]
 800b198:	1e73      	subs	r3, r6, #1
 800b19a:	419e      	sbcs	r6, r3
 800b19c:	3601      	adds	r6, #1
 800b19e:	6126      	str	r6, [r4, #16]
 800b1a0:	2d00      	cmp	r5, #0
 800b1a2:	d014      	beq.n	800b1ce <__d2b+0x8e>
 800b1a4:	2635      	movs	r6, #53	@ 0x35
 800b1a6:	4b13      	ldr	r3, [pc, #76]	@ (800b1f4 <__d2b+0xb4>)
 800b1a8:	18ed      	adds	r5, r5, r3
 800b1aa:	9b08      	ldr	r3, [sp, #32]
 800b1ac:	182d      	adds	r5, r5, r0
 800b1ae:	601d      	str	r5, [r3, #0]
 800b1b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1b2:	1a36      	subs	r6, r6, r0
 800b1b4:	601e      	str	r6, [r3, #0]
 800b1b6:	0020      	movs	r0, r4
 800b1b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b1ba:	6161      	str	r1, [r4, #20]
 800b1bc:	e7ea      	b.n	800b194 <__d2b+0x54>
 800b1be:	a801      	add	r0, sp, #4
 800b1c0:	f7ff fd47 	bl	800ac52 <__lo0bits>
 800b1c4:	9b01      	ldr	r3, [sp, #4]
 800b1c6:	2601      	movs	r6, #1
 800b1c8:	6163      	str	r3, [r4, #20]
 800b1ca:	3020      	adds	r0, #32
 800b1cc:	e7e7      	b.n	800b19e <__d2b+0x5e>
 800b1ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b1f8 <__d2b+0xb8>)
 800b1d0:	18c0      	adds	r0, r0, r3
 800b1d2:	9b08      	ldr	r3, [sp, #32]
 800b1d4:	6018      	str	r0, [r3, #0]
 800b1d6:	4b09      	ldr	r3, [pc, #36]	@ (800b1fc <__d2b+0xbc>)
 800b1d8:	18f3      	adds	r3, r6, r3
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	18e3      	adds	r3, r4, r3
 800b1de:	6958      	ldr	r0, [r3, #20]
 800b1e0:	f7ff fd16 	bl	800ac10 <__hi0bits>
 800b1e4:	0176      	lsls	r6, r6, #5
 800b1e6:	e7e3      	b.n	800b1b0 <__d2b+0x70>
 800b1e8:	0800c250 	.word	0x0800c250
 800b1ec:	0800c261 	.word	0x0800c261
 800b1f0:	0000030f 	.word	0x0000030f
 800b1f4:	fffffbcd 	.word	0xfffffbcd
 800b1f8:	fffffbce 	.word	0xfffffbce
 800b1fc:	3fffffff 	.word	0x3fffffff

0800b200 <__ssputs_r>:
 800b200:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b202:	688e      	ldr	r6, [r1, #8]
 800b204:	b085      	sub	sp, #20
 800b206:	001f      	movs	r7, r3
 800b208:	000c      	movs	r4, r1
 800b20a:	680b      	ldr	r3, [r1, #0]
 800b20c:	9002      	str	r0, [sp, #8]
 800b20e:	9203      	str	r2, [sp, #12]
 800b210:	42be      	cmp	r6, r7
 800b212:	d830      	bhi.n	800b276 <__ssputs_r+0x76>
 800b214:	210c      	movs	r1, #12
 800b216:	5e62      	ldrsh	r2, [r4, r1]
 800b218:	2190      	movs	r1, #144	@ 0x90
 800b21a:	00c9      	lsls	r1, r1, #3
 800b21c:	420a      	tst	r2, r1
 800b21e:	d028      	beq.n	800b272 <__ssputs_r+0x72>
 800b220:	2003      	movs	r0, #3
 800b222:	6921      	ldr	r1, [r4, #16]
 800b224:	1a5b      	subs	r3, r3, r1
 800b226:	9301      	str	r3, [sp, #4]
 800b228:	6963      	ldr	r3, [r4, #20]
 800b22a:	4343      	muls	r3, r0
 800b22c:	9801      	ldr	r0, [sp, #4]
 800b22e:	0fdd      	lsrs	r5, r3, #31
 800b230:	18ed      	adds	r5, r5, r3
 800b232:	1c7b      	adds	r3, r7, #1
 800b234:	181b      	adds	r3, r3, r0
 800b236:	106d      	asrs	r5, r5, #1
 800b238:	42ab      	cmp	r3, r5
 800b23a:	d900      	bls.n	800b23e <__ssputs_r+0x3e>
 800b23c:	001d      	movs	r5, r3
 800b23e:	0552      	lsls	r2, r2, #21
 800b240:	d528      	bpl.n	800b294 <__ssputs_r+0x94>
 800b242:	0029      	movs	r1, r5
 800b244:	9802      	ldr	r0, [sp, #8]
 800b246:	f7ff fba7 	bl	800a998 <_malloc_r>
 800b24a:	1e06      	subs	r6, r0, #0
 800b24c:	d02c      	beq.n	800b2a8 <__ssputs_r+0xa8>
 800b24e:	9a01      	ldr	r2, [sp, #4]
 800b250:	6921      	ldr	r1, [r4, #16]
 800b252:	f000 fbef 	bl	800ba34 <memcpy>
 800b256:	89a2      	ldrh	r2, [r4, #12]
 800b258:	4b18      	ldr	r3, [pc, #96]	@ (800b2bc <__ssputs_r+0xbc>)
 800b25a:	401a      	ands	r2, r3
 800b25c:	2380      	movs	r3, #128	@ 0x80
 800b25e:	4313      	orrs	r3, r2
 800b260:	81a3      	strh	r3, [r4, #12]
 800b262:	9b01      	ldr	r3, [sp, #4]
 800b264:	6126      	str	r6, [r4, #16]
 800b266:	18f6      	adds	r6, r6, r3
 800b268:	6026      	str	r6, [r4, #0]
 800b26a:	003e      	movs	r6, r7
 800b26c:	6165      	str	r5, [r4, #20]
 800b26e:	1aed      	subs	r5, r5, r3
 800b270:	60a5      	str	r5, [r4, #8]
 800b272:	42be      	cmp	r6, r7
 800b274:	d900      	bls.n	800b278 <__ssputs_r+0x78>
 800b276:	003e      	movs	r6, r7
 800b278:	0032      	movs	r2, r6
 800b27a:	9903      	ldr	r1, [sp, #12]
 800b27c:	6820      	ldr	r0, [r4, #0]
 800b27e:	f000 fbb3 	bl	800b9e8 <memmove>
 800b282:	2000      	movs	r0, #0
 800b284:	68a3      	ldr	r3, [r4, #8]
 800b286:	1b9b      	subs	r3, r3, r6
 800b288:	60a3      	str	r3, [r4, #8]
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	199b      	adds	r3, r3, r6
 800b28e:	6023      	str	r3, [r4, #0]
 800b290:	b005      	add	sp, #20
 800b292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b294:	002a      	movs	r2, r5
 800b296:	9802      	ldr	r0, [sp, #8]
 800b298:	f000 fc33 	bl	800bb02 <_realloc_r>
 800b29c:	1e06      	subs	r6, r0, #0
 800b29e:	d1e0      	bne.n	800b262 <__ssputs_r+0x62>
 800b2a0:	6921      	ldr	r1, [r4, #16]
 800b2a2:	9802      	ldr	r0, [sp, #8]
 800b2a4:	f7ff fb02 	bl	800a8ac <_free_r>
 800b2a8:	230c      	movs	r3, #12
 800b2aa:	2001      	movs	r0, #1
 800b2ac:	9a02      	ldr	r2, [sp, #8]
 800b2ae:	4240      	negs	r0, r0
 800b2b0:	6013      	str	r3, [r2, #0]
 800b2b2:	89a2      	ldrh	r2, [r4, #12]
 800b2b4:	3334      	adds	r3, #52	@ 0x34
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	81a3      	strh	r3, [r4, #12]
 800b2ba:	e7e9      	b.n	800b290 <__ssputs_r+0x90>
 800b2bc:	fffffb7f 	.word	0xfffffb7f

0800b2c0 <_svfiprintf_r>:
 800b2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2c2:	b0a1      	sub	sp, #132	@ 0x84
 800b2c4:	9003      	str	r0, [sp, #12]
 800b2c6:	001d      	movs	r5, r3
 800b2c8:	898b      	ldrh	r3, [r1, #12]
 800b2ca:	000f      	movs	r7, r1
 800b2cc:	0016      	movs	r6, r2
 800b2ce:	061b      	lsls	r3, r3, #24
 800b2d0:	d511      	bpl.n	800b2f6 <_svfiprintf_r+0x36>
 800b2d2:	690b      	ldr	r3, [r1, #16]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d10e      	bne.n	800b2f6 <_svfiprintf_r+0x36>
 800b2d8:	2140      	movs	r1, #64	@ 0x40
 800b2da:	f7ff fb5d 	bl	800a998 <_malloc_r>
 800b2de:	6038      	str	r0, [r7, #0]
 800b2e0:	6138      	str	r0, [r7, #16]
 800b2e2:	2800      	cmp	r0, #0
 800b2e4:	d105      	bne.n	800b2f2 <_svfiprintf_r+0x32>
 800b2e6:	230c      	movs	r3, #12
 800b2e8:	9a03      	ldr	r2, [sp, #12]
 800b2ea:	6013      	str	r3, [r2, #0]
 800b2ec:	2001      	movs	r0, #1
 800b2ee:	4240      	negs	r0, r0
 800b2f0:	e0cf      	b.n	800b492 <_svfiprintf_r+0x1d2>
 800b2f2:	2340      	movs	r3, #64	@ 0x40
 800b2f4:	617b      	str	r3, [r7, #20]
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	ac08      	add	r4, sp, #32
 800b2fa:	6163      	str	r3, [r4, #20]
 800b2fc:	3320      	adds	r3, #32
 800b2fe:	7663      	strb	r3, [r4, #25]
 800b300:	3310      	adds	r3, #16
 800b302:	76a3      	strb	r3, [r4, #26]
 800b304:	9507      	str	r5, [sp, #28]
 800b306:	0035      	movs	r5, r6
 800b308:	782b      	ldrb	r3, [r5, #0]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d001      	beq.n	800b312 <_svfiprintf_r+0x52>
 800b30e:	2b25      	cmp	r3, #37	@ 0x25
 800b310:	d148      	bne.n	800b3a4 <_svfiprintf_r+0xe4>
 800b312:	1bab      	subs	r3, r5, r6
 800b314:	9305      	str	r3, [sp, #20]
 800b316:	42b5      	cmp	r5, r6
 800b318:	d00b      	beq.n	800b332 <_svfiprintf_r+0x72>
 800b31a:	0032      	movs	r2, r6
 800b31c:	0039      	movs	r1, r7
 800b31e:	9803      	ldr	r0, [sp, #12]
 800b320:	f7ff ff6e 	bl	800b200 <__ssputs_r>
 800b324:	3001      	adds	r0, #1
 800b326:	d100      	bne.n	800b32a <_svfiprintf_r+0x6a>
 800b328:	e0ae      	b.n	800b488 <_svfiprintf_r+0x1c8>
 800b32a:	6963      	ldr	r3, [r4, #20]
 800b32c:	9a05      	ldr	r2, [sp, #20]
 800b32e:	189b      	adds	r3, r3, r2
 800b330:	6163      	str	r3, [r4, #20]
 800b332:	782b      	ldrb	r3, [r5, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d100      	bne.n	800b33a <_svfiprintf_r+0x7a>
 800b338:	e0a6      	b.n	800b488 <_svfiprintf_r+0x1c8>
 800b33a:	2201      	movs	r2, #1
 800b33c:	2300      	movs	r3, #0
 800b33e:	4252      	negs	r2, r2
 800b340:	6062      	str	r2, [r4, #4]
 800b342:	a904      	add	r1, sp, #16
 800b344:	3254      	adds	r2, #84	@ 0x54
 800b346:	1852      	adds	r2, r2, r1
 800b348:	1c6e      	adds	r6, r5, #1
 800b34a:	6023      	str	r3, [r4, #0]
 800b34c:	60e3      	str	r3, [r4, #12]
 800b34e:	60a3      	str	r3, [r4, #8]
 800b350:	7013      	strb	r3, [r2, #0]
 800b352:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b354:	4b54      	ldr	r3, [pc, #336]	@ (800b4a8 <_svfiprintf_r+0x1e8>)
 800b356:	2205      	movs	r2, #5
 800b358:	0018      	movs	r0, r3
 800b35a:	7831      	ldrb	r1, [r6, #0]
 800b35c:	9305      	str	r3, [sp, #20]
 800b35e:	f7fe fc18 	bl	8009b92 <memchr>
 800b362:	1c75      	adds	r5, r6, #1
 800b364:	2800      	cmp	r0, #0
 800b366:	d11f      	bne.n	800b3a8 <_svfiprintf_r+0xe8>
 800b368:	6822      	ldr	r2, [r4, #0]
 800b36a:	06d3      	lsls	r3, r2, #27
 800b36c:	d504      	bpl.n	800b378 <_svfiprintf_r+0xb8>
 800b36e:	2353      	movs	r3, #83	@ 0x53
 800b370:	a904      	add	r1, sp, #16
 800b372:	185b      	adds	r3, r3, r1
 800b374:	2120      	movs	r1, #32
 800b376:	7019      	strb	r1, [r3, #0]
 800b378:	0713      	lsls	r3, r2, #28
 800b37a:	d504      	bpl.n	800b386 <_svfiprintf_r+0xc6>
 800b37c:	2353      	movs	r3, #83	@ 0x53
 800b37e:	a904      	add	r1, sp, #16
 800b380:	185b      	adds	r3, r3, r1
 800b382:	212b      	movs	r1, #43	@ 0x2b
 800b384:	7019      	strb	r1, [r3, #0]
 800b386:	7833      	ldrb	r3, [r6, #0]
 800b388:	2b2a      	cmp	r3, #42	@ 0x2a
 800b38a:	d016      	beq.n	800b3ba <_svfiprintf_r+0xfa>
 800b38c:	0035      	movs	r5, r6
 800b38e:	2100      	movs	r1, #0
 800b390:	200a      	movs	r0, #10
 800b392:	68e3      	ldr	r3, [r4, #12]
 800b394:	782a      	ldrb	r2, [r5, #0]
 800b396:	1c6e      	adds	r6, r5, #1
 800b398:	3a30      	subs	r2, #48	@ 0x30
 800b39a:	2a09      	cmp	r2, #9
 800b39c:	d950      	bls.n	800b440 <_svfiprintf_r+0x180>
 800b39e:	2900      	cmp	r1, #0
 800b3a0:	d111      	bne.n	800b3c6 <_svfiprintf_r+0x106>
 800b3a2:	e017      	b.n	800b3d4 <_svfiprintf_r+0x114>
 800b3a4:	3501      	adds	r5, #1
 800b3a6:	e7af      	b.n	800b308 <_svfiprintf_r+0x48>
 800b3a8:	9b05      	ldr	r3, [sp, #20]
 800b3aa:	6822      	ldr	r2, [r4, #0]
 800b3ac:	1ac0      	subs	r0, r0, r3
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	4083      	lsls	r3, r0
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	002e      	movs	r6, r5
 800b3b6:	6023      	str	r3, [r4, #0]
 800b3b8:	e7cc      	b.n	800b354 <_svfiprintf_r+0x94>
 800b3ba:	9b07      	ldr	r3, [sp, #28]
 800b3bc:	1d19      	adds	r1, r3, #4
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	9107      	str	r1, [sp, #28]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	db01      	blt.n	800b3ca <_svfiprintf_r+0x10a>
 800b3c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3c8:	e004      	b.n	800b3d4 <_svfiprintf_r+0x114>
 800b3ca:	425b      	negs	r3, r3
 800b3cc:	60e3      	str	r3, [r4, #12]
 800b3ce:	2302      	movs	r3, #2
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	6023      	str	r3, [r4, #0]
 800b3d4:	782b      	ldrb	r3, [r5, #0]
 800b3d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3d8:	d10c      	bne.n	800b3f4 <_svfiprintf_r+0x134>
 800b3da:	786b      	ldrb	r3, [r5, #1]
 800b3dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3de:	d134      	bne.n	800b44a <_svfiprintf_r+0x18a>
 800b3e0:	9b07      	ldr	r3, [sp, #28]
 800b3e2:	3502      	adds	r5, #2
 800b3e4:	1d1a      	adds	r2, r3, #4
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	9207      	str	r2, [sp, #28]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	da01      	bge.n	800b3f2 <_svfiprintf_r+0x132>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	425b      	negs	r3, r3
 800b3f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3f4:	4e2d      	ldr	r6, [pc, #180]	@ (800b4ac <_svfiprintf_r+0x1ec>)
 800b3f6:	2203      	movs	r2, #3
 800b3f8:	0030      	movs	r0, r6
 800b3fa:	7829      	ldrb	r1, [r5, #0]
 800b3fc:	f7fe fbc9 	bl	8009b92 <memchr>
 800b400:	2800      	cmp	r0, #0
 800b402:	d006      	beq.n	800b412 <_svfiprintf_r+0x152>
 800b404:	2340      	movs	r3, #64	@ 0x40
 800b406:	1b80      	subs	r0, r0, r6
 800b408:	4083      	lsls	r3, r0
 800b40a:	6822      	ldr	r2, [r4, #0]
 800b40c:	3501      	adds	r5, #1
 800b40e:	4313      	orrs	r3, r2
 800b410:	6023      	str	r3, [r4, #0]
 800b412:	7829      	ldrb	r1, [r5, #0]
 800b414:	2206      	movs	r2, #6
 800b416:	4826      	ldr	r0, [pc, #152]	@ (800b4b0 <_svfiprintf_r+0x1f0>)
 800b418:	1c6e      	adds	r6, r5, #1
 800b41a:	7621      	strb	r1, [r4, #24]
 800b41c:	f7fe fbb9 	bl	8009b92 <memchr>
 800b420:	2800      	cmp	r0, #0
 800b422:	d038      	beq.n	800b496 <_svfiprintf_r+0x1d6>
 800b424:	4b23      	ldr	r3, [pc, #140]	@ (800b4b4 <_svfiprintf_r+0x1f4>)
 800b426:	2b00      	cmp	r3, #0
 800b428:	d122      	bne.n	800b470 <_svfiprintf_r+0x1b0>
 800b42a:	2207      	movs	r2, #7
 800b42c:	9b07      	ldr	r3, [sp, #28]
 800b42e:	3307      	adds	r3, #7
 800b430:	4393      	bics	r3, r2
 800b432:	3308      	adds	r3, #8
 800b434:	9307      	str	r3, [sp, #28]
 800b436:	6963      	ldr	r3, [r4, #20]
 800b438:	9a04      	ldr	r2, [sp, #16]
 800b43a:	189b      	adds	r3, r3, r2
 800b43c:	6163      	str	r3, [r4, #20]
 800b43e:	e762      	b.n	800b306 <_svfiprintf_r+0x46>
 800b440:	4343      	muls	r3, r0
 800b442:	0035      	movs	r5, r6
 800b444:	2101      	movs	r1, #1
 800b446:	189b      	adds	r3, r3, r2
 800b448:	e7a4      	b.n	800b394 <_svfiprintf_r+0xd4>
 800b44a:	2300      	movs	r3, #0
 800b44c:	200a      	movs	r0, #10
 800b44e:	0019      	movs	r1, r3
 800b450:	3501      	adds	r5, #1
 800b452:	6063      	str	r3, [r4, #4]
 800b454:	782a      	ldrb	r2, [r5, #0]
 800b456:	1c6e      	adds	r6, r5, #1
 800b458:	3a30      	subs	r2, #48	@ 0x30
 800b45a:	2a09      	cmp	r2, #9
 800b45c:	d903      	bls.n	800b466 <_svfiprintf_r+0x1a6>
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d0c8      	beq.n	800b3f4 <_svfiprintf_r+0x134>
 800b462:	9109      	str	r1, [sp, #36]	@ 0x24
 800b464:	e7c6      	b.n	800b3f4 <_svfiprintf_r+0x134>
 800b466:	4341      	muls	r1, r0
 800b468:	0035      	movs	r5, r6
 800b46a:	2301      	movs	r3, #1
 800b46c:	1889      	adds	r1, r1, r2
 800b46e:	e7f1      	b.n	800b454 <_svfiprintf_r+0x194>
 800b470:	aa07      	add	r2, sp, #28
 800b472:	9200      	str	r2, [sp, #0]
 800b474:	0021      	movs	r1, r4
 800b476:	003a      	movs	r2, r7
 800b478:	4b0f      	ldr	r3, [pc, #60]	@ (800b4b8 <_svfiprintf_r+0x1f8>)
 800b47a:	9803      	ldr	r0, [sp, #12]
 800b47c:	f7fd fdce 	bl	800901c <_printf_float>
 800b480:	9004      	str	r0, [sp, #16]
 800b482:	9b04      	ldr	r3, [sp, #16]
 800b484:	3301      	adds	r3, #1
 800b486:	d1d6      	bne.n	800b436 <_svfiprintf_r+0x176>
 800b488:	89bb      	ldrh	r3, [r7, #12]
 800b48a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b48c:	065b      	lsls	r3, r3, #25
 800b48e:	d500      	bpl.n	800b492 <_svfiprintf_r+0x1d2>
 800b490:	e72c      	b.n	800b2ec <_svfiprintf_r+0x2c>
 800b492:	b021      	add	sp, #132	@ 0x84
 800b494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b496:	aa07      	add	r2, sp, #28
 800b498:	9200      	str	r2, [sp, #0]
 800b49a:	0021      	movs	r1, r4
 800b49c:	003a      	movs	r2, r7
 800b49e:	4b06      	ldr	r3, [pc, #24]	@ (800b4b8 <_svfiprintf_r+0x1f8>)
 800b4a0:	9803      	ldr	r0, [sp, #12]
 800b4a2:	f7fe f869 	bl	8009578 <_printf_i>
 800b4a6:	e7eb      	b.n	800b480 <_svfiprintf_r+0x1c0>
 800b4a8:	0800c3b8 	.word	0x0800c3b8
 800b4ac:	0800c3be 	.word	0x0800c3be
 800b4b0:	0800c3c2 	.word	0x0800c3c2
 800b4b4:	0800901d 	.word	0x0800901d
 800b4b8:	0800b201 	.word	0x0800b201

0800b4bc <__sfputc_r>:
 800b4bc:	6893      	ldr	r3, [r2, #8]
 800b4be:	b510      	push	{r4, lr}
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	6093      	str	r3, [r2, #8]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	da04      	bge.n	800b4d2 <__sfputc_r+0x16>
 800b4c8:	6994      	ldr	r4, [r2, #24]
 800b4ca:	42a3      	cmp	r3, r4
 800b4cc:	db07      	blt.n	800b4de <__sfputc_r+0x22>
 800b4ce:	290a      	cmp	r1, #10
 800b4d0:	d005      	beq.n	800b4de <__sfputc_r+0x22>
 800b4d2:	6813      	ldr	r3, [r2, #0]
 800b4d4:	1c58      	adds	r0, r3, #1
 800b4d6:	6010      	str	r0, [r2, #0]
 800b4d8:	7019      	strb	r1, [r3, #0]
 800b4da:	0008      	movs	r0, r1
 800b4dc:	bd10      	pop	{r4, pc}
 800b4de:	f000 f9e2 	bl	800b8a6 <__swbuf_r>
 800b4e2:	0001      	movs	r1, r0
 800b4e4:	e7f9      	b.n	800b4da <__sfputc_r+0x1e>

0800b4e6 <__sfputs_r>:
 800b4e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4e8:	0006      	movs	r6, r0
 800b4ea:	000f      	movs	r7, r1
 800b4ec:	0014      	movs	r4, r2
 800b4ee:	18d5      	adds	r5, r2, r3
 800b4f0:	42ac      	cmp	r4, r5
 800b4f2:	d101      	bne.n	800b4f8 <__sfputs_r+0x12>
 800b4f4:	2000      	movs	r0, #0
 800b4f6:	e007      	b.n	800b508 <__sfputs_r+0x22>
 800b4f8:	7821      	ldrb	r1, [r4, #0]
 800b4fa:	003a      	movs	r2, r7
 800b4fc:	0030      	movs	r0, r6
 800b4fe:	f7ff ffdd 	bl	800b4bc <__sfputc_r>
 800b502:	3401      	adds	r4, #1
 800b504:	1c43      	adds	r3, r0, #1
 800b506:	d1f3      	bne.n	800b4f0 <__sfputs_r+0xa>
 800b508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b50c <_vfiprintf_r>:
 800b50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b50e:	b0a1      	sub	sp, #132	@ 0x84
 800b510:	000f      	movs	r7, r1
 800b512:	0015      	movs	r5, r2
 800b514:	001e      	movs	r6, r3
 800b516:	9003      	str	r0, [sp, #12]
 800b518:	2800      	cmp	r0, #0
 800b51a:	d004      	beq.n	800b526 <_vfiprintf_r+0x1a>
 800b51c:	6a03      	ldr	r3, [r0, #32]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d101      	bne.n	800b526 <_vfiprintf_r+0x1a>
 800b522:	f7fe f9c7 	bl	80098b4 <__sinit>
 800b526:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b528:	07db      	lsls	r3, r3, #31
 800b52a:	d405      	bmi.n	800b538 <_vfiprintf_r+0x2c>
 800b52c:	89bb      	ldrh	r3, [r7, #12]
 800b52e:	059b      	lsls	r3, r3, #22
 800b530:	d402      	bmi.n	800b538 <_vfiprintf_r+0x2c>
 800b532:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b534:	f7fe fb2b 	bl	8009b8e <__retarget_lock_acquire_recursive>
 800b538:	89bb      	ldrh	r3, [r7, #12]
 800b53a:	071b      	lsls	r3, r3, #28
 800b53c:	d502      	bpl.n	800b544 <_vfiprintf_r+0x38>
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d113      	bne.n	800b56c <_vfiprintf_r+0x60>
 800b544:	0039      	movs	r1, r7
 800b546:	9803      	ldr	r0, [sp, #12]
 800b548:	f000 f9f0 	bl	800b92c <__swsetup_r>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d00d      	beq.n	800b56c <_vfiprintf_r+0x60>
 800b550:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b552:	07db      	lsls	r3, r3, #31
 800b554:	d503      	bpl.n	800b55e <_vfiprintf_r+0x52>
 800b556:	2001      	movs	r0, #1
 800b558:	4240      	negs	r0, r0
 800b55a:	b021      	add	sp, #132	@ 0x84
 800b55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b55e:	89bb      	ldrh	r3, [r7, #12]
 800b560:	059b      	lsls	r3, r3, #22
 800b562:	d4f8      	bmi.n	800b556 <_vfiprintf_r+0x4a>
 800b564:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b566:	f7fe fb13 	bl	8009b90 <__retarget_lock_release_recursive>
 800b56a:	e7f4      	b.n	800b556 <_vfiprintf_r+0x4a>
 800b56c:	2300      	movs	r3, #0
 800b56e:	ac08      	add	r4, sp, #32
 800b570:	6163      	str	r3, [r4, #20]
 800b572:	3320      	adds	r3, #32
 800b574:	7663      	strb	r3, [r4, #25]
 800b576:	3310      	adds	r3, #16
 800b578:	76a3      	strb	r3, [r4, #26]
 800b57a:	9607      	str	r6, [sp, #28]
 800b57c:	002e      	movs	r6, r5
 800b57e:	7833      	ldrb	r3, [r6, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d001      	beq.n	800b588 <_vfiprintf_r+0x7c>
 800b584:	2b25      	cmp	r3, #37	@ 0x25
 800b586:	d148      	bne.n	800b61a <_vfiprintf_r+0x10e>
 800b588:	1b73      	subs	r3, r6, r5
 800b58a:	9305      	str	r3, [sp, #20]
 800b58c:	42ae      	cmp	r6, r5
 800b58e:	d00b      	beq.n	800b5a8 <_vfiprintf_r+0x9c>
 800b590:	002a      	movs	r2, r5
 800b592:	0039      	movs	r1, r7
 800b594:	9803      	ldr	r0, [sp, #12]
 800b596:	f7ff ffa6 	bl	800b4e6 <__sfputs_r>
 800b59a:	3001      	adds	r0, #1
 800b59c:	d100      	bne.n	800b5a0 <_vfiprintf_r+0x94>
 800b59e:	e0ae      	b.n	800b6fe <_vfiprintf_r+0x1f2>
 800b5a0:	6963      	ldr	r3, [r4, #20]
 800b5a2:	9a05      	ldr	r2, [sp, #20]
 800b5a4:	189b      	adds	r3, r3, r2
 800b5a6:	6163      	str	r3, [r4, #20]
 800b5a8:	7833      	ldrb	r3, [r6, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d100      	bne.n	800b5b0 <_vfiprintf_r+0xa4>
 800b5ae:	e0a6      	b.n	800b6fe <_vfiprintf_r+0x1f2>
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	4252      	negs	r2, r2
 800b5b6:	6062      	str	r2, [r4, #4]
 800b5b8:	a904      	add	r1, sp, #16
 800b5ba:	3254      	adds	r2, #84	@ 0x54
 800b5bc:	1852      	adds	r2, r2, r1
 800b5be:	1c75      	adds	r5, r6, #1
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	60e3      	str	r3, [r4, #12]
 800b5c4:	60a3      	str	r3, [r4, #8]
 800b5c6:	7013      	strb	r3, [r2, #0]
 800b5c8:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b5ca:	4b59      	ldr	r3, [pc, #356]	@ (800b730 <_vfiprintf_r+0x224>)
 800b5cc:	2205      	movs	r2, #5
 800b5ce:	0018      	movs	r0, r3
 800b5d0:	7829      	ldrb	r1, [r5, #0]
 800b5d2:	9305      	str	r3, [sp, #20]
 800b5d4:	f7fe fadd 	bl	8009b92 <memchr>
 800b5d8:	1c6e      	adds	r6, r5, #1
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	d11f      	bne.n	800b61e <_vfiprintf_r+0x112>
 800b5de:	6822      	ldr	r2, [r4, #0]
 800b5e0:	06d3      	lsls	r3, r2, #27
 800b5e2:	d504      	bpl.n	800b5ee <_vfiprintf_r+0xe2>
 800b5e4:	2353      	movs	r3, #83	@ 0x53
 800b5e6:	a904      	add	r1, sp, #16
 800b5e8:	185b      	adds	r3, r3, r1
 800b5ea:	2120      	movs	r1, #32
 800b5ec:	7019      	strb	r1, [r3, #0]
 800b5ee:	0713      	lsls	r3, r2, #28
 800b5f0:	d504      	bpl.n	800b5fc <_vfiprintf_r+0xf0>
 800b5f2:	2353      	movs	r3, #83	@ 0x53
 800b5f4:	a904      	add	r1, sp, #16
 800b5f6:	185b      	adds	r3, r3, r1
 800b5f8:	212b      	movs	r1, #43	@ 0x2b
 800b5fa:	7019      	strb	r1, [r3, #0]
 800b5fc:	782b      	ldrb	r3, [r5, #0]
 800b5fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800b600:	d016      	beq.n	800b630 <_vfiprintf_r+0x124>
 800b602:	002e      	movs	r6, r5
 800b604:	2100      	movs	r1, #0
 800b606:	200a      	movs	r0, #10
 800b608:	68e3      	ldr	r3, [r4, #12]
 800b60a:	7832      	ldrb	r2, [r6, #0]
 800b60c:	1c75      	adds	r5, r6, #1
 800b60e:	3a30      	subs	r2, #48	@ 0x30
 800b610:	2a09      	cmp	r2, #9
 800b612:	d950      	bls.n	800b6b6 <_vfiprintf_r+0x1aa>
 800b614:	2900      	cmp	r1, #0
 800b616:	d111      	bne.n	800b63c <_vfiprintf_r+0x130>
 800b618:	e017      	b.n	800b64a <_vfiprintf_r+0x13e>
 800b61a:	3601      	adds	r6, #1
 800b61c:	e7af      	b.n	800b57e <_vfiprintf_r+0x72>
 800b61e:	9b05      	ldr	r3, [sp, #20]
 800b620:	6822      	ldr	r2, [r4, #0]
 800b622:	1ac0      	subs	r0, r0, r3
 800b624:	2301      	movs	r3, #1
 800b626:	4083      	lsls	r3, r0
 800b628:	4313      	orrs	r3, r2
 800b62a:	0035      	movs	r5, r6
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	e7cc      	b.n	800b5ca <_vfiprintf_r+0xbe>
 800b630:	9b07      	ldr	r3, [sp, #28]
 800b632:	1d19      	adds	r1, r3, #4
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	9107      	str	r1, [sp, #28]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	db01      	blt.n	800b640 <_vfiprintf_r+0x134>
 800b63c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b63e:	e004      	b.n	800b64a <_vfiprintf_r+0x13e>
 800b640:	425b      	negs	r3, r3
 800b642:	60e3      	str	r3, [r4, #12]
 800b644:	2302      	movs	r3, #2
 800b646:	4313      	orrs	r3, r2
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	7833      	ldrb	r3, [r6, #0]
 800b64c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b64e:	d10c      	bne.n	800b66a <_vfiprintf_r+0x15e>
 800b650:	7873      	ldrb	r3, [r6, #1]
 800b652:	2b2a      	cmp	r3, #42	@ 0x2a
 800b654:	d134      	bne.n	800b6c0 <_vfiprintf_r+0x1b4>
 800b656:	9b07      	ldr	r3, [sp, #28]
 800b658:	3602      	adds	r6, #2
 800b65a:	1d1a      	adds	r2, r3, #4
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	9207      	str	r2, [sp, #28]
 800b660:	2b00      	cmp	r3, #0
 800b662:	da01      	bge.n	800b668 <_vfiprintf_r+0x15c>
 800b664:	2301      	movs	r3, #1
 800b666:	425b      	negs	r3, r3
 800b668:	9309      	str	r3, [sp, #36]	@ 0x24
 800b66a:	4d32      	ldr	r5, [pc, #200]	@ (800b734 <_vfiprintf_r+0x228>)
 800b66c:	2203      	movs	r2, #3
 800b66e:	0028      	movs	r0, r5
 800b670:	7831      	ldrb	r1, [r6, #0]
 800b672:	f7fe fa8e 	bl	8009b92 <memchr>
 800b676:	2800      	cmp	r0, #0
 800b678:	d006      	beq.n	800b688 <_vfiprintf_r+0x17c>
 800b67a:	2340      	movs	r3, #64	@ 0x40
 800b67c:	1b40      	subs	r0, r0, r5
 800b67e:	4083      	lsls	r3, r0
 800b680:	6822      	ldr	r2, [r4, #0]
 800b682:	3601      	adds	r6, #1
 800b684:	4313      	orrs	r3, r2
 800b686:	6023      	str	r3, [r4, #0]
 800b688:	7831      	ldrb	r1, [r6, #0]
 800b68a:	2206      	movs	r2, #6
 800b68c:	482a      	ldr	r0, [pc, #168]	@ (800b738 <_vfiprintf_r+0x22c>)
 800b68e:	1c75      	adds	r5, r6, #1
 800b690:	7621      	strb	r1, [r4, #24]
 800b692:	f7fe fa7e 	bl	8009b92 <memchr>
 800b696:	2800      	cmp	r0, #0
 800b698:	d040      	beq.n	800b71c <_vfiprintf_r+0x210>
 800b69a:	4b28      	ldr	r3, [pc, #160]	@ (800b73c <_vfiprintf_r+0x230>)
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d122      	bne.n	800b6e6 <_vfiprintf_r+0x1da>
 800b6a0:	2207      	movs	r2, #7
 800b6a2:	9b07      	ldr	r3, [sp, #28]
 800b6a4:	3307      	adds	r3, #7
 800b6a6:	4393      	bics	r3, r2
 800b6a8:	3308      	adds	r3, #8
 800b6aa:	9307      	str	r3, [sp, #28]
 800b6ac:	6963      	ldr	r3, [r4, #20]
 800b6ae:	9a04      	ldr	r2, [sp, #16]
 800b6b0:	189b      	adds	r3, r3, r2
 800b6b2:	6163      	str	r3, [r4, #20]
 800b6b4:	e762      	b.n	800b57c <_vfiprintf_r+0x70>
 800b6b6:	4343      	muls	r3, r0
 800b6b8:	002e      	movs	r6, r5
 800b6ba:	2101      	movs	r1, #1
 800b6bc:	189b      	adds	r3, r3, r2
 800b6be:	e7a4      	b.n	800b60a <_vfiprintf_r+0xfe>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	200a      	movs	r0, #10
 800b6c4:	0019      	movs	r1, r3
 800b6c6:	3601      	adds	r6, #1
 800b6c8:	6063      	str	r3, [r4, #4]
 800b6ca:	7832      	ldrb	r2, [r6, #0]
 800b6cc:	1c75      	adds	r5, r6, #1
 800b6ce:	3a30      	subs	r2, #48	@ 0x30
 800b6d0:	2a09      	cmp	r2, #9
 800b6d2:	d903      	bls.n	800b6dc <_vfiprintf_r+0x1d0>
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d0c8      	beq.n	800b66a <_vfiprintf_r+0x15e>
 800b6d8:	9109      	str	r1, [sp, #36]	@ 0x24
 800b6da:	e7c6      	b.n	800b66a <_vfiprintf_r+0x15e>
 800b6dc:	4341      	muls	r1, r0
 800b6de:	002e      	movs	r6, r5
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	1889      	adds	r1, r1, r2
 800b6e4:	e7f1      	b.n	800b6ca <_vfiprintf_r+0x1be>
 800b6e6:	aa07      	add	r2, sp, #28
 800b6e8:	9200      	str	r2, [sp, #0]
 800b6ea:	0021      	movs	r1, r4
 800b6ec:	003a      	movs	r2, r7
 800b6ee:	4b14      	ldr	r3, [pc, #80]	@ (800b740 <_vfiprintf_r+0x234>)
 800b6f0:	9803      	ldr	r0, [sp, #12]
 800b6f2:	f7fd fc93 	bl	800901c <_printf_float>
 800b6f6:	9004      	str	r0, [sp, #16]
 800b6f8:	9b04      	ldr	r3, [sp, #16]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	d1d6      	bne.n	800b6ac <_vfiprintf_r+0x1a0>
 800b6fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b700:	07db      	lsls	r3, r3, #31
 800b702:	d405      	bmi.n	800b710 <_vfiprintf_r+0x204>
 800b704:	89bb      	ldrh	r3, [r7, #12]
 800b706:	059b      	lsls	r3, r3, #22
 800b708:	d402      	bmi.n	800b710 <_vfiprintf_r+0x204>
 800b70a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b70c:	f7fe fa40 	bl	8009b90 <__retarget_lock_release_recursive>
 800b710:	89bb      	ldrh	r3, [r7, #12]
 800b712:	065b      	lsls	r3, r3, #25
 800b714:	d500      	bpl.n	800b718 <_vfiprintf_r+0x20c>
 800b716:	e71e      	b.n	800b556 <_vfiprintf_r+0x4a>
 800b718:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b71a:	e71e      	b.n	800b55a <_vfiprintf_r+0x4e>
 800b71c:	aa07      	add	r2, sp, #28
 800b71e:	9200      	str	r2, [sp, #0]
 800b720:	0021      	movs	r1, r4
 800b722:	003a      	movs	r2, r7
 800b724:	4b06      	ldr	r3, [pc, #24]	@ (800b740 <_vfiprintf_r+0x234>)
 800b726:	9803      	ldr	r0, [sp, #12]
 800b728:	f7fd ff26 	bl	8009578 <_printf_i>
 800b72c:	e7e3      	b.n	800b6f6 <_vfiprintf_r+0x1ea>
 800b72e:	46c0      	nop			@ (mov r8, r8)
 800b730:	0800c3b8 	.word	0x0800c3b8
 800b734:	0800c3be 	.word	0x0800c3be
 800b738:	0800c3c2 	.word	0x0800c3c2
 800b73c:	0800901d 	.word	0x0800901d
 800b740:	0800b4e7 	.word	0x0800b4e7

0800b744 <__sflush_r>:
 800b744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b746:	220c      	movs	r2, #12
 800b748:	5e8b      	ldrsh	r3, [r1, r2]
 800b74a:	0005      	movs	r5, r0
 800b74c:	000c      	movs	r4, r1
 800b74e:	071a      	lsls	r2, r3, #28
 800b750:	d456      	bmi.n	800b800 <__sflush_r+0xbc>
 800b752:	684a      	ldr	r2, [r1, #4]
 800b754:	2a00      	cmp	r2, #0
 800b756:	dc02      	bgt.n	800b75e <__sflush_r+0x1a>
 800b758:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800b75a:	2a00      	cmp	r2, #0
 800b75c:	dd4e      	ble.n	800b7fc <__sflush_r+0xb8>
 800b75e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b760:	2f00      	cmp	r7, #0
 800b762:	d04b      	beq.n	800b7fc <__sflush_r+0xb8>
 800b764:	2200      	movs	r2, #0
 800b766:	2080      	movs	r0, #128	@ 0x80
 800b768:	682e      	ldr	r6, [r5, #0]
 800b76a:	602a      	str	r2, [r5, #0]
 800b76c:	001a      	movs	r2, r3
 800b76e:	0140      	lsls	r0, r0, #5
 800b770:	6a21      	ldr	r1, [r4, #32]
 800b772:	4002      	ands	r2, r0
 800b774:	4203      	tst	r3, r0
 800b776:	d033      	beq.n	800b7e0 <__sflush_r+0x9c>
 800b778:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b77a:	89a3      	ldrh	r3, [r4, #12]
 800b77c:	075b      	lsls	r3, r3, #29
 800b77e:	d506      	bpl.n	800b78e <__sflush_r+0x4a>
 800b780:	6863      	ldr	r3, [r4, #4]
 800b782:	1ad2      	subs	r2, r2, r3
 800b784:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b786:	2b00      	cmp	r3, #0
 800b788:	d001      	beq.n	800b78e <__sflush_r+0x4a>
 800b78a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b78c:	1ad2      	subs	r2, r2, r3
 800b78e:	2300      	movs	r3, #0
 800b790:	0028      	movs	r0, r5
 800b792:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b794:	6a21      	ldr	r1, [r4, #32]
 800b796:	47b8      	blx	r7
 800b798:	89a2      	ldrh	r2, [r4, #12]
 800b79a:	1c43      	adds	r3, r0, #1
 800b79c:	d106      	bne.n	800b7ac <__sflush_r+0x68>
 800b79e:	6829      	ldr	r1, [r5, #0]
 800b7a0:	291d      	cmp	r1, #29
 800b7a2:	d846      	bhi.n	800b832 <__sflush_r+0xee>
 800b7a4:	4b29      	ldr	r3, [pc, #164]	@ (800b84c <__sflush_r+0x108>)
 800b7a6:	410b      	asrs	r3, r1
 800b7a8:	07db      	lsls	r3, r3, #31
 800b7aa:	d442      	bmi.n	800b832 <__sflush_r+0xee>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	6063      	str	r3, [r4, #4]
 800b7b0:	6923      	ldr	r3, [r4, #16]
 800b7b2:	6023      	str	r3, [r4, #0]
 800b7b4:	04d2      	lsls	r2, r2, #19
 800b7b6:	d505      	bpl.n	800b7c4 <__sflush_r+0x80>
 800b7b8:	1c43      	adds	r3, r0, #1
 800b7ba:	d102      	bne.n	800b7c2 <__sflush_r+0x7e>
 800b7bc:	682b      	ldr	r3, [r5, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d100      	bne.n	800b7c4 <__sflush_r+0x80>
 800b7c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b7c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7c6:	602e      	str	r6, [r5, #0]
 800b7c8:	2900      	cmp	r1, #0
 800b7ca:	d017      	beq.n	800b7fc <__sflush_r+0xb8>
 800b7cc:	0023      	movs	r3, r4
 800b7ce:	3344      	adds	r3, #68	@ 0x44
 800b7d0:	4299      	cmp	r1, r3
 800b7d2:	d002      	beq.n	800b7da <__sflush_r+0x96>
 800b7d4:	0028      	movs	r0, r5
 800b7d6:	f7ff f869 	bl	800a8ac <_free_r>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7de:	e00d      	b.n	800b7fc <__sflush_r+0xb8>
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	0028      	movs	r0, r5
 800b7e4:	47b8      	blx	r7
 800b7e6:	0002      	movs	r2, r0
 800b7e8:	1c43      	adds	r3, r0, #1
 800b7ea:	d1c6      	bne.n	800b77a <__sflush_r+0x36>
 800b7ec:	682b      	ldr	r3, [r5, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d0c3      	beq.n	800b77a <__sflush_r+0x36>
 800b7f2:	2b1d      	cmp	r3, #29
 800b7f4:	d001      	beq.n	800b7fa <__sflush_r+0xb6>
 800b7f6:	2b16      	cmp	r3, #22
 800b7f8:	d11a      	bne.n	800b830 <__sflush_r+0xec>
 800b7fa:	602e      	str	r6, [r5, #0]
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	e01e      	b.n	800b83e <__sflush_r+0xfa>
 800b800:	690e      	ldr	r6, [r1, #16]
 800b802:	2e00      	cmp	r6, #0
 800b804:	d0fa      	beq.n	800b7fc <__sflush_r+0xb8>
 800b806:	680f      	ldr	r7, [r1, #0]
 800b808:	600e      	str	r6, [r1, #0]
 800b80a:	1bba      	subs	r2, r7, r6
 800b80c:	9201      	str	r2, [sp, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	079b      	lsls	r3, r3, #30
 800b812:	d100      	bne.n	800b816 <__sflush_r+0xd2>
 800b814:	694a      	ldr	r2, [r1, #20]
 800b816:	60a2      	str	r2, [r4, #8]
 800b818:	9b01      	ldr	r3, [sp, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	ddee      	ble.n	800b7fc <__sflush_r+0xb8>
 800b81e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b820:	0032      	movs	r2, r6
 800b822:	001f      	movs	r7, r3
 800b824:	0028      	movs	r0, r5
 800b826:	9b01      	ldr	r3, [sp, #4]
 800b828:	6a21      	ldr	r1, [r4, #32]
 800b82a:	47b8      	blx	r7
 800b82c:	2800      	cmp	r0, #0
 800b82e:	dc07      	bgt.n	800b840 <__sflush_r+0xfc>
 800b830:	89a2      	ldrh	r2, [r4, #12]
 800b832:	2340      	movs	r3, #64	@ 0x40
 800b834:	2001      	movs	r0, #1
 800b836:	4313      	orrs	r3, r2
 800b838:	b21b      	sxth	r3, r3
 800b83a:	81a3      	strh	r3, [r4, #12]
 800b83c:	4240      	negs	r0, r0
 800b83e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b840:	9b01      	ldr	r3, [sp, #4]
 800b842:	1836      	adds	r6, r6, r0
 800b844:	1a1b      	subs	r3, r3, r0
 800b846:	9301      	str	r3, [sp, #4]
 800b848:	e7e6      	b.n	800b818 <__sflush_r+0xd4>
 800b84a:	46c0      	nop			@ (mov r8, r8)
 800b84c:	dfbffffe 	.word	0xdfbffffe

0800b850 <_fflush_r>:
 800b850:	690b      	ldr	r3, [r1, #16]
 800b852:	b570      	push	{r4, r5, r6, lr}
 800b854:	0005      	movs	r5, r0
 800b856:	000c      	movs	r4, r1
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d102      	bne.n	800b862 <_fflush_r+0x12>
 800b85c:	2500      	movs	r5, #0
 800b85e:	0028      	movs	r0, r5
 800b860:	bd70      	pop	{r4, r5, r6, pc}
 800b862:	2800      	cmp	r0, #0
 800b864:	d004      	beq.n	800b870 <_fflush_r+0x20>
 800b866:	6a03      	ldr	r3, [r0, #32]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d101      	bne.n	800b870 <_fflush_r+0x20>
 800b86c:	f7fe f822 	bl	80098b4 <__sinit>
 800b870:	220c      	movs	r2, #12
 800b872:	5ea3      	ldrsh	r3, [r4, r2]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d0f1      	beq.n	800b85c <_fflush_r+0xc>
 800b878:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b87a:	07d2      	lsls	r2, r2, #31
 800b87c:	d404      	bmi.n	800b888 <_fflush_r+0x38>
 800b87e:	059b      	lsls	r3, r3, #22
 800b880:	d402      	bmi.n	800b888 <_fflush_r+0x38>
 800b882:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b884:	f7fe f983 	bl	8009b8e <__retarget_lock_acquire_recursive>
 800b888:	0028      	movs	r0, r5
 800b88a:	0021      	movs	r1, r4
 800b88c:	f7ff ff5a 	bl	800b744 <__sflush_r>
 800b890:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b892:	0005      	movs	r5, r0
 800b894:	07db      	lsls	r3, r3, #31
 800b896:	d4e2      	bmi.n	800b85e <_fflush_r+0xe>
 800b898:	89a3      	ldrh	r3, [r4, #12]
 800b89a:	059b      	lsls	r3, r3, #22
 800b89c:	d4df      	bmi.n	800b85e <_fflush_r+0xe>
 800b89e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8a0:	f7fe f976 	bl	8009b90 <__retarget_lock_release_recursive>
 800b8a4:	e7db      	b.n	800b85e <_fflush_r+0xe>

0800b8a6 <__swbuf_r>:
 800b8a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a8:	0006      	movs	r6, r0
 800b8aa:	000d      	movs	r5, r1
 800b8ac:	0014      	movs	r4, r2
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	d004      	beq.n	800b8bc <__swbuf_r+0x16>
 800b8b2:	6a03      	ldr	r3, [r0, #32]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d101      	bne.n	800b8bc <__swbuf_r+0x16>
 800b8b8:	f7fd fffc 	bl	80098b4 <__sinit>
 800b8bc:	69a3      	ldr	r3, [r4, #24]
 800b8be:	60a3      	str	r3, [r4, #8]
 800b8c0:	89a3      	ldrh	r3, [r4, #12]
 800b8c2:	071b      	lsls	r3, r3, #28
 800b8c4:	d502      	bpl.n	800b8cc <__swbuf_r+0x26>
 800b8c6:	6923      	ldr	r3, [r4, #16]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d109      	bne.n	800b8e0 <__swbuf_r+0x3a>
 800b8cc:	0021      	movs	r1, r4
 800b8ce:	0030      	movs	r0, r6
 800b8d0:	f000 f82c 	bl	800b92c <__swsetup_r>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d003      	beq.n	800b8e0 <__swbuf_r+0x3a>
 800b8d8:	2501      	movs	r5, #1
 800b8da:	426d      	negs	r5, r5
 800b8dc:	0028      	movs	r0, r5
 800b8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8e0:	6923      	ldr	r3, [r4, #16]
 800b8e2:	6820      	ldr	r0, [r4, #0]
 800b8e4:	b2ef      	uxtb	r7, r5
 800b8e6:	1ac0      	subs	r0, r0, r3
 800b8e8:	6963      	ldr	r3, [r4, #20]
 800b8ea:	b2ed      	uxtb	r5, r5
 800b8ec:	4283      	cmp	r3, r0
 800b8ee:	dc05      	bgt.n	800b8fc <__swbuf_r+0x56>
 800b8f0:	0021      	movs	r1, r4
 800b8f2:	0030      	movs	r0, r6
 800b8f4:	f7ff ffac 	bl	800b850 <_fflush_r>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	d1ed      	bne.n	800b8d8 <__swbuf_r+0x32>
 800b8fc:	68a3      	ldr	r3, [r4, #8]
 800b8fe:	3001      	adds	r0, #1
 800b900:	3b01      	subs	r3, #1
 800b902:	60a3      	str	r3, [r4, #8]
 800b904:	6823      	ldr	r3, [r4, #0]
 800b906:	1c5a      	adds	r2, r3, #1
 800b908:	6022      	str	r2, [r4, #0]
 800b90a:	701f      	strb	r7, [r3, #0]
 800b90c:	6963      	ldr	r3, [r4, #20]
 800b90e:	4283      	cmp	r3, r0
 800b910:	d004      	beq.n	800b91c <__swbuf_r+0x76>
 800b912:	89a3      	ldrh	r3, [r4, #12]
 800b914:	07db      	lsls	r3, r3, #31
 800b916:	d5e1      	bpl.n	800b8dc <__swbuf_r+0x36>
 800b918:	2d0a      	cmp	r5, #10
 800b91a:	d1df      	bne.n	800b8dc <__swbuf_r+0x36>
 800b91c:	0021      	movs	r1, r4
 800b91e:	0030      	movs	r0, r6
 800b920:	f7ff ff96 	bl	800b850 <_fflush_r>
 800b924:	2800      	cmp	r0, #0
 800b926:	d0d9      	beq.n	800b8dc <__swbuf_r+0x36>
 800b928:	e7d6      	b.n	800b8d8 <__swbuf_r+0x32>
	...

0800b92c <__swsetup_r>:
 800b92c:	4b2d      	ldr	r3, [pc, #180]	@ (800b9e4 <__swsetup_r+0xb8>)
 800b92e:	b570      	push	{r4, r5, r6, lr}
 800b930:	0005      	movs	r5, r0
 800b932:	6818      	ldr	r0, [r3, #0]
 800b934:	000c      	movs	r4, r1
 800b936:	2800      	cmp	r0, #0
 800b938:	d004      	beq.n	800b944 <__swsetup_r+0x18>
 800b93a:	6a03      	ldr	r3, [r0, #32]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <__swsetup_r+0x18>
 800b940:	f7fd ffb8 	bl	80098b4 <__sinit>
 800b944:	230c      	movs	r3, #12
 800b946:	5ee2      	ldrsh	r2, [r4, r3]
 800b948:	0713      	lsls	r3, r2, #28
 800b94a:	d423      	bmi.n	800b994 <__swsetup_r+0x68>
 800b94c:	06d3      	lsls	r3, r2, #27
 800b94e:	d407      	bmi.n	800b960 <__swsetup_r+0x34>
 800b950:	2309      	movs	r3, #9
 800b952:	602b      	str	r3, [r5, #0]
 800b954:	2340      	movs	r3, #64	@ 0x40
 800b956:	2001      	movs	r0, #1
 800b958:	4313      	orrs	r3, r2
 800b95a:	81a3      	strh	r3, [r4, #12]
 800b95c:	4240      	negs	r0, r0
 800b95e:	e03a      	b.n	800b9d6 <__swsetup_r+0xaa>
 800b960:	0752      	lsls	r2, r2, #29
 800b962:	d513      	bpl.n	800b98c <__swsetup_r+0x60>
 800b964:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b966:	2900      	cmp	r1, #0
 800b968:	d008      	beq.n	800b97c <__swsetup_r+0x50>
 800b96a:	0023      	movs	r3, r4
 800b96c:	3344      	adds	r3, #68	@ 0x44
 800b96e:	4299      	cmp	r1, r3
 800b970:	d002      	beq.n	800b978 <__swsetup_r+0x4c>
 800b972:	0028      	movs	r0, r5
 800b974:	f7fe ff9a 	bl	800a8ac <_free_r>
 800b978:	2300      	movs	r3, #0
 800b97a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b97c:	2224      	movs	r2, #36	@ 0x24
 800b97e:	89a3      	ldrh	r3, [r4, #12]
 800b980:	4393      	bics	r3, r2
 800b982:	81a3      	strh	r3, [r4, #12]
 800b984:	2300      	movs	r3, #0
 800b986:	6063      	str	r3, [r4, #4]
 800b988:	6923      	ldr	r3, [r4, #16]
 800b98a:	6023      	str	r3, [r4, #0]
 800b98c:	2308      	movs	r3, #8
 800b98e:	89a2      	ldrh	r2, [r4, #12]
 800b990:	4313      	orrs	r3, r2
 800b992:	81a3      	strh	r3, [r4, #12]
 800b994:	6923      	ldr	r3, [r4, #16]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d10b      	bne.n	800b9b2 <__swsetup_r+0x86>
 800b99a:	21a0      	movs	r1, #160	@ 0xa0
 800b99c:	2280      	movs	r2, #128	@ 0x80
 800b99e:	89a3      	ldrh	r3, [r4, #12]
 800b9a0:	0089      	lsls	r1, r1, #2
 800b9a2:	0092      	lsls	r2, r2, #2
 800b9a4:	400b      	ands	r3, r1
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d003      	beq.n	800b9b2 <__swsetup_r+0x86>
 800b9aa:	0021      	movs	r1, r4
 800b9ac:	0028      	movs	r0, r5
 800b9ae:	f000 f91f 	bl	800bbf0 <__smakebuf_r>
 800b9b2:	230c      	movs	r3, #12
 800b9b4:	5ee2      	ldrsh	r2, [r4, r3]
 800b9b6:	2101      	movs	r1, #1
 800b9b8:	0013      	movs	r3, r2
 800b9ba:	400b      	ands	r3, r1
 800b9bc:	420a      	tst	r2, r1
 800b9be:	d00b      	beq.n	800b9d8 <__swsetup_r+0xac>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	60a3      	str	r3, [r4, #8]
 800b9c4:	6963      	ldr	r3, [r4, #20]
 800b9c6:	425b      	negs	r3, r3
 800b9c8:	61a3      	str	r3, [r4, #24]
 800b9ca:	2000      	movs	r0, #0
 800b9cc:	6923      	ldr	r3, [r4, #16]
 800b9ce:	4283      	cmp	r3, r0
 800b9d0:	d101      	bne.n	800b9d6 <__swsetup_r+0xaa>
 800b9d2:	0613      	lsls	r3, r2, #24
 800b9d4:	d4be      	bmi.n	800b954 <__swsetup_r+0x28>
 800b9d6:	bd70      	pop	{r4, r5, r6, pc}
 800b9d8:	0791      	lsls	r1, r2, #30
 800b9da:	d400      	bmi.n	800b9de <__swsetup_r+0xb2>
 800b9dc:	6963      	ldr	r3, [r4, #20]
 800b9de:	60a3      	str	r3, [r4, #8]
 800b9e0:	e7f3      	b.n	800b9ca <__swsetup_r+0x9e>
 800b9e2:	46c0      	nop			@ (mov r8, r8)
 800b9e4:	20000030 	.word	0x20000030

0800b9e8 <memmove>:
 800b9e8:	b510      	push	{r4, lr}
 800b9ea:	4288      	cmp	r0, r1
 800b9ec:	d806      	bhi.n	800b9fc <memmove+0x14>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d008      	beq.n	800ba06 <memmove+0x1e>
 800b9f4:	5ccc      	ldrb	r4, [r1, r3]
 800b9f6:	54c4      	strb	r4, [r0, r3]
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	e7f9      	b.n	800b9f0 <memmove+0x8>
 800b9fc:	188b      	adds	r3, r1, r2
 800b9fe:	4298      	cmp	r0, r3
 800ba00:	d2f5      	bcs.n	800b9ee <memmove+0x6>
 800ba02:	3a01      	subs	r2, #1
 800ba04:	d200      	bcs.n	800ba08 <memmove+0x20>
 800ba06:	bd10      	pop	{r4, pc}
 800ba08:	5c8b      	ldrb	r3, [r1, r2]
 800ba0a:	5483      	strb	r3, [r0, r2]
 800ba0c:	e7f9      	b.n	800ba02 <memmove+0x1a>
	...

0800ba10 <_sbrk_r>:
 800ba10:	2300      	movs	r3, #0
 800ba12:	b570      	push	{r4, r5, r6, lr}
 800ba14:	4d06      	ldr	r5, [pc, #24]	@ (800ba30 <_sbrk_r+0x20>)
 800ba16:	0004      	movs	r4, r0
 800ba18:	0008      	movs	r0, r1
 800ba1a:	602b      	str	r3, [r5, #0]
 800ba1c:	f7f8 f9d4 	bl	8003dc8 <_sbrk>
 800ba20:	1c43      	adds	r3, r0, #1
 800ba22:	d103      	bne.n	800ba2c <_sbrk_r+0x1c>
 800ba24:	682b      	ldr	r3, [r5, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d000      	beq.n	800ba2c <_sbrk_r+0x1c>
 800ba2a:	6023      	str	r3, [r4, #0]
 800ba2c:	bd70      	pop	{r4, r5, r6, pc}
 800ba2e:	46c0      	nop			@ (mov r8, r8)
 800ba30:	20000e4c 	.word	0x20000e4c

0800ba34 <memcpy>:
 800ba34:	2300      	movs	r3, #0
 800ba36:	b510      	push	{r4, lr}
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d100      	bne.n	800ba3e <memcpy+0xa>
 800ba3c:	bd10      	pop	{r4, pc}
 800ba3e:	5ccc      	ldrb	r4, [r1, r3]
 800ba40:	54c4      	strb	r4, [r0, r3]
 800ba42:	3301      	adds	r3, #1
 800ba44:	e7f8      	b.n	800ba38 <memcpy+0x4>
	...

0800ba48 <__assert_func>:
 800ba48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ba4a:	0014      	movs	r4, r2
 800ba4c:	001a      	movs	r2, r3
 800ba4e:	4b09      	ldr	r3, [pc, #36]	@ (800ba74 <__assert_func+0x2c>)
 800ba50:	0005      	movs	r5, r0
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	000e      	movs	r6, r1
 800ba56:	68d8      	ldr	r0, [r3, #12]
 800ba58:	4b07      	ldr	r3, [pc, #28]	@ (800ba78 <__assert_func+0x30>)
 800ba5a:	2c00      	cmp	r4, #0
 800ba5c:	d101      	bne.n	800ba62 <__assert_func+0x1a>
 800ba5e:	4b07      	ldr	r3, [pc, #28]	@ (800ba7c <__assert_func+0x34>)
 800ba60:	001c      	movs	r4, r3
 800ba62:	4907      	ldr	r1, [pc, #28]	@ (800ba80 <__assert_func+0x38>)
 800ba64:	9301      	str	r3, [sp, #4]
 800ba66:	9402      	str	r4, [sp, #8]
 800ba68:	002b      	movs	r3, r5
 800ba6a:	9600      	str	r6, [sp, #0]
 800ba6c:	f000 f886 	bl	800bb7c <fiprintf>
 800ba70:	f000 f924 	bl	800bcbc <abort>
 800ba74:	20000030 	.word	0x20000030
 800ba78:	0800c3d3 	.word	0x0800c3d3
 800ba7c:	0800c40e 	.word	0x0800c40e
 800ba80:	0800c3e0 	.word	0x0800c3e0

0800ba84 <_calloc_r>:
 800ba84:	b570      	push	{r4, r5, r6, lr}
 800ba86:	0c0b      	lsrs	r3, r1, #16
 800ba88:	0c15      	lsrs	r5, r2, #16
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d11e      	bne.n	800bacc <_calloc_r+0x48>
 800ba8e:	2d00      	cmp	r5, #0
 800ba90:	d10c      	bne.n	800baac <_calloc_r+0x28>
 800ba92:	b289      	uxth	r1, r1
 800ba94:	b294      	uxth	r4, r2
 800ba96:	434c      	muls	r4, r1
 800ba98:	0021      	movs	r1, r4
 800ba9a:	f7fe ff7d 	bl	800a998 <_malloc_r>
 800ba9e:	1e05      	subs	r5, r0, #0
 800baa0:	d01a      	beq.n	800bad8 <_calloc_r+0x54>
 800baa2:	0022      	movs	r2, r4
 800baa4:	2100      	movs	r1, #0
 800baa6:	f7fd ffed 	bl	8009a84 <memset>
 800baaa:	e016      	b.n	800bada <_calloc_r+0x56>
 800baac:	1c2b      	adds	r3, r5, #0
 800baae:	1c0c      	adds	r4, r1, #0
 800bab0:	b289      	uxth	r1, r1
 800bab2:	b292      	uxth	r2, r2
 800bab4:	434a      	muls	r2, r1
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	b2a1      	uxth	r1, r4
 800baba:	4359      	muls	r1, r3
 800babc:	0c14      	lsrs	r4, r2, #16
 800babe:	190c      	adds	r4, r1, r4
 800bac0:	0c23      	lsrs	r3, r4, #16
 800bac2:	d107      	bne.n	800bad4 <_calloc_r+0x50>
 800bac4:	0424      	lsls	r4, r4, #16
 800bac6:	b292      	uxth	r2, r2
 800bac8:	4314      	orrs	r4, r2
 800baca:	e7e5      	b.n	800ba98 <_calloc_r+0x14>
 800bacc:	2d00      	cmp	r5, #0
 800bace:	d101      	bne.n	800bad4 <_calloc_r+0x50>
 800bad0:	1c14      	adds	r4, r2, #0
 800bad2:	e7ed      	b.n	800bab0 <_calloc_r+0x2c>
 800bad4:	230c      	movs	r3, #12
 800bad6:	6003      	str	r3, [r0, #0]
 800bad8:	2500      	movs	r5, #0
 800bada:	0028      	movs	r0, r5
 800badc:	bd70      	pop	{r4, r5, r6, pc}

0800bade <__ascii_mbtowc>:
 800bade:	b082      	sub	sp, #8
 800bae0:	2900      	cmp	r1, #0
 800bae2:	d100      	bne.n	800bae6 <__ascii_mbtowc+0x8>
 800bae4:	a901      	add	r1, sp, #4
 800bae6:	1e10      	subs	r0, r2, #0
 800bae8:	d006      	beq.n	800baf8 <__ascii_mbtowc+0x1a>
 800baea:	2b00      	cmp	r3, #0
 800baec:	d006      	beq.n	800bafc <__ascii_mbtowc+0x1e>
 800baee:	7813      	ldrb	r3, [r2, #0]
 800baf0:	600b      	str	r3, [r1, #0]
 800baf2:	7810      	ldrb	r0, [r2, #0]
 800baf4:	1e43      	subs	r3, r0, #1
 800baf6:	4198      	sbcs	r0, r3
 800baf8:	b002      	add	sp, #8
 800bafa:	4770      	bx	lr
 800bafc:	2002      	movs	r0, #2
 800bafe:	4240      	negs	r0, r0
 800bb00:	e7fa      	b.n	800baf8 <__ascii_mbtowc+0x1a>

0800bb02 <_realloc_r>:
 800bb02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb04:	0006      	movs	r6, r0
 800bb06:	000c      	movs	r4, r1
 800bb08:	0015      	movs	r5, r2
 800bb0a:	2900      	cmp	r1, #0
 800bb0c:	d105      	bne.n	800bb1a <_realloc_r+0x18>
 800bb0e:	0011      	movs	r1, r2
 800bb10:	f7fe ff42 	bl	800a998 <_malloc_r>
 800bb14:	0004      	movs	r4, r0
 800bb16:	0020      	movs	r0, r4
 800bb18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb1a:	2a00      	cmp	r2, #0
 800bb1c:	d103      	bne.n	800bb26 <_realloc_r+0x24>
 800bb1e:	f7fe fec5 	bl	800a8ac <_free_r>
 800bb22:	2400      	movs	r4, #0
 800bb24:	e7f7      	b.n	800bb16 <_realloc_r+0x14>
 800bb26:	f000 f8d0 	bl	800bcca <_malloc_usable_size_r>
 800bb2a:	0007      	movs	r7, r0
 800bb2c:	4285      	cmp	r5, r0
 800bb2e:	d802      	bhi.n	800bb36 <_realloc_r+0x34>
 800bb30:	0843      	lsrs	r3, r0, #1
 800bb32:	42ab      	cmp	r3, r5
 800bb34:	d3ef      	bcc.n	800bb16 <_realloc_r+0x14>
 800bb36:	0029      	movs	r1, r5
 800bb38:	0030      	movs	r0, r6
 800bb3a:	f7fe ff2d 	bl	800a998 <_malloc_r>
 800bb3e:	9001      	str	r0, [sp, #4]
 800bb40:	2800      	cmp	r0, #0
 800bb42:	d0ee      	beq.n	800bb22 <_realloc_r+0x20>
 800bb44:	002a      	movs	r2, r5
 800bb46:	42bd      	cmp	r5, r7
 800bb48:	d900      	bls.n	800bb4c <_realloc_r+0x4a>
 800bb4a:	003a      	movs	r2, r7
 800bb4c:	0021      	movs	r1, r4
 800bb4e:	9801      	ldr	r0, [sp, #4]
 800bb50:	f7ff ff70 	bl	800ba34 <memcpy>
 800bb54:	0021      	movs	r1, r4
 800bb56:	0030      	movs	r0, r6
 800bb58:	f7fe fea8 	bl	800a8ac <_free_r>
 800bb5c:	9c01      	ldr	r4, [sp, #4]
 800bb5e:	e7da      	b.n	800bb16 <_realloc_r+0x14>

0800bb60 <__ascii_wctomb>:
 800bb60:	0003      	movs	r3, r0
 800bb62:	1e08      	subs	r0, r1, #0
 800bb64:	d005      	beq.n	800bb72 <__ascii_wctomb+0x12>
 800bb66:	2aff      	cmp	r2, #255	@ 0xff
 800bb68:	d904      	bls.n	800bb74 <__ascii_wctomb+0x14>
 800bb6a:	228a      	movs	r2, #138	@ 0x8a
 800bb6c:	2001      	movs	r0, #1
 800bb6e:	601a      	str	r2, [r3, #0]
 800bb70:	4240      	negs	r0, r0
 800bb72:	4770      	bx	lr
 800bb74:	2001      	movs	r0, #1
 800bb76:	700a      	strb	r2, [r1, #0]
 800bb78:	e7fb      	b.n	800bb72 <__ascii_wctomb+0x12>
	...

0800bb7c <fiprintf>:
 800bb7c:	b40e      	push	{r1, r2, r3}
 800bb7e:	b517      	push	{r0, r1, r2, r4, lr}
 800bb80:	4c05      	ldr	r4, [pc, #20]	@ (800bb98 <fiprintf+0x1c>)
 800bb82:	ab05      	add	r3, sp, #20
 800bb84:	cb04      	ldmia	r3!, {r2}
 800bb86:	0001      	movs	r1, r0
 800bb88:	6820      	ldr	r0, [r4, #0]
 800bb8a:	9301      	str	r3, [sp, #4]
 800bb8c:	f7ff fcbe 	bl	800b50c <_vfiprintf_r>
 800bb90:	bc1e      	pop	{r1, r2, r3, r4}
 800bb92:	bc08      	pop	{r3}
 800bb94:	b003      	add	sp, #12
 800bb96:	4718      	bx	r3
 800bb98:	20000030 	.word	0x20000030

0800bb9c <__swhatbuf_r>:
 800bb9c:	b570      	push	{r4, r5, r6, lr}
 800bb9e:	000e      	movs	r6, r1
 800bba0:	001d      	movs	r5, r3
 800bba2:	230e      	movs	r3, #14
 800bba4:	5ec9      	ldrsh	r1, [r1, r3]
 800bba6:	0014      	movs	r4, r2
 800bba8:	b096      	sub	sp, #88	@ 0x58
 800bbaa:	2900      	cmp	r1, #0
 800bbac:	da0c      	bge.n	800bbc8 <__swhatbuf_r+0x2c>
 800bbae:	89b2      	ldrh	r2, [r6, #12]
 800bbb0:	2380      	movs	r3, #128	@ 0x80
 800bbb2:	0011      	movs	r1, r2
 800bbb4:	4019      	ands	r1, r3
 800bbb6:	421a      	tst	r2, r3
 800bbb8:	d114      	bne.n	800bbe4 <__swhatbuf_r+0x48>
 800bbba:	2380      	movs	r3, #128	@ 0x80
 800bbbc:	00db      	lsls	r3, r3, #3
 800bbbe:	2000      	movs	r0, #0
 800bbc0:	6029      	str	r1, [r5, #0]
 800bbc2:	6023      	str	r3, [r4, #0]
 800bbc4:	b016      	add	sp, #88	@ 0x58
 800bbc6:	bd70      	pop	{r4, r5, r6, pc}
 800bbc8:	466a      	mov	r2, sp
 800bbca:	f000 f853 	bl	800bc74 <_fstat_r>
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	dbed      	blt.n	800bbae <__swhatbuf_r+0x12>
 800bbd2:	23f0      	movs	r3, #240	@ 0xf0
 800bbd4:	9901      	ldr	r1, [sp, #4]
 800bbd6:	021b      	lsls	r3, r3, #8
 800bbd8:	4019      	ands	r1, r3
 800bbda:	4b04      	ldr	r3, [pc, #16]	@ (800bbec <__swhatbuf_r+0x50>)
 800bbdc:	18c9      	adds	r1, r1, r3
 800bbde:	424b      	negs	r3, r1
 800bbe0:	4159      	adcs	r1, r3
 800bbe2:	e7ea      	b.n	800bbba <__swhatbuf_r+0x1e>
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	2340      	movs	r3, #64	@ 0x40
 800bbe8:	e7e9      	b.n	800bbbe <__swhatbuf_r+0x22>
 800bbea:	46c0      	nop			@ (mov r8, r8)
 800bbec:	ffffe000 	.word	0xffffe000

0800bbf0 <__smakebuf_r>:
 800bbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbf2:	2602      	movs	r6, #2
 800bbf4:	898b      	ldrh	r3, [r1, #12]
 800bbf6:	0005      	movs	r5, r0
 800bbf8:	000c      	movs	r4, r1
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	4233      	tst	r3, r6
 800bbfe:	d007      	beq.n	800bc10 <__smakebuf_r+0x20>
 800bc00:	0023      	movs	r3, r4
 800bc02:	3347      	adds	r3, #71	@ 0x47
 800bc04:	6023      	str	r3, [r4, #0]
 800bc06:	6123      	str	r3, [r4, #16]
 800bc08:	2301      	movs	r3, #1
 800bc0a:	6163      	str	r3, [r4, #20]
 800bc0c:	b005      	add	sp, #20
 800bc0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc10:	ab03      	add	r3, sp, #12
 800bc12:	aa02      	add	r2, sp, #8
 800bc14:	f7ff ffc2 	bl	800bb9c <__swhatbuf_r>
 800bc18:	9f02      	ldr	r7, [sp, #8]
 800bc1a:	9001      	str	r0, [sp, #4]
 800bc1c:	0039      	movs	r1, r7
 800bc1e:	0028      	movs	r0, r5
 800bc20:	f7fe feba 	bl	800a998 <_malloc_r>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d108      	bne.n	800bc3a <__smakebuf_r+0x4a>
 800bc28:	220c      	movs	r2, #12
 800bc2a:	5ea3      	ldrsh	r3, [r4, r2]
 800bc2c:	059a      	lsls	r2, r3, #22
 800bc2e:	d4ed      	bmi.n	800bc0c <__smakebuf_r+0x1c>
 800bc30:	2203      	movs	r2, #3
 800bc32:	4393      	bics	r3, r2
 800bc34:	431e      	orrs	r6, r3
 800bc36:	81a6      	strh	r6, [r4, #12]
 800bc38:	e7e2      	b.n	800bc00 <__smakebuf_r+0x10>
 800bc3a:	2380      	movs	r3, #128	@ 0x80
 800bc3c:	89a2      	ldrh	r2, [r4, #12]
 800bc3e:	6020      	str	r0, [r4, #0]
 800bc40:	4313      	orrs	r3, r2
 800bc42:	81a3      	strh	r3, [r4, #12]
 800bc44:	9b03      	ldr	r3, [sp, #12]
 800bc46:	6120      	str	r0, [r4, #16]
 800bc48:	6167      	str	r7, [r4, #20]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00c      	beq.n	800bc68 <__smakebuf_r+0x78>
 800bc4e:	0028      	movs	r0, r5
 800bc50:	230e      	movs	r3, #14
 800bc52:	5ee1      	ldrsh	r1, [r4, r3]
 800bc54:	f000 f820 	bl	800bc98 <_isatty_r>
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	d005      	beq.n	800bc68 <__smakebuf_r+0x78>
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	89a2      	ldrh	r2, [r4, #12]
 800bc60:	439a      	bics	r2, r3
 800bc62:	3b02      	subs	r3, #2
 800bc64:	4313      	orrs	r3, r2
 800bc66:	81a3      	strh	r3, [r4, #12]
 800bc68:	89a3      	ldrh	r3, [r4, #12]
 800bc6a:	9a01      	ldr	r2, [sp, #4]
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	81a3      	strh	r3, [r4, #12]
 800bc70:	e7cc      	b.n	800bc0c <__smakebuf_r+0x1c>
	...

0800bc74 <_fstat_r>:
 800bc74:	2300      	movs	r3, #0
 800bc76:	b570      	push	{r4, r5, r6, lr}
 800bc78:	4d06      	ldr	r5, [pc, #24]	@ (800bc94 <_fstat_r+0x20>)
 800bc7a:	0004      	movs	r4, r0
 800bc7c:	0008      	movs	r0, r1
 800bc7e:	0011      	movs	r1, r2
 800bc80:	602b      	str	r3, [r5, #0]
 800bc82:	f7f8 f87f 	bl	8003d84 <_fstat>
 800bc86:	1c43      	adds	r3, r0, #1
 800bc88:	d103      	bne.n	800bc92 <_fstat_r+0x1e>
 800bc8a:	682b      	ldr	r3, [r5, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d000      	beq.n	800bc92 <_fstat_r+0x1e>
 800bc90:	6023      	str	r3, [r4, #0]
 800bc92:	bd70      	pop	{r4, r5, r6, pc}
 800bc94:	20000e4c 	.word	0x20000e4c

0800bc98 <_isatty_r>:
 800bc98:	2300      	movs	r3, #0
 800bc9a:	b570      	push	{r4, r5, r6, lr}
 800bc9c:	4d06      	ldr	r5, [pc, #24]	@ (800bcb8 <_isatty_r+0x20>)
 800bc9e:	0004      	movs	r4, r0
 800bca0:	0008      	movs	r0, r1
 800bca2:	602b      	str	r3, [r5, #0]
 800bca4:	f7f8 f87c 	bl	8003da0 <_isatty>
 800bca8:	1c43      	adds	r3, r0, #1
 800bcaa:	d103      	bne.n	800bcb4 <_isatty_r+0x1c>
 800bcac:	682b      	ldr	r3, [r5, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d000      	beq.n	800bcb4 <_isatty_r+0x1c>
 800bcb2:	6023      	str	r3, [r4, #0]
 800bcb4:	bd70      	pop	{r4, r5, r6, pc}
 800bcb6:	46c0      	nop			@ (mov r8, r8)
 800bcb8:	20000e4c 	.word	0x20000e4c

0800bcbc <abort>:
 800bcbc:	2006      	movs	r0, #6
 800bcbe:	b510      	push	{r4, lr}
 800bcc0:	f000 f834 	bl	800bd2c <raise>
 800bcc4:	2001      	movs	r0, #1
 800bcc6:	f7f8 f829 	bl	8003d1c <_exit>

0800bcca <_malloc_usable_size_r>:
 800bcca:	1f0b      	subs	r3, r1, #4
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	1f18      	subs	r0, r3, #4
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	da01      	bge.n	800bcd8 <_malloc_usable_size_r+0xe>
 800bcd4:	580b      	ldr	r3, [r1, r0]
 800bcd6:	18c0      	adds	r0, r0, r3
 800bcd8:	4770      	bx	lr

0800bcda <_raise_r>:
 800bcda:	b570      	push	{r4, r5, r6, lr}
 800bcdc:	0004      	movs	r4, r0
 800bcde:	000d      	movs	r5, r1
 800bce0:	291f      	cmp	r1, #31
 800bce2:	d904      	bls.n	800bcee <_raise_r+0x14>
 800bce4:	2316      	movs	r3, #22
 800bce6:	6003      	str	r3, [r0, #0]
 800bce8:	2001      	movs	r0, #1
 800bcea:	4240      	negs	r0, r0
 800bcec:	bd70      	pop	{r4, r5, r6, pc}
 800bcee:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d004      	beq.n	800bcfe <_raise_r+0x24>
 800bcf4:	008a      	lsls	r2, r1, #2
 800bcf6:	189b      	adds	r3, r3, r2
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	2a00      	cmp	r2, #0
 800bcfc:	d108      	bne.n	800bd10 <_raise_r+0x36>
 800bcfe:	0020      	movs	r0, r4
 800bd00:	f000 f830 	bl	800bd64 <_getpid_r>
 800bd04:	002a      	movs	r2, r5
 800bd06:	0001      	movs	r1, r0
 800bd08:	0020      	movs	r0, r4
 800bd0a:	f000 f819 	bl	800bd40 <_kill_r>
 800bd0e:	e7ed      	b.n	800bcec <_raise_r+0x12>
 800bd10:	2a01      	cmp	r2, #1
 800bd12:	d009      	beq.n	800bd28 <_raise_r+0x4e>
 800bd14:	1c51      	adds	r1, r2, #1
 800bd16:	d103      	bne.n	800bd20 <_raise_r+0x46>
 800bd18:	2316      	movs	r3, #22
 800bd1a:	6003      	str	r3, [r0, #0]
 800bd1c:	2001      	movs	r0, #1
 800bd1e:	e7e5      	b.n	800bcec <_raise_r+0x12>
 800bd20:	2100      	movs	r1, #0
 800bd22:	0028      	movs	r0, r5
 800bd24:	6019      	str	r1, [r3, #0]
 800bd26:	4790      	blx	r2
 800bd28:	2000      	movs	r0, #0
 800bd2a:	e7df      	b.n	800bcec <_raise_r+0x12>

0800bd2c <raise>:
 800bd2c:	b510      	push	{r4, lr}
 800bd2e:	4b03      	ldr	r3, [pc, #12]	@ (800bd3c <raise+0x10>)
 800bd30:	0001      	movs	r1, r0
 800bd32:	6818      	ldr	r0, [r3, #0]
 800bd34:	f7ff ffd1 	bl	800bcda <_raise_r>
 800bd38:	bd10      	pop	{r4, pc}
 800bd3a:	46c0      	nop			@ (mov r8, r8)
 800bd3c:	20000030 	.word	0x20000030

0800bd40 <_kill_r>:
 800bd40:	2300      	movs	r3, #0
 800bd42:	b570      	push	{r4, r5, r6, lr}
 800bd44:	4d06      	ldr	r5, [pc, #24]	@ (800bd60 <_kill_r+0x20>)
 800bd46:	0004      	movs	r4, r0
 800bd48:	0008      	movs	r0, r1
 800bd4a:	0011      	movs	r1, r2
 800bd4c:	602b      	str	r3, [r5, #0]
 800bd4e:	f7f7 ffd5 	bl	8003cfc <_kill>
 800bd52:	1c43      	adds	r3, r0, #1
 800bd54:	d103      	bne.n	800bd5e <_kill_r+0x1e>
 800bd56:	682b      	ldr	r3, [r5, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d000      	beq.n	800bd5e <_kill_r+0x1e>
 800bd5c:	6023      	str	r3, [r4, #0]
 800bd5e:	bd70      	pop	{r4, r5, r6, pc}
 800bd60:	20000e4c 	.word	0x20000e4c

0800bd64 <_getpid_r>:
 800bd64:	b510      	push	{r4, lr}
 800bd66:	f7f7 ffc3 	bl	8003cf0 <_getpid>
 800bd6a:	bd10      	pop	{r4, pc}

0800bd6c <_init>:
 800bd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd6e:	46c0      	nop			@ (mov r8, r8)
 800bd70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd72:	bc08      	pop	{r3}
 800bd74:	469e      	mov	lr, r3
 800bd76:	4770      	bx	lr

0800bd78 <_fini>:
 800bd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7a:	46c0      	nop			@ (mov r8, r8)
 800bd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd7e:	bc08      	pop	{r3}
 800bd80:	469e      	mov	lr, r3
 800bd82:	4770      	bx	lr
